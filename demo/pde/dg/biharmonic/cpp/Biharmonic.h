// This code conforms with the UFC specification version 1.0
// and was automatically generated by FFC version 0.6.2.
//
// Warning: This code was generated with the option '-l dolfin'
// and contains DOLFIN-specific wrappers that depend on DOLFIN.

#ifndef __BIHARMONIC_H
#define __BIHARMONIC_H

#include <cmath>
#include <stdexcept>
#include <fstream>
#include <ufc.h>
    
/// This class defines the interface for a finite element.

class biharmonic_0_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  biharmonic_0_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~biharmonic_0_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', 'triangle', 2)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 6;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
      
    // Compute determinant of Jacobian
    const double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Get coordinates and map to the reference (UFC) element
    double x = (element_coordinates[0][1]*element_coordinates[2][0] -\
                element_coordinates[0][0]*element_coordinates[2][1] +\
                J_11*coordinates[0] - J_01*coordinates[1]) / detJ;
    double y = (element_coordinates[1][1]*element_coordinates[0][0] -\
                element_coordinates[1][0]*element_coordinates[0][1] -\
                J_10*coordinates[0] + J_00*coordinates[1]) / detJ;
    
    // Map coordinates to the reference square
    if (std::abs(y - 1.0) < 1e-14)
      x = -1.0;
    else
      x = 2.0 *x/(1.0 - y) - 1.0;
    y = 2.0*y - 1.0;
    
    // Reset values
    *values = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_2_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.707106781186548*psitilde_a_0*scalings_y_0*psitilde_bs_0_0;
    const double basisvalue1 = 1.73205080756888*psitilde_a_1*scalings_y_1*psitilde_bs_1_0;
    const double basisvalue2 = psitilde_a_0*scalings_y_0*psitilde_bs_0_1;
    const double basisvalue3 = 2.73861278752583*psitilde_a_2*scalings_y_2*psitilde_bs_2_0;
    const double basisvalue4 = 2.12132034355964*psitilde_a_1*scalings_y_1*psitilde_bs_1_1;
    const double basisvalue5 = 1.22474487139159*psitilde_a_0*scalings_y_0*psitilde_bs_0_2;
    
    // Table(s) of coefficients
    const static double coefficients0[6][6] = \
    {{0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582063, 0.0544331053951817},
    {0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582064, 0.0544331053951818},
    {0, 0, 0.2, 0, 0, 0.163299316185545},
    {0.471404520791032, 0.23094010767585, 0.133333333333333, 0, 0.188561808316413, -0.163299316185545},
    {0.471404520791032, -0.23094010767585, 0.133333333333333, 0, -0.188561808316413, -0.163299316185545},
    {0.471404520791032, 0, -0.266666666666667, -0.243432247780074, 0, 0.0544331053951817}};
    
    // Extract relevant coefficients
    const double coeff0_0 = coefficients0[dof][0];
    const double coeff0_1 = coefficients0[dof][1];
    const double coeff0_2 = coefficients0[dof][2];
    const double coeff0_3 = coefficients0[dof][3];
    const double coeff0_4 = coefficients0[dof][4];
    const double coeff0_5 = coefficients0[dof][5];
    
    // Compute value(s)
    *values = coeff0_0*basisvalue0 + coeff0_1*basisvalue1 + coeff0_2*basisvalue2 + coeff0_3*basisvalue3 + coeff0_4*basisvalue4 + coeff0_5*basisvalue5;
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis() is not yet implemented.");
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
      
    // Compute determinant of Jacobian
    const double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Get coordinates and map to the reference (UFC) element
    double x = (element_coordinates[0][1]*element_coordinates[2][0] -\
                element_coordinates[0][0]*element_coordinates[2][1] +\
                J_11*coordinates[0] - J_01*coordinates[1]) / detJ;
    double y = (element_coordinates[1][1]*element_coordinates[0][0] -\
                element_coordinates[1][0]*element_coordinates[0][1] -\
                J_10*coordinates[0] + J_00*coordinates[1]) / detJ;
    
    // Map coordinates to the reference square
    if (std::abs(y - 1.0) < 1e-14)
      x = -1.0;
    else
      x = 2.0 *x/(1.0 - y) - 1.0;
    y = 2.0*y - 1.0;
    
    // Compute number of derivatives
    unsigned int num_derivatives = 1;
    
    for (unsigned int j = 0; j < n; j++)
      num_derivatives *= 2;
    
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      combinations[j] = new unsigned int [n];
      for (unsigned int k = 0; k < n; k++)
        combinations[j][k] = 0;
    }
        
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] =  {{J_11 / detJ, -J_01 / detJ}, {-J_10 / detJ, J_00 / detJ}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values
    for (unsigned int j = 0; j < 1*num_derivatives; j++)
      values[j] = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_2_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.707106781186548*psitilde_a_0*scalings_y_0*psitilde_bs_0_0;
    const double basisvalue1 = 1.73205080756888*psitilde_a_1*scalings_y_1*psitilde_bs_1_0;
    const double basisvalue2 = psitilde_a_0*scalings_y_0*psitilde_bs_0_1;
    const double basisvalue3 = 2.73861278752583*psitilde_a_2*scalings_y_2*psitilde_bs_2_0;
    const double basisvalue4 = 2.12132034355964*psitilde_a_1*scalings_y_1*psitilde_bs_1_1;
    const double basisvalue5 = 1.22474487139159*psitilde_a_0*scalings_y_0*psitilde_bs_0_2;
    
    // Table(s) of coefficients
    const static double coefficients0[6][6] = \
    {{0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582063, 0.0544331053951817},
    {0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582064, 0.0544331053951818},
    {0, 0, 0.2, 0, 0, 0.163299316185545},
    {0.471404520791032, 0.23094010767585, 0.133333333333333, 0, 0.188561808316413, -0.163299316185545},
    {0.471404520791032, -0.23094010767585, 0.133333333333333, 0, -0.188561808316413, -0.163299316185545},
    {0.471404520791032, 0, -0.266666666666667, -0.243432247780074, 0, 0.0544331053951817}};
    
    // Interesting (new) part
    // Tables of derivatives of the polynomial base (transpose)
    const static double dmats0[6][6] = \
    {{0, 0, 0, 0, 0, 0},
    {4.89897948556636, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0},
    {0, 9.48683298050514, 0, 0, 0, 0},
    {4, 0, 7.07106781186548, 0, 0, 0},
    {0, 0, 0, 0, 0, 0}};
    
    const static double dmats1[6][6] = \
    {{0, 0, 0, 0, 0, 0},
    {2.44948974278318, 0, 0, 0, 0, 0},
    {4.24264068711928, 0, 0, 0, 0, 0},
    {2.58198889747161, 4.74341649025257, -0.912870929175277, 0, 0, 0},
    {2, 6.12372435695795, 3.53553390593274, 0, 0, 0},
    {-2.3094010767585, 0, 8.16496580927726, 0, 0, 0}};
    
    // Compute reference derivatives
    // Declare pointer to array of derivatives on FIAT element
    double *derivatives = new double [num_derivatives];
    
    // Declare coefficients
    double coeff0_0 = 0;
    double coeff0_1 = 0;
    double coeff0_2 = 0;
    double coeff0_3 = 0;
    double coeff0_4 = 0;
    double coeff0_5 = 0;
    
    // Declare new coefficients
    double new_coeff0_0 = 0;
    double new_coeff0_1 = 0;
    double new_coeff0_2 = 0;
    double new_coeff0_3 = 0;
    double new_coeff0_4 = 0;
    double new_coeff0_5 = 0;
    
    // Loop possible derivatives
    for (unsigned int deriv_num = 0; deriv_num < num_derivatives; deriv_num++)
    {
      // Get values from coefficients array
      new_coeff0_0 = coefficients0[dof][0];
      new_coeff0_1 = coefficients0[dof][1];
      new_coeff0_2 = coefficients0[dof][2];
      new_coeff0_3 = coefficients0[dof][3];
      new_coeff0_4 = coefficients0[dof][4];
      new_coeff0_5 = coefficients0[dof][5];
    
      // Loop derivative order
      for (unsigned int j = 0; j < n; j++)
      {
        // Update old coefficients
        coeff0_0 = new_coeff0_0;
        coeff0_1 = new_coeff0_1;
        coeff0_2 = new_coeff0_2;
        coeff0_3 = new_coeff0_3;
        coeff0_4 = new_coeff0_4;
        coeff0_5 = new_coeff0_5;
    
        if(combinations[deriv_num][j] == 0)
        {
          new_coeff0_0 = coeff0_0*dmats0[0][0] + coeff0_1*dmats0[1][0] + coeff0_2*dmats0[2][0] + coeff0_3*dmats0[3][0] + coeff0_4*dmats0[4][0] + coeff0_5*dmats0[5][0];
          new_coeff0_1 = coeff0_0*dmats0[0][1] + coeff0_1*dmats0[1][1] + coeff0_2*dmats0[2][1] + coeff0_3*dmats0[3][1] + coeff0_4*dmats0[4][1] + coeff0_5*dmats0[5][1];
          new_coeff0_2 = coeff0_0*dmats0[0][2] + coeff0_1*dmats0[1][2] + coeff0_2*dmats0[2][2] + coeff0_3*dmats0[3][2] + coeff0_4*dmats0[4][2] + coeff0_5*dmats0[5][2];
          new_coeff0_3 = coeff0_0*dmats0[0][3] + coeff0_1*dmats0[1][3] + coeff0_2*dmats0[2][3] + coeff0_3*dmats0[3][3] + coeff0_4*dmats0[4][3] + coeff0_5*dmats0[5][3];
          new_coeff0_4 = coeff0_0*dmats0[0][4] + coeff0_1*dmats0[1][4] + coeff0_2*dmats0[2][4] + coeff0_3*dmats0[3][4] + coeff0_4*dmats0[4][4] + coeff0_5*dmats0[5][4];
          new_coeff0_5 = coeff0_0*dmats0[0][5] + coeff0_1*dmats0[1][5] + coeff0_2*dmats0[2][5] + coeff0_3*dmats0[3][5] + coeff0_4*dmats0[4][5] + coeff0_5*dmats0[5][5];
        }
        if(combinations[deriv_num][j] == 1)
        {
          new_coeff0_0 = coeff0_0*dmats1[0][0] + coeff0_1*dmats1[1][0] + coeff0_2*dmats1[2][0] + coeff0_3*dmats1[3][0] + coeff0_4*dmats1[4][0] + coeff0_5*dmats1[5][0];
          new_coeff0_1 = coeff0_0*dmats1[0][1] + coeff0_1*dmats1[1][1] + coeff0_2*dmats1[2][1] + coeff0_3*dmats1[3][1] + coeff0_4*dmats1[4][1] + coeff0_5*dmats1[5][1];
          new_coeff0_2 = coeff0_0*dmats1[0][2] + coeff0_1*dmats1[1][2] + coeff0_2*dmats1[2][2] + coeff0_3*dmats1[3][2] + coeff0_4*dmats1[4][2] + coeff0_5*dmats1[5][2];
          new_coeff0_3 = coeff0_0*dmats1[0][3] + coeff0_1*dmats1[1][3] + coeff0_2*dmats1[2][3] + coeff0_3*dmats1[3][3] + coeff0_4*dmats1[4][3] + coeff0_5*dmats1[5][3];
          new_coeff0_4 = coeff0_0*dmats1[0][4] + coeff0_1*dmats1[1][4] + coeff0_2*dmats1[2][4] + coeff0_3*dmats1[3][4] + coeff0_4*dmats1[4][4] + coeff0_5*dmats1[5][4];
          new_coeff0_5 = coeff0_0*dmats1[0][5] + coeff0_1*dmats1[1][5] + coeff0_2*dmats1[2][5] + coeff0_3*dmats1[3][5] + coeff0_4*dmats1[4][5] + coeff0_5*dmats1[5][5];
        }
    
      }
      // Compute derivatives on reference element as dot product of coefficients and basisvalues
      derivatives[deriv_num] = new_coeff0_0*basisvalue0 + new_coeff0_1*basisvalue1 + new_coeff0_2*basisvalue2 + new_coeff0_3*basisvalue3 + new_coeff0_4*basisvalue4 + new_coeff0_5*basisvalue5;
    }
    
    // Transform derivatives back to physical element
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        values[row] += transform[row][col]*derivatives[col];
      }
    }
    // Delete pointer to array of derivatives on FIAT element
    delete [] derivatives;
    
    // Delete pointer to array of combinations of derivatives and transform
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      delete [] combinations[row];
      delete [] transform[row];
    }
    
    delete [] combinations;
    delete [] transform;
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis_derivatives() is not yet implemented.");
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // The reference points, direction and weights:
    const static double X[6][1][2] = {{{0, 0}}, {{1, 0}}, {{0, 1}}, {{0.5, 0.5}}, {{0, 0.5}}, {{0.5, 0}}};
    const static double W[6][1] = {{1}, {1}, {1}, {1}, {1}, {1}};
    const static double D[6][1][1] = {{{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}};
    
    const double * const * x = c.coordinates;
    double result = 0.0;
    // Iterate over the points:
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0][0] - X[i][0][1];
    const double w1 = X[i][0][0];
    const double w2 = X[i][0][1];
    
    // Compute affine mapping y = F(X)
    double y[2];
    y[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0];
    y[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1];
    
    // Evaluate function at physical points
    double values[1];
    f.evaluate(values, y, c);
    
    // Map function values using appropriate mapping
    // Affine map: Do nothing
    
    // Note that we do not map the weights (yet).
    
    // Take directional components
    for(int k = 0; k < 1; k++)
      result += values[k]*D[i][0][k];
    // Multiply by weights 
    result *= W[i][0];
    
    return result;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate at vertices and use affine mapping
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new biharmonic_0_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class biharmonic_0_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  biharmonic_0_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~biharmonic_0_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', 'triangle', 2)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 6;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
      
    // Compute determinant of Jacobian
    const double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Get coordinates and map to the reference (UFC) element
    double x = (element_coordinates[0][1]*element_coordinates[2][0] -\
                element_coordinates[0][0]*element_coordinates[2][1] +\
                J_11*coordinates[0] - J_01*coordinates[1]) / detJ;
    double y = (element_coordinates[1][1]*element_coordinates[0][0] -\
                element_coordinates[1][0]*element_coordinates[0][1] -\
                J_10*coordinates[0] + J_00*coordinates[1]) / detJ;
    
    // Map coordinates to the reference square
    if (std::abs(y - 1.0) < 1e-14)
      x = -1.0;
    else
      x = 2.0 *x/(1.0 - y) - 1.0;
    y = 2.0*y - 1.0;
    
    // Reset values
    *values = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_2_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.707106781186548*psitilde_a_0*scalings_y_0*psitilde_bs_0_0;
    const double basisvalue1 = 1.73205080756888*psitilde_a_1*scalings_y_1*psitilde_bs_1_0;
    const double basisvalue2 = psitilde_a_0*scalings_y_0*psitilde_bs_0_1;
    const double basisvalue3 = 2.73861278752583*psitilde_a_2*scalings_y_2*psitilde_bs_2_0;
    const double basisvalue4 = 2.12132034355964*psitilde_a_1*scalings_y_1*psitilde_bs_1_1;
    const double basisvalue5 = 1.22474487139159*psitilde_a_0*scalings_y_0*psitilde_bs_0_2;
    
    // Table(s) of coefficients
    const static double coefficients0[6][6] = \
    {{0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582063, 0.0544331053951817},
    {0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582064, 0.0544331053951818},
    {0, 0, 0.2, 0, 0, 0.163299316185545},
    {0.471404520791032, 0.23094010767585, 0.133333333333333, 0, 0.188561808316413, -0.163299316185545},
    {0.471404520791032, -0.23094010767585, 0.133333333333333, 0, -0.188561808316413, -0.163299316185545},
    {0.471404520791032, 0, -0.266666666666667, -0.243432247780074, 0, 0.0544331053951817}};
    
    // Extract relevant coefficients
    const double coeff0_0 = coefficients0[dof][0];
    const double coeff0_1 = coefficients0[dof][1];
    const double coeff0_2 = coefficients0[dof][2];
    const double coeff0_3 = coefficients0[dof][3];
    const double coeff0_4 = coefficients0[dof][4];
    const double coeff0_5 = coefficients0[dof][5];
    
    // Compute value(s)
    *values = coeff0_0*basisvalue0 + coeff0_1*basisvalue1 + coeff0_2*basisvalue2 + coeff0_3*basisvalue3 + coeff0_4*basisvalue4 + coeff0_5*basisvalue5;
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis() is not yet implemented.");
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
      
    // Compute determinant of Jacobian
    const double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Get coordinates and map to the reference (UFC) element
    double x = (element_coordinates[0][1]*element_coordinates[2][0] -\
                element_coordinates[0][0]*element_coordinates[2][1] +\
                J_11*coordinates[0] - J_01*coordinates[1]) / detJ;
    double y = (element_coordinates[1][1]*element_coordinates[0][0] -\
                element_coordinates[1][0]*element_coordinates[0][1] -\
                J_10*coordinates[0] + J_00*coordinates[1]) / detJ;
    
    // Map coordinates to the reference square
    if (std::abs(y - 1.0) < 1e-14)
      x = -1.0;
    else
      x = 2.0 *x/(1.0 - y) - 1.0;
    y = 2.0*y - 1.0;
    
    // Compute number of derivatives
    unsigned int num_derivatives = 1;
    
    for (unsigned int j = 0; j < n; j++)
      num_derivatives *= 2;
    
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      combinations[j] = new unsigned int [n];
      for (unsigned int k = 0; k < n; k++)
        combinations[j][k] = 0;
    }
        
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] =  {{J_11 / detJ, -J_01 / detJ}, {-J_10 / detJ, J_00 / detJ}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values
    for (unsigned int j = 0; j < 1*num_derivatives; j++)
      values[j] = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_2_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.707106781186548*psitilde_a_0*scalings_y_0*psitilde_bs_0_0;
    const double basisvalue1 = 1.73205080756888*psitilde_a_1*scalings_y_1*psitilde_bs_1_0;
    const double basisvalue2 = psitilde_a_0*scalings_y_0*psitilde_bs_0_1;
    const double basisvalue3 = 2.73861278752583*psitilde_a_2*scalings_y_2*psitilde_bs_2_0;
    const double basisvalue4 = 2.12132034355964*psitilde_a_1*scalings_y_1*psitilde_bs_1_1;
    const double basisvalue5 = 1.22474487139159*psitilde_a_0*scalings_y_0*psitilde_bs_0_2;
    
    // Table(s) of coefficients
    const static double coefficients0[6][6] = \
    {{0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582063, 0.0544331053951817},
    {0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582064, 0.0544331053951818},
    {0, 0, 0.2, 0, 0, 0.163299316185545},
    {0.471404520791032, 0.23094010767585, 0.133333333333333, 0, 0.188561808316413, -0.163299316185545},
    {0.471404520791032, -0.23094010767585, 0.133333333333333, 0, -0.188561808316413, -0.163299316185545},
    {0.471404520791032, 0, -0.266666666666667, -0.243432247780074, 0, 0.0544331053951817}};
    
    // Interesting (new) part
    // Tables of derivatives of the polynomial base (transpose)
    const static double dmats0[6][6] = \
    {{0, 0, 0, 0, 0, 0},
    {4.89897948556636, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0},
    {0, 9.48683298050514, 0, 0, 0, 0},
    {4, 0, 7.07106781186548, 0, 0, 0},
    {0, 0, 0, 0, 0, 0}};
    
    const static double dmats1[6][6] = \
    {{0, 0, 0, 0, 0, 0},
    {2.44948974278318, 0, 0, 0, 0, 0},
    {4.24264068711928, 0, 0, 0, 0, 0},
    {2.58198889747161, 4.74341649025257, -0.912870929175277, 0, 0, 0},
    {2, 6.12372435695795, 3.53553390593274, 0, 0, 0},
    {-2.3094010767585, 0, 8.16496580927726, 0, 0, 0}};
    
    // Compute reference derivatives
    // Declare pointer to array of derivatives on FIAT element
    double *derivatives = new double [num_derivatives];
    
    // Declare coefficients
    double coeff0_0 = 0;
    double coeff0_1 = 0;
    double coeff0_2 = 0;
    double coeff0_3 = 0;
    double coeff0_4 = 0;
    double coeff0_5 = 0;
    
    // Declare new coefficients
    double new_coeff0_0 = 0;
    double new_coeff0_1 = 0;
    double new_coeff0_2 = 0;
    double new_coeff0_3 = 0;
    double new_coeff0_4 = 0;
    double new_coeff0_5 = 0;
    
    // Loop possible derivatives
    for (unsigned int deriv_num = 0; deriv_num < num_derivatives; deriv_num++)
    {
      // Get values from coefficients array
      new_coeff0_0 = coefficients0[dof][0];
      new_coeff0_1 = coefficients0[dof][1];
      new_coeff0_2 = coefficients0[dof][2];
      new_coeff0_3 = coefficients0[dof][3];
      new_coeff0_4 = coefficients0[dof][4];
      new_coeff0_5 = coefficients0[dof][5];
    
      // Loop derivative order
      for (unsigned int j = 0; j < n; j++)
      {
        // Update old coefficients
        coeff0_0 = new_coeff0_0;
        coeff0_1 = new_coeff0_1;
        coeff0_2 = new_coeff0_2;
        coeff0_3 = new_coeff0_3;
        coeff0_4 = new_coeff0_4;
        coeff0_5 = new_coeff0_5;
    
        if(combinations[deriv_num][j] == 0)
        {
          new_coeff0_0 = coeff0_0*dmats0[0][0] + coeff0_1*dmats0[1][0] + coeff0_2*dmats0[2][0] + coeff0_3*dmats0[3][0] + coeff0_4*dmats0[4][0] + coeff0_5*dmats0[5][0];
          new_coeff0_1 = coeff0_0*dmats0[0][1] + coeff0_1*dmats0[1][1] + coeff0_2*dmats0[2][1] + coeff0_3*dmats0[3][1] + coeff0_4*dmats0[4][1] + coeff0_5*dmats0[5][1];
          new_coeff0_2 = coeff0_0*dmats0[0][2] + coeff0_1*dmats0[1][2] + coeff0_2*dmats0[2][2] + coeff0_3*dmats0[3][2] + coeff0_4*dmats0[4][2] + coeff0_5*dmats0[5][2];
          new_coeff0_3 = coeff0_0*dmats0[0][3] + coeff0_1*dmats0[1][3] + coeff0_2*dmats0[2][3] + coeff0_3*dmats0[3][3] + coeff0_4*dmats0[4][3] + coeff0_5*dmats0[5][3];
          new_coeff0_4 = coeff0_0*dmats0[0][4] + coeff0_1*dmats0[1][4] + coeff0_2*dmats0[2][4] + coeff0_3*dmats0[3][4] + coeff0_4*dmats0[4][4] + coeff0_5*dmats0[5][4];
          new_coeff0_5 = coeff0_0*dmats0[0][5] + coeff0_1*dmats0[1][5] + coeff0_2*dmats0[2][5] + coeff0_3*dmats0[3][5] + coeff0_4*dmats0[4][5] + coeff0_5*dmats0[5][5];
        }
        if(combinations[deriv_num][j] == 1)
        {
          new_coeff0_0 = coeff0_0*dmats1[0][0] + coeff0_1*dmats1[1][0] + coeff0_2*dmats1[2][0] + coeff0_3*dmats1[3][0] + coeff0_4*dmats1[4][0] + coeff0_5*dmats1[5][0];
          new_coeff0_1 = coeff0_0*dmats1[0][1] + coeff0_1*dmats1[1][1] + coeff0_2*dmats1[2][1] + coeff0_3*dmats1[3][1] + coeff0_4*dmats1[4][1] + coeff0_5*dmats1[5][1];
          new_coeff0_2 = coeff0_0*dmats1[0][2] + coeff0_1*dmats1[1][2] + coeff0_2*dmats1[2][2] + coeff0_3*dmats1[3][2] + coeff0_4*dmats1[4][2] + coeff0_5*dmats1[5][2];
          new_coeff0_3 = coeff0_0*dmats1[0][3] + coeff0_1*dmats1[1][3] + coeff0_2*dmats1[2][3] + coeff0_3*dmats1[3][3] + coeff0_4*dmats1[4][3] + coeff0_5*dmats1[5][3];
          new_coeff0_4 = coeff0_0*dmats1[0][4] + coeff0_1*dmats1[1][4] + coeff0_2*dmats1[2][4] + coeff0_3*dmats1[3][4] + coeff0_4*dmats1[4][4] + coeff0_5*dmats1[5][4];
          new_coeff0_5 = coeff0_0*dmats1[0][5] + coeff0_1*dmats1[1][5] + coeff0_2*dmats1[2][5] + coeff0_3*dmats1[3][5] + coeff0_4*dmats1[4][5] + coeff0_5*dmats1[5][5];
        }
    
      }
      // Compute derivatives on reference element as dot product of coefficients and basisvalues
      derivatives[deriv_num] = new_coeff0_0*basisvalue0 + new_coeff0_1*basisvalue1 + new_coeff0_2*basisvalue2 + new_coeff0_3*basisvalue3 + new_coeff0_4*basisvalue4 + new_coeff0_5*basisvalue5;
    }
    
    // Transform derivatives back to physical element
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        values[row] += transform[row][col]*derivatives[col];
      }
    }
    // Delete pointer to array of derivatives on FIAT element
    delete [] derivatives;
    
    // Delete pointer to array of combinations of derivatives and transform
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      delete [] combinations[row];
      delete [] transform[row];
    }
    
    delete [] combinations;
    delete [] transform;
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis_derivatives() is not yet implemented.");
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // The reference points, direction and weights:
    const static double X[6][1][2] = {{{0, 0}}, {{1, 0}}, {{0, 1}}, {{0.5, 0.5}}, {{0, 0.5}}, {{0.5, 0}}};
    const static double W[6][1] = {{1}, {1}, {1}, {1}, {1}, {1}};
    const static double D[6][1][1] = {{{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}};
    
    const double * const * x = c.coordinates;
    double result = 0.0;
    // Iterate over the points:
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0][0] - X[i][0][1];
    const double w1 = X[i][0][0];
    const double w2 = X[i][0][1];
    
    // Compute affine mapping y = F(X)
    double y[2];
    y[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0];
    y[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1];
    
    // Evaluate function at physical points
    double values[1];
    f.evaluate(values, y, c);
    
    // Map function values using appropriate mapping
    // Affine map: Do nothing
    
    // Note that we do not map the weights (yet).
    
    // Take directional components
    for(int k = 0; k < 1; k++)
      result += values[k]*D[i][0][k];
    // Multiply by weights 
    result *= W[i][0];
    
    return result;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate at vertices and use affine mapping
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new biharmonic_0_finite_element_1();
  }

};

/// This class defines the interface for a finite element.

class biharmonic_0_finite_element_2_0: public ufc::finite_element
{
public:

  /// Constructor
  biharmonic_0_finite_element_2_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~biharmonic_0_finite_element_2_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Discontinuous Lagrange', 'triangle', 0)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 1;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
      
    // Compute determinant of Jacobian
    const double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Get coordinates and map to the reference (UFC) element
    double x = (element_coordinates[0][1]*element_coordinates[2][0] -\
                element_coordinates[0][0]*element_coordinates[2][1] +\
                J_11*coordinates[0] - J_01*coordinates[1]) / detJ;
    double y = (element_coordinates[1][1]*element_coordinates[0][0] -\
                element_coordinates[1][0]*element_coordinates[0][1] -\
                J_10*coordinates[0] + J_00*coordinates[1]) / detJ;
    
    // Map coordinates to the reference square
    if (std::abs(y - 1.0) < 1e-14)
      x = -1.0;
    else
      x = 2.0 *x/(1.0 - y) - 1.0;
    y = 2.0*y - 1.0;
    
    // Reset values
    *values = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.707106781186548*psitilde_a_0*scalings_y_0*psitilde_bs_0_0;
    
    // Table(s) of coefficients
    const static double coefficients0[1][1] = \
    {{1.41421356237309}};
    
    // Extract relevant coefficients
    const double coeff0_0 = coefficients0[dof][0];
    
    // Compute value(s)
    *values = coeff0_0*basisvalue0;
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis() is not yet implemented.");
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
      
    // Compute determinant of Jacobian
    const double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Get coordinates and map to the reference (UFC) element
    double x = (element_coordinates[0][1]*element_coordinates[2][0] -\
                element_coordinates[0][0]*element_coordinates[2][1] +\
                J_11*coordinates[0] - J_01*coordinates[1]) / detJ;
    double y = (element_coordinates[1][1]*element_coordinates[0][0] -\
                element_coordinates[1][0]*element_coordinates[0][1] -\
                J_10*coordinates[0] + J_00*coordinates[1]) / detJ;
    
    // Map coordinates to the reference square
    if (std::abs(y - 1.0) < 1e-14)
      x = -1.0;
    else
      x = 2.0 *x/(1.0 - y) - 1.0;
    y = 2.0*y - 1.0;
    
    // Compute number of derivatives
    unsigned int num_derivatives = 1;
    
    for (unsigned int j = 0; j < n; j++)
      num_derivatives *= 2;
    
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      combinations[j] = new unsigned int [n];
      for (unsigned int k = 0; k < n; k++)
        combinations[j][k] = 0;
    }
        
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] =  {{J_11 / detJ, -J_01 / detJ}, {-J_10 / detJ, J_00 / detJ}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values
    for (unsigned int j = 0; j < 1*num_derivatives; j++)
      values[j] = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.707106781186548*psitilde_a_0*scalings_y_0*psitilde_bs_0_0;
    
    // Table(s) of coefficients
    const static double coefficients0[1][1] = \
    {{1.41421356237309}};
    
    // Interesting (new) part
    // Tables of derivatives of the polynomial base (transpose)
    const static double dmats0[1][1] = \
    {{0}};
    
    const static double dmats1[1][1] = \
    {{0}};
    
    // Compute reference derivatives
    // Declare pointer to array of derivatives on FIAT element
    double *derivatives = new double [num_derivatives];
    
    // Declare coefficients
    double coeff0_0 = 0;
    
    // Declare new coefficients
    double new_coeff0_0 = 0;
    
    // Loop possible derivatives
    for (unsigned int deriv_num = 0; deriv_num < num_derivatives; deriv_num++)
    {
      // Get values from coefficients array
      new_coeff0_0 = coefficients0[dof][0];
    
      // Loop derivative order
      for (unsigned int j = 0; j < n; j++)
      {
        // Update old coefficients
        coeff0_0 = new_coeff0_0;
    
        if(combinations[deriv_num][j] == 0)
        {
          new_coeff0_0 = coeff0_0*dmats0[0][0];
        }
        if(combinations[deriv_num][j] == 1)
        {
          new_coeff0_0 = coeff0_0*dmats1[0][0];
        }
    
      }
      // Compute derivatives on reference element as dot product of coefficients and basisvalues
      derivatives[deriv_num] = new_coeff0_0*basisvalue0;
    }
    
    // Transform derivatives back to physical element
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        values[row] += transform[row][col]*derivatives[col];
      }
    }
    // Delete pointer to array of derivatives on FIAT element
    delete [] derivatives;
    
    // Delete pointer to array of combinations of derivatives and transform
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      delete [] combinations[row];
      delete [] transform[row];
    }
    
    delete [] combinations;
    delete [] transform;
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis_derivatives() is not yet implemented.");
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // The reference points, direction and weights:
    const static double X[1][1][2] = {{{0.333333333333333, 0.333333333333333}}};
    const static double W[1][1] = {{1}};
    const static double D[1][1][1] = {{{1}}};
    
    const double * const * x = c.coordinates;
    double result = 0.0;
    // Iterate over the points:
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0][0] - X[i][0][1];
    const double w1 = X[i][0][0];
    const double w2 = X[i][0][1];
    
    // Compute affine mapping y = F(X)
    double y[2];
    y[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0];
    y[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1];
    
    // Evaluate function at physical points
    double values[1];
    f.evaluate(values, y, c);
    
    // Map function values using appropriate mapping
    // Affine map: Do nothing
    
    // Note that we do not map the weights (yet).
    
    // Take directional components
    for(int k = 0; k < 1; k++)
      result += values[k]*D[i][0][k];
    // Multiply by weights 
    result *= W[i][0];
    
    return result;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate at vertices and use affine mapping
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new biharmonic_0_finite_element_2_0();
  }

};

/// This class defines the interface for a finite element.

class biharmonic_0_finite_element_2_1: public ufc::finite_element
{
public:

  /// Constructor
  biharmonic_0_finite_element_2_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~biharmonic_0_finite_element_2_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Discontinuous Lagrange', 'triangle', 0)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 1;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
      
    // Compute determinant of Jacobian
    const double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Get coordinates and map to the reference (UFC) element
    double x = (element_coordinates[0][1]*element_coordinates[2][0] -\
                element_coordinates[0][0]*element_coordinates[2][1] +\
                J_11*coordinates[0] - J_01*coordinates[1]) / detJ;
    double y = (element_coordinates[1][1]*element_coordinates[0][0] -\
                element_coordinates[1][0]*element_coordinates[0][1] -\
                J_10*coordinates[0] + J_00*coordinates[1]) / detJ;
    
    // Map coordinates to the reference square
    if (std::abs(y - 1.0) < 1e-14)
      x = -1.0;
    else
      x = 2.0 *x/(1.0 - y) - 1.0;
    y = 2.0*y - 1.0;
    
    // Reset values
    *values = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.707106781186548*psitilde_a_0*scalings_y_0*psitilde_bs_0_0;
    
    // Table(s) of coefficients
    const static double coefficients0[1][1] = \
    {{1.41421356237309}};
    
    // Extract relevant coefficients
    const double coeff0_0 = coefficients0[dof][0];
    
    // Compute value(s)
    *values = coeff0_0*basisvalue0;
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis() is not yet implemented.");
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
      
    // Compute determinant of Jacobian
    const double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Get coordinates and map to the reference (UFC) element
    double x = (element_coordinates[0][1]*element_coordinates[2][0] -\
                element_coordinates[0][0]*element_coordinates[2][1] +\
                J_11*coordinates[0] - J_01*coordinates[1]) / detJ;
    double y = (element_coordinates[1][1]*element_coordinates[0][0] -\
                element_coordinates[1][0]*element_coordinates[0][1] -\
                J_10*coordinates[0] + J_00*coordinates[1]) / detJ;
    
    // Map coordinates to the reference square
    if (std::abs(y - 1.0) < 1e-14)
      x = -1.0;
    else
      x = 2.0 *x/(1.0 - y) - 1.0;
    y = 2.0*y - 1.0;
    
    // Compute number of derivatives
    unsigned int num_derivatives = 1;
    
    for (unsigned int j = 0; j < n; j++)
      num_derivatives *= 2;
    
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      combinations[j] = new unsigned int [n];
      for (unsigned int k = 0; k < n; k++)
        combinations[j][k] = 0;
    }
        
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] =  {{J_11 / detJ, -J_01 / detJ}, {-J_10 / detJ, J_00 / detJ}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values
    for (unsigned int j = 0; j < 1*num_derivatives; j++)
      values[j] = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.707106781186548*psitilde_a_0*scalings_y_0*psitilde_bs_0_0;
    
    // Table(s) of coefficients
    const static double coefficients0[1][1] = \
    {{1.41421356237309}};
    
    // Interesting (new) part
    // Tables of derivatives of the polynomial base (transpose)
    const static double dmats0[1][1] = \
    {{0}};
    
    const static double dmats1[1][1] = \
    {{0}};
    
    // Compute reference derivatives
    // Declare pointer to array of derivatives on FIAT element
    double *derivatives = new double [num_derivatives];
    
    // Declare coefficients
    double coeff0_0 = 0;
    
    // Declare new coefficients
    double new_coeff0_0 = 0;
    
    // Loop possible derivatives
    for (unsigned int deriv_num = 0; deriv_num < num_derivatives; deriv_num++)
    {
      // Get values from coefficients array
      new_coeff0_0 = coefficients0[dof][0];
    
      // Loop derivative order
      for (unsigned int j = 0; j < n; j++)
      {
        // Update old coefficients
        coeff0_0 = new_coeff0_0;
    
        if(combinations[deriv_num][j] == 0)
        {
          new_coeff0_0 = coeff0_0*dmats0[0][0];
        }
        if(combinations[deriv_num][j] == 1)
        {
          new_coeff0_0 = coeff0_0*dmats1[0][0];
        }
    
      }
      // Compute derivatives on reference element as dot product of coefficients and basisvalues
      derivatives[deriv_num] = new_coeff0_0*basisvalue0;
    }
    
    // Transform derivatives back to physical element
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        values[row] += transform[row][col]*derivatives[col];
      }
    }
    // Delete pointer to array of derivatives on FIAT element
    delete [] derivatives;
    
    // Delete pointer to array of combinations of derivatives and transform
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      delete [] combinations[row];
      delete [] transform[row];
    }
    
    delete [] combinations;
    delete [] transform;
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis_derivatives() is not yet implemented.");
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // The reference points, direction and weights:
    const static double X[1][1][2] = {{{0.333333333333333, 0.333333333333333}}};
    const static double W[1][1] = {{1}};
    const static double D[1][1][1] = {{{1}}};
    
    const double * const * x = c.coordinates;
    double result = 0.0;
    // Iterate over the points:
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0][0] - X[i][0][1];
    const double w1 = X[i][0][0];
    const double w2 = X[i][0][1];
    
    // Compute affine mapping y = F(X)
    double y[2];
    y[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0];
    y[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1];
    
    // Evaluate function at physical points
    double values[1];
    f.evaluate(values, y, c);
    
    // Map function values using appropriate mapping
    // Affine map: Do nothing
    
    // Note that we do not map the weights (yet).
    
    // Take directional components
    for(int k = 0; k < 1; k++)
      result += values[k]*D[i][0][k];
    // Multiply by weights 
    result *= W[i][0];
    
    return result;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate at vertices and use affine mapping
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new biharmonic_0_finite_element_2_1();
  }

};

/// This class defines the interface for a finite element.

class biharmonic_0_finite_element_2: public ufc::finite_element
{
public:

  /// Constructor
  biharmonic_0_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~biharmonic_0_finite_element_2()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "MixedElement([FiniteElement('Discontinuous Lagrange', 'triangle', 0), FiniteElement('Discontinuous Lagrange', 'triangle', 0)])";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 2;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 2;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
      
    // Compute determinant of Jacobian
    const double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Get coordinates and map to the reference (UFC) element
    double x = (element_coordinates[0][1]*element_coordinates[2][0] -\
                element_coordinates[0][0]*element_coordinates[2][1] +\
                J_11*coordinates[0] - J_01*coordinates[1]) / detJ;
    double y = (element_coordinates[1][1]*element_coordinates[0][0] -\
                element_coordinates[1][0]*element_coordinates[0][1] -\
                J_10*coordinates[0] + J_00*coordinates[1]) / detJ;
    
    // Map coordinates to the reference square
    if (std::abs(y - 1.0) < 1e-14)
      x = -1.0;
    else
      x = 2.0 *x/(1.0 - y) - 1.0;
    y = 2.0*y - 1.0;
    
    // Reset values
    values[0] = 0;
    values[1] = 0;
    
    if (0 <= i && i <= 0)
    {
      // Map degree of freedom to element degree of freedom
      const unsigned int dof = i;
    
      // Generate scalings
      const double scalings_y_0 = 1;
    
      // Compute psitilde_a
      const double psitilde_a_0 = 1;
    
      // Compute psitilde_bs
      const double psitilde_bs_0_0 = 1;
    
      // Compute basisvalues
      const double basisvalue0 = 0.707106781186548*psitilde_a_0*scalings_y_0*psitilde_bs_0_0;
    
      // Table(s) of coefficients
      const static double coefficients0[1][1] =   \
      {{1.41421356237309}};
    
      // Extract relevant coefficients
      const double coeff0_0 =   coefficients0[dof][0];
    
      // Compute value(s)
      values[0] = coeff0_0*basisvalue0;
    }
    
    if (1 <= i && i <= 1)
    {
      // Map degree of freedom to element degree of freedom
      const unsigned int dof = i - 1;
    
      // Generate scalings
      const double scalings_y_0 = 1;
    
      // Compute psitilde_a
      const double psitilde_a_0 = 1;
    
      // Compute psitilde_bs
      const double psitilde_bs_0_0 = 1;
    
      // Compute basisvalues
      const double basisvalue0 = 0.707106781186548*psitilde_a_0*scalings_y_0*psitilde_bs_0_0;
    
      // Table(s) of coefficients
      const static double coefficients0[1][1] =   \
      {{1.41421356237309}};
    
      // Extract relevant coefficients
      const double coeff0_0 =   coefficients0[dof][0];
    
      // Compute value(s)
      values[1] = coeff0_0*basisvalue0;
    }
    
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis() is not yet implemented.");
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
      
    // Compute determinant of Jacobian
    const double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Get coordinates and map to the reference (UFC) element
    double x = (element_coordinates[0][1]*element_coordinates[2][0] -\
                element_coordinates[0][0]*element_coordinates[2][1] +\
                J_11*coordinates[0] - J_01*coordinates[1]) / detJ;
    double y = (element_coordinates[1][1]*element_coordinates[0][0] -\
                element_coordinates[1][0]*element_coordinates[0][1] -\
                J_10*coordinates[0] + J_00*coordinates[1]) / detJ;
    
    // Map coordinates to the reference square
    if (std::abs(y - 1.0) < 1e-14)
      x = -1.0;
    else
      x = 2.0 *x/(1.0 - y) - 1.0;
    y = 2.0*y - 1.0;
    
    // Compute number of derivatives
    unsigned int num_derivatives = 1;
    
    for (unsigned int j = 0; j < n; j++)
      num_derivatives *= 2;
    
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      combinations[j] = new unsigned int [n];
      for (unsigned int k = 0; k < n; k++)
        combinations[j][k] = 0;
    }
        
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] =  {{J_11 / detJ, -J_01 / detJ}, {-J_10 / detJ, J_00 / detJ}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values
    for (unsigned int j = 0; j < 2*num_derivatives; j++)
      values[j] = 0;
    
    if (0 <= i && i <= 0)
    {
      // Map degree of freedom to element degree of freedom
      const unsigned int dof = i;
    
      // Generate scalings
      const double scalings_y_0 = 1;
    
      // Compute psitilde_a
      const double psitilde_a_0 = 1;
    
      // Compute psitilde_bs
      const double psitilde_bs_0_0 = 1;
    
      // Compute basisvalues
      const double basisvalue0 = 0.707106781186548*psitilde_a_0*scalings_y_0*psitilde_bs_0_0;
    
      // Table(s) of coefficients
      const static double coefficients0[1][1] =   \
      {{1.41421356237309}};
    
      // Interesting (new) part
      // Tables of derivatives of the polynomial base (transpose)
      const static double dmats0[1][1] =   \
      {{0}};
    
      const static double dmats1[1][1] =   \
      {{0}};
    
      // Compute reference derivatives
      // Declare pointer to array of derivatives on FIAT element
      double *derivatives = new double [num_derivatives];
    
      // Declare coefficients
      double coeff0_0 = 0;
    
      // Declare new coefficients
      double new_coeff0_0 = 0;
    
      // Loop possible derivatives
      for (unsigned int deriv_num = 0; deriv_num < num_derivatives; deriv_num++)
      {
        // Get values from coefficients array
        new_coeff0_0 = coefficients0[dof][0];
    
        // Loop derivative order
        for (unsigned int j = 0; j < n; j++)
        {
          // Update old coefficients
          coeff0_0 = new_coeff0_0;
    
          if(combinations[deriv_num][j] == 0)
          {
            new_coeff0_0 = coeff0_0*dmats0[0][0];
          }
          if(combinations[deriv_num][j] == 1)
          {
            new_coeff0_0 = coeff0_0*dmats1[0][0];
          }
    
        }
        // Compute derivatives on reference element as dot product of coefficients and basisvalues
        derivatives[deriv_num] = new_coeff0_0*basisvalue0;
      }
    
      // Transform derivatives back to physical element
      for (unsigned int row = 0; row < num_derivatives; row++)
      {
        for (unsigned int col = 0; col < num_derivatives; col++)
        {
          values[row] += transform[row][col]*derivatives[col];
        }
      }
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
    
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int row = 0; row < num_derivatives; row++)
      {
        delete [] combinations[row];
        delete [] transform[row];
      }
    
      delete [] combinations;
      delete [] transform;
    }
    
    if (1 <= i && i <= 1)
    {
      // Map degree of freedom to element degree of freedom
      const unsigned int dof = i - 1;
    
      // Generate scalings
      const double scalings_y_0 = 1;
    
      // Compute psitilde_a
      const double psitilde_a_0 = 1;
    
      // Compute psitilde_bs
      const double psitilde_bs_0_0 = 1;
    
      // Compute basisvalues
      const double basisvalue0 = 0.707106781186548*psitilde_a_0*scalings_y_0*psitilde_bs_0_0;
    
      // Table(s) of coefficients
      const static double coefficients0[1][1] =   \
      {{1.41421356237309}};
    
      // Interesting (new) part
      // Tables of derivatives of the polynomial base (transpose)
      const static double dmats0[1][1] =   \
      {{0}};
    
      const static double dmats1[1][1] =   \
      {{0}};
    
      // Compute reference derivatives
      // Declare pointer to array of derivatives on FIAT element
      double *derivatives = new double [num_derivatives];
    
      // Declare coefficients
      double coeff0_0 = 0;
    
      // Declare new coefficients
      double new_coeff0_0 = 0;
    
      // Loop possible derivatives
      for (unsigned int deriv_num = 0; deriv_num < num_derivatives; deriv_num++)
      {
        // Get values from coefficients array
        new_coeff0_0 = coefficients0[dof][0];
    
        // Loop derivative order
        for (unsigned int j = 0; j < n; j++)
        {
          // Update old coefficients
          coeff0_0 = new_coeff0_0;
    
          if(combinations[deriv_num][j] == 0)
          {
            new_coeff0_0 = coeff0_0*dmats0[0][0];
          }
          if(combinations[deriv_num][j] == 1)
          {
            new_coeff0_0 = coeff0_0*dmats1[0][0];
          }
    
        }
        // Compute derivatives on reference element as dot product of coefficients and basisvalues
        derivatives[deriv_num] = new_coeff0_0*basisvalue0;
      }
    
      // Transform derivatives back to physical element
      for (unsigned int row = 0; row < num_derivatives; row++)
      {
        for (unsigned int col = 0; col < num_derivatives; col++)
        {
          values[num_derivatives + row] += transform[row][col]*derivatives[col];
        }
      }
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
    
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int row = 0; row < num_derivatives; row++)
      {
        delete [] combinations[row];
        delete [] transform[row];
      }
    
      delete [] combinations;
      delete [] transform;
    }
    
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis_derivatives() is not yet implemented.");
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // The reference points, direction and weights:
    const static double X[2][1][2] = {{{0.333333333333333, 0.333333333333333}}, {{0.333333333333333, 0.333333333333333}}};
    const static double W[2][1] = {{1}, {1}};
    const static double D[2][1][2] = {{{1, 0}}, {{0, 1}}};
    
    const double * const * x = c.coordinates;
    double result = 0.0;
    // Iterate over the points:
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0][0] - X[i][0][1];
    const double w1 = X[i][0][0];
    const double w2 = X[i][0][1];
    
    // Compute affine mapping y = F(X)
    double y[2];
    y[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0];
    y[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1];
    
    // Evaluate function at physical points
    double values[2];
    f.evaluate(values, y, c);
    
    // Map function values using appropriate mapping
    // Affine map: Do nothing
    
    // Note that we do not map the weights (yet).
    
    // Take directional components
    for(int k = 0; k < 2; k++)
      result += values[k]*D[i][0][k];
    // Multiply by weights 
    result *= W[i][0];
    
    return result;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate at vertices and use affine mapping
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[0];
    vertex_values[4] = dof_values[0];
    // Evaluate at vertices and use affine mapping
    vertex_values[1] = dof_values[1];
    vertex_values[3] = dof_values[1];
    vertex_values[5] = dof_values[1];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 2;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new biharmonic_0_finite_element_2_0();
      break;
    case 1:
      return new biharmonic_0_finite_element_2_1();
      break;
    }
    return 0;
  }

};

/// This class defines the interface for a finite element.

class biharmonic_0_finite_element_3: public ufc::finite_element
{
public:

  /// Constructor
  biharmonic_0_finite_element_3() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~biharmonic_0_finite_element_3()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Discontinuous Lagrange', 'triangle', 0)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 1;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
      
    // Compute determinant of Jacobian
    const double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Get coordinates and map to the reference (UFC) element
    double x = (element_coordinates[0][1]*element_coordinates[2][0] -\
                element_coordinates[0][0]*element_coordinates[2][1] +\
                J_11*coordinates[0] - J_01*coordinates[1]) / detJ;
    double y = (element_coordinates[1][1]*element_coordinates[0][0] -\
                element_coordinates[1][0]*element_coordinates[0][1] -\
                J_10*coordinates[0] + J_00*coordinates[1]) / detJ;
    
    // Map coordinates to the reference square
    if (std::abs(y - 1.0) < 1e-14)
      x = -1.0;
    else
      x = 2.0 *x/(1.0 - y) - 1.0;
    y = 2.0*y - 1.0;
    
    // Reset values
    *values = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.707106781186548*psitilde_a_0*scalings_y_0*psitilde_bs_0_0;
    
    // Table(s) of coefficients
    const static double coefficients0[1][1] = \
    {{1.41421356237309}};
    
    // Extract relevant coefficients
    const double coeff0_0 = coefficients0[dof][0];
    
    // Compute value(s)
    *values = coeff0_0*basisvalue0;
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis() is not yet implemented.");
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
      
    // Compute determinant of Jacobian
    const double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Get coordinates and map to the reference (UFC) element
    double x = (element_coordinates[0][1]*element_coordinates[2][0] -\
                element_coordinates[0][0]*element_coordinates[2][1] +\
                J_11*coordinates[0] - J_01*coordinates[1]) / detJ;
    double y = (element_coordinates[1][1]*element_coordinates[0][0] -\
                element_coordinates[1][0]*element_coordinates[0][1] -\
                J_10*coordinates[0] + J_00*coordinates[1]) / detJ;
    
    // Map coordinates to the reference square
    if (std::abs(y - 1.0) < 1e-14)
      x = -1.0;
    else
      x = 2.0 *x/(1.0 - y) - 1.0;
    y = 2.0*y - 1.0;
    
    // Compute number of derivatives
    unsigned int num_derivatives = 1;
    
    for (unsigned int j = 0; j < n; j++)
      num_derivatives *= 2;
    
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      combinations[j] = new unsigned int [n];
      for (unsigned int k = 0; k < n; k++)
        combinations[j][k] = 0;
    }
        
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] =  {{J_11 / detJ, -J_01 / detJ}, {-J_10 / detJ, J_00 / detJ}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values
    for (unsigned int j = 0; j < 1*num_derivatives; j++)
      values[j] = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.707106781186548*psitilde_a_0*scalings_y_0*psitilde_bs_0_0;
    
    // Table(s) of coefficients
    const static double coefficients0[1][1] = \
    {{1.41421356237309}};
    
    // Interesting (new) part
    // Tables of derivatives of the polynomial base (transpose)
    const static double dmats0[1][1] = \
    {{0}};
    
    const static double dmats1[1][1] = \
    {{0}};
    
    // Compute reference derivatives
    // Declare pointer to array of derivatives on FIAT element
    double *derivatives = new double [num_derivatives];
    
    // Declare coefficients
    double coeff0_0 = 0;
    
    // Declare new coefficients
    double new_coeff0_0 = 0;
    
    // Loop possible derivatives
    for (unsigned int deriv_num = 0; deriv_num < num_derivatives; deriv_num++)
    {
      // Get values from coefficients array
      new_coeff0_0 = coefficients0[dof][0];
    
      // Loop derivative order
      for (unsigned int j = 0; j < n; j++)
      {
        // Update old coefficients
        coeff0_0 = new_coeff0_0;
    
        if(combinations[deriv_num][j] == 0)
        {
          new_coeff0_0 = coeff0_0*dmats0[0][0];
        }
        if(combinations[deriv_num][j] == 1)
        {
          new_coeff0_0 = coeff0_0*dmats1[0][0];
        }
    
      }
      // Compute derivatives on reference element as dot product of coefficients and basisvalues
      derivatives[deriv_num] = new_coeff0_0*basisvalue0;
    }
    
    // Transform derivatives back to physical element
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        values[row] += transform[row][col]*derivatives[col];
      }
    }
    // Delete pointer to array of derivatives on FIAT element
    delete [] derivatives;
    
    // Delete pointer to array of combinations of derivatives and transform
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      delete [] combinations[row];
      delete [] transform[row];
    }
    
    delete [] combinations;
    delete [] transform;
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis_derivatives() is not yet implemented.");
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // The reference points, direction and weights:
    const static double X[1][1][2] = {{{0.333333333333333, 0.333333333333333}}};
    const static double W[1][1] = {{1}};
    const static double D[1][1][1] = {{{1}}};
    
    const double * const * x = c.coordinates;
    double result = 0.0;
    // Iterate over the points:
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0][0] - X[i][0][1];
    const double w1 = X[i][0][0];
    const double w2 = X[i][0][1];
    
    // Compute affine mapping y = F(X)
    double y[2];
    y[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0];
    y[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1];
    
    // Evaluate function at physical points
    double values[1];
    f.evaluate(values, y, c);
    
    // Map function values using appropriate mapping
    // Affine map: Do nothing
    
    // Note that we do not map the weights (yet).
    
    // Take directional components
    for(int k = 0; k < 1; k++)
      result += values[k]*D[i][0][k];
    // Multiply by weights 
    result *= W[i][0];
    
    return result;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate at vertices and use affine mapping
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new biharmonic_0_finite_element_3();
  }

};

/// This class defines the interface for a finite element.

class biharmonic_0_finite_element_4: public ufc::finite_element
{
public:

  /// Constructor
  biharmonic_0_finite_element_4() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~biharmonic_0_finite_element_4()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Discontinuous Lagrange', 'triangle', 0)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 1;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
      
    // Compute determinant of Jacobian
    const double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Get coordinates and map to the reference (UFC) element
    double x = (element_coordinates[0][1]*element_coordinates[2][0] -\
                element_coordinates[0][0]*element_coordinates[2][1] +\
                J_11*coordinates[0] - J_01*coordinates[1]) / detJ;
    double y = (element_coordinates[1][1]*element_coordinates[0][0] -\
                element_coordinates[1][0]*element_coordinates[0][1] -\
                J_10*coordinates[0] + J_00*coordinates[1]) / detJ;
    
    // Map coordinates to the reference square
    if (std::abs(y - 1.0) < 1e-14)
      x = -1.0;
    else
      x = 2.0 *x/(1.0 - y) - 1.0;
    y = 2.0*y - 1.0;
    
    // Reset values
    *values = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.707106781186548*psitilde_a_0*scalings_y_0*psitilde_bs_0_0;
    
    // Table(s) of coefficients
    const static double coefficients0[1][1] = \
    {{1.41421356237309}};
    
    // Extract relevant coefficients
    const double coeff0_0 = coefficients0[dof][0];
    
    // Compute value(s)
    *values = coeff0_0*basisvalue0;
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis() is not yet implemented.");
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
      
    // Compute determinant of Jacobian
    const double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Get coordinates and map to the reference (UFC) element
    double x = (element_coordinates[0][1]*element_coordinates[2][0] -\
                element_coordinates[0][0]*element_coordinates[2][1] +\
                J_11*coordinates[0] - J_01*coordinates[1]) / detJ;
    double y = (element_coordinates[1][1]*element_coordinates[0][0] -\
                element_coordinates[1][0]*element_coordinates[0][1] -\
                J_10*coordinates[0] + J_00*coordinates[1]) / detJ;
    
    // Map coordinates to the reference square
    if (std::abs(y - 1.0) < 1e-14)
      x = -1.0;
    else
      x = 2.0 *x/(1.0 - y) - 1.0;
    y = 2.0*y - 1.0;
    
    // Compute number of derivatives
    unsigned int num_derivatives = 1;
    
    for (unsigned int j = 0; j < n; j++)
      num_derivatives *= 2;
    
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      combinations[j] = new unsigned int [n];
      for (unsigned int k = 0; k < n; k++)
        combinations[j][k] = 0;
    }
        
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] =  {{J_11 / detJ, -J_01 / detJ}, {-J_10 / detJ, J_00 / detJ}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values
    for (unsigned int j = 0; j < 1*num_derivatives; j++)
      values[j] = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.707106781186548*psitilde_a_0*scalings_y_0*psitilde_bs_0_0;
    
    // Table(s) of coefficients
    const static double coefficients0[1][1] = \
    {{1.41421356237309}};
    
    // Interesting (new) part
    // Tables of derivatives of the polynomial base (transpose)
    const static double dmats0[1][1] = \
    {{0}};
    
    const static double dmats1[1][1] = \
    {{0}};
    
    // Compute reference derivatives
    // Declare pointer to array of derivatives on FIAT element
    double *derivatives = new double [num_derivatives];
    
    // Declare coefficients
    double coeff0_0 = 0;
    
    // Declare new coefficients
    double new_coeff0_0 = 0;
    
    // Loop possible derivatives
    for (unsigned int deriv_num = 0; deriv_num < num_derivatives; deriv_num++)
    {
      // Get values from coefficients array
      new_coeff0_0 = coefficients0[dof][0];
    
      // Loop derivative order
      for (unsigned int j = 0; j < n; j++)
      {
        // Update old coefficients
        coeff0_0 = new_coeff0_0;
    
        if(combinations[deriv_num][j] == 0)
        {
          new_coeff0_0 = coeff0_0*dmats0[0][0];
        }
        if(combinations[deriv_num][j] == 1)
        {
          new_coeff0_0 = coeff0_0*dmats1[0][0];
        }
    
      }
      // Compute derivatives on reference element as dot product of coefficients and basisvalues
      derivatives[deriv_num] = new_coeff0_0*basisvalue0;
    }
    
    // Transform derivatives back to physical element
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        values[row] += transform[row][col]*derivatives[col];
      }
    }
    // Delete pointer to array of derivatives on FIAT element
    delete [] derivatives;
    
    // Delete pointer to array of combinations of derivatives and transform
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      delete [] combinations[row];
      delete [] transform[row];
    }
    
    delete [] combinations;
    delete [] transform;
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis_derivatives() is not yet implemented.");
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // The reference points, direction and weights:
    const static double X[1][1][2] = {{{0.333333333333333, 0.333333333333333}}};
    const static double W[1][1] = {{1}};
    const static double D[1][1][1] = {{{1}}};
    
    const double * const * x = c.coordinates;
    double result = 0.0;
    // Iterate over the points:
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0][0] - X[i][0][1];
    const double w1 = X[i][0][0];
    const double w2 = X[i][0][1];
    
    // Compute affine mapping y = F(X)
    double y[2];
    y[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0];
    y[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1];
    
    // Evaluate function at physical points
    double values[1];
    f.evaluate(values, y, c);
    
    // Map function values using appropriate mapping
    // Affine map: Do nothing
    
    // Note that we do not map the weights (yet).
    
    // Take directional components
    for(int k = 0; k < 1; k++)
      result += values[k]*D[i][0][k];
    // Multiply by weights 
    result *= W[i][0];
    
    return result;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate at vertices and use affine mapping
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new biharmonic_0_finite_element_4();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class biharmonic_0_dof_map_0: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  biharmonic_0_dof_map_0() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~biharmonic_0_dof_map_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for FiniteElement('Lagrange', 'triangle', 2)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return true;
      break;
    case 2:
      return false;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = m.num_entities[0] + m.num_entities[1];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 6;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 6;
  }

  // Return the geometric dimension of the coordinates this dof map provides
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 3;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    unsigned int offset = m.num_entities[0];
    dofs[3] = offset + c.entity_indices[1][0];
    dofs[4] = offset + c.entity_indices[1][1];
    dofs[5] = offset + c.entity_indices[1][2];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 4;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 5;
      break;
    }
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[3][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[3][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[4][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[4][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[5][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[5][1] = 0.5*x[0][1] + 0.5*x[1][1];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new biharmonic_0_dof_map_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class biharmonic_0_dof_map_1: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  biharmonic_0_dof_map_1() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~biharmonic_0_dof_map_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for FiniteElement('Lagrange', 'triangle', 2)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return true;
      break;
    case 2:
      return false;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = m.num_entities[0] + m.num_entities[1];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 6;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 6;
  }

  // Return the geometric dimension of the coordinates this dof map provides
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 3;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    unsigned int offset = m.num_entities[0];
    dofs[3] = offset + c.entity_indices[1][0];
    dofs[4] = offset + c.entity_indices[1][1];
    dofs[5] = offset + c.entity_indices[1][2];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 4;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 5;
      break;
    }
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[3][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[3][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[4][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[4][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[5][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[5][1] = 0.5*x[0][1] + 0.5*x[1][1];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new biharmonic_0_dof_map_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class biharmonic_0_dof_map_2_0: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  biharmonic_0_dof_map_2_0() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~biharmonic_0_dof_map_2_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for FiniteElement('Discontinuous Lagrange', 'triangle', 0)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return false;
      break;
    case 1:
      return false;
      break;
    case 2:
      return true;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = m.num_entities[2];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 1;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 1;
  }

  // Return the geometric dimension of the coordinates this dof map provides
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 0;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[2][0];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      
      break;
    case 1:
      
      break;
    case 2:
      
      break;
    }
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    coordinates[0][0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[1][0] + 0.333333333333333*x[2][0];
    coordinates[0][1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[1][1] + 0.333333333333333*x[2][1];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new biharmonic_0_dof_map_2_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class biharmonic_0_dof_map_2_1: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  biharmonic_0_dof_map_2_1() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~biharmonic_0_dof_map_2_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for FiniteElement('Discontinuous Lagrange', 'triangle', 0)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return false;
      break;
    case 1:
      return false;
      break;
    case 2:
      return true;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = m.num_entities[2];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 1;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 1;
  }

  // Return the geometric dimension of the coordinates this dof map provides
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 0;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[2][0];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      
      break;
    case 1:
      
      break;
    case 2:
      
      break;
    }
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    coordinates[0][0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[1][0] + 0.333333333333333*x[2][0];
    coordinates[0][1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[1][1] + 0.333333333333333*x[2][1];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new biharmonic_0_dof_map_2_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class biharmonic_0_dof_map_2: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  biharmonic_0_dof_map_2() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~biharmonic_0_dof_map_2()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for MixedElement([FiniteElement('Discontinuous Lagrange', 'triangle', 0), FiniteElement('Discontinuous Lagrange', 'triangle', 0)])";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return false;
      break;
    case 1:
      return false;
      break;
    case 2:
      return true;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = 2*m.num_entities[2];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 2;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 2;
  }

  // Return the geometric dimension of the coordinates this dof map provides
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 0;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[2][0];
    unsigned int offset = m.num_entities[2];
    dofs[1] = offset + c.entity_indices[2][0];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      
      break;
    case 1:
      
      break;
    case 2:
      
      break;
    }
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    coordinates[0][0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[1][0] + 0.333333333333333*x[2][0];
    coordinates[0][1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[1][1] + 0.333333333333333*x[2][1];
    coordinates[1][0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[1][0] + 0.333333333333333*x[2][0];
    coordinates[1][1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[1][1] + 0.333333333333333*x[2][1];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 2;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new biharmonic_0_dof_map_2_0();
      break;
    case 1:
      return new biharmonic_0_dof_map_2_1();
      break;
    }
    return 0;
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class biharmonic_0_dof_map_3: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  biharmonic_0_dof_map_3() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~biharmonic_0_dof_map_3()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for FiniteElement('Discontinuous Lagrange', 'triangle', 0)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return false;
      break;
    case 1:
      return false;
      break;
    case 2:
      return true;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = m.num_entities[2];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 1;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 1;
  }

  // Return the geometric dimension of the coordinates this dof map provides
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 0;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[2][0];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      
      break;
    case 1:
      
      break;
    case 2:
      
      break;
    }
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    coordinates[0][0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[1][0] + 0.333333333333333*x[2][0];
    coordinates[0][1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[1][1] + 0.333333333333333*x[2][1];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new biharmonic_0_dof_map_3();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class biharmonic_0_dof_map_4: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  biharmonic_0_dof_map_4() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~biharmonic_0_dof_map_4()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for FiniteElement('Discontinuous Lagrange', 'triangle', 0)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return false;
      break;
    case 1:
      return false;
      break;
    case 2:
      return true;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = m.num_entities[2];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 1;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 1;
  }

  // Return the geometric dimension of the coordinates this dof map provides
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 0;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[2][0];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      
      break;
    case 1:
      
      break;
    case 2:
      
      break;
    }
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    coordinates[0][0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[1][0] + 0.333333333333333*x[2][0];
    coordinates[0][1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[1][1] + 0.333333333333333*x[2][1];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new biharmonic_0_dof_map_4();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class biharmonic_0_cell_integral_0_quadrature: public ufc::cell_integral
{
public:

  /// Constructor
  biharmonic_0_cell_integral_0_quadrature() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~biharmonic_0_cell_integral_0_quadrature()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
      
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
      
    // Compute inverse of Jacobian
    const double Jinv_00 =  J_11 / detJ;
    const double Jinv_01 = -J_01 / detJ;
    const double Jinv_10 = -J_10 / detJ;
    const double Jinv_11 =  J_00 / detJ;
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    
    // Array of quadrature weights
    const static double W1 = 0.5;
    // Quadrature points on the UFC reference element: (0.333333333333333, 0.333333333333333)
    
    // Value of basis functions at quadrature points.
    const static double FE0_D11[1][6] = \
    {{4, 0, 0, 4, -4, -4}};
    
    const static double FE0_D20[1][6] = \
    {{4, 4, 0, 0, 0, -8}};
    
    const static double FE0_D02[1][6] = \
    {{4, 0, 4, 0, -8, 0}};
    
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('simplify expressions', False), ('ignore zero tables', False), ('non zero columns', False), ('remove zero terms', False), ('ignore ones', False)
    // Total number of operations to compute element tensor: 1800
    
    // Loop quadrature points for integral
    // Number of operations to compute element tensor for following IP loop = 1800
    // Only 1 integration point, omitting IP loop.
    
    // Number of operations for primary indices = 1800
    for (unsigned int j = 0; j < 6; j++)
    {
      for (unsigned int k = 0; k < 6; k++)
      {
        // Number of operations to compute entry = 50
        A[j*6 + k] += ((Jinv_00*Jinv_00*FE0_D20[0][j] + Jinv_00*Jinv_10*FE0_D11[0][j] + Jinv_10*Jinv_00*FE0_D11[0][j] + Jinv_10*Jinv_10*FE0_D02[0][j]) + (Jinv_01*Jinv_01*FE0_D20[0][j] + Jinv_01*Jinv_11*FE0_D11[0][j] + Jinv_11*Jinv_01*FE0_D11[0][j] + Jinv_11*Jinv_11*FE0_D02[0][j]))*((Jinv_00*Jinv_00*FE0_D20[0][k] + Jinv_00*Jinv_10*FE0_D11[0][k] + Jinv_10*Jinv_00*FE0_D11[0][k] + Jinv_10*Jinv_10*FE0_D02[0][k]) + (Jinv_01*Jinv_01*FE0_D20[0][k] + Jinv_01*Jinv_11*FE0_D11[0][k] + Jinv_11*Jinv_01*FE0_D11[0][k] + Jinv_11*Jinv_11*FE0_D02[0][k]))*W1*det;
      }// end loop over 'k'
    }// end loop over 'j'
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class biharmonic_0_cell_integral_0: public ufc::cell_integral
{
private:

  biharmonic_0_cell_integral_0_quadrature integral_0_quadrature;

public:

  /// Constructor
  biharmonic_0_cell_integral_0() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~biharmonic_0_cell_integral_0()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Reset values of the element tensor block
    A[0] = 0;
    A[1] = 0;
    A[2] = 0;
    A[3] = 0;
    A[4] = 0;
    A[5] = 0;
    A[6] = 0;
    A[7] = 0;
    A[8] = 0;
    A[9] = 0;
    A[10] = 0;
    A[11] = 0;
    A[12] = 0;
    A[13] = 0;
    A[14] = 0;
    A[15] = 0;
    A[16] = 0;
    A[17] = 0;
    A[18] = 0;
    A[19] = 0;
    A[20] = 0;
    A[21] = 0;
    A[22] = 0;
    A[23] = 0;
    A[24] = 0;
    A[25] = 0;
    A[26] = 0;
    A[27] = 0;
    A[28] = 0;
    A[29] = 0;
    A[30] = 0;
    A[31] = 0;
    A[32] = 0;
    A[33] = 0;
    A[34] = 0;
    A[35] = 0;
    
    // Add all contributions to element tensor
    integral_0_quadrature.tabulate_tensor(A, w, c);
  }

};

/// This class defines the interface for the tabulation of the
/// interior facet tensor corresponding to the local contribution to
/// a form from the integral over an interior facet.

class biharmonic_0_interior_facet_integral_0_quadrature: public ufc::interior_facet_integral
{
public:

  /// Constructor
  biharmonic_0_interior_facet_integral_0_quadrature() : ufc::interior_facet_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~biharmonic_0_interior_facet_integral_0_quadrature()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local interior facet
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c0,
                               const ufc::cell& c1,
                               unsigned int facet0,
                               unsigned int facet1) const
  {
    // Extract vertex coordinates
    const double * const * x0 = c0.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J0_00 = x0[1][0] - x0[0][0];
    const double J0_01 = x0[2][0] - x0[0][0];
    const double J0_10 = x0[1][1] - x0[0][1];
    const double J0_11 = x0[2][1] - x0[0][1];
      
    // Compute determinant of Jacobian
    double detJ0 = J0_00*J0_11 - J0_01*J0_10;
      
    // Compute inverse of Jacobian
    const double Jinv0_00 =  J0_11 / detJ0;
    const double Jinv0_01 = -J0_01 / detJ0;
    const double Jinv0_10 = -J0_10 / detJ0;
    const double Jinv0_11 =  J0_00 / detJ0;
    
    // Extract vertex coordinates
    const double * const * x1 = c1.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J1_00 = x1[1][0] - x1[0][0];
    const double J1_01 = x1[2][0] - x1[0][0];
    const double J1_10 = x1[1][1] - x1[0][1];
    const double J1_11 = x1[2][1] - x1[0][1];
      
    // Compute determinant of Jacobian
    double detJ1 = J1_00*J1_11 - J1_01*J1_10;
      
    // Compute inverse of Jacobian
    const double Jinv1_00 =  J1_11 / detJ1;
    const double Jinv1_01 = -J1_01 / detJ1;
    const double Jinv1_10 = -J1_10 / detJ1;
    const double Jinv1_11 =  J1_00 / detJ1;
    
    // Vertices on edges
    static unsigned int edge_vertices[3][2] = {{1, 2}, {0, 2}, {0, 1}};
    
    // Get vertices
    const unsigned int v0 = edge_vertices[facet0][0];
    const unsigned int v1 = edge_vertices[facet0][1];
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    const double dx0 = x0[v1][0] - x0[v0][0];
    const double dx1 = x0[v1][1] - x0[v0][1];
    const double det = std::sqrt(dx0*dx0 + dx1*dx1);
    
    
    // Array of quadrature weights
    const static double W2[2] = {0.5, 0.5};
    // Quadrature points on the UFC reference element: (0.211324865405187), (0.788675134594813)
    
    // Value of basis functions at quadrature points.
    const static double FE0_f0_D20[2][6] = \
    {{4, 4, 0, 0, 0, -8},
    {4, 4, 0, 0, 0, -8}};
    
    const static double FE0_f2_D02[2][6] = \
    {{3.99999999999999, 0, 4, 0, -8, 0},
    {4, 0, 4, 0, -8, 0}};
    
    const static double FE0_f2_D01[2][6] = \
    {{-2.15470053837925, 0, -1, 0.845299461620748, 3.15470053837925, -0.845299461620748},
    {0.154700538379252, 0, -1, 3.15470053837925, 0.845299461620749, -3.15470053837925}};
    
    const static double FE0_f0_D01[2][6] = \
    {{1, 0, -0.154700538379251, 3.15470053837925, -0.845299461620748, -3.15470053837925},
    {1, 0, 2.15470053837925, 0.845299461620749, -3.15470053837925, -0.845299461620749}};
    
    const static double FE0_f0_D10[2][6] = \
    {{1, 2.15470053837925, 0, 0.845299461620749, -0.845299461620749, -3.15470053837925},
    {1, -0.154700538379252, 0, 3.15470053837925, -3.15470053837925, -0.845299461620749}};
    
    const static double FE0_f0_D11[2][6] = \
    {{4, 0, 0, 4, -4, -4},
    {4, 0, 0, 3.99999999999999, -3.99999999999999, -4}};
    
    const static double FE0_f2_D20[2][6] = \
    {{4, 4, 0, 0, 0, -8},
    {4, 4, 0, 0, 0, -8}};
    
    const static double FE0_f1_D11[2][6] = \
    {{4, 0, 0, 4.00000000000001, -4, -4},
    {4.00000000000001, 0, 0, 4, -4, -4}};
    
    const static double FE0_f1_D10[2][6] = \
    {{-2.15470053837925, -1, 0, 0.845299461620749, -0.845299461620749, 3.15470053837925},
    {0.154700538379252, -1, 0, 3.15470053837925, -3.15470053837925, 0.845299461620749}};
    
    const static double FE0_f2_D10[2][6] = \
    {{-2.15470053837925, -0.154700538379252, 0, 0, 0, 2.3094010767585},
    {0.154700538379252, 2.15470053837925, 0, 0, 0, -2.3094010767585}};
    
    const static double FE0_f2_D11[2][6] = \
    {{3.99999999999999, 0, 0, 4, -4, -4},
    {4, 0, 0, 4, -4, -4}};
    
    const static double FE0_f1_D20[2][6] = \
    {{4, 4, 0, 0, 0, -8.00000000000001},
    {4, 4, 0, 0, 0, -8.00000000000001}};
    
    const static double FE0_f1_D01[2][6] = \
    {{-2.15470053837925, 0, -0.154700538379252, 0, 2.3094010767585, 0},
    {0.154700538379251, 0, 2.15470053837925, 0, -2.3094010767585, 0}};
    
    const static double FE0_f1_D02[2][6] = \
    {{4, 0, 4, 0, -8, 0},
    {4, 0, 4, 0, -8, 0}};
    
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('simplify expressions', False), ('ignore zero tables', False), ('non zero columns', False), ('remove zero terms', False), ('ignore ones', False)
    switch ( facet0 )
    {
    case 0:
      switch ( facet1 )
      {
      case 0:
        {
        // Total number of operations to compute element tensor (from this point): 27360
        
        // Loop quadrature points for integral
        // Number of operations to compute element tensor for following IP loop = 27360
        for (unsigned int ip = 0; ip < 2; ip++)
        {
          
          // Number of operations for primary indices = 13680
          for (unsigned int j = 0; j < 6; j++)
          {
            for (unsigned int k = 0; k < 6; k++)
            {
              // Number of operations to compute entry = 95
              A[(j + 6)*12 + k] += (((Jinv1_00*FE0_f0_D10[ip][j] + Jinv1_10*FE0_f0_D01[ip][j])*w[0][2] + (Jinv1_01*FE0_f0_D10[ip][j] + Jinv1_11*FE0_f0_D01[ip][j])*w[0][3])*((Jinv0_00*FE0_f0_D10[ip][k] + Jinv0_10*FE0_f0_D01[ip][k])*w[0][0] + (Jinv0_01*FE0_f0_D10[ip][k] + Jinv0_11*FE0_f0_D01[ip][k])*w[0][1])*w[2][0]/(w[1][0]) + (((Jinv1_00*Jinv1_00*FE0_f0_D20[ip][j] + Jinv1_00*Jinv1_10*FE0_f0_D11[ip][j] + Jinv1_10*Jinv1_00*FE0_f0_D11[ip][j] + Jinv1_10*Jinv1_10*FE0_f1_D02[ip][j]) + (Jinv1_01*Jinv1_01*FE0_f0_D20[ip][j] + Jinv1_01*Jinv1_11*FE0_f0_D11[ip][j] + Jinv1_11*Jinv1_01*FE0_f0_D11[ip][j] + Jinv1_11*Jinv1_11*FE0_f1_D02[ip][j]))*0.5*((Jinv0_00*FE0_f0_D10[ip][k] + Jinv0_10*FE0_f0_D01[ip][k])*w[0][0] + (Jinv0_01*FE0_f0_D10[ip][k] + Jinv0_11*FE0_f0_D01[ip][k])*w[0][1])*-1 + ((Jinv0_00*Jinv0_00*FE0_f0_D20[ip][k] + Jinv0_00*Jinv0_10*FE0_f0_D11[ip][k] + Jinv0_10*Jinv0_00*FE0_f0_D11[ip][k] + Jinv0_10*Jinv0_10*FE0_f1_D02[ip][k]) + (Jinv0_01*Jinv0_01*FE0_f0_D20[ip][k] + Jinv0_01*Jinv0_11*FE0_f0_D11[ip][k] + Jinv0_11*Jinv0_01*FE0_f0_D11[ip][k] + Jinv0_11*Jinv0_11*FE0_f1_D02[ip][k]))*0.5*((Jinv1_00*FE0_f0_D10[ip][j] + Jinv1_10*FE0_f0_D01[ip][j])*w[0][2] + (Jinv1_01*FE0_f0_D10[ip][j] + Jinv1_11*FE0_f0_D01[ip][j])*w[0][3])*-1))*W2[ip]*det;
              // Number of operations to compute entry = 95
              A[(j + 6)*12 + (k + 6)] += (((Jinv1_00*FE0_f0_D10[ip][j] + Jinv1_10*FE0_f0_D01[ip][j])*w[0][2] + (Jinv1_01*FE0_f0_D10[ip][j] + Jinv1_11*FE0_f0_D01[ip][j])*w[0][3])*((Jinv1_00*FE0_f0_D10[ip][k] + Jinv1_10*FE0_f0_D01[ip][k])*w[0][2] + (Jinv1_01*FE0_f0_D10[ip][k] + Jinv1_11*FE0_f0_D01[ip][k])*w[0][3])*w[2][0]/(w[1][0]) + (((Jinv1_00*Jinv1_00*FE0_f0_D20[ip][j] + Jinv1_00*Jinv1_10*FE0_f0_D11[ip][j] + Jinv1_10*Jinv1_00*FE0_f0_D11[ip][j] + Jinv1_10*Jinv1_10*FE0_f1_D02[ip][j]) + (Jinv1_01*Jinv1_01*FE0_f0_D20[ip][j] + Jinv1_01*Jinv1_11*FE0_f0_D11[ip][j] + Jinv1_11*Jinv1_01*FE0_f0_D11[ip][j] + Jinv1_11*Jinv1_11*FE0_f1_D02[ip][j]))*0.5*((Jinv1_00*FE0_f0_D10[ip][k] + Jinv1_10*FE0_f0_D01[ip][k])*w[0][2] + (Jinv1_01*FE0_f0_D10[ip][k] + Jinv1_11*FE0_f0_D01[ip][k])*w[0][3])*-1 + ((Jinv1_00*Jinv1_00*FE0_f0_D20[ip][k] + Jinv1_00*Jinv1_10*FE0_f0_D11[ip][k] + Jinv1_10*Jinv1_00*FE0_f0_D11[ip][k] + Jinv1_10*Jinv1_10*FE0_f1_D02[ip][k]) + (Jinv1_01*Jinv1_01*FE0_f0_D20[ip][k] + Jinv1_01*Jinv1_11*FE0_f0_D11[ip][k] + Jinv1_11*Jinv1_01*FE0_f0_D11[ip][k] + Jinv1_11*Jinv1_11*FE0_f1_D02[ip][k]))*0.5*((Jinv1_00*FE0_f0_D10[ip][j] + Jinv1_10*FE0_f0_D01[ip][j])*w[0][2] + (Jinv1_01*FE0_f0_D10[ip][j] + Jinv1_11*FE0_f0_D01[ip][j])*w[0][3])*-1))*W2[ip]*det;
              // Number of operations to compute entry = 95
              A[j*12 + (k + 6)] += (((Jinv0_00*FE0_f0_D10[ip][j] + Jinv0_10*FE0_f0_D01[ip][j])*w[0][0] + (Jinv0_01*FE0_f0_D10[ip][j] + Jinv0_11*FE0_f0_D01[ip][j])*w[0][1])*((Jinv1_00*FE0_f0_D10[ip][k] + Jinv1_10*FE0_f0_D01[ip][k])*w[0][2] + (Jinv1_01*FE0_f0_D10[ip][k] + Jinv1_11*FE0_f0_D01[ip][k])*w[0][3])*w[2][0]/(w[1][0]) + (((Jinv0_00*Jinv0_00*FE0_f0_D20[ip][j] + Jinv0_00*Jinv0_10*FE0_f0_D11[ip][j] + Jinv0_10*Jinv0_00*FE0_f0_D11[ip][j] + Jinv0_10*Jinv0_10*FE0_f1_D02[ip][j]) + (Jinv0_01*Jinv0_01*FE0_f0_D20[ip][j] + Jinv0_01*Jinv0_11*FE0_f0_D11[ip][j] + Jinv0_11*Jinv0_01*FE0_f0_D11[ip][j] + Jinv0_11*Jinv0_11*FE0_f1_D02[ip][j]))*0.5*((Jinv1_00*FE0_f0_D10[ip][k] + Jinv1_10*FE0_f0_D01[ip][k])*w[0][2] + (Jinv1_01*FE0_f0_D10[ip][k] + Jinv1_11*FE0_f0_D01[ip][k])*w[0][3])*-1 + ((Jinv1_00*Jinv1_00*FE0_f0_D20[ip][k] + Jinv1_00*Jinv1_10*FE0_f0_D11[ip][k] + Jinv1_10*Jinv1_00*FE0_f0_D11[ip][k] + Jinv1_10*Jinv1_10*FE0_f1_D02[ip][k]) + (Jinv1_01*Jinv1_01*FE0_f0_D20[ip][k] + Jinv1_01*Jinv1_11*FE0_f0_D11[ip][k] + Jinv1_11*Jinv1_01*FE0_f0_D11[ip][k] + Jinv1_11*Jinv1_11*FE0_f1_D02[ip][k]))*0.5*((Jinv0_00*FE0_f0_D10[ip][j] + Jinv0_10*FE0_f0_D01[ip][j])*w[0][0] + (Jinv0_01*FE0_f0_D10[ip][j] + Jinv0_11*FE0_f0_D01[ip][j])*w[0][1])*-1))*W2[ip]*det;
              // Number of operations to compute entry = 95
              A[j*12 + k] += (((Jinv0_00*FE0_f0_D10[ip][j] + Jinv0_10*FE0_f0_D01[ip][j])*w[0][0] + (Jinv0_01*FE0_f0_D10[ip][j] + Jinv0_11*FE0_f0_D01[ip][j])*w[0][1])*((Jinv0_00*FE0_f0_D10[ip][k] + Jinv0_10*FE0_f0_D01[ip][k])*w[0][0] + (Jinv0_01*FE0_f0_D10[ip][k] + Jinv0_11*FE0_f0_D01[ip][k])*w[0][1])*w[2][0]/(w[1][0]) + (((Jinv0_00*Jinv0_00*FE0_f0_D20[ip][j] + Jinv0_00*Jinv0_10*FE0_f0_D11[ip][j] + Jinv0_10*Jinv0_00*FE0_f0_D11[ip][j] + Jinv0_10*Jinv0_10*FE0_f1_D02[ip][j]) + (Jinv0_01*Jinv0_01*FE0_f0_D20[ip][j] + Jinv0_01*Jinv0_11*FE0_f0_D11[ip][j] + Jinv0_11*Jinv0_01*FE0_f0_D11[ip][j] + Jinv0_11*Jinv0_11*FE0_f1_D02[ip][j]))*0.5*((Jinv0_00*FE0_f0_D10[ip][k] + Jinv0_10*FE0_f0_D01[ip][k])*w[0][0] + (Jinv0_01*FE0_f0_D10[ip][k] + Jinv0_11*FE0_f0_D01[ip][k])*w[0][1])*-1 + ((Jinv0_00*Jinv0_00*FE0_f0_D20[ip][k] + Jinv0_00*Jinv0_10*FE0_f0_D11[ip][k] + Jinv0_10*Jinv0_00*FE0_f0_D11[ip][k] + Jinv0_10*Jinv0_10*FE0_f1_D02[ip][k]) + (Jinv0_01*Jinv0_01*FE0_f0_D20[ip][k] + Jinv0_01*Jinv0_11*FE0_f0_D11[ip][k] + Jinv0_11*Jinv0_01*FE0_f0_D11[ip][k] + Jinv0_11*Jinv0_11*FE0_f1_D02[ip][k]))*0.5*((Jinv0_00*FE0_f0_D10[ip][j] + Jinv0_10*FE0_f0_D01[ip][j])*w[0][0] + (Jinv0_01*FE0_f0_D10[ip][j] + Jinv0_11*FE0_f0_D01[ip][j])*w[0][1])*-1))*W2[ip]*det;
            }// end loop over 'k'
          }// end loop over 'j'
        }// end loop over 'ip'
        }
        break;
      case 1:
        {
        // Total number of operations to compute element tensor (from this point): 27360
        
        // Loop quadrature points for integral
        // Number of operations to compute element tensor for following IP loop = 27360
        for (unsigned int ip = 0; ip < 2; ip++)
        {
          
          // Number of operations for primary indices = 13680
          for (unsigned int j = 0; j < 6; j++)
          {
            for (unsigned int k = 0; k < 6; k++)
            {
              // Number of operations to compute entry = 95
              A[(j + 6)*12 + k] += (((Jinv1_00*FE0_f1_D10[ip][j] + Jinv1_10*FE0_f1_D01[ip][j])*w[0][2] + (Jinv1_01*FE0_f1_D10[ip][j] + Jinv1_11*FE0_f1_D01[ip][j])*w[0][3])*((Jinv0_00*FE0_f0_D10[ip][k] + Jinv0_10*FE0_f0_D01[ip][k])*w[0][0] + (Jinv0_01*FE0_f0_D10[ip][k] + Jinv0_11*FE0_f0_D01[ip][k])*w[0][1])*w[2][0]/(w[1][0]) + (((Jinv1_00*Jinv1_00*FE0_f1_D20[ip][j] + Jinv1_00*Jinv1_10*FE0_f1_D11[ip][j] + Jinv1_10*Jinv1_00*FE0_f1_D11[ip][j] + Jinv1_10*Jinv1_10*FE0_f1_D02[ip][j]) + (Jinv1_01*Jinv1_01*FE0_f1_D20[ip][j] + Jinv1_01*Jinv1_11*FE0_f1_D11[ip][j] + Jinv1_11*Jinv1_01*FE0_f1_D11[ip][j] + Jinv1_11*Jinv1_11*FE0_f1_D02[ip][j]))*0.5*((Jinv0_00*FE0_f0_D10[ip][k] + Jinv0_10*FE0_f0_D01[ip][k])*w[0][0] + (Jinv0_01*FE0_f0_D10[ip][k] + Jinv0_11*FE0_f0_D01[ip][k])*w[0][1])*-1 + ((Jinv0_00*Jinv0_00*FE0_f0_D20[ip][k] + Jinv0_00*Jinv0_10*FE0_f0_D11[ip][k] + Jinv0_10*Jinv0_00*FE0_f0_D11[ip][k] + Jinv0_10*Jinv0_10*FE0_f1_D02[ip][k]) + (Jinv0_01*Jinv0_01*FE0_f0_D20[ip][k] + Jinv0_01*Jinv0_11*FE0_f0_D11[ip][k] + Jinv0_11*Jinv0_01*FE0_f0_D11[ip][k] + Jinv0_11*Jinv0_11*FE0_f1_D02[ip][k]))*0.5*((Jinv1_00*FE0_f1_D10[ip][j] + Jinv1_10*FE0_f1_D01[ip][j])*w[0][2] + (Jinv1_01*FE0_f1_D10[ip][j] + Jinv1_11*FE0_f1_D01[ip][j])*w[0][3])*-1))*W2[ip]*det;
              // Number of operations to compute entry = 95
              A[(j + 6)*12 + (k + 6)] += (((Jinv1_00*FE0_f1_D10[ip][j] + Jinv1_10*FE0_f1_D01[ip][j])*w[0][2] + (Jinv1_01*FE0_f1_D10[ip][j] + Jinv1_11*FE0_f1_D01[ip][j])*w[0][3])*((Jinv1_00*FE0_f1_D10[ip][k] + Jinv1_10*FE0_f1_D01[ip][k])*w[0][2] + (Jinv1_01*FE0_f1_D10[ip][k] + Jinv1_11*FE0_f1_D01[ip][k])*w[0][3])*w[2][0]/(w[1][0]) + (((Jinv1_00*Jinv1_00*FE0_f1_D20[ip][j] + Jinv1_00*Jinv1_10*FE0_f1_D11[ip][j] + Jinv1_10*Jinv1_00*FE0_f1_D11[ip][j] + Jinv1_10*Jinv1_10*FE0_f1_D02[ip][j]) + (Jinv1_01*Jinv1_01*FE0_f1_D20[ip][j] + Jinv1_01*Jinv1_11*FE0_f1_D11[ip][j] + Jinv1_11*Jinv1_01*FE0_f1_D11[ip][j] + Jinv1_11*Jinv1_11*FE0_f1_D02[ip][j]))*0.5*((Jinv1_00*FE0_f1_D10[ip][k] + Jinv1_10*FE0_f1_D01[ip][k])*w[0][2] + (Jinv1_01*FE0_f1_D10[ip][k] + Jinv1_11*FE0_f1_D01[ip][k])*w[0][3])*-1 + ((Jinv1_00*Jinv1_00*FE0_f1_D20[ip][k] + Jinv1_00*Jinv1_10*FE0_f1_D11[ip][k] + Jinv1_10*Jinv1_00*FE0_f1_D11[ip][k] + Jinv1_10*Jinv1_10*FE0_f1_D02[ip][k]) + (Jinv1_01*Jinv1_01*FE0_f1_D20[ip][k] + Jinv1_01*Jinv1_11*FE0_f1_D11[ip][k] + Jinv1_11*Jinv1_01*FE0_f1_D11[ip][k] + Jinv1_11*Jinv1_11*FE0_f1_D02[ip][k]))*0.5*((Jinv1_00*FE0_f1_D10[ip][j] + Jinv1_10*FE0_f1_D01[ip][j])*w[0][2] + (Jinv1_01*FE0_f1_D10[ip][j] + Jinv1_11*FE0_f1_D01[ip][j])*w[0][3])*-1))*W2[ip]*det;
              // Number of operations to compute entry = 95
              A[j*12 + (k + 6)] += (((Jinv0_00*FE0_f0_D10[ip][j] + Jinv0_10*FE0_f0_D01[ip][j])*w[0][0] + (Jinv0_01*FE0_f0_D10[ip][j] + Jinv0_11*FE0_f0_D01[ip][j])*w[0][1])*((Jinv1_00*FE0_f1_D10[ip][k] + Jinv1_10*FE0_f1_D01[ip][k])*w[0][2] + (Jinv1_01*FE0_f1_D10[ip][k] + Jinv1_11*FE0_f1_D01[ip][k])*w[0][3])*w[2][0]/(w[1][0]) + (((Jinv0_00*Jinv0_00*FE0_f0_D20[ip][j] + Jinv0_00*Jinv0_10*FE0_f0_D11[ip][j] + Jinv0_10*Jinv0_00*FE0_f0_D11[ip][j] + Jinv0_10*Jinv0_10*FE0_f1_D02[ip][j]) + (Jinv0_01*Jinv0_01*FE0_f0_D20[ip][j] + Jinv0_01*Jinv0_11*FE0_f0_D11[ip][j] + Jinv0_11*Jinv0_01*FE0_f0_D11[ip][j] + Jinv0_11*Jinv0_11*FE0_f1_D02[ip][j]))*0.5*((Jinv1_00*FE0_f1_D10[ip][k] + Jinv1_10*FE0_f1_D01[ip][k])*w[0][2] + (Jinv1_01*FE0_f1_D10[ip][k] + Jinv1_11*FE0_f1_D01[ip][k])*w[0][3])*-1 + ((Jinv1_00*Jinv1_00*FE0_f1_D20[ip][k] + Jinv1_00*Jinv1_10*FE0_f1_D11[ip][k] + Jinv1_10*Jinv1_00*FE0_f1_D11[ip][k] + Jinv1_10*Jinv1_10*FE0_f1_D02[ip][k]) + (Jinv1_01*Jinv1_01*FE0_f1_D20[ip][k] + Jinv1_01*Jinv1_11*FE0_f1_D11[ip][k] + Jinv1_11*Jinv1_01*FE0_f1_D11[ip][k] + Jinv1_11*Jinv1_11*FE0_f1_D02[ip][k]))*0.5*((Jinv0_00*FE0_f0_D10[ip][j] + Jinv0_10*FE0_f0_D01[ip][j])*w[0][0] + (Jinv0_01*FE0_f0_D10[ip][j] + Jinv0_11*FE0_f0_D01[ip][j])*w[0][1])*-1))*W2[ip]*det;
              // Number of operations to compute entry = 95
              A[j*12 + k] += (((Jinv0_00*FE0_f0_D10[ip][j] + Jinv0_10*FE0_f0_D01[ip][j])*w[0][0] + (Jinv0_01*FE0_f0_D10[ip][j] + Jinv0_11*FE0_f0_D01[ip][j])*w[0][1])*((Jinv0_00*FE0_f0_D10[ip][k] + Jinv0_10*FE0_f0_D01[ip][k])*w[0][0] + (Jinv0_01*FE0_f0_D10[ip][k] + Jinv0_11*FE0_f0_D01[ip][k])*w[0][1])*w[2][0]/(w[1][0]) + (((Jinv0_00*Jinv0_00*FE0_f0_D20[ip][j] + Jinv0_00*Jinv0_10*FE0_f0_D11[ip][j] + Jinv0_10*Jinv0_00*FE0_f0_D11[ip][j] + Jinv0_10*Jinv0_10*FE0_f1_D02[ip][j]) + (Jinv0_01*Jinv0_01*FE0_f0_D20[ip][j] + Jinv0_01*Jinv0_11*FE0_f0_D11[ip][j] + Jinv0_11*Jinv0_01*FE0_f0_D11[ip][j] + Jinv0_11*Jinv0_11*FE0_f1_D02[ip][j]))*0.5*((Jinv0_00*FE0_f0_D10[ip][k] + Jinv0_10*FE0_f0_D01[ip][k])*w[0][0] + (Jinv0_01*FE0_f0_D10[ip][k] + Jinv0_11*FE0_f0_D01[ip][k])*w[0][1])*-1 + ((Jinv0_00*Jinv0_00*FE0_f0_D20[ip][k] + Jinv0_00*Jinv0_10*FE0_f0_D11[ip][k] + Jinv0_10*Jinv0_00*FE0_f0_D11[ip][k] + Jinv0_10*Jinv0_10*FE0_f1_D02[ip][k]) + (Jinv0_01*Jinv0_01*FE0_f0_D20[ip][k] + Jinv0_01*Jinv0_11*FE0_f0_D11[ip][k] + Jinv0_11*Jinv0_01*FE0_f0_D11[ip][k] + Jinv0_11*Jinv0_11*FE0_f1_D02[ip][k]))*0.5*((Jinv0_00*FE0_f0_D10[ip][j] + Jinv0_10*FE0_f0_D01[ip][j])*w[0][0] + (Jinv0_01*FE0_f0_D10[ip][j] + Jinv0_11*FE0_f0_D01[ip][j])*w[0][1])*-1))*W2[ip]*det;
            }// end loop over 'k'
          }// end loop over 'j'
        }// end loop over 'ip'
        }
        break;
      case 2:
        {
        // Total number of operations to compute element tensor (from this point): 27360
        
        // Loop quadrature points for integral
        // Number of operations to compute element tensor for following IP loop = 27360
        for (unsigned int ip = 0; ip < 2; ip++)
        {
          
          // Number of operations for primary indices = 13680
          for (unsigned int j = 0; j < 6; j++)
          {
            for (unsigned int k = 0; k < 6; k++)
            {
              // Number of operations to compute entry = 95
              A[(j + 6)*12 + k] += (((Jinv1_00*FE0_f2_D10[ip][j] + Jinv1_10*FE0_f2_D01[ip][j])*w[0][2] + (Jinv1_01*FE0_f2_D10[ip][j] + Jinv1_11*FE0_f2_D01[ip][j])*w[0][3])*((Jinv0_00*FE0_f0_D10[ip][k] + Jinv0_10*FE0_f0_D01[ip][k])*w[0][0] + (Jinv0_01*FE0_f0_D10[ip][k] + Jinv0_11*FE0_f0_D01[ip][k])*w[0][1])*w[2][0]/(w[1][0]) + (((Jinv1_00*Jinv1_00*FE0_f2_D20[ip][j] + Jinv1_00*Jinv1_10*FE0_f2_D11[ip][j] + Jinv1_10*Jinv1_00*FE0_f2_D11[ip][j] + Jinv1_10*Jinv1_10*FE0_f2_D02[ip][j]) + (Jinv1_01*Jinv1_01*FE0_f2_D20[ip][j] + Jinv1_01*Jinv1_11*FE0_f2_D11[ip][j] + Jinv1_11*Jinv1_01*FE0_f2_D11[ip][j] + Jinv1_11*Jinv1_11*FE0_f2_D02[ip][j]))*0.5*((Jinv0_00*FE0_f0_D10[ip][k] + Jinv0_10*FE0_f0_D01[ip][k])*w[0][0] + (Jinv0_01*FE0_f0_D10[ip][k] + Jinv0_11*FE0_f0_D01[ip][k])*w[0][1])*-1 + ((Jinv0_00*Jinv0_00*FE0_f0_D20[ip][k] + Jinv0_00*Jinv0_10*FE0_f0_D11[ip][k] + Jinv0_10*Jinv0_00*FE0_f0_D11[ip][k] + Jinv0_10*Jinv0_10*FE0_f1_D02[ip][k]) + (Jinv0_01*Jinv0_01*FE0_f0_D20[ip][k] + Jinv0_01*Jinv0_11*FE0_f0_D11[ip][k] + Jinv0_11*Jinv0_01*FE0_f0_D11[ip][k] + Jinv0_11*Jinv0_11*FE0_f1_D02[ip][k]))*0.5*((Jinv1_00*FE0_f2_D10[ip][j] + Jinv1_10*FE0_f2_D01[ip][j])*w[0][2] + (Jinv1_01*FE0_f2_D10[ip][j] + Jinv1_11*FE0_f2_D01[ip][j])*w[0][3])*-1))*W2[ip]*det;
              // Number of operations to compute entry = 95
              A[(j + 6)*12 + (k + 6)] += (((Jinv1_00*FE0_f2_D10[ip][j] + Jinv1_10*FE0_f2_D01[ip][j])*w[0][2] + (Jinv1_01*FE0_f2_D10[ip][j] + Jinv1_11*FE0_f2_D01[ip][j])*w[0][3])*((Jinv1_00*FE0_f2_D10[ip][k] + Jinv1_10*FE0_f2_D01[ip][k])*w[0][2] + (Jinv1_01*FE0_f2_D10[ip][k] + Jinv1_11*FE0_f2_D01[ip][k])*w[0][3])*w[2][0]/(w[1][0]) + (((Jinv1_00*Jinv1_00*FE0_f2_D20[ip][j] + Jinv1_00*Jinv1_10*FE0_f2_D11[ip][j] + Jinv1_10*Jinv1_00*FE0_f2_D11[ip][j] + Jinv1_10*Jinv1_10*FE0_f2_D02[ip][j]) + (Jinv1_01*Jinv1_01*FE0_f2_D20[ip][j] + Jinv1_01*Jinv1_11*FE0_f2_D11[ip][j] + Jinv1_11*Jinv1_01*FE0_f2_D11[ip][j] + Jinv1_11*Jinv1_11*FE0_f2_D02[ip][j]))*0.5*((Jinv1_00*FE0_f2_D10[ip][k] + Jinv1_10*FE0_f2_D01[ip][k])*w[0][2] + (Jinv1_01*FE0_f2_D10[ip][k] + Jinv1_11*FE0_f2_D01[ip][k])*w[0][3])*-1 + ((Jinv1_00*Jinv1_00*FE0_f2_D20[ip][k] + Jinv1_00*Jinv1_10*FE0_f2_D11[ip][k] + Jinv1_10*Jinv1_00*FE0_f2_D11[ip][k] + Jinv1_10*Jinv1_10*FE0_f2_D02[ip][k]) + (Jinv1_01*Jinv1_01*FE0_f2_D20[ip][k] + Jinv1_01*Jinv1_11*FE0_f2_D11[ip][k] + Jinv1_11*Jinv1_01*FE0_f2_D11[ip][k] + Jinv1_11*Jinv1_11*FE0_f2_D02[ip][k]))*0.5*((Jinv1_00*FE0_f2_D10[ip][j] + Jinv1_10*FE0_f2_D01[ip][j])*w[0][2] + (Jinv1_01*FE0_f2_D10[ip][j] + Jinv1_11*FE0_f2_D01[ip][j])*w[0][3])*-1))*W2[ip]*det;
              // Number of operations to compute entry = 95
              A[j*12 + (k + 6)] += (((Jinv0_00*FE0_f0_D10[ip][j] + Jinv0_10*FE0_f0_D01[ip][j])*w[0][0] + (Jinv0_01*FE0_f0_D10[ip][j] + Jinv0_11*FE0_f0_D01[ip][j])*w[0][1])*((Jinv1_00*FE0_f2_D10[ip][k] + Jinv1_10*FE0_f2_D01[ip][k])*w[0][2] + (Jinv1_01*FE0_f2_D10[ip][k] + Jinv1_11*FE0_f2_D01[ip][k])*w[0][3])*w[2][0]/(w[1][0]) + (((Jinv0_00*Jinv0_00*FE0_f0_D20[ip][j] + Jinv0_00*Jinv0_10*FE0_f0_D11[ip][j] + Jinv0_10*Jinv0_00*FE0_f0_D11[ip][j] + Jinv0_10*Jinv0_10*FE0_f1_D02[ip][j]) + (Jinv0_01*Jinv0_01*FE0_f0_D20[ip][j] + Jinv0_01*Jinv0_11*FE0_f0_D11[ip][j] + Jinv0_11*Jinv0_01*FE0_f0_D11[ip][j] + Jinv0_11*Jinv0_11*FE0_f1_D02[ip][j]))*0.5*((Jinv1_00*FE0_f2_D10[ip][k] + Jinv1_10*FE0_f2_D01[ip][k])*w[0][2] + (Jinv1_01*FE0_f2_D10[ip][k] + Jinv1_11*FE0_f2_D01[ip][k])*w[0][3])*-1 + ((Jinv1_00*Jinv1_00*FE0_f2_D20[ip][k] + Jinv1_00*Jinv1_10*FE0_f2_D11[ip][k] + Jinv1_10*Jinv1_00*FE0_f2_D11[ip][k] + Jinv1_10*Jinv1_10*FE0_f2_D02[ip][k]) + (Jinv1_01*Jinv1_01*FE0_f2_D20[ip][k] + Jinv1_01*Jinv1_11*FE0_f2_D11[ip][k] + Jinv1_11*Jinv1_01*FE0_f2_D11[ip][k] + Jinv1_11*Jinv1_11*FE0_f2_D02[ip][k]))*0.5*((Jinv0_00*FE0_f0_D10[ip][j] + Jinv0_10*FE0_f0_D01[ip][j])*w[0][0] + (Jinv0_01*FE0_f0_D10[ip][j] + Jinv0_11*FE0_f0_D01[ip][j])*w[0][1])*-1))*W2[ip]*det;
              // Number of operations to compute entry = 95
              A[j*12 + k] += (((Jinv0_00*FE0_f0_D10[ip][j] + Jinv0_10*FE0_f0_D01[ip][j])*w[0][0] + (Jinv0_01*FE0_f0_D10[ip][j] + Jinv0_11*FE0_f0_D01[ip][j])*w[0][1])*((Jinv0_00*FE0_f0_D10[ip][k] + Jinv0_10*FE0_f0_D01[ip][k])*w[0][0] + (Jinv0_01*FE0_f0_D10[ip][k] + Jinv0_11*FE0_f0_D01[ip][k])*w[0][1])*w[2][0]/(w[1][0]) + (((Jinv0_00*Jinv0_00*FE0_f0_D20[ip][j] + Jinv0_00*Jinv0_10*FE0_f0_D11[ip][j] + Jinv0_10*Jinv0_00*FE0_f0_D11[ip][j] + Jinv0_10*Jinv0_10*FE0_f1_D02[ip][j]) + (Jinv0_01*Jinv0_01*FE0_f0_D20[ip][j] + Jinv0_01*Jinv0_11*FE0_f0_D11[ip][j] + Jinv0_11*Jinv0_01*FE0_f0_D11[ip][j] + Jinv0_11*Jinv0_11*FE0_f1_D02[ip][j]))*0.5*((Jinv0_00*FE0_f0_D10[ip][k] + Jinv0_10*FE0_f0_D01[ip][k])*w[0][0] + (Jinv0_01*FE0_f0_D10[ip][k] + Jinv0_11*FE0_f0_D01[ip][k])*w[0][1])*-1 + ((Jinv0_00*Jinv0_00*FE0_f0_D20[ip][k] + Jinv0_00*Jinv0_10*FE0_f0_D11[ip][k] + Jinv0_10*Jinv0_00*FE0_f0_D11[ip][k] + Jinv0_10*Jinv0_10*FE0_f1_D02[ip][k]) + (Jinv0_01*Jinv0_01*FE0_f0_D20[ip][k] + Jinv0_01*Jinv0_11*FE0_f0_D11[ip][k] + Jinv0_11*Jinv0_01*FE0_f0_D11[ip][k] + Jinv0_11*Jinv0_11*FE0_f1_D02[ip][k]))*0.5*((Jinv0_00*FE0_f0_D10[ip][j] + Jinv0_10*FE0_f0_D01[ip][j])*w[0][0] + (Jinv0_01*FE0_f0_D10[ip][j] + Jinv0_11*FE0_f0_D01[ip][j])*w[0][1])*-1))*W2[ip]*det;
            }// end loop over 'k'
          }// end loop over 'j'
        }// end loop over 'ip'
        }
        break;
      }
      break;
    case 1:
      switch ( facet1 )
      {
      case 0:
        {
        // Total number of operations to compute element tensor (from this point): 27360
        
        // Loop quadrature points for integral
        // Number of operations to compute element tensor for following IP loop = 27360
        for (unsigned int ip = 0; ip < 2; ip++)
        {
          
          // Number of operations for primary indices = 13680
          for (unsigned int j = 0; j < 6; j++)
          {
            for (unsigned int k = 0; k < 6; k++)
            {
              // Number of operations to compute entry = 95
              A[(j + 6)*12 + k] += (((Jinv1_00*FE0_f0_D10[ip][j] + Jinv1_10*FE0_f0_D01[ip][j])*w[0][2] + (Jinv1_01*FE0_f0_D10[ip][j] + Jinv1_11*FE0_f0_D01[ip][j])*w[0][3])*((Jinv0_00*FE0_f1_D10[ip][k] + Jinv0_10*FE0_f1_D01[ip][k])*w[0][0] + (Jinv0_01*FE0_f1_D10[ip][k] + Jinv0_11*FE0_f1_D01[ip][k])*w[0][1])*w[2][0]/(w[1][0]) + (((Jinv1_00*Jinv1_00*FE0_f0_D20[ip][j] + Jinv1_00*Jinv1_10*FE0_f0_D11[ip][j] + Jinv1_10*Jinv1_00*FE0_f0_D11[ip][j] + Jinv1_10*Jinv1_10*FE0_f1_D02[ip][j]) + (Jinv1_01*Jinv1_01*FE0_f0_D20[ip][j] + Jinv1_01*Jinv1_11*FE0_f0_D11[ip][j] + Jinv1_11*Jinv1_01*FE0_f0_D11[ip][j] + Jinv1_11*Jinv1_11*FE0_f1_D02[ip][j]))*0.5*((Jinv0_00*FE0_f1_D10[ip][k] + Jinv0_10*FE0_f1_D01[ip][k])*w[0][0] + (Jinv0_01*FE0_f1_D10[ip][k] + Jinv0_11*FE0_f1_D01[ip][k])*w[0][1])*-1 + ((Jinv0_00*Jinv0_00*FE0_f1_D20[ip][k] + Jinv0_00*Jinv0_10*FE0_f1_D11[ip][k] + Jinv0_10*Jinv0_00*FE0_f1_D11[ip][k] + Jinv0_10*Jinv0_10*FE0_f1_D02[ip][k]) + (Jinv0_01*Jinv0_01*FE0_f1_D20[ip][k] + Jinv0_01*Jinv0_11*FE0_f1_D11[ip][k] + Jinv0_11*Jinv0_01*FE0_f1_D11[ip][k] + Jinv0_11*Jinv0_11*FE0_f1_D02[ip][k]))*0.5*((Jinv1_00*FE0_f0_D10[ip][j] + Jinv1_10*FE0_f0_D01[ip][j])*w[0][2] + (Jinv1_01*FE0_f0_D10[ip][j] + Jinv1_11*FE0_f0_D01[ip][j])*w[0][3])*-1))*W2[ip]*det;
              // Number of operations to compute entry = 95
              A[(j + 6)*12 + (k + 6)] += (((Jinv1_00*FE0_f0_D10[ip][j] + Jinv1_10*FE0_f0_D01[ip][j])*w[0][2] + (Jinv1_01*FE0_f0_D10[ip][j] + Jinv1_11*FE0_f0_D01[ip][j])*w[0][3])*((Jinv1_00*FE0_f0_D10[ip][k] + Jinv1_10*FE0_f0_D01[ip][k])*w[0][2] + (Jinv1_01*FE0_f0_D10[ip][k] + Jinv1_11*FE0_f0_D01[ip][k])*w[0][3])*w[2][0]/(w[1][0]) + (((Jinv1_00*Jinv1_00*FE0_f0_D20[ip][j] + Jinv1_00*Jinv1_10*FE0_f0_D11[ip][j] + Jinv1_10*Jinv1_00*FE0_f0_D11[ip][j] + Jinv1_10*Jinv1_10*FE0_f1_D02[ip][j]) + (Jinv1_01*Jinv1_01*FE0_f0_D20[ip][j] + Jinv1_01*Jinv1_11*FE0_f0_D11[ip][j] + Jinv1_11*Jinv1_01*FE0_f0_D11[ip][j] + Jinv1_11*Jinv1_11*FE0_f1_D02[ip][j]))*0.5*((Jinv1_00*FE0_f0_D10[ip][k] + Jinv1_10*FE0_f0_D01[ip][k])*w[0][2] + (Jinv1_01*FE0_f0_D10[ip][k] + Jinv1_11*FE0_f0_D01[ip][k])*w[0][3])*-1 + ((Jinv1_00*Jinv1_00*FE0_f0_D20[ip][k] + Jinv1_00*Jinv1_10*FE0_f0_D11[ip][k] + Jinv1_10*Jinv1_00*FE0_f0_D11[ip][k] + Jinv1_10*Jinv1_10*FE0_f1_D02[ip][k]) + (Jinv1_01*Jinv1_01*FE0_f0_D20[ip][k] + Jinv1_01*Jinv1_11*FE0_f0_D11[ip][k] + Jinv1_11*Jinv1_01*FE0_f0_D11[ip][k] + Jinv1_11*Jinv1_11*FE0_f1_D02[ip][k]))*0.5*((Jinv1_00*FE0_f0_D10[ip][j] + Jinv1_10*FE0_f0_D01[ip][j])*w[0][2] + (Jinv1_01*FE0_f0_D10[ip][j] + Jinv1_11*FE0_f0_D01[ip][j])*w[0][3])*-1))*W2[ip]*det;
              // Number of operations to compute entry = 95
              A[j*12 + (k + 6)] += (((Jinv0_00*FE0_f1_D10[ip][j] + Jinv0_10*FE0_f1_D01[ip][j])*w[0][0] + (Jinv0_01*FE0_f1_D10[ip][j] + Jinv0_11*FE0_f1_D01[ip][j])*w[0][1])*((Jinv1_00*FE0_f0_D10[ip][k] + Jinv1_10*FE0_f0_D01[ip][k])*w[0][2] + (Jinv1_01*FE0_f0_D10[ip][k] + Jinv1_11*FE0_f0_D01[ip][k])*w[0][3])*w[2][0]/(w[1][0]) + (((Jinv0_00*Jinv0_00*FE0_f1_D20[ip][j] + Jinv0_00*Jinv0_10*FE0_f1_D11[ip][j] + Jinv0_10*Jinv0_00*FE0_f1_D11[ip][j] + Jinv0_10*Jinv0_10*FE0_f1_D02[ip][j]) + (Jinv0_01*Jinv0_01*FE0_f1_D20[ip][j] + Jinv0_01*Jinv0_11*FE0_f1_D11[ip][j] + Jinv0_11*Jinv0_01*FE0_f1_D11[ip][j] + Jinv0_11*Jinv0_11*FE0_f1_D02[ip][j]))*0.5*((Jinv1_00*FE0_f0_D10[ip][k] + Jinv1_10*FE0_f0_D01[ip][k])*w[0][2] + (Jinv1_01*FE0_f0_D10[ip][k] + Jinv1_11*FE0_f0_D01[ip][k])*w[0][3])*-1 + ((Jinv1_00*Jinv1_00*FE0_f0_D20[ip][k] + Jinv1_00*Jinv1_10*FE0_f0_D11[ip][k] + Jinv1_10*Jinv1_00*FE0_f0_D11[ip][k] + Jinv1_10*Jinv1_10*FE0_f1_D02[ip][k]) + (Jinv1_01*Jinv1_01*FE0_f0_D20[ip][k] + Jinv1_01*Jinv1_11*FE0_f0_D11[ip][k] + Jinv1_11*Jinv1_01*FE0_f0_D11[ip][k] + Jinv1_11*Jinv1_11*FE0_f1_D02[ip][k]))*0.5*((Jinv0_00*FE0_f1_D10[ip][j] + Jinv0_10*FE0_f1_D01[ip][j])*w[0][0] + (Jinv0_01*FE0_f1_D10[ip][j] + Jinv0_11*FE0_f1_D01[ip][j])*w[0][1])*-1))*W2[ip]*det;
              // Number of operations to compute entry = 95
              A[j*12 + k] += (((Jinv0_00*FE0_f1_D10[ip][j] + Jinv0_10*FE0_f1_D01[ip][j])*w[0][0] + (Jinv0_01*FE0_f1_D10[ip][j] + Jinv0_11*FE0_f1_D01[ip][j])*w[0][1])*((Jinv0_00*FE0_f1_D10[ip][k] + Jinv0_10*FE0_f1_D01[ip][k])*w[0][0] + (Jinv0_01*FE0_f1_D10[ip][k] + Jinv0_11*FE0_f1_D01[ip][k])*w[0][1])*w[2][0]/(w[1][0]) + (((Jinv0_00*Jinv0_00*FE0_f1_D20[ip][j] + Jinv0_00*Jinv0_10*FE0_f1_D11[ip][j] + Jinv0_10*Jinv0_00*FE0_f1_D11[ip][j] + Jinv0_10*Jinv0_10*FE0_f1_D02[ip][j]) + (Jinv0_01*Jinv0_01*FE0_f1_D20[ip][j] + Jinv0_01*Jinv0_11*FE0_f1_D11[ip][j] + Jinv0_11*Jinv0_01*FE0_f1_D11[ip][j] + Jinv0_11*Jinv0_11*FE0_f1_D02[ip][j]))*0.5*((Jinv0_00*FE0_f1_D10[ip][k] + Jinv0_10*FE0_f1_D01[ip][k])*w[0][0] + (Jinv0_01*FE0_f1_D10[ip][k] + Jinv0_11*FE0_f1_D01[ip][k])*w[0][1])*-1 + ((Jinv0_00*Jinv0_00*FE0_f1_D20[ip][k] + Jinv0_00*Jinv0_10*FE0_f1_D11[ip][k] + Jinv0_10*Jinv0_00*FE0_f1_D11[ip][k] + Jinv0_10*Jinv0_10*FE0_f1_D02[ip][k]) + (Jinv0_01*Jinv0_01*FE0_f1_D20[ip][k] + Jinv0_01*Jinv0_11*FE0_f1_D11[ip][k] + Jinv0_11*Jinv0_01*FE0_f1_D11[ip][k] + Jinv0_11*Jinv0_11*FE0_f1_D02[ip][k]))*0.5*((Jinv0_00*FE0_f1_D10[ip][j] + Jinv0_10*FE0_f1_D01[ip][j])*w[0][0] + (Jinv0_01*FE0_f1_D10[ip][j] + Jinv0_11*FE0_f1_D01[ip][j])*w[0][1])*-1))*W2[ip]*det;
            }// end loop over 'k'
          }// end loop over 'j'
        }// end loop over 'ip'
        }
        break;
      case 1:
        {
        // Total number of operations to compute element tensor (from this point): 27360
        
        // Loop quadrature points for integral
        // Number of operations to compute element tensor for following IP loop = 27360
        for (unsigned int ip = 0; ip < 2; ip++)
        {
          
          // Number of operations for primary indices = 13680
          for (unsigned int j = 0; j < 6; j++)
          {
            for (unsigned int k = 0; k < 6; k++)
            {
              // Number of operations to compute entry = 95
              A[(j + 6)*12 + k] += (((Jinv1_00*FE0_f1_D10[ip][j] + Jinv1_10*FE0_f1_D01[ip][j])*w[0][2] + (Jinv1_01*FE0_f1_D10[ip][j] + Jinv1_11*FE0_f1_D01[ip][j])*w[0][3])*((Jinv0_00*FE0_f1_D10[ip][k] + Jinv0_10*FE0_f1_D01[ip][k])*w[0][0] + (Jinv0_01*FE0_f1_D10[ip][k] + Jinv0_11*FE0_f1_D01[ip][k])*w[0][1])*w[2][0]/(w[1][0]) + (((Jinv1_00*Jinv1_00*FE0_f1_D20[ip][j] + Jinv1_00*Jinv1_10*FE0_f1_D11[ip][j] + Jinv1_10*Jinv1_00*FE0_f1_D11[ip][j] + Jinv1_10*Jinv1_10*FE0_f1_D02[ip][j]) + (Jinv1_01*Jinv1_01*FE0_f1_D20[ip][j] + Jinv1_01*Jinv1_11*FE0_f1_D11[ip][j] + Jinv1_11*Jinv1_01*FE0_f1_D11[ip][j] + Jinv1_11*Jinv1_11*FE0_f1_D02[ip][j]))*0.5*((Jinv0_00*FE0_f1_D10[ip][k] + Jinv0_10*FE0_f1_D01[ip][k])*w[0][0] + (Jinv0_01*FE0_f1_D10[ip][k] + Jinv0_11*FE0_f1_D01[ip][k])*w[0][1])*-1 + ((Jinv0_00*Jinv0_00*FE0_f1_D20[ip][k] + Jinv0_00*Jinv0_10*FE0_f1_D11[ip][k] + Jinv0_10*Jinv0_00*FE0_f1_D11[ip][k] + Jinv0_10*Jinv0_10*FE0_f1_D02[ip][k]) + (Jinv0_01*Jinv0_01*FE0_f1_D20[ip][k] + Jinv0_01*Jinv0_11*FE0_f1_D11[ip][k] + Jinv0_11*Jinv0_01*FE0_f1_D11[ip][k] + Jinv0_11*Jinv0_11*FE0_f1_D02[ip][k]))*0.5*((Jinv1_00*FE0_f1_D10[ip][j] + Jinv1_10*FE0_f1_D01[ip][j])*w[0][2] + (Jinv1_01*FE0_f1_D10[ip][j] + Jinv1_11*FE0_f1_D01[ip][j])*w[0][3])*-1))*W2[ip]*det;
              // Number of operations to compute entry = 95
              A[(j + 6)*12 + (k + 6)] += (((Jinv1_00*FE0_f1_D10[ip][j] + Jinv1_10*FE0_f1_D01[ip][j])*w[0][2] + (Jinv1_01*FE0_f1_D10[ip][j] + Jinv1_11*FE0_f1_D01[ip][j])*w[0][3])*((Jinv1_00*FE0_f1_D10[ip][k] + Jinv1_10*FE0_f1_D01[ip][k])*w[0][2] + (Jinv1_01*FE0_f1_D10[ip][k] + Jinv1_11*FE0_f1_D01[ip][k])*w[0][3])*w[2][0]/(w[1][0]) + (((Jinv1_00*Jinv1_00*FE0_f1_D20[ip][j] + Jinv1_00*Jinv1_10*FE0_f1_D11[ip][j] + Jinv1_10*Jinv1_00*FE0_f1_D11[ip][j] + Jinv1_10*Jinv1_10*FE0_f1_D02[ip][j]) + (Jinv1_01*Jinv1_01*FE0_f1_D20[ip][j] + Jinv1_01*Jinv1_11*FE0_f1_D11[ip][j] + Jinv1_11*Jinv1_01*FE0_f1_D11[ip][j] + Jinv1_11*Jinv1_11*FE0_f1_D02[ip][j]))*0.5*((Jinv1_00*FE0_f1_D10[ip][k] + Jinv1_10*FE0_f1_D01[ip][k])*w[0][2] + (Jinv1_01*FE0_f1_D10[ip][k] + Jinv1_11*FE0_f1_D01[ip][k])*w[0][3])*-1 + ((Jinv1_00*Jinv1_00*FE0_f1_D20[ip][k] + Jinv1_00*Jinv1_10*FE0_f1_D11[ip][k] + Jinv1_10*Jinv1_00*FE0_f1_D11[ip][k] + Jinv1_10*Jinv1_10*FE0_f1_D02[ip][k]) + (Jinv1_01*Jinv1_01*FE0_f1_D20[ip][k] + Jinv1_01*Jinv1_11*FE0_f1_D11[ip][k] + Jinv1_11*Jinv1_01*FE0_f1_D11[ip][k] + Jinv1_11*Jinv1_11*FE0_f1_D02[ip][k]))*0.5*((Jinv1_00*FE0_f1_D10[ip][j] + Jinv1_10*FE0_f1_D01[ip][j])*w[0][2] + (Jinv1_01*FE0_f1_D10[ip][j] + Jinv1_11*FE0_f1_D01[ip][j])*w[0][3])*-1))*W2[ip]*det;
              // Number of operations to compute entry = 95
              A[j*12 + (k + 6)] += (((Jinv0_00*FE0_f1_D10[ip][j] + Jinv0_10*FE0_f1_D01[ip][j])*w[0][0] + (Jinv0_01*FE0_f1_D10[ip][j] + Jinv0_11*FE0_f1_D01[ip][j])*w[0][1])*((Jinv1_00*FE0_f1_D10[ip][k] + Jinv1_10*FE0_f1_D01[ip][k])*w[0][2] + (Jinv1_01*FE0_f1_D10[ip][k] + Jinv1_11*FE0_f1_D01[ip][k])*w[0][3])*w[2][0]/(w[1][0]) + (((Jinv0_00*Jinv0_00*FE0_f1_D20[ip][j] + Jinv0_00*Jinv0_10*FE0_f1_D11[ip][j] + Jinv0_10*Jinv0_00*FE0_f1_D11[ip][j] + Jinv0_10*Jinv0_10*FE0_f1_D02[ip][j]) + (Jinv0_01*Jinv0_01*FE0_f1_D20[ip][j] + Jinv0_01*Jinv0_11*FE0_f1_D11[ip][j] + Jinv0_11*Jinv0_01*FE0_f1_D11[ip][j] + Jinv0_11*Jinv0_11*FE0_f1_D02[ip][j]))*0.5*((Jinv1_00*FE0_f1_D10[ip][k] + Jinv1_10*FE0_f1_D01[ip][k])*w[0][2] + (Jinv1_01*FE0_f1_D10[ip][k] + Jinv1_11*FE0_f1_D01[ip][k])*w[0][3])*-1 + ((Jinv1_00*Jinv1_00*FE0_f1_D20[ip][k] + Jinv1_00*Jinv1_10*FE0_f1_D11[ip][k] + Jinv1_10*Jinv1_00*FE0_f1_D11[ip][k] + Jinv1_10*Jinv1_10*FE0_f1_D02[ip][k]) + (Jinv1_01*Jinv1_01*FE0_f1_D20[ip][k] + Jinv1_01*Jinv1_11*FE0_f1_D11[ip][k] + Jinv1_11*Jinv1_01*FE0_f1_D11[ip][k] + Jinv1_11*Jinv1_11*FE0_f1_D02[ip][k]))*0.5*((Jinv0_00*FE0_f1_D10[ip][j] + Jinv0_10*FE0_f1_D01[ip][j])*w[0][0] + (Jinv0_01*FE0_f1_D10[ip][j] + Jinv0_11*FE0_f1_D01[ip][j])*w[0][1])*-1))*W2[ip]*det;
              // Number of operations to compute entry = 95
              A[j*12 + k] += (((Jinv0_00*FE0_f1_D10[ip][j] + Jinv0_10*FE0_f1_D01[ip][j])*w[0][0] + (Jinv0_01*FE0_f1_D10[ip][j] + Jinv0_11*FE0_f1_D01[ip][j])*w[0][1])*((Jinv0_00*FE0_f1_D10[ip][k] + Jinv0_10*FE0_f1_D01[ip][k])*w[0][0] + (Jinv0_01*FE0_f1_D10[ip][k] + Jinv0_11*FE0_f1_D01[ip][k])*w[0][1])*w[2][0]/(w[1][0]) + (((Jinv0_00*Jinv0_00*FE0_f1_D20[ip][j] + Jinv0_00*Jinv0_10*FE0_f1_D11[ip][j] + Jinv0_10*Jinv0_00*FE0_f1_D11[ip][j] + Jinv0_10*Jinv0_10*FE0_f1_D02[ip][j]) + (Jinv0_01*Jinv0_01*FE0_f1_D20[ip][j] + Jinv0_01*Jinv0_11*FE0_f1_D11[ip][j] + Jinv0_11*Jinv0_01*FE0_f1_D11[ip][j] + Jinv0_11*Jinv0_11*FE0_f1_D02[ip][j]))*0.5*((Jinv0_00*FE0_f1_D10[ip][k] + Jinv0_10*FE0_f1_D01[ip][k])*w[0][0] + (Jinv0_01*FE0_f1_D10[ip][k] + Jinv0_11*FE0_f1_D01[ip][k])*w[0][1])*-1 + ((Jinv0_00*Jinv0_00*FE0_f1_D20[ip][k] + Jinv0_00*Jinv0_10*FE0_f1_D11[ip][k] + Jinv0_10*Jinv0_00*FE0_f1_D11[ip][k] + Jinv0_10*Jinv0_10*FE0_f1_D02[ip][k]) + (Jinv0_01*Jinv0_01*FE0_f1_D20[ip][k] + Jinv0_01*Jinv0_11*FE0_f1_D11[ip][k] + Jinv0_11*Jinv0_01*FE0_f1_D11[ip][k] + Jinv0_11*Jinv0_11*FE0_f1_D02[ip][k]))*0.5*((Jinv0_00*FE0_f1_D10[ip][j] + Jinv0_10*FE0_f1_D01[ip][j])*w[0][0] + (Jinv0_01*FE0_f1_D10[ip][j] + Jinv0_11*FE0_f1_D01[ip][j])*w[0][1])*-1))*W2[ip]*det;
            }// end loop over 'k'
          }// end loop over 'j'
        }// end loop over 'ip'
        }
        break;
      case 2:
        {
        // Total number of operations to compute element tensor (from this point): 27360
        
        // Loop quadrature points for integral
        // Number of operations to compute element tensor for following IP loop = 27360
        for (unsigned int ip = 0; ip < 2; ip++)
        {
          
          // Number of operations for primary indices = 13680
          for (unsigned int j = 0; j < 6; j++)
          {
            for (unsigned int k = 0; k < 6; k++)
            {
              // Number of operations to compute entry = 95
              A[(j + 6)*12 + k] += (((Jinv1_00*FE0_f2_D10[ip][j] + Jinv1_10*FE0_f2_D01[ip][j])*w[0][2] + (Jinv1_01*FE0_f2_D10[ip][j] + Jinv1_11*FE0_f2_D01[ip][j])*w[0][3])*((Jinv0_00*FE0_f1_D10[ip][k] + Jinv0_10*FE0_f1_D01[ip][k])*w[0][0] + (Jinv0_01*FE0_f1_D10[ip][k] + Jinv0_11*FE0_f1_D01[ip][k])*w[0][1])*w[2][0]/(w[1][0]) + (((Jinv1_00*Jinv1_00*FE0_f2_D20[ip][j] + Jinv1_00*Jinv1_10*FE0_f2_D11[ip][j] + Jinv1_10*Jinv1_00*FE0_f2_D11[ip][j] + Jinv1_10*Jinv1_10*FE0_f2_D02[ip][j]) + (Jinv1_01*Jinv1_01*FE0_f2_D20[ip][j] + Jinv1_01*Jinv1_11*FE0_f2_D11[ip][j] + Jinv1_11*Jinv1_01*FE0_f2_D11[ip][j] + Jinv1_11*Jinv1_11*FE0_f2_D02[ip][j]))*0.5*((Jinv0_00*FE0_f1_D10[ip][k] + Jinv0_10*FE0_f1_D01[ip][k])*w[0][0] + (Jinv0_01*FE0_f1_D10[ip][k] + Jinv0_11*FE0_f1_D01[ip][k])*w[0][1])*-1 + ((Jinv0_00*Jinv0_00*FE0_f1_D20[ip][k] + Jinv0_00*Jinv0_10*FE0_f1_D11[ip][k] + Jinv0_10*Jinv0_00*FE0_f1_D11[ip][k] + Jinv0_10*Jinv0_10*FE0_f1_D02[ip][k]) + (Jinv0_01*Jinv0_01*FE0_f1_D20[ip][k] + Jinv0_01*Jinv0_11*FE0_f1_D11[ip][k] + Jinv0_11*Jinv0_01*FE0_f1_D11[ip][k] + Jinv0_11*Jinv0_11*FE0_f1_D02[ip][k]))*0.5*((Jinv1_00*FE0_f2_D10[ip][j] + Jinv1_10*FE0_f2_D01[ip][j])*w[0][2] + (Jinv1_01*FE0_f2_D10[ip][j] + Jinv1_11*FE0_f2_D01[ip][j])*w[0][3])*-1))*W2[ip]*det;
              // Number of operations to compute entry = 95
              A[(j + 6)*12 + (k + 6)] += (((Jinv1_00*FE0_f2_D10[ip][j] + Jinv1_10*FE0_f2_D01[ip][j])*w[0][2] + (Jinv1_01*FE0_f2_D10[ip][j] + Jinv1_11*FE0_f2_D01[ip][j])*w[0][3])*((Jinv1_00*FE0_f2_D10[ip][k] + Jinv1_10*FE0_f2_D01[ip][k])*w[0][2] + (Jinv1_01*FE0_f2_D10[ip][k] + Jinv1_11*FE0_f2_D01[ip][k])*w[0][3])*w[2][0]/(w[1][0]) + (((Jinv1_00*Jinv1_00*FE0_f2_D20[ip][j] + Jinv1_00*Jinv1_10*FE0_f2_D11[ip][j] + Jinv1_10*Jinv1_00*FE0_f2_D11[ip][j] + Jinv1_10*Jinv1_10*FE0_f2_D02[ip][j]) + (Jinv1_01*Jinv1_01*FE0_f2_D20[ip][j] + Jinv1_01*Jinv1_11*FE0_f2_D11[ip][j] + Jinv1_11*Jinv1_01*FE0_f2_D11[ip][j] + Jinv1_11*Jinv1_11*FE0_f2_D02[ip][j]))*0.5*((Jinv1_00*FE0_f2_D10[ip][k] + Jinv1_10*FE0_f2_D01[ip][k])*w[0][2] + (Jinv1_01*FE0_f2_D10[ip][k] + Jinv1_11*FE0_f2_D01[ip][k])*w[0][3])*-1 + ((Jinv1_00*Jinv1_00*FE0_f2_D20[ip][k] + Jinv1_00*Jinv1_10*FE0_f2_D11[ip][k] + Jinv1_10*Jinv1_00*FE0_f2_D11[ip][k] + Jinv1_10*Jinv1_10*FE0_f2_D02[ip][k]) + (Jinv1_01*Jinv1_01*FE0_f2_D20[ip][k] + Jinv1_01*Jinv1_11*FE0_f2_D11[ip][k] + Jinv1_11*Jinv1_01*FE0_f2_D11[ip][k] + Jinv1_11*Jinv1_11*FE0_f2_D02[ip][k]))*0.5*((Jinv1_00*FE0_f2_D10[ip][j] + Jinv1_10*FE0_f2_D01[ip][j])*w[0][2] + (Jinv1_01*FE0_f2_D10[ip][j] + Jinv1_11*FE0_f2_D01[ip][j])*w[0][3])*-1))*W2[ip]*det;
              // Number of operations to compute entry = 95
              A[j*12 + (k + 6)] += (((Jinv0_00*FE0_f1_D10[ip][j] + Jinv0_10*FE0_f1_D01[ip][j])*w[0][0] + (Jinv0_01*FE0_f1_D10[ip][j] + Jinv0_11*FE0_f1_D01[ip][j])*w[0][1])*((Jinv1_00*FE0_f2_D10[ip][k] + Jinv1_10*FE0_f2_D01[ip][k])*w[0][2] + (Jinv1_01*FE0_f2_D10[ip][k] + Jinv1_11*FE0_f2_D01[ip][k])*w[0][3])*w[2][0]/(w[1][0]) + (((Jinv0_00*Jinv0_00*FE0_f1_D20[ip][j] + Jinv0_00*Jinv0_10*FE0_f1_D11[ip][j] + Jinv0_10*Jinv0_00*FE0_f1_D11[ip][j] + Jinv0_10*Jinv0_10*FE0_f1_D02[ip][j]) + (Jinv0_01*Jinv0_01*FE0_f1_D20[ip][j] + Jinv0_01*Jinv0_11*FE0_f1_D11[ip][j] + Jinv0_11*Jinv0_01*FE0_f1_D11[ip][j] + Jinv0_11*Jinv0_11*FE0_f1_D02[ip][j]))*0.5*((Jinv1_00*FE0_f2_D10[ip][k] + Jinv1_10*FE0_f2_D01[ip][k])*w[0][2] + (Jinv1_01*FE0_f2_D10[ip][k] + Jinv1_11*FE0_f2_D01[ip][k])*w[0][3])*-1 + ((Jinv1_00*Jinv1_00*FE0_f2_D20[ip][k] + Jinv1_00*Jinv1_10*FE0_f2_D11[ip][k] + Jinv1_10*Jinv1_00*FE0_f2_D11[ip][k] + Jinv1_10*Jinv1_10*FE0_f2_D02[ip][k]) + (Jinv1_01*Jinv1_01*FE0_f2_D20[ip][k] + Jinv1_01*Jinv1_11*FE0_f2_D11[ip][k] + Jinv1_11*Jinv1_01*FE0_f2_D11[ip][k] + Jinv1_11*Jinv1_11*FE0_f2_D02[ip][k]))*0.5*((Jinv0_00*FE0_f1_D10[ip][j] + Jinv0_10*FE0_f1_D01[ip][j])*w[0][0] + (Jinv0_01*FE0_f1_D10[ip][j] + Jinv0_11*FE0_f1_D01[ip][j])*w[0][1])*-1))*W2[ip]*det;
              // Number of operations to compute entry = 95
              A[j*12 + k] += (((Jinv0_00*FE0_f1_D10[ip][j] + Jinv0_10*FE0_f1_D01[ip][j])*w[0][0] + (Jinv0_01*FE0_f1_D10[ip][j] + Jinv0_11*FE0_f1_D01[ip][j])*w[0][1])*((Jinv0_00*FE0_f1_D10[ip][k] + Jinv0_10*FE0_f1_D01[ip][k])*w[0][0] + (Jinv0_01*FE0_f1_D10[ip][k] + Jinv0_11*FE0_f1_D01[ip][k])*w[0][1])*w[2][0]/(w[1][0]) + (((Jinv0_00*Jinv0_00*FE0_f1_D20[ip][j] + Jinv0_00*Jinv0_10*FE0_f1_D11[ip][j] + Jinv0_10*Jinv0_00*FE0_f1_D11[ip][j] + Jinv0_10*Jinv0_10*FE0_f1_D02[ip][j]) + (Jinv0_01*Jinv0_01*FE0_f1_D20[ip][j] + Jinv0_01*Jinv0_11*FE0_f1_D11[ip][j] + Jinv0_11*Jinv0_01*FE0_f1_D11[ip][j] + Jinv0_11*Jinv0_11*FE0_f1_D02[ip][j]))*0.5*((Jinv0_00*FE0_f1_D10[ip][k] + Jinv0_10*FE0_f1_D01[ip][k])*w[0][0] + (Jinv0_01*FE0_f1_D10[ip][k] + Jinv0_11*FE0_f1_D01[ip][k])*w[0][1])*-1 + ((Jinv0_00*Jinv0_00*FE0_f1_D20[ip][k] + Jinv0_00*Jinv0_10*FE0_f1_D11[ip][k] + Jinv0_10*Jinv0_00*FE0_f1_D11[ip][k] + Jinv0_10*Jinv0_10*FE0_f1_D02[ip][k]) + (Jinv0_01*Jinv0_01*FE0_f1_D20[ip][k] + Jinv0_01*Jinv0_11*FE0_f1_D11[ip][k] + Jinv0_11*Jinv0_01*FE0_f1_D11[ip][k] + Jinv0_11*Jinv0_11*FE0_f1_D02[ip][k]))*0.5*((Jinv0_00*FE0_f1_D10[ip][j] + Jinv0_10*FE0_f1_D01[ip][j])*w[0][0] + (Jinv0_01*FE0_f1_D10[ip][j] + Jinv0_11*FE0_f1_D01[ip][j])*w[0][1])*-1))*W2[ip]*det;
            }// end loop over 'k'
          }// end loop over 'j'
        }// end loop over 'ip'
        }
        break;
      }
      break;
    case 2:
      switch ( facet1 )
      {
      case 0:
        {
        // Total number of operations to compute element tensor (from this point): 27360
        
        // Loop quadrature points for integral
        // Number of operations to compute element tensor for following IP loop = 27360
        for (unsigned int ip = 0; ip < 2; ip++)
        {
          
          // Number of operations for primary indices = 13680
          for (unsigned int j = 0; j < 6; j++)
          {
            for (unsigned int k = 0; k < 6; k++)
            {
              // Number of operations to compute entry = 95
              A[(j + 6)*12 + k] += (((Jinv1_00*FE0_f0_D10[ip][j] + Jinv1_10*FE0_f0_D01[ip][j])*w[0][2] + (Jinv1_01*FE0_f0_D10[ip][j] + Jinv1_11*FE0_f0_D01[ip][j])*w[0][3])*((Jinv0_00*FE0_f2_D10[ip][k] + Jinv0_10*FE0_f2_D01[ip][k])*w[0][0] + (Jinv0_01*FE0_f2_D10[ip][k] + Jinv0_11*FE0_f2_D01[ip][k])*w[0][1])*w[2][0]/(w[1][0]) + (((Jinv1_00*Jinv1_00*FE0_f0_D20[ip][j] + Jinv1_00*Jinv1_10*FE0_f0_D11[ip][j] + Jinv1_10*Jinv1_00*FE0_f0_D11[ip][j] + Jinv1_10*Jinv1_10*FE0_f1_D02[ip][j]) + (Jinv1_01*Jinv1_01*FE0_f0_D20[ip][j] + Jinv1_01*Jinv1_11*FE0_f0_D11[ip][j] + Jinv1_11*Jinv1_01*FE0_f0_D11[ip][j] + Jinv1_11*Jinv1_11*FE0_f1_D02[ip][j]))*0.5*((Jinv0_00*FE0_f2_D10[ip][k] + Jinv0_10*FE0_f2_D01[ip][k])*w[0][0] + (Jinv0_01*FE0_f2_D10[ip][k] + Jinv0_11*FE0_f2_D01[ip][k])*w[0][1])*-1 + ((Jinv0_00*Jinv0_00*FE0_f2_D20[ip][k] + Jinv0_00*Jinv0_10*FE0_f2_D11[ip][k] + Jinv0_10*Jinv0_00*FE0_f2_D11[ip][k] + Jinv0_10*Jinv0_10*FE0_f2_D02[ip][k]) + (Jinv0_01*Jinv0_01*FE0_f2_D20[ip][k] + Jinv0_01*Jinv0_11*FE0_f2_D11[ip][k] + Jinv0_11*Jinv0_01*FE0_f2_D11[ip][k] + Jinv0_11*Jinv0_11*FE0_f2_D02[ip][k]))*0.5*((Jinv1_00*FE0_f0_D10[ip][j] + Jinv1_10*FE0_f0_D01[ip][j])*w[0][2] + (Jinv1_01*FE0_f0_D10[ip][j] + Jinv1_11*FE0_f0_D01[ip][j])*w[0][3])*-1))*W2[ip]*det;
              // Number of operations to compute entry = 95
              A[(j + 6)*12 + (k + 6)] += (((Jinv1_00*FE0_f0_D10[ip][j] + Jinv1_10*FE0_f0_D01[ip][j])*w[0][2] + (Jinv1_01*FE0_f0_D10[ip][j] + Jinv1_11*FE0_f0_D01[ip][j])*w[0][3])*((Jinv1_00*FE0_f0_D10[ip][k] + Jinv1_10*FE0_f0_D01[ip][k])*w[0][2] + (Jinv1_01*FE0_f0_D10[ip][k] + Jinv1_11*FE0_f0_D01[ip][k])*w[0][3])*w[2][0]/(w[1][0]) + (((Jinv1_00*Jinv1_00*FE0_f0_D20[ip][j] + Jinv1_00*Jinv1_10*FE0_f0_D11[ip][j] + Jinv1_10*Jinv1_00*FE0_f0_D11[ip][j] + Jinv1_10*Jinv1_10*FE0_f1_D02[ip][j]) + (Jinv1_01*Jinv1_01*FE0_f0_D20[ip][j] + Jinv1_01*Jinv1_11*FE0_f0_D11[ip][j] + Jinv1_11*Jinv1_01*FE0_f0_D11[ip][j] + Jinv1_11*Jinv1_11*FE0_f1_D02[ip][j]))*0.5*((Jinv1_00*FE0_f0_D10[ip][k] + Jinv1_10*FE0_f0_D01[ip][k])*w[0][2] + (Jinv1_01*FE0_f0_D10[ip][k] + Jinv1_11*FE0_f0_D01[ip][k])*w[0][3])*-1 + ((Jinv1_00*Jinv1_00*FE0_f0_D20[ip][k] + Jinv1_00*Jinv1_10*FE0_f0_D11[ip][k] + Jinv1_10*Jinv1_00*FE0_f0_D11[ip][k] + Jinv1_10*Jinv1_10*FE0_f1_D02[ip][k]) + (Jinv1_01*Jinv1_01*FE0_f0_D20[ip][k] + Jinv1_01*Jinv1_11*FE0_f0_D11[ip][k] + Jinv1_11*Jinv1_01*FE0_f0_D11[ip][k] + Jinv1_11*Jinv1_11*FE0_f1_D02[ip][k]))*0.5*((Jinv1_00*FE0_f0_D10[ip][j] + Jinv1_10*FE0_f0_D01[ip][j])*w[0][2] + (Jinv1_01*FE0_f0_D10[ip][j] + Jinv1_11*FE0_f0_D01[ip][j])*w[0][3])*-1))*W2[ip]*det;
              // Number of operations to compute entry = 95
              A[j*12 + (k + 6)] += (((Jinv0_00*FE0_f2_D10[ip][j] + Jinv0_10*FE0_f2_D01[ip][j])*w[0][0] + (Jinv0_01*FE0_f2_D10[ip][j] + Jinv0_11*FE0_f2_D01[ip][j])*w[0][1])*((Jinv1_00*FE0_f0_D10[ip][k] + Jinv1_10*FE0_f0_D01[ip][k])*w[0][2] + (Jinv1_01*FE0_f0_D10[ip][k] + Jinv1_11*FE0_f0_D01[ip][k])*w[0][3])*w[2][0]/(w[1][0]) + (((Jinv0_00*Jinv0_00*FE0_f2_D20[ip][j] + Jinv0_00*Jinv0_10*FE0_f2_D11[ip][j] + Jinv0_10*Jinv0_00*FE0_f2_D11[ip][j] + Jinv0_10*Jinv0_10*FE0_f2_D02[ip][j]) + (Jinv0_01*Jinv0_01*FE0_f2_D20[ip][j] + Jinv0_01*Jinv0_11*FE0_f2_D11[ip][j] + Jinv0_11*Jinv0_01*FE0_f2_D11[ip][j] + Jinv0_11*Jinv0_11*FE0_f2_D02[ip][j]))*0.5*((Jinv1_00*FE0_f0_D10[ip][k] + Jinv1_10*FE0_f0_D01[ip][k])*w[0][2] + (Jinv1_01*FE0_f0_D10[ip][k] + Jinv1_11*FE0_f0_D01[ip][k])*w[0][3])*-1 + ((Jinv1_00*Jinv1_00*FE0_f0_D20[ip][k] + Jinv1_00*Jinv1_10*FE0_f0_D11[ip][k] + Jinv1_10*Jinv1_00*FE0_f0_D11[ip][k] + Jinv1_10*Jinv1_10*FE0_f1_D02[ip][k]) + (Jinv1_01*Jinv1_01*FE0_f0_D20[ip][k] + Jinv1_01*Jinv1_11*FE0_f0_D11[ip][k] + Jinv1_11*Jinv1_01*FE0_f0_D11[ip][k] + Jinv1_11*Jinv1_11*FE0_f1_D02[ip][k]))*0.5*((Jinv0_00*FE0_f2_D10[ip][j] + Jinv0_10*FE0_f2_D01[ip][j])*w[0][0] + (Jinv0_01*FE0_f2_D10[ip][j] + Jinv0_11*FE0_f2_D01[ip][j])*w[0][1])*-1))*W2[ip]*det;
              // Number of operations to compute entry = 95
              A[j*12 + k] += (((Jinv0_00*FE0_f2_D10[ip][j] + Jinv0_10*FE0_f2_D01[ip][j])*w[0][0] + (Jinv0_01*FE0_f2_D10[ip][j] + Jinv0_11*FE0_f2_D01[ip][j])*w[0][1])*((Jinv0_00*FE0_f2_D10[ip][k] + Jinv0_10*FE0_f2_D01[ip][k])*w[0][0] + (Jinv0_01*FE0_f2_D10[ip][k] + Jinv0_11*FE0_f2_D01[ip][k])*w[0][1])*w[2][0]/(w[1][0]) + (((Jinv0_00*Jinv0_00*FE0_f2_D20[ip][j] + Jinv0_00*Jinv0_10*FE0_f2_D11[ip][j] + Jinv0_10*Jinv0_00*FE0_f2_D11[ip][j] + Jinv0_10*Jinv0_10*FE0_f2_D02[ip][j]) + (Jinv0_01*Jinv0_01*FE0_f2_D20[ip][j] + Jinv0_01*Jinv0_11*FE0_f2_D11[ip][j] + Jinv0_11*Jinv0_01*FE0_f2_D11[ip][j] + Jinv0_11*Jinv0_11*FE0_f2_D02[ip][j]))*0.5*((Jinv0_00*FE0_f2_D10[ip][k] + Jinv0_10*FE0_f2_D01[ip][k])*w[0][0] + (Jinv0_01*FE0_f2_D10[ip][k] + Jinv0_11*FE0_f2_D01[ip][k])*w[0][1])*-1 + ((Jinv0_00*Jinv0_00*FE0_f2_D20[ip][k] + Jinv0_00*Jinv0_10*FE0_f2_D11[ip][k] + Jinv0_10*Jinv0_00*FE0_f2_D11[ip][k] + Jinv0_10*Jinv0_10*FE0_f2_D02[ip][k]) + (Jinv0_01*Jinv0_01*FE0_f2_D20[ip][k] + Jinv0_01*Jinv0_11*FE0_f2_D11[ip][k] + Jinv0_11*Jinv0_01*FE0_f2_D11[ip][k] + Jinv0_11*Jinv0_11*FE0_f2_D02[ip][k]))*0.5*((Jinv0_00*FE0_f2_D10[ip][j] + Jinv0_10*FE0_f2_D01[ip][j])*w[0][0] + (Jinv0_01*FE0_f2_D10[ip][j] + Jinv0_11*FE0_f2_D01[ip][j])*w[0][1])*-1))*W2[ip]*det;
            }// end loop over 'k'
          }// end loop over 'j'
        }// end loop over 'ip'
        }
        break;
      case 1:
        {
        // Total number of operations to compute element tensor (from this point): 27360
        
        // Loop quadrature points for integral
        // Number of operations to compute element tensor for following IP loop = 27360
        for (unsigned int ip = 0; ip < 2; ip++)
        {
          
          // Number of operations for primary indices = 13680
          for (unsigned int j = 0; j < 6; j++)
          {
            for (unsigned int k = 0; k < 6; k++)
            {
              // Number of operations to compute entry = 95
              A[(j + 6)*12 + k] += (((Jinv1_00*FE0_f1_D10[ip][j] + Jinv1_10*FE0_f1_D01[ip][j])*w[0][2] + (Jinv1_01*FE0_f1_D10[ip][j] + Jinv1_11*FE0_f1_D01[ip][j])*w[0][3])*((Jinv0_00*FE0_f2_D10[ip][k] + Jinv0_10*FE0_f2_D01[ip][k])*w[0][0] + (Jinv0_01*FE0_f2_D10[ip][k] + Jinv0_11*FE0_f2_D01[ip][k])*w[0][1])*w[2][0]/(w[1][0]) + (((Jinv1_00*Jinv1_00*FE0_f1_D20[ip][j] + Jinv1_00*Jinv1_10*FE0_f1_D11[ip][j] + Jinv1_10*Jinv1_00*FE0_f1_D11[ip][j] + Jinv1_10*Jinv1_10*FE0_f1_D02[ip][j]) + (Jinv1_01*Jinv1_01*FE0_f1_D20[ip][j] + Jinv1_01*Jinv1_11*FE0_f1_D11[ip][j] + Jinv1_11*Jinv1_01*FE0_f1_D11[ip][j] + Jinv1_11*Jinv1_11*FE0_f1_D02[ip][j]))*0.5*((Jinv0_00*FE0_f2_D10[ip][k] + Jinv0_10*FE0_f2_D01[ip][k])*w[0][0] + (Jinv0_01*FE0_f2_D10[ip][k] + Jinv0_11*FE0_f2_D01[ip][k])*w[0][1])*-1 + ((Jinv0_00*Jinv0_00*FE0_f2_D20[ip][k] + Jinv0_00*Jinv0_10*FE0_f2_D11[ip][k] + Jinv0_10*Jinv0_00*FE0_f2_D11[ip][k] + Jinv0_10*Jinv0_10*FE0_f2_D02[ip][k]) + (Jinv0_01*Jinv0_01*FE0_f2_D20[ip][k] + Jinv0_01*Jinv0_11*FE0_f2_D11[ip][k] + Jinv0_11*Jinv0_01*FE0_f2_D11[ip][k] + Jinv0_11*Jinv0_11*FE0_f2_D02[ip][k]))*0.5*((Jinv1_00*FE0_f1_D10[ip][j] + Jinv1_10*FE0_f1_D01[ip][j])*w[0][2] + (Jinv1_01*FE0_f1_D10[ip][j] + Jinv1_11*FE0_f1_D01[ip][j])*w[0][3])*-1))*W2[ip]*det;
              // Number of operations to compute entry = 95
              A[(j + 6)*12 + (k + 6)] += (((Jinv1_00*FE0_f1_D10[ip][j] + Jinv1_10*FE0_f1_D01[ip][j])*w[0][2] + (Jinv1_01*FE0_f1_D10[ip][j] + Jinv1_11*FE0_f1_D01[ip][j])*w[0][3])*((Jinv1_00*FE0_f1_D10[ip][k] + Jinv1_10*FE0_f1_D01[ip][k])*w[0][2] + (Jinv1_01*FE0_f1_D10[ip][k] + Jinv1_11*FE0_f1_D01[ip][k])*w[0][3])*w[2][0]/(w[1][0]) + (((Jinv1_00*Jinv1_00*FE0_f1_D20[ip][j] + Jinv1_00*Jinv1_10*FE0_f1_D11[ip][j] + Jinv1_10*Jinv1_00*FE0_f1_D11[ip][j] + Jinv1_10*Jinv1_10*FE0_f1_D02[ip][j]) + (Jinv1_01*Jinv1_01*FE0_f1_D20[ip][j] + Jinv1_01*Jinv1_11*FE0_f1_D11[ip][j] + Jinv1_11*Jinv1_01*FE0_f1_D11[ip][j] + Jinv1_11*Jinv1_11*FE0_f1_D02[ip][j]))*0.5*((Jinv1_00*FE0_f1_D10[ip][k] + Jinv1_10*FE0_f1_D01[ip][k])*w[0][2] + (Jinv1_01*FE0_f1_D10[ip][k] + Jinv1_11*FE0_f1_D01[ip][k])*w[0][3])*-1 + ((Jinv1_00*Jinv1_00*FE0_f1_D20[ip][k] + Jinv1_00*Jinv1_10*FE0_f1_D11[ip][k] + Jinv1_10*Jinv1_00*FE0_f1_D11[ip][k] + Jinv1_10*Jinv1_10*FE0_f1_D02[ip][k]) + (Jinv1_01*Jinv1_01*FE0_f1_D20[ip][k] + Jinv1_01*Jinv1_11*FE0_f1_D11[ip][k] + Jinv1_11*Jinv1_01*FE0_f1_D11[ip][k] + Jinv1_11*Jinv1_11*FE0_f1_D02[ip][k]))*0.5*((Jinv1_00*FE0_f1_D10[ip][j] + Jinv1_10*FE0_f1_D01[ip][j])*w[0][2] + (Jinv1_01*FE0_f1_D10[ip][j] + Jinv1_11*FE0_f1_D01[ip][j])*w[0][3])*-1))*W2[ip]*det;
              // Number of operations to compute entry = 95
              A[j*12 + (k + 6)] += (((Jinv0_00*FE0_f2_D10[ip][j] + Jinv0_10*FE0_f2_D01[ip][j])*w[0][0] + (Jinv0_01*FE0_f2_D10[ip][j] + Jinv0_11*FE0_f2_D01[ip][j])*w[0][1])*((Jinv1_00*FE0_f1_D10[ip][k] + Jinv1_10*FE0_f1_D01[ip][k])*w[0][2] + (Jinv1_01*FE0_f1_D10[ip][k] + Jinv1_11*FE0_f1_D01[ip][k])*w[0][3])*w[2][0]/(w[1][0]) + (((Jinv0_00*Jinv0_00*FE0_f2_D20[ip][j] + Jinv0_00*Jinv0_10*FE0_f2_D11[ip][j] + Jinv0_10*Jinv0_00*FE0_f2_D11[ip][j] + Jinv0_10*Jinv0_10*FE0_f2_D02[ip][j]) + (Jinv0_01*Jinv0_01*FE0_f2_D20[ip][j] + Jinv0_01*Jinv0_11*FE0_f2_D11[ip][j] + Jinv0_11*Jinv0_01*FE0_f2_D11[ip][j] + Jinv0_11*Jinv0_11*FE0_f2_D02[ip][j]))*0.5*((Jinv1_00*FE0_f1_D10[ip][k] + Jinv1_10*FE0_f1_D01[ip][k])*w[0][2] + (Jinv1_01*FE0_f1_D10[ip][k] + Jinv1_11*FE0_f1_D01[ip][k])*w[0][3])*-1 + ((Jinv1_00*Jinv1_00*FE0_f1_D20[ip][k] + Jinv1_00*Jinv1_10*FE0_f1_D11[ip][k] + Jinv1_10*Jinv1_00*FE0_f1_D11[ip][k] + Jinv1_10*Jinv1_10*FE0_f1_D02[ip][k]) + (Jinv1_01*Jinv1_01*FE0_f1_D20[ip][k] + Jinv1_01*Jinv1_11*FE0_f1_D11[ip][k] + Jinv1_11*Jinv1_01*FE0_f1_D11[ip][k] + Jinv1_11*Jinv1_11*FE0_f1_D02[ip][k]))*0.5*((Jinv0_00*FE0_f2_D10[ip][j] + Jinv0_10*FE0_f2_D01[ip][j])*w[0][0] + (Jinv0_01*FE0_f2_D10[ip][j] + Jinv0_11*FE0_f2_D01[ip][j])*w[0][1])*-1))*W2[ip]*det;
              // Number of operations to compute entry = 95
              A[j*12 + k] += (((Jinv0_00*FE0_f2_D10[ip][j] + Jinv0_10*FE0_f2_D01[ip][j])*w[0][0] + (Jinv0_01*FE0_f2_D10[ip][j] + Jinv0_11*FE0_f2_D01[ip][j])*w[0][1])*((Jinv0_00*FE0_f2_D10[ip][k] + Jinv0_10*FE0_f2_D01[ip][k])*w[0][0] + (Jinv0_01*FE0_f2_D10[ip][k] + Jinv0_11*FE0_f2_D01[ip][k])*w[0][1])*w[2][0]/(w[1][0]) + (((Jinv0_00*Jinv0_00*FE0_f2_D20[ip][j] + Jinv0_00*Jinv0_10*FE0_f2_D11[ip][j] + Jinv0_10*Jinv0_00*FE0_f2_D11[ip][j] + Jinv0_10*Jinv0_10*FE0_f2_D02[ip][j]) + (Jinv0_01*Jinv0_01*FE0_f2_D20[ip][j] + Jinv0_01*Jinv0_11*FE0_f2_D11[ip][j] + Jinv0_11*Jinv0_01*FE0_f2_D11[ip][j] + Jinv0_11*Jinv0_11*FE0_f2_D02[ip][j]))*0.5*((Jinv0_00*FE0_f2_D10[ip][k] + Jinv0_10*FE0_f2_D01[ip][k])*w[0][0] + (Jinv0_01*FE0_f2_D10[ip][k] + Jinv0_11*FE0_f2_D01[ip][k])*w[0][1])*-1 + ((Jinv0_00*Jinv0_00*FE0_f2_D20[ip][k] + Jinv0_00*Jinv0_10*FE0_f2_D11[ip][k] + Jinv0_10*Jinv0_00*FE0_f2_D11[ip][k] + Jinv0_10*Jinv0_10*FE0_f2_D02[ip][k]) + (Jinv0_01*Jinv0_01*FE0_f2_D20[ip][k] + Jinv0_01*Jinv0_11*FE0_f2_D11[ip][k] + Jinv0_11*Jinv0_01*FE0_f2_D11[ip][k] + Jinv0_11*Jinv0_11*FE0_f2_D02[ip][k]))*0.5*((Jinv0_00*FE0_f2_D10[ip][j] + Jinv0_10*FE0_f2_D01[ip][j])*w[0][0] + (Jinv0_01*FE0_f2_D10[ip][j] + Jinv0_11*FE0_f2_D01[ip][j])*w[0][1])*-1))*W2[ip]*det;
            }// end loop over 'k'
          }// end loop over 'j'
        }// end loop over 'ip'
        }
        break;
      case 2:
        {
        // Total number of operations to compute element tensor (from this point): 27360
        
        // Loop quadrature points for integral
        // Number of operations to compute element tensor for following IP loop = 27360
        for (unsigned int ip = 0; ip < 2; ip++)
        {
          
          // Number of operations for primary indices = 13680
          for (unsigned int j = 0; j < 6; j++)
          {
            for (unsigned int k = 0; k < 6; k++)
            {
              // Number of operations to compute entry = 95
              A[(j + 6)*12 + k] += (((Jinv1_00*FE0_f2_D10[ip][j] + Jinv1_10*FE0_f2_D01[ip][j])*w[0][2] + (Jinv1_01*FE0_f2_D10[ip][j] + Jinv1_11*FE0_f2_D01[ip][j])*w[0][3])*((Jinv0_00*FE0_f2_D10[ip][k] + Jinv0_10*FE0_f2_D01[ip][k])*w[0][0] + (Jinv0_01*FE0_f2_D10[ip][k] + Jinv0_11*FE0_f2_D01[ip][k])*w[0][1])*w[2][0]/(w[1][0]) + (((Jinv1_00*Jinv1_00*FE0_f2_D20[ip][j] + Jinv1_00*Jinv1_10*FE0_f2_D11[ip][j] + Jinv1_10*Jinv1_00*FE0_f2_D11[ip][j] + Jinv1_10*Jinv1_10*FE0_f2_D02[ip][j]) + (Jinv1_01*Jinv1_01*FE0_f2_D20[ip][j] + Jinv1_01*Jinv1_11*FE0_f2_D11[ip][j] + Jinv1_11*Jinv1_01*FE0_f2_D11[ip][j] + Jinv1_11*Jinv1_11*FE0_f2_D02[ip][j]))*0.5*((Jinv0_00*FE0_f2_D10[ip][k] + Jinv0_10*FE0_f2_D01[ip][k])*w[0][0] + (Jinv0_01*FE0_f2_D10[ip][k] + Jinv0_11*FE0_f2_D01[ip][k])*w[0][1])*-1 + ((Jinv0_00*Jinv0_00*FE0_f2_D20[ip][k] + Jinv0_00*Jinv0_10*FE0_f2_D11[ip][k] + Jinv0_10*Jinv0_00*FE0_f2_D11[ip][k] + Jinv0_10*Jinv0_10*FE0_f2_D02[ip][k]) + (Jinv0_01*Jinv0_01*FE0_f2_D20[ip][k] + Jinv0_01*Jinv0_11*FE0_f2_D11[ip][k] + Jinv0_11*Jinv0_01*FE0_f2_D11[ip][k] + Jinv0_11*Jinv0_11*FE0_f2_D02[ip][k]))*0.5*((Jinv1_00*FE0_f2_D10[ip][j] + Jinv1_10*FE0_f2_D01[ip][j])*w[0][2] + (Jinv1_01*FE0_f2_D10[ip][j] + Jinv1_11*FE0_f2_D01[ip][j])*w[0][3])*-1))*W2[ip]*det;
              // Number of operations to compute entry = 95
              A[(j + 6)*12 + (k + 6)] += (((Jinv1_00*FE0_f2_D10[ip][j] + Jinv1_10*FE0_f2_D01[ip][j])*w[0][2] + (Jinv1_01*FE0_f2_D10[ip][j] + Jinv1_11*FE0_f2_D01[ip][j])*w[0][3])*((Jinv1_00*FE0_f2_D10[ip][k] + Jinv1_10*FE0_f2_D01[ip][k])*w[0][2] + (Jinv1_01*FE0_f2_D10[ip][k] + Jinv1_11*FE0_f2_D01[ip][k])*w[0][3])*w[2][0]/(w[1][0]) + (((Jinv1_00*Jinv1_00*FE0_f2_D20[ip][j] + Jinv1_00*Jinv1_10*FE0_f2_D11[ip][j] + Jinv1_10*Jinv1_00*FE0_f2_D11[ip][j] + Jinv1_10*Jinv1_10*FE0_f2_D02[ip][j]) + (Jinv1_01*Jinv1_01*FE0_f2_D20[ip][j] + Jinv1_01*Jinv1_11*FE0_f2_D11[ip][j] + Jinv1_11*Jinv1_01*FE0_f2_D11[ip][j] + Jinv1_11*Jinv1_11*FE0_f2_D02[ip][j]))*0.5*((Jinv1_00*FE0_f2_D10[ip][k] + Jinv1_10*FE0_f2_D01[ip][k])*w[0][2] + (Jinv1_01*FE0_f2_D10[ip][k] + Jinv1_11*FE0_f2_D01[ip][k])*w[0][3])*-1 + ((Jinv1_00*Jinv1_00*FE0_f2_D20[ip][k] + Jinv1_00*Jinv1_10*FE0_f2_D11[ip][k] + Jinv1_10*Jinv1_00*FE0_f2_D11[ip][k] + Jinv1_10*Jinv1_10*FE0_f2_D02[ip][k]) + (Jinv1_01*Jinv1_01*FE0_f2_D20[ip][k] + Jinv1_01*Jinv1_11*FE0_f2_D11[ip][k] + Jinv1_11*Jinv1_01*FE0_f2_D11[ip][k] + Jinv1_11*Jinv1_11*FE0_f2_D02[ip][k]))*0.5*((Jinv1_00*FE0_f2_D10[ip][j] + Jinv1_10*FE0_f2_D01[ip][j])*w[0][2] + (Jinv1_01*FE0_f2_D10[ip][j] + Jinv1_11*FE0_f2_D01[ip][j])*w[0][3])*-1))*W2[ip]*det;
              // Number of operations to compute entry = 95
              A[j*12 + (k + 6)] += (((Jinv0_00*FE0_f2_D10[ip][j] + Jinv0_10*FE0_f2_D01[ip][j])*w[0][0] + (Jinv0_01*FE0_f2_D10[ip][j] + Jinv0_11*FE0_f2_D01[ip][j])*w[0][1])*((Jinv1_00*FE0_f2_D10[ip][k] + Jinv1_10*FE0_f2_D01[ip][k])*w[0][2] + (Jinv1_01*FE0_f2_D10[ip][k] + Jinv1_11*FE0_f2_D01[ip][k])*w[0][3])*w[2][0]/(w[1][0]) + (((Jinv0_00*Jinv0_00*FE0_f2_D20[ip][j] + Jinv0_00*Jinv0_10*FE0_f2_D11[ip][j] + Jinv0_10*Jinv0_00*FE0_f2_D11[ip][j] + Jinv0_10*Jinv0_10*FE0_f2_D02[ip][j]) + (Jinv0_01*Jinv0_01*FE0_f2_D20[ip][j] + Jinv0_01*Jinv0_11*FE0_f2_D11[ip][j] + Jinv0_11*Jinv0_01*FE0_f2_D11[ip][j] + Jinv0_11*Jinv0_11*FE0_f2_D02[ip][j]))*0.5*((Jinv1_00*FE0_f2_D10[ip][k] + Jinv1_10*FE0_f2_D01[ip][k])*w[0][2] + (Jinv1_01*FE0_f2_D10[ip][k] + Jinv1_11*FE0_f2_D01[ip][k])*w[0][3])*-1 + ((Jinv1_00*Jinv1_00*FE0_f2_D20[ip][k] + Jinv1_00*Jinv1_10*FE0_f2_D11[ip][k] + Jinv1_10*Jinv1_00*FE0_f2_D11[ip][k] + Jinv1_10*Jinv1_10*FE0_f2_D02[ip][k]) + (Jinv1_01*Jinv1_01*FE0_f2_D20[ip][k] + Jinv1_01*Jinv1_11*FE0_f2_D11[ip][k] + Jinv1_11*Jinv1_01*FE0_f2_D11[ip][k] + Jinv1_11*Jinv1_11*FE0_f2_D02[ip][k]))*0.5*((Jinv0_00*FE0_f2_D10[ip][j] + Jinv0_10*FE0_f2_D01[ip][j])*w[0][0] + (Jinv0_01*FE0_f2_D10[ip][j] + Jinv0_11*FE0_f2_D01[ip][j])*w[0][1])*-1))*W2[ip]*det;
              // Number of operations to compute entry = 95
              A[j*12 + k] += (((Jinv0_00*FE0_f2_D10[ip][j] + Jinv0_10*FE0_f2_D01[ip][j])*w[0][0] + (Jinv0_01*FE0_f2_D10[ip][j] + Jinv0_11*FE0_f2_D01[ip][j])*w[0][1])*((Jinv0_00*FE0_f2_D10[ip][k] + Jinv0_10*FE0_f2_D01[ip][k])*w[0][0] + (Jinv0_01*FE0_f2_D10[ip][k] + Jinv0_11*FE0_f2_D01[ip][k])*w[0][1])*w[2][0]/(w[1][0]) + (((Jinv0_00*Jinv0_00*FE0_f2_D20[ip][j] + Jinv0_00*Jinv0_10*FE0_f2_D11[ip][j] + Jinv0_10*Jinv0_00*FE0_f2_D11[ip][j] + Jinv0_10*Jinv0_10*FE0_f2_D02[ip][j]) + (Jinv0_01*Jinv0_01*FE0_f2_D20[ip][j] + Jinv0_01*Jinv0_11*FE0_f2_D11[ip][j] + Jinv0_11*Jinv0_01*FE0_f2_D11[ip][j] + Jinv0_11*Jinv0_11*FE0_f2_D02[ip][j]))*0.5*((Jinv0_00*FE0_f2_D10[ip][k] + Jinv0_10*FE0_f2_D01[ip][k])*w[0][0] + (Jinv0_01*FE0_f2_D10[ip][k] + Jinv0_11*FE0_f2_D01[ip][k])*w[0][1])*-1 + ((Jinv0_00*Jinv0_00*FE0_f2_D20[ip][k] + Jinv0_00*Jinv0_10*FE0_f2_D11[ip][k] + Jinv0_10*Jinv0_00*FE0_f2_D11[ip][k] + Jinv0_10*Jinv0_10*FE0_f2_D02[ip][k]) + (Jinv0_01*Jinv0_01*FE0_f2_D20[ip][k] + Jinv0_01*Jinv0_11*FE0_f2_D11[ip][k] + Jinv0_11*Jinv0_01*FE0_f2_D11[ip][k] + Jinv0_11*Jinv0_11*FE0_f2_D02[ip][k]))*0.5*((Jinv0_00*FE0_f2_D10[ip][j] + Jinv0_10*FE0_f2_D01[ip][j])*w[0][0] + (Jinv0_01*FE0_f2_D10[ip][j] + Jinv0_11*FE0_f2_D01[ip][j])*w[0][1])*-1))*W2[ip]*det;
            }// end loop over 'k'
          }// end loop over 'j'
        }// end loop over 'ip'
        }
        break;
      }
      break;
    }
  }

};

/// This class defines the interface for the tabulation of the
/// interior facet tensor corresponding to the local contribution to
/// a form from the integral over an interior facet.

class biharmonic_0_interior_facet_integral_0: public ufc::interior_facet_integral
{
private:

  biharmonic_0_interior_facet_integral_0_quadrature integral_0_quadrature;

public:

  /// Constructor
  biharmonic_0_interior_facet_integral_0() : ufc::interior_facet_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~biharmonic_0_interior_facet_integral_0()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local interior facet
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c0,
                               const ufc::cell& c1,
                               unsigned int facet0,
                               unsigned int facet1) const
  {
    // Reset values of the element tensor block
    A[0] = 0;
    A[1] = 0;
    A[2] = 0;
    A[3] = 0;
    A[4] = 0;
    A[5] = 0;
    A[6] = 0;
    A[7] = 0;
    A[8] = 0;
    A[9] = 0;
    A[10] = 0;
    A[11] = 0;
    A[12] = 0;
    A[13] = 0;
    A[14] = 0;
    A[15] = 0;
    A[16] = 0;
    A[17] = 0;
    A[18] = 0;
    A[19] = 0;
    A[20] = 0;
    A[21] = 0;
    A[22] = 0;
    A[23] = 0;
    A[24] = 0;
    A[25] = 0;
    A[26] = 0;
    A[27] = 0;
    A[28] = 0;
    A[29] = 0;
    A[30] = 0;
    A[31] = 0;
    A[32] = 0;
    A[33] = 0;
    A[34] = 0;
    A[35] = 0;
    A[36] = 0;
    A[37] = 0;
    A[38] = 0;
    A[39] = 0;
    A[40] = 0;
    A[41] = 0;
    A[42] = 0;
    A[43] = 0;
    A[44] = 0;
    A[45] = 0;
    A[46] = 0;
    A[47] = 0;
    A[48] = 0;
    A[49] = 0;
    A[50] = 0;
    A[51] = 0;
    A[52] = 0;
    A[53] = 0;
    A[54] = 0;
    A[55] = 0;
    A[56] = 0;
    A[57] = 0;
    A[58] = 0;
    A[59] = 0;
    A[60] = 0;
    A[61] = 0;
    A[62] = 0;
    A[63] = 0;
    A[64] = 0;
    A[65] = 0;
    A[66] = 0;
    A[67] = 0;
    A[68] = 0;
    A[69] = 0;
    A[70] = 0;
    A[71] = 0;
    A[72] = 0;
    A[73] = 0;
    A[74] = 0;
    A[75] = 0;
    A[76] = 0;
    A[77] = 0;
    A[78] = 0;
    A[79] = 0;
    A[80] = 0;
    A[81] = 0;
    A[82] = 0;
    A[83] = 0;
    A[84] = 0;
    A[85] = 0;
    A[86] = 0;
    A[87] = 0;
    A[88] = 0;
    A[89] = 0;
    A[90] = 0;
    A[91] = 0;
    A[92] = 0;
    A[93] = 0;
    A[94] = 0;
    A[95] = 0;
    A[96] = 0;
    A[97] = 0;
    A[98] = 0;
    A[99] = 0;
    A[100] = 0;
    A[101] = 0;
    A[102] = 0;
    A[103] = 0;
    A[104] = 0;
    A[105] = 0;
    A[106] = 0;
    A[107] = 0;
    A[108] = 0;
    A[109] = 0;
    A[110] = 0;
    A[111] = 0;
    A[112] = 0;
    A[113] = 0;
    A[114] = 0;
    A[115] = 0;
    A[116] = 0;
    A[117] = 0;
    A[118] = 0;
    A[119] = 0;
    A[120] = 0;
    A[121] = 0;
    A[122] = 0;
    A[123] = 0;
    A[124] = 0;
    A[125] = 0;
    A[126] = 0;
    A[127] = 0;
    A[128] = 0;
    A[129] = 0;
    A[130] = 0;
    A[131] = 0;
    A[132] = 0;
    A[133] = 0;
    A[134] = 0;
    A[135] = 0;
    A[136] = 0;
    A[137] = 0;
    A[138] = 0;
    A[139] = 0;
    A[140] = 0;
    A[141] = 0;
    A[142] = 0;
    A[143] = 0;
    
    // Add all contributions to element tensor
    integral_0_quadrature.tabulate_tensor(A, w, c0, c1, facet0, facet1);
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class biharmonic_form_0: public ufc::form
{
public:

  /// Constructor
  biharmonic_form_0() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~biharmonic_form_0()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "Form([Integral(Product(IndexSum(Indexed(ComponentTensor(SpatialDerivative(SpatialDerivative(BasisFunction(FiniteElement('Lagrange', Cell('triangle', 1, Space(2)), 2), 0), MultiIndex((Index(0),), {Index(0): 2})), MultiIndex((Index(1),), {Index(1): 2})), MultiIndex((Index(1),), {Index(1): 2})), MultiIndex((Index(0),), {Index(0): 2})), MultiIndex((Index(0),), {Index(0): 2})), IndexSum(Indexed(ComponentTensor(SpatialDerivative(SpatialDerivative(BasisFunction(FiniteElement('Lagrange', Cell('triangle', 1, Space(2)), 2), 1), MultiIndex((Index(2),), {Index(2): 2})), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(3),), {Index(3): 2})), MultiIndex((Index(2),), {Index(2): 2})), MultiIndex((Index(2),), {Index(2): 2}))), Measure('cell', 0, None)), Integral(Sum(Product(Division(PositiveRestricted(Constant(Cell('triangle', 1, Space(2)), 2)), PositiveRestricted(Constant(Cell('triangle', 1, Space(2)), 1))), Product(Sum(IndexSum(Product(Indexed(NegativeRestricted(ComponentTensor(SpatialDerivative(BasisFunction(FiniteElement('Lagrange', Cell('triangle', 1, Space(2)), 2), 0), MultiIndex((Index(4),), {Index(4): 2})), MultiIndex((Index(4),), {Index(4): 2}))), MultiIndex((Index(5),), {Index(5): 2})), Indexed(NegativeRestricted(VectorConstant(Cell('triangle', 1, Space(2)), 2, 0)), MultiIndex((Index(5),), {Index(5): 2}))), MultiIndex((Index(5),), {Index(5): 2})), IndexSum(Product(Indexed(PositiveRestricted(ComponentTensor(SpatialDerivative(BasisFunction(FiniteElement('Lagrange', Cell('triangle', 1, Space(2)), 2), 0), MultiIndex((Index(6),), {Index(6): 2})), MultiIndex((Index(6),), {Index(6): 2}))), MultiIndex((Index(7),), {Index(7): 2})), Indexed(PositiveRestricted(VectorConstant(Cell('triangle', 1, Space(2)), 2, 0)), MultiIndex((Index(7),), {Index(7): 2}))), MultiIndex((Index(7),), {Index(7): 2}))), Sum(IndexSum(Product(Indexed(NegativeRestricted(ComponentTensor(SpatialDerivative(BasisFunction(FiniteElement('Lagrange', Cell('triangle', 1, Space(2)), 2), 1), MultiIndex((Index(8),), {Index(8): 2})), MultiIndex((Index(8),), {Index(8): 2}))), MultiIndex((Index(9),), {Index(9): 2})), Indexed(NegativeRestricted(VectorConstant(Cell('triangle', 1, Space(2)), 2, 0)), MultiIndex((Index(9),), {Index(9): 2}))), MultiIndex((Index(9),), {Index(9): 2})), IndexSum(Product(Indexed(PositiveRestricted(ComponentTensor(SpatialDerivative(BasisFunction(FiniteElement('Lagrange', Cell('triangle', 1, Space(2)), 2), 1), MultiIndex((Index(10),), {Index(10): 2})), MultiIndex((Index(10),), {Index(10): 2}))), MultiIndex((Index(11),), {Index(11): 2})), Indexed(PositiveRestricted(VectorConstant(Cell('triangle', 1, Space(2)), 2, 0)), MultiIndex((Index(11),), {Index(11): 2}))), MultiIndex((Index(11),), {Index(11): 2}))))), Sum(Product(IntValue(-1, (), (), {}), Product(Product(FloatValue(0.5, (), (), {}), Sum(NegativeRestricted(IndexSum(Indexed(ComponentTensor(SpatialDerivative(SpatialDerivative(BasisFunction(FiniteElement('Lagrange', Cell('triangle', 1, Space(2)), 2), 0), MultiIndex((Index(12),), {Index(12): 2})), MultiIndex((Index(13),), {Index(13): 2})), MultiIndex((Index(13),), {Index(13): 2})), MultiIndex((Index(12),), {Index(12): 2})), MultiIndex((Index(12),), {Index(12): 2}))), PositiveRestricted(IndexSum(Indexed(ComponentTensor(SpatialDerivative(SpatialDerivative(BasisFunction(FiniteElement('Lagrange', Cell('triangle', 1, Space(2)), 2), 0), MultiIndex((Index(14),), {Index(14): 2})), MultiIndex((Index(15),), {Index(15): 2})), MultiIndex((Index(15),), {Index(15): 2})), MultiIndex((Index(14),), {Index(14): 2})), MultiIndex((Index(14),), {Index(14): 2}))))), Sum(IndexSum(Product(Indexed(NegativeRestricted(ComponentTensor(SpatialDerivative(BasisFunction(FiniteElement('Lagrange', Cell('triangle', 1, Space(2)), 2), 1), MultiIndex((Index(16),), {Index(16): 2})), MultiIndex((Index(16),), {Index(16): 2}))), MultiIndex((Index(17),), {Index(17): 2})), Indexed(NegativeRestricted(VectorConstant(Cell('triangle', 1, Space(2)), 2, 0)), MultiIndex((Index(17),), {Index(17): 2}))), MultiIndex((Index(17),), {Index(17): 2})), IndexSum(Product(Indexed(PositiveRestricted(ComponentTensor(SpatialDerivative(BasisFunction(FiniteElement('Lagrange', Cell('triangle', 1, Space(2)), 2), 1), MultiIndex((Index(18),), {Index(18): 2})), MultiIndex((Index(18),), {Index(18): 2}))), MultiIndex((Index(19),), {Index(19): 2})), Indexed(PositiveRestricted(VectorConstant(Cell('triangle', 1, Space(2)), 2, 0)), MultiIndex((Index(19),), {Index(19): 2}))), MultiIndex((Index(19),), {Index(19): 2}))))), Product(IntValue(-1, (), (), {}), Product(Product(FloatValue(0.5, (), (), {}), Sum(NegativeRestricted(IndexSum(Indexed(ComponentTensor(SpatialDerivative(SpatialDerivative(BasisFunction(FiniteElement('Lagrange', Cell('triangle', 1, Space(2)), 2), 1), MultiIndex((Index(20),), {Index(20): 2})), MultiIndex((Index(21),), {Index(21): 2})), MultiIndex((Index(21),), {Index(21): 2})), MultiIndex((Index(20),), {Index(20): 2})), MultiIndex((Index(20),), {Index(20): 2}))), PositiveRestricted(IndexSum(Indexed(ComponentTensor(SpatialDerivative(SpatialDerivative(BasisFunction(FiniteElement('Lagrange', Cell('triangle', 1, Space(2)), 2), 1), MultiIndex((Index(22),), {Index(22): 2})), MultiIndex((Index(23),), {Index(23): 2})), MultiIndex((Index(23),), {Index(23): 2})), MultiIndex((Index(22),), {Index(22): 2})), MultiIndex((Index(22),), {Index(22): 2}))))), Sum(IndexSum(Product(Indexed(NegativeRestricted(ComponentTensor(SpatialDerivative(BasisFunction(FiniteElement('Lagrange', Cell('triangle', 1, Space(2)), 2), 0), MultiIndex((Index(24),), {Index(24): 2})), MultiIndex((Index(24),), {Index(24): 2}))), MultiIndex((Index(25),), {Index(25): 2})), Indexed(NegativeRestricted(VectorConstant(Cell('triangle', 1, Space(2)), 2, 0)), MultiIndex((Index(25),), {Index(25): 2}))), MultiIndex((Index(25),), {Index(25): 2})), IndexSum(Product(Indexed(PositiveRestricted(ComponentTensor(SpatialDerivative(BasisFunction(FiniteElement('Lagrange', Cell('triangle', 1, Space(2)), 2), 0), MultiIndex((Index(26),), {Index(26): 2})), MultiIndex((Index(26),), {Index(26): 2}))), MultiIndex((Index(27),), {Index(27): 2})), Indexed(PositiveRestricted(VectorConstant(Cell('triangle', 1, Space(2)), 2, 0)), MultiIndex((Index(27),), {Index(27): 2}))), MultiIndex((Index(27),), {Index(27): 2}))))))), Measure('interior_facet', 0, None))])";
  }

  /// Return the rank of the global tensor (r)
  virtual unsigned int rank() const
  {
    return 2;
  }

  /// Return the number of coefficients (n)
  virtual unsigned int num_coefficients() const
  {
    return 3;
  }

  /// Return the number of cell integrals
  virtual unsigned int num_cell_integrals() const
  {
    return 1;
  }
  
  /// Return the number of exterior facet integrals
  virtual unsigned int num_exterior_facet_integrals() const
  {
    return 0;
  }
  
  /// Return the number of interior facet integrals
  virtual unsigned int num_interior_facet_integrals() const
  {
    return 1;
  }
    
  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new biharmonic_0_finite_element_0();
      break;
    case 1:
      return new biharmonic_0_finite_element_1();
      break;
    case 2:
      return new biharmonic_0_finite_element_2();
      break;
    case 3:
      return new biharmonic_0_finite_element_3();
      break;
    case 4:
      return new biharmonic_0_finite_element_4();
      break;
    }
    return 0;
  }
  
  /// Create a new dof map for argument function i
  virtual ufc::dof_map* create_dof_map(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new biharmonic_0_dof_map_0();
      break;
    case 1:
      return new biharmonic_0_dof_map_1();
      break;
    case 2:
      return new biharmonic_0_dof_map_2();
      break;
    case 3:
      return new biharmonic_0_dof_map_3();
      break;
    case 4:
      return new biharmonic_0_dof_map_4();
      break;
    }
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(unsigned int i) const
  {
    return new biharmonic_0_cell_integral_0();
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(unsigned int i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(unsigned int i) const
  {
    return new biharmonic_0_interior_facet_integral_0();
  }

};

/// This class defines the interface for a finite element.

class biharmonic_1_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  biharmonic_1_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~biharmonic_1_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', 'triangle', 2)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 6;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
      
    // Compute determinant of Jacobian
    const double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Get coordinates and map to the reference (UFC) element
    double x = (element_coordinates[0][1]*element_coordinates[2][0] -\
                element_coordinates[0][0]*element_coordinates[2][1] +\
                J_11*coordinates[0] - J_01*coordinates[1]) / detJ;
    double y = (element_coordinates[1][1]*element_coordinates[0][0] -\
                element_coordinates[1][0]*element_coordinates[0][1] -\
                J_10*coordinates[0] + J_00*coordinates[1]) / detJ;
    
    // Map coordinates to the reference square
    if (std::abs(y - 1.0) < 1e-14)
      x = -1.0;
    else
      x = 2.0 *x/(1.0 - y) - 1.0;
    y = 2.0*y - 1.0;
    
    // Reset values
    *values = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_2_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.707106781186548*psitilde_a_0*scalings_y_0*psitilde_bs_0_0;
    const double basisvalue1 = 1.73205080756888*psitilde_a_1*scalings_y_1*psitilde_bs_1_0;
    const double basisvalue2 = psitilde_a_0*scalings_y_0*psitilde_bs_0_1;
    const double basisvalue3 = 2.73861278752583*psitilde_a_2*scalings_y_2*psitilde_bs_2_0;
    const double basisvalue4 = 2.12132034355964*psitilde_a_1*scalings_y_1*psitilde_bs_1_1;
    const double basisvalue5 = 1.22474487139159*psitilde_a_0*scalings_y_0*psitilde_bs_0_2;
    
    // Table(s) of coefficients
    const static double coefficients0[6][6] = \
    {{0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582063, 0.0544331053951817},
    {0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582064, 0.0544331053951818},
    {0, 0, 0.2, 0, 0, 0.163299316185545},
    {0.471404520791032, 0.23094010767585, 0.133333333333333, 0, 0.188561808316413, -0.163299316185545},
    {0.471404520791032, -0.23094010767585, 0.133333333333333, 0, -0.188561808316413, -0.163299316185545},
    {0.471404520791032, 0, -0.266666666666667, -0.243432247780074, 0, 0.0544331053951817}};
    
    // Extract relevant coefficients
    const double coeff0_0 = coefficients0[dof][0];
    const double coeff0_1 = coefficients0[dof][1];
    const double coeff0_2 = coefficients0[dof][2];
    const double coeff0_3 = coefficients0[dof][3];
    const double coeff0_4 = coefficients0[dof][4];
    const double coeff0_5 = coefficients0[dof][5];
    
    // Compute value(s)
    *values = coeff0_0*basisvalue0 + coeff0_1*basisvalue1 + coeff0_2*basisvalue2 + coeff0_3*basisvalue3 + coeff0_4*basisvalue4 + coeff0_5*basisvalue5;
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis() is not yet implemented.");
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
      
    // Compute determinant of Jacobian
    const double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Get coordinates and map to the reference (UFC) element
    double x = (element_coordinates[0][1]*element_coordinates[2][0] -\
                element_coordinates[0][0]*element_coordinates[2][1] +\
                J_11*coordinates[0] - J_01*coordinates[1]) / detJ;
    double y = (element_coordinates[1][1]*element_coordinates[0][0] -\
                element_coordinates[1][0]*element_coordinates[0][1] -\
                J_10*coordinates[0] + J_00*coordinates[1]) / detJ;
    
    // Map coordinates to the reference square
    if (std::abs(y - 1.0) < 1e-14)
      x = -1.0;
    else
      x = 2.0 *x/(1.0 - y) - 1.0;
    y = 2.0*y - 1.0;
    
    // Compute number of derivatives
    unsigned int num_derivatives = 1;
    
    for (unsigned int j = 0; j < n; j++)
      num_derivatives *= 2;
    
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      combinations[j] = new unsigned int [n];
      for (unsigned int k = 0; k < n; k++)
        combinations[j][k] = 0;
    }
        
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] =  {{J_11 / detJ, -J_01 / detJ}, {-J_10 / detJ, J_00 / detJ}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values
    for (unsigned int j = 0; j < 1*num_derivatives; j++)
      values[j] = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_2_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.707106781186548*psitilde_a_0*scalings_y_0*psitilde_bs_0_0;
    const double basisvalue1 = 1.73205080756888*psitilde_a_1*scalings_y_1*psitilde_bs_1_0;
    const double basisvalue2 = psitilde_a_0*scalings_y_0*psitilde_bs_0_1;
    const double basisvalue3 = 2.73861278752583*psitilde_a_2*scalings_y_2*psitilde_bs_2_0;
    const double basisvalue4 = 2.12132034355964*psitilde_a_1*scalings_y_1*psitilde_bs_1_1;
    const double basisvalue5 = 1.22474487139159*psitilde_a_0*scalings_y_0*psitilde_bs_0_2;
    
    // Table(s) of coefficients
    const static double coefficients0[6][6] = \
    {{0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582063, 0.0544331053951817},
    {0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582064, 0.0544331053951818},
    {0, 0, 0.2, 0, 0, 0.163299316185545},
    {0.471404520791032, 0.23094010767585, 0.133333333333333, 0, 0.188561808316413, -0.163299316185545},
    {0.471404520791032, -0.23094010767585, 0.133333333333333, 0, -0.188561808316413, -0.163299316185545},
    {0.471404520791032, 0, -0.266666666666667, -0.243432247780074, 0, 0.0544331053951817}};
    
    // Interesting (new) part
    // Tables of derivatives of the polynomial base (transpose)
    const static double dmats0[6][6] = \
    {{0, 0, 0, 0, 0, 0},
    {4.89897948556636, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0},
    {0, 9.48683298050514, 0, 0, 0, 0},
    {4, 0, 7.07106781186548, 0, 0, 0},
    {0, 0, 0, 0, 0, 0}};
    
    const static double dmats1[6][6] = \
    {{0, 0, 0, 0, 0, 0},
    {2.44948974278318, 0, 0, 0, 0, 0},
    {4.24264068711928, 0, 0, 0, 0, 0},
    {2.58198889747161, 4.74341649025257, -0.912870929175277, 0, 0, 0},
    {2, 6.12372435695795, 3.53553390593274, 0, 0, 0},
    {-2.3094010767585, 0, 8.16496580927726, 0, 0, 0}};
    
    // Compute reference derivatives
    // Declare pointer to array of derivatives on FIAT element
    double *derivatives = new double [num_derivatives];
    
    // Declare coefficients
    double coeff0_0 = 0;
    double coeff0_1 = 0;
    double coeff0_2 = 0;
    double coeff0_3 = 0;
    double coeff0_4 = 0;
    double coeff0_5 = 0;
    
    // Declare new coefficients
    double new_coeff0_0 = 0;
    double new_coeff0_1 = 0;
    double new_coeff0_2 = 0;
    double new_coeff0_3 = 0;
    double new_coeff0_4 = 0;
    double new_coeff0_5 = 0;
    
    // Loop possible derivatives
    for (unsigned int deriv_num = 0; deriv_num < num_derivatives; deriv_num++)
    {
      // Get values from coefficients array
      new_coeff0_0 = coefficients0[dof][0];
      new_coeff0_1 = coefficients0[dof][1];
      new_coeff0_2 = coefficients0[dof][2];
      new_coeff0_3 = coefficients0[dof][3];
      new_coeff0_4 = coefficients0[dof][4];
      new_coeff0_5 = coefficients0[dof][5];
    
      // Loop derivative order
      for (unsigned int j = 0; j < n; j++)
      {
        // Update old coefficients
        coeff0_0 = new_coeff0_0;
        coeff0_1 = new_coeff0_1;
        coeff0_2 = new_coeff0_2;
        coeff0_3 = new_coeff0_3;
        coeff0_4 = new_coeff0_4;
        coeff0_5 = new_coeff0_5;
    
        if(combinations[deriv_num][j] == 0)
        {
          new_coeff0_0 = coeff0_0*dmats0[0][0] + coeff0_1*dmats0[1][0] + coeff0_2*dmats0[2][0] + coeff0_3*dmats0[3][0] + coeff0_4*dmats0[4][0] + coeff0_5*dmats0[5][0];
          new_coeff0_1 = coeff0_0*dmats0[0][1] + coeff0_1*dmats0[1][1] + coeff0_2*dmats0[2][1] + coeff0_3*dmats0[3][1] + coeff0_4*dmats0[4][1] + coeff0_5*dmats0[5][1];
          new_coeff0_2 = coeff0_0*dmats0[0][2] + coeff0_1*dmats0[1][2] + coeff0_2*dmats0[2][2] + coeff0_3*dmats0[3][2] + coeff0_4*dmats0[4][2] + coeff0_5*dmats0[5][2];
          new_coeff0_3 = coeff0_0*dmats0[0][3] + coeff0_1*dmats0[1][3] + coeff0_2*dmats0[2][3] + coeff0_3*dmats0[3][3] + coeff0_4*dmats0[4][3] + coeff0_5*dmats0[5][3];
          new_coeff0_4 = coeff0_0*dmats0[0][4] + coeff0_1*dmats0[1][4] + coeff0_2*dmats0[2][4] + coeff0_3*dmats0[3][4] + coeff0_4*dmats0[4][4] + coeff0_5*dmats0[5][4];
          new_coeff0_5 = coeff0_0*dmats0[0][5] + coeff0_1*dmats0[1][5] + coeff0_2*dmats0[2][5] + coeff0_3*dmats0[3][5] + coeff0_4*dmats0[4][5] + coeff0_5*dmats0[5][5];
        }
        if(combinations[deriv_num][j] == 1)
        {
          new_coeff0_0 = coeff0_0*dmats1[0][0] + coeff0_1*dmats1[1][0] + coeff0_2*dmats1[2][0] + coeff0_3*dmats1[3][0] + coeff0_4*dmats1[4][0] + coeff0_5*dmats1[5][0];
          new_coeff0_1 = coeff0_0*dmats1[0][1] + coeff0_1*dmats1[1][1] + coeff0_2*dmats1[2][1] + coeff0_3*dmats1[3][1] + coeff0_4*dmats1[4][1] + coeff0_5*dmats1[5][1];
          new_coeff0_2 = coeff0_0*dmats1[0][2] + coeff0_1*dmats1[1][2] + coeff0_2*dmats1[2][2] + coeff0_3*dmats1[3][2] + coeff0_4*dmats1[4][2] + coeff0_5*dmats1[5][2];
          new_coeff0_3 = coeff0_0*dmats1[0][3] + coeff0_1*dmats1[1][3] + coeff0_2*dmats1[2][3] + coeff0_3*dmats1[3][3] + coeff0_4*dmats1[4][3] + coeff0_5*dmats1[5][3];
          new_coeff0_4 = coeff0_0*dmats1[0][4] + coeff0_1*dmats1[1][4] + coeff0_2*dmats1[2][4] + coeff0_3*dmats1[3][4] + coeff0_4*dmats1[4][4] + coeff0_5*dmats1[5][4];
          new_coeff0_5 = coeff0_0*dmats1[0][5] + coeff0_1*dmats1[1][5] + coeff0_2*dmats1[2][5] + coeff0_3*dmats1[3][5] + coeff0_4*dmats1[4][5] + coeff0_5*dmats1[5][5];
        }
    
      }
      // Compute derivatives on reference element as dot product of coefficients and basisvalues
      derivatives[deriv_num] = new_coeff0_0*basisvalue0 + new_coeff0_1*basisvalue1 + new_coeff0_2*basisvalue2 + new_coeff0_3*basisvalue3 + new_coeff0_4*basisvalue4 + new_coeff0_5*basisvalue5;
    }
    
    // Transform derivatives back to physical element
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        values[row] += transform[row][col]*derivatives[col];
      }
    }
    // Delete pointer to array of derivatives on FIAT element
    delete [] derivatives;
    
    // Delete pointer to array of combinations of derivatives and transform
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      delete [] combinations[row];
      delete [] transform[row];
    }
    
    delete [] combinations;
    delete [] transform;
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis_derivatives() is not yet implemented.");
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // The reference points, direction and weights:
    const static double X[6][1][2] = {{{0, 0}}, {{1, 0}}, {{0, 1}}, {{0.5, 0.5}}, {{0, 0.5}}, {{0.5, 0}}};
    const static double W[6][1] = {{1}, {1}, {1}, {1}, {1}, {1}};
    const static double D[6][1][1] = {{{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}};
    
    const double * const * x = c.coordinates;
    double result = 0.0;
    // Iterate over the points:
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0][0] - X[i][0][1];
    const double w1 = X[i][0][0];
    const double w2 = X[i][0][1];
    
    // Compute affine mapping y = F(X)
    double y[2];
    y[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0];
    y[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1];
    
    // Evaluate function at physical points
    double values[1];
    f.evaluate(values, y, c);
    
    // Map function values using appropriate mapping
    // Affine map: Do nothing
    
    // Note that we do not map the weights (yet).
    
    // Take directional components
    for(int k = 0; k < 1; k++)
      result += values[k]*D[i][0][k];
    // Multiply by weights 
    result *= W[i][0];
    
    return result;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate at vertices and use affine mapping
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new biharmonic_1_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class biharmonic_1_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  biharmonic_1_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~biharmonic_1_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', 'triangle', 2)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 6;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
      
    // Compute determinant of Jacobian
    const double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Get coordinates and map to the reference (UFC) element
    double x = (element_coordinates[0][1]*element_coordinates[2][0] -\
                element_coordinates[0][0]*element_coordinates[2][1] +\
                J_11*coordinates[0] - J_01*coordinates[1]) / detJ;
    double y = (element_coordinates[1][1]*element_coordinates[0][0] -\
                element_coordinates[1][0]*element_coordinates[0][1] -\
                J_10*coordinates[0] + J_00*coordinates[1]) / detJ;
    
    // Map coordinates to the reference square
    if (std::abs(y - 1.0) < 1e-14)
      x = -1.0;
    else
      x = 2.0 *x/(1.0 - y) - 1.0;
    y = 2.0*y - 1.0;
    
    // Reset values
    *values = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_2_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.707106781186548*psitilde_a_0*scalings_y_0*psitilde_bs_0_0;
    const double basisvalue1 = 1.73205080756888*psitilde_a_1*scalings_y_1*psitilde_bs_1_0;
    const double basisvalue2 = psitilde_a_0*scalings_y_0*psitilde_bs_0_1;
    const double basisvalue3 = 2.73861278752583*psitilde_a_2*scalings_y_2*psitilde_bs_2_0;
    const double basisvalue4 = 2.12132034355964*psitilde_a_1*scalings_y_1*psitilde_bs_1_1;
    const double basisvalue5 = 1.22474487139159*psitilde_a_0*scalings_y_0*psitilde_bs_0_2;
    
    // Table(s) of coefficients
    const static double coefficients0[6][6] = \
    {{0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582063, 0.0544331053951817},
    {0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582064, 0.0544331053951818},
    {0, 0, 0.2, 0, 0, 0.163299316185545},
    {0.471404520791032, 0.23094010767585, 0.133333333333333, 0, 0.188561808316413, -0.163299316185545},
    {0.471404520791032, -0.23094010767585, 0.133333333333333, 0, -0.188561808316413, -0.163299316185545},
    {0.471404520791032, 0, -0.266666666666667, -0.243432247780074, 0, 0.0544331053951817}};
    
    // Extract relevant coefficients
    const double coeff0_0 = coefficients0[dof][0];
    const double coeff0_1 = coefficients0[dof][1];
    const double coeff0_2 = coefficients0[dof][2];
    const double coeff0_3 = coefficients0[dof][3];
    const double coeff0_4 = coefficients0[dof][4];
    const double coeff0_5 = coefficients0[dof][5];
    
    // Compute value(s)
    *values = coeff0_0*basisvalue0 + coeff0_1*basisvalue1 + coeff0_2*basisvalue2 + coeff0_3*basisvalue3 + coeff0_4*basisvalue4 + coeff0_5*basisvalue5;
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis() is not yet implemented.");
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
      
    // Compute determinant of Jacobian
    const double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Get coordinates and map to the reference (UFC) element
    double x = (element_coordinates[0][1]*element_coordinates[2][0] -\
                element_coordinates[0][0]*element_coordinates[2][1] +\
                J_11*coordinates[0] - J_01*coordinates[1]) / detJ;
    double y = (element_coordinates[1][1]*element_coordinates[0][0] -\
                element_coordinates[1][0]*element_coordinates[0][1] -\
                J_10*coordinates[0] + J_00*coordinates[1]) / detJ;
    
    // Map coordinates to the reference square
    if (std::abs(y - 1.0) < 1e-14)
      x = -1.0;
    else
      x = 2.0 *x/(1.0 - y) - 1.0;
    y = 2.0*y - 1.0;
    
    // Compute number of derivatives
    unsigned int num_derivatives = 1;
    
    for (unsigned int j = 0; j < n; j++)
      num_derivatives *= 2;
    
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      combinations[j] = new unsigned int [n];
      for (unsigned int k = 0; k < n; k++)
        combinations[j][k] = 0;
    }
        
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] =  {{J_11 / detJ, -J_01 / detJ}, {-J_10 / detJ, J_00 / detJ}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values
    for (unsigned int j = 0; j < 1*num_derivatives; j++)
      values[j] = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_2_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.707106781186548*psitilde_a_0*scalings_y_0*psitilde_bs_0_0;
    const double basisvalue1 = 1.73205080756888*psitilde_a_1*scalings_y_1*psitilde_bs_1_0;
    const double basisvalue2 = psitilde_a_0*scalings_y_0*psitilde_bs_0_1;
    const double basisvalue3 = 2.73861278752583*psitilde_a_2*scalings_y_2*psitilde_bs_2_0;
    const double basisvalue4 = 2.12132034355964*psitilde_a_1*scalings_y_1*psitilde_bs_1_1;
    const double basisvalue5 = 1.22474487139159*psitilde_a_0*scalings_y_0*psitilde_bs_0_2;
    
    // Table(s) of coefficients
    const static double coefficients0[6][6] = \
    {{0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582063, 0.0544331053951817},
    {0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582064, 0.0544331053951818},
    {0, 0, 0.2, 0, 0, 0.163299316185545},
    {0.471404520791032, 0.23094010767585, 0.133333333333333, 0, 0.188561808316413, -0.163299316185545},
    {0.471404520791032, -0.23094010767585, 0.133333333333333, 0, -0.188561808316413, -0.163299316185545},
    {0.471404520791032, 0, -0.266666666666667, -0.243432247780074, 0, 0.0544331053951817}};
    
    // Interesting (new) part
    // Tables of derivatives of the polynomial base (transpose)
    const static double dmats0[6][6] = \
    {{0, 0, 0, 0, 0, 0},
    {4.89897948556636, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0},
    {0, 9.48683298050514, 0, 0, 0, 0},
    {4, 0, 7.07106781186548, 0, 0, 0},
    {0, 0, 0, 0, 0, 0}};
    
    const static double dmats1[6][6] = \
    {{0, 0, 0, 0, 0, 0},
    {2.44948974278318, 0, 0, 0, 0, 0},
    {4.24264068711928, 0, 0, 0, 0, 0},
    {2.58198889747161, 4.74341649025257, -0.912870929175277, 0, 0, 0},
    {2, 6.12372435695795, 3.53553390593274, 0, 0, 0},
    {-2.3094010767585, 0, 8.16496580927726, 0, 0, 0}};
    
    // Compute reference derivatives
    // Declare pointer to array of derivatives on FIAT element
    double *derivatives = new double [num_derivatives];
    
    // Declare coefficients
    double coeff0_0 = 0;
    double coeff0_1 = 0;
    double coeff0_2 = 0;
    double coeff0_3 = 0;
    double coeff0_4 = 0;
    double coeff0_5 = 0;
    
    // Declare new coefficients
    double new_coeff0_0 = 0;
    double new_coeff0_1 = 0;
    double new_coeff0_2 = 0;
    double new_coeff0_3 = 0;
    double new_coeff0_4 = 0;
    double new_coeff0_5 = 0;
    
    // Loop possible derivatives
    for (unsigned int deriv_num = 0; deriv_num < num_derivatives; deriv_num++)
    {
      // Get values from coefficients array
      new_coeff0_0 = coefficients0[dof][0];
      new_coeff0_1 = coefficients0[dof][1];
      new_coeff0_2 = coefficients0[dof][2];
      new_coeff0_3 = coefficients0[dof][3];
      new_coeff0_4 = coefficients0[dof][4];
      new_coeff0_5 = coefficients0[dof][5];
    
      // Loop derivative order
      for (unsigned int j = 0; j < n; j++)
      {
        // Update old coefficients
        coeff0_0 = new_coeff0_0;
        coeff0_1 = new_coeff0_1;
        coeff0_2 = new_coeff0_2;
        coeff0_3 = new_coeff0_3;
        coeff0_4 = new_coeff0_4;
        coeff0_5 = new_coeff0_5;
    
        if(combinations[deriv_num][j] == 0)
        {
          new_coeff0_0 = coeff0_0*dmats0[0][0] + coeff0_1*dmats0[1][0] + coeff0_2*dmats0[2][0] + coeff0_3*dmats0[3][0] + coeff0_4*dmats0[4][0] + coeff0_5*dmats0[5][0];
          new_coeff0_1 = coeff0_0*dmats0[0][1] + coeff0_1*dmats0[1][1] + coeff0_2*dmats0[2][1] + coeff0_3*dmats0[3][1] + coeff0_4*dmats0[4][1] + coeff0_5*dmats0[5][1];
          new_coeff0_2 = coeff0_0*dmats0[0][2] + coeff0_1*dmats0[1][2] + coeff0_2*dmats0[2][2] + coeff0_3*dmats0[3][2] + coeff0_4*dmats0[4][2] + coeff0_5*dmats0[5][2];
          new_coeff0_3 = coeff0_0*dmats0[0][3] + coeff0_1*dmats0[1][3] + coeff0_2*dmats0[2][3] + coeff0_3*dmats0[3][3] + coeff0_4*dmats0[4][3] + coeff0_5*dmats0[5][3];
          new_coeff0_4 = coeff0_0*dmats0[0][4] + coeff0_1*dmats0[1][4] + coeff0_2*dmats0[2][4] + coeff0_3*dmats0[3][4] + coeff0_4*dmats0[4][4] + coeff0_5*dmats0[5][4];
          new_coeff0_5 = coeff0_0*dmats0[0][5] + coeff0_1*dmats0[1][5] + coeff0_2*dmats0[2][5] + coeff0_3*dmats0[3][5] + coeff0_4*dmats0[4][5] + coeff0_5*dmats0[5][5];
        }
        if(combinations[deriv_num][j] == 1)
        {
          new_coeff0_0 = coeff0_0*dmats1[0][0] + coeff0_1*dmats1[1][0] + coeff0_2*dmats1[2][0] + coeff0_3*dmats1[3][0] + coeff0_4*dmats1[4][0] + coeff0_5*dmats1[5][0];
          new_coeff0_1 = coeff0_0*dmats1[0][1] + coeff0_1*dmats1[1][1] + coeff0_2*dmats1[2][1] + coeff0_3*dmats1[3][1] + coeff0_4*dmats1[4][1] + coeff0_5*dmats1[5][1];
          new_coeff0_2 = coeff0_0*dmats1[0][2] + coeff0_1*dmats1[1][2] + coeff0_2*dmats1[2][2] + coeff0_3*dmats1[3][2] + coeff0_4*dmats1[4][2] + coeff0_5*dmats1[5][2];
          new_coeff0_3 = coeff0_0*dmats1[0][3] + coeff0_1*dmats1[1][3] + coeff0_2*dmats1[2][3] + coeff0_3*dmats1[3][3] + coeff0_4*dmats1[4][3] + coeff0_5*dmats1[5][3];
          new_coeff0_4 = coeff0_0*dmats1[0][4] + coeff0_1*dmats1[1][4] + coeff0_2*dmats1[2][4] + coeff0_3*dmats1[3][4] + coeff0_4*dmats1[4][4] + coeff0_5*dmats1[5][4];
          new_coeff0_5 = coeff0_0*dmats1[0][5] + coeff0_1*dmats1[1][5] + coeff0_2*dmats1[2][5] + coeff0_3*dmats1[3][5] + coeff0_4*dmats1[4][5] + coeff0_5*dmats1[5][5];
        }
    
      }
      // Compute derivatives on reference element as dot product of coefficients and basisvalues
      derivatives[deriv_num] = new_coeff0_0*basisvalue0 + new_coeff0_1*basisvalue1 + new_coeff0_2*basisvalue2 + new_coeff0_3*basisvalue3 + new_coeff0_4*basisvalue4 + new_coeff0_5*basisvalue5;
    }
    
    // Transform derivatives back to physical element
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        values[row] += transform[row][col]*derivatives[col];
      }
    }
    // Delete pointer to array of derivatives on FIAT element
    delete [] derivatives;
    
    // Delete pointer to array of combinations of derivatives and transform
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      delete [] combinations[row];
      delete [] transform[row];
    }
    
    delete [] combinations;
    delete [] transform;
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis_derivatives() is not yet implemented.");
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // The reference points, direction and weights:
    const static double X[6][1][2] = {{{0, 0}}, {{1, 0}}, {{0, 1}}, {{0.5, 0.5}}, {{0, 0.5}}, {{0.5, 0}}};
    const static double W[6][1] = {{1}, {1}, {1}, {1}, {1}, {1}};
    const static double D[6][1][1] = {{{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}};
    
    const double * const * x = c.coordinates;
    double result = 0.0;
    // Iterate over the points:
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0][0] - X[i][0][1];
    const double w1 = X[i][0][0];
    const double w2 = X[i][0][1];
    
    // Compute affine mapping y = F(X)
    double y[2];
    y[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0];
    y[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1];
    
    // Evaluate function at physical points
    double values[1];
    f.evaluate(values, y, c);
    
    // Map function values using appropriate mapping
    // Affine map: Do nothing
    
    // Note that we do not map the weights (yet).
    
    // Take directional components
    for(int k = 0; k < 1; k++)
      result += values[k]*D[i][0][k];
    // Multiply by weights 
    result *= W[i][0];
    
    return result;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate at vertices and use affine mapping
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new biharmonic_1_finite_element_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class biharmonic_1_dof_map_0: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  biharmonic_1_dof_map_0() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~biharmonic_1_dof_map_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for FiniteElement('Lagrange', 'triangle', 2)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return true;
      break;
    case 2:
      return false;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = m.num_entities[0] + m.num_entities[1];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 6;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 6;
  }

  // Return the geometric dimension of the coordinates this dof map provides
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 3;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    unsigned int offset = m.num_entities[0];
    dofs[3] = offset + c.entity_indices[1][0];
    dofs[4] = offset + c.entity_indices[1][1];
    dofs[5] = offset + c.entity_indices[1][2];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 4;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 5;
      break;
    }
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[3][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[3][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[4][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[4][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[5][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[5][1] = 0.5*x[0][1] + 0.5*x[1][1];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new biharmonic_1_dof_map_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class biharmonic_1_dof_map_1: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  biharmonic_1_dof_map_1() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~biharmonic_1_dof_map_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for FiniteElement('Lagrange', 'triangle', 2)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return true;
      break;
    case 2:
      return false;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = m.num_entities[0] + m.num_entities[1];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 6;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 6;
  }

  // Return the geometric dimension of the coordinates this dof map provides
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 3;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    unsigned int offset = m.num_entities[0];
    dofs[3] = offset + c.entity_indices[1][0];
    dofs[4] = offset + c.entity_indices[1][1];
    dofs[5] = offset + c.entity_indices[1][2];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 4;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 5;
      break;
    }
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[3][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[3][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[4][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[4][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[5][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[5][1] = 0.5*x[0][1] + 0.5*x[1][1];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new biharmonic_1_dof_map_1();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class biharmonic_1_cell_integral_0_quadrature: public ufc::cell_integral
{
public:

  /// Constructor
  biharmonic_1_cell_integral_0_quadrature() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~biharmonic_1_cell_integral_0_quadrature()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
      
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
      
    // Compute inverse of Jacobian
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    
    // Array of quadrature weights
    const static double W9[9] = {0.0558144204830443, 0.063678085099885, 0.0193963833059595, 0.0893030727728709, 0.101884936159816, 0.0310342132895351, 0.0558144204830443, 0.063678085099885, 0.0193963833059595};
    // Quadrature points on the UFC reference element: (0.102717654809626, 0.088587959512704), (0.0665540678391645, 0.409466864440735), (0.0239311322870806, 0.787659461760847), (0.455706020243648, 0.088587959512704), (0.295266567779633, 0.409466864440735), (0.106170269119576, 0.787659461760847), (0.80869438567767, 0.088587959512704), (0.523979067720101, 0.409466864440735), (0.188409405952072, 0.787659461760847)
    
    // Value of basis functions at quadrature points.
    const static double FE0[9][6] = \
    {{0.499278833175498, -0.0816158215904472, -0.072892306371455, 0.0363981897820602, 0.286562341986258, 0.332268763018086},
    {0.0251290590975512, -0.0576951799472842, -0.0741406382908807, 0.109006741895514, 0.858208263567716, 0.139491753677383},
    {-0.117413197449647, -0.022785734101997, 0.453155393641927, 0.0753983311062781, 0.593609805131561, 0.0180354016718772},
    {-0.0403700664710398, -0.0403700664710398, -0.072892306371455, 0.161480265884159, 0.161480265884159, 0.830671907545217},
    {-0.120901875682904, -0.120901875682904, -0.0741406382908807, 0.483607502731615, 0.483607502731615, 0.348729384193458},
    {-0.0836260170297299, -0.0836260170297299, 0.453155393641927, 0.33450406811892, 0.33450406811892, 0.0450885041796932},
    {-0.0816158215904472, 0.499278833175498, -0.072892306371455, 0.286562341986258, 0.0363981897820602, 0.332268763018086},
    {-0.0576951799472843, 0.0251290590975511, -0.0741406382908807, 0.858208263567716, 0.109006741895515, 0.139491753677383},
    {-0.0227857341019972, -0.117413197449647, 0.453155393641927, 0.593609805131561, 0.0753983311062783, 0.0180354016718773}};
    
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('simplify expressions', False), ('ignore zero tables', False), ('non zero columns', False), ('remove zero terms', False), ('ignore ones', False)
    // Total number of operations to compute element tensor: 324
    
    // Loop quadrature points for integral
    // Number of operations to compute element tensor for following IP loop = 324
    for (unsigned int ip = 0; ip < 9; ip++)
    {
      
      // Function declarations
      double F0 = 0;
      
      // Total number of operations to compute function values = 12
      for (unsigned int r = 0; r < 6; r++)
      {
        F0 += FE0[ip][r]*w[0][r];
      }// end loop over 'r'
      
      // Number of operations for primary indices = 24
      for (unsigned int j = 0; j < 6; j++)
      {
        // Number of operations to compute entry = 4
        A[j] += FE0[ip][j]*F0*W9[ip]*det;
      }// end loop over 'j'
    }// end loop over 'ip'
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class biharmonic_1_cell_integral_0: public ufc::cell_integral
{
private:

  biharmonic_1_cell_integral_0_quadrature integral_0_quadrature;

public:

  /// Constructor
  biharmonic_1_cell_integral_0() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~biharmonic_1_cell_integral_0()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Reset values of the element tensor block
    A[0] = 0;
    A[1] = 0;
    A[2] = 0;
    A[3] = 0;
    A[4] = 0;
    A[5] = 0;
    
    // Add all contributions to element tensor
    integral_0_quadrature.tabulate_tensor(A, w, c);
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class biharmonic_form_1: public ufc::form
{
public:

  /// Constructor
  biharmonic_form_1() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~biharmonic_form_1()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "Form([Integral(Product(BasisFunction(FiniteElement('Lagrange', Cell('triangle', 1, Space(2)), 2), 0), Function(FiniteElement('Lagrange', Cell('triangle', 1, Space(2)), 2), 0)), Measure('cell', 0, None))])";
  }

  /// Return the rank of the global tensor (r)
  virtual unsigned int rank() const
  {
    return 1;
  }

  /// Return the number of coefficients (n)
  virtual unsigned int num_coefficients() const
  {
    return 1;
  }

  /// Return the number of cell integrals
  virtual unsigned int num_cell_integrals() const
  {
    return 1;
  }
  
  /// Return the number of exterior facet integrals
  virtual unsigned int num_exterior_facet_integrals() const
  {
    return 0;
  }
  
  /// Return the number of interior facet integrals
  virtual unsigned int num_interior_facet_integrals() const
  {
    return 0;
  }
    
  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new biharmonic_1_finite_element_0();
      break;
    case 1:
      return new biharmonic_1_finite_element_1();
      break;
    }
    return 0;
  }
  
  /// Create a new dof map for argument function i
  virtual ufc::dof_map* create_dof_map(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new biharmonic_1_dof_map_0();
      break;
    case 1:
      return new biharmonic_1_dof_map_1();
      break;
    }
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(unsigned int i) const
  {
    return new biharmonic_1_cell_integral_0();
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(unsigned int i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(unsigned int i) const
  {
    return 0;
  }

};

// DOLFIN wrappers

// Standard library includes
#include <string>

// DOLFIN includes
#include <dolfin/common/NoDeleter.h>
#include <dolfin/fem/FiniteElement.h>
#include <dolfin/fem/DofMap.h>
#include <dolfin/fem/Form.h>
#include <dolfin/function/FunctionSpace.h>
#include <dolfin/function/Function.h>
#include <dolfin/function/Coefficient.h>

namespace Biharmonic
{

class CoefficientReference
{
public:
  
  CoefficientReference(const std::string & name):
    _name(name)
  {}
  
  ~CoefficientReference()
  {}

  CoefficientReference& operator=(dolfin::Function & f)
  {
    _function_pointer = dolfin::reference_to_no_delete_pointer(f);
    return *this;
  }
  
  CoefficientReference& operator=(const boost::shared_ptr<dolfin::Function> f)
  {
    _function_pointer = f;
    return *this;
  }

  std::string name() const
  {
    return _name;
  }

  dolfin::Function & function() const
  {
    return *_function_pointer;
  }

  boost::shared_ptr<dolfin::Function> function_pointer() const
  {
    return _function_pointer;
  }

private:

  boost::shared_ptr<dolfin::Function> _function_pointer;
  std::string _name;

};

class CoefficientSet
{
public:

  CoefficientSet():
    alpha("alpha"), f("f"), h("h"), n("n")
  {}
  
  ~CoefficientSet()
  {}

  dolfin::uint num_coefficients() const
  {
    return 4;
  }

  std::string name(dolfin::uint i) const
  {
    switch(i)
    {
    case 0: return "alpha";
    case 1: return "f";
    case 2: return "h";
    case 3: return "n";
    default:
        throw std::runtime_error("Invalid coefficient number.");
    }
  }

  void disp() const
  {
    for(dolfin::uint i = 0; i < num_coefficients(); ++i)
    {
        dolfin::cout << "Coefficient " << i << ": \t" << name(i) << dolfin::endl;
    }
  }

  CoefficientReference alpha;
  CoefficientReference f;
  CoefficientReference h;
  CoefficientReference n;
};

class CoefficientSpace_alpha: public dolfin::FunctionSpace
{
public:


  CoefficientSpace_alpha(const dolfin::Mesh & mesh):
      dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new biharmonic_0_finite_element_4()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new biharmonic_0_dof_map_4()), dolfin::reference_to_no_delete_pointer(mesh))))
  {
    // Do nothing
  }

  CoefficientSpace_alpha(dolfin::Mesh & mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new biharmonic_0_finite_element_4()))),
                          boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new biharmonic_0_dof_map_4()), dolfin::reference_to_no_delete_pointer(mesh))))
  {
    // Do nothing
  }

  CoefficientSpace_alpha(boost::shared_ptr<dolfin::Mesh> mesh):
      dolfin::FunctionSpace(mesh,
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new biharmonic_0_finite_element_4()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new biharmonic_0_dof_map_4()), mesh)))
  {
      // Do nothing
  }

  CoefficientSpace_alpha(boost::shared_ptr<const dolfin::Mesh> mesh):
      dolfin::FunctionSpace(mesh,
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new biharmonic_0_finite_element_4()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new biharmonic_0_dof_map_4()), mesh)))
  {
      // Do nothing
  }
 

  ~CoefficientSpace_alpha()
  {
  }
  
};

class CoefficientSpace_f: public dolfin::FunctionSpace
{
public:


  CoefficientSpace_f(const dolfin::Mesh & mesh):
      dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new biharmonic_1_finite_element_1()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new biharmonic_1_dof_map_1()), dolfin::reference_to_no_delete_pointer(mesh))))
  {
    // Do nothing
  }

  CoefficientSpace_f(dolfin::Mesh & mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new biharmonic_1_finite_element_1()))),
                          boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new biharmonic_1_dof_map_1()), dolfin::reference_to_no_delete_pointer(mesh))))
  {
    // Do nothing
  }

  CoefficientSpace_f(boost::shared_ptr<dolfin::Mesh> mesh):
      dolfin::FunctionSpace(mesh,
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new biharmonic_1_finite_element_1()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new biharmonic_1_dof_map_1()), mesh)))
  {
      // Do nothing
  }

  CoefficientSpace_f(boost::shared_ptr<const dolfin::Mesh> mesh):
      dolfin::FunctionSpace(mesh,
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new biharmonic_1_finite_element_1()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new biharmonic_1_dof_map_1()), mesh)))
  {
      // Do nothing
  }
 

  ~CoefficientSpace_f()
  {
  }
  
};

class CoefficientSpace_h: public dolfin::FunctionSpace
{
public:


  CoefficientSpace_h(const dolfin::Mesh & mesh):
      dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new biharmonic_0_finite_element_3()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new biharmonic_0_dof_map_3()), dolfin::reference_to_no_delete_pointer(mesh))))
  {
    // Do nothing
  }

  CoefficientSpace_h(dolfin::Mesh & mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new biharmonic_0_finite_element_3()))),
                          boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new biharmonic_0_dof_map_3()), dolfin::reference_to_no_delete_pointer(mesh))))
  {
    // Do nothing
  }

  CoefficientSpace_h(boost::shared_ptr<dolfin::Mesh> mesh):
      dolfin::FunctionSpace(mesh,
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new biharmonic_0_finite_element_3()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new biharmonic_0_dof_map_3()), mesh)))
  {
      // Do nothing
  }

  CoefficientSpace_h(boost::shared_ptr<const dolfin::Mesh> mesh):
      dolfin::FunctionSpace(mesh,
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new biharmonic_0_finite_element_3()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new biharmonic_0_dof_map_3()), mesh)))
  {
      // Do nothing
  }
 

  ~CoefficientSpace_h()
  {
  }
  
};

class CoefficientSpace_n: public dolfin::FunctionSpace
{
public:


  CoefficientSpace_n(const dolfin::Mesh & mesh):
      dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new biharmonic_0_finite_element_2()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new biharmonic_0_dof_map_2()), dolfin::reference_to_no_delete_pointer(mesh))))
  {
    // Do nothing
  }

  CoefficientSpace_n(dolfin::Mesh & mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new biharmonic_0_finite_element_2()))),
                          boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new biharmonic_0_dof_map_2()), dolfin::reference_to_no_delete_pointer(mesh))))
  {
    // Do nothing
  }

  CoefficientSpace_n(boost::shared_ptr<dolfin::Mesh> mesh):
      dolfin::FunctionSpace(mesh,
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new biharmonic_0_finite_element_2()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new biharmonic_0_dof_map_2()), mesh)))
  {
      // Do nothing
  }

  CoefficientSpace_n(boost::shared_ptr<const dolfin::Mesh> mesh):
      dolfin::FunctionSpace(mesh,
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new biharmonic_0_finite_element_2()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new biharmonic_0_dof_map_2()), mesh)))
  {
      // Do nothing
  }
 

  ~CoefficientSpace_n()
  {
  }
  
};

class Form_0_FunctionSpace_0: public dolfin::FunctionSpace
{
public:


  Form_0_FunctionSpace_0(const dolfin::Mesh & mesh):
      dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new biharmonic_0_finite_element_0()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new biharmonic_0_dof_map_0()), dolfin::reference_to_no_delete_pointer(mesh))))
  {
    // Do nothing
  }

  Form_0_FunctionSpace_0(dolfin::Mesh & mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new biharmonic_0_finite_element_0()))),
                          boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new biharmonic_0_dof_map_0()), dolfin::reference_to_no_delete_pointer(mesh))))
  {
    // Do nothing
  }

  Form_0_FunctionSpace_0(boost::shared_ptr<dolfin::Mesh> mesh):
      dolfin::FunctionSpace(mesh,
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new biharmonic_0_finite_element_0()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new biharmonic_0_dof_map_0()), mesh)))
  {
      // Do nothing
  }

  Form_0_FunctionSpace_0(boost::shared_ptr<const dolfin::Mesh> mesh):
      dolfin::FunctionSpace(mesh,
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new biharmonic_0_finite_element_0()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new biharmonic_0_dof_map_0()), mesh)))
  {
      // Do nothing
  }
 

  ~Form_0_FunctionSpace_0()
  {
  }
  
};

class Form_0_FunctionSpace_1: public dolfin::FunctionSpace
{
public:


  Form_0_FunctionSpace_1(const dolfin::Mesh & mesh):
      dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new biharmonic_0_finite_element_1()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new biharmonic_0_dof_map_1()), dolfin::reference_to_no_delete_pointer(mesh))))
  {
    // Do nothing
  }

  Form_0_FunctionSpace_1(dolfin::Mesh & mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new biharmonic_0_finite_element_1()))),
                          boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new biharmonic_0_dof_map_1()), dolfin::reference_to_no_delete_pointer(mesh))))
  {
    // Do nothing
  }

  Form_0_FunctionSpace_1(boost::shared_ptr<dolfin::Mesh> mesh):
      dolfin::FunctionSpace(mesh,
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new biharmonic_0_finite_element_1()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new biharmonic_0_dof_map_1()), mesh)))
  {
      // Do nothing
  }

  Form_0_FunctionSpace_1(boost::shared_ptr<const dolfin::Mesh> mesh):
      dolfin::FunctionSpace(mesh,
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new biharmonic_0_finite_element_1()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new biharmonic_0_dof_map_1()), mesh)))
  {
      // Do nothing
  }
 

  ~Form_0_FunctionSpace_1()
  {
  }
  
};

typedef CoefficientSpace_n Form_0_FunctionSpace_2;

typedef CoefficientSpace_h Form_0_FunctionSpace_3;

typedef CoefficientSpace_alpha Form_0_FunctionSpace_4;

class Form_0_Coefficient_n: public dolfin::Coefficient
{
public:

  Form_0_Coefficient_n(dolfin::Form & form):
    dolfin::Coefficient(form)
  {}
  
  ~Form_0_Coefficient_n()
  {}

  const Form_0_Coefficient_n& operator=(dolfin::Function & f)
  {
    attach(f);
    return *this;
  }
  
  const Form_0_Coefficient_n& operator=(boost::shared_ptr<dolfin::Function> f)
  {
    attach(f);
    return *this;
  }
  
  const dolfin::FunctionSpace * create_function_space() const
  {
    return new Form_0_FunctionSpace_2(form.mesh());
  }
  
  dolfin::uint number() const
  {
    return 0;
  }

  std::string name() const
  {
    return "n";
  }

};

class Form_0_Coefficient_h: public dolfin::Coefficient
{
public:

  Form_0_Coefficient_h(dolfin::Form & form):
    dolfin::Coefficient(form)
  {}
  
  ~Form_0_Coefficient_h()
  {}

  const Form_0_Coefficient_h& operator=(dolfin::Function & f)
  {
    attach(f);
    return *this;
  }
  
  const Form_0_Coefficient_h& operator=(boost::shared_ptr<dolfin::Function> f)
  {
    attach(f);
    return *this;
  }
  
  const dolfin::FunctionSpace * create_function_space() const
  {
    return new Form_0_FunctionSpace_3(form.mesh());
  }
  
  dolfin::uint number() const
  {
    return 1;
  }

  std::string name() const
  {
    return "h";
  }

};

class Form_0_Coefficient_alpha: public dolfin::Coefficient
{
public:

  Form_0_Coefficient_alpha(dolfin::Form & form):
    dolfin::Coefficient(form)
  {}
  
  ~Form_0_Coefficient_alpha()
  {}

  const Form_0_Coefficient_alpha& operator=(dolfin::Function & f)
  {
    attach(f);
    return *this;
  }
  
  const Form_0_Coefficient_alpha& operator=(boost::shared_ptr<dolfin::Function> f)
  {
    attach(f);
    return *this;
  }
  
  const dolfin::FunctionSpace * create_function_space() const
  {
    return new Form_0_FunctionSpace_4(form.mesh());
  }
  
  dolfin::uint number() const
  {
    return 2;
  }

  std::string name() const
  {
    return "alpha";
  }

};

class Form_0: public dolfin::Form
{
public:

  // Constructor
  Form_0(const dolfin::FunctionSpace & _V0, const dolfin::FunctionSpace & _V1):
    dolfin::Form(2, 3), n(*this), h(*this), alpha(*this)
  {
    boost::shared_ptr<const dolfin::FunctionSpace> _pV0 = dolfin::reference_to_no_delete_pointer(_V0);
    boost::shared_ptr<const dolfin::FunctionSpace> _pV1 = dolfin::reference_to_no_delete_pointer(_V1);

    _function_spaces[0] = _pV0;
    _function_spaces[1] = _pV1;

    _ufc_form = boost::shared_ptr<const ufc::form>(new biharmonic_form_0());
  }

  // Constructor
  Form_0(const dolfin::FunctionSpace & _V0, const dolfin::FunctionSpace & _V1, const CoefficientSet & coefficients):
    dolfin::Form(2, 3), n(*this), h(*this), alpha(*this)
  {
    boost::shared_ptr<const dolfin::FunctionSpace> _pV0 = dolfin::reference_to_no_delete_pointer(_V0);
    boost::shared_ptr<const dolfin::FunctionSpace> _pV1 = dolfin::reference_to_no_delete_pointer(_V1);

    _function_spaces[0] = _pV0;
    _function_spaces[1] = _pV1;

    update_coefficients(coefficients);

    _ufc_form = boost::shared_ptr<const ufc::form>(new biharmonic_form_0());
  }

  // Constructor
  Form_0(const dolfin::FunctionSpace & _V0, const dolfin::FunctionSpace & _V1, dolfin::Function & _n, dolfin::Function & _h, dolfin::Function & _alpha):
    dolfin::Form(2, 3), n(*this), h(*this), alpha(*this)
  {
    boost::shared_ptr<const dolfin::FunctionSpace> _pV0 = dolfin::reference_to_no_delete_pointer(_V0);
    boost::shared_ptr<const dolfin::FunctionSpace> _pV1 = dolfin::reference_to_no_delete_pointer(_V1);

    _function_spaces[0] = _pV0;
    _function_spaces[1] = _pV1;

    boost::shared_ptr<dolfin::Function> _pn = dolfin::reference_to_no_delete_pointer(_n);
    boost::shared_ptr<dolfin::Function> _ph = dolfin::reference_to_no_delete_pointer(_h);
    boost::shared_ptr<dolfin::Function> _palpha = dolfin::reference_to_no_delete_pointer(_alpha);

    n = _pn;
    h = _ph;
    alpha = _palpha;

    _ufc_form = boost::shared_ptr<const ufc::form>(new biharmonic_form_0());
  }

  // Constructor
  Form_0(const dolfin::FunctionSpace & _V0, const dolfin::FunctionSpace & _V1, boost::shared_ptr<dolfin::Function> _pn, boost::shared_ptr<dolfin::Function> _ph, boost::shared_ptr<dolfin::Function> _palpha):
    dolfin::Form(2, 3), n(*this), h(*this), alpha(*this)
  {
    boost::shared_ptr<const dolfin::FunctionSpace> _pV0 = dolfin::reference_to_no_delete_pointer(_V0);
    boost::shared_ptr<const dolfin::FunctionSpace> _pV1 = dolfin::reference_to_no_delete_pointer(_V1);

    _function_spaces[0] = _pV0;
    _function_spaces[1] = _pV1;

    n = _pn;
    h = _ph;
    alpha = _palpha;

    _ufc_form = boost::shared_ptr<const ufc::form>(new biharmonic_form_0());
  }

  // Constructor
  Form_0(boost::shared_ptr<const dolfin::FunctionSpace> _pV0, boost::shared_ptr<const dolfin::FunctionSpace> _pV1):
    dolfin::Form(2, 3), n(*this), h(*this), alpha(*this)
  {
    _function_spaces[0] = _pV0;
    _function_spaces[1] = _pV1;

    _ufc_form = boost::shared_ptr<const ufc::form>(new biharmonic_form_0());
  }

  // Constructor
  Form_0(boost::shared_ptr<const dolfin::FunctionSpace> _pV0, boost::shared_ptr<const dolfin::FunctionSpace> _pV1, const CoefficientSet & coefficients):
    dolfin::Form(2, 3), n(*this), h(*this), alpha(*this)
  {
    _function_spaces[0] = _pV0;
    _function_spaces[1] = _pV1;

    update_coefficients(coefficients);

    _ufc_form = boost::shared_ptr<const ufc::form>(new biharmonic_form_0());
  }

  // Constructor
  Form_0(boost::shared_ptr<const dolfin::FunctionSpace> _pV0, boost::shared_ptr<const dolfin::FunctionSpace> _pV1, dolfin::Function & _n, dolfin::Function & _h, dolfin::Function & _alpha):
    dolfin::Form(2, 3), n(*this), h(*this), alpha(*this)
  {
    _function_spaces[0] = _pV0;
    _function_spaces[1] = _pV1;

    boost::shared_ptr<dolfin::Function> _pn = dolfin::reference_to_no_delete_pointer(_n);
    boost::shared_ptr<dolfin::Function> _ph = dolfin::reference_to_no_delete_pointer(_h);
    boost::shared_ptr<dolfin::Function> _palpha = dolfin::reference_to_no_delete_pointer(_alpha);

    n = _pn;
    h = _ph;
    alpha = _palpha;

    _ufc_form = boost::shared_ptr<const ufc::form>(new biharmonic_form_0());
  }

  // Constructor
  Form_0(boost::shared_ptr<const dolfin::FunctionSpace> _pV0, boost::shared_ptr<const dolfin::FunctionSpace> _pV1, boost::shared_ptr<dolfin::Function> _pn, boost::shared_ptr<dolfin::Function> _ph, boost::shared_ptr<dolfin::Function> _palpha):
    dolfin::Form(2, 3), n(*this), h(*this), alpha(*this)
  {
    _function_spaces[0] = _pV0;
    _function_spaces[1] = _pV1;

    n = _pn;
    h = _ph;
    alpha = _palpha;

    _ufc_form = boost::shared_ptr<const ufc::form>(new biharmonic_form_0());
  }

  // Destructor
  ~Form_0()
  {}

  void update_coefficients(const CoefficientSet & coefficients)
  {
    n = coefficients.n.function_pointer();
    h = coefficients.h.function_pointer();
    alpha = coefficients.alpha.function_pointer();
  }

  /// Return the number of the coefficient with this name
  virtual dolfin::uint coefficient_number(const std::string & name) const
  {
    if(name == "n") return 0;
    else if(name == "h") return 1;
    else if(name == "alpha") return 2;
    dolfin::error("Invalid coefficient.");
    return 0;
  }
  
  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(dolfin::uint i) const
  {
    switch(i)
    {
      case 0: return "n";
      case 1: return "h";
      case 2: return "alpha";
    }
    dolfin::error("Invalid coefficient.");
    return "unnamed";
  }

  // Typedefs
  typedef Form_0_FunctionSpace_0 TestSpace;
  typedef Form_0_FunctionSpace_1 TrialSpace;
  typedef Form_0_FunctionSpace_2 CoefficientSpace_n;
  typedef Form_0_FunctionSpace_3 CoefficientSpace_h;
  typedef Form_0_FunctionSpace_4 CoefficientSpace_alpha;

  // Coefficients
  Form_0_Coefficient_n n;
  Form_0_Coefficient_h h;
  Form_0_Coefficient_alpha alpha;
};

class Form_1_FunctionSpace_0: public dolfin::FunctionSpace
{
public:


  Form_1_FunctionSpace_0(const dolfin::Mesh & mesh):
      dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new biharmonic_1_finite_element_0()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new biharmonic_1_dof_map_0()), dolfin::reference_to_no_delete_pointer(mesh))))
  {
    // Do nothing
  }

  Form_1_FunctionSpace_0(dolfin::Mesh & mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new biharmonic_1_finite_element_0()))),
                          boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new biharmonic_1_dof_map_0()), dolfin::reference_to_no_delete_pointer(mesh))))
  {
    // Do nothing
  }

  Form_1_FunctionSpace_0(boost::shared_ptr<dolfin::Mesh> mesh):
      dolfin::FunctionSpace(mesh,
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new biharmonic_1_finite_element_0()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new biharmonic_1_dof_map_0()), mesh)))
  {
      // Do nothing
  }

  Form_1_FunctionSpace_0(boost::shared_ptr<const dolfin::Mesh> mesh):
      dolfin::FunctionSpace(mesh,
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new biharmonic_1_finite_element_0()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new biharmonic_1_dof_map_0()), mesh)))
  {
      // Do nothing
  }
 

  ~Form_1_FunctionSpace_0()
  {
  }
  
};

typedef CoefficientSpace_f Form_1_FunctionSpace_1;

class Form_1_Coefficient_f: public dolfin::Coefficient
{
public:

  Form_1_Coefficient_f(dolfin::Form & form):
    dolfin::Coefficient(form)
  {}
  
  ~Form_1_Coefficient_f()
  {}

  const Form_1_Coefficient_f& operator=(dolfin::Function & f)
  {
    attach(f);
    return *this;
  }
  
  const Form_1_Coefficient_f& operator=(boost::shared_ptr<dolfin::Function> f)
  {
    attach(f);
    return *this;
  }
  
  const dolfin::FunctionSpace * create_function_space() const
  {
    return new Form_1_FunctionSpace_1(form.mesh());
  }
  
  dolfin::uint number() const
  {
    return 0;
  }

  std::string name() const
  {
    return "f";
  }

};

class Form_1: public dolfin::Form
{
public:

  // Constructor
  Form_1(const dolfin::FunctionSpace & _V0):
    dolfin::Form(1, 1), f(*this)
  {
    boost::shared_ptr<const dolfin::FunctionSpace> _pV0 = dolfin::reference_to_no_delete_pointer(_V0);

    _function_spaces[0] = _pV0;

    _ufc_form = boost::shared_ptr<const ufc::form>(new biharmonic_form_1());
  }

  // Constructor
  Form_1(const dolfin::FunctionSpace & _V0, const CoefficientSet & coefficients):
    dolfin::Form(1, 1), f(*this)
  {
    boost::shared_ptr<const dolfin::FunctionSpace> _pV0 = dolfin::reference_to_no_delete_pointer(_V0);

    _function_spaces[0] = _pV0;

    update_coefficients(coefficients);

    _ufc_form = boost::shared_ptr<const ufc::form>(new biharmonic_form_1());
  }

  // Constructor
  Form_1(const dolfin::FunctionSpace & _V0, dolfin::Function & _f):
    dolfin::Form(1, 1), f(*this)
  {
    boost::shared_ptr<const dolfin::FunctionSpace> _pV0 = dolfin::reference_to_no_delete_pointer(_V0);

    _function_spaces[0] = _pV0;

    boost::shared_ptr<dolfin::Function> _pf = dolfin::reference_to_no_delete_pointer(_f);

    f = _pf;

    _ufc_form = boost::shared_ptr<const ufc::form>(new biharmonic_form_1());
  }

  // Constructor
  Form_1(const dolfin::FunctionSpace & _V0, boost::shared_ptr<dolfin::Function> _pf):
    dolfin::Form(1, 1), f(*this)
  {
    boost::shared_ptr<const dolfin::FunctionSpace> _pV0 = dolfin::reference_to_no_delete_pointer(_V0);

    _function_spaces[0] = _pV0;

    f = _pf;

    _ufc_form = boost::shared_ptr<const ufc::form>(new biharmonic_form_1());
  }

  // Constructor
  Form_1(boost::shared_ptr<const dolfin::FunctionSpace> _pV0):
    dolfin::Form(1, 1), f(*this)
  {
    _function_spaces[0] = _pV0;

    _ufc_form = boost::shared_ptr<const ufc::form>(new biharmonic_form_1());
  }

  // Constructor
  Form_1(boost::shared_ptr<const dolfin::FunctionSpace> _pV0, const CoefficientSet & coefficients):
    dolfin::Form(1, 1), f(*this)
  {
    _function_spaces[0] = _pV0;

    update_coefficients(coefficients);

    _ufc_form = boost::shared_ptr<const ufc::form>(new biharmonic_form_1());
  }

  // Constructor
  Form_1(boost::shared_ptr<const dolfin::FunctionSpace> _pV0, dolfin::Function & _f):
    dolfin::Form(1, 1), f(*this)
  {
    _function_spaces[0] = _pV0;

    boost::shared_ptr<dolfin::Function> _pf = dolfin::reference_to_no_delete_pointer(_f);

    f = _pf;

    _ufc_form = boost::shared_ptr<const ufc::form>(new biharmonic_form_1());
  }

  // Constructor
  Form_1(boost::shared_ptr<const dolfin::FunctionSpace> _pV0, boost::shared_ptr<dolfin::Function> _pf):
    dolfin::Form(1, 1), f(*this)
  {
    _function_spaces[0] = _pV0;

    f = _pf;

    _ufc_form = boost::shared_ptr<const ufc::form>(new biharmonic_form_1());
  }

  // Destructor
  ~Form_1()
  {}

  void update_coefficients(const CoefficientSet & coefficients)
  {
    f = coefficients.f.function_pointer();
  }

  /// Return the number of the coefficient with this name
  virtual dolfin::uint coefficient_number(const std::string & name) const
  {
    if(name == "f") return 0;
    dolfin::error("Invalid coefficient.");
    return 0;
  }
  
  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(dolfin::uint i) const
  {
    switch(i)
    {
      case 0: return "f";
    }
    dolfin::error("Invalid coefficient.");
    return "unnamed";
  }

  // Typedefs
  typedef Form_1_FunctionSpace_0 TestSpace;
  typedef Form_1_FunctionSpace_1 CoefficientSpace_f;

  // Coefficients
  Form_1_Coefficient_f f;
};

// Class typedefs
typedef Form_0 BilinearForm;
typedef Form_1 LinearForm;
typedef Form_0::TestSpace FunctionSpace;

} // namespace Biharmonic

#endif
