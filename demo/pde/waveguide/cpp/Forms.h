// This code conforms with the UFC specification version 1.0
// and was automatically generated by FFC version 0.5.1.
//
// Warning: This code was generated with the option '-l dolfin'
// and contains DOLFIN-specific wrappers that depend on DOLFIN.

#ifndef __FORMS_H
#define __FORMS_H

#include <cmath>
#include <stdexcept>
#include <fstream>
#include <ufc.h>

/// This class defines the interface for a finite element.

class UFC_Forms_0_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  UFC_Forms_0_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Forms_0_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "Nedelec finite element of degree 3 on a triangle";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 15;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 2;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
      
    // Compute determinant of Jacobian
    const double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    const double Jinv_00 =  J_11 / detJ;
    const double Jinv_01 = -J_01 / detJ;
    const double Jinv_10 = -J_10 / detJ;
    const double Jinv_11 =  J_00 / detJ;
    
    // Get coordinates and map to the reference (UFC) element
    double x = (element_coordinates[0][1]*element_coordinates[2][0] -\
                element_coordinates[0][0]*element_coordinates[2][1] +\
                J_11*coordinates[0] - J_01*coordinates[1]) / detJ;
    double y = (element_coordinates[1][1]*element_coordinates[0][0] -\
                element_coordinates[1][0]*element_coordinates[0][1] -\
                J_10*coordinates[0] + J_00*coordinates[1]) / detJ;
    
    // Map coordinates to the reference square
    if (std::abs(y - 1.0) < 1e-14)
      x = -1.0;
    else
      x = 2.0 *x/(1.0 - y) - 1.0;
    y = 2.0*y - 1.0;
    
    // Reset values
    values[0] = 0;
    values[1] = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_3_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.707106781186548*psitilde_a_0*scalings_y_0*psitilde_bs_0_0;
    const double basisvalue1 = 1.73205080756888*psitilde_a_1*scalings_y_1*psitilde_bs_1_0;
    const double basisvalue2 = psitilde_a_0*scalings_y_0*psitilde_bs_0_1;
    const double basisvalue3 = 2.73861278752583*psitilde_a_2*scalings_y_2*psitilde_bs_2_0;
    const double basisvalue4 = 2.12132034355964*psitilde_a_1*scalings_y_1*psitilde_bs_1_1;
    const double basisvalue5 = 1.22474487139159*psitilde_a_0*scalings_y_0*psitilde_bs_0_2;
    const double basisvalue6 = 3.74165738677394*psitilde_a_3*scalings_y_3*psitilde_bs_3_0;
    const double basisvalue7 = 3.16227766016838*psitilde_a_2*scalings_y_2*psitilde_bs_2_1;
    const double basisvalue8 = 2.44948974278318*psitilde_a_1*scalings_y_1*psitilde_bs_1_2;
    const double basisvalue9 = 1.4142135623731*psitilde_a_0*scalings_y_0*psitilde_bs_0_3;
    
    // Table(s) of coefficients
    const static double coefficients0[15][10] = \
    {{0, 0, 0, -0.169533172561123, 0.0841793787126842, -0.116642368703961, 0, -0.146820034222103, 0.0729014804399755, -0.101015254455221},
    {0, 0, 0, 0.0782460796435954, -0.168358757425369, 0.349927106111883, 0, 0.0677630927178939, -0.145802960879951, 0.303045763365663},
    {0, 0, 0, -0.0391230398217977, -0.0841793787126844, -0.349927106111883, 0, -0.0338815463589469, -0.0729014804399756, -0.303045763365663},
    {0, 0, 0, 0.169533172561123, 0.0841793787126844, 0.116642368703961, 0, 0.146820034222103, 0.0729014804399755, 0.101015254455221},
    {0, 0, 0, -0.0782460796435954, -0.168358757425369, -0.349927106111883, 0, -0.0677630927178939, -0.145802960879951, -0.303045763365663},
    {0, 0, 0, 0.0391230398217979, -0.0841793787126841, 0.349927106111883, 0, 0.033881546358947, -0.0729014804399757, 0.303045763365663},
    {0, 0, 0, 0.382536389368688, 0.303045763365663, 0.311046316543896, 0, -0.090350790290525, -0.145802960879951, -0.202030508910442},
    {0, 0, 0, -0.765072778737375, 0, -0.155523158271948, 0, 0.18070158058105, 0, 0.101015254455221},
    {0, 0, 0, 0.382536389368687, -0.303045763365663, 0.311046316543896, 0, -0.0903507902905252, 0.145802960879951, -0.202030508910442},
    {2, 0, 0, -0.18442777839083, -0.238095238095238, -0.824786098842323, 0, -0.159719141249985, -0.206196524710581, 0.285714285714286},
    {0, 2, 0, -0.338815463589469, 0.903978357455696, 0, 0, -0.293422798663482, -0.631345340345132, 0},
    {0, 0, 2, 0.0652050663696631, -0.420896893563422, 0.466569474815844, 0, 0.0564692439315783, -0.364507402199878, -1.01015254455221},
    {0, 0, 0, 0, 0.476190476190477, 0, 0, 0, 0.412393049421162, 0},
    {0, 0, 0, 0.677630927178939, 0, 0, 0, 0.586845597326964, 0, 0},
    {0, 0, 0, 0, 0.841793787126843, 0, 0, 0, 0.729014804399756, 0}};
    
    const static double coefficients1[15][10] = \
    {{0, 0, 0, 0.321678327423669, -0.134687005940295, 0.0972019739199675, 0.260579710864614, -0.12987926104263, 0.0976879837895672, -0.0631345340345132},
    {0, 0, 0, -0.165186168136479, 0.235702260395516, -0.272165526975908, -0.120267558860591, 0.146820034222103, -0.224536559755125, 0.176776695296637},
    {0, 0, 0, 0.0608580619450185, 0, 0.213844342623928, 0.0601337794302954, 0.0395284707521046, 0.112268279877562, -0.138895974875929},
    {0, 0, 0, 0.491211499984792, 0.218866384652979, 0.213844342623928, -0.260579710864614, 0.0169407731794736, -0.0247865033495917, 0.0378807204207079},
    {0, 0, 0, -0.243432247780074, -0.404061017820885, -0.622092633087792, 0.120267558860591, 0.0790569415042092, 0.0787335988751736, -0.126269068069026},
    {0, 0, 0, 0.0999811017668161, -0.0841793787126841, 0.563771448735811, -0.0601337794302954, 0.0734100171110518, -0.185169760317538, 0.164149788489734},
    {0, 0, 0, 0.169533172561123, 0.0841793787126842, 0.116642368703961, 0.160356745147455, 0.0677630927178939, 0.0320766513935891, -0.0757614408414156},
    {0, 0, 0, -0.382536389368687, 0.0673435029701472, -0.077761579135974, -0.320713490294909, 0.090350790290525, -0.0641533027871784, 0.0505076272276105},
    {0, 0, 0, 0.213003216807564, -0.218866384652979, 0.194403947839935, 0.160356745147454, -0.158113883008419, 0.17787961227354, -0.126269068069026},
    {0, 0, 0, 0.307379630651382, 0.238095238095238, -0.274928699614108, 0.283473354756921, 0.0798595706249923, -0.226816177181638, 0.178571428571429},
    {0, 0, 0, 0.527046276694729, 0.583211843519804, -0.168358757425368, 0.52077380612206, 0.342326598440728, -0.290418856558761, 0.109352220659964},
    {0, 0, 0, -0.173880176985767, 0.168358757425369, 0.680413817439771, -0.100222965717159, 0.31058084162368, 0.298896069803899, -0.441941738241592},
    {2, 0, 0, -0.799187039693594, 0.238095238095239, -0.274928699614108, 0, -0.31943828249997, 0.206196524710581, -0.0714285714285716},
    {0, 2, 0, 0.33881546358947, -0.262445329583911, 0, -1.04154761224412, 0.293422798663482, -0.0505076272276108, 0},
    {0, 0, 2, 0.412965420341197, 0.420896893563421, -0.894258160063699, 0, -0.564692439315782, 0.364507402199878, -0.126269068069027}};
    
    // Extract relevant coefficients
    const double coeff0_0 = coefficients0[dof][0];
    const double coeff0_1 = coefficients0[dof][1];
    const double coeff0_2 = coefficients0[dof][2];
    const double coeff0_3 = coefficients0[dof][3];
    const double coeff0_4 = coefficients0[dof][4];
    const double coeff0_5 = coefficients0[dof][5];
    const double coeff0_6 = coefficients0[dof][6];
    const double coeff0_7 = coefficients0[dof][7];
    const double coeff0_8 = coefficients0[dof][8];
    const double coeff0_9 = coefficients0[dof][9];
    const double coeff1_0 = coefficients1[dof][0];
    const double coeff1_1 = coefficients1[dof][1];
    const double coeff1_2 = coefficients1[dof][2];
    const double coeff1_3 = coefficients1[dof][3];
    const double coeff1_4 = coefficients1[dof][4];
    const double coeff1_5 = coefficients1[dof][5];
    const double coeff1_6 = coefficients1[dof][6];
    const double coeff1_7 = coefficients1[dof][7];
    const double coeff1_8 = coefficients1[dof][8];
    const double coeff1_9 = coefficients1[dof][9];
    
    // Compute value(s)
    const double tmp0_0 = coeff0_0*basisvalue0 + coeff0_1*basisvalue1 + coeff0_2*basisvalue2 + coeff0_3*basisvalue3 + coeff0_4*basisvalue4 + coeff0_5*basisvalue5 + coeff0_6*basisvalue6 + coeff0_7*basisvalue7 + coeff0_8*basisvalue8 + coeff0_9*basisvalue9;
    const double tmp0_1 = coeff1_0*basisvalue0 + coeff1_1*basisvalue1 + coeff1_2*basisvalue2 + coeff1_3*basisvalue3 + coeff1_4*basisvalue4 + coeff1_5*basisvalue5 + coeff1_6*basisvalue6 + coeff1_7*basisvalue7 + coeff1_8*basisvalue8 + coeff1_9*basisvalue9;
    // Using covariant Piola transform to map values back to the physical element
    values[0] = (Jinv_00*tmp0_0 + Jinv_10*tmp0_1);
    values[1] = (Jinv_01*tmp0_0 + Jinv_11*tmp0_1);
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis() is not yet implemented.");
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
      
    // Compute determinant of Jacobian
    const double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    const double Jinv_00 =  J_11 / detJ;
    const double Jinv_01 = -J_01 / detJ;
    const double Jinv_10 = -J_10 / detJ;
    const double Jinv_11 =  J_00 / detJ;
    
    // Get coordinates and map to the reference (UFC) element
    double x = (element_coordinates[0][1]*element_coordinates[2][0] -\
                element_coordinates[0][0]*element_coordinates[2][1] +\
                J_11*coordinates[0] - J_01*coordinates[1]) / detJ;
    double y = (element_coordinates[1][1]*element_coordinates[0][0] -\
                element_coordinates[1][0]*element_coordinates[0][1] -\
                J_10*coordinates[0] + J_00*coordinates[1]) / detJ;
    
    // Map coordinates to the reference square
    if (std::abs(y - 1.0) < 1e-14)
      x = -1.0;
    else
      x = 2.0 *x/(1.0 - y) - 1.0;
    y = 2.0*y - 1.0;
    
    // Compute number of derivatives
    unsigned int num_derivatives = 1;
    
    for (unsigned int j = 0; j < n; j++)
      num_derivatives *= 2;
    
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      combinations[j] = new unsigned int [n];
      for (unsigned int k = 0; k < n; k++)
        combinations[j][k] = 0;
    }
        
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] =  {{J_11 / detJ, -J_01 / detJ}, {-J_10 / detJ, J_00 / detJ}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values
    for (unsigned int j = 0; j < 2*num_derivatives; j++)
      values[j] = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_3_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.707106781186548*psitilde_a_0*scalings_y_0*psitilde_bs_0_0;
    const double basisvalue1 = 1.73205080756888*psitilde_a_1*scalings_y_1*psitilde_bs_1_0;
    const double basisvalue2 = psitilde_a_0*scalings_y_0*psitilde_bs_0_1;
    const double basisvalue3 = 2.73861278752583*psitilde_a_2*scalings_y_2*psitilde_bs_2_0;
    const double basisvalue4 = 2.12132034355964*psitilde_a_1*scalings_y_1*psitilde_bs_1_1;
    const double basisvalue5 = 1.22474487139159*psitilde_a_0*scalings_y_0*psitilde_bs_0_2;
    const double basisvalue6 = 3.74165738677394*psitilde_a_3*scalings_y_3*psitilde_bs_3_0;
    const double basisvalue7 = 3.16227766016838*psitilde_a_2*scalings_y_2*psitilde_bs_2_1;
    const double basisvalue8 = 2.44948974278318*psitilde_a_1*scalings_y_1*psitilde_bs_1_2;
    const double basisvalue9 = 1.4142135623731*psitilde_a_0*scalings_y_0*psitilde_bs_0_3;
    
    // Table(s) of coefficients
    const static double coefficients0[15][10] = \
    {{0, 0, 0, -0.169533172561123, 0.0841793787126842, -0.116642368703961, 0, -0.146820034222103, 0.0729014804399755, -0.101015254455221},
    {0, 0, 0, 0.0782460796435954, -0.168358757425369, 0.349927106111883, 0, 0.0677630927178939, -0.145802960879951, 0.303045763365663},
    {0, 0, 0, -0.0391230398217977, -0.0841793787126844, -0.349927106111883, 0, -0.0338815463589469, -0.0729014804399756, -0.303045763365663},
    {0, 0, 0, 0.169533172561123, 0.0841793787126844, 0.116642368703961, 0, 0.146820034222103, 0.0729014804399755, 0.101015254455221},
    {0, 0, 0, -0.0782460796435954, -0.168358757425369, -0.349927106111883, 0, -0.0677630927178939, -0.145802960879951, -0.303045763365663},
    {0, 0, 0, 0.0391230398217979, -0.0841793787126841, 0.349927106111883, 0, 0.033881546358947, -0.0729014804399757, 0.303045763365663},
    {0, 0, 0, 0.382536389368688, 0.303045763365663, 0.311046316543896, 0, -0.090350790290525, -0.145802960879951, -0.202030508910442},
    {0, 0, 0, -0.765072778737375, 0, -0.155523158271948, 0, 0.18070158058105, 0, 0.101015254455221},
    {0, 0, 0, 0.382536389368687, -0.303045763365663, 0.311046316543896, 0, -0.0903507902905252, 0.145802960879951, -0.202030508910442},
    {2, 0, 0, -0.18442777839083, -0.238095238095238, -0.824786098842323, 0, -0.159719141249985, -0.206196524710581, 0.285714285714286},
    {0, 2, 0, -0.338815463589469, 0.903978357455696, 0, 0, -0.293422798663482, -0.631345340345132, 0},
    {0, 0, 2, 0.0652050663696631, -0.420896893563422, 0.466569474815844, 0, 0.0564692439315783, -0.364507402199878, -1.01015254455221},
    {0, 0, 0, 0, 0.476190476190477, 0, 0, 0, 0.412393049421162, 0},
    {0, 0, 0, 0.677630927178939, 0, 0, 0, 0.586845597326964, 0, 0},
    {0, 0, 0, 0, 0.841793787126843, 0, 0, 0, 0.729014804399756, 0}};
    
    const static double coefficients1[15][10] = \
    {{0, 0, 0, 0.321678327423669, -0.134687005940295, 0.0972019739199675, 0.260579710864614, -0.12987926104263, 0.0976879837895672, -0.0631345340345132},
    {0, 0, 0, -0.165186168136479, 0.235702260395516, -0.272165526975908, -0.120267558860591, 0.146820034222103, -0.224536559755125, 0.176776695296637},
    {0, 0, 0, 0.0608580619450185, 0, 0.213844342623928, 0.0601337794302954, 0.0395284707521046, 0.112268279877562, -0.138895974875929},
    {0, 0, 0, 0.491211499984792, 0.218866384652979, 0.213844342623928, -0.260579710864614, 0.0169407731794736, -0.0247865033495917, 0.0378807204207079},
    {0, 0, 0, -0.243432247780074, -0.404061017820885, -0.622092633087792, 0.120267558860591, 0.0790569415042092, 0.0787335988751736, -0.126269068069026},
    {0, 0, 0, 0.0999811017668161, -0.0841793787126841, 0.563771448735811, -0.0601337794302954, 0.0734100171110518, -0.185169760317538, 0.164149788489734},
    {0, 0, 0, 0.169533172561123, 0.0841793787126842, 0.116642368703961, 0.160356745147455, 0.0677630927178939, 0.0320766513935891, -0.0757614408414156},
    {0, 0, 0, -0.382536389368687, 0.0673435029701472, -0.077761579135974, -0.320713490294909, 0.090350790290525, -0.0641533027871784, 0.0505076272276105},
    {0, 0, 0, 0.213003216807564, -0.218866384652979, 0.194403947839935, 0.160356745147454, -0.158113883008419, 0.17787961227354, -0.126269068069026},
    {0, 0, 0, 0.307379630651382, 0.238095238095238, -0.274928699614108, 0.283473354756921, 0.0798595706249923, -0.226816177181638, 0.178571428571429},
    {0, 0, 0, 0.527046276694729, 0.583211843519804, -0.168358757425368, 0.52077380612206, 0.342326598440728, -0.290418856558761, 0.109352220659964},
    {0, 0, 0, -0.173880176985767, 0.168358757425369, 0.680413817439771, -0.100222965717159, 0.31058084162368, 0.298896069803899, -0.441941738241592},
    {2, 0, 0, -0.799187039693594, 0.238095238095239, -0.274928699614108, 0, -0.31943828249997, 0.206196524710581, -0.0714285714285716},
    {0, 2, 0, 0.33881546358947, -0.262445329583911, 0, -1.04154761224412, 0.293422798663482, -0.0505076272276108, 0},
    {0, 0, 2, 0.412965420341197, 0.420896893563421, -0.894258160063699, 0, -0.564692439315782, 0.364507402199878, -0.126269068069027}};
    
    // Interesting (new) part
    // Tables of derivatives of the polynomial base (transpose)
    const static double dmats0[10][10] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.89897948556636, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 9.48683298050514, 0, 0, 0, 0, 0, 0, 0, 0},
    {4, 0, 7.07106781186548, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.29150262212918, 0, -2.99332590941915, 13.6626010212795, 0, 0.611010092660779, 0, 0, 0, 0},
    {0, 4.38178046004133, 0, 0, 12.5219806739988, 0, 0, 0, 0, 0},
    {3.46410161513775, 0, 7.83836717690617, 0, 0, 8.4, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    const static double dmats1[10][10] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.44948974278318, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.24264068711929, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.58198889747161, 4.74341649025257, -0.912870929175276, 0, 0, 0, 0, 0, 0, 0},
    {2, 6.12372435695795, 3.53553390593274, 0, 0, 0, 0, 0, 0, 0},
    {-2.3094010767585, 0, 8.16496580927726, 0, 0, 0, 0, 0, 0, 0},
    {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.305505046330391, 0, 0, 0, 0},
    {2.23606797749979, 2.19089023002067, 2.5298221281347, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0, 0, 0, 0},
    {1.73205080756888, -5.09116882454314, 3.91918358845309, 0, 9.69948452238571, 4.2, 0, 0, 0, 0},
    {5, 0, -2.82842712474619, 0, 0, 12.1243556529821, 0, 0, 0, 0}};
    
    // Compute reference derivatives
    // Declare pointer to array of derivatives on FIAT element
    double *derivatives = new double [2*num_derivatives];
    
    // Declare coefficients
    double coeff0_0 = 0;
    double coeff0_1 = 0;
    double coeff0_2 = 0;
    double coeff0_3 = 0;
    double coeff0_4 = 0;
    double coeff0_5 = 0;
    double coeff0_6 = 0;
    double coeff0_7 = 0;
    double coeff0_8 = 0;
    double coeff0_9 = 0;
    double coeff1_0 = 0;
    double coeff1_1 = 0;
    double coeff1_2 = 0;
    double coeff1_3 = 0;
    double coeff1_4 = 0;
    double coeff1_5 = 0;
    double coeff1_6 = 0;
    double coeff1_7 = 0;
    double coeff1_8 = 0;
    double coeff1_9 = 0;
    
    // Declare new coefficients
    double new_coeff0_0 = 0;
    double new_coeff0_1 = 0;
    double new_coeff0_2 = 0;
    double new_coeff0_3 = 0;
    double new_coeff0_4 = 0;
    double new_coeff0_5 = 0;
    double new_coeff0_6 = 0;
    double new_coeff0_7 = 0;
    double new_coeff0_8 = 0;
    double new_coeff0_9 = 0;
    double new_coeff1_0 = 0;
    double new_coeff1_1 = 0;
    double new_coeff1_2 = 0;
    double new_coeff1_3 = 0;
    double new_coeff1_4 = 0;
    double new_coeff1_5 = 0;
    double new_coeff1_6 = 0;
    double new_coeff1_7 = 0;
    double new_coeff1_8 = 0;
    double new_coeff1_9 = 0;
    
    // Loop possible derivatives
    for (unsigned int deriv_num = 0; deriv_num < num_derivatives; deriv_num++)
    {
      // Get values from coefficients array
      new_coeff0_0 = coefficients0[dof][0];
      new_coeff0_1 = coefficients0[dof][1];
      new_coeff0_2 = coefficients0[dof][2];
      new_coeff0_3 = coefficients0[dof][3];
      new_coeff0_4 = coefficients0[dof][4];
      new_coeff0_5 = coefficients0[dof][5];
      new_coeff0_6 = coefficients0[dof][6];
      new_coeff0_7 = coefficients0[dof][7];
      new_coeff0_8 = coefficients0[dof][8];
      new_coeff0_9 = coefficients0[dof][9];
      new_coeff1_0 = coefficients1[dof][0];
      new_coeff1_1 = coefficients1[dof][1];
      new_coeff1_2 = coefficients1[dof][2];
      new_coeff1_3 = coefficients1[dof][3];
      new_coeff1_4 = coefficients1[dof][4];
      new_coeff1_5 = coefficients1[dof][5];
      new_coeff1_6 = coefficients1[dof][6];
      new_coeff1_7 = coefficients1[dof][7];
      new_coeff1_8 = coefficients1[dof][8];
      new_coeff1_9 = coefficients1[dof][9];
    
      // Loop derivative order
      for (unsigned int j = 0; j < n; j++)
      {
        // Update old coefficients
        coeff0_0 = new_coeff0_0;
        coeff0_1 = new_coeff0_1;
        coeff0_2 = new_coeff0_2;
        coeff0_3 = new_coeff0_3;
        coeff0_4 = new_coeff0_4;
        coeff0_5 = new_coeff0_5;
        coeff0_6 = new_coeff0_6;
        coeff0_7 = new_coeff0_7;
        coeff0_8 = new_coeff0_8;
        coeff0_9 = new_coeff0_9;
        coeff1_0 = new_coeff1_0;
        coeff1_1 = new_coeff1_1;
        coeff1_2 = new_coeff1_2;
        coeff1_3 = new_coeff1_3;
        coeff1_4 = new_coeff1_4;
        coeff1_5 = new_coeff1_5;
        coeff1_6 = new_coeff1_6;
        coeff1_7 = new_coeff1_7;
        coeff1_8 = new_coeff1_8;
        coeff1_9 = new_coeff1_9;
    
        if(combinations[deriv_num][j] == 0)
        {
          new_coeff0_0 = coeff0_0*dmats0[0][0] + coeff0_1*dmats0[1][0] + coeff0_2*dmats0[2][0] + coeff0_3*dmats0[3][0] + coeff0_4*dmats0[4][0] + coeff0_5*dmats0[5][0] + coeff0_6*dmats0[6][0] + coeff0_7*dmats0[7][0] + coeff0_8*dmats0[8][0] + coeff0_9*dmats0[9][0];
          new_coeff0_1 = coeff0_0*dmats0[0][1] + coeff0_1*dmats0[1][1] + coeff0_2*dmats0[2][1] + coeff0_3*dmats0[3][1] + coeff0_4*dmats0[4][1] + coeff0_5*dmats0[5][1] + coeff0_6*dmats0[6][1] + coeff0_7*dmats0[7][1] + coeff0_8*dmats0[8][1] + coeff0_9*dmats0[9][1];
          new_coeff0_2 = coeff0_0*dmats0[0][2] + coeff0_1*dmats0[1][2] + coeff0_2*dmats0[2][2] + coeff0_3*dmats0[3][2] + coeff0_4*dmats0[4][2] + coeff0_5*dmats0[5][2] + coeff0_6*dmats0[6][2] + coeff0_7*dmats0[7][2] + coeff0_8*dmats0[8][2] + coeff0_9*dmats0[9][2];
          new_coeff0_3 = coeff0_0*dmats0[0][3] + coeff0_1*dmats0[1][3] + coeff0_2*dmats0[2][3] + coeff0_3*dmats0[3][3] + coeff0_4*dmats0[4][3] + coeff0_5*dmats0[5][3] + coeff0_6*dmats0[6][3] + coeff0_7*dmats0[7][3] + coeff0_8*dmats0[8][3] + coeff0_9*dmats0[9][3];
          new_coeff0_4 = coeff0_0*dmats0[0][4] + coeff0_1*dmats0[1][4] + coeff0_2*dmats0[2][4] + coeff0_3*dmats0[3][4] + coeff0_4*dmats0[4][4] + coeff0_5*dmats0[5][4] + coeff0_6*dmats0[6][4] + coeff0_7*dmats0[7][4] + coeff0_8*dmats0[8][4] + coeff0_9*dmats0[9][4];
          new_coeff0_5 = coeff0_0*dmats0[0][5] + coeff0_1*dmats0[1][5] + coeff0_2*dmats0[2][5] + coeff0_3*dmats0[3][5] + coeff0_4*dmats0[4][5] + coeff0_5*dmats0[5][5] + coeff0_6*dmats0[6][5] + coeff0_7*dmats0[7][5] + coeff0_8*dmats0[8][5] + coeff0_9*dmats0[9][5];
          new_coeff0_6 = coeff0_0*dmats0[0][6] + coeff0_1*dmats0[1][6] + coeff0_2*dmats0[2][6] + coeff0_3*dmats0[3][6] + coeff0_4*dmats0[4][6] + coeff0_5*dmats0[5][6] + coeff0_6*dmats0[6][6] + coeff0_7*dmats0[7][6] + coeff0_8*dmats0[8][6] + coeff0_9*dmats0[9][6];
          new_coeff0_7 = coeff0_0*dmats0[0][7] + coeff0_1*dmats0[1][7] + coeff0_2*dmats0[2][7] + coeff0_3*dmats0[3][7] + coeff0_4*dmats0[4][7] + coeff0_5*dmats0[5][7] + coeff0_6*dmats0[6][7] + coeff0_7*dmats0[7][7] + coeff0_8*dmats0[8][7] + coeff0_9*dmats0[9][7];
          new_coeff0_8 = coeff0_0*dmats0[0][8] + coeff0_1*dmats0[1][8] + coeff0_2*dmats0[2][8] + coeff0_3*dmats0[3][8] + coeff0_4*dmats0[4][8] + coeff0_5*dmats0[5][8] + coeff0_6*dmats0[6][8] + coeff0_7*dmats0[7][8] + coeff0_8*dmats0[8][8] + coeff0_9*dmats0[9][8];
          new_coeff0_9 = coeff0_0*dmats0[0][9] + coeff0_1*dmats0[1][9] + coeff0_2*dmats0[2][9] + coeff0_3*dmats0[3][9] + coeff0_4*dmats0[4][9] + coeff0_5*dmats0[5][9] + coeff0_6*dmats0[6][9] + coeff0_7*dmats0[7][9] + coeff0_8*dmats0[8][9] + coeff0_9*dmats0[9][9];
          new_coeff1_0 = coeff1_0*dmats0[0][0] + coeff1_1*dmats0[1][0] + coeff1_2*dmats0[2][0] + coeff1_3*dmats0[3][0] + coeff1_4*dmats0[4][0] + coeff1_5*dmats0[5][0] + coeff1_6*dmats0[6][0] + coeff1_7*dmats0[7][0] + coeff1_8*dmats0[8][0] + coeff1_9*dmats0[9][0];
          new_coeff1_1 = coeff1_0*dmats0[0][1] + coeff1_1*dmats0[1][1] + coeff1_2*dmats0[2][1] + coeff1_3*dmats0[3][1] + coeff1_4*dmats0[4][1] + coeff1_5*dmats0[5][1] + coeff1_6*dmats0[6][1] + coeff1_7*dmats0[7][1] + coeff1_8*dmats0[8][1] + coeff1_9*dmats0[9][1];
          new_coeff1_2 = coeff1_0*dmats0[0][2] + coeff1_1*dmats0[1][2] + coeff1_2*dmats0[2][2] + coeff1_3*dmats0[3][2] + coeff1_4*dmats0[4][2] + coeff1_5*dmats0[5][2] + coeff1_6*dmats0[6][2] + coeff1_7*dmats0[7][2] + coeff1_8*dmats0[8][2] + coeff1_9*dmats0[9][2];
          new_coeff1_3 = coeff1_0*dmats0[0][3] + coeff1_1*dmats0[1][3] + coeff1_2*dmats0[2][3] + coeff1_3*dmats0[3][3] + coeff1_4*dmats0[4][3] + coeff1_5*dmats0[5][3] + coeff1_6*dmats0[6][3] + coeff1_7*dmats0[7][3] + coeff1_8*dmats0[8][3] + coeff1_9*dmats0[9][3];
          new_coeff1_4 = coeff1_0*dmats0[0][4] + coeff1_1*dmats0[1][4] + coeff1_2*dmats0[2][4] + coeff1_3*dmats0[3][4] + coeff1_4*dmats0[4][4] + coeff1_5*dmats0[5][4] + coeff1_6*dmats0[6][4] + coeff1_7*dmats0[7][4] + coeff1_8*dmats0[8][4] + coeff1_9*dmats0[9][4];
          new_coeff1_5 = coeff1_0*dmats0[0][5] + coeff1_1*dmats0[1][5] + coeff1_2*dmats0[2][5] + coeff1_3*dmats0[3][5] + coeff1_4*dmats0[4][5] + coeff1_5*dmats0[5][5] + coeff1_6*dmats0[6][5] + coeff1_7*dmats0[7][5] + coeff1_8*dmats0[8][5] + coeff1_9*dmats0[9][5];
          new_coeff1_6 = coeff1_0*dmats0[0][6] + coeff1_1*dmats0[1][6] + coeff1_2*dmats0[2][6] + coeff1_3*dmats0[3][6] + coeff1_4*dmats0[4][6] + coeff1_5*dmats0[5][6] + coeff1_6*dmats0[6][6] + coeff1_7*dmats0[7][6] + coeff1_8*dmats0[8][6] + coeff1_9*dmats0[9][6];
          new_coeff1_7 = coeff1_0*dmats0[0][7] + coeff1_1*dmats0[1][7] + coeff1_2*dmats0[2][7] + coeff1_3*dmats0[3][7] + coeff1_4*dmats0[4][7] + coeff1_5*dmats0[5][7] + coeff1_6*dmats0[6][7] + coeff1_7*dmats0[7][7] + coeff1_8*dmats0[8][7] + coeff1_9*dmats0[9][7];
          new_coeff1_8 = coeff1_0*dmats0[0][8] + coeff1_1*dmats0[1][8] + coeff1_2*dmats0[2][8] + coeff1_3*dmats0[3][8] + coeff1_4*dmats0[4][8] + coeff1_5*dmats0[5][8] + coeff1_6*dmats0[6][8] + coeff1_7*dmats0[7][8] + coeff1_8*dmats0[8][8] + coeff1_9*dmats0[9][8];
          new_coeff1_9 = coeff1_0*dmats0[0][9] + coeff1_1*dmats0[1][9] + coeff1_2*dmats0[2][9] + coeff1_3*dmats0[3][9] + coeff1_4*dmats0[4][9] + coeff1_5*dmats0[5][9] + coeff1_6*dmats0[6][9] + coeff1_7*dmats0[7][9] + coeff1_8*dmats0[8][9] + coeff1_9*dmats0[9][9];
        }
        if(combinations[deriv_num][j] == 1)
        {
          new_coeff0_0 = coeff0_0*dmats1[0][0] + coeff0_1*dmats1[1][0] + coeff0_2*dmats1[2][0] + coeff0_3*dmats1[3][0] + coeff0_4*dmats1[4][0] + coeff0_5*dmats1[5][0] + coeff0_6*dmats1[6][0] + coeff0_7*dmats1[7][0] + coeff0_8*dmats1[8][0] + coeff0_9*dmats1[9][0];
          new_coeff0_1 = coeff0_0*dmats1[0][1] + coeff0_1*dmats1[1][1] + coeff0_2*dmats1[2][1] + coeff0_3*dmats1[3][1] + coeff0_4*dmats1[4][1] + coeff0_5*dmats1[5][1] + coeff0_6*dmats1[6][1] + coeff0_7*dmats1[7][1] + coeff0_8*dmats1[8][1] + coeff0_9*dmats1[9][1];
          new_coeff0_2 = coeff0_0*dmats1[0][2] + coeff0_1*dmats1[1][2] + coeff0_2*dmats1[2][2] + coeff0_3*dmats1[3][2] + coeff0_4*dmats1[4][2] + coeff0_5*dmats1[5][2] + coeff0_6*dmats1[6][2] + coeff0_7*dmats1[7][2] + coeff0_8*dmats1[8][2] + coeff0_9*dmats1[9][2];
          new_coeff0_3 = coeff0_0*dmats1[0][3] + coeff0_1*dmats1[1][3] + coeff0_2*dmats1[2][3] + coeff0_3*dmats1[3][3] + coeff0_4*dmats1[4][3] + coeff0_5*dmats1[5][3] + coeff0_6*dmats1[6][3] + coeff0_7*dmats1[7][3] + coeff0_8*dmats1[8][3] + coeff0_9*dmats1[9][3];
          new_coeff0_4 = coeff0_0*dmats1[0][4] + coeff0_1*dmats1[1][4] + coeff0_2*dmats1[2][4] + coeff0_3*dmats1[3][4] + coeff0_4*dmats1[4][4] + coeff0_5*dmats1[5][4] + coeff0_6*dmats1[6][4] + coeff0_7*dmats1[7][4] + coeff0_8*dmats1[8][4] + coeff0_9*dmats1[9][4];
          new_coeff0_5 = coeff0_0*dmats1[0][5] + coeff0_1*dmats1[1][5] + coeff0_2*dmats1[2][5] + coeff0_3*dmats1[3][5] + coeff0_4*dmats1[4][5] + coeff0_5*dmats1[5][5] + coeff0_6*dmats1[6][5] + coeff0_7*dmats1[7][5] + coeff0_8*dmats1[8][5] + coeff0_9*dmats1[9][5];
          new_coeff0_6 = coeff0_0*dmats1[0][6] + coeff0_1*dmats1[1][6] + coeff0_2*dmats1[2][6] + coeff0_3*dmats1[3][6] + coeff0_4*dmats1[4][6] + coeff0_5*dmats1[5][6] + coeff0_6*dmats1[6][6] + coeff0_7*dmats1[7][6] + coeff0_8*dmats1[8][6] + coeff0_9*dmats1[9][6];
          new_coeff0_7 = coeff0_0*dmats1[0][7] + coeff0_1*dmats1[1][7] + coeff0_2*dmats1[2][7] + coeff0_3*dmats1[3][7] + coeff0_4*dmats1[4][7] + coeff0_5*dmats1[5][7] + coeff0_6*dmats1[6][7] + coeff0_7*dmats1[7][7] + coeff0_8*dmats1[8][7] + coeff0_9*dmats1[9][7];
          new_coeff0_8 = coeff0_0*dmats1[0][8] + coeff0_1*dmats1[1][8] + coeff0_2*dmats1[2][8] + coeff0_3*dmats1[3][8] + coeff0_4*dmats1[4][8] + coeff0_5*dmats1[5][8] + coeff0_6*dmats1[6][8] + coeff0_7*dmats1[7][8] + coeff0_8*dmats1[8][8] + coeff0_9*dmats1[9][8];
          new_coeff0_9 = coeff0_0*dmats1[0][9] + coeff0_1*dmats1[1][9] + coeff0_2*dmats1[2][9] + coeff0_3*dmats1[3][9] + coeff0_4*dmats1[4][9] + coeff0_5*dmats1[5][9] + coeff0_6*dmats1[6][9] + coeff0_7*dmats1[7][9] + coeff0_8*dmats1[8][9] + coeff0_9*dmats1[9][9];
          new_coeff1_0 = coeff1_0*dmats1[0][0] + coeff1_1*dmats1[1][0] + coeff1_2*dmats1[2][0] + coeff1_3*dmats1[3][0] + coeff1_4*dmats1[4][0] + coeff1_5*dmats1[5][0] + coeff1_6*dmats1[6][0] + coeff1_7*dmats1[7][0] + coeff1_8*dmats1[8][0] + coeff1_9*dmats1[9][0];
          new_coeff1_1 = coeff1_0*dmats1[0][1] + coeff1_1*dmats1[1][1] + coeff1_2*dmats1[2][1] + coeff1_3*dmats1[3][1] + coeff1_4*dmats1[4][1] + coeff1_5*dmats1[5][1] + coeff1_6*dmats1[6][1] + coeff1_7*dmats1[7][1] + coeff1_8*dmats1[8][1] + coeff1_9*dmats1[9][1];
          new_coeff1_2 = coeff1_0*dmats1[0][2] + coeff1_1*dmats1[1][2] + coeff1_2*dmats1[2][2] + coeff1_3*dmats1[3][2] + coeff1_4*dmats1[4][2] + coeff1_5*dmats1[5][2] + coeff1_6*dmats1[6][2] + coeff1_7*dmats1[7][2] + coeff1_8*dmats1[8][2] + coeff1_9*dmats1[9][2];
          new_coeff1_3 = coeff1_0*dmats1[0][3] + coeff1_1*dmats1[1][3] + coeff1_2*dmats1[2][3] + coeff1_3*dmats1[3][3] + coeff1_4*dmats1[4][3] + coeff1_5*dmats1[5][3] + coeff1_6*dmats1[6][3] + coeff1_7*dmats1[7][3] + coeff1_8*dmats1[8][3] + coeff1_9*dmats1[9][3];
          new_coeff1_4 = coeff1_0*dmats1[0][4] + coeff1_1*dmats1[1][4] + coeff1_2*dmats1[2][4] + coeff1_3*dmats1[3][4] + coeff1_4*dmats1[4][4] + coeff1_5*dmats1[5][4] + coeff1_6*dmats1[6][4] + coeff1_7*dmats1[7][4] + coeff1_8*dmats1[8][4] + coeff1_9*dmats1[9][4];
          new_coeff1_5 = coeff1_0*dmats1[0][5] + coeff1_1*dmats1[1][5] + coeff1_2*dmats1[2][5] + coeff1_3*dmats1[3][5] + coeff1_4*dmats1[4][5] + coeff1_5*dmats1[5][5] + coeff1_6*dmats1[6][5] + coeff1_7*dmats1[7][5] + coeff1_8*dmats1[8][5] + coeff1_9*dmats1[9][5];
          new_coeff1_6 = coeff1_0*dmats1[0][6] + coeff1_1*dmats1[1][6] + coeff1_2*dmats1[2][6] + coeff1_3*dmats1[3][6] + coeff1_4*dmats1[4][6] + coeff1_5*dmats1[5][6] + coeff1_6*dmats1[6][6] + coeff1_7*dmats1[7][6] + coeff1_8*dmats1[8][6] + coeff1_9*dmats1[9][6];
          new_coeff1_7 = coeff1_0*dmats1[0][7] + coeff1_1*dmats1[1][7] + coeff1_2*dmats1[2][7] + coeff1_3*dmats1[3][7] + coeff1_4*dmats1[4][7] + coeff1_5*dmats1[5][7] + coeff1_6*dmats1[6][7] + coeff1_7*dmats1[7][7] + coeff1_8*dmats1[8][7] + coeff1_9*dmats1[9][7];
          new_coeff1_8 = coeff1_0*dmats1[0][8] + coeff1_1*dmats1[1][8] + coeff1_2*dmats1[2][8] + coeff1_3*dmats1[3][8] + coeff1_4*dmats1[4][8] + coeff1_5*dmats1[5][8] + coeff1_6*dmats1[6][8] + coeff1_7*dmats1[7][8] + coeff1_8*dmats1[8][8] + coeff1_9*dmats1[9][8];
          new_coeff1_9 = coeff1_0*dmats1[0][9] + coeff1_1*dmats1[1][9] + coeff1_2*dmats1[2][9] + coeff1_3*dmats1[3][9] + coeff1_4*dmats1[4][9] + coeff1_5*dmats1[5][9] + coeff1_6*dmats1[6][9] + coeff1_7*dmats1[7][9] + coeff1_8*dmats1[8][9] + coeff1_9*dmats1[9][9];
        }
    
      }
      // Compute derivatives on reference element as dot product of coefficients and basisvalues
      // Correct values by the covariant Piola transform
      const double tmp0_0 = new_coeff0_0*basisvalue0 + new_coeff0_1*basisvalue1 + new_coeff0_2*basisvalue2 + new_coeff0_3*basisvalue3 + new_coeff0_4*basisvalue4 + new_coeff0_5*basisvalue5 + new_coeff0_6*basisvalue6 + new_coeff0_7*basisvalue7 + new_coeff0_8*basisvalue8 + new_coeff0_9*basisvalue9;
      const double tmp0_1 = new_coeff1_0*basisvalue0 + new_coeff1_1*basisvalue1 + new_coeff1_2*basisvalue2 + new_coeff1_3*basisvalue3 + new_coeff1_4*basisvalue4 + new_coeff1_5*basisvalue5 + new_coeff1_6*basisvalue6 + new_coeff1_7*basisvalue7 + new_coeff1_8*basisvalue8 + new_coeff1_9*basisvalue9;
      derivatives[deriv_num] = (Jinv_00*tmp0_0 + Jinv_10*tmp0_1);
      derivatives[num_derivatives + deriv_num] = (Jinv_01*tmp0_0 + Jinv_11*tmp0_1);
    }
    
    // Transform derivatives back to physical element
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        values[row] += transform[row][col]*derivatives[col];
        values[num_derivatives + row] += transform[row][col]*derivatives[num_derivatives + col];
      }
    }
    // Delete pointer to array of derivatives on FIAT element
    delete [] derivatives;
    
    // Delete pointer to array of combinations of derivatives and transform
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      delete [] combinations[row];
      delete [] transform[row];
    }
    
    delete [] combinations;
    delete [] transform;
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis_derivatives() is not yet implemented.");
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // The reference points, direction and weights:
    const static double X[15][16][2] = {{{0.75, 0.25}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0.5, 0.5}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0.25, 0.75}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0, 0.25}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0, 0.5}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0, 0.75}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0.25, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0.5, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0.75, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0.0654669945550145, 0.0571041961145177}, {0.0502101232113698, 0.276843013638124}, {0.028912084224389, 0.583590432368917}, {0.00970378512694614, 0.860240135656219}, {0.311164552244357, 0.0571041961145177}, {0.238648659731443, 0.276843013638124}, {0.137419104134574, 0.583590432368917}, {0.0461220799064521, 0.860240135656219}, {0.631731251641125, 0.0571041961145177}, {0.484508326630433, 0.276843013638124}, {0.278990463496509, 0.583590432368917}, {0.0936377844373285, 0.860240135656219}, {0.877428809330468, 0.0571041961145177}, {0.672946863150506, 0.276843013638124}, {0.387497483406694, 0.583590432368917}, {0.130056079216834, 0.860240135656219}}, {{0.0654669945550145, 0.0571041961145177}, {0.0502101232113698, 0.276843013638124}, {0.028912084224389, 0.583590432368917}, {0.00970378512694614, 0.860240135656219}, {0.311164552244357, 0.0571041961145177}, {0.238648659731443, 0.276843013638124}, {0.137419104134574, 0.583590432368917}, {0.0461220799064521, 0.860240135656219}, {0.631731251641125, 0.0571041961145177}, {0.484508326630433, 0.276843013638124}, {0.278990463496509, 0.583590432368917}, {0.0936377844373285, 0.860240135656219}, {0.877428809330468, 0.0571041961145177}, {0.672946863150506, 0.276843013638124}, {0.387497483406694, 0.583590432368917}, {0.130056079216834, 0.860240135656219}}, {{0.0654669945550145, 0.0571041961145177}, {0.0502101232113698, 0.276843013638124}, {0.028912084224389, 0.583590432368917}, {0.00970378512694614, 0.860240135656219}, {0.311164552244357, 0.0571041961145177}, {0.238648659731443, 0.276843013638124}, {0.137419104134574, 0.583590432368917}, {0.0461220799064521, 0.860240135656219}, {0.631731251641125, 0.0571041961145177}, {0.484508326630433, 0.276843013638124}, {0.278990463496509, 0.583590432368917}, {0.0936377844373285, 0.860240135656219}, {0.877428809330468, 0.0571041961145177}, {0.672946863150506, 0.276843013638124}, {0.387497483406694, 0.583590432368917}, {0.130056079216834, 0.860240135656219}}, {{0.0654669945550145, 0.0571041961145177}, {0.0502101232113698, 0.276843013638124}, {0.028912084224389, 0.583590432368917}, {0.00970378512694614, 0.860240135656219}, {0.311164552244357, 0.0571041961145177}, {0.238648659731443, 0.276843013638124}, {0.137419104134574, 0.583590432368917}, {0.0461220799064521, 0.860240135656219}, {0.631731251641125, 0.0571041961145177}, {0.484508326630433, 0.276843013638124}, {0.278990463496509, 0.583590432368917}, {0.0936377844373285, 0.860240135656219}, {0.877428809330468, 0.0571041961145177}, {0.672946863150506, 0.276843013638124}, {0.387497483406694, 0.583590432368917}, {0.130056079216834, 0.860240135656219}}, {{0.0654669945550145, 0.0571041961145177}, {0.0502101232113698, 0.276843013638124}, {0.028912084224389, 0.583590432368917}, {0.00970378512694614, 0.860240135656219}, {0.311164552244357, 0.0571041961145177}, {0.238648659731443, 0.276843013638124}, {0.137419104134574, 0.583590432368917}, {0.0461220799064521, 0.860240135656219}, {0.631731251641125, 0.0571041961145177}, {0.484508326630433, 0.276843013638124}, {0.278990463496509, 0.583590432368917}, {0.0936377844373285, 0.860240135656219}, {0.877428809330468, 0.0571041961145177}, {0.672946863150506, 0.276843013638124}, {0.387497483406694, 0.583590432368917}, {0.130056079216834, 0.860240135656219}}, {{0.0654669945550145, 0.0571041961145177}, {0.0502101232113698, 0.276843013638124}, {0.028912084224389, 0.583590432368917}, {0.00970378512694614, 0.860240135656219}, {0.311164552244357, 0.0571041961145177}, {0.238648659731443, 0.276843013638124}, {0.137419104134574, 0.583590432368917}, {0.0461220799064521, 0.860240135656219}, {0.631731251641125, 0.0571041961145177}, {0.484508326630433, 0.276843013638124}, {0.278990463496509, 0.583590432368917}, {0.0936377844373285, 0.860240135656219}, {0.877428809330468, 0.0571041961145177}, {0.672946863150506, 0.276843013638124}, {0.387497483406694, 0.583590432368917}, {0.130056079216834, 0.860240135656219}}};
    const static double W[15][16] = {{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101}, {0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101}, {0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101}, {0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101}, {0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101}, {0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101}};
    const static double D[15][16][2] = {{{-1, 1}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{-1, 1}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{-1, 1}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0, 1}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0, 1}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0, 1}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{1, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{1, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{1, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}}, {{-0.703179558498458, 0}, {-0.539305836657196, 0}, {-0.31054406511806, 0}, {-0.104228144085579, 0}, {-0.277618905284931, 0}, {-0.212920717300506, 0}, {-0.122604393655731, 0}, {-0.0411498072024544, 0}, {0.277618905284931, 0}, {0.212920717300506, 0}, {0.122604393655731, 0}, {0.0411498072024544, 0}, {0.703179558498457, 0}, {0.539305836657195, 0}, {0.31054406511806, 0}, {0.104228144085579, 0}}, {{-0.414343705828224, 0}, {-0.0847354795428142, 0}, {0.375385648553375, 0}, {0.790360203484329, 0}, {-0.414343705828224, 0}, {-0.0847354795428142, 0}, {0.375385648553375, 0}, {0.790360203484329, 0}, {-0.414343705828224, 0}, {-0.0847354795428142, 0}, {0.375385648553375, 0}, {0.790360203484329, 0}, {-0.414343705828224, 0}, {-0.0847354795428142, 0}, {0.375385648553375, 0}, {0.790360203484329, 0}}, {{0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}}, {{0, -0.703179558498458}, {0, -0.539305836657196}, {0, -0.31054406511806}, {0, -0.104228144085579}, {0, -0.277618905284931}, {0, -0.212920717300506}, {0, -0.122604393655731}, {0, -0.0411498072024544}, {0, 0.277618905284931}, {0, 0.212920717300506}, {0, 0.122604393655731}, {0, 0.0411498072024544}, {0, 0.703179558498457}, {0, 0.539305836657195}, {0, 0.31054406511806}, {0, 0.104228144085579}}, {{0, -0.414343705828224}, {0, -0.0847354795428142}, {0, 0.375385648553375}, {0, 0.790360203484329}, {0, -0.414343705828224}, {0, -0.0847354795428142}, {0, 0.375385648553375}, {0, 0.790360203484329}, {0, -0.414343705828224}, {0, -0.0847354795428142}, {0, 0.375385648553375}, {0, 0.790360203484329}, {0, -0.414343705828224}, {0, -0.0847354795428142}, {0, 0.375385648553375}, {0, 0.790360203484329}}};
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    double copyofvalues[2];
    double result = 0.0;
    // Iterate over the points:
    static const unsigned int ns[15] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 16, 16, 16, 16, 16, 16};
    for (unsigned int j = 0; j < ns[i]; j++) {
      // Evaluate basis functions for affine mapping
      const double w0 = 1.0 - X[i][j][0] - X[i][j][1];
      const double w1 = X[i][j][0];
      const double w2 = X[i][j][1];
      
      // Compute affine mapping y = F(X)
      double y[2];
      y[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0];
      y[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1];
      
      // Evaluate function at physical points
      double values[2];
      f.evaluate(values, y, c);
      
      // Map function values using appropriate mapping
      // Copy old values:
      copyofvalues[0] = values[0];
      copyofvalues[1] = values[1];
      // Do the inverse of curl piola 
      values[0] = J_00*copyofvalues[0]+J_10*copyofvalues[1];
      values[1] = J_01*copyofvalues[0]+J_11*copyofvalues[1];
    
      // Note that we do not map the weights (yet).
    
      // Take directional components
      for(int k = 0; k < 2; k++)
        result += values[k]*D[i][j][k];
      // Multiply by weights 
      result *= W[i][j];
    
    } // End for
    return result;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
      
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
      
    // Compute inverse of Jacobian
    const double Jinv_00 =  J_11 / detJ;
    const double Jinv_01 = -J_01 / detJ;
    const double Jinv_10 = -J_10 / detJ;
    const double Jinv_11 =  J_00 / detJ;
    // Evaluate at vertices and use Piola mapping
    vertex_values[0] = (dof_values[3]*3*Jinv_10 + dof_values[4]*(-3*Jinv_10) + dof_values[5]*Jinv_10 + dof_values[6]*3*Jinv_00 + dof_values[7]*(-3*Jinv_00) + dof_values[8]*Jinv_00);
    vertex_values[2] = (dof_values[0]*3*Jinv_10 + dof_values[1]*(-3*Jinv_10) + dof_values[2]*Jinv_10 + dof_values[6]*(Jinv_00 + Jinv_10) + dof_values[7]*(-3*Jinv_00 - 3*Jinv_10) + dof_values[8]*(3*Jinv_00 + 3*Jinv_10));
    vertex_values[4] = (dof_values[0]*Jinv_00 + dof_values[1]*3*Jinv_00 + dof_values[2]*(-3*Jinv_00) + dof_values[3]*(Jinv_00 + Jinv_10) + dof_values[4]*(-3*Jinv_00 - 3*Jinv_10) + dof_values[5]*(3*Jinv_00 + 3*Jinv_10));
    vertex_values[1] = (dof_values[3]*3*Jinv_11 + dof_values[4]*(-3*Jinv_11) + dof_values[5]*Jinv_11 + dof_values[6]*3*Jinv_01 + dof_values[7]*(-3*Jinv_01) + dof_values[8]*Jinv_01);
    vertex_values[3] = (dof_values[0]*3*Jinv_11 + dof_values[1]*(-3*Jinv_11) + dof_values[2]*Jinv_11 + dof_values[6]*(Jinv_01 + Jinv_11) + dof_values[7]*(-3*Jinv_01 - 3*Jinv_11) + dof_values[8]*(3*Jinv_01 + 3*Jinv_11));
    vertex_values[5] = (dof_values[0]*Jinv_01 + dof_values[1]*3*Jinv_01 + dof_values[2]*(-3*Jinv_01) + dof_values[3]*(Jinv_01 + Jinv_11) + dof_values[4]*(-3*Jinv_01 - 3*Jinv_11) + dof_values[5]*(3*Jinv_01 + 3*Jinv_11));
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new UFC_Forms_0_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class UFC_Forms_0_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  UFC_Forms_0_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Forms_0_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "Nedelec finite element of degree 3 on a triangle";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 15;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 2;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
      
    // Compute determinant of Jacobian
    const double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    const double Jinv_00 =  J_11 / detJ;
    const double Jinv_01 = -J_01 / detJ;
    const double Jinv_10 = -J_10 / detJ;
    const double Jinv_11 =  J_00 / detJ;
    
    // Get coordinates and map to the reference (UFC) element
    double x = (element_coordinates[0][1]*element_coordinates[2][0] -\
                element_coordinates[0][0]*element_coordinates[2][1] +\
                J_11*coordinates[0] - J_01*coordinates[1]) / detJ;
    double y = (element_coordinates[1][1]*element_coordinates[0][0] -\
                element_coordinates[1][0]*element_coordinates[0][1] -\
                J_10*coordinates[0] + J_00*coordinates[1]) / detJ;
    
    // Map coordinates to the reference square
    if (std::abs(y - 1.0) < 1e-14)
      x = -1.0;
    else
      x = 2.0 *x/(1.0 - y) - 1.0;
    y = 2.0*y - 1.0;
    
    // Reset values
    values[0] = 0;
    values[1] = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_3_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.707106781186548*psitilde_a_0*scalings_y_0*psitilde_bs_0_0;
    const double basisvalue1 = 1.73205080756888*psitilde_a_1*scalings_y_1*psitilde_bs_1_0;
    const double basisvalue2 = psitilde_a_0*scalings_y_0*psitilde_bs_0_1;
    const double basisvalue3 = 2.73861278752583*psitilde_a_2*scalings_y_2*psitilde_bs_2_0;
    const double basisvalue4 = 2.12132034355964*psitilde_a_1*scalings_y_1*psitilde_bs_1_1;
    const double basisvalue5 = 1.22474487139159*psitilde_a_0*scalings_y_0*psitilde_bs_0_2;
    const double basisvalue6 = 3.74165738677394*psitilde_a_3*scalings_y_3*psitilde_bs_3_0;
    const double basisvalue7 = 3.16227766016838*psitilde_a_2*scalings_y_2*psitilde_bs_2_1;
    const double basisvalue8 = 2.44948974278318*psitilde_a_1*scalings_y_1*psitilde_bs_1_2;
    const double basisvalue9 = 1.4142135623731*psitilde_a_0*scalings_y_0*psitilde_bs_0_3;
    
    // Table(s) of coefficients
    const static double coefficients0[15][10] = \
    {{0, 0, 0, -0.169533172561123, 0.0841793787126842, -0.116642368703961, 0, -0.146820034222103, 0.0729014804399755, -0.101015254455221},
    {0, 0, 0, 0.0782460796435954, -0.168358757425369, 0.349927106111883, 0, 0.0677630927178939, -0.145802960879951, 0.303045763365663},
    {0, 0, 0, -0.0391230398217977, -0.0841793787126844, -0.349927106111883, 0, -0.0338815463589469, -0.0729014804399756, -0.303045763365663},
    {0, 0, 0, 0.169533172561123, 0.0841793787126844, 0.116642368703961, 0, 0.146820034222103, 0.0729014804399755, 0.101015254455221},
    {0, 0, 0, -0.0782460796435954, -0.168358757425369, -0.349927106111883, 0, -0.0677630927178939, -0.145802960879951, -0.303045763365663},
    {0, 0, 0, 0.0391230398217979, -0.0841793787126841, 0.349927106111883, 0, 0.033881546358947, -0.0729014804399757, 0.303045763365663},
    {0, 0, 0, 0.382536389368688, 0.303045763365663, 0.311046316543896, 0, -0.090350790290525, -0.145802960879951, -0.202030508910442},
    {0, 0, 0, -0.765072778737375, 0, -0.155523158271948, 0, 0.18070158058105, 0, 0.101015254455221},
    {0, 0, 0, 0.382536389368687, -0.303045763365663, 0.311046316543896, 0, -0.0903507902905252, 0.145802960879951, -0.202030508910442},
    {2, 0, 0, -0.18442777839083, -0.238095238095238, -0.824786098842323, 0, -0.159719141249985, -0.206196524710581, 0.285714285714286},
    {0, 2, 0, -0.338815463589469, 0.903978357455696, 0, 0, -0.293422798663482, -0.631345340345132, 0},
    {0, 0, 2, 0.0652050663696631, -0.420896893563422, 0.466569474815844, 0, 0.0564692439315783, -0.364507402199878, -1.01015254455221},
    {0, 0, 0, 0, 0.476190476190477, 0, 0, 0, 0.412393049421162, 0},
    {0, 0, 0, 0.677630927178939, 0, 0, 0, 0.586845597326964, 0, 0},
    {0, 0, 0, 0, 0.841793787126843, 0, 0, 0, 0.729014804399756, 0}};
    
    const static double coefficients1[15][10] = \
    {{0, 0, 0, 0.321678327423669, -0.134687005940295, 0.0972019739199675, 0.260579710864614, -0.12987926104263, 0.0976879837895672, -0.0631345340345132},
    {0, 0, 0, -0.165186168136479, 0.235702260395516, -0.272165526975908, -0.120267558860591, 0.146820034222103, -0.224536559755125, 0.176776695296637},
    {0, 0, 0, 0.0608580619450185, 0, 0.213844342623928, 0.0601337794302954, 0.0395284707521046, 0.112268279877562, -0.138895974875929},
    {0, 0, 0, 0.491211499984792, 0.218866384652979, 0.213844342623928, -0.260579710864614, 0.0169407731794736, -0.0247865033495917, 0.0378807204207079},
    {0, 0, 0, -0.243432247780074, -0.404061017820885, -0.622092633087792, 0.120267558860591, 0.0790569415042092, 0.0787335988751736, -0.126269068069026},
    {0, 0, 0, 0.0999811017668161, -0.0841793787126841, 0.563771448735811, -0.0601337794302954, 0.0734100171110518, -0.185169760317538, 0.164149788489734},
    {0, 0, 0, 0.169533172561123, 0.0841793787126842, 0.116642368703961, 0.160356745147455, 0.0677630927178939, 0.0320766513935891, -0.0757614408414156},
    {0, 0, 0, -0.382536389368687, 0.0673435029701472, -0.077761579135974, -0.320713490294909, 0.090350790290525, -0.0641533027871784, 0.0505076272276105},
    {0, 0, 0, 0.213003216807564, -0.218866384652979, 0.194403947839935, 0.160356745147454, -0.158113883008419, 0.17787961227354, -0.126269068069026},
    {0, 0, 0, 0.307379630651382, 0.238095238095238, -0.274928699614108, 0.283473354756921, 0.0798595706249923, -0.226816177181638, 0.178571428571429},
    {0, 0, 0, 0.527046276694729, 0.583211843519804, -0.168358757425368, 0.52077380612206, 0.342326598440728, -0.290418856558761, 0.109352220659964},
    {0, 0, 0, -0.173880176985767, 0.168358757425369, 0.680413817439771, -0.100222965717159, 0.31058084162368, 0.298896069803899, -0.441941738241592},
    {2, 0, 0, -0.799187039693594, 0.238095238095239, -0.274928699614108, 0, -0.31943828249997, 0.206196524710581, -0.0714285714285716},
    {0, 2, 0, 0.33881546358947, -0.262445329583911, 0, -1.04154761224412, 0.293422798663482, -0.0505076272276108, 0},
    {0, 0, 2, 0.412965420341197, 0.420896893563421, -0.894258160063699, 0, -0.564692439315782, 0.364507402199878, -0.126269068069027}};
    
    // Extract relevant coefficients
    const double coeff0_0 = coefficients0[dof][0];
    const double coeff0_1 = coefficients0[dof][1];
    const double coeff0_2 = coefficients0[dof][2];
    const double coeff0_3 = coefficients0[dof][3];
    const double coeff0_4 = coefficients0[dof][4];
    const double coeff0_5 = coefficients0[dof][5];
    const double coeff0_6 = coefficients0[dof][6];
    const double coeff0_7 = coefficients0[dof][7];
    const double coeff0_8 = coefficients0[dof][8];
    const double coeff0_9 = coefficients0[dof][9];
    const double coeff1_0 = coefficients1[dof][0];
    const double coeff1_1 = coefficients1[dof][1];
    const double coeff1_2 = coefficients1[dof][2];
    const double coeff1_3 = coefficients1[dof][3];
    const double coeff1_4 = coefficients1[dof][4];
    const double coeff1_5 = coefficients1[dof][5];
    const double coeff1_6 = coefficients1[dof][6];
    const double coeff1_7 = coefficients1[dof][7];
    const double coeff1_8 = coefficients1[dof][8];
    const double coeff1_9 = coefficients1[dof][9];
    
    // Compute value(s)
    const double tmp0_0 = coeff0_0*basisvalue0 + coeff0_1*basisvalue1 + coeff0_2*basisvalue2 + coeff0_3*basisvalue3 + coeff0_4*basisvalue4 + coeff0_5*basisvalue5 + coeff0_6*basisvalue6 + coeff0_7*basisvalue7 + coeff0_8*basisvalue8 + coeff0_9*basisvalue9;
    const double tmp0_1 = coeff1_0*basisvalue0 + coeff1_1*basisvalue1 + coeff1_2*basisvalue2 + coeff1_3*basisvalue3 + coeff1_4*basisvalue4 + coeff1_5*basisvalue5 + coeff1_6*basisvalue6 + coeff1_7*basisvalue7 + coeff1_8*basisvalue8 + coeff1_9*basisvalue9;
    // Using covariant Piola transform to map values back to the physical element
    values[0] = (Jinv_00*tmp0_0 + Jinv_10*tmp0_1);
    values[1] = (Jinv_01*tmp0_0 + Jinv_11*tmp0_1);
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis() is not yet implemented.");
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
      
    // Compute determinant of Jacobian
    const double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    const double Jinv_00 =  J_11 / detJ;
    const double Jinv_01 = -J_01 / detJ;
    const double Jinv_10 = -J_10 / detJ;
    const double Jinv_11 =  J_00 / detJ;
    
    // Get coordinates and map to the reference (UFC) element
    double x = (element_coordinates[0][1]*element_coordinates[2][0] -\
                element_coordinates[0][0]*element_coordinates[2][1] +\
                J_11*coordinates[0] - J_01*coordinates[1]) / detJ;
    double y = (element_coordinates[1][1]*element_coordinates[0][0] -\
                element_coordinates[1][0]*element_coordinates[0][1] -\
                J_10*coordinates[0] + J_00*coordinates[1]) / detJ;
    
    // Map coordinates to the reference square
    if (std::abs(y - 1.0) < 1e-14)
      x = -1.0;
    else
      x = 2.0 *x/(1.0 - y) - 1.0;
    y = 2.0*y - 1.0;
    
    // Compute number of derivatives
    unsigned int num_derivatives = 1;
    
    for (unsigned int j = 0; j < n; j++)
      num_derivatives *= 2;
    
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      combinations[j] = new unsigned int [n];
      for (unsigned int k = 0; k < n; k++)
        combinations[j][k] = 0;
    }
        
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] =  {{J_11 / detJ, -J_01 / detJ}, {-J_10 / detJ, J_00 / detJ}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values
    for (unsigned int j = 0; j < 2*num_derivatives; j++)
      values[j] = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_3_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.707106781186548*psitilde_a_0*scalings_y_0*psitilde_bs_0_0;
    const double basisvalue1 = 1.73205080756888*psitilde_a_1*scalings_y_1*psitilde_bs_1_0;
    const double basisvalue2 = psitilde_a_0*scalings_y_0*psitilde_bs_0_1;
    const double basisvalue3 = 2.73861278752583*psitilde_a_2*scalings_y_2*psitilde_bs_2_0;
    const double basisvalue4 = 2.12132034355964*psitilde_a_1*scalings_y_1*psitilde_bs_1_1;
    const double basisvalue5 = 1.22474487139159*psitilde_a_0*scalings_y_0*psitilde_bs_0_2;
    const double basisvalue6 = 3.74165738677394*psitilde_a_3*scalings_y_3*psitilde_bs_3_0;
    const double basisvalue7 = 3.16227766016838*psitilde_a_2*scalings_y_2*psitilde_bs_2_1;
    const double basisvalue8 = 2.44948974278318*psitilde_a_1*scalings_y_1*psitilde_bs_1_2;
    const double basisvalue9 = 1.4142135623731*psitilde_a_0*scalings_y_0*psitilde_bs_0_3;
    
    // Table(s) of coefficients
    const static double coefficients0[15][10] = \
    {{0, 0, 0, -0.169533172561123, 0.0841793787126842, -0.116642368703961, 0, -0.146820034222103, 0.0729014804399755, -0.101015254455221},
    {0, 0, 0, 0.0782460796435954, -0.168358757425369, 0.349927106111883, 0, 0.0677630927178939, -0.145802960879951, 0.303045763365663},
    {0, 0, 0, -0.0391230398217977, -0.0841793787126844, -0.349927106111883, 0, -0.0338815463589469, -0.0729014804399756, -0.303045763365663},
    {0, 0, 0, 0.169533172561123, 0.0841793787126844, 0.116642368703961, 0, 0.146820034222103, 0.0729014804399755, 0.101015254455221},
    {0, 0, 0, -0.0782460796435954, -0.168358757425369, -0.349927106111883, 0, -0.0677630927178939, -0.145802960879951, -0.303045763365663},
    {0, 0, 0, 0.0391230398217979, -0.0841793787126841, 0.349927106111883, 0, 0.033881546358947, -0.0729014804399757, 0.303045763365663},
    {0, 0, 0, 0.382536389368688, 0.303045763365663, 0.311046316543896, 0, -0.090350790290525, -0.145802960879951, -0.202030508910442},
    {0, 0, 0, -0.765072778737375, 0, -0.155523158271948, 0, 0.18070158058105, 0, 0.101015254455221},
    {0, 0, 0, 0.382536389368687, -0.303045763365663, 0.311046316543896, 0, -0.0903507902905252, 0.145802960879951, -0.202030508910442},
    {2, 0, 0, -0.18442777839083, -0.238095238095238, -0.824786098842323, 0, -0.159719141249985, -0.206196524710581, 0.285714285714286},
    {0, 2, 0, -0.338815463589469, 0.903978357455696, 0, 0, -0.293422798663482, -0.631345340345132, 0},
    {0, 0, 2, 0.0652050663696631, -0.420896893563422, 0.466569474815844, 0, 0.0564692439315783, -0.364507402199878, -1.01015254455221},
    {0, 0, 0, 0, 0.476190476190477, 0, 0, 0, 0.412393049421162, 0},
    {0, 0, 0, 0.677630927178939, 0, 0, 0, 0.586845597326964, 0, 0},
    {0, 0, 0, 0, 0.841793787126843, 0, 0, 0, 0.729014804399756, 0}};
    
    const static double coefficients1[15][10] = \
    {{0, 0, 0, 0.321678327423669, -0.134687005940295, 0.0972019739199675, 0.260579710864614, -0.12987926104263, 0.0976879837895672, -0.0631345340345132},
    {0, 0, 0, -0.165186168136479, 0.235702260395516, -0.272165526975908, -0.120267558860591, 0.146820034222103, -0.224536559755125, 0.176776695296637},
    {0, 0, 0, 0.0608580619450185, 0, 0.213844342623928, 0.0601337794302954, 0.0395284707521046, 0.112268279877562, -0.138895974875929},
    {0, 0, 0, 0.491211499984792, 0.218866384652979, 0.213844342623928, -0.260579710864614, 0.0169407731794736, -0.0247865033495917, 0.0378807204207079},
    {0, 0, 0, -0.243432247780074, -0.404061017820885, -0.622092633087792, 0.120267558860591, 0.0790569415042092, 0.0787335988751736, -0.126269068069026},
    {0, 0, 0, 0.0999811017668161, -0.0841793787126841, 0.563771448735811, -0.0601337794302954, 0.0734100171110518, -0.185169760317538, 0.164149788489734},
    {0, 0, 0, 0.169533172561123, 0.0841793787126842, 0.116642368703961, 0.160356745147455, 0.0677630927178939, 0.0320766513935891, -0.0757614408414156},
    {0, 0, 0, -0.382536389368687, 0.0673435029701472, -0.077761579135974, -0.320713490294909, 0.090350790290525, -0.0641533027871784, 0.0505076272276105},
    {0, 0, 0, 0.213003216807564, -0.218866384652979, 0.194403947839935, 0.160356745147454, -0.158113883008419, 0.17787961227354, -0.126269068069026},
    {0, 0, 0, 0.307379630651382, 0.238095238095238, -0.274928699614108, 0.283473354756921, 0.0798595706249923, -0.226816177181638, 0.178571428571429},
    {0, 0, 0, 0.527046276694729, 0.583211843519804, -0.168358757425368, 0.52077380612206, 0.342326598440728, -0.290418856558761, 0.109352220659964},
    {0, 0, 0, -0.173880176985767, 0.168358757425369, 0.680413817439771, -0.100222965717159, 0.31058084162368, 0.298896069803899, -0.441941738241592},
    {2, 0, 0, -0.799187039693594, 0.238095238095239, -0.274928699614108, 0, -0.31943828249997, 0.206196524710581, -0.0714285714285716},
    {0, 2, 0, 0.33881546358947, -0.262445329583911, 0, -1.04154761224412, 0.293422798663482, -0.0505076272276108, 0},
    {0, 0, 2, 0.412965420341197, 0.420896893563421, -0.894258160063699, 0, -0.564692439315782, 0.364507402199878, -0.126269068069027}};
    
    // Interesting (new) part
    // Tables of derivatives of the polynomial base (transpose)
    const static double dmats0[10][10] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.89897948556636, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 9.48683298050514, 0, 0, 0, 0, 0, 0, 0, 0},
    {4, 0, 7.07106781186548, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.29150262212918, 0, -2.99332590941915, 13.6626010212795, 0, 0.611010092660779, 0, 0, 0, 0},
    {0, 4.38178046004133, 0, 0, 12.5219806739988, 0, 0, 0, 0, 0},
    {3.46410161513775, 0, 7.83836717690617, 0, 0, 8.4, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    const static double dmats1[10][10] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.44948974278318, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.24264068711929, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.58198889747161, 4.74341649025257, -0.912870929175276, 0, 0, 0, 0, 0, 0, 0},
    {2, 6.12372435695795, 3.53553390593274, 0, 0, 0, 0, 0, 0, 0},
    {-2.3094010767585, 0, 8.16496580927726, 0, 0, 0, 0, 0, 0, 0},
    {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.305505046330391, 0, 0, 0, 0},
    {2.23606797749979, 2.19089023002067, 2.5298221281347, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0, 0, 0, 0},
    {1.73205080756888, -5.09116882454314, 3.91918358845309, 0, 9.69948452238571, 4.2, 0, 0, 0, 0},
    {5, 0, -2.82842712474619, 0, 0, 12.1243556529821, 0, 0, 0, 0}};
    
    // Compute reference derivatives
    // Declare pointer to array of derivatives on FIAT element
    double *derivatives = new double [2*num_derivatives];
    
    // Declare coefficients
    double coeff0_0 = 0;
    double coeff0_1 = 0;
    double coeff0_2 = 0;
    double coeff0_3 = 0;
    double coeff0_4 = 0;
    double coeff0_5 = 0;
    double coeff0_6 = 0;
    double coeff0_7 = 0;
    double coeff0_8 = 0;
    double coeff0_9 = 0;
    double coeff1_0 = 0;
    double coeff1_1 = 0;
    double coeff1_2 = 0;
    double coeff1_3 = 0;
    double coeff1_4 = 0;
    double coeff1_5 = 0;
    double coeff1_6 = 0;
    double coeff1_7 = 0;
    double coeff1_8 = 0;
    double coeff1_9 = 0;
    
    // Declare new coefficients
    double new_coeff0_0 = 0;
    double new_coeff0_1 = 0;
    double new_coeff0_2 = 0;
    double new_coeff0_3 = 0;
    double new_coeff0_4 = 0;
    double new_coeff0_5 = 0;
    double new_coeff0_6 = 0;
    double new_coeff0_7 = 0;
    double new_coeff0_8 = 0;
    double new_coeff0_9 = 0;
    double new_coeff1_0 = 0;
    double new_coeff1_1 = 0;
    double new_coeff1_2 = 0;
    double new_coeff1_3 = 0;
    double new_coeff1_4 = 0;
    double new_coeff1_5 = 0;
    double new_coeff1_6 = 0;
    double new_coeff1_7 = 0;
    double new_coeff1_8 = 0;
    double new_coeff1_9 = 0;
    
    // Loop possible derivatives
    for (unsigned int deriv_num = 0; deriv_num < num_derivatives; deriv_num++)
    {
      // Get values from coefficients array
      new_coeff0_0 = coefficients0[dof][0];
      new_coeff0_1 = coefficients0[dof][1];
      new_coeff0_2 = coefficients0[dof][2];
      new_coeff0_3 = coefficients0[dof][3];
      new_coeff0_4 = coefficients0[dof][4];
      new_coeff0_5 = coefficients0[dof][5];
      new_coeff0_6 = coefficients0[dof][6];
      new_coeff0_7 = coefficients0[dof][7];
      new_coeff0_8 = coefficients0[dof][8];
      new_coeff0_9 = coefficients0[dof][9];
      new_coeff1_0 = coefficients1[dof][0];
      new_coeff1_1 = coefficients1[dof][1];
      new_coeff1_2 = coefficients1[dof][2];
      new_coeff1_3 = coefficients1[dof][3];
      new_coeff1_4 = coefficients1[dof][4];
      new_coeff1_5 = coefficients1[dof][5];
      new_coeff1_6 = coefficients1[dof][6];
      new_coeff1_7 = coefficients1[dof][7];
      new_coeff1_8 = coefficients1[dof][8];
      new_coeff1_9 = coefficients1[dof][9];
    
      // Loop derivative order
      for (unsigned int j = 0; j < n; j++)
      {
        // Update old coefficients
        coeff0_0 = new_coeff0_0;
        coeff0_1 = new_coeff0_1;
        coeff0_2 = new_coeff0_2;
        coeff0_3 = new_coeff0_3;
        coeff0_4 = new_coeff0_4;
        coeff0_5 = new_coeff0_5;
        coeff0_6 = new_coeff0_6;
        coeff0_7 = new_coeff0_7;
        coeff0_8 = new_coeff0_8;
        coeff0_9 = new_coeff0_9;
        coeff1_0 = new_coeff1_0;
        coeff1_1 = new_coeff1_1;
        coeff1_2 = new_coeff1_2;
        coeff1_3 = new_coeff1_3;
        coeff1_4 = new_coeff1_4;
        coeff1_5 = new_coeff1_5;
        coeff1_6 = new_coeff1_6;
        coeff1_7 = new_coeff1_7;
        coeff1_8 = new_coeff1_8;
        coeff1_9 = new_coeff1_9;
    
        if(combinations[deriv_num][j] == 0)
        {
          new_coeff0_0 = coeff0_0*dmats0[0][0] + coeff0_1*dmats0[1][0] + coeff0_2*dmats0[2][0] + coeff0_3*dmats0[3][0] + coeff0_4*dmats0[4][0] + coeff0_5*dmats0[5][0] + coeff0_6*dmats0[6][0] + coeff0_7*dmats0[7][0] + coeff0_8*dmats0[8][0] + coeff0_9*dmats0[9][0];
          new_coeff0_1 = coeff0_0*dmats0[0][1] + coeff0_1*dmats0[1][1] + coeff0_2*dmats0[2][1] + coeff0_3*dmats0[3][1] + coeff0_4*dmats0[4][1] + coeff0_5*dmats0[5][1] + coeff0_6*dmats0[6][1] + coeff0_7*dmats0[7][1] + coeff0_8*dmats0[8][1] + coeff0_9*dmats0[9][1];
          new_coeff0_2 = coeff0_0*dmats0[0][2] + coeff0_1*dmats0[1][2] + coeff0_2*dmats0[2][2] + coeff0_3*dmats0[3][2] + coeff0_4*dmats0[4][2] + coeff0_5*dmats0[5][2] + coeff0_6*dmats0[6][2] + coeff0_7*dmats0[7][2] + coeff0_8*dmats0[8][2] + coeff0_9*dmats0[9][2];
          new_coeff0_3 = coeff0_0*dmats0[0][3] + coeff0_1*dmats0[1][3] + coeff0_2*dmats0[2][3] + coeff0_3*dmats0[3][3] + coeff0_4*dmats0[4][3] + coeff0_5*dmats0[5][3] + coeff0_6*dmats0[6][3] + coeff0_7*dmats0[7][3] + coeff0_8*dmats0[8][3] + coeff0_9*dmats0[9][3];
          new_coeff0_4 = coeff0_0*dmats0[0][4] + coeff0_1*dmats0[1][4] + coeff0_2*dmats0[2][4] + coeff0_3*dmats0[3][4] + coeff0_4*dmats0[4][4] + coeff0_5*dmats0[5][4] + coeff0_6*dmats0[6][4] + coeff0_7*dmats0[7][4] + coeff0_8*dmats0[8][4] + coeff0_9*dmats0[9][4];
          new_coeff0_5 = coeff0_0*dmats0[0][5] + coeff0_1*dmats0[1][5] + coeff0_2*dmats0[2][5] + coeff0_3*dmats0[3][5] + coeff0_4*dmats0[4][5] + coeff0_5*dmats0[5][5] + coeff0_6*dmats0[6][5] + coeff0_7*dmats0[7][5] + coeff0_8*dmats0[8][5] + coeff0_9*dmats0[9][5];
          new_coeff0_6 = coeff0_0*dmats0[0][6] + coeff0_1*dmats0[1][6] + coeff0_2*dmats0[2][6] + coeff0_3*dmats0[3][6] + coeff0_4*dmats0[4][6] + coeff0_5*dmats0[5][6] + coeff0_6*dmats0[6][6] + coeff0_7*dmats0[7][6] + coeff0_8*dmats0[8][6] + coeff0_9*dmats0[9][6];
          new_coeff0_7 = coeff0_0*dmats0[0][7] + coeff0_1*dmats0[1][7] + coeff0_2*dmats0[2][7] + coeff0_3*dmats0[3][7] + coeff0_4*dmats0[4][7] + coeff0_5*dmats0[5][7] + coeff0_6*dmats0[6][7] + coeff0_7*dmats0[7][7] + coeff0_8*dmats0[8][7] + coeff0_9*dmats0[9][7];
          new_coeff0_8 = coeff0_0*dmats0[0][8] + coeff0_1*dmats0[1][8] + coeff0_2*dmats0[2][8] + coeff0_3*dmats0[3][8] + coeff0_4*dmats0[4][8] + coeff0_5*dmats0[5][8] + coeff0_6*dmats0[6][8] + coeff0_7*dmats0[7][8] + coeff0_8*dmats0[8][8] + coeff0_9*dmats0[9][8];
          new_coeff0_9 = coeff0_0*dmats0[0][9] + coeff0_1*dmats0[1][9] + coeff0_2*dmats0[2][9] + coeff0_3*dmats0[3][9] + coeff0_4*dmats0[4][9] + coeff0_5*dmats0[5][9] + coeff0_6*dmats0[6][9] + coeff0_7*dmats0[7][9] + coeff0_8*dmats0[8][9] + coeff0_9*dmats0[9][9];
          new_coeff1_0 = coeff1_0*dmats0[0][0] + coeff1_1*dmats0[1][0] + coeff1_2*dmats0[2][0] + coeff1_3*dmats0[3][0] + coeff1_4*dmats0[4][0] + coeff1_5*dmats0[5][0] + coeff1_6*dmats0[6][0] + coeff1_7*dmats0[7][0] + coeff1_8*dmats0[8][0] + coeff1_9*dmats0[9][0];
          new_coeff1_1 = coeff1_0*dmats0[0][1] + coeff1_1*dmats0[1][1] + coeff1_2*dmats0[2][1] + coeff1_3*dmats0[3][1] + coeff1_4*dmats0[4][1] + coeff1_5*dmats0[5][1] + coeff1_6*dmats0[6][1] + coeff1_7*dmats0[7][1] + coeff1_8*dmats0[8][1] + coeff1_9*dmats0[9][1];
          new_coeff1_2 = coeff1_0*dmats0[0][2] + coeff1_1*dmats0[1][2] + coeff1_2*dmats0[2][2] + coeff1_3*dmats0[3][2] + coeff1_4*dmats0[4][2] + coeff1_5*dmats0[5][2] + coeff1_6*dmats0[6][2] + coeff1_7*dmats0[7][2] + coeff1_8*dmats0[8][2] + coeff1_9*dmats0[9][2];
          new_coeff1_3 = coeff1_0*dmats0[0][3] + coeff1_1*dmats0[1][3] + coeff1_2*dmats0[2][3] + coeff1_3*dmats0[3][3] + coeff1_4*dmats0[4][3] + coeff1_5*dmats0[5][3] + coeff1_6*dmats0[6][3] + coeff1_7*dmats0[7][3] + coeff1_8*dmats0[8][3] + coeff1_9*dmats0[9][3];
          new_coeff1_4 = coeff1_0*dmats0[0][4] + coeff1_1*dmats0[1][4] + coeff1_2*dmats0[2][4] + coeff1_3*dmats0[3][4] + coeff1_4*dmats0[4][4] + coeff1_5*dmats0[5][4] + coeff1_6*dmats0[6][4] + coeff1_7*dmats0[7][4] + coeff1_8*dmats0[8][4] + coeff1_9*dmats0[9][4];
          new_coeff1_5 = coeff1_0*dmats0[0][5] + coeff1_1*dmats0[1][5] + coeff1_2*dmats0[2][5] + coeff1_3*dmats0[3][5] + coeff1_4*dmats0[4][5] + coeff1_5*dmats0[5][5] + coeff1_6*dmats0[6][5] + coeff1_7*dmats0[7][5] + coeff1_8*dmats0[8][5] + coeff1_9*dmats0[9][5];
          new_coeff1_6 = coeff1_0*dmats0[0][6] + coeff1_1*dmats0[1][6] + coeff1_2*dmats0[2][6] + coeff1_3*dmats0[3][6] + coeff1_4*dmats0[4][6] + coeff1_5*dmats0[5][6] + coeff1_6*dmats0[6][6] + coeff1_7*dmats0[7][6] + coeff1_8*dmats0[8][6] + coeff1_9*dmats0[9][6];
          new_coeff1_7 = coeff1_0*dmats0[0][7] + coeff1_1*dmats0[1][7] + coeff1_2*dmats0[2][7] + coeff1_3*dmats0[3][7] + coeff1_4*dmats0[4][7] + coeff1_5*dmats0[5][7] + coeff1_6*dmats0[6][7] + coeff1_7*dmats0[7][7] + coeff1_8*dmats0[8][7] + coeff1_9*dmats0[9][7];
          new_coeff1_8 = coeff1_0*dmats0[0][8] + coeff1_1*dmats0[1][8] + coeff1_2*dmats0[2][8] + coeff1_3*dmats0[3][8] + coeff1_4*dmats0[4][8] + coeff1_5*dmats0[5][8] + coeff1_6*dmats0[6][8] + coeff1_7*dmats0[7][8] + coeff1_8*dmats0[8][8] + coeff1_9*dmats0[9][8];
          new_coeff1_9 = coeff1_0*dmats0[0][9] + coeff1_1*dmats0[1][9] + coeff1_2*dmats0[2][9] + coeff1_3*dmats0[3][9] + coeff1_4*dmats0[4][9] + coeff1_5*dmats0[5][9] + coeff1_6*dmats0[6][9] + coeff1_7*dmats0[7][9] + coeff1_8*dmats0[8][9] + coeff1_9*dmats0[9][9];
        }
        if(combinations[deriv_num][j] == 1)
        {
          new_coeff0_0 = coeff0_0*dmats1[0][0] + coeff0_1*dmats1[1][0] + coeff0_2*dmats1[2][0] + coeff0_3*dmats1[3][0] + coeff0_4*dmats1[4][0] + coeff0_5*dmats1[5][0] + coeff0_6*dmats1[6][0] + coeff0_7*dmats1[7][0] + coeff0_8*dmats1[8][0] + coeff0_9*dmats1[9][0];
          new_coeff0_1 = coeff0_0*dmats1[0][1] + coeff0_1*dmats1[1][1] + coeff0_2*dmats1[2][1] + coeff0_3*dmats1[3][1] + coeff0_4*dmats1[4][1] + coeff0_5*dmats1[5][1] + coeff0_6*dmats1[6][1] + coeff0_7*dmats1[7][1] + coeff0_8*dmats1[8][1] + coeff0_9*dmats1[9][1];
          new_coeff0_2 = coeff0_0*dmats1[0][2] + coeff0_1*dmats1[1][2] + coeff0_2*dmats1[2][2] + coeff0_3*dmats1[3][2] + coeff0_4*dmats1[4][2] + coeff0_5*dmats1[5][2] + coeff0_6*dmats1[6][2] + coeff0_7*dmats1[7][2] + coeff0_8*dmats1[8][2] + coeff0_9*dmats1[9][2];
          new_coeff0_3 = coeff0_0*dmats1[0][3] + coeff0_1*dmats1[1][3] + coeff0_2*dmats1[2][3] + coeff0_3*dmats1[3][3] + coeff0_4*dmats1[4][3] + coeff0_5*dmats1[5][3] + coeff0_6*dmats1[6][3] + coeff0_7*dmats1[7][3] + coeff0_8*dmats1[8][3] + coeff0_9*dmats1[9][3];
          new_coeff0_4 = coeff0_0*dmats1[0][4] + coeff0_1*dmats1[1][4] + coeff0_2*dmats1[2][4] + coeff0_3*dmats1[3][4] + coeff0_4*dmats1[4][4] + coeff0_5*dmats1[5][4] + coeff0_6*dmats1[6][4] + coeff0_7*dmats1[7][4] + coeff0_8*dmats1[8][4] + coeff0_9*dmats1[9][4];
          new_coeff0_5 = coeff0_0*dmats1[0][5] + coeff0_1*dmats1[1][5] + coeff0_2*dmats1[2][5] + coeff0_3*dmats1[3][5] + coeff0_4*dmats1[4][5] + coeff0_5*dmats1[5][5] + coeff0_6*dmats1[6][5] + coeff0_7*dmats1[7][5] + coeff0_8*dmats1[8][5] + coeff0_9*dmats1[9][5];
          new_coeff0_6 = coeff0_0*dmats1[0][6] + coeff0_1*dmats1[1][6] + coeff0_2*dmats1[2][6] + coeff0_3*dmats1[3][6] + coeff0_4*dmats1[4][6] + coeff0_5*dmats1[5][6] + coeff0_6*dmats1[6][6] + coeff0_7*dmats1[7][6] + coeff0_8*dmats1[8][6] + coeff0_9*dmats1[9][6];
          new_coeff0_7 = coeff0_0*dmats1[0][7] + coeff0_1*dmats1[1][7] + coeff0_2*dmats1[2][7] + coeff0_3*dmats1[3][7] + coeff0_4*dmats1[4][7] + coeff0_5*dmats1[5][7] + coeff0_6*dmats1[6][7] + coeff0_7*dmats1[7][7] + coeff0_8*dmats1[8][7] + coeff0_9*dmats1[9][7];
          new_coeff0_8 = coeff0_0*dmats1[0][8] + coeff0_1*dmats1[1][8] + coeff0_2*dmats1[2][8] + coeff0_3*dmats1[3][8] + coeff0_4*dmats1[4][8] + coeff0_5*dmats1[5][8] + coeff0_6*dmats1[6][8] + coeff0_7*dmats1[7][8] + coeff0_8*dmats1[8][8] + coeff0_9*dmats1[9][8];
          new_coeff0_9 = coeff0_0*dmats1[0][9] + coeff0_1*dmats1[1][9] + coeff0_2*dmats1[2][9] + coeff0_3*dmats1[3][9] + coeff0_4*dmats1[4][9] + coeff0_5*dmats1[5][9] + coeff0_6*dmats1[6][9] + coeff0_7*dmats1[7][9] + coeff0_8*dmats1[8][9] + coeff0_9*dmats1[9][9];
          new_coeff1_0 = coeff1_0*dmats1[0][0] + coeff1_1*dmats1[1][0] + coeff1_2*dmats1[2][0] + coeff1_3*dmats1[3][0] + coeff1_4*dmats1[4][0] + coeff1_5*dmats1[5][0] + coeff1_6*dmats1[6][0] + coeff1_7*dmats1[7][0] + coeff1_8*dmats1[8][0] + coeff1_9*dmats1[9][0];
          new_coeff1_1 = coeff1_0*dmats1[0][1] + coeff1_1*dmats1[1][1] + coeff1_2*dmats1[2][1] + coeff1_3*dmats1[3][1] + coeff1_4*dmats1[4][1] + coeff1_5*dmats1[5][1] + coeff1_6*dmats1[6][1] + coeff1_7*dmats1[7][1] + coeff1_8*dmats1[8][1] + coeff1_9*dmats1[9][1];
          new_coeff1_2 = coeff1_0*dmats1[0][2] + coeff1_1*dmats1[1][2] + coeff1_2*dmats1[2][2] + coeff1_3*dmats1[3][2] + coeff1_4*dmats1[4][2] + coeff1_5*dmats1[5][2] + coeff1_6*dmats1[6][2] + coeff1_7*dmats1[7][2] + coeff1_8*dmats1[8][2] + coeff1_9*dmats1[9][2];
          new_coeff1_3 = coeff1_0*dmats1[0][3] + coeff1_1*dmats1[1][3] + coeff1_2*dmats1[2][3] + coeff1_3*dmats1[3][3] + coeff1_4*dmats1[4][3] + coeff1_5*dmats1[5][3] + coeff1_6*dmats1[6][3] + coeff1_7*dmats1[7][3] + coeff1_8*dmats1[8][3] + coeff1_9*dmats1[9][3];
          new_coeff1_4 = coeff1_0*dmats1[0][4] + coeff1_1*dmats1[1][4] + coeff1_2*dmats1[2][4] + coeff1_3*dmats1[3][4] + coeff1_4*dmats1[4][4] + coeff1_5*dmats1[5][4] + coeff1_6*dmats1[6][4] + coeff1_7*dmats1[7][4] + coeff1_8*dmats1[8][4] + coeff1_9*dmats1[9][4];
          new_coeff1_5 = coeff1_0*dmats1[0][5] + coeff1_1*dmats1[1][5] + coeff1_2*dmats1[2][5] + coeff1_3*dmats1[3][5] + coeff1_4*dmats1[4][5] + coeff1_5*dmats1[5][5] + coeff1_6*dmats1[6][5] + coeff1_7*dmats1[7][5] + coeff1_8*dmats1[8][5] + coeff1_9*dmats1[9][5];
          new_coeff1_6 = coeff1_0*dmats1[0][6] + coeff1_1*dmats1[1][6] + coeff1_2*dmats1[2][6] + coeff1_3*dmats1[3][6] + coeff1_4*dmats1[4][6] + coeff1_5*dmats1[5][6] + coeff1_6*dmats1[6][6] + coeff1_7*dmats1[7][6] + coeff1_8*dmats1[8][6] + coeff1_9*dmats1[9][6];
          new_coeff1_7 = coeff1_0*dmats1[0][7] + coeff1_1*dmats1[1][7] + coeff1_2*dmats1[2][7] + coeff1_3*dmats1[3][7] + coeff1_4*dmats1[4][7] + coeff1_5*dmats1[5][7] + coeff1_6*dmats1[6][7] + coeff1_7*dmats1[7][7] + coeff1_8*dmats1[8][7] + coeff1_9*dmats1[9][7];
          new_coeff1_8 = coeff1_0*dmats1[0][8] + coeff1_1*dmats1[1][8] + coeff1_2*dmats1[2][8] + coeff1_3*dmats1[3][8] + coeff1_4*dmats1[4][8] + coeff1_5*dmats1[5][8] + coeff1_6*dmats1[6][8] + coeff1_7*dmats1[7][8] + coeff1_8*dmats1[8][8] + coeff1_9*dmats1[9][8];
          new_coeff1_9 = coeff1_0*dmats1[0][9] + coeff1_1*dmats1[1][9] + coeff1_2*dmats1[2][9] + coeff1_3*dmats1[3][9] + coeff1_4*dmats1[4][9] + coeff1_5*dmats1[5][9] + coeff1_6*dmats1[6][9] + coeff1_7*dmats1[7][9] + coeff1_8*dmats1[8][9] + coeff1_9*dmats1[9][9];
        }
    
      }
      // Compute derivatives on reference element as dot product of coefficients and basisvalues
      // Correct values by the covariant Piola transform
      const double tmp0_0 = new_coeff0_0*basisvalue0 + new_coeff0_1*basisvalue1 + new_coeff0_2*basisvalue2 + new_coeff0_3*basisvalue3 + new_coeff0_4*basisvalue4 + new_coeff0_5*basisvalue5 + new_coeff0_6*basisvalue6 + new_coeff0_7*basisvalue7 + new_coeff0_8*basisvalue8 + new_coeff0_9*basisvalue9;
      const double tmp0_1 = new_coeff1_0*basisvalue0 + new_coeff1_1*basisvalue1 + new_coeff1_2*basisvalue2 + new_coeff1_3*basisvalue3 + new_coeff1_4*basisvalue4 + new_coeff1_5*basisvalue5 + new_coeff1_6*basisvalue6 + new_coeff1_7*basisvalue7 + new_coeff1_8*basisvalue8 + new_coeff1_9*basisvalue9;
      derivatives[deriv_num] = (Jinv_00*tmp0_0 + Jinv_10*tmp0_1);
      derivatives[num_derivatives + deriv_num] = (Jinv_01*tmp0_0 + Jinv_11*tmp0_1);
    }
    
    // Transform derivatives back to physical element
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        values[row] += transform[row][col]*derivatives[col];
        values[num_derivatives + row] += transform[row][col]*derivatives[num_derivatives + col];
      }
    }
    // Delete pointer to array of derivatives on FIAT element
    delete [] derivatives;
    
    // Delete pointer to array of combinations of derivatives and transform
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      delete [] combinations[row];
      delete [] transform[row];
    }
    
    delete [] combinations;
    delete [] transform;
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis_derivatives() is not yet implemented.");
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // The reference points, direction and weights:
    const static double X[15][16][2] = {{{0.75, 0.25}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0.5, 0.5}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0.25, 0.75}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0, 0.25}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0, 0.5}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0, 0.75}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0.25, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0.5, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0.75, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0.0654669945550145, 0.0571041961145177}, {0.0502101232113698, 0.276843013638124}, {0.028912084224389, 0.583590432368917}, {0.00970378512694614, 0.860240135656219}, {0.311164552244357, 0.0571041961145177}, {0.238648659731443, 0.276843013638124}, {0.137419104134574, 0.583590432368917}, {0.0461220799064521, 0.860240135656219}, {0.631731251641125, 0.0571041961145177}, {0.484508326630433, 0.276843013638124}, {0.278990463496509, 0.583590432368917}, {0.0936377844373285, 0.860240135656219}, {0.877428809330468, 0.0571041961145177}, {0.672946863150506, 0.276843013638124}, {0.387497483406694, 0.583590432368917}, {0.130056079216834, 0.860240135656219}}, {{0.0654669945550145, 0.0571041961145177}, {0.0502101232113698, 0.276843013638124}, {0.028912084224389, 0.583590432368917}, {0.00970378512694614, 0.860240135656219}, {0.311164552244357, 0.0571041961145177}, {0.238648659731443, 0.276843013638124}, {0.137419104134574, 0.583590432368917}, {0.0461220799064521, 0.860240135656219}, {0.631731251641125, 0.0571041961145177}, {0.484508326630433, 0.276843013638124}, {0.278990463496509, 0.583590432368917}, {0.0936377844373285, 0.860240135656219}, {0.877428809330468, 0.0571041961145177}, {0.672946863150506, 0.276843013638124}, {0.387497483406694, 0.583590432368917}, {0.130056079216834, 0.860240135656219}}, {{0.0654669945550145, 0.0571041961145177}, {0.0502101232113698, 0.276843013638124}, {0.028912084224389, 0.583590432368917}, {0.00970378512694614, 0.860240135656219}, {0.311164552244357, 0.0571041961145177}, {0.238648659731443, 0.276843013638124}, {0.137419104134574, 0.583590432368917}, {0.0461220799064521, 0.860240135656219}, {0.631731251641125, 0.0571041961145177}, {0.484508326630433, 0.276843013638124}, {0.278990463496509, 0.583590432368917}, {0.0936377844373285, 0.860240135656219}, {0.877428809330468, 0.0571041961145177}, {0.672946863150506, 0.276843013638124}, {0.387497483406694, 0.583590432368917}, {0.130056079216834, 0.860240135656219}}, {{0.0654669945550145, 0.0571041961145177}, {0.0502101232113698, 0.276843013638124}, {0.028912084224389, 0.583590432368917}, {0.00970378512694614, 0.860240135656219}, {0.311164552244357, 0.0571041961145177}, {0.238648659731443, 0.276843013638124}, {0.137419104134574, 0.583590432368917}, {0.0461220799064521, 0.860240135656219}, {0.631731251641125, 0.0571041961145177}, {0.484508326630433, 0.276843013638124}, {0.278990463496509, 0.583590432368917}, {0.0936377844373285, 0.860240135656219}, {0.877428809330468, 0.0571041961145177}, {0.672946863150506, 0.276843013638124}, {0.387497483406694, 0.583590432368917}, {0.130056079216834, 0.860240135656219}}, {{0.0654669945550145, 0.0571041961145177}, {0.0502101232113698, 0.276843013638124}, {0.028912084224389, 0.583590432368917}, {0.00970378512694614, 0.860240135656219}, {0.311164552244357, 0.0571041961145177}, {0.238648659731443, 0.276843013638124}, {0.137419104134574, 0.583590432368917}, {0.0461220799064521, 0.860240135656219}, {0.631731251641125, 0.0571041961145177}, {0.484508326630433, 0.276843013638124}, {0.278990463496509, 0.583590432368917}, {0.0936377844373285, 0.860240135656219}, {0.877428809330468, 0.0571041961145177}, {0.672946863150506, 0.276843013638124}, {0.387497483406694, 0.583590432368917}, {0.130056079216834, 0.860240135656219}}, {{0.0654669945550145, 0.0571041961145177}, {0.0502101232113698, 0.276843013638124}, {0.028912084224389, 0.583590432368917}, {0.00970378512694614, 0.860240135656219}, {0.311164552244357, 0.0571041961145177}, {0.238648659731443, 0.276843013638124}, {0.137419104134574, 0.583590432368917}, {0.0461220799064521, 0.860240135656219}, {0.631731251641125, 0.0571041961145177}, {0.484508326630433, 0.276843013638124}, {0.278990463496509, 0.583590432368917}, {0.0936377844373285, 0.860240135656219}, {0.877428809330468, 0.0571041961145177}, {0.672946863150506, 0.276843013638124}, {0.387497483406694, 0.583590432368917}, {0.130056079216834, 0.860240135656219}}};
    const static double W[15][16] = {{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101}, {0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101}, {0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101}, {0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101}, {0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101}, {0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101}};
    const static double D[15][16][2] = {{{-1, 1}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{-1, 1}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{-1, 1}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0, 1}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0, 1}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0, 1}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{1, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{1, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{1, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}}, {{-0.703179558498458, 0}, {-0.539305836657196, 0}, {-0.31054406511806, 0}, {-0.104228144085579, 0}, {-0.277618905284931, 0}, {-0.212920717300506, 0}, {-0.122604393655731, 0}, {-0.0411498072024544, 0}, {0.277618905284931, 0}, {0.212920717300506, 0}, {0.122604393655731, 0}, {0.0411498072024544, 0}, {0.703179558498457, 0}, {0.539305836657195, 0}, {0.31054406511806, 0}, {0.104228144085579, 0}}, {{-0.414343705828224, 0}, {-0.0847354795428142, 0}, {0.375385648553375, 0}, {0.790360203484329, 0}, {-0.414343705828224, 0}, {-0.0847354795428142, 0}, {0.375385648553375, 0}, {0.790360203484329, 0}, {-0.414343705828224, 0}, {-0.0847354795428142, 0}, {0.375385648553375, 0}, {0.790360203484329, 0}, {-0.414343705828224, 0}, {-0.0847354795428142, 0}, {0.375385648553375, 0}, {0.790360203484329, 0}}, {{0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}}, {{0, -0.703179558498458}, {0, -0.539305836657196}, {0, -0.31054406511806}, {0, -0.104228144085579}, {0, -0.277618905284931}, {0, -0.212920717300506}, {0, -0.122604393655731}, {0, -0.0411498072024544}, {0, 0.277618905284931}, {0, 0.212920717300506}, {0, 0.122604393655731}, {0, 0.0411498072024544}, {0, 0.703179558498457}, {0, 0.539305836657195}, {0, 0.31054406511806}, {0, 0.104228144085579}}, {{0, -0.414343705828224}, {0, -0.0847354795428142}, {0, 0.375385648553375}, {0, 0.790360203484329}, {0, -0.414343705828224}, {0, -0.0847354795428142}, {0, 0.375385648553375}, {0, 0.790360203484329}, {0, -0.414343705828224}, {0, -0.0847354795428142}, {0, 0.375385648553375}, {0, 0.790360203484329}, {0, -0.414343705828224}, {0, -0.0847354795428142}, {0, 0.375385648553375}, {0, 0.790360203484329}}};
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    double copyofvalues[2];
    double result = 0.0;
    // Iterate over the points:
    static const unsigned int ns[15] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 16, 16, 16, 16, 16, 16};
    for (unsigned int j = 0; j < ns[i]; j++) {
      // Evaluate basis functions for affine mapping
      const double w0 = 1.0 - X[i][j][0] - X[i][j][1];
      const double w1 = X[i][j][0];
      const double w2 = X[i][j][1];
      
      // Compute affine mapping y = F(X)
      double y[2];
      y[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0];
      y[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1];
      
      // Evaluate function at physical points
      double values[2];
      f.evaluate(values, y, c);
      
      // Map function values using appropriate mapping
      // Copy old values:
      copyofvalues[0] = values[0];
      copyofvalues[1] = values[1];
      // Do the inverse of curl piola 
      values[0] = J_00*copyofvalues[0]+J_10*copyofvalues[1];
      values[1] = J_01*copyofvalues[0]+J_11*copyofvalues[1];
    
      // Note that we do not map the weights (yet).
    
      // Take directional components
      for(int k = 0; k < 2; k++)
        result += values[k]*D[i][j][k];
      // Multiply by weights 
      result *= W[i][j];
    
    } // End for
    return result;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
      
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
      
    // Compute inverse of Jacobian
    const double Jinv_00 =  J_11 / detJ;
    const double Jinv_01 = -J_01 / detJ;
    const double Jinv_10 = -J_10 / detJ;
    const double Jinv_11 =  J_00 / detJ;
    // Evaluate at vertices and use Piola mapping
    vertex_values[0] = (dof_values[3]*3*Jinv_10 + dof_values[4]*(-3*Jinv_10) + dof_values[5]*Jinv_10 + dof_values[6]*3*Jinv_00 + dof_values[7]*(-3*Jinv_00) + dof_values[8]*Jinv_00);
    vertex_values[2] = (dof_values[0]*3*Jinv_10 + dof_values[1]*(-3*Jinv_10) + dof_values[2]*Jinv_10 + dof_values[6]*(Jinv_00 + Jinv_10) + dof_values[7]*(-3*Jinv_00 - 3*Jinv_10) + dof_values[8]*(3*Jinv_00 + 3*Jinv_10));
    vertex_values[4] = (dof_values[0]*Jinv_00 + dof_values[1]*3*Jinv_00 + dof_values[2]*(-3*Jinv_00) + dof_values[3]*(Jinv_00 + Jinv_10) + dof_values[4]*(-3*Jinv_00 - 3*Jinv_10) + dof_values[5]*(3*Jinv_00 + 3*Jinv_10));
    vertex_values[1] = (dof_values[3]*3*Jinv_11 + dof_values[4]*(-3*Jinv_11) + dof_values[5]*Jinv_11 + dof_values[6]*3*Jinv_01 + dof_values[7]*(-3*Jinv_01) + dof_values[8]*Jinv_01);
    vertex_values[3] = (dof_values[0]*3*Jinv_11 + dof_values[1]*(-3*Jinv_11) + dof_values[2]*Jinv_11 + dof_values[6]*(Jinv_01 + Jinv_11) + dof_values[7]*(-3*Jinv_01 - 3*Jinv_11) + dof_values[8]*(3*Jinv_01 + 3*Jinv_11));
    vertex_values[5] = (dof_values[0]*Jinv_01 + dof_values[1]*3*Jinv_01 + dof_values[2]*(-3*Jinv_01) + dof_values[3]*(Jinv_01 + Jinv_11) + dof_values[4]*(-3*Jinv_01 - 3*Jinv_11) + dof_values[5]*(3*Jinv_01 + 3*Jinv_11));
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new UFC_Forms_0_finite_element_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class UFC_Forms_0_dof_map_0: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  UFC_Forms_0_dof_map_0() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~UFC_Forms_0_dof_map_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for Nedelec finite element of degree 3 on a triangle";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return false;
      break;
    case 1:
      return true;
      break;
    case 2:
      return true;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = 3*m.num_entities[1] + 6*m.num_entities[2];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space
  virtual unsigned int local_dimension() const
  {
    return 15;
  }

  // Return the geometric dimension of the coordinates this dof map provides
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 3;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = 3*c.entity_indices[1][0];
    dofs[1] = 3*c.entity_indices[1][0] + 1;
    dofs[2] = 3*c.entity_indices[1][0] + 2;
    dofs[3] = 3*c.entity_indices[1][1];
    dofs[4] = 3*c.entity_indices[1][1] + 1;
    dofs[5] = 3*c.entity_indices[1][1] + 2;
    dofs[6] = 3*c.entity_indices[1][2];
    dofs[7] = 3*c.entity_indices[1][2] + 1;
    dofs[8] = 3*c.entity_indices[1][2] + 2;
    unsigned int offset = 3*m.num_entities[1];
    dofs[9] = offset + 6*c.entity_indices[2][0];
    dofs[10] = offset + 6*c.entity_indices[2][0] + 1;
    dofs[11] = offset + 6*c.entity_indices[2][0] + 2;
    dofs[12] = offset + 6*c.entity_indices[2][0] + 3;
    dofs[13] = offset + 6*c.entity_indices[2][0] + 4;
    dofs[14] = offset + 6*c.entity_indices[2][0] + 5;
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      break;
    case 1:
      dofs[0] = 3;
      dofs[1] = 4;
      dofs[2] = 5;
      break;
    case 2:
      dofs[0] = 6;
      dofs[1] = 7;
      dofs[2] = 8;
      break;
    }
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    coordinates[0][0] = 0.75*x[1][0] + 0.25*x[2][0];
    coordinates[0][1] = 0.75*x[1][1] + 0.25*x[2][1];
    coordinates[1][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[1][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[2][0] = 0.25*x[1][0] + 0.75*x[2][0];
    coordinates[2][1] = 0.25*x[1][1] + 0.75*x[2][1];
    coordinates[3][0] = 0.75*x[0][0] + 0.25*x[2][0];
    coordinates[3][1] = 0.75*x[0][1] + 0.25*x[2][1];
    coordinates[4][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[4][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[5][0] = 0.25*x[0][0] + 0.75*x[2][0];
    coordinates[5][1] = 0.25*x[0][1] + 0.75*x[2][1];
    coordinates[6][0] = 0.75*x[0][0] + 0.25*x[1][0];
    coordinates[6][1] = 0.75*x[0][1] + 0.25*x[1][1];
    coordinates[7][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[7][1] = 0.5*x[0][1] + 0.5*x[1][1];
    coordinates[8][0] = 0.25*x[0][0] + 0.75*x[1][0];
    coordinates[8][1] = 0.25*x[0][1] + 0.75*x[1][1];
    coordinates[9][0] = 0.877428809330468*x[0][0] + 0.0654669945550145*x[1][0] + 0.0571041961145176*x[2][0];
    coordinates[9][1] = 0.877428809330468*x[0][1] + 0.0654669945550145*x[1][1] + 0.0571041961145176*x[2][1];
    coordinates[10][0] = 0.877428809330468*x[0][0] + 0.0654669945550145*x[1][0] + 0.0571041961145176*x[2][0];
    coordinates[10][1] = 0.877428809330468*x[0][1] + 0.0654669945550145*x[1][1] + 0.0571041961145176*x[2][1];
    coordinates[11][0] = 0.877428809330468*x[0][0] + 0.0654669945550145*x[1][0] + 0.0571041961145176*x[2][0];
    coordinates[11][1] = 0.877428809330468*x[0][1] + 0.0654669945550145*x[1][1] + 0.0571041961145176*x[2][1];
    coordinates[12][0] = 0.877428809330468*x[0][0] + 0.0654669945550145*x[1][0] + 0.0571041961145176*x[2][0];
    coordinates[12][1] = 0.877428809330468*x[0][1] + 0.0654669945550145*x[1][1] + 0.0571041961145176*x[2][1];
    coordinates[13][0] = 0.877428809330468*x[0][0] + 0.0654669945550145*x[1][0] + 0.0571041961145176*x[2][0];
    coordinates[13][1] = 0.877428809330468*x[0][1] + 0.0654669945550145*x[1][1] + 0.0571041961145176*x[2][1];
    coordinates[14][0] = 0.877428809330468*x[0][0] + 0.0654669945550145*x[1][0] + 0.0571041961145176*x[2][0];
    coordinates[14][1] = 0.877428809330468*x[0][1] + 0.0654669945550145*x[1][1] + 0.0571041961145176*x[2][1];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new UFC_Forms_0_dof_map_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class UFC_Forms_0_dof_map_1: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  UFC_Forms_0_dof_map_1() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~UFC_Forms_0_dof_map_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for Nedelec finite element of degree 3 on a triangle";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return false;
      break;
    case 1:
      return true;
      break;
    case 2:
      return true;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = 3*m.num_entities[1] + 6*m.num_entities[2];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space
  virtual unsigned int local_dimension() const
  {
    return 15;
  }

  // Return the geometric dimension of the coordinates this dof map provides
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 3;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = 3*c.entity_indices[1][0];
    dofs[1] = 3*c.entity_indices[1][0] + 1;
    dofs[2] = 3*c.entity_indices[1][0] + 2;
    dofs[3] = 3*c.entity_indices[1][1];
    dofs[4] = 3*c.entity_indices[1][1] + 1;
    dofs[5] = 3*c.entity_indices[1][1] + 2;
    dofs[6] = 3*c.entity_indices[1][2];
    dofs[7] = 3*c.entity_indices[1][2] + 1;
    dofs[8] = 3*c.entity_indices[1][2] + 2;
    unsigned int offset = 3*m.num_entities[1];
    dofs[9] = offset + 6*c.entity_indices[2][0];
    dofs[10] = offset + 6*c.entity_indices[2][0] + 1;
    dofs[11] = offset + 6*c.entity_indices[2][0] + 2;
    dofs[12] = offset + 6*c.entity_indices[2][0] + 3;
    dofs[13] = offset + 6*c.entity_indices[2][0] + 4;
    dofs[14] = offset + 6*c.entity_indices[2][0] + 5;
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      break;
    case 1:
      dofs[0] = 3;
      dofs[1] = 4;
      dofs[2] = 5;
      break;
    case 2:
      dofs[0] = 6;
      dofs[1] = 7;
      dofs[2] = 8;
      break;
    }
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    coordinates[0][0] = 0.75*x[1][0] + 0.25*x[2][0];
    coordinates[0][1] = 0.75*x[1][1] + 0.25*x[2][1];
    coordinates[1][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[1][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[2][0] = 0.25*x[1][0] + 0.75*x[2][0];
    coordinates[2][1] = 0.25*x[1][1] + 0.75*x[2][1];
    coordinates[3][0] = 0.75*x[0][0] + 0.25*x[2][0];
    coordinates[3][1] = 0.75*x[0][1] + 0.25*x[2][1];
    coordinates[4][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[4][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[5][0] = 0.25*x[0][0] + 0.75*x[2][0];
    coordinates[5][1] = 0.25*x[0][1] + 0.75*x[2][1];
    coordinates[6][0] = 0.75*x[0][0] + 0.25*x[1][0];
    coordinates[6][1] = 0.75*x[0][1] + 0.25*x[1][1];
    coordinates[7][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[7][1] = 0.5*x[0][1] + 0.5*x[1][1];
    coordinates[8][0] = 0.25*x[0][0] + 0.75*x[1][0];
    coordinates[8][1] = 0.25*x[0][1] + 0.75*x[1][1];
    coordinates[9][0] = 0.877428809330468*x[0][0] + 0.0654669945550145*x[1][0] + 0.0571041961145176*x[2][0];
    coordinates[9][1] = 0.877428809330468*x[0][1] + 0.0654669945550145*x[1][1] + 0.0571041961145176*x[2][1];
    coordinates[10][0] = 0.877428809330468*x[0][0] + 0.0654669945550145*x[1][0] + 0.0571041961145176*x[2][0];
    coordinates[10][1] = 0.877428809330468*x[0][1] + 0.0654669945550145*x[1][1] + 0.0571041961145176*x[2][1];
    coordinates[11][0] = 0.877428809330468*x[0][0] + 0.0654669945550145*x[1][0] + 0.0571041961145176*x[2][0];
    coordinates[11][1] = 0.877428809330468*x[0][1] + 0.0654669945550145*x[1][1] + 0.0571041961145176*x[2][1];
    coordinates[12][0] = 0.877428809330468*x[0][0] + 0.0654669945550145*x[1][0] + 0.0571041961145176*x[2][0];
    coordinates[12][1] = 0.877428809330468*x[0][1] + 0.0654669945550145*x[1][1] + 0.0571041961145176*x[2][1];
    coordinates[13][0] = 0.877428809330468*x[0][0] + 0.0654669945550145*x[1][0] + 0.0571041961145176*x[2][0];
    coordinates[13][1] = 0.877428809330468*x[0][1] + 0.0654669945550145*x[1][1] + 0.0571041961145176*x[2][1];
    coordinates[14][0] = 0.877428809330468*x[0][0] + 0.0654669945550145*x[1][0] + 0.0571041961145176*x[2][0];
    coordinates[14][1] = 0.877428809330468*x[0][1] + 0.0654669945550145*x[1][1] + 0.0571041961145176*x[2][1];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new UFC_Forms_0_dof_map_1();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class UFC_Forms_0_cell_integral_0: public ufc::cell_integral
{
public:

  /// Constructor
  UFC_Forms_0_cell_integral_0() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Forms_0_cell_integral_0()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
      
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
      
    // Compute inverse of Jacobian
    const double Jinv_00 =  J_11 / detJ;
    const double Jinv_01 = -J_01 / detJ;
    const double Jinv_10 = -J_10 / detJ;
    const double Jinv_11 =  J_00 / detJ;
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Number of operations to compute element tensor = 14367
    // Compute geometry tensors
    // Number of operations to compute decalrations = 256
    const double G0_0_0_0_0 = det*(Jinv_01*Jinv_00*Jinv_01*Jinv_00 + Jinv_00*Jinv_01*Jinv_00*Jinv_01);
    const double G0_0_0_0_1 = det*(Jinv_01*Jinv_00*Jinv_01*Jinv_10 + Jinv_00*Jinv_01*Jinv_00*Jinv_11);
    const double G0_0_0_1_0 = det*(Jinv_01*Jinv_00*Jinv_11*Jinv_00 + Jinv_00*Jinv_01*Jinv_10*Jinv_01);
    const double G0_0_0_1_1 = det*(Jinv_01*Jinv_00*Jinv_11*Jinv_10 + Jinv_00*Jinv_01*Jinv_10*Jinv_11);
    const double G0_0_1_0_0 = det*(Jinv_01*Jinv_10*Jinv_01*Jinv_00 + Jinv_00*Jinv_11*Jinv_00*Jinv_01);
    const double G0_0_1_0_1 = det*(Jinv_01*Jinv_10*Jinv_01*Jinv_10 + Jinv_00*Jinv_11*Jinv_00*Jinv_11);
    const double G0_0_1_1_0 = det*(Jinv_01*Jinv_10*Jinv_11*Jinv_00 + Jinv_00*Jinv_11*Jinv_10*Jinv_01);
    const double G0_0_1_1_1 = det*(Jinv_01*Jinv_10*Jinv_11*Jinv_10 + Jinv_00*Jinv_11*Jinv_10*Jinv_11);
    const double G0_1_0_0_0 = det*(Jinv_11*Jinv_00*Jinv_01*Jinv_00 + Jinv_10*Jinv_01*Jinv_00*Jinv_01);
    const double G0_1_0_0_1 = det*(Jinv_11*Jinv_00*Jinv_01*Jinv_10 + Jinv_10*Jinv_01*Jinv_00*Jinv_11);
    const double G0_1_0_1_0 = det*(Jinv_11*Jinv_00*Jinv_11*Jinv_00 + Jinv_10*Jinv_01*Jinv_10*Jinv_01);
    const double G0_1_0_1_1 = det*(Jinv_11*Jinv_00*Jinv_11*Jinv_10 + Jinv_10*Jinv_01*Jinv_10*Jinv_11);
    const double G0_1_1_0_0 = det*(Jinv_11*Jinv_10*Jinv_01*Jinv_00 + Jinv_10*Jinv_11*Jinv_00*Jinv_01);
    const double G0_1_1_0_1 = det*(Jinv_11*Jinv_10*Jinv_01*Jinv_10 + Jinv_10*Jinv_11*Jinv_00*Jinv_11);
    const double G0_1_1_1_0 = det*(Jinv_11*Jinv_10*Jinv_11*Jinv_00 + Jinv_10*Jinv_11*Jinv_10*Jinv_01);
    const double G0_1_1_1_1 = det*(Jinv_11*Jinv_10*Jinv_11*Jinv_10 + Jinv_10*Jinv_11*Jinv_10*Jinv_11);
    const double G1_0_0_0_0 = det*(Jinv_01*Jinv_00*Jinv_00*Jinv_01 + Jinv_00*Jinv_01*Jinv_01*Jinv_00);
    const double G1_0_0_0_1 = det*(Jinv_01*Jinv_00*Jinv_00*Jinv_11 + Jinv_00*Jinv_01*Jinv_01*Jinv_10);
    const double G1_0_0_1_0 = det*(Jinv_01*Jinv_00*Jinv_10*Jinv_01 + Jinv_00*Jinv_01*Jinv_11*Jinv_00);
    const double G1_0_0_1_1 = det*(Jinv_01*Jinv_00*Jinv_10*Jinv_11 + Jinv_00*Jinv_01*Jinv_11*Jinv_10);
    const double G1_0_1_0_0 = det*(Jinv_01*Jinv_10*Jinv_00*Jinv_01 + Jinv_00*Jinv_11*Jinv_01*Jinv_00);
    const double G1_0_1_0_1 = det*(Jinv_01*Jinv_10*Jinv_00*Jinv_11 + Jinv_00*Jinv_11*Jinv_01*Jinv_10);
    const double G1_0_1_1_0 = det*(Jinv_01*Jinv_10*Jinv_10*Jinv_01 + Jinv_00*Jinv_11*Jinv_11*Jinv_00);
    const double G1_0_1_1_1 = det*(Jinv_01*Jinv_10*Jinv_10*Jinv_11 + Jinv_00*Jinv_11*Jinv_11*Jinv_10);
    const double G1_1_0_0_0 = det*(Jinv_11*Jinv_00*Jinv_00*Jinv_01 + Jinv_10*Jinv_01*Jinv_01*Jinv_00);
    const double G1_1_0_0_1 = det*(Jinv_11*Jinv_00*Jinv_00*Jinv_11 + Jinv_10*Jinv_01*Jinv_01*Jinv_10);
    const double G1_1_0_1_0 = det*(Jinv_11*Jinv_00*Jinv_10*Jinv_01 + Jinv_10*Jinv_01*Jinv_11*Jinv_00);
    const double G1_1_0_1_1 = det*(Jinv_11*Jinv_00*Jinv_10*Jinv_11 + Jinv_10*Jinv_01*Jinv_11*Jinv_10);
    const double G1_1_1_0_0 = det*(Jinv_11*Jinv_10*Jinv_00*Jinv_01 + Jinv_10*Jinv_11*Jinv_01*Jinv_00);
    const double G1_1_1_0_1 = det*(Jinv_11*Jinv_10*Jinv_00*Jinv_11 + Jinv_10*Jinv_11*Jinv_01*Jinv_10);
    const double G1_1_1_1_0 = det*(Jinv_11*Jinv_10*Jinv_10*Jinv_01 + Jinv_10*Jinv_11*Jinv_11*Jinv_00);
    const double G1_1_1_1_1 = det*(Jinv_11*Jinv_10*Jinv_10*Jinv_11 + Jinv_10*Jinv_11*Jinv_11*Jinv_10);
    
    // Compute element tensor
    // Number of operations to compute tensor = 14111
    A[0] = 2.63333333333334*G0_0_0_0_0 + 0.358333333333337*G0_0_0_0_1 - 0.608333333333337*G0_0_0_1_0 - 0.608333333333333*G0_0_0_1_1 + 0.358333333333337*G0_0_1_0_0 + 0.858333333333335*G0_0_1_0_1 - 1.875*G0_0_1_1_0 - 0.608333333333333*G0_0_1_1_1 - 0.608333333333336*G0_1_0_0_0 - 1.875*G0_1_0_0_1 + 6.19166666666665*G0_1_0_1_0 + 1.69166666666666*G0_1_0_1_1 - 0.608333333333333*G0_1_1_0_0 - 0.608333333333333*G0_1_1_0_1 + 1.69166666666666*G0_1_1_1_0 + 0.633333333333331*G0_1_1_1_1 - 2.63333333333334*G1_0_0_0_0 - 0.358333333333337*G1_0_0_0_1 + 0.608333333333337*G1_0_0_1_0 + 0.608333333333333*G1_0_0_1_1 - 0.358333333333337*G1_0_1_0_0 - 0.858333333333335*G1_0_1_0_1 + 1.875*G1_0_1_1_0 + 0.608333333333333*G1_0_1_1_1 + 0.608333333333336*G1_1_0_0_0 + 1.875*G1_1_0_0_1 - 6.19166666666665*G1_1_0_1_0 - 1.69166666666666*G1_1_0_1_1 + 0.608333333333333*G1_1_1_0_0 + 0.608333333333333*G1_1_1_0_1 - 1.69166666666666*G1_1_1_1_0 - 0.633333333333331*G1_1_1_1_1;
    A[1] = -2.01666666666667*G0_0_0_0_0 + 1.11666666666666*G0_0_0_0_1 - 0.616666666666666*G0_0_0_1_0 - 0.616666666666669*G0_0_0_1_1 + 0.283333333333332*G0_0_1_0_0 - 0.8*G0_0_1_0_1 + 0.999999999999998*G0_0_1_1_0 - 0.616666666666668*G0_0_1_1_1 + 0.216666666666668*G0_1_0_0_0 + 1.66666666666666*G0_1_0_0_1 - 3.46666666666666*G0_1_0_1_0 + 2.78333333333333*G0_1_0_1_1 + 0.216666666666666*G0_1_1_0_0 + 0.216666666666667*G0_1_1_0_1 - 0.716666666666664*G0_1_1_1_0 + 0.816666666666664*G0_1_1_1_1 + 2.01666666666667*G1_0_0_0_0 - 1.11666666666666*G1_0_0_0_1 + 0.616666666666666*G1_0_0_1_0 + 0.616666666666669*G1_0_0_1_1 - 0.283333333333332*G1_0_1_0_0 + 0.8*G1_0_1_0_1 - 0.999999999999998*G1_0_1_1_0 + 0.616666666666668*G1_0_1_1_1 - 0.216666666666668*G1_1_0_0_0 - 1.66666666666666*G1_1_0_0_1 + 3.46666666666666*G1_1_0_1_0 - 2.78333333333333*G1_1_0_1_1 - 0.216666666666666*G1_1_1_0_0 - 0.216666666666667*G1_1_1_0_1 + 0.716666666666664*G1_1_1_1_0 - 0.816666666666664*G1_1_1_1_1;
    A[2] = -0.0333333333333318*G0_0_0_0_0 - 0.891666666666663*G0_0_0_0_1 - 0.191666666666668*G0_0_0_1_0 - 0.191666666666667*G0_0_0_1_1 + 0.441666666666667*G0_0_1_0_0 + 1.275*G0_0_1_0_1 - 0.791666666666666*G0_0_1_1_0 - 0.191666666666666*G0_0_1_1_1 - 0.191666666666666*G0_1_0_0_0 - 0.791666666666665*G0_1_0_0_1 + 1.275*G0_1_0_1_0 - 0.891666666666665*G0_1_0_1_1 - 0.191666666666667*G0_1_1_0_0 - 0.191666666666667*G0_1_1_0_1 + 0.441666666666665*G0_1_1_1_0 - 0.0333333333333323*G0_1_1_1_1 + 0.0333333333333318*G1_0_0_0_0 + 0.891666666666663*G1_0_0_0_1 + 0.191666666666668*G1_0_0_1_0 + 0.191666666666667*G1_0_0_1_1 - 0.441666666666667*G1_0_1_0_0 - 1.275*G1_0_1_0_1 + 0.791666666666666*G1_0_1_1_0 + 0.191666666666666*G1_0_1_1_1 + 0.191666666666666*G1_1_0_0_0 + 0.791666666666665*G1_1_0_0_1 - 1.275*G1_1_0_1_0 + 0.891666666666665*G1_1_0_1_1 + 0.191666666666667*G1_1_1_0_0 + 0.191666666666667*G1_1_1_0_1 - 0.441666666666665*G1_1_1_1_0 + 0.0333333333333323*G1_1_1_1_1;
    A[3] = -1.59166666666667*G0_0_0_0_0 - 0.650000000000003*G0_0_0_0_1 - 2.28333333333334*G0_0_0_1_0 - 0.650000000000004*G0_0_0_1_1 - 0.941666666666669*G0_0_1_0_0 - 1.29583333333334*G0_0_1_0_1 - 0.112500000000006*G0_0_1_1_0 - 0.46666666666667*G0_0_1_1_1 + 0.691666666666667*G0_1_0_0_0 + 1.52083333333333*G0_1_0_0_1 - 1.09583333333333*G0_1_0_1_0 - 0.266666666666664*G0_1_0_1_1 + 0.691666666666666*G0_1_1_0_0 + 0.691666666666666*G0_1_1_0_1 + 0.691666666666668*G0_1_1_1_0 + 0.508333333333335*G0_1_1_1_1 + 1.59166666666667*G1_0_0_0_0 + 0.650000000000003*G1_0_0_0_1 + 2.28333333333334*G1_0_0_1_0 + 0.650000000000004*G1_0_0_1_1 + 0.941666666666669*G1_0_1_0_0 + 1.29583333333334*G1_0_1_0_1 + 0.112500000000006*G1_0_1_1_0 + 0.46666666666667*G1_0_1_1_1 - 0.691666666666667*G1_1_0_0_0 - 1.52083333333333*G1_1_0_0_1 + 1.09583333333333*G1_1_0_1_0 + 0.266666666666664*G1_1_0_1_1 - 0.691666666666666*G1_1_1_0_0 - 0.691666666666666*G1_1_1_0_1 - 0.691666666666668*G1_1_1_1_0 - 0.508333333333335*G1_1_1_1_1;
    A[4] = -0.0666666666666635*G0_0_0_0_0 - 0.533333333333329*G0_0_0_0_1 - 0.0999999999999971*G0_0_0_1_0 - 0.533333333333328*G0_0_0_1_1 + 0.883333333333335*G0_0_1_0_0 + 1.675*G0_0_1_0_1 + 0.14166666666667*G0_0_1_1_0 + 0.933333333333336*G0_0_1_1_1 - 0.383333333333333*G0_1_0_0_0 - 0.958333333333334*G0_1_0_0_1 + 0.441666666666665*G0_1_0_1_0 - 0.133333333333334*G0_1_0_1_1 - 0.383333333333334*G0_1_1_0_0 - 0.383333333333334*G0_1_1_0_1 - 0.383333333333334*G0_1_1_1_0 - 0.600000000000002*G0_1_1_1_1 + 0.0666666666666635*G1_0_0_0_0 + 0.533333333333329*G1_0_0_0_1 + 0.0999999999999971*G1_0_0_1_0 + 0.533333333333328*G1_0_0_1_1 - 0.883333333333335*G1_0_1_0_0 - 1.675*G1_0_1_0_1 - 0.14166666666667*G1_0_1_1_0 - 0.933333333333336*G1_0_1_1_1 + 0.383333333333333*G1_1_0_0_0 + 0.958333333333334*G1_1_0_0_1 - 0.441666666666665*G1_1_0_1_0 + 0.133333333333334*G1_1_0_1_1 + 0.383333333333334*G1_1_1_0_0 + 0.383333333333334*G1_1_1_0_1 + 0.383333333333334*G1_1_1_1_0 + 0.600000000000002*G1_1_1_1_1;
    A[5] = -1.00833333333334*G0_0_0_0_0 + 1.18333333333333*G0_0_0_0_1 - 2.11666666666667*G0_0_0_1_0 + 1.18333333333333*G0_0_0_1_1 + 0.141666666666666*G0_0_1_0_0 - 0.8375*G0_0_1_0_1 + 0.512499999999997*G0_0_1_1_0 - 0.466666666666668*G0_0_1_1_1 + 0.108333333333334*G0_1_0_0_0 + 1.14583333333333*G0_1_0_0_1 - 0.637499999999996*G0_1_0_1_0 + 0.400000000000002*G0_1_0_1_1 + 0.108333333333334*G0_1_1_0_0 + 0.108333333333334*G0_1_1_0_1 + 0.108333333333334*G0_1_1_1_0 + 0.0916666666666693*G0_1_1_1_1 + 1.00833333333334*G1_0_0_0_0 - 1.18333333333333*G1_0_0_0_1 + 2.11666666666667*G1_0_0_1_0 - 1.18333333333333*G1_0_0_1_1 - 0.141666666666666*G1_0_1_0_0 + 0.8375*G1_0_1_0_1 - 0.512499999999997*G1_0_1_1_0 + 0.466666666666668*G1_0_1_1_1 - 0.108333333333334*G1_1_0_0_0 - 1.14583333333333*G1_1_0_0_1 + 0.637499999999996*G1_1_0_1_0 - 0.400000000000002*G1_1_0_1_1 - 0.108333333333334*G1_1_1_0_0 - 0.108333333333334*G1_1_1_0_1 - 0.108333333333334*G1_1_1_1_0 - 0.0916666666666693*G1_1_1_1_1;
    A[6] = -1.09166666666667*G0_0_0_0_0 - 1.10833333333334*G0_0_0_0_1 - 1.10833333333334*G0_0_0_1_0 - 1.10833333333334*G0_0_0_1_1 - 0.733333333333336*G0_0_1_0_0 - 0.362500000000003*G0_0_1_0_1 - 1.47916666666667*G0_0_1_1_0 - 1.10833333333334*G0_0_1_1_1 + 2.13333333333333*G0_1_0_0_0 + 1.15416666666667*G0_1_0_0_1 + 3.17083333333333*G0_1_0_1_0 + 2.19166666666666*G0_1_0_1_1 + 1.15*G0_1_1_0_0 + 1.11666666666667*G0_1_1_0_1 + 1.15*G0_1_1_1_0 + 1.00833333333333*G0_1_1_1_1 + 1.09166666666667*G1_0_0_0_0 + 1.10833333333334*G1_0_0_0_1 + 1.10833333333334*G1_0_0_1_0 + 1.10833333333334*G1_0_0_1_1 + 0.733333333333336*G1_0_1_0_0 + 0.362500000000003*G1_0_1_0_1 + 1.47916666666667*G1_0_1_1_0 + 1.10833333333334*G1_0_1_1_1 - 2.13333333333333*G1_1_0_0_0 - 1.15416666666667*G1_1_0_0_1 - 3.17083333333333*G1_1_0_1_0 - 2.19166666666666*G1_1_0_1_1 - 1.15*G1_1_1_0_0 - 1.11666666666667*G1_1_1_0_1 - 1.15*G1_1_1_1_0 - 1.00833333333333*G1_1_1_1_1;
    A[7] = 2.60000000000001*G0_0_0_0_0 + 1.21666666666667*G0_0_0_0_1 + 1.21666666666667*G0_0_0_1_0 + 1.21666666666667*G0_0_0_1_1 + 1.46666666666667*G0_0_1_0_0 + 0.308333333333336*G0_0_1_0_1 + 2.375*G0_0_1_1_0 + 1.21666666666667*G0_0_1_1_1 - 4.93333333333333*G0_1_0_0_0 - 1.05833333333333*G0_1_0_0_1 - 7.25833333333332*G0_1_0_1_0 - 3.38333333333332*G0_1_0_1_1 - 2.13333333333333*G0_1_1_0_0 - 0.899999999999998*G0_1_1_0_1 - 2.13333333333333*G0_1_1_1_0 - 1.26666666666666*G0_1_1_1_1 - 2.60000000000001*G1_0_0_0_0 - 1.21666666666667*G1_0_0_0_1 - 1.21666666666667*G1_0_0_1_0 - 1.21666666666667*G1_0_0_1_1 - 1.46666666666667*G1_0_1_0_0 - 0.308333333333336*G1_0_1_0_1 - 2.375*G1_0_1_1_0 - 1.21666666666667*G1_0_1_1_1 + 4.93333333333333*G1_1_0_0_0 + 1.05833333333333*G1_1_0_0_1 + 7.25833333333332*G1_1_0_1_0 + 3.38333333333332*G1_1_0_1_1 + 2.13333333333333*G1_1_1_0_0 + 0.899999999999998*G1_1_1_0_1 + 2.13333333333333*G1_1_1_1_0 + 1.26666666666666*G1_1_1_1_1;
    A[8] = -1.50833333333333*G0_0_0_0_0 + 0.308333333333337*G0_0_0_0_1 + 0.308333333333332*G0_0_0_1_0 + 0.308333333333336*G0_0_0_1_1 - 0.733333333333335*G0_0_1_0_0 + 0.762500000000001*G0_0_1_0_1 - 1.1875*G0_0_1_1_0 + 0.308333333333335*G0_0_1_1_1 + 2.8*G0_1_0_0_0 - 2.8875*G0_1_0_0_1 + 4.29583333333332*G0_1_0_1_0 - 1.39166666666667*G0_1_0_1_1 + 0.983333333333331*G0_1_1_0_0 - 0.716666666666665*G0_1_1_0_1 + 0.983333333333329*G0_1_1_1_0 - 0.408333333333333*G0_1_1_1_1 + 1.50833333333333*G1_0_0_0_0 - 0.308333333333337*G1_0_0_0_1 - 0.308333333333332*G1_0_0_1_0 - 0.308333333333336*G1_0_0_1_1 + 0.733333333333335*G1_0_1_0_0 - 0.762500000000001*G1_0_1_0_1 + 1.1875*G1_0_1_1_0 - 0.308333333333335*G1_0_1_1_1 - 2.8*G1_1_0_0_0 + 2.8875*G1_1_0_0_1 - 4.29583333333332*G1_1_0_1_0 + 1.39166666666667*G1_1_0_1_1 - 0.983333333333331*G1_1_1_0_0 + 0.716666666666665*G1_1_1_0_1 - 0.983333333333329*G1_1_1_1_0 + 0.408333333333333*G1_1_1_1_1;
    A[9] = 0.824957911384313*G0_0_0_0_0 + 0.235702260395518*G0_0_0_0_1 - 2.59272486435068*G0_0_0_1_0 - 2.59272486435068*G0_0_0_1_1 + 1.53206469257086*G0_0_1_0_0 + 0.883883476483187*G0_0_1_0_1 - 1.94454364826301*G0_0_1_1_0 - 2.59272486435068*G0_0_1_1_1 - 0.824957911384306*G0_1_0_0_0 + 2.53379929925179*G0_1_0_0_1 + 5.36222642399798*G0_1_0_1_0 + 8.72098363463407*G0_1_0_1_1 - 0.824957911384306*G0_1_1_0_0 - 0.117851130197762*G0_1_1_0_1 + 2.00346921336188*G0_1_1_1_0 + 2.94627825494394*G0_1_1_1_1 - 0.824957911384313*G1_0_0_0_0 - 0.235702260395518*G1_0_0_0_1 + 2.59272486435068*G1_0_0_1_0 + 2.59272486435068*G1_0_0_1_1 - 1.53206469257086*G1_0_1_0_0 - 0.883883476483187*G1_0_1_0_1 + 1.94454364826301*G1_0_1_1_0 + 2.59272486435068*G1_0_1_1_1 + 0.824957911384306*G1_1_0_0_0 - 2.53379929925179*G1_1_0_0_1 - 5.36222642399798*G1_1_0_1_0 - 8.72098363463407*G1_1_0_1_1 + 0.824957911384306*G1_1_1_0_0 + 0.117851130197762*G1_1_1_0_1 - 2.00346921336188*G1_1_1_1_0 - 2.94627825494394*G1_1_1_1_1;
    A[10] = 5.48482755730144*G0_0_0_0_0 + 0.360843918243511*G0_0_0_0_1 - 5.26832120635534*G0_0_0_1_0 - 5.26832120635535*G0_0_0_1_1 + 0.0721687836487067*G0_0_1_0_0 - 0.866025403784442*G0_0_1_0_1 - 4.3301270189222*G0_0_1_1_0 - 5.26832120635534*G0_0_1_1_1 + 0.360843918243508*G0_1_0_0_0 + 5.77350269189624*G0_1_0_0_1 + 9.237604307034*G0_1_0_1_0 + 14.6502630806867*G0_1_0_1_1 + 0.360843918243511*G0_1_1_0_0 + 2.52590742770461*G0_1_1_0_1 + 3.82494553338126*G0_1_1_1_0 + 5.48482755730143*G0_1_1_1_1 - 5.48482755730144*G1_0_0_0_0 - 0.360843918243511*G1_0_0_0_1 + 5.26832120635534*G1_0_0_1_0 + 5.26832120635535*G1_0_0_1_1 - 0.0721687836487067*G1_0_1_0_0 + 0.866025403784442*G1_0_1_0_1 + 4.3301270189222*G1_0_1_1_0 + 5.26832120635534*G1_0_1_1_1 - 0.360843918243508*G1_1_0_0_0 - 5.77350269189624*G1_1_0_0_1 - 9.237604307034*G1_1_0_1_0 - 14.6502630806867*G1_1_0_1_1 - 0.360843918243511*G1_1_1_0_0 - 2.52590742770461*G1_1_1_0_1 - 3.82494553338126*G1_1_1_1_0 - 5.48482755730143*G1_1_1_1_1;
    A[11] = -3.41666666666667*G0_0_0_0_0 + 0.791666666666671*G0_0_0_0_1 + 0.0416666666666668*G0_0_0_1_0 + 0.0416666666666684*G0_0_0_1_1 + 1.20833333333333*G0_0_1_0_0 + 1.875*G0_0_1_0_1 - 0.625*G0_0_1_1_0 + 0.0416666666666662*G0_0_1_1_1 + 0.0416666666666712*G0_1_0_0_0 - 2.45833333333333*G0_1_0_0_1 - 2.95833333333332*G0_1_0_1_0 - 5.45833333333332*G0_1_0_1_1 + 0.0416666666666667*G0_1_1_0_0 + 0.291666666666669*G0_1_1_0_1 - 0.45833333333333*G0_1_1_1_0 - 0.916666666666659*G0_1_1_1_1 + 3.41666666666667*G1_0_0_0_0 - 0.791666666666671*G1_0_0_0_1 - 0.0416666666666668*G1_0_0_1_0 - 0.0416666666666684*G1_0_0_1_1 - 1.20833333333333*G1_0_1_0_0 - 1.875*G1_0_1_0_1 + 0.625*G1_0_1_1_0 - 0.0416666666666662*G1_0_1_1_1 - 0.0416666666666712*G1_1_0_0_0 + 2.45833333333333*G1_1_0_0_1 + 2.95833333333332*G1_1_0_1_0 + 5.45833333333332*G1_1_0_1_1 - 0.0416666666666667*G1_1_1_0_0 - 0.291666666666669*G1_1_1_0_1 + 0.45833333333333*G1_1_1_1_0 + 0.916666666666659*G1_1_1_1_1;
    A[12] = 2.94627825494395*G0_0_0_0_0 - 0.824957911384309*G0_0_0_0_1 + 8.36743024404082*G0_0_0_1_0 + 2.00346921336189*G0_0_0_1_1 - 1.64991582276861*G0_0_1_0_0 - 1.23743686707646*G0_0_1_0_1 + 1.59099025766974*G0_0_1_1_0 + 2.00346921336189*G0_0_1_1_1 + 0.235702260395514*G0_1_0_0_0 - 1.00173460668094*G0_1_0_0_1 - 3.83016173142714*G0_1_0_1_0 - 5.06759859850358*G0_1_0_1_1 + 0.235702260395517*G0_1_1_0_0 + 0.235702260395516*G0_1_1_0_1 - 2.59272486435067*G0_1_1_1_0 - 2.00346921336188*G0_1_1_1_1 - 2.94627825494395*G1_0_0_0_0 + 0.824957911384309*G1_0_0_0_1 - 8.36743024404082*G1_0_0_1_0 - 2.00346921336189*G1_0_0_1_1 + 1.64991582276861*G1_0_1_0_0 + 1.23743686707646*G1_0_1_0_1 - 1.59099025766974*G1_0_1_1_0 - 2.00346921336189*G1_0_1_1_1 - 0.235702260395514*G1_1_0_0_0 + 1.00173460668094*G1_1_0_0_1 + 3.83016173142714*G1_1_0_1_0 + 5.06759859850358*G1_1_0_1_1 - 0.235702260395517*G1_1_1_0_0 - 0.235702260395516*G1_1_1_0_1 + 2.59272486435067*G1_1_1_1_0 + 2.00346921336188*G1_1_1_1_1;
    A[13] = -8.44374768689829*G0_0_0_0_0 - 3.68060796608387*G0_0_0_0_1 - 3.68060796608387*G0_0_0_1_0 + 1.94855715851499*G0_0_0_1_1 - 2.59807621135333*G0_0_1_0_0 - 3.1393420887186*G0_0_1_0_1 + 2.48982303588025*G0_0_1_1_0 + 1.94855715851498*G0_0_1_1_1 + 2.59807621135332*G0_1_0_0_0 + 5.95392465101801*G0_1_0_0_1 - 10.9335707227785*G0_1_0_1_0 - 7.57772228311381*G0_1_0_1_1 + 2.59807621135331*G0_1_1_0_0 + 2.59807621135331*G0_1_1_0_1 - 0.866025403784431*G0_1_1_1_0 - 1.94855715851498*G0_1_1_1_1 + 8.44374768689829*G1_0_0_0_0 + 3.68060796608387*G1_0_0_0_1 + 3.68060796608387*G1_0_0_1_0 - 1.94855715851499*G1_0_0_1_1 + 2.59807621135333*G1_0_1_0_0 + 3.1393420887186*G1_0_1_0_1 - 2.48982303588025*G1_0_1_1_0 - 1.94855715851498*G1_0_1_1_1 - 2.59807621135332*G1_1_0_0_0 - 5.95392465101801*G1_1_0_0_1 + 10.9335707227785*G1_1_0_1_0 + 7.57772228311381*G1_1_0_1_1 - 2.59807621135331*G1_1_1_0_0 - 2.59807621135331*G1_1_1_0_1 + 0.866025403784431*G1_1_1_1_0 + 1.94855715851498*G1_1_1_1_1;
    A[14] = 5.20833333333333*G0_0_0_0_0 - 1.45833333333334*G0_0_0_0_1 + 5.04166666666666*G0_0_0_1_0 - 0.708333333333333*G0_0_0_1_1 - 2.91666666666667*G0_0_1_0_0 - 2.1875*G0_0_1_0_1 - 1.4375*G0_0_1_1_0 - 0.708333333333335*G0_0_1_1_1 + 0.416666666666664*G0_1_0_0_0 - 1.77083333333333*G0_1_0_0_1 + 3.97916666666665*G0_1_0_1_0 + 1.79166666666665*G0_1_0_1_1 + 0.416666666666668*G0_1_1_0_0 + 0.416666666666666*G0_1_1_0_1 + 0.916666666666665*G0_1_1_1_0 + 1.45833333333332*G0_1_1_1_1 - 5.20833333333333*G1_0_0_0_0 + 1.45833333333334*G1_0_0_0_1 - 5.04166666666666*G1_0_0_1_0 + 0.708333333333333*G1_0_0_1_1 + 2.91666666666667*G1_0_1_0_0 + 2.1875*G1_0_1_0_1 + 1.4375*G1_0_1_1_0 + 0.708333333333335*G1_0_1_1_1 - 0.416666666666664*G1_1_0_0_0 + 1.77083333333333*G1_1_0_0_1 - 3.97916666666665*G1_1_0_1_0 - 1.79166666666665*G1_1_0_1_1 - 0.416666666666668*G1_1_1_0_0 - 0.416666666666666*G1_1_1_0_1 - 0.916666666666665*G1_1_1_1_0 - 1.45833333333332*G1_1_1_1_1;
    A[15] = -2.01666666666667*G0_0_0_0_0 + 0.283333333333332*G0_0_0_0_1 + 0.216666666666668*G0_0_0_1_0 + 0.216666666666666*G0_0_0_1_1 + 1.11666666666666*G0_0_1_0_0 - 0.8*G0_0_1_0_1 + 1.66666666666666*G0_0_1_1_0 + 0.216666666666667*G0_0_1_1_1 - 0.616666666666666*G0_1_0_0_0 + 0.999999999999998*G0_1_0_0_1 - 3.46666666666666*G0_1_0_1_0 - 0.716666666666664*G0_1_0_1_1 - 0.616666666666669*G0_1_1_0_0 - 0.616666666666668*G0_1_1_0_1 + 2.78333333333333*G0_1_1_1_0 + 0.816666666666664*G0_1_1_1_1 + 2.01666666666667*G1_0_0_0_0 - 0.283333333333332*G1_0_0_0_1 - 0.216666666666668*G1_0_0_1_0 - 0.216666666666666*G1_0_0_1_1 - 1.11666666666666*G1_0_1_0_0 + 0.8*G1_0_1_0_1 - 1.66666666666666*G1_0_1_1_0 - 0.216666666666667*G1_0_1_1_1 + 0.616666666666666*G1_1_0_0_0 - 0.999999999999998*G1_1_0_0_1 + 3.46666666666666*G1_1_0_1_0 + 0.716666666666664*G1_1_0_1_1 + 0.616666666666669*G1_1_1_0_0 + 0.616666666666668*G1_1_1_0_1 - 2.78333333333333*G1_1_1_1_0 - 0.816666666666664*G1_1_1_1_1;
    A[16] = 2.53333333333333*G0_0_0_0_0 - 1.73333333333333*G0_0_0_0_1 + 0.733333333333333*G0_0_0_1_0 + 0.733333333333334*G0_0_0_1_1 - 1.73333333333333*G0_0_1_0_0 + 2.76666666666666*G0_0_1_0_1 - 2.16666666666666*G0_0_1_1_0 + 0.733333333333335*G0_0_1_1_1 + 0.733333333333333*G0_1_0_0_0 - 2.16666666666666*G0_1_0_0_1 + 2.76666666666666*G0_1_0_1_0 - 1.73333333333333*G0_1_0_1_1 + 0.733333333333334*G0_1_1_0_0 + 0.733333333333335*G0_1_1_0_1 - 1.73333333333333*G0_1_1_1_0 + 2.53333333333333*G0_1_1_1_1 - 2.53333333333333*G1_0_0_0_0 + 1.73333333333333*G1_0_0_0_1 - 0.733333333333333*G1_0_0_1_0 - 0.733333333333334*G1_0_0_1_1 + 1.73333333333333*G1_0_1_0_0 - 2.76666666666666*G1_0_1_0_1 + 2.16666666666666*G1_0_1_1_0 - 0.733333333333335*G1_0_1_1_1 - 0.733333333333333*G1_1_0_0_0 + 2.16666666666666*G1_1_0_0_1 - 2.76666666666666*G1_1_0_1_0 + 1.73333333333333*G1_1_0_1_1 - 0.733333333333334*G1_1_1_0_0 - 0.733333333333335*G1_1_1_0_1 + 1.73333333333333*G1_1_1_1_0 - 2.53333333333333*G1_1_1_1_1;
    A[17] = 0.816666666666666*G0_0_0_0_0 + 2.78333333333333*G0_0_0_0_1 - 0.616666666666665*G0_0_0_1_0 - 0.616666666666666*G0_0_0_1_1 - 0.716666666666666*G0_0_1_0_0 - 3.46666666666666*G0_0_1_0_1 + 0.999999999999999*G0_0_1_1_0 - 0.616666666666666*G0_0_1_1_1 + 0.216666666666666*G0_1_0_0_0 + 1.66666666666666*G0_1_0_0_1 - 0.799999999999998*G0_1_0_1_0 + 1.11666666666666*G0_1_0_1_1 + 0.216666666666665*G0_1_1_0_0 + 0.216666666666663*G0_1_1_0_1 + 0.283333333333335*G0_1_1_1_0 - 2.01666666666666*G0_1_1_1_1 - 0.816666666666666*G1_0_0_0_0 - 2.78333333333333*G1_0_0_0_1 + 0.616666666666665*G1_0_0_1_0 + 0.616666666666666*G1_0_0_1_1 + 0.716666666666666*G1_0_1_0_0 + 3.46666666666666*G1_0_1_0_1 - 0.999999999999999*G1_0_1_1_0 + 0.616666666666666*G1_0_1_1_1 - 0.216666666666666*G1_1_0_0_0 - 1.66666666666666*G1_1_0_0_1 + 0.799999999999998*G1_1_0_1_0 - 1.11666666666666*G1_1_0_1_1 - 0.216666666666665*G1_1_1_0_0 - 0.216666666666663*G1_1_1_0_1 - 0.283333333333335*G1_1_1_1_0 + 2.01666666666666*G1_1_1_1_1;
    A[18] = -0.0666666666666649*G0_0_0_0_0 - 0.95*G0_0_0_0_1 + 0.316666666666669*G0_0_0_1_0 - 0.949999999999999*G0_0_0_1_1 + 0.466666666666667*G0_0_1_0_0 + 1.25833333333333*G0_0_1_0_1 - 0.108333333333331*G0_0_1_1_0 + 0.683333333333334*G0_0_1_1_1 + 0.0333333333333343*G0_1_0_0_0 - 0.708333333333332*G0_1_0_0_1 + 0.858333333333331*G0_1_0_1_0 + 0.116666666666666*G0_1_0_1_1 + 0.0333333333333359*G0_1_1_0_0 + 0.0333333333333361*G0_1_1_0_1 + 0.0333333333333344*G0_1_1_1_0 - 0.183333333333332*G0_1_1_1_1 + 0.0666666666666649*G1_0_0_0_0 + 0.95*G1_0_0_0_1 - 0.316666666666669*G1_0_0_1_0 + 0.949999999999999*G1_0_0_1_1 - 0.466666666666667*G1_0_1_0_0 - 1.25833333333333*G1_0_1_0_1 + 0.108333333333331*G1_0_1_1_0 - 0.683333333333334*G1_0_1_1_1 - 0.0333333333333343*G1_1_0_0_0 + 0.708333333333332*G1_1_0_0_1 - 0.858333333333331*G1_1_0_1_0 - 0.116666666666666*G1_1_0_1_1 - 0.0333333333333359*G1_1_1_0_0 - 0.0333333333333361*G1_1_1_0_1 - 0.0333333333333344*G1_1_1_1_0 + 0.183333333333332*G1_1_1_1_1;
    A[19] = 1.63333333333333*G0_0_0_0_0 + 3.06666666666666*G0_0_0_0_1 + 1.2*G0_0_0_1_0 + 3.06666666666666*G0_0_0_1_1 - 1.43333333333333*G0_0_1_0_0 - 3.68333333333333*G0_0_1_0_1 - 0.283333333333334*G0_0_1_1_0 - 2.53333333333333*G0_0_1_1_1 + 0.433333333333332*G0_1_0_0_0 + 1.58333333333333*G0_1_0_0_1 - 0.216666666666666*G0_1_0_1_0 + 0.933333333333332*G0_1_0_1_1 + 0.433333333333331*G0_1_1_0_0 + 0.433333333333328*G0_1_1_0_1 + 0.433333333333334*G0_1_1_1_0 + 1.2*G0_1_1_1_1 - 1.63333333333333*G1_0_0_0_0 - 3.06666666666666*G1_0_0_0_1 - 1.2*G1_0_0_1_0 - 3.06666666666666*G1_0_0_1_1 + 1.43333333333333*G1_0_1_0_0 + 3.68333333333333*G1_0_1_0_1 + 0.283333333333334*G1_0_1_1_0 + 2.53333333333333*G1_0_1_1_1 - 0.433333333333332*G1_1_0_0_0 - 1.58333333333333*G1_1_0_0_1 + 0.216666666666666*G1_1_0_1_0 - 0.933333333333332*G1_1_0_1_1 - 0.433333333333331*G1_1_1_0_0 - 0.433333333333328*G1_1_1_0_1 - 0.433333333333334*G1_1_1_1_0 - 1.2*G1_1_1_1_1;
    A[20] = 1.26666666666667*G0_0_0_0_0 - 2.11666666666666*G0_0_0_0_1 + 2.48333333333333*G0_0_0_1_0 - 2.11666666666667*G0_0_0_1_1 - 0.866666666666666*G0_0_1_0_0 + 3.00833333333333*G0_0_1_0_1 - 2.025*G0_0_1_1_0 + 1.85*G0_0_1_1_1 + 0.366666666666667*G0_1_0_0_0 - 1.95833333333333*G0_1_0_0_1 + 1.275*G0_1_0_1_0 - 1.05*G0_1_0_1_1 + 0.366666666666667*G0_1_1_0_0 + 0.366666666666669*G0_1_1_0_1 + 0.366666666666666*G0_1_1_1_0 - 1.01666666666666*G0_1_1_1_1 - 1.26666666666667*G1_0_0_0_0 + 2.11666666666666*G1_0_0_0_1 - 2.48333333333333*G1_0_0_1_0 + 2.11666666666667*G1_0_0_1_1 + 0.866666666666666*G1_0_1_0_0 - 3.00833333333333*G1_0_1_0_1 + 2.025*G1_0_1_1_0 - 1.85*G1_0_1_1_1 - 0.366666666666667*G1_1_0_0_0 + 1.95833333333333*G1_1_0_0_1 - 1.275*G1_1_0_1_0 + 1.05*G1_1_0_1_1 - 0.366666666666667*G1_1_1_0_0 - 0.366666666666669*G1_1_1_0_1 - 0.366666666666666*G1_1_1_1_0 + 1.01666666666666*G1_1_1_1_1;
    A[21] = 0.183333333333338*G0_0_0_0_0 - 0.033333333333333*G0_0_0_0_1 - 0.0333333333333307*G0_0_0_1_0 - 0.0333333333333326*G0_0_0_1_1 - 0.116666666666667*G0_0_1_0_0 - 0.858333333333331*G0_0_1_0_1 + 0.708333333333332*G0_0_1_1_0 - 0.033333333333331*G0_0_1_1_1 - 0.683333333333332*G0_1_0_0_0 + 0.108333333333332*G0_1_0_0_1 - 1.25833333333333*G0_1_0_1_0 - 0.466666666666667*G0_1_0_1_1 + 0.950000000000001*G0_1_1_0_0 - 0.316666666666668*G0_1_1_0_1 + 0.950000000000001*G0_1_1_1_0 + 0.0666666666666708*G0_1_1_1_1 - 0.183333333333338*G1_0_0_0_0 + 0.033333333333333*G1_0_0_0_1 + 0.0333333333333307*G1_0_0_1_0 + 0.0333333333333326*G1_0_0_1_1 + 0.116666666666667*G1_0_1_0_0 + 0.858333333333331*G1_0_1_0_1 - 0.708333333333332*G1_0_1_1_0 + 0.033333333333331*G1_0_1_1_1 + 0.683333333333332*G1_1_0_0_0 - 0.108333333333332*G1_1_0_0_1 + 1.25833333333333*G1_1_0_1_0 + 0.466666666666667*G1_1_0_1_1 - 0.950000000000001*G1_1_1_0_0 + 0.316666666666668*G1_1_1_0_1 - 0.950000000000001*G1_1_1_1_0 - 0.0666666666666708*G1_1_1_1_1;
    A[22] = -1.2*G0_0_0_0_0 - 0.433333333333333*G0_0_0_0_1 - 0.433333333333335*G0_0_0_1_0 - 0.433333333333333*G0_0_0_1_1 - 0.933333333333335*G0_0_1_0_0 + 0.216666666666664*G0_0_1_0_1 - 1.58333333333333*G0_0_1_1_0 - 0.433333333333335*G0_0_1_1_1 + 2.53333333333333*G0_1_0_0_0 + 0.283333333333333*G0_1_0_0_1 + 3.68333333333332*G0_1_0_1_0 + 1.43333333333333*G0_1_0_1_1 - 3.06666666666666*G0_1_1_0_0 - 1.2*G0_1_1_0_1 - 3.06666666666666*G0_1_1_1_0 - 1.63333333333333*G0_1_1_1_1 + 1.2*G1_0_0_0_0 + 0.433333333333333*G1_0_0_0_1 + 0.433333333333335*G1_0_0_1_0 + 0.433333333333333*G1_0_0_1_1 + 0.933333333333335*G1_0_1_0_0 - 0.216666666666664*G1_0_1_0_1 + 1.58333333333333*G1_0_1_1_0 + 0.433333333333335*G1_0_1_1_1 - 2.53333333333333*G1_1_0_0_0 - 0.283333333333333*G1_1_0_0_1 - 3.68333333333332*G1_1_0_1_0 - 1.43333333333333*G1_1_0_1_1 + 3.06666666666666*G1_1_1_0_0 + 1.2*G1_1_1_0_1 + 3.06666666666666*G1_1_1_1_0 + 1.63333333333333*G1_1_1_1_1;
    A[23] = 1.01666666666667*G0_0_0_0_0 - 0.366666666666669*G0_0_0_0_1 - 0.366666666666667*G0_0_0_1_0 - 0.366666666666668*G0_0_0_1_1 + 1.05*G0_0_1_0_0 - 1.275*G0_0_1_0_1 + 1.95833333333333*G0_0_1_1_0 - 0.366666666666667*G0_0_1_1_1 - 1.85*G0_1_0_0_0 + 2.025*G0_1_0_0_1 - 3.00833333333332*G0_1_0_1_0 + 0.866666666666667*G0_1_0_1_1 + 2.11666666666666*G0_1_1_0_0 - 2.48333333333333*G0_1_1_0_1 + 2.11666666666666*G0_1_1_1_0 - 1.26666666666667*G0_1_1_1_1 - 1.01666666666667*G1_0_0_0_0 + 0.366666666666669*G1_0_0_0_1 + 0.366666666666667*G1_0_0_1_0 + 0.366666666666668*G1_0_0_1_1 - 1.05*G1_0_1_0_0 + 1.275*G1_0_1_0_1 - 1.95833333333333*G1_0_1_1_0 + 0.366666666666667*G1_0_1_1_1 + 1.85*G1_1_0_0_0 - 2.025*G1_1_0_0_1 + 3.00833333333332*G1_1_0_1_0 - 0.866666666666667*G1_1_0_1_1 - 2.11666666666666*G1_1_1_0_0 + 2.48333333333333*G1_1_1_0_1 - 2.11666666666666*G1_1_1_1_0 + 1.26666666666667*G1_1_1_1_1;
    A[24] = 1.88561808316412*G0_0_0_0_0 + 3.06412938514171*G0_0_0_0_1 + 1.64991582276861*G0_0_0_1_0 + 1.64991582276861*G0_0_0_1_1 - 1.88561808316412*G0_0_1_0_0 + 0.58925565098879*G0_0_1_0_1 - 0.8249579113843*G0_0_1_1_0 + 1.64991582276861*G0_0_1_1_1 + 0.47140452079103*G0_1_0_0_0 - 2.71057599454843*G0_1_0_0_1 - 1.29636243217534*G0_1_0_1_0 - 4.47834294751479*G0_1_0_1_1 + 0.471404520791026*G0_1_1_0_0 + 6.1282587702834*G0_1_1_0_1 + 1.88561808316413*G0_1_1_1_0 + 5.89255650988789*G0_1_1_1_1 - 1.88561808316412*G1_0_0_0_0 - 3.06412938514171*G1_0_0_0_1 - 1.64991582276861*G1_0_0_1_0 - 1.64991582276861*G1_0_0_1_1 + 1.88561808316412*G1_0_1_0_0 - 0.58925565098879*G1_0_1_0_1 + 0.8249579113843*G1_0_1_1_0 - 1.64991582276861*G1_0_1_1_1 - 0.47140452079103*G1_1_0_0_0 + 2.71057599454843*G1_1_0_0_1 + 1.29636243217534*G1_1_0_1_0 + 4.47834294751479*G1_1_0_1_1 - 0.471404520791026*G1_1_1_0_0 - 6.1282587702834*G1_1_1_0_1 - 1.88561808316413*G1_1_1_1_0 - 5.89255650988789*G1_1_1_1_1;
    A[25] = -4.4744645862196*G0_0_0_0_0 - 0.72168783648703*G0_0_0_0_1 + 1.87638837486629*G0_0_0_1_0 + 1.87638837486629*G0_0_0_1_1 - 1.58771324027147*G0_0_1_0_0 + 1.01036297108185*G0_0_1_0_1 - 0.721687836487029*G0_0_1_1_0 + 1.87638837486629*G0_0_1_1_1 + 0.721687836487033*G0_1_0_0_0 - 3.60843918243516*G0_1_0_0_1 - 1.87638837486628*G0_1_0_1_0 - 6.20651539378846*G0_1_0_1_1 + 0.721687836487028*G0_1_1_0_0 + 5.05181485540921*G0_1_1_0_1 + 2.45373864405592*G0_1_1_1_0 + 7.07254079757291*G0_1_1_1_1 + 4.4744645862196*G1_0_0_0_0 + 0.72168783648703*G1_0_0_0_1 - 1.87638837486629*G1_0_0_1_0 - 1.87638837486629*G1_0_0_1_1 + 1.58771324027147*G1_0_1_0_0 - 1.01036297108185*G1_0_1_0_1 + 0.721687836487029*G1_0_1_1_0 - 1.87638837486629*G1_0_1_1_1 - 0.721687836487033*G1_1_0_0_0 + 3.60843918243516*G1_1_0_0_1 + 1.87638837486628*G1_1_0_1_0 + 6.20651539378846*G1_1_0_1_1 - 0.721687836487028*G1_1_1_0_0 - 5.05181485540921*G1_1_1_0_1 - 2.45373864405592*G1_1_1_1_0 - 7.07254079757291*G1_1_1_1_1;
    A[26] = 5.58333333333334*G0_0_0_0_0 + 0.916666666666659*G0_0_0_0_1 - 2.58333333333333*G0_0_0_1_0 - 2.58333333333333*G0_0_0_1_1 - 4.08333333333333*G0_0_1_0_0 - 8.33333333333332*G0_0_1_0_1 + 1.66666666666666*G0_0_1_1_0 - 2.58333333333333*G0_0_1_1_1 + 1.58333333333333*G0_1_0_0_0 + 5.33333333333332*G0_1_0_0_1 + 1.33333333333333*G0_1_0_1_0 + 5.08333333333332*G0_1_0_1_1 + 1.58333333333333*G0_1_1_0_0 - 3.91666666666667*G0_1_1_0_1 - 2.41666666666666*G0_1_1_1_0 - 8.58333333333332*G0_1_1_1_1 - 5.58333333333334*G1_0_0_0_0 - 0.916666666666659*G1_0_0_0_1 + 2.58333333333333*G1_0_0_1_0 + 2.58333333333333*G1_0_0_1_1 + 4.08333333333333*G1_0_1_0_0 + 8.33333333333332*G1_0_1_0_1 - 1.66666666666666*G1_0_1_1_0 + 2.58333333333333*G1_0_1_1_1 - 1.58333333333333*G1_1_0_0_0 - 5.33333333333332*G1_1_0_0_1 - 1.33333333333333*G1_1_0_1_0 - 5.08333333333332*G1_1_0_1_1 - 1.58333333333333*G1_1_1_0_0 + 3.91666666666667*G1_1_1_0_1 + 2.41666666666666*G1_1_1_1_0 + 8.58333333333332*G1_1_1_1_1;
    A[27] = -5.8925565098879*G0_0_0_0_0 - 1.88561808316412*G0_0_0_0_1 - 6.12825877028342*G0_0_0_1_0 - 0.471404520791033*G0_0_0_1_1 + 4.4783429475148*G0_0_1_0_0 + 1.29636243217533*G0_0_1_0_1 + 2.71057599454843*G0_0_1_1_0 - 0.471404520791034*G0_0_1_1_1 - 1.64991582276861*G0_1_0_0_0 + 0.824957911384305*G0_1_0_0_1 - 0.589255650988789*G0_1_0_1_0 + 1.88561808316412*G0_1_0_1_1 - 1.64991582276861*G0_1_1_0_0 - 1.6499158227686*G0_1_1_0_1 - 3.06412938514171*G0_1_1_1_0 - 1.88561808316413*G0_1_1_1_1 + 5.8925565098879*G1_0_0_0_0 + 1.88561808316412*G1_0_0_0_1 + 6.12825877028342*G1_0_0_1_0 + 0.471404520791033*G1_0_0_1_1 - 4.4783429475148*G1_0_1_0_0 - 1.29636243217533*G1_0_1_0_1 - 2.71057599454843*G1_0_1_1_0 + 0.471404520791034*G1_0_1_1_1 + 1.64991582276861*G1_1_0_0_0 - 0.824957911384305*G1_1_0_0_1 + 0.589255650988789*G1_1_0_1_0 - 1.88561808316412*G1_1_0_1_1 + 1.64991582276861*G1_1_1_0_0 + 1.6499158227686*G1_1_1_0_1 + 3.06412938514171*G1_1_1_1_0 + 1.88561808316413*G1_1_1_1_1;
    A[28] = 3.89711431702998*G0_0_0_0_0 + 0.866025403784436*G0_0_0_0_1 + 0.866025403784441*G0_0_0_1_0 - 1.73205080756888*G0_0_0_1_1 - 1.29903810567666*G0_0_1_0_0 - 0.216506350946103*G0_0_1_0_1 - 2.81458256229942*G0_0_1_1_0 - 1.73205080756887*G0_0_1_1_1 + 1.29903810567666*G0_1_0_0_0 - 1.08253175473055*G0_1_0_0_1 + 6.71169687932938*G0_1_0_1_0 + 4.33012701892218*G0_1_0_1_1 + 1.29903810567667*G0_1_1_0_0 + 1.29903810567666*G0_1_1_0_1 - 0.433012701892216*G0_1_1_1_0 - 2.59807621135331*G0_1_1_1_1 - 3.89711431702998*G1_0_0_0_0 - 0.866025403784436*G1_0_0_0_1 - 0.866025403784441*G1_0_0_1_0 + 1.73205080756888*G1_0_0_1_1 + 1.29903810567666*G1_0_1_0_0 + 0.216506350946103*G1_0_1_0_1 + 2.81458256229942*G1_0_1_1_0 + 1.73205080756887*G1_0_1_1_1 - 1.29903810567666*G1_1_0_0_0 + 1.08253175473055*G1_1_0_0_1 - 6.71169687932938*G1_1_0_1_0 - 4.33012701892218*G1_1_0_1_1 - 1.29903810567667*G1_1_1_0_0 - 1.29903810567666*G1_1_1_0_1 + 0.433012701892216*G1_1_1_1_0 + 2.59807621135331*G1_1_1_1_1;
    A[29] = -10.4166666666667*G0_0_0_0_0 - 3.33333333333333*G0_0_0_0_1 - 6.33333333333333*G0_0_0_1_0 + 0.166666666666664*G0_0_0_1_1 + 7.91666666666666*G0_0_1_0_0 + 2.29166666666666*G0_0_1_0_1 + 5.79166666666666*G0_0_1_1_0 + 0.166666666666667*G0_0_1_1_1 - 2.91666666666666*G0_1_0_0_0 + 1.45833333333333*G0_1_0_0_1 - 5.04166666666666*G0_1_0_1_0 - 0.666666666666658*G0_1_0_1_1 - 2.91666666666666*G0_1_1_0_0 - 2.91666666666666*G0_1_1_0_1 + 1.08333333333333*G0_1_1_1_0 + 6.66666666666665*G0_1_1_1_1 + 10.4166666666667*G1_0_0_0_0 + 3.33333333333333*G1_0_0_0_1 + 6.33333333333333*G1_0_0_1_0 - 0.166666666666664*G1_0_0_1_1 - 7.91666666666666*G1_0_1_0_0 - 2.29166666666666*G1_0_1_0_1 - 5.79166666666666*G1_0_1_1_0 - 0.166666666666667*G1_0_1_1_1 + 2.91666666666666*G1_1_0_0_0 - 1.45833333333333*G1_1_0_0_1 + 5.04166666666666*G1_1_0_1_0 + 0.666666666666658*G1_1_0_1_1 + 2.91666666666666*G1_1_1_0_0 + 2.91666666666666*G1_1_1_0_1 - 1.08333333333333*G1_1_1_1_0 - 6.66666666666665*G1_1_1_1_1;
    A[30] = -0.0333333333333318*G0_0_0_0_0 + 0.441666666666667*G0_0_0_0_1 - 0.191666666666666*G0_0_0_1_0 - 0.191666666666667*G0_0_0_1_1 - 0.891666666666663*G0_0_1_0_0 + 1.275*G0_0_1_0_1 - 0.791666666666665*G0_0_1_1_0 - 0.191666666666667*G0_0_1_1_1 - 0.191666666666668*G0_1_0_0_0 - 0.791666666666666*G0_1_0_0_1 + 1.275*G0_1_0_1_0 + 0.441666666666665*G0_1_0_1_1 - 0.191666666666667*G0_1_1_0_0 - 0.191666666666666*G0_1_1_0_1 - 0.891666666666665*G0_1_1_1_0 - 0.0333333333333323*G0_1_1_1_1 + 0.0333333333333318*G1_0_0_0_0 - 0.441666666666667*G1_0_0_0_1 + 0.191666666666666*G1_0_0_1_0 + 0.191666666666667*G1_0_0_1_1 + 0.891666666666663*G1_0_1_0_0 - 1.275*G1_0_1_0_1 + 0.791666666666665*G1_0_1_1_0 + 0.191666666666667*G1_0_1_1_1 + 0.191666666666668*G1_1_0_0_0 + 0.791666666666666*G1_1_0_0_1 - 1.275*G1_1_0_1_0 - 0.441666666666665*G1_1_0_1_1 + 0.191666666666667*G1_1_1_0_0 + 0.191666666666666*G1_1_1_0_1 + 0.891666666666665*G1_1_1_1_0 + 0.0333333333333323*G1_1_1_1_1;
    A[31] = 0.816666666666666*G0_0_0_0_0 - 0.716666666666666*G0_0_0_0_1 + 0.216666666666666*G0_0_0_1_0 + 0.216666666666665*G0_0_0_1_1 + 2.78333333333333*G0_0_1_0_0 - 3.46666666666666*G0_0_1_0_1 + 1.66666666666666*G0_0_1_1_0 + 0.216666666666663*G0_0_1_1_1 - 0.616666666666665*G0_1_0_0_0 + 0.999999999999999*G0_1_0_0_1 - 0.799999999999998*G0_1_0_1_0 + 0.283333333333335*G0_1_0_1_1 - 0.616666666666666*G0_1_1_0_0 - 0.616666666666667*G0_1_1_0_1 + 1.11666666666666*G0_1_1_1_0 - 2.01666666666666*G0_1_1_1_1 - 0.816666666666666*G1_0_0_0_0 + 0.716666666666666*G1_0_0_0_1 - 0.216666666666666*G1_0_0_1_0 - 0.216666666666665*G1_0_0_1_1 - 2.78333333333333*G1_0_1_0_0 + 3.46666666666666*G1_0_1_0_1 - 1.66666666666666*G1_0_1_1_0 - 0.216666666666663*G1_0_1_1_1 + 0.616666666666665*G1_1_0_0_0 - 0.999999999999999*G1_1_0_0_1 + 0.799999999999998*G1_1_0_1_0 - 0.283333333333335*G1_1_0_1_1 + 0.616666666666666*G1_1_1_0_0 + 0.616666666666667*G1_1_1_0_1 - 1.11666666666666*G1_1_1_1_0 + 2.01666666666666*G1_1_1_1_1;
    A[32] = 0.633333333333334*G0_0_0_0_0 + 1.69166666666667*G0_0_0_0_1 - 0.608333333333332*G0_0_0_1_0 - 0.608333333333332*G0_0_0_1_1 + 1.69166666666667*G0_0_1_0_0 + 6.19166666666666*G0_0_1_0_1 - 1.875*G0_0_1_1_0 - 0.608333333333331*G0_0_1_1_1 - 0.608333333333332*G0_1_0_0_0 - 1.875*G0_1_0_0_1 + 0.858333333333331*G0_1_0_1_0 + 0.358333333333331*G0_1_0_1_1 - 0.608333333333332*G0_1_1_0_0 - 0.608333333333331*G0_1_1_0_1 + 0.358333333333331*G0_1_1_1_0 + 2.63333333333332*G0_1_1_1_1 - 0.633333333333334*G1_0_0_0_0 - 1.69166666666667*G1_0_0_0_1 + 0.608333333333332*G1_0_0_1_0 + 0.608333333333332*G1_0_0_1_1 - 1.69166666666667*G1_0_1_0_0 - 6.19166666666666*G1_0_1_0_1 + 1.875*G1_0_1_1_0 + 0.608333333333331*G1_0_1_1_1 + 0.608333333333332*G1_1_0_0_0 + 1.875*G1_1_0_0_1 - 0.858333333333331*G1_1_0_1_0 - 0.358333333333331*G1_1_0_1_1 + 0.608333333333332*G1_1_1_0_0 + 0.608333333333331*G1_1_1_0_1 - 0.358333333333331*G1_1_1_1_0 - 2.63333333333332*G1_1_1_1_1;
    A[33] = -1.00833333333333*G0_0_0_0_0 - 1.15*G0_0_0_0_1 - 1.11666666666667*G0_0_0_1_0 - 1.15*G0_0_0_1_1 - 2.19166666666667*G0_0_1_0_0 - 3.17083333333333*G0_0_1_0_1 - 1.15416666666667*G0_0_1_1_0 - 2.13333333333333*G0_0_1_1_1 + 1.10833333333333*G0_1_0_0_0 + 1.47916666666666*G0_1_0_0_1 + 0.362500000000001*G0_1_0_1_0 + 0.733333333333333*G0_1_0_1_1 + 1.10833333333333*G0_1_1_0_0 + 1.10833333333333*G0_1_1_0_1 + 1.10833333333333*G0_1_1_1_0 + 1.09166666666667*G0_1_1_1_1 + 1.00833333333333*G1_0_0_0_0 + 1.15*G1_0_0_0_1 + 1.11666666666667*G1_0_0_1_0 + 1.15*G1_0_0_1_1 + 2.19166666666667*G1_0_1_0_0 + 3.17083333333333*G1_0_1_0_1 + 1.15416666666667*G1_0_1_1_0 + 2.13333333333333*G1_0_1_1_1 - 1.10833333333333*G1_1_0_0_0 - 1.47916666666666*G1_1_0_0_1 - 0.362500000000001*G1_1_0_1_0 - 0.733333333333333*G1_1_0_1_1 - 1.10833333333333*G1_1_1_0_0 - 1.10833333333333*G1_1_1_0_1 - 1.10833333333333*G1_1_1_1_0 - 1.09166666666667*G1_1_1_1_1;
    A[34] = 1.26666666666667*G0_0_0_0_0 + 2.13333333333333*G0_0_0_0_1 + 0.900000000000002*G0_0_0_1_0 + 2.13333333333334*G0_0_0_1_1 + 3.38333333333333*G0_0_1_0_0 + 7.25833333333333*G0_0_1_0_1 + 1.05833333333334*G0_0_1_1_0 + 4.93333333333333*G0_0_1_1_1 - 1.21666666666667*G0_1_0_0_0 - 2.375*G0_1_0_0_1 - 0.308333333333335*G0_1_0_1_0 - 1.46666666666667*G0_1_0_1_1 - 1.21666666666667*G0_1_1_0_0 - 1.21666666666666*G0_1_1_0_1 - 1.21666666666667*G0_1_1_1_0 - 2.6*G0_1_1_1_1 - 1.26666666666667*G1_0_0_0_0 - 2.13333333333333*G1_0_0_0_1 - 0.900000000000002*G1_0_0_1_0 - 2.13333333333334*G1_0_0_1_1 - 3.38333333333333*G1_0_1_0_0 - 7.25833333333333*G1_0_1_0_1 - 1.05833333333334*G1_0_1_1_0 - 4.93333333333333*G1_0_1_1_1 + 1.21666666666667*G1_1_0_0_0 + 2.375*G1_1_0_0_1 + 0.308333333333335*G1_1_0_1_0 + 1.46666666666667*G1_1_0_1_1 + 1.21666666666667*G1_1_1_0_0 + 1.21666666666666*G1_1_1_0_1 + 1.21666666666667*G1_1_1_1_0 + 2.6*G1_1_1_1_1;
    A[35] = 0.408333333333333*G0_0_0_0_0 - 0.983333333333333*G0_0_0_0_1 + 0.716666666666665*G0_0_0_1_0 - 0.983333333333335*G0_0_0_1_1 + 1.39166666666667*G0_0_1_0_0 - 4.29583333333333*G0_0_1_0_1 + 2.88749999999999*G0_0_1_1_0 - 2.8*G0_0_1_1_1 - 0.308333333333333*G0_1_0_0_0 + 1.1875*G0_1_0_0_1 - 0.762499999999997*G0_1_0_1_0 + 0.733333333333334*G0_1_0_1_1 - 0.308333333333332*G0_1_1_0_0 - 0.308333333333334*G0_1_1_0_1 - 0.308333333333331*G0_1_1_1_0 + 1.50833333333333*G0_1_1_1_1 - 0.408333333333333*G1_0_0_0_0 + 0.983333333333333*G1_0_0_0_1 - 0.716666666666665*G1_0_0_1_0 + 0.983333333333335*G1_0_0_1_1 - 1.39166666666667*G1_0_1_0_0 + 4.29583333333333*G1_0_1_0_1 - 2.88749999999999*G1_0_1_1_0 + 2.8*G1_0_1_1_1 + 0.308333333333333*G1_1_0_0_0 - 1.1875*G1_1_0_0_1 + 0.762499999999997*G1_1_0_1_0 - 0.733333333333334*G1_1_0_1_1 + 0.308333333333332*G1_1_1_0_0 + 0.308333333333334*G1_1_1_0_1 + 0.308333333333331*G1_1_1_1_0 - 1.50833333333333*G1_1_1_1_1;
    A[36] = -0.508333333333334*G0_0_0_0_0 - 0.691666666666669*G0_0_0_0_1 - 0.691666666666666*G0_0_0_1_0 - 0.691666666666667*G0_0_0_1_1 + 0.266666666666668*G0_0_1_0_0 + 1.09583333333333*G0_0_1_0_1 - 1.52083333333333*G0_0_1_1_0 - 0.691666666666668*G0_0_1_1_1 + 0.466666666666667*G0_1_0_0_0 + 0.112500000000002*G0_1_0_0_1 + 1.29583333333333*G0_1_0_1_0 + 0.941666666666666*G0_1_0_1_1 + 0.649999999999999*G0_1_1_0_0 + 2.28333333333333*G0_1_1_0_1 + 0.649999999999997*G0_1_1_1_0 + 1.59166666666666*G0_1_1_1_1 + 0.508333333333334*G1_0_0_0_0 + 0.691666666666669*G1_0_0_0_1 + 0.691666666666666*G1_0_0_1_0 + 0.691666666666667*G1_0_0_1_1 - 0.266666666666668*G1_0_1_0_0 - 1.09583333333333*G1_0_1_0_1 + 1.52083333333333*G1_0_1_1_0 + 0.691666666666668*G1_0_1_1_1 - 0.466666666666667*G1_1_0_0_0 - 0.112500000000002*G1_1_0_0_1 - 1.29583333333333*G1_1_0_1_0 - 0.941666666666666*G1_1_0_1_1 - 0.649999999999999*G1_1_1_0_0 - 2.28333333333333*G1_1_1_0_1 - 0.649999999999997*G1_1_1_1_0 - 1.59166666666666*G1_1_1_1_1;
    A[37] = 0.600000000000003*G0_0_0_0_0 + 0.383333333333336*G0_0_0_0_1 + 0.383333333333333*G0_0_0_1_0 + 0.383333333333335*G0_0_0_1_1 + 0.133333333333336*G0_0_1_0_0 - 0.441666666666662*G0_0_1_0_1 + 0.958333333333333*G0_0_1_1_0 + 0.383333333333336*G0_0_1_1_1 - 0.933333333333334*G0_1_0_0_0 - 0.141666666666668*G0_1_0_0_1 - 1.675*G0_1_0_1_0 - 0.883333333333333*G0_1_0_1_1 + 0.53333333333333*G0_1_1_0_0 + 0.0999999999999977*G0_1_1_0_1 + 0.533333333333332*G0_1_1_1_0 + 0.0666666666666651*G0_1_1_1_1 - 0.600000000000003*G1_0_0_0_0 - 0.383333333333336*G1_0_0_0_1 - 0.383333333333333*G1_0_0_1_0 - 0.383333333333335*G1_0_0_1_1 - 0.133333333333336*G1_0_1_0_0 + 0.441666666666662*G1_0_1_0_1 - 0.958333333333333*G1_0_1_1_0 - 0.383333333333336*G1_0_1_1_1 + 0.933333333333334*G1_1_0_0_0 + 0.141666666666668*G1_1_0_0_1 + 1.675*G1_1_0_1_0 + 0.883333333333333*G1_1_0_1_1 - 0.53333333333333*G1_1_1_0_0 - 0.0999999999999977*G1_1_1_0_1 - 0.533333333333332*G1_1_1_1_0 - 0.0666666666666651*G1_1_1_1_1;
    A[38] = -0.0916666666666674*G0_0_0_0_0 - 0.108333333333333*G0_0_0_0_1 - 0.108333333333333*G0_0_0_1_0 - 0.108333333333333*G0_0_0_1_1 - 0.400000000000001*G0_0_1_0_0 + 0.637499999999999*G0_0_1_0_1 - 1.14583333333333*G0_0_1_1_0 - 0.108333333333333*G0_0_1_1_1 + 0.466666666666667*G0_1_0_0_0 - 0.5125*G0_1_0_0_1 + 0.837499999999998*G0_1_0_1_0 - 0.141666666666668*G0_1_0_1_1 - 1.18333333333333*G0_1_1_0_0 + 2.11666666666666*G0_1_1_0_1 - 1.18333333333333*G0_1_1_1_0 + 1.00833333333333*G0_1_1_1_1 + 0.0916666666666674*G1_0_0_0_0 + 0.108333333333333*G1_0_0_0_1 + 0.108333333333333*G1_0_0_1_0 + 0.108333333333333*G1_0_0_1_1 + 0.400000000000001*G1_0_1_0_0 - 0.637499999999999*G1_0_1_0_1 + 1.14583333333333*G1_0_1_1_0 + 0.108333333333333*G1_0_1_1_1 - 0.466666666666667*G1_1_0_0_0 + 0.5125*G1_1_0_0_1 - 0.837499999999998*G1_1_0_1_0 + 0.141666666666668*G1_1_0_1_1 + 1.18333333333333*G1_1_1_0_0 - 2.11666666666666*G1_1_1_0_1 + 1.18333333333333*G1_1_1_1_0 - 1.00833333333333*G1_1_1_1_1;
    A[39] = 2.00346921336188*G0_0_0_0_0 + 2.59272486435068*G0_0_0_0_1 - 0.235702260395516*G0_0_0_1_0 - 0.235702260395517*G0_0_0_1_1 + 5.06759859850358*G0_0_1_0_0 + 3.83016173142713*G0_0_1_0_1 + 1.00173460668094*G0_0_1_1_0 - 0.23570226039552*G0_0_1_1_1 - 2.00346921336188*G0_1_0_0_0 - 1.59099025766973*G0_1_0_0_1 + 1.23743686707646*G0_1_0_1_0 + 1.64991582276861*G0_1_0_1_1 - 2.00346921336188*G0_1_1_0_0 - 8.3674302440408*G0_1_1_0_1 + 0.824957911384301*G0_1_1_1_0 - 2.94627825494394*G0_1_1_1_1 - 2.00346921336188*G1_0_0_0_0 - 2.59272486435068*G1_0_0_0_1 + 0.235702260395516*G1_0_0_1_0 + 0.235702260395517*G1_0_0_1_1 - 5.06759859850358*G1_0_1_0_0 - 3.83016173142713*G1_0_1_0_1 - 1.00173460668094*G1_0_1_1_0 + 0.23570226039552*G1_0_1_1_1 + 2.00346921336188*G1_1_0_0_0 + 1.59099025766973*G1_1_0_0_1 - 1.23743686707646*G1_1_0_1_0 - 1.64991582276861*G1_1_0_1_1 + 2.00346921336188*G1_1_1_0_0 + 8.3674302440408*G1_1_1_0_1 - 0.824957911384301*G1_1_1_1_0 + 2.94627825494394*G1_1_1_1_1;
    A[40] = -0.28867513459481*G0_0_0_0_0 - 0.360843918243519*G0_0_0_0_1 - 1.65988202392017*G0_0_0_1_0 - 1.65988202392018*G0_0_0_1_1 + 2.23723229310981*G0_0_1_0_0 + 2.02072594216368*G0_0_1_0_1 - 1.44337567297406*G0_0_1_1_0 - 1.65988202392018*G0_0_1_1_1 - 0.360843918243518*G0_1_0_0_0 + 3.46410161513775*G0_1_0_1_0 + 3.82494553338127*G0_1_0_1_1 - 0.360843918243516*G0_1_1_0_0 - 2.5259074277046*G0_1_1_0_1 + 3.10325769689423*G0_1_1_1_0 - 0.288675134594816*G0_1_1_1_1 + 0.28867513459481*G1_0_0_0_0 + 0.360843918243519*G1_0_0_0_1 + 1.65988202392017*G1_0_0_1_0 + 1.65988202392018*G1_0_0_1_1 - 2.23723229310981*G1_0_1_0_0 - 2.02072594216368*G1_0_1_0_1 + 1.44337567297406*G1_0_1_1_0 + 1.65988202392018*G1_0_1_1_1 + 0.360843918243518*G1_1_0_0_0 - 3.46410161513775*G1_1_0_1_0 - 3.82494553338127*G1_1_0_1_1 + 0.360843918243516*G1_1_1_0_0 + 2.5259074277046*G1_1_1_0_1 - 3.10325769689423*G1_1_1_1_0 + 0.288675134594816*G1_1_1_1_1;
    A[41] = 2.41666666666667*G0_0_0_0_0 + 1.20833333333333*G0_0_0_0_1 - 2.04166666666666*G0_0_0_1_0 - 2.04166666666667*G0_0_0_1_1 + 7.45833333333333*G0_0_1_0_0 + 11.4583333333333*G0_0_1_0_1 - 6.04166666666665*G0_0_1_1_0 - 2.04166666666666*G0_0_1_1_1 - 2.04166666666666*G0_1_0_0_0 - 2.87499999999999*G0_1_0_0_1 + 1.62499999999999*G0_1_0_1_0 + 0.791666666666662*G0_1_0_1_1 - 2.04166666666666*G0_1_1_0_0 + 5.70833333333333*G0_1_1_0_1 + 2.45833333333332*G0_1_1_1_0 + 9.91666666666664*G0_1_1_1_1 - 2.41666666666667*G1_0_0_0_0 - 1.20833333333333*G1_0_0_0_1 + 2.04166666666666*G1_0_0_1_0 + 2.04166666666667*G1_0_0_1_1 - 7.45833333333333*G1_0_1_0_0 - 11.4583333333333*G1_0_1_0_1 + 6.04166666666665*G1_0_1_1_0 + 2.04166666666666*G1_0_1_1_1 + 2.04166666666666*G1_1_0_0_0 + 2.87499999999999*G1_1_0_0_1 - 1.62499999999999*G1_1_0_1_0 - 0.791666666666662*G1_1_0_1_1 + 2.04166666666666*G1_1_1_0_0 - 5.70833333333333*G1_1_1_0_1 - 2.45833333333332*G1_1_1_1_0 - 9.91666666666664*G1_1_1_1_1;
    A[42] = -2.94627825494395*G0_0_0_0_0 - 2.00346921336188*G0_0_0_0_1 + 0.117851130197759*G0_0_0_1_0 + 0.824957911384306*G0_0_0_1_1 - 8.72098363463408*G0_0_1_0_0 - 5.36222642399798*G0_0_1_0_1 - 2.53379929925179*G0_0_1_1_0 + 0.824957911384308*G0_0_1_1_1 + 2.59272486435067*G0_1_0_0_0 + 1.944543648263*G0_1_0_0_1 - 0.883883476483184*G0_1_0_1_0 - 1.53206469257085*G0_1_0_1_1 + 2.59272486435067*G0_1_1_0_0 + 2.59272486435067*G0_1_1_0_1 - 0.235702260395512*G0_1_1_1_0 - 0.824957911384302*G0_1_1_1_1 + 2.94627825494395*G1_0_0_0_0 + 2.00346921336188*G1_0_0_0_1 - 0.117851130197759*G1_0_0_1_0 - 0.824957911384306*G1_0_0_1_1 + 8.72098363463408*G1_0_1_0_0 + 5.36222642399798*G1_0_1_0_1 + 2.53379929925179*G1_0_1_1_0 - 0.824957911384308*G1_0_1_1_1 - 2.59272486435067*G1_1_0_0_0 - 1.944543648263*G1_1_0_0_1 + 0.883883476483184*G1_1_0_1_0 + 1.53206469257085*G1_1_0_1_1 - 2.59272486435067*G1_1_1_0_0 - 2.59272486435067*G1_1_1_0_1 + 0.235702260395512*G1_1_1_1_0 + 0.824957911384302*G1_1_1_1_1;
    A[43] = -1.94855715851499*G0_0_0_0_0 - 1.51554445662277*G0_0_0_0_1 - 1.51554445662277*G0_0_0_1_0 - 0.216506350946112*G0_0_0_1_1 - 2.59807621135332*G0_0_1_0_0 - 2.05681033398805*G0_0_1_0_1 - 0.757772228311391*G0_0_1_1_0 - 0.216506350946112*G0_0_1_1_1 + 2.59807621135331*G0_1_0_0_0 + 2.70632938682637*G0_1_0_0_1 - 1.1907849302036*G0_1_0_1_0 - 1.08253175473055*G0_1_0_1_1 + 2.59807621135331*G0_1_1_0_0 + 2.59807621135331*G0_1_1_0_1 - 0.866025403784431*G0_1_1_1_0 + 0.216506350946111*G0_1_1_1_1 + 1.94855715851499*G1_0_0_0_0 + 1.51554445662277*G1_0_0_0_1 + 1.51554445662277*G1_0_0_1_0 + 0.216506350946112*G1_0_0_1_1 + 2.59807621135332*G1_0_1_0_0 + 2.05681033398805*G1_0_1_0_1 + 0.757772228311391*G1_0_1_1_0 + 0.216506350946112*G1_0_1_1_1 - 2.59807621135331*G1_1_0_0_0 - 2.70632938682637*G1_1_0_0_1 + 1.1907849302036*G1_1_0_1_0 + 1.08253175473055*G1_1_0_1_1 - 2.59807621135331*G1_1_1_0_0 - 2.59807621135331*G1_1_1_0_1 + 0.866025403784431*G1_1_1_1_0 - 0.216506350946111*G1_1_1_1_1;
    A[44] = -5.20833333333333*G0_0_0_0_0 - 3.54166666666667*G0_0_0_0_1 - 2.04166666666667*G0_0_0_1_0 - 0.291666666666669*G0_0_0_1_1 - 15.4166666666667*G0_0_1_0_0 - 9.47916666666665*G0_0_1_0_1 - 6.22916666666667*G0_0_1_1_0 - 0.291666666666668*G0_0_1_1_1 + 4.58333333333332*G0_1_0_0_0 + 3.43749999999999*G0_1_0_0_1 + 1.6875*G0_1_0_1_0 + 0.541666666666665*G0_1_0_1_1 + 4.58333333333332*G0_1_1_0_0 + 4.58333333333332*G0_1_1_0_1 + 0.0833333333333369*G0_1_1_1_0 - 6.45833333333331*G0_1_1_1_1 + 5.20833333333333*G1_0_0_0_0 + 3.54166666666667*G1_0_0_0_1 + 2.04166666666667*G1_0_0_1_0 + 0.291666666666669*G1_0_0_1_1 + 15.4166666666667*G1_0_1_0_0 + 9.47916666666665*G1_0_1_0_1 + 6.22916666666667*G1_0_1_1_0 + 0.291666666666668*G1_0_1_1_1 - 4.58333333333332*G1_1_0_0_0 - 3.43749999999999*G1_1_0_0_1 - 1.6875*G1_1_0_1_0 - 0.541666666666665*G1_1_0_1_1 - 4.58333333333332*G1_1_1_0_0 - 4.58333333333332*G1_1_1_0_1 - 0.0833333333333369*G1_1_1_1_0 + 6.45833333333331*G1_1_1_1_1;
    A[45] = -1.59166666666667*G0_0_0_0_0 - 0.941666666666669*G0_0_0_0_1 + 0.691666666666667*G0_0_0_1_0 + 0.691666666666666*G0_0_0_1_1 - 0.650000000000003*G0_0_1_0_0 - 1.29583333333334*G0_0_1_0_1 + 1.52083333333333*G0_0_1_1_0 + 0.691666666666666*G0_0_1_1_1 - 2.28333333333334*G0_1_0_0_0 - 0.112500000000006*G0_1_0_0_1 - 1.09583333333333*G0_1_0_1_0 + 0.691666666666669*G0_1_0_1_1 - 0.650000000000004*G0_1_1_0_0 - 0.46666666666667*G0_1_1_0_1 - 0.266666666666664*G0_1_1_1_0 + 0.508333333333335*G0_1_1_1_1 + 1.59166666666667*G1_0_0_0_0 + 0.941666666666669*G1_0_0_0_1 - 0.691666666666667*G1_0_0_1_0 - 0.691666666666666*G1_0_0_1_1 + 0.650000000000003*G1_0_1_0_0 + 1.29583333333334*G1_0_1_0_1 - 1.52083333333333*G1_0_1_1_0 - 0.691666666666666*G1_0_1_1_1 + 2.28333333333334*G1_1_0_0_0 + 0.112500000000006*G1_1_0_0_1 + 1.09583333333333*G1_1_0_1_0 - 0.691666666666669*G1_1_0_1_1 + 0.650000000000004*G1_1_1_0_0 + 0.46666666666667*G1_1_1_0_1 + 0.266666666666664*G1_1_1_1_0 - 0.508333333333335*G1_1_1_1_1;
    A[46] = -0.0666666666666648*G0_0_0_0_0 + 0.466666666666667*G0_0_0_0_1 + 0.0333333333333343*G0_0_0_1_0 + 0.033333333333336*G0_0_0_1_1 - 0.95*G0_0_1_0_0 + 1.25833333333333*G0_0_1_0_1 - 0.708333333333332*G0_0_1_1_0 + 0.033333333333336*G0_0_1_1_1 + 0.316666666666669*G0_1_0_0_0 - 0.108333333333331*G0_1_0_0_1 + 0.858333333333331*G0_1_0_1_0 + 0.0333333333333345*G0_1_0_1_1 - 0.949999999999999*G0_1_1_0_0 + 0.683333333333334*G0_1_1_0_1 + 0.116666666666666*G0_1_1_1_0 - 0.183333333333332*G0_1_1_1_1 + 0.0666666666666648*G1_0_0_0_0 - 0.466666666666667*G1_0_0_0_1 - 0.0333333333333343*G1_0_0_1_0 - 0.033333333333336*G1_0_0_1_1 + 0.95*G1_0_1_0_0 - 1.25833333333333*G1_0_1_0_1 + 0.708333333333332*G1_0_1_1_0 - 0.033333333333336*G1_0_1_1_1 - 0.316666666666669*G1_1_0_0_0 + 0.108333333333331*G1_1_0_0_1 - 0.858333333333331*G1_1_0_1_0 - 0.0333333333333345*G1_1_0_1_1 + 0.949999999999999*G1_1_1_0_0 - 0.683333333333334*G1_1_1_0_1 - 0.116666666666666*G1_1_1_1_0 + 0.183333333333332*G1_1_1_1_1;
    A[47] = -1.00833333333333*G0_0_0_0_0 - 2.19166666666667*G0_0_0_0_1 + 1.10833333333333*G0_0_0_1_0 + 1.10833333333333*G0_0_0_1_1 - 1.15*G0_0_1_0_0 - 3.17083333333333*G0_0_1_0_1 + 1.47916666666666*G0_0_1_1_0 + 1.10833333333333*G0_0_1_1_1 - 1.11666666666667*G0_1_0_0_0 - 1.15416666666667*G0_1_0_0_1 + 0.362500000000001*G0_1_0_1_0 + 1.10833333333333*G0_1_0_1_1 - 1.15*G0_1_1_0_0 - 2.13333333333333*G0_1_1_0_1 + 0.733333333333333*G0_1_1_1_0 + 1.09166666666667*G0_1_1_1_1 + 1.00833333333333*G1_0_0_0_0 + 2.19166666666667*G1_0_0_0_1 - 1.10833333333333*G1_0_0_1_0 - 1.10833333333333*G1_0_0_1_1 + 1.15*G1_0_1_0_0 + 3.17083333333333*G1_0_1_0_1 - 1.47916666666666*G1_0_1_1_0 - 1.10833333333333*G1_0_1_1_1 + 1.11666666666667*G1_1_0_0_0 + 1.15416666666667*G1_1_0_0_1 - 0.362500000000001*G1_1_0_1_0 - 1.10833333333333*G1_1_0_1_1 + 1.15*G1_1_1_0_0 + 2.13333333333333*G1_1_1_0_1 - 0.733333333333333*G1_1_1_1_0 - 1.09166666666667*G1_1_1_1_1;
    A[48] = 2.63333333333334*G0_0_0_0_0 + 2.275*G0_0_0_0_1 + 3.24166666666667*G0_0_0_1_0 + 2.275*G0_0_0_1_1 + 2.275*G0_0_1_0_0 + 2.775*G0_0_1_0_1 + 1.00833333333334*G0_0_1_1_0 + 1.50833333333334*G0_0_1_1_1 + 3.24166666666667*G0_1_0_0_0 + 1.00833333333334*G0_1_0_0_1 + 10.0416666666667*G0_1_0_1_0 + 5.50833333333333*G0_1_0_1_1 + 2.275*G0_1_1_0_0 + 1.50833333333334*G0_1_1_0_1 + 5.50833333333333*G0_1_1_1_0 + 3.68333333333334*G0_1_1_1_1 - 2.63333333333334*G1_0_0_0_0 - 2.275*G1_0_0_0_1 - 3.24166666666667*G1_0_0_1_0 - 2.275*G1_0_0_1_1 - 2.275*G1_0_1_0_0 - 2.775*G1_0_1_0_1 - 1.00833333333334*G1_0_1_1_0 - 1.50833333333334*G1_0_1_1_1 - 3.24166666666667*G1_1_0_0_0 - 1.00833333333334*G1_1_0_0_1 - 10.0416666666667*G1_1_0_1_0 - 5.50833333333333*G1_1_0_1_1 - 2.275*G1_1_1_0_0 - 1.50833333333334*G1_1_1_0_1 - 5.50833333333333*G1_1_1_1_0 - 3.68333333333334*G1_1_1_1_1;
    A[49] = -2.01666666666667*G0_0_0_0_0 - 3.13333333333333*G0_0_0_0_1 - 1.4*G0_0_0_1_0 - 3.13333333333334*G0_0_0_1_1 - 2.3*G0_0_1_0_0 - 4.21666666666667*G0_0_1_0_1 - 0.683333333333338*G0_0_1_1_0 - 2.6*G0_0_1_1_1 - 2.23333333333334*G0_1_0_0_0 - 1.68333333333334*G0_1_0_0_1 - 5.08333333333333*G0_1_0_1_0 - 7.93333333333333*G0_1_0_1_1 - 2.3*G0_1_1_0_0 - 2.76666666666667*G0_1_1_0_1 - 3.43333333333333*G0_1_1_1_0 - 5.86666666666667*G0_1_1_1_1 + 2.01666666666667*G1_0_0_0_0 + 3.13333333333333*G1_0_0_0_1 + 1.4*G1_0_0_1_0 + 3.13333333333334*G1_0_0_1_1 + 2.3*G1_0_1_0_0 + 4.21666666666667*G1_0_1_0_1 + 0.683333333333338*G1_0_1_1_0 + 2.6*G1_0_1_1_1 + 2.23333333333334*G1_1_0_0_0 + 1.68333333333334*G1_1_0_0_1 + 5.08333333333333*G1_1_0_1_0 + 7.93333333333333*G1_1_0_1_1 + 2.3*G1_1_1_0_0 + 2.76666666666667*G1_1_1_0_1 + 3.43333333333333*G1_1_1_1_0 + 5.86666666666667*G1_1_1_1_1;
    A[50] = -0.0333333333333308*G0_0_0_0_0 + 0.858333333333334*G0_0_0_0_1 + 0.158333333333337*G0_0_0_1_0 + 0.858333333333335*G0_0_0_1_1 - 0.474999999999999*G0_0_1_0_0 + 1.69166666666667*G0_0_1_0_1 - 1.075*G0_0_1_1_0 + 1.09166666666667*G0_0_1_1_1 + 0.158333333333339*G0_1_0_0_0 + 0.258333333333338*G0_1_0_0_1 + 1.625*G0_1_0_1_0 + 2.425*G0_1_0_1_1 - 0.474999999999997*G0_1_1_0_0 + 1.09166666666667*G0_1_1_0_1 - 0.241666666666666*G0_1_1_1_0 + 2.18333333333333*G0_1_1_1_1 + 0.0333333333333308*G1_0_0_0_0 - 0.858333333333334*G1_0_0_0_1 - 0.158333333333337*G1_0_0_1_0 - 0.858333333333335*G1_0_0_1_1 + 0.474999999999999*G1_0_1_0_0 - 1.69166666666667*G1_0_1_0_1 + 1.075*G1_0_1_1_0 - 1.09166666666667*G1_0_1_1_1 - 0.158333333333339*G1_1_0_0_0 - 0.258333333333338*G1_1_0_0_1 - 1.625*G1_1_0_1_0 - 2.425*G1_1_0_1_1 + 0.474999999999997*G1_1_1_0_0 - 1.09166666666667*G1_1_1_0_1 + 0.241666666666666*G1_1_1_1_0 - 2.18333333333333*G1_1_1_1_1;
    A[51] = 1.50833333333333*G0_0_0_0_0 + 1.81666666666667*G0_0_0_0_1 + 1.81666666666667*G0_0_0_1_0 + 1.81666666666667*G0_0_0_1_1 + 0.775000000000001*G0_0_1_0_0 + 0.320833333333337*G0_0_1_0_1 + 2.27083333333333*G0_0_1_1_0 + 1.81666666666667*G0_0_1_1_1 + 4.30833333333333*G0_1_0_0_0 + 7.50416666666666*G0_1_0_0_1 + 0.320833333333338*G0_1_0_1_0 + 1.81666666666667*G0_1_0_1_1 + 2.59166666666667*G0_1_1_0_0 + 4.30833333333333*G0_1_1_0_1 + 0.775000000000002*G0_1_1_1_0 + 1.50833333333334*G0_1_1_1_1 - 1.50833333333333*G1_0_0_0_0 - 1.81666666666667*G1_0_0_0_1 - 1.81666666666667*G1_0_0_1_0 - 1.81666666666667*G1_0_0_1_1 - 0.775000000000001*G1_0_1_0_0 - 0.320833333333337*G1_0_1_0_1 - 2.27083333333333*G1_0_1_1_0 - 1.81666666666667*G1_0_1_1_1 - 4.30833333333333*G1_1_0_0_0 - 7.50416666666666*G1_1_0_0_1 - 0.320833333333338*G1_1_0_1_0 - 1.81666666666667*G1_1_0_1_1 - 2.59166666666667*G1_1_1_0_0 - 4.30833333333333*G1_1_1_0_1 - 0.775000000000002*G1_1_1_1_0 - 1.50833333333334*G1_1_1_1_1;
    A[52] = -2.6*G0_0_0_0_0 - 1.38333333333333*G0_0_0_0_1 - 1.38333333333333*G0_0_0_1_0 - 1.38333333333333*G0_0_0_1_1 - 1.13333333333334*G0_0_1_0_0 - 0.225000000000002*G0_0_1_0_1 - 2.29166666666667*G0_0_1_1_0 - 1.38333333333333*G0_0_1_1_1 - 7.53333333333333*G0_1_0_0_0 - 5.25833333333333*G0_1_0_0_1 + 0.941666666666657*G0_1_0_1_0 - 1.38333333333334*G0_1_0_1_1 - 3.93333333333334*G0_1_1_0_0 - 2.86666666666667*G0_1_1_0_1 + 0.033333333333328*G0_1_1_1_0 - 1.01666666666667*G0_1_1_1_1 + 2.6*G1_0_0_0_0 + 1.38333333333333*G1_0_0_0_1 + 1.38333333333333*G1_0_0_1_0 + 1.38333333333333*G1_0_0_1_1 + 1.13333333333334*G1_0_1_0_0 + 0.225000000000002*G1_0_1_0_1 + 2.29166666666667*G1_0_1_1_0 + 1.38333333333333*G1_0_1_1_1 + 7.53333333333333*G1_1_0_0_0 + 5.25833333333333*G1_1_0_0_1 - 0.941666666666657*G1_1_0_1_0 + 1.38333333333334*G1_1_0_1_1 + 3.93333333333334*G1_1_1_0_0 + 2.86666666666667*G1_1_1_0_1 - 0.033333333333328*G1_1_1_1_0 + 1.01666666666667*G1_1_1_1_1;
    A[53] = 1.09166666666667*G0_0_0_0_0 - 0.0166666666666679*G0_0_0_0_1 - 0.0166666666666674*G0_0_0_1_0 - 0.0166666666666683*G0_0_0_1_1 + 0.358333333333334*G0_0_1_0_0 - 0.387500000000001*G0_0_1_0_1 + 0.729166666666665*G0_0_1_1_0 - 0.0166666666666683*G0_0_1_1_1 + 3.225*G0_1_0_0_0 + 0.962499999999999*G0_1_0_0_1 - 1.05416666666666*G0_1_0_1_0 - 0.0166666666666667*G0_1_0_1_1 + 1.34166666666667*G0_1_1_0_0 + 0.558333333333333*G0_1_1_0_1 - 0.308333333333332*G0_1_1_1_0 + 0.0916666666666665*G0_1_1_1_1 - 1.09166666666667*G1_0_0_0_0 + 0.0166666666666679*G1_0_0_0_1 + 0.0166666666666674*G1_0_0_1_0 + 0.0166666666666683*G1_0_0_1_1 - 0.358333333333334*G1_0_1_0_0 + 0.387500000000001*G1_0_1_0_1 - 0.729166666666665*G1_0_1_1_0 + 0.0166666666666683*G1_0_1_1_1 - 3.225*G1_1_0_0_0 - 0.962499999999999*G1_1_0_0_1 + 1.05416666666666*G1_1_0_1_0 + 0.0166666666666667*G1_1_0_1_1 - 1.34166666666667*G1_1_1_0_0 - 0.558333333333333*G1_1_1_0_1 + 0.308333333333332*G1_1_1_1_0 - 0.0916666666666665*G1_1_1_1_1;
    A[54] = -3.77123616632825*G0_0_0_0_0 - 4.36049181731704*G0_0_0_0_1 + 2.00346921336188*G0_0_0_1_0 + 2.00346921336189*G0_0_0_1_1 - 3.88908729652601*G0_0_1_0_0 - 4.12478955692153*G0_0_1_0_1 + 2.2391714737574*G0_0_1_1_0 + 2.00346921336189*G0_0_1_1_1 - 4.36049181731705*G0_1_0_0_0 - 6.48181216087669*G0_1_0_0_1 - 0.117851130197755*G0_1_0_1_0 + 2.00346921336189*G0_1_0_1_1 - 3.88908729652601*G0_1_1_0_0 - 5.53900311929463*G0_1_1_0_1 + 0.117851130197761*G0_1_1_1_0 + 1.17851130197758*G0_1_1_1_1 + 3.77123616632825*G1_0_0_0_0 + 4.36049181731704*G1_0_0_0_1 - 2.00346921336188*G1_0_0_1_0 - 2.00346921336189*G1_0_0_1_1 + 3.88908729652601*G1_0_1_0_0 + 4.12478955692153*G1_0_1_0_1 - 2.2391714737574*G1_0_1_1_0 - 2.00346921336189*G1_0_1_1_1 + 4.36049181731705*G1_1_0_0_0 + 6.48181216087669*G1_1_0_0_1 + 0.117851130197755*G1_1_0_1_0 - 2.00346921336189*G1_1_0_1_1 + 3.88908729652601*G1_1_1_0_0 + 5.53900311929463*G1_1_1_0_1 - 0.117851130197761*G1_1_1_1_0 - 1.17851130197758*G1_1_1_1_1;
    A[55] = -2.95892012959683*G0_0_0_0_0 + 0.360843918243515*G0_0_0_0_1 + 5.99000904284236*G0_0_0_1_0 + 5.99000904284237*G0_0_0_1_1 - 0.433012701892224*G0_0_1_0_0 - 1.1186161465549*G0_0_1_0_1 + 6.67561248750504*G0_0_1_1_0 + 5.99000904284237*G0_0_1_1_1 - 5.91784025919366*G0_1_0_0_0 + 9.12935113156094*G0_1_0_0_1 + 1.33512249750101*G0_1_0_1_0 + 5.99000904284238*G0_1_0_1_1 - 0.433012701892221*G0_1_1_0_0 + 5.48482755730144*G0_1_1_0_1 + 2.02072594216369*G0_1_1_1_0 + 4.4022958025709*G0_1_1_1_1 + 2.95892012959683*G1_0_0_0_0 - 0.360843918243515*G1_0_0_0_1 - 5.99000904284236*G1_0_0_1_0 - 5.99000904284237*G1_0_0_1_1 + 0.433012701892224*G1_0_1_0_0 + 1.1186161465549*G1_0_1_0_1 - 6.67561248750504*G1_0_1_1_0 - 5.99000904284237*G1_0_1_1_1 + 5.91784025919366*G1_1_0_0_0 - 9.12935113156094*G1_1_0_0_1 - 1.33512249750101*G1_1_0_1_0 - 5.99000904284238*G1_1_0_1_1 + 0.433012701892221*G1_1_1_0_0 - 5.48482755730144*G1_1_1_0_1 - 2.02072594216369*G1_1_1_1_0 - 4.4022958025709*G1_1_1_1_1;
    A[56] = -1.79166666666666*G0_0_0_0_0 - 2.45833333333333*G0_0_0_0_1 + 3.29166666666666*G0_0_0_1_0 + 3.29166666666666*G0_0_0_1_1 - 3.5*G0_0_1_0_0 - 3.85416666666666*G0_0_1_0_1 + 3.64583333333333*G0_0_1_1_0 + 3.29166666666666*G0_0_1_1_1 - 1.33333333333333*G0_1_0_0_0 + 2.22916666666667*G0_1_0_0_1 + 2.72916666666666*G0_1_0_1_0 + 3.29166666666667*G0_1_0_1_1 - 3.5*G0_1_1_0_0 + 1.08333333333334*G0_1_1_0_1 + 3.08333333333333*G0_1_1_1_0 + 3.45833333333334*G0_1_1_1_1 + 1.79166666666666*G1_0_0_0_0 + 2.45833333333333*G1_0_0_0_1 - 3.29166666666666*G1_0_0_1_0 - 3.29166666666666*G1_0_0_1_1 + 3.5*G1_0_1_0_0 + 3.85416666666666*G1_0_1_0_1 - 3.64583333333333*G1_0_1_1_0 - 3.29166666666666*G1_0_1_1_1 + 1.33333333333333*G1_1_0_0_0 - 2.22916666666667*G1_1_0_0_1 - 2.72916666666666*G1_1_0_1_0 - 3.29166666666667*G1_1_0_1_1 + 3.5*G1_1_1_0_0 - 1.08333333333334*G1_1_1_0_1 - 3.08333333333333*G1_1_1_1_0 - 3.45833333333334*G1_1_1_1_1;
    A[57] = 2.94627825494395*G0_0_0_0_0 + 3.77123616632825*G0_0_0_0_1 - 5.42115198909687*G0_0_0_1_0 - 2.59272486435067*G0_0_0_1_1 + 4.59619407771256*G0_0_1_0_0 + 4.1837151220204*G0_0_1_0_1 - 2.18024590865852*G0_0_1_1_0 - 2.59272486435067*G0_0_1_1_1 + 2.71057599454844*G0_1_0_0_0 + 2.5337992992518*G0_1_0_0_1 - 9.48701598091951*G0_1_0_1_0 - 2.59272486435068*G0_1_0_1_1 + 4.59619407771256*G0_1_1_0_0 + 2.94627825494395*G0_1_1_0_1 - 3.41768277573498*G0_1_1_1_0 - 2.00346921336189*G0_1_1_1_1 - 2.94627825494395*G1_0_0_0_0 - 3.77123616632825*G1_0_0_0_1 + 5.42115198909687*G1_0_0_1_0 + 2.59272486435067*G1_0_0_1_1 - 4.59619407771256*G1_0_1_0_0 - 4.1837151220204*G1_0_1_0_1 + 2.18024590865852*G1_0_1_1_0 + 2.59272486435067*G1_0_1_1_1 - 2.71057599454844*G1_1_0_0_0 - 2.5337992992518*G1_1_0_0_1 + 9.48701598091951*G1_1_0_1_0 + 2.59272486435068*G1_1_0_1_1 - 4.59619407771256*G1_1_1_0_0 - 2.94627825494395*G1_1_1_0_1 + 3.41768277573498*G1_1_1_1_0 + 2.00346921336189*G1_1_1_1_1;
    A[58] = 8.44374768689829*G0_0_0_0_0 + 4.76313972081442*G0_0_0_0_1 + 4.76313972081442*G0_0_0_1_0 - 0.866025403784433*G0_0_0_1_1 + 5.84567147554497*G0_0_1_0_0 + 5.3044055981797*G0_0_1_0_1 - 0.324759526419154*G0_0_1_1_0 - 0.866025403784434*G0_0_1_1_1 + 11.0418238982516*G0_1_0_0_0 + 1.40729128114973*G0_1_0_0_1 + 18.2947866549463*G0_1_0_1_0 - 0.866025403784428*G0_1_0_1_1 + 5.84567147554497*G0_1_1_0_0 + 1.948557158515*G0_1_1_0_1 + 9.74278579257493*G0_1_1_1_0 + 0.216506350946117*G0_1_1_1_1 - 8.44374768689829*G1_0_0_0_0 - 4.76313972081442*G1_0_0_0_1 - 4.76313972081442*G1_0_0_1_0 + 0.866025403784433*G1_0_0_1_1 - 5.84567147554497*G1_0_1_0_0 - 5.3044055981797*G1_0_1_0_1 + 0.324759526419154*G1_0_1_1_0 + 0.866025403784434*G1_0_1_1_1 - 11.0418238982516*G1_1_0_0_0 - 1.40729128114973*G1_1_0_0_1 - 18.2947866549463*G1_1_0_1_0 + 0.866025403784428*G1_1_0_1_1 - 5.84567147554497*G1_1_1_0_0 - 1.948557158515*G1_1_1_0_1 - 9.74278579257493*G1_1_1_1_0 - 0.216506350946117*G1_1_1_1_1;
    A[59] = 5.20833333333333*G0_0_0_0_0 + 6.66666666666666*G0_0_0_0_1 + 0.166666666666669*G0_0_0_1_0 + 0.916666666666669*G0_0_0_1_1 + 8.125*G0_0_1_0_0 + 7.39583333333333*G0_0_1_0_1 + 1.64583333333334*G0_0_1_1_0 + 0.916666666666667*G0_0_1_1_1 + 4.79166666666667*G0_1_0_0_0 + 4.47916666666667*G0_1_0_0_1 + 3.72916666666667*G0_1_0_1_0 + 0.91666666666667*G0_1_0_1_1 + 8.125*G0_1_1_0_0 + 5.20833333333333*G0_1_1_0_1 + 4.70833333333334*G0_1_1_1_0 + 1.45833333333334*G0_1_1_1_1 - 5.20833333333333*G1_0_0_0_0 - 6.66666666666666*G1_0_0_0_1 - 0.166666666666669*G1_0_0_1_0 - 0.916666666666669*G1_0_0_1_1 - 8.125*G1_0_1_0_0 - 7.39583333333333*G1_0_1_0_1 - 1.64583333333334*G1_0_1_1_0 - 0.916666666666667*G1_0_1_1_1 - 4.79166666666667*G1_1_0_0_0 - 4.47916666666667*G1_1_0_0_1 - 3.72916666666667*G1_1_0_1_0 - 0.91666666666667*G1_1_0_1_1 - 8.125*G1_1_1_0_0 - 5.20833333333333*G1_1_1_0_1 - 4.70833333333334*G1_1_1_1_0 - 1.45833333333334*G1_1_1_1_1;
    A[60] = -0.0666666666666636*G0_0_0_0_0 + 0.883333333333335*G0_0_0_0_1 - 0.383333333333333*G0_0_0_1_0 - 0.383333333333334*G0_0_0_1_1 - 0.533333333333329*G0_0_1_0_0 + 1.675*G0_0_1_0_1 - 0.958333333333333*G0_0_1_1_0 - 0.383333333333334*G0_0_1_1_1 - 0.099999999999997*G0_1_0_0_0 + 0.14166666666667*G0_1_0_0_1 + 0.441666666666665*G0_1_0_1_0 - 0.383333333333334*G0_1_0_1_1 - 0.533333333333327*G0_1_1_0_0 + 0.933333333333336*G0_1_1_0_1 - 0.133333333333334*G0_1_1_1_0 - 0.600000000000002*G0_1_1_1_1 + 0.0666666666666636*G1_0_0_0_0 - 0.883333333333335*G1_0_0_0_1 + 0.383333333333333*G1_0_0_1_0 + 0.383333333333334*G1_0_0_1_1 + 0.533333333333329*G1_0_1_0_0 - 1.675*G1_0_1_0_1 + 0.958333333333333*G1_0_1_1_0 + 0.383333333333334*G1_0_1_1_1 + 0.099999999999997*G1_1_0_0_0 - 0.14166666666667*G1_1_0_0_1 - 0.441666666666665*G1_1_0_1_0 + 0.383333333333334*G1_1_0_1_1 + 0.533333333333327*G1_1_1_0_0 - 0.933333333333336*G1_1_1_0_1 + 0.133333333333334*G1_1_1_1_0 + 0.600000000000002*G1_1_1_1_1;
    A[61] = 1.63333333333333*G0_0_0_0_0 - 1.43333333333333*G0_0_0_0_1 + 0.433333333333332*G0_0_0_1_0 + 0.433333333333331*G0_0_0_1_1 + 3.06666666666666*G0_0_1_0_0 - 3.68333333333333*G0_0_1_0_1 + 1.58333333333333*G0_0_1_1_0 + 0.433333333333328*G0_0_1_1_1 + 1.2*G0_1_0_0_0 - 0.283333333333334*G0_1_0_0_1 - 0.216666666666666*G0_1_0_1_0 + 0.433333333333334*G0_1_0_1_1 + 3.06666666666666*G0_1_1_0_0 - 2.53333333333333*G0_1_1_0_1 + 0.933333333333332*G0_1_1_1_0 + 1.2*G0_1_1_1_1 - 1.63333333333333*G1_0_0_0_0 + 1.43333333333333*G1_0_0_0_1 - 0.433333333333332*G1_0_0_1_0 - 0.433333333333331*G1_0_0_1_1 - 3.06666666666666*G1_0_1_0_0 + 3.68333333333333*G1_0_1_0_1 - 1.58333333333333*G1_0_1_1_0 - 0.433333333333328*G1_0_1_1_1 - 1.2*G1_1_0_0_0 + 0.283333333333334*G1_1_0_0_1 + 0.216666666666666*G1_1_0_1_0 - 0.433333333333334*G1_1_0_1_1 - 3.06666666666666*G1_1_1_0_0 + 2.53333333333333*G1_1_1_0_1 - 0.933333333333332*G1_1_1_1_0 - 1.2*G1_1_1_1_1;
    A[62] = 1.26666666666667*G0_0_0_0_0 + 3.38333333333333*G0_0_0_0_1 - 1.21666666666667*G0_0_0_1_0 - 1.21666666666667*G0_0_0_1_1 + 2.13333333333333*G0_0_1_0_0 + 7.25833333333333*G0_0_1_0_1 - 2.375*G0_0_1_1_0 - 1.21666666666666*G0_0_1_1_1 + 0.900000000000002*G0_1_0_0_0 + 1.05833333333334*G0_1_0_0_1 - 0.308333333333335*G0_1_0_1_0 - 1.21666666666667*G0_1_0_1_1 + 2.13333333333334*G0_1_1_0_0 + 4.93333333333333*G0_1_1_0_1 - 1.46666666666667*G0_1_1_1_0 - 2.6*G0_1_1_1_1 - 1.26666666666667*G1_0_0_0_0 - 3.38333333333333*G1_0_0_0_1 + 1.21666666666667*G1_0_0_1_0 + 1.21666666666667*G1_0_0_1_1 - 2.13333333333333*G1_0_1_0_0 - 7.25833333333333*G1_0_1_0_1 + 2.375*G1_0_1_1_0 + 1.21666666666666*G1_0_1_1_1 - 0.900000000000002*G1_1_0_0_0 - 1.05833333333334*G1_1_0_0_1 + 0.308333333333335*G1_1_0_1_0 + 1.21666666666667*G1_1_0_1_1 - 2.13333333333334*G1_1_1_0_0 - 4.93333333333333*G1_1_1_0_1 + 1.46666666666667*G1_1_1_1_0 + 2.6*G1_1_1_1_1;
    A[63] = -2.01666666666667*G0_0_0_0_0 - 2.3*G0_0_0_0_1 - 2.23333333333334*G0_0_0_1_0 - 2.3*G0_0_0_1_1 - 3.13333333333333*G0_0_1_0_0 - 4.21666666666667*G0_0_1_0_1 - 1.68333333333334*G0_0_1_1_0 - 2.76666666666667*G0_0_1_1_1 - 1.4*G0_1_0_0_0 - 0.683333333333338*G0_1_0_0_1 - 5.08333333333333*G0_1_0_1_0 - 3.43333333333333*G0_1_0_1_1 - 3.13333333333334*G0_1_1_0_0 - 2.6*G0_1_1_0_1 - 7.93333333333333*G0_1_1_1_0 - 5.86666666666667*G0_1_1_1_1 + 2.01666666666667*G1_0_0_0_0 + 2.3*G1_0_0_0_1 + 2.23333333333334*G1_0_0_1_0 + 2.3*G1_0_0_1_1 + 3.13333333333333*G1_0_1_0_0 + 4.21666666666667*G1_0_1_0_1 + 1.68333333333334*G1_0_1_1_0 + 2.76666666666667*G1_0_1_1_1 + 1.4*G1_1_0_0_0 + 0.683333333333338*G1_1_0_0_1 + 5.08333333333333*G1_1_0_1_0 + 3.43333333333333*G1_1_0_1_1 + 3.13333333333334*G1_1_1_0_0 + 2.6*G1_1_1_0_1 + 7.93333333333333*G1_1_1_1_0 + 5.86666666666667*G1_1_1_1_1;
    A[64] = 2.53333333333334*G0_0_0_0_0 + 4.26666666666667*G0_0_0_0_1 + 1.8*G0_0_0_1_0 + 4.26666666666667*G0_0_0_1_1 + 4.26666666666667*G0_0_1_0_0 + 8.76666666666666*G0_0_1_0_1 + 1.36666666666667*G0_0_1_1_0 + 5.86666666666667*G0_0_1_1_1 + 1.8*G0_1_0_0_0 + 1.36666666666667*G0_1_0_0_1 + 3.83333333333333*G0_1_0_1_0 + 5.86666666666667*G0_1_0_1_1 + 4.26666666666667*G0_1_1_0_0 + 5.86666666666667*G0_1_1_0_1 + 5.86666666666666*G0_1_1_1_0 + 11.7333333333333*G0_1_1_1_1 - 2.53333333333334*G1_0_0_0_0 - 4.26666666666667*G1_0_0_0_1 - 1.8*G1_0_0_1_0 - 4.26666666666667*G1_0_0_1_1 - 4.26666666666667*G1_0_1_0_0 - 8.76666666666666*G1_0_1_0_1 - 1.36666666666667*G1_0_1_1_0 - 5.86666666666667*G1_0_1_1_1 - 1.8*G1_1_0_0_0 - 1.36666666666667*G1_1_0_0_1 - 3.83333333333333*G1_1_0_1_0 - 5.86666666666667*G1_1_0_1_1 - 4.26666666666667*G1_1_1_0_0 - 5.86666666666667*G1_1_1_0_1 - 5.86666666666666*G1_1_1_1_0 - 11.7333333333333*G1_1_1_1_1;
    A[65] = 0.816666666666666*G0_0_0_0_0 - 1.96666666666667*G0_0_0_0_1 + 1.43333333333333*G0_0_0_1_0 - 1.96666666666667*G0_0_0_1_1 + 1.53333333333333*G0_0_1_0_0 - 4.71666666666666*G0_0_1_0_1 + 3.14999999999999*G0_0_1_1_0 - 3.1*G0_0_1_1_1 + 0.599999999999998*G0_1_0_0_0 - 0.516666666666669*G0_1_0_0_1 + 0.416666666666668*G0_1_0_1_0 - 2.43333333333333*G0_1_0_1_1 + 1.53333333333333*G0_1_1_0_0 - 3.26666666666667*G0_1_1_0_1 + 2.06666666666666*G0_1_1_1_0 - 5.86666666666667*G0_1_1_1_1 - 0.816666666666666*G1_0_0_0_0 + 1.96666666666667*G1_0_0_0_1 - 1.43333333333333*G1_0_0_1_0 + 1.96666666666667*G1_0_0_1_1 - 1.53333333333333*G1_0_1_0_0 + 4.71666666666666*G1_0_1_0_1 - 3.14999999999999*G1_0_1_1_0 + 3.1*G1_0_1_1_1 - 0.599999999999998*G1_1_0_0_0 + 0.516666666666669*G1_1_0_0_1 - 0.416666666666668*G1_1_0_1_0 + 2.43333333333333*G1_1_0_1_1 - 1.53333333333333*G1_1_1_0_0 + 3.26666666666667*G1_1_1_0_1 - 2.06666666666666*G1_1_1_1_0 + 5.86666666666667*G1_1_1_1_1;
    A[66] = -1.01666666666667*G0_0_0_0_0 - 1.38333333333334*G0_0_0_0_1 - 1.38333333333333*G0_0_0_1_0 - 1.38333333333333*G0_0_0_1_1 + 0.0333333333333318*G0_0_1_0_0 + 0.941666666666657*G0_0_1_0_1 - 2.29166666666666*G0_0_1_1_0 - 1.38333333333334*G0_0_1_1_1 - 2.86666666666666*G0_1_0_0_0 - 5.25833333333333*G0_1_0_0_1 - 0.225000000000002*G0_1_0_1_0 - 1.38333333333333*G0_1_0_1_1 - 3.93333333333333*G0_1_1_0_0 - 7.53333333333333*G0_1_1_0_1 - 1.13333333333333*G0_1_1_1_0 - 2.6*G0_1_1_1_1 + 1.01666666666667*G1_0_0_0_0 + 1.38333333333334*G1_0_0_0_1 + 1.38333333333333*G1_0_0_1_0 + 1.38333333333333*G1_0_0_1_1 - 0.0333333333333318*G1_0_1_0_0 - 0.941666666666657*G1_0_1_0_1 + 2.29166666666666*G1_0_1_1_0 + 1.38333333333334*G1_0_1_1_1 + 2.86666666666666*G1_1_0_0_0 + 5.25833333333333*G1_1_0_0_1 + 0.225000000000002*G1_1_0_1_0 + 1.38333333333333*G1_1_0_1_1 + 3.93333333333333*G1_1_1_0_0 + 7.53333333333333*G1_1_1_0_1 + 1.13333333333333*G1_1_1_1_0 + 2.6*G1_1_1_1_1;
    A[67] = 1.2*G0_0_0_0_0 + 0.766666666666671*G0_0_0_0_1 + 0.766666666666668*G0_0_0_1_0 + 0.766666666666669*G0_0_0_1_1 + 0.266666666666673*G0_0_1_0_0 - 0.383333333333326*G0_0_1_0_1 + 1.41666666666667*G0_0_1_1_0 + 0.766666666666671*G0_0_1_1_1 + 3.73333333333333*G0_1_0_0_0 + 3.01666666666667*G0_1_0_0_1 - 0.38333333333333*G0_1_0_1_0 + 0.766666666666669*G0_1_0_1_1 + 5.86666666666666*G0_1_1_0_0 + 3.73333333333333*G0_1_1_0_1 + 0.266666666666671*G0_1_1_1_0 + 1.2*G0_1_1_1_1 - 1.2*G1_0_0_0_0 - 0.766666666666671*G1_0_0_0_1 - 0.766666666666668*G1_0_0_1_0 - 0.766666666666669*G1_0_0_1_1 - 0.266666666666673*G1_0_1_0_0 + 0.383333333333326*G1_0_1_0_1 - 1.41666666666667*G1_0_1_1_0 - 0.766666666666671*G1_0_1_1_1 - 3.73333333333333*G1_1_0_0_0 - 3.01666666666667*G1_1_0_0_1 + 0.38333333333333*G1_1_0_1_0 - 0.766666666666669*G1_1_0_1_1 - 5.86666666666666*G1_1_1_0_0 - 3.73333333333333*G1_1_1_0_1 - 0.266666666666671*G1_1_1_1_0 - 1.2*G1_1_1_1_1;
    A[68] = -0.183333333333334*G0_0_0_0_0 - 0.216666666666667*G0_0_0_0_1 - 0.216666666666666*G0_0_0_1_0 - 0.216666666666666*G0_0_0_1_1 - 0.300000000000002*G0_0_1_0_0 + 0.525*G0_0_1_0_1 - 1.04166666666667*G0_0_1_1_0 - 0.216666666666665*G0_0_1_1_1 - 0.866666666666664*G0_1_0_0_0 - 1.00833333333333*G0_1_0_0_1 + 0.358333333333333*G0_1_0_1_0 - 0.216666666666668*G0_1_0_1_1 - 1.93333333333333*G0_1_1_0_0 - 1.53333333333334*G0_1_1_0_1 - 0.466666666666666*G0_1_1_1_0 - 0.600000000000003*G0_1_1_1_1 + 0.183333333333334*G1_0_0_0_0 + 0.216666666666667*G1_0_0_0_1 + 0.216666666666666*G1_0_0_1_0 + 0.216666666666666*G1_0_0_1_1 + 0.300000000000002*G1_0_1_0_0 - 0.525*G1_0_1_0_1 + 1.04166666666667*G1_0_1_1_0 + 0.216666666666665*G1_0_1_1_1 + 0.866666666666664*G1_1_0_0_0 + 1.00833333333333*G1_1_0_0_1 - 0.358333333333333*G1_1_0_1_0 + 0.216666666666668*G1_1_0_1_1 + 1.93333333333333*G1_1_1_0_0 + 1.53333333333334*G1_1_1_0_1 + 0.466666666666666*G1_1_1_1_0 + 0.600000000000003*G1_1_1_1_1;
    A[69] = 4.00693842672377*G0_0_0_0_0 + 5.18544972870135*G0_0_0_0_1 - 0.471404520791034*G0_0_0_1_0 - 0.471404520791035*G0_0_0_1_1 + 6.59966329107444*G0_0_1_0_0 + 5.8925565098879*G0_0_1_0_1 + 0.23570226039551*G0_0_1_1_0 - 0.471404520791039*G0_0_1_1_1 + 2.82842712474619*G0_1_0_0_0 + 5.8925565098879*G0_1_0_0_1 + 0.235702260395514*G0_1_0_1_0 - 0.471404520791029*G0_1_0_1_1 + 6.59966329107444*G0_1_1_0_0 + 12.2565175405668*G0_1_1_0_1 + 0.942809041582059*G0_1_1_1_0 - 4.00693842672377*G1_0_0_0_0 - 5.18544972870135*G1_0_0_0_1 + 0.471404520791034*G1_0_0_1_0 + 0.471404520791035*G1_0_0_1_1 - 6.59966329107444*G1_0_1_0_0 - 5.8925565098879*G1_0_1_0_1 - 0.23570226039551*G1_0_1_1_0 + 0.471404520791039*G1_0_1_1_1 - 2.82842712474619*G1_1_0_0_0 - 5.8925565098879*G1_1_0_0_1 - 0.235702260395514*G1_1_0_1_0 + 0.471404520791029*G1_1_0_1_1 - 6.59966329107444*G1_1_1_0_0 - 12.2565175405668*G1_1_1_0_1 - 0.942809041582059*G1_1_1_1_0;
    A[70] = -0.577350269189621*G0_0_0_0_0 - 0.721687836487037*G0_0_0_0_1 - 3.31976404784035*G0_0_0_1_0 - 3.31976404784035*G0_0_0_1_1 + 2.30940107675851*G0_0_1_0_0 + 2.95892012959682*G0_0_1_0_1 - 3.96928310067867*G0_0_1_1_0 - 3.31976404784036*G0_0_1_1_1 - 2.59807621135331*G0_1_0_0_0 - 7.43338471581641*G0_1_0_0_1 - 0.505181485540922*G0_1_0_1_0 - 3.31976404784035*G0_1_0_1_1 + 2.30940107675851*G0_1_1_0_0 - 8.08290376865474*G0_1_1_0_1 - 1.15470053837925*G0_1_1_1_0 - 5.19615242270663*G0_1_1_1_1 + 0.577350269189621*G1_0_0_0_0 + 0.721687836487037*G1_0_0_0_1 + 3.31976404784035*G1_0_0_1_0 + 3.31976404784035*G1_0_0_1_1 - 2.30940107675851*G1_0_1_0_0 - 2.95892012959682*G1_0_1_0_1 + 3.96928310067867*G1_0_1_1_0 + 3.31976404784036*G1_0_1_1_1 + 2.59807621135331*G1_1_0_0_0 + 7.43338471581641*G1_1_0_0_1 + 0.505181485540922*G1_1_0_1_0 + 3.31976404784035*G1_1_0_1_1 - 2.30940107675851*G1_1_1_0_0 + 8.08290376865474*G1_1_1_0_1 + 1.15470053837925*G1_1_1_1_0 + 5.19615242270663*G1_1_1_1_1;
    A[71] = 4.83333333333334*G0_0_0_0_0 + 2.41666666666666*G0_0_0_0_1 - 4.08333333333333*G0_0_0_1_0 - 4.08333333333333*G0_0_0_1_1 + 8.66666666666667*G0_0_1_0_0 + 12.2916666666666*G0_0_1_0_1 - 7.70833333333332*G0_0_1_1_0 - 4.08333333333333*G0_0_1_1_1 + 3.5*G0_1_0_0_0 - 5.70833333333333*G0_1_0_0_1 - 1.70833333333334*G0_1_0_1_0 - 4.08333333333334*G0_1_0_1_1 + 8.66666666666667*G0_1_1_0_0 - 1.33333333333335*G0_1_1_0_1 - 5.33333333333333*G0_1_1_1_0 - 9.00000000000001*G0_1_1_1_1 - 4.83333333333334*G1_0_0_0_0 - 2.41666666666666*G1_0_0_0_1 + 4.08333333333333*G1_0_0_1_0 + 4.08333333333333*G1_0_0_1_1 - 8.66666666666667*G1_0_1_0_0 - 12.2916666666666*G1_0_1_0_1 + 7.70833333333332*G1_0_1_1_0 + 4.08333333333333*G1_0_1_1_1 - 3.5*G1_1_0_0_0 + 5.70833333333333*G1_1_0_0_1 + 1.70833333333334*G1_1_0_1_0 + 4.08333333333334*G1_1_0_1_1 - 8.66666666666667*G1_1_1_0_0 + 1.33333333333335*G1_1_1_0_1 + 5.33333333333333*G1_1_1_1_0 + 9.00000000000001*G1_1_1_1_1;
    A[72] = -5.8925565098879*G0_0_0_0_0 - 4.00693842672377*G0_0_0_0_1 + 0.235702260395518*G0_0_0_1_0 + 1.64991582276861*G0_0_0_1_1 - 10.3708994574027*G0_0_1_0_0 - 7.18891894206323*G0_0_1_0_1 - 1.53206469257085*G0_0_1_1_0 + 1.64991582276862*G0_0_1_1_1 - 4.24264068711929*G0_1_0_0_0 - 1.53206469257086*G0_1_0_0_1 + 1.29636243217533*G0_1_0_1_0 + 1.64991582276861*G0_1_0_1_1 - 10.3708994574027*G0_1_1_0_0 - 4.71404520791032*G0_1_1_0_1 + 0.94280904158206*G0_1_1_1_0 + 2.82842712474619*G0_1_1_1_1 + 5.8925565098879*G1_0_0_0_0 + 4.00693842672377*G1_0_0_0_1 - 0.235702260395518*G1_0_0_1_0 - 1.64991582276861*G1_0_0_1_1 + 10.3708994574027*G1_0_1_0_0 + 7.18891894206323*G1_0_1_0_1 + 1.53206469257085*G1_0_1_1_0 - 1.64991582276862*G1_0_1_1_1 + 4.24264068711929*G1_1_0_0_0 + 1.53206469257086*G1_1_0_0_1 - 1.29636243217533*G1_1_0_1_0 - 1.64991582276861*G1_1_0_1_1 + 10.3708994574027*G1_1_1_0_0 + 4.71404520791032*G1_1_1_0_1 - 0.94280904158206*G1_1_1_1_0 - 2.82842712474619*G1_1_1_1_1;
    A[73] = -3.89711431702998*G0_0_0_0_0 - 3.03108891324555*G0_0_0_0_1 - 3.03108891324555*G0_0_0_1_0 - 0.433012701892224*G0_0_0_1_1 - 5.19615242270664*G0_0_1_0_0 - 4.1136206679761*G0_0_1_0_1 - 1.51554445662278*G0_0_1_1_0 - 0.433012701892221*G0_0_1_1_1 - 2.59807621135332*G0_1_0_0_0 - 0.649519052838343*G0_1_0_0_1 - 8.44374768689827*G0_1_0_1_0 - 0.43301270189223*G0_1_0_1_1 - 5.19615242270664*G0_1_1_0_0 - 1.7320508075689*G0_1_1_0_1 - 8.66025403784438*G0_1_1_1_0 + 1.73205080756886*G0_1_1_1_1 + 3.89711431702998*G1_0_0_0_0 + 3.03108891324555*G1_0_0_0_1 + 3.03108891324555*G1_0_0_1_0 + 0.433012701892224*G1_0_0_1_1 + 5.19615242270664*G1_0_1_0_0 + 4.1136206679761*G1_0_1_0_1 + 1.51554445662278*G1_0_1_1_0 + 0.433012701892221*G1_0_1_1_1 + 2.59807621135332*G1_1_0_0_0 + 0.649519052838343*G1_1_0_0_1 + 8.44374768689827*G1_1_0_1_0 + 0.43301270189223*G1_1_0_1_1 + 5.19615242270664*G1_1_1_0_0 + 1.7320508075689*G1_1_1_0_1 + 8.66025403784438*G1_1_1_1_0 - 1.73205080756886*G1_1_1_1_1;
    A[74] = -10.4166666666667*G0_0_0_0_0 - 7.08333333333333*G0_0_0_0_1 - 4.08333333333334*G0_0_0_1_0 - 0.583333333333339*G0_0_0_1_1 - 18.3333333333333*G0_0_1_0_0 - 12.7083333333333*G0_0_1_0_1 - 6.20833333333334*G0_0_1_1_0 - 0.583333333333337*G0_0_1_1_1 - 7.5*G0_1_0_0_0 - 2.70833333333334*G0_1_0_0_1 - 6.20833333333333*G0_1_0_1_0 - 0.583333333333339*G0_1_0_1_1 - 18.3333333333333*G0_1_1_0_0 - 8.33333333333334*G0_1_1_0_1 - 12.3333333333333*G0_1_1_1_0 + 5*G0_1_1_1_1 + 10.4166666666667*G1_0_0_0_0 + 7.08333333333333*G1_0_0_0_1 + 4.08333333333334*G1_0_0_1_0 + 0.583333333333339*G1_0_0_1_1 + 18.3333333333333*G1_0_1_0_0 + 12.7083333333333*G1_0_1_0_1 + 6.20833333333334*G1_0_1_1_0 + 0.583333333333337*G1_0_1_1_1 + 7.5*G1_1_0_0_0 + 2.70833333333334*G1_1_0_0_1 + 6.20833333333333*G1_1_0_1_0 + 0.583333333333339*G1_1_0_1_1 + 18.3333333333333*G1_1_1_0_0 + 8.33333333333334*G1_1_1_0_1 + 12.3333333333333*G1_1_1_1_0 - 5*G1_1_1_1_1;
    A[75] = -1.00833333333334*G0_0_0_0_0 + 0.141666666666666*G0_0_0_0_1 + 0.108333333333334*G0_0_0_1_0 + 0.108333333333334*G0_0_0_1_1 + 1.18333333333333*G0_0_1_0_0 - 0.8375*G0_0_1_0_1 + 1.14583333333333*G0_0_1_1_0 + 0.108333333333334*G0_0_1_1_1 - 2.11666666666667*G0_1_0_0_0 + 0.512499999999997*G0_1_0_0_1 - 0.637499999999996*G0_1_0_1_0 + 0.108333333333334*G0_1_0_1_1 + 1.18333333333333*G0_1_1_0_0 - 0.466666666666668*G0_1_1_0_1 + 0.400000000000002*G0_1_1_1_0 + 0.0916666666666693*G0_1_1_1_1 + 1.00833333333334*G1_0_0_0_0 - 0.141666666666666*G1_0_0_0_1 - 0.108333333333334*G1_0_0_1_0 - 0.108333333333334*G1_0_0_1_1 - 1.18333333333333*G1_0_1_0_0 + 0.8375*G1_0_1_0_1 - 1.14583333333333*G1_0_1_1_0 - 0.108333333333334*G1_0_1_1_1 + 2.11666666666667*G1_1_0_0_0 - 0.512499999999997*G1_1_0_0_1 + 0.637499999999996*G1_1_0_1_0 - 0.108333333333334*G1_1_0_1_1 - 1.18333333333333*G1_1_1_0_0 + 0.466666666666668*G1_1_1_0_1 - 0.400000000000002*G1_1_1_1_0 - 0.0916666666666693*G1_1_1_1_1;
    A[76] = 1.26666666666667*G0_0_0_0_0 - 0.866666666666666*G0_0_0_0_1 + 0.366666666666667*G0_0_0_1_0 + 0.366666666666667*G0_0_0_1_1 - 2.11666666666666*G0_0_1_0_0 + 3.00833333333333*G0_0_1_0_1 - 1.95833333333333*G0_0_1_1_0 + 0.366666666666669*G0_0_1_1_1 + 2.48333333333333*G0_1_0_0_0 - 2.025*G0_1_0_0_1 + 1.275*G0_1_0_1_0 + 0.366666666666666*G0_1_0_1_1 - 2.11666666666667*G0_1_1_0_0 + 1.85*G0_1_1_0_1 - 1.05*G0_1_1_1_0 - 1.01666666666666*G0_1_1_1_1 - 1.26666666666667*G1_0_0_0_0 + 0.866666666666666*G1_0_0_0_1 - 0.366666666666667*G1_0_0_1_0 - 0.366666666666667*G1_0_0_1_1 + 2.11666666666666*G1_0_1_0_0 - 3.00833333333333*G1_0_1_0_1 + 1.95833333333333*G1_0_1_1_0 - 0.366666666666669*G1_0_1_1_1 - 2.48333333333333*G1_1_0_0_0 + 2.025*G1_1_0_0_1 - 1.275*G1_1_0_1_0 - 0.366666666666666*G1_1_0_1_1 + 2.11666666666667*G1_1_1_0_0 - 1.85*G1_1_1_0_1 + 1.05*G1_1_1_1_0 + 1.01666666666666*G1_1_1_1_1;
    A[77] = 0.408333333333333*G0_0_0_0_0 + 1.39166666666667*G0_0_0_0_1 - 0.308333333333332*G0_0_0_1_0 - 0.308333333333332*G0_0_0_1_1 - 0.983333333333333*G0_0_1_0_0 - 4.29583333333333*G0_0_1_0_1 + 1.1875*G0_0_1_1_0 - 0.308333333333334*G0_0_1_1_1 + 0.716666666666665*G0_1_0_0_0 + 2.88749999999999*G0_1_0_0_1 - 0.762499999999997*G0_1_0_1_0 - 0.308333333333331*G0_1_0_1_1 - 0.983333333333335*G0_1_1_0_0 - 2.8*G0_1_1_0_1 + 0.733333333333334*G0_1_1_1_0 + 1.50833333333333*G0_1_1_1_1 - 0.408333333333333*G1_0_0_0_0 - 1.39166666666667*G1_0_0_0_1 + 0.308333333333332*G1_0_0_1_0 + 0.308333333333332*G1_0_0_1_1 + 0.983333333333333*G1_0_1_0_0 + 4.29583333333333*G1_0_1_0_1 - 1.1875*G1_0_1_1_0 + 0.308333333333334*G1_0_1_1_1 - 0.716666666666665*G1_1_0_0_0 - 2.88749999999999*G1_1_0_0_1 + 0.762499999999997*G1_1_0_1_0 + 0.308333333333331*G1_1_0_1_1 + 0.983333333333335*G1_1_1_0_0 + 2.8*G1_1_1_0_1 - 0.733333333333334*G1_1_1_1_0 - 1.50833333333333*G1_1_1_1_1;
    A[78] = -0.0333333333333309*G0_0_0_0_0 - 0.474999999999999*G0_0_0_0_1 + 0.158333333333339*G0_0_0_1_0 - 0.474999999999997*G0_0_0_1_1 + 0.858333333333334*G0_0_1_0_0 + 1.69166666666667*G0_0_1_0_1 + 0.258333333333338*G0_0_1_1_0 + 1.09166666666667*G0_0_1_1_1 + 0.158333333333337*G0_1_0_0_0 - 1.075*G0_1_0_0_1 + 1.625*G0_1_0_1_0 - 0.241666666666666*G0_1_0_1_1 + 0.858333333333336*G0_1_1_0_0 + 1.09166666666667*G0_1_1_0_1 + 2.425*G0_1_1_1_0 + 2.18333333333333*G0_1_1_1_1 + 0.0333333333333309*G1_0_0_0_0 + 0.474999999999999*G1_0_0_0_1 - 0.158333333333339*G1_0_0_1_0 + 0.474999999999997*G1_0_0_1_1 - 0.858333333333334*G1_0_1_0_0 - 1.69166666666667*G1_0_1_0_1 - 0.258333333333338*G1_0_1_1_0 - 1.09166666666667*G1_0_1_1_1 - 0.158333333333337*G1_1_0_0_0 + 1.075*G1_1_0_0_1 - 1.625*G1_1_0_1_0 + 0.241666666666666*G1_1_0_1_1 - 0.858333333333336*G1_1_1_0_0 - 1.09166666666667*G1_1_1_0_1 - 2.425*G1_1_1_1_0 - 2.18333333333333*G1_1_1_1_1;
    A[79] = 0.816666666666666*G0_0_0_0_0 + 1.53333333333333*G0_0_0_0_1 + 0.599999999999998*G0_0_0_1_0 + 1.53333333333333*G0_0_0_1_1 - 1.96666666666667*G0_0_1_0_0 - 4.71666666666666*G0_0_1_0_1 - 0.516666666666669*G0_0_1_1_0 - 3.26666666666667*G0_0_1_1_1 + 1.43333333333333*G0_1_0_0_0 + 3.14999999999999*G0_1_0_0_1 + 0.416666666666668*G0_1_0_1_0 + 2.06666666666666*G0_1_0_1_1 - 1.96666666666667*G0_1_1_0_0 - 3.1*G0_1_1_0_1 - 2.43333333333333*G0_1_1_1_0 - 5.86666666666667*G0_1_1_1_1 - 0.816666666666666*G1_0_0_0_0 - 1.53333333333333*G1_0_0_0_1 - 0.599999999999998*G1_0_0_1_0 - 1.53333333333333*G1_0_0_1_1 + 1.96666666666667*G1_0_1_0_0 + 4.71666666666666*G1_0_1_0_1 + 0.516666666666669*G1_0_1_1_0 + 3.26666666666667*G1_0_1_1_1 - 1.43333333333333*G1_1_0_0_0 - 3.14999999999999*G1_1_0_0_1 - 0.416666666666668*G1_1_0_1_0 - 2.06666666666666*G1_1_0_1_1 + 1.96666666666667*G1_1_1_0_0 + 3.1*G1_1_1_0_1 + 2.43333333333333*G1_1_1_1_0 + 5.86666666666667*G1_1_1_1_1;
    A[80] = 0.633333333333334*G0_0_0_0_0 - 1.05833333333333*G0_0_0_0_1 + 1.24166666666667*G0_0_0_1_0 - 1.05833333333333*G0_0_0_1_1 - 1.05833333333333*G0_0_1_0_0 + 3.44166666666666*G0_0_1_0_1 - 2.325*G0_0_1_1_0 + 2.175*G0_0_1_1_1 + 1.24166666666667*G0_1_0_0_0 - 2.325*G0_1_0_0_1 + 2.70833333333333*G0_1_0_1_0 - 1.825*G0_1_0_1_1 - 1.05833333333333*G0_1_1_0_0 + 2.175*G0_1_1_0_1 - 1.825*G0_1_1_1_0 + 3.68333333333333*G0_1_1_1_1 - 0.633333333333334*G1_0_0_0_0 + 1.05833333333333*G1_0_0_0_1 - 1.24166666666667*G1_0_0_1_0 + 1.05833333333333*G1_0_0_1_1 + 1.05833333333333*G1_0_1_0_0 - 3.44166666666666*G1_0_1_0_1 + 2.325*G1_0_1_1_0 - 2.175*G1_0_1_1_1 - 1.24166666666667*G1_1_0_0_0 + 2.325*G1_1_0_0_1 - 2.70833333333333*G1_1_0_1_0 + 1.825*G1_1_0_1_1 + 1.05833333333333*G1_1_1_0_0 - 2.175*G1_1_1_0_1 + 1.825*G1_1_1_1_0 - 3.68333333333333*G1_1_1_1_1;
    A[81] = 0.0916666666666709*G0_0_0_0_0 - 0.0166666666666632*G0_0_0_0_1 - 0.0166666666666649*G0_0_0_1_0 - 0.0166666666666651*G0_0_0_1_1 - 0.308333333333333*G0_0_1_0_0 - 1.05416666666666*G0_0_1_0_1 + 0.729166666666665*G0_0_1_1_0 - 0.0166666666666636*G0_0_1_1_1 + 0.558333333333337*G0_1_0_0_0 + 0.962499999999998*G0_1_0_0_1 - 0.387499999999994*G0_1_0_1_0 - 0.0166666666666646*G0_1_0_1_1 + 1.34166666666666*G0_1_1_0_0 + 3.225*G0_1_1_0_1 + 0.358333333333335*G0_1_1_1_0 + 1.09166666666667*G0_1_1_1_1 - 0.0916666666666709*G1_0_0_0_0 + 0.0166666666666632*G1_0_0_0_1 + 0.0166666666666649*G1_0_0_1_0 + 0.0166666666666651*G1_0_0_1_1 + 0.308333333333333*G1_0_1_0_0 + 1.05416666666666*G1_0_1_0_1 - 0.729166666666665*G1_0_1_1_0 + 0.0166666666666636*G1_0_1_1_1 - 0.558333333333337*G1_1_0_0_0 - 0.962499999999998*G1_1_0_0_1 + 0.387499999999994*G1_1_0_1_0 + 0.0166666666666646*G1_1_0_1_1 - 1.34166666666666*G1_1_1_0_0 - 3.225*G1_1_1_0_1 - 0.358333333333335*G1_1_1_1_0 - 1.09166666666667*G1_1_1_1_1;
    A[82] = -0.600000000000005*G0_0_0_0_0 - 0.216666666666669*G0_0_0_0_1 - 0.216666666666667*G0_0_0_1_0 - 0.216666666666667*G0_0_0_1_1 - 0.466666666666671*G0_0_1_0_0 + 0.358333333333329*G0_0_1_0_1 - 1.04166666666667*G0_0_1_1_0 - 0.21666666666667*G0_0_1_1_1 - 1.53333333333333*G0_1_0_0_0 - 1.00833333333333*G0_1_0_0_1 + 0.524999999999994*G0_1_0_1_0 - 0.216666666666668*G0_1_0_1_1 - 1.93333333333334*G0_1_1_0_0 - 0.86666666666667*G0_1_1_0_1 - 0.300000000000004*G0_1_1_1_0 - 0.183333333333338*G0_1_1_1_1 + 0.600000000000005*G1_0_0_0_0 + 0.216666666666669*G1_0_0_0_1 + 0.216666666666667*G1_0_0_1_0 + 0.216666666666667*G1_0_0_1_1 + 0.466666666666671*G1_0_1_0_0 - 0.358333333333329*G1_0_1_0_1 + 1.04166666666667*G1_0_1_1_0 + 0.21666666666667*G1_0_1_1_1 + 1.53333333333333*G1_1_0_0_0 + 1.00833333333333*G1_1_0_0_1 - 0.524999999999994*G1_1_0_1_0 + 0.216666666666668*G1_1_0_1_1 + 1.93333333333334*G1_1_1_0_0 + 0.86666666666667*G1_1_1_0_1 + 0.300000000000004*G1_1_1_1_0 + 0.183333333333338*G1_1_1_1_1;
    A[83] = 0.508333333333335*G0_0_0_0_0 - 0.183333333333334*G0_0_0_0_1 - 0.183333333333334*G0_0_0_1_0 - 0.183333333333334*G0_0_0_1_1 + 0.775000000000002*G0_0_1_0_0 - 1.0125*G0_0_1_0_1 + 1.60416666666667*G0_0_1_1_0 - 0.183333333333334*G0_0_1_1_1 + 0.975*G0_1_0_0_0 + 0.170833333333331*G0_1_0_0_1 - 1.0125*G0_1_0_1_0 - 0.183333333333334*G0_1_0_1_1 + 0.591666666666668*G0_1_1_0_0 + 0.975*G0_1_1_0_1 + 0.775000000000001*G0_1_1_1_0 + 0.508333333333335*G0_1_1_1_1 - 0.508333333333335*G1_0_0_0_0 + 0.183333333333334*G1_0_0_0_1 + 0.183333333333334*G1_0_0_1_0 + 0.183333333333334*G1_0_0_1_1 - 0.775000000000002*G1_0_1_0_0 + 1.0125*G1_0_1_0_1 - 1.60416666666667*G1_0_1_1_0 + 0.183333333333334*G1_0_1_1_1 - 0.975*G1_1_0_0_0 - 0.170833333333331*G1_1_0_0_1 + 1.0125*G1_1_0_1_0 + 0.183333333333334*G1_1_0_1_1 - 0.591666666666668*G1_1_1_0_0 - 0.975*G1_1_1_0_1 - 0.775000000000001*G1_1_1_1_0 - 0.508333333333335*G1_1_1_1_1;
    A[84] = 0.942809041582059*G0_0_0_0_0 + 1.53206469257085*G0_0_0_0_1 + 0.824957911384306*G0_0_0_1_0 + 0.824957911384308*G0_0_0_1_1 - 2.71057599454843*G0_0_1_0_0 - 0.589255650988791*G0_0_1_0_1 - 1.29636243217533*G0_0_1_1_0 + 0.82495791138431*G0_0_1_1_1 + 1.53206469257085*G0_1_0_0_0 + 1.76776695296637*G0_1_0_0_1 + 1.06066017177982*G0_1_0_1_0 + 0.824957911384309*G0_1_0_1_1 - 2.71057599454843*G0_1_1_0_0 - 6.7175144212722*G0_1_1_0_1 - 1.06066017177982*G0_1_1_1_0 - 1.17851130197758*G0_1_1_1_1 - 0.942809041582059*G1_0_0_0_0 - 1.53206469257085*G1_0_0_0_1 - 0.824957911384306*G1_0_0_1_0 - 0.824957911384308*G1_0_0_1_1 + 2.71057599454843*G1_0_1_0_0 + 0.589255650988791*G1_0_1_0_1 + 1.29636243217533*G1_0_1_1_0 - 0.82495791138431*G1_0_1_1_1 - 1.53206469257085*G1_1_0_0_0 - 1.76776695296637*G1_1_0_0_1 - 1.06066017177982*G1_1_0_1_0 - 0.824957911384309*G1_1_0_1_1 + 2.71057599454843*G1_1_1_0_0 + 6.7175144212722*G1_1_1_0_1 + 1.06066017177982*G1_1_1_1_0 + 1.17851130197758*G1_1_1_1_1;
    A[85] = -2.2372322931098*G0_0_0_0_0 - 0.360843918243511*G0_0_0_0_1 + 0.938194187433146*G0_0_0_1_0 + 0.938194187433147*G0_0_0_1_1 - 1.87638837486629*G0_0_1_0_0 - 0.0360843918243439*G0_0_1_0_1 - 0.902109795608786*G0_0_1_1_0 + 0.938194187433155*G0_0_1_1_1 - 4.47446458621959*G0_1_0_0_0 + 0.108253175473052*G0_1_0_0_1 + 0.974278579257503*G0_1_0_1_0 + 0.93819418743315*G0_1_0_1_1 - 1.87638837486629*G0_1_1_0_0 + 2.59807621135331*G0_1_1_0_1 - 0.866025403784432*G0_1_1_1_0 + 0.793856620135746*G0_1_1_1_1 + 2.2372322931098*G1_0_0_0_0 + 0.360843918243511*G1_0_0_0_1 - 0.938194187433146*G1_0_0_1_0 - 0.938194187433147*G1_0_0_1_1 + 1.87638837486629*G1_0_1_0_0 + 0.0360843918243439*G1_0_1_0_1 + 0.902109795608786*G1_0_1_1_0 - 0.938194187433155*G1_0_1_1_1 + 4.47446458621959*G1_1_0_0_0 - 0.108253175473052*G1_1_0_0_1 - 0.974278579257503*G1_1_0_1_0 - 0.93819418743315*G1_1_0_1_1 + 1.87638837486629*G1_1_1_0_0 - 2.59807621135331*G1_1_1_0_1 + 0.866025403784432*G1_1_1_1_0 - 0.793856620135746*G1_1_1_1_1;
    A[86] = 2.79166666666667*G0_0_0_0_0 + 0.458333333333332*G0_0_0_0_1 - 1.29166666666666*G0_0_0_1_0 - 1.29166666666666*G0_0_0_1_1 - 5.16666666666667*G0_0_1_0_0 - 9.47916666666665*G0_0_1_0_1 + 3.02083333333333*G0_0_1_1_0 - 1.29166666666666*G0_0_1_1_1 + 5.33333333333333*G0_1_0_0_0 + 2.43749999999999*G0_1_0_0_1 - 2.06249999999999*G0_1_0_1_0 - 1.29166666666666*G0_1_0_1_1 - 5.16666666666667*G0_1_1_0_0 + 0.250000000000001*G0_1_1_0_1 + 2.25*G0_1_1_1_0 + 5.54166666666666*G0_1_1_1_1 - 2.79166666666667*G1_0_0_0_0 - 0.458333333333332*G1_0_0_0_1 + 1.29166666666666*G1_0_0_1_0 + 1.29166666666666*G1_0_0_1_1 + 5.16666666666667*G1_0_1_0_0 + 9.47916666666665*G1_0_1_0_1 - 3.02083333333333*G1_0_1_1_0 + 1.29166666666666*G1_0_1_1_1 - 5.33333333333333*G1_1_0_0_0 - 2.43749999999999*G1_1_0_0_1 + 2.06249999999999*G1_1_0_1_0 + 1.29166666666666*G1_1_0_1_1 + 5.16666666666667*G1_1_1_0_0 - 0.250000000000001*G1_1_1_0_1 - 2.25*G1_1_1_1_0 - 5.54166666666666*G1_1_1_1_1;
    A[87] = -2.94627825494395*G0_0_0_0_0 - 0.942809041582061*G0_0_0_0_1 - 3.06412938514171*G0_0_0_1_0 - 0.235702260395518*G0_0_0_1_1 + 5.77470537969014*G0_0_1_0_0 + 2.41594816905403*G0_0_1_0_1 + 3.12305495024058*G0_0_1_1_0 - 0.235702260395521*G0_0_1_1_1 - 5.53900311929462*G0_1_0_0_0 - 1.59099025766972*G0_1_0_0_1 - 6.54073772597557*G0_1_0_1_0 - 0.235702260395519*G0_1_0_1_1 + 5.77470537969014*G0_1_1_0_0 + 1.76776695296637*G0_1_1_0_1 + 2.47487373415291*G0_1_1_1_0 - 0.824957911384308*G0_1_1_1_1 + 2.94627825494395*G1_0_0_0_0 + 0.942809041582061*G1_0_0_0_1 + 3.06412938514171*G1_0_0_1_0 + 0.235702260395518*G1_0_0_1_1 - 5.77470537969014*G1_0_1_0_0 - 2.41594816905403*G1_0_1_0_1 - 3.12305495024058*G1_0_1_1_0 + 0.235702260395521*G1_0_1_1_1 + 5.53900311929462*G1_1_0_0_0 + 1.59099025766972*G1_1_0_0_1 + 6.54073772597557*G1_1_0_1_0 + 0.235702260395519*G1_1_0_1_1 - 5.77470537969014*G1_1_1_0_0 - 1.76776695296637*G1_1_1_0_1 - 2.47487373415291*G1_1_1_1_0 + 0.824957911384308*G1_1_1_1_1;
    A[88] = 1.948557158515*G0_0_0_0_0 + 0.43301270189222*G0_0_0_0_1 + 0.433012701892228*G0_0_0_1_0 - 0.86602540378444*G0_0_0_1_1 - 0.649519052838325*G0_0_1_0_0 - 0.108253175473045*G0_0_1_0_1 - 1.4072912811497*G0_0_1_1_0 - 0.866025403784438*G0_0_1_1_1 + 4.54663336986832*G0_1_0_0_0 + 0.324759526419169*G0_1_0_0_1 + 4.22187384344913*G0_1_0_1_0 - 0.86602540378444*G0_1_0_1_1 - 0.649519052838323*G0_1_1_0_0 - 0.216506350946095*G0_1_1_0_1 - 1.08253175473054*G0_1_1_1_0 - 1.94855715851498*G0_1_1_1_1 - 1.948557158515*G1_0_0_0_0 - 0.43301270189222*G1_0_0_0_1 - 0.433012701892228*G1_0_0_1_0 + 0.86602540378444*G1_0_0_1_1 + 0.649519052838325*G1_0_1_0_0 + 0.108253175473045*G1_0_1_0_1 + 1.4072912811497*G1_0_1_1_0 + 0.866025403784438*G1_0_1_1_1 - 4.54663336986832*G1_1_0_0_0 - 0.324759526419169*G1_1_0_0_1 - 4.22187384344913*G1_1_0_1_0 + 0.86602540378444*G1_1_0_1_1 + 0.649519052838323*G1_1_1_0_0 + 0.216506350946095*G1_1_1_0_1 + 1.08253175473054*G1_1_1_1_0 + 1.94855715851498*G1_1_1_1_1;
    A[89] = -5.20833333333333*G0_0_0_0_0 - 1.66666666666666*G0_0_0_0_1 - 3.16666666666667*G0_0_0_1_0 + 0.0833333333333329*G0_0_0_1_1 + 10.2083333333333*G0_0_1_0_0 + 4.27083333333333*G0_0_1_0_1 + 6.02083333333333*G0_0_1_1_0 + 0.0833333333333344*G0_0_1_1_1 - 9.79166666666666*G0_1_0_0_0 - 2.81249999999999*G0_1_0_0_1 - 6.0625*G0_1_0_1_0 + 0.0833333333333339*G0_1_0_1_1 + 10.2083333333333*G0_1_1_0_0 + 3.125*G0_1_1_0_1 + 7.625*G0_1_1_1_0 - 6.45833333333332*G0_1_1_1_1 + 5.20833333333333*G1_0_0_0_0 + 1.66666666666666*G1_0_0_0_1 + 3.16666666666667*G1_0_0_1_0 - 0.0833333333333329*G1_0_0_1_1 - 10.2083333333333*G1_0_1_0_0 - 4.27083333333333*G1_0_1_0_1 - 6.02083333333333*G1_0_1_1_0 - 0.0833333333333344*G1_0_1_1_1 + 9.79166666666666*G1_1_0_0_0 + 2.81249999999999*G1_1_0_0_1 + 6.0625*G1_1_0_1_0 - 0.0833333333333339*G1_1_0_1_1 - 10.2083333333333*G1_1_1_0_0 - 3.125*G1_1_1_0_1 - 7.625*G1_1_1_1_0 + 6.45833333333332*G1_1_1_1_1;
    A[90] = -1.09166666666667*G0_0_0_0_0 - 0.733333333333336*G0_0_0_0_1 + 2.13333333333333*G0_0_0_1_0 + 1.15*G0_0_0_1_1 - 1.10833333333334*G0_0_1_0_0 - 0.362500000000003*G0_0_1_0_1 + 1.15416666666667*G0_0_1_1_0 + 1.11666666666667*G0_0_1_1_1 - 1.10833333333334*G0_1_0_0_0 - 1.47916666666667*G0_1_0_0_1 + 3.17083333333333*G0_1_0_1_0 + 1.15*G0_1_0_1_1 - 1.10833333333334*G0_1_1_0_0 - 1.10833333333334*G0_1_1_0_1 + 2.19166666666667*G0_1_1_1_0 + 1.00833333333333*G0_1_1_1_1 + 1.09166666666667*G1_0_0_0_0 + 0.733333333333336*G1_0_0_0_1 - 2.13333333333333*G1_0_0_1_0 - 1.15*G1_0_0_1_1 + 1.10833333333334*G1_0_1_0_0 + 0.362500000000003*G1_0_1_0_1 - 1.15416666666667*G1_0_1_1_0 - 1.11666666666667*G1_0_1_1_1 + 1.10833333333334*G1_1_0_0_0 + 1.47916666666667*G1_1_0_0_1 - 3.17083333333333*G1_1_0_1_0 - 1.15*G1_1_0_1_1 + 1.10833333333334*G1_1_1_0_0 + 1.10833333333334*G1_1_1_0_1 - 2.19166666666667*G1_1_1_1_0 - 1.00833333333333*G1_1_1_1_1;
    A[91] = 0.183333333333338*G0_0_0_0_0 - 0.116666666666667*G0_0_0_0_1 - 0.683333333333332*G0_0_0_1_0 + 0.950000000000001*G0_0_0_1_1 - 0.033333333333333*G0_0_1_0_0 - 0.858333333333331*G0_0_1_0_1 + 0.108333333333332*G0_0_1_1_0 - 0.316666666666668*G0_0_1_1_1 - 0.0333333333333307*G0_1_0_0_0 + 0.708333333333332*G0_1_0_0_1 - 1.25833333333333*G0_1_0_1_0 + 0.950000000000001*G0_1_0_1_1 - 0.0333333333333325*G0_1_1_0_0 - 0.033333333333331*G0_1_1_0_1 - 0.466666666666667*G0_1_1_1_0 + 0.0666666666666708*G0_1_1_1_1 - 0.183333333333338*G1_0_0_0_0 + 0.116666666666667*G1_0_0_0_1 + 0.683333333333332*G1_0_0_1_0 - 0.950000000000001*G1_0_0_1_1 + 0.033333333333333*G1_0_1_0_0 + 0.858333333333331*G1_0_1_0_1 - 0.108333333333332*G1_0_1_1_0 + 0.316666666666668*G1_0_1_1_1 + 0.0333333333333307*G1_1_0_0_0 - 0.708333333333332*G1_1_0_0_1 + 1.25833333333333*G1_1_0_1_0 - 0.950000000000001*G1_1_0_1_1 + 0.0333333333333325*G1_1_1_0_0 + 0.033333333333331*G1_1_1_0_1 + 0.466666666666667*G1_1_1_1_0 - 0.0666666666666708*G1_1_1_1_1;
    A[92] = -0.508333333333334*G0_0_0_0_0 + 0.266666666666668*G0_0_0_0_1 + 0.466666666666667*G0_0_0_1_0 + 0.649999999999999*G0_0_0_1_1 - 0.691666666666669*G0_0_1_0_0 + 1.09583333333333*G0_0_1_0_1 + 0.112500000000002*G0_0_1_1_0 + 2.28333333333333*G0_0_1_1_1 - 0.691666666666666*G0_1_0_0_0 - 1.52083333333333*G0_1_0_0_1 + 1.29583333333333*G0_1_0_1_0 + 0.649999999999997*G0_1_0_1_1 - 0.691666666666667*G0_1_1_0_0 - 0.691666666666668*G0_1_1_0_1 + 0.941666666666666*G0_1_1_1_0 + 1.59166666666666*G0_1_1_1_1 + 0.508333333333334*G1_0_0_0_0 - 0.266666666666668*G1_0_0_0_1 - 0.466666666666667*G1_0_0_1_0 - 0.649999999999999*G1_0_0_1_1 + 0.691666666666669*G1_0_1_0_0 - 1.09583333333333*G1_0_1_0_1 - 0.112500000000002*G1_0_1_1_0 - 2.28333333333333*G1_0_1_1_1 + 0.691666666666666*G1_1_0_0_0 + 1.52083333333333*G1_1_0_0_1 - 1.29583333333333*G1_1_0_1_0 - 0.649999999999997*G1_1_0_1_1 + 0.691666666666667*G1_1_1_0_0 + 0.691666666666668*G1_1_1_0_1 - 0.941666666666666*G1_1_1_1_0 - 1.59166666666666*G1_1_1_1_1;
    A[93] = 1.50833333333333*G0_0_0_0_0 + 0.775000000000001*G0_0_0_0_1 + 4.30833333333333*G0_0_0_1_0 + 2.59166666666667*G0_0_0_1_1 + 1.81666666666667*G0_0_1_0_0 + 0.320833333333337*G0_0_1_0_1 + 7.50416666666666*G0_0_1_1_0 + 4.30833333333333*G0_0_1_1_1 + 1.81666666666667*G0_1_0_0_0 + 2.27083333333333*G0_1_0_0_1 + 0.320833333333338*G0_1_0_1_0 + 0.775000000000002*G0_1_0_1_1 + 1.81666666666667*G0_1_1_0_0 + 1.81666666666667*G0_1_1_0_1 + 1.81666666666667*G0_1_1_1_0 + 1.50833333333334*G0_1_1_1_1 - 1.50833333333333*G1_0_0_0_0 - 0.775000000000001*G1_0_0_0_1 - 4.30833333333333*G1_0_0_1_0 - 2.59166666666667*G1_0_0_1_1 - 1.81666666666667*G1_0_1_0_0 - 0.320833333333337*G1_0_1_0_1 - 7.50416666666666*G1_0_1_1_0 - 4.30833333333333*G1_0_1_1_1 - 1.81666666666667*G1_1_0_0_0 - 2.27083333333333*G1_1_0_0_1 - 0.320833333333338*G1_1_0_1_0 - 0.775000000000002*G1_1_0_1_1 - 1.81666666666667*G1_1_1_0_0 - 1.81666666666667*G1_1_1_0_1 - 1.81666666666667*G1_1_1_1_0 - 1.50833333333334*G1_1_1_1_1;
    A[94] = -1.01666666666667*G0_0_0_0_0 + 0.0333333333333317*G0_0_0_0_1 - 2.86666666666666*G0_0_0_1_0 - 3.93333333333333*G0_0_0_1_1 - 1.38333333333334*G0_0_1_0_0 + 0.941666666666657*G0_0_1_0_1 - 5.25833333333333*G0_0_1_1_0 - 7.53333333333333*G0_0_1_1_1 - 1.38333333333333*G0_1_0_0_0 - 2.29166666666666*G0_1_0_0_1 - 0.225000000000002*G0_1_0_1_0 - 1.13333333333333*G0_1_0_1_1 - 1.38333333333333*G0_1_1_0_0 - 1.38333333333334*G0_1_1_0_1 - 1.38333333333333*G0_1_1_1_0 - 2.6*G0_1_1_1_1 + 1.01666666666667*G1_0_0_0_0 - 0.0333333333333317*G1_0_0_0_1 + 2.86666666666666*G1_0_0_1_0 + 3.93333333333333*G1_0_0_1_1 + 1.38333333333334*G1_0_1_0_0 - 0.941666666666657*G1_0_1_0_1 + 5.25833333333333*G1_0_1_1_0 + 7.53333333333333*G1_0_1_1_1 + 1.38333333333333*G1_1_0_0_0 + 2.29166666666666*G1_1_0_0_1 + 0.225000000000002*G1_1_0_1_0 + 1.13333333333333*G1_1_0_1_1 + 1.38333333333333*G1_1_1_0_0 + 1.38333333333334*G1_1_1_0_1 + 1.38333333333333*G1_1_1_1_0 + 2.6*G1_1_1_1_1;
    A[95] = 0.0916666666666709*G0_0_0_0_0 - 0.308333333333332*G0_0_0_0_1 + 0.558333333333337*G0_0_0_1_0 + 1.34166666666666*G0_0_0_1_1 - 0.0166666666666632*G0_0_1_0_0 - 1.05416666666666*G0_0_1_0_1 + 0.962499999999998*G0_0_1_1_0 + 3.225*G0_0_1_1_1 - 0.0166666666666649*G0_1_0_0_0 + 0.729166666666665*G0_1_0_0_1 - 0.387499999999994*G0_1_0_1_0 + 0.358333333333335*G0_1_0_1_1 - 0.0166666666666651*G0_1_1_0_0 - 0.0166666666666635*G0_1_1_0_1 - 0.0166666666666646*G0_1_1_1_0 + 1.09166666666667*G0_1_1_1_1 - 0.0916666666666709*G1_0_0_0_0 + 0.308333333333332*G1_0_0_0_1 - 0.558333333333337*G1_0_0_1_0 - 1.34166666666666*G1_0_0_1_1 + 0.0166666666666632*G1_0_1_0_0 + 1.05416666666666*G1_0_1_0_1 - 0.962499999999998*G1_0_1_1_0 - 3.225*G1_0_1_1_1 + 0.0166666666666649*G1_1_0_0_0 - 0.729166666666665*G1_1_0_0_1 + 0.387499999999994*G1_1_0_1_0 - 0.358333333333335*G1_1_0_1_1 + 0.0166666666666651*G1_1_1_0_0 + 0.0166666666666635*G1_1_1_0_1 + 0.0166666666666646*G1_1_1_1_0 - 1.09166666666667*G1_1_1_1_1;
    A[96] = 3.68333333333333*G0_0_0_0_0 + 5.50833333333333*G0_0_0_0_1 + 1.50833333333333*G0_0_0_1_0 + 2.275*G0_0_0_1_1 + 5.50833333333333*G0_0_1_0_0 + 10.0416666666667*G0_0_1_0_1 + 1.00833333333333*G0_0_1_1_0 + 3.24166666666666*G0_0_1_1_1 + 1.50833333333333*G0_1_0_0_0 + 1.00833333333333*G0_1_0_0_1 + 2.775*G0_1_0_1_0 + 2.275*G0_1_0_1_1 + 2.275*G0_1_1_0_0 + 3.24166666666666*G0_1_1_0_1 + 2.275*G0_1_1_1_0 + 2.63333333333333*G0_1_1_1_1 - 3.68333333333333*G1_0_0_0_0 - 5.50833333333333*G1_0_0_0_1 - 1.50833333333333*G1_0_0_1_0 - 2.275*G1_0_0_1_1 - 5.50833333333333*G1_0_1_0_0 - 10.0416666666667*G1_0_1_0_1 - 1.00833333333333*G1_0_1_1_0 - 3.24166666666666*G1_0_1_1_1 - 1.50833333333333*G1_1_0_0_0 - 1.00833333333333*G1_1_0_0_1 - 2.775*G1_1_0_1_0 - 2.275*G1_1_0_1_1 - 2.275*G1_1_1_0_0 - 3.24166666666666*G1_1_1_0_1 - 2.275*G1_1_1_1_0 - 2.63333333333333*G1_1_1_1_1;
    A[97] = -5.86666666666667*G0_0_0_0_0 - 3.43333333333333*G0_0_0_0_1 - 2.76666666666667*G0_0_0_1_0 - 2.3*G0_0_0_1_1 - 7.93333333333333*G0_0_1_0_0 - 5.08333333333333*G0_0_1_0_1 - 1.68333333333333*G0_0_1_1_0 - 2.23333333333333*G0_0_1_1_1 - 2.6*G0_1_0_0_0 - 0.683333333333333*G0_1_0_0_1 - 4.21666666666666*G0_1_0_1_0 - 2.3*G0_1_0_1_1 - 3.13333333333333*G0_1_1_0_0 - 1.4*G0_1_1_0_1 - 3.13333333333333*G0_1_1_1_0 - 2.01666666666667*G0_1_1_1_1 + 5.86666666666667*G1_0_0_0_0 + 3.43333333333333*G1_0_0_0_1 + 2.76666666666667*G1_0_0_1_0 + 2.3*G1_0_0_1_1 + 7.93333333333333*G1_0_1_0_0 + 5.08333333333333*G1_0_1_0_1 + 1.68333333333333*G1_0_1_1_0 + 2.23333333333333*G1_0_1_1_1 + 2.6*G1_1_0_0_0 + 0.683333333333333*G1_1_0_0_1 + 4.21666666666666*G1_1_0_1_0 + 2.3*G1_1_0_1_1 + 3.13333333333333*G1_1_1_0_0 + 1.4*G1_1_1_0_1 + 3.13333333333333*G1_1_1_1_0 + 2.01666666666667*G1_1_1_1_1;
    A[98] = 2.18333333333333*G0_0_0_0_0 - 0.241666666666668*G0_0_0_0_1 + 1.09166666666666*G0_0_0_1_0 - 0.475000000000002*G0_0_0_1_1 + 2.425*G0_0_1_0_0 + 1.625*G0_0_1_0_1 + 0.258333333333332*G0_0_1_1_0 + 0.158333333333335*G0_0_1_1_1 + 1.09166666666667*G0_1_0_0_0 - 1.075*G0_1_0_0_1 + 1.69166666666666*G0_1_0_1_0 - 0.475000000000003*G0_1_0_1_1 + 0.858333333333334*G0_1_1_0_0 + 0.158333333333329*G0_1_1_0_1 + 0.858333333333332*G0_1_1_1_0 - 0.033333333333336*G0_1_1_1_1 - 2.18333333333333*G1_0_0_0_0 + 0.241666666666668*G1_0_0_0_1 - 1.09166666666666*G1_0_0_1_0 + 0.475000000000002*G1_0_0_1_1 - 2.425*G1_0_1_0_0 - 1.625*G1_0_1_0_1 - 0.258333333333332*G1_0_1_1_0 - 0.158333333333335*G1_0_1_1_1 - 1.09166666666667*G1_1_0_0_0 + 1.075*G1_1_0_0_1 - 1.69166666666666*G1_1_0_1_0 + 0.475000000000003*G1_1_0_1_1 - 0.858333333333334*G1_1_1_0_0 - 0.158333333333329*G1_1_1_0_1 - 0.858333333333332*G1_1_1_1_0 + 0.033333333333336*G1_1_1_1_1;
    A[99] = -2.00346921336188*G0_0_0_0_0 - 3.41768277573498*G0_0_0_0_1 + 2.94627825494395*G0_0_0_1_0 + 4.59619407771256*G0_0_0_1_1 - 2.59272486435068*G0_0_1_0_0 - 9.48701598091951*G0_0_1_0_1 + 2.53379929925179*G0_0_1_1_0 + 2.71057599454842*G0_0_1_1_1 - 2.59272486435067*G0_1_0_0_0 - 2.18024590865852*G0_1_0_0_1 + 4.1837151220204*G0_1_0_1_0 + 4.59619407771256*G0_1_0_1_1 - 2.59272486435067*G0_1_1_0_0 - 5.42115198909685*G0_1_1_0_1 + 3.77123616632825*G0_1_1_1_0 + 2.94627825494395*G0_1_1_1_1 + 2.00346921336188*G1_0_0_0_0 + 3.41768277573498*G1_0_0_0_1 - 2.94627825494395*G1_0_0_1_0 - 4.59619407771256*G1_0_0_1_1 + 2.59272486435068*G1_0_1_0_0 + 9.48701598091951*G1_0_1_0_1 - 2.53379929925179*G1_0_1_1_0 - 2.71057599454842*G1_0_1_1_1 + 2.59272486435067*G1_1_0_0_0 + 2.18024590865852*G1_1_0_0_1 - 4.1837151220204*G1_1_0_1_0 - 4.59619407771256*G1_1_0_1_1 + 2.59272486435067*G1_1_1_0_0 + 5.42115198909685*G1_1_1_0_1 - 3.77123616632825*G1_1_1_1_0 - 2.94627825494395*G1_1_1_1_1;
    A[100] = 1.37120688932535*G0_0_0_0_0 + 8.94892917243918*G0_0_0_0_1 + 5.48482755730144*G0_0_0_1_0 + 9.95929214352104*G0_0_0_1_1 + 0.360843918243512*G0_0_1_0_0 + 12.3769463957526*G0_0_1_0_1 + 4.58271776169264*G0_0_1_1_0 + 9.67061700892622*G0_0_1_1_1 + 0.360843918243508*G0_1_0_0_0 + 1.2629537138523*G0_1_0_0_1 + 9.05718234791224*G0_1_0_1_0 + 9.95929214352103*G0_1_0_1_1 + 0.360843918243513*G0_1_1_0_0 + 2.52590742770461*G0_1_1_0_1 + 8.15507255230345*G0_1_1_1_0 + 8.73242282149308*G0_1_1_1_1 - 1.37120688932535*G1_0_0_0_0 - 8.94892917243918*G1_0_0_0_1 - 5.48482755730144*G1_0_0_1_0 - 9.95929214352104*G1_0_0_1_1 - 0.360843918243512*G1_0_1_0_0 - 12.3769463957526*G1_0_1_0_1 - 4.58271776169264*G1_0_1_1_0 - 9.67061700892622*G1_0_1_1_1 - 0.360843918243508*G1_1_0_0_0 - 1.2629537138523*G1_1_0_0_1 - 9.05718234791224*G1_1_0_1_0 - 9.95929214352103*G1_1_0_1_1 - 0.360843918243513*G1_1_1_0_0 - 2.52590742770461*G1_1_1_0_1 - 8.15507255230345*G1_1_1_1_0 - 8.73242282149308*G1_1_1_1_1;
    A[101] = -0.541666666666657*G0_0_0_0_0 + 6.08333333333333*G0_0_0_0_1 - 0.916666666666665*G0_0_0_1_0 + 1*G0_0_0_1_1 - 1.20833333333333*G0_0_1_0_0 + 13.9791666666667*G0_0_1_0_1 - 1.02083333333332*G0_0_1_1_0 + 7.16666666666667*G0_0_1_1_1 - 1.20833333333333*G0_1_0_0_0 - 1.10416666666666*G0_1_0_0_1 + 0.89583333333333*G0_1_0_1_0 + 0.999999999999996*G0_1_0_1_1 - 1.20833333333333*G0_1_1_0_0 + 4.04166666666666*G0_1_1_0_1 + 0.791666666666665*G0_1_1_1_0 + 4.70833333333331*G0_1_1_1_1 + 0.541666666666657*G1_0_0_0_0 - 6.08333333333333*G1_0_0_0_1 + 0.916666666666665*G1_0_0_1_0 - 1*G1_0_0_1_1 + 1.20833333333333*G1_0_1_0_0 - 13.9791666666667*G1_0_1_0_1 + 1.02083333333332*G1_0_1_1_0 - 7.16666666666667*G1_0_1_1_1 + 1.20833333333333*G1_1_0_0_0 + 1.10416666666666*G1_1_0_0_1 - 0.89583333333333*G1_1_0_1_0 - 0.999999999999996*G1_1_0_1_1 + 1.20833333333333*G1_1_1_0_0 - 4.04166666666666*G1_1_1_0_1 - 0.791666666666665*G1_1_1_1_0 - 4.70833333333331*G1_1_1_1_1;
    A[102] = 1.17851130197757*G0_0_0_0_0 + 0.117851130197757*G0_0_0_0_1 - 5.53900311929463*G0_0_0_1_0 - 3.88908729652601*G0_0_0_1_1 + 2.00346921336189*G0_0_1_0_0 - 0.117851130197756*G0_0_1_0_1 - 6.48181216087668*G0_0_1_1_0 - 4.36049181731704*G0_0_1_1_1 + 2.00346921336188*G0_1_0_0_0 + 2.2391714737574*G0_1_0_0_1 - 4.12478955692153*G0_1_0_1_0 - 3.88908729652601*G0_1_0_1_1 + 2.00346921336188*G0_1_1_0_0 + 2.00346921336188*G0_1_1_0_1 - 4.36049181731704*G0_1_1_1_0 - 3.77123616632825*G0_1_1_1_1 - 1.17851130197757*G1_0_0_0_0 - 0.117851130197757*G1_0_0_0_1 + 5.53900311929463*G1_0_0_1_0 + 3.88908729652601*G1_0_0_1_1 - 2.00346921336189*G1_0_1_0_0 + 0.117851130197756*G1_0_1_0_1 + 6.48181216087668*G1_0_1_1_0 + 4.36049181731704*G1_0_1_1_1 - 2.00346921336188*G1_1_0_0_0 - 2.2391714737574*G1_1_0_0_1 + 4.12478955692153*G1_1_0_1_0 + 3.88908729652601*G1_1_0_1_1 - 2.00346921336188*G1_1_1_0_0 - 2.00346921336188*G1_1_1_0_1 + 4.36049181731704*G1_1_1_1_0 + 3.77123616632825*G1_1_1_1_1;
    A[103] = 5.19615242270664*G0_0_0_0_0 + 3.68060796608387*G0_0_0_0_1 + 3.68060796608387*G0_0_0_1_0 - 3.24759526419163*G0_0_0_1_1 + 5.84567147554496*G0_0_1_0_0 + 3.03108891324554*G0_0_1_0_1 + 6.49519052838329*G0_0_1_1_0 - 4.11362066797606*G0_0_1_1_1 + 5.84567147554496*G0_1_0_0_0 + 6.49519052838329*G0_1_0_0_1 - 3.89711431702996*G0_1_0_1_0 - 3.24759526419163*G0_1_0_1_1 + 5.84567147554496*G0_1_1_0_0 + 5.84567147554496*G0_1_1_0_1 - 1.94855715851497*G0_1_1_1_0 - 3.03108891324552*G0_1_1_1_1 - 5.19615242270664*G1_0_0_0_0 - 3.68060796608387*G1_0_0_0_1 - 3.68060796608387*G1_0_0_1_0 + 3.24759526419163*G1_0_0_1_1 - 5.84567147554496*G1_0_1_0_0 - 3.03108891324554*G1_0_1_0_1 - 6.49519052838329*G1_0_1_1_0 + 4.11362066797606*G1_0_1_1_1 - 5.84567147554496*G1_1_0_0_0 - 6.49519052838329*G1_1_0_0_1 + 3.89711431702996*G1_1_0_1_0 + 3.24759526419163*G1_1_0_1_1 - 5.84567147554496*G1_1_1_0_0 - 5.84567147554496*G1_1_1_0_1 + 1.94855715851497*G1_1_1_1_0 + 3.03108891324552*G1_1_1_1_1;
    A[104] = 2.08333333333332*G0_0_0_0_0 + 0.208333333333331*G0_0_0_0_1 + 4.20833333333332*G0_0_0_1_0 + 1.375*G0_0_0_1_1 + 3.54166666666667*G0_0_1_0_0 - 0.208333333333326*G0_0_1_0_1 + 6.79166666666666*G0_0_1_1_0 - 4.45833333333332*G0_0_1_1_1 + 3.54166666666665*G0_1_0_0_0 + 3.95833333333332*G0_1_0_0_1 + 0.958333333333326*G0_1_0_1_0 + 1.375*G0_1_0_1_1 + 3.54166666666666*G0_1_1_0_0 + 3.54166666666666*G0_1_1_0_1 + 1.54166666666667*G0_1_1_1_0 - 1.66666666666665*G0_1_1_1_1 - 2.08333333333332*G1_0_0_0_0 - 0.208333333333331*G1_0_0_0_1 - 4.20833333333332*G1_0_0_1_0 - 1.375*G1_0_0_1_1 - 3.54166666666667*G1_0_1_0_0 + 0.208333333333326*G1_0_1_0_1 - 6.79166666666666*G1_0_1_1_0 + 4.45833333333332*G1_0_1_1_1 - 3.54166666666665*G1_1_0_0_0 - 3.95833333333332*G1_1_0_0_1 - 0.958333333333326*G1_1_0_1_0 - 1.375*G1_1_0_1_1 - 3.54166666666666*G1_1_1_0_0 - 3.54166666666666*G1_1_1_0_1 - 1.54166666666667*G1_1_1_1_0 + 1.66666666666665*G1_1_1_1_1;
    A[105] = 2.60000000000001*G0_0_0_0_0 + 1.46666666666667*G0_0_0_0_1 - 4.93333333333333*G0_0_0_1_0 - 2.13333333333333*G0_0_0_1_1 + 1.21666666666667*G0_0_1_0_0 + 0.308333333333336*G0_0_1_0_1 - 1.05833333333333*G0_0_1_1_0 - 0.899999999999998*G0_0_1_1_1 + 1.21666666666667*G0_1_0_0_0 + 2.375*G0_1_0_0_1 - 7.25833333333332*G0_1_0_1_0 - 2.13333333333333*G0_1_0_1_1 + 1.21666666666667*G0_1_1_0_0 + 1.21666666666667*G0_1_1_0_1 - 3.38333333333332*G0_1_1_1_0 - 1.26666666666666*G0_1_1_1_1 - 2.60000000000001*G1_0_0_0_0 - 1.46666666666667*G1_0_0_0_1 + 4.93333333333333*G1_0_0_1_0 + 2.13333333333333*G1_0_0_1_1 - 1.21666666666667*G1_0_1_0_0 - 0.308333333333336*G1_0_1_0_1 + 1.05833333333333*G1_0_1_1_0 + 0.899999999999998*G1_0_1_1_1 - 1.21666666666667*G1_1_0_0_0 - 2.375*G1_1_0_0_1 + 7.25833333333332*G1_1_0_1_0 + 2.13333333333333*G1_1_0_1_1 - 1.21666666666667*G1_1_1_0_0 - 1.21666666666667*G1_1_1_0_1 + 3.38333333333332*G1_1_1_1_0 + 1.26666666666666*G1_1_1_1_1;
    A[106] = -1.2*G0_0_0_0_0 - 0.933333333333335*G0_0_0_0_1 + 2.53333333333333*G0_0_0_1_0 - 3.06666666666667*G0_0_0_1_1 - 0.433333333333333*G0_0_1_0_0 + 0.216666666666664*G0_0_1_0_1 + 0.283333333333333*G0_0_1_1_0 - 1.2*G0_0_1_1_1 - 0.433333333333335*G0_1_0_0_0 - 1.58333333333333*G0_1_0_0_1 + 3.68333333333332*G0_1_0_1_0 - 3.06666666666666*G0_1_0_1_1 - 0.433333333333333*G0_1_1_0_0 - 0.433333333333335*G0_1_1_0_1 + 1.43333333333333*G0_1_1_1_0 - 1.63333333333333*G0_1_1_1_1 + 1.2*G1_0_0_0_0 + 0.933333333333335*G1_0_0_0_1 - 2.53333333333333*G1_0_0_1_0 + 3.06666666666667*G1_0_0_1_1 + 0.433333333333333*G1_0_1_0_0 - 0.216666666666664*G1_0_1_0_1 - 0.283333333333333*G1_0_1_1_0 + 1.2*G1_0_1_1_1 + 0.433333333333335*G1_1_0_0_0 + 1.58333333333333*G1_1_0_0_1 - 3.68333333333332*G1_1_0_1_0 + 3.06666666666666*G1_1_0_1_1 + 0.433333333333333*G1_1_1_0_0 + 0.433333333333335*G1_1_1_0_1 - 1.43333333333333*G1_1_1_1_0 + 1.63333333333333*G1_1_1_1_1;
    A[107] = 0.600000000000003*G0_0_0_0_0 + 0.133333333333336*G0_0_0_0_1 - 0.933333333333334*G0_0_0_1_0 + 0.53333333333333*G0_0_0_1_1 + 0.383333333333336*G0_0_1_0_0 - 0.441666666666662*G0_0_1_0_1 - 0.141666666666668*G0_0_1_1_0 + 0.0999999999999975*G0_0_1_1_1 + 0.383333333333333*G0_1_0_0_0 + 0.958333333333333*G0_1_0_0_1 - 1.675*G0_1_0_1_0 + 0.533333333333331*G0_1_0_1_1 + 0.383333333333335*G0_1_1_0_0 + 0.383333333333336*G0_1_1_0_1 - 0.883333333333333*G0_1_1_1_0 + 0.0666666666666651*G0_1_1_1_1 - 0.600000000000003*G1_0_0_0_0 - 0.133333333333336*G1_0_0_0_1 + 0.933333333333334*G1_0_0_1_0 - 0.53333333333333*G1_0_0_1_1 - 0.383333333333336*G1_0_1_0_0 + 0.441666666666662*G1_0_1_0_1 + 0.141666666666668*G1_0_1_1_0 - 0.0999999999999975*G1_0_1_1_1 - 0.383333333333333*G1_1_0_0_0 - 0.958333333333333*G1_1_0_0_1 + 1.675*G1_1_0_1_0 - 0.533333333333331*G1_1_0_1_1 - 0.383333333333335*G1_1_1_0_0 - 0.383333333333336*G1_1_1_0_1 + 0.883333333333333*G1_1_1_1_0 - 0.0666666666666651*G1_1_1_1_1;
    A[108] = -2.6*G0_0_0_0_0 - 1.13333333333334*G0_0_0_0_1 - 7.53333333333333*G0_0_0_1_0 - 3.93333333333334*G0_0_0_1_1 - 1.38333333333333*G0_0_1_0_0 - 0.225000000000002*G0_0_1_0_1 - 5.25833333333333*G0_0_1_1_0 - 2.86666666666667*G0_0_1_1_1 - 1.38333333333333*G0_1_0_0_0 - 2.29166666666667*G0_1_0_0_1 + 0.941666666666657*G0_1_0_1_0 + 0.033333333333328*G0_1_0_1_1 - 1.38333333333333*G0_1_1_0_0 - 1.38333333333333*G0_1_1_0_1 - 1.38333333333334*G0_1_1_1_0 - 1.01666666666667*G0_1_1_1_1 + 2.6*G1_0_0_0_0 + 1.13333333333334*G1_0_0_0_1 + 7.53333333333333*G1_0_0_1_0 + 3.93333333333334*G1_0_0_1_1 + 1.38333333333333*G1_0_1_0_0 + 0.225000000000002*G1_0_1_0_1 + 5.25833333333333*G1_0_1_1_0 + 2.86666666666667*G1_0_1_1_1 + 1.38333333333333*G1_1_0_0_0 + 2.29166666666667*G1_1_0_0_1 - 0.941666666666657*G1_1_0_1_0 - 0.033333333333328*G1_1_0_1_1 + 1.38333333333333*G1_1_1_0_0 + 1.38333333333333*G1_1_1_0_1 + 1.38333333333334*G1_1_1_1_0 + 1.01666666666667*G1_1_1_1_1;
    A[109] = 1.2*G0_0_0_0_0 + 0.266666666666674*G0_0_0_0_1 + 3.73333333333333*G0_0_0_1_0 + 5.86666666666666*G0_0_0_1_1 + 0.766666666666671*G0_0_1_0_0 - 0.383333333333326*G0_0_1_0_1 + 3.01666666666667*G0_0_1_1_0 + 3.73333333333334*G0_0_1_1_1 + 0.766666666666668*G0_1_0_0_0 + 1.41666666666667*G0_1_0_0_1 - 0.38333333333333*G0_1_0_1_0 + 0.26666666666667*G0_1_0_1_1 + 0.766666666666669*G0_1_1_0_0 + 0.766666666666671*G0_1_1_0_1 + 0.766666666666669*G0_1_1_1_0 + 1.2*G0_1_1_1_1 - 1.2*G1_0_0_0_0 - 0.266666666666674*G1_0_0_0_1 - 3.73333333333333*G1_0_0_1_0 - 5.86666666666666*G1_0_0_1_1 - 0.766666666666671*G1_0_1_0_0 + 0.383333333333326*G1_0_1_0_1 - 3.01666666666667*G1_0_1_1_0 - 3.73333333333334*G1_0_1_1_1 - 0.766666666666668*G1_1_0_0_0 - 1.41666666666667*G1_1_0_0_1 + 0.38333333333333*G1_1_0_1_0 - 0.26666666666667*G1_1_0_1_1 - 0.766666666666669*G1_1_1_0_0 - 0.766666666666671*G1_1_1_0_1 - 0.766666666666669*G1_1_1_1_0 - 1.2*G1_1_1_1_1;
    A[110] = -0.600000000000005*G0_0_0_0_0 - 0.466666666666671*G0_0_0_0_1 - 1.53333333333333*G0_0_0_1_0 - 1.93333333333334*G0_0_0_1_1 - 0.216666666666669*G0_0_1_0_0 + 0.358333333333329*G0_0_1_0_1 - 1.00833333333333*G0_0_1_1_0 - 0.86666666666667*G0_0_1_1_1 - 0.216666666666667*G0_1_0_0_0 - 1.04166666666667*G0_1_0_0_1 + 0.524999999999994*G0_1_0_1_0 - 0.300000000000004*G0_1_0_1_1 - 0.216666666666667*G0_1_1_0_0 - 0.21666666666667*G0_1_1_0_1 - 0.216666666666668*G0_1_1_1_0 - 0.183333333333338*G0_1_1_1_1 + 0.600000000000005*G1_0_0_0_0 + 0.466666666666671*G1_0_0_0_1 + 1.53333333333333*G1_0_0_1_0 + 1.93333333333334*G1_0_0_1_1 + 0.216666666666669*G1_0_1_0_0 - 0.358333333333329*G1_0_1_0_1 + 1.00833333333333*G1_0_1_1_0 + 0.86666666666667*G1_0_1_1_1 + 0.216666666666667*G1_1_0_0_0 + 1.04166666666667*G1_1_0_0_1 - 0.524999999999994*G1_1_0_1_0 + 0.300000000000004*G1_1_0_1_1 + 0.216666666666667*G1_1_1_0_0 + 0.21666666666667*G1_1_1_0_1 + 0.216666666666668*G1_1_1_1_0 + 0.183333333333338*G1_1_1_1_1;
    A[111] = -5.86666666666667*G0_0_0_0_0 - 7.93333333333333*G0_0_0_0_1 - 2.6*G0_0_0_1_0 - 3.13333333333333*G0_0_0_1_1 - 3.43333333333333*G0_0_1_0_0 - 5.08333333333333*G0_0_1_0_1 - 0.683333333333333*G0_0_1_1_0 - 1.4*G0_0_1_1_1 - 2.76666666666667*G0_1_0_0_0 - 1.68333333333333*G0_1_0_0_1 - 4.21666666666666*G0_1_0_1_0 - 3.13333333333333*G0_1_0_1_1 - 2.3*G0_1_1_0_0 - 2.23333333333333*G0_1_1_0_1 - 2.3*G0_1_1_1_0 - 2.01666666666667*G0_1_1_1_1 + 5.86666666666667*G1_0_0_0_0 + 7.93333333333333*G1_0_0_0_1 + 2.6*G1_0_0_1_0 + 3.13333333333333*G1_0_0_1_1 + 3.43333333333333*G1_0_1_0_0 + 5.08333333333333*G1_0_1_0_1 + 0.683333333333333*G1_0_1_1_0 + 1.4*G1_0_1_1_1 + 2.76666666666667*G1_1_0_0_0 + 1.68333333333333*G1_1_0_0_1 + 4.21666666666666*G1_1_0_1_0 + 3.13333333333333*G1_1_0_1_1 + 2.3*G1_1_1_0_0 + 2.23333333333333*G1_1_1_0_1 + 2.3*G1_1_1_1_0 + 2.01666666666667*G1_1_1_1_1;
    A[112] = 11.7333333333333*G0_0_0_0_0 + 5.86666666666666*G0_0_0_0_1 + 5.86666666666666*G0_0_0_1_0 + 4.26666666666666*G0_0_0_1_1 + 5.86666666666666*G0_0_1_0_0 + 3.83333333333333*G0_0_1_0_1 + 1.36666666666666*G0_0_1_1_0 + 1.8*G0_0_1_1_1 + 5.86666666666666*G0_1_0_0_0 + 1.36666666666666*G0_1_0_0_1 + 8.76666666666665*G0_1_0_1_0 + 4.26666666666666*G0_1_0_1_1 + 4.26666666666666*G0_1_1_0_0 + 1.8*G0_1_1_0_1 + 4.26666666666666*G0_1_1_1_0 + 2.53333333333333*G0_1_1_1_1 - 11.7333333333333*G1_0_0_0_0 - 5.86666666666666*G1_0_0_0_1 - 5.86666666666666*G1_0_0_1_0 - 4.26666666666666*G1_0_0_1_1 - 5.86666666666666*G1_0_1_0_0 - 3.83333333333333*G1_0_1_0_1 - 1.36666666666666*G1_0_1_1_0 - 1.8*G1_0_1_1_1 - 5.86666666666666*G1_1_0_0_0 - 1.36666666666666*G1_1_0_0_1 - 8.76666666666665*G1_1_0_1_0 - 4.26666666666666*G1_1_0_1_1 - 4.26666666666666*G1_1_1_0_0 - 1.8*G1_1_1_0_1 - 4.26666666666666*G1_1_1_1_0 - 2.53333333333333*G1_1_1_1_1;
    A[113] = -5.86666666666666*G0_0_0_0_0 + 2.06666666666667*G0_0_0_0_1 - 3.26666666666666*G0_0_0_1_0 + 1.53333333333334*G0_0_0_1_1 - 2.43333333333333*G0_0_1_0_0 + 0.416666666666665*G0_0_1_0_1 - 0.516666666666664*G0_0_1_1_0 + 0.6*G0_0_1_1_1 - 3.1*G0_1_0_0_0 + 3.15*G0_1_0_0_1 - 4.71666666666665*G0_1_0_1_0 + 1.53333333333334*G0_1_0_1_1 - 1.96666666666666*G0_1_1_0_0 + 1.43333333333333*G0_1_1_0_1 - 1.96666666666666*G0_1_1_1_0 + 0.816666666666668*G0_1_1_1_1 + 5.86666666666666*G1_0_0_0_0 - 2.06666666666667*G1_0_0_0_1 + 3.26666666666666*G1_0_0_1_0 - 1.53333333333334*G1_0_0_1_1 + 2.43333333333333*G1_0_1_0_0 - 0.416666666666665*G1_0_1_0_1 + 0.516666666666664*G1_0_1_1_0 - 0.6*G1_0_1_1_1 + 3.1*G1_1_0_0_0 - 3.15*G1_1_0_0_1 + 4.71666666666665*G1_1_0_1_0 - 1.53333333333334*G1_1_0_1_1 + 1.96666666666666*G1_1_1_0_0 - 1.43333333333333*G1_1_1_0_1 + 1.96666666666666*G1_1_1_1_0 - 0.816666666666668*G1_1_1_1_1;
    A[114] = 2.82842712474619*G0_0_0_0_0 + 0.942809041582066*G0_0_0_0_1 - 4.71404520791032*G0_0_0_1_0 - 10.3708994574027*G0_0_0_1_1 + 1.64991582276861*G0_0_1_0_0 + 1.29636243217534*G0_0_1_0_1 - 1.53206469257085*G0_0_1_1_0 - 4.24264068711928*G0_0_1_1_1 + 1.64991582276861*G0_1_0_0_0 - 1.53206469257085*G0_1_0_0_1 - 7.18891894206323*G0_1_0_1_0 - 10.3708994574027*G0_1_0_1_1 + 1.64991582276861*G0_1_1_0_0 + 0.235702260395523*G0_1_1_0_1 - 4.00693842672376*G0_1_1_1_0 - 5.89255650988789*G0_1_1_1_1 - 2.82842712474619*G1_0_0_0_0 - 0.942809041582066*G1_0_0_0_1 + 4.71404520791032*G1_0_0_1_0 + 10.3708994574027*G1_0_0_1_1 - 1.64991582276861*G1_0_1_0_0 - 1.29636243217534*G1_0_1_0_1 + 1.53206469257085*G1_0_1_1_0 + 4.24264068711928*G1_0_1_1_1 - 1.64991582276861*G1_1_0_0_0 + 1.53206469257085*G1_1_0_0_1 + 7.18891894206323*G1_1_0_1_0 + 10.3708994574027*G1_1_0_1_1 - 1.64991582276861*G1_1_1_0_0 - 0.235702260395523*G1_1_1_0_1 + 4.00693842672376*G1_1_1_1_0 + 5.89255650988789*G1_1_1_1_1;
    A[115] = 5.19615242270663*G0_0_0_0_0 - 15.0111069989302*G0_0_0_0_1 - 8.08290376865475*G0_0_0_1_0 - 18.475208614068*G0_0_0_1_1 - 0.721687836487029*G0_0_1_0_0 - 9.59844822527751*G0_0_1_0_1 - 2.67024499500201*G0_0_1_1_0 - 7.79422863405994*G0_0_1_1_1 - 0.721687836487021*G0_1_0_0_0 - 6.13434661013976*G0_1_0_0_1 - 13.0625498404153*G0_1_0_1_0 - 18.475208614068*G0_1_0_1_1 - 0.721687836487024*G0_1_1_0_0 - 5.05181485540922*G0_1_1_0_1 - 7.64989106676253*G0_1_1_1_0 - 10.9696551146029*G0_1_1_1_1 - 5.19615242270663*G1_0_0_0_0 + 15.0111069989302*G1_0_0_0_1 + 8.08290376865475*G1_0_0_1_0 + 18.475208614068*G1_0_0_1_1 + 0.721687836487029*G1_0_1_0_0 + 9.59844822527751*G1_0_1_0_1 + 2.67024499500201*G1_0_1_1_0 + 7.79422863405994*G1_0_1_1_1 + 0.721687836487021*G1_1_0_0_0 + 6.13434661013976*G1_1_0_0_1 + 13.0625498404153*G1_1_0_1_0 + 18.475208614068*G1_1_0_1_1 + 0.721687836487024*G1_1_1_0_0 + 5.05181485540922*G1_1_1_0_1 + 7.64989106676253*G1_1_1_1_0 + 10.9696551146029*G1_1_1_1_1;
    A[116] = -1.00000000000001*G0_0_0_0_0 - 1.33333333333334*G0_0_0_0_1 + 2.66666666666666*G0_0_0_1_0 + 4.66666666666665*G0_0_0_1_1 - 0.0833333333333307*G0_0_1_0_0 - 4.20833333333333*G0_0_1_0_1 + 0.79166666666666*G0_0_1_1_0 + 1.49999999999999*G0_0_1_1_1 - 0.0833333333333381*G0_1_0_0_0 + 1.79166666666666*G0_1_0_0_1 + 2.79166666666666*G0_1_0_1_0 + 4.66666666666665*G0_1_0_1_1 - 0.0833333333333327*G0_1_1_0_0 - 0.583333333333333*G0_1_1_0_1 + 0.91666666666666*G0_1_1_1_0 + 1.83333333333332*G0_1_1_1_1 + 1.00000000000001*G1_0_0_0_0 + 1.33333333333334*G1_0_0_0_1 - 2.66666666666666*G1_0_0_1_0 - 4.66666666666665*G1_0_0_1_1 + 0.0833333333333307*G1_0_1_0_0 + 4.20833333333333*G1_0_1_0_1 - 0.79166666666666*G1_0_1_1_0 - 1.49999999999999*G1_0_1_1_1 + 0.0833333333333381*G1_1_0_0_0 - 1.79166666666666*G1_1_0_0_1 - 2.79166666666666*G1_1_0_1_0 - 4.66666666666665*G1_1_0_1_1 + 0.0833333333333327*G1_1_1_0_0 + 0.583333333333333*G1_1_1_0_1 - 0.91666666666666*G1_1_1_1_0 - 1.83333333333332*G1_1_1_1_1;
    A[117] = 0.94280904158206*G0_0_0_0_1 + 12.2565175405668*G0_0_0_1_0 + 6.59966329107444*G0_0_0_1_1 - 0.471404520791038*G0_0_1_0_0 + 0.235702260395513*G0_0_1_0_1 + 5.89255650988789*G0_0_1_1_0 + 2.82842712474619*G0_0_1_1_1 - 0.471404520791031*G0_1_0_0_0 + 0.235702260395513*G0_1_0_0_1 + 5.8925565098879*G0_1_0_1_0 + 6.59966329107443*G0_1_0_1_1 - 0.471404520791036*G0_1_1_0_0 - 0.471404520791034*G0_1_1_0_1 + 5.18544972870135*G0_1_1_1_0 + 4.00693842672376*G0_1_1_1_1 - 0.94280904158206*G1_0_0_0_1 - 12.2565175405668*G1_0_0_1_0 - 6.59966329107444*G1_0_0_1_1 + 0.471404520791038*G1_0_1_0_0 - 0.235702260395513*G1_0_1_0_1 - 5.89255650988789*G1_0_1_1_0 - 2.82842712474619*G1_0_1_1_1 + 0.471404520791031*G1_1_0_0_0 - 0.235702260395513*G1_1_0_0_1 - 5.8925565098879*G1_1_0_1_0 - 6.59966329107443*G1_1_0_1_1 + 0.471404520791036*G1_1_1_0_0 + 0.471404520791034*G1_1_1_0_1 - 5.18544972870135*G1_1_1_1_0 - 4.00693842672376*G1_1_1_1_1;
    A[118] = -10.3923048454133*G0_0_0_0_0 - 5.19615242270664*G0_0_0_0_1 - 5.19615242270664*G0_0_0_1_0 + 8.66025403784436*G0_0_0_1_1 - 5.19615242270663*G0_0_1_0_0 - 1.73205080756888*G0_0_1_0_1 - 8.66025403784439*G0_0_1_1_0 + 1.73205080756886*G0_0_1_1_1 - 5.19615242270664*G0_1_0_0_0 - 8.66025403784439*G0_1_0_0_1 + 12.1243556529821*G0_1_0_1_0 + 8.66025403784436*G0_1_0_1_1 - 5.19615242270664*G0_1_1_0_0 - 5.19615242270663*G0_1_1_0_1 + 1.73205080756886*G0_1_1_1_0 + 3.89711431702996*G0_1_1_1_1 + 10.3923048454133*G1_0_0_0_0 + 5.19615242270664*G1_0_0_0_1 + 5.19615242270664*G1_0_0_1_0 - 8.66025403784436*G1_0_0_1_1 + 5.19615242270663*G1_0_1_0_0 + 1.73205080756888*G1_0_1_0_1 + 8.66025403784439*G1_0_1_1_0 - 1.73205080756886*G1_0_1_1_1 + 5.19615242270664*G1_1_0_0_0 + 8.66025403784439*G1_1_0_0_1 - 12.1243556529821*G1_1_0_1_0 - 8.66025403784436*G1_1_0_1_1 + 5.19615242270664*G1_1_1_0_0 + 5.19615242270663*G1_1_1_0_1 - 1.73205080756886*G1_1_1_1_0 - 3.89711431702996*G1_1_1_1_1;
    A[119] = 1.66666666666666*G0_0_0_0_1 - 6.33333333333333*G0_0_0_1_0 - 2.33333333333332*G0_0_0_1_1 - 0.833333333333342*G0_0_1_0_0 + 0.416666666666661*G0_0_1_0_1 - 3.58333333333334*G0_0_1_1_0 - 3.99999999999999*G0_0_1_1_1 - 0.833333333333332*G0_1_0_0_0 + 0.416666666666667*G0_1_0_0_1 - 3.58333333333332*G0_1_0_1_0 - 2.33333333333332*G0_1_0_1_1 - 0.833333333333339*G0_1_1_0_0 - 0.833333333333335*G0_1_1_0_1 - 1.83333333333333*G0_1_1_1_0 - 2.91666666666665*G0_1_1_1_1 - 1.66666666666666*G1_0_0_0_1 + 6.33333333333333*G1_0_0_1_0 + 2.33333333333332*G1_0_0_1_1 + 0.833333333333342*G1_0_1_0_0 - 0.416666666666661*G1_0_1_0_1 + 3.58333333333334*G1_0_1_1_0 + 3.99999999999999*G1_0_1_1_1 + 0.833333333333332*G1_1_0_0_0 - 0.416666666666667*G1_1_0_0_1 + 3.58333333333332*G1_1_0_1_0 + 2.33333333333332*G1_1_0_1_1 + 0.833333333333339*G1_1_1_0_0 + 0.833333333333335*G1_1_1_0_1 + 1.83333333333333*G1_1_1_1_0 + 2.91666666666665*G1_1_1_1_1;
    A[120] = -1.50833333333333*G0_0_0_0_0 - 0.733333333333335*G0_0_0_0_1 + 2.8*G0_0_0_1_0 + 0.983333333333331*G0_0_0_1_1 + 0.308333333333337*G0_0_1_0_0 + 0.762500000000001*G0_0_1_0_1 - 2.8875*G0_0_1_1_0 - 0.716666666666665*G0_0_1_1_1 + 0.308333333333332*G0_1_0_0_0 - 1.1875*G0_1_0_0_1 + 4.29583333333332*G0_1_0_1_0 + 0.983333333333329*G0_1_0_1_1 + 0.308333333333336*G0_1_1_0_0 + 0.308333333333335*G0_1_1_0_1 - 1.39166666666667*G0_1_1_1_0 - 0.408333333333333*G0_1_1_1_1 + 1.50833333333333*G1_0_0_0_0 + 0.733333333333335*G1_0_0_0_1 - 2.8*G1_0_0_1_0 - 0.983333333333331*G1_0_0_1_1 - 0.308333333333337*G1_0_1_0_0 - 0.762500000000001*G1_0_1_0_1 + 2.8875*G1_0_1_1_0 + 0.716666666666665*G1_0_1_1_1 - 0.308333333333332*G1_1_0_0_0 + 1.1875*G1_1_0_0_1 - 4.29583333333332*G1_1_0_1_0 - 0.983333333333329*G1_1_0_1_1 - 0.308333333333336*G1_1_1_0_0 - 0.308333333333335*G1_1_1_0_1 + 1.39166666666667*G1_1_1_1_0 + 0.408333333333333*G1_1_1_1_1;
    A[121] = 1.01666666666667*G0_0_0_0_0 + 1.05*G0_0_0_0_1 - 1.85*G0_0_0_1_0 + 2.11666666666666*G0_0_0_1_1 - 0.366666666666669*G0_0_1_0_0 - 1.275*G0_0_1_0_1 + 2.025*G0_0_1_1_0 - 2.48333333333333*G0_0_1_1_1 - 0.366666666666667*G0_1_0_0_0 + 1.95833333333333*G0_1_0_0_1 - 3.00833333333332*G0_1_0_1_0 + 2.11666666666666*G0_1_0_1_1 - 0.366666666666668*G0_1_1_0_0 - 0.366666666666667*G0_1_1_0_1 + 0.866666666666667*G0_1_1_1_0 - 1.26666666666667*G0_1_1_1_1 - 1.01666666666667*G1_0_0_0_0 - 1.05*G1_0_0_0_1 + 1.85*G1_0_0_1_0 - 2.11666666666666*G1_0_0_1_1 + 0.366666666666669*G1_0_1_0_0 + 1.275*G1_0_1_0_1 - 2.025*G1_0_1_1_0 + 2.48333333333333*G1_0_1_1_1 + 0.366666666666667*G1_1_0_0_0 - 1.95833333333333*G1_1_0_0_1 + 3.00833333333332*G1_1_0_1_0 - 2.11666666666666*G1_1_0_1_1 + 0.366666666666668*G1_1_1_0_0 + 0.366666666666667*G1_1_1_0_1 - 0.866666666666667*G1_1_1_1_0 + 1.26666666666667*G1_1_1_1_1;
    A[122] = -0.0916666666666674*G0_0_0_0_0 - 0.400000000000001*G0_0_0_0_1 + 0.466666666666667*G0_0_0_1_0 - 1.18333333333333*G0_0_0_1_1 - 0.108333333333333*G0_0_1_0_0 + 0.637499999999999*G0_0_1_0_1 - 0.5125*G0_0_1_1_0 + 2.11666666666666*G0_0_1_1_1 - 0.108333333333333*G0_1_0_0_0 - 1.14583333333333*G0_1_0_0_1 + 0.837499999999998*G0_1_0_1_0 - 1.18333333333333*G0_1_0_1_1 - 0.108333333333333*G0_1_1_0_0 - 0.108333333333333*G0_1_1_0_1 - 0.141666666666668*G0_1_1_1_0 + 1.00833333333333*G0_1_1_1_1 + 0.0916666666666674*G1_0_0_0_0 + 0.400000000000001*G1_0_0_0_1 - 0.466666666666667*G1_0_0_1_0 + 1.18333333333333*G1_0_0_1_1 + 0.108333333333333*G1_0_1_0_0 - 0.637499999999999*G1_0_1_0_1 + 0.5125*G1_0_1_1_0 - 2.11666666666666*G1_0_1_1_1 + 0.108333333333333*G1_1_0_0_0 + 1.14583333333333*G1_1_0_0_1 - 0.837499999999998*G1_1_0_1_0 + 1.18333333333333*G1_1_0_1_1 + 0.108333333333333*G1_1_1_0_0 + 0.108333333333333*G1_1_1_0_1 + 0.141666666666668*G1_1_1_1_0 - 1.00833333333333*G1_1_1_1_1;
    A[123] = 1.09166666666667*G0_0_0_0_0 + 0.358333333333334*G0_0_0_0_1 + 3.225*G0_0_0_1_0 + 1.34166666666667*G0_0_0_1_1 - 0.0166666666666679*G0_0_1_0_0 - 0.387500000000001*G0_0_1_0_1 + 0.962499999999999*G0_0_1_1_0 + 0.558333333333333*G0_0_1_1_1 - 0.0166666666666673*G0_1_0_0_0 + 0.729166666666665*G0_1_0_0_1 - 1.05416666666666*G0_1_0_1_0 - 0.308333333333332*G0_1_0_1_1 - 0.0166666666666683*G0_1_1_0_0 - 0.0166666666666683*G0_1_1_0_1 - 0.0166666666666667*G0_1_1_1_0 + 0.0916666666666665*G0_1_1_1_1 - 1.09166666666667*G1_0_0_0_0 - 0.358333333333334*G1_0_0_0_1 - 3.225*G1_0_0_1_0 - 1.34166666666667*G1_0_0_1_1 + 0.0166666666666679*G1_0_1_0_0 + 0.387500000000001*G1_0_1_0_1 - 0.962499999999999*G1_0_1_1_0 - 0.558333333333333*G1_0_1_1_1 + 0.0166666666666673*G1_1_0_0_0 - 0.729166666666665*G1_1_0_0_1 + 1.05416666666666*G1_1_0_1_0 + 0.308333333333332*G1_1_0_1_1 + 0.0166666666666683*G1_1_1_0_0 + 0.0166666666666683*G1_1_1_0_1 + 0.0166666666666667*G1_1_1_1_0 - 0.0916666666666665*G1_1_1_1_1;
    A[124] = -0.183333333333334*G0_0_0_0_0 - 0.300000000000002*G0_0_0_0_1 - 0.866666666666664*G0_0_0_1_0 - 1.93333333333333*G0_0_0_1_1 - 0.216666666666667*G0_0_1_0_0 + 0.525*G0_0_1_0_1 - 1.00833333333333*G0_0_1_1_0 - 1.53333333333334*G0_0_1_1_1 - 0.216666666666666*G0_1_0_0_0 - 1.04166666666667*G0_1_0_0_1 + 0.358333333333333*G0_1_0_1_0 - 0.466666666666666*G0_1_0_1_1 - 0.216666666666666*G0_1_1_0_0 - 0.216666666666665*G0_1_1_0_1 - 0.216666666666668*G0_1_1_1_0 - 0.600000000000003*G0_1_1_1_1 + 0.183333333333334*G1_0_0_0_0 + 0.300000000000002*G1_0_0_0_1 + 0.866666666666664*G1_0_0_1_0 + 1.93333333333333*G1_0_0_1_1 + 0.216666666666667*G1_0_1_0_0 - 0.525*G1_0_1_0_1 + 1.00833333333333*G1_0_1_1_0 + 1.53333333333334*G1_0_1_1_1 + 0.216666666666666*G1_1_0_0_0 + 1.04166666666667*G1_1_0_0_1 - 0.358333333333333*G1_1_0_1_0 + 0.466666666666666*G1_1_0_1_1 + 0.216666666666666*G1_1_1_0_0 + 0.216666666666665*G1_1_1_0_1 + 0.216666666666668*G1_1_1_1_0 + 0.600000000000003*G1_1_1_1_1;
    A[125] = 0.508333333333335*G0_0_0_0_0 + 0.775000000000002*G0_0_0_0_1 + 0.975*G0_0_0_1_0 + 0.591666666666668*G0_0_0_1_1 - 0.183333333333334*G0_0_1_0_0 - 1.0125*G0_0_1_0_1 + 0.170833333333331*G0_0_1_1_0 + 0.975*G0_0_1_1_1 - 0.183333333333334*G0_1_0_0_0 + 1.60416666666667*G0_1_0_0_1 - 1.0125*G0_1_0_1_0 + 0.775000000000001*G0_1_0_1_1 - 0.183333333333334*G0_1_1_0_0 - 0.183333333333334*G0_1_1_0_1 - 0.183333333333334*G0_1_1_1_0 + 0.508333333333335*G0_1_1_1_1 - 0.508333333333335*G1_0_0_0_0 - 0.775000000000002*G1_0_0_0_1 - 0.975*G1_0_0_1_0 - 0.591666666666668*G1_0_0_1_1 + 0.183333333333334*G1_0_1_0_0 + 1.0125*G1_0_1_0_1 - 0.170833333333331*G1_0_1_1_0 - 0.975*G1_0_1_1_1 + 0.183333333333334*G1_1_0_0_0 - 1.60416666666667*G1_1_0_0_1 + 1.0125*G1_1_0_1_0 - 0.775000000000001*G1_1_0_1_1 + 0.183333333333334*G1_1_1_0_0 + 0.183333333333334*G1_1_1_0_1 + 0.183333333333334*G1_1_1_1_0 - 0.508333333333335*G1_1_1_1_1;
    A[126] = 2.18333333333333*G0_0_0_0_0 + 2.425*G0_0_0_0_1 + 1.09166666666667*G0_0_0_1_0 + 0.858333333333334*G0_0_0_1_1 - 0.241666666666668*G0_0_1_0_0 + 1.625*G0_0_1_0_1 - 1.075*G0_0_1_1_0 + 0.15833333333333*G0_0_1_1_1 + 1.09166666666666*G0_1_0_0_0 + 0.258333333333332*G0_1_0_0_1 + 1.69166666666666*G0_1_0_1_0 + 0.858333333333332*G0_1_0_1_1 - 0.475000000000002*G0_1_1_0_0 + 0.158333333333335*G0_1_1_0_1 - 0.475000000000003*G0_1_1_1_0 - 0.033333333333336*G0_1_1_1_1 - 2.18333333333333*G1_0_0_0_0 - 2.425*G1_0_0_0_1 - 1.09166666666667*G1_0_0_1_0 - 0.858333333333334*G1_0_0_1_1 + 0.241666666666668*G1_0_1_0_0 - 1.625*G1_0_1_0_1 + 1.075*G1_0_1_1_0 - 0.15833333333333*G1_0_1_1_1 - 1.09166666666666*G1_1_0_0_0 - 0.258333333333332*G1_1_0_0_1 - 1.69166666666666*G1_1_0_1_0 - 0.858333333333332*G1_1_0_1_1 + 0.475000000000002*G1_1_1_0_0 - 0.158333333333335*G1_1_1_0_1 + 0.475000000000003*G1_1_1_1_0 + 0.033333333333336*G1_1_1_1_1;
    A[127] = -5.86666666666666*G0_0_0_0_0 - 2.43333333333333*G0_0_0_0_1 - 3.1*G0_0_0_1_0 - 1.96666666666666*G0_0_0_1_1 + 2.06666666666667*G0_0_1_0_0 + 0.416666666666665*G0_0_1_0_1 + 3.15*G0_0_1_1_0 + 1.43333333333333*G0_0_1_1_1 - 3.26666666666666*G0_1_0_0_0 - 0.516666666666665*G0_1_0_0_1 - 4.71666666666665*G0_1_0_1_0 - 1.96666666666666*G0_1_0_1_1 + 1.53333333333334*G0_1_1_0_0 + 0.6*G0_1_1_0_1 + 1.53333333333334*G0_1_1_1_0 + 0.816666666666668*G0_1_1_1_1 + 5.86666666666666*G1_0_0_0_0 + 2.43333333333333*G1_0_0_0_1 + 3.1*G1_0_0_1_0 + 1.96666666666666*G1_0_0_1_1 - 2.06666666666667*G1_0_1_0_0 - 0.416666666666665*G1_0_1_0_1 - 3.15*G1_0_1_1_0 - 1.43333333333333*G1_0_1_1_1 + 3.26666666666666*G1_1_0_0_0 + 0.516666666666665*G1_1_0_0_1 + 4.71666666666665*G1_1_0_1_0 + 1.96666666666666*G1_1_0_1_1 - 1.53333333333334*G1_1_1_0_0 - 0.6*G1_1_1_0_1 - 1.53333333333334*G1_1_1_1_0 - 0.816666666666668*G1_1_1_1_1;
    A[128] = 3.68333333333333*G0_0_0_0_0 - 1.825*G0_0_0_0_1 + 2.17499999999999*G0_0_0_1_0 - 1.05833333333333*G0_0_0_1_1 - 1.825*G0_0_1_0_0 + 2.70833333333334*G0_0_1_0_1 - 2.325*G0_0_1_1_0 + 1.24166666666667*G0_0_1_1_1 + 2.17499999999999*G0_1_0_0_0 - 2.325*G0_1_0_0_1 + 3.44166666666665*G0_1_0_1_0 - 1.05833333333333*G0_1_0_1_1 - 1.05833333333333*G0_1_1_0_0 + 1.24166666666667*G0_1_1_0_1 - 1.05833333333333*G0_1_1_1_0 + 0.633333333333336*G0_1_1_1_1 - 3.68333333333333*G1_0_0_0_0 + 1.825*G1_0_0_0_1 - 2.17499999999999*G1_0_0_1_0 + 1.05833333333333*G1_0_0_1_1 + 1.825*G1_0_1_0_0 - 2.70833333333334*G1_0_1_0_1 + 2.325*G1_0_1_1_0 - 1.24166666666667*G1_0_1_1_1 - 2.17499999999999*G1_1_0_0_0 + 2.325*G1_1_0_0_1 - 3.44166666666665*G1_1_0_1_0 + 1.05833333333333*G1_1_0_1_1 + 1.05833333333333*G1_1_1_0_0 - 1.24166666666667*G1_1_1_0_1 + 1.05833333333333*G1_1_1_1_0 - 0.633333333333336*G1_1_1_1_1;
    A[129] = -0.824957911384306*G0_0_0_0_0 + 2.47487373415291*G0_0_0_0_1 + 1.76776695296637*G0_0_0_1_0 + 5.77470537969013*G0_0_0_1_1 - 0.235702260395514*G0_0_1_0_0 - 6.54073772597557*G0_0_1_0_1 - 1.59099025766974*G0_0_1_1_0 - 5.53900311929462*G0_0_1_1_1 - 0.235702260395515*G0_1_0_0_0 + 3.12305495024058*G0_1_0_0_1 + 2.41594816905403*G0_1_0_1_0 + 5.77470537969012*G0_1_0_1_1 - 0.235702260395514*G0_1_1_0_0 - 3.06412938514171*G0_1_1_0_1 - 0.942809041582069*G0_1_1_1_0 - 2.94627825494395*G0_1_1_1_1 + 0.824957911384306*G1_0_0_0_0 - 2.47487373415291*G1_0_0_0_1 - 1.76776695296637*G1_0_0_1_0 - 5.77470537969013*G1_0_0_1_1 + 0.235702260395514*G1_0_1_0_0 + 6.54073772597557*G1_0_1_0_1 + 1.59099025766974*G1_0_1_1_0 + 5.53900311929462*G1_0_1_1_1 + 0.235702260395515*G1_1_0_0_0 - 3.12305495024058*G1_1_0_0_1 - 2.41594816905403*G1_1_0_1_0 - 5.77470537969012*G1_1_0_1_1 + 0.235702260395514*G1_1_1_0_0 + 3.06412938514171*G1_1_1_0_1 + 0.942809041582069*G1_1_1_1_0 + 2.94627825494395*G1_1_1_1_1;
    A[130] = -6.56735931203199*G0_0_0_0_0 + 6.06217782649106*G0_0_0_0_1 + 2.59807621135331*G0_0_0_1_0 + 8.51591647054697*G0_0_0_1_1 - 0.360843918243513*G0_0_1_0_0 - 3.13934208871859*G0_0_1_0_1 - 2.27331668493416*G0_0_1_1_0 - 6.20651539378848*G0_0_1_1_1 - 0.360843918243518*G0_1_0_0_0 + 4.51054897804394*G0_1_0_0_1 + 3.6445235742595*G0_1_0_1_0 + 8.51591647054696*G0_1_0_1_1 - 0.360843918243517*G0_1_1_0_0 - 2.52590742770461*G0_1_1_0_1 - 1.22686932202796*G0_1_1_1_0 - 3.53627039878647*G0_1_1_1_1 + 6.56735931203199*G1_0_0_0_0 - 6.06217782649106*G1_0_0_0_1 - 2.59807621135331*G1_0_0_1_0 - 8.51591647054697*G1_0_0_1_1 + 0.360843918243513*G1_0_1_0_0 + 3.13934208871859*G1_0_1_0_1 + 2.27331668493416*G1_0_1_1_0 + 6.20651539378848*G1_0_1_1_1 + 0.360843918243518*G1_1_0_0_0 - 4.51054897804394*G1_1_0_0_1 - 3.6445235742595*G1_1_0_1_0 - 8.51591647054696*G1_1_0_1_1 + 0.360843918243517*G1_1_1_0_0 + 2.52590742770461*G1_1_1_0_1 + 1.22686932202796*G1_1_1_1_0 + 3.53627039878647*G1_1_1_1_1;
    A[131] = 1.54166666666667*G0_0_0_0_0 - 4.75*G0_0_0_0_1 - 1.75*G0_0_0_1_0 - 5.66666666666666*G0_0_0_1_1 - 0.791666666666671*G0_0_1_0_0 + 6.6875*G0_0_1_0_1 + 1.6875*G0_0_1_1_0 + 8.83333333333333*G0_0_1_1_1 - 0.791666666666666*G0_1_0_0_0 - 4.22916666666666*G0_1_0_0_1 - 2.22916666666666*G0_1_0_1_0 - 5.66666666666665*G0_1_0_1_1 - 0.79166666666667*G0_1_1_0_0 + 1.95833333333334*G0_1_1_0_1 + 1.20833333333333*G0_1_1_1_0 + 4.29166666666667*G0_1_1_1_1 - 1.54166666666667*G1_0_0_0_0 + 4.75*G1_0_0_0_1 + 1.75*G1_0_0_1_0 + 5.66666666666666*G1_0_0_1_1 + 0.791666666666671*G1_0_1_0_0 - 6.6875*G1_0_1_0_1 - 1.6875*G1_0_1_1_0 - 8.83333333333333*G1_0_1_1_1 + 0.791666666666666*G1_1_0_0_0 + 4.22916666666666*G1_1_0_0_1 + 2.22916666666666*G1_1_0_1_0 + 5.66666666666665*G1_1_0_1_1 + 0.79166666666667*G1_1_1_0_0 - 1.95833333333334*G1_1_1_0_1 - 1.20833333333333*G1_1_1_1_0 - 4.29166666666667*G1_1_1_1_1;
    A[132] = -1.17851130197758*G0_0_0_0_0 - 1.06066017177982*G0_0_0_0_1 - 6.7175144212722*G0_0_0_1_0 - 2.71057599454843*G0_0_0_1_1 + 0.824957911384308*G0_0_1_0_0 + 1.06066017177982*G0_0_1_0_1 + 1.76776695296638*G0_0_1_1_0 + 1.53206469257086*G0_0_1_1_1 + 0.824957911384305*G0_1_0_0_0 - 1.29636243217533*G0_1_0_0_1 - 0.589255650988789*G0_1_0_1_0 - 2.71057599454842*G0_1_0_1_1 + 0.824957911384307*G0_1_1_0_0 + 0.824957911384304*G0_1_1_0_1 + 1.53206469257086*G0_1_1_1_0 + 0.942809041582067*G0_1_1_1_1 + 1.17851130197758*G1_0_0_0_0 + 1.06066017177982*G1_0_0_0_1 + 6.7175144212722*G1_0_0_1_0 + 2.71057599454843*G1_0_0_1_1 - 0.824957911384308*G1_0_1_0_0 - 1.06066017177982*G1_0_1_0_1 - 1.76776695296638*G1_0_1_1_0 - 1.53206469257086*G1_0_1_1_1 - 0.824957911384305*G1_1_0_0_0 + 1.29636243217533*G1_1_0_0_1 + 0.589255650988789*G1_1_0_1_0 + 2.71057599454842*G1_1_0_1_1 - 0.824957911384307*G1_1_1_0_0 - 0.824957911384304*G1_1_1_0_1 - 1.53206469257086*G1_1_1_1_0 - 0.942809041582067*G1_1_1_1_1;
    A[133] = 5.19615242270663*G0_0_0_0_0 + 1.51554445662277*G0_0_0_0_1 + 1.51554445662277*G0_0_0_1_0 - 5.41265877365273*G0_0_0_1_1 - 0.649519052838338*G0_0_1_0_0 - 1.29903810567666*G0_0_1_0_1 + 2.16506350946109*G0_0_1_1_0 + 2.3815698604072*G0_0_1_1_1 - 0.64951905283833*G0_1_0_0_0 + 2.16506350946109*G0_1_0_0_1 - 8.22724133595214*G0_1_0_1_0 - 5.41265877365272*G0_1_0_1_1 - 0.649519052838338*G0_1_1_0_0 - 0.649519052838336*G0_1_1_0_1 + 0.216506350946109*G0_1_1_1_0 + 1.29903810567666*G0_1_1_1_1 - 5.19615242270663*G1_0_0_0_0 - 1.51554445662277*G1_0_0_0_1 - 1.51554445662277*G1_0_0_1_0 + 5.41265877365273*G1_0_0_1_1 + 0.649519052838338*G1_0_1_0_0 + 1.29903810567666*G1_0_1_0_1 - 2.16506350946109*G1_0_1_1_0 - 2.3815698604072*G1_0_1_1_1 + 0.64951905283833*G1_1_0_0_0 - 2.16506350946109*G1_1_0_0_1 + 8.22724133595214*G1_1_0_1_0 + 5.41265877365272*G1_1_0_1_1 + 0.649519052838338*G1_1_1_0_0 + 0.649519052838336*G1_1_1_0_1 - 0.216506350946109*G1_1_1_1_0 - 1.29903810567666*G1_1_1_1_1;
    A[134] = -2.08333333333333*G0_0_0_0_0 - 1.875*G0_0_0_0_1 + 2.125*G0_0_0_1_0 + 0.958333333333325*G0_0_0_1_1 + 1.45833333333334*G0_0_1_0_0 + 1.875*G0_0_1_0_1 - 1.12499999999999*G0_0_1_1_0 - 6.54166666666666*G0_0_1_1_1 + 1.45833333333333*G0_1_0_0_0 - 2.29166666666666*G0_1_0_0_1 + 4.70833333333332*G0_1_0_1_0 + 0.958333333333325*G0_1_0_1_1 + 1.45833333333334*G0_1_1_0_0 + 1.45833333333333*G0_1_1_0_1 - 0.541666666666663*G0_1_1_1_0 - 3.33333333333334*G0_1_1_1_1 + 2.08333333333333*G1_0_0_0_0 + 1.875*G1_0_0_0_1 - 2.125*G1_0_0_1_0 - 0.958333333333325*G1_0_0_1_1 - 1.45833333333334*G1_0_1_0_0 - 1.875*G1_0_1_0_1 + 1.12499999999999*G1_0_1_1_0 + 6.54166666666666*G1_0_1_1_1 - 1.45833333333333*G1_1_0_0_0 + 2.29166666666666*G1_1_0_0_1 - 4.70833333333332*G1_1_0_1_0 - 0.958333333333325*G1_1_0_1_1 - 1.45833333333334*G1_1_1_0_0 - 1.45833333333333*G1_1_1_0_1 + 0.541666666666663*G1_1_1_1_0 + 3.33333333333334*G1_1_1_1_1;
    A[135] = 0.824957911384313*G0_0_0_0_0 + 1.53206469257086*G0_0_0_0_1 - 0.824957911384306*G0_0_0_1_0 - 0.824957911384306*G0_0_0_1_1 + 0.235702260395518*G0_0_1_0_0 + 0.883883476483187*G0_0_1_0_1 + 2.53379929925179*G0_0_1_1_0 - 0.117851130197762*G0_0_1_1_1 - 2.59272486435068*G0_1_0_0_0 - 1.94454364826301*G0_1_0_0_1 + 5.36222642399798*G0_1_0_1_0 + 2.00346921336188*G0_1_0_1_1 - 2.59272486435068*G0_1_1_0_0 - 2.59272486435068*G0_1_1_0_1 + 8.72098363463407*G0_1_1_1_0 + 2.94627825494394*G0_1_1_1_1 - 0.824957911384313*G1_0_0_0_0 - 1.53206469257086*G1_0_0_0_1 + 0.824957911384306*G1_0_0_1_0 + 0.824957911384306*G1_0_0_1_1 - 0.235702260395518*G1_0_1_0_0 - 0.883883476483187*G1_0_1_0_1 - 2.53379929925179*G1_0_1_1_0 + 0.117851130197762*G1_0_1_1_1 + 2.59272486435068*G1_1_0_0_0 + 1.94454364826301*G1_1_0_0_1 - 5.36222642399798*G1_1_0_1_0 - 2.00346921336188*G1_1_0_1_1 + 2.59272486435068*G1_1_1_0_0 + 2.59272486435068*G1_1_1_0_1 - 8.72098363463407*G1_1_1_1_0 - 2.94627825494394*G1_1_1_1_1;
    A[136] = 1.88561808316412*G0_0_0_0_0 - 1.88561808316412*G0_0_0_0_1 + 0.47140452079103*G0_0_0_1_0 + 0.471404520791026*G0_0_0_1_1 + 3.06412938514171*G0_0_1_0_0 + 0.58925565098879*G0_0_1_0_1 - 2.71057599454843*G0_0_1_1_0 + 6.1282587702834*G0_0_1_1_1 + 1.64991582276861*G0_1_0_0_0 - 0.8249579113843*G0_1_0_0_1 - 1.29636243217534*G0_1_0_1_0 + 1.88561808316413*G0_1_0_1_1 + 1.64991582276861*G0_1_1_0_0 + 1.64991582276861*G0_1_1_0_1 - 4.47834294751479*G0_1_1_1_0 + 5.89255650988789*G0_1_1_1_1 - 1.88561808316412*G1_0_0_0_0 + 1.88561808316412*G1_0_0_0_1 - 0.47140452079103*G1_0_0_1_0 - 0.471404520791026*G1_0_0_1_1 - 3.06412938514171*G1_0_1_0_0 - 0.58925565098879*G1_0_1_0_1 + 2.71057599454843*G1_0_1_1_0 - 6.1282587702834*G1_0_1_1_1 - 1.64991582276861*G1_1_0_0_0 + 0.8249579113843*G1_1_0_0_1 + 1.29636243217534*G1_1_0_1_0 - 1.88561808316413*G1_1_0_1_1 - 1.64991582276861*G1_1_1_0_0 - 1.64991582276861*G1_1_1_0_1 + 4.47834294751479*G1_1_1_1_0 - 5.89255650988789*G1_1_1_1_1;
    A[137] = 2.00346921336188*G0_0_0_0_0 + 5.06759859850358*G0_0_0_0_1 - 2.00346921336188*G0_0_0_1_0 - 2.00346921336188*G0_0_0_1_1 + 2.59272486435068*G0_0_1_0_0 + 3.83016173142713*G0_0_1_0_1 - 1.59099025766973*G0_0_1_1_0 - 8.3674302440408*G0_0_1_1_1 - 0.235702260395516*G0_1_0_0_0 + 1.00173460668094*G0_1_0_0_1 + 1.23743686707646*G0_1_0_1_0 + 0.824957911384301*G0_1_0_1_1 - 0.235702260395517*G0_1_1_0_0 - 0.23570226039552*G0_1_1_0_1 + 1.64991582276861*G0_1_1_1_0 - 2.94627825494394*G0_1_1_1_1 - 2.00346921336188*G1_0_0_0_0 - 5.06759859850358*G1_0_0_0_1 + 2.00346921336188*G1_0_0_1_0 + 2.00346921336188*G1_0_0_1_1 - 2.59272486435068*G1_0_1_0_0 - 3.83016173142713*G1_0_1_0_1 + 1.59099025766973*G1_0_1_1_0 + 8.3674302440408*G1_0_1_1_1 + 0.235702260395516*G1_1_0_0_0 - 1.00173460668094*G1_1_0_0_1 - 1.23743686707646*G1_1_0_1_0 - 0.824957911384301*G1_1_0_1_1 + 0.235702260395517*G1_1_1_0_0 + 0.23570226039552*G1_1_1_0_1 - 1.64991582276861*G1_1_1_1_0 + 2.94627825494394*G1_1_1_1_1;
    A[138] = -3.77123616632825*G0_0_0_0_0 - 3.88908729652601*G0_0_0_0_1 - 4.36049181731705*G0_0_0_1_0 - 3.88908729652601*G0_0_0_1_1 - 4.36049181731704*G0_0_1_0_0 - 4.12478955692153*G0_0_1_0_1 - 6.48181216087669*G0_0_1_1_0 - 5.53900311929463*G0_0_1_1_1 + 2.00346921336188*G0_1_0_0_0 + 2.2391714737574*G0_1_0_0_1 - 0.117851130197756*G0_1_0_1_0 + 0.117851130197761*G0_1_0_1_1 + 2.00346921336189*G0_1_1_0_0 + 2.00346921336189*G0_1_1_0_1 + 2.00346921336189*G0_1_1_1_0 + 1.17851130197758*G0_1_1_1_1 + 3.77123616632825*G1_0_0_0_0 + 3.88908729652601*G1_0_0_0_1 + 4.36049181731705*G1_0_0_1_0 + 3.88908729652601*G1_0_0_1_1 + 4.36049181731704*G1_0_1_0_0 + 4.12478955692153*G1_0_1_0_1 + 6.48181216087669*G1_0_1_1_0 + 5.53900311929463*G1_0_1_1_1 - 2.00346921336188*G1_1_0_0_0 - 2.2391714737574*G1_1_0_0_1 + 0.117851130197756*G1_1_0_1_0 - 0.117851130197761*G1_1_0_1_1 - 2.00346921336189*G1_1_1_0_0 - 2.00346921336189*G1_1_1_0_1 - 2.00346921336189*G1_1_1_1_0 - 1.17851130197758*G1_1_1_1_1;
    A[139] = 4.00693842672377*G0_0_0_0_0 + 6.59966329107444*G0_0_0_0_1 + 2.82842712474619*G0_0_0_1_0 + 6.59966329107444*G0_0_0_1_1 + 5.18544972870135*G0_0_1_0_0 + 5.8925565098879*G0_0_1_0_1 + 5.8925565098879*G0_0_1_1_0 + 12.2565175405668*G0_0_1_1_1 - 0.471404520791034*G0_1_0_0_0 + 0.23570226039551*G0_1_0_0_1 + 0.235702260395514*G0_1_0_1_0 + 0.942809041582059*G0_1_0_1_1 - 0.471404520791035*G0_1_1_0_0 - 0.471404520791039*G0_1_1_0_1 - 0.471404520791029*G0_1_1_1_0 - 4.00693842672377*G1_0_0_0_0 - 6.59966329107444*G1_0_0_0_1 - 2.82842712474619*G1_0_0_1_0 - 6.59966329107444*G1_0_0_1_1 - 5.18544972870135*G1_0_1_0_0 - 5.8925565098879*G1_0_1_0_1 - 5.8925565098879*G1_0_1_1_0 - 12.2565175405668*G1_0_1_1_1 + 0.471404520791034*G1_1_0_0_0 - 0.23570226039551*G1_1_0_0_1 - 0.235702260395514*G1_1_0_1_0 - 0.942809041582059*G1_1_0_1_1 + 0.471404520791035*G1_1_1_0_0 + 0.471404520791039*G1_1_1_0_1 + 0.471404520791029*G1_1_1_1_0;
    A[140] = 0.942809041582059*G0_0_0_0_0 - 2.71057599454843*G0_0_0_0_1 + 1.53206469257085*G0_0_0_1_0 - 2.71057599454843*G0_0_0_1_1 + 1.53206469257085*G0_0_1_0_0 - 0.589255650988791*G0_0_1_0_1 + 1.76776695296637*G0_0_1_1_0 - 6.7175144212722*G0_0_1_1_1 + 0.824957911384306*G0_1_0_0_0 - 1.29636243217533*G0_1_0_0_1 + 1.06066017177982*G0_1_0_1_0 - 1.06066017177982*G0_1_0_1_1 + 0.824957911384308*G0_1_1_0_0 + 0.824957911384311*G0_1_1_0_1 + 0.824957911384309*G0_1_1_1_0 - 1.17851130197758*G0_1_1_1_1 - 0.942809041582059*G1_0_0_0_0 + 2.71057599454843*G1_0_0_0_1 - 1.53206469257085*G1_0_0_1_0 + 2.71057599454843*G1_0_0_1_1 - 1.53206469257085*G1_0_1_0_0 + 0.589255650988791*G1_0_1_0_1 - 1.76776695296637*G1_0_1_1_0 + 6.7175144212722*G1_0_1_1_1 - 0.824957911384306*G1_1_0_0_0 + 1.29636243217533*G1_1_0_0_1 - 1.06066017177982*G1_1_0_1_0 + 1.06066017177982*G1_1_0_1_1 - 0.824957911384308*G1_1_1_0_0 - 0.824957911384311*G1_1_1_0_1 - 0.824957911384309*G1_1_1_1_0 + 1.17851130197758*G1_1_1_1_1;
    A[141] = -2.00346921336188*G0_0_0_0_0 - 2.59272486435068*G0_0_0_0_1 - 2.59272486435067*G0_0_0_1_0 - 2.59272486435067*G0_0_0_1_1 - 3.41768277573498*G0_0_1_0_0 - 9.48701598091951*G0_0_1_0_1 - 2.18024590865852*G0_0_1_1_0 - 5.42115198909685*G0_0_1_1_1 + 2.94627825494395*G0_1_0_0_0 + 2.53379929925179*G0_1_0_0_1 + 4.1837151220204*G0_1_0_1_0 + 3.77123616632825*G0_1_0_1_1 + 4.59619407771256*G0_1_1_0_0 + 2.71057599454842*G0_1_1_0_1 + 4.59619407771256*G0_1_1_1_0 + 2.94627825494395*G0_1_1_1_1 + 2.00346921336188*G1_0_0_0_0 + 2.59272486435068*G1_0_0_0_1 + 2.59272486435067*G1_0_0_1_0 + 2.59272486435067*G1_0_0_1_1 + 3.41768277573498*G1_0_1_0_0 + 9.48701598091951*G1_0_1_0_1 + 2.18024590865852*G1_0_1_1_0 + 5.42115198909685*G1_0_1_1_1 - 2.94627825494395*G1_1_0_0_0 - 2.53379929925179*G1_1_0_0_1 - 4.1837151220204*G1_1_0_1_0 - 3.77123616632825*G1_1_0_1_1 - 4.59619407771256*G1_1_1_0_0 - 2.71057599454842*G1_1_1_0_1 - 4.59619407771256*G1_1_1_1_0 - 2.94627825494395*G1_1_1_1_1;
    A[142] = 2.82842712474619*G0_0_0_0_0 + 1.64991582276861*G0_0_0_0_1 + 1.64991582276861*G0_0_0_1_0 + 1.64991582276861*G0_0_0_1_1 + 0.942809041582067*G0_0_1_0_0 + 1.29636243217534*G0_0_1_0_1 - 1.53206469257084*G0_0_1_1_0 + 0.235702260395523*G0_0_1_1_1 - 4.71404520791032*G0_1_0_0_0 - 1.53206469257085*G0_1_0_0_1 - 7.18891894206323*G0_1_0_1_0 - 4.00693842672376*G0_1_0_1_1 - 10.3708994574027*G0_1_1_0_0 - 4.24264068711928*G0_1_1_0_1 - 10.3708994574027*G0_1_1_1_0 - 5.89255650988789*G0_1_1_1_1 - 2.82842712474619*G1_0_0_0_0 - 1.64991582276861*G1_0_0_0_1 - 1.64991582276861*G1_0_0_1_0 - 1.64991582276861*G1_0_0_1_1 - 0.942809041582067*G1_0_1_0_0 - 1.29636243217534*G1_0_1_0_1 + 1.53206469257084*G1_0_1_1_0 - 0.235702260395523*G1_0_1_1_1 + 4.71404520791032*G1_1_0_0_0 + 1.53206469257085*G1_1_0_0_1 + 7.18891894206323*G1_1_0_1_0 + 4.00693842672376*G1_1_0_1_1 + 10.3708994574027*G1_1_1_0_0 + 4.24264068711928*G1_1_1_0_1 + 10.3708994574027*G1_1_1_1_0 + 5.89255650988789*G1_1_1_1_1;
    A[143] = -0.824957911384306*G0_0_0_0_0 - 0.235702260395514*G0_0_0_0_1 - 0.235702260395515*G0_0_0_1_0 - 0.235702260395514*G0_0_0_1_1 + 2.47487373415291*G0_0_1_0_0 - 6.54073772597557*G0_0_1_0_1 + 3.12305495024058*G0_0_1_1_0 - 3.06412938514171*G0_0_1_1_1 + 1.76776695296637*G0_1_0_0_0 - 1.59099025766974*G0_1_0_0_1 + 2.41594816905403*G0_1_0_1_0 - 0.942809041582069*G0_1_0_1_1 + 5.77470537969013*G0_1_1_0_0 - 5.53900311929463*G0_1_1_0_1 + 5.77470537969012*G0_1_1_1_0 - 2.94627825494395*G0_1_1_1_1 + 0.824957911384306*G1_0_0_0_0 + 0.235702260395514*G1_0_0_0_1 + 0.235702260395515*G1_0_0_1_0 + 0.235702260395514*G1_0_0_1_1 - 2.47487373415291*G1_0_1_0_0 + 6.54073772597557*G1_0_1_0_1 - 3.12305495024058*G1_0_1_1_0 + 3.06412938514171*G1_0_1_1_1 - 1.76776695296637*G1_1_0_0_0 + 1.59099025766974*G1_1_0_0_1 - 2.41594816905403*G1_1_0_1_0 + 0.942809041582069*G1_1_0_1_1 - 5.77470537969013*G1_1_1_0_0 + 5.53900311929463*G1_1_1_0_1 - 5.77470537969012*G1_1_1_1_0 + 2.94627825494395*G1_1_1_1_1;
    A[144] = 6.66666666666666*G0_0_0_0_0 + 8.33333333333333*G0_0_0_0_1 - 1.66666666666667*G0_0_0_1_0 - 1.66666666666667*G0_0_0_1_1 + 8.33333333333333*G0_0_1_0_0 + 28.3333333333333*G0_0_1_0_1 - 1.66666666666666*G0_0_1_1_0 + 8.33333333333333*G0_0_1_1_1 - 1.66666666666667*G0_1_0_0_0 - 1.66666666666666*G0_1_0_0_1 + 8.33333333333333*G0_1_0_1_0 + 8.33333333333333*G0_1_0_1_1 - 1.66666666666667*G0_1_1_0_0 + 8.33333333333333*G0_1_1_0_1 + 8.33333333333333*G0_1_1_1_0 + 16.6666666666667*G0_1_1_1_1 - 6.66666666666666*G1_0_0_0_0 - 8.33333333333333*G1_0_0_0_1 + 1.66666666666667*G1_0_0_1_0 + 1.66666666666667*G1_0_0_1_1 - 8.33333333333333*G1_0_1_0_0 - 28.3333333333333*G1_0_1_0_1 + 1.66666666666666*G1_0_1_1_0 - 8.33333333333333*G1_0_1_1_1 + 1.66666666666667*G1_1_0_0_0 + 1.66666666666666*G1_1_0_0_1 - 8.33333333333333*G1_1_0_1_0 - 8.33333333333333*G1_1_0_1_1 + 1.66666666666667*G1_1_1_0_0 - 8.33333333333333*G1_1_1_0_1 - 8.33333333333333*G1_1_1_1_0 - 16.6666666666667*G1_1_1_1_1;
    A[145] = 1.02062072615967*G0_0_0_0_0 - 1.02062072615966*G0_0_0_0_1 - 7.1443450831176*G0_0_0_1_0 - 7.14434508311761*G0_0_0_1_1 + 2.04124145231932*G0_0_1_0_0 + 3.5721725415588*G0_0_1_0_1 - 8.67527617235707*G0_0_1_1_0 - 1.02062072615965*G0_0_1_1_1 + 2.04124145231931*G0_1_0_0_0 + 3.5721725415588*G0_1_0_0_1 + 15.8196212554747*G0_1_0_1_0 + 17.3505523447142*G0_1_0_1_1 + 2.0412414523193*G0_1_1_0_0 + 14.2886901662352*G0_1_1_0_1 + 14.2886901662352*G0_1_1_1_0 + 25.5155181539914*G0_1_1_1_1 - 1.02062072615967*G1_0_0_0_0 + 1.02062072615966*G1_0_0_0_1 + 7.1443450831176*G1_0_0_1_0 + 7.14434508311761*G1_0_0_1_1 - 2.04124145231932*G1_0_1_0_0 - 3.5721725415588*G1_0_1_0_1 + 8.67527617235707*G1_0_1_1_0 + 1.02062072615965*G1_0_1_1_1 - 2.04124145231931*G1_1_0_0_0 - 3.5721725415588*G1_1_0_0_1 - 15.8196212554747*G1_1_0_1_0 - 17.3505523447142*G1_1_0_1_1 - 2.0412414523193*G1_1_1_0_0 - 14.2886901662352*G1_1_1_0_1 - 14.2886901662352*G1_1_1_1_0 - 25.5155181539914*G1_1_1_1_1;
    A[146] = 6.48181216087668*G0_0_0_0_0 + 4.12478955692152*G0_0_0_0_1 - 6.48181216087667*G0_0_0_1_0 - 6.48181216087668*G0_0_0_1_1 + 9.42809041582064*G0_0_1_0_0 - 16.2045304021917*G0_0_1_0_1 - 9.13346259032622*G0_0_1_1_0 - 31.2305495024058*G0_0_1_1_1 + 2.35702260395516*G0_1_0_0_0 + 5.0086730334047*G0_1_0_0_1 - 2.06239477846076*G0_1_0_1_0 + 0.589255650988778*G0_1_0_1_1 + 2.35702260395517*G0_1_1_0_0 - 4.71404520791032*G0_1_1_0_1 - 4.7140452079103*G0_1_1_1_0 - 14.7313912747197*G0_1_1_1_1 - 6.48181216087668*G1_0_0_0_0 - 4.12478955692152*G1_0_0_0_1 + 6.48181216087667*G1_0_0_1_0 + 6.48181216087668*G1_0_0_1_1 - 9.42809041582064*G1_0_1_0_0 + 16.2045304021917*G1_0_1_0_1 + 9.13346259032622*G1_0_1_1_0 + 31.2305495024058*G1_0_1_1_1 - 2.35702260395516*G1_1_0_0_0 - 5.0086730334047*G1_1_0_0_1 + 2.06239477846076*G1_1_0_1_0 - 0.589255650988778*G1_1_0_1_1 - 2.35702260395517*G1_1_1_0_0 + 4.71404520791032*G1_1_1_0_1 + 4.7140452079103*G1_1_1_1_0 + 14.7313912747197*G1_1_1_1_1;
    A[147] = -8.33333333333333*G0_0_0_0_0 - 6.66666666666666*G0_0_0_0_1 + 3.33333333333334*G0_0_0_1_0 + 3.33333333333333*G0_0_0_1_1 - 11.6666666666667*G0_0_1_0_0 - 9.16666666666666*G0_0_1_0_1 + 0.83333333333332*G0_0_1_1_0 + 3.33333333333333*G0_0_1_1_1 - 1.66666666666666*G0_1_0_0_0 + 0.833333333333332*G0_1_0_0_1 - 9.16666666666666*G0_1_0_1_0 - 6.66666666666666*G0_1_0_1_1 - 1.66666666666667*G0_1_1_0_0 - 1.66666666666666*G0_1_1_0_1 - 11.6666666666667*G0_1_1_1_0 - 8.33333333333333*G0_1_1_1_1 + 8.33333333333333*G1_0_0_0_0 + 6.66666666666666*G1_0_0_0_1 - 3.33333333333334*G1_0_0_1_0 - 3.33333333333333*G1_0_0_1_1 + 11.6666666666667*G1_0_1_0_0 + 9.16666666666666*G1_0_1_0_1 - 0.83333333333332*G1_0_1_1_0 - 3.33333333333333*G1_0_1_1_1 + 1.66666666666666*G1_1_0_0_0 - 0.833333333333332*G1_1_0_0_1 + 9.16666666666666*G1_1_0_1_0 + 6.66666666666666*G1_1_0_1_1 + 1.66666666666667*G1_1_1_0_0 + 1.66666666666666*G1_1_1_0_1 + 11.6666666666667*G1_1_1_1_0 + 8.33333333333333*G1_1_1_1_1;
    A[148] = -9.18558653543693*G0_0_0_0_0 - 6.12372435695796*G0_0_0_0_1 - 6.12372435695795*G0_0_0_1_0 - 9.18558653543692*G0_0_1_0_0 - 7.65465544619745*G0_0_1_0_1 - 1.53093108923949*G0_0_1_1_0 + 9.18558653543692*G0_1_0_0_0 + 10.7165176246764*G0_1_0_0_1 - 7.65465544619742*G0_1_0_1_0 - 6.12372435695793*G0_1_0_1_1 + 9.18558653543693*G0_1_1_0_0 + 9.18558653543693*G0_1_1_0_1 - 3.06186217847895*G0_1_1_1_0 - 9.18558653543689*G0_1_1_1_1 + 9.18558653543693*G1_0_0_0_0 + 6.12372435695796*G1_0_0_0_1 + 6.12372435695795*G1_0_0_1_0 + 9.18558653543692*G1_0_1_0_0 + 7.65465544619745*G1_0_1_0_1 + 1.53093108923949*G1_0_1_1_0 - 9.18558653543692*G1_1_0_0_0 - 10.7165176246764*G1_1_0_0_1 + 7.65465544619742*G1_1_0_1_0 + 6.12372435695793*G1_1_0_1_1 - 9.18558653543693*G1_1_1_0_0 - 9.18558653543693*G1_1_1_0_1 + 3.06186217847895*G1_1_1_1_0 + 9.18558653543689*G1_1_1_1_1;
    A[149] = -14.7313912747197*G0_0_0_0_0 - 11.7851130197758*G0_0_0_0_1 - 4.71404520791031*G0_0_0_1_0 - 1.17851130197759*G0_0_0_1_1 - 20.6239477846076*G0_0_1_0_0 - 16.2045304021917*G0_0_1_0_1 - 5.59792868439351*G0_0_1_1_0 + 20.0346921336188*G0_0_1_1_1 - 2.94627825494394*G0_1_0_0_0 + 1.47313912747197*G0_1_0_0_1 - 2.06239477846076*G0_1_0_1_0 + 2.35702260395515*G0_1_0_1_1 - 2.94627825494395*G0_1_1_0_0 - 2.94627825494394*G0_1_1_0_1 + 4.12478955692151*G0_1_1_1_0 + 13.5528799727421*G0_1_1_1_1 + 14.7313912747197*G1_0_0_0_0 + 11.7851130197758*G1_0_0_0_1 + 4.71404520791031*G1_0_0_1_0 + 1.17851130197759*G1_0_0_1_1 + 20.6239477846076*G1_0_1_0_0 + 16.2045304021917*G1_0_1_0_1 + 5.59792868439351*G1_0_1_1_0 - 20.0346921336188*G1_0_1_1_1 + 2.94627825494394*G1_1_0_0_0 - 1.47313912747197*G1_1_0_0_1 + 2.06239477846076*G1_1_0_1_0 - 2.35702260395515*G1_1_0_1_1 + 2.94627825494395*G1_1_1_0_0 + 2.94627825494394*G1_1_1_0_1 - 4.12478955692151*G1_1_1_1_0 - 13.5528799727421*G1_1_1_1_1;
    A[150] = 5.48482755730144*G0_0_0_0_0 + 0.0721687836487065*G0_0_0_0_1 + 0.360843918243508*G0_0_0_1_0 + 0.360843918243511*G0_0_0_1_1 + 0.360843918243512*G0_0_1_0_0 - 0.866025403784442*G0_0_1_0_1 + 5.77350269189625*G0_0_1_1_0 + 2.52590742770461*G0_0_1_1_1 - 5.26832120635534*G0_1_0_0_0 - 4.3301270189222*G0_1_0_0_1 + 9.237604307034*G0_1_0_1_0 + 3.82494553338126*G0_1_0_1_1 - 5.26832120635535*G0_1_1_0_0 - 5.26832120635534*G0_1_1_0_1 + 14.6502630806867*G0_1_1_1_0 + 5.48482755730143*G0_1_1_1_1 - 5.48482755730144*G1_0_0_0_0 - 0.0721687836487065*G1_0_0_0_1 - 0.360843918243508*G1_0_0_1_0 - 0.360843918243511*G1_0_0_1_1 - 0.360843918243512*G1_0_1_0_0 + 0.866025403784442*G1_0_1_0_1 - 5.77350269189625*G1_0_1_1_0 - 2.52590742770461*G1_0_1_1_1 + 5.26832120635534*G1_1_0_0_0 + 4.3301270189222*G1_1_0_0_1 - 9.237604307034*G1_1_0_1_0 - 3.82494553338126*G1_1_0_1_1 + 5.26832120635535*G1_1_1_0_0 + 5.26832120635534*G1_1_1_0_1 - 14.6502630806867*G1_1_1_1_0 - 5.48482755730143*G1_1_1_1_1;
    A[151] = -4.4744645862196*G0_0_0_0_0 - 1.58771324027147*G0_0_0_0_1 + 0.721687836487033*G0_0_0_1_0 + 0.721687836487028*G0_0_0_1_1 - 0.72168783648703*G0_0_1_0_0 + 1.01036297108185*G0_0_1_0_1 - 3.60843918243516*G0_0_1_1_0 + 5.05181485540922*G0_0_1_1_1 + 1.87638837486629*G0_1_0_0_0 - 0.721687836487029*G0_1_0_0_1 - 1.87638837486628*G0_1_0_1_0 + 2.45373864405592*G0_1_0_1_1 + 1.87638837486629*G0_1_1_0_0 + 1.87638837486629*G0_1_1_0_1 - 6.20651539378846*G0_1_1_1_0 + 7.07254079757292*G0_1_1_1_1 + 4.4744645862196*G1_0_0_0_0 + 1.58771324027147*G1_0_0_0_1 - 0.721687836487033*G1_0_0_1_0 - 0.721687836487028*G1_0_0_1_1 + 0.72168783648703*G1_0_1_0_0 - 1.01036297108185*G1_0_1_0_1 + 3.60843918243516*G1_0_1_1_0 - 5.05181485540922*G1_0_1_1_1 - 1.87638837486629*G1_1_0_0_0 + 0.721687836487029*G1_1_0_0_1 + 1.87638837486628*G1_1_0_1_0 - 2.45373864405592*G1_1_0_1_1 - 1.87638837486629*G1_1_1_0_0 - 1.87638837486629*G1_1_1_0_1 + 6.20651539378846*G1_1_1_1_0 - 7.07254079757292*G1_1_1_1_1;
    A[152] = -0.28867513459481*G0_0_0_0_0 + 2.2372322931098*G0_0_0_0_1 - 0.360843918243518*G0_0_0_1_0 - 0.360843918243515*G0_0_0_1_1 - 0.360843918243519*G0_0_1_0_0 + 2.02072594216368*G0_0_1_0_1 - 2.5259074277046*G0_0_1_1_1 - 1.65988202392017*G0_1_0_0_0 - 1.44337567297406*G0_1_0_0_1 + 3.46410161513775*G0_1_0_1_0 + 3.10325769689423*G0_1_0_1_1 - 1.65988202392018*G0_1_1_0_0 - 1.65988202392018*G0_1_1_0_1 + 3.82494553338127*G0_1_1_1_0 - 0.288675134594815*G0_1_1_1_1 + 0.28867513459481*G1_0_0_0_0 - 2.2372322931098*G1_0_0_0_1 + 0.360843918243518*G1_0_0_1_0 + 0.360843918243515*G1_0_0_1_1 + 0.360843918243519*G1_0_1_0_0 - 2.02072594216368*G1_0_1_0_1 + 2.5259074277046*G1_0_1_1_1 + 1.65988202392017*G1_1_0_0_0 + 1.44337567297406*G1_1_0_0_1 - 3.46410161513775*G1_1_0_1_0 - 3.10325769689423*G1_1_0_1_1 + 1.65988202392018*G1_1_1_0_0 + 1.65988202392018*G1_1_1_0_1 - 3.82494553338127*G1_1_1_1_0 + 0.288675134594815*G1_1_1_1_1;
    A[153] = -2.95892012959683*G0_0_0_0_0 - 0.433012701892224*G0_0_0_0_1 - 5.91784025919366*G0_0_0_1_0 - 0.433012701892221*G0_0_0_1_1 + 0.360843918243515*G0_0_1_0_0 - 1.1186161465549*G0_0_1_0_1 + 9.12935113156094*G0_0_1_1_0 + 5.48482755730144*G0_0_1_1_1 + 5.99000904284236*G0_1_0_0_0 + 6.67561248750504*G0_1_0_0_1 + 1.33512249750101*G0_1_0_1_0 + 2.02072594216369*G0_1_0_1_1 + 5.99000904284237*G0_1_1_0_0 + 5.99000904284237*G0_1_1_0_1 + 5.99000904284237*G0_1_1_1_0 + 4.4022958025709*G0_1_1_1_1 + 2.95892012959683*G1_0_0_0_0 + 0.433012701892224*G1_0_0_0_1 + 5.91784025919366*G1_0_0_1_0 + 0.433012701892221*G1_0_0_1_1 - 0.360843918243515*G1_0_1_0_0 + 1.1186161465549*G1_0_1_0_1 - 9.12935113156094*G1_0_1_1_0 - 5.48482755730144*G1_0_1_1_1 - 5.99000904284236*G1_1_0_0_0 - 6.67561248750504*G1_1_0_0_1 - 1.33512249750101*G1_1_0_1_0 - 2.02072594216369*G1_1_0_1_1 - 5.99000904284237*G1_1_1_0_0 - 5.99000904284237*G1_1_1_0_1 - 5.99000904284237*G1_1_1_1_0 - 4.4022958025709*G1_1_1_1_1;
    A[154] = -0.577350269189621*G0_0_0_0_0 + 2.30940107675851*G0_0_0_0_1 - 2.59807621135331*G0_0_0_1_0 + 2.30940107675851*G0_0_0_1_1 - 0.721687836487037*G0_0_1_0_0 + 2.95892012959682*G0_0_1_0_1 - 7.43338471581641*G0_0_1_1_0 - 8.08290376865474*G0_0_1_1_1 - 3.31976404784035*G0_1_0_0_0 - 3.96928310067868*G0_1_0_0_1 - 0.505181485540922*G0_1_0_1_0 - 1.15470053837925*G0_1_0_1_1 - 3.31976404784035*G0_1_1_0_0 - 3.31976404784036*G0_1_1_0_1 - 3.31976404784035*G0_1_1_1_0 - 5.19615242270663*G0_1_1_1_1 + 0.577350269189621*G1_0_0_0_0 - 2.30940107675851*G1_0_0_0_1 + 2.59807621135331*G1_0_0_1_0 - 2.30940107675851*G1_0_0_1_1 + 0.721687836487037*G1_0_1_0_0 - 2.95892012959682*G1_0_1_0_1 + 7.43338471581641*G1_0_1_1_0 + 8.08290376865474*G1_0_1_1_1 + 3.31976404784035*G1_1_0_0_0 + 3.96928310067868*G1_1_0_0_1 + 0.505181485540922*G1_1_0_1_0 + 1.15470053837925*G1_1_0_1_1 + 3.31976404784035*G1_1_1_0_0 + 3.31976404784036*G1_1_1_0_1 + 3.31976404784035*G1_1_1_1_0 + 5.19615242270663*G1_1_1_1_1;
    A[155] = -2.2372322931098*G0_0_0_0_0 - 1.87638837486629*G0_0_0_0_1 - 4.47446458621959*G0_0_0_1_0 - 1.87638837486629*G0_0_0_1_1 - 0.360843918243512*G0_0_1_0_0 - 0.0360843918243438*G0_0_1_0_1 + 0.108253175473052*G0_0_1_1_0 + 2.59807621135331*G0_0_1_1_1 + 0.938194187433146*G0_1_0_0_0 - 0.902109795608786*G0_1_0_0_1 + 0.974278579257503*G0_1_0_1_0 - 0.866025403784432*G0_1_0_1_1 + 0.938194187433148*G0_1_1_0_0 + 0.938194187433155*G0_1_1_0_1 + 0.93819418743315*G0_1_1_1_0 + 0.793856620135746*G0_1_1_1_1 + 2.2372322931098*G1_0_0_0_0 + 1.87638837486629*G1_0_0_0_1 + 4.47446458621959*G1_0_0_1_0 + 1.87638837486629*G1_0_0_1_1 + 0.360843918243512*G1_0_1_0_0 + 0.0360843918243438*G1_0_1_0_1 - 0.108253175473052*G1_0_1_1_0 - 2.59807621135331*G1_0_1_1_1 - 0.938194187433146*G1_1_0_0_0 + 0.902109795608786*G1_1_0_0_1 - 0.974278579257503*G1_1_0_1_0 + 0.866025403784432*G1_1_0_1_1 - 0.938194187433148*G1_1_1_0_0 - 0.938194187433155*G1_1_1_0_1 - 0.93819418743315*G1_1_1_1_0 - 0.793856620135746*G1_1_1_1_1;
    A[156] = 1.37120688932535*G0_0_0_0_0 + 0.36084391824351*G0_0_0_0_1 + 0.360843918243508*G0_0_0_1_0 + 0.360843918243513*G0_0_0_1_1 + 8.94892917243918*G0_0_1_0_0 + 12.3769463957526*G0_0_1_0_1 + 1.2629537138523*G0_0_1_1_0 + 2.52590742770461*G0_0_1_1_1 + 5.48482755730144*G0_1_0_0_0 + 4.58271776169264*G0_1_0_0_1 + 9.05718234791224*G0_1_0_1_0 + 8.15507255230345*G0_1_0_1_1 + 9.95929214352104*G0_1_1_0_0 + 9.67061700892622*G0_1_1_0_1 + 9.95929214352103*G0_1_1_1_0 + 8.73242282149308*G0_1_1_1_1 - 1.37120688932535*G1_0_0_0_0 - 0.36084391824351*G1_0_0_0_1 - 0.360843918243508*G1_0_0_1_0 - 0.360843918243513*G1_0_0_1_1 - 8.94892917243918*G1_0_1_0_0 - 12.3769463957526*G1_0_1_0_1 - 1.2629537138523*G1_0_1_1_0 - 2.52590742770461*G1_0_1_1_1 - 5.48482755730144*G1_1_0_0_0 - 4.58271776169264*G1_1_0_0_1 - 9.05718234791224*G1_1_0_1_0 - 8.15507255230345*G1_1_0_1_1 - 9.95929214352104*G1_1_1_0_0 - 9.67061700892622*G1_1_1_0_1 - 9.95929214352103*G1_1_1_1_0 - 8.73242282149308*G1_1_1_1_1;
    A[157] = 5.19615242270663*G0_0_0_0_0 - 0.721687836487029*G0_0_0_0_1 - 0.721687836487021*G0_0_0_1_0 - 0.721687836487024*G0_0_0_1_1 - 15.0111069989302*G0_0_1_0_0 - 9.59844822527751*G0_0_1_0_1 - 6.13434661013976*G0_0_1_1_0 - 5.05181485540922*G0_0_1_1_1 - 8.08290376865475*G0_1_0_0_0 - 2.67024499500201*G0_1_0_0_1 - 13.0625498404153*G0_1_0_1_0 - 7.64989106676253*G0_1_0_1_1 - 18.475208614068*G0_1_1_0_0 - 7.79422863405994*G0_1_1_0_1 - 18.475208614068*G0_1_1_1_0 - 10.9696551146029*G0_1_1_1_1 - 5.19615242270663*G1_0_0_0_0 + 0.721687836487029*G1_0_0_0_1 + 0.721687836487021*G1_0_0_1_0 + 0.721687836487024*G1_0_0_1_1 + 15.0111069989302*G1_0_1_0_0 + 9.59844822527751*G1_0_1_0_1 + 6.13434661013976*G1_0_1_1_0 + 5.05181485540922*G1_0_1_1_1 + 8.08290376865475*G1_1_0_0_0 + 2.67024499500201*G1_1_0_0_1 + 13.0625498404153*G1_1_0_1_0 + 7.64989106676253*G1_1_0_1_1 + 18.475208614068*G1_1_1_0_0 + 7.79422863405994*G1_1_1_0_1 + 18.475208614068*G1_1_1_1_0 + 10.9696551146029*G1_1_1_1_1;
    A[158] = -6.56735931203199*G0_0_0_0_0 - 0.360843918243513*G0_0_0_0_1 - 0.360843918243518*G0_0_0_1_0 - 0.360843918243517*G0_0_0_1_1 + 6.06217782649106*G0_0_1_0_0 - 3.13934208871859*G0_0_1_0_1 + 4.51054897804394*G0_0_1_1_0 - 2.52590742770461*G0_0_1_1_1 + 2.59807621135331*G0_1_0_0_0 - 2.27331668493416*G0_1_0_0_1 + 3.6445235742595*G0_1_0_1_0 - 1.22686932202796*G0_1_0_1_1 + 8.51591647054697*G0_1_1_0_0 - 6.20651539378848*G0_1_1_0_1 + 8.51591647054696*G0_1_1_1_0 - 3.53627039878647*G0_1_1_1_1 + 6.56735931203199*G1_0_0_0_0 + 0.360843918243513*G1_0_0_0_1 + 0.360843918243518*G1_0_0_1_0 + 0.360843918243517*G1_0_0_1_1 - 6.06217782649106*G1_0_1_0_0 + 3.13934208871859*G1_0_1_0_1 - 4.51054897804394*G1_0_1_1_0 + 2.52590742770461*G1_0_1_1_1 - 2.59807621135331*G1_1_0_0_0 + 2.27331668493416*G1_1_0_0_1 - 3.6445235742595*G1_1_0_1_0 + 1.22686932202796*G1_1_0_1_1 - 8.51591647054697*G1_1_1_0_0 + 6.20651539378848*G1_1_1_0_1 - 8.51591647054696*G1_1_1_1_0 + 3.53627039878647*G1_1_1_1_1;
    A[159] = 1.02062072615967*G0_0_0_0_0 + 2.04124145231932*G0_0_0_0_1 + 2.04124145231931*G0_0_0_1_0 + 2.0412414523193*G0_0_0_1_1 - 1.02062072615966*G0_0_1_0_0 + 3.5721725415588*G0_0_1_0_1 + 3.5721725415588*G0_0_1_1_0 + 14.2886901662352*G0_0_1_1_1 - 7.1443450831176*G0_1_0_0_0 - 8.67527617235707*G0_1_0_0_1 + 15.8196212554747*G0_1_0_1_0 + 14.2886901662352*G0_1_0_1_1 - 7.14434508311761*G0_1_1_0_0 - 1.02062072615966*G0_1_1_0_1 + 17.3505523447142*G0_1_1_1_0 + 25.5155181539914*G0_1_1_1_1 - 1.02062072615967*G1_0_0_0_0 - 2.04124145231932*G1_0_0_0_1 - 2.04124145231931*G1_0_0_1_0 - 2.0412414523193*G1_0_0_1_1 + 1.02062072615966*G1_0_1_0_0 - 3.5721725415588*G1_0_1_0_1 - 3.5721725415588*G1_0_1_1_0 - 14.2886901662352*G1_0_1_1_1 + 7.1443450831176*G1_1_0_0_0 + 8.67527617235707*G1_1_0_0_1 - 15.8196212554747*G1_1_0_1_0 - 14.2886901662352*G1_1_0_1_1 + 7.14434508311761*G1_1_1_0_0 + 1.02062072615966*G1_1_1_0_1 - 17.3505523447142*G1_1_1_1_0 - 25.5155181539914*G1_1_1_1_1;
    A[160] = 47.4999999999999*G0_0_0_0_0 + 14.375*G0_0_0_0_1 + 3.12499999999999*G0_0_0_1_0 + 3.12499999999996*G0_0_0_1_1 + 14.375*G0_0_1_0_0 + 33.1249999999999*G0_0_1_0_1 + 3.12499999999998*G0_0_1_1_0 + 21.875*G0_0_1_1_1 + 3.12499999999998*G0_1_0_0_0 + 3.12499999999998*G0_1_0_0_1 + 33.125*G0_1_0_1_0 + 33.125*G0_1_0_1_1 + 3.12499999999996*G0_1_1_0_0 + 21.875*G0_1_1_0_1 + 33.125*G0_1_1_1_0 + 47.4999999999999*G0_1_1_1_1 - 47.4999999999999*G1_0_0_0_0 - 14.375*G1_0_0_0_1 - 3.12499999999999*G1_0_0_1_0 - 3.12499999999996*G1_0_0_1_1 - 14.375*G1_0_1_0_0 - 33.1249999999999*G1_0_1_0_1 - 3.12499999999998*G1_0_1_1_0 - 21.875*G1_0_1_1_1 - 3.12499999999998*G1_1_0_0_0 - 3.12499999999998*G1_1_0_0_1 - 33.125*G1_1_0_1_0 - 33.125*G1_1_0_1_1 - 3.12499999999996*G1_1_1_0_0 - 21.875*G1_1_1_0_1 - 33.125*G1_1_1_1_0 - 47.4999999999999*G1_1_1_1_1;
    A[161] = -7.93856620135734*G0_0_0_0_0 + 26.3416060317767*G0_0_0_0_1 - 1.80421959121758*G0_0_0_1_0 - 1.80421959121758*G0_0_0_1_1 - 1.80421959121758*G0_0_1_0_0 + 14.4337567297406*G0_0_1_0_1 - 7.2168783648703*G0_0_1_1_0 - 12.629537138523*G0_0_1_1_1 + 0.360843918243533*G0_1_0_0_0 + 5.77350269189625*G0_1_0_0_1 + 1.44337567297405*G0_1_0_1_0 + 6.85603444662677*G0_1_0_1_1 + 0.360843918243528*G0_1_1_0_0 + 2.52590742770458*G0_1_1_0_1 - 3.96928310067866*G0_1_1_1_0 - 7.93856620135735*G0_1_1_1_1 + 7.93856620135734*G1_0_0_0_0 - 26.3416060317767*G1_0_0_0_1 + 1.80421959121758*G1_0_0_1_0 + 1.80421959121758*G1_0_0_1_1 + 1.80421959121758*G1_0_1_0_0 - 14.4337567297406*G1_0_1_0_1 + 7.2168783648703*G1_0_1_1_0 + 12.629537138523*G1_0_1_1_1 - 0.360843918243533*G1_1_0_0_0 - 5.77350269189625*G1_1_0_0_1 - 1.44337567297405*G1_1_0_1_0 - 6.85603444662677*G1_1_0_1_1 - 0.360843918243528*G1_1_1_0_0 - 2.52590742770458*G1_1_1_0_1 + 3.96928310067866*G1_1_1_1_0 + 7.93856620135735*G1_1_1_1_1;
    A[162] = 7.14434508311759*G0_0_0_0_0 - 1.02062072615967*G0_0_0_0_1 + 17.3505523447142*G0_0_0_1_0 - 1.02062072615965*G0_0_0_1_1 + 2.04124145231932*G0_0_1_0_0 - 5.61341399387811*G0_0_1_0_1 - 5.6134139938781*G0_0_1_1_0 - 7.14434508311759*G0_0_1_1_1 + 2.0412414523193*G0_1_0_0_0 + 6.63403472003776*G0_1_0_0_1 - 17.860862707794*G0_1_0_1_0 - 13.2680694400755*G0_1_0_1_1 + 2.04124145231932*G0_1_1_0_0 + 2.04124145231932*G0_1_1_0_1 - 22.4536559755125*G0_1_1_1_0 - 17.3505523447142*G0_1_1_1_1 - 7.14434508311759*G1_0_0_0_0 + 1.02062072615967*G1_0_0_0_1 - 17.3505523447142*G1_0_0_1_0 + 1.02062072615965*G1_0_0_1_1 - 2.04124145231932*G1_0_1_0_0 + 5.61341399387811*G1_0_1_0_1 + 5.6134139938781*G1_0_1_1_0 + 7.14434508311759*G1_0_1_1_1 - 2.0412414523193*G1_1_0_0_0 - 6.63403472003776*G1_1_0_0_1 + 17.860862707794*G1_1_0_1_0 + 13.2680694400755*G1_1_0_1_1 - 2.04124145231932*G1_1_1_0_0 - 2.04124145231932*G1_1_1_0_1 + 22.4536559755125*G1_1_1_1_0 + 17.3505523447142*G1_1_1_1_1;
    A[163] = -16.875*G0_0_0_0_0 + 1.87499999999999*G0_0_0_0_1 + 1.875*G0_0_0_1_0 + 13.125*G0_0_0_1_1 + 0.937500000000009*G0_0_1_0_1 + 12.1875*G0_0_1_1_0 - 5.62499999999996*G0_0_1_1_1 + 22.5*G0_1_0_0_0 + 23.4375*G0_1_0_0_1 - 10.3125*G0_1_0_1_0 - 9.37499999999997*G0_1_0_1_1 + 22.5*G0_1_1_0_0 + 22.5*G0_1_1_0_1 - 7.49999999999996*G0_1_1_1_0 - 16.8749999999999*G0_1_1_1_1 + 16.875*G1_0_0_0_0 - 1.87499999999999*G1_0_0_0_1 - 1.875*G1_0_0_1_0 - 13.125*G1_0_0_1_1 - 0.937500000000009*G1_0_1_0_1 - 12.1875*G1_0_1_1_0 + 5.62499999999996*G1_0_1_1_1 - 22.5*G1_1_0_0_0 - 23.4375*G1_1_0_0_1 + 10.3125*G1_1_0_1_0 + 9.37499999999997*G1_1_0_1_1 - 22.5*G1_1_1_0_0 - 22.5*G1_1_1_0_1 + 7.49999999999996*G1_1_1_1_0 + 16.8749999999999*G1_1_1_1_1;
    A[164] = 12.629537138523*G0_0_0_0_0 - 1.80421959121759*G0_0_0_0_1 + 11.186161465549*G0_0_0_1_0 + 26.3416060317766*G0_0_0_1_1 + 3.60843918243516*G0_0_1_0_0 - 9.92320775169668*G0_0_1_0_1 + 18.2226178712975*G0_0_1_1_0 + 15.5162884844712*G0_0_1_1_1 + 3.60843918243513*G0_1_0_0_0 + 11.7274273429142*G0_1_0_0_1 - 3.42801722331341*G0_1_0_1_0 + 4.6909709371657*G0_1_0_1_1 + 3.60843918243516*G0_1_1_0_0 + 3.60843918243516*G0_1_1_0_1 + 7.93856620135733*G0_1_1_1_0 + 12.629537138523*G0_1_1_1_1 - 12.629537138523*G1_0_0_0_0 + 1.80421959121759*G1_0_0_0_1 - 11.186161465549*G1_0_0_1_0 - 26.3416060317766*G1_0_0_1_1 - 3.60843918243516*G1_0_1_0_0 + 9.92320775169668*G1_0_1_0_1 - 18.2226178712975*G1_0_1_1_0 - 15.5162884844712*G1_0_1_1_1 - 3.60843918243513*G1_1_0_0_0 - 11.7274273429142*G1_1_0_0_1 + 3.42801722331341*G1_1_0_1_0 - 4.6909709371657*G1_1_0_1_1 - 3.60843918243516*G1_1_1_0_0 - 3.60843918243516*G1_1_1_0_1 - 7.93856620135733*G1_1_1_1_0 - 12.629537138523*G1_1_1_1_1;
    A[165] = -3.41666666666667*G0_0_0_0_0 + 1.20833333333333*G0_0_0_0_1 + 0.0416666666666715*G0_0_0_1_0 + 0.0416666666666667*G0_0_0_1_1 + 0.791666666666671*G0_0_1_0_0 + 1.875*G0_0_1_0_1 - 2.45833333333333*G0_0_1_1_0 + 0.291666666666668*G0_0_1_1_1 + 0.0416666666666665*G0_1_0_0_0 - 0.625*G0_1_0_0_1 - 2.95833333333332*G0_1_0_1_0 - 0.45833333333333*G0_1_0_1_1 + 0.0416666666666681*G0_1_1_0_0 + 0.0416666666666663*G0_1_1_0_1 - 5.45833333333332*G0_1_1_1_0 - 0.916666666666659*G0_1_1_1_1 + 3.41666666666667*G1_0_0_0_0 - 1.20833333333333*G1_0_0_0_1 - 0.0416666666666715*G1_0_0_1_0 - 0.0416666666666667*G1_0_0_1_1 - 0.791666666666671*G1_0_1_0_0 - 1.875*G1_0_1_0_1 + 2.45833333333333*G1_0_1_1_0 - 0.291666666666668*G1_0_1_1_1 - 0.0416666666666665*G1_1_0_0_0 + 0.625*G1_1_0_0_1 + 2.95833333333332*G1_1_0_1_0 + 0.45833333333333*G1_1_0_1_1 - 0.0416666666666681*G1_1_1_0_0 - 0.0416666666666663*G1_1_1_0_1 + 5.45833333333332*G1_1_1_1_0 + 0.916666666666659*G1_1_1_1_1;
    A[166] = 5.58333333333334*G0_0_0_0_0 - 4.08333333333333*G0_0_0_0_1 + 1.58333333333333*G0_0_0_1_0 + 1.58333333333333*G0_0_0_1_1 + 0.916666666666659*G0_0_1_0_0 - 8.33333333333332*G0_0_1_0_1 + 5.33333333333332*G0_0_1_1_0 - 3.91666666666667*G0_0_1_1_1 - 2.58333333333333*G0_1_0_0_0 + 1.66666666666666*G0_1_0_0_1 + 1.33333333333333*G0_1_0_1_0 - 2.41666666666666*G0_1_0_1_1 - 2.58333333333333*G0_1_1_0_0 - 2.58333333333333*G0_1_1_0_1 + 5.08333333333332*G0_1_1_1_0 - 8.58333333333332*G0_1_1_1_1 - 5.58333333333334*G1_0_0_0_0 + 4.08333333333333*G1_0_0_0_1 - 1.58333333333333*G1_0_0_1_0 - 1.58333333333333*G1_0_0_1_1 - 0.916666666666659*G1_0_1_0_0 + 8.33333333333332*G1_0_1_0_1 - 5.33333333333332*G1_0_1_1_0 + 3.91666666666667*G1_0_1_1_1 + 2.58333333333333*G1_1_0_0_0 - 1.66666666666666*G1_1_0_0_1 - 1.33333333333333*G1_1_0_1_0 + 2.41666666666666*G1_1_0_1_1 + 2.58333333333333*G1_1_1_0_0 + 2.58333333333333*G1_1_1_0_1 - 5.08333333333332*G1_1_1_1_0 + 8.58333333333332*G1_1_1_1_1;
    A[167] = 2.41666666666667*G0_0_0_0_0 + 7.45833333333333*G0_0_0_0_1 - 2.04166666666666*G0_0_0_1_0 - 2.04166666666666*G0_0_0_1_1 + 1.20833333333333*G0_0_1_0_0 + 11.4583333333333*G0_0_1_0_1 - 2.87499999999999*G0_0_1_1_0 + 5.70833333333333*G0_0_1_1_1 - 2.04166666666666*G0_1_0_0_0 - 6.04166666666665*G0_1_0_0_1 + 1.62499999999999*G0_1_0_1_0 + 2.45833333333332*G0_1_0_1_1 - 2.04166666666667*G0_1_1_0_0 - 2.04166666666666*G0_1_1_0_1 + 0.791666666666662*G0_1_1_1_0 + 9.91666666666664*G0_1_1_1_1 - 2.41666666666667*G1_0_0_0_0 - 7.45833333333333*G1_0_0_0_1 + 2.04166666666666*G1_0_0_1_0 + 2.04166666666666*G1_0_0_1_1 - 1.20833333333333*G1_0_1_0_0 - 11.4583333333333*G1_0_1_0_1 + 2.87499999999999*G1_0_1_1_0 - 5.70833333333333*G1_0_1_1_1 + 2.04166666666666*G1_1_0_0_0 + 6.04166666666665*G1_1_0_0_1 - 1.62499999999999*G1_1_0_1_0 - 2.45833333333332*G1_1_0_1_1 + 2.04166666666667*G1_1_1_0_0 + 2.04166666666666*G1_1_1_0_1 - 0.791666666666662*G1_1_1_1_0 - 9.91666666666664*G1_1_1_1_1;
    A[168] = -1.79166666666667*G0_0_0_0_0 - 3.5*G0_0_0_0_1 - 1.33333333333333*G0_0_0_1_0 - 3.5*G0_0_0_1_1 - 2.45833333333333*G0_0_1_0_0 - 3.85416666666666*G0_0_1_0_1 + 2.22916666666667*G0_0_1_1_0 + 1.08333333333334*G0_0_1_1_1 + 3.29166666666666*G0_1_0_0_0 + 3.64583333333333*G0_1_0_0_1 + 2.72916666666666*G0_1_0_1_0 + 3.08333333333333*G0_1_0_1_1 + 3.29166666666666*G0_1_1_0_0 + 3.29166666666666*G0_1_1_0_1 + 3.29166666666667*G0_1_1_1_0 + 3.45833333333334*G0_1_1_1_1 + 1.79166666666667*G1_0_0_0_0 + 3.5*G1_0_0_0_1 + 1.33333333333333*G1_0_0_1_0 + 3.5*G1_0_0_1_1 + 2.45833333333333*G1_0_1_0_0 + 3.85416666666666*G1_0_1_0_1 - 2.22916666666667*G1_0_1_1_0 - 1.08333333333334*G1_0_1_1_1 - 3.29166666666666*G1_1_0_0_0 - 3.64583333333333*G1_1_0_0_1 - 2.72916666666666*G1_1_0_1_0 - 3.08333333333333*G1_1_0_1_1 - 3.29166666666666*G1_1_1_0_0 - 3.29166666666666*G1_1_1_0_1 - 3.29166666666667*G1_1_1_1_0 - 3.45833333333334*G1_1_1_1_1;
    A[169] = 4.83333333333334*G0_0_0_0_0 + 8.66666666666667*G0_0_0_0_1 + 3.5*G0_0_0_1_0 + 8.66666666666667*G0_0_0_1_1 + 2.41666666666666*G0_0_1_0_0 + 12.2916666666666*G0_0_1_0_1 - 5.70833333333333*G0_0_1_1_0 - 1.33333333333335*G0_0_1_1_1 - 4.08333333333333*G0_1_0_0_0 - 7.70833333333332*G0_1_0_0_1 - 1.70833333333334*G0_1_0_1_0 - 5.33333333333333*G0_1_0_1_1 - 4.08333333333333*G0_1_1_0_0 - 4.08333333333333*G0_1_1_0_1 - 4.08333333333334*G0_1_1_1_0 - 9.00000000000001*G0_1_1_1_1 - 4.83333333333334*G1_0_0_0_0 - 8.66666666666667*G1_0_0_0_1 - 3.5*G1_0_0_1_0 - 8.66666666666667*G1_0_0_1_1 - 2.41666666666666*G1_0_1_0_0 - 12.2916666666666*G1_0_1_0_1 + 5.70833333333333*G1_0_1_1_0 + 1.33333333333335*G1_0_1_1_1 + 4.08333333333333*G1_1_0_0_0 + 7.70833333333332*G1_1_0_0_1 + 1.70833333333334*G1_1_0_1_0 + 5.33333333333333*G1_1_0_1_1 + 4.08333333333333*G1_1_1_0_0 + 4.08333333333333*G1_1_1_0_1 + 4.08333333333334*G1_1_1_1_0 + 9.00000000000001*G1_1_1_1_1;
    A[170] = 2.79166666666667*G0_0_0_0_0 - 5.16666666666667*G0_0_0_0_1 + 5.33333333333333*G0_0_0_1_0 - 5.16666666666667*G0_0_0_1_1 + 0.458333333333332*G0_0_1_0_0 - 9.47916666666665*G0_0_1_0_1 + 2.43749999999999*G0_0_1_1_0 + 0.250000000000002*G0_0_1_1_1 - 1.29166666666666*G0_1_0_0_0 + 3.02083333333333*G0_1_0_0_1 - 2.06249999999999*G0_1_0_1_0 + 2.25*G0_1_0_1_1 - 1.29166666666666*G0_1_1_0_0 - 1.29166666666666*G0_1_1_0_1 - 1.29166666666666*G0_1_1_1_0 + 5.54166666666666*G0_1_1_1_1 - 2.79166666666667*G1_0_0_0_0 + 5.16666666666667*G1_0_0_0_1 - 5.33333333333333*G1_0_0_1_0 + 5.16666666666667*G1_0_0_1_1 - 0.458333333333332*G1_0_1_0_0 + 9.47916666666665*G1_0_1_0_1 - 2.43749999999999*G1_0_1_1_0 - 0.250000000000002*G1_0_1_1_1 + 1.29166666666666*G1_1_0_0_0 - 3.02083333333333*G1_1_0_0_1 + 2.06249999999999*G1_1_0_1_0 - 2.25*G1_1_0_1_1 + 1.29166666666666*G1_1_1_0_0 + 1.29166666666666*G1_1_1_0_1 + 1.29166666666666*G1_1_1_1_0 - 5.54166666666666*G1_1_1_1_1;
    A[171] = -0.541666666666658*G0_0_0_0_0 - 1.20833333333333*G0_0_0_0_1 - 1.20833333333333*G0_0_0_1_0 - 1.20833333333333*G0_0_0_1_1 + 6.08333333333333*G0_0_1_0_0 + 13.9791666666667*G0_0_1_0_1 - 1.10416666666666*G0_0_1_1_0 + 4.04166666666666*G0_0_1_1_1 - 0.916666666666665*G0_1_0_0_0 - 1.02083333333332*G0_1_0_0_1 + 0.89583333333333*G0_1_0_1_0 + 0.791666666666665*G0_1_0_1_1 + 1*G0_1_1_0_0 + 7.16666666666667*G0_1_1_0_1 + 0.999999999999995*G0_1_1_1_0 + 4.70833333333331*G0_1_1_1_1 + 0.541666666666658*G1_0_0_0_0 + 1.20833333333333*G1_0_0_0_1 + 1.20833333333333*G1_0_0_1_0 + 1.20833333333333*G1_0_0_1_1 - 6.08333333333333*G1_0_1_0_0 - 13.9791666666667*G1_0_1_0_1 + 1.10416666666666*G1_0_1_1_0 - 4.04166666666666*G1_0_1_1_1 + 0.916666666666665*G1_1_0_0_0 + 1.02083333333332*G1_1_0_0_1 - 0.89583333333333*G1_1_0_1_0 - 0.791666666666665*G1_1_0_1_1 - 1*G1_1_1_0_0 - 7.16666666666667*G1_1_1_0_1 - 0.999999999999995*G1_1_1_1_0 - 4.70833333333331*G1_1_1_1_1;
    A[172] = -1.00000000000001*G0_0_0_0_0 - 0.0833333333333308*G0_0_0_0_1 - 0.0833333333333384*G0_0_0_1_0 - 0.0833333333333327*G0_0_0_1_1 - 1.33333333333334*G0_0_1_0_0 - 4.20833333333333*G0_0_1_0_1 + 1.79166666666666*G0_0_1_1_0 - 0.583333333333333*G0_0_1_1_1 + 2.66666666666666*G0_1_0_0_0 + 0.79166666666666*G0_1_0_0_1 + 2.79166666666666*G0_1_0_1_0 + 0.916666666666659*G0_1_0_1_1 + 4.66666666666665*G0_1_1_0_0 + 1.49999999999999*G0_1_1_0_1 + 4.66666666666665*G0_1_1_1_0 + 1.83333333333332*G0_1_1_1_1 + 1.00000000000001*G1_0_0_0_0 + 0.0833333333333308*G1_0_0_0_1 + 0.0833333333333384*G1_0_0_1_0 + 0.0833333333333327*G1_0_0_1_1 + 1.33333333333334*G1_0_1_0_0 + 4.20833333333333*G1_0_1_0_1 - 1.79166666666666*G1_0_1_1_0 + 0.583333333333333*G1_0_1_1_1 - 2.66666666666666*G1_1_0_0_0 - 0.79166666666666*G1_1_0_0_1 - 2.79166666666666*G1_1_0_1_0 - 0.916666666666659*G1_1_0_1_1 - 4.66666666666665*G1_1_1_0_0 - 1.49999999999999*G1_1_1_0_1 - 4.66666666666665*G1_1_1_1_0 - 1.83333333333332*G1_1_1_1_1;
    A[173] = 1.54166666666667*G0_0_0_0_0 - 0.791666666666671*G0_0_0_0_1 - 0.791666666666666*G0_0_0_1_0 - 0.79166666666667*G0_0_0_1_1 - 4.75*G0_0_1_0_0 + 6.6875*G0_0_1_0_1 - 4.22916666666666*G0_0_1_1_0 + 1.95833333333334*G0_0_1_1_1 - 1.75*G0_1_0_0_0 + 1.6875*G0_1_0_0_1 - 2.22916666666666*G0_1_0_1_0 + 1.20833333333333*G0_1_0_1_1 - 5.66666666666665*G0_1_1_0_0 + 8.83333333333333*G0_1_1_0_1 - 5.66666666666665*G0_1_1_1_0 + 4.29166666666667*G0_1_1_1_1 - 1.54166666666667*G1_0_0_0_0 + 0.791666666666671*G1_0_0_0_1 + 0.791666666666666*G1_0_0_1_0 + 0.79166666666667*G1_0_0_1_1 + 4.75*G1_0_1_0_0 - 6.6875*G1_0_1_0_1 + 4.22916666666666*G1_0_1_1_0 - 1.95833333333334*G1_0_1_1_1 + 1.75*G1_1_0_0_0 - 1.6875*G1_1_0_0_1 + 2.22916666666666*G1_1_0_1_0 - 1.20833333333333*G1_1_0_1_1 + 5.66666666666665*G1_1_1_0_0 - 8.83333333333333*G1_1_1_0_1 + 5.66666666666665*G1_1_1_1_0 - 4.29166666666667*G1_1_1_1_1;
    A[174] = 6.48181216087668*G0_0_0_0_0 + 9.42809041582064*G0_0_0_0_1 + 2.35702260395516*G0_0_0_1_0 + 2.35702260395517*G0_0_0_1_1 + 4.12478955692152*G0_0_1_0_0 - 16.2045304021917*G0_0_1_0_1 + 5.0086730334047*G0_0_1_1_0 - 4.71404520791032*G0_0_1_1_1 - 6.48181216087667*G0_1_0_0_0 - 9.13346259032622*G0_1_0_0_1 - 2.06239477846076*G0_1_0_1_0 - 4.7140452079103*G0_1_0_1_1 - 6.48181216087668*G0_1_1_0_0 - 31.2305495024058*G0_1_1_0_1 + 0.589255650988778*G0_1_1_1_0 - 14.7313912747197*G0_1_1_1_1 - 6.48181216087668*G1_0_0_0_0 - 9.42809041582064*G1_0_0_0_1 - 2.35702260395516*G1_0_0_1_0 - 2.35702260395517*G1_0_0_1_1 - 4.12478955692152*G1_0_1_0_0 + 16.2045304021917*G1_0_1_0_1 - 5.0086730334047*G1_0_1_1_0 + 4.71404520791032*G1_0_1_1_1 + 6.48181216087667*G1_1_0_0_0 + 9.13346259032622*G1_1_0_0_1 + 2.06239477846076*G1_1_0_1_0 + 4.7140452079103*G1_1_0_1_1 + 6.48181216087668*G1_1_1_0_0 + 31.2305495024058*G1_1_1_0_1 - 0.589255650988778*G1_1_1_1_0 + 14.7313912747197*G1_1_1_1_1;
    A[175] = -7.93856620135734*G0_0_0_0_0 - 1.80421959121758*G0_0_0_0_1 + 0.360843918243533*G0_0_0_1_0 + 0.360843918243527*G0_0_0_1_1 + 26.3416060317767*G0_0_1_0_0 + 14.4337567297406*G0_0_1_0_1 + 5.77350269189625*G0_0_1_1_0 + 2.52590742770458*G0_0_1_1_1 - 1.80421959121758*G0_1_0_0_0 - 7.2168783648703*G0_1_0_0_1 + 1.44337567297405*G0_1_0_1_0 - 3.96928310067866*G0_1_0_1_1 - 1.80421959121758*G0_1_1_0_0 - 12.629537138523*G0_1_1_0_1 + 6.85603444662678*G0_1_1_1_0 - 7.93856620135735*G0_1_1_1_1 + 7.93856620135734*G1_0_0_0_0 + 1.80421959121758*G1_0_0_0_1 - 0.360843918243533*G1_0_0_1_0 - 0.360843918243527*G1_0_0_1_1 - 26.3416060317767*G1_0_1_0_0 - 14.4337567297406*G1_0_1_0_1 - 5.77350269189625*G1_0_1_1_0 - 2.52590742770458*G1_0_1_1_1 + 1.80421959121758*G1_1_0_0_0 + 7.2168783648703*G1_1_0_0_1 - 1.44337567297405*G1_1_0_1_0 + 3.96928310067866*G1_1_0_1_1 + 1.80421959121758*G1_1_1_0_0 + 12.629537138523*G1_1_1_0_1 - 6.85603444662678*G1_1_1_1_0 + 7.93856620135735*G1_1_1_1_1;
    A[176] = 13.3333333333333*G0_0_0_0_0 + 3.54166666666665*G0_0_0_0_1 - 7.70833333333333*G0_0_0_1_0 - 7.70833333333333*G0_0_0_1_1 + 3.54166666666665*G0_0_1_0_0 + 54.7916666666666*G0_0_1_0_1 - 7.7083333333333*G0_0_1_1_0 + 21.0416666666666*G0_0_1_1_1 - 7.70833333333333*G0_1_0_0_0 - 7.70833333333331*G0_1_0_0_1 + 9.79166666666663*G0_1_0_1_0 + 9.79166666666664*G0_1_0_1_1 - 7.70833333333333*G0_1_1_0_0 + 21.0416666666666*G0_1_1_0_1 + 9.79166666666664*G0_1_1_1_0 + 38.3333333333332*G0_1_1_1_1 - 13.3333333333333*G1_0_0_0_0 - 3.54166666666665*G1_0_0_0_1 + 7.70833333333333*G1_0_0_1_0 + 7.70833333333333*G1_0_0_1_1 - 3.54166666666665*G1_0_1_0_0 - 54.7916666666666*G1_0_1_0_1 + 7.7083333333333*G1_0_1_1_0 - 21.0416666666666*G1_0_1_1_1 + 7.70833333333333*G1_1_0_0_0 + 7.70833333333331*G1_1_0_0_1 - 9.79166666666663*G1_1_0_1_0 - 9.79166666666664*G1_1_0_1_1 + 7.70833333333333*G1_1_1_0_0 - 21.0416666666666*G1_1_1_0_1 - 9.79166666666664*G1_1_1_1_0 - 38.3333333333332*G1_1_1_1_1;
    A[177] = -14.7313912747198*G0_0_0_0_0 - 6.48181216087668*G0_0_0_0_1 - 10.0173460668094*G0_0_0_1_0 + 0.589255650988786*G0_0_0_1_1 - 4.7140452079103*G0_0_1_0_0 - 5.59792868439349*G0_0_1_0_1 + 1.47313912747199*G0_0_1_1_0 - 2.94627825494394*G0_0_1_1_1 + 9.42809041582062*G0_1_0_0_0 + 8.54420693933743*G0_1_0_0_1 + 1.47313912747198*G0_1_0_1_0 + 0.589255650988785*G0_1_0_1_1 + 9.42809041582063*G0_1_1_0_0 + 9.42809041582061*G0_1_1_0_1 + 2.35702260395517*G0_1_1_1_0 - 0.589255650988783*G0_1_1_1_1 + 14.7313912747198*G1_0_0_0_0 + 6.48181216087668*G1_0_0_0_1 + 10.0173460668094*G1_0_0_1_0 - 0.589255650988786*G1_0_0_1_1 + 4.7140452079103*G1_0_1_0_0 + 5.59792868439349*G1_0_1_0_1 - 1.47313912747199*G1_0_1_1_0 + 2.94627825494394*G1_0_1_1_1 - 9.42809041582062*G1_1_0_0_0 - 8.54420693933743*G1_1_0_0_1 - 1.47313912747198*G1_1_0_1_0 - 0.589255650988785*G1_1_0_1_1 - 9.42809041582063*G1_1_1_0_0 - 9.42809041582061*G1_1_1_0_1 - 2.35702260395517*G1_1_1_1_0 + 0.589255650988783*G1_1_1_1_1;
    A[178] = 3.24759526419166*G0_0_0_0_0 - 1.08253175473056*G0_0_0_0_1 - 1.08253175473055*G0_0_0_1_0 - 3.24759526419166*G0_0_0_1_1 - 6.4951905283833*G0_0_1_0_0 + 2.70632938682637*G0_0_1_0_1 + 0.541265877365284*G0_0_1_1_0 + 3.24759526419166*G0_0_1_1_1 + 6.49519052838327*G0_1_0_0_0 + 2.70632938682638*G0_1_0_0_1 + 9.20151991520964*G0_1_0_1_0 + 5.41265877365273*G0_1_0_1_1 + 6.49519052838327*G0_1_1_0_0 + 6.49519052838328*G0_1_1_0_1 - 2.16506350946108*G0_1_1_1_0 + 3.24759526419164*G0_1_1_1_1 - 3.24759526419166*G1_0_0_0_0 + 1.08253175473056*G1_0_0_0_1 + 1.08253175473055*G1_0_0_1_0 + 3.24759526419166*G1_0_0_1_1 + 6.4951905283833*G1_0_1_0_0 - 2.70632938682637*G1_0_1_0_1 - 0.541265877365284*G1_0_1_1_0 - 3.24759526419166*G1_0_1_1_1 - 6.49519052838327*G1_1_0_0_0 - 2.70632938682638*G1_1_0_0_1 - 9.20151991520964*G1_1_0_1_0 - 5.41265877365273*G1_1_0_1_1 - 6.49519052838327*G1_1_1_0_0 - 6.49519052838328*G1_1_1_0_1 + 2.16506350946108*G1_1_1_1_0 - 3.24759526419164*G1_1_1_1_1;
    A[179] = -26.0416666666667*G0_0_0_0_0 - 11.4583333333333*G0_0_0_0_1 - 13.9583333333333*G0_0_0_1_0 - 0.20833333333334*G0_0_0_1_1 - 8.33333333333329*G0_0_1_0_0 - 9.8958333333333*G0_0_1_0_1 + 1.35416666666668*G0_0_1_1_0 - 6.4583333333333*G0_0_1_1_1 + 16.6666666666666*G0_1_0_0_0 + 15.1041666666666*G0_1_0_0_1 + 1.35416666666668*G0_1_0_1_0 - 0.208333333333327*G0_1_0_1_1 + 16.6666666666667*G0_1_1_0_0 + 16.6666666666666*G0_1_1_0_1 - 0.833333333333306*G0_1_1_1_0 - 26.0416666666666*G0_1_1_1_1 + 26.0416666666667*G1_0_0_0_0 + 11.4583333333333*G1_0_0_0_1 + 13.9583333333333*G1_0_0_1_0 + 0.20833333333334*G1_0_0_1_1 + 8.33333333333329*G1_0_1_0_0 + 9.8958333333333*G1_0_1_0_1 - 1.35416666666668*G1_0_1_1_0 + 6.4583333333333*G1_0_1_1_1 - 16.6666666666666*G1_1_0_0_0 - 15.1041666666666*G1_1_0_0_1 - 1.35416666666668*G1_1_0_1_0 + 0.208333333333327*G1_1_0_1_1 - 16.6666666666667*G1_1_1_0_0 - 16.6666666666666*G1_1_1_0_1 + 0.833333333333306*G1_1_1_1_0 + 26.0416666666666*G1_1_1_1_1;
    A[180] = 2.94627825494395*G0_0_0_0_0 - 1.64991582276861*G0_0_0_0_1 + 0.235702260395514*G0_0_0_1_0 + 0.235702260395517*G0_0_0_1_1 - 0.824957911384309*G0_0_1_0_0 - 1.23743686707646*G0_0_1_0_1 - 1.00173460668094*G0_0_1_1_0 + 0.235702260395516*G0_0_1_1_1 + 8.36743024404082*G0_1_0_0_0 + 1.59099025766974*G0_1_0_0_1 - 3.83016173142714*G0_1_0_1_0 - 2.59272486435067*G0_1_0_1_1 + 2.00346921336189*G0_1_1_0_0 + 2.00346921336189*G0_1_1_0_1 - 5.06759859850358*G0_1_1_1_0 - 2.00346921336188*G0_1_1_1_1 - 2.94627825494395*G1_0_0_0_0 + 1.64991582276861*G1_0_0_0_1 - 0.235702260395514*G1_0_0_1_0 - 0.235702260395517*G1_0_0_1_1 + 0.824957911384309*G1_0_1_0_0 + 1.23743686707646*G1_0_1_0_1 + 1.00173460668094*G1_0_1_1_0 - 0.235702260395516*G1_0_1_1_1 - 8.36743024404082*G1_1_0_0_0 - 1.59099025766974*G1_1_0_0_1 + 3.83016173142714*G1_1_0_1_0 + 2.59272486435067*G1_1_0_1_1 - 2.00346921336189*G1_1_1_0_0 - 2.00346921336189*G1_1_1_0_1 + 5.06759859850358*G1_1_1_1_0 + 2.00346921336188*G1_1_1_1_1;
    A[181] = -5.8925565098879*G0_0_0_0_0 + 4.4783429475148*G0_0_0_0_1 - 1.64991582276861*G0_0_0_1_0 - 1.64991582276861*G0_0_0_1_1 - 1.88561808316412*G0_0_1_0_0 + 1.29636243217534*G0_0_1_0_1 + 0.824957911384306*G0_0_1_1_0 - 1.6499158227686*G0_0_1_1_1 - 6.12825877028342*G0_1_0_0_0 + 2.71057599454842*G0_1_0_0_1 - 0.589255650988788*G0_1_0_1_0 - 3.06412938514171*G0_1_0_1_1 - 0.471404520791033*G0_1_1_0_0 - 0.471404520791034*G0_1_1_0_1 + 1.88561808316412*G0_1_1_1_0 - 1.88561808316413*G0_1_1_1_1 + 5.8925565098879*G1_0_0_0_0 - 4.4783429475148*G1_0_0_0_1 + 1.64991582276861*G1_0_0_1_0 + 1.64991582276861*G1_0_0_1_1 + 1.88561808316412*G1_0_1_0_0 - 1.29636243217534*G1_0_1_0_1 - 0.824957911384306*G1_0_1_1_0 + 1.6499158227686*G1_0_1_1_1 + 6.12825877028342*G1_1_0_0_0 - 2.71057599454842*G1_1_0_0_1 + 0.589255650988788*G1_1_0_1_0 + 3.06412938514171*G1_1_0_1_1 + 0.471404520791033*G1_1_1_0_0 + 0.471404520791034*G1_1_1_0_1 - 1.88561808316412*G1_1_1_1_0 + 1.88561808316413*G1_1_1_1_1;
    A[182] = -2.94627825494395*G0_0_0_0_0 - 8.72098363463408*G0_0_0_0_1 + 2.59272486435067*G0_0_0_1_0 + 2.59272486435067*G0_0_0_1_1 - 2.00346921336188*G0_0_1_0_0 - 5.36222642399798*G0_0_1_0_1 + 1.944543648263*G0_0_1_1_0 + 2.59272486435067*G0_0_1_1_1 + 0.117851130197759*G0_1_0_0_0 - 2.53379929925179*G0_1_0_0_1 - 0.883883476483184*G0_1_0_1_0 - 0.235702260395512*G0_1_0_1_1 + 0.824957911384306*G0_1_1_0_0 + 0.824957911384308*G0_1_1_0_1 - 1.53206469257085*G0_1_1_1_0 - 0.824957911384301*G0_1_1_1_1 + 2.94627825494395*G1_0_0_0_0 + 8.72098363463408*G1_0_0_0_1 - 2.59272486435067*G1_0_0_1_0 - 2.59272486435067*G1_0_0_1_1 + 2.00346921336188*G1_0_1_0_0 + 5.36222642399798*G1_0_1_0_1 - 1.944543648263*G1_0_1_1_0 - 2.59272486435067*G1_0_1_1_1 - 0.117851130197759*G1_1_0_0_0 + 2.53379929925179*G1_1_0_0_1 + 0.883883476483184*G1_1_0_1_0 + 0.235702260395512*G1_1_0_1_1 - 0.824957911384306*G1_1_1_0_0 - 0.824957911384308*G1_1_1_0_1 + 1.53206469257085*G1_1_1_1_0 + 0.824957911384301*G1_1_1_1_1;
    A[183] = 2.94627825494395*G0_0_0_0_0 + 4.59619407771256*G0_0_0_0_1 + 2.71057599454844*G0_0_0_1_0 + 4.59619407771256*G0_0_0_1_1 + 3.77123616632825*G0_0_1_0_0 + 4.1837151220204*G0_0_1_0_1 + 2.5337992992518*G0_0_1_1_0 + 2.94627825494395*G0_0_1_1_1 - 5.42115198909687*G0_1_0_0_0 - 2.18024590865852*G0_1_0_0_1 - 9.48701598091951*G0_1_0_1_0 - 3.41768277573498*G0_1_0_1_1 - 2.59272486435067*G0_1_1_0_0 - 2.59272486435067*G0_1_1_0_1 - 2.59272486435068*G0_1_1_1_0 - 2.00346921336189*G0_1_1_1_1 - 2.94627825494395*G1_0_0_0_0 - 4.59619407771256*G1_0_0_0_1 - 2.71057599454844*G1_0_0_1_0 - 4.59619407771256*G1_0_0_1_1 - 3.77123616632825*G1_0_1_0_0 - 4.1837151220204*G1_0_1_0_1 - 2.5337992992518*G1_0_1_1_0 - 2.94627825494395*G1_0_1_1_1 + 5.42115198909687*G1_1_0_0_0 + 2.18024590865852*G1_1_0_0_1 + 9.48701598091951*G1_1_0_1_0 + 3.41768277573498*G1_1_0_1_1 + 2.59272486435067*G1_1_1_0_0 + 2.59272486435067*G1_1_1_0_1 + 2.59272486435068*G1_1_1_1_0 + 2.00346921336189*G1_1_1_1_1;
    A[184] = -5.8925565098879*G0_0_0_0_0 - 10.3708994574027*G0_0_0_0_1 - 4.24264068711929*G0_0_0_1_0 - 10.3708994574027*G0_0_0_1_1 - 4.00693842672377*G0_0_1_0_0 - 7.18891894206323*G0_0_1_0_1 - 1.53206469257086*G0_0_1_1_0 - 4.71404520791032*G0_0_1_1_1 + 0.235702260395518*G0_1_0_0_0 - 1.53206469257085*G0_1_0_0_1 + 1.29636243217533*G0_1_0_1_0 + 0.94280904158206*G0_1_0_1_1 + 1.64991582276861*G0_1_1_0_0 + 1.64991582276862*G0_1_1_0_1 + 1.64991582276861*G0_1_1_1_0 + 2.82842712474619*G0_1_1_1_1 + 5.8925565098879*G1_0_0_0_0 + 10.3708994574027*G1_0_0_0_1 + 4.24264068711929*G1_0_0_1_0 + 10.3708994574027*G1_0_0_1_1 + 4.00693842672377*G1_0_1_0_0 + 7.18891894206323*G1_0_1_0_1 + 1.53206469257086*G1_0_1_1_0 + 4.71404520791032*G1_0_1_1_1 - 0.235702260395518*G1_1_0_0_0 + 1.53206469257085*G1_1_0_0_1 - 1.29636243217533*G1_1_0_1_0 - 0.94280904158206*G1_1_0_1_1 - 1.64991582276861*G1_1_1_0_0 - 1.64991582276862*G1_1_1_0_1 - 1.64991582276861*G1_1_1_1_0 - 2.82842712474619*G1_1_1_1_1;
    A[185] = -2.94627825494395*G0_0_0_0_0 + 5.77470537969014*G0_0_0_0_1 - 5.53900311929462*G0_0_0_1_0 + 5.77470537969014*G0_0_0_1_1 - 0.942809041582061*G0_0_1_0_0 + 2.41594816905403*G0_0_1_0_1 - 1.59099025766972*G0_0_1_1_0 + 1.76776695296637*G0_0_1_1_1 - 3.06412938514171*G0_1_0_0_0 + 3.12305495024058*G0_1_0_0_1 - 6.54073772597557*G0_1_0_1_0 + 2.47487373415291*G0_1_0_1_1 - 0.235702260395518*G0_1_1_0_0 - 0.235702260395521*G0_1_1_0_1 - 0.235702260395519*G0_1_1_1_0 - 0.824957911384308*G0_1_1_1_1 + 2.94627825494395*G1_0_0_0_0 - 5.77470537969014*G1_0_0_0_1 + 5.53900311929462*G1_0_0_1_0 - 5.77470537969014*G1_0_0_1_1 + 0.942809041582061*G1_0_1_0_0 - 2.41594816905403*G1_0_1_0_1 + 1.59099025766972*G1_0_1_1_0 - 1.76776695296637*G1_0_1_1_1 + 3.06412938514171*G1_1_0_0_0 - 3.12305495024058*G1_1_0_0_1 + 6.54073772597557*G1_1_0_1_0 - 2.47487373415291*G1_1_0_1_1 + 0.235702260395518*G1_1_1_0_0 + 0.235702260395521*G1_1_1_0_1 + 0.235702260395519*G1_1_1_1_0 + 0.824957911384308*G1_1_1_1_1;
    A[186] = 1.17851130197757*G0_0_0_0_0 + 2.00346921336189*G0_0_0_0_1 + 2.00346921336188*G0_0_0_1_0 + 2.00346921336188*G0_0_0_1_1 + 0.117851130197757*G0_0_1_0_0 - 0.117851130197756*G0_0_1_0_1 + 2.2391714737574*G0_0_1_1_0 + 2.00346921336188*G0_0_1_1_1 - 5.53900311929463*G0_1_0_0_0 - 6.48181216087668*G0_1_0_0_1 - 4.12478955692153*G0_1_0_1_0 - 4.36049181731704*G0_1_0_1_1 - 3.88908729652601*G0_1_1_0_0 - 4.36049181731704*G0_1_1_0_1 - 3.88908729652601*G0_1_1_1_0 - 3.77123616632825*G0_1_1_1_1 - 1.17851130197757*G1_0_0_0_0 - 2.00346921336189*G1_0_0_0_1 - 2.00346921336188*G1_0_0_1_0 - 2.00346921336188*G1_0_0_1_1 - 0.117851130197757*G1_0_1_0_0 + 0.117851130197756*G1_0_1_0_1 - 2.2391714737574*G1_0_1_1_0 - 2.00346921336188*G1_0_1_1_1 + 5.53900311929463*G1_1_0_0_0 + 6.48181216087668*G1_1_0_0_1 + 4.12478955692153*G1_1_0_1_0 + 4.36049181731704*G1_1_0_1_1 + 3.88908729652601*G1_1_1_0_0 + 4.36049181731704*G1_1_1_0_1 + 3.88908729652601*G1_1_1_1_0 + 3.77123616632825*G1_1_1_1_1;
    A[187] = -0.471404520791038*G0_0_0_0_1 - 0.471404520791031*G0_0_0_1_0 - 0.471404520791036*G0_0_0_1_1 + 0.94280904158206*G0_0_1_0_0 + 0.235702260395513*G0_0_1_0_1 + 0.235702260395513*G0_0_1_1_0 - 0.471404520791034*G0_0_1_1_1 + 12.2565175405668*G0_1_0_0_0 + 5.89255650988789*G0_1_0_0_1 + 5.8925565098879*G0_1_0_1_0 + 5.18544972870135*G0_1_0_1_1 + 6.59966329107444*G0_1_1_0_0 + 2.82842712474619*G0_1_1_0_1 + 6.59966329107443*G0_1_1_1_0 + 4.00693842672376*G0_1_1_1_1 + 0.471404520791038*G1_0_0_0_1 + 0.471404520791031*G1_0_0_1_0 + 0.471404520791036*G1_0_0_1_1 - 0.94280904158206*G1_0_1_0_0 - 0.235702260395513*G1_0_1_0_1 - 0.235702260395513*G1_0_1_1_0 + 0.471404520791034*G1_0_1_1_1 - 12.2565175405668*G1_1_0_0_0 - 5.89255650988789*G1_1_0_0_1 - 5.8925565098879*G1_1_0_1_0 - 5.18544972870135*G1_1_0_1_1 - 6.59966329107444*G1_1_1_0_0 - 2.82842712474619*G1_1_1_0_1 - 6.59966329107443*G1_1_1_1_0 - 4.00693842672376*G1_1_1_1_1;
    A[188] = -1.17851130197758*G0_0_0_0_0 + 0.824957911384308*G0_0_0_0_1 + 0.824957911384305*G0_0_0_1_0 + 0.824957911384307*G0_0_0_1_1 - 1.06066017177982*G0_0_1_0_0 + 1.06066017177982*G0_0_1_0_1 - 1.29636243217533*G0_0_1_1_0 + 0.824957911384304*G0_0_1_1_1 - 6.7175144212722*G0_1_0_0_0 + 1.76776695296638*G0_1_0_0_1 - 0.58925565098879*G0_1_0_1_0 + 1.53206469257086*G0_1_0_1_1 - 2.71057599454843*G0_1_1_0_0 + 1.53206469257086*G0_1_1_0_1 - 2.71057599454842*G0_1_1_1_0 + 0.942809041582068*G0_1_1_1_1 + 1.17851130197758*G1_0_0_0_0 - 0.824957911384308*G1_0_0_0_1 - 0.824957911384305*G1_0_0_1_0 - 0.824957911384307*G1_0_0_1_1 + 1.06066017177982*G1_0_1_0_0 - 1.06066017177982*G1_0_1_0_1 + 1.29636243217533*G1_0_1_1_0 - 0.824957911384304*G1_0_1_1_1 + 6.7175144212722*G1_1_0_0_0 - 1.76776695296638*G1_1_0_0_1 + 0.58925565098879*G1_1_0_1_0 - 1.53206469257086*G1_1_0_1_1 + 2.71057599454843*G1_1_1_0_0 - 1.53206469257086*G1_1_1_0_1 + 2.71057599454842*G1_1_1_1_0 - 0.942809041582068*G1_1_1_1_1;
    A[189] = -8.33333333333333*G0_0_0_0_0 - 11.6666666666667*G0_0_0_0_1 - 1.66666666666666*G0_0_0_1_0 - 1.66666666666667*G0_0_0_1_1 - 6.66666666666666*G0_0_1_0_0 - 9.16666666666666*G0_0_1_0_1 + 0.833333333333333*G0_0_1_1_0 - 1.66666666666666*G0_0_1_1_1 + 3.33333333333334*G0_1_0_0_0 + 0.83333333333332*G0_1_0_0_1 - 9.16666666666666*G0_1_0_1_0 - 11.6666666666667*G0_1_0_1_1 + 3.33333333333333*G0_1_1_0_0 + 3.33333333333333*G0_1_1_0_1 - 6.66666666666666*G0_1_1_1_0 - 8.33333333333333*G0_1_1_1_1 + 8.33333333333333*G1_0_0_0_0 + 11.6666666666667*G1_0_0_0_1 + 1.66666666666666*G1_0_0_1_0 + 1.66666666666667*G1_0_0_1_1 + 6.66666666666666*G1_0_1_0_0 + 9.16666666666666*G1_0_1_0_1 - 0.833333333333333*G1_0_1_1_0 + 1.66666666666666*G1_0_1_1_1 - 3.33333333333334*G1_1_0_0_0 - 0.83333333333332*G1_1_0_0_1 + 9.16666666666666*G1_1_0_1_0 + 11.6666666666667*G1_1_0_1_1 - 3.33333333333333*G1_1_1_0_0 - 3.33333333333333*G1_1_1_0_1 + 6.66666666666666*G1_1_1_1_0 + 8.33333333333333*G1_1_1_1_1;
    A[190] = 7.14434508311759*G0_0_0_0_0 + 2.04124145231932*G0_0_0_0_1 + 2.0412414523193*G0_0_0_1_0 + 2.04124145231932*G0_0_0_1_1 - 1.02062072615967*G0_0_1_0_0 - 5.61341399387811*G0_0_1_0_1 + 6.63403472003776*G0_0_1_1_0 + 2.04124145231932*G0_0_1_1_1 + 17.3505523447142*G0_1_0_0_0 - 5.6134139938781*G0_1_0_0_1 - 17.860862707794*G0_1_0_1_0 - 22.4536559755125*G0_1_0_1_1 - 1.02062072615965*G0_1_1_0_0 - 7.14434508311759*G0_1_1_0_1 - 13.2680694400755*G0_1_1_1_0 - 17.3505523447142*G0_1_1_1_1 - 7.14434508311759*G1_0_0_0_0 - 2.04124145231932*G1_0_0_0_1 - 2.0412414523193*G1_0_0_1_0 - 2.04124145231932*G1_0_0_1_1 + 1.02062072615967*G1_0_1_0_0 + 5.61341399387811*G1_0_1_0_1 - 6.63403472003776*G1_0_1_1_0 - 2.04124145231932*G1_0_1_1_1 - 17.3505523447142*G1_1_0_0_0 + 5.6134139938781*G1_1_0_0_1 + 17.860862707794*G1_1_0_1_0 + 22.4536559755125*G1_1_0_1_1 + 1.02062072615965*G1_1_1_0_0 + 7.14434508311759*G1_1_1_0_1 + 13.2680694400755*G1_1_1_1_0 + 17.3505523447142*G1_1_1_1_1;
    A[191] = -14.7313912747198*G0_0_0_0_0 - 4.7140452079103*G0_0_0_0_1 + 9.42809041582062*G0_0_0_1_0 + 9.42809041582063*G0_0_0_1_1 - 6.48181216087668*G0_0_1_0_0 - 5.59792868439349*G0_0_1_0_1 + 8.54420693933743*G0_0_1_1_0 + 9.42809041582061*G0_0_1_1_1 - 10.0173460668094*G0_1_0_0_0 + 1.47313912747199*G0_1_0_0_1 + 1.47313912747198*G0_1_0_1_0 + 2.35702260395517*G0_1_0_1_1 + 0.589255650988786*G0_1_1_0_0 - 2.94627825494394*G0_1_1_0_1 + 0.589255650988785*G0_1_1_1_0 - 0.589255650988783*G0_1_1_1_1 + 14.7313912747198*G1_0_0_0_0 + 4.7140452079103*G1_0_0_0_1 - 9.42809041582062*G1_0_0_1_0 - 9.42809041582063*G1_0_0_1_1 + 6.48181216087668*G1_0_1_0_0 + 5.59792868439349*G1_0_1_0_1 - 8.54420693933743*G1_0_1_1_0 - 9.42809041582061*G1_0_1_1_1 + 10.0173460668094*G1_1_0_0_0 - 1.47313912747199*G1_1_0_0_1 - 1.47313912747198*G1_1_0_1_0 - 2.35702260395517*G1_1_0_1_1 - 0.589255650988786*G1_1_1_0_0 + 2.94627825494394*G1_1_1_0_1 - 0.589255650988785*G1_1_1_1_0 + 0.589255650988783*G1_1_1_1_1;
    A[192] = 16.6666666666667*G0_0_0_0_0 + 8.33333333333333*G0_0_0_0_1 + 8.33333333333334*G0_0_0_1_0 - 1.66666666666667*G0_0_0_1_1 + 8.33333333333333*G0_0_1_0_0 + 8.33333333333332*G0_0_1_0_1 - 1.66666666666667*G0_0_1_1_0 - 1.66666666666667*G0_0_1_1_1 + 8.33333333333334*G0_1_0_0_0 - 1.66666666666666*G0_1_0_0_1 + 28.3333333333333*G0_1_0_1_0 + 8.33333333333333*G0_1_0_1_1 - 1.66666666666667*G0_1_1_0_0 - 1.66666666666667*G0_1_1_0_1 + 8.33333333333333*G0_1_1_1_0 + 6.66666666666666*G0_1_1_1_1 - 16.6666666666667*G1_0_0_0_0 - 8.33333333333333*G1_0_0_0_1 - 8.33333333333334*G1_0_0_1_0 + 1.66666666666667*G1_0_0_1_1 - 8.33333333333333*G1_0_1_0_0 - 8.33333333333332*G1_0_1_0_1 + 1.66666666666667*G1_0_1_1_0 + 1.66666666666667*G1_0_1_1_1 - 8.33333333333334*G1_1_0_0_0 + 1.66666666666666*G1_1_0_0_1 - 28.3333333333333*G1_1_0_1_0 - 8.33333333333333*G1_1_0_1_1 + 1.66666666666667*G1_1_1_0_0 + 1.66666666666667*G1_1_1_0_1 - 8.33333333333333*G1_1_1_1_0 - 6.66666666666666*G1_1_1_1_1;
    A[193] = 3.06186217847899*G0_0_0_0_1 + 3.06186217847898*G0_0_0_1_0 + 3.06186217847898*G0_0_0_1_1 + 9.18558653543692*G0_0_1_0_0 + 6.12372435695795*G0_0_1_0_1 + 6.12372435695795*G0_0_1_1_0 + 3.06186217847897*G0_0_1_1_1 - 27.5567596063108*G0_1_0_0_0 - 12.2474487139159*G0_1_0_0_1 - 12.2474487139159*G0_1_0_1_0 + 9.1855865354369*G0_1_0_1_1 - 9.18558653543692*G0_1_1_0_0 - 9.18558653543692*G0_1_1_0_1 + 3.06186217847895*G0_1_1_1_0 + 6.12372435695792*G0_1_1_1_1 - 3.06186217847899*G1_0_0_0_1 - 3.06186217847898*G1_0_0_1_0 - 3.06186217847898*G1_0_0_1_1 - 9.18558653543692*G1_0_1_0_0 - 6.12372435695795*G1_0_1_0_1 - 6.12372435695795*G1_0_1_1_0 - 3.06186217847897*G1_0_1_1_1 + 27.5567596063108*G1_1_0_0_0 + 12.2474487139159*G1_1_0_0_1 + 12.2474487139159*G1_1_0_1_0 - 9.1855865354369*G1_1_0_1_1 + 9.18558653543692*G1_1_1_0_0 + 9.18558653543692*G1_1_1_0_1 - 3.06186217847895*G1_1_1_1_0 - 6.12372435695792*G1_1_1_1_1;
    A[194] = 29.4627825494395*G0_0_0_0_0 + 14.7313912747197*G0_0_0_0_1 + 14.7313912747197*G0_0_0_1_0 + 0.5892556509888*G0_0_0_1_1 + 14.7313912747197*G0_0_1_0_0 + 14.7313912747197*G0_0_1_0_1 + 0.589255650988793*G0_0_1_1_0 + 0.589255650988797*G0_0_1_1_1 + 14.7313912747198*G0_1_0_0_0 - 2.94627825494393*G0_1_0_0_1 + 11.195857368787*G0_1_0_1_0 - 2.94627825494394*G0_1_0_1_1 - 2.94627825494395*G0_1_1_0_0 - 2.94627825494394*G0_1_1_0_1 - 2.94627825494394*G0_1_1_1_0 - 2.35702260395516*G0_1_1_1_1 - 29.4627825494395*G1_0_0_0_0 - 14.7313912747197*G1_0_0_0_1 - 14.7313912747197*G1_0_0_1_0 - 0.5892556509888*G1_0_0_1_1 - 14.7313912747197*G1_0_1_0_0 - 14.7313912747197*G1_0_1_0_1 - 0.589255650988793*G1_0_1_1_0 - 0.589255650988797*G1_0_1_1_1 - 14.7313912747198*G1_1_0_0_0 + 2.94627825494393*G1_1_0_0_1 - 11.195857368787*G1_1_0_1_0 + 2.94627825494394*G1_1_0_1_1 + 2.94627825494395*G1_1_1_0_0 + 2.94627825494394*G1_1_1_0_1 + 2.94627825494394*G1_1_1_1_0 + 2.35702260395516*G1_1_1_1_1;
    A[195] = -8.44374768689829*G0_0_0_0_0 - 2.59807621135333*G0_0_0_0_1 + 2.59807621135332*G0_0_0_1_0 + 2.59807621135331*G0_0_0_1_1 - 3.68060796608387*G0_0_1_0_0 - 3.1393420887186*G0_0_1_0_1 + 5.95392465101801*G0_0_1_1_0 + 2.59807621135331*G0_0_1_1_1 - 3.68060796608387*G0_1_0_0_0 + 2.48982303588025*G0_1_0_0_1 - 10.9335707227785*G0_1_0_1_0 - 0.866025403784431*G0_1_0_1_1 + 1.94855715851499*G0_1_1_0_0 + 1.94855715851498*G0_1_1_0_1 - 7.57772228311382*G0_1_1_1_0 - 1.94855715851498*G0_1_1_1_1 + 8.44374768689829*G1_0_0_0_0 + 2.59807621135333*G1_0_0_0_1 - 2.59807621135332*G1_0_0_1_0 - 2.59807621135331*G1_0_0_1_1 + 3.68060796608387*G1_0_1_0_0 + 3.1393420887186*G1_0_1_0_1 - 5.95392465101801*G1_0_1_1_0 - 2.59807621135331*G1_0_1_1_1 + 3.68060796608387*G1_1_0_0_0 - 2.48982303588025*G1_1_0_0_1 + 10.9335707227785*G1_1_0_1_0 + 0.866025403784431*G1_1_0_1_1 - 1.94855715851499*G1_1_1_0_0 - 1.94855715851498*G1_1_1_0_1 + 7.57772228311382*G1_1_1_1_0 + 1.94855715851498*G1_1_1_1_1;
    A[196] = 3.89711431702999*G0_0_0_0_0 - 1.29903810567666*G0_0_0_0_1 + 1.29903810567666*G0_0_0_1_0 + 1.29903810567667*G0_0_0_1_1 + 0.866025403784436*G0_0_1_0_0 - 0.216506350946103*G0_0_1_0_1 - 1.08253175473055*G0_0_1_1_0 + 1.29903810567666*G0_0_1_1_1 + 0.866025403784441*G0_1_0_0_0 - 2.81458256229942*G0_1_0_0_1 + 6.71169687932938*G0_1_0_1_0 - 0.433012701892216*G0_1_0_1_1 - 1.73205080756888*G0_1_1_0_0 - 1.73205080756887*G0_1_1_0_1 + 4.33012701892218*G0_1_1_1_0 - 2.59807621135331*G0_1_1_1_1 - 3.89711431702999*G1_0_0_0_0 + 1.29903810567666*G1_0_0_0_1 - 1.29903810567666*G1_0_0_1_0 - 1.29903810567667*G1_0_0_1_1 - 0.866025403784436*G1_0_1_0_0 + 0.216506350946103*G1_0_1_0_1 + 1.08253175473055*G1_0_1_1_0 - 1.29903810567666*G1_0_1_1_1 - 0.866025403784441*G1_1_0_0_0 + 2.81458256229942*G1_1_0_0_1 - 6.71169687932938*G1_1_0_1_0 + 0.433012701892216*G1_1_0_1_1 + 1.73205080756888*G1_1_1_0_0 + 1.73205080756887*G1_1_1_0_1 - 4.33012701892218*G1_1_1_1_0 + 2.59807621135331*G1_1_1_1_1;
    A[197] = -1.94855715851499*G0_0_0_0_0 - 2.59807621135332*G0_0_0_0_1 + 2.59807621135331*G0_0_0_1_0 + 2.59807621135331*G0_0_0_1_1 - 1.51554445662277*G0_0_1_0_0 - 2.05681033398805*G0_0_1_0_1 + 2.70632938682637*G0_0_1_1_0 + 2.59807621135331*G0_0_1_1_1 - 1.51554445662277*G0_1_0_0_0 - 0.757772228311391*G0_1_0_0_1 - 1.1907849302036*G0_1_0_1_0 - 0.866025403784432*G0_1_0_1_1 - 0.216506350946112*G0_1_1_0_0 - 0.216506350946112*G0_1_1_0_1 - 1.08253175473055*G0_1_1_1_0 + 0.216506350946111*G0_1_1_1_1 + 1.94855715851499*G1_0_0_0_0 + 2.59807621135332*G1_0_0_0_1 - 2.59807621135331*G1_0_0_1_0 - 2.59807621135331*G1_0_0_1_1 + 1.51554445662277*G1_0_1_0_0 + 2.05681033398805*G1_0_1_0_1 - 2.70632938682637*G1_0_1_1_0 - 2.59807621135331*G1_0_1_1_1 + 1.51554445662277*G1_1_0_0_0 + 0.757772228311391*G1_1_0_0_1 + 1.1907849302036*G1_1_0_1_0 + 0.866025403784432*G1_1_0_1_1 + 0.216506350946112*G1_1_1_0_0 + 0.216506350946112*G1_1_1_0_1 + 1.08253175473055*G1_1_1_1_0 - 0.216506350946111*G1_1_1_1_1;
    A[198] = 8.44374768689829*G0_0_0_0_0 + 5.84567147554497*G0_0_0_0_1 + 11.0418238982516*G0_0_0_1_0 + 5.84567147554497*G0_0_0_1_1 + 4.76313972081442*G0_0_1_0_0 + 5.3044055981797*G0_0_1_0_1 + 1.40729128114973*G0_0_1_1_0 + 1.948557158515*G0_0_1_1_1 + 4.76313972081442*G0_1_0_0_0 - 0.324759526419154*G0_1_0_0_1 + 18.2947866549463*G0_1_0_1_0 + 9.74278579257493*G0_1_0_1_1 - 0.866025403784433*G0_1_1_0_0 - 0.866025403784434*G0_1_1_0_1 - 0.866025403784427*G0_1_1_1_0 + 0.216506350946117*G0_1_1_1_1 - 8.44374768689829*G1_0_0_0_0 - 5.84567147554497*G1_0_0_0_1 - 11.0418238982516*G1_0_0_1_0 - 5.84567147554497*G1_0_0_1_1 - 4.76313972081442*G1_0_1_0_0 - 5.3044055981797*G1_0_1_0_1 - 1.40729128114973*G1_0_1_1_0 - 1.948557158515*G1_0_1_1_1 - 4.76313972081442*G1_1_0_0_0 + 0.324759526419154*G1_1_0_0_1 - 18.2947866549463*G1_1_0_1_0 - 9.74278579257493*G1_1_0_1_1 + 0.866025403784433*G1_1_1_0_0 + 0.866025403784434*G1_1_1_0_1 + 0.866025403784427*G1_1_1_1_0 - 0.216506350946117*G1_1_1_1_1;
    A[199] = -3.89711431702998*G0_0_0_0_0 - 5.19615242270664*G0_0_0_0_1 - 2.59807621135332*G0_0_0_1_0 - 5.19615242270664*G0_0_0_1_1 - 3.03108891324555*G0_0_1_0_0 - 4.1136206679761*G0_0_1_0_1 - 0.649519052838343*G0_0_1_1_0 - 1.7320508075689*G0_0_1_1_1 - 3.03108891324555*G0_1_0_0_0 - 1.51554445662278*G0_1_0_0_1 - 8.44374768689827*G0_1_0_1_0 - 8.66025403784438*G0_1_0_1_1 - 0.433012701892224*G0_1_1_0_0 - 0.433012701892221*G0_1_1_0_1 - 0.43301270189223*G0_1_1_1_0 + 1.73205080756886*G0_1_1_1_1 + 3.89711431702998*G1_0_0_0_0 + 5.19615242270664*G1_0_0_0_1 + 2.59807621135332*G1_0_0_1_0 + 5.19615242270664*G1_0_0_1_1 + 3.03108891324555*G1_0_1_0_0 + 4.1136206679761*G1_0_1_0_1 + 0.649519052838343*G1_0_1_1_0 + 1.7320508075689*G1_0_1_1_1 + 3.03108891324555*G1_1_0_0_0 + 1.51554445662278*G1_1_0_0_1 + 8.44374768689827*G1_1_0_1_0 + 8.66025403784438*G1_1_0_1_1 + 0.433012701892224*G1_1_1_0_0 + 0.433012701892221*G1_1_1_0_1 + 0.43301270189223*G1_1_1_1_0 - 1.73205080756886*G1_1_1_1_1;
    A[200] = 1.948557158515*G0_0_0_0_0 - 0.649519052838325*G0_0_0_0_1 + 4.54663336986832*G0_0_0_1_0 - 0.649519052838323*G0_0_0_1_1 + 0.43301270189222*G0_0_1_0_0 - 0.108253175473045*G0_0_1_0_1 + 0.324759526419168*G0_0_1_1_0 - 0.216506350946095*G0_0_1_1_1 + 0.433012701892228*G0_1_0_0_0 - 1.4072912811497*G0_1_0_0_1 + 4.22187384344913*G0_1_0_1_0 - 1.08253175473054*G0_1_0_1_1 - 0.86602540378444*G0_1_1_0_0 - 0.866025403784438*G0_1_1_0_1 - 0.86602540378444*G0_1_1_1_0 - 1.94855715851498*G0_1_1_1_1 - 1.948557158515*G1_0_0_0_0 + 0.649519052838325*G1_0_0_0_1 - 4.54663336986832*G1_0_0_1_0 + 0.649519052838323*G1_0_0_1_1 - 0.43301270189222*G1_0_1_0_0 + 0.108253175473045*G1_0_1_0_1 - 0.324759526419168*G1_0_1_1_0 + 0.216506350946095*G1_0_1_1_1 - 0.433012701892228*G1_1_0_0_0 + 1.4072912811497*G1_1_0_0_1 - 4.22187384344913*G1_1_0_1_0 + 1.08253175473054*G1_1_0_1_1 + 0.86602540378444*G1_1_1_0_0 + 0.866025403784438*G1_1_1_0_1 + 0.86602540378444*G1_1_1_1_0 + 1.94855715851498*G1_1_1_1_1;
    A[201] = 5.19615242270664*G0_0_0_0_0 + 5.84567147554496*G0_0_0_0_1 + 5.84567147554496*G0_0_0_1_0 + 5.84567147554496*G0_0_0_1_1 + 3.68060796608387*G0_0_1_0_0 + 3.03108891324554*G0_0_1_0_1 + 6.49519052838329*G0_0_1_1_0 + 5.84567147554496*G0_0_1_1_1 + 3.68060796608387*G0_1_0_0_0 + 6.49519052838329*G0_1_0_0_1 - 3.89711431702996*G0_1_0_1_0 - 1.94855715851497*G0_1_0_1_1 - 3.24759526419163*G0_1_1_0_0 - 4.11362066797606*G0_1_1_0_1 - 3.24759526419163*G0_1_1_1_0 - 3.03108891324552*G0_1_1_1_1 - 5.19615242270664*G1_0_0_0_0 - 5.84567147554496*G1_0_0_0_1 - 5.84567147554496*G1_0_0_1_0 - 5.84567147554496*G1_0_0_1_1 - 3.68060796608387*G1_0_1_0_0 - 3.03108891324554*G1_0_1_0_1 - 6.49519052838329*G1_0_1_1_0 - 5.84567147554496*G1_0_1_1_1 - 3.68060796608387*G1_1_0_0_0 - 6.49519052838329*G1_1_0_0_1 + 3.89711431702996*G1_1_0_1_0 + 1.94855715851497*G1_1_0_1_1 + 3.24759526419163*G1_1_1_0_0 + 4.11362066797606*G1_1_1_0_1 + 3.24759526419163*G1_1_1_1_0 + 3.03108891324552*G1_1_1_1_1;
    A[202] = -10.3923048454133*G0_0_0_0_0 - 5.19615242270663*G0_0_0_0_1 - 5.19615242270664*G0_0_0_1_0 - 5.19615242270664*G0_0_0_1_1 - 5.19615242270664*G0_0_1_0_0 - 1.73205080756888*G0_0_1_0_1 - 8.66025403784439*G0_0_1_1_0 - 5.19615242270663*G0_0_1_1_1 - 5.19615242270664*G0_1_0_0_0 - 8.66025403784439*G0_1_0_0_1 + 12.1243556529821*G0_1_0_1_0 + 1.73205080756886*G0_1_0_1_1 + 8.66025403784436*G0_1_1_0_0 + 1.73205080756886*G0_1_1_0_1 + 8.66025403784436*G0_1_1_1_0 + 3.89711431702996*G0_1_1_1_1 + 10.3923048454133*G1_0_0_0_0 + 5.19615242270663*G1_0_0_0_1 + 5.19615242270664*G1_0_0_1_0 + 5.19615242270664*G1_0_0_1_1 + 5.19615242270664*G1_0_1_0_0 + 1.73205080756888*G1_0_1_0_1 + 8.66025403784439*G1_0_1_1_0 + 5.19615242270663*G1_0_1_1_1 + 5.19615242270664*G1_1_0_0_0 + 8.66025403784439*G1_1_0_0_1 - 12.1243556529821*G1_1_0_1_0 - 1.73205080756886*G1_1_0_1_1 - 8.66025403784436*G1_1_1_0_0 - 1.73205080756886*G1_1_1_0_1 - 8.66025403784436*G1_1_1_1_0 - 3.89711431702996*G1_1_1_1_1;
    A[203] = 5.19615242270663*G0_0_0_0_0 - 0.649519052838338*G0_0_0_0_1 - 0.64951905283833*G0_0_0_1_0 - 0.649519052838338*G0_0_0_1_1 + 1.51554445662277*G0_0_1_0_0 - 1.29903810567666*G0_0_1_0_1 + 2.16506350946109*G0_0_1_1_0 - 0.649519052838336*G0_0_1_1_1 + 1.51554445662277*G0_1_0_0_0 + 2.16506350946109*G0_1_0_0_1 - 8.22724133595214*G0_1_0_1_0 + 0.216506350946109*G0_1_0_1_1 - 5.41265877365273*G0_1_1_0_0 + 2.3815698604072*G0_1_1_0_1 - 5.41265877365272*G0_1_1_1_0 + 1.29903810567666*G0_1_1_1_1 - 5.19615242270663*G1_0_0_0_0 + 0.649519052838338*G1_0_0_0_1 + 0.64951905283833*G1_0_0_1_0 + 0.649519052838338*G1_0_0_1_1 - 1.51554445662277*G1_0_1_0_0 + 1.29903810567666*G1_0_1_0_1 - 2.16506350946109*G1_0_1_1_0 + 0.649519052838336*G1_0_1_1_1 - 1.51554445662277*G1_1_0_0_0 - 2.16506350946109*G1_1_0_0_1 + 8.22724133595214*G1_1_0_1_0 - 0.216506350946109*G1_1_0_1_1 + 5.41265877365273*G1_1_1_0_0 - 2.3815698604072*G1_1_1_0_1 + 5.41265877365272*G1_1_1_1_0 - 1.29903810567666*G1_1_1_1_1;
    A[204] = -9.18558653543693*G0_0_0_0_0 - 9.18558653543692*G0_0_0_0_1 + 9.18558653543692*G0_0_0_1_0 + 9.18558653543693*G0_0_0_1_1 - 6.12372435695796*G0_0_1_0_0 - 7.65465544619745*G0_0_1_0_1 + 10.7165176246764*G0_0_1_1_0 + 9.18558653543693*G0_0_1_1_1 - 6.12372435695795*G0_1_0_0_0 - 1.53093108923949*G0_1_0_0_1 - 7.65465544619742*G0_1_0_1_0 - 3.06186217847895*G0_1_0_1_1 - 6.12372435695793*G0_1_1_1_0 - 9.18558653543689*G0_1_1_1_1 + 9.18558653543693*G1_0_0_0_0 + 9.18558653543692*G1_0_0_0_1 - 9.18558653543692*G1_0_0_1_0 - 9.18558653543693*G1_0_0_1_1 + 6.12372435695796*G1_0_1_0_0 + 7.65465544619745*G1_0_1_0_1 - 10.7165176246764*G1_0_1_1_0 - 9.18558653543693*G1_0_1_1_1 + 6.12372435695795*G1_1_0_0_0 + 1.53093108923949*G1_1_0_0_1 + 7.65465544619742*G1_1_0_1_0 + 3.06186217847895*G1_1_0_1_1 + 6.12372435695793*G1_1_1_1_0 + 9.18558653543689*G1_1_1_1_1;
    A[205] = -16.875*G0_0_0_0_0 + 22.5*G0_0_0_1_0 + 22.5*G0_0_0_1_1 + 1.87499999999999*G0_0_1_0_0 + 0.937500000000009*G0_0_1_0_1 + 23.4375*G0_0_1_1_0 + 22.5*G0_0_1_1_1 + 1.875*G0_1_0_0_0 + 12.1875*G0_1_0_0_1 - 10.3125*G0_1_0_1_0 - 7.49999999999996*G0_1_0_1_1 + 13.125*G0_1_1_0_0 - 5.62499999999996*G0_1_1_0_1 - 9.37499999999997*G0_1_1_1_0 - 16.8749999999999*G0_1_1_1_1 + 16.875*G1_0_0_0_0 - 22.5*G1_0_0_1_0 - 22.5*G1_0_0_1_1 - 1.87499999999999*G1_0_1_0_0 - 0.937500000000009*G1_0_1_0_1 - 23.4375*G1_0_1_1_0 - 22.5*G1_0_1_1_1 - 1.875*G1_1_0_0_0 - 12.1875*G1_1_0_0_1 + 10.3125*G1_1_0_1_0 + 7.49999999999996*G1_1_0_1_1 - 13.125*G1_1_1_0_0 + 5.62499999999996*G1_1_1_0_1 + 9.37499999999997*G1_1_1_1_0 + 16.8749999999999*G1_1_1_1_1;
    A[206] = 3.24759526419166*G0_0_0_0_0 - 6.4951905283833*G0_0_0_0_1 + 6.49519052838327*G0_0_0_1_0 + 6.49519052838327*G0_0_0_1_1 - 1.08253175473056*G0_0_1_0_0 + 2.70632938682637*G0_0_1_0_1 + 2.70632938682638*G0_0_1_1_0 + 6.49519052838329*G0_0_1_1_1 - 1.08253175473055*G0_1_0_0_0 + 0.541265877365284*G0_1_0_0_1 + 9.20151991520964*G0_1_0_1_0 - 2.16506350946107*G0_1_0_1_1 - 3.24759526419166*G0_1_1_0_0 + 3.24759526419165*G0_1_1_0_1 + 5.41265877365273*G0_1_1_1_0 + 3.24759526419164*G0_1_1_1_1 - 3.24759526419166*G1_0_0_0_0 + 6.4951905283833*G1_0_0_0_1 - 6.49519052838327*G1_0_0_1_0 - 6.49519052838327*G1_0_0_1_1 + 1.08253175473056*G1_0_1_0_0 - 2.70632938682637*G1_0_1_0_1 - 2.70632938682638*G1_0_1_1_0 - 6.49519052838329*G1_0_1_1_1 + 1.08253175473055*G1_1_0_0_0 - 0.541265877365284*G1_1_0_0_1 - 9.20151991520964*G1_1_0_1_0 + 2.16506350946107*G1_1_0_1_1 + 3.24759526419166*G1_1_1_0_0 - 3.24759526419165*G1_1_1_0_1 - 5.41265877365273*G1_1_1_1_0 - 3.24759526419164*G1_1_1_1_1;
    A[207] = 9.18558653543692*G0_0_0_0_1 - 27.5567596063108*G0_0_0_1_0 - 9.18558653543692*G0_0_0_1_1 + 3.06186217847899*G0_0_1_0_0 + 6.12372435695795*G0_0_1_0_1 - 12.2474487139159*G0_0_1_1_0 - 9.18558653543692*G0_0_1_1_1 + 3.06186217847898*G0_1_0_0_0 + 6.12372435695795*G0_1_0_0_1 - 12.2474487139159*G0_1_0_1_0 + 3.06186217847895*G0_1_0_1_1 + 3.06186217847898*G0_1_1_0_0 + 3.06186217847897*G0_1_1_0_1 + 9.1855865354369*G0_1_1_1_0 + 6.12372435695792*G0_1_1_1_1 - 9.18558653543692*G1_0_0_0_1 + 27.5567596063108*G1_0_0_1_0 + 9.18558653543692*G1_0_0_1_1 - 3.06186217847899*G1_0_1_0_0 - 6.12372435695795*G1_0_1_0_1 + 12.2474487139159*G1_0_1_1_0 + 9.18558653543692*G1_0_1_1_1 - 3.06186217847898*G1_1_0_0_0 - 6.12372435695795*G1_1_0_0_1 + 12.2474487139159*G1_1_0_1_0 - 3.06186217847895*G1_1_0_1_1 - 3.06186217847898*G1_1_1_0_0 - 3.06186217847897*G1_1_1_0_1 - 9.1855865354369*G1_1_1_1_0 - 6.12372435695792*G1_1_1_1_1;
    A[208] = 33.75*G0_0_0_0_0 + 16.875*G0_0_0_0_1 + 16.875*G0_0_0_1_0 - 5.62499999999999*G0_0_0_1_1 + 16.875*G0_0_1_0_0 + 16.875*G0_0_1_0_1 - 5.62499999999997*G0_0_1_1_0 - 5.62499999999999*G0_0_1_1_1 + 16.875*G0_1_0_0_0 - 5.62499999999997*G0_1_0_0_1 + 61.8749999999999*G0_1_0_1_0 + 16.875*G0_1_0_1_1 - 5.62499999999999*G0_1_1_0_0 - 5.62499999999999*G0_1_1_0_1 + 16.875*G0_1_1_1_0 + 15*G0_1_1_1_1 - 33.75*G1_0_0_0_0 - 16.875*G1_0_0_0_1 - 16.875*G1_0_0_1_0 + 5.62499999999999*G1_0_0_1_1 - 16.875*G1_0_1_0_0 - 16.875*G1_0_1_0_1 + 5.62499999999997*G1_0_1_1_0 + 5.62499999999999*G1_0_1_1_1 - 16.875*G1_1_0_0_0 + 5.62499999999997*G1_1_0_0_1 - 61.8749999999999*G1_1_0_1_0 - 16.875*G1_1_0_1_1 + 5.62499999999999*G1_1_1_0_0 + 5.62499999999999*G1_1_1_0_1 - 16.875*G1_1_1_1_0 - 15*G1_1_1_1_1;
    A[209] = -2.66453525910038e-14*G0_0_0_0_0 + 16.2379763209582*G0_0_0_0_1 - 9.74278579257494*G0_0_0_1_0 + 3.24759526419164*G0_0_0_1_1 + 5.41265877365277*G0_0_1_0_0 + 10.8253175473055*G0_0_1_0_1 - 2.16506350946108*G0_0_1_1_0 + 3.24759526419165*G0_0_1_1_1 + 5.41265877365275*G0_1_0_0_0 + 10.8253175473055*G0_1_0_0_1 - 2.16506350946106*G0_1_0_1_0 + 24.8982303588026*G0_1_0_1_1 + 5.41265877365276*G0_1_1_0_0 + 5.41265877365274*G0_1_1_0_1 - 3.24759526419161*G0_1_1_1_0 + 10.8253175473055*G0_1_1_1_1 + 2.66453525910038e-14*G1_0_0_0_0 - 16.2379763209582*G1_0_0_0_1 + 9.74278579257494*G1_0_0_1_0 - 3.24759526419164*G1_0_0_1_1 - 5.41265877365277*G1_0_1_0_0 - 10.8253175473055*G1_0_1_0_1 + 2.16506350946108*G1_0_1_1_0 - 3.24759526419165*G1_0_1_1_1 - 5.41265877365275*G1_1_0_0_0 - 10.8253175473055*G1_1_0_0_1 + 2.16506350946106*G1_1_0_1_0 - 24.8982303588026*G1_1_0_1_1 - 5.41265877365276*G1_1_1_0_0 - 5.41265877365274*G1_1_1_0_1 + 3.24759526419161*G1_1_1_1_0 - 10.8253175473055*G1_1_1_1_1;
    A[210] = 5.20833333333333*G0_0_0_0_0 - 2.91666666666667*G0_0_0_0_1 + 0.416666666666664*G0_0_0_1_0 + 0.416666666666668*G0_0_0_1_1 - 1.45833333333334*G0_0_1_0_0 - 2.1875*G0_0_1_0_1 - 1.77083333333333*G0_0_1_1_0 + 0.416666666666666*G0_0_1_1_1 + 5.04166666666666*G0_1_0_0_0 - 1.4375*G0_1_0_0_1 + 3.97916666666665*G0_1_0_1_0 + 0.916666666666665*G0_1_0_1_1 - 0.708333333333333*G0_1_1_0_0 - 0.708333333333335*G0_1_1_0_1 + 1.79166666666665*G0_1_1_1_0 + 1.45833333333332*G0_1_1_1_1 - 5.20833333333333*G1_0_0_0_0 + 2.91666666666667*G1_0_0_0_1 - 0.416666666666664*G1_0_0_1_0 - 0.416666666666668*G1_0_0_1_1 + 1.45833333333334*G1_0_1_0_0 + 2.1875*G1_0_1_0_1 + 1.77083333333333*G1_0_1_1_0 - 0.416666666666666*G1_0_1_1_1 - 5.04166666666666*G1_1_0_0_0 + 1.4375*G1_1_0_0_1 - 3.97916666666665*G1_1_0_1_0 - 0.916666666666665*G1_1_0_1_1 + 0.708333333333333*G1_1_1_0_0 + 0.708333333333335*G1_1_1_0_1 - 1.79166666666665*G1_1_1_1_0 - 1.45833333333332*G1_1_1_1_1;
    A[211] = -10.4166666666667*G0_0_0_0_0 + 7.91666666666666*G0_0_0_0_1 - 2.91666666666666*G0_0_0_1_0 - 2.91666666666666*G0_0_0_1_1 - 3.33333333333333*G0_0_1_0_0 + 2.29166666666666*G0_0_1_0_1 + 1.45833333333333*G0_0_1_1_0 - 2.91666666666666*G0_0_1_1_1 - 6.33333333333333*G0_1_0_0_0 + 5.79166666666666*G0_1_0_0_1 - 5.04166666666666*G0_1_0_1_0 + 1.08333333333333*G0_1_0_1_1 + 0.166666666666664*G0_1_1_0_0 + 0.166666666666667*G0_1_1_0_1 - 0.666666666666658*G0_1_1_1_0 + 6.66666666666665*G0_1_1_1_1 + 10.4166666666667*G1_0_0_0_0 - 7.91666666666666*G1_0_0_0_1 + 2.91666666666666*G1_0_0_1_0 + 2.91666666666666*G1_0_0_1_1 + 3.33333333333333*G1_0_1_0_0 - 2.29166666666666*G1_0_1_0_1 - 1.45833333333333*G1_0_1_1_0 + 2.91666666666666*G1_0_1_1_1 + 6.33333333333333*G1_1_0_0_0 - 5.79166666666666*G1_1_0_0_1 + 5.04166666666666*G1_1_0_1_0 - 1.08333333333333*G1_1_0_1_1 - 0.166666666666664*G1_1_1_0_0 - 0.166666666666667*G1_1_1_0_1 + 0.666666666666658*G1_1_1_1_0 - 6.66666666666665*G1_1_1_1_1;
    A[212] = -5.20833333333333*G0_0_0_0_0 - 15.4166666666667*G0_0_0_0_1 + 4.58333333333332*G0_0_0_1_0 + 4.58333333333332*G0_0_0_1_1 - 3.54166666666667*G0_0_1_0_0 - 9.47916666666665*G0_0_1_0_1 + 3.43749999999999*G0_0_1_1_0 + 4.58333333333332*G0_0_1_1_1 - 2.04166666666667*G0_1_0_0_0 - 6.22916666666667*G0_1_0_0_1 + 1.6875*G0_1_0_1_0 + 0.0833333333333369*G0_1_0_1_1 - 0.291666666666669*G0_1_1_0_0 - 0.291666666666668*G0_1_1_0_1 + 0.541666666666665*G0_1_1_1_0 - 6.45833333333331*G0_1_1_1_1 + 5.20833333333333*G1_0_0_0_0 + 15.4166666666667*G1_0_0_0_1 - 4.58333333333332*G1_0_0_1_0 - 4.58333333333332*G1_0_0_1_1 + 3.54166666666667*G1_0_1_0_0 + 9.47916666666665*G1_0_1_0_1 - 3.43749999999999*G1_0_1_1_0 - 4.58333333333332*G1_0_1_1_1 + 2.04166666666667*G1_1_0_0_0 + 6.22916666666667*G1_1_0_0_1 - 1.6875*G1_1_0_1_0 - 0.0833333333333369*G1_1_0_1_1 + 0.291666666666669*G1_1_1_0_0 + 0.291666666666668*G1_1_1_0_1 - 0.541666666666665*G1_1_1_1_0 + 6.45833333333331*G1_1_1_1_1;
    A[213] = 5.20833333333333*G0_0_0_0_0 + 8.125*G0_0_0_0_1 + 4.79166666666667*G0_0_0_1_0 + 8.125*G0_0_0_1_1 + 6.66666666666666*G0_0_1_0_0 + 7.39583333333333*G0_0_1_0_1 + 4.47916666666667*G0_0_1_1_0 + 5.20833333333333*G0_0_1_1_1 + 0.166666666666669*G0_1_0_0_0 + 1.64583333333334*G0_1_0_0_1 + 3.72916666666667*G0_1_0_1_0 + 4.70833333333334*G0_1_0_1_1 + 0.916666666666669*G0_1_1_0_0 + 0.916666666666667*G0_1_1_0_1 + 0.91666666666667*G0_1_1_1_0 + 1.45833333333334*G0_1_1_1_1 - 5.20833333333333*G1_0_0_0_0 - 8.125*G1_0_0_0_1 - 4.79166666666667*G1_0_0_1_0 - 8.125*G1_0_0_1_1 - 6.66666666666666*G1_0_1_0_0 - 7.39583333333333*G1_0_1_0_1 - 4.47916666666667*G1_0_1_1_0 - 5.20833333333333*G1_0_1_1_1 - 0.166666666666669*G1_1_0_0_0 - 1.64583333333334*G1_1_0_0_1 - 3.72916666666667*G1_1_0_1_0 - 4.70833333333334*G1_1_0_1_1 - 0.916666666666669*G1_1_1_0_0 - 0.916666666666667*G1_1_1_0_1 - 0.91666666666667*G1_1_1_1_0 - 1.45833333333334*G1_1_1_1_1;
    A[214] = -10.4166666666667*G0_0_0_0_0 - 18.3333333333333*G0_0_0_0_1 - 7.5*G0_0_0_1_0 - 18.3333333333333*G0_0_0_1_1 - 7.08333333333333*G0_0_1_0_0 - 12.7083333333333*G0_0_1_0_1 - 2.70833333333334*G0_0_1_1_0 - 8.33333333333334*G0_0_1_1_1 - 4.08333333333334*G0_1_0_0_0 - 6.20833333333334*G0_1_0_0_1 - 6.20833333333333*G0_1_0_1_0 - 12.3333333333333*G0_1_0_1_1 - 0.583333333333339*G0_1_1_0_0 - 0.583333333333337*G0_1_1_0_1 - 0.583333333333339*G0_1_1_1_0 + 5*G0_1_1_1_1 + 10.4166666666667*G1_0_0_0_0 + 18.3333333333333*G1_0_0_0_1 + 7.5*G1_0_0_1_0 + 18.3333333333333*G1_0_0_1_1 + 7.08333333333333*G1_0_1_0_0 + 12.7083333333333*G1_0_1_0_1 + 2.70833333333334*G1_0_1_1_0 + 8.33333333333334*G1_0_1_1_1 + 4.08333333333334*G1_1_0_0_0 + 6.20833333333334*G1_1_0_0_1 + 6.20833333333333*G1_1_0_1_0 + 12.3333333333333*G1_1_0_1_1 + 0.583333333333339*G1_1_1_0_0 + 0.583333333333337*G1_1_1_0_1 + 0.583333333333339*G1_1_1_1_0 - 5*G1_1_1_1_1;
    A[215] = -5.20833333333333*G0_0_0_0_0 + 10.2083333333333*G0_0_0_0_1 - 9.79166666666666*G0_0_0_1_0 + 10.2083333333333*G0_0_0_1_1 - 1.66666666666666*G0_0_1_0_0 + 4.27083333333333*G0_0_1_0_1 - 2.81249999999999*G0_0_1_1_0 + 3.125*G0_0_1_1_1 - 3.16666666666667*G0_1_0_0_0 + 6.02083333333333*G0_1_0_0_1 - 6.0625*G0_1_0_1_0 + 7.625*G0_1_0_1_1 + 0.0833333333333329*G0_1_1_0_0 + 0.0833333333333345*G0_1_1_0_1 + 0.0833333333333337*G0_1_1_1_0 - 6.45833333333332*G0_1_1_1_1 + 5.20833333333333*G1_0_0_0_0 - 10.2083333333333*G1_0_0_0_1 + 9.79166666666666*G1_0_0_1_0 - 10.2083333333333*G1_0_0_1_1 + 1.66666666666666*G1_0_1_0_0 - 4.27083333333333*G1_0_1_0_1 + 2.81249999999999*G1_0_1_1_0 - 3.125*G1_0_1_1_1 + 3.16666666666667*G1_1_0_0_0 - 6.02083333333333*G1_1_0_0_1 + 6.0625*G1_1_0_1_0 - 7.625*G1_1_0_1_1 - 0.0833333333333329*G1_1_1_0_0 - 0.0833333333333345*G1_1_1_0_1 - 0.0833333333333337*G1_1_1_1_0 + 6.45833333333332*G1_1_1_1_1;
    A[216] = 2.08333333333332*G0_0_0_0_0 + 3.54166666666667*G0_0_0_0_1 + 3.54166666666665*G0_0_0_1_0 + 3.54166666666666*G0_0_0_1_1 + 0.208333333333331*G0_0_1_0_0 - 0.208333333333326*G0_0_1_0_1 + 3.95833333333332*G0_0_1_1_0 + 3.54166666666666*G0_0_1_1_1 + 4.20833333333332*G0_1_0_0_0 + 6.79166666666666*G0_1_0_0_1 + 0.958333333333327*G0_1_0_1_0 + 1.54166666666667*G0_1_0_1_1 + 1.375*G0_1_1_0_0 - 4.45833333333332*G0_1_1_0_1 + 1.375*G0_1_1_1_0 - 1.66666666666665*G0_1_1_1_1 - 2.08333333333332*G1_0_0_0_0 - 3.54166666666667*G1_0_0_0_1 - 3.54166666666665*G1_0_0_1_0 - 3.54166666666666*G1_0_0_1_1 - 0.208333333333331*G1_0_1_0_0 + 0.208333333333326*G1_0_1_0_1 - 3.95833333333332*G1_0_1_1_0 - 3.54166666666666*G1_0_1_1_1 - 4.20833333333332*G1_1_0_0_0 - 6.79166666666666*G1_1_0_0_1 - 0.958333333333327*G1_1_0_1_0 - 1.54166666666667*G1_1_0_1_1 - 1.375*G1_1_1_0_0 + 4.45833333333332*G1_1_1_0_1 - 1.375*G1_1_1_1_0 + 1.66666666666665*G1_1_1_1_1;
    A[217] = -0.833333333333342*G0_0_0_0_1 - 0.833333333333332*G0_0_0_1_0 - 0.833333333333339*G0_0_0_1_1 + 1.66666666666666*G0_0_1_0_0 + 0.416666666666661*G0_0_1_0_1 + 0.416666666666667*G0_0_1_1_0 - 0.833333333333335*G0_0_1_1_1 - 6.33333333333333*G0_1_0_0_0 - 3.58333333333334*G0_1_0_0_1 - 3.58333333333332*G0_1_0_1_0 - 1.83333333333333*G0_1_0_1_1 - 2.33333333333332*G0_1_1_0_0 - 3.99999999999999*G0_1_1_0_1 - 2.33333333333332*G0_1_1_1_0 - 2.91666666666665*G0_1_1_1_1 + 0.833333333333342*G1_0_0_0_1 + 0.833333333333332*G1_0_0_1_0 + 0.833333333333339*G1_0_0_1_1 - 1.66666666666666*G1_0_1_0_0 - 0.416666666666661*G1_0_1_0_1 - 0.416666666666667*G1_0_1_1_0 + 0.833333333333335*G1_0_1_1_1 + 6.33333333333333*G1_1_0_0_0 + 3.58333333333334*G1_1_0_0_1 + 3.58333333333332*G1_1_0_1_0 + 1.83333333333333*G1_1_0_1_1 + 2.33333333333332*G1_1_1_0_0 + 3.99999999999999*G1_1_1_0_1 + 2.33333333333332*G1_1_1_1_0 + 2.91666666666665*G1_1_1_1_1;
    A[218] = -2.08333333333333*G0_0_0_0_0 + 1.45833333333334*G0_0_0_0_1 + 1.45833333333333*G0_0_0_1_0 + 1.45833333333334*G0_0_0_1_1 - 1.875*G0_0_1_0_0 + 1.875*G0_0_1_0_1 - 2.29166666666666*G0_0_1_1_0 + 1.45833333333333*G0_0_1_1_1 + 2.125*G0_1_0_0_0 - 1.12499999999999*G0_1_0_0_1 + 4.70833333333332*G0_1_0_1_0 - 0.541666666666663*G0_1_0_1_1 + 0.958333333333325*G0_1_1_0_0 - 6.54166666666666*G0_1_1_0_1 + 0.958333333333325*G0_1_1_1_0 - 3.33333333333334*G0_1_1_1_1 + 2.08333333333333*G1_0_0_0_0 - 1.45833333333334*G1_0_0_0_1 - 1.45833333333333*G1_0_0_1_0 - 1.45833333333334*G1_0_0_1_1 + 1.875*G1_0_1_0_0 - 1.875*G1_0_1_0_1 + 2.29166666666666*G1_0_1_1_0 - 1.45833333333333*G1_0_1_1_1 - 2.125*G1_1_0_0_0 + 1.12499999999999*G1_1_0_0_1 - 4.70833333333332*G1_1_0_1_0 + 0.541666666666663*G1_1_0_1_1 - 0.958333333333325*G1_1_1_0_0 + 6.54166666666666*G1_1_1_0_1 - 0.958333333333325*G1_1_1_1_0 + 3.33333333333334*G1_1_1_1_1;
    A[219] = -14.7313912747197*G0_0_0_0_0 - 20.6239477846076*G0_0_0_0_1 - 2.94627825494395*G0_0_0_1_0 - 2.94627825494395*G0_0_0_1_1 - 11.7851130197758*G0_0_1_0_0 - 16.2045304021917*G0_0_1_0_1 + 1.47313912747197*G0_0_1_1_0 - 2.94627825494394*G0_0_1_1_1 - 4.71404520791031*G0_1_0_0_0 - 5.59792868439351*G0_1_0_0_1 - 2.06239477846076*G0_1_0_1_0 + 4.12478955692151*G0_1_0_1_1 - 1.17851130197759*G0_1_1_0_0 + 20.0346921336188*G0_1_1_0_1 + 2.35702260395515*G0_1_1_1_0 + 13.5528799727421*G0_1_1_1_1 + 14.7313912747197*G1_0_0_0_0 + 20.6239477846076*G1_0_0_0_1 + 2.94627825494395*G1_0_0_1_0 + 2.94627825494395*G1_0_0_1_1 + 11.7851130197758*G1_0_1_0_0 + 16.2045304021917*G1_0_1_0_1 - 1.47313912747197*G1_0_1_1_0 + 2.94627825494394*G1_0_1_1_1 + 4.71404520791031*G1_1_0_0_0 + 5.59792868439351*G1_1_0_0_1 + 2.06239477846076*G1_1_0_1_0 - 4.12478955692151*G1_1_0_1_1 + 1.17851130197759*G1_1_1_0_0 - 20.0346921336188*G1_1_1_0_1 - 2.35702260395515*G1_1_1_1_0 - 13.5528799727421*G1_1_1_1_1;
    A[220] = 12.629537138523*G0_0_0_0_0 + 3.60843918243516*G0_0_0_0_1 + 3.60843918243513*G0_0_0_1_0 + 3.60843918243516*G0_0_0_1_1 - 1.80421959121759*G0_0_1_0_0 - 9.92320775169668*G0_0_1_0_1 + 11.7274273429142*G0_0_1_1_0 + 3.60843918243516*G0_0_1_1_1 + 11.186161465549*G0_1_0_0_0 + 18.2226178712975*G0_1_0_0_1 - 3.42801722331341*G0_1_0_1_0 + 7.93856620135733*G0_1_0_1_1 + 26.3416060317766*G0_1_1_0_0 + 15.5162884844712*G0_1_1_0_1 + 4.6909709371657*G0_1_1_1_0 + 12.629537138523*G0_1_1_1_1 - 12.629537138523*G1_0_0_0_0 - 3.60843918243516*G1_0_0_0_1 - 3.60843918243513*G1_0_0_1_0 - 3.60843918243516*G1_0_0_1_1 + 1.80421959121759*G1_0_1_0_0 + 9.92320775169668*G1_0_1_0_1 - 11.7274273429142*G1_0_1_1_0 - 3.60843918243516*G1_0_1_1_1 - 11.186161465549*G1_1_0_0_0 - 18.2226178712975*G1_1_0_0_1 + 3.42801722331341*G1_1_0_1_0 - 7.93856620135733*G1_1_0_1_1 - 26.3416060317766*G1_1_1_0_0 - 15.5162884844712*G1_1_1_0_1 - 4.6909709371657*G1_1_1_1_0 - 12.629537138523*G1_1_1_1_1;
    A[221] = -26.0416666666667*G0_0_0_0_0 - 8.33333333333329*G0_0_0_0_1 + 16.6666666666666*G0_0_0_1_0 + 16.6666666666667*G0_0_0_1_1 - 11.4583333333333*G0_0_1_0_0 - 9.89583333333331*G0_0_1_0_1 + 15.1041666666666*G0_0_1_1_0 + 16.6666666666666*G0_0_1_1_1 - 13.9583333333333*G0_1_0_0_0 + 1.35416666666668*G0_1_0_0_1 + 1.35416666666668*G0_1_0_1_0 - 0.833333333333307*G0_1_0_1_1 - 0.20833333333334*G0_1_1_0_0 - 6.4583333333333*G0_1_1_0_1 - 0.208333333333328*G0_1_1_1_0 - 26.0416666666666*G0_1_1_1_1 + 26.0416666666667*G1_0_0_0_0 + 8.33333333333329*G1_0_0_0_1 - 16.6666666666666*G1_0_0_1_0 - 16.6666666666667*G1_0_0_1_1 + 11.4583333333333*G1_0_1_0_0 + 9.89583333333331*G1_0_1_0_1 - 15.1041666666666*G1_0_1_1_0 - 16.6666666666666*G1_0_1_1_1 + 13.9583333333333*G1_1_0_0_0 - 1.35416666666668*G1_1_0_0_1 - 1.35416666666668*G1_1_0_1_0 + 0.833333333333307*G1_1_0_1_1 + 0.20833333333334*G1_1_1_0_0 + 6.4583333333333*G1_1_1_0_1 + 0.208333333333328*G1_1_1_1_0 + 26.0416666666666*G1_1_1_1_1;
    A[222] = 29.4627825494395*G0_0_0_0_0 + 14.7313912747197*G0_0_0_0_1 + 14.7313912747198*G0_0_0_1_0 - 2.94627825494395*G0_0_0_1_1 + 14.7313912747197*G0_0_1_0_0 + 14.7313912747197*G0_0_1_0_1 - 2.94627825494394*G0_0_1_1_0 - 2.94627825494394*G0_0_1_1_1 + 14.7313912747197*G0_1_0_0_0 + 0.589255650988792*G0_1_0_0_1 + 11.195857368787*G0_1_0_1_0 - 2.94627825494394*G0_1_0_1_1 + 0.5892556509888*G0_1_1_0_0 + 0.589255650988797*G0_1_1_0_1 - 2.94627825494394*G0_1_1_1_0 - 2.35702260395516*G0_1_1_1_1 - 29.4627825494395*G1_0_0_0_0 - 14.7313912747197*G1_0_0_0_1 - 14.7313912747198*G1_0_0_1_0 + 2.94627825494395*G1_0_0_1_1 - 14.7313912747197*G1_0_1_0_0 - 14.7313912747197*G1_0_1_0_1 + 2.94627825494394*G1_0_1_1_0 + 2.94627825494394*G1_0_1_1_1 - 14.7313912747197*G1_1_0_0_0 - 0.589255650988792*G1_1_0_0_1 - 11.195857368787*G1_1_0_1_0 + 2.94627825494394*G1_1_0_1_1 - 0.5892556509888*G1_1_1_0_0 - 0.589255650988797*G1_1_1_0_1 + 2.94627825494394*G1_1_1_1_0 + 2.35702260395516*G1_1_1_1_1;
    A[223] = -2.75335310107039e-14*G0_0_0_0_0 + 5.41265877365277*G0_0_0_0_1 + 5.41265877365275*G0_0_0_1_0 + 5.41265877365276*G0_0_0_1_1 + 16.2379763209582*G0_0_1_0_0 + 10.8253175473055*G0_0_1_0_1 + 10.8253175473055*G0_0_1_1_0 + 5.41265877365274*G0_0_1_1_1 - 9.74278579257493*G0_1_0_0_0 - 2.16506350946108*G0_1_0_0_1 - 2.16506350946106*G0_1_0_1_0 - 3.24759526419161*G0_1_0_1_1 + 3.24759526419164*G0_1_1_0_0 + 3.24759526419165*G0_1_1_0_1 + 24.8982303588026*G0_1_1_1_0 + 10.8253175473055*G0_1_1_1_1 + 2.75335310107039e-14*G1_0_0_0_0 - 5.41265877365277*G1_0_0_0_1 - 5.41265877365275*G1_0_0_1_0 - 5.41265877365276*G1_0_0_1_1 - 16.2379763209582*G1_0_1_0_0 - 10.8253175473055*G1_0_1_0_1 - 10.8253175473055*G1_0_1_1_0 - 5.41265877365274*G1_0_1_1_1 + 9.74278579257493*G1_1_0_0_0 + 2.16506350946108*G1_1_0_0_1 + 2.16506350946106*G1_1_0_1_0 + 3.24759526419161*G1_1_0_1_1 - 3.24759526419164*G1_1_1_0_0 - 3.24759526419165*G1_1_1_0_1 - 24.8982303588026*G1_1_1_1_0 - 10.8253175473055*G1_1_1_1_1;
    A[224] = 52.0833333333333*G0_0_0_0_0 + 26.0416666666666*G0_0_0_0_1 + 26.0416666666667*G0_0_0_1_0 + 1.04166666666668*G0_0_0_1_1 + 26.0416666666666*G0_0_1_0_0 + 26.0416666666666*G0_0_1_0_1 + 1.04166666666668*G0_0_1_1_0 + 1.04166666666667*G0_0_1_1_1 + 26.0416666666667*G0_1_0_0_0 + 1.04166666666668*G0_1_0_0_1 + 26.0416666666666*G0_1_0_1_0 + 1.04166666666667*G0_1_0_1_1 + 1.04166666666668*G0_1_1_0_0 + 1.04166666666667*G0_1_1_0_1 + 1.04166666666667*G0_1_1_1_0 + 45.8333333333332*G0_1_1_1_1 - 52.0833333333333*G1_0_0_0_0 - 26.0416666666666*G1_0_0_0_1 - 26.0416666666667*G1_0_0_1_0 - 1.04166666666668*G1_0_0_1_1 - 26.0416666666666*G1_0_1_0_0 - 26.0416666666666*G1_0_1_0_1 - 1.04166666666668*G1_0_1_1_0 - 1.04166666666667*G1_0_1_1_1 - 26.0416666666667*G1_1_0_0_0 - 1.04166666666668*G1_1_0_0_1 - 26.0416666666666*G1_1_0_1_0 - 1.04166666666667*G1_1_0_1_1 - 1.04166666666668*G1_1_1_0_0 - 1.04166666666667*G1_1_1_0_1 - 1.04166666666667*G1_1_1_1_0 - 45.8333333333332*G1_1_1_1_1;
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class UFC_Forms_0: public ufc::form
{
public:

  /// Constructor
  UFC_Forms_0() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Forms_0()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "(dXa0[0, 1]/dx1)(dXa1[0, 1]/dx0)(dXa2[0, 1]/dx1)(dXa3[0, 1]/dx0) | ((d/dXa1[0, 1])vi0[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14][a0[0, 1]])*((d/dXa3[0, 1])vi1[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14][a2[0, 1]])*dX(0) + -(dXa0[0, 1]/dx1)(dXa1[0, 1]/dx0)(dXa2[0, 1]/dx0)(dXa3[0, 1]/dx1) | ((d/dXa1[0, 1])vi0[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14][a0[0, 1]])*((d/dXa3[0, 1])vi1[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14][a2[0, 1]])*dX(0) + -(dXa0[0, 1]/dx0)(dXa1[0, 1]/dx1)(dXa2[0, 1]/dx1)(dXa3[0, 1]/dx0) | ((d/dXa1[0, 1])vi0[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14][a0[0, 1]])*((d/dXa3[0, 1])vi1[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14][a2[0, 1]])*dX(0) + (dXa0[0, 1]/dx0)(dXa1[0, 1]/dx1)(dXa2[0, 1]/dx0)(dXa3[0, 1]/dx1) | ((d/dXa1[0, 1])vi0[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14][a0[0, 1]])*((d/dXa3[0, 1])vi1[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14][a2[0, 1]])*dX(0)";
  }

  /// Return the rank of the global tensor (r)
  virtual unsigned int rank() const
  {
    return 2;
  }

  /// Return the number of coefficients (n)
  virtual unsigned int num_coefficients() const
  {
    return 0;
  }

  /// Return the number of cell integrals
  virtual unsigned int num_cell_integrals() const
  {
    return 1;
  }
  
  /// Return the number of exterior facet integrals
  virtual unsigned int num_exterior_facet_integrals() const
  {
    return 0;
  }
  
  /// Return the number of interior facet integrals
  virtual unsigned int num_interior_facet_integrals() const
  {
    return 0;
  }
    
  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new UFC_Forms_0_finite_element_0();
      break;
    case 1:
      return new UFC_Forms_0_finite_element_1();
      break;
    }
    return 0;
  }
  
  /// Create a new dof map for argument function i
  virtual ufc::dof_map* create_dof_map(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new UFC_Forms_0_dof_map_0();
      break;
    case 1:
      return new UFC_Forms_0_dof_map_1();
      break;
    }
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(unsigned int i) const
  {
    return new UFC_Forms_0_cell_integral_0();
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(unsigned int i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(unsigned int i) const
  {
    return 0;
  }

};

/// This class defines the interface for a finite element.

class UFC_Forms_1_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  UFC_Forms_1_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Forms_1_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "Nedelec finite element of degree 3 on a triangle";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 15;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 2;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
      
    // Compute determinant of Jacobian
    const double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    const double Jinv_00 =  J_11 / detJ;
    const double Jinv_01 = -J_01 / detJ;
    const double Jinv_10 = -J_10 / detJ;
    const double Jinv_11 =  J_00 / detJ;
    
    // Get coordinates and map to the reference (UFC) element
    double x = (element_coordinates[0][1]*element_coordinates[2][0] -\
                element_coordinates[0][0]*element_coordinates[2][1] +\
                J_11*coordinates[0] - J_01*coordinates[1]) / detJ;
    double y = (element_coordinates[1][1]*element_coordinates[0][0] -\
                element_coordinates[1][0]*element_coordinates[0][1] -\
                J_10*coordinates[0] + J_00*coordinates[1]) / detJ;
    
    // Map coordinates to the reference square
    if (std::abs(y - 1.0) < 1e-14)
      x = -1.0;
    else
      x = 2.0 *x/(1.0 - y) - 1.0;
    y = 2.0*y - 1.0;
    
    // Reset values
    values[0] = 0;
    values[1] = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_3_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.707106781186548*psitilde_a_0*scalings_y_0*psitilde_bs_0_0;
    const double basisvalue1 = 1.73205080756888*psitilde_a_1*scalings_y_1*psitilde_bs_1_0;
    const double basisvalue2 = psitilde_a_0*scalings_y_0*psitilde_bs_0_1;
    const double basisvalue3 = 2.73861278752583*psitilde_a_2*scalings_y_2*psitilde_bs_2_0;
    const double basisvalue4 = 2.12132034355964*psitilde_a_1*scalings_y_1*psitilde_bs_1_1;
    const double basisvalue5 = 1.22474487139159*psitilde_a_0*scalings_y_0*psitilde_bs_0_2;
    const double basisvalue6 = 3.74165738677394*psitilde_a_3*scalings_y_3*psitilde_bs_3_0;
    const double basisvalue7 = 3.16227766016838*psitilde_a_2*scalings_y_2*psitilde_bs_2_1;
    const double basisvalue8 = 2.44948974278318*psitilde_a_1*scalings_y_1*psitilde_bs_1_2;
    const double basisvalue9 = 1.4142135623731*psitilde_a_0*scalings_y_0*psitilde_bs_0_3;
    
    // Table(s) of coefficients
    const static double coefficients0[15][10] = \
    {{0, 0, 0, -0.169533172561123, 0.0841793787126842, -0.116642368703961, 0, -0.146820034222103, 0.0729014804399755, -0.101015254455221},
    {0, 0, 0, 0.0782460796435954, -0.168358757425369, 0.349927106111883, 0, 0.0677630927178939, -0.145802960879951, 0.303045763365663},
    {0, 0, 0, -0.0391230398217977, -0.0841793787126844, -0.349927106111883, 0, -0.0338815463589469, -0.0729014804399756, -0.303045763365663},
    {0, 0, 0, 0.169533172561123, 0.0841793787126844, 0.116642368703961, 0, 0.146820034222103, 0.0729014804399755, 0.101015254455221},
    {0, 0, 0, -0.0782460796435954, -0.168358757425369, -0.349927106111883, 0, -0.0677630927178939, -0.145802960879951, -0.303045763365663},
    {0, 0, 0, 0.0391230398217979, -0.0841793787126841, 0.349927106111883, 0, 0.033881546358947, -0.0729014804399757, 0.303045763365663},
    {0, 0, 0, 0.382536389368688, 0.303045763365663, 0.311046316543896, 0, -0.090350790290525, -0.145802960879951, -0.202030508910442},
    {0, 0, 0, -0.765072778737375, 0, -0.155523158271948, 0, 0.18070158058105, 0, 0.101015254455221},
    {0, 0, 0, 0.382536389368687, -0.303045763365663, 0.311046316543896, 0, -0.0903507902905252, 0.145802960879951, -0.202030508910442},
    {2, 0, 0, -0.18442777839083, -0.238095238095238, -0.824786098842323, 0, -0.159719141249985, -0.206196524710581, 0.285714285714286},
    {0, 2, 0, -0.338815463589469, 0.903978357455696, 0, 0, -0.293422798663482, -0.631345340345132, 0},
    {0, 0, 2, 0.0652050663696631, -0.420896893563422, 0.466569474815844, 0, 0.0564692439315783, -0.364507402199878, -1.01015254455221},
    {0, 0, 0, 0, 0.476190476190477, 0, 0, 0, 0.412393049421162, 0},
    {0, 0, 0, 0.677630927178939, 0, 0, 0, 0.586845597326964, 0, 0},
    {0, 0, 0, 0, 0.841793787126843, 0, 0, 0, 0.729014804399756, 0}};
    
    const static double coefficients1[15][10] = \
    {{0, 0, 0, 0.321678327423669, -0.134687005940295, 0.0972019739199675, 0.260579710864614, -0.12987926104263, 0.0976879837895672, -0.0631345340345132},
    {0, 0, 0, -0.165186168136479, 0.235702260395516, -0.272165526975908, -0.120267558860591, 0.146820034222103, -0.224536559755125, 0.176776695296637},
    {0, 0, 0, 0.0608580619450185, 0, 0.213844342623928, 0.0601337794302954, 0.0395284707521046, 0.112268279877562, -0.138895974875929},
    {0, 0, 0, 0.491211499984792, 0.218866384652979, 0.213844342623928, -0.260579710864614, 0.0169407731794736, -0.0247865033495917, 0.0378807204207079},
    {0, 0, 0, -0.243432247780074, -0.404061017820885, -0.622092633087792, 0.120267558860591, 0.0790569415042092, 0.0787335988751736, -0.126269068069026},
    {0, 0, 0, 0.0999811017668161, -0.0841793787126841, 0.563771448735811, -0.0601337794302954, 0.0734100171110518, -0.185169760317538, 0.164149788489734},
    {0, 0, 0, 0.169533172561123, 0.0841793787126842, 0.116642368703961, 0.160356745147455, 0.0677630927178939, 0.0320766513935891, -0.0757614408414156},
    {0, 0, 0, -0.382536389368687, 0.0673435029701472, -0.077761579135974, -0.320713490294909, 0.090350790290525, -0.0641533027871784, 0.0505076272276105},
    {0, 0, 0, 0.213003216807564, -0.218866384652979, 0.194403947839935, 0.160356745147454, -0.158113883008419, 0.17787961227354, -0.126269068069026},
    {0, 0, 0, 0.307379630651382, 0.238095238095238, -0.274928699614108, 0.283473354756921, 0.0798595706249923, -0.226816177181638, 0.178571428571429},
    {0, 0, 0, 0.527046276694729, 0.583211843519804, -0.168358757425368, 0.52077380612206, 0.342326598440728, -0.290418856558761, 0.109352220659964},
    {0, 0, 0, -0.173880176985767, 0.168358757425369, 0.680413817439771, -0.100222965717159, 0.31058084162368, 0.298896069803899, -0.441941738241592},
    {2, 0, 0, -0.799187039693594, 0.238095238095239, -0.274928699614108, 0, -0.31943828249997, 0.206196524710581, -0.0714285714285716},
    {0, 2, 0, 0.33881546358947, -0.262445329583911, 0, -1.04154761224412, 0.293422798663482, -0.0505076272276108, 0},
    {0, 0, 2, 0.412965420341197, 0.420896893563421, -0.894258160063699, 0, -0.564692439315782, 0.364507402199878, -0.126269068069027}};
    
    // Extract relevant coefficients
    const double coeff0_0 = coefficients0[dof][0];
    const double coeff0_1 = coefficients0[dof][1];
    const double coeff0_2 = coefficients0[dof][2];
    const double coeff0_3 = coefficients0[dof][3];
    const double coeff0_4 = coefficients0[dof][4];
    const double coeff0_5 = coefficients0[dof][5];
    const double coeff0_6 = coefficients0[dof][6];
    const double coeff0_7 = coefficients0[dof][7];
    const double coeff0_8 = coefficients0[dof][8];
    const double coeff0_9 = coefficients0[dof][9];
    const double coeff1_0 = coefficients1[dof][0];
    const double coeff1_1 = coefficients1[dof][1];
    const double coeff1_2 = coefficients1[dof][2];
    const double coeff1_3 = coefficients1[dof][3];
    const double coeff1_4 = coefficients1[dof][4];
    const double coeff1_5 = coefficients1[dof][5];
    const double coeff1_6 = coefficients1[dof][6];
    const double coeff1_7 = coefficients1[dof][7];
    const double coeff1_8 = coefficients1[dof][8];
    const double coeff1_9 = coefficients1[dof][9];
    
    // Compute value(s)
    const double tmp0_0 = coeff0_0*basisvalue0 + coeff0_1*basisvalue1 + coeff0_2*basisvalue2 + coeff0_3*basisvalue3 + coeff0_4*basisvalue4 + coeff0_5*basisvalue5 + coeff0_6*basisvalue6 + coeff0_7*basisvalue7 + coeff0_8*basisvalue8 + coeff0_9*basisvalue9;
    const double tmp0_1 = coeff1_0*basisvalue0 + coeff1_1*basisvalue1 + coeff1_2*basisvalue2 + coeff1_3*basisvalue3 + coeff1_4*basisvalue4 + coeff1_5*basisvalue5 + coeff1_6*basisvalue6 + coeff1_7*basisvalue7 + coeff1_8*basisvalue8 + coeff1_9*basisvalue9;
    // Using covariant Piola transform to map values back to the physical element
    values[0] = (Jinv_00*tmp0_0 + Jinv_10*tmp0_1);
    values[1] = (Jinv_01*tmp0_0 + Jinv_11*tmp0_1);
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis() is not yet implemented.");
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
      
    // Compute determinant of Jacobian
    const double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    const double Jinv_00 =  J_11 / detJ;
    const double Jinv_01 = -J_01 / detJ;
    const double Jinv_10 = -J_10 / detJ;
    const double Jinv_11 =  J_00 / detJ;
    
    // Get coordinates and map to the reference (UFC) element
    double x = (element_coordinates[0][1]*element_coordinates[2][0] -\
                element_coordinates[0][0]*element_coordinates[2][1] +\
                J_11*coordinates[0] - J_01*coordinates[1]) / detJ;
    double y = (element_coordinates[1][1]*element_coordinates[0][0] -\
                element_coordinates[1][0]*element_coordinates[0][1] -\
                J_10*coordinates[0] + J_00*coordinates[1]) / detJ;
    
    // Map coordinates to the reference square
    if (std::abs(y - 1.0) < 1e-14)
      x = -1.0;
    else
      x = 2.0 *x/(1.0 - y) - 1.0;
    y = 2.0*y - 1.0;
    
    // Compute number of derivatives
    unsigned int num_derivatives = 1;
    
    for (unsigned int j = 0; j < n; j++)
      num_derivatives *= 2;
    
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      combinations[j] = new unsigned int [n];
      for (unsigned int k = 0; k < n; k++)
        combinations[j][k] = 0;
    }
        
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] =  {{J_11 / detJ, -J_01 / detJ}, {-J_10 / detJ, J_00 / detJ}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values
    for (unsigned int j = 0; j < 2*num_derivatives; j++)
      values[j] = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_3_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.707106781186548*psitilde_a_0*scalings_y_0*psitilde_bs_0_0;
    const double basisvalue1 = 1.73205080756888*psitilde_a_1*scalings_y_1*psitilde_bs_1_0;
    const double basisvalue2 = psitilde_a_0*scalings_y_0*psitilde_bs_0_1;
    const double basisvalue3 = 2.73861278752583*psitilde_a_2*scalings_y_2*psitilde_bs_2_0;
    const double basisvalue4 = 2.12132034355964*psitilde_a_1*scalings_y_1*psitilde_bs_1_1;
    const double basisvalue5 = 1.22474487139159*psitilde_a_0*scalings_y_0*psitilde_bs_0_2;
    const double basisvalue6 = 3.74165738677394*psitilde_a_3*scalings_y_3*psitilde_bs_3_0;
    const double basisvalue7 = 3.16227766016838*psitilde_a_2*scalings_y_2*psitilde_bs_2_1;
    const double basisvalue8 = 2.44948974278318*psitilde_a_1*scalings_y_1*psitilde_bs_1_2;
    const double basisvalue9 = 1.4142135623731*psitilde_a_0*scalings_y_0*psitilde_bs_0_3;
    
    // Table(s) of coefficients
    const static double coefficients0[15][10] = \
    {{0, 0, 0, -0.169533172561123, 0.0841793787126842, -0.116642368703961, 0, -0.146820034222103, 0.0729014804399755, -0.101015254455221},
    {0, 0, 0, 0.0782460796435954, -0.168358757425369, 0.349927106111883, 0, 0.0677630927178939, -0.145802960879951, 0.303045763365663},
    {0, 0, 0, -0.0391230398217977, -0.0841793787126844, -0.349927106111883, 0, -0.0338815463589469, -0.0729014804399756, -0.303045763365663},
    {0, 0, 0, 0.169533172561123, 0.0841793787126844, 0.116642368703961, 0, 0.146820034222103, 0.0729014804399755, 0.101015254455221},
    {0, 0, 0, -0.0782460796435954, -0.168358757425369, -0.349927106111883, 0, -0.0677630927178939, -0.145802960879951, -0.303045763365663},
    {0, 0, 0, 0.0391230398217979, -0.0841793787126841, 0.349927106111883, 0, 0.033881546358947, -0.0729014804399757, 0.303045763365663},
    {0, 0, 0, 0.382536389368688, 0.303045763365663, 0.311046316543896, 0, -0.090350790290525, -0.145802960879951, -0.202030508910442},
    {0, 0, 0, -0.765072778737375, 0, -0.155523158271948, 0, 0.18070158058105, 0, 0.101015254455221},
    {0, 0, 0, 0.382536389368687, -0.303045763365663, 0.311046316543896, 0, -0.0903507902905252, 0.145802960879951, -0.202030508910442},
    {2, 0, 0, -0.18442777839083, -0.238095238095238, -0.824786098842323, 0, -0.159719141249985, -0.206196524710581, 0.285714285714286},
    {0, 2, 0, -0.338815463589469, 0.903978357455696, 0, 0, -0.293422798663482, -0.631345340345132, 0},
    {0, 0, 2, 0.0652050663696631, -0.420896893563422, 0.466569474815844, 0, 0.0564692439315783, -0.364507402199878, -1.01015254455221},
    {0, 0, 0, 0, 0.476190476190477, 0, 0, 0, 0.412393049421162, 0},
    {0, 0, 0, 0.677630927178939, 0, 0, 0, 0.586845597326964, 0, 0},
    {0, 0, 0, 0, 0.841793787126843, 0, 0, 0, 0.729014804399756, 0}};
    
    const static double coefficients1[15][10] = \
    {{0, 0, 0, 0.321678327423669, -0.134687005940295, 0.0972019739199675, 0.260579710864614, -0.12987926104263, 0.0976879837895672, -0.0631345340345132},
    {0, 0, 0, -0.165186168136479, 0.235702260395516, -0.272165526975908, -0.120267558860591, 0.146820034222103, -0.224536559755125, 0.176776695296637},
    {0, 0, 0, 0.0608580619450185, 0, 0.213844342623928, 0.0601337794302954, 0.0395284707521046, 0.112268279877562, -0.138895974875929},
    {0, 0, 0, 0.491211499984792, 0.218866384652979, 0.213844342623928, -0.260579710864614, 0.0169407731794736, -0.0247865033495917, 0.0378807204207079},
    {0, 0, 0, -0.243432247780074, -0.404061017820885, -0.622092633087792, 0.120267558860591, 0.0790569415042092, 0.0787335988751736, -0.126269068069026},
    {0, 0, 0, 0.0999811017668161, -0.0841793787126841, 0.563771448735811, -0.0601337794302954, 0.0734100171110518, -0.185169760317538, 0.164149788489734},
    {0, 0, 0, 0.169533172561123, 0.0841793787126842, 0.116642368703961, 0.160356745147455, 0.0677630927178939, 0.0320766513935891, -0.0757614408414156},
    {0, 0, 0, -0.382536389368687, 0.0673435029701472, -0.077761579135974, -0.320713490294909, 0.090350790290525, -0.0641533027871784, 0.0505076272276105},
    {0, 0, 0, 0.213003216807564, -0.218866384652979, 0.194403947839935, 0.160356745147454, -0.158113883008419, 0.17787961227354, -0.126269068069026},
    {0, 0, 0, 0.307379630651382, 0.238095238095238, -0.274928699614108, 0.283473354756921, 0.0798595706249923, -0.226816177181638, 0.178571428571429},
    {0, 0, 0, 0.527046276694729, 0.583211843519804, -0.168358757425368, 0.52077380612206, 0.342326598440728, -0.290418856558761, 0.109352220659964},
    {0, 0, 0, -0.173880176985767, 0.168358757425369, 0.680413817439771, -0.100222965717159, 0.31058084162368, 0.298896069803899, -0.441941738241592},
    {2, 0, 0, -0.799187039693594, 0.238095238095239, -0.274928699614108, 0, -0.31943828249997, 0.206196524710581, -0.0714285714285716},
    {0, 2, 0, 0.33881546358947, -0.262445329583911, 0, -1.04154761224412, 0.293422798663482, -0.0505076272276108, 0},
    {0, 0, 2, 0.412965420341197, 0.420896893563421, -0.894258160063699, 0, -0.564692439315782, 0.364507402199878, -0.126269068069027}};
    
    // Interesting (new) part
    // Tables of derivatives of the polynomial base (transpose)
    const static double dmats0[10][10] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.89897948556636, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 9.48683298050514, 0, 0, 0, 0, 0, 0, 0, 0},
    {4, 0, 7.07106781186548, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.29150262212918, 0, -2.99332590941915, 13.6626010212795, 0, 0.611010092660779, 0, 0, 0, 0},
    {0, 4.38178046004133, 0, 0, 12.5219806739988, 0, 0, 0, 0, 0},
    {3.46410161513775, 0, 7.83836717690617, 0, 0, 8.4, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    const static double dmats1[10][10] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.44948974278318, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.24264068711929, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.58198889747161, 4.74341649025257, -0.912870929175276, 0, 0, 0, 0, 0, 0, 0},
    {2, 6.12372435695795, 3.53553390593274, 0, 0, 0, 0, 0, 0, 0},
    {-2.3094010767585, 0, 8.16496580927726, 0, 0, 0, 0, 0, 0, 0},
    {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.305505046330391, 0, 0, 0, 0},
    {2.23606797749979, 2.19089023002067, 2.5298221281347, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0, 0, 0, 0},
    {1.73205080756888, -5.09116882454314, 3.91918358845309, 0, 9.69948452238571, 4.2, 0, 0, 0, 0},
    {5, 0, -2.82842712474619, 0, 0, 12.1243556529821, 0, 0, 0, 0}};
    
    // Compute reference derivatives
    // Declare pointer to array of derivatives on FIAT element
    double *derivatives = new double [2*num_derivatives];
    
    // Declare coefficients
    double coeff0_0 = 0;
    double coeff0_1 = 0;
    double coeff0_2 = 0;
    double coeff0_3 = 0;
    double coeff0_4 = 0;
    double coeff0_5 = 0;
    double coeff0_6 = 0;
    double coeff0_7 = 0;
    double coeff0_8 = 0;
    double coeff0_9 = 0;
    double coeff1_0 = 0;
    double coeff1_1 = 0;
    double coeff1_2 = 0;
    double coeff1_3 = 0;
    double coeff1_4 = 0;
    double coeff1_5 = 0;
    double coeff1_6 = 0;
    double coeff1_7 = 0;
    double coeff1_8 = 0;
    double coeff1_9 = 0;
    
    // Declare new coefficients
    double new_coeff0_0 = 0;
    double new_coeff0_1 = 0;
    double new_coeff0_2 = 0;
    double new_coeff0_3 = 0;
    double new_coeff0_4 = 0;
    double new_coeff0_5 = 0;
    double new_coeff0_6 = 0;
    double new_coeff0_7 = 0;
    double new_coeff0_8 = 0;
    double new_coeff0_9 = 0;
    double new_coeff1_0 = 0;
    double new_coeff1_1 = 0;
    double new_coeff1_2 = 0;
    double new_coeff1_3 = 0;
    double new_coeff1_4 = 0;
    double new_coeff1_5 = 0;
    double new_coeff1_6 = 0;
    double new_coeff1_7 = 0;
    double new_coeff1_8 = 0;
    double new_coeff1_9 = 0;
    
    // Loop possible derivatives
    for (unsigned int deriv_num = 0; deriv_num < num_derivatives; deriv_num++)
    {
      // Get values from coefficients array
      new_coeff0_0 = coefficients0[dof][0];
      new_coeff0_1 = coefficients0[dof][1];
      new_coeff0_2 = coefficients0[dof][2];
      new_coeff0_3 = coefficients0[dof][3];
      new_coeff0_4 = coefficients0[dof][4];
      new_coeff0_5 = coefficients0[dof][5];
      new_coeff0_6 = coefficients0[dof][6];
      new_coeff0_7 = coefficients0[dof][7];
      new_coeff0_8 = coefficients0[dof][8];
      new_coeff0_9 = coefficients0[dof][9];
      new_coeff1_0 = coefficients1[dof][0];
      new_coeff1_1 = coefficients1[dof][1];
      new_coeff1_2 = coefficients1[dof][2];
      new_coeff1_3 = coefficients1[dof][3];
      new_coeff1_4 = coefficients1[dof][4];
      new_coeff1_5 = coefficients1[dof][5];
      new_coeff1_6 = coefficients1[dof][6];
      new_coeff1_7 = coefficients1[dof][7];
      new_coeff1_8 = coefficients1[dof][8];
      new_coeff1_9 = coefficients1[dof][9];
    
      // Loop derivative order
      for (unsigned int j = 0; j < n; j++)
      {
        // Update old coefficients
        coeff0_0 = new_coeff0_0;
        coeff0_1 = new_coeff0_1;
        coeff0_2 = new_coeff0_2;
        coeff0_3 = new_coeff0_3;
        coeff0_4 = new_coeff0_4;
        coeff0_5 = new_coeff0_5;
        coeff0_6 = new_coeff0_6;
        coeff0_7 = new_coeff0_7;
        coeff0_8 = new_coeff0_8;
        coeff0_9 = new_coeff0_9;
        coeff1_0 = new_coeff1_0;
        coeff1_1 = new_coeff1_1;
        coeff1_2 = new_coeff1_2;
        coeff1_3 = new_coeff1_3;
        coeff1_4 = new_coeff1_4;
        coeff1_5 = new_coeff1_5;
        coeff1_6 = new_coeff1_6;
        coeff1_7 = new_coeff1_7;
        coeff1_8 = new_coeff1_8;
        coeff1_9 = new_coeff1_9;
    
        if(combinations[deriv_num][j] == 0)
        {
          new_coeff0_0 = coeff0_0*dmats0[0][0] + coeff0_1*dmats0[1][0] + coeff0_2*dmats0[2][0] + coeff0_3*dmats0[3][0] + coeff0_4*dmats0[4][0] + coeff0_5*dmats0[5][0] + coeff0_6*dmats0[6][0] + coeff0_7*dmats0[7][0] + coeff0_8*dmats0[8][0] + coeff0_9*dmats0[9][0];
          new_coeff0_1 = coeff0_0*dmats0[0][1] + coeff0_1*dmats0[1][1] + coeff0_2*dmats0[2][1] + coeff0_3*dmats0[3][1] + coeff0_4*dmats0[4][1] + coeff0_5*dmats0[5][1] + coeff0_6*dmats0[6][1] + coeff0_7*dmats0[7][1] + coeff0_8*dmats0[8][1] + coeff0_9*dmats0[9][1];
          new_coeff0_2 = coeff0_0*dmats0[0][2] + coeff0_1*dmats0[1][2] + coeff0_2*dmats0[2][2] + coeff0_3*dmats0[3][2] + coeff0_4*dmats0[4][2] + coeff0_5*dmats0[5][2] + coeff0_6*dmats0[6][2] + coeff0_7*dmats0[7][2] + coeff0_8*dmats0[8][2] + coeff0_9*dmats0[9][2];
          new_coeff0_3 = coeff0_0*dmats0[0][3] + coeff0_1*dmats0[1][3] + coeff0_2*dmats0[2][3] + coeff0_3*dmats0[3][3] + coeff0_4*dmats0[4][3] + coeff0_5*dmats0[5][3] + coeff0_6*dmats0[6][3] + coeff0_7*dmats0[7][3] + coeff0_8*dmats0[8][3] + coeff0_9*dmats0[9][3];
          new_coeff0_4 = coeff0_0*dmats0[0][4] + coeff0_1*dmats0[1][4] + coeff0_2*dmats0[2][4] + coeff0_3*dmats0[3][4] + coeff0_4*dmats0[4][4] + coeff0_5*dmats0[5][4] + coeff0_6*dmats0[6][4] + coeff0_7*dmats0[7][4] + coeff0_8*dmats0[8][4] + coeff0_9*dmats0[9][4];
          new_coeff0_5 = coeff0_0*dmats0[0][5] + coeff0_1*dmats0[1][5] + coeff0_2*dmats0[2][5] + coeff0_3*dmats0[3][5] + coeff0_4*dmats0[4][5] + coeff0_5*dmats0[5][5] + coeff0_6*dmats0[6][5] + coeff0_7*dmats0[7][5] + coeff0_8*dmats0[8][5] + coeff0_9*dmats0[9][5];
          new_coeff0_6 = coeff0_0*dmats0[0][6] + coeff0_1*dmats0[1][6] + coeff0_2*dmats0[2][6] + coeff0_3*dmats0[3][6] + coeff0_4*dmats0[4][6] + coeff0_5*dmats0[5][6] + coeff0_6*dmats0[6][6] + coeff0_7*dmats0[7][6] + coeff0_8*dmats0[8][6] + coeff0_9*dmats0[9][6];
          new_coeff0_7 = coeff0_0*dmats0[0][7] + coeff0_1*dmats0[1][7] + coeff0_2*dmats0[2][7] + coeff0_3*dmats0[3][7] + coeff0_4*dmats0[4][7] + coeff0_5*dmats0[5][7] + coeff0_6*dmats0[6][7] + coeff0_7*dmats0[7][7] + coeff0_8*dmats0[8][7] + coeff0_9*dmats0[9][7];
          new_coeff0_8 = coeff0_0*dmats0[0][8] + coeff0_1*dmats0[1][8] + coeff0_2*dmats0[2][8] + coeff0_3*dmats0[3][8] + coeff0_4*dmats0[4][8] + coeff0_5*dmats0[5][8] + coeff0_6*dmats0[6][8] + coeff0_7*dmats0[7][8] + coeff0_8*dmats0[8][8] + coeff0_9*dmats0[9][8];
          new_coeff0_9 = coeff0_0*dmats0[0][9] + coeff0_1*dmats0[1][9] + coeff0_2*dmats0[2][9] + coeff0_3*dmats0[3][9] + coeff0_4*dmats0[4][9] + coeff0_5*dmats0[5][9] + coeff0_6*dmats0[6][9] + coeff0_7*dmats0[7][9] + coeff0_8*dmats0[8][9] + coeff0_9*dmats0[9][9];
          new_coeff1_0 = coeff1_0*dmats0[0][0] + coeff1_1*dmats0[1][0] + coeff1_2*dmats0[2][0] + coeff1_3*dmats0[3][0] + coeff1_4*dmats0[4][0] + coeff1_5*dmats0[5][0] + coeff1_6*dmats0[6][0] + coeff1_7*dmats0[7][0] + coeff1_8*dmats0[8][0] + coeff1_9*dmats0[9][0];
          new_coeff1_1 = coeff1_0*dmats0[0][1] + coeff1_1*dmats0[1][1] + coeff1_2*dmats0[2][1] + coeff1_3*dmats0[3][1] + coeff1_4*dmats0[4][1] + coeff1_5*dmats0[5][1] + coeff1_6*dmats0[6][1] + coeff1_7*dmats0[7][1] + coeff1_8*dmats0[8][1] + coeff1_9*dmats0[9][1];
          new_coeff1_2 = coeff1_0*dmats0[0][2] + coeff1_1*dmats0[1][2] + coeff1_2*dmats0[2][2] + coeff1_3*dmats0[3][2] + coeff1_4*dmats0[4][2] + coeff1_5*dmats0[5][2] + coeff1_6*dmats0[6][2] + coeff1_7*dmats0[7][2] + coeff1_8*dmats0[8][2] + coeff1_9*dmats0[9][2];
          new_coeff1_3 = coeff1_0*dmats0[0][3] + coeff1_1*dmats0[1][3] + coeff1_2*dmats0[2][3] + coeff1_3*dmats0[3][3] + coeff1_4*dmats0[4][3] + coeff1_5*dmats0[5][3] + coeff1_6*dmats0[6][3] + coeff1_7*dmats0[7][3] + coeff1_8*dmats0[8][3] + coeff1_9*dmats0[9][3];
          new_coeff1_4 = coeff1_0*dmats0[0][4] + coeff1_1*dmats0[1][4] + coeff1_2*dmats0[2][4] + coeff1_3*dmats0[3][4] + coeff1_4*dmats0[4][4] + coeff1_5*dmats0[5][4] + coeff1_6*dmats0[6][4] + coeff1_7*dmats0[7][4] + coeff1_8*dmats0[8][4] + coeff1_9*dmats0[9][4];
          new_coeff1_5 = coeff1_0*dmats0[0][5] + coeff1_1*dmats0[1][5] + coeff1_2*dmats0[2][5] + coeff1_3*dmats0[3][5] + coeff1_4*dmats0[4][5] + coeff1_5*dmats0[5][5] + coeff1_6*dmats0[6][5] + coeff1_7*dmats0[7][5] + coeff1_8*dmats0[8][5] + coeff1_9*dmats0[9][5];
          new_coeff1_6 = coeff1_0*dmats0[0][6] + coeff1_1*dmats0[1][6] + coeff1_2*dmats0[2][6] + coeff1_3*dmats0[3][6] + coeff1_4*dmats0[4][6] + coeff1_5*dmats0[5][6] + coeff1_6*dmats0[6][6] + coeff1_7*dmats0[7][6] + coeff1_8*dmats0[8][6] + coeff1_9*dmats0[9][6];
          new_coeff1_7 = coeff1_0*dmats0[0][7] + coeff1_1*dmats0[1][7] + coeff1_2*dmats0[2][7] + coeff1_3*dmats0[3][7] + coeff1_4*dmats0[4][7] + coeff1_5*dmats0[5][7] + coeff1_6*dmats0[6][7] + coeff1_7*dmats0[7][7] + coeff1_8*dmats0[8][7] + coeff1_9*dmats0[9][7];
          new_coeff1_8 = coeff1_0*dmats0[0][8] + coeff1_1*dmats0[1][8] + coeff1_2*dmats0[2][8] + coeff1_3*dmats0[3][8] + coeff1_4*dmats0[4][8] + coeff1_5*dmats0[5][8] + coeff1_6*dmats0[6][8] + coeff1_7*dmats0[7][8] + coeff1_8*dmats0[8][8] + coeff1_9*dmats0[9][8];
          new_coeff1_9 = coeff1_0*dmats0[0][9] + coeff1_1*dmats0[1][9] + coeff1_2*dmats0[2][9] + coeff1_3*dmats0[3][9] + coeff1_4*dmats0[4][9] + coeff1_5*dmats0[5][9] + coeff1_6*dmats0[6][9] + coeff1_7*dmats0[7][9] + coeff1_8*dmats0[8][9] + coeff1_9*dmats0[9][9];
        }
        if(combinations[deriv_num][j] == 1)
        {
          new_coeff0_0 = coeff0_0*dmats1[0][0] + coeff0_1*dmats1[1][0] + coeff0_2*dmats1[2][0] + coeff0_3*dmats1[3][0] + coeff0_4*dmats1[4][0] + coeff0_5*dmats1[5][0] + coeff0_6*dmats1[6][0] + coeff0_7*dmats1[7][0] + coeff0_8*dmats1[8][0] + coeff0_9*dmats1[9][0];
          new_coeff0_1 = coeff0_0*dmats1[0][1] + coeff0_1*dmats1[1][1] + coeff0_2*dmats1[2][1] + coeff0_3*dmats1[3][1] + coeff0_4*dmats1[4][1] + coeff0_5*dmats1[5][1] + coeff0_6*dmats1[6][1] + coeff0_7*dmats1[7][1] + coeff0_8*dmats1[8][1] + coeff0_9*dmats1[9][1];
          new_coeff0_2 = coeff0_0*dmats1[0][2] + coeff0_1*dmats1[1][2] + coeff0_2*dmats1[2][2] + coeff0_3*dmats1[3][2] + coeff0_4*dmats1[4][2] + coeff0_5*dmats1[5][2] + coeff0_6*dmats1[6][2] + coeff0_7*dmats1[7][2] + coeff0_8*dmats1[8][2] + coeff0_9*dmats1[9][2];
          new_coeff0_3 = coeff0_0*dmats1[0][3] + coeff0_1*dmats1[1][3] + coeff0_2*dmats1[2][3] + coeff0_3*dmats1[3][3] + coeff0_4*dmats1[4][3] + coeff0_5*dmats1[5][3] + coeff0_6*dmats1[6][3] + coeff0_7*dmats1[7][3] + coeff0_8*dmats1[8][3] + coeff0_9*dmats1[9][3];
          new_coeff0_4 = coeff0_0*dmats1[0][4] + coeff0_1*dmats1[1][4] + coeff0_2*dmats1[2][4] + coeff0_3*dmats1[3][4] + coeff0_4*dmats1[4][4] + coeff0_5*dmats1[5][4] + coeff0_6*dmats1[6][4] + coeff0_7*dmats1[7][4] + coeff0_8*dmats1[8][4] + coeff0_9*dmats1[9][4];
          new_coeff0_5 = coeff0_0*dmats1[0][5] + coeff0_1*dmats1[1][5] + coeff0_2*dmats1[2][5] + coeff0_3*dmats1[3][5] + coeff0_4*dmats1[4][5] + coeff0_5*dmats1[5][5] + coeff0_6*dmats1[6][5] + coeff0_7*dmats1[7][5] + coeff0_8*dmats1[8][5] + coeff0_9*dmats1[9][5];
          new_coeff0_6 = coeff0_0*dmats1[0][6] + coeff0_1*dmats1[1][6] + coeff0_2*dmats1[2][6] + coeff0_3*dmats1[3][6] + coeff0_4*dmats1[4][6] + coeff0_5*dmats1[5][6] + coeff0_6*dmats1[6][6] + coeff0_7*dmats1[7][6] + coeff0_8*dmats1[8][6] + coeff0_9*dmats1[9][6];
          new_coeff0_7 = coeff0_0*dmats1[0][7] + coeff0_1*dmats1[1][7] + coeff0_2*dmats1[2][7] + coeff0_3*dmats1[3][7] + coeff0_4*dmats1[4][7] + coeff0_5*dmats1[5][7] + coeff0_6*dmats1[6][7] + coeff0_7*dmats1[7][7] + coeff0_8*dmats1[8][7] + coeff0_9*dmats1[9][7];
          new_coeff0_8 = coeff0_0*dmats1[0][8] + coeff0_1*dmats1[1][8] + coeff0_2*dmats1[2][8] + coeff0_3*dmats1[3][8] + coeff0_4*dmats1[4][8] + coeff0_5*dmats1[5][8] + coeff0_6*dmats1[6][8] + coeff0_7*dmats1[7][8] + coeff0_8*dmats1[8][8] + coeff0_9*dmats1[9][8];
          new_coeff0_9 = coeff0_0*dmats1[0][9] + coeff0_1*dmats1[1][9] + coeff0_2*dmats1[2][9] + coeff0_3*dmats1[3][9] + coeff0_4*dmats1[4][9] + coeff0_5*dmats1[5][9] + coeff0_6*dmats1[6][9] + coeff0_7*dmats1[7][9] + coeff0_8*dmats1[8][9] + coeff0_9*dmats1[9][9];
          new_coeff1_0 = coeff1_0*dmats1[0][0] + coeff1_1*dmats1[1][0] + coeff1_2*dmats1[2][0] + coeff1_3*dmats1[3][0] + coeff1_4*dmats1[4][0] + coeff1_5*dmats1[5][0] + coeff1_6*dmats1[6][0] + coeff1_7*dmats1[7][0] + coeff1_8*dmats1[8][0] + coeff1_9*dmats1[9][0];
          new_coeff1_1 = coeff1_0*dmats1[0][1] + coeff1_1*dmats1[1][1] + coeff1_2*dmats1[2][1] + coeff1_3*dmats1[3][1] + coeff1_4*dmats1[4][1] + coeff1_5*dmats1[5][1] + coeff1_6*dmats1[6][1] + coeff1_7*dmats1[7][1] + coeff1_8*dmats1[8][1] + coeff1_9*dmats1[9][1];
          new_coeff1_2 = coeff1_0*dmats1[0][2] + coeff1_1*dmats1[1][2] + coeff1_2*dmats1[2][2] + coeff1_3*dmats1[3][2] + coeff1_4*dmats1[4][2] + coeff1_5*dmats1[5][2] + coeff1_6*dmats1[6][2] + coeff1_7*dmats1[7][2] + coeff1_8*dmats1[8][2] + coeff1_9*dmats1[9][2];
          new_coeff1_3 = coeff1_0*dmats1[0][3] + coeff1_1*dmats1[1][3] + coeff1_2*dmats1[2][3] + coeff1_3*dmats1[3][3] + coeff1_4*dmats1[4][3] + coeff1_5*dmats1[5][3] + coeff1_6*dmats1[6][3] + coeff1_7*dmats1[7][3] + coeff1_8*dmats1[8][3] + coeff1_9*dmats1[9][3];
          new_coeff1_4 = coeff1_0*dmats1[0][4] + coeff1_1*dmats1[1][4] + coeff1_2*dmats1[2][4] + coeff1_3*dmats1[3][4] + coeff1_4*dmats1[4][4] + coeff1_5*dmats1[5][4] + coeff1_6*dmats1[6][4] + coeff1_7*dmats1[7][4] + coeff1_8*dmats1[8][4] + coeff1_9*dmats1[9][4];
          new_coeff1_5 = coeff1_0*dmats1[0][5] + coeff1_1*dmats1[1][5] + coeff1_2*dmats1[2][5] + coeff1_3*dmats1[3][5] + coeff1_4*dmats1[4][5] + coeff1_5*dmats1[5][5] + coeff1_6*dmats1[6][5] + coeff1_7*dmats1[7][5] + coeff1_8*dmats1[8][5] + coeff1_9*dmats1[9][5];
          new_coeff1_6 = coeff1_0*dmats1[0][6] + coeff1_1*dmats1[1][6] + coeff1_2*dmats1[2][6] + coeff1_3*dmats1[3][6] + coeff1_4*dmats1[4][6] + coeff1_5*dmats1[5][6] + coeff1_6*dmats1[6][6] + coeff1_7*dmats1[7][6] + coeff1_8*dmats1[8][6] + coeff1_9*dmats1[9][6];
          new_coeff1_7 = coeff1_0*dmats1[0][7] + coeff1_1*dmats1[1][7] + coeff1_2*dmats1[2][7] + coeff1_3*dmats1[3][7] + coeff1_4*dmats1[4][7] + coeff1_5*dmats1[5][7] + coeff1_6*dmats1[6][7] + coeff1_7*dmats1[7][7] + coeff1_8*dmats1[8][7] + coeff1_9*dmats1[9][7];
          new_coeff1_8 = coeff1_0*dmats1[0][8] + coeff1_1*dmats1[1][8] + coeff1_2*dmats1[2][8] + coeff1_3*dmats1[3][8] + coeff1_4*dmats1[4][8] + coeff1_5*dmats1[5][8] + coeff1_6*dmats1[6][8] + coeff1_7*dmats1[7][8] + coeff1_8*dmats1[8][8] + coeff1_9*dmats1[9][8];
          new_coeff1_9 = coeff1_0*dmats1[0][9] + coeff1_1*dmats1[1][9] + coeff1_2*dmats1[2][9] + coeff1_3*dmats1[3][9] + coeff1_4*dmats1[4][9] + coeff1_5*dmats1[5][9] + coeff1_6*dmats1[6][9] + coeff1_7*dmats1[7][9] + coeff1_8*dmats1[8][9] + coeff1_9*dmats1[9][9];
        }
    
      }
      // Compute derivatives on reference element as dot product of coefficients and basisvalues
      // Correct values by the covariant Piola transform
      const double tmp0_0 = new_coeff0_0*basisvalue0 + new_coeff0_1*basisvalue1 + new_coeff0_2*basisvalue2 + new_coeff0_3*basisvalue3 + new_coeff0_4*basisvalue4 + new_coeff0_5*basisvalue5 + new_coeff0_6*basisvalue6 + new_coeff0_7*basisvalue7 + new_coeff0_8*basisvalue8 + new_coeff0_9*basisvalue9;
      const double tmp0_1 = new_coeff1_0*basisvalue0 + new_coeff1_1*basisvalue1 + new_coeff1_2*basisvalue2 + new_coeff1_3*basisvalue3 + new_coeff1_4*basisvalue4 + new_coeff1_5*basisvalue5 + new_coeff1_6*basisvalue6 + new_coeff1_7*basisvalue7 + new_coeff1_8*basisvalue8 + new_coeff1_9*basisvalue9;
      derivatives[deriv_num] = (Jinv_00*tmp0_0 + Jinv_10*tmp0_1);
      derivatives[num_derivatives + deriv_num] = (Jinv_01*tmp0_0 + Jinv_11*tmp0_1);
    }
    
    // Transform derivatives back to physical element
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        values[row] += transform[row][col]*derivatives[col];
        values[num_derivatives + row] += transform[row][col]*derivatives[num_derivatives + col];
      }
    }
    // Delete pointer to array of derivatives on FIAT element
    delete [] derivatives;
    
    // Delete pointer to array of combinations of derivatives and transform
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      delete [] combinations[row];
      delete [] transform[row];
    }
    
    delete [] combinations;
    delete [] transform;
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis_derivatives() is not yet implemented.");
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // The reference points, direction and weights:
    const static double X[15][16][2] = {{{0.75, 0.25}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0.5, 0.5}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0.25, 0.75}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0, 0.25}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0, 0.5}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0, 0.75}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0.25, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0.5, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0.75, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0.0654669945550145, 0.0571041961145177}, {0.0502101232113698, 0.276843013638124}, {0.028912084224389, 0.583590432368917}, {0.00970378512694614, 0.860240135656219}, {0.311164552244357, 0.0571041961145177}, {0.238648659731443, 0.276843013638124}, {0.137419104134574, 0.583590432368917}, {0.0461220799064521, 0.860240135656219}, {0.631731251641125, 0.0571041961145177}, {0.484508326630433, 0.276843013638124}, {0.278990463496509, 0.583590432368917}, {0.0936377844373285, 0.860240135656219}, {0.877428809330468, 0.0571041961145177}, {0.672946863150506, 0.276843013638124}, {0.387497483406694, 0.583590432368917}, {0.130056079216834, 0.860240135656219}}, {{0.0654669945550145, 0.0571041961145177}, {0.0502101232113698, 0.276843013638124}, {0.028912084224389, 0.583590432368917}, {0.00970378512694614, 0.860240135656219}, {0.311164552244357, 0.0571041961145177}, {0.238648659731443, 0.276843013638124}, {0.137419104134574, 0.583590432368917}, {0.0461220799064521, 0.860240135656219}, {0.631731251641125, 0.0571041961145177}, {0.484508326630433, 0.276843013638124}, {0.278990463496509, 0.583590432368917}, {0.0936377844373285, 0.860240135656219}, {0.877428809330468, 0.0571041961145177}, {0.672946863150506, 0.276843013638124}, {0.387497483406694, 0.583590432368917}, {0.130056079216834, 0.860240135656219}}, {{0.0654669945550145, 0.0571041961145177}, {0.0502101232113698, 0.276843013638124}, {0.028912084224389, 0.583590432368917}, {0.00970378512694614, 0.860240135656219}, {0.311164552244357, 0.0571041961145177}, {0.238648659731443, 0.276843013638124}, {0.137419104134574, 0.583590432368917}, {0.0461220799064521, 0.860240135656219}, {0.631731251641125, 0.0571041961145177}, {0.484508326630433, 0.276843013638124}, {0.278990463496509, 0.583590432368917}, {0.0936377844373285, 0.860240135656219}, {0.877428809330468, 0.0571041961145177}, {0.672946863150506, 0.276843013638124}, {0.387497483406694, 0.583590432368917}, {0.130056079216834, 0.860240135656219}}, {{0.0654669945550145, 0.0571041961145177}, {0.0502101232113698, 0.276843013638124}, {0.028912084224389, 0.583590432368917}, {0.00970378512694614, 0.860240135656219}, {0.311164552244357, 0.0571041961145177}, {0.238648659731443, 0.276843013638124}, {0.137419104134574, 0.583590432368917}, {0.0461220799064521, 0.860240135656219}, {0.631731251641125, 0.0571041961145177}, {0.484508326630433, 0.276843013638124}, {0.278990463496509, 0.583590432368917}, {0.0936377844373285, 0.860240135656219}, {0.877428809330468, 0.0571041961145177}, {0.672946863150506, 0.276843013638124}, {0.387497483406694, 0.583590432368917}, {0.130056079216834, 0.860240135656219}}, {{0.0654669945550145, 0.0571041961145177}, {0.0502101232113698, 0.276843013638124}, {0.028912084224389, 0.583590432368917}, {0.00970378512694614, 0.860240135656219}, {0.311164552244357, 0.0571041961145177}, {0.238648659731443, 0.276843013638124}, {0.137419104134574, 0.583590432368917}, {0.0461220799064521, 0.860240135656219}, {0.631731251641125, 0.0571041961145177}, {0.484508326630433, 0.276843013638124}, {0.278990463496509, 0.583590432368917}, {0.0936377844373285, 0.860240135656219}, {0.877428809330468, 0.0571041961145177}, {0.672946863150506, 0.276843013638124}, {0.387497483406694, 0.583590432368917}, {0.130056079216834, 0.860240135656219}}, {{0.0654669945550145, 0.0571041961145177}, {0.0502101232113698, 0.276843013638124}, {0.028912084224389, 0.583590432368917}, {0.00970378512694614, 0.860240135656219}, {0.311164552244357, 0.0571041961145177}, {0.238648659731443, 0.276843013638124}, {0.137419104134574, 0.583590432368917}, {0.0461220799064521, 0.860240135656219}, {0.631731251641125, 0.0571041961145177}, {0.484508326630433, 0.276843013638124}, {0.278990463496509, 0.583590432368917}, {0.0936377844373285, 0.860240135656219}, {0.877428809330468, 0.0571041961145177}, {0.672946863150506, 0.276843013638124}, {0.387497483406694, 0.583590432368917}, {0.130056079216834, 0.860240135656219}}};
    const static double W[15][16] = {{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101}, {0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101}, {0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101}, {0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101}, {0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101}, {0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101}};
    const static double D[15][16][2] = {{{-1, 1}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{-1, 1}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{-1, 1}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0, 1}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0, 1}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0, 1}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{1, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{1, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{1, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}}, {{-0.703179558498458, 0}, {-0.539305836657196, 0}, {-0.31054406511806, 0}, {-0.104228144085579, 0}, {-0.277618905284931, 0}, {-0.212920717300506, 0}, {-0.122604393655731, 0}, {-0.0411498072024544, 0}, {0.277618905284931, 0}, {0.212920717300506, 0}, {0.122604393655731, 0}, {0.0411498072024544, 0}, {0.703179558498457, 0}, {0.539305836657195, 0}, {0.31054406511806, 0}, {0.104228144085579, 0}}, {{-0.414343705828224, 0}, {-0.0847354795428142, 0}, {0.375385648553375, 0}, {0.790360203484329, 0}, {-0.414343705828224, 0}, {-0.0847354795428142, 0}, {0.375385648553375, 0}, {0.790360203484329, 0}, {-0.414343705828224, 0}, {-0.0847354795428142, 0}, {0.375385648553375, 0}, {0.790360203484329, 0}, {-0.414343705828224, 0}, {-0.0847354795428142, 0}, {0.375385648553375, 0}, {0.790360203484329, 0}}, {{0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}}, {{0, -0.703179558498458}, {0, -0.539305836657196}, {0, -0.31054406511806}, {0, -0.104228144085579}, {0, -0.277618905284931}, {0, -0.212920717300506}, {0, -0.122604393655731}, {0, -0.0411498072024544}, {0, 0.277618905284931}, {0, 0.212920717300506}, {0, 0.122604393655731}, {0, 0.0411498072024544}, {0, 0.703179558498457}, {0, 0.539305836657195}, {0, 0.31054406511806}, {0, 0.104228144085579}}, {{0, -0.414343705828224}, {0, -0.0847354795428142}, {0, 0.375385648553375}, {0, 0.790360203484329}, {0, -0.414343705828224}, {0, -0.0847354795428142}, {0, 0.375385648553375}, {0, 0.790360203484329}, {0, -0.414343705828224}, {0, -0.0847354795428142}, {0, 0.375385648553375}, {0, 0.790360203484329}, {0, -0.414343705828224}, {0, -0.0847354795428142}, {0, 0.375385648553375}, {0, 0.790360203484329}}};
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    double copyofvalues[2];
    double result = 0.0;
    // Iterate over the points:
    static const unsigned int ns[15] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 16, 16, 16, 16, 16, 16};
    for (unsigned int j = 0; j < ns[i]; j++) {
      // Evaluate basis functions for affine mapping
      const double w0 = 1.0 - X[i][j][0] - X[i][j][1];
      const double w1 = X[i][j][0];
      const double w2 = X[i][j][1];
      
      // Compute affine mapping y = F(X)
      double y[2];
      y[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0];
      y[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1];
      
      // Evaluate function at physical points
      double values[2];
      f.evaluate(values, y, c);
      
      // Map function values using appropriate mapping
      // Copy old values:
      copyofvalues[0] = values[0];
      copyofvalues[1] = values[1];
      // Do the inverse of curl piola 
      values[0] = J_00*copyofvalues[0]+J_10*copyofvalues[1];
      values[1] = J_01*copyofvalues[0]+J_11*copyofvalues[1];
    
      // Note that we do not map the weights (yet).
    
      // Take directional components
      for(int k = 0; k < 2; k++)
        result += values[k]*D[i][j][k];
      // Multiply by weights 
      result *= W[i][j];
    
    } // End for
    return result;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
      
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
      
    // Compute inverse of Jacobian
    const double Jinv_00 =  J_11 / detJ;
    const double Jinv_01 = -J_01 / detJ;
    const double Jinv_10 = -J_10 / detJ;
    const double Jinv_11 =  J_00 / detJ;
    // Evaluate at vertices and use Piola mapping
    vertex_values[0] = (dof_values[3]*3*Jinv_10 + dof_values[4]*(-3*Jinv_10) + dof_values[5]*Jinv_10 + dof_values[6]*3*Jinv_00 + dof_values[7]*(-3*Jinv_00) + dof_values[8]*Jinv_00);
    vertex_values[2] = (dof_values[0]*3*Jinv_10 + dof_values[1]*(-3*Jinv_10) + dof_values[2]*Jinv_10 + dof_values[6]*(Jinv_00 + Jinv_10) + dof_values[7]*(-3*Jinv_00 - 3*Jinv_10) + dof_values[8]*(3*Jinv_00 + 3*Jinv_10));
    vertex_values[4] = (dof_values[0]*Jinv_00 + dof_values[1]*3*Jinv_00 + dof_values[2]*(-3*Jinv_00) + dof_values[3]*(Jinv_00 + Jinv_10) + dof_values[4]*(-3*Jinv_00 - 3*Jinv_10) + dof_values[5]*(3*Jinv_00 + 3*Jinv_10));
    vertex_values[1] = (dof_values[3]*3*Jinv_11 + dof_values[4]*(-3*Jinv_11) + dof_values[5]*Jinv_11 + dof_values[6]*3*Jinv_01 + dof_values[7]*(-3*Jinv_01) + dof_values[8]*Jinv_01);
    vertex_values[3] = (dof_values[0]*3*Jinv_11 + dof_values[1]*(-3*Jinv_11) + dof_values[2]*Jinv_11 + dof_values[6]*(Jinv_01 + Jinv_11) + dof_values[7]*(-3*Jinv_01 - 3*Jinv_11) + dof_values[8]*(3*Jinv_01 + 3*Jinv_11));
    vertex_values[5] = (dof_values[0]*Jinv_01 + dof_values[1]*3*Jinv_01 + dof_values[2]*(-3*Jinv_01) + dof_values[3]*(Jinv_01 + Jinv_11) + dof_values[4]*(-3*Jinv_01 - 3*Jinv_11) + dof_values[5]*(3*Jinv_01 + 3*Jinv_11));
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new UFC_Forms_1_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class UFC_Forms_1_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  UFC_Forms_1_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Forms_1_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "Nedelec finite element of degree 3 on a triangle";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 15;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 2;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
      
    // Compute determinant of Jacobian
    const double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    const double Jinv_00 =  J_11 / detJ;
    const double Jinv_01 = -J_01 / detJ;
    const double Jinv_10 = -J_10 / detJ;
    const double Jinv_11 =  J_00 / detJ;
    
    // Get coordinates and map to the reference (UFC) element
    double x = (element_coordinates[0][1]*element_coordinates[2][0] -\
                element_coordinates[0][0]*element_coordinates[2][1] +\
                J_11*coordinates[0] - J_01*coordinates[1]) / detJ;
    double y = (element_coordinates[1][1]*element_coordinates[0][0] -\
                element_coordinates[1][0]*element_coordinates[0][1] -\
                J_10*coordinates[0] + J_00*coordinates[1]) / detJ;
    
    // Map coordinates to the reference square
    if (std::abs(y - 1.0) < 1e-14)
      x = -1.0;
    else
      x = 2.0 *x/(1.0 - y) - 1.0;
    y = 2.0*y - 1.0;
    
    // Reset values
    values[0] = 0;
    values[1] = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_3_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.707106781186548*psitilde_a_0*scalings_y_0*psitilde_bs_0_0;
    const double basisvalue1 = 1.73205080756888*psitilde_a_1*scalings_y_1*psitilde_bs_1_0;
    const double basisvalue2 = psitilde_a_0*scalings_y_0*psitilde_bs_0_1;
    const double basisvalue3 = 2.73861278752583*psitilde_a_2*scalings_y_2*psitilde_bs_2_0;
    const double basisvalue4 = 2.12132034355964*psitilde_a_1*scalings_y_1*psitilde_bs_1_1;
    const double basisvalue5 = 1.22474487139159*psitilde_a_0*scalings_y_0*psitilde_bs_0_2;
    const double basisvalue6 = 3.74165738677394*psitilde_a_3*scalings_y_3*psitilde_bs_3_0;
    const double basisvalue7 = 3.16227766016838*psitilde_a_2*scalings_y_2*psitilde_bs_2_1;
    const double basisvalue8 = 2.44948974278318*psitilde_a_1*scalings_y_1*psitilde_bs_1_2;
    const double basisvalue9 = 1.4142135623731*psitilde_a_0*scalings_y_0*psitilde_bs_0_3;
    
    // Table(s) of coefficients
    const static double coefficients0[15][10] = \
    {{0, 0, 0, -0.169533172561123, 0.0841793787126842, -0.116642368703961, 0, -0.146820034222103, 0.0729014804399755, -0.101015254455221},
    {0, 0, 0, 0.0782460796435954, -0.168358757425369, 0.349927106111883, 0, 0.0677630927178939, -0.145802960879951, 0.303045763365663},
    {0, 0, 0, -0.0391230398217977, -0.0841793787126844, -0.349927106111883, 0, -0.0338815463589469, -0.0729014804399756, -0.303045763365663},
    {0, 0, 0, 0.169533172561123, 0.0841793787126844, 0.116642368703961, 0, 0.146820034222103, 0.0729014804399755, 0.101015254455221},
    {0, 0, 0, -0.0782460796435954, -0.168358757425369, -0.349927106111883, 0, -0.0677630927178939, -0.145802960879951, -0.303045763365663},
    {0, 0, 0, 0.0391230398217979, -0.0841793787126841, 0.349927106111883, 0, 0.033881546358947, -0.0729014804399757, 0.303045763365663},
    {0, 0, 0, 0.382536389368688, 0.303045763365663, 0.311046316543896, 0, -0.090350790290525, -0.145802960879951, -0.202030508910442},
    {0, 0, 0, -0.765072778737375, 0, -0.155523158271948, 0, 0.18070158058105, 0, 0.101015254455221},
    {0, 0, 0, 0.382536389368687, -0.303045763365663, 0.311046316543896, 0, -0.0903507902905252, 0.145802960879951, -0.202030508910442},
    {2, 0, 0, -0.18442777839083, -0.238095238095238, -0.824786098842323, 0, -0.159719141249985, -0.206196524710581, 0.285714285714286},
    {0, 2, 0, -0.338815463589469, 0.903978357455696, 0, 0, -0.293422798663482, -0.631345340345132, 0},
    {0, 0, 2, 0.0652050663696631, -0.420896893563422, 0.466569474815844, 0, 0.0564692439315783, -0.364507402199878, -1.01015254455221},
    {0, 0, 0, 0, 0.476190476190477, 0, 0, 0, 0.412393049421162, 0},
    {0, 0, 0, 0.677630927178939, 0, 0, 0, 0.586845597326964, 0, 0},
    {0, 0, 0, 0, 0.841793787126843, 0, 0, 0, 0.729014804399756, 0}};
    
    const static double coefficients1[15][10] = \
    {{0, 0, 0, 0.321678327423669, -0.134687005940295, 0.0972019739199675, 0.260579710864614, -0.12987926104263, 0.0976879837895672, -0.0631345340345132},
    {0, 0, 0, -0.165186168136479, 0.235702260395516, -0.272165526975908, -0.120267558860591, 0.146820034222103, -0.224536559755125, 0.176776695296637},
    {0, 0, 0, 0.0608580619450185, 0, 0.213844342623928, 0.0601337794302954, 0.0395284707521046, 0.112268279877562, -0.138895974875929},
    {0, 0, 0, 0.491211499984792, 0.218866384652979, 0.213844342623928, -0.260579710864614, 0.0169407731794736, -0.0247865033495917, 0.0378807204207079},
    {0, 0, 0, -0.243432247780074, -0.404061017820885, -0.622092633087792, 0.120267558860591, 0.0790569415042092, 0.0787335988751736, -0.126269068069026},
    {0, 0, 0, 0.0999811017668161, -0.0841793787126841, 0.563771448735811, -0.0601337794302954, 0.0734100171110518, -0.185169760317538, 0.164149788489734},
    {0, 0, 0, 0.169533172561123, 0.0841793787126842, 0.116642368703961, 0.160356745147455, 0.0677630927178939, 0.0320766513935891, -0.0757614408414156},
    {0, 0, 0, -0.382536389368687, 0.0673435029701472, -0.077761579135974, -0.320713490294909, 0.090350790290525, -0.0641533027871784, 0.0505076272276105},
    {0, 0, 0, 0.213003216807564, -0.218866384652979, 0.194403947839935, 0.160356745147454, -0.158113883008419, 0.17787961227354, -0.126269068069026},
    {0, 0, 0, 0.307379630651382, 0.238095238095238, -0.274928699614108, 0.283473354756921, 0.0798595706249923, -0.226816177181638, 0.178571428571429},
    {0, 0, 0, 0.527046276694729, 0.583211843519804, -0.168358757425368, 0.52077380612206, 0.342326598440728, -0.290418856558761, 0.109352220659964},
    {0, 0, 0, -0.173880176985767, 0.168358757425369, 0.680413817439771, -0.100222965717159, 0.31058084162368, 0.298896069803899, -0.441941738241592},
    {2, 0, 0, -0.799187039693594, 0.238095238095239, -0.274928699614108, 0, -0.31943828249997, 0.206196524710581, -0.0714285714285716},
    {0, 2, 0, 0.33881546358947, -0.262445329583911, 0, -1.04154761224412, 0.293422798663482, -0.0505076272276108, 0},
    {0, 0, 2, 0.412965420341197, 0.420896893563421, -0.894258160063699, 0, -0.564692439315782, 0.364507402199878, -0.126269068069027}};
    
    // Extract relevant coefficients
    const double coeff0_0 = coefficients0[dof][0];
    const double coeff0_1 = coefficients0[dof][1];
    const double coeff0_2 = coefficients0[dof][2];
    const double coeff0_3 = coefficients0[dof][3];
    const double coeff0_4 = coefficients0[dof][4];
    const double coeff0_5 = coefficients0[dof][5];
    const double coeff0_6 = coefficients0[dof][6];
    const double coeff0_7 = coefficients0[dof][7];
    const double coeff0_8 = coefficients0[dof][8];
    const double coeff0_9 = coefficients0[dof][9];
    const double coeff1_0 = coefficients1[dof][0];
    const double coeff1_1 = coefficients1[dof][1];
    const double coeff1_2 = coefficients1[dof][2];
    const double coeff1_3 = coefficients1[dof][3];
    const double coeff1_4 = coefficients1[dof][4];
    const double coeff1_5 = coefficients1[dof][5];
    const double coeff1_6 = coefficients1[dof][6];
    const double coeff1_7 = coefficients1[dof][7];
    const double coeff1_8 = coefficients1[dof][8];
    const double coeff1_9 = coefficients1[dof][9];
    
    // Compute value(s)
    const double tmp0_0 = coeff0_0*basisvalue0 + coeff0_1*basisvalue1 + coeff0_2*basisvalue2 + coeff0_3*basisvalue3 + coeff0_4*basisvalue4 + coeff0_5*basisvalue5 + coeff0_6*basisvalue6 + coeff0_7*basisvalue7 + coeff0_8*basisvalue8 + coeff0_9*basisvalue9;
    const double tmp0_1 = coeff1_0*basisvalue0 + coeff1_1*basisvalue1 + coeff1_2*basisvalue2 + coeff1_3*basisvalue3 + coeff1_4*basisvalue4 + coeff1_5*basisvalue5 + coeff1_6*basisvalue6 + coeff1_7*basisvalue7 + coeff1_8*basisvalue8 + coeff1_9*basisvalue9;
    // Using covariant Piola transform to map values back to the physical element
    values[0] = (Jinv_00*tmp0_0 + Jinv_10*tmp0_1);
    values[1] = (Jinv_01*tmp0_0 + Jinv_11*tmp0_1);
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis() is not yet implemented.");
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
      
    // Compute determinant of Jacobian
    const double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    const double Jinv_00 =  J_11 / detJ;
    const double Jinv_01 = -J_01 / detJ;
    const double Jinv_10 = -J_10 / detJ;
    const double Jinv_11 =  J_00 / detJ;
    
    // Get coordinates and map to the reference (UFC) element
    double x = (element_coordinates[0][1]*element_coordinates[2][0] -\
                element_coordinates[0][0]*element_coordinates[2][1] +\
                J_11*coordinates[0] - J_01*coordinates[1]) / detJ;
    double y = (element_coordinates[1][1]*element_coordinates[0][0] -\
                element_coordinates[1][0]*element_coordinates[0][1] -\
                J_10*coordinates[0] + J_00*coordinates[1]) / detJ;
    
    // Map coordinates to the reference square
    if (std::abs(y - 1.0) < 1e-14)
      x = -1.0;
    else
      x = 2.0 *x/(1.0 - y) - 1.0;
    y = 2.0*y - 1.0;
    
    // Compute number of derivatives
    unsigned int num_derivatives = 1;
    
    for (unsigned int j = 0; j < n; j++)
      num_derivatives *= 2;
    
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      combinations[j] = new unsigned int [n];
      for (unsigned int k = 0; k < n; k++)
        combinations[j][k] = 0;
    }
        
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] =  {{J_11 / detJ, -J_01 / detJ}, {-J_10 / detJ, J_00 / detJ}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values
    for (unsigned int j = 0; j < 2*num_derivatives; j++)
      values[j] = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_3_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.707106781186548*psitilde_a_0*scalings_y_0*psitilde_bs_0_0;
    const double basisvalue1 = 1.73205080756888*psitilde_a_1*scalings_y_1*psitilde_bs_1_0;
    const double basisvalue2 = psitilde_a_0*scalings_y_0*psitilde_bs_0_1;
    const double basisvalue3 = 2.73861278752583*psitilde_a_2*scalings_y_2*psitilde_bs_2_0;
    const double basisvalue4 = 2.12132034355964*psitilde_a_1*scalings_y_1*psitilde_bs_1_1;
    const double basisvalue5 = 1.22474487139159*psitilde_a_0*scalings_y_0*psitilde_bs_0_2;
    const double basisvalue6 = 3.74165738677394*psitilde_a_3*scalings_y_3*psitilde_bs_3_0;
    const double basisvalue7 = 3.16227766016838*psitilde_a_2*scalings_y_2*psitilde_bs_2_1;
    const double basisvalue8 = 2.44948974278318*psitilde_a_1*scalings_y_1*psitilde_bs_1_2;
    const double basisvalue9 = 1.4142135623731*psitilde_a_0*scalings_y_0*psitilde_bs_0_3;
    
    // Table(s) of coefficients
    const static double coefficients0[15][10] = \
    {{0, 0, 0, -0.169533172561123, 0.0841793787126842, -0.116642368703961, 0, -0.146820034222103, 0.0729014804399755, -0.101015254455221},
    {0, 0, 0, 0.0782460796435954, -0.168358757425369, 0.349927106111883, 0, 0.0677630927178939, -0.145802960879951, 0.303045763365663},
    {0, 0, 0, -0.0391230398217977, -0.0841793787126844, -0.349927106111883, 0, -0.0338815463589469, -0.0729014804399756, -0.303045763365663},
    {0, 0, 0, 0.169533172561123, 0.0841793787126844, 0.116642368703961, 0, 0.146820034222103, 0.0729014804399755, 0.101015254455221},
    {0, 0, 0, -0.0782460796435954, -0.168358757425369, -0.349927106111883, 0, -0.0677630927178939, -0.145802960879951, -0.303045763365663},
    {0, 0, 0, 0.0391230398217979, -0.0841793787126841, 0.349927106111883, 0, 0.033881546358947, -0.0729014804399757, 0.303045763365663},
    {0, 0, 0, 0.382536389368688, 0.303045763365663, 0.311046316543896, 0, -0.090350790290525, -0.145802960879951, -0.202030508910442},
    {0, 0, 0, -0.765072778737375, 0, -0.155523158271948, 0, 0.18070158058105, 0, 0.101015254455221},
    {0, 0, 0, 0.382536389368687, -0.303045763365663, 0.311046316543896, 0, -0.0903507902905252, 0.145802960879951, -0.202030508910442},
    {2, 0, 0, -0.18442777839083, -0.238095238095238, -0.824786098842323, 0, -0.159719141249985, -0.206196524710581, 0.285714285714286},
    {0, 2, 0, -0.338815463589469, 0.903978357455696, 0, 0, -0.293422798663482, -0.631345340345132, 0},
    {0, 0, 2, 0.0652050663696631, -0.420896893563422, 0.466569474815844, 0, 0.0564692439315783, -0.364507402199878, -1.01015254455221},
    {0, 0, 0, 0, 0.476190476190477, 0, 0, 0, 0.412393049421162, 0},
    {0, 0, 0, 0.677630927178939, 0, 0, 0, 0.586845597326964, 0, 0},
    {0, 0, 0, 0, 0.841793787126843, 0, 0, 0, 0.729014804399756, 0}};
    
    const static double coefficients1[15][10] = \
    {{0, 0, 0, 0.321678327423669, -0.134687005940295, 0.0972019739199675, 0.260579710864614, -0.12987926104263, 0.0976879837895672, -0.0631345340345132},
    {0, 0, 0, -0.165186168136479, 0.235702260395516, -0.272165526975908, -0.120267558860591, 0.146820034222103, -0.224536559755125, 0.176776695296637},
    {0, 0, 0, 0.0608580619450185, 0, 0.213844342623928, 0.0601337794302954, 0.0395284707521046, 0.112268279877562, -0.138895974875929},
    {0, 0, 0, 0.491211499984792, 0.218866384652979, 0.213844342623928, -0.260579710864614, 0.0169407731794736, -0.0247865033495917, 0.0378807204207079},
    {0, 0, 0, -0.243432247780074, -0.404061017820885, -0.622092633087792, 0.120267558860591, 0.0790569415042092, 0.0787335988751736, -0.126269068069026},
    {0, 0, 0, 0.0999811017668161, -0.0841793787126841, 0.563771448735811, -0.0601337794302954, 0.0734100171110518, -0.185169760317538, 0.164149788489734},
    {0, 0, 0, 0.169533172561123, 0.0841793787126842, 0.116642368703961, 0.160356745147455, 0.0677630927178939, 0.0320766513935891, -0.0757614408414156},
    {0, 0, 0, -0.382536389368687, 0.0673435029701472, -0.077761579135974, -0.320713490294909, 0.090350790290525, -0.0641533027871784, 0.0505076272276105},
    {0, 0, 0, 0.213003216807564, -0.218866384652979, 0.194403947839935, 0.160356745147454, -0.158113883008419, 0.17787961227354, -0.126269068069026},
    {0, 0, 0, 0.307379630651382, 0.238095238095238, -0.274928699614108, 0.283473354756921, 0.0798595706249923, -0.226816177181638, 0.178571428571429},
    {0, 0, 0, 0.527046276694729, 0.583211843519804, -0.168358757425368, 0.52077380612206, 0.342326598440728, -0.290418856558761, 0.109352220659964},
    {0, 0, 0, -0.173880176985767, 0.168358757425369, 0.680413817439771, -0.100222965717159, 0.31058084162368, 0.298896069803899, -0.441941738241592},
    {2, 0, 0, -0.799187039693594, 0.238095238095239, -0.274928699614108, 0, -0.31943828249997, 0.206196524710581, -0.0714285714285716},
    {0, 2, 0, 0.33881546358947, -0.262445329583911, 0, -1.04154761224412, 0.293422798663482, -0.0505076272276108, 0},
    {0, 0, 2, 0.412965420341197, 0.420896893563421, -0.894258160063699, 0, -0.564692439315782, 0.364507402199878, -0.126269068069027}};
    
    // Interesting (new) part
    // Tables of derivatives of the polynomial base (transpose)
    const static double dmats0[10][10] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.89897948556636, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 9.48683298050514, 0, 0, 0, 0, 0, 0, 0, 0},
    {4, 0, 7.07106781186548, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.29150262212918, 0, -2.99332590941915, 13.6626010212795, 0, 0.611010092660779, 0, 0, 0, 0},
    {0, 4.38178046004133, 0, 0, 12.5219806739988, 0, 0, 0, 0, 0},
    {3.46410161513775, 0, 7.83836717690617, 0, 0, 8.4, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    const static double dmats1[10][10] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.44948974278318, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.24264068711929, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.58198889747161, 4.74341649025257, -0.912870929175276, 0, 0, 0, 0, 0, 0, 0},
    {2, 6.12372435695795, 3.53553390593274, 0, 0, 0, 0, 0, 0, 0},
    {-2.3094010767585, 0, 8.16496580927726, 0, 0, 0, 0, 0, 0, 0},
    {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.305505046330391, 0, 0, 0, 0},
    {2.23606797749979, 2.19089023002067, 2.5298221281347, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0, 0, 0, 0},
    {1.73205080756888, -5.09116882454314, 3.91918358845309, 0, 9.69948452238571, 4.2, 0, 0, 0, 0},
    {5, 0, -2.82842712474619, 0, 0, 12.1243556529821, 0, 0, 0, 0}};
    
    // Compute reference derivatives
    // Declare pointer to array of derivatives on FIAT element
    double *derivatives = new double [2*num_derivatives];
    
    // Declare coefficients
    double coeff0_0 = 0;
    double coeff0_1 = 0;
    double coeff0_2 = 0;
    double coeff0_3 = 0;
    double coeff0_4 = 0;
    double coeff0_5 = 0;
    double coeff0_6 = 0;
    double coeff0_7 = 0;
    double coeff0_8 = 0;
    double coeff0_9 = 0;
    double coeff1_0 = 0;
    double coeff1_1 = 0;
    double coeff1_2 = 0;
    double coeff1_3 = 0;
    double coeff1_4 = 0;
    double coeff1_5 = 0;
    double coeff1_6 = 0;
    double coeff1_7 = 0;
    double coeff1_8 = 0;
    double coeff1_9 = 0;
    
    // Declare new coefficients
    double new_coeff0_0 = 0;
    double new_coeff0_1 = 0;
    double new_coeff0_2 = 0;
    double new_coeff0_3 = 0;
    double new_coeff0_4 = 0;
    double new_coeff0_5 = 0;
    double new_coeff0_6 = 0;
    double new_coeff0_7 = 0;
    double new_coeff0_8 = 0;
    double new_coeff0_9 = 0;
    double new_coeff1_0 = 0;
    double new_coeff1_1 = 0;
    double new_coeff1_2 = 0;
    double new_coeff1_3 = 0;
    double new_coeff1_4 = 0;
    double new_coeff1_5 = 0;
    double new_coeff1_6 = 0;
    double new_coeff1_7 = 0;
    double new_coeff1_8 = 0;
    double new_coeff1_9 = 0;
    
    // Loop possible derivatives
    for (unsigned int deriv_num = 0; deriv_num < num_derivatives; deriv_num++)
    {
      // Get values from coefficients array
      new_coeff0_0 = coefficients0[dof][0];
      new_coeff0_1 = coefficients0[dof][1];
      new_coeff0_2 = coefficients0[dof][2];
      new_coeff0_3 = coefficients0[dof][3];
      new_coeff0_4 = coefficients0[dof][4];
      new_coeff0_5 = coefficients0[dof][5];
      new_coeff0_6 = coefficients0[dof][6];
      new_coeff0_7 = coefficients0[dof][7];
      new_coeff0_8 = coefficients0[dof][8];
      new_coeff0_9 = coefficients0[dof][9];
      new_coeff1_0 = coefficients1[dof][0];
      new_coeff1_1 = coefficients1[dof][1];
      new_coeff1_2 = coefficients1[dof][2];
      new_coeff1_3 = coefficients1[dof][3];
      new_coeff1_4 = coefficients1[dof][4];
      new_coeff1_5 = coefficients1[dof][5];
      new_coeff1_6 = coefficients1[dof][6];
      new_coeff1_7 = coefficients1[dof][7];
      new_coeff1_8 = coefficients1[dof][8];
      new_coeff1_9 = coefficients1[dof][9];
    
      // Loop derivative order
      for (unsigned int j = 0; j < n; j++)
      {
        // Update old coefficients
        coeff0_0 = new_coeff0_0;
        coeff0_1 = new_coeff0_1;
        coeff0_2 = new_coeff0_2;
        coeff0_3 = new_coeff0_3;
        coeff0_4 = new_coeff0_4;
        coeff0_5 = new_coeff0_5;
        coeff0_6 = new_coeff0_6;
        coeff0_7 = new_coeff0_7;
        coeff0_8 = new_coeff0_8;
        coeff0_9 = new_coeff0_9;
        coeff1_0 = new_coeff1_0;
        coeff1_1 = new_coeff1_1;
        coeff1_2 = new_coeff1_2;
        coeff1_3 = new_coeff1_3;
        coeff1_4 = new_coeff1_4;
        coeff1_5 = new_coeff1_5;
        coeff1_6 = new_coeff1_6;
        coeff1_7 = new_coeff1_7;
        coeff1_8 = new_coeff1_8;
        coeff1_9 = new_coeff1_9;
    
        if(combinations[deriv_num][j] == 0)
        {
          new_coeff0_0 = coeff0_0*dmats0[0][0] + coeff0_1*dmats0[1][0] + coeff0_2*dmats0[2][0] + coeff0_3*dmats0[3][0] + coeff0_4*dmats0[4][0] + coeff0_5*dmats0[5][0] + coeff0_6*dmats0[6][0] + coeff0_7*dmats0[7][0] + coeff0_8*dmats0[8][0] + coeff0_9*dmats0[9][0];
          new_coeff0_1 = coeff0_0*dmats0[0][1] + coeff0_1*dmats0[1][1] + coeff0_2*dmats0[2][1] + coeff0_3*dmats0[3][1] + coeff0_4*dmats0[4][1] + coeff0_5*dmats0[5][1] + coeff0_6*dmats0[6][1] + coeff0_7*dmats0[7][1] + coeff0_8*dmats0[8][1] + coeff0_9*dmats0[9][1];
          new_coeff0_2 = coeff0_0*dmats0[0][2] + coeff0_1*dmats0[1][2] + coeff0_2*dmats0[2][2] + coeff0_3*dmats0[3][2] + coeff0_4*dmats0[4][2] + coeff0_5*dmats0[5][2] + coeff0_6*dmats0[6][2] + coeff0_7*dmats0[7][2] + coeff0_8*dmats0[8][2] + coeff0_9*dmats0[9][2];
          new_coeff0_3 = coeff0_0*dmats0[0][3] + coeff0_1*dmats0[1][3] + coeff0_2*dmats0[2][3] + coeff0_3*dmats0[3][3] + coeff0_4*dmats0[4][3] + coeff0_5*dmats0[5][3] + coeff0_6*dmats0[6][3] + coeff0_7*dmats0[7][3] + coeff0_8*dmats0[8][3] + coeff0_9*dmats0[9][3];
          new_coeff0_4 = coeff0_0*dmats0[0][4] + coeff0_1*dmats0[1][4] + coeff0_2*dmats0[2][4] + coeff0_3*dmats0[3][4] + coeff0_4*dmats0[4][4] + coeff0_5*dmats0[5][4] + coeff0_6*dmats0[6][4] + coeff0_7*dmats0[7][4] + coeff0_8*dmats0[8][4] + coeff0_9*dmats0[9][4];
          new_coeff0_5 = coeff0_0*dmats0[0][5] + coeff0_1*dmats0[1][5] + coeff0_2*dmats0[2][5] + coeff0_3*dmats0[3][5] + coeff0_4*dmats0[4][5] + coeff0_5*dmats0[5][5] + coeff0_6*dmats0[6][5] + coeff0_7*dmats0[7][5] + coeff0_8*dmats0[8][5] + coeff0_9*dmats0[9][5];
          new_coeff0_6 = coeff0_0*dmats0[0][6] + coeff0_1*dmats0[1][6] + coeff0_2*dmats0[2][6] + coeff0_3*dmats0[3][6] + coeff0_4*dmats0[4][6] + coeff0_5*dmats0[5][6] + coeff0_6*dmats0[6][6] + coeff0_7*dmats0[7][6] + coeff0_8*dmats0[8][6] + coeff0_9*dmats0[9][6];
          new_coeff0_7 = coeff0_0*dmats0[0][7] + coeff0_1*dmats0[1][7] + coeff0_2*dmats0[2][7] + coeff0_3*dmats0[3][7] + coeff0_4*dmats0[4][7] + coeff0_5*dmats0[5][7] + coeff0_6*dmats0[6][7] + coeff0_7*dmats0[7][7] + coeff0_8*dmats0[8][7] + coeff0_9*dmats0[9][7];
          new_coeff0_8 = coeff0_0*dmats0[0][8] + coeff0_1*dmats0[1][8] + coeff0_2*dmats0[2][8] + coeff0_3*dmats0[3][8] + coeff0_4*dmats0[4][8] + coeff0_5*dmats0[5][8] + coeff0_6*dmats0[6][8] + coeff0_7*dmats0[7][8] + coeff0_8*dmats0[8][8] + coeff0_9*dmats0[9][8];
          new_coeff0_9 = coeff0_0*dmats0[0][9] + coeff0_1*dmats0[1][9] + coeff0_2*dmats0[2][9] + coeff0_3*dmats0[3][9] + coeff0_4*dmats0[4][9] + coeff0_5*dmats0[5][9] + coeff0_6*dmats0[6][9] + coeff0_7*dmats0[7][9] + coeff0_8*dmats0[8][9] + coeff0_9*dmats0[9][9];
          new_coeff1_0 = coeff1_0*dmats0[0][0] + coeff1_1*dmats0[1][0] + coeff1_2*dmats0[2][0] + coeff1_3*dmats0[3][0] + coeff1_4*dmats0[4][0] + coeff1_5*dmats0[5][0] + coeff1_6*dmats0[6][0] + coeff1_7*dmats0[7][0] + coeff1_8*dmats0[8][0] + coeff1_9*dmats0[9][0];
          new_coeff1_1 = coeff1_0*dmats0[0][1] + coeff1_1*dmats0[1][1] + coeff1_2*dmats0[2][1] + coeff1_3*dmats0[3][1] + coeff1_4*dmats0[4][1] + coeff1_5*dmats0[5][1] + coeff1_6*dmats0[6][1] + coeff1_7*dmats0[7][1] + coeff1_8*dmats0[8][1] + coeff1_9*dmats0[9][1];
          new_coeff1_2 = coeff1_0*dmats0[0][2] + coeff1_1*dmats0[1][2] + coeff1_2*dmats0[2][2] + coeff1_3*dmats0[3][2] + coeff1_4*dmats0[4][2] + coeff1_5*dmats0[5][2] + coeff1_6*dmats0[6][2] + coeff1_7*dmats0[7][2] + coeff1_8*dmats0[8][2] + coeff1_9*dmats0[9][2];
          new_coeff1_3 = coeff1_0*dmats0[0][3] + coeff1_1*dmats0[1][3] + coeff1_2*dmats0[2][3] + coeff1_3*dmats0[3][3] + coeff1_4*dmats0[4][3] + coeff1_5*dmats0[5][3] + coeff1_6*dmats0[6][3] + coeff1_7*dmats0[7][3] + coeff1_8*dmats0[8][3] + coeff1_9*dmats0[9][3];
          new_coeff1_4 = coeff1_0*dmats0[0][4] + coeff1_1*dmats0[1][4] + coeff1_2*dmats0[2][4] + coeff1_3*dmats0[3][4] + coeff1_4*dmats0[4][4] + coeff1_5*dmats0[5][4] + coeff1_6*dmats0[6][4] + coeff1_7*dmats0[7][4] + coeff1_8*dmats0[8][4] + coeff1_9*dmats0[9][4];
          new_coeff1_5 = coeff1_0*dmats0[0][5] + coeff1_1*dmats0[1][5] + coeff1_2*dmats0[2][5] + coeff1_3*dmats0[3][5] + coeff1_4*dmats0[4][5] + coeff1_5*dmats0[5][5] + coeff1_6*dmats0[6][5] + coeff1_7*dmats0[7][5] + coeff1_8*dmats0[8][5] + coeff1_9*dmats0[9][5];
          new_coeff1_6 = coeff1_0*dmats0[0][6] + coeff1_1*dmats0[1][6] + coeff1_2*dmats0[2][6] + coeff1_3*dmats0[3][6] + coeff1_4*dmats0[4][6] + coeff1_5*dmats0[5][6] + coeff1_6*dmats0[6][6] + coeff1_7*dmats0[7][6] + coeff1_8*dmats0[8][6] + coeff1_9*dmats0[9][6];
          new_coeff1_7 = coeff1_0*dmats0[0][7] + coeff1_1*dmats0[1][7] + coeff1_2*dmats0[2][7] + coeff1_3*dmats0[3][7] + coeff1_4*dmats0[4][7] + coeff1_5*dmats0[5][7] + coeff1_6*dmats0[6][7] + coeff1_7*dmats0[7][7] + coeff1_8*dmats0[8][7] + coeff1_9*dmats0[9][7];
          new_coeff1_8 = coeff1_0*dmats0[0][8] + coeff1_1*dmats0[1][8] + coeff1_2*dmats0[2][8] + coeff1_3*dmats0[3][8] + coeff1_4*dmats0[4][8] + coeff1_5*dmats0[5][8] + coeff1_6*dmats0[6][8] + coeff1_7*dmats0[7][8] + coeff1_8*dmats0[8][8] + coeff1_9*dmats0[9][8];
          new_coeff1_9 = coeff1_0*dmats0[0][9] + coeff1_1*dmats0[1][9] + coeff1_2*dmats0[2][9] + coeff1_3*dmats0[3][9] + coeff1_4*dmats0[4][9] + coeff1_5*dmats0[5][9] + coeff1_6*dmats0[6][9] + coeff1_7*dmats0[7][9] + coeff1_8*dmats0[8][9] + coeff1_9*dmats0[9][9];
        }
        if(combinations[deriv_num][j] == 1)
        {
          new_coeff0_0 = coeff0_0*dmats1[0][0] + coeff0_1*dmats1[1][0] + coeff0_2*dmats1[2][0] + coeff0_3*dmats1[3][0] + coeff0_4*dmats1[4][0] + coeff0_5*dmats1[5][0] + coeff0_6*dmats1[6][0] + coeff0_7*dmats1[7][0] + coeff0_8*dmats1[8][0] + coeff0_9*dmats1[9][0];
          new_coeff0_1 = coeff0_0*dmats1[0][1] + coeff0_1*dmats1[1][1] + coeff0_2*dmats1[2][1] + coeff0_3*dmats1[3][1] + coeff0_4*dmats1[4][1] + coeff0_5*dmats1[5][1] + coeff0_6*dmats1[6][1] + coeff0_7*dmats1[7][1] + coeff0_8*dmats1[8][1] + coeff0_9*dmats1[9][1];
          new_coeff0_2 = coeff0_0*dmats1[0][2] + coeff0_1*dmats1[1][2] + coeff0_2*dmats1[2][2] + coeff0_3*dmats1[3][2] + coeff0_4*dmats1[4][2] + coeff0_5*dmats1[5][2] + coeff0_6*dmats1[6][2] + coeff0_7*dmats1[7][2] + coeff0_8*dmats1[8][2] + coeff0_9*dmats1[9][2];
          new_coeff0_3 = coeff0_0*dmats1[0][3] + coeff0_1*dmats1[1][3] + coeff0_2*dmats1[2][3] + coeff0_3*dmats1[3][3] + coeff0_4*dmats1[4][3] + coeff0_5*dmats1[5][3] + coeff0_6*dmats1[6][3] + coeff0_7*dmats1[7][3] + coeff0_8*dmats1[8][3] + coeff0_9*dmats1[9][3];
          new_coeff0_4 = coeff0_0*dmats1[0][4] + coeff0_1*dmats1[1][4] + coeff0_2*dmats1[2][4] + coeff0_3*dmats1[3][4] + coeff0_4*dmats1[4][4] + coeff0_5*dmats1[5][4] + coeff0_6*dmats1[6][4] + coeff0_7*dmats1[7][4] + coeff0_8*dmats1[8][4] + coeff0_9*dmats1[9][4];
          new_coeff0_5 = coeff0_0*dmats1[0][5] + coeff0_1*dmats1[1][5] + coeff0_2*dmats1[2][5] + coeff0_3*dmats1[3][5] + coeff0_4*dmats1[4][5] + coeff0_5*dmats1[5][5] + coeff0_6*dmats1[6][5] + coeff0_7*dmats1[7][5] + coeff0_8*dmats1[8][5] + coeff0_9*dmats1[9][5];
          new_coeff0_6 = coeff0_0*dmats1[0][6] + coeff0_1*dmats1[1][6] + coeff0_2*dmats1[2][6] + coeff0_3*dmats1[3][6] + coeff0_4*dmats1[4][6] + coeff0_5*dmats1[5][6] + coeff0_6*dmats1[6][6] + coeff0_7*dmats1[7][6] + coeff0_8*dmats1[8][6] + coeff0_9*dmats1[9][6];
          new_coeff0_7 = coeff0_0*dmats1[0][7] + coeff0_1*dmats1[1][7] + coeff0_2*dmats1[2][7] + coeff0_3*dmats1[3][7] + coeff0_4*dmats1[4][7] + coeff0_5*dmats1[5][7] + coeff0_6*dmats1[6][7] + coeff0_7*dmats1[7][7] + coeff0_8*dmats1[8][7] + coeff0_9*dmats1[9][7];
          new_coeff0_8 = coeff0_0*dmats1[0][8] + coeff0_1*dmats1[1][8] + coeff0_2*dmats1[2][8] + coeff0_3*dmats1[3][8] + coeff0_4*dmats1[4][8] + coeff0_5*dmats1[5][8] + coeff0_6*dmats1[6][8] + coeff0_7*dmats1[7][8] + coeff0_8*dmats1[8][8] + coeff0_9*dmats1[9][8];
          new_coeff0_9 = coeff0_0*dmats1[0][9] + coeff0_1*dmats1[1][9] + coeff0_2*dmats1[2][9] + coeff0_3*dmats1[3][9] + coeff0_4*dmats1[4][9] + coeff0_5*dmats1[5][9] + coeff0_6*dmats1[6][9] + coeff0_7*dmats1[7][9] + coeff0_8*dmats1[8][9] + coeff0_9*dmats1[9][9];
          new_coeff1_0 = coeff1_0*dmats1[0][0] + coeff1_1*dmats1[1][0] + coeff1_2*dmats1[2][0] + coeff1_3*dmats1[3][0] + coeff1_4*dmats1[4][0] + coeff1_5*dmats1[5][0] + coeff1_6*dmats1[6][0] + coeff1_7*dmats1[7][0] + coeff1_8*dmats1[8][0] + coeff1_9*dmats1[9][0];
          new_coeff1_1 = coeff1_0*dmats1[0][1] + coeff1_1*dmats1[1][1] + coeff1_2*dmats1[2][1] + coeff1_3*dmats1[3][1] + coeff1_4*dmats1[4][1] + coeff1_5*dmats1[5][1] + coeff1_6*dmats1[6][1] + coeff1_7*dmats1[7][1] + coeff1_8*dmats1[8][1] + coeff1_9*dmats1[9][1];
          new_coeff1_2 = coeff1_0*dmats1[0][2] + coeff1_1*dmats1[1][2] + coeff1_2*dmats1[2][2] + coeff1_3*dmats1[3][2] + coeff1_4*dmats1[4][2] + coeff1_5*dmats1[5][2] + coeff1_6*dmats1[6][2] + coeff1_7*dmats1[7][2] + coeff1_8*dmats1[8][2] + coeff1_9*dmats1[9][2];
          new_coeff1_3 = coeff1_0*dmats1[0][3] + coeff1_1*dmats1[1][3] + coeff1_2*dmats1[2][3] + coeff1_3*dmats1[3][3] + coeff1_4*dmats1[4][3] + coeff1_5*dmats1[5][3] + coeff1_6*dmats1[6][3] + coeff1_7*dmats1[7][3] + coeff1_8*dmats1[8][3] + coeff1_9*dmats1[9][3];
          new_coeff1_4 = coeff1_0*dmats1[0][4] + coeff1_1*dmats1[1][4] + coeff1_2*dmats1[2][4] + coeff1_3*dmats1[3][4] + coeff1_4*dmats1[4][4] + coeff1_5*dmats1[5][4] + coeff1_6*dmats1[6][4] + coeff1_7*dmats1[7][4] + coeff1_8*dmats1[8][4] + coeff1_9*dmats1[9][4];
          new_coeff1_5 = coeff1_0*dmats1[0][5] + coeff1_1*dmats1[1][5] + coeff1_2*dmats1[2][5] + coeff1_3*dmats1[3][5] + coeff1_4*dmats1[4][5] + coeff1_5*dmats1[5][5] + coeff1_6*dmats1[6][5] + coeff1_7*dmats1[7][5] + coeff1_8*dmats1[8][5] + coeff1_9*dmats1[9][5];
          new_coeff1_6 = coeff1_0*dmats1[0][6] + coeff1_1*dmats1[1][6] + coeff1_2*dmats1[2][6] + coeff1_3*dmats1[3][6] + coeff1_4*dmats1[4][6] + coeff1_5*dmats1[5][6] + coeff1_6*dmats1[6][6] + coeff1_7*dmats1[7][6] + coeff1_8*dmats1[8][6] + coeff1_9*dmats1[9][6];
          new_coeff1_7 = coeff1_0*dmats1[0][7] + coeff1_1*dmats1[1][7] + coeff1_2*dmats1[2][7] + coeff1_3*dmats1[3][7] + coeff1_4*dmats1[4][7] + coeff1_5*dmats1[5][7] + coeff1_6*dmats1[6][7] + coeff1_7*dmats1[7][7] + coeff1_8*dmats1[8][7] + coeff1_9*dmats1[9][7];
          new_coeff1_8 = coeff1_0*dmats1[0][8] + coeff1_1*dmats1[1][8] + coeff1_2*dmats1[2][8] + coeff1_3*dmats1[3][8] + coeff1_4*dmats1[4][8] + coeff1_5*dmats1[5][8] + coeff1_6*dmats1[6][8] + coeff1_7*dmats1[7][8] + coeff1_8*dmats1[8][8] + coeff1_9*dmats1[9][8];
          new_coeff1_9 = coeff1_0*dmats1[0][9] + coeff1_1*dmats1[1][9] + coeff1_2*dmats1[2][9] + coeff1_3*dmats1[3][9] + coeff1_4*dmats1[4][9] + coeff1_5*dmats1[5][9] + coeff1_6*dmats1[6][9] + coeff1_7*dmats1[7][9] + coeff1_8*dmats1[8][9] + coeff1_9*dmats1[9][9];
        }
    
      }
      // Compute derivatives on reference element as dot product of coefficients and basisvalues
      // Correct values by the covariant Piola transform
      const double tmp0_0 = new_coeff0_0*basisvalue0 + new_coeff0_1*basisvalue1 + new_coeff0_2*basisvalue2 + new_coeff0_3*basisvalue3 + new_coeff0_4*basisvalue4 + new_coeff0_5*basisvalue5 + new_coeff0_6*basisvalue6 + new_coeff0_7*basisvalue7 + new_coeff0_8*basisvalue8 + new_coeff0_9*basisvalue9;
      const double tmp0_1 = new_coeff1_0*basisvalue0 + new_coeff1_1*basisvalue1 + new_coeff1_2*basisvalue2 + new_coeff1_3*basisvalue3 + new_coeff1_4*basisvalue4 + new_coeff1_5*basisvalue5 + new_coeff1_6*basisvalue6 + new_coeff1_7*basisvalue7 + new_coeff1_8*basisvalue8 + new_coeff1_9*basisvalue9;
      derivatives[deriv_num] = (Jinv_00*tmp0_0 + Jinv_10*tmp0_1);
      derivatives[num_derivatives + deriv_num] = (Jinv_01*tmp0_0 + Jinv_11*tmp0_1);
    }
    
    // Transform derivatives back to physical element
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        values[row] += transform[row][col]*derivatives[col];
        values[num_derivatives + row] += transform[row][col]*derivatives[num_derivatives + col];
      }
    }
    // Delete pointer to array of derivatives on FIAT element
    delete [] derivatives;
    
    // Delete pointer to array of combinations of derivatives and transform
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      delete [] combinations[row];
      delete [] transform[row];
    }
    
    delete [] combinations;
    delete [] transform;
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis_derivatives() is not yet implemented.");
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // The reference points, direction and weights:
    const static double X[15][16][2] = {{{0.75, 0.25}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0.5, 0.5}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0.25, 0.75}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0, 0.25}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0, 0.5}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0, 0.75}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0.25, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0.5, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0.75, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0.0654669945550145, 0.0571041961145177}, {0.0502101232113698, 0.276843013638124}, {0.028912084224389, 0.583590432368917}, {0.00970378512694614, 0.860240135656219}, {0.311164552244357, 0.0571041961145177}, {0.238648659731443, 0.276843013638124}, {0.137419104134574, 0.583590432368917}, {0.0461220799064521, 0.860240135656219}, {0.631731251641125, 0.0571041961145177}, {0.484508326630433, 0.276843013638124}, {0.278990463496509, 0.583590432368917}, {0.0936377844373285, 0.860240135656219}, {0.877428809330468, 0.0571041961145177}, {0.672946863150506, 0.276843013638124}, {0.387497483406694, 0.583590432368917}, {0.130056079216834, 0.860240135656219}}, {{0.0654669945550145, 0.0571041961145177}, {0.0502101232113698, 0.276843013638124}, {0.028912084224389, 0.583590432368917}, {0.00970378512694614, 0.860240135656219}, {0.311164552244357, 0.0571041961145177}, {0.238648659731443, 0.276843013638124}, {0.137419104134574, 0.583590432368917}, {0.0461220799064521, 0.860240135656219}, {0.631731251641125, 0.0571041961145177}, {0.484508326630433, 0.276843013638124}, {0.278990463496509, 0.583590432368917}, {0.0936377844373285, 0.860240135656219}, {0.877428809330468, 0.0571041961145177}, {0.672946863150506, 0.276843013638124}, {0.387497483406694, 0.583590432368917}, {0.130056079216834, 0.860240135656219}}, {{0.0654669945550145, 0.0571041961145177}, {0.0502101232113698, 0.276843013638124}, {0.028912084224389, 0.583590432368917}, {0.00970378512694614, 0.860240135656219}, {0.311164552244357, 0.0571041961145177}, {0.238648659731443, 0.276843013638124}, {0.137419104134574, 0.583590432368917}, {0.0461220799064521, 0.860240135656219}, {0.631731251641125, 0.0571041961145177}, {0.484508326630433, 0.276843013638124}, {0.278990463496509, 0.583590432368917}, {0.0936377844373285, 0.860240135656219}, {0.877428809330468, 0.0571041961145177}, {0.672946863150506, 0.276843013638124}, {0.387497483406694, 0.583590432368917}, {0.130056079216834, 0.860240135656219}}, {{0.0654669945550145, 0.0571041961145177}, {0.0502101232113698, 0.276843013638124}, {0.028912084224389, 0.583590432368917}, {0.00970378512694614, 0.860240135656219}, {0.311164552244357, 0.0571041961145177}, {0.238648659731443, 0.276843013638124}, {0.137419104134574, 0.583590432368917}, {0.0461220799064521, 0.860240135656219}, {0.631731251641125, 0.0571041961145177}, {0.484508326630433, 0.276843013638124}, {0.278990463496509, 0.583590432368917}, {0.0936377844373285, 0.860240135656219}, {0.877428809330468, 0.0571041961145177}, {0.672946863150506, 0.276843013638124}, {0.387497483406694, 0.583590432368917}, {0.130056079216834, 0.860240135656219}}, {{0.0654669945550145, 0.0571041961145177}, {0.0502101232113698, 0.276843013638124}, {0.028912084224389, 0.583590432368917}, {0.00970378512694614, 0.860240135656219}, {0.311164552244357, 0.0571041961145177}, {0.238648659731443, 0.276843013638124}, {0.137419104134574, 0.583590432368917}, {0.0461220799064521, 0.860240135656219}, {0.631731251641125, 0.0571041961145177}, {0.484508326630433, 0.276843013638124}, {0.278990463496509, 0.583590432368917}, {0.0936377844373285, 0.860240135656219}, {0.877428809330468, 0.0571041961145177}, {0.672946863150506, 0.276843013638124}, {0.387497483406694, 0.583590432368917}, {0.130056079216834, 0.860240135656219}}, {{0.0654669945550145, 0.0571041961145177}, {0.0502101232113698, 0.276843013638124}, {0.028912084224389, 0.583590432368917}, {0.00970378512694614, 0.860240135656219}, {0.311164552244357, 0.0571041961145177}, {0.238648659731443, 0.276843013638124}, {0.137419104134574, 0.583590432368917}, {0.0461220799064521, 0.860240135656219}, {0.631731251641125, 0.0571041961145177}, {0.484508326630433, 0.276843013638124}, {0.278990463496509, 0.583590432368917}, {0.0936377844373285, 0.860240135656219}, {0.877428809330468, 0.0571041961145177}, {0.672946863150506, 0.276843013638124}, {0.387497483406694, 0.583590432368917}, {0.130056079216834, 0.860240135656219}}};
    const static double W[15][16] = {{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101}, {0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101}, {0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101}, {0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101}, {0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101}, {0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.176740354089447, 0.265376864428199, 0.169358898086985, 0.0406690382579151, 0.0942734727735292, 0.141552271592344, 0.0903361971294796, 0.021692903642101}};
    const static double D[15][16][2] = {{{-1, 1}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{-1, 1}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{-1, 1}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0, 1}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0, 1}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0, 1}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{1, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{1, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{1, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}, {{0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}, {0.353553390593274, 0}}, {{-0.703179558498458, 0}, {-0.539305836657196, 0}, {-0.31054406511806, 0}, {-0.104228144085579, 0}, {-0.277618905284931, 0}, {-0.212920717300506, 0}, {-0.122604393655731, 0}, {-0.0411498072024544, 0}, {0.277618905284931, 0}, {0.212920717300506, 0}, {0.122604393655731, 0}, {0.0411498072024544, 0}, {0.703179558498457, 0}, {0.539305836657195, 0}, {0.31054406511806, 0}, {0.104228144085579, 0}}, {{-0.414343705828224, 0}, {-0.0847354795428142, 0}, {0.375385648553375, 0}, {0.790360203484329, 0}, {-0.414343705828224, 0}, {-0.0847354795428142, 0}, {0.375385648553375, 0}, {0.790360203484329, 0}, {-0.414343705828224, 0}, {-0.0847354795428142, 0}, {0.375385648553375, 0}, {0.790360203484329, 0}, {-0.414343705828224, 0}, {-0.0847354795428142, 0}, {0.375385648553375, 0}, {0.790360203484329, 0}}, {{0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}, {0, 0.353553390593274}}, {{0, -0.703179558498458}, {0, -0.539305836657196}, {0, -0.31054406511806}, {0, -0.104228144085579}, {0, -0.277618905284931}, {0, -0.212920717300506}, {0, -0.122604393655731}, {0, -0.0411498072024544}, {0, 0.277618905284931}, {0, 0.212920717300506}, {0, 0.122604393655731}, {0, 0.0411498072024544}, {0, 0.703179558498457}, {0, 0.539305836657195}, {0, 0.31054406511806}, {0, 0.104228144085579}}, {{0, -0.414343705828224}, {0, -0.0847354795428142}, {0, 0.375385648553375}, {0, 0.790360203484329}, {0, -0.414343705828224}, {0, -0.0847354795428142}, {0, 0.375385648553375}, {0, 0.790360203484329}, {0, -0.414343705828224}, {0, -0.0847354795428142}, {0, 0.375385648553375}, {0, 0.790360203484329}, {0, -0.414343705828224}, {0, -0.0847354795428142}, {0, 0.375385648553375}, {0, 0.790360203484329}}};
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    double copyofvalues[2];
    double result = 0.0;
    // Iterate over the points:
    static const unsigned int ns[15] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 16, 16, 16, 16, 16, 16};
    for (unsigned int j = 0; j < ns[i]; j++) {
      // Evaluate basis functions for affine mapping
      const double w0 = 1.0 - X[i][j][0] - X[i][j][1];
      const double w1 = X[i][j][0];
      const double w2 = X[i][j][1];
      
      // Compute affine mapping y = F(X)
      double y[2];
      y[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0];
      y[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1];
      
      // Evaluate function at physical points
      double values[2];
      f.evaluate(values, y, c);
      
      // Map function values using appropriate mapping
      // Copy old values:
      copyofvalues[0] = values[0];
      copyofvalues[1] = values[1];
      // Do the inverse of curl piola 
      values[0] = J_00*copyofvalues[0]+J_10*copyofvalues[1];
      values[1] = J_01*copyofvalues[0]+J_11*copyofvalues[1];
    
      // Note that we do not map the weights (yet).
    
      // Take directional components
      for(int k = 0; k < 2; k++)
        result += values[k]*D[i][j][k];
      // Multiply by weights 
      result *= W[i][j];
    
    } // End for
    return result;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
      
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
      
    // Compute inverse of Jacobian
    const double Jinv_00 =  J_11 / detJ;
    const double Jinv_01 = -J_01 / detJ;
    const double Jinv_10 = -J_10 / detJ;
    const double Jinv_11 =  J_00 / detJ;
    // Evaluate at vertices and use Piola mapping
    vertex_values[0] = (dof_values[3]*3*Jinv_10 + dof_values[4]*(-3*Jinv_10) + dof_values[5]*Jinv_10 + dof_values[6]*3*Jinv_00 + dof_values[7]*(-3*Jinv_00) + dof_values[8]*Jinv_00);
    vertex_values[2] = (dof_values[0]*3*Jinv_10 + dof_values[1]*(-3*Jinv_10) + dof_values[2]*Jinv_10 + dof_values[6]*(Jinv_00 + Jinv_10) + dof_values[7]*(-3*Jinv_00 - 3*Jinv_10) + dof_values[8]*(3*Jinv_00 + 3*Jinv_10));
    vertex_values[4] = (dof_values[0]*Jinv_00 + dof_values[1]*3*Jinv_00 + dof_values[2]*(-3*Jinv_00) + dof_values[3]*(Jinv_00 + Jinv_10) + dof_values[4]*(-3*Jinv_00 - 3*Jinv_10) + dof_values[5]*(3*Jinv_00 + 3*Jinv_10));
    vertex_values[1] = (dof_values[3]*3*Jinv_11 + dof_values[4]*(-3*Jinv_11) + dof_values[5]*Jinv_11 + dof_values[6]*3*Jinv_01 + dof_values[7]*(-3*Jinv_01) + dof_values[8]*Jinv_01);
    vertex_values[3] = (dof_values[0]*3*Jinv_11 + dof_values[1]*(-3*Jinv_11) + dof_values[2]*Jinv_11 + dof_values[6]*(Jinv_01 + Jinv_11) + dof_values[7]*(-3*Jinv_01 - 3*Jinv_11) + dof_values[8]*(3*Jinv_01 + 3*Jinv_11));
    vertex_values[5] = (dof_values[0]*Jinv_01 + dof_values[1]*3*Jinv_01 + dof_values[2]*(-3*Jinv_01) + dof_values[3]*(Jinv_01 + Jinv_11) + dof_values[4]*(-3*Jinv_01 - 3*Jinv_11) + dof_values[5]*(3*Jinv_01 + 3*Jinv_11));
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new UFC_Forms_1_finite_element_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class UFC_Forms_1_dof_map_0: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  UFC_Forms_1_dof_map_0() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~UFC_Forms_1_dof_map_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for Nedelec finite element of degree 3 on a triangle";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return false;
      break;
    case 1:
      return true;
      break;
    case 2:
      return true;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = 3*m.num_entities[1] + 6*m.num_entities[2];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space
  virtual unsigned int local_dimension() const
  {
    return 15;
  }

  // Return the geometric dimension of the coordinates this dof map provides
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 3;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = 3*c.entity_indices[1][0];
    dofs[1] = 3*c.entity_indices[1][0] + 1;
    dofs[2] = 3*c.entity_indices[1][0] + 2;
    dofs[3] = 3*c.entity_indices[1][1];
    dofs[4] = 3*c.entity_indices[1][1] + 1;
    dofs[5] = 3*c.entity_indices[1][1] + 2;
    dofs[6] = 3*c.entity_indices[1][2];
    dofs[7] = 3*c.entity_indices[1][2] + 1;
    dofs[8] = 3*c.entity_indices[1][2] + 2;
    unsigned int offset = 3*m.num_entities[1];
    dofs[9] = offset + 6*c.entity_indices[2][0];
    dofs[10] = offset + 6*c.entity_indices[2][0] + 1;
    dofs[11] = offset + 6*c.entity_indices[2][0] + 2;
    dofs[12] = offset + 6*c.entity_indices[2][0] + 3;
    dofs[13] = offset + 6*c.entity_indices[2][0] + 4;
    dofs[14] = offset + 6*c.entity_indices[2][0] + 5;
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      break;
    case 1:
      dofs[0] = 3;
      dofs[1] = 4;
      dofs[2] = 5;
      break;
    case 2:
      dofs[0] = 6;
      dofs[1] = 7;
      dofs[2] = 8;
      break;
    }
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    coordinates[0][0] = 0.75*x[1][0] + 0.25*x[2][0];
    coordinates[0][1] = 0.75*x[1][1] + 0.25*x[2][1];
    coordinates[1][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[1][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[2][0] = 0.25*x[1][0] + 0.75*x[2][0];
    coordinates[2][1] = 0.25*x[1][1] + 0.75*x[2][1];
    coordinates[3][0] = 0.75*x[0][0] + 0.25*x[2][0];
    coordinates[3][1] = 0.75*x[0][1] + 0.25*x[2][1];
    coordinates[4][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[4][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[5][0] = 0.25*x[0][0] + 0.75*x[2][0];
    coordinates[5][1] = 0.25*x[0][1] + 0.75*x[2][1];
    coordinates[6][0] = 0.75*x[0][0] + 0.25*x[1][0];
    coordinates[6][1] = 0.75*x[0][1] + 0.25*x[1][1];
    coordinates[7][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[7][1] = 0.5*x[0][1] + 0.5*x[1][1];
    coordinates[8][0] = 0.25*x[0][0] + 0.75*x[1][0];
    coordinates[8][1] = 0.25*x[0][1] + 0.75*x[1][1];
    coordinates[9][0] = 0.877428809330468*x[0][0] + 0.0654669945550145*x[1][0] + 0.0571041961145176*x[2][0];
    coordinates[9][1] = 0.877428809330468*x[0][1] + 0.0654669945550145*x[1][1] + 0.0571041961145176*x[2][1];
    coordinates[10][0] = 0.877428809330468*x[0][0] + 0.0654669945550145*x[1][0] + 0.0571041961145176*x[2][0];
    coordinates[10][1] = 0.877428809330468*x[0][1] + 0.0654669945550145*x[1][1] + 0.0571041961145176*x[2][1];
    coordinates[11][0] = 0.877428809330468*x[0][0] + 0.0654669945550145*x[1][0] + 0.0571041961145176*x[2][0];
    coordinates[11][1] = 0.877428809330468*x[0][1] + 0.0654669945550145*x[1][1] + 0.0571041961145176*x[2][1];
    coordinates[12][0] = 0.877428809330468*x[0][0] + 0.0654669945550145*x[1][0] + 0.0571041961145176*x[2][0];
    coordinates[12][1] = 0.877428809330468*x[0][1] + 0.0654669945550145*x[1][1] + 0.0571041961145176*x[2][1];
    coordinates[13][0] = 0.877428809330468*x[0][0] + 0.0654669945550145*x[1][0] + 0.0571041961145176*x[2][0];
    coordinates[13][1] = 0.877428809330468*x[0][1] + 0.0654669945550145*x[1][1] + 0.0571041961145176*x[2][1];
    coordinates[14][0] = 0.877428809330468*x[0][0] + 0.0654669945550145*x[1][0] + 0.0571041961145176*x[2][0];
    coordinates[14][1] = 0.877428809330468*x[0][1] + 0.0654669945550145*x[1][1] + 0.0571041961145176*x[2][1];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new UFC_Forms_1_dof_map_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class UFC_Forms_1_dof_map_1: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  UFC_Forms_1_dof_map_1() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~UFC_Forms_1_dof_map_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for Nedelec finite element of degree 3 on a triangle";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return false;
      break;
    case 1:
      return true;
      break;
    case 2:
      return true;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = 3*m.num_entities[1] + 6*m.num_entities[2];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space
  virtual unsigned int local_dimension() const
  {
    return 15;
  }

  // Return the geometric dimension of the coordinates this dof map provides
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 3;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = 3*c.entity_indices[1][0];
    dofs[1] = 3*c.entity_indices[1][0] + 1;
    dofs[2] = 3*c.entity_indices[1][0] + 2;
    dofs[3] = 3*c.entity_indices[1][1];
    dofs[4] = 3*c.entity_indices[1][1] + 1;
    dofs[5] = 3*c.entity_indices[1][1] + 2;
    dofs[6] = 3*c.entity_indices[1][2];
    dofs[7] = 3*c.entity_indices[1][2] + 1;
    dofs[8] = 3*c.entity_indices[1][2] + 2;
    unsigned int offset = 3*m.num_entities[1];
    dofs[9] = offset + 6*c.entity_indices[2][0];
    dofs[10] = offset + 6*c.entity_indices[2][0] + 1;
    dofs[11] = offset + 6*c.entity_indices[2][0] + 2;
    dofs[12] = offset + 6*c.entity_indices[2][0] + 3;
    dofs[13] = offset + 6*c.entity_indices[2][0] + 4;
    dofs[14] = offset + 6*c.entity_indices[2][0] + 5;
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      break;
    case 1:
      dofs[0] = 3;
      dofs[1] = 4;
      dofs[2] = 5;
      break;
    case 2:
      dofs[0] = 6;
      dofs[1] = 7;
      dofs[2] = 8;
      break;
    }
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    coordinates[0][0] = 0.75*x[1][0] + 0.25*x[2][0];
    coordinates[0][1] = 0.75*x[1][1] + 0.25*x[2][1];
    coordinates[1][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[1][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[2][0] = 0.25*x[1][0] + 0.75*x[2][0];
    coordinates[2][1] = 0.25*x[1][1] + 0.75*x[2][1];
    coordinates[3][0] = 0.75*x[0][0] + 0.25*x[2][0];
    coordinates[3][1] = 0.75*x[0][1] + 0.25*x[2][1];
    coordinates[4][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[4][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[5][0] = 0.25*x[0][0] + 0.75*x[2][0];
    coordinates[5][1] = 0.25*x[0][1] + 0.75*x[2][1];
    coordinates[6][0] = 0.75*x[0][0] + 0.25*x[1][0];
    coordinates[6][1] = 0.75*x[0][1] + 0.25*x[1][1];
    coordinates[7][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[7][1] = 0.5*x[0][1] + 0.5*x[1][1];
    coordinates[8][0] = 0.25*x[0][0] + 0.75*x[1][0];
    coordinates[8][1] = 0.25*x[0][1] + 0.75*x[1][1];
    coordinates[9][0] = 0.877428809330468*x[0][0] + 0.0654669945550145*x[1][0] + 0.0571041961145176*x[2][0];
    coordinates[9][1] = 0.877428809330468*x[0][1] + 0.0654669945550145*x[1][1] + 0.0571041961145176*x[2][1];
    coordinates[10][0] = 0.877428809330468*x[0][0] + 0.0654669945550145*x[1][0] + 0.0571041961145176*x[2][0];
    coordinates[10][1] = 0.877428809330468*x[0][1] + 0.0654669945550145*x[1][1] + 0.0571041961145176*x[2][1];
    coordinates[11][0] = 0.877428809330468*x[0][0] + 0.0654669945550145*x[1][0] + 0.0571041961145176*x[2][0];
    coordinates[11][1] = 0.877428809330468*x[0][1] + 0.0654669945550145*x[1][1] + 0.0571041961145176*x[2][1];
    coordinates[12][0] = 0.877428809330468*x[0][0] + 0.0654669945550145*x[1][0] + 0.0571041961145176*x[2][0];
    coordinates[12][1] = 0.877428809330468*x[0][1] + 0.0654669945550145*x[1][1] + 0.0571041961145176*x[2][1];
    coordinates[13][0] = 0.877428809330468*x[0][0] + 0.0654669945550145*x[1][0] + 0.0571041961145176*x[2][0];
    coordinates[13][1] = 0.877428809330468*x[0][1] + 0.0654669945550145*x[1][1] + 0.0571041961145176*x[2][1];
    coordinates[14][0] = 0.877428809330468*x[0][0] + 0.0654669945550145*x[1][0] + 0.0571041961145176*x[2][0];
    coordinates[14][1] = 0.877428809330468*x[0][1] + 0.0654669945550145*x[1][1] + 0.0571041961145176*x[2][1];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new UFC_Forms_1_dof_map_1();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class UFC_Forms_1_cell_integral_0: public ufc::cell_integral
{
public:

  /// Constructor
  UFC_Forms_1_cell_integral_0() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Forms_1_cell_integral_0()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
      
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
      
    // Compute inverse of Jacobian
    const double Jinv_00 =  J_11 / detJ;
    const double Jinv_01 = -J_01 / detJ;
    const double Jinv_10 = -J_10 / detJ;
    const double Jinv_11 =  J_00 / detJ;
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Number of operations to compute element tensor = 1571
    // Compute geometry tensors
    // Number of operations to compute decalrations = 16
    const double G0_0_0 = det*(Jinv_00*Jinv_00 + Jinv_01*Jinv_01);
    const double G0_0_1 = det*(Jinv_00*Jinv_10 + Jinv_01*Jinv_11);
    const double G0_1_0 = det*(Jinv_10*Jinv_00 + Jinv_11*Jinv_01);
    const double G0_1_1 = det*(Jinv_10*Jinv_10 + Jinv_11*Jinv_11);
    
    // Compute element tensor
    // Number of operations to compute tensor = 1555
    A[0] = 0.0216269841269841*G0_0_0 - 0.0111607142857143*G0_0_1 - 0.0111607142857143*G0_1_0 + 0.0573412698412697*G0_1_1;
    A[1] = -0.0298611111111111*G0_0_0 + 0.00595238095238094*G0_0_1 + 0.00992063492063493*G0_1_0 - 0.0487103174603173*G0_1_1;
    A[2] = 0.0176587301587302*G0_0_0 - 0.00471230158730158*G0_0_1 - 0.00471230158730159*G0_1_0 + 0.0176587301587301*G0_1_1;
    A[3] = -0.0154265873015873*G0_0_0 - 0.0244791666666667*G0_0_1 + 0.00905257936507934*G0_1_0 + 0.0186011904761905*G0_1_1;
    A[4] = 0.0174603174603175*G0_0_0 + 0.0216765873015873*G0_0_1 - 0.00570436507936509*G0_1_0 - 0.0119047619047619*G0_1_1;
    A[5] = -0.023859126984127*G0_0_0 - 0.0326636904761905*G0_0_1 + 0.00682043650793652*G0_1_0 + 0.0111607142857143*G0_1_1;
    A[6] = -0.0131448412698413*G0_0_0 - 0.0088045634920635*G0_0_1 + 0.0306795634920634*G0_1_0 + 0.0238591269841269*G0_1_1;
    A[7] = 0.0277777777777778*G0_0_0 + 0.0141369047619048*G0_0_1 - 0.072767857142857*G0_1_0 - 0.061111111111111*G0_1_1;
    A[8] = -0.0205853174603175*G0_0_0 - 0.00706845238095238*G0_0_1 + 0.0582093253968253*G0_1_0 + 0.0511408730158729*G0_1_1;
    A[9] = 0.0217463395007768*G0_0_0 - 0.0115746645729941*G0_0_1 - 0.0312165196059538*G0_1_0 + 0.0175373705651425*G0_1_1;
    A[10] = 0.0326477830791753*G0_0_0 - 0.0257745655888226*G0_0_1 - 0.0635772617857624*G0_1_0 + 0.0326477830791752*G0_1_1;
    A[11] = -0.00843253968253972*G0_0_0 - 0.00372023809523811*G0_0_1 + 0.0359623015873017*G0_1_0 - 0.00545634920634912*G0_1_1;
    A[12] = 0.0175373705651425*G0_0_0 + 0.0641867762684218*G0_0_1 - 0.00596270599214845*G0_1_0 - 0.0624330392119074*G0_1_1;
    A[13] = -0.0502604028982041*G0_0_0 - 0.0315738428463076*G0_0_1 + 0.035440027684631*G0_1_0 - 0.0425280332215573*G0_1_1;
    A[14] = 0.0310019841269841*G0_0_0 + 0.0479910714285714*G0_0_1 - 0.0105406746031746*G0_1_0 + 0.0265376984126984*G0_1_1;
    A[15] = -0.0298611111111111*G0_0_0 + 0.00992063492063493*G0_0_1 + 0.00595238095238094*G0_1_0 - 0.0487103174603173*G0_1_1;
    A[16] = 0.0686507936507937*G0_0_0 - 0.0128968253968254*G0_0_1 - 0.0128968253968254*G0_1_0 + 0.0686507936507935*G0_1_1;
    A[17] = -0.0487103174603175*G0_0_0 + 0.00595238095238093*G0_0_1 + 0.00992063492063488*G0_1_0 - 0.029861111111111*G0_1_1;
    A[18] = 0.0174603174603175*G0_0_0 + 0.0231646825396826*G0_0_1 - 0.00421626984126982*G0_1_0 - 0.0104166666666666*G0_1_1;
    A[19] = -0.0438492063492064*G0_0_0 - 0.0532738095238095*G0_0_1 + 0.00942460317460314*G0_1_0 + 0.0178571428571428*G0_1_1;
    A[20] = 0.0611111111111112*G0_0_0 + 0.0752480158730159*G0_0_1 - 0.011656746031746*G0_1_0 - 0.025297619047619*G0_1_1;
    A[21] = 0.0104166666666667*G0_0_0 + 0.00421626984126985*G0_0_1 - 0.0231646825396825*G0_1_0 - 0.0174603174603174*G0_1_1;
    A[22] = -0.0178571428571429*G0_0_0 - 0.00942460317460319*G0_0_1 + 0.0532738095238094*G0_1_0 + 0.0438492063492062*G0_1_1;
    A[23] = 0.025297619047619*G0_0_0 + 0.011656746031746*G0_0_1 - 0.0752480158730157*G0_1_0 - 0.061111111111111*G0_1_1;
    A[24] = -0.0392837100659194*G0_0_0 - 0.00491046375823992*G0_0_1 + 0.068044997792753*G0_1_0 + 0.035074741130285*G0_1_1;
    A[25] = -0.0266337177751166*G0_0_0 - 0.00429576093147035*G0_0_1 + 0.091929283933467*G0_1_0 + 0.0420984571284101*G0_1_1;
    A[26] = -0.00248015873015868*G0_0_0 + 0.00992063492063493*G0_0_1 - 0.0813492063492063*G0_1_0 - 0.0510912698412698*G0_1_1;
    A[27] = -0.0350747411302851*G0_0_0 - 0.0680449977927531*G0_0_1 + 0.00491046375823989*G0_1_0 + 0.0392837100659193*G0_1_1;
    A[28] = 0.0231971090299404*G0_0_0 + 0.0244858373093814*G0_0_1 - 0.00644364139720564*G0_1_0 + 0.0154647393532936*G0_1_1;
    A[29] = -0.0620039682539682*G0_0_0 - 0.120287698412698*G0_0_1 + 0.00868055555555551*G0_1_0 + 0.0218253968253966*G0_1_1;
    A[30] = 0.0176587301587302*G0_0_0 - 0.00471230158730159*G0_0_1 - 0.00471230158730158*G0_1_0 + 0.0176587301587301*G0_1_1;
    A[31] = -0.0487103174603175*G0_0_0 + 0.00992063492063488*G0_0_1 + 0.00595238095238093*G0_1_0 - 0.029861111111111*G0_1_1;
    A[32] = 0.0573412698412699*G0_0_0 - 0.0111607142857143*G0_0_1 - 0.0111607142857143*G0_1_0 + 0.0216269841269841*G0_1_1;
    A[33] = -0.023859126984127*G0_0_0 - 0.0306795634920635*G0_0_1 + 0.00880456349206348*G0_1_0 + 0.0131448412698413*G0_1_1;
    A[34] = 0.0611111111111112*G0_0_0 + 0.0727678571428572*G0_0_1 - 0.0141369047619047*G0_1_0 - 0.0277777777777777*G0_1_1;
    A[35] = -0.0511408730158731*G0_0_0 - 0.0582093253968254*G0_0_1 + 0.00706845238095236*G0_1_0 + 0.0205853174603174*G0_1_1;
    A[36] = -0.0186011904761905*G0_0_0 - 0.00905257936507936*G0_0_1 + 0.0244791666666666*G0_1_0 + 0.0154265873015873*G0_1_1;
    A[37] = 0.0119047619047619*G0_0_0 + 0.0057043650793651*G0_0_1 - 0.0216765873015873*G0_1_0 - 0.0174603174603174*G0_1_1;
    A[38] = -0.0111607142857143*G0_0_0 - 0.00682043650793651*G0_0_1 + 0.0326636904761904*G0_1_0 + 0.0238591269841269*G0_1_1;
    A[39] = 0.0624330392119075*G0_0_0 + 0.00596270599214846*G0_0_1 - 0.0641867762684217*G0_1_0 - 0.0175373705651425*G0_1_1;
    A[40] = -0.00171830437258813*G0_0_0 - 0.00859152186294093*G0_0_1 - 0.0257745655888226*G0_1_0 - 0.00171830437258816*G0_1_1;
    A[41] = 0.0500992063492063*G0_0_0 - 0.0359623015873016*G0_0_1 + 0.0513392857142857*G0_1_0 + 0.0590277777777776*G0_1_1;
    A[42] = -0.0175373705651426*G0_0_0 + 0.0312165196059537*G0_0_1 + 0.0115746645729941*G0_1_0 - 0.0217463395007767*G0_1_1;
    A[43] = -0.0115985545149702*G0_0_0 + 0.000644364139720533*G0_0_1 + 0.0161091034930141*G0_1_0 - 0.0090210979560879*G0_1_1;
    A[44] = -0.0310019841269842*G0_0_0 + 0.0730406746031745*G0_0_1 + 0.0204613095238095*G0_1_0 - 0.0324900793650792*G0_1_1;
    A[45] = -0.0154265873015873*G0_0_0 + 0.00905257936507934*G0_0_1 - 0.0244791666666667*G0_1_0 + 0.0186011904761905*G0_1_1;
    A[46] = 0.0174603174603175*G0_0_0 - 0.00421626984126982*G0_0_1 + 0.0231646825396826*G0_1_0 - 0.0104166666666666*G0_1_1;
    A[47] = -0.023859126984127*G0_0_0 + 0.00880456349206348*G0_0_1 - 0.0306795634920635*G0_1_0 + 0.0131448412698413*G0_1_1;
    A[48] = 0.0216269841269841*G0_0_0 + 0.0327876984126984*G0_0_1 + 0.0327876984126984*G0_1_0 + 0.101289682539683*G0_1_1;
    A[49] = -0.0298611111111112*G0_0_0 - 0.0358134920634921*G0_0_1 - 0.0397817460317461*G0_1_0 - 0.0944444444444444*G0_1_1;
    A[50] = 0.0176587301587302*G0_0_0 + 0.0223710317460318*G0_0_1 + 0.0223710317460318*G0_1_0 + 0.0447420634920635*G0_1_1;
    A[51] = 0.0205853174603174*G0_0_0 + 0.0135168650793651*G0_0_1 + 0.0787946428571428*G0_1_0 + 0.0205853174603174*G0_1_1;
    A[52] = -0.0277777777777777*G0_0_0 - 0.013640873015873*G0_0_1 - 0.100545634920635*G0_1_0 - 0.025297619047619*G0_1_1;
    A[53] = 0.0131448412698412*G0_0_0 + 0.00434027777777776*G0_0_1 + 0.0438244047619047*G0_1_0 + 0.0111607142857143*G0_1_1;
    A[54] = -0.0392837100659194*G0_0_0 + 0.0133284016295083*G0_0_1 - 0.0764629356640216*G0_1_0 + 0.021044844678171*G0_1_1;
    A[55] = -0.0176126198190288*G0_0_0 + 0.0397357886161014*G0_0_1 + 0.0105246142821025*G0_1_0 + 0.0579927725748507*G0_1_1;
    A[56] = -0.0225694444444444*G0_0_0 + 0.0217013888888889*G0_0_1 + 0.00285218253968261*G0_1_0 + 0.0260416666666667*G0_1_1;
    A[57] = 0.0175373705651426*G0_0_0 - 0.0466494057032792*G0_0_1 + 0.0235000765572911*G0_1_0 - 0.103119738923038*G0_1_1;
    A[58] = 0.050260402898204*G0_0_0 + 0.0186865600518964*G0_0_1 + 0.0857004305828351*G0_1_0 + 0.0966546209580847*G0_1_1;
    A[59] = 0.0310019841269842*G0_0_0 - 0.0169890873015873*G0_0_1 + 0.0415426587301588*G0_1_0 + 0.0200892857142857*G0_1_1;
    A[60] = 0.0174603174603175*G0_0_0 - 0.00570436507936509*G0_0_1 + 0.0216765873015873*G0_1_0 - 0.0119047619047619*G0_1_1;
    A[61] = -0.0438492063492064*G0_0_0 + 0.00942460317460314*G0_0_1 - 0.0532738095238096*G0_1_0 + 0.0178571428571428*G0_1_1;
    A[62] = 0.0611111111111112*G0_0_0 - 0.0141369047619047*G0_0_1 + 0.0727678571428572*G0_1_0 - 0.0277777777777777*G0_1_1;
    A[63] = -0.0298611111111112*G0_0_0 - 0.0397817460317461*G0_0_1 - 0.0358134920634921*G0_1_0 - 0.0944444444444444*G0_1_1;
    A[64] = 0.0686507936507937*G0_0_0 + 0.0815476190476191*G0_0_1 + 0.0815476190476191*G0_1_0 + 0.163095238095238*G0_1_1;
    A[65] = -0.0487103174603175*G0_0_0 - 0.0546626984126985*G0_0_1 - 0.0586309523809525*G0_1_0 - 0.0944444444444445*G0_1_1;
    A[66] = -0.0252976190476191*G0_0_0 - 0.013640873015873*G0_0_1 - 0.100545634920635*G0_1_0 - 0.0277777777777777*G0_1_1;
    A[67] = 0.0178571428571429*G0_0_0 + 0.00843253968253971*G0_0_1 + 0.0711309523809523*G0_1_0 + 0.0178571428571429*G0_1_1;
    A[68] = -0.0104166666666667*G0_0_0 - 0.00620039682539683*G0_0_1 - 0.0335813492063492*G0_1_0 - 0.0119047619047619*G0_1_1;
    A[69] = 0.0743584511962044*G0_0_0 + 0.0014029896452114*G0_0_1 + 0.147313912747197*G0_1_0;
    A[70] = -0.0034366087451763*G0_0_0 - 0.0236266851230874*G0_0_1 - 0.0889222512814377*G0_1_0 - 0.0515491311776451*G0_1_1;
    A[71] = 0.0644841269841269*G0_0_0 - 0.0458829365079365*G0_0_1 - 0.00818452380952393*G0_1_0 - 0.0892857142857144*G0_1_1;
    A[72] = -0.0350747411302852*G0_0_0 + 0.032970256662468*G0_0_1 - 0.0399852048885251*G0_1_0 + 0.0673435029701473*G0_1_1;
    A[73] = -0.0231971090299404*G0_0_0 + 0.00128872827944108*G0_0_1 - 0.029640750427146*G0_1_0 - 0.0206196524710582*G0_1_1;
    A[74] = -0.0620039682539683*G0_0_0 + 0.05828373015873*G0_0_1 - 0.0706845238095238*G0_1_0 + 0.0714285714285714*G0_1_1;
    A[75] = -0.023859126984127*G0_0_0 + 0.00682043650793652*G0_0_1 - 0.0326636904761905*G0_1_0 + 0.0111607142857143*G0_1_1;
    A[76] = 0.0611111111111112*G0_0_0 - 0.011656746031746*G0_0_1 + 0.0752480158730159*G0_1_0 - 0.025297619047619*G0_1_1;
    A[77] = -0.0511408730158731*G0_0_0 + 0.00706845238095236*G0_0_1 - 0.0582093253968254*G0_1_0 + 0.0205853174603174*G0_1_1;
    A[78] = 0.0176587301587302*G0_0_0 + 0.0223710317460318*G0_0_1 + 0.0223710317460318*G0_1_0 + 0.0447420634920635*G0_1_1;
    A[79] = -0.0487103174603175*G0_0_0 - 0.0586309523809525*G0_0_1 - 0.0546626984126985*G0_1_0 - 0.0944444444444445*G0_1_1;
    A[80] = 0.0573412698412699*G0_0_0 + 0.0685019841269842*G0_0_1 + 0.0685019841269842*G0_1_0 + 0.101289682539683*G0_1_1;
    A[81] = 0.0111607142857144*G0_0_0 + 0.00434027777777779*G0_0_1 + 0.0438244047619048*G0_1_0 + 0.0131448412698413*G0_1_1;
    A[82] = -0.011904761904762*G0_0_0 - 0.00620039682539685*G0_0_1 - 0.0335813492063492*G0_1_0 - 0.0104166666666667*G0_1_1;
    A[83] = 0.0186011904761905*G0_0_0 + 0.00954861111111111*G0_0_1 + 0.0430803571428571*G0_1_0 + 0.0186011904761905*G0_1_1;
    A[84] = -0.044895668646765*G0_0_0 - 0.0077164430486627*G0_0_1 - 0.0975077803421926*G0_1_0 - 0.0210448446781711*G0_1_1;
    A[85] = -0.0133168588875583*G0_0_0 - 0.0053697011643379*G0_0_1 - 0.0036513967917498*G0_1_0 - 0.00644364139720555*G0_1_1;
    A[86] = -0.0190972222222222*G0_0_0 + 0.0179811507936508*G0_0_1 + 0.052703373015873*G0_1_0 + 0.0632440476190476*G0_1_1;
    A[87] = -0.0175373705651425*G0_0_0 - 0.0487538901710964*G0_0_1 - 0.0291120351381366*G0_1_0 - 0.0820748942448671*G0_1_1;
    A[88] = 0.0115985545149702*G0_0_0 + 0.0122429186546907*G0_0_1 + 0.0277076580079843*G0_1_0 + 0.0373731201037928*G0_1_1;
    A[89] = -0.0310019841269841*G0_0_0 - 0.104042658730159*G0_0_1 - 0.0514632936507936*G0_1_0 - 0.156994047619048*G0_1_1;
    A[90] = -0.0131448412698413*G0_0_0 + 0.0306795634920634*G0_0_1 - 0.0088045634920635*G0_1_0 + 0.0238591269841269*G0_1_1;
    A[91] = 0.0104166666666667*G0_0_0 - 0.0231646825396825*G0_0_1 + 0.00421626984126985*G0_1_0 - 0.0174603174603174*G0_1_1;
    A[92] = -0.0186011904761905*G0_0_0 + 0.0244791666666666*G0_0_1 - 0.00905257936507936*G0_1_0 + 0.0154265873015873*G0_1_1;
    A[93] = 0.0205853174603175*G0_0_0 + 0.0787946428571428*G0_0_1 + 0.0135168650793651*G0_1_0 + 0.0205853174603174*G0_1_1;
    A[94] = -0.0252976190476191*G0_0_0 - 0.100545634920635*G0_0_1 - 0.013640873015873*G0_1_0 - 0.0277777777777777*G0_1_1;
    A[95] = 0.0111607142857144*G0_0_0 + 0.0438244047619048*G0_0_1 + 0.00434027777777779*G0_1_0 + 0.0131448412698413*G0_1_1;
    A[96] = 0.101289682539682*G0_0_0 + 0.0327876984126984*G0_0_1 + 0.0327876984126984*G0_1_0 + 0.0216269841269841*G0_1_1;
    A[97] = -0.0944444444444444*G0_0_0 - 0.039781746031746*G0_0_1 - 0.035813492063492*G0_1_0 - 0.029861111111111*G0_1_1;
    A[98] = 0.0447420634920635*G0_0_0 + 0.0223710317460317*G0_0_1 + 0.0223710317460317*G0_1_0 + 0.0176587301587301*G0_1_1;
    A[99] = -0.103119738923038*G0_0_0 + 0.0235000765572909*G0_0_1 - 0.0466494057032791*G0_1_0 + 0.0175373705651425*G0_1_1;
    A[100] = 0.0657251422514974*G0_0_0 + 0.0788272130924821*G0_0_1 - 0.00536970116433808*G0_1_0 + 0.0519787072707921*G0_1_1;
    A[101] = 0.0736607142857144*G0_0_0 + 0.0534474206349207*G0_0_1 + 0.0246775793650793*G0_1_0 + 0.0280257936507936*G0_1_1;
    A[102] = 0.021044844678171*G0_0_0 - 0.0764629356640215*G0_0_1 + 0.0133284016295083*G0_1_0 - 0.0392837100659193*G0_1_1;
    A[103] = 0.0515491311776451*G0_0_0 + 0.00773236967664697*G0_0_1 + 0.0386618483832338*G0_1_0 - 0.0283520221477048*G0_1_1;
    A[104] = 0.0372023809523808*G0_0_0 + 0.00768849206349203*G0_0_1 + 0.0235615079365079*G0_1_0 - 0.00396825396825391*G0_1_1;
    A[105] = 0.0277777777777778*G0_0_0 - 0.072767857142857*G0_0_1 + 0.0141369047619048*G0_1_0 - 0.061111111111111*G0_1_1;
    A[106] = -0.0178571428571429*G0_0_0 + 0.0532738095238094*G0_0_1 - 0.00942460317460319*G0_1_0 + 0.0438492063492062*G0_1_1;
    A[107] = 0.0119047619047619*G0_0_0 - 0.0216765873015873*G0_0_1 + 0.0057043650793651*G0_1_0 - 0.0174603174603174*G0_1_1;
    A[108] = -0.0277777777777777*G0_0_0 - 0.100545634920635*G0_0_1 - 0.013640873015873*G0_1_0 - 0.025297619047619*G0_1_1;
    A[109] = 0.0178571428571429*G0_0_0 + 0.0711309523809523*G0_0_1 + 0.00843253968253971*G0_1_0 + 0.0178571428571429*G0_1_1;
    A[110] = -0.011904761904762*G0_0_0 - 0.0335813492063492*G0_0_1 - 0.00620039682539685*G0_1_0 - 0.0104166666666667*G0_1_1;
    A[111] = -0.0944444444444444*G0_0_0 - 0.035813492063492*G0_0_1 - 0.039781746031746*G0_1_0 - 0.029861111111111*G0_1_1;
    A[112] = 0.163095238095238*G0_0_0 + 0.0815476190476189*G0_0_1 + 0.0815476190476189*G0_1_0 + 0.0686507936507935*G0_1_1;
    A[113] = -0.0944444444444443*G0_0_0 - 0.0586309523809523*G0_0_1 - 0.0546626984126983*G0_1_0 - 0.0487103174603173*G0_1_1;
    A[114] = 0.0673435029701475*G0_0_0 - 0.0399852048885249*G0_0_1 + 0.0329702566624681*G0_1_0 - 0.035074741130285*G0_1_1;
    A[115] = 0.0515491311776452*G0_0_0 - 0.0760349684870263*G0_0_1 + 0.0511195550844981*G0_1_0 - 0.0652955661583504*G0_1_1;
    A[116] = -0.0535714285714287*G0_0_0 + 0.00967261904761893*G0_0_1 - 0.0280257936507937*G0_1_0 + 0.0109126984126983*G0_1_1;
    A[117] = 0.147313912747197*G0_0_1 + 0.00140298964521137*G0_1_0 + 0.0743584511962043*G0_1_1;
    A[118] = -0.10309826235529*G0_0_0 - 0.0515491311776451*G0_0_1 - 0.0515491311776451*G0_1_0 + 0.0541265877365274*G0_1_1;
    A[119] = -0.0729166666666667*G0_0_1 + 0.00248015873015867*G0_1_0 - 0.0352182539682539*G0_1_1;
    A[120] = -0.0205853174603175*G0_0_0 + 0.0582093253968253*G0_0_1 - 0.00706845238095238*G0_1_0 + 0.0511408730158729*G0_1_1;
    A[121] = 0.025297619047619*G0_0_0 - 0.0752480158730157*G0_0_1 + 0.011656746031746*G0_1_0 - 0.061111111111111*G0_1_1;
    A[122] = -0.0111607142857143*G0_0_0 + 0.0326636904761904*G0_0_1 - 0.00682043650793651*G0_1_0 + 0.0238591269841269*G0_1_1;
    A[123] = 0.0131448412698412*G0_0_0 + 0.0438244047619047*G0_0_1 + 0.00434027777777776*G0_1_0 + 0.0111607142857143*G0_1_1;
    A[124] = -0.0104166666666667*G0_0_0 - 0.0335813492063492*G0_0_1 - 0.00620039682539683*G0_1_0 - 0.0119047619047619*G0_1_1;
    A[125] = 0.0186011904761905*G0_0_0 + 0.0430803571428571*G0_0_1 + 0.00954861111111111*G0_1_0 + 0.0186011904761905*G0_1_1;
    A[126] = 0.0447420634920635*G0_0_0 + 0.0223710317460317*G0_0_1 + 0.0223710317460317*G0_1_0 + 0.0176587301587301*G0_1_1;
    A[127] = -0.0944444444444443*G0_0_0 - 0.0546626984126983*G0_0_1 - 0.0586309523809523*G0_1_0 - 0.0487103174603173*G0_1_1;
    A[128] = 0.101289682539682*G0_0_0 + 0.068501984126984*G0_0_1 + 0.068501984126984*G0_1_0 + 0.0573412698412697*G0_1_1;
    A[129] = -0.0820748942448672*G0_0_0 - 0.0291120351381366*G0_0_1 - 0.0487538901710963*G0_1_0 - 0.0175373705651425*G0_1_1;
    A[130] = -0.117274273429143*G0_0_0 - 0.0307146906600136*G0_0_1 - 0.0839821262102468*G0_1_0 - 0.0210492285642051*G0_1_1;
    A[131] = 0.110863095238095*G0_0_0 + 0.0497271825396825*G0_0_1 + 0.062624007936508*G0_1_0 + 0.025545634920635*G0_1_1;
    A[132] = -0.021044844678171*G0_0_0 - 0.0975077803421925*G0_0_1 - 0.00771644304866269*G0_1_0 - 0.0448956686467649*G0_1_1;
    A[133] = 0.0515491311776451*G0_0_0 + 0.0438167615009982*G0_0_1 + 0.0128872827944113*G0_1_0 - 0.0231971090299403*G0_1_1;
    A[134] = -0.0372023809523809*G0_0_0 - 0.0295138888888888*G0_0_1 - 0.013640873015873*G0_1_0 - 0.00198412698412696*G0_1_1;
    A[135] = 0.0217463395007768*G0_0_0 - 0.0312165196059538*G0_0_1 - 0.0115746645729941*G0_1_0 + 0.0175373705651425*G0_1_1;
    A[136] = -0.0392837100659194*G0_0_0 + 0.068044997792753*G0_0_1 - 0.00491046375823992*G0_1_0 + 0.035074741130285*G0_1_1;
    A[137] = 0.0624330392119075*G0_0_0 - 0.0641867762684217*G0_0_1 + 0.00596270599214846*G0_1_0 - 0.0175373705651425*G0_1_1;
    A[138] = -0.0392837100659194*G0_0_0 - 0.0764629356640216*G0_0_1 + 0.0133284016295083*G0_1_0 + 0.021044844678171*G0_1_1;
    A[139] = 0.0743584511962044*G0_0_0 + 0.147313912747197*G0_0_1 + 0.0014029896452114*G0_1_0;
    A[140] = -0.044895668646765*G0_0_0 - 0.0975077803421926*G0_0_1 - 0.0077164430486627*G0_1_0 - 0.0210448446781711*G0_1_1;
    A[141] = -0.103119738923038*G0_0_0 - 0.0466494057032791*G0_0_1 + 0.0235000765572909*G0_1_0 + 0.0175373705651425*G0_1_1;
    A[142] = 0.0673435029701475*G0_0_0 + 0.0329702566624681*G0_0_1 - 0.0399852048885249*G0_1_0 - 0.035074741130285*G0_1_1;
    A[143] = -0.0820748942448672*G0_0_0 - 0.0487538901710963*G0_0_1 - 0.0291120351381366*G0_1_0 - 0.0175373705651425*G0_1_1;
    A[144] = 1.23015873015873*G0_0_0 + 0.0496031746031745*G0_0_1 + 0.0496031746031745*G0_1_0 + 0.099206349206349*G0_1_1;
    A[145] = 0.00607512336999804*G0_0_0 - 0.015187808424995*G0_0_1 + 0.0577136720149803*G0_1_0 + 0.151878084249949*G0_1_1;
    A[146] = -0.129776542182055*G0_0_0 - 0.201679761499139*G0_0_1 - 0.0754106934301128*G0_1_0 - 0.0876868528257126*G0_1_1;
    A[147] = -0.0496031746031746*G0_0_0 + 1.07638888888889*G0_0_1 + 0.00496031746031746*G0_1_0 - 0.0496031746031745*G0_1_1;
    A[148] = -0.0546761103299819*G0_0_0 - 0.00911268505499711*G0_0_1 + 0.0637887953849785*G0_1_0 - 0.0546761103299816*G0_1_1;
    A[149] = -0.0876868528257127*G0_0_0 + 0.135037753351597*G0_0_1 + 0.00876868528257125*G0_1_0 + 0.0806719045996556*G0_1_1;
    A[150] = 0.0326477830791753*G0_0_0 - 0.0635772617857623*G0_0_1 - 0.0257745655888226*G0_1_0 + 0.0326477830791752*G0_1_1;
    A[151] = -0.0266337177751166*G0_0_0 + 0.091929283933467*G0_0_1 - 0.00429576093147035*G0_1_0 + 0.0420984571284101*G0_1_1;
    A[152] = -0.00171830437258813*G0_0_0 - 0.0257745655888226*G0_0_1 - 0.00859152186294092*G0_1_0 - 0.00171830437258816*G0_1_1;
    A[153] = -0.0176126198190288*G0_0_0 + 0.0105246142821025*G0_0_1 + 0.0397357886161014*G0_1_0 + 0.0579927725748507*G0_1_1;
    A[154] = -0.00343660874517629*G0_0_0 - 0.0889222512814377*G0_0_1 - 0.0236266851230874*G0_1_0 - 0.0515491311776451*G0_1_1;
    A[155] = -0.0133168588875583*G0_0_0 - 0.0036513967917498*G0_0_1 - 0.0053697011643379*G0_1_0 - 0.00644364139720555*G0_1_1;
    A[156] = 0.0657251422514974*G0_0_0 - 0.00536970116433809*G0_0_1 + 0.0788272130924821*G0_1_0 + 0.0519787072707921*G0_1_1;
    A[157] = 0.0515491311776452*G0_0_0 + 0.0511195550844981*G0_0_1 - 0.0760349684870263*G0_1_0 - 0.0652955661583504*G0_1_1;
    A[158] = -0.117274273429143*G0_0_0 - 0.0839821262102468*G0_0_1 - 0.0307146906600136*G0_1_0 - 0.0210492285642051*G0_1_1;
    A[159] = 0.00607512336999798*G0_0_0 + 0.0577136720149803*G0_0_1 - 0.015187808424995*G0_1_0 + 0.151878084249949*G0_1_1;
    A[160] = 1.35416666666666*G0_0_0 + 0.107886904761904*G0_0_1 + 0.107886904761904*G0_1_0 + 0.282738095238094*G0_1_1;
    A[161] = -0.0472533702461745*G0_0_0 - 0.0171830437258816*G0_0_1 - 0.0687321749035267*G0_1_0 - 0.0472533702461746*G0_1_1;
    A[162] = 0.0425258635899855*G0_0_0 + 0.112389782344962*G0_0_1 + 0.0394883019049867*G0_1_0 - 0.103277097289965*G0_1_1;
    A[163] = -0.100446428571429*G0_0_0 + 0.898437499999999*G0_0_1 + 0.139508928571428*G0_1_0 - 0.100446428571428*G0_1_1;
    A[164] = 0.0751758163007321*G0_0_0 + 0.0440315495475717*G0_0_1 + 0.0698061151363943*G0_1_0 + 0.0751758163007323*G0_1_1;
    A[165] = -0.00843253968253972*G0_0_0 + 0.0359623015873017*G0_0_1 - 0.00372023809523811*G0_1_0 - 0.00545634920634913*G0_1_1;
    A[166] = -0.00248015873015868*G0_0_0 - 0.0813492063492063*G0_0_1 + 0.00992063492063493*G0_1_0 - 0.0510912698412698*G0_1_1;
    A[167] = 0.0500992063492063*G0_0_0 + 0.0513392857142857*G0_0_1 - 0.0359623015873016*G0_1_0 + 0.0590277777777777*G0_1_1;
    A[168] = -0.0225694444444444*G0_0_0 + 0.00285218253968261*G0_0_1 + 0.0217013888888889*G0_1_0 + 0.0260416666666667*G0_1_1;
    A[169] = 0.0644841269841269*G0_0_0 - 0.00818452380952393*G0_0_1 - 0.0458829365079365*G0_1_0 - 0.0892857142857144*G0_1_1;
    A[170] = -0.0190972222222222*G0_0_0 + 0.052703373015873*G0_0_1 + 0.0179811507936508*G0_1_0 + 0.0632440476190476*G0_1_1;
    A[171] = 0.0736607142857144*G0_0_0 + 0.0246775793650793*G0_0_1 + 0.0534474206349207*G0_1_0 + 0.0280257936507936*G0_1_1;
    A[172] = -0.0535714285714287*G0_0_0 - 0.0280257936507937*G0_0_1 + 0.00967261904761893*G0_1_0 + 0.0109126984126983*G0_1_1;
    A[173] = 0.110863095238095*G0_0_0 + 0.0626240079365079*G0_0_1 + 0.0497271825396825*G0_1_0 + 0.025545634920635*G0_1_1;
    A[174] = -0.129776542182055*G0_0_0 - 0.0754106934301128*G0_0_1 - 0.201679761499139*G0_1_0 - 0.0876868528257126*G0_1_1;
    A[175] = -0.0472533702461745*G0_0_0 - 0.0687321749035267*G0_0_1 - 0.0171830437258816*G0_1_0 - 0.0472533702461746*G0_1_1;
    A[176] = 1.38888888888889*G0_0_0 + 0.147569444444444*G0_0_1 + 0.147569444444444*G0_1_0 + 0.228174603174603*G0_1_1;
    A[177] = -0.0876868528257128*G0_0_0 - 0.0754106934301133*G0_0_1 + 0.0508583746389134*G0_1_0 - 0.00350747411302855*G0_1_1;
    A[178] = 0.0193309241916171*G0_0_0 + 0.0418836690818366*G0_0_1 + 0.0161091034930142*G0_1_0 + 0.0193309241916169*G0_1_1;
    A[179] = -0.155009920634921*G0_0_0 + 0.848834325396825*G0_0_1 + 0.0899057539682539*G0_1_0 - 0.15500992063492*G0_1_1;
    A[180] = 0.0175373705651425*G0_0_0 - 0.00596270599214845*G0_0_1 + 0.0641867762684218*G0_1_0 - 0.0624330392119074*G0_1_1;
    A[181] = -0.0350747411302851*G0_0_0 + 0.00491046375823989*G0_0_1 - 0.0680449977927531*G0_1_0 + 0.0392837100659193*G0_1_1;
    A[182] = -0.0175373705651426*G0_0_0 + 0.0115746645729941*G0_0_1 + 0.0312165196059537*G0_1_0 - 0.0217463395007767*G0_1_1;
    A[183] = 0.0175373705651426*G0_0_0 + 0.0235000765572911*G0_0_1 - 0.0466494057032792*G0_1_0 - 0.103119738923038*G0_1_1;
    A[184] = -0.0350747411302852*G0_0_0 - 0.0399852048885251*G0_0_1 + 0.032970256662468*G0_1_0 + 0.0673435029701473*G0_1_1;
    A[185] = -0.0175373705651425*G0_0_0 - 0.0291120351381366*G0_0_1 - 0.0487538901710963*G0_1_0 - 0.0820748942448671*G0_1_1;
    A[186] = 0.021044844678171*G0_0_0 + 0.0133284016295083*G0_0_1 - 0.0764629356640215*G0_1_0 - 0.0392837100659193*G0_1_1;
    A[187] = 0.00140298964521137*G0_0_1 + 0.147313912747197*G0_1_0 + 0.0743584511962043*G0_1_1;
    A[188] = -0.021044844678171*G0_0_0 - 0.00771644304866269*G0_0_1 - 0.0975077803421925*G0_1_0 - 0.0448956686467649*G0_1_1;
    A[189] = -0.0496031746031746*G0_0_0 + 0.00496031746031745*G0_0_1 + 1.07638888888889*G0_1_0 - 0.0496031746031745*G0_1_1;
    A[190] = 0.0425258635899855*G0_0_0 + 0.0394883019049867*G0_0_1 + 0.112389782344962*G0_1_0 - 0.103277097289965*G0_1_1;
    A[191] = -0.0876868528257127*G0_0_0 + 0.0508583746389134*G0_0_1 - 0.0754106934301132*G0_1_0 - 0.00350747411302856*G0_1_1;
    A[192] = 0.0992063492063492*G0_0_0 + 0.0496031746031746*G0_0_1 + 0.0496031746031747*G0_1_0 + 1.23015873015873*G0_1_1;
    A[193] = -0.0364507402199877*G0_0_1 - 0.182253701099939*G0_1_0 - 0.109352220659963*G0_1_1;
    A[194] = 0.175373705651425*G0_0_0 + 0.0876868528257128*G0_0_1 + 0.0876868528257128*G0_1_0 + 0.0701494822605702*G0_1_1;
    A[195] = -0.0502604028982041*G0_0_0 + 0.035440027684631*G0_0_1 - 0.0315738428463076*G0_1_0 - 0.0425280332215573*G0_1_1;
    A[196] = 0.0231971090299404*G0_0_0 - 0.00644364139720563*G0_0_1 + 0.0244858373093814*G0_1_0 + 0.0154647393532936*G0_1_1;
    A[197] = -0.0115985545149702*G0_0_0 + 0.0161091034930141*G0_0_1 + 0.000644364139720531*G0_1_0 - 0.0090210979560879*G0_1_1;
    A[198] = 0.050260402898204*G0_0_0 + 0.0857004305828351*G0_0_1 + 0.0186865600518964*G0_1_0 + 0.0966546209580847*G0_1_1;
    A[199] = -0.0231971090299404*G0_0_0 - 0.029640750427146*G0_0_1 + 0.00128872827944108*G0_1_0 - 0.0206196524710582*G0_1_1;
    A[200] = 0.0115985545149702*G0_0_0 + 0.0277076580079843*G0_0_1 + 0.0122429186546907*G0_1_0 + 0.0373731201037927*G0_1_1;
    A[201] = 0.0515491311776451*G0_0_0 + 0.0386618483832338*G0_0_1 + 0.00773236967664695*G0_1_0 - 0.0283520221477048*G0_1_1;
    A[202] = -0.10309826235529*G0_0_0 - 0.0515491311776451*G0_0_1 - 0.0515491311776451*G0_1_0 + 0.0541265877365274*G0_1_1;
    A[203] = 0.0515491311776451*G0_0_0 + 0.0128872827944113*G0_0_1 + 0.0438167615009982*G0_1_0 - 0.0231971090299403*G0_1_1;
    A[204] = -0.0546761103299819*G0_0_0 + 0.0637887953849785*G0_0_1 - 0.0091126850549972*G0_1_0 - 0.0546761103299816*G0_1_1;
    A[205] = -0.100446428571429*G0_0_0 + 0.139508928571428*G0_0_1 + 0.898437499999999*G0_1_0 - 0.100446428571428*G0_1_1;
    A[206] = 0.0193309241916171*G0_0_0 + 0.0161091034930142*G0_0_1 + 0.0418836690818367*G0_1_0 + 0.0193309241916169*G0_1_1;
    A[207] = -0.182253701099939*G0_0_1 - 0.0364507402199877*G0_1_0 - 0.109352220659963*G0_1_1;
    A[208] = 0.200892857142857*G0_0_0 + 0.100446428571429*G0_0_1 + 0.100446428571429*G0_1_0 + 1.33928571428571*G0_1_1;
    A[209] = -0.0128872827944113*G0_0_1 - 0.0644364139720563*G0_1_0 - 0.0386618483832338*G0_1_1;
    A[210] = 0.0310019841269841*G0_0_0 - 0.0105406746031746*G0_0_1 + 0.0479910714285714*G0_1_0 + 0.0265376984126984*G0_1_1;
    A[211] = -0.0620039682539682*G0_0_0 + 0.0086805555555555*G0_0_1 - 0.120287698412698*G0_1_0 + 0.0218253968253966*G0_1_1;
    A[212] = -0.0310019841269842*G0_0_0 + 0.0204613095238095*G0_0_1 + 0.0730406746031745*G0_1_0 - 0.0324900793650792*G0_1_1;
    A[213] = 0.0310019841269842*G0_0_0 + 0.0415426587301588*G0_0_1 - 0.0169890873015873*G0_1_0 + 0.0200892857142858*G0_1_1;
    A[214] = -0.0620039682539683*G0_0_0 - 0.0706845238095238*G0_0_1 + 0.05828373015873*G0_1_0 + 0.0714285714285714*G0_1_1;
    A[215] = -0.0310019841269841*G0_0_0 - 0.0514632936507936*G0_0_1 - 0.104042658730159*G0_1_0 - 0.156994047619048*G0_1_1;
    A[216] = 0.0372023809523808*G0_0_0 + 0.0235615079365079*G0_0_1 + 0.00768849206349203*G0_1_0 - 0.00396825396825391*G0_1_1;
    A[217] = 0.00248015873015866*G0_0_1 - 0.0729166666666667*G0_1_0 - 0.0352182539682539*G0_1_1;
    A[218] = -0.0372023809523809*G0_0_0 - 0.013640873015873*G0_0_1 - 0.0295138888888888*G0_1_0 - 0.00198412698412696*G0_1_1;
    A[219] = -0.0876868528257126*G0_0_0 + 0.00876868528257126*G0_0_1 + 0.135037753351597*G0_1_0 + 0.0806719045996557*G0_1_1;
    A[220] = 0.0751758163007321*G0_0_0 + 0.0698061151363943*G0_0_1 + 0.0440315495475717*G0_1_0 + 0.0751758163007322*G0_1_1;
    A[221] = -0.155009920634921*G0_0_0 + 0.0899057539682539*G0_0_1 + 0.848834325396825*G0_1_0 - 0.15500992063492*G0_1_1;
    A[222] = 0.175373705651425*G0_0_0 + 0.0876868528257128*G0_0_1 + 0.0876868528257128*G0_1_0 + 0.0701494822605702*G0_1_1;
    A[223] = -0.0644364139720562*G0_0_1 - 0.0128872827944113*G0_1_0 - 0.0386618483832338*G0_1_1;
    A[224] = 0.310019841269841*G0_0_0 + 0.155009920634921*G0_0_1 + 0.155009920634921*G0_1_0 + 1.40376984126984*G0_1_1;
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class UFC_Forms_1: public ufc::form
{
public:

  /// Constructor
  UFC_Forms_1() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Forms_1()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "(dXa0[0, 1]/dxb0[0, 1])(dXa1[0, 1]/dxb0[0, 1]) | vi0[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14][a0[0, 1]]*vi1[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14][a1[0, 1]]*dX(0)";
  }

  /// Return the rank of the global tensor (r)
  virtual unsigned int rank() const
  {
    return 2;
  }

  /// Return the number of coefficients (n)
  virtual unsigned int num_coefficients() const
  {
    return 0;
  }

  /// Return the number of cell integrals
  virtual unsigned int num_cell_integrals() const
  {
    return 1;
  }
  
  /// Return the number of exterior facet integrals
  virtual unsigned int num_exterior_facet_integrals() const
  {
    return 0;
  }
  
  /// Return the number of interior facet integrals
  virtual unsigned int num_interior_facet_integrals() const
  {
    return 0;
  }
    
  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new UFC_Forms_1_finite_element_0();
      break;
    case 1:
      return new UFC_Forms_1_finite_element_1();
      break;
    }
    return 0;
  }
  
  /// Create a new dof map for argument function i
  virtual ufc::dof_map* create_dof_map(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new UFC_Forms_1_dof_map_0();
      break;
    case 1:
      return new UFC_Forms_1_dof_map_1();
      break;
    }
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(unsigned int i) const
  {
    return new UFC_Forms_1_cell_integral_0();
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(unsigned int i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(unsigned int i) const
  {
    return 0;
  }

};

// DOLFIN wrappers

#include <dolfin/fem/Form.h>
#include <dolfin/fem/FiniteElement.h>
#include <dolfin/fem/DofMap.h>
#include <dolfin/function/Coefficient.h>
#include <dolfin/function/Function.h>
#include <dolfin/function/FunctionSpace.h>

class Forms_0FunctionSpace0 : public dolfin::FunctionSpace
{
public:

  Forms_0FunctionSpace0(const dolfin::Mesh& mesh)
    : dolfin::FunctionSpace(std::tr1::shared_ptr<const dolfin::Mesh>(&mesh, dolfin::NoDeleter<const dolfin::Mesh>()),
                            std::tr1::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::tr1::shared_ptr<ufc::finite_element>(new UFC_Forms_1_finite_element_1()))),
                            std::tr1::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::tr1::shared_ptr<ufc::dof_map>(new UFC_Forms_1_dof_map_1()), mesh)))
  {
    // Do nothing
  }

};

class Forms_0FunctionSpace1 : public dolfin::FunctionSpace
{
public:

  Forms_0FunctionSpace1(const dolfin::Mesh& mesh)
    : dolfin::FunctionSpace(std::tr1::shared_ptr<const dolfin::Mesh>(&mesh, dolfin::NoDeleter<const dolfin::Mesh>()),
                            std::tr1::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::tr1::shared_ptr<ufc::finite_element>(new UFC_Forms_1_finite_element_1()))),
                            std::tr1::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::tr1::shared_ptr<ufc::dof_map>(new UFC_Forms_1_dof_map_1()), mesh)))
  {
    // Do nothing
  }

};

class Forms_1FunctionSpace0 : public dolfin::FunctionSpace
{
public:

  Forms_1FunctionSpace0(const dolfin::Mesh& mesh)
    : dolfin::FunctionSpace(std::tr1::shared_ptr<const dolfin::Mesh>(&mesh, dolfin::NoDeleter<const dolfin::Mesh>()),
                            std::tr1::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::tr1::shared_ptr<ufc::finite_element>(new UFC_Forms_1_finite_element_1()))),
                            std::tr1::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::tr1::shared_ptr<ufc::dof_map>(new UFC_Forms_1_dof_map_1()), mesh)))
  {
    // Do nothing
  }

};

class Forms_1FunctionSpace1 : public dolfin::FunctionSpace
{
public:

  Forms_1FunctionSpace1(const dolfin::Mesh& mesh)
    : dolfin::FunctionSpace(std::tr1::shared_ptr<const dolfin::Mesh>(&mesh, dolfin::NoDeleter<const dolfin::Mesh>()),
                            std::tr1::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::tr1::shared_ptr<ufc::finite_element>(new UFC_Forms_1_finite_element_1()))),
                            std::tr1::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::tr1::shared_ptr<ufc::dof_map>(new UFC_Forms_1_dof_map_1()), mesh)))
  {
    // Do nothing
  }

};

class FormsTestSpace : public dolfin::FunctionSpace
{
public:

  FormsTestSpace(const dolfin::Mesh& mesh)
    : dolfin::FunctionSpace(std::tr1::shared_ptr<const dolfin::Mesh>(&mesh, dolfin::NoDeleter<const dolfin::Mesh>()),
                            std::tr1::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::tr1::shared_ptr<ufc::finite_element>(new UFC_Forms_1_finite_element_1()))),
                            std::tr1::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::tr1::shared_ptr<ufc::dof_map>(new UFC_Forms_1_dof_map_1()), mesh)))
  {
    // Do nothing
  }

};

class FormsTrialSpace : public dolfin::FunctionSpace
{
public:

  FormsTrialSpace(const dolfin::Mesh& mesh)
    : dolfin::FunctionSpace(std::tr1::shared_ptr<const dolfin::Mesh>(&mesh, dolfin::NoDeleter<const dolfin::Mesh>()),
                            std::tr1::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::tr1::shared_ptr<ufc::finite_element>(new UFC_Forms_1_finite_element_1()))),
                            std::tr1::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::tr1::shared_ptr<ufc::dof_map>(new UFC_Forms_1_dof_map_1()), mesh)))
  {
    // Do nothing
  }

};

class FormsFunctionSpace : public dolfin::FunctionSpace
{
public:

  FormsFunctionSpace(const dolfin::Mesh& mesh)
    : dolfin::FunctionSpace(std::tr1::shared_ptr<const dolfin::Mesh>(&mesh, dolfin::NoDeleter<const dolfin::Mesh>()),
                            std::tr1::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::tr1::shared_ptr<ufc::finite_element>(new UFC_Forms_1_finite_element_1()))),
                            std::tr1::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::tr1::shared_ptr<ufc::dof_map>(new UFC_Forms_1_dof_map_1()), mesh)))
  {
    // Do nothing
  }

};

class Forms_0 : public dolfin::Form
{
public:

  // Create form on given function space(s)
  Forms_0(const dolfin::FunctionSpace& V0, const dolfin::FunctionSpace& V1) : dolfin::Form()
  {
    std::tr1::shared_ptr<const dolfin::FunctionSpace> _V0(&V0, dolfin::NoDeleter<const dolfin::FunctionSpace>());
    _function_spaces.push_back(_V0);
    std::tr1::shared_ptr<const dolfin::FunctionSpace> _V1(&V1, dolfin::NoDeleter<const dolfin::FunctionSpace>());
    _function_spaces.push_back(_V1);

    _ufc_form = new UFC_Forms_0();
  }

  // Create form on given function space(s) (shared data)
  Forms_0(std::tr1::shared_ptr<const dolfin::FunctionSpace> V0, std::tr1::shared_ptr<const dolfin::FunctionSpace> V1) : dolfin::Form()
  {
    _function_spaces.push_back(V0);
    _function_spaces.push_back(V1);

    _ufc_form = new UFC_Forms_0();
  }

  // Destructor
  ~Forms_0() {}

};

class Forms_1 : public dolfin::Form
{
public:

  // Create form on given function space(s)
  Forms_1(const dolfin::FunctionSpace& V0, const dolfin::FunctionSpace& V1) : dolfin::Form()
  {
    std::tr1::shared_ptr<const dolfin::FunctionSpace> _V0(&V0, dolfin::NoDeleter<const dolfin::FunctionSpace>());
    _function_spaces.push_back(_V0);
    std::tr1::shared_ptr<const dolfin::FunctionSpace> _V1(&V1, dolfin::NoDeleter<const dolfin::FunctionSpace>());
    _function_spaces.push_back(_V1);

    _ufc_form = new UFC_Forms_1();
  }

  // Create form on given function space(s) (shared data)
  Forms_1(std::tr1::shared_ptr<const dolfin::FunctionSpace> V0, std::tr1::shared_ptr<const dolfin::FunctionSpace> V1) : dolfin::Form()
  {
    _function_spaces.push_back(V0);
    _function_spaces.push_back(V1);

    _ufc_form = new UFC_Forms_1();
  }

  // Destructor
  ~Forms_1() {}

};

#endif
