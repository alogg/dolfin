// This code conforms with the UFC specification version 1.0
// and was automatically generated by FFC version 0.6.2.
//
// Warning: This code was generated with the option '-l dolfin'
// and contains DOLFIN-specific wrappers that depend on DOLFIN.

#ifndef __POISSON2D_5_H
#define __POISSON2D_5_H

#include <cmath>
#include <stdexcept>
#include <fstream>
#include <ufc.h>
    
/// This class defines the interface for a finite element.

class poisson2d_5_0_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  poisson2d_5_0_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~poisson2d_5_0_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', 'triangle', 5)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 21;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
      
    // Compute determinant of Jacobian
    const double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Get coordinates and map to the reference (UFC) element
    double x = (element_coordinates[0][1]*element_coordinates[2][0] -\
                element_coordinates[0][0]*element_coordinates[2][1] +\
                J_11*coordinates[0] - J_01*coordinates[1]) / detJ;
    double y = (element_coordinates[1][1]*element_coordinates[0][0] -\
                element_coordinates[1][0]*element_coordinates[0][1] -\
                J_10*coordinates[0] + J_00*coordinates[1]) / detJ;
    
    // Map coordinates to the reference square
    if (std::abs(y - 1.0) < 1e-14)
      x = -1.0;
    else
      x = 2.0 *x/(1.0 - y) - 1.0;
    y = 2.0*y - 1.0;
    
    // Reset values
    *values = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    const double scalings_y_4 = scalings_y_3*(0.5 - 0.5*y);
    const double scalings_y_5 = scalings_y_4*(0.5 - 0.5*y);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    const double psitilde_a_4 = 1.75*x*psitilde_a_3 - 0.75*psitilde_a_2;
    const double psitilde_a_5 = 1.8*x*psitilde_a_4 - 0.8*psitilde_a_3;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_0_4 = 0.0285714285714286*psitilde_bs_0_3 + 1.8*y*psitilde_bs_0_3 - 0.771428571428571*psitilde_bs_0_2;
    const double psitilde_bs_0_5 = 0.0185185185185185*psitilde_bs_0_4 + 1.83333333333333*y*psitilde_bs_0_4 - 0.814814814814815*psitilde_bs_0_3;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_1_3 = 0.285714285714286*psitilde_bs_1_2 + 2*y*psitilde_bs_1_2 - 0.714285714285714*psitilde_bs_1_1;
    const double psitilde_bs_1_4 = 0.178571428571429*psitilde_bs_1_3 + 1.96428571428571*y*psitilde_bs_1_3 - 0.785714285714286*psitilde_bs_1_2;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_2_2 = 1.02040816326531*psitilde_bs_2_1 + 2.57142857142857*y*psitilde_bs_2_1 - 0.551020408163265*psitilde_bs_2_0;
    const double psitilde_bs_2_3 = 0.578703703703704*psitilde_bs_2_2 + 2.29166666666667*y*psitilde_bs_2_2 - 0.712962962962963*psitilde_bs_2_1;
    const double psitilde_bs_3_0 = 1;
    const double psitilde_bs_3_1 = 4.5*y + 3.5;
    const double psitilde_bs_3_2 = 1.51234567901235*psitilde_bs_3_1 + 3.05555555555556*y*psitilde_bs_3_1 - 0.54320987654321*psitilde_bs_3_0;
    const double psitilde_bs_4_0 = 1;
    const double psitilde_bs_4_1 = 5.5*y + 4.5;
    const double psitilde_bs_5_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.707106781186548*psitilde_a_0*scalings_y_0*psitilde_bs_0_0;
    const double basisvalue1 = 1.73205080756888*psitilde_a_1*scalings_y_1*psitilde_bs_1_0;
    const double basisvalue2 = psitilde_a_0*scalings_y_0*psitilde_bs_0_1;
    const double basisvalue3 = 2.73861278752583*psitilde_a_2*scalings_y_2*psitilde_bs_2_0;
    const double basisvalue4 = 2.12132034355964*psitilde_a_1*scalings_y_1*psitilde_bs_1_1;
    const double basisvalue5 = 1.22474487139159*psitilde_a_0*scalings_y_0*psitilde_bs_0_2;
    const double basisvalue6 = 3.74165738677394*psitilde_a_3*scalings_y_3*psitilde_bs_3_0;
    const double basisvalue7 = 3.16227766016838*psitilde_a_2*scalings_y_2*psitilde_bs_2_1;
    const double basisvalue8 = 2.44948974278318*psitilde_a_1*scalings_y_1*psitilde_bs_1_2;
    const double basisvalue9 = 1.4142135623731*psitilde_a_0*scalings_y_0*psitilde_bs_0_3;
    const double basisvalue10 = 4.74341649025257*psitilde_a_4*scalings_y_4*psitilde_bs_4_0;
    const double basisvalue11 = 4.18330013267038*psitilde_a_3*scalings_y_3*psitilde_bs_3_1;
    const double basisvalue12 = 3.53553390593274*psitilde_a_2*scalings_y_2*psitilde_bs_2_2;
    const double basisvalue13 = 2.73861278752583*psitilde_a_1*scalings_y_1*psitilde_bs_1_3;
    const double basisvalue14 = 1.58113883008419*psitilde_a_0*scalings_y_0*psitilde_bs_0_4;
    const double basisvalue15 = 5.74456264653803*psitilde_a_5*scalings_y_5*psitilde_bs_5_0;
    const double basisvalue16 = 5.19615242270663*psitilde_a_4*scalings_y_4*psitilde_bs_4_1;
    const double basisvalue17 = 4.58257569495584*psitilde_a_3*scalings_y_3*psitilde_bs_3_2;
    const double basisvalue18 = 3.87298334620742*psitilde_a_2*scalings_y_2*psitilde_bs_2_3;
    const double basisvalue19 = 3*psitilde_a_1*scalings_y_1*psitilde_bs_1_4;
    const double basisvalue20 = 1.73205080756888*psitilde_a_0*scalings_y_0*psitilde_bs_0_5;
    
    // Table(s) of coefficients
    const static double coefficients0[21][21] = \
    {{0.0154328860973255, -0.00945067404923496, -0.00545634920634919, 0.0301875307266957, 0.0233831607535234, 0.013500274155551, -0.0231997605826757, -0.0196073763651313, -0.0151878084249949, -0.00876868528257126, 0.0213898651255978, 0.0188640878998484, 0.0159430641501296, 0.0123494443881937, 0.00712995504186595, -0.0179891757560038, -0.0162718217101153, -0.0143503978743156, -0.0121282998205249, -0.00939454064454065, -0.00542394057003844},
    {0.0154328860973254, 0.00945067404923495, -0.0054563492063492, 0.0301875307266957, -0.0233831607535234, 0.013500274155551, 0.0231997605826757, -0.0196073763651313, 0.0151878084249949, -0.00876868528257127, 0.0213898651255978, -0.0188640878998484, 0.0159430641501296, -0.0123494443881937, 0.00712995504186593, 0.0179891757560038, -0.0162718217101153, 0.0143503978743156, -0.0121282998205249, 0.00939454064454064, -0.00542394057003842},
    {0.0154328860973254, 0, 0.0109126984126984, 0, 0, 0.0405008224666531, 0, 0, 0, 0.0350747411302851, 0, 0, 0, 0, 0.0356497752093297, 0, 0, 0, 0, 0, 0.0325436434202305},
    {0.0350747411302851, 0.126008987323133, -0.0843253968253968, 0.101882916202598, -0.0286443719230661, 0.00202504112333268, 0.0773325352755857, -0.0261431684868418, 0, 0.00584579018838089, 0.0356497752093296, 0.0125760585998989, -0.0385290716961465, 0.0442521757243607, -0.0297081460077747, 0, 0.0325436434202305, -0.0516614323475361, 0.0582158391385193, -0.0526094276094276, 0.0325436434202305},
    {0.0350747411302851, -0.0329341671412733, 0.121527777777778, -0.0113203240225109, 0.0754106934301129, -0.0222754523566592, 0, 0.104572673947367, -0.101252056166633, 0.0584579018838084, 0, 0.0565922636995452, -0.00930012075424224, -0.0401356942616295, 0.0415914044108846, 0, 0, 0.0516614323475361, -0.101877718492409, 0.118371212121212, -0.0813591085505763},
    {0.0350747411302851, 0.0887790592503889, -0.0892857142857142, 0.0301875307266957, 0.0432588473940183, -0.0594012062844245, 0, 0.0261431684868417, 0.101252056166633, -0.116915803767617, 0, 0, 0.0744009660339381, -0.0308736109704842, -0.0118832584031099, 0, 0, 0, 0.0679184789949393, -0.131523569023569, 0.108478811400768},
    {0.035074741130285, -0.010023442173431, 0.151289682539682, 0, 0.0502737956200753, 0.0931518916733021, 0, 0, 0.0506260280833164, 0.0643036920721893, 0, 0, 0, 0.0720384255977965, -0.0237665168062198, 0, 0, 0, 0, 0.0657617845117845, -0.0813591085505763},
    {0.0350747411302849, -0.126008987323133, -0.0843253968253968, 0.101882916202598, 0.0286443719230662, 0.00202504112333268, -0.0773325352755857, -0.0261431684868418, 0, 0.00584579018838086, 0.0356497752093297, -0.0125760585998989, -0.0385290716961465, -0.0442521757243607, -0.0297081460077747, 0, 0.0325436434202305, 0.0516614323475361, 0.0582158391385193, 0.0526094276094276, 0.0325436434202305},
    {0.0350747411302851, 0.0329341671412733, 0.121527777777778, -0.0113203240225109, -0.075410693430113, -0.0222754523566592, 0, 0.104572673947367, 0.101252056166633, 0.0584579018838084, 0, -0.0565922636995451, -0.00930012075424224, 0.0401356942616295, 0.0415914044108846, 0, 0, -0.0516614323475361, -0.101877718492409, -0.118371212121212, -0.0813591085505763},
    {0.0350747411302851, -0.0887790592503889, -0.0892857142857142, 0.0301875307266957, -0.0432588473940183, -0.0594012062844245, 0, 0.0261431684868417, -0.101252056166633, -0.116915803767617, 0, 0, 0.0744009660339381, 0.0308736109704842, -0.0118832584031099, 0, 0, 0, 0.0679184789949393, 0.131523569023569, 0.108478811400768},
    {0.0350747411302851, 0.010023442173431, 0.151289682539682, 0, -0.0502737956200753, 0.0931518916733021, 0, 0, -0.0506260280833164, 0.0643036920721892, 0, 0, 0, -0.0720384255977965, -0.0237665168062198, 0, 0, 0, 0, -0.0657617845117845, -0.0813591085505762},
    {0.035074741130285, -0.136032429496564, -0.0669642857142857, 0.0369797251402022, 0.0789181675431415, 0.0600762199922021, -0.00773325352755854, -0.0457505448519731, -0.055688630891648, -0.0379976362244755, -0.0641695953767934, -0.012576058599899, 0.017271652829307, 0.0277862498734357, 0.0202015392852868, 0.0899458787800191, 0.0488154651303458, 0.0200905570240418, 0.00242565996410498, -0.00563672438672438, -0.00542394057003844},
    {0.0350747411302852, 0.121713226391662, -0.0322420634920635, -0.0671672558668978, -0.0321518460360948, 0.0276755620188796, 0.139198563496054, 0.0653579212171044, -0.0101252056166633, -0.0292289509419042, 0.0427797302511956, -0.0565922636995451, -0.0332147169794367, 0.00926208329114533, 0.0202015392852867, -0.179891757560038, -0.0325436434202306, 0.0114803182994525, 0.00970263985641986, -0.00187890812890816, -0.00542394057003839},
    {0.035074741130285, -0.121713226391662, -0.0322420634920635, -0.0671672558668978, 0.0321518460360947, 0.0276755620188796, -0.139198563496054, 0.0653579212171043, 0.0101252056166633, -0.0292289509419043, 0.0427797302511956, 0.0565922636995452, -0.0332147169794366, -0.00926208329114533, 0.0202015392852869, 0.179891757560038, -0.0325436434202305, -0.0114803182994525, 0.00970263985641991, 0.00187890812890817, -0.00542394057003844},
    {0.0350747411302851, 0.136032429496564, -0.0669642857142857, 0.0369797251402022, -0.0789181675431415, 0.0600762199922021, 0.00773325352755854, -0.045750544851973, 0.055688630891648, -0.0379976362244755, -0.0641695953767934, 0.0125760585998989, 0.017271652829307, -0.0277862498734358, 0.0202015392852868, -0.0899458787800191, 0.0488154651303457, -0.0200905570240418, 0.00242565996410496, 0.00563672438672439, -0.00542394057003841},
    {0.280597929042281, -0.214788046573521, -0.124007936507937, 0.0905625921800869, 0.116915803767617, 0, 0.154665070551171, 0.0784295054605253, 0.101252056166633, 0.0818410626373319, -0.142599100837319, 0.0251521171997979, -0.0318861283002592, -0.107028518031012, -0.0950660672248791, 0, -0.130174573680922, -0.103322864695072, -0.0291079195692597, 0.0263047138047138, 0.0325436434202305},
    {0.0350747411302848, 0, -0.124007936507937, -0.38489101676537, 0, 0.101252056166633, 0, -0.104572673947367, 0, 0.0467663215070468, 0.213898651255978, 0, 0.140830399992811, 0, -0.095066067224879, 0, 0.195261860521383, 0, -0.0582158391385193, 0, 0.0325436434202305},
    {0.280597929042281, 0.214788046573522, -0.124007936507937, 0.090562592180087, -0.116915803767617, 0, -0.154665070551172, 0.0784295054605253, -0.101252056166633, 0.0818410626373319, -0.142599100837319, -0.0251521171997978, -0.0318861283002592, 0.107028518031012, -0.0950660672248792, 0, -0.130174573680922, 0.103322864695072, -0.0291079195692597, -0.0263047138047138, 0.0325436434202306},
    {0.035074741130285, -0.107394023286761, 0.0620039682539683, 0.0113203240225109, -0.306903984889995, -0.253130140416582, 0, -0.104572673947367, 0, 0.0467663215070468, 0, 0.169776791098635, 0.00930012075424229, 0.126581804978985, 0.172307246845094, 0, 0, 0.154984297042608, 0.101877718492409, -0.0394570707070708, -0.0813591085505764},
    {0.035074741130285, 0.107394023286761, 0.0620039682539682, 0.011320324022511, 0.306903984889994, -0.253130140416582, 0, -0.104572673947367, 0, 0.0467663215070468, 0, -0.169776791098635, 0.00930012075424223, -0.126581804978985, 0.172307246845093, 0, 0, -0.154984297042608, 0.101877718492409, 0.0394570707070707, -0.0813591085505763},
    {0.280597929042281, 0, 0.248015873015873, -0.0603750614533914, 0, 0.13500274155551, 0, -0.0522863369736836, 0, -0.210448446781711, 0, 0, -0.148801932067876, 0, -0.142599100837319, 0, 0, 0, -0.135836957989879, 0, 0.108478811400768}};
    
    // Extract relevant coefficients
    const double coeff0_0 = coefficients0[dof][0];
    const double coeff0_1 = coefficients0[dof][1];
    const double coeff0_2 = coefficients0[dof][2];
    const double coeff0_3 = coefficients0[dof][3];
    const double coeff0_4 = coefficients0[dof][4];
    const double coeff0_5 = coefficients0[dof][5];
    const double coeff0_6 = coefficients0[dof][6];
    const double coeff0_7 = coefficients0[dof][7];
    const double coeff0_8 = coefficients0[dof][8];
    const double coeff0_9 = coefficients0[dof][9];
    const double coeff0_10 = coefficients0[dof][10];
    const double coeff0_11 = coefficients0[dof][11];
    const double coeff0_12 = coefficients0[dof][12];
    const double coeff0_13 = coefficients0[dof][13];
    const double coeff0_14 = coefficients0[dof][14];
    const double coeff0_15 = coefficients0[dof][15];
    const double coeff0_16 = coefficients0[dof][16];
    const double coeff0_17 = coefficients0[dof][17];
    const double coeff0_18 = coefficients0[dof][18];
    const double coeff0_19 = coefficients0[dof][19];
    const double coeff0_20 = coefficients0[dof][20];
    
    // Compute value(s)
    *values = coeff0_0*basisvalue0 + coeff0_1*basisvalue1 + coeff0_2*basisvalue2 + coeff0_3*basisvalue3 + coeff0_4*basisvalue4 + coeff0_5*basisvalue5 + coeff0_6*basisvalue6 + coeff0_7*basisvalue7 + coeff0_8*basisvalue8 + coeff0_9*basisvalue9 + coeff0_10*basisvalue10 + coeff0_11*basisvalue11 + coeff0_12*basisvalue12 + coeff0_13*basisvalue13 + coeff0_14*basisvalue14 + coeff0_15*basisvalue15 + coeff0_16*basisvalue16 + coeff0_17*basisvalue17 + coeff0_18*basisvalue18 + coeff0_19*basisvalue19 + coeff0_20*basisvalue20;
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis() is not yet implemented.");
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
      
    // Compute determinant of Jacobian
    const double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Get coordinates and map to the reference (UFC) element
    double x = (element_coordinates[0][1]*element_coordinates[2][0] -\
                element_coordinates[0][0]*element_coordinates[2][1] +\
                J_11*coordinates[0] - J_01*coordinates[1]) / detJ;
    double y = (element_coordinates[1][1]*element_coordinates[0][0] -\
                element_coordinates[1][0]*element_coordinates[0][1] -\
                J_10*coordinates[0] + J_00*coordinates[1]) / detJ;
    
    // Map coordinates to the reference square
    if (std::abs(y - 1.0) < 1e-14)
      x = -1.0;
    else
      x = 2.0 *x/(1.0 - y) - 1.0;
    y = 2.0*y - 1.0;
    
    // Compute number of derivatives
    unsigned int num_derivatives = 1;
    
    for (unsigned int j = 0; j < n; j++)
      num_derivatives *= 2;
    
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      combinations[j] = new unsigned int [n];
      for (unsigned int k = 0; k < n; k++)
        combinations[j][k] = 0;
    }
        
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] =  {{J_11 / detJ, -J_01 / detJ}, {-J_10 / detJ, J_00 / detJ}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values
    for (unsigned int j = 0; j < 1*num_derivatives; j++)
      values[j] = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    const double scalings_y_4 = scalings_y_3*(0.5 - 0.5*y);
    const double scalings_y_5 = scalings_y_4*(0.5 - 0.5*y);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    const double psitilde_a_4 = 1.75*x*psitilde_a_3 - 0.75*psitilde_a_2;
    const double psitilde_a_5 = 1.8*x*psitilde_a_4 - 0.8*psitilde_a_3;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_0_4 = 0.0285714285714286*psitilde_bs_0_3 + 1.8*y*psitilde_bs_0_3 - 0.771428571428571*psitilde_bs_0_2;
    const double psitilde_bs_0_5 = 0.0185185185185185*psitilde_bs_0_4 + 1.83333333333333*y*psitilde_bs_0_4 - 0.814814814814815*psitilde_bs_0_3;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_1_3 = 0.285714285714286*psitilde_bs_1_2 + 2*y*psitilde_bs_1_2 - 0.714285714285714*psitilde_bs_1_1;
    const double psitilde_bs_1_4 = 0.178571428571429*psitilde_bs_1_3 + 1.96428571428571*y*psitilde_bs_1_3 - 0.785714285714286*psitilde_bs_1_2;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_2_2 = 1.02040816326531*psitilde_bs_2_1 + 2.57142857142857*y*psitilde_bs_2_1 - 0.551020408163265*psitilde_bs_2_0;
    const double psitilde_bs_2_3 = 0.578703703703704*psitilde_bs_2_2 + 2.29166666666667*y*psitilde_bs_2_2 - 0.712962962962963*psitilde_bs_2_1;
    const double psitilde_bs_3_0 = 1;
    const double psitilde_bs_3_1 = 4.5*y + 3.5;
    const double psitilde_bs_3_2 = 1.51234567901235*psitilde_bs_3_1 + 3.05555555555556*y*psitilde_bs_3_1 - 0.54320987654321*psitilde_bs_3_0;
    const double psitilde_bs_4_0 = 1;
    const double psitilde_bs_4_1 = 5.5*y + 4.5;
    const double psitilde_bs_5_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.707106781186548*psitilde_a_0*scalings_y_0*psitilde_bs_0_0;
    const double basisvalue1 = 1.73205080756888*psitilde_a_1*scalings_y_1*psitilde_bs_1_0;
    const double basisvalue2 = psitilde_a_0*scalings_y_0*psitilde_bs_0_1;
    const double basisvalue3 = 2.73861278752583*psitilde_a_2*scalings_y_2*psitilde_bs_2_0;
    const double basisvalue4 = 2.12132034355964*psitilde_a_1*scalings_y_1*psitilde_bs_1_1;
    const double basisvalue5 = 1.22474487139159*psitilde_a_0*scalings_y_0*psitilde_bs_0_2;
    const double basisvalue6 = 3.74165738677394*psitilde_a_3*scalings_y_3*psitilde_bs_3_0;
    const double basisvalue7 = 3.16227766016838*psitilde_a_2*scalings_y_2*psitilde_bs_2_1;
    const double basisvalue8 = 2.44948974278318*psitilde_a_1*scalings_y_1*psitilde_bs_1_2;
    const double basisvalue9 = 1.4142135623731*psitilde_a_0*scalings_y_0*psitilde_bs_0_3;
    const double basisvalue10 = 4.74341649025257*psitilde_a_4*scalings_y_4*psitilde_bs_4_0;
    const double basisvalue11 = 4.18330013267038*psitilde_a_3*scalings_y_3*psitilde_bs_3_1;
    const double basisvalue12 = 3.53553390593274*psitilde_a_2*scalings_y_2*psitilde_bs_2_2;
    const double basisvalue13 = 2.73861278752583*psitilde_a_1*scalings_y_1*psitilde_bs_1_3;
    const double basisvalue14 = 1.58113883008419*psitilde_a_0*scalings_y_0*psitilde_bs_0_4;
    const double basisvalue15 = 5.74456264653803*psitilde_a_5*scalings_y_5*psitilde_bs_5_0;
    const double basisvalue16 = 5.19615242270663*psitilde_a_4*scalings_y_4*psitilde_bs_4_1;
    const double basisvalue17 = 4.58257569495584*psitilde_a_3*scalings_y_3*psitilde_bs_3_2;
    const double basisvalue18 = 3.87298334620742*psitilde_a_2*scalings_y_2*psitilde_bs_2_3;
    const double basisvalue19 = 3*psitilde_a_1*scalings_y_1*psitilde_bs_1_4;
    const double basisvalue20 = 1.73205080756888*psitilde_a_0*scalings_y_0*psitilde_bs_0_5;
    
    // Table(s) of coefficients
    const static double coefficients0[21][21] = \
    {{0.0154328860973255, -0.00945067404923496, -0.00545634920634919, 0.0301875307266957, 0.0233831607535234, 0.013500274155551, -0.0231997605826757, -0.0196073763651313, -0.0151878084249949, -0.00876868528257126, 0.0213898651255978, 0.0188640878998484, 0.0159430641501296, 0.0123494443881937, 0.00712995504186595, -0.0179891757560038, -0.0162718217101153, -0.0143503978743156, -0.0121282998205249, -0.00939454064454065, -0.00542394057003844},
    {0.0154328860973254, 0.00945067404923495, -0.0054563492063492, 0.0301875307266957, -0.0233831607535234, 0.013500274155551, 0.0231997605826757, -0.0196073763651313, 0.0151878084249949, -0.00876868528257127, 0.0213898651255978, -0.0188640878998484, 0.0159430641501296, -0.0123494443881937, 0.00712995504186593, 0.0179891757560038, -0.0162718217101153, 0.0143503978743156, -0.0121282998205249, 0.00939454064454064, -0.00542394057003842},
    {0.0154328860973254, 0, 0.0109126984126984, 0, 0, 0.0405008224666531, 0, 0, 0, 0.0350747411302851, 0, 0, 0, 0, 0.0356497752093297, 0, 0, 0, 0, 0, 0.0325436434202305},
    {0.0350747411302851, 0.126008987323133, -0.0843253968253968, 0.101882916202598, -0.0286443719230661, 0.00202504112333268, 0.0773325352755857, -0.0261431684868418, 0, 0.00584579018838089, 0.0356497752093296, 0.0125760585998989, -0.0385290716961465, 0.0442521757243607, -0.0297081460077747, 0, 0.0325436434202305, -0.0516614323475361, 0.0582158391385193, -0.0526094276094276, 0.0325436434202305},
    {0.0350747411302851, -0.0329341671412733, 0.121527777777778, -0.0113203240225109, 0.0754106934301129, -0.0222754523566592, 0, 0.104572673947367, -0.101252056166633, 0.0584579018838084, 0, 0.0565922636995452, -0.00930012075424224, -0.0401356942616295, 0.0415914044108846, 0, 0, 0.0516614323475361, -0.101877718492409, 0.118371212121212, -0.0813591085505763},
    {0.0350747411302851, 0.0887790592503889, -0.0892857142857142, 0.0301875307266957, 0.0432588473940183, -0.0594012062844245, 0, 0.0261431684868417, 0.101252056166633, -0.116915803767617, 0, 0, 0.0744009660339381, -0.0308736109704842, -0.0118832584031099, 0, 0, 0, 0.0679184789949393, -0.131523569023569, 0.108478811400768},
    {0.035074741130285, -0.010023442173431, 0.151289682539682, 0, 0.0502737956200753, 0.0931518916733021, 0, 0, 0.0506260280833164, 0.0643036920721893, 0, 0, 0, 0.0720384255977965, -0.0237665168062198, 0, 0, 0, 0, 0.0657617845117845, -0.0813591085505763},
    {0.0350747411302849, -0.126008987323133, -0.0843253968253968, 0.101882916202598, 0.0286443719230662, 0.00202504112333268, -0.0773325352755857, -0.0261431684868418, 0, 0.00584579018838086, 0.0356497752093297, -0.0125760585998989, -0.0385290716961465, -0.0442521757243607, -0.0297081460077747, 0, 0.0325436434202305, 0.0516614323475361, 0.0582158391385193, 0.0526094276094276, 0.0325436434202305},
    {0.0350747411302851, 0.0329341671412733, 0.121527777777778, -0.0113203240225109, -0.075410693430113, -0.0222754523566592, 0, 0.104572673947367, 0.101252056166633, 0.0584579018838084, 0, -0.0565922636995451, -0.00930012075424224, 0.0401356942616295, 0.0415914044108846, 0, 0, -0.0516614323475361, -0.101877718492409, -0.118371212121212, -0.0813591085505763},
    {0.0350747411302851, -0.0887790592503889, -0.0892857142857142, 0.0301875307266957, -0.0432588473940183, -0.0594012062844245, 0, 0.0261431684868417, -0.101252056166633, -0.116915803767617, 0, 0, 0.0744009660339381, 0.0308736109704842, -0.0118832584031099, 0, 0, 0, 0.0679184789949393, 0.131523569023569, 0.108478811400768},
    {0.0350747411302851, 0.010023442173431, 0.151289682539682, 0, -0.0502737956200753, 0.0931518916733021, 0, 0, -0.0506260280833164, 0.0643036920721892, 0, 0, 0, -0.0720384255977965, -0.0237665168062198, 0, 0, 0, 0, -0.0657617845117845, -0.0813591085505762},
    {0.035074741130285, -0.136032429496564, -0.0669642857142857, 0.0369797251402022, 0.0789181675431415, 0.0600762199922021, -0.00773325352755854, -0.0457505448519731, -0.055688630891648, -0.0379976362244755, -0.0641695953767934, -0.012576058599899, 0.017271652829307, 0.0277862498734357, 0.0202015392852868, 0.0899458787800191, 0.0488154651303458, 0.0200905570240418, 0.00242565996410498, -0.00563672438672438, -0.00542394057003844},
    {0.0350747411302852, 0.121713226391662, -0.0322420634920635, -0.0671672558668978, -0.0321518460360948, 0.0276755620188796, 0.139198563496054, 0.0653579212171044, -0.0101252056166633, -0.0292289509419042, 0.0427797302511956, -0.0565922636995451, -0.0332147169794367, 0.00926208329114533, 0.0202015392852867, -0.179891757560038, -0.0325436434202306, 0.0114803182994525, 0.00970263985641986, -0.00187890812890816, -0.00542394057003839},
    {0.035074741130285, -0.121713226391662, -0.0322420634920635, -0.0671672558668978, 0.0321518460360947, 0.0276755620188796, -0.139198563496054, 0.0653579212171043, 0.0101252056166633, -0.0292289509419043, 0.0427797302511956, 0.0565922636995452, -0.0332147169794366, -0.00926208329114533, 0.0202015392852869, 0.179891757560038, -0.0325436434202305, -0.0114803182994525, 0.00970263985641991, 0.00187890812890817, -0.00542394057003844},
    {0.0350747411302851, 0.136032429496564, -0.0669642857142857, 0.0369797251402022, -0.0789181675431415, 0.0600762199922021, 0.00773325352755854, -0.045750544851973, 0.055688630891648, -0.0379976362244755, -0.0641695953767934, 0.0125760585998989, 0.017271652829307, -0.0277862498734358, 0.0202015392852868, -0.0899458787800191, 0.0488154651303457, -0.0200905570240418, 0.00242565996410496, 0.00563672438672439, -0.00542394057003841},
    {0.280597929042281, -0.214788046573521, -0.124007936507937, 0.0905625921800869, 0.116915803767617, 0, 0.154665070551171, 0.0784295054605253, 0.101252056166633, 0.0818410626373319, -0.142599100837319, 0.0251521171997979, -0.0318861283002592, -0.107028518031012, -0.0950660672248791, 0, -0.130174573680922, -0.103322864695072, -0.0291079195692597, 0.0263047138047138, 0.0325436434202305},
    {0.0350747411302848, 0, -0.124007936507937, -0.38489101676537, 0, 0.101252056166633, 0, -0.104572673947367, 0, 0.0467663215070468, 0.213898651255978, 0, 0.140830399992811, 0, -0.095066067224879, 0, 0.195261860521383, 0, -0.0582158391385193, 0, 0.0325436434202305},
    {0.280597929042281, 0.214788046573522, -0.124007936507937, 0.090562592180087, -0.116915803767617, 0, -0.154665070551172, 0.0784295054605253, -0.101252056166633, 0.0818410626373319, -0.142599100837319, -0.0251521171997978, -0.0318861283002592, 0.107028518031012, -0.0950660672248792, 0, -0.130174573680922, 0.103322864695072, -0.0291079195692597, -0.0263047138047138, 0.0325436434202306},
    {0.035074741130285, -0.107394023286761, 0.0620039682539683, 0.0113203240225109, -0.306903984889995, -0.253130140416582, 0, -0.104572673947367, 0, 0.0467663215070468, 0, 0.169776791098635, 0.00930012075424229, 0.126581804978985, 0.172307246845094, 0, 0, 0.154984297042608, 0.101877718492409, -0.0394570707070708, -0.0813591085505764},
    {0.035074741130285, 0.107394023286761, 0.0620039682539682, 0.011320324022511, 0.306903984889994, -0.253130140416582, 0, -0.104572673947367, 0, 0.0467663215070468, 0, -0.169776791098635, 0.00930012075424223, -0.126581804978985, 0.172307246845093, 0, 0, -0.154984297042608, 0.101877718492409, 0.0394570707070707, -0.0813591085505763},
    {0.280597929042281, 0, 0.248015873015873, -0.0603750614533914, 0, 0.13500274155551, 0, -0.0522863369736836, 0, -0.210448446781711, 0, 0, -0.148801932067876, 0, -0.142599100837319, 0, 0, 0, -0.135836957989879, 0, 0.108478811400768}};
    
    // Interesting (new) part
    // Tables of derivatives of the polynomial base (transpose)
    const static double dmats0[21][21] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.89897948556636, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 9.48683298050514, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.00000000000001, 0, 7.07106781186549, 0, 0, 0, 0, 0, 0, 1.16417292472804e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.29150262212918, 0, -2.99332590941915, 13.6626010212795, 0, 0.61101009266078, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 4.38178046004133, 0, 0, 12.5219806739988, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.46410161513776, 0, 7.83836717690617, 0, 0, 8.4, 0, 1.10537384317744e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 10.9544511501033, 0, 0, -3.83325938999965, 0, 17.7482393492989, 0, 0.553283335172474, 0, 0, 0, 0, 0, 0, 1.27307810205487e-14, 0, 0, 0, 0, 0},
    {4.7328638264797, 0, 3.34664010613632, 4.36435780471985, 0, -5.07468037933237, 0, 17.0084012854152, 0, 1.52127765851135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-2.33146835171283e-14, 2.44948974278318, 0, 0, 9.14285714285714, 0, 0, 0, 14.8461497791618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.09838667696593, 0, 7.66811580507233, 0, 0, 10.733126291999, 0, 1.33103889053491e-14, 0, 9.2951600308978, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.41602560309064, 0, -4.37680963545758, 15.7321327225523, 0, 2.01017818278147, 0, -4.03686713879669, 0, -0.51581196219913, 21.799082549502, 0, 0.451335466924227, 0, 0.0576695305542354, 0, -1.43860401382688e-14, 0, 0, 0, 0},
    {0, 6.85714285714287, -1.24344978758018e-14, 0, 9.97292252418866, 0, 4.32049379893858, 0, -7.27309832077592, -1.77635683940025e-14, 0, 21.2540192277445, 0, 1.49078803979367, 0, 0, 0, 0, 0, 0, 0},
    {4.32049379893859, 0, 5.93552661441899, 1.79284291400158, -1.09007371339341e-14, -0.320713490294921, 0, 9.20087412456474, 1.77508364925071e-14, -5.96639619853425, 0, 0, 19.8022632451351, 0, 2.53024038425529, 0, 0, 0, 0, 0, 0},
    {0, 1.53330375599988, 1.06581410364015e-14, 0, 6.3379324511312, 0, 0, 0, 13.5526185435788, 1.06581410364015e-14, 0, 0, 0, 16.6675169851115, 0, 0, 0, 0, 0, 2.04281036531029e-14, 0},
    {2.82842712474619, 0, 7.31428571428572, 0, 0, 11.337638238025, 0, 1.43431765232015e-14, 0, 12.9299525702683, 0, 0, 0, 0, 9.93858693195776, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    const static double dmats1[21][21] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.44948974278318, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.24264068711929, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.58198889747161, 4.74341649025257, -0.912870929175276, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.00000000000001, 6.12372435695794, 3.53553390593274, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-2.3094010767585, 0, 8.16496580927726, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330392, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.23606797749979, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823012, 0, -1.09822442744009e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.73205080756887, -5.09116882454314, 3.91918358845308, 0, 9.69948452238571, 4.20000000000001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5, 0, -2.8284271247462, 0, 0, 12.1243556529821, 0, 0, 0, -2.62767238523587e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.21337401931543e-14},
    {2.68328157299975, 5.47722557505167, -1.89736659610103, 7.42307488958091, -1.91662969499983, 0.663940002206988, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499897, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.36643191323984, 2.8982753492379, 1.67332005306815, 2.18217890235993, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270761, -2.1957751641342, 0.760638829255669, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2, 1.2247448713916, 3.53553390593274, -7.37711113563318, 4.57142857142857, 1.64957219768464, 0, 11.4997781699989, 7.42307488958092, -2.57142857142858, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.54919333848295, 6.6407830863536, 3.83405790253617, 0, -6.19677335393187, 5.3665631459995, 0, 1.19249726392026e-14, 13.4164078649988, 4.64758001544891, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-3.57770876399968, 0, 8.85437744847148, 0, 0, -3.09838667696593, 0, 0, 0, 16.0996894379985, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.70801280154532, 5.68564249775212, -2.18840481772878, 7.86606636127615, -2.61129805863299, 1.00508909139074, 9.55297122675765, -2.01843356939834, 0.670059394260484, -0.257905981099562, 10.899541274751, -1.06805465250648, 0.225667733462113, -0.0749149177264377, 0.0288347652771174, 0, 0, 0, 0, 0, 0},
    {2.44948974278318, 3.42857142857144, 0.989743318610785, 3.04933917230523, 4.98646126209433, -2.72741187029097, 2.1602468994693, 8.34624849531682, -3.63654916038796, 1.51635079315149, 12.0498962651137, 10.6270096138723, -2.24536559755125, 0.745394019896834, -0.286902292026514, 0, 0, 0, 0, 0, 0},
    {2.16024689946929, 1.81422947044429, 2.96776330720949, 0.896421457000794, 5.41604758366942, -0.160356745147461, -9.52579344415681, 4.60043706228237, 5.3452248382485, -2.98319809926713, 0, 13.3887736279041, 9.90113162256757, -3.28687867566959, 1.26512019212764, 0, 0, 0, 0, 0, 0},
    {1.82574185835055, 0.766651877999946, 3.83609779052924, 8.6368042559214, 3.1689662255656, 3.65920700676626, 0, -8.74817765279707, 6.77630927178941, 0.521640530957285, 0, 0, 15.0623703313921, 8.33375849255573, -3.20766513935893, 0, 0, 0, 0, 1.33203386568115e-14, 0},
    {1.41421356237312, -6.73025456655334, 3.65714285714287, 0, 9.4550278170087, 5.66881911901249, 0, 1.73231507205905e-14, -6.99854212223763, 6.46497628513415, 0, 0, 0, 17.2141375215909, 4.96929346597888, 0, 0, 0, 0, 1.4597502674923e-14, 0},
    {5.7154760664941, 0, -4.61880215351699, 0, 0, 12.7279220613579, 0, 1.08255872864164e-14, 0, -3.26598632371089, 0, 0, 0, 0, 20.0831604418561, 0, 0, 0, 0, 0, 0}};
    
    // Compute reference derivatives
    // Declare pointer to array of derivatives on FIAT element
    double *derivatives = new double [num_derivatives];
    
    // Declare coefficients
    double coeff0_0 = 0;
    double coeff0_1 = 0;
    double coeff0_2 = 0;
    double coeff0_3 = 0;
    double coeff0_4 = 0;
    double coeff0_5 = 0;
    double coeff0_6 = 0;
    double coeff0_7 = 0;
    double coeff0_8 = 0;
    double coeff0_9 = 0;
    double coeff0_10 = 0;
    double coeff0_11 = 0;
    double coeff0_12 = 0;
    double coeff0_13 = 0;
    double coeff0_14 = 0;
    double coeff0_15 = 0;
    double coeff0_16 = 0;
    double coeff0_17 = 0;
    double coeff0_18 = 0;
    double coeff0_19 = 0;
    double coeff0_20 = 0;
    
    // Declare new coefficients
    double new_coeff0_0 = 0;
    double new_coeff0_1 = 0;
    double new_coeff0_2 = 0;
    double new_coeff0_3 = 0;
    double new_coeff0_4 = 0;
    double new_coeff0_5 = 0;
    double new_coeff0_6 = 0;
    double new_coeff0_7 = 0;
    double new_coeff0_8 = 0;
    double new_coeff0_9 = 0;
    double new_coeff0_10 = 0;
    double new_coeff0_11 = 0;
    double new_coeff0_12 = 0;
    double new_coeff0_13 = 0;
    double new_coeff0_14 = 0;
    double new_coeff0_15 = 0;
    double new_coeff0_16 = 0;
    double new_coeff0_17 = 0;
    double new_coeff0_18 = 0;
    double new_coeff0_19 = 0;
    double new_coeff0_20 = 0;
    
    // Loop possible derivatives
    for (unsigned int deriv_num = 0; deriv_num < num_derivatives; deriv_num++)
    {
      // Get values from coefficients array
      new_coeff0_0 = coefficients0[dof][0];
      new_coeff0_1 = coefficients0[dof][1];
      new_coeff0_2 = coefficients0[dof][2];
      new_coeff0_3 = coefficients0[dof][3];
      new_coeff0_4 = coefficients0[dof][4];
      new_coeff0_5 = coefficients0[dof][5];
      new_coeff0_6 = coefficients0[dof][6];
      new_coeff0_7 = coefficients0[dof][7];
      new_coeff0_8 = coefficients0[dof][8];
      new_coeff0_9 = coefficients0[dof][9];
      new_coeff0_10 = coefficients0[dof][10];
      new_coeff0_11 = coefficients0[dof][11];
      new_coeff0_12 = coefficients0[dof][12];
      new_coeff0_13 = coefficients0[dof][13];
      new_coeff0_14 = coefficients0[dof][14];
      new_coeff0_15 = coefficients0[dof][15];
      new_coeff0_16 = coefficients0[dof][16];
      new_coeff0_17 = coefficients0[dof][17];
      new_coeff0_18 = coefficients0[dof][18];
      new_coeff0_19 = coefficients0[dof][19];
      new_coeff0_20 = coefficients0[dof][20];
    
      // Loop derivative order
      for (unsigned int j = 0; j < n; j++)
      {
        // Update old coefficients
        coeff0_0 = new_coeff0_0;
        coeff0_1 = new_coeff0_1;
        coeff0_2 = new_coeff0_2;
        coeff0_3 = new_coeff0_3;
        coeff0_4 = new_coeff0_4;
        coeff0_5 = new_coeff0_5;
        coeff0_6 = new_coeff0_6;
        coeff0_7 = new_coeff0_7;
        coeff0_8 = new_coeff0_8;
        coeff0_9 = new_coeff0_9;
        coeff0_10 = new_coeff0_10;
        coeff0_11 = new_coeff0_11;
        coeff0_12 = new_coeff0_12;
        coeff0_13 = new_coeff0_13;
        coeff0_14 = new_coeff0_14;
        coeff0_15 = new_coeff0_15;
        coeff0_16 = new_coeff0_16;
        coeff0_17 = new_coeff0_17;
        coeff0_18 = new_coeff0_18;
        coeff0_19 = new_coeff0_19;
        coeff0_20 = new_coeff0_20;
    
        if(combinations[deriv_num][j] == 0)
        {
          new_coeff0_0 = coeff0_0*dmats0[0][0] + coeff0_1*dmats0[1][0] + coeff0_2*dmats0[2][0] + coeff0_3*dmats0[3][0] + coeff0_4*dmats0[4][0] + coeff0_5*dmats0[5][0] + coeff0_6*dmats0[6][0] + coeff0_7*dmats0[7][0] + coeff0_8*dmats0[8][0] + coeff0_9*dmats0[9][0] + coeff0_10*dmats0[10][0] + coeff0_11*dmats0[11][0] + coeff0_12*dmats0[12][0] + coeff0_13*dmats0[13][0] + coeff0_14*dmats0[14][0] + coeff0_15*dmats0[15][0] + coeff0_16*dmats0[16][0] + coeff0_17*dmats0[17][0] + coeff0_18*dmats0[18][0] + coeff0_19*dmats0[19][0] + coeff0_20*dmats0[20][0];
          new_coeff0_1 = coeff0_0*dmats0[0][1] + coeff0_1*dmats0[1][1] + coeff0_2*dmats0[2][1] + coeff0_3*dmats0[3][1] + coeff0_4*dmats0[4][1] + coeff0_5*dmats0[5][1] + coeff0_6*dmats0[6][1] + coeff0_7*dmats0[7][1] + coeff0_8*dmats0[8][1] + coeff0_9*dmats0[9][1] + coeff0_10*dmats0[10][1] + coeff0_11*dmats0[11][1] + coeff0_12*dmats0[12][1] + coeff0_13*dmats0[13][1] + coeff0_14*dmats0[14][1] + coeff0_15*dmats0[15][1] + coeff0_16*dmats0[16][1] + coeff0_17*dmats0[17][1] + coeff0_18*dmats0[18][1] + coeff0_19*dmats0[19][1] + coeff0_20*dmats0[20][1];
          new_coeff0_2 = coeff0_0*dmats0[0][2] + coeff0_1*dmats0[1][2] + coeff0_2*dmats0[2][2] + coeff0_3*dmats0[3][2] + coeff0_4*dmats0[4][2] + coeff0_5*dmats0[5][2] + coeff0_6*dmats0[6][2] + coeff0_7*dmats0[7][2] + coeff0_8*dmats0[8][2] + coeff0_9*dmats0[9][2] + coeff0_10*dmats0[10][2] + coeff0_11*dmats0[11][2] + coeff0_12*dmats0[12][2] + coeff0_13*dmats0[13][2] + coeff0_14*dmats0[14][2] + coeff0_15*dmats0[15][2] + coeff0_16*dmats0[16][2] + coeff0_17*dmats0[17][2] + coeff0_18*dmats0[18][2] + coeff0_19*dmats0[19][2] + coeff0_20*dmats0[20][2];
          new_coeff0_3 = coeff0_0*dmats0[0][3] + coeff0_1*dmats0[1][3] + coeff0_2*dmats0[2][3] + coeff0_3*dmats0[3][3] + coeff0_4*dmats0[4][3] + coeff0_5*dmats0[5][3] + coeff0_6*dmats0[6][3] + coeff0_7*dmats0[7][3] + coeff0_8*dmats0[8][3] + coeff0_9*dmats0[9][3] + coeff0_10*dmats0[10][3] + coeff0_11*dmats0[11][3] + coeff0_12*dmats0[12][3] + coeff0_13*dmats0[13][3] + coeff0_14*dmats0[14][3] + coeff0_15*dmats0[15][3] + coeff0_16*dmats0[16][3] + coeff0_17*dmats0[17][3] + coeff0_18*dmats0[18][3] + coeff0_19*dmats0[19][3] + coeff0_20*dmats0[20][3];
          new_coeff0_4 = coeff0_0*dmats0[0][4] + coeff0_1*dmats0[1][4] + coeff0_2*dmats0[2][4] + coeff0_3*dmats0[3][4] + coeff0_4*dmats0[4][4] + coeff0_5*dmats0[5][4] + coeff0_6*dmats0[6][4] + coeff0_7*dmats0[7][4] + coeff0_8*dmats0[8][4] + coeff0_9*dmats0[9][4] + coeff0_10*dmats0[10][4] + coeff0_11*dmats0[11][4] + coeff0_12*dmats0[12][4] + coeff0_13*dmats0[13][4] + coeff0_14*dmats0[14][4] + coeff0_15*dmats0[15][4] + coeff0_16*dmats0[16][4] + coeff0_17*dmats0[17][4] + coeff0_18*dmats0[18][4] + coeff0_19*dmats0[19][4] + coeff0_20*dmats0[20][4];
          new_coeff0_5 = coeff0_0*dmats0[0][5] + coeff0_1*dmats0[1][5] + coeff0_2*dmats0[2][5] + coeff0_3*dmats0[3][5] + coeff0_4*dmats0[4][5] + coeff0_5*dmats0[5][5] + coeff0_6*dmats0[6][5] + coeff0_7*dmats0[7][5] + coeff0_8*dmats0[8][5] + coeff0_9*dmats0[9][5] + coeff0_10*dmats0[10][5] + coeff0_11*dmats0[11][5] + coeff0_12*dmats0[12][5] + coeff0_13*dmats0[13][5] + coeff0_14*dmats0[14][5] + coeff0_15*dmats0[15][5] + coeff0_16*dmats0[16][5] + coeff0_17*dmats0[17][5] + coeff0_18*dmats0[18][5] + coeff0_19*dmats0[19][5] + coeff0_20*dmats0[20][5];
          new_coeff0_6 = coeff0_0*dmats0[0][6] + coeff0_1*dmats0[1][6] + coeff0_2*dmats0[2][6] + coeff0_3*dmats0[3][6] + coeff0_4*dmats0[4][6] + coeff0_5*dmats0[5][6] + coeff0_6*dmats0[6][6] + coeff0_7*dmats0[7][6] + coeff0_8*dmats0[8][6] + coeff0_9*dmats0[9][6] + coeff0_10*dmats0[10][6] + coeff0_11*dmats0[11][6] + coeff0_12*dmats0[12][6] + coeff0_13*dmats0[13][6] + coeff0_14*dmats0[14][6] + coeff0_15*dmats0[15][6] + coeff0_16*dmats0[16][6] + coeff0_17*dmats0[17][6] + coeff0_18*dmats0[18][6] + coeff0_19*dmats0[19][6] + coeff0_20*dmats0[20][6];
          new_coeff0_7 = coeff0_0*dmats0[0][7] + coeff0_1*dmats0[1][7] + coeff0_2*dmats0[2][7] + coeff0_3*dmats0[3][7] + coeff0_4*dmats0[4][7] + coeff0_5*dmats0[5][7] + coeff0_6*dmats0[6][7] + coeff0_7*dmats0[7][7] + coeff0_8*dmats0[8][7] + coeff0_9*dmats0[9][7] + coeff0_10*dmats0[10][7] + coeff0_11*dmats0[11][7] + coeff0_12*dmats0[12][7] + coeff0_13*dmats0[13][7] + coeff0_14*dmats0[14][7] + coeff0_15*dmats0[15][7] + coeff0_16*dmats0[16][7] + coeff0_17*dmats0[17][7] + coeff0_18*dmats0[18][7] + coeff0_19*dmats0[19][7] + coeff0_20*dmats0[20][7];
          new_coeff0_8 = coeff0_0*dmats0[0][8] + coeff0_1*dmats0[1][8] + coeff0_2*dmats0[2][8] + coeff0_3*dmats0[3][8] + coeff0_4*dmats0[4][8] + coeff0_5*dmats0[5][8] + coeff0_6*dmats0[6][8] + coeff0_7*dmats0[7][8] + coeff0_8*dmats0[8][8] + coeff0_9*dmats0[9][8] + coeff0_10*dmats0[10][8] + coeff0_11*dmats0[11][8] + coeff0_12*dmats0[12][8] + coeff0_13*dmats0[13][8] + coeff0_14*dmats0[14][8] + coeff0_15*dmats0[15][8] + coeff0_16*dmats0[16][8] + coeff0_17*dmats0[17][8] + coeff0_18*dmats0[18][8] + coeff0_19*dmats0[19][8] + coeff0_20*dmats0[20][8];
          new_coeff0_9 = coeff0_0*dmats0[0][9] + coeff0_1*dmats0[1][9] + coeff0_2*dmats0[2][9] + coeff0_3*dmats0[3][9] + coeff0_4*dmats0[4][9] + coeff0_5*dmats0[5][9] + coeff0_6*dmats0[6][9] + coeff0_7*dmats0[7][9] + coeff0_8*dmats0[8][9] + coeff0_9*dmats0[9][9] + coeff0_10*dmats0[10][9] + coeff0_11*dmats0[11][9] + coeff0_12*dmats0[12][9] + coeff0_13*dmats0[13][9] + coeff0_14*dmats0[14][9] + coeff0_15*dmats0[15][9] + coeff0_16*dmats0[16][9] + coeff0_17*dmats0[17][9] + coeff0_18*dmats0[18][9] + coeff0_19*dmats0[19][9] + coeff0_20*dmats0[20][9];
          new_coeff0_10 = coeff0_0*dmats0[0][10] + coeff0_1*dmats0[1][10] + coeff0_2*dmats0[2][10] + coeff0_3*dmats0[3][10] + coeff0_4*dmats0[4][10] + coeff0_5*dmats0[5][10] + coeff0_6*dmats0[6][10] + coeff0_7*dmats0[7][10] + coeff0_8*dmats0[8][10] + coeff0_9*dmats0[9][10] + coeff0_10*dmats0[10][10] + coeff0_11*dmats0[11][10] + coeff0_12*dmats0[12][10] + coeff0_13*dmats0[13][10] + coeff0_14*dmats0[14][10] + coeff0_15*dmats0[15][10] + coeff0_16*dmats0[16][10] + coeff0_17*dmats0[17][10] + coeff0_18*dmats0[18][10] + coeff0_19*dmats0[19][10] + coeff0_20*dmats0[20][10];
          new_coeff0_11 = coeff0_0*dmats0[0][11] + coeff0_1*dmats0[1][11] + coeff0_2*dmats0[2][11] + coeff0_3*dmats0[3][11] + coeff0_4*dmats0[4][11] + coeff0_5*dmats0[5][11] + coeff0_6*dmats0[6][11] + coeff0_7*dmats0[7][11] + coeff0_8*dmats0[8][11] + coeff0_9*dmats0[9][11] + coeff0_10*dmats0[10][11] + coeff0_11*dmats0[11][11] + coeff0_12*dmats0[12][11] + coeff0_13*dmats0[13][11] + coeff0_14*dmats0[14][11] + coeff0_15*dmats0[15][11] + coeff0_16*dmats0[16][11] + coeff0_17*dmats0[17][11] + coeff0_18*dmats0[18][11] + coeff0_19*dmats0[19][11] + coeff0_20*dmats0[20][11];
          new_coeff0_12 = coeff0_0*dmats0[0][12] + coeff0_1*dmats0[1][12] + coeff0_2*dmats0[2][12] + coeff0_3*dmats0[3][12] + coeff0_4*dmats0[4][12] + coeff0_5*dmats0[5][12] + coeff0_6*dmats0[6][12] + coeff0_7*dmats0[7][12] + coeff0_8*dmats0[8][12] + coeff0_9*dmats0[9][12] + coeff0_10*dmats0[10][12] + coeff0_11*dmats0[11][12] + coeff0_12*dmats0[12][12] + coeff0_13*dmats0[13][12] + coeff0_14*dmats0[14][12] + coeff0_15*dmats0[15][12] + coeff0_16*dmats0[16][12] + coeff0_17*dmats0[17][12] + coeff0_18*dmats0[18][12] + coeff0_19*dmats0[19][12] + coeff0_20*dmats0[20][12];
          new_coeff0_13 = coeff0_0*dmats0[0][13] + coeff0_1*dmats0[1][13] + coeff0_2*dmats0[2][13] + coeff0_3*dmats0[3][13] + coeff0_4*dmats0[4][13] + coeff0_5*dmats0[5][13] + coeff0_6*dmats0[6][13] + coeff0_7*dmats0[7][13] + coeff0_8*dmats0[8][13] + coeff0_9*dmats0[9][13] + coeff0_10*dmats0[10][13] + coeff0_11*dmats0[11][13] + coeff0_12*dmats0[12][13] + coeff0_13*dmats0[13][13] + coeff0_14*dmats0[14][13] + coeff0_15*dmats0[15][13] + coeff0_16*dmats0[16][13] + coeff0_17*dmats0[17][13] + coeff0_18*dmats0[18][13] + coeff0_19*dmats0[19][13] + coeff0_20*dmats0[20][13];
          new_coeff0_14 = coeff0_0*dmats0[0][14] + coeff0_1*dmats0[1][14] + coeff0_2*dmats0[2][14] + coeff0_3*dmats0[3][14] + coeff0_4*dmats0[4][14] + coeff0_5*dmats0[5][14] + coeff0_6*dmats0[6][14] + coeff0_7*dmats0[7][14] + coeff0_8*dmats0[8][14] + coeff0_9*dmats0[9][14] + coeff0_10*dmats0[10][14] + coeff0_11*dmats0[11][14] + coeff0_12*dmats0[12][14] + coeff0_13*dmats0[13][14] + coeff0_14*dmats0[14][14] + coeff0_15*dmats0[15][14] + coeff0_16*dmats0[16][14] + coeff0_17*dmats0[17][14] + coeff0_18*dmats0[18][14] + coeff0_19*dmats0[19][14] + coeff0_20*dmats0[20][14];
          new_coeff0_15 = coeff0_0*dmats0[0][15] + coeff0_1*dmats0[1][15] + coeff0_2*dmats0[2][15] + coeff0_3*dmats0[3][15] + coeff0_4*dmats0[4][15] + coeff0_5*dmats0[5][15] + coeff0_6*dmats0[6][15] + coeff0_7*dmats0[7][15] + coeff0_8*dmats0[8][15] + coeff0_9*dmats0[9][15] + coeff0_10*dmats0[10][15] + coeff0_11*dmats0[11][15] + coeff0_12*dmats0[12][15] + coeff0_13*dmats0[13][15] + coeff0_14*dmats0[14][15] + coeff0_15*dmats0[15][15] + coeff0_16*dmats0[16][15] + coeff0_17*dmats0[17][15] + coeff0_18*dmats0[18][15] + coeff0_19*dmats0[19][15] + coeff0_20*dmats0[20][15];
          new_coeff0_16 = coeff0_0*dmats0[0][16] + coeff0_1*dmats0[1][16] + coeff0_2*dmats0[2][16] + coeff0_3*dmats0[3][16] + coeff0_4*dmats0[4][16] + coeff0_5*dmats0[5][16] + coeff0_6*dmats0[6][16] + coeff0_7*dmats0[7][16] + coeff0_8*dmats0[8][16] + coeff0_9*dmats0[9][16] + coeff0_10*dmats0[10][16] + coeff0_11*dmats0[11][16] + coeff0_12*dmats0[12][16] + coeff0_13*dmats0[13][16] + coeff0_14*dmats0[14][16] + coeff0_15*dmats0[15][16] + coeff0_16*dmats0[16][16] + coeff0_17*dmats0[17][16] + coeff0_18*dmats0[18][16] + coeff0_19*dmats0[19][16] + coeff0_20*dmats0[20][16];
          new_coeff0_17 = coeff0_0*dmats0[0][17] + coeff0_1*dmats0[1][17] + coeff0_2*dmats0[2][17] + coeff0_3*dmats0[3][17] + coeff0_4*dmats0[4][17] + coeff0_5*dmats0[5][17] + coeff0_6*dmats0[6][17] + coeff0_7*dmats0[7][17] + coeff0_8*dmats0[8][17] + coeff0_9*dmats0[9][17] + coeff0_10*dmats0[10][17] + coeff0_11*dmats0[11][17] + coeff0_12*dmats0[12][17] + coeff0_13*dmats0[13][17] + coeff0_14*dmats0[14][17] + coeff0_15*dmats0[15][17] + coeff0_16*dmats0[16][17] + coeff0_17*dmats0[17][17] + coeff0_18*dmats0[18][17] + coeff0_19*dmats0[19][17] + coeff0_20*dmats0[20][17];
          new_coeff0_18 = coeff0_0*dmats0[0][18] + coeff0_1*dmats0[1][18] + coeff0_2*dmats0[2][18] + coeff0_3*dmats0[3][18] + coeff0_4*dmats0[4][18] + coeff0_5*dmats0[5][18] + coeff0_6*dmats0[6][18] + coeff0_7*dmats0[7][18] + coeff0_8*dmats0[8][18] + coeff0_9*dmats0[9][18] + coeff0_10*dmats0[10][18] + coeff0_11*dmats0[11][18] + coeff0_12*dmats0[12][18] + coeff0_13*dmats0[13][18] + coeff0_14*dmats0[14][18] + coeff0_15*dmats0[15][18] + coeff0_16*dmats0[16][18] + coeff0_17*dmats0[17][18] + coeff0_18*dmats0[18][18] + coeff0_19*dmats0[19][18] + coeff0_20*dmats0[20][18];
          new_coeff0_19 = coeff0_0*dmats0[0][19] + coeff0_1*dmats0[1][19] + coeff0_2*dmats0[2][19] + coeff0_3*dmats0[3][19] + coeff0_4*dmats0[4][19] + coeff0_5*dmats0[5][19] + coeff0_6*dmats0[6][19] + coeff0_7*dmats0[7][19] + coeff0_8*dmats0[8][19] + coeff0_9*dmats0[9][19] + coeff0_10*dmats0[10][19] + coeff0_11*dmats0[11][19] + coeff0_12*dmats0[12][19] + coeff0_13*dmats0[13][19] + coeff0_14*dmats0[14][19] + coeff0_15*dmats0[15][19] + coeff0_16*dmats0[16][19] + coeff0_17*dmats0[17][19] + coeff0_18*dmats0[18][19] + coeff0_19*dmats0[19][19] + coeff0_20*dmats0[20][19];
          new_coeff0_20 = coeff0_0*dmats0[0][20] + coeff0_1*dmats0[1][20] + coeff0_2*dmats0[2][20] + coeff0_3*dmats0[3][20] + coeff0_4*dmats0[4][20] + coeff0_5*dmats0[5][20] + coeff0_6*dmats0[6][20] + coeff0_7*dmats0[7][20] + coeff0_8*dmats0[8][20] + coeff0_9*dmats0[9][20] + coeff0_10*dmats0[10][20] + coeff0_11*dmats0[11][20] + coeff0_12*dmats0[12][20] + coeff0_13*dmats0[13][20] + coeff0_14*dmats0[14][20] + coeff0_15*dmats0[15][20] + coeff0_16*dmats0[16][20] + coeff0_17*dmats0[17][20] + coeff0_18*dmats0[18][20] + coeff0_19*dmats0[19][20] + coeff0_20*dmats0[20][20];
        }
        if(combinations[deriv_num][j] == 1)
        {
          new_coeff0_0 = coeff0_0*dmats1[0][0] + coeff0_1*dmats1[1][0] + coeff0_2*dmats1[2][0] + coeff0_3*dmats1[3][0] + coeff0_4*dmats1[4][0] + coeff0_5*dmats1[5][0] + coeff0_6*dmats1[6][0] + coeff0_7*dmats1[7][0] + coeff0_8*dmats1[8][0] + coeff0_9*dmats1[9][0] + coeff0_10*dmats1[10][0] + coeff0_11*dmats1[11][0] + coeff0_12*dmats1[12][0] + coeff0_13*dmats1[13][0] + coeff0_14*dmats1[14][0] + coeff0_15*dmats1[15][0] + coeff0_16*dmats1[16][0] + coeff0_17*dmats1[17][0] + coeff0_18*dmats1[18][0] + coeff0_19*dmats1[19][0] + coeff0_20*dmats1[20][0];
          new_coeff0_1 = coeff0_0*dmats1[0][1] + coeff0_1*dmats1[1][1] + coeff0_2*dmats1[2][1] + coeff0_3*dmats1[3][1] + coeff0_4*dmats1[4][1] + coeff0_5*dmats1[5][1] + coeff0_6*dmats1[6][1] + coeff0_7*dmats1[7][1] + coeff0_8*dmats1[8][1] + coeff0_9*dmats1[9][1] + coeff0_10*dmats1[10][1] + coeff0_11*dmats1[11][1] + coeff0_12*dmats1[12][1] + coeff0_13*dmats1[13][1] + coeff0_14*dmats1[14][1] + coeff0_15*dmats1[15][1] + coeff0_16*dmats1[16][1] + coeff0_17*dmats1[17][1] + coeff0_18*dmats1[18][1] + coeff0_19*dmats1[19][1] + coeff0_20*dmats1[20][1];
          new_coeff0_2 = coeff0_0*dmats1[0][2] + coeff0_1*dmats1[1][2] + coeff0_2*dmats1[2][2] + coeff0_3*dmats1[3][2] + coeff0_4*dmats1[4][2] + coeff0_5*dmats1[5][2] + coeff0_6*dmats1[6][2] + coeff0_7*dmats1[7][2] + coeff0_8*dmats1[8][2] + coeff0_9*dmats1[9][2] + coeff0_10*dmats1[10][2] + coeff0_11*dmats1[11][2] + coeff0_12*dmats1[12][2] + coeff0_13*dmats1[13][2] + coeff0_14*dmats1[14][2] + coeff0_15*dmats1[15][2] + coeff0_16*dmats1[16][2] + coeff0_17*dmats1[17][2] + coeff0_18*dmats1[18][2] + coeff0_19*dmats1[19][2] + coeff0_20*dmats1[20][2];
          new_coeff0_3 = coeff0_0*dmats1[0][3] + coeff0_1*dmats1[1][3] + coeff0_2*dmats1[2][3] + coeff0_3*dmats1[3][3] + coeff0_4*dmats1[4][3] + coeff0_5*dmats1[5][3] + coeff0_6*dmats1[6][3] + coeff0_7*dmats1[7][3] + coeff0_8*dmats1[8][3] + coeff0_9*dmats1[9][3] + coeff0_10*dmats1[10][3] + coeff0_11*dmats1[11][3] + coeff0_12*dmats1[12][3] + coeff0_13*dmats1[13][3] + coeff0_14*dmats1[14][3] + coeff0_15*dmats1[15][3] + coeff0_16*dmats1[16][3] + coeff0_17*dmats1[17][3] + coeff0_18*dmats1[18][3] + coeff0_19*dmats1[19][3] + coeff0_20*dmats1[20][3];
          new_coeff0_4 = coeff0_0*dmats1[0][4] + coeff0_1*dmats1[1][4] + coeff0_2*dmats1[2][4] + coeff0_3*dmats1[3][4] + coeff0_4*dmats1[4][4] + coeff0_5*dmats1[5][4] + coeff0_6*dmats1[6][4] + coeff0_7*dmats1[7][4] + coeff0_8*dmats1[8][4] + coeff0_9*dmats1[9][4] + coeff0_10*dmats1[10][4] + coeff0_11*dmats1[11][4] + coeff0_12*dmats1[12][4] + coeff0_13*dmats1[13][4] + coeff0_14*dmats1[14][4] + coeff0_15*dmats1[15][4] + coeff0_16*dmats1[16][4] + coeff0_17*dmats1[17][4] + coeff0_18*dmats1[18][4] + coeff0_19*dmats1[19][4] + coeff0_20*dmats1[20][4];
          new_coeff0_5 = coeff0_0*dmats1[0][5] + coeff0_1*dmats1[1][5] + coeff0_2*dmats1[2][5] + coeff0_3*dmats1[3][5] + coeff0_4*dmats1[4][5] + coeff0_5*dmats1[5][5] + coeff0_6*dmats1[6][5] + coeff0_7*dmats1[7][5] + coeff0_8*dmats1[8][5] + coeff0_9*dmats1[9][5] + coeff0_10*dmats1[10][5] + coeff0_11*dmats1[11][5] + coeff0_12*dmats1[12][5] + coeff0_13*dmats1[13][5] + coeff0_14*dmats1[14][5] + coeff0_15*dmats1[15][5] + coeff0_16*dmats1[16][5] + coeff0_17*dmats1[17][5] + coeff0_18*dmats1[18][5] + coeff0_19*dmats1[19][5] + coeff0_20*dmats1[20][5];
          new_coeff0_6 = coeff0_0*dmats1[0][6] + coeff0_1*dmats1[1][6] + coeff0_2*dmats1[2][6] + coeff0_3*dmats1[3][6] + coeff0_4*dmats1[4][6] + coeff0_5*dmats1[5][6] + coeff0_6*dmats1[6][6] + coeff0_7*dmats1[7][6] + coeff0_8*dmats1[8][6] + coeff0_9*dmats1[9][6] + coeff0_10*dmats1[10][6] + coeff0_11*dmats1[11][6] + coeff0_12*dmats1[12][6] + coeff0_13*dmats1[13][6] + coeff0_14*dmats1[14][6] + coeff0_15*dmats1[15][6] + coeff0_16*dmats1[16][6] + coeff0_17*dmats1[17][6] + coeff0_18*dmats1[18][6] + coeff0_19*dmats1[19][6] + coeff0_20*dmats1[20][6];
          new_coeff0_7 = coeff0_0*dmats1[0][7] + coeff0_1*dmats1[1][7] + coeff0_2*dmats1[2][7] + coeff0_3*dmats1[3][7] + coeff0_4*dmats1[4][7] + coeff0_5*dmats1[5][7] + coeff0_6*dmats1[6][7] + coeff0_7*dmats1[7][7] + coeff0_8*dmats1[8][7] + coeff0_9*dmats1[9][7] + coeff0_10*dmats1[10][7] + coeff0_11*dmats1[11][7] + coeff0_12*dmats1[12][7] + coeff0_13*dmats1[13][7] + coeff0_14*dmats1[14][7] + coeff0_15*dmats1[15][7] + coeff0_16*dmats1[16][7] + coeff0_17*dmats1[17][7] + coeff0_18*dmats1[18][7] + coeff0_19*dmats1[19][7] + coeff0_20*dmats1[20][7];
          new_coeff0_8 = coeff0_0*dmats1[0][8] + coeff0_1*dmats1[1][8] + coeff0_2*dmats1[2][8] + coeff0_3*dmats1[3][8] + coeff0_4*dmats1[4][8] + coeff0_5*dmats1[5][8] + coeff0_6*dmats1[6][8] + coeff0_7*dmats1[7][8] + coeff0_8*dmats1[8][8] + coeff0_9*dmats1[9][8] + coeff0_10*dmats1[10][8] + coeff0_11*dmats1[11][8] + coeff0_12*dmats1[12][8] + coeff0_13*dmats1[13][8] + coeff0_14*dmats1[14][8] + coeff0_15*dmats1[15][8] + coeff0_16*dmats1[16][8] + coeff0_17*dmats1[17][8] + coeff0_18*dmats1[18][8] + coeff0_19*dmats1[19][8] + coeff0_20*dmats1[20][8];
          new_coeff0_9 = coeff0_0*dmats1[0][9] + coeff0_1*dmats1[1][9] + coeff0_2*dmats1[2][9] + coeff0_3*dmats1[3][9] + coeff0_4*dmats1[4][9] + coeff0_5*dmats1[5][9] + coeff0_6*dmats1[6][9] + coeff0_7*dmats1[7][9] + coeff0_8*dmats1[8][9] + coeff0_9*dmats1[9][9] + coeff0_10*dmats1[10][9] + coeff0_11*dmats1[11][9] + coeff0_12*dmats1[12][9] + coeff0_13*dmats1[13][9] + coeff0_14*dmats1[14][9] + coeff0_15*dmats1[15][9] + coeff0_16*dmats1[16][9] + coeff0_17*dmats1[17][9] + coeff0_18*dmats1[18][9] + coeff0_19*dmats1[19][9] + coeff0_20*dmats1[20][9];
          new_coeff0_10 = coeff0_0*dmats1[0][10] + coeff0_1*dmats1[1][10] + coeff0_2*dmats1[2][10] + coeff0_3*dmats1[3][10] + coeff0_4*dmats1[4][10] + coeff0_5*dmats1[5][10] + coeff0_6*dmats1[6][10] + coeff0_7*dmats1[7][10] + coeff0_8*dmats1[8][10] + coeff0_9*dmats1[9][10] + coeff0_10*dmats1[10][10] + coeff0_11*dmats1[11][10] + coeff0_12*dmats1[12][10] + coeff0_13*dmats1[13][10] + coeff0_14*dmats1[14][10] + coeff0_15*dmats1[15][10] + coeff0_16*dmats1[16][10] + coeff0_17*dmats1[17][10] + coeff0_18*dmats1[18][10] + coeff0_19*dmats1[19][10] + coeff0_20*dmats1[20][10];
          new_coeff0_11 = coeff0_0*dmats1[0][11] + coeff0_1*dmats1[1][11] + coeff0_2*dmats1[2][11] + coeff0_3*dmats1[3][11] + coeff0_4*dmats1[4][11] + coeff0_5*dmats1[5][11] + coeff0_6*dmats1[6][11] + coeff0_7*dmats1[7][11] + coeff0_8*dmats1[8][11] + coeff0_9*dmats1[9][11] + coeff0_10*dmats1[10][11] + coeff0_11*dmats1[11][11] + coeff0_12*dmats1[12][11] + coeff0_13*dmats1[13][11] + coeff0_14*dmats1[14][11] + coeff0_15*dmats1[15][11] + coeff0_16*dmats1[16][11] + coeff0_17*dmats1[17][11] + coeff0_18*dmats1[18][11] + coeff0_19*dmats1[19][11] + coeff0_20*dmats1[20][11];
          new_coeff0_12 = coeff0_0*dmats1[0][12] + coeff0_1*dmats1[1][12] + coeff0_2*dmats1[2][12] + coeff0_3*dmats1[3][12] + coeff0_4*dmats1[4][12] + coeff0_5*dmats1[5][12] + coeff0_6*dmats1[6][12] + coeff0_7*dmats1[7][12] + coeff0_8*dmats1[8][12] + coeff0_9*dmats1[9][12] + coeff0_10*dmats1[10][12] + coeff0_11*dmats1[11][12] + coeff0_12*dmats1[12][12] + coeff0_13*dmats1[13][12] + coeff0_14*dmats1[14][12] + coeff0_15*dmats1[15][12] + coeff0_16*dmats1[16][12] + coeff0_17*dmats1[17][12] + coeff0_18*dmats1[18][12] + coeff0_19*dmats1[19][12] + coeff0_20*dmats1[20][12];
          new_coeff0_13 = coeff0_0*dmats1[0][13] + coeff0_1*dmats1[1][13] + coeff0_2*dmats1[2][13] + coeff0_3*dmats1[3][13] + coeff0_4*dmats1[4][13] + coeff0_5*dmats1[5][13] + coeff0_6*dmats1[6][13] + coeff0_7*dmats1[7][13] + coeff0_8*dmats1[8][13] + coeff0_9*dmats1[9][13] + coeff0_10*dmats1[10][13] + coeff0_11*dmats1[11][13] + coeff0_12*dmats1[12][13] + coeff0_13*dmats1[13][13] + coeff0_14*dmats1[14][13] + coeff0_15*dmats1[15][13] + coeff0_16*dmats1[16][13] + coeff0_17*dmats1[17][13] + coeff0_18*dmats1[18][13] + coeff0_19*dmats1[19][13] + coeff0_20*dmats1[20][13];
          new_coeff0_14 = coeff0_0*dmats1[0][14] + coeff0_1*dmats1[1][14] + coeff0_2*dmats1[2][14] + coeff0_3*dmats1[3][14] + coeff0_4*dmats1[4][14] + coeff0_5*dmats1[5][14] + coeff0_6*dmats1[6][14] + coeff0_7*dmats1[7][14] + coeff0_8*dmats1[8][14] + coeff0_9*dmats1[9][14] + coeff0_10*dmats1[10][14] + coeff0_11*dmats1[11][14] + coeff0_12*dmats1[12][14] + coeff0_13*dmats1[13][14] + coeff0_14*dmats1[14][14] + coeff0_15*dmats1[15][14] + coeff0_16*dmats1[16][14] + coeff0_17*dmats1[17][14] + coeff0_18*dmats1[18][14] + coeff0_19*dmats1[19][14] + coeff0_20*dmats1[20][14];
          new_coeff0_15 = coeff0_0*dmats1[0][15] + coeff0_1*dmats1[1][15] + coeff0_2*dmats1[2][15] + coeff0_3*dmats1[3][15] + coeff0_4*dmats1[4][15] + coeff0_5*dmats1[5][15] + coeff0_6*dmats1[6][15] + coeff0_7*dmats1[7][15] + coeff0_8*dmats1[8][15] + coeff0_9*dmats1[9][15] + coeff0_10*dmats1[10][15] + coeff0_11*dmats1[11][15] + coeff0_12*dmats1[12][15] + coeff0_13*dmats1[13][15] + coeff0_14*dmats1[14][15] + coeff0_15*dmats1[15][15] + coeff0_16*dmats1[16][15] + coeff0_17*dmats1[17][15] + coeff0_18*dmats1[18][15] + coeff0_19*dmats1[19][15] + coeff0_20*dmats1[20][15];
          new_coeff0_16 = coeff0_0*dmats1[0][16] + coeff0_1*dmats1[1][16] + coeff0_2*dmats1[2][16] + coeff0_3*dmats1[3][16] + coeff0_4*dmats1[4][16] + coeff0_5*dmats1[5][16] + coeff0_6*dmats1[6][16] + coeff0_7*dmats1[7][16] + coeff0_8*dmats1[8][16] + coeff0_9*dmats1[9][16] + coeff0_10*dmats1[10][16] + coeff0_11*dmats1[11][16] + coeff0_12*dmats1[12][16] + coeff0_13*dmats1[13][16] + coeff0_14*dmats1[14][16] + coeff0_15*dmats1[15][16] + coeff0_16*dmats1[16][16] + coeff0_17*dmats1[17][16] + coeff0_18*dmats1[18][16] + coeff0_19*dmats1[19][16] + coeff0_20*dmats1[20][16];
          new_coeff0_17 = coeff0_0*dmats1[0][17] + coeff0_1*dmats1[1][17] + coeff0_2*dmats1[2][17] + coeff0_3*dmats1[3][17] + coeff0_4*dmats1[4][17] + coeff0_5*dmats1[5][17] + coeff0_6*dmats1[6][17] + coeff0_7*dmats1[7][17] + coeff0_8*dmats1[8][17] + coeff0_9*dmats1[9][17] + coeff0_10*dmats1[10][17] + coeff0_11*dmats1[11][17] + coeff0_12*dmats1[12][17] + coeff0_13*dmats1[13][17] + coeff0_14*dmats1[14][17] + coeff0_15*dmats1[15][17] + coeff0_16*dmats1[16][17] + coeff0_17*dmats1[17][17] + coeff0_18*dmats1[18][17] + coeff0_19*dmats1[19][17] + coeff0_20*dmats1[20][17];
          new_coeff0_18 = coeff0_0*dmats1[0][18] + coeff0_1*dmats1[1][18] + coeff0_2*dmats1[2][18] + coeff0_3*dmats1[3][18] + coeff0_4*dmats1[4][18] + coeff0_5*dmats1[5][18] + coeff0_6*dmats1[6][18] + coeff0_7*dmats1[7][18] + coeff0_8*dmats1[8][18] + coeff0_9*dmats1[9][18] + coeff0_10*dmats1[10][18] + coeff0_11*dmats1[11][18] + coeff0_12*dmats1[12][18] + coeff0_13*dmats1[13][18] + coeff0_14*dmats1[14][18] + coeff0_15*dmats1[15][18] + coeff0_16*dmats1[16][18] + coeff0_17*dmats1[17][18] + coeff0_18*dmats1[18][18] + coeff0_19*dmats1[19][18] + coeff0_20*dmats1[20][18];
          new_coeff0_19 = coeff0_0*dmats1[0][19] + coeff0_1*dmats1[1][19] + coeff0_2*dmats1[2][19] + coeff0_3*dmats1[3][19] + coeff0_4*dmats1[4][19] + coeff0_5*dmats1[5][19] + coeff0_6*dmats1[6][19] + coeff0_7*dmats1[7][19] + coeff0_8*dmats1[8][19] + coeff0_9*dmats1[9][19] + coeff0_10*dmats1[10][19] + coeff0_11*dmats1[11][19] + coeff0_12*dmats1[12][19] + coeff0_13*dmats1[13][19] + coeff0_14*dmats1[14][19] + coeff0_15*dmats1[15][19] + coeff0_16*dmats1[16][19] + coeff0_17*dmats1[17][19] + coeff0_18*dmats1[18][19] + coeff0_19*dmats1[19][19] + coeff0_20*dmats1[20][19];
          new_coeff0_20 = coeff0_0*dmats1[0][20] + coeff0_1*dmats1[1][20] + coeff0_2*dmats1[2][20] + coeff0_3*dmats1[3][20] + coeff0_4*dmats1[4][20] + coeff0_5*dmats1[5][20] + coeff0_6*dmats1[6][20] + coeff0_7*dmats1[7][20] + coeff0_8*dmats1[8][20] + coeff0_9*dmats1[9][20] + coeff0_10*dmats1[10][20] + coeff0_11*dmats1[11][20] + coeff0_12*dmats1[12][20] + coeff0_13*dmats1[13][20] + coeff0_14*dmats1[14][20] + coeff0_15*dmats1[15][20] + coeff0_16*dmats1[16][20] + coeff0_17*dmats1[17][20] + coeff0_18*dmats1[18][20] + coeff0_19*dmats1[19][20] + coeff0_20*dmats1[20][20];
        }
    
      }
      // Compute derivatives on reference element as dot product of coefficients and basisvalues
      derivatives[deriv_num] = new_coeff0_0*basisvalue0 + new_coeff0_1*basisvalue1 + new_coeff0_2*basisvalue2 + new_coeff0_3*basisvalue3 + new_coeff0_4*basisvalue4 + new_coeff0_5*basisvalue5 + new_coeff0_6*basisvalue6 + new_coeff0_7*basisvalue7 + new_coeff0_8*basisvalue8 + new_coeff0_9*basisvalue9 + new_coeff0_10*basisvalue10 + new_coeff0_11*basisvalue11 + new_coeff0_12*basisvalue12 + new_coeff0_13*basisvalue13 + new_coeff0_14*basisvalue14 + new_coeff0_15*basisvalue15 + new_coeff0_16*basisvalue16 + new_coeff0_17*basisvalue17 + new_coeff0_18*basisvalue18 + new_coeff0_19*basisvalue19 + new_coeff0_20*basisvalue20;
    }
    
    // Transform derivatives back to physical element
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        values[row] += transform[row][col]*derivatives[col];
      }
    }
    // Delete pointer to array of derivatives on FIAT element
    delete [] derivatives;
    
    // Delete pointer to array of combinations of derivatives and transform
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      delete [] combinations[row];
      delete [] transform[row];
    }
    
    delete [] combinations;
    delete [] transform;
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis_derivatives() is not yet implemented.");
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // The reference points, direction and weights:
    const static double X[21][1][2] = {{{0, 0}}, {{1, 0}}, {{0, 1}}, {{0.8, 0.2}}, {{0.6, 0.4}}, {{0.4, 0.6}}, {{0.2, 0.8}}, {{0, 0.2}}, {{0, 0.4}}, {{0, 0.6}}, {{0, 0.8}}, {{0.2, 0}}, {{0.4, 0}}, {{0.6, 0}}, {{0.8, 0}}, {{0.2, 0.2}}, {{0.4, 0.2}}, {{0.6, 0.2}}, {{0.2, 0.4}}, {{0.4, 0.4}}, {{0.2, 0.6}}};
    const static double W[21][1] = {{1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}};
    const static double D[21][1][1] = {{{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}};
    
    const double * const * x = c.coordinates;
    double result = 0.0;
    // Iterate over the points:
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0][0] - X[i][0][1];
    const double w1 = X[i][0][0];
    const double w2 = X[i][0][1];
    
    // Compute affine mapping y = F(X)
    double y[2];
    y[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0];
    y[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1];
    
    // Evaluate function at physical points
    double values[1];
    f.evaluate(values, y, c);
    
    // Map function values using appropriate mapping
    // Affine map: Do nothing
    
    // Note that we do not map the weights (yet).
    
    // Take directional components
    for(int k = 0; k < 1; k++)
      result += values[k]*D[i][0][k];
    // Multiply by weights 
    result *= W[i][0];
    
    return result;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate at vertices and use affine mapping
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new poisson2d_5_0_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class poisson2d_5_0_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  poisson2d_5_0_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~poisson2d_5_0_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', 'triangle', 5)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 21;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
      
    // Compute determinant of Jacobian
    const double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Get coordinates and map to the reference (UFC) element
    double x = (element_coordinates[0][1]*element_coordinates[2][0] -\
                element_coordinates[0][0]*element_coordinates[2][1] +\
                J_11*coordinates[0] - J_01*coordinates[1]) / detJ;
    double y = (element_coordinates[1][1]*element_coordinates[0][0] -\
                element_coordinates[1][0]*element_coordinates[0][1] -\
                J_10*coordinates[0] + J_00*coordinates[1]) / detJ;
    
    // Map coordinates to the reference square
    if (std::abs(y - 1.0) < 1e-14)
      x = -1.0;
    else
      x = 2.0 *x/(1.0 - y) - 1.0;
    y = 2.0*y - 1.0;
    
    // Reset values
    *values = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    const double scalings_y_4 = scalings_y_3*(0.5 - 0.5*y);
    const double scalings_y_5 = scalings_y_4*(0.5 - 0.5*y);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    const double psitilde_a_4 = 1.75*x*psitilde_a_3 - 0.75*psitilde_a_2;
    const double psitilde_a_5 = 1.8*x*psitilde_a_4 - 0.8*psitilde_a_3;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_0_4 = 0.0285714285714286*psitilde_bs_0_3 + 1.8*y*psitilde_bs_0_3 - 0.771428571428571*psitilde_bs_0_2;
    const double psitilde_bs_0_5 = 0.0185185185185185*psitilde_bs_0_4 + 1.83333333333333*y*psitilde_bs_0_4 - 0.814814814814815*psitilde_bs_0_3;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_1_3 = 0.285714285714286*psitilde_bs_1_2 + 2*y*psitilde_bs_1_2 - 0.714285714285714*psitilde_bs_1_1;
    const double psitilde_bs_1_4 = 0.178571428571429*psitilde_bs_1_3 + 1.96428571428571*y*psitilde_bs_1_3 - 0.785714285714286*psitilde_bs_1_2;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_2_2 = 1.02040816326531*psitilde_bs_2_1 + 2.57142857142857*y*psitilde_bs_2_1 - 0.551020408163265*psitilde_bs_2_0;
    const double psitilde_bs_2_3 = 0.578703703703704*psitilde_bs_2_2 + 2.29166666666667*y*psitilde_bs_2_2 - 0.712962962962963*psitilde_bs_2_1;
    const double psitilde_bs_3_0 = 1;
    const double psitilde_bs_3_1 = 4.5*y + 3.5;
    const double psitilde_bs_3_2 = 1.51234567901235*psitilde_bs_3_1 + 3.05555555555556*y*psitilde_bs_3_1 - 0.54320987654321*psitilde_bs_3_0;
    const double psitilde_bs_4_0 = 1;
    const double psitilde_bs_4_1 = 5.5*y + 4.5;
    const double psitilde_bs_5_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.707106781186548*psitilde_a_0*scalings_y_0*psitilde_bs_0_0;
    const double basisvalue1 = 1.73205080756888*psitilde_a_1*scalings_y_1*psitilde_bs_1_0;
    const double basisvalue2 = psitilde_a_0*scalings_y_0*psitilde_bs_0_1;
    const double basisvalue3 = 2.73861278752583*psitilde_a_2*scalings_y_2*psitilde_bs_2_0;
    const double basisvalue4 = 2.12132034355964*psitilde_a_1*scalings_y_1*psitilde_bs_1_1;
    const double basisvalue5 = 1.22474487139159*psitilde_a_0*scalings_y_0*psitilde_bs_0_2;
    const double basisvalue6 = 3.74165738677394*psitilde_a_3*scalings_y_3*psitilde_bs_3_0;
    const double basisvalue7 = 3.16227766016838*psitilde_a_2*scalings_y_2*psitilde_bs_2_1;
    const double basisvalue8 = 2.44948974278318*psitilde_a_1*scalings_y_1*psitilde_bs_1_2;
    const double basisvalue9 = 1.4142135623731*psitilde_a_0*scalings_y_0*psitilde_bs_0_3;
    const double basisvalue10 = 4.74341649025257*psitilde_a_4*scalings_y_4*psitilde_bs_4_0;
    const double basisvalue11 = 4.18330013267038*psitilde_a_3*scalings_y_3*psitilde_bs_3_1;
    const double basisvalue12 = 3.53553390593274*psitilde_a_2*scalings_y_2*psitilde_bs_2_2;
    const double basisvalue13 = 2.73861278752583*psitilde_a_1*scalings_y_1*psitilde_bs_1_3;
    const double basisvalue14 = 1.58113883008419*psitilde_a_0*scalings_y_0*psitilde_bs_0_4;
    const double basisvalue15 = 5.74456264653803*psitilde_a_5*scalings_y_5*psitilde_bs_5_0;
    const double basisvalue16 = 5.19615242270663*psitilde_a_4*scalings_y_4*psitilde_bs_4_1;
    const double basisvalue17 = 4.58257569495584*psitilde_a_3*scalings_y_3*psitilde_bs_3_2;
    const double basisvalue18 = 3.87298334620742*psitilde_a_2*scalings_y_2*psitilde_bs_2_3;
    const double basisvalue19 = 3*psitilde_a_1*scalings_y_1*psitilde_bs_1_4;
    const double basisvalue20 = 1.73205080756888*psitilde_a_0*scalings_y_0*psitilde_bs_0_5;
    
    // Table(s) of coefficients
    const static double coefficients0[21][21] = \
    {{0.0154328860973255, -0.00945067404923496, -0.00545634920634919, 0.0301875307266957, 0.0233831607535234, 0.013500274155551, -0.0231997605826757, -0.0196073763651313, -0.0151878084249949, -0.00876868528257126, 0.0213898651255978, 0.0188640878998484, 0.0159430641501296, 0.0123494443881937, 0.00712995504186595, -0.0179891757560038, -0.0162718217101153, -0.0143503978743156, -0.0121282998205249, -0.00939454064454065, -0.00542394057003844},
    {0.0154328860973254, 0.00945067404923495, -0.0054563492063492, 0.0301875307266957, -0.0233831607535234, 0.013500274155551, 0.0231997605826757, -0.0196073763651313, 0.0151878084249949, -0.00876868528257127, 0.0213898651255978, -0.0188640878998484, 0.0159430641501296, -0.0123494443881937, 0.00712995504186593, 0.0179891757560038, -0.0162718217101153, 0.0143503978743156, -0.0121282998205249, 0.00939454064454064, -0.00542394057003842},
    {0.0154328860973254, 0, 0.0109126984126984, 0, 0, 0.0405008224666531, 0, 0, 0, 0.0350747411302851, 0, 0, 0, 0, 0.0356497752093297, 0, 0, 0, 0, 0, 0.0325436434202305},
    {0.0350747411302851, 0.126008987323133, -0.0843253968253968, 0.101882916202598, -0.0286443719230661, 0.00202504112333268, 0.0773325352755857, -0.0261431684868418, 0, 0.00584579018838089, 0.0356497752093296, 0.0125760585998989, -0.0385290716961465, 0.0442521757243607, -0.0297081460077747, 0, 0.0325436434202305, -0.0516614323475361, 0.0582158391385193, -0.0526094276094276, 0.0325436434202305},
    {0.0350747411302851, -0.0329341671412733, 0.121527777777778, -0.0113203240225109, 0.0754106934301129, -0.0222754523566592, 0, 0.104572673947367, -0.101252056166633, 0.0584579018838084, 0, 0.0565922636995452, -0.00930012075424224, -0.0401356942616295, 0.0415914044108846, 0, 0, 0.0516614323475361, -0.101877718492409, 0.118371212121212, -0.0813591085505763},
    {0.0350747411302851, 0.0887790592503889, -0.0892857142857142, 0.0301875307266957, 0.0432588473940183, -0.0594012062844245, 0, 0.0261431684868417, 0.101252056166633, -0.116915803767617, 0, 0, 0.0744009660339381, -0.0308736109704842, -0.0118832584031099, 0, 0, 0, 0.0679184789949393, -0.131523569023569, 0.108478811400768},
    {0.035074741130285, -0.010023442173431, 0.151289682539682, 0, 0.0502737956200753, 0.0931518916733021, 0, 0, 0.0506260280833164, 0.0643036920721893, 0, 0, 0, 0.0720384255977965, -0.0237665168062198, 0, 0, 0, 0, 0.0657617845117845, -0.0813591085505763},
    {0.0350747411302849, -0.126008987323133, -0.0843253968253968, 0.101882916202598, 0.0286443719230662, 0.00202504112333268, -0.0773325352755857, -0.0261431684868418, 0, 0.00584579018838086, 0.0356497752093297, -0.0125760585998989, -0.0385290716961465, -0.0442521757243607, -0.0297081460077747, 0, 0.0325436434202305, 0.0516614323475361, 0.0582158391385193, 0.0526094276094276, 0.0325436434202305},
    {0.0350747411302851, 0.0329341671412733, 0.121527777777778, -0.0113203240225109, -0.075410693430113, -0.0222754523566592, 0, 0.104572673947367, 0.101252056166633, 0.0584579018838084, 0, -0.0565922636995451, -0.00930012075424224, 0.0401356942616295, 0.0415914044108846, 0, 0, -0.0516614323475361, -0.101877718492409, -0.118371212121212, -0.0813591085505763},
    {0.0350747411302851, -0.0887790592503889, -0.0892857142857142, 0.0301875307266957, -0.0432588473940183, -0.0594012062844245, 0, 0.0261431684868417, -0.101252056166633, -0.116915803767617, 0, 0, 0.0744009660339381, 0.0308736109704842, -0.0118832584031099, 0, 0, 0, 0.0679184789949393, 0.131523569023569, 0.108478811400768},
    {0.0350747411302851, 0.010023442173431, 0.151289682539682, 0, -0.0502737956200753, 0.0931518916733021, 0, 0, -0.0506260280833164, 0.0643036920721892, 0, 0, 0, -0.0720384255977965, -0.0237665168062198, 0, 0, 0, 0, -0.0657617845117845, -0.0813591085505762},
    {0.035074741130285, -0.136032429496564, -0.0669642857142857, 0.0369797251402022, 0.0789181675431415, 0.0600762199922021, -0.00773325352755854, -0.0457505448519731, -0.055688630891648, -0.0379976362244755, -0.0641695953767934, -0.012576058599899, 0.017271652829307, 0.0277862498734357, 0.0202015392852868, 0.0899458787800191, 0.0488154651303458, 0.0200905570240418, 0.00242565996410498, -0.00563672438672438, -0.00542394057003844},
    {0.0350747411302852, 0.121713226391662, -0.0322420634920635, -0.0671672558668978, -0.0321518460360948, 0.0276755620188796, 0.139198563496054, 0.0653579212171044, -0.0101252056166633, -0.0292289509419042, 0.0427797302511956, -0.0565922636995451, -0.0332147169794367, 0.00926208329114533, 0.0202015392852867, -0.179891757560038, -0.0325436434202306, 0.0114803182994525, 0.00970263985641986, -0.00187890812890816, -0.00542394057003839},
    {0.035074741130285, -0.121713226391662, -0.0322420634920635, -0.0671672558668978, 0.0321518460360947, 0.0276755620188796, -0.139198563496054, 0.0653579212171043, 0.0101252056166633, -0.0292289509419043, 0.0427797302511956, 0.0565922636995452, -0.0332147169794366, -0.00926208329114533, 0.0202015392852869, 0.179891757560038, -0.0325436434202305, -0.0114803182994525, 0.00970263985641991, 0.00187890812890817, -0.00542394057003844},
    {0.0350747411302851, 0.136032429496564, -0.0669642857142857, 0.0369797251402022, -0.0789181675431415, 0.0600762199922021, 0.00773325352755854, -0.045750544851973, 0.055688630891648, -0.0379976362244755, -0.0641695953767934, 0.0125760585998989, 0.017271652829307, -0.0277862498734358, 0.0202015392852868, -0.0899458787800191, 0.0488154651303457, -0.0200905570240418, 0.00242565996410496, 0.00563672438672439, -0.00542394057003841},
    {0.280597929042281, -0.214788046573521, -0.124007936507937, 0.0905625921800869, 0.116915803767617, 0, 0.154665070551171, 0.0784295054605253, 0.101252056166633, 0.0818410626373319, -0.142599100837319, 0.0251521171997979, -0.0318861283002592, -0.107028518031012, -0.0950660672248791, 0, -0.130174573680922, -0.103322864695072, -0.0291079195692597, 0.0263047138047138, 0.0325436434202305},
    {0.0350747411302848, 0, -0.124007936507937, -0.38489101676537, 0, 0.101252056166633, 0, -0.104572673947367, 0, 0.0467663215070468, 0.213898651255978, 0, 0.140830399992811, 0, -0.095066067224879, 0, 0.195261860521383, 0, -0.0582158391385193, 0, 0.0325436434202305},
    {0.280597929042281, 0.214788046573522, -0.124007936507937, 0.090562592180087, -0.116915803767617, 0, -0.154665070551172, 0.0784295054605253, -0.101252056166633, 0.0818410626373319, -0.142599100837319, -0.0251521171997978, -0.0318861283002592, 0.107028518031012, -0.0950660672248792, 0, -0.130174573680922, 0.103322864695072, -0.0291079195692597, -0.0263047138047138, 0.0325436434202306},
    {0.035074741130285, -0.107394023286761, 0.0620039682539683, 0.0113203240225109, -0.306903984889995, -0.253130140416582, 0, -0.104572673947367, 0, 0.0467663215070468, 0, 0.169776791098635, 0.00930012075424229, 0.126581804978985, 0.172307246845094, 0, 0, 0.154984297042608, 0.101877718492409, -0.0394570707070708, -0.0813591085505764},
    {0.035074741130285, 0.107394023286761, 0.0620039682539682, 0.011320324022511, 0.306903984889994, -0.253130140416582, 0, -0.104572673947367, 0, 0.0467663215070468, 0, -0.169776791098635, 0.00930012075424223, -0.126581804978985, 0.172307246845093, 0, 0, -0.154984297042608, 0.101877718492409, 0.0394570707070707, -0.0813591085505763},
    {0.280597929042281, 0, 0.248015873015873, -0.0603750614533914, 0, 0.13500274155551, 0, -0.0522863369736836, 0, -0.210448446781711, 0, 0, -0.148801932067876, 0, -0.142599100837319, 0, 0, 0, -0.135836957989879, 0, 0.108478811400768}};
    
    // Extract relevant coefficients
    const double coeff0_0 = coefficients0[dof][0];
    const double coeff0_1 = coefficients0[dof][1];
    const double coeff0_2 = coefficients0[dof][2];
    const double coeff0_3 = coefficients0[dof][3];
    const double coeff0_4 = coefficients0[dof][4];
    const double coeff0_5 = coefficients0[dof][5];
    const double coeff0_6 = coefficients0[dof][6];
    const double coeff0_7 = coefficients0[dof][7];
    const double coeff0_8 = coefficients0[dof][8];
    const double coeff0_9 = coefficients0[dof][9];
    const double coeff0_10 = coefficients0[dof][10];
    const double coeff0_11 = coefficients0[dof][11];
    const double coeff0_12 = coefficients0[dof][12];
    const double coeff0_13 = coefficients0[dof][13];
    const double coeff0_14 = coefficients0[dof][14];
    const double coeff0_15 = coefficients0[dof][15];
    const double coeff0_16 = coefficients0[dof][16];
    const double coeff0_17 = coefficients0[dof][17];
    const double coeff0_18 = coefficients0[dof][18];
    const double coeff0_19 = coefficients0[dof][19];
    const double coeff0_20 = coefficients0[dof][20];
    
    // Compute value(s)
    *values = coeff0_0*basisvalue0 + coeff0_1*basisvalue1 + coeff0_2*basisvalue2 + coeff0_3*basisvalue3 + coeff0_4*basisvalue4 + coeff0_5*basisvalue5 + coeff0_6*basisvalue6 + coeff0_7*basisvalue7 + coeff0_8*basisvalue8 + coeff0_9*basisvalue9 + coeff0_10*basisvalue10 + coeff0_11*basisvalue11 + coeff0_12*basisvalue12 + coeff0_13*basisvalue13 + coeff0_14*basisvalue14 + coeff0_15*basisvalue15 + coeff0_16*basisvalue16 + coeff0_17*basisvalue17 + coeff0_18*basisvalue18 + coeff0_19*basisvalue19 + coeff0_20*basisvalue20;
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis() is not yet implemented.");
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
      
    // Compute determinant of Jacobian
    const double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Get coordinates and map to the reference (UFC) element
    double x = (element_coordinates[0][1]*element_coordinates[2][0] -\
                element_coordinates[0][0]*element_coordinates[2][1] +\
                J_11*coordinates[0] - J_01*coordinates[1]) / detJ;
    double y = (element_coordinates[1][1]*element_coordinates[0][0] -\
                element_coordinates[1][0]*element_coordinates[0][1] -\
                J_10*coordinates[0] + J_00*coordinates[1]) / detJ;
    
    // Map coordinates to the reference square
    if (std::abs(y - 1.0) < 1e-14)
      x = -1.0;
    else
      x = 2.0 *x/(1.0 - y) - 1.0;
    y = 2.0*y - 1.0;
    
    // Compute number of derivatives
    unsigned int num_derivatives = 1;
    
    for (unsigned int j = 0; j < n; j++)
      num_derivatives *= 2;
    
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      combinations[j] = new unsigned int [n];
      for (unsigned int k = 0; k < n; k++)
        combinations[j][k] = 0;
    }
        
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] =  {{J_11 / detJ, -J_01 / detJ}, {-J_10 / detJ, J_00 / detJ}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values
    for (unsigned int j = 0; j < 1*num_derivatives; j++)
      values[j] = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    const double scalings_y_4 = scalings_y_3*(0.5 - 0.5*y);
    const double scalings_y_5 = scalings_y_4*(0.5 - 0.5*y);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    const double psitilde_a_4 = 1.75*x*psitilde_a_3 - 0.75*psitilde_a_2;
    const double psitilde_a_5 = 1.8*x*psitilde_a_4 - 0.8*psitilde_a_3;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_0_4 = 0.0285714285714286*psitilde_bs_0_3 + 1.8*y*psitilde_bs_0_3 - 0.771428571428571*psitilde_bs_0_2;
    const double psitilde_bs_0_5 = 0.0185185185185185*psitilde_bs_0_4 + 1.83333333333333*y*psitilde_bs_0_4 - 0.814814814814815*psitilde_bs_0_3;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_1_3 = 0.285714285714286*psitilde_bs_1_2 + 2*y*psitilde_bs_1_2 - 0.714285714285714*psitilde_bs_1_1;
    const double psitilde_bs_1_4 = 0.178571428571429*psitilde_bs_1_3 + 1.96428571428571*y*psitilde_bs_1_3 - 0.785714285714286*psitilde_bs_1_2;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_2_2 = 1.02040816326531*psitilde_bs_2_1 + 2.57142857142857*y*psitilde_bs_2_1 - 0.551020408163265*psitilde_bs_2_0;
    const double psitilde_bs_2_3 = 0.578703703703704*psitilde_bs_2_2 + 2.29166666666667*y*psitilde_bs_2_2 - 0.712962962962963*psitilde_bs_2_1;
    const double psitilde_bs_3_0 = 1;
    const double psitilde_bs_3_1 = 4.5*y + 3.5;
    const double psitilde_bs_3_2 = 1.51234567901235*psitilde_bs_3_1 + 3.05555555555556*y*psitilde_bs_3_1 - 0.54320987654321*psitilde_bs_3_0;
    const double psitilde_bs_4_0 = 1;
    const double psitilde_bs_4_1 = 5.5*y + 4.5;
    const double psitilde_bs_5_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.707106781186548*psitilde_a_0*scalings_y_0*psitilde_bs_0_0;
    const double basisvalue1 = 1.73205080756888*psitilde_a_1*scalings_y_1*psitilde_bs_1_0;
    const double basisvalue2 = psitilde_a_0*scalings_y_0*psitilde_bs_0_1;
    const double basisvalue3 = 2.73861278752583*psitilde_a_2*scalings_y_2*psitilde_bs_2_0;
    const double basisvalue4 = 2.12132034355964*psitilde_a_1*scalings_y_1*psitilde_bs_1_1;
    const double basisvalue5 = 1.22474487139159*psitilde_a_0*scalings_y_0*psitilde_bs_0_2;
    const double basisvalue6 = 3.74165738677394*psitilde_a_3*scalings_y_3*psitilde_bs_3_0;
    const double basisvalue7 = 3.16227766016838*psitilde_a_2*scalings_y_2*psitilde_bs_2_1;
    const double basisvalue8 = 2.44948974278318*psitilde_a_1*scalings_y_1*psitilde_bs_1_2;
    const double basisvalue9 = 1.4142135623731*psitilde_a_0*scalings_y_0*psitilde_bs_0_3;
    const double basisvalue10 = 4.74341649025257*psitilde_a_4*scalings_y_4*psitilde_bs_4_0;
    const double basisvalue11 = 4.18330013267038*psitilde_a_3*scalings_y_3*psitilde_bs_3_1;
    const double basisvalue12 = 3.53553390593274*psitilde_a_2*scalings_y_2*psitilde_bs_2_2;
    const double basisvalue13 = 2.73861278752583*psitilde_a_1*scalings_y_1*psitilde_bs_1_3;
    const double basisvalue14 = 1.58113883008419*psitilde_a_0*scalings_y_0*psitilde_bs_0_4;
    const double basisvalue15 = 5.74456264653803*psitilde_a_5*scalings_y_5*psitilde_bs_5_0;
    const double basisvalue16 = 5.19615242270663*psitilde_a_4*scalings_y_4*psitilde_bs_4_1;
    const double basisvalue17 = 4.58257569495584*psitilde_a_3*scalings_y_3*psitilde_bs_3_2;
    const double basisvalue18 = 3.87298334620742*psitilde_a_2*scalings_y_2*psitilde_bs_2_3;
    const double basisvalue19 = 3*psitilde_a_1*scalings_y_1*psitilde_bs_1_4;
    const double basisvalue20 = 1.73205080756888*psitilde_a_0*scalings_y_0*psitilde_bs_0_5;
    
    // Table(s) of coefficients
    const static double coefficients0[21][21] = \
    {{0.0154328860973255, -0.00945067404923496, -0.00545634920634919, 0.0301875307266957, 0.0233831607535234, 0.013500274155551, -0.0231997605826757, -0.0196073763651313, -0.0151878084249949, -0.00876868528257126, 0.0213898651255978, 0.0188640878998484, 0.0159430641501296, 0.0123494443881937, 0.00712995504186595, -0.0179891757560038, -0.0162718217101153, -0.0143503978743156, -0.0121282998205249, -0.00939454064454065, -0.00542394057003844},
    {0.0154328860973254, 0.00945067404923495, -0.0054563492063492, 0.0301875307266957, -0.0233831607535234, 0.013500274155551, 0.0231997605826757, -0.0196073763651313, 0.0151878084249949, -0.00876868528257127, 0.0213898651255978, -0.0188640878998484, 0.0159430641501296, -0.0123494443881937, 0.00712995504186593, 0.0179891757560038, -0.0162718217101153, 0.0143503978743156, -0.0121282998205249, 0.00939454064454064, -0.00542394057003842},
    {0.0154328860973254, 0, 0.0109126984126984, 0, 0, 0.0405008224666531, 0, 0, 0, 0.0350747411302851, 0, 0, 0, 0, 0.0356497752093297, 0, 0, 0, 0, 0, 0.0325436434202305},
    {0.0350747411302851, 0.126008987323133, -0.0843253968253968, 0.101882916202598, -0.0286443719230661, 0.00202504112333268, 0.0773325352755857, -0.0261431684868418, 0, 0.00584579018838089, 0.0356497752093296, 0.0125760585998989, -0.0385290716961465, 0.0442521757243607, -0.0297081460077747, 0, 0.0325436434202305, -0.0516614323475361, 0.0582158391385193, -0.0526094276094276, 0.0325436434202305},
    {0.0350747411302851, -0.0329341671412733, 0.121527777777778, -0.0113203240225109, 0.0754106934301129, -0.0222754523566592, 0, 0.104572673947367, -0.101252056166633, 0.0584579018838084, 0, 0.0565922636995452, -0.00930012075424224, -0.0401356942616295, 0.0415914044108846, 0, 0, 0.0516614323475361, -0.101877718492409, 0.118371212121212, -0.0813591085505763},
    {0.0350747411302851, 0.0887790592503889, -0.0892857142857142, 0.0301875307266957, 0.0432588473940183, -0.0594012062844245, 0, 0.0261431684868417, 0.101252056166633, -0.116915803767617, 0, 0, 0.0744009660339381, -0.0308736109704842, -0.0118832584031099, 0, 0, 0, 0.0679184789949393, -0.131523569023569, 0.108478811400768},
    {0.035074741130285, -0.010023442173431, 0.151289682539682, 0, 0.0502737956200753, 0.0931518916733021, 0, 0, 0.0506260280833164, 0.0643036920721893, 0, 0, 0, 0.0720384255977965, -0.0237665168062198, 0, 0, 0, 0, 0.0657617845117845, -0.0813591085505763},
    {0.0350747411302849, -0.126008987323133, -0.0843253968253968, 0.101882916202598, 0.0286443719230662, 0.00202504112333268, -0.0773325352755857, -0.0261431684868418, 0, 0.00584579018838086, 0.0356497752093297, -0.0125760585998989, -0.0385290716961465, -0.0442521757243607, -0.0297081460077747, 0, 0.0325436434202305, 0.0516614323475361, 0.0582158391385193, 0.0526094276094276, 0.0325436434202305},
    {0.0350747411302851, 0.0329341671412733, 0.121527777777778, -0.0113203240225109, -0.075410693430113, -0.0222754523566592, 0, 0.104572673947367, 0.101252056166633, 0.0584579018838084, 0, -0.0565922636995451, -0.00930012075424224, 0.0401356942616295, 0.0415914044108846, 0, 0, -0.0516614323475361, -0.101877718492409, -0.118371212121212, -0.0813591085505763},
    {0.0350747411302851, -0.0887790592503889, -0.0892857142857142, 0.0301875307266957, -0.0432588473940183, -0.0594012062844245, 0, 0.0261431684868417, -0.101252056166633, -0.116915803767617, 0, 0, 0.0744009660339381, 0.0308736109704842, -0.0118832584031099, 0, 0, 0, 0.0679184789949393, 0.131523569023569, 0.108478811400768},
    {0.0350747411302851, 0.010023442173431, 0.151289682539682, 0, -0.0502737956200753, 0.0931518916733021, 0, 0, -0.0506260280833164, 0.0643036920721892, 0, 0, 0, -0.0720384255977965, -0.0237665168062198, 0, 0, 0, 0, -0.0657617845117845, -0.0813591085505762},
    {0.035074741130285, -0.136032429496564, -0.0669642857142857, 0.0369797251402022, 0.0789181675431415, 0.0600762199922021, -0.00773325352755854, -0.0457505448519731, -0.055688630891648, -0.0379976362244755, -0.0641695953767934, -0.012576058599899, 0.017271652829307, 0.0277862498734357, 0.0202015392852868, 0.0899458787800191, 0.0488154651303458, 0.0200905570240418, 0.00242565996410498, -0.00563672438672438, -0.00542394057003844},
    {0.0350747411302852, 0.121713226391662, -0.0322420634920635, -0.0671672558668978, -0.0321518460360948, 0.0276755620188796, 0.139198563496054, 0.0653579212171044, -0.0101252056166633, -0.0292289509419042, 0.0427797302511956, -0.0565922636995451, -0.0332147169794367, 0.00926208329114533, 0.0202015392852867, -0.179891757560038, -0.0325436434202306, 0.0114803182994525, 0.00970263985641986, -0.00187890812890816, -0.00542394057003839},
    {0.035074741130285, -0.121713226391662, -0.0322420634920635, -0.0671672558668978, 0.0321518460360947, 0.0276755620188796, -0.139198563496054, 0.0653579212171043, 0.0101252056166633, -0.0292289509419043, 0.0427797302511956, 0.0565922636995452, -0.0332147169794366, -0.00926208329114533, 0.0202015392852869, 0.179891757560038, -0.0325436434202305, -0.0114803182994525, 0.00970263985641991, 0.00187890812890817, -0.00542394057003844},
    {0.0350747411302851, 0.136032429496564, -0.0669642857142857, 0.0369797251402022, -0.0789181675431415, 0.0600762199922021, 0.00773325352755854, -0.045750544851973, 0.055688630891648, -0.0379976362244755, -0.0641695953767934, 0.0125760585998989, 0.017271652829307, -0.0277862498734358, 0.0202015392852868, -0.0899458787800191, 0.0488154651303457, -0.0200905570240418, 0.00242565996410496, 0.00563672438672439, -0.00542394057003841},
    {0.280597929042281, -0.214788046573521, -0.124007936507937, 0.0905625921800869, 0.116915803767617, 0, 0.154665070551171, 0.0784295054605253, 0.101252056166633, 0.0818410626373319, -0.142599100837319, 0.0251521171997979, -0.0318861283002592, -0.107028518031012, -0.0950660672248791, 0, -0.130174573680922, -0.103322864695072, -0.0291079195692597, 0.0263047138047138, 0.0325436434202305},
    {0.0350747411302848, 0, -0.124007936507937, -0.38489101676537, 0, 0.101252056166633, 0, -0.104572673947367, 0, 0.0467663215070468, 0.213898651255978, 0, 0.140830399992811, 0, -0.095066067224879, 0, 0.195261860521383, 0, -0.0582158391385193, 0, 0.0325436434202305},
    {0.280597929042281, 0.214788046573522, -0.124007936507937, 0.090562592180087, -0.116915803767617, 0, -0.154665070551172, 0.0784295054605253, -0.101252056166633, 0.0818410626373319, -0.142599100837319, -0.0251521171997978, -0.0318861283002592, 0.107028518031012, -0.0950660672248792, 0, -0.130174573680922, 0.103322864695072, -0.0291079195692597, -0.0263047138047138, 0.0325436434202306},
    {0.035074741130285, -0.107394023286761, 0.0620039682539683, 0.0113203240225109, -0.306903984889995, -0.253130140416582, 0, -0.104572673947367, 0, 0.0467663215070468, 0, 0.169776791098635, 0.00930012075424229, 0.126581804978985, 0.172307246845094, 0, 0, 0.154984297042608, 0.101877718492409, -0.0394570707070708, -0.0813591085505764},
    {0.035074741130285, 0.107394023286761, 0.0620039682539682, 0.011320324022511, 0.306903984889994, -0.253130140416582, 0, -0.104572673947367, 0, 0.0467663215070468, 0, -0.169776791098635, 0.00930012075424223, -0.126581804978985, 0.172307246845093, 0, 0, -0.154984297042608, 0.101877718492409, 0.0394570707070707, -0.0813591085505763},
    {0.280597929042281, 0, 0.248015873015873, -0.0603750614533914, 0, 0.13500274155551, 0, -0.0522863369736836, 0, -0.210448446781711, 0, 0, -0.148801932067876, 0, -0.142599100837319, 0, 0, 0, -0.135836957989879, 0, 0.108478811400768}};
    
    // Interesting (new) part
    // Tables of derivatives of the polynomial base (transpose)
    const static double dmats0[21][21] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.89897948556636, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 9.48683298050514, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.00000000000001, 0, 7.07106781186549, 0, 0, 0, 0, 0, 0, 1.16417292472804e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.29150262212918, 0, -2.99332590941915, 13.6626010212795, 0, 0.61101009266078, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 4.38178046004133, 0, 0, 12.5219806739988, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.46410161513776, 0, 7.83836717690617, 0, 0, 8.4, 0, 1.10537384317744e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 10.9544511501033, 0, 0, -3.83325938999965, 0, 17.7482393492989, 0, 0.553283335172474, 0, 0, 0, 0, 0, 0, 1.27307810205487e-14, 0, 0, 0, 0, 0},
    {4.7328638264797, 0, 3.34664010613632, 4.36435780471985, 0, -5.07468037933237, 0, 17.0084012854152, 0, 1.52127765851135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-2.33146835171283e-14, 2.44948974278318, 0, 0, 9.14285714285714, 0, 0, 0, 14.8461497791618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.09838667696593, 0, 7.66811580507233, 0, 0, 10.733126291999, 0, 1.33103889053491e-14, 0, 9.2951600308978, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.41602560309064, 0, -4.37680963545758, 15.7321327225523, 0, 2.01017818278147, 0, -4.03686713879669, 0, -0.51581196219913, 21.799082549502, 0, 0.451335466924227, 0, 0.0576695305542354, 0, -1.43860401382688e-14, 0, 0, 0, 0},
    {0, 6.85714285714287, -1.24344978758018e-14, 0, 9.97292252418866, 0, 4.32049379893858, 0, -7.27309832077592, -1.77635683940025e-14, 0, 21.2540192277445, 0, 1.49078803979367, 0, 0, 0, 0, 0, 0, 0},
    {4.32049379893859, 0, 5.93552661441899, 1.79284291400158, -1.09007371339341e-14, -0.320713490294921, 0, 9.20087412456474, 1.77508364925071e-14, -5.96639619853425, 0, 0, 19.8022632451351, 0, 2.53024038425529, 0, 0, 0, 0, 0, 0},
    {0, 1.53330375599988, 1.06581410364015e-14, 0, 6.3379324511312, 0, 0, 0, 13.5526185435788, 1.06581410364015e-14, 0, 0, 0, 16.6675169851115, 0, 0, 0, 0, 0, 2.04281036531029e-14, 0},
    {2.82842712474619, 0, 7.31428571428572, 0, 0, 11.337638238025, 0, 1.43431765232015e-14, 0, 12.9299525702683, 0, 0, 0, 0, 9.93858693195776, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    const static double dmats1[21][21] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.44948974278318, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.24264068711929, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.58198889747161, 4.74341649025257, -0.912870929175276, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.00000000000001, 6.12372435695794, 3.53553390593274, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-2.3094010767585, 0, 8.16496580927726, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330392, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.23606797749979, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823012, 0, -1.09822442744009e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.73205080756887, -5.09116882454314, 3.91918358845308, 0, 9.69948452238571, 4.20000000000001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5, 0, -2.8284271247462, 0, 0, 12.1243556529821, 0, 0, 0, -2.62767238523587e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.21337401931543e-14},
    {2.68328157299975, 5.47722557505167, -1.89736659610103, 7.42307488958091, -1.91662969499983, 0.663940002206988, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499897, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.36643191323984, 2.8982753492379, 1.67332005306815, 2.18217890235993, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270761, -2.1957751641342, 0.760638829255669, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2, 1.2247448713916, 3.53553390593274, -7.37711113563318, 4.57142857142857, 1.64957219768464, 0, 11.4997781699989, 7.42307488958092, -2.57142857142858, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.54919333848295, 6.6407830863536, 3.83405790253617, 0, -6.19677335393187, 5.3665631459995, 0, 1.19249726392026e-14, 13.4164078649988, 4.64758001544891, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-3.57770876399968, 0, 8.85437744847148, 0, 0, -3.09838667696593, 0, 0, 0, 16.0996894379985, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.70801280154532, 5.68564249775212, -2.18840481772878, 7.86606636127615, -2.61129805863299, 1.00508909139074, 9.55297122675765, -2.01843356939834, 0.670059394260484, -0.257905981099562, 10.899541274751, -1.06805465250648, 0.225667733462113, -0.0749149177264377, 0.0288347652771174, 0, 0, 0, 0, 0, 0},
    {2.44948974278318, 3.42857142857144, 0.989743318610785, 3.04933917230523, 4.98646126209433, -2.72741187029097, 2.1602468994693, 8.34624849531682, -3.63654916038796, 1.51635079315149, 12.0498962651137, 10.6270096138723, -2.24536559755125, 0.745394019896834, -0.286902292026514, 0, 0, 0, 0, 0, 0},
    {2.16024689946929, 1.81422947044429, 2.96776330720949, 0.896421457000794, 5.41604758366942, -0.160356745147461, -9.52579344415681, 4.60043706228237, 5.3452248382485, -2.98319809926713, 0, 13.3887736279041, 9.90113162256757, -3.28687867566959, 1.26512019212764, 0, 0, 0, 0, 0, 0},
    {1.82574185835055, 0.766651877999946, 3.83609779052924, 8.6368042559214, 3.1689662255656, 3.65920700676626, 0, -8.74817765279707, 6.77630927178941, 0.521640530957285, 0, 0, 15.0623703313921, 8.33375849255573, -3.20766513935893, 0, 0, 0, 0, 1.33203386568115e-14, 0},
    {1.41421356237312, -6.73025456655334, 3.65714285714287, 0, 9.4550278170087, 5.66881911901249, 0, 1.73231507205905e-14, -6.99854212223763, 6.46497628513415, 0, 0, 0, 17.2141375215909, 4.96929346597888, 0, 0, 0, 0, 1.4597502674923e-14, 0},
    {5.7154760664941, 0, -4.61880215351699, 0, 0, 12.7279220613579, 0, 1.08255872864164e-14, 0, -3.26598632371089, 0, 0, 0, 0, 20.0831604418561, 0, 0, 0, 0, 0, 0}};
    
    // Compute reference derivatives
    // Declare pointer to array of derivatives on FIAT element
    double *derivatives = new double [num_derivatives];
    
    // Declare coefficients
    double coeff0_0 = 0;
    double coeff0_1 = 0;
    double coeff0_2 = 0;
    double coeff0_3 = 0;
    double coeff0_4 = 0;
    double coeff0_5 = 0;
    double coeff0_6 = 0;
    double coeff0_7 = 0;
    double coeff0_8 = 0;
    double coeff0_9 = 0;
    double coeff0_10 = 0;
    double coeff0_11 = 0;
    double coeff0_12 = 0;
    double coeff0_13 = 0;
    double coeff0_14 = 0;
    double coeff0_15 = 0;
    double coeff0_16 = 0;
    double coeff0_17 = 0;
    double coeff0_18 = 0;
    double coeff0_19 = 0;
    double coeff0_20 = 0;
    
    // Declare new coefficients
    double new_coeff0_0 = 0;
    double new_coeff0_1 = 0;
    double new_coeff0_2 = 0;
    double new_coeff0_3 = 0;
    double new_coeff0_4 = 0;
    double new_coeff0_5 = 0;
    double new_coeff0_6 = 0;
    double new_coeff0_7 = 0;
    double new_coeff0_8 = 0;
    double new_coeff0_9 = 0;
    double new_coeff0_10 = 0;
    double new_coeff0_11 = 0;
    double new_coeff0_12 = 0;
    double new_coeff0_13 = 0;
    double new_coeff0_14 = 0;
    double new_coeff0_15 = 0;
    double new_coeff0_16 = 0;
    double new_coeff0_17 = 0;
    double new_coeff0_18 = 0;
    double new_coeff0_19 = 0;
    double new_coeff0_20 = 0;
    
    // Loop possible derivatives
    for (unsigned int deriv_num = 0; deriv_num < num_derivatives; deriv_num++)
    {
      // Get values from coefficients array
      new_coeff0_0 = coefficients0[dof][0];
      new_coeff0_1 = coefficients0[dof][1];
      new_coeff0_2 = coefficients0[dof][2];
      new_coeff0_3 = coefficients0[dof][3];
      new_coeff0_4 = coefficients0[dof][4];
      new_coeff0_5 = coefficients0[dof][5];
      new_coeff0_6 = coefficients0[dof][6];
      new_coeff0_7 = coefficients0[dof][7];
      new_coeff0_8 = coefficients0[dof][8];
      new_coeff0_9 = coefficients0[dof][9];
      new_coeff0_10 = coefficients0[dof][10];
      new_coeff0_11 = coefficients0[dof][11];
      new_coeff0_12 = coefficients0[dof][12];
      new_coeff0_13 = coefficients0[dof][13];
      new_coeff0_14 = coefficients0[dof][14];
      new_coeff0_15 = coefficients0[dof][15];
      new_coeff0_16 = coefficients0[dof][16];
      new_coeff0_17 = coefficients0[dof][17];
      new_coeff0_18 = coefficients0[dof][18];
      new_coeff0_19 = coefficients0[dof][19];
      new_coeff0_20 = coefficients0[dof][20];
    
      // Loop derivative order
      for (unsigned int j = 0; j < n; j++)
      {
        // Update old coefficients
        coeff0_0 = new_coeff0_0;
        coeff0_1 = new_coeff0_1;
        coeff0_2 = new_coeff0_2;
        coeff0_3 = new_coeff0_3;
        coeff0_4 = new_coeff0_4;
        coeff0_5 = new_coeff0_5;
        coeff0_6 = new_coeff0_6;
        coeff0_7 = new_coeff0_7;
        coeff0_8 = new_coeff0_8;
        coeff0_9 = new_coeff0_9;
        coeff0_10 = new_coeff0_10;
        coeff0_11 = new_coeff0_11;
        coeff0_12 = new_coeff0_12;
        coeff0_13 = new_coeff0_13;
        coeff0_14 = new_coeff0_14;
        coeff0_15 = new_coeff0_15;
        coeff0_16 = new_coeff0_16;
        coeff0_17 = new_coeff0_17;
        coeff0_18 = new_coeff0_18;
        coeff0_19 = new_coeff0_19;
        coeff0_20 = new_coeff0_20;
    
        if(combinations[deriv_num][j] == 0)
        {
          new_coeff0_0 = coeff0_0*dmats0[0][0] + coeff0_1*dmats0[1][0] + coeff0_2*dmats0[2][0] + coeff0_3*dmats0[3][0] + coeff0_4*dmats0[4][0] + coeff0_5*dmats0[5][0] + coeff0_6*dmats0[6][0] + coeff0_7*dmats0[7][0] + coeff0_8*dmats0[8][0] + coeff0_9*dmats0[9][0] + coeff0_10*dmats0[10][0] + coeff0_11*dmats0[11][0] + coeff0_12*dmats0[12][0] + coeff0_13*dmats0[13][0] + coeff0_14*dmats0[14][0] + coeff0_15*dmats0[15][0] + coeff0_16*dmats0[16][0] + coeff0_17*dmats0[17][0] + coeff0_18*dmats0[18][0] + coeff0_19*dmats0[19][0] + coeff0_20*dmats0[20][0];
          new_coeff0_1 = coeff0_0*dmats0[0][1] + coeff0_1*dmats0[1][1] + coeff0_2*dmats0[2][1] + coeff0_3*dmats0[3][1] + coeff0_4*dmats0[4][1] + coeff0_5*dmats0[5][1] + coeff0_6*dmats0[6][1] + coeff0_7*dmats0[7][1] + coeff0_8*dmats0[8][1] + coeff0_9*dmats0[9][1] + coeff0_10*dmats0[10][1] + coeff0_11*dmats0[11][1] + coeff0_12*dmats0[12][1] + coeff0_13*dmats0[13][1] + coeff0_14*dmats0[14][1] + coeff0_15*dmats0[15][1] + coeff0_16*dmats0[16][1] + coeff0_17*dmats0[17][1] + coeff0_18*dmats0[18][1] + coeff0_19*dmats0[19][1] + coeff0_20*dmats0[20][1];
          new_coeff0_2 = coeff0_0*dmats0[0][2] + coeff0_1*dmats0[1][2] + coeff0_2*dmats0[2][2] + coeff0_3*dmats0[3][2] + coeff0_4*dmats0[4][2] + coeff0_5*dmats0[5][2] + coeff0_6*dmats0[6][2] + coeff0_7*dmats0[7][2] + coeff0_8*dmats0[8][2] + coeff0_9*dmats0[9][2] + coeff0_10*dmats0[10][2] + coeff0_11*dmats0[11][2] + coeff0_12*dmats0[12][2] + coeff0_13*dmats0[13][2] + coeff0_14*dmats0[14][2] + coeff0_15*dmats0[15][2] + coeff0_16*dmats0[16][2] + coeff0_17*dmats0[17][2] + coeff0_18*dmats0[18][2] + coeff0_19*dmats0[19][2] + coeff0_20*dmats0[20][2];
          new_coeff0_3 = coeff0_0*dmats0[0][3] + coeff0_1*dmats0[1][3] + coeff0_2*dmats0[2][3] + coeff0_3*dmats0[3][3] + coeff0_4*dmats0[4][3] + coeff0_5*dmats0[5][3] + coeff0_6*dmats0[6][3] + coeff0_7*dmats0[7][3] + coeff0_8*dmats0[8][3] + coeff0_9*dmats0[9][3] + coeff0_10*dmats0[10][3] + coeff0_11*dmats0[11][3] + coeff0_12*dmats0[12][3] + coeff0_13*dmats0[13][3] + coeff0_14*dmats0[14][3] + coeff0_15*dmats0[15][3] + coeff0_16*dmats0[16][3] + coeff0_17*dmats0[17][3] + coeff0_18*dmats0[18][3] + coeff0_19*dmats0[19][3] + coeff0_20*dmats0[20][3];
          new_coeff0_4 = coeff0_0*dmats0[0][4] + coeff0_1*dmats0[1][4] + coeff0_2*dmats0[2][4] + coeff0_3*dmats0[3][4] + coeff0_4*dmats0[4][4] + coeff0_5*dmats0[5][4] + coeff0_6*dmats0[6][4] + coeff0_7*dmats0[7][4] + coeff0_8*dmats0[8][4] + coeff0_9*dmats0[9][4] + coeff0_10*dmats0[10][4] + coeff0_11*dmats0[11][4] + coeff0_12*dmats0[12][4] + coeff0_13*dmats0[13][4] + coeff0_14*dmats0[14][4] + coeff0_15*dmats0[15][4] + coeff0_16*dmats0[16][4] + coeff0_17*dmats0[17][4] + coeff0_18*dmats0[18][4] + coeff0_19*dmats0[19][4] + coeff0_20*dmats0[20][4];
          new_coeff0_5 = coeff0_0*dmats0[0][5] + coeff0_1*dmats0[1][5] + coeff0_2*dmats0[2][5] + coeff0_3*dmats0[3][5] + coeff0_4*dmats0[4][5] + coeff0_5*dmats0[5][5] + coeff0_6*dmats0[6][5] + coeff0_7*dmats0[7][5] + coeff0_8*dmats0[8][5] + coeff0_9*dmats0[9][5] + coeff0_10*dmats0[10][5] + coeff0_11*dmats0[11][5] + coeff0_12*dmats0[12][5] + coeff0_13*dmats0[13][5] + coeff0_14*dmats0[14][5] + coeff0_15*dmats0[15][5] + coeff0_16*dmats0[16][5] + coeff0_17*dmats0[17][5] + coeff0_18*dmats0[18][5] + coeff0_19*dmats0[19][5] + coeff0_20*dmats0[20][5];
          new_coeff0_6 = coeff0_0*dmats0[0][6] + coeff0_1*dmats0[1][6] + coeff0_2*dmats0[2][6] + coeff0_3*dmats0[3][6] + coeff0_4*dmats0[4][6] + coeff0_5*dmats0[5][6] + coeff0_6*dmats0[6][6] + coeff0_7*dmats0[7][6] + coeff0_8*dmats0[8][6] + coeff0_9*dmats0[9][6] + coeff0_10*dmats0[10][6] + coeff0_11*dmats0[11][6] + coeff0_12*dmats0[12][6] + coeff0_13*dmats0[13][6] + coeff0_14*dmats0[14][6] + coeff0_15*dmats0[15][6] + coeff0_16*dmats0[16][6] + coeff0_17*dmats0[17][6] + coeff0_18*dmats0[18][6] + coeff0_19*dmats0[19][6] + coeff0_20*dmats0[20][6];
          new_coeff0_7 = coeff0_0*dmats0[0][7] + coeff0_1*dmats0[1][7] + coeff0_2*dmats0[2][7] + coeff0_3*dmats0[3][7] + coeff0_4*dmats0[4][7] + coeff0_5*dmats0[5][7] + coeff0_6*dmats0[6][7] + coeff0_7*dmats0[7][7] + coeff0_8*dmats0[8][7] + coeff0_9*dmats0[9][7] + coeff0_10*dmats0[10][7] + coeff0_11*dmats0[11][7] + coeff0_12*dmats0[12][7] + coeff0_13*dmats0[13][7] + coeff0_14*dmats0[14][7] + coeff0_15*dmats0[15][7] + coeff0_16*dmats0[16][7] + coeff0_17*dmats0[17][7] + coeff0_18*dmats0[18][7] + coeff0_19*dmats0[19][7] + coeff0_20*dmats0[20][7];
          new_coeff0_8 = coeff0_0*dmats0[0][8] + coeff0_1*dmats0[1][8] + coeff0_2*dmats0[2][8] + coeff0_3*dmats0[3][8] + coeff0_4*dmats0[4][8] + coeff0_5*dmats0[5][8] + coeff0_6*dmats0[6][8] + coeff0_7*dmats0[7][8] + coeff0_8*dmats0[8][8] + coeff0_9*dmats0[9][8] + coeff0_10*dmats0[10][8] + coeff0_11*dmats0[11][8] + coeff0_12*dmats0[12][8] + coeff0_13*dmats0[13][8] + coeff0_14*dmats0[14][8] + coeff0_15*dmats0[15][8] + coeff0_16*dmats0[16][8] + coeff0_17*dmats0[17][8] + coeff0_18*dmats0[18][8] + coeff0_19*dmats0[19][8] + coeff0_20*dmats0[20][8];
          new_coeff0_9 = coeff0_0*dmats0[0][9] + coeff0_1*dmats0[1][9] + coeff0_2*dmats0[2][9] + coeff0_3*dmats0[3][9] + coeff0_4*dmats0[4][9] + coeff0_5*dmats0[5][9] + coeff0_6*dmats0[6][9] + coeff0_7*dmats0[7][9] + coeff0_8*dmats0[8][9] + coeff0_9*dmats0[9][9] + coeff0_10*dmats0[10][9] + coeff0_11*dmats0[11][9] + coeff0_12*dmats0[12][9] + coeff0_13*dmats0[13][9] + coeff0_14*dmats0[14][9] + coeff0_15*dmats0[15][9] + coeff0_16*dmats0[16][9] + coeff0_17*dmats0[17][9] + coeff0_18*dmats0[18][9] + coeff0_19*dmats0[19][9] + coeff0_20*dmats0[20][9];
          new_coeff0_10 = coeff0_0*dmats0[0][10] + coeff0_1*dmats0[1][10] + coeff0_2*dmats0[2][10] + coeff0_3*dmats0[3][10] + coeff0_4*dmats0[4][10] + coeff0_5*dmats0[5][10] + coeff0_6*dmats0[6][10] + coeff0_7*dmats0[7][10] + coeff0_8*dmats0[8][10] + coeff0_9*dmats0[9][10] + coeff0_10*dmats0[10][10] + coeff0_11*dmats0[11][10] + coeff0_12*dmats0[12][10] + coeff0_13*dmats0[13][10] + coeff0_14*dmats0[14][10] + coeff0_15*dmats0[15][10] + coeff0_16*dmats0[16][10] + coeff0_17*dmats0[17][10] + coeff0_18*dmats0[18][10] + coeff0_19*dmats0[19][10] + coeff0_20*dmats0[20][10];
          new_coeff0_11 = coeff0_0*dmats0[0][11] + coeff0_1*dmats0[1][11] + coeff0_2*dmats0[2][11] + coeff0_3*dmats0[3][11] + coeff0_4*dmats0[4][11] + coeff0_5*dmats0[5][11] + coeff0_6*dmats0[6][11] + coeff0_7*dmats0[7][11] + coeff0_8*dmats0[8][11] + coeff0_9*dmats0[9][11] + coeff0_10*dmats0[10][11] + coeff0_11*dmats0[11][11] + coeff0_12*dmats0[12][11] + coeff0_13*dmats0[13][11] + coeff0_14*dmats0[14][11] + coeff0_15*dmats0[15][11] + coeff0_16*dmats0[16][11] + coeff0_17*dmats0[17][11] + coeff0_18*dmats0[18][11] + coeff0_19*dmats0[19][11] + coeff0_20*dmats0[20][11];
          new_coeff0_12 = coeff0_0*dmats0[0][12] + coeff0_1*dmats0[1][12] + coeff0_2*dmats0[2][12] + coeff0_3*dmats0[3][12] + coeff0_4*dmats0[4][12] + coeff0_5*dmats0[5][12] + coeff0_6*dmats0[6][12] + coeff0_7*dmats0[7][12] + coeff0_8*dmats0[8][12] + coeff0_9*dmats0[9][12] + coeff0_10*dmats0[10][12] + coeff0_11*dmats0[11][12] + coeff0_12*dmats0[12][12] + coeff0_13*dmats0[13][12] + coeff0_14*dmats0[14][12] + coeff0_15*dmats0[15][12] + coeff0_16*dmats0[16][12] + coeff0_17*dmats0[17][12] + coeff0_18*dmats0[18][12] + coeff0_19*dmats0[19][12] + coeff0_20*dmats0[20][12];
          new_coeff0_13 = coeff0_0*dmats0[0][13] + coeff0_1*dmats0[1][13] + coeff0_2*dmats0[2][13] + coeff0_3*dmats0[3][13] + coeff0_4*dmats0[4][13] + coeff0_5*dmats0[5][13] + coeff0_6*dmats0[6][13] + coeff0_7*dmats0[7][13] + coeff0_8*dmats0[8][13] + coeff0_9*dmats0[9][13] + coeff0_10*dmats0[10][13] + coeff0_11*dmats0[11][13] + coeff0_12*dmats0[12][13] + coeff0_13*dmats0[13][13] + coeff0_14*dmats0[14][13] + coeff0_15*dmats0[15][13] + coeff0_16*dmats0[16][13] + coeff0_17*dmats0[17][13] + coeff0_18*dmats0[18][13] + coeff0_19*dmats0[19][13] + coeff0_20*dmats0[20][13];
          new_coeff0_14 = coeff0_0*dmats0[0][14] + coeff0_1*dmats0[1][14] + coeff0_2*dmats0[2][14] + coeff0_3*dmats0[3][14] + coeff0_4*dmats0[4][14] + coeff0_5*dmats0[5][14] + coeff0_6*dmats0[6][14] + coeff0_7*dmats0[7][14] + coeff0_8*dmats0[8][14] + coeff0_9*dmats0[9][14] + coeff0_10*dmats0[10][14] + coeff0_11*dmats0[11][14] + coeff0_12*dmats0[12][14] + coeff0_13*dmats0[13][14] + coeff0_14*dmats0[14][14] + coeff0_15*dmats0[15][14] + coeff0_16*dmats0[16][14] + coeff0_17*dmats0[17][14] + coeff0_18*dmats0[18][14] + coeff0_19*dmats0[19][14] + coeff0_20*dmats0[20][14];
          new_coeff0_15 = coeff0_0*dmats0[0][15] + coeff0_1*dmats0[1][15] + coeff0_2*dmats0[2][15] + coeff0_3*dmats0[3][15] + coeff0_4*dmats0[4][15] + coeff0_5*dmats0[5][15] + coeff0_6*dmats0[6][15] + coeff0_7*dmats0[7][15] + coeff0_8*dmats0[8][15] + coeff0_9*dmats0[9][15] + coeff0_10*dmats0[10][15] + coeff0_11*dmats0[11][15] + coeff0_12*dmats0[12][15] + coeff0_13*dmats0[13][15] + coeff0_14*dmats0[14][15] + coeff0_15*dmats0[15][15] + coeff0_16*dmats0[16][15] + coeff0_17*dmats0[17][15] + coeff0_18*dmats0[18][15] + coeff0_19*dmats0[19][15] + coeff0_20*dmats0[20][15];
          new_coeff0_16 = coeff0_0*dmats0[0][16] + coeff0_1*dmats0[1][16] + coeff0_2*dmats0[2][16] + coeff0_3*dmats0[3][16] + coeff0_4*dmats0[4][16] + coeff0_5*dmats0[5][16] + coeff0_6*dmats0[6][16] + coeff0_7*dmats0[7][16] + coeff0_8*dmats0[8][16] + coeff0_9*dmats0[9][16] + coeff0_10*dmats0[10][16] + coeff0_11*dmats0[11][16] + coeff0_12*dmats0[12][16] + coeff0_13*dmats0[13][16] + coeff0_14*dmats0[14][16] + coeff0_15*dmats0[15][16] + coeff0_16*dmats0[16][16] + coeff0_17*dmats0[17][16] + coeff0_18*dmats0[18][16] + coeff0_19*dmats0[19][16] + coeff0_20*dmats0[20][16];
          new_coeff0_17 = coeff0_0*dmats0[0][17] + coeff0_1*dmats0[1][17] + coeff0_2*dmats0[2][17] + coeff0_3*dmats0[3][17] + coeff0_4*dmats0[4][17] + coeff0_5*dmats0[5][17] + coeff0_6*dmats0[6][17] + coeff0_7*dmats0[7][17] + coeff0_8*dmats0[8][17] + coeff0_9*dmats0[9][17] + coeff0_10*dmats0[10][17] + coeff0_11*dmats0[11][17] + coeff0_12*dmats0[12][17] + coeff0_13*dmats0[13][17] + coeff0_14*dmats0[14][17] + coeff0_15*dmats0[15][17] + coeff0_16*dmats0[16][17] + coeff0_17*dmats0[17][17] + coeff0_18*dmats0[18][17] + coeff0_19*dmats0[19][17] + coeff0_20*dmats0[20][17];
          new_coeff0_18 = coeff0_0*dmats0[0][18] + coeff0_1*dmats0[1][18] + coeff0_2*dmats0[2][18] + coeff0_3*dmats0[3][18] + coeff0_4*dmats0[4][18] + coeff0_5*dmats0[5][18] + coeff0_6*dmats0[6][18] + coeff0_7*dmats0[7][18] + coeff0_8*dmats0[8][18] + coeff0_9*dmats0[9][18] + coeff0_10*dmats0[10][18] + coeff0_11*dmats0[11][18] + coeff0_12*dmats0[12][18] + coeff0_13*dmats0[13][18] + coeff0_14*dmats0[14][18] + coeff0_15*dmats0[15][18] + coeff0_16*dmats0[16][18] + coeff0_17*dmats0[17][18] + coeff0_18*dmats0[18][18] + coeff0_19*dmats0[19][18] + coeff0_20*dmats0[20][18];
          new_coeff0_19 = coeff0_0*dmats0[0][19] + coeff0_1*dmats0[1][19] + coeff0_2*dmats0[2][19] + coeff0_3*dmats0[3][19] + coeff0_4*dmats0[4][19] + coeff0_5*dmats0[5][19] + coeff0_6*dmats0[6][19] + coeff0_7*dmats0[7][19] + coeff0_8*dmats0[8][19] + coeff0_9*dmats0[9][19] + coeff0_10*dmats0[10][19] + coeff0_11*dmats0[11][19] + coeff0_12*dmats0[12][19] + coeff0_13*dmats0[13][19] + coeff0_14*dmats0[14][19] + coeff0_15*dmats0[15][19] + coeff0_16*dmats0[16][19] + coeff0_17*dmats0[17][19] + coeff0_18*dmats0[18][19] + coeff0_19*dmats0[19][19] + coeff0_20*dmats0[20][19];
          new_coeff0_20 = coeff0_0*dmats0[0][20] + coeff0_1*dmats0[1][20] + coeff0_2*dmats0[2][20] + coeff0_3*dmats0[3][20] + coeff0_4*dmats0[4][20] + coeff0_5*dmats0[5][20] + coeff0_6*dmats0[6][20] + coeff0_7*dmats0[7][20] + coeff0_8*dmats0[8][20] + coeff0_9*dmats0[9][20] + coeff0_10*dmats0[10][20] + coeff0_11*dmats0[11][20] + coeff0_12*dmats0[12][20] + coeff0_13*dmats0[13][20] + coeff0_14*dmats0[14][20] + coeff0_15*dmats0[15][20] + coeff0_16*dmats0[16][20] + coeff0_17*dmats0[17][20] + coeff0_18*dmats0[18][20] + coeff0_19*dmats0[19][20] + coeff0_20*dmats0[20][20];
        }
        if(combinations[deriv_num][j] == 1)
        {
          new_coeff0_0 = coeff0_0*dmats1[0][0] + coeff0_1*dmats1[1][0] + coeff0_2*dmats1[2][0] + coeff0_3*dmats1[3][0] + coeff0_4*dmats1[4][0] + coeff0_5*dmats1[5][0] + coeff0_6*dmats1[6][0] + coeff0_7*dmats1[7][0] + coeff0_8*dmats1[8][0] + coeff0_9*dmats1[9][0] + coeff0_10*dmats1[10][0] + coeff0_11*dmats1[11][0] + coeff0_12*dmats1[12][0] + coeff0_13*dmats1[13][0] + coeff0_14*dmats1[14][0] + coeff0_15*dmats1[15][0] + coeff0_16*dmats1[16][0] + coeff0_17*dmats1[17][0] + coeff0_18*dmats1[18][0] + coeff0_19*dmats1[19][0] + coeff0_20*dmats1[20][0];
          new_coeff0_1 = coeff0_0*dmats1[0][1] + coeff0_1*dmats1[1][1] + coeff0_2*dmats1[2][1] + coeff0_3*dmats1[3][1] + coeff0_4*dmats1[4][1] + coeff0_5*dmats1[5][1] + coeff0_6*dmats1[6][1] + coeff0_7*dmats1[7][1] + coeff0_8*dmats1[8][1] + coeff0_9*dmats1[9][1] + coeff0_10*dmats1[10][1] + coeff0_11*dmats1[11][1] + coeff0_12*dmats1[12][1] + coeff0_13*dmats1[13][1] + coeff0_14*dmats1[14][1] + coeff0_15*dmats1[15][1] + coeff0_16*dmats1[16][1] + coeff0_17*dmats1[17][1] + coeff0_18*dmats1[18][1] + coeff0_19*dmats1[19][1] + coeff0_20*dmats1[20][1];
          new_coeff0_2 = coeff0_0*dmats1[0][2] + coeff0_1*dmats1[1][2] + coeff0_2*dmats1[2][2] + coeff0_3*dmats1[3][2] + coeff0_4*dmats1[4][2] + coeff0_5*dmats1[5][2] + coeff0_6*dmats1[6][2] + coeff0_7*dmats1[7][2] + coeff0_8*dmats1[8][2] + coeff0_9*dmats1[9][2] + coeff0_10*dmats1[10][2] + coeff0_11*dmats1[11][2] + coeff0_12*dmats1[12][2] + coeff0_13*dmats1[13][2] + coeff0_14*dmats1[14][2] + coeff0_15*dmats1[15][2] + coeff0_16*dmats1[16][2] + coeff0_17*dmats1[17][2] + coeff0_18*dmats1[18][2] + coeff0_19*dmats1[19][2] + coeff0_20*dmats1[20][2];
          new_coeff0_3 = coeff0_0*dmats1[0][3] + coeff0_1*dmats1[1][3] + coeff0_2*dmats1[2][3] + coeff0_3*dmats1[3][3] + coeff0_4*dmats1[4][3] + coeff0_5*dmats1[5][3] + coeff0_6*dmats1[6][3] + coeff0_7*dmats1[7][3] + coeff0_8*dmats1[8][3] + coeff0_9*dmats1[9][3] + coeff0_10*dmats1[10][3] + coeff0_11*dmats1[11][3] + coeff0_12*dmats1[12][3] + coeff0_13*dmats1[13][3] + coeff0_14*dmats1[14][3] + coeff0_15*dmats1[15][3] + coeff0_16*dmats1[16][3] + coeff0_17*dmats1[17][3] + coeff0_18*dmats1[18][3] + coeff0_19*dmats1[19][3] + coeff0_20*dmats1[20][3];
          new_coeff0_4 = coeff0_0*dmats1[0][4] + coeff0_1*dmats1[1][4] + coeff0_2*dmats1[2][4] + coeff0_3*dmats1[3][4] + coeff0_4*dmats1[4][4] + coeff0_5*dmats1[5][4] + coeff0_6*dmats1[6][4] + coeff0_7*dmats1[7][4] + coeff0_8*dmats1[8][4] + coeff0_9*dmats1[9][4] + coeff0_10*dmats1[10][4] + coeff0_11*dmats1[11][4] + coeff0_12*dmats1[12][4] + coeff0_13*dmats1[13][4] + coeff0_14*dmats1[14][4] + coeff0_15*dmats1[15][4] + coeff0_16*dmats1[16][4] + coeff0_17*dmats1[17][4] + coeff0_18*dmats1[18][4] + coeff0_19*dmats1[19][4] + coeff0_20*dmats1[20][4];
          new_coeff0_5 = coeff0_0*dmats1[0][5] + coeff0_1*dmats1[1][5] + coeff0_2*dmats1[2][5] + coeff0_3*dmats1[3][5] + coeff0_4*dmats1[4][5] + coeff0_5*dmats1[5][5] + coeff0_6*dmats1[6][5] + coeff0_7*dmats1[7][5] + coeff0_8*dmats1[8][5] + coeff0_9*dmats1[9][5] + coeff0_10*dmats1[10][5] + coeff0_11*dmats1[11][5] + coeff0_12*dmats1[12][5] + coeff0_13*dmats1[13][5] + coeff0_14*dmats1[14][5] + coeff0_15*dmats1[15][5] + coeff0_16*dmats1[16][5] + coeff0_17*dmats1[17][5] + coeff0_18*dmats1[18][5] + coeff0_19*dmats1[19][5] + coeff0_20*dmats1[20][5];
          new_coeff0_6 = coeff0_0*dmats1[0][6] + coeff0_1*dmats1[1][6] + coeff0_2*dmats1[2][6] + coeff0_3*dmats1[3][6] + coeff0_4*dmats1[4][6] + coeff0_5*dmats1[5][6] + coeff0_6*dmats1[6][6] + coeff0_7*dmats1[7][6] + coeff0_8*dmats1[8][6] + coeff0_9*dmats1[9][6] + coeff0_10*dmats1[10][6] + coeff0_11*dmats1[11][6] + coeff0_12*dmats1[12][6] + coeff0_13*dmats1[13][6] + coeff0_14*dmats1[14][6] + coeff0_15*dmats1[15][6] + coeff0_16*dmats1[16][6] + coeff0_17*dmats1[17][6] + coeff0_18*dmats1[18][6] + coeff0_19*dmats1[19][6] + coeff0_20*dmats1[20][6];
          new_coeff0_7 = coeff0_0*dmats1[0][7] + coeff0_1*dmats1[1][7] + coeff0_2*dmats1[2][7] + coeff0_3*dmats1[3][7] + coeff0_4*dmats1[4][7] + coeff0_5*dmats1[5][7] + coeff0_6*dmats1[6][7] + coeff0_7*dmats1[7][7] + coeff0_8*dmats1[8][7] + coeff0_9*dmats1[9][7] + coeff0_10*dmats1[10][7] + coeff0_11*dmats1[11][7] + coeff0_12*dmats1[12][7] + coeff0_13*dmats1[13][7] + coeff0_14*dmats1[14][7] + coeff0_15*dmats1[15][7] + coeff0_16*dmats1[16][7] + coeff0_17*dmats1[17][7] + coeff0_18*dmats1[18][7] + coeff0_19*dmats1[19][7] + coeff0_20*dmats1[20][7];
          new_coeff0_8 = coeff0_0*dmats1[0][8] + coeff0_1*dmats1[1][8] + coeff0_2*dmats1[2][8] + coeff0_3*dmats1[3][8] + coeff0_4*dmats1[4][8] + coeff0_5*dmats1[5][8] + coeff0_6*dmats1[6][8] + coeff0_7*dmats1[7][8] + coeff0_8*dmats1[8][8] + coeff0_9*dmats1[9][8] + coeff0_10*dmats1[10][8] + coeff0_11*dmats1[11][8] + coeff0_12*dmats1[12][8] + coeff0_13*dmats1[13][8] + coeff0_14*dmats1[14][8] + coeff0_15*dmats1[15][8] + coeff0_16*dmats1[16][8] + coeff0_17*dmats1[17][8] + coeff0_18*dmats1[18][8] + coeff0_19*dmats1[19][8] + coeff0_20*dmats1[20][8];
          new_coeff0_9 = coeff0_0*dmats1[0][9] + coeff0_1*dmats1[1][9] + coeff0_2*dmats1[2][9] + coeff0_3*dmats1[3][9] + coeff0_4*dmats1[4][9] + coeff0_5*dmats1[5][9] + coeff0_6*dmats1[6][9] + coeff0_7*dmats1[7][9] + coeff0_8*dmats1[8][9] + coeff0_9*dmats1[9][9] + coeff0_10*dmats1[10][9] + coeff0_11*dmats1[11][9] + coeff0_12*dmats1[12][9] + coeff0_13*dmats1[13][9] + coeff0_14*dmats1[14][9] + coeff0_15*dmats1[15][9] + coeff0_16*dmats1[16][9] + coeff0_17*dmats1[17][9] + coeff0_18*dmats1[18][9] + coeff0_19*dmats1[19][9] + coeff0_20*dmats1[20][9];
          new_coeff0_10 = coeff0_0*dmats1[0][10] + coeff0_1*dmats1[1][10] + coeff0_2*dmats1[2][10] + coeff0_3*dmats1[3][10] + coeff0_4*dmats1[4][10] + coeff0_5*dmats1[5][10] + coeff0_6*dmats1[6][10] + coeff0_7*dmats1[7][10] + coeff0_8*dmats1[8][10] + coeff0_9*dmats1[9][10] + coeff0_10*dmats1[10][10] + coeff0_11*dmats1[11][10] + coeff0_12*dmats1[12][10] + coeff0_13*dmats1[13][10] + coeff0_14*dmats1[14][10] + coeff0_15*dmats1[15][10] + coeff0_16*dmats1[16][10] + coeff0_17*dmats1[17][10] + coeff0_18*dmats1[18][10] + coeff0_19*dmats1[19][10] + coeff0_20*dmats1[20][10];
          new_coeff0_11 = coeff0_0*dmats1[0][11] + coeff0_1*dmats1[1][11] + coeff0_2*dmats1[2][11] + coeff0_3*dmats1[3][11] + coeff0_4*dmats1[4][11] + coeff0_5*dmats1[5][11] + coeff0_6*dmats1[6][11] + coeff0_7*dmats1[7][11] + coeff0_8*dmats1[8][11] + coeff0_9*dmats1[9][11] + coeff0_10*dmats1[10][11] + coeff0_11*dmats1[11][11] + coeff0_12*dmats1[12][11] + coeff0_13*dmats1[13][11] + coeff0_14*dmats1[14][11] + coeff0_15*dmats1[15][11] + coeff0_16*dmats1[16][11] + coeff0_17*dmats1[17][11] + coeff0_18*dmats1[18][11] + coeff0_19*dmats1[19][11] + coeff0_20*dmats1[20][11];
          new_coeff0_12 = coeff0_0*dmats1[0][12] + coeff0_1*dmats1[1][12] + coeff0_2*dmats1[2][12] + coeff0_3*dmats1[3][12] + coeff0_4*dmats1[4][12] + coeff0_5*dmats1[5][12] + coeff0_6*dmats1[6][12] + coeff0_7*dmats1[7][12] + coeff0_8*dmats1[8][12] + coeff0_9*dmats1[9][12] + coeff0_10*dmats1[10][12] + coeff0_11*dmats1[11][12] + coeff0_12*dmats1[12][12] + coeff0_13*dmats1[13][12] + coeff0_14*dmats1[14][12] + coeff0_15*dmats1[15][12] + coeff0_16*dmats1[16][12] + coeff0_17*dmats1[17][12] + coeff0_18*dmats1[18][12] + coeff0_19*dmats1[19][12] + coeff0_20*dmats1[20][12];
          new_coeff0_13 = coeff0_0*dmats1[0][13] + coeff0_1*dmats1[1][13] + coeff0_2*dmats1[2][13] + coeff0_3*dmats1[3][13] + coeff0_4*dmats1[4][13] + coeff0_5*dmats1[5][13] + coeff0_6*dmats1[6][13] + coeff0_7*dmats1[7][13] + coeff0_8*dmats1[8][13] + coeff0_9*dmats1[9][13] + coeff0_10*dmats1[10][13] + coeff0_11*dmats1[11][13] + coeff0_12*dmats1[12][13] + coeff0_13*dmats1[13][13] + coeff0_14*dmats1[14][13] + coeff0_15*dmats1[15][13] + coeff0_16*dmats1[16][13] + coeff0_17*dmats1[17][13] + coeff0_18*dmats1[18][13] + coeff0_19*dmats1[19][13] + coeff0_20*dmats1[20][13];
          new_coeff0_14 = coeff0_0*dmats1[0][14] + coeff0_1*dmats1[1][14] + coeff0_2*dmats1[2][14] + coeff0_3*dmats1[3][14] + coeff0_4*dmats1[4][14] + coeff0_5*dmats1[5][14] + coeff0_6*dmats1[6][14] + coeff0_7*dmats1[7][14] + coeff0_8*dmats1[8][14] + coeff0_9*dmats1[9][14] + coeff0_10*dmats1[10][14] + coeff0_11*dmats1[11][14] + coeff0_12*dmats1[12][14] + coeff0_13*dmats1[13][14] + coeff0_14*dmats1[14][14] + coeff0_15*dmats1[15][14] + coeff0_16*dmats1[16][14] + coeff0_17*dmats1[17][14] + coeff0_18*dmats1[18][14] + coeff0_19*dmats1[19][14] + coeff0_20*dmats1[20][14];
          new_coeff0_15 = coeff0_0*dmats1[0][15] + coeff0_1*dmats1[1][15] + coeff0_2*dmats1[2][15] + coeff0_3*dmats1[3][15] + coeff0_4*dmats1[4][15] + coeff0_5*dmats1[5][15] + coeff0_6*dmats1[6][15] + coeff0_7*dmats1[7][15] + coeff0_8*dmats1[8][15] + coeff0_9*dmats1[9][15] + coeff0_10*dmats1[10][15] + coeff0_11*dmats1[11][15] + coeff0_12*dmats1[12][15] + coeff0_13*dmats1[13][15] + coeff0_14*dmats1[14][15] + coeff0_15*dmats1[15][15] + coeff0_16*dmats1[16][15] + coeff0_17*dmats1[17][15] + coeff0_18*dmats1[18][15] + coeff0_19*dmats1[19][15] + coeff0_20*dmats1[20][15];
          new_coeff0_16 = coeff0_0*dmats1[0][16] + coeff0_1*dmats1[1][16] + coeff0_2*dmats1[2][16] + coeff0_3*dmats1[3][16] + coeff0_4*dmats1[4][16] + coeff0_5*dmats1[5][16] + coeff0_6*dmats1[6][16] + coeff0_7*dmats1[7][16] + coeff0_8*dmats1[8][16] + coeff0_9*dmats1[9][16] + coeff0_10*dmats1[10][16] + coeff0_11*dmats1[11][16] + coeff0_12*dmats1[12][16] + coeff0_13*dmats1[13][16] + coeff0_14*dmats1[14][16] + coeff0_15*dmats1[15][16] + coeff0_16*dmats1[16][16] + coeff0_17*dmats1[17][16] + coeff0_18*dmats1[18][16] + coeff0_19*dmats1[19][16] + coeff0_20*dmats1[20][16];
          new_coeff0_17 = coeff0_0*dmats1[0][17] + coeff0_1*dmats1[1][17] + coeff0_2*dmats1[2][17] + coeff0_3*dmats1[3][17] + coeff0_4*dmats1[4][17] + coeff0_5*dmats1[5][17] + coeff0_6*dmats1[6][17] + coeff0_7*dmats1[7][17] + coeff0_8*dmats1[8][17] + coeff0_9*dmats1[9][17] + coeff0_10*dmats1[10][17] + coeff0_11*dmats1[11][17] + coeff0_12*dmats1[12][17] + coeff0_13*dmats1[13][17] + coeff0_14*dmats1[14][17] + coeff0_15*dmats1[15][17] + coeff0_16*dmats1[16][17] + coeff0_17*dmats1[17][17] + coeff0_18*dmats1[18][17] + coeff0_19*dmats1[19][17] + coeff0_20*dmats1[20][17];
          new_coeff0_18 = coeff0_0*dmats1[0][18] + coeff0_1*dmats1[1][18] + coeff0_2*dmats1[2][18] + coeff0_3*dmats1[3][18] + coeff0_4*dmats1[4][18] + coeff0_5*dmats1[5][18] + coeff0_6*dmats1[6][18] + coeff0_7*dmats1[7][18] + coeff0_8*dmats1[8][18] + coeff0_9*dmats1[9][18] + coeff0_10*dmats1[10][18] + coeff0_11*dmats1[11][18] + coeff0_12*dmats1[12][18] + coeff0_13*dmats1[13][18] + coeff0_14*dmats1[14][18] + coeff0_15*dmats1[15][18] + coeff0_16*dmats1[16][18] + coeff0_17*dmats1[17][18] + coeff0_18*dmats1[18][18] + coeff0_19*dmats1[19][18] + coeff0_20*dmats1[20][18];
          new_coeff0_19 = coeff0_0*dmats1[0][19] + coeff0_1*dmats1[1][19] + coeff0_2*dmats1[2][19] + coeff0_3*dmats1[3][19] + coeff0_4*dmats1[4][19] + coeff0_5*dmats1[5][19] + coeff0_6*dmats1[6][19] + coeff0_7*dmats1[7][19] + coeff0_8*dmats1[8][19] + coeff0_9*dmats1[9][19] + coeff0_10*dmats1[10][19] + coeff0_11*dmats1[11][19] + coeff0_12*dmats1[12][19] + coeff0_13*dmats1[13][19] + coeff0_14*dmats1[14][19] + coeff0_15*dmats1[15][19] + coeff0_16*dmats1[16][19] + coeff0_17*dmats1[17][19] + coeff0_18*dmats1[18][19] + coeff0_19*dmats1[19][19] + coeff0_20*dmats1[20][19];
          new_coeff0_20 = coeff0_0*dmats1[0][20] + coeff0_1*dmats1[1][20] + coeff0_2*dmats1[2][20] + coeff0_3*dmats1[3][20] + coeff0_4*dmats1[4][20] + coeff0_5*dmats1[5][20] + coeff0_6*dmats1[6][20] + coeff0_7*dmats1[7][20] + coeff0_8*dmats1[8][20] + coeff0_9*dmats1[9][20] + coeff0_10*dmats1[10][20] + coeff0_11*dmats1[11][20] + coeff0_12*dmats1[12][20] + coeff0_13*dmats1[13][20] + coeff0_14*dmats1[14][20] + coeff0_15*dmats1[15][20] + coeff0_16*dmats1[16][20] + coeff0_17*dmats1[17][20] + coeff0_18*dmats1[18][20] + coeff0_19*dmats1[19][20] + coeff0_20*dmats1[20][20];
        }
    
      }
      // Compute derivatives on reference element as dot product of coefficients and basisvalues
      derivatives[deriv_num] = new_coeff0_0*basisvalue0 + new_coeff0_1*basisvalue1 + new_coeff0_2*basisvalue2 + new_coeff0_3*basisvalue3 + new_coeff0_4*basisvalue4 + new_coeff0_5*basisvalue5 + new_coeff0_6*basisvalue6 + new_coeff0_7*basisvalue7 + new_coeff0_8*basisvalue8 + new_coeff0_9*basisvalue9 + new_coeff0_10*basisvalue10 + new_coeff0_11*basisvalue11 + new_coeff0_12*basisvalue12 + new_coeff0_13*basisvalue13 + new_coeff0_14*basisvalue14 + new_coeff0_15*basisvalue15 + new_coeff0_16*basisvalue16 + new_coeff0_17*basisvalue17 + new_coeff0_18*basisvalue18 + new_coeff0_19*basisvalue19 + new_coeff0_20*basisvalue20;
    }
    
    // Transform derivatives back to physical element
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        values[row] += transform[row][col]*derivatives[col];
      }
    }
    // Delete pointer to array of derivatives on FIAT element
    delete [] derivatives;
    
    // Delete pointer to array of combinations of derivatives and transform
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      delete [] combinations[row];
      delete [] transform[row];
    }
    
    delete [] combinations;
    delete [] transform;
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis_derivatives() is not yet implemented.");
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // The reference points, direction and weights:
    const static double X[21][1][2] = {{{0, 0}}, {{1, 0}}, {{0, 1}}, {{0.8, 0.2}}, {{0.6, 0.4}}, {{0.4, 0.6}}, {{0.2, 0.8}}, {{0, 0.2}}, {{0, 0.4}}, {{0, 0.6}}, {{0, 0.8}}, {{0.2, 0}}, {{0.4, 0}}, {{0.6, 0}}, {{0.8, 0}}, {{0.2, 0.2}}, {{0.4, 0.2}}, {{0.6, 0.2}}, {{0.2, 0.4}}, {{0.4, 0.4}}, {{0.2, 0.6}}};
    const static double W[21][1] = {{1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}};
    const static double D[21][1][1] = {{{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}};
    
    const double * const * x = c.coordinates;
    double result = 0.0;
    // Iterate over the points:
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0][0] - X[i][0][1];
    const double w1 = X[i][0][0];
    const double w2 = X[i][0][1];
    
    // Compute affine mapping y = F(X)
    double y[2];
    y[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0];
    y[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1];
    
    // Evaluate function at physical points
    double values[1];
    f.evaluate(values, y, c);
    
    // Map function values using appropriate mapping
    // Affine map: Do nothing
    
    // Note that we do not map the weights (yet).
    
    // Take directional components
    for(int k = 0; k < 1; k++)
      result += values[k]*D[i][0][k];
    // Multiply by weights 
    result *= W[i][0];
    
    return result;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate at vertices and use affine mapping
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new poisson2d_5_0_finite_element_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class poisson2d_5_0_dof_map_0: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  poisson2d_5_0_dof_map_0() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~poisson2d_5_0_dof_map_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for FiniteElement('Lagrange', 'triangle', 5)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return true;
      break;
    case 2:
      return true;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = m.num_entities[0] + 4*m.num_entities[1] + 6*m.num_entities[2];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 21;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 21;
  }

  // Return the geometric dimension of the coordinates this dof map provides
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 6;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    unsigned int offset = m.num_entities[0];
    dofs[3] = offset + 4*c.entity_indices[1][0];
    dofs[4] = offset + 4*c.entity_indices[1][0] + 1;
    dofs[5] = offset + 4*c.entity_indices[1][0] + 2;
    dofs[6] = offset + 4*c.entity_indices[1][0] + 3;
    dofs[7] = offset + 4*c.entity_indices[1][1];
    dofs[8] = offset + 4*c.entity_indices[1][1] + 1;
    dofs[9] = offset + 4*c.entity_indices[1][1] + 2;
    dofs[10] = offset + 4*c.entity_indices[1][1] + 3;
    dofs[11] = offset + 4*c.entity_indices[1][2];
    dofs[12] = offset + 4*c.entity_indices[1][2] + 1;
    dofs[13] = offset + 4*c.entity_indices[1][2] + 2;
    dofs[14] = offset + 4*c.entity_indices[1][2] + 3;
    offset = offset + 4*m.num_entities[1];
    dofs[15] = offset + 6*c.entity_indices[2][0];
    dofs[16] = offset + 6*c.entity_indices[2][0] + 1;
    dofs[17] = offset + 6*c.entity_indices[2][0] + 2;
    dofs[18] = offset + 6*c.entity_indices[2][0] + 3;
    dofs[19] = offset + 6*c.entity_indices[2][0] + 4;
    dofs[20] = offset + 6*c.entity_indices[2][0] + 5;
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 7;
      dofs[3] = 8;
      dofs[4] = 9;
      dofs[5] = 10;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 11;
      dofs[3] = 12;
      dofs[4] = 13;
      dofs[5] = 14;
      break;
    }
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[3][0] = 0.8*x[1][0] + 0.2*x[2][0];
    coordinates[3][1] = 0.8*x[1][1] + 0.2*x[2][1];
    coordinates[4][0] = 0.6*x[1][0] + 0.4*x[2][0];
    coordinates[4][1] = 0.6*x[1][1] + 0.4*x[2][1];
    coordinates[5][0] = 0.4*x[1][0] + 0.6*x[2][0];
    coordinates[5][1] = 0.4*x[1][1] + 0.6*x[2][1];
    coordinates[6][0] = 0.2*x[1][0] + 0.8*x[2][0];
    coordinates[6][1] = 0.2*x[1][1] + 0.8*x[2][1];
    coordinates[7][0] = 0.8*x[0][0] + 0.2*x[2][0];
    coordinates[7][1] = 0.8*x[0][1] + 0.2*x[2][1];
    coordinates[8][0] = 0.6*x[0][0] + 0.4*x[2][0];
    coordinates[8][1] = 0.6*x[0][1] + 0.4*x[2][1];
    coordinates[9][0] = 0.4*x[0][0] + 0.6*x[2][0];
    coordinates[9][1] = 0.4*x[0][1] + 0.6*x[2][1];
    coordinates[10][0] = 0.2*x[0][0] + 0.8*x[2][0];
    coordinates[10][1] = 0.2*x[0][1] + 0.8*x[2][1];
    coordinates[11][0] = 0.8*x[0][0] + 0.2*x[1][0];
    coordinates[11][1] = 0.8*x[0][1] + 0.2*x[1][1];
    coordinates[12][0] = 0.6*x[0][0] + 0.4*x[1][0];
    coordinates[12][1] = 0.6*x[0][1] + 0.4*x[1][1];
    coordinates[13][0] = 0.4*x[0][0] + 0.6*x[1][0];
    coordinates[13][1] = 0.4*x[0][1] + 0.6*x[1][1];
    coordinates[14][0] = 0.2*x[0][0] + 0.8*x[1][0];
    coordinates[14][1] = 0.2*x[0][1] + 0.8*x[1][1];
    coordinates[15][0] = 0.6*x[0][0] + 0.2*x[1][0] + 0.2*x[2][0];
    coordinates[15][1] = 0.6*x[0][1] + 0.2*x[1][1] + 0.2*x[2][1];
    coordinates[16][0] = 0.4*x[0][0] + 0.4*x[1][0] + 0.2*x[2][0];
    coordinates[16][1] = 0.4*x[0][1] + 0.4*x[1][1] + 0.2*x[2][1];
    coordinates[17][0] = 0.2*x[0][0] + 0.6*x[1][0] + 0.2*x[2][0];
    coordinates[17][1] = 0.2*x[0][1] + 0.6*x[1][1] + 0.2*x[2][1];
    coordinates[18][0] = 0.4*x[0][0] + 0.2*x[1][0] + 0.4*x[2][0];
    coordinates[18][1] = 0.4*x[0][1] + 0.2*x[1][1] + 0.4*x[2][1];
    coordinates[19][0] = 0.2*x[0][0] + 0.4*x[1][0] + 0.4*x[2][0];
    coordinates[19][1] = 0.2*x[0][1] + 0.4*x[1][1] + 0.4*x[2][1];
    coordinates[20][0] = 0.2*x[0][0] + 0.2*x[1][0] + 0.6*x[2][0];
    coordinates[20][1] = 0.2*x[0][1] + 0.2*x[1][1] + 0.6*x[2][1];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new poisson2d_5_0_dof_map_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class poisson2d_5_0_dof_map_1: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  poisson2d_5_0_dof_map_1() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~poisson2d_5_0_dof_map_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for FiniteElement('Lagrange', 'triangle', 5)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return true;
      break;
    case 2:
      return true;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = m.num_entities[0] + 4*m.num_entities[1] + 6*m.num_entities[2];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 21;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 21;
  }

  // Return the geometric dimension of the coordinates this dof map provides
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 6;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    unsigned int offset = m.num_entities[0];
    dofs[3] = offset + 4*c.entity_indices[1][0];
    dofs[4] = offset + 4*c.entity_indices[1][0] + 1;
    dofs[5] = offset + 4*c.entity_indices[1][0] + 2;
    dofs[6] = offset + 4*c.entity_indices[1][0] + 3;
    dofs[7] = offset + 4*c.entity_indices[1][1];
    dofs[8] = offset + 4*c.entity_indices[1][1] + 1;
    dofs[9] = offset + 4*c.entity_indices[1][1] + 2;
    dofs[10] = offset + 4*c.entity_indices[1][1] + 3;
    dofs[11] = offset + 4*c.entity_indices[1][2];
    dofs[12] = offset + 4*c.entity_indices[1][2] + 1;
    dofs[13] = offset + 4*c.entity_indices[1][2] + 2;
    dofs[14] = offset + 4*c.entity_indices[1][2] + 3;
    offset = offset + 4*m.num_entities[1];
    dofs[15] = offset + 6*c.entity_indices[2][0];
    dofs[16] = offset + 6*c.entity_indices[2][0] + 1;
    dofs[17] = offset + 6*c.entity_indices[2][0] + 2;
    dofs[18] = offset + 6*c.entity_indices[2][0] + 3;
    dofs[19] = offset + 6*c.entity_indices[2][0] + 4;
    dofs[20] = offset + 6*c.entity_indices[2][0] + 5;
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 7;
      dofs[3] = 8;
      dofs[4] = 9;
      dofs[5] = 10;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 11;
      dofs[3] = 12;
      dofs[4] = 13;
      dofs[5] = 14;
      break;
    }
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[3][0] = 0.8*x[1][0] + 0.2*x[2][0];
    coordinates[3][1] = 0.8*x[1][1] + 0.2*x[2][1];
    coordinates[4][0] = 0.6*x[1][0] + 0.4*x[2][0];
    coordinates[4][1] = 0.6*x[1][1] + 0.4*x[2][1];
    coordinates[5][0] = 0.4*x[1][0] + 0.6*x[2][0];
    coordinates[5][1] = 0.4*x[1][1] + 0.6*x[2][1];
    coordinates[6][0] = 0.2*x[1][0] + 0.8*x[2][0];
    coordinates[6][1] = 0.2*x[1][1] + 0.8*x[2][1];
    coordinates[7][0] = 0.8*x[0][0] + 0.2*x[2][0];
    coordinates[7][1] = 0.8*x[0][1] + 0.2*x[2][1];
    coordinates[8][0] = 0.6*x[0][0] + 0.4*x[2][0];
    coordinates[8][1] = 0.6*x[0][1] + 0.4*x[2][1];
    coordinates[9][0] = 0.4*x[0][0] + 0.6*x[2][0];
    coordinates[9][1] = 0.4*x[0][1] + 0.6*x[2][1];
    coordinates[10][0] = 0.2*x[0][0] + 0.8*x[2][0];
    coordinates[10][1] = 0.2*x[0][1] + 0.8*x[2][1];
    coordinates[11][0] = 0.8*x[0][0] + 0.2*x[1][0];
    coordinates[11][1] = 0.8*x[0][1] + 0.2*x[1][1];
    coordinates[12][0] = 0.6*x[0][0] + 0.4*x[1][0];
    coordinates[12][1] = 0.6*x[0][1] + 0.4*x[1][1];
    coordinates[13][0] = 0.4*x[0][0] + 0.6*x[1][0];
    coordinates[13][1] = 0.4*x[0][1] + 0.6*x[1][1];
    coordinates[14][0] = 0.2*x[0][0] + 0.8*x[1][0];
    coordinates[14][1] = 0.2*x[0][1] + 0.8*x[1][1];
    coordinates[15][0] = 0.6*x[0][0] + 0.2*x[1][0] + 0.2*x[2][0];
    coordinates[15][1] = 0.6*x[0][1] + 0.2*x[1][1] + 0.2*x[2][1];
    coordinates[16][0] = 0.4*x[0][0] + 0.4*x[1][0] + 0.2*x[2][0];
    coordinates[16][1] = 0.4*x[0][1] + 0.4*x[1][1] + 0.2*x[2][1];
    coordinates[17][0] = 0.2*x[0][0] + 0.6*x[1][0] + 0.2*x[2][0];
    coordinates[17][1] = 0.2*x[0][1] + 0.6*x[1][1] + 0.2*x[2][1];
    coordinates[18][0] = 0.4*x[0][0] + 0.2*x[1][0] + 0.4*x[2][0];
    coordinates[18][1] = 0.4*x[0][1] + 0.2*x[1][1] + 0.4*x[2][1];
    coordinates[19][0] = 0.2*x[0][0] + 0.4*x[1][0] + 0.4*x[2][0];
    coordinates[19][1] = 0.2*x[0][1] + 0.4*x[1][1] + 0.4*x[2][1];
    coordinates[20][0] = 0.2*x[0][0] + 0.2*x[1][0] + 0.6*x[2][0];
    coordinates[20][1] = 0.2*x[0][1] + 0.2*x[1][1] + 0.6*x[2][1];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new poisson2d_5_0_dof_map_1();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class poisson2d_5_0_cell_integral_0_quadrature: public ufc::cell_integral
{
public:

  /// Constructor
  poisson2d_5_0_cell_integral_0_quadrature() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~poisson2d_5_0_cell_integral_0_quadrature()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
      
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
      
    // Compute inverse of Jacobian
    const double Jinv_00 =  J_11 / detJ;
    const double Jinv_01 = -J_01 / detJ;
    const double Jinv_10 = -J_10 / detJ;
    const double Jinv_11 =  J_00 / detJ;
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    
    // Array of quadrature weights
    const static double W25[25] = {0.0114650803515925, 0.0198040831320473, 0.0173415064313656, 0.0087554991821638, 0.00186555216687783, 0.0231612219294983, 0.0400072873861603, 0.0350325045033716, 0.0176874521104834, 0.0037687016953276, 0.0275289856644697, 0.0475518970579538, 0.0416389652151948, 0.021022967487322, 0.00447940679728133, 0.0231612219294983, 0.0400072873861603, 0.0350325045033716, 0.0176874521104834, 0.0037687016953276, 0.0114650803515925, 0.0198040831320473, 0.0173415064313656, 0.0087554991821638, 0.00186555216687783};
    
    
    const static double FE0_D10[25][20] = \
    {{-5.19006655675602, 0.265014114266621, -0.0793127868573195, -0.0532016674966888, -0.0657481036523112, -0.167545386400105, -4.18871143041265, 2.48162022170146, -0.975198959516858, 0.167545386400105, 9.09545480869848, -6.93426474580324, 4.40807819799242, -1.64421581839826, 5.59491882545205, -1.88339538568247, 0.556500777500385, -2.89479019346682, 0.466371639262056, 1.04094706316917},
    {-0.387281543917615, 0.360196355442046, -0.509874205358224, -0.00400546593040435, -0.00258142247551206, -0.0041588571307012, -7.93242014636861, 0.0937864233630172, -0.027493459851693, 0.00415885713070167, 1.85682521325578, -3.65015367364664, 3.62651077125857, -1.80609712239214, 12.6581316640486, -7.06984903586439, 2.85401172354263, -0.117209723516276, 0.0274287660836636, 0.0300748823272014},
    {0.0767909851606242, 0.523007535959896, -1.55276606552412, 1.36927396658038, -0.151796197058331, -0.0835020338177044, -0.297592800541677, -8.08855601327255, -0.898095946714281, 0.0835020338177035, -0.222257064229998, -0.580203617306408, 1.97400015439791, -1.77133799398202, 3.77183248758655, -7.69553432846346, 5.77406070694271, 12.7700872665773, -6.05080521988512, 1.04989214377262},
    {0.00264653589093369, 0.72409898952066, -3.27371161769193, 5.69533983010347, -4.54510289460713, 1.26552810613915, -0.176248217759637, 1.39669269440232, -10.0882404692929, -1.26552810613916, 0.112330485308717, 0.117590113852824, 0.331563586733377, -1.28822971130651, -0.960809545982, -1.89137967438869, 6.30214905582226, 5.58842949965515, -12.6804620241609, 14.6333433639},
    {0.154300256413337, 0.906018665657215, -5.16568823762194, 12.2710284279649, -15.752192235377, 12.4471776589493, -0.728420195759933, 1.0269885898468, 1.00533746334285, -12.4471776589493, -0.204689194239679, -0.152954839540285, -0.192204508507687, -0.510470379782898, 1.44532866829545, 1.33071106953997, 3.11806869554645, -4.89409743766124, -8.40391958015044, 14.7468547720342},
    {-0.0869104012207649, -0.198787407783151, 0.0713007950270007, 0.0641087429627799, 0.14545015025236, -0.167545386400094, -1.29484761431946, 1.37890377755512, -0.76400070561218, 0.167545386400094, -4.77576121271108, 7.4961545858628, -3.71553854530176, 1.28084298115396, -1.02158470396439, 2.81863380675517, -0.573502283498317, -0.572046894714678, -0.870965625803218, 0.618550555359821},
    {0.280255485195228, -0.277267046794341, 0.436082597934505, 0.00402910662795437, 0.00352048496880763, -0.00415885713070365, -1.6484477066126, 0.0493204469138068, -0.0213915524073758, 0.00415885713070347, -1.41781558175071, 2.81839740713674, -2.7942805239765, 1.39071026018957, -3.43556398221328, 7.21158174068406, -2.56365264979268, -0.0202431980594992, -0.0331063554822613, 0.017871067438569},
    {-0.150477959735295, -0.27985994997936, 0.815681024612174, -0.683229954376171, 0.0612169285831729, -0.0835020338177037, 0.980707942186748, -3.30949531346513, -0.685082821072776, 0.083502033817703, 0.219519457758533, 0.339750431212436, -1.08502921496095, 0.956097235704639, -2.86660689845249, 4.11488930556563, -3.04467137391206, 1.1594619460059, 2.8332633218354, 0.623865892489607},
    {0.164296207228892, 0.00695528566621168, -0.230741901018099, 0.940833630385699, -1.57613677078325, 1.26552810613915, -1.08771671876185, 3.27338706524449, -7.11927434546902, -1.26552810613915, -0.0465673643361817, -0.0660116444123584, -0.18828173700784, 0.129609252861277, 0.44677536874686, 1.07082571583407, -0.199142464800975, -2.91946544174696, -1.29475525388323, 8.69541111625227},
    {0.0371461612108757, 0.580418202458522, -3.49839367826665, 8.93599369600077, -12.7601957269693, 12.4471776589493, 0.0281233247067879, -1.03405890739662, 3.99733397175056, -12.4471776589493, -0.207614658927308, -0.116226984686187, -0.113867906541847, -0.179854813514054, 1.36596770692998, 0.887096990226047, 1.21720565640383, -4.10703717513851, -3.79489761346565, 8.76286175521876},
    {-0.0717875777083227, 0.071787577708322, -0.0655931203637971, -0.324436918105883, 0.45472542793227, -0.167545386400094, 0.0655931203638006, 0.324436918105883, -0.454725427932271, 0.167545386400093, 0.622876824919406, -4.70905979502592, 4.70905979502592, -0.622876824919405, -1.7213758603071, 0, 1.7213758603071, 1.14834116311512, -1.14834116311512, 0},
    {-0.166651250744413, 0.166651250744412, -0.414546128637305, -0.00831761319124114, 0.0124560186880902, -0.00415885713070384, 0.414546128637307, 0.00831761319123911, -0.012456018688093, 0.00415885713070375, 0.837415213950915, -1.69163285551057, 1.69163285551057, -0.837415213950915, -3.34957822803201, 0, 3.34957822803202, 0.0494157495664389, -0.0494157495664361, 0},
    {0.0284519885895504, -0.0284519885895512, 0.215001124328431, -0.551286813313054, 0.373149874827972, -0.0835020338177031, -0.215001124328427, 0.551286813313051, -0.373149874827975, 0.083502033817703, -0.0254384943897121, -0.134966328000917, 0.134966328000916, 0.0254384943897142, 0.684061403961219, 0, -0.68406140396122, -6.43015916648734, 6.43015916648734, 0},
    {0.301838512878361, -0.301838512878362, 1.50770309453299, -2.97601435311282, 2.77156878734288, 1.26552810613915, -1.50770309453299, 2.97601435311282, -2.77156878734288, -1.26552810613915, -0.43507122302713, -0.0137564709021584, 0.0137564709021563, 0.435071223027133, 2.48139028809615, 0, -2.48139028809615, -6.24156800098213, 6.24156800098213, 0},
    {-0.214931053408134, 0.214931053408136, -1.51470314348233, 4.63733923937544, -8.37876484935993, 12.4471776589493, 1.51470314348233, -4.63733923937545, 8.37876484935994, -12.4471776589493, -0.103994166614338, -0.0143616434274859, 0.0143616434274925, 0.10399416661433, 0.571491741271858, -1.76784318796672e-14, -0.571491741271843, -1.1991309678062, 1.19913096780619, 0},
    {0.198787407783149, 0.0869104012207637, 1.29484761431946, -1.37890377755511, 0.764000705612177, -0.167545386400096, -0.0713007950269984, -0.0641087429627817, -0.145450150252362, 0.167545386400096, -1.28084298115396, 3.71553854530176, -7.4961545858628, 4.77576121271108, 0.573502283498313, -2.81863380675517, 1.02158470396439, 0.870965625803234, 0.572046894714653, -0.618550555359815},
    {0.277267046794341, -0.280255485195228, 1.64844770661259, -0.0493204469138086, 0.0213915524073725, -0.00415885713070361, -0.436082597934502, -0.00402910662795401, -0.00352048496881082, 0.00415885713070394, -1.39071026018957, 2.7942805239765, -2.81839740713674, 1.41781558175071, 2.56365264979268, -7.21158174068406, 3.43556398221329, 0.033106355482256, 0.0202431980595068, -0.0178710674385631},
    {0.27985994997936, 0.150477959735295, -0.980707942186745, 3.30949531346512, 0.685082821072772, -0.0835020338177026, -0.815681024612172, 0.683229954376173, -0.0612169285831738, 0.0835020338177038, -0.95609723570464, 1.08502921496096, -0.339750431212438, -0.219519457758531, 3.04467137391206, -4.11488930556563, 2.86660689845249, -2.8332633218354, -1.15946194600589, -0.623865892489599},
    {-0.00695528566621219, -0.164296207228892, 1.08771671876186, -3.27338706524449, 7.11927434546901, 1.26552810613915, 0.230741901018101, -0.940833630385696, 1.57613677078325, -1.26552810613915, -0.129609252861277, 0.18828173700784, 0.0660116444123568, 0.0465673643361832, 0.199142464800977, -1.07082571583407, -0.446775368746865, 1.29475525388323, 2.91946544174695, -8.69541111625226},
    {-0.580418202458521, -0.037146161210873, -0.0281233247067874, 1.03405890739662, -3.99733397175056, 12.4471776589493, 3.49839367826665, -8.93599369600079, 12.7601957269693, -12.4471776589493, 0.179854813514043, 0.113867906541861, 0.116226984686187, 0.207614658927302, -1.21720565640382, -0.887096990226085, -1.36596770692996, 3.79489761346566, 4.1070371751385, -8.76286175521875},
    {-0.265014114266622, 5.19006655675602, 4.18871143041264, -2.48162022170143, 0.975198959516855, -0.167545386400103, 0.0793127868573171, 0.0532016674966999, 0.0657481036523059, 0.167545386400103, 1.64421581839826, -4.40807819799241, 6.93426474580323, -9.09545480869847, -0.556500777500384, 1.88339538568245, -5.59491882545203, -0.466371639262047, 2.89479019346678, -1.04094706316916},
    {-0.360196355442048, 0.387281543917614, 7.93242014636861, -0.0937864233630172, 0.0274934598516884, -0.00415885713070041, 0.509874205358227, 0.0040054659303998, 0.002581422475509, 0.00415885713070114, 1.80609712239215, -3.62651077125858, 3.65015367364665, -1.85682521325578, -2.85401172354262, 7.06984903586439, -12.6581316640486, -0.027428766083664, 0.11720972351628, -0.0300748823271973},
    {-0.523007535959896, -0.0767909851606235, 0.297592800541675, 8.08855601327254, 0.898095946714273, -0.0835020338176974, 1.55276606552412, -1.36927396658038, 0.151796197058334, 0.0835020338176993, 1.77133799398202, -1.9740001543979, 0.580203617306409, 0.222257064229996, -5.7740607069427, 7.69553432846343, -3.77183248758653, 6.05080521988512, -12.7700872665773, -1.04989214377261},
    {-0.724098989520659, -0.00264653589093341, 0.176248217759639, -1.39669269440232, 10.0882404692929, 1.26552810613916, 3.27371161769193, -5.69533983010346, 4.54510289460713, -1.26552810613916, 1.2882297113065, -0.331563586733373, -0.117590113852823, -0.112330485308718, -6.30214905582224, 1.89137967438867, 0.960809545982007, 12.6804620241609, -5.58842949965515, -14.6333433639},
    {-0.906018665657214, -0.154300256413333, 0.728420195759934, -1.02698858984679, -1.00533746334285, 12.4471776589493, 5.16568823762194, -12.2710284279649, 15.752192235377, -12.4471776589493, 0.510470379782885, 0.192204508507707, 0.152954839540281, 0.204689194239673, -3.11806869554643, -1.33071106954001, -1.44532866829543, 8.40391958015046, 4.89409743766121, -14.7468547720342}};
    // Array of non-zero columns
    static const unsigned int nzc0[20] = {0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20};
    
    const static double FE0_D01[25][20] = \
    {{-5.19006655675602, 0.331151129149572, -0.179023647973853, -0.077666926058533, -0.0672206148796026, -0.108033770377385, 9.64603260249335, -8.08759058306023, 5.32789133039756, -2.02741792222423, -4.73928922420752, 2.71609302690387, -1.05183342891436, 0.179023647973847, 6.51377185750665, -3.21481883055884, 1.12950035497291, -2.40654541159811, 0.565946418534572, 0.740096548676363},
    {-0.387281543917614, -0.254076229866051, -0.16210366577046, 0.113008070793981, 0.0636154550152981, 0.0791327743744362, -4.56848706517803, 8.11763376937765, -4.51971853973646, 1.61192960932051, -1.50710786793481, 1.45646906920915, -0.766003735506966, 0.162103665770459, -0.472338424821826, -0.803103519059933, 0.652995664712986, 2.50078434632959, -0.716981005164516, -0.600470827947391},
    {0.0767909851606237, 0.144404852480164, -0.127756422312007, 0.301086411137293, -0.154854825520104, -0.0586628096452311, -0.501935755693391, -3.79490625905268, 5.18401881638575, -1.10837263928047, -0.0179141090782816, 0.355263803785248, -0.388110196184111, 0.127756422312004, -1.45728468772498, 0.721783510366978, 0.0870237850468208, 0.632765015228829, -0.922192488632124, 0.901096591219661},
    {0.00264653589093438, -0.205046501096968, -0.0780440307819694, 0.317372750290153, -0.481183878965552, 0.313054074018549, -0.0602973512207519, 0.505075798367191, -5.33728937266144, 5.09491089072103, -0.00362038123016694, -0.0107538311444555, -0.10140011238775, 0.0780440307819646, 0.0591512950504049, 0.494195371515365, -0.215972637902397, -1.11513294375923, -0.00225766140535883, 0.746547955920447},
    {0.154300256413335, 4.47130665780948, -0.0276806063585513, 0.1490484737361, -0.337756244302523, 0.451425998687884, -0.929374393533817, 2.29995291716987, -2.72080193380966, -3.27538350404922, -0.00373499646577858, -0.00146670543187067, 0.00113203741130911, 0.0276806063585545, 0.0208762068639432, -0.000713903718544559, -0.15018051114742, -0.0298696131691881, 0.339936853452947, -0.43869759591685},
    {-0.0869104012207658, 0.331151129149576, 0.042035156267483, 0.0267437531648116, 0.0460487708251559, -0.531451915348128, 1.13641363457201, -2.84406262446191, 3.06740803921457, -1.60399977725349, -7.20702246160255, -1.03385312291887, 0.283748607009468, -0.0420351562674821, 11.7313894068343, 1.29611649894071, -0.31049236017428, -6.88022548403821, -0.308312146846997, 2.88731045415458},
    {0.280255485195228, -0.254076229866052, -0.0320837640850406, 0.0303149423676683, 0.0287724629894713, 0.389278874200175, -1.52556270767753, 2.8973861810156, -2.69978623816201, 1.30178350949477, -1.54070058068577, 0.346419792799378, -0.159878873773649, 0.0320837640850402, -3.81165210197771, -0.113302367782964, 0.129563931405981, 7.34863394595932, -0.261889888005885, -2.38556013749601},
    {-0.150477959735295, 0.144404852480164, -0.150930454917655, 0.433852869671925, -0.308440538637689, -0.288580713574633, 0.909813813830903, -2.73788863780608, 2.71260266658138, -0.878454735351068, 0.290413586114376, 0.28952658259999, -0.42660575790125, 0.150930454917655, -3.38798972549908, 1.35818390803994, -0.00724711177067444, -0.139941601182278, -1.33926995200224, 3.52609845414162},
    {0.164296207228892, -0.205046501096969, -0.207332105566797, 0.932250980816156, -1.65344495426648, 1.5400109305038, -1.02437089175409, 2.86085227505145, -5.66368512366507, 3.86795403423578, -0.109913191343948, -0.0866040866273461, -0.210194792913869, 0.207332105566797, 0.879902601154887, 1.27288923072893, -0.722056187902287, -4.55520512253974, 0.467159810164894, 2.245204782225},
    {0.0371461612108743, 4.47130665780948, -0.114295687148972, 0.634748587299539, -1.50746512403262, 2.22070571824516, -0.180200714843611, 0.23998402597959, 0.476427093450159, -5.0446632236065, 0.000709380623106332, 0.0065912297239099, 0.0191687395786811, 0.114295687148976, -0.0308934408563417, -0.107766038167233, -0.653917326878232, 0.275696085434655, 1.60863993247595, -2.46621774344657},
    {-0.0717875777083232, 0.331151129149576, -0.168156756752689, -0.337646812392154, 1.29508856026694, -1.15149853950085, -0.102563636388888, -0.0132098942862778, 0.840363132334676, -0.983953153100761, 0.791033581672091, -6.8412675453713, -2.13220775034537, 0.168156756752688, 0.74847870243044, 10.9478494644138, 2.46985456273753, -4.25332931619438, -5.40167047930949, 3.8653155715927},
    {-0.166651250744412, -0.254076229866053, -0.00207444389583111, 0.00408676345644253, -0.83930318250343, 0.843451763282122, 0.412471684741477, 0.0124043766476787, -0.851759201191517, 0.847610620412826, 0.839489657846747, -1.70418305944426, -0.0125502039336865, 0.0020744438958307, -3.34111478755477, -2.43078290388538, 0.00846344047724278, 5.02368489539951, 4.97426914583307, -3.3655115289736},
    {0.0284519885895504, 0.144404852480165, 0.112510132872043, -0.476828742421246, 0.770092661876835, -0.625268741371702, -0.102490991456384, 0.0744580708918004, 0.396942787048868, -0.541766707553999, -0.137948627261756, 0.120413674769406, 0.25538000277032, -0.112510132872042, 0.905510143612146, -2.4151475949953, 0.221448739650925, -4.90551790813829, 1.52464125834906, 4.7632251331596},
    {0.301838512878361, -0.205046501096969, -0.104968387372838, 0.558413563752634, -1.31819808869835, 3.33674653543936, -1.61267148190583, 3.53442791686545, -4.08976687604123, 2.07121842930021, -0.330102835654293, -0.0627721467942685, -0.049015675892113, 0.10496838737284, 1.97199240023563, 0.45407800356421, -0.509397887860525, -5.31467576905373, 0.92689223192841, 0.336039669033032},
    {-0.214931053408135, 4.47130665780948, -0.186776869441444, 1.08724376572787, -2.7774036719993, 4.81161007679396, 1.32792627404088, -3.55009547364757, 5.60136117736064, -7.63556758215531, 0.0827827028271216, 0.0544605179988071, 0.0688221614263021, 0.186776869441448, -0.584574185882326, -0.487582499457324, -1.15606592715418, 2.01139468565161, 3.21052565345782, -6.32121327939036},
    {0.19878740778315, 0.331151129149576, 2.43126124889147, -4.22296640201701, 3.83140874482675, -1.77154516365358, -0.0292656387595146, -0.0373649897979767, -0.0994013794271978, -0.363906528948034, -1.32287813742145, 3.99928715231124, -8.53000770878168, -2.43126124889146, 0.26300992332405, -1.52251730781447, 12.7529741107987, 0.562653478956218, -6.30817858932353, 2.26875989879476},
    {0.277267046794341, -0.254076229866052, 0.122884998935064, 2.84806573410179, -2.67839468575464, 1.29762465236407, -0.468166362019543, 0.02628583573971, 0.0252519780206645, 0.393437731330879, -1.35862649610453, 2.63440165020285, -2.47197761433737, -0.122884998935063, 2.69321658119866, -7.32488410846702, -0.376088119764425, -0.228783532523625, 7.36887714401882, -2.40343120493457},
    {0.279859949979359, 0.144404852480165, -0.0708941283558447, 0.571606675659047, 3.39768548765414, -0.961956769168771, -0.966611479529826, 1.11708282404809, -0.369657467220858, -0.20507867975693, -0.805166780786985, 0.658423457059707, -0.0502238486124484, 0.0708941283558446, 3.03742426214139, -2.75670539752569, -0.521382827046598, -4.17253327383765, -1.29940354718816, 2.90223256165201},
    {-0.00695528566621165, -0.205046501096969, 0.0633458270077663, -0.412534790193033, 1.45558922180394, 5.13348214037493, 0.0234097954513042, -0.00858264956954605, -0.0773081834832253, 0.274482824364647, 0.0777228527055182, -0.0219130559060293, -0.0205924422149892, -0.0633458270077663, -0.522913723101304, 0.202063514894866, 0.433127232408023, 1.76191506404812, -1.63573968079278, -6.45020633402726},
    {-0.580418202458521, 4.47130665780948, -0.208324039550395, 1.2740429333762, -3.52090687830039, 7.40251443534277, 3.38409799111768, -8.30124510870124, 11.2527306029367, -10.2264719407041, 0.294150500663028, 0.133036646120529, 0.122818214410103, 0.208324039550398, -1.87112298328205, -0.994863028393307, -1.39686114778632, 5.40353754594159, 4.38273326057317, -11.2290794986653},
    {-0.265014114266623, 0.331151129149573, 13.834744032906, -10.5692108047617, 6.30309028991443, -2.19496330862434, -0.0997108611165299, -0.0244652585618401, -0.00147251122730428, 0.0595116160227279, 1.82323946637209, -5.45991162690676, 9.65035777270708, -13.834744032906, 0.572999577472534, -1.33142344487637, 0.918853032054592, 0.0995747792725217, 0.488244781868697, -0.300850514492815},
    {-0.360196355442047, -0.254076229866052, 3.36393308119058, 8.02384734601463, -4.49222507988478, 1.60777075218981, 0.347770539587768, 0.117013536724379, 0.0661968774908166, 0.0832916315051351, 1.9682007881626, -4.39251450676554, 5.1066227428558, -3.36393308119058, -2.20101605882964, 6.26674551680446, -13.1304700888704, -0.744409771248186, 2.61799406984587, -0.630545710274586},
    {-0.523007535959896, 0.144404852480166, -0.204342955151714, 4.29364975421987, 6.08211476310002, -1.19187467309817, 1.42500964321212, -1.06818755544309, -0.00305862846176565, 0.0248392241724696, 1.89909441629402, -2.36211035058201, 0.935467421091651, 0.204342955151714, -5.68703692189587, 8.41731783883042, -5.22911717531151, 5.12861273125299, -12.1373222513484, -0.148795552552965},
    {-0.724098989520658, -0.205046501096967, 0.115950866538885, -0.891616896035121, 4.75095109663144, 6.36043899686019, 3.19566758690996, -5.37796707981331, 4.06391901564158, -0.952474032120608, 1.36627374208847, -0.432963699121131, -0.12834394499728, -0.115950866538887, -6.51812169372463, 2.38557504590405, 1.01996084103241, 12.6782043627556, -6.70356244341437, -13.8867954079796},
    {-0.906018665657215, 4.47130665780948, -0.200954197773879, 1.27296432732307, -3.7261393971525, 9.17179415490005, 5.13800763126339, -12.1219799542288, 15.4144359910745, -11.9957516602614, 0.538150986141446, 0.193336545918998, 0.15148813410842, 0.200954197773881, -3.26824920669385, -1.33142497325855, -1.4244524614315, 8.74385643360338, 4.86422782449205, -15.185552367951}};
    // Array of non-zero columns
    static const unsigned int nzc1[20] = {0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20};
    
    // Number of operations to compute geometry constants: 12
    const double G0 = det*(Jinv_10*Jinv_10 + Jinv_11*Jinv_11);
    const double G1 = det*(Jinv_00*Jinv_10 + Jinv_01*Jinv_11);
    const double G2 = det*(Jinv_00*Jinv_00 + Jinv_01*Jinv_01);
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('simplify expressions', True), ('ignore zero tables', True), ('non zero columns', True), ('remove zero terms', True), ('ignore ones', True)
    // Total number of operations to compute element tensor: 120087
    
    // Loop quadrature points for integral
    // Number of operations to compute element tensor for following IP loop = 120075
    for (unsigned int ip = 0; ip < 25; ip++)
    {
      
      // Number of operations to compute ip constants: 3
      // Number of operations: 1
      const double Gip0 = W25[ip]*G0;
      
      // Number of operations: 1
      const double Gip1 = W25[ip]*G1;
      
      // Number of operations: 1
      const double Gip2 = W25[ip]*G2;
      
      
      // Number of operations for primary indices = 4800
      for (unsigned int j = 0; j < 20; j++)
      {
        for (unsigned int k = 0; k < 20; k++)
        {
          // Number of operations to compute entry = 3
          A[nzc1[j]*21 + nzc1[k]] += FE0_D01[ip][j]*FE0_D01[ip][k]*Gip0;
          // Number of operations to compute entry = 3
          A[nzc0[j]*21 + nzc1[k]] += FE0_D01[ip][k]*FE0_D10[ip][j]*Gip1;
          // Number of operations to compute entry = 3
          A[nzc0[j]*21 + nzc0[k]] += FE0_D10[ip][j]*FE0_D10[ip][k]*Gip2;
          // Number of operations to compute entry = 3
          A[nzc1[j]*21 + nzc0[k]] += FE0_D01[ip][j]*FE0_D10[ip][k]*Gip1;
        }// end loop over 'k'
      }// end loop over 'j'
    }// end loop over 'ip'
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class poisson2d_5_0_cell_integral_0: public ufc::cell_integral
{
private:

  poisson2d_5_0_cell_integral_0_quadrature integral_0_quadrature;

public:

  /// Constructor
  poisson2d_5_0_cell_integral_0() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~poisson2d_5_0_cell_integral_0()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Reset values of the element tensor block
    A[0] = 0;
    A[1] = 0;
    A[2] = 0;
    A[3] = 0;
    A[4] = 0;
    A[5] = 0;
    A[6] = 0;
    A[7] = 0;
    A[8] = 0;
    A[9] = 0;
    A[10] = 0;
    A[11] = 0;
    A[12] = 0;
    A[13] = 0;
    A[14] = 0;
    A[15] = 0;
    A[16] = 0;
    A[17] = 0;
    A[18] = 0;
    A[19] = 0;
    A[20] = 0;
    A[21] = 0;
    A[22] = 0;
    A[23] = 0;
    A[24] = 0;
    A[25] = 0;
    A[26] = 0;
    A[27] = 0;
    A[28] = 0;
    A[29] = 0;
    A[30] = 0;
    A[31] = 0;
    A[32] = 0;
    A[33] = 0;
    A[34] = 0;
    A[35] = 0;
    A[36] = 0;
    A[37] = 0;
    A[38] = 0;
    A[39] = 0;
    A[40] = 0;
    A[41] = 0;
    A[42] = 0;
    A[43] = 0;
    A[44] = 0;
    A[45] = 0;
    A[46] = 0;
    A[47] = 0;
    A[48] = 0;
    A[49] = 0;
    A[50] = 0;
    A[51] = 0;
    A[52] = 0;
    A[53] = 0;
    A[54] = 0;
    A[55] = 0;
    A[56] = 0;
    A[57] = 0;
    A[58] = 0;
    A[59] = 0;
    A[60] = 0;
    A[61] = 0;
    A[62] = 0;
    A[63] = 0;
    A[64] = 0;
    A[65] = 0;
    A[66] = 0;
    A[67] = 0;
    A[68] = 0;
    A[69] = 0;
    A[70] = 0;
    A[71] = 0;
    A[72] = 0;
    A[73] = 0;
    A[74] = 0;
    A[75] = 0;
    A[76] = 0;
    A[77] = 0;
    A[78] = 0;
    A[79] = 0;
    A[80] = 0;
    A[81] = 0;
    A[82] = 0;
    A[83] = 0;
    A[84] = 0;
    A[85] = 0;
    A[86] = 0;
    A[87] = 0;
    A[88] = 0;
    A[89] = 0;
    A[90] = 0;
    A[91] = 0;
    A[92] = 0;
    A[93] = 0;
    A[94] = 0;
    A[95] = 0;
    A[96] = 0;
    A[97] = 0;
    A[98] = 0;
    A[99] = 0;
    A[100] = 0;
    A[101] = 0;
    A[102] = 0;
    A[103] = 0;
    A[104] = 0;
    A[105] = 0;
    A[106] = 0;
    A[107] = 0;
    A[108] = 0;
    A[109] = 0;
    A[110] = 0;
    A[111] = 0;
    A[112] = 0;
    A[113] = 0;
    A[114] = 0;
    A[115] = 0;
    A[116] = 0;
    A[117] = 0;
    A[118] = 0;
    A[119] = 0;
    A[120] = 0;
    A[121] = 0;
    A[122] = 0;
    A[123] = 0;
    A[124] = 0;
    A[125] = 0;
    A[126] = 0;
    A[127] = 0;
    A[128] = 0;
    A[129] = 0;
    A[130] = 0;
    A[131] = 0;
    A[132] = 0;
    A[133] = 0;
    A[134] = 0;
    A[135] = 0;
    A[136] = 0;
    A[137] = 0;
    A[138] = 0;
    A[139] = 0;
    A[140] = 0;
    A[141] = 0;
    A[142] = 0;
    A[143] = 0;
    A[144] = 0;
    A[145] = 0;
    A[146] = 0;
    A[147] = 0;
    A[148] = 0;
    A[149] = 0;
    A[150] = 0;
    A[151] = 0;
    A[152] = 0;
    A[153] = 0;
    A[154] = 0;
    A[155] = 0;
    A[156] = 0;
    A[157] = 0;
    A[158] = 0;
    A[159] = 0;
    A[160] = 0;
    A[161] = 0;
    A[162] = 0;
    A[163] = 0;
    A[164] = 0;
    A[165] = 0;
    A[166] = 0;
    A[167] = 0;
    A[168] = 0;
    A[169] = 0;
    A[170] = 0;
    A[171] = 0;
    A[172] = 0;
    A[173] = 0;
    A[174] = 0;
    A[175] = 0;
    A[176] = 0;
    A[177] = 0;
    A[178] = 0;
    A[179] = 0;
    A[180] = 0;
    A[181] = 0;
    A[182] = 0;
    A[183] = 0;
    A[184] = 0;
    A[185] = 0;
    A[186] = 0;
    A[187] = 0;
    A[188] = 0;
    A[189] = 0;
    A[190] = 0;
    A[191] = 0;
    A[192] = 0;
    A[193] = 0;
    A[194] = 0;
    A[195] = 0;
    A[196] = 0;
    A[197] = 0;
    A[198] = 0;
    A[199] = 0;
    A[200] = 0;
    A[201] = 0;
    A[202] = 0;
    A[203] = 0;
    A[204] = 0;
    A[205] = 0;
    A[206] = 0;
    A[207] = 0;
    A[208] = 0;
    A[209] = 0;
    A[210] = 0;
    A[211] = 0;
    A[212] = 0;
    A[213] = 0;
    A[214] = 0;
    A[215] = 0;
    A[216] = 0;
    A[217] = 0;
    A[218] = 0;
    A[219] = 0;
    A[220] = 0;
    A[221] = 0;
    A[222] = 0;
    A[223] = 0;
    A[224] = 0;
    A[225] = 0;
    A[226] = 0;
    A[227] = 0;
    A[228] = 0;
    A[229] = 0;
    A[230] = 0;
    A[231] = 0;
    A[232] = 0;
    A[233] = 0;
    A[234] = 0;
    A[235] = 0;
    A[236] = 0;
    A[237] = 0;
    A[238] = 0;
    A[239] = 0;
    A[240] = 0;
    A[241] = 0;
    A[242] = 0;
    A[243] = 0;
    A[244] = 0;
    A[245] = 0;
    A[246] = 0;
    A[247] = 0;
    A[248] = 0;
    A[249] = 0;
    A[250] = 0;
    A[251] = 0;
    A[252] = 0;
    A[253] = 0;
    A[254] = 0;
    A[255] = 0;
    A[256] = 0;
    A[257] = 0;
    A[258] = 0;
    A[259] = 0;
    A[260] = 0;
    A[261] = 0;
    A[262] = 0;
    A[263] = 0;
    A[264] = 0;
    A[265] = 0;
    A[266] = 0;
    A[267] = 0;
    A[268] = 0;
    A[269] = 0;
    A[270] = 0;
    A[271] = 0;
    A[272] = 0;
    A[273] = 0;
    A[274] = 0;
    A[275] = 0;
    A[276] = 0;
    A[277] = 0;
    A[278] = 0;
    A[279] = 0;
    A[280] = 0;
    A[281] = 0;
    A[282] = 0;
    A[283] = 0;
    A[284] = 0;
    A[285] = 0;
    A[286] = 0;
    A[287] = 0;
    A[288] = 0;
    A[289] = 0;
    A[290] = 0;
    A[291] = 0;
    A[292] = 0;
    A[293] = 0;
    A[294] = 0;
    A[295] = 0;
    A[296] = 0;
    A[297] = 0;
    A[298] = 0;
    A[299] = 0;
    A[300] = 0;
    A[301] = 0;
    A[302] = 0;
    A[303] = 0;
    A[304] = 0;
    A[305] = 0;
    A[306] = 0;
    A[307] = 0;
    A[308] = 0;
    A[309] = 0;
    A[310] = 0;
    A[311] = 0;
    A[312] = 0;
    A[313] = 0;
    A[314] = 0;
    A[315] = 0;
    A[316] = 0;
    A[317] = 0;
    A[318] = 0;
    A[319] = 0;
    A[320] = 0;
    A[321] = 0;
    A[322] = 0;
    A[323] = 0;
    A[324] = 0;
    A[325] = 0;
    A[326] = 0;
    A[327] = 0;
    A[328] = 0;
    A[329] = 0;
    A[330] = 0;
    A[331] = 0;
    A[332] = 0;
    A[333] = 0;
    A[334] = 0;
    A[335] = 0;
    A[336] = 0;
    A[337] = 0;
    A[338] = 0;
    A[339] = 0;
    A[340] = 0;
    A[341] = 0;
    A[342] = 0;
    A[343] = 0;
    A[344] = 0;
    A[345] = 0;
    A[346] = 0;
    A[347] = 0;
    A[348] = 0;
    A[349] = 0;
    A[350] = 0;
    A[351] = 0;
    A[352] = 0;
    A[353] = 0;
    A[354] = 0;
    A[355] = 0;
    A[356] = 0;
    A[357] = 0;
    A[358] = 0;
    A[359] = 0;
    A[360] = 0;
    A[361] = 0;
    A[362] = 0;
    A[363] = 0;
    A[364] = 0;
    A[365] = 0;
    A[366] = 0;
    A[367] = 0;
    A[368] = 0;
    A[369] = 0;
    A[370] = 0;
    A[371] = 0;
    A[372] = 0;
    A[373] = 0;
    A[374] = 0;
    A[375] = 0;
    A[376] = 0;
    A[377] = 0;
    A[378] = 0;
    A[379] = 0;
    A[380] = 0;
    A[381] = 0;
    A[382] = 0;
    A[383] = 0;
    A[384] = 0;
    A[385] = 0;
    A[386] = 0;
    A[387] = 0;
    A[388] = 0;
    A[389] = 0;
    A[390] = 0;
    A[391] = 0;
    A[392] = 0;
    A[393] = 0;
    A[394] = 0;
    A[395] = 0;
    A[396] = 0;
    A[397] = 0;
    A[398] = 0;
    A[399] = 0;
    A[400] = 0;
    A[401] = 0;
    A[402] = 0;
    A[403] = 0;
    A[404] = 0;
    A[405] = 0;
    A[406] = 0;
    A[407] = 0;
    A[408] = 0;
    A[409] = 0;
    A[410] = 0;
    A[411] = 0;
    A[412] = 0;
    A[413] = 0;
    A[414] = 0;
    A[415] = 0;
    A[416] = 0;
    A[417] = 0;
    A[418] = 0;
    A[419] = 0;
    A[420] = 0;
    A[421] = 0;
    A[422] = 0;
    A[423] = 0;
    A[424] = 0;
    A[425] = 0;
    A[426] = 0;
    A[427] = 0;
    A[428] = 0;
    A[429] = 0;
    A[430] = 0;
    A[431] = 0;
    A[432] = 0;
    A[433] = 0;
    A[434] = 0;
    A[435] = 0;
    A[436] = 0;
    A[437] = 0;
    A[438] = 0;
    A[439] = 0;
    A[440] = 0;
    
    // Add all contributions to element tensor
    integral_0_quadrature.tabulate_tensor(A, w, c);
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class poisson2d_5_form_0: public ufc::form
{
public:

  /// Constructor
  poisson2d_5_form_0() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~poisson2d_5_form_0()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "Form([Integral(IndexSum(Product(SpatialDerivative(BasisFunction(FiniteElement('Lagrange', Cell('triangle', 1), 5), 0), MultiIndex((Index(0),), {Index(0): 2})), SpatialDerivative(BasisFunction(FiniteElement('Lagrange', Cell('triangle', 1), 5), 1), MultiIndex((Index(0),), {Index(0): 2}))), MultiIndex((Index(0),), {Index(0): 2})), Measure('cell', 0, None))])";
  }

  /// Return the rank of the global tensor (r)
  virtual unsigned int rank() const
  {
    return 2;
  }

  /// Return the number of coefficients (n)
  virtual unsigned int num_coefficients() const
  {
    return 0;
  }

  /// Return the number of cell integrals
  virtual unsigned int num_cell_integrals() const
  {
    return 1;
  }
  
  /// Return the number of exterior facet integrals
  virtual unsigned int num_exterior_facet_integrals() const
  {
    return 0;
  }
  
  /// Return the number of interior facet integrals
  virtual unsigned int num_interior_facet_integrals() const
  {
    return 0;
  }
    
  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new poisson2d_5_0_finite_element_0();
      break;
    case 1:
      return new poisson2d_5_0_finite_element_1();
      break;
    }
    return 0;
  }
  
  /// Create a new dof map for argument function i
  virtual ufc::dof_map* create_dof_map(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new poisson2d_5_0_dof_map_0();
      break;
    case 1:
      return new poisson2d_5_0_dof_map_1();
      break;
    }
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(unsigned int i) const
  {
    return new poisson2d_5_0_cell_integral_0();
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(unsigned int i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(unsigned int i) const
  {
    return 0;
  }

};

/// This class defines the interface for a finite element.

class poisson2d_5_1_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  poisson2d_5_1_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~poisson2d_5_1_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', 'triangle', 5)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 21;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
      
    // Compute determinant of Jacobian
    const double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Get coordinates and map to the reference (UFC) element
    double x = (element_coordinates[0][1]*element_coordinates[2][0] -\
                element_coordinates[0][0]*element_coordinates[2][1] +\
                J_11*coordinates[0] - J_01*coordinates[1]) / detJ;
    double y = (element_coordinates[1][1]*element_coordinates[0][0] -\
                element_coordinates[1][0]*element_coordinates[0][1] -\
                J_10*coordinates[0] + J_00*coordinates[1]) / detJ;
    
    // Map coordinates to the reference square
    if (std::abs(y - 1.0) < 1e-14)
      x = -1.0;
    else
      x = 2.0 *x/(1.0 - y) - 1.0;
    y = 2.0*y - 1.0;
    
    // Reset values
    *values = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    const double scalings_y_4 = scalings_y_3*(0.5 - 0.5*y);
    const double scalings_y_5 = scalings_y_4*(0.5 - 0.5*y);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    const double psitilde_a_4 = 1.75*x*psitilde_a_3 - 0.75*psitilde_a_2;
    const double psitilde_a_5 = 1.8*x*psitilde_a_4 - 0.8*psitilde_a_3;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_0_4 = 0.0285714285714286*psitilde_bs_0_3 + 1.8*y*psitilde_bs_0_3 - 0.771428571428571*psitilde_bs_0_2;
    const double psitilde_bs_0_5 = 0.0185185185185185*psitilde_bs_0_4 + 1.83333333333333*y*psitilde_bs_0_4 - 0.814814814814815*psitilde_bs_0_3;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_1_3 = 0.285714285714286*psitilde_bs_1_2 + 2*y*psitilde_bs_1_2 - 0.714285714285714*psitilde_bs_1_1;
    const double psitilde_bs_1_4 = 0.178571428571429*psitilde_bs_1_3 + 1.96428571428571*y*psitilde_bs_1_3 - 0.785714285714286*psitilde_bs_1_2;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_2_2 = 1.02040816326531*psitilde_bs_2_1 + 2.57142857142857*y*psitilde_bs_2_1 - 0.551020408163265*psitilde_bs_2_0;
    const double psitilde_bs_2_3 = 0.578703703703704*psitilde_bs_2_2 + 2.29166666666667*y*psitilde_bs_2_2 - 0.712962962962963*psitilde_bs_2_1;
    const double psitilde_bs_3_0 = 1;
    const double psitilde_bs_3_1 = 4.5*y + 3.5;
    const double psitilde_bs_3_2 = 1.51234567901235*psitilde_bs_3_1 + 3.05555555555556*y*psitilde_bs_3_1 - 0.54320987654321*psitilde_bs_3_0;
    const double psitilde_bs_4_0 = 1;
    const double psitilde_bs_4_1 = 5.5*y + 4.5;
    const double psitilde_bs_5_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.707106781186548*psitilde_a_0*scalings_y_0*psitilde_bs_0_0;
    const double basisvalue1 = 1.73205080756888*psitilde_a_1*scalings_y_1*psitilde_bs_1_0;
    const double basisvalue2 = psitilde_a_0*scalings_y_0*psitilde_bs_0_1;
    const double basisvalue3 = 2.73861278752583*psitilde_a_2*scalings_y_2*psitilde_bs_2_0;
    const double basisvalue4 = 2.12132034355964*psitilde_a_1*scalings_y_1*psitilde_bs_1_1;
    const double basisvalue5 = 1.22474487139159*psitilde_a_0*scalings_y_0*psitilde_bs_0_2;
    const double basisvalue6 = 3.74165738677394*psitilde_a_3*scalings_y_3*psitilde_bs_3_0;
    const double basisvalue7 = 3.16227766016838*psitilde_a_2*scalings_y_2*psitilde_bs_2_1;
    const double basisvalue8 = 2.44948974278318*psitilde_a_1*scalings_y_1*psitilde_bs_1_2;
    const double basisvalue9 = 1.4142135623731*psitilde_a_0*scalings_y_0*psitilde_bs_0_3;
    const double basisvalue10 = 4.74341649025257*psitilde_a_4*scalings_y_4*psitilde_bs_4_0;
    const double basisvalue11 = 4.18330013267038*psitilde_a_3*scalings_y_3*psitilde_bs_3_1;
    const double basisvalue12 = 3.53553390593274*psitilde_a_2*scalings_y_2*psitilde_bs_2_2;
    const double basisvalue13 = 2.73861278752583*psitilde_a_1*scalings_y_1*psitilde_bs_1_3;
    const double basisvalue14 = 1.58113883008419*psitilde_a_0*scalings_y_0*psitilde_bs_0_4;
    const double basisvalue15 = 5.74456264653803*psitilde_a_5*scalings_y_5*psitilde_bs_5_0;
    const double basisvalue16 = 5.19615242270663*psitilde_a_4*scalings_y_4*psitilde_bs_4_1;
    const double basisvalue17 = 4.58257569495584*psitilde_a_3*scalings_y_3*psitilde_bs_3_2;
    const double basisvalue18 = 3.87298334620742*psitilde_a_2*scalings_y_2*psitilde_bs_2_3;
    const double basisvalue19 = 3*psitilde_a_1*scalings_y_1*psitilde_bs_1_4;
    const double basisvalue20 = 1.73205080756888*psitilde_a_0*scalings_y_0*psitilde_bs_0_5;
    
    // Table(s) of coefficients
    const static double coefficients0[21][21] = \
    {{0.0154328860973255, -0.00945067404923496, -0.00545634920634919, 0.0301875307266957, 0.0233831607535234, 0.013500274155551, -0.0231997605826757, -0.0196073763651313, -0.0151878084249949, -0.00876868528257126, 0.0213898651255978, 0.0188640878998484, 0.0159430641501296, 0.0123494443881937, 0.00712995504186595, -0.0179891757560038, -0.0162718217101153, -0.0143503978743156, -0.0121282998205249, -0.00939454064454065, -0.00542394057003844},
    {0.0154328860973254, 0.00945067404923495, -0.0054563492063492, 0.0301875307266957, -0.0233831607535234, 0.013500274155551, 0.0231997605826757, -0.0196073763651313, 0.0151878084249949, -0.00876868528257127, 0.0213898651255978, -0.0188640878998484, 0.0159430641501296, -0.0123494443881937, 0.00712995504186593, 0.0179891757560038, -0.0162718217101153, 0.0143503978743156, -0.0121282998205249, 0.00939454064454064, -0.00542394057003842},
    {0.0154328860973254, 0, 0.0109126984126984, 0, 0, 0.0405008224666531, 0, 0, 0, 0.0350747411302851, 0, 0, 0, 0, 0.0356497752093297, 0, 0, 0, 0, 0, 0.0325436434202305},
    {0.0350747411302851, 0.126008987323133, -0.0843253968253968, 0.101882916202598, -0.0286443719230661, 0.00202504112333268, 0.0773325352755857, -0.0261431684868418, 0, 0.00584579018838089, 0.0356497752093296, 0.0125760585998989, -0.0385290716961465, 0.0442521757243607, -0.0297081460077747, 0, 0.0325436434202305, -0.0516614323475361, 0.0582158391385193, -0.0526094276094276, 0.0325436434202305},
    {0.0350747411302851, -0.0329341671412733, 0.121527777777778, -0.0113203240225109, 0.0754106934301129, -0.0222754523566592, 0, 0.104572673947367, -0.101252056166633, 0.0584579018838084, 0, 0.0565922636995452, -0.00930012075424224, -0.0401356942616295, 0.0415914044108846, 0, 0, 0.0516614323475361, -0.101877718492409, 0.118371212121212, -0.0813591085505763},
    {0.0350747411302851, 0.0887790592503889, -0.0892857142857142, 0.0301875307266957, 0.0432588473940183, -0.0594012062844245, 0, 0.0261431684868417, 0.101252056166633, -0.116915803767617, 0, 0, 0.0744009660339381, -0.0308736109704842, -0.0118832584031099, 0, 0, 0, 0.0679184789949393, -0.131523569023569, 0.108478811400768},
    {0.035074741130285, -0.010023442173431, 0.151289682539682, 0, 0.0502737956200753, 0.0931518916733021, 0, 0, 0.0506260280833164, 0.0643036920721893, 0, 0, 0, 0.0720384255977965, -0.0237665168062198, 0, 0, 0, 0, 0.0657617845117845, -0.0813591085505763},
    {0.0350747411302849, -0.126008987323133, -0.0843253968253968, 0.101882916202598, 0.0286443719230662, 0.00202504112333268, -0.0773325352755857, -0.0261431684868418, 0, 0.00584579018838086, 0.0356497752093297, -0.0125760585998989, -0.0385290716961465, -0.0442521757243607, -0.0297081460077747, 0, 0.0325436434202305, 0.0516614323475361, 0.0582158391385193, 0.0526094276094276, 0.0325436434202305},
    {0.0350747411302851, 0.0329341671412733, 0.121527777777778, -0.0113203240225109, -0.075410693430113, -0.0222754523566592, 0, 0.104572673947367, 0.101252056166633, 0.0584579018838084, 0, -0.0565922636995451, -0.00930012075424224, 0.0401356942616295, 0.0415914044108846, 0, 0, -0.0516614323475361, -0.101877718492409, -0.118371212121212, -0.0813591085505763},
    {0.0350747411302851, -0.0887790592503889, -0.0892857142857142, 0.0301875307266957, -0.0432588473940183, -0.0594012062844245, 0, 0.0261431684868417, -0.101252056166633, -0.116915803767617, 0, 0, 0.0744009660339381, 0.0308736109704842, -0.0118832584031099, 0, 0, 0, 0.0679184789949393, 0.131523569023569, 0.108478811400768},
    {0.0350747411302851, 0.010023442173431, 0.151289682539682, 0, -0.0502737956200753, 0.0931518916733021, 0, 0, -0.0506260280833164, 0.0643036920721892, 0, 0, 0, -0.0720384255977965, -0.0237665168062198, 0, 0, 0, 0, -0.0657617845117845, -0.0813591085505762},
    {0.035074741130285, -0.136032429496564, -0.0669642857142857, 0.0369797251402022, 0.0789181675431415, 0.0600762199922021, -0.00773325352755854, -0.0457505448519731, -0.055688630891648, -0.0379976362244755, -0.0641695953767934, -0.012576058599899, 0.017271652829307, 0.0277862498734357, 0.0202015392852868, 0.0899458787800191, 0.0488154651303458, 0.0200905570240418, 0.00242565996410498, -0.00563672438672438, -0.00542394057003844},
    {0.0350747411302852, 0.121713226391662, -0.0322420634920635, -0.0671672558668978, -0.0321518460360948, 0.0276755620188796, 0.139198563496054, 0.0653579212171044, -0.0101252056166633, -0.0292289509419042, 0.0427797302511956, -0.0565922636995451, -0.0332147169794367, 0.00926208329114533, 0.0202015392852867, -0.179891757560038, -0.0325436434202306, 0.0114803182994525, 0.00970263985641986, -0.00187890812890816, -0.00542394057003839},
    {0.035074741130285, -0.121713226391662, -0.0322420634920635, -0.0671672558668978, 0.0321518460360947, 0.0276755620188796, -0.139198563496054, 0.0653579212171043, 0.0101252056166633, -0.0292289509419043, 0.0427797302511956, 0.0565922636995452, -0.0332147169794366, -0.00926208329114533, 0.0202015392852869, 0.179891757560038, -0.0325436434202305, -0.0114803182994525, 0.00970263985641991, 0.00187890812890817, -0.00542394057003844},
    {0.0350747411302851, 0.136032429496564, -0.0669642857142857, 0.0369797251402022, -0.0789181675431415, 0.0600762199922021, 0.00773325352755854, -0.045750544851973, 0.055688630891648, -0.0379976362244755, -0.0641695953767934, 0.0125760585998989, 0.017271652829307, -0.0277862498734358, 0.0202015392852868, -0.0899458787800191, 0.0488154651303457, -0.0200905570240418, 0.00242565996410496, 0.00563672438672439, -0.00542394057003841},
    {0.280597929042281, -0.214788046573521, -0.124007936507937, 0.0905625921800869, 0.116915803767617, 0, 0.154665070551171, 0.0784295054605253, 0.101252056166633, 0.0818410626373319, -0.142599100837319, 0.0251521171997979, -0.0318861283002592, -0.107028518031012, -0.0950660672248791, 0, -0.130174573680922, -0.103322864695072, -0.0291079195692597, 0.0263047138047138, 0.0325436434202305},
    {0.0350747411302848, 0, -0.124007936507937, -0.38489101676537, 0, 0.101252056166633, 0, -0.104572673947367, 0, 0.0467663215070468, 0.213898651255978, 0, 0.140830399992811, 0, -0.095066067224879, 0, 0.195261860521383, 0, -0.0582158391385193, 0, 0.0325436434202305},
    {0.280597929042281, 0.214788046573522, -0.124007936507937, 0.090562592180087, -0.116915803767617, 0, -0.154665070551172, 0.0784295054605253, -0.101252056166633, 0.0818410626373319, -0.142599100837319, -0.0251521171997978, -0.0318861283002592, 0.107028518031012, -0.0950660672248792, 0, -0.130174573680922, 0.103322864695072, -0.0291079195692597, -0.0263047138047138, 0.0325436434202306},
    {0.035074741130285, -0.107394023286761, 0.0620039682539683, 0.0113203240225109, -0.306903984889995, -0.253130140416582, 0, -0.104572673947367, 0, 0.0467663215070468, 0, 0.169776791098635, 0.00930012075424229, 0.126581804978985, 0.172307246845094, 0, 0, 0.154984297042608, 0.101877718492409, -0.0394570707070708, -0.0813591085505764},
    {0.035074741130285, 0.107394023286761, 0.0620039682539682, 0.011320324022511, 0.306903984889994, -0.253130140416582, 0, -0.104572673947367, 0, 0.0467663215070468, 0, -0.169776791098635, 0.00930012075424223, -0.126581804978985, 0.172307246845093, 0, 0, -0.154984297042608, 0.101877718492409, 0.0394570707070707, -0.0813591085505763},
    {0.280597929042281, 0, 0.248015873015873, -0.0603750614533914, 0, 0.13500274155551, 0, -0.0522863369736836, 0, -0.210448446781711, 0, 0, -0.148801932067876, 0, -0.142599100837319, 0, 0, 0, -0.135836957989879, 0, 0.108478811400768}};
    
    // Extract relevant coefficients
    const double coeff0_0 = coefficients0[dof][0];
    const double coeff0_1 = coefficients0[dof][1];
    const double coeff0_2 = coefficients0[dof][2];
    const double coeff0_3 = coefficients0[dof][3];
    const double coeff0_4 = coefficients0[dof][4];
    const double coeff0_5 = coefficients0[dof][5];
    const double coeff0_6 = coefficients0[dof][6];
    const double coeff0_7 = coefficients0[dof][7];
    const double coeff0_8 = coefficients0[dof][8];
    const double coeff0_9 = coefficients0[dof][9];
    const double coeff0_10 = coefficients0[dof][10];
    const double coeff0_11 = coefficients0[dof][11];
    const double coeff0_12 = coefficients0[dof][12];
    const double coeff0_13 = coefficients0[dof][13];
    const double coeff0_14 = coefficients0[dof][14];
    const double coeff0_15 = coefficients0[dof][15];
    const double coeff0_16 = coefficients0[dof][16];
    const double coeff0_17 = coefficients0[dof][17];
    const double coeff0_18 = coefficients0[dof][18];
    const double coeff0_19 = coefficients0[dof][19];
    const double coeff0_20 = coefficients0[dof][20];
    
    // Compute value(s)
    *values = coeff0_0*basisvalue0 + coeff0_1*basisvalue1 + coeff0_2*basisvalue2 + coeff0_3*basisvalue3 + coeff0_4*basisvalue4 + coeff0_5*basisvalue5 + coeff0_6*basisvalue6 + coeff0_7*basisvalue7 + coeff0_8*basisvalue8 + coeff0_9*basisvalue9 + coeff0_10*basisvalue10 + coeff0_11*basisvalue11 + coeff0_12*basisvalue12 + coeff0_13*basisvalue13 + coeff0_14*basisvalue14 + coeff0_15*basisvalue15 + coeff0_16*basisvalue16 + coeff0_17*basisvalue17 + coeff0_18*basisvalue18 + coeff0_19*basisvalue19 + coeff0_20*basisvalue20;
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis() is not yet implemented.");
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
      
    // Compute determinant of Jacobian
    const double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Get coordinates and map to the reference (UFC) element
    double x = (element_coordinates[0][1]*element_coordinates[2][0] -\
                element_coordinates[0][0]*element_coordinates[2][1] +\
                J_11*coordinates[0] - J_01*coordinates[1]) / detJ;
    double y = (element_coordinates[1][1]*element_coordinates[0][0] -\
                element_coordinates[1][0]*element_coordinates[0][1] -\
                J_10*coordinates[0] + J_00*coordinates[1]) / detJ;
    
    // Map coordinates to the reference square
    if (std::abs(y - 1.0) < 1e-14)
      x = -1.0;
    else
      x = 2.0 *x/(1.0 - y) - 1.0;
    y = 2.0*y - 1.0;
    
    // Compute number of derivatives
    unsigned int num_derivatives = 1;
    
    for (unsigned int j = 0; j < n; j++)
      num_derivatives *= 2;
    
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      combinations[j] = new unsigned int [n];
      for (unsigned int k = 0; k < n; k++)
        combinations[j][k] = 0;
    }
        
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] =  {{J_11 / detJ, -J_01 / detJ}, {-J_10 / detJ, J_00 / detJ}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values
    for (unsigned int j = 0; j < 1*num_derivatives; j++)
      values[j] = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    const double scalings_y_4 = scalings_y_3*(0.5 - 0.5*y);
    const double scalings_y_5 = scalings_y_4*(0.5 - 0.5*y);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    const double psitilde_a_4 = 1.75*x*psitilde_a_3 - 0.75*psitilde_a_2;
    const double psitilde_a_5 = 1.8*x*psitilde_a_4 - 0.8*psitilde_a_3;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_0_4 = 0.0285714285714286*psitilde_bs_0_3 + 1.8*y*psitilde_bs_0_3 - 0.771428571428571*psitilde_bs_0_2;
    const double psitilde_bs_0_5 = 0.0185185185185185*psitilde_bs_0_4 + 1.83333333333333*y*psitilde_bs_0_4 - 0.814814814814815*psitilde_bs_0_3;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_1_3 = 0.285714285714286*psitilde_bs_1_2 + 2*y*psitilde_bs_1_2 - 0.714285714285714*psitilde_bs_1_1;
    const double psitilde_bs_1_4 = 0.178571428571429*psitilde_bs_1_3 + 1.96428571428571*y*psitilde_bs_1_3 - 0.785714285714286*psitilde_bs_1_2;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_2_2 = 1.02040816326531*psitilde_bs_2_1 + 2.57142857142857*y*psitilde_bs_2_1 - 0.551020408163265*psitilde_bs_2_0;
    const double psitilde_bs_2_3 = 0.578703703703704*psitilde_bs_2_2 + 2.29166666666667*y*psitilde_bs_2_2 - 0.712962962962963*psitilde_bs_2_1;
    const double psitilde_bs_3_0 = 1;
    const double psitilde_bs_3_1 = 4.5*y + 3.5;
    const double psitilde_bs_3_2 = 1.51234567901235*psitilde_bs_3_1 + 3.05555555555556*y*psitilde_bs_3_1 - 0.54320987654321*psitilde_bs_3_0;
    const double psitilde_bs_4_0 = 1;
    const double psitilde_bs_4_1 = 5.5*y + 4.5;
    const double psitilde_bs_5_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.707106781186548*psitilde_a_0*scalings_y_0*psitilde_bs_0_0;
    const double basisvalue1 = 1.73205080756888*psitilde_a_1*scalings_y_1*psitilde_bs_1_0;
    const double basisvalue2 = psitilde_a_0*scalings_y_0*psitilde_bs_0_1;
    const double basisvalue3 = 2.73861278752583*psitilde_a_2*scalings_y_2*psitilde_bs_2_0;
    const double basisvalue4 = 2.12132034355964*psitilde_a_1*scalings_y_1*psitilde_bs_1_1;
    const double basisvalue5 = 1.22474487139159*psitilde_a_0*scalings_y_0*psitilde_bs_0_2;
    const double basisvalue6 = 3.74165738677394*psitilde_a_3*scalings_y_3*psitilde_bs_3_0;
    const double basisvalue7 = 3.16227766016838*psitilde_a_2*scalings_y_2*psitilde_bs_2_1;
    const double basisvalue8 = 2.44948974278318*psitilde_a_1*scalings_y_1*psitilde_bs_1_2;
    const double basisvalue9 = 1.4142135623731*psitilde_a_0*scalings_y_0*psitilde_bs_0_3;
    const double basisvalue10 = 4.74341649025257*psitilde_a_4*scalings_y_4*psitilde_bs_4_0;
    const double basisvalue11 = 4.18330013267038*psitilde_a_3*scalings_y_3*psitilde_bs_3_1;
    const double basisvalue12 = 3.53553390593274*psitilde_a_2*scalings_y_2*psitilde_bs_2_2;
    const double basisvalue13 = 2.73861278752583*psitilde_a_1*scalings_y_1*psitilde_bs_1_3;
    const double basisvalue14 = 1.58113883008419*psitilde_a_0*scalings_y_0*psitilde_bs_0_4;
    const double basisvalue15 = 5.74456264653803*psitilde_a_5*scalings_y_5*psitilde_bs_5_0;
    const double basisvalue16 = 5.19615242270663*psitilde_a_4*scalings_y_4*psitilde_bs_4_1;
    const double basisvalue17 = 4.58257569495584*psitilde_a_3*scalings_y_3*psitilde_bs_3_2;
    const double basisvalue18 = 3.87298334620742*psitilde_a_2*scalings_y_2*psitilde_bs_2_3;
    const double basisvalue19 = 3*psitilde_a_1*scalings_y_1*psitilde_bs_1_4;
    const double basisvalue20 = 1.73205080756888*psitilde_a_0*scalings_y_0*psitilde_bs_0_5;
    
    // Table(s) of coefficients
    const static double coefficients0[21][21] = \
    {{0.0154328860973255, -0.00945067404923496, -0.00545634920634919, 0.0301875307266957, 0.0233831607535234, 0.013500274155551, -0.0231997605826757, -0.0196073763651313, -0.0151878084249949, -0.00876868528257126, 0.0213898651255978, 0.0188640878998484, 0.0159430641501296, 0.0123494443881937, 0.00712995504186595, -0.0179891757560038, -0.0162718217101153, -0.0143503978743156, -0.0121282998205249, -0.00939454064454065, -0.00542394057003844},
    {0.0154328860973254, 0.00945067404923495, -0.0054563492063492, 0.0301875307266957, -0.0233831607535234, 0.013500274155551, 0.0231997605826757, -0.0196073763651313, 0.0151878084249949, -0.00876868528257127, 0.0213898651255978, -0.0188640878998484, 0.0159430641501296, -0.0123494443881937, 0.00712995504186593, 0.0179891757560038, -0.0162718217101153, 0.0143503978743156, -0.0121282998205249, 0.00939454064454064, -0.00542394057003842},
    {0.0154328860973254, 0, 0.0109126984126984, 0, 0, 0.0405008224666531, 0, 0, 0, 0.0350747411302851, 0, 0, 0, 0, 0.0356497752093297, 0, 0, 0, 0, 0, 0.0325436434202305},
    {0.0350747411302851, 0.126008987323133, -0.0843253968253968, 0.101882916202598, -0.0286443719230661, 0.00202504112333268, 0.0773325352755857, -0.0261431684868418, 0, 0.00584579018838089, 0.0356497752093296, 0.0125760585998989, -0.0385290716961465, 0.0442521757243607, -0.0297081460077747, 0, 0.0325436434202305, -0.0516614323475361, 0.0582158391385193, -0.0526094276094276, 0.0325436434202305},
    {0.0350747411302851, -0.0329341671412733, 0.121527777777778, -0.0113203240225109, 0.0754106934301129, -0.0222754523566592, 0, 0.104572673947367, -0.101252056166633, 0.0584579018838084, 0, 0.0565922636995452, -0.00930012075424224, -0.0401356942616295, 0.0415914044108846, 0, 0, 0.0516614323475361, -0.101877718492409, 0.118371212121212, -0.0813591085505763},
    {0.0350747411302851, 0.0887790592503889, -0.0892857142857142, 0.0301875307266957, 0.0432588473940183, -0.0594012062844245, 0, 0.0261431684868417, 0.101252056166633, -0.116915803767617, 0, 0, 0.0744009660339381, -0.0308736109704842, -0.0118832584031099, 0, 0, 0, 0.0679184789949393, -0.131523569023569, 0.108478811400768},
    {0.035074741130285, -0.010023442173431, 0.151289682539682, 0, 0.0502737956200753, 0.0931518916733021, 0, 0, 0.0506260280833164, 0.0643036920721893, 0, 0, 0, 0.0720384255977965, -0.0237665168062198, 0, 0, 0, 0, 0.0657617845117845, -0.0813591085505763},
    {0.0350747411302849, -0.126008987323133, -0.0843253968253968, 0.101882916202598, 0.0286443719230662, 0.00202504112333268, -0.0773325352755857, -0.0261431684868418, 0, 0.00584579018838086, 0.0356497752093297, -0.0125760585998989, -0.0385290716961465, -0.0442521757243607, -0.0297081460077747, 0, 0.0325436434202305, 0.0516614323475361, 0.0582158391385193, 0.0526094276094276, 0.0325436434202305},
    {0.0350747411302851, 0.0329341671412733, 0.121527777777778, -0.0113203240225109, -0.075410693430113, -0.0222754523566592, 0, 0.104572673947367, 0.101252056166633, 0.0584579018838084, 0, -0.0565922636995451, -0.00930012075424224, 0.0401356942616295, 0.0415914044108846, 0, 0, -0.0516614323475361, -0.101877718492409, -0.118371212121212, -0.0813591085505763},
    {0.0350747411302851, -0.0887790592503889, -0.0892857142857142, 0.0301875307266957, -0.0432588473940183, -0.0594012062844245, 0, 0.0261431684868417, -0.101252056166633, -0.116915803767617, 0, 0, 0.0744009660339381, 0.0308736109704842, -0.0118832584031099, 0, 0, 0, 0.0679184789949393, 0.131523569023569, 0.108478811400768},
    {0.0350747411302851, 0.010023442173431, 0.151289682539682, 0, -0.0502737956200753, 0.0931518916733021, 0, 0, -0.0506260280833164, 0.0643036920721892, 0, 0, 0, -0.0720384255977965, -0.0237665168062198, 0, 0, 0, 0, -0.0657617845117845, -0.0813591085505762},
    {0.035074741130285, -0.136032429496564, -0.0669642857142857, 0.0369797251402022, 0.0789181675431415, 0.0600762199922021, -0.00773325352755854, -0.0457505448519731, -0.055688630891648, -0.0379976362244755, -0.0641695953767934, -0.012576058599899, 0.017271652829307, 0.0277862498734357, 0.0202015392852868, 0.0899458787800191, 0.0488154651303458, 0.0200905570240418, 0.00242565996410498, -0.00563672438672438, -0.00542394057003844},
    {0.0350747411302852, 0.121713226391662, -0.0322420634920635, -0.0671672558668978, -0.0321518460360948, 0.0276755620188796, 0.139198563496054, 0.0653579212171044, -0.0101252056166633, -0.0292289509419042, 0.0427797302511956, -0.0565922636995451, -0.0332147169794367, 0.00926208329114533, 0.0202015392852867, -0.179891757560038, -0.0325436434202306, 0.0114803182994525, 0.00970263985641986, -0.00187890812890816, -0.00542394057003839},
    {0.035074741130285, -0.121713226391662, -0.0322420634920635, -0.0671672558668978, 0.0321518460360947, 0.0276755620188796, -0.139198563496054, 0.0653579212171043, 0.0101252056166633, -0.0292289509419043, 0.0427797302511956, 0.0565922636995452, -0.0332147169794366, -0.00926208329114533, 0.0202015392852869, 0.179891757560038, -0.0325436434202305, -0.0114803182994525, 0.00970263985641991, 0.00187890812890817, -0.00542394057003844},
    {0.0350747411302851, 0.136032429496564, -0.0669642857142857, 0.0369797251402022, -0.0789181675431415, 0.0600762199922021, 0.00773325352755854, -0.045750544851973, 0.055688630891648, -0.0379976362244755, -0.0641695953767934, 0.0125760585998989, 0.017271652829307, -0.0277862498734358, 0.0202015392852868, -0.0899458787800191, 0.0488154651303457, -0.0200905570240418, 0.00242565996410496, 0.00563672438672439, -0.00542394057003841},
    {0.280597929042281, -0.214788046573521, -0.124007936507937, 0.0905625921800869, 0.116915803767617, 0, 0.154665070551171, 0.0784295054605253, 0.101252056166633, 0.0818410626373319, -0.142599100837319, 0.0251521171997979, -0.0318861283002592, -0.107028518031012, -0.0950660672248791, 0, -0.130174573680922, -0.103322864695072, -0.0291079195692597, 0.0263047138047138, 0.0325436434202305},
    {0.0350747411302848, 0, -0.124007936507937, -0.38489101676537, 0, 0.101252056166633, 0, -0.104572673947367, 0, 0.0467663215070468, 0.213898651255978, 0, 0.140830399992811, 0, -0.095066067224879, 0, 0.195261860521383, 0, -0.0582158391385193, 0, 0.0325436434202305},
    {0.280597929042281, 0.214788046573522, -0.124007936507937, 0.090562592180087, -0.116915803767617, 0, -0.154665070551172, 0.0784295054605253, -0.101252056166633, 0.0818410626373319, -0.142599100837319, -0.0251521171997978, -0.0318861283002592, 0.107028518031012, -0.0950660672248792, 0, -0.130174573680922, 0.103322864695072, -0.0291079195692597, -0.0263047138047138, 0.0325436434202306},
    {0.035074741130285, -0.107394023286761, 0.0620039682539683, 0.0113203240225109, -0.306903984889995, -0.253130140416582, 0, -0.104572673947367, 0, 0.0467663215070468, 0, 0.169776791098635, 0.00930012075424229, 0.126581804978985, 0.172307246845094, 0, 0, 0.154984297042608, 0.101877718492409, -0.0394570707070708, -0.0813591085505764},
    {0.035074741130285, 0.107394023286761, 0.0620039682539682, 0.011320324022511, 0.306903984889994, -0.253130140416582, 0, -0.104572673947367, 0, 0.0467663215070468, 0, -0.169776791098635, 0.00930012075424223, -0.126581804978985, 0.172307246845093, 0, 0, -0.154984297042608, 0.101877718492409, 0.0394570707070707, -0.0813591085505763},
    {0.280597929042281, 0, 0.248015873015873, -0.0603750614533914, 0, 0.13500274155551, 0, -0.0522863369736836, 0, -0.210448446781711, 0, 0, -0.148801932067876, 0, -0.142599100837319, 0, 0, 0, -0.135836957989879, 0, 0.108478811400768}};
    
    // Interesting (new) part
    // Tables of derivatives of the polynomial base (transpose)
    const static double dmats0[21][21] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.89897948556636, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 9.48683298050514, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.00000000000001, 0, 7.07106781186549, 0, 0, 0, 0, 0, 0, 1.16417292472804e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.29150262212918, 0, -2.99332590941915, 13.6626010212795, 0, 0.61101009266078, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 4.38178046004133, 0, 0, 12.5219806739988, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.46410161513776, 0, 7.83836717690617, 0, 0, 8.4, 0, 1.10537384317744e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 10.9544511501033, 0, 0, -3.83325938999965, 0, 17.7482393492989, 0, 0.553283335172474, 0, 0, 0, 0, 0, 0, 1.27307810205487e-14, 0, 0, 0, 0, 0},
    {4.7328638264797, 0, 3.34664010613632, 4.36435780471985, 0, -5.07468037933237, 0, 17.0084012854152, 0, 1.52127765851135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-2.33146835171283e-14, 2.44948974278318, 0, 0, 9.14285714285714, 0, 0, 0, 14.8461497791618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.09838667696593, 0, 7.66811580507233, 0, 0, 10.733126291999, 0, 1.33103889053491e-14, 0, 9.2951600308978, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.41602560309064, 0, -4.37680963545758, 15.7321327225523, 0, 2.01017818278147, 0, -4.03686713879669, 0, -0.51581196219913, 21.799082549502, 0, 0.451335466924227, 0, 0.0576695305542354, 0, -1.43860401382688e-14, 0, 0, 0, 0},
    {0, 6.85714285714287, -1.24344978758018e-14, 0, 9.97292252418866, 0, 4.32049379893858, 0, -7.27309832077592, -1.77635683940025e-14, 0, 21.2540192277445, 0, 1.49078803979367, 0, 0, 0, 0, 0, 0, 0},
    {4.32049379893859, 0, 5.93552661441899, 1.79284291400158, -1.09007371339341e-14, -0.320713490294921, 0, 9.20087412456474, 1.77508364925071e-14, -5.96639619853425, 0, 0, 19.8022632451351, 0, 2.53024038425529, 0, 0, 0, 0, 0, 0},
    {0, 1.53330375599988, 1.06581410364015e-14, 0, 6.3379324511312, 0, 0, 0, 13.5526185435788, 1.06581410364015e-14, 0, 0, 0, 16.6675169851115, 0, 0, 0, 0, 0, 2.04281036531029e-14, 0},
    {2.82842712474619, 0, 7.31428571428572, 0, 0, 11.337638238025, 0, 1.43431765232015e-14, 0, 12.9299525702683, 0, 0, 0, 0, 9.93858693195776, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    const static double dmats1[21][21] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.44948974278318, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.24264068711929, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.58198889747161, 4.74341649025257, -0.912870929175276, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.00000000000001, 6.12372435695794, 3.53553390593274, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-2.3094010767585, 0, 8.16496580927726, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330392, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.23606797749979, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823012, 0, -1.09822442744009e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.73205080756887, -5.09116882454314, 3.91918358845308, 0, 9.69948452238571, 4.20000000000001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5, 0, -2.8284271247462, 0, 0, 12.1243556529821, 0, 0, 0, -2.62767238523587e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.21337401931543e-14},
    {2.68328157299975, 5.47722557505167, -1.89736659610103, 7.42307488958091, -1.91662969499983, 0.663940002206988, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499897, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.36643191323984, 2.8982753492379, 1.67332005306815, 2.18217890235993, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270761, -2.1957751641342, 0.760638829255669, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2, 1.2247448713916, 3.53553390593274, -7.37711113563318, 4.57142857142857, 1.64957219768464, 0, 11.4997781699989, 7.42307488958092, -2.57142857142858, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.54919333848295, 6.6407830863536, 3.83405790253617, 0, -6.19677335393187, 5.3665631459995, 0, 1.19249726392026e-14, 13.4164078649988, 4.64758001544891, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-3.57770876399968, 0, 8.85437744847148, 0, 0, -3.09838667696593, 0, 0, 0, 16.0996894379985, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.70801280154532, 5.68564249775212, -2.18840481772878, 7.86606636127615, -2.61129805863299, 1.00508909139074, 9.55297122675765, -2.01843356939834, 0.670059394260484, -0.257905981099562, 10.899541274751, -1.06805465250648, 0.225667733462113, -0.0749149177264377, 0.0288347652771174, 0, 0, 0, 0, 0, 0},
    {2.44948974278318, 3.42857142857144, 0.989743318610785, 3.04933917230523, 4.98646126209433, -2.72741187029097, 2.1602468994693, 8.34624849531682, -3.63654916038796, 1.51635079315149, 12.0498962651137, 10.6270096138723, -2.24536559755125, 0.745394019896834, -0.286902292026514, 0, 0, 0, 0, 0, 0},
    {2.16024689946929, 1.81422947044429, 2.96776330720949, 0.896421457000794, 5.41604758366942, -0.160356745147461, -9.52579344415681, 4.60043706228237, 5.3452248382485, -2.98319809926713, 0, 13.3887736279041, 9.90113162256757, -3.28687867566959, 1.26512019212764, 0, 0, 0, 0, 0, 0},
    {1.82574185835055, 0.766651877999946, 3.83609779052924, 8.6368042559214, 3.1689662255656, 3.65920700676626, 0, -8.74817765279707, 6.77630927178941, 0.521640530957285, 0, 0, 15.0623703313921, 8.33375849255573, -3.20766513935893, 0, 0, 0, 0, 1.33203386568115e-14, 0},
    {1.41421356237312, -6.73025456655334, 3.65714285714287, 0, 9.4550278170087, 5.66881911901249, 0, 1.73231507205905e-14, -6.99854212223763, 6.46497628513415, 0, 0, 0, 17.2141375215909, 4.96929346597888, 0, 0, 0, 0, 1.4597502674923e-14, 0},
    {5.7154760664941, 0, -4.61880215351699, 0, 0, 12.7279220613579, 0, 1.08255872864164e-14, 0, -3.26598632371089, 0, 0, 0, 0, 20.0831604418561, 0, 0, 0, 0, 0, 0}};
    
    // Compute reference derivatives
    // Declare pointer to array of derivatives on FIAT element
    double *derivatives = new double [num_derivatives];
    
    // Declare coefficients
    double coeff0_0 = 0;
    double coeff0_1 = 0;
    double coeff0_2 = 0;
    double coeff0_3 = 0;
    double coeff0_4 = 0;
    double coeff0_5 = 0;
    double coeff0_6 = 0;
    double coeff0_7 = 0;
    double coeff0_8 = 0;
    double coeff0_9 = 0;
    double coeff0_10 = 0;
    double coeff0_11 = 0;
    double coeff0_12 = 0;
    double coeff0_13 = 0;
    double coeff0_14 = 0;
    double coeff0_15 = 0;
    double coeff0_16 = 0;
    double coeff0_17 = 0;
    double coeff0_18 = 0;
    double coeff0_19 = 0;
    double coeff0_20 = 0;
    
    // Declare new coefficients
    double new_coeff0_0 = 0;
    double new_coeff0_1 = 0;
    double new_coeff0_2 = 0;
    double new_coeff0_3 = 0;
    double new_coeff0_4 = 0;
    double new_coeff0_5 = 0;
    double new_coeff0_6 = 0;
    double new_coeff0_7 = 0;
    double new_coeff0_8 = 0;
    double new_coeff0_9 = 0;
    double new_coeff0_10 = 0;
    double new_coeff0_11 = 0;
    double new_coeff0_12 = 0;
    double new_coeff0_13 = 0;
    double new_coeff0_14 = 0;
    double new_coeff0_15 = 0;
    double new_coeff0_16 = 0;
    double new_coeff0_17 = 0;
    double new_coeff0_18 = 0;
    double new_coeff0_19 = 0;
    double new_coeff0_20 = 0;
    
    // Loop possible derivatives
    for (unsigned int deriv_num = 0; deriv_num < num_derivatives; deriv_num++)
    {
      // Get values from coefficients array
      new_coeff0_0 = coefficients0[dof][0];
      new_coeff0_1 = coefficients0[dof][1];
      new_coeff0_2 = coefficients0[dof][2];
      new_coeff0_3 = coefficients0[dof][3];
      new_coeff0_4 = coefficients0[dof][4];
      new_coeff0_5 = coefficients0[dof][5];
      new_coeff0_6 = coefficients0[dof][6];
      new_coeff0_7 = coefficients0[dof][7];
      new_coeff0_8 = coefficients0[dof][8];
      new_coeff0_9 = coefficients0[dof][9];
      new_coeff0_10 = coefficients0[dof][10];
      new_coeff0_11 = coefficients0[dof][11];
      new_coeff0_12 = coefficients0[dof][12];
      new_coeff0_13 = coefficients0[dof][13];
      new_coeff0_14 = coefficients0[dof][14];
      new_coeff0_15 = coefficients0[dof][15];
      new_coeff0_16 = coefficients0[dof][16];
      new_coeff0_17 = coefficients0[dof][17];
      new_coeff0_18 = coefficients0[dof][18];
      new_coeff0_19 = coefficients0[dof][19];
      new_coeff0_20 = coefficients0[dof][20];
    
      // Loop derivative order
      for (unsigned int j = 0; j < n; j++)
      {
        // Update old coefficients
        coeff0_0 = new_coeff0_0;
        coeff0_1 = new_coeff0_1;
        coeff0_2 = new_coeff0_2;
        coeff0_3 = new_coeff0_3;
        coeff0_4 = new_coeff0_4;
        coeff0_5 = new_coeff0_5;
        coeff0_6 = new_coeff0_6;
        coeff0_7 = new_coeff0_7;
        coeff0_8 = new_coeff0_8;
        coeff0_9 = new_coeff0_9;
        coeff0_10 = new_coeff0_10;
        coeff0_11 = new_coeff0_11;
        coeff0_12 = new_coeff0_12;
        coeff0_13 = new_coeff0_13;
        coeff0_14 = new_coeff0_14;
        coeff0_15 = new_coeff0_15;
        coeff0_16 = new_coeff0_16;
        coeff0_17 = new_coeff0_17;
        coeff0_18 = new_coeff0_18;
        coeff0_19 = new_coeff0_19;
        coeff0_20 = new_coeff0_20;
    
        if(combinations[deriv_num][j] == 0)
        {
          new_coeff0_0 = coeff0_0*dmats0[0][0] + coeff0_1*dmats0[1][0] + coeff0_2*dmats0[2][0] + coeff0_3*dmats0[3][0] + coeff0_4*dmats0[4][0] + coeff0_5*dmats0[5][0] + coeff0_6*dmats0[6][0] + coeff0_7*dmats0[7][0] + coeff0_8*dmats0[8][0] + coeff0_9*dmats0[9][0] + coeff0_10*dmats0[10][0] + coeff0_11*dmats0[11][0] + coeff0_12*dmats0[12][0] + coeff0_13*dmats0[13][0] + coeff0_14*dmats0[14][0] + coeff0_15*dmats0[15][0] + coeff0_16*dmats0[16][0] + coeff0_17*dmats0[17][0] + coeff0_18*dmats0[18][0] + coeff0_19*dmats0[19][0] + coeff0_20*dmats0[20][0];
          new_coeff0_1 = coeff0_0*dmats0[0][1] + coeff0_1*dmats0[1][1] + coeff0_2*dmats0[2][1] + coeff0_3*dmats0[3][1] + coeff0_4*dmats0[4][1] + coeff0_5*dmats0[5][1] + coeff0_6*dmats0[6][1] + coeff0_7*dmats0[7][1] + coeff0_8*dmats0[8][1] + coeff0_9*dmats0[9][1] + coeff0_10*dmats0[10][1] + coeff0_11*dmats0[11][1] + coeff0_12*dmats0[12][1] + coeff0_13*dmats0[13][1] + coeff0_14*dmats0[14][1] + coeff0_15*dmats0[15][1] + coeff0_16*dmats0[16][1] + coeff0_17*dmats0[17][1] + coeff0_18*dmats0[18][1] + coeff0_19*dmats0[19][1] + coeff0_20*dmats0[20][1];
          new_coeff0_2 = coeff0_0*dmats0[0][2] + coeff0_1*dmats0[1][2] + coeff0_2*dmats0[2][2] + coeff0_3*dmats0[3][2] + coeff0_4*dmats0[4][2] + coeff0_5*dmats0[5][2] + coeff0_6*dmats0[6][2] + coeff0_7*dmats0[7][2] + coeff0_8*dmats0[8][2] + coeff0_9*dmats0[9][2] + coeff0_10*dmats0[10][2] + coeff0_11*dmats0[11][2] + coeff0_12*dmats0[12][2] + coeff0_13*dmats0[13][2] + coeff0_14*dmats0[14][2] + coeff0_15*dmats0[15][2] + coeff0_16*dmats0[16][2] + coeff0_17*dmats0[17][2] + coeff0_18*dmats0[18][2] + coeff0_19*dmats0[19][2] + coeff0_20*dmats0[20][2];
          new_coeff0_3 = coeff0_0*dmats0[0][3] + coeff0_1*dmats0[1][3] + coeff0_2*dmats0[2][3] + coeff0_3*dmats0[3][3] + coeff0_4*dmats0[4][3] + coeff0_5*dmats0[5][3] + coeff0_6*dmats0[6][3] + coeff0_7*dmats0[7][3] + coeff0_8*dmats0[8][3] + coeff0_9*dmats0[9][3] + coeff0_10*dmats0[10][3] + coeff0_11*dmats0[11][3] + coeff0_12*dmats0[12][3] + coeff0_13*dmats0[13][3] + coeff0_14*dmats0[14][3] + coeff0_15*dmats0[15][3] + coeff0_16*dmats0[16][3] + coeff0_17*dmats0[17][3] + coeff0_18*dmats0[18][3] + coeff0_19*dmats0[19][3] + coeff0_20*dmats0[20][3];
          new_coeff0_4 = coeff0_0*dmats0[0][4] + coeff0_1*dmats0[1][4] + coeff0_2*dmats0[2][4] + coeff0_3*dmats0[3][4] + coeff0_4*dmats0[4][4] + coeff0_5*dmats0[5][4] + coeff0_6*dmats0[6][4] + coeff0_7*dmats0[7][4] + coeff0_8*dmats0[8][4] + coeff0_9*dmats0[9][4] + coeff0_10*dmats0[10][4] + coeff0_11*dmats0[11][4] + coeff0_12*dmats0[12][4] + coeff0_13*dmats0[13][4] + coeff0_14*dmats0[14][4] + coeff0_15*dmats0[15][4] + coeff0_16*dmats0[16][4] + coeff0_17*dmats0[17][4] + coeff0_18*dmats0[18][4] + coeff0_19*dmats0[19][4] + coeff0_20*dmats0[20][4];
          new_coeff0_5 = coeff0_0*dmats0[0][5] + coeff0_1*dmats0[1][5] + coeff0_2*dmats0[2][5] + coeff0_3*dmats0[3][5] + coeff0_4*dmats0[4][5] + coeff0_5*dmats0[5][5] + coeff0_6*dmats0[6][5] + coeff0_7*dmats0[7][5] + coeff0_8*dmats0[8][5] + coeff0_9*dmats0[9][5] + coeff0_10*dmats0[10][5] + coeff0_11*dmats0[11][5] + coeff0_12*dmats0[12][5] + coeff0_13*dmats0[13][5] + coeff0_14*dmats0[14][5] + coeff0_15*dmats0[15][5] + coeff0_16*dmats0[16][5] + coeff0_17*dmats0[17][5] + coeff0_18*dmats0[18][5] + coeff0_19*dmats0[19][5] + coeff0_20*dmats0[20][5];
          new_coeff0_6 = coeff0_0*dmats0[0][6] + coeff0_1*dmats0[1][6] + coeff0_2*dmats0[2][6] + coeff0_3*dmats0[3][6] + coeff0_4*dmats0[4][6] + coeff0_5*dmats0[5][6] + coeff0_6*dmats0[6][6] + coeff0_7*dmats0[7][6] + coeff0_8*dmats0[8][6] + coeff0_9*dmats0[9][6] + coeff0_10*dmats0[10][6] + coeff0_11*dmats0[11][6] + coeff0_12*dmats0[12][6] + coeff0_13*dmats0[13][6] + coeff0_14*dmats0[14][6] + coeff0_15*dmats0[15][6] + coeff0_16*dmats0[16][6] + coeff0_17*dmats0[17][6] + coeff0_18*dmats0[18][6] + coeff0_19*dmats0[19][6] + coeff0_20*dmats0[20][6];
          new_coeff0_7 = coeff0_0*dmats0[0][7] + coeff0_1*dmats0[1][7] + coeff0_2*dmats0[2][7] + coeff0_3*dmats0[3][7] + coeff0_4*dmats0[4][7] + coeff0_5*dmats0[5][7] + coeff0_6*dmats0[6][7] + coeff0_7*dmats0[7][7] + coeff0_8*dmats0[8][7] + coeff0_9*dmats0[9][7] + coeff0_10*dmats0[10][7] + coeff0_11*dmats0[11][7] + coeff0_12*dmats0[12][7] + coeff0_13*dmats0[13][7] + coeff0_14*dmats0[14][7] + coeff0_15*dmats0[15][7] + coeff0_16*dmats0[16][7] + coeff0_17*dmats0[17][7] + coeff0_18*dmats0[18][7] + coeff0_19*dmats0[19][7] + coeff0_20*dmats0[20][7];
          new_coeff0_8 = coeff0_0*dmats0[0][8] + coeff0_1*dmats0[1][8] + coeff0_2*dmats0[2][8] + coeff0_3*dmats0[3][8] + coeff0_4*dmats0[4][8] + coeff0_5*dmats0[5][8] + coeff0_6*dmats0[6][8] + coeff0_7*dmats0[7][8] + coeff0_8*dmats0[8][8] + coeff0_9*dmats0[9][8] + coeff0_10*dmats0[10][8] + coeff0_11*dmats0[11][8] + coeff0_12*dmats0[12][8] + coeff0_13*dmats0[13][8] + coeff0_14*dmats0[14][8] + coeff0_15*dmats0[15][8] + coeff0_16*dmats0[16][8] + coeff0_17*dmats0[17][8] + coeff0_18*dmats0[18][8] + coeff0_19*dmats0[19][8] + coeff0_20*dmats0[20][8];
          new_coeff0_9 = coeff0_0*dmats0[0][9] + coeff0_1*dmats0[1][9] + coeff0_2*dmats0[2][9] + coeff0_3*dmats0[3][9] + coeff0_4*dmats0[4][9] + coeff0_5*dmats0[5][9] + coeff0_6*dmats0[6][9] + coeff0_7*dmats0[7][9] + coeff0_8*dmats0[8][9] + coeff0_9*dmats0[9][9] + coeff0_10*dmats0[10][9] + coeff0_11*dmats0[11][9] + coeff0_12*dmats0[12][9] + coeff0_13*dmats0[13][9] + coeff0_14*dmats0[14][9] + coeff0_15*dmats0[15][9] + coeff0_16*dmats0[16][9] + coeff0_17*dmats0[17][9] + coeff0_18*dmats0[18][9] + coeff0_19*dmats0[19][9] + coeff0_20*dmats0[20][9];
          new_coeff0_10 = coeff0_0*dmats0[0][10] + coeff0_1*dmats0[1][10] + coeff0_2*dmats0[2][10] + coeff0_3*dmats0[3][10] + coeff0_4*dmats0[4][10] + coeff0_5*dmats0[5][10] + coeff0_6*dmats0[6][10] + coeff0_7*dmats0[7][10] + coeff0_8*dmats0[8][10] + coeff0_9*dmats0[9][10] + coeff0_10*dmats0[10][10] + coeff0_11*dmats0[11][10] + coeff0_12*dmats0[12][10] + coeff0_13*dmats0[13][10] + coeff0_14*dmats0[14][10] + coeff0_15*dmats0[15][10] + coeff0_16*dmats0[16][10] + coeff0_17*dmats0[17][10] + coeff0_18*dmats0[18][10] + coeff0_19*dmats0[19][10] + coeff0_20*dmats0[20][10];
          new_coeff0_11 = coeff0_0*dmats0[0][11] + coeff0_1*dmats0[1][11] + coeff0_2*dmats0[2][11] + coeff0_3*dmats0[3][11] + coeff0_4*dmats0[4][11] + coeff0_5*dmats0[5][11] + coeff0_6*dmats0[6][11] + coeff0_7*dmats0[7][11] + coeff0_8*dmats0[8][11] + coeff0_9*dmats0[9][11] + coeff0_10*dmats0[10][11] + coeff0_11*dmats0[11][11] + coeff0_12*dmats0[12][11] + coeff0_13*dmats0[13][11] + coeff0_14*dmats0[14][11] + coeff0_15*dmats0[15][11] + coeff0_16*dmats0[16][11] + coeff0_17*dmats0[17][11] + coeff0_18*dmats0[18][11] + coeff0_19*dmats0[19][11] + coeff0_20*dmats0[20][11];
          new_coeff0_12 = coeff0_0*dmats0[0][12] + coeff0_1*dmats0[1][12] + coeff0_2*dmats0[2][12] + coeff0_3*dmats0[3][12] + coeff0_4*dmats0[4][12] + coeff0_5*dmats0[5][12] + coeff0_6*dmats0[6][12] + coeff0_7*dmats0[7][12] + coeff0_8*dmats0[8][12] + coeff0_9*dmats0[9][12] + coeff0_10*dmats0[10][12] + coeff0_11*dmats0[11][12] + coeff0_12*dmats0[12][12] + coeff0_13*dmats0[13][12] + coeff0_14*dmats0[14][12] + coeff0_15*dmats0[15][12] + coeff0_16*dmats0[16][12] + coeff0_17*dmats0[17][12] + coeff0_18*dmats0[18][12] + coeff0_19*dmats0[19][12] + coeff0_20*dmats0[20][12];
          new_coeff0_13 = coeff0_0*dmats0[0][13] + coeff0_1*dmats0[1][13] + coeff0_2*dmats0[2][13] + coeff0_3*dmats0[3][13] + coeff0_4*dmats0[4][13] + coeff0_5*dmats0[5][13] + coeff0_6*dmats0[6][13] + coeff0_7*dmats0[7][13] + coeff0_8*dmats0[8][13] + coeff0_9*dmats0[9][13] + coeff0_10*dmats0[10][13] + coeff0_11*dmats0[11][13] + coeff0_12*dmats0[12][13] + coeff0_13*dmats0[13][13] + coeff0_14*dmats0[14][13] + coeff0_15*dmats0[15][13] + coeff0_16*dmats0[16][13] + coeff0_17*dmats0[17][13] + coeff0_18*dmats0[18][13] + coeff0_19*dmats0[19][13] + coeff0_20*dmats0[20][13];
          new_coeff0_14 = coeff0_0*dmats0[0][14] + coeff0_1*dmats0[1][14] + coeff0_2*dmats0[2][14] + coeff0_3*dmats0[3][14] + coeff0_4*dmats0[4][14] + coeff0_5*dmats0[5][14] + coeff0_6*dmats0[6][14] + coeff0_7*dmats0[7][14] + coeff0_8*dmats0[8][14] + coeff0_9*dmats0[9][14] + coeff0_10*dmats0[10][14] + coeff0_11*dmats0[11][14] + coeff0_12*dmats0[12][14] + coeff0_13*dmats0[13][14] + coeff0_14*dmats0[14][14] + coeff0_15*dmats0[15][14] + coeff0_16*dmats0[16][14] + coeff0_17*dmats0[17][14] + coeff0_18*dmats0[18][14] + coeff0_19*dmats0[19][14] + coeff0_20*dmats0[20][14];
          new_coeff0_15 = coeff0_0*dmats0[0][15] + coeff0_1*dmats0[1][15] + coeff0_2*dmats0[2][15] + coeff0_3*dmats0[3][15] + coeff0_4*dmats0[4][15] + coeff0_5*dmats0[5][15] + coeff0_6*dmats0[6][15] + coeff0_7*dmats0[7][15] + coeff0_8*dmats0[8][15] + coeff0_9*dmats0[9][15] + coeff0_10*dmats0[10][15] + coeff0_11*dmats0[11][15] + coeff0_12*dmats0[12][15] + coeff0_13*dmats0[13][15] + coeff0_14*dmats0[14][15] + coeff0_15*dmats0[15][15] + coeff0_16*dmats0[16][15] + coeff0_17*dmats0[17][15] + coeff0_18*dmats0[18][15] + coeff0_19*dmats0[19][15] + coeff0_20*dmats0[20][15];
          new_coeff0_16 = coeff0_0*dmats0[0][16] + coeff0_1*dmats0[1][16] + coeff0_2*dmats0[2][16] + coeff0_3*dmats0[3][16] + coeff0_4*dmats0[4][16] + coeff0_5*dmats0[5][16] + coeff0_6*dmats0[6][16] + coeff0_7*dmats0[7][16] + coeff0_8*dmats0[8][16] + coeff0_9*dmats0[9][16] + coeff0_10*dmats0[10][16] + coeff0_11*dmats0[11][16] + coeff0_12*dmats0[12][16] + coeff0_13*dmats0[13][16] + coeff0_14*dmats0[14][16] + coeff0_15*dmats0[15][16] + coeff0_16*dmats0[16][16] + coeff0_17*dmats0[17][16] + coeff0_18*dmats0[18][16] + coeff0_19*dmats0[19][16] + coeff0_20*dmats0[20][16];
          new_coeff0_17 = coeff0_0*dmats0[0][17] + coeff0_1*dmats0[1][17] + coeff0_2*dmats0[2][17] + coeff0_3*dmats0[3][17] + coeff0_4*dmats0[4][17] + coeff0_5*dmats0[5][17] + coeff0_6*dmats0[6][17] + coeff0_7*dmats0[7][17] + coeff0_8*dmats0[8][17] + coeff0_9*dmats0[9][17] + coeff0_10*dmats0[10][17] + coeff0_11*dmats0[11][17] + coeff0_12*dmats0[12][17] + coeff0_13*dmats0[13][17] + coeff0_14*dmats0[14][17] + coeff0_15*dmats0[15][17] + coeff0_16*dmats0[16][17] + coeff0_17*dmats0[17][17] + coeff0_18*dmats0[18][17] + coeff0_19*dmats0[19][17] + coeff0_20*dmats0[20][17];
          new_coeff0_18 = coeff0_0*dmats0[0][18] + coeff0_1*dmats0[1][18] + coeff0_2*dmats0[2][18] + coeff0_3*dmats0[3][18] + coeff0_4*dmats0[4][18] + coeff0_5*dmats0[5][18] + coeff0_6*dmats0[6][18] + coeff0_7*dmats0[7][18] + coeff0_8*dmats0[8][18] + coeff0_9*dmats0[9][18] + coeff0_10*dmats0[10][18] + coeff0_11*dmats0[11][18] + coeff0_12*dmats0[12][18] + coeff0_13*dmats0[13][18] + coeff0_14*dmats0[14][18] + coeff0_15*dmats0[15][18] + coeff0_16*dmats0[16][18] + coeff0_17*dmats0[17][18] + coeff0_18*dmats0[18][18] + coeff0_19*dmats0[19][18] + coeff0_20*dmats0[20][18];
          new_coeff0_19 = coeff0_0*dmats0[0][19] + coeff0_1*dmats0[1][19] + coeff0_2*dmats0[2][19] + coeff0_3*dmats0[3][19] + coeff0_4*dmats0[4][19] + coeff0_5*dmats0[5][19] + coeff0_6*dmats0[6][19] + coeff0_7*dmats0[7][19] + coeff0_8*dmats0[8][19] + coeff0_9*dmats0[9][19] + coeff0_10*dmats0[10][19] + coeff0_11*dmats0[11][19] + coeff0_12*dmats0[12][19] + coeff0_13*dmats0[13][19] + coeff0_14*dmats0[14][19] + coeff0_15*dmats0[15][19] + coeff0_16*dmats0[16][19] + coeff0_17*dmats0[17][19] + coeff0_18*dmats0[18][19] + coeff0_19*dmats0[19][19] + coeff0_20*dmats0[20][19];
          new_coeff0_20 = coeff0_0*dmats0[0][20] + coeff0_1*dmats0[1][20] + coeff0_2*dmats0[2][20] + coeff0_3*dmats0[3][20] + coeff0_4*dmats0[4][20] + coeff0_5*dmats0[5][20] + coeff0_6*dmats0[6][20] + coeff0_7*dmats0[7][20] + coeff0_8*dmats0[8][20] + coeff0_9*dmats0[9][20] + coeff0_10*dmats0[10][20] + coeff0_11*dmats0[11][20] + coeff0_12*dmats0[12][20] + coeff0_13*dmats0[13][20] + coeff0_14*dmats0[14][20] + coeff0_15*dmats0[15][20] + coeff0_16*dmats0[16][20] + coeff0_17*dmats0[17][20] + coeff0_18*dmats0[18][20] + coeff0_19*dmats0[19][20] + coeff0_20*dmats0[20][20];
        }
        if(combinations[deriv_num][j] == 1)
        {
          new_coeff0_0 = coeff0_0*dmats1[0][0] + coeff0_1*dmats1[1][0] + coeff0_2*dmats1[2][0] + coeff0_3*dmats1[3][0] + coeff0_4*dmats1[4][0] + coeff0_5*dmats1[5][0] + coeff0_6*dmats1[6][0] + coeff0_7*dmats1[7][0] + coeff0_8*dmats1[8][0] + coeff0_9*dmats1[9][0] + coeff0_10*dmats1[10][0] + coeff0_11*dmats1[11][0] + coeff0_12*dmats1[12][0] + coeff0_13*dmats1[13][0] + coeff0_14*dmats1[14][0] + coeff0_15*dmats1[15][0] + coeff0_16*dmats1[16][0] + coeff0_17*dmats1[17][0] + coeff0_18*dmats1[18][0] + coeff0_19*dmats1[19][0] + coeff0_20*dmats1[20][0];
          new_coeff0_1 = coeff0_0*dmats1[0][1] + coeff0_1*dmats1[1][1] + coeff0_2*dmats1[2][1] + coeff0_3*dmats1[3][1] + coeff0_4*dmats1[4][1] + coeff0_5*dmats1[5][1] + coeff0_6*dmats1[6][1] + coeff0_7*dmats1[7][1] + coeff0_8*dmats1[8][1] + coeff0_9*dmats1[9][1] + coeff0_10*dmats1[10][1] + coeff0_11*dmats1[11][1] + coeff0_12*dmats1[12][1] + coeff0_13*dmats1[13][1] + coeff0_14*dmats1[14][1] + coeff0_15*dmats1[15][1] + coeff0_16*dmats1[16][1] + coeff0_17*dmats1[17][1] + coeff0_18*dmats1[18][1] + coeff0_19*dmats1[19][1] + coeff0_20*dmats1[20][1];
          new_coeff0_2 = coeff0_0*dmats1[0][2] + coeff0_1*dmats1[1][2] + coeff0_2*dmats1[2][2] + coeff0_3*dmats1[3][2] + coeff0_4*dmats1[4][2] + coeff0_5*dmats1[5][2] + coeff0_6*dmats1[6][2] + coeff0_7*dmats1[7][2] + coeff0_8*dmats1[8][2] + coeff0_9*dmats1[9][2] + coeff0_10*dmats1[10][2] + coeff0_11*dmats1[11][2] + coeff0_12*dmats1[12][2] + coeff0_13*dmats1[13][2] + coeff0_14*dmats1[14][2] + coeff0_15*dmats1[15][2] + coeff0_16*dmats1[16][2] + coeff0_17*dmats1[17][2] + coeff0_18*dmats1[18][2] + coeff0_19*dmats1[19][2] + coeff0_20*dmats1[20][2];
          new_coeff0_3 = coeff0_0*dmats1[0][3] + coeff0_1*dmats1[1][3] + coeff0_2*dmats1[2][3] + coeff0_3*dmats1[3][3] + coeff0_4*dmats1[4][3] + coeff0_5*dmats1[5][3] + coeff0_6*dmats1[6][3] + coeff0_7*dmats1[7][3] + coeff0_8*dmats1[8][3] + coeff0_9*dmats1[9][3] + coeff0_10*dmats1[10][3] + coeff0_11*dmats1[11][3] + coeff0_12*dmats1[12][3] + coeff0_13*dmats1[13][3] + coeff0_14*dmats1[14][3] + coeff0_15*dmats1[15][3] + coeff0_16*dmats1[16][3] + coeff0_17*dmats1[17][3] + coeff0_18*dmats1[18][3] + coeff0_19*dmats1[19][3] + coeff0_20*dmats1[20][3];
          new_coeff0_4 = coeff0_0*dmats1[0][4] + coeff0_1*dmats1[1][4] + coeff0_2*dmats1[2][4] + coeff0_3*dmats1[3][4] + coeff0_4*dmats1[4][4] + coeff0_5*dmats1[5][4] + coeff0_6*dmats1[6][4] + coeff0_7*dmats1[7][4] + coeff0_8*dmats1[8][4] + coeff0_9*dmats1[9][4] + coeff0_10*dmats1[10][4] + coeff0_11*dmats1[11][4] + coeff0_12*dmats1[12][4] + coeff0_13*dmats1[13][4] + coeff0_14*dmats1[14][4] + coeff0_15*dmats1[15][4] + coeff0_16*dmats1[16][4] + coeff0_17*dmats1[17][4] + coeff0_18*dmats1[18][4] + coeff0_19*dmats1[19][4] + coeff0_20*dmats1[20][4];
          new_coeff0_5 = coeff0_0*dmats1[0][5] + coeff0_1*dmats1[1][5] + coeff0_2*dmats1[2][5] + coeff0_3*dmats1[3][5] + coeff0_4*dmats1[4][5] + coeff0_5*dmats1[5][5] + coeff0_6*dmats1[6][5] + coeff0_7*dmats1[7][5] + coeff0_8*dmats1[8][5] + coeff0_9*dmats1[9][5] + coeff0_10*dmats1[10][5] + coeff0_11*dmats1[11][5] + coeff0_12*dmats1[12][5] + coeff0_13*dmats1[13][5] + coeff0_14*dmats1[14][5] + coeff0_15*dmats1[15][5] + coeff0_16*dmats1[16][5] + coeff0_17*dmats1[17][5] + coeff0_18*dmats1[18][5] + coeff0_19*dmats1[19][5] + coeff0_20*dmats1[20][5];
          new_coeff0_6 = coeff0_0*dmats1[0][6] + coeff0_1*dmats1[1][6] + coeff0_2*dmats1[2][6] + coeff0_3*dmats1[3][6] + coeff0_4*dmats1[4][6] + coeff0_5*dmats1[5][6] + coeff0_6*dmats1[6][6] + coeff0_7*dmats1[7][6] + coeff0_8*dmats1[8][6] + coeff0_9*dmats1[9][6] + coeff0_10*dmats1[10][6] + coeff0_11*dmats1[11][6] + coeff0_12*dmats1[12][6] + coeff0_13*dmats1[13][6] + coeff0_14*dmats1[14][6] + coeff0_15*dmats1[15][6] + coeff0_16*dmats1[16][6] + coeff0_17*dmats1[17][6] + coeff0_18*dmats1[18][6] + coeff0_19*dmats1[19][6] + coeff0_20*dmats1[20][6];
          new_coeff0_7 = coeff0_0*dmats1[0][7] + coeff0_1*dmats1[1][7] + coeff0_2*dmats1[2][7] + coeff0_3*dmats1[3][7] + coeff0_4*dmats1[4][7] + coeff0_5*dmats1[5][7] + coeff0_6*dmats1[6][7] + coeff0_7*dmats1[7][7] + coeff0_8*dmats1[8][7] + coeff0_9*dmats1[9][7] + coeff0_10*dmats1[10][7] + coeff0_11*dmats1[11][7] + coeff0_12*dmats1[12][7] + coeff0_13*dmats1[13][7] + coeff0_14*dmats1[14][7] + coeff0_15*dmats1[15][7] + coeff0_16*dmats1[16][7] + coeff0_17*dmats1[17][7] + coeff0_18*dmats1[18][7] + coeff0_19*dmats1[19][7] + coeff0_20*dmats1[20][7];
          new_coeff0_8 = coeff0_0*dmats1[0][8] + coeff0_1*dmats1[1][8] + coeff0_2*dmats1[2][8] + coeff0_3*dmats1[3][8] + coeff0_4*dmats1[4][8] + coeff0_5*dmats1[5][8] + coeff0_6*dmats1[6][8] + coeff0_7*dmats1[7][8] + coeff0_8*dmats1[8][8] + coeff0_9*dmats1[9][8] + coeff0_10*dmats1[10][8] + coeff0_11*dmats1[11][8] + coeff0_12*dmats1[12][8] + coeff0_13*dmats1[13][8] + coeff0_14*dmats1[14][8] + coeff0_15*dmats1[15][8] + coeff0_16*dmats1[16][8] + coeff0_17*dmats1[17][8] + coeff0_18*dmats1[18][8] + coeff0_19*dmats1[19][8] + coeff0_20*dmats1[20][8];
          new_coeff0_9 = coeff0_0*dmats1[0][9] + coeff0_1*dmats1[1][9] + coeff0_2*dmats1[2][9] + coeff0_3*dmats1[3][9] + coeff0_4*dmats1[4][9] + coeff0_5*dmats1[5][9] + coeff0_6*dmats1[6][9] + coeff0_7*dmats1[7][9] + coeff0_8*dmats1[8][9] + coeff0_9*dmats1[9][9] + coeff0_10*dmats1[10][9] + coeff0_11*dmats1[11][9] + coeff0_12*dmats1[12][9] + coeff0_13*dmats1[13][9] + coeff0_14*dmats1[14][9] + coeff0_15*dmats1[15][9] + coeff0_16*dmats1[16][9] + coeff0_17*dmats1[17][9] + coeff0_18*dmats1[18][9] + coeff0_19*dmats1[19][9] + coeff0_20*dmats1[20][9];
          new_coeff0_10 = coeff0_0*dmats1[0][10] + coeff0_1*dmats1[1][10] + coeff0_2*dmats1[2][10] + coeff0_3*dmats1[3][10] + coeff0_4*dmats1[4][10] + coeff0_5*dmats1[5][10] + coeff0_6*dmats1[6][10] + coeff0_7*dmats1[7][10] + coeff0_8*dmats1[8][10] + coeff0_9*dmats1[9][10] + coeff0_10*dmats1[10][10] + coeff0_11*dmats1[11][10] + coeff0_12*dmats1[12][10] + coeff0_13*dmats1[13][10] + coeff0_14*dmats1[14][10] + coeff0_15*dmats1[15][10] + coeff0_16*dmats1[16][10] + coeff0_17*dmats1[17][10] + coeff0_18*dmats1[18][10] + coeff0_19*dmats1[19][10] + coeff0_20*dmats1[20][10];
          new_coeff0_11 = coeff0_0*dmats1[0][11] + coeff0_1*dmats1[1][11] + coeff0_2*dmats1[2][11] + coeff0_3*dmats1[3][11] + coeff0_4*dmats1[4][11] + coeff0_5*dmats1[5][11] + coeff0_6*dmats1[6][11] + coeff0_7*dmats1[7][11] + coeff0_8*dmats1[8][11] + coeff0_9*dmats1[9][11] + coeff0_10*dmats1[10][11] + coeff0_11*dmats1[11][11] + coeff0_12*dmats1[12][11] + coeff0_13*dmats1[13][11] + coeff0_14*dmats1[14][11] + coeff0_15*dmats1[15][11] + coeff0_16*dmats1[16][11] + coeff0_17*dmats1[17][11] + coeff0_18*dmats1[18][11] + coeff0_19*dmats1[19][11] + coeff0_20*dmats1[20][11];
          new_coeff0_12 = coeff0_0*dmats1[0][12] + coeff0_1*dmats1[1][12] + coeff0_2*dmats1[2][12] + coeff0_3*dmats1[3][12] + coeff0_4*dmats1[4][12] + coeff0_5*dmats1[5][12] + coeff0_6*dmats1[6][12] + coeff0_7*dmats1[7][12] + coeff0_8*dmats1[8][12] + coeff0_9*dmats1[9][12] + coeff0_10*dmats1[10][12] + coeff0_11*dmats1[11][12] + coeff0_12*dmats1[12][12] + coeff0_13*dmats1[13][12] + coeff0_14*dmats1[14][12] + coeff0_15*dmats1[15][12] + coeff0_16*dmats1[16][12] + coeff0_17*dmats1[17][12] + coeff0_18*dmats1[18][12] + coeff0_19*dmats1[19][12] + coeff0_20*dmats1[20][12];
          new_coeff0_13 = coeff0_0*dmats1[0][13] + coeff0_1*dmats1[1][13] + coeff0_2*dmats1[2][13] + coeff0_3*dmats1[3][13] + coeff0_4*dmats1[4][13] + coeff0_5*dmats1[5][13] + coeff0_6*dmats1[6][13] + coeff0_7*dmats1[7][13] + coeff0_8*dmats1[8][13] + coeff0_9*dmats1[9][13] + coeff0_10*dmats1[10][13] + coeff0_11*dmats1[11][13] + coeff0_12*dmats1[12][13] + coeff0_13*dmats1[13][13] + coeff0_14*dmats1[14][13] + coeff0_15*dmats1[15][13] + coeff0_16*dmats1[16][13] + coeff0_17*dmats1[17][13] + coeff0_18*dmats1[18][13] + coeff0_19*dmats1[19][13] + coeff0_20*dmats1[20][13];
          new_coeff0_14 = coeff0_0*dmats1[0][14] + coeff0_1*dmats1[1][14] + coeff0_2*dmats1[2][14] + coeff0_3*dmats1[3][14] + coeff0_4*dmats1[4][14] + coeff0_5*dmats1[5][14] + coeff0_6*dmats1[6][14] + coeff0_7*dmats1[7][14] + coeff0_8*dmats1[8][14] + coeff0_9*dmats1[9][14] + coeff0_10*dmats1[10][14] + coeff0_11*dmats1[11][14] + coeff0_12*dmats1[12][14] + coeff0_13*dmats1[13][14] + coeff0_14*dmats1[14][14] + coeff0_15*dmats1[15][14] + coeff0_16*dmats1[16][14] + coeff0_17*dmats1[17][14] + coeff0_18*dmats1[18][14] + coeff0_19*dmats1[19][14] + coeff0_20*dmats1[20][14];
          new_coeff0_15 = coeff0_0*dmats1[0][15] + coeff0_1*dmats1[1][15] + coeff0_2*dmats1[2][15] + coeff0_3*dmats1[3][15] + coeff0_4*dmats1[4][15] + coeff0_5*dmats1[5][15] + coeff0_6*dmats1[6][15] + coeff0_7*dmats1[7][15] + coeff0_8*dmats1[8][15] + coeff0_9*dmats1[9][15] + coeff0_10*dmats1[10][15] + coeff0_11*dmats1[11][15] + coeff0_12*dmats1[12][15] + coeff0_13*dmats1[13][15] + coeff0_14*dmats1[14][15] + coeff0_15*dmats1[15][15] + coeff0_16*dmats1[16][15] + coeff0_17*dmats1[17][15] + coeff0_18*dmats1[18][15] + coeff0_19*dmats1[19][15] + coeff0_20*dmats1[20][15];
          new_coeff0_16 = coeff0_0*dmats1[0][16] + coeff0_1*dmats1[1][16] + coeff0_2*dmats1[2][16] + coeff0_3*dmats1[3][16] + coeff0_4*dmats1[4][16] + coeff0_5*dmats1[5][16] + coeff0_6*dmats1[6][16] + coeff0_7*dmats1[7][16] + coeff0_8*dmats1[8][16] + coeff0_9*dmats1[9][16] + coeff0_10*dmats1[10][16] + coeff0_11*dmats1[11][16] + coeff0_12*dmats1[12][16] + coeff0_13*dmats1[13][16] + coeff0_14*dmats1[14][16] + coeff0_15*dmats1[15][16] + coeff0_16*dmats1[16][16] + coeff0_17*dmats1[17][16] + coeff0_18*dmats1[18][16] + coeff0_19*dmats1[19][16] + coeff0_20*dmats1[20][16];
          new_coeff0_17 = coeff0_0*dmats1[0][17] + coeff0_1*dmats1[1][17] + coeff0_2*dmats1[2][17] + coeff0_3*dmats1[3][17] + coeff0_4*dmats1[4][17] + coeff0_5*dmats1[5][17] + coeff0_6*dmats1[6][17] + coeff0_7*dmats1[7][17] + coeff0_8*dmats1[8][17] + coeff0_9*dmats1[9][17] + coeff0_10*dmats1[10][17] + coeff0_11*dmats1[11][17] + coeff0_12*dmats1[12][17] + coeff0_13*dmats1[13][17] + coeff0_14*dmats1[14][17] + coeff0_15*dmats1[15][17] + coeff0_16*dmats1[16][17] + coeff0_17*dmats1[17][17] + coeff0_18*dmats1[18][17] + coeff0_19*dmats1[19][17] + coeff0_20*dmats1[20][17];
          new_coeff0_18 = coeff0_0*dmats1[0][18] + coeff0_1*dmats1[1][18] + coeff0_2*dmats1[2][18] + coeff0_3*dmats1[3][18] + coeff0_4*dmats1[4][18] + coeff0_5*dmats1[5][18] + coeff0_6*dmats1[6][18] + coeff0_7*dmats1[7][18] + coeff0_8*dmats1[8][18] + coeff0_9*dmats1[9][18] + coeff0_10*dmats1[10][18] + coeff0_11*dmats1[11][18] + coeff0_12*dmats1[12][18] + coeff0_13*dmats1[13][18] + coeff0_14*dmats1[14][18] + coeff0_15*dmats1[15][18] + coeff0_16*dmats1[16][18] + coeff0_17*dmats1[17][18] + coeff0_18*dmats1[18][18] + coeff0_19*dmats1[19][18] + coeff0_20*dmats1[20][18];
          new_coeff0_19 = coeff0_0*dmats1[0][19] + coeff0_1*dmats1[1][19] + coeff0_2*dmats1[2][19] + coeff0_3*dmats1[3][19] + coeff0_4*dmats1[4][19] + coeff0_5*dmats1[5][19] + coeff0_6*dmats1[6][19] + coeff0_7*dmats1[7][19] + coeff0_8*dmats1[8][19] + coeff0_9*dmats1[9][19] + coeff0_10*dmats1[10][19] + coeff0_11*dmats1[11][19] + coeff0_12*dmats1[12][19] + coeff0_13*dmats1[13][19] + coeff0_14*dmats1[14][19] + coeff0_15*dmats1[15][19] + coeff0_16*dmats1[16][19] + coeff0_17*dmats1[17][19] + coeff0_18*dmats1[18][19] + coeff0_19*dmats1[19][19] + coeff0_20*dmats1[20][19];
          new_coeff0_20 = coeff0_0*dmats1[0][20] + coeff0_1*dmats1[1][20] + coeff0_2*dmats1[2][20] + coeff0_3*dmats1[3][20] + coeff0_4*dmats1[4][20] + coeff0_5*dmats1[5][20] + coeff0_6*dmats1[6][20] + coeff0_7*dmats1[7][20] + coeff0_8*dmats1[8][20] + coeff0_9*dmats1[9][20] + coeff0_10*dmats1[10][20] + coeff0_11*dmats1[11][20] + coeff0_12*dmats1[12][20] + coeff0_13*dmats1[13][20] + coeff0_14*dmats1[14][20] + coeff0_15*dmats1[15][20] + coeff0_16*dmats1[16][20] + coeff0_17*dmats1[17][20] + coeff0_18*dmats1[18][20] + coeff0_19*dmats1[19][20] + coeff0_20*dmats1[20][20];
        }
    
      }
      // Compute derivatives on reference element as dot product of coefficients and basisvalues
      derivatives[deriv_num] = new_coeff0_0*basisvalue0 + new_coeff0_1*basisvalue1 + new_coeff0_2*basisvalue2 + new_coeff0_3*basisvalue3 + new_coeff0_4*basisvalue4 + new_coeff0_5*basisvalue5 + new_coeff0_6*basisvalue6 + new_coeff0_7*basisvalue7 + new_coeff0_8*basisvalue8 + new_coeff0_9*basisvalue9 + new_coeff0_10*basisvalue10 + new_coeff0_11*basisvalue11 + new_coeff0_12*basisvalue12 + new_coeff0_13*basisvalue13 + new_coeff0_14*basisvalue14 + new_coeff0_15*basisvalue15 + new_coeff0_16*basisvalue16 + new_coeff0_17*basisvalue17 + new_coeff0_18*basisvalue18 + new_coeff0_19*basisvalue19 + new_coeff0_20*basisvalue20;
    }
    
    // Transform derivatives back to physical element
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        values[row] += transform[row][col]*derivatives[col];
      }
    }
    // Delete pointer to array of derivatives on FIAT element
    delete [] derivatives;
    
    // Delete pointer to array of combinations of derivatives and transform
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      delete [] combinations[row];
      delete [] transform[row];
    }
    
    delete [] combinations;
    delete [] transform;
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis_derivatives() is not yet implemented.");
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // The reference points, direction and weights:
    const static double X[21][1][2] = {{{0, 0}}, {{1, 0}}, {{0, 1}}, {{0.8, 0.2}}, {{0.6, 0.4}}, {{0.4, 0.6}}, {{0.2, 0.8}}, {{0, 0.2}}, {{0, 0.4}}, {{0, 0.6}}, {{0, 0.8}}, {{0.2, 0}}, {{0.4, 0}}, {{0.6, 0}}, {{0.8, 0}}, {{0.2, 0.2}}, {{0.4, 0.2}}, {{0.6, 0.2}}, {{0.2, 0.4}}, {{0.4, 0.4}}, {{0.2, 0.6}}};
    const static double W[21][1] = {{1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}};
    const static double D[21][1][1] = {{{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}};
    
    const double * const * x = c.coordinates;
    double result = 0.0;
    // Iterate over the points:
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0][0] - X[i][0][1];
    const double w1 = X[i][0][0];
    const double w2 = X[i][0][1];
    
    // Compute affine mapping y = F(X)
    double y[2];
    y[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0];
    y[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1];
    
    // Evaluate function at physical points
    double values[1];
    f.evaluate(values, y, c);
    
    // Map function values using appropriate mapping
    // Affine map: Do nothing
    
    // Note that we do not map the weights (yet).
    
    // Take directional components
    for(int k = 0; k < 1; k++)
      result += values[k]*D[i][0][k];
    // Multiply by weights 
    result *= W[i][0];
    
    return result;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate at vertices and use affine mapping
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new poisson2d_5_1_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class poisson2d_5_1_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  poisson2d_5_1_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~poisson2d_5_1_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', 'triangle', 5)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 21;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
      
    // Compute determinant of Jacobian
    const double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Get coordinates and map to the reference (UFC) element
    double x = (element_coordinates[0][1]*element_coordinates[2][0] -\
                element_coordinates[0][0]*element_coordinates[2][1] +\
                J_11*coordinates[0] - J_01*coordinates[1]) / detJ;
    double y = (element_coordinates[1][1]*element_coordinates[0][0] -\
                element_coordinates[1][0]*element_coordinates[0][1] -\
                J_10*coordinates[0] + J_00*coordinates[1]) / detJ;
    
    // Map coordinates to the reference square
    if (std::abs(y - 1.0) < 1e-14)
      x = -1.0;
    else
      x = 2.0 *x/(1.0 - y) - 1.0;
    y = 2.0*y - 1.0;
    
    // Reset values
    *values = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    const double scalings_y_4 = scalings_y_3*(0.5 - 0.5*y);
    const double scalings_y_5 = scalings_y_4*(0.5 - 0.5*y);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    const double psitilde_a_4 = 1.75*x*psitilde_a_3 - 0.75*psitilde_a_2;
    const double psitilde_a_5 = 1.8*x*psitilde_a_4 - 0.8*psitilde_a_3;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_0_4 = 0.0285714285714286*psitilde_bs_0_3 + 1.8*y*psitilde_bs_0_3 - 0.771428571428571*psitilde_bs_0_2;
    const double psitilde_bs_0_5 = 0.0185185185185185*psitilde_bs_0_4 + 1.83333333333333*y*psitilde_bs_0_4 - 0.814814814814815*psitilde_bs_0_3;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_1_3 = 0.285714285714286*psitilde_bs_1_2 + 2*y*psitilde_bs_1_2 - 0.714285714285714*psitilde_bs_1_1;
    const double psitilde_bs_1_4 = 0.178571428571429*psitilde_bs_1_3 + 1.96428571428571*y*psitilde_bs_1_3 - 0.785714285714286*psitilde_bs_1_2;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_2_2 = 1.02040816326531*psitilde_bs_2_1 + 2.57142857142857*y*psitilde_bs_2_1 - 0.551020408163265*psitilde_bs_2_0;
    const double psitilde_bs_2_3 = 0.578703703703704*psitilde_bs_2_2 + 2.29166666666667*y*psitilde_bs_2_2 - 0.712962962962963*psitilde_bs_2_1;
    const double psitilde_bs_3_0 = 1;
    const double psitilde_bs_3_1 = 4.5*y + 3.5;
    const double psitilde_bs_3_2 = 1.51234567901235*psitilde_bs_3_1 + 3.05555555555556*y*psitilde_bs_3_1 - 0.54320987654321*psitilde_bs_3_0;
    const double psitilde_bs_4_0 = 1;
    const double psitilde_bs_4_1 = 5.5*y + 4.5;
    const double psitilde_bs_5_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.707106781186548*psitilde_a_0*scalings_y_0*psitilde_bs_0_0;
    const double basisvalue1 = 1.73205080756888*psitilde_a_1*scalings_y_1*psitilde_bs_1_0;
    const double basisvalue2 = psitilde_a_0*scalings_y_0*psitilde_bs_0_1;
    const double basisvalue3 = 2.73861278752583*psitilde_a_2*scalings_y_2*psitilde_bs_2_0;
    const double basisvalue4 = 2.12132034355964*psitilde_a_1*scalings_y_1*psitilde_bs_1_1;
    const double basisvalue5 = 1.22474487139159*psitilde_a_0*scalings_y_0*psitilde_bs_0_2;
    const double basisvalue6 = 3.74165738677394*psitilde_a_3*scalings_y_3*psitilde_bs_3_0;
    const double basisvalue7 = 3.16227766016838*psitilde_a_2*scalings_y_2*psitilde_bs_2_1;
    const double basisvalue8 = 2.44948974278318*psitilde_a_1*scalings_y_1*psitilde_bs_1_2;
    const double basisvalue9 = 1.4142135623731*psitilde_a_0*scalings_y_0*psitilde_bs_0_3;
    const double basisvalue10 = 4.74341649025257*psitilde_a_4*scalings_y_4*psitilde_bs_4_0;
    const double basisvalue11 = 4.18330013267038*psitilde_a_3*scalings_y_3*psitilde_bs_3_1;
    const double basisvalue12 = 3.53553390593274*psitilde_a_2*scalings_y_2*psitilde_bs_2_2;
    const double basisvalue13 = 2.73861278752583*psitilde_a_1*scalings_y_1*psitilde_bs_1_3;
    const double basisvalue14 = 1.58113883008419*psitilde_a_0*scalings_y_0*psitilde_bs_0_4;
    const double basisvalue15 = 5.74456264653803*psitilde_a_5*scalings_y_5*psitilde_bs_5_0;
    const double basisvalue16 = 5.19615242270663*psitilde_a_4*scalings_y_4*psitilde_bs_4_1;
    const double basisvalue17 = 4.58257569495584*psitilde_a_3*scalings_y_3*psitilde_bs_3_2;
    const double basisvalue18 = 3.87298334620742*psitilde_a_2*scalings_y_2*psitilde_bs_2_3;
    const double basisvalue19 = 3*psitilde_a_1*scalings_y_1*psitilde_bs_1_4;
    const double basisvalue20 = 1.73205080756888*psitilde_a_0*scalings_y_0*psitilde_bs_0_5;
    
    // Table(s) of coefficients
    const static double coefficients0[21][21] = \
    {{0.0154328860973255, -0.00945067404923496, -0.00545634920634919, 0.0301875307266957, 0.0233831607535234, 0.013500274155551, -0.0231997605826757, -0.0196073763651313, -0.0151878084249949, -0.00876868528257126, 0.0213898651255978, 0.0188640878998484, 0.0159430641501296, 0.0123494443881937, 0.00712995504186595, -0.0179891757560038, -0.0162718217101153, -0.0143503978743156, -0.0121282998205249, -0.00939454064454065, -0.00542394057003844},
    {0.0154328860973254, 0.00945067404923495, -0.0054563492063492, 0.0301875307266957, -0.0233831607535234, 0.013500274155551, 0.0231997605826757, -0.0196073763651313, 0.0151878084249949, -0.00876868528257127, 0.0213898651255978, -0.0188640878998484, 0.0159430641501296, -0.0123494443881937, 0.00712995504186593, 0.0179891757560038, -0.0162718217101153, 0.0143503978743156, -0.0121282998205249, 0.00939454064454064, -0.00542394057003842},
    {0.0154328860973254, 0, 0.0109126984126984, 0, 0, 0.0405008224666531, 0, 0, 0, 0.0350747411302851, 0, 0, 0, 0, 0.0356497752093297, 0, 0, 0, 0, 0, 0.0325436434202305},
    {0.0350747411302851, 0.126008987323133, -0.0843253968253968, 0.101882916202598, -0.0286443719230661, 0.00202504112333268, 0.0773325352755857, -0.0261431684868418, 0, 0.00584579018838089, 0.0356497752093296, 0.0125760585998989, -0.0385290716961465, 0.0442521757243607, -0.0297081460077747, 0, 0.0325436434202305, -0.0516614323475361, 0.0582158391385193, -0.0526094276094276, 0.0325436434202305},
    {0.0350747411302851, -0.0329341671412733, 0.121527777777778, -0.0113203240225109, 0.0754106934301129, -0.0222754523566592, 0, 0.104572673947367, -0.101252056166633, 0.0584579018838084, 0, 0.0565922636995452, -0.00930012075424224, -0.0401356942616295, 0.0415914044108846, 0, 0, 0.0516614323475361, -0.101877718492409, 0.118371212121212, -0.0813591085505763},
    {0.0350747411302851, 0.0887790592503889, -0.0892857142857142, 0.0301875307266957, 0.0432588473940183, -0.0594012062844245, 0, 0.0261431684868417, 0.101252056166633, -0.116915803767617, 0, 0, 0.0744009660339381, -0.0308736109704842, -0.0118832584031099, 0, 0, 0, 0.0679184789949393, -0.131523569023569, 0.108478811400768},
    {0.035074741130285, -0.010023442173431, 0.151289682539682, 0, 0.0502737956200753, 0.0931518916733021, 0, 0, 0.0506260280833164, 0.0643036920721893, 0, 0, 0, 0.0720384255977965, -0.0237665168062198, 0, 0, 0, 0, 0.0657617845117845, -0.0813591085505763},
    {0.0350747411302849, -0.126008987323133, -0.0843253968253968, 0.101882916202598, 0.0286443719230662, 0.00202504112333268, -0.0773325352755857, -0.0261431684868418, 0, 0.00584579018838086, 0.0356497752093297, -0.0125760585998989, -0.0385290716961465, -0.0442521757243607, -0.0297081460077747, 0, 0.0325436434202305, 0.0516614323475361, 0.0582158391385193, 0.0526094276094276, 0.0325436434202305},
    {0.0350747411302851, 0.0329341671412733, 0.121527777777778, -0.0113203240225109, -0.075410693430113, -0.0222754523566592, 0, 0.104572673947367, 0.101252056166633, 0.0584579018838084, 0, -0.0565922636995451, -0.00930012075424224, 0.0401356942616295, 0.0415914044108846, 0, 0, -0.0516614323475361, -0.101877718492409, -0.118371212121212, -0.0813591085505763},
    {0.0350747411302851, -0.0887790592503889, -0.0892857142857142, 0.0301875307266957, -0.0432588473940183, -0.0594012062844245, 0, 0.0261431684868417, -0.101252056166633, -0.116915803767617, 0, 0, 0.0744009660339381, 0.0308736109704842, -0.0118832584031099, 0, 0, 0, 0.0679184789949393, 0.131523569023569, 0.108478811400768},
    {0.0350747411302851, 0.010023442173431, 0.151289682539682, 0, -0.0502737956200753, 0.0931518916733021, 0, 0, -0.0506260280833164, 0.0643036920721892, 0, 0, 0, -0.0720384255977965, -0.0237665168062198, 0, 0, 0, 0, -0.0657617845117845, -0.0813591085505762},
    {0.035074741130285, -0.136032429496564, -0.0669642857142857, 0.0369797251402022, 0.0789181675431415, 0.0600762199922021, -0.00773325352755854, -0.0457505448519731, -0.055688630891648, -0.0379976362244755, -0.0641695953767934, -0.012576058599899, 0.017271652829307, 0.0277862498734357, 0.0202015392852868, 0.0899458787800191, 0.0488154651303458, 0.0200905570240418, 0.00242565996410498, -0.00563672438672438, -0.00542394057003844},
    {0.0350747411302852, 0.121713226391662, -0.0322420634920635, -0.0671672558668978, -0.0321518460360948, 0.0276755620188796, 0.139198563496054, 0.0653579212171044, -0.0101252056166633, -0.0292289509419042, 0.0427797302511956, -0.0565922636995451, -0.0332147169794367, 0.00926208329114533, 0.0202015392852867, -0.179891757560038, -0.0325436434202306, 0.0114803182994525, 0.00970263985641986, -0.00187890812890816, -0.00542394057003839},
    {0.035074741130285, -0.121713226391662, -0.0322420634920635, -0.0671672558668978, 0.0321518460360947, 0.0276755620188796, -0.139198563496054, 0.0653579212171043, 0.0101252056166633, -0.0292289509419043, 0.0427797302511956, 0.0565922636995452, -0.0332147169794366, -0.00926208329114533, 0.0202015392852869, 0.179891757560038, -0.0325436434202305, -0.0114803182994525, 0.00970263985641991, 0.00187890812890817, -0.00542394057003844},
    {0.0350747411302851, 0.136032429496564, -0.0669642857142857, 0.0369797251402022, -0.0789181675431415, 0.0600762199922021, 0.00773325352755854, -0.045750544851973, 0.055688630891648, -0.0379976362244755, -0.0641695953767934, 0.0125760585998989, 0.017271652829307, -0.0277862498734358, 0.0202015392852868, -0.0899458787800191, 0.0488154651303457, -0.0200905570240418, 0.00242565996410496, 0.00563672438672439, -0.00542394057003841},
    {0.280597929042281, -0.214788046573521, -0.124007936507937, 0.0905625921800869, 0.116915803767617, 0, 0.154665070551171, 0.0784295054605253, 0.101252056166633, 0.0818410626373319, -0.142599100837319, 0.0251521171997979, -0.0318861283002592, -0.107028518031012, -0.0950660672248791, 0, -0.130174573680922, -0.103322864695072, -0.0291079195692597, 0.0263047138047138, 0.0325436434202305},
    {0.0350747411302848, 0, -0.124007936507937, -0.38489101676537, 0, 0.101252056166633, 0, -0.104572673947367, 0, 0.0467663215070468, 0.213898651255978, 0, 0.140830399992811, 0, -0.095066067224879, 0, 0.195261860521383, 0, -0.0582158391385193, 0, 0.0325436434202305},
    {0.280597929042281, 0.214788046573522, -0.124007936507937, 0.090562592180087, -0.116915803767617, 0, -0.154665070551172, 0.0784295054605253, -0.101252056166633, 0.0818410626373319, -0.142599100837319, -0.0251521171997978, -0.0318861283002592, 0.107028518031012, -0.0950660672248792, 0, -0.130174573680922, 0.103322864695072, -0.0291079195692597, -0.0263047138047138, 0.0325436434202306},
    {0.035074741130285, -0.107394023286761, 0.0620039682539683, 0.0113203240225109, -0.306903984889995, -0.253130140416582, 0, -0.104572673947367, 0, 0.0467663215070468, 0, 0.169776791098635, 0.00930012075424229, 0.126581804978985, 0.172307246845094, 0, 0, 0.154984297042608, 0.101877718492409, -0.0394570707070708, -0.0813591085505764},
    {0.035074741130285, 0.107394023286761, 0.0620039682539682, 0.011320324022511, 0.306903984889994, -0.253130140416582, 0, -0.104572673947367, 0, 0.0467663215070468, 0, -0.169776791098635, 0.00930012075424223, -0.126581804978985, 0.172307246845093, 0, 0, -0.154984297042608, 0.101877718492409, 0.0394570707070707, -0.0813591085505763},
    {0.280597929042281, 0, 0.248015873015873, -0.0603750614533914, 0, 0.13500274155551, 0, -0.0522863369736836, 0, -0.210448446781711, 0, 0, -0.148801932067876, 0, -0.142599100837319, 0, 0, 0, -0.135836957989879, 0, 0.108478811400768}};
    
    // Extract relevant coefficients
    const double coeff0_0 = coefficients0[dof][0];
    const double coeff0_1 = coefficients0[dof][1];
    const double coeff0_2 = coefficients0[dof][2];
    const double coeff0_3 = coefficients0[dof][3];
    const double coeff0_4 = coefficients0[dof][4];
    const double coeff0_5 = coefficients0[dof][5];
    const double coeff0_6 = coefficients0[dof][6];
    const double coeff0_7 = coefficients0[dof][7];
    const double coeff0_8 = coefficients0[dof][8];
    const double coeff0_9 = coefficients0[dof][9];
    const double coeff0_10 = coefficients0[dof][10];
    const double coeff0_11 = coefficients0[dof][11];
    const double coeff0_12 = coefficients0[dof][12];
    const double coeff0_13 = coefficients0[dof][13];
    const double coeff0_14 = coefficients0[dof][14];
    const double coeff0_15 = coefficients0[dof][15];
    const double coeff0_16 = coefficients0[dof][16];
    const double coeff0_17 = coefficients0[dof][17];
    const double coeff0_18 = coefficients0[dof][18];
    const double coeff0_19 = coefficients0[dof][19];
    const double coeff0_20 = coefficients0[dof][20];
    
    // Compute value(s)
    *values = coeff0_0*basisvalue0 + coeff0_1*basisvalue1 + coeff0_2*basisvalue2 + coeff0_3*basisvalue3 + coeff0_4*basisvalue4 + coeff0_5*basisvalue5 + coeff0_6*basisvalue6 + coeff0_7*basisvalue7 + coeff0_8*basisvalue8 + coeff0_9*basisvalue9 + coeff0_10*basisvalue10 + coeff0_11*basisvalue11 + coeff0_12*basisvalue12 + coeff0_13*basisvalue13 + coeff0_14*basisvalue14 + coeff0_15*basisvalue15 + coeff0_16*basisvalue16 + coeff0_17*basisvalue17 + coeff0_18*basisvalue18 + coeff0_19*basisvalue19 + coeff0_20*basisvalue20;
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis() is not yet implemented.");
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
      
    // Compute determinant of Jacobian
    const double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Get coordinates and map to the reference (UFC) element
    double x = (element_coordinates[0][1]*element_coordinates[2][0] -\
                element_coordinates[0][0]*element_coordinates[2][1] +\
                J_11*coordinates[0] - J_01*coordinates[1]) / detJ;
    double y = (element_coordinates[1][1]*element_coordinates[0][0] -\
                element_coordinates[1][0]*element_coordinates[0][1] -\
                J_10*coordinates[0] + J_00*coordinates[1]) / detJ;
    
    // Map coordinates to the reference square
    if (std::abs(y - 1.0) < 1e-14)
      x = -1.0;
    else
      x = 2.0 *x/(1.0 - y) - 1.0;
    y = 2.0*y - 1.0;
    
    // Compute number of derivatives
    unsigned int num_derivatives = 1;
    
    for (unsigned int j = 0; j < n; j++)
      num_derivatives *= 2;
    
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      combinations[j] = new unsigned int [n];
      for (unsigned int k = 0; k < n; k++)
        combinations[j][k] = 0;
    }
        
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] =  {{J_11 / detJ, -J_01 / detJ}, {-J_10 / detJ, J_00 / detJ}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values
    for (unsigned int j = 0; j < 1*num_derivatives; j++)
      values[j] = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    const double scalings_y_4 = scalings_y_3*(0.5 - 0.5*y);
    const double scalings_y_5 = scalings_y_4*(0.5 - 0.5*y);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    const double psitilde_a_4 = 1.75*x*psitilde_a_3 - 0.75*psitilde_a_2;
    const double psitilde_a_5 = 1.8*x*psitilde_a_4 - 0.8*psitilde_a_3;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_0_4 = 0.0285714285714286*psitilde_bs_0_3 + 1.8*y*psitilde_bs_0_3 - 0.771428571428571*psitilde_bs_0_2;
    const double psitilde_bs_0_5 = 0.0185185185185185*psitilde_bs_0_4 + 1.83333333333333*y*psitilde_bs_0_4 - 0.814814814814815*psitilde_bs_0_3;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_1_3 = 0.285714285714286*psitilde_bs_1_2 + 2*y*psitilde_bs_1_2 - 0.714285714285714*psitilde_bs_1_1;
    const double psitilde_bs_1_4 = 0.178571428571429*psitilde_bs_1_3 + 1.96428571428571*y*psitilde_bs_1_3 - 0.785714285714286*psitilde_bs_1_2;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_2_2 = 1.02040816326531*psitilde_bs_2_1 + 2.57142857142857*y*psitilde_bs_2_1 - 0.551020408163265*psitilde_bs_2_0;
    const double psitilde_bs_2_3 = 0.578703703703704*psitilde_bs_2_2 + 2.29166666666667*y*psitilde_bs_2_2 - 0.712962962962963*psitilde_bs_2_1;
    const double psitilde_bs_3_0 = 1;
    const double psitilde_bs_3_1 = 4.5*y + 3.5;
    const double psitilde_bs_3_2 = 1.51234567901235*psitilde_bs_3_1 + 3.05555555555556*y*psitilde_bs_3_1 - 0.54320987654321*psitilde_bs_3_0;
    const double psitilde_bs_4_0 = 1;
    const double psitilde_bs_4_1 = 5.5*y + 4.5;
    const double psitilde_bs_5_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.707106781186548*psitilde_a_0*scalings_y_0*psitilde_bs_0_0;
    const double basisvalue1 = 1.73205080756888*psitilde_a_1*scalings_y_1*psitilde_bs_1_0;
    const double basisvalue2 = psitilde_a_0*scalings_y_0*psitilde_bs_0_1;
    const double basisvalue3 = 2.73861278752583*psitilde_a_2*scalings_y_2*psitilde_bs_2_0;
    const double basisvalue4 = 2.12132034355964*psitilde_a_1*scalings_y_1*psitilde_bs_1_1;
    const double basisvalue5 = 1.22474487139159*psitilde_a_0*scalings_y_0*psitilde_bs_0_2;
    const double basisvalue6 = 3.74165738677394*psitilde_a_3*scalings_y_3*psitilde_bs_3_0;
    const double basisvalue7 = 3.16227766016838*psitilde_a_2*scalings_y_2*psitilde_bs_2_1;
    const double basisvalue8 = 2.44948974278318*psitilde_a_1*scalings_y_1*psitilde_bs_1_2;
    const double basisvalue9 = 1.4142135623731*psitilde_a_0*scalings_y_0*psitilde_bs_0_3;
    const double basisvalue10 = 4.74341649025257*psitilde_a_4*scalings_y_4*psitilde_bs_4_0;
    const double basisvalue11 = 4.18330013267038*psitilde_a_3*scalings_y_3*psitilde_bs_3_1;
    const double basisvalue12 = 3.53553390593274*psitilde_a_2*scalings_y_2*psitilde_bs_2_2;
    const double basisvalue13 = 2.73861278752583*psitilde_a_1*scalings_y_1*psitilde_bs_1_3;
    const double basisvalue14 = 1.58113883008419*psitilde_a_0*scalings_y_0*psitilde_bs_0_4;
    const double basisvalue15 = 5.74456264653803*psitilde_a_5*scalings_y_5*psitilde_bs_5_0;
    const double basisvalue16 = 5.19615242270663*psitilde_a_4*scalings_y_4*psitilde_bs_4_1;
    const double basisvalue17 = 4.58257569495584*psitilde_a_3*scalings_y_3*psitilde_bs_3_2;
    const double basisvalue18 = 3.87298334620742*psitilde_a_2*scalings_y_2*psitilde_bs_2_3;
    const double basisvalue19 = 3*psitilde_a_1*scalings_y_1*psitilde_bs_1_4;
    const double basisvalue20 = 1.73205080756888*psitilde_a_0*scalings_y_0*psitilde_bs_0_5;
    
    // Table(s) of coefficients
    const static double coefficients0[21][21] = \
    {{0.0154328860973255, -0.00945067404923496, -0.00545634920634919, 0.0301875307266957, 0.0233831607535234, 0.013500274155551, -0.0231997605826757, -0.0196073763651313, -0.0151878084249949, -0.00876868528257126, 0.0213898651255978, 0.0188640878998484, 0.0159430641501296, 0.0123494443881937, 0.00712995504186595, -0.0179891757560038, -0.0162718217101153, -0.0143503978743156, -0.0121282998205249, -0.00939454064454065, -0.00542394057003844},
    {0.0154328860973254, 0.00945067404923495, -0.0054563492063492, 0.0301875307266957, -0.0233831607535234, 0.013500274155551, 0.0231997605826757, -0.0196073763651313, 0.0151878084249949, -0.00876868528257127, 0.0213898651255978, -0.0188640878998484, 0.0159430641501296, -0.0123494443881937, 0.00712995504186593, 0.0179891757560038, -0.0162718217101153, 0.0143503978743156, -0.0121282998205249, 0.00939454064454064, -0.00542394057003842},
    {0.0154328860973254, 0, 0.0109126984126984, 0, 0, 0.0405008224666531, 0, 0, 0, 0.0350747411302851, 0, 0, 0, 0, 0.0356497752093297, 0, 0, 0, 0, 0, 0.0325436434202305},
    {0.0350747411302851, 0.126008987323133, -0.0843253968253968, 0.101882916202598, -0.0286443719230661, 0.00202504112333268, 0.0773325352755857, -0.0261431684868418, 0, 0.00584579018838089, 0.0356497752093296, 0.0125760585998989, -0.0385290716961465, 0.0442521757243607, -0.0297081460077747, 0, 0.0325436434202305, -0.0516614323475361, 0.0582158391385193, -0.0526094276094276, 0.0325436434202305},
    {0.0350747411302851, -0.0329341671412733, 0.121527777777778, -0.0113203240225109, 0.0754106934301129, -0.0222754523566592, 0, 0.104572673947367, -0.101252056166633, 0.0584579018838084, 0, 0.0565922636995452, -0.00930012075424224, -0.0401356942616295, 0.0415914044108846, 0, 0, 0.0516614323475361, -0.101877718492409, 0.118371212121212, -0.0813591085505763},
    {0.0350747411302851, 0.0887790592503889, -0.0892857142857142, 0.0301875307266957, 0.0432588473940183, -0.0594012062844245, 0, 0.0261431684868417, 0.101252056166633, -0.116915803767617, 0, 0, 0.0744009660339381, -0.0308736109704842, -0.0118832584031099, 0, 0, 0, 0.0679184789949393, -0.131523569023569, 0.108478811400768},
    {0.035074741130285, -0.010023442173431, 0.151289682539682, 0, 0.0502737956200753, 0.0931518916733021, 0, 0, 0.0506260280833164, 0.0643036920721893, 0, 0, 0, 0.0720384255977965, -0.0237665168062198, 0, 0, 0, 0, 0.0657617845117845, -0.0813591085505763},
    {0.0350747411302849, -0.126008987323133, -0.0843253968253968, 0.101882916202598, 0.0286443719230662, 0.00202504112333268, -0.0773325352755857, -0.0261431684868418, 0, 0.00584579018838086, 0.0356497752093297, -0.0125760585998989, -0.0385290716961465, -0.0442521757243607, -0.0297081460077747, 0, 0.0325436434202305, 0.0516614323475361, 0.0582158391385193, 0.0526094276094276, 0.0325436434202305},
    {0.0350747411302851, 0.0329341671412733, 0.121527777777778, -0.0113203240225109, -0.075410693430113, -0.0222754523566592, 0, 0.104572673947367, 0.101252056166633, 0.0584579018838084, 0, -0.0565922636995451, -0.00930012075424224, 0.0401356942616295, 0.0415914044108846, 0, 0, -0.0516614323475361, -0.101877718492409, -0.118371212121212, -0.0813591085505763},
    {0.0350747411302851, -0.0887790592503889, -0.0892857142857142, 0.0301875307266957, -0.0432588473940183, -0.0594012062844245, 0, 0.0261431684868417, -0.101252056166633, -0.116915803767617, 0, 0, 0.0744009660339381, 0.0308736109704842, -0.0118832584031099, 0, 0, 0, 0.0679184789949393, 0.131523569023569, 0.108478811400768},
    {0.0350747411302851, 0.010023442173431, 0.151289682539682, 0, -0.0502737956200753, 0.0931518916733021, 0, 0, -0.0506260280833164, 0.0643036920721892, 0, 0, 0, -0.0720384255977965, -0.0237665168062198, 0, 0, 0, 0, -0.0657617845117845, -0.0813591085505762},
    {0.035074741130285, -0.136032429496564, -0.0669642857142857, 0.0369797251402022, 0.0789181675431415, 0.0600762199922021, -0.00773325352755854, -0.0457505448519731, -0.055688630891648, -0.0379976362244755, -0.0641695953767934, -0.012576058599899, 0.017271652829307, 0.0277862498734357, 0.0202015392852868, 0.0899458787800191, 0.0488154651303458, 0.0200905570240418, 0.00242565996410498, -0.00563672438672438, -0.00542394057003844},
    {0.0350747411302852, 0.121713226391662, -0.0322420634920635, -0.0671672558668978, -0.0321518460360948, 0.0276755620188796, 0.139198563496054, 0.0653579212171044, -0.0101252056166633, -0.0292289509419042, 0.0427797302511956, -0.0565922636995451, -0.0332147169794367, 0.00926208329114533, 0.0202015392852867, -0.179891757560038, -0.0325436434202306, 0.0114803182994525, 0.00970263985641986, -0.00187890812890816, -0.00542394057003839},
    {0.035074741130285, -0.121713226391662, -0.0322420634920635, -0.0671672558668978, 0.0321518460360947, 0.0276755620188796, -0.139198563496054, 0.0653579212171043, 0.0101252056166633, -0.0292289509419043, 0.0427797302511956, 0.0565922636995452, -0.0332147169794366, -0.00926208329114533, 0.0202015392852869, 0.179891757560038, -0.0325436434202305, -0.0114803182994525, 0.00970263985641991, 0.00187890812890817, -0.00542394057003844},
    {0.0350747411302851, 0.136032429496564, -0.0669642857142857, 0.0369797251402022, -0.0789181675431415, 0.0600762199922021, 0.00773325352755854, -0.045750544851973, 0.055688630891648, -0.0379976362244755, -0.0641695953767934, 0.0125760585998989, 0.017271652829307, -0.0277862498734358, 0.0202015392852868, -0.0899458787800191, 0.0488154651303457, -0.0200905570240418, 0.00242565996410496, 0.00563672438672439, -0.00542394057003841},
    {0.280597929042281, -0.214788046573521, -0.124007936507937, 0.0905625921800869, 0.116915803767617, 0, 0.154665070551171, 0.0784295054605253, 0.101252056166633, 0.0818410626373319, -0.142599100837319, 0.0251521171997979, -0.0318861283002592, -0.107028518031012, -0.0950660672248791, 0, -0.130174573680922, -0.103322864695072, -0.0291079195692597, 0.0263047138047138, 0.0325436434202305},
    {0.0350747411302848, 0, -0.124007936507937, -0.38489101676537, 0, 0.101252056166633, 0, -0.104572673947367, 0, 0.0467663215070468, 0.213898651255978, 0, 0.140830399992811, 0, -0.095066067224879, 0, 0.195261860521383, 0, -0.0582158391385193, 0, 0.0325436434202305},
    {0.280597929042281, 0.214788046573522, -0.124007936507937, 0.090562592180087, -0.116915803767617, 0, -0.154665070551172, 0.0784295054605253, -0.101252056166633, 0.0818410626373319, -0.142599100837319, -0.0251521171997978, -0.0318861283002592, 0.107028518031012, -0.0950660672248792, 0, -0.130174573680922, 0.103322864695072, -0.0291079195692597, -0.0263047138047138, 0.0325436434202306},
    {0.035074741130285, -0.107394023286761, 0.0620039682539683, 0.0113203240225109, -0.306903984889995, -0.253130140416582, 0, -0.104572673947367, 0, 0.0467663215070468, 0, 0.169776791098635, 0.00930012075424229, 0.126581804978985, 0.172307246845094, 0, 0, 0.154984297042608, 0.101877718492409, -0.0394570707070708, -0.0813591085505764},
    {0.035074741130285, 0.107394023286761, 0.0620039682539682, 0.011320324022511, 0.306903984889994, -0.253130140416582, 0, -0.104572673947367, 0, 0.0467663215070468, 0, -0.169776791098635, 0.00930012075424223, -0.126581804978985, 0.172307246845093, 0, 0, -0.154984297042608, 0.101877718492409, 0.0394570707070707, -0.0813591085505763},
    {0.280597929042281, 0, 0.248015873015873, -0.0603750614533914, 0, 0.13500274155551, 0, -0.0522863369736836, 0, -0.210448446781711, 0, 0, -0.148801932067876, 0, -0.142599100837319, 0, 0, 0, -0.135836957989879, 0, 0.108478811400768}};
    
    // Interesting (new) part
    // Tables of derivatives of the polynomial base (transpose)
    const static double dmats0[21][21] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.89897948556636, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 9.48683298050514, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.00000000000001, 0, 7.07106781186549, 0, 0, 0, 0, 0, 0, 1.16417292472804e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.29150262212918, 0, -2.99332590941915, 13.6626010212795, 0, 0.61101009266078, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 4.38178046004133, 0, 0, 12.5219806739988, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.46410161513776, 0, 7.83836717690617, 0, 0, 8.4, 0, 1.10537384317744e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 10.9544511501033, 0, 0, -3.83325938999965, 0, 17.7482393492989, 0, 0.553283335172474, 0, 0, 0, 0, 0, 0, 1.27307810205487e-14, 0, 0, 0, 0, 0},
    {4.7328638264797, 0, 3.34664010613632, 4.36435780471985, 0, -5.07468037933237, 0, 17.0084012854152, 0, 1.52127765851135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-2.33146835171283e-14, 2.44948974278318, 0, 0, 9.14285714285714, 0, 0, 0, 14.8461497791618, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.09838667696593, 0, 7.66811580507233, 0, 0, 10.733126291999, 0, 1.33103889053491e-14, 0, 9.2951600308978, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.41602560309064, 0, -4.37680963545758, 15.7321327225523, 0, 2.01017818278147, 0, -4.03686713879669, 0, -0.51581196219913, 21.799082549502, 0, 0.451335466924227, 0, 0.0576695305542354, 0, -1.43860401382688e-14, 0, 0, 0, 0},
    {0, 6.85714285714287, -1.24344978758018e-14, 0, 9.97292252418866, 0, 4.32049379893858, 0, -7.27309832077592, -1.77635683940025e-14, 0, 21.2540192277445, 0, 1.49078803979367, 0, 0, 0, 0, 0, 0, 0},
    {4.32049379893859, 0, 5.93552661441899, 1.79284291400158, -1.09007371339341e-14, -0.320713490294921, 0, 9.20087412456474, 1.77508364925071e-14, -5.96639619853425, 0, 0, 19.8022632451351, 0, 2.53024038425529, 0, 0, 0, 0, 0, 0},
    {0, 1.53330375599988, 1.06581410364015e-14, 0, 6.3379324511312, 0, 0, 0, 13.5526185435788, 1.06581410364015e-14, 0, 0, 0, 16.6675169851115, 0, 0, 0, 0, 0, 2.04281036531029e-14, 0},
    {2.82842712474619, 0, 7.31428571428572, 0, 0, 11.337638238025, 0, 1.43431765232015e-14, 0, 12.9299525702683, 0, 0, 0, 0, 9.93858693195776, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    const static double dmats1[21][21] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.44948974278318, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.24264068711929, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.58198889747161, 4.74341649025257, -0.912870929175276, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.00000000000001, 6.12372435695794, 3.53553390593274, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-2.3094010767585, 0, 8.16496580927726, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330392, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.23606797749979, 2.19089023002066, 2.5298221281347, 8.08290376865477, 6.26099033699941, -1.80739222823012, 0, -1.09822442744009e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.73205080756887, -5.09116882454314, 3.91918358845308, 0, 9.69948452238571, 4.20000000000001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5, 0, -2.8284271247462, 0, 0, 12.1243556529821, 0, 0, 0, -2.62767238523587e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.21337401931543e-14},
    {2.68328157299975, 5.47722557505167, -1.89736659610103, 7.42307488958091, -1.91662969499983, 0.663940002206988, 8.87411967464944, -1.07142857142858, 0.27664166758624, -0.0958314847499897, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.36643191323984, 2.8982753492379, 1.67332005306815, 2.18217890235993, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270761, -2.1957751641342, 0.760638829255669, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2, 1.2247448713916, 3.53553390593274, -7.37711113563318, 4.57142857142857, 1.64957219768464, 0, 11.4997781699989, 7.42307488958092, -2.57142857142858, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.54919333848295, 6.6407830863536, 3.83405790253617, 0, -6.19677335393187, 5.3665631459995, 0, 1.19249726392026e-14, 13.4164078649988, 4.64758001544891, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-3.57770876399968, 0, 8.85437744847148, 0, 0, -3.09838667696593, 0, 0, 0, 16.0996894379985, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.70801280154532, 5.68564249775212, -2.18840481772878, 7.86606636127615, -2.61129805863299, 1.00508909139074, 9.55297122675765, -2.01843356939834, 0.670059394260484, -0.257905981099562, 10.899541274751, -1.06805465250648, 0.225667733462113, -0.0749149177264377, 0.0288347652771174, 0, 0, 0, 0, 0, 0},
    {2.44948974278318, 3.42857142857144, 0.989743318610785, 3.04933917230523, 4.98646126209433, -2.72741187029097, 2.1602468994693, 8.34624849531682, -3.63654916038796, 1.51635079315149, 12.0498962651137, 10.6270096138723, -2.24536559755125, 0.745394019896834, -0.286902292026514, 0, 0, 0, 0, 0, 0},
    {2.16024689946929, 1.81422947044429, 2.96776330720949, 0.896421457000794, 5.41604758366942, -0.160356745147461, -9.52579344415681, 4.60043706228237, 5.3452248382485, -2.98319809926713, 0, 13.3887736279041, 9.90113162256757, -3.28687867566959, 1.26512019212764, 0, 0, 0, 0, 0, 0},
    {1.82574185835055, 0.766651877999946, 3.83609779052924, 8.6368042559214, 3.1689662255656, 3.65920700676626, 0, -8.74817765279707, 6.77630927178941, 0.521640530957285, 0, 0, 15.0623703313921, 8.33375849255573, -3.20766513935893, 0, 0, 0, 0, 1.33203386568115e-14, 0},
    {1.41421356237312, -6.73025456655334, 3.65714285714287, 0, 9.4550278170087, 5.66881911901249, 0, 1.73231507205905e-14, -6.99854212223763, 6.46497628513415, 0, 0, 0, 17.2141375215909, 4.96929346597888, 0, 0, 0, 0, 1.4597502674923e-14, 0},
    {5.7154760664941, 0, -4.61880215351699, 0, 0, 12.7279220613579, 0, 1.08255872864164e-14, 0, -3.26598632371089, 0, 0, 0, 0, 20.0831604418561, 0, 0, 0, 0, 0, 0}};
    
    // Compute reference derivatives
    // Declare pointer to array of derivatives on FIAT element
    double *derivatives = new double [num_derivatives];
    
    // Declare coefficients
    double coeff0_0 = 0;
    double coeff0_1 = 0;
    double coeff0_2 = 0;
    double coeff0_3 = 0;
    double coeff0_4 = 0;
    double coeff0_5 = 0;
    double coeff0_6 = 0;
    double coeff0_7 = 0;
    double coeff0_8 = 0;
    double coeff0_9 = 0;
    double coeff0_10 = 0;
    double coeff0_11 = 0;
    double coeff0_12 = 0;
    double coeff0_13 = 0;
    double coeff0_14 = 0;
    double coeff0_15 = 0;
    double coeff0_16 = 0;
    double coeff0_17 = 0;
    double coeff0_18 = 0;
    double coeff0_19 = 0;
    double coeff0_20 = 0;
    
    // Declare new coefficients
    double new_coeff0_0 = 0;
    double new_coeff0_1 = 0;
    double new_coeff0_2 = 0;
    double new_coeff0_3 = 0;
    double new_coeff0_4 = 0;
    double new_coeff0_5 = 0;
    double new_coeff0_6 = 0;
    double new_coeff0_7 = 0;
    double new_coeff0_8 = 0;
    double new_coeff0_9 = 0;
    double new_coeff0_10 = 0;
    double new_coeff0_11 = 0;
    double new_coeff0_12 = 0;
    double new_coeff0_13 = 0;
    double new_coeff0_14 = 0;
    double new_coeff0_15 = 0;
    double new_coeff0_16 = 0;
    double new_coeff0_17 = 0;
    double new_coeff0_18 = 0;
    double new_coeff0_19 = 0;
    double new_coeff0_20 = 0;
    
    // Loop possible derivatives
    for (unsigned int deriv_num = 0; deriv_num < num_derivatives; deriv_num++)
    {
      // Get values from coefficients array
      new_coeff0_0 = coefficients0[dof][0];
      new_coeff0_1 = coefficients0[dof][1];
      new_coeff0_2 = coefficients0[dof][2];
      new_coeff0_3 = coefficients0[dof][3];
      new_coeff0_4 = coefficients0[dof][4];
      new_coeff0_5 = coefficients0[dof][5];
      new_coeff0_6 = coefficients0[dof][6];
      new_coeff0_7 = coefficients0[dof][7];
      new_coeff0_8 = coefficients0[dof][8];
      new_coeff0_9 = coefficients0[dof][9];
      new_coeff0_10 = coefficients0[dof][10];
      new_coeff0_11 = coefficients0[dof][11];
      new_coeff0_12 = coefficients0[dof][12];
      new_coeff0_13 = coefficients0[dof][13];
      new_coeff0_14 = coefficients0[dof][14];
      new_coeff0_15 = coefficients0[dof][15];
      new_coeff0_16 = coefficients0[dof][16];
      new_coeff0_17 = coefficients0[dof][17];
      new_coeff0_18 = coefficients0[dof][18];
      new_coeff0_19 = coefficients0[dof][19];
      new_coeff0_20 = coefficients0[dof][20];
    
      // Loop derivative order
      for (unsigned int j = 0; j < n; j++)
      {
        // Update old coefficients
        coeff0_0 = new_coeff0_0;
        coeff0_1 = new_coeff0_1;
        coeff0_2 = new_coeff0_2;
        coeff0_3 = new_coeff0_3;
        coeff0_4 = new_coeff0_4;
        coeff0_5 = new_coeff0_5;
        coeff0_6 = new_coeff0_6;
        coeff0_7 = new_coeff0_7;
        coeff0_8 = new_coeff0_8;
        coeff0_9 = new_coeff0_9;
        coeff0_10 = new_coeff0_10;
        coeff0_11 = new_coeff0_11;
        coeff0_12 = new_coeff0_12;
        coeff0_13 = new_coeff0_13;
        coeff0_14 = new_coeff0_14;
        coeff0_15 = new_coeff0_15;
        coeff0_16 = new_coeff0_16;
        coeff0_17 = new_coeff0_17;
        coeff0_18 = new_coeff0_18;
        coeff0_19 = new_coeff0_19;
        coeff0_20 = new_coeff0_20;
    
        if(combinations[deriv_num][j] == 0)
        {
          new_coeff0_0 = coeff0_0*dmats0[0][0] + coeff0_1*dmats0[1][0] + coeff0_2*dmats0[2][0] + coeff0_3*dmats0[3][0] + coeff0_4*dmats0[4][0] + coeff0_5*dmats0[5][0] + coeff0_6*dmats0[6][0] + coeff0_7*dmats0[7][0] + coeff0_8*dmats0[8][0] + coeff0_9*dmats0[9][0] + coeff0_10*dmats0[10][0] + coeff0_11*dmats0[11][0] + coeff0_12*dmats0[12][0] + coeff0_13*dmats0[13][0] + coeff0_14*dmats0[14][0] + coeff0_15*dmats0[15][0] + coeff0_16*dmats0[16][0] + coeff0_17*dmats0[17][0] + coeff0_18*dmats0[18][0] + coeff0_19*dmats0[19][0] + coeff0_20*dmats0[20][0];
          new_coeff0_1 = coeff0_0*dmats0[0][1] + coeff0_1*dmats0[1][1] + coeff0_2*dmats0[2][1] + coeff0_3*dmats0[3][1] + coeff0_4*dmats0[4][1] + coeff0_5*dmats0[5][1] + coeff0_6*dmats0[6][1] + coeff0_7*dmats0[7][1] + coeff0_8*dmats0[8][1] + coeff0_9*dmats0[9][1] + coeff0_10*dmats0[10][1] + coeff0_11*dmats0[11][1] + coeff0_12*dmats0[12][1] + coeff0_13*dmats0[13][1] + coeff0_14*dmats0[14][1] + coeff0_15*dmats0[15][1] + coeff0_16*dmats0[16][1] + coeff0_17*dmats0[17][1] + coeff0_18*dmats0[18][1] + coeff0_19*dmats0[19][1] + coeff0_20*dmats0[20][1];
          new_coeff0_2 = coeff0_0*dmats0[0][2] + coeff0_1*dmats0[1][2] + coeff0_2*dmats0[2][2] + coeff0_3*dmats0[3][2] + coeff0_4*dmats0[4][2] + coeff0_5*dmats0[5][2] + coeff0_6*dmats0[6][2] + coeff0_7*dmats0[7][2] + coeff0_8*dmats0[8][2] + coeff0_9*dmats0[9][2] + coeff0_10*dmats0[10][2] + coeff0_11*dmats0[11][2] + coeff0_12*dmats0[12][2] + coeff0_13*dmats0[13][2] + coeff0_14*dmats0[14][2] + coeff0_15*dmats0[15][2] + coeff0_16*dmats0[16][2] + coeff0_17*dmats0[17][2] + coeff0_18*dmats0[18][2] + coeff0_19*dmats0[19][2] + coeff0_20*dmats0[20][2];
          new_coeff0_3 = coeff0_0*dmats0[0][3] + coeff0_1*dmats0[1][3] + coeff0_2*dmats0[2][3] + coeff0_3*dmats0[3][3] + coeff0_4*dmats0[4][3] + coeff0_5*dmats0[5][3] + coeff0_6*dmats0[6][3] + coeff0_7*dmats0[7][3] + coeff0_8*dmats0[8][3] + coeff0_9*dmats0[9][3] + coeff0_10*dmats0[10][3] + coeff0_11*dmats0[11][3] + coeff0_12*dmats0[12][3] + coeff0_13*dmats0[13][3] + coeff0_14*dmats0[14][3] + coeff0_15*dmats0[15][3] + coeff0_16*dmats0[16][3] + coeff0_17*dmats0[17][3] + coeff0_18*dmats0[18][3] + coeff0_19*dmats0[19][3] + coeff0_20*dmats0[20][3];
          new_coeff0_4 = coeff0_0*dmats0[0][4] + coeff0_1*dmats0[1][4] + coeff0_2*dmats0[2][4] + coeff0_3*dmats0[3][4] + coeff0_4*dmats0[4][4] + coeff0_5*dmats0[5][4] + coeff0_6*dmats0[6][4] + coeff0_7*dmats0[7][4] + coeff0_8*dmats0[8][4] + coeff0_9*dmats0[9][4] + coeff0_10*dmats0[10][4] + coeff0_11*dmats0[11][4] + coeff0_12*dmats0[12][4] + coeff0_13*dmats0[13][4] + coeff0_14*dmats0[14][4] + coeff0_15*dmats0[15][4] + coeff0_16*dmats0[16][4] + coeff0_17*dmats0[17][4] + coeff0_18*dmats0[18][4] + coeff0_19*dmats0[19][4] + coeff0_20*dmats0[20][4];
          new_coeff0_5 = coeff0_0*dmats0[0][5] + coeff0_1*dmats0[1][5] + coeff0_2*dmats0[2][5] + coeff0_3*dmats0[3][5] + coeff0_4*dmats0[4][5] + coeff0_5*dmats0[5][5] + coeff0_6*dmats0[6][5] + coeff0_7*dmats0[7][5] + coeff0_8*dmats0[8][5] + coeff0_9*dmats0[9][5] + coeff0_10*dmats0[10][5] + coeff0_11*dmats0[11][5] + coeff0_12*dmats0[12][5] + coeff0_13*dmats0[13][5] + coeff0_14*dmats0[14][5] + coeff0_15*dmats0[15][5] + coeff0_16*dmats0[16][5] + coeff0_17*dmats0[17][5] + coeff0_18*dmats0[18][5] + coeff0_19*dmats0[19][5] + coeff0_20*dmats0[20][5];
          new_coeff0_6 = coeff0_0*dmats0[0][6] + coeff0_1*dmats0[1][6] + coeff0_2*dmats0[2][6] + coeff0_3*dmats0[3][6] + coeff0_4*dmats0[4][6] + coeff0_5*dmats0[5][6] + coeff0_6*dmats0[6][6] + coeff0_7*dmats0[7][6] + coeff0_8*dmats0[8][6] + coeff0_9*dmats0[9][6] + coeff0_10*dmats0[10][6] + coeff0_11*dmats0[11][6] + coeff0_12*dmats0[12][6] + coeff0_13*dmats0[13][6] + coeff0_14*dmats0[14][6] + coeff0_15*dmats0[15][6] + coeff0_16*dmats0[16][6] + coeff0_17*dmats0[17][6] + coeff0_18*dmats0[18][6] + coeff0_19*dmats0[19][6] + coeff0_20*dmats0[20][6];
          new_coeff0_7 = coeff0_0*dmats0[0][7] + coeff0_1*dmats0[1][7] + coeff0_2*dmats0[2][7] + coeff0_3*dmats0[3][7] + coeff0_4*dmats0[4][7] + coeff0_5*dmats0[5][7] + coeff0_6*dmats0[6][7] + coeff0_7*dmats0[7][7] + coeff0_8*dmats0[8][7] + coeff0_9*dmats0[9][7] + coeff0_10*dmats0[10][7] + coeff0_11*dmats0[11][7] + coeff0_12*dmats0[12][7] + coeff0_13*dmats0[13][7] + coeff0_14*dmats0[14][7] + coeff0_15*dmats0[15][7] + coeff0_16*dmats0[16][7] + coeff0_17*dmats0[17][7] + coeff0_18*dmats0[18][7] + coeff0_19*dmats0[19][7] + coeff0_20*dmats0[20][7];
          new_coeff0_8 = coeff0_0*dmats0[0][8] + coeff0_1*dmats0[1][8] + coeff0_2*dmats0[2][8] + coeff0_3*dmats0[3][8] + coeff0_4*dmats0[4][8] + coeff0_5*dmats0[5][8] + coeff0_6*dmats0[6][8] + coeff0_7*dmats0[7][8] + coeff0_8*dmats0[8][8] + coeff0_9*dmats0[9][8] + coeff0_10*dmats0[10][8] + coeff0_11*dmats0[11][8] + coeff0_12*dmats0[12][8] + coeff0_13*dmats0[13][8] + coeff0_14*dmats0[14][8] + coeff0_15*dmats0[15][8] + coeff0_16*dmats0[16][8] + coeff0_17*dmats0[17][8] + coeff0_18*dmats0[18][8] + coeff0_19*dmats0[19][8] + coeff0_20*dmats0[20][8];
          new_coeff0_9 = coeff0_0*dmats0[0][9] + coeff0_1*dmats0[1][9] + coeff0_2*dmats0[2][9] + coeff0_3*dmats0[3][9] + coeff0_4*dmats0[4][9] + coeff0_5*dmats0[5][9] + coeff0_6*dmats0[6][9] + coeff0_7*dmats0[7][9] + coeff0_8*dmats0[8][9] + coeff0_9*dmats0[9][9] + coeff0_10*dmats0[10][9] + coeff0_11*dmats0[11][9] + coeff0_12*dmats0[12][9] + coeff0_13*dmats0[13][9] + coeff0_14*dmats0[14][9] + coeff0_15*dmats0[15][9] + coeff0_16*dmats0[16][9] + coeff0_17*dmats0[17][9] + coeff0_18*dmats0[18][9] + coeff0_19*dmats0[19][9] + coeff0_20*dmats0[20][9];
          new_coeff0_10 = coeff0_0*dmats0[0][10] + coeff0_1*dmats0[1][10] + coeff0_2*dmats0[2][10] + coeff0_3*dmats0[3][10] + coeff0_4*dmats0[4][10] + coeff0_5*dmats0[5][10] + coeff0_6*dmats0[6][10] + coeff0_7*dmats0[7][10] + coeff0_8*dmats0[8][10] + coeff0_9*dmats0[9][10] + coeff0_10*dmats0[10][10] + coeff0_11*dmats0[11][10] + coeff0_12*dmats0[12][10] + coeff0_13*dmats0[13][10] + coeff0_14*dmats0[14][10] + coeff0_15*dmats0[15][10] + coeff0_16*dmats0[16][10] + coeff0_17*dmats0[17][10] + coeff0_18*dmats0[18][10] + coeff0_19*dmats0[19][10] + coeff0_20*dmats0[20][10];
          new_coeff0_11 = coeff0_0*dmats0[0][11] + coeff0_1*dmats0[1][11] + coeff0_2*dmats0[2][11] + coeff0_3*dmats0[3][11] + coeff0_4*dmats0[4][11] + coeff0_5*dmats0[5][11] + coeff0_6*dmats0[6][11] + coeff0_7*dmats0[7][11] + coeff0_8*dmats0[8][11] + coeff0_9*dmats0[9][11] + coeff0_10*dmats0[10][11] + coeff0_11*dmats0[11][11] + coeff0_12*dmats0[12][11] + coeff0_13*dmats0[13][11] + coeff0_14*dmats0[14][11] + coeff0_15*dmats0[15][11] + coeff0_16*dmats0[16][11] + coeff0_17*dmats0[17][11] + coeff0_18*dmats0[18][11] + coeff0_19*dmats0[19][11] + coeff0_20*dmats0[20][11];
          new_coeff0_12 = coeff0_0*dmats0[0][12] + coeff0_1*dmats0[1][12] + coeff0_2*dmats0[2][12] + coeff0_3*dmats0[3][12] + coeff0_4*dmats0[4][12] + coeff0_5*dmats0[5][12] + coeff0_6*dmats0[6][12] + coeff0_7*dmats0[7][12] + coeff0_8*dmats0[8][12] + coeff0_9*dmats0[9][12] + coeff0_10*dmats0[10][12] + coeff0_11*dmats0[11][12] + coeff0_12*dmats0[12][12] + coeff0_13*dmats0[13][12] + coeff0_14*dmats0[14][12] + coeff0_15*dmats0[15][12] + coeff0_16*dmats0[16][12] + coeff0_17*dmats0[17][12] + coeff0_18*dmats0[18][12] + coeff0_19*dmats0[19][12] + coeff0_20*dmats0[20][12];
          new_coeff0_13 = coeff0_0*dmats0[0][13] + coeff0_1*dmats0[1][13] + coeff0_2*dmats0[2][13] + coeff0_3*dmats0[3][13] + coeff0_4*dmats0[4][13] + coeff0_5*dmats0[5][13] + coeff0_6*dmats0[6][13] + coeff0_7*dmats0[7][13] + coeff0_8*dmats0[8][13] + coeff0_9*dmats0[9][13] + coeff0_10*dmats0[10][13] + coeff0_11*dmats0[11][13] + coeff0_12*dmats0[12][13] + coeff0_13*dmats0[13][13] + coeff0_14*dmats0[14][13] + coeff0_15*dmats0[15][13] + coeff0_16*dmats0[16][13] + coeff0_17*dmats0[17][13] + coeff0_18*dmats0[18][13] + coeff0_19*dmats0[19][13] + coeff0_20*dmats0[20][13];
          new_coeff0_14 = coeff0_0*dmats0[0][14] + coeff0_1*dmats0[1][14] + coeff0_2*dmats0[2][14] + coeff0_3*dmats0[3][14] + coeff0_4*dmats0[4][14] + coeff0_5*dmats0[5][14] + coeff0_6*dmats0[6][14] + coeff0_7*dmats0[7][14] + coeff0_8*dmats0[8][14] + coeff0_9*dmats0[9][14] + coeff0_10*dmats0[10][14] + coeff0_11*dmats0[11][14] + coeff0_12*dmats0[12][14] + coeff0_13*dmats0[13][14] + coeff0_14*dmats0[14][14] + coeff0_15*dmats0[15][14] + coeff0_16*dmats0[16][14] + coeff0_17*dmats0[17][14] + coeff0_18*dmats0[18][14] + coeff0_19*dmats0[19][14] + coeff0_20*dmats0[20][14];
          new_coeff0_15 = coeff0_0*dmats0[0][15] + coeff0_1*dmats0[1][15] + coeff0_2*dmats0[2][15] + coeff0_3*dmats0[3][15] + coeff0_4*dmats0[4][15] + coeff0_5*dmats0[5][15] + coeff0_6*dmats0[6][15] + coeff0_7*dmats0[7][15] + coeff0_8*dmats0[8][15] + coeff0_9*dmats0[9][15] + coeff0_10*dmats0[10][15] + coeff0_11*dmats0[11][15] + coeff0_12*dmats0[12][15] + coeff0_13*dmats0[13][15] + coeff0_14*dmats0[14][15] + coeff0_15*dmats0[15][15] + coeff0_16*dmats0[16][15] + coeff0_17*dmats0[17][15] + coeff0_18*dmats0[18][15] + coeff0_19*dmats0[19][15] + coeff0_20*dmats0[20][15];
          new_coeff0_16 = coeff0_0*dmats0[0][16] + coeff0_1*dmats0[1][16] + coeff0_2*dmats0[2][16] + coeff0_3*dmats0[3][16] + coeff0_4*dmats0[4][16] + coeff0_5*dmats0[5][16] + coeff0_6*dmats0[6][16] + coeff0_7*dmats0[7][16] + coeff0_8*dmats0[8][16] + coeff0_9*dmats0[9][16] + coeff0_10*dmats0[10][16] + coeff0_11*dmats0[11][16] + coeff0_12*dmats0[12][16] + coeff0_13*dmats0[13][16] + coeff0_14*dmats0[14][16] + coeff0_15*dmats0[15][16] + coeff0_16*dmats0[16][16] + coeff0_17*dmats0[17][16] + coeff0_18*dmats0[18][16] + coeff0_19*dmats0[19][16] + coeff0_20*dmats0[20][16];
          new_coeff0_17 = coeff0_0*dmats0[0][17] + coeff0_1*dmats0[1][17] + coeff0_2*dmats0[2][17] + coeff0_3*dmats0[3][17] + coeff0_4*dmats0[4][17] + coeff0_5*dmats0[5][17] + coeff0_6*dmats0[6][17] + coeff0_7*dmats0[7][17] + coeff0_8*dmats0[8][17] + coeff0_9*dmats0[9][17] + coeff0_10*dmats0[10][17] + coeff0_11*dmats0[11][17] + coeff0_12*dmats0[12][17] + coeff0_13*dmats0[13][17] + coeff0_14*dmats0[14][17] + coeff0_15*dmats0[15][17] + coeff0_16*dmats0[16][17] + coeff0_17*dmats0[17][17] + coeff0_18*dmats0[18][17] + coeff0_19*dmats0[19][17] + coeff0_20*dmats0[20][17];
          new_coeff0_18 = coeff0_0*dmats0[0][18] + coeff0_1*dmats0[1][18] + coeff0_2*dmats0[2][18] + coeff0_3*dmats0[3][18] + coeff0_4*dmats0[4][18] + coeff0_5*dmats0[5][18] + coeff0_6*dmats0[6][18] + coeff0_7*dmats0[7][18] + coeff0_8*dmats0[8][18] + coeff0_9*dmats0[9][18] + coeff0_10*dmats0[10][18] + coeff0_11*dmats0[11][18] + coeff0_12*dmats0[12][18] + coeff0_13*dmats0[13][18] + coeff0_14*dmats0[14][18] + coeff0_15*dmats0[15][18] + coeff0_16*dmats0[16][18] + coeff0_17*dmats0[17][18] + coeff0_18*dmats0[18][18] + coeff0_19*dmats0[19][18] + coeff0_20*dmats0[20][18];
          new_coeff0_19 = coeff0_0*dmats0[0][19] + coeff0_1*dmats0[1][19] + coeff0_2*dmats0[2][19] + coeff0_3*dmats0[3][19] + coeff0_4*dmats0[4][19] + coeff0_5*dmats0[5][19] + coeff0_6*dmats0[6][19] + coeff0_7*dmats0[7][19] + coeff0_8*dmats0[8][19] + coeff0_9*dmats0[9][19] + coeff0_10*dmats0[10][19] + coeff0_11*dmats0[11][19] + coeff0_12*dmats0[12][19] + coeff0_13*dmats0[13][19] + coeff0_14*dmats0[14][19] + coeff0_15*dmats0[15][19] + coeff0_16*dmats0[16][19] + coeff0_17*dmats0[17][19] + coeff0_18*dmats0[18][19] + coeff0_19*dmats0[19][19] + coeff0_20*dmats0[20][19];
          new_coeff0_20 = coeff0_0*dmats0[0][20] + coeff0_1*dmats0[1][20] + coeff0_2*dmats0[2][20] + coeff0_3*dmats0[3][20] + coeff0_4*dmats0[4][20] + coeff0_5*dmats0[5][20] + coeff0_6*dmats0[6][20] + coeff0_7*dmats0[7][20] + coeff0_8*dmats0[8][20] + coeff0_9*dmats0[9][20] + coeff0_10*dmats0[10][20] + coeff0_11*dmats0[11][20] + coeff0_12*dmats0[12][20] + coeff0_13*dmats0[13][20] + coeff0_14*dmats0[14][20] + coeff0_15*dmats0[15][20] + coeff0_16*dmats0[16][20] + coeff0_17*dmats0[17][20] + coeff0_18*dmats0[18][20] + coeff0_19*dmats0[19][20] + coeff0_20*dmats0[20][20];
        }
        if(combinations[deriv_num][j] == 1)
        {
          new_coeff0_0 = coeff0_0*dmats1[0][0] + coeff0_1*dmats1[1][0] + coeff0_2*dmats1[2][0] + coeff0_3*dmats1[3][0] + coeff0_4*dmats1[4][0] + coeff0_5*dmats1[5][0] + coeff0_6*dmats1[6][0] + coeff0_7*dmats1[7][0] + coeff0_8*dmats1[8][0] + coeff0_9*dmats1[9][0] + coeff0_10*dmats1[10][0] + coeff0_11*dmats1[11][0] + coeff0_12*dmats1[12][0] + coeff0_13*dmats1[13][0] + coeff0_14*dmats1[14][0] + coeff0_15*dmats1[15][0] + coeff0_16*dmats1[16][0] + coeff0_17*dmats1[17][0] + coeff0_18*dmats1[18][0] + coeff0_19*dmats1[19][0] + coeff0_20*dmats1[20][0];
          new_coeff0_1 = coeff0_0*dmats1[0][1] + coeff0_1*dmats1[1][1] + coeff0_2*dmats1[2][1] + coeff0_3*dmats1[3][1] + coeff0_4*dmats1[4][1] + coeff0_5*dmats1[5][1] + coeff0_6*dmats1[6][1] + coeff0_7*dmats1[7][1] + coeff0_8*dmats1[8][1] + coeff0_9*dmats1[9][1] + coeff0_10*dmats1[10][1] + coeff0_11*dmats1[11][1] + coeff0_12*dmats1[12][1] + coeff0_13*dmats1[13][1] + coeff0_14*dmats1[14][1] + coeff0_15*dmats1[15][1] + coeff0_16*dmats1[16][1] + coeff0_17*dmats1[17][1] + coeff0_18*dmats1[18][1] + coeff0_19*dmats1[19][1] + coeff0_20*dmats1[20][1];
          new_coeff0_2 = coeff0_0*dmats1[0][2] + coeff0_1*dmats1[1][2] + coeff0_2*dmats1[2][2] + coeff0_3*dmats1[3][2] + coeff0_4*dmats1[4][2] + coeff0_5*dmats1[5][2] + coeff0_6*dmats1[6][2] + coeff0_7*dmats1[7][2] + coeff0_8*dmats1[8][2] + coeff0_9*dmats1[9][2] + coeff0_10*dmats1[10][2] + coeff0_11*dmats1[11][2] + coeff0_12*dmats1[12][2] + coeff0_13*dmats1[13][2] + coeff0_14*dmats1[14][2] + coeff0_15*dmats1[15][2] + coeff0_16*dmats1[16][2] + coeff0_17*dmats1[17][2] + coeff0_18*dmats1[18][2] + coeff0_19*dmats1[19][2] + coeff0_20*dmats1[20][2];
          new_coeff0_3 = coeff0_0*dmats1[0][3] + coeff0_1*dmats1[1][3] + coeff0_2*dmats1[2][3] + coeff0_3*dmats1[3][3] + coeff0_4*dmats1[4][3] + coeff0_5*dmats1[5][3] + coeff0_6*dmats1[6][3] + coeff0_7*dmats1[7][3] + coeff0_8*dmats1[8][3] + coeff0_9*dmats1[9][3] + coeff0_10*dmats1[10][3] + coeff0_11*dmats1[11][3] + coeff0_12*dmats1[12][3] + coeff0_13*dmats1[13][3] + coeff0_14*dmats1[14][3] + coeff0_15*dmats1[15][3] + coeff0_16*dmats1[16][3] + coeff0_17*dmats1[17][3] + coeff0_18*dmats1[18][3] + coeff0_19*dmats1[19][3] + coeff0_20*dmats1[20][3];
          new_coeff0_4 = coeff0_0*dmats1[0][4] + coeff0_1*dmats1[1][4] + coeff0_2*dmats1[2][4] + coeff0_3*dmats1[3][4] + coeff0_4*dmats1[4][4] + coeff0_5*dmats1[5][4] + coeff0_6*dmats1[6][4] + coeff0_7*dmats1[7][4] + coeff0_8*dmats1[8][4] + coeff0_9*dmats1[9][4] + coeff0_10*dmats1[10][4] + coeff0_11*dmats1[11][4] + coeff0_12*dmats1[12][4] + coeff0_13*dmats1[13][4] + coeff0_14*dmats1[14][4] + coeff0_15*dmats1[15][4] + coeff0_16*dmats1[16][4] + coeff0_17*dmats1[17][4] + coeff0_18*dmats1[18][4] + coeff0_19*dmats1[19][4] + coeff0_20*dmats1[20][4];
          new_coeff0_5 = coeff0_0*dmats1[0][5] + coeff0_1*dmats1[1][5] + coeff0_2*dmats1[2][5] + coeff0_3*dmats1[3][5] + coeff0_4*dmats1[4][5] + coeff0_5*dmats1[5][5] + coeff0_6*dmats1[6][5] + coeff0_7*dmats1[7][5] + coeff0_8*dmats1[8][5] + coeff0_9*dmats1[9][5] + coeff0_10*dmats1[10][5] + coeff0_11*dmats1[11][5] + coeff0_12*dmats1[12][5] + coeff0_13*dmats1[13][5] + coeff0_14*dmats1[14][5] + coeff0_15*dmats1[15][5] + coeff0_16*dmats1[16][5] + coeff0_17*dmats1[17][5] + coeff0_18*dmats1[18][5] + coeff0_19*dmats1[19][5] + coeff0_20*dmats1[20][5];
          new_coeff0_6 = coeff0_0*dmats1[0][6] + coeff0_1*dmats1[1][6] + coeff0_2*dmats1[2][6] + coeff0_3*dmats1[3][6] + coeff0_4*dmats1[4][6] + coeff0_5*dmats1[5][6] + coeff0_6*dmats1[6][6] + coeff0_7*dmats1[7][6] + coeff0_8*dmats1[8][6] + coeff0_9*dmats1[9][6] + coeff0_10*dmats1[10][6] + coeff0_11*dmats1[11][6] + coeff0_12*dmats1[12][6] + coeff0_13*dmats1[13][6] + coeff0_14*dmats1[14][6] + coeff0_15*dmats1[15][6] + coeff0_16*dmats1[16][6] + coeff0_17*dmats1[17][6] + coeff0_18*dmats1[18][6] + coeff0_19*dmats1[19][6] + coeff0_20*dmats1[20][6];
          new_coeff0_7 = coeff0_0*dmats1[0][7] + coeff0_1*dmats1[1][7] + coeff0_2*dmats1[2][7] + coeff0_3*dmats1[3][7] + coeff0_4*dmats1[4][7] + coeff0_5*dmats1[5][7] + coeff0_6*dmats1[6][7] + coeff0_7*dmats1[7][7] + coeff0_8*dmats1[8][7] + coeff0_9*dmats1[9][7] + coeff0_10*dmats1[10][7] + coeff0_11*dmats1[11][7] + coeff0_12*dmats1[12][7] + coeff0_13*dmats1[13][7] + coeff0_14*dmats1[14][7] + coeff0_15*dmats1[15][7] + coeff0_16*dmats1[16][7] + coeff0_17*dmats1[17][7] + coeff0_18*dmats1[18][7] + coeff0_19*dmats1[19][7] + coeff0_20*dmats1[20][7];
          new_coeff0_8 = coeff0_0*dmats1[0][8] + coeff0_1*dmats1[1][8] + coeff0_2*dmats1[2][8] + coeff0_3*dmats1[3][8] + coeff0_4*dmats1[4][8] + coeff0_5*dmats1[5][8] + coeff0_6*dmats1[6][8] + coeff0_7*dmats1[7][8] + coeff0_8*dmats1[8][8] + coeff0_9*dmats1[9][8] + coeff0_10*dmats1[10][8] + coeff0_11*dmats1[11][8] + coeff0_12*dmats1[12][8] + coeff0_13*dmats1[13][8] + coeff0_14*dmats1[14][8] + coeff0_15*dmats1[15][8] + coeff0_16*dmats1[16][8] + coeff0_17*dmats1[17][8] + coeff0_18*dmats1[18][8] + coeff0_19*dmats1[19][8] + coeff0_20*dmats1[20][8];
          new_coeff0_9 = coeff0_0*dmats1[0][9] + coeff0_1*dmats1[1][9] + coeff0_2*dmats1[2][9] + coeff0_3*dmats1[3][9] + coeff0_4*dmats1[4][9] + coeff0_5*dmats1[5][9] + coeff0_6*dmats1[6][9] + coeff0_7*dmats1[7][9] + coeff0_8*dmats1[8][9] + coeff0_9*dmats1[9][9] + coeff0_10*dmats1[10][9] + coeff0_11*dmats1[11][9] + coeff0_12*dmats1[12][9] + coeff0_13*dmats1[13][9] + coeff0_14*dmats1[14][9] + coeff0_15*dmats1[15][9] + coeff0_16*dmats1[16][9] + coeff0_17*dmats1[17][9] + coeff0_18*dmats1[18][9] + coeff0_19*dmats1[19][9] + coeff0_20*dmats1[20][9];
          new_coeff0_10 = coeff0_0*dmats1[0][10] + coeff0_1*dmats1[1][10] + coeff0_2*dmats1[2][10] + coeff0_3*dmats1[3][10] + coeff0_4*dmats1[4][10] + coeff0_5*dmats1[5][10] + coeff0_6*dmats1[6][10] + coeff0_7*dmats1[7][10] + coeff0_8*dmats1[8][10] + coeff0_9*dmats1[9][10] + coeff0_10*dmats1[10][10] + coeff0_11*dmats1[11][10] + coeff0_12*dmats1[12][10] + coeff0_13*dmats1[13][10] + coeff0_14*dmats1[14][10] + coeff0_15*dmats1[15][10] + coeff0_16*dmats1[16][10] + coeff0_17*dmats1[17][10] + coeff0_18*dmats1[18][10] + coeff0_19*dmats1[19][10] + coeff0_20*dmats1[20][10];
          new_coeff0_11 = coeff0_0*dmats1[0][11] + coeff0_1*dmats1[1][11] + coeff0_2*dmats1[2][11] + coeff0_3*dmats1[3][11] + coeff0_4*dmats1[4][11] + coeff0_5*dmats1[5][11] + coeff0_6*dmats1[6][11] + coeff0_7*dmats1[7][11] + coeff0_8*dmats1[8][11] + coeff0_9*dmats1[9][11] + coeff0_10*dmats1[10][11] + coeff0_11*dmats1[11][11] + coeff0_12*dmats1[12][11] + coeff0_13*dmats1[13][11] + coeff0_14*dmats1[14][11] + coeff0_15*dmats1[15][11] + coeff0_16*dmats1[16][11] + coeff0_17*dmats1[17][11] + coeff0_18*dmats1[18][11] + coeff0_19*dmats1[19][11] + coeff0_20*dmats1[20][11];
          new_coeff0_12 = coeff0_0*dmats1[0][12] + coeff0_1*dmats1[1][12] + coeff0_2*dmats1[2][12] + coeff0_3*dmats1[3][12] + coeff0_4*dmats1[4][12] + coeff0_5*dmats1[5][12] + coeff0_6*dmats1[6][12] + coeff0_7*dmats1[7][12] + coeff0_8*dmats1[8][12] + coeff0_9*dmats1[9][12] + coeff0_10*dmats1[10][12] + coeff0_11*dmats1[11][12] + coeff0_12*dmats1[12][12] + coeff0_13*dmats1[13][12] + coeff0_14*dmats1[14][12] + coeff0_15*dmats1[15][12] + coeff0_16*dmats1[16][12] + coeff0_17*dmats1[17][12] + coeff0_18*dmats1[18][12] + coeff0_19*dmats1[19][12] + coeff0_20*dmats1[20][12];
          new_coeff0_13 = coeff0_0*dmats1[0][13] + coeff0_1*dmats1[1][13] + coeff0_2*dmats1[2][13] + coeff0_3*dmats1[3][13] + coeff0_4*dmats1[4][13] + coeff0_5*dmats1[5][13] + coeff0_6*dmats1[6][13] + coeff0_7*dmats1[7][13] + coeff0_8*dmats1[8][13] + coeff0_9*dmats1[9][13] + coeff0_10*dmats1[10][13] + coeff0_11*dmats1[11][13] + coeff0_12*dmats1[12][13] + coeff0_13*dmats1[13][13] + coeff0_14*dmats1[14][13] + coeff0_15*dmats1[15][13] + coeff0_16*dmats1[16][13] + coeff0_17*dmats1[17][13] + coeff0_18*dmats1[18][13] + coeff0_19*dmats1[19][13] + coeff0_20*dmats1[20][13];
          new_coeff0_14 = coeff0_0*dmats1[0][14] + coeff0_1*dmats1[1][14] + coeff0_2*dmats1[2][14] + coeff0_3*dmats1[3][14] + coeff0_4*dmats1[4][14] + coeff0_5*dmats1[5][14] + coeff0_6*dmats1[6][14] + coeff0_7*dmats1[7][14] + coeff0_8*dmats1[8][14] + coeff0_9*dmats1[9][14] + coeff0_10*dmats1[10][14] + coeff0_11*dmats1[11][14] + coeff0_12*dmats1[12][14] + coeff0_13*dmats1[13][14] + coeff0_14*dmats1[14][14] + coeff0_15*dmats1[15][14] + coeff0_16*dmats1[16][14] + coeff0_17*dmats1[17][14] + coeff0_18*dmats1[18][14] + coeff0_19*dmats1[19][14] + coeff0_20*dmats1[20][14];
          new_coeff0_15 = coeff0_0*dmats1[0][15] + coeff0_1*dmats1[1][15] + coeff0_2*dmats1[2][15] + coeff0_3*dmats1[3][15] + coeff0_4*dmats1[4][15] + coeff0_5*dmats1[5][15] + coeff0_6*dmats1[6][15] + coeff0_7*dmats1[7][15] + coeff0_8*dmats1[8][15] + coeff0_9*dmats1[9][15] + coeff0_10*dmats1[10][15] + coeff0_11*dmats1[11][15] + coeff0_12*dmats1[12][15] + coeff0_13*dmats1[13][15] + coeff0_14*dmats1[14][15] + coeff0_15*dmats1[15][15] + coeff0_16*dmats1[16][15] + coeff0_17*dmats1[17][15] + coeff0_18*dmats1[18][15] + coeff0_19*dmats1[19][15] + coeff0_20*dmats1[20][15];
          new_coeff0_16 = coeff0_0*dmats1[0][16] + coeff0_1*dmats1[1][16] + coeff0_2*dmats1[2][16] + coeff0_3*dmats1[3][16] + coeff0_4*dmats1[4][16] + coeff0_5*dmats1[5][16] + coeff0_6*dmats1[6][16] + coeff0_7*dmats1[7][16] + coeff0_8*dmats1[8][16] + coeff0_9*dmats1[9][16] + coeff0_10*dmats1[10][16] + coeff0_11*dmats1[11][16] + coeff0_12*dmats1[12][16] + coeff0_13*dmats1[13][16] + coeff0_14*dmats1[14][16] + coeff0_15*dmats1[15][16] + coeff0_16*dmats1[16][16] + coeff0_17*dmats1[17][16] + coeff0_18*dmats1[18][16] + coeff0_19*dmats1[19][16] + coeff0_20*dmats1[20][16];
          new_coeff0_17 = coeff0_0*dmats1[0][17] + coeff0_1*dmats1[1][17] + coeff0_2*dmats1[2][17] + coeff0_3*dmats1[3][17] + coeff0_4*dmats1[4][17] + coeff0_5*dmats1[5][17] + coeff0_6*dmats1[6][17] + coeff0_7*dmats1[7][17] + coeff0_8*dmats1[8][17] + coeff0_9*dmats1[9][17] + coeff0_10*dmats1[10][17] + coeff0_11*dmats1[11][17] + coeff0_12*dmats1[12][17] + coeff0_13*dmats1[13][17] + coeff0_14*dmats1[14][17] + coeff0_15*dmats1[15][17] + coeff0_16*dmats1[16][17] + coeff0_17*dmats1[17][17] + coeff0_18*dmats1[18][17] + coeff0_19*dmats1[19][17] + coeff0_20*dmats1[20][17];
          new_coeff0_18 = coeff0_0*dmats1[0][18] + coeff0_1*dmats1[1][18] + coeff0_2*dmats1[2][18] + coeff0_3*dmats1[3][18] + coeff0_4*dmats1[4][18] + coeff0_5*dmats1[5][18] + coeff0_6*dmats1[6][18] + coeff0_7*dmats1[7][18] + coeff0_8*dmats1[8][18] + coeff0_9*dmats1[9][18] + coeff0_10*dmats1[10][18] + coeff0_11*dmats1[11][18] + coeff0_12*dmats1[12][18] + coeff0_13*dmats1[13][18] + coeff0_14*dmats1[14][18] + coeff0_15*dmats1[15][18] + coeff0_16*dmats1[16][18] + coeff0_17*dmats1[17][18] + coeff0_18*dmats1[18][18] + coeff0_19*dmats1[19][18] + coeff0_20*dmats1[20][18];
          new_coeff0_19 = coeff0_0*dmats1[0][19] + coeff0_1*dmats1[1][19] + coeff0_2*dmats1[2][19] + coeff0_3*dmats1[3][19] + coeff0_4*dmats1[4][19] + coeff0_5*dmats1[5][19] + coeff0_6*dmats1[6][19] + coeff0_7*dmats1[7][19] + coeff0_8*dmats1[8][19] + coeff0_9*dmats1[9][19] + coeff0_10*dmats1[10][19] + coeff0_11*dmats1[11][19] + coeff0_12*dmats1[12][19] + coeff0_13*dmats1[13][19] + coeff0_14*dmats1[14][19] + coeff0_15*dmats1[15][19] + coeff0_16*dmats1[16][19] + coeff0_17*dmats1[17][19] + coeff0_18*dmats1[18][19] + coeff0_19*dmats1[19][19] + coeff0_20*dmats1[20][19];
          new_coeff0_20 = coeff0_0*dmats1[0][20] + coeff0_1*dmats1[1][20] + coeff0_2*dmats1[2][20] + coeff0_3*dmats1[3][20] + coeff0_4*dmats1[4][20] + coeff0_5*dmats1[5][20] + coeff0_6*dmats1[6][20] + coeff0_7*dmats1[7][20] + coeff0_8*dmats1[8][20] + coeff0_9*dmats1[9][20] + coeff0_10*dmats1[10][20] + coeff0_11*dmats1[11][20] + coeff0_12*dmats1[12][20] + coeff0_13*dmats1[13][20] + coeff0_14*dmats1[14][20] + coeff0_15*dmats1[15][20] + coeff0_16*dmats1[16][20] + coeff0_17*dmats1[17][20] + coeff0_18*dmats1[18][20] + coeff0_19*dmats1[19][20] + coeff0_20*dmats1[20][20];
        }
    
      }
      // Compute derivatives on reference element as dot product of coefficients and basisvalues
      derivatives[deriv_num] = new_coeff0_0*basisvalue0 + new_coeff0_1*basisvalue1 + new_coeff0_2*basisvalue2 + new_coeff0_3*basisvalue3 + new_coeff0_4*basisvalue4 + new_coeff0_5*basisvalue5 + new_coeff0_6*basisvalue6 + new_coeff0_7*basisvalue7 + new_coeff0_8*basisvalue8 + new_coeff0_9*basisvalue9 + new_coeff0_10*basisvalue10 + new_coeff0_11*basisvalue11 + new_coeff0_12*basisvalue12 + new_coeff0_13*basisvalue13 + new_coeff0_14*basisvalue14 + new_coeff0_15*basisvalue15 + new_coeff0_16*basisvalue16 + new_coeff0_17*basisvalue17 + new_coeff0_18*basisvalue18 + new_coeff0_19*basisvalue19 + new_coeff0_20*basisvalue20;
    }
    
    // Transform derivatives back to physical element
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        values[row] += transform[row][col]*derivatives[col];
      }
    }
    // Delete pointer to array of derivatives on FIAT element
    delete [] derivatives;
    
    // Delete pointer to array of combinations of derivatives and transform
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      delete [] combinations[row];
      delete [] transform[row];
    }
    
    delete [] combinations;
    delete [] transform;
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis_derivatives() is not yet implemented.");
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // The reference points, direction and weights:
    const static double X[21][1][2] = {{{0, 0}}, {{1, 0}}, {{0, 1}}, {{0.8, 0.2}}, {{0.6, 0.4}}, {{0.4, 0.6}}, {{0.2, 0.8}}, {{0, 0.2}}, {{0, 0.4}}, {{0, 0.6}}, {{0, 0.8}}, {{0.2, 0}}, {{0.4, 0}}, {{0.6, 0}}, {{0.8, 0}}, {{0.2, 0.2}}, {{0.4, 0.2}}, {{0.6, 0.2}}, {{0.2, 0.4}}, {{0.4, 0.4}}, {{0.2, 0.6}}};
    const static double W[21][1] = {{1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}};
    const static double D[21][1][1] = {{{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}};
    
    const double * const * x = c.coordinates;
    double result = 0.0;
    // Iterate over the points:
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0][0] - X[i][0][1];
    const double w1 = X[i][0][0];
    const double w2 = X[i][0][1];
    
    // Compute affine mapping y = F(X)
    double y[2];
    y[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0];
    y[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1];
    
    // Evaluate function at physical points
    double values[1];
    f.evaluate(values, y, c);
    
    // Map function values using appropriate mapping
    // Affine map: Do nothing
    
    // Note that we do not map the weights (yet).
    
    // Take directional components
    for(int k = 0; k < 1; k++)
      result += values[k]*D[i][0][k];
    // Multiply by weights 
    result *= W[i][0];
    
    return result;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate at vertices and use affine mapping
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new poisson2d_5_1_finite_element_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class poisson2d_5_1_dof_map_0: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  poisson2d_5_1_dof_map_0() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~poisson2d_5_1_dof_map_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for FiniteElement('Lagrange', 'triangle', 5)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return true;
      break;
    case 2:
      return true;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = m.num_entities[0] + 4*m.num_entities[1] + 6*m.num_entities[2];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 21;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 21;
  }

  // Return the geometric dimension of the coordinates this dof map provides
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 6;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    unsigned int offset = m.num_entities[0];
    dofs[3] = offset + 4*c.entity_indices[1][0];
    dofs[4] = offset + 4*c.entity_indices[1][0] + 1;
    dofs[5] = offset + 4*c.entity_indices[1][0] + 2;
    dofs[6] = offset + 4*c.entity_indices[1][0] + 3;
    dofs[7] = offset + 4*c.entity_indices[1][1];
    dofs[8] = offset + 4*c.entity_indices[1][1] + 1;
    dofs[9] = offset + 4*c.entity_indices[1][1] + 2;
    dofs[10] = offset + 4*c.entity_indices[1][1] + 3;
    dofs[11] = offset + 4*c.entity_indices[1][2];
    dofs[12] = offset + 4*c.entity_indices[1][2] + 1;
    dofs[13] = offset + 4*c.entity_indices[1][2] + 2;
    dofs[14] = offset + 4*c.entity_indices[1][2] + 3;
    offset = offset + 4*m.num_entities[1];
    dofs[15] = offset + 6*c.entity_indices[2][0];
    dofs[16] = offset + 6*c.entity_indices[2][0] + 1;
    dofs[17] = offset + 6*c.entity_indices[2][0] + 2;
    dofs[18] = offset + 6*c.entity_indices[2][0] + 3;
    dofs[19] = offset + 6*c.entity_indices[2][0] + 4;
    dofs[20] = offset + 6*c.entity_indices[2][0] + 5;
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 7;
      dofs[3] = 8;
      dofs[4] = 9;
      dofs[5] = 10;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 11;
      dofs[3] = 12;
      dofs[4] = 13;
      dofs[5] = 14;
      break;
    }
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[3][0] = 0.8*x[1][0] + 0.2*x[2][0];
    coordinates[3][1] = 0.8*x[1][1] + 0.2*x[2][1];
    coordinates[4][0] = 0.6*x[1][0] + 0.4*x[2][0];
    coordinates[4][1] = 0.6*x[1][1] + 0.4*x[2][1];
    coordinates[5][0] = 0.4*x[1][0] + 0.6*x[2][0];
    coordinates[5][1] = 0.4*x[1][1] + 0.6*x[2][1];
    coordinates[6][0] = 0.2*x[1][0] + 0.8*x[2][0];
    coordinates[6][1] = 0.2*x[1][1] + 0.8*x[2][1];
    coordinates[7][0] = 0.8*x[0][0] + 0.2*x[2][0];
    coordinates[7][1] = 0.8*x[0][1] + 0.2*x[2][1];
    coordinates[8][0] = 0.6*x[0][0] + 0.4*x[2][0];
    coordinates[8][1] = 0.6*x[0][1] + 0.4*x[2][1];
    coordinates[9][0] = 0.4*x[0][0] + 0.6*x[2][0];
    coordinates[9][1] = 0.4*x[0][1] + 0.6*x[2][1];
    coordinates[10][0] = 0.2*x[0][0] + 0.8*x[2][0];
    coordinates[10][1] = 0.2*x[0][1] + 0.8*x[2][1];
    coordinates[11][0] = 0.8*x[0][0] + 0.2*x[1][0];
    coordinates[11][1] = 0.8*x[0][1] + 0.2*x[1][1];
    coordinates[12][0] = 0.6*x[0][0] + 0.4*x[1][0];
    coordinates[12][1] = 0.6*x[0][1] + 0.4*x[1][1];
    coordinates[13][0] = 0.4*x[0][0] + 0.6*x[1][0];
    coordinates[13][1] = 0.4*x[0][1] + 0.6*x[1][1];
    coordinates[14][0] = 0.2*x[0][0] + 0.8*x[1][0];
    coordinates[14][1] = 0.2*x[0][1] + 0.8*x[1][1];
    coordinates[15][0] = 0.6*x[0][0] + 0.2*x[1][0] + 0.2*x[2][0];
    coordinates[15][1] = 0.6*x[0][1] + 0.2*x[1][1] + 0.2*x[2][1];
    coordinates[16][0] = 0.4*x[0][0] + 0.4*x[1][0] + 0.2*x[2][0];
    coordinates[16][1] = 0.4*x[0][1] + 0.4*x[1][1] + 0.2*x[2][1];
    coordinates[17][0] = 0.2*x[0][0] + 0.6*x[1][0] + 0.2*x[2][0];
    coordinates[17][1] = 0.2*x[0][1] + 0.6*x[1][1] + 0.2*x[2][1];
    coordinates[18][0] = 0.4*x[0][0] + 0.2*x[1][0] + 0.4*x[2][0];
    coordinates[18][1] = 0.4*x[0][1] + 0.2*x[1][1] + 0.4*x[2][1];
    coordinates[19][0] = 0.2*x[0][0] + 0.4*x[1][0] + 0.4*x[2][0];
    coordinates[19][1] = 0.2*x[0][1] + 0.4*x[1][1] + 0.4*x[2][1];
    coordinates[20][0] = 0.2*x[0][0] + 0.2*x[1][0] + 0.6*x[2][0];
    coordinates[20][1] = 0.2*x[0][1] + 0.2*x[1][1] + 0.6*x[2][1];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new poisson2d_5_1_dof_map_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class poisson2d_5_1_dof_map_1: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  poisson2d_5_1_dof_map_1() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~poisson2d_5_1_dof_map_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for FiniteElement('Lagrange', 'triangle', 5)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return true;
      break;
    case 2:
      return true;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = m.num_entities[0] + 4*m.num_entities[1] + 6*m.num_entities[2];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 21;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 21;
  }

  // Return the geometric dimension of the coordinates this dof map provides
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 6;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    unsigned int offset = m.num_entities[0];
    dofs[3] = offset + 4*c.entity_indices[1][0];
    dofs[4] = offset + 4*c.entity_indices[1][0] + 1;
    dofs[5] = offset + 4*c.entity_indices[1][0] + 2;
    dofs[6] = offset + 4*c.entity_indices[1][0] + 3;
    dofs[7] = offset + 4*c.entity_indices[1][1];
    dofs[8] = offset + 4*c.entity_indices[1][1] + 1;
    dofs[9] = offset + 4*c.entity_indices[1][1] + 2;
    dofs[10] = offset + 4*c.entity_indices[1][1] + 3;
    dofs[11] = offset + 4*c.entity_indices[1][2];
    dofs[12] = offset + 4*c.entity_indices[1][2] + 1;
    dofs[13] = offset + 4*c.entity_indices[1][2] + 2;
    dofs[14] = offset + 4*c.entity_indices[1][2] + 3;
    offset = offset + 4*m.num_entities[1];
    dofs[15] = offset + 6*c.entity_indices[2][0];
    dofs[16] = offset + 6*c.entity_indices[2][0] + 1;
    dofs[17] = offset + 6*c.entity_indices[2][0] + 2;
    dofs[18] = offset + 6*c.entity_indices[2][0] + 3;
    dofs[19] = offset + 6*c.entity_indices[2][0] + 4;
    dofs[20] = offset + 6*c.entity_indices[2][0] + 5;
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 7;
      dofs[3] = 8;
      dofs[4] = 9;
      dofs[5] = 10;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 11;
      dofs[3] = 12;
      dofs[4] = 13;
      dofs[5] = 14;
      break;
    }
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[3][0] = 0.8*x[1][0] + 0.2*x[2][0];
    coordinates[3][1] = 0.8*x[1][1] + 0.2*x[2][1];
    coordinates[4][0] = 0.6*x[1][0] + 0.4*x[2][0];
    coordinates[4][1] = 0.6*x[1][1] + 0.4*x[2][1];
    coordinates[5][0] = 0.4*x[1][0] + 0.6*x[2][0];
    coordinates[5][1] = 0.4*x[1][1] + 0.6*x[2][1];
    coordinates[6][0] = 0.2*x[1][0] + 0.8*x[2][0];
    coordinates[6][1] = 0.2*x[1][1] + 0.8*x[2][1];
    coordinates[7][0] = 0.8*x[0][0] + 0.2*x[2][0];
    coordinates[7][1] = 0.8*x[0][1] + 0.2*x[2][1];
    coordinates[8][0] = 0.6*x[0][0] + 0.4*x[2][0];
    coordinates[8][1] = 0.6*x[0][1] + 0.4*x[2][1];
    coordinates[9][0] = 0.4*x[0][0] + 0.6*x[2][0];
    coordinates[9][1] = 0.4*x[0][1] + 0.6*x[2][1];
    coordinates[10][0] = 0.2*x[0][0] + 0.8*x[2][0];
    coordinates[10][1] = 0.2*x[0][1] + 0.8*x[2][1];
    coordinates[11][0] = 0.8*x[0][0] + 0.2*x[1][0];
    coordinates[11][1] = 0.8*x[0][1] + 0.2*x[1][1];
    coordinates[12][0] = 0.6*x[0][0] + 0.4*x[1][0];
    coordinates[12][1] = 0.6*x[0][1] + 0.4*x[1][1];
    coordinates[13][0] = 0.4*x[0][0] + 0.6*x[1][0];
    coordinates[13][1] = 0.4*x[0][1] + 0.6*x[1][1];
    coordinates[14][0] = 0.2*x[0][0] + 0.8*x[1][0];
    coordinates[14][1] = 0.2*x[0][1] + 0.8*x[1][1];
    coordinates[15][0] = 0.6*x[0][0] + 0.2*x[1][0] + 0.2*x[2][0];
    coordinates[15][1] = 0.6*x[0][1] + 0.2*x[1][1] + 0.2*x[2][1];
    coordinates[16][0] = 0.4*x[0][0] + 0.4*x[1][0] + 0.2*x[2][0];
    coordinates[16][1] = 0.4*x[0][1] + 0.4*x[1][1] + 0.2*x[2][1];
    coordinates[17][0] = 0.2*x[0][0] + 0.6*x[1][0] + 0.2*x[2][0];
    coordinates[17][1] = 0.2*x[0][1] + 0.6*x[1][1] + 0.2*x[2][1];
    coordinates[18][0] = 0.4*x[0][0] + 0.2*x[1][0] + 0.4*x[2][0];
    coordinates[18][1] = 0.4*x[0][1] + 0.2*x[1][1] + 0.4*x[2][1];
    coordinates[19][0] = 0.2*x[0][0] + 0.4*x[1][0] + 0.4*x[2][0];
    coordinates[19][1] = 0.2*x[0][1] + 0.4*x[1][1] + 0.4*x[2][1];
    coordinates[20][0] = 0.2*x[0][0] + 0.2*x[1][0] + 0.6*x[2][0];
    coordinates[20][1] = 0.2*x[0][1] + 0.2*x[1][1] + 0.6*x[2][1];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new poisson2d_5_1_dof_map_1();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class poisson2d_5_1_cell_integral_0_quadrature: public ufc::cell_integral
{
public:

  /// Constructor
  poisson2d_5_1_cell_integral_0_quadrature() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~poisson2d_5_1_cell_integral_0_quadrature()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
      
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
      
    // Compute inverse of Jacobian
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    
    // Array of quadrature weights
    const static double W36[36] = {0.00619426535265906, 0.0116108747669979, 0.0120606064042655, 0.0084515357969434, 0.0037652982126918, 0.000748542561236343, 0.0130433943300833, 0.0244492622580587, 0.0253962715890485, 0.0177965759970269, 0.00792866733379675, 0.00157622175402364, 0.0169175056800133, 0.0317111115907051, 0.0329393989007878, 0.023082463651359, 0.0102836172287667, 0.00204438659154493, 0.0169175056800133, 0.0317111115907051, 0.0329393989007878, 0.023082463651359, 0.0102836172287667, 0.00204438659154493, 0.0130433943300833, 0.0244492622580587, 0.0253962715890485, 0.0177965759970269, 0.00792866733379675, 0.00157622175402364, 0.00619426535265908, 0.0116108747669979, 0.0120606064042655, 0.00845153579694342, 0.00376529821269181, 0.000748542561236345};
    
    
    const static double FE0[36][21] = \
    {{0.451781527938019, 0.0228100382612196, 0.0212444922493685, -0.00435797285500419, -0.0026227153527982, -0.0026474190703254, -0.00451739239390446, 0.480196959209587, -0.485112413103936, 0.334300909406531, -0.129270846816877, 0.536853665675628, -0.531358255113294, 0.362753046285496, -0.139422804864314, 0.186306589721922, -0.0868783487674189, 0.0288237023756996, -0.088675374374381, 0.0200955984023093, 0.0296970131864727},
    {0.0292093479448541, 0.0209787447672339, 0.0148604061123254, -0.0201398049187092, -0.00366114640519844, -0.00248446928919907, -0.0032784974561776, 0.933940828838982, -0.434597331299871, 0.258732833432064, -0.0938183149683683, 0.181424723192439, -0.278425789021843, 0.244262845439317, -0.111955425365789, 0.481548528406007, -0.292295709319494, 0.116086810353337, -0.0886292641890968, 0.0243540957629701, 0.0238865879842166},
    {-0.0114534257427366, 0.0175624456189402, -0.00922514994197474, -0.0380541113043155, 0.0180495574185521, 0.00301207338841268, 0.00223018824236781, 0.121089015118006, 0.816538491904441, -0.213833521347853, 0.0638196325475232, 0.00804429541953355, -0.0703336174742123, 0.110373061425867, -0.0723431851343307, 0.266887393947734, -0.295493158937359, 0.168822657906924, 0.227900040587806, -0.0918643362117905, -0.0217283474315355},
    {0.00430869653715456, 0.0127065651041046, 0.00825808223133462, -0.0452095921596845, 0.0554279145788193, -0.0228378787134237, -0.00254960241391749, -0.0322178732011425, 0.133150064172288, 0.799454670319403, -0.0729600695166931, -0.000859354133716952, -0.00183283150481478, 0.0267083944790002, -0.0345079109900455, 0.0110638509873067, -0.116239521286917, 0.131797221359002, 0.225241262971042, -0.184129192920017, 0.105227104100919},
    {-0.00513768766416058, 0.0071765005003973, -0.0219219744942588, -0.0348418996188639, 0.0669804693088444, -0.0630569735001134, 0.0277599480687051, 0.034245295072917, -0.10340716652246, 0.215682917985072, 0.794385716697147, 0.000346884168115688, 0.000353683842526901, 0.000783601748464534, -0.0100994603616308, -0.00283094783533959, -0.00461061074759097, 0.0524737609398931, 0.0136545515861494, -0.114237211068643, 0.146300601894828},
    {0.0302607912394493, 0.00240386122828018, 0.383781769421762, -0.0139696283029962, 0.0339902756094703, -0.0450554166684596, 0.0372865568411145, -0.192278816911636, 0.528043022658163, -0.8446859064541, 1.06700157025112, -0.000511673580091731, -0.000381829281952265, -0.000460789788441316, -0.00106379802585986, 0.00358354763462232, 0.00322333070002885, 0.00660102438160646, -0.0118622341946521, -0.018106355113327, 0.0322006983558951},
    {0.00667079586750288, 0.00993310344415978, 0.0212444922493685, -0.00229087870815543, -0.00179541603886918, -0.0028251860991932, -0.0226630998229094, 0.156342775489915, -0.258759594014306, 0.236103158634313, -0.111125139387872, 0.876891439141718, -0.302458555327639, 0.175383708639472, -0.0630032735824581, 0.498555814026562, -0.065478717572815, 0.0169619364492784, -0.314194635183775, 0.0184347408081439, 0.128072530987559},
    {-0.0286068976933352, 0.015988663892484, 0.0148604061123254, -0.0180541439467771, -0.00411419822382669, -0.00405358287482745, -0.016447744326741, 0.22924912760186, -0.221223776804147, 0.181174276948877, -0.0806490680978049, 0.223417040412163, -0.231238226657235, 0.192207584223597, -0.0862737172214619, 1.22974850352853, -0.333943393600633, 0.112140559777146, -0.311353413436725, 0.0341577423335029, 0.103014258053033},
    {0.00931497291175314, 0.0247452402266107, -0.00922514994197474, -0.0606289716778428, 0.0340596261878221, 0.00746042768236271, 0.0111885296546001, -0.062957259178694, 0.349891088888984, -0.14630367985096, 0.054861291135291, -0.020982661416396, -0.0746478580227082, 0.142500330131784, -0.0990804497179822, 0.573740854582159, -0.500754739487113, 0.27385191249248, 0.782267630268715, -0.195594591646512, -0.0937065432223785},
    {-0.00537824314652443, 0.0302082142014097, 0.00825808223133462, -0.116350759883609, 0.158904966098304, -0.0775230990370276, -0.0127909840405514, 0.0346615122935093, -0.106516480672617, 0.505560362202351, -0.0627186878900591, 0.00463825162131678, 0.00497706523969872, 0.0484212376043608, -0.0763429660285795, -0.0444030949500112, -0.249521716013768, 0.324808144252444, 0.714592776213399, -0.537291212836954, 0.453806632541575},
    {0.00215019579190651, 0.0252317271161175, -0.0219219744942588, -0.127538846705594, 0.258863350505813, -0.264834169802158, 0.139267617090062, -0.0135947446016061, 0.0379041070687601, -0.0671811314718994, 0.68287804767579, -0.000690853742915251, -0.000544492307376131, -0.000943298929830172, -0.0317797556941894, 0.00520593803287008, 0.00603157757626634, 0.174331673509079, -0.021337351001519, -0.412439463269163, 0.630941847653845},
    {0.0297862103393284, 0.0108477098253125, 0.383781769421762, -0.0638326515640508, 0.157933629489286, -0.214698369265969, 0.187061226047799, -0.186726799032025, 0.503374820539516, -0.781712279637834, 0.91722690104444, -0.00249287039259435, -0.00173449537269258, -0.00198141050976808, -0.00417858209820154, 0.0171382651071727, 0.0142147192369621, 0.0263659237535672, -0.0550743874525716, -0.0741693536165771, 0.138870024137138},
    {-0.00028979043307653, -0.00493169034724526, 0.0212444922493685, 0.00167932161868427, 0.00248737379934728, 0.0302601351634081, -0.0509318992314003, 0.000213622730752274, -0.0632114408178762, 0.116485298204743, -0.0828563399793809, 0.0026926879973779, 0.791386987076182, -0.119876629286113, 0.0344356531756312, 0.273705530722231, 0.346013693590001, -0.0175212389768835, -0.348368311330433, -0.147222526079844, 0.214605070154527},
    {0.0113268065183625, -0.0104205475255715, 0.0148604061123254, 0.0162194604107222, 0.0061094886687351, 0.0203366340087172, -0.036963825036264, -0.0307870174319406, -0.0441594864724298, 0.0871822082787368, -0.0601329873882819, -0.0674290094532621, 0.231575098999885, -0.137347734436376, 0.0577898328531742, 0.551669627275299, 0.806202612367528, -0.124164029261486, -0.336709615880874, -0.127774032446627, 0.172616109839628},
    {0.00176240326626475, -0.0096769144625101, -0.00922514994197474, 0.0297753220521518, -0.0234683839921207, -0.0100196696260987, 0.0251445331560331, -0.00762610204706261, 0.0110319323492212, -0.0655105125261074, 0.040905287633858, -0.00571199648740203, 0.00316100902322143, -0.0439657945727261, 0.036280867346213, 0.0406541648122453, 0.301141419354959, -0.140693007441304, 0.787193803309954, 0.195866402031954, -0.157019613238769},
    {-0.0113746507103992, 0.00886499126299124, 0.00825808223133462, -0.039182695646816, 0.0650649381376048, -0.04450162141982, -0.0287458077365596, 0.0603277214355376, -0.13247071584495, 0.165923251226195, -0.046763864194051, 0.0181423808579841, 0.00355321197506402, 0.00650698295870718, -0.0191693568526653, -0.124104313289095, -0.0470096795143154, 0.0991630527132542, 0.527064072973431, -0.229968246463955, 0.760422265900523},
    {0.0164043293606826, 0.0292106354928782, -0.0219219744942588, -0.157760473973072, 0.350688992103567, -0.414821206661923, 0.312982967698798, -0.0960209009828999, 0.239160899941259, -0.343491597466118, 0.509162697067054, -0.0109660796994704, -0.00538124281772818, -0.00653385829512925, -0.0293102618075199, 0.073819901709218, 0.0483043957337765, 0.176092675323993, -0.245177077897918, -0.481682170843017, 1.05723935050783},
    {0.0270839762816465, 0.0205077636729493, 0.383781769421762, -0.123088937984011, 0.312760236551317, -0.442806448263828, 0.420391896502075, -0.166314342085297, 0.435872083786867, -0.647432094178926, 0.683896230590164, -0.00498991685037049, -0.00309760404890727, -0.00324981522644595, -0.00600784203748775, 0.0333507022388148, 0.0242812347062679, 0.038930800625851, -0.10251030484927, -0.114057306529259, 0.232697917676089},
    {-0.00493169034724527, -0.000289790433076531, 0.0212444922493685, 0.000213622730752372, -0.0632114408178762, 0.116485298204743, -0.082856339979381, 0.00167932161868419, 0.00248737379934733, 0.030260135163408, -0.0509318992314002, 0.0344356531756311, -0.119876629286113, 0.791386987076182, 0.00269268799737793, -0.0175212389768829, 0.346013693590001, 0.273705530722231, -0.147222526079844, -0.348368311330433, 0.214605070154527},
    {-0.0104205475255715, 0.0113268065183625, 0.0148604061123254, -0.0307870174319404, -0.0441594864724298, 0.0871822082787368, -0.060132987388282, 0.016219460410722, 0.0061094886687351, 0.0203366340087171, -0.0369638250362639, 0.0577898328531741, -0.137347734436376, 0.231575098999884, -0.0674290094532621, -0.124164029261485, 0.806202612367528, 0.551669627275298, -0.127774032446627, -0.336709615880874, 0.172616109839628},
    {-0.00967691446251006, 0.00176240326626469, -0.00922514994197474, -0.00762610204706245, 0.0110319323492211, -0.0655105125261073, 0.040905287633858, 0.0297753220521517, -0.0234683839921207, -0.0100196696260987, 0.0251445331560331, 0.0362808673462131, -0.0439657945727263, 0.00316100902322151, -0.00571199648740208, -0.140693007441303, 0.301141419354959, 0.0406541648122449, 0.195866402031955, 0.787193803309953, -0.157019613238769},
    {0.00886499126299125, -0.0113746507103993, 0.00825808223133462, 0.0603277214355378, -0.13247071584495, 0.165923251226196, -0.0467638641940511, -0.0391826956468162, 0.0650649381376049, -0.0445016214198201, -0.0287458077365595, -0.0191693568526653, 0.0065069829587072, 0.00355321197506391, 0.0181423808579841, 0.0991630527132546, -0.0470096795143155, -0.124104313289096, -0.229968246463956, 0.527064072973431, 0.760422265900522},
    {0.0292106354928782, 0.0164043293606826, -0.0219219744942588, -0.0960209009828997, 0.239160899941259, -0.343491597466118, 0.509162697067054, -0.157760473973072, 0.350688992103567, -0.414821206661923, 0.312982967698798, -0.0293102618075201, -0.00653385829512896, -0.0053812428177285, -0.0109660796994702, 0.176092675323993, 0.0483043957337765, 0.0738199017092178, -0.481682170843017, -0.245177077897917, 1.05723935050783},
    {0.0205077636729494, 0.0270839762816465, 0.383781769421762, -0.166314342085297, 0.435872083786866, -0.647432094178925, 0.683896230590163, -0.123088937984011, 0.312760236551317, -0.442806448263829, 0.420391896502076, -0.00600784203748782, -0.00324981522644582, -0.00309760404890739, -0.00498991685037042, 0.0389308006258514, 0.0242812347062679, 0.0333507022388143, -0.114057306529259, -0.10251030484927, 0.232697917676089},
    {0.00993310344415983, 0.00667079586750302, 0.0212444922493685, 0.156342775489915, -0.258759594014306, 0.236103158634313, -0.111125139387872, -0.00229087870815543, -0.00179541603886913, -0.00282518609919321, -0.0226630998229093, -0.0630032735824584, 0.175383708639473, -0.30245855532764, 0.876891439141718, 0.016961936449279, -0.0654787175728152, 0.498555814026562, 0.0184347408081441, -0.314194635183775, 0.128072530987558},
    {0.0159886638924841, -0.0286068976933352, 0.0148604061123254, 0.22924912760186, -0.221223776804147, 0.181174276948877, -0.080649068097805, -0.0180541439467773, -0.00411419822382672, -0.00405358287482744, -0.0164477443267409, -0.0862737172214622, 0.192207584223598, -0.231238226657236, 0.223417040412163, 0.112140559777147, -0.333943393600633, 1.22974850352853, 0.0341577423335028, -0.311353413436725, 0.103014258053033},
    {0.0247452402266108, 0.00931497291175302, -0.00922514994197474, -0.0629572591786936, 0.349891088888984, -0.14630367985096, 0.054861291135291, -0.0606289716778429, 0.034059626187822, 0.00746042768236273, 0.0111885296546002, -0.0990804497179823, 0.142500330131784, -0.0746478580227087, -0.0209826614163958, 0.273851912492481, -0.500754739487113, 0.573740854582159, -0.195594591646512, 0.782267630268714, -0.0937065432223785},
    {0.0302082142014097, -0.0053782431465245, 0.00825808223133462, 0.0346615122935094, -0.106516480672617, 0.505560362202351, -0.0627186878900593, -0.116350759883609, 0.158904966098304, -0.0775230990370275, -0.0127909840405513, -0.0763429660285795, 0.0484212376043609, 0.00497706523969843, 0.00463825162131691, 0.324808144252444, -0.249521716013768, -0.0444030949500115, -0.537291212836954, 0.714592776213398, 0.453806632541574},
    {0.0252317271161174, 0.00215019579190647, -0.0219219744942588, -0.0135947446016059, 0.0379041070687599, -0.0671811314718994, 0.68287804767579, -0.127538846705594, 0.258863350505813, -0.264834169802158, 0.139267617090062, -0.0317797556941894, -0.000943298929829981, -0.000544492307376373, -0.000690853742915131, 0.174331673509079, 0.00603157757626634, 0.0052059380328697, -0.412439463269163, -0.021337351001519, 0.630941847653845},
    {0.0108477098253126, 0.0297862103393283, 0.383781769421762, -0.186726799032025, 0.503374820539516, -0.781712279637833, 0.917226901044439, -0.0638326515640514, 0.157933629489287, -0.21469836926597, 0.1870612260478, -0.00417858209820159, -0.00198141050976797, -0.00173449537269267, -0.00249287039259428, 0.0263659237535678, 0.0142147192369621, 0.0171382651071722, -0.0741693536165777, -0.0550743874525721, 0.138870024137138},
    {0.0228100382612196, 0.451781527938019, 0.0212444922493685, 0.480196959209587, -0.485112413103936, 0.33430090940653, -0.129270846816877, -0.00435797285500413, -0.00262271535279831, -0.00264741907032538, -0.00451739239390445, -0.139422804864314, 0.362753046285497, -0.531358255113295, 0.536853665675629, 0.0288237023757001, -0.0868783487674191, 0.186306589721922, 0.0200955984023096, -0.0886753743743808, 0.0296970131864728},
    {0.0209787447672339, 0.029209347944854, 0.0148604061123254, 0.933940828838981, -0.43459733129987, 0.258732833432064, -0.0938183149683684, -0.0201398049187092, -0.00366114640519847, -0.00248446928919901, -0.0032784974561775, -0.11195542536579, 0.244262845439317, -0.278425789021844, 0.18142472319244, 0.116086810353338, -0.292295709319495, 0.481548528406008, 0.0243540957629699, -0.0886292641890963, 0.0238865879842167},
    {0.0175624456189402, -0.0114534257427367, -0.00922514994197474, 0.121089015118006, 0.81653849190444, -0.213833521347853, 0.0638196325475233, -0.0380541113043155, 0.018049557418552, 0.00301207338841277, 0.00223018824236796, -0.0723431851343307, 0.110373061425867, -0.0703336174742125, 0.00804429541953361, 0.168822657906924, -0.295493158937359, 0.266887393947734, -0.0918643362117908, 0.227900040587807, -0.0217283474315355},
    {0.0127065651041046, 0.0043086965371545, 0.00825808223133462, -0.0322178732011424, 0.133150064172287, 0.799454670319403, -0.0729600695166933, -0.0452095921596844, 0.0554279145788191, -0.0228378787134236, -0.0025496024139174, -0.0345079109900455, 0.0267083944790002, -0.00183283150481491, -0.000859354133716933, 0.131797221359002, -0.116239521286917, 0.0110638509873064, -0.184129192920017, 0.225241262971041, 0.105227104100919},
    {0.00717650050039728, -0.00513768766416062, -0.0219219744942588, 0.0342452950729172, -0.10340716652246, 0.215682917985073, 0.794385716697146, -0.034841899618864, 0.0669804693088443, -0.0630569735001133, 0.0277599480687051, -0.0100994603616309, 0.000783601748464614, 0.000353683842526795, 0.000346884168115719, 0.0524737609398933, -0.00461061074759097, -0.00283094783533999, -0.114237211068643, 0.0136545515861492, 0.146300601894828},
    {0.00240386122828029, 0.0302607912394493, 0.383781769421762, -0.192278816911635, 0.528043022658162, -0.8446859064541, 1.06700157025112, -0.0139696283029971, 0.033990275609472, -0.0450554166684618, 0.0372865568411163, -0.00106379802585994, -0.000460789788441248, -0.000381829281952324, -0.000511673580091672, 0.00660102438160725, 0.003223330700029, 0.00358354763462187, -0.0181063551133281, -0.011862234194653, 0.0322006983558966}};
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('simplify expressions', True), ('ignore zero tables', True), ('non zero columns', True), ('remove zero terms', True), ('ignore ones', True)
    // Total number of operations to compute element tensor: 3096
    
    // Loop quadrature points for integral
    // Number of operations to compute element tensor for following IP loop = 3096
    for (unsigned int ip = 0; ip < 36; ip++)
    {
      
      // Function declarations
      double F0 = 0;
      
      // Total number of operations to compute function values = 42
      for (unsigned int r = 0; r < 21; r++)
      {
        F0 += FE0[ip][r]*w[0][r];
      }// end loop over 'r'
      
      // Number of operations to compute ip constants: 2
      // Number of operations: 2
      const double Gip0 = F0*W36[ip]*det;
      
      
      // Number of operations for primary indices = 42
      for (unsigned int j = 0; j < 21; j++)
      {
        // Number of operations to compute entry = 2
        A[j] += FE0[ip][j]*Gip0;
      }// end loop over 'j'
    }// end loop over 'ip'
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class poisson2d_5_1_cell_integral_0: public ufc::cell_integral
{
private:

  poisson2d_5_1_cell_integral_0_quadrature integral_0_quadrature;

public:

  /// Constructor
  poisson2d_5_1_cell_integral_0() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~poisson2d_5_1_cell_integral_0()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Reset values of the element tensor block
    A[0] = 0;
    A[1] = 0;
    A[2] = 0;
    A[3] = 0;
    A[4] = 0;
    A[5] = 0;
    A[6] = 0;
    A[7] = 0;
    A[8] = 0;
    A[9] = 0;
    A[10] = 0;
    A[11] = 0;
    A[12] = 0;
    A[13] = 0;
    A[14] = 0;
    A[15] = 0;
    A[16] = 0;
    A[17] = 0;
    A[18] = 0;
    A[19] = 0;
    A[20] = 0;
    
    // Add all contributions to element tensor
    integral_0_quadrature.tabulate_tensor(A, w, c);
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class poisson2d_5_form_1: public ufc::form
{
public:

  /// Constructor
  poisson2d_5_form_1() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~poisson2d_5_form_1()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "Form([Integral(Product(BasisFunction(FiniteElement('Lagrange', Cell('triangle', 1), 5), 0), Function(FiniteElement('Lagrange', Cell('triangle', 1), 5), 0)), Measure('cell', 0, None))])";
  }

  /// Return the rank of the global tensor (r)
  virtual unsigned int rank() const
  {
    return 1;
  }

  /// Return the number of coefficients (n)
  virtual unsigned int num_coefficients() const
  {
    return 1;
  }

  /// Return the number of cell integrals
  virtual unsigned int num_cell_integrals() const
  {
    return 1;
  }
  
  /// Return the number of exterior facet integrals
  virtual unsigned int num_exterior_facet_integrals() const
  {
    return 0;
  }
  
  /// Return the number of interior facet integrals
  virtual unsigned int num_interior_facet_integrals() const
  {
    return 0;
  }
    
  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new poisson2d_5_1_finite_element_0();
      break;
    case 1:
      return new poisson2d_5_1_finite_element_1();
      break;
    }
    return 0;
  }
  
  /// Create a new dof map for argument function i
  virtual ufc::dof_map* create_dof_map(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new poisson2d_5_1_dof_map_0();
      break;
    case 1:
      return new poisson2d_5_1_dof_map_1();
      break;
    }
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(unsigned int i) const
  {
    return new poisson2d_5_1_cell_integral_0();
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(unsigned int i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(unsigned int i) const
  {
    return 0;
  }

};

// DOLFIN wrappers

// Standard library includes
#include <string>

// DOLFIN includes
#include <dolfin/fem/FiniteElement.h>
#include <dolfin/fem/DofMap.h>
#include <dolfin/fem/Form.h>
#include <dolfin/function/FunctionSpace.h>
#include <dolfin/function/Function.h>
#include <dolfin/function/Coefficient.h>

namespace Poisson2D_5
{

class CoefficientReference
{
public:
  
  CoefficientReference(const std::string & name):
    _name(name)
  {}
  
  ~CoefficientReference()
  {}

  CoefficientReference& operator=(dolfin::Function & f)
  {
    _function_pointer = dolfin::reference_to_no_delete_pointer(f);
    return *this;
  }
  
  CoefficientReference& operator=(const boost::shared_ptr<dolfin::Function> f)
  {
    _function_pointer = f;
    return *this;
  }

  std::string name() const
  {
    return _name;
  }

  dolfin::Function & function() const
  {
    return *_function_pointer;
  }

  boost::shared_ptr<dolfin::Function> function_pointer() const
  {
    return _function_pointer;
  }

private:

  boost::shared_ptr<dolfin::Function> _function_pointer;
  std::string _name;

};

class CoefficientSet
{
public:

  CoefficientSet():
    f("f")
  {}
  
  ~CoefficientSet()
  {}

  dolfin::uint num_coefficients() const
  {
    return 1;
  }

  std::string name(dolfin::uint i) const
  {
    switch(i)
    {
    case 0: return "f";
    default:
        throw std::runtime_error("Invalid coefficient number.");
    }
  }

  void disp() const
  {
    for(dolfin::uint i = 0; i < num_coefficients(); ++i)
    {
        dolfin::cout << "Coefficient " << i << ": \t" << name(i) << dolfin::endl;
    }
  }

  CoefficientReference f;
};

class CoefficientSpace_f: public dolfin::FunctionSpace
{
public:


  CoefficientSpace_f(const dolfin::Mesh & mesh):
      dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson2d_5_1_finite_element_1()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson2d_5_1_dof_map_1()), dolfin::reference_to_no_delete_pointer(mesh))))
  {
    // Do nothing
  }

  CoefficientSpace_f(dolfin::Mesh & mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson2d_5_1_finite_element_1()))),
                          boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson2d_5_1_dof_map_1()), dolfin::reference_to_no_delete_pointer(mesh))))
  {
    // Do nothing
  }

  CoefficientSpace_f(boost::shared_ptr<dolfin::Mesh> mesh):
      dolfin::FunctionSpace(mesh,
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson2d_5_1_finite_element_1()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson2d_5_1_dof_map_1()), mesh)))
  {
      // Do nothing
  }

  CoefficientSpace_f(boost::shared_ptr<const dolfin::Mesh> mesh):
      dolfin::FunctionSpace(mesh,
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson2d_5_1_finite_element_1()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson2d_5_1_dof_map_1()), mesh)))
  {
      // Do nothing
  }
 

  ~CoefficientSpace_f()
  {
  }
  
};

class Form_0_FunctionSpace_0: public dolfin::FunctionSpace
{
public:


  Form_0_FunctionSpace_0(const dolfin::Mesh & mesh):
      dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson2d_5_0_finite_element_0()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson2d_5_0_dof_map_0()), dolfin::reference_to_no_delete_pointer(mesh))))
  {
    // Do nothing
  }

  Form_0_FunctionSpace_0(dolfin::Mesh & mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson2d_5_0_finite_element_0()))),
                          boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson2d_5_0_dof_map_0()), dolfin::reference_to_no_delete_pointer(mesh))))
  {
    // Do nothing
  }

  Form_0_FunctionSpace_0(boost::shared_ptr<dolfin::Mesh> mesh):
      dolfin::FunctionSpace(mesh,
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson2d_5_0_finite_element_0()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson2d_5_0_dof_map_0()), mesh)))
  {
      // Do nothing
  }

  Form_0_FunctionSpace_0(boost::shared_ptr<const dolfin::Mesh> mesh):
      dolfin::FunctionSpace(mesh,
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson2d_5_0_finite_element_0()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson2d_5_0_dof_map_0()), mesh)))
  {
      // Do nothing
  }
 

  ~Form_0_FunctionSpace_0()
  {
  }
  
};

class Form_0_FunctionSpace_1: public dolfin::FunctionSpace
{
public:


  Form_0_FunctionSpace_1(const dolfin::Mesh & mesh):
      dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson2d_5_0_finite_element_1()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson2d_5_0_dof_map_1()), dolfin::reference_to_no_delete_pointer(mesh))))
  {
    // Do nothing
  }

  Form_0_FunctionSpace_1(dolfin::Mesh & mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson2d_5_0_finite_element_1()))),
                          boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson2d_5_0_dof_map_1()), dolfin::reference_to_no_delete_pointer(mesh))))
  {
    // Do nothing
  }

  Form_0_FunctionSpace_1(boost::shared_ptr<dolfin::Mesh> mesh):
      dolfin::FunctionSpace(mesh,
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson2d_5_0_finite_element_1()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson2d_5_0_dof_map_1()), mesh)))
  {
      // Do nothing
  }

  Form_0_FunctionSpace_1(boost::shared_ptr<const dolfin::Mesh> mesh):
      dolfin::FunctionSpace(mesh,
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson2d_5_0_finite_element_1()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson2d_5_0_dof_map_1()), mesh)))
  {
      // Do nothing
  }
 

  ~Form_0_FunctionSpace_1()
  {
  }
  
};

class Form_0: public dolfin::Form
{
public:

  // Constructor
  Form_0(const dolfin::FunctionSpace & _V0, const dolfin::FunctionSpace & _V1):
    dolfin::Form(2, 0)
  {
    boost::shared_ptr<const dolfin::FunctionSpace> _pV0 = dolfin::reference_to_no_delete_pointer(_V0);
    boost::shared_ptr<const dolfin::FunctionSpace> _pV1 = dolfin::reference_to_no_delete_pointer(_V1);

    _function_spaces[0] = _pV0;
    _function_spaces[1] = _pV1;

    _ufc_form = boost::shared_ptr<const ufc::form>(new poisson2d_5_form_0());
  }

  // Constructor
  Form_0(const dolfin::FunctionSpace & _V0, const dolfin::FunctionSpace & _V1, const CoefficientSet & coefficients):
    dolfin::Form(2, 0)
  {
    boost::shared_ptr<const dolfin::FunctionSpace> _pV0 = dolfin::reference_to_no_delete_pointer(_V0);
    boost::shared_ptr<const dolfin::FunctionSpace> _pV1 = dolfin::reference_to_no_delete_pointer(_V1);

    _function_spaces[0] = _pV0;
    _function_spaces[1] = _pV1;

    update_coefficients(coefficients);

    _ufc_form = boost::shared_ptr<const ufc::form>(new poisson2d_5_form_0());
  }

  // Constructor
  Form_0(boost::shared_ptr<const dolfin::FunctionSpace> _pV0, boost::shared_ptr<const dolfin::FunctionSpace> _pV1):
    dolfin::Form(2, 0)
  {
    _function_spaces[0] = _pV0;
    _function_spaces[1] = _pV1;

    _ufc_form = boost::shared_ptr<const ufc::form>(new poisson2d_5_form_0());
  }

  // Constructor
  Form_0(boost::shared_ptr<const dolfin::FunctionSpace> _pV0, boost::shared_ptr<const dolfin::FunctionSpace> _pV1, const CoefficientSet & coefficients):
    dolfin::Form(2, 0)
  {
    _function_spaces[0] = _pV0;
    _function_spaces[1] = _pV1;

    update_coefficients(coefficients);

    _ufc_form = boost::shared_ptr<const ufc::form>(new poisson2d_5_form_0());
  }

  // Destructor
  ~Form_0()
  {}

  void update_coefficients(const CoefficientSet & coefficients)
  {

  }

  /// Return the number of the coefficient with this name
  virtual dolfin::uint coefficient_number(const std::string & name) const
  {
    dolfin::error("No coefficients.");
    return 0;
  }
  
  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(dolfin::uint i) const
  {
    dolfin::error("No coefficients.");
    return "unnamed";
  }

  // Typedefs
  typedef Form_0_FunctionSpace_0 TestSpace;
  typedef Form_0_FunctionSpace_1 TrialSpace;

  // Coefficients
};

class Form_1_FunctionSpace_0: public dolfin::FunctionSpace
{
public:


  Form_1_FunctionSpace_0(const dolfin::Mesh & mesh):
      dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson2d_5_1_finite_element_0()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson2d_5_1_dof_map_0()), dolfin::reference_to_no_delete_pointer(mesh))))
  {
    // Do nothing
  }

  Form_1_FunctionSpace_0(dolfin::Mesh & mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson2d_5_1_finite_element_0()))),
                          boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson2d_5_1_dof_map_0()), dolfin::reference_to_no_delete_pointer(mesh))))
  {
    // Do nothing
  }

  Form_1_FunctionSpace_0(boost::shared_ptr<dolfin::Mesh> mesh):
      dolfin::FunctionSpace(mesh,
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson2d_5_1_finite_element_0()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson2d_5_1_dof_map_0()), mesh)))
  {
      // Do nothing
  }

  Form_1_FunctionSpace_0(boost::shared_ptr<const dolfin::Mesh> mesh):
      dolfin::FunctionSpace(mesh,
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson2d_5_1_finite_element_0()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson2d_5_1_dof_map_0()), mesh)))
  {
      // Do nothing
  }
 

  ~Form_1_FunctionSpace_0()
  {
  }
  
};

typedef CoefficientSpace_f Form_1_FunctionSpace_1;

class Form_1_Coefficient_f: public dolfin::Coefficient
{
public:

  Form_1_Coefficient_f(dolfin::Form & form):
    dolfin::Coefficient(form)
  {}
  
  ~Form_1_Coefficient_f()
  {}

  const Form_1_Coefficient_f& operator=(dolfin::Function & f)
  {
    attach(f);
    return *this;
  }
  
  const Form_1_Coefficient_f& operator=(boost::shared_ptr<dolfin::Function> f)
  {
    attach(f);
    return *this;
  }
  
  const dolfin::FunctionSpace * create_function_space() const
  {
    return new Form_1_FunctionSpace_1(form.mesh());
  }
  
  dolfin::uint number() const
  {
    return 0;
  }

  std::string name() const
  {
    return "f";
  }

};

class Form_1: public dolfin::Form
{
public:

  // Constructor
  Form_1(const dolfin::FunctionSpace & _V0):
    dolfin::Form(1, 1), f(*this)
  {
    boost::shared_ptr<const dolfin::FunctionSpace> _pV0 = dolfin::reference_to_no_delete_pointer(_V0);

    _function_spaces[0] = _pV0;

    _ufc_form = boost::shared_ptr<const ufc::form>(new poisson2d_5_form_1());
  }

  // Constructor
  Form_1(const dolfin::FunctionSpace & _V0, const CoefficientSet & coefficients):
    dolfin::Form(1, 1), f(*this)
  {
    boost::shared_ptr<const dolfin::FunctionSpace> _pV0 = dolfin::reference_to_no_delete_pointer(_V0);

    _function_spaces[0] = _pV0;

    update_coefficients(coefficients);

    _ufc_form = boost::shared_ptr<const ufc::form>(new poisson2d_5_form_1());
  }

  // Constructor
  Form_1(const dolfin::FunctionSpace & _V0, dolfin::Function & _f):
    dolfin::Form(1, 1), f(*this)
  {
    boost::shared_ptr<const dolfin::FunctionSpace> _pV0 = dolfin::reference_to_no_delete_pointer(_V0);

    _function_spaces[0] = _pV0;

    boost::shared_ptr<dolfin::Function> _pf = dolfin::reference_to_no_delete_pointer(_f);

    f = _pf;

    _ufc_form = boost::shared_ptr<const ufc::form>(new poisson2d_5_form_1());
  }

  // Constructor
  Form_1(const dolfin::FunctionSpace & _V0, boost::shared_ptr<dolfin::Function> _pf):
    dolfin::Form(1, 1), f(*this)
  {
    boost::shared_ptr<const dolfin::FunctionSpace> _pV0 = dolfin::reference_to_no_delete_pointer(_V0);

    _function_spaces[0] = _pV0;

    f = _pf;

    _ufc_form = boost::shared_ptr<const ufc::form>(new poisson2d_5_form_1());
  }

  // Constructor
  Form_1(boost::shared_ptr<const dolfin::FunctionSpace> _pV0):
    dolfin::Form(1, 1), f(*this)
  {
    _function_spaces[0] = _pV0;

    _ufc_form = boost::shared_ptr<const ufc::form>(new poisson2d_5_form_1());
  }

  // Constructor
  Form_1(boost::shared_ptr<const dolfin::FunctionSpace> _pV0, const CoefficientSet & coefficients):
    dolfin::Form(1, 1), f(*this)
  {
    _function_spaces[0] = _pV0;

    update_coefficients(coefficients);

    _ufc_form = boost::shared_ptr<const ufc::form>(new poisson2d_5_form_1());
  }

  // Constructor
  Form_1(boost::shared_ptr<const dolfin::FunctionSpace> _pV0, dolfin::Function & _f):
    dolfin::Form(1, 1), f(*this)
  {
    _function_spaces[0] = _pV0;

    boost::shared_ptr<dolfin::Function> _pf = dolfin::reference_to_no_delete_pointer(_f);

    f = _pf;

    _ufc_form = boost::shared_ptr<const ufc::form>(new poisson2d_5_form_1());
  }

  // Constructor
  Form_1(boost::shared_ptr<const dolfin::FunctionSpace> _pV0, boost::shared_ptr<dolfin::Function> _pf):
    dolfin::Form(1, 1), f(*this)
  {
    _function_spaces[0] = _pV0;

    f = _pf;

    _ufc_form = boost::shared_ptr<const ufc::form>(new poisson2d_5_form_1());
  }

  // Destructor
  ~Form_1()
  {}

  void update_coefficients(const CoefficientSet & coefficients)
  {
    f = coefficients.f.function_pointer();
  }

  /// Return the number of the coefficient with this name
  virtual dolfin::uint coefficient_number(const std::string & name) const
  {
    if(name == "f") return 0;
    dolfin::error("Invalid coefficient.");
    return 0;
  }
  
  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(dolfin::uint i) const
  {
    switch(i)
    {
      case 0: return "f";
    }
    dolfin::error("Invalid coefficient.");
    return "unnamed";
  }

  // Typedefs
  typedef Form_1_FunctionSpace_0 TestSpace;
  typedef Form_1_FunctionSpace_1 CoefficientSpace_f;

  // Coefficients
  Form_1_Coefficient_f f;
};

// Class typedefs
typedef Form_0 BilinearForm;
typedef Form_1 LinearForm;
typedef Form_0::TestSpace FunctionSpace;

} // namespace Poisson2D_5

#endif
