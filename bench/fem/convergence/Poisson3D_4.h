// This code conforms with the UFC specification version 1.0
// and was automatically generated by FFC version 0.6.2.
//
// Warning: This code was generated with the option '-l dolfin'
// and contains DOLFIN-specific wrappers that depend on DOLFIN.

#ifndef __POISSON3D_4_H
#define __POISSON3D_4_H

#include <cmath>
#include <stdexcept>
#include <fstream>
#include <ufc.h>
    
/// This class defines the interface for a finite element.

class UFC_Poisson3D_4BilinearForm_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  UFC_Poisson3D_4BilinearForm_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson3D_4BilinearForm_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', 'tetrahedron', 4)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 35;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_02 = element_coordinates[3][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
    const double J_12 = element_coordinates[3][1] - element_coordinates[0][1];
    const double J_20 = element_coordinates[1][2] - element_coordinates[0][2];
    const double J_21 = element_coordinates[2][2] - element_coordinates[0][2];
    const double J_22 = element_coordinates[3][2] - element_coordinates[0][2];
      
    // Compute sub determinants
    const double d00 = J_11*J_22 - J_12*J_21;
    const double d01 = J_12*J_20 - J_10*J_22;
    const double d02 = J_10*J_21 - J_11*J_20;
    
    const double d10 = J_02*J_21 - J_01*J_22;
    const double d11 = J_00*J_22 - J_02*J_20;
    const double d12 = J_01*J_20 - J_00*J_21;
    
    const double d20 = J_01*J_12 - J_02*J_11;
    const double d21 = J_02*J_10 - J_00*J_12;
    const double d22 = J_00*J_11 - J_01*J_10;
      
    // Compute determinant of Jacobian
    double detJ = J_00*d00 + J_10*d10 + J_20*d20;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = d00*(element_coordinates[0][0] - element_coordinates[2][0] - element_coordinates[3][0]) \
                    + d10*(element_coordinates[0][1] - element_coordinates[2][1] - element_coordinates[3][1]) \
                    + d20*(element_coordinates[0][2] - element_coordinates[2][2] - element_coordinates[3][2]);
    
    const double C1 = d01*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[3][0]) \
                    + d11*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[3][1]) \
                    + d21*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[3][2]);
    
    const double C2 = d02*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[2][0]) \
                    + d12*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[2][1]) \
                    + d22*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[2][2]);
    
    // Get coordinates and map to the UFC reference element
    double x = (C0 + d00*coordinates[0] + d10*coordinates[1] + d20*coordinates[2]) / detJ;
    double y = (C1 + d01*coordinates[0] + d11*coordinates[1] + d21*coordinates[2]) / detJ;
    double z = (C2 + d02*coordinates[0] + d12*coordinates[1] + d22*coordinates[2]) / detJ;
    
    // Map coordinates to the reference cube
    if (std::abs(y + z - 1.0) < 1e-14)
      x = 1.0;
    else
      x = -2.0 * x/(y + z - 1.0) - 1.0;
    if (std::abs(z - 1.0) < 1e-14)
      y = -1.0;
    else
      y = 2.0 * y/(1.0 - z) - 1.0;
    z = 2.0 * z - 1.0;
    
    // Reset values
    *values = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    const double scalings_y_4 = scalings_y_3*(0.5 - 0.5*y);
    const double scalings_z_0 = 1;
    const double scalings_z_1 = scalings_z_0*(0.5 - 0.5*z);
    const double scalings_z_2 = scalings_z_1*(0.5 - 0.5*z);
    const double scalings_z_3 = scalings_z_2*(0.5 - 0.5*z);
    const double scalings_z_4 = scalings_z_3*(0.5 - 0.5*z);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    const double psitilde_a_4 = 1.75*x*psitilde_a_3 - 0.75*psitilde_a_2;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_0_4 = 0.0285714285714286*psitilde_bs_0_3 + 1.8*y*psitilde_bs_0_3 - 0.771428571428571*psitilde_bs_0_2;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_1_3 = 0.285714285714286*psitilde_bs_1_2 + 2*y*psitilde_bs_1_2 - 0.714285714285714*psitilde_bs_1_1;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_2_2 = 1.02040816326531*psitilde_bs_2_1 + 2.57142857142857*y*psitilde_bs_2_1 - 0.551020408163265*psitilde_bs_2_0;
    const double psitilde_bs_3_0 = 1;
    const double psitilde_bs_3_1 = 4.5*y + 3.5;
    const double psitilde_bs_4_0 = 1;
    
    // Compute psitilde_cs
    const double psitilde_cs_00_0 = 1;
    const double psitilde_cs_00_1 = 2*z + 1;
    const double psitilde_cs_00_2 = 0.3125*psitilde_cs_00_1 + 1.875*z*psitilde_cs_00_1 - 0.5625*psitilde_cs_00_0;
    const double psitilde_cs_00_3 = 0.155555555555556*psitilde_cs_00_2 + 1.86666666666667*z*psitilde_cs_00_2 - 0.711111111111111*psitilde_cs_00_1;
    const double psitilde_cs_00_4 = 0.09375*psitilde_cs_00_3 + 1.875*z*psitilde_cs_00_3 - 0.78125*psitilde_cs_00_2;
    const double psitilde_cs_01_0 = 1;
    const double psitilde_cs_01_1 = 3*z + 2;
    const double psitilde_cs_01_2 = 0.777777777777778*psitilde_cs_01_1 + 2.33333333333333*z*psitilde_cs_01_1 - 0.555555555555556*psitilde_cs_01_0;
    const double psitilde_cs_01_3 = 0.428571428571429*psitilde_cs_01_2 + 2.14285714285714*z*psitilde_cs_01_2 - 0.714285714285714*psitilde_cs_01_1;
    const double psitilde_cs_02_0 = 1;
    const double psitilde_cs_02_1 = 4*z + 3;
    const double psitilde_cs_02_2 = 1.265625*psitilde_cs_02_1 + 2.8125*z*psitilde_cs_02_1 - 0.546875*psitilde_cs_02_0;
    const double psitilde_cs_03_0 = 1;
    const double psitilde_cs_03_1 = 5*z + 4;
    const double psitilde_cs_04_0 = 1;
    const double psitilde_cs_10_0 = 1;
    const double psitilde_cs_10_1 = 3*z + 2;
    const double psitilde_cs_10_2 = 0.777777777777778*psitilde_cs_10_1 + 2.33333333333333*z*psitilde_cs_10_1 - 0.555555555555556*psitilde_cs_10_0;
    const double psitilde_cs_10_3 = 0.428571428571429*psitilde_cs_10_2 + 2.14285714285714*z*psitilde_cs_10_2 - 0.714285714285714*psitilde_cs_10_1;
    const double psitilde_cs_11_0 = 1;
    const double psitilde_cs_11_1 = 4*z + 3;
    const double psitilde_cs_11_2 = 1.265625*psitilde_cs_11_1 + 2.8125*z*psitilde_cs_11_1 - 0.546875*psitilde_cs_11_0;
    const double psitilde_cs_12_0 = 1;
    const double psitilde_cs_12_1 = 5*z + 4;
    const double psitilde_cs_13_0 = 1;
    const double psitilde_cs_20_0 = 1;
    const double psitilde_cs_20_1 = 4*z + 3;
    const double psitilde_cs_20_2 = 1.265625*psitilde_cs_20_1 + 2.8125*z*psitilde_cs_20_1 - 0.546875*psitilde_cs_20_0;
    const double psitilde_cs_21_0 = 1;
    const double psitilde_cs_21_1 = 5*z + 4;
    const double psitilde_cs_22_0 = 1;
    const double psitilde_cs_30_0 = 1;
    const double psitilde_cs_30_1 = 5*z + 4;
    const double psitilde_cs_31_0 = 1;
    const double psitilde_cs_40_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.866025403784439*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_0;
    const double basisvalue1 = 2.73861278752583*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_0;
    const double basisvalue2 = 1.58113883008419*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_0;
    const double basisvalue3 = 1.11803398874989*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_1;
    const double basisvalue4 = 5.1234753829798*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_0;
    const double basisvalue5 = 3.96862696659689*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_0;
    const double basisvalue6 = 2.29128784747792*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_0;
    const double basisvalue7 = 3.24037034920393*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_1;
    const double basisvalue8 = 1.87082869338697*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_1;
    const double basisvalue9 = 1.3228756555323*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_2;
    const double basisvalue10 = 7.93725393319377*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_0;
    const double basisvalue11 = 6.70820393249937*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_0;
    const double basisvalue12 = 5.19615242270663*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_0;
    const double basisvalue13 = 3*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_0;
    const double basisvalue14 = 5.80947501931113*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_1;
    const double basisvalue15 = 4.5*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_1;
    const double basisvalue16 = 2.59807621135332*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_1;
    const double basisvalue17 = 3.67423461417477*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_2;
    const double basisvalue18 = 2.12132034355964*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_2;
    const double basisvalue19 = 1.5*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_3;
    const double basisvalue20 = 11.1242977306435*psitilde_a_4*scalings_y_4*psitilde_bs_4_0*scalings_z_4*psitilde_cs_40_0;
    const double basisvalue21 = 9.81070843517429*psitilde_a_3*scalings_y_3*psitilde_bs_3_1*scalings_z_4*psitilde_cs_31_0;
    const double basisvalue22 = 8.2915619758885*psitilde_a_2*scalings_y_2*psitilde_bs_2_2*scalings_z_4*psitilde_cs_22_0;
    const double basisvalue23 = 6.42261628933256*psitilde_a_1*scalings_y_1*psitilde_bs_1_3*scalings_z_4*psitilde_cs_13_0;
    const double basisvalue24 = 3.70809924354783*psitilde_a_0*scalings_y_0*psitilde_bs_0_4*scalings_z_4*psitilde_cs_04_0;
    const double basisvalue25 = 8.77496438739212*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_1;
    const double basisvalue26 = 7.41619848709566*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_1;
    const double basisvalue27 = 5.74456264653803*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_1;
    const double basisvalue28 = 3.3166247903554*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_1;
    const double basisvalue29 = 6.42261628933256*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_2;
    const double basisvalue30 = 4.9749371855331*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_2;
    const double basisvalue31 = 2.87228132326901*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_2;
    const double basisvalue32 = 4.06201920231798*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_3;
    const double basisvalue33 = 2.34520787991171*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_3;
    const double basisvalue34 = 1.6583123951777*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_4;
    
    // Table(s) of coefficients
    const static double coefficients0[35][35] = \
    {{-0.0137464349807053, -0.014490014748814, -0.00836581391578937, -0.00591552374999943, 0, 0, 0, 0, 0, 0, -0.00671936840905292, -0.00567890279999946, -0.00439885919382571, -0.00253968253968253, -0.00491807409042212, -0.00380952380952381, -0.00219942959691287, -0.00311046316543895, -0.0017958267458706, -0.00126984126984128, 0.0136980289516341, 0.0120805260192622, 0.010209907964538, 0.00790856070259325, 0.00456600965054471, 0.0108051509532101, 0.00913201930108942, 0.0070736317340728, 0.00408396318581522, 0.00790856070259325, 0.00612594477872282, 0.0035368158670364, 0.00500181296677923, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807054, 0.0144900147488139, -0.00836581391578936, -0.00591552374999944, 0, 0, 0, 0, 0, 0, 0.00671936840905292, -0.00567890279999947, 0.00439885919382572, -0.00253968253968254, -0.00491807409042212, 0.00380952380952381, -0.00219942959691286, 0.00311046316543896, -0.0017958267458706, -0.00126984126984127, 0.0136980289516341, -0.0120805260192622, 0.010209907964538, -0.00790856070259325, 0.00456600965054471, -0.0108051509532101, 0.00913201930108942, -0.0070736317340728, 0.00408396318581521, 0.00790856070259325, -0.00612594477872282, 0.0035368158670364, -0.00500181296677923, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807054, 0, 0.0167316278315787, -0.00591552374999945, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0101587301587302, 0, 0, -0.00659828879073858, 0, 0.0035916534917412, -0.00126984126984127, 0, 0, 0, 0, 0.0228300482527235, 0, 0, 0, -0.0163358527432608, 0, 0, 0.0106104476011092, 0, -0.00577559612561231, 0.00204198159290761},
    {-0.0137464349807054, 0, 0, 0.0177465712499983, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0126984126984127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0306297238936141},
    {0.0439885919382572, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0, 0.0406349206349206, 0, 0, 0.00439885919382573, 0, -0.0143666139669648, 0.00761904761904762, 0, 0, 0, 0, 0, 0, 0, 0, 0.0367556686723369, 0, 0, -0.0424417904044368, 0, 0.0303218796594646, -0.0122518895574456},
    {-0.0329914439536929, 0, -0.0200779533978945, -0.0141972569999987, 0, 0, -0.00969857289937746, 0, 0.0712696645099798, -0.050395263067897, 0, 0, 0, 0, 0, 0, 0.0461880215351701, 0, 0.0107749604752236, -0.019047619047619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0495154221385096, 0, -0.0606437593189292, 0.0306297238936141},
    {0.0439885919382573, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0, 0.0359165349174119, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0505364660991077, -0.0408396318581521},
    {0.0439885919382571, 0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0.0433733365754904, -0.0335968420452646, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, -0.0227156111999978, 0.0175954367753029, -0.0101587301587302, 0.00327871606028142, -0.00253968253968253, 0.00146628639794192, -0.0124418526617558, 0.00718330698348241, 0.00761904761904763, 0, 0, 0, 0, 0, 0.0243115896447228, -0.0205470434274512, 0.0159156714016638, -0.00918891716808422, -0.031634242810373, 0.0245037791148913, -0.0141472634681456, 0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, -0.0173880176985767, 0.0100389766989472, -0.0141972569999987, -0.00722888942924838, 0.00559947367421077, -0.00323285763312583, 0.0617213399848368, -0.0356348322549899, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, -0.0266666666666667, 0.01539600717839, 0.00933138949631688, -0.00538748023761179, -0.019047619047619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, -0.0285877423007065, 0.0165051407128366, -0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382572, 0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0.0311046316543896, -0.017958267458706, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, -0.0335968420452646, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, 0, -0.0117302911835352, 0.0101587301587302, -0.0229510124219699, 0.00761904761904762, -0.0014662863979419, 0.0165891368823411, -0.00718330698348239, -0.00761904761904762, 0, 0.0241610520385245, -0.0357346778758831, 0.0355885231616696, -0.0228300482527235, -0.00270128773830253, -0.0114150241263618, 0.0159156714016638, -0.0112308987609918, 0.00395428035129663, 0.00306297238936141, -0.0035368158670364, -0.00375135972508442, 0.00072194951570154, 0.00204198159290761},
    {-0.0329914439536929, -0.0173880176985767, -0.0100389766989473, 0.0141972569999987, -0.00722888942924838, 0.0615942104163185, -0.0614242950293905, -0.00685792666498186, -0.00395942580611002, 0.00559947367421077, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.0049180740904221, -0.0266666666666667, 0.0175954367753029, 0.00933138949631686, 0.00538748023761182, -0.00761904761904761, 0, 0, 0.0357346778758831, -0.0593142052694494, 0.0456600965054471, 0, -0.0091320193010894, 0, 0.00408396318581524, 0.0013180934504322, 0.00714693557517662, -0.00471575448938186, -0.00250090648338961, -0.00144389903140308, 0.0020419815929076},
    {0.0439885919382573, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484215, 0, 0, 0.0293257279588381, 0.0101587301587301, 0, -0.0101587301587302, -0.0219942959691286, 0.00207364211029264, 0.017958267458706, -0.00761904761904762, 0, 0, 0, 0.0395428035129662, -0.0456600965054471, 0, 0, -0.017684079335182, 0.0142938711503532, 0, 0.00612594477872282, 0, -0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.0439885919382572, -0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0.0433733365754904, 0.0335968420452647, 0.0193971457987549, 0.0274317066599275, 0.01583770322444, 0.0111989473484215, -0.0268774736362117, -0.0227156111999979, -0.0175954367753029, -0.0101587301587302, 0.00327871606028141, 0.00253968253968254, 0.00146628639794191, 0.0124418526617558, 0.00718330698348239, 0.00761904761904762, 0, 0, 0, 0, 0, -0.0243115896447228, -0.0205470434274512, -0.0159156714016638, -0.00918891716808422, -0.031634242810373, -0.0245037791148913, -0.0141472634681456, -0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.032991443953693, 0.0173880176985767, 0.0100389766989472, -0.0141972569999986, -0.0072288894292484, -0.00559947367421079, -0.00323285763312582, -0.0617213399848368, -0.0356348322549899, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, 0.0266666666666667, 0.01539600717839, -0.00933138949631686, -0.00538748023761177, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, 0.0285877423007065, 0.0165051407128365, 0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382572, -0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, -0.0311046316543895, -0.017958267458706, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484215, -0.0268774736362117, 0, 0.0117302911835353, 0.0101587301587301, -0.0229510124219699, -0.00761904761904762, -0.0014662863979419, -0.0165891368823411, -0.0071833069834824, -0.00761904761904762, 0, -0.0241610520385245, -0.0357346778758831, -0.0355885231616696, -0.0228300482527235, 0.00270128773830253, -0.0114150241263618, -0.0159156714016638, -0.0112308987609918, 0.00395428035129663, -0.00306297238936141, -0.0035368158670364, 0.00375135972508443, 0.000721949515701543, 0.00204198159290761},
    {-0.0329914439536929, 0.0173880176985767, -0.0100389766989473, 0.0141972569999986, -0.00722888942924838, -0.0615942104163185, -0.0614242950293904, 0.00685792666498186, -0.00395942580611, 0.00559947367421079, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042211, 0.0266666666666667, 0.0175954367753029, -0.00933138949631687, 0.0053874802376118, -0.00761904761904762, 0, 0, 0.0357346778758831, 0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108941, 0, 0.00408396318581522, 0.0013180934504322, -0.00714693557517662, -0.00471575448938187, 0.00250090648338962, -0.00144389903140308, 0.00204198159290761},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484215, 0, 0, -0.0293257279588381, 0.0101587301587301, 0, 0.0101587301587302, -0.0219942959691286, -0.00207364211029263, 0.017958267458706, -0.00761904761904762, 0, 0, 0, -0.0395428035129662, -0.0456600965054471, 0, 0, 0.017684079335182, 0.0142938711503532, 0, -0.00612594477872281, 0, 0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.0439885919382572, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484215, 0.0134387368181059, -0.0113578055999989, -0.0205280095711867, -0.0152380952380952, -0.00983614818084423, -0.0177777777777778, -0.0131965775814772, -0.0145154947720485, -0.0107749604752236, -0.0076190476190476, -0.0547921158065365, -0.0241610520385245, -0.00510495398226901, 0.00395428035129662, 0.00456600965054471, -0.0216103019064202, -0.00456600965054471, 0.0035368158670364, 0.00408396318581521, -0.00395428035129662, 0.00306297238936141, 0.0035368158670364, 0.00250090648338962, 0.00288779806280615, 0.0020419815929076},
    {-0.0329914439536929, 0, 0.0200779533978945, 0.0141972569999987, -0.0867466731509807, 0, 0.00969857289937746, 0, 0.00791885161221999, 0.00559947367421079, 0, 0.0340734167999968, 0, -0.0152380952380953, 0.0295084445425327, 0, -0.0131965775814772, 0, -0.0107749604752236, -0.00761904761904764, 0.0821881737098047, 0, -0.010209907964538, 0, 0.0045660096505447, 0, -0.00913201930108942, 0, 0.0040839631858152, -0.00790856070259325, 0, 0.00353681586703639, 0, 0.00288779806280615, 0.00204198159290761},
    {0.0439885919382572, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754903, -0.0335968420452646, 0.0193971457987549, -0.0274317066599274, 0.01583770322444, 0.0111989473484215, -0.0134387368181059, -0.0113578055999989, 0.0205280095711867, -0.0152380952380952, -0.00983614818084423, 0.0177777777777778, -0.0131965775814772, 0.0145154947720485, -0.0107749604752236, -0.00761904761904761, -0.0547921158065365, 0.0241610520385245, -0.00510495398226901, -0.00395428035129662, 0.00456600965054471, 0.0216103019064202, -0.00456600965054471, -0.0035368158670364, 0.00408396318581521, -0.00395428035129662, -0.00306297238936141, 0.00353681586703641, -0.00250090648338962, 0.00288779806280615, 0.0020419815929076},
    {0.0439885919382569, 0.139104141588614, -0.0803118135915779, -0.0567890279999946, 0.0578311154339871, 0.0335968420452646, -0.0420271492306355, 0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, -0.0586514559176762, 0.0406349206349206, 0.0393445927233769, 0.00253968253968254, -0.0109971479845643, -0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, -0.053052238005546, 0.0367556686723369, -0.0105447476034577, -0.0245037791148913, 0.0235787724469093, 0.0175063453837273, 0, -0.0122518895574456},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0, 0.0783926314389509, 0.00969857289937743, -0.0274317066599274, 0.0475131096733199, -0.0167984210226323, 0, 0, 0.0586514559176763, -0.060952380952381, 0, 0.033015873015873, 0.0241937255660415, -0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, 0.053052238005546, -0.0551335030085054, 0, -0.0326717054865217, 0.0141472634681456, 0.00875317269186366, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0, -0.0111989473484216, 0.00969857289937743, 0.0822951199797824, 0.0475131096733199, -0.0167984210226323, 0, 0, 0, 0, 0, 0.0533333333333333, -0.0461880215351701, 0.0435464843161454, 0.0251415744421884, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.057175484601413, -0.0495154221385096, -0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382572, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, 0.0578311154339871, -0.0335968420452646, -0.0420271492306356, -0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, 0.0586514559176763, 0.0406349206349206, 0.0393445927233769, -0.00253968253968253, -0.0109971479845643, 0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, 0.053052238005546, 0.0367556686723369, -0.0105447476034577, 0.0245037791148913, 0.0235787724469093, -0.0175063453837273, 0, -0.0122518895574456},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0, -0.0783926314389508, 0.00969857289937744, 0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, -0.0586514559176763, -0.060952380952381, 0, -0.033015873015873, 0.0241937255660415, 0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, -0.053052238005546, -0.0551335030085054, 0, 0.0326717054865217, 0.0141472634681456, -0.00875317269186367, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382573, 0, 0, 0.170367083999984, 0, 0.0111989473484216, 0.00969857289937742, -0.0822951199797824, 0.0475131096733199, -0.0167984210226324, 0, 0, 0, 0, 0, -0.0533333333333333, -0.0461880215351701, -0.0435464843161454, 0.0251415744421884, -0.0825396825396825, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.057175484601413, -0.0495154221385096, 0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382572, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754904, 0.0447957893936862, 0.0484928644968872, -0.0548634133198549, 0, -0.0167984210226323, 0.0806324209086351, 0.0227156111999978, -0.00586514559176761, -0.0101587301587302, -0.00327871606028142, 0.0304761904761905, 0.0271262983619253, 0.045620126426438, 0.0430998419008943, 0.0393650793650793, 0, 0, 0, 0, 0, 0.0729347689341683, 0.0205470434274512, -0.0053052238005546, -0.00918891716808421, 0.031634242810373, -0.00816792637163041, -0.0141472634681456, -0.00875317269186367, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754904, -0.0447957893936862, 0.0484928644968872, 0.0548634133198549, 0, -0.0167984210226323, -0.0806324209086352, 0.0227156111999978, 0.0058651455917676, -0.0101587301587302, -0.00327871606028142, -0.0304761904761905, 0.0271262983619253, -0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, -0.0729347689341683, 0.0205470434274512, 0.00530522380055459, -0.00918891716808422, 0.031634242810373, 0.00816792637163041, -0.0141472634681456, 0.00875317269186366, -0.0151609398297323, -0.0122518895574456},
    {0.043988591938257, 0, 0, 0.170367083999984, 0.0144577788584968, 0, -0.00323285763312582, 0, -0.0950262193466398, -0.0167984210226323, 0, 0, 0, 0, -0.0688530372659096, 0, 0.01539600717839, 0, -0.0502831488843767, -0.0825396825396825, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0738132332242037, 0, 0.0165051407128365, 0, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382574, -0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754904, -0.0447957893936862, -0.00969857289937744, 0.0548634133198549, 0.0316754064488799, 0.0391963157194754, 0.0806324209086352, 0, 0.0527863103259087, 0.060952380952381, 0.0229510124219699, 0.0101587301587302, 0.0168622935763319, -0.0124418526617558, -0.00718330698348237, -0.013968253968254, 0, 0.0724831561155734, 0.0357346778758831, -0.0118628410538899, -0.0228300482527235, -0.00810386321490759, 0.0114150241263618, -0.0053052238005546, -0.0112308987609918, -0.00395428035129662, -0.0010209907964538, -0.0035368158670364, 0.00125045324169481, 0.000721949515701528, 0.0020419815929076},
    {0.0439885919382571, 0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754903, 0.0447957893936862, -0.00969857289937744, -0.0548634133198549, 0.0316754064488799, 0.0391963157194754, -0.0806324209086351, 0, -0.0527863103259086, 0.060952380952381, 0.0229510124219699, -0.0101587301587302, 0.0168622935763319, 0.0124418526617558, -0.00718330698348238, -0.013968253968254, 0, -0.0724831561155734, 0.0357346778758831, 0.0118628410538899, -0.0228300482527235, 0.00810386321490758, 0.0114150241263618, 0.0053052238005546, -0.0112308987609918, -0.00395428035129663, 0.0010209907964538, -0.0035368158670364, -0.00125045324169481, 0.000721949515701529, 0.0020419815929076},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0.0144577788584968, 0, -0.0614242950293904, 0, -0.0633508128977598, 0.0391963157194754, 0, -0.0681468335999936, 0, -0.0914285714285714, 0.00983614818084424, 0, 0.0285925847598672, 0, 0.0143666139669648, -0.013968253968254, 0, 0, -0.0714693557517662, 0, 0.0456600965054471, 0, 0.0182640386021788, 0, 0.0040839631858152, -0.00263618690086442, 0, -0.00471575448938187, 0, -0.00144389903140307, 0.0020419815929076},
    {0.351908735506058, 0, 0, 0, -0.115662230867974, 0, -0.129314305325032, 0, 0, -0.134387368181059, 0, -0.0908624447999914, 0, 0.0406349206349207, -0.0786891854467539, 0, -0.0879771838765144, 0, 0, 0.0711111111111111, 0, 0, 0, 0, 0, 0, -0.0821881737098047, 0, 0.0367556686723369, 0.0210894952069153, 0, 0.0235787724469093, 0, 0, -0.0122518895574456}};
    
    // Extract relevant coefficients
    const double coeff0_0 = coefficients0[dof][0];
    const double coeff0_1 = coefficients0[dof][1];
    const double coeff0_2 = coefficients0[dof][2];
    const double coeff0_3 = coefficients0[dof][3];
    const double coeff0_4 = coefficients0[dof][4];
    const double coeff0_5 = coefficients0[dof][5];
    const double coeff0_6 = coefficients0[dof][6];
    const double coeff0_7 = coefficients0[dof][7];
    const double coeff0_8 = coefficients0[dof][8];
    const double coeff0_9 = coefficients0[dof][9];
    const double coeff0_10 = coefficients0[dof][10];
    const double coeff0_11 = coefficients0[dof][11];
    const double coeff0_12 = coefficients0[dof][12];
    const double coeff0_13 = coefficients0[dof][13];
    const double coeff0_14 = coefficients0[dof][14];
    const double coeff0_15 = coefficients0[dof][15];
    const double coeff0_16 = coefficients0[dof][16];
    const double coeff0_17 = coefficients0[dof][17];
    const double coeff0_18 = coefficients0[dof][18];
    const double coeff0_19 = coefficients0[dof][19];
    const double coeff0_20 = coefficients0[dof][20];
    const double coeff0_21 = coefficients0[dof][21];
    const double coeff0_22 = coefficients0[dof][22];
    const double coeff0_23 = coefficients0[dof][23];
    const double coeff0_24 = coefficients0[dof][24];
    const double coeff0_25 = coefficients0[dof][25];
    const double coeff0_26 = coefficients0[dof][26];
    const double coeff0_27 = coefficients0[dof][27];
    const double coeff0_28 = coefficients0[dof][28];
    const double coeff0_29 = coefficients0[dof][29];
    const double coeff0_30 = coefficients0[dof][30];
    const double coeff0_31 = coefficients0[dof][31];
    const double coeff0_32 = coefficients0[dof][32];
    const double coeff0_33 = coefficients0[dof][33];
    const double coeff0_34 = coefficients0[dof][34];
    
    // Compute value(s)
    *values = coeff0_0*basisvalue0 + coeff0_1*basisvalue1 + coeff0_2*basisvalue2 + coeff0_3*basisvalue3 + coeff0_4*basisvalue4 + coeff0_5*basisvalue5 + coeff0_6*basisvalue6 + coeff0_7*basisvalue7 + coeff0_8*basisvalue8 + coeff0_9*basisvalue9 + coeff0_10*basisvalue10 + coeff0_11*basisvalue11 + coeff0_12*basisvalue12 + coeff0_13*basisvalue13 + coeff0_14*basisvalue14 + coeff0_15*basisvalue15 + coeff0_16*basisvalue16 + coeff0_17*basisvalue17 + coeff0_18*basisvalue18 + coeff0_19*basisvalue19 + coeff0_20*basisvalue20 + coeff0_21*basisvalue21 + coeff0_22*basisvalue22 + coeff0_23*basisvalue23 + coeff0_24*basisvalue24 + coeff0_25*basisvalue25 + coeff0_26*basisvalue26 + coeff0_27*basisvalue27 + coeff0_28*basisvalue28 + coeff0_29*basisvalue29 + coeff0_30*basisvalue30 + coeff0_31*basisvalue31 + coeff0_32*basisvalue32 + coeff0_33*basisvalue33 + coeff0_34*basisvalue34;
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis() is not yet implemented.");
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_02 = element_coordinates[3][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
    const double J_12 = element_coordinates[3][1] - element_coordinates[0][1];
    const double J_20 = element_coordinates[1][2] - element_coordinates[0][2];
    const double J_21 = element_coordinates[2][2] - element_coordinates[0][2];
    const double J_22 = element_coordinates[3][2] - element_coordinates[0][2];
      
    // Compute sub determinants
    const double d00 = J_11*J_22 - J_12*J_21;
    const double d01 = J_12*J_20 - J_10*J_22;
    const double d02 = J_10*J_21 - J_11*J_20;
    
    const double d10 = J_02*J_21 - J_01*J_22;
    const double d11 = J_00*J_22 - J_02*J_20;
    const double d12 = J_01*J_20 - J_00*J_21;
    
    const double d20 = J_01*J_12 - J_02*J_11;
    const double d21 = J_02*J_10 - J_00*J_12;
    const double d22 = J_00*J_11 - J_01*J_10;
      
    // Compute determinant of Jacobian
    double detJ = J_00*d00 + J_10*d10 + J_20*d20;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = d00*(element_coordinates[0][0] - element_coordinates[2][0] - element_coordinates[3][0]) \
                    + d10*(element_coordinates[0][1] - element_coordinates[2][1] - element_coordinates[3][1]) \
                    + d20*(element_coordinates[0][2] - element_coordinates[2][2] - element_coordinates[3][2]);
    
    const double C1 = d01*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[3][0]) \
                    + d11*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[3][1]) \
                    + d21*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[3][2]);
    
    const double C2 = d02*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[2][0]) \
                    + d12*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[2][1]) \
                    + d22*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[2][2]);
    
    // Get coordinates and map to the UFC reference element
    double x = (C0 + d00*coordinates[0] + d10*coordinates[1] + d20*coordinates[2]) / detJ;
    double y = (C1 + d01*coordinates[0] + d11*coordinates[1] + d21*coordinates[2]) / detJ;
    double z = (C2 + d02*coordinates[0] + d12*coordinates[1] + d22*coordinates[2]) / detJ;
    
    // Map coordinates to the reference cube
    if (std::abs(y + z - 1.0) < 1e-14)
      x = 1.0;
    else
      x = -2.0 * x/(y + z - 1.0) - 1.0;
    if (std::abs(z - 1.0) < 1e-14)
      y = -1.0;
    else
      y = 2.0 * y/(1.0 - z) - 1.0;
    z = 2.0 * z - 1.0;
    
    // Compute number of derivatives
    unsigned int num_derivatives = 1;
    
    for (unsigned int j = 0; j < n; j++)
      num_derivatives *= 3;
    
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      combinations[j] = new unsigned int [n];
      for (unsigned int k = 0; k < n; k++)
        combinations[j][k] = 0;
    }
        
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] ={{d00 / detJ, d10 / detJ, d20 / detJ}, {d01 / detJ, d11 / detJ, d21 / detJ}, {d02 / detJ, d12 / detJ, d22 / detJ}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values
    for (unsigned int j = 0; j < 1*num_derivatives; j++)
      values[j] = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    const double scalings_y_4 = scalings_y_3*(0.5 - 0.5*y);
    const double scalings_z_0 = 1;
    const double scalings_z_1 = scalings_z_0*(0.5 - 0.5*z);
    const double scalings_z_2 = scalings_z_1*(0.5 - 0.5*z);
    const double scalings_z_3 = scalings_z_2*(0.5 - 0.5*z);
    const double scalings_z_4 = scalings_z_3*(0.5 - 0.5*z);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    const double psitilde_a_4 = 1.75*x*psitilde_a_3 - 0.75*psitilde_a_2;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_0_4 = 0.0285714285714286*psitilde_bs_0_3 + 1.8*y*psitilde_bs_0_3 - 0.771428571428571*psitilde_bs_0_2;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_1_3 = 0.285714285714286*psitilde_bs_1_2 + 2*y*psitilde_bs_1_2 - 0.714285714285714*psitilde_bs_1_1;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_2_2 = 1.02040816326531*psitilde_bs_2_1 + 2.57142857142857*y*psitilde_bs_2_1 - 0.551020408163265*psitilde_bs_2_0;
    const double psitilde_bs_3_0 = 1;
    const double psitilde_bs_3_1 = 4.5*y + 3.5;
    const double psitilde_bs_4_0 = 1;
    
    // Compute psitilde_cs
    const double psitilde_cs_00_0 = 1;
    const double psitilde_cs_00_1 = 2*z + 1;
    const double psitilde_cs_00_2 = 0.3125*psitilde_cs_00_1 + 1.875*z*psitilde_cs_00_1 - 0.5625*psitilde_cs_00_0;
    const double psitilde_cs_00_3 = 0.155555555555556*psitilde_cs_00_2 + 1.86666666666667*z*psitilde_cs_00_2 - 0.711111111111111*psitilde_cs_00_1;
    const double psitilde_cs_00_4 = 0.09375*psitilde_cs_00_3 + 1.875*z*psitilde_cs_00_3 - 0.78125*psitilde_cs_00_2;
    const double psitilde_cs_01_0 = 1;
    const double psitilde_cs_01_1 = 3*z + 2;
    const double psitilde_cs_01_2 = 0.777777777777778*psitilde_cs_01_1 + 2.33333333333333*z*psitilde_cs_01_1 - 0.555555555555556*psitilde_cs_01_0;
    const double psitilde_cs_01_3 = 0.428571428571429*psitilde_cs_01_2 + 2.14285714285714*z*psitilde_cs_01_2 - 0.714285714285714*psitilde_cs_01_1;
    const double psitilde_cs_02_0 = 1;
    const double psitilde_cs_02_1 = 4*z + 3;
    const double psitilde_cs_02_2 = 1.265625*psitilde_cs_02_1 + 2.8125*z*psitilde_cs_02_1 - 0.546875*psitilde_cs_02_0;
    const double psitilde_cs_03_0 = 1;
    const double psitilde_cs_03_1 = 5*z + 4;
    const double psitilde_cs_04_0 = 1;
    const double psitilde_cs_10_0 = 1;
    const double psitilde_cs_10_1 = 3*z + 2;
    const double psitilde_cs_10_2 = 0.777777777777778*psitilde_cs_10_1 + 2.33333333333333*z*psitilde_cs_10_1 - 0.555555555555556*psitilde_cs_10_0;
    const double psitilde_cs_10_3 = 0.428571428571429*psitilde_cs_10_2 + 2.14285714285714*z*psitilde_cs_10_2 - 0.714285714285714*psitilde_cs_10_1;
    const double psitilde_cs_11_0 = 1;
    const double psitilde_cs_11_1 = 4*z + 3;
    const double psitilde_cs_11_2 = 1.265625*psitilde_cs_11_1 + 2.8125*z*psitilde_cs_11_1 - 0.546875*psitilde_cs_11_0;
    const double psitilde_cs_12_0 = 1;
    const double psitilde_cs_12_1 = 5*z + 4;
    const double psitilde_cs_13_0 = 1;
    const double psitilde_cs_20_0 = 1;
    const double psitilde_cs_20_1 = 4*z + 3;
    const double psitilde_cs_20_2 = 1.265625*psitilde_cs_20_1 + 2.8125*z*psitilde_cs_20_1 - 0.546875*psitilde_cs_20_0;
    const double psitilde_cs_21_0 = 1;
    const double psitilde_cs_21_1 = 5*z + 4;
    const double psitilde_cs_22_0 = 1;
    const double psitilde_cs_30_0 = 1;
    const double psitilde_cs_30_1 = 5*z + 4;
    const double psitilde_cs_31_0 = 1;
    const double psitilde_cs_40_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.866025403784439*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_0;
    const double basisvalue1 = 2.73861278752583*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_0;
    const double basisvalue2 = 1.58113883008419*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_0;
    const double basisvalue3 = 1.11803398874989*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_1;
    const double basisvalue4 = 5.1234753829798*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_0;
    const double basisvalue5 = 3.96862696659689*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_0;
    const double basisvalue6 = 2.29128784747792*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_0;
    const double basisvalue7 = 3.24037034920393*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_1;
    const double basisvalue8 = 1.87082869338697*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_1;
    const double basisvalue9 = 1.3228756555323*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_2;
    const double basisvalue10 = 7.93725393319377*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_0;
    const double basisvalue11 = 6.70820393249937*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_0;
    const double basisvalue12 = 5.19615242270663*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_0;
    const double basisvalue13 = 3*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_0;
    const double basisvalue14 = 5.80947501931113*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_1;
    const double basisvalue15 = 4.5*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_1;
    const double basisvalue16 = 2.59807621135332*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_1;
    const double basisvalue17 = 3.67423461417477*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_2;
    const double basisvalue18 = 2.12132034355964*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_2;
    const double basisvalue19 = 1.5*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_3;
    const double basisvalue20 = 11.1242977306435*psitilde_a_4*scalings_y_4*psitilde_bs_4_0*scalings_z_4*psitilde_cs_40_0;
    const double basisvalue21 = 9.81070843517429*psitilde_a_3*scalings_y_3*psitilde_bs_3_1*scalings_z_4*psitilde_cs_31_0;
    const double basisvalue22 = 8.2915619758885*psitilde_a_2*scalings_y_2*psitilde_bs_2_2*scalings_z_4*psitilde_cs_22_0;
    const double basisvalue23 = 6.42261628933256*psitilde_a_1*scalings_y_1*psitilde_bs_1_3*scalings_z_4*psitilde_cs_13_0;
    const double basisvalue24 = 3.70809924354783*psitilde_a_0*scalings_y_0*psitilde_bs_0_4*scalings_z_4*psitilde_cs_04_0;
    const double basisvalue25 = 8.77496438739212*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_1;
    const double basisvalue26 = 7.41619848709566*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_1;
    const double basisvalue27 = 5.74456264653803*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_1;
    const double basisvalue28 = 3.3166247903554*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_1;
    const double basisvalue29 = 6.42261628933256*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_2;
    const double basisvalue30 = 4.9749371855331*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_2;
    const double basisvalue31 = 2.87228132326901*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_2;
    const double basisvalue32 = 4.06201920231798*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_3;
    const double basisvalue33 = 2.34520787991171*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_3;
    const double basisvalue34 = 1.6583123951777*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_4;
    
    // Table(s) of coefficients
    const static double coefficients0[35][35] = \
    {{-0.0137464349807053, -0.014490014748814, -0.00836581391578937, -0.00591552374999943, 0, 0, 0, 0, 0, 0, -0.00671936840905292, -0.00567890279999946, -0.00439885919382571, -0.00253968253968253, -0.00491807409042212, -0.00380952380952381, -0.00219942959691287, -0.00311046316543895, -0.0017958267458706, -0.00126984126984128, 0.0136980289516341, 0.0120805260192622, 0.010209907964538, 0.00790856070259325, 0.00456600965054471, 0.0108051509532101, 0.00913201930108942, 0.0070736317340728, 0.00408396318581522, 0.00790856070259325, 0.00612594477872282, 0.0035368158670364, 0.00500181296677923, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807054, 0.0144900147488139, -0.00836581391578936, -0.00591552374999944, 0, 0, 0, 0, 0, 0, 0.00671936840905292, -0.00567890279999947, 0.00439885919382572, -0.00253968253968254, -0.00491807409042212, 0.00380952380952381, -0.00219942959691286, 0.00311046316543896, -0.0017958267458706, -0.00126984126984127, 0.0136980289516341, -0.0120805260192622, 0.010209907964538, -0.00790856070259325, 0.00456600965054471, -0.0108051509532101, 0.00913201930108942, -0.0070736317340728, 0.00408396318581521, 0.00790856070259325, -0.00612594477872282, 0.0035368158670364, -0.00500181296677923, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807054, 0, 0.0167316278315787, -0.00591552374999945, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0101587301587302, 0, 0, -0.00659828879073858, 0, 0.0035916534917412, -0.00126984126984127, 0, 0, 0, 0, 0.0228300482527235, 0, 0, 0, -0.0163358527432608, 0, 0, 0.0106104476011092, 0, -0.00577559612561231, 0.00204198159290761},
    {-0.0137464349807054, 0, 0, 0.0177465712499983, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0126984126984127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0306297238936141},
    {0.0439885919382572, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0, 0.0406349206349206, 0, 0, 0.00439885919382573, 0, -0.0143666139669648, 0.00761904761904762, 0, 0, 0, 0, 0, 0, 0, 0, 0.0367556686723369, 0, 0, -0.0424417904044368, 0, 0.0303218796594646, -0.0122518895574456},
    {-0.0329914439536929, 0, -0.0200779533978945, -0.0141972569999987, 0, 0, -0.00969857289937746, 0, 0.0712696645099798, -0.050395263067897, 0, 0, 0, 0, 0, 0, 0.0461880215351701, 0, 0.0107749604752236, -0.019047619047619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0495154221385096, 0, -0.0606437593189292, 0.0306297238936141},
    {0.0439885919382573, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0, 0.0359165349174119, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0505364660991077, -0.0408396318581521},
    {0.0439885919382571, 0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0.0433733365754904, -0.0335968420452646, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, -0.0227156111999978, 0.0175954367753029, -0.0101587301587302, 0.00327871606028142, -0.00253968253968253, 0.00146628639794192, -0.0124418526617558, 0.00718330698348241, 0.00761904761904763, 0, 0, 0, 0, 0, 0.0243115896447228, -0.0205470434274512, 0.0159156714016638, -0.00918891716808422, -0.031634242810373, 0.0245037791148913, -0.0141472634681456, 0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, -0.0173880176985767, 0.0100389766989472, -0.0141972569999987, -0.00722888942924838, 0.00559947367421077, -0.00323285763312583, 0.0617213399848368, -0.0356348322549899, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, -0.0266666666666667, 0.01539600717839, 0.00933138949631688, -0.00538748023761179, -0.019047619047619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, -0.0285877423007065, 0.0165051407128366, -0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382572, 0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0.0311046316543896, -0.017958267458706, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, -0.0335968420452646, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, 0, -0.0117302911835352, 0.0101587301587302, -0.0229510124219699, 0.00761904761904762, -0.0014662863979419, 0.0165891368823411, -0.00718330698348239, -0.00761904761904762, 0, 0.0241610520385245, -0.0357346778758831, 0.0355885231616696, -0.0228300482527235, -0.00270128773830253, -0.0114150241263618, 0.0159156714016638, -0.0112308987609918, 0.00395428035129663, 0.00306297238936141, -0.0035368158670364, -0.00375135972508442, 0.00072194951570154, 0.00204198159290761},
    {-0.0329914439536929, -0.0173880176985767, -0.0100389766989473, 0.0141972569999987, -0.00722888942924838, 0.0615942104163185, -0.0614242950293905, -0.00685792666498186, -0.00395942580611002, 0.00559947367421077, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.0049180740904221, -0.0266666666666667, 0.0175954367753029, 0.00933138949631686, 0.00538748023761182, -0.00761904761904761, 0, 0, 0.0357346778758831, -0.0593142052694494, 0.0456600965054471, 0, -0.0091320193010894, 0, 0.00408396318581524, 0.0013180934504322, 0.00714693557517662, -0.00471575448938186, -0.00250090648338961, -0.00144389903140308, 0.0020419815929076},
    {0.0439885919382573, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484215, 0, 0, 0.0293257279588381, 0.0101587301587301, 0, -0.0101587301587302, -0.0219942959691286, 0.00207364211029264, 0.017958267458706, -0.00761904761904762, 0, 0, 0, 0.0395428035129662, -0.0456600965054471, 0, 0, -0.017684079335182, 0.0142938711503532, 0, 0.00612594477872282, 0, -0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.0439885919382572, -0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0.0433733365754904, 0.0335968420452647, 0.0193971457987549, 0.0274317066599275, 0.01583770322444, 0.0111989473484215, -0.0268774736362117, -0.0227156111999979, -0.0175954367753029, -0.0101587301587302, 0.00327871606028141, 0.00253968253968254, 0.00146628639794191, 0.0124418526617558, 0.00718330698348239, 0.00761904761904762, 0, 0, 0, 0, 0, -0.0243115896447228, -0.0205470434274512, -0.0159156714016638, -0.00918891716808422, -0.031634242810373, -0.0245037791148913, -0.0141472634681456, -0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.032991443953693, 0.0173880176985767, 0.0100389766989472, -0.0141972569999986, -0.0072288894292484, -0.00559947367421079, -0.00323285763312582, -0.0617213399848368, -0.0356348322549899, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, 0.0266666666666667, 0.01539600717839, -0.00933138949631686, -0.00538748023761177, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, 0.0285877423007065, 0.0165051407128365, 0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382572, -0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, -0.0311046316543895, -0.017958267458706, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484215, -0.0268774736362117, 0, 0.0117302911835353, 0.0101587301587301, -0.0229510124219699, -0.00761904761904762, -0.0014662863979419, -0.0165891368823411, -0.0071833069834824, -0.00761904761904762, 0, -0.0241610520385245, -0.0357346778758831, -0.0355885231616696, -0.0228300482527235, 0.00270128773830253, -0.0114150241263618, -0.0159156714016638, -0.0112308987609918, 0.00395428035129663, -0.00306297238936141, -0.0035368158670364, 0.00375135972508443, 0.000721949515701543, 0.00204198159290761},
    {-0.0329914439536929, 0.0173880176985767, -0.0100389766989473, 0.0141972569999986, -0.00722888942924838, -0.0615942104163185, -0.0614242950293904, 0.00685792666498186, -0.00395942580611, 0.00559947367421079, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042211, 0.0266666666666667, 0.0175954367753029, -0.00933138949631687, 0.0053874802376118, -0.00761904761904762, 0, 0, 0.0357346778758831, 0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108941, 0, 0.00408396318581522, 0.0013180934504322, -0.00714693557517662, -0.00471575448938187, 0.00250090648338962, -0.00144389903140308, 0.00204198159290761},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484215, 0, 0, -0.0293257279588381, 0.0101587301587301, 0, 0.0101587301587302, -0.0219942959691286, -0.00207364211029263, 0.017958267458706, -0.00761904761904762, 0, 0, 0, -0.0395428035129662, -0.0456600965054471, 0, 0, 0.017684079335182, 0.0142938711503532, 0, -0.00612594477872281, 0, 0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.0439885919382572, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484215, 0.0134387368181059, -0.0113578055999989, -0.0205280095711867, -0.0152380952380952, -0.00983614818084423, -0.0177777777777778, -0.0131965775814772, -0.0145154947720485, -0.0107749604752236, -0.0076190476190476, -0.0547921158065365, -0.0241610520385245, -0.00510495398226901, 0.00395428035129662, 0.00456600965054471, -0.0216103019064202, -0.00456600965054471, 0.0035368158670364, 0.00408396318581521, -0.00395428035129662, 0.00306297238936141, 0.0035368158670364, 0.00250090648338962, 0.00288779806280615, 0.0020419815929076},
    {-0.0329914439536929, 0, 0.0200779533978945, 0.0141972569999987, -0.0867466731509807, 0, 0.00969857289937746, 0, 0.00791885161221999, 0.00559947367421079, 0, 0.0340734167999968, 0, -0.0152380952380953, 0.0295084445425327, 0, -0.0131965775814772, 0, -0.0107749604752236, -0.00761904761904764, 0.0821881737098047, 0, -0.010209907964538, 0, 0.0045660096505447, 0, -0.00913201930108942, 0, 0.0040839631858152, -0.00790856070259325, 0, 0.00353681586703639, 0, 0.00288779806280615, 0.00204198159290761},
    {0.0439885919382572, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754903, -0.0335968420452646, 0.0193971457987549, -0.0274317066599274, 0.01583770322444, 0.0111989473484215, -0.0134387368181059, -0.0113578055999989, 0.0205280095711867, -0.0152380952380952, -0.00983614818084423, 0.0177777777777778, -0.0131965775814772, 0.0145154947720485, -0.0107749604752236, -0.00761904761904761, -0.0547921158065365, 0.0241610520385245, -0.00510495398226901, -0.00395428035129662, 0.00456600965054471, 0.0216103019064202, -0.00456600965054471, -0.0035368158670364, 0.00408396318581521, -0.00395428035129662, -0.00306297238936141, 0.00353681586703641, -0.00250090648338962, 0.00288779806280615, 0.0020419815929076},
    {0.0439885919382569, 0.139104141588614, -0.0803118135915779, -0.0567890279999946, 0.0578311154339871, 0.0335968420452646, -0.0420271492306355, 0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, -0.0586514559176762, 0.0406349206349206, 0.0393445927233769, 0.00253968253968254, -0.0109971479845643, -0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, -0.053052238005546, 0.0367556686723369, -0.0105447476034577, -0.0245037791148913, 0.0235787724469093, 0.0175063453837273, 0, -0.0122518895574456},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0, 0.0783926314389509, 0.00969857289937743, -0.0274317066599274, 0.0475131096733199, -0.0167984210226323, 0, 0, 0.0586514559176763, -0.060952380952381, 0, 0.033015873015873, 0.0241937255660415, -0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, 0.053052238005546, -0.0551335030085054, 0, -0.0326717054865217, 0.0141472634681456, 0.00875317269186366, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0, -0.0111989473484216, 0.00969857289937743, 0.0822951199797824, 0.0475131096733199, -0.0167984210226323, 0, 0, 0, 0, 0, 0.0533333333333333, -0.0461880215351701, 0.0435464843161454, 0.0251415744421884, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.057175484601413, -0.0495154221385096, -0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382572, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, 0.0578311154339871, -0.0335968420452646, -0.0420271492306356, -0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, 0.0586514559176763, 0.0406349206349206, 0.0393445927233769, -0.00253968253968253, -0.0109971479845643, 0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, 0.053052238005546, 0.0367556686723369, -0.0105447476034577, 0.0245037791148913, 0.0235787724469093, -0.0175063453837273, 0, -0.0122518895574456},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0, -0.0783926314389508, 0.00969857289937744, 0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, -0.0586514559176763, -0.060952380952381, 0, -0.033015873015873, 0.0241937255660415, 0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, -0.053052238005546, -0.0551335030085054, 0, 0.0326717054865217, 0.0141472634681456, -0.00875317269186367, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382573, 0, 0, 0.170367083999984, 0, 0.0111989473484216, 0.00969857289937742, -0.0822951199797824, 0.0475131096733199, -0.0167984210226324, 0, 0, 0, 0, 0, -0.0533333333333333, -0.0461880215351701, -0.0435464843161454, 0.0251415744421884, -0.0825396825396825, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.057175484601413, -0.0495154221385096, 0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382572, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754904, 0.0447957893936862, 0.0484928644968872, -0.0548634133198549, 0, -0.0167984210226323, 0.0806324209086351, 0.0227156111999978, -0.00586514559176761, -0.0101587301587302, -0.00327871606028142, 0.0304761904761905, 0.0271262983619253, 0.045620126426438, 0.0430998419008943, 0.0393650793650793, 0, 0, 0, 0, 0, 0.0729347689341683, 0.0205470434274512, -0.0053052238005546, -0.00918891716808421, 0.031634242810373, -0.00816792637163041, -0.0141472634681456, -0.00875317269186367, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754904, -0.0447957893936862, 0.0484928644968872, 0.0548634133198549, 0, -0.0167984210226323, -0.0806324209086352, 0.0227156111999978, 0.0058651455917676, -0.0101587301587302, -0.00327871606028142, -0.0304761904761905, 0.0271262983619253, -0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, -0.0729347689341683, 0.0205470434274512, 0.00530522380055459, -0.00918891716808422, 0.031634242810373, 0.00816792637163041, -0.0141472634681456, 0.00875317269186366, -0.0151609398297323, -0.0122518895574456},
    {0.043988591938257, 0, 0, 0.170367083999984, 0.0144577788584968, 0, -0.00323285763312582, 0, -0.0950262193466398, -0.0167984210226323, 0, 0, 0, 0, -0.0688530372659096, 0, 0.01539600717839, 0, -0.0502831488843767, -0.0825396825396825, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0738132332242037, 0, 0.0165051407128365, 0, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382574, -0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754904, -0.0447957893936862, -0.00969857289937744, 0.0548634133198549, 0.0316754064488799, 0.0391963157194754, 0.0806324209086352, 0, 0.0527863103259087, 0.060952380952381, 0.0229510124219699, 0.0101587301587302, 0.0168622935763319, -0.0124418526617558, -0.00718330698348237, -0.013968253968254, 0, 0.0724831561155734, 0.0357346778758831, -0.0118628410538899, -0.0228300482527235, -0.00810386321490759, 0.0114150241263618, -0.0053052238005546, -0.0112308987609918, -0.00395428035129662, -0.0010209907964538, -0.0035368158670364, 0.00125045324169481, 0.000721949515701528, 0.0020419815929076},
    {0.0439885919382571, 0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754903, 0.0447957893936862, -0.00969857289937744, -0.0548634133198549, 0.0316754064488799, 0.0391963157194754, -0.0806324209086351, 0, -0.0527863103259086, 0.060952380952381, 0.0229510124219699, -0.0101587301587302, 0.0168622935763319, 0.0124418526617558, -0.00718330698348238, -0.013968253968254, 0, -0.0724831561155734, 0.0357346778758831, 0.0118628410538899, -0.0228300482527235, 0.00810386321490758, 0.0114150241263618, 0.0053052238005546, -0.0112308987609918, -0.00395428035129663, 0.0010209907964538, -0.0035368158670364, -0.00125045324169481, 0.000721949515701529, 0.0020419815929076},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0.0144577788584968, 0, -0.0614242950293904, 0, -0.0633508128977598, 0.0391963157194754, 0, -0.0681468335999936, 0, -0.0914285714285714, 0.00983614818084424, 0, 0.0285925847598672, 0, 0.0143666139669648, -0.013968253968254, 0, 0, -0.0714693557517662, 0, 0.0456600965054471, 0, 0.0182640386021788, 0, 0.0040839631858152, -0.00263618690086442, 0, -0.00471575448938187, 0, -0.00144389903140307, 0.0020419815929076},
    {0.351908735506058, 0, 0, 0, -0.115662230867974, 0, -0.129314305325032, 0, 0, -0.134387368181059, 0, -0.0908624447999914, 0, 0.0406349206349207, -0.0786891854467539, 0, -0.0879771838765144, 0, 0, 0.0711111111111111, 0, 0, 0, 0, 0, 0, -0.0821881737098047, 0, 0.0367556686723369, 0.0210894952069153, 0, 0.0235787724469093, 0, 0, -0.0122518895574456}};
    
    // Interesting (new) part
    // Tables of derivatives of the polynomial base (transpose)
    const static double dmats0[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {6.32455532033676, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 11.2249721603218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.58257569495584, 0, 8.36660026534075, -1.18321595661992, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.74165738677394, 0, 0, 8.69482604771366, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.49909083394702, 0, -3.34664010613631, -2.36643191323985, 15.4919333848297, 0, 0.692820323027556, 0, 0.565685424949245, 0.400000000000005, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 4.89897948556635, 0, 0, 0, 14.1985914794391, 0, -0.82807867121082, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.60000000000001, 0, 8.76356092008266, -1.54919333848297, 0, 0, 9.52470471983253, 0, -1.48131215963609, 0.261861468283193, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 4.24264068711929, 0, 0, 0, 0, 0, 14.3427433120127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.04792266088297e-14, 0, 0, 0, 0, -1.47304043962571e-14, 0, 0},
    {3.11769145362398, 0, 3.16227766016838, 4.91934955049954, 0, 0, 0, 0, 10.690449676497, -2.41897262725905, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.54558441227157, 0, 0, 7.66811580507232, 0, 0, 0, 0, 0, 10.3691851174526, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 11.6057691494799, 0, 0, 0, -4.20458932936041, 0, -3.43303281162798, 0, 0, 19.6214168703486, 0, 0.611677741841199, 0, 0, 0.529728463363978, 0, 0.432521479156786, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.53137212479104, 0, 3.54562104171167, -2.50713268211203, 4.7871355387817, 0, -5.56626745075492, 0, -1.04880884817015, 0.741619848709561, 0, 18.8034951158403, 0, 1.68183573174415, -0.603122387046456, 0, 0.701283781217662, 0, 0.132137494528679, -0.0934353184302344, 0, 0, 0, 0, -1.83555802032862e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 2.59512887494071, 0, 0, 0, 10.0285307284481, 0, -0.767649473578741, 0, 0, 0, 0, 16.4130361329658, 0, 0, -1.26347611061158, 0, 0.0967147429123328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.96647939483826, 0, 8.12403840463596, -1.64130361329658, 0, 0, 11.7728501222091, 0, -2.40312296813959, 0.48550415622761, 0, 0, 0, 10.2761860629321, 0, 0, -1.48323969741913, 0, 0.302765035409751, -0.0611677741841196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.05298244095218, 0, -1.58564993434418, 4.4848952846511, 4.28174419288838, 0, 0.191485421551268, 0, -3.75233260785874, -4.31161222746202, 0, 0, 0, 0, 18.8807171866294, 0, 0.84437134186504, 0, 1.18187368057056, 1.04463861754668, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 2.32115382989599, 0, 0, 0, 3.92428337406972, 0, 5.49285249860477, 0, 0, 0, 0, 0, 0, 0, 17.3044631365565, 0, -1.73008591662715, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.46547001870808e-14, 0, 0, 0, 0, 0, 0, 0},
    {2.65329983228432, 0, 4.15220619990514, 2.93605316083775, 0, 0, 2.63248931621764, 0, 9.82591326180786, -2.8226127713774, 0, 0, 0, 0, 0, 0, 11.6081867662439, 0, -3.09487177319465, 0.683876505540243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 2.01017818278148, 0, 0, 0, 0, 0, 8.91928088068603, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16.8558564884489, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.26487362250849e-14, 0, 0},
    {2.2978250586152, 0, 1.49829835452879, 5.50917601898534, 0, 0, 0, 0, 6.64803945320938, 4.13676892548485, 0, 0, 0, 0, 0, 0, 0, 0, 12.5636136423842, -3.55352656109507, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87616630392936, 0, 0, 6.22830929985769, 0, 0, 0, 0, 0, 11.0541524195338, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11.6057691494799, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    const static double dmats1[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.16227766016838, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.47722557505166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.95803989154981, 5.61248608016091, -1.08012344973464, -0.763762615825973, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.29128784747792, 7.24568837309472, 4.18330013267038, -0.591607978309961, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-2.64575131106459, 0, 9.66091783079296, 0.683130051063972, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87082869338697, 0, 0, 4.34741302385683, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.24037034920393, 0, 0, 7.52994023880668, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.74954541697351, 5.79655069847578, -1.67332005306815, -1.18321595661993, 7.74596669241484, -1.2, 0.346410161513782, -0.979795897113277, 0.282842712474625, 0.200000000000005, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.32379000772445, 2.44948974278317, 2.82842712474619, -1, 9.16515138991168, 7.09929573971954, -2.04939015319192, -0.414039335605409, -0.478091443733757, 0.1690308509457, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.8, -5.69209978830308, 4.38178046004133, -0.774596669241485, 0, 10.998181667894, 4.76235235991627, 0.962140470884731, -0.740656079818044, 0.130930734141594, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.19615242270664, 0, -3.16227766016838, -2.23606797749979, 0, 1.15073592506104e-14, 13.7477270848675, 0, 0.534522483824844, 0.377964473009229, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.01246117974981, 2.12132034355964, -0.408248290463862, 3.17542648054294, 0, 0, 0, 7.17137165600636, -1.38013111868471, -1.56144011671765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.55884572681199, 2.73861278752583, 1.58113883008419, 2.45967477524977, 0, 0, 0, 9.25820099772551, 5.34522483824849, -1.20948631362952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-1.80000000000001, 0, 3.65148371670111, -2.84018778721877, 0, 0, 0, 0, 12.3442679969674, 1.39659449751035, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.27279220613578, 0, 0, 3.83405790253616, 0, 0, 0, 0, 0, 5.18459255872628, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.20454076850486, 0, 0, 6.64078308635359, 0, 0, 0, 0, 0, 8.97997772825745, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.56904651573304, 5.80288457473998, -2.01017818278147, -1.42141062443803, 8.14215222512716, -2.1022946646802, 0.728256234341424, -1.71651640581399, 0.594618725379073, 0.420458932936044, 9.81070843517429, -1.18450885369836, 0.305838870920599, -0.105945692672796, -1.02581475831036, 0.264864231681989, -0.0917516612761798, 0.216260739578392, -0.0749149177264397, -0.0529728463363978, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.26568606239552, 3.07059789431495, 1.77281052085584, -1.25356634105602, 2.39356776939085, 6.30376871403132, -2.78313372537745, -0.908295106229245, -0.524404424085072, 0.370809924354781, 11.1242977306435, 9.40174755792013, -2.42752078113806, 0.840917865872078, -0.301561193523229, -0.794200206656967, 0.350641890608832, 0.114434427054264, 0.066068747264339, -0.0467176592151171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.91485421551267, 1.29756443747035, 3.74574588632197, -1.05945692672795, -8.09173593712687, 5.01426536422407, 1.80936716113936, -0.383824736789365, -1.1080065755349, 0.313391585264001, 0, 12.7134831207354, 8.2065180664829, -2.84282124887606, 1.01946290306866, -0.631738055305791, -0.227958835180079, 0.048357371456166, 0.1395957071376, -0.0394836284566123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741913, 7.03562363973515, 4.06201920231798, -0.82065180664829, 0, -6.79705818718657, 5.88642506110457, -2.08116553882675, -1.2015614840698, 0.242752078113806, 0, 0, 14.8323969741913, 5.13809303146605, 0, 0.856348838577676, -0.741619848709566, 0.262202212042541, 0.151382517704876, -0.0305838870920601, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-3.42539535431072, 0, 9.38083151964686, 1.89521416591738, 0, 0, -3.39852909359331, 0, -2.77488738510233, -0.560611910581399, 0, 0, 0, 17.7988763690296, 0, 0, 0.428174419288838, 0, 0.349602949390051, 0.0706304617818607, 0, 0, 0, 0, -1.20672813501736e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.02649122047609, 2.74642624930239, -0.792824967172091, 2.24244764232555, 2.14087209644419, -0.331662479035539, 0.0957427107756368, 6.49923072370876, -1.87616630392937, -2.15580611373101, 0, 0, 0, 0, 9.44035859331468, -1.46249406456536, 0.422185670932519, -2.04706526287664, 0.590936840285281, 0.522319308773342, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.71269767715535, 1.16057691494799, 1.34011878852098, 1.89521416591737, 2.53311402559511, 1.96214168703486, -0.566421515598879, 2.74642624930239, 3.17129986868837, -1.82198870938951, 0, 0, 0, 0, 11.1699829238239, 8.65223156827827, -2.49768411251822, -0.865042958313572, -0.998865569685857, 0.441440386136647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.32664991614216, -2.69693703815182, 2.07610309995257, 1.46802658041887, 0, 3.03973683071413, 1.31624465810882, -6.382117875081, 4.91295663090393, -1.4113063856887, 0, 0, 0, 0, 0, 13.4039795085887, 5.80409338312195, 2.01017818278147, -1.54743588659733, 0.341938252770123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.82970843102536, 0, -1.49829835452878, 4.23782770691181, 0, 0, 3.79967103839266, 0, -3.54562104171167, -4.07409060843206, 0, 0, 0, 0, 0, 0, 16.7549743857359, 0, 1.11676565710082, 0.987090711415302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741913, 1.00508909139074, -0.193429485824667, 3.55615782880926, 0, 0, 0, 4.45964044034301, -0.858258202906998, 2.67027285925187, 0, 0, 0, 0, 0, 0, 0, 8.42792824422443, -1.62195554683794, -2.29379153190448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.1489125293076, 1.29756443747036, 0.749149177264395, 2.75458800949267, 0, 0, 0, 5.75737105184053, 3.32401972660469, 2.06838446274243, 0, 0, 0, 0, 0, 0, 0, 10.8804085776374, 6.2818068211921, -1.77676328054753, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-1.32664991614217, 0, 1.73008591662714, -3.18072425757423, 0, 0, 0, 0, 7.67649473578739, -2.38836465270397, 0, 0, 0, 0, 0, 0, 0, 0, 14.5072114368499, 2.05162951662072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.938083151964681, 0, 0, 3.11415464992885, 0, 0, 0, 0, 0, 5.52707620976691, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.80288457473997, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.62480768092718, 0, 0, 5.39387407630363, 0, 0, 0, 0, 0, 9.57317681262151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10.0508909139073, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    const static double dmats2[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.16227766016838, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.82574185835055, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.16397779494322, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.95803989154981, 5.61248608016091, -1.08012344973464, -0.763762615825973, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.29128784747792, 1.44913767461894, 4.18330013267038, -0.591607978309961, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.32287565553229, 0, 3.86436713231718, -0.341565025531986, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87082869338697, 7.09929573971954, 0, 4.34741302385683, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.08012344973464, 0, 7.09929573971954, 2.50998007960223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-3.81881307912986, 0, 0, 8.87411967464942, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.74954541697351, 5.79655069847578, -1.67332005306815, -1.18321595661993, 7.74596669241484, -1.2, 0.346410161513782, -0.979795897113276, 0.282842712474624, 0.200000000000004, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.32379000772444, 2.44948974278317, 2.82842712474619, -0.999999999999999, 1.30930734141596, 7.09929573971954, -2.04939015319192, -0.414039335605411, -0.478091443733757, 0.169030850945702, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.8, 0.632455532033675, 4.38178046004133, -0.774596669241484, 0, 3.14233761939829, 4.76235235991627, -0.106904496764967, -0.740656079818044, 0.130930734141596, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.03923048454133, 0, 3.16227766016838, -0.447213595499958, 0, 0, 5.89188303637179, 0, -0.53452248382485, 0.0755928946018457, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.01246117974982, 2.12132034355965, -0.408248290463861, 3.17542648054294, 9.07114735222145, 0, 0, 7.17137165600636, -1.38013111868471, -1.56144011671765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.55884572681199, 0.547722557505168, 1.58113883008419, 2.45967477524977, 0, 9.07114735222145, 0, 1.8516401995451, 5.34522483824849, -1.20948631362952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.900000000000005, 0, 1.46059348668044, 1.42009389360938, 0, 0, 9.07114735222146, 0, 4.93770719878694, -0.698297248755171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.27279220613578, -6.26099033699941, 0, 3.83405790253616, 0, 0, 0, 10.5830052442584, 0, 5.18459255872629, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.73484692283495, 0, -6.26099033699941, 2.21359436211787, 0, 0, 0, 0, 10.5830052442584, 2.99332590941916, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.71576766497728, 0, 0, -4.69574275274956, 0, 0, 0, 0, 0, 12.69960629311, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.14660884953377e-14},
    {2.56904651573304, 5.80288457473998, -2.01017818278147, -1.42141062443803, 8.14215222512715, -2.1022946646802, 0.728256234341423, -1.71651640581399, 0.594618725379073, 0.420458932936043, 9.81070843517429, -1.18450885369836, 0.305838870920599, -0.105945692672796, -1.02581475831036, 0.264864231681989, -0.0917516612761797, 0.216260739578392, -0.0749149177264397, -0.0529728463363978, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.26568606239552, 3.07059789431495, 1.77281052085584, -1.25356634105602, 2.39356776939085, 6.30376871403132, -2.78313372537745, -0.908295106229244, -0.524404424085071, 0.370809924354782, 1.23603308118261, 9.40174755792013, -2.42752078113806, 0.840917865872078, -0.301561193523228, -0.794200206656968, 0.350641890608831, 0.114434427054264, 0.0660687472643394, -0.0467176592151163, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.91485421551268, 1.29756443747035, 3.74574588632197, -1.05945692672795, 0.404586796856348, 5.01426536422407, 1.80936716113936, -0.383824736789368, -1.1080065755349, 0.313391585264003, 0, 2.82521847127454, 8.2065180664829, -2.84282124887606, -0.050973145153435, -0.631738055305789, -0.227958835180081, 0.0483573714561672, 0.139595707137601, -0.0394836284566111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741913, 0.335029697130247, 4.06201920231798, -0.820651806648289, 0, 1.69926454679665, 5.88642506110457, -0.0991031208965148, -1.2015614840698, 0.242752078113804, 0, 0, 4.94413232473044, 5.13809303146605, 0, -0.21408720964442, -0.741619848709566, 0.0124858196210736, 0.151382517704876, -0.0305838870920597, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.856348838577674, 0, 2.68023757704196, -0.473803541479343, 0, 0, 5.09779364038993, 0, -0.792824967172097, 0.140152977645346, 0, 0, 0, 7.91061171956871, 0, 0, -0.642261628933256, 0, 0.0998865569685867, -0.0176576154454656, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.02649122047609, 2.74642624930238, -0.792824967172091, 2.24244764232555, 2.14087209644419, -0.33166247903554, 0.0957427107756354, 6.49923072370876, -1.87616630392937, -2.15580611373101, 11.0554159678513, 0, 0, 0, 9.44035859331468, -1.46249406456536, 0.422185670932521, -2.04706526287664, 0.59093684028528, 0.522319308773342, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.71269767715535, 1.16057691494799, 1.34011878852098, 1.89521416591737, 0.361873432227875, 1.96214168703486, -0.566421515598883, 2.74642624930239, 3.17129986868837, -1.82198870938951, 0, 11.0554159678513, 0, 0, 1.59571184626056, 8.65223156827827, -2.49768411251822, -0.865042958313574, -0.998865569685858, 0.441440386136646, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.32664991614216, 0.299659670905758, 2.07610309995257, 1.46802658041887, 0, 0.868496237346892, 1.31624465810882, 0.709124208342336, 4.91295663090393, -1.4113063856887, 0, 0, 11.0554159678513, 0, 0, 3.82970843102535, 5.80409338312195, -0.223353131420164, -1.54743588659732, 0.341938252770122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.765941686205066, 0, 1.49829835452879, 0.847565541382365, 0, 0, 1.62843044502542, 0, 3.54562104171167, -0.814818121686414, 0, 0, 0, 11.0554159678513, 0, 0, 7.18070330817254, 0, -1.11676565710082, 0.197418142283061, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741913, 1.00508909139074, -0.193429485824666, 3.55615782880926, -8.46157280212812, 0, 0, 4.45964044034302, -0.858258202906997, 2.67027285925187, 0, 0, 0, 0, 12.4373429638328, 0, 0, 8.42792824422443, -1.62195554683794, -2.29379153190448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.1489125293076, 0.259512887494072, 0.749149177264393, 2.75458800949267, 0, -8.46157280212812, 0, 1.15147421036811, 3.32401972660469, 2.06838446274243, 0, 0, 0, 0, 0, 12.4373429638327, 0, 2.17608171552749, 6.2818068211921, -1.77676328054754, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.663324958071069, 0, 0.692034366650856, 1.59036212878711, 0, 0, -8.46157280212813, 0, 3.07059789431496, 1.19418232635197, 0, 0, 0, 0, 0, 0, 12.4373429638327, 0, 5.80288457473997, -1.02581475831036, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.938083151964677, 7.62808987244126, 0, 3.11415464992885, 0, 0, 0, -7.5213980463361, 0, 5.52707620976691, 0, 0, 0, 0, 0, 0, 0, 14.2141062443803, 0, 5.80288457473997, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.541602560309057, 0, 7.62808987244125, 1.79795802543454, 0, 0, 0, 0, -7.52139804633611, 3.19105893754049, 0, 0, 0, 0, 0, 0, 0, 0, 14.2141062443803, 3.35029697130245, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-5.36159180343549, 0, 0, 8.8994381845148, 0, 0, 0, 0, 0, -5.26497863243526, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16.583123951777, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    // Compute reference derivatives
    // Declare pointer to array of derivatives on FIAT element
    double *derivatives = new double [num_derivatives];
    
    // Declare coefficients
    double coeff0_0 = 0;
    double coeff0_1 = 0;
    double coeff0_2 = 0;
    double coeff0_3 = 0;
    double coeff0_4 = 0;
    double coeff0_5 = 0;
    double coeff0_6 = 0;
    double coeff0_7 = 0;
    double coeff0_8 = 0;
    double coeff0_9 = 0;
    double coeff0_10 = 0;
    double coeff0_11 = 0;
    double coeff0_12 = 0;
    double coeff0_13 = 0;
    double coeff0_14 = 0;
    double coeff0_15 = 0;
    double coeff0_16 = 0;
    double coeff0_17 = 0;
    double coeff0_18 = 0;
    double coeff0_19 = 0;
    double coeff0_20 = 0;
    double coeff0_21 = 0;
    double coeff0_22 = 0;
    double coeff0_23 = 0;
    double coeff0_24 = 0;
    double coeff0_25 = 0;
    double coeff0_26 = 0;
    double coeff0_27 = 0;
    double coeff0_28 = 0;
    double coeff0_29 = 0;
    double coeff0_30 = 0;
    double coeff0_31 = 0;
    double coeff0_32 = 0;
    double coeff0_33 = 0;
    double coeff0_34 = 0;
    
    // Declare new coefficients
    double new_coeff0_0 = 0;
    double new_coeff0_1 = 0;
    double new_coeff0_2 = 0;
    double new_coeff0_3 = 0;
    double new_coeff0_4 = 0;
    double new_coeff0_5 = 0;
    double new_coeff0_6 = 0;
    double new_coeff0_7 = 0;
    double new_coeff0_8 = 0;
    double new_coeff0_9 = 0;
    double new_coeff0_10 = 0;
    double new_coeff0_11 = 0;
    double new_coeff0_12 = 0;
    double new_coeff0_13 = 0;
    double new_coeff0_14 = 0;
    double new_coeff0_15 = 0;
    double new_coeff0_16 = 0;
    double new_coeff0_17 = 0;
    double new_coeff0_18 = 0;
    double new_coeff0_19 = 0;
    double new_coeff0_20 = 0;
    double new_coeff0_21 = 0;
    double new_coeff0_22 = 0;
    double new_coeff0_23 = 0;
    double new_coeff0_24 = 0;
    double new_coeff0_25 = 0;
    double new_coeff0_26 = 0;
    double new_coeff0_27 = 0;
    double new_coeff0_28 = 0;
    double new_coeff0_29 = 0;
    double new_coeff0_30 = 0;
    double new_coeff0_31 = 0;
    double new_coeff0_32 = 0;
    double new_coeff0_33 = 0;
    double new_coeff0_34 = 0;
    
    // Loop possible derivatives
    for (unsigned int deriv_num = 0; deriv_num < num_derivatives; deriv_num++)
    {
      // Get values from coefficients array
      new_coeff0_0 = coefficients0[dof][0];
      new_coeff0_1 = coefficients0[dof][1];
      new_coeff0_2 = coefficients0[dof][2];
      new_coeff0_3 = coefficients0[dof][3];
      new_coeff0_4 = coefficients0[dof][4];
      new_coeff0_5 = coefficients0[dof][5];
      new_coeff0_6 = coefficients0[dof][6];
      new_coeff0_7 = coefficients0[dof][7];
      new_coeff0_8 = coefficients0[dof][8];
      new_coeff0_9 = coefficients0[dof][9];
      new_coeff0_10 = coefficients0[dof][10];
      new_coeff0_11 = coefficients0[dof][11];
      new_coeff0_12 = coefficients0[dof][12];
      new_coeff0_13 = coefficients0[dof][13];
      new_coeff0_14 = coefficients0[dof][14];
      new_coeff0_15 = coefficients0[dof][15];
      new_coeff0_16 = coefficients0[dof][16];
      new_coeff0_17 = coefficients0[dof][17];
      new_coeff0_18 = coefficients0[dof][18];
      new_coeff0_19 = coefficients0[dof][19];
      new_coeff0_20 = coefficients0[dof][20];
      new_coeff0_21 = coefficients0[dof][21];
      new_coeff0_22 = coefficients0[dof][22];
      new_coeff0_23 = coefficients0[dof][23];
      new_coeff0_24 = coefficients0[dof][24];
      new_coeff0_25 = coefficients0[dof][25];
      new_coeff0_26 = coefficients0[dof][26];
      new_coeff0_27 = coefficients0[dof][27];
      new_coeff0_28 = coefficients0[dof][28];
      new_coeff0_29 = coefficients0[dof][29];
      new_coeff0_30 = coefficients0[dof][30];
      new_coeff0_31 = coefficients0[dof][31];
      new_coeff0_32 = coefficients0[dof][32];
      new_coeff0_33 = coefficients0[dof][33];
      new_coeff0_34 = coefficients0[dof][34];
    
      // Loop derivative order
      for (unsigned int j = 0; j < n; j++)
      {
        // Update old coefficients
        coeff0_0 = new_coeff0_0;
        coeff0_1 = new_coeff0_1;
        coeff0_2 = new_coeff0_2;
        coeff0_3 = new_coeff0_3;
        coeff0_4 = new_coeff0_4;
        coeff0_5 = new_coeff0_5;
        coeff0_6 = new_coeff0_6;
        coeff0_7 = new_coeff0_7;
        coeff0_8 = new_coeff0_8;
        coeff0_9 = new_coeff0_9;
        coeff0_10 = new_coeff0_10;
        coeff0_11 = new_coeff0_11;
        coeff0_12 = new_coeff0_12;
        coeff0_13 = new_coeff0_13;
        coeff0_14 = new_coeff0_14;
        coeff0_15 = new_coeff0_15;
        coeff0_16 = new_coeff0_16;
        coeff0_17 = new_coeff0_17;
        coeff0_18 = new_coeff0_18;
        coeff0_19 = new_coeff0_19;
        coeff0_20 = new_coeff0_20;
        coeff0_21 = new_coeff0_21;
        coeff0_22 = new_coeff0_22;
        coeff0_23 = new_coeff0_23;
        coeff0_24 = new_coeff0_24;
        coeff0_25 = new_coeff0_25;
        coeff0_26 = new_coeff0_26;
        coeff0_27 = new_coeff0_27;
        coeff0_28 = new_coeff0_28;
        coeff0_29 = new_coeff0_29;
        coeff0_30 = new_coeff0_30;
        coeff0_31 = new_coeff0_31;
        coeff0_32 = new_coeff0_32;
        coeff0_33 = new_coeff0_33;
        coeff0_34 = new_coeff0_34;
    
        if(combinations[deriv_num][j] == 0)
        {
          new_coeff0_0 = coeff0_0*dmats0[0][0] + coeff0_1*dmats0[1][0] + coeff0_2*dmats0[2][0] + coeff0_3*dmats0[3][0] + coeff0_4*dmats0[4][0] + coeff0_5*dmats0[5][0] + coeff0_6*dmats0[6][0] + coeff0_7*dmats0[7][0] + coeff0_8*dmats0[8][0] + coeff0_9*dmats0[9][0] + coeff0_10*dmats0[10][0] + coeff0_11*dmats0[11][0] + coeff0_12*dmats0[12][0] + coeff0_13*dmats0[13][0] + coeff0_14*dmats0[14][0] + coeff0_15*dmats0[15][0] + coeff0_16*dmats0[16][0] + coeff0_17*dmats0[17][0] + coeff0_18*dmats0[18][0] + coeff0_19*dmats0[19][0] + coeff0_20*dmats0[20][0] + coeff0_21*dmats0[21][0] + coeff0_22*dmats0[22][0] + coeff0_23*dmats0[23][0] + coeff0_24*dmats0[24][0] + coeff0_25*dmats0[25][0] + coeff0_26*dmats0[26][0] + coeff0_27*dmats0[27][0] + coeff0_28*dmats0[28][0] + coeff0_29*dmats0[29][0] + coeff0_30*dmats0[30][0] + coeff0_31*dmats0[31][0] + coeff0_32*dmats0[32][0] + coeff0_33*dmats0[33][0] + coeff0_34*dmats0[34][0];
          new_coeff0_1 = coeff0_0*dmats0[0][1] + coeff0_1*dmats0[1][1] + coeff0_2*dmats0[2][1] + coeff0_3*dmats0[3][1] + coeff0_4*dmats0[4][1] + coeff0_5*dmats0[5][1] + coeff0_6*dmats0[6][1] + coeff0_7*dmats0[7][1] + coeff0_8*dmats0[8][1] + coeff0_9*dmats0[9][1] + coeff0_10*dmats0[10][1] + coeff0_11*dmats0[11][1] + coeff0_12*dmats0[12][1] + coeff0_13*dmats0[13][1] + coeff0_14*dmats0[14][1] + coeff0_15*dmats0[15][1] + coeff0_16*dmats0[16][1] + coeff0_17*dmats0[17][1] + coeff0_18*dmats0[18][1] + coeff0_19*dmats0[19][1] + coeff0_20*dmats0[20][1] + coeff0_21*dmats0[21][1] + coeff0_22*dmats0[22][1] + coeff0_23*dmats0[23][1] + coeff0_24*dmats0[24][1] + coeff0_25*dmats0[25][1] + coeff0_26*dmats0[26][1] + coeff0_27*dmats0[27][1] + coeff0_28*dmats0[28][1] + coeff0_29*dmats0[29][1] + coeff0_30*dmats0[30][1] + coeff0_31*dmats0[31][1] + coeff0_32*dmats0[32][1] + coeff0_33*dmats0[33][1] + coeff0_34*dmats0[34][1];
          new_coeff0_2 = coeff0_0*dmats0[0][2] + coeff0_1*dmats0[1][2] + coeff0_2*dmats0[2][2] + coeff0_3*dmats0[3][2] + coeff0_4*dmats0[4][2] + coeff0_5*dmats0[5][2] + coeff0_6*dmats0[6][2] + coeff0_7*dmats0[7][2] + coeff0_8*dmats0[8][2] + coeff0_9*dmats0[9][2] + coeff0_10*dmats0[10][2] + coeff0_11*dmats0[11][2] + coeff0_12*dmats0[12][2] + coeff0_13*dmats0[13][2] + coeff0_14*dmats0[14][2] + coeff0_15*dmats0[15][2] + coeff0_16*dmats0[16][2] + coeff0_17*dmats0[17][2] + coeff0_18*dmats0[18][2] + coeff0_19*dmats0[19][2] + coeff0_20*dmats0[20][2] + coeff0_21*dmats0[21][2] + coeff0_22*dmats0[22][2] + coeff0_23*dmats0[23][2] + coeff0_24*dmats0[24][2] + coeff0_25*dmats0[25][2] + coeff0_26*dmats0[26][2] + coeff0_27*dmats0[27][2] + coeff0_28*dmats0[28][2] + coeff0_29*dmats0[29][2] + coeff0_30*dmats0[30][2] + coeff0_31*dmats0[31][2] + coeff0_32*dmats0[32][2] + coeff0_33*dmats0[33][2] + coeff0_34*dmats0[34][2];
          new_coeff0_3 = coeff0_0*dmats0[0][3] + coeff0_1*dmats0[1][3] + coeff0_2*dmats0[2][3] + coeff0_3*dmats0[3][3] + coeff0_4*dmats0[4][3] + coeff0_5*dmats0[5][3] + coeff0_6*dmats0[6][3] + coeff0_7*dmats0[7][3] + coeff0_8*dmats0[8][3] + coeff0_9*dmats0[9][3] + coeff0_10*dmats0[10][3] + coeff0_11*dmats0[11][3] + coeff0_12*dmats0[12][3] + coeff0_13*dmats0[13][3] + coeff0_14*dmats0[14][3] + coeff0_15*dmats0[15][3] + coeff0_16*dmats0[16][3] + coeff0_17*dmats0[17][3] + coeff0_18*dmats0[18][3] + coeff0_19*dmats0[19][3] + coeff0_20*dmats0[20][3] + coeff0_21*dmats0[21][3] + coeff0_22*dmats0[22][3] + coeff0_23*dmats0[23][3] + coeff0_24*dmats0[24][3] + coeff0_25*dmats0[25][3] + coeff0_26*dmats0[26][3] + coeff0_27*dmats0[27][3] + coeff0_28*dmats0[28][3] + coeff0_29*dmats0[29][3] + coeff0_30*dmats0[30][3] + coeff0_31*dmats0[31][3] + coeff0_32*dmats0[32][3] + coeff0_33*dmats0[33][3] + coeff0_34*dmats0[34][3];
          new_coeff0_4 = coeff0_0*dmats0[0][4] + coeff0_1*dmats0[1][4] + coeff0_2*dmats0[2][4] + coeff0_3*dmats0[3][4] + coeff0_4*dmats0[4][4] + coeff0_5*dmats0[5][4] + coeff0_6*dmats0[6][4] + coeff0_7*dmats0[7][4] + coeff0_8*dmats0[8][4] + coeff0_9*dmats0[9][4] + coeff0_10*dmats0[10][4] + coeff0_11*dmats0[11][4] + coeff0_12*dmats0[12][4] + coeff0_13*dmats0[13][4] + coeff0_14*dmats0[14][4] + coeff0_15*dmats0[15][4] + coeff0_16*dmats0[16][4] + coeff0_17*dmats0[17][4] + coeff0_18*dmats0[18][4] + coeff0_19*dmats0[19][4] + coeff0_20*dmats0[20][4] + coeff0_21*dmats0[21][4] + coeff0_22*dmats0[22][4] + coeff0_23*dmats0[23][4] + coeff0_24*dmats0[24][4] + coeff0_25*dmats0[25][4] + coeff0_26*dmats0[26][4] + coeff0_27*dmats0[27][4] + coeff0_28*dmats0[28][4] + coeff0_29*dmats0[29][4] + coeff0_30*dmats0[30][4] + coeff0_31*dmats0[31][4] + coeff0_32*dmats0[32][4] + coeff0_33*dmats0[33][4] + coeff0_34*dmats0[34][4];
          new_coeff0_5 = coeff0_0*dmats0[0][5] + coeff0_1*dmats0[1][5] + coeff0_2*dmats0[2][5] + coeff0_3*dmats0[3][5] + coeff0_4*dmats0[4][5] + coeff0_5*dmats0[5][5] + coeff0_6*dmats0[6][5] + coeff0_7*dmats0[7][5] + coeff0_8*dmats0[8][5] + coeff0_9*dmats0[9][5] + coeff0_10*dmats0[10][5] + coeff0_11*dmats0[11][5] + coeff0_12*dmats0[12][5] + coeff0_13*dmats0[13][5] + coeff0_14*dmats0[14][5] + coeff0_15*dmats0[15][5] + coeff0_16*dmats0[16][5] + coeff0_17*dmats0[17][5] + coeff0_18*dmats0[18][5] + coeff0_19*dmats0[19][5] + coeff0_20*dmats0[20][5] + coeff0_21*dmats0[21][5] + coeff0_22*dmats0[22][5] + coeff0_23*dmats0[23][5] + coeff0_24*dmats0[24][5] + coeff0_25*dmats0[25][5] + coeff0_26*dmats0[26][5] + coeff0_27*dmats0[27][5] + coeff0_28*dmats0[28][5] + coeff0_29*dmats0[29][5] + coeff0_30*dmats0[30][5] + coeff0_31*dmats0[31][5] + coeff0_32*dmats0[32][5] + coeff0_33*dmats0[33][5] + coeff0_34*dmats0[34][5];
          new_coeff0_6 = coeff0_0*dmats0[0][6] + coeff0_1*dmats0[1][6] + coeff0_2*dmats0[2][6] + coeff0_3*dmats0[3][6] + coeff0_4*dmats0[4][6] + coeff0_5*dmats0[5][6] + coeff0_6*dmats0[6][6] + coeff0_7*dmats0[7][6] + coeff0_8*dmats0[8][6] + coeff0_9*dmats0[9][6] + coeff0_10*dmats0[10][6] + coeff0_11*dmats0[11][6] + coeff0_12*dmats0[12][6] + coeff0_13*dmats0[13][6] + coeff0_14*dmats0[14][6] + coeff0_15*dmats0[15][6] + coeff0_16*dmats0[16][6] + coeff0_17*dmats0[17][6] + coeff0_18*dmats0[18][6] + coeff0_19*dmats0[19][6] + coeff0_20*dmats0[20][6] + coeff0_21*dmats0[21][6] + coeff0_22*dmats0[22][6] + coeff0_23*dmats0[23][6] + coeff0_24*dmats0[24][6] + coeff0_25*dmats0[25][6] + coeff0_26*dmats0[26][6] + coeff0_27*dmats0[27][6] + coeff0_28*dmats0[28][6] + coeff0_29*dmats0[29][6] + coeff0_30*dmats0[30][6] + coeff0_31*dmats0[31][6] + coeff0_32*dmats0[32][6] + coeff0_33*dmats0[33][6] + coeff0_34*dmats0[34][6];
          new_coeff0_7 = coeff0_0*dmats0[0][7] + coeff0_1*dmats0[1][7] + coeff0_2*dmats0[2][7] + coeff0_3*dmats0[3][7] + coeff0_4*dmats0[4][7] + coeff0_5*dmats0[5][7] + coeff0_6*dmats0[6][7] + coeff0_7*dmats0[7][7] + coeff0_8*dmats0[8][7] + coeff0_9*dmats0[9][7] + coeff0_10*dmats0[10][7] + coeff0_11*dmats0[11][7] + coeff0_12*dmats0[12][7] + coeff0_13*dmats0[13][7] + coeff0_14*dmats0[14][7] + coeff0_15*dmats0[15][7] + coeff0_16*dmats0[16][7] + coeff0_17*dmats0[17][7] + coeff0_18*dmats0[18][7] + coeff0_19*dmats0[19][7] + coeff0_20*dmats0[20][7] + coeff0_21*dmats0[21][7] + coeff0_22*dmats0[22][7] + coeff0_23*dmats0[23][7] + coeff0_24*dmats0[24][7] + coeff0_25*dmats0[25][7] + coeff0_26*dmats0[26][7] + coeff0_27*dmats0[27][7] + coeff0_28*dmats0[28][7] + coeff0_29*dmats0[29][7] + coeff0_30*dmats0[30][7] + coeff0_31*dmats0[31][7] + coeff0_32*dmats0[32][7] + coeff0_33*dmats0[33][7] + coeff0_34*dmats0[34][7];
          new_coeff0_8 = coeff0_0*dmats0[0][8] + coeff0_1*dmats0[1][8] + coeff0_2*dmats0[2][8] + coeff0_3*dmats0[3][8] + coeff0_4*dmats0[4][8] + coeff0_5*dmats0[5][8] + coeff0_6*dmats0[6][8] + coeff0_7*dmats0[7][8] + coeff0_8*dmats0[8][8] + coeff0_9*dmats0[9][8] + coeff0_10*dmats0[10][8] + coeff0_11*dmats0[11][8] + coeff0_12*dmats0[12][8] + coeff0_13*dmats0[13][8] + coeff0_14*dmats0[14][8] + coeff0_15*dmats0[15][8] + coeff0_16*dmats0[16][8] + coeff0_17*dmats0[17][8] + coeff0_18*dmats0[18][8] + coeff0_19*dmats0[19][8] + coeff0_20*dmats0[20][8] + coeff0_21*dmats0[21][8] + coeff0_22*dmats0[22][8] + coeff0_23*dmats0[23][8] + coeff0_24*dmats0[24][8] + coeff0_25*dmats0[25][8] + coeff0_26*dmats0[26][8] + coeff0_27*dmats0[27][8] + coeff0_28*dmats0[28][8] + coeff0_29*dmats0[29][8] + coeff0_30*dmats0[30][8] + coeff0_31*dmats0[31][8] + coeff0_32*dmats0[32][8] + coeff0_33*dmats0[33][8] + coeff0_34*dmats0[34][8];
          new_coeff0_9 = coeff0_0*dmats0[0][9] + coeff0_1*dmats0[1][9] + coeff0_2*dmats0[2][9] + coeff0_3*dmats0[3][9] + coeff0_4*dmats0[4][9] + coeff0_5*dmats0[5][9] + coeff0_6*dmats0[6][9] + coeff0_7*dmats0[7][9] + coeff0_8*dmats0[8][9] + coeff0_9*dmats0[9][9] + coeff0_10*dmats0[10][9] + coeff0_11*dmats0[11][9] + coeff0_12*dmats0[12][9] + coeff0_13*dmats0[13][9] + coeff0_14*dmats0[14][9] + coeff0_15*dmats0[15][9] + coeff0_16*dmats0[16][9] + coeff0_17*dmats0[17][9] + coeff0_18*dmats0[18][9] + coeff0_19*dmats0[19][9] + coeff0_20*dmats0[20][9] + coeff0_21*dmats0[21][9] + coeff0_22*dmats0[22][9] + coeff0_23*dmats0[23][9] + coeff0_24*dmats0[24][9] + coeff0_25*dmats0[25][9] + coeff0_26*dmats0[26][9] + coeff0_27*dmats0[27][9] + coeff0_28*dmats0[28][9] + coeff0_29*dmats0[29][9] + coeff0_30*dmats0[30][9] + coeff0_31*dmats0[31][9] + coeff0_32*dmats0[32][9] + coeff0_33*dmats0[33][9] + coeff0_34*dmats0[34][9];
          new_coeff0_10 = coeff0_0*dmats0[0][10] + coeff0_1*dmats0[1][10] + coeff0_2*dmats0[2][10] + coeff0_3*dmats0[3][10] + coeff0_4*dmats0[4][10] + coeff0_5*dmats0[5][10] + coeff0_6*dmats0[6][10] + coeff0_7*dmats0[7][10] + coeff0_8*dmats0[8][10] + coeff0_9*dmats0[9][10] + coeff0_10*dmats0[10][10] + coeff0_11*dmats0[11][10] + coeff0_12*dmats0[12][10] + coeff0_13*dmats0[13][10] + coeff0_14*dmats0[14][10] + coeff0_15*dmats0[15][10] + coeff0_16*dmats0[16][10] + coeff0_17*dmats0[17][10] + coeff0_18*dmats0[18][10] + coeff0_19*dmats0[19][10] + coeff0_20*dmats0[20][10] + coeff0_21*dmats0[21][10] + coeff0_22*dmats0[22][10] + coeff0_23*dmats0[23][10] + coeff0_24*dmats0[24][10] + coeff0_25*dmats0[25][10] + coeff0_26*dmats0[26][10] + coeff0_27*dmats0[27][10] + coeff0_28*dmats0[28][10] + coeff0_29*dmats0[29][10] + coeff0_30*dmats0[30][10] + coeff0_31*dmats0[31][10] + coeff0_32*dmats0[32][10] + coeff0_33*dmats0[33][10] + coeff0_34*dmats0[34][10];
          new_coeff0_11 = coeff0_0*dmats0[0][11] + coeff0_1*dmats0[1][11] + coeff0_2*dmats0[2][11] + coeff0_3*dmats0[3][11] + coeff0_4*dmats0[4][11] + coeff0_5*dmats0[5][11] + coeff0_6*dmats0[6][11] + coeff0_7*dmats0[7][11] + coeff0_8*dmats0[8][11] + coeff0_9*dmats0[9][11] + coeff0_10*dmats0[10][11] + coeff0_11*dmats0[11][11] + coeff0_12*dmats0[12][11] + coeff0_13*dmats0[13][11] + coeff0_14*dmats0[14][11] + coeff0_15*dmats0[15][11] + coeff0_16*dmats0[16][11] + coeff0_17*dmats0[17][11] + coeff0_18*dmats0[18][11] + coeff0_19*dmats0[19][11] + coeff0_20*dmats0[20][11] + coeff0_21*dmats0[21][11] + coeff0_22*dmats0[22][11] + coeff0_23*dmats0[23][11] + coeff0_24*dmats0[24][11] + coeff0_25*dmats0[25][11] + coeff0_26*dmats0[26][11] + coeff0_27*dmats0[27][11] + coeff0_28*dmats0[28][11] + coeff0_29*dmats0[29][11] + coeff0_30*dmats0[30][11] + coeff0_31*dmats0[31][11] + coeff0_32*dmats0[32][11] + coeff0_33*dmats0[33][11] + coeff0_34*dmats0[34][11];
          new_coeff0_12 = coeff0_0*dmats0[0][12] + coeff0_1*dmats0[1][12] + coeff0_2*dmats0[2][12] + coeff0_3*dmats0[3][12] + coeff0_4*dmats0[4][12] + coeff0_5*dmats0[5][12] + coeff0_6*dmats0[6][12] + coeff0_7*dmats0[7][12] + coeff0_8*dmats0[8][12] + coeff0_9*dmats0[9][12] + coeff0_10*dmats0[10][12] + coeff0_11*dmats0[11][12] + coeff0_12*dmats0[12][12] + coeff0_13*dmats0[13][12] + coeff0_14*dmats0[14][12] + coeff0_15*dmats0[15][12] + coeff0_16*dmats0[16][12] + coeff0_17*dmats0[17][12] + coeff0_18*dmats0[18][12] + coeff0_19*dmats0[19][12] + coeff0_20*dmats0[20][12] + coeff0_21*dmats0[21][12] + coeff0_22*dmats0[22][12] + coeff0_23*dmats0[23][12] + coeff0_24*dmats0[24][12] + coeff0_25*dmats0[25][12] + coeff0_26*dmats0[26][12] + coeff0_27*dmats0[27][12] + coeff0_28*dmats0[28][12] + coeff0_29*dmats0[29][12] + coeff0_30*dmats0[30][12] + coeff0_31*dmats0[31][12] + coeff0_32*dmats0[32][12] + coeff0_33*dmats0[33][12] + coeff0_34*dmats0[34][12];
          new_coeff0_13 = coeff0_0*dmats0[0][13] + coeff0_1*dmats0[1][13] + coeff0_2*dmats0[2][13] + coeff0_3*dmats0[3][13] + coeff0_4*dmats0[4][13] + coeff0_5*dmats0[5][13] + coeff0_6*dmats0[6][13] + coeff0_7*dmats0[7][13] + coeff0_8*dmats0[8][13] + coeff0_9*dmats0[9][13] + coeff0_10*dmats0[10][13] + coeff0_11*dmats0[11][13] + coeff0_12*dmats0[12][13] + coeff0_13*dmats0[13][13] + coeff0_14*dmats0[14][13] + coeff0_15*dmats0[15][13] + coeff0_16*dmats0[16][13] + coeff0_17*dmats0[17][13] + coeff0_18*dmats0[18][13] + coeff0_19*dmats0[19][13] + coeff0_20*dmats0[20][13] + coeff0_21*dmats0[21][13] + coeff0_22*dmats0[22][13] + coeff0_23*dmats0[23][13] + coeff0_24*dmats0[24][13] + coeff0_25*dmats0[25][13] + coeff0_26*dmats0[26][13] + coeff0_27*dmats0[27][13] + coeff0_28*dmats0[28][13] + coeff0_29*dmats0[29][13] + coeff0_30*dmats0[30][13] + coeff0_31*dmats0[31][13] + coeff0_32*dmats0[32][13] + coeff0_33*dmats0[33][13] + coeff0_34*dmats0[34][13];
          new_coeff0_14 = coeff0_0*dmats0[0][14] + coeff0_1*dmats0[1][14] + coeff0_2*dmats0[2][14] + coeff0_3*dmats0[3][14] + coeff0_4*dmats0[4][14] + coeff0_5*dmats0[5][14] + coeff0_6*dmats0[6][14] + coeff0_7*dmats0[7][14] + coeff0_8*dmats0[8][14] + coeff0_9*dmats0[9][14] + coeff0_10*dmats0[10][14] + coeff0_11*dmats0[11][14] + coeff0_12*dmats0[12][14] + coeff0_13*dmats0[13][14] + coeff0_14*dmats0[14][14] + coeff0_15*dmats0[15][14] + coeff0_16*dmats0[16][14] + coeff0_17*dmats0[17][14] + coeff0_18*dmats0[18][14] + coeff0_19*dmats0[19][14] + coeff0_20*dmats0[20][14] + coeff0_21*dmats0[21][14] + coeff0_22*dmats0[22][14] + coeff0_23*dmats0[23][14] + coeff0_24*dmats0[24][14] + coeff0_25*dmats0[25][14] + coeff0_26*dmats0[26][14] + coeff0_27*dmats0[27][14] + coeff0_28*dmats0[28][14] + coeff0_29*dmats0[29][14] + coeff0_30*dmats0[30][14] + coeff0_31*dmats0[31][14] + coeff0_32*dmats0[32][14] + coeff0_33*dmats0[33][14] + coeff0_34*dmats0[34][14];
          new_coeff0_15 = coeff0_0*dmats0[0][15] + coeff0_1*dmats0[1][15] + coeff0_2*dmats0[2][15] + coeff0_3*dmats0[3][15] + coeff0_4*dmats0[4][15] + coeff0_5*dmats0[5][15] + coeff0_6*dmats0[6][15] + coeff0_7*dmats0[7][15] + coeff0_8*dmats0[8][15] + coeff0_9*dmats0[9][15] + coeff0_10*dmats0[10][15] + coeff0_11*dmats0[11][15] + coeff0_12*dmats0[12][15] + coeff0_13*dmats0[13][15] + coeff0_14*dmats0[14][15] + coeff0_15*dmats0[15][15] + coeff0_16*dmats0[16][15] + coeff0_17*dmats0[17][15] + coeff0_18*dmats0[18][15] + coeff0_19*dmats0[19][15] + coeff0_20*dmats0[20][15] + coeff0_21*dmats0[21][15] + coeff0_22*dmats0[22][15] + coeff0_23*dmats0[23][15] + coeff0_24*dmats0[24][15] + coeff0_25*dmats0[25][15] + coeff0_26*dmats0[26][15] + coeff0_27*dmats0[27][15] + coeff0_28*dmats0[28][15] + coeff0_29*dmats0[29][15] + coeff0_30*dmats0[30][15] + coeff0_31*dmats0[31][15] + coeff0_32*dmats0[32][15] + coeff0_33*dmats0[33][15] + coeff0_34*dmats0[34][15];
          new_coeff0_16 = coeff0_0*dmats0[0][16] + coeff0_1*dmats0[1][16] + coeff0_2*dmats0[2][16] + coeff0_3*dmats0[3][16] + coeff0_4*dmats0[4][16] + coeff0_5*dmats0[5][16] + coeff0_6*dmats0[6][16] + coeff0_7*dmats0[7][16] + coeff0_8*dmats0[8][16] + coeff0_9*dmats0[9][16] + coeff0_10*dmats0[10][16] + coeff0_11*dmats0[11][16] + coeff0_12*dmats0[12][16] + coeff0_13*dmats0[13][16] + coeff0_14*dmats0[14][16] + coeff0_15*dmats0[15][16] + coeff0_16*dmats0[16][16] + coeff0_17*dmats0[17][16] + coeff0_18*dmats0[18][16] + coeff0_19*dmats0[19][16] + coeff0_20*dmats0[20][16] + coeff0_21*dmats0[21][16] + coeff0_22*dmats0[22][16] + coeff0_23*dmats0[23][16] + coeff0_24*dmats0[24][16] + coeff0_25*dmats0[25][16] + coeff0_26*dmats0[26][16] + coeff0_27*dmats0[27][16] + coeff0_28*dmats0[28][16] + coeff0_29*dmats0[29][16] + coeff0_30*dmats0[30][16] + coeff0_31*dmats0[31][16] + coeff0_32*dmats0[32][16] + coeff0_33*dmats0[33][16] + coeff0_34*dmats0[34][16];
          new_coeff0_17 = coeff0_0*dmats0[0][17] + coeff0_1*dmats0[1][17] + coeff0_2*dmats0[2][17] + coeff0_3*dmats0[3][17] + coeff0_4*dmats0[4][17] + coeff0_5*dmats0[5][17] + coeff0_6*dmats0[6][17] + coeff0_7*dmats0[7][17] + coeff0_8*dmats0[8][17] + coeff0_9*dmats0[9][17] + coeff0_10*dmats0[10][17] + coeff0_11*dmats0[11][17] + coeff0_12*dmats0[12][17] + coeff0_13*dmats0[13][17] + coeff0_14*dmats0[14][17] + coeff0_15*dmats0[15][17] + coeff0_16*dmats0[16][17] + coeff0_17*dmats0[17][17] + coeff0_18*dmats0[18][17] + coeff0_19*dmats0[19][17] + coeff0_20*dmats0[20][17] + coeff0_21*dmats0[21][17] + coeff0_22*dmats0[22][17] + coeff0_23*dmats0[23][17] + coeff0_24*dmats0[24][17] + coeff0_25*dmats0[25][17] + coeff0_26*dmats0[26][17] + coeff0_27*dmats0[27][17] + coeff0_28*dmats0[28][17] + coeff0_29*dmats0[29][17] + coeff0_30*dmats0[30][17] + coeff0_31*dmats0[31][17] + coeff0_32*dmats0[32][17] + coeff0_33*dmats0[33][17] + coeff0_34*dmats0[34][17];
          new_coeff0_18 = coeff0_0*dmats0[0][18] + coeff0_1*dmats0[1][18] + coeff0_2*dmats0[2][18] + coeff0_3*dmats0[3][18] + coeff0_4*dmats0[4][18] + coeff0_5*dmats0[5][18] + coeff0_6*dmats0[6][18] + coeff0_7*dmats0[7][18] + coeff0_8*dmats0[8][18] + coeff0_9*dmats0[9][18] + coeff0_10*dmats0[10][18] + coeff0_11*dmats0[11][18] + coeff0_12*dmats0[12][18] + coeff0_13*dmats0[13][18] + coeff0_14*dmats0[14][18] + coeff0_15*dmats0[15][18] + coeff0_16*dmats0[16][18] + coeff0_17*dmats0[17][18] + coeff0_18*dmats0[18][18] + coeff0_19*dmats0[19][18] + coeff0_20*dmats0[20][18] + coeff0_21*dmats0[21][18] + coeff0_22*dmats0[22][18] + coeff0_23*dmats0[23][18] + coeff0_24*dmats0[24][18] + coeff0_25*dmats0[25][18] + coeff0_26*dmats0[26][18] + coeff0_27*dmats0[27][18] + coeff0_28*dmats0[28][18] + coeff0_29*dmats0[29][18] + coeff0_30*dmats0[30][18] + coeff0_31*dmats0[31][18] + coeff0_32*dmats0[32][18] + coeff0_33*dmats0[33][18] + coeff0_34*dmats0[34][18];
          new_coeff0_19 = coeff0_0*dmats0[0][19] + coeff0_1*dmats0[1][19] + coeff0_2*dmats0[2][19] + coeff0_3*dmats0[3][19] + coeff0_4*dmats0[4][19] + coeff0_5*dmats0[5][19] + coeff0_6*dmats0[6][19] + coeff0_7*dmats0[7][19] + coeff0_8*dmats0[8][19] + coeff0_9*dmats0[9][19] + coeff0_10*dmats0[10][19] + coeff0_11*dmats0[11][19] + coeff0_12*dmats0[12][19] + coeff0_13*dmats0[13][19] + coeff0_14*dmats0[14][19] + coeff0_15*dmats0[15][19] + coeff0_16*dmats0[16][19] + coeff0_17*dmats0[17][19] + coeff0_18*dmats0[18][19] + coeff0_19*dmats0[19][19] + coeff0_20*dmats0[20][19] + coeff0_21*dmats0[21][19] + coeff0_22*dmats0[22][19] + coeff0_23*dmats0[23][19] + coeff0_24*dmats0[24][19] + coeff0_25*dmats0[25][19] + coeff0_26*dmats0[26][19] + coeff0_27*dmats0[27][19] + coeff0_28*dmats0[28][19] + coeff0_29*dmats0[29][19] + coeff0_30*dmats0[30][19] + coeff0_31*dmats0[31][19] + coeff0_32*dmats0[32][19] + coeff0_33*dmats0[33][19] + coeff0_34*dmats0[34][19];
          new_coeff0_20 = coeff0_0*dmats0[0][20] + coeff0_1*dmats0[1][20] + coeff0_2*dmats0[2][20] + coeff0_3*dmats0[3][20] + coeff0_4*dmats0[4][20] + coeff0_5*dmats0[5][20] + coeff0_6*dmats0[6][20] + coeff0_7*dmats0[7][20] + coeff0_8*dmats0[8][20] + coeff0_9*dmats0[9][20] + coeff0_10*dmats0[10][20] + coeff0_11*dmats0[11][20] + coeff0_12*dmats0[12][20] + coeff0_13*dmats0[13][20] + coeff0_14*dmats0[14][20] + coeff0_15*dmats0[15][20] + coeff0_16*dmats0[16][20] + coeff0_17*dmats0[17][20] + coeff0_18*dmats0[18][20] + coeff0_19*dmats0[19][20] + coeff0_20*dmats0[20][20] + coeff0_21*dmats0[21][20] + coeff0_22*dmats0[22][20] + coeff0_23*dmats0[23][20] + coeff0_24*dmats0[24][20] + coeff0_25*dmats0[25][20] + coeff0_26*dmats0[26][20] + coeff0_27*dmats0[27][20] + coeff0_28*dmats0[28][20] + coeff0_29*dmats0[29][20] + coeff0_30*dmats0[30][20] + coeff0_31*dmats0[31][20] + coeff0_32*dmats0[32][20] + coeff0_33*dmats0[33][20] + coeff0_34*dmats0[34][20];
          new_coeff0_21 = coeff0_0*dmats0[0][21] + coeff0_1*dmats0[1][21] + coeff0_2*dmats0[2][21] + coeff0_3*dmats0[3][21] + coeff0_4*dmats0[4][21] + coeff0_5*dmats0[5][21] + coeff0_6*dmats0[6][21] + coeff0_7*dmats0[7][21] + coeff0_8*dmats0[8][21] + coeff0_9*dmats0[9][21] + coeff0_10*dmats0[10][21] + coeff0_11*dmats0[11][21] + coeff0_12*dmats0[12][21] + coeff0_13*dmats0[13][21] + coeff0_14*dmats0[14][21] + coeff0_15*dmats0[15][21] + coeff0_16*dmats0[16][21] + coeff0_17*dmats0[17][21] + coeff0_18*dmats0[18][21] + coeff0_19*dmats0[19][21] + coeff0_20*dmats0[20][21] + coeff0_21*dmats0[21][21] + coeff0_22*dmats0[22][21] + coeff0_23*dmats0[23][21] + coeff0_24*dmats0[24][21] + coeff0_25*dmats0[25][21] + coeff0_26*dmats0[26][21] + coeff0_27*dmats0[27][21] + coeff0_28*dmats0[28][21] + coeff0_29*dmats0[29][21] + coeff0_30*dmats0[30][21] + coeff0_31*dmats0[31][21] + coeff0_32*dmats0[32][21] + coeff0_33*dmats0[33][21] + coeff0_34*dmats0[34][21];
          new_coeff0_22 = coeff0_0*dmats0[0][22] + coeff0_1*dmats0[1][22] + coeff0_2*dmats0[2][22] + coeff0_3*dmats0[3][22] + coeff0_4*dmats0[4][22] + coeff0_5*dmats0[5][22] + coeff0_6*dmats0[6][22] + coeff0_7*dmats0[7][22] + coeff0_8*dmats0[8][22] + coeff0_9*dmats0[9][22] + coeff0_10*dmats0[10][22] + coeff0_11*dmats0[11][22] + coeff0_12*dmats0[12][22] + coeff0_13*dmats0[13][22] + coeff0_14*dmats0[14][22] + coeff0_15*dmats0[15][22] + coeff0_16*dmats0[16][22] + coeff0_17*dmats0[17][22] + coeff0_18*dmats0[18][22] + coeff0_19*dmats0[19][22] + coeff0_20*dmats0[20][22] + coeff0_21*dmats0[21][22] + coeff0_22*dmats0[22][22] + coeff0_23*dmats0[23][22] + coeff0_24*dmats0[24][22] + coeff0_25*dmats0[25][22] + coeff0_26*dmats0[26][22] + coeff0_27*dmats0[27][22] + coeff0_28*dmats0[28][22] + coeff0_29*dmats0[29][22] + coeff0_30*dmats0[30][22] + coeff0_31*dmats0[31][22] + coeff0_32*dmats0[32][22] + coeff0_33*dmats0[33][22] + coeff0_34*dmats0[34][22];
          new_coeff0_23 = coeff0_0*dmats0[0][23] + coeff0_1*dmats0[1][23] + coeff0_2*dmats0[2][23] + coeff0_3*dmats0[3][23] + coeff0_4*dmats0[4][23] + coeff0_5*dmats0[5][23] + coeff0_6*dmats0[6][23] + coeff0_7*dmats0[7][23] + coeff0_8*dmats0[8][23] + coeff0_9*dmats0[9][23] + coeff0_10*dmats0[10][23] + coeff0_11*dmats0[11][23] + coeff0_12*dmats0[12][23] + coeff0_13*dmats0[13][23] + coeff0_14*dmats0[14][23] + coeff0_15*dmats0[15][23] + coeff0_16*dmats0[16][23] + coeff0_17*dmats0[17][23] + coeff0_18*dmats0[18][23] + coeff0_19*dmats0[19][23] + coeff0_20*dmats0[20][23] + coeff0_21*dmats0[21][23] + coeff0_22*dmats0[22][23] + coeff0_23*dmats0[23][23] + coeff0_24*dmats0[24][23] + coeff0_25*dmats0[25][23] + coeff0_26*dmats0[26][23] + coeff0_27*dmats0[27][23] + coeff0_28*dmats0[28][23] + coeff0_29*dmats0[29][23] + coeff0_30*dmats0[30][23] + coeff0_31*dmats0[31][23] + coeff0_32*dmats0[32][23] + coeff0_33*dmats0[33][23] + coeff0_34*dmats0[34][23];
          new_coeff0_24 = coeff0_0*dmats0[0][24] + coeff0_1*dmats0[1][24] + coeff0_2*dmats0[2][24] + coeff0_3*dmats0[3][24] + coeff0_4*dmats0[4][24] + coeff0_5*dmats0[5][24] + coeff0_6*dmats0[6][24] + coeff0_7*dmats0[7][24] + coeff0_8*dmats0[8][24] + coeff0_9*dmats0[9][24] + coeff0_10*dmats0[10][24] + coeff0_11*dmats0[11][24] + coeff0_12*dmats0[12][24] + coeff0_13*dmats0[13][24] + coeff0_14*dmats0[14][24] + coeff0_15*dmats0[15][24] + coeff0_16*dmats0[16][24] + coeff0_17*dmats0[17][24] + coeff0_18*dmats0[18][24] + coeff0_19*dmats0[19][24] + coeff0_20*dmats0[20][24] + coeff0_21*dmats0[21][24] + coeff0_22*dmats0[22][24] + coeff0_23*dmats0[23][24] + coeff0_24*dmats0[24][24] + coeff0_25*dmats0[25][24] + coeff0_26*dmats0[26][24] + coeff0_27*dmats0[27][24] + coeff0_28*dmats0[28][24] + coeff0_29*dmats0[29][24] + coeff0_30*dmats0[30][24] + coeff0_31*dmats0[31][24] + coeff0_32*dmats0[32][24] + coeff0_33*dmats0[33][24] + coeff0_34*dmats0[34][24];
          new_coeff0_25 = coeff0_0*dmats0[0][25] + coeff0_1*dmats0[1][25] + coeff0_2*dmats0[2][25] + coeff0_3*dmats0[3][25] + coeff0_4*dmats0[4][25] + coeff0_5*dmats0[5][25] + coeff0_6*dmats0[6][25] + coeff0_7*dmats0[7][25] + coeff0_8*dmats0[8][25] + coeff0_9*dmats0[9][25] + coeff0_10*dmats0[10][25] + coeff0_11*dmats0[11][25] + coeff0_12*dmats0[12][25] + coeff0_13*dmats0[13][25] + coeff0_14*dmats0[14][25] + coeff0_15*dmats0[15][25] + coeff0_16*dmats0[16][25] + coeff0_17*dmats0[17][25] + coeff0_18*dmats0[18][25] + coeff0_19*dmats0[19][25] + coeff0_20*dmats0[20][25] + coeff0_21*dmats0[21][25] + coeff0_22*dmats0[22][25] + coeff0_23*dmats0[23][25] + coeff0_24*dmats0[24][25] + coeff0_25*dmats0[25][25] + coeff0_26*dmats0[26][25] + coeff0_27*dmats0[27][25] + coeff0_28*dmats0[28][25] + coeff0_29*dmats0[29][25] + coeff0_30*dmats0[30][25] + coeff0_31*dmats0[31][25] + coeff0_32*dmats0[32][25] + coeff0_33*dmats0[33][25] + coeff0_34*dmats0[34][25];
          new_coeff0_26 = coeff0_0*dmats0[0][26] + coeff0_1*dmats0[1][26] + coeff0_2*dmats0[2][26] + coeff0_3*dmats0[3][26] + coeff0_4*dmats0[4][26] + coeff0_5*dmats0[5][26] + coeff0_6*dmats0[6][26] + coeff0_7*dmats0[7][26] + coeff0_8*dmats0[8][26] + coeff0_9*dmats0[9][26] + coeff0_10*dmats0[10][26] + coeff0_11*dmats0[11][26] + coeff0_12*dmats0[12][26] + coeff0_13*dmats0[13][26] + coeff0_14*dmats0[14][26] + coeff0_15*dmats0[15][26] + coeff0_16*dmats0[16][26] + coeff0_17*dmats0[17][26] + coeff0_18*dmats0[18][26] + coeff0_19*dmats0[19][26] + coeff0_20*dmats0[20][26] + coeff0_21*dmats0[21][26] + coeff0_22*dmats0[22][26] + coeff0_23*dmats0[23][26] + coeff0_24*dmats0[24][26] + coeff0_25*dmats0[25][26] + coeff0_26*dmats0[26][26] + coeff0_27*dmats0[27][26] + coeff0_28*dmats0[28][26] + coeff0_29*dmats0[29][26] + coeff0_30*dmats0[30][26] + coeff0_31*dmats0[31][26] + coeff0_32*dmats0[32][26] + coeff0_33*dmats0[33][26] + coeff0_34*dmats0[34][26];
          new_coeff0_27 = coeff0_0*dmats0[0][27] + coeff0_1*dmats0[1][27] + coeff0_2*dmats0[2][27] + coeff0_3*dmats0[3][27] + coeff0_4*dmats0[4][27] + coeff0_5*dmats0[5][27] + coeff0_6*dmats0[6][27] + coeff0_7*dmats0[7][27] + coeff0_8*dmats0[8][27] + coeff0_9*dmats0[9][27] + coeff0_10*dmats0[10][27] + coeff0_11*dmats0[11][27] + coeff0_12*dmats0[12][27] + coeff0_13*dmats0[13][27] + coeff0_14*dmats0[14][27] + coeff0_15*dmats0[15][27] + coeff0_16*dmats0[16][27] + coeff0_17*dmats0[17][27] + coeff0_18*dmats0[18][27] + coeff0_19*dmats0[19][27] + coeff0_20*dmats0[20][27] + coeff0_21*dmats0[21][27] + coeff0_22*dmats0[22][27] + coeff0_23*dmats0[23][27] + coeff0_24*dmats0[24][27] + coeff0_25*dmats0[25][27] + coeff0_26*dmats0[26][27] + coeff0_27*dmats0[27][27] + coeff0_28*dmats0[28][27] + coeff0_29*dmats0[29][27] + coeff0_30*dmats0[30][27] + coeff0_31*dmats0[31][27] + coeff0_32*dmats0[32][27] + coeff0_33*dmats0[33][27] + coeff0_34*dmats0[34][27];
          new_coeff0_28 = coeff0_0*dmats0[0][28] + coeff0_1*dmats0[1][28] + coeff0_2*dmats0[2][28] + coeff0_3*dmats0[3][28] + coeff0_4*dmats0[4][28] + coeff0_5*dmats0[5][28] + coeff0_6*dmats0[6][28] + coeff0_7*dmats0[7][28] + coeff0_8*dmats0[8][28] + coeff0_9*dmats0[9][28] + coeff0_10*dmats0[10][28] + coeff0_11*dmats0[11][28] + coeff0_12*dmats0[12][28] + coeff0_13*dmats0[13][28] + coeff0_14*dmats0[14][28] + coeff0_15*dmats0[15][28] + coeff0_16*dmats0[16][28] + coeff0_17*dmats0[17][28] + coeff0_18*dmats0[18][28] + coeff0_19*dmats0[19][28] + coeff0_20*dmats0[20][28] + coeff0_21*dmats0[21][28] + coeff0_22*dmats0[22][28] + coeff0_23*dmats0[23][28] + coeff0_24*dmats0[24][28] + coeff0_25*dmats0[25][28] + coeff0_26*dmats0[26][28] + coeff0_27*dmats0[27][28] + coeff0_28*dmats0[28][28] + coeff0_29*dmats0[29][28] + coeff0_30*dmats0[30][28] + coeff0_31*dmats0[31][28] + coeff0_32*dmats0[32][28] + coeff0_33*dmats0[33][28] + coeff0_34*dmats0[34][28];
          new_coeff0_29 = coeff0_0*dmats0[0][29] + coeff0_1*dmats0[1][29] + coeff0_2*dmats0[2][29] + coeff0_3*dmats0[3][29] + coeff0_4*dmats0[4][29] + coeff0_5*dmats0[5][29] + coeff0_6*dmats0[6][29] + coeff0_7*dmats0[7][29] + coeff0_8*dmats0[8][29] + coeff0_9*dmats0[9][29] + coeff0_10*dmats0[10][29] + coeff0_11*dmats0[11][29] + coeff0_12*dmats0[12][29] + coeff0_13*dmats0[13][29] + coeff0_14*dmats0[14][29] + coeff0_15*dmats0[15][29] + coeff0_16*dmats0[16][29] + coeff0_17*dmats0[17][29] + coeff0_18*dmats0[18][29] + coeff0_19*dmats0[19][29] + coeff0_20*dmats0[20][29] + coeff0_21*dmats0[21][29] + coeff0_22*dmats0[22][29] + coeff0_23*dmats0[23][29] + coeff0_24*dmats0[24][29] + coeff0_25*dmats0[25][29] + coeff0_26*dmats0[26][29] + coeff0_27*dmats0[27][29] + coeff0_28*dmats0[28][29] + coeff0_29*dmats0[29][29] + coeff0_30*dmats0[30][29] + coeff0_31*dmats0[31][29] + coeff0_32*dmats0[32][29] + coeff0_33*dmats0[33][29] + coeff0_34*dmats0[34][29];
          new_coeff0_30 = coeff0_0*dmats0[0][30] + coeff0_1*dmats0[1][30] + coeff0_2*dmats0[2][30] + coeff0_3*dmats0[3][30] + coeff0_4*dmats0[4][30] + coeff0_5*dmats0[5][30] + coeff0_6*dmats0[6][30] + coeff0_7*dmats0[7][30] + coeff0_8*dmats0[8][30] + coeff0_9*dmats0[9][30] + coeff0_10*dmats0[10][30] + coeff0_11*dmats0[11][30] + coeff0_12*dmats0[12][30] + coeff0_13*dmats0[13][30] + coeff0_14*dmats0[14][30] + coeff0_15*dmats0[15][30] + coeff0_16*dmats0[16][30] + coeff0_17*dmats0[17][30] + coeff0_18*dmats0[18][30] + coeff0_19*dmats0[19][30] + coeff0_20*dmats0[20][30] + coeff0_21*dmats0[21][30] + coeff0_22*dmats0[22][30] + coeff0_23*dmats0[23][30] + coeff0_24*dmats0[24][30] + coeff0_25*dmats0[25][30] + coeff0_26*dmats0[26][30] + coeff0_27*dmats0[27][30] + coeff0_28*dmats0[28][30] + coeff0_29*dmats0[29][30] + coeff0_30*dmats0[30][30] + coeff0_31*dmats0[31][30] + coeff0_32*dmats0[32][30] + coeff0_33*dmats0[33][30] + coeff0_34*dmats0[34][30];
          new_coeff0_31 = coeff0_0*dmats0[0][31] + coeff0_1*dmats0[1][31] + coeff0_2*dmats0[2][31] + coeff0_3*dmats0[3][31] + coeff0_4*dmats0[4][31] + coeff0_5*dmats0[5][31] + coeff0_6*dmats0[6][31] + coeff0_7*dmats0[7][31] + coeff0_8*dmats0[8][31] + coeff0_9*dmats0[9][31] + coeff0_10*dmats0[10][31] + coeff0_11*dmats0[11][31] + coeff0_12*dmats0[12][31] + coeff0_13*dmats0[13][31] + coeff0_14*dmats0[14][31] + coeff0_15*dmats0[15][31] + coeff0_16*dmats0[16][31] + coeff0_17*dmats0[17][31] + coeff0_18*dmats0[18][31] + coeff0_19*dmats0[19][31] + coeff0_20*dmats0[20][31] + coeff0_21*dmats0[21][31] + coeff0_22*dmats0[22][31] + coeff0_23*dmats0[23][31] + coeff0_24*dmats0[24][31] + coeff0_25*dmats0[25][31] + coeff0_26*dmats0[26][31] + coeff0_27*dmats0[27][31] + coeff0_28*dmats0[28][31] + coeff0_29*dmats0[29][31] + coeff0_30*dmats0[30][31] + coeff0_31*dmats0[31][31] + coeff0_32*dmats0[32][31] + coeff0_33*dmats0[33][31] + coeff0_34*dmats0[34][31];
          new_coeff0_32 = coeff0_0*dmats0[0][32] + coeff0_1*dmats0[1][32] + coeff0_2*dmats0[2][32] + coeff0_3*dmats0[3][32] + coeff0_4*dmats0[4][32] + coeff0_5*dmats0[5][32] + coeff0_6*dmats0[6][32] + coeff0_7*dmats0[7][32] + coeff0_8*dmats0[8][32] + coeff0_9*dmats0[9][32] + coeff0_10*dmats0[10][32] + coeff0_11*dmats0[11][32] + coeff0_12*dmats0[12][32] + coeff0_13*dmats0[13][32] + coeff0_14*dmats0[14][32] + coeff0_15*dmats0[15][32] + coeff0_16*dmats0[16][32] + coeff0_17*dmats0[17][32] + coeff0_18*dmats0[18][32] + coeff0_19*dmats0[19][32] + coeff0_20*dmats0[20][32] + coeff0_21*dmats0[21][32] + coeff0_22*dmats0[22][32] + coeff0_23*dmats0[23][32] + coeff0_24*dmats0[24][32] + coeff0_25*dmats0[25][32] + coeff0_26*dmats0[26][32] + coeff0_27*dmats0[27][32] + coeff0_28*dmats0[28][32] + coeff0_29*dmats0[29][32] + coeff0_30*dmats0[30][32] + coeff0_31*dmats0[31][32] + coeff0_32*dmats0[32][32] + coeff0_33*dmats0[33][32] + coeff0_34*dmats0[34][32];
          new_coeff0_33 = coeff0_0*dmats0[0][33] + coeff0_1*dmats0[1][33] + coeff0_2*dmats0[2][33] + coeff0_3*dmats0[3][33] + coeff0_4*dmats0[4][33] + coeff0_5*dmats0[5][33] + coeff0_6*dmats0[6][33] + coeff0_7*dmats0[7][33] + coeff0_8*dmats0[8][33] + coeff0_9*dmats0[9][33] + coeff0_10*dmats0[10][33] + coeff0_11*dmats0[11][33] + coeff0_12*dmats0[12][33] + coeff0_13*dmats0[13][33] + coeff0_14*dmats0[14][33] + coeff0_15*dmats0[15][33] + coeff0_16*dmats0[16][33] + coeff0_17*dmats0[17][33] + coeff0_18*dmats0[18][33] + coeff0_19*dmats0[19][33] + coeff0_20*dmats0[20][33] + coeff0_21*dmats0[21][33] + coeff0_22*dmats0[22][33] + coeff0_23*dmats0[23][33] + coeff0_24*dmats0[24][33] + coeff0_25*dmats0[25][33] + coeff0_26*dmats0[26][33] + coeff0_27*dmats0[27][33] + coeff0_28*dmats0[28][33] + coeff0_29*dmats0[29][33] + coeff0_30*dmats0[30][33] + coeff0_31*dmats0[31][33] + coeff0_32*dmats0[32][33] + coeff0_33*dmats0[33][33] + coeff0_34*dmats0[34][33];
          new_coeff0_34 = coeff0_0*dmats0[0][34] + coeff0_1*dmats0[1][34] + coeff0_2*dmats0[2][34] + coeff0_3*dmats0[3][34] + coeff0_4*dmats0[4][34] + coeff0_5*dmats0[5][34] + coeff0_6*dmats0[6][34] + coeff0_7*dmats0[7][34] + coeff0_8*dmats0[8][34] + coeff0_9*dmats0[9][34] + coeff0_10*dmats0[10][34] + coeff0_11*dmats0[11][34] + coeff0_12*dmats0[12][34] + coeff0_13*dmats0[13][34] + coeff0_14*dmats0[14][34] + coeff0_15*dmats0[15][34] + coeff0_16*dmats0[16][34] + coeff0_17*dmats0[17][34] + coeff0_18*dmats0[18][34] + coeff0_19*dmats0[19][34] + coeff0_20*dmats0[20][34] + coeff0_21*dmats0[21][34] + coeff0_22*dmats0[22][34] + coeff0_23*dmats0[23][34] + coeff0_24*dmats0[24][34] + coeff0_25*dmats0[25][34] + coeff0_26*dmats0[26][34] + coeff0_27*dmats0[27][34] + coeff0_28*dmats0[28][34] + coeff0_29*dmats0[29][34] + coeff0_30*dmats0[30][34] + coeff0_31*dmats0[31][34] + coeff0_32*dmats0[32][34] + coeff0_33*dmats0[33][34] + coeff0_34*dmats0[34][34];
        }
        if(combinations[deriv_num][j] == 1)
        {
          new_coeff0_0 = coeff0_0*dmats1[0][0] + coeff0_1*dmats1[1][0] + coeff0_2*dmats1[2][0] + coeff0_3*dmats1[3][0] + coeff0_4*dmats1[4][0] + coeff0_5*dmats1[5][0] + coeff0_6*dmats1[6][0] + coeff0_7*dmats1[7][0] + coeff0_8*dmats1[8][0] + coeff0_9*dmats1[9][0] + coeff0_10*dmats1[10][0] + coeff0_11*dmats1[11][0] + coeff0_12*dmats1[12][0] + coeff0_13*dmats1[13][0] + coeff0_14*dmats1[14][0] + coeff0_15*dmats1[15][0] + coeff0_16*dmats1[16][0] + coeff0_17*dmats1[17][0] + coeff0_18*dmats1[18][0] + coeff0_19*dmats1[19][0] + coeff0_20*dmats1[20][0] + coeff0_21*dmats1[21][0] + coeff0_22*dmats1[22][0] + coeff0_23*dmats1[23][0] + coeff0_24*dmats1[24][0] + coeff0_25*dmats1[25][0] + coeff0_26*dmats1[26][0] + coeff0_27*dmats1[27][0] + coeff0_28*dmats1[28][0] + coeff0_29*dmats1[29][0] + coeff0_30*dmats1[30][0] + coeff0_31*dmats1[31][0] + coeff0_32*dmats1[32][0] + coeff0_33*dmats1[33][0] + coeff0_34*dmats1[34][0];
          new_coeff0_1 = coeff0_0*dmats1[0][1] + coeff0_1*dmats1[1][1] + coeff0_2*dmats1[2][1] + coeff0_3*dmats1[3][1] + coeff0_4*dmats1[4][1] + coeff0_5*dmats1[5][1] + coeff0_6*dmats1[6][1] + coeff0_7*dmats1[7][1] + coeff0_8*dmats1[8][1] + coeff0_9*dmats1[9][1] + coeff0_10*dmats1[10][1] + coeff0_11*dmats1[11][1] + coeff0_12*dmats1[12][1] + coeff0_13*dmats1[13][1] + coeff0_14*dmats1[14][1] + coeff0_15*dmats1[15][1] + coeff0_16*dmats1[16][1] + coeff0_17*dmats1[17][1] + coeff0_18*dmats1[18][1] + coeff0_19*dmats1[19][1] + coeff0_20*dmats1[20][1] + coeff0_21*dmats1[21][1] + coeff0_22*dmats1[22][1] + coeff0_23*dmats1[23][1] + coeff0_24*dmats1[24][1] + coeff0_25*dmats1[25][1] + coeff0_26*dmats1[26][1] + coeff0_27*dmats1[27][1] + coeff0_28*dmats1[28][1] + coeff0_29*dmats1[29][1] + coeff0_30*dmats1[30][1] + coeff0_31*dmats1[31][1] + coeff0_32*dmats1[32][1] + coeff0_33*dmats1[33][1] + coeff0_34*dmats1[34][1];
          new_coeff0_2 = coeff0_0*dmats1[0][2] + coeff0_1*dmats1[1][2] + coeff0_2*dmats1[2][2] + coeff0_3*dmats1[3][2] + coeff0_4*dmats1[4][2] + coeff0_5*dmats1[5][2] + coeff0_6*dmats1[6][2] + coeff0_7*dmats1[7][2] + coeff0_8*dmats1[8][2] + coeff0_9*dmats1[9][2] + coeff0_10*dmats1[10][2] + coeff0_11*dmats1[11][2] + coeff0_12*dmats1[12][2] + coeff0_13*dmats1[13][2] + coeff0_14*dmats1[14][2] + coeff0_15*dmats1[15][2] + coeff0_16*dmats1[16][2] + coeff0_17*dmats1[17][2] + coeff0_18*dmats1[18][2] + coeff0_19*dmats1[19][2] + coeff0_20*dmats1[20][2] + coeff0_21*dmats1[21][2] + coeff0_22*dmats1[22][2] + coeff0_23*dmats1[23][2] + coeff0_24*dmats1[24][2] + coeff0_25*dmats1[25][2] + coeff0_26*dmats1[26][2] + coeff0_27*dmats1[27][2] + coeff0_28*dmats1[28][2] + coeff0_29*dmats1[29][2] + coeff0_30*dmats1[30][2] + coeff0_31*dmats1[31][2] + coeff0_32*dmats1[32][2] + coeff0_33*dmats1[33][2] + coeff0_34*dmats1[34][2];
          new_coeff0_3 = coeff0_0*dmats1[0][3] + coeff0_1*dmats1[1][3] + coeff0_2*dmats1[2][3] + coeff0_3*dmats1[3][3] + coeff0_4*dmats1[4][3] + coeff0_5*dmats1[5][3] + coeff0_6*dmats1[6][3] + coeff0_7*dmats1[7][3] + coeff0_8*dmats1[8][3] + coeff0_9*dmats1[9][3] + coeff0_10*dmats1[10][3] + coeff0_11*dmats1[11][3] + coeff0_12*dmats1[12][3] + coeff0_13*dmats1[13][3] + coeff0_14*dmats1[14][3] + coeff0_15*dmats1[15][3] + coeff0_16*dmats1[16][3] + coeff0_17*dmats1[17][3] + coeff0_18*dmats1[18][3] + coeff0_19*dmats1[19][3] + coeff0_20*dmats1[20][3] + coeff0_21*dmats1[21][3] + coeff0_22*dmats1[22][3] + coeff0_23*dmats1[23][3] + coeff0_24*dmats1[24][3] + coeff0_25*dmats1[25][3] + coeff0_26*dmats1[26][3] + coeff0_27*dmats1[27][3] + coeff0_28*dmats1[28][3] + coeff0_29*dmats1[29][3] + coeff0_30*dmats1[30][3] + coeff0_31*dmats1[31][3] + coeff0_32*dmats1[32][3] + coeff0_33*dmats1[33][3] + coeff0_34*dmats1[34][3];
          new_coeff0_4 = coeff0_0*dmats1[0][4] + coeff0_1*dmats1[1][4] + coeff0_2*dmats1[2][4] + coeff0_3*dmats1[3][4] + coeff0_4*dmats1[4][4] + coeff0_5*dmats1[5][4] + coeff0_6*dmats1[6][4] + coeff0_7*dmats1[7][4] + coeff0_8*dmats1[8][4] + coeff0_9*dmats1[9][4] + coeff0_10*dmats1[10][4] + coeff0_11*dmats1[11][4] + coeff0_12*dmats1[12][4] + coeff0_13*dmats1[13][4] + coeff0_14*dmats1[14][4] + coeff0_15*dmats1[15][4] + coeff0_16*dmats1[16][4] + coeff0_17*dmats1[17][4] + coeff0_18*dmats1[18][4] + coeff0_19*dmats1[19][4] + coeff0_20*dmats1[20][4] + coeff0_21*dmats1[21][4] + coeff0_22*dmats1[22][4] + coeff0_23*dmats1[23][4] + coeff0_24*dmats1[24][4] + coeff0_25*dmats1[25][4] + coeff0_26*dmats1[26][4] + coeff0_27*dmats1[27][4] + coeff0_28*dmats1[28][4] + coeff0_29*dmats1[29][4] + coeff0_30*dmats1[30][4] + coeff0_31*dmats1[31][4] + coeff0_32*dmats1[32][4] + coeff0_33*dmats1[33][4] + coeff0_34*dmats1[34][4];
          new_coeff0_5 = coeff0_0*dmats1[0][5] + coeff0_1*dmats1[1][5] + coeff0_2*dmats1[2][5] + coeff0_3*dmats1[3][5] + coeff0_4*dmats1[4][5] + coeff0_5*dmats1[5][5] + coeff0_6*dmats1[6][5] + coeff0_7*dmats1[7][5] + coeff0_8*dmats1[8][5] + coeff0_9*dmats1[9][5] + coeff0_10*dmats1[10][5] + coeff0_11*dmats1[11][5] + coeff0_12*dmats1[12][5] + coeff0_13*dmats1[13][5] + coeff0_14*dmats1[14][5] + coeff0_15*dmats1[15][5] + coeff0_16*dmats1[16][5] + coeff0_17*dmats1[17][5] + coeff0_18*dmats1[18][5] + coeff0_19*dmats1[19][5] + coeff0_20*dmats1[20][5] + coeff0_21*dmats1[21][5] + coeff0_22*dmats1[22][5] + coeff0_23*dmats1[23][5] + coeff0_24*dmats1[24][5] + coeff0_25*dmats1[25][5] + coeff0_26*dmats1[26][5] + coeff0_27*dmats1[27][5] + coeff0_28*dmats1[28][5] + coeff0_29*dmats1[29][5] + coeff0_30*dmats1[30][5] + coeff0_31*dmats1[31][5] + coeff0_32*dmats1[32][5] + coeff0_33*dmats1[33][5] + coeff0_34*dmats1[34][5];
          new_coeff0_6 = coeff0_0*dmats1[0][6] + coeff0_1*dmats1[1][6] + coeff0_2*dmats1[2][6] + coeff0_3*dmats1[3][6] + coeff0_4*dmats1[4][6] + coeff0_5*dmats1[5][6] + coeff0_6*dmats1[6][6] + coeff0_7*dmats1[7][6] + coeff0_8*dmats1[8][6] + coeff0_9*dmats1[9][6] + coeff0_10*dmats1[10][6] + coeff0_11*dmats1[11][6] + coeff0_12*dmats1[12][6] + coeff0_13*dmats1[13][6] + coeff0_14*dmats1[14][6] + coeff0_15*dmats1[15][6] + coeff0_16*dmats1[16][6] + coeff0_17*dmats1[17][6] + coeff0_18*dmats1[18][6] + coeff0_19*dmats1[19][6] + coeff0_20*dmats1[20][6] + coeff0_21*dmats1[21][6] + coeff0_22*dmats1[22][6] + coeff0_23*dmats1[23][6] + coeff0_24*dmats1[24][6] + coeff0_25*dmats1[25][6] + coeff0_26*dmats1[26][6] + coeff0_27*dmats1[27][6] + coeff0_28*dmats1[28][6] + coeff0_29*dmats1[29][6] + coeff0_30*dmats1[30][6] + coeff0_31*dmats1[31][6] + coeff0_32*dmats1[32][6] + coeff0_33*dmats1[33][6] + coeff0_34*dmats1[34][6];
          new_coeff0_7 = coeff0_0*dmats1[0][7] + coeff0_1*dmats1[1][7] + coeff0_2*dmats1[2][7] + coeff0_3*dmats1[3][7] + coeff0_4*dmats1[4][7] + coeff0_5*dmats1[5][7] + coeff0_6*dmats1[6][7] + coeff0_7*dmats1[7][7] + coeff0_8*dmats1[8][7] + coeff0_9*dmats1[9][7] + coeff0_10*dmats1[10][7] + coeff0_11*dmats1[11][7] + coeff0_12*dmats1[12][7] + coeff0_13*dmats1[13][7] + coeff0_14*dmats1[14][7] + coeff0_15*dmats1[15][7] + coeff0_16*dmats1[16][7] + coeff0_17*dmats1[17][7] + coeff0_18*dmats1[18][7] + coeff0_19*dmats1[19][7] + coeff0_20*dmats1[20][7] + coeff0_21*dmats1[21][7] + coeff0_22*dmats1[22][7] + coeff0_23*dmats1[23][7] + coeff0_24*dmats1[24][7] + coeff0_25*dmats1[25][7] + coeff0_26*dmats1[26][7] + coeff0_27*dmats1[27][7] + coeff0_28*dmats1[28][7] + coeff0_29*dmats1[29][7] + coeff0_30*dmats1[30][7] + coeff0_31*dmats1[31][7] + coeff0_32*dmats1[32][7] + coeff0_33*dmats1[33][7] + coeff0_34*dmats1[34][7];
          new_coeff0_8 = coeff0_0*dmats1[0][8] + coeff0_1*dmats1[1][8] + coeff0_2*dmats1[2][8] + coeff0_3*dmats1[3][8] + coeff0_4*dmats1[4][8] + coeff0_5*dmats1[5][8] + coeff0_6*dmats1[6][8] + coeff0_7*dmats1[7][8] + coeff0_8*dmats1[8][8] + coeff0_9*dmats1[9][8] + coeff0_10*dmats1[10][8] + coeff0_11*dmats1[11][8] + coeff0_12*dmats1[12][8] + coeff0_13*dmats1[13][8] + coeff0_14*dmats1[14][8] + coeff0_15*dmats1[15][8] + coeff0_16*dmats1[16][8] + coeff0_17*dmats1[17][8] + coeff0_18*dmats1[18][8] + coeff0_19*dmats1[19][8] + coeff0_20*dmats1[20][8] + coeff0_21*dmats1[21][8] + coeff0_22*dmats1[22][8] + coeff0_23*dmats1[23][8] + coeff0_24*dmats1[24][8] + coeff0_25*dmats1[25][8] + coeff0_26*dmats1[26][8] + coeff0_27*dmats1[27][8] + coeff0_28*dmats1[28][8] + coeff0_29*dmats1[29][8] + coeff0_30*dmats1[30][8] + coeff0_31*dmats1[31][8] + coeff0_32*dmats1[32][8] + coeff0_33*dmats1[33][8] + coeff0_34*dmats1[34][8];
          new_coeff0_9 = coeff0_0*dmats1[0][9] + coeff0_1*dmats1[1][9] + coeff0_2*dmats1[2][9] + coeff0_3*dmats1[3][9] + coeff0_4*dmats1[4][9] + coeff0_5*dmats1[5][9] + coeff0_6*dmats1[6][9] + coeff0_7*dmats1[7][9] + coeff0_8*dmats1[8][9] + coeff0_9*dmats1[9][9] + coeff0_10*dmats1[10][9] + coeff0_11*dmats1[11][9] + coeff0_12*dmats1[12][9] + coeff0_13*dmats1[13][9] + coeff0_14*dmats1[14][9] + coeff0_15*dmats1[15][9] + coeff0_16*dmats1[16][9] + coeff0_17*dmats1[17][9] + coeff0_18*dmats1[18][9] + coeff0_19*dmats1[19][9] + coeff0_20*dmats1[20][9] + coeff0_21*dmats1[21][9] + coeff0_22*dmats1[22][9] + coeff0_23*dmats1[23][9] + coeff0_24*dmats1[24][9] + coeff0_25*dmats1[25][9] + coeff0_26*dmats1[26][9] + coeff0_27*dmats1[27][9] + coeff0_28*dmats1[28][9] + coeff0_29*dmats1[29][9] + coeff0_30*dmats1[30][9] + coeff0_31*dmats1[31][9] + coeff0_32*dmats1[32][9] + coeff0_33*dmats1[33][9] + coeff0_34*dmats1[34][9];
          new_coeff0_10 = coeff0_0*dmats1[0][10] + coeff0_1*dmats1[1][10] + coeff0_2*dmats1[2][10] + coeff0_3*dmats1[3][10] + coeff0_4*dmats1[4][10] + coeff0_5*dmats1[5][10] + coeff0_6*dmats1[6][10] + coeff0_7*dmats1[7][10] + coeff0_8*dmats1[8][10] + coeff0_9*dmats1[9][10] + coeff0_10*dmats1[10][10] + coeff0_11*dmats1[11][10] + coeff0_12*dmats1[12][10] + coeff0_13*dmats1[13][10] + coeff0_14*dmats1[14][10] + coeff0_15*dmats1[15][10] + coeff0_16*dmats1[16][10] + coeff0_17*dmats1[17][10] + coeff0_18*dmats1[18][10] + coeff0_19*dmats1[19][10] + coeff0_20*dmats1[20][10] + coeff0_21*dmats1[21][10] + coeff0_22*dmats1[22][10] + coeff0_23*dmats1[23][10] + coeff0_24*dmats1[24][10] + coeff0_25*dmats1[25][10] + coeff0_26*dmats1[26][10] + coeff0_27*dmats1[27][10] + coeff0_28*dmats1[28][10] + coeff0_29*dmats1[29][10] + coeff0_30*dmats1[30][10] + coeff0_31*dmats1[31][10] + coeff0_32*dmats1[32][10] + coeff0_33*dmats1[33][10] + coeff0_34*dmats1[34][10];
          new_coeff0_11 = coeff0_0*dmats1[0][11] + coeff0_1*dmats1[1][11] + coeff0_2*dmats1[2][11] + coeff0_3*dmats1[3][11] + coeff0_4*dmats1[4][11] + coeff0_5*dmats1[5][11] + coeff0_6*dmats1[6][11] + coeff0_7*dmats1[7][11] + coeff0_8*dmats1[8][11] + coeff0_9*dmats1[9][11] + coeff0_10*dmats1[10][11] + coeff0_11*dmats1[11][11] + coeff0_12*dmats1[12][11] + coeff0_13*dmats1[13][11] + coeff0_14*dmats1[14][11] + coeff0_15*dmats1[15][11] + coeff0_16*dmats1[16][11] + coeff0_17*dmats1[17][11] + coeff0_18*dmats1[18][11] + coeff0_19*dmats1[19][11] + coeff0_20*dmats1[20][11] + coeff0_21*dmats1[21][11] + coeff0_22*dmats1[22][11] + coeff0_23*dmats1[23][11] + coeff0_24*dmats1[24][11] + coeff0_25*dmats1[25][11] + coeff0_26*dmats1[26][11] + coeff0_27*dmats1[27][11] + coeff0_28*dmats1[28][11] + coeff0_29*dmats1[29][11] + coeff0_30*dmats1[30][11] + coeff0_31*dmats1[31][11] + coeff0_32*dmats1[32][11] + coeff0_33*dmats1[33][11] + coeff0_34*dmats1[34][11];
          new_coeff0_12 = coeff0_0*dmats1[0][12] + coeff0_1*dmats1[1][12] + coeff0_2*dmats1[2][12] + coeff0_3*dmats1[3][12] + coeff0_4*dmats1[4][12] + coeff0_5*dmats1[5][12] + coeff0_6*dmats1[6][12] + coeff0_7*dmats1[7][12] + coeff0_8*dmats1[8][12] + coeff0_9*dmats1[9][12] + coeff0_10*dmats1[10][12] + coeff0_11*dmats1[11][12] + coeff0_12*dmats1[12][12] + coeff0_13*dmats1[13][12] + coeff0_14*dmats1[14][12] + coeff0_15*dmats1[15][12] + coeff0_16*dmats1[16][12] + coeff0_17*dmats1[17][12] + coeff0_18*dmats1[18][12] + coeff0_19*dmats1[19][12] + coeff0_20*dmats1[20][12] + coeff0_21*dmats1[21][12] + coeff0_22*dmats1[22][12] + coeff0_23*dmats1[23][12] + coeff0_24*dmats1[24][12] + coeff0_25*dmats1[25][12] + coeff0_26*dmats1[26][12] + coeff0_27*dmats1[27][12] + coeff0_28*dmats1[28][12] + coeff0_29*dmats1[29][12] + coeff0_30*dmats1[30][12] + coeff0_31*dmats1[31][12] + coeff0_32*dmats1[32][12] + coeff0_33*dmats1[33][12] + coeff0_34*dmats1[34][12];
          new_coeff0_13 = coeff0_0*dmats1[0][13] + coeff0_1*dmats1[1][13] + coeff0_2*dmats1[2][13] + coeff0_3*dmats1[3][13] + coeff0_4*dmats1[4][13] + coeff0_5*dmats1[5][13] + coeff0_6*dmats1[6][13] + coeff0_7*dmats1[7][13] + coeff0_8*dmats1[8][13] + coeff0_9*dmats1[9][13] + coeff0_10*dmats1[10][13] + coeff0_11*dmats1[11][13] + coeff0_12*dmats1[12][13] + coeff0_13*dmats1[13][13] + coeff0_14*dmats1[14][13] + coeff0_15*dmats1[15][13] + coeff0_16*dmats1[16][13] + coeff0_17*dmats1[17][13] + coeff0_18*dmats1[18][13] + coeff0_19*dmats1[19][13] + coeff0_20*dmats1[20][13] + coeff0_21*dmats1[21][13] + coeff0_22*dmats1[22][13] + coeff0_23*dmats1[23][13] + coeff0_24*dmats1[24][13] + coeff0_25*dmats1[25][13] + coeff0_26*dmats1[26][13] + coeff0_27*dmats1[27][13] + coeff0_28*dmats1[28][13] + coeff0_29*dmats1[29][13] + coeff0_30*dmats1[30][13] + coeff0_31*dmats1[31][13] + coeff0_32*dmats1[32][13] + coeff0_33*dmats1[33][13] + coeff0_34*dmats1[34][13];
          new_coeff0_14 = coeff0_0*dmats1[0][14] + coeff0_1*dmats1[1][14] + coeff0_2*dmats1[2][14] + coeff0_3*dmats1[3][14] + coeff0_4*dmats1[4][14] + coeff0_5*dmats1[5][14] + coeff0_6*dmats1[6][14] + coeff0_7*dmats1[7][14] + coeff0_8*dmats1[8][14] + coeff0_9*dmats1[9][14] + coeff0_10*dmats1[10][14] + coeff0_11*dmats1[11][14] + coeff0_12*dmats1[12][14] + coeff0_13*dmats1[13][14] + coeff0_14*dmats1[14][14] + coeff0_15*dmats1[15][14] + coeff0_16*dmats1[16][14] + coeff0_17*dmats1[17][14] + coeff0_18*dmats1[18][14] + coeff0_19*dmats1[19][14] + coeff0_20*dmats1[20][14] + coeff0_21*dmats1[21][14] + coeff0_22*dmats1[22][14] + coeff0_23*dmats1[23][14] + coeff0_24*dmats1[24][14] + coeff0_25*dmats1[25][14] + coeff0_26*dmats1[26][14] + coeff0_27*dmats1[27][14] + coeff0_28*dmats1[28][14] + coeff0_29*dmats1[29][14] + coeff0_30*dmats1[30][14] + coeff0_31*dmats1[31][14] + coeff0_32*dmats1[32][14] + coeff0_33*dmats1[33][14] + coeff0_34*dmats1[34][14];
          new_coeff0_15 = coeff0_0*dmats1[0][15] + coeff0_1*dmats1[1][15] + coeff0_2*dmats1[2][15] + coeff0_3*dmats1[3][15] + coeff0_4*dmats1[4][15] + coeff0_5*dmats1[5][15] + coeff0_6*dmats1[6][15] + coeff0_7*dmats1[7][15] + coeff0_8*dmats1[8][15] + coeff0_9*dmats1[9][15] + coeff0_10*dmats1[10][15] + coeff0_11*dmats1[11][15] + coeff0_12*dmats1[12][15] + coeff0_13*dmats1[13][15] + coeff0_14*dmats1[14][15] + coeff0_15*dmats1[15][15] + coeff0_16*dmats1[16][15] + coeff0_17*dmats1[17][15] + coeff0_18*dmats1[18][15] + coeff0_19*dmats1[19][15] + coeff0_20*dmats1[20][15] + coeff0_21*dmats1[21][15] + coeff0_22*dmats1[22][15] + coeff0_23*dmats1[23][15] + coeff0_24*dmats1[24][15] + coeff0_25*dmats1[25][15] + coeff0_26*dmats1[26][15] + coeff0_27*dmats1[27][15] + coeff0_28*dmats1[28][15] + coeff0_29*dmats1[29][15] + coeff0_30*dmats1[30][15] + coeff0_31*dmats1[31][15] + coeff0_32*dmats1[32][15] + coeff0_33*dmats1[33][15] + coeff0_34*dmats1[34][15];
          new_coeff0_16 = coeff0_0*dmats1[0][16] + coeff0_1*dmats1[1][16] + coeff0_2*dmats1[2][16] + coeff0_3*dmats1[3][16] + coeff0_4*dmats1[4][16] + coeff0_5*dmats1[5][16] + coeff0_6*dmats1[6][16] + coeff0_7*dmats1[7][16] + coeff0_8*dmats1[8][16] + coeff0_9*dmats1[9][16] + coeff0_10*dmats1[10][16] + coeff0_11*dmats1[11][16] + coeff0_12*dmats1[12][16] + coeff0_13*dmats1[13][16] + coeff0_14*dmats1[14][16] + coeff0_15*dmats1[15][16] + coeff0_16*dmats1[16][16] + coeff0_17*dmats1[17][16] + coeff0_18*dmats1[18][16] + coeff0_19*dmats1[19][16] + coeff0_20*dmats1[20][16] + coeff0_21*dmats1[21][16] + coeff0_22*dmats1[22][16] + coeff0_23*dmats1[23][16] + coeff0_24*dmats1[24][16] + coeff0_25*dmats1[25][16] + coeff0_26*dmats1[26][16] + coeff0_27*dmats1[27][16] + coeff0_28*dmats1[28][16] + coeff0_29*dmats1[29][16] + coeff0_30*dmats1[30][16] + coeff0_31*dmats1[31][16] + coeff0_32*dmats1[32][16] + coeff0_33*dmats1[33][16] + coeff0_34*dmats1[34][16];
          new_coeff0_17 = coeff0_0*dmats1[0][17] + coeff0_1*dmats1[1][17] + coeff0_2*dmats1[2][17] + coeff0_3*dmats1[3][17] + coeff0_4*dmats1[4][17] + coeff0_5*dmats1[5][17] + coeff0_6*dmats1[6][17] + coeff0_7*dmats1[7][17] + coeff0_8*dmats1[8][17] + coeff0_9*dmats1[9][17] + coeff0_10*dmats1[10][17] + coeff0_11*dmats1[11][17] + coeff0_12*dmats1[12][17] + coeff0_13*dmats1[13][17] + coeff0_14*dmats1[14][17] + coeff0_15*dmats1[15][17] + coeff0_16*dmats1[16][17] + coeff0_17*dmats1[17][17] + coeff0_18*dmats1[18][17] + coeff0_19*dmats1[19][17] + coeff0_20*dmats1[20][17] + coeff0_21*dmats1[21][17] + coeff0_22*dmats1[22][17] + coeff0_23*dmats1[23][17] + coeff0_24*dmats1[24][17] + coeff0_25*dmats1[25][17] + coeff0_26*dmats1[26][17] + coeff0_27*dmats1[27][17] + coeff0_28*dmats1[28][17] + coeff0_29*dmats1[29][17] + coeff0_30*dmats1[30][17] + coeff0_31*dmats1[31][17] + coeff0_32*dmats1[32][17] + coeff0_33*dmats1[33][17] + coeff0_34*dmats1[34][17];
          new_coeff0_18 = coeff0_0*dmats1[0][18] + coeff0_1*dmats1[1][18] + coeff0_2*dmats1[2][18] + coeff0_3*dmats1[3][18] + coeff0_4*dmats1[4][18] + coeff0_5*dmats1[5][18] + coeff0_6*dmats1[6][18] + coeff0_7*dmats1[7][18] + coeff0_8*dmats1[8][18] + coeff0_9*dmats1[9][18] + coeff0_10*dmats1[10][18] + coeff0_11*dmats1[11][18] + coeff0_12*dmats1[12][18] + coeff0_13*dmats1[13][18] + coeff0_14*dmats1[14][18] + coeff0_15*dmats1[15][18] + coeff0_16*dmats1[16][18] + coeff0_17*dmats1[17][18] + coeff0_18*dmats1[18][18] + coeff0_19*dmats1[19][18] + coeff0_20*dmats1[20][18] + coeff0_21*dmats1[21][18] + coeff0_22*dmats1[22][18] + coeff0_23*dmats1[23][18] + coeff0_24*dmats1[24][18] + coeff0_25*dmats1[25][18] + coeff0_26*dmats1[26][18] + coeff0_27*dmats1[27][18] + coeff0_28*dmats1[28][18] + coeff0_29*dmats1[29][18] + coeff0_30*dmats1[30][18] + coeff0_31*dmats1[31][18] + coeff0_32*dmats1[32][18] + coeff0_33*dmats1[33][18] + coeff0_34*dmats1[34][18];
          new_coeff0_19 = coeff0_0*dmats1[0][19] + coeff0_1*dmats1[1][19] + coeff0_2*dmats1[2][19] + coeff0_3*dmats1[3][19] + coeff0_4*dmats1[4][19] + coeff0_5*dmats1[5][19] + coeff0_6*dmats1[6][19] + coeff0_7*dmats1[7][19] + coeff0_8*dmats1[8][19] + coeff0_9*dmats1[9][19] + coeff0_10*dmats1[10][19] + coeff0_11*dmats1[11][19] + coeff0_12*dmats1[12][19] + coeff0_13*dmats1[13][19] + coeff0_14*dmats1[14][19] + coeff0_15*dmats1[15][19] + coeff0_16*dmats1[16][19] + coeff0_17*dmats1[17][19] + coeff0_18*dmats1[18][19] + coeff0_19*dmats1[19][19] + coeff0_20*dmats1[20][19] + coeff0_21*dmats1[21][19] + coeff0_22*dmats1[22][19] + coeff0_23*dmats1[23][19] + coeff0_24*dmats1[24][19] + coeff0_25*dmats1[25][19] + coeff0_26*dmats1[26][19] + coeff0_27*dmats1[27][19] + coeff0_28*dmats1[28][19] + coeff0_29*dmats1[29][19] + coeff0_30*dmats1[30][19] + coeff0_31*dmats1[31][19] + coeff0_32*dmats1[32][19] + coeff0_33*dmats1[33][19] + coeff0_34*dmats1[34][19];
          new_coeff0_20 = coeff0_0*dmats1[0][20] + coeff0_1*dmats1[1][20] + coeff0_2*dmats1[2][20] + coeff0_3*dmats1[3][20] + coeff0_4*dmats1[4][20] + coeff0_5*dmats1[5][20] + coeff0_6*dmats1[6][20] + coeff0_7*dmats1[7][20] + coeff0_8*dmats1[8][20] + coeff0_9*dmats1[9][20] + coeff0_10*dmats1[10][20] + coeff0_11*dmats1[11][20] + coeff0_12*dmats1[12][20] + coeff0_13*dmats1[13][20] + coeff0_14*dmats1[14][20] + coeff0_15*dmats1[15][20] + coeff0_16*dmats1[16][20] + coeff0_17*dmats1[17][20] + coeff0_18*dmats1[18][20] + coeff0_19*dmats1[19][20] + coeff0_20*dmats1[20][20] + coeff0_21*dmats1[21][20] + coeff0_22*dmats1[22][20] + coeff0_23*dmats1[23][20] + coeff0_24*dmats1[24][20] + coeff0_25*dmats1[25][20] + coeff0_26*dmats1[26][20] + coeff0_27*dmats1[27][20] + coeff0_28*dmats1[28][20] + coeff0_29*dmats1[29][20] + coeff0_30*dmats1[30][20] + coeff0_31*dmats1[31][20] + coeff0_32*dmats1[32][20] + coeff0_33*dmats1[33][20] + coeff0_34*dmats1[34][20];
          new_coeff0_21 = coeff0_0*dmats1[0][21] + coeff0_1*dmats1[1][21] + coeff0_2*dmats1[2][21] + coeff0_3*dmats1[3][21] + coeff0_4*dmats1[4][21] + coeff0_5*dmats1[5][21] + coeff0_6*dmats1[6][21] + coeff0_7*dmats1[7][21] + coeff0_8*dmats1[8][21] + coeff0_9*dmats1[9][21] + coeff0_10*dmats1[10][21] + coeff0_11*dmats1[11][21] + coeff0_12*dmats1[12][21] + coeff0_13*dmats1[13][21] + coeff0_14*dmats1[14][21] + coeff0_15*dmats1[15][21] + coeff0_16*dmats1[16][21] + coeff0_17*dmats1[17][21] + coeff0_18*dmats1[18][21] + coeff0_19*dmats1[19][21] + coeff0_20*dmats1[20][21] + coeff0_21*dmats1[21][21] + coeff0_22*dmats1[22][21] + coeff0_23*dmats1[23][21] + coeff0_24*dmats1[24][21] + coeff0_25*dmats1[25][21] + coeff0_26*dmats1[26][21] + coeff0_27*dmats1[27][21] + coeff0_28*dmats1[28][21] + coeff0_29*dmats1[29][21] + coeff0_30*dmats1[30][21] + coeff0_31*dmats1[31][21] + coeff0_32*dmats1[32][21] + coeff0_33*dmats1[33][21] + coeff0_34*dmats1[34][21];
          new_coeff0_22 = coeff0_0*dmats1[0][22] + coeff0_1*dmats1[1][22] + coeff0_2*dmats1[2][22] + coeff0_3*dmats1[3][22] + coeff0_4*dmats1[4][22] + coeff0_5*dmats1[5][22] + coeff0_6*dmats1[6][22] + coeff0_7*dmats1[7][22] + coeff0_8*dmats1[8][22] + coeff0_9*dmats1[9][22] + coeff0_10*dmats1[10][22] + coeff0_11*dmats1[11][22] + coeff0_12*dmats1[12][22] + coeff0_13*dmats1[13][22] + coeff0_14*dmats1[14][22] + coeff0_15*dmats1[15][22] + coeff0_16*dmats1[16][22] + coeff0_17*dmats1[17][22] + coeff0_18*dmats1[18][22] + coeff0_19*dmats1[19][22] + coeff0_20*dmats1[20][22] + coeff0_21*dmats1[21][22] + coeff0_22*dmats1[22][22] + coeff0_23*dmats1[23][22] + coeff0_24*dmats1[24][22] + coeff0_25*dmats1[25][22] + coeff0_26*dmats1[26][22] + coeff0_27*dmats1[27][22] + coeff0_28*dmats1[28][22] + coeff0_29*dmats1[29][22] + coeff0_30*dmats1[30][22] + coeff0_31*dmats1[31][22] + coeff0_32*dmats1[32][22] + coeff0_33*dmats1[33][22] + coeff0_34*dmats1[34][22];
          new_coeff0_23 = coeff0_0*dmats1[0][23] + coeff0_1*dmats1[1][23] + coeff0_2*dmats1[2][23] + coeff0_3*dmats1[3][23] + coeff0_4*dmats1[4][23] + coeff0_5*dmats1[5][23] + coeff0_6*dmats1[6][23] + coeff0_7*dmats1[7][23] + coeff0_8*dmats1[8][23] + coeff0_9*dmats1[9][23] + coeff0_10*dmats1[10][23] + coeff0_11*dmats1[11][23] + coeff0_12*dmats1[12][23] + coeff0_13*dmats1[13][23] + coeff0_14*dmats1[14][23] + coeff0_15*dmats1[15][23] + coeff0_16*dmats1[16][23] + coeff0_17*dmats1[17][23] + coeff0_18*dmats1[18][23] + coeff0_19*dmats1[19][23] + coeff0_20*dmats1[20][23] + coeff0_21*dmats1[21][23] + coeff0_22*dmats1[22][23] + coeff0_23*dmats1[23][23] + coeff0_24*dmats1[24][23] + coeff0_25*dmats1[25][23] + coeff0_26*dmats1[26][23] + coeff0_27*dmats1[27][23] + coeff0_28*dmats1[28][23] + coeff0_29*dmats1[29][23] + coeff0_30*dmats1[30][23] + coeff0_31*dmats1[31][23] + coeff0_32*dmats1[32][23] + coeff0_33*dmats1[33][23] + coeff0_34*dmats1[34][23];
          new_coeff0_24 = coeff0_0*dmats1[0][24] + coeff0_1*dmats1[1][24] + coeff0_2*dmats1[2][24] + coeff0_3*dmats1[3][24] + coeff0_4*dmats1[4][24] + coeff0_5*dmats1[5][24] + coeff0_6*dmats1[6][24] + coeff0_7*dmats1[7][24] + coeff0_8*dmats1[8][24] + coeff0_9*dmats1[9][24] + coeff0_10*dmats1[10][24] + coeff0_11*dmats1[11][24] + coeff0_12*dmats1[12][24] + coeff0_13*dmats1[13][24] + coeff0_14*dmats1[14][24] + coeff0_15*dmats1[15][24] + coeff0_16*dmats1[16][24] + coeff0_17*dmats1[17][24] + coeff0_18*dmats1[18][24] + coeff0_19*dmats1[19][24] + coeff0_20*dmats1[20][24] + coeff0_21*dmats1[21][24] + coeff0_22*dmats1[22][24] + coeff0_23*dmats1[23][24] + coeff0_24*dmats1[24][24] + coeff0_25*dmats1[25][24] + coeff0_26*dmats1[26][24] + coeff0_27*dmats1[27][24] + coeff0_28*dmats1[28][24] + coeff0_29*dmats1[29][24] + coeff0_30*dmats1[30][24] + coeff0_31*dmats1[31][24] + coeff0_32*dmats1[32][24] + coeff0_33*dmats1[33][24] + coeff0_34*dmats1[34][24];
          new_coeff0_25 = coeff0_0*dmats1[0][25] + coeff0_1*dmats1[1][25] + coeff0_2*dmats1[2][25] + coeff0_3*dmats1[3][25] + coeff0_4*dmats1[4][25] + coeff0_5*dmats1[5][25] + coeff0_6*dmats1[6][25] + coeff0_7*dmats1[7][25] + coeff0_8*dmats1[8][25] + coeff0_9*dmats1[9][25] + coeff0_10*dmats1[10][25] + coeff0_11*dmats1[11][25] + coeff0_12*dmats1[12][25] + coeff0_13*dmats1[13][25] + coeff0_14*dmats1[14][25] + coeff0_15*dmats1[15][25] + coeff0_16*dmats1[16][25] + coeff0_17*dmats1[17][25] + coeff0_18*dmats1[18][25] + coeff0_19*dmats1[19][25] + coeff0_20*dmats1[20][25] + coeff0_21*dmats1[21][25] + coeff0_22*dmats1[22][25] + coeff0_23*dmats1[23][25] + coeff0_24*dmats1[24][25] + coeff0_25*dmats1[25][25] + coeff0_26*dmats1[26][25] + coeff0_27*dmats1[27][25] + coeff0_28*dmats1[28][25] + coeff0_29*dmats1[29][25] + coeff0_30*dmats1[30][25] + coeff0_31*dmats1[31][25] + coeff0_32*dmats1[32][25] + coeff0_33*dmats1[33][25] + coeff0_34*dmats1[34][25];
          new_coeff0_26 = coeff0_0*dmats1[0][26] + coeff0_1*dmats1[1][26] + coeff0_2*dmats1[2][26] + coeff0_3*dmats1[3][26] + coeff0_4*dmats1[4][26] + coeff0_5*dmats1[5][26] + coeff0_6*dmats1[6][26] + coeff0_7*dmats1[7][26] + coeff0_8*dmats1[8][26] + coeff0_9*dmats1[9][26] + coeff0_10*dmats1[10][26] + coeff0_11*dmats1[11][26] + coeff0_12*dmats1[12][26] + coeff0_13*dmats1[13][26] + coeff0_14*dmats1[14][26] + coeff0_15*dmats1[15][26] + coeff0_16*dmats1[16][26] + coeff0_17*dmats1[17][26] + coeff0_18*dmats1[18][26] + coeff0_19*dmats1[19][26] + coeff0_20*dmats1[20][26] + coeff0_21*dmats1[21][26] + coeff0_22*dmats1[22][26] + coeff0_23*dmats1[23][26] + coeff0_24*dmats1[24][26] + coeff0_25*dmats1[25][26] + coeff0_26*dmats1[26][26] + coeff0_27*dmats1[27][26] + coeff0_28*dmats1[28][26] + coeff0_29*dmats1[29][26] + coeff0_30*dmats1[30][26] + coeff0_31*dmats1[31][26] + coeff0_32*dmats1[32][26] + coeff0_33*dmats1[33][26] + coeff0_34*dmats1[34][26];
          new_coeff0_27 = coeff0_0*dmats1[0][27] + coeff0_1*dmats1[1][27] + coeff0_2*dmats1[2][27] + coeff0_3*dmats1[3][27] + coeff0_4*dmats1[4][27] + coeff0_5*dmats1[5][27] + coeff0_6*dmats1[6][27] + coeff0_7*dmats1[7][27] + coeff0_8*dmats1[8][27] + coeff0_9*dmats1[9][27] + coeff0_10*dmats1[10][27] + coeff0_11*dmats1[11][27] + coeff0_12*dmats1[12][27] + coeff0_13*dmats1[13][27] + coeff0_14*dmats1[14][27] + coeff0_15*dmats1[15][27] + coeff0_16*dmats1[16][27] + coeff0_17*dmats1[17][27] + coeff0_18*dmats1[18][27] + coeff0_19*dmats1[19][27] + coeff0_20*dmats1[20][27] + coeff0_21*dmats1[21][27] + coeff0_22*dmats1[22][27] + coeff0_23*dmats1[23][27] + coeff0_24*dmats1[24][27] + coeff0_25*dmats1[25][27] + coeff0_26*dmats1[26][27] + coeff0_27*dmats1[27][27] + coeff0_28*dmats1[28][27] + coeff0_29*dmats1[29][27] + coeff0_30*dmats1[30][27] + coeff0_31*dmats1[31][27] + coeff0_32*dmats1[32][27] + coeff0_33*dmats1[33][27] + coeff0_34*dmats1[34][27];
          new_coeff0_28 = coeff0_0*dmats1[0][28] + coeff0_1*dmats1[1][28] + coeff0_2*dmats1[2][28] + coeff0_3*dmats1[3][28] + coeff0_4*dmats1[4][28] + coeff0_5*dmats1[5][28] + coeff0_6*dmats1[6][28] + coeff0_7*dmats1[7][28] + coeff0_8*dmats1[8][28] + coeff0_9*dmats1[9][28] + coeff0_10*dmats1[10][28] + coeff0_11*dmats1[11][28] + coeff0_12*dmats1[12][28] + coeff0_13*dmats1[13][28] + coeff0_14*dmats1[14][28] + coeff0_15*dmats1[15][28] + coeff0_16*dmats1[16][28] + coeff0_17*dmats1[17][28] + coeff0_18*dmats1[18][28] + coeff0_19*dmats1[19][28] + coeff0_20*dmats1[20][28] + coeff0_21*dmats1[21][28] + coeff0_22*dmats1[22][28] + coeff0_23*dmats1[23][28] + coeff0_24*dmats1[24][28] + coeff0_25*dmats1[25][28] + coeff0_26*dmats1[26][28] + coeff0_27*dmats1[27][28] + coeff0_28*dmats1[28][28] + coeff0_29*dmats1[29][28] + coeff0_30*dmats1[30][28] + coeff0_31*dmats1[31][28] + coeff0_32*dmats1[32][28] + coeff0_33*dmats1[33][28] + coeff0_34*dmats1[34][28];
          new_coeff0_29 = coeff0_0*dmats1[0][29] + coeff0_1*dmats1[1][29] + coeff0_2*dmats1[2][29] + coeff0_3*dmats1[3][29] + coeff0_4*dmats1[4][29] + coeff0_5*dmats1[5][29] + coeff0_6*dmats1[6][29] + coeff0_7*dmats1[7][29] + coeff0_8*dmats1[8][29] + coeff0_9*dmats1[9][29] + coeff0_10*dmats1[10][29] + coeff0_11*dmats1[11][29] + coeff0_12*dmats1[12][29] + coeff0_13*dmats1[13][29] + coeff0_14*dmats1[14][29] + coeff0_15*dmats1[15][29] + coeff0_16*dmats1[16][29] + coeff0_17*dmats1[17][29] + coeff0_18*dmats1[18][29] + coeff0_19*dmats1[19][29] + coeff0_20*dmats1[20][29] + coeff0_21*dmats1[21][29] + coeff0_22*dmats1[22][29] + coeff0_23*dmats1[23][29] + coeff0_24*dmats1[24][29] + coeff0_25*dmats1[25][29] + coeff0_26*dmats1[26][29] + coeff0_27*dmats1[27][29] + coeff0_28*dmats1[28][29] + coeff0_29*dmats1[29][29] + coeff0_30*dmats1[30][29] + coeff0_31*dmats1[31][29] + coeff0_32*dmats1[32][29] + coeff0_33*dmats1[33][29] + coeff0_34*dmats1[34][29];
          new_coeff0_30 = coeff0_0*dmats1[0][30] + coeff0_1*dmats1[1][30] + coeff0_2*dmats1[2][30] + coeff0_3*dmats1[3][30] + coeff0_4*dmats1[4][30] + coeff0_5*dmats1[5][30] + coeff0_6*dmats1[6][30] + coeff0_7*dmats1[7][30] + coeff0_8*dmats1[8][30] + coeff0_9*dmats1[9][30] + coeff0_10*dmats1[10][30] + coeff0_11*dmats1[11][30] + coeff0_12*dmats1[12][30] + coeff0_13*dmats1[13][30] + coeff0_14*dmats1[14][30] + coeff0_15*dmats1[15][30] + coeff0_16*dmats1[16][30] + coeff0_17*dmats1[17][30] + coeff0_18*dmats1[18][30] + coeff0_19*dmats1[19][30] + coeff0_20*dmats1[20][30] + coeff0_21*dmats1[21][30] + coeff0_22*dmats1[22][30] + coeff0_23*dmats1[23][30] + coeff0_24*dmats1[24][30] + coeff0_25*dmats1[25][30] + coeff0_26*dmats1[26][30] + coeff0_27*dmats1[27][30] + coeff0_28*dmats1[28][30] + coeff0_29*dmats1[29][30] + coeff0_30*dmats1[30][30] + coeff0_31*dmats1[31][30] + coeff0_32*dmats1[32][30] + coeff0_33*dmats1[33][30] + coeff0_34*dmats1[34][30];
          new_coeff0_31 = coeff0_0*dmats1[0][31] + coeff0_1*dmats1[1][31] + coeff0_2*dmats1[2][31] + coeff0_3*dmats1[3][31] + coeff0_4*dmats1[4][31] + coeff0_5*dmats1[5][31] + coeff0_6*dmats1[6][31] + coeff0_7*dmats1[7][31] + coeff0_8*dmats1[8][31] + coeff0_9*dmats1[9][31] + coeff0_10*dmats1[10][31] + coeff0_11*dmats1[11][31] + coeff0_12*dmats1[12][31] + coeff0_13*dmats1[13][31] + coeff0_14*dmats1[14][31] + coeff0_15*dmats1[15][31] + coeff0_16*dmats1[16][31] + coeff0_17*dmats1[17][31] + coeff0_18*dmats1[18][31] + coeff0_19*dmats1[19][31] + coeff0_20*dmats1[20][31] + coeff0_21*dmats1[21][31] + coeff0_22*dmats1[22][31] + coeff0_23*dmats1[23][31] + coeff0_24*dmats1[24][31] + coeff0_25*dmats1[25][31] + coeff0_26*dmats1[26][31] + coeff0_27*dmats1[27][31] + coeff0_28*dmats1[28][31] + coeff0_29*dmats1[29][31] + coeff0_30*dmats1[30][31] + coeff0_31*dmats1[31][31] + coeff0_32*dmats1[32][31] + coeff0_33*dmats1[33][31] + coeff0_34*dmats1[34][31];
          new_coeff0_32 = coeff0_0*dmats1[0][32] + coeff0_1*dmats1[1][32] + coeff0_2*dmats1[2][32] + coeff0_3*dmats1[3][32] + coeff0_4*dmats1[4][32] + coeff0_5*dmats1[5][32] + coeff0_6*dmats1[6][32] + coeff0_7*dmats1[7][32] + coeff0_8*dmats1[8][32] + coeff0_9*dmats1[9][32] + coeff0_10*dmats1[10][32] + coeff0_11*dmats1[11][32] + coeff0_12*dmats1[12][32] + coeff0_13*dmats1[13][32] + coeff0_14*dmats1[14][32] + coeff0_15*dmats1[15][32] + coeff0_16*dmats1[16][32] + coeff0_17*dmats1[17][32] + coeff0_18*dmats1[18][32] + coeff0_19*dmats1[19][32] + coeff0_20*dmats1[20][32] + coeff0_21*dmats1[21][32] + coeff0_22*dmats1[22][32] + coeff0_23*dmats1[23][32] + coeff0_24*dmats1[24][32] + coeff0_25*dmats1[25][32] + coeff0_26*dmats1[26][32] + coeff0_27*dmats1[27][32] + coeff0_28*dmats1[28][32] + coeff0_29*dmats1[29][32] + coeff0_30*dmats1[30][32] + coeff0_31*dmats1[31][32] + coeff0_32*dmats1[32][32] + coeff0_33*dmats1[33][32] + coeff0_34*dmats1[34][32];
          new_coeff0_33 = coeff0_0*dmats1[0][33] + coeff0_1*dmats1[1][33] + coeff0_2*dmats1[2][33] + coeff0_3*dmats1[3][33] + coeff0_4*dmats1[4][33] + coeff0_5*dmats1[5][33] + coeff0_6*dmats1[6][33] + coeff0_7*dmats1[7][33] + coeff0_8*dmats1[8][33] + coeff0_9*dmats1[9][33] + coeff0_10*dmats1[10][33] + coeff0_11*dmats1[11][33] + coeff0_12*dmats1[12][33] + coeff0_13*dmats1[13][33] + coeff0_14*dmats1[14][33] + coeff0_15*dmats1[15][33] + coeff0_16*dmats1[16][33] + coeff0_17*dmats1[17][33] + coeff0_18*dmats1[18][33] + coeff0_19*dmats1[19][33] + coeff0_20*dmats1[20][33] + coeff0_21*dmats1[21][33] + coeff0_22*dmats1[22][33] + coeff0_23*dmats1[23][33] + coeff0_24*dmats1[24][33] + coeff0_25*dmats1[25][33] + coeff0_26*dmats1[26][33] + coeff0_27*dmats1[27][33] + coeff0_28*dmats1[28][33] + coeff0_29*dmats1[29][33] + coeff0_30*dmats1[30][33] + coeff0_31*dmats1[31][33] + coeff0_32*dmats1[32][33] + coeff0_33*dmats1[33][33] + coeff0_34*dmats1[34][33];
          new_coeff0_34 = coeff0_0*dmats1[0][34] + coeff0_1*dmats1[1][34] + coeff0_2*dmats1[2][34] + coeff0_3*dmats1[3][34] + coeff0_4*dmats1[4][34] + coeff0_5*dmats1[5][34] + coeff0_6*dmats1[6][34] + coeff0_7*dmats1[7][34] + coeff0_8*dmats1[8][34] + coeff0_9*dmats1[9][34] + coeff0_10*dmats1[10][34] + coeff0_11*dmats1[11][34] + coeff0_12*dmats1[12][34] + coeff0_13*dmats1[13][34] + coeff0_14*dmats1[14][34] + coeff0_15*dmats1[15][34] + coeff0_16*dmats1[16][34] + coeff0_17*dmats1[17][34] + coeff0_18*dmats1[18][34] + coeff0_19*dmats1[19][34] + coeff0_20*dmats1[20][34] + coeff0_21*dmats1[21][34] + coeff0_22*dmats1[22][34] + coeff0_23*dmats1[23][34] + coeff0_24*dmats1[24][34] + coeff0_25*dmats1[25][34] + coeff0_26*dmats1[26][34] + coeff0_27*dmats1[27][34] + coeff0_28*dmats1[28][34] + coeff0_29*dmats1[29][34] + coeff0_30*dmats1[30][34] + coeff0_31*dmats1[31][34] + coeff0_32*dmats1[32][34] + coeff0_33*dmats1[33][34] + coeff0_34*dmats1[34][34];
        }
        if(combinations[deriv_num][j] == 2)
        {
          new_coeff0_0 = coeff0_0*dmats2[0][0] + coeff0_1*dmats2[1][0] + coeff0_2*dmats2[2][0] + coeff0_3*dmats2[3][0] + coeff0_4*dmats2[4][0] + coeff0_5*dmats2[5][0] + coeff0_6*dmats2[6][0] + coeff0_7*dmats2[7][0] + coeff0_8*dmats2[8][0] + coeff0_9*dmats2[9][0] + coeff0_10*dmats2[10][0] + coeff0_11*dmats2[11][0] + coeff0_12*dmats2[12][0] + coeff0_13*dmats2[13][0] + coeff0_14*dmats2[14][0] + coeff0_15*dmats2[15][0] + coeff0_16*dmats2[16][0] + coeff0_17*dmats2[17][0] + coeff0_18*dmats2[18][0] + coeff0_19*dmats2[19][0] + coeff0_20*dmats2[20][0] + coeff0_21*dmats2[21][0] + coeff0_22*dmats2[22][0] + coeff0_23*dmats2[23][0] + coeff0_24*dmats2[24][0] + coeff0_25*dmats2[25][0] + coeff0_26*dmats2[26][0] + coeff0_27*dmats2[27][0] + coeff0_28*dmats2[28][0] + coeff0_29*dmats2[29][0] + coeff0_30*dmats2[30][0] + coeff0_31*dmats2[31][0] + coeff0_32*dmats2[32][0] + coeff0_33*dmats2[33][0] + coeff0_34*dmats2[34][0];
          new_coeff0_1 = coeff0_0*dmats2[0][1] + coeff0_1*dmats2[1][1] + coeff0_2*dmats2[2][1] + coeff0_3*dmats2[3][1] + coeff0_4*dmats2[4][1] + coeff0_5*dmats2[5][1] + coeff0_6*dmats2[6][1] + coeff0_7*dmats2[7][1] + coeff0_8*dmats2[8][1] + coeff0_9*dmats2[9][1] + coeff0_10*dmats2[10][1] + coeff0_11*dmats2[11][1] + coeff0_12*dmats2[12][1] + coeff0_13*dmats2[13][1] + coeff0_14*dmats2[14][1] + coeff0_15*dmats2[15][1] + coeff0_16*dmats2[16][1] + coeff0_17*dmats2[17][1] + coeff0_18*dmats2[18][1] + coeff0_19*dmats2[19][1] + coeff0_20*dmats2[20][1] + coeff0_21*dmats2[21][1] + coeff0_22*dmats2[22][1] + coeff0_23*dmats2[23][1] + coeff0_24*dmats2[24][1] + coeff0_25*dmats2[25][1] + coeff0_26*dmats2[26][1] + coeff0_27*dmats2[27][1] + coeff0_28*dmats2[28][1] + coeff0_29*dmats2[29][1] + coeff0_30*dmats2[30][1] + coeff0_31*dmats2[31][1] + coeff0_32*dmats2[32][1] + coeff0_33*dmats2[33][1] + coeff0_34*dmats2[34][1];
          new_coeff0_2 = coeff0_0*dmats2[0][2] + coeff0_1*dmats2[1][2] + coeff0_2*dmats2[2][2] + coeff0_3*dmats2[3][2] + coeff0_4*dmats2[4][2] + coeff0_5*dmats2[5][2] + coeff0_6*dmats2[6][2] + coeff0_7*dmats2[7][2] + coeff0_8*dmats2[8][2] + coeff0_9*dmats2[9][2] + coeff0_10*dmats2[10][2] + coeff0_11*dmats2[11][2] + coeff0_12*dmats2[12][2] + coeff0_13*dmats2[13][2] + coeff0_14*dmats2[14][2] + coeff0_15*dmats2[15][2] + coeff0_16*dmats2[16][2] + coeff0_17*dmats2[17][2] + coeff0_18*dmats2[18][2] + coeff0_19*dmats2[19][2] + coeff0_20*dmats2[20][2] + coeff0_21*dmats2[21][2] + coeff0_22*dmats2[22][2] + coeff0_23*dmats2[23][2] + coeff0_24*dmats2[24][2] + coeff0_25*dmats2[25][2] + coeff0_26*dmats2[26][2] + coeff0_27*dmats2[27][2] + coeff0_28*dmats2[28][2] + coeff0_29*dmats2[29][2] + coeff0_30*dmats2[30][2] + coeff0_31*dmats2[31][2] + coeff0_32*dmats2[32][2] + coeff0_33*dmats2[33][2] + coeff0_34*dmats2[34][2];
          new_coeff0_3 = coeff0_0*dmats2[0][3] + coeff0_1*dmats2[1][3] + coeff0_2*dmats2[2][3] + coeff0_3*dmats2[3][3] + coeff0_4*dmats2[4][3] + coeff0_5*dmats2[5][3] + coeff0_6*dmats2[6][3] + coeff0_7*dmats2[7][3] + coeff0_8*dmats2[8][3] + coeff0_9*dmats2[9][3] + coeff0_10*dmats2[10][3] + coeff0_11*dmats2[11][3] + coeff0_12*dmats2[12][3] + coeff0_13*dmats2[13][3] + coeff0_14*dmats2[14][3] + coeff0_15*dmats2[15][3] + coeff0_16*dmats2[16][3] + coeff0_17*dmats2[17][3] + coeff0_18*dmats2[18][3] + coeff0_19*dmats2[19][3] + coeff0_20*dmats2[20][3] + coeff0_21*dmats2[21][3] + coeff0_22*dmats2[22][3] + coeff0_23*dmats2[23][3] + coeff0_24*dmats2[24][3] + coeff0_25*dmats2[25][3] + coeff0_26*dmats2[26][3] + coeff0_27*dmats2[27][3] + coeff0_28*dmats2[28][3] + coeff0_29*dmats2[29][3] + coeff0_30*dmats2[30][3] + coeff0_31*dmats2[31][3] + coeff0_32*dmats2[32][3] + coeff0_33*dmats2[33][3] + coeff0_34*dmats2[34][3];
          new_coeff0_4 = coeff0_0*dmats2[0][4] + coeff0_1*dmats2[1][4] + coeff0_2*dmats2[2][4] + coeff0_3*dmats2[3][4] + coeff0_4*dmats2[4][4] + coeff0_5*dmats2[5][4] + coeff0_6*dmats2[6][4] + coeff0_7*dmats2[7][4] + coeff0_8*dmats2[8][4] + coeff0_9*dmats2[9][4] + coeff0_10*dmats2[10][4] + coeff0_11*dmats2[11][4] + coeff0_12*dmats2[12][4] + coeff0_13*dmats2[13][4] + coeff0_14*dmats2[14][4] + coeff0_15*dmats2[15][4] + coeff0_16*dmats2[16][4] + coeff0_17*dmats2[17][4] + coeff0_18*dmats2[18][4] + coeff0_19*dmats2[19][4] + coeff0_20*dmats2[20][4] + coeff0_21*dmats2[21][4] + coeff0_22*dmats2[22][4] + coeff0_23*dmats2[23][4] + coeff0_24*dmats2[24][4] + coeff0_25*dmats2[25][4] + coeff0_26*dmats2[26][4] + coeff0_27*dmats2[27][4] + coeff0_28*dmats2[28][4] + coeff0_29*dmats2[29][4] + coeff0_30*dmats2[30][4] + coeff0_31*dmats2[31][4] + coeff0_32*dmats2[32][4] + coeff0_33*dmats2[33][4] + coeff0_34*dmats2[34][4];
          new_coeff0_5 = coeff0_0*dmats2[0][5] + coeff0_1*dmats2[1][5] + coeff0_2*dmats2[2][5] + coeff0_3*dmats2[3][5] + coeff0_4*dmats2[4][5] + coeff0_5*dmats2[5][5] + coeff0_6*dmats2[6][5] + coeff0_7*dmats2[7][5] + coeff0_8*dmats2[8][5] + coeff0_9*dmats2[9][5] + coeff0_10*dmats2[10][5] + coeff0_11*dmats2[11][5] + coeff0_12*dmats2[12][5] + coeff0_13*dmats2[13][5] + coeff0_14*dmats2[14][5] + coeff0_15*dmats2[15][5] + coeff0_16*dmats2[16][5] + coeff0_17*dmats2[17][5] + coeff0_18*dmats2[18][5] + coeff0_19*dmats2[19][5] + coeff0_20*dmats2[20][5] + coeff0_21*dmats2[21][5] + coeff0_22*dmats2[22][5] + coeff0_23*dmats2[23][5] + coeff0_24*dmats2[24][5] + coeff0_25*dmats2[25][5] + coeff0_26*dmats2[26][5] + coeff0_27*dmats2[27][5] + coeff0_28*dmats2[28][5] + coeff0_29*dmats2[29][5] + coeff0_30*dmats2[30][5] + coeff0_31*dmats2[31][5] + coeff0_32*dmats2[32][5] + coeff0_33*dmats2[33][5] + coeff0_34*dmats2[34][5];
          new_coeff0_6 = coeff0_0*dmats2[0][6] + coeff0_1*dmats2[1][6] + coeff0_2*dmats2[2][6] + coeff0_3*dmats2[3][6] + coeff0_4*dmats2[4][6] + coeff0_5*dmats2[5][6] + coeff0_6*dmats2[6][6] + coeff0_7*dmats2[7][6] + coeff0_8*dmats2[8][6] + coeff0_9*dmats2[9][6] + coeff0_10*dmats2[10][6] + coeff0_11*dmats2[11][6] + coeff0_12*dmats2[12][6] + coeff0_13*dmats2[13][6] + coeff0_14*dmats2[14][6] + coeff0_15*dmats2[15][6] + coeff0_16*dmats2[16][6] + coeff0_17*dmats2[17][6] + coeff0_18*dmats2[18][6] + coeff0_19*dmats2[19][6] + coeff0_20*dmats2[20][6] + coeff0_21*dmats2[21][6] + coeff0_22*dmats2[22][6] + coeff0_23*dmats2[23][6] + coeff0_24*dmats2[24][6] + coeff0_25*dmats2[25][6] + coeff0_26*dmats2[26][6] + coeff0_27*dmats2[27][6] + coeff0_28*dmats2[28][6] + coeff0_29*dmats2[29][6] + coeff0_30*dmats2[30][6] + coeff0_31*dmats2[31][6] + coeff0_32*dmats2[32][6] + coeff0_33*dmats2[33][6] + coeff0_34*dmats2[34][6];
          new_coeff0_7 = coeff0_0*dmats2[0][7] + coeff0_1*dmats2[1][7] + coeff0_2*dmats2[2][7] + coeff0_3*dmats2[3][7] + coeff0_4*dmats2[4][7] + coeff0_5*dmats2[5][7] + coeff0_6*dmats2[6][7] + coeff0_7*dmats2[7][7] + coeff0_8*dmats2[8][7] + coeff0_9*dmats2[9][7] + coeff0_10*dmats2[10][7] + coeff0_11*dmats2[11][7] + coeff0_12*dmats2[12][7] + coeff0_13*dmats2[13][7] + coeff0_14*dmats2[14][7] + coeff0_15*dmats2[15][7] + coeff0_16*dmats2[16][7] + coeff0_17*dmats2[17][7] + coeff0_18*dmats2[18][7] + coeff0_19*dmats2[19][7] + coeff0_20*dmats2[20][7] + coeff0_21*dmats2[21][7] + coeff0_22*dmats2[22][7] + coeff0_23*dmats2[23][7] + coeff0_24*dmats2[24][7] + coeff0_25*dmats2[25][7] + coeff0_26*dmats2[26][7] + coeff0_27*dmats2[27][7] + coeff0_28*dmats2[28][7] + coeff0_29*dmats2[29][7] + coeff0_30*dmats2[30][7] + coeff0_31*dmats2[31][7] + coeff0_32*dmats2[32][7] + coeff0_33*dmats2[33][7] + coeff0_34*dmats2[34][7];
          new_coeff0_8 = coeff0_0*dmats2[0][8] + coeff0_1*dmats2[1][8] + coeff0_2*dmats2[2][8] + coeff0_3*dmats2[3][8] + coeff0_4*dmats2[4][8] + coeff0_5*dmats2[5][8] + coeff0_6*dmats2[6][8] + coeff0_7*dmats2[7][8] + coeff0_8*dmats2[8][8] + coeff0_9*dmats2[9][8] + coeff0_10*dmats2[10][8] + coeff0_11*dmats2[11][8] + coeff0_12*dmats2[12][8] + coeff0_13*dmats2[13][8] + coeff0_14*dmats2[14][8] + coeff0_15*dmats2[15][8] + coeff0_16*dmats2[16][8] + coeff0_17*dmats2[17][8] + coeff0_18*dmats2[18][8] + coeff0_19*dmats2[19][8] + coeff0_20*dmats2[20][8] + coeff0_21*dmats2[21][8] + coeff0_22*dmats2[22][8] + coeff0_23*dmats2[23][8] + coeff0_24*dmats2[24][8] + coeff0_25*dmats2[25][8] + coeff0_26*dmats2[26][8] + coeff0_27*dmats2[27][8] + coeff0_28*dmats2[28][8] + coeff0_29*dmats2[29][8] + coeff0_30*dmats2[30][8] + coeff0_31*dmats2[31][8] + coeff0_32*dmats2[32][8] + coeff0_33*dmats2[33][8] + coeff0_34*dmats2[34][8];
          new_coeff0_9 = coeff0_0*dmats2[0][9] + coeff0_1*dmats2[1][9] + coeff0_2*dmats2[2][9] + coeff0_3*dmats2[3][9] + coeff0_4*dmats2[4][9] + coeff0_5*dmats2[5][9] + coeff0_6*dmats2[6][9] + coeff0_7*dmats2[7][9] + coeff0_8*dmats2[8][9] + coeff0_9*dmats2[9][9] + coeff0_10*dmats2[10][9] + coeff0_11*dmats2[11][9] + coeff0_12*dmats2[12][9] + coeff0_13*dmats2[13][9] + coeff0_14*dmats2[14][9] + coeff0_15*dmats2[15][9] + coeff0_16*dmats2[16][9] + coeff0_17*dmats2[17][9] + coeff0_18*dmats2[18][9] + coeff0_19*dmats2[19][9] + coeff0_20*dmats2[20][9] + coeff0_21*dmats2[21][9] + coeff0_22*dmats2[22][9] + coeff0_23*dmats2[23][9] + coeff0_24*dmats2[24][9] + coeff0_25*dmats2[25][9] + coeff0_26*dmats2[26][9] + coeff0_27*dmats2[27][9] + coeff0_28*dmats2[28][9] + coeff0_29*dmats2[29][9] + coeff0_30*dmats2[30][9] + coeff0_31*dmats2[31][9] + coeff0_32*dmats2[32][9] + coeff0_33*dmats2[33][9] + coeff0_34*dmats2[34][9];
          new_coeff0_10 = coeff0_0*dmats2[0][10] + coeff0_1*dmats2[1][10] + coeff0_2*dmats2[2][10] + coeff0_3*dmats2[3][10] + coeff0_4*dmats2[4][10] + coeff0_5*dmats2[5][10] + coeff0_6*dmats2[6][10] + coeff0_7*dmats2[7][10] + coeff0_8*dmats2[8][10] + coeff0_9*dmats2[9][10] + coeff0_10*dmats2[10][10] + coeff0_11*dmats2[11][10] + coeff0_12*dmats2[12][10] + coeff0_13*dmats2[13][10] + coeff0_14*dmats2[14][10] + coeff0_15*dmats2[15][10] + coeff0_16*dmats2[16][10] + coeff0_17*dmats2[17][10] + coeff0_18*dmats2[18][10] + coeff0_19*dmats2[19][10] + coeff0_20*dmats2[20][10] + coeff0_21*dmats2[21][10] + coeff0_22*dmats2[22][10] + coeff0_23*dmats2[23][10] + coeff0_24*dmats2[24][10] + coeff0_25*dmats2[25][10] + coeff0_26*dmats2[26][10] + coeff0_27*dmats2[27][10] + coeff0_28*dmats2[28][10] + coeff0_29*dmats2[29][10] + coeff0_30*dmats2[30][10] + coeff0_31*dmats2[31][10] + coeff0_32*dmats2[32][10] + coeff0_33*dmats2[33][10] + coeff0_34*dmats2[34][10];
          new_coeff0_11 = coeff0_0*dmats2[0][11] + coeff0_1*dmats2[1][11] + coeff0_2*dmats2[2][11] + coeff0_3*dmats2[3][11] + coeff0_4*dmats2[4][11] + coeff0_5*dmats2[5][11] + coeff0_6*dmats2[6][11] + coeff0_7*dmats2[7][11] + coeff0_8*dmats2[8][11] + coeff0_9*dmats2[9][11] + coeff0_10*dmats2[10][11] + coeff0_11*dmats2[11][11] + coeff0_12*dmats2[12][11] + coeff0_13*dmats2[13][11] + coeff0_14*dmats2[14][11] + coeff0_15*dmats2[15][11] + coeff0_16*dmats2[16][11] + coeff0_17*dmats2[17][11] + coeff0_18*dmats2[18][11] + coeff0_19*dmats2[19][11] + coeff0_20*dmats2[20][11] + coeff0_21*dmats2[21][11] + coeff0_22*dmats2[22][11] + coeff0_23*dmats2[23][11] + coeff0_24*dmats2[24][11] + coeff0_25*dmats2[25][11] + coeff0_26*dmats2[26][11] + coeff0_27*dmats2[27][11] + coeff0_28*dmats2[28][11] + coeff0_29*dmats2[29][11] + coeff0_30*dmats2[30][11] + coeff0_31*dmats2[31][11] + coeff0_32*dmats2[32][11] + coeff0_33*dmats2[33][11] + coeff0_34*dmats2[34][11];
          new_coeff0_12 = coeff0_0*dmats2[0][12] + coeff0_1*dmats2[1][12] + coeff0_2*dmats2[2][12] + coeff0_3*dmats2[3][12] + coeff0_4*dmats2[4][12] + coeff0_5*dmats2[5][12] + coeff0_6*dmats2[6][12] + coeff0_7*dmats2[7][12] + coeff0_8*dmats2[8][12] + coeff0_9*dmats2[9][12] + coeff0_10*dmats2[10][12] + coeff0_11*dmats2[11][12] + coeff0_12*dmats2[12][12] + coeff0_13*dmats2[13][12] + coeff0_14*dmats2[14][12] + coeff0_15*dmats2[15][12] + coeff0_16*dmats2[16][12] + coeff0_17*dmats2[17][12] + coeff0_18*dmats2[18][12] + coeff0_19*dmats2[19][12] + coeff0_20*dmats2[20][12] + coeff0_21*dmats2[21][12] + coeff0_22*dmats2[22][12] + coeff0_23*dmats2[23][12] + coeff0_24*dmats2[24][12] + coeff0_25*dmats2[25][12] + coeff0_26*dmats2[26][12] + coeff0_27*dmats2[27][12] + coeff0_28*dmats2[28][12] + coeff0_29*dmats2[29][12] + coeff0_30*dmats2[30][12] + coeff0_31*dmats2[31][12] + coeff0_32*dmats2[32][12] + coeff0_33*dmats2[33][12] + coeff0_34*dmats2[34][12];
          new_coeff0_13 = coeff0_0*dmats2[0][13] + coeff0_1*dmats2[1][13] + coeff0_2*dmats2[2][13] + coeff0_3*dmats2[3][13] + coeff0_4*dmats2[4][13] + coeff0_5*dmats2[5][13] + coeff0_6*dmats2[6][13] + coeff0_7*dmats2[7][13] + coeff0_8*dmats2[8][13] + coeff0_9*dmats2[9][13] + coeff0_10*dmats2[10][13] + coeff0_11*dmats2[11][13] + coeff0_12*dmats2[12][13] + coeff0_13*dmats2[13][13] + coeff0_14*dmats2[14][13] + coeff0_15*dmats2[15][13] + coeff0_16*dmats2[16][13] + coeff0_17*dmats2[17][13] + coeff0_18*dmats2[18][13] + coeff0_19*dmats2[19][13] + coeff0_20*dmats2[20][13] + coeff0_21*dmats2[21][13] + coeff0_22*dmats2[22][13] + coeff0_23*dmats2[23][13] + coeff0_24*dmats2[24][13] + coeff0_25*dmats2[25][13] + coeff0_26*dmats2[26][13] + coeff0_27*dmats2[27][13] + coeff0_28*dmats2[28][13] + coeff0_29*dmats2[29][13] + coeff0_30*dmats2[30][13] + coeff0_31*dmats2[31][13] + coeff0_32*dmats2[32][13] + coeff0_33*dmats2[33][13] + coeff0_34*dmats2[34][13];
          new_coeff0_14 = coeff0_0*dmats2[0][14] + coeff0_1*dmats2[1][14] + coeff0_2*dmats2[2][14] + coeff0_3*dmats2[3][14] + coeff0_4*dmats2[4][14] + coeff0_5*dmats2[5][14] + coeff0_6*dmats2[6][14] + coeff0_7*dmats2[7][14] + coeff0_8*dmats2[8][14] + coeff0_9*dmats2[9][14] + coeff0_10*dmats2[10][14] + coeff0_11*dmats2[11][14] + coeff0_12*dmats2[12][14] + coeff0_13*dmats2[13][14] + coeff0_14*dmats2[14][14] + coeff0_15*dmats2[15][14] + coeff0_16*dmats2[16][14] + coeff0_17*dmats2[17][14] + coeff0_18*dmats2[18][14] + coeff0_19*dmats2[19][14] + coeff0_20*dmats2[20][14] + coeff0_21*dmats2[21][14] + coeff0_22*dmats2[22][14] + coeff0_23*dmats2[23][14] + coeff0_24*dmats2[24][14] + coeff0_25*dmats2[25][14] + coeff0_26*dmats2[26][14] + coeff0_27*dmats2[27][14] + coeff0_28*dmats2[28][14] + coeff0_29*dmats2[29][14] + coeff0_30*dmats2[30][14] + coeff0_31*dmats2[31][14] + coeff0_32*dmats2[32][14] + coeff0_33*dmats2[33][14] + coeff0_34*dmats2[34][14];
          new_coeff0_15 = coeff0_0*dmats2[0][15] + coeff0_1*dmats2[1][15] + coeff0_2*dmats2[2][15] + coeff0_3*dmats2[3][15] + coeff0_4*dmats2[4][15] + coeff0_5*dmats2[5][15] + coeff0_6*dmats2[6][15] + coeff0_7*dmats2[7][15] + coeff0_8*dmats2[8][15] + coeff0_9*dmats2[9][15] + coeff0_10*dmats2[10][15] + coeff0_11*dmats2[11][15] + coeff0_12*dmats2[12][15] + coeff0_13*dmats2[13][15] + coeff0_14*dmats2[14][15] + coeff0_15*dmats2[15][15] + coeff0_16*dmats2[16][15] + coeff0_17*dmats2[17][15] + coeff0_18*dmats2[18][15] + coeff0_19*dmats2[19][15] + coeff0_20*dmats2[20][15] + coeff0_21*dmats2[21][15] + coeff0_22*dmats2[22][15] + coeff0_23*dmats2[23][15] + coeff0_24*dmats2[24][15] + coeff0_25*dmats2[25][15] + coeff0_26*dmats2[26][15] + coeff0_27*dmats2[27][15] + coeff0_28*dmats2[28][15] + coeff0_29*dmats2[29][15] + coeff0_30*dmats2[30][15] + coeff0_31*dmats2[31][15] + coeff0_32*dmats2[32][15] + coeff0_33*dmats2[33][15] + coeff0_34*dmats2[34][15];
          new_coeff0_16 = coeff0_0*dmats2[0][16] + coeff0_1*dmats2[1][16] + coeff0_2*dmats2[2][16] + coeff0_3*dmats2[3][16] + coeff0_4*dmats2[4][16] + coeff0_5*dmats2[5][16] + coeff0_6*dmats2[6][16] + coeff0_7*dmats2[7][16] + coeff0_8*dmats2[8][16] + coeff0_9*dmats2[9][16] + coeff0_10*dmats2[10][16] + coeff0_11*dmats2[11][16] + coeff0_12*dmats2[12][16] + coeff0_13*dmats2[13][16] + coeff0_14*dmats2[14][16] + coeff0_15*dmats2[15][16] + coeff0_16*dmats2[16][16] + coeff0_17*dmats2[17][16] + coeff0_18*dmats2[18][16] + coeff0_19*dmats2[19][16] + coeff0_20*dmats2[20][16] + coeff0_21*dmats2[21][16] + coeff0_22*dmats2[22][16] + coeff0_23*dmats2[23][16] + coeff0_24*dmats2[24][16] + coeff0_25*dmats2[25][16] + coeff0_26*dmats2[26][16] + coeff0_27*dmats2[27][16] + coeff0_28*dmats2[28][16] + coeff0_29*dmats2[29][16] + coeff0_30*dmats2[30][16] + coeff0_31*dmats2[31][16] + coeff0_32*dmats2[32][16] + coeff0_33*dmats2[33][16] + coeff0_34*dmats2[34][16];
          new_coeff0_17 = coeff0_0*dmats2[0][17] + coeff0_1*dmats2[1][17] + coeff0_2*dmats2[2][17] + coeff0_3*dmats2[3][17] + coeff0_4*dmats2[4][17] + coeff0_5*dmats2[5][17] + coeff0_6*dmats2[6][17] + coeff0_7*dmats2[7][17] + coeff0_8*dmats2[8][17] + coeff0_9*dmats2[9][17] + coeff0_10*dmats2[10][17] + coeff0_11*dmats2[11][17] + coeff0_12*dmats2[12][17] + coeff0_13*dmats2[13][17] + coeff0_14*dmats2[14][17] + coeff0_15*dmats2[15][17] + coeff0_16*dmats2[16][17] + coeff0_17*dmats2[17][17] + coeff0_18*dmats2[18][17] + coeff0_19*dmats2[19][17] + coeff0_20*dmats2[20][17] + coeff0_21*dmats2[21][17] + coeff0_22*dmats2[22][17] + coeff0_23*dmats2[23][17] + coeff0_24*dmats2[24][17] + coeff0_25*dmats2[25][17] + coeff0_26*dmats2[26][17] + coeff0_27*dmats2[27][17] + coeff0_28*dmats2[28][17] + coeff0_29*dmats2[29][17] + coeff0_30*dmats2[30][17] + coeff0_31*dmats2[31][17] + coeff0_32*dmats2[32][17] + coeff0_33*dmats2[33][17] + coeff0_34*dmats2[34][17];
          new_coeff0_18 = coeff0_0*dmats2[0][18] + coeff0_1*dmats2[1][18] + coeff0_2*dmats2[2][18] + coeff0_3*dmats2[3][18] + coeff0_4*dmats2[4][18] + coeff0_5*dmats2[5][18] + coeff0_6*dmats2[6][18] + coeff0_7*dmats2[7][18] + coeff0_8*dmats2[8][18] + coeff0_9*dmats2[9][18] + coeff0_10*dmats2[10][18] + coeff0_11*dmats2[11][18] + coeff0_12*dmats2[12][18] + coeff0_13*dmats2[13][18] + coeff0_14*dmats2[14][18] + coeff0_15*dmats2[15][18] + coeff0_16*dmats2[16][18] + coeff0_17*dmats2[17][18] + coeff0_18*dmats2[18][18] + coeff0_19*dmats2[19][18] + coeff0_20*dmats2[20][18] + coeff0_21*dmats2[21][18] + coeff0_22*dmats2[22][18] + coeff0_23*dmats2[23][18] + coeff0_24*dmats2[24][18] + coeff0_25*dmats2[25][18] + coeff0_26*dmats2[26][18] + coeff0_27*dmats2[27][18] + coeff0_28*dmats2[28][18] + coeff0_29*dmats2[29][18] + coeff0_30*dmats2[30][18] + coeff0_31*dmats2[31][18] + coeff0_32*dmats2[32][18] + coeff0_33*dmats2[33][18] + coeff0_34*dmats2[34][18];
          new_coeff0_19 = coeff0_0*dmats2[0][19] + coeff0_1*dmats2[1][19] + coeff0_2*dmats2[2][19] + coeff0_3*dmats2[3][19] + coeff0_4*dmats2[4][19] + coeff0_5*dmats2[5][19] + coeff0_6*dmats2[6][19] + coeff0_7*dmats2[7][19] + coeff0_8*dmats2[8][19] + coeff0_9*dmats2[9][19] + coeff0_10*dmats2[10][19] + coeff0_11*dmats2[11][19] + coeff0_12*dmats2[12][19] + coeff0_13*dmats2[13][19] + coeff0_14*dmats2[14][19] + coeff0_15*dmats2[15][19] + coeff0_16*dmats2[16][19] + coeff0_17*dmats2[17][19] + coeff0_18*dmats2[18][19] + coeff0_19*dmats2[19][19] + coeff0_20*dmats2[20][19] + coeff0_21*dmats2[21][19] + coeff0_22*dmats2[22][19] + coeff0_23*dmats2[23][19] + coeff0_24*dmats2[24][19] + coeff0_25*dmats2[25][19] + coeff0_26*dmats2[26][19] + coeff0_27*dmats2[27][19] + coeff0_28*dmats2[28][19] + coeff0_29*dmats2[29][19] + coeff0_30*dmats2[30][19] + coeff0_31*dmats2[31][19] + coeff0_32*dmats2[32][19] + coeff0_33*dmats2[33][19] + coeff0_34*dmats2[34][19];
          new_coeff0_20 = coeff0_0*dmats2[0][20] + coeff0_1*dmats2[1][20] + coeff0_2*dmats2[2][20] + coeff0_3*dmats2[3][20] + coeff0_4*dmats2[4][20] + coeff0_5*dmats2[5][20] + coeff0_6*dmats2[6][20] + coeff0_7*dmats2[7][20] + coeff0_8*dmats2[8][20] + coeff0_9*dmats2[9][20] + coeff0_10*dmats2[10][20] + coeff0_11*dmats2[11][20] + coeff0_12*dmats2[12][20] + coeff0_13*dmats2[13][20] + coeff0_14*dmats2[14][20] + coeff0_15*dmats2[15][20] + coeff0_16*dmats2[16][20] + coeff0_17*dmats2[17][20] + coeff0_18*dmats2[18][20] + coeff0_19*dmats2[19][20] + coeff0_20*dmats2[20][20] + coeff0_21*dmats2[21][20] + coeff0_22*dmats2[22][20] + coeff0_23*dmats2[23][20] + coeff0_24*dmats2[24][20] + coeff0_25*dmats2[25][20] + coeff0_26*dmats2[26][20] + coeff0_27*dmats2[27][20] + coeff0_28*dmats2[28][20] + coeff0_29*dmats2[29][20] + coeff0_30*dmats2[30][20] + coeff0_31*dmats2[31][20] + coeff0_32*dmats2[32][20] + coeff0_33*dmats2[33][20] + coeff0_34*dmats2[34][20];
          new_coeff0_21 = coeff0_0*dmats2[0][21] + coeff0_1*dmats2[1][21] + coeff0_2*dmats2[2][21] + coeff0_3*dmats2[3][21] + coeff0_4*dmats2[4][21] + coeff0_5*dmats2[5][21] + coeff0_6*dmats2[6][21] + coeff0_7*dmats2[7][21] + coeff0_8*dmats2[8][21] + coeff0_9*dmats2[9][21] + coeff0_10*dmats2[10][21] + coeff0_11*dmats2[11][21] + coeff0_12*dmats2[12][21] + coeff0_13*dmats2[13][21] + coeff0_14*dmats2[14][21] + coeff0_15*dmats2[15][21] + coeff0_16*dmats2[16][21] + coeff0_17*dmats2[17][21] + coeff0_18*dmats2[18][21] + coeff0_19*dmats2[19][21] + coeff0_20*dmats2[20][21] + coeff0_21*dmats2[21][21] + coeff0_22*dmats2[22][21] + coeff0_23*dmats2[23][21] + coeff0_24*dmats2[24][21] + coeff0_25*dmats2[25][21] + coeff0_26*dmats2[26][21] + coeff0_27*dmats2[27][21] + coeff0_28*dmats2[28][21] + coeff0_29*dmats2[29][21] + coeff0_30*dmats2[30][21] + coeff0_31*dmats2[31][21] + coeff0_32*dmats2[32][21] + coeff0_33*dmats2[33][21] + coeff0_34*dmats2[34][21];
          new_coeff0_22 = coeff0_0*dmats2[0][22] + coeff0_1*dmats2[1][22] + coeff0_2*dmats2[2][22] + coeff0_3*dmats2[3][22] + coeff0_4*dmats2[4][22] + coeff0_5*dmats2[5][22] + coeff0_6*dmats2[6][22] + coeff0_7*dmats2[7][22] + coeff0_8*dmats2[8][22] + coeff0_9*dmats2[9][22] + coeff0_10*dmats2[10][22] + coeff0_11*dmats2[11][22] + coeff0_12*dmats2[12][22] + coeff0_13*dmats2[13][22] + coeff0_14*dmats2[14][22] + coeff0_15*dmats2[15][22] + coeff0_16*dmats2[16][22] + coeff0_17*dmats2[17][22] + coeff0_18*dmats2[18][22] + coeff0_19*dmats2[19][22] + coeff0_20*dmats2[20][22] + coeff0_21*dmats2[21][22] + coeff0_22*dmats2[22][22] + coeff0_23*dmats2[23][22] + coeff0_24*dmats2[24][22] + coeff0_25*dmats2[25][22] + coeff0_26*dmats2[26][22] + coeff0_27*dmats2[27][22] + coeff0_28*dmats2[28][22] + coeff0_29*dmats2[29][22] + coeff0_30*dmats2[30][22] + coeff0_31*dmats2[31][22] + coeff0_32*dmats2[32][22] + coeff0_33*dmats2[33][22] + coeff0_34*dmats2[34][22];
          new_coeff0_23 = coeff0_0*dmats2[0][23] + coeff0_1*dmats2[1][23] + coeff0_2*dmats2[2][23] + coeff0_3*dmats2[3][23] + coeff0_4*dmats2[4][23] + coeff0_5*dmats2[5][23] + coeff0_6*dmats2[6][23] + coeff0_7*dmats2[7][23] + coeff0_8*dmats2[8][23] + coeff0_9*dmats2[9][23] + coeff0_10*dmats2[10][23] + coeff0_11*dmats2[11][23] + coeff0_12*dmats2[12][23] + coeff0_13*dmats2[13][23] + coeff0_14*dmats2[14][23] + coeff0_15*dmats2[15][23] + coeff0_16*dmats2[16][23] + coeff0_17*dmats2[17][23] + coeff0_18*dmats2[18][23] + coeff0_19*dmats2[19][23] + coeff0_20*dmats2[20][23] + coeff0_21*dmats2[21][23] + coeff0_22*dmats2[22][23] + coeff0_23*dmats2[23][23] + coeff0_24*dmats2[24][23] + coeff0_25*dmats2[25][23] + coeff0_26*dmats2[26][23] + coeff0_27*dmats2[27][23] + coeff0_28*dmats2[28][23] + coeff0_29*dmats2[29][23] + coeff0_30*dmats2[30][23] + coeff0_31*dmats2[31][23] + coeff0_32*dmats2[32][23] + coeff0_33*dmats2[33][23] + coeff0_34*dmats2[34][23];
          new_coeff0_24 = coeff0_0*dmats2[0][24] + coeff0_1*dmats2[1][24] + coeff0_2*dmats2[2][24] + coeff0_3*dmats2[3][24] + coeff0_4*dmats2[4][24] + coeff0_5*dmats2[5][24] + coeff0_6*dmats2[6][24] + coeff0_7*dmats2[7][24] + coeff0_8*dmats2[8][24] + coeff0_9*dmats2[9][24] + coeff0_10*dmats2[10][24] + coeff0_11*dmats2[11][24] + coeff0_12*dmats2[12][24] + coeff0_13*dmats2[13][24] + coeff0_14*dmats2[14][24] + coeff0_15*dmats2[15][24] + coeff0_16*dmats2[16][24] + coeff0_17*dmats2[17][24] + coeff0_18*dmats2[18][24] + coeff0_19*dmats2[19][24] + coeff0_20*dmats2[20][24] + coeff0_21*dmats2[21][24] + coeff0_22*dmats2[22][24] + coeff0_23*dmats2[23][24] + coeff0_24*dmats2[24][24] + coeff0_25*dmats2[25][24] + coeff0_26*dmats2[26][24] + coeff0_27*dmats2[27][24] + coeff0_28*dmats2[28][24] + coeff0_29*dmats2[29][24] + coeff0_30*dmats2[30][24] + coeff0_31*dmats2[31][24] + coeff0_32*dmats2[32][24] + coeff0_33*dmats2[33][24] + coeff0_34*dmats2[34][24];
          new_coeff0_25 = coeff0_0*dmats2[0][25] + coeff0_1*dmats2[1][25] + coeff0_2*dmats2[2][25] + coeff0_3*dmats2[3][25] + coeff0_4*dmats2[4][25] + coeff0_5*dmats2[5][25] + coeff0_6*dmats2[6][25] + coeff0_7*dmats2[7][25] + coeff0_8*dmats2[8][25] + coeff0_9*dmats2[9][25] + coeff0_10*dmats2[10][25] + coeff0_11*dmats2[11][25] + coeff0_12*dmats2[12][25] + coeff0_13*dmats2[13][25] + coeff0_14*dmats2[14][25] + coeff0_15*dmats2[15][25] + coeff0_16*dmats2[16][25] + coeff0_17*dmats2[17][25] + coeff0_18*dmats2[18][25] + coeff0_19*dmats2[19][25] + coeff0_20*dmats2[20][25] + coeff0_21*dmats2[21][25] + coeff0_22*dmats2[22][25] + coeff0_23*dmats2[23][25] + coeff0_24*dmats2[24][25] + coeff0_25*dmats2[25][25] + coeff0_26*dmats2[26][25] + coeff0_27*dmats2[27][25] + coeff0_28*dmats2[28][25] + coeff0_29*dmats2[29][25] + coeff0_30*dmats2[30][25] + coeff0_31*dmats2[31][25] + coeff0_32*dmats2[32][25] + coeff0_33*dmats2[33][25] + coeff0_34*dmats2[34][25];
          new_coeff0_26 = coeff0_0*dmats2[0][26] + coeff0_1*dmats2[1][26] + coeff0_2*dmats2[2][26] + coeff0_3*dmats2[3][26] + coeff0_4*dmats2[4][26] + coeff0_5*dmats2[5][26] + coeff0_6*dmats2[6][26] + coeff0_7*dmats2[7][26] + coeff0_8*dmats2[8][26] + coeff0_9*dmats2[9][26] + coeff0_10*dmats2[10][26] + coeff0_11*dmats2[11][26] + coeff0_12*dmats2[12][26] + coeff0_13*dmats2[13][26] + coeff0_14*dmats2[14][26] + coeff0_15*dmats2[15][26] + coeff0_16*dmats2[16][26] + coeff0_17*dmats2[17][26] + coeff0_18*dmats2[18][26] + coeff0_19*dmats2[19][26] + coeff0_20*dmats2[20][26] + coeff0_21*dmats2[21][26] + coeff0_22*dmats2[22][26] + coeff0_23*dmats2[23][26] + coeff0_24*dmats2[24][26] + coeff0_25*dmats2[25][26] + coeff0_26*dmats2[26][26] + coeff0_27*dmats2[27][26] + coeff0_28*dmats2[28][26] + coeff0_29*dmats2[29][26] + coeff0_30*dmats2[30][26] + coeff0_31*dmats2[31][26] + coeff0_32*dmats2[32][26] + coeff0_33*dmats2[33][26] + coeff0_34*dmats2[34][26];
          new_coeff0_27 = coeff0_0*dmats2[0][27] + coeff0_1*dmats2[1][27] + coeff0_2*dmats2[2][27] + coeff0_3*dmats2[3][27] + coeff0_4*dmats2[4][27] + coeff0_5*dmats2[5][27] + coeff0_6*dmats2[6][27] + coeff0_7*dmats2[7][27] + coeff0_8*dmats2[8][27] + coeff0_9*dmats2[9][27] + coeff0_10*dmats2[10][27] + coeff0_11*dmats2[11][27] + coeff0_12*dmats2[12][27] + coeff0_13*dmats2[13][27] + coeff0_14*dmats2[14][27] + coeff0_15*dmats2[15][27] + coeff0_16*dmats2[16][27] + coeff0_17*dmats2[17][27] + coeff0_18*dmats2[18][27] + coeff0_19*dmats2[19][27] + coeff0_20*dmats2[20][27] + coeff0_21*dmats2[21][27] + coeff0_22*dmats2[22][27] + coeff0_23*dmats2[23][27] + coeff0_24*dmats2[24][27] + coeff0_25*dmats2[25][27] + coeff0_26*dmats2[26][27] + coeff0_27*dmats2[27][27] + coeff0_28*dmats2[28][27] + coeff0_29*dmats2[29][27] + coeff0_30*dmats2[30][27] + coeff0_31*dmats2[31][27] + coeff0_32*dmats2[32][27] + coeff0_33*dmats2[33][27] + coeff0_34*dmats2[34][27];
          new_coeff0_28 = coeff0_0*dmats2[0][28] + coeff0_1*dmats2[1][28] + coeff0_2*dmats2[2][28] + coeff0_3*dmats2[3][28] + coeff0_4*dmats2[4][28] + coeff0_5*dmats2[5][28] + coeff0_6*dmats2[6][28] + coeff0_7*dmats2[7][28] + coeff0_8*dmats2[8][28] + coeff0_9*dmats2[9][28] + coeff0_10*dmats2[10][28] + coeff0_11*dmats2[11][28] + coeff0_12*dmats2[12][28] + coeff0_13*dmats2[13][28] + coeff0_14*dmats2[14][28] + coeff0_15*dmats2[15][28] + coeff0_16*dmats2[16][28] + coeff0_17*dmats2[17][28] + coeff0_18*dmats2[18][28] + coeff0_19*dmats2[19][28] + coeff0_20*dmats2[20][28] + coeff0_21*dmats2[21][28] + coeff0_22*dmats2[22][28] + coeff0_23*dmats2[23][28] + coeff0_24*dmats2[24][28] + coeff0_25*dmats2[25][28] + coeff0_26*dmats2[26][28] + coeff0_27*dmats2[27][28] + coeff0_28*dmats2[28][28] + coeff0_29*dmats2[29][28] + coeff0_30*dmats2[30][28] + coeff0_31*dmats2[31][28] + coeff0_32*dmats2[32][28] + coeff0_33*dmats2[33][28] + coeff0_34*dmats2[34][28];
          new_coeff0_29 = coeff0_0*dmats2[0][29] + coeff0_1*dmats2[1][29] + coeff0_2*dmats2[2][29] + coeff0_3*dmats2[3][29] + coeff0_4*dmats2[4][29] + coeff0_5*dmats2[5][29] + coeff0_6*dmats2[6][29] + coeff0_7*dmats2[7][29] + coeff0_8*dmats2[8][29] + coeff0_9*dmats2[9][29] + coeff0_10*dmats2[10][29] + coeff0_11*dmats2[11][29] + coeff0_12*dmats2[12][29] + coeff0_13*dmats2[13][29] + coeff0_14*dmats2[14][29] + coeff0_15*dmats2[15][29] + coeff0_16*dmats2[16][29] + coeff0_17*dmats2[17][29] + coeff0_18*dmats2[18][29] + coeff0_19*dmats2[19][29] + coeff0_20*dmats2[20][29] + coeff0_21*dmats2[21][29] + coeff0_22*dmats2[22][29] + coeff0_23*dmats2[23][29] + coeff0_24*dmats2[24][29] + coeff0_25*dmats2[25][29] + coeff0_26*dmats2[26][29] + coeff0_27*dmats2[27][29] + coeff0_28*dmats2[28][29] + coeff0_29*dmats2[29][29] + coeff0_30*dmats2[30][29] + coeff0_31*dmats2[31][29] + coeff0_32*dmats2[32][29] + coeff0_33*dmats2[33][29] + coeff0_34*dmats2[34][29];
          new_coeff0_30 = coeff0_0*dmats2[0][30] + coeff0_1*dmats2[1][30] + coeff0_2*dmats2[2][30] + coeff0_3*dmats2[3][30] + coeff0_4*dmats2[4][30] + coeff0_5*dmats2[5][30] + coeff0_6*dmats2[6][30] + coeff0_7*dmats2[7][30] + coeff0_8*dmats2[8][30] + coeff0_9*dmats2[9][30] + coeff0_10*dmats2[10][30] + coeff0_11*dmats2[11][30] + coeff0_12*dmats2[12][30] + coeff0_13*dmats2[13][30] + coeff0_14*dmats2[14][30] + coeff0_15*dmats2[15][30] + coeff0_16*dmats2[16][30] + coeff0_17*dmats2[17][30] + coeff0_18*dmats2[18][30] + coeff0_19*dmats2[19][30] + coeff0_20*dmats2[20][30] + coeff0_21*dmats2[21][30] + coeff0_22*dmats2[22][30] + coeff0_23*dmats2[23][30] + coeff0_24*dmats2[24][30] + coeff0_25*dmats2[25][30] + coeff0_26*dmats2[26][30] + coeff0_27*dmats2[27][30] + coeff0_28*dmats2[28][30] + coeff0_29*dmats2[29][30] + coeff0_30*dmats2[30][30] + coeff0_31*dmats2[31][30] + coeff0_32*dmats2[32][30] + coeff0_33*dmats2[33][30] + coeff0_34*dmats2[34][30];
          new_coeff0_31 = coeff0_0*dmats2[0][31] + coeff0_1*dmats2[1][31] + coeff0_2*dmats2[2][31] + coeff0_3*dmats2[3][31] + coeff0_4*dmats2[4][31] + coeff0_5*dmats2[5][31] + coeff0_6*dmats2[6][31] + coeff0_7*dmats2[7][31] + coeff0_8*dmats2[8][31] + coeff0_9*dmats2[9][31] + coeff0_10*dmats2[10][31] + coeff0_11*dmats2[11][31] + coeff0_12*dmats2[12][31] + coeff0_13*dmats2[13][31] + coeff0_14*dmats2[14][31] + coeff0_15*dmats2[15][31] + coeff0_16*dmats2[16][31] + coeff0_17*dmats2[17][31] + coeff0_18*dmats2[18][31] + coeff0_19*dmats2[19][31] + coeff0_20*dmats2[20][31] + coeff0_21*dmats2[21][31] + coeff0_22*dmats2[22][31] + coeff0_23*dmats2[23][31] + coeff0_24*dmats2[24][31] + coeff0_25*dmats2[25][31] + coeff0_26*dmats2[26][31] + coeff0_27*dmats2[27][31] + coeff0_28*dmats2[28][31] + coeff0_29*dmats2[29][31] + coeff0_30*dmats2[30][31] + coeff0_31*dmats2[31][31] + coeff0_32*dmats2[32][31] + coeff0_33*dmats2[33][31] + coeff0_34*dmats2[34][31];
          new_coeff0_32 = coeff0_0*dmats2[0][32] + coeff0_1*dmats2[1][32] + coeff0_2*dmats2[2][32] + coeff0_3*dmats2[3][32] + coeff0_4*dmats2[4][32] + coeff0_5*dmats2[5][32] + coeff0_6*dmats2[6][32] + coeff0_7*dmats2[7][32] + coeff0_8*dmats2[8][32] + coeff0_9*dmats2[9][32] + coeff0_10*dmats2[10][32] + coeff0_11*dmats2[11][32] + coeff0_12*dmats2[12][32] + coeff0_13*dmats2[13][32] + coeff0_14*dmats2[14][32] + coeff0_15*dmats2[15][32] + coeff0_16*dmats2[16][32] + coeff0_17*dmats2[17][32] + coeff0_18*dmats2[18][32] + coeff0_19*dmats2[19][32] + coeff0_20*dmats2[20][32] + coeff0_21*dmats2[21][32] + coeff0_22*dmats2[22][32] + coeff0_23*dmats2[23][32] + coeff0_24*dmats2[24][32] + coeff0_25*dmats2[25][32] + coeff0_26*dmats2[26][32] + coeff0_27*dmats2[27][32] + coeff0_28*dmats2[28][32] + coeff0_29*dmats2[29][32] + coeff0_30*dmats2[30][32] + coeff0_31*dmats2[31][32] + coeff0_32*dmats2[32][32] + coeff0_33*dmats2[33][32] + coeff0_34*dmats2[34][32];
          new_coeff0_33 = coeff0_0*dmats2[0][33] + coeff0_1*dmats2[1][33] + coeff0_2*dmats2[2][33] + coeff0_3*dmats2[3][33] + coeff0_4*dmats2[4][33] + coeff0_5*dmats2[5][33] + coeff0_6*dmats2[6][33] + coeff0_7*dmats2[7][33] + coeff0_8*dmats2[8][33] + coeff0_9*dmats2[9][33] + coeff0_10*dmats2[10][33] + coeff0_11*dmats2[11][33] + coeff0_12*dmats2[12][33] + coeff0_13*dmats2[13][33] + coeff0_14*dmats2[14][33] + coeff0_15*dmats2[15][33] + coeff0_16*dmats2[16][33] + coeff0_17*dmats2[17][33] + coeff0_18*dmats2[18][33] + coeff0_19*dmats2[19][33] + coeff0_20*dmats2[20][33] + coeff0_21*dmats2[21][33] + coeff0_22*dmats2[22][33] + coeff0_23*dmats2[23][33] + coeff0_24*dmats2[24][33] + coeff0_25*dmats2[25][33] + coeff0_26*dmats2[26][33] + coeff0_27*dmats2[27][33] + coeff0_28*dmats2[28][33] + coeff0_29*dmats2[29][33] + coeff0_30*dmats2[30][33] + coeff0_31*dmats2[31][33] + coeff0_32*dmats2[32][33] + coeff0_33*dmats2[33][33] + coeff0_34*dmats2[34][33];
          new_coeff0_34 = coeff0_0*dmats2[0][34] + coeff0_1*dmats2[1][34] + coeff0_2*dmats2[2][34] + coeff0_3*dmats2[3][34] + coeff0_4*dmats2[4][34] + coeff0_5*dmats2[5][34] + coeff0_6*dmats2[6][34] + coeff0_7*dmats2[7][34] + coeff0_8*dmats2[8][34] + coeff0_9*dmats2[9][34] + coeff0_10*dmats2[10][34] + coeff0_11*dmats2[11][34] + coeff0_12*dmats2[12][34] + coeff0_13*dmats2[13][34] + coeff0_14*dmats2[14][34] + coeff0_15*dmats2[15][34] + coeff0_16*dmats2[16][34] + coeff0_17*dmats2[17][34] + coeff0_18*dmats2[18][34] + coeff0_19*dmats2[19][34] + coeff0_20*dmats2[20][34] + coeff0_21*dmats2[21][34] + coeff0_22*dmats2[22][34] + coeff0_23*dmats2[23][34] + coeff0_24*dmats2[24][34] + coeff0_25*dmats2[25][34] + coeff0_26*dmats2[26][34] + coeff0_27*dmats2[27][34] + coeff0_28*dmats2[28][34] + coeff0_29*dmats2[29][34] + coeff0_30*dmats2[30][34] + coeff0_31*dmats2[31][34] + coeff0_32*dmats2[32][34] + coeff0_33*dmats2[33][34] + coeff0_34*dmats2[34][34];
        }
    
      }
      // Compute derivatives on reference element as dot product of coefficients and basisvalues
      derivatives[deriv_num] = new_coeff0_0*basisvalue0 + new_coeff0_1*basisvalue1 + new_coeff0_2*basisvalue2 + new_coeff0_3*basisvalue3 + new_coeff0_4*basisvalue4 + new_coeff0_5*basisvalue5 + new_coeff0_6*basisvalue6 + new_coeff0_7*basisvalue7 + new_coeff0_8*basisvalue8 + new_coeff0_9*basisvalue9 + new_coeff0_10*basisvalue10 + new_coeff0_11*basisvalue11 + new_coeff0_12*basisvalue12 + new_coeff0_13*basisvalue13 + new_coeff0_14*basisvalue14 + new_coeff0_15*basisvalue15 + new_coeff0_16*basisvalue16 + new_coeff0_17*basisvalue17 + new_coeff0_18*basisvalue18 + new_coeff0_19*basisvalue19 + new_coeff0_20*basisvalue20 + new_coeff0_21*basisvalue21 + new_coeff0_22*basisvalue22 + new_coeff0_23*basisvalue23 + new_coeff0_24*basisvalue24 + new_coeff0_25*basisvalue25 + new_coeff0_26*basisvalue26 + new_coeff0_27*basisvalue27 + new_coeff0_28*basisvalue28 + new_coeff0_29*basisvalue29 + new_coeff0_30*basisvalue30 + new_coeff0_31*basisvalue31 + new_coeff0_32*basisvalue32 + new_coeff0_33*basisvalue33 + new_coeff0_34*basisvalue34;
    }
    
    // Transform derivatives back to physical element
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        values[row] += transform[row][col]*derivatives[col];
      }
    }
    // Delete pointer to array of derivatives on FIAT element
    delete [] derivatives;
    
    // Delete pointer to array of combinations of derivatives and transform
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      delete [] combinations[row];
      delete [] transform[row];
    }
    
    delete [] combinations;
    delete [] transform;
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis_derivatives() is not yet implemented.");
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // The reference points, direction and weights:
    const static double X[35][1][3] = {{{0, 0, 0}}, {{1, 0, 0}}, {{0, 1, 0}}, {{0, 0, 1}}, {{0, 0.75, 0.25}}, {{0, 0.5, 0.5}}, {{0, 0.25, 0.75}}, {{0.75, 0, 0.25}}, {{0.5, 0, 0.5}}, {{0.25, 0, 0.75}}, {{0.75, 0.25, 0}}, {{0.5, 0.5, 0}}, {{0.25, 0.75, 0}}, {{0, 0, 0.25}}, {{0, 0, 0.5}}, {{0, 0, 0.75}}, {{0, 0.25, 0}}, {{0, 0.5, 0}}, {{0, 0.75, 0}}, {{0.25, 0, 0}}, {{0.5, 0, 0}}, {{0.75, 0, 0}}, {{0.5, 0.25, 0.25}}, {{0.25, 0.5, 0.25}}, {{0.25, 0.25, 0.5}}, {{0, 0.25, 0.25}}, {{0, 0.5, 0.25}}, {{0, 0.25, 0.5}}, {{0.25, 0, 0.25}}, {{0.5, 0, 0.25}}, {{0.25, 0, 0.5}}, {{0.25, 0.25, 0}}, {{0.5, 0.25, 0}}, {{0.25, 0.5, 0}}, {{0.25, 0.25, 0.25}}};
    const static double W[35][1] = {{1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}};
    const static double D[35][1][1] = {{{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}};
    
    const double * const * x = c.coordinates;
    double result = 0.0;
    // Iterate over the points:
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0][0] - X[i][0][1] - X[i][0][2];
    const double w1 = X[i][0][0];
    const double w2 = X[i][0][1];
    const double w3 = X[i][0][2];
    
    // Compute affine mapping y = F(X)
    double y[3];
    y[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0] + w3*x[3][0];
    y[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1] + w3*x[3][1];
    y[2] = w0*x[0][2] + w1*x[1][2] + w2*x[2][2] + w3*x[3][2];
    
    // Evaluate function at physical points
    double values[1];
    f.evaluate(values, y, c);
    
    // Map function values using appropriate mapping
    // Affine map: Do nothing
    
    // Note that we do not map the weights (yet).
    
    // Take directional components
    for(int k = 0; k < 1; k++)
      result += values[k]*D[i][0][k];
    // Multiply by weights 
    result *= W[i][0];
    
    return result;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate at vertices and use affine mapping
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new UFC_Poisson3D_4BilinearForm_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class UFC_Poisson3D_4BilinearForm_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  UFC_Poisson3D_4BilinearForm_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson3D_4BilinearForm_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', 'tetrahedron', 4)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 35;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_02 = element_coordinates[3][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
    const double J_12 = element_coordinates[3][1] - element_coordinates[0][1];
    const double J_20 = element_coordinates[1][2] - element_coordinates[0][2];
    const double J_21 = element_coordinates[2][2] - element_coordinates[0][2];
    const double J_22 = element_coordinates[3][2] - element_coordinates[0][2];
      
    // Compute sub determinants
    const double d00 = J_11*J_22 - J_12*J_21;
    const double d01 = J_12*J_20 - J_10*J_22;
    const double d02 = J_10*J_21 - J_11*J_20;
    
    const double d10 = J_02*J_21 - J_01*J_22;
    const double d11 = J_00*J_22 - J_02*J_20;
    const double d12 = J_01*J_20 - J_00*J_21;
    
    const double d20 = J_01*J_12 - J_02*J_11;
    const double d21 = J_02*J_10 - J_00*J_12;
    const double d22 = J_00*J_11 - J_01*J_10;
      
    // Compute determinant of Jacobian
    double detJ = J_00*d00 + J_10*d10 + J_20*d20;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = d00*(element_coordinates[0][0] - element_coordinates[2][0] - element_coordinates[3][0]) \
                    + d10*(element_coordinates[0][1] - element_coordinates[2][1] - element_coordinates[3][1]) \
                    + d20*(element_coordinates[0][2] - element_coordinates[2][2] - element_coordinates[3][2]);
    
    const double C1 = d01*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[3][0]) \
                    + d11*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[3][1]) \
                    + d21*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[3][2]);
    
    const double C2 = d02*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[2][0]) \
                    + d12*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[2][1]) \
                    + d22*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[2][2]);
    
    // Get coordinates and map to the UFC reference element
    double x = (C0 + d00*coordinates[0] + d10*coordinates[1] + d20*coordinates[2]) / detJ;
    double y = (C1 + d01*coordinates[0] + d11*coordinates[1] + d21*coordinates[2]) / detJ;
    double z = (C2 + d02*coordinates[0] + d12*coordinates[1] + d22*coordinates[2]) / detJ;
    
    // Map coordinates to the reference cube
    if (std::abs(y + z - 1.0) < 1e-14)
      x = 1.0;
    else
      x = -2.0 * x/(y + z - 1.0) - 1.0;
    if (std::abs(z - 1.0) < 1e-14)
      y = -1.0;
    else
      y = 2.0 * y/(1.0 - z) - 1.0;
    z = 2.0 * z - 1.0;
    
    // Reset values
    *values = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    const double scalings_y_4 = scalings_y_3*(0.5 - 0.5*y);
    const double scalings_z_0 = 1;
    const double scalings_z_1 = scalings_z_0*(0.5 - 0.5*z);
    const double scalings_z_2 = scalings_z_1*(0.5 - 0.5*z);
    const double scalings_z_3 = scalings_z_2*(0.5 - 0.5*z);
    const double scalings_z_4 = scalings_z_3*(0.5 - 0.5*z);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    const double psitilde_a_4 = 1.75*x*psitilde_a_3 - 0.75*psitilde_a_2;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_0_4 = 0.0285714285714286*psitilde_bs_0_3 + 1.8*y*psitilde_bs_0_3 - 0.771428571428571*psitilde_bs_0_2;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_1_3 = 0.285714285714286*psitilde_bs_1_2 + 2*y*psitilde_bs_1_2 - 0.714285714285714*psitilde_bs_1_1;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_2_2 = 1.02040816326531*psitilde_bs_2_1 + 2.57142857142857*y*psitilde_bs_2_1 - 0.551020408163265*psitilde_bs_2_0;
    const double psitilde_bs_3_0 = 1;
    const double psitilde_bs_3_1 = 4.5*y + 3.5;
    const double psitilde_bs_4_0 = 1;
    
    // Compute psitilde_cs
    const double psitilde_cs_00_0 = 1;
    const double psitilde_cs_00_1 = 2*z + 1;
    const double psitilde_cs_00_2 = 0.3125*psitilde_cs_00_1 + 1.875*z*psitilde_cs_00_1 - 0.5625*psitilde_cs_00_0;
    const double psitilde_cs_00_3 = 0.155555555555556*psitilde_cs_00_2 + 1.86666666666667*z*psitilde_cs_00_2 - 0.711111111111111*psitilde_cs_00_1;
    const double psitilde_cs_00_4 = 0.09375*psitilde_cs_00_3 + 1.875*z*psitilde_cs_00_3 - 0.78125*psitilde_cs_00_2;
    const double psitilde_cs_01_0 = 1;
    const double psitilde_cs_01_1 = 3*z + 2;
    const double psitilde_cs_01_2 = 0.777777777777778*psitilde_cs_01_1 + 2.33333333333333*z*psitilde_cs_01_1 - 0.555555555555556*psitilde_cs_01_0;
    const double psitilde_cs_01_3 = 0.428571428571429*psitilde_cs_01_2 + 2.14285714285714*z*psitilde_cs_01_2 - 0.714285714285714*psitilde_cs_01_1;
    const double psitilde_cs_02_0 = 1;
    const double psitilde_cs_02_1 = 4*z + 3;
    const double psitilde_cs_02_2 = 1.265625*psitilde_cs_02_1 + 2.8125*z*psitilde_cs_02_1 - 0.546875*psitilde_cs_02_0;
    const double psitilde_cs_03_0 = 1;
    const double psitilde_cs_03_1 = 5*z + 4;
    const double psitilde_cs_04_0 = 1;
    const double psitilde_cs_10_0 = 1;
    const double psitilde_cs_10_1 = 3*z + 2;
    const double psitilde_cs_10_2 = 0.777777777777778*psitilde_cs_10_1 + 2.33333333333333*z*psitilde_cs_10_1 - 0.555555555555556*psitilde_cs_10_0;
    const double psitilde_cs_10_3 = 0.428571428571429*psitilde_cs_10_2 + 2.14285714285714*z*psitilde_cs_10_2 - 0.714285714285714*psitilde_cs_10_1;
    const double psitilde_cs_11_0 = 1;
    const double psitilde_cs_11_1 = 4*z + 3;
    const double psitilde_cs_11_2 = 1.265625*psitilde_cs_11_1 + 2.8125*z*psitilde_cs_11_1 - 0.546875*psitilde_cs_11_0;
    const double psitilde_cs_12_0 = 1;
    const double psitilde_cs_12_1 = 5*z + 4;
    const double psitilde_cs_13_0 = 1;
    const double psitilde_cs_20_0 = 1;
    const double psitilde_cs_20_1 = 4*z + 3;
    const double psitilde_cs_20_2 = 1.265625*psitilde_cs_20_1 + 2.8125*z*psitilde_cs_20_1 - 0.546875*psitilde_cs_20_0;
    const double psitilde_cs_21_0 = 1;
    const double psitilde_cs_21_1 = 5*z + 4;
    const double psitilde_cs_22_0 = 1;
    const double psitilde_cs_30_0 = 1;
    const double psitilde_cs_30_1 = 5*z + 4;
    const double psitilde_cs_31_0 = 1;
    const double psitilde_cs_40_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.866025403784439*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_0;
    const double basisvalue1 = 2.73861278752583*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_0;
    const double basisvalue2 = 1.58113883008419*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_0;
    const double basisvalue3 = 1.11803398874989*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_1;
    const double basisvalue4 = 5.1234753829798*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_0;
    const double basisvalue5 = 3.96862696659689*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_0;
    const double basisvalue6 = 2.29128784747792*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_0;
    const double basisvalue7 = 3.24037034920393*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_1;
    const double basisvalue8 = 1.87082869338697*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_1;
    const double basisvalue9 = 1.3228756555323*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_2;
    const double basisvalue10 = 7.93725393319377*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_0;
    const double basisvalue11 = 6.70820393249937*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_0;
    const double basisvalue12 = 5.19615242270663*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_0;
    const double basisvalue13 = 3*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_0;
    const double basisvalue14 = 5.80947501931113*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_1;
    const double basisvalue15 = 4.5*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_1;
    const double basisvalue16 = 2.59807621135332*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_1;
    const double basisvalue17 = 3.67423461417477*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_2;
    const double basisvalue18 = 2.12132034355964*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_2;
    const double basisvalue19 = 1.5*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_3;
    const double basisvalue20 = 11.1242977306435*psitilde_a_4*scalings_y_4*psitilde_bs_4_0*scalings_z_4*psitilde_cs_40_0;
    const double basisvalue21 = 9.81070843517429*psitilde_a_3*scalings_y_3*psitilde_bs_3_1*scalings_z_4*psitilde_cs_31_0;
    const double basisvalue22 = 8.2915619758885*psitilde_a_2*scalings_y_2*psitilde_bs_2_2*scalings_z_4*psitilde_cs_22_0;
    const double basisvalue23 = 6.42261628933256*psitilde_a_1*scalings_y_1*psitilde_bs_1_3*scalings_z_4*psitilde_cs_13_0;
    const double basisvalue24 = 3.70809924354783*psitilde_a_0*scalings_y_0*psitilde_bs_0_4*scalings_z_4*psitilde_cs_04_0;
    const double basisvalue25 = 8.77496438739212*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_1;
    const double basisvalue26 = 7.41619848709566*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_1;
    const double basisvalue27 = 5.74456264653803*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_1;
    const double basisvalue28 = 3.3166247903554*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_1;
    const double basisvalue29 = 6.42261628933256*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_2;
    const double basisvalue30 = 4.9749371855331*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_2;
    const double basisvalue31 = 2.87228132326901*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_2;
    const double basisvalue32 = 4.06201920231798*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_3;
    const double basisvalue33 = 2.34520787991171*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_3;
    const double basisvalue34 = 1.6583123951777*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_4;
    
    // Table(s) of coefficients
    const static double coefficients0[35][35] = \
    {{-0.0137464349807053, -0.014490014748814, -0.00836581391578937, -0.00591552374999943, 0, 0, 0, 0, 0, 0, -0.00671936840905292, -0.00567890279999946, -0.00439885919382571, -0.00253968253968253, -0.00491807409042212, -0.00380952380952381, -0.00219942959691287, -0.00311046316543895, -0.0017958267458706, -0.00126984126984128, 0.0136980289516341, 0.0120805260192622, 0.010209907964538, 0.00790856070259325, 0.00456600965054471, 0.0108051509532101, 0.00913201930108942, 0.0070736317340728, 0.00408396318581522, 0.00790856070259325, 0.00612594477872282, 0.0035368158670364, 0.00500181296677923, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807054, 0.0144900147488139, -0.00836581391578936, -0.00591552374999944, 0, 0, 0, 0, 0, 0, 0.00671936840905292, -0.00567890279999947, 0.00439885919382572, -0.00253968253968254, -0.00491807409042212, 0.00380952380952381, -0.00219942959691286, 0.00311046316543896, -0.0017958267458706, -0.00126984126984127, 0.0136980289516341, -0.0120805260192622, 0.010209907964538, -0.00790856070259325, 0.00456600965054471, -0.0108051509532101, 0.00913201930108942, -0.0070736317340728, 0.00408396318581521, 0.00790856070259325, -0.00612594477872282, 0.0035368158670364, -0.00500181296677923, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807054, 0, 0.0167316278315787, -0.00591552374999945, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0101587301587302, 0, 0, -0.00659828879073858, 0, 0.0035916534917412, -0.00126984126984127, 0, 0, 0, 0, 0.0228300482527235, 0, 0, 0, -0.0163358527432608, 0, 0, 0.0106104476011092, 0, -0.00577559612561231, 0.00204198159290761},
    {-0.0137464349807054, 0, 0, 0.0177465712499983, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0126984126984127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0306297238936141},
    {0.0439885919382572, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0, 0.0406349206349206, 0, 0, 0.00439885919382573, 0, -0.0143666139669648, 0.00761904761904762, 0, 0, 0, 0, 0, 0, 0, 0, 0.0367556686723369, 0, 0, -0.0424417904044368, 0, 0.0303218796594646, -0.0122518895574456},
    {-0.0329914439536929, 0, -0.0200779533978945, -0.0141972569999987, 0, 0, -0.00969857289937746, 0, 0.0712696645099798, -0.050395263067897, 0, 0, 0, 0, 0, 0, 0.0461880215351701, 0, 0.0107749604752236, -0.019047619047619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0495154221385096, 0, -0.0606437593189292, 0.0306297238936141},
    {0.0439885919382573, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0, 0.0359165349174119, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0505364660991077, -0.0408396318581521},
    {0.0439885919382571, 0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0.0433733365754904, -0.0335968420452646, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, -0.0227156111999978, 0.0175954367753029, -0.0101587301587302, 0.00327871606028142, -0.00253968253968253, 0.00146628639794192, -0.0124418526617558, 0.00718330698348241, 0.00761904761904763, 0, 0, 0, 0, 0, 0.0243115896447228, -0.0205470434274512, 0.0159156714016638, -0.00918891716808422, -0.031634242810373, 0.0245037791148913, -0.0141472634681456, 0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, -0.0173880176985767, 0.0100389766989472, -0.0141972569999987, -0.00722888942924838, 0.00559947367421077, -0.00323285763312583, 0.0617213399848368, -0.0356348322549899, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, -0.0266666666666667, 0.01539600717839, 0.00933138949631688, -0.00538748023761179, -0.019047619047619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, -0.0285877423007065, 0.0165051407128366, -0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382572, 0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0.0311046316543896, -0.017958267458706, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, -0.0335968420452646, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, 0, -0.0117302911835352, 0.0101587301587302, -0.0229510124219699, 0.00761904761904762, -0.0014662863979419, 0.0165891368823411, -0.00718330698348239, -0.00761904761904762, 0, 0.0241610520385245, -0.0357346778758831, 0.0355885231616696, -0.0228300482527235, -0.00270128773830253, -0.0114150241263618, 0.0159156714016638, -0.0112308987609918, 0.00395428035129663, 0.00306297238936141, -0.0035368158670364, -0.00375135972508442, 0.00072194951570154, 0.00204198159290761},
    {-0.0329914439536929, -0.0173880176985767, -0.0100389766989473, 0.0141972569999987, -0.00722888942924838, 0.0615942104163185, -0.0614242950293905, -0.00685792666498186, -0.00395942580611002, 0.00559947367421077, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.0049180740904221, -0.0266666666666667, 0.0175954367753029, 0.00933138949631686, 0.00538748023761182, -0.00761904761904761, 0, 0, 0.0357346778758831, -0.0593142052694494, 0.0456600965054471, 0, -0.0091320193010894, 0, 0.00408396318581524, 0.0013180934504322, 0.00714693557517662, -0.00471575448938186, -0.00250090648338961, -0.00144389903140308, 0.0020419815929076},
    {0.0439885919382573, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484215, 0, 0, 0.0293257279588381, 0.0101587301587301, 0, -0.0101587301587302, -0.0219942959691286, 0.00207364211029264, 0.017958267458706, -0.00761904761904762, 0, 0, 0, 0.0395428035129662, -0.0456600965054471, 0, 0, -0.017684079335182, 0.0142938711503532, 0, 0.00612594477872282, 0, -0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.0439885919382572, -0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0.0433733365754904, 0.0335968420452647, 0.0193971457987549, 0.0274317066599275, 0.01583770322444, 0.0111989473484215, -0.0268774736362117, -0.0227156111999979, -0.0175954367753029, -0.0101587301587302, 0.00327871606028141, 0.00253968253968254, 0.00146628639794191, 0.0124418526617558, 0.00718330698348239, 0.00761904761904762, 0, 0, 0, 0, 0, -0.0243115896447228, -0.0205470434274512, -0.0159156714016638, -0.00918891716808422, -0.031634242810373, -0.0245037791148913, -0.0141472634681456, -0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.032991443953693, 0.0173880176985767, 0.0100389766989472, -0.0141972569999986, -0.0072288894292484, -0.00559947367421079, -0.00323285763312582, -0.0617213399848368, -0.0356348322549899, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, 0.0266666666666667, 0.01539600717839, -0.00933138949631686, -0.00538748023761177, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, 0.0285877423007065, 0.0165051407128365, 0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382572, -0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, -0.0311046316543895, -0.017958267458706, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484215, -0.0268774736362117, 0, 0.0117302911835353, 0.0101587301587301, -0.0229510124219699, -0.00761904761904762, -0.0014662863979419, -0.0165891368823411, -0.0071833069834824, -0.00761904761904762, 0, -0.0241610520385245, -0.0357346778758831, -0.0355885231616696, -0.0228300482527235, 0.00270128773830253, -0.0114150241263618, -0.0159156714016638, -0.0112308987609918, 0.00395428035129663, -0.00306297238936141, -0.0035368158670364, 0.00375135972508443, 0.000721949515701543, 0.00204198159290761},
    {-0.0329914439536929, 0.0173880176985767, -0.0100389766989473, 0.0141972569999986, -0.00722888942924838, -0.0615942104163185, -0.0614242950293904, 0.00685792666498186, -0.00395942580611, 0.00559947367421079, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042211, 0.0266666666666667, 0.0175954367753029, -0.00933138949631687, 0.0053874802376118, -0.00761904761904762, 0, 0, 0.0357346778758831, 0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108941, 0, 0.00408396318581522, 0.0013180934504322, -0.00714693557517662, -0.00471575448938187, 0.00250090648338962, -0.00144389903140308, 0.00204198159290761},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484215, 0, 0, -0.0293257279588381, 0.0101587301587301, 0, 0.0101587301587302, -0.0219942959691286, -0.00207364211029263, 0.017958267458706, -0.00761904761904762, 0, 0, 0, -0.0395428035129662, -0.0456600965054471, 0, 0, 0.017684079335182, 0.0142938711503532, 0, -0.00612594477872281, 0, 0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.0439885919382572, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484215, 0.0134387368181059, -0.0113578055999989, -0.0205280095711867, -0.0152380952380952, -0.00983614818084423, -0.0177777777777778, -0.0131965775814772, -0.0145154947720485, -0.0107749604752236, -0.0076190476190476, -0.0547921158065365, -0.0241610520385245, -0.00510495398226901, 0.00395428035129662, 0.00456600965054471, -0.0216103019064202, -0.00456600965054471, 0.0035368158670364, 0.00408396318581521, -0.00395428035129662, 0.00306297238936141, 0.0035368158670364, 0.00250090648338962, 0.00288779806280615, 0.0020419815929076},
    {-0.0329914439536929, 0, 0.0200779533978945, 0.0141972569999987, -0.0867466731509807, 0, 0.00969857289937746, 0, 0.00791885161221999, 0.00559947367421079, 0, 0.0340734167999968, 0, -0.0152380952380953, 0.0295084445425327, 0, -0.0131965775814772, 0, -0.0107749604752236, -0.00761904761904764, 0.0821881737098047, 0, -0.010209907964538, 0, 0.0045660096505447, 0, -0.00913201930108942, 0, 0.0040839631858152, -0.00790856070259325, 0, 0.00353681586703639, 0, 0.00288779806280615, 0.00204198159290761},
    {0.0439885919382572, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754903, -0.0335968420452646, 0.0193971457987549, -0.0274317066599274, 0.01583770322444, 0.0111989473484215, -0.0134387368181059, -0.0113578055999989, 0.0205280095711867, -0.0152380952380952, -0.00983614818084423, 0.0177777777777778, -0.0131965775814772, 0.0145154947720485, -0.0107749604752236, -0.00761904761904761, -0.0547921158065365, 0.0241610520385245, -0.00510495398226901, -0.00395428035129662, 0.00456600965054471, 0.0216103019064202, -0.00456600965054471, -0.0035368158670364, 0.00408396318581521, -0.00395428035129662, -0.00306297238936141, 0.00353681586703641, -0.00250090648338962, 0.00288779806280615, 0.0020419815929076},
    {0.0439885919382569, 0.139104141588614, -0.0803118135915779, -0.0567890279999946, 0.0578311154339871, 0.0335968420452646, -0.0420271492306355, 0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, -0.0586514559176762, 0.0406349206349206, 0.0393445927233769, 0.00253968253968254, -0.0109971479845643, -0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, -0.053052238005546, 0.0367556686723369, -0.0105447476034577, -0.0245037791148913, 0.0235787724469093, 0.0175063453837273, 0, -0.0122518895574456},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0, 0.0783926314389509, 0.00969857289937743, -0.0274317066599274, 0.0475131096733199, -0.0167984210226323, 0, 0, 0.0586514559176763, -0.060952380952381, 0, 0.033015873015873, 0.0241937255660415, -0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, 0.053052238005546, -0.0551335030085054, 0, -0.0326717054865217, 0.0141472634681456, 0.00875317269186366, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0, -0.0111989473484216, 0.00969857289937743, 0.0822951199797824, 0.0475131096733199, -0.0167984210226323, 0, 0, 0, 0, 0, 0.0533333333333333, -0.0461880215351701, 0.0435464843161454, 0.0251415744421884, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.057175484601413, -0.0495154221385096, -0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382572, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, 0.0578311154339871, -0.0335968420452646, -0.0420271492306356, -0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, 0.0586514559176763, 0.0406349206349206, 0.0393445927233769, -0.00253968253968253, -0.0109971479845643, 0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, 0.053052238005546, 0.0367556686723369, -0.0105447476034577, 0.0245037791148913, 0.0235787724469093, -0.0175063453837273, 0, -0.0122518895574456},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0, -0.0783926314389508, 0.00969857289937744, 0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, -0.0586514559176763, -0.060952380952381, 0, -0.033015873015873, 0.0241937255660415, 0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, -0.053052238005546, -0.0551335030085054, 0, 0.0326717054865217, 0.0141472634681456, -0.00875317269186367, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382573, 0, 0, 0.170367083999984, 0, 0.0111989473484216, 0.00969857289937742, -0.0822951199797824, 0.0475131096733199, -0.0167984210226324, 0, 0, 0, 0, 0, -0.0533333333333333, -0.0461880215351701, -0.0435464843161454, 0.0251415744421884, -0.0825396825396825, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.057175484601413, -0.0495154221385096, 0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382572, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754904, 0.0447957893936862, 0.0484928644968872, -0.0548634133198549, 0, -0.0167984210226323, 0.0806324209086351, 0.0227156111999978, -0.00586514559176761, -0.0101587301587302, -0.00327871606028142, 0.0304761904761905, 0.0271262983619253, 0.045620126426438, 0.0430998419008943, 0.0393650793650793, 0, 0, 0, 0, 0, 0.0729347689341683, 0.0205470434274512, -0.0053052238005546, -0.00918891716808421, 0.031634242810373, -0.00816792637163041, -0.0141472634681456, -0.00875317269186367, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754904, -0.0447957893936862, 0.0484928644968872, 0.0548634133198549, 0, -0.0167984210226323, -0.0806324209086352, 0.0227156111999978, 0.0058651455917676, -0.0101587301587302, -0.00327871606028142, -0.0304761904761905, 0.0271262983619253, -0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, -0.0729347689341683, 0.0205470434274512, 0.00530522380055459, -0.00918891716808422, 0.031634242810373, 0.00816792637163041, -0.0141472634681456, 0.00875317269186366, -0.0151609398297323, -0.0122518895574456},
    {0.043988591938257, 0, 0, 0.170367083999984, 0.0144577788584968, 0, -0.00323285763312582, 0, -0.0950262193466398, -0.0167984210226323, 0, 0, 0, 0, -0.0688530372659096, 0, 0.01539600717839, 0, -0.0502831488843767, -0.0825396825396825, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0738132332242037, 0, 0.0165051407128365, 0, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382574, -0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754904, -0.0447957893936862, -0.00969857289937744, 0.0548634133198549, 0.0316754064488799, 0.0391963157194754, 0.0806324209086352, 0, 0.0527863103259087, 0.060952380952381, 0.0229510124219699, 0.0101587301587302, 0.0168622935763319, -0.0124418526617558, -0.00718330698348237, -0.013968253968254, 0, 0.0724831561155734, 0.0357346778758831, -0.0118628410538899, -0.0228300482527235, -0.00810386321490759, 0.0114150241263618, -0.0053052238005546, -0.0112308987609918, -0.00395428035129662, -0.0010209907964538, -0.0035368158670364, 0.00125045324169481, 0.000721949515701528, 0.0020419815929076},
    {0.0439885919382571, 0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754903, 0.0447957893936862, -0.00969857289937744, -0.0548634133198549, 0.0316754064488799, 0.0391963157194754, -0.0806324209086351, 0, -0.0527863103259086, 0.060952380952381, 0.0229510124219699, -0.0101587301587302, 0.0168622935763319, 0.0124418526617558, -0.00718330698348238, -0.013968253968254, 0, -0.0724831561155734, 0.0357346778758831, 0.0118628410538899, -0.0228300482527235, 0.00810386321490758, 0.0114150241263618, 0.0053052238005546, -0.0112308987609918, -0.00395428035129663, 0.0010209907964538, -0.0035368158670364, -0.00125045324169481, 0.000721949515701529, 0.0020419815929076},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0.0144577788584968, 0, -0.0614242950293904, 0, -0.0633508128977598, 0.0391963157194754, 0, -0.0681468335999936, 0, -0.0914285714285714, 0.00983614818084424, 0, 0.0285925847598672, 0, 0.0143666139669648, -0.013968253968254, 0, 0, -0.0714693557517662, 0, 0.0456600965054471, 0, 0.0182640386021788, 0, 0.0040839631858152, -0.00263618690086442, 0, -0.00471575448938187, 0, -0.00144389903140307, 0.0020419815929076},
    {0.351908735506058, 0, 0, 0, -0.115662230867974, 0, -0.129314305325032, 0, 0, -0.134387368181059, 0, -0.0908624447999914, 0, 0.0406349206349207, -0.0786891854467539, 0, -0.0879771838765144, 0, 0, 0.0711111111111111, 0, 0, 0, 0, 0, 0, -0.0821881737098047, 0, 0.0367556686723369, 0.0210894952069153, 0, 0.0235787724469093, 0, 0, -0.0122518895574456}};
    
    // Extract relevant coefficients
    const double coeff0_0 = coefficients0[dof][0];
    const double coeff0_1 = coefficients0[dof][1];
    const double coeff0_2 = coefficients0[dof][2];
    const double coeff0_3 = coefficients0[dof][3];
    const double coeff0_4 = coefficients0[dof][4];
    const double coeff0_5 = coefficients0[dof][5];
    const double coeff0_6 = coefficients0[dof][6];
    const double coeff0_7 = coefficients0[dof][7];
    const double coeff0_8 = coefficients0[dof][8];
    const double coeff0_9 = coefficients0[dof][9];
    const double coeff0_10 = coefficients0[dof][10];
    const double coeff0_11 = coefficients0[dof][11];
    const double coeff0_12 = coefficients0[dof][12];
    const double coeff0_13 = coefficients0[dof][13];
    const double coeff0_14 = coefficients0[dof][14];
    const double coeff0_15 = coefficients0[dof][15];
    const double coeff0_16 = coefficients0[dof][16];
    const double coeff0_17 = coefficients0[dof][17];
    const double coeff0_18 = coefficients0[dof][18];
    const double coeff0_19 = coefficients0[dof][19];
    const double coeff0_20 = coefficients0[dof][20];
    const double coeff0_21 = coefficients0[dof][21];
    const double coeff0_22 = coefficients0[dof][22];
    const double coeff0_23 = coefficients0[dof][23];
    const double coeff0_24 = coefficients0[dof][24];
    const double coeff0_25 = coefficients0[dof][25];
    const double coeff0_26 = coefficients0[dof][26];
    const double coeff0_27 = coefficients0[dof][27];
    const double coeff0_28 = coefficients0[dof][28];
    const double coeff0_29 = coefficients0[dof][29];
    const double coeff0_30 = coefficients0[dof][30];
    const double coeff0_31 = coefficients0[dof][31];
    const double coeff0_32 = coefficients0[dof][32];
    const double coeff0_33 = coefficients0[dof][33];
    const double coeff0_34 = coefficients0[dof][34];
    
    // Compute value(s)
    *values = coeff0_0*basisvalue0 + coeff0_1*basisvalue1 + coeff0_2*basisvalue2 + coeff0_3*basisvalue3 + coeff0_4*basisvalue4 + coeff0_5*basisvalue5 + coeff0_6*basisvalue6 + coeff0_7*basisvalue7 + coeff0_8*basisvalue8 + coeff0_9*basisvalue9 + coeff0_10*basisvalue10 + coeff0_11*basisvalue11 + coeff0_12*basisvalue12 + coeff0_13*basisvalue13 + coeff0_14*basisvalue14 + coeff0_15*basisvalue15 + coeff0_16*basisvalue16 + coeff0_17*basisvalue17 + coeff0_18*basisvalue18 + coeff0_19*basisvalue19 + coeff0_20*basisvalue20 + coeff0_21*basisvalue21 + coeff0_22*basisvalue22 + coeff0_23*basisvalue23 + coeff0_24*basisvalue24 + coeff0_25*basisvalue25 + coeff0_26*basisvalue26 + coeff0_27*basisvalue27 + coeff0_28*basisvalue28 + coeff0_29*basisvalue29 + coeff0_30*basisvalue30 + coeff0_31*basisvalue31 + coeff0_32*basisvalue32 + coeff0_33*basisvalue33 + coeff0_34*basisvalue34;
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis() is not yet implemented.");
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_02 = element_coordinates[3][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
    const double J_12 = element_coordinates[3][1] - element_coordinates[0][1];
    const double J_20 = element_coordinates[1][2] - element_coordinates[0][2];
    const double J_21 = element_coordinates[2][2] - element_coordinates[0][2];
    const double J_22 = element_coordinates[3][2] - element_coordinates[0][2];
      
    // Compute sub determinants
    const double d00 = J_11*J_22 - J_12*J_21;
    const double d01 = J_12*J_20 - J_10*J_22;
    const double d02 = J_10*J_21 - J_11*J_20;
    
    const double d10 = J_02*J_21 - J_01*J_22;
    const double d11 = J_00*J_22 - J_02*J_20;
    const double d12 = J_01*J_20 - J_00*J_21;
    
    const double d20 = J_01*J_12 - J_02*J_11;
    const double d21 = J_02*J_10 - J_00*J_12;
    const double d22 = J_00*J_11 - J_01*J_10;
      
    // Compute determinant of Jacobian
    double detJ = J_00*d00 + J_10*d10 + J_20*d20;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = d00*(element_coordinates[0][0] - element_coordinates[2][0] - element_coordinates[3][0]) \
                    + d10*(element_coordinates[0][1] - element_coordinates[2][1] - element_coordinates[3][1]) \
                    + d20*(element_coordinates[0][2] - element_coordinates[2][2] - element_coordinates[3][2]);
    
    const double C1 = d01*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[3][0]) \
                    + d11*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[3][1]) \
                    + d21*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[3][2]);
    
    const double C2 = d02*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[2][0]) \
                    + d12*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[2][1]) \
                    + d22*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[2][2]);
    
    // Get coordinates and map to the UFC reference element
    double x = (C0 + d00*coordinates[0] + d10*coordinates[1] + d20*coordinates[2]) / detJ;
    double y = (C1 + d01*coordinates[0] + d11*coordinates[1] + d21*coordinates[2]) / detJ;
    double z = (C2 + d02*coordinates[0] + d12*coordinates[1] + d22*coordinates[2]) / detJ;
    
    // Map coordinates to the reference cube
    if (std::abs(y + z - 1.0) < 1e-14)
      x = 1.0;
    else
      x = -2.0 * x/(y + z - 1.0) - 1.0;
    if (std::abs(z - 1.0) < 1e-14)
      y = -1.0;
    else
      y = 2.0 * y/(1.0 - z) - 1.0;
    z = 2.0 * z - 1.0;
    
    // Compute number of derivatives
    unsigned int num_derivatives = 1;
    
    for (unsigned int j = 0; j < n; j++)
      num_derivatives *= 3;
    
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      combinations[j] = new unsigned int [n];
      for (unsigned int k = 0; k < n; k++)
        combinations[j][k] = 0;
    }
        
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] ={{d00 / detJ, d10 / detJ, d20 / detJ}, {d01 / detJ, d11 / detJ, d21 / detJ}, {d02 / detJ, d12 / detJ, d22 / detJ}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values
    for (unsigned int j = 0; j < 1*num_derivatives; j++)
      values[j] = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    const double scalings_y_4 = scalings_y_3*(0.5 - 0.5*y);
    const double scalings_z_0 = 1;
    const double scalings_z_1 = scalings_z_0*(0.5 - 0.5*z);
    const double scalings_z_2 = scalings_z_1*(0.5 - 0.5*z);
    const double scalings_z_3 = scalings_z_2*(0.5 - 0.5*z);
    const double scalings_z_4 = scalings_z_3*(0.5 - 0.5*z);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    const double psitilde_a_4 = 1.75*x*psitilde_a_3 - 0.75*psitilde_a_2;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_0_4 = 0.0285714285714286*psitilde_bs_0_3 + 1.8*y*psitilde_bs_0_3 - 0.771428571428571*psitilde_bs_0_2;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_1_3 = 0.285714285714286*psitilde_bs_1_2 + 2*y*psitilde_bs_1_2 - 0.714285714285714*psitilde_bs_1_1;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_2_2 = 1.02040816326531*psitilde_bs_2_1 + 2.57142857142857*y*psitilde_bs_2_1 - 0.551020408163265*psitilde_bs_2_0;
    const double psitilde_bs_3_0 = 1;
    const double psitilde_bs_3_1 = 4.5*y + 3.5;
    const double psitilde_bs_4_0 = 1;
    
    // Compute psitilde_cs
    const double psitilde_cs_00_0 = 1;
    const double psitilde_cs_00_1 = 2*z + 1;
    const double psitilde_cs_00_2 = 0.3125*psitilde_cs_00_1 + 1.875*z*psitilde_cs_00_1 - 0.5625*psitilde_cs_00_0;
    const double psitilde_cs_00_3 = 0.155555555555556*psitilde_cs_00_2 + 1.86666666666667*z*psitilde_cs_00_2 - 0.711111111111111*psitilde_cs_00_1;
    const double psitilde_cs_00_4 = 0.09375*psitilde_cs_00_3 + 1.875*z*psitilde_cs_00_3 - 0.78125*psitilde_cs_00_2;
    const double psitilde_cs_01_0 = 1;
    const double psitilde_cs_01_1 = 3*z + 2;
    const double psitilde_cs_01_2 = 0.777777777777778*psitilde_cs_01_1 + 2.33333333333333*z*psitilde_cs_01_1 - 0.555555555555556*psitilde_cs_01_0;
    const double psitilde_cs_01_3 = 0.428571428571429*psitilde_cs_01_2 + 2.14285714285714*z*psitilde_cs_01_2 - 0.714285714285714*psitilde_cs_01_1;
    const double psitilde_cs_02_0 = 1;
    const double psitilde_cs_02_1 = 4*z + 3;
    const double psitilde_cs_02_2 = 1.265625*psitilde_cs_02_1 + 2.8125*z*psitilde_cs_02_1 - 0.546875*psitilde_cs_02_0;
    const double psitilde_cs_03_0 = 1;
    const double psitilde_cs_03_1 = 5*z + 4;
    const double psitilde_cs_04_0 = 1;
    const double psitilde_cs_10_0 = 1;
    const double psitilde_cs_10_1 = 3*z + 2;
    const double psitilde_cs_10_2 = 0.777777777777778*psitilde_cs_10_1 + 2.33333333333333*z*psitilde_cs_10_1 - 0.555555555555556*psitilde_cs_10_0;
    const double psitilde_cs_10_3 = 0.428571428571429*psitilde_cs_10_2 + 2.14285714285714*z*psitilde_cs_10_2 - 0.714285714285714*psitilde_cs_10_1;
    const double psitilde_cs_11_0 = 1;
    const double psitilde_cs_11_1 = 4*z + 3;
    const double psitilde_cs_11_2 = 1.265625*psitilde_cs_11_1 + 2.8125*z*psitilde_cs_11_1 - 0.546875*psitilde_cs_11_0;
    const double psitilde_cs_12_0 = 1;
    const double psitilde_cs_12_1 = 5*z + 4;
    const double psitilde_cs_13_0 = 1;
    const double psitilde_cs_20_0 = 1;
    const double psitilde_cs_20_1 = 4*z + 3;
    const double psitilde_cs_20_2 = 1.265625*psitilde_cs_20_1 + 2.8125*z*psitilde_cs_20_1 - 0.546875*psitilde_cs_20_0;
    const double psitilde_cs_21_0 = 1;
    const double psitilde_cs_21_1 = 5*z + 4;
    const double psitilde_cs_22_0 = 1;
    const double psitilde_cs_30_0 = 1;
    const double psitilde_cs_30_1 = 5*z + 4;
    const double psitilde_cs_31_0 = 1;
    const double psitilde_cs_40_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.866025403784439*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_0;
    const double basisvalue1 = 2.73861278752583*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_0;
    const double basisvalue2 = 1.58113883008419*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_0;
    const double basisvalue3 = 1.11803398874989*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_1;
    const double basisvalue4 = 5.1234753829798*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_0;
    const double basisvalue5 = 3.96862696659689*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_0;
    const double basisvalue6 = 2.29128784747792*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_0;
    const double basisvalue7 = 3.24037034920393*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_1;
    const double basisvalue8 = 1.87082869338697*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_1;
    const double basisvalue9 = 1.3228756555323*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_2;
    const double basisvalue10 = 7.93725393319377*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_0;
    const double basisvalue11 = 6.70820393249937*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_0;
    const double basisvalue12 = 5.19615242270663*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_0;
    const double basisvalue13 = 3*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_0;
    const double basisvalue14 = 5.80947501931113*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_1;
    const double basisvalue15 = 4.5*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_1;
    const double basisvalue16 = 2.59807621135332*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_1;
    const double basisvalue17 = 3.67423461417477*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_2;
    const double basisvalue18 = 2.12132034355964*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_2;
    const double basisvalue19 = 1.5*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_3;
    const double basisvalue20 = 11.1242977306435*psitilde_a_4*scalings_y_4*psitilde_bs_4_0*scalings_z_4*psitilde_cs_40_0;
    const double basisvalue21 = 9.81070843517429*psitilde_a_3*scalings_y_3*psitilde_bs_3_1*scalings_z_4*psitilde_cs_31_0;
    const double basisvalue22 = 8.2915619758885*psitilde_a_2*scalings_y_2*psitilde_bs_2_2*scalings_z_4*psitilde_cs_22_0;
    const double basisvalue23 = 6.42261628933256*psitilde_a_1*scalings_y_1*psitilde_bs_1_3*scalings_z_4*psitilde_cs_13_0;
    const double basisvalue24 = 3.70809924354783*psitilde_a_0*scalings_y_0*psitilde_bs_0_4*scalings_z_4*psitilde_cs_04_0;
    const double basisvalue25 = 8.77496438739212*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_1;
    const double basisvalue26 = 7.41619848709566*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_1;
    const double basisvalue27 = 5.74456264653803*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_1;
    const double basisvalue28 = 3.3166247903554*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_1;
    const double basisvalue29 = 6.42261628933256*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_2;
    const double basisvalue30 = 4.9749371855331*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_2;
    const double basisvalue31 = 2.87228132326901*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_2;
    const double basisvalue32 = 4.06201920231798*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_3;
    const double basisvalue33 = 2.34520787991171*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_3;
    const double basisvalue34 = 1.6583123951777*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_4;
    
    // Table(s) of coefficients
    const static double coefficients0[35][35] = \
    {{-0.0137464349807053, -0.014490014748814, -0.00836581391578937, -0.00591552374999943, 0, 0, 0, 0, 0, 0, -0.00671936840905292, -0.00567890279999946, -0.00439885919382571, -0.00253968253968253, -0.00491807409042212, -0.00380952380952381, -0.00219942959691287, -0.00311046316543895, -0.0017958267458706, -0.00126984126984128, 0.0136980289516341, 0.0120805260192622, 0.010209907964538, 0.00790856070259325, 0.00456600965054471, 0.0108051509532101, 0.00913201930108942, 0.0070736317340728, 0.00408396318581522, 0.00790856070259325, 0.00612594477872282, 0.0035368158670364, 0.00500181296677923, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807054, 0.0144900147488139, -0.00836581391578936, -0.00591552374999944, 0, 0, 0, 0, 0, 0, 0.00671936840905292, -0.00567890279999947, 0.00439885919382572, -0.00253968253968254, -0.00491807409042212, 0.00380952380952381, -0.00219942959691286, 0.00311046316543896, -0.0017958267458706, -0.00126984126984127, 0.0136980289516341, -0.0120805260192622, 0.010209907964538, -0.00790856070259325, 0.00456600965054471, -0.0108051509532101, 0.00913201930108942, -0.0070736317340728, 0.00408396318581521, 0.00790856070259325, -0.00612594477872282, 0.0035368158670364, -0.00500181296677923, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807054, 0, 0.0167316278315787, -0.00591552374999945, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0101587301587302, 0, 0, -0.00659828879073858, 0, 0.0035916534917412, -0.00126984126984127, 0, 0, 0, 0, 0.0228300482527235, 0, 0, 0, -0.0163358527432608, 0, 0, 0.0106104476011092, 0, -0.00577559612561231, 0.00204198159290761},
    {-0.0137464349807054, 0, 0, 0.0177465712499983, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0126984126984127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0306297238936141},
    {0.0439885919382572, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0, 0.0406349206349206, 0, 0, 0.00439885919382573, 0, -0.0143666139669648, 0.00761904761904762, 0, 0, 0, 0, 0, 0, 0, 0, 0.0367556686723369, 0, 0, -0.0424417904044368, 0, 0.0303218796594646, -0.0122518895574456},
    {-0.0329914439536929, 0, -0.0200779533978945, -0.0141972569999987, 0, 0, -0.00969857289937746, 0, 0.0712696645099798, -0.050395263067897, 0, 0, 0, 0, 0, 0, 0.0461880215351701, 0, 0.0107749604752236, -0.019047619047619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0495154221385096, 0, -0.0606437593189292, 0.0306297238936141},
    {0.0439885919382573, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0, 0.0359165349174119, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0505364660991077, -0.0408396318581521},
    {0.0439885919382571, 0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0.0433733365754904, -0.0335968420452646, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, -0.0227156111999978, 0.0175954367753029, -0.0101587301587302, 0.00327871606028142, -0.00253968253968253, 0.00146628639794192, -0.0124418526617558, 0.00718330698348241, 0.00761904761904763, 0, 0, 0, 0, 0, 0.0243115896447228, -0.0205470434274512, 0.0159156714016638, -0.00918891716808422, -0.031634242810373, 0.0245037791148913, -0.0141472634681456, 0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, -0.0173880176985767, 0.0100389766989472, -0.0141972569999987, -0.00722888942924838, 0.00559947367421077, -0.00323285763312583, 0.0617213399848368, -0.0356348322549899, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, -0.0266666666666667, 0.01539600717839, 0.00933138949631688, -0.00538748023761179, -0.019047619047619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, -0.0285877423007065, 0.0165051407128366, -0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382572, 0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0.0311046316543896, -0.017958267458706, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, -0.0335968420452646, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, 0, -0.0117302911835352, 0.0101587301587302, -0.0229510124219699, 0.00761904761904762, -0.0014662863979419, 0.0165891368823411, -0.00718330698348239, -0.00761904761904762, 0, 0.0241610520385245, -0.0357346778758831, 0.0355885231616696, -0.0228300482527235, -0.00270128773830253, -0.0114150241263618, 0.0159156714016638, -0.0112308987609918, 0.00395428035129663, 0.00306297238936141, -0.0035368158670364, -0.00375135972508442, 0.00072194951570154, 0.00204198159290761},
    {-0.0329914439536929, -0.0173880176985767, -0.0100389766989473, 0.0141972569999987, -0.00722888942924838, 0.0615942104163185, -0.0614242950293905, -0.00685792666498186, -0.00395942580611002, 0.00559947367421077, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.0049180740904221, -0.0266666666666667, 0.0175954367753029, 0.00933138949631686, 0.00538748023761182, -0.00761904761904761, 0, 0, 0.0357346778758831, -0.0593142052694494, 0.0456600965054471, 0, -0.0091320193010894, 0, 0.00408396318581524, 0.0013180934504322, 0.00714693557517662, -0.00471575448938186, -0.00250090648338961, -0.00144389903140308, 0.0020419815929076},
    {0.0439885919382573, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484215, 0, 0, 0.0293257279588381, 0.0101587301587301, 0, -0.0101587301587302, -0.0219942959691286, 0.00207364211029264, 0.017958267458706, -0.00761904761904762, 0, 0, 0, 0.0395428035129662, -0.0456600965054471, 0, 0, -0.017684079335182, 0.0142938711503532, 0, 0.00612594477872282, 0, -0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.0439885919382572, -0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0.0433733365754904, 0.0335968420452647, 0.0193971457987549, 0.0274317066599275, 0.01583770322444, 0.0111989473484215, -0.0268774736362117, -0.0227156111999979, -0.0175954367753029, -0.0101587301587302, 0.00327871606028141, 0.00253968253968254, 0.00146628639794191, 0.0124418526617558, 0.00718330698348239, 0.00761904761904762, 0, 0, 0, 0, 0, -0.0243115896447228, -0.0205470434274512, -0.0159156714016638, -0.00918891716808422, -0.031634242810373, -0.0245037791148913, -0.0141472634681456, -0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.032991443953693, 0.0173880176985767, 0.0100389766989472, -0.0141972569999986, -0.0072288894292484, -0.00559947367421079, -0.00323285763312582, -0.0617213399848368, -0.0356348322549899, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, 0.0266666666666667, 0.01539600717839, -0.00933138949631686, -0.00538748023761177, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, 0.0285877423007065, 0.0165051407128365, 0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382572, -0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, -0.0311046316543895, -0.017958267458706, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484215, -0.0268774736362117, 0, 0.0117302911835353, 0.0101587301587301, -0.0229510124219699, -0.00761904761904762, -0.0014662863979419, -0.0165891368823411, -0.0071833069834824, -0.00761904761904762, 0, -0.0241610520385245, -0.0357346778758831, -0.0355885231616696, -0.0228300482527235, 0.00270128773830253, -0.0114150241263618, -0.0159156714016638, -0.0112308987609918, 0.00395428035129663, -0.00306297238936141, -0.0035368158670364, 0.00375135972508443, 0.000721949515701543, 0.00204198159290761},
    {-0.0329914439536929, 0.0173880176985767, -0.0100389766989473, 0.0141972569999986, -0.00722888942924838, -0.0615942104163185, -0.0614242950293904, 0.00685792666498186, -0.00395942580611, 0.00559947367421079, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042211, 0.0266666666666667, 0.0175954367753029, -0.00933138949631687, 0.0053874802376118, -0.00761904761904762, 0, 0, 0.0357346778758831, 0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108941, 0, 0.00408396318581522, 0.0013180934504322, -0.00714693557517662, -0.00471575448938187, 0.00250090648338962, -0.00144389903140308, 0.00204198159290761},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484215, 0, 0, -0.0293257279588381, 0.0101587301587301, 0, 0.0101587301587302, -0.0219942959691286, -0.00207364211029263, 0.017958267458706, -0.00761904761904762, 0, 0, 0, -0.0395428035129662, -0.0456600965054471, 0, 0, 0.017684079335182, 0.0142938711503532, 0, -0.00612594477872281, 0, 0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.0439885919382572, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484215, 0.0134387368181059, -0.0113578055999989, -0.0205280095711867, -0.0152380952380952, -0.00983614818084423, -0.0177777777777778, -0.0131965775814772, -0.0145154947720485, -0.0107749604752236, -0.0076190476190476, -0.0547921158065365, -0.0241610520385245, -0.00510495398226901, 0.00395428035129662, 0.00456600965054471, -0.0216103019064202, -0.00456600965054471, 0.0035368158670364, 0.00408396318581521, -0.00395428035129662, 0.00306297238936141, 0.0035368158670364, 0.00250090648338962, 0.00288779806280615, 0.0020419815929076},
    {-0.0329914439536929, 0, 0.0200779533978945, 0.0141972569999987, -0.0867466731509807, 0, 0.00969857289937746, 0, 0.00791885161221999, 0.00559947367421079, 0, 0.0340734167999968, 0, -0.0152380952380953, 0.0295084445425327, 0, -0.0131965775814772, 0, -0.0107749604752236, -0.00761904761904764, 0.0821881737098047, 0, -0.010209907964538, 0, 0.0045660096505447, 0, -0.00913201930108942, 0, 0.0040839631858152, -0.00790856070259325, 0, 0.00353681586703639, 0, 0.00288779806280615, 0.00204198159290761},
    {0.0439885919382572, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754903, -0.0335968420452646, 0.0193971457987549, -0.0274317066599274, 0.01583770322444, 0.0111989473484215, -0.0134387368181059, -0.0113578055999989, 0.0205280095711867, -0.0152380952380952, -0.00983614818084423, 0.0177777777777778, -0.0131965775814772, 0.0145154947720485, -0.0107749604752236, -0.00761904761904761, -0.0547921158065365, 0.0241610520385245, -0.00510495398226901, -0.00395428035129662, 0.00456600965054471, 0.0216103019064202, -0.00456600965054471, -0.0035368158670364, 0.00408396318581521, -0.00395428035129662, -0.00306297238936141, 0.00353681586703641, -0.00250090648338962, 0.00288779806280615, 0.0020419815929076},
    {0.0439885919382569, 0.139104141588614, -0.0803118135915779, -0.0567890279999946, 0.0578311154339871, 0.0335968420452646, -0.0420271492306355, 0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, -0.0586514559176762, 0.0406349206349206, 0.0393445927233769, 0.00253968253968254, -0.0109971479845643, -0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, -0.053052238005546, 0.0367556686723369, -0.0105447476034577, -0.0245037791148913, 0.0235787724469093, 0.0175063453837273, 0, -0.0122518895574456},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0, 0.0783926314389509, 0.00969857289937743, -0.0274317066599274, 0.0475131096733199, -0.0167984210226323, 0, 0, 0.0586514559176763, -0.060952380952381, 0, 0.033015873015873, 0.0241937255660415, -0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, 0.053052238005546, -0.0551335030085054, 0, -0.0326717054865217, 0.0141472634681456, 0.00875317269186366, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0, -0.0111989473484216, 0.00969857289937743, 0.0822951199797824, 0.0475131096733199, -0.0167984210226323, 0, 0, 0, 0, 0, 0.0533333333333333, -0.0461880215351701, 0.0435464843161454, 0.0251415744421884, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.057175484601413, -0.0495154221385096, -0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382572, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, 0.0578311154339871, -0.0335968420452646, -0.0420271492306356, -0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, 0.0586514559176763, 0.0406349206349206, 0.0393445927233769, -0.00253968253968253, -0.0109971479845643, 0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, 0.053052238005546, 0.0367556686723369, -0.0105447476034577, 0.0245037791148913, 0.0235787724469093, -0.0175063453837273, 0, -0.0122518895574456},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0, -0.0783926314389508, 0.00969857289937744, 0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, -0.0586514559176763, -0.060952380952381, 0, -0.033015873015873, 0.0241937255660415, 0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, -0.053052238005546, -0.0551335030085054, 0, 0.0326717054865217, 0.0141472634681456, -0.00875317269186367, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382573, 0, 0, 0.170367083999984, 0, 0.0111989473484216, 0.00969857289937742, -0.0822951199797824, 0.0475131096733199, -0.0167984210226324, 0, 0, 0, 0, 0, -0.0533333333333333, -0.0461880215351701, -0.0435464843161454, 0.0251415744421884, -0.0825396825396825, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.057175484601413, -0.0495154221385096, 0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382572, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754904, 0.0447957893936862, 0.0484928644968872, -0.0548634133198549, 0, -0.0167984210226323, 0.0806324209086351, 0.0227156111999978, -0.00586514559176761, -0.0101587301587302, -0.00327871606028142, 0.0304761904761905, 0.0271262983619253, 0.045620126426438, 0.0430998419008943, 0.0393650793650793, 0, 0, 0, 0, 0, 0.0729347689341683, 0.0205470434274512, -0.0053052238005546, -0.00918891716808421, 0.031634242810373, -0.00816792637163041, -0.0141472634681456, -0.00875317269186367, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754904, -0.0447957893936862, 0.0484928644968872, 0.0548634133198549, 0, -0.0167984210226323, -0.0806324209086352, 0.0227156111999978, 0.0058651455917676, -0.0101587301587302, -0.00327871606028142, -0.0304761904761905, 0.0271262983619253, -0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, -0.0729347689341683, 0.0205470434274512, 0.00530522380055459, -0.00918891716808422, 0.031634242810373, 0.00816792637163041, -0.0141472634681456, 0.00875317269186366, -0.0151609398297323, -0.0122518895574456},
    {0.043988591938257, 0, 0, 0.170367083999984, 0.0144577788584968, 0, -0.00323285763312582, 0, -0.0950262193466398, -0.0167984210226323, 0, 0, 0, 0, -0.0688530372659096, 0, 0.01539600717839, 0, -0.0502831488843767, -0.0825396825396825, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0738132332242037, 0, 0.0165051407128365, 0, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382574, -0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754904, -0.0447957893936862, -0.00969857289937744, 0.0548634133198549, 0.0316754064488799, 0.0391963157194754, 0.0806324209086352, 0, 0.0527863103259087, 0.060952380952381, 0.0229510124219699, 0.0101587301587302, 0.0168622935763319, -0.0124418526617558, -0.00718330698348237, -0.013968253968254, 0, 0.0724831561155734, 0.0357346778758831, -0.0118628410538899, -0.0228300482527235, -0.00810386321490759, 0.0114150241263618, -0.0053052238005546, -0.0112308987609918, -0.00395428035129662, -0.0010209907964538, -0.0035368158670364, 0.00125045324169481, 0.000721949515701528, 0.0020419815929076},
    {0.0439885919382571, 0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754903, 0.0447957893936862, -0.00969857289937744, -0.0548634133198549, 0.0316754064488799, 0.0391963157194754, -0.0806324209086351, 0, -0.0527863103259086, 0.060952380952381, 0.0229510124219699, -0.0101587301587302, 0.0168622935763319, 0.0124418526617558, -0.00718330698348238, -0.013968253968254, 0, -0.0724831561155734, 0.0357346778758831, 0.0118628410538899, -0.0228300482527235, 0.00810386321490758, 0.0114150241263618, 0.0053052238005546, -0.0112308987609918, -0.00395428035129663, 0.0010209907964538, -0.0035368158670364, -0.00125045324169481, 0.000721949515701529, 0.0020419815929076},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0.0144577788584968, 0, -0.0614242950293904, 0, -0.0633508128977598, 0.0391963157194754, 0, -0.0681468335999936, 0, -0.0914285714285714, 0.00983614818084424, 0, 0.0285925847598672, 0, 0.0143666139669648, -0.013968253968254, 0, 0, -0.0714693557517662, 0, 0.0456600965054471, 0, 0.0182640386021788, 0, 0.0040839631858152, -0.00263618690086442, 0, -0.00471575448938187, 0, -0.00144389903140307, 0.0020419815929076},
    {0.351908735506058, 0, 0, 0, -0.115662230867974, 0, -0.129314305325032, 0, 0, -0.134387368181059, 0, -0.0908624447999914, 0, 0.0406349206349207, -0.0786891854467539, 0, -0.0879771838765144, 0, 0, 0.0711111111111111, 0, 0, 0, 0, 0, 0, -0.0821881737098047, 0, 0.0367556686723369, 0.0210894952069153, 0, 0.0235787724469093, 0, 0, -0.0122518895574456}};
    
    // Interesting (new) part
    // Tables of derivatives of the polynomial base (transpose)
    const static double dmats0[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {6.32455532033676, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 11.2249721603218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.58257569495584, 0, 8.36660026534075, -1.18321595661992, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.74165738677394, 0, 0, 8.69482604771366, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.49909083394702, 0, -3.34664010613631, -2.36643191323985, 15.4919333848297, 0, 0.692820323027556, 0, 0.565685424949245, 0.400000000000005, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 4.89897948556635, 0, 0, 0, 14.1985914794391, 0, -0.82807867121082, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.60000000000001, 0, 8.76356092008266, -1.54919333848297, 0, 0, 9.52470471983253, 0, -1.48131215963609, 0.261861468283193, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 4.24264068711929, 0, 0, 0, 0, 0, 14.3427433120127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.04792266088297e-14, 0, 0, 0, 0, -1.47304043962571e-14, 0, 0},
    {3.11769145362398, 0, 3.16227766016838, 4.91934955049954, 0, 0, 0, 0, 10.690449676497, -2.41897262725905, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.54558441227157, 0, 0, 7.66811580507232, 0, 0, 0, 0, 0, 10.3691851174526, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 11.6057691494799, 0, 0, 0, -4.20458932936041, 0, -3.43303281162798, 0, 0, 19.6214168703486, 0, 0.611677741841199, 0, 0, 0.529728463363978, 0, 0.432521479156786, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.53137212479104, 0, 3.54562104171167, -2.50713268211203, 4.7871355387817, 0, -5.56626745075492, 0, -1.04880884817015, 0.741619848709561, 0, 18.8034951158403, 0, 1.68183573174415, -0.603122387046456, 0, 0.701283781217662, 0, 0.132137494528679, -0.0934353184302344, 0, 0, 0, 0, -1.83555802032862e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 2.59512887494071, 0, 0, 0, 10.0285307284481, 0, -0.767649473578741, 0, 0, 0, 0, 16.4130361329658, 0, 0, -1.26347611061158, 0, 0.0967147429123328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.96647939483826, 0, 8.12403840463596, -1.64130361329658, 0, 0, 11.7728501222091, 0, -2.40312296813959, 0.48550415622761, 0, 0, 0, 10.2761860629321, 0, 0, -1.48323969741913, 0, 0.302765035409751, -0.0611677741841196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.05298244095218, 0, -1.58564993434418, 4.4848952846511, 4.28174419288838, 0, 0.191485421551268, 0, -3.75233260785874, -4.31161222746202, 0, 0, 0, 0, 18.8807171866294, 0, 0.84437134186504, 0, 1.18187368057056, 1.04463861754668, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 2.32115382989599, 0, 0, 0, 3.92428337406972, 0, 5.49285249860477, 0, 0, 0, 0, 0, 0, 0, 17.3044631365565, 0, -1.73008591662715, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.46547001870808e-14, 0, 0, 0, 0, 0, 0, 0},
    {2.65329983228432, 0, 4.15220619990514, 2.93605316083775, 0, 0, 2.63248931621764, 0, 9.82591326180786, -2.8226127713774, 0, 0, 0, 0, 0, 0, 11.6081867662439, 0, -3.09487177319465, 0.683876505540243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 2.01017818278148, 0, 0, 0, 0, 0, 8.91928088068603, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16.8558564884489, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.26487362250849e-14, 0, 0},
    {2.2978250586152, 0, 1.49829835452879, 5.50917601898534, 0, 0, 0, 0, 6.64803945320938, 4.13676892548485, 0, 0, 0, 0, 0, 0, 0, 0, 12.5636136423842, -3.55352656109507, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87616630392936, 0, 0, 6.22830929985769, 0, 0, 0, 0, 0, 11.0541524195338, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11.6057691494799, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    const static double dmats1[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.16227766016838, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.47722557505166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.95803989154981, 5.61248608016091, -1.08012344973464, -0.763762615825973, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.29128784747792, 7.24568837309472, 4.18330013267038, -0.591607978309961, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-2.64575131106459, 0, 9.66091783079296, 0.683130051063972, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87082869338697, 0, 0, 4.34741302385683, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.24037034920393, 0, 0, 7.52994023880668, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.74954541697351, 5.79655069847578, -1.67332005306815, -1.18321595661993, 7.74596669241484, -1.2, 0.346410161513782, -0.979795897113277, 0.282842712474625, 0.200000000000005, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.32379000772445, 2.44948974278317, 2.82842712474619, -1, 9.16515138991168, 7.09929573971954, -2.04939015319192, -0.414039335605409, -0.478091443733757, 0.1690308509457, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.8, -5.69209978830308, 4.38178046004133, -0.774596669241485, 0, 10.998181667894, 4.76235235991627, 0.962140470884731, -0.740656079818044, 0.130930734141594, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.19615242270664, 0, -3.16227766016838, -2.23606797749979, 0, 1.15073592506104e-14, 13.7477270848675, 0, 0.534522483824844, 0.377964473009229, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.01246117974981, 2.12132034355964, -0.408248290463862, 3.17542648054294, 0, 0, 0, 7.17137165600636, -1.38013111868471, -1.56144011671765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.55884572681199, 2.73861278752583, 1.58113883008419, 2.45967477524977, 0, 0, 0, 9.25820099772551, 5.34522483824849, -1.20948631362952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-1.80000000000001, 0, 3.65148371670111, -2.84018778721877, 0, 0, 0, 0, 12.3442679969674, 1.39659449751035, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.27279220613578, 0, 0, 3.83405790253616, 0, 0, 0, 0, 0, 5.18459255872628, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.20454076850486, 0, 0, 6.64078308635359, 0, 0, 0, 0, 0, 8.97997772825745, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.56904651573304, 5.80288457473998, -2.01017818278147, -1.42141062443803, 8.14215222512716, -2.1022946646802, 0.728256234341424, -1.71651640581399, 0.594618725379073, 0.420458932936044, 9.81070843517429, -1.18450885369836, 0.305838870920599, -0.105945692672796, -1.02581475831036, 0.264864231681989, -0.0917516612761798, 0.216260739578392, -0.0749149177264397, -0.0529728463363978, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.26568606239552, 3.07059789431495, 1.77281052085584, -1.25356634105602, 2.39356776939085, 6.30376871403132, -2.78313372537745, -0.908295106229245, -0.524404424085072, 0.370809924354781, 11.1242977306435, 9.40174755792013, -2.42752078113806, 0.840917865872078, -0.301561193523229, -0.794200206656967, 0.350641890608832, 0.114434427054264, 0.066068747264339, -0.0467176592151171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.91485421551267, 1.29756443747035, 3.74574588632197, -1.05945692672795, -8.09173593712687, 5.01426536422407, 1.80936716113936, -0.383824736789365, -1.1080065755349, 0.313391585264001, 0, 12.7134831207354, 8.2065180664829, -2.84282124887606, 1.01946290306866, -0.631738055305791, -0.227958835180079, 0.048357371456166, 0.1395957071376, -0.0394836284566123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741913, 7.03562363973515, 4.06201920231798, -0.82065180664829, 0, -6.79705818718657, 5.88642506110457, -2.08116553882675, -1.2015614840698, 0.242752078113806, 0, 0, 14.8323969741913, 5.13809303146605, 0, 0.856348838577676, -0.741619848709566, 0.262202212042541, 0.151382517704876, -0.0305838870920601, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-3.42539535431072, 0, 9.38083151964686, 1.89521416591738, 0, 0, -3.39852909359331, 0, -2.77488738510233, -0.560611910581399, 0, 0, 0, 17.7988763690296, 0, 0, 0.428174419288838, 0, 0.349602949390051, 0.0706304617818607, 0, 0, 0, 0, -1.20672813501736e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.02649122047609, 2.74642624930239, -0.792824967172091, 2.24244764232555, 2.14087209644419, -0.331662479035539, 0.0957427107756368, 6.49923072370876, -1.87616630392937, -2.15580611373101, 0, 0, 0, 0, 9.44035859331468, -1.46249406456536, 0.422185670932519, -2.04706526287664, 0.590936840285281, 0.522319308773342, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.71269767715535, 1.16057691494799, 1.34011878852098, 1.89521416591737, 2.53311402559511, 1.96214168703486, -0.566421515598879, 2.74642624930239, 3.17129986868837, -1.82198870938951, 0, 0, 0, 0, 11.1699829238239, 8.65223156827827, -2.49768411251822, -0.865042958313572, -0.998865569685857, 0.441440386136647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.32664991614216, -2.69693703815182, 2.07610309995257, 1.46802658041887, 0, 3.03973683071413, 1.31624465810882, -6.382117875081, 4.91295663090393, -1.4113063856887, 0, 0, 0, 0, 0, 13.4039795085887, 5.80409338312195, 2.01017818278147, -1.54743588659733, 0.341938252770123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.82970843102536, 0, -1.49829835452878, 4.23782770691181, 0, 0, 3.79967103839266, 0, -3.54562104171167, -4.07409060843206, 0, 0, 0, 0, 0, 0, 16.7549743857359, 0, 1.11676565710082, 0.987090711415302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741913, 1.00508909139074, -0.193429485824667, 3.55615782880926, 0, 0, 0, 4.45964044034301, -0.858258202906998, 2.67027285925187, 0, 0, 0, 0, 0, 0, 0, 8.42792824422443, -1.62195554683794, -2.29379153190448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.1489125293076, 1.29756443747036, 0.749149177264395, 2.75458800949267, 0, 0, 0, 5.75737105184053, 3.32401972660469, 2.06838446274243, 0, 0, 0, 0, 0, 0, 0, 10.8804085776374, 6.2818068211921, -1.77676328054753, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-1.32664991614217, 0, 1.73008591662714, -3.18072425757423, 0, 0, 0, 0, 7.67649473578739, -2.38836465270397, 0, 0, 0, 0, 0, 0, 0, 0, 14.5072114368499, 2.05162951662072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.938083151964681, 0, 0, 3.11415464992885, 0, 0, 0, 0, 0, 5.52707620976691, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.80288457473997, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.62480768092718, 0, 0, 5.39387407630363, 0, 0, 0, 0, 0, 9.57317681262151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10.0508909139073, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    const static double dmats2[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.16227766016838, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.82574185835055, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.16397779494322, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.95803989154981, 5.61248608016091, -1.08012344973464, -0.763762615825973, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.29128784747792, 1.44913767461894, 4.18330013267038, -0.591607978309961, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.32287565553229, 0, 3.86436713231718, -0.341565025531986, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87082869338697, 7.09929573971954, 0, 4.34741302385683, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.08012344973464, 0, 7.09929573971954, 2.50998007960223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-3.81881307912986, 0, 0, 8.87411967464942, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.74954541697351, 5.79655069847578, -1.67332005306815, -1.18321595661993, 7.74596669241484, -1.2, 0.346410161513782, -0.979795897113276, 0.282842712474624, 0.200000000000004, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.32379000772444, 2.44948974278317, 2.82842712474619, -0.999999999999999, 1.30930734141596, 7.09929573971954, -2.04939015319192, -0.414039335605411, -0.478091443733757, 0.169030850945702, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.8, 0.632455532033675, 4.38178046004133, -0.774596669241484, 0, 3.14233761939829, 4.76235235991627, -0.106904496764967, -0.740656079818044, 0.130930734141596, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.03923048454133, 0, 3.16227766016838, -0.447213595499958, 0, 0, 5.89188303637179, 0, -0.53452248382485, 0.0755928946018457, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.01246117974982, 2.12132034355965, -0.408248290463861, 3.17542648054294, 9.07114735222145, 0, 0, 7.17137165600636, -1.38013111868471, -1.56144011671765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.55884572681199, 0.547722557505168, 1.58113883008419, 2.45967477524977, 0, 9.07114735222145, 0, 1.8516401995451, 5.34522483824849, -1.20948631362952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.900000000000005, 0, 1.46059348668044, 1.42009389360938, 0, 0, 9.07114735222146, 0, 4.93770719878694, -0.698297248755171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.27279220613578, -6.26099033699941, 0, 3.83405790253616, 0, 0, 0, 10.5830052442584, 0, 5.18459255872629, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.73484692283495, 0, -6.26099033699941, 2.21359436211787, 0, 0, 0, 0, 10.5830052442584, 2.99332590941916, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.71576766497728, 0, 0, -4.69574275274956, 0, 0, 0, 0, 0, 12.69960629311, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.14660884953377e-14},
    {2.56904651573304, 5.80288457473998, -2.01017818278147, -1.42141062443803, 8.14215222512715, -2.1022946646802, 0.728256234341423, -1.71651640581399, 0.594618725379073, 0.420458932936043, 9.81070843517429, -1.18450885369836, 0.305838870920599, -0.105945692672796, -1.02581475831036, 0.264864231681989, -0.0917516612761797, 0.216260739578392, -0.0749149177264397, -0.0529728463363978, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.26568606239552, 3.07059789431495, 1.77281052085584, -1.25356634105602, 2.39356776939085, 6.30376871403132, -2.78313372537745, -0.908295106229244, -0.524404424085071, 0.370809924354782, 1.23603308118261, 9.40174755792013, -2.42752078113806, 0.840917865872078, -0.301561193523228, -0.794200206656968, 0.350641890608831, 0.114434427054264, 0.0660687472643394, -0.0467176592151163, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.91485421551268, 1.29756443747035, 3.74574588632197, -1.05945692672795, 0.404586796856348, 5.01426536422407, 1.80936716113936, -0.383824736789368, -1.1080065755349, 0.313391585264003, 0, 2.82521847127454, 8.2065180664829, -2.84282124887606, -0.050973145153435, -0.631738055305789, -0.227958835180081, 0.0483573714561672, 0.139595707137601, -0.0394836284566111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741913, 0.335029697130247, 4.06201920231798, -0.820651806648289, 0, 1.69926454679665, 5.88642506110457, -0.0991031208965148, -1.2015614840698, 0.242752078113804, 0, 0, 4.94413232473044, 5.13809303146605, 0, -0.21408720964442, -0.741619848709566, 0.0124858196210736, 0.151382517704876, -0.0305838870920597, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.856348838577674, 0, 2.68023757704196, -0.473803541479343, 0, 0, 5.09779364038993, 0, -0.792824967172097, 0.140152977645346, 0, 0, 0, 7.91061171956871, 0, 0, -0.642261628933256, 0, 0.0998865569685867, -0.0176576154454656, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.02649122047609, 2.74642624930238, -0.792824967172091, 2.24244764232555, 2.14087209644419, -0.33166247903554, 0.0957427107756354, 6.49923072370876, -1.87616630392937, -2.15580611373101, 11.0554159678513, 0, 0, 0, 9.44035859331468, -1.46249406456536, 0.422185670932521, -2.04706526287664, 0.59093684028528, 0.522319308773342, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.71269767715535, 1.16057691494799, 1.34011878852098, 1.89521416591737, 0.361873432227875, 1.96214168703486, -0.566421515598883, 2.74642624930239, 3.17129986868837, -1.82198870938951, 0, 11.0554159678513, 0, 0, 1.59571184626056, 8.65223156827827, -2.49768411251822, -0.865042958313574, -0.998865569685858, 0.441440386136646, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.32664991614216, 0.299659670905758, 2.07610309995257, 1.46802658041887, 0, 0.868496237346892, 1.31624465810882, 0.709124208342336, 4.91295663090393, -1.4113063856887, 0, 0, 11.0554159678513, 0, 0, 3.82970843102535, 5.80409338312195, -0.223353131420164, -1.54743588659732, 0.341938252770122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.765941686205066, 0, 1.49829835452879, 0.847565541382365, 0, 0, 1.62843044502542, 0, 3.54562104171167, -0.814818121686414, 0, 0, 0, 11.0554159678513, 0, 0, 7.18070330817254, 0, -1.11676565710082, 0.197418142283061, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741913, 1.00508909139074, -0.193429485824666, 3.55615782880926, -8.46157280212812, 0, 0, 4.45964044034302, -0.858258202906997, 2.67027285925187, 0, 0, 0, 0, 12.4373429638328, 0, 0, 8.42792824422443, -1.62195554683794, -2.29379153190448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.1489125293076, 0.259512887494072, 0.749149177264393, 2.75458800949267, 0, -8.46157280212812, 0, 1.15147421036811, 3.32401972660469, 2.06838446274243, 0, 0, 0, 0, 0, 12.4373429638327, 0, 2.17608171552749, 6.2818068211921, -1.77676328054754, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.663324958071069, 0, 0.692034366650856, 1.59036212878711, 0, 0, -8.46157280212813, 0, 3.07059789431496, 1.19418232635197, 0, 0, 0, 0, 0, 0, 12.4373429638327, 0, 5.80288457473997, -1.02581475831036, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.938083151964677, 7.62808987244126, 0, 3.11415464992885, 0, 0, 0, -7.5213980463361, 0, 5.52707620976691, 0, 0, 0, 0, 0, 0, 0, 14.2141062443803, 0, 5.80288457473997, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.541602560309057, 0, 7.62808987244125, 1.79795802543454, 0, 0, 0, 0, -7.52139804633611, 3.19105893754049, 0, 0, 0, 0, 0, 0, 0, 0, 14.2141062443803, 3.35029697130245, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-5.36159180343549, 0, 0, 8.8994381845148, 0, 0, 0, 0, 0, -5.26497863243526, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16.583123951777, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    // Compute reference derivatives
    // Declare pointer to array of derivatives on FIAT element
    double *derivatives = new double [num_derivatives];
    
    // Declare coefficients
    double coeff0_0 = 0;
    double coeff0_1 = 0;
    double coeff0_2 = 0;
    double coeff0_3 = 0;
    double coeff0_4 = 0;
    double coeff0_5 = 0;
    double coeff0_6 = 0;
    double coeff0_7 = 0;
    double coeff0_8 = 0;
    double coeff0_9 = 0;
    double coeff0_10 = 0;
    double coeff0_11 = 0;
    double coeff0_12 = 0;
    double coeff0_13 = 0;
    double coeff0_14 = 0;
    double coeff0_15 = 0;
    double coeff0_16 = 0;
    double coeff0_17 = 0;
    double coeff0_18 = 0;
    double coeff0_19 = 0;
    double coeff0_20 = 0;
    double coeff0_21 = 0;
    double coeff0_22 = 0;
    double coeff0_23 = 0;
    double coeff0_24 = 0;
    double coeff0_25 = 0;
    double coeff0_26 = 0;
    double coeff0_27 = 0;
    double coeff0_28 = 0;
    double coeff0_29 = 0;
    double coeff0_30 = 0;
    double coeff0_31 = 0;
    double coeff0_32 = 0;
    double coeff0_33 = 0;
    double coeff0_34 = 0;
    
    // Declare new coefficients
    double new_coeff0_0 = 0;
    double new_coeff0_1 = 0;
    double new_coeff0_2 = 0;
    double new_coeff0_3 = 0;
    double new_coeff0_4 = 0;
    double new_coeff0_5 = 0;
    double new_coeff0_6 = 0;
    double new_coeff0_7 = 0;
    double new_coeff0_8 = 0;
    double new_coeff0_9 = 0;
    double new_coeff0_10 = 0;
    double new_coeff0_11 = 0;
    double new_coeff0_12 = 0;
    double new_coeff0_13 = 0;
    double new_coeff0_14 = 0;
    double new_coeff0_15 = 0;
    double new_coeff0_16 = 0;
    double new_coeff0_17 = 0;
    double new_coeff0_18 = 0;
    double new_coeff0_19 = 0;
    double new_coeff0_20 = 0;
    double new_coeff0_21 = 0;
    double new_coeff0_22 = 0;
    double new_coeff0_23 = 0;
    double new_coeff0_24 = 0;
    double new_coeff0_25 = 0;
    double new_coeff0_26 = 0;
    double new_coeff0_27 = 0;
    double new_coeff0_28 = 0;
    double new_coeff0_29 = 0;
    double new_coeff0_30 = 0;
    double new_coeff0_31 = 0;
    double new_coeff0_32 = 0;
    double new_coeff0_33 = 0;
    double new_coeff0_34 = 0;
    
    // Loop possible derivatives
    for (unsigned int deriv_num = 0; deriv_num < num_derivatives; deriv_num++)
    {
      // Get values from coefficients array
      new_coeff0_0 = coefficients0[dof][0];
      new_coeff0_1 = coefficients0[dof][1];
      new_coeff0_2 = coefficients0[dof][2];
      new_coeff0_3 = coefficients0[dof][3];
      new_coeff0_4 = coefficients0[dof][4];
      new_coeff0_5 = coefficients0[dof][5];
      new_coeff0_6 = coefficients0[dof][6];
      new_coeff0_7 = coefficients0[dof][7];
      new_coeff0_8 = coefficients0[dof][8];
      new_coeff0_9 = coefficients0[dof][9];
      new_coeff0_10 = coefficients0[dof][10];
      new_coeff0_11 = coefficients0[dof][11];
      new_coeff0_12 = coefficients0[dof][12];
      new_coeff0_13 = coefficients0[dof][13];
      new_coeff0_14 = coefficients0[dof][14];
      new_coeff0_15 = coefficients0[dof][15];
      new_coeff0_16 = coefficients0[dof][16];
      new_coeff0_17 = coefficients0[dof][17];
      new_coeff0_18 = coefficients0[dof][18];
      new_coeff0_19 = coefficients0[dof][19];
      new_coeff0_20 = coefficients0[dof][20];
      new_coeff0_21 = coefficients0[dof][21];
      new_coeff0_22 = coefficients0[dof][22];
      new_coeff0_23 = coefficients0[dof][23];
      new_coeff0_24 = coefficients0[dof][24];
      new_coeff0_25 = coefficients0[dof][25];
      new_coeff0_26 = coefficients0[dof][26];
      new_coeff0_27 = coefficients0[dof][27];
      new_coeff0_28 = coefficients0[dof][28];
      new_coeff0_29 = coefficients0[dof][29];
      new_coeff0_30 = coefficients0[dof][30];
      new_coeff0_31 = coefficients0[dof][31];
      new_coeff0_32 = coefficients0[dof][32];
      new_coeff0_33 = coefficients0[dof][33];
      new_coeff0_34 = coefficients0[dof][34];
    
      // Loop derivative order
      for (unsigned int j = 0; j < n; j++)
      {
        // Update old coefficients
        coeff0_0 = new_coeff0_0;
        coeff0_1 = new_coeff0_1;
        coeff0_2 = new_coeff0_2;
        coeff0_3 = new_coeff0_3;
        coeff0_4 = new_coeff0_4;
        coeff0_5 = new_coeff0_5;
        coeff0_6 = new_coeff0_6;
        coeff0_7 = new_coeff0_7;
        coeff0_8 = new_coeff0_8;
        coeff0_9 = new_coeff0_9;
        coeff0_10 = new_coeff0_10;
        coeff0_11 = new_coeff0_11;
        coeff0_12 = new_coeff0_12;
        coeff0_13 = new_coeff0_13;
        coeff0_14 = new_coeff0_14;
        coeff0_15 = new_coeff0_15;
        coeff0_16 = new_coeff0_16;
        coeff0_17 = new_coeff0_17;
        coeff0_18 = new_coeff0_18;
        coeff0_19 = new_coeff0_19;
        coeff0_20 = new_coeff0_20;
        coeff0_21 = new_coeff0_21;
        coeff0_22 = new_coeff0_22;
        coeff0_23 = new_coeff0_23;
        coeff0_24 = new_coeff0_24;
        coeff0_25 = new_coeff0_25;
        coeff0_26 = new_coeff0_26;
        coeff0_27 = new_coeff0_27;
        coeff0_28 = new_coeff0_28;
        coeff0_29 = new_coeff0_29;
        coeff0_30 = new_coeff0_30;
        coeff0_31 = new_coeff0_31;
        coeff0_32 = new_coeff0_32;
        coeff0_33 = new_coeff0_33;
        coeff0_34 = new_coeff0_34;
    
        if(combinations[deriv_num][j] == 0)
        {
          new_coeff0_0 = coeff0_0*dmats0[0][0] + coeff0_1*dmats0[1][0] + coeff0_2*dmats0[2][0] + coeff0_3*dmats0[3][0] + coeff0_4*dmats0[4][0] + coeff0_5*dmats0[5][0] + coeff0_6*dmats0[6][0] + coeff0_7*dmats0[7][0] + coeff0_8*dmats0[8][0] + coeff0_9*dmats0[9][0] + coeff0_10*dmats0[10][0] + coeff0_11*dmats0[11][0] + coeff0_12*dmats0[12][0] + coeff0_13*dmats0[13][0] + coeff0_14*dmats0[14][0] + coeff0_15*dmats0[15][0] + coeff0_16*dmats0[16][0] + coeff0_17*dmats0[17][0] + coeff0_18*dmats0[18][0] + coeff0_19*dmats0[19][0] + coeff0_20*dmats0[20][0] + coeff0_21*dmats0[21][0] + coeff0_22*dmats0[22][0] + coeff0_23*dmats0[23][0] + coeff0_24*dmats0[24][0] + coeff0_25*dmats0[25][0] + coeff0_26*dmats0[26][0] + coeff0_27*dmats0[27][0] + coeff0_28*dmats0[28][0] + coeff0_29*dmats0[29][0] + coeff0_30*dmats0[30][0] + coeff0_31*dmats0[31][0] + coeff0_32*dmats0[32][0] + coeff0_33*dmats0[33][0] + coeff0_34*dmats0[34][0];
          new_coeff0_1 = coeff0_0*dmats0[0][1] + coeff0_1*dmats0[1][1] + coeff0_2*dmats0[2][1] + coeff0_3*dmats0[3][1] + coeff0_4*dmats0[4][1] + coeff0_5*dmats0[5][1] + coeff0_6*dmats0[6][1] + coeff0_7*dmats0[7][1] + coeff0_8*dmats0[8][1] + coeff0_9*dmats0[9][1] + coeff0_10*dmats0[10][1] + coeff0_11*dmats0[11][1] + coeff0_12*dmats0[12][1] + coeff0_13*dmats0[13][1] + coeff0_14*dmats0[14][1] + coeff0_15*dmats0[15][1] + coeff0_16*dmats0[16][1] + coeff0_17*dmats0[17][1] + coeff0_18*dmats0[18][1] + coeff0_19*dmats0[19][1] + coeff0_20*dmats0[20][1] + coeff0_21*dmats0[21][1] + coeff0_22*dmats0[22][1] + coeff0_23*dmats0[23][1] + coeff0_24*dmats0[24][1] + coeff0_25*dmats0[25][1] + coeff0_26*dmats0[26][1] + coeff0_27*dmats0[27][1] + coeff0_28*dmats0[28][1] + coeff0_29*dmats0[29][1] + coeff0_30*dmats0[30][1] + coeff0_31*dmats0[31][1] + coeff0_32*dmats0[32][1] + coeff0_33*dmats0[33][1] + coeff0_34*dmats0[34][1];
          new_coeff0_2 = coeff0_0*dmats0[0][2] + coeff0_1*dmats0[1][2] + coeff0_2*dmats0[2][2] + coeff0_3*dmats0[3][2] + coeff0_4*dmats0[4][2] + coeff0_5*dmats0[5][2] + coeff0_6*dmats0[6][2] + coeff0_7*dmats0[7][2] + coeff0_8*dmats0[8][2] + coeff0_9*dmats0[9][2] + coeff0_10*dmats0[10][2] + coeff0_11*dmats0[11][2] + coeff0_12*dmats0[12][2] + coeff0_13*dmats0[13][2] + coeff0_14*dmats0[14][2] + coeff0_15*dmats0[15][2] + coeff0_16*dmats0[16][2] + coeff0_17*dmats0[17][2] + coeff0_18*dmats0[18][2] + coeff0_19*dmats0[19][2] + coeff0_20*dmats0[20][2] + coeff0_21*dmats0[21][2] + coeff0_22*dmats0[22][2] + coeff0_23*dmats0[23][2] + coeff0_24*dmats0[24][2] + coeff0_25*dmats0[25][2] + coeff0_26*dmats0[26][2] + coeff0_27*dmats0[27][2] + coeff0_28*dmats0[28][2] + coeff0_29*dmats0[29][2] + coeff0_30*dmats0[30][2] + coeff0_31*dmats0[31][2] + coeff0_32*dmats0[32][2] + coeff0_33*dmats0[33][2] + coeff0_34*dmats0[34][2];
          new_coeff0_3 = coeff0_0*dmats0[0][3] + coeff0_1*dmats0[1][3] + coeff0_2*dmats0[2][3] + coeff0_3*dmats0[3][3] + coeff0_4*dmats0[4][3] + coeff0_5*dmats0[5][3] + coeff0_6*dmats0[6][3] + coeff0_7*dmats0[7][3] + coeff0_8*dmats0[8][3] + coeff0_9*dmats0[9][3] + coeff0_10*dmats0[10][3] + coeff0_11*dmats0[11][3] + coeff0_12*dmats0[12][3] + coeff0_13*dmats0[13][3] + coeff0_14*dmats0[14][3] + coeff0_15*dmats0[15][3] + coeff0_16*dmats0[16][3] + coeff0_17*dmats0[17][3] + coeff0_18*dmats0[18][3] + coeff0_19*dmats0[19][3] + coeff0_20*dmats0[20][3] + coeff0_21*dmats0[21][3] + coeff0_22*dmats0[22][3] + coeff0_23*dmats0[23][3] + coeff0_24*dmats0[24][3] + coeff0_25*dmats0[25][3] + coeff0_26*dmats0[26][3] + coeff0_27*dmats0[27][3] + coeff0_28*dmats0[28][3] + coeff0_29*dmats0[29][3] + coeff0_30*dmats0[30][3] + coeff0_31*dmats0[31][3] + coeff0_32*dmats0[32][3] + coeff0_33*dmats0[33][3] + coeff0_34*dmats0[34][3];
          new_coeff0_4 = coeff0_0*dmats0[0][4] + coeff0_1*dmats0[1][4] + coeff0_2*dmats0[2][4] + coeff0_3*dmats0[3][4] + coeff0_4*dmats0[4][4] + coeff0_5*dmats0[5][4] + coeff0_6*dmats0[6][4] + coeff0_7*dmats0[7][4] + coeff0_8*dmats0[8][4] + coeff0_9*dmats0[9][4] + coeff0_10*dmats0[10][4] + coeff0_11*dmats0[11][4] + coeff0_12*dmats0[12][4] + coeff0_13*dmats0[13][4] + coeff0_14*dmats0[14][4] + coeff0_15*dmats0[15][4] + coeff0_16*dmats0[16][4] + coeff0_17*dmats0[17][4] + coeff0_18*dmats0[18][4] + coeff0_19*dmats0[19][4] + coeff0_20*dmats0[20][4] + coeff0_21*dmats0[21][4] + coeff0_22*dmats0[22][4] + coeff0_23*dmats0[23][4] + coeff0_24*dmats0[24][4] + coeff0_25*dmats0[25][4] + coeff0_26*dmats0[26][4] + coeff0_27*dmats0[27][4] + coeff0_28*dmats0[28][4] + coeff0_29*dmats0[29][4] + coeff0_30*dmats0[30][4] + coeff0_31*dmats0[31][4] + coeff0_32*dmats0[32][4] + coeff0_33*dmats0[33][4] + coeff0_34*dmats0[34][4];
          new_coeff0_5 = coeff0_0*dmats0[0][5] + coeff0_1*dmats0[1][5] + coeff0_2*dmats0[2][5] + coeff0_3*dmats0[3][5] + coeff0_4*dmats0[4][5] + coeff0_5*dmats0[5][5] + coeff0_6*dmats0[6][5] + coeff0_7*dmats0[7][5] + coeff0_8*dmats0[8][5] + coeff0_9*dmats0[9][5] + coeff0_10*dmats0[10][5] + coeff0_11*dmats0[11][5] + coeff0_12*dmats0[12][5] + coeff0_13*dmats0[13][5] + coeff0_14*dmats0[14][5] + coeff0_15*dmats0[15][5] + coeff0_16*dmats0[16][5] + coeff0_17*dmats0[17][5] + coeff0_18*dmats0[18][5] + coeff0_19*dmats0[19][5] + coeff0_20*dmats0[20][5] + coeff0_21*dmats0[21][5] + coeff0_22*dmats0[22][5] + coeff0_23*dmats0[23][5] + coeff0_24*dmats0[24][5] + coeff0_25*dmats0[25][5] + coeff0_26*dmats0[26][5] + coeff0_27*dmats0[27][5] + coeff0_28*dmats0[28][5] + coeff0_29*dmats0[29][5] + coeff0_30*dmats0[30][5] + coeff0_31*dmats0[31][5] + coeff0_32*dmats0[32][5] + coeff0_33*dmats0[33][5] + coeff0_34*dmats0[34][5];
          new_coeff0_6 = coeff0_0*dmats0[0][6] + coeff0_1*dmats0[1][6] + coeff0_2*dmats0[2][6] + coeff0_3*dmats0[3][6] + coeff0_4*dmats0[4][6] + coeff0_5*dmats0[5][6] + coeff0_6*dmats0[6][6] + coeff0_7*dmats0[7][6] + coeff0_8*dmats0[8][6] + coeff0_9*dmats0[9][6] + coeff0_10*dmats0[10][6] + coeff0_11*dmats0[11][6] + coeff0_12*dmats0[12][6] + coeff0_13*dmats0[13][6] + coeff0_14*dmats0[14][6] + coeff0_15*dmats0[15][6] + coeff0_16*dmats0[16][6] + coeff0_17*dmats0[17][6] + coeff0_18*dmats0[18][6] + coeff0_19*dmats0[19][6] + coeff0_20*dmats0[20][6] + coeff0_21*dmats0[21][6] + coeff0_22*dmats0[22][6] + coeff0_23*dmats0[23][6] + coeff0_24*dmats0[24][6] + coeff0_25*dmats0[25][6] + coeff0_26*dmats0[26][6] + coeff0_27*dmats0[27][6] + coeff0_28*dmats0[28][6] + coeff0_29*dmats0[29][6] + coeff0_30*dmats0[30][6] + coeff0_31*dmats0[31][6] + coeff0_32*dmats0[32][6] + coeff0_33*dmats0[33][6] + coeff0_34*dmats0[34][6];
          new_coeff0_7 = coeff0_0*dmats0[0][7] + coeff0_1*dmats0[1][7] + coeff0_2*dmats0[2][7] + coeff0_3*dmats0[3][7] + coeff0_4*dmats0[4][7] + coeff0_5*dmats0[5][7] + coeff0_6*dmats0[6][7] + coeff0_7*dmats0[7][7] + coeff0_8*dmats0[8][7] + coeff0_9*dmats0[9][7] + coeff0_10*dmats0[10][7] + coeff0_11*dmats0[11][7] + coeff0_12*dmats0[12][7] + coeff0_13*dmats0[13][7] + coeff0_14*dmats0[14][7] + coeff0_15*dmats0[15][7] + coeff0_16*dmats0[16][7] + coeff0_17*dmats0[17][7] + coeff0_18*dmats0[18][7] + coeff0_19*dmats0[19][7] + coeff0_20*dmats0[20][7] + coeff0_21*dmats0[21][7] + coeff0_22*dmats0[22][7] + coeff0_23*dmats0[23][7] + coeff0_24*dmats0[24][7] + coeff0_25*dmats0[25][7] + coeff0_26*dmats0[26][7] + coeff0_27*dmats0[27][7] + coeff0_28*dmats0[28][7] + coeff0_29*dmats0[29][7] + coeff0_30*dmats0[30][7] + coeff0_31*dmats0[31][7] + coeff0_32*dmats0[32][7] + coeff0_33*dmats0[33][7] + coeff0_34*dmats0[34][7];
          new_coeff0_8 = coeff0_0*dmats0[0][8] + coeff0_1*dmats0[1][8] + coeff0_2*dmats0[2][8] + coeff0_3*dmats0[3][8] + coeff0_4*dmats0[4][8] + coeff0_5*dmats0[5][8] + coeff0_6*dmats0[6][8] + coeff0_7*dmats0[7][8] + coeff0_8*dmats0[8][8] + coeff0_9*dmats0[9][8] + coeff0_10*dmats0[10][8] + coeff0_11*dmats0[11][8] + coeff0_12*dmats0[12][8] + coeff0_13*dmats0[13][8] + coeff0_14*dmats0[14][8] + coeff0_15*dmats0[15][8] + coeff0_16*dmats0[16][8] + coeff0_17*dmats0[17][8] + coeff0_18*dmats0[18][8] + coeff0_19*dmats0[19][8] + coeff0_20*dmats0[20][8] + coeff0_21*dmats0[21][8] + coeff0_22*dmats0[22][8] + coeff0_23*dmats0[23][8] + coeff0_24*dmats0[24][8] + coeff0_25*dmats0[25][8] + coeff0_26*dmats0[26][8] + coeff0_27*dmats0[27][8] + coeff0_28*dmats0[28][8] + coeff0_29*dmats0[29][8] + coeff0_30*dmats0[30][8] + coeff0_31*dmats0[31][8] + coeff0_32*dmats0[32][8] + coeff0_33*dmats0[33][8] + coeff0_34*dmats0[34][8];
          new_coeff0_9 = coeff0_0*dmats0[0][9] + coeff0_1*dmats0[1][9] + coeff0_2*dmats0[2][9] + coeff0_3*dmats0[3][9] + coeff0_4*dmats0[4][9] + coeff0_5*dmats0[5][9] + coeff0_6*dmats0[6][9] + coeff0_7*dmats0[7][9] + coeff0_8*dmats0[8][9] + coeff0_9*dmats0[9][9] + coeff0_10*dmats0[10][9] + coeff0_11*dmats0[11][9] + coeff0_12*dmats0[12][9] + coeff0_13*dmats0[13][9] + coeff0_14*dmats0[14][9] + coeff0_15*dmats0[15][9] + coeff0_16*dmats0[16][9] + coeff0_17*dmats0[17][9] + coeff0_18*dmats0[18][9] + coeff0_19*dmats0[19][9] + coeff0_20*dmats0[20][9] + coeff0_21*dmats0[21][9] + coeff0_22*dmats0[22][9] + coeff0_23*dmats0[23][9] + coeff0_24*dmats0[24][9] + coeff0_25*dmats0[25][9] + coeff0_26*dmats0[26][9] + coeff0_27*dmats0[27][9] + coeff0_28*dmats0[28][9] + coeff0_29*dmats0[29][9] + coeff0_30*dmats0[30][9] + coeff0_31*dmats0[31][9] + coeff0_32*dmats0[32][9] + coeff0_33*dmats0[33][9] + coeff0_34*dmats0[34][9];
          new_coeff0_10 = coeff0_0*dmats0[0][10] + coeff0_1*dmats0[1][10] + coeff0_2*dmats0[2][10] + coeff0_3*dmats0[3][10] + coeff0_4*dmats0[4][10] + coeff0_5*dmats0[5][10] + coeff0_6*dmats0[6][10] + coeff0_7*dmats0[7][10] + coeff0_8*dmats0[8][10] + coeff0_9*dmats0[9][10] + coeff0_10*dmats0[10][10] + coeff0_11*dmats0[11][10] + coeff0_12*dmats0[12][10] + coeff0_13*dmats0[13][10] + coeff0_14*dmats0[14][10] + coeff0_15*dmats0[15][10] + coeff0_16*dmats0[16][10] + coeff0_17*dmats0[17][10] + coeff0_18*dmats0[18][10] + coeff0_19*dmats0[19][10] + coeff0_20*dmats0[20][10] + coeff0_21*dmats0[21][10] + coeff0_22*dmats0[22][10] + coeff0_23*dmats0[23][10] + coeff0_24*dmats0[24][10] + coeff0_25*dmats0[25][10] + coeff0_26*dmats0[26][10] + coeff0_27*dmats0[27][10] + coeff0_28*dmats0[28][10] + coeff0_29*dmats0[29][10] + coeff0_30*dmats0[30][10] + coeff0_31*dmats0[31][10] + coeff0_32*dmats0[32][10] + coeff0_33*dmats0[33][10] + coeff0_34*dmats0[34][10];
          new_coeff0_11 = coeff0_0*dmats0[0][11] + coeff0_1*dmats0[1][11] + coeff0_2*dmats0[2][11] + coeff0_3*dmats0[3][11] + coeff0_4*dmats0[4][11] + coeff0_5*dmats0[5][11] + coeff0_6*dmats0[6][11] + coeff0_7*dmats0[7][11] + coeff0_8*dmats0[8][11] + coeff0_9*dmats0[9][11] + coeff0_10*dmats0[10][11] + coeff0_11*dmats0[11][11] + coeff0_12*dmats0[12][11] + coeff0_13*dmats0[13][11] + coeff0_14*dmats0[14][11] + coeff0_15*dmats0[15][11] + coeff0_16*dmats0[16][11] + coeff0_17*dmats0[17][11] + coeff0_18*dmats0[18][11] + coeff0_19*dmats0[19][11] + coeff0_20*dmats0[20][11] + coeff0_21*dmats0[21][11] + coeff0_22*dmats0[22][11] + coeff0_23*dmats0[23][11] + coeff0_24*dmats0[24][11] + coeff0_25*dmats0[25][11] + coeff0_26*dmats0[26][11] + coeff0_27*dmats0[27][11] + coeff0_28*dmats0[28][11] + coeff0_29*dmats0[29][11] + coeff0_30*dmats0[30][11] + coeff0_31*dmats0[31][11] + coeff0_32*dmats0[32][11] + coeff0_33*dmats0[33][11] + coeff0_34*dmats0[34][11];
          new_coeff0_12 = coeff0_0*dmats0[0][12] + coeff0_1*dmats0[1][12] + coeff0_2*dmats0[2][12] + coeff0_3*dmats0[3][12] + coeff0_4*dmats0[4][12] + coeff0_5*dmats0[5][12] + coeff0_6*dmats0[6][12] + coeff0_7*dmats0[7][12] + coeff0_8*dmats0[8][12] + coeff0_9*dmats0[9][12] + coeff0_10*dmats0[10][12] + coeff0_11*dmats0[11][12] + coeff0_12*dmats0[12][12] + coeff0_13*dmats0[13][12] + coeff0_14*dmats0[14][12] + coeff0_15*dmats0[15][12] + coeff0_16*dmats0[16][12] + coeff0_17*dmats0[17][12] + coeff0_18*dmats0[18][12] + coeff0_19*dmats0[19][12] + coeff0_20*dmats0[20][12] + coeff0_21*dmats0[21][12] + coeff0_22*dmats0[22][12] + coeff0_23*dmats0[23][12] + coeff0_24*dmats0[24][12] + coeff0_25*dmats0[25][12] + coeff0_26*dmats0[26][12] + coeff0_27*dmats0[27][12] + coeff0_28*dmats0[28][12] + coeff0_29*dmats0[29][12] + coeff0_30*dmats0[30][12] + coeff0_31*dmats0[31][12] + coeff0_32*dmats0[32][12] + coeff0_33*dmats0[33][12] + coeff0_34*dmats0[34][12];
          new_coeff0_13 = coeff0_0*dmats0[0][13] + coeff0_1*dmats0[1][13] + coeff0_2*dmats0[2][13] + coeff0_3*dmats0[3][13] + coeff0_4*dmats0[4][13] + coeff0_5*dmats0[5][13] + coeff0_6*dmats0[6][13] + coeff0_7*dmats0[7][13] + coeff0_8*dmats0[8][13] + coeff0_9*dmats0[9][13] + coeff0_10*dmats0[10][13] + coeff0_11*dmats0[11][13] + coeff0_12*dmats0[12][13] + coeff0_13*dmats0[13][13] + coeff0_14*dmats0[14][13] + coeff0_15*dmats0[15][13] + coeff0_16*dmats0[16][13] + coeff0_17*dmats0[17][13] + coeff0_18*dmats0[18][13] + coeff0_19*dmats0[19][13] + coeff0_20*dmats0[20][13] + coeff0_21*dmats0[21][13] + coeff0_22*dmats0[22][13] + coeff0_23*dmats0[23][13] + coeff0_24*dmats0[24][13] + coeff0_25*dmats0[25][13] + coeff0_26*dmats0[26][13] + coeff0_27*dmats0[27][13] + coeff0_28*dmats0[28][13] + coeff0_29*dmats0[29][13] + coeff0_30*dmats0[30][13] + coeff0_31*dmats0[31][13] + coeff0_32*dmats0[32][13] + coeff0_33*dmats0[33][13] + coeff0_34*dmats0[34][13];
          new_coeff0_14 = coeff0_0*dmats0[0][14] + coeff0_1*dmats0[1][14] + coeff0_2*dmats0[2][14] + coeff0_3*dmats0[3][14] + coeff0_4*dmats0[4][14] + coeff0_5*dmats0[5][14] + coeff0_6*dmats0[6][14] + coeff0_7*dmats0[7][14] + coeff0_8*dmats0[8][14] + coeff0_9*dmats0[9][14] + coeff0_10*dmats0[10][14] + coeff0_11*dmats0[11][14] + coeff0_12*dmats0[12][14] + coeff0_13*dmats0[13][14] + coeff0_14*dmats0[14][14] + coeff0_15*dmats0[15][14] + coeff0_16*dmats0[16][14] + coeff0_17*dmats0[17][14] + coeff0_18*dmats0[18][14] + coeff0_19*dmats0[19][14] + coeff0_20*dmats0[20][14] + coeff0_21*dmats0[21][14] + coeff0_22*dmats0[22][14] + coeff0_23*dmats0[23][14] + coeff0_24*dmats0[24][14] + coeff0_25*dmats0[25][14] + coeff0_26*dmats0[26][14] + coeff0_27*dmats0[27][14] + coeff0_28*dmats0[28][14] + coeff0_29*dmats0[29][14] + coeff0_30*dmats0[30][14] + coeff0_31*dmats0[31][14] + coeff0_32*dmats0[32][14] + coeff0_33*dmats0[33][14] + coeff0_34*dmats0[34][14];
          new_coeff0_15 = coeff0_0*dmats0[0][15] + coeff0_1*dmats0[1][15] + coeff0_2*dmats0[2][15] + coeff0_3*dmats0[3][15] + coeff0_4*dmats0[4][15] + coeff0_5*dmats0[5][15] + coeff0_6*dmats0[6][15] + coeff0_7*dmats0[7][15] + coeff0_8*dmats0[8][15] + coeff0_9*dmats0[9][15] + coeff0_10*dmats0[10][15] + coeff0_11*dmats0[11][15] + coeff0_12*dmats0[12][15] + coeff0_13*dmats0[13][15] + coeff0_14*dmats0[14][15] + coeff0_15*dmats0[15][15] + coeff0_16*dmats0[16][15] + coeff0_17*dmats0[17][15] + coeff0_18*dmats0[18][15] + coeff0_19*dmats0[19][15] + coeff0_20*dmats0[20][15] + coeff0_21*dmats0[21][15] + coeff0_22*dmats0[22][15] + coeff0_23*dmats0[23][15] + coeff0_24*dmats0[24][15] + coeff0_25*dmats0[25][15] + coeff0_26*dmats0[26][15] + coeff0_27*dmats0[27][15] + coeff0_28*dmats0[28][15] + coeff0_29*dmats0[29][15] + coeff0_30*dmats0[30][15] + coeff0_31*dmats0[31][15] + coeff0_32*dmats0[32][15] + coeff0_33*dmats0[33][15] + coeff0_34*dmats0[34][15];
          new_coeff0_16 = coeff0_0*dmats0[0][16] + coeff0_1*dmats0[1][16] + coeff0_2*dmats0[2][16] + coeff0_3*dmats0[3][16] + coeff0_4*dmats0[4][16] + coeff0_5*dmats0[5][16] + coeff0_6*dmats0[6][16] + coeff0_7*dmats0[7][16] + coeff0_8*dmats0[8][16] + coeff0_9*dmats0[9][16] + coeff0_10*dmats0[10][16] + coeff0_11*dmats0[11][16] + coeff0_12*dmats0[12][16] + coeff0_13*dmats0[13][16] + coeff0_14*dmats0[14][16] + coeff0_15*dmats0[15][16] + coeff0_16*dmats0[16][16] + coeff0_17*dmats0[17][16] + coeff0_18*dmats0[18][16] + coeff0_19*dmats0[19][16] + coeff0_20*dmats0[20][16] + coeff0_21*dmats0[21][16] + coeff0_22*dmats0[22][16] + coeff0_23*dmats0[23][16] + coeff0_24*dmats0[24][16] + coeff0_25*dmats0[25][16] + coeff0_26*dmats0[26][16] + coeff0_27*dmats0[27][16] + coeff0_28*dmats0[28][16] + coeff0_29*dmats0[29][16] + coeff0_30*dmats0[30][16] + coeff0_31*dmats0[31][16] + coeff0_32*dmats0[32][16] + coeff0_33*dmats0[33][16] + coeff0_34*dmats0[34][16];
          new_coeff0_17 = coeff0_0*dmats0[0][17] + coeff0_1*dmats0[1][17] + coeff0_2*dmats0[2][17] + coeff0_3*dmats0[3][17] + coeff0_4*dmats0[4][17] + coeff0_5*dmats0[5][17] + coeff0_6*dmats0[6][17] + coeff0_7*dmats0[7][17] + coeff0_8*dmats0[8][17] + coeff0_9*dmats0[9][17] + coeff0_10*dmats0[10][17] + coeff0_11*dmats0[11][17] + coeff0_12*dmats0[12][17] + coeff0_13*dmats0[13][17] + coeff0_14*dmats0[14][17] + coeff0_15*dmats0[15][17] + coeff0_16*dmats0[16][17] + coeff0_17*dmats0[17][17] + coeff0_18*dmats0[18][17] + coeff0_19*dmats0[19][17] + coeff0_20*dmats0[20][17] + coeff0_21*dmats0[21][17] + coeff0_22*dmats0[22][17] + coeff0_23*dmats0[23][17] + coeff0_24*dmats0[24][17] + coeff0_25*dmats0[25][17] + coeff0_26*dmats0[26][17] + coeff0_27*dmats0[27][17] + coeff0_28*dmats0[28][17] + coeff0_29*dmats0[29][17] + coeff0_30*dmats0[30][17] + coeff0_31*dmats0[31][17] + coeff0_32*dmats0[32][17] + coeff0_33*dmats0[33][17] + coeff0_34*dmats0[34][17];
          new_coeff0_18 = coeff0_0*dmats0[0][18] + coeff0_1*dmats0[1][18] + coeff0_2*dmats0[2][18] + coeff0_3*dmats0[3][18] + coeff0_4*dmats0[4][18] + coeff0_5*dmats0[5][18] + coeff0_6*dmats0[6][18] + coeff0_7*dmats0[7][18] + coeff0_8*dmats0[8][18] + coeff0_9*dmats0[9][18] + coeff0_10*dmats0[10][18] + coeff0_11*dmats0[11][18] + coeff0_12*dmats0[12][18] + coeff0_13*dmats0[13][18] + coeff0_14*dmats0[14][18] + coeff0_15*dmats0[15][18] + coeff0_16*dmats0[16][18] + coeff0_17*dmats0[17][18] + coeff0_18*dmats0[18][18] + coeff0_19*dmats0[19][18] + coeff0_20*dmats0[20][18] + coeff0_21*dmats0[21][18] + coeff0_22*dmats0[22][18] + coeff0_23*dmats0[23][18] + coeff0_24*dmats0[24][18] + coeff0_25*dmats0[25][18] + coeff0_26*dmats0[26][18] + coeff0_27*dmats0[27][18] + coeff0_28*dmats0[28][18] + coeff0_29*dmats0[29][18] + coeff0_30*dmats0[30][18] + coeff0_31*dmats0[31][18] + coeff0_32*dmats0[32][18] + coeff0_33*dmats0[33][18] + coeff0_34*dmats0[34][18];
          new_coeff0_19 = coeff0_0*dmats0[0][19] + coeff0_1*dmats0[1][19] + coeff0_2*dmats0[2][19] + coeff0_3*dmats0[3][19] + coeff0_4*dmats0[4][19] + coeff0_5*dmats0[5][19] + coeff0_6*dmats0[6][19] + coeff0_7*dmats0[7][19] + coeff0_8*dmats0[8][19] + coeff0_9*dmats0[9][19] + coeff0_10*dmats0[10][19] + coeff0_11*dmats0[11][19] + coeff0_12*dmats0[12][19] + coeff0_13*dmats0[13][19] + coeff0_14*dmats0[14][19] + coeff0_15*dmats0[15][19] + coeff0_16*dmats0[16][19] + coeff0_17*dmats0[17][19] + coeff0_18*dmats0[18][19] + coeff0_19*dmats0[19][19] + coeff0_20*dmats0[20][19] + coeff0_21*dmats0[21][19] + coeff0_22*dmats0[22][19] + coeff0_23*dmats0[23][19] + coeff0_24*dmats0[24][19] + coeff0_25*dmats0[25][19] + coeff0_26*dmats0[26][19] + coeff0_27*dmats0[27][19] + coeff0_28*dmats0[28][19] + coeff0_29*dmats0[29][19] + coeff0_30*dmats0[30][19] + coeff0_31*dmats0[31][19] + coeff0_32*dmats0[32][19] + coeff0_33*dmats0[33][19] + coeff0_34*dmats0[34][19];
          new_coeff0_20 = coeff0_0*dmats0[0][20] + coeff0_1*dmats0[1][20] + coeff0_2*dmats0[2][20] + coeff0_3*dmats0[3][20] + coeff0_4*dmats0[4][20] + coeff0_5*dmats0[5][20] + coeff0_6*dmats0[6][20] + coeff0_7*dmats0[7][20] + coeff0_8*dmats0[8][20] + coeff0_9*dmats0[9][20] + coeff0_10*dmats0[10][20] + coeff0_11*dmats0[11][20] + coeff0_12*dmats0[12][20] + coeff0_13*dmats0[13][20] + coeff0_14*dmats0[14][20] + coeff0_15*dmats0[15][20] + coeff0_16*dmats0[16][20] + coeff0_17*dmats0[17][20] + coeff0_18*dmats0[18][20] + coeff0_19*dmats0[19][20] + coeff0_20*dmats0[20][20] + coeff0_21*dmats0[21][20] + coeff0_22*dmats0[22][20] + coeff0_23*dmats0[23][20] + coeff0_24*dmats0[24][20] + coeff0_25*dmats0[25][20] + coeff0_26*dmats0[26][20] + coeff0_27*dmats0[27][20] + coeff0_28*dmats0[28][20] + coeff0_29*dmats0[29][20] + coeff0_30*dmats0[30][20] + coeff0_31*dmats0[31][20] + coeff0_32*dmats0[32][20] + coeff0_33*dmats0[33][20] + coeff0_34*dmats0[34][20];
          new_coeff0_21 = coeff0_0*dmats0[0][21] + coeff0_1*dmats0[1][21] + coeff0_2*dmats0[2][21] + coeff0_3*dmats0[3][21] + coeff0_4*dmats0[4][21] + coeff0_5*dmats0[5][21] + coeff0_6*dmats0[6][21] + coeff0_7*dmats0[7][21] + coeff0_8*dmats0[8][21] + coeff0_9*dmats0[9][21] + coeff0_10*dmats0[10][21] + coeff0_11*dmats0[11][21] + coeff0_12*dmats0[12][21] + coeff0_13*dmats0[13][21] + coeff0_14*dmats0[14][21] + coeff0_15*dmats0[15][21] + coeff0_16*dmats0[16][21] + coeff0_17*dmats0[17][21] + coeff0_18*dmats0[18][21] + coeff0_19*dmats0[19][21] + coeff0_20*dmats0[20][21] + coeff0_21*dmats0[21][21] + coeff0_22*dmats0[22][21] + coeff0_23*dmats0[23][21] + coeff0_24*dmats0[24][21] + coeff0_25*dmats0[25][21] + coeff0_26*dmats0[26][21] + coeff0_27*dmats0[27][21] + coeff0_28*dmats0[28][21] + coeff0_29*dmats0[29][21] + coeff0_30*dmats0[30][21] + coeff0_31*dmats0[31][21] + coeff0_32*dmats0[32][21] + coeff0_33*dmats0[33][21] + coeff0_34*dmats0[34][21];
          new_coeff0_22 = coeff0_0*dmats0[0][22] + coeff0_1*dmats0[1][22] + coeff0_2*dmats0[2][22] + coeff0_3*dmats0[3][22] + coeff0_4*dmats0[4][22] + coeff0_5*dmats0[5][22] + coeff0_6*dmats0[6][22] + coeff0_7*dmats0[7][22] + coeff0_8*dmats0[8][22] + coeff0_9*dmats0[9][22] + coeff0_10*dmats0[10][22] + coeff0_11*dmats0[11][22] + coeff0_12*dmats0[12][22] + coeff0_13*dmats0[13][22] + coeff0_14*dmats0[14][22] + coeff0_15*dmats0[15][22] + coeff0_16*dmats0[16][22] + coeff0_17*dmats0[17][22] + coeff0_18*dmats0[18][22] + coeff0_19*dmats0[19][22] + coeff0_20*dmats0[20][22] + coeff0_21*dmats0[21][22] + coeff0_22*dmats0[22][22] + coeff0_23*dmats0[23][22] + coeff0_24*dmats0[24][22] + coeff0_25*dmats0[25][22] + coeff0_26*dmats0[26][22] + coeff0_27*dmats0[27][22] + coeff0_28*dmats0[28][22] + coeff0_29*dmats0[29][22] + coeff0_30*dmats0[30][22] + coeff0_31*dmats0[31][22] + coeff0_32*dmats0[32][22] + coeff0_33*dmats0[33][22] + coeff0_34*dmats0[34][22];
          new_coeff0_23 = coeff0_0*dmats0[0][23] + coeff0_1*dmats0[1][23] + coeff0_2*dmats0[2][23] + coeff0_3*dmats0[3][23] + coeff0_4*dmats0[4][23] + coeff0_5*dmats0[5][23] + coeff0_6*dmats0[6][23] + coeff0_7*dmats0[7][23] + coeff0_8*dmats0[8][23] + coeff0_9*dmats0[9][23] + coeff0_10*dmats0[10][23] + coeff0_11*dmats0[11][23] + coeff0_12*dmats0[12][23] + coeff0_13*dmats0[13][23] + coeff0_14*dmats0[14][23] + coeff0_15*dmats0[15][23] + coeff0_16*dmats0[16][23] + coeff0_17*dmats0[17][23] + coeff0_18*dmats0[18][23] + coeff0_19*dmats0[19][23] + coeff0_20*dmats0[20][23] + coeff0_21*dmats0[21][23] + coeff0_22*dmats0[22][23] + coeff0_23*dmats0[23][23] + coeff0_24*dmats0[24][23] + coeff0_25*dmats0[25][23] + coeff0_26*dmats0[26][23] + coeff0_27*dmats0[27][23] + coeff0_28*dmats0[28][23] + coeff0_29*dmats0[29][23] + coeff0_30*dmats0[30][23] + coeff0_31*dmats0[31][23] + coeff0_32*dmats0[32][23] + coeff0_33*dmats0[33][23] + coeff0_34*dmats0[34][23];
          new_coeff0_24 = coeff0_0*dmats0[0][24] + coeff0_1*dmats0[1][24] + coeff0_2*dmats0[2][24] + coeff0_3*dmats0[3][24] + coeff0_4*dmats0[4][24] + coeff0_5*dmats0[5][24] + coeff0_6*dmats0[6][24] + coeff0_7*dmats0[7][24] + coeff0_8*dmats0[8][24] + coeff0_9*dmats0[9][24] + coeff0_10*dmats0[10][24] + coeff0_11*dmats0[11][24] + coeff0_12*dmats0[12][24] + coeff0_13*dmats0[13][24] + coeff0_14*dmats0[14][24] + coeff0_15*dmats0[15][24] + coeff0_16*dmats0[16][24] + coeff0_17*dmats0[17][24] + coeff0_18*dmats0[18][24] + coeff0_19*dmats0[19][24] + coeff0_20*dmats0[20][24] + coeff0_21*dmats0[21][24] + coeff0_22*dmats0[22][24] + coeff0_23*dmats0[23][24] + coeff0_24*dmats0[24][24] + coeff0_25*dmats0[25][24] + coeff0_26*dmats0[26][24] + coeff0_27*dmats0[27][24] + coeff0_28*dmats0[28][24] + coeff0_29*dmats0[29][24] + coeff0_30*dmats0[30][24] + coeff0_31*dmats0[31][24] + coeff0_32*dmats0[32][24] + coeff0_33*dmats0[33][24] + coeff0_34*dmats0[34][24];
          new_coeff0_25 = coeff0_0*dmats0[0][25] + coeff0_1*dmats0[1][25] + coeff0_2*dmats0[2][25] + coeff0_3*dmats0[3][25] + coeff0_4*dmats0[4][25] + coeff0_5*dmats0[5][25] + coeff0_6*dmats0[6][25] + coeff0_7*dmats0[7][25] + coeff0_8*dmats0[8][25] + coeff0_9*dmats0[9][25] + coeff0_10*dmats0[10][25] + coeff0_11*dmats0[11][25] + coeff0_12*dmats0[12][25] + coeff0_13*dmats0[13][25] + coeff0_14*dmats0[14][25] + coeff0_15*dmats0[15][25] + coeff0_16*dmats0[16][25] + coeff0_17*dmats0[17][25] + coeff0_18*dmats0[18][25] + coeff0_19*dmats0[19][25] + coeff0_20*dmats0[20][25] + coeff0_21*dmats0[21][25] + coeff0_22*dmats0[22][25] + coeff0_23*dmats0[23][25] + coeff0_24*dmats0[24][25] + coeff0_25*dmats0[25][25] + coeff0_26*dmats0[26][25] + coeff0_27*dmats0[27][25] + coeff0_28*dmats0[28][25] + coeff0_29*dmats0[29][25] + coeff0_30*dmats0[30][25] + coeff0_31*dmats0[31][25] + coeff0_32*dmats0[32][25] + coeff0_33*dmats0[33][25] + coeff0_34*dmats0[34][25];
          new_coeff0_26 = coeff0_0*dmats0[0][26] + coeff0_1*dmats0[1][26] + coeff0_2*dmats0[2][26] + coeff0_3*dmats0[3][26] + coeff0_4*dmats0[4][26] + coeff0_5*dmats0[5][26] + coeff0_6*dmats0[6][26] + coeff0_7*dmats0[7][26] + coeff0_8*dmats0[8][26] + coeff0_9*dmats0[9][26] + coeff0_10*dmats0[10][26] + coeff0_11*dmats0[11][26] + coeff0_12*dmats0[12][26] + coeff0_13*dmats0[13][26] + coeff0_14*dmats0[14][26] + coeff0_15*dmats0[15][26] + coeff0_16*dmats0[16][26] + coeff0_17*dmats0[17][26] + coeff0_18*dmats0[18][26] + coeff0_19*dmats0[19][26] + coeff0_20*dmats0[20][26] + coeff0_21*dmats0[21][26] + coeff0_22*dmats0[22][26] + coeff0_23*dmats0[23][26] + coeff0_24*dmats0[24][26] + coeff0_25*dmats0[25][26] + coeff0_26*dmats0[26][26] + coeff0_27*dmats0[27][26] + coeff0_28*dmats0[28][26] + coeff0_29*dmats0[29][26] + coeff0_30*dmats0[30][26] + coeff0_31*dmats0[31][26] + coeff0_32*dmats0[32][26] + coeff0_33*dmats0[33][26] + coeff0_34*dmats0[34][26];
          new_coeff0_27 = coeff0_0*dmats0[0][27] + coeff0_1*dmats0[1][27] + coeff0_2*dmats0[2][27] + coeff0_3*dmats0[3][27] + coeff0_4*dmats0[4][27] + coeff0_5*dmats0[5][27] + coeff0_6*dmats0[6][27] + coeff0_7*dmats0[7][27] + coeff0_8*dmats0[8][27] + coeff0_9*dmats0[9][27] + coeff0_10*dmats0[10][27] + coeff0_11*dmats0[11][27] + coeff0_12*dmats0[12][27] + coeff0_13*dmats0[13][27] + coeff0_14*dmats0[14][27] + coeff0_15*dmats0[15][27] + coeff0_16*dmats0[16][27] + coeff0_17*dmats0[17][27] + coeff0_18*dmats0[18][27] + coeff0_19*dmats0[19][27] + coeff0_20*dmats0[20][27] + coeff0_21*dmats0[21][27] + coeff0_22*dmats0[22][27] + coeff0_23*dmats0[23][27] + coeff0_24*dmats0[24][27] + coeff0_25*dmats0[25][27] + coeff0_26*dmats0[26][27] + coeff0_27*dmats0[27][27] + coeff0_28*dmats0[28][27] + coeff0_29*dmats0[29][27] + coeff0_30*dmats0[30][27] + coeff0_31*dmats0[31][27] + coeff0_32*dmats0[32][27] + coeff0_33*dmats0[33][27] + coeff0_34*dmats0[34][27];
          new_coeff0_28 = coeff0_0*dmats0[0][28] + coeff0_1*dmats0[1][28] + coeff0_2*dmats0[2][28] + coeff0_3*dmats0[3][28] + coeff0_4*dmats0[4][28] + coeff0_5*dmats0[5][28] + coeff0_6*dmats0[6][28] + coeff0_7*dmats0[7][28] + coeff0_8*dmats0[8][28] + coeff0_9*dmats0[9][28] + coeff0_10*dmats0[10][28] + coeff0_11*dmats0[11][28] + coeff0_12*dmats0[12][28] + coeff0_13*dmats0[13][28] + coeff0_14*dmats0[14][28] + coeff0_15*dmats0[15][28] + coeff0_16*dmats0[16][28] + coeff0_17*dmats0[17][28] + coeff0_18*dmats0[18][28] + coeff0_19*dmats0[19][28] + coeff0_20*dmats0[20][28] + coeff0_21*dmats0[21][28] + coeff0_22*dmats0[22][28] + coeff0_23*dmats0[23][28] + coeff0_24*dmats0[24][28] + coeff0_25*dmats0[25][28] + coeff0_26*dmats0[26][28] + coeff0_27*dmats0[27][28] + coeff0_28*dmats0[28][28] + coeff0_29*dmats0[29][28] + coeff0_30*dmats0[30][28] + coeff0_31*dmats0[31][28] + coeff0_32*dmats0[32][28] + coeff0_33*dmats0[33][28] + coeff0_34*dmats0[34][28];
          new_coeff0_29 = coeff0_0*dmats0[0][29] + coeff0_1*dmats0[1][29] + coeff0_2*dmats0[2][29] + coeff0_3*dmats0[3][29] + coeff0_4*dmats0[4][29] + coeff0_5*dmats0[5][29] + coeff0_6*dmats0[6][29] + coeff0_7*dmats0[7][29] + coeff0_8*dmats0[8][29] + coeff0_9*dmats0[9][29] + coeff0_10*dmats0[10][29] + coeff0_11*dmats0[11][29] + coeff0_12*dmats0[12][29] + coeff0_13*dmats0[13][29] + coeff0_14*dmats0[14][29] + coeff0_15*dmats0[15][29] + coeff0_16*dmats0[16][29] + coeff0_17*dmats0[17][29] + coeff0_18*dmats0[18][29] + coeff0_19*dmats0[19][29] + coeff0_20*dmats0[20][29] + coeff0_21*dmats0[21][29] + coeff0_22*dmats0[22][29] + coeff0_23*dmats0[23][29] + coeff0_24*dmats0[24][29] + coeff0_25*dmats0[25][29] + coeff0_26*dmats0[26][29] + coeff0_27*dmats0[27][29] + coeff0_28*dmats0[28][29] + coeff0_29*dmats0[29][29] + coeff0_30*dmats0[30][29] + coeff0_31*dmats0[31][29] + coeff0_32*dmats0[32][29] + coeff0_33*dmats0[33][29] + coeff0_34*dmats0[34][29];
          new_coeff0_30 = coeff0_0*dmats0[0][30] + coeff0_1*dmats0[1][30] + coeff0_2*dmats0[2][30] + coeff0_3*dmats0[3][30] + coeff0_4*dmats0[4][30] + coeff0_5*dmats0[5][30] + coeff0_6*dmats0[6][30] + coeff0_7*dmats0[7][30] + coeff0_8*dmats0[8][30] + coeff0_9*dmats0[9][30] + coeff0_10*dmats0[10][30] + coeff0_11*dmats0[11][30] + coeff0_12*dmats0[12][30] + coeff0_13*dmats0[13][30] + coeff0_14*dmats0[14][30] + coeff0_15*dmats0[15][30] + coeff0_16*dmats0[16][30] + coeff0_17*dmats0[17][30] + coeff0_18*dmats0[18][30] + coeff0_19*dmats0[19][30] + coeff0_20*dmats0[20][30] + coeff0_21*dmats0[21][30] + coeff0_22*dmats0[22][30] + coeff0_23*dmats0[23][30] + coeff0_24*dmats0[24][30] + coeff0_25*dmats0[25][30] + coeff0_26*dmats0[26][30] + coeff0_27*dmats0[27][30] + coeff0_28*dmats0[28][30] + coeff0_29*dmats0[29][30] + coeff0_30*dmats0[30][30] + coeff0_31*dmats0[31][30] + coeff0_32*dmats0[32][30] + coeff0_33*dmats0[33][30] + coeff0_34*dmats0[34][30];
          new_coeff0_31 = coeff0_0*dmats0[0][31] + coeff0_1*dmats0[1][31] + coeff0_2*dmats0[2][31] + coeff0_3*dmats0[3][31] + coeff0_4*dmats0[4][31] + coeff0_5*dmats0[5][31] + coeff0_6*dmats0[6][31] + coeff0_7*dmats0[7][31] + coeff0_8*dmats0[8][31] + coeff0_9*dmats0[9][31] + coeff0_10*dmats0[10][31] + coeff0_11*dmats0[11][31] + coeff0_12*dmats0[12][31] + coeff0_13*dmats0[13][31] + coeff0_14*dmats0[14][31] + coeff0_15*dmats0[15][31] + coeff0_16*dmats0[16][31] + coeff0_17*dmats0[17][31] + coeff0_18*dmats0[18][31] + coeff0_19*dmats0[19][31] + coeff0_20*dmats0[20][31] + coeff0_21*dmats0[21][31] + coeff0_22*dmats0[22][31] + coeff0_23*dmats0[23][31] + coeff0_24*dmats0[24][31] + coeff0_25*dmats0[25][31] + coeff0_26*dmats0[26][31] + coeff0_27*dmats0[27][31] + coeff0_28*dmats0[28][31] + coeff0_29*dmats0[29][31] + coeff0_30*dmats0[30][31] + coeff0_31*dmats0[31][31] + coeff0_32*dmats0[32][31] + coeff0_33*dmats0[33][31] + coeff0_34*dmats0[34][31];
          new_coeff0_32 = coeff0_0*dmats0[0][32] + coeff0_1*dmats0[1][32] + coeff0_2*dmats0[2][32] + coeff0_3*dmats0[3][32] + coeff0_4*dmats0[4][32] + coeff0_5*dmats0[5][32] + coeff0_6*dmats0[6][32] + coeff0_7*dmats0[7][32] + coeff0_8*dmats0[8][32] + coeff0_9*dmats0[9][32] + coeff0_10*dmats0[10][32] + coeff0_11*dmats0[11][32] + coeff0_12*dmats0[12][32] + coeff0_13*dmats0[13][32] + coeff0_14*dmats0[14][32] + coeff0_15*dmats0[15][32] + coeff0_16*dmats0[16][32] + coeff0_17*dmats0[17][32] + coeff0_18*dmats0[18][32] + coeff0_19*dmats0[19][32] + coeff0_20*dmats0[20][32] + coeff0_21*dmats0[21][32] + coeff0_22*dmats0[22][32] + coeff0_23*dmats0[23][32] + coeff0_24*dmats0[24][32] + coeff0_25*dmats0[25][32] + coeff0_26*dmats0[26][32] + coeff0_27*dmats0[27][32] + coeff0_28*dmats0[28][32] + coeff0_29*dmats0[29][32] + coeff0_30*dmats0[30][32] + coeff0_31*dmats0[31][32] + coeff0_32*dmats0[32][32] + coeff0_33*dmats0[33][32] + coeff0_34*dmats0[34][32];
          new_coeff0_33 = coeff0_0*dmats0[0][33] + coeff0_1*dmats0[1][33] + coeff0_2*dmats0[2][33] + coeff0_3*dmats0[3][33] + coeff0_4*dmats0[4][33] + coeff0_5*dmats0[5][33] + coeff0_6*dmats0[6][33] + coeff0_7*dmats0[7][33] + coeff0_8*dmats0[8][33] + coeff0_9*dmats0[9][33] + coeff0_10*dmats0[10][33] + coeff0_11*dmats0[11][33] + coeff0_12*dmats0[12][33] + coeff0_13*dmats0[13][33] + coeff0_14*dmats0[14][33] + coeff0_15*dmats0[15][33] + coeff0_16*dmats0[16][33] + coeff0_17*dmats0[17][33] + coeff0_18*dmats0[18][33] + coeff0_19*dmats0[19][33] + coeff0_20*dmats0[20][33] + coeff0_21*dmats0[21][33] + coeff0_22*dmats0[22][33] + coeff0_23*dmats0[23][33] + coeff0_24*dmats0[24][33] + coeff0_25*dmats0[25][33] + coeff0_26*dmats0[26][33] + coeff0_27*dmats0[27][33] + coeff0_28*dmats0[28][33] + coeff0_29*dmats0[29][33] + coeff0_30*dmats0[30][33] + coeff0_31*dmats0[31][33] + coeff0_32*dmats0[32][33] + coeff0_33*dmats0[33][33] + coeff0_34*dmats0[34][33];
          new_coeff0_34 = coeff0_0*dmats0[0][34] + coeff0_1*dmats0[1][34] + coeff0_2*dmats0[2][34] + coeff0_3*dmats0[3][34] + coeff0_4*dmats0[4][34] + coeff0_5*dmats0[5][34] + coeff0_6*dmats0[6][34] + coeff0_7*dmats0[7][34] + coeff0_8*dmats0[8][34] + coeff0_9*dmats0[9][34] + coeff0_10*dmats0[10][34] + coeff0_11*dmats0[11][34] + coeff0_12*dmats0[12][34] + coeff0_13*dmats0[13][34] + coeff0_14*dmats0[14][34] + coeff0_15*dmats0[15][34] + coeff0_16*dmats0[16][34] + coeff0_17*dmats0[17][34] + coeff0_18*dmats0[18][34] + coeff0_19*dmats0[19][34] + coeff0_20*dmats0[20][34] + coeff0_21*dmats0[21][34] + coeff0_22*dmats0[22][34] + coeff0_23*dmats0[23][34] + coeff0_24*dmats0[24][34] + coeff0_25*dmats0[25][34] + coeff0_26*dmats0[26][34] + coeff0_27*dmats0[27][34] + coeff0_28*dmats0[28][34] + coeff0_29*dmats0[29][34] + coeff0_30*dmats0[30][34] + coeff0_31*dmats0[31][34] + coeff0_32*dmats0[32][34] + coeff0_33*dmats0[33][34] + coeff0_34*dmats0[34][34];
        }
        if(combinations[deriv_num][j] == 1)
        {
          new_coeff0_0 = coeff0_0*dmats1[0][0] + coeff0_1*dmats1[1][0] + coeff0_2*dmats1[2][0] + coeff0_3*dmats1[3][0] + coeff0_4*dmats1[4][0] + coeff0_5*dmats1[5][0] + coeff0_6*dmats1[6][0] + coeff0_7*dmats1[7][0] + coeff0_8*dmats1[8][0] + coeff0_9*dmats1[9][0] + coeff0_10*dmats1[10][0] + coeff0_11*dmats1[11][0] + coeff0_12*dmats1[12][0] + coeff0_13*dmats1[13][0] + coeff0_14*dmats1[14][0] + coeff0_15*dmats1[15][0] + coeff0_16*dmats1[16][0] + coeff0_17*dmats1[17][0] + coeff0_18*dmats1[18][0] + coeff0_19*dmats1[19][0] + coeff0_20*dmats1[20][0] + coeff0_21*dmats1[21][0] + coeff0_22*dmats1[22][0] + coeff0_23*dmats1[23][0] + coeff0_24*dmats1[24][0] + coeff0_25*dmats1[25][0] + coeff0_26*dmats1[26][0] + coeff0_27*dmats1[27][0] + coeff0_28*dmats1[28][0] + coeff0_29*dmats1[29][0] + coeff0_30*dmats1[30][0] + coeff0_31*dmats1[31][0] + coeff0_32*dmats1[32][0] + coeff0_33*dmats1[33][0] + coeff0_34*dmats1[34][0];
          new_coeff0_1 = coeff0_0*dmats1[0][1] + coeff0_1*dmats1[1][1] + coeff0_2*dmats1[2][1] + coeff0_3*dmats1[3][1] + coeff0_4*dmats1[4][1] + coeff0_5*dmats1[5][1] + coeff0_6*dmats1[6][1] + coeff0_7*dmats1[7][1] + coeff0_8*dmats1[8][1] + coeff0_9*dmats1[9][1] + coeff0_10*dmats1[10][1] + coeff0_11*dmats1[11][1] + coeff0_12*dmats1[12][1] + coeff0_13*dmats1[13][1] + coeff0_14*dmats1[14][1] + coeff0_15*dmats1[15][1] + coeff0_16*dmats1[16][1] + coeff0_17*dmats1[17][1] + coeff0_18*dmats1[18][1] + coeff0_19*dmats1[19][1] + coeff0_20*dmats1[20][1] + coeff0_21*dmats1[21][1] + coeff0_22*dmats1[22][1] + coeff0_23*dmats1[23][1] + coeff0_24*dmats1[24][1] + coeff0_25*dmats1[25][1] + coeff0_26*dmats1[26][1] + coeff0_27*dmats1[27][1] + coeff0_28*dmats1[28][1] + coeff0_29*dmats1[29][1] + coeff0_30*dmats1[30][1] + coeff0_31*dmats1[31][1] + coeff0_32*dmats1[32][1] + coeff0_33*dmats1[33][1] + coeff0_34*dmats1[34][1];
          new_coeff0_2 = coeff0_0*dmats1[0][2] + coeff0_1*dmats1[1][2] + coeff0_2*dmats1[2][2] + coeff0_3*dmats1[3][2] + coeff0_4*dmats1[4][2] + coeff0_5*dmats1[5][2] + coeff0_6*dmats1[6][2] + coeff0_7*dmats1[7][2] + coeff0_8*dmats1[8][2] + coeff0_9*dmats1[9][2] + coeff0_10*dmats1[10][2] + coeff0_11*dmats1[11][2] + coeff0_12*dmats1[12][2] + coeff0_13*dmats1[13][2] + coeff0_14*dmats1[14][2] + coeff0_15*dmats1[15][2] + coeff0_16*dmats1[16][2] + coeff0_17*dmats1[17][2] + coeff0_18*dmats1[18][2] + coeff0_19*dmats1[19][2] + coeff0_20*dmats1[20][2] + coeff0_21*dmats1[21][2] + coeff0_22*dmats1[22][2] + coeff0_23*dmats1[23][2] + coeff0_24*dmats1[24][2] + coeff0_25*dmats1[25][2] + coeff0_26*dmats1[26][2] + coeff0_27*dmats1[27][2] + coeff0_28*dmats1[28][2] + coeff0_29*dmats1[29][2] + coeff0_30*dmats1[30][2] + coeff0_31*dmats1[31][2] + coeff0_32*dmats1[32][2] + coeff0_33*dmats1[33][2] + coeff0_34*dmats1[34][2];
          new_coeff0_3 = coeff0_0*dmats1[0][3] + coeff0_1*dmats1[1][3] + coeff0_2*dmats1[2][3] + coeff0_3*dmats1[3][3] + coeff0_4*dmats1[4][3] + coeff0_5*dmats1[5][3] + coeff0_6*dmats1[6][3] + coeff0_7*dmats1[7][3] + coeff0_8*dmats1[8][3] + coeff0_9*dmats1[9][3] + coeff0_10*dmats1[10][3] + coeff0_11*dmats1[11][3] + coeff0_12*dmats1[12][3] + coeff0_13*dmats1[13][3] + coeff0_14*dmats1[14][3] + coeff0_15*dmats1[15][3] + coeff0_16*dmats1[16][3] + coeff0_17*dmats1[17][3] + coeff0_18*dmats1[18][3] + coeff0_19*dmats1[19][3] + coeff0_20*dmats1[20][3] + coeff0_21*dmats1[21][3] + coeff0_22*dmats1[22][3] + coeff0_23*dmats1[23][3] + coeff0_24*dmats1[24][3] + coeff0_25*dmats1[25][3] + coeff0_26*dmats1[26][3] + coeff0_27*dmats1[27][3] + coeff0_28*dmats1[28][3] + coeff0_29*dmats1[29][3] + coeff0_30*dmats1[30][3] + coeff0_31*dmats1[31][3] + coeff0_32*dmats1[32][3] + coeff0_33*dmats1[33][3] + coeff0_34*dmats1[34][3];
          new_coeff0_4 = coeff0_0*dmats1[0][4] + coeff0_1*dmats1[1][4] + coeff0_2*dmats1[2][4] + coeff0_3*dmats1[3][4] + coeff0_4*dmats1[4][4] + coeff0_5*dmats1[5][4] + coeff0_6*dmats1[6][4] + coeff0_7*dmats1[7][4] + coeff0_8*dmats1[8][4] + coeff0_9*dmats1[9][4] + coeff0_10*dmats1[10][4] + coeff0_11*dmats1[11][4] + coeff0_12*dmats1[12][4] + coeff0_13*dmats1[13][4] + coeff0_14*dmats1[14][4] + coeff0_15*dmats1[15][4] + coeff0_16*dmats1[16][4] + coeff0_17*dmats1[17][4] + coeff0_18*dmats1[18][4] + coeff0_19*dmats1[19][4] + coeff0_20*dmats1[20][4] + coeff0_21*dmats1[21][4] + coeff0_22*dmats1[22][4] + coeff0_23*dmats1[23][4] + coeff0_24*dmats1[24][4] + coeff0_25*dmats1[25][4] + coeff0_26*dmats1[26][4] + coeff0_27*dmats1[27][4] + coeff0_28*dmats1[28][4] + coeff0_29*dmats1[29][4] + coeff0_30*dmats1[30][4] + coeff0_31*dmats1[31][4] + coeff0_32*dmats1[32][4] + coeff0_33*dmats1[33][4] + coeff0_34*dmats1[34][4];
          new_coeff0_5 = coeff0_0*dmats1[0][5] + coeff0_1*dmats1[1][5] + coeff0_2*dmats1[2][5] + coeff0_3*dmats1[3][5] + coeff0_4*dmats1[4][5] + coeff0_5*dmats1[5][5] + coeff0_6*dmats1[6][5] + coeff0_7*dmats1[7][5] + coeff0_8*dmats1[8][5] + coeff0_9*dmats1[9][5] + coeff0_10*dmats1[10][5] + coeff0_11*dmats1[11][5] + coeff0_12*dmats1[12][5] + coeff0_13*dmats1[13][5] + coeff0_14*dmats1[14][5] + coeff0_15*dmats1[15][5] + coeff0_16*dmats1[16][5] + coeff0_17*dmats1[17][5] + coeff0_18*dmats1[18][5] + coeff0_19*dmats1[19][5] + coeff0_20*dmats1[20][5] + coeff0_21*dmats1[21][5] + coeff0_22*dmats1[22][5] + coeff0_23*dmats1[23][5] + coeff0_24*dmats1[24][5] + coeff0_25*dmats1[25][5] + coeff0_26*dmats1[26][5] + coeff0_27*dmats1[27][5] + coeff0_28*dmats1[28][5] + coeff0_29*dmats1[29][5] + coeff0_30*dmats1[30][5] + coeff0_31*dmats1[31][5] + coeff0_32*dmats1[32][5] + coeff0_33*dmats1[33][5] + coeff0_34*dmats1[34][5];
          new_coeff0_6 = coeff0_0*dmats1[0][6] + coeff0_1*dmats1[1][6] + coeff0_2*dmats1[2][6] + coeff0_3*dmats1[3][6] + coeff0_4*dmats1[4][6] + coeff0_5*dmats1[5][6] + coeff0_6*dmats1[6][6] + coeff0_7*dmats1[7][6] + coeff0_8*dmats1[8][6] + coeff0_9*dmats1[9][6] + coeff0_10*dmats1[10][6] + coeff0_11*dmats1[11][6] + coeff0_12*dmats1[12][6] + coeff0_13*dmats1[13][6] + coeff0_14*dmats1[14][6] + coeff0_15*dmats1[15][6] + coeff0_16*dmats1[16][6] + coeff0_17*dmats1[17][6] + coeff0_18*dmats1[18][6] + coeff0_19*dmats1[19][6] + coeff0_20*dmats1[20][6] + coeff0_21*dmats1[21][6] + coeff0_22*dmats1[22][6] + coeff0_23*dmats1[23][6] + coeff0_24*dmats1[24][6] + coeff0_25*dmats1[25][6] + coeff0_26*dmats1[26][6] + coeff0_27*dmats1[27][6] + coeff0_28*dmats1[28][6] + coeff0_29*dmats1[29][6] + coeff0_30*dmats1[30][6] + coeff0_31*dmats1[31][6] + coeff0_32*dmats1[32][6] + coeff0_33*dmats1[33][6] + coeff0_34*dmats1[34][6];
          new_coeff0_7 = coeff0_0*dmats1[0][7] + coeff0_1*dmats1[1][7] + coeff0_2*dmats1[2][7] + coeff0_3*dmats1[3][7] + coeff0_4*dmats1[4][7] + coeff0_5*dmats1[5][7] + coeff0_6*dmats1[6][7] + coeff0_7*dmats1[7][7] + coeff0_8*dmats1[8][7] + coeff0_9*dmats1[9][7] + coeff0_10*dmats1[10][7] + coeff0_11*dmats1[11][7] + coeff0_12*dmats1[12][7] + coeff0_13*dmats1[13][7] + coeff0_14*dmats1[14][7] + coeff0_15*dmats1[15][7] + coeff0_16*dmats1[16][7] + coeff0_17*dmats1[17][7] + coeff0_18*dmats1[18][7] + coeff0_19*dmats1[19][7] + coeff0_20*dmats1[20][7] + coeff0_21*dmats1[21][7] + coeff0_22*dmats1[22][7] + coeff0_23*dmats1[23][7] + coeff0_24*dmats1[24][7] + coeff0_25*dmats1[25][7] + coeff0_26*dmats1[26][7] + coeff0_27*dmats1[27][7] + coeff0_28*dmats1[28][7] + coeff0_29*dmats1[29][7] + coeff0_30*dmats1[30][7] + coeff0_31*dmats1[31][7] + coeff0_32*dmats1[32][7] + coeff0_33*dmats1[33][7] + coeff0_34*dmats1[34][7];
          new_coeff0_8 = coeff0_0*dmats1[0][8] + coeff0_1*dmats1[1][8] + coeff0_2*dmats1[2][8] + coeff0_3*dmats1[3][8] + coeff0_4*dmats1[4][8] + coeff0_5*dmats1[5][8] + coeff0_6*dmats1[6][8] + coeff0_7*dmats1[7][8] + coeff0_8*dmats1[8][8] + coeff0_9*dmats1[9][8] + coeff0_10*dmats1[10][8] + coeff0_11*dmats1[11][8] + coeff0_12*dmats1[12][8] + coeff0_13*dmats1[13][8] + coeff0_14*dmats1[14][8] + coeff0_15*dmats1[15][8] + coeff0_16*dmats1[16][8] + coeff0_17*dmats1[17][8] + coeff0_18*dmats1[18][8] + coeff0_19*dmats1[19][8] + coeff0_20*dmats1[20][8] + coeff0_21*dmats1[21][8] + coeff0_22*dmats1[22][8] + coeff0_23*dmats1[23][8] + coeff0_24*dmats1[24][8] + coeff0_25*dmats1[25][8] + coeff0_26*dmats1[26][8] + coeff0_27*dmats1[27][8] + coeff0_28*dmats1[28][8] + coeff0_29*dmats1[29][8] + coeff0_30*dmats1[30][8] + coeff0_31*dmats1[31][8] + coeff0_32*dmats1[32][8] + coeff0_33*dmats1[33][8] + coeff0_34*dmats1[34][8];
          new_coeff0_9 = coeff0_0*dmats1[0][9] + coeff0_1*dmats1[1][9] + coeff0_2*dmats1[2][9] + coeff0_3*dmats1[3][9] + coeff0_4*dmats1[4][9] + coeff0_5*dmats1[5][9] + coeff0_6*dmats1[6][9] + coeff0_7*dmats1[7][9] + coeff0_8*dmats1[8][9] + coeff0_9*dmats1[9][9] + coeff0_10*dmats1[10][9] + coeff0_11*dmats1[11][9] + coeff0_12*dmats1[12][9] + coeff0_13*dmats1[13][9] + coeff0_14*dmats1[14][9] + coeff0_15*dmats1[15][9] + coeff0_16*dmats1[16][9] + coeff0_17*dmats1[17][9] + coeff0_18*dmats1[18][9] + coeff0_19*dmats1[19][9] + coeff0_20*dmats1[20][9] + coeff0_21*dmats1[21][9] + coeff0_22*dmats1[22][9] + coeff0_23*dmats1[23][9] + coeff0_24*dmats1[24][9] + coeff0_25*dmats1[25][9] + coeff0_26*dmats1[26][9] + coeff0_27*dmats1[27][9] + coeff0_28*dmats1[28][9] + coeff0_29*dmats1[29][9] + coeff0_30*dmats1[30][9] + coeff0_31*dmats1[31][9] + coeff0_32*dmats1[32][9] + coeff0_33*dmats1[33][9] + coeff0_34*dmats1[34][9];
          new_coeff0_10 = coeff0_0*dmats1[0][10] + coeff0_1*dmats1[1][10] + coeff0_2*dmats1[2][10] + coeff0_3*dmats1[3][10] + coeff0_4*dmats1[4][10] + coeff0_5*dmats1[5][10] + coeff0_6*dmats1[6][10] + coeff0_7*dmats1[7][10] + coeff0_8*dmats1[8][10] + coeff0_9*dmats1[9][10] + coeff0_10*dmats1[10][10] + coeff0_11*dmats1[11][10] + coeff0_12*dmats1[12][10] + coeff0_13*dmats1[13][10] + coeff0_14*dmats1[14][10] + coeff0_15*dmats1[15][10] + coeff0_16*dmats1[16][10] + coeff0_17*dmats1[17][10] + coeff0_18*dmats1[18][10] + coeff0_19*dmats1[19][10] + coeff0_20*dmats1[20][10] + coeff0_21*dmats1[21][10] + coeff0_22*dmats1[22][10] + coeff0_23*dmats1[23][10] + coeff0_24*dmats1[24][10] + coeff0_25*dmats1[25][10] + coeff0_26*dmats1[26][10] + coeff0_27*dmats1[27][10] + coeff0_28*dmats1[28][10] + coeff0_29*dmats1[29][10] + coeff0_30*dmats1[30][10] + coeff0_31*dmats1[31][10] + coeff0_32*dmats1[32][10] + coeff0_33*dmats1[33][10] + coeff0_34*dmats1[34][10];
          new_coeff0_11 = coeff0_0*dmats1[0][11] + coeff0_1*dmats1[1][11] + coeff0_2*dmats1[2][11] + coeff0_3*dmats1[3][11] + coeff0_4*dmats1[4][11] + coeff0_5*dmats1[5][11] + coeff0_6*dmats1[6][11] + coeff0_7*dmats1[7][11] + coeff0_8*dmats1[8][11] + coeff0_9*dmats1[9][11] + coeff0_10*dmats1[10][11] + coeff0_11*dmats1[11][11] + coeff0_12*dmats1[12][11] + coeff0_13*dmats1[13][11] + coeff0_14*dmats1[14][11] + coeff0_15*dmats1[15][11] + coeff0_16*dmats1[16][11] + coeff0_17*dmats1[17][11] + coeff0_18*dmats1[18][11] + coeff0_19*dmats1[19][11] + coeff0_20*dmats1[20][11] + coeff0_21*dmats1[21][11] + coeff0_22*dmats1[22][11] + coeff0_23*dmats1[23][11] + coeff0_24*dmats1[24][11] + coeff0_25*dmats1[25][11] + coeff0_26*dmats1[26][11] + coeff0_27*dmats1[27][11] + coeff0_28*dmats1[28][11] + coeff0_29*dmats1[29][11] + coeff0_30*dmats1[30][11] + coeff0_31*dmats1[31][11] + coeff0_32*dmats1[32][11] + coeff0_33*dmats1[33][11] + coeff0_34*dmats1[34][11];
          new_coeff0_12 = coeff0_0*dmats1[0][12] + coeff0_1*dmats1[1][12] + coeff0_2*dmats1[2][12] + coeff0_3*dmats1[3][12] + coeff0_4*dmats1[4][12] + coeff0_5*dmats1[5][12] + coeff0_6*dmats1[6][12] + coeff0_7*dmats1[7][12] + coeff0_8*dmats1[8][12] + coeff0_9*dmats1[9][12] + coeff0_10*dmats1[10][12] + coeff0_11*dmats1[11][12] + coeff0_12*dmats1[12][12] + coeff0_13*dmats1[13][12] + coeff0_14*dmats1[14][12] + coeff0_15*dmats1[15][12] + coeff0_16*dmats1[16][12] + coeff0_17*dmats1[17][12] + coeff0_18*dmats1[18][12] + coeff0_19*dmats1[19][12] + coeff0_20*dmats1[20][12] + coeff0_21*dmats1[21][12] + coeff0_22*dmats1[22][12] + coeff0_23*dmats1[23][12] + coeff0_24*dmats1[24][12] + coeff0_25*dmats1[25][12] + coeff0_26*dmats1[26][12] + coeff0_27*dmats1[27][12] + coeff0_28*dmats1[28][12] + coeff0_29*dmats1[29][12] + coeff0_30*dmats1[30][12] + coeff0_31*dmats1[31][12] + coeff0_32*dmats1[32][12] + coeff0_33*dmats1[33][12] + coeff0_34*dmats1[34][12];
          new_coeff0_13 = coeff0_0*dmats1[0][13] + coeff0_1*dmats1[1][13] + coeff0_2*dmats1[2][13] + coeff0_3*dmats1[3][13] + coeff0_4*dmats1[4][13] + coeff0_5*dmats1[5][13] + coeff0_6*dmats1[6][13] + coeff0_7*dmats1[7][13] + coeff0_8*dmats1[8][13] + coeff0_9*dmats1[9][13] + coeff0_10*dmats1[10][13] + coeff0_11*dmats1[11][13] + coeff0_12*dmats1[12][13] + coeff0_13*dmats1[13][13] + coeff0_14*dmats1[14][13] + coeff0_15*dmats1[15][13] + coeff0_16*dmats1[16][13] + coeff0_17*dmats1[17][13] + coeff0_18*dmats1[18][13] + coeff0_19*dmats1[19][13] + coeff0_20*dmats1[20][13] + coeff0_21*dmats1[21][13] + coeff0_22*dmats1[22][13] + coeff0_23*dmats1[23][13] + coeff0_24*dmats1[24][13] + coeff0_25*dmats1[25][13] + coeff0_26*dmats1[26][13] + coeff0_27*dmats1[27][13] + coeff0_28*dmats1[28][13] + coeff0_29*dmats1[29][13] + coeff0_30*dmats1[30][13] + coeff0_31*dmats1[31][13] + coeff0_32*dmats1[32][13] + coeff0_33*dmats1[33][13] + coeff0_34*dmats1[34][13];
          new_coeff0_14 = coeff0_0*dmats1[0][14] + coeff0_1*dmats1[1][14] + coeff0_2*dmats1[2][14] + coeff0_3*dmats1[3][14] + coeff0_4*dmats1[4][14] + coeff0_5*dmats1[5][14] + coeff0_6*dmats1[6][14] + coeff0_7*dmats1[7][14] + coeff0_8*dmats1[8][14] + coeff0_9*dmats1[9][14] + coeff0_10*dmats1[10][14] + coeff0_11*dmats1[11][14] + coeff0_12*dmats1[12][14] + coeff0_13*dmats1[13][14] + coeff0_14*dmats1[14][14] + coeff0_15*dmats1[15][14] + coeff0_16*dmats1[16][14] + coeff0_17*dmats1[17][14] + coeff0_18*dmats1[18][14] + coeff0_19*dmats1[19][14] + coeff0_20*dmats1[20][14] + coeff0_21*dmats1[21][14] + coeff0_22*dmats1[22][14] + coeff0_23*dmats1[23][14] + coeff0_24*dmats1[24][14] + coeff0_25*dmats1[25][14] + coeff0_26*dmats1[26][14] + coeff0_27*dmats1[27][14] + coeff0_28*dmats1[28][14] + coeff0_29*dmats1[29][14] + coeff0_30*dmats1[30][14] + coeff0_31*dmats1[31][14] + coeff0_32*dmats1[32][14] + coeff0_33*dmats1[33][14] + coeff0_34*dmats1[34][14];
          new_coeff0_15 = coeff0_0*dmats1[0][15] + coeff0_1*dmats1[1][15] + coeff0_2*dmats1[2][15] + coeff0_3*dmats1[3][15] + coeff0_4*dmats1[4][15] + coeff0_5*dmats1[5][15] + coeff0_6*dmats1[6][15] + coeff0_7*dmats1[7][15] + coeff0_8*dmats1[8][15] + coeff0_9*dmats1[9][15] + coeff0_10*dmats1[10][15] + coeff0_11*dmats1[11][15] + coeff0_12*dmats1[12][15] + coeff0_13*dmats1[13][15] + coeff0_14*dmats1[14][15] + coeff0_15*dmats1[15][15] + coeff0_16*dmats1[16][15] + coeff0_17*dmats1[17][15] + coeff0_18*dmats1[18][15] + coeff0_19*dmats1[19][15] + coeff0_20*dmats1[20][15] + coeff0_21*dmats1[21][15] + coeff0_22*dmats1[22][15] + coeff0_23*dmats1[23][15] + coeff0_24*dmats1[24][15] + coeff0_25*dmats1[25][15] + coeff0_26*dmats1[26][15] + coeff0_27*dmats1[27][15] + coeff0_28*dmats1[28][15] + coeff0_29*dmats1[29][15] + coeff0_30*dmats1[30][15] + coeff0_31*dmats1[31][15] + coeff0_32*dmats1[32][15] + coeff0_33*dmats1[33][15] + coeff0_34*dmats1[34][15];
          new_coeff0_16 = coeff0_0*dmats1[0][16] + coeff0_1*dmats1[1][16] + coeff0_2*dmats1[2][16] + coeff0_3*dmats1[3][16] + coeff0_4*dmats1[4][16] + coeff0_5*dmats1[5][16] + coeff0_6*dmats1[6][16] + coeff0_7*dmats1[7][16] + coeff0_8*dmats1[8][16] + coeff0_9*dmats1[9][16] + coeff0_10*dmats1[10][16] + coeff0_11*dmats1[11][16] + coeff0_12*dmats1[12][16] + coeff0_13*dmats1[13][16] + coeff0_14*dmats1[14][16] + coeff0_15*dmats1[15][16] + coeff0_16*dmats1[16][16] + coeff0_17*dmats1[17][16] + coeff0_18*dmats1[18][16] + coeff0_19*dmats1[19][16] + coeff0_20*dmats1[20][16] + coeff0_21*dmats1[21][16] + coeff0_22*dmats1[22][16] + coeff0_23*dmats1[23][16] + coeff0_24*dmats1[24][16] + coeff0_25*dmats1[25][16] + coeff0_26*dmats1[26][16] + coeff0_27*dmats1[27][16] + coeff0_28*dmats1[28][16] + coeff0_29*dmats1[29][16] + coeff0_30*dmats1[30][16] + coeff0_31*dmats1[31][16] + coeff0_32*dmats1[32][16] + coeff0_33*dmats1[33][16] + coeff0_34*dmats1[34][16];
          new_coeff0_17 = coeff0_0*dmats1[0][17] + coeff0_1*dmats1[1][17] + coeff0_2*dmats1[2][17] + coeff0_3*dmats1[3][17] + coeff0_4*dmats1[4][17] + coeff0_5*dmats1[5][17] + coeff0_6*dmats1[6][17] + coeff0_7*dmats1[7][17] + coeff0_8*dmats1[8][17] + coeff0_9*dmats1[9][17] + coeff0_10*dmats1[10][17] + coeff0_11*dmats1[11][17] + coeff0_12*dmats1[12][17] + coeff0_13*dmats1[13][17] + coeff0_14*dmats1[14][17] + coeff0_15*dmats1[15][17] + coeff0_16*dmats1[16][17] + coeff0_17*dmats1[17][17] + coeff0_18*dmats1[18][17] + coeff0_19*dmats1[19][17] + coeff0_20*dmats1[20][17] + coeff0_21*dmats1[21][17] + coeff0_22*dmats1[22][17] + coeff0_23*dmats1[23][17] + coeff0_24*dmats1[24][17] + coeff0_25*dmats1[25][17] + coeff0_26*dmats1[26][17] + coeff0_27*dmats1[27][17] + coeff0_28*dmats1[28][17] + coeff0_29*dmats1[29][17] + coeff0_30*dmats1[30][17] + coeff0_31*dmats1[31][17] + coeff0_32*dmats1[32][17] + coeff0_33*dmats1[33][17] + coeff0_34*dmats1[34][17];
          new_coeff0_18 = coeff0_0*dmats1[0][18] + coeff0_1*dmats1[1][18] + coeff0_2*dmats1[2][18] + coeff0_3*dmats1[3][18] + coeff0_4*dmats1[4][18] + coeff0_5*dmats1[5][18] + coeff0_6*dmats1[6][18] + coeff0_7*dmats1[7][18] + coeff0_8*dmats1[8][18] + coeff0_9*dmats1[9][18] + coeff0_10*dmats1[10][18] + coeff0_11*dmats1[11][18] + coeff0_12*dmats1[12][18] + coeff0_13*dmats1[13][18] + coeff0_14*dmats1[14][18] + coeff0_15*dmats1[15][18] + coeff0_16*dmats1[16][18] + coeff0_17*dmats1[17][18] + coeff0_18*dmats1[18][18] + coeff0_19*dmats1[19][18] + coeff0_20*dmats1[20][18] + coeff0_21*dmats1[21][18] + coeff0_22*dmats1[22][18] + coeff0_23*dmats1[23][18] + coeff0_24*dmats1[24][18] + coeff0_25*dmats1[25][18] + coeff0_26*dmats1[26][18] + coeff0_27*dmats1[27][18] + coeff0_28*dmats1[28][18] + coeff0_29*dmats1[29][18] + coeff0_30*dmats1[30][18] + coeff0_31*dmats1[31][18] + coeff0_32*dmats1[32][18] + coeff0_33*dmats1[33][18] + coeff0_34*dmats1[34][18];
          new_coeff0_19 = coeff0_0*dmats1[0][19] + coeff0_1*dmats1[1][19] + coeff0_2*dmats1[2][19] + coeff0_3*dmats1[3][19] + coeff0_4*dmats1[4][19] + coeff0_5*dmats1[5][19] + coeff0_6*dmats1[6][19] + coeff0_7*dmats1[7][19] + coeff0_8*dmats1[8][19] + coeff0_9*dmats1[9][19] + coeff0_10*dmats1[10][19] + coeff0_11*dmats1[11][19] + coeff0_12*dmats1[12][19] + coeff0_13*dmats1[13][19] + coeff0_14*dmats1[14][19] + coeff0_15*dmats1[15][19] + coeff0_16*dmats1[16][19] + coeff0_17*dmats1[17][19] + coeff0_18*dmats1[18][19] + coeff0_19*dmats1[19][19] + coeff0_20*dmats1[20][19] + coeff0_21*dmats1[21][19] + coeff0_22*dmats1[22][19] + coeff0_23*dmats1[23][19] + coeff0_24*dmats1[24][19] + coeff0_25*dmats1[25][19] + coeff0_26*dmats1[26][19] + coeff0_27*dmats1[27][19] + coeff0_28*dmats1[28][19] + coeff0_29*dmats1[29][19] + coeff0_30*dmats1[30][19] + coeff0_31*dmats1[31][19] + coeff0_32*dmats1[32][19] + coeff0_33*dmats1[33][19] + coeff0_34*dmats1[34][19];
          new_coeff0_20 = coeff0_0*dmats1[0][20] + coeff0_1*dmats1[1][20] + coeff0_2*dmats1[2][20] + coeff0_3*dmats1[3][20] + coeff0_4*dmats1[4][20] + coeff0_5*dmats1[5][20] + coeff0_6*dmats1[6][20] + coeff0_7*dmats1[7][20] + coeff0_8*dmats1[8][20] + coeff0_9*dmats1[9][20] + coeff0_10*dmats1[10][20] + coeff0_11*dmats1[11][20] + coeff0_12*dmats1[12][20] + coeff0_13*dmats1[13][20] + coeff0_14*dmats1[14][20] + coeff0_15*dmats1[15][20] + coeff0_16*dmats1[16][20] + coeff0_17*dmats1[17][20] + coeff0_18*dmats1[18][20] + coeff0_19*dmats1[19][20] + coeff0_20*dmats1[20][20] + coeff0_21*dmats1[21][20] + coeff0_22*dmats1[22][20] + coeff0_23*dmats1[23][20] + coeff0_24*dmats1[24][20] + coeff0_25*dmats1[25][20] + coeff0_26*dmats1[26][20] + coeff0_27*dmats1[27][20] + coeff0_28*dmats1[28][20] + coeff0_29*dmats1[29][20] + coeff0_30*dmats1[30][20] + coeff0_31*dmats1[31][20] + coeff0_32*dmats1[32][20] + coeff0_33*dmats1[33][20] + coeff0_34*dmats1[34][20];
          new_coeff0_21 = coeff0_0*dmats1[0][21] + coeff0_1*dmats1[1][21] + coeff0_2*dmats1[2][21] + coeff0_3*dmats1[3][21] + coeff0_4*dmats1[4][21] + coeff0_5*dmats1[5][21] + coeff0_6*dmats1[6][21] + coeff0_7*dmats1[7][21] + coeff0_8*dmats1[8][21] + coeff0_9*dmats1[9][21] + coeff0_10*dmats1[10][21] + coeff0_11*dmats1[11][21] + coeff0_12*dmats1[12][21] + coeff0_13*dmats1[13][21] + coeff0_14*dmats1[14][21] + coeff0_15*dmats1[15][21] + coeff0_16*dmats1[16][21] + coeff0_17*dmats1[17][21] + coeff0_18*dmats1[18][21] + coeff0_19*dmats1[19][21] + coeff0_20*dmats1[20][21] + coeff0_21*dmats1[21][21] + coeff0_22*dmats1[22][21] + coeff0_23*dmats1[23][21] + coeff0_24*dmats1[24][21] + coeff0_25*dmats1[25][21] + coeff0_26*dmats1[26][21] + coeff0_27*dmats1[27][21] + coeff0_28*dmats1[28][21] + coeff0_29*dmats1[29][21] + coeff0_30*dmats1[30][21] + coeff0_31*dmats1[31][21] + coeff0_32*dmats1[32][21] + coeff0_33*dmats1[33][21] + coeff0_34*dmats1[34][21];
          new_coeff0_22 = coeff0_0*dmats1[0][22] + coeff0_1*dmats1[1][22] + coeff0_2*dmats1[2][22] + coeff0_3*dmats1[3][22] + coeff0_4*dmats1[4][22] + coeff0_5*dmats1[5][22] + coeff0_6*dmats1[6][22] + coeff0_7*dmats1[7][22] + coeff0_8*dmats1[8][22] + coeff0_9*dmats1[9][22] + coeff0_10*dmats1[10][22] + coeff0_11*dmats1[11][22] + coeff0_12*dmats1[12][22] + coeff0_13*dmats1[13][22] + coeff0_14*dmats1[14][22] + coeff0_15*dmats1[15][22] + coeff0_16*dmats1[16][22] + coeff0_17*dmats1[17][22] + coeff0_18*dmats1[18][22] + coeff0_19*dmats1[19][22] + coeff0_20*dmats1[20][22] + coeff0_21*dmats1[21][22] + coeff0_22*dmats1[22][22] + coeff0_23*dmats1[23][22] + coeff0_24*dmats1[24][22] + coeff0_25*dmats1[25][22] + coeff0_26*dmats1[26][22] + coeff0_27*dmats1[27][22] + coeff0_28*dmats1[28][22] + coeff0_29*dmats1[29][22] + coeff0_30*dmats1[30][22] + coeff0_31*dmats1[31][22] + coeff0_32*dmats1[32][22] + coeff0_33*dmats1[33][22] + coeff0_34*dmats1[34][22];
          new_coeff0_23 = coeff0_0*dmats1[0][23] + coeff0_1*dmats1[1][23] + coeff0_2*dmats1[2][23] + coeff0_3*dmats1[3][23] + coeff0_4*dmats1[4][23] + coeff0_5*dmats1[5][23] + coeff0_6*dmats1[6][23] + coeff0_7*dmats1[7][23] + coeff0_8*dmats1[8][23] + coeff0_9*dmats1[9][23] + coeff0_10*dmats1[10][23] + coeff0_11*dmats1[11][23] + coeff0_12*dmats1[12][23] + coeff0_13*dmats1[13][23] + coeff0_14*dmats1[14][23] + coeff0_15*dmats1[15][23] + coeff0_16*dmats1[16][23] + coeff0_17*dmats1[17][23] + coeff0_18*dmats1[18][23] + coeff0_19*dmats1[19][23] + coeff0_20*dmats1[20][23] + coeff0_21*dmats1[21][23] + coeff0_22*dmats1[22][23] + coeff0_23*dmats1[23][23] + coeff0_24*dmats1[24][23] + coeff0_25*dmats1[25][23] + coeff0_26*dmats1[26][23] + coeff0_27*dmats1[27][23] + coeff0_28*dmats1[28][23] + coeff0_29*dmats1[29][23] + coeff0_30*dmats1[30][23] + coeff0_31*dmats1[31][23] + coeff0_32*dmats1[32][23] + coeff0_33*dmats1[33][23] + coeff0_34*dmats1[34][23];
          new_coeff0_24 = coeff0_0*dmats1[0][24] + coeff0_1*dmats1[1][24] + coeff0_2*dmats1[2][24] + coeff0_3*dmats1[3][24] + coeff0_4*dmats1[4][24] + coeff0_5*dmats1[5][24] + coeff0_6*dmats1[6][24] + coeff0_7*dmats1[7][24] + coeff0_8*dmats1[8][24] + coeff0_9*dmats1[9][24] + coeff0_10*dmats1[10][24] + coeff0_11*dmats1[11][24] + coeff0_12*dmats1[12][24] + coeff0_13*dmats1[13][24] + coeff0_14*dmats1[14][24] + coeff0_15*dmats1[15][24] + coeff0_16*dmats1[16][24] + coeff0_17*dmats1[17][24] + coeff0_18*dmats1[18][24] + coeff0_19*dmats1[19][24] + coeff0_20*dmats1[20][24] + coeff0_21*dmats1[21][24] + coeff0_22*dmats1[22][24] + coeff0_23*dmats1[23][24] + coeff0_24*dmats1[24][24] + coeff0_25*dmats1[25][24] + coeff0_26*dmats1[26][24] + coeff0_27*dmats1[27][24] + coeff0_28*dmats1[28][24] + coeff0_29*dmats1[29][24] + coeff0_30*dmats1[30][24] + coeff0_31*dmats1[31][24] + coeff0_32*dmats1[32][24] + coeff0_33*dmats1[33][24] + coeff0_34*dmats1[34][24];
          new_coeff0_25 = coeff0_0*dmats1[0][25] + coeff0_1*dmats1[1][25] + coeff0_2*dmats1[2][25] + coeff0_3*dmats1[3][25] + coeff0_4*dmats1[4][25] + coeff0_5*dmats1[5][25] + coeff0_6*dmats1[6][25] + coeff0_7*dmats1[7][25] + coeff0_8*dmats1[8][25] + coeff0_9*dmats1[9][25] + coeff0_10*dmats1[10][25] + coeff0_11*dmats1[11][25] + coeff0_12*dmats1[12][25] + coeff0_13*dmats1[13][25] + coeff0_14*dmats1[14][25] + coeff0_15*dmats1[15][25] + coeff0_16*dmats1[16][25] + coeff0_17*dmats1[17][25] + coeff0_18*dmats1[18][25] + coeff0_19*dmats1[19][25] + coeff0_20*dmats1[20][25] + coeff0_21*dmats1[21][25] + coeff0_22*dmats1[22][25] + coeff0_23*dmats1[23][25] + coeff0_24*dmats1[24][25] + coeff0_25*dmats1[25][25] + coeff0_26*dmats1[26][25] + coeff0_27*dmats1[27][25] + coeff0_28*dmats1[28][25] + coeff0_29*dmats1[29][25] + coeff0_30*dmats1[30][25] + coeff0_31*dmats1[31][25] + coeff0_32*dmats1[32][25] + coeff0_33*dmats1[33][25] + coeff0_34*dmats1[34][25];
          new_coeff0_26 = coeff0_0*dmats1[0][26] + coeff0_1*dmats1[1][26] + coeff0_2*dmats1[2][26] + coeff0_3*dmats1[3][26] + coeff0_4*dmats1[4][26] + coeff0_5*dmats1[5][26] + coeff0_6*dmats1[6][26] + coeff0_7*dmats1[7][26] + coeff0_8*dmats1[8][26] + coeff0_9*dmats1[9][26] + coeff0_10*dmats1[10][26] + coeff0_11*dmats1[11][26] + coeff0_12*dmats1[12][26] + coeff0_13*dmats1[13][26] + coeff0_14*dmats1[14][26] + coeff0_15*dmats1[15][26] + coeff0_16*dmats1[16][26] + coeff0_17*dmats1[17][26] + coeff0_18*dmats1[18][26] + coeff0_19*dmats1[19][26] + coeff0_20*dmats1[20][26] + coeff0_21*dmats1[21][26] + coeff0_22*dmats1[22][26] + coeff0_23*dmats1[23][26] + coeff0_24*dmats1[24][26] + coeff0_25*dmats1[25][26] + coeff0_26*dmats1[26][26] + coeff0_27*dmats1[27][26] + coeff0_28*dmats1[28][26] + coeff0_29*dmats1[29][26] + coeff0_30*dmats1[30][26] + coeff0_31*dmats1[31][26] + coeff0_32*dmats1[32][26] + coeff0_33*dmats1[33][26] + coeff0_34*dmats1[34][26];
          new_coeff0_27 = coeff0_0*dmats1[0][27] + coeff0_1*dmats1[1][27] + coeff0_2*dmats1[2][27] + coeff0_3*dmats1[3][27] + coeff0_4*dmats1[4][27] + coeff0_5*dmats1[5][27] + coeff0_6*dmats1[6][27] + coeff0_7*dmats1[7][27] + coeff0_8*dmats1[8][27] + coeff0_9*dmats1[9][27] + coeff0_10*dmats1[10][27] + coeff0_11*dmats1[11][27] + coeff0_12*dmats1[12][27] + coeff0_13*dmats1[13][27] + coeff0_14*dmats1[14][27] + coeff0_15*dmats1[15][27] + coeff0_16*dmats1[16][27] + coeff0_17*dmats1[17][27] + coeff0_18*dmats1[18][27] + coeff0_19*dmats1[19][27] + coeff0_20*dmats1[20][27] + coeff0_21*dmats1[21][27] + coeff0_22*dmats1[22][27] + coeff0_23*dmats1[23][27] + coeff0_24*dmats1[24][27] + coeff0_25*dmats1[25][27] + coeff0_26*dmats1[26][27] + coeff0_27*dmats1[27][27] + coeff0_28*dmats1[28][27] + coeff0_29*dmats1[29][27] + coeff0_30*dmats1[30][27] + coeff0_31*dmats1[31][27] + coeff0_32*dmats1[32][27] + coeff0_33*dmats1[33][27] + coeff0_34*dmats1[34][27];
          new_coeff0_28 = coeff0_0*dmats1[0][28] + coeff0_1*dmats1[1][28] + coeff0_2*dmats1[2][28] + coeff0_3*dmats1[3][28] + coeff0_4*dmats1[4][28] + coeff0_5*dmats1[5][28] + coeff0_6*dmats1[6][28] + coeff0_7*dmats1[7][28] + coeff0_8*dmats1[8][28] + coeff0_9*dmats1[9][28] + coeff0_10*dmats1[10][28] + coeff0_11*dmats1[11][28] + coeff0_12*dmats1[12][28] + coeff0_13*dmats1[13][28] + coeff0_14*dmats1[14][28] + coeff0_15*dmats1[15][28] + coeff0_16*dmats1[16][28] + coeff0_17*dmats1[17][28] + coeff0_18*dmats1[18][28] + coeff0_19*dmats1[19][28] + coeff0_20*dmats1[20][28] + coeff0_21*dmats1[21][28] + coeff0_22*dmats1[22][28] + coeff0_23*dmats1[23][28] + coeff0_24*dmats1[24][28] + coeff0_25*dmats1[25][28] + coeff0_26*dmats1[26][28] + coeff0_27*dmats1[27][28] + coeff0_28*dmats1[28][28] + coeff0_29*dmats1[29][28] + coeff0_30*dmats1[30][28] + coeff0_31*dmats1[31][28] + coeff0_32*dmats1[32][28] + coeff0_33*dmats1[33][28] + coeff0_34*dmats1[34][28];
          new_coeff0_29 = coeff0_0*dmats1[0][29] + coeff0_1*dmats1[1][29] + coeff0_2*dmats1[2][29] + coeff0_3*dmats1[3][29] + coeff0_4*dmats1[4][29] + coeff0_5*dmats1[5][29] + coeff0_6*dmats1[6][29] + coeff0_7*dmats1[7][29] + coeff0_8*dmats1[8][29] + coeff0_9*dmats1[9][29] + coeff0_10*dmats1[10][29] + coeff0_11*dmats1[11][29] + coeff0_12*dmats1[12][29] + coeff0_13*dmats1[13][29] + coeff0_14*dmats1[14][29] + coeff0_15*dmats1[15][29] + coeff0_16*dmats1[16][29] + coeff0_17*dmats1[17][29] + coeff0_18*dmats1[18][29] + coeff0_19*dmats1[19][29] + coeff0_20*dmats1[20][29] + coeff0_21*dmats1[21][29] + coeff0_22*dmats1[22][29] + coeff0_23*dmats1[23][29] + coeff0_24*dmats1[24][29] + coeff0_25*dmats1[25][29] + coeff0_26*dmats1[26][29] + coeff0_27*dmats1[27][29] + coeff0_28*dmats1[28][29] + coeff0_29*dmats1[29][29] + coeff0_30*dmats1[30][29] + coeff0_31*dmats1[31][29] + coeff0_32*dmats1[32][29] + coeff0_33*dmats1[33][29] + coeff0_34*dmats1[34][29];
          new_coeff0_30 = coeff0_0*dmats1[0][30] + coeff0_1*dmats1[1][30] + coeff0_2*dmats1[2][30] + coeff0_3*dmats1[3][30] + coeff0_4*dmats1[4][30] + coeff0_5*dmats1[5][30] + coeff0_6*dmats1[6][30] + coeff0_7*dmats1[7][30] + coeff0_8*dmats1[8][30] + coeff0_9*dmats1[9][30] + coeff0_10*dmats1[10][30] + coeff0_11*dmats1[11][30] + coeff0_12*dmats1[12][30] + coeff0_13*dmats1[13][30] + coeff0_14*dmats1[14][30] + coeff0_15*dmats1[15][30] + coeff0_16*dmats1[16][30] + coeff0_17*dmats1[17][30] + coeff0_18*dmats1[18][30] + coeff0_19*dmats1[19][30] + coeff0_20*dmats1[20][30] + coeff0_21*dmats1[21][30] + coeff0_22*dmats1[22][30] + coeff0_23*dmats1[23][30] + coeff0_24*dmats1[24][30] + coeff0_25*dmats1[25][30] + coeff0_26*dmats1[26][30] + coeff0_27*dmats1[27][30] + coeff0_28*dmats1[28][30] + coeff0_29*dmats1[29][30] + coeff0_30*dmats1[30][30] + coeff0_31*dmats1[31][30] + coeff0_32*dmats1[32][30] + coeff0_33*dmats1[33][30] + coeff0_34*dmats1[34][30];
          new_coeff0_31 = coeff0_0*dmats1[0][31] + coeff0_1*dmats1[1][31] + coeff0_2*dmats1[2][31] + coeff0_3*dmats1[3][31] + coeff0_4*dmats1[4][31] + coeff0_5*dmats1[5][31] + coeff0_6*dmats1[6][31] + coeff0_7*dmats1[7][31] + coeff0_8*dmats1[8][31] + coeff0_9*dmats1[9][31] + coeff0_10*dmats1[10][31] + coeff0_11*dmats1[11][31] + coeff0_12*dmats1[12][31] + coeff0_13*dmats1[13][31] + coeff0_14*dmats1[14][31] + coeff0_15*dmats1[15][31] + coeff0_16*dmats1[16][31] + coeff0_17*dmats1[17][31] + coeff0_18*dmats1[18][31] + coeff0_19*dmats1[19][31] + coeff0_20*dmats1[20][31] + coeff0_21*dmats1[21][31] + coeff0_22*dmats1[22][31] + coeff0_23*dmats1[23][31] + coeff0_24*dmats1[24][31] + coeff0_25*dmats1[25][31] + coeff0_26*dmats1[26][31] + coeff0_27*dmats1[27][31] + coeff0_28*dmats1[28][31] + coeff0_29*dmats1[29][31] + coeff0_30*dmats1[30][31] + coeff0_31*dmats1[31][31] + coeff0_32*dmats1[32][31] + coeff0_33*dmats1[33][31] + coeff0_34*dmats1[34][31];
          new_coeff0_32 = coeff0_0*dmats1[0][32] + coeff0_1*dmats1[1][32] + coeff0_2*dmats1[2][32] + coeff0_3*dmats1[3][32] + coeff0_4*dmats1[4][32] + coeff0_5*dmats1[5][32] + coeff0_6*dmats1[6][32] + coeff0_7*dmats1[7][32] + coeff0_8*dmats1[8][32] + coeff0_9*dmats1[9][32] + coeff0_10*dmats1[10][32] + coeff0_11*dmats1[11][32] + coeff0_12*dmats1[12][32] + coeff0_13*dmats1[13][32] + coeff0_14*dmats1[14][32] + coeff0_15*dmats1[15][32] + coeff0_16*dmats1[16][32] + coeff0_17*dmats1[17][32] + coeff0_18*dmats1[18][32] + coeff0_19*dmats1[19][32] + coeff0_20*dmats1[20][32] + coeff0_21*dmats1[21][32] + coeff0_22*dmats1[22][32] + coeff0_23*dmats1[23][32] + coeff0_24*dmats1[24][32] + coeff0_25*dmats1[25][32] + coeff0_26*dmats1[26][32] + coeff0_27*dmats1[27][32] + coeff0_28*dmats1[28][32] + coeff0_29*dmats1[29][32] + coeff0_30*dmats1[30][32] + coeff0_31*dmats1[31][32] + coeff0_32*dmats1[32][32] + coeff0_33*dmats1[33][32] + coeff0_34*dmats1[34][32];
          new_coeff0_33 = coeff0_0*dmats1[0][33] + coeff0_1*dmats1[1][33] + coeff0_2*dmats1[2][33] + coeff0_3*dmats1[3][33] + coeff0_4*dmats1[4][33] + coeff0_5*dmats1[5][33] + coeff0_6*dmats1[6][33] + coeff0_7*dmats1[7][33] + coeff0_8*dmats1[8][33] + coeff0_9*dmats1[9][33] + coeff0_10*dmats1[10][33] + coeff0_11*dmats1[11][33] + coeff0_12*dmats1[12][33] + coeff0_13*dmats1[13][33] + coeff0_14*dmats1[14][33] + coeff0_15*dmats1[15][33] + coeff0_16*dmats1[16][33] + coeff0_17*dmats1[17][33] + coeff0_18*dmats1[18][33] + coeff0_19*dmats1[19][33] + coeff0_20*dmats1[20][33] + coeff0_21*dmats1[21][33] + coeff0_22*dmats1[22][33] + coeff0_23*dmats1[23][33] + coeff0_24*dmats1[24][33] + coeff0_25*dmats1[25][33] + coeff0_26*dmats1[26][33] + coeff0_27*dmats1[27][33] + coeff0_28*dmats1[28][33] + coeff0_29*dmats1[29][33] + coeff0_30*dmats1[30][33] + coeff0_31*dmats1[31][33] + coeff0_32*dmats1[32][33] + coeff0_33*dmats1[33][33] + coeff0_34*dmats1[34][33];
          new_coeff0_34 = coeff0_0*dmats1[0][34] + coeff0_1*dmats1[1][34] + coeff0_2*dmats1[2][34] + coeff0_3*dmats1[3][34] + coeff0_4*dmats1[4][34] + coeff0_5*dmats1[5][34] + coeff0_6*dmats1[6][34] + coeff0_7*dmats1[7][34] + coeff0_8*dmats1[8][34] + coeff0_9*dmats1[9][34] + coeff0_10*dmats1[10][34] + coeff0_11*dmats1[11][34] + coeff0_12*dmats1[12][34] + coeff0_13*dmats1[13][34] + coeff0_14*dmats1[14][34] + coeff0_15*dmats1[15][34] + coeff0_16*dmats1[16][34] + coeff0_17*dmats1[17][34] + coeff0_18*dmats1[18][34] + coeff0_19*dmats1[19][34] + coeff0_20*dmats1[20][34] + coeff0_21*dmats1[21][34] + coeff0_22*dmats1[22][34] + coeff0_23*dmats1[23][34] + coeff0_24*dmats1[24][34] + coeff0_25*dmats1[25][34] + coeff0_26*dmats1[26][34] + coeff0_27*dmats1[27][34] + coeff0_28*dmats1[28][34] + coeff0_29*dmats1[29][34] + coeff0_30*dmats1[30][34] + coeff0_31*dmats1[31][34] + coeff0_32*dmats1[32][34] + coeff0_33*dmats1[33][34] + coeff0_34*dmats1[34][34];
        }
        if(combinations[deriv_num][j] == 2)
        {
          new_coeff0_0 = coeff0_0*dmats2[0][0] + coeff0_1*dmats2[1][0] + coeff0_2*dmats2[2][0] + coeff0_3*dmats2[3][0] + coeff0_4*dmats2[4][0] + coeff0_5*dmats2[5][0] + coeff0_6*dmats2[6][0] + coeff0_7*dmats2[7][0] + coeff0_8*dmats2[8][0] + coeff0_9*dmats2[9][0] + coeff0_10*dmats2[10][0] + coeff0_11*dmats2[11][0] + coeff0_12*dmats2[12][0] + coeff0_13*dmats2[13][0] + coeff0_14*dmats2[14][0] + coeff0_15*dmats2[15][0] + coeff0_16*dmats2[16][0] + coeff0_17*dmats2[17][0] + coeff0_18*dmats2[18][0] + coeff0_19*dmats2[19][0] + coeff0_20*dmats2[20][0] + coeff0_21*dmats2[21][0] + coeff0_22*dmats2[22][0] + coeff0_23*dmats2[23][0] + coeff0_24*dmats2[24][0] + coeff0_25*dmats2[25][0] + coeff0_26*dmats2[26][0] + coeff0_27*dmats2[27][0] + coeff0_28*dmats2[28][0] + coeff0_29*dmats2[29][0] + coeff0_30*dmats2[30][0] + coeff0_31*dmats2[31][0] + coeff0_32*dmats2[32][0] + coeff0_33*dmats2[33][0] + coeff0_34*dmats2[34][0];
          new_coeff0_1 = coeff0_0*dmats2[0][1] + coeff0_1*dmats2[1][1] + coeff0_2*dmats2[2][1] + coeff0_3*dmats2[3][1] + coeff0_4*dmats2[4][1] + coeff0_5*dmats2[5][1] + coeff0_6*dmats2[6][1] + coeff0_7*dmats2[7][1] + coeff0_8*dmats2[8][1] + coeff0_9*dmats2[9][1] + coeff0_10*dmats2[10][1] + coeff0_11*dmats2[11][1] + coeff0_12*dmats2[12][1] + coeff0_13*dmats2[13][1] + coeff0_14*dmats2[14][1] + coeff0_15*dmats2[15][1] + coeff0_16*dmats2[16][1] + coeff0_17*dmats2[17][1] + coeff0_18*dmats2[18][1] + coeff0_19*dmats2[19][1] + coeff0_20*dmats2[20][1] + coeff0_21*dmats2[21][1] + coeff0_22*dmats2[22][1] + coeff0_23*dmats2[23][1] + coeff0_24*dmats2[24][1] + coeff0_25*dmats2[25][1] + coeff0_26*dmats2[26][1] + coeff0_27*dmats2[27][1] + coeff0_28*dmats2[28][1] + coeff0_29*dmats2[29][1] + coeff0_30*dmats2[30][1] + coeff0_31*dmats2[31][1] + coeff0_32*dmats2[32][1] + coeff0_33*dmats2[33][1] + coeff0_34*dmats2[34][1];
          new_coeff0_2 = coeff0_0*dmats2[0][2] + coeff0_1*dmats2[1][2] + coeff0_2*dmats2[2][2] + coeff0_3*dmats2[3][2] + coeff0_4*dmats2[4][2] + coeff0_5*dmats2[5][2] + coeff0_6*dmats2[6][2] + coeff0_7*dmats2[7][2] + coeff0_8*dmats2[8][2] + coeff0_9*dmats2[9][2] + coeff0_10*dmats2[10][2] + coeff0_11*dmats2[11][2] + coeff0_12*dmats2[12][2] + coeff0_13*dmats2[13][2] + coeff0_14*dmats2[14][2] + coeff0_15*dmats2[15][2] + coeff0_16*dmats2[16][2] + coeff0_17*dmats2[17][2] + coeff0_18*dmats2[18][2] + coeff0_19*dmats2[19][2] + coeff0_20*dmats2[20][2] + coeff0_21*dmats2[21][2] + coeff0_22*dmats2[22][2] + coeff0_23*dmats2[23][2] + coeff0_24*dmats2[24][2] + coeff0_25*dmats2[25][2] + coeff0_26*dmats2[26][2] + coeff0_27*dmats2[27][2] + coeff0_28*dmats2[28][2] + coeff0_29*dmats2[29][2] + coeff0_30*dmats2[30][2] + coeff0_31*dmats2[31][2] + coeff0_32*dmats2[32][2] + coeff0_33*dmats2[33][2] + coeff0_34*dmats2[34][2];
          new_coeff0_3 = coeff0_0*dmats2[0][3] + coeff0_1*dmats2[1][3] + coeff0_2*dmats2[2][3] + coeff0_3*dmats2[3][3] + coeff0_4*dmats2[4][3] + coeff0_5*dmats2[5][3] + coeff0_6*dmats2[6][3] + coeff0_7*dmats2[7][3] + coeff0_8*dmats2[8][3] + coeff0_9*dmats2[9][3] + coeff0_10*dmats2[10][3] + coeff0_11*dmats2[11][3] + coeff0_12*dmats2[12][3] + coeff0_13*dmats2[13][3] + coeff0_14*dmats2[14][3] + coeff0_15*dmats2[15][3] + coeff0_16*dmats2[16][3] + coeff0_17*dmats2[17][3] + coeff0_18*dmats2[18][3] + coeff0_19*dmats2[19][3] + coeff0_20*dmats2[20][3] + coeff0_21*dmats2[21][3] + coeff0_22*dmats2[22][3] + coeff0_23*dmats2[23][3] + coeff0_24*dmats2[24][3] + coeff0_25*dmats2[25][3] + coeff0_26*dmats2[26][3] + coeff0_27*dmats2[27][3] + coeff0_28*dmats2[28][3] + coeff0_29*dmats2[29][3] + coeff0_30*dmats2[30][3] + coeff0_31*dmats2[31][3] + coeff0_32*dmats2[32][3] + coeff0_33*dmats2[33][3] + coeff0_34*dmats2[34][3];
          new_coeff0_4 = coeff0_0*dmats2[0][4] + coeff0_1*dmats2[1][4] + coeff0_2*dmats2[2][4] + coeff0_3*dmats2[3][4] + coeff0_4*dmats2[4][4] + coeff0_5*dmats2[5][4] + coeff0_6*dmats2[6][4] + coeff0_7*dmats2[7][4] + coeff0_8*dmats2[8][4] + coeff0_9*dmats2[9][4] + coeff0_10*dmats2[10][4] + coeff0_11*dmats2[11][4] + coeff0_12*dmats2[12][4] + coeff0_13*dmats2[13][4] + coeff0_14*dmats2[14][4] + coeff0_15*dmats2[15][4] + coeff0_16*dmats2[16][4] + coeff0_17*dmats2[17][4] + coeff0_18*dmats2[18][4] + coeff0_19*dmats2[19][4] + coeff0_20*dmats2[20][4] + coeff0_21*dmats2[21][4] + coeff0_22*dmats2[22][4] + coeff0_23*dmats2[23][4] + coeff0_24*dmats2[24][4] + coeff0_25*dmats2[25][4] + coeff0_26*dmats2[26][4] + coeff0_27*dmats2[27][4] + coeff0_28*dmats2[28][4] + coeff0_29*dmats2[29][4] + coeff0_30*dmats2[30][4] + coeff0_31*dmats2[31][4] + coeff0_32*dmats2[32][4] + coeff0_33*dmats2[33][4] + coeff0_34*dmats2[34][4];
          new_coeff0_5 = coeff0_0*dmats2[0][5] + coeff0_1*dmats2[1][5] + coeff0_2*dmats2[2][5] + coeff0_3*dmats2[3][5] + coeff0_4*dmats2[4][5] + coeff0_5*dmats2[5][5] + coeff0_6*dmats2[6][5] + coeff0_7*dmats2[7][5] + coeff0_8*dmats2[8][5] + coeff0_9*dmats2[9][5] + coeff0_10*dmats2[10][5] + coeff0_11*dmats2[11][5] + coeff0_12*dmats2[12][5] + coeff0_13*dmats2[13][5] + coeff0_14*dmats2[14][5] + coeff0_15*dmats2[15][5] + coeff0_16*dmats2[16][5] + coeff0_17*dmats2[17][5] + coeff0_18*dmats2[18][5] + coeff0_19*dmats2[19][5] + coeff0_20*dmats2[20][5] + coeff0_21*dmats2[21][5] + coeff0_22*dmats2[22][5] + coeff0_23*dmats2[23][5] + coeff0_24*dmats2[24][5] + coeff0_25*dmats2[25][5] + coeff0_26*dmats2[26][5] + coeff0_27*dmats2[27][5] + coeff0_28*dmats2[28][5] + coeff0_29*dmats2[29][5] + coeff0_30*dmats2[30][5] + coeff0_31*dmats2[31][5] + coeff0_32*dmats2[32][5] + coeff0_33*dmats2[33][5] + coeff0_34*dmats2[34][5];
          new_coeff0_6 = coeff0_0*dmats2[0][6] + coeff0_1*dmats2[1][6] + coeff0_2*dmats2[2][6] + coeff0_3*dmats2[3][6] + coeff0_4*dmats2[4][6] + coeff0_5*dmats2[5][6] + coeff0_6*dmats2[6][6] + coeff0_7*dmats2[7][6] + coeff0_8*dmats2[8][6] + coeff0_9*dmats2[9][6] + coeff0_10*dmats2[10][6] + coeff0_11*dmats2[11][6] + coeff0_12*dmats2[12][6] + coeff0_13*dmats2[13][6] + coeff0_14*dmats2[14][6] + coeff0_15*dmats2[15][6] + coeff0_16*dmats2[16][6] + coeff0_17*dmats2[17][6] + coeff0_18*dmats2[18][6] + coeff0_19*dmats2[19][6] + coeff0_20*dmats2[20][6] + coeff0_21*dmats2[21][6] + coeff0_22*dmats2[22][6] + coeff0_23*dmats2[23][6] + coeff0_24*dmats2[24][6] + coeff0_25*dmats2[25][6] + coeff0_26*dmats2[26][6] + coeff0_27*dmats2[27][6] + coeff0_28*dmats2[28][6] + coeff0_29*dmats2[29][6] + coeff0_30*dmats2[30][6] + coeff0_31*dmats2[31][6] + coeff0_32*dmats2[32][6] + coeff0_33*dmats2[33][6] + coeff0_34*dmats2[34][6];
          new_coeff0_7 = coeff0_0*dmats2[0][7] + coeff0_1*dmats2[1][7] + coeff0_2*dmats2[2][7] + coeff0_3*dmats2[3][7] + coeff0_4*dmats2[4][7] + coeff0_5*dmats2[5][7] + coeff0_6*dmats2[6][7] + coeff0_7*dmats2[7][7] + coeff0_8*dmats2[8][7] + coeff0_9*dmats2[9][7] + coeff0_10*dmats2[10][7] + coeff0_11*dmats2[11][7] + coeff0_12*dmats2[12][7] + coeff0_13*dmats2[13][7] + coeff0_14*dmats2[14][7] + coeff0_15*dmats2[15][7] + coeff0_16*dmats2[16][7] + coeff0_17*dmats2[17][7] + coeff0_18*dmats2[18][7] + coeff0_19*dmats2[19][7] + coeff0_20*dmats2[20][7] + coeff0_21*dmats2[21][7] + coeff0_22*dmats2[22][7] + coeff0_23*dmats2[23][7] + coeff0_24*dmats2[24][7] + coeff0_25*dmats2[25][7] + coeff0_26*dmats2[26][7] + coeff0_27*dmats2[27][7] + coeff0_28*dmats2[28][7] + coeff0_29*dmats2[29][7] + coeff0_30*dmats2[30][7] + coeff0_31*dmats2[31][7] + coeff0_32*dmats2[32][7] + coeff0_33*dmats2[33][7] + coeff0_34*dmats2[34][7];
          new_coeff0_8 = coeff0_0*dmats2[0][8] + coeff0_1*dmats2[1][8] + coeff0_2*dmats2[2][8] + coeff0_3*dmats2[3][8] + coeff0_4*dmats2[4][8] + coeff0_5*dmats2[5][8] + coeff0_6*dmats2[6][8] + coeff0_7*dmats2[7][8] + coeff0_8*dmats2[8][8] + coeff0_9*dmats2[9][8] + coeff0_10*dmats2[10][8] + coeff0_11*dmats2[11][8] + coeff0_12*dmats2[12][8] + coeff0_13*dmats2[13][8] + coeff0_14*dmats2[14][8] + coeff0_15*dmats2[15][8] + coeff0_16*dmats2[16][8] + coeff0_17*dmats2[17][8] + coeff0_18*dmats2[18][8] + coeff0_19*dmats2[19][8] + coeff0_20*dmats2[20][8] + coeff0_21*dmats2[21][8] + coeff0_22*dmats2[22][8] + coeff0_23*dmats2[23][8] + coeff0_24*dmats2[24][8] + coeff0_25*dmats2[25][8] + coeff0_26*dmats2[26][8] + coeff0_27*dmats2[27][8] + coeff0_28*dmats2[28][8] + coeff0_29*dmats2[29][8] + coeff0_30*dmats2[30][8] + coeff0_31*dmats2[31][8] + coeff0_32*dmats2[32][8] + coeff0_33*dmats2[33][8] + coeff0_34*dmats2[34][8];
          new_coeff0_9 = coeff0_0*dmats2[0][9] + coeff0_1*dmats2[1][9] + coeff0_2*dmats2[2][9] + coeff0_3*dmats2[3][9] + coeff0_4*dmats2[4][9] + coeff0_5*dmats2[5][9] + coeff0_6*dmats2[6][9] + coeff0_7*dmats2[7][9] + coeff0_8*dmats2[8][9] + coeff0_9*dmats2[9][9] + coeff0_10*dmats2[10][9] + coeff0_11*dmats2[11][9] + coeff0_12*dmats2[12][9] + coeff0_13*dmats2[13][9] + coeff0_14*dmats2[14][9] + coeff0_15*dmats2[15][9] + coeff0_16*dmats2[16][9] + coeff0_17*dmats2[17][9] + coeff0_18*dmats2[18][9] + coeff0_19*dmats2[19][9] + coeff0_20*dmats2[20][9] + coeff0_21*dmats2[21][9] + coeff0_22*dmats2[22][9] + coeff0_23*dmats2[23][9] + coeff0_24*dmats2[24][9] + coeff0_25*dmats2[25][9] + coeff0_26*dmats2[26][9] + coeff0_27*dmats2[27][9] + coeff0_28*dmats2[28][9] + coeff0_29*dmats2[29][9] + coeff0_30*dmats2[30][9] + coeff0_31*dmats2[31][9] + coeff0_32*dmats2[32][9] + coeff0_33*dmats2[33][9] + coeff0_34*dmats2[34][9];
          new_coeff0_10 = coeff0_0*dmats2[0][10] + coeff0_1*dmats2[1][10] + coeff0_2*dmats2[2][10] + coeff0_3*dmats2[3][10] + coeff0_4*dmats2[4][10] + coeff0_5*dmats2[5][10] + coeff0_6*dmats2[6][10] + coeff0_7*dmats2[7][10] + coeff0_8*dmats2[8][10] + coeff0_9*dmats2[9][10] + coeff0_10*dmats2[10][10] + coeff0_11*dmats2[11][10] + coeff0_12*dmats2[12][10] + coeff0_13*dmats2[13][10] + coeff0_14*dmats2[14][10] + coeff0_15*dmats2[15][10] + coeff0_16*dmats2[16][10] + coeff0_17*dmats2[17][10] + coeff0_18*dmats2[18][10] + coeff0_19*dmats2[19][10] + coeff0_20*dmats2[20][10] + coeff0_21*dmats2[21][10] + coeff0_22*dmats2[22][10] + coeff0_23*dmats2[23][10] + coeff0_24*dmats2[24][10] + coeff0_25*dmats2[25][10] + coeff0_26*dmats2[26][10] + coeff0_27*dmats2[27][10] + coeff0_28*dmats2[28][10] + coeff0_29*dmats2[29][10] + coeff0_30*dmats2[30][10] + coeff0_31*dmats2[31][10] + coeff0_32*dmats2[32][10] + coeff0_33*dmats2[33][10] + coeff0_34*dmats2[34][10];
          new_coeff0_11 = coeff0_0*dmats2[0][11] + coeff0_1*dmats2[1][11] + coeff0_2*dmats2[2][11] + coeff0_3*dmats2[3][11] + coeff0_4*dmats2[4][11] + coeff0_5*dmats2[5][11] + coeff0_6*dmats2[6][11] + coeff0_7*dmats2[7][11] + coeff0_8*dmats2[8][11] + coeff0_9*dmats2[9][11] + coeff0_10*dmats2[10][11] + coeff0_11*dmats2[11][11] + coeff0_12*dmats2[12][11] + coeff0_13*dmats2[13][11] + coeff0_14*dmats2[14][11] + coeff0_15*dmats2[15][11] + coeff0_16*dmats2[16][11] + coeff0_17*dmats2[17][11] + coeff0_18*dmats2[18][11] + coeff0_19*dmats2[19][11] + coeff0_20*dmats2[20][11] + coeff0_21*dmats2[21][11] + coeff0_22*dmats2[22][11] + coeff0_23*dmats2[23][11] + coeff0_24*dmats2[24][11] + coeff0_25*dmats2[25][11] + coeff0_26*dmats2[26][11] + coeff0_27*dmats2[27][11] + coeff0_28*dmats2[28][11] + coeff0_29*dmats2[29][11] + coeff0_30*dmats2[30][11] + coeff0_31*dmats2[31][11] + coeff0_32*dmats2[32][11] + coeff0_33*dmats2[33][11] + coeff0_34*dmats2[34][11];
          new_coeff0_12 = coeff0_0*dmats2[0][12] + coeff0_1*dmats2[1][12] + coeff0_2*dmats2[2][12] + coeff0_3*dmats2[3][12] + coeff0_4*dmats2[4][12] + coeff0_5*dmats2[5][12] + coeff0_6*dmats2[6][12] + coeff0_7*dmats2[7][12] + coeff0_8*dmats2[8][12] + coeff0_9*dmats2[9][12] + coeff0_10*dmats2[10][12] + coeff0_11*dmats2[11][12] + coeff0_12*dmats2[12][12] + coeff0_13*dmats2[13][12] + coeff0_14*dmats2[14][12] + coeff0_15*dmats2[15][12] + coeff0_16*dmats2[16][12] + coeff0_17*dmats2[17][12] + coeff0_18*dmats2[18][12] + coeff0_19*dmats2[19][12] + coeff0_20*dmats2[20][12] + coeff0_21*dmats2[21][12] + coeff0_22*dmats2[22][12] + coeff0_23*dmats2[23][12] + coeff0_24*dmats2[24][12] + coeff0_25*dmats2[25][12] + coeff0_26*dmats2[26][12] + coeff0_27*dmats2[27][12] + coeff0_28*dmats2[28][12] + coeff0_29*dmats2[29][12] + coeff0_30*dmats2[30][12] + coeff0_31*dmats2[31][12] + coeff0_32*dmats2[32][12] + coeff0_33*dmats2[33][12] + coeff0_34*dmats2[34][12];
          new_coeff0_13 = coeff0_0*dmats2[0][13] + coeff0_1*dmats2[1][13] + coeff0_2*dmats2[2][13] + coeff0_3*dmats2[3][13] + coeff0_4*dmats2[4][13] + coeff0_5*dmats2[5][13] + coeff0_6*dmats2[6][13] + coeff0_7*dmats2[7][13] + coeff0_8*dmats2[8][13] + coeff0_9*dmats2[9][13] + coeff0_10*dmats2[10][13] + coeff0_11*dmats2[11][13] + coeff0_12*dmats2[12][13] + coeff0_13*dmats2[13][13] + coeff0_14*dmats2[14][13] + coeff0_15*dmats2[15][13] + coeff0_16*dmats2[16][13] + coeff0_17*dmats2[17][13] + coeff0_18*dmats2[18][13] + coeff0_19*dmats2[19][13] + coeff0_20*dmats2[20][13] + coeff0_21*dmats2[21][13] + coeff0_22*dmats2[22][13] + coeff0_23*dmats2[23][13] + coeff0_24*dmats2[24][13] + coeff0_25*dmats2[25][13] + coeff0_26*dmats2[26][13] + coeff0_27*dmats2[27][13] + coeff0_28*dmats2[28][13] + coeff0_29*dmats2[29][13] + coeff0_30*dmats2[30][13] + coeff0_31*dmats2[31][13] + coeff0_32*dmats2[32][13] + coeff0_33*dmats2[33][13] + coeff0_34*dmats2[34][13];
          new_coeff0_14 = coeff0_0*dmats2[0][14] + coeff0_1*dmats2[1][14] + coeff0_2*dmats2[2][14] + coeff0_3*dmats2[3][14] + coeff0_4*dmats2[4][14] + coeff0_5*dmats2[5][14] + coeff0_6*dmats2[6][14] + coeff0_7*dmats2[7][14] + coeff0_8*dmats2[8][14] + coeff0_9*dmats2[9][14] + coeff0_10*dmats2[10][14] + coeff0_11*dmats2[11][14] + coeff0_12*dmats2[12][14] + coeff0_13*dmats2[13][14] + coeff0_14*dmats2[14][14] + coeff0_15*dmats2[15][14] + coeff0_16*dmats2[16][14] + coeff0_17*dmats2[17][14] + coeff0_18*dmats2[18][14] + coeff0_19*dmats2[19][14] + coeff0_20*dmats2[20][14] + coeff0_21*dmats2[21][14] + coeff0_22*dmats2[22][14] + coeff0_23*dmats2[23][14] + coeff0_24*dmats2[24][14] + coeff0_25*dmats2[25][14] + coeff0_26*dmats2[26][14] + coeff0_27*dmats2[27][14] + coeff0_28*dmats2[28][14] + coeff0_29*dmats2[29][14] + coeff0_30*dmats2[30][14] + coeff0_31*dmats2[31][14] + coeff0_32*dmats2[32][14] + coeff0_33*dmats2[33][14] + coeff0_34*dmats2[34][14];
          new_coeff0_15 = coeff0_0*dmats2[0][15] + coeff0_1*dmats2[1][15] + coeff0_2*dmats2[2][15] + coeff0_3*dmats2[3][15] + coeff0_4*dmats2[4][15] + coeff0_5*dmats2[5][15] + coeff0_6*dmats2[6][15] + coeff0_7*dmats2[7][15] + coeff0_8*dmats2[8][15] + coeff0_9*dmats2[9][15] + coeff0_10*dmats2[10][15] + coeff0_11*dmats2[11][15] + coeff0_12*dmats2[12][15] + coeff0_13*dmats2[13][15] + coeff0_14*dmats2[14][15] + coeff0_15*dmats2[15][15] + coeff0_16*dmats2[16][15] + coeff0_17*dmats2[17][15] + coeff0_18*dmats2[18][15] + coeff0_19*dmats2[19][15] + coeff0_20*dmats2[20][15] + coeff0_21*dmats2[21][15] + coeff0_22*dmats2[22][15] + coeff0_23*dmats2[23][15] + coeff0_24*dmats2[24][15] + coeff0_25*dmats2[25][15] + coeff0_26*dmats2[26][15] + coeff0_27*dmats2[27][15] + coeff0_28*dmats2[28][15] + coeff0_29*dmats2[29][15] + coeff0_30*dmats2[30][15] + coeff0_31*dmats2[31][15] + coeff0_32*dmats2[32][15] + coeff0_33*dmats2[33][15] + coeff0_34*dmats2[34][15];
          new_coeff0_16 = coeff0_0*dmats2[0][16] + coeff0_1*dmats2[1][16] + coeff0_2*dmats2[2][16] + coeff0_3*dmats2[3][16] + coeff0_4*dmats2[4][16] + coeff0_5*dmats2[5][16] + coeff0_6*dmats2[6][16] + coeff0_7*dmats2[7][16] + coeff0_8*dmats2[8][16] + coeff0_9*dmats2[9][16] + coeff0_10*dmats2[10][16] + coeff0_11*dmats2[11][16] + coeff0_12*dmats2[12][16] + coeff0_13*dmats2[13][16] + coeff0_14*dmats2[14][16] + coeff0_15*dmats2[15][16] + coeff0_16*dmats2[16][16] + coeff0_17*dmats2[17][16] + coeff0_18*dmats2[18][16] + coeff0_19*dmats2[19][16] + coeff0_20*dmats2[20][16] + coeff0_21*dmats2[21][16] + coeff0_22*dmats2[22][16] + coeff0_23*dmats2[23][16] + coeff0_24*dmats2[24][16] + coeff0_25*dmats2[25][16] + coeff0_26*dmats2[26][16] + coeff0_27*dmats2[27][16] + coeff0_28*dmats2[28][16] + coeff0_29*dmats2[29][16] + coeff0_30*dmats2[30][16] + coeff0_31*dmats2[31][16] + coeff0_32*dmats2[32][16] + coeff0_33*dmats2[33][16] + coeff0_34*dmats2[34][16];
          new_coeff0_17 = coeff0_0*dmats2[0][17] + coeff0_1*dmats2[1][17] + coeff0_2*dmats2[2][17] + coeff0_3*dmats2[3][17] + coeff0_4*dmats2[4][17] + coeff0_5*dmats2[5][17] + coeff0_6*dmats2[6][17] + coeff0_7*dmats2[7][17] + coeff0_8*dmats2[8][17] + coeff0_9*dmats2[9][17] + coeff0_10*dmats2[10][17] + coeff0_11*dmats2[11][17] + coeff0_12*dmats2[12][17] + coeff0_13*dmats2[13][17] + coeff0_14*dmats2[14][17] + coeff0_15*dmats2[15][17] + coeff0_16*dmats2[16][17] + coeff0_17*dmats2[17][17] + coeff0_18*dmats2[18][17] + coeff0_19*dmats2[19][17] + coeff0_20*dmats2[20][17] + coeff0_21*dmats2[21][17] + coeff0_22*dmats2[22][17] + coeff0_23*dmats2[23][17] + coeff0_24*dmats2[24][17] + coeff0_25*dmats2[25][17] + coeff0_26*dmats2[26][17] + coeff0_27*dmats2[27][17] + coeff0_28*dmats2[28][17] + coeff0_29*dmats2[29][17] + coeff0_30*dmats2[30][17] + coeff0_31*dmats2[31][17] + coeff0_32*dmats2[32][17] + coeff0_33*dmats2[33][17] + coeff0_34*dmats2[34][17];
          new_coeff0_18 = coeff0_0*dmats2[0][18] + coeff0_1*dmats2[1][18] + coeff0_2*dmats2[2][18] + coeff0_3*dmats2[3][18] + coeff0_4*dmats2[4][18] + coeff0_5*dmats2[5][18] + coeff0_6*dmats2[6][18] + coeff0_7*dmats2[7][18] + coeff0_8*dmats2[8][18] + coeff0_9*dmats2[9][18] + coeff0_10*dmats2[10][18] + coeff0_11*dmats2[11][18] + coeff0_12*dmats2[12][18] + coeff0_13*dmats2[13][18] + coeff0_14*dmats2[14][18] + coeff0_15*dmats2[15][18] + coeff0_16*dmats2[16][18] + coeff0_17*dmats2[17][18] + coeff0_18*dmats2[18][18] + coeff0_19*dmats2[19][18] + coeff0_20*dmats2[20][18] + coeff0_21*dmats2[21][18] + coeff0_22*dmats2[22][18] + coeff0_23*dmats2[23][18] + coeff0_24*dmats2[24][18] + coeff0_25*dmats2[25][18] + coeff0_26*dmats2[26][18] + coeff0_27*dmats2[27][18] + coeff0_28*dmats2[28][18] + coeff0_29*dmats2[29][18] + coeff0_30*dmats2[30][18] + coeff0_31*dmats2[31][18] + coeff0_32*dmats2[32][18] + coeff0_33*dmats2[33][18] + coeff0_34*dmats2[34][18];
          new_coeff0_19 = coeff0_0*dmats2[0][19] + coeff0_1*dmats2[1][19] + coeff0_2*dmats2[2][19] + coeff0_3*dmats2[3][19] + coeff0_4*dmats2[4][19] + coeff0_5*dmats2[5][19] + coeff0_6*dmats2[6][19] + coeff0_7*dmats2[7][19] + coeff0_8*dmats2[8][19] + coeff0_9*dmats2[9][19] + coeff0_10*dmats2[10][19] + coeff0_11*dmats2[11][19] + coeff0_12*dmats2[12][19] + coeff0_13*dmats2[13][19] + coeff0_14*dmats2[14][19] + coeff0_15*dmats2[15][19] + coeff0_16*dmats2[16][19] + coeff0_17*dmats2[17][19] + coeff0_18*dmats2[18][19] + coeff0_19*dmats2[19][19] + coeff0_20*dmats2[20][19] + coeff0_21*dmats2[21][19] + coeff0_22*dmats2[22][19] + coeff0_23*dmats2[23][19] + coeff0_24*dmats2[24][19] + coeff0_25*dmats2[25][19] + coeff0_26*dmats2[26][19] + coeff0_27*dmats2[27][19] + coeff0_28*dmats2[28][19] + coeff0_29*dmats2[29][19] + coeff0_30*dmats2[30][19] + coeff0_31*dmats2[31][19] + coeff0_32*dmats2[32][19] + coeff0_33*dmats2[33][19] + coeff0_34*dmats2[34][19];
          new_coeff0_20 = coeff0_0*dmats2[0][20] + coeff0_1*dmats2[1][20] + coeff0_2*dmats2[2][20] + coeff0_3*dmats2[3][20] + coeff0_4*dmats2[4][20] + coeff0_5*dmats2[5][20] + coeff0_6*dmats2[6][20] + coeff0_7*dmats2[7][20] + coeff0_8*dmats2[8][20] + coeff0_9*dmats2[9][20] + coeff0_10*dmats2[10][20] + coeff0_11*dmats2[11][20] + coeff0_12*dmats2[12][20] + coeff0_13*dmats2[13][20] + coeff0_14*dmats2[14][20] + coeff0_15*dmats2[15][20] + coeff0_16*dmats2[16][20] + coeff0_17*dmats2[17][20] + coeff0_18*dmats2[18][20] + coeff0_19*dmats2[19][20] + coeff0_20*dmats2[20][20] + coeff0_21*dmats2[21][20] + coeff0_22*dmats2[22][20] + coeff0_23*dmats2[23][20] + coeff0_24*dmats2[24][20] + coeff0_25*dmats2[25][20] + coeff0_26*dmats2[26][20] + coeff0_27*dmats2[27][20] + coeff0_28*dmats2[28][20] + coeff0_29*dmats2[29][20] + coeff0_30*dmats2[30][20] + coeff0_31*dmats2[31][20] + coeff0_32*dmats2[32][20] + coeff0_33*dmats2[33][20] + coeff0_34*dmats2[34][20];
          new_coeff0_21 = coeff0_0*dmats2[0][21] + coeff0_1*dmats2[1][21] + coeff0_2*dmats2[2][21] + coeff0_3*dmats2[3][21] + coeff0_4*dmats2[4][21] + coeff0_5*dmats2[5][21] + coeff0_6*dmats2[6][21] + coeff0_7*dmats2[7][21] + coeff0_8*dmats2[8][21] + coeff0_9*dmats2[9][21] + coeff0_10*dmats2[10][21] + coeff0_11*dmats2[11][21] + coeff0_12*dmats2[12][21] + coeff0_13*dmats2[13][21] + coeff0_14*dmats2[14][21] + coeff0_15*dmats2[15][21] + coeff0_16*dmats2[16][21] + coeff0_17*dmats2[17][21] + coeff0_18*dmats2[18][21] + coeff0_19*dmats2[19][21] + coeff0_20*dmats2[20][21] + coeff0_21*dmats2[21][21] + coeff0_22*dmats2[22][21] + coeff0_23*dmats2[23][21] + coeff0_24*dmats2[24][21] + coeff0_25*dmats2[25][21] + coeff0_26*dmats2[26][21] + coeff0_27*dmats2[27][21] + coeff0_28*dmats2[28][21] + coeff0_29*dmats2[29][21] + coeff0_30*dmats2[30][21] + coeff0_31*dmats2[31][21] + coeff0_32*dmats2[32][21] + coeff0_33*dmats2[33][21] + coeff0_34*dmats2[34][21];
          new_coeff0_22 = coeff0_0*dmats2[0][22] + coeff0_1*dmats2[1][22] + coeff0_2*dmats2[2][22] + coeff0_3*dmats2[3][22] + coeff0_4*dmats2[4][22] + coeff0_5*dmats2[5][22] + coeff0_6*dmats2[6][22] + coeff0_7*dmats2[7][22] + coeff0_8*dmats2[8][22] + coeff0_9*dmats2[9][22] + coeff0_10*dmats2[10][22] + coeff0_11*dmats2[11][22] + coeff0_12*dmats2[12][22] + coeff0_13*dmats2[13][22] + coeff0_14*dmats2[14][22] + coeff0_15*dmats2[15][22] + coeff0_16*dmats2[16][22] + coeff0_17*dmats2[17][22] + coeff0_18*dmats2[18][22] + coeff0_19*dmats2[19][22] + coeff0_20*dmats2[20][22] + coeff0_21*dmats2[21][22] + coeff0_22*dmats2[22][22] + coeff0_23*dmats2[23][22] + coeff0_24*dmats2[24][22] + coeff0_25*dmats2[25][22] + coeff0_26*dmats2[26][22] + coeff0_27*dmats2[27][22] + coeff0_28*dmats2[28][22] + coeff0_29*dmats2[29][22] + coeff0_30*dmats2[30][22] + coeff0_31*dmats2[31][22] + coeff0_32*dmats2[32][22] + coeff0_33*dmats2[33][22] + coeff0_34*dmats2[34][22];
          new_coeff0_23 = coeff0_0*dmats2[0][23] + coeff0_1*dmats2[1][23] + coeff0_2*dmats2[2][23] + coeff0_3*dmats2[3][23] + coeff0_4*dmats2[4][23] + coeff0_5*dmats2[5][23] + coeff0_6*dmats2[6][23] + coeff0_7*dmats2[7][23] + coeff0_8*dmats2[8][23] + coeff0_9*dmats2[9][23] + coeff0_10*dmats2[10][23] + coeff0_11*dmats2[11][23] + coeff0_12*dmats2[12][23] + coeff0_13*dmats2[13][23] + coeff0_14*dmats2[14][23] + coeff0_15*dmats2[15][23] + coeff0_16*dmats2[16][23] + coeff0_17*dmats2[17][23] + coeff0_18*dmats2[18][23] + coeff0_19*dmats2[19][23] + coeff0_20*dmats2[20][23] + coeff0_21*dmats2[21][23] + coeff0_22*dmats2[22][23] + coeff0_23*dmats2[23][23] + coeff0_24*dmats2[24][23] + coeff0_25*dmats2[25][23] + coeff0_26*dmats2[26][23] + coeff0_27*dmats2[27][23] + coeff0_28*dmats2[28][23] + coeff0_29*dmats2[29][23] + coeff0_30*dmats2[30][23] + coeff0_31*dmats2[31][23] + coeff0_32*dmats2[32][23] + coeff0_33*dmats2[33][23] + coeff0_34*dmats2[34][23];
          new_coeff0_24 = coeff0_0*dmats2[0][24] + coeff0_1*dmats2[1][24] + coeff0_2*dmats2[2][24] + coeff0_3*dmats2[3][24] + coeff0_4*dmats2[4][24] + coeff0_5*dmats2[5][24] + coeff0_6*dmats2[6][24] + coeff0_7*dmats2[7][24] + coeff0_8*dmats2[8][24] + coeff0_9*dmats2[9][24] + coeff0_10*dmats2[10][24] + coeff0_11*dmats2[11][24] + coeff0_12*dmats2[12][24] + coeff0_13*dmats2[13][24] + coeff0_14*dmats2[14][24] + coeff0_15*dmats2[15][24] + coeff0_16*dmats2[16][24] + coeff0_17*dmats2[17][24] + coeff0_18*dmats2[18][24] + coeff0_19*dmats2[19][24] + coeff0_20*dmats2[20][24] + coeff0_21*dmats2[21][24] + coeff0_22*dmats2[22][24] + coeff0_23*dmats2[23][24] + coeff0_24*dmats2[24][24] + coeff0_25*dmats2[25][24] + coeff0_26*dmats2[26][24] + coeff0_27*dmats2[27][24] + coeff0_28*dmats2[28][24] + coeff0_29*dmats2[29][24] + coeff0_30*dmats2[30][24] + coeff0_31*dmats2[31][24] + coeff0_32*dmats2[32][24] + coeff0_33*dmats2[33][24] + coeff0_34*dmats2[34][24];
          new_coeff0_25 = coeff0_0*dmats2[0][25] + coeff0_1*dmats2[1][25] + coeff0_2*dmats2[2][25] + coeff0_3*dmats2[3][25] + coeff0_4*dmats2[4][25] + coeff0_5*dmats2[5][25] + coeff0_6*dmats2[6][25] + coeff0_7*dmats2[7][25] + coeff0_8*dmats2[8][25] + coeff0_9*dmats2[9][25] + coeff0_10*dmats2[10][25] + coeff0_11*dmats2[11][25] + coeff0_12*dmats2[12][25] + coeff0_13*dmats2[13][25] + coeff0_14*dmats2[14][25] + coeff0_15*dmats2[15][25] + coeff0_16*dmats2[16][25] + coeff0_17*dmats2[17][25] + coeff0_18*dmats2[18][25] + coeff0_19*dmats2[19][25] + coeff0_20*dmats2[20][25] + coeff0_21*dmats2[21][25] + coeff0_22*dmats2[22][25] + coeff0_23*dmats2[23][25] + coeff0_24*dmats2[24][25] + coeff0_25*dmats2[25][25] + coeff0_26*dmats2[26][25] + coeff0_27*dmats2[27][25] + coeff0_28*dmats2[28][25] + coeff0_29*dmats2[29][25] + coeff0_30*dmats2[30][25] + coeff0_31*dmats2[31][25] + coeff0_32*dmats2[32][25] + coeff0_33*dmats2[33][25] + coeff0_34*dmats2[34][25];
          new_coeff0_26 = coeff0_0*dmats2[0][26] + coeff0_1*dmats2[1][26] + coeff0_2*dmats2[2][26] + coeff0_3*dmats2[3][26] + coeff0_4*dmats2[4][26] + coeff0_5*dmats2[5][26] + coeff0_6*dmats2[6][26] + coeff0_7*dmats2[7][26] + coeff0_8*dmats2[8][26] + coeff0_9*dmats2[9][26] + coeff0_10*dmats2[10][26] + coeff0_11*dmats2[11][26] + coeff0_12*dmats2[12][26] + coeff0_13*dmats2[13][26] + coeff0_14*dmats2[14][26] + coeff0_15*dmats2[15][26] + coeff0_16*dmats2[16][26] + coeff0_17*dmats2[17][26] + coeff0_18*dmats2[18][26] + coeff0_19*dmats2[19][26] + coeff0_20*dmats2[20][26] + coeff0_21*dmats2[21][26] + coeff0_22*dmats2[22][26] + coeff0_23*dmats2[23][26] + coeff0_24*dmats2[24][26] + coeff0_25*dmats2[25][26] + coeff0_26*dmats2[26][26] + coeff0_27*dmats2[27][26] + coeff0_28*dmats2[28][26] + coeff0_29*dmats2[29][26] + coeff0_30*dmats2[30][26] + coeff0_31*dmats2[31][26] + coeff0_32*dmats2[32][26] + coeff0_33*dmats2[33][26] + coeff0_34*dmats2[34][26];
          new_coeff0_27 = coeff0_0*dmats2[0][27] + coeff0_1*dmats2[1][27] + coeff0_2*dmats2[2][27] + coeff0_3*dmats2[3][27] + coeff0_4*dmats2[4][27] + coeff0_5*dmats2[5][27] + coeff0_6*dmats2[6][27] + coeff0_7*dmats2[7][27] + coeff0_8*dmats2[8][27] + coeff0_9*dmats2[9][27] + coeff0_10*dmats2[10][27] + coeff0_11*dmats2[11][27] + coeff0_12*dmats2[12][27] + coeff0_13*dmats2[13][27] + coeff0_14*dmats2[14][27] + coeff0_15*dmats2[15][27] + coeff0_16*dmats2[16][27] + coeff0_17*dmats2[17][27] + coeff0_18*dmats2[18][27] + coeff0_19*dmats2[19][27] + coeff0_20*dmats2[20][27] + coeff0_21*dmats2[21][27] + coeff0_22*dmats2[22][27] + coeff0_23*dmats2[23][27] + coeff0_24*dmats2[24][27] + coeff0_25*dmats2[25][27] + coeff0_26*dmats2[26][27] + coeff0_27*dmats2[27][27] + coeff0_28*dmats2[28][27] + coeff0_29*dmats2[29][27] + coeff0_30*dmats2[30][27] + coeff0_31*dmats2[31][27] + coeff0_32*dmats2[32][27] + coeff0_33*dmats2[33][27] + coeff0_34*dmats2[34][27];
          new_coeff0_28 = coeff0_0*dmats2[0][28] + coeff0_1*dmats2[1][28] + coeff0_2*dmats2[2][28] + coeff0_3*dmats2[3][28] + coeff0_4*dmats2[4][28] + coeff0_5*dmats2[5][28] + coeff0_6*dmats2[6][28] + coeff0_7*dmats2[7][28] + coeff0_8*dmats2[8][28] + coeff0_9*dmats2[9][28] + coeff0_10*dmats2[10][28] + coeff0_11*dmats2[11][28] + coeff0_12*dmats2[12][28] + coeff0_13*dmats2[13][28] + coeff0_14*dmats2[14][28] + coeff0_15*dmats2[15][28] + coeff0_16*dmats2[16][28] + coeff0_17*dmats2[17][28] + coeff0_18*dmats2[18][28] + coeff0_19*dmats2[19][28] + coeff0_20*dmats2[20][28] + coeff0_21*dmats2[21][28] + coeff0_22*dmats2[22][28] + coeff0_23*dmats2[23][28] + coeff0_24*dmats2[24][28] + coeff0_25*dmats2[25][28] + coeff0_26*dmats2[26][28] + coeff0_27*dmats2[27][28] + coeff0_28*dmats2[28][28] + coeff0_29*dmats2[29][28] + coeff0_30*dmats2[30][28] + coeff0_31*dmats2[31][28] + coeff0_32*dmats2[32][28] + coeff0_33*dmats2[33][28] + coeff0_34*dmats2[34][28];
          new_coeff0_29 = coeff0_0*dmats2[0][29] + coeff0_1*dmats2[1][29] + coeff0_2*dmats2[2][29] + coeff0_3*dmats2[3][29] + coeff0_4*dmats2[4][29] + coeff0_5*dmats2[5][29] + coeff0_6*dmats2[6][29] + coeff0_7*dmats2[7][29] + coeff0_8*dmats2[8][29] + coeff0_9*dmats2[9][29] + coeff0_10*dmats2[10][29] + coeff0_11*dmats2[11][29] + coeff0_12*dmats2[12][29] + coeff0_13*dmats2[13][29] + coeff0_14*dmats2[14][29] + coeff0_15*dmats2[15][29] + coeff0_16*dmats2[16][29] + coeff0_17*dmats2[17][29] + coeff0_18*dmats2[18][29] + coeff0_19*dmats2[19][29] + coeff0_20*dmats2[20][29] + coeff0_21*dmats2[21][29] + coeff0_22*dmats2[22][29] + coeff0_23*dmats2[23][29] + coeff0_24*dmats2[24][29] + coeff0_25*dmats2[25][29] + coeff0_26*dmats2[26][29] + coeff0_27*dmats2[27][29] + coeff0_28*dmats2[28][29] + coeff0_29*dmats2[29][29] + coeff0_30*dmats2[30][29] + coeff0_31*dmats2[31][29] + coeff0_32*dmats2[32][29] + coeff0_33*dmats2[33][29] + coeff0_34*dmats2[34][29];
          new_coeff0_30 = coeff0_0*dmats2[0][30] + coeff0_1*dmats2[1][30] + coeff0_2*dmats2[2][30] + coeff0_3*dmats2[3][30] + coeff0_4*dmats2[4][30] + coeff0_5*dmats2[5][30] + coeff0_6*dmats2[6][30] + coeff0_7*dmats2[7][30] + coeff0_8*dmats2[8][30] + coeff0_9*dmats2[9][30] + coeff0_10*dmats2[10][30] + coeff0_11*dmats2[11][30] + coeff0_12*dmats2[12][30] + coeff0_13*dmats2[13][30] + coeff0_14*dmats2[14][30] + coeff0_15*dmats2[15][30] + coeff0_16*dmats2[16][30] + coeff0_17*dmats2[17][30] + coeff0_18*dmats2[18][30] + coeff0_19*dmats2[19][30] + coeff0_20*dmats2[20][30] + coeff0_21*dmats2[21][30] + coeff0_22*dmats2[22][30] + coeff0_23*dmats2[23][30] + coeff0_24*dmats2[24][30] + coeff0_25*dmats2[25][30] + coeff0_26*dmats2[26][30] + coeff0_27*dmats2[27][30] + coeff0_28*dmats2[28][30] + coeff0_29*dmats2[29][30] + coeff0_30*dmats2[30][30] + coeff0_31*dmats2[31][30] + coeff0_32*dmats2[32][30] + coeff0_33*dmats2[33][30] + coeff0_34*dmats2[34][30];
          new_coeff0_31 = coeff0_0*dmats2[0][31] + coeff0_1*dmats2[1][31] + coeff0_2*dmats2[2][31] + coeff0_3*dmats2[3][31] + coeff0_4*dmats2[4][31] + coeff0_5*dmats2[5][31] + coeff0_6*dmats2[6][31] + coeff0_7*dmats2[7][31] + coeff0_8*dmats2[8][31] + coeff0_9*dmats2[9][31] + coeff0_10*dmats2[10][31] + coeff0_11*dmats2[11][31] + coeff0_12*dmats2[12][31] + coeff0_13*dmats2[13][31] + coeff0_14*dmats2[14][31] + coeff0_15*dmats2[15][31] + coeff0_16*dmats2[16][31] + coeff0_17*dmats2[17][31] + coeff0_18*dmats2[18][31] + coeff0_19*dmats2[19][31] + coeff0_20*dmats2[20][31] + coeff0_21*dmats2[21][31] + coeff0_22*dmats2[22][31] + coeff0_23*dmats2[23][31] + coeff0_24*dmats2[24][31] + coeff0_25*dmats2[25][31] + coeff0_26*dmats2[26][31] + coeff0_27*dmats2[27][31] + coeff0_28*dmats2[28][31] + coeff0_29*dmats2[29][31] + coeff0_30*dmats2[30][31] + coeff0_31*dmats2[31][31] + coeff0_32*dmats2[32][31] + coeff0_33*dmats2[33][31] + coeff0_34*dmats2[34][31];
          new_coeff0_32 = coeff0_0*dmats2[0][32] + coeff0_1*dmats2[1][32] + coeff0_2*dmats2[2][32] + coeff0_3*dmats2[3][32] + coeff0_4*dmats2[4][32] + coeff0_5*dmats2[5][32] + coeff0_6*dmats2[6][32] + coeff0_7*dmats2[7][32] + coeff0_8*dmats2[8][32] + coeff0_9*dmats2[9][32] + coeff0_10*dmats2[10][32] + coeff0_11*dmats2[11][32] + coeff0_12*dmats2[12][32] + coeff0_13*dmats2[13][32] + coeff0_14*dmats2[14][32] + coeff0_15*dmats2[15][32] + coeff0_16*dmats2[16][32] + coeff0_17*dmats2[17][32] + coeff0_18*dmats2[18][32] + coeff0_19*dmats2[19][32] + coeff0_20*dmats2[20][32] + coeff0_21*dmats2[21][32] + coeff0_22*dmats2[22][32] + coeff0_23*dmats2[23][32] + coeff0_24*dmats2[24][32] + coeff0_25*dmats2[25][32] + coeff0_26*dmats2[26][32] + coeff0_27*dmats2[27][32] + coeff0_28*dmats2[28][32] + coeff0_29*dmats2[29][32] + coeff0_30*dmats2[30][32] + coeff0_31*dmats2[31][32] + coeff0_32*dmats2[32][32] + coeff0_33*dmats2[33][32] + coeff0_34*dmats2[34][32];
          new_coeff0_33 = coeff0_0*dmats2[0][33] + coeff0_1*dmats2[1][33] + coeff0_2*dmats2[2][33] + coeff0_3*dmats2[3][33] + coeff0_4*dmats2[4][33] + coeff0_5*dmats2[5][33] + coeff0_6*dmats2[6][33] + coeff0_7*dmats2[7][33] + coeff0_8*dmats2[8][33] + coeff0_9*dmats2[9][33] + coeff0_10*dmats2[10][33] + coeff0_11*dmats2[11][33] + coeff0_12*dmats2[12][33] + coeff0_13*dmats2[13][33] + coeff0_14*dmats2[14][33] + coeff0_15*dmats2[15][33] + coeff0_16*dmats2[16][33] + coeff0_17*dmats2[17][33] + coeff0_18*dmats2[18][33] + coeff0_19*dmats2[19][33] + coeff0_20*dmats2[20][33] + coeff0_21*dmats2[21][33] + coeff0_22*dmats2[22][33] + coeff0_23*dmats2[23][33] + coeff0_24*dmats2[24][33] + coeff0_25*dmats2[25][33] + coeff0_26*dmats2[26][33] + coeff0_27*dmats2[27][33] + coeff0_28*dmats2[28][33] + coeff0_29*dmats2[29][33] + coeff0_30*dmats2[30][33] + coeff0_31*dmats2[31][33] + coeff0_32*dmats2[32][33] + coeff0_33*dmats2[33][33] + coeff0_34*dmats2[34][33];
          new_coeff0_34 = coeff0_0*dmats2[0][34] + coeff0_1*dmats2[1][34] + coeff0_2*dmats2[2][34] + coeff0_3*dmats2[3][34] + coeff0_4*dmats2[4][34] + coeff0_5*dmats2[5][34] + coeff0_6*dmats2[6][34] + coeff0_7*dmats2[7][34] + coeff0_8*dmats2[8][34] + coeff0_9*dmats2[9][34] + coeff0_10*dmats2[10][34] + coeff0_11*dmats2[11][34] + coeff0_12*dmats2[12][34] + coeff0_13*dmats2[13][34] + coeff0_14*dmats2[14][34] + coeff0_15*dmats2[15][34] + coeff0_16*dmats2[16][34] + coeff0_17*dmats2[17][34] + coeff0_18*dmats2[18][34] + coeff0_19*dmats2[19][34] + coeff0_20*dmats2[20][34] + coeff0_21*dmats2[21][34] + coeff0_22*dmats2[22][34] + coeff0_23*dmats2[23][34] + coeff0_24*dmats2[24][34] + coeff0_25*dmats2[25][34] + coeff0_26*dmats2[26][34] + coeff0_27*dmats2[27][34] + coeff0_28*dmats2[28][34] + coeff0_29*dmats2[29][34] + coeff0_30*dmats2[30][34] + coeff0_31*dmats2[31][34] + coeff0_32*dmats2[32][34] + coeff0_33*dmats2[33][34] + coeff0_34*dmats2[34][34];
        }
    
      }
      // Compute derivatives on reference element as dot product of coefficients and basisvalues
      derivatives[deriv_num] = new_coeff0_0*basisvalue0 + new_coeff0_1*basisvalue1 + new_coeff0_2*basisvalue2 + new_coeff0_3*basisvalue3 + new_coeff0_4*basisvalue4 + new_coeff0_5*basisvalue5 + new_coeff0_6*basisvalue6 + new_coeff0_7*basisvalue7 + new_coeff0_8*basisvalue8 + new_coeff0_9*basisvalue9 + new_coeff0_10*basisvalue10 + new_coeff0_11*basisvalue11 + new_coeff0_12*basisvalue12 + new_coeff0_13*basisvalue13 + new_coeff0_14*basisvalue14 + new_coeff0_15*basisvalue15 + new_coeff0_16*basisvalue16 + new_coeff0_17*basisvalue17 + new_coeff0_18*basisvalue18 + new_coeff0_19*basisvalue19 + new_coeff0_20*basisvalue20 + new_coeff0_21*basisvalue21 + new_coeff0_22*basisvalue22 + new_coeff0_23*basisvalue23 + new_coeff0_24*basisvalue24 + new_coeff0_25*basisvalue25 + new_coeff0_26*basisvalue26 + new_coeff0_27*basisvalue27 + new_coeff0_28*basisvalue28 + new_coeff0_29*basisvalue29 + new_coeff0_30*basisvalue30 + new_coeff0_31*basisvalue31 + new_coeff0_32*basisvalue32 + new_coeff0_33*basisvalue33 + new_coeff0_34*basisvalue34;
    }
    
    // Transform derivatives back to physical element
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        values[row] += transform[row][col]*derivatives[col];
      }
    }
    // Delete pointer to array of derivatives on FIAT element
    delete [] derivatives;
    
    // Delete pointer to array of combinations of derivatives and transform
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      delete [] combinations[row];
      delete [] transform[row];
    }
    
    delete [] combinations;
    delete [] transform;
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis_derivatives() is not yet implemented.");
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // The reference points, direction and weights:
    const static double X[35][1][3] = {{{0, 0, 0}}, {{1, 0, 0}}, {{0, 1, 0}}, {{0, 0, 1}}, {{0, 0.75, 0.25}}, {{0, 0.5, 0.5}}, {{0, 0.25, 0.75}}, {{0.75, 0, 0.25}}, {{0.5, 0, 0.5}}, {{0.25, 0, 0.75}}, {{0.75, 0.25, 0}}, {{0.5, 0.5, 0}}, {{0.25, 0.75, 0}}, {{0, 0, 0.25}}, {{0, 0, 0.5}}, {{0, 0, 0.75}}, {{0, 0.25, 0}}, {{0, 0.5, 0}}, {{0, 0.75, 0}}, {{0.25, 0, 0}}, {{0.5, 0, 0}}, {{0.75, 0, 0}}, {{0.5, 0.25, 0.25}}, {{0.25, 0.5, 0.25}}, {{0.25, 0.25, 0.5}}, {{0, 0.25, 0.25}}, {{0, 0.5, 0.25}}, {{0, 0.25, 0.5}}, {{0.25, 0, 0.25}}, {{0.5, 0, 0.25}}, {{0.25, 0, 0.5}}, {{0.25, 0.25, 0}}, {{0.5, 0.25, 0}}, {{0.25, 0.5, 0}}, {{0.25, 0.25, 0.25}}};
    const static double W[35][1] = {{1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}};
    const static double D[35][1][1] = {{{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}};
    
    const double * const * x = c.coordinates;
    double result = 0.0;
    // Iterate over the points:
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0][0] - X[i][0][1] - X[i][0][2];
    const double w1 = X[i][0][0];
    const double w2 = X[i][0][1];
    const double w3 = X[i][0][2];
    
    // Compute affine mapping y = F(X)
    double y[3];
    y[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0] + w3*x[3][0];
    y[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1] + w3*x[3][1];
    y[2] = w0*x[0][2] + w1*x[1][2] + w2*x[2][2] + w3*x[3][2];
    
    // Evaluate function at physical points
    double values[1];
    f.evaluate(values, y, c);
    
    // Map function values using appropriate mapping
    // Affine map: Do nothing
    
    // Note that we do not map the weights (yet).
    
    // Take directional components
    for(int k = 0; k < 1; k++)
      result += values[k]*D[i][0][k];
    // Multiply by weights 
    result *= W[i][0];
    
    return result;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate at vertices and use affine mapping
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new UFC_Poisson3D_4BilinearForm_finite_element_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class UFC_Poisson3D_4BilinearForm_dof_map_0: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  UFC_Poisson3D_4BilinearForm_dof_map_0() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~UFC_Poisson3D_4BilinearForm_dof_map_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for FiniteElement('Lagrange', 'tetrahedron', 4)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      return true;
      break;
    case 1:
      return true;
      break;
    case 2:
      return true;
      break;
    case 3:
      return true;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = m.num_entities[0] + 3*m.num_entities[1] + 3*m.num_entities[2] + m.num_entities[3];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space
  virtual unsigned int local_dimension() const
  {
    return 35;
  }

  // Return the geometric dimension of the coordinates this dof map provides
  virtual unsigned int geometric_dimension() const
  {
    return 3;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 15;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    dofs[3] = c.entity_indices[0][3];
    unsigned int offset = m.num_entities[0];
    dofs[4] = offset + 3*c.entity_indices[1][0];
    dofs[5] = offset + 3*c.entity_indices[1][0] + 1;
    dofs[6] = offset + 3*c.entity_indices[1][0] + 2;
    dofs[7] = offset + 3*c.entity_indices[1][1];
    dofs[8] = offset + 3*c.entity_indices[1][1] + 1;
    dofs[9] = offset + 3*c.entity_indices[1][1] + 2;
    dofs[10] = offset + 3*c.entity_indices[1][2];
    dofs[11] = offset + 3*c.entity_indices[1][2] + 1;
    dofs[12] = offset + 3*c.entity_indices[1][2] + 2;
    dofs[13] = offset + 3*c.entity_indices[1][3];
    dofs[14] = offset + 3*c.entity_indices[1][3] + 1;
    dofs[15] = offset + 3*c.entity_indices[1][3] + 2;
    dofs[16] = offset + 3*c.entity_indices[1][4];
    dofs[17] = offset + 3*c.entity_indices[1][4] + 1;
    dofs[18] = offset + 3*c.entity_indices[1][4] + 2;
    dofs[19] = offset + 3*c.entity_indices[1][5];
    dofs[20] = offset + 3*c.entity_indices[1][5] + 1;
    dofs[21] = offset + 3*c.entity_indices[1][5] + 2;
    offset = offset + 3*m.num_entities[1];
    dofs[22] = offset + 3*c.entity_indices[2][0];
    dofs[23] = offset + 3*c.entity_indices[2][0] + 1;
    dofs[24] = offset + 3*c.entity_indices[2][0] + 2;
    dofs[25] = offset + 3*c.entity_indices[2][1];
    dofs[26] = offset + 3*c.entity_indices[2][1] + 1;
    dofs[27] = offset + 3*c.entity_indices[2][1] + 2;
    dofs[28] = offset + 3*c.entity_indices[2][2];
    dofs[29] = offset + 3*c.entity_indices[2][2] + 1;
    dofs[30] = offset + 3*c.entity_indices[2][2] + 2;
    dofs[31] = offset + 3*c.entity_indices[2][3];
    dofs[32] = offset + 3*c.entity_indices[2][3] + 1;
    dofs[33] = offset + 3*c.entity_indices[2][3] + 2;
    offset = offset + 3*m.num_entities[2];
    dofs[34] = offset + c.entity_indices[3][0];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch (facet)
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 7;
      dofs[7] = 8;
      dofs[8] = 9;
      dofs[9] = 10;
      dofs[10] = 11;
      dofs[11] = 12;
      dofs[12] = 22;
      dofs[13] = 23;
      dofs[14] = 24;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 13;
      dofs[7] = 14;
      dofs[8] = 15;
      dofs[9] = 16;
      dofs[10] = 17;
      dofs[11] = 18;
      dofs[12] = 25;
      dofs[13] = 26;
      dofs[14] = 27;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 7;
      dofs[4] = 8;
      dofs[5] = 9;
      dofs[6] = 13;
      dofs[7] = 14;
      dofs[8] = 15;
      dofs[9] = 19;
      dofs[10] = 20;
      dofs[11] = 21;
      dofs[12] = 28;
      dofs[13] = 29;
      dofs[14] = 30;
      break;
    case 3:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 10;
      dofs[4] = 11;
      dofs[5] = 12;
      dofs[6] = 16;
      dofs[7] = 17;
      dofs[8] = 18;
      dofs[9] = 19;
      dofs[10] = 20;
      dofs[11] = 21;
      dofs[12] = 31;
      dofs[13] = 32;
      dofs[14] = 33;
      break;
    }
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[0][2] = x[0][2];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[1][2] = x[1][2];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[2][2] = x[2][2];
    coordinates[3][0] = x[3][0];
    coordinates[3][1] = x[3][1];
    coordinates[3][2] = x[3][2];
    coordinates[4][0] = 0.75*x[2][0] + 0.25*x[3][0];
    coordinates[4][1] = 0.75*x[2][1] + 0.25*x[3][1];
    coordinates[4][2] = 0.75*x[2][2] + 0.25*x[3][2];
    coordinates[5][0] = 0.5*x[2][0] + 0.5*x[3][0];
    coordinates[5][1] = 0.5*x[2][1] + 0.5*x[3][1];
    coordinates[5][2] = 0.5*x[2][2] + 0.5*x[3][2];
    coordinates[6][0] = 0.25*x[2][0] + 0.75*x[3][0];
    coordinates[6][1] = 0.25*x[2][1] + 0.75*x[3][1];
    coordinates[6][2] = 0.25*x[2][2] + 0.75*x[3][2];
    coordinates[7][0] = 0.75*x[1][0] + 0.25*x[3][0];
    coordinates[7][1] = 0.75*x[1][1] + 0.25*x[3][1];
    coordinates[7][2] = 0.75*x[1][2] + 0.25*x[3][2];
    coordinates[8][0] = 0.5*x[1][0] + 0.5*x[3][0];
    coordinates[8][1] = 0.5*x[1][1] + 0.5*x[3][1];
    coordinates[8][2] = 0.5*x[1][2] + 0.5*x[3][2];
    coordinates[9][0] = 0.25*x[1][0] + 0.75*x[3][0];
    coordinates[9][1] = 0.25*x[1][1] + 0.75*x[3][1];
    coordinates[9][2] = 0.25*x[1][2] + 0.75*x[3][2];
    coordinates[10][0] = 0.75*x[1][0] + 0.25*x[2][0];
    coordinates[10][1] = 0.75*x[1][1] + 0.25*x[2][1];
    coordinates[10][2] = 0.75*x[1][2] + 0.25*x[2][2];
    coordinates[11][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[11][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[11][2] = 0.5*x[1][2] + 0.5*x[2][2];
    coordinates[12][0] = 0.25*x[1][0] + 0.75*x[2][0];
    coordinates[12][1] = 0.25*x[1][1] + 0.75*x[2][1];
    coordinates[12][2] = 0.25*x[1][2] + 0.75*x[2][2];
    coordinates[13][0] = 0.75*x[0][0] + 0.25*x[3][0];
    coordinates[13][1] = 0.75*x[0][1] + 0.25*x[3][1];
    coordinates[13][2] = 0.75*x[0][2] + 0.25*x[3][2];
    coordinates[14][0] = 0.5*x[0][0] + 0.5*x[3][0];
    coordinates[14][1] = 0.5*x[0][1] + 0.5*x[3][1];
    coordinates[14][2] = 0.5*x[0][2] + 0.5*x[3][2];
    coordinates[15][0] = 0.25*x[0][0] + 0.75*x[3][0];
    coordinates[15][1] = 0.25*x[0][1] + 0.75*x[3][1];
    coordinates[15][2] = 0.25*x[0][2] + 0.75*x[3][2];
    coordinates[16][0] = 0.75*x[0][0] + 0.25*x[2][0];
    coordinates[16][1] = 0.75*x[0][1] + 0.25*x[2][1];
    coordinates[16][2] = 0.75*x[0][2] + 0.25*x[2][2];
    coordinates[17][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[17][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[17][2] = 0.5*x[0][2] + 0.5*x[2][2];
    coordinates[18][0] = 0.25*x[0][0] + 0.75*x[2][0];
    coordinates[18][1] = 0.25*x[0][1] + 0.75*x[2][1];
    coordinates[18][2] = 0.25*x[0][2] + 0.75*x[2][2];
    coordinates[19][0] = 0.75*x[0][0] + 0.25*x[1][0];
    coordinates[19][1] = 0.75*x[0][1] + 0.25*x[1][1];
    coordinates[19][2] = 0.75*x[0][2] + 0.25*x[1][2];
    coordinates[20][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[20][1] = 0.5*x[0][1] + 0.5*x[1][1];
    coordinates[20][2] = 0.5*x[0][2] + 0.5*x[1][2];
    coordinates[21][0] = 0.25*x[0][0] + 0.75*x[1][0];
    coordinates[21][1] = 0.25*x[0][1] + 0.75*x[1][1];
    coordinates[21][2] = 0.25*x[0][2] + 0.75*x[1][2];
    coordinates[22][0] = 0.5*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[22][1] = 0.5*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[22][2] = 0.5*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
    coordinates[23][0] = 0.25*x[1][0] + 0.5*x[2][0] + 0.25*x[3][0];
    coordinates[23][1] = 0.25*x[1][1] + 0.5*x[2][1] + 0.25*x[3][1];
    coordinates[23][2] = 0.25*x[1][2] + 0.5*x[2][2] + 0.25*x[3][2];
    coordinates[24][0] = 0.25*x[1][0] + 0.25*x[2][0] + 0.5*x[3][0];
    coordinates[24][1] = 0.25*x[1][1] + 0.25*x[2][1] + 0.5*x[3][1];
    coordinates[24][2] = 0.25*x[1][2] + 0.25*x[2][2] + 0.5*x[3][2];
    coordinates[25][0] = 0.5*x[0][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[25][1] = 0.5*x[0][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[25][2] = 0.5*x[0][2] + 0.25*x[2][2] + 0.25*x[3][2];
    coordinates[26][0] = 0.25*x[0][0] + 0.5*x[2][0] + 0.25*x[3][0];
    coordinates[26][1] = 0.25*x[0][1] + 0.5*x[2][1] + 0.25*x[3][1];
    coordinates[26][2] = 0.25*x[0][2] + 0.5*x[2][2] + 0.25*x[3][2];
    coordinates[27][0] = 0.25*x[0][0] + 0.25*x[2][0] + 0.5*x[3][0];
    coordinates[27][1] = 0.25*x[0][1] + 0.25*x[2][1] + 0.5*x[3][1];
    coordinates[27][2] = 0.25*x[0][2] + 0.25*x[2][2] + 0.5*x[3][2];
    coordinates[28][0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[3][0];
    coordinates[28][1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[3][1];
    coordinates[28][2] = 0.5*x[0][2] + 0.25*x[1][2] + 0.25*x[3][2];
    coordinates[29][0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[3][0];
    coordinates[29][1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[3][1];
    coordinates[29][2] = 0.25*x[0][2] + 0.5*x[1][2] + 0.25*x[3][2];
    coordinates[30][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[3][0];
    coordinates[30][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[3][1];
    coordinates[30][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.5*x[3][2];
    coordinates[31][0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0];
    coordinates[31][1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1];
    coordinates[31][2] = 0.5*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2];
    coordinates[32][0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[2][0];
    coordinates[32][1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[2][1];
    coordinates[32][2] = 0.25*x[0][2] + 0.5*x[1][2] + 0.25*x[2][2];
    coordinates[33][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[2][0];
    coordinates[33][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[2][1];
    coordinates[33][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.5*x[2][2];
    coordinates[34][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[34][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[34][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new UFC_Poisson3D_4BilinearForm_dof_map_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class UFC_Poisson3D_4BilinearForm_dof_map_1: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  UFC_Poisson3D_4BilinearForm_dof_map_1() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~UFC_Poisson3D_4BilinearForm_dof_map_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for FiniteElement('Lagrange', 'tetrahedron', 4)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      return true;
      break;
    case 1:
      return true;
      break;
    case 2:
      return true;
      break;
    case 3:
      return true;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = m.num_entities[0] + 3*m.num_entities[1] + 3*m.num_entities[2] + m.num_entities[3];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space
  virtual unsigned int local_dimension() const
  {
    return 35;
  }

  // Return the geometric dimension of the coordinates this dof map provides
  virtual unsigned int geometric_dimension() const
  {
    return 3;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 15;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    dofs[3] = c.entity_indices[0][3];
    unsigned int offset = m.num_entities[0];
    dofs[4] = offset + 3*c.entity_indices[1][0];
    dofs[5] = offset + 3*c.entity_indices[1][0] + 1;
    dofs[6] = offset + 3*c.entity_indices[1][0] + 2;
    dofs[7] = offset + 3*c.entity_indices[1][1];
    dofs[8] = offset + 3*c.entity_indices[1][1] + 1;
    dofs[9] = offset + 3*c.entity_indices[1][1] + 2;
    dofs[10] = offset + 3*c.entity_indices[1][2];
    dofs[11] = offset + 3*c.entity_indices[1][2] + 1;
    dofs[12] = offset + 3*c.entity_indices[1][2] + 2;
    dofs[13] = offset + 3*c.entity_indices[1][3];
    dofs[14] = offset + 3*c.entity_indices[1][3] + 1;
    dofs[15] = offset + 3*c.entity_indices[1][3] + 2;
    dofs[16] = offset + 3*c.entity_indices[1][4];
    dofs[17] = offset + 3*c.entity_indices[1][4] + 1;
    dofs[18] = offset + 3*c.entity_indices[1][4] + 2;
    dofs[19] = offset + 3*c.entity_indices[1][5];
    dofs[20] = offset + 3*c.entity_indices[1][5] + 1;
    dofs[21] = offset + 3*c.entity_indices[1][5] + 2;
    offset = offset + 3*m.num_entities[1];
    dofs[22] = offset + 3*c.entity_indices[2][0];
    dofs[23] = offset + 3*c.entity_indices[2][0] + 1;
    dofs[24] = offset + 3*c.entity_indices[2][0] + 2;
    dofs[25] = offset + 3*c.entity_indices[2][1];
    dofs[26] = offset + 3*c.entity_indices[2][1] + 1;
    dofs[27] = offset + 3*c.entity_indices[2][1] + 2;
    dofs[28] = offset + 3*c.entity_indices[2][2];
    dofs[29] = offset + 3*c.entity_indices[2][2] + 1;
    dofs[30] = offset + 3*c.entity_indices[2][2] + 2;
    dofs[31] = offset + 3*c.entity_indices[2][3];
    dofs[32] = offset + 3*c.entity_indices[2][3] + 1;
    dofs[33] = offset + 3*c.entity_indices[2][3] + 2;
    offset = offset + 3*m.num_entities[2];
    dofs[34] = offset + c.entity_indices[3][0];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch (facet)
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 7;
      dofs[7] = 8;
      dofs[8] = 9;
      dofs[9] = 10;
      dofs[10] = 11;
      dofs[11] = 12;
      dofs[12] = 22;
      dofs[13] = 23;
      dofs[14] = 24;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 13;
      dofs[7] = 14;
      dofs[8] = 15;
      dofs[9] = 16;
      dofs[10] = 17;
      dofs[11] = 18;
      dofs[12] = 25;
      dofs[13] = 26;
      dofs[14] = 27;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 7;
      dofs[4] = 8;
      dofs[5] = 9;
      dofs[6] = 13;
      dofs[7] = 14;
      dofs[8] = 15;
      dofs[9] = 19;
      dofs[10] = 20;
      dofs[11] = 21;
      dofs[12] = 28;
      dofs[13] = 29;
      dofs[14] = 30;
      break;
    case 3:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 10;
      dofs[4] = 11;
      dofs[5] = 12;
      dofs[6] = 16;
      dofs[7] = 17;
      dofs[8] = 18;
      dofs[9] = 19;
      dofs[10] = 20;
      dofs[11] = 21;
      dofs[12] = 31;
      dofs[13] = 32;
      dofs[14] = 33;
      break;
    }
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[0][2] = x[0][2];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[1][2] = x[1][2];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[2][2] = x[2][2];
    coordinates[3][0] = x[3][0];
    coordinates[3][1] = x[3][1];
    coordinates[3][2] = x[3][2];
    coordinates[4][0] = 0.75*x[2][0] + 0.25*x[3][0];
    coordinates[4][1] = 0.75*x[2][1] + 0.25*x[3][1];
    coordinates[4][2] = 0.75*x[2][2] + 0.25*x[3][2];
    coordinates[5][0] = 0.5*x[2][0] + 0.5*x[3][0];
    coordinates[5][1] = 0.5*x[2][1] + 0.5*x[3][1];
    coordinates[5][2] = 0.5*x[2][2] + 0.5*x[3][2];
    coordinates[6][0] = 0.25*x[2][0] + 0.75*x[3][0];
    coordinates[6][1] = 0.25*x[2][1] + 0.75*x[3][1];
    coordinates[6][2] = 0.25*x[2][2] + 0.75*x[3][2];
    coordinates[7][0] = 0.75*x[1][0] + 0.25*x[3][0];
    coordinates[7][1] = 0.75*x[1][1] + 0.25*x[3][1];
    coordinates[7][2] = 0.75*x[1][2] + 0.25*x[3][2];
    coordinates[8][0] = 0.5*x[1][0] + 0.5*x[3][0];
    coordinates[8][1] = 0.5*x[1][1] + 0.5*x[3][1];
    coordinates[8][2] = 0.5*x[1][2] + 0.5*x[3][2];
    coordinates[9][0] = 0.25*x[1][0] + 0.75*x[3][0];
    coordinates[9][1] = 0.25*x[1][1] + 0.75*x[3][1];
    coordinates[9][2] = 0.25*x[1][2] + 0.75*x[3][2];
    coordinates[10][0] = 0.75*x[1][0] + 0.25*x[2][0];
    coordinates[10][1] = 0.75*x[1][1] + 0.25*x[2][1];
    coordinates[10][2] = 0.75*x[1][2] + 0.25*x[2][2];
    coordinates[11][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[11][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[11][2] = 0.5*x[1][2] + 0.5*x[2][2];
    coordinates[12][0] = 0.25*x[1][0] + 0.75*x[2][0];
    coordinates[12][1] = 0.25*x[1][1] + 0.75*x[2][1];
    coordinates[12][2] = 0.25*x[1][2] + 0.75*x[2][2];
    coordinates[13][0] = 0.75*x[0][0] + 0.25*x[3][0];
    coordinates[13][1] = 0.75*x[0][1] + 0.25*x[3][1];
    coordinates[13][2] = 0.75*x[0][2] + 0.25*x[3][2];
    coordinates[14][0] = 0.5*x[0][0] + 0.5*x[3][0];
    coordinates[14][1] = 0.5*x[0][1] + 0.5*x[3][1];
    coordinates[14][2] = 0.5*x[0][2] + 0.5*x[3][2];
    coordinates[15][0] = 0.25*x[0][0] + 0.75*x[3][0];
    coordinates[15][1] = 0.25*x[0][1] + 0.75*x[3][1];
    coordinates[15][2] = 0.25*x[0][2] + 0.75*x[3][2];
    coordinates[16][0] = 0.75*x[0][0] + 0.25*x[2][0];
    coordinates[16][1] = 0.75*x[0][1] + 0.25*x[2][1];
    coordinates[16][2] = 0.75*x[0][2] + 0.25*x[2][2];
    coordinates[17][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[17][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[17][2] = 0.5*x[0][2] + 0.5*x[2][2];
    coordinates[18][0] = 0.25*x[0][0] + 0.75*x[2][0];
    coordinates[18][1] = 0.25*x[0][1] + 0.75*x[2][1];
    coordinates[18][2] = 0.25*x[0][2] + 0.75*x[2][2];
    coordinates[19][0] = 0.75*x[0][0] + 0.25*x[1][0];
    coordinates[19][1] = 0.75*x[0][1] + 0.25*x[1][1];
    coordinates[19][2] = 0.75*x[0][2] + 0.25*x[1][2];
    coordinates[20][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[20][1] = 0.5*x[0][1] + 0.5*x[1][1];
    coordinates[20][2] = 0.5*x[0][2] + 0.5*x[1][2];
    coordinates[21][0] = 0.25*x[0][0] + 0.75*x[1][0];
    coordinates[21][1] = 0.25*x[0][1] + 0.75*x[1][1];
    coordinates[21][2] = 0.25*x[0][2] + 0.75*x[1][2];
    coordinates[22][0] = 0.5*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[22][1] = 0.5*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[22][2] = 0.5*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
    coordinates[23][0] = 0.25*x[1][0] + 0.5*x[2][0] + 0.25*x[3][0];
    coordinates[23][1] = 0.25*x[1][1] + 0.5*x[2][1] + 0.25*x[3][1];
    coordinates[23][2] = 0.25*x[1][2] + 0.5*x[2][2] + 0.25*x[3][2];
    coordinates[24][0] = 0.25*x[1][0] + 0.25*x[2][0] + 0.5*x[3][0];
    coordinates[24][1] = 0.25*x[1][1] + 0.25*x[2][1] + 0.5*x[3][1];
    coordinates[24][2] = 0.25*x[1][2] + 0.25*x[2][2] + 0.5*x[3][2];
    coordinates[25][0] = 0.5*x[0][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[25][1] = 0.5*x[0][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[25][2] = 0.5*x[0][2] + 0.25*x[2][2] + 0.25*x[3][2];
    coordinates[26][0] = 0.25*x[0][0] + 0.5*x[2][0] + 0.25*x[3][0];
    coordinates[26][1] = 0.25*x[0][1] + 0.5*x[2][1] + 0.25*x[3][1];
    coordinates[26][2] = 0.25*x[0][2] + 0.5*x[2][2] + 0.25*x[3][2];
    coordinates[27][0] = 0.25*x[0][0] + 0.25*x[2][0] + 0.5*x[3][0];
    coordinates[27][1] = 0.25*x[0][1] + 0.25*x[2][1] + 0.5*x[3][1];
    coordinates[27][2] = 0.25*x[0][2] + 0.25*x[2][2] + 0.5*x[3][2];
    coordinates[28][0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[3][0];
    coordinates[28][1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[3][1];
    coordinates[28][2] = 0.5*x[0][2] + 0.25*x[1][2] + 0.25*x[3][2];
    coordinates[29][0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[3][0];
    coordinates[29][1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[3][1];
    coordinates[29][2] = 0.25*x[0][2] + 0.5*x[1][2] + 0.25*x[3][2];
    coordinates[30][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[3][0];
    coordinates[30][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[3][1];
    coordinates[30][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.5*x[3][2];
    coordinates[31][0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0];
    coordinates[31][1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1];
    coordinates[31][2] = 0.5*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2];
    coordinates[32][0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[2][0];
    coordinates[32][1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[2][1];
    coordinates[32][2] = 0.25*x[0][2] + 0.5*x[1][2] + 0.25*x[2][2];
    coordinates[33][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[2][0];
    coordinates[33][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[2][1];
    coordinates[33][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.5*x[2][2];
    coordinates[34][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[34][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[34][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new UFC_Poisson3D_4BilinearForm_dof_map_1();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class UFC_Poisson3D_4BilinearForm_cell_integral_0_quadrature: public ufc::cell_integral
{
public:

  /// Constructor
  UFC_Poisson3D_4BilinearForm_cell_integral_0_quadrature() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson3D_4BilinearForm_cell_integral_0_quadrature()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
      
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
      
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
      
    // Compute inverse of Jacobian
    const double Jinv_00 = d_00 / detJ;
    const double Jinv_01 = d_10 / detJ;
    const double Jinv_02 = d_20 / detJ;
    const double Jinv_10 = d_01 / detJ;
    const double Jinv_11 = d_11 / detJ;
    const double Jinv_12 = d_21 / detJ;
    const double Jinv_20 = d_02 / detJ;
    const double Jinv_21 = d_12 / detJ;
    const double Jinv_22 = d_22 / detJ;
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    
    // Array of quadrature weights
    const static double W64[64] = {0.0026134590075074, 0.00338108957856492, 0.00161758872343451, 0.000243985421620605, 0.00392412678076307, 0.00507672939399183, 0.00242882065938497, 0.000366345798555432, 0.00250430944300902, 0.0032398803788146, 0.00155003109035391, 0.000233795515279108, 0.000601372928720174, 0.000778009425931694, 0.000372217075256263, 5.6142540266951e-05, 0.00489961445988875, 0.00633873932658916, 0.00303259438036939, 0.00045741467393993, 0.00735680500908296, 0.00951766095289489, 0.00455346144286727, 0.000686811297504771, 0.00469498496963441, 0.00607400564032183, 0.00290593987575818, 0.000438311021534327, 0.00112743130421366, 0.00145858275269461, 0.000697818545806259, 0.000105253918778391, 0.00489961445988875, 0.00633873932658916, 0.00303259438036939, 0.00045741467393993, 0.00735680500908296, 0.00951766095289489, 0.00455346144286727, 0.000686811297504771, 0.00469498496963441, 0.00607400564032183, 0.00290593987575818, 0.000438311021534327, 0.00112743130421366, 0.00145858275269461, 0.000697818545806259, 0.000105253918778391, 0.0026134590075074, 0.00338108957856492, 0.00161758872343451, 0.000243985421620605, 0.00392412678076307, 0.00507672939399183, 0.00242882065938497, 0.000366345798555432, 0.00250430944300902, 0.0032398803788146, 0.00155003109035391, 0.000233795515279108, 0.000601372928720174, 0.000778009425931694, 0.000372217075256263, 5.6142540266951e-05};
    
    
    const static double FE0_D010[64][30] = \
    {{-2.61665455821179, -0.33795623510388, 0.108340828633999, 0.088396943183514, 0.188263646324616, 0.218367276513483, 0.105762301137926, 0.139147830671436, -1.99429993054149, 0.887996330144001, -0.188263646324617, 4.74252247825223, -3.45069951901511, 1.66278783407854, -2.561384406432, 1.06244098376896, -0.218367276513485, -0.0725889973161084, -0.0546542982292133, -0.0779222420962002, 2.55246902761865, -0.666509925711162, -0.976393273327514, -0.549032743738472, 0.0725889973161055, 0.077922242096202, 3.27827036701942, -1.16820328490688, -0.856033791258859, 0.603687041967688},
    {-0.0971243045950512, -0.449540396859089, 0.666327544990172, 0.0283809878733448, 0.0303348329193273, 0.191622862578409, 0.104106290443431, 0.139203719782342, -4.70183916807173, 0.189067653393769, -0.0303348329193302, 1.14613455744865, -2.29026183547777, 1.69079197948326, -0.98226991655213, 0.693532308512668, -0.19162286257841, -0.304705118454549, -0.248207903789393, -0.017353750923088, 7.08790903930817, -3.05239741622662, -0.217448641267109, -1.65350431537734, 0.304705118454548, 0.0173537509230893, 1.48074818633697, -0.797638598956098, -0.637681989567178, 1.90171221916673},
    {0.157576792955305, -0.631126388910168, 1.89531730714558, -1.72179988344472, 0.10042981162099, 0.13798577775709, 0.086101186385431, 0.115898726667425, -0.619333549054624, -5.28014630426966, -0.100429811620989, -0.272558266045289, -0.683595557110843, 1.429703419111, -0.0378722704885494, 0.264041637740582, -0.137985777757091, -0.456967333617834, -0.407710121462221, 0.558798755468931, 3.7824315822126, -5.05841534030356, 7.00194618771438, -1.25030156625703, 0.456967333617834, -0.558798755468931, 0.231295837605842, -0.350142824126012, -0.309322293784718, 1.65801168771925},
    {-0.332272064837322, -0.83547554586799, 3.66460410302372, -6.30243350482935, 5.48363837580173, 0.0656658884112425, 0.0458827667356881, 0.0615408996728284, 1.61056772993438, -3.00968549284731, -5.48363837580172, 0.197399746922219, 0.203432307017003, 0.766915556766089, 0.0270467925859691, 0.0219110122003377, -0.0656658884112419, -0.322173434508332, -0.308626061699938, 0.743164881188399, -1.42182233628486, -3.85334949667324, 9.31211899767666, -0.14738233729894, 0.322173434508328, -0.743164881188405, -0.0238771292314167, -0.0677937789360268, -0.0647105630273795, 0.456008398998884},
    {0.0875743252958643, 0.312668579906081, -0.128217417910575, -0.173147693978933, 0.188263646324617, 0.186413882500133, -0.171171345641126, -0.126299082891034, -0.816407479188928, 0.644611219481138, -0.188263646324618, -2.93793538864611, 4.19475734029277, -1.65706485684861, -0.80419273424191, 0.637253476025952, -0.186413882500133, -0.059977934564405, 0.0821055794160347, -0.0597627155966154, -0.133865220053964, 1.07849011715347, -0.471463525502205, -0.305670704918615, 0.0599779345644056, 0.0597627155966148, -0.131862384996814, -0.466082130384824, 1.06235420212976, 0.22356512550258},
    {0.347307955877069, 0.35844227012522, -0.58930969525155, -0.0298665723416659, 0.0303348329193263, 0.159508103766069, -0.0889006886871397, -0.0944225104881781, -1.46628619271142, 0.134864328704811, -0.0303348329193275, -1.22434772362475, 1.8860986154724, -1.36750111784994, -0.234936612320397, 0.40143648102734, -0.15950810376607, -0.247257815454359, 0.200328327521334, -0.0133095153970367, -0.881760153558983, 2.93735604152195, -0.104997756363145, -0.904594779161603, 0.247257815454359, 0.0133095153970373, -0.141280566090028, -0.3125357923402, 0.470639688898603, 0.704266451640268},
    {-0.161328789785951, 0.204881260678232, -0.483666898076634, 0.153798325928091, 0.100429811620989, 0.111120368180022, -0.0060975940287461, -0.0226836002358245, 1.00650376582928, -3.5347743375574, -0.100429811620988, 0.0782665809275568, 0.425215577845658, -0.547034629665496, 0.0472042414949512, 0.140142090387454, -0.111120368180022, -0.362297712445734, 0.0279311817241977, 0.428572512808379, -1.92627056670234, 1.40343369894969, 3.38097601162931, -0.641947327973585, 0.362297712445733, -0.428572512808379, -0.0903405869925543, -0.134044496358707, 0.065819945733427, 0.614016146249388},
    {-0.219620965508788, -0.316700773842387, 1.69125897299839, -3.80801363222959, 5.48363837580173, 0.051352140662335, 0.0215420851703856, 0.0217829038460447, 0.830265560700904, -0.688457792218692, -5.48363837580172, 0.298335211957058, 0.15295184030249, 0.085034687091627, 0.0106935692074168, 0.00389463322050117, -0.0513521406623341, -0.250344264117826, -0.143018329933187, 0.569972709217252, -1.71865201592867, -0.802872517770625, 4.49647142444828, -0.0258565470562526, 0.250344264117822, -0.569972709217257, -0.0221357179506357, -0.0254367183908887, -0.0103407551028241, 0.168874876989444},
    {-0.0209772079821636, -0.350933368613928, 0.449254419664606, -0.538254520513323, 0.188263646324616, 0.123390082929375, -0.337105568676911, 0.254820076580357, 0.0418596436277104, 0.30485443324413, -0.188263646324616, 0.234075036228744, -2.87754163478653, 3.01537717515388, 0.0237430665741764, 0.190928497886899, -0.123390082929377, -0.0379975323947951, 0.146971036680842, -0.0344126752992386, -1.40851160820063, 0.91739754490831, 0.233400087269193, -0.083240865395631, 0.037997532394795, 0.034412675299238, -0.798917094981411, 0.146177070790016, 0.520353951826876, -0.0637301712852087},
    {-0.24472000199512, -0.216923199943661, 0.517264163089155, -0.111178053602372, 0.0303348329193268, 0.102354027564883, -0.205149871732308, 0.0477235191445431, 0.574312506192719, 0.0591984535429081, -0.0303348329193261, 0.953331178547799, -1.33636979589499, 0.844681819285973, 0.0529868795095999, 0.109235184081513, -0.102354027564883, -0.153278933199057, 0.429402097731101, -0.00766390929822896, -4.20928411112943, 3.11770744184756, 0.0519796000594608, -0.228641708593655, 0.153278933199057, 0.00766390929822878, -0.388354471847849, 0.0959146876507952, 0.287644073193705, -0.200760389137447},
    {-0.343330389268094, 0.27602204541492, -1.31167064875703, 2.77206539309933, 0.100429811620988, 0.0683473488315224, -0.0661681199411174, -0.0354224448750857, 1.11730697889861, -1.09829838147577, -0.100429811620988, 0.766075457975782, -0.307559904120655, -0.391207210001954, 0.0301735385373524, 0.0262159540743639, -0.0683473488315221, -0.218124283638552, 0.289887364894585, 0.246781401718768, -3.09684445049346, 3.29120812035187, -1.67376701162355, -0.114854009023945, 0.218124283638551, -0.246781401718767, -0.0836321236114205, 0.0399521658667528, 0.088881029949154, -0.17503335587064},
    {0.119021627700702, 0.138208304688548, -0.37780899979302, -0.325893969559756, 5.48363837580173, 0.030373220336384, 0.00108083458798293, -0.00280198672226965, -0.852751660911764, 2.55189188053654, -5.48363837580173, 0.115115490962856, -0.0814424325893756, -0.290902990762731, -0.00632435657324522, -0.00846340609805425, -0.0303732203363826, -0.146767978003646, -0.00704786611526933, 0.328202719302644, -0.263183207368188, 1.49374386807297, -2.22599791097679, 0.0551878647492835, 0.14676797800364, -0.328202719302646, -0.00195187476469363, 0.00738257151006749, 0.0110782180602114, -0.0481399986340103},
    {-0.160775122870769, 2.24400210538221, 1.87719259162015, -0.8675374714403, 0.188263646324615, 0.0465489992587221, -0.197339547588013, 0.357364893237739, 0.0303812937688873, -0.00156579513538739, -0.188263646324614, 0.76353828322988, -1.31234021251955, -1.53442505322177, 0.00578374741761435, -0.000356172861467244, -0.0465489992587219, -0.0138007611324088, 0.0795049346306658, -0.0115499527517768, -0.0842704290369387, -1.8233034563521, 0.869103266575686, 0.000143496326073686, 0.0138007611324033, 0.0115499527517774, -0.016042729451594, 0.197695720449478, -0.347105911203755, -0.0796484309567304},
    {-0.0231092835261107, 0.00319288667625742, 4.37286031043355, -0.184511342787659, 0.0303348329193283, 0.0376754447559802, -0.121601693121929, 0.135408973378277, -0.0598673982106514, -0.00904317013277358, -0.0303348329193267, 0.0914307809021445, -0.132249321813458, 0.0607349377611658, -0.00185383990226982, -0.00595987641041755, -0.0376754447559802, -0.0547452997884526, 0.239182794430877, -0.00257224378862858, 0.582621768788846, -4.89561468101174, 0.193554512920432, 0.0117226977495844, 0.0547452997884514, 0.00257224378862717, 0.0180413299256997, 0.127561569532345, -0.151596463401705, -0.250905492180456},
    {0.257570292859131, -0.132026023671421, 0.43297114205714, 5.13343100868266, 0.100429811620987, 0.0242960786153936, -0.0427421685926994, 0.00392441073250102, -0.940209564617415, 1.09911326458012, -0.100429811620988, -0.536154837699099, 0.110054087772665, 0.300556480738724, -0.00852197328592319, -0.00915147868505456, -0.0242960786153924, -0.0760864843203684, 0.18017532577528, 0.0828274321913209, 2.64172503778601, -2.13448661522574, -6.23254427326278, 0.0385771407416829, 0.0760864843203666, -0.0828274321913185, 0.0239443535228527, 0.0518936472777506, -0.0193467909694281, -0.218752466516958},
    {0.643627477463276, 0.32642562697874, -1.55864364979357, 2.81456398596073, 5.48363837580173, 0.0104401582457752, -0.00318329697115951, -0.00387973782841995, -2.96400307709653, 5.47430204856335, -5.48363837580173, -0.53420819362127, -0.20305063914919, -0.232794271671556, -0.00737792430187683, -0.00619148444210044, -0.0104401582457731, -0.050051192682083, 0.020429334452816, 0.110154931808954, 2.91813195089406, 1.60451477599604, -8.28886603452408, 0.0397348747456746, 0.0500511926820755, -0.110154931808952, 0.00726374301125003, 0.00937478141325387, 0.00399391911905104, -0.0601642091984851},
    {0.26052963780404, -0.337956235103879, 0.108340828633998, 0.088396943183513, 0.188263646324618, -0.118688289051527, -0.123384593447936, 0.661369484286698, -0.635906402027001, 0.595554242297346, -0.188263646324618, 0.197864561630014, -1.26100414479345, 1.14056618046327, -3.88190762860052, -0.831275555643357, 0.118688289051528, 0.0846838980078712, -0.259771818644161, -0.370364329942862, 0.988957978689207, -0.461392405296203, -0.683951185480859, -1.75015337692899, -0.0846838980078728, 0.370364329942862, 6.03712041520847, 0.95466014909129, -2.81658227089464, 2.00992519557315},
    {0.302516099307213, -0.44954039685909, 0.666327544990172, 0.0283809878733441, 0.0303348329193276, 0.0347833019774879, 0.0323350839678328, 0.661635125168621, -0.993419927901682, 0.123939045497016, -0.0303348329193278, -0.271101447298219, -0.750234829246889, 1.16836057409698, -0.986424054181831, 0.141206481639181, -0.0347833019774881, -0.0946404443832324, -1.17973189041439, -0.082482358819839, 2.44796581251313, -2.12087342960162, -0.152320033370359, -5.15185888147606, 0.094640444383234, 0.082482358819838, 2.43072671833567, -0.173541565607014, -2.10593778932247, 6.33159077189046},
    {-0.21843793762351, -0.631126388910168, 1.89531730714558, -1.72179988344472, 0.10042981162099, 0.22361384982296, 0.186874892225893, 0.550866518835753, 1.17789027189967, -3.18297519703051, -0.100429811620988, -0.0769603600663631, -0.0682109403426277, 0.994735626942669, 0.342349173516006, 0.345462996380711, -0.22361384982296, -0.99180655697717, -1.93784575346093, 2.65596986270808, 0.455072129259603, -3.52827970830485, 4.90477508047523, -3.58236461057065, 0.991806556977171, -2.65596986270809, 0.132264924041636, -0.532337888606603, -1.0254806163934, 5.52021036403159},
    {-0.18467858359371, -0.83547554586799, 3.66460410302373, -6.30243350482935, 5.48363837580173, 0.220601860279334, 0.171854823099438, 0.292503827639718, 0.62999402201908, -0.220588521013091, -5.48363837580172, 0.256334411241436, 0.227867089421061, 0.535952628799202, 0.0502852852996229, 0.00601501011116348, -0.220601860279334, -1.20670706092576, -1.46689932770778, 3.53226185302261, -1.5995218943774, -2.6950762306654, 6.52302202584244, -0.0513422558010656, 1.20670706092576, -3.53226185302262, -0.127671711144151, -0.177869833210603, -0.215117401795189, 1.51824158350885},
    {0.259550726522874, 0.31266857990608, -0.128217417910573, -0.173147693978934, 0.188263646324617, 0.0606216909073096, -0.0922339306404492, -0.600299400389244, -0.147079344555395, 0.420321814372864, -0.188263646324617, -0.960647123653588, 1.57149235657503, -1.1830645393504, -0.688608800465997, 0.223900949430205, -0.0606216909073094, -0.0323184972102094, 0.390247727567257, -0.28405212070489, -0.495051206536268, 0.770347969002236, -0.247174120393931, -0.947339402197952, 0.0323184972102091, 0.284052120704889, -2.31777356999158, -0.131667018789756, 3.60668177084682, 0.557091674630696},
    {-0.0203093940389605, 0.35844227012522, -0.58930969525155, -0.0298665723416656, 0.030334832919327, 0.16852491355416, -0.136265226174211, -0.448790087242389, 0.204474492569863, 0.0849137322354263, -0.0303348329193267, -0.0647115558027044, 0.739712220812173, -1.01313354109573, 0.155717997003428, 0.387416031407633, -0.16852491355416, -0.378991913828712, 0.952160317710242, -0.0632601118664201, -1.80068884865135, 2.18552405133304, -0.0550471598937618, -2.70708956281723, 0.378991913828713, 0.0632601118664194, -1.37131853080694, -0.251150805233423, 1.6643906210459, 1.75492924510699},
    {-0.350400156294149, 0.204881260678232, -0.483666898076633, 0.153798325928091, 0.10042981162099, 0.254937392993912, -0.0172984082228332, -0.107815126670264, 1.3618387575883, -1.92634217405987, -0.100429811620988, 0.39466089105994, 0.212761107787032, -0.461903103231055, 0.303570119720276, 0.216664603484216, -0.254937392993913, -1.02781091993654, 0.132756875643075, 2.0370046763059, -2.17677986454248, 1.29860800503081, 1.77254384813178, -1.6627955272234, 1.02781091993654, -2.03700467630591, -0.485230223036151, -0.199366195261383, 0.289475229986138, 1.53003865158033},
    {-0.0223844325018231, -0.316700773842387, 1.69125897299839, -3.80801363222959, 5.48363837580173, 0.188817160483828, 0.0859604165777802, 0.103534117732255, -0.203161865393722, 1.45064915099943, -5.48363837580172, 0.241317562368115, 0.0944841707706764, 0.00328347320541849, -0.0124369980152058, -0.0327463127423483, -0.188817160483827, -0.998960734822754, -0.6797659629693, 2.70907965243537, -1.22197222287016, -0.266124884734514, 2.35736448123017, 0.258954408333451, 0.998960734822751, -2.70907965243537, -0.0748057027386408, -0.0532141038354342, -0.0162914169784062, 0.420811554635851},
    {-0.309054780062581, -0.350933368613928, 0.449254419664607, -0.538254520513324, 0.188263646324616, 0.245642220944689, -0.858748318754998, 1.21115954032942, 0.12785113730247, 0.175703701153112, -0.188263646324616, 1.42270897612223, -2.82175853885054, 2.05903771140482, 0.344678021868894, 0.280323252687911, -0.24564222094469, -0.0967955444608538, 0.698553173740877, -0.163563407390255, -0.942920964815347, 0.36581540784827, 0.362550819360211, -0.22803037113645, 0.0967955444608542, 0.163563407390254, -2.54205116816728, 0.578425066067088, 0.986213605968971, -0.470522802604426},
    {-0.358579623296544, -0.216923199943661, 0.517264163089155, -0.111178053602371, 0.0303348329193273, 0.256580410431232, -0.621730944952845, 0.22682983336982, 0.593144251553415, 0.0304358104778498, -0.0303348329193264, 1.20255159330441, -1.29262427512491, 0.665575505060697, 0.260104645449674, 0.170203422309211, -0.256580410431232, -0.46452993206627, 2.04094769252014, -0.0364265523632901, -2.61657026170109, 1.50616184705852, 0.0807422431245195, -0.558724452821565, 0.46452993206627, 0.0364265523632891, -1.14741410446365, 0.451527522643634, 0.660479625644155, -1.48222323969857},
    {-0.209120412751909, 0.27602204541492, -1.31167064875703, 2.77206539309933, 0.100429811620988, 0.225482960005566, -0.244673893188877, -0.168362841060223, 0.499560744523662, -0.172128055533885, -0.100429811620988, 0.514343504016228, -0.322978322862424, -0.258266813816816, 0.0641223971199371, 0.0151927301496379, -0.225482960005566, -0.806571468622247, 1.37783432265122, 1.17295172766066, -1.39115125836188, 2.20326116259524, -2.59993733756544, -0.0855549596326935, 0.806571468622247, -1.17295172766066, -0.178564777998395, 0.229481163039238, 0.282805221938681, -1.29227936301852},
    {0.31247810905761, 0.138208304688548, -0.377808999793019, -0.325893969559756, 5.48363837580173, 0.125378211827879, 0.00467101063594979, -0.0133178397718862, -1.67399695237152, 3.78363632073527, -5.48363837580173, -0.0427577374324051, -0.12754153860064, -0.280387137713114, -0.059008713933574, -0.0542305386031385, -0.125378211827878, -0.634282797655853, -0.0334984998004361, 1.55994715950137, 0.531611450406402, 1.52019450175814, -3.45774235117551, 0.388918336556834, 0.634282797655848, -1.55994715950137, 0.018739405681955, 0.0495595279671848, 0.0535871480235082, -0.355419836756395},
    {0.0441090754128547, 2.24400210538221, 1.87719259162015, -0.8675374714403, 0.188263646324616, 0.17603121444546, -0.802961015003401, 1.69855493975254, -0.0313921455951164, -0.0449127549558028, -0.188263646324615, -0.278452704337046, 0.865956623278549, -2.87561509973656, -0.028404802047506, -0.0415696064932347, -0.176031214445459, -0.0561543456551945, 0.377886865797336, -0.0548969125721905, 0.275884941493737, -2.12168538751877, 0.912450226396102, 0.0195633511672909, 0.0561543456551898, 0.0548969125721907, 0.249631141881443, 0.844530621496632, -1.91978127958647, -0.397450216964619},
    {0.182854617686688, 0.00319288667625733, 4.37286031043355, -0.184511342787659, 0.0303348329193284, 0.149676919217672, -0.511914330467097, 0.643598699734292, -0.339061320545859, -0.0186967982081548, -0.0303348329193269, -0.697714152851517, 0.959121437083419, -0.447454788594848, -0.0499031319415453, -0.0518730111222496, -0.149676919217672, -0.230464747389051, 1.13683555567982, -0.0122258718640125, 1.759468452373, -5.79326744226069, 0.203208140995814, 0.115197172484192, 0.23046474738905, 0.0122258718640106, 0.258959017160671, 0.563787341589345, -0.852654584953415, -1.25203272816401},
    {0.43095300139955, -0.132026023671421, 0.43297114205714, 5.13343100868266, 0.100429811620987, 0.103393084530577, -0.18858792693479, 0.0186527198430643, -1.39647055428432, 1.40996452539349, -0.100429811620988, -0.942394586057498, 0.357639436701208, 0.285828171628161, -0.0601609933964594, -0.0517981611997534, -0.103393084530576, -0.335710442829217, 0.856373122844864, 0.393678693004692, 3.7741838245225, -2.81068441229532, -6.54339553407615, 0.235214171899736, 0.335710442829216, -0.39367869300469, 0.162594655109279, 0.24038608813454, -0.121086381555882, -1.09158729474459},
    {0.736873916833949, 0.32642562697874, -1.55864364979357, 2.81456398596073, 5.48363837580173, 0.0474159810998262, -0.0146766561828604, -0.0184403895797042, -3.30810129762872, 5.88771338502163, -5.48363837580173, -0.639426571502025, -0.205639352390393, -0.218233619920271, -0.0391383089428375, -0.0307017163177618, -0.0474159810998242, -0.230762053680045, 0.0971006039129721, 0.523566268267231, 3.3389014408864, 1.52784350653588, -8.70227737098236, 0.203122234279899, 0.230762053680038, -0.523566268267229, 0.0395027069505911, 0.0453783725006161, 0.018075991571955, -0.300222838192866},
    {-0.242112183715197, -0.337956235103878, 0.108340828633997, 0.0883969431835149, 0.188263646324617, 0.910263235975048, -1.90887936855836, 1.34272290687398, 0.116156852148901, 0.21399898490144, -0.188263646324617, 0.011440904841155, 0.109414756101922, 0.459212757875998, 1.43959085542531, -4.62118069312338, -0.910263235975046, 1.31014206262739, -0.527392901760539, -0.751919587338766, -0.0307263586030755, -0.193771322179823, -0.302395928084955, -1.27675846648537, -1.31014206262739, 0.751919587338766, -0.380807365619687, 6.53006006168173, -2.40150639667959, 1.80415136824591},
    {-0.347940059792458, -0.44954039685909, 0.666327544990172, 0.028380987873343, 0.0303348329193264, -0.0900751953174307, -1.15940513698844, 1.34326221524189, 0.631043869767727, 0.0389643999770729, -0.0303348329193263, 0.14977546528228, 0.160971507345549, 0.486733484023719, 1.27213319153948, -1.59175310227737, 0.0900751953174298, 3.39342299200284, -2.39511055599667, -0.167457004339781, -0.391876650738552, -0.905494764019348, -0.0673453878504166, -3.2882592427594, -3.39342299200284, 0.16745700433978, -0.789991501822736, 2.75115823926581, -1.82540390495863, 5.68336979875607},
    {-0.264871803916117, -0.631126388910169, 1.89531730714558, -1.72179988344472, 0.100429811620989, -0.13978748546704, -0.20961567290832, 1.1183780187083, 0.720643717372981, -0.446752557129665, -0.100429811620988, 0.262052042480397, 0.206722023275766, 0.427224127070123, 0.425233331533269, -0.0543886306339459, 0.139787485467039, 1.11249936446437, -3.93424544824102, 5.39219250260892, -1.08408101099378, -1.53188001352478, 2.16855244057438, -1.02081213460242, -1.11249936446437, -5.39219250260892, -0.639688335363994, 0.264004303542267, -0.903923014877578, 4.95505758284344},
    {0.251073694749742, -0.835475545867991, 3.66460410302373, -6.30243350482935, 5.48363837580173, 0.247106172443949, 0.226456203454842, 0.593845950034656, -1.4200575783802, 3.41840414528315, -5.48363837580172, 0.199800662202129, 0.149990682511853, 0.234610506404267, -0.230119111922973, -0.122828558845078, -0.247106172443949, -1.59009968280774, -2.97812248098439, 7.17125451931885, -1.06069344725473, -1.1838530773888, 2.8840293595462, 1.61531672271624, 1.59009968280774, -7.17125451931885, -0.171884462870295, -0.103627644609765, -0.191842375241387, 1.36280575826815},
    {-0.354977542438394, 0.312668579906081, -0.128217417910573, -0.173147693978934, 0.188263646324617, -0.161830420667416, 1.7234861196673, -1.21873744561208, 0.126071847127061, 0.127686775663471, -0.188263646324617, 0.745342564296062, -0.138407107636186, -0.564626494127562, 1.19834327843348, -1.27097497208273, 0.161830420667416, 0.60390445212007, 0.792287179268951, -0.576687159414285, -0.366162946517031, 0.368308517300541, 0.0454609183154626, -0.584267644550131, -0.603904452120071, 0.576687159414284, -3.48046701757169, -0.452511147584567, 3.5008611847503, -0.208019534718818},
    {-0.336177667614904, 0.35844227012522, -0.58930969525155, -0.0298665723416662, 0.030334832919327, -0.245351328163604, 0.481668275062813, -0.911140814378886, 0.493827561454053, 0.0197421530236535, -0.0303348329193269, 0.604789100668449, -0.0762708892195326, -0.550782813959232, 0.763514413781913, -0.318388353512671, 0.245351328163603, 1.33965492533839, 1.93309110864833, -0.128431691078194, -1.10911112659746, 1.20459326039496, 0.0101244193180115, -1.27779579253432, -1.33965492533839, 0.128431691078194, -1.71481382924361, -0.163279921550142, 1.86244022984058, -0.655295316114006},
    {-0.118117019922264, 0.204881260678232, -0.483666898076633, 0.15379832592809, 0.10042981162099, 0.0425061088440194, -0.00417162582753447, -0.21888799487599, 0.177195303849183, 0.172212629272513, -0.100429811620989, 0.300757922986169, -0.0366919287168073, -0.350830235025329, 0.0801913980783608, -0.00467109539564537, -0.0425061088440196, -0.247863417500436, 0.269525132631767, 4.13555947963829, -0.855368153814664, 1.16183974804211, -0.326010955200604, 0.301795428951819, 0.247863417500435, -4.13555947963829, -0.387104887297051, 0.00884272122317986, 0.52580148409468, -0.571320561583586},
    {0.394442721463882, -0.316700773842388, 1.6912589729984, -3.80801363222959, 5.48363837580173, 0.255745030827461, 0.13099977200835, 0.21019662204708, -2.00482142866546, 4.2415863458704, -5.48363837580173, 0.0464454714237937, -0.0208083879358828, -0.103379031109405, -0.249167453855973, -0.145915140523653, -0.255745030827461, -1.52237080410914, -1.3800717321824, 5.50001684730634, -0.120618428811513, 0.434180884478579, -0.433572713640804, 1.53720390231881, 1.52237080410914, -5.50001684730634, -0.0149909544886871, 0.0149153685153008, 0.0539617862975819, -0.157132170136418},
    {-0.192468191903714, -0.350933368613928, 0.449254419664607, -0.538254520513324, 0.188263646324616, -0.0410670910943309, 0.226023772945924, 2.45891547359977, 0.0410587679977575, 0.00719806234883332, -0.188263646324616, 0.71572675216265, -0.983606969779473, 0.811281778134466, 0.224727983827075, -0.00302260946815946, 0.0410670910943314, 0.0254767243039475, 1.41821382802837, -0.332069046194531, -0.136467941223137, -0.353845246439227, 0.53105645816449, -0.0189657330669362, -0.0254767243039477, 0.33206904619453, -0.746933402623823, -0.223001163477765, -1.93671005480302, -1.39924809496143},
    {-0.0579729019650721, -0.216923199943661, 0.517264163089156, -0.111178053602371, 0.0303348329193276, 0.0979411138874706, -0.326281844202937, 0.460513556286238, -0.00912774663570557, -0.00709140647947603, -0.030334832919327, 0.239581839576238, -0.396577519811783, 0.431891782144279, -0.00812631410416138, -0.0208116360121869, -0.0979411138874707, -0.243783398835879, 4.14356465423254, -0.0739537693206201, 0.08831869820044, -0.59645511465389, 0.118269460081847, 0.264294078597945, 0.243783398835878, 0.0739537693206186, 0.0786289882368008, 0.347093480215124, -0.531016230418877, -4.40785873283048},
    {0.225565484443058, 0.27602204541492, -1.31167064875703, 2.77206539309932, 0.100429811620989, 0.242028983444845, -0.311788872704875, -0.341812933207462, -0.852939205087354, 1.03626557791776, -0.100429811620989, -0.239460959740109, -0.177309848448292, -0.084816721669576, -0.222270469965022, -0.116554276521091, -0.242028983444844, -1.02781709025048, 2.79730128295274, 2.3813453611123, 1.38081565155066, 0.783794202293716, -3.80833097101709, 1.04569936835009, 1.02781709025048, -2.3813453611123, 0.359831676131938, 0.428343149225965, 0.204251727040548, -3.84300065130283},
    {0.625377600303053, 0.138208304688548, -0.377808999793019, -0.325893969559757, 5.48363837580173, 0.207840031305073, 0.0082482730463766, -0.0270380913493125, -2.89580215412672, 5.3907188388044, -5.48363837580173, -0.308124105784635, -0.18879491307128, -0.266666886135686, -0.207239539597304, -0.136437384707657, -0.207840031305072, -1.12004405715045, -0.0680091901676879, 3.1670296775705, 1.71890596179435, 1.55470519212539, -5.06482486924464, 1.12496227881744, 1.12004405715045, -3.1670296775705, 0.1230143708629, 0.128189111661276, 0.111263260083721, -1.05695308864975},
    {0.445188683796847, 2.24400210538221, 1.87719259162015, -0.867537471440299, 0.188263646324616, 0.251335865827114, -1.27260439352379, 3.44843341033408, -0.134404752307825, -0.101468432469229, -0.188263646324615, -2.09224641355793, 4.02854919469698, -4.6254935703181, -0.246903722311181, -0.1488456432319, -0.251335865827112, -0.0889984266495804, 0.767191959967924, -0.111452590085614, 0.768202642377035, -2.51099048168936, 0.969005903909528, 0.0897318768856132, 0.0889984266495761, 0.111452590085614, 1.41120078446162, 1.42145003675569, -4.61273047248451, -0.85692383685353},
    {0.542293065584038, 0.00319288667625714, 4.37286031043355, -0.184511342787659, 0.0303348329193284, 0.233047796265582, -0.864316933211787, 1.30664437579785, -0.773943947209463, -0.031292086978757, -0.0303348329193271, -1.9748873798075, 2.5399018922056, -1.1105004646584, -0.231260418584873, -0.146583295328363, -0.233047796265582, -0.389117029591608, 2.30802173100928, -0.0248211606346179, 3.36553725436606, -6.96445361759015, 0.215803429766417, 0.391427516945237, 0.389117029591607, 0.0248211606346155, 1.00564848011794, 1.01090022854015, -2.08103243733091, -2.69944924795451},
    {0.696647594003246, -0.132026023671421, 0.432971142057141, 5.13343100868266, 0.100429811620987, 0.179690567637898, -0.344292044235394, 0.0378690502114693, -2.0533274054127, 1.81553861257372, -0.100429811620988, -1.54648645658891, 0.715253044997326, 0.266611841259757, -0.179590626402307, -0.121765637690281, -0.179690567637897, -0.612883531366293, 1.73862241333248, 0.799252780184921, 5.3132899661385, -3.69293370278294, -6.94896962125638, 0.614897934491043, 0.612883531366292, -0.799252780184918, 0.464717448742236, 0.466057681925672, -0.322995872551397, -2.35352034782352},
    {0.866122121955717, 0.32642562697874, -1.55864364979357, 2.81456398596073, 5.48363837580173, 0.0905566439693883, -0.0285953874203332, -0.0374379739141676, -3.77398544236569, 6.42709973003854, -5.48363837580173, -0.785371706004913, -0.207940007343736, -0.199236035585807, -0.090649564807493, -0.0652980027053123, -0.0905566439693865, -0.449607202395336, 0.19713519937476, 1.06295261328415, 3.90482018108516, 1.42780891107409, -9.24166371599927, 0.450161230301578, 0.449607202395329, -1.06295261328414, 0.0937921609588946, 0.0938933901256395, 0.0342953777627705, -0.647296429676333},
    {0.262326815091422, -0.337956235103879, 0.108340828633995, 0.0883969431835135, 0.188263646324616, 6.97671389735957, -4.41670862487792, 1.86494456048924, -0.0894026163922199, -0.0784431029452187, -0.188263646324617, 0.118210547161841, 0.0204277685898805, -0.0630088957392653, -1.53894819927433, 3.91937002415417, -6.97671389735957, 3.03136795500697, -0.732510422175488, -1.04436167518542, -0.0302844104769124, 0.0113461982351316, -0.00995384023829596, 0.650026894435339, -3.03136795500698, 1.04436167518542, -0.521306208366914, 0.497338600723744, 0.195309847152013, 0.0824835277401645},
    {0.382897749059931, -0.44954039685909, 0.666327544990171, 0.0283809878733444, 0.0303348329193246, 2.00292864633947, -2.914446648366, 1.86569362062817, -0.587242812072385, -0.0261642079196764, -0.0303348329193267, 0.0846123604872476, 0.0177282086744737, -0.0356979213625609, -1.64425915824829, 2.6868052803149, -2.00292864633947, 8.5301935880843, -3.32663454262167, -0.232585612236529, -0.105113955523445, 0.0260292226056549, -0.00221677995366871, 3.06679803516218, -8.53019358808431, 0.232585612236531, -0.294315367469889, 0.227641368051105, 0.0728809050900128, 0.259836507459503},
    {0.582912531849486, -0.631126388910169, 1.89531730714558, -1.72179988344472, 0.100429811620987, -0.239523825164354, -0.918167814148706, 1.55334581087663, -1.77749109602364, 1.65041855010949, -0.100429811620989, 0.0431767291957517, 0.0127807929631378, -0.00774366509820509, -1.45677894538782, 0.880102970824231, 0.239523825164353, 4.87301877545594, -5.46438108023973, 7.48936360984808, -0.116081829595875, -0.0017443815260706, 0.0713813333352278, 5.23784208978577, -4.87301877545594, -7.48936360984808, -0.0951372221642433, 0.0380648433244799, -0.00142964332456256, 0.22653899045396},
    {0.812452135616642, -0.835475545867992, 3.66460410302373, -6.30243350482935, 5.48363837580173, 0.173807930028897, 0.184182334239254, 0.824808878001546, -3.58199787646155, 6.20750111711737, -5.48363837580172, 0.0131962924773952, 0.00617953933657565, 0.00364757843737919, -0.806216324172751, -0.181408029877251, -0.173807930028898, -1.29326671905912, -4.13639574699224, 9.96035149115307, -0.0570264151812187, -0.0255798113809543, 0.0949323877119815, 4.07408998454623, 1.29326671905912, -9.96035149115306, -0.0128351909782699, -0.00277430436200343, -0.00575736285052303, 0.0623057624460009},
    {0.404206071679304, 0.31266857990608, -0.128217417910571, -0.173147693978934, 0.188263646324617, 1.49613339776545, 4.42785703112518, -1.69273776311029, -0.12454417047995, -0.0966026294448032, -0.188263646324617, -0.490009880059316, -0.136238594896718, -0.0906261766293503, -1.64424322359767, 2.47039173426359, -1.49613339776545, 1.55150804171481, 1.10042932742017, -0.800976564522558, 0.192595219241209, 0.060166369149311, 0.269750323423737, 0.613951962651613, -1.55150804171481, 0.800976564522558, 2.54265922615503, -6.89824876538877, 0.794321760552938, -1.71438129007178},
    {0.507063488468923, 0.358442270125219, -0.589309695251549, -0.0298665723416657, 0.0303348329193261, 0.0710197363376304, 1.47626003455429, -1.2655083911331, -0.733385228998833, -0.0302084434457295, -0.0303348329193276, -0.488389534487908, -0.180700986901214, -0.19641523720502, -1.57490224360712, 1.49315821229376, -0.0710197363376299, 4.1058943026982, 2.68492309883723, -0.178382287547577, 0.869933654044334, 0.452761270206048, 0.0600750157873947, 2.71565637527838, -4.10589430269821, 0.178382287547578, 1.86813206670943, -2.96941824684805, 0.972278568030786, -5.40057947411561},
    {0.671962873295984, 0.204881260678232, -0.483666898076633, 0.15379832592809, 0.100429811620989, -0.182002935180801, 0.027151168478108, -0.304019521310429, -1.99407380623269, 1.78064479277004, -0.100429811620991, -0.404522635107623, -0.206622790275704, -0.265698708590888, -1.25341917431049, 0.314350539750141, 0.182002935180801, 1.61322747684966, 0.374350826550644, 5.74399164313581, 1.42072665018609, 1.05701405412324, -1.93444311869813, 4.33415543338379, -1.61322747684966, -5.74399164313581, 0.893029144272991, -0.341501708228248, 0.664409551347933, -4.70850625993443},
    {0.854659261789436, -0.316700773842388, 1.6912589729984, -3.80801363222959, 5.48363837580173, 0.23937419500302, 0.135622046814994, 0.291947835933291, -3.73314907767067, 6.38069328908851, -5.48363837580173, -0.213756128882988, -0.139072114068446, -0.185130244995613, -0.644422180069839, -0.227247790459782, -0.23937419500302, -1.57608705190348, -1.91681936521851, 7.63912379052446, 1.07096158715758, 0.970928517514688, -2.57267965685892, 3.21181530352968, 1.57608705190348, -7.63912379052446, 0.184871106513052, 0.0916257436447856, 0.167603237623499, -1.29499593831118},
    {0.631960136631531, -0.350933368613929, 0.449254419664607, -0.538254520513323, 0.188263646324616, -0.245178772671678, 2.41050832213799, 3.41525493734883, -0.177976321311656, -0.121952669742184, -0.188263646324616, -1.91427250782968, 1.77830342542667, -0.145057685614596, -1.35298504251687, 0.546150406763192, 0.24517877267168, 0.271705295222056, 1.96979596508841, -0.461219778285546, 0.634149285146315, -0.905427383499267, 0.660207190255507, 0.446297927160587, -0.271705295222058, 0.461219778285545, 4.82083510436928, -2.95665872890118, -6.88310499920124, -2.41609389224899},
    {0.699938941386467, -0.216923199943662, 0.517264163089156, -0.111178053602371, 0.0303348329193272, -0.116209006894856, 0.543191701082628, 0.639619870511514, -0.951179273079121, -0.0358540495445343, -0.0303348329193273, -1.66902382882621, 0.933222619464402, 0.252785467919004, -1.17617497382134, 0.175175059571124, 0.116209006894856, 0.405848874101022, 5.75511024902158, -0.102716412385681, 2.64191581943289, -2.20800070944293, 0.147032103146906, 1.85597787797826, -0.405848874101023, 0.10271641238568, 3.26684501829046, -0.718366760653753, -2.73028991498063, -7.61108812699983},
    {0.804449259426938, 0.27602204541492, -1.31167064875703, 2.77206539309932, 0.100429811620988, 0.157022569763056, -0.236163321155012, -0.4747533293926, -2.30843348521193, 1.96243590385965, -0.10042981162099, -1.18999803696498, 0.0614030576075592, 0.0481236745155625, -0.835527183461997, -0.167187751689785, -0.157022569763056, -0.778516229484539, 3.88524824070937, 3.30751568705419, 3.92425688943188, -0.30415275546292, -4.73450129695898, 2.75049450924061, 0.778516229484538, -3.30751568705419, 1.42036724341977, 0.403351072844797, -0.110086730565168, -6.63574274994998},
    {0.915095482842408, 0.138208304688548, -0.377808999793019, -0.325893969559757, 5.48363837580173, 0.242772631084243, 0.0101416649367495, -0.0375539443989289, -3.94745604157908, 6.62246327900312, -5.48363837580173, -0.560561951204748, -0.236590803240138, -0.256151033086069, -0.392374307610201, -0.206087899454944, -0.242772631084242, -1.37715028081005, -0.0944598238528547, 4.39877411776922, 2.74410921556155, 1.58115582581055, -6.29656930944336, 1.91950994261021, 1.37715028081005, -4.39877411776922, 0.272762493646929, 0.195946234518191, 0.157165758362205, -1.82505011875735},
    {0.868638985211495, 2.24400210538221, 1.87719259162015, -0.867537471440299, 0.188263646324616, 0.250809322516258, -1.38689694902201, 4.78962345684887, -0.230538830650137, -0.144815392289644, -0.188263646324615, -3.84413241617305, 6.69817494241225, -5.9666836168329, -0.588215719540757, -0.23151049072783, -0.250809322516256, -0.0969913721940593, 1.06557389113459, -0.154799549906027, 1.16271865188602, -2.80937241285603, 1.01235286372994, 0.177873009683448, 0.0969913721940548, 0.154799549906026, 2.96665592739346, 1.61840743974984, -7.16806366470157, -1.24344690081803},
    {0.894239071655412, 0.00319288667625691, 4.37286031043355, -0.184511342787659, 0.0303348329193283, 0.255773608793594, -1.01420051076149, 1.81483410215386, -1.16137946239125, -0.0409457150541383, -0.0303348329193272, -3.1504434782152, 3.87170171089794, -1.61869019101441, -0.481998258407618, -0.225065649048979, -0.255773608793594, -0.456594884345625, 3.20567449225822, -0.0344747887100016, 4.6506255307968, -7.8621063788391, 0.225457057841799, 0.711385177373007, 0.456594884345624, 0.0344747887099989, 1.93011283472731, 1.23926615981047, -3.26294867847355, -3.91705966963122},
    {0.932314949394836, -0.132026023671421, 0.432971142057141, 5.13343100868266, 0.100429811620987, 0.219317728895969, -0.437124360783319, 0.0525973593220325, -2.60395904918184, 2.1263898733871, -0.100429811620988, -2.06802429359264, 1.01585183572003, 0.251883532149194, -0.316329095558073, -0.181067362668032, -0.219317728895969, -0.778136835772906, 2.41482021040206, 1.11010404099829, 6.54011940697723, -4.36913149985253, -7.25982088206975, 1.00027627385357, 0.778136835772905, -1.11010404099829, 0.794494082962224, 0.618191723451349, -0.530762346726181, -3.41509648425562},
    {0.971133168652244, 0.32642562697874, -1.55864364979357, 2.81456398596073, 5.48363837580173, 0.119844479565319, -0.0384379828016495, -0.0519986256654519, -4.14403873378693, 6.84051106649682, -5.48363837580173, -0.904005455041906, -0.208877956754555, -0.184675383834523, -0.138251176842041, -0.0934196017713607, -0.119844479565317, -0.604362992504241, 0.273806468834916, 1.47636394974242, 4.35154474196655, 1.35113764161394, -9.65507505245755, 0.665458731613916, 0.604362992504235, -1.47636394974242, 0.145173879952592, 0.131857584573004, 0.0450759225549052, -0.939265200448827}};
    // Array of non-zero columns
    static const unsigned int nzc2[30] = {0, 2, 4, 5, 6, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34};
    
    const static double FE0_D001[64][30] = \
    {{-2.61665455821179, -0.396701411583312, 0.202156726410703, 0.104101948809161, 0.137487919401698, 0.218367276513485, 0.114493927887237, 0.157622757753225, 4.98241396681808, -3.89335121387582, 1.92429321685284, -2.23419141910734, 0.966009105862814, -0.202156726410704, -2.561384406432, 1.06244098376896, -0.218367276513485, -0.0813206240654216, -0.0847679127254592, -0.0662835546817469, 2.91710794676055, -1.07011105467198, -0.820404447054916, 3.34431273113415, -1.1769349116562, -0.940551082455373, -0.615075107853203, 0.081320624065419, 0.0847679127254597, 0.681358662534952},
    {-0.097124304595052, 0.346390058705359, 0.174901641144903, -0.130567659355242, -0.115221071571267, 0.191622862578411, -0.145073844060272, -0.13209497337204, -2.69891052173226, 4.25039744226718, -1.80075267464523, -0.856794088890817, 0.624184812888232, -0.174901641144904, -0.98226991655213, 0.693532308512668, -0.19162286257841, -0.0555249839508466, -0.0572913852708466, 0.063028423712749, 0.112132602068757, -0.49361715353299, 0.859882558393328, 0.12855420351866, -0.548458464452398, 0.985810686405512, -0.301310332559028, 0.0555249839508456, 0.0572913852708463, 0.238281908846281},
    {0.157576792955304, -0.351201920067466, 0.123642391765633, -0.307820525808745, 0.178200900522255, 0.13798577775709, -0.346492107766978, 0.204298075763005, -0.858857374218978, -1.58521578630869, 2.63769828763983, -0.0330344408809351, 0.234572257037864, -0.123642391765632, -0.0378722704885493, 0.264041637740582, -0.137985777757091, -0.0243740394654249, -0.0248248207051197, 0.0875141056162494, -0.830666749897076, 0.0732482687708786, 0.685500290255757, -0.952316279586285, 0.0824504700263967, 0.785890474311832, -0.0666894490649009, 0.0243740394654246, 0.0248248207051201, -0.0208246565513462},
    {-0.332272064837323, 1.77751327294542, 0.0578933212354535, -0.238589734323358, 0.413516568270597, 0.0656658884112391, -0.2715714271387, 0.474075265311318, 1.78437565996328, -4.09982592947846, 0.870209061407083, 0.0235918168933201, 0.0192499727777506, -0.057893321235454, 0.02704679258597, 0.0219110122003376, -0.0656658884112411, -0.00471924063393887, -0.00475328859652572, 0.0267577424464952, -0.147499565414457, 0.219339761545605, -0.289608819749459, -0.169100589849647, 0.249660414938367, -0.332021468047643, -0.00215887668071246, 0.00471924063393513, 0.00475328859652573, -0.0245988657657768},
    {0.0875743252958645, -0.396701411583311, -0.0356729062616842, -0.0346045055181192, 0.666545937704304, 0.186413882500132, 0.0946026198011386, 0.120889283852102, 0.67972591857652, -1.80256750474043, 1.43196867245135, -4.43406878641156, -0.23309969083241, 0.0356729062616833, -0.804192734241909, 0.637253476025951, -0.186413882500133, -0.325751900006667, 0.0216109650404296, -0.246456467964149, 6.74117053529279, 0.267704196350527, -2.97364768658553, 1.22262432675417, -0.731856095827088, -0.539320876364359, -1.6601574166696, 0.325751900006667, -0.0216109650404303, 1.90661388463375},
    {0.347307955877069, 0.346390058705359, 0.101992726716842, -0.120186420065602, -0.558595529905268, 0.15950810376607, -0.117722478519046, -0.101310667057417, -1.39526645637379, 2.08973096441721, -1.38816252262585, -1.29536745996238, 0.409838580918111, -0.101992726716842, -0.234936612320397, 0.40143648102734, -0.15950810376607, -0.218436025622454, -0.040446224405039, 0.234353193098575, -1.36036675471709, -0.289652160852509, 3.21432974458474, -0.246725324469557, -0.283714002508295, 0.582972603847371, -0.799150020782073, 0.218436025622454, 0.0404462244050388, 0.564796827683498},
    {-0.161328789785951, -0.351201920067467, 0.243015108355066, -0.780294492171823, 0.863923804034904, 0.111120368180021, -0.2747095662848, 0.156687069959905, 0.824500830648484, -2.31155651072535, 1.99958638993029, 0.260269516108357, 0.39806440936755, -0.243015108355065, 0.0472042414949509, 0.140142090387454, -0.111120368180022, -0.0936857401896804, -0.0482631839802603, 0.325396208317108, -3.12233722505628, 0.382230082804273, 1.99814390491301, -0.566288217706112, 0.134567475897346, 0.362396906251257, -0.165999697260027, 0.0936857401896791, 0.0482631839802601, -0.159396511057078},
    {-0.219620965508789, 1.77751327294542, 0.206913148841661, -0.938985349862099, 2.00474187080316, 0.0513521406623318, -0.211024069027352, 0.363593558014051, 1.06963975570393, -2.01699752931235, -0.61053453382821, 0.0589610169540362, 0.0173297934874969, -0.206913148841662, 0.0106935692074169, 0.00389463322050124, -0.0513521406623333, -0.0177781099200834, -0.0143472983469535, 0.0994910234630093, -0.254490232020023, 0.921655556374602, -1.80921265573718, -0.0461560714062937, 0.207129435806854, -0.328131055815177, -0.0018361936005959, 0.0177781099200789, 0.0143472983469537, -0.0976548298624082},
    {-0.0209772079821638, -0.396701411583311, 0.399877762194952, -1.65993791461285, 1.40509174086318, 0.123390082929376, 0.0599331426904431, 0.0696106867104142, -0.203319129043972, -0.123703717824719, 0.744701466434164, 0.479253808900426, -5.28804995692453, -0.399877762194951, 0.0237430665741765, 0.190928497886898, -0.123390082929376, -0.435036243762152, 0.596927340689374, -0.299159589437829, 1.43055486500621, 6.94798787153737, -3.31490041476982, 0.0708721741320873, -0.250861640577341, -0.164225927416678, -0.953030134509129, 0.43503624376215, -0.596927340689376, 1.25218972394696},
    {-0.24472000199512, 0.346390058705358, -0.205061948774459, 1.25569982385825, -1.1775301913267, 0.102354027564883, -0.0729779800399436, -0.058336892073783, 0.458103499297863, 0.252428080179948, -0.812201636188051, 1.06954018544265, -1.87956149697762, 0.20506194877446, 0.0529868795095996, 0.109235184081513, -0.102354027564883, -0.285450824891422, 0.243330492119068, 0.284468107532129, -3.85932203668384, 0.623861673119375, 3.96731204256788, -0.191197520700799, -0.0362572040415694, 0.196547533264983, -0.425798659740704, 0.285450824891422, -0.243330492119069, 0.141330552208574},
    {-0.343330389268094, -0.351201920067467, -0.0835461193906461, 0.450426536556233, 1.82116810428009, 0.0683473488315219, -0.165391128058819, 0.090223832841096, 1.27432954866167, -1.68860256613002, 1.10880532680391, 0.609052888212724, -0.0713965829656423, 0.0835461193906461, 0.0301735385373514, 0.0262159540743644, -0.0683473488315218, -0.118901275520851, 0.0160424062525854, 0.394980082644585, -2.74270358699422, -0.379029953590591, 0.312482594501411, -0.135878302164458, 0.139175173984454, 0.015480930786011, -0.0626078304709057, 0.11890127552085, -0.0160424062525856, -0.332372252173677},
    {0.119021627700702, 1.77751327294542, 0.253349046363801, -1.33875328318573, 4.22603467501402, 0.0303732203363815, -0.123715939849411, 0.209365102102897, -0.60997902982752, 1.39104301130931, -2.67759888212791, -0.127657140121389, -0.0915840975261233, -0.253349046363801, -0.00632435657324621, -0.0084634060980539, -0.0303732203363822, -0.0219712035662466, -0.0117787709119718, 0.120766535274177, 0.907807326795802, 1.43033738071186, -5.00618486168843, 0.0449743526214106, 0.132179345947467, -0.248015098151063, 0.00826163736317946, 0.0219712035662415, 0.0117787709119728, -0.129028172637353},
    {-0.160775122870769, -0.396701411583312, 6.32404851007064, -4.55659847811125, 2.0711722515106, 0.046548999258722, 0.021767807908984, 0.0233634884685061, 0.281190616285139, 0.151417764140288, 0.124868154028652, 0.512728960713622, 0.0745567365024567, -6.32404851007063, 0.00578374741761197, -0.000356172861466716, -0.0465489992587219, -0.232908116629403, 0.549961335597682, -0.148004948949566, -1.62415093733461, 4.48204174160879, -0.959750274889609, -0.0183209444158332, -0.0214116350475207, -0.0108262914702831, 0.00242171129031161, 0.232908116629399, -0.549961335597675, 0.14558323765926},
    {-0.0231092835261108, 0.346390058705359, 1.75409916439269, 3.85712313652989, -1.73573567238647, 0.037675444755981, -0.026064908672441, -0.0195796560795948, 0.195906210582942, -0.226433594639724, -0.292753391122468, -0.164342827891451, 0.881951188948034, -1.75409916439269, -0.00185383990227111, -0.00595987641041662, -0.0376754447559803, -0.150282084237939, 0.250862632720199, 0.14073654737992, -0.214188317465693, -4.73907432547793, 2.11426681774362, -0.00241611304011451, 0.0320247850828559, 0.0238496090219808, 0.0321801407153993, 0.150282084237941, -0.250862632720197, -0.172916688095317},
    {0.257570292859132, -0.351201920067466, -0.247959121416691, 3.44947832137329, 2.68448865880023, 0.0242960786153948, -0.0576920151294532, 0.0302818946024247, -0.720891835721446, 0.50909675240735, 0.305426710522429, -0.755472566595072, 0.547178448555986, 0.247959121416689, -0.00852197328592508, -0.00915147868505348, -0.0242960786153923, -0.0611366377836171, 0.0412344999417657, 0.195410774154911, 2.79461718917546, -3.99665676992928, -4.72363328138062, 0.0315241798095663, 0.0668434938145015, -0.0532841011260637, 0.0309973144549717, 0.0611366377836169, -0.0412344999417651, -0.226408088609879},
    {0.643627477463276, 1.77751327294542, 0.180795646006105, -1.12170128065518, 6.2293767006513, 0.0104401582457737, -0.0421899274451683, 0.0702693706935791, -2.84415859753121, 4.96486302347839, -4.54184517635587, -0.654052673186591, -0.164612656347537, -0.180795646006105, -0.00737792430187888, -0.0061914844420998, -0.0104401582457733, -0.011044562208069, -0.0033123667225523, 0.0597475244623177, 3.38913299317737, 1.28631393700272, -8.96445702064208, 0.0382305090977379, 0.0483814118872666, -0.101121955489438, 0.00876810865918798, 0.011044562208064, 0.00331236672255464, -0.0685156331215039},
    {0.260529637804041, -0.39670141158331, 0.202156726410702, 0.104101948809163, 0.137487919401696, -0.118688289051526, -0.133571098516481, 0.749180792140795, 0.274356833948043, -1.47092024263404, 1.33273518246527, -0.712398674345034, 0.647875223764908, -0.202156726410703, -3.88190762860052, -0.831275555643356, 0.118688289051527, 0.0948704030764201, -0.402901794823364, -0.315045661617758, 1.14655309506224, -0.751977172574072, -0.5716423401189, 6.24764386375316, 0.964846654159836, -3.11491702729343, -1.96067682547368, -0.0948704030764215, 0.402901794823368, 2.27572248709144},
    {0.302516099307213, 0.346390058705359, 0.174901641144902, -0.130567659355243, -0.115221071571266, 0.0347833019774885, -0.0450594763221751, -0.627847261393689, -1.08349512321911, 1.73958935183012, -1.30500038662358, -0.18102625198079, 0.409170307741555, -0.174901641144902, -0.986424054181831, 0.141206481639182, -0.0347833019774882, -0.0172458840932271, -0.272305890417523, 0.299574027745599, -0.327089630808417, -0.278602648386312, 0.623336954360473, -1.78233309352895, -0.0961470053170071, 3.39660440910447, -0.938799069611437, 0.0172458840932256, 0.272305890417524, 0.63922504186584},
    {-0.21843793762351, -0.351201920067467, 0.123642391765632, -0.307820525808745, 0.178200900522257, 0.223613849822959, -0.752030001145617, 0.971028526683914, 1.03810278643263, -2.33943076546058, 1.87096783671892, 0.062827125400676, 0.141404732565693, -0.123642391765631, 0.342349173516006, 0.34546299638071, -0.22361384982296, -0.0529016636056611, -0.117992345177289, 0.415954446576279, -0.598087975218645, 0.16641579324305, 0.357059949295714, -3.25902104704227, 0.406567004764907, 1.94564334684235, -0.191078639486747, 0.0529016636056606, 0.11799234517729, -0.224875807089531},
    {-0.184678583593711, 1.77751327294542, 0.0578933212354522, -0.238589734323357, 0.413516568270598, 0.220601860279331, -1.01717622737601, 2.2532792083003, 0.877100194463029, -1.56094000223284, -0.908994881581894, 0.00922823879748742, 0.00141088596622018, -0.0578933212354529, 0.0502852852996238, 0.00601501011116298, -0.220601860279333, -0.0176760104503039, -0.0225923754080529, 0.127179520062298, -0.0327142097028099, 0.237178848357135, -0.390030597365274, -0.178261898543975, 1.01116121726486, -2.12530259505595, -0.000752068401241898, 0.0176760104503014, 0.022592375408053, -0.126427451661053},
    {0.259550726522875, -0.396701411583311, -0.0356729062616835, -0.0346045055181192, 0.666545937704305, 0.0606216909073088, 0.0509756550692594, 0.574586631579221, -0.308909765222811, -0.532210874440987, 0.978271324724236, -0.798816702986172, -0.151993763092264, 0.0356729062616827, -0.688608800465997, 0.223900949430204, -0.060621690907309, -0.175528082919915, 0.102716892780573, -1.17140731788667, 2.18096760194488, 0.186598268610383, -2.04869683666301, 1.8800727108187, -0.274876604499464, -1.76605054193192, -5.14518568300823, 0.175528082919915, -0.102716892780574, 6.3165930008949},
    {-0.0203093940389602, 0.346390058705359, 0.101992726716843, -0.120186420065603, -0.558595529905267, 0.16852491355416, -0.180442698454675, -0.481529487748321, -0.0408768355937405, 0.722739872862286, -1.00794370193494, 0.180639772360899, 0.25804394574936, -0.101992726716842, 0.155717997003428, 0.387416031407634, -0.16852491355416, -0.334814441548248, -0.19224085957379, 1.11388046592354, -1.9568467142154, -0.137857525683758, 2.33480247175977, -1.68687242459303, -0.206973332952958, 2.01268391533792, -2.39153566903114, 0.334814441548248, 0.19224085957379, 1.2776552031076},
    {-0.350400156294149, -0.351201920067467, 0.243015108355066, -0.780294492171823, 0.863923804034904, 0.254937392993911, -0.779330043605613, 0.744733469100725, 1.40434486643232, -2.11428278086017, 1.41153999078947, 0.35215478221592, 0.216932733614566, -0.243015108355065, 0.303570119720276, 0.216664603484216, -0.254937392993912, -0.265779284553757, -0.229394859733243, 1.54660781591123, -1.99301088356971, 0.563361758557257, 0.776932297318885, -1.71804724252789, 0.562665440121397, 0.669743653706888, -0.429978507731666, 0.265779284553756, 0.229394859733244, -1.11662930817957},
    {-0.0223844325018234, 1.77751327294542, 0.20691314884166, -0.938985349862099, 2.00474187080316, 0.188817160483825, -0.842059472797177, 1.72815977650084, 0.0525831654337399, 0.167388746437667, -1.975100752315, -0.0144274684593464, -0.0365156012376726, -0.206913148841661, -0.0124369980152054, -0.0327463127423485, -0.188817160483827, -0.0709408454477899, -0.0681926930721209, 0.472880723769597, 0.192287953699954, 0.975500951099772, -2.18260235604377, 0.165759149309727, 0.87480578553953, -1.88148192779537, 0.0183895562850822, 0.0709408454477868, 0.0681926930721212, -0.491270280054677},
    {-0.309054780062581, -0.396701411583312, 0.399877762194952, -1.65993791461285, 1.40509174086318, 0.245642220944689, 0.152674682073993, 0.330859516446368, 0.0867840462081394, 0.13551950873954, 0.483452636698213, 1.46377606721657, -3.04778231179647, -0.399877762194952, 0.344678021868894, 0.28032325268791, -0.245642220944689, -1.10821854528985, 2.83719498581743, -1.42190519558375, -0.676712999455852, 4.70772022640932, -2.19215480862389, -0.159346844950772, -0.432997934761903, -0.51619069336449, -2.61073469435296, 1.10821854528984, -2.83719498581743, 4.03263988993671},
    {-0.358579623296543, 0.346390058705359, -0.205061948774459, 1.25569982385825, -1.1775301913267, 0.256580410431232, -0.221168398048957, -0.277275183088055, 0.691085365440886, -0.0856324556759214, -0.59326334517378, 1.10461047941694, -0.96634243092197, 0.205061948774459, 0.260104645449674, 0.170203422309211, -0.256580410431232, -0.865092478970158, 1.15654955817472, 1.35207659844, -2.82678383975025, -0.289357392936277, 2.89970355166, -0.665627949491486, 0.050964975739746, 0.682798487129866, -1.04051060779373, 0.865092478970158, -1.15654955817472, -0.311565990646277},
    {-0.209120412751909, -0.351201920067467, -0.0835461193906459, 0.450426536556233, 1.82116810428009, 0.225482960005566, -0.611576862650216, 0.428833777059639, 0.741589727968507, -0.951462777734499, 0.770195382585367, 0.272314520571383, -0.0111894501575487, 0.0835461193906457, 0.0641223971199366, 0.0151927301496381, -0.225482960005566, -0.439668499160908, 0.0762495390606787, 1.87733989313133, -0.923605408866134, -0.439237086398685, -1.16987721598534, -0.217483051161466, 0.596384132500577, -0.275473123018109, -0.0466366864696221, 0.439668499160907, -0.0762495390606782, -1.83070320666171},
    {0.31247810905761, 1.77751327294542, 0.253349046363801, -1.33875328318573, 4.22603467501402, 0.125378211827877, -0.534659491189283, 0.995112097236987, -1.46615692106645, 2.83951141632542, -3.463345877262, -0.250597768737479, -0.135789811647015, -0.253349046363801, -0.0590087139335747, -0.0542305386031383, -0.125378211827878, -0.0949522958306143, -0.0559844850328624, 0.574003207724917, 1.48398462786263, 1.47454309483275, -5.45942153413918, 0.349436568523887, 0.588890029792423, -1.2855399518273, 0.0582211737149025, 0.0949522958306104, 0.0559844850328636, -0.632224381439817},
    {0.0441090754128545, -0.396701411583312, 6.32404851007064, -4.55659847811125, 2.0711722515106, 0.17603121444546, 0.0885717097592954, 0.111046634683379, 0.219943720231993, 0.0954636081246829, 0.0371850078137803, -0.529788570164161, 2.13856101680234, -6.32404851007064, -0.028404802047508, -0.0415696064932345, -0.176031214445459, -0.947687070417888, 2.61396561589757, -0.703467357603269, -1.13709581511053, 2.41803746130891, -0.404287866235905, -0.0609657953308789, -0.0470021032660647, -0.021676037304991, 0.33016028837961, 0.947687070417884, -2.61396561589756, 0.373307069223661},
    {0.182854617686688, 0.346390058705359, 1.75409916439269, 3.85712313652989, -1.73573567238647, 0.149676919217674, -0.109727092848611, -0.0930620835509127, -0.106013524280278, -0.20396018846062, -0.219270963651151, -0.930761949117101, 1.82343837029521, -1.75409916439269, -0.0499031319415463, -0.051873011122249, -0.149676919217672, -0.632651985007536, 1.19234981406737, 0.668920653033639, 1.08041490941368, -5.6805615068251, 1.58608271208989, 0.0579268284734109, 0.161600103970857, 0.0850383870190482, 0.316229361171452, 0.632651985007538, -1.19234981406737, -0.985150014205089},
    {0.43095300139955, -0.351201920067466, -0.247959121416691, 3.44947832137329, 2.68448865880023, 0.103393084530579, -0.254549965342958, 0.143929811336569, -1.21677998664642, 0.945250111526052, 0.191778793788283, -1.1220851536954, 0.701931480936604, 0.247959121416689, -0.060160993396461, -0.0517981611997525, -0.103393084530576, -0.269748404421052, 0.195987532322384, 0.928787192033666, 3.89460619415455, -4.1514098023099, -5.45700969925938, 0.208810692091153, 0.306348126542705, -0.292579510031259, 0.188998134917863, 0.269748404421052, -0.195987532322383, -1.11778532695153},
    {0.736873916833949, 1.77751327294542, 0.180795646006105, -1.12170128065518, 6.2293767006513, 0.0474159810998248, -0.194517528557206, 0.333990240685127, -3.21754465365933, 5.50872351022738, -4.80556604634742, -0.729983215471415, -0.177043964970057, -0.180795646006105, -0.0391383089428394, -0.0307017163177612, -0.0474159810998244, -0.0509211813056939, -0.0157436753450717, 0.283979917260438, 3.68929592826032, 1.29874524562524, -9.1886894134402, 0.197802909384105, 0.225219244874966, -0.492654841126393, 0.0448220318463866, 0.0509211813056894, 0.0157436753450741, -0.328801949106824},
    {-0.242112183715198, -0.39670141158331, 0.202156726410702, 0.104101948809164, 0.137487919401697, 0.910263235975046, -2.06647448493138, 1.52099882878988, -0.00253143690262652, 0.0804278863849564, 0.560917145816179, 0.13012919389268, 0.232799349549862, -0.202156726410702, 1.43959085542531, -4.62118069312338, -0.910263235975046, 1.46773717900042, -0.817977669038412, -0.639610741976803, -0.0205398535345239, -0.336901298359026, -0.247077259759854, -0.227227914317663, 6.68765517805476, -2.73336176989753, -1.43033791778739, -1.46773717900042, 0.817977669038415, 2.0699486597642},
    {-0.347940059792458, 0.346390058705358, 0.174901641144902, -0.130567659355243, -0.115221071571266, -0.0900751953174305, 1.6156503063331, -1.27466555370425, 0.665827171745215, -0.00609507634509911, -0.658182094313017, 0.114992163304793, 0.128636423377716, -0.174901641144902, 1.27213319153948, -1.59175310227737, 0.0900751953174299, 0.618367548681294, -0.552839774781362, 0.608199983391049, -0.314482090448548, 0.00193123597752603, 0.314710998715021, -3.47904669245964, -0.0238972040557297, 3.48157905462441, -0.599204052122497, -0.618367548681295, 0.552839774781364, -0.00899593126854761},
    {-0.264871803916117, -0.351201920067467, 0.123642391765632, -0.307820525808745, 0.178200900522258, -0.139787485467041, 0.84354443156993, 1.97139764833991, 0.94425756719594, -1.19878255827528, 0.870598715062927, 0.0384381926574374, 0.0198471310498721, -0.123642391765631, 0.425233331533269, -0.0543886306339463, 0.13978748546704, 0.0593392599861152, -0.239549946693109, 0.844477371429406, -0.145176117622271, 0.287973394758871, -0.0714629755574241, -1.60605168681469, -0.789155800935985, -0.790579293058494, -0.0544487831517288, -0.0593392599861172, 0.23954994669311, -0.790028588277673},
    {0.251073694749742, 1.77751327294542, 0.0578933212354508, -0.238589734323356, 0.4135165682706, 0.247106172443946, -1.34035148121975, 4.57464349421983, -1.19945571810087, 2.40122791790713, -3.23035916750142, -0.0208011980772031, -0.0218641405875851, -0.0578933212354518, -0.230119111922972, -0.122828558845079, -0.247106172443949, -0.0232919981331451, -0.0458674019618548, 0.258201896111138, 0.128337603220732, 0.260453874910941, -0.521052973414128, 1.41977087905534, 1.46318004006483, -5.7642952613522, 0.0236613807906141, 0.0232919981331429, 0.0458674019618543, -0.28186327690175},
    {-0.354977542438394, -0.396701411583311, -0.035672906261683, -0.034604505518119, 0.666545937704305, -0.161830420667417, -0.952532688813851, 1.16653497104885, 0.186693538034371, 0.17866243073273, 0.386322985254605, 0.684720873388753, -0.046173176995739, 0.0356729062616827, 1.19834327843348, -1.27097497208273, 0.161830420667416, 3.27992326060122, 0.208537478877097, -2.37820987568337, -0.509372532226735, 0.0807776825138577, -0.841894278866321, -0.891462746259804, 2.22350766089658, -1.47341550322253, -3.17327191586202, -3.27992326060122, -0.208537478877098, 5.55148179154539},
    {-0.336177667614903, 0.346390058705359, 0.101992726716843, -0.120186420065603, -0.558595529905268, -0.245351328163604, 0.637826140626859, -0.977608869015617, 0.662352475008212, -0.16070054543102, -0.511864320667648, 0.436264187114289, 0.0599943369546773, -0.101992726716842, 0.763514413781913, -0.318388353512671, 0.245351328163603, 1.18349705977435, -0.390290468368473, 2.26141794057534, -1.064933654317, 0.0601920831109251, 1.18726499710798, -1.86376103931599, -0.319437787114187, 2.07785549454969, -1.12884858246194, -1.18349705977435, 0.390290468368472, -1.1325693581134},
    {-0.118117019922264, -0.351201920067467, 0.243015108355066, -0.780294492171824, 0.863923804034904, 0.0425061088440187, -0.187940606800303, 1.51196980241046, 0.432132696843095, -0.6071174143331, 0.644303657479737, 0.0458205299922569, -0.0193935204939752, -0.243015108355065, 0.0801913980783609, -0.00467109539564554, -0.0425061088440196, -0.0640944365276672, -0.465721113841784, 3.13994792882539, -0.0933365184318841, 0.799688012665799, -0.816407815595278, -0.163350050863321, 0.192611702195949, -1.4288111496255, 0.0780405925180883, 0.0640944365276665, 0.465721113841785, -3.21798852134348},
    {0.394442721463882, 1.77751327294542, 0.206913148841659, -0.938985349862098, 2.00474187080316, 0.255745030827459, -1.28326040456176, 3.50853762348672, -1.81600426818163, 3.39952687307321, -3.75547859930088, -0.142371689060033, -0.106768804513663, -0.20691314884166, -0.249167453855972, -0.145915140523653, -0.255745030827461, -0.108110627539025, -0.138445896348109, 0.960050010032403, 0.807401460563454, 1.04575415437576, -2.66977164230659, 1.41304895303559, 1.42917554508541, -4.67241912266634, 0.109163994794538, 0.108110627539023, 0.138445896348109, -1.06921400482694},
    {-0.192468191903715, -0.396701411583312, 0.399877762194953, -1.65993791461285, 1.40509174086318, -0.0410670910943316, -0.0401841924135712, 0.671716283022829, 0.286700988942449, 0.159872744422824, 0.142595870121753, 0.47008453121796, -0.124858651024475, -0.399877762194952, 0.224727983827076, -0.00302260946816011, 0.0410670910943317, 0.291684689663444, 5.76011864658942, -2.88677467417864, -1.14789094205213, 1.78479656563732, -0.727285330029009, -0.548759212289693, 0.0432068018817312, -0.347685054560212, -0.217139923401067, -0.291684689663444, -5.76011864658942, 3.1039145975797},
    {-0.0579729019650719, 0.346390058705359, -0.205061948774459, 1.25569982385825, -1.1775301913267, 0.0979411138874715, -0.116068266153771, -0.562928512254454, 0.247452663795526, -0.228259804528431, -0.307610016007383, -0.0169985708549942, 0.225153425141061, 0.205061948774459, -0.00812631410416149, -0.020811636012187, -0.0979411138874707, -0.453996976885044, 2.34804541423775, 2.74500753921486, -0.312243848703448, -1.48085324899931, 1.50677261088514, -0.149270877728578, 0.136879902165958, 0.720325704087194, 0.492193944563324, 0.453996976885044, -2.34804541423775, -3.23720148377819},
    {0.225565484443058, -0.351201920067466, -0.083546119390646, 0.450426536556233, 1.82116810428009, 0.242028983444845, -0.779334722200614, 0.870625194206356, -0.627456245081788, 0.424688715267548, 0.328403965438649, -0.464943919745675, 0.0673640447405835, 0.0835461193906455, -0.222270469965022, -0.116554276521091, -0.242028983444845, -0.560271240754738, 0.154803033958811, 3.81140548269241, 1.747718621012, -0.517790581296817, -3.10394280554642, 0.835512032228424, 0.895888998721703, -1.48386675646976, 0.570019012253606, 0.560271240754738, -0.15480303395881, -4.38142449494601},
    {0.625377600303053, 1.77751327294542, 0.2533490463638, -1.33875328318573, 4.22603467501402, 0.207840031305071, -0.944124904409845, 2.02029249853973, -2.77042394229884, 4.85605934761511, -4.48852627856474, -0.433502317612513, -0.193465923707228, -0.253349046363801, -0.207239539597305, -0.136437384707657, -0.207840031305072, -0.167670879694222, -0.113660597093075, 1.16535049460684, 2.2582364636196, 1.53221920689296, -6.0507688210211, 1.07956951095401, 1.0805622891175, -2.89262246989643, 0.168407138726331, 0.16767087969422, 0.113660597093076, -1.33375763333317},
    {0.445188683796847, -0.396701411583312, 6.32404851007064, -4.55659847811125, 2.0711722515106, 0.251335865827115, 0.140376363080485, 0.225448654138396, 0.0416264621376334, -0.0128967227099347, -0.0772170116412348, -2.26827762800339, 4.83151020970038, -6.32404851007064, -0.246903722311182, -0.1488456432319, -0.251335865827112, -1.50197918325386, 5.30691480879561, -1.42819068271762, -0.123330082385653, -0.274911731589134, 0.320435458878451, -0.0134245720356458, 0.00846928015141009, 0.0348796402084345, 1.51435723338288, 1.50197918325385, -5.3069148087956, -0.0861665506652567},
    {0.542293065584038, 0.346390058705359, 1.75409916439269, 3.85712313652989, -1.73573567238647, 0.233047796265585, -0.185263390252466, -0.188936130731824, -0.624267027991792, -0.141019179827365, -0.123396916470241, -2.12456429902517, 3.0518162226727, -1.75409916439269, -0.231260418584874, -0.146583295328362, -0.233047796265582, -1.06817057255093, 2.42072766644487, 1.35805341045946, 2.96335001674758, -6.90893935920259, 0.896949954664067, 0.322562873527047, 0.331846685580825, 0.0976336757896513, 1.07451312353613, 1.06817057255093, -2.42072766644486, -2.43256653399559},
    {0.696647594003246, -0.351201920067466, -0.247959121416691, 3.44947832137329, 2.68448865880023, 0.1796905676379, -0.464714413867439, 0.29220860540927, -1.94993432088213, 1.56098864723076, 0.0434999997155815, -1.64987954111949, 0.903840971932118, 0.247959121416689, -0.179590626402308, -0.12176563769028, -0.179690567637897, -0.492461161734252, 0.397897023317897, 1.8856386150017, 5.37925200454667, -4.35331929330541, -6.41386112222741, 0.585535618204529, 0.586480051557713, -0.698153597211489, 0.494079765028751, 0.492461161734252, -0.397897023317896, -2.37971838003045},
    {0.866122121955717, 1.77751327294542, 0.180795646006105, -1.12170128065518, 6.2293767006513, 0.0905566439693871, -0.378989874794234, 0.678072329454307, -3.72656946126586, 6.23258220148133, -5.1496481351166, -0.832787687104741, -0.193263351160873, -0.180795646006105, -0.0906495648074947, -0.0652980027053118, -0.0905566439693868, -0.0992127150214298, -0.0319630615358872, 0.576540570826313, 4.08466105345952, 1.31496463181606, -9.48125006700608, 0.444618421496496, 0.444287877499544, -1.03204118614331, 0.0993349697639774, 0.0992127150214259, 0.0319630615358898, -0.67587554059029},
    {0.262326815091421, -0.396701411583311, 0.202156726410699, 0.104101948809163, 0.137487919401697, 6.97671389735957, -4.78134754401982, 2.11255686317745, 0.128964660121261, 0.036050824942017, -0.0306408885713926, -0.100156729351644, -0.085334532548044, -0.202156726410699, -1.53894819927433, 3.91937002415418, -6.97671389735957, 3.39600687414887, -1.13611155113632, -0.888372848912815, -0.0390160372262204, -0.0187674162611191, 0.00168484717616104, -0.599497014536963, 0.861977519865643, 0.025888350633851, 0.728217700605393, -3.39600687414888, 1.13611155113632, 0.160155148307438},
    {0.382897749059931, 0.346390058705358, 0.174901641144902, -0.130567659355244, -0.115221071571265, 2.00292864633947, 4.0613297888734, -1.7704178417259, -0.395619949493976, -0.171238051979945, -0.162429806291369, -0.10701050209116, -0.0863780817689602, -0.174901641144901, -1.64425915824829, 2.6868052803149, -2.00292864633947, 1.55441715084489, -0.76785427992804, 0.844745587423901, 0.144066178980256, 0.216945741124201, 0.0781653946821692, 2.21363445225523, -6.74813506918831, 1.20104254771895, 0.558848215437056, -1.55441715084489, 0.767854279928043, -1.40359380286095},
    {0.582912531849486, -0.351201920067468, 0.123642391765632, -0.307820525808744, 0.178200900522259, -0.239523825164353, 3.69493051796097, 2.73812809926082, -1.63950531826655, 1.30392644234251, 0.10386826414202, -0.0948090485613349, -0.0733203934222975, -0.12364239176563, -1.45677894538782, 0.880102970824231, 0.239523825164354, 0.259920443346257, -0.33271747116528, 1.17291771238944, 0.316511464556538, 0.381140919231041, -0.399903316517465, 4.86332522619433, -4.5750334887852, -6.14467438006733, 0.279379641427193, -0.259920443346262, 0.332717471165281, -1.45229735381663},
    {0.812452135616642, 1.77751327294542, 0.0578933212354499, -0.238589734323355, 0.413516568270602, 0.173807930028895, -1.09014043663115, 6.35384743720881, -3.51633198805032, 5.93592968997865, -5.0095631104904, -0.0524695959338427, -0.0397032273991146, -0.057893321235451, -0.80621632417275, -0.181408029877252, -0.173807930028898, -0.0189439481887072, -0.0637064887733824, 0.358623673726944, 0.260427778693183, 0.27829296172247, -0.621474751029943, 4.00157696497626, 1.27154846650841, -9.54920807801233, 0.0596778285916998, 0.0189439481887041, 0.0637064887733807, -0.41830150231864},
    {0.404206071679304, -0.396701411583311, -0.0356729062616809, -0.0346045055181188, 0.666545937704303, 1.49613339776545, -2.44717872422156, 1.62023231877597, 0.0618697120201847, -0.00200000964366466, -0.0673743624725138, -0.676423762559449, 0.034932750744409, 0.0356729062616811, -1.64424322359767, 2.47039173426359, -1.49613339776545, 8.42654379706155, 0.289643406617239, -3.30316072560589, -0.0731787462010579, -0.000328245226290344, 0.0830565710562005, -0.177882067739879, -0.0232130100420246, 0.201892972561582, 3.33449325654652, -8.42654379706155, -0.289643406617242, -0.0313325309406251},
    {0.507063488468923, 0.346390058705359, 0.101992726716843, -0.120186420065603, -0.558595529905268, 0.0710197363376307, 1.9548666357124, -1.35782768970652, -0.573877125232763, -0.147930921964775, -0.131645499976745, -0.647897638253979, -0.0918002982140734, -0.101992726716843, -1.57490224360712, 1.49315821229376, -0.0710197363376302, 3.6272877015401, -0.542085103537224, 3.1409452134003, 0.898755443876239, 0.211986718279676, 0.307737724283007, 2.18468455731572, -3.44802484800616, 0.748045375997913, 2.39910388467209, -3.6272877015401, 0.542085103537224, -5.54004909807238},
    {0.671962873295984, -0.351201920067467, 0.243015108355065, -0.780294492171823, 0.863923804034904, -0.1820029351808, 1.22321782683205, 2.10001620155128, -1.88295343805267, 1.50593522648524, 0.0562572583389172, -0.515643003287643, -0.200525196246959, -0.243015108355065, -1.25341917431049, 0.31435053975014, 0.1820029351808, 0.417160818495717, -0.646852789594767, 4.36115953641952, 1.68933862244214, 0.980819688418783, -2.03761942318941, 4.1064251968354, -1.53756836658219, -4.95302222407618, 1.12075938082138, -0.417160818495719, 0.646852789594767, -5.48191891724089},
    {0.854659261789436, 1.77751327294542, 0.206913148841659, -0.938985349862098, 2.00474187080316, 0.239374195003018, -1.32853973709365, 4.87310384197352, -3.68179693700834, 6.16966922006115, -5.12004481778767, -0.26510826954532, -0.160614199238832, -0.20691314884166, -0.644422180069838, -0.227247790459782, -0.23937419500302, -0.111925267994829, -0.192291291073276, 1.33343971033899, 1.30352774135533, 1.09959954910093, -3.04316134261318, 3.16860047521871, 1.55578752755344, -7.39728213712239, 0.228085934824026, 0.111925267994827, 0.192291291073276, -1.56152564516302},
    {0.63196013663153, -0.396701411583312, 0.399877762194954, -1.65993791461285, 1.40509174086318, -0.245178772671679, -0.428558151068851, 0.932965112758783, -0.0545862383822763, -0.0620195270517436, -0.1186529596142, -2.03766259075905, 2.11540899410358, -0.399877762194953, -1.35298504251687, 0.546150406763192, 0.24517877267168, 3.1107717684289, 8.00038629171747, -4.00952028032456, 0.237110573778957, -0.455471079490735, 0.395460276116918, 0.157438754188456, -0.117592255694343, 0.262581175569635, 5.10969427734141, -3.1107717684289, -8.00038629171747, -1.10017399701685},
    {0.699938941386467, 0.346390058705359, -0.205061948774459, 1.25569982385825, -1.1775301913267, -0.116209006894853, 0.193229626637041, -0.781866803268726, -0.848825245514238, -0.108832029584476, -0.088671724993112, -1.77137785639109, 1.13837249119671, 0.205061948774459, -1.17617497382134, 0.175175059571124, 0.116209006894856, 0.755810948546608, 3.2612644802934, 3.81261603012274, 2.50974392774053, -2.39407231505496, 0.439164119977263, 1.66644174073764, -0.368404686208167, 0.291600036352429, 3.45638115553108, -0.75581094854661, -3.2612644802934, -7.26899718565381},
    {0.804449259426938, -0.351201920067466, -0.0835461193906462, 0.450426536556233, 1.82116810428009, 0.157022569763058, -0.590304184654241, 1.2092351384249, -2.24008613638041, 1.79704477580084, -0.0102059787798941, -1.2583453857965, 0.127571177548677, 0.0835461193906455, -0.835527183461996, -0.167187751689785, -0.157022569763057, -0.424375365985311, 0.215010166766905, 5.29376529317915, 4.02347989754958, -0.57799771410491, -4.58630261603316, 2.67154539958651, 0.757491936344025, -3.04525335454941, 1.49931635307386, 0.42437536598531, -0.215010166766903, -6.79308164625301},
    {0.915095482842407, 1.77751327294542, 0.2533490463638, -1.33875328318573, 4.22603467501402, 0.242772631084241, -1.16084886922723, 2.80603949367382, -3.9170828212427, 6.4987473391537, -5.27427327369883, -0.590935171541131, -0.23767163782812, -0.253349046363801, -0.392374307610201, -0.206087899454944, -0.242772631084243, -0.206159746646063, -0.157866311213965, 1.61858716705758, 2.86890598999896, 1.57642492101386, -6.50400549347185, 1.90492131055403, 1.36693676868218, -4.31858649661764, 0.28735112570311, 0.206159746646061, 0.157866311213966, -1.90593829276069},
    {0.868638985211495, -0.396701411583312, 6.32404851007064, -4.55659847811125, 2.0711722515106, 0.25080932251626, 0.152983559275674, 0.313131800353269, -0.183989831391415, -0.123047584380662, -0.164900157856107, -3.89068141543178, 6.89551449000027, -6.32404851007064, -0.588215719540758, -0.23151049072783, -0.250809322516256, -1.63687188049174, 7.37091908909549, -1.98365309137132, 0.94361129638903, -2.33891601188902, 0.875897867532155, 0.14266061350352, 0.07852693145215, 0.132423305683972, 3.00186832357338, 1.63687188049174, -7.37091908909548, -1.01821523220206},
    {0.894239071655412, 0.346390058705359, 1.75409916439269, 3.85712313652989, -1.73573567238647, 0.255773608793598, -0.21739042450695, -0.262418558203142, -1.12370401763527, -0.0670106237265757, -0.0499144889989242, -3.18811892297118, 3.99330340401987, -1.75409916439269, -0.481998258407619, -0.225065649048979, -0.255773608793594, -1.25340497060017, 3.36221484779204, 1.88623751611318, 4.55508874634731, -7.85042654054977, 0.368765849010345, 0.688664662667414, 0.442456073555925, 0.0557521539433479, 1.9528333494329, 1.25340497060017, -3.36221484779203, -3.83907086554608},
    {0.932314949394836, -0.351201920067466, -0.247959121416691, 3.44947832137329, 2.68448865880023, 0.219317728895973, -0.590016512172767, 0.405856522143415, -2.57966297056645, 2.06869785825764, -0.0701479170185638, -2.09232037220804, 1.05859400431274, 0.247959121416689, -0.316329095558074, -0.181067362668032, -0.219317728895969, -0.625244684383462, 0.552650055698515, 2.61901503288046, 6.55506925351398, -4.50807232568603, -7.14723754010617, 0.9910332833477, 0.771083874840792, -1.08056070993304, 0.803737073468092, 0.625244684383462, -0.552650055698514, -3.42275210634854},
    {0.971133168652244, 1.77751327294542, 0.180795646006105, -1.12170128065518, 6.2293767006513, 0.119844479565318, -0.509439025084949, 0.941793199445855, -4.13359857554116, 6.79832113905164, -5.41336900510815, -0.914445613287682, -0.205694659783392, -0.180795646006105, -0.138251176842042, -0.0934196017713603, -0.119844479565318, -0.133361950220937, -0.0443943701584066, 0.800772963624433, 4.39055137244058, 1.32739594043858, -9.7054824598042, 0.663788950819097, 0.602858626856308, -1.46733097342291, 0.146843660747412, 0.133361950220933, 0.0443943701584092, -0.947616624371845}};
    // Array of non-zero columns
    static const unsigned int nzc0[30] = {0, 3, 4, 5, 6, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34};
    
    const static double FE0_D100[64][30] = \
    {{-2.61665455821179, -0.262326815091423, 0.0894026163922226, 0.0784431029452177, 0.188263646324616, 0.100156729351644, 0.0853345325480427, 0.202156726410702, -1.99429993054149, 0.887996330144, -0.188263646324617, -2.23419141910734, 0.966009105862813, -0.202156726410702, 4.41532949092758, -2.85692904038522, 1.32058092276085, -0.0423045868392064, -0.0660004964643389, -0.0679684018579047, -0.478898927388318, 0.0660004964643383, 0.0679684018579051, 2.4823352112685, -0.577437897119232, -0.966439433089218, 2.78093176629567, -0.646897076539977, -1.05134363841086, 0.521203514227524},
    {-0.0971243045950519, -0.382897749059931, 0.587242812072386, 0.0261642079196749, 0.0303348329193278, 0.107010502091161, 0.0863780817689596, 0.174901641144903, -4.70183916807173, 0.189067653393767, -0.0303348329193292, -0.856794088890817, 0.624184812888232, -0.174901641144903, 1.02065872978734, -1.99327297180224, 1.45263629566988, -0.199591162931104, -0.274237126395048, -0.0151369709694204, -1.44228454877614, 0.274237126395048, 0.0151369709694214, 6.87668927270697, -2.76209291670763, -0.215231861313442, 1.25310681828587, -0.503323231486209, -0.710562894657191, 1.64187571170724},
    {0.157576792955305, -0.582912531849484, 1.77749109602363, -1.65041855010949, 0.100429811620989, 0.0948090485613348, 0.0733203934222949, 0.123642391765633, -0.619333549054625, -5.28014630426966, -0.100429811620989, -0.0330344408809355, 0.234572257037864, -0.123642391765632, -0.277396095652903, -0.616061333083648, 1.31879316763073, -0.340885504021956, -0.405965739936158, 0.4874174221337, -1.09058719324334, 0.405965739936158, -0.4874174221337, 3.62271720919892, -4.78087475616793, 6.93056485437915, 0.193230994281364, -0.255005601961764, -0.307892650460159, 1.4314726972653},
    {-0.332272064837323, -0.812452135616643, 3.58199787646156, -6.20750111711736, 5.48363837580172, 0.0524695959338468, 0.0397032273991096, 0.057893321235455, 1.61056772993438, -3.0096854928473, -5.48363837580172, 0.0235918168933197, 0.0192499727777504, -0.0578933212354551, 0.20085472261487, 0.203319042077584, 0.740550435761512, -0.26514701932711, -0.283046250318992, 0.648232493476418, -0.128555617225752, 0.283046250318993, -0.648232493476419, -1.44064905635805, -3.75191655003789, 9.21718660996467, -0.0211028248694117, -0.0549585879577554, -0.0589532001768589, 0.393702636552863},
    {0.0875743252958639, -0.404206071679305, 0.124544170479946, 0.096602629444801, 0.188263646324617, 0.676423762559448, -0.0349327507444046, -0.0356729062616831, -0.816407479188929, 0.644611219481137, -0.188263646324617, -4.43406878641156, -0.23309969083241, 0.0356729062616843, 0.691940663523539, -1.83313825823764, 1.45782934109754, -0.252573153805608, 0.0219392102667143, -0.32951303902035, -1.68537326176877, -0.0219392102667148, 0.32951303902035, 1.24583733679619, -0.55397402808721, -0.74121384892594, 6.76638638039196, -3.00874135653985, 0.268032441576811, 1.93794641557438},
    {0.347307955877069, -0.507063488468924, 0.733385228998834, 0.030208443445728, 0.0303348329193274, 0.64789763825398, 0.0918002982140732, 0.101992726716843, -1.46628619271142, 0.13486432870481, -0.0303348329193267, -1.29536745996238, 0.40983858091811, -0.101992726716841, -0.163916875982767, -1.09172173126643, 1.41539413984105, -1.11719146949869, -0.252432942684716, -0.0733845311844329, -4.98765445625719, 0.252432942684716, 0.073384531184433, 3.20129952353661, -2.46839855982402, -0.165072772150541, 2.82813768075803, -2.18066785904963, -0.501638879132186, 6.10484592575588},
    {-0.161328789785951, -0.671962873295983, 1.99407380623269, -1.78064479277004, 0.100429811620989, 0.515643003287643, 0.200525196246957, 0.243015108355066, 1.00650376582929, -3.5347743375574, -0.100429811620988, 0.260269516108357, 0.39806440936755, -0.243015108355065, -0.134798693685849, -0.174208449362686, 1.14229880613047, -1.78302436263182, -1.02908287239904, 2.36301563150651, -3.539498043552, 1.02908287239904, -2.36301563150651, 0.971280148876072, -3.97185772093805, 5.31541913032744, 0.251161121235694, -1.02707364063169, -0.598589605614508, 5.32252240618382},
    {-0.219620965508789, -0.854659261789437, 3.73314907767067, -6.38069328908851, 5.48363837580172, 0.265108269545323, 0.160614199238829, 0.206913148841662, 0.830265560700907, -0.68845779221869, -5.48363837580172, 0.0589610169540361, 0.0173297934874967, -0.206913148841662, 0.250067764210439, 0.231142423680279, 0.593070039407508, -1.32130585127541, -1.11394684744788, 3.14265236607617, -0.142564964025194, 1.11394684744788, -3.14265236607618, -1.60194359895973, -2.96147103941185, 7.0691510813072, -0.11376146159542, -0.21030782490394, -0.177943992726325, 1.4638708153006},
    {-0.0209772079821636, -0.63196013663153, 0.177976321311655, 0.121952669742182, 0.188263646324616, 2.03766259075905, -2.11540899410358, 0.399877762194953, 0.0418596436277114, 0.304854433244129, -0.188263646324616, 0.479253808900426, -5.28804995692452, -0.39987776219495, -0.221435706097504, -0.355221908876292, 1.22959495958749, -0.672146817541107, 1.05239842018011, -0.694619865554745, -1.68021690342269, -1.0523984201801, 0.694619865554745, 0.188464429826428, -0.408300394765793, -0.426807102986313, 2.15774163391977, -4.67465803357925, 7.4034589510281, 2.35236372096379},
    {-0.24472000199512, -0.699938941386467, 0.95117927307912, 0.0358540495445339, 0.0303348329193274, 1.77137785639109, -1.13837249119671, -0.205061948774458, 0.574312506192719, 0.059198453542908, -0.0303348329193258, 1.06954018544265, -1.87956149697762, 0.205061948774461, -0.063222127385256, -0.0659398754896112, 1.07382094625645, -2.79519475263195, 2.63740280717403, -0.154696012445138, -4.61513298523045, -2.63740280717402, 0.154696012445137, 0.177207165507365, -1.7026989447792, -0.0950525030874457, 0.330012288805908, -3.17093033063966, 3.01793398817433, 7.41032773786239},
    {-0.343330389268094, -0.804449259426937, 2.30843348521193, -1.96243590385965, 0.100429811620988, 1.2583453857965, -0.127571177548678, -0.0835461193906454, 1.11730697889861, -1.09829838147577, -0.100429811620987, 0.609052888212724, -0.0713965829656426, 0.0835461193906472, 0.187196108300409, 0.193403705764149, 0.767179834630472, -4.14238117307042, 0.594040120357496, 4.98128269867774, -2.31832822100891, -0.594040120357495, -4.98128269867774, -0.893370238508486, -2.53237022560205, 3.06073428533542, -0.486983196456216, -1.38041507755301, 0.198967760514318, 6.46070939407933},
    {0.119021627700701, -0.915095482842409, 3.94745604157909, -6.62246327900312, 5.48363837580173, 0.590935171541134, 0.237671637828118, 0.253349046363801, -0.852751660911762, 2.55189188053655, -5.48363837580173, -0.127657140121389, -0.0915840975261237, -0.253349046363801, 0.236448274510999, 0.197624493356887, 0.362001087273822, -2.8908771935652, -1.58820369192582, 6.62477202874601, 1.11396707344187, 1.58820369192582, -6.62477202874601, -1.32196241606077, -1.77274196460656, 4.07057139846657, -0.197898109282883, -0.265379922136862, -0.146087540301993, 1.77691012012333},
    {-0.160775122870769, -0.868638985211496, 0.230538830650141, 0.144815392289643, 0.188263646324615, 3.89068141543178, -6.89551449000026, 6.32404851007064, 0.0303812937688876, -0.00156579513538785, -0.188263646324615, 0.512728960713624, 0.0745567365024566, -6.32404851007063, 0.256593069933869, 0.231154317866362, 0.541666720282032, -1.17651941301842, 2.8888773474867, -1.02390281648172, 0.0127209431571273, -2.8888773474867, 1.02390281648172, -0.0968478758679895, -0.164072248551037, -0.143249597154256, -1.63445016920143, -2.76896020694397, 6.8209577534978, 1.1637984698613},
    {-0.0231092835261111, -0.894239071655411, 1.16137946239125, 0.0409457150541378, 0.0303348329193273, 3.18811892297117, -3.99330340401987, 1.75409916439269, -0.0598673982106507, -0.00904317013277374, -0.0303348329193269, -0.164342827891449, 0.881951188948033, -1.75409916439269, 0.253919768891326, 0.219105772638562, 0.444322813651634, -4.70537083058523, 8.10128917326997, -0.22802930163043, 1.03921665313447, -8.10128917326996, 0.228029301630428, -0.444872186596043, -0.656639877584553, -0.0319025449213655, -1.22122482988477, -1.80255126519495, 3.11135221507183, 3.66615417745076},
    {0.257570292859131, -0.932314949394834, 2.60395904918184, -2.12638987338709, 0.100429811620986, 2.09232037220803, -1.05859400431274, -0.24795912141669, -0.940209564617415, 1.09911326458012, -0.100429811620987, -0.755472566595071, 0.547178448555985, 0.247959121416692, 0.210795755610048, 0.171915883982976, 0.29203301694268, -6.61620589129758, 4.5493068256278, 7.34264831426107, 3.41986187355893, -4.5493068256278, -7.34264831426107, -0.739559695031233, -0.924189789533191, 1.02727660880697, -0.594247369928497, -0.742600435684467, 0.51141555575675, 3.19634401773865},
    {0.643627477463275, -0.971133168652244, 4.14403873378693, -6.84051106649681, 5.48363837580173, 0.914445613287684, 0.20569465978339, 0.180795646006104, -2.96400307709653, 5.47430204856335, -5.48363837580173, -0.654052673186591, -0.164612656347538, -0.180795646006104, 0.112466555263441, 0.0872281173292563, 0.127811018596272, -4.40159593464864, -1.33070830716112, 9.7652299842665, 3.52249494339832, 1.33070830716112, -9.7652299842665, -0.564628117758576, -0.615407538931826, 1.36620901793346, -0.124593841561753, -0.13579909853934, -0.0410820034358509, 0.879100991250323},
    {0.26052963780404, 0.242112183715197, -0.116156852148898, -0.213998984901441, 0.188263646324617, -0.13012919389268, -0.232799349549862, 0.202156726410702, -0.635906402027004, 0.595554242297346, -0.188263646324618, -0.712398674345034, 0.647875223764909, -0.202156726410702, -2.97164439262547, 3.78990513748002, -1.32090256637378, 0.115410256610947, -0.0660004964643385, -0.0679684018579072, -0.321184083938179, 0.0660004964643383, 0.0679684018579075, -0.440011314301597, 1.1920745684775, -0.381555257395905, -0.492939646473264, 1.33546751471098, -0.415075874215047, 0.205773827327231},
    {0.302516099307213, 0.347940059792459, -0.631043869767728, -0.0389643999770739, 0.0303348329193268, -0.114992163304794, -0.128636423377715, 0.174901641144902, -0.993419927901682, 0.123939045497016, -0.0303348329193278, -0.18102625198079, 0.409170307741555, -0.174901641144902, -1.07649924949926, 1.73295958391655, -1.30691649351697, 0.297236206355322, -0.274237126395049, -0.0151369709694208, -0.945457179489713, 0.274237126395049, 0.0151369709694213, -1.75843588947322, 3.38289968714263, -0.0849746455199422, -0.320431520930141, 0.616449936215724, -0.28053388436384, 0.648220973134392},
    {-0.21843793762351, 0.264871803916117, -0.720643717372982, 0.446752557129665, 0.100429811620988, -0.0384381926574374, -0.019847131049874, 0.123642391765631, 1.17789027189967, -3.18297519703051, -0.100429811620988, 0.0628271254006758, 0.141404732565693, -0.123642391765632, 0.202561688048967, 0.399851627014656, -0.64884718135623, 0.0922744540166135, -0.405965739936158, 0.487417422133698, -0.657427235204762, 0.405965739936159, -0.487417422133698, -2.46986524610629, 2.0126186915796, 2.73622263990084, -0.131739379500629, 0.107350446757391, -0.121557601515819, 0.56515278118815},
    {-0.184678583593711, -0.251073694749743, 1.4200575783802, -3.41840414528315, 5.48363837580172, 0.0208011980772058, 0.0218641405875827, 0.0578933212354537, 0.629994022019081, -0.220588521013091, -5.48363837580172, 0.00922823879748693, 0.00141088596622018, -0.0578933212354539, 0.297391457743573, 0.128843568956239, 0.00951725164364141, -0.146013613671032, -0.283046250318991, 0.648232493476417, -0.00942221156966311, 0.283046250318992, -0.648232493476419, -1.64144193860881, -0.408609661790478, 3.63899266629624, -0.0240440665343851, -0.00598537034030783, -0.023275026553802, 0.155435825240695},
    {0.259550726522874, 0.354977542438394, -0.126071847127061, -0.127686775663471, 0.188263646324617, -0.684720873388753, 0.046173176995739, -0.0356729062616831, -0.147079344555395, 0.420321814372864, -0.188263646324617, -0.798816702986172, -0.151993763092264, 0.0356729062616822, -0.850439221133414, 1.49487592151293, -1.25896496934079, 0.33384444930682, 0.0219392102667154, -0.329513039020352, -1.09895565865634, -0.0219392102667151, 0.329513039020352, -0.343434950077882, 0.616586141760339, -0.292635038709393, -1.86526242240701, 3.34879999878193, 0.105820586096526, 0.765111209349516},
    {-0.0203093940389607, 0.336177667614903, -0.493827561454053, -0.0197421530236542, 0.0303348329193267, -0.436264187114288, -0.0599943369546779, 0.101992726716842, 0.204474492569863, 0.0849137322354264, -0.0303348329193266, 0.180639772360899, 0.25804394574936, -0.101992726716843, -0.0896333311601752, 0.705804384920304, -0.932039327336072, 0.730119212768747, -0.252432942684715, -0.073384531184431, -3.14034377398974, 0.252432942684716, 0.0733845311844311, -1.36743463747884, 1.65678770636303, -0.0651715792117738, -1.20803860925679, 1.46366302401018, -0.198049608794682, 2.410224561221},
    {-0.350400156294149, 0.118117019922264, -0.177195303849184, -0.172212629272512, 0.100429811620989, -0.0458205299922568, 0.0193935204939744, 0.243015108355065, 1.3618387575883, -1.92634217405987, -0.100429811620988, 0.352154782215919, 0.216932733614567, -0.243015108355065, 0.346076228564296, 0.221335698879862, -0.335128791072274, -0.172442766121872, -1.02908287239904, 2.36301563150651, -1.92891644704204, 1.02908287239904, -2.36301563150651, -1.91065894472384, 0.726015490984721, 2.09855480333238, -0.494072944259331, 0.187738692035668, -0.236326254108541, 2.10135921316392},
    {-0.022384432501824, -0.394442721463883, 2.00482142866546, -4.24158634587039, 5.48363837580172, 0.142371689060035, 0.106768804513662, 0.206913148841661, -0.203161865393721, 1.45064915099943, -5.48363837580172, -0.0144274684593466, -0.0365156012376728, -0.206913148841661, 0.243308032812256, 0.113168827781303, 0.0603502933721475, -0.87834230601124, -1.11394684744788, 3.14265236607617, 0.300398581238981, 1.11394684744788, -3.14265236607618, -1.26341639577569, -0.538243167496056, 2.79093719487097, -0.0897210712539412, -0.0382231493467474, -0.0702532032759877, 0.577943724772259},
    {-0.309054780062581, 0.192468191903714, -0.041058767997757, -0.00719806234883366, 0.188263646324616, -0.47008453121796, 0.124858651024475, 0.399877762194953, 0.127851137302471, 0.175703701153112, -0.188263646324616, 1.46377606721657, -3.04778231179647, -0.399877762194953, 0.303610930774562, 0.28334586215607, -0.470370204771765, 0.0396723967622823, 1.05239842018011, -0.694619865554745, -0.968397689119294, -1.0523984201801, 0.694619865554744, -0.202553646832503, 0.11576127752779, -0.168505638804279, -2.31905000468952, 1.32535846869091, 2.92292366077199, 0.92872529235701},
    {-0.358579623296544, 0.0579729019650721, 0.00912774663570574, 0.00709140647947526, 0.030334832919327, 0.0169985708549941, -0.225153425141062, -0.205061948774459, 0.593144251553415, 0.03043581047785, -0.0303348329193264, 1.10461047941694, -0.96634243092197, 0.20506194877446, 0.358045759337144, 0.191015058321398, -0.248454096327071, -0.55284863026671, 2.63740280717403, -0.154696012445138, -2.37278686286521, -2.63740280717403, 0.154696012445137, -0.802507851657444, 0.200235853468325, -0.0375272169573271, -1.49450758467877, 0.372898534406833, 1.19149585606303, 2.92563549313191},
    {-0.209120412751909, -0.225565484443057, 0.85293920508735, -1.03626557791776, 0.100429811620988, 0.464943919745674, -0.0673640447405841, -0.0835461193906456, 0.499560744523662, -0.172128055533884, -0.100429811620988, 0.272314520571383, -0.0111894501575488, 0.0835461193906462, 0.306151380564782, 0.131747006670728, -0.003212490040545, -2.1873871201729, 0.594040120357497, 4.98128269867774, -0.363334168111396, -0.594040120357495, -4.98128269867774, -1.11337204988317, -0.239127899727842, 1.20839363345164, -0.60690792722436, -0.130350513092698, 0.0785534948981324, 2.5507212882843},
    {0.312478109057609, -0.625377600303054, 2.89580215412672, -5.3907188388044, 5.48363837580173, 0.433502317612515, 0.193465923707228, 0.253349046363801, -1.67399695237152, 3.78363632073527, -5.48363837580173, -0.250597768737479, -0.135789811647015, -0.253349046363801, 0.148831317371499, 0.0822068461045161, 0.0818613277694294, -2.35318875945021, -1.58820369192582, 6.62477202874601, 1.65165550755686, 1.58820369192582, -6.62477202874601, -0.73112572059362, -0.490679481161585, 1.60708251806913, -0.109449705979321, -0.0734548428957161, -0.0576761120602109, 0.701533251893346},
    {0.0441090754128548, -0.445188683796847, 0.134404752307828, 0.101468432469229, 0.188263646324615, 2.26827762800339, -4.83151020970038, 6.32404851007064, -0.0313921455951167, -0.044912754955803, -0.188263646324615, -0.52978857016416, 2.13856101680234, -6.32404851007064, 0.222931063779606, 0.107276036738665, 0.070872507865721, -0.824356988032229, 2.8888773474867, -1.02390281648172, 0.364883368143324, -2.8888773474867, 1.02390281648172, -0.0694350754822934, -0.0335775312304168, -0.0565556775134264, -1.17181889487425, -0.566670162964982, 2.69294919289804, 0.459473619888905},
    {0.182854617686688, -0.542293065584037, 0.773943947209463, 0.0312920869787561, 0.030334832919327, 2.12456429902516, -3.0518162226727, 1.75409916439269, -0.339061320545859, -0.0186967982081548, -0.0303348329193272, -0.930761949117099, 1.82343837029521, -1.75409916439269, 0.183144664324039, 0.0947102842061131, 0.0815834993671972, -3.5960020017551, 8.10128917326997, -0.228029301630431, 2.14858548196461, -8.10128917326996, 0.228029301630429, -0.273919857107416, -0.160962769556186, -0.0125952887706017, -0.751941211379482, -0.441861138528582, 1.22837785237749, 1.4474165197905},
    {0.43095300139955, -0.696647594003244, 2.0533274054127, -1.81553861257372, 0.100429811620986, 1.64987954111948, -0.90384097193212, -0.24795912141669, -1.39647055428432, 1.40996452539349, -0.100429811620987, -1.1220851536954, 0.701931480936604, 0.247959121416691, 0.119529574241439, 0.0699674764905253, 0.0761975418717299, -5.64900040896771, 4.5493068256278, 7.34264831426107, 4.3870673558888, -4.5493068256278, -7.34264831426107, -0.377669359466565, -0.279187491661818, 0.405574087180228, -0.303463026816395, -0.224331360607692, 0.201909490995514, 1.26193305307891},
    {0.736873916833948, -0.866122121955717, 3.77398544236569, -6.42709973003854, 5.48363837580173, 0.832787687104742, 0.193263351160871, 0.180795646006104, -3.30810129762872, 5.88771338502163, -5.48363837580173, -0.729983215471415, -0.177043964970057, -0.180795646006104, 0.0514183350265495, 0.0345962863875469, 0.0432335837076722, -4.1355822347652, -1.33070830716112, 9.7652299842665, 3.78850864328175, 1.33070830716112, -9.7652299842665, -0.246484968115446, -0.219399176621526, 0.539386345016911, -0.0543906831750475, -0.0484137884582806, -0.0162193861908118, 0.347073591483449},
    {-0.242112183715197, -0.260529637804041, 0.635906402027004, -0.595554242297346, 0.188263646324617, 0.712398674345034, -0.647875223764908, 0.202156726410701, 0.1161568521489, 0.213998984901441, -0.188263646324617, 0.130129193892681, 0.232799349549861, -0.202156726410701, 1.32090256637378, -3.78990513748002, 2.97164439262548, 0.321184083938182, -0.0660004964643384, -0.0679684018579034, -0.115410256610939, 0.0660004964643381, 0.0679684018579036, -1.1920745684775, 0.440011314301597, 0.381555257395906, -1.33546751471098, 0.492939646473264, 0.415075874215047, -0.205773827327243},
    {-0.347940059792458, -0.302516099307213, 0.993419927901681, -0.123939045497015, 0.0303348329193264, 0.181026251980789, -0.409170307741554, 0.174901641144902, 0.631043869767727, 0.0389643999770736, -0.0303348329193267, 0.114992163304793, 0.128636423377716, -0.174901641144902, 1.30691649351696, -1.73295958391655, 1.07649924949926, 0.94545717948971, -0.274237126395051, -0.015136970969423, -0.297236206355322, 0.274237126395051, 0.0151369709694233, -3.38289968714263, 1.75843588947322, 0.0849746455199409, -0.616449936215723, 0.320431520930141, 0.280533884363838, -0.648220973134389},
    {-0.264871803916117, 0.218437937623509, -1.17789027189967, 3.18297519703051, 0.100429811620988, -0.062827125400675, -0.141404732565694, 0.123642391765631, 0.720643717372981, -0.446752557129665, -0.100429811620988, 0.0384381926574374, 0.0198471310498721, -0.123642391765631, 0.648847181356229, -0.399851627014657, -0.202561688048965, 0.657427235204757, -0.405965739936159, 0.487417422133695, -0.0922744540166105, 0.405965739936159, -0.487417422133695, -2.0126186915796, 2.46986524610628, -2.73622263990084, -0.107350446757389, 0.131739379500627, 0.121557601515821, -0.565152781188147},
    {0.251073694749742, 0.184678583593709, -0.62999402201908, 0.220588521013088, 5.48363837580172, -0.00922823879748637, -0.00141088596621888, 0.0578933212354524, -1.4200575783802, 3.41840414528315, -5.48363837580172, -0.0208011980772036, -0.0218641405875852, -0.0578933212354528, -0.00951725164363958, -0.128843568956241, -0.297391457743571, 0.00942221156965888, -0.283046250318989, 0.648232493476417, 0.14601361367104, 0.28304625031899, -0.648232493476419, 0.408609661790474, 1.64144193860881, -3.63899266629624, 0.00598537034030681, 0.0240440665343836, 0.023275026553805, -0.1554358252407},
    {-0.354977542438394, -0.259550726522875, 0.147079344555396, -0.420321814372865, 0.188263646324617, 0.798816702986173, 0.151993763092263, -0.0356729062616824, 0.126071847127062, 0.127686775663471, -0.188263646324617, 0.684720873388752, -0.0461731769957382, 0.0356729062616824, 1.25896496934079, -1.49487592151293, 0.850439221133414, 1.09895565865634, 0.0219392102667156, -0.329513039020352, -0.333844449306821, -0.0219392102667155, 0.329513039020352, -0.61658614176034, 0.343434950077882, 0.292635038709393, -3.34879999878194, 1.86526242240701, -0.105820586096523, -0.765111209349515},
    {-0.336177667614904, 0.0203093940389604, -0.204474492569864, -0.0849137322354267, 0.0303348329193266, -0.180639772360899, -0.25804394574936, 0.101992726716842, 0.493827561454052, 0.019742153023654, -0.0303348329193272, 0.436264187114288, 0.0599943369546782, -0.101992726716843, 0.932039327336072, -0.705804384920305, 0.0896333311601749, 3.14034377398974, -0.252432942684715, -0.0733845311844317, -0.73011921276875, 0.252432942684715, 0.0733845311844321, -1.65678770636303, 1.36743463747884, 0.0651715792117727, -1.46366302401019, 1.2080386092568, 0.198049608794683, -2.41022456122099},
    {-0.118117019922264, 0.350400156294148, -1.3618387575883, 1.92634217405987, 0.100429811620989, -0.35215478221592, -0.216932733614566, 0.243015108355065, 0.177195303849183, 0.172212629272513, -0.100429811620989, 0.0458205299922568, -0.019393520493975, -0.243015108355066, 0.335128791072273, -0.221335698879861, -0.346076228564296, 1.92891644704204, -1.02908287239904, 2.36301563150651, 0.172442766121872, 1.02908287239904, -2.36301563150651, -0.726015490984718, 1.91065894472384, -2.09855480333238, -0.187738692035668, 0.494072944259331, 0.236326254108542, -2.10135921316391},
    {0.394442721463881, 0.022384432501823, 0.20316186539372, -1.45064915099943, 5.48363837580173, 0.0144274684593464, 0.0365156012376744, 0.20691314884166, -2.00482142866546, 4.2415863458704, -5.48363837580172, -0.142371689060033, -0.106768804513663, -0.206913148841661, -0.0603502933721459, -0.113168827781304, -0.243308032812255, -0.300398581238982, -1.11394684744788, 3.14265236607617, 0.878342306011248, 1.11394684744788, -3.14265236607618, 0.538243167496053, 1.26341639577569, -2.79093719487097, 0.0382231493467463, 0.0897210712539407, 0.0702532032759902, -0.577943724772267},
    {-0.192468191903715, 0.309054780062581, -0.12785113730247, -0.175703701153111, 0.188263646324616, -1.46377606721657, 3.04778231179647, 0.399877762194953, 0.0410587679977578, 0.00719806234883319, -0.188263646324616, 0.47008453121796, -0.124858651024474, -0.399877762194954, 0.470370204771765, -0.28334586215607, -0.303610930774562, 0.968397689119293, 1.0523984201801, -0.694619865554743, -0.0396723967622827, -1.0523984201801, 0.694619865554743, -0.115761277527791, 0.202553646832504, 0.168505638804278, -1.32535846869091, 2.31905000468952, -2.92292366077199, -0.928725292357012},
    {-0.0579729019650722, 0.358579623296543, -0.593144251553413, -0.0304358104778513, 0.0303348329193265, -1.10461047941694, 0.966342430921969, -0.20506194877446, -0.0091277466357058, -0.00709140647947552, -0.0303348329193273, -0.0169985708549942, 0.225153425141061, 0.205061948774459, 0.248454096327071, -0.191015058321397, -0.358045759337144, 2.3727868628652, 2.63740280717403, -0.154696012445138, 0.552848630266709, -2.63740280717403, 0.154696012445138, -0.200235853468324, 0.802507851657443, 0.0375272169573274, -0.372898534406833, 1.49450758467877, -1.19149585606303, -2.92563549313191},
    {0.225565484443058, 0.209120412751909, -0.499560744523664, 0.172128055533887, 0.100429811620988, -0.272314520571384, 0.0111894501575487, -0.083546119390646, -0.852939205087354, 1.03626557791776, -0.100429811620989, -0.464943919745675, 0.0673640447405835, 0.0835461193906454, 0.00321249004054333, -0.131747006670729, -0.306151380564782, 0.3633341681114, 0.594040120357496, 4.98128269867774, 2.18738712017291, -0.594040120357496, -4.98128269867774, 0.239127899727846, 1.11337204988317, -1.20839363345165, 0.130350513092699, 0.60690792722436, -0.0785534948981309, -2.55072128828431},
    {0.625377600303052, -0.312478109057611, 1.67399695237152, -3.78363632073527, 5.48363837580173, 0.250597768737479, 0.135789811647016, 0.2533490463638, -2.89580215412672, 5.3907188388044, -5.48363837580173, -0.433502317612514, -0.193465923707229, -0.253349046363801, -0.0818613277694267, -0.0822068461045192, -0.148831317371496, -1.65165550755686, -1.58820369192582, 6.62477202874601, 2.35318875945022, 1.58820369192582, -6.62477202874601, 0.49067948116158, 0.731125720593618, -1.60708251806913, 0.0734548428957144, 0.10944970597932, 0.0576761120602149, -0.701533251893361},
    {0.445188683796847, -0.0441090754128546, 0.0313921455951195, 0.0449127549558041, 0.188263646324615, 0.529788570164158, -2.13856101680234, 6.32404851007064, -0.134404752307826, -0.101468432469229, -0.188263646324615, -2.26827762800339, 4.83151020970038, -6.32404851007064, -0.0708725078657204, -0.107276036738667, -0.222931063779606, -0.364883368143319, 2.8888773474867, -1.02390281648172, 0.824356988032234, -2.8888773474867, 1.02390281648172, 0.0335775312304157, 0.0694350754822916, 0.0565556775134243, 0.566670162964989, 1.17181889487425, -2.69294919289805, -0.459473619888916},
    {0.542293065584038, -0.182854617686688, 0.339061320545862, 0.0186967982081534, 0.0303348329193266, 0.930761949117096, -1.8234383702952, 1.75409916439269, -0.773943947209463, -0.0312920869787567, -0.0303348329193275, -2.12456429902517, 3.0518162226727, -1.75409916439269, -0.0815834993671986, -0.0947102842061129, -0.183144664324038, -2.1485854819646, 8.10128917326997, -0.228029301630432, 3.59600200175511, -8.10128917326996, 0.22802930163043, 0.160962769556189, 0.273919857107415, 0.0125952887706042, 0.441861138528588, 0.751941211379484, -1.2283778523775, -1.44741651979051},
    {0.696647594003246, -0.430953001399549, 1.39647055428432, -1.40996452539349, 0.100429811620986, 1.1220851536954, -0.701931480936606, -0.24795912141669, -2.0533274054127, 1.81553861257372, -0.100429811620988, -1.64987954111949, 0.903840971932118, 0.247959121416691, -0.0761975418717293, -0.0699674764905292, -0.119529574241438, -4.38706735588879, 4.5493068256278, 7.34264831426107, 5.64900040896773, -4.5493068256278, -7.34264831426107, 0.27918749166182, 0.377669359466565, -0.405574087180231, 0.224331360607693, 0.303463026816396, -0.201909490995512, -1.26193305307894},
    {0.866122121955716, -0.736873916833949, 3.30810129762872, -5.88771338502162, 5.48363837580173, 0.729983215471415, 0.177043964970055, 0.180795646006104, -3.77398544236569, 6.42709973003854, -5.48363837580173, -0.832787687104741, -0.193263351160873, -0.180795646006104, -0.0432335837076686, -0.0345962863875536, -0.0514183350265461, -3.78850864328174, -1.33070830716112, 9.7652299842665, 4.13558223476522, 1.33070830716112, -9.7652299842665, 0.219399176621523, 0.246484968115444, -0.539386345016918, 0.0484137884582789, 0.0543906831750461, 0.0162193861908198, -0.347073591483483},
    {0.262326815091422, 2.61665455821179, 1.99429993054149, -0.887996330144003, 0.188263646324617, 2.23419141910733, -0.966009105862809, 0.202156726410699, -0.0894026163922187, -0.0784431029452176, -0.188263646324617, -0.100156729351642, -0.0853345325480452, -0.202156726410698, -1.32058092276085, 2.85692904038521, -4.41532949092758, 0.478898927388331, -0.0660004964643406, -0.0679684018579049, 0.0423045868392021, 0.0660004964643396, 0.0679684018579052, 0.577437897119224, -2.48233521126849, 0.96643943308922, 0.646897076539972, -2.78093176629566, 1.05134363841085, -0.521203514227533},
    {0.382897749059931, 0.0971243045950518, 4.70183916807172, -0.189067653393767, 0.030334832919327, 0.856794088890815, -0.62418481288823, 0.174901641144902, -0.587242812072384, -0.0261642079196766, -0.0303348329193268, -0.10701050209116, -0.0863780817689599, -0.174901641144901, -1.45263629566988, 1.99327297180224, -1.02065872978734, 1.44228454877613, -0.274237126395054, -0.0151369709694215, 0.199591162931102, 0.274237126395052, 0.0151369709694221, 2.76209291670763, -6.87668927270697, 0.215231861313442, 0.50332323148621, -1.25310681828586, 0.710562894657192, -1.64187571170724},
    {0.582912531849486, -0.157576792955306, 0.61933354905463, 5.28014630426966, 0.10042981162099, 0.0330344408809374, -0.234572257037864, 0.123642391765631, -1.77749109602363, 1.65041855010949, -0.100429811620988, -0.0948090485613346, -0.0733203934222978, -0.123642391765631, -1.31879316763074, 0.616061333083651, 0.277396095652905, 1.09058719324332, -0.405965739936159, 0.487417422133696, 0.340885504021962, 0.405965739936158, -0.487417422133696, 4.78087475616793, -3.62271720919893, -6.93056485437915, 0.255005601961768, -0.193230994281369, 0.307892650460163, -1.43147269726529},
    {0.812452135616642, 0.332272064837322, -1.61056772993438, 3.0096854928473, 5.48363837580173, -0.0235918168933203, -0.019249972777746, 0.0578933212354516, -3.58199787646155, 6.20750111711736, -5.48363837580172, -0.0524695959338433, -0.0397032273991148, -0.057893321235452, -0.740550435761511, -0.203319042077585, -0.200854722614868, 0.128555617225735, -0.283046250318988, 0.648232493476418, 0.265147019327127, 0.283046250318989, -0.64823249347642, 3.75191655003788, 1.44064905635805, -9.21718660996466, 0.0549585879577549, 0.0211028248694096, 0.0589532001768622, -0.393702636552865},
    {0.404206071679303, -0.0875743252958657, 0.816407479188931, -0.644611219481139, 0.188263646324617, 4.43406878641156, 0.233099690832405, -0.0356729062616794, -0.124544170479949, -0.0966026294448029, -0.188263646324617, -0.676423762559449, 0.0349327507444075, 0.0356729062616829, -1.45782934109754, 1.83313825823764, -0.691940663523536, 1.68537326176876, 0.0219392102667156, -0.329513039020352, 0.252573153805609, -0.0219392102667166, 0.329513039020352, 0.553974028087213, -1.2458373367962, 0.741213848925942, 3.00874135653985, -6.76638638039196, -0.268032441576814, -1.93794641557437},
    {0.507063488468923, -0.347307955877069, 1.46628619271142, -0.134864328704811, 0.0303348329193267, 1.29536745996238, -0.40983858091811, 0.101992726716843, -0.733385228998833, -0.0302084434457294, -0.0303348329193277, -0.647897638253979, -0.0918002982140729, -0.101992726716842, -1.41539413984104, 1.09172173126642, 0.163916875982768, 4.98765445625719, -0.252432942684716, -0.0733845311844312, 1.11719146949869, 0.252432942684714, 0.0733845311844322, 2.46839855982402, -3.2012995235366, 0.165072772150541, 2.18066785904963, -2.82813768075802, 0.501638879132186, -6.10484592575588},
    {0.671962873295984, 0.161328789785951, -1.00650376582928, 3.5347743375574, 0.10042981162099, -0.260269516108357, -0.398064409367548, 0.243015108355065, -1.99407380623269, 1.78064479277004, -0.10042981162099, -0.515643003287643, -0.200525196246959, -0.243015108355066, -1.14229880613047, 0.174208449362688, 0.13479869368585, 3.53949804355199, -1.02908287239904, 2.36301563150651, 1.78302436263182, 1.02908287239904, -2.36301563150651, 3.97185772093805, -0.971280148876077, -5.31541913032744, 1.0270736406317, -0.251161121235695, 0.59858960561451, -5.32252240618381},
    {0.854659261789436, 0.219620965508789, -0.830265560700908, 0.688457792218688, 5.48363837580173, -0.0589610169540378, -0.0173297934874928, 0.20691314884166, -3.73314907767067, 6.38069328908851, -5.48363837580173, -0.265108269545321, -0.160614199238832, -0.20691314884166, -0.593070039407507, -0.231142423680281, -0.250067764210438, 0.142564964025187, -1.11394684744788, 3.14265236607618, 1.32130585127542, 1.11394684744788, -3.14265236607618, 2.96147103941184, 1.60194359895973, -7.0691510813072, 0.210307824903939, 0.11376146159542, 0.177943992726327, -1.46387081530061},
    {0.631960136631531, 0.0209772079821636, -0.0418596436277107, -0.304854433244127, 0.188263646324616, -0.479253808900422, 5.28804995692452, 0.399877762194954, -0.177976321311655, -0.121952669742184, -0.188263646324616, -2.03766259075905, 2.11540899410358, -0.399877762194954, -1.22959495958749, 0.355221908876295, 0.221435706097504, 1.68021690342268, 1.0523984201801, -0.69461986555474, 0.672146817541108, -1.0523984201801, 0.69461986555474, 0.408300394765794, -0.188464429826428, 0.426807102986311, 4.67465803357926, -2.15774163391978, -7.4034589510281, -2.35236372096379},
    {0.699938941386467, 0.244720001995119, -0.574312506192714, -0.0591984535429097, 0.0303348329193259, -1.06954018544265, 1.87956149697762, -0.20506194877446, -0.951179273079121, -0.0358540495445338, -0.0303348329193277, -1.77137785639109, 1.13837249119671, 0.205061948774459, -1.07382094625645, 0.0659398754896116, 0.063222127385257, 4.61513298523044, 2.63740280717403, -0.154696012445139, 2.79519475263195, -2.63740280717403, 0.154696012445139, 1.7026989447792, -0.177207165507368, 0.0950525030874459, 3.17093033063966, -0.33001228880591, -3.01793398817433, -7.41032773786239},
    {0.804449259426938, 0.343330389268094, -1.11730697889861, 1.09829838147578, 0.100429811620988, -0.609052888212725, 0.0713965829656427, -0.0835461193906464, -2.30843348521194, 1.96243590385965, -0.10042981162099, -1.2583453857965, 0.127571177548677, 0.0835461193906451, -0.767179834630475, -0.193403705764149, -0.187196108300409, 2.31832822100892, 0.594040120357496, 4.98128269867774, 4.14238117307043, -0.594040120357496, -4.98128269867774, 2.53237022560206, 0.893370238508484, -3.06073428533543, 1.38041507755301, 0.486983196456215, -0.198967760514317, -6.46070939407934},
    {0.915095482842407, -0.119021627700702, 0.852751660911762, -2.55189188053655, 5.48363837580173, 0.127657140121388, 0.0915840975261254, 0.2533490463638, -3.94745604157908, 6.62246327900312, -5.48363837580173, -0.590935171541131, -0.23767163782812, -0.253349046363801, -0.362001087273819, -0.19762449335689, -0.236448274510997, -1.11396707344187, -1.58820369192582, 6.62477202874601, 2.89087719356521, 1.58820369192582, -6.62477202874601, 1.77274196460655, 1.32196241606077, -4.07057139846657, 0.26537992213686, 0.197898109282883, 0.146087540301997, -1.77691012012334},
    {0.868638985211495, 0.160775122870769, -0.0303812937688848, 0.00156579513539027, 0.188263646324615, -0.512728960713624, -0.0745567365024569, 6.32404851007064, -0.230538830650139, -0.144815392289644, -0.188263646324615, -3.89068141543178, 6.89551449000027, -6.32404851007064, -0.541666720282032, -0.231154317866364, -0.256593069933869, -0.0127209431571239, 2.8888773474867, -1.02390281648172, 1.17651941301843, -2.8888773474867, 1.02390281648171, 0.164072248551037, 0.0968478758679872, 0.143249597154254, 2.76896020694398, 1.63445016920142, -6.82095775349781, -1.16379846986131},
    {0.894239071655411, 0.0231092835261104, 0.0598673982106565, 0.00904317013277191, 0.0303348329193262, 0.16434282789145, -0.881951188948033, 1.75409916439269, -1.16137946239125, -0.0409457150541378, -0.0303348329193277, -3.18811892297118, 3.99330340401987, -1.75409916439269, -0.444322813651636, -0.219105772638561, -0.253919768891324, -1.03921665313447, 8.10128917326997, -0.228029301630433, 4.70537083058524, -8.10128917326996, 0.228029301630431, 0.656639877584558, 0.444872186596039, 0.0319025449213678, 1.80255126519496, 1.22122482988477, -3.11135221507184, -3.66615417745077},
    {0.932314949394836, -0.257570292859131, 0.940209564617416, -1.09911326458012, 0.100429811620986, 0.75547256659507, -0.547178448555988, -0.24795912141669, -2.60395904918184, 2.1263898733871, -0.100429811620988, -2.09232037220804, 1.05859400431274, 0.24795912141669, -0.29203301694268, -0.17191588398298, -0.210795755610045, -3.41986187355891, 4.5493068256278, 7.34264831426106, 6.6162058912976, -4.5493068256278, -7.34264831426107, 0.924189789533195, 0.739559695031231, -1.02727660880698, 0.74260043568447, 0.594247369928497, -0.511415555756748, -3.19634401773868},
    {0.971133168652244, -0.643627477463275, 2.96400307709653, -5.47430204856334, 5.48363837580173, 0.654052673186591, 0.164612656347536, 0.180795646006104, -4.14403873378693, 6.84051106649682, -5.48363837580173, -0.914445613287682, -0.205694659783393, -0.180795646006104, -0.127811018596268, -0.087228117329263, -0.112466555263438, -3.5224949433983, -1.33070830716112, 9.7652299842665, 4.40159593464866, 1.33070830716112, -9.7652299842665, 0.615407538931822, 0.564628117758574, -1.36620901793347, 0.135799098539338, 0.124593841561752, 0.0410820034358589, -0.879100991250358}};
    // Array of non-zero columns
    static const unsigned int nzc1[30] = {0, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34};
    
    // Number of operations to compute geometry constants: 36
    const double G0 = det*(Jinv_00*Jinv_20 + Jinv_01*Jinv_21 + Jinv_02*Jinv_22);
    const double G1 = det*(Jinv_20*Jinv_20 + Jinv_21*Jinv_21 + Jinv_22*Jinv_22);
    const double G2 = det*(Jinv_00*Jinv_00 + Jinv_01*Jinv_01 + Jinv_02*Jinv_02);
    const double G3 = det*(Jinv_00*Jinv_10 + Jinv_01*Jinv_11 + Jinv_02*Jinv_12);
    const double G4 = det*(Jinv_10*Jinv_10 + Jinv_11*Jinv_11 + Jinv_12*Jinv_12);
    const double G5 = det*(Jinv_10*Jinv_20 + Jinv_11*Jinv_21 + Jinv_12*Jinv_22);
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('simplify expressions', True), ('ignore zero tables', True), ('non zero columns', True), ('remove zero terms', True), ('ignore ones', True)
    // Total number of operations to compute element tensor: 1555620
    
    // Loop quadrature points for integral
    // Number of operations to compute element tensor for following IP loop = 1555584
    for (unsigned int ip = 0; ip < 64; ip++)
    {
      
      // Number of operations to compute ip constants: 6
      // Number of operations: 1
      const double Gip0 = W64[ip]*G0;
      
      // Number of operations: 1
      const double Gip1 = W64[ip]*G1;
      
      // Number of operations: 1
      const double Gip2 = W64[ip]*G2;
      
      // Number of operations: 1
      const double Gip3 = W64[ip]*G3;
      
      // Number of operations: 1
      const double Gip4 = W64[ip]*G4;
      
      // Number of operations: 1
      const double Gip5 = W64[ip]*G5;
      
      
      // Number of operations for primary indices = 24300
      for (unsigned int j = 0; j < 30; j++)
      {
        for (unsigned int k = 0; k < 30; k++)
        {
          // Number of operations to compute entry = 3
          A[nzc0[j]*35 + nzc1[k]] += FE0_D001[ip][j]*FE0_D100[ip][k]*Gip0;
          // Number of operations to compute entry = 3
          A[nzc0[j]*35 + nzc0[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*Gip1;
          // Number of operations to compute entry = 3
          A[nzc1[j]*35 + nzc0[k]] += FE0_D001[ip][k]*FE0_D100[ip][j]*Gip0;
          // Number of operations to compute entry = 3
          A[nzc1[j]*35 + nzc1[k]] += FE0_D100[ip][j]*FE0_D100[ip][k]*Gip2;
          // Number of operations to compute entry = 3
          A[nzc1[j]*35 + nzc2[k]] += FE0_D010[ip][k]*FE0_D100[ip][j]*Gip3;
          // Number of operations to compute entry = 3
          A[nzc2[j]*35 + nzc2[k]] += FE0_D010[ip][j]*FE0_D010[ip][k]*Gip4;
          // Number of operations to compute entry = 3
          A[nzc2[j]*35 + nzc1[k]] += FE0_D010[ip][j]*FE0_D100[ip][k]*Gip3;
          // Number of operations to compute entry = 3
          A[nzc2[j]*35 + nzc0[k]] += FE0_D001[ip][k]*FE0_D010[ip][j]*Gip5;
          // Number of operations to compute entry = 3
          A[nzc0[j]*35 + nzc2[k]] += FE0_D001[ip][j]*FE0_D010[ip][k]*Gip5;
        }// end loop over 'k'
      }// end loop over 'j'
    }// end loop over 'ip'
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class UFC_Poisson3D_4BilinearForm_cell_integral_0: public ufc::cell_integral
{
private:

  UFC_Poisson3D_4BilinearForm_cell_integral_0_quadrature integral_0_quadrature;

public:

  /// Constructor
  UFC_Poisson3D_4BilinearForm_cell_integral_0() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson3D_4BilinearForm_cell_integral_0()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Reset values of the element tensor block
    A[0] = 0;
    A[1] = 0;
    A[2] = 0;
    A[3] = 0;
    A[4] = 0;
    A[5] = 0;
    A[6] = 0;
    A[7] = 0;
    A[8] = 0;
    A[9] = 0;
    A[10] = 0;
    A[11] = 0;
    A[12] = 0;
    A[13] = 0;
    A[14] = 0;
    A[15] = 0;
    A[16] = 0;
    A[17] = 0;
    A[18] = 0;
    A[19] = 0;
    A[20] = 0;
    A[21] = 0;
    A[22] = 0;
    A[23] = 0;
    A[24] = 0;
    A[25] = 0;
    A[26] = 0;
    A[27] = 0;
    A[28] = 0;
    A[29] = 0;
    A[30] = 0;
    A[31] = 0;
    A[32] = 0;
    A[33] = 0;
    A[34] = 0;
    A[35] = 0;
    A[36] = 0;
    A[37] = 0;
    A[38] = 0;
    A[39] = 0;
    A[40] = 0;
    A[41] = 0;
    A[42] = 0;
    A[43] = 0;
    A[44] = 0;
    A[45] = 0;
    A[46] = 0;
    A[47] = 0;
    A[48] = 0;
    A[49] = 0;
    A[50] = 0;
    A[51] = 0;
    A[52] = 0;
    A[53] = 0;
    A[54] = 0;
    A[55] = 0;
    A[56] = 0;
    A[57] = 0;
    A[58] = 0;
    A[59] = 0;
    A[60] = 0;
    A[61] = 0;
    A[62] = 0;
    A[63] = 0;
    A[64] = 0;
    A[65] = 0;
    A[66] = 0;
    A[67] = 0;
    A[68] = 0;
    A[69] = 0;
    A[70] = 0;
    A[71] = 0;
    A[72] = 0;
    A[73] = 0;
    A[74] = 0;
    A[75] = 0;
    A[76] = 0;
    A[77] = 0;
    A[78] = 0;
    A[79] = 0;
    A[80] = 0;
    A[81] = 0;
    A[82] = 0;
    A[83] = 0;
    A[84] = 0;
    A[85] = 0;
    A[86] = 0;
    A[87] = 0;
    A[88] = 0;
    A[89] = 0;
    A[90] = 0;
    A[91] = 0;
    A[92] = 0;
    A[93] = 0;
    A[94] = 0;
    A[95] = 0;
    A[96] = 0;
    A[97] = 0;
    A[98] = 0;
    A[99] = 0;
    A[100] = 0;
    A[101] = 0;
    A[102] = 0;
    A[103] = 0;
    A[104] = 0;
    A[105] = 0;
    A[106] = 0;
    A[107] = 0;
    A[108] = 0;
    A[109] = 0;
    A[110] = 0;
    A[111] = 0;
    A[112] = 0;
    A[113] = 0;
    A[114] = 0;
    A[115] = 0;
    A[116] = 0;
    A[117] = 0;
    A[118] = 0;
    A[119] = 0;
    A[120] = 0;
    A[121] = 0;
    A[122] = 0;
    A[123] = 0;
    A[124] = 0;
    A[125] = 0;
    A[126] = 0;
    A[127] = 0;
    A[128] = 0;
    A[129] = 0;
    A[130] = 0;
    A[131] = 0;
    A[132] = 0;
    A[133] = 0;
    A[134] = 0;
    A[135] = 0;
    A[136] = 0;
    A[137] = 0;
    A[138] = 0;
    A[139] = 0;
    A[140] = 0;
    A[141] = 0;
    A[142] = 0;
    A[143] = 0;
    A[144] = 0;
    A[145] = 0;
    A[146] = 0;
    A[147] = 0;
    A[148] = 0;
    A[149] = 0;
    A[150] = 0;
    A[151] = 0;
    A[152] = 0;
    A[153] = 0;
    A[154] = 0;
    A[155] = 0;
    A[156] = 0;
    A[157] = 0;
    A[158] = 0;
    A[159] = 0;
    A[160] = 0;
    A[161] = 0;
    A[162] = 0;
    A[163] = 0;
    A[164] = 0;
    A[165] = 0;
    A[166] = 0;
    A[167] = 0;
    A[168] = 0;
    A[169] = 0;
    A[170] = 0;
    A[171] = 0;
    A[172] = 0;
    A[173] = 0;
    A[174] = 0;
    A[175] = 0;
    A[176] = 0;
    A[177] = 0;
    A[178] = 0;
    A[179] = 0;
    A[180] = 0;
    A[181] = 0;
    A[182] = 0;
    A[183] = 0;
    A[184] = 0;
    A[185] = 0;
    A[186] = 0;
    A[187] = 0;
    A[188] = 0;
    A[189] = 0;
    A[190] = 0;
    A[191] = 0;
    A[192] = 0;
    A[193] = 0;
    A[194] = 0;
    A[195] = 0;
    A[196] = 0;
    A[197] = 0;
    A[198] = 0;
    A[199] = 0;
    A[200] = 0;
    A[201] = 0;
    A[202] = 0;
    A[203] = 0;
    A[204] = 0;
    A[205] = 0;
    A[206] = 0;
    A[207] = 0;
    A[208] = 0;
    A[209] = 0;
    A[210] = 0;
    A[211] = 0;
    A[212] = 0;
    A[213] = 0;
    A[214] = 0;
    A[215] = 0;
    A[216] = 0;
    A[217] = 0;
    A[218] = 0;
    A[219] = 0;
    A[220] = 0;
    A[221] = 0;
    A[222] = 0;
    A[223] = 0;
    A[224] = 0;
    A[225] = 0;
    A[226] = 0;
    A[227] = 0;
    A[228] = 0;
    A[229] = 0;
    A[230] = 0;
    A[231] = 0;
    A[232] = 0;
    A[233] = 0;
    A[234] = 0;
    A[235] = 0;
    A[236] = 0;
    A[237] = 0;
    A[238] = 0;
    A[239] = 0;
    A[240] = 0;
    A[241] = 0;
    A[242] = 0;
    A[243] = 0;
    A[244] = 0;
    A[245] = 0;
    A[246] = 0;
    A[247] = 0;
    A[248] = 0;
    A[249] = 0;
    A[250] = 0;
    A[251] = 0;
    A[252] = 0;
    A[253] = 0;
    A[254] = 0;
    A[255] = 0;
    A[256] = 0;
    A[257] = 0;
    A[258] = 0;
    A[259] = 0;
    A[260] = 0;
    A[261] = 0;
    A[262] = 0;
    A[263] = 0;
    A[264] = 0;
    A[265] = 0;
    A[266] = 0;
    A[267] = 0;
    A[268] = 0;
    A[269] = 0;
    A[270] = 0;
    A[271] = 0;
    A[272] = 0;
    A[273] = 0;
    A[274] = 0;
    A[275] = 0;
    A[276] = 0;
    A[277] = 0;
    A[278] = 0;
    A[279] = 0;
    A[280] = 0;
    A[281] = 0;
    A[282] = 0;
    A[283] = 0;
    A[284] = 0;
    A[285] = 0;
    A[286] = 0;
    A[287] = 0;
    A[288] = 0;
    A[289] = 0;
    A[290] = 0;
    A[291] = 0;
    A[292] = 0;
    A[293] = 0;
    A[294] = 0;
    A[295] = 0;
    A[296] = 0;
    A[297] = 0;
    A[298] = 0;
    A[299] = 0;
    A[300] = 0;
    A[301] = 0;
    A[302] = 0;
    A[303] = 0;
    A[304] = 0;
    A[305] = 0;
    A[306] = 0;
    A[307] = 0;
    A[308] = 0;
    A[309] = 0;
    A[310] = 0;
    A[311] = 0;
    A[312] = 0;
    A[313] = 0;
    A[314] = 0;
    A[315] = 0;
    A[316] = 0;
    A[317] = 0;
    A[318] = 0;
    A[319] = 0;
    A[320] = 0;
    A[321] = 0;
    A[322] = 0;
    A[323] = 0;
    A[324] = 0;
    A[325] = 0;
    A[326] = 0;
    A[327] = 0;
    A[328] = 0;
    A[329] = 0;
    A[330] = 0;
    A[331] = 0;
    A[332] = 0;
    A[333] = 0;
    A[334] = 0;
    A[335] = 0;
    A[336] = 0;
    A[337] = 0;
    A[338] = 0;
    A[339] = 0;
    A[340] = 0;
    A[341] = 0;
    A[342] = 0;
    A[343] = 0;
    A[344] = 0;
    A[345] = 0;
    A[346] = 0;
    A[347] = 0;
    A[348] = 0;
    A[349] = 0;
    A[350] = 0;
    A[351] = 0;
    A[352] = 0;
    A[353] = 0;
    A[354] = 0;
    A[355] = 0;
    A[356] = 0;
    A[357] = 0;
    A[358] = 0;
    A[359] = 0;
    A[360] = 0;
    A[361] = 0;
    A[362] = 0;
    A[363] = 0;
    A[364] = 0;
    A[365] = 0;
    A[366] = 0;
    A[367] = 0;
    A[368] = 0;
    A[369] = 0;
    A[370] = 0;
    A[371] = 0;
    A[372] = 0;
    A[373] = 0;
    A[374] = 0;
    A[375] = 0;
    A[376] = 0;
    A[377] = 0;
    A[378] = 0;
    A[379] = 0;
    A[380] = 0;
    A[381] = 0;
    A[382] = 0;
    A[383] = 0;
    A[384] = 0;
    A[385] = 0;
    A[386] = 0;
    A[387] = 0;
    A[388] = 0;
    A[389] = 0;
    A[390] = 0;
    A[391] = 0;
    A[392] = 0;
    A[393] = 0;
    A[394] = 0;
    A[395] = 0;
    A[396] = 0;
    A[397] = 0;
    A[398] = 0;
    A[399] = 0;
    A[400] = 0;
    A[401] = 0;
    A[402] = 0;
    A[403] = 0;
    A[404] = 0;
    A[405] = 0;
    A[406] = 0;
    A[407] = 0;
    A[408] = 0;
    A[409] = 0;
    A[410] = 0;
    A[411] = 0;
    A[412] = 0;
    A[413] = 0;
    A[414] = 0;
    A[415] = 0;
    A[416] = 0;
    A[417] = 0;
    A[418] = 0;
    A[419] = 0;
    A[420] = 0;
    A[421] = 0;
    A[422] = 0;
    A[423] = 0;
    A[424] = 0;
    A[425] = 0;
    A[426] = 0;
    A[427] = 0;
    A[428] = 0;
    A[429] = 0;
    A[430] = 0;
    A[431] = 0;
    A[432] = 0;
    A[433] = 0;
    A[434] = 0;
    A[435] = 0;
    A[436] = 0;
    A[437] = 0;
    A[438] = 0;
    A[439] = 0;
    A[440] = 0;
    A[441] = 0;
    A[442] = 0;
    A[443] = 0;
    A[444] = 0;
    A[445] = 0;
    A[446] = 0;
    A[447] = 0;
    A[448] = 0;
    A[449] = 0;
    A[450] = 0;
    A[451] = 0;
    A[452] = 0;
    A[453] = 0;
    A[454] = 0;
    A[455] = 0;
    A[456] = 0;
    A[457] = 0;
    A[458] = 0;
    A[459] = 0;
    A[460] = 0;
    A[461] = 0;
    A[462] = 0;
    A[463] = 0;
    A[464] = 0;
    A[465] = 0;
    A[466] = 0;
    A[467] = 0;
    A[468] = 0;
    A[469] = 0;
    A[470] = 0;
    A[471] = 0;
    A[472] = 0;
    A[473] = 0;
    A[474] = 0;
    A[475] = 0;
    A[476] = 0;
    A[477] = 0;
    A[478] = 0;
    A[479] = 0;
    A[480] = 0;
    A[481] = 0;
    A[482] = 0;
    A[483] = 0;
    A[484] = 0;
    A[485] = 0;
    A[486] = 0;
    A[487] = 0;
    A[488] = 0;
    A[489] = 0;
    A[490] = 0;
    A[491] = 0;
    A[492] = 0;
    A[493] = 0;
    A[494] = 0;
    A[495] = 0;
    A[496] = 0;
    A[497] = 0;
    A[498] = 0;
    A[499] = 0;
    A[500] = 0;
    A[501] = 0;
    A[502] = 0;
    A[503] = 0;
    A[504] = 0;
    A[505] = 0;
    A[506] = 0;
    A[507] = 0;
    A[508] = 0;
    A[509] = 0;
    A[510] = 0;
    A[511] = 0;
    A[512] = 0;
    A[513] = 0;
    A[514] = 0;
    A[515] = 0;
    A[516] = 0;
    A[517] = 0;
    A[518] = 0;
    A[519] = 0;
    A[520] = 0;
    A[521] = 0;
    A[522] = 0;
    A[523] = 0;
    A[524] = 0;
    A[525] = 0;
    A[526] = 0;
    A[527] = 0;
    A[528] = 0;
    A[529] = 0;
    A[530] = 0;
    A[531] = 0;
    A[532] = 0;
    A[533] = 0;
    A[534] = 0;
    A[535] = 0;
    A[536] = 0;
    A[537] = 0;
    A[538] = 0;
    A[539] = 0;
    A[540] = 0;
    A[541] = 0;
    A[542] = 0;
    A[543] = 0;
    A[544] = 0;
    A[545] = 0;
    A[546] = 0;
    A[547] = 0;
    A[548] = 0;
    A[549] = 0;
    A[550] = 0;
    A[551] = 0;
    A[552] = 0;
    A[553] = 0;
    A[554] = 0;
    A[555] = 0;
    A[556] = 0;
    A[557] = 0;
    A[558] = 0;
    A[559] = 0;
    A[560] = 0;
    A[561] = 0;
    A[562] = 0;
    A[563] = 0;
    A[564] = 0;
    A[565] = 0;
    A[566] = 0;
    A[567] = 0;
    A[568] = 0;
    A[569] = 0;
    A[570] = 0;
    A[571] = 0;
    A[572] = 0;
    A[573] = 0;
    A[574] = 0;
    A[575] = 0;
    A[576] = 0;
    A[577] = 0;
    A[578] = 0;
    A[579] = 0;
    A[580] = 0;
    A[581] = 0;
    A[582] = 0;
    A[583] = 0;
    A[584] = 0;
    A[585] = 0;
    A[586] = 0;
    A[587] = 0;
    A[588] = 0;
    A[589] = 0;
    A[590] = 0;
    A[591] = 0;
    A[592] = 0;
    A[593] = 0;
    A[594] = 0;
    A[595] = 0;
    A[596] = 0;
    A[597] = 0;
    A[598] = 0;
    A[599] = 0;
    A[600] = 0;
    A[601] = 0;
    A[602] = 0;
    A[603] = 0;
    A[604] = 0;
    A[605] = 0;
    A[606] = 0;
    A[607] = 0;
    A[608] = 0;
    A[609] = 0;
    A[610] = 0;
    A[611] = 0;
    A[612] = 0;
    A[613] = 0;
    A[614] = 0;
    A[615] = 0;
    A[616] = 0;
    A[617] = 0;
    A[618] = 0;
    A[619] = 0;
    A[620] = 0;
    A[621] = 0;
    A[622] = 0;
    A[623] = 0;
    A[624] = 0;
    A[625] = 0;
    A[626] = 0;
    A[627] = 0;
    A[628] = 0;
    A[629] = 0;
    A[630] = 0;
    A[631] = 0;
    A[632] = 0;
    A[633] = 0;
    A[634] = 0;
    A[635] = 0;
    A[636] = 0;
    A[637] = 0;
    A[638] = 0;
    A[639] = 0;
    A[640] = 0;
    A[641] = 0;
    A[642] = 0;
    A[643] = 0;
    A[644] = 0;
    A[645] = 0;
    A[646] = 0;
    A[647] = 0;
    A[648] = 0;
    A[649] = 0;
    A[650] = 0;
    A[651] = 0;
    A[652] = 0;
    A[653] = 0;
    A[654] = 0;
    A[655] = 0;
    A[656] = 0;
    A[657] = 0;
    A[658] = 0;
    A[659] = 0;
    A[660] = 0;
    A[661] = 0;
    A[662] = 0;
    A[663] = 0;
    A[664] = 0;
    A[665] = 0;
    A[666] = 0;
    A[667] = 0;
    A[668] = 0;
    A[669] = 0;
    A[670] = 0;
    A[671] = 0;
    A[672] = 0;
    A[673] = 0;
    A[674] = 0;
    A[675] = 0;
    A[676] = 0;
    A[677] = 0;
    A[678] = 0;
    A[679] = 0;
    A[680] = 0;
    A[681] = 0;
    A[682] = 0;
    A[683] = 0;
    A[684] = 0;
    A[685] = 0;
    A[686] = 0;
    A[687] = 0;
    A[688] = 0;
    A[689] = 0;
    A[690] = 0;
    A[691] = 0;
    A[692] = 0;
    A[693] = 0;
    A[694] = 0;
    A[695] = 0;
    A[696] = 0;
    A[697] = 0;
    A[698] = 0;
    A[699] = 0;
    A[700] = 0;
    A[701] = 0;
    A[702] = 0;
    A[703] = 0;
    A[704] = 0;
    A[705] = 0;
    A[706] = 0;
    A[707] = 0;
    A[708] = 0;
    A[709] = 0;
    A[710] = 0;
    A[711] = 0;
    A[712] = 0;
    A[713] = 0;
    A[714] = 0;
    A[715] = 0;
    A[716] = 0;
    A[717] = 0;
    A[718] = 0;
    A[719] = 0;
    A[720] = 0;
    A[721] = 0;
    A[722] = 0;
    A[723] = 0;
    A[724] = 0;
    A[725] = 0;
    A[726] = 0;
    A[727] = 0;
    A[728] = 0;
    A[729] = 0;
    A[730] = 0;
    A[731] = 0;
    A[732] = 0;
    A[733] = 0;
    A[734] = 0;
    A[735] = 0;
    A[736] = 0;
    A[737] = 0;
    A[738] = 0;
    A[739] = 0;
    A[740] = 0;
    A[741] = 0;
    A[742] = 0;
    A[743] = 0;
    A[744] = 0;
    A[745] = 0;
    A[746] = 0;
    A[747] = 0;
    A[748] = 0;
    A[749] = 0;
    A[750] = 0;
    A[751] = 0;
    A[752] = 0;
    A[753] = 0;
    A[754] = 0;
    A[755] = 0;
    A[756] = 0;
    A[757] = 0;
    A[758] = 0;
    A[759] = 0;
    A[760] = 0;
    A[761] = 0;
    A[762] = 0;
    A[763] = 0;
    A[764] = 0;
    A[765] = 0;
    A[766] = 0;
    A[767] = 0;
    A[768] = 0;
    A[769] = 0;
    A[770] = 0;
    A[771] = 0;
    A[772] = 0;
    A[773] = 0;
    A[774] = 0;
    A[775] = 0;
    A[776] = 0;
    A[777] = 0;
    A[778] = 0;
    A[779] = 0;
    A[780] = 0;
    A[781] = 0;
    A[782] = 0;
    A[783] = 0;
    A[784] = 0;
    A[785] = 0;
    A[786] = 0;
    A[787] = 0;
    A[788] = 0;
    A[789] = 0;
    A[790] = 0;
    A[791] = 0;
    A[792] = 0;
    A[793] = 0;
    A[794] = 0;
    A[795] = 0;
    A[796] = 0;
    A[797] = 0;
    A[798] = 0;
    A[799] = 0;
    A[800] = 0;
    A[801] = 0;
    A[802] = 0;
    A[803] = 0;
    A[804] = 0;
    A[805] = 0;
    A[806] = 0;
    A[807] = 0;
    A[808] = 0;
    A[809] = 0;
    A[810] = 0;
    A[811] = 0;
    A[812] = 0;
    A[813] = 0;
    A[814] = 0;
    A[815] = 0;
    A[816] = 0;
    A[817] = 0;
    A[818] = 0;
    A[819] = 0;
    A[820] = 0;
    A[821] = 0;
    A[822] = 0;
    A[823] = 0;
    A[824] = 0;
    A[825] = 0;
    A[826] = 0;
    A[827] = 0;
    A[828] = 0;
    A[829] = 0;
    A[830] = 0;
    A[831] = 0;
    A[832] = 0;
    A[833] = 0;
    A[834] = 0;
    A[835] = 0;
    A[836] = 0;
    A[837] = 0;
    A[838] = 0;
    A[839] = 0;
    A[840] = 0;
    A[841] = 0;
    A[842] = 0;
    A[843] = 0;
    A[844] = 0;
    A[845] = 0;
    A[846] = 0;
    A[847] = 0;
    A[848] = 0;
    A[849] = 0;
    A[850] = 0;
    A[851] = 0;
    A[852] = 0;
    A[853] = 0;
    A[854] = 0;
    A[855] = 0;
    A[856] = 0;
    A[857] = 0;
    A[858] = 0;
    A[859] = 0;
    A[860] = 0;
    A[861] = 0;
    A[862] = 0;
    A[863] = 0;
    A[864] = 0;
    A[865] = 0;
    A[866] = 0;
    A[867] = 0;
    A[868] = 0;
    A[869] = 0;
    A[870] = 0;
    A[871] = 0;
    A[872] = 0;
    A[873] = 0;
    A[874] = 0;
    A[875] = 0;
    A[876] = 0;
    A[877] = 0;
    A[878] = 0;
    A[879] = 0;
    A[880] = 0;
    A[881] = 0;
    A[882] = 0;
    A[883] = 0;
    A[884] = 0;
    A[885] = 0;
    A[886] = 0;
    A[887] = 0;
    A[888] = 0;
    A[889] = 0;
    A[890] = 0;
    A[891] = 0;
    A[892] = 0;
    A[893] = 0;
    A[894] = 0;
    A[895] = 0;
    A[896] = 0;
    A[897] = 0;
    A[898] = 0;
    A[899] = 0;
    A[900] = 0;
    A[901] = 0;
    A[902] = 0;
    A[903] = 0;
    A[904] = 0;
    A[905] = 0;
    A[906] = 0;
    A[907] = 0;
    A[908] = 0;
    A[909] = 0;
    A[910] = 0;
    A[911] = 0;
    A[912] = 0;
    A[913] = 0;
    A[914] = 0;
    A[915] = 0;
    A[916] = 0;
    A[917] = 0;
    A[918] = 0;
    A[919] = 0;
    A[920] = 0;
    A[921] = 0;
    A[922] = 0;
    A[923] = 0;
    A[924] = 0;
    A[925] = 0;
    A[926] = 0;
    A[927] = 0;
    A[928] = 0;
    A[929] = 0;
    A[930] = 0;
    A[931] = 0;
    A[932] = 0;
    A[933] = 0;
    A[934] = 0;
    A[935] = 0;
    A[936] = 0;
    A[937] = 0;
    A[938] = 0;
    A[939] = 0;
    A[940] = 0;
    A[941] = 0;
    A[942] = 0;
    A[943] = 0;
    A[944] = 0;
    A[945] = 0;
    A[946] = 0;
    A[947] = 0;
    A[948] = 0;
    A[949] = 0;
    A[950] = 0;
    A[951] = 0;
    A[952] = 0;
    A[953] = 0;
    A[954] = 0;
    A[955] = 0;
    A[956] = 0;
    A[957] = 0;
    A[958] = 0;
    A[959] = 0;
    A[960] = 0;
    A[961] = 0;
    A[962] = 0;
    A[963] = 0;
    A[964] = 0;
    A[965] = 0;
    A[966] = 0;
    A[967] = 0;
    A[968] = 0;
    A[969] = 0;
    A[970] = 0;
    A[971] = 0;
    A[972] = 0;
    A[973] = 0;
    A[974] = 0;
    A[975] = 0;
    A[976] = 0;
    A[977] = 0;
    A[978] = 0;
    A[979] = 0;
    A[980] = 0;
    A[981] = 0;
    A[982] = 0;
    A[983] = 0;
    A[984] = 0;
    A[985] = 0;
    A[986] = 0;
    A[987] = 0;
    A[988] = 0;
    A[989] = 0;
    A[990] = 0;
    A[991] = 0;
    A[992] = 0;
    A[993] = 0;
    A[994] = 0;
    A[995] = 0;
    A[996] = 0;
    A[997] = 0;
    A[998] = 0;
    A[999] = 0;
    A[1000] = 0;
    A[1001] = 0;
    A[1002] = 0;
    A[1003] = 0;
    A[1004] = 0;
    A[1005] = 0;
    A[1006] = 0;
    A[1007] = 0;
    A[1008] = 0;
    A[1009] = 0;
    A[1010] = 0;
    A[1011] = 0;
    A[1012] = 0;
    A[1013] = 0;
    A[1014] = 0;
    A[1015] = 0;
    A[1016] = 0;
    A[1017] = 0;
    A[1018] = 0;
    A[1019] = 0;
    A[1020] = 0;
    A[1021] = 0;
    A[1022] = 0;
    A[1023] = 0;
    A[1024] = 0;
    A[1025] = 0;
    A[1026] = 0;
    A[1027] = 0;
    A[1028] = 0;
    A[1029] = 0;
    A[1030] = 0;
    A[1031] = 0;
    A[1032] = 0;
    A[1033] = 0;
    A[1034] = 0;
    A[1035] = 0;
    A[1036] = 0;
    A[1037] = 0;
    A[1038] = 0;
    A[1039] = 0;
    A[1040] = 0;
    A[1041] = 0;
    A[1042] = 0;
    A[1043] = 0;
    A[1044] = 0;
    A[1045] = 0;
    A[1046] = 0;
    A[1047] = 0;
    A[1048] = 0;
    A[1049] = 0;
    A[1050] = 0;
    A[1051] = 0;
    A[1052] = 0;
    A[1053] = 0;
    A[1054] = 0;
    A[1055] = 0;
    A[1056] = 0;
    A[1057] = 0;
    A[1058] = 0;
    A[1059] = 0;
    A[1060] = 0;
    A[1061] = 0;
    A[1062] = 0;
    A[1063] = 0;
    A[1064] = 0;
    A[1065] = 0;
    A[1066] = 0;
    A[1067] = 0;
    A[1068] = 0;
    A[1069] = 0;
    A[1070] = 0;
    A[1071] = 0;
    A[1072] = 0;
    A[1073] = 0;
    A[1074] = 0;
    A[1075] = 0;
    A[1076] = 0;
    A[1077] = 0;
    A[1078] = 0;
    A[1079] = 0;
    A[1080] = 0;
    A[1081] = 0;
    A[1082] = 0;
    A[1083] = 0;
    A[1084] = 0;
    A[1085] = 0;
    A[1086] = 0;
    A[1087] = 0;
    A[1088] = 0;
    A[1089] = 0;
    A[1090] = 0;
    A[1091] = 0;
    A[1092] = 0;
    A[1093] = 0;
    A[1094] = 0;
    A[1095] = 0;
    A[1096] = 0;
    A[1097] = 0;
    A[1098] = 0;
    A[1099] = 0;
    A[1100] = 0;
    A[1101] = 0;
    A[1102] = 0;
    A[1103] = 0;
    A[1104] = 0;
    A[1105] = 0;
    A[1106] = 0;
    A[1107] = 0;
    A[1108] = 0;
    A[1109] = 0;
    A[1110] = 0;
    A[1111] = 0;
    A[1112] = 0;
    A[1113] = 0;
    A[1114] = 0;
    A[1115] = 0;
    A[1116] = 0;
    A[1117] = 0;
    A[1118] = 0;
    A[1119] = 0;
    A[1120] = 0;
    A[1121] = 0;
    A[1122] = 0;
    A[1123] = 0;
    A[1124] = 0;
    A[1125] = 0;
    A[1126] = 0;
    A[1127] = 0;
    A[1128] = 0;
    A[1129] = 0;
    A[1130] = 0;
    A[1131] = 0;
    A[1132] = 0;
    A[1133] = 0;
    A[1134] = 0;
    A[1135] = 0;
    A[1136] = 0;
    A[1137] = 0;
    A[1138] = 0;
    A[1139] = 0;
    A[1140] = 0;
    A[1141] = 0;
    A[1142] = 0;
    A[1143] = 0;
    A[1144] = 0;
    A[1145] = 0;
    A[1146] = 0;
    A[1147] = 0;
    A[1148] = 0;
    A[1149] = 0;
    A[1150] = 0;
    A[1151] = 0;
    A[1152] = 0;
    A[1153] = 0;
    A[1154] = 0;
    A[1155] = 0;
    A[1156] = 0;
    A[1157] = 0;
    A[1158] = 0;
    A[1159] = 0;
    A[1160] = 0;
    A[1161] = 0;
    A[1162] = 0;
    A[1163] = 0;
    A[1164] = 0;
    A[1165] = 0;
    A[1166] = 0;
    A[1167] = 0;
    A[1168] = 0;
    A[1169] = 0;
    A[1170] = 0;
    A[1171] = 0;
    A[1172] = 0;
    A[1173] = 0;
    A[1174] = 0;
    A[1175] = 0;
    A[1176] = 0;
    A[1177] = 0;
    A[1178] = 0;
    A[1179] = 0;
    A[1180] = 0;
    A[1181] = 0;
    A[1182] = 0;
    A[1183] = 0;
    A[1184] = 0;
    A[1185] = 0;
    A[1186] = 0;
    A[1187] = 0;
    A[1188] = 0;
    A[1189] = 0;
    A[1190] = 0;
    A[1191] = 0;
    A[1192] = 0;
    A[1193] = 0;
    A[1194] = 0;
    A[1195] = 0;
    A[1196] = 0;
    A[1197] = 0;
    A[1198] = 0;
    A[1199] = 0;
    A[1200] = 0;
    A[1201] = 0;
    A[1202] = 0;
    A[1203] = 0;
    A[1204] = 0;
    A[1205] = 0;
    A[1206] = 0;
    A[1207] = 0;
    A[1208] = 0;
    A[1209] = 0;
    A[1210] = 0;
    A[1211] = 0;
    A[1212] = 0;
    A[1213] = 0;
    A[1214] = 0;
    A[1215] = 0;
    A[1216] = 0;
    A[1217] = 0;
    A[1218] = 0;
    A[1219] = 0;
    A[1220] = 0;
    A[1221] = 0;
    A[1222] = 0;
    A[1223] = 0;
    A[1224] = 0;
    
    // Add all contributions to element tensor
    integral_0_quadrature.tabulate_tensor(A, w, c);
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class UFC_Poisson3D_4BilinearForm: public ufc::form
{
public:

  /// Constructor
  UFC_Poisson3D_4BilinearForm() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson3D_4BilinearForm()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "Form([Integral(IndexSum(Product(SpatialDerivative(BasisFunction(FiniteElement('Lagrange', Cell('tetrahedron', 1), 4), 0), MultiIndex((Index(0),), {Index(0): 3})), SpatialDerivative(BasisFunction(FiniteElement('Lagrange', Cell('tetrahedron', 1), 4), 1), MultiIndex((Index(0),), {Index(0): 3}))), MultiIndex((Index(0),), {Index(0): 3})), Measure('cell', 0, None))])";
  }

  /// Return the rank of the global tensor (r)
  virtual unsigned int rank() const
  {
    return 2;
  }

  /// Return the number of coefficients (n)
  virtual unsigned int num_coefficients() const
  {
    return 0;
  }

  /// Return the number of cell integrals
  virtual unsigned int num_cell_integrals() const
  {
    return 1;
  }
  
  /// Return the number of exterior facet integrals
  virtual unsigned int num_exterior_facet_integrals() const
  {
    return 0;
  }
  
  /// Return the number of interior facet integrals
  virtual unsigned int num_interior_facet_integrals() const
  {
    return 0;
  }
    
  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      return new UFC_Poisson3D_4BilinearForm_finite_element_0();
      break;
    case 1:
      return new UFC_Poisson3D_4BilinearForm_finite_element_1();
      break;
    }
    return 0;
  }
  
  /// Create a new dof map for argument function i
  virtual ufc::dof_map* create_dof_map(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      return new UFC_Poisson3D_4BilinearForm_dof_map_0();
      break;
    case 1:
      return new UFC_Poisson3D_4BilinearForm_dof_map_1();
      break;
    }
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(unsigned int i) const
  {
    return new UFC_Poisson3D_4BilinearForm_cell_integral_0();
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(unsigned int i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(unsigned int i) const
  {
    return 0;
  }

};

/// This class defines the interface for a finite element.

class UFC_Poisson3D_4LinearForm_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  UFC_Poisson3D_4LinearForm_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson3D_4LinearForm_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', 'tetrahedron', 4)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 35;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_02 = element_coordinates[3][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
    const double J_12 = element_coordinates[3][1] - element_coordinates[0][1];
    const double J_20 = element_coordinates[1][2] - element_coordinates[0][2];
    const double J_21 = element_coordinates[2][2] - element_coordinates[0][2];
    const double J_22 = element_coordinates[3][2] - element_coordinates[0][2];
      
    // Compute sub determinants
    const double d00 = J_11*J_22 - J_12*J_21;
    const double d01 = J_12*J_20 - J_10*J_22;
    const double d02 = J_10*J_21 - J_11*J_20;
    
    const double d10 = J_02*J_21 - J_01*J_22;
    const double d11 = J_00*J_22 - J_02*J_20;
    const double d12 = J_01*J_20 - J_00*J_21;
    
    const double d20 = J_01*J_12 - J_02*J_11;
    const double d21 = J_02*J_10 - J_00*J_12;
    const double d22 = J_00*J_11 - J_01*J_10;
      
    // Compute determinant of Jacobian
    double detJ = J_00*d00 + J_10*d10 + J_20*d20;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = d00*(element_coordinates[0][0] - element_coordinates[2][0] - element_coordinates[3][0]) \
                    + d10*(element_coordinates[0][1] - element_coordinates[2][1] - element_coordinates[3][1]) \
                    + d20*(element_coordinates[0][2] - element_coordinates[2][2] - element_coordinates[3][2]);
    
    const double C1 = d01*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[3][0]) \
                    + d11*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[3][1]) \
                    + d21*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[3][2]);
    
    const double C2 = d02*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[2][0]) \
                    + d12*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[2][1]) \
                    + d22*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[2][2]);
    
    // Get coordinates and map to the UFC reference element
    double x = (C0 + d00*coordinates[0] + d10*coordinates[1] + d20*coordinates[2]) / detJ;
    double y = (C1 + d01*coordinates[0] + d11*coordinates[1] + d21*coordinates[2]) / detJ;
    double z = (C2 + d02*coordinates[0] + d12*coordinates[1] + d22*coordinates[2]) / detJ;
    
    // Map coordinates to the reference cube
    if (std::abs(y + z - 1.0) < 1e-14)
      x = 1.0;
    else
      x = -2.0 * x/(y + z - 1.0) - 1.0;
    if (std::abs(z - 1.0) < 1e-14)
      y = -1.0;
    else
      y = 2.0 * y/(1.0 - z) - 1.0;
    z = 2.0 * z - 1.0;
    
    // Reset values
    *values = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    const double scalings_y_4 = scalings_y_3*(0.5 - 0.5*y);
    const double scalings_z_0 = 1;
    const double scalings_z_1 = scalings_z_0*(0.5 - 0.5*z);
    const double scalings_z_2 = scalings_z_1*(0.5 - 0.5*z);
    const double scalings_z_3 = scalings_z_2*(0.5 - 0.5*z);
    const double scalings_z_4 = scalings_z_3*(0.5 - 0.5*z);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    const double psitilde_a_4 = 1.75*x*psitilde_a_3 - 0.75*psitilde_a_2;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_0_4 = 0.0285714285714286*psitilde_bs_0_3 + 1.8*y*psitilde_bs_0_3 - 0.771428571428571*psitilde_bs_0_2;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_1_3 = 0.285714285714286*psitilde_bs_1_2 + 2*y*psitilde_bs_1_2 - 0.714285714285714*psitilde_bs_1_1;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_2_2 = 1.02040816326531*psitilde_bs_2_1 + 2.57142857142857*y*psitilde_bs_2_1 - 0.551020408163265*psitilde_bs_2_0;
    const double psitilde_bs_3_0 = 1;
    const double psitilde_bs_3_1 = 4.5*y + 3.5;
    const double psitilde_bs_4_0 = 1;
    
    // Compute psitilde_cs
    const double psitilde_cs_00_0 = 1;
    const double psitilde_cs_00_1 = 2*z + 1;
    const double psitilde_cs_00_2 = 0.3125*psitilde_cs_00_1 + 1.875*z*psitilde_cs_00_1 - 0.5625*psitilde_cs_00_0;
    const double psitilde_cs_00_3 = 0.155555555555556*psitilde_cs_00_2 + 1.86666666666667*z*psitilde_cs_00_2 - 0.711111111111111*psitilde_cs_00_1;
    const double psitilde_cs_00_4 = 0.09375*psitilde_cs_00_3 + 1.875*z*psitilde_cs_00_3 - 0.78125*psitilde_cs_00_2;
    const double psitilde_cs_01_0 = 1;
    const double psitilde_cs_01_1 = 3*z + 2;
    const double psitilde_cs_01_2 = 0.777777777777778*psitilde_cs_01_1 + 2.33333333333333*z*psitilde_cs_01_1 - 0.555555555555556*psitilde_cs_01_0;
    const double psitilde_cs_01_3 = 0.428571428571429*psitilde_cs_01_2 + 2.14285714285714*z*psitilde_cs_01_2 - 0.714285714285714*psitilde_cs_01_1;
    const double psitilde_cs_02_0 = 1;
    const double psitilde_cs_02_1 = 4*z + 3;
    const double psitilde_cs_02_2 = 1.265625*psitilde_cs_02_1 + 2.8125*z*psitilde_cs_02_1 - 0.546875*psitilde_cs_02_0;
    const double psitilde_cs_03_0 = 1;
    const double psitilde_cs_03_1 = 5*z + 4;
    const double psitilde_cs_04_0 = 1;
    const double psitilde_cs_10_0 = 1;
    const double psitilde_cs_10_1 = 3*z + 2;
    const double psitilde_cs_10_2 = 0.777777777777778*psitilde_cs_10_1 + 2.33333333333333*z*psitilde_cs_10_1 - 0.555555555555556*psitilde_cs_10_0;
    const double psitilde_cs_10_3 = 0.428571428571429*psitilde_cs_10_2 + 2.14285714285714*z*psitilde_cs_10_2 - 0.714285714285714*psitilde_cs_10_1;
    const double psitilde_cs_11_0 = 1;
    const double psitilde_cs_11_1 = 4*z + 3;
    const double psitilde_cs_11_2 = 1.265625*psitilde_cs_11_1 + 2.8125*z*psitilde_cs_11_1 - 0.546875*psitilde_cs_11_0;
    const double psitilde_cs_12_0 = 1;
    const double psitilde_cs_12_1 = 5*z + 4;
    const double psitilde_cs_13_0 = 1;
    const double psitilde_cs_20_0 = 1;
    const double psitilde_cs_20_1 = 4*z + 3;
    const double psitilde_cs_20_2 = 1.265625*psitilde_cs_20_1 + 2.8125*z*psitilde_cs_20_1 - 0.546875*psitilde_cs_20_0;
    const double psitilde_cs_21_0 = 1;
    const double psitilde_cs_21_1 = 5*z + 4;
    const double psitilde_cs_22_0 = 1;
    const double psitilde_cs_30_0 = 1;
    const double psitilde_cs_30_1 = 5*z + 4;
    const double psitilde_cs_31_0 = 1;
    const double psitilde_cs_40_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.866025403784439*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_0;
    const double basisvalue1 = 2.73861278752583*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_0;
    const double basisvalue2 = 1.58113883008419*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_0;
    const double basisvalue3 = 1.11803398874989*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_1;
    const double basisvalue4 = 5.1234753829798*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_0;
    const double basisvalue5 = 3.96862696659689*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_0;
    const double basisvalue6 = 2.29128784747792*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_0;
    const double basisvalue7 = 3.24037034920393*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_1;
    const double basisvalue8 = 1.87082869338697*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_1;
    const double basisvalue9 = 1.3228756555323*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_2;
    const double basisvalue10 = 7.93725393319377*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_0;
    const double basisvalue11 = 6.70820393249937*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_0;
    const double basisvalue12 = 5.19615242270663*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_0;
    const double basisvalue13 = 3*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_0;
    const double basisvalue14 = 5.80947501931113*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_1;
    const double basisvalue15 = 4.5*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_1;
    const double basisvalue16 = 2.59807621135332*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_1;
    const double basisvalue17 = 3.67423461417477*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_2;
    const double basisvalue18 = 2.12132034355964*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_2;
    const double basisvalue19 = 1.5*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_3;
    const double basisvalue20 = 11.1242977306435*psitilde_a_4*scalings_y_4*psitilde_bs_4_0*scalings_z_4*psitilde_cs_40_0;
    const double basisvalue21 = 9.81070843517429*psitilde_a_3*scalings_y_3*psitilde_bs_3_1*scalings_z_4*psitilde_cs_31_0;
    const double basisvalue22 = 8.2915619758885*psitilde_a_2*scalings_y_2*psitilde_bs_2_2*scalings_z_4*psitilde_cs_22_0;
    const double basisvalue23 = 6.42261628933256*psitilde_a_1*scalings_y_1*psitilde_bs_1_3*scalings_z_4*psitilde_cs_13_0;
    const double basisvalue24 = 3.70809924354783*psitilde_a_0*scalings_y_0*psitilde_bs_0_4*scalings_z_4*psitilde_cs_04_0;
    const double basisvalue25 = 8.77496438739212*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_1;
    const double basisvalue26 = 7.41619848709566*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_1;
    const double basisvalue27 = 5.74456264653803*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_1;
    const double basisvalue28 = 3.3166247903554*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_1;
    const double basisvalue29 = 6.42261628933256*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_2;
    const double basisvalue30 = 4.9749371855331*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_2;
    const double basisvalue31 = 2.87228132326901*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_2;
    const double basisvalue32 = 4.06201920231798*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_3;
    const double basisvalue33 = 2.34520787991171*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_3;
    const double basisvalue34 = 1.6583123951777*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_4;
    
    // Table(s) of coefficients
    const static double coefficients0[35][35] = \
    {{-0.0137464349807053, -0.014490014748814, -0.00836581391578937, -0.00591552374999943, 0, 0, 0, 0, 0, 0, -0.00671936840905292, -0.00567890279999946, -0.00439885919382571, -0.00253968253968253, -0.00491807409042212, -0.00380952380952381, -0.00219942959691287, -0.00311046316543895, -0.0017958267458706, -0.00126984126984128, 0.0136980289516341, 0.0120805260192622, 0.010209907964538, 0.00790856070259325, 0.00456600965054471, 0.0108051509532101, 0.00913201930108942, 0.0070736317340728, 0.00408396318581522, 0.00790856070259325, 0.00612594477872282, 0.0035368158670364, 0.00500181296677923, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807054, 0.0144900147488139, -0.00836581391578936, -0.00591552374999944, 0, 0, 0, 0, 0, 0, 0.00671936840905292, -0.00567890279999947, 0.00439885919382572, -0.00253968253968254, -0.00491807409042212, 0.00380952380952381, -0.00219942959691286, 0.00311046316543896, -0.0017958267458706, -0.00126984126984127, 0.0136980289516341, -0.0120805260192622, 0.010209907964538, -0.00790856070259325, 0.00456600965054471, -0.0108051509532101, 0.00913201930108942, -0.0070736317340728, 0.00408396318581521, 0.00790856070259325, -0.00612594477872282, 0.0035368158670364, -0.00500181296677923, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807054, 0, 0.0167316278315787, -0.00591552374999945, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0101587301587302, 0, 0, -0.00659828879073858, 0, 0.0035916534917412, -0.00126984126984127, 0, 0, 0, 0, 0.0228300482527235, 0, 0, 0, -0.0163358527432608, 0, 0, 0.0106104476011092, 0, -0.00577559612561231, 0.00204198159290761},
    {-0.0137464349807054, 0, 0, 0.0177465712499983, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0126984126984127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0306297238936141},
    {0.0439885919382572, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0, 0.0406349206349206, 0, 0, 0.00439885919382573, 0, -0.0143666139669648, 0.00761904761904762, 0, 0, 0, 0, 0, 0, 0, 0, 0.0367556686723369, 0, 0, -0.0424417904044368, 0, 0.0303218796594646, -0.0122518895574456},
    {-0.0329914439536929, 0, -0.0200779533978945, -0.0141972569999987, 0, 0, -0.00969857289937746, 0, 0.0712696645099798, -0.050395263067897, 0, 0, 0, 0, 0, 0, 0.0461880215351701, 0, 0.0107749604752236, -0.019047619047619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0495154221385096, 0, -0.0606437593189292, 0.0306297238936141},
    {0.0439885919382573, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0, 0.0359165349174119, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0505364660991077, -0.0408396318581521},
    {0.0439885919382571, 0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0.0433733365754904, -0.0335968420452646, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, -0.0227156111999978, 0.0175954367753029, -0.0101587301587302, 0.00327871606028142, -0.00253968253968253, 0.00146628639794192, -0.0124418526617558, 0.00718330698348241, 0.00761904761904763, 0, 0, 0, 0, 0, 0.0243115896447228, -0.0205470434274512, 0.0159156714016638, -0.00918891716808422, -0.031634242810373, 0.0245037791148913, -0.0141472634681456, 0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, -0.0173880176985767, 0.0100389766989472, -0.0141972569999987, -0.00722888942924838, 0.00559947367421077, -0.00323285763312583, 0.0617213399848368, -0.0356348322549899, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, -0.0266666666666667, 0.01539600717839, 0.00933138949631688, -0.00538748023761179, -0.019047619047619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, -0.0285877423007065, 0.0165051407128366, -0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382572, 0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0.0311046316543896, -0.017958267458706, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, -0.0335968420452646, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, 0, -0.0117302911835352, 0.0101587301587302, -0.0229510124219699, 0.00761904761904762, -0.0014662863979419, 0.0165891368823411, -0.00718330698348239, -0.00761904761904762, 0, 0.0241610520385245, -0.0357346778758831, 0.0355885231616696, -0.0228300482527235, -0.00270128773830253, -0.0114150241263618, 0.0159156714016638, -0.0112308987609918, 0.00395428035129663, 0.00306297238936141, -0.0035368158670364, -0.00375135972508442, 0.00072194951570154, 0.00204198159290761},
    {-0.0329914439536929, -0.0173880176985767, -0.0100389766989473, 0.0141972569999987, -0.00722888942924838, 0.0615942104163185, -0.0614242950293905, -0.00685792666498186, -0.00395942580611002, 0.00559947367421077, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.0049180740904221, -0.0266666666666667, 0.0175954367753029, 0.00933138949631686, 0.00538748023761182, -0.00761904761904761, 0, 0, 0.0357346778758831, -0.0593142052694494, 0.0456600965054471, 0, -0.0091320193010894, 0, 0.00408396318581524, 0.0013180934504322, 0.00714693557517662, -0.00471575448938186, -0.00250090648338961, -0.00144389903140308, 0.0020419815929076},
    {0.0439885919382573, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484215, 0, 0, 0.0293257279588381, 0.0101587301587301, 0, -0.0101587301587302, -0.0219942959691286, 0.00207364211029264, 0.017958267458706, -0.00761904761904762, 0, 0, 0, 0.0395428035129662, -0.0456600965054471, 0, 0, -0.017684079335182, 0.0142938711503532, 0, 0.00612594477872282, 0, -0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.0439885919382572, -0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0.0433733365754904, 0.0335968420452647, 0.0193971457987549, 0.0274317066599275, 0.01583770322444, 0.0111989473484215, -0.0268774736362117, -0.0227156111999979, -0.0175954367753029, -0.0101587301587302, 0.00327871606028141, 0.00253968253968254, 0.00146628639794191, 0.0124418526617558, 0.00718330698348239, 0.00761904761904762, 0, 0, 0, 0, 0, -0.0243115896447228, -0.0205470434274512, -0.0159156714016638, -0.00918891716808422, -0.031634242810373, -0.0245037791148913, -0.0141472634681456, -0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.032991443953693, 0.0173880176985767, 0.0100389766989472, -0.0141972569999986, -0.0072288894292484, -0.00559947367421079, -0.00323285763312582, -0.0617213399848368, -0.0356348322549899, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, 0.0266666666666667, 0.01539600717839, -0.00933138949631686, -0.00538748023761177, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, 0.0285877423007065, 0.0165051407128365, 0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382572, -0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, -0.0311046316543895, -0.017958267458706, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484215, -0.0268774736362117, 0, 0.0117302911835353, 0.0101587301587301, -0.0229510124219699, -0.00761904761904762, -0.0014662863979419, -0.0165891368823411, -0.0071833069834824, -0.00761904761904762, 0, -0.0241610520385245, -0.0357346778758831, -0.0355885231616696, -0.0228300482527235, 0.00270128773830253, -0.0114150241263618, -0.0159156714016638, -0.0112308987609918, 0.00395428035129663, -0.00306297238936141, -0.0035368158670364, 0.00375135972508443, 0.000721949515701543, 0.00204198159290761},
    {-0.0329914439536929, 0.0173880176985767, -0.0100389766989473, 0.0141972569999986, -0.00722888942924838, -0.0615942104163185, -0.0614242950293904, 0.00685792666498186, -0.00395942580611, 0.00559947367421079, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042211, 0.0266666666666667, 0.0175954367753029, -0.00933138949631687, 0.0053874802376118, -0.00761904761904762, 0, 0, 0.0357346778758831, 0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108941, 0, 0.00408396318581522, 0.0013180934504322, -0.00714693557517662, -0.00471575448938187, 0.00250090648338962, -0.00144389903140308, 0.00204198159290761},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484215, 0, 0, -0.0293257279588381, 0.0101587301587301, 0, 0.0101587301587302, -0.0219942959691286, -0.00207364211029263, 0.017958267458706, -0.00761904761904762, 0, 0, 0, -0.0395428035129662, -0.0456600965054471, 0, 0, 0.017684079335182, 0.0142938711503532, 0, -0.00612594477872281, 0, 0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.0439885919382572, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484215, 0.0134387368181059, -0.0113578055999989, -0.0205280095711867, -0.0152380952380952, -0.00983614818084423, -0.0177777777777778, -0.0131965775814772, -0.0145154947720485, -0.0107749604752236, -0.0076190476190476, -0.0547921158065365, -0.0241610520385245, -0.00510495398226901, 0.00395428035129662, 0.00456600965054471, -0.0216103019064202, -0.00456600965054471, 0.0035368158670364, 0.00408396318581521, -0.00395428035129662, 0.00306297238936141, 0.0035368158670364, 0.00250090648338962, 0.00288779806280615, 0.0020419815929076},
    {-0.0329914439536929, 0, 0.0200779533978945, 0.0141972569999987, -0.0867466731509807, 0, 0.00969857289937746, 0, 0.00791885161221999, 0.00559947367421079, 0, 0.0340734167999968, 0, -0.0152380952380953, 0.0295084445425327, 0, -0.0131965775814772, 0, -0.0107749604752236, -0.00761904761904764, 0.0821881737098047, 0, -0.010209907964538, 0, 0.0045660096505447, 0, -0.00913201930108942, 0, 0.0040839631858152, -0.00790856070259325, 0, 0.00353681586703639, 0, 0.00288779806280615, 0.00204198159290761},
    {0.0439885919382572, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754903, -0.0335968420452646, 0.0193971457987549, -0.0274317066599274, 0.01583770322444, 0.0111989473484215, -0.0134387368181059, -0.0113578055999989, 0.0205280095711867, -0.0152380952380952, -0.00983614818084423, 0.0177777777777778, -0.0131965775814772, 0.0145154947720485, -0.0107749604752236, -0.00761904761904761, -0.0547921158065365, 0.0241610520385245, -0.00510495398226901, -0.00395428035129662, 0.00456600965054471, 0.0216103019064202, -0.00456600965054471, -0.0035368158670364, 0.00408396318581521, -0.00395428035129662, -0.00306297238936141, 0.00353681586703641, -0.00250090648338962, 0.00288779806280615, 0.0020419815929076},
    {0.0439885919382569, 0.139104141588614, -0.0803118135915779, -0.0567890279999946, 0.0578311154339871, 0.0335968420452646, -0.0420271492306355, 0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, -0.0586514559176762, 0.0406349206349206, 0.0393445927233769, 0.00253968253968254, -0.0109971479845643, -0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, -0.053052238005546, 0.0367556686723369, -0.0105447476034577, -0.0245037791148913, 0.0235787724469093, 0.0175063453837273, 0, -0.0122518895574456},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0, 0.0783926314389509, 0.00969857289937743, -0.0274317066599274, 0.0475131096733199, -0.0167984210226323, 0, 0, 0.0586514559176763, -0.060952380952381, 0, 0.033015873015873, 0.0241937255660415, -0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, 0.053052238005546, -0.0551335030085054, 0, -0.0326717054865217, 0.0141472634681456, 0.00875317269186366, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0, -0.0111989473484216, 0.00969857289937743, 0.0822951199797824, 0.0475131096733199, -0.0167984210226323, 0, 0, 0, 0, 0, 0.0533333333333333, -0.0461880215351701, 0.0435464843161454, 0.0251415744421884, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.057175484601413, -0.0495154221385096, -0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382572, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, 0.0578311154339871, -0.0335968420452646, -0.0420271492306356, -0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, 0.0586514559176763, 0.0406349206349206, 0.0393445927233769, -0.00253968253968253, -0.0109971479845643, 0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, 0.053052238005546, 0.0367556686723369, -0.0105447476034577, 0.0245037791148913, 0.0235787724469093, -0.0175063453837273, 0, -0.0122518895574456},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0, -0.0783926314389508, 0.00969857289937744, 0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, -0.0586514559176763, -0.060952380952381, 0, -0.033015873015873, 0.0241937255660415, 0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, -0.053052238005546, -0.0551335030085054, 0, 0.0326717054865217, 0.0141472634681456, -0.00875317269186367, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382573, 0, 0, 0.170367083999984, 0, 0.0111989473484216, 0.00969857289937742, -0.0822951199797824, 0.0475131096733199, -0.0167984210226324, 0, 0, 0, 0, 0, -0.0533333333333333, -0.0461880215351701, -0.0435464843161454, 0.0251415744421884, -0.0825396825396825, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.057175484601413, -0.0495154221385096, 0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382572, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754904, 0.0447957893936862, 0.0484928644968872, -0.0548634133198549, 0, -0.0167984210226323, 0.0806324209086351, 0.0227156111999978, -0.00586514559176761, -0.0101587301587302, -0.00327871606028142, 0.0304761904761905, 0.0271262983619253, 0.045620126426438, 0.0430998419008943, 0.0393650793650793, 0, 0, 0, 0, 0, 0.0729347689341683, 0.0205470434274512, -0.0053052238005546, -0.00918891716808421, 0.031634242810373, -0.00816792637163041, -0.0141472634681456, -0.00875317269186367, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754904, -0.0447957893936862, 0.0484928644968872, 0.0548634133198549, 0, -0.0167984210226323, -0.0806324209086352, 0.0227156111999978, 0.0058651455917676, -0.0101587301587302, -0.00327871606028142, -0.0304761904761905, 0.0271262983619253, -0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, -0.0729347689341683, 0.0205470434274512, 0.00530522380055459, -0.00918891716808422, 0.031634242810373, 0.00816792637163041, -0.0141472634681456, 0.00875317269186366, -0.0151609398297323, -0.0122518895574456},
    {0.043988591938257, 0, 0, 0.170367083999984, 0.0144577788584968, 0, -0.00323285763312582, 0, -0.0950262193466398, -0.0167984210226323, 0, 0, 0, 0, -0.0688530372659096, 0, 0.01539600717839, 0, -0.0502831488843767, -0.0825396825396825, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0738132332242037, 0, 0.0165051407128365, 0, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382574, -0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754904, -0.0447957893936862, -0.00969857289937744, 0.0548634133198549, 0.0316754064488799, 0.0391963157194754, 0.0806324209086352, 0, 0.0527863103259087, 0.060952380952381, 0.0229510124219699, 0.0101587301587302, 0.0168622935763319, -0.0124418526617558, -0.00718330698348237, -0.013968253968254, 0, 0.0724831561155734, 0.0357346778758831, -0.0118628410538899, -0.0228300482527235, -0.00810386321490759, 0.0114150241263618, -0.0053052238005546, -0.0112308987609918, -0.00395428035129662, -0.0010209907964538, -0.0035368158670364, 0.00125045324169481, 0.000721949515701528, 0.0020419815929076},
    {0.0439885919382571, 0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754903, 0.0447957893936862, -0.00969857289937744, -0.0548634133198549, 0.0316754064488799, 0.0391963157194754, -0.0806324209086351, 0, -0.0527863103259086, 0.060952380952381, 0.0229510124219699, -0.0101587301587302, 0.0168622935763319, 0.0124418526617558, -0.00718330698348238, -0.013968253968254, 0, -0.0724831561155734, 0.0357346778758831, 0.0118628410538899, -0.0228300482527235, 0.00810386321490758, 0.0114150241263618, 0.0053052238005546, -0.0112308987609918, -0.00395428035129663, 0.0010209907964538, -0.0035368158670364, -0.00125045324169481, 0.000721949515701529, 0.0020419815929076},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0.0144577788584968, 0, -0.0614242950293904, 0, -0.0633508128977598, 0.0391963157194754, 0, -0.0681468335999936, 0, -0.0914285714285714, 0.00983614818084424, 0, 0.0285925847598672, 0, 0.0143666139669648, -0.013968253968254, 0, 0, -0.0714693557517662, 0, 0.0456600965054471, 0, 0.0182640386021788, 0, 0.0040839631858152, -0.00263618690086442, 0, -0.00471575448938187, 0, -0.00144389903140307, 0.0020419815929076},
    {0.351908735506058, 0, 0, 0, -0.115662230867974, 0, -0.129314305325032, 0, 0, -0.134387368181059, 0, -0.0908624447999914, 0, 0.0406349206349207, -0.0786891854467539, 0, -0.0879771838765144, 0, 0, 0.0711111111111111, 0, 0, 0, 0, 0, 0, -0.0821881737098047, 0, 0.0367556686723369, 0.0210894952069153, 0, 0.0235787724469093, 0, 0, -0.0122518895574456}};
    
    // Extract relevant coefficients
    const double coeff0_0 = coefficients0[dof][0];
    const double coeff0_1 = coefficients0[dof][1];
    const double coeff0_2 = coefficients0[dof][2];
    const double coeff0_3 = coefficients0[dof][3];
    const double coeff0_4 = coefficients0[dof][4];
    const double coeff0_5 = coefficients0[dof][5];
    const double coeff0_6 = coefficients0[dof][6];
    const double coeff0_7 = coefficients0[dof][7];
    const double coeff0_8 = coefficients0[dof][8];
    const double coeff0_9 = coefficients0[dof][9];
    const double coeff0_10 = coefficients0[dof][10];
    const double coeff0_11 = coefficients0[dof][11];
    const double coeff0_12 = coefficients0[dof][12];
    const double coeff0_13 = coefficients0[dof][13];
    const double coeff0_14 = coefficients0[dof][14];
    const double coeff0_15 = coefficients0[dof][15];
    const double coeff0_16 = coefficients0[dof][16];
    const double coeff0_17 = coefficients0[dof][17];
    const double coeff0_18 = coefficients0[dof][18];
    const double coeff0_19 = coefficients0[dof][19];
    const double coeff0_20 = coefficients0[dof][20];
    const double coeff0_21 = coefficients0[dof][21];
    const double coeff0_22 = coefficients0[dof][22];
    const double coeff0_23 = coefficients0[dof][23];
    const double coeff0_24 = coefficients0[dof][24];
    const double coeff0_25 = coefficients0[dof][25];
    const double coeff0_26 = coefficients0[dof][26];
    const double coeff0_27 = coefficients0[dof][27];
    const double coeff0_28 = coefficients0[dof][28];
    const double coeff0_29 = coefficients0[dof][29];
    const double coeff0_30 = coefficients0[dof][30];
    const double coeff0_31 = coefficients0[dof][31];
    const double coeff0_32 = coefficients0[dof][32];
    const double coeff0_33 = coefficients0[dof][33];
    const double coeff0_34 = coefficients0[dof][34];
    
    // Compute value(s)
    *values = coeff0_0*basisvalue0 + coeff0_1*basisvalue1 + coeff0_2*basisvalue2 + coeff0_3*basisvalue3 + coeff0_4*basisvalue4 + coeff0_5*basisvalue5 + coeff0_6*basisvalue6 + coeff0_7*basisvalue7 + coeff0_8*basisvalue8 + coeff0_9*basisvalue9 + coeff0_10*basisvalue10 + coeff0_11*basisvalue11 + coeff0_12*basisvalue12 + coeff0_13*basisvalue13 + coeff0_14*basisvalue14 + coeff0_15*basisvalue15 + coeff0_16*basisvalue16 + coeff0_17*basisvalue17 + coeff0_18*basisvalue18 + coeff0_19*basisvalue19 + coeff0_20*basisvalue20 + coeff0_21*basisvalue21 + coeff0_22*basisvalue22 + coeff0_23*basisvalue23 + coeff0_24*basisvalue24 + coeff0_25*basisvalue25 + coeff0_26*basisvalue26 + coeff0_27*basisvalue27 + coeff0_28*basisvalue28 + coeff0_29*basisvalue29 + coeff0_30*basisvalue30 + coeff0_31*basisvalue31 + coeff0_32*basisvalue32 + coeff0_33*basisvalue33 + coeff0_34*basisvalue34;
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis() is not yet implemented.");
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_02 = element_coordinates[3][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
    const double J_12 = element_coordinates[3][1] - element_coordinates[0][1];
    const double J_20 = element_coordinates[1][2] - element_coordinates[0][2];
    const double J_21 = element_coordinates[2][2] - element_coordinates[0][2];
    const double J_22 = element_coordinates[3][2] - element_coordinates[0][2];
      
    // Compute sub determinants
    const double d00 = J_11*J_22 - J_12*J_21;
    const double d01 = J_12*J_20 - J_10*J_22;
    const double d02 = J_10*J_21 - J_11*J_20;
    
    const double d10 = J_02*J_21 - J_01*J_22;
    const double d11 = J_00*J_22 - J_02*J_20;
    const double d12 = J_01*J_20 - J_00*J_21;
    
    const double d20 = J_01*J_12 - J_02*J_11;
    const double d21 = J_02*J_10 - J_00*J_12;
    const double d22 = J_00*J_11 - J_01*J_10;
      
    // Compute determinant of Jacobian
    double detJ = J_00*d00 + J_10*d10 + J_20*d20;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = d00*(element_coordinates[0][0] - element_coordinates[2][0] - element_coordinates[3][0]) \
                    + d10*(element_coordinates[0][1] - element_coordinates[2][1] - element_coordinates[3][1]) \
                    + d20*(element_coordinates[0][2] - element_coordinates[2][2] - element_coordinates[3][2]);
    
    const double C1 = d01*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[3][0]) \
                    + d11*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[3][1]) \
                    + d21*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[3][2]);
    
    const double C2 = d02*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[2][0]) \
                    + d12*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[2][1]) \
                    + d22*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[2][2]);
    
    // Get coordinates and map to the UFC reference element
    double x = (C0 + d00*coordinates[0] + d10*coordinates[1] + d20*coordinates[2]) / detJ;
    double y = (C1 + d01*coordinates[0] + d11*coordinates[1] + d21*coordinates[2]) / detJ;
    double z = (C2 + d02*coordinates[0] + d12*coordinates[1] + d22*coordinates[2]) / detJ;
    
    // Map coordinates to the reference cube
    if (std::abs(y + z - 1.0) < 1e-14)
      x = 1.0;
    else
      x = -2.0 * x/(y + z - 1.0) - 1.0;
    if (std::abs(z - 1.0) < 1e-14)
      y = -1.0;
    else
      y = 2.0 * y/(1.0 - z) - 1.0;
    z = 2.0 * z - 1.0;
    
    // Compute number of derivatives
    unsigned int num_derivatives = 1;
    
    for (unsigned int j = 0; j < n; j++)
      num_derivatives *= 3;
    
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      combinations[j] = new unsigned int [n];
      for (unsigned int k = 0; k < n; k++)
        combinations[j][k] = 0;
    }
        
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] ={{d00 / detJ, d10 / detJ, d20 / detJ}, {d01 / detJ, d11 / detJ, d21 / detJ}, {d02 / detJ, d12 / detJ, d22 / detJ}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values
    for (unsigned int j = 0; j < 1*num_derivatives; j++)
      values[j] = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    const double scalings_y_4 = scalings_y_3*(0.5 - 0.5*y);
    const double scalings_z_0 = 1;
    const double scalings_z_1 = scalings_z_0*(0.5 - 0.5*z);
    const double scalings_z_2 = scalings_z_1*(0.5 - 0.5*z);
    const double scalings_z_3 = scalings_z_2*(0.5 - 0.5*z);
    const double scalings_z_4 = scalings_z_3*(0.5 - 0.5*z);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    const double psitilde_a_4 = 1.75*x*psitilde_a_3 - 0.75*psitilde_a_2;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_0_4 = 0.0285714285714286*psitilde_bs_0_3 + 1.8*y*psitilde_bs_0_3 - 0.771428571428571*psitilde_bs_0_2;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_1_3 = 0.285714285714286*psitilde_bs_1_2 + 2*y*psitilde_bs_1_2 - 0.714285714285714*psitilde_bs_1_1;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_2_2 = 1.02040816326531*psitilde_bs_2_1 + 2.57142857142857*y*psitilde_bs_2_1 - 0.551020408163265*psitilde_bs_2_0;
    const double psitilde_bs_3_0 = 1;
    const double psitilde_bs_3_1 = 4.5*y + 3.5;
    const double psitilde_bs_4_0 = 1;
    
    // Compute psitilde_cs
    const double psitilde_cs_00_0 = 1;
    const double psitilde_cs_00_1 = 2*z + 1;
    const double psitilde_cs_00_2 = 0.3125*psitilde_cs_00_1 + 1.875*z*psitilde_cs_00_1 - 0.5625*psitilde_cs_00_0;
    const double psitilde_cs_00_3 = 0.155555555555556*psitilde_cs_00_2 + 1.86666666666667*z*psitilde_cs_00_2 - 0.711111111111111*psitilde_cs_00_1;
    const double psitilde_cs_00_4 = 0.09375*psitilde_cs_00_3 + 1.875*z*psitilde_cs_00_3 - 0.78125*psitilde_cs_00_2;
    const double psitilde_cs_01_0 = 1;
    const double psitilde_cs_01_1 = 3*z + 2;
    const double psitilde_cs_01_2 = 0.777777777777778*psitilde_cs_01_1 + 2.33333333333333*z*psitilde_cs_01_1 - 0.555555555555556*psitilde_cs_01_0;
    const double psitilde_cs_01_3 = 0.428571428571429*psitilde_cs_01_2 + 2.14285714285714*z*psitilde_cs_01_2 - 0.714285714285714*psitilde_cs_01_1;
    const double psitilde_cs_02_0 = 1;
    const double psitilde_cs_02_1 = 4*z + 3;
    const double psitilde_cs_02_2 = 1.265625*psitilde_cs_02_1 + 2.8125*z*psitilde_cs_02_1 - 0.546875*psitilde_cs_02_0;
    const double psitilde_cs_03_0 = 1;
    const double psitilde_cs_03_1 = 5*z + 4;
    const double psitilde_cs_04_0 = 1;
    const double psitilde_cs_10_0 = 1;
    const double psitilde_cs_10_1 = 3*z + 2;
    const double psitilde_cs_10_2 = 0.777777777777778*psitilde_cs_10_1 + 2.33333333333333*z*psitilde_cs_10_1 - 0.555555555555556*psitilde_cs_10_0;
    const double psitilde_cs_10_3 = 0.428571428571429*psitilde_cs_10_2 + 2.14285714285714*z*psitilde_cs_10_2 - 0.714285714285714*psitilde_cs_10_1;
    const double psitilde_cs_11_0 = 1;
    const double psitilde_cs_11_1 = 4*z + 3;
    const double psitilde_cs_11_2 = 1.265625*psitilde_cs_11_1 + 2.8125*z*psitilde_cs_11_1 - 0.546875*psitilde_cs_11_0;
    const double psitilde_cs_12_0 = 1;
    const double psitilde_cs_12_1 = 5*z + 4;
    const double psitilde_cs_13_0 = 1;
    const double psitilde_cs_20_0 = 1;
    const double psitilde_cs_20_1 = 4*z + 3;
    const double psitilde_cs_20_2 = 1.265625*psitilde_cs_20_1 + 2.8125*z*psitilde_cs_20_1 - 0.546875*psitilde_cs_20_0;
    const double psitilde_cs_21_0 = 1;
    const double psitilde_cs_21_1 = 5*z + 4;
    const double psitilde_cs_22_0 = 1;
    const double psitilde_cs_30_0 = 1;
    const double psitilde_cs_30_1 = 5*z + 4;
    const double psitilde_cs_31_0 = 1;
    const double psitilde_cs_40_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.866025403784439*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_0;
    const double basisvalue1 = 2.73861278752583*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_0;
    const double basisvalue2 = 1.58113883008419*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_0;
    const double basisvalue3 = 1.11803398874989*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_1;
    const double basisvalue4 = 5.1234753829798*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_0;
    const double basisvalue5 = 3.96862696659689*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_0;
    const double basisvalue6 = 2.29128784747792*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_0;
    const double basisvalue7 = 3.24037034920393*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_1;
    const double basisvalue8 = 1.87082869338697*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_1;
    const double basisvalue9 = 1.3228756555323*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_2;
    const double basisvalue10 = 7.93725393319377*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_0;
    const double basisvalue11 = 6.70820393249937*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_0;
    const double basisvalue12 = 5.19615242270663*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_0;
    const double basisvalue13 = 3*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_0;
    const double basisvalue14 = 5.80947501931113*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_1;
    const double basisvalue15 = 4.5*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_1;
    const double basisvalue16 = 2.59807621135332*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_1;
    const double basisvalue17 = 3.67423461417477*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_2;
    const double basisvalue18 = 2.12132034355964*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_2;
    const double basisvalue19 = 1.5*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_3;
    const double basisvalue20 = 11.1242977306435*psitilde_a_4*scalings_y_4*psitilde_bs_4_0*scalings_z_4*psitilde_cs_40_0;
    const double basisvalue21 = 9.81070843517429*psitilde_a_3*scalings_y_3*psitilde_bs_3_1*scalings_z_4*psitilde_cs_31_0;
    const double basisvalue22 = 8.2915619758885*psitilde_a_2*scalings_y_2*psitilde_bs_2_2*scalings_z_4*psitilde_cs_22_0;
    const double basisvalue23 = 6.42261628933256*psitilde_a_1*scalings_y_1*psitilde_bs_1_3*scalings_z_4*psitilde_cs_13_0;
    const double basisvalue24 = 3.70809924354783*psitilde_a_0*scalings_y_0*psitilde_bs_0_4*scalings_z_4*psitilde_cs_04_0;
    const double basisvalue25 = 8.77496438739212*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_1;
    const double basisvalue26 = 7.41619848709566*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_1;
    const double basisvalue27 = 5.74456264653803*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_1;
    const double basisvalue28 = 3.3166247903554*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_1;
    const double basisvalue29 = 6.42261628933256*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_2;
    const double basisvalue30 = 4.9749371855331*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_2;
    const double basisvalue31 = 2.87228132326901*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_2;
    const double basisvalue32 = 4.06201920231798*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_3;
    const double basisvalue33 = 2.34520787991171*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_3;
    const double basisvalue34 = 1.6583123951777*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_4;
    
    // Table(s) of coefficients
    const static double coefficients0[35][35] = \
    {{-0.0137464349807053, -0.014490014748814, -0.00836581391578937, -0.00591552374999943, 0, 0, 0, 0, 0, 0, -0.00671936840905292, -0.00567890279999946, -0.00439885919382571, -0.00253968253968253, -0.00491807409042212, -0.00380952380952381, -0.00219942959691287, -0.00311046316543895, -0.0017958267458706, -0.00126984126984128, 0.0136980289516341, 0.0120805260192622, 0.010209907964538, 0.00790856070259325, 0.00456600965054471, 0.0108051509532101, 0.00913201930108942, 0.0070736317340728, 0.00408396318581522, 0.00790856070259325, 0.00612594477872282, 0.0035368158670364, 0.00500181296677923, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807054, 0.0144900147488139, -0.00836581391578936, -0.00591552374999944, 0, 0, 0, 0, 0, 0, 0.00671936840905292, -0.00567890279999947, 0.00439885919382572, -0.00253968253968254, -0.00491807409042212, 0.00380952380952381, -0.00219942959691286, 0.00311046316543896, -0.0017958267458706, -0.00126984126984127, 0.0136980289516341, -0.0120805260192622, 0.010209907964538, -0.00790856070259325, 0.00456600965054471, -0.0108051509532101, 0.00913201930108942, -0.0070736317340728, 0.00408396318581521, 0.00790856070259325, -0.00612594477872282, 0.0035368158670364, -0.00500181296677923, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807054, 0, 0.0167316278315787, -0.00591552374999945, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0101587301587302, 0, 0, -0.00659828879073858, 0, 0.0035916534917412, -0.00126984126984127, 0, 0, 0, 0, 0.0228300482527235, 0, 0, 0, -0.0163358527432608, 0, 0, 0.0106104476011092, 0, -0.00577559612561231, 0.00204198159290761},
    {-0.0137464349807054, 0, 0, 0.0177465712499983, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0126984126984127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0306297238936141},
    {0.0439885919382572, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0, 0.0406349206349206, 0, 0, 0.00439885919382573, 0, -0.0143666139669648, 0.00761904761904762, 0, 0, 0, 0, 0, 0, 0, 0, 0.0367556686723369, 0, 0, -0.0424417904044368, 0, 0.0303218796594646, -0.0122518895574456},
    {-0.0329914439536929, 0, -0.0200779533978945, -0.0141972569999987, 0, 0, -0.00969857289937746, 0, 0.0712696645099798, -0.050395263067897, 0, 0, 0, 0, 0, 0, 0.0461880215351701, 0, 0.0107749604752236, -0.019047619047619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0495154221385096, 0, -0.0606437593189292, 0.0306297238936141},
    {0.0439885919382573, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0, 0.0359165349174119, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0505364660991077, -0.0408396318581521},
    {0.0439885919382571, 0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0.0433733365754904, -0.0335968420452646, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, -0.0227156111999978, 0.0175954367753029, -0.0101587301587302, 0.00327871606028142, -0.00253968253968253, 0.00146628639794192, -0.0124418526617558, 0.00718330698348241, 0.00761904761904763, 0, 0, 0, 0, 0, 0.0243115896447228, -0.0205470434274512, 0.0159156714016638, -0.00918891716808422, -0.031634242810373, 0.0245037791148913, -0.0141472634681456, 0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, -0.0173880176985767, 0.0100389766989472, -0.0141972569999987, -0.00722888942924838, 0.00559947367421077, -0.00323285763312583, 0.0617213399848368, -0.0356348322549899, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, -0.0266666666666667, 0.01539600717839, 0.00933138949631688, -0.00538748023761179, -0.019047619047619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, -0.0285877423007065, 0.0165051407128366, -0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382572, 0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0.0311046316543896, -0.017958267458706, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, -0.0335968420452646, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, 0, -0.0117302911835352, 0.0101587301587302, -0.0229510124219699, 0.00761904761904762, -0.0014662863979419, 0.0165891368823411, -0.00718330698348239, -0.00761904761904762, 0, 0.0241610520385245, -0.0357346778758831, 0.0355885231616696, -0.0228300482527235, -0.00270128773830253, -0.0114150241263618, 0.0159156714016638, -0.0112308987609918, 0.00395428035129663, 0.00306297238936141, -0.0035368158670364, -0.00375135972508442, 0.00072194951570154, 0.00204198159290761},
    {-0.0329914439536929, -0.0173880176985767, -0.0100389766989473, 0.0141972569999987, -0.00722888942924838, 0.0615942104163185, -0.0614242950293905, -0.00685792666498186, -0.00395942580611002, 0.00559947367421077, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.0049180740904221, -0.0266666666666667, 0.0175954367753029, 0.00933138949631686, 0.00538748023761182, -0.00761904761904761, 0, 0, 0.0357346778758831, -0.0593142052694494, 0.0456600965054471, 0, -0.0091320193010894, 0, 0.00408396318581524, 0.0013180934504322, 0.00714693557517662, -0.00471575448938186, -0.00250090648338961, -0.00144389903140308, 0.0020419815929076},
    {0.0439885919382573, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484215, 0, 0, 0.0293257279588381, 0.0101587301587301, 0, -0.0101587301587302, -0.0219942959691286, 0.00207364211029264, 0.017958267458706, -0.00761904761904762, 0, 0, 0, 0.0395428035129662, -0.0456600965054471, 0, 0, -0.017684079335182, 0.0142938711503532, 0, 0.00612594477872282, 0, -0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.0439885919382572, -0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0.0433733365754904, 0.0335968420452647, 0.0193971457987549, 0.0274317066599275, 0.01583770322444, 0.0111989473484215, -0.0268774736362117, -0.0227156111999979, -0.0175954367753029, -0.0101587301587302, 0.00327871606028141, 0.00253968253968254, 0.00146628639794191, 0.0124418526617558, 0.00718330698348239, 0.00761904761904762, 0, 0, 0, 0, 0, -0.0243115896447228, -0.0205470434274512, -0.0159156714016638, -0.00918891716808422, -0.031634242810373, -0.0245037791148913, -0.0141472634681456, -0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.032991443953693, 0.0173880176985767, 0.0100389766989472, -0.0141972569999986, -0.0072288894292484, -0.00559947367421079, -0.00323285763312582, -0.0617213399848368, -0.0356348322549899, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, 0.0266666666666667, 0.01539600717839, -0.00933138949631686, -0.00538748023761177, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, 0.0285877423007065, 0.0165051407128365, 0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382572, -0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, -0.0311046316543895, -0.017958267458706, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484215, -0.0268774736362117, 0, 0.0117302911835353, 0.0101587301587301, -0.0229510124219699, -0.00761904761904762, -0.0014662863979419, -0.0165891368823411, -0.0071833069834824, -0.00761904761904762, 0, -0.0241610520385245, -0.0357346778758831, -0.0355885231616696, -0.0228300482527235, 0.00270128773830253, -0.0114150241263618, -0.0159156714016638, -0.0112308987609918, 0.00395428035129663, -0.00306297238936141, -0.0035368158670364, 0.00375135972508443, 0.000721949515701543, 0.00204198159290761},
    {-0.0329914439536929, 0.0173880176985767, -0.0100389766989473, 0.0141972569999986, -0.00722888942924838, -0.0615942104163185, -0.0614242950293904, 0.00685792666498186, -0.00395942580611, 0.00559947367421079, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042211, 0.0266666666666667, 0.0175954367753029, -0.00933138949631687, 0.0053874802376118, -0.00761904761904762, 0, 0, 0.0357346778758831, 0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108941, 0, 0.00408396318581522, 0.0013180934504322, -0.00714693557517662, -0.00471575448938187, 0.00250090648338962, -0.00144389903140308, 0.00204198159290761},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484215, 0, 0, -0.0293257279588381, 0.0101587301587301, 0, 0.0101587301587302, -0.0219942959691286, -0.00207364211029263, 0.017958267458706, -0.00761904761904762, 0, 0, 0, -0.0395428035129662, -0.0456600965054471, 0, 0, 0.017684079335182, 0.0142938711503532, 0, -0.00612594477872281, 0, 0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.0439885919382572, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484215, 0.0134387368181059, -0.0113578055999989, -0.0205280095711867, -0.0152380952380952, -0.00983614818084423, -0.0177777777777778, -0.0131965775814772, -0.0145154947720485, -0.0107749604752236, -0.0076190476190476, -0.0547921158065365, -0.0241610520385245, -0.00510495398226901, 0.00395428035129662, 0.00456600965054471, -0.0216103019064202, -0.00456600965054471, 0.0035368158670364, 0.00408396318581521, -0.00395428035129662, 0.00306297238936141, 0.0035368158670364, 0.00250090648338962, 0.00288779806280615, 0.0020419815929076},
    {-0.0329914439536929, 0, 0.0200779533978945, 0.0141972569999987, -0.0867466731509807, 0, 0.00969857289937746, 0, 0.00791885161221999, 0.00559947367421079, 0, 0.0340734167999968, 0, -0.0152380952380953, 0.0295084445425327, 0, -0.0131965775814772, 0, -0.0107749604752236, -0.00761904761904764, 0.0821881737098047, 0, -0.010209907964538, 0, 0.0045660096505447, 0, -0.00913201930108942, 0, 0.0040839631858152, -0.00790856070259325, 0, 0.00353681586703639, 0, 0.00288779806280615, 0.00204198159290761},
    {0.0439885919382572, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754903, -0.0335968420452646, 0.0193971457987549, -0.0274317066599274, 0.01583770322444, 0.0111989473484215, -0.0134387368181059, -0.0113578055999989, 0.0205280095711867, -0.0152380952380952, -0.00983614818084423, 0.0177777777777778, -0.0131965775814772, 0.0145154947720485, -0.0107749604752236, -0.00761904761904761, -0.0547921158065365, 0.0241610520385245, -0.00510495398226901, -0.00395428035129662, 0.00456600965054471, 0.0216103019064202, -0.00456600965054471, -0.0035368158670364, 0.00408396318581521, -0.00395428035129662, -0.00306297238936141, 0.00353681586703641, -0.00250090648338962, 0.00288779806280615, 0.0020419815929076},
    {0.0439885919382569, 0.139104141588614, -0.0803118135915779, -0.0567890279999946, 0.0578311154339871, 0.0335968420452646, -0.0420271492306355, 0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, -0.0586514559176762, 0.0406349206349206, 0.0393445927233769, 0.00253968253968254, -0.0109971479845643, -0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, -0.053052238005546, 0.0367556686723369, -0.0105447476034577, -0.0245037791148913, 0.0235787724469093, 0.0175063453837273, 0, -0.0122518895574456},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0, 0.0783926314389509, 0.00969857289937743, -0.0274317066599274, 0.0475131096733199, -0.0167984210226323, 0, 0, 0.0586514559176763, -0.060952380952381, 0, 0.033015873015873, 0.0241937255660415, -0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, 0.053052238005546, -0.0551335030085054, 0, -0.0326717054865217, 0.0141472634681456, 0.00875317269186366, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0, -0.0111989473484216, 0.00969857289937743, 0.0822951199797824, 0.0475131096733199, -0.0167984210226323, 0, 0, 0, 0, 0, 0.0533333333333333, -0.0461880215351701, 0.0435464843161454, 0.0251415744421884, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.057175484601413, -0.0495154221385096, -0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382572, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, 0.0578311154339871, -0.0335968420452646, -0.0420271492306356, -0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, 0.0586514559176763, 0.0406349206349206, 0.0393445927233769, -0.00253968253968253, -0.0109971479845643, 0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, 0.053052238005546, 0.0367556686723369, -0.0105447476034577, 0.0245037791148913, 0.0235787724469093, -0.0175063453837273, 0, -0.0122518895574456},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0, -0.0783926314389508, 0.00969857289937744, 0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, -0.0586514559176763, -0.060952380952381, 0, -0.033015873015873, 0.0241937255660415, 0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, -0.053052238005546, -0.0551335030085054, 0, 0.0326717054865217, 0.0141472634681456, -0.00875317269186367, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382573, 0, 0, 0.170367083999984, 0, 0.0111989473484216, 0.00969857289937742, -0.0822951199797824, 0.0475131096733199, -0.0167984210226324, 0, 0, 0, 0, 0, -0.0533333333333333, -0.0461880215351701, -0.0435464843161454, 0.0251415744421884, -0.0825396825396825, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.057175484601413, -0.0495154221385096, 0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382572, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754904, 0.0447957893936862, 0.0484928644968872, -0.0548634133198549, 0, -0.0167984210226323, 0.0806324209086351, 0.0227156111999978, -0.00586514559176761, -0.0101587301587302, -0.00327871606028142, 0.0304761904761905, 0.0271262983619253, 0.045620126426438, 0.0430998419008943, 0.0393650793650793, 0, 0, 0, 0, 0, 0.0729347689341683, 0.0205470434274512, -0.0053052238005546, -0.00918891716808421, 0.031634242810373, -0.00816792637163041, -0.0141472634681456, -0.00875317269186367, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754904, -0.0447957893936862, 0.0484928644968872, 0.0548634133198549, 0, -0.0167984210226323, -0.0806324209086352, 0.0227156111999978, 0.0058651455917676, -0.0101587301587302, -0.00327871606028142, -0.0304761904761905, 0.0271262983619253, -0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, -0.0729347689341683, 0.0205470434274512, 0.00530522380055459, -0.00918891716808422, 0.031634242810373, 0.00816792637163041, -0.0141472634681456, 0.00875317269186366, -0.0151609398297323, -0.0122518895574456},
    {0.043988591938257, 0, 0, 0.170367083999984, 0.0144577788584968, 0, -0.00323285763312582, 0, -0.0950262193466398, -0.0167984210226323, 0, 0, 0, 0, -0.0688530372659096, 0, 0.01539600717839, 0, -0.0502831488843767, -0.0825396825396825, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0738132332242037, 0, 0.0165051407128365, 0, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382574, -0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754904, -0.0447957893936862, -0.00969857289937744, 0.0548634133198549, 0.0316754064488799, 0.0391963157194754, 0.0806324209086352, 0, 0.0527863103259087, 0.060952380952381, 0.0229510124219699, 0.0101587301587302, 0.0168622935763319, -0.0124418526617558, -0.00718330698348237, -0.013968253968254, 0, 0.0724831561155734, 0.0357346778758831, -0.0118628410538899, -0.0228300482527235, -0.00810386321490759, 0.0114150241263618, -0.0053052238005546, -0.0112308987609918, -0.00395428035129662, -0.0010209907964538, -0.0035368158670364, 0.00125045324169481, 0.000721949515701528, 0.0020419815929076},
    {0.0439885919382571, 0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754903, 0.0447957893936862, -0.00969857289937744, -0.0548634133198549, 0.0316754064488799, 0.0391963157194754, -0.0806324209086351, 0, -0.0527863103259086, 0.060952380952381, 0.0229510124219699, -0.0101587301587302, 0.0168622935763319, 0.0124418526617558, -0.00718330698348238, -0.013968253968254, 0, -0.0724831561155734, 0.0357346778758831, 0.0118628410538899, -0.0228300482527235, 0.00810386321490758, 0.0114150241263618, 0.0053052238005546, -0.0112308987609918, -0.00395428035129663, 0.0010209907964538, -0.0035368158670364, -0.00125045324169481, 0.000721949515701529, 0.0020419815929076},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0.0144577788584968, 0, -0.0614242950293904, 0, -0.0633508128977598, 0.0391963157194754, 0, -0.0681468335999936, 0, -0.0914285714285714, 0.00983614818084424, 0, 0.0285925847598672, 0, 0.0143666139669648, -0.013968253968254, 0, 0, -0.0714693557517662, 0, 0.0456600965054471, 0, 0.0182640386021788, 0, 0.0040839631858152, -0.00263618690086442, 0, -0.00471575448938187, 0, -0.00144389903140307, 0.0020419815929076},
    {0.351908735506058, 0, 0, 0, -0.115662230867974, 0, -0.129314305325032, 0, 0, -0.134387368181059, 0, -0.0908624447999914, 0, 0.0406349206349207, -0.0786891854467539, 0, -0.0879771838765144, 0, 0, 0.0711111111111111, 0, 0, 0, 0, 0, 0, -0.0821881737098047, 0, 0.0367556686723369, 0.0210894952069153, 0, 0.0235787724469093, 0, 0, -0.0122518895574456}};
    
    // Interesting (new) part
    // Tables of derivatives of the polynomial base (transpose)
    const static double dmats0[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {6.32455532033676, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 11.2249721603218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.58257569495584, 0, 8.36660026534075, -1.18321595661992, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.74165738677394, 0, 0, 8.69482604771366, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.49909083394702, 0, -3.34664010613631, -2.36643191323985, 15.4919333848297, 0, 0.692820323027556, 0, 0.565685424949245, 0.400000000000005, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 4.89897948556635, 0, 0, 0, 14.1985914794391, 0, -0.82807867121082, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.60000000000001, 0, 8.76356092008266, -1.54919333848297, 0, 0, 9.52470471983253, 0, -1.48131215963609, 0.261861468283193, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 4.24264068711929, 0, 0, 0, 0, 0, 14.3427433120127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.04792266088297e-14, 0, 0, 0, 0, -1.47304043962571e-14, 0, 0},
    {3.11769145362398, 0, 3.16227766016838, 4.91934955049954, 0, 0, 0, 0, 10.690449676497, -2.41897262725905, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.54558441227157, 0, 0, 7.66811580507232, 0, 0, 0, 0, 0, 10.3691851174526, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 11.6057691494799, 0, 0, 0, -4.20458932936041, 0, -3.43303281162798, 0, 0, 19.6214168703486, 0, 0.611677741841199, 0, 0, 0.529728463363978, 0, 0.432521479156786, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.53137212479104, 0, 3.54562104171167, -2.50713268211203, 4.7871355387817, 0, -5.56626745075492, 0, -1.04880884817015, 0.741619848709561, 0, 18.8034951158403, 0, 1.68183573174415, -0.603122387046456, 0, 0.701283781217662, 0, 0.132137494528679, -0.0934353184302344, 0, 0, 0, 0, -1.83555802032862e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 2.59512887494071, 0, 0, 0, 10.0285307284481, 0, -0.767649473578741, 0, 0, 0, 0, 16.4130361329658, 0, 0, -1.26347611061158, 0, 0.0967147429123328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.96647939483826, 0, 8.12403840463596, -1.64130361329658, 0, 0, 11.7728501222091, 0, -2.40312296813959, 0.48550415622761, 0, 0, 0, 10.2761860629321, 0, 0, -1.48323969741913, 0, 0.302765035409751, -0.0611677741841196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.05298244095218, 0, -1.58564993434418, 4.4848952846511, 4.28174419288838, 0, 0.191485421551268, 0, -3.75233260785874, -4.31161222746202, 0, 0, 0, 0, 18.8807171866294, 0, 0.84437134186504, 0, 1.18187368057056, 1.04463861754668, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 2.32115382989599, 0, 0, 0, 3.92428337406972, 0, 5.49285249860477, 0, 0, 0, 0, 0, 0, 0, 17.3044631365565, 0, -1.73008591662715, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.46547001870808e-14, 0, 0, 0, 0, 0, 0, 0},
    {2.65329983228432, 0, 4.15220619990514, 2.93605316083775, 0, 0, 2.63248931621764, 0, 9.82591326180786, -2.8226127713774, 0, 0, 0, 0, 0, 0, 11.6081867662439, 0, -3.09487177319465, 0.683876505540243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 2.01017818278148, 0, 0, 0, 0, 0, 8.91928088068603, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16.8558564884489, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.26487362250849e-14, 0, 0},
    {2.2978250586152, 0, 1.49829835452879, 5.50917601898534, 0, 0, 0, 0, 6.64803945320938, 4.13676892548485, 0, 0, 0, 0, 0, 0, 0, 0, 12.5636136423842, -3.55352656109507, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87616630392936, 0, 0, 6.22830929985769, 0, 0, 0, 0, 0, 11.0541524195338, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11.6057691494799, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    const static double dmats1[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.16227766016838, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.47722557505166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.95803989154981, 5.61248608016091, -1.08012344973464, -0.763762615825973, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.29128784747792, 7.24568837309472, 4.18330013267038, -0.591607978309961, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-2.64575131106459, 0, 9.66091783079296, 0.683130051063972, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87082869338697, 0, 0, 4.34741302385683, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.24037034920393, 0, 0, 7.52994023880668, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.74954541697351, 5.79655069847578, -1.67332005306815, -1.18321595661993, 7.74596669241484, -1.2, 0.346410161513782, -0.979795897113277, 0.282842712474625, 0.200000000000005, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.32379000772445, 2.44948974278317, 2.82842712474619, -1, 9.16515138991168, 7.09929573971954, -2.04939015319192, -0.414039335605409, -0.478091443733757, 0.1690308509457, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.8, -5.69209978830308, 4.38178046004133, -0.774596669241485, 0, 10.998181667894, 4.76235235991627, 0.962140470884731, -0.740656079818044, 0.130930734141594, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.19615242270664, 0, -3.16227766016838, -2.23606797749979, 0, 1.15073592506104e-14, 13.7477270848675, 0, 0.534522483824844, 0.377964473009229, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.01246117974981, 2.12132034355964, -0.408248290463862, 3.17542648054294, 0, 0, 0, 7.17137165600636, -1.38013111868471, -1.56144011671765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.55884572681199, 2.73861278752583, 1.58113883008419, 2.45967477524977, 0, 0, 0, 9.25820099772551, 5.34522483824849, -1.20948631362952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-1.80000000000001, 0, 3.65148371670111, -2.84018778721877, 0, 0, 0, 0, 12.3442679969674, 1.39659449751035, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.27279220613578, 0, 0, 3.83405790253616, 0, 0, 0, 0, 0, 5.18459255872628, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.20454076850486, 0, 0, 6.64078308635359, 0, 0, 0, 0, 0, 8.97997772825745, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.56904651573304, 5.80288457473998, -2.01017818278147, -1.42141062443803, 8.14215222512716, -2.1022946646802, 0.728256234341424, -1.71651640581399, 0.594618725379073, 0.420458932936044, 9.81070843517429, -1.18450885369836, 0.305838870920599, -0.105945692672796, -1.02581475831036, 0.264864231681989, -0.0917516612761798, 0.216260739578392, -0.0749149177264397, -0.0529728463363978, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.26568606239552, 3.07059789431495, 1.77281052085584, -1.25356634105602, 2.39356776939085, 6.30376871403132, -2.78313372537745, -0.908295106229245, -0.524404424085072, 0.370809924354781, 11.1242977306435, 9.40174755792013, -2.42752078113806, 0.840917865872078, -0.301561193523229, -0.794200206656967, 0.350641890608832, 0.114434427054264, 0.066068747264339, -0.0467176592151171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.91485421551267, 1.29756443747035, 3.74574588632197, -1.05945692672795, -8.09173593712687, 5.01426536422407, 1.80936716113936, -0.383824736789365, -1.1080065755349, 0.313391585264001, 0, 12.7134831207354, 8.2065180664829, -2.84282124887606, 1.01946290306866, -0.631738055305791, -0.227958835180079, 0.048357371456166, 0.1395957071376, -0.0394836284566123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741913, 7.03562363973515, 4.06201920231798, -0.82065180664829, 0, -6.79705818718657, 5.88642506110457, -2.08116553882675, -1.2015614840698, 0.242752078113806, 0, 0, 14.8323969741913, 5.13809303146605, 0, 0.856348838577676, -0.741619848709566, 0.262202212042541, 0.151382517704876, -0.0305838870920601, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-3.42539535431072, 0, 9.38083151964686, 1.89521416591738, 0, 0, -3.39852909359331, 0, -2.77488738510233, -0.560611910581399, 0, 0, 0, 17.7988763690296, 0, 0, 0.428174419288838, 0, 0.349602949390051, 0.0706304617818607, 0, 0, 0, 0, -1.20672813501736e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.02649122047609, 2.74642624930239, -0.792824967172091, 2.24244764232555, 2.14087209644419, -0.331662479035539, 0.0957427107756368, 6.49923072370876, -1.87616630392937, -2.15580611373101, 0, 0, 0, 0, 9.44035859331468, -1.46249406456536, 0.422185670932519, -2.04706526287664, 0.590936840285281, 0.522319308773342, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.71269767715535, 1.16057691494799, 1.34011878852098, 1.89521416591737, 2.53311402559511, 1.96214168703486, -0.566421515598879, 2.74642624930239, 3.17129986868837, -1.82198870938951, 0, 0, 0, 0, 11.1699829238239, 8.65223156827827, -2.49768411251822, -0.865042958313572, -0.998865569685857, 0.441440386136647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.32664991614216, -2.69693703815182, 2.07610309995257, 1.46802658041887, 0, 3.03973683071413, 1.31624465810882, -6.382117875081, 4.91295663090393, -1.4113063856887, 0, 0, 0, 0, 0, 13.4039795085887, 5.80409338312195, 2.01017818278147, -1.54743588659733, 0.341938252770123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.82970843102536, 0, -1.49829835452878, 4.23782770691181, 0, 0, 3.79967103839266, 0, -3.54562104171167, -4.07409060843206, 0, 0, 0, 0, 0, 0, 16.7549743857359, 0, 1.11676565710082, 0.987090711415302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741913, 1.00508909139074, -0.193429485824667, 3.55615782880926, 0, 0, 0, 4.45964044034301, -0.858258202906998, 2.67027285925187, 0, 0, 0, 0, 0, 0, 0, 8.42792824422443, -1.62195554683794, -2.29379153190448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.1489125293076, 1.29756443747036, 0.749149177264395, 2.75458800949267, 0, 0, 0, 5.75737105184053, 3.32401972660469, 2.06838446274243, 0, 0, 0, 0, 0, 0, 0, 10.8804085776374, 6.2818068211921, -1.77676328054753, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-1.32664991614217, 0, 1.73008591662714, -3.18072425757423, 0, 0, 0, 0, 7.67649473578739, -2.38836465270397, 0, 0, 0, 0, 0, 0, 0, 0, 14.5072114368499, 2.05162951662072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.938083151964681, 0, 0, 3.11415464992885, 0, 0, 0, 0, 0, 5.52707620976691, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.80288457473997, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.62480768092718, 0, 0, 5.39387407630363, 0, 0, 0, 0, 0, 9.57317681262151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10.0508909139073, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    const static double dmats2[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.16227766016838, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.82574185835055, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.16397779494322, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.95803989154981, 5.61248608016091, -1.08012344973464, -0.763762615825973, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.29128784747792, 1.44913767461894, 4.18330013267038, -0.591607978309961, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.32287565553229, 0, 3.86436713231718, -0.341565025531986, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87082869338697, 7.09929573971954, 0, 4.34741302385683, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.08012344973464, 0, 7.09929573971954, 2.50998007960223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-3.81881307912986, 0, 0, 8.87411967464942, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.74954541697351, 5.79655069847578, -1.67332005306815, -1.18321595661993, 7.74596669241484, -1.2, 0.346410161513782, -0.979795897113276, 0.282842712474624, 0.200000000000004, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.32379000772444, 2.44948974278317, 2.82842712474619, -0.999999999999999, 1.30930734141596, 7.09929573971954, -2.04939015319192, -0.414039335605411, -0.478091443733757, 0.169030850945702, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.8, 0.632455532033675, 4.38178046004133, -0.774596669241484, 0, 3.14233761939829, 4.76235235991627, -0.106904496764967, -0.740656079818044, 0.130930734141596, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.03923048454133, 0, 3.16227766016838, -0.447213595499958, 0, 0, 5.89188303637179, 0, -0.53452248382485, 0.0755928946018457, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.01246117974982, 2.12132034355965, -0.408248290463861, 3.17542648054294, 9.07114735222145, 0, 0, 7.17137165600636, -1.38013111868471, -1.56144011671765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.55884572681199, 0.547722557505168, 1.58113883008419, 2.45967477524977, 0, 9.07114735222145, 0, 1.8516401995451, 5.34522483824849, -1.20948631362952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.900000000000005, 0, 1.46059348668044, 1.42009389360938, 0, 0, 9.07114735222146, 0, 4.93770719878694, -0.698297248755171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.27279220613578, -6.26099033699941, 0, 3.83405790253616, 0, 0, 0, 10.5830052442584, 0, 5.18459255872629, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.73484692283495, 0, -6.26099033699941, 2.21359436211787, 0, 0, 0, 0, 10.5830052442584, 2.99332590941916, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.71576766497728, 0, 0, -4.69574275274956, 0, 0, 0, 0, 0, 12.69960629311, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.14660884953377e-14},
    {2.56904651573304, 5.80288457473998, -2.01017818278147, -1.42141062443803, 8.14215222512715, -2.1022946646802, 0.728256234341423, -1.71651640581399, 0.594618725379073, 0.420458932936043, 9.81070843517429, -1.18450885369836, 0.305838870920599, -0.105945692672796, -1.02581475831036, 0.264864231681989, -0.0917516612761797, 0.216260739578392, -0.0749149177264397, -0.0529728463363978, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.26568606239552, 3.07059789431495, 1.77281052085584, -1.25356634105602, 2.39356776939085, 6.30376871403132, -2.78313372537745, -0.908295106229244, -0.524404424085071, 0.370809924354782, 1.23603308118261, 9.40174755792013, -2.42752078113806, 0.840917865872078, -0.301561193523228, -0.794200206656968, 0.350641890608831, 0.114434427054264, 0.0660687472643394, -0.0467176592151163, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.91485421551268, 1.29756443747035, 3.74574588632197, -1.05945692672795, 0.404586796856348, 5.01426536422407, 1.80936716113936, -0.383824736789368, -1.1080065755349, 0.313391585264003, 0, 2.82521847127454, 8.2065180664829, -2.84282124887606, -0.050973145153435, -0.631738055305789, -0.227958835180081, 0.0483573714561672, 0.139595707137601, -0.0394836284566111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741913, 0.335029697130247, 4.06201920231798, -0.820651806648289, 0, 1.69926454679665, 5.88642506110457, -0.0991031208965148, -1.2015614840698, 0.242752078113804, 0, 0, 4.94413232473044, 5.13809303146605, 0, -0.21408720964442, -0.741619848709566, 0.0124858196210736, 0.151382517704876, -0.0305838870920597, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.856348838577674, 0, 2.68023757704196, -0.473803541479343, 0, 0, 5.09779364038993, 0, -0.792824967172097, 0.140152977645346, 0, 0, 0, 7.91061171956871, 0, 0, -0.642261628933256, 0, 0.0998865569685867, -0.0176576154454656, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.02649122047609, 2.74642624930238, -0.792824967172091, 2.24244764232555, 2.14087209644419, -0.33166247903554, 0.0957427107756354, 6.49923072370876, -1.87616630392937, -2.15580611373101, 11.0554159678513, 0, 0, 0, 9.44035859331468, -1.46249406456536, 0.422185670932521, -2.04706526287664, 0.59093684028528, 0.522319308773342, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.71269767715535, 1.16057691494799, 1.34011878852098, 1.89521416591737, 0.361873432227875, 1.96214168703486, -0.566421515598883, 2.74642624930239, 3.17129986868837, -1.82198870938951, 0, 11.0554159678513, 0, 0, 1.59571184626056, 8.65223156827827, -2.49768411251822, -0.865042958313574, -0.998865569685858, 0.441440386136646, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.32664991614216, 0.299659670905758, 2.07610309995257, 1.46802658041887, 0, 0.868496237346892, 1.31624465810882, 0.709124208342336, 4.91295663090393, -1.4113063856887, 0, 0, 11.0554159678513, 0, 0, 3.82970843102535, 5.80409338312195, -0.223353131420164, -1.54743588659732, 0.341938252770122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.765941686205066, 0, 1.49829835452879, 0.847565541382365, 0, 0, 1.62843044502542, 0, 3.54562104171167, -0.814818121686414, 0, 0, 0, 11.0554159678513, 0, 0, 7.18070330817254, 0, -1.11676565710082, 0.197418142283061, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741913, 1.00508909139074, -0.193429485824666, 3.55615782880926, -8.46157280212812, 0, 0, 4.45964044034302, -0.858258202906997, 2.67027285925187, 0, 0, 0, 0, 12.4373429638328, 0, 0, 8.42792824422443, -1.62195554683794, -2.29379153190448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.1489125293076, 0.259512887494072, 0.749149177264393, 2.75458800949267, 0, -8.46157280212812, 0, 1.15147421036811, 3.32401972660469, 2.06838446274243, 0, 0, 0, 0, 0, 12.4373429638327, 0, 2.17608171552749, 6.2818068211921, -1.77676328054754, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.663324958071069, 0, 0.692034366650856, 1.59036212878711, 0, 0, -8.46157280212813, 0, 3.07059789431496, 1.19418232635197, 0, 0, 0, 0, 0, 0, 12.4373429638327, 0, 5.80288457473997, -1.02581475831036, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.938083151964677, 7.62808987244126, 0, 3.11415464992885, 0, 0, 0, -7.5213980463361, 0, 5.52707620976691, 0, 0, 0, 0, 0, 0, 0, 14.2141062443803, 0, 5.80288457473997, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.541602560309057, 0, 7.62808987244125, 1.79795802543454, 0, 0, 0, 0, -7.52139804633611, 3.19105893754049, 0, 0, 0, 0, 0, 0, 0, 0, 14.2141062443803, 3.35029697130245, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-5.36159180343549, 0, 0, 8.8994381845148, 0, 0, 0, 0, 0, -5.26497863243526, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16.583123951777, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    // Compute reference derivatives
    // Declare pointer to array of derivatives on FIAT element
    double *derivatives = new double [num_derivatives];
    
    // Declare coefficients
    double coeff0_0 = 0;
    double coeff0_1 = 0;
    double coeff0_2 = 0;
    double coeff0_3 = 0;
    double coeff0_4 = 0;
    double coeff0_5 = 0;
    double coeff0_6 = 0;
    double coeff0_7 = 0;
    double coeff0_8 = 0;
    double coeff0_9 = 0;
    double coeff0_10 = 0;
    double coeff0_11 = 0;
    double coeff0_12 = 0;
    double coeff0_13 = 0;
    double coeff0_14 = 0;
    double coeff0_15 = 0;
    double coeff0_16 = 0;
    double coeff0_17 = 0;
    double coeff0_18 = 0;
    double coeff0_19 = 0;
    double coeff0_20 = 0;
    double coeff0_21 = 0;
    double coeff0_22 = 0;
    double coeff0_23 = 0;
    double coeff0_24 = 0;
    double coeff0_25 = 0;
    double coeff0_26 = 0;
    double coeff0_27 = 0;
    double coeff0_28 = 0;
    double coeff0_29 = 0;
    double coeff0_30 = 0;
    double coeff0_31 = 0;
    double coeff0_32 = 0;
    double coeff0_33 = 0;
    double coeff0_34 = 0;
    
    // Declare new coefficients
    double new_coeff0_0 = 0;
    double new_coeff0_1 = 0;
    double new_coeff0_2 = 0;
    double new_coeff0_3 = 0;
    double new_coeff0_4 = 0;
    double new_coeff0_5 = 0;
    double new_coeff0_6 = 0;
    double new_coeff0_7 = 0;
    double new_coeff0_8 = 0;
    double new_coeff0_9 = 0;
    double new_coeff0_10 = 0;
    double new_coeff0_11 = 0;
    double new_coeff0_12 = 0;
    double new_coeff0_13 = 0;
    double new_coeff0_14 = 0;
    double new_coeff0_15 = 0;
    double new_coeff0_16 = 0;
    double new_coeff0_17 = 0;
    double new_coeff0_18 = 0;
    double new_coeff0_19 = 0;
    double new_coeff0_20 = 0;
    double new_coeff0_21 = 0;
    double new_coeff0_22 = 0;
    double new_coeff0_23 = 0;
    double new_coeff0_24 = 0;
    double new_coeff0_25 = 0;
    double new_coeff0_26 = 0;
    double new_coeff0_27 = 0;
    double new_coeff0_28 = 0;
    double new_coeff0_29 = 0;
    double new_coeff0_30 = 0;
    double new_coeff0_31 = 0;
    double new_coeff0_32 = 0;
    double new_coeff0_33 = 0;
    double new_coeff0_34 = 0;
    
    // Loop possible derivatives
    for (unsigned int deriv_num = 0; deriv_num < num_derivatives; deriv_num++)
    {
      // Get values from coefficients array
      new_coeff0_0 = coefficients0[dof][0];
      new_coeff0_1 = coefficients0[dof][1];
      new_coeff0_2 = coefficients0[dof][2];
      new_coeff0_3 = coefficients0[dof][3];
      new_coeff0_4 = coefficients0[dof][4];
      new_coeff0_5 = coefficients0[dof][5];
      new_coeff0_6 = coefficients0[dof][6];
      new_coeff0_7 = coefficients0[dof][7];
      new_coeff0_8 = coefficients0[dof][8];
      new_coeff0_9 = coefficients0[dof][9];
      new_coeff0_10 = coefficients0[dof][10];
      new_coeff0_11 = coefficients0[dof][11];
      new_coeff0_12 = coefficients0[dof][12];
      new_coeff0_13 = coefficients0[dof][13];
      new_coeff0_14 = coefficients0[dof][14];
      new_coeff0_15 = coefficients0[dof][15];
      new_coeff0_16 = coefficients0[dof][16];
      new_coeff0_17 = coefficients0[dof][17];
      new_coeff0_18 = coefficients0[dof][18];
      new_coeff0_19 = coefficients0[dof][19];
      new_coeff0_20 = coefficients0[dof][20];
      new_coeff0_21 = coefficients0[dof][21];
      new_coeff0_22 = coefficients0[dof][22];
      new_coeff0_23 = coefficients0[dof][23];
      new_coeff0_24 = coefficients0[dof][24];
      new_coeff0_25 = coefficients0[dof][25];
      new_coeff0_26 = coefficients0[dof][26];
      new_coeff0_27 = coefficients0[dof][27];
      new_coeff0_28 = coefficients0[dof][28];
      new_coeff0_29 = coefficients0[dof][29];
      new_coeff0_30 = coefficients0[dof][30];
      new_coeff0_31 = coefficients0[dof][31];
      new_coeff0_32 = coefficients0[dof][32];
      new_coeff0_33 = coefficients0[dof][33];
      new_coeff0_34 = coefficients0[dof][34];
    
      // Loop derivative order
      for (unsigned int j = 0; j < n; j++)
      {
        // Update old coefficients
        coeff0_0 = new_coeff0_0;
        coeff0_1 = new_coeff0_1;
        coeff0_2 = new_coeff0_2;
        coeff0_3 = new_coeff0_3;
        coeff0_4 = new_coeff0_4;
        coeff0_5 = new_coeff0_5;
        coeff0_6 = new_coeff0_6;
        coeff0_7 = new_coeff0_7;
        coeff0_8 = new_coeff0_8;
        coeff0_9 = new_coeff0_9;
        coeff0_10 = new_coeff0_10;
        coeff0_11 = new_coeff0_11;
        coeff0_12 = new_coeff0_12;
        coeff0_13 = new_coeff0_13;
        coeff0_14 = new_coeff0_14;
        coeff0_15 = new_coeff0_15;
        coeff0_16 = new_coeff0_16;
        coeff0_17 = new_coeff0_17;
        coeff0_18 = new_coeff0_18;
        coeff0_19 = new_coeff0_19;
        coeff0_20 = new_coeff0_20;
        coeff0_21 = new_coeff0_21;
        coeff0_22 = new_coeff0_22;
        coeff0_23 = new_coeff0_23;
        coeff0_24 = new_coeff0_24;
        coeff0_25 = new_coeff0_25;
        coeff0_26 = new_coeff0_26;
        coeff0_27 = new_coeff0_27;
        coeff0_28 = new_coeff0_28;
        coeff0_29 = new_coeff0_29;
        coeff0_30 = new_coeff0_30;
        coeff0_31 = new_coeff0_31;
        coeff0_32 = new_coeff0_32;
        coeff0_33 = new_coeff0_33;
        coeff0_34 = new_coeff0_34;
    
        if(combinations[deriv_num][j] == 0)
        {
          new_coeff0_0 = coeff0_0*dmats0[0][0] + coeff0_1*dmats0[1][0] + coeff0_2*dmats0[2][0] + coeff0_3*dmats0[3][0] + coeff0_4*dmats0[4][0] + coeff0_5*dmats0[5][0] + coeff0_6*dmats0[6][0] + coeff0_7*dmats0[7][0] + coeff0_8*dmats0[8][0] + coeff0_9*dmats0[9][0] + coeff0_10*dmats0[10][0] + coeff0_11*dmats0[11][0] + coeff0_12*dmats0[12][0] + coeff0_13*dmats0[13][0] + coeff0_14*dmats0[14][0] + coeff0_15*dmats0[15][0] + coeff0_16*dmats0[16][0] + coeff0_17*dmats0[17][0] + coeff0_18*dmats0[18][0] + coeff0_19*dmats0[19][0] + coeff0_20*dmats0[20][0] + coeff0_21*dmats0[21][0] + coeff0_22*dmats0[22][0] + coeff0_23*dmats0[23][0] + coeff0_24*dmats0[24][0] + coeff0_25*dmats0[25][0] + coeff0_26*dmats0[26][0] + coeff0_27*dmats0[27][0] + coeff0_28*dmats0[28][0] + coeff0_29*dmats0[29][0] + coeff0_30*dmats0[30][0] + coeff0_31*dmats0[31][0] + coeff0_32*dmats0[32][0] + coeff0_33*dmats0[33][0] + coeff0_34*dmats0[34][0];
          new_coeff0_1 = coeff0_0*dmats0[0][1] + coeff0_1*dmats0[1][1] + coeff0_2*dmats0[2][1] + coeff0_3*dmats0[3][1] + coeff0_4*dmats0[4][1] + coeff0_5*dmats0[5][1] + coeff0_6*dmats0[6][1] + coeff0_7*dmats0[7][1] + coeff0_8*dmats0[8][1] + coeff0_9*dmats0[9][1] + coeff0_10*dmats0[10][1] + coeff0_11*dmats0[11][1] + coeff0_12*dmats0[12][1] + coeff0_13*dmats0[13][1] + coeff0_14*dmats0[14][1] + coeff0_15*dmats0[15][1] + coeff0_16*dmats0[16][1] + coeff0_17*dmats0[17][1] + coeff0_18*dmats0[18][1] + coeff0_19*dmats0[19][1] + coeff0_20*dmats0[20][1] + coeff0_21*dmats0[21][1] + coeff0_22*dmats0[22][1] + coeff0_23*dmats0[23][1] + coeff0_24*dmats0[24][1] + coeff0_25*dmats0[25][1] + coeff0_26*dmats0[26][1] + coeff0_27*dmats0[27][1] + coeff0_28*dmats0[28][1] + coeff0_29*dmats0[29][1] + coeff0_30*dmats0[30][1] + coeff0_31*dmats0[31][1] + coeff0_32*dmats0[32][1] + coeff0_33*dmats0[33][1] + coeff0_34*dmats0[34][1];
          new_coeff0_2 = coeff0_0*dmats0[0][2] + coeff0_1*dmats0[1][2] + coeff0_2*dmats0[2][2] + coeff0_3*dmats0[3][2] + coeff0_4*dmats0[4][2] + coeff0_5*dmats0[5][2] + coeff0_6*dmats0[6][2] + coeff0_7*dmats0[7][2] + coeff0_8*dmats0[8][2] + coeff0_9*dmats0[9][2] + coeff0_10*dmats0[10][2] + coeff0_11*dmats0[11][2] + coeff0_12*dmats0[12][2] + coeff0_13*dmats0[13][2] + coeff0_14*dmats0[14][2] + coeff0_15*dmats0[15][2] + coeff0_16*dmats0[16][2] + coeff0_17*dmats0[17][2] + coeff0_18*dmats0[18][2] + coeff0_19*dmats0[19][2] + coeff0_20*dmats0[20][2] + coeff0_21*dmats0[21][2] + coeff0_22*dmats0[22][2] + coeff0_23*dmats0[23][2] + coeff0_24*dmats0[24][2] + coeff0_25*dmats0[25][2] + coeff0_26*dmats0[26][2] + coeff0_27*dmats0[27][2] + coeff0_28*dmats0[28][2] + coeff0_29*dmats0[29][2] + coeff0_30*dmats0[30][2] + coeff0_31*dmats0[31][2] + coeff0_32*dmats0[32][2] + coeff0_33*dmats0[33][2] + coeff0_34*dmats0[34][2];
          new_coeff0_3 = coeff0_0*dmats0[0][3] + coeff0_1*dmats0[1][3] + coeff0_2*dmats0[2][3] + coeff0_3*dmats0[3][3] + coeff0_4*dmats0[4][3] + coeff0_5*dmats0[5][3] + coeff0_6*dmats0[6][3] + coeff0_7*dmats0[7][3] + coeff0_8*dmats0[8][3] + coeff0_9*dmats0[9][3] + coeff0_10*dmats0[10][3] + coeff0_11*dmats0[11][3] + coeff0_12*dmats0[12][3] + coeff0_13*dmats0[13][3] + coeff0_14*dmats0[14][3] + coeff0_15*dmats0[15][3] + coeff0_16*dmats0[16][3] + coeff0_17*dmats0[17][3] + coeff0_18*dmats0[18][3] + coeff0_19*dmats0[19][3] + coeff0_20*dmats0[20][3] + coeff0_21*dmats0[21][3] + coeff0_22*dmats0[22][3] + coeff0_23*dmats0[23][3] + coeff0_24*dmats0[24][3] + coeff0_25*dmats0[25][3] + coeff0_26*dmats0[26][3] + coeff0_27*dmats0[27][3] + coeff0_28*dmats0[28][3] + coeff0_29*dmats0[29][3] + coeff0_30*dmats0[30][3] + coeff0_31*dmats0[31][3] + coeff0_32*dmats0[32][3] + coeff0_33*dmats0[33][3] + coeff0_34*dmats0[34][3];
          new_coeff0_4 = coeff0_0*dmats0[0][4] + coeff0_1*dmats0[1][4] + coeff0_2*dmats0[2][4] + coeff0_3*dmats0[3][4] + coeff0_4*dmats0[4][4] + coeff0_5*dmats0[5][4] + coeff0_6*dmats0[6][4] + coeff0_7*dmats0[7][4] + coeff0_8*dmats0[8][4] + coeff0_9*dmats0[9][4] + coeff0_10*dmats0[10][4] + coeff0_11*dmats0[11][4] + coeff0_12*dmats0[12][4] + coeff0_13*dmats0[13][4] + coeff0_14*dmats0[14][4] + coeff0_15*dmats0[15][4] + coeff0_16*dmats0[16][4] + coeff0_17*dmats0[17][4] + coeff0_18*dmats0[18][4] + coeff0_19*dmats0[19][4] + coeff0_20*dmats0[20][4] + coeff0_21*dmats0[21][4] + coeff0_22*dmats0[22][4] + coeff0_23*dmats0[23][4] + coeff0_24*dmats0[24][4] + coeff0_25*dmats0[25][4] + coeff0_26*dmats0[26][4] + coeff0_27*dmats0[27][4] + coeff0_28*dmats0[28][4] + coeff0_29*dmats0[29][4] + coeff0_30*dmats0[30][4] + coeff0_31*dmats0[31][4] + coeff0_32*dmats0[32][4] + coeff0_33*dmats0[33][4] + coeff0_34*dmats0[34][4];
          new_coeff0_5 = coeff0_0*dmats0[0][5] + coeff0_1*dmats0[1][5] + coeff0_2*dmats0[2][5] + coeff0_3*dmats0[3][5] + coeff0_4*dmats0[4][5] + coeff0_5*dmats0[5][5] + coeff0_6*dmats0[6][5] + coeff0_7*dmats0[7][5] + coeff0_8*dmats0[8][5] + coeff0_9*dmats0[9][5] + coeff0_10*dmats0[10][5] + coeff0_11*dmats0[11][5] + coeff0_12*dmats0[12][5] + coeff0_13*dmats0[13][5] + coeff0_14*dmats0[14][5] + coeff0_15*dmats0[15][5] + coeff0_16*dmats0[16][5] + coeff0_17*dmats0[17][5] + coeff0_18*dmats0[18][5] + coeff0_19*dmats0[19][5] + coeff0_20*dmats0[20][5] + coeff0_21*dmats0[21][5] + coeff0_22*dmats0[22][5] + coeff0_23*dmats0[23][5] + coeff0_24*dmats0[24][5] + coeff0_25*dmats0[25][5] + coeff0_26*dmats0[26][5] + coeff0_27*dmats0[27][5] + coeff0_28*dmats0[28][5] + coeff0_29*dmats0[29][5] + coeff0_30*dmats0[30][5] + coeff0_31*dmats0[31][5] + coeff0_32*dmats0[32][5] + coeff0_33*dmats0[33][5] + coeff0_34*dmats0[34][5];
          new_coeff0_6 = coeff0_0*dmats0[0][6] + coeff0_1*dmats0[1][6] + coeff0_2*dmats0[2][6] + coeff0_3*dmats0[3][6] + coeff0_4*dmats0[4][6] + coeff0_5*dmats0[5][6] + coeff0_6*dmats0[6][6] + coeff0_7*dmats0[7][6] + coeff0_8*dmats0[8][6] + coeff0_9*dmats0[9][6] + coeff0_10*dmats0[10][6] + coeff0_11*dmats0[11][6] + coeff0_12*dmats0[12][6] + coeff0_13*dmats0[13][6] + coeff0_14*dmats0[14][6] + coeff0_15*dmats0[15][6] + coeff0_16*dmats0[16][6] + coeff0_17*dmats0[17][6] + coeff0_18*dmats0[18][6] + coeff0_19*dmats0[19][6] + coeff0_20*dmats0[20][6] + coeff0_21*dmats0[21][6] + coeff0_22*dmats0[22][6] + coeff0_23*dmats0[23][6] + coeff0_24*dmats0[24][6] + coeff0_25*dmats0[25][6] + coeff0_26*dmats0[26][6] + coeff0_27*dmats0[27][6] + coeff0_28*dmats0[28][6] + coeff0_29*dmats0[29][6] + coeff0_30*dmats0[30][6] + coeff0_31*dmats0[31][6] + coeff0_32*dmats0[32][6] + coeff0_33*dmats0[33][6] + coeff0_34*dmats0[34][6];
          new_coeff0_7 = coeff0_0*dmats0[0][7] + coeff0_1*dmats0[1][7] + coeff0_2*dmats0[2][7] + coeff0_3*dmats0[3][7] + coeff0_4*dmats0[4][7] + coeff0_5*dmats0[5][7] + coeff0_6*dmats0[6][7] + coeff0_7*dmats0[7][7] + coeff0_8*dmats0[8][7] + coeff0_9*dmats0[9][7] + coeff0_10*dmats0[10][7] + coeff0_11*dmats0[11][7] + coeff0_12*dmats0[12][7] + coeff0_13*dmats0[13][7] + coeff0_14*dmats0[14][7] + coeff0_15*dmats0[15][7] + coeff0_16*dmats0[16][7] + coeff0_17*dmats0[17][7] + coeff0_18*dmats0[18][7] + coeff0_19*dmats0[19][7] + coeff0_20*dmats0[20][7] + coeff0_21*dmats0[21][7] + coeff0_22*dmats0[22][7] + coeff0_23*dmats0[23][7] + coeff0_24*dmats0[24][7] + coeff0_25*dmats0[25][7] + coeff0_26*dmats0[26][7] + coeff0_27*dmats0[27][7] + coeff0_28*dmats0[28][7] + coeff0_29*dmats0[29][7] + coeff0_30*dmats0[30][7] + coeff0_31*dmats0[31][7] + coeff0_32*dmats0[32][7] + coeff0_33*dmats0[33][7] + coeff0_34*dmats0[34][7];
          new_coeff0_8 = coeff0_0*dmats0[0][8] + coeff0_1*dmats0[1][8] + coeff0_2*dmats0[2][8] + coeff0_3*dmats0[3][8] + coeff0_4*dmats0[4][8] + coeff0_5*dmats0[5][8] + coeff0_6*dmats0[6][8] + coeff0_7*dmats0[7][8] + coeff0_8*dmats0[8][8] + coeff0_9*dmats0[9][8] + coeff0_10*dmats0[10][8] + coeff0_11*dmats0[11][8] + coeff0_12*dmats0[12][8] + coeff0_13*dmats0[13][8] + coeff0_14*dmats0[14][8] + coeff0_15*dmats0[15][8] + coeff0_16*dmats0[16][8] + coeff0_17*dmats0[17][8] + coeff0_18*dmats0[18][8] + coeff0_19*dmats0[19][8] + coeff0_20*dmats0[20][8] + coeff0_21*dmats0[21][8] + coeff0_22*dmats0[22][8] + coeff0_23*dmats0[23][8] + coeff0_24*dmats0[24][8] + coeff0_25*dmats0[25][8] + coeff0_26*dmats0[26][8] + coeff0_27*dmats0[27][8] + coeff0_28*dmats0[28][8] + coeff0_29*dmats0[29][8] + coeff0_30*dmats0[30][8] + coeff0_31*dmats0[31][8] + coeff0_32*dmats0[32][8] + coeff0_33*dmats0[33][8] + coeff0_34*dmats0[34][8];
          new_coeff0_9 = coeff0_0*dmats0[0][9] + coeff0_1*dmats0[1][9] + coeff0_2*dmats0[2][9] + coeff0_3*dmats0[3][9] + coeff0_4*dmats0[4][9] + coeff0_5*dmats0[5][9] + coeff0_6*dmats0[6][9] + coeff0_7*dmats0[7][9] + coeff0_8*dmats0[8][9] + coeff0_9*dmats0[9][9] + coeff0_10*dmats0[10][9] + coeff0_11*dmats0[11][9] + coeff0_12*dmats0[12][9] + coeff0_13*dmats0[13][9] + coeff0_14*dmats0[14][9] + coeff0_15*dmats0[15][9] + coeff0_16*dmats0[16][9] + coeff0_17*dmats0[17][9] + coeff0_18*dmats0[18][9] + coeff0_19*dmats0[19][9] + coeff0_20*dmats0[20][9] + coeff0_21*dmats0[21][9] + coeff0_22*dmats0[22][9] + coeff0_23*dmats0[23][9] + coeff0_24*dmats0[24][9] + coeff0_25*dmats0[25][9] + coeff0_26*dmats0[26][9] + coeff0_27*dmats0[27][9] + coeff0_28*dmats0[28][9] + coeff0_29*dmats0[29][9] + coeff0_30*dmats0[30][9] + coeff0_31*dmats0[31][9] + coeff0_32*dmats0[32][9] + coeff0_33*dmats0[33][9] + coeff0_34*dmats0[34][9];
          new_coeff0_10 = coeff0_0*dmats0[0][10] + coeff0_1*dmats0[1][10] + coeff0_2*dmats0[2][10] + coeff0_3*dmats0[3][10] + coeff0_4*dmats0[4][10] + coeff0_5*dmats0[5][10] + coeff0_6*dmats0[6][10] + coeff0_7*dmats0[7][10] + coeff0_8*dmats0[8][10] + coeff0_9*dmats0[9][10] + coeff0_10*dmats0[10][10] + coeff0_11*dmats0[11][10] + coeff0_12*dmats0[12][10] + coeff0_13*dmats0[13][10] + coeff0_14*dmats0[14][10] + coeff0_15*dmats0[15][10] + coeff0_16*dmats0[16][10] + coeff0_17*dmats0[17][10] + coeff0_18*dmats0[18][10] + coeff0_19*dmats0[19][10] + coeff0_20*dmats0[20][10] + coeff0_21*dmats0[21][10] + coeff0_22*dmats0[22][10] + coeff0_23*dmats0[23][10] + coeff0_24*dmats0[24][10] + coeff0_25*dmats0[25][10] + coeff0_26*dmats0[26][10] + coeff0_27*dmats0[27][10] + coeff0_28*dmats0[28][10] + coeff0_29*dmats0[29][10] + coeff0_30*dmats0[30][10] + coeff0_31*dmats0[31][10] + coeff0_32*dmats0[32][10] + coeff0_33*dmats0[33][10] + coeff0_34*dmats0[34][10];
          new_coeff0_11 = coeff0_0*dmats0[0][11] + coeff0_1*dmats0[1][11] + coeff0_2*dmats0[2][11] + coeff0_3*dmats0[3][11] + coeff0_4*dmats0[4][11] + coeff0_5*dmats0[5][11] + coeff0_6*dmats0[6][11] + coeff0_7*dmats0[7][11] + coeff0_8*dmats0[8][11] + coeff0_9*dmats0[9][11] + coeff0_10*dmats0[10][11] + coeff0_11*dmats0[11][11] + coeff0_12*dmats0[12][11] + coeff0_13*dmats0[13][11] + coeff0_14*dmats0[14][11] + coeff0_15*dmats0[15][11] + coeff0_16*dmats0[16][11] + coeff0_17*dmats0[17][11] + coeff0_18*dmats0[18][11] + coeff0_19*dmats0[19][11] + coeff0_20*dmats0[20][11] + coeff0_21*dmats0[21][11] + coeff0_22*dmats0[22][11] + coeff0_23*dmats0[23][11] + coeff0_24*dmats0[24][11] + coeff0_25*dmats0[25][11] + coeff0_26*dmats0[26][11] + coeff0_27*dmats0[27][11] + coeff0_28*dmats0[28][11] + coeff0_29*dmats0[29][11] + coeff0_30*dmats0[30][11] + coeff0_31*dmats0[31][11] + coeff0_32*dmats0[32][11] + coeff0_33*dmats0[33][11] + coeff0_34*dmats0[34][11];
          new_coeff0_12 = coeff0_0*dmats0[0][12] + coeff0_1*dmats0[1][12] + coeff0_2*dmats0[2][12] + coeff0_3*dmats0[3][12] + coeff0_4*dmats0[4][12] + coeff0_5*dmats0[5][12] + coeff0_6*dmats0[6][12] + coeff0_7*dmats0[7][12] + coeff0_8*dmats0[8][12] + coeff0_9*dmats0[9][12] + coeff0_10*dmats0[10][12] + coeff0_11*dmats0[11][12] + coeff0_12*dmats0[12][12] + coeff0_13*dmats0[13][12] + coeff0_14*dmats0[14][12] + coeff0_15*dmats0[15][12] + coeff0_16*dmats0[16][12] + coeff0_17*dmats0[17][12] + coeff0_18*dmats0[18][12] + coeff0_19*dmats0[19][12] + coeff0_20*dmats0[20][12] + coeff0_21*dmats0[21][12] + coeff0_22*dmats0[22][12] + coeff0_23*dmats0[23][12] + coeff0_24*dmats0[24][12] + coeff0_25*dmats0[25][12] + coeff0_26*dmats0[26][12] + coeff0_27*dmats0[27][12] + coeff0_28*dmats0[28][12] + coeff0_29*dmats0[29][12] + coeff0_30*dmats0[30][12] + coeff0_31*dmats0[31][12] + coeff0_32*dmats0[32][12] + coeff0_33*dmats0[33][12] + coeff0_34*dmats0[34][12];
          new_coeff0_13 = coeff0_0*dmats0[0][13] + coeff0_1*dmats0[1][13] + coeff0_2*dmats0[2][13] + coeff0_3*dmats0[3][13] + coeff0_4*dmats0[4][13] + coeff0_5*dmats0[5][13] + coeff0_6*dmats0[6][13] + coeff0_7*dmats0[7][13] + coeff0_8*dmats0[8][13] + coeff0_9*dmats0[9][13] + coeff0_10*dmats0[10][13] + coeff0_11*dmats0[11][13] + coeff0_12*dmats0[12][13] + coeff0_13*dmats0[13][13] + coeff0_14*dmats0[14][13] + coeff0_15*dmats0[15][13] + coeff0_16*dmats0[16][13] + coeff0_17*dmats0[17][13] + coeff0_18*dmats0[18][13] + coeff0_19*dmats0[19][13] + coeff0_20*dmats0[20][13] + coeff0_21*dmats0[21][13] + coeff0_22*dmats0[22][13] + coeff0_23*dmats0[23][13] + coeff0_24*dmats0[24][13] + coeff0_25*dmats0[25][13] + coeff0_26*dmats0[26][13] + coeff0_27*dmats0[27][13] + coeff0_28*dmats0[28][13] + coeff0_29*dmats0[29][13] + coeff0_30*dmats0[30][13] + coeff0_31*dmats0[31][13] + coeff0_32*dmats0[32][13] + coeff0_33*dmats0[33][13] + coeff0_34*dmats0[34][13];
          new_coeff0_14 = coeff0_0*dmats0[0][14] + coeff0_1*dmats0[1][14] + coeff0_2*dmats0[2][14] + coeff0_3*dmats0[3][14] + coeff0_4*dmats0[4][14] + coeff0_5*dmats0[5][14] + coeff0_6*dmats0[6][14] + coeff0_7*dmats0[7][14] + coeff0_8*dmats0[8][14] + coeff0_9*dmats0[9][14] + coeff0_10*dmats0[10][14] + coeff0_11*dmats0[11][14] + coeff0_12*dmats0[12][14] + coeff0_13*dmats0[13][14] + coeff0_14*dmats0[14][14] + coeff0_15*dmats0[15][14] + coeff0_16*dmats0[16][14] + coeff0_17*dmats0[17][14] + coeff0_18*dmats0[18][14] + coeff0_19*dmats0[19][14] + coeff0_20*dmats0[20][14] + coeff0_21*dmats0[21][14] + coeff0_22*dmats0[22][14] + coeff0_23*dmats0[23][14] + coeff0_24*dmats0[24][14] + coeff0_25*dmats0[25][14] + coeff0_26*dmats0[26][14] + coeff0_27*dmats0[27][14] + coeff0_28*dmats0[28][14] + coeff0_29*dmats0[29][14] + coeff0_30*dmats0[30][14] + coeff0_31*dmats0[31][14] + coeff0_32*dmats0[32][14] + coeff0_33*dmats0[33][14] + coeff0_34*dmats0[34][14];
          new_coeff0_15 = coeff0_0*dmats0[0][15] + coeff0_1*dmats0[1][15] + coeff0_2*dmats0[2][15] + coeff0_3*dmats0[3][15] + coeff0_4*dmats0[4][15] + coeff0_5*dmats0[5][15] + coeff0_6*dmats0[6][15] + coeff0_7*dmats0[7][15] + coeff0_8*dmats0[8][15] + coeff0_9*dmats0[9][15] + coeff0_10*dmats0[10][15] + coeff0_11*dmats0[11][15] + coeff0_12*dmats0[12][15] + coeff0_13*dmats0[13][15] + coeff0_14*dmats0[14][15] + coeff0_15*dmats0[15][15] + coeff0_16*dmats0[16][15] + coeff0_17*dmats0[17][15] + coeff0_18*dmats0[18][15] + coeff0_19*dmats0[19][15] + coeff0_20*dmats0[20][15] + coeff0_21*dmats0[21][15] + coeff0_22*dmats0[22][15] + coeff0_23*dmats0[23][15] + coeff0_24*dmats0[24][15] + coeff0_25*dmats0[25][15] + coeff0_26*dmats0[26][15] + coeff0_27*dmats0[27][15] + coeff0_28*dmats0[28][15] + coeff0_29*dmats0[29][15] + coeff0_30*dmats0[30][15] + coeff0_31*dmats0[31][15] + coeff0_32*dmats0[32][15] + coeff0_33*dmats0[33][15] + coeff0_34*dmats0[34][15];
          new_coeff0_16 = coeff0_0*dmats0[0][16] + coeff0_1*dmats0[1][16] + coeff0_2*dmats0[2][16] + coeff0_3*dmats0[3][16] + coeff0_4*dmats0[4][16] + coeff0_5*dmats0[5][16] + coeff0_6*dmats0[6][16] + coeff0_7*dmats0[7][16] + coeff0_8*dmats0[8][16] + coeff0_9*dmats0[9][16] + coeff0_10*dmats0[10][16] + coeff0_11*dmats0[11][16] + coeff0_12*dmats0[12][16] + coeff0_13*dmats0[13][16] + coeff0_14*dmats0[14][16] + coeff0_15*dmats0[15][16] + coeff0_16*dmats0[16][16] + coeff0_17*dmats0[17][16] + coeff0_18*dmats0[18][16] + coeff0_19*dmats0[19][16] + coeff0_20*dmats0[20][16] + coeff0_21*dmats0[21][16] + coeff0_22*dmats0[22][16] + coeff0_23*dmats0[23][16] + coeff0_24*dmats0[24][16] + coeff0_25*dmats0[25][16] + coeff0_26*dmats0[26][16] + coeff0_27*dmats0[27][16] + coeff0_28*dmats0[28][16] + coeff0_29*dmats0[29][16] + coeff0_30*dmats0[30][16] + coeff0_31*dmats0[31][16] + coeff0_32*dmats0[32][16] + coeff0_33*dmats0[33][16] + coeff0_34*dmats0[34][16];
          new_coeff0_17 = coeff0_0*dmats0[0][17] + coeff0_1*dmats0[1][17] + coeff0_2*dmats0[2][17] + coeff0_3*dmats0[3][17] + coeff0_4*dmats0[4][17] + coeff0_5*dmats0[5][17] + coeff0_6*dmats0[6][17] + coeff0_7*dmats0[7][17] + coeff0_8*dmats0[8][17] + coeff0_9*dmats0[9][17] + coeff0_10*dmats0[10][17] + coeff0_11*dmats0[11][17] + coeff0_12*dmats0[12][17] + coeff0_13*dmats0[13][17] + coeff0_14*dmats0[14][17] + coeff0_15*dmats0[15][17] + coeff0_16*dmats0[16][17] + coeff0_17*dmats0[17][17] + coeff0_18*dmats0[18][17] + coeff0_19*dmats0[19][17] + coeff0_20*dmats0[20][17] + coeff0_21*dmats0[21][17] + coeff0_22*dmats0[22][17] + coeff0_23*dmats0[23][17] + coeff0_24*dmats0[24][17] + coeff0_25*dmats0[25][17] + coeff0_26*dmats0[26][17] + coeff0_27*dmats0[27][17] + coeff0_28*dmats0[28][17] + coeff0_29*dmats0[29][17] + coeff0_30*dmats0[30][17] + coeff0_31*dmats0[31][17] + coeff0_32*dmats0[32][17] + coeff0_33*dmats0[33][17] + coeff0_34*dmats0[34][17];
          new_coeff0_18 = coeff0_0*dmats0[0][18] + coeff0_1*dmats0[1][18] + coeff0_2*dmats0[2][18] + coeff0_3*dmats0[3][18] + coeff0_4*dmats0[4][18] + coeff0_5*dmats0[5][18] + coeff0_6*dmats0[6][18] + coeff0_7*dmats0[7][18] + coeff0_8*dmats0[8][18] + coeff0_9*dmats0[9][18] + coeff0_10*dmats0[10][18] + coeff0_11*dmats0[11][18] + coeff0_12*dmats0[12][18] + coeff0_13*dmats0[13][18] + coeff0_14*dmats0[14][18] + coeff0_15*dmats0[15][18] + coeff0_16*dmats0[16][18] + coeff0_17*dmats0[17][18] + coeff0_18*dmats0[18][18] + coeff0_19*dmats0[19][18] + coeff0_20*dmats0[20][18] + coeff0_21*dmats0[21][18] + coeff0_22*dmats0[22][18] + coeff0_23*dmats0[23][18] + coeff0_24*dmats0[24][18] + coeff0_25*dmats0[25][18] + coeff0_26*dmats0[26][18] + coeff0_27*dmats0[27][18] + coeff0_28*dmats0[28][18] + coeff0_29*dmats0[29][18] + coeff0_30*dmats0[30][18] + coeff0_31*dmats0[31][18] + coeff0_32*dmats0[32][18] + coeff0_33*dmats0[33][18] + coeff0_34*dmats0[34][18];
          new_coeff0_19 = coeff0_0*dmats0[0][19] + coeff0_1*dmats0[1][19] + coeff0_2*dmats0[2][19] + coeff0_3*dmats0[3][19] + coeff0_4*dmats0[4][19] + coeff0_5*dmats0[5][19] + coeff0_6*dmats0[6][19] + coeff0_7*dmats0[7][19] + coeff0_8*dmats0[8][19] + coeff0_9*dmats0[9][19] + coeff0_10*dmats0[10][19] + coeff0_11*dmats0[11][19] + coeff0_12*dmats0[12][19] + coeff0_13*dmats0[13][19] + coeff0_14*dmats0[14][19] + coeff0_15*dmats0[15][19] + coeff0_16*dmats0[16][19] + coeff0_17*dmats0[17][19] + coeff0_18*dmats0[18][19] + coeff0_19*dmats0[19][19] + coeff0_20*dmats0[20][19] + coeff0_21*dmats0[21][19] + coeff0_22*dmats0[22][19] + coeff0_23*dmats0[23][19] + coeff0_24*dmats0[24][19] + coeff0_25*dmats0[25][19] + coeff0_26*dmats0[26][19] + coeff0_27*dmats0[27][19] + coeff0_28*dmats0[28][19] + coeff0_29*dmats0[29][19] + coeff0_30*dmats0[30][19] + coeff0_31*dmats0[31][19] + coeff0_32*dmats0[32][19] + coeff0_33*dmats0[33][19] + coeff0_34*dmats0[34][19];
          new_coeff0_20 = coeff0_0*dmats0[0][20] + coeff0_1*dmats0[1][20] + coeff0_2*dmats0[2][20] + coeff0_3*dmats0[3][20] + coeff0_4*dmats0[4][20] + coeff0_5*dmats0[5][20] + coeff0_6*dmats0[6][20] + coeff0_7*dmats0[7][20] + coeff0_8*dmats0[8][20] + coeff0_9*dmats0[9][20] + coeff0_10*dmats0[10][20] + coeff0_11*dmats0[11][20] + coeff0_12*dmats0[12][20] + coeff0_13*dmats0[13][20] + coeff0_14*dmats0[14][20] + coeff0_15*dmats0[15][20] + coeff0_16*dmats0[16][20] + coeff0_17*dmats0[17][20] + coeff0_18*dmats0[18][20] + coeff0_19*dmats0[19][20] + coeff0_20*dmats0[20][20] + coeff0_21*dmats0[21][20] + coeff0_22*dmats0[22][20] + coeff0_23*dmats0[23][20] + coeff0_24*dmats0[24][20] + coeff0_25*dmats0[25][20] + coeff0_26*dmats0[26][20] + coeff0_27*dmats0[27][20] + coeff0_28*dmats0[28][20] + coeff0_29*dmats0[29][20] + coeff0_30*dmats0[30][20] + coeff0_31*dmats0[31][20] + coeff0_32*dmats0[32][20] + coeff0_33*dmats0[33][20] + coeff0_34*dmats0[34][20];
          new_coeff0_21 = coeff0_0*dmats0[0][21] + coeff0_1*dmats0[1][21] + coeff0_2*dmats0[2][21] + coeff0_3*dmats0[3][21] + coeff0_4*dmats0[4][21] + coeff0_5*dmats0[5][21] + coeff0_6*dmats0[6][21] + coeff0_7*dmats0[7][21] + coeff0_8*dmats0[8][21] + coeff0_9*dmats0[9][21] + coeff0_10*dmats0[10][21] + coeff0_11*dmats0[11][21] + coeff0_12*dmats0[12][21] + coeff0_13*dmats0[13][21] + coeff0_14*dmats0[14][21] + coeff0_15*dmats0[15][21] + coeff0_16*dmats0[16][21] + coeff0_17*dmats0[17][21] + coeff0_18*dmats0[18][21] + coeff0_19*dmats0[19][21] + coeff0_20*dmats0[20][21] + coeff0_21*dmats0[21][21] + coeff0_22*dmats0[22][21] + coeff0_23*dmats0[23][21] + coeff0_24*dmats0[24][21] + coeff0_25*dmats0[25][21] + coeff0_26*dmats0[26][21] + coeff0_27*dmats0[27][21] + coeff0_28*dmats0[28][21] + coeff0_29*dmats0[29][21] + coeff0_30*dmats0[30][21] + coeff0_31*dmats0[31][21] + coeff0_32*dmats0[32][21] + coeff0_33*dmats0[33][21] + coeff0_34*dmats0[34][21];
          new_coeff0_22 = coeff0_0*dmats0[0][22] + coeff0_1*dmats0[1][22] + coeff0_2*dmats0[2][22] + coeff0_3*dmats0[3][22] + coeff0_4*dmats0[4][22] + coeff0_5*dmats0[5][22] + coeff0_6*dmats0[6][22] + coeff0_7*dmats0[7][22] + coeff0_8*dmats0[8][22] + coeff0_9*dmats0[9][22] + coeff0_10*dmats0[10][22] + coeff0_11*dmats0[11][22] + coeff0_12*dmats0[12][22] + coeff0_13*dmats0[13][22] + coeff0_14*dmats0[14][22] + coeff0_15*dmats0[15][22] + coeff0_16*dmats0[16][22] + coeff0_17*dmats0[17][22] + coeff0_18*dmats0[18][22] + coeff0_19*dmats0[19][22] + coeff0_20*dmats0[20][22] + coeff0_21*dmats0[21][22] + coeff0_22*dmats0[22][22] + coeff0_23*dmats0[23][22] + coeff0_24*dmats0[24][22] + coeff0_25*dmats0[25][22] + coeff0_26*dmats0[26][22] + coeff0_27*dmats0[27][22] + coeff0_28*dmats0[28][22] + coeff0_29*dmats0[29][22] + coeff0_30*dmats0[30][22] + coeff0_31*dmats0[31][22] + coeff0_32*dmats0[32][22] + coeff0_33*dmats0[33][22] + coeff0_34*dmats0[34][22];
          new_coeff0_23 = coeff0_0*dmats0[0][23] + coeff0_1*dmats0[1][23] + coeff0_2*dmats0[2][23] + coeff0_3*dmats0[3][23] + coeff0_4*dmats0[4][23] + coeff0_5*dmats0[5][23] + coeff0_6*dmats0[6][23] + coeff0_7*dmats0[7][23] + coeff0_8*dmats0[8][23] + coeff0_9*dmats0[9][23] + coeff0_10*dmats0[10][23] + coeff0_11*dmats0[11][23] + coeff0_12*dmats0[12][23] + coeff0_13*dmats0[13][23] + coeff0_14*dmats0[14][23] + coeff0_15*dmats0[15][23] + coeff0_16*dmats0[16][23] + coeff0_17*dmats0[17][23] + coeff0_18*dmats0[18][23] + coeff0_19*dmats0[19][23] + coeff0_20*dmats0[20][23] + coeff0_21*dmats0[21][23] + coeff0_22*dmats0[22][23] + coeff0_23*dmats0[23][23] + coeff0_24*dmats0[24][23] + coeff0_25*dmats0[25][23] + coeff0_26*dmats0[26][23] + coeff0_27*dmats0[27][23] + coeff0_28*dmats0[28][23] + coeff0_29*dmats0[29][23] + coeff0_30*dmats0[30][23] + coeff0_31*dmats0[31][23] + coeff0_32*dmats0[32][23] + coeff0_33*dmats0[33][23] + coeff0_34*dmats0[34][23];
          new_coeff0_24 = coeff0_0*dmats0[0][24] + coeff0_1*dmats0[1][24] + coeff0_2*dmats0[2][24] + coeff0_3*dmats0[3][24] + coeff0_4*dmats0[4][24] + coeff0_5*dmats0[5][24] + coeff0_6*dmats0[6][24] + coeff0_7*dmats0[7][24] + coeff0_8*dmats0[8][24] + coeff0_9*dmats0[9][24] + coeff0_10*dmats0[10][24] + coeff0_11*dmats0[11][24] + coeff0_12*dmats0[12][24] + coeff0_13*dmats0[13][24] + coeff0_14*dmats0[14][24] + coeff0_15*dmats0[15][24] + coeff0_16*dmats0[16][24] + coeff0_17*dmats0[17][24] + coeff0_18*dmats0[18][24] + coeff0_19*dmats0[19][24] + coeff0_20*dmats0[20][24] + coeff0_21*dmats0[21][24] + coeff0_22*dmats0[22][24] + coeff0_23*dmats0[23][24] + coeff0_24*dmats0[24][24] + coeff0_25*dmats0[25][24] + coeff0_26*dmats0[26][24] + coeff0_27*dmats0[27][24] + coeff0_28*dmats0[28][24] + coeff0_29*dmats0[29][24] + coeff0_30*dmats0[30][24] + coeff0_31*dmats0[31][24] + coeff0_32*dmats0[32][24] + coeff0_33*dmats0[33][24] + coeff0_34*dmats0[34][24];
          new_coeff0_25 = coeff0_0*dmats0[0][25] + coeff0_1*dmats0[1][25] + coeff0_2*dmats0[2][25] + coeff0_3*dmats0[3][25] + coeff0_4*dmats0[4][25] + coeff0_5*dmats0[5][25] + coeff0_6*dmats0[6][25] + coeff0_7*dmats0[7][25] + coeff0_8*dmats0[8][25] + coeff0_9*dmats0[9][25] + coeff0_10*dmats0[10][25] + coeff0_11*dmats0[11][25] + coeff0_12*dmats0[12][25] + coeff0_13*dmats0[13][25] + coeff0_14*dmats0[14][25] + coeff0_15*dmats0[15][25] + coeff0_16*dmats0[16][25] + coeff0_17*dmats0[17][25] + coeff0_18*dmats0[18][25] + coeff0_19*dmats0[19][25] + coeff0_20*dmats0[20][25] + coeff0_21*dmats0[21][25] + coeff0_22*dmats0[22][25] + coeff0_23*dmats0[23][25] + coeff0_24*dmats0[24][25] + coeff0_25*dmats0[25][25] + coeff0_26*dmats0[26][25] + coeff0_27*dmats0[27][25] + coeff0_28*dmats0[28][25] + coeff0_29*dmats0[29][25] + coeff0_30*dmats0[30][25] + coeff0_31*dmats0[31][25] + coeff0_32*dmats0[32][25] + coeff0_33*dmats0[33][25] + coeff0_34*dmats0[34][25];
          new_coeff0_26 = coeff0_0*dmats0[0][26] + coeff0_1*dmats0[1][26] + coeff0_2*dmats0[2][26] + coeff0_3*dmats0[3][26] + coeff0_4*dmats0[4][26] + coeff0_5*dmats0[5][26] + coeff0_6*dmats0[6][26] + coeff0_7*dmats0[7][26] + coeff0_8*dmats0[8][26] + coeff0_9*dmats0[9][26] + coeff0_10*dmats0[10][26] + coeff0_11*dmats0[11][26] + coeff0_12*dmats0[12][26] + coeff0_13*dmats0[13][26] + coeff0_14*dmats0[14][26] + coeff0_15*dmats0[15][26] + coeff0_16*dmats0[16][26] + coeff0_17*dmats0[17][26] + coeff0_18*dmats0[18][26] + coeff0_19*dmats0[19][26] + coeff0_20*dmats0[20][26] + coeff0_21*dmats0[21][26] + coeff0_22*dmats0[22][26] + coeff0_23*dmats0[23][26] + coeff0_24*dmats0[24][26] + coeff0_25*dmats0[25][26] + coeff0_26*dmats0[26][26] + coeff0_27*dmats0[27][26] + coeff0_28*dmats0[28][26] + coeff0_29*dmats0[29][26] + coeff0_30*dmats0[30][26] + coeff0_31*dmats0[31][26] + coeff0_32*dmats0[32][26] + coeff0_33*dmats0[33][26] + coeff0_34*dmats0[34][26];
          new_coeff0_27 = coeff0_0*dmats0[0][27] + coeff0_1*dmats0[1][27] + coeff0_2*dmats0[2][27] + coeff0_3*dmats0[3][27] + coeff0_4*dmats0[4][27] + coeff0_5*dmats0[5][27] + coeff0_6*dmats0[6][27] + coeff0_7*dmats0[7][27] + coeff0_8*dmats0[8][27] + coeff0_9*dmats0[9][27] + coeff0_10*dmats0[10][27] + coeff0_11*dmats0[11][27] + coeff0_12*dmats0[12][27] + coeff0_13*dmats0[13][27] + coeff0_14*dmats0[14][27] + coeff0_15*dmats0[15][27] + coeff0_16*dmats0[16][27] + coeff0_17*dmats0[17][27] + coeff0_18*dmats0[18][27] + coeff0_19*dmats0[19][27] + coeff0_20*dmats0[20][27] + coeff0_21*dmats0[21][27] + coeff0_22*dmats0[22][27] + coeff0_23*dmats0[23][27] + coeff0_24*dmats0[24][27] + coeff0_25*dmats0[25][27] + coeff0_26*dmats0[26][27] + coeff0_27*dmats0[27][27] + coeff0_28*dmats0[28][27] + coeff0_29*dmats0[29][27] + coeff0_30*dmats0[30][27] + coeff0_31*dmats0[31][27] + coeff0_32*dmats0[32][27] + coeff0_33*dmats0[33][27] + coeff0_34*dmats0[34][27];
          new_coeff0_28 = coeff0_0*dmats0[0][28] + coeff0_1*dmats0[1][28] + coeff0_2*dmats0[2][28] + coeff0_3*dmats0[3][28] + coeff0_4*dmats0[4][28] + coeff0_5*dmats0[5][28] + coeff0_6*dmats0[6][28] + coeff0_7*dmats0[7][28] + coeff0_8*dmats0[8][28] + coeff0_9*dmats0[9][28] + coeff0_10*dmats0[10][28] + coeff0_11*dmats0[11][28] + coeff0_12*dmats0[12][28] + coeff0_13*dmats0[13][28] + coeff0_14*dmats0[14][28] + coeff0_15*dmats0[15][28] + coeff0_16*dmats0[16][28] + coeff0_17*dmats0[17][28] + coeff0_18*dmats0[18][28] + coeff0_19*dmats0[19][28] + coeff0_20*dmats0[20][28] + coeff0_21*dmats0[21][28] + coeff0_22*dmats0[22][28] + coeff0_23*dmats0[23][28] + coeff0_24*dmats0[24][28] + coeff0_25*dmats0[25][28] + coeff0_26*dmats0[26][28] + coeff0_27*dmats0[27][28] + coeff0_28*dmats0[28][28] + coeff0_29*dmats0[29][28] + coeff0_30*dmats0[30][28] + coeff0_31*dmats0[31][28] + coeff0_32*dmats0[32][28] + coeff0_33*dmats0[33][28] + coeff0_34*dmats0[34][28];
          new_coeff0_29 = coeff0_0*dmats0[0][29] + coeff0_1*dmats0[1][29] + coeff0_2*dmats0[2][29] + coeff0_3*dmats0[3][29] + coeff0_4*dmats0[4][29] + coeff0_5*dmats0[5][29] + coeff0_6*dmats0[6][29] + coeff0_7*dmats0[7][29] + coeff0_8*dmats0[8][29] + coeff0_9*dmats0[9][29] + coeff0_10*dmats0[10][29] + coeff0_11*dmats0[11][29] + coeff0_12*dmats0[12][29] + coeff0_13*dmats0[13][29] + coeff0_14*dmats0[14][29] + coeff0_15*dmats0[15][29] + coeff0_16*dmats0[16][29] + coeff0_17*dmats0[17][29] + coeff0_18*dmats0[18][29] + coeff0_19*dmats0[19][29] + coeff0_20*dmats0[20][29] + coeff0_21*dmats0[21][29] + coeff0_22*dmats0[22][29] + coeff0_23*dmats0[23][29] + coeff0_24*dmats0[24][29] + coeff0_25*dmats0[25][29] + coeff0_26*dmats0[26][29] + coeff0_27*dmats0[27][29] + coeff0_28*dmats0[28][29] + coeff0_29*dmats0[29][29] + coeff0_30*dmats0[30][29] + coeff0_31*dmats0[31][29] + coeff0_32*dmats0[32][29] + coeff0_33*dmats0[33][29] + coeff0_34*dmats0[34][29];
          new_coeff0_30 = coeff0_0*dmats0[0][30] + coeff0_1*dmats0[1][30] + coeff0_2*dmats0[2][30] + coeff0_3*dmats0[3][30] + coeff0_4*dmats0[4][30] + coeff0_5*dmats0[5][30] + coeff0_6*dmats0[6][30] + coeff0_7*dmats0[7][30] + coeff0_8*dmats0[8][30] + coeff0_9*dmats0[9][30] + coeff0_10*dmats0[10][30] + coeff0_11*dmats0[11][30] + coeff0_12*dmats0[12][30] + coeff0_13*dmats0[13][30] + coeff0_14*dmats0[14][30] + coeff0_15*dmats0[15][30] + coeff0_16*dmats0[16][30] + coeff0_17*dmats0[17][30] + coeff0_18*dmats0[18][30] + coeff0_19*dmats0[19][30] + coeff0_20*dmats0[20][30] + coeff0_21*dmats0[21][30] + coeff0_22*dmats0[22][30] + coeff0_23*dmats0[23][30] + coeff0_24*dmats0[24][30] + coeff0_25*dmats0[25][30] + coeff0_26*dmats0[26][30] + coeff0_27*dmats0[27][30] + coeff0_28*dmats0[28][30] + coeff0_29*dmats0[29][30] + coeff0_30*dmats0[30][30] + coeff0_31*dmats0[31][30] + coeff0_32*dmats0[32][30] + coeff0_33*dmats0[33][30] + coeff0_34*dmats0[34][30];
          new_coeff0_31 = coeff0_0*dmats0[0][31] + coeff0_1*dmats0[1][31] + coeff0_2*dmats0[2][31] + coeff0_3*dmats0[3][31] + coeff0_4*dmats0[4][31] + coeff0_5*dmats0[5][31] + coeff0_6*dmats0[6][31] + coeff0_7*dmats0[7][31] + coeff0_8*dmats0[8][31] + coeff0_9*dmats0[9][31] + coeff0_10*dmats0[10][31] + coeff0_11*dmats0[11][31] + coeff0_12*dmats0[12][31] + coeff0_13*dmats0[13][31] + coeff0_14*dmats0[14][31] + coeff0_15*dmats0[15][31] + coeff0_16*dmats0[16][31] + coeff0_17*dmats0[17][31] + coeff0_18*dmats0[18][31] + coeff0_19*dmats0[19][31] + coeff0_20*dmats0[20][31] + coeff0_21*dmats0[21][31] + coeff0_22*dmats0[22][31] + coeff0_23*dmats0[23][31] + coeff0_24*dmats0[24][31] + coeff0_25*dmats0[25][31] + coeff0_26*dmats0[26][31] + coeff0_27*dmats0[27][31] + coeff0_28*dmats0[28][31] + coeff0_29*dmats0[29][31] + coeff0_30*dmats0[30][31] + coeff0_31*dmats0[31][31] + coeff0_32*dmats0[32][31] + coeff0_33*dmats0[33][31] + coeff0_34*dmats0[34][31];
          new_coeff0_32 = coeff0_0*dmats0[0][32] + coeff0_1*dmats0[1][32] + coeff0_2*dmats0[2][32] + coeff0_3*dmats0[3][32] + coeff0_4*dmats0[4][32] + coeff0_5*dmats0[5][32] + coeff0_6*dmats0[6][32] + coeff0_7*dmats0[7][32] + coeff0_8*dmats0[8][32] + coeff0_9*dmats0[9][32] + coeff0_10*dmats0[10][32] + coeff0_11*dmats0[11][32] + coeff0_12*dmats0[12][32] + coeff0_13*dmats0[13][32] + coeff0_14*dmats0[14][32] + coeff0_15*dmats0[15][32] + coeff0_16*dmats0[16][32] + coeff0_17*dmats0[17][32] + coeff0_18*dmats0[18][32] + coeff0_19*dmats0[19][32] + coeff0_20*dmats0[20][32] + coeff0_21*dmats0[21][32] + coeff0_22*dmats0[22][32] + coeff0_23*dmats0[23][32] + coeff0_24*dmats0[24][32] + coeff0_25*dmats0[25][32] + coeff0_26*dmats0[26][32] + coeff0_27*dmats0[27][32] + coeff0_28*dmats0[28][32] + coeff0_29*dmats0[29][32] + coeff0_30*dmats0[30][32] + coeff0_31*dmats0[31][32] + coeff0_32*dmats0[32][32] + coeff0_33*dmats0[33][32] + coeff0_34*dmats0[34][32];
          new_coeff0_33 = coeff0_0*dmats0[0][33] + coeff0_1*dmats0[1][33] + coeff0_2*dmats0[2][33] + coeff0_3*dmats0[3][33] + coeff0_4*dmats0[4][33] + coeff0_5*dmats0[5][33] + coeff0_6*dmats0[6][33] + coeff0_7*dmats0[7][33] + coeff0_8*dmats0[8][33] + coeff0_9*dmats0[9][33] + coeff0_10*dmats0[10][33] + coeff0_11*dmats0[11][33] + coeff0_12*dmats0[12][33] + coeff0_13*dmats0[13][33] + coeff0_14*dmats0[14][33] + coeff0_15*dmats0[15][33] + coeff0_16*dmats0[16][33] + coeff0_17*dmats0[17][33] + coeff0_18*dmats0[18][33] + coeff0_19*dmats0[19][33] + coeff0_20*dmats0[20][33] + coeff0_21*dmats0[21][33] + coeff0_22*dmats0[22][33] + coeff0_23*dmats0[23][33] + coeff0_24*dmats0[24][33] + coeff0_25*dmats0[25][33] + coeff0_26*dmats0[26][33] + coeff0_27*dmats0[27][33] + coeff0_28*dmats0[28][33] + coeff0_29*dmats0[29][33] + coeff0_30*dmats0[30][33] + coeff0_31*dmats0[31][33] + coeff0_32*dmats0[32][33] + coeff0_33*dmats0[33][33] + coeff0_34*dmats0[34][33];
          new_coeff0_34 = coeff0_0*dmats0[0][34] + coeff0_1*dmats0[1][34] + coeff0_2*dmats0[2][34] + coeff0_3*dmats0[3][34] + coeff0_4*dmats0[4][34] + coeff0_5*dmats0[5][34] + coeff0_6*dmats0[6][34] + coeff0_7*dmats0[7][34] + coeff0_8*dmats0[8][34] + coeff0_9*dmats0[9][34] + coeff0_10*dmats0[10][34] + coeff0_11*dmats0[11][34] + coeff0_12*dmats0[12][34] + coeff0_13*dmats0[13][34] + coeff0_14*dmats0[14][34] + coeff0_15*dmats0[15][34] + coeff0_16*dmats0[16][34] + coeff0_17*dmats0[17][34] + coeff0_18*dmats0[18][34] + coeff0_19*dmats0[19][34] + coeff0_20*dmats0[20][34] + coeff0_21*dmats0[21][34] + coeff0_22*dmats0[22][34] + coeff0_23*dmats0[23][34] + coeff0_24*dmats0[24][34] + coeff0_25*dmats0[25][34] + coeff0_26*dmats0[26][34] + coeff0_27*dmats0[27][34] + coeff0_28*dmats0[28][34] + coeff0_29*dmats0[29][34] + coeff0_30*dmats0[30][34] + coeff0_31*dmats0[31][34] + coeff0_32*dmats0[32][34] + coeff0_33*dmats0[33][34] + coeff0_34*dmats0[34][34];
        }
        if(combinations[deriv_num][j] == 1)
        {
          new_coeff0_0 = coeff0_0*dmats1[0][0] + coeff0_1*dmats1[1][0] + coeff0_2*dmats1[2][0] + coeff0_3*dmats1[3][0] + coeff0_4*dmats1[4][0] + coeff0_5*dmats1[5][0] + coeff0_6*dmats1[6][0] + coeff0_7*dmats1[7][0] + coeff0_8*dmats1[8][0] + coeff0_9*dmats1[9][0] + coeff0_10*dmats1[10][0] + coeff0_11*dmats1[11][0] + coeff0_12*dmats1[12][0] + coeff0_13*dmats1[13][0] + coeff0_14*dmats1[14][0] + coeff0_15*dmats1[15][0] + coeff0_16*dmats1[16][0] + coeff0_17*dmats1[17][0] + coeff0_18*dmats1[18][0] + coeff0_19*dmats1[19][0] + coeff0_20*dmats1[20][0] + coeff0_21*dmats1[21][0] + coeff0_22*dmats1[22][0] + coeff0_23*dmats1[23][0] + coeff0_24*dmats1[24][0] + coeff0_25*dmats1[25][0] + coeff0_26*dmats1[26][0] + coeff0_27*dmats1[27][0] + coeff0_28*dmats1[28][0] + coeff0_29*dmats1[29][0] + coeff0_30*dmats1[30][0] + coeff0_31*dmats1[31][0] + coeff0_32*dmats1[32][0] + coeff0_33*dmats1[33][0] + coeff0_34*dmats1[34][0];
          new_coeff0_1 = coeff0_0*dmats1[0][1] + coeff0_1*dmats1[1][1] + coeff0_2*dmats1[2][1] + coeff0_3*dmats1[3][1] + coeff0_4*dmats1[4][1] + coeff0_5*dmats1[5][1] + coeff0_6*dmats1[6][1] + coeff0_7*dmats1[7][1] + coeff0_8*dmats1[8][1] + coeff0_9*dmats1[9][1] + coeff0_10*dmats1[10][1] + coeff0_11*dmats1[11][1] + coeff0_12*dmats1[12][1] + coeff0_13*dmats1[13][1] + coeff0_14*dmats1[14][1] + coeff0_15*dmats1[15][1] + coeff0_16*dmats1[16][1] + coeff0_17*dmats1[17][1] + coeff0_18*dmats1[18][1] + coeff0_19*dmats1[19][1] + coeff0_20*dmats1[20][1] + coeff0_21*dmats1[21][1] + coeff0_22*dmats1[22][1] + coeff0_23*dmats1[23][1] + coeff0_24*dmats1[24][1] + coeff0_25*dmats1[25][1] + coeff0_26*dmats1[26][1] + coeff0_27*dmats1[27][1] + coeff0_28*dmats1[28][1] + coeff0_29*dmats1[29][1] + coeff0_30*dmats1[30][1] + coeff0_31*dmats1[31][1] + coeff0_32*dmats1[32][1] + coeff0_33*dmats1[33][1] + coeff0_34*dmats1[34][1];
          new_coeff0_2 = coeff0_0*dmats1[0][2] + coeff0_1*dmats1[1][2] + coeff0_2*dmats1[2][2] + coeff0_3*dmats1[3][2] + coeff0_4*dmats1[4][2] + coeff0_5*dmats1[5][2] + coeff0_6*dmats1[6][2] + coeff0_7*dmats1[7][2] + coeff0_8*dmats1[8][2] + coeff0_9*dmats1[9][2] + coeff0_10*dmats1[10][2] + coeff0_11*dmats1[11][2] + coeff0_12*dmats1[12][2] + coeff0_13*dmats1[13][2] + coeff0_14*dmats1[14][2] + coeff0_15*dmats1[15][2] + coeff0_16*dmats1[16][2] + coeff0_17*dmats1[17][2] + coeff0_18*dmats1[18][2] + coeff0_19*dmats1[19][2] + coeff0_20*dmats1[20][2] + coeff0_21*dmats1[21][2] + coeff0_22*dmats1[22][2] + coeff0_23*dmats1[23][2] + coeff0_24*dmats1[24][2] + coeff0_25*dmats1[25][2] + coeff0_26*dmats1[26][2] + coeff0_27*dmats1[27][2] + coeff0_28*dmats1[28][2] + coeff0_29*dmats1[29][2] + coeff0_30*dmats1[30][2] + coeff0_31*dmats1[31][2] + coeff0_32*dmats1[32][2] + coeff0_33*dmats1[33][2] + coeff0_34*dmats1[34][2];
          new_coeff0_3 = coeff0_0*dmats1[0][3] + coeff0_1*dmats1[1][3] + coeff0_2*dmats1[2][3] + coeff0_3*dmats1[3][3] + coeff0_4*dmats1[4][3] + coeff0_5*dmats1[5][3] + coeff0_6*dmats1[6][3] + coeff0_7*dmats1[7][3] + coeff0_8*dmats1[8][3] + coeff0_9*dmats1[9][3] + coeff0_10*dmats1[10][3] + coeff0_11*dmats1[11][3] + coeff0_12*dmats1[12][3] + coeff0_13*dmats1[13][3] + coeff0_14*dmats1[14][3] + coeff0_15*dmats1[15][3] + coeff0_16*dmats1[16][3] + coeff0_17*dmats1[17][3] + coeff0_18*dmats1[18][3] + coeff0_19*dmats1[19][3] + coeff0_20*dmats1[20][3] + coeff0_21*dmats1[21][3] + coeff0_22*dmats1[22][3] + coeff0_23*dmats1[23][3] + coeff0_24*dmats1[24][3] + coeff0_25*dmats1[25][3] + coeff0_26*dmats1[26][3] + coeff0_27*dmats1[27][3] + coeff0_28*dmats1[28][3] + coeff0_29*dmats1[29][3] + coeff0_30*dmats1[30][3] + coeff0_31*dmats1[31][3] + coeff0_32*dmats1[32][3] + coeff0_33*dmats1[33][3] + coeff0_34*dmats1[34][3];
          new_coeff0_4 = coeff0_0*dmats1[0][4] + coeff0_1*dmats1[1][4] + coeff0_2*dmats1[2][4] + coeff0_3*dmats1[3][4] + coeff0_4*dmats1[4][4] + coeff0_5*dmats1[5][4] + coeff0_6*dmats1[6][4] + coeff0_7*dmats1[7][4] + coeff0_8*dmats1[8][4] + coeff0_9*dmats1[9][4] + coeff0_10*dmats1[10][4] + coeff0_11*dmats1[11][4] + coeff0_12*dmats1[12][4] + coeff0_13*dmats1[13][4] + coeff0_14*dmats1[14][4] + coeff0_15*dmats1[15][4] + coeff0_16*dmats1[16][4] + coeff0_17*dmats1[17][4] + coeff0_18*dmats1[18][4] + coeff0_19*dmats1[19][4] + coeff0_20*dmats1[20][4] + coeff0_21*dmats1[21][4] + coeff0_22*dmats1[22][4] + coeff0_23*dmats1[23][4] + coeff0_24*dmats1[24][4] + coeff0_25*dmats1[25][4] + coeff0_26*dmats1[26][4] + coeff0_27*dmats1[27][4] + coeff0_28*dmats1[28][4] + coeff0_29*dmats1[29][4] + coeff0_30*dmats1[30][4] + coeff0_31*dmats1[31][4] + coeff0_32*dmats1[32][4] + coeff0_33*dmats1[33][4] + coeff0_34*dmats1[34][4];
          new_coeff0_5 = coeff0_0*dmats1[0][5] + coeff0_1*dmats1[1][5] + coeff0_2*dmats1[2][5] + coeff0_3*dmats1[3][5] + coeff0_4*dmats1[4][5] + coeff0_5*dmats1[5][5] + coeff0_6*dmats1[6][5] + coeff0_7*dmats1[7][5] + coeff0_8*dmats1[8][5] + coeff0_9*dmats1[9][5] + coeff0_10*dmats1[10][5] + coeff0_11*dmats1[11][5] + coeff0_12*dmats1[12][5] + coeff0_13*dmats1[13][5] + coeff0_14*dmats1[14][5] + coeff0_15*dmats1[15][5] + coeff0_16*dmats1[16][5] + coeff0_17*dmats1[17][5] + coeff0_18*dmats1[18][5] + coeff0_19*dmats1[19][5] + coeff0_20*dmats1[20][5] + coeff0_21*dmats1[21][5] + coeff0_22*dmats1[22][5] + coeff0_23*dmats1[23][5] + coeff0_24*dmats1[24][5] + coeff0_25*dmats1[25][5] + coeff0_26*dmats1[26][5] + coeff0_27*dmats1[27][5] + coeff0_28*dmats1[28][5] + coeff0_29*dmats1[29][5] + coeff0_30*dmats1[30][5] + coeff0_31*dmats1[31][5] + coeff0_32*dmats1[32][5] + coeff0_33*dmats1[33][5] + coeff0_34*dmats1[34][5];
          new_coeff0_6 = coeff0_0*dmats1[0][6] + coeff0_1*dmats1[1][6] + coeff0_2*dmats1[2][6] + coeff0_3*dmats1[3][6] + coeff0_4*dmats1[4][6] + coeff0_5*dmats1[5][6] + coeff0_6*dmats1[6][6] + coeff0_7*dmats1[7][6] + coeff0_8*dmats1[8][6] + coeff0_9*dmats1[9][6] + coeff0_10*dmats1[10][6] + coeff0_11*dmats1[11][6] + coeff0_12*dmats1[12][6] + coeff0_13*dmats1[13][6] + coeff0_14*dmats1[14][6] + coeff0_15*dmats1[15][6] + coeff0_16*dmats1[16][6] + coeff0_17*dmats1[17][6] + coeff0_18*dmats1[18][6] + coeff0_19*dmats1[19][6] + coeff0_20*dmats1[20][6] + coeff0_21*dmats1[21][6] + coeff0_22*dmats1[22][6] + coeff0_23*dmats1[23][6] + coeff0_24*dmats1[24][6] + coeff0_25*dmats1[25][6] + coeff0_26*dmats1[26][6] + coeff0_27*dmats1[27][6] + coeff0_28*dmats1[28][6] + coeff0_29*dmats1[29][6] + coeff0_30*dmats1[30][6] + coeff0_31*dmats1[31][6] + coeff0_32*dmats1[32][6] + coeff0_33*dmats1[33][6] + coeff0_34*dmats1[34][6];
          new_coeff0_7 = coeff0_0*dmats1[0][7] + coeff0_1*dmats1[1][7] + coeff0_2*dmats1[2][7] + coeff0_3*dmats1[3][7] + coeff0_4*dmats1[4][7] + coeff0_5*dmats1[5][7] + coeff0_6*dmats1[6][7] + coeff0_7*dmats1[7][7] + coeff0_8*dmats1[8][7] + coeff0_9*dmats1[9][7] + coeff0_10*dmats1[10][7] + coeff0_11*dmats1[11][7] + coeff0_12*dmats1[12][7] + coeff0_13*dmats1[13][7] + coeff0_14*dmats1[14][7] + coeff0_15*dmats1[15][7] + coeff0_16*dmats1[16][7] + coeff0_17*dmats1[17][7] + coeff0_18*dmats1[18][7] + coeff0_19*dmats1[19][7] + coeff0_20*dmats1[20][7] + coeff0_21*dmats1[21][7] + coeff0_22*dmats1[22][7] + coeff0_23*dmats1[23][7] + coeff0_24*dmats1[24][7] + coeff0_25*dmats1[25][7] + coeff0_26*dmats1[26][7] + coeff0_27*dmats1[27][7] + coeff0_28*dmats1[28][7] + coeff0_29*dmats1[29][7] + coeff0_30*dmats1[30][7] + coeff0_31*dmats1[31][7] + coeff0_32*dmats1[32][7] + coeff0_33*dmats1[33][7] + coeff0_34*dmats1[34][7];
          new_coeff0_8 = coeff0_0*dmats1[0][8] + coeff0_1*dmats1[1][8] + coeff0_2*dmats1[2][8] + coeff0_3*dmats1[3][8] + coeff0_4*dmats1[4][8] + coeff0_5*dmats1[5][8] + coeff0_6*dmats1[6][8] + coeff0_7*dmats1[7][8] + coeff0_8*dmats1[8][8] + coeff0_9*dmats1[9][8] + coeff0_10*dmats1[10][8] + coeff0_11*dmats1[11][8] + coeff0_12*dmats1[12][8] + coeff0_13*dmats1[13][8] + coeff0_14*dmats1[14][8] + coeff0_15*dmats1[15][8] + coeff0_16*dmats1[16][8] + coeff0_17*dmats1[17][8] + coeff0_18*dmats1[18][8] + coeff0_19*dmats1[19][8] + coeff0_20*dmats1[20][8] + coeff0_21*dmats1[21][8] + coeff0_22*dmats1[22][8] + coeff0_23*dmats1[23][8] + coeff0_24*dmats1[24][8] + coeff0_25*dmats1[25][8] + coeff0_26*dmats1[26][8] + coeff0_27*dmats1[27][8] + coeff0_28*dmats1[28][8] + coeff0_29*dmats1[29][8] + coeff0_30*dmats1[30][8] + coeff0_31*dmats1[31][8] + coeff0_32*dmats1[32][8] + coeff0_33*dmats1[33][8] + coeff0_34*dmats1[34][8];
          new_coeff0_9 = coeff0_0*dmats1[0][9] + coeff0_1*dmats1[1][9] + coeff0_2*dmats1[2][9] + coeff0_3*dmats1[3][9] + coeff0_4*dmats1[4][9] + coeff0_5*dmats1[5][9] + coeff0_6*dmats1[6][9] + coeff0_7*dmats1[7][9] + coeff0_8*dmats1[8][9] + coeff0_9*dmats1[9][9] + coeff0_10*dmats1[10][9] + coeff0_11*dmats1[11][9] + coeff0_12*dmats1[12][9] + coeff0_13*dmats1[13][9] + coeff0_14*dmats1[14][9] + coeff0_15*dmats1[15][9] + coeff0_16*dmats1[16][9] + coeff0_17*dmats1[17][9] + coeff0_18*dmats1[18][9] + coeff0_19*dmats1[19][9] + coeff0_20*dmats1[20][9] + coeff0_21*dmats1[21][9] + coeff0_22*dmats1[22][9] + coeff0_23*dmats1[23][9] + coeff0_24*dmats1[24][9] + coeff0_25*dmats1[25][9] + coeff0_26*dmats1[26][9] + coeff0_27*dmats1[27][9] + coeff0_28*dmats1[28][9] + coeff0_29*dmats1[29][9] + coeff0_30*dmats1[30][9] + coeff0_31*dmats1[31][9] + coeff0_32*dmats1[32][9] + coeff0_33*dmats1[33][9] + coeff0_34*dmats1[34][9];
          new_coeff0_10 = coeff0_0*dmats1[0][10] + coeff0_1*dmats1[1][10] + coeff0_2*dmats1[2][10] + coeff0_3*dmats1[3][10] + coeff0_4*dmats1[4][10] + coeff0_5*dmats1[5][10] + coeff0_6*dmats1[6][10] + coeff0_7*dmats1[7][10] + coeff0_8*dmats1[8][10] + coeff0_9*dmats1[9][10] + coeff0_10*dmats1[10][10] + coeff0_11*dmats1[11][10] + coeff0_12*dmats1[12][10] + coeff0_13*dmats1[13][10] + coeff0_14*dmats1[14][10] + coeff0_15*dmats1[15][10] + coeff0_16*dmats1[16][10] + coeff0_17*dmats1[17][10] + coeff0_18*dmats1[18][10] + coeff0_19*dmats1[19][10] + coeff0_20*dmats1[20][10] + coeff0_21*dmats1[21][10] + coeff0_22*dmats1[22][10] + coeff0_23*dmats1[23][10] + coeff0_24*dmats1[24][10] + coeff0_25*dmats1[25][10] + coeff0_26*dmats1[26][10] + coeff0_27*dmats1[27][10] + coeff0_28*dmats1[28][10] + coeff0_29*dmats1[29][10] + coeff0_30*dmats1[30][10] + coeff0_31*dmats1[31][10] + coeff0_32*dmats1[32][10] + coeff0_33*dmats1[33][10] + coeff0_34*dmats1[34][10];
          new_coeff0_11 = coeff0_0*dmats1[0][11] + coeff0_1*dmats1[1][11] + coeff0_2*dmats1[2][11] + coeff0_3*dmats1[3][11] + coeff0_4*dmats1[4][11] + coeff0_5*dmats1[5][11] + coeff0_6*dmats1[6][11] + coeff0_7*dmats1[7][11] + coeff0_8*dmats1[8][11] + coeff0_9*dmats1[9][11] + coeff0_10*dmats1[10][11] + coeff0_11*dmats1[11][11] + coeff0_12*dmats1[12][11] + coeff0_13*dmats1[13][11] + coeff0_14*dmats1[14][11] + coeff0_15*dmats1[15][11] + coeff0_16*dmats1[16][11] + coeff0_17*dmats1[17][11] + coeff0_18*dmats1[18][11] + coeff0_19*dmats1[19][11] + coeff0_20*dmats1[20][11] + coeff0_21*dmats1[21][11] + coeff0_22*dmats1[22][11] + coeff0_23*dmats1[23][11] + coeff0_24*dmats1[24][11] + coeff0_25*dmats1[25][11] + coeff0_26*dmats1[26][11] + coeff0_27*dmats1[27][11] + coeff0_28*dmats1[28][11] + coeff0_29*dmats1[29][11] + coeff0_30*dmats1[30][11] + coeff0_31*dmats1[31][11] + coeff0_32*dmats1[32][11] + coeff0_33*dmats1[33][11] + coeff0_34*dmats1[34][11];
          new_coeff0_12 = coeff0_0*dmats1[0][12] + coeff0_1*dmats1[1][12] + coeff0_2*dmats1[2][12] + coeff0_3*dmats1[3][12] + coeff0_4*dmats1[4][12] + coeff0_5*dmats1[5][12] + coeff0_6*dmats1[6][12] + coeff0_7*dmats1[7][12] + coeff0_8*dmats1[8][12] + coeff0_9*dmats1[9][12] + coeff0_10*dmats1[10][12] + coeff0_11*dmats1[11][12] + coeff0_12*dmats1[12][12] + coeff0_13*dmats1[13][12] + coeff0_14*dmats1[14][12] + coeff0_15*dmats1[15][12] + coeff0_16*dmats1[16][12] + coeff0_17*dmats1[17][12] + coeff0_18*dmats1[18][12] + coeff0_19*dmats1[19][12] + coeff0_20*dmats1[20][12] + coeff0_21*dmats1[21][12] + coeff0_22*dmats1[22][12] + coeff0_23*dmats1[23][12] + coeff0_24*dmats1[24][12] + coeff0_25*dmats1[25][12] + coeff0_26*dmats1[26][12] + coeff0_27*dmats1[27][12] + coeff0_28*dmats1[28][12] + coeff0_29*dmats1[29][12] + coeff0_30*dmats1[30][12] + coeff0_31*dmats1[31][12] + coeff0_32*dmats1[32][12] + coeff0_33*dmats1[33][12] + coeff0_34*dmats1[34][12];
          new_coeff0_13 = coeff0_0*dmats1[0][13] + coeff0_1*dmats1[1][13] + coeff0_2*dmats1[2][13] + coeff0_3*dmats1[3][13] + coeff0_4*dmats1[4][13] + coeff0_5*dmats1[5][13] + coeff0_6*dmats1[6][13] + coeff0_7*dmats1[7][13] + coeff0_8*dmats1[8][13] + coeff0_9*dmats1[9][13] + coeff0_10*dmats1[10][13] + coeff0_11*dmats1[11][13] + coeff0_12*dmats1[12][13] + coeff0_13*dmats1[13][13] + coeff0_14*dmats1[14][13] + coeff0_15*dmats1[15][13] + coeff0_16*dmats1[16][13] + coeff0_17*dmats1[17][13] + coeff0_18*dmats1[18][13] + coeff0_19*dmats1[19][13] + coeff0_20*dmats1[20][13] + coeff0_21*dmats1[21][13] + coeff0_22*dmats1[22][13] + coeff0_23*dmats1[23][13] + coeff0_24*dmats1[24][13] + coeff0_25*dmats1[25][13] + coeff0_26*dmats1[26][13] + coeff0_27*dmats1[27][13] + coeff0_28*dmats1[28][13] + coeff0_29*dmats1[29][13] + coeff0_30*dmats1[30][13] + coeff0_31*dmats1[31][13] + coeff0_32*dmats1[32][13] + coeff0_33*dmats1[33][13] + coeff0_34*dmats1[34][13];
          new_coeff0_14 = coeff0_0*dmats1[0][14] + coeff0_1*dmats1[1][14] + coeff0_2*dmats1[2][14] + coeff0_3*dmats1[3][14] + coeff0_4*dmats1[4][14] + coeff0_5*dmats1[5][14] + coeff0_6*dmats1[6][14] + coeff0_7*dmats1[7][14] + coeff0_8*dmats1[8][14] + coeff0_9*dmats1[9][14] + coeff0_10*dmats1[10][14] + coeff0_11*dmats1[11][14] + coeff0_12*dmats1[12][14] + coeff0_13*dmats1[13][14] + coeff0_14*dmats1[14][14] + coeff0_15*dmats1[15][14] + coeff0_16*dmats1[16][14] + coeff0_17*dmats1[17][14] + coeff0_18*dmats1[18][14] + coeff0_19*dmats1[19][14] + coeff0_20*dmats1[20][14] + coeff0_21*dmats1[21][14] + coeff0_22*dmats1[22][14] + coeff0_23*dmats1[23][14] + coeff0_24*dmats1[24][14] + coeff0_25*dmats1[25][14] + coeff0_26*dmats1[26][14] + coeff0_27*dmats1[27][14] + coeff0_28*dmats1[28][14] + coeff0_29*dmats1[29][14] + coeff0_30*dmats1[30][14] + coeff0_31*dmats1[31][14] + coeff0_32*dmats1[32][14] + coeff0_33*dmats1[33][14] + coeff0_34*dmats1[34][14];
          new_coeff0_15 = coeff0_0*dmats1[0][15] + coeff0_1*dmats1[1][15] + coeff0_2*dmats1[2][15] + coeff0_3*dmats1[3][15] + coeff0_4*dmats1[4][15] + coeff0_5*dmats1[5][15] + coeff0_6*dmats1[6][15] + coeff0_7*dmats1[7][15] + coeff0_8*dmats1[8][15] + coeff0_9*dmats1[9][15] + coeff0_10*dmats1[10][15] + coeff0_11*dmats1[11][15] + coeff0_12*dmats1[12][15] + coeff0_13*dmats1[13][15] + coeff0_14*dmats1[14][15] + coeff0_15*dmats1[15][15] + coeff0_16*dmats1[16][15] + coeff0_17*dmats1[17][15] + coeff0_18*dmats1[18][15] + coeff0_19*dmats1[19][15] + coeff0_20*dmats1[20][15] + coeff0_21*dmats1[21][15] + coeff0_22*dmats1[22][15] + coeff0_23*dmats1[23][15] + coeff0_24*dmats1[24][15] + coeff0_25*dmats1[25][15] + coeff0_26*dmats1[26][15] + coeff0_27*dmats1[27][15] + coeff0_28*dmats1[28][15] + coeff0_29*dmats1[29][15] + coeff0_30*dmats1[30][15] + coeff0_31*dmats1[31][15] + coeff0_32*dmats1[32][15] + coeff0_33*dmats1[33][15] + coeff0_34*dmats1[34][15];
          new_coeff0_16 = coeff0_0*dmats1[0][16] + coeff0_1*dmats1[1][16] + coeff0_2*dmats1[2][16] + coeff0_3*dmats1[3][16] + coeff0_4*dmats1[4][16] + coeff0_5*dmats1[5][16] + coeff0_6*dmats1[6][16] + coeff0_7*dmats1[7][16] + coeff0_8*dmats1[8][16] + coeff0_9*dmats1[9][16] + coeff0_10*dmats1[10][16] + coeff0_11*dmats1[11][16] + coeff0_12*dmats1[12][16] + coeff0_13*dmats1[13][16] + coeff0_14*dmats1[14][16] + coeff0_15*dmats1[15][16] + coeff0_16*dmats1[16][16] + coeff0_17*dmats1[17][16] + coeff0_18*dmats1[18][16] + coeff0_19*dmats1[19][16] + coeff0_20*dmats1[20][16] + coeff0_21*dmats1[21][16] + coeff0_22*dmats1[22][16] + coeff0_23*dmats1[23][16] + coeff0_24*dmats1[24][16] + coeff0_25*dmats1[25][16] + coeff0_26*dmats1[26][16] + coeff0_27*dmats1[27][16] + coeff0_28*dmats1[28][16] + coeff0_29*dmats1[29][16] + coeff0_30*dmats1[30][16] + coeff0_31*dmats1[31][16] + coeff0_32*dmats1[32][16] + coeff0_33*dmats1[33][16] + coeff0_34*dmats1[34][16];
          new_coeff0_17 = coeff0_0*dmats1[0][17] + coeff0_1*dmats1[1][17] + coeff0_2*dmats1[2][17] + coeff0_3*dmats1[3][17] + coeff0_4*dmats1[4][17] + coeff0_5*dmats1[5][17] + coeff0_6*dmats1[6][17] + coeff0_7*dmats1[7][17] + coeff0_8*dmats1[8][17] + coeff0_9*dmats1[9][17] + coeff0_10*dmats1[10][17] + coeff0_11*dmats1[11][17] + coeff0_12*dmats1[12][17] + coeff0_13*dmats1[13][17] + coeff0_14*dmats1[14][17] + coeff0_15*dmats1[15][17] + coeff0_16*dmats1[16][17] + coeff0_17*dmats1[17][17] + coeff0_18*dmats1[18][17] + coeff0_19*dmats1[19][17] + coeff0_20*dmats1[20][17] + coeff0_21*dmats1[21][17] + coeff0_22*dmats1[22][17] + coeff0_23*dmats1[23][17] + coeff0_24*dmats1[24][17] + coeff0_25*dmats1[25][17] + coeff0_26*dmats1[26][17] + coeff0_27*dmats1[27][17] + coeff0_28*dmats1[28][17] + coeff0_29*dmats1[29][17] + coeff0_30*dmats1[30][17] + coeff0_31*dmats1[31][17] + coeff0_32*dmats1[32][17] + coeff0_33*dmats1[33][17] + coeff0_34*dmats1[34][17];
          new_coeff0_18 = coeff0_0*dmats1[0][18] + coeff0_1*dmats1[1][18] + coeff0_2*dmats1[2][18] + coeff0_3*dmats1[3][18] + coeff0_4*dmats1[4][18] + coeff0_5*dmats1[5][18] + coeff0_6*dmats1[6][18] + coeff0_7*dmats1[7][18] + coeff0_8*dmats1[8][18] + coeff0_9*dmats1[9][18] + coeff0_10*dmats1[10][18] + coeff0_11*dmats1[11][18] + coeff0_12*dmats1[12][18] + coeff0_13*dmats1[13][18] + coeff0_14*dmats1[14][18] + coeff0_15*dmats1[15][18] + coeff0_16*dmats1[16][18] + coeff0_17*dmats1[17][18] + coeff0_18*dmats1[18][18] + coeff0_19*dmats1[19][18] + coeff0_20*dmats1[20][18] + coeff0_21*dmats1[21][18] + coeff0_22*dmats1[22][18] + coeff0_23*dmats1[23][18] + coeff0_24*dmats1[24][18] + coeff0_25*dmats1[25][18] + coeff0_26*dmats1[26][18] + coeff0_27*dmats1[27][18] + coeff0_28*dmats1[28][18] + coeff0_29*dmats1[29][18] + coeff0_30*dmats1[30][18] + coeff0_31*dmats1[31][18] + coeff0_32*dmats1[32][18] + coeff0_33*dmats1[33][18] + coeff0_34*dmats1[34][18];
          new_coeff0_19 = coeff0_0*dmats1[0][19] + coeff0_1*dmats1[1][19] + coeff0_2*dmats1[2][19] + coeff0_3*dmats1[3][19] + coeff0_4*dmats1[4][19] + coeff0_5*dmats1[5][19] + coeff0_6*dmats1[6][19] + coeff0_7*dmats1[7][19] + coeff0_8*dmats1[8][19] + coeff0_9*dmats1[9][19] + coeff0_10*dmats1[10][19] + coeff0_11*dmats1[11][19] + coeff0_12*dmats1[12][19] + coeff0_13*dmats1[13][19] + coeff0_14*dmats1[14][19] + coeff0_15*dmats1[15][19] + coeff0_16*dmats1[16][19] + coeff0_17*dmats1[17][19] + coeff0_18*dmats1[18][19] + coeff0_19*dmats1[19][19] + coeff0_20*dmats1[20][19] + coeff0_21*dmats1[21][19] + coeff0_22*dmats1[22][19] + coeff0_23*dmats1[23][19] + coeff0_24*dmats1[24][19] + coeff0_25*dmats1[25][19] + coeff0_26*dmats1[26][19] + coeff0_27*dmats1[27][19] + coeff0_28*dmats1[28][19] + coeff0_29*dmats1[29][19] + coeff0_30*dmats1[30][19] + coeff0_31*dmats1[31][19] + coeff0_32*dmats1[32][19] + coeff0_33*dmats1[33][19] + coeff0_34*dmats1[34][19];
          new_coeff0_20 = coeff0_0*dmats1[0][20] + coeff0_1*dmats1[1][20] + coeff0_2*dmats1[2][20] + coeff0_3*dmats1[3][20] + coeff0_4*dmats1[4][20] + coeff0_5*dmats1[5][20] + coeff0_6*dmats1[6][20] + coeff0_7*dmats1[7][20] + coeff0_8*dmats1[8][20] + coeff0_9*dmats1[9][20] + coeff0_10*dmats1[10][20] + coeff0_11*dmats1[11][20] + coeff0_12*dmats1[12][20] + coeff0_13*dmats1[13][20] + coeff0_14*dmats1[14][20] + coeff0_15*dmats1[15][20] + coeff0_16*dmats1[16][20] + coeff0_17*dmats1[17][20] + coeff0_18*dmats1[18][20] + coeff0_19*dmats1[19][20] + coeff0_20*dmats1[20][20] + coeff0_21*dmats1[21][20] + coeff0_22*dmats1[22][20] + coeff0_23*dmats1[23][20] + coeff0_24*dmats1[24][20] + coeff0_25*dmats1[25][20] + coeff0_26*dmats1[26][20] + coeff0_27*dmats1[27][20] + coeff0_28*dmats1[28][20] + coeff0_29*dmats1[29][20] + coeff0_30*dmats1[30][20] + coeff0_31*dmats1[31][20] + coeff0_32*dmats1[32][20] + coeff0_33*dmats1[33][20] + coeff0_34*dmats1[34][20];
          new_coeff0_21 = coeff0_0*dmats1[0][21] + coeff0_1*dmats1[1][21] + coeff0_2*dmats1[2][21] + coeff0_3*dmats1[3][21] + coeff0_4*dmats1[4][21] + coeff0_5*dmats1[5][21] + coeff0_6*dmats1[6][21] + coeff0_7*dmats1[7][21] + coeff0_8*dmats1[8][21] + coeff0_9*dmats1[9][21] + coeff0_10*dmats1[10][21] + coeff0_11*dmats1[11][21] + coeff0_12*dmats1[12][21] + coeff0_13*dmats1[13][21] + coeff0_14*dmats1[14][21] + coeff0_15*dmats1[15][21] + coeff0_16*dmats1[16][21] + coeff0_17*dmats1[17][21] + coeff0_18*dmats1[18][21] + coeff0_19*dmats1[19][21] + coeff0_20*dmats1[20][21] + coeff0_21*dmats1[21][21] + coeff0_22*dmats1[22][21] + coeff0_23*dmats1[23][21] + coeff0_24*dmats1[24][21] + coeff0_25*dmats1[25][21] + coeff0_26*dmats1[26][21] + coeff0_27*dmats1[27][21] + coeff0_28*dmats1[28][21] + coeff0_29*dmats1[29][21] + coeff0_30*dmats1[30][21] + coeff0_31*dmats1[31][21] + coeff0_32*dmats1[32][21] + coeff0_33*dmats1[33][21] + coeff0_34*dmats1[34][21];
          new_coeff0_22 = coeff0_0*dmats1[0][22] + coeff0_1*dmats1[1][22] + coeff0_2*dmats1[2][22] + coeff0_3*dmats1[3][22] + coeff0_4*dmats1[4][22] + coeff0_5*dmats1[5][22] + coeff0_6*dmats1[6][22] + coeff0_7*dmats1[7][22] + coeff0_8*dmats1[8][22] + coeff0_9*dmats1[9][22] + coeff0_10*dmats1[10][22] + coeff0_11*dmats1[11][22] + coeff0_12*dmats1[12][22] + coeff0_13*dmats1[13][22] + coeff0_14*dmats1[14][22] + coeff0_15*dmats1[15][22] + coeff0_16*dmats1[16][22] + coeff0_17*dmats1[17][22] + coeff0_18*dmats1[18][22] + coeff0_19*dmats1[19][22] + coeff0_20*dmats1[20][22] + coeff0_21*dmats1[21][22] + coeff0_22*dmats1[22][22] + coeff0_23*dmats1[23][22] + coeff0_24*dmats1[24][22] + coeff0_25*dmats1[25][22] + coeff0_26*dmats1[26][22] + coeff0_27*dmats1[27][22] + coeff0_28*dmats1[28][22] + coeff0_29*dmats1[29][22] + coeff0_30*dmats1[30][22] + coeff0_31*dmats1[31][22] + coeff0_32*dmats1[32][22] + coeff0_33*dmats1[33][22] + coeff0_34*dmats1[34][22];
          new_coeff0_23 = coeff0_0*dmats1[0][23] + coeff0_1*dmats1[1][23] + coeff0_2*dmats1[2][23] + coeff0_3*dmats1[3][23] + coeff0_4*dmats1[4][23] + coeff0_5*dmats1[5][23] + coeff0_6*dmats1[6][23] + coeff0_7*dmats1[7][23] + coeff0_8*dmats1[8][23] + coeff0_9*dmats1[9][23] + coeff0_10*dmats1[10][23] + coeff0_11*dmats1[11][23] + coeff0_12*dmats1[12][23] + coeff0_13*dmats1[13][23] + coeff0_14*dmats1[14][23] + coeff0_15*dmats1[15][23] + coeff0_16*dmats1[16][23] + coeff0_17*dmats1[17][23] + coeff0_18*dmats1[18][23] + coeff0_19*dmats1[19][23] + coeff0_20*dmats1[20][23] + coeff0_21*dmats1[21][23] + coeff0_22*dmats1[22][23] + coeff0_23*dmats1[23][23] + coeff0_24*dmats1[24][23] + coeff0_25*dmats1[25][23] + coeff0_26*dmats1[26][23] + coeff0_27*dmats1[27][23] + coeff0_28*dmats1[28][23] + coeff0_29*dmats1[29][23] + coeff0_30*dmats1[30][23] + coeff0_31*dmats1[31][23] + coeff0_32*dmats1[32][23] + coeff0_33*dmats1[33][23] + coeff0_34*dmats1[34][23];
          new_coeff0_24 = coeff0_0*dmats1[0][24] + coeff0_1*dmats1[1][24] + coeff0_2*dmats1[2][24] + coeff0_3*dmats1[3][24] + coeff0_4*dmats1[4][24] + coeff0_5*dmats1[5][24] + coeff0_6*dmats1[6][24] + coeff0_7*dmats1[7][24] + coeff0_8*dmats1[8][24] + coeff0_9*dmats1[9][24] + coeff0_10*dmats1[10][24] + coeff0_11*dmats1[11][24] + coeff0_12*dmats1[12][24] + coeff0_13*dmats1[13][24] + coeff0_14*dmats1[14][24] + coeff0_15*dmats1[15][24] + coeff0_16*dmats1[16][24] + coeff0_17*dmats1[17][24] + coeff0_18*dmats1[18][24] + coeff0_19*dmats1[19][24] + coeff0_20*dmats1[20][24] + coeff0_21*dmats1[21][24] + coeff0_22*dmats1[22][24] + coeff0_23*dmats1[23][24] + coeff0_24*dmats1[24][24] + coeff0_25*dmats1[25][24] + coeff0_26*dmats1[26][24] + coeff0_27*dmats1[27][24] + coeff0_28*dmats1[28][24] + coeff0_29*dmats1[29][24] + coeff0_30*dmats1[30][24] + coeff0_31*dmats1[31][24] + coeff0_32*dmats1[32][24] + coeff0_33*dmats1[33][24] + coeff0_34*dmats1[34][24];
          new_coeff0_25 = coeff0_0*dmats1[0][25] + coeff0_1*dmats1[1][25] + coeff0_2*dmats1[2][25] + coeff0_3*dmats1[3][25] + coeff0_4*dmats1[4][25] + coeff0_5*dmats1[5][25] + coeff0_6*dmats1[6][25] + coeff0_7*dmats1[7][25] + coeff0_8*dmats1[8][25] + coeff0_9*dmats1[9][25] + coeff0_10*dmats1[10][25] + coeff0_11*dmats1[11][25] + coeff0_12*dmats1[12][25] + coeff0_13*dmats1[13][25] + coeff0_14*dmats1[14][25] + coeff0_15*dmats1[15][25] + coeff0_16*dmats1[16][25] + coeff0_17*dmats1[17][25] + coeff0_18*dmats1[18][25] + coeff0_19*dmats1[19][25] + coeff0_20*dmats1[20][25] + coeff0_21*dmats1[21][25] + coeff0_22*dmats1[22][25] + coeff0_23*dmats1[23][25] + coeff0_24*dmats1[24][25] + coeff0_25*dmats1[25][25] + coeff0_26*dmats1[26][25] + coeff0_27*dmats1[27][25] + coeff0_28*dmats1[28][25] + coeff0_29*dmats1[29][25] + coeff0_30*dmats1[30][25] + coeff0_31*dmats1[31][25] + coeff0_32*dmats1[32][25] + coeff0_33*dmats1[33][25] + coeff0_34*dmats1[34][25];
          new_coeff0_26 = coeff0_0*dmats1[0][26] + coeff0_1*dmats1[1][26] + coeff0_2*dmats1[2][26] + coeff0_3*dmats1[3][26] + coeff0_4*dmats1[4][26] + coeff0_5*dmats1[5][26] + coeff0_6*dmats1[6][26] + coeff0_7*dmats1[7][26] + coeff0_8*dmats1[8][26] + coeff0_9*dmats1[9][26] + coeff0_10*dmats1[10][26] + coeff0_11*dmats1[11][26] + coeff0_12*dmats1[12][26] + coeff0_13*dmats1[13][26] + coeff0_14*dmats1[14][26] + coeff0_15*dmats1[15][26] + coeff0_16*dmats1[16][26] + coeff0_17*dmats1[17][26] + coeff0_18*dmats1[18][26] + coeff0_19*dmats1[19][26] + coeff0_20*dmats1[20][26] + coeff0_21*dmats1[21][26] + coeff0_22*dmats1[22][26] + coeff0_23*dmats1[23][26] + coeff0_24*dmats1[24][26] + coeff0_25*dmats1[25][26] + coeff0_26*dmats1[26][26] + coeff0_27*dmats1[27][26] + coeff0_28*dmats1[28][26] + coeff0_29*dmats1[29][26] + coeff0_30*dmats1[30][26] + coeff0_31*dmats1[31][26] + coeff0_32*dmats1[32][26] + coeff0_33*dmats1[33][26] + coeff0_34*dmats1[34][26];
          new_coeff0_27 = coeff0_0*dmats1[0][27] + coeff0_1*dmats1[1][27] + coeff0_2*dmats1[2][27] + coeff0_3*dmats1[3][27] + coeff0_4*dmats1[4][27] + coeff0_5*dmats1[5][27] + coeff0_6*dmats1[6][27] + coeff0_7*dmats1[7][27] + coeff0_8*dmats1[8][27] + coeff0_9*dmats1[9][27] + coeff0_10*dmats1[10][27] + coeff0_11*dmats1[11][27] + coeff0_12*dmats1[12][27] + coeff0_13*dmats1[13][27] + coeff0_14*dmats1[14][27] + coeff0_15*dmats1[15][27] + coeff0_16*dmats1[16][27] + coeff0_17*dmats1[17][27] + coeff0_18*dmats1[18][27] + coeff0_19*dmats1[19][27] + coeff0_20*dmats1[20][27] + coeff0_21*dmats1[21][27] + coeff0_22*dmats1[22][27] + coeff0_23*dmats1[23][27] + coeff0_24*dmats1[24][27] + coeff0_25*dmats1[25][27] + coeff0_26*dmats1[26][27] + coeff0_27*dmats1[27][27] + coeff0_28*dmats1[28][27] + coeff0_29*dmats1[29][27] + coeff0_30*dmats1[30][27] + coeff0_31*dmats1[31][27] + coeff0_32*dmats1[32][27] + coeff0_33*dmats1[33][27] + coeff0_34*dmats1[34][27];
          new_coeff0_28 = coeff0_0*dmats1[0][28] + coeff0_1*dmats1[1][28] + coeff0_2*dmats1[2][28] + coeff0_3*dmats1[3][28] + coeff0_4*dmats1[4][28] + coeff0_5*dmats1[5][28] + coeff0_6*dmats1[6][28] + coeff0_7*dmats1[7][28] + coeff0_8*dmats1[8][28] + coeff0_9*dmats1[9][28] + coeff0_10*dmats1[10][28] + coeff0_11*dmats1[11][28] + coeff0_12*dmats1[12][28] + coeff0_13*dmats1[13][28] + coeff0_14*dmats1[14][28] + coeff0_15*dmats1[15][28] + coeff0_16*dmats1[16][28] + coeff0_17*dmats1[17][28] + coeff0_18*dmats1[18][28] + coeff0_19*dmats1[19][28] + coeff0_20*dmats1[20][28] + coeff0_21*dmats1[21][28] + coeff0_22*dmats1[22][28] + coeff0_23*dmats1[23][28] + coeff0_24*dmats1[24][28] + coeff0_25*dmats1[25][28] + coeff0_26*dmats1[26][28] + coeff0_27*dmats1[27][28] + coeff0_28*dmats1[28][28] + coeff0_29*dmats1[29][28] + coeff0_30*dmats1[30][28] + coeff0_31*dmats1[31][28] + coeff0_32*dmats1[32][28] + coeff0_33*dmats1[33][28] + coeff0_34*dmats1[34][28];
          new_coeff0_29 = coeff0_0*dmats1[0][29] + coeff0_1*dmats1[1][29] + coeff0_2*dmats1[2][29] + coeff0_3*dmats1[3][29] + coeff0_4*dmats1[4][29] + coeff0_5*dmats1[5][29] + coeff0_6*dmats1[6][29] + coeff0_7*dmats1[7][29] + coeff0_8*dmats1[8][29] + coeff0_9*dmats1[9][29] + coeff0_10*dmats1[10][29] + coeff0_11*dmats1[11][29] + coeff0_12*dmats1[12][29] + coeff0_13*dmats1[13][29] + coeff0_14*dmats1[14][29] + coeff0_15*dmats1[15][29] + coeff0_16*dmats1[16][29] + coeff0_17*dmats1[17][29] + coeff0_18*dmats1[18][29] + coeff0_19*dmats1[19][29] + coeff0_20*dmats1[20][29] + coeff0_21*dmats1[21][29] + coeff0_22*dmats1[22][29] + coeff0_23*dmats1[23][29] + coeff0_24*dmats1[24][29] + coeff0_25*dmats1[25][29] + coeff0_26*dmats1[26][29] + coeff0_27*dmats1[27][29] + coeff0_28*dmats1[28][29] + coeff0_29*dmats1[29][29] + coeff0_30*dmats1[30][29] + coeff0_31*dmats1[31][29] + coeff0_32*dmats1[32][29] + coeff0_33*dmats1[33][29] + coeff0_34*dmats1[34][29];
          new_coeff0_30 = coeff0_0*dmats1[0][30] + coeff0_1*dmats1[1][30] + coeff0_2*dmats1[2][30] + coeff0_3*dmats1[3][30] + coeff0_4*dmats1[4][30] + coeff0_5*dmats1[5][30] + coeff0_6*dmats1[6][30] + coeff0_7*dmats1[7][30] + coeff0_8*dmats1[8][30] + coeff0_9*dmats1[9][30] + coeff0_10*dmats1[10][30] + coeff0_11*dmats1[11][30] + coeff0_12*dmats1[12][30] + coeff0_13*dmats1[13][30] + coeff0_14*dmats1[14][30] + coeff0_15*dmats1[15][30] + coeff0_16*dmats1[16][30] + coeff0_17*dmats1[17][30] + coeff0_18*dmats1[18][30] + coeff0_19*dmats1[19][30] + coeff0_20*dmats1[20][30] + coeff0_21*dmats1[21][30] + coeff0_22*dmats1[22][30] + coeff0_23*dmats1[23][30] + coeff0_24*dmats1[24][30] + coeff0_25*dmats1[25][30] + coeff0_26*dmats1[26][30] + coeff0_27*dmats1[27][30] + coeff0_28*dmats1[28][30] + coeff0_29*dmats1[29][30] + coeff0_30*dmats1[30][30] + coeff0_31*dmats1[31][30] + coeff0_32*dmats1[32][30] + coeff0_33*dmats1[33][30] + coeff0_34*dmats1[34][30];
          new_coeff0_31 = coeff0_0*dmats1[0][31] + coeff0_1*dmats1[1][31] + coeff0_2*dmats1[2][31] + coeff0_3*dmats1[3][31] + coeff0_4*dmats1[4][31] + coeff0_5*dmats1[5][31] + coeff0_6*dmats1[6][31] + coeff0_7*dmats1[7][31] + coeff0_8*dmats1[8][31] + coeff0_9*dmats1[9][31] + coeff0_10*dmats1[10][31] + coeff0_11*dmats1[11][31] + coeff0_12*dmats1[12][31] + coeff0_13*dmats1[13][31] + coeff0_14*dmats1[14][31] + coeff0_15*dmats1[15][31] + coeff0_16*dmats1[16][31] + coeff0_17*dmats1[17][31] + coeff0_18*dmats1[18][31] + coeff0_19*dmats1[19][31] + coeff0_20*dmats1[20][31] + coeff0_21*dmats1[21][31] + coeff0_22*dmats1[22][31] + coeff0_23*dmats1[23][31] + coeff0_24*dmats1[24][31] + coeff0_25*dmats1[25][31] + coeff0_26*dmats1[26][31] + coeff0_27*dmats1[27][31] + coeff0_28*dmats1[28][31] + coeff0_29*dmats1[29][31] + coeff0_30*dmats1[30][31] + coeff0_31*dmats1[31][31] + coeff0_32*dmats1[32][31] + coeff0_33*dmats1[33][31] + coeff0_34*dmats1[34][31];
          new_coeff0_32 = coeff0_0*dmats1[0][32] + coeff0_1*dmats1[1][32] + coeff0_2*dmats1[2][32] + coeff0_3*dmats1[3][32] + coeff0_4*dmats1[4][32] + coeff0_5*dmats1[5][32] + coeff0_6*dmats1[6][32] + coeff0_7*dmats1[7][32] + coeff0_8*dmats1[8][32] + coeff0_9*dmats1[9][32] + coeff0_10*dmats1[10][32] + coeff0_11*dmats1[11][32] + coeff0_12*dmats1[12][32] + coeff0_13*dmats1[13][32] + coeff0_14*dmats1[14][32] + coeff0_15*dmats1[15][32] + coeff0_16*dmats1[16][32] + coeff0_17*dmats1[17][32] + coeff0_18*dmats1[18][32] + coeff0_19*dmats1[19][32] + coeff0_20*dmats1[20][32] + coeff0_21*dmats1[21][32] + coeff0_22*dmats1[22][32] + coeff0_23*dmats1[23][32] + coeff0_24*dmats1[24][32] + coeff0_25*dmats1[25][32] + coeff0_26*dmats1[26][32] + coeff0_27*dmats1[27][32] + coeff0_28*dmats1[28][32] + coeff0_29*dmats1[29][32] + coeff0_30*dmats1[30][32] + coeff0_31*dmats1[31][32] + coeff0_32*dmats1[32][32] + coeff0_33*dmats1[33][32] + coeff0_34*dmats1[34][32];
          new_coeff0_33 = coeff0_0*dmats1[0][33] + coeff0_1*dmats1[1][33] + coeff0_2*dmats1[2][33] + coeff0_3*dmats1[3][33] + coeff0_4*dmats1[4][33] + coeff0_5*dmats1[5][33] + coeff0_6*dmats1[6][33] + coeff0_7*dmats1[7][33] + coeff0_8*dmats1[8][33] + coeff0_9*dmats1[9][33] + coeff0_10*dmats1[10][33] + coeff0_11*dmats1[11][33] + coeff0_12*dmats1[12][33] + coeff0_13*dmats1[13][33] + coeff0_14*dmats1[14][33] + coeff0_15*dmats1[15][33] + coeff0_16*dmats1[16][33] + coeff0_17*dmats1[17][33] + coeff0_18*dmats1[18][33] + coeff0_19*dmats1[19][33] + coeff0_20*dmats1[20][33] + coeff0_21*dmats1[21][33] + coeff0_22*dmats1[22][33] + coeff0_23*dmats1[23][33] + coeff0_24*dmats1[24][33] + coeff0_25*dmats1[25][33] + coeff0_26*dmats1[26][33] + coeff0_27*dmats1[27][33] + coeff0_28*dmats1[28][33] + coeff0_29*dmats1[29][33] + coeff0_30*dmats1[30][33] + coeff0_31*dmats1[31][33] + coeff0_32*dmats1[32][33] + coeff0_33*dmats1[33][33] + coeff0_34*dmats1[34][33];
          new_coeff0_34 = coeff0_0*dmats1[0][34] + coeff0_1*dmats1[1][34] + coeff0_2*dmats1[2][34] + coeff0_3*dmats1[3][34] + coeff0_4*dmats1[4][34] + coeff0_5*dmats1[5][34] + coeff0_6*dmats1[6][34] + coeff0_7*dmats1[7][34] + coeff0_8*dmats1[8][34] + coeff0_9*dmats1[9][34] + coeff0_10*dmats1[10][34] + coeff0_11*dmats1[11][34] + coeff0_12*dmats1[12][34] + coeff0_13*dmats1[13][34] + coeff0_14*dmats1[14][34] + coeff0_15*dmats1[15][34] + coeff0_16*dmats1[16][34] + coeff0_17*dmats1[17][34] + coeff0_18*dmats1[18][34] + coeff0_19*dmats1[19][34] + coeff0_20*dmats1[20][34] + coeff0_21*dmats1[21][34] + coeff0_22*dmats1[22][34] + coeff0_23*dmats1[23][34] + coeff0_24*dmats1[24][34] + coeff0_25*dmats1[25][34] + coeff0_26*dmats1[26][34] + coeff0_27*dmats1[27][34] + coeff0_28*dmats1[28][34] + coeff0_29*dmats1[29][34] + coeff0_30*dmats1[30][34] + coeff0_31*dmats1[31][34] + coeff0_32*dmats1[32][34] + coeff0_33*dmats1[33][34] + coeff0_34*dmats1[34][34];
        }
        if(combinations[deriv_num][j] == 2)
        {
          new_coeff0_0 = coeff0_0*dmats2[0][0] + coeff0_1*dmats2[1][0] + coeff0_2*dmats2[2][0] + coeff0_3*dmats2[3][0] + coeff0_4*dmats2[4][0] + coeff0_5*dmats2[5][0] + coeff0_6*dmats2[6][0] + coeff0_7*dmats2[7][0] + coeff0_8*dmats2[8][0] + coeff0_9*dmats2[9][0] + coeff0_10*dmats2[10][0] + coeff0_11*dmats2[11][0] + coeff0_12*dmats2[12][0] + coeff0_13*dmats2[13][0] + coeff0_14*dmats2[14][0] + coeff0_15*dmats2[15][0] + coeff0_16*dmats2[16][0] + coeff0_17*dmats2[17][0] + coeff0_18*dmats2[18][0] + coeff0_19*dmats2[19][0] + coeff0_20*dmats2[20][0] + coeff0_21*dmats2[21][0] + coeff0_22*dmats2[22][0] + coeff0_23*dmats2[23][0] + coeff0_24*dmats2[24][0] + coeff0_25*dmats2[25][0] + coeff0_26*dmats2[26][0] + coeff0_27*dmats2[27][0] + coeff0_28*dmats2[28][0] + coeff0_29*dmats2[29][0] + coeff0_30*dmats2[30][0] + coeff0_31*dmats2[31][0] + coeff0_32*dmats2[32][0] + coeff0_33*dmats2[33][0] + coeff0_34*dmats2[34][0];
          new_coeff0_1 = coeff0_0*dmats2[0][1] + coeff0_1*dmats2[1][1] + coeff0_2*dmats2[2][1] + coeff0_3*dmats2[3][1] + coeff0_4*dmats2[4][1] + coeff0_5*dmats2[5][1] + coeff0_6*dmats2[6][1] + coeff0_7*dmats2[7][1] + coeff0_8*dmats2[8][1] + coeff0_9*dmats2[9][1] + coeff0_10*dmats2[10][1] + coeff0_11*dmats2[11][1] + coeff0_12*dmats2[12][1] + coeff0_13*dmats2[13][1] + coeff0_14*dmats2[14][1] + coeff0_15*dmats2[15][1] + coeff0_16*dmats2[16][1] + coeff0_17*dmats2[17][1] + coeff0_18*dmats2[18][1] + coeff0_19*dmats2[19][1] + coeff0_20*dmats2[20][1] + coeff0_21*dmats2[21][1] + coeff0_22*dmats2[22][1] + coeff0_23*dmats2[23][1] + coeff0_24*dmats2[24][1] + coeff0_25*dmats2[25][1] + coeff0_26*dmats2[26][1] + coeff0_27*dmats2[27][1] + coeff0_28*dmats2[28][1] + coeff0_29*dmats2[29][1] + coeff0_30*dmats2[30][1] + coeff0_31*dmats2[31][1] + coeff0_32*dmats2[32][1] + coeff0_33*dmats2[33][1] + coeff0_34*dmats2[34][1];
          new_coeff0_2 = coeff0_0*dmats2[0][2] + coeff0_1*dmats2[1][2] + coeff0_2*dmats2[2][2] + coeff0_3*dmats2[3][2] + coeff0_4*dmats2[4][2] + coeff0_5*dmats2[5][2] + coeff0_6*dmats2[6][2] + coeff0_7*dmats2[7][2] + coeff0_8*dmats2[8][2] + coeff0_9*dmats2[9][2] + coeff0_10*dmats2[10][2] + coeff0_11*dmats2[11][2] + coeff0_12*dmats2[12][2] + coeff0_13*dmats2[13][2] + coeff0_14*dmats2[14][2] + coeff0_15*dmats2[15][2] + coeff0_16*dmats2[16][2] + coeff0_17*dmats2[17][2] + coeff0_18*dmats2[18][2] + coeff0_19*dmats2[19][2] + coeff0_20*dmats2[20][2] + coeff0_21*dmats2[21][2] + coeff0_22*dmats2[22][2] + coeff0_23*dmats2[23][2] + coeff0_24*dmats2[24][2] + coeff0_25*dmats2[25][2] + coeff0_26*dmats2[26][2] + coeff0_27*dmats2[27][2] + coeff0_28*dmats2[28][2] + coeff0_29*dmats2[29][2] + coeff0_30*dmats2[30][2] + coeff0_31*dmats2[31][2] + coeff0_32*dmats2[32][2] + coeff0_33*dmats2[33][2] + coeff0_34*dmats2[34][2];
          new_coeff0_3 = coeff0_0*dmats2[0][3] + coeff0_1*dmats2[1][3] + coeff0_2*dmats2[2][3] + coeff0_3*dmats2[3][3] + coeff0_4*dmats2[4][3] + coeff0_5*dmats2[5][3] + coeff0_6*dmats2[6][3] + coeff0_7*dmats2[7][3] + coeff0_8*dmats2[8][3] + coeff0_9*dmats2[9][3] + coeff0_10*dmats2[10][3] + coeff0_11*dmats2[11][3] + coeff0_12*dmats2[12][3] + coeff0_13*dmats2[13][3] + coeff0_14*dmats2[14][3] + coeff0_15*dmats2[15][3] + coeff0_16*dmats2[16][3] + coeff0_17*dmats2[17][3] + coeff0_18*dmats2[18][3] + coeff0_19*dmats2[19][3] + coeff0_20*dmats2[20][3] + coeff0_21*dmats2[21][3] + coeff0_22*dmats2[22][3] + coeff0_23*dmats2[23][3] + coeff0_24*dmats2[24][3] + coeff0_25*dmats2[25][3] + coeff0_26*dmats2[26][3] + coeff0_27*dmats2[27][3] + coeff0_28*dmats2[28][3] + coeff0_29*dmats2[29][3] + coeff0_30*dmats2[30][3] + coeff0_31*dmats2[31][3] + coeff0_32*dmats2[32][3] + coeff0_33*dmats2[33][3] + coeff0_34*dmats2[34][3];
          new_coeff0_4 = coeff0_0*dmats2[0][4] + coeff0_1*dmats2[1][4] + coeff0_2*dmats2[2][4] + coeff0_3*dmats2[3][4] + coeff0_4*dmats2[4][4] + coeff0_5*dmats2[5][4] + coeff0_6*dmats2[6][4] + coeff0_7*dmats2[7][4] + coeff0_8*dmats2[8][4] + coeff0_9*dmats2[9][4] + coeff0_10*dmats2[10][4] + coeff0_11*dmats2[11][4] + coeff0_12*dmats2[12][4] + coeff0_13*dmats2[13][4] + coeff0_14*dmats2[14][4] + coeff0_15*dmats2[15][4] + coeff0_16*dmats2[16][4] + coeff0_17*dmats2[17][4] + coeff0_18*dmats2[18][4] + coeff0_19*dmats2[19][4] + coeff0_20*dmats2[20][4] + coeff0_21*dmats2[21][4] + coeff0_22*dmats2[22][4] + coeff0_23*dmats2[23][4] + coeff0_24*dmats2[24][4] + coeff0_25*dmats2[25][4] + coeff0_26*dmats2[26][4] + coeff0_27*dmats2[27][4] + coeff0_28*dmats2[28][4] + coeff0_29*dmats2[29][4] + coeff0_30*dmats2[30][4] + coeff0_31*dmats2[31][4] + coeff0_32*dmats2[32][4] + coeff0_33*dmats2[33][4] + coeff0_34*dmats2[34][4];
          new_coeff0_5 = coeff0_0*dmats2[0][5] + coeff0_1*dmats2[1][5] + coeff0_2*dmats2[2][5] + coeff0_3*dmats2[3][5] + coeff0_4*dmats2[4][5] + coeff0_5*dmats2[5][5] + coeff0_6*dmats2[6][5] + coeff0_7*dmats2[7][5] + coeff0_8*dmats2[8][5] + coeff0_9*dmats2[9][5] + coeff0_10*dmats2[10][5] + coeff0_11*dmats2[11][5] + coeff0_12*dmats2[12][5] + coeff0_13*dmats2[13][5] + coeff0_14*dmats2[14][5] + coeff0_15*dmats2[15][5] + coeff0_16*dmats2[16][5] + coeff0_17*dmats2[17][5] + coeff0_18*dmats2[18][5] + coeff0_19*dmats2[19][5] + coeff0_20*dmats2[20][5] + coeff0_21*dmats2[21][5] + coeff0_22*dmats2[22][5] + coeff0_23*dmats2[23][5] + coeff0_24*dmats2[24][5] + coeff0_25*dmats2[25][5] + coeff0_26*dmats2[26][5] + coeff0_27*dmats2[27][5] + coeff0_28*dmats2[28][5] + coeff0_29*dmats2[29][5] + coeff0_30*dmats2[30][5] + coeff0_31*dmats2[31][5] + coeff0_32*dmats2[32][5] + coeff0_33*dmats2[33][5] + coeff0_34*dmats2[34][5];
          new_coeff0_6 = coeff0_0*dmats2[0][6] + coeff0_1*dmats2[1][6] + coeff0_2*dmats2[2][6] + coeff0_3*dmats2[3][6] + coeff0_4*dmats2[4][6] + coeff0_5*dmats2[5][6] + coeff0_6*dmats2[6][6] + coeff0_7*dmats2[7][6] + coeff0_8*dmats2[8][6] + coeff0_9*dmats2[9][6] + coeff0_10*dmats2[10][6] + coeff0_11*dmats2[11][6] + coeff0_12*dmats2[12][6] + coeff0_13*dmats2[13][6] + coeff0_14*dmats2[14][6] + coeff0_15*dmats2[15][6] + coeff0_16*dmats2[16][6] + coeff0_17*dmats2[17][6] + coeff0_18*dmats2[18][6] + coeff0_19*dmats2[19][6] + coeff0_20*dmats2[20][6] + coeff0_21*dmats2[21][6] + coeff0_22*dmats2[22][6] + coeff0_23*dmats2[23][6] + coeff0_24*dmats2[24][6] + coeff0_25*dmats2[25][6] + coeff0_26*dmats2[26][6] + coeff0_27*dmats2[27][6] + coeff0_28*dmats2[28][6] + coeff0_29*dmats2[29][6] + coeff0_30*dmats2[30][6] + coeff0_31*dmats2[31][6] + coeff0_32*dmats2[32][6] + coeff0_33*dmats2[33][6] + coeff0_34*dmats2[34][6];
          new_coeff0_7 = coeff0_0*dmats2[0][7] + coeff0_1*dmats2[1][7] + coeff0_2*dmats2[2][7] + coeff0_3*dmats2[3][7] + coeff0_4*dmats2[4][7] + coeff0_5*dmats2[5][7] + coeff0_6*dmats2[6][7] + coeff0_7*dmats2[7][7] + coeff0_8*dmats2[8][7] + coeff0_9*dmats2[9][7] + coeff0_10*dmats2[10][7] + coeff0_11*dmats2[11][7] + coeff0_12*dmats2[12][7] + coeff0_13*dmats2[13][7] + coeff0_14*dmats2[14][7] + coeff0_15*dmats2[15][7] + coeff0_16*dmats2[16][7] + coeff0_17*dmats2[17][7] + coeff0_18*dmats2[18][7] + coeff0_19*dmats2[19][7] + coeff0_20*dmats2[20][7] + coeff0_21*dmats2[21][7] + coeff0_22*dmats2[22][7] + coeff0_23*dmats2[23][7] + coeff0_24*dmats2[24][7] + coeff0_25*dmats2[25][7] + coeff0_26*dmats2[26][7] + coeff0_27*dmats2[27][7] + coeff0_28*dmats2[28][7] + coeff0_29*dmats2[29][7] + coeff0_30*dmats2[30][7] + coeff0_31*dmats2[31][7] + coeff0_32*dmats2[32][7] + coeff0_33*dmats2[33][7] + coeff0_34*dmats2[34][7];
          new_coeff0_8 = coeff0_0*dmats2[0][8] + coeff0_1*dmats2[1][8] + coeff0_2*dmats2[2][8] + coeff0_3*dmats2[3][8] + coeff0_4*dmats2[4][8] + coeff0_5*dmats2[5][8] + coeff0_6*dmats2[6][8] + coeff0_7*dmats2[7][8] + coeff0_8*dmats2[8][8] + coeff0_9*dmats2[9][8] + coeff0_10*dmats2[10][8] + coeff0_11*dmats2[11][8] + coeff0_12*dmats2[12][8] + coeff0_13*dmats2[13][8] + coeff0_14*dmats2[14][8] + coeff0_15*dmats2[15][8] + coeff0_16*dmats2[16][8] + coeff0_17*dmats2[17][8] + coeff0_18*dmats2[18][8] + coeff0_19*dmats2[19][8] + coeff0_20*dmats2[20][8] + coeff0_21*dmats2[21][8] + coeff0_22*dmats2[22][8] + coeff0_23*dmats2[23][8] + coeff0_24*dmats2[24][8] + coeff0_25*dmats2[25][8] + coeff0_26*dmats2[26][8] + coeff0_27*dmats2[27][8] + coeff0_28*dmats2[28][8] + coeff0_29*dmats2[29][8] + coeff0_30*dmats2[30][8] + coeff0_31*dmats2[31][8] + coeff0_32*dmats2[32][8] + coeff0_33*dmats2[33][8] + coeff0_34*dmats2[34][8];
          new_coeff0_9 = coeff0_0*dmats2[0][9] + coeff0_1*dmats2[1][9] + coeff0_2*dmats2[2][9] + coeff0_3*dmats2[3][9] + coeff0_4*dmats2[4][9] + coeff0_5*dmats2[5][9] + coeff0_6*dmats2[6][9] + coeff0_7*dmats2[7][9] + coeff0_8*dmats2[8][9] + coeff0_9*dmats2[9][9] + coeff0_10*dmats2[10][9] + coeff0_11*dmats2[11][9] + coeff0_12*dmats2[12][9] + coeff0_13*dmats2[13][9] + coeff0_14*dmats2[14][9] + coeff0_15*dmats2[15][9] + coeff0_16*dmats2[16][9] + coeff0_17*dmats2[17][9] + coeff0_18*dmats2[18][9] + coeff0_19*dmats2[19][9] + coeff0_20*dmats2[20][9] + coeff0_21*dmats2[21][9] + coeff0_22*dmats2[22][9] + coeff0_23*dmats2[23][9] + coeff0_24*dmats2[24][9] + coeff0_25*dmats2[25][9] + coeff0_26*dmats2[26][9] + coeff0_27*dmats2[27][9] + coeff0_28*dmats2[28][9] + coeff0_29*dmats2[29][9] + coeff0_30*dmats2[30][9] + coeff0_31*dmats2[31][9] + coeff0_32*dmats2[32][9] + coeff0_33*dmats2[33][9] + coeff0_34*dmats2[34][9];
          new_coeff0_10 = coeff0_0*dmats2[0][10] + coeff0_1*dmats2[1][10] + coeff0_2*dmats2[2][10] + coeff0_3*dmats2[3][10] + coeff0_4*dmats2[4][10] + coeff0_5*dmats2[5][10] + coeff0_6*dmats2[6][10] + coeff0_7*dmats2[7][10] + coeff0_8*dmats2[8][10] + coeff0_9*dmats2[9][10] + coeff0_10*dmats2[10][10] + coeff0_11*dmats2[11][10] + coeff0_12*dmats2[12][10] + coeff0_13*dmats2[13][10] + coeff0_14*dmats2[14][10] + coeff0_15*dmats2[15][10] + coeff0_16*dmats2[16][10] + coeff0_17*dmats2[17][10] + coeff0_18*dmats2[18][10] + coeff0_19*dmats2[19][10] + coeff0_20*dmats2[20][10] + coeff0_21*dmats2[21][10] + coeff0_22*dmats2[22][10] + coeff0_23*dmats2[23][10] + coeff0_24*dmats2[24][10] + coeff0_25*dmats2[25][10] + coeff0_26*dmats2[26][10] + coeff0_27*dmats2[27][10] + coeff0_28*dmats2[28][10] + coeff0_29*dmats2[29][10] + coeff0_30*dmats2[30][10] + coeff0_31*dmats2[31][10] + coeff0_32*dmats2[32][10] + coeff0_33*dmats2[33][10] + coeff0_34*dmats2[34][10];
          new_coeff0_11 = coeff0_0*dmats2[0][11] + coeff0_1*dmats2[1][11] + coeff0_2*dmats2[2][11] + coeff0_3*dmats2[3][11] + coeff0_4*dmats2[4][11] + coeff0_5*dmats2[5][11] + coeff0_6*dmats2[6][11] + coeff0_7*dmats2[7][11] + coeff0_8*dmats2[8][11] + coeff0_9*dmats2[9][11] + coeff0_10*dmats2[10][11] + coeff0_11*dmats2[11][11] + coeff0_12*dmats2[12][11] + coeff0_13*dmats2[13][11] + coeff0_14*dmats2[14][11] + coeff0_15*dmats2[15][11] + coeff0_16*dmats2[16][11] + coeff0_17*dmats2[17][11] + coeff0_18*dmats2[18][11] + coeff0_19*dmats2[19][11] + coeff0_20*dmats2[20][11] + coeff0_21*dmats2[21][11] + coeff0_22*dmats2[22][11] + coeff0_23*dmats2[23][11] + coeff0_24*dmats2[24][11] + coeff0_25*dmats2[25][11] + coeff0_26*dmats2[26][11] + coeff0_27*dmats2[27][11] + coeff0_28*dmats2[28][11] + coeff0_29*dmats2[29][11] + coeff0_30*dmats2[30][11] + coeff0_31*dmats2[31][11] + coeff0_32*dmats2[32][11] + coeff0_33*dmats2[33][11] + coeff0_34*dmats2[34][11];
          new_coeff0_12 = coeff0_0*dmats2[0][12] + coeff0_1*dmats2[1][12] + coeff0_2*dmats2[2][12] + coeff0_3*dmats2[3][12] + coeff0_4*dmats2[4][12] + coeff0_5*dmats2[5][12] + coeff0_6*dmats2[6][12] + coeff0_7*dmats2[7][12] + coeff0_8*dmats2[8][12] + coeff0_9*dmats2[9][12] + coeff0_10*dmats2[10][12] + coeff0_11*dmats2[11][12] + coeff0_12*dmats2[12][12] + coeff0_13*dmats2[13][12] + coeff0_14*dmats2[14][12] + coeff0_15*dmats2[15][12] + coeff0_16*dmats2[16][12] + coeff0_17*dmats2[17][12] + coeff0_18*dmats2[18][12] + coeff0_19*dmats2[19][12] + coeff0_20*dmats2[20][12] + coeff0_21*dmats2[21][12] + coeff0_22*dmats2[22][12] + coeff0_23*dmats2[23][12] + coeff0_24*dmats2[24][12] + coeff0_25*dmats2[25][12] + coeff0_26*dmats2[26][12] + coeff0_27*dmats2[27][12] + coeff0_28*dmats2[28][12] + coeff0_29*dmats2[29][12] + coeff0_30*dmats2[30][12] + coeff0_31*dmats2[31][12] + coeff0_32*dmats2[32][12] + coeff0_33*dmats2[33][12] + coeff0_34*dmats2[34][12];
          new_coeff0_13 = coeff0_0*dmats2[0][13] + coeff0_1*dmats2[1][13] + coeff0_2*dmats2[2][13] + coeff0_3*dmats2[3][13] + coeff0_4*dmats2[4][13] + coeff0_5*dmats2[5][13] + coeff0_6*dmats2[6][13] + coeff0_7*dmats2[7][13] + coeff0_8*dmats2[8][13] + coeff0_9*dmats2[9][13] + coeff0_10*dmats2[10][13] + coeff0_11*dmats2[11][13] + coeff0_12*dmats2[12][13] + coeff0_13*dmats2[13][13] + coeff0_14*dmats2[14][13] + coeff0_15*dmats2[15][13] + coeff0_16*dmats2[16][13] + coeff0_17*dmats2[17][13] + coeff0_18*dmats2[18][13] + coeff0_19*dmats2[19][13] + coeff0_20*dmats2[20][13] + coeff0_21*dmats2[21][13] + coeff0_22*dmats2[22][13] + coeff0_23*dmats2[23][13] + coeff0_24*dmats2[24][13] + coeff0_25*dmats2[25][13] + coeff0_26*dmats2[26][13] + coeff0_27*dmats2[27][13] + coeff0_28*dmats2[28][13] + coeff0_29*dmats2[29][13] + coeff0_30*dmats2[30][13] + coeff0_31*dmats2[31][13] + coeff0_32*dmats2[32][13] + coeff0_33*dmats2[33][13] + coeff0_34*dmats2[34][13];
          new_coeff0_14 = coeff0_0*dmats2[0][14] + coeff0_1*dmats2[1][14] + coeff0_2*dmats2[2][14] + coeff0_3*dmats2[3][14] + coeff0_4*dmats2[4][14] + coeff0_5*dmats2[5][14] + coeff0_6*dmats2[6][14] + coeff0_7*dmats2[7][14] + coeff0_8*dmats2[8][14] + coeff0_9*dmats2[9][14] + coeff0_10*dmats2[10][14] + coeff0_11*dmats2[11][14] + coeff0_12*dmats2[12][14] + coeff0_13*dmats2[13][14] + coeff0_14*dmats2[14][14] + coeff0_15*dmats2[15][14] + coeff0_16*dmats2[16][14] + coeff0_17*dmats2[17][14] + coeff0_18*dmats2[18][14] + coeff0_19*dmats2[19][14] + coeff0_20*dmats2[20][14] + coeff0_21*dmats2[21][14] + coeff0_22*dmats2[22][14] + coeff0_23*dmats2[23][14] + coeff0_24*dmats2[24][14] + coeff0_25*dmats2[25][14] + coeff0_26*dmats2[26][14] + coeff0_27*dmats2[27][14] + coeff0_28*dmats2[28][14] + coeff0_29*dmats2[29][14] + coeff0_30*dmats2[30][14] + coeff0_31*dmats2[31][14] + coeff0_32*dmats2[32][14] + coeff0_33*dmats2[33][14] + coeff0_34*dmats2[34][14];
          new_coeff0_15 = coeff0_0*dmats2[0][15] + coeff0_1*dmats2[1][15] + coeff0_2*dmats2[2][15] + coeff0_3*dmats2[3][15] + coeff0_4*dmats2[4][15] + coeff0_5*dmats2[5][15] + coeff0_6*dmats2[6][15] + coeff0_7*dmats2[7][15] + coeff0_8*dmats2[8][15] + coeff0_9*dmats2[9][15] + coeff0_10*dmats2[10][15] + coeff0_11*dmats2[11][15] + coeff0_12*dmats2[12][15] + coeff0_13*dmats2[13][15] + coeff0_14*dmats2[14][15] + coeff0_15*dmats2[15][15] + coeff0_16*dmats2[16][15] + coeff0_17*dmats2[17][15] + coeff0_18*dmats2[18][15] + coeff0_19*dmats2[19][15] + coeff0_20*dmats2[20][15] + coeff0_21*dmats2[21][15] + coeff0_22*dmats2[22][15] + coeff0_23*dmats2[23][15] + coeff0_24*dmats2[24][15] + coeff0_25*dmats2[25][15] + coeff0_26*dmats2[26][15] + coeff0_27*dmats2[27][15] + coeff0_28*dmats2[28][15] + coeff0_29*dmats2[29][15] + coeff0_30*dmats2[30][15] + coeff0_31*dmats2[31][15] + coeff0_32*dmats2[32][15] + coeff0_33*dmats2[33][15] + coeff0_34*dmats2[34][15];
          new_coeff0_16 = coeff0_0*dmats2[0][16] + coeff0_1*dmats2[1][16] + coeff0_2*dmats2[2][16] + coeff0_3*dmats2[3][16] + coeff0_4*dmats2[4][16] + coeff0_5*dmats2[5][16] + coeff0_6*dmats2[6][16] + coeff0_7*dmats2[7][16] + coeff0_8*dmats2[8][16] + coeff0_9*dmats2[9][16] + coeff0_10*dmats2[10][16] + coeff0_11*dmats2[11][16] + coeff0_12*dmats2[12][16] + coeff0_13*dmats2[13][16] + coeff0_14*dmats2[14][16] + coeff0_15*dmats2[15][16] + coeff0_16*dmats2[16][16] + coeff0_17*dmats2[17][16] + coeff0_18*dmats2[18][16] + coeff0_19*dmats2[19][16] + coeff0_20*dmats2[20][16] + coeff0_21*dmats2[21][16] + coeff0_22*dmats2[22][16] + coeff0_23*dmats2[23][16] + coeff0_24*dmats2[24][16] + coeff0_25*dmats2[25][16] + coeff0_26*dmats2[26][16] + coeff0_27*dmats2[27][16] + coeff0_28*dmats2[28][16] + coeff0_29*dmats2[29][16] + coeff0_30*dmats2[30][16] + coeff0_31*dmats2[31][16] + coeff0_32*dmats2[32][16] + coeff0_33*dmats2[33][16] + coeff0_34*dmats2[34][16];
          new_coeff0_17 = coeff0_0*dmats2[0][17] + coeff0_1*dmats2[1][17] + coeff0_2*dmats2[2][17] + coeff0_3*dmats2[3][17] + coeff0_4*dmats2[4][17] + coeff0_5*dmats2[5][17] + coeff0_6*dmats2[6][17] + coeff0_7*dmats2[7][17] + coeff0_8*dmats2[8][17] + coeff0_9*dmats2[9][17] + coeff0_10*dmats2[10][17] + coeff0_11*dmats2[11][17] + coeff0_12*dmats2[12][17] + coeff0_13*dmats2[13][17] + coeff0_14*dmats2[14][17] + coeff0_15*dmats2[15][17] + coeff0_16*dmats2[16][17] + coeff0_17*dmats2[17][17] + coeff0_18*dmats2[18][17] + coeff0_19*dmats2[19][17] + coeff0_20*dmats2[20][17] + coeff0_21*dmats2[21][17] + coeff0_22*dmats2[22][17] + coeff0_23*dmats2[23][17] + coeff0_24*dmats2[24][17] + coeff0_25*dmats2[25][17] + coeff0_26*dmats2[26][17] + coeff0_27*dmats2[27][17] + coeff0_28*dmats2[28][17] + coeff0_29*dmats2[29][17] + coeff0_30*dmats2[30][17] + coeff0_31*dmats2[31][17] + coeff0_32*dmats2[32][17] + coeff0_33*dmats2[33][17] + coeff0_34*dmats2[34][17];
          new_coeff0_18 = coeff0_0*dmats2[0][18] + coeff0_1*dmats2[1][18] + coeff0_2*dmats2[2][18] + coeff0_3*dmats2[3][18] + coeff0_4*dmats2[4][18] + coeff0_5*dmats2[5][18] + coeff0_6*dmats2[6][18] + coeff0_7*dmats2[7][18] + coeff0_8*dmats2[8][18] + coeff0_9*dmats2[9][18] + coeff0_10*dmats2[10][18] + coeff0_11*dmats2[11][18] + coeff0_12*dmats2[12][18] + coeff0_13*dmats2[13][18] + coeff0_14*dmats2[14][18] + coeff0_15*dmats2[15][18] + coeff0_16*dmats2[16][18] + coeff0_17*dmats2[17][18] + coeff0_18*dmats2[18][18] + coeff0_19*dmats2[19][18] + coeff0_20*dmats2[20][18] + coeff0_21*dmats2[21][18] + coeff0_22*dmats2[22][18] + coeff0_23*dmats2[23][18] + coeff0_24*dmats2[24][18] + coeff0_25*dmats2[25][18] + coeff0_26*dmats2[26][18] + coeff0_27*dmats2[27][18] + coeff0_28*dmats2[28][18] + coeff0_29*dmats2[29][18] + coeff0_30*dmats2[30][18] + coeff0_31*dmats2[31][18] + coeff0_32*dmats2[32][18] + coeff0_33*dmats2[33][18] + coeff0_34*dmats2[34][18];
          new_coeff0_19 = coeff0_0*dmats2[0][19] + coeff0_1*dmats2[1][19] + coeff0_2*dmats2[2][19] + coeff0_3*dmats2[3][19] + coeff0_4*dmats2[4][19] + coeff0_5*dmats2[5][19] + coeff0_6*dmats2[6][19] + coeff0_7*dmats2[7][19] + coeff0_8*dmats2[8][19] + coeff0_9*dmats2[9][19] + coeff0_10*dmats2[10][19] + coeff0_11*dmats2[11][19] + coeff0_12*dmats2[12][19] + coeff0_13*dmats2[13][19] + coeff0_14*dmats2[14][19] + coeff0_15*dmats2[15][19] + coeff0_16*dmats2[16][19] + coeff0_17*dmats2[17][19] + coeff0_18*dmats2[18][19] + coeff0_19*dmats2[19][19] + coeff0_20*dmats2[20][19] + coeff0_21*dmats2[21][19] + coeff0_22*dmats2[22][19] + coeff0_23*dmats2[23][19] + coeff0_24*dmats2[24][19] + coeff0_25*dmats2[25][19] + coeff0_26*dmats2[26][19] + coeff0_27*dmats2[27][19] + coeff0_28*dmats2[28][19] + coeff0_29*dmats2[29][19] + coeff0_30*dmats2[30][19] + coeff0_31*dmats2[31][19] + coeff0_32*dmats2[32][19] + coeff0_33*dmats2[33][19] + coeff0_34*dmats2[34][19];
          new_coeff0_20 = coeff0_0*dmats2[0][20] + coeff0_1*dmats2[1][20] + coeff0_2*dmats2[2][20] + coeff0_3*dmats2[3][20] + coeff0_4*dmats2[4][20] + coeff0_5*dmats2[5][20] + coeff0_6*dmats2[6][20] + coeff0_7*dmats2[7][20] + coeff0_8*dmats2[8][20] + coeff0_9*dmats2[9][20] + coeff0_10*dmats2[10][20] + coeff0_11*dmats2[11][20] + coeff0_12*dmats2[12][20] + coeff0_13*dmats2[13][20] + coeff0_14*dmats2[14][20] + coeff0_15*dmats2[15][20] + coeff0_16*dmats2[16][20] + coeff0_17*dmats2[17][20] + coeff0_18*dmats2[18][20] + coeff0_19*dmats2[19][20] + coeff0_20*dmats2[20][20] + coeff0_21*dmats2[21][20] + coeff0_22*dmats2[22][20] + coeff0_23*dmats2[23][20] + coeff0_24*dmats2[24][20] + coeff0_25*dmats2[25][20] + coeff0_26*dmats2[26][20] + coeff0_27*dmats2[27][20] + coeff0_28*dmats2[28][20] + coeff0_29*dmats2[29][20] + coeff0_30*dmats2[30][20] + coeff0_31*dmats2[31][20] + coeff0_32*dmats2[32][20] + coeff0_33*dmats2[33][20] + coeff0_34*dmats2[34][20];
          new_coeff0_21 = coeff0_0*dmats2[0][21] + coeff0_1*dmats2[1][21] + coeff0_2*dmats2[2][21] + coeff0_3*dmats2[3][21] + coeff0_4*dmats2[4][21] + coeff0_5*dmats2[5][21] + coeff0_6*dmats2[6][21] + coeff0_7*dmats2[7][21] + coeff0_8*dmats2[8][21] + coeff0_9*dmats2[9][21] + coeff0_10*dmats2[10][21] + coeff0_11*dmats2[11][21] + coeff0_12*dmats2[12][21] + coeff0_13*dmats2[13][21] + coeff0_14*dmats2[14][21] + coeff0_15*dmats2[15][21] + coeff0_16*dmats2[16][21] + coeff0_17*dmats2[17][21] + coeff0_18*dmats2[18][21] + coeff0_19*dmats2[19][21] + coeff0_20*dmats2[20][21] + coeff0_21*dmats2[21][21] + coeff0_22*dmats2[22][21] + coeff0_23*dmats2[23][21] + coeff0_24*dmats2[24][21] + coeff0_25*dmats2[25][21] + coeff0_26*dmats2[26][21] + coeff0_27*dmats2[27][21] + coeff0_28*dmats2[28][21] + coeff0_29*dmats2[29][21] + coeff0_30*dmats2[30][21] + coeff0_31*dmats2[31][21] + coeff0_32*dmats2[32][21] + coeff0_33*dmats2[33][21] + coeff0_34*dmats2[34][21];
          new_coeff0_22 = coeff0_0*dmats2[0][22] + coeff0_1*dmats2[1][22] + coeff0_2*dmats2[2][22] + coeff0_3*dmats2[3][22] + coeff0_4*dmats2[4][22] + coeff0_5*dmats2[5][22] + coeff0_6*dmats2[6][22] + coeff0_7*dmats2[7][22] + coeff0_8*dmats2[8][22] + coeff0_9*dmats2[9][22] + coeff0_10*dmats2[10][22] + coeff0_11*dmats2[11][22] + coeff0_12*dmats2[12][22] + coeff0_13*dmats2[13][22] + coeff0_14*dmats2[14][22] + coeff0_15*dmats2[15][22] + coeff0_16*dmats2[16][22] + coeff0_17*dmats2[17][22] + coeff0_18*dmats2[18][22] + coeff0_19*dmats2[19][22] + coeff0_20*dmats2[20][22] + coeff0_21*dmats2[21][22] + coeff0_22*dmats2[22][22] + coeff0_23*dmats2[23][22] + coeff0_24*dmats2[24][22] + coeff0_25*dmats2[25][22] + coeff0_26*dmats2[26][22] + coeff0_27*dmats2[27][22] + coeff0_28*dmats2[28][22] + coeff0_29*dmats2[29][22] + coeff0_30*dmats2[30][22] + coeff0_31*dmats2[31][22] + coeff0_32*dmats2[32][22] + coeff0_33*dmats2[33][22] + coeff0_34*dmats2[34][22];
          new_coeff0_23 = coeff0_0*dmats2[0][23] + coeff0_1*dmats2[1][23] + coeff0_2*dmats2[2][23] + coeff0_3*dmats2[3][23] + coeff0_4*dmats2[4][23] + coeff0_5*dmats2[5][23] + coeff0_6*dmats2[6][23] + coeff0_7*dmats2[7][23] + coeff0_8*dmats2[8][23] + coeff0_9*dmats2[9][23] + coeff0_10*dmats2[10][23] + coeff0_11*dmats2[11][23] + coeff0_12*dmats2[12][23] + coeff0_13*dmats2[13][23] + coeff0_14*dmats2[14][23] + coeff0_15*dmats2[15][23] + coeff0_16*dmats2[16][23] + coeff0_17*dmats2[17][23] + coeff0_18*dmats2[18][23] + coeff0_19*dmats2[19][23] + coeff0_20*dmats2[20][23] + coeff0_21*dmats2[21][23] + coeff0_22*dmats2[22][23] + coeff0_23*dmats2[23][23] + coeff0_24*dmats2[24][23] + coeff0_25*dmats2[25][23] + coeff0_26*dmats2[26][23] + coeff0_27*dmats2[27][23] + coeff0_28*dmats2[28][23] + coeff0_29*dmats2[29][23] + coeff0_30*dmats2[30][23] + coeff0_31*dmats2[31][23] + coeff0_32*dmats2[32][23] + coeff0_33*dmats2[33][23] + coeff0_34*dmats2[34][23];
          new_coeff0_24 = coeff0_0*dmats2[0][24] + coeff0_1*dmats2[1][24] + coeff0_2*dmats2[2][24] + coeff0_3*dmats2[3][24] + coeff0_4*dmats2[4][24] + coeff0_5*dmats2[5][24] + coeff0_6*dmats2[6][24] + coeff0_7*dmats2[7][24] + coeff0_8*dmats2[8][24] + coeff0_9*dmats2[9][24] + coeff0_10*dmats2[10][24] + coeff0_11*dmats2[11][24] + coeff0_12*dmats2[12][24] + coeff0_13*dmats2[13][24] + coeff0_14*dmats2[14][24] + coeff0_15*dmats2[15][24] + coeff0_16*dmats2[16][24] + coeff0_17*dmats2[17][24] + coeff0_18*dmats2[18][24] + coeff0_19*dmats2[19][24] + coeff0_20*dmats2[20][24] + coeff0_21*dmats2[21][24] + coeff0_22*dmats2[22][24] + coeff0_23*dmats2[23][24] + coeff0_24*dmats2[24][24] + coeff0_25*dmats2[25][24] + coeff0_26*dmats2[26][24] + coeff0_27*dmats2[27][24] + coeff0_28*dmats2[28][24] + coeff0_29*dmats2[29][24] + coeff0_30*dmats2[30][24] + coeff0_31*dmats2[31][24] + coeff0_32*dmats2[32][24] + coeff0_33*dmats2[33][24] + coeff0_34*dmats2[34][24];
          new_coeff0_25 = coeff0_0*dmats2[0][25] + coeff0_1*dmats2[1][25] + coeff0_2*dmats2[2][25] + coeff0_3*dmats2[3][25] + coeff0_4*dmats2[4][25] + coeff0_5*dmats2[5][25] + coeff0_6*dmats2[6][25] + coeff0_7*dmats2[7][25] + coeff0_8*dmats2[8][25] + coeff0_9*dmats2[9][25] + coeff0_10*dmats2[10][25] + coeff0_11*dmats2[11][25] + coeff0_12*dmats2[12][25] + coeff0_13*dmats2[13][25] + coeff0_14*dmats2[14][25] + coeff0_15*dmats2[15][25] + coeff0_16*dmats2[16][25] + coeff0_17*dmats2[17][25] + coeff0_18*dmats2[18][25] + coeff0_19*dmats2[19][25] + coeff0_20*dmats2[20][25] + coeff0_21*dmats2[21][25] + coeff0_22*dmats2[22][25] + coeff0_23*dmats2[23][25] + coeff0_24*dmats2[24][25] + coeff0_25*dmats2[25][25] + coeff0_26*dmats2[26][25] + coeff0_27*dmats2[27][25] + coeff0_28*dmats2[28][25] + coeff0_29*dmats2[29][25] + coeff0_30*dmats2[30][25] + coeff0_31*dmats2[31][25] + coeff0_32*dmats2[32][25] + coeff0_33*dmats2[33][25] + coeff0_34*dmats2[34][25];
          new_coeff0_26 = coeff0_0*dmats2[0][26] + coeff0_1*dmats2[1][26] + coeff0_2*dmats2[2][26] + coeff0_3*dmats2[3][26] + coeff0_4*dmats2[4][26] + coeff0_5*dmats2[5][26] + coeff0_6*dmats2[6][26] + coeff0_7*dmats2[7][26] + coeff0_8*dmats2[8][26] + coeff0_9*dmats2[9][26] + coeff0_10*dmats2[10][26] + coeff0_11*dmats2[11][26] + coeff0_12*dmats2[12][26] + coeff0_13*dmats2[13][26] + coeff0_14*dmats2[14][26] + coeff0_15*dmats2[15][26] + coeff0_16*dmats2[16][26] + coeff0_17*dmats2[17][26] + coeff0_18*dmats2[18][26] + coeff0_19*dmats2[19][26] + coeff0_20*dmats2[20][26] + coeff0_21*dmats2[21][26] + coeff0_22*dmats2[22][26] + coeff0_23*dmats2[23][26] + coeff0_24*dmats2[24][26] + coeff0_25*dmats2[25][26] + coeff0_26*dmats2[26][26] + coeff0_27*dmats2[27][26] + coeff0_28*dmats2[28][26] + coeff0_29*dmats2[29][26] + coeff0_30*dmats2[30][26] + coeff0_31*dmats2[31][26] + coeff0_32*dmats2[32][26] + coeff0_33*dmats2[33][26] + coeff0_34*dmats2[34][26];
          new_coeff0_27 = coeff0_0*dmats2[0][27] + coeff0_1*dmats2[1][27] + coeff0_2*dmats2[2][27] + coeff0_3*dmats2[3][27] + coeff0_4*dmats2[4][27] + coeff0_5*dmats2[5][27] + coeff0_6*dmats2[6][27] + coeff0_7*dmats2[7][27] + coeff0_8*dmats2[8][27] + coeff0_9*dmats2[9][27] + coeff0_10*dmats2[10][27] + coeff0_11*dmats2[11][27] + coeff0_12*dmats2[12][27] + coeff0_13*dmats2[13][27] + coeff0_14*dmats2[14][27] + coeff0_15*dmats2[15][27] + coeff0_16*dmats2[16][27] + coeff0_17*dmats2[17][27] + coeff0_18*dmats2[18][27] + coeff0_19*dmats2[19][27] + coeff0_20*dmats2[20][27] + coeff0_21*dmats2[21][27] + coeff0_22*dmats2[22][27] + coeff0_23*dmats2[23][27] + coeff0_24*dmats2[24][27] + coeff0_25*dmats2[25][27] + coeff0_26*dmats2[26][27] + coeff0_27*dmats2[27][27] + coeff0_28*dmats2[28][27] + coeff0_29*dmats2[29][27] + coeff0_30*dmats2[30][27] + coeff0_31*dmats2[31][27] + coeff0_32*dmats2[32][27] + coeff0_33*dmats2[33][27] + coeff0_34*dmats2[34][27];
          new_coeff0_28 = coeff0_0*dmats2[0][28] + coeff0_1*dmats2[1][28] + coeff0_2*dmats2[2][28] + coeff0_3*dmats2[3][28] + coeff0_4*dmats2[4][28] + coeff0_5*dmats2[5][28] + coeff0_6*dmats2[6][28] + coeff0_7*dmats2[7][28] + coeff0_8*dmats2[8][28] + coeff0_9*dmats2[9][28] + coeff0_10*dmats2[10][28] + coeff0_11*dmats2[11][28] + coeff0_12*dmats2[12][28] + coeff0_13*dmats2[13][28] + coeff0_14*dmats2[14][28] + coeff0_15*dmats2[15][28] + coeff0_16*dmats2[16][28] + coeff0_17*dmats2[17][28] + coeff0_18*dmats2[18][28] + coeff0_19*dmats2[19][28] + coeff0_20*dmats2[20][28] + coeff0_21*dmats2[21][28] + coeff0_22*dmats2[22][28] + coeff0_23*dmats2[23][28] + coeff0_24*dmats2[24][28] + coeff0_25*dmats2[25][28] + coeff0_26*dmats2[26][28] + coeff0_27*dmats2[27][28] + coeff0_28*dmats2[28][28] + coeff0_29*dmats2[29][28] + coeff0_30*dmats2[30][28] + coeff0_31*dmats2[31][28] + coeff0_32*dmats2[32][28] + coeff0_33*dmats2[33][28] + coeff0_34*dmats2[34][28];
          new_coeff0_29 = coeff0_0*dmats2[0][29] + coeff0_1*dmats2[1][29] + coeff0_2*dmats2[2][29] + coeff0_3*dmats2[3][29] + coeff0_4*dmats2[4][29] + coeff0_5*dmats2[5][29] + coeff0_6*dmats2[6][29] + coeff0_7*dmats2[7][29] + coeff0_8*dmats2[8][29] + coeff0_9*dmats2[9][29] + coeff0_10*dmats2[10][29] + coeff0_11*dmats2[11][29] + coeff0_12*dmats2[12][29] + coeff0_13*dmats2[13][29] + coeff0_14*dmats2[14][29] + coeff0_15*dmats2[15][29] + coeff0_16*dmats2[16][29] + coeff0_17*dmats2[17][29] + coeff0_18*dmats2[18][29] + coeff0_19*dmats2[19][29] + coeff0_20*dmats2[20][29] + coeff0_21*dmats2[21][29] + coeff0_22*dmats2[22][29] + coeff0_23*dmats2[23][29] + coeff0_24*dmats2[24][29] + coeff0_25*dmats2[25][29] + coeff0_26*dmats2[26][29] + coeff0_27*dmats2[27][29] + coeff0_28*dmats2[28][29] + coeff0_29*dmats2[29][29] + coeff0_30*dmats2[30][29] + coeff0_31*dmats2[31][29] + coeff0_32*dmats2[32][29] + coeff0_33*dmats2[33][29] + coeff0_34*dmats2[34][29];
          new_coeff0_30 = coeff0_0*dmats2[0][30] + coeff0_1*dmats2[1][30] + coeff0_2*dmats2[2][30] + coeff0_3*dmats2[3][30] + coeff0_4*dmats2[4][30] + coeff0_5*dmats2[5][30] + coeff0_6*dmats2[6][30] + coeff0_7*dmats2[7][30] + coeff0_8*dmats2[8][30] + coeff0_9*dmats2[9][30] + coeff0_10*dmats2[10][30] + coeff0_11*dmats2[11][30] + coeff0_12*dmats2[12][30] + coeff0_13*dmats2[13][30] + coeff0_14*dmats2[14][30] + coeff0_15*dmats2[15][30] + coeff0_16*dmats2[16][30] + coeff0_17*dmats2[17][30] + coeff0_18*dmats2[18][30] + coeff0_19*dmats2[19][30] + coeff0_20*dmats2[20][30] + coeff0_21*dmats2[21][30] + coeff0_22*dmats2[22][30] + coeff0_23*dmats2[23][30] + coeff0_24*dmats2[24][30] + coeff0_25*dmats2[25][30] + coeff0_26*dmats2[26][30] + coeff0_27*dmats2[27][30] + coeff0_28*dmats2[28][30] + coeff0_29*dmats2[29][30] + coeff0_30*dmats2[30][30] + coeff0_31*dmats2[31][30] + coeff0_32*dmats2[32][30] + coeff0_33*dmats2[33][30] + coeff0_34*dmats2[34][30];
          new_coeff0_31 = coeff0_0*dmats2[0][31] + coeff0_1*dmats2[1][31] + coeff0_2*dmats2[2][31] + coeff0_3*dmats2[3][31] + coeff0_4*dmats2[4][31] + coeff0_5*dmats2[5][31] + coeff0_6*dmats2[6][31] + coeff0_7*dmats2[7][31] + coeff0_8*dmats2[8][31] + coeff0_9*dmats2[9][31] + coeff0_10*dmats2[10][31] + coeff0_11*dmats2[11][31] + coeff0_12*dmats2[12][31] + coeff0_13*dmats2[13][31] + coeff0_14*dmats2[14][31] + coeff0_15*dmats2[15][31] + coeff0_16*dmats2[16][31] + coeff0_17*dmats2[17][31] + coeff0_18*dmats2[18][31] + coeff0_19*dmats2[19][31] + coeff0_20*dmats2[20][31] + coeff0_21*dmats2[21][31] + coeff0_22*dmats2[22][31] + coeff0_23*dmats2[23][31] + coeff0_24*dmats2[24][31] + coeff0_25*dmats2[25][31] + coeff0_26*dmats2[26][31] + coeff0_27*dmats2[27][31] + coeff0_28*dmats2[28][31] + coeff0_29*dmats2[29][31] + coeff0_30*dmats2[30][31] + coeff0_31*dmats2[31][31] + coeff0_32*dmats2[32][31] + coeff0_33*dmats2[33][31] + coeff0_34*dmats2[34][31];
          new_coeff0_32 = coeff0_0*dmats2[0][32] + coeff0_1*dmats2[1][32] + coeff0_2*dmats2[2][32] + coeff0_3*dmats2[3][32] + coeff0_4*dmats2[4][32] + coeff0_5*dmats2[5][32] + coeff0_6*dmats2[6][32] + coeff0_7*dmats2[7][32] + coeff0_8*dmats2[8][32] + coeff0_9*dmats2[9][32] + coeff0_10*dmats2[10][32] + coeff0_11*dmats2[11][32] + coeff0_12*dmats2[12][32] + coeff0_13*dmats2[13][32] + coeff0_14*dmats2[14][32] + coeff0_15*dmats2[15][32] + coeff0_16*dmats2[16][32] + coeff0_17*dmats2[17][32] + coeff0_18*dmats2[18][32] + coeff0_19*dmats2[19][32] + coeff0_20*dmats2[20][32] + coeff0_21*dmats2[21][32] + coeff0_22*dmats2[22][32] + coeff0_23*dmats2[23][32] + coeff0_24*dmats2[24][32] + coeff0_25*dmats2[25][32] + coeff0_26*dmats2[26][32] + coeff0_27*dmats2[27][32] + coeff0_28*dmats2[28][32] + coeff0_29*dmats2[29][32] + coeff0_30*dmats2[30][32] + coeff0_31*dmats2[31][32] + coeff0_32*dmats2[32][32] + coeff0_33*dmats2[33][32] + coeff0_34*dmats2[34][32];
          new_coeff0_33 = coeff0_0*dmats2[0][33] + coeff0_1*dmats2[1][33] + coeff0_2*dmats2[2][33] + coeff0_3*dmats2[3][33] + coeff0_4*dmats2[4][33] + coeff0_5*dmats2[5][33] + coeff0_6*dmats2[6][33] + coeff0_7*dmats2[7][33] + coeff0_8*dmats2[8][33] + coeff0_9*dmats2[9][33] + coeff0_10*dmats2[10][33] + coeff0_11*dmats2[11][33] + coeff0_12*dmats2[12][33] + coeff0_13*dmats2[13][33] + coeff0_14*dmats2[14][33] + coeff0_15*dmats2[15][33] + coeff0_16*dmats2[16][33] + coeff0_17*dmats2[17][33] + coeff0_18*dmats2[18][33] + coeff0_19*dmats2[19][33] + coeff0_20*dmats2[20][33] + coeff0_21*dmats2[21][33] + coeff0_22*dmats2[22][33] + coeff0_23*dmats2[23][33] + coeff0_24*dmats2[24][33] + coeff0_25*dmats2[25][33] + coeff0_26*dmats2[26][33] + coeff0_27*dmats2[27][33] + coeff0_28*dmats2[28][33] + coeff0_29*dmats2[29][33] + coeff0_30*dmats2[30][33] + coeff0_31*dmats2[31][33] + coeff0_32*dmats2[32][33] + coeff0_33*dmats2[33][33] + coeff0_34*dmats2[34][33];
          new_coeff0_34 = coeff0_0*dmats2[0][34] + coeff0_1*dmats2[1][34] + coeff0_2*dmats2[2][34] + coeff0_3*dmats2[3][34] + coeff0_4*dmats2[4][34] + coeff0_5*dmats2[5][34] + coeff0_6*dmats2[6][34] + coeff0_7*dmats2[7][34] + coeff0_8*dmats2[8][34] + coeff0_9*dmats2[9][34] + coeff0_10*dmats2[10][34] + coeff0_11*dmats2[11][34] + coeff0_12*dmats2[12][34] + coeff0_13*dmats2[13][34] + coeff0_14*dmats2[14][34] + coeff0_15*dmats2[15][34] + coeff0_16*dmats2[16][34] + coeff0_17*dmats2[17][34] + coeff0_18*dmats2[18][34] + coeff0_19*dmats2[19][34] + coeff0_20*dmats2[20][34] + coeff0_21*dmats2[21][34] + coeff0_22*dmats2[22][34] + coeff0_23*dmats2[23][34] + coeff0_24*dmats2[24][34] + coeff0_25*dmats2[25][34] + coeff0_26*dmats2[26][34] + coeff0_27*dmats2[27][34] + coeff0_28*dmats2[28][34] + coeff0_29*dmats2[29][34] + coeff0_30*dmats2[30][34] + coeff0_31*dmats2[31][34] + coeff0_32*dmats2[32][34] + coeff0_33*dmats2[33][34] + coeff0_34*dmats2[34][34];
        }
    
      }
      // Compute derivatives on reference element as dot product of coefficients and basisvalues
      derivatives[deriv_num] = new_coeff0_0*basisvalue0 + new_coeff0_1*basisvalue1 + new_coeff0_2*basisvalue2 + new_coeff0_3*basisvalue3 + new_coeff0_4*basisvalue4 + new_coeff0_5*basisvalue5 + new_coeff0_6*basisvalue6 + new_coeff0_7*basisvalue7 + new_coeff0_8*basisvalue8 + new_coeff0_9*basisvalue9 + new_coeff0_10*basisvalue10 + new_coeff0_11*basisvalue11 + new_coeff0_12*basisvalue12 + new_coeff0_13*basisvalue13 + new_coeff0_14*basisvalue14 + new_coeff0_15*basisvalue15 + new_coeff0_16*basisvalue16 + new_coeff0_17*basisvalue17 + new_coeff0_18*basisvalue18 + new_coeff0_19*basisvalue19 + new_coeff0_20*basisvalue20 + new_coeff0_21*basisvalue21 + new_coeff0_22*basisvalue22 + new_coeff0_23*basisvalue23 + new_coeff0_24*basisvalue24 + new_coeff0_25*basisvalue25 + new_coeff0_26*basisvalue26 + new_coeff0_27*basisvalue27 + new_coeff0_28*basisvalue28 + new_coeff0_29*basisvalue29 + new_coeff0_30*basisvalue30 + new_coeff0_31*basisvalue31 + new_coeff0_32*basisvalue32 + new_coeff0_33*basisvalue33 + new_coeff0_34*basisvalue34;
    }
    
    // Transform derivatives back to physical element
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        values[row] += transform[row][col]*derivatives[col];
      }
    }
    // Delete pointer to array of derivatives on FIAT element
    delete [] derivatives;
    
    // Delete pointer to array of combinations of derivatives and transform
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      delete [] combinations[row];
      delete [] transform[row];
    }
    
    delete [] combinations;
    delete [] transform;
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis_derivatives() is not yet implemented.");
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // The reference points, direction and weights:
    const static double X[35][1][3] = {{{0, 0, 0}}, {{1, 0, 0}}, {{0, 1, 0}}, {{0, 0, 1}}, {{0, 0.75, 0.25}}, {{0, 0.5, 0.5}}, {{0, 0.25, 0.75}}, {{0.75, 0, 0.25}}, {{0.5, 0, 0.5}}, {{0.25, 0, 0.75}}, {{0.75, 0.25, 0}}, {{0.5, 0.5, 0}}, {{0.25, 0.75, 0}}, {{0, 0, 0.25}}, {{0, 0, 0.5}}, {{0, 0, 0.75}}, {{0, 0.25, 0}}, {{0, 0.5, 0}}, {{0, 0.75, 0}}, {{0.25, 0, 0}}, {{0.5, 0, 0}}, {{0.75, 0, 0}}, {{0.5, 0.25, 0.25}}, {{0.25, 0.5, 0.25}}, {{0.25, 0.25, 0.5}}, {{0, 0.25, 0.25}}, {{0, 0.5, 0.25}}, {{0, 0.25, 0.5}}, {{0.25, 0, 0.25}}, {{0.5, 0, 0.25}}, {{0.25, 0, 0.5}}, {{0.25, 0.25, 0}}, {{0.5, 0.25, 0}}, {{0.25, 0.5, 0}}, {{0.25, 0.25, 0.25}}};
    const static double W[35][1] = {{1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}};
    const static double D[35][1][1] = {{{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}};
    
    const double * const * x = c.coordinates;
    double result = 0.0;
    // Iterate over the points:
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0][0] - X[i][0][1] - X[i][0][2];
    const double w1 = X[i][0][0];
    const double w2 = X[i][0][1];
    const double w3 = X[i][0][2];
    
    // Compute affine mapping y = F(X)
    double y[3];
    y[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0] + w3*x[3][0];
    y[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1] + w3*x[3][1];
    y[2] = w0*x[0][2] + w1*x[1][2] + w2*x[2][2] + w3*x[3][2];
    
    // Evaluate function at physical points
    double values[1];
    f.evaluate(values, y, c);
    
    // Map function values using appropriate mapping
    // Affine map: Do nothing
    
    // Note that we do not map the weights (yet).
    
    // Take directional components
    for(int k = 0; k < 1; k++)
      result += values[k]*D[i][0][k];
    // Multiply by weights 
    result *= W[i][0];
    
    return result;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate at vertices and use affine mapping
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new UFC_Poisson3D_4LinearForm_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class UFC_Poisson3D_4LinearForm_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  UFC_Poisson3D_4LinearForm_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson3D_4LinearForm_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', 'tetrahedron', 4)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 35;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_02 = element_coordinates[3][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
    const double J_12 = element_coordinates[3][1] - element_coordinates[0][1];
    const double J_20 = element_coordinates[1][2] - element_coordinates[0][2];
    const double J_21 = element_coordinates[2][2] - element_coordinates[0][2];
    const double J_22 = element_coordinates[3][2] - element_coordinates[0][2];
      
    // Compute sub determinants
    const double d00 = J_11*J_22 - J_12*J_21;
    const double d01 = J_12*J_20 - J_10*J_22;
    const double d02 = J_10*J_21 - J_11*J_20;
    
    const double d10 = J_02*J_21 - J_01*J_22;
    const double d11 = J_00*J_22 - J_02*J_20;
    const double d12 = J_01*J_20 - J_00*J_21;
    
    const double d20 = J_01*J_12 - J_02*J_11;
    const double d21 = J_02*J_10 - J_00*J_12;
    const double d22 = J_00*J_11 - J_01*J_10;
      
    // Compute determinant of Jacobian
    double detJ = J_00*d00 + J_10*d10 + J_20*d20;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = d00*(element_coordinates[0][0] - element_coordinates[2][0] - element_coordinates[3][0]) \
                    + d10*(element_coordinates[0][1] - element_coordinates[2][1] - element_coordinates[3][1]) \
                    + d20*(element_coordinates[0][2] - element_coordinates[2][2] - element_coordinates[3][2]);
    
    const double C1 = d01*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[3][0]) \
                    + d11*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[3][1]) \
                    + d21*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[3][2]);
    
    const double C2 = d02*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[2][0]) \
                    + d12*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[2][1]) \
                    + d22*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[2][2]);
    
    // Get coordinates and map to the UFC reference element
    double x = (C0 + d00*coordinates[0] + d10*coordinates[1] + d20*coordinates[2]) / detJ;
    double y = (C1 + d01*coordinates[0] + d11*coordinates[1] + d21*coordinates[2]) / detJ;
    double z = (C2 + d02*coordinates[0] + d12*coordinates[1] + d22*coordinates[2]) / detJ;
    
    // Map coordinates to the reference cube
    if (std::abs(y + z - 1.0) < 1e-14)
      x = 1.0;
    else
      x = -2.0 * x/(y + z - 1.0) - 1.0;
    if (std::abs(z - 1.0) < 1e-14)
      y = -1.0;
    else
      y = 2.0 * y/(1.0 - z) - 1.0;
    z = 2.0 * z - 1.0;
    
    // Reset values
    *values = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    const double scalings_y_4 = scalings_y_3*(0.5 - 0.5*y);
    const double scalings_z_0 = 1;
    const double scalings_z_1 = scalings_z_0*(0.5 - 0.5*z);
    const double scalings_z_2 = scalings_z_1*(0.5 - 0.5*z);
    const double scalings_z_3 = scalings_z_2*(0.5 - 0.5*z);
    const double scalings_z_4 = scalings_z_3*(0.5 - 0.5*z);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    const double psitilde_a_4 = 1.75*x*psitilde_a_3 - 0.75*psitilde_a_2;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_0_4 = 0.0285714285714286*psitilde_bs_0_3 + 1.8*y*psitilde_bs_0_3 - 0.771428571428571*psitilde_bs_0_2;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_1_3 = 0.285714285714286*psitilde_bs_1_2 + 2*y*psitilde_bs_1_2 - 0.714285714285714*psitilde_bs_1_1;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_2_2 = 1.02040816326531*psitilde_bs_2_1 + 2.57142857142857*y*psitilde_bs_2_1 - 0.551020408163265*psitilde_bs_2_0;
    const double psitilde_bs_3_0 = 1;
    const double psitilde_bs_3_1 = 4.5*y + 3.5;
    const double psitilde_bs_4_0 = 1;
    
    // Compute psitilde_cs
    const double psitilde_cs_00_0 = 1;
    const double psitilde_cs_00_1 = 2*z + 1;
    const double psitilde_cs_00_2 = 0.3125*psitilde_cs_00_1 + 1.875*z*psitilde_cs_00_1 - 0.5625*psitilde_cs_00_0;
    const double psitilde_cs_00_3 = 0.155555555555556*psitilde_cs_00_2 + 1.86666666666667*z*psitilde_cs_00_2 - 0.711111111111111*psitilde_cs_00_1;
    const double psitilde_cs_00_4 = 0.09375*psitilde_cs_00_3 + 1.875*z*psitilde_cs_00_3 - 0.78125*psitilde_cs_00_2;
    const double psitilde_cs_01_0 = 1;
    const double psitilde_cs_01_1 = 3*z + 2;
    const double psitilde_cs_01_2 = 0.777777777777778*psitilde_cs_01_1 + 2.33333333333333*z*psitilde_cs_01_1 - 0.555555555555556*psitilde_cs_01_0;
    const double psitilde_cs_01_3 = 0.428571428571429*psitilde_cs_01_2 + 2.14285714285714*z*psitilde_cs_01_2 - 0.714285714285714*psitilde_cs_01_1;
    const double psitilde_cs_02_0 = 1;
    const double psitilde_cs_02_1 = 4*z + 3;
    const double psitilde_cs_02_2 = 1.265625*psitilde_cs_02_1 + 2.8125*z*psitilde_cs_02_1 - 0.546875*psitilde_cs_02_0;
    const double psitilde_cs_03_0 = 1;
    const double psitilde_cs_03_1 = 5*z + 4;
    const double psitilde_cs_04_0 = 1;
    const double psitilde_cs_10_0 = 1;
    const double psitilde_cs_10_1 = 3*z + 2;
    const double psitilde_cs_10_2 = 0.777777777777778*psitilde_cs_10_1 + 2.33333333333333*z*psitilde_cs_10_1 - 0.555555555555556*psitilde_cs_10_0;
    const double psitilde_cs_10_3 = 0.428571428571429*psitilde_cs_10_2 + 2.14285714285714*z*psitilde_cs_10_2 - 0.714285714285714*psitilde_cs_10_1;
    const double psitilde_cs_11_0 = 1;
    const double psitilde_cs_11_1 = 4*z + 3;
    const double psitilde_cs_11_2 = 1.265625*psitilde_cs_11_1 + 2.8125*z*psitilde_cs_11_1 - 0.546875*psitilde_cs_11_0;
    const double psitilde_cs_12_0 = 1;
    const double psitilde_cs_12_1 = 5*z + 4;
    const double psitilde_cs_13_0 = 1;
    const double psitilde_cs_20_0 = 1;
    const double psitilde_cs_20_1 = 4*z + 3;
    const double psitilde_cs_20_2 = 1.265625*psitilde_cs_20_1 + 2.8125*z*psitilde_cs_20_1 - 0.546875*psitilde_cs_20_0;
    const double psitilde_cs_21_0 = 1;
    const double psitilde_cs_21_1 = 5*z + 4;
    const double psitilde_cs_22_0 = 1;
    const double psitilde_cs_30_0 = 1;
    const double psitilde_cs_30_1 = 5*z + 4;
    const double psitilde_cs_31_0 = 1;
    const double psitilde_cs_40_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.866025403784439*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_0;
    const double basisvalue1 = 2.73861278752583*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_0;
    const double basisvalue2 = 1.58113883008419*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_0;
    const double basisvalue3 = 1.11803398874989*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_1;
    const double basisvalue4 = 5.1234753829798*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_0;
    const double basisvalue5 = 3.96862696659689*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_0;
    const double basisvalue6 = 2.29128784747792*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_0;
    const double basisvalue7 = 3.24037034920393*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_1;
    const double basisvalue8 = 1.87082869338697*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_1;
    const double basisvalue9 = 1.3228756555323*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_2;
    const double basisvalue10 = 7.93725393319377*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_0;
    const double basisvalue11 = 6.70820393249937*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_0;
    const double basisvalue12 = 5.19615242270663*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_0;
    const double basisvalue13 = 3*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_0;
    const double basisvalue14 = 5.80947501931113*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_1;
    const double basisvalue15 = 4.5*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_1;
    const double basisvalue16 = 2.59807621135332*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_1;
    const double basisvalue17 = 3.67423461417477*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_2;
    const double basisvalue18 = 2.12132034355964*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_2;
    const double basisvalue19 = 1.5*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_3;
    const double basisvalue20 = 11.1242977306435*psitilde_a_4*scalings_y_4*psitilde_bs_4_0*scalings_z_4*psitilde_cs_40_0;
    const double basisvalue21 = 9.81070843517429*psitilde_a_3*scalings_y_3*psitilde_bs_3_1*scalings_z_4*psitilde_cs_31_0;
    const double basisvalue22 = 8.2915619758885*psitilde_a_2*scalings_y_2*psitilde_bs_2_2*scalings_z_4*psitilde_cs_22_0;
    const double basisvalue23 = 6.42261628933256*psitilde_a_1*scalings_y_1*psitilde_bs_1_3*scalings_z_4*psitilde_cs_13_0;
    const double basisvalue24 = 3.70809924354783*psitilde_a_0*scalings_y_0*psitilde_bs_0_4*scalings_z_4*psitilde_cs_04_0;
    const double basisvalue25 = 8.77496438739212*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_1;
    const double basisvalue26 = 7.41619848709566*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_1;
    const double basisvalue27 = 5.74456264653803*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_1;
    const double basisvalue28 = 3.3166247903554*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_1;
    const double basisvalue29 = 6.42261628933256*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_2;
    const double basisvalue30 = 4.9749371855331*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_2;
    const double basisvalue31 = 2.87228132326901*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_2;
    const double basisvalue32 = 4.06201920231798*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_3;
    const double basisvalue33 = 2.34520787991171*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_3;
    const double basisvalue34 = 1.6583123951777*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_4;
    
    // Table(s) of coefficients
    const static double coefficients0[35][35] = \
    {{-0.0137464349807053, -0.014490014748814, -0.00836581391578937, -0.00591552374999943, 0, 0, 0, 0, 0, 0, -0.00671936840905292, -0.00567890279999946, -0.00439885919382571, -0.00253968253968253, -0.00491807409042212, -0.00380952380952381, -0.00219942959691287, -0.00311046316543895, -0.0017958267458706, -0.00126984126984128, 0.0136980289516341, 0.0120805260192622, 0.010209907964538, 0.00790856070259325, 0.00456600965054471, 0.0108051509532101, 0.00913201930108942, 0.0070736317340728, 0.00408396318581522, 0.00790856070259325, 0.00612594477872282, 0.0035368158670364, 0.00500181296677923, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807054, 0.0144900147488139, -0.00836581391578936, -0.00591552374999944, 0, 0, 0, 0, 0, 0, 0.00671936840905292, -0.00567890279999947, 0.00439885919382572, -0.00253968253968254, -0.00491807409042212, 0.00380952380952381, -0.00219942959691286, 0.00311046316543896, -0.0017958267458706, -0.00126984126984127, 0.0136980289516341, -0.0120805260192622, 0.010209907964538, -0.00790856070259325, 0.00456600965054471, -0.0108051509532101, 0.00913201930108942, -0.0070736317340728, 0.00408396318581521, 0.00790856070259325, -0.00612594477872282, 0.0035368158670364, -0.00500181296677923, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807054, 0, 0.0167316278315787, -0.00591552374999945, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0101587301587302, 0, 0, -0.00659828879073858, 0, 0.0035916534917412, -0.00126984126984127, 0, 0, 0, 0, 0.0228300482527235, 0, 0, 0, -0.0163358527432608, 0, 0, 0.0106104476011092, 0, -0.00577559612561231, 0.00204198159290761},
    {-0.0137464349807054, 0, 0, 0.0177465712499983, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0126984126984127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0306297238936141},
    {0.0439885919382572, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0, 0.0406349206349206, 0, 0, 0.00439885919382573, 0, -0.0143666139669648, 0.00761904761904762, 0, 0, 0, 0, 0, 0, 0, 0, 0.0367556686723369, 0, 0, -0.0424417904044368, 0, 0.0303218796594646, -0.0122518895574456},
    {-0.0329914439536929, 0, -0.0200779533978945, -0.0141972569999987, 0, 0, -0.00969857289937746, 0, 0.0712696645099798, -0.050395263067897, 0, 0, 0, 0, 0, 0, 0.0461880215351701, 0, 0.0107749604752236, -0.019047619047619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0495154221385096, 0, -0.0606437593189292, 0.0306297238936141},
    {0.0439885919382573, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0, 0.0359165349174119, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0505364660991077, -0.0408396318581521},
    {0.0439885919382571, 0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0.0433733365754904, -0.0335968420452646, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, -0.0227156111999978, 0.0175954367753029, -0.0101587301587302, 0.00327871606028142, -0.00253968253968253, 0.00146628639794192, -0.0124418526617558, 0.00718330698348241, 0.00761904761904763, 0, 0, 0, 0, 0, 0.0243115896447228, -0.0205470434274512, 0.0159156714016638, -0.00918891716808422, -0.031634242810373, 0.0245037791148913, -0.0141472634681456, 0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, -0.0173880176985767, 0.0100389766989472, -0.0141972569999987, -0.00722888942924838, 0.00559947367421077, -0.00323285763312583, 0.0617213399848368, -0.0356348322549899, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, -0.0266666666666667, 0.01539600717839, 0.00933138949631688, -0.00538748023761179, -0.019047619047619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, -0.0285877423007065, 0.0165051407128366, -0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382572, 0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0.0311046316543896, -0.017958267458706, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, -0.0335968420452646, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, 0, -0.0117302911835352, 0.0101587301587302, -0.0229510124219699, 0.00761904761904762, -0.0014662863979419, 0.0165891368823411, -0.00718330698348239, -0.00761904761904762, 0, 0.0241610520385245, -0.0357346778758831, 0.0355885231616696, -0.0228300482527235, -0.00270128773830253, -0.0114150241263618, 0.0159156714016638, -0.0112308987609918, 0.00395428035129663, 0.00306297238936141, -0.0035368158670364, -0.00375135972508442, 0.00072194951570154, 0.00204198159290761},
    {-0.0329914439536929, -0.0173880176985767, -0.0100389766989473, 0.0141972569999987, -0.00722888942924838, 0.0615942104163185, -0.0614242950293905, -0.00685792666498186, -0.00395942580611002, 0.00559947367421077, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.0049180740904221, -0.0266666666666667, 0.0175954367753029, 0.00933138949631686, 0.00538748023761182, -0.00761904761904761, 0, 0, 0.0357346778758831, -0.0593142052694494, 0.0456600965054471, 0, -0.0091320193010894, 0, 0.00408396318581524, 0.0013180934504322, 0.00714693557517662, -0.00471575448938186, -0.00250090648338961, -0.00144389903140308, 0.0020419815929076},
    {0.0439885919382573, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484215, 0, 0, 0.0293257279588381, 0.0101587301587301, 0, -0.0101587301587302, -0.0219942959691286, 0.00207364211029264, 0.017958267458706, -0.00761904761904762, 0, 0, 0, 0.0395428035129662, -0.0456600965054471, 0, 0, -0.017684079335182, 0.0142938711503532, 0, 0.00612594477872282, 0, -0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.0439885919382572, -0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0.0433733365754904, 0.0335968420452647, 0.0193971457987549, 0.0274317066599275, 0.01583770322444, 0.0111989473484215, -0.0268774736362117, -0.0227156111999979, -0.0175954367753029, -0.0101587301587302, 0.00327871606028141, 0.00253968253968254, 0.00146628639794191, 0.0124418526617558, 0.00718330698348239, 0.00761904761904762, 0, 0, 0, 0, 0, -0.0243115896447228, -0.0205470434274512, -0.0159156714016638, -0.00918891716808422, -0.031634242810373, -0.0245037791148913, -0.0141472634681456, -0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.032991443953693, 0.0173880176985767, 0.0100389766989472, -0.0141972569999986, -0.0072288894292484, -0.00559947367421079, -0.00323285763312582, -0.0617213399848368, -0.0356348322549899, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, 0.0266666666666667, 0.01539600717839, -0.00933138949631686, -0.00538748023761177, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, 0.0285877423007065, 0.0165051407128365, 0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382572, -0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, -0.0311046316543895, -0.017958267458706, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484215, -0.0268774736362117, 0, 0.0117302911835353, 0.0101587301587301, -0.0229510124219699, -0.00761904761904762, -0.0014662863979419, -0.0165891368823411, -0.0071833069834824, -0.00761904761904762, 0, -0.0241610520385245, -0.0357346778758831, -0.0355885231616696, -0.0228300482527235, 0.00270128773830253, -0.0114150241263618, -0.0159156714016638, -0.0112308987609918, 0.00395428035129663, -0.00306297238936141, -0.0035368158670364, 0.00375135972508443, 0.000721949515701543, 0.00204198159290761},
    {-0.0329914439536929, 0.0173880176985767, -0.0100389766989473, 0.0141972569999986, -0.00722888942924838, -0.0615942104163185, -0.0614242950293904, 0.00685792666498186, -0.00395942580611, 0.00559947367421079, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042211, 0.0266666666666667, 0.0175954367753029, -0.00933138949631687, 0.0053874802376118, -0.00761904761904762, 0, 0, 0.0357346778758831, 0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108941, 0, 0.00408396318581522, 0.0013180934504322, -0.00714693557517662, -0.00471575448938187, 0.00250090648338962, -0.00144389903140308, 0.00204198159290761},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484215, 0, 0, -0.0293257279588381, 0.0101587301587301, 0, 0.0101587301587302, -0.0219942959691286, -0.00207364211029263, 0.017958267458706, -0.00761904761904762, 0, 0, 0, -0.0395428035129662, -0.0456600965054471, 0, 0, 0.017684079335182, 0.0142938711503532, 0, -0.00612594477872281, 0, 0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.0439885919382572, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484215, 0.0134387368181059, -0.0113578055999989, -0.0205280095711867, -0.0152380952380952, -0.00983614818084423, -0.0177777777777778, -0.0131965775814772, -0.0145154947720485, -0.0107749604752236, -0.0076190476190476, -0.0547921158065365, -0.0241610520385245, -0.00510495398226901, 0.00395428035129662, 0.00456600965054471, -0.0216103019064202, -0.00456600965054471, 0.0035368158670364, 0.00408396318581521, -0.00395428035129662, 0.00306297238936141, 0.0035368158670364, 0.00250090648338962, 0.00288779806280615, 0.0020419815929076},
    {-0.0329914439536929, 0, 0.0200779533978945, 0.0141972569999987, -0.0867466731509807, 0, 0.00969857289937746, 0, 0.00791885161221999, 0.00559947367421079, 0, 0.0340734167999968, 0, -0.0152380952380953, 0.0295084445425327, 0, -0.0131965775814772, 0, -0.0107749604752236, -0.00761904761904764, 0.0821881737098047, 0, -0.010209907964538, 0, 0.0045660096505447, 0, -0.00913201930108942, 0, 0.0040839631858152, -0.00790856070259325, 0, 0.00353681586703639, 0, 0.00288779806280615, 0.00204198159290761},
    {0.0439885919382572, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754903, -0.0335968420452646, 0.0193971457987549, -0.0274317066599274, 0.01583770322444, 0.0111989473484215, -0.0134387368181059, -0.0113578055999989, 0.0205280095711867, -0.0152380952380952, -0.00983614818084423, 0.0177777777777778, -0.0131965775814772, 0.0145154947720485, -0.0107749604752236, -0.00761904761904761, -0.0547921158065365, 0.0241610520385245, -0.00510495398226901, -0.00395428035129662, 0.00456600965054471, 0.0216103019064202, -0.00456600965054471, -0.0035368158670364, 0.00408396318581521, -0.00395428035129662, -0.00306297238936141, 0.00353681586703641, -0.00250090648338962, 0.00288779806280615, 0.0020419815929076},
    {0.0439885919382569, 0.139104141588614, -0.0803118135915779, -0.0567890279999946, 0.0578311154339871, 0.0335968420452646, -0.0420271492306355, 0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, -0.0586514559176762, 0.0406349206349206, 0.0393445927233769, 0.00253968253968254, -0.0109971479845643, -0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, -0.053052238005546, 0.0367556686723369, -0.0105447476034577, -0.0245037791148913, 0.0235787724469093, 0.0175063453837273, 0, -0.0122518895574456},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0, 0.0783926314389509, 0.00969857289937743, -0.0274317066599274, 0.0475131096733199, -0.0167984210226323, 0, 0, 0.0586514559176763, -0.060952380952381, 0, 0.033015873015873, 0.0241937255660415, -0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, 0.053052238005546, -0.0551335030085054, 0, -0.0326717054865217, 0.0141472634681456, 0.00875317269186366, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0, -0.0111989473484216, 0.00969857289937743, 0.0822951199797824, 0.0475131096733199, -0.0167984210226323, 0, 0, 0, 0, 0, 0.0533333333333333, -0.0461880215351701, 0.0435464843161454, 0.0251415744421884, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.057175484601413, -0.0495154221385096, -0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382572, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, 0.0578311154339871, -0.0335968420452646, -0.0420271492306356, -0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, 0.0586514559176763, 0.0406349206349206, 0.0393445927233769, -0.00253968253968253, -0.0109971479845643, 0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, 0.053052238005546, 0.0367556686723369, -0.0105447476034577, 0.0245037791148913, 0.0235787724469093, -0.0175063453837273, 0, -0.0122518895574456},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0, -0.0783926314389508, 0.00969857289937744, 0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, -0.0586514559176763, -0.060952380952381, 0, -0.033015873015873, 0.0241937255660415, 0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, -0.053052238005546, -0.0551335030085054, 0, 0.0326717054865217, 0.0141472634681456, -0.00875317269186367, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382573, 0, 0, 0.170367083999984, 0, 0.0111989473484216, 0.00969857289937742, -0.0822951199797824, 0.0475131096733199, -0.0167984210226324, 0, 0, 0, 0, 0, -0.0533333333333333, -0.0461880215351701, -0.0435464843161454, 0.0251415744421884, -0.0825396825396825, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.057175484601413, -0.0495154221385096, 0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382572, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754904, 0.0447957893936862, 0.0484928644968872, -0.0548634133198549, 0, -0.0167984210226323, 0.0806324209086351, 0.0227156111999978, -0.00586514559176761, -0.0101587301587302, -0.00327871606028142, 0.0304761904761905, 0.0271262983619253, 0.045620126426438, 0.0430998419008943, 0.0393650793650793, 0, 0, 0, 0, 0, 0.0729347689341683, 0.0205470434274512, -0.0053052238005546, -0.00918891716808421, 0.031634242810373, -0.00816792637163041, -0.0141472634681456, -0.00875317269186367, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754904, -0.0447957893936862, 0.0484928644968872, 0.0548634133198549, 0, -0.0167984210226323, -0.0806324209086352, 0.0227156111999978, 0.0058651455917676, -0.0101587301587302, -0.00327871606028142, -0.0304761904761905, 0.0271262983619253, -0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, -0.0729347689341683, 0.0205470434274512, 0.00530522380055459, -0.00918891716808422, 0.031634242810373, 0.00816792637163041, -0.0141472634681456, 0.00875317269186366, -0.0151609398297323, -0.0122518895574456},
    {0.043988591938257, 0, 0, 0.170367083999984, 0.0144577788584968, 0, -0.00323285763312582, 0, -0.0950262193466398, -0.0167984210226323, 0, 0, 0, 0, -0.0688530372659096, 0, 0.01539600717839, 0, -0.0502831488843767, -0.0825396825396825, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0738132332242037, 0, 0.0165051407128365, 0, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382574, -0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754904, -0.0447957893936862, -0.00969857289937744, 0.0548634133198549, 0.0316754064488799, 0.0391963157194754, 0.0806324209086352, 0, 0.0527863103259087, 0.060952380952381, 0.0229510124219699, 0.0101587301587302, 0.0168622935763319, -0.0124418526617558, -0.00718330698348237, -0.013968253968254, 0, 0.0724831561155734, 0.0357346778758831, -0.0118628410538899, -0.0228300482527235, -0.00810386321490759, 0.0114150241263618, -0.0053052238005546, -0.0112308987609918, -0.00395428035129662, -0.0010209907964538, -0.0035368158670364, 0.00125045324169481, 0.000721949515701528, 0.0020419815929076},
    {0.0439885919382571, 0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754903, 0.0447957893936862, -0.00969857289937744, -0.0548634133198549, 0.0316754064488799, 0.0391963157194754, -0.0806324209086351, 0, -0.0527863103259086, 0.060952380952381, 0.0229510124219699, -0.0101587301587302, 0.0168622935763319, 0.0124418526617558, -0.00718330698348238, -0.013968253968254, 0, -0.0724831561155734, 0.0357346778758831, 0.0118628410538899, -0.0228300482527235, 0.00810386321490758, 0.0114150241263618, 0.0053052238005546, -0.0112308987609918, -0.00395428035129663, 0.0010209907964538, -0.0035368158670364, -0.00125045324169481, 0.000721949515701529, 0.0020419815929076},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0.0144577788584968, 0, -0.0614242950293904, 0, -0.0633508128977598, 0.0391963157194754, 0, -0.0681468335999936, 0, -0.0914285714285714, 0.00983614818084424, 0, 0.0285925847598672, 0, 0.0143666139669648, -0.013968253968254, 0, 0, -0.0714693557517662, 0, 0.0456600965054471, 0, 0.0182640386021788, 0, 0.0040839631858152, -0.00263618690086442, 0, -0.00471575448938187, 0, -0.00144389903140307, 0.0020419815929076},
    {0.351908735506058, 0, 0, 0, -0.115662230867974, 0, -0.129314305325032, 0, 0, -0.134387368181059, 0, -0.0908624447999914, 0, 0.0406349206349207, -0.0786891854467539, 0, -0.0879771838765144, 0, 0, 0.0711111111111111, 0, 0, 0, 0, 0, 0, -0.0821881737098047, 0, 0.0367556686723369, 0.0210894952069153, 0, 0.0235787724469093, 0, 0, -0.0122518895574456}};
    
    // Extract relevant coefficients
    const double coeff0_0 = coefficients0[dof][0];
    const double coeff0_1 = coefficients0[dof][1];
    const double coeff0_2 = coefficients0[dof][2];
    const double coeff0_3 = coefficients0[dof][3];
    const double coeff0_4 = coefficients0[dof][4];
    const double coeff0_5 = coefficients0[dof][5];
    const double coeff0_6 = coefficients0[dof][6];
    const double coeff0_7 = coefficients0[dof][7];
    const double coeff0_8 = coefficients0[dof][8];
    const double coeff0_9 = coefficients0[dof][9];
    const double coeff0_10 = coefficients0[dof][10];
    const double coeff0_11 = coefficients0[dof][11];
    const double coeff0_12 = coefficients0[dof][12];
    const double coeff0_13 = coefficients0[dof][13];
    const double coeff0_14 = coefficients0[dof][14];
    const double coeff0_15 = coefficients0[dof][15];
    const double coeff0_16 = coefficients0[dof][16];
    const double coeff0_17 = coefficients0[dof][17];
    const double coeff0_18 = coefficients0[dof][18];
    const double coeff0_19 = coefficients0[dof][19];
    const double coeff0_20 = coefficients0[dof][20];
    const double coeff0_21 = coefficients0[dof][21];
    const double coeff0_22 = coefficients0[dof][22];
    const double coeff0_23 = coefficients0[dof][23];
    const double coeff0_24 = coefficients0[dof][24];
    const double coeff0_25 = coefficients0[dof][25];
    const double coeff0_26 = coefficients0[dof][26];
    const double coeff0_27 = coefficients0[dof][27];
    const double coeff0_28 = coefficients0[dof][28];
    const double coeff0_29 = coefficients0[dof][29];
    const double coeff0_30 = coefficients0[dof][30];
    const double coeff0_31 = coefficients0[dof][31];
    const double coeff0_32 = coefficients0[dof][32];
    const double coeff0_33 = coefficients0[dof][33];
    const double coeff0_34 = coefficients0[dof][34];
    
    // Compute value(s)
    *values = coeff0_0*basisvalue0 + coeff0_1*basisvalue1 + coeff0_2*basisvalue2 + coeff0_3*basisvalue3 + coeff0_4*basisvalue4 + coeff0_5*basisvalue5 + coeff0_6*basisvalue6 + coeff0_7*basisvalue7 + coeff0_8*basisvalue8 + coeff0_9*basisvalue9 + coeff0_10*basisvalue10 + coeff0_11*basisvalue11 + coeff0_12*basisvalue12 + coeff0_13*basisvalue13 + coeff0_14*basisvalue14 + coeff0_15*basisvalue15 + coeff0_16*basisvalue16 + coeff0_17*basisvalue17 + coeff0_18*basisvalue18 + coeff0_19*basisvalue19 + coeff0_20*basisvalue20 + coeff0_21*basisvalue21 + coeff0_22*basisvalue22 + coeff0_23*basisvalue23 + coeff0_24*basisvalue24 + coeff0_25*basisvalue25 + coeff0_26*basisvalue26 + coeff0_27*basisvalue27 + coeff0_28*basisvalue28 + coeff0_29*basisvalue29 + coeff0_30*basisvalue30 + coeff0_31*basisvalue31 + coeff0_32*basisvalue32 + coeff0_33*basisvalue33 + coeff0_34*basisvalue34;
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis() is not yet implemented.");
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_02 = element_coordinates[3][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
    const double J_12 = element_coordinates[3][1] - element_coordinates[0][1];
    const double J_20 = element_coordinates[1][2] - element_coordinates[0][2];
    const double J_21 = element_coordinates[2][2] - element_coordinates[0][2];
    const double J_22 = element_coordinates[3][2] - element_coordinates[0][2];
      
    // Compute sub determinants
    const double d00 = J_11*J_22 - J_12*J_21;
    const double d01 = J_12*J_20 - J_10*J_22;
    const double d02 = J_10*J_21 - J_11*J_20;
    
    const double d10 = J_02*J_21 - J_01*J_22;
    const double d11 = J_00*J_22 - J_02*J_20;
    const double d12 = J_01*J_20 - J_00*J_21;
    
    const double d20 = J_01*J_12 - J_02*J_11;
    const double d21 = J_02*J_10 - J_00*J_12;
    const double d22 = J_00*J_11 - J_01*J_10;
      
    // Compute determinant of Jacobian
    double detJ = J_00*d00 + J_10*d10 + J_20*d20;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = d00*(element_coordinates[0][0] - element_coordinates[2][0] - element_coordinates[3][0]) \
                    + d10*(element_coordinates[0][1] - element_coordinates[2][1] - element_coordinates[3][1]) \
                    + d20*(element_coordinates[0][2] - element_coordinates[2][2] - element_coordinates[3][2]);
    
    const double C1 = d01*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[3][0]) \
                    + d11*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[3][1]) \
                    + d21*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[3][2]);
    
    const double C2 = d02*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[2][0]) \
                    + d12*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[2][1]) \
                    + d22*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[2][2]);
    
    // Get coordinates and map to the UFC reference element
    double x = (C0 + d00*coordinates[0] + d10*coordinates[1] + d20*coordinates[2]) / detJ;
    double y = (C1 + d01*coordinates[0] + d11*coordinates[1] + d21*coordinates[2]) / detJ;
    double z = (C2 + d02*coordinates[0] + d12*coordinates[1] + d22*coordinates[2]) / detJ;
    
    // Map coordinates to the reference cube
    if (std::abs(y + z - 1.0) < 1e-14)
      x = 1.0;
    else
      x = -2.0 * x/(y + z - 1.0) - 1.0;
    if (std::abs(z - 1.0) < 1e-14)
      y = -1.0;
    else
      y = 2.0 * y/(1.0 - z) - 1.0;
    z = 2.0 * z - 1.0;
    
    // Compute number of derivatives
    unsigned int num_derivatives = 1;
    
    for (unsigned int j = 0; j < n; j++)
      num_derivatives *= 3;
    
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      combinations[j] = new unsigned int [n];
      for (unsigned int k = 0; k < n; k++)
        combinations[j][k] = 0;
    }
        
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] ={{d00 / detJ, d10 / detJ, d20 / detJ}, {d01 / detJ, d11 / detJ, d21 / detJ}, {d02 / detJ, d12 / detJ, d22 / detJ}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values
    for (unsigned int j = 0; j < 1*num_derivatives; j++)
      values[j] = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    const double scalings_y_4 = scalings_y_3*(0.5 - 0.5*y);
    const double scalings_z_0 = 1;
    const double scalings_z_1 = scalings_z_0*(0.5 - 0.5*z);
    const double scalings_z_2 = scalings_z_1*(0.5 - 0.5*z);
    const double scalings_z_3 = scalings_z_2*(0.5 - 0.5*z);
    const double scalings_z_4 = scalings_z_3*(0.5 - 0.5*z);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    const double psitilde_a_4 = 1.75*x*psitilde_a_3 - 0.75*psitilde_a_2;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_0_4 = 0.0285714285714286*psitilde_bs_0_3 + 1.8*y*psitilde_bs_0_3 - 0.771428571428571*psitilde_bs_0_2;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_1_3 = 0.285714285714286*psitilde_bs_1_2 + 2*y*psitilde_bs_1_2 - 0.714285714285714*psitilde_bs_1_1;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_2_2 = 1.02040816326531*psitilde_bs_2_1 + 2.57142857142857*y*psitilde_bs_2_1 - 0.551020408163265*psitilde_bs_2_0;
    const double psitilde_bs_3_0 = 1;
    const double psitilde_bs_3_1 = 4.5*y + 3.5;
    const double psitilde_bs_4_0 = 1;
    
    // Compute psitilde_cs
    const double psitilde_cs_00_0 = 1;
    const double psitilde_cs_00_1 = 2*z + 1;
    const double psitilde_cs_00_2 = 0.3125*psitilde_cs_00_1 + 1.875*z*psitilde_cs_00_1 - 0.5625*psitilde_cs_00_0;
    const double psitilde_cs_00_3 = 0.155555555555556*psitilde_cs_00_2 + 1.86666666666667*z*psitilde_cs_00_2 - 0.711111111111111*psitilde_cs_00_1;
    const double psitilde_cs_00_4 = 0.09375*psitilde_cs_00_3 + 1.875*z*psitilde_cs_00_3 - 0.78125*psitilde_cs_00_2;
    const double psitilde_cs_01_0 = 1;
    const double psitilde_cs_01_1 = 3*z + 2;
    const double psitilde_cs_01_2 = 0.777777777777778*psitilde_cs_01_1 + 2.33333333333333*z*psitilde_cs_01_1 - 0.555555555555556*psitilde_cs_01_0;
    const double psitilde_cs_01_3 = 0.428571428571429*psitilde_cs_01_2 + 2.14285714285714*z*psitilde_cs_01_2 - 0.714285714285714*psitilde_cs_01_1;
    const double psitilde_cs_02_0 = 1;
    const double psitilde_cs_02_1 = 4*z + 3;
    const double psitilde_cs_02_2 = 1.265625*psitilde_cs_02_1 + 2.8125*z*psitilde_cs_02_1 - 0.546875*psitilde_cs_02_0;
    const double psitilde_cs_03_0 = 1;
    const double psitilde_cs_03_1 = 5*z + 4;
    const double psitilde_cs_04_0 = 1;
    const double psitilde_cs_10_0 = 1;
    const double psitilde_cs_10_1 = 3*z + 2;
    const double psitilde_cs_10_2 = 0.777777777777778*psitilde_cs_10_1 + 2.33333333333333*z*psitilde_cs_10_1 - 0.555555555555556*psitilde_cs_10_0;
    const double psitilde_cs_10_3 = 0.428571428571429*psitilde_cs_10_2 + 2.14285714285714*z*psitilde_cs_10_2 - 0.714285714285714*psitilde_cs_10_1;
    const double psitilde_cs_11_0 = 1;
    const double psitilde_cs_11_1 = 4*z + 3;
    const double psitilde_cs_11_2 = 1.265625*psitilde_cs_11_1 + 2.8125*z*psitilde_cs_11_1 - 0.546875*psitilde_cs_11_0;
    const double psitilde_cs_12_0 = 1;
    const double psitilde_cs_12_1 = 5*z + 4;
    const double psitilde_cs_13_0 = 1;
    const double psitilde_cs_20_0 = 1;
    const double psitilde_cs_20_1 = 4*z + 3;
    const double psitilde_cs_20_2 = 1.265625*psitilde_cs_20_1 + 2.8125*z*psitilde_cs_20_1 - 0.546875*psitilde_cs_20_0;
    const double psitilde_cs_21_0 = 1;
    const double psitilde_cs_21_1 = 5*z + 4;
    const double psitilde_cs_22_0 = 1;
    const double psitilde_cs_30_0 = 1;
    const double psitilde_cs_30_1 = 5*z + 4;
    const double psitilde_cs_31_0 = 1;
    const double psitilde_cs_40_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.866025403784439*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_0;
    const double basisvalue1 = 2.73861278752583*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_0;
    const double basisvalue2 = 1.58113883008419*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_0;
    const double basisvalue3 = 1.11803398874989*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_1;
    const double basisvalue4 = 5.1234753829798*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_0;
    const double basisvalue5 = 3.96862696659689*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_0;
    const double basisvalue6 = 2.29128784747792*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_0;
    const double basisvalue7 = 3.24037034920393*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_1;
    const double basisvalue8 = 1.87082869338697*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_1;
    const double basisvalue9 = 1.3228756555323*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_2;
    const double basisvalue10 = 7.93725393319377*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_0;
    const double basisvalue11 = 6.70820393249937*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_0;
    const double basisvalue12 = 5.19615242270663*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_0;
    const double basisvalue13 = 3*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_0;
    const double basisvalue14 = 5.80947501931113*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_1;
    const double basisvalue15 = 4.5*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_1;
    const double basisvalue16 = 2.59807621135332*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_1;
    const double basisvalue17 = 3.67423461417477*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_2;
    const double basisvalue18 = 2.12132034355964*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_2;
    const double basisvalue19 = 1.5*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_3;
    const double basisvalue20 = 11.1242977306435*psitilde_a_4*scalings_y_4*psitilde_bs_4_0*scalings_z_4*psitilde_cs_40_0;
    const double basisvalue21 = 9.81070843517429*psitilde_a_3*scalings_y_3*psitilde_bs_3_1*scalings_z_4*psitilde_cs_31_0;
    const double basisvalue22 = 8.2915619758885*psitilde_a_2*scalings_y_2*psitilde_bs_2_2*scalings_z_4*psitilde_cs_22_0;
    const double basisvalue23 = 6.42261628933256*psitilde_a_1*scalings_y_1*psitilde_bs_1_3*scalings_z_4*psitilde_cs_13_0;
    const double basisvalue24 = 3.70809924354783*psitilde_a_0*scalings_y_0*psitilde_bs_0_4*scalings_z_4*psitilde_cs_04_0;
    const double basisvalue25 = 8.77496438739212*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_1;
    const double basisvalue26 = 7.41619848709566*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_1;
    const double basisvalue27 = 5.74456264653803*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_1;
    const double basisvalue28 = 3.3166247903554*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_1;
    const double basisvalue29 = 6.42261628933256*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_2;
    const double basisvalue30 = 4.9749371855331*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_2;
    const double basisvalue31 = 2.87228132326901*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_2;
    const double basisvalue32 = 4.06201920231798*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_3;
    const double basisvalue33 = 2.34520787991171*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_3;
    const double basisvalue34 = 1.6583123951777*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_4;
    
    // Table(s) of coefficients
    const static double coefficients0[35][35] = \
    {{-0.0137464349807053, -0.014490014748814, -0.00836581391578937, -0.00591552374999943, 0, 0, 0, 0, 0, 0, -0.00671936840905292, -0.00567890279999946, -0.00439885919382571, -0.00253968253968253, -0.00491807409042212, -0.00380952380952381, -0.00219942959691287, -0.00311046316543895, -0.0017958267458706, -0.00126984126984128, 0.0136980289516341, 0.0120805260192622, 0.010209907964538, 0.00790856070259325, 0.00456600965054471, 0.0108051509532101, 0.00913201930108942, 0.0070736317340728, 0.00408396318581522, 0.00790856070259325, 0.00612594477872282, 0.0035368158670364, 0.00500181296677923, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807054, 0.0144900147488139, -0.00836581391578936, -0.00591552374999944, 0, 0, 0, 0, 0, 0, 0.00671936840905292, -0.00567890279999947, 0.00439885919382572, -0.00253968253968254, -0.00491807409042212, 0.00380952380952381, -0.00219942959691286, 0.00311046316543896, -0.0017958267458706, -0.00126984126984127, 0.0136980289516341, -0.0120805260192622, 0.010209907964538, -0.00790856070259325, 0.00456600965054471, -0.0108051509532101, 0.00913201930108942, -0.0070736317340728, 0.00408396318581521, 0.00790856070259325, -0.00612594477872282, 0.0035368158670364, -0.00500181296677923, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807054, 0, 0.0167316278315787, -0.00591552374999945, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0101587301587302, 0, 0, -0.00659828879073858, 0, 0.0035916534917412, -0.00126984126984127, 0, 0, 0, 0, 0.0228300482527235, 0, 0, 0, -0.0163358527432608, 0, 0, 0.0106104476011092, 0, -0.00577559612561231, 0.00204198159290761},
    {-0.0137464349807054, 0, 0, 0.0177465712499983, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0126984126984127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0306297238936141},
    {0.0439885919382572, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0, 0.0406349206349206, 0, 0, 0.00439885919382573, 0, -0.0143666139669648, 0.00761904761904762, 0, 0, 0, 0, 0, 0, 0, 0, 0.0367556686723369, 0, 0, -0.0424417904044368, 0, 0.0303218796594646, -0.0122518895574456},
    {-0.0329914439536929, 0, -0.0200779533978945, -0.0141972569999987, 0, 0, -0.00969857289937746, 0, 0.0712696645099798, -0.050395263067897, 0, 0, 0, 0, 0, 0, 0.0461880215351701, 0, 0.0107749604752236, -0.019047619047619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0495154221385096, 0, -0.0606437593189292, 0.0306297238936141},
    {0.0439885919382573, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0, 0.0359165349174119, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0505364660991077, -0.0408396318581521},
    {0.0439885919382571, 0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0.0433733365754904, -0.0335968420452646, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, -0.0227156111999978, 0.0175954367753029, -0.0101587301587302, 0.00327871606028142, -0.00253968253968253, 0.00146628639794192, -0.0124418526617558, 0.00718330698348241, 0.00761904761904763, 0, 0, 0, 0, 0, 0.0243115896447228, -0.0205470434274512, 0.0159156714016638, -0.00918891716808422, -0.031634242810373, 0.0245037791148913, -0.0141472634681456, 0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, -0.0173880176985767, 0.0100389766989472, -0.0141972569999987, -0.00722888942924838, 0.00559947367421077, -0.00323285763312583, 0.0617213399848368, -0.0356348322549899, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, -0.0266666666666667, 0.01539600717839, 0.00933138949631688, -0.00538748023761179, -0.019047619047619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, -0.0285877423007065, 0.0165051407128366, -0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382572, 0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0.0311046316543896, -0.017958267458706, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, -0.0335968420452646, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, 0, -0.0117302911835352, 0.0101587301587302, -0.0229510124219699, 0.00761904761904762, -0.0014662863979419, 0.0165891368823411, -0.00718330698348239, -0.00761904761904762, 0, 0.0241610520385245, -0.0357346778758831, 0.0355885231616696, -0.0228300482527235, -0.00270128773830253, -0.0114150241263618, 0.0159156714016638, -0.0112308987609918, 0.00395428035129663, 0.00306297238936141, -0.0035368158670364, -0.00375135972508442, 0.00072194951570154, 0.00204198159290761},
    {-0.0329914439536929, -0.0173880176985767, -0.0100389766989473, 0.0141972569999987, -0.00722888942924838, 0.0615942104163185, -0.0614242950293905, -0.00685792666498186, -0.00395942580611002, 0.00559947367421077, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.0049180740904221, -0.0266666666666667, 0.0175954367753029, 0.00933138949631686, 0.00538748023761182, -0.00761904761904761, 0, 0, 0.0357346778758831, -0.0593142052694494, 0.0456600965054471, 0, -0.0091320193010894, 0, 0.00408396318581524, 0.0013180934504322, 0.00714693557517662, -0.00471575448938186, -0.00250090648338961, -0.00144389903140308, 0.0020419815929076},
    {0.0439885919382573, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484215, 0, 0, 0.0293257279588381, 0.0101587301587301, 0, -0.0101587301587302, -0.0219942959691286, 0.00207364211029264, 0.017958267458706, -0.00761904761904762, 0, 0, 0, 0.0395428035129662, -0.0456600965054471, 0, 0, -0.017684079335182, 0.0142938711503532, 0, 0.00612594477872282, 0, -0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.0439885919382572, -0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0.0433733365754904, 0.0335968420452647, 0.0193971457987549, 0.0274317066599275, 0.01583770322444, 0.0111989473484215, -0.0268774736362117, -0.0227156111999979, -0.0175954367753029, -0.0101587301587302, 0.00327871606028141, 0.00253968253968254, 0.00146628639794191, 0.0124418526617558, 0.00718330698348239, 0.00761904761904762, 0, 0, 0, 0, 0, -0.0243115896447228, -0.0205470434274512, -0.0159156714016638, -0.00918891716808422, -0.031634242810373, -0.0245037791148913, -0.0141472634681456, -0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.032991443953693, 0.0173880176985767, 0.0100389766989472, -0.0141972569999986, -0.0072288894292484, -0.00559947367421079, -0.00323285763312582, -0.0617213399848368, -0.0356348322549899, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, 0.0266666666666667, 0.01539600717839, -0.00933138949631686, -0.00538748023761177, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, 0.0285877423007065, 0.0165051407128365, 0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382572, -0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, -0.0311046316543895, -0.017958267458706, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484215, -0.0268774736362117, 0, 0.0117302911835353, 0.0101587301587301, -0.0229510124219699, -0.00761904761904762, -0.0014662863979419, -0.0165891368823411, -0.0071833069834824, -0.00761904761904762, 0, -0.0241610520385245, -0.0357346778758831, -0.0355885231616696, -0.0228300482527235, 0.00270128773830253, -0.0114150241263618, -0.0159156714016638, -0.0112308987609918, 0.00395428035129663, -0.00306297238936141, -0.0035368158670364, 0.00375135972508443, 0.000721949515701543, 0.00204198159290761},
    {-0.0329914439536929, 0.0173880176985767, -0.0100389766989473, 0.0141972569999986, -0.00722888942924838, -0.0615942104163185, -0.0614242950293904, 0.00685792666498186, -0.00395942580611, 0.00559947367421079, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042211, 0.0266666666666667, 0.0175954367753029, -0.00933138949631687, 0.0053874802376118, -0.00761904761904762, 0, 0, 0.0357346778758831, 0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108941, 0, 0.00408396318581522, 0.0013180934504322, -0.00714693557517662, -0.00471575448938187, 0.00250090648338962, -0.00144389903140308, 0.00204198159290761},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484215, 0, 0, -0.0293257279588381, 0.0101587301587301, 0, 0.0101587301587302, -0.0219942959691286, -0.00207364211029263, 0.017958267458706, -0.00761904761904762, 0, 0, 0, -0.0395428035129662, -0.0456600965054471, 0, 0, 0.017684079335182, 0.0142938711503532, 0, -0.00612594477872281, 0, 0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.0439885919382572, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484215, 0.0134387368181059, -0.0113578055999989, -0.0205280095711867, -0.0152380952380952, -0.00983614818084423, -0.0177777777777778, -0.0131965775814772, -0.0145154947720485, -0.0107749604752236, -0.0076190476190476, -0.0547921158065365, -0.0241610520385245, -0.00510495398226901, 0.00395428035129662, 0.00456600965054471, -0.0216103019064202, -0.00456600965054471, 0.0035368158670364, 0.00408396318581521, -0.00395428035129662, 0.00306297238936141, 0.0035368158670364, 0.00250090648338962, 0.00288779806280615, 0.0020419815929076},
    {-0.0329914439536929, 0, 0.0200779533978945, 0.0141972569999987, -0.0867466731509807, 0, 0.00969857289937746, 0, 0.00791885161221999, 0.00559947367421079, 0, 0.0340734167999968, 0, -0.0152380952380953, 0.0295084445425327, 0, -0.0131965775814772, 0, -0.0107749604752236, -0.00761904761904764, 0.0821881737098047, 0, -0.010209907964538, 0, 0.0045660096505447, 0, -0.00913201930108942, 0, 0.0040839631858152, -0.00790856070259325, 0, 0.00353681586703639, 0, 0.00288779806280615, 0.00204198159290761},
    {0.0439885919382572, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754903, -0.0335968420452646, 0.0193971457987549, -0.0274317066599274, 0.01583770322444, 0.0111989473484215, -0.0134387368181059, -0.0113578055999989, 0.0205280095711867, -0.0152380952380952, -0.00983614818084423, 0.0177777777777778, -0.0131965775814772, 0.0145154947720485, -0.0107749604752236, -0.00761904761904761, -0.0547921158065365, 0.0241610520385245, -0.00510495398226901, -0.00395428035129662, 0.00456600965054471, 0.0216103019064202, -0.00456600965054471, -0.0035368158670364, 0.00408396318581521, -0.00395428035129662, -0.00306297238936141, 0.00353681586703641, -0.00250090648338962, 0.00288779806280615, 0.0020419815929076},
    {0.0439885919382569, 0.139104141588614, -0.0803118135915779, -0.0567890279999946, 0.0578311154339871, 0.0335968420452646, -0.0420271492306355, 0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, -0.0586514559176762, 0.0406349206349206, 0.0393445927233769, 0.00253968253968254, -0.0109971479845643, -0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, -0.053052238005546, 0.0367556686723369, -0.0105447476034577, -0.0245037791148913, 0.0235787724469093, 0.0175063453837273, 0, -0.0122518895574456},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0, 0.0783926314389509, 0.00969857289937743, -0.0274317066599274, 0.0475131096733199, -0.0167984210226323, 0, 0, 0.0586514559176763, -0.060952380952381, 0, 0.033015873015873, 0.0241937255660415, -0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, 0.053052238005546, -0.0551335030085054, 0, -0.0326717054865217, 0.0141472634681456, 0.00875317269186366, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0, -0.0111989473484216, 0.00969857289937743, 0.0822951199797824, 0.0475131096733199, -0.0167984210226323, 0, 0, 0, 0, 0, 0.0533333333333333, -0.0461880215351701, 0.0435464843161454, 0.0251415744421884, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.057175484601413, -0.0495154221385096, -0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382572, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, 0.0578311154339871, -0.0335968420452646, -0.0420271492306356, -0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, 0.0586514559176763, 0.0406349206349206, 0.0393445927233769, -0.00253968253968253, -0.0109971479845643, 0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, 0.053052238005546, 0.0367556686723369, -0.0105447476034577, 0.0245037791148913, 0.0235787724469093, -0.0175063453837273, 0, -0.0122518895574456},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0, -0.0783926314389508, 0.00969857289937744, 0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, -0.0586514559176763, -0.060952380952381, 0, -0.033015873015873, 0.0241937255660415, 0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, -0.053052238005546, -0.0551335030085054, 0, 0.0326717054865217, 0.0141472634681456, -0.00875317269186367, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382573, 0, 0, 0.170367083999984, 0, 0.0111989473484216, 0.00969857289937742, -0.0822951199797824, 0.0475131096733199, -0.0167984210226324, 0, 0, 0, 0, 0, -0.0533333333333333, -0.0461880215351701, -0.0435464843161454, 0.0251415744421884, -0.0825396825396825, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.057175484601413, -0.0495154221385096, 0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382572, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754904, 0.0447957893936862, 0.0484928644968872, -0.0548634133198549, 0, -0.0167984210226323, 0.0806324209086351, 0.0227156111999978, -0.00586514559176761, -0.0101587301587302, -0.00327871606028142, 0.0304761904761905, 0.0271262983619253, 0.045620126426438, 0.0430998419008943, 0.0393650793650793, 0, 0, 0, 0, 0, 0.0729347689341683, 0.0205470434274512, -0.0053052238005546, -0.00918891716808421, 0.031634242810373, -0.00816792637163041, -0.0141472634681456, -0.00875317269186367, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754904, -0.0447957893936862, 0.0484928644968872, 0.0548634133198549, 0, -0.0167984210226323, -0.0806324209086352, 0.0227156111999978, 0.0058651455917676, -0.0101587301587302, -0.00327871606028142, -0.0304761904761905, 0.0271262983619253, -0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, -0.0729347689341683, 0.0205470434274512, 0.00530522380055459, -0.00918891716808422, 0.031634242810373, 0.00816792637163041, -0.0141472634681456, 0.00875317269186366, -0.0151609398297323, -0.0122518895574456},
    {0.043988591938257, 0, 0, 0.170367083999984, 0.0144577788584968, 0, -0.00323285763312582, 0, -0.0950262193466398, -0.0167984210226323, 0, 0, 0, 0, -0.0688530372659096, 0, 0.01539600717839, 0, -0.0502831488843767, -0.0825396825396825, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0738132332242037, 0, 0.0165051407128365, 0, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382574, -0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754904, -0.0447957893936862, -0.00969857289937744, 0.0548634133198549, 0.0316754064488799, 0.0391963157194754, 0.0806324209086352, 0, 0.0527863103259087, 0.060952380952381, 0.0229510124219699, 0.0101587301587302, 0.0168622935763319, -0.0124418526617558, -0.00718330698348237, -0.013968253968254, 0, 0.0724831561155734, 0.0357346778758831, -0.0118628410538899, -0.0228300482527235, -0.00810386321490759, 0.0114150241263618, -0.0053052238005546, -0.0112308987609918, -0.00395428035129662, -0.0010209907964538, -0.0035368158670364, 0.00125045324169481, 0.000721949515701528, 0.0020419815929076},
    {0.0439885919382571, 0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754903, 0.0447957893936862, -0.00969857289937744, -0.0548634133198549, 0.0316754064488799, 0.0391963157194754, -0.0806324209086351, 0, -0.0527863103259086, 0.060952380952381, 0.0229510124219699, -0.0101587301587302, 0.0168622935763319, 0.0124418526617558, -0.00718330698348238, -0.013968253968254, 0, -0.0724831561155734, 0.0357346778758831, 0.0118628410538899, -0.0228300482527235, 0.00810386321490758, 0.0114150241263618, 0.0053052238005546, -0.0112308987609918, -0.00395428035129663, 0.0010209907964538, -0.0035368158670364, -0.00125045324169481, 0.000721949515701529, 0.0020419815929076},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0.0144577788584968, 0, -0.0614242950293904, 0, -0.0633508128977598, 0.0391963157194754, 0, -0.0681468335999936, 0, -0.0914285714285714, 0.00983614818084424, 0, 0.0285925847598672, 0, 0.0143666139669648, -0.013968253968254, 0, 0, -0.0714693557517662, 0, 0.0456600965054471, 0, 0.0182640386021788, 0, 0.0040839631858152, -0.00263618690086442, 0, -0.00471575448938187, 0, -0.00144389903140307, 0.0020419815929076},
    {0.351908735506058, 0, 0, 0, -0.115662230867974, 0, -0.129314305325032, 0, 0, -0.134387368181059, 0, -0.0908624447999914, 0, 0.0406349206349207, -0.0786891854467539, 0, -0.0879771838765144, 0, 0, 0.0711111111111111, 0, 0, 0, 0, 0, 0, -0.0821881737098047, 0, 0.0367556686723369, 0.0210894952069153, 0, 0.0235787724469093, 0, 0, -0.0122518895574456}};
    
    // Interesting (new) part
    // Tables of derivatives of the polynomial base (transpose)
    const static double dmats0[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {6.32455532033676, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 11.2249721603218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.58257569495584, 0, 8.36660026534075, -1.18321595661992, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.74165738677394, 0, 0, 8.69482604771366, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.49909083394702, 0, -3.34664010613631, -2.36643191323985, 15.4919333848297, 0, 0.692820323027556, 0, 0.565685424949245, 0.400000000000005, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 4.89897948556635, 0, 0, 0, 14.1985914794391, 0, -0.82807867121082, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.60000000000001, 0, 8.76356092008266, -1.54919333848297, 0, 0, 9.52470471983253, 0, -1.48131215963609, 0.261861468283193, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 4.24264068711929, 0, 0, 0, 0, 0, 14.3427433120127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.04792266088297e-14, 0, 0, 0, 0, -1.47304043962571e-14, 0, 0},
    {3.11769145362398, 0, 3.16227766016838, 4.91934955049954, 0, 0, 0, 0, 10.690449676497, -2.41897262725905, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.54558441227157, 0, 0, 7.66811580507232, 0, 0, 0, 0, 0, 10.3691851174526, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 11.6057691494799, 0, 0, 0, -4.20458932936041, 0, -3.43303281162798, 0, 0, 19.6214168703486, 0, 0.611677741841199, 0, 0, 0.529728463363978, 0, 0.432521479156786, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.53137212479104, 0, 3.54562104171167, -2.50713268211203, 4.7871355387817, 0, -5.56626745075492, 0, -1.04880884817015, 0.741619848709561, 0, 18.8034951158403, 0, 1.68183573174415, -0.603122387046456, 0, 0.701283781217662, 0, 0.132137494528679, -0.0934353184302344, 0, 0, 0, 0, -1.83555802032862e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 2.59512887494071, 0, 0, 0, 10.0285307284481, 0, -0.767649473578741, 0, 0, 0, 0, 16.4130361329658, 0, 0, -1.26347611061158, 0, 0.0967147429123328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.96647939483826, 0, 8.12403840463596, -1.64130361329658, 0, 0, 11.7728501222091, 0, -2.40312296813959, 0.48550415622761, 0, 0, 0, 10.2761860629321, 0, 0, -1.48323969741913, 0, 0.302765035409751, -0.0611677741841196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.05298244095218, 0, -1.58564993434418, 4.4848952846511, 4.28174419288838, 0, 0.191485421551268, 0, -3.75233260785874, -4.31161222746202, 0, 0, 0, 0, 18.8807171866294, 0, 0.84437134186504, 0, 1.18187368057056, 1.04463861754668, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 2.32115382989599, 0, 0, 0, 3.92428337406972, 0, 5.49285249860477, 0, 0, 0, 0, 0, 0, 0, 17.3044631365565, 0, -1.73008591662715, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.46547001870808e-14, 0, 0, 0, 0, 0, 0, 0},
    {2.65329983228432, 0, 4.15220619990514, 2.93605316083775, 0, 0, 2.63248931621764, 0, 9.82591326180786, -2.8226127713774, 0, 0, 0, 0, 0, 0, 11.6081867662439, 0, -3.09487177319465, 0.683876505540243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 2.01017818278148, 0, 0, 0, 0, 0, 8.91928088068603, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16.8558564884489, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.26487362250849e-14, 0, 0},
    {2.2978250586152, 0, 1.49829835452879, 5.50917601898534, 0, 0, 0, 0, 6.64803945320938, 4.13676892548485, 0, 0, 0, 0, 0, 0, 0, 0, 12.5636136423842, -3.55352656109507, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87616630392936, 0, 0, 6.22830929985769, 0, 0, 0, 0, 0, 11.0541524195338, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11.6057691494799, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    const static double dmats1[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.16227766016838, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.47722557505166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.95803989154981, 5.61248608016091, -1.08012344973464, -0.763762615825973, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.29128784747792, 7.24568837309472, 4.18330013267038, -0.591607978309961, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-2.64575131106459, 0, 9.66091783079296, 0.683130051063972, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87082869338697, 0, 0, 4.34741302385683, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.24037034920393, 0, 0, 7.52994023880668, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.74954541697351, 5.79655069847578, -1.67332005306815, -1.18321595661993, 7.74596669241484, -1.2, 0.346410161513782, -0.979795897113277, 0.282842712474625, 0.200000000000005, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.32379000772445, 2.44948974278317, 2.82842712474619, -1, 9.16515138991168, 7.09929573971954, -2.04939015319192, -0.414039335605409, -0.478091443733757, 0.1690308509457, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.8, -5.69209978830308, 4.38178046004133, -0.774596669241485, 0, 10.998181667894, 4.76235235991627, 0.962140470884731, -0.740656079818044, 0.130930734141594, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.19615242270664, 0, -3.16227766016838, -2.23606797749979, 0, 1.15073592506104e-14, 13.7477270848675, 0, 0.534522483824844, 0.377964473009229, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.01246117974981, 2.12132034355964, -0.408248290463862, 3.17542648054294, 0, 0, 0, 7.17137165600636, -1.38013111868471, -1.56144011671765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.55884572681199, 2.73861278752583, 1.58113883008419, 2.45967477524977, 0, 0, 0, 9.25820099772551, 5.34522483824849, -1.20948631362952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-1.80000000000001, 0, 3.65148371670111, -2.84018778721877, 0, 0, 0, 0, 12.3442679969674, 1.39659449751035, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.27279220613578, 0, 0, 3.83405790253616, 0, 0, 0, 0, 0, 5.18459255872628, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.20454076850486, 0, 0, 6.64078308635359, 0, 0, 0, 0, 0, 8.97997772825745, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.56904651573304, 5.80288457473998, -2.01017818278147, -1.42141062443803, 8.14215222512716, -2.1022946646802, 0.728256234341424, -1.71651640581399, 0.594618725379073, 0.420458932936044, 9.81070843517429, -1.18450885369836, 0.305838870920599, -0.105945692672796, -1.02581475831036, 0.264864231681989, -0.0917516612761798, 0.216260739578392, -0.0749149177264397, -0.0529728463363978, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.26568606239552, 3.07059789431495, 1.77281052085584, -1.25356634105602, 2.39356776939085, 6.30376871403132, -2.78313372537745, -0.908295106229245, -0.524404424085072, 0.370809924354781, 11.1242977306435, 9.40174755792013, -2.42752078113806, 0.840917865872078, -0.301561193523229, -0.794200206656967, 0.350641890608832, 0.114434427054264, 0.066068747264339, -0.0467176592151171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.91485421551267, 1.29756443747035, 3.74574588632197, -1.05945692672795, -8.09173593712687, 5.01426536422407, 1.80936716113936, -0.383824736789365, -1.1080065755349, 0.313391585264001, 0, 12.7134831207354, 8.2065180664829, -2.84282124887606, 1.01946290306866, -0.631738055305791, -0.227958835180079, 0.048357371456166, 0.1395957071376, -0.0394836284566123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741913, 7.03562363973515, 4.06201920231798, -0.82065180664829, 0, -6.79705818718657, 5.88642506110457, -2.08116553882675, -1.2015614840698, 0.242752078113806, 0, 0, 14.8323969741913, 5.13809303146605, 0, 0.856348838577676, -0.741619848709566, 0.262202212042541, 0.151382517704876, -0.0305838870920601, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-3.42539535431072, 0, 9.38083151964686, 1.89521416591738, 0, 0, -3.39852909359331, 0, -2.77488738510233, -0.560611910581399, 0, 0, 0, 17.7988763690296, 0, 0, 0.428174419288838, 0, 0.349602949390051, 0.0706304617818607, 0, 0, 0, 0, -1.20672813501736e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.02649122047609, 2.74642624930239, -0.792824967172091, 2.24244764232555, 2.14087209644419, -0.331662479035539, 0.0957427107756368, 6.49923072370876, -1.87616630392937, -2.15580611373101, 0, 0, 0, 0, 9.44035859331468, -1.46249406456536, 0.422185670932519, -2.04706526287664, 0.590936840285281, 0.522319308773342, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.71269767715535, 1.16057691494799, 1.34011878852098, 1.89521416591737, 2.53311402559511, 1.96214168703486, -0.566421515598879, 2.74642624930239, 3.17129986868837, -1.82198870938951, 0, 0, 0, 0, 11.1699829238239, 8.65223156827827, -2.49768411251822, -0.865042958313572, -0.998865569685857, 0.441440386136647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.32664991614216, -2.69693703815182, 2.07610309995257, 1.46802658041887, 0, 3.03973683071413, 1.31624465810882, -6.382117875081, 4.91295663090393, -1.4113063856887, 0, 0, 0, 0, 0, 13.4039795085887, 5.80409338312195, 2.01017818278147, -1.54743588659733, 0.341938252770123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.82970843102536, 0, -1.49829835452878, 4.23782770691181, 0, 0, 3.79967103839266, 0, -3.54562104171167, -4.07409060843206, 0, 0, 0, 0, 0, 0, 16.7549743857359, 0, 1.11676565710082, 0.987090711415302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741913, 1.00508909139074, -0.193429485824667, 3.55615782880926, 0, 0, 0, 4.45964044034301, -0.858258202906998, 2.67027285925187, 0, 0, 0, 0, 0, 0, 0, 8.42792824422443, -1.62195554683794, -2.29379153190448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.1489125293076, 1.29756443747036, 0.749149177264395, 2.75458800949267, 0, 0, 0, 5.75737105184053, 3.32401972660469, 2.06838446274243, 0, 0, 0, 0, 0, 0, 0, 10.8804085776374, 6.2818068211921, -1.77676328054753, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-1.32664991614217, 0, 1.73008591662714, -3.18072425757423, 0, 0, 0, 0, 7.67649473578739, -2.38836465270397, 0, 0, 0, 0, 0, 0, 0, 0, 14.5072114368499, 2.05162951662072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.938083151964681, 0, 0, 3.11415464992885, 0, 0, 0, 0, 0, 5.52707620976691, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.80288457473997, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.62480768092718, 0, 0, 5.39387407630363, 0, 0, 0, 0, 0, 9.57317681262151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10.0508909139073, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    const static double dmats2[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.16227766016838, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.82574185835055, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.16397779494322, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.95803989154981, 5.61248608016091, -1.08012344973464, -0.763762615825973, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.29128784747792, 1.44913767461894, 4.18330013267038, -0.591607978309961, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.32287565553229, 0, 3.86436713231718, -0.341565025531986, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87082869338697, 7.09929573971954, 0, 4.34741302385683, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.08012344973464, 0, 7.09929573971954, 2.50998007960223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-3.81881307912986, 0, 0, 8.87411967464942, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.74954541697351, 5.79655069847578, -1.67332005306815, -1.18321595661993, 7.74596669241484, -1.2, 0.346410161513782, -0.979795897113276, 0.282842712474624, 0.200000000000004, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.32379000772444, 2.44948974278317, 2.82842712474619, -0.999999999999999, 1.30930734141596, 7.09929573971954, -2.04939015319192, -0.414039335605411, -0.478091443733757, 0.169030850945702, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.8, 0.632455532033675, 4.38178046004133, -0.774596669241484, 0, 3.14233761939829, 4.76235235991627, -0.106904496764967, -0.740656079818044, 0.130930734141596, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.03923048454133, 0, 3.16227766016838, -0.447213595499958, 0, 0, 5.89188303637179, 0, -0.53452248382485, 0.0755928946018457, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.01246117974982, 2.12132034355965, -0.408248290463861, 3.17542648054294, 9.07114735222145, 0, 0, 7.17137165600636, -1.38013111868471, -1.56144011671765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.55884572681199, 0.547722557505168, 1.58113883008419, 2.45967477524977, 0, 9.07114735222145, 0, 1.8516401995451, 5.34522483824849, -1.20948631362952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.900000000000005, 0, 1.46059348668044, 1.42009389360938, 0, 0, 9.07114735222146, 0, 4.93770719878694, -0.698297248755171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.27279220613578, -6.26099033699941, 0, 3.83405790253616, 0, 0, 0, 10.5830052442584, 0, 5.18459255872629, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.73484692283495, 0, -6.26099033699941, 2.21359436211787, 0, 0, 0, 0, 10.5830052442584, 2.99332590941916, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.71576766497728, 0, 0, -4.69574275274956, 0, 0, 0, 0, 0, 12.69960629311, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.14660884953377e-14},
    {2.56904651573304, 5.80288457473998, -2.01017818278147, -1.42141062443803, 8.14215222512715, -2.1022946646802, 0.728256234341423, -1.71651640581399, 0.594618725379073, 0.420458932936043, 9.81070843517429, -1.18450885369836, 0.305838870920599, -0.105945692672796, -1.02581475831036, 0.264864231681989, -0.0917516612761797, 0.216260739578392, -0.0749149177264397, -0.0529728463363978, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.26568606239552, 3.07059789431495, 1.77281052085584, -1.25356634105602, 2.39356776939085, 6.30376871403132, -2.78313372537745, -0.908295106229244, -0.524404424085071, 0.370809924354782, 1.23603308118261, 9.40174755792013, -2.42752078113806, 0.840917865872078, -0.301561193523228, -0.794200206656968, 0.350641890608831, 0.114434427054264, 0.0660687472643394, -0.0467176592151163, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.91485421551268, 1.29756443747035, 3.74574588632197, -1.05945692672795, 0.404586796856348, 5.01426536422407, 1.80936716113936, -0.383824736789368, -1.1080065755349, 0.313391585264003, 0, 2.82521847127454, 8.2065180664829, -2.84282124887606, -0.050973145153435, -0.631738055305789, -0.227958835180081, 0.0483573714561672, 0.139595707137601, -0.0394836284566111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741913, 0.335029697130247, 4.06201920231798, -0.820651806648289, 0, 1.69926454679665, 5.88642506110457, -0.0991031208965148, -1.2015614840698, 0.242752078113804, 0, 0, 4.94413232473044, 5.13809303146605, 0, -0.21408720964442, -0.741619848709566, 0.0124858196210736, 0.151382517704876, -0.0305838870920597, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.856348838577674, 0, 2.68023757704196, -0.473803541479343, 0, 0, 5.09779364038993, 0, -0.792824967172097, 0.140152977645346, 0, 0, 0, 7.91061171956871, 0, 0, -0.642261628933256, 0, 0.0998865569685867, -0.0176576154454656, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.02649122047609, 2.74642624930238, -0.792824967172091, 2.24244764232555, 2.14087209644419, -0.33166247903554, 0.0957427107756354, 6.49923072370876, -1.87616630392937, -2.15580611373101, 11.0554159678513, 0, 0, 0, 9.44035859331468, -1.46249406456536, 0.422185670932521, -2.04706526287664, 0.59093684028528, 0.522319308773342, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.71269767715535, 1.16057691494799, 1.34011878852098, 1.89521416591737, 0.361873432227875, 1.96214168703486, -0.566421515598883, 2.74642624930239, 3.17129986868837, -1.82198870938951, 0, 11.0554159678513, 0, 0, 1.59571184626056, 8.65223156827827, -2.49768411251822, -0.865042958313574, -0.998865569685858, 0.441440386136646, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.32664991614216, 0.299659670905758, 2.07610309995257, 1.46802658041887, 0, 0.868496237346892, 1.31624465810882, 0.709124208342336, 4.91295663090393, -1.4113063856887, 0, 0, 11.0554159678513, 0, 0, 3.82970843102535, 5.80409338312195, -0.223353131420164, -1.54743588659732, 0.341938252770122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.765941686205066, 0, 1.49829835452879, 0.847565541382365, 0, 0, 1.62843044502542, 0, 3.54562104171167, -0.814818121686414, 0, 0, 0, 11.0554159678513, 0, 0, 7.18070330817254, 0, -1.11676565710082, 0.197418142283061, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741913, 1.00508909139074, -0.193429485824666, 3.55615782880926, -8.46157280212812, 0, 0, 4.45964044034302, -0.858258202906997, 2.67027285925187, 0, 0, 0, 0, 12.4373429638328, 0, 0, 8.42792824422443, -1.62195554683794, -2.29379153190448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.1489125293076, 0.259512887494072, 0.749149177264393, 2.75458800949267, 0, -8.46157280212812, 0, 1.15147421036811, 3.32401972660469, 2.06838446274243, 0, 0, 0, 0, 0, 12.4373429638327, 0, 2.17608171552749, 6.2818068211921, -1.77676328054754, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.663324958071069, 0, 0.692034366650856, 1.59036212878711, 0, 0, -8.46157280212813, 0, 3.07059789431496, 1.19418232635197, 0, 0, 0, 0, 0, 0, 12.4373429638327, 0, 5.80288457473997, -1.02581475831036, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.938083151964677, 7.62808987244126, 0, 3.11415464992885, 0, 0, 0, -7.5213980463361, 0, 5.52707620976691, 0, 0, 0, 0, 0, 0, 0, 14.2141062443803, 0, 5.80288457473997, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.541602560309057, 0, 7.62808987244125, 1.79795802543454, 0, 0, 0, 0, -7.52139804633611, 3.19105893754049, 0, 0, 0, 0, 0, 0, 0, 0, 14.2141062443803, 3.35029697130245, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-5.36159180343549, 0, 0, 8.8994381845148, 0, 0, 0, 0, 0, -5.26497863243526, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16.583123951777, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    // Compute reference derivatives
    // Declare pointer to array of derivatives on FIAT element
    double *derivatives = new double [num_derivatives];
    
    // Declare coefficients
    double coeff0_0 = 0;
    double coeff0_1 = 0;
    double coeff0_2 = 0;
    double coeff0_3 = 0;
    double coeff0_4 = 0;
    double coeff0_5 = 0;
    double coeff0_6 = 0;
    double coeff0_7 = 0;
    double coeff0_8 = 0;
    double coeff0_9 = 0;
    double coeff0_10 = 0;
    double coeff0_11 = 0;
    double coeff0_12 = 0;
    double coeff0_13 = 0;
    double coeff0_14 = 0;
    double coeff0_15 = 0;
    double coeff0_16 = 0;
    double coeff0_17 = 0;
    double coeff0_18 = 0;
    double coeff0_19 = 0;
    double coeff0_20 = 0;
    double coeff0_21 = 0;
    double coeff0_22 = 0;
    double coeff0_23 = 0;
    double coeff0_24 = 0;
    double coeff0_25 = 0;
    double coeff0_26 = 0;
    double coeff0_27 = 0;
    double coeff0_28 = 0;
    double coeff0_29 = 0;
    double coeff0_30 = 0;
    double coeff0_31 = 0;
    double coeff0_32 = 0;
    double coeff0_33 = 0;
    double coeff0_34 = 0;
    
    // Declare new coefficients
    double new_coeff0_0 = 0;
    double new_coeff0_1 = 0;
    double new_coeff0_2 = 0;
    double new_coeff0_3 = 0;
    double new_coeff0_4 = 0;
    double new_coeff0_5 = 0;
    double new_coeff0_6 = 0;
    double new_coeff0_7 = 0;
    double new_coeff0_8 = 0;
    double new_coeff0_9 = 0;
    double new_coeff0_10 = 0;
    double new_coeff0_11 = 0;
    double new_coeff0_12 = 0;
    double new_coeff0_13 = 0;
    double new_coeff0_14 = 0;
    double new_coeff0_15 = 0;
    double new_coeff0_16 = 0;
    double new_coeff0_17 = 0;
    double new_coeff0_18 = 0;
    double new_coeff0_19 = 0;
    double new_coeff0_20 = 0;
    double new_coeff0_21 = 0;
    double new_coeff0_22 = 0;
    double new_coeff0_23 = 0;
    double new_coeff0_24 = 0;
    double new_coeff0_25 = 0;
    double new_coeff0_26 = 0;
    double new_coeff0_27 = 0;
    double new_coeff0_28 = 0;
    double new_coeff0_29 = 0;
    double new_coeff0_30 = 0;
    double new_coeff0_31 = 0;
    double new_coeff0_32 = 0;
    double new_coeff0_33 = 0;
    double new_coeff0_34 = 0;
    
    // Loop possible derivatives
    for (unsigned int deriv_num = 0; deriv_num < num_derivatives; deriv_num++)
    {
      // Get values from coefficients array
      new_coeff0_0 = coefficients0[dof][0];
      new_coeff0_1 = coefficients0[dof][1];
      new_coeff0_2 = coefficients0[dof][2];
      new_coeff0_3 = coefficients0[dof][3];
      new_coeff0_4 = coefficients0[dof][4];
      new_coeff0_5 = coefficients0[dof][5];
      new_coeff0_6 = coefficients0[dof][6];
      new_coeff0_7 = coefficients0[dof][7];
      new_coeff0_8 = coefficients0[dof][8];
      new_coeff0_9 = coefficients0[dof][9];
      new_coeff0_10 = coefficients0[dof][10];
      new_coeff0_11 = coefficients0[dof][11];
      new_coeff0_12 = coefficients0[dof][12];
      new_coeff0_13 = coefficients0[dof][13];
      new_coeff0_14 = coefficients0[dof][14];
      new_coeff0_15 = coefficients0[dof][15];
      new_coeff0_16 = coefficients0[dof][16];
      new_coeff0_17 = coefficients0[dof][17];
      new_coeff0_18 = coefficients0[dof][18];
      new_coeff0_19 = coefficients0[dof][19];
      new_coeff0_20 = coefficients0[dof][20];
      new_coeff0_21 = coefficients0[dof][21];
      new_coeff0_22 = coefficients0[dof][22];
      new_coeff0_23 = coefficients0[dof][23];
      new_coeff0_24 = coefficients0[dof][24];
      new_coeff0_25 = coefficients0[dof][25];
      new_coeff0_26 = coefficients0[dof][26];
      new_coeff0_27 = coefficients0[dof][27];
      new_coeff0_28 = coefficients0[dof][28];
      new_coeff0_29 = coefficients0[dof][29];
      new_coeff0_30 = coefficients0[dof][30];
      new_coeff0_31 = coefficients0[dof][31];
      new_coeff0_32 = coefficients0[dof][32];
      new_coeff0_33 = coefficients0[dof][33];
      new_coeff0_34 = coefficients0[dof][34];
    
      // Loop derivative order
      for (unsigned int j = 0; j < n; j++)
      {
        // Update old coefficients
        coeff0_0 = new_coeff0_0;
        coeff0_1 = new_coeff0_1;
        coeff0_2 = new_coeff0_2;
        coeff0_3 = new_coeff0_3;
        coeff0_4 = new_coeff0_4;
        coeff0_5 = new_coeff0_5;
        coeff0_6 = new_coeff0_6;
        coeff0_7 = new_coeff0_7;
        coeff0_8 = new_coeff0_8;
        coeff0_9 = new_coeff0_9;
        coeff0_10 = new_coeff0_10;
        coeff0_11 = new_coeff0_11;
        coeff0_12 = new_coeff0_12;
        coeff0_13 = new_coeff0_13;
        coeff0_14 = new_coeff0_14;
        coeff0_15 = new_coeff0_15;
        coeff0_16 = new_coeff0_16;
        coeff0_17 = new_coeff0_17;
        coeff0_18 = new_coeff0_18;
        coeff0_19 = new_coeff0_19;
        coeff0_20 = new_coeff0_20;
        coeff0_21 = new_coeff0_21;
        coeff0_22 = new_coeff0_22;
        coeff0_23 = new_coeff0_23;
        coeff0_24 = new_coeff0_24;
        coeff0_25 = new_coeff0_25;
        coeff0_26 = new_coeff0_26;
        coeff0_27 = new_coeff0_27;
        coeff0_28 = new_coeff0_28;
        coeff0_29 = new_coeff0_29;
        coeff0_30 = new_coeff0_30;
        coeff0_31 = new_coeff0_31;
        coeff0_32 = new_coeff0_32;
        coeff0_33 = new_coeff0_33;
        coeff0_34 = new_coeff0_34;
    
        if(combinations[deriv_num][j] == 0)
        {
          new_coeff0_0 = coeff0_0*dmats0[0][0] + coeff0_1*dmats0[1][0] + coeff0_2*dmats0[2][0] + coeff0_3*dmats0[3][0] + coeff0_4*dmats0[4][0] + coeff0_5*dmats0[5][0] + coeff0_6*dmats0[6][0] + coeff0_7*dmats0[7][0] + coeff0_8*dmats0[8][0] + coeff0_9*dmats0[9][0] + coeff0_10*dmats0[10][0] + coeff0_11*dmats0[11][0] + coeff0_12*dmats0[12][0] + coeff0_13*dmats0[13][0] + coeff0_14*dmats0[14][0] + coeff0_15*dmats0[15][0] + coeff0_16*dmats0[16][0] + coeff0_17*dmats0[17][0] + coeff0_18*dmats0[18][0] + coeff0_19*dmats0[19][0] + coeff0_20*dmats0[20][0] + coeff0_21*dmats0[21][0] + coeff0_22*dmats0[22][0] + coeff0_23*dmats0[23][0] + coeff0_24*dmats0[24][0] + coeff0_25*dmats0[25][0] + coeff0_26*dmats0[26][0] + coeff0_27*dmats0[27][0] + coeff0_28*dmats0[28][0] + coeff0_29*dmats0[29][0] + coeff0_30*dmats0[30][0] + coeff0_31*dmats0[31][0] + coeff0_32*dmats0[32][0] + coeff0_33*dmats0[33][0] + coeff0_34*dmats0[34][0];
          new_coeff0_1 = coeff0_0*dmats0[0][1] + coeff0_1*dmats0[1][1] + coeff0_2*dmats0[2][1] + coeff0_3*dmats0[3][1] + coeff0_4*dmats0[4][1] + coeff0_5*dmats0[5][1] + coeff0_6*dmats0[6][1] + coeff0_7*dmats0[7][1] + coeff0_8*dmats0[8][1] + coeff0_9*dmats0[9][1] + coeff0_10*dmats0[10][1] + coeff0_11*dmats0[11][1] + coeff0_12*dmats0[12][1] + coeff0_13*dmats0[13][1] + coeff0_14*dmats0[14][1] + coeff0_15*dmats0[15][1] + coeff0_16*dmats0[16][1] + coeff0_17*dmats0[17][1] + coeff0_18*dmats0[18][1] + coeff0_19*dmats0[19][1] + coeff0_20*dmats0[20][1] + coeff0_21*dmats0[21][1] + coeff0_22*dmats0[22][1] + coeff0_23*dmats0[23][1] + coeff0_24*dmats0[24][1] + coeff0_25*dmats0[25][1] + coeff0_26*dmats0[26][1] + coeff0_27*dmats0[27][1] + coeff0_28*dmats0[28][1] + coeff0_29*dmats0[29][1] + coeff0_30*dmats0[30][1] + coeff0_31*dmats0[31][1] + coeff0_32*dmats0[32][1] + coeff0_33*dmats0[33][1] + coeff0_34*dmats0[34][1];
          new_coeff0_2 = coeff0_0*dmats0[0][2] + coeff0_1*dmats0[1][2] + coeff0_2*dmats0[2][2] + coeff0_3*dmats0[3][2] + coeff0_4*dmats0[4][2] + coeff0_5*dmats0[5][2] + coeff0_6*dmats0[6][2] + coeff0_7*dmats0[7][2] + coeff0_8*dmats0[8][2] + coeff0_9*dmats0[9][2] + coeff0_10*dmats0[10][2] + coeff0_11*dmats0[11][2] + coeff0_12*dmats0[12][2] + coeff0_13*dmats0[13][2] + coeff0_14*dmats0[14][2] + coeff0_15*dmats0[15][2] + coeff0_16*dmats0[16][2] + coeff0_17*dmats0[17][2] + coeff0_18*dmats0[18][2] + coeff0_19*dmats0[19][2] + coeff0_20*dmats0[20][2] + coeff0_21*dmats0[21][2] + coeff0_22*dmats0[22][2] + coeff0_23*dmats0[23][2] + coeff0_24*dmats0[24][2] + coeff0_25*dmats0[25][2] + coeff0_26*dmats0[26][2] + coeff0_27*dmats0[27][2] + coeff0_28*dmats0[28][2] + coeff0_29*dmats0[29][2] + coeff0_30*dmats0[30][2] + coeff0_31*dmats0[31][2] + coeff0_32*dmats0[32][2] + coeff0_33*dmats0[33][2] + coeff0_34*dmats0[34][2];
          new_coeff0_3 = coeff0_0*dmats0[0][3] + coeff0_1*dmats0[1][3] + coeff0_2*dmats0[2][3] + coeff0_3*dmats0[3][3] + coeff0_4*dmats0[4][3] + coeff0_5*dmats0[5][3] + coeff0_6*dmats0[6][3] + coeff0_7*dmats0[7][3] + coeff0_8*dmats0[8][3] + coeff0_9*dmats0[9][3] + coeff0_10*dmats0[10][3] + coeff0_11*dmats0[11][3] + coeff0_12*dmats0[12][3] + coeff0_13*dmats0[13][3] + coeff0_14*dmats0[14][3] + coeff0_15*dmats0[15][3] + coeff0_16*dmats0[16][3] + coeff0_17*dmats0[17][3] + coeff0_18*dmats0[18][3] + coeff0_19*dmats0[19][3] + coeff0_20*dmats0[20][3] + coeff0_21*dmats0[21][3] + coeff0_22*dmats0[22][3] + coeff0_23*dmats0[23][3] + coeff0_24*dmats0[24][3] + coeff0_25*dmats0[25][3] + coeff0_26*dmats0[26][3] + coeff0_27*dmats0[27][3] + coeff0_28*dmats0[28][3] + coeff0_29*dmats0[29][3] + coeff0_30*dmats0[30][3] + coeff0_31*dmats0[31][3] + coeff0_32*dmats0[32][3] + coeff0_33*dmats0[33][3] + coeff0_34*dmats0[34][3];
          new_coeff0_4 = coeff0_0*dmats0[0][4] + coeff0_1*dmats0[1][4] + coeff0_2*dmats0[2][4] + coeff0_3*dmats0[3][4] + coeff0_4*dmats0[4][4] + coeff0_5*dmats0[5][4] + coeff0_6*dmats0[6][4] + coeff0_7*dmats0[7][4] + coeff0_8*dmats0[8][4] + coeff0_9*dmats0[9][4] + coeff0_10*dmats0[10][4] + coeff0_11*dmats0[11][4] + coeff0_12*dmats0[12][4] + coeff0_13*dmats0[13][4] + coeff0_14*dmats0[14][4] + coeff0_15*dmats0[15][4] + coeff0_16*dmats0[16][4] + coeff0_17*dmats0[17][4] + coeff0_18*dmats0[18][4] + coeff0_19*dmats0[19][4] + coeff0_20*dmats0[20][4] + coeff0_21*dmats0[21][4] + coeff0_22*dmats0[22][4] + coeff0_23*dmats0[23][4] + coeff0_24*dmats0[24][4] + coeff0_25*dmats0[25][4] + coeff0_26*dmats0[26][4] + coeff0_27*dmats0[27][4] + coeff0_28*dmats0[28][4] + coeff0_29*dmats0[29][4] + coeff0_30*dmats0[30][4] + coeff0_31*dmats0[31][4] + coeff0_32*dmats0[32][4] + coeff0_33*dmats0[33][4] + coeff0_34*dmats0[34][4];
          new_coeff0_5 = coeff0_0*dmats0[0][5] + coeff0_1*dmats0[1][5] + coeff0_2*dmats0[2][5] + coeff0_3*dmats0[3][5] + coeff0_4*dmats0[4][5] + coeff0_5*dmats0[5][5] + coeff0_6*dmats0[6][5] + coeff0_7*dmats0[7][5] + coeff0_8*dmats0[8][5] + coeff0_9*dmats0[9][5] + coeff0_10*dmats0[10][5] + coeff0_11*dmats0[11][5] + coeff0_12*dmats0[12][5] + coeff0_13*dmats0[13][5] + coeff0_14*dmats0[14][5] + coeff0_15*dmats0[15][5] + coeff0_16*dmats0[16][5] + coeff0_17*dmats0[17][5] + coeff0_18*dmats0[18][5] + coeff0_19*dmats0[19][5] + coeff0_20*dmats0[20][5] + coeff0_21*dmats0[21][5] + coeff0_22*dmats0[22][5] + coeff0_23*dmats0[23][5] + coeff0_24*dmats0[24][5] + coeff0_25*dmats0[25][5] + coeff0_26*dmats0[26][5] + coeff0_27*dmats0[27][5] + coeff0_28*dmats0[28][5] + coeff0_29*dmats0[29][5] + coeff0_30*dmats0[30][5] + coeff0_31*dmats0[31][5] + coeff0_32*dmats0[32][5] + coeff0_33*dmats0[33][5] + coeff0_34*dmats0[34][5];
          new_coeff0_6 = coeff0_0*dmats0[0][6] + coeff0_1*dmats0[1][6] + coeff0_2*dmats0[2][6] + coeff0_3*dmats0[3][6] + coeff0_4*dmats0[4][6] + coeff0_5*dmats0[5][6] + coeff0_6*dmats0[6][6] + coeff0_7*dmats0[7][6] + coeff0_8*dmats0[8][6] + coeff0_9*dmats0[9][6] + coeff0_10*dmats0[10][6] + coeff0_11*dmats0[11][6] + coeff0_12*dmats0[12][6] + coeff0_13*dmats0[13][6] + coeff0_14*dmats0[14][6] + coeff0_15*dmats0[15][6] + coeff0_16*dmats0[16][6] + coeff0_17*dmats0[17][6] + coeff0_18*dmats0[18][6] + coeff0_19*dmats0[19][6] + coeff0_20*dmats0[20][6] + coeff0_21*dmats0[21][6] + coeff0_22*dmats0[22][6] + coeff0_23*dmats0[23][6] + coeff0_24*dmats0[24][6] + coeff0_25*dmats0[25][6] + coeff0_26*dmats0[26][6] + coeff0_27*dmats0[27][6] + coeff0_28*dmats0[28][6] + coeff0_29*dmats0[29][6] + coeff0_30*dmats0[30][6] + coeff0_31*dmats0[31][6] + coeff0_32*dmats0[32][6] + coeff0_33*dmats0[33][6] + coeff0_34*dmats0[34][6];
          new_coeff0_7 = coeff0_0*dmats0[0][7] + coeff0_1*dmats0[1][7] + coeff0_2*dmats0[2][7] + coeff0_3*dmats0[3][7] + coeff0_4*dmats0[4][7] + coeff0_5*dmats0[5][7] + coeff0_6*dmats0[6][7] + coeff0_7*dmats0[7][7] + coeff0_8*dmats0[8][7] + coeff0_9*dmats0[9][7] + coeff0_10*dmats0[10][7] + coeff0_11*dmats0[11][7] + coeff0_12*dmats0[12][7] + coeff0_13*dmats0[13][7] + coeff0_14*dmats0[14][7] + coeff0_15*dmats0[15][7] + coeff0_16*dmats0[16][7] + coeff0_17*dmats0[17][7] + coeff0_18*dmats0[18][7] + coeff0_19*dmats0[19][7] + coeff0_20*dmats0[20][7] + coeff0_21*dmats0[21][7] + coeff0_22*dmats0[22][7] + coeff0_23*dmats0[23][7] + coeff0_24*dmats0[24][7] + coeff0_25*dmats0[25][7] + coeff0_26*dmats0[26][7] + coeff0_27*dmats0[27][7] + coeff0_28*dmats0[28][7] + coeff0_29*dmats0[29][7] + coeff0_30*dmats0[30][7] + coeff0_31*dmats0[31][7] + coeff0_32*dmats0[32][7] + coeff0_33*dmats0[33][7] + coeff0_34*dmats0[34][7];
          new_coeff0_8 = coeff0_0*dmats0[0][8] + coeff0_1*dmats0[1][8] + coeff0_2*dmats0[2][8] + coeff0_3*dmats0[3][8] + coeff0_4*dmats0[4][8] + coeff0_5*dmats0[5][8] + coeff0_6*dmats0[6][8] + coeff0_7*dmats0[7][8] + coeff0_8*dmats0[8][8] + coeff0_9*dmats0[9][8] + coeff0_10*dmats0[10][8] + coeff0_11*dmats0[11][8] + coeff0_12*dmats0[12][8] + coeff0_13*dmats0[13][8] + coeff0_14*dmats0[14][8] + coeff0_15*dmats0[15][8] + coeff0_16*dmats0[16][8] + coeff0_17*dmats0[17][8] + coeff0_18*dmats0[18][8] + coeff0_19*dmats0[19][8] + coeff0_20*dmats0[20][8] + coeff0_21*dmats0[21][8] + coeff0_22*dmats0[22][8] + coeff0_23*dmats0[23][8] + coeff0_24*dmats0[24][8] + coeff0_25*dmats0[25][8] + coeff0_26*dmats0[26][8] + coeff0_27*dmats0[27][8] + coeff0_28*dmats0[28][8] + coeff0_29*dmats0[29][8] + coeff0_30*dmats0[30][8] + coeff0_31*dmats0[31][8] + coeff0_32*dmats0[32][8] + coeff0_33*dmats0[33][8] + coeff0_34*dmats0[34][8];
          new_coeff0_9 = coeff0_0*dmats0[0][9] + coeff0_1*dmats0[1][9] + coeff0_2*dmats0[2][9] + coeff0_3*dmats0[3][9] + coeff0_4*dmats0[4][9] + coeff0_5*dmats0[5][9] + coeff0_6*dmats0[6][9] + coeff0_7*dmats0[7][9] + coeff0_8*dmats0[8][9] + coeff0_9*dmats0[9][9] + coeff0_10*dmats0[10][9] + coeff0_11*dmats0[11][9] + coeff0_12*dmats0[12][9] + coeff0_13*dmats0[13][9] + coeff0_14*dmats0[14][9] + coeff0_15*dmats0[15][9] + coeff0_16*dmats0[16][9] + coeff0_17*dmats0[17][9] + coeff0_18*dmats0[18][9] + coeff0_19*dmats0[19][9] + coeff0_20*dmats0[20][9] + coeff0_21*dmats0[21][9] + coeff0_22*dmats0[22][9] + coeff0_23*dmats0[23][9] + coeff0_24*dmats0[24][9] + coeff0_25*dmats0[25][9] + coeff0_26*dmats0[26][9] + coeff0_27*dmats0[27][9] + coeff0_28*dmats0[28][9] + coeff0_29*dmats0[29][9] + coeff0_30*dmats0[30][9] + coeff0_31*dmats0[31][9] + coeff0_32*dmats0[32][9] + coeff0_33*dmats0[33][9] + coeff0_34*dmats0[34][9];
          new_coeff0_10 = coeff0_0*dmats0[0][10] + coeff0_1*dmats0[1][10] + coeff0_2*dmats0[2][10] + coeff0_3*dmats0[3][10] + coeff0_4*dmats0[4][10] + coeff0_5*dmats0[5][10] + coeff0_6*dmats0[6][10] + coeff0_7*dmats0[7][10] + coeff0_8*dmats0[8][10] + coeff0_9*dmats0[9][10] + coeff0_10*dmats0[10][10] + coeff0_11*dmats0[11][10] + coeff0_12*dmats0[12][10] + coeff0_13*dmats0[13][10] + coeff0_14*dmats0[14][10] + coeff0_15*dmats0[15][10] + coeff0_16*dmats0[16][10] + coeff0_17*dmats0[17][10] + coeff0_18*dmats0[18][10] + coeff0_19*dmats0[19][10] + coeff0_20*dmats0[20][10] + coeff0_21*dmats0[21][10] + coeff0_22*dmats0[22][10] + coeff0_23*dmats0[23][10] + coeff0_24*dmats0[24][10] + coeff0_25*dmats0[25][10] + coeff0_26*dmats0[26][10] + coeff0_27*dmats0[27][10] + coeff0_28*dmats0[28][10] + coeff0_29*dmats0[29][10] + coeff0_30*dmats0[30][10] + coeff0_31*dmats0[31][10] + coeff0_32*dmats0[32][10] + coeff0_33*dmats0[33][10] + coeff0_34*dmats0[34][10];
          new_coeff0_11 = coeff0_0*dmats0[0][11] + coeff0_1*dmats0[1][11] + coeff0_2*dmats0[2][11] + coeff0_3*dmats0[3][11] + coeff0_4*dmats0[4][11] + coeff0_5*dmats0[5][11] + coeff0_6*dmats0[6][11] + coeff0_7*dmats0[7][11] + coeff0_8*dmats0[8][11] + coeff0_9*dmats0[9][11] + coeff0_10*dmats0[10][11] + coeff0_11*dmats0[11][11] + coeff0_12*dmats0[12][11] + coeff0_13*dmats0[13][11] + coeff0_14*dmats0[14][11] + coeff0_15*dmats0[15][11] + coeff0_16*dmats0[16][11] + coeff0_17*dmats0[17][11] + coeff0_18*dmats0[18][11] + coeff0_19*dmats0[19][11] + coeff0_20*dmats0[20][11] + coeff0_21*dmats0[21][11] + coeff0_22*dmats0[22][11] + coeff0_23*dmats0[23][11] + coeff0_24*dmats0[24][11] + coeff0_25*dmats0[25][11] + coeff0_26*dmats0[26][11] + coeff0_27*dmats0[27][11] + coeff0_28*dmats0[28][11] + coeff0_29*dmats0[29][11] + coeff0_30*dmats0[30][11] + coeff0_31*dmats0[31][11] + coeff0_32*dmats0[32][11] + coeff0_33*dmats0[33][11] + coeff0_34*dmats0[34][11];
          new_coeff0_12 = coeff0_0*dmats0[0][12] + coeff0_1*dmats0[1][12] + coeff0_2*dmats0[2][12] + coeff0_3*dmats0[3][12] + coeff0_4*dmats0[4][12] + coeff0_5*dmats0[5][12] + coeff0_6*dmats0[6][12] + coeff0_7*dmats0[7][12] + coeff0_8*dmats0[8][12] + coeff0_9*dmats0[9][12] + coeff0_10*dmats0[10][12] + coeff0_11*dmats0[11][12] + coeff0_12*dmats0[12][12] + coeff0_13*dmats0[13][12] + coeff0_14*dmats0[14][12] + coeff0_15*dmats0[15][12] + coeff0_16*dmats0[16][12] + coeff0_17*dmats0[17][12] + coeff0_18*dmats0[18][12] + coeff0_19*dmats0[19][12] + coeff0_20*dmats0[20][12] + coeff0_21*dmats0[21][12] + coeff0_22*dmats0[22][12] + coeff0_23*dmats0[23][12] + coeff0_24*dmats0[24][12] + coeff0_25*dmats0[25][12] + coeff0_26*dmats0[26][12] + coeff0_27*dmats0[27][12] + coeff0_28*dmats0[28][12] + coeff0_29*dmats0[29][12] + coeff0_30*dmats0[30][12] + coeff0_31*dmats0[31][12] + coeff0_32*dmats0[32][12] + coeff0_33*dmats0[33][12] + coeff0_34*dmats0[34][12];
          new_coeff0_13 = coeff0_0*dmats0[0][13] + coeff0_1*dmats0[1][13] + coeff0_2*dmats0[2][13] + coeff0_3*dmats0[3][13] + coeff0_4*dmats0[4][13] + coeff0_5*dmats0[5][13] + coeff0_6*dmats0[6][13] + coeff0_7*dmats0[7][13] + coeff0_8*dmats0[8][13] + coeff0_9*dmats0[9][13] + coeff0_10*dmats0[10][13] + coeff0_11*dmats0[11][13] + coeff0_12*dmats0[12][13] + coeff0_13*dmats0[13][13] + coeff0_14*dmats0[14][13] + coeff0_15*dmats0[15][13] + coeff0_16*dmats0[16][13] + coeff0_17*dmats0[17][13] + coeff0_18*dmats0[18][13] + coeff0_19*dmats0[19][13] + coeff0_20*dmats0[20][13] + coeff0_21*dmats0[21][13] + coeff0_22*dmats0[22][13] + coeff0_23*dmats0[23][13] + coeff0_24*dmats0[24][13] + coeff0_25*dmats0[25][13] + coeff0_26*dmats0[26][13] + coeff0_27*dmats0[27][13] + coeff0_28*dmats0[28][13] + coeff0_29*dmats0[29][13] + coeff0_30*dmats0[30][13] + coeff0_31*dmats0[31][13] + coeff0_32*dmats0[32][13] + coeff0_33*dmats0[33][13] + coeff0_34*dmats0[34][13];
          new_coeff0_14 = coeff0_0*dmats0[0][14] + coeff0_1*dmats0[1][14] + coeff0_2*dmats0[2][14] + coeff0_3*dmats0[3][14] + coeff0_4*dmats0[4][14] + coeff0_5*dmats0[5][14] + coeff0_6*dmats0[6][14] + coeff0_7*dmats0[7][14] + coeff0_8*dmats0[8][14] + coeff0_9*dmats0[9][14] + coeff0_10*dmats0[10][14] + coeff0_11*dmats0[11][14] + coeff0_12*dmats0[12][14] + coeff0_13*dmats0[13][14] + coeff0_14*dmats0[14][14] + coeff0_15*dmats0[15][14] + coeff0_16*dmats0[16][14] + coeff0_17*dmats0[17][14] + coeff0_18*dmats0[18][14] + coeff0_19*dmats0[19][14] + coeff0_20*dmats0[20][14] + coeff0_21*dmats0[21][14] + coeff0_22*dmats0[22][14] + coeff0_23*dmats0[23][14] + coeff0_24*dmats0[24][14] + coeff0_25*dmats0[25][14] + coeff0_26*dmats0[26][14] + coeff0_27*dmats0[27][14] + coeff0_28*dmats0[28][14] + coeff0_29*dmats0[29][14] + coeff0_30*dmats0[30][14] + coeff0_31*dmats0[31][14] + coeff0_32*dmats0[32][14] + coeff0_33*dmats0[33][14] + coeff0_34*dmats0[34][14];
          new_coeff0_15 = coeff0_0*dmats0[0][15] + coeff0_1*dmats0[1][15] + coeff0_2*dmats0[2][15] + coeff0_3*dmats0[3][15] + coeff0_4*dmats0[4][15] + coeff0_5*dmats0[5][15] + coeff0_6*dmats0[6][15] + coeff0_7*dmats0[7][15] + coeff0_8*dmats0[8][15] + coeff0_9*dmats0[9][15] + coeff0_10*dmats0[10][15] + coeff0_11*dmats0[11][15] + coeff0_12*dmats0[12][15] + coeff0_13*dmats0[13][15] + coeff0_14*dmats0[14][15] + coeff0_15*dmats0[15][15] + coeff0_16*dmats0[16][15] + coeff0_17*dmats0[17][15] + coeff0_18*dmats0[18][15] + coeff0_19*dmats0[19][15] + coeff0_20*dmats0[20][15] + coeff0_21*dmats0[21][15] + coeff0_22*dmats0[22][15] + coeff0_23*dmats0[23][15] + coeff0_24*dmats0[24][15] + coeff0_25*dmats0[25][15] + coeff0_26*dmats0[26][15] + coeff0_27*dmats0[27][15] + coeff0_28*dmats0[28][15] + coeff0_29*dmats0[29][15] + coeff0_30*dmats0[30][15] + coeff0_31*dmats0[31][15] + coeff0_32*dmats0[32][15] + coeff0_33*dmats0[33][15] + coeff0_34*dmats0[34][15];
          new_coeff0_16 = coeff0_0*dmats0[0][16] + coeff0_1*dmats0[1][16] + coeff0_2*dmats0[2][16] + coeff0_3*dmats0[3][16] + coeff0_4*dmats0[4][16] + coeff0_5*dmats0[5][16] + coeff0_6*dmats0[6][16] + coeff0_7*dmats0[7][16] + coeff0_8*dmats0[8][16] + coeff0_9*dmats0[9][16] + coeff0_10*dmats0[10][16] + coeff0_11*dmats0[11][16] + coeff0_12*dmats0[12][16] + coeff0_13*dmats0[13][16] + coeff0_14*dmats0[14][16] + coeff0_15*dmats0[15][16] + coeff0_16*dmats0[16][16] + coeff0_17*dmats0[17][16] + coeff0_18*dmats0[18][16] + coeff0_19*dmats0[19][16] + coeff0_20*dmats0[20][16] + coeff0_21*dmats0[21][16] + coeff0_22*dmats0[22][16] + coeff0_23*dmats0[23][16] + coeff0_24*dmats0[24][16] + coeff0_25*dmats0[25][16] + coeff0_26*dmats0[26][16] + coeff0_27*dmats0[27][16] + coeff0_28*dmats0[28][16] + coeff0_29*dmats0[29][16] + coeff0_30*dmats0[30][16] + coeff0_31*dmats0[31][16] + coeff0_32*dmats0[32][16] + coeff0_33*dmats0[33][16] + coeff0_34*dmats0[34][16];
          new_coeff0_17 = coeff0_0*dmats0[0][17] + coeff0_1*dmats0[1][17] + coeff0_2*dmats0[2][17] + coeff0_3*dmats0[3][17] + coeff0_4*dmats0[4][17] + coeff0_5*dmats0[5][17] + coeff0_6*dmats0[6][17] + coeff0_7*dmats0[7][17] + coeff0_8*dmats0[8][17] + coeff0_9*dmats0[9][17] + coeff0_10*dmats0[10][17] + coeff0_11*dmats0[11][17] + coeff0_12*dmats0[12][17] + coeff0_13*dmats0[13][17] + coeff0_14*dmats0[14][17] + coeff0_15*dmats0[15][17] + coeff0_16*dmats0[16][17] + coeff0_17*dmats0[17][17] + coeff0_18*dmats0[18][17] + coeff0_19*dmats0[19][17] + coeff0_20*dmats0[20][17] + coeff0_21*dmats0[21][17] + coeff0_22*dmats0[22][17] + coeff0_23*dmats0[23][17] + coeff0_24*dmats0[24][17] + coeff0_25*dmats0[25][17] + coeff0_26*dmats0[26][17] + coeff0_27*dmats0[27][17] + coeff0_28*dmats0[28][17] + coeff0_29*dmats0[29][17] + coeff0_30*dmats0[30][17] + coeff0_31*dmats0[31][17] + coeff0_32*dmats0[32][17] + coeff0_33*dmats0[33][17] + coeff0_34*dmats0[34][17];
          new_coeff0_18 = coeff0_0*dmats0[0][18] + coeff0_1*dmats0[1][18] + coeff0_2*dmats0[2][18] + coeff0_3*dmats0[3][18] + coeff0_4*dmats0[4][18] + coeff0_5*dmats0[5][18] + coeff0_6*dmats0[6][18] + coeff0_7*dmats0[7][18] + coeff0_8*dmats0[8][18] + coeff0_9*dmats0[9][18] + coeff0_10*dmats0[10][18] + coeff0_11*dmats0[11][18] + coeff0_12*dmats0[12][18] + coeff0_13*dmats0[13][18] + coeff0_14*dmats0[14][18] + coeff0_15*dmats0[15][18] + coeff0_16*dmats0[16][18] + coeff0_17*dmats0[17][18] + coeff0_18*dmats0[18][18] + coeff0_19*dmats0[19][18] + coeff0_20*dmats0[20][18] + coeff0_21*dmats0[21][18] + coeff0_22*dmats0[22][18] + coeff0_23*dmats0[23][18] + coeff0_24*dmats0[24][18] + coeff0_25*dmats0[25][18] + coeff0_26*dmats0[26][18] + coeff0_27*dmats0[27][18] + coeff0_28*dmats0[28][18] + coeff0_29*dmats0[29][18] + coeff0_30*dmats0[30][18] + coeff0_31*dmats0[31][18] + coeff0_32*dmats0[32][18] + coeff0_33*dmats0[33][18] + coeff0_34*dmats0[34][18];
          new_coeff0_19 = coeff0_0*dmats0[0][19] + coeff0_1*dmats0[1][19] + coeff0_2*dmats0[2][19] + coeff0_3*dmats0[3][19] + coeff0_4*dmats0[4][19] + coeff0_5*dmats0[5][19] + coeff0_6*dmats0[6][19] + coeff0_7*dmats0[7][19] + coeff0_8*dmats0[8][19] + coeff0_9*dmats0[9][19] + coeff0_10*dmats0[10][19] + coeff0_11*dmats0[11][19] + coeff0_12*dmats0[12][19] + coeff0_13*dmats0[13][19] + coeff0_14*dmats0[14][19] + coeff0_15*dmats0[15][19] + coeff0_16*dmats0[16][19] + coeff0_17*dmats0[17][19] + coeff0_18*dmats0[18][19] + coeff0_19*dmats0[19][19] + coeff0_20*dmats0[20][19] + coeff0_21*dmats0[21][19] + coeff0_22*dmats0[22][19] + coeff0_23*dmats0[23][19] + coeff0_24*dmats0[24][19] + coeff0_25*dmats0[25][19] + coeff0_26*dmats0[26][19] + coeff0_27*dmats0[27][19] + coeff0_28*dmats0[28][19] + coeff0_29*dmats0[29][19] + coeff0_30*dmats0[30][19] + coeff0_31*dmats0[31][19] + coeff0_32*dmats0[32][19] + coeff0_33*dmats0[33][19] + coeff0_34*dmats0[34][19];
          new_coeff0_20 = coeff0_0*dmats0[0][20] + coeff0_1*dmats0[1][20] + coeff0_2*dmats0[2][20] + coeff0_3*dmats0[3][20] + coeff0_4*dmats0[4][20] + coeff0_5*dmats0[5][20] + coeff0_6*dmats0[6][20] + coeff0_7*dmats0[7][20] + coeff0_8*dmats0[8][20] + coeff0_9*dmats0[9][20] + coeff0_10*dmats0[10][20] + coeff0_11*dmats0[11][20] + coeff0_12*dmats0[12][20] + coeff0_13*dmats0[13][20] + coeff0_14*dmats0[14][20] + coeff0_15*dmats0[15][20] + coeff0_16*dmats0[16][20] + coeff0_17*dmats0[17][20] + coeff0_18*dmats0[18][20] + coeff0_19*dmats0[19][20] + coeff0_20*dmats0[20][20] + coeff0_21*dmats0[21][20] + coeff0_22*dmats0[22][20] + coeff0_23*dmats0[23][20] + coeff0_24*dmats0[24][20] + coeff0_25*dmats0[25][20] + coeff0_26*dmats0[26][20] + coeff0_27*dmats0[27][20] + coeff0_28*dmats0[28][20] + coeff0_29*dmats0[29][20] + coeff0_30*dmats0[30][20] + coeff0_31*dmats0[31][20] + coeff0_32*dmats0[32][20] + coeff0_33*dmats0[33][20] + coeff0_34*dmats0[34][20];
          new_coeff0_21 = coeff0_0*dmats0[0][21] + coeff0_1*dmats0[1][21] + coeff0_2*dmats0[2][21] + coeff0_3*dmats0[3][21] + coeff0_4*dmats0[4][21] + coeff0_5*dmats0[5][21] + coeff0_6*dmats0[6][21] + coeff0_7*dmats0[7][21] + coeff0_8*dmats0[8][21] + coeff0_9*dmats0[9][21] + coeff0_10*dmats0[10][21] + coeff0_11*dmats0[11][21] + coeff0_12*dmats0[12][21] + coeff0_13*dmats0[13][21] + coeff0_14*dmats0[14][21] + coeff0_15*dmats0[15][21] + coeff0_16*dmats0[16][21] + coeff0_17*dmats0[17][21] + coeff0_18*dmats0[18][21] + coeff0_19*dmats0[19][21] + coeff0_20*dmats0[20][21] + coeff0_21*dmats0[21][21] + coeff0_22*dmats0[22][21] + coeff0_23*dmats0[23][21] + coeff0_24*dmats0[24][21] + coeff0_25*dmats0[25][21] + coeff0_26*dmats0[26][21] + coeff0_27*dmats0[27][21] + coeff0_28*dmats0[28][21] + coeff0_29*dmats0[29][21] + coeff0_30*dmats0[30][21] + coeff0_31*dmats0[31][21] + coeff0_32*dmats0[32][21] + coeff0_33*dmats0[33][21] + coeff0_34*dmats0[34][21];
          new_coeff0_22 = coeff0_0*dmats0[0][22] + coeff0_1*dmats0[1][22] + coeff0_2*dmats0[2][22] + coeff0_3*dmats0[3][22] + coeff0_4*dmats0[4][22] + coeff0_5*dmats0[5][22] + coeff0_6*dmats0[6][22] + coeff0_7*dmats0[7][22] + coeff0_8*dmats0[8][22] + coeff0_9*dmats0[9][22] + coeff0_10*dmats0[10][22] + coeff0_11*dmats0[11][22] + coeff0_12*dmats0[12][22] + coeff0_13*dmats0[13][22] + coeff0_14*dmats0[14][22] + coeff0_15*dmats0[15][22] + coeff0_16*dmats0[16][22] + coeff0_17*dmats0[17][22] + coeff0_18*dmats0[18][22] + coeff0_19*dmats0[19][22] + coeff0_20*dmats0[20][22] + coeff0_21*dmats0[21][22] + coeff0_22*dmats0[22][22] + coeff0_23*dmats0[23][22] + coeff0_24*dmats0[24][22] + coeff0_25*dmats0[25][22] + coeff0_26*dmats0[26][22] + coeff0_27*dmats0[27][22] + coeff0_28*dmats0[28][22] + coeff0_29*dmats0[29][22] + coeff0_30*dmats0[30][22] + coeff0_31*dmats0[31][22] + coeff0_32*dmats0[32][22] + coeff0_33*dmats0[33][22] + coeff0_34*dmats0[34][22];
          new_coeff0_23 = coeff0_0*dmats0[0][23] + coeff0_1*dmats0[1][23] + coeff0_2*dmats0[2][23] + coeff0_3*dmats0[3][23] + coeff0_4*dmats0[4][23] + coeff0_5*dmats0[5][23] + coeff0_6*dmats0[6][23] + coeff0_7*dmats0[7][23] + coeff0_8*dmats0[8][23] + coeff0_9*dmats0[9][23] + coeff0_10*dmats0[10][23] + coeff0_11*dmats0[11][23] + coeff0_12*dmats0[12][23] + coeff0_13*dmats0[13][23] + coeff0_14*dmats0[14][23] + coeff0_15*dmats0[15][23] + coeff0_16*dmats0[16][23] + coeff0_17*dmats0[17][23] + coeff0_18*dmats0[18][23] + coeff0_19*dmats0[19][23] + coeff0_20*dmats0[20][23] + coeff0_21*dmats0[21][23] + coeff0_22*dmats0[22][23] + coeff0_23*dmats0[23][23] + coeff0_24*dmats0[24][23] + coeff0_25*dmats0[25][23] + coeff0_26*dmats0[26][23] + coeff0_27*dmats0[27][23] + coeff0_28*dmats0[28][23] + coeff0_29*dmats0[29][23] + coeff0_30*dmats0[30][23] + coeff0_31*dmats0[31][23] + coeff0_32*dmats0[32][23] + coeff0_33*dmats0[33][23] + coeff0_34*dmats0[34][23];
          new_coeff0_24 = coeff0_0*dmats0[0][24] + coeff0_1*dmats0[1][24] + coeff0_2*dmats0[2][24] + coeff0_3*dmats0[3][24] + coeff0_4*dmats0[4][24] + coeff0_5*dmats0[5][24] + coeff0_6*dmats0[6][24] + coeff0_7*dmats0[7][24] + coeff0_8*dmats0[8][24] + coeff0_9*dmats0[9][24] + coeff0_10*dmats0[10][24] + coeff0_11*dmats0[11][24] + coeff0_12*dmats0[12][24] + coeff0_13*dmats0[13][24] + coeff0_14*dmats0[14][24] + coeff0_15*dmats0[15][24] + coeff0_16*dmats0[16][24] + coeff0_17*dmats0[17][24] + coeff0_18*dmats0[18][24] + coeff0_19*dmats0[19][24] + coeff0_20*dmats0[20][24] + coeff0_21*dmats0[21][24] + coeff0_22*dmats0[22][24] + coeff0_23*dmats0[23][24] + coeff0_24*dmats0[24][24] + coeff0_25*dmats0[25][24] + coeff0_26*dmats0[26][24] + coeff0_27*dmats0[27][24] + coeff0_28*dmats0[28][24] + coeff0_29*dmats0[29][24] + coeff0_30*dmats0[30][24] + coeff0_31*dmats0[31][24] + coeff0_32*dmats0[32][24] + coeff0_33*dmats0[33][24] + coeff0_34*dmats0[34][24];
          new_coeff0_25 = coeff0_0*dmats0[0][25] + coeff0_1*dmats0[1][25] + coeff0_2*dmats0[2][25] + coeff0_3*dmats0[3][25] + coeff0_4*dmats0[4][25] + coeff0_5*dmats0[5][25] + coeff0_6*dmats0[6][25] + coeff0_7*dmats0[7][25] + coeff0_8*dmats0[8][25] + coeff0_9*dmats0[9][25] + coeff0_10*dmats0[10][25] + coeff0_11*dmats0[11][25] + coeff0_12*dmats0[12][25] + coeff0_13*dmats0[13][25] + coeff0_14*dmats0[14][25] + coeff0_15*dmats0[15][25] + coeff0_16*dmats0[16][25] + coeff0_17*dmats0[17][25] + coeff0_18*dmats0[18][25] + coeff0_19*dmats0[19][25] + coeff0_20*dmats0[20][25] + coeff0_21*dmats0[21][25] + coeff0_22*dmats0[22][25] + coeff0_23*dmats0[23][25] + coeff0_24*dmats0[24][25] + coeff0_25*dmats0[25][25] + coeff0_26*dmats0[26][25] + coeff0_27*dmats0[27][25] + coeff0_28*dmats0[28][25] + coeff0_29*dmats0[29][25] + coeff0_30*dmats0[30][25] + coeff0_31*dmats0[31][25] + coeff0_32*dmats0[32][25] + coeff0_33*dmats0[33][25] + coeff0_34*dmats0[34][25];
          new_coeff0_26 = coeff0_0*dmats0[0][26] + coeff0_1*dmats0[1][26] + coeff0_2*dmats0[2][26] + coeff0_3*dmats0[3][26] + coeff0_4*dmats0[4][26] + coeff0_5*dmats0[5][26] + coeff0_6*dmats0[6][26] + coeff0_7*dmats0[7][26] + coeff0_8*dmats0[8][26] + coeff0_9*dmats0[9][26] + coeff0_10*dmats0[10][26] + coeff0_11*dmats0[11][26] + coeff0_12*dmats0[12][26] + coeff0_13*dmats0[13][26] + coeff0_14*dmats0[14][26] + coeff0_15*dmats0[15][26] + coeff0_16*dmats0[16][26] + coeff0_17*dmats0[17][26] + coeff0_18*dmats0[18][26] + coeff0_19*dmats0[19][26] + coeff0_20*dmats0[20][26] + coeff0_21*dmats0[21][26] + coeff0_22*dmats0[22][26] + coeff0_23*dmats0[23][26] + coeff0_24*dmats0[24][26] + coeff0_25*dmats0[25][26] + coeff0_26*dmats0[26][26] + coeff0_27*dmats0[27][26] + coeff0_28*dmats0[28][26] + coeff0_29*dmats0[29][26] + coeff0_30*dmats0[30][26] + coeff0_31*dmats0[31][26] + coeff0_32*dmats0[32][26] + coeff0_33*dmats0[33][26] + coeff0_34*dmats0[34][26];
          new_coeff0_27 = coeff0_0*dmats0[0][27] + coeff0_1*dmats0[1][27] + coeff0_2*dmats0[2][27] + coeff0_3*dmats0[3][27] + coeff0_4*dmats0[4][27] + coeff0_5*dmats0[5][27] + coeff0_6*dmats0[6][27] + coeff0_7*dmats0[7][27] + coeff0_8*dmats0[8][27] + coeff0_9*dmats0[9][27] + coeff0_10*dmats0[10][27] + coeff0_11*dmats0[11][27] + coeff0_12*dmats0[12][27] + coeff0_13*dmats0[13][27] + coeff0_14*dmats0[14][27] + coeff0_15*dmats0[15][27] + coeff0_16*dmats0[16][27] + coeff0_17*dmats0[17][27] + coeff0_18*dmats0[18][27] + coeff0_19*dmats0[19][27] + coeff0_20*dmats0[20][27] + coeff0_21*dmats0[21][27] + coeff0_22*dmats0[22][27] + coeff0_23*dmats0[23][27] + coeff0_24*dmats0[24][27] + coeff0_25*dmats0[25][27] + coeff0_26*dmats0[26][27] + coeff0_27*dmats0[27][27] + coeff0_28*dmats0[28][27] + coeff0_29*dmats0[29][27] + coeff0_30*dmats0[30][27] + coeff0_31*dmats0[31][27] + coeff0_32*dmats0[32][27] + coeff0_33*dmats0[33][27] + coeff0_34*dmats0[34][27];
          new_coeff0_28 = coeff0_0*dmats0[0][28] + coeff0_1*dmats0[1][28] + coeff0_2*dmats0[2][28] + coeff0_3*dmats0[3][28] + coeff0_4*dmats0[4][28] + coeff0_5*dmats0[5][28] + coeff0_6*dmats0[6][28] + coeff0_7*dmats0[7][28] + coeff0_8*dmats0[8][28] + coeff0_9*dmats0[9][28] + coeff0_10*dmats0[10][28] + coeff0_11*dmats0[11][28] + coeff0_12*dmats0[12][28] + coeff0_13*dmats0[13][28] + coeff0_14*dmats0[14][28] + coeff0_15*dmats0[15][28] + coeff0_16*dmats0[16][28] + coeff0_17*dmats0[17][28] + coeff0_18*dmats0[18][28] + coeff0_19*dmats0[19][28] + coeff0_20*dmats0[20][28] + coeff0_21*dmats0[21][28] + coeff0_22*dmats0[22][28] + coeff0_23*dmats0[23][28] + coeff0_24*dmats0[24][28] + coeff0_25*dmats0[25][28] + coeff0_26*dmats0[26][28] + coeff0_27*dmats0[27][28] + coeff0_28*dmats0[28][28] + coeff0_29*dmats0[29][28] + coeff0_30*dmats0[30][28] + coeff0_31*dmats0[31][28] + coeff0_32*dmats0[32][28] + coeff0_33*dmats0[33][28] + coeff0_34*dmats0[34][28];
          new_coeff0_29 = coeff0_0*dmats0[0][29] + coeff0_1*dmats0[1][29] + coeff0_2*dmats0[2][29] + coeff0_3*dmats0[3][29] + coeff0_4*dmats0[4][29] + coeff0_5*dmats0[5][29] + coeff0_6*dmats0[6][29] + coeff0_7*dmats0[7][29] + coeff0_8*dmats0[8][29] + coeff0_9*dmats0[9][29] + coeff0_10*dmats0[10][29] + coeff0_11*dmats0[11][29] + coeff0_12*dmats0[12][29] + coeff0_13*dmats0[13][29] + coeff0_14*dmats0[14][29] + coeff0_15*dmats0[15][29] + coeff0_16*dmats0[16][29] + coeff0_17*dmats0[17][29] + coeff0_18*dmats0[18][29] + coeff0_19*dmats0[19][29] + coeff0_20*dmats0[20][29] + coeff0_21*dmats0[21][29] + coeff0_22*dmats0[22][29] + coeff0_23*dmats0[23][29] + coeff0_24*dmats0[24][29] + coeff0_25*dmats0[25][29] + coeff0_26*dmats0[26][29] + coeff0_27*dmats0[27][29] + coeff0_28*dmats0[28][29] + coeff0_29*dmats0[29][29] + coeff0_30*dmats0[30][29] + coeff0_31*dmats0[31][29] + coeff0_32*dmats0[32][29] + coeff0_33*dmats0[33][29] + coeff0_34*dmats0[34][29];
          new_coeff0_30 = coeff0_0*dmats0[0][30] + coeff0_1*dmats0[1][30] + coeff0_2*dmats0[2][30] + coeff0_3*dmats0[3][30] + coeff0_4*dmats0[4][30] + coeff0_5*dmats0[5][30] + coeff0_6*dmats0[6][30] + coeff0_7*dmats0[7][30] + coeff0_8*dmats0[8][30] + coeff0_9*dmats0[9][30] + coeff0_10*dmats0[10][30] + coeff0_11*dmats0[11][30] + coeff0_12*dmats0[12][30] + coeff0_13*dmats0[13][30] + coeff0_14*dmats0[14][30] + coeff0_15*dmats0[15][30] + coeff0_16*dmats0[16][30] + coeff0_17*dmats0[17][30] + coeff0_18*dmats0[18][30] + coeff0_19*dmats0[19][30] + coeff0_20*dmats0[20][30] + coeff0_21*dmats0[21][30] + coeff0_22*dmats0[22][30] + coeff0_23*dmats0[23][30] + coeff0_24*dmats0[24][30] + coeff0_25*dmats0[25][30] + coeff0_26*dmats0[26][30] + coeff0_27*dmats0[27][30] + coeff0_28*dmats0[28][30] + coeff0_29*dmats0[29][30] + coeff0_30*dmats0[30][30] + coeff0_31*dmats0[31][30] + coeff0_32*dmats0[32][30] + coeff0_33*dmats0[33][30] + coeff0_34*dmats0[34][30];
          new_coeff0_31 = coeff0_0*dmats0[0][31] + coeff0_1*dmats0[1][31] + coeff0_2*dmats0[2][31] + coeff0_3*dmats0[3][31] + coeff0_4*dmats0[4][31] + coeff0_5*dmats0[5][31] + coeff0_6*dmats0[6][31] + coeff0_7*dmats0[7][31] + coeff0_8*dmats0[8][31] + coeff0_9*dmats0[9][31] + coeff0_10*dmats0[10][31] + coeff0_11*dmats0[11][31] + coeff0_12*dmats0[12][31] + coeff0_13*dmats0[13][31] + coeff0_14*dmats0[14][31] + coeff0_15*dmats0[15][31] + coeff0_16*dmats0[16][31] + coeff0_17*dmats0[17][31] + coeff0_18*dmats0[18][31] + coeff0_19*dmats0[19][31] + coeff0_20*dmats0[20][31] + coeff0_21*dmats0[21][31] + coeff0_22*dmats0[22][31] + coeff0_23*dmats0[23][31] + coeff0_24*dmats0[24][31] + coeff0_25*dmats0[25][31] + coeff0_26*dmats0[26][31] + coeff0_27*dmats0[27][31] + coeff0_28*dmats0[28][31] + coeff0_29*dmats0[29][31] + coeff0_30*dmats0[30][31] + coeff0_31*dmats0[31][31] + coeff0_32*dmats0[32][31] + coeff0_33*dmats0[33][31] + coeff0_34*dmats0[34][31];
          new_coeff0_32 = coeff0_0*dmats0[0][32] + coeff0_1*dmats0[1][32] + coeff0_2*dmats0[2][32] + coeff0_3*dmats0[3][32] + coeff0_4*dmats0[4][32] + coeff0_5*dmats0[5][32] + coeff0_6*dmats0[6][32] + coeff0_7*dmats0[7][32] + coeff0_8*dmats0[8][32] + coeff0_9*dmats0[9][32] + coeff0_10*dmats0[10][32] + coeff0_11*dmats0[11][32] + coeff0_12*dmats0[12][32] + coeff0_13*dmats0[13][32] + coeff0_14*dmats0[14][32] + coeff0_15*dmats0[15][32] + coeff0_16*dmats0[16][32] + coeff0_17*dmats0[17][32] + coeff0_18*dmats0[18][32] + coeff0_19*dmats0[19][32] + coeff0_20*dmats0[20][32] + coeff0_21*dmats0[21][32] + coeff0_22*dmats0[22][32] + coeff0_23*dmats0[23][32] + coeff0_24*dmats0[24][32] + coeff0_25*dmats0[25][32] + coeff0_26*dmats0[26][32] + coeff0_27*dmats0[27][32] + coeff0_28*dmats0[28][32] + coeff0_29*dmats0[29][32] + coeff0_30*dmats0[30][32] + coeff0_31*dmats0[31][32] + coeff0_32*dmats0[32][32] + coeff0_33*dmats0[33][32] + coeff0_34*dmats0[34][32];
          new_coeff0_33 = coeff0_0*dmats0[0][33] + coeff0_1*dmats0[1][33] + coeff0_2*dmats0[2][33] + coeff0_3*dmats0[3][33] + coeff0_4*dmats0[4][33] + coeff0_5*dmats0[5][33] + coeff0_6*dmats0[6][33] + coeff0_7*dmats0[7][33] + coeff0_8*dmats0[8][33] + coeff0_9*dmats0[9][33] + coeff0_10*dmats0[10][33] + coeff0_11*dmats0[11][33] + coeff0_12*dmats0[12][33] + coeff0_13*dmats0[13][33] + coeff0_14*dmats0[14][33] + coeff0_15*dmats0[15][33] + coeff0_16*dmats0[16][33] + coeff0_17*dmats0[17][33] + coeff0_18*dmats0[18][33] + coeff0_19*dmats0[19][33] + coeff0_20*dmats0[20][33] + coeff0_21*dmats0[21][33] + coeff0_22*dmats0[22][33] + coeff0_23*dmats0[23][33] + coeff0_24*dmats0[24][33] + coeff0_25*dmats0[25][33] + coeff0_26*dmats0[26][33] + coeff0_27*dmats0[27][33] + coeff0_28*dmats0[28][33] + coeff0_29*dmats0[29][33] + coeff0_30*dmats0[30][33] + coeff0_31*dmats0[31][33] + coeff0_32*dmats0[32][33] + coeff0_33*dmats0[33][33] + coeff0_34*dmats0[34][33];
          new_coeff0_34 = coeff0_0*dmats0[0][34] + coeff0_1*dmats0[1][34] + coeff0_2*dmats0[2][34] + coeff0_3*dmats0[3][34] + coeff0_4*dmats0[4][34] + coeff0_5*dmats0[5][34] + coeff0_6*dmats0[6][34] + coeff0_7*dmats0[7][34] + coeff0_8*dmats0[8][34] + coeff0_9*dmats0[9][34] + coeff0_10*dmats0[10][34] + coeff0_11*dmats0[11][34] + coeff0_12*dmats0[12][34] + coeff0_13*dmats0[13][34] + coeff0_14*dmats0[14][34] + coeff0_15*dmats0[15][34] + coeff0_16*dmats0[16][34] + coeff0_17*dmats0[17][34] + coeff0_18*dmats0[18][34] + coeff0_19*dmats0[19][34] + coeff0_20*dmats0[20][34] + coeff0_21*dmats0[21][34] + coeff0_22*dmats0[22][34] + coeff0_23*dmats0[23][34] + coeff0_24*dmats0[24][34] + coeff0_25*dmats0[25][34] + coeff0_26*dmats0[26][34] + coeff0_27*dmats0[27][34] + coeff0_28*dmats0[28][34] + coeff0_29*dmats0[29][34] + coeff0_30*dmats0[30][34] + coeff0_31*dmats0[31][34] + coeff0_32*dmats0[32][34] + coeff0_33*dmats0[33][34] + coeff0_34*dmats0[34][34];
        }
        if(combinations[deriv_num][j] == 1)
        {
          new_coeff0_0 = coeff0_0*dmats1[0][0] + coeff0_1*dmats1[1][0] + coeff0_2*dmats1[2][0] + coeff0_3*dmats1[3][0] + coeff0_4*dmats1[4][0] + coeff0_5*dmats1[5][0] + coeff0_6*dmats1[6][0] + coeff0_7*dmats1[7][0] + coeff0_8*dmats1[8][0] + coeff0_9*dmats1[9][0] + coeff0_10*dmats1[10][0] + coeff0_11*dmats1[11][0] + coeff0_12*dmats1[12][0] + coeff0_13*dmats1[13][0] + coeff0_14*dmats1[14][0] + coeff0_15*dmats1[15][0] + coeff0_16*dmats1[16][0] + coeff0_17*dmats1[17][0] + coeff0_18*dmats1[18][0] + coeff0_19*dmats1[19][0] + coeff0_20*dmats1[20][0] + coeff0_21*dmats1[21][0] + coeff0_22*dmats1[22][0] + coeff0_23*dmats1[23][0] + coeff0_24*dmats1[24][0] + coeff0_25*dmats1[25][0] + coeff0_26*dmats1[26][0] + coeff0_27*dmats1[27][0] + coeff0_28*dmats1[28][0] + coeff0_29*dmats1[29][0] + coeff0_30*dmats1[30][0] + coeff0_31*dmats1[31][0] + coeff0_32*dmats1[32][0] + coeff0_33*dmats1[33][0] + coeff0_34*dmats1[34][0];
          new_coeff0_1 = coeff0_0*dmats1[0][1] + coeff0_1*dmats1[1][1] + coeff0_2*dmats1[2][1] + coeff0_3*dmats1[3][1] + coeff0_4*dmats1[4][1] + coeff0_5*dmats1[5][1] + coeff0_6*dmats1[6][1] + coeff0_7*dmats1[7][1] + coeff0_8*dmats1[8][1] + coeff0_9*dmats1[9][1] + coeff0_10*dmats1[10][1] + coeff0_11*dmats1[11][1] + coeff0_12*dmats1[12][1] + coeff0_13*dmats1[13][1] + coeff0_14*dmats1[14][1] + coeff0_15*dmats1[15][1] + coeff0_16*dmats1[16][1] + coeff0_17*dmats1[17][1] + coeff0_18*dmats1[18][1] + coeff0_19*dmats1[19][1] + coeff0_20*dmats1[20][1] + coeff0_21*dmats1[21][1] + coeff0_22*dmats1[22][1] + coeff0_23*dmats1[23][1] + coeff0_24*dmats1[24][1] + coeff0_25*dmats1[25][1] + coeff0_26*dmats1[26][1] + coeff0_27*dmats1[27][1] + coeff0_28*dmats1[28][1] + coeff0_29*dmats1[29][1] + coeff0_30*dmats1[30][1] + coeff0_31*dmats1[31][1] + coeff0_32*dmats1[32][1] + coeff0_33*dmats1[33][1] + coeff0_34*dmats1[34][1];
          new_coeff0_2 = coeff0_0*dmats1[0][2] + coeff0_1*dmats1[1][2] + coeff0_2*dmats1[2][2] + coeff0_3*dmats1[3][2] + coeff0_4*dmats1[4][2] + coeff0_5*dmats1[5][2] + coeff0_6*dmats1[6][2] + coeff0_7*dmats1[7][2] + coeff0_8*dmats1[8][2] + coeff0_9*dmats1[9][2] + coeff0_10*dmats1[10][2] + coeff0_11*dmats1[11][2] + coeff0_12*dmats1[12][2] + coeff0_13*dmats1[13][2] + coeff0_14*dmats1[14][2] + coeff0_15*dmats1[15][2] + coeff0_16*dmats1[16][2] + coeff0_17*dmats1[17][2] + coeff0_18*dmats1[18][2] + coeff0_19*dmats1[19][2] + coeff0_20*dmats1[20][2] + coeff0_21*dmats1[21][2] + coeff0_22*dmats1[22][2] + coeff0_23*dmats1[23][2] + coeff0_24*dmats1[24][2] + coeff0_25*dmats1[25][2] + coeff0_26*dmats1[26][2] + coeff0_27*dmats1[27][2] + coeff0_28*dmats1[28][2] + coeff0_29*dmats1[29][2] + coeff0_30*dmats1[30][2] + coeff0_31*dmats1[31][2] + coeff0_32*dmats1[32][2] + coeff0_33*dmats1[33][2] + coeff0_34*dmats1[34][2];
          new_coeff0_3 = coeff0_0*dmats1[0][3] + coeff0_1*dmats1[1][3] + coeff0_2*dmats1[2][3] + coeff0_3*dmats1[3][3] + coeff0_4*dmats1[4][3] + coeff0_5*dmats1[5][3] + coeff0_6*dmats1[6][3] + coeff0_7*dmats1[7][3] + coeff0_8*dmats1[8][3] + coeff0_9*dmats1[9][3] + coeff0_10*dmats1[10][3] + coeff0_11*dmats1[11][3] + coeff0_12*dmats1[12][3] + coeff0_13*dmats1[13][3] + coeff0_14*dmats1[14][3] + coeff0_15*dmats1[15][3] + coeff0_16*dmats1[16][3] + coeff0_17*dmats1[17][3] + coeff0_18*dmats1[18][3] + coeff0_19*dmats1[19][3] + coeff0_20*dmats1[20][3] + coeff0_21*dmats1[21][3] + coeff0_22*dmats1[22][3] + coeff0_23*dmats1[23][3] + coeff0_24*dmats1[24][3] + coeff0_25*dmats1[25][3] + coeff0_26*dmats1[26][3] + coeff0_27*dmats1[27][3] + coeff0_28*dmats1[28][3] + coeff0_29*dmats1[29][3] + coeff0_30*dmats1[30][3] + coeff0_31*dmats1[31][3] + coeff0_32*dmats1[32][3] + coeff0_33*dmats1[33][3] + coeff0_34*dmats1[34][3];
          new_coeff0_4 = coeff0_0*dmats1[0][4] + coeff0_1*dmats1[1][4] + coeff0_2*dmats1[2][4] + coeff0_3*dmats1[3][4] + coeff0_4*dmats1[4][4] + coeff0_5*dmats1[5][4] + coeff0_6*dmats1[6][4] + coeff0_7*dmats1[7][4] + coeff0_8*dmats1[8][4] + coeff0_9*dmats1[9][4] + coeff0_10*dmats1[10][4] + coeff0_11*dmats1[11][4] + coeff0_12*dmats1[12][4] + coeff0_13*dmats1[13][4] + coeff0_14*dmats1[14][4] + coeff0_15*dmats1[15][4] + coeff0_16*dmats1[16][4] + coeff0_17*dmats1[17][4] + coeff0_18*dmats1[18][4] + coeff0_19*dmats1[19][4] + coeff0_20*dmats1[20][4] + coeff0_21*dmats1[21][4] + coeff0_22*dmats1[22][4] + coeff0_23*dmats1[23][4] + coeff0_24*dmats1[24][4] + coeff0_25*dmats1[25][4] + coeff0_26*dmats1[26][4] + coeff0_27*dmats1[27][4] + coeff0_28*dmats1[28][4] + coeff0_29*dmats1[29][4] + coeff0_30*dmats1[30][4] + coeff0_31*dmats1[31][4] + coeff0_32*dmats1[32][4] + coeff0_33*dmats1[33][4] + coeff0_34*dmats1[34][4];
          new_coeff0_5 = coeff0_0*dmats1[0][5] + coeff0_1*dmats1[1][5] + coeff0_2*dmats1[2][5] + coeff0_3*dmats1[3][5] + coeff0_4*dmats1[4][5] + coeff0_5*dmats1[5][5] + coeff0_6*dmats1[6][5] + coeff0_7*dmats1[7][5] + coeff0_8*dmats1[8][5] + coeff0_9*dmats1[9][5] + coeff0_10*dmats1[10][5] + coeff0_11*dmats1[11][5] + coeff0_12*dmats1[12][5] + coeff0_13*dmats1[13][5] + coeff0_14*dmats1[14][5] + coeff0_15*dmats1[15][5] + coeff0_16*dmats1[16][5] + coeff0_17*dmats1[17][5] + coeff0_18*dmats1[18][5] + coeff0_19*dmats1[19][5] + coeff0_20*dmats1[20][5] + coeff0_21*dmats1[21][5] + coeff0_22*dmats1[22][5] + coeff0_23*dmats1[23][5] + coeff0_24*dmats1[24][5] + coeff0_25*dmats1[25][5] + coeff0_26*dmats1[26][5] + coeff0_27*dmats1[27][5] + coeff0_28*dmats1[28][5] + coeff0_29*dmats1[29][5] + coeff0_30*dmats1[30][5] + coeff0_31*dmats1[31][5] + coeff0_32*dmats1[32][5] + coeff0_33*dmats1[33][5] + coeff0_34*dmats1[34][5];
          new_coeff0_6 = coeff0_0*dmats1[0][6] + coeff0_1*dmats1[1][6] + coeff0_2*dmats1[2][6] + coeff0_3*dmats1[3][6] + coeff0_4*dmats1[4][6] + coeff0_5*dmats1[5][6] + coeff0_6*dmats1[6][6] + coeff0_7*dmats1[7][6] + coeff0_8*dmats1[8][6] + coeff0_9*dmats1[9][6] + coeff0_10*dmats1[10][6] + coeff0_11*dmats1[11][6] + coeff0_12*dmats1[12][6] + coeff0_13*dmats1[13][6] + coeff0_14*dmats1[14][6] + coeff0_15*dmats1[15][6] + coeff0_16*dmats1[16][6] + coeff0_17*dmats1[17][6] + coeff0_18*dmats1[18][6] + coeff0_19*dmats1[19][6] + coeff0_20*dmats1[20][6] + coeff0_21*dmats1[21][6] + coeff0_22*dmats1[22][6] + coeff0_23*dmats1[23][6] + coeff0_24*dmats1[24][6] + coeff0_25*dmats1[25][6] + coeff0_26*dmats1[26][6] + coeff0_27*dmats1[27][6] + coeff0_28*dmats1[28][6] + coeff0_29*dmats1[29][6] + coeff0_30*dmats1[30][6] + coeff0_31*dmats1[31][6] + coeff0_32*dmats1[32][6] + coeff0_33*dmats1[33][6] + coeff0_34*dmats1[34][6];
          new_coeff0_7 = coeff0_0*dmats1[0][7] + coeff0_1*dmats1[1][7] + coeff0_2*dmats1[2][7] + coeff0_3*dmats1[3][7] + coeff0_4*dmats1[4][7] + coeff0_5*dmats1[5][7] + coeff0_6*dmats1[6][7] + coeff0_7*dmats1[7][7] + coeff0_8*dmats1[8][7] + coeff0_9*dmats1[9][7] + coeff0_10*dmats1[10][7] + coeff0_11*dmats1[11][7] + coeff0_12*dmats1[12][7] + coeff0_13*dmats1[13][7] + coeff0_14*dmats1[14][7] + coeff0_15*dmats1[15][7] + coeff0_16*dmats1[16][7] + coeff0_17*dmats1[17][7] + coeff0_18*dmats1[18][7] + coeff0_19*dmats1[19][7] + coeff0_20*dmats1[20][7] + coeff0_21*dmats1[21][7] + coeff0_22*dmats1[22][7] + coeff0_23*dmats1[23][7] + coeff0_24*dmats1[24][7] + coeff0_25*dmats1[25][7] + coeff0_26*dmats1[26][7] + coeff0_27*dmats1[27][7] + coeff0_28*dmats1[28][7] + coeff0_29*dmats1[29][7] + coeff0_30*dmats1[30][7] + coeff0_31*dmats1[31][7] + coeff0_32*dmats1[32][7] + coeff0_33*dmats1[33][7] + coeff0_34*dmats1[34][7];
          new_coeff0_8 = coeff0_0*dmats1[0][8] + coeff0_1*dmats1[1][8] + coeff0_2*dmats1[2][8] + coeff0_3*dmats1[3][8] + coeff0_4*dmats1[4][8] + coeff0_5*dmats1[5][8] + coeff0_6*dmats1[6][8] + coeff0_7*dmats1[7][8] + coeff0_8*dmats1[8][8] + coeff0_9*dmats1[9][8] + coeff0_10*dmats1[10][8] + coeff0_11*dmats1[11][8] + coeff0_12*dmats1[12][8] + coeff0_13*dmats1[13][8] + coeff0_14*dmats1[14][8] + coeff0_15*dmats1[15][8] + coeff0_16*dmats1[16][8] + coeff0_17*dmats1[17][8] + coeff0_18*dmats1[18][8] + coeff0_19*dmats1[19][8] + coeff0_20*dmats1[20][8] + coeff0_21*dmats1[21][8] + coeff0_22*dmats1[22][8] + coeff0_23*dmats1[23][8] + coeff0_24*dmats1[24][8] + coeff0_25*dmats1[25][8] + coeff0_26*dmats1[26][8] + coeff0_27*dmats1[27][8] + coeff0_28*dmats1[28][8] + coeff0_29*dmats1[29][8] + coeff0_30*dmats1[30][8] + coeff0_31*dmats1[31][8] + coeff0_32*dmats1[32][8] + coeff0_33*dmats1[33][8] + coeff0_34*dmats1[34][8];
          new_coeff0_9 = coeff0_0*dmats1[0][9] + coeff0_1*dmats1[1][9] + coeff0_2*dmats1[2][9] + coeff0_3*dmats1[3][9] + coeff0_4*dmats1[4][9] + coeff0_5*dmats1[5][9] + coeff0_6*dmats1[6][9] + coeff0_7*dmats1[7][9] + coeff0_8*dmats1[8][9] + coeff0_9*dmats1[9][9] + coeff0_10*dmats1[10][9] + coeff0_11*dmats1[11][9] + coeff0_12*dmats1[12][9] + coeff0_13*dmats1[13][9] + coeff0_14*dmats1[14][9] + coeff0_15*dmats1[15][9] + coeff0_16*dmats1[16][9] + coeff0_17*dmats1[17][9] + coeff0_18*dmats1[18][9] + coeff0_19*dmats1[19][9] + coeff0_20*dmats1[20][9] + coeff0_21*dmats1[21][9] + coeff0_22*dmats1[22][9] + coeff0_23*dmats1[23][9] + coeff0_24*dmats1[24][9] + coeff0_25*dmats1[25][9] + coeff0_26*dmats1[26][9] + coeff0_27*dmats1[27][9] + coeff0_28*dmats1[28][9] + coeff0_29*dmats1[29][9] + coeff0_30*dmats1[30][9] + coeff0_31*dmats1[31][9] + coeff0_32*dmats1[32][9] + coeff0_33*dmats1[33][9] + coeff0_34*dmats1[34][9];
          new_coeff0_10 = coeff0_0*dmats1[0][10] + coeff0_1*dmats1[1][10] + coeff0_2*dmats1[2][10] + coeff0_3*dmats1[3][10] + coeff0_4*dmats1[4][10] + coeff0_5*dmats1[5][10] + coeff0_6*dmats1[6][10] + coeff0_7*dmats1[7][10] + coeff0_8*dmats1[8][10] + coeff0_9*dmats1[9][10] + coeff0_10*dmats1[10][10] + coeff0_11*dmats1[11][10] + coeff0_12*dmats1[12][10] + coeff0_13*dmats1[13][10] + coeff0_14*dmats1[14][10] + coeff0_15*dmats1[15][10] + coeff0_16*dmats1[16][10] + coeff0_17*dmats1[17][10] + coeff0_18*dmats1[18][10] + coeff0_19*dmats1[19][10] + coeff0_20*dmats1[20][10] + coeff0_21*dmats1[21][10] + coeff0_22*dmats1[22][10] + coeff0_23*dmats1[23][10] + coeff0_24*dmats1[24][10] + coeff0_25*dmats1[25][10] + coeff0_26*dmats1[26][10] + coeff0_27*dmats1[27][10] + coeff0_28*dmats1[28][10] + coeff0_29*dmats1[29][10] + coeff0_30*dmats1[30][10] + coeff0_31*dmats1[31][10] + coeff0_32*dmats1[32][10] + coeff0_33*dmats1[33][10] + coeff0_34*dmats1[34][10];
          new_coeff0_11 = coeff0_0*dmats1[0][11] + coeff0_1*dmats1[1][11] + coeff0_2*dmats1[2][11] + coeff0_3*dmats1[3][11] + coeff0_4*dmats1[4][11] + coeff0_5*dmats1[5][11] + coeff0_6*dmats1[6][11] + coeff0_7*dmats1[7][11] + coeff0_8*dmats1[8][11] + coeff0_9*dmats1[9][11] + coeff0_10*dmats1[10][11] + coeff0_11*dmats1[11][11] + coeff0_12*dmats1[12][11] + coeff0_13*dmats1[13][11] + coeff0_14*dmats1[14][11] + coeff0_15*dmats1[15][11] + coeff0_16*dmats1[16][11] + coeff0_17*dmats1[17][11] + coeff0_18*dmats1[18][11] + coeff0_19*dmats1[19][11] + coeff0_20*dmats1[20][11] + coeff0_21*dmats1[21][11] + coeff0_22*dmats1[22][11] + coeff0_23*dmats1[23][11] + coeff0_24*dmats1[24][11] + coeff0_25*dmats1[25][11] + coeff0_26*dmats1[26][11] + coeff0_27*dmats1[27][11] + coeff0_28*dmats1[28][11] + coeff0_29*dmats1[29][11] + coeff0_30*dmats1[30][11] + coeff0_31*dmats1[31][11] + coeff0_32*dmats1[32][11] + coeff0_33*dmats1[33][11] + coeff0_34*dmats1[34][11];
          new_coeff0_12 = coeff0_0*dmats1[0][12] + coeff0_1*dmats1[1][12] + coeff0_2*dmats1[2][12] + coeff0_3*dmats1[3][12] + coeff0_4*dmats1[4][12] + coeff0_5*dmats1[5][12] + coeff0_6*dmats1[6][12] + coeff0_7*dmats1[7][12] + coeff0_8*dmats1[8][12] + coeff0_9*dmats1[9][12] + coeff0_10*dmats1[10][12] + coeff0_11*dmats1[11][12] + coeff0_12*dmats1[12][12] + coeff0_13*dmats1[13][12] + coeff0_14*dmats1[14][12] + coeff0_15*dmats1[15][12] + coeff0_16*dmats1[16][12] + coeff0_17*dmats1[17][12] + coeff0_18*dmats1[18][12] + coeff0_19*dmats1[19][12] + coeff0_20*dmats1[20][12] + coeff0_21*dmats1[21][12] + coeff0_22*dmats1[22][12] + coeff0_23*dmats1[23][12] + coeff0_24*dmats1[24][12] + coeff0_25*dmats1[25][12] + coeff0_26*dmats1[26][12] + coeff0_27*dmats1[27][12] + coeff0_28*dmats1[28][12] + coeff0_29*dmats1[29][12] + coeff0_30*dmats1[30][12] + coeff0_31*dmats1[31][12] + coeff0_32*dmats1[32][12] + coeff0_33*dmats1[33][12] + coeff0_34*dmats1[34][12];
          new_coeff0_13 = coeff0_0*dmats1[0][13] + coeff0_1*dmats1[1][13] + coeff0_2*dmats1[2][13] + coeff0_3*dmats1[3][13] + coeff0_4*dmats1[4][13] + coeff0_5*dmats1[5][13] + coeff0_6*dmats1[6][13] + coeff0_7*dmats1[7][13] + coeff0_8*dmats1[8][13] + coeff0_9*dmats1[9][13] + coeff0_10*dmats1[10][13] + coeff0_11*dmats1[11][13] + coeff0_12*dmats1[12][13] + coeff0_13*dmats1[13][13] + coeff0_14*dmats1[14][13] + coeff0_15*dmats1[15][13] + coeff0_16*dmats1[16][13] + coeff0_17*dmats1[17][13] + coeff0_18*dmats1[18][13] + coeff0_19*dmats1[19][13] + coeff0_20*dmats1[20][13] + coeff0_21*dmats1[21][13] + coeff0_22*dmats1[22][13] + coeff0_23*dmats1[23][13] + coeff0_24*dmats1[24][13] + coeff0_25*dmats1[25][13] + coeff0_26*dmats1[26][13] + coeff0_27*dmats1[27][13] + coeff0_28*dmats1[28][13] + coeff0_29*dmats1[29][13] + coeff0_30*dmats1[30][13] + coeff0_31*dmats1[31][13] + coeff0_32*dmats1[32][13] + coeff0_33*dmats1[33][13] + coeff0_34*dmats1[34][13];
          new_coeff0_14 = coeff0_0*dmats1[0][14] + coeff0_1*dmats1[1][14] + coeff0_2*dmats1[2][14] + coeff0_3*dmats1[3][14] + coeff0_4*dmats1[4][14] + coeff0_5*dmats1[5][14] + coeff0_6*dmats1[6][14] + coeff0_7*dmats1[7][14] + coeff0_8*dmats1[8][14] + coeff0_9*dmats1[9][14] + coeff0_10*dmats1[10][14] + coeff0_11*dmats1[11][14] + coeff0_12*dmats1[12][14] + coeff0_13*dmats1[13][14] + coeff0_14*dmats1[14][14] + coeff0_15*dmats1[15][14] + coeff0_16*dmats1[16][14] + coeff0_17*dmats1[17][14] + coeff0_18*dmats1[18][14] + coeff0_19*dmats1[19][14] + coeff0_20*dmats1[20][14] + coeff0_21*dmats1[21][14] + coeff0_22*dmats1[22][14] + coeff0_23*dmats1[23][14] + coeff0_24*dmats1[24][14] + coeff0_25*dmats1[25][14] + coeff0_26*dmats1[26][14] + coeff0_27*dmats1[27][14] + coeff0_28*dmats1[28][14] + coeff0_29*dmats1[29][14] + coeff0_30*dmats1[30][14] + coeff0_31*dmats1[31][14] + coeff0_32*dmats1[32][14] + coeff0_33*dmats1[33][14] + coeff0_34*dmats1[34][14];
          new_coeff0_15 = coeff0_0*dmats1[0][15] + coeff0_1*dmats1[1][15] + coeff0_2*dmats1[2][15] + coeff0_3*dmats1[3][15] + coeff0_4*dmats1[4][15] + coeff0_5*dmats1[5][15] + coeff0_6*dmats1[6][15] + coeff0_7*dmats1[7][15] + coeff0_8*dmats1[8][15] + coeff0_9*dmats1[9][15] + coeff0_10*dmats1[10][15] + coeff0_11*dmats1[11][15] + coeff0_12*dmats1[12][15] + coeff0_13*dmats1[13][15] + coeff0_14*dmats1[14][15] + coeff0_15*dmats1[15][15] + coeff0_16*dmats1[16][15] + coeff0_17*dmats1[17][15] + coeff0_18*dmats1[18][15] + coeff0_19*dmats1[19][15] + coeff0_20*dmats1[20][15] + coeff0_21*dmats1[21][15] + coeff0_22*dmats1[22][15] + coeff0_23*dmats1[23][15] + coeff0_24*dmats1[24][15] + coeff0_25*dmats1[25][15] + coeff0_26*dmats1[26][15] + coeff0_27*dmats1[27][15] + coeff0_28*dmats1[28][15] + coeff0_29*dmats1[29][15] + coeff0_30*dmats1[30][15] + coeff0_31*dmats1[31][15] + coeff0_32*dmats1[32][15] + coeff0_33*dmats1[33][15] + coeff0_34*dmats1[34][15];
          new_coeff0_16 = coeff0_0*dmats1[0][16] + coeff0_1*dmats1[1][16] + coeff0_2*dmats1[2][16] + coeff0_3*dmats1[3][16] + coeff0_4*dmats1[4][16] + coeff0_5*dmats1[5][16] + coeff0_6*dmats1[6][16] + coeff0_7*dmats1[7][16] + coeff0_8*dmats1[8][16] + coeff0_9*dmats1[9][16] + coeff0_10*dmats1[10][16] + coeff0_11*dmats1[11][16] + coeff0_12*dmats1[12][16] + coeff0_13*dmats1[13][16] + coeff0_14*dmats1[14][16] + coeff0_15*dmats1[15][16] + coeff0_16*dmats1[16][16] + coeff0_17*dmats1[17][16] + coeff0_18*dmats1[18][16] + coeff0_19*dmats1[19][16] + coeff0_20*dmats1[20][16] + coeff0_21*dmats1[21][16] + coeff0_22*dmats1[22][16] + coeff0_23*dmats1[23][16] + coeff0_24*dmats1[24][16] + coeff0_25*dmats1[25][16] + coeff0_26*dmats1[26][16] + coeff0_27*dmats1[27][16] + coeff0_28*dmats1[28][16] + coeff0_29*dmats1[29][16] + coeff0_30*dmats1[30][16] + coeff0_31*dmats1[31][16] + coeff0_32*dmats1[32][16] + coeff0_33*dmats1[33][16] + coeff0_34*dmats1[34][16];
          new_coeff0_17 = coeff0_0*dmats1[0][17] + coeff0_1*dmats1[1][17] + coeff0_2*dmats1[2][17] + coeff0_3*dmats1[3][17] + coeff0_4*dmats1[4][17] + coeff0_5*dmats1[5][17] + coeff0_6*dmats1[6][17] + coeff0_7*dmats1[7][17] + coeff0_8*dmats1[8][17] + coeff0_9*dmats1[9][17] + coeff0_10*dmats1[10][17] + coeff0_11*dmats1[11][17] + coeff0_12*dmats1[12][17] + coeff0_13*dmats1[13][17] + coeff0_14*dmats1[14][17] + coeff0_15*dmats1[15][17] + coeff0_16*dmats1[16][17] + coeff0_17*dmats1[17][17] + coeff0_18*dmats1[18][17] + coeff0_19*dmats1[19][17] + coeff0_20*dmats1[20][17] + coeff0_21*dmats1[21][17] + coeff0_22*dmats1[22][17] + coeff0_23*dmats1[23][17] + coeff0_24*dmats1[24][17] + coeff0_25*dmats1[25][17] + coeff0_26*dmats1[26][17] + coeff0_27*dmats1[27][17] + coeff0_28*dmats1[28][17] + coeff0_29*dmats1[29][17] + coeff0_30*dmats1[30][17] + coeff0_31*dmats1[31][17] + coeff0_32*dmats1[32][17] + coeff0_33*dmats1[33][17] + coeff0_34*dmats1[34][17];
          new_coeff0_18 = coeff0_0*dmats1[0][18] + coeff0_1*dmats1[1][18] + coeff0_2*dmats1[2][18] + coeff0_3*dmats1[3][18] + coeff0_4*dmats1[4][18] + coeff0_5*dmats1[5][18] + coeff0_6*dmats1[6][18] + coeff0_7*dmats1[7][18] + coeff0_8*dmats1[8][18] + coeff0_9*dmats1[9][18] + coeff0_10*dmats1[10][18] + coeff0_11*dmats1[11][18] + coeff0_12*dmats1[12][18] + coeff0_13*dmats1[13][18] + coeff0_14*dmats1[14][18] + coeff0_15*dmats1[15][18] + coeff0_16*dmats1[16][18] + coeff0_17*dmats1[17][18] + coeff0_18*dmats1[18][18] + coeff0_19*dmats1[19][18] + coeff0_20*dmats1[20][18] + coeff0_21*dmats1[21][18] + coeff0_22*dmats1[22][18] + coeff0_23*dmats1[23][18] + coeff0_24*dmats1[24][18] + coeff0_25*dmats1[25][18] + coeff0_26*dmats1[26][18] + coeff0_27*dmats1[27][18] + coeff0_28*dmats1[28][18] + coeff0_29*dmats1[29][18] + coeff0_30*dmats1[30][18] + coeff0_31*dmats1[31][18] + coeff0_32*dmats1[32][18] + coeff0_33*dmats1[33][18] + coeff0_34*dmats1[34][18];
          new_coeff0_19 = coeff0_0*dmats1[0][19] + coeff0_1*dmats1[1][19] + coeff0_2*dmats1[2][19] + coeff0_3*dmats1[3][19] + coeff0_4*dmats1[4][19] + coeff0_5*dmats1[5][19] + coeff0_6*dmats1[6][19] + coeff0_7*dmats1[7][19] + coeff0_8*dmats1[8][19] + coeff0_9*dmats1[9][19] + coeff0_10*dmats1[10][19] + coeff0_11*dmats1[11][19] + coeff0_12*dmats1[12][19] + coeff0_13*dmats1[13][19] + coeff0_14*dmats1[14][19] + coeff0_15*dmats1[15][19] + coeff0_16*dmats1[16][19] + coeff0_17*dmats1[17][19] + coeff0_18*dmats1[18][19] + coeff0_19*dmats1[19][19] + coeff0_20*dmats1[20][19] + coeff0_21*dmats1[21][19] + coeff0_22*dmats1[22][19] + coeff0_23*dmats1[23][19] + coeff0_24*dmats1[24][19] + coeff0_25*dmats1[25][19] + coeff0_26*dmats1[26][19] + coeff0_27*dmats1[27][19] + coeff0_28*dmats1[28][19] + coeff0_29*dmats1[29][19] + coeff0_30*dmats1[30][19] + coeff0_31*dmats1[31][19] + coeff0_32*dmats1[32][19] + coeff0_33*dmats1[33][19] + coeff0_34*dmats1[34][19];
          new_coeff0_20 = coeff0_0*dmats1[0][20] + coeff0_1*dmats1[1][20] + coeff0_2*dmats1[2][20] + coeff0_3*dmats1[3][20] + coeff0_4*dmats1[4][20] + coeff0_5*dmats1[5][20] + coeff0_6*dmats1[6][20] + coeff0_7*dmats1[7][20] + coeff0_8*dmats1[8][20] + coeff0_9*dmats1[9][20] + coeff0_10*dmats1[10][20] + coeff0_11*dmats1[11][20] + coeff0_12*dmats1[12][20] + coeff0_13*dmats1[13][20] + coeff0_14*dmats1[14][20] + coeff0_15*dmats1[15][20] + coeff0_16*dmats1[16][20] + coeff0_17*dmats1[17][20] + coeff0_18*dmats1[18][20] + coeff0_19*dmats1[19][20] + coeff0_20*dmats1[20][20] + coeff0_21*dmats1[21][20] + coeff0_22*dmats1[22][20] + coeff0_23*dmats1[23][20] + coeff0_24*dmats1[24][20] + coeff0_25*dmats1[25][20] + coeff0_26*dmats1[26][20] + coeff0_27*dmats1[27][20] + coeff0_28*dmats1[28][20] + coeff0_29*dmats1[29][20] + coeff0_30*dmats1[30][20] + coeff0_31*dmats1[31][20] + coeff0_32*dmats1[32][20] + coeff0_33*dmats1[33][20] + coeff0_34*dmats1[34][20];
          new_coeff0_21 = coeff0_0*dmats1[0][21] + coeff0_1*dmats1[1][21] + coeff0_2*dmats1[2][21] + coeff0_3*dmats1[3][21] + coeff0_4*dmats1[4][21] + coeff0_5*dmats1[5][21] + coeff0_6*dmats1[6][21] + coeff0_7*dmats1[7][21] + coeff0_8*dmats1[8][21] + coeff0_9*dmats1[9][21] + coeff0_10*dmats1[10][21] + coeff0_11*dmats1[11][21] + coeff0_12*dmats1[12][21] + coeff0_13*dmats1[13][21] + coeff0_14*dmats1[14][21] + coeff0_15*dmats1[15][21] + coeff0_16*dmats1[16][21] + coeff0_17*dmats1[17][21] + coeff0_18*dmats1[18][21] + coeff0_19*dmats1[19][21] + coeff0_20*dmats1[20][21] + coeff0_21*dmats1[21][21] + coeff0_22*dmats1[22][21] + coeff0_23*dmats1[23][21] + coeff0_24*dmats1[24][21] + coeff0_25*dmats1[25][21] + coeff0_26*dmats1[26][21] + coeff0_27*dmats1[27][21] + coeff0_28*dmats1[28][21] + coeff0_29*dmats1[29][21] + coeff0_30*dmats1[30][21] + coeff0_31*dmats1[31][21] + coeff0_32*dmats1[32][21] + coeff0_33*dmats1[33][21] + coeff0_34*dmats1[34][21];
          new_coeff0_22 = coeff0_0*dmats1[0][22] + coeff0_1*dmats1[1][22] + coeff0_2*dmats1[2][22] + coeff0_3*dmats1[3][22] + coeff0_4*dmats1[4][22] + coeff0_5*dmats1[5][22] + coeff0_6*dmats1[6][22] + coeff0_7*dmats1[7][22] + coeff0_8*dmats1[8][22] + coeff0_9*dmats1[9][22] + coeff0_10*dmats1[10][22] + coeff0_11*dmats1[11][22] + coeff0_12*dmats1[12][22] + coeff0_13*dmats1[13][22] + coeff0_14*dmats1[14][22] + coeff0_15*dmats1[15][22] + coeff0_16*dmats1[16][22] + coeff0_17*dmats1[17][22] + coeff0_18*dmats1[18][22] + coeff0_19*dmats1[19][22] + coeff0_20*dmats1[20][22] + coeff0_21*dmats1[21][22] + coeff0_22*dmats1[22][22] + coeff0_23*dmats1[23][22] + coeff0_24*dmats1[24][22] + coeff0_25*dmats1[25][22] + coeff0_26*dmats1[26][22] + coeff0_27*dmats1[27][22] + coeff0_28*dmats1[28][22] + coeff0_29*dmats1[29][22] + coeff0_30*dmats1[30][22] + coeff0_31*dmats1[31][22] + coeff0_32*dmats1[32][22] + coeff0_33*dmats1[33][22] + coeff0_34*dmats1[34][22];
          new_coeff0_23 = coeff0_0*dmats1[0][23] + coeff0_1*dmats1[1][23] + coeff0_2*dmats1[2][23] + coeff0_3*dmats1[3][23] + coeff0_4*dmats1[4][23] + coeff0_5*dmats1[5][23] + coeff0_6*dmats1[6][23] + coeff0_7*dmats1[7][23] + coeff0_8*dmats1[8][23] + coeff0_9*dmats1[9][23] + coeff0_10*dmats1[10][23] + coeff0_11*dmats1[11][23] + coeff0_12*dmats1[12][23] + coeff0_13*dmats1[13][23] + coeff0_14*dmats1[14][23] + coeff0_15*dmats1[15][23] + coeff0_16*dmats1[16][23] + coeff0_17*dmats1[17][23] + coeff0_18*dmats1[18][23] + coeff0_19*dmats1[19][23] + coeff0_20*dmats1[20][23] + coeff0_21*dmats1[21][23] + coeff0_22*dmats1[22][23] + coeff0_23*dmats1[23][23] + coeff0_24*dmats1[24][23] + coeff0_25*dmats1[25][23] + coeff0_26*dmats1[26][23] + coeff0_27*dmats1[27][23] + coeff0_28*dmats1[28][23] + coeff0_29*dmats1[29][23] + coeff0_30*dmats1[30][23] + coeff0_31*dmats1[31][23] + coeff0_32*dmats1[32][23] + coeff0_33*dmats1[33][23] + coeff0_34*dmats1[34][23];
          new_coeff0_24 = coeff0_0*dmats1[0][24] + coeff0_1*dmats1[1][24] + coeff0_2*dmats1[2][24] + coeff0_3*dmats1[3][24] + coeff0_4*dmats1[4][24] + coeff0_5*dmats1[5][24] + coeff0_6*dmats1[6][24] + coeff0_7*dmats1[7][24] + coeff0_8*dmats1[8][24] + coeff0_9*dmats1[9][24] + coeff0_10*dmats1[10][24] + coeff0_11*dmats1[11][24] + coeff0_12*dmats1[12][24] + coeff0_13*dmats1[13][24] + coeff0_14*dmats1[14][24] + coeff0_15*dmats1[15][24] + coeff0_16*dmats1[16][24] + coeff0_17*dmats1[17][24] + coeff0_18*dmats1[18][24] + coeff0_19*dmats1[19][24] + coeff0_20*dmats1[20][24] + coeff0_21*dmats1[21][24] + coeff0_22*dmats1[22][24] + coeff0_23*dmats1[23][24] + coeff0_24*dmats1[24][24] + coeff0_25*dmats1[25][24] + coeff0_26*dmats1[26][24] + coeff0_27*dmats1[27][24] + coeff0_28*dmats1[28][24] + coeff0_29*dmats1[29][24] + coeff0_30*dmats1[30][24] + coeff0_31*dmats1[31][24] + coeff0_32*dmats1[32][24] + coeff0_33*dmats1[33][24] + coeff0_34*dmats1[34][24];
          new_coeff0_25 = coeff0_0*dmats1[0][25] + coeff0_1*dmats1[1][25] + coeff0_2*dmats1[2][25] + coeff0_3*dmats1[3][25] + coeff0_4*dmats1[4][25] + coeff0_5*dmats1[5][25] + coeff0_6*dmats1[6][25] + coeff0_7*dmats1[7][25] + coeff0_8*dmats1[8][25] + coeff0_9*dmats1[9][25] + coeff0_10*dmats1[10][25] + coeff0_11*dmats1[11][25] + coeff0_12*dmats1[12][25] + coeff0_13*dmats1[13][25] + coeff0_14*dmats1[14][25] + coeff0_15*dmats1[15][25] + coeff0_16*dmats1[16][25] + coeff0_17*dmats1[17][25] + coeff0_18*dmats1[18][25] + coeff0_19*dmats1[19][25] + coeff0_20*dmats1[20][25] + coeff0_21*dmats1[21][25] + coeff0_22*dmats1[22][25] + coeff0_23*dmats1[23][25] + coeff0_24*dmats1[24][25] + coeff0_25*dmats1[25][25] + coeff0_26*dmats1[26][25] + coeff0_27*dmats1[27][25] + coeff0_28*dmats1[28][25] + coeff0_29*dmats1[29][25] + coeff0_30*dmats1[30][25] + coeff0_31*dmats1[31][25] + coeff0_32*dmats1[32][25] + coeff0_33*dmats1[33][25] + coeff0_34*dmats1[34][25];
          new_coeff0_26 = coeff0_0*dmats1[0][26] + coeff0_1*dmats1[1][26] + coeff0_2*dmats1[2][26] + coeff0_3*dmats1[3][26] + coeff0_4*dmats1[4][26] + coeff0_5*dmats1[5][26] + coeff0_6*dmats1[6][26] + coeff0_7*dmats1[7][26] + coeff0_8*dmats1[8][26] + coeff0_9*dmats1[9][26] + coeff0_10*dmats1[10][26] + coeff0_11*dmats1[11][26] + coeff0_12*dmats1[12][26] + coeff0_13*dmats1[13][26] + coeff0_14*dmats1[14][26] + coeff0_15*dmats1[15][26] + coeff0_16*dmats1[16][26] + coeff0_17*dmats1[17][26] + coeff0_18*dmats1[18][26] + coeff0_19*dmats1[19][26] + coeff0_20*dmats1[20][26] + coeff0_21*dmats1[21][26] + coeff0_22*dmats1[22][26] + coeff0_23*dmats1[23][26] + coeff0_24*dmats1[24][26] + coeff0_25*dmats1[25][26] + coeff0_26*dmats1[26][26] + coeff0_27*dmats1[27][26] + coeff0_28*dmats1[28][26] + coeff0_29*dmats1[29][26] + coeff0_30*dmats1[30][26] + coeff0_31*dmats1[31][26] + coeff0_32*dmats1[32][26] + coeff0_33*dmats1[33][26] + coeff0_34*dmats1[34][26];
          new_coeff0_27 = coeff0_0*dmats1[0][27] + coeff0_1*dmats1[1][27] + coeff0_2*dmats1[2][27] + coeff0_3*dmats1[3][27] + coeff0_4*dmats1[4][27] + coeff0_5*dmats1[5][27] + coeff0_6*dmats1[6][27] + coeff0_7*dmats1[7][27] + coeff0_8*dmats1[8][27] + coeff0_9*dmats1[9][27] + coeff0_10*dmats1[10][27] + coeff0_11*dmats1[11][27] + coeff0_12*dmats1[12][27] + coeff0_13*dmats1[13][27] + coeff0_14*dmats1[14][27] + coeff0_15*dmats1[15][27] + coeff0_16*dmats1[16][27] + coeff0_17*dmats1[17][27] + coeff0_18*dmats1[18][27] + coeff0_19*dmats1[19][27] + coeff0_20*dmats1[20][27] + coeff0_21*dmats1[21][27] + coeff0_22*dmats1[22][27] + coeff0_23*dmats1[23][27] + coeff0_24*dmats1[24][27] + coeff0_25*dmats1[25][27] + coeff0_26*dmats1[26][27] + coeff0_27*dmats1[27][27] + coeff0_28*dmats1[28][27] + coeff0_29*dmats1[29][27] + coeff0_30*dmats1[30][27] + coeff0_31*dmats1[31][27] + coeff0_32*dmats1[32][27] + coeff0_33*dmats1[33][27] + coeff0_34*dmats1[34][27];
          new_coeff0_28 = coeff0_0*dmats1[0][28] + coeff0_1*dmats1[1][28] + coeff0_2*dmats1[2][28] + coeff0_3*dmats1[3][28] + coeff0_4*dmats1[4][28] + coeff0_5*dmats1[5][28] + coeff0_6*dmats1[6][28] + coeff0_7*dmats1[7][28] + coeff0_8*dmats1[8][28] + coeff0_9*dmats1[9][28] + coeff0_10*dmats1[10][28] + coeff0_11*dmats1[11][28] + coeff0_12*dmats1[12][28] + coeff0_13*dmats1[13][28] + coeff0_14*dmats1[14][28] + coeff0_15*dmats1[15][28] + coeff0_16*dmats1[16][28] + coeff0_17*dmats1[17][28] + coeff0_18*dmats1[18][28] + coeff0_19*dmats1[19][28] + coeff0_20*dmats1[20][28] + coeff0_21*dmats1[21][28] + coeff0_22*dmats1[22][28] + coeff0_23*dmats1[23][28] + coeff0_24*dmats1[24][28] + coeff0_25*dmats1[25][28] + coeff0_26*dmats1[26][28] + coeff0_27*dmats1[27][28] + coeff0_28*dmats1[28][28] + coeff0_29*dmats1[29][28] + coeff0_30*dmats1[30][28] + coeff0_31*dmats1[31][28] + coeff0_32*dmats1[32][28] + coeff0_33*dmats1[33][28] + coeff0_34*dmats1[34][28];
          new_coeff0_29 = coeff0_0*dmats1[0][29] + coeff0_1*dmats1[1][29] + coeff0_2*dmats1[2][29] + coeff0_3*dmats1[3][29] + coeff0_4*dmats1[4][29] + coeff0_5*dmats1[5][29] + coeff0_6*dmats1[6][29] + coeff0_7*dmats1[7][29] + coeff0_8*dmats1[8][29] + coeff0_9*dmats1[9][29] + coeff0_10*dmats1[10][29] + coeff0_11*dmats1[11][29] + coeff0_12*dmats1[12][29] + coeff0_13*dmats1[13][29] + coeff0_14*dmats1[14][29] + coeff0_15*dmats1[15][29] + coeff0_16*dmats1[16][29] + coeff0_17*dmats1[17][29] + coeff0_18*dmats1[18][29] + coeff0_19*dmats1[19][29] + coeff0_20*dmats1[20][29] + coeff0_21*dmats1[21][29] + coeff0_22*dmats1[22][29] + coeff0_23*dmats1[23][29] + coeff0_24*dmats1[24][29] + coeff0_25*dmats1[25][29] + coeff0_26*dmats1[26][29] + coeff0_27*dmats1[27][29] + coeff0_28*dmats1[28][29] + coeff0_29*dmats1[29][29] + coeff0_30*dmats1[30][29] + coeff0_31*dmats1[31][29] + coeff0_32*dmats1[32][29] + coeff0_33*dmats1[33][29] + coeff0_34*dmats1[34][29];
          new_coeff0_30 = coeff0_0*dmats1[0][30] + coeff0_1*dmats1[1][30] + coeff0_2*dmats1[2][30] + coeff0_3*dmats1[3][30] + coeff0_4*dmats1[4][30] + coeff0_5*dmats1[5][30] + coeff0_6*dmats1[6][30] + coeff0_7*dmats1[7][30] + coeff0_8*dmats1[8][30] + coeff0_9*dmats1[9][30] + coeff0_10*dmats1[10][30] + coeff0_11*dmats1[11][30] + coeff0_12*dmats1[12][30] + coeff0_13*dmats1[13][30] + coeff0_14*dmats1[14][30] + coeff0_15*dmats1[15][30] + coeff0_16*dmats1[16][30] + coeff0_17*dmats1[17][30] + coeff0_18*dmats1[18][30] + coeff0_19*dmats1[19][30] + coeff0_20*dmats1[20][30] + coeff0_21*dmats1[21][30] + coeff0_22*dmats1[22][30] + coeff0_23*dmats1[23][30] + coeff0_24*dmats1[24][30] + coeff0_25*dmats1[25][30] + coeff0_26*dmats1[26][30] + coeff0_27*dmats1[27][30] + coeff0_28*dmats1[28][30] + coeff0_29*dmats1[29][30] + coeff0_30*dmats1[30][30] + coeff0_31*dmats1[31][30] + coeff0_32*dmats1[32][30] + coeff0_33*dmats1[33][30] + coeff0_34*dmats1[34][30];
          new_coeff0_31 = coeff0_0*dmats1[0][31] + coeff0_1*dmats1[1][31] + coeff0_2*dmats1[2][31] + coeff0_3*dmats1[3][31] + coeff0_4*dmats1[4][31] + coeff0_5*dmats1[5][31] + coeff0_6*dmats1[6][31] + coeff0_7*dmats1[7][31] + coeff0_8*dmats1[8][31] + coeff0_9*dmats1[9][31] + coeff0_10*dmats1[10][31] + coeff0_11*dmats1[11][31] + coeff0_12*dmats1[12][31] + coeff0_13*dmats1[13][31] + coeff0_14*dmats1[14][31] + coeff0_15*dmats1[15][31] + coeff0_16*dmats1[16][31] + coeff0_17*dmats1[17][31] + coeff0_18*dmats1[18][31] + coeff0_19*dmats1[19][31] + coeff0_20*dmats1[20][31] + coeff0_21*dmats1[21][31] + coeff0_22*dmats1[22][31] + coeff0_23*dmats1[23][31] + coeff0_24*dmats1[24][31] + coeff0_25*dmats1[25][31] + coeff0_26*dmats1[26][31] + coeff0_27*dmats1[27][31] + coeff0_28*dmats1[28][31] + coeff0_29*dmats1[29][31] + coeff0_30*dmats1[30][31] + coeff0_31*dmats1[31][31] + coeff0_32*dmats1[32][31] + coeff0_33*dmats1[33][31] + coeff0_34*dmats1[34][31];
          new_coeff0_32 = coeff0_0*dmats1[0][32] + coeff0_1*dmats1[1][32] + coeff0_2*dmats1[2][32] + coeff0_3*dmats1[3][32] + coeff0_4*dmats1[4][32] + coeff0_5*dmats1[5][32] + coeff0_6*dmats1[6][32] + coeff0_7*dmats1[7][32] + coeff0_8*dmats1[8][32] + coeff0_9*dmats1[9][32] + coeff0_10*dmats1[10][32] + coeff0_11*dmats1[11][32] + coeff0_12*dmats1[12][32] + coeff0_13*dmats1[13][32] + coeff0_14*dmats1[14][32] + coeff0_15*dmats1[15][32] + coeff0_16*dmats1[16][32] + coeff0_17*dmats1[17][32] + coeff0_18*dmats1[18][32] + coeff0_19*dmats1[19][32] + coeff0_20*dmats1[20][32] + coeff0_21*dmats1[21][32] + coeff0_22*dmats1[22][32] + coeff0_23*dmats1[23][32] + coeff0_24*dmats1[24][32] + coeff0_25*dmats1[25][32] + coeff0_26*dmats1[26][32] + coeff0_27*dmats1[27][32] + coeff0_28*dmats1[28][32] + coeff0_29*dmats1[29][32] + coeff0_30*dmats1[30][32] + coeff0_31*dmats1[31][32] + coeff0_32*dmats1[32][32] + coeff0_33*dmats1[33][32] + coeff0_34*dmats1[34][32];
          new_coeff0_33 = coeff0_0*dmats1[0][33] + coeff0_1*dmats1[1][33] + coeff0_2*dmats1[2][33] + coeff0_3*dmats1[3][33] + coeff0_4*dmats1[4][33] + coeff0_5*dmats1[5][33] + coeff0_6*dmats1[6][33] + coeff0_7*dmats1[7][33] + coeff0_8*dmats1[8][33] + coeff0_9*dmats1[9][33] + coeff0_10*dmats1[10][33] + coeff0_11*dmats1[11][33] + coeff0_12*dmats1[12][33] + coeff0_13*dmats1[13][33] + coeff0_14*dmats1[14][33] + coeff0_15*dmats1[15][33] + coeff0_16*dmats1[16][33] + coeff0_17*dmats1[17][33] + coeff0_18*dmats1[18][33] + coeff0_19*dmats1[19][33] + coeff0_20*dmats1[20][33] + coeff0_21*dmats1[21][33] + coeff0_22*dmats1[22][33] + coeff0_23*dmats1[23][33] + coeff0_24*dmats1[24][33] + coeff0_25*dmats1[25][33] + coeff0_26*dmats1[26][33] + coeff0_27*dmats1[27][33] + coeff0_28*dmats1[28][33] + coeff0_29*dmats1[29][33] + coeff0_30*dmats1[30][33] + coeff0_31*dmats1[31][33] + coeff0_32*dmats1[32][33] + coeff0_33*dmats1[33][33] + coeff0_34*dmats1[34][33];
          new_coeff0_34 = coeff0_0*dmats1[0][34] + coeff0_1*dmats1[1][34] + coeff0_2*dmats1[2][34] + coeff0_3*dmats1[3][34] + coeff0_4*dmats1[4][34] + coeff0_5*dmats1[5][34] + coeff0_6*dmats1[6][34] + coeff0_7*dmats1[7][34] + coeff0_8*dmats1[8][34] + coeff0_9*dmats1[9][34] + coeff0_10*dmats1[10][34] + coeff0_11*dmats1[11][34] + coeff0_12*dmats1[12][34] + coeff0_13*dmats1[13][34] + coeff0_14*dmats1[14][34] + coeff0_15*dmats1[15][34] + coeff0_16*dmats1[16][34] + coeff0_17*dmats1[17][34] + coeff0_18*dmats1[18][34] + coeff0_19*dmats1[19][34] + coeff0_20*dmats1[20][34] + coeff0_21*dmats1[21][34] + coeff0_22*dmats1[22][34] + coeff0_23*dmats1[23][34] + coeff0_24*dmats1[24][34] + coeff0_25*dmats1[25][34] + coeff0_26*dmats1[26][34] + coeff0_27*dmats1[27][34] + coeff0_28*dmats1[28][34] + coeff0_29*dmats1[29][34] + coeff0_30*dmats1[30][34] + coeff0_31*dmats1[31][34] + coeff0_32*dmats1[32][34] + coeff0_33*dmats1[33][34] + coeff0_34*dmats1[34][34];
        }
        if(combinations[deriv_num][j] == 2)
        {
          new_coeff0_0 = coeff0_0*dmats2[0][0] + coeff0_1*dmats2[1][0] + coeff0_2*dmats2[2][0] + coeff0_3*dmats2[3][0] + coeff0_4*dmats2[4][0] + coeff0_5*dmats2[5][0] + coeff0_6*dmats2[6][0] + coeff0_7*dmats2[7][0] + coeff0_8*dmats2[8][0] + coeff0_9*dmats2[9][0] + coeff0_10*dmats2[10][0] + coeff0_11*dmats2[11][0] + coeff0_12*dmats2[12][0] + coeff0_13*dmats2[13][0] + coeff0_14*dmats2[14][0] + coeff0_15*dmats2[15][0] + coeff0_16*dmats2[16][0] + coeff0_17*dmats2[17][0] + coeff0_18*dmats2[18][0] + coeff0_19*dmats2[19][0] + coeff0_20*dmats2[20][0] + coeff0_21*dmats2[21][0] + coeff0_22*dmats2[22][0] + coeff0_23*dmats2[23][0] + coeff0_24*dmats2[24][0] + coeff0_25*dmats2[25][0] + coeff0_26*dmats2[26][0] + coeff0_27*dmats2[27][0] + coeff0_28*dmats2[28][0] + coeff0_29*dmats2[29][0] + coeff0_30*dmats2[30][0] + coeff0_31*dmats2[31][0] + coeff0_32*dmats2[32][0] + coeff0_33*dmats2[33][0] + coeff0_34*dmats2[34][0];
          new_coeff0_1 = coeff0_0*dmats2[0][1] + coeff0_1*dmats2[1][1] + coeff0_2*dmats2[2][1] + coeff0_3*dmats2[3][1] + coeff0_4*dmats2[4][1] + coeff0_5*dmats2[5][1] + coeff0_6*dmats2[6][1] + coeff0_7*dmats2[7][1] + coeff0_8*dmats2[8][1] + coeff0_9*dmats2[9][1] + coeff0_10*dmats2[10][1] + coeff0_11*dmats2[11][1] + coeff0_12*dmats2[12][1] + coeff0_13*dmats2[13][1] + coeff0_14*dmats2[14][1] + coeff0_15*dmats2[15][1] + coeff0_16*dmats2[16][1] + coeff0_17*dmats2[17][1] + coeff0_18*dmats2[18][1] + coeff0_19*dmats2[19][1] + coeff0_20*dmats2[20][1] + coeff0_21*dmats2[21][1] + coeff0_22*dmats2[22][1] + coeff0_23*dmats2[23][1] + coeff0_24*dmats2[24][1] + coeff0_25*dmats2[25][1] + coeff0_26*dmats2[26][1] + coeff0_27*dmats2[27][1] + coeff0_28*dmats2[28][1] + coeff0_29*dmats2[29][1] + coeff0_30*dmats2[30][1] + coeff0_31*dmats2[31][1] + coeff0_32*dmats2[32][1] + coeff0_33*dmats2[33][1] + coeff0_34*dmats2[34][1];
          new_coeff0_2 = coeff0_0*dmats2[0][2] + coeff0_1*dmats2[1][2] + coeff0_2*dmats2[2][2] + coeff0_3*dmats2[3][2] + coeff0_4*dmats2[4][2] + coeff0_5*dmats2[5][2] + coeff0_6*dmats2[6][2] + coeff0_7*dmats2[7][2] + coeff0_8*dmats2[8][2] + coeff0_9*dmats2[9][2] + coeff0_10*dmats2[10][2] + coeff0_11*dmats2[11][2] + coeff0_12*dmats2[12][2] + coeff0_13*dmats2[13][2] + coeff0_14*dmats2[14][2] + coeff0_15*dmats2[15][2] + coeff0_16*dmats2[16][2] + coeff0_17*dmats2[17][2] + coeff0_18*dmats2[18][2] + coeff0_19*dmats2[19][2] + coeff0_20*dmats2[20][2] + coeff0_21*dmats2[21][2] + coeff0_22*dmats2[22][2] + coeff0_23*dmats2[23][2] + coeff0_24*dmats2[24][2] + coeff0_25*dmats2[25][2] + coeff0_26*dmats2[26][2] + coeff0_27*dmats2[27][2] + coeff0_28*dmats2[28][2] + coeff0_29*dmats2[29][2] + coeff0_30*dmats2[30][2] + coeff0_31*dmats2[31][2] + coeff0_32*dmats2[32][2] + coeff0_33*dmats2[33][2] + coeff0_34*dmats2[34][2];
          new_coeff0_3 = coeff0_0*dmats2[0][3] + coeff0_1*dmats2[1][3] + coeff0_2*dmats2[2][3] + coeff0_3*dmats2[3][3] + coeff0_4*dmats2[4][3] + coeff0_5*dmats2[5][3] + coeff0_6*dmats2[6][3] + coeff0_7*dmats2[7][3] + coeff0_8*dmats2[8][3] + coeff0_9*dmats2[9][3] + coeff0_10*dmats2[10][3] + coeff0_11*dmats2[11][3] + coeff0_12*dmats2[12][3] + coeff0_13*dmats2[13][3] + coeff0_14*dmats2[14][3] + coeff0_15*dmats2[15][3] + coeff0_16*dmats2[16][3] + coeff0_17*dmats2[17][3] + coeff0_18*dmats2[18][3] + coeff0_19*dmats2[19][3] + coeff0_20*dmats2[20][3] + coeff0_21*dmats2[21][3] + coeff0_22*dmats2[22][3] + coeff0_23*dmats2[23][3] + coeff0_24*dmats2[24][3] + coeff0_25*dmats2[25][3] + coeff0_26*dmats2[26][3] + coeff0_27*dmats2[27][3] + coeff0_28*dmats2[28][3] + coeff0_29*dmats2[29][3] + coeff0_30*dmats2[30][3] + coeff0_31*dmats2[31][3] + coeff0_32*dmats2[32][3] + coeff0_33*dmats2[33][3] + coeff0_34*dmats2[34][3];
          new_coeff0_4 = coeff0_0*dmats2[0][4] + coeff0_1*dmats2[1][4] + coeff0_2*dmats2[2][4] + coeff0_3*dmats2[3][4] + coeff0_4*dmats2[4][4] + coeff0_5*dmats2[5][4] + coeff0_6*dmats2[6][4] + coeff0_7*dmats2[7][4] + coeff0_8*dmats2[8][4] + coeff0_9*dmats2[9][4] + coeff0_10*dmats2[10][4] + coeff0_11*dmats2[11][4] + coeff0_12*dmats2[12][4] + coeff0_13*dmats2[13][4] + coeff0_14*dmats2[14][4] + coeff0_15*dmats2[15][4] + coeff0_16*dmats2[16][4] + coeff0_17*dmats2[17][4] + coeff0_18*dmats2[18][4] + coeff0_19*dmats2[19][4] + coeff0_20*dmats2[20][4] + coeff0_21*dmats2[21][4] + coeff0_22*dmats2[22][4] + coeff0_23*dmats2[23][4] + coeff0_24*dmats2[24][4] + coeff0_25*dmats2[25][4] + coeff0_26*dmats2[26][4] + coeff0_27*dmats2[27][4] + coeff0_28*dmats2[28][4] + coeff0_29*dmats2[29][4] + coeff0_30*dmats2[30][4] + coeff0_31*dmats2[31][4] + coeff0_32*dmats2[32][4] + coeff0_33*dmats2[33][4] + coeff0_34*dmats2[34][4];
          new_coeff0_5 = coeff0_0*dmats2[0][5] + coeff0_1*dmats2[1][5] + coeff0_2*dmats2[2][5] + coeff0_3*dmats2[3][5] + coeff0_4*dmats2[4][5] + coeff0_5*dmats2[5][5] + coeff0_6*dmats2[6][5] + coeff0_7*dmats2[7][5] + coeff0_8*dmats2[8][5] + coeff0_9*dmats2[9][5] + coeff0_10*dmats2[10][5] + coeff0_11*dmats2[11][5] + coeff0_12*dmats2[12][5] + coeff0_13*dmats2[13][5] + coeff0_14*dmats2[14][5] + coeff0_15*dmats2[15][5] + coeff0_16*dmats2[16][5] + coeff0_17*dmats2[17][5] + coeff0_18*dmats2[18][5] + coeff0_19*dmats2[19][5] + coeff0_20*dmats2[20][5] + coeff0_21*dmats2[21][5] + coeff0_22*dmats2[22][5] + coeff0_23*dmats2[23][5] + coeff0_24*dmats2[24][5] + coeff0_25*dmats2[25][5] + coeff0_26*dmats2[26][5] + coeff0_27*dmats2[27][5] + coeff0_28*dmats2[28][5] + coeff0_29*dmats2[29][5] + coeff0_30*dmats2[30][5] + coeff0_31*dmats2[31][5] + coeff0_32*dmats2[32][5] + coeff0_33*dmats2[33][5] + coeff0_34*dmats2[34][5];
          new_coeff0_6 = coeff0_0*dmats2[0][6] + coeff0_1*dmats2[1][6] + coeff0_2*dmats2[2][6] + coeff0_3*dmats2[3][6] + coeff0_4*dmats2[4][6] + coeff0_5*dmats2[5][6] + coeff0_6*dmats2[6][6] + coeff0_7*dmats2[7][6] + coeff0_8*dmats2[8][6] + coeff0_9*dmats2[9][6] + coeff0_10*dmats2[10][6] + coeff0_11*dmats2[11][6] + coeff0_12*dmats2[12][6] + coeff0_13*dmats2[13][6] + coeff0_14*dmats2[14][6] + coeff0_15*dmats2[15][6] + coeff0_16*dmats2[16][6] + coeff0_17*dmats2[17][6] + coeff0_18*dmats2[18][6] + coeff0_19*dmats2[19][6] + coeff0_20*dmats2[20][6] + coeff0_21*dmats2[21][6] + coeff0_22*dmats2[22][6] + coeff0_23*dmats2[23][6] + coeff0_24*dmats2[24][6] + coeff0_25*dmats2[25][6] + coeff0_26*dmats2[26][6] + coeff0_27*dmats2[27][6] + coeff0_28*dmats2[28][6] + coeff0_29*dmats2[29][6] + coeff0_30*dmats2[30][6] + coeff0_31*dmats2[31][6] + coeff0_32*dmats2[32][6] + coeff0_33*dmats2[33][6] + coeff0_34*dmats2[34][6];
          new_coeff0_7 = coeff0_0*dmats2[0][7] + coeff0_1*dmats2[1][7] + coeff0_2*dmats2[2][7] + coeff0_3*dmats2[3][7] + coeff0_4*dmats2[4][7] + coeff0_5*dmats2[5][7] + coeff0_6*dmats2[6][7] + coeff0_7*dmats2[7][7] + coeff0_8*dmats2[8][7] + coeff0_9*dmats2[9][7] + coeff0_10*dmats2[10][7] + coeff0_11*dmats2[11][7] + coeff0_12*dmats2[12][7] + coeff0_13*dmats2[13][7] + coeff0_14*dmats2[14][7] + coeff0_15*dmats2[15][7] + coeff0_16*dmats2[16][7] + coeff0_17*dmats2[17][7] + coeff0_18*dmats2[18][7] + coeff0_19*dmats2[19][7] + coeff0_20*dmats2[20][7] + coeff0_21*dmats2[21][7] + coeff0_22*dmats2[22][7] + coeff0_23*dmats2[23][7] + coeff0_24*dmats2[24][7] + coeff0_25*dmats2[25][7] + coeff0_26*dmats2[26][7] + coeff0_27*dmats2[27][7] + coeff0_28*dmats2[28][7] + coeff0_29*dmats2[29][7] + coeff0_30*dmats2[30][7] + coeff0_31*dmats2[31][7] + coeff0_32*dmats2[32][7] + coeff0_33*dmats2[33][7] + coeff0_34*dmats2[34][7];
          new_coeff0_8 = coeff0_0*dmats2[0][8] + coeff0_1*dmats2[1][8] + coeff0_2*dmats2[2][8] + coeff0_3*dmats2[3][8] + coeff0_4*dmats2[4][8] + coeff0_5*dmats2[5][8] + coeff0_6*dmats2[6][8] + coeff0_7*dmats2[7][8] + coeff0_8*dmats2[8][8] + coeff0_9*dmats2[9][8] + coeff0_10*dmats2[10][8] + coeff0_11*dmats2[11][8] + coeff0_12*dmats2[12][8] + coeff0_13*dmats2[13][8] + coeff0_14*dmats2[14][8] + coeff0_15*dmats2[15][8] + coeff0_16*dmats2[16][8] + coeff0_17*dmats2[17][8] + coeff0_18*dmats2[18][8] + coeff0_19*dmats2[19][8] + coeff0_20*dmats2[20][8] + coeff0_21*dmats2[21][8] + coeff0_22*dmats2[22][8] + coeff0_23*dmats2[23][8] + coeff0_24*dmats2[24][8] + coeff0_25*dmats2[25][8] + coeff0_26*dmats2[26][8] + coeff0_27*dmats2[27][8] + coeff0_28*dmats2[28][8] + coeff0_29*dmats2[29][8] + coeff0_30*dmats2[30][8] + coeff0_31*dmats2[31][8] + coeff0_32*dmats2[32][8] + coeff0_33*dmats2[33][8] + coeff0_34*dmats2[34][8];
          new_coeff0_9 = coeff0_0*dmats2[0][9] + coeff0_1*dmats2[1][9] + coeff0_2*dmats2[2][9] + coeff0_3*dmats2[3][9] + coeff0_4*dmats2[4][9] + coeff0_5*dmats2[5][9] + coeff0_6*dmats2[6][9] + coeff0_7*dmats2[7][9] + coeff0_8*dmats2[8][9] + coeff0_9*dmats2[9][9] + coeff0_10*dmats2[10][9] + coeff0_11*dmats2[11][9] + coeff0_12*dmats2[12][9] + coeff0_13*dmats2[13][9] + coeff0_14*dmats2[14][9] + coeff0_15*dmats2[15][9] + coeff0_16*dmats2[16][9] + coeff0_17*dmats2[17][9] + coeff0_18*dmats2[18][9] + coeff0_19*dmats2[19][9] + coeff0_20*dmats2[20][9] + coeff0_21*dmats2[21][9] + coeff0_22*dmats2[22][9] + coeff0_23*dmats2[23][9] + coeff0_24*dmats2[24][9] + coeff0_25*dmats2[25][9] + coeff0_26*dmats2[26][9] + coeff0_27*dmats2[27][9] + coeff0_28*dmats2[28][9] + coeff0_29*dmats2[29][9] + coeff0_30*dmats2[30][9] + coeff0_31*dmats2[31][9] + coeff0_32*dmats2[32][9] + coeff0_33*dmats2[33][9] + coeff0_34*dmats2[34][9];
          new_coeff0_10 = coeff0_0*dmats2[0][10] + coeff0_1*dmats2[1][10] + coeff0_2*dmats2[2][10] + coeff0_3*dmats2[3][10] + coeff0_4*dmats2[4][10] + coeff0_5*dmats2[5][10] + coeff0_6*dmats2[6][10] + coeff0_7*dmats2[7][10] + coeff0_8*dmats2[8][10] + coeff0_9*dmats2[9][10] + coeff0_10*dmats2[10][10] + coeff0_11*dmats2[11][10] + coeff0_12*dmats2[12][10] + coeff0_13*dmats2[13][10] + coeff0_14*dmats2[14][10] + coeff0_15*dmats2[15][10] + coeff0_16*dmats2[16][10] + coeff0_17*dmats2[17][10] + coeff0_18*dmats2[18][10] + coeff0_19*dmats2[19][10] + coeff0_20*dmats2[20][10] + coeff0_21*dmats2[21][10] + coeff0_22*dmats2[22][10] + coeff0_23*dmats2[23][10] + coeff0_24*dmats2[24][10] + coeff0_25*dmats2[25][10] + coeff0_26*dmats2[26][10] + coeff0_27*dmats2[27][10] + coeff0_28*dmats2[28][10] + coeff0_29*dmats2[29][10] + coeff0_30*dmats2[30][10] + coeff0_31*dmats2[31][10] + coeff0_32*dmats2[32][10] + coeff0_33*dmats2[33][10] + coeff0_34*dmats2[34][10];
          new_coeff0_11 = coeff0_0*dmats2[0][11] + coeff0_1*dmats2[1][11] + coeff0_2*dmats2[2][11] + coeff0_3*dmats2[3][11] + coeff0_4*dmats2[4][11] + coeff0_5*dmats2[5][11] + coeff0_6*dmats2[6][11] + coeff0_7*dmats2[7][11] + coeff0_8*dmats2[8][11] + coeff0_9*dmats2[9][11] + coeff0_10*dmats2[10][11] + coeff0_11*dmats2[11][11] + coeff0_12*dmats2[12][11] + coeff0_13*dmats2[13][11] + coeff0_14*dmats2[14][11] + coeff0_15*dmats2[15][11] + coeff0_16*dmats2[16][11] + coeff0_17*dmats2[17][11] + coeff0_18*dmats2[18][11] + coeff0_19*dmats2[19][11] + coeff0_20*dmats2[20][11] + coeff0_21*dmats2[21][11] + coeff0_22*dmats2[22][11] + coeff0_23*dmats2[23][11] + coeff0_24*dmats2[24][11] + coeff0_25*dmats2[25][11] + coeff0_26*dmats2[26][11] + coeff0_27*dmats2[27][11] + coeff0_28*dmats2[28][11] + coeff0_29*dmats2[29][11] + coeff0_30*dmats2[30][11] + coeff0_31*dmats2[31][11] + coeff0_32*dmats2[32][11] + coeff0_33*dmats2[33][11] + coeff0_34*dmats2[34][11];
          new_coeff0_12 = coeff0_0*dmats2[0][12] + coeff0_1*dmats2[1][12] + coeff0_2*dmats2[2][12] + coeff0_3*dmats2[3][12] + coeff0_4*dmats2[4][12] + coeff0_5*dmats2[5][12] + coeff0_6*dmats2[6][12] + coeff0_7*dmats2[7][12] + coeff0_8*dmats2[8][12] + coeff0_9*dmats2[9][12] + coeff0_10*dmats2[10][12] + coeff0_11*dmats2[11][12] + coeff0_12*dmats2[12][12] + coeff0_13*dmats2[13][12] + coeff0_14*dmats2[14][12] + coeff0_15*dmats2[15][12] + coeff0_16*dmats2[16][12] + coeff0_17*dmats2[17][12] + coeff0_18*dmats2[18][12] + coeff0_19*dmats2[19][12] + coeff0_20*dmats2[20][12] + coeff0_21*dmats2[21][12] + coeff0_22*dmats2[22][12] + coeff0_23*dmats2[23][12] + coeff0_24*dmats2[24][12] + coeff0_25*dmats2[25][12] + coeff0_26*dmats2[26][12] + coeff0_27*dmats2[27][12] + coeff0_28*dmats2[28][12] + coeff0_29*dmats2[29][12] + coeff0_30*dmats2[30][12] + coeff0_31*dmats2[31][12] + coeff0_32*dmats2[32][12] + coeff0_33*dmats2[33][12] + coeff0_34*dmats2[34][12];
          new_coeff0_13 = coeff0_0*dmats2[0][13] + coeff0_1*dmats2[1][13] + coeff0_2*dmats2[2][13] + coeff0_3*dmats2[3][13] + coeff0_4*dmats2[4][13] + coeff0_5*dmats2[5][13] + coeff0_6*dmats2[6][13] + coeff0_7*dmats2[7][13] + coeff0_8*dmats2[8][13] + coeff0_9*dmats2[9][13] + coeff0_10*dmats2[10][13] + coeff0_11*dmats2[11][13] + coeff0_12*dmats2[12][13] + coeff0_13*dmats2[13][13] + coeff0_14*dmats2[14][13] + coeff0_15*dmats2[15][13] + coeff0_16*dmats2[16][13] + coeff0_17*dmats2[17][13] + coeff0_18*dmats2[18][13] + coeff0_19*dmats2[19][13] + coeff0_20*dmats2[20][13] + coeff0_21*dmats2[21][13] + coeff0_22*dmats2[22][13] + coeff0_23*dmats2[23][13] + coeff0_24*dmats2[24][13] + coeff0_25*dmats2[25][13] + coeff0_26*dmats2[26][13] + coeff0_27*dmats2[27][13] + coeff0_28*dmats2[28][13] + coeff0_29*dmats2[29][13] + coeff0_30*dmats2[30][13] + coeff0_31*dmats2[31][13] + coeff0_32*dmats2[32][13] + coeff0_33*dmats2[33][13] + coeff0_34*dmats2[34][13];
          new_coeff0_14 = coeff0_0*dmats2[0][14] + coeff0_1*dmats2[1][14] + coeff0_2*dmats2[2][14] + coeff0_3*dmats2[3][14] + coeff0_4*dmats2[4][14] + coeff0_5*dmats2[5][14] + coeff0_6*dmats2[6][14] + coeff0_7*dmats2[7][14] + coeff0_8*dmats2[8][14] + coeff0_9*dmats2[9][14] + coeff0_10*dmats2[10][14] + coeff0_11*dmats2[11][14] + coeff0_12*dmats2[12][14] + coeff0_13*dmats2[13][14] + coeff0_14*dmats2[14][14] + coeff0_15*dmats2[15][14] + coeff0_16*dmats2[16][14] + coeff0_17*dmats2[17][14] + coeff0_18*dmats2[18][14] + coeff0_19*dmats2[19][14] + coeff0_20*dmats2[20][14] + coeff0_21*dmats2[21][14] + coeff0_22*dmats2[22][14] + coeff0_23*dmats2[23][14] + coeff0_24*dmats2[24][14] + coeff0_25*dmats2[25][14] + coeff0_26*dmats2[26][14] + coeff0_27*dmats2[27][14] + coeff0_28*dmats2[28][14] + coeff0_29*dmats2[29][14] + coeff0_30*dmats2[30][14] + coeff0_31*dmats2[31][14] + coeff0_32*dmats2[32][14] + coeff0_33*dmats2[33][14] + coeff0_34*dmats2[34][14];
          new_coeff0_15 = coeff0_0*dmats2[0][15] + coeff0_1*dmats2[1][15] + coeff0_2*dmats2[2][15] + coeff0_3*dmats2[3][15] + coeff0_4*dmats2[4][15] + coeff0_5*dmats2[5][15] + coeff0_6*dmats2[6][15] + coeff0_7*dmats2[7][15] + coeff0_8*dmats2[8][15] + coeff0_9*dmats2[9][15] + coeff0_10*dmats2[10][15] + coeff0_11*dmats2[11][15] + coeff0_12*dmats2[12][15] + coeff0_13*dmats2[13][15] + coeff0_14*dmats2[14][15] + coeff0_15*dmats2[15][15] + coeff0_16*dmats2[16][15] + coeff0_17*dmats2[17][15] + coeff0_18*dmats2[18][15] + coeff0_19*dmats2[19][15] + coeff0_20*dmats2[20][15] + coeff0_21*dmats2[21][15] + coeff0_22*dmats2[22][15] + coeff0_23*dmats2[23][15] + coeff0_24*dmats2[24][15] + coeff0_25*dmats2[25][15] + coeff0_26*dmats2[26][15] + coeff0_27*dmats2[27][15] + coeff0_28*dmats2[28][15] + coeff0_29*dmats2[29][15] + coeff0_30*dmats2[30][15] + coeff0_31*dmats2[31][15] + coeff0_32*dmats2[32][15] + coeff0_33*dmats2[33][15] + coeff0_34*dmats2[34][15];
          new_coeff0_16 = coeff0_0*dmats2[0][16] + coeff0_1*dmats2[1][16] + coeff0_2*dmats2[2][16] + coeff0_3*dmats2[3][16] + coeff0_4*dmats2[4][16] + coeff0_5*dmats2[5][16] + coeff0_6*dmats2[6][16] + coeff0_7*dmats2[7][16] + coeff0_8*dmats2[8][16] + coeff0_9*dmats2[9][16] + coeff0_10*dmats2[10][16] + coeff0_11*dmats2[11][16] + coeff0_12*dmats2[12][16] + coeff0_13*dmats2[13][16] + coeff0_14*dmats2[14][16] + coeff0_15*dmats2[15][16] + coeff0_16*dmats2[16][16] + coeff0_17*dmats2[17][16] + coeff0_18*dmats2[18][16] + coeff0_19*dmats2[19][16] + coeff0_20*dmats2[20][16] + coeff0_21*dmats2[21][16] + coeff0_22*dmats2[22][16] + coeff0_23*dmats2[23][16] + coeff0_24*dmats2[24][16] + coeff0_25*dmats2[25][16] + coeff0_26*dmats2[26][16] + coeff0_27*dmats2[27][16] + coeff0_28*dmats2[28][16] + coeff0_29*dmats2[29][16] + coeff0_30*dmats2[30][16] + coeff0_31*dmats2[31][16] + coeff0_32*dmats2[32][16] + coeff0_33*dmats2[33][16] + coeff0_34*dmats2[34][16];
          new_coeff0_17 = coeff0_0*dmats2[0][17] + coeff0_1*dmats2[1][17] + coeff0_2*dmats2[2][17] + coeff0_3*dmats2[3][17] + coeff0_4*dmats2[4][17] + coeff0_5*dmats2[5][17] + coeff0_6*dmats2[6][17] + coeff0_7*dmats2[7][17] + coeff0_8*dmats2[8][17] + coeff0_9*dmats2[9][17] + coeff0_10*dmats2[10][17] + coeff0_11*dmats2[11][17] + coeff0_12*dmats2[12][17] + coeff0_13*dmats2[13][17] + coeff0_14*dmats2[14][17] + coeff0_15*dmats2[15][17] + coeff0_16*dmats2[16][17] + coeff0_17*dmats2[17][17] + coeff0_18*dmats2[18][17] + coeff0_19*dmats2[19][17] + coeff0_20*dmats2[20][17] + coeff0_21*dmats2[21][17] + coeff0_22*dmats2[22][17] + coeff0_23*dmats2[23][17] + coeff0_24*dmats2[24][17] + coeff0_25*dmats2[25][17] + coeff0_26*dmats2[26][17] + coeff0_27*dmats2[27][17] + coeff0_28*dmats2[28][17] + coeff0_29*dmats2[29][17] + coeff0_30*dmats2[30][17] + coeff0_31*dmats2[31][17] + coeff0_32*dmats2[32][17] + coeff0_33*dmats2[33][17] + coeff0_34*dmats2[34][17];
          new_coeff0_18 = coeff0_0*dmats2[0][18] + coeff0_1*dmats2[1][18] + coeff0_2*dmats2[2][18] + coeff0_3*dmats2[3][18] + coeff0_4*dmats2[4][18] + coeff0_5*dmats2[5][18] + coeff0_6*dmats2[6][18] + coeff0_7*dmats2[7][18] + coeff0_8*dmats2[8][18] + coeff0_9*dmats2[9][18] + coeff0_10*dmats2[10][18] + coeff0_11*dmats2[11][18] + coeff0_12*dmats2[12][18] + coeff0_13*dmats2[13][18] + coeff0_14*dmats2[14][18] + coeff0_15*dmats2[15][18] + coeff0_16*dmats2[16][18] + coeff0_17*dmats2[17][18] + coeff0_18*dmats2[18][18] + coeff0_19*dmats2[19][18] + coeff0_20*dmats2[20][18] + coeff0_21*dmats2[21][18] + coeff0_22*dmats2[22][18] + coeff0_23*dmats2[23][18] + coeff0_24*dmats2[24][18] + coeff0_25*dmats2[25][18] + coeff0_26*dmats2[26][18] + coeff0_27*dmats2[27][18] + coeff0_28*dmats2[28][18] + coeff0_29*dmats2[29][18] + coeff0_30*dmats2[30][18] + coeff0_31*dmats2[31][18] + coeff0_32*dmats2[32][18] + coeff0_33*dmats2[33][18] + coeff0_34*dmats2[34][18];
          new_coeff0_19 = coeff0_0*dmats2[0][19] + coeff0_1*dmats2[1][19] + coeff0_2*dmats2[2][19] + coeff0_3*dmats2[3][19] + coeff0_4*dmats2[4][19] + coeff0_5*dmats2[5][19] + coeff0_6*dmats2[6][19] + coeff0_7*dmats2[7][19] + coeff0_8*dmats2[8][19] + coeff0_9*dmats2[9][19] + coeff0_10*dmats2[10][19] + coeff0_11*dmats2[11][19] + coeff0_12*dmats2[12][19] + coeff0_13*dmats2[13][19] + coeff0_14*dmats2[14][19] + coeff0_15*dmats2[15][19] + coeff0_16*dmats2[16][19] + coeff0_17*dmats2[17][19] + coeff0_18*dmats2[18][19] + coeff0_19*dmats2[19][19] + coeff0_20*dmats2[20][19] + coeff0_21*dmats2[21][19] + coeff0_22*dmats2[22][19] + coeff0_23*dmats2[23][19] + coeff0_24*dmats2[24][19] + coeff0_25*dmats2[25][19] + coeff0_26*dmats2[26][19] + coeff0_27*dmats2[27][19] + coeff0_28*dmats2[28][19] + coeff0_29*dmats2[29][19] + coeff0_30*dmats2[30][19] + coeff0_31*dmats2[31][19] + coeff0_32*dmats2[32][19] + coeff0_33*dmats2[33][19] + coeff0_34*dmats2[34][19];
          new_coeff0_20 = coeff0_0*dmats2[0][20] + coeff0_1*dmats2[1][20] + coeff0_2*dmats2[2][20] + coeff0_3*dmats2[3][20] + coeff0_4*dmats2[4][20] + coeff0_5*dmats2[5][20] + coeff0_6*dmats2[6][20] + coeff0_7*dmats2[7][20] + coeff0_8*dmats2[8][20] + coeff0_9*dmats2[9][20] + coeff0_10*dmats2[10][20] + coeff0_11*dmats2[11][20] + coeff0_12*dmats2[12][20] + coeff0_13*dmats2[13][20] + coeff0_14*dmats2[14][20] + coeff0_15*dmats2[15][20] + coeff0_16*dmats2[16][20] + coeff0_17*dmats2[17][20] + coeff0_18*dmats2[18][20] + coeff0_19*dmats2[19][20] + coeff0_20*dmats2[20][20] + coeff0_21*dmats2[21][20] + coeff0_22*dmats2[22][20] + coeff0_23*dmats2[23][20] + coeff0_24*dmats2[24][20] + coeff0_25*dmats2[25][20] + coeff0_26*dmats2[26][20] + coeff0_27*dmats2[27][20] + coeff0_28*dmats2[28][20] + coeff0_29*dmats2[29][20] + coeff0_30*dmats2[30][20] + coeff0_31*dmats2[31][20] + coeff0_32*dmats2[32][20] + coeff0_33*dmats2[33][20] + coeff0_34*dmats2[34][20];
          new_coeff0_21 = coeff0_0*dmats2[0][21] + coeff0_1*dmats2[1][21] + coeff0_2*dmats2[2][21] + coeff0_3*dmats2[3][21] + coeff0_4*dmats2[4][21] + coeff0_5*dmats2[5][21] + coeff0_6*dmats2[6][21] + coeff0_7*dmats2[7][21] + coeff0_8*dmats2[8][21] + coeff0_9*dmats2[9][21] + coeff0_10*dmats2[10][21] + coeff0_11*dmats2[11][21] + coeff0_12*dmats2[12][21] + coeff0_13*dmats2[13][21] + coeff0_14*dmats2[14][21] + coeff0_15*dmats2[15][21] + coeff0_16*dmats2[16][21] + coeff0_17*dmats2[17][21] + coeff0_18*dmats2[18][21] + coeff0_19*dmats2[19][21] + coeff0_20*dmats2[20][21] + coeff0_21*dmats2[21][21] + coeff0_22*dmats2[22][21] + coeff0_23*dmats2[23][21] + coeff0_24*dmats2[24][21] + coeff0_25*dmats2[25][21] + coeff0_26*dmats2[26][21] + coeff0_27*dmats2[27][21] + coeff0_28*dmats2[28][21] + coeff0_29*dmats2[29][21] + coeff0_30*dmats2[30][21] + coeff0_31*dmats2[31][21] + coeff0_32*dmats2[32][21] + coeff0_33*dmats2[33][21] + coeff0_34*dmats2[34][21];
          new_coeff0_22 = coeff0_0*dmats2[0][22] + coeff0_1*dmats2[1][22] + coeff0_2*dmats2[2][22] + coeff0_3*dmats2[3][22] + coeff0_4*dmats2[4][22] + coeff0_5*dmats2[5][22] + coeff0_6*dmats2[6][22] + coeff0_7*dmats2[7][22] + coeff0_8*dmats2[8][22] + coeff0_9*dmats2[9][22] + coeff0_10*dmats2[10][22] + coeff0_11*dmats2[11][22] + coeff0_12*dmats2[12][22] + coeff0_13*dmats2[13][22] + coeff0_14*dmats2[14][22] + coeff0_15*dmats2[15][22] + coeff0_16*dmats2[16][22] + coeff0_17*dmats2[17][22] + coeff0_18*dmats2[18][22] + coeff0_19*dmats2[19][22] + coeff0_20*dmats2[20][22] + coeff0_21*dmats2[21][22] + coeff0_22*dmats2[22][22] + coeff0_23*dmats2[23][22] + coeff0_24*dmats2[24][22] + coeff0_25*dmats2[25][22] + coeff0_26*dmats2[26][22] + coeff0_27*dmats2[27][22] + coeff0_28*dmats2[28][22] + coeff0_29*dmats2[29][22] + coeff0_30*dmats2[30][22] + coeff0_31*dmats2[31][22] + coeff0_32*dmats2[32][22] + coeff0_33*dmats2[33][22] + coeff0_34*dmats2[34][22];
          new_coeff0_23 = coeff0_0*dmats2[0][23] + coeff0_1*dmats2[1][23] + coeff0_2*dmats2[2][23] + coeff0_3*dmats2[3][23] + coeff0_4*dmats2[4][23] + coeff0_5*dmats2[5][23] + coeff0_6*dmats2[6][23] + coeff0_7*dmats2[7][23] + coeff0_8*dmats2[8][23] + coeff0_9*dmats2[9][23] + coeff0_10*dmats2[10][23] + coeff0_11*dmats2[11][23] + coeff0_12*dmats2[12][23] + coeff0_13*dmats2[13][23] + coeff0_14*dmats2[14][23] + coeff0_15*dmats2[15][23] + coeff0_16*dmats2[16][23] + coeff0_17*dmats2[17][23] + coeff0_18*dmats2[18][23] + coeff0_19*dmats2[19][23] + coeff0_20*dmats2[20][23] + coeff0_21*dmats2[21][23] + coeff0_22*dmats2[22][23] + coeff0_23*dmats2[23][23] + coeff0_24*dmats2[24][23] + coeff0_25*dmats2[25][23] + coeff0_26*dmats2[26][23] + coeff0_27*dmats2[27][23] + coeff0_28*dmats2[28][23] + coeff0_29*dmats2[29][23] + coeff0_30*dmats2[30][23] + coeff0_31*dmats2[31][23] + coeff0_32*dmats2[32][23] + coeff0_33*dmats2[33][23] + coeff0_34*dmats2[34][23];
          new_coeff0_24 = coeff0_0*dmats2[0][24] + coeff0_1*dmats2[1][24] + coeff0_2*dmats2[2][24] + coeff0_3*dmats2[3][24] + coeff0_4*dmats2[4][24] + coeff0_5*dmats2[5][24] + coeff0_6*dmats2[6][24] + coeff0_7*dmats2[7][24] + coeff0_8*dmats2[8][24] + coeff0_9*dmats2[9][24] + coeff0_10*dmats2[10][24] + coeff0_11*dmats2[11][24] + coeff0_12*dmats2[12][24] + coeff0_13*dmats2[13][24] + coeff0_14*dmats2[14][24] + coeff0_15*dmats2[15][24] + coeff0_16*dmats2[16][24] + coeff0_17*dmats2[17][24] + coeff0_18*dmats2[18][24] + coeff0_19*dmats2[19][24] + coeff0_20*dmats2[20][24] + coeff0_21*dmats2[21][24] + coeff0_22*dmats2[22][24] + coeff0_23*dmats2[23][24] + coeff0_24*dmats2[24][24] + coeff0_25*dmats2[25][24] + coeff0_26*dmats2[26][24] + coeff0_27*dmats2[27][24] + coeff0_28*dmats2[28][24] + coeff0_29*dmats2[29][24] + coeff0_30*dmats2[30][24] + coeff0_31*dmats2[31][24] + coeff0_32*dmats2[32][24] + coeff0_33*dmats2[33][24] + coeff0_34*dmats2[34][24];
          new_coeff0_25 = coeff0_0*dmats2[0][25] + coeff0_1*dmats2[1][25] + coeff0_2*dmats2[2][25] + coeff0_3*dmats2[3][25] + coeff0_4*dmats2[4][25] + coeff0_5*dmats2[5][25] + coeff0_6*dmats2[6][25] + coeff0_7*dmats2[7][25] + coeff0_8*dmats2[8][25] + coeff0_9*dmats2[9][25] + coeff0_10*dmats2[10][25] + coeff0_11*dmats2[11][25] + coeff0_12*dmats2[12][25] + coeff0_13*dmats2[13][25] + coeff0_14*dmats2[14][25] + coeff0_15*dmats2[15][25] + coeff0_16*dmats2[16][25] + coeff0_17*dmats2[17][25] + coeff0_18*dmats2[18][25] + coeff0_19*dmats2[19][25] + coeff0_20*dmats2[20][25] + coeff0_21*dmats2[21][25] + coeff0_22*dmats2[22][25] + coeff0_23*dmats2[23][25] + coeff0_24*dmats2[24][25] + coeff0_25*dmats2[25][25] + coeff0_26*dmats2[26][25] + coeff0_27*dmats2[27][25] + coeff0_28*dmats2[28][25] + coeff0_29*dmats2[29][25] + coeff0_30*dmats2[30][25] + coeff0_31*dmats2[31][25] + coeff0_32*dmats2[32][25] + coeff0_33*dmats2[33][25] + coeff0_34*dmats2[34][25];
          new_coeff0_26 = coeff0_0*dmats2[0][26] + coeff0_1*dmats2[1][26] + coeff0_2*dmats2[2][26] + coeff0_3*dmats2[3][26] + coeff0_4*dmats2[4][26] + coeff0_5*dmats2[5][26] + coeff0_6*dmats2[6][26] + coeff0_7*dmats2[7][26] + coeff0_8*dmats2[8][26] + coeff0_9*dmats2[9][26] + coeff0_10*dmats2[10][26] + coeff0_11*dmats2[11][26] + coeff0_12*dmats2[12][26] + coeff0_13*dmats2[13][26] + coeff0_14*dmats2[14][26] + coeff0_15*dmats2[15][26] + coeff0_16*dmats2[16][26] + coeff0_17*dmats2[17][26] + coeff0_18*dmats2[18][26] + coeff0_19*dmats2[19][26] + coeff0_20*dmats2[20][26] + coeff0_21*dmats2[21][26] + coeff0_22*dmats2[22][26] + coeff0_23*dmats2[23][26] + coeff0_24*dmats2[24][26] + coeff0_25*dmats2[25][26] + coeff0_26*dmats2[26][26] + coeff0_27*dmats2[27][26] + coeff0_28*dmats2[28][26] + coeff0_29*dmats2[29][26] + coeff0_30*dmats2[30][26] + coeff0_31*dmats2[31][26] + coeff0_32*dmats2[32][26] + coeff0_33*dmats2[33][26] + coeff0_34*dmats2[34][26];
          new_coeff0_27 = coeff0_0*dmats2[0][27] + coeff0_1*dmats2[1][27] + coeff0_2*dmats2[2][27] + coeff0_3*dmats2[3][27] + coeff0_4*dmats2[4][27] + coeff0_5*dmats2[5][27] + coeff0_6*dmats2[6][27] + coeff0_7*dmats2[7][27] + coeff0_8*dmats2[8][27] + coeff0_9*dmats2[9][27] + coeff0_10*dmats2[10][27] + coeff0_11*dmats2[11][27] + coeff0_12*dmats2[12][27] + coeff0_13*dmats2[13][27] + coeff0_14*dmats2[14][27] + coeff0_15*dmats2[15][27] + coeff0_16*dmats2[16][27] + coeff0_17*dmats2[17][27] + coeff0_18*dmats2[18][27] + coeff0_19*dmats2[19][27] + coeff0_20*dmats2[20][27] + coeff0_21*dmats2[21][27] + coeff0_22*dmats2[22][27] + coeff0_23*dmats2[23][27] + coeff0_24*dmats2[24][27] + coeff0_25*dmats2[25][27] + coeff0_26*dmats2[26][27] + coeff0_27*dmats2[27][27] + coeff0_28*dmats2[28][27] + coeff0_29*dmats2[29][27] + coeff0_30*dmats2[30][27] + coeff0_31*dmats2[31][27] + coeff0_32*dmats2[32][27] + coeff0_33*dmats2[33][27] + coeff0_34*dmats2[34][27];
          new_coeff0_28 = coeff0_0*dmats2[0][28] + coeff0_1*dmats2[1][28] + coeff0_2*dmats2[2][28] + coeff0_3*dmats2[3][28] + coeff0_4*dmats2[4][28] + coeff0_5*dmats2[5][28] + coeff0_6*dmats2[6][28] + coeff0_7*dmats2[7][28] + coeff0_8*dmats2[8][28] + coeff0_9*dmats2[9][28] + coeff0_10*dmats2[10][28] + coeff0_11*dmats2[11][28] + coeff0_12*dmats2[12][28] + coeff0_13*dmats2[13][28] + coeff0_14*dmats2[14][28] + coeff0_15*dmats2[15][28] + coeff0_16*dmats2[16][28] + coeff0_17*dmats2[17][28] + coeff0_18*dmats2[18][28] + coeff0_19*dmats2[19][28] + coeff0_20*dmats2[20][28] + coeff0_21*dmats2[21][28] + coeff0_22*dmats2[22][28] + coeff0_23*dmats2[23][28] + coeff0_24*dmats2[24][28] + coeff0_25*dmats2[25][28] + coeff0_26*dmats2[26][28] + coeff0_27*dmats2[27][28] + coeff0_28*dmats2[28][28] + coeff0_29*dmats2[29][28] + coeff0_30*dmats2[30][28] + coeff0_31*dmats2[31][28] + coeff0_32*dmats2[32][28] + coeff0_33*dmats2[33][28] + coeff0_34*dmats2[34][28];
          new_coeff0_29 = coeff0_0*dmats2[0][29] + coeff0_1*dmats2[1][29] + coeff0_2*dmats2[2][29] + coeff0_3*dmats2[3][29] + coeff0_4*dmats2[4][29] + coeff0_5*dmats2[5][29] + coeff0_6*dmats2[6][29] + coeff0_7*dmats2[7][29] + coeff0_8*dmats2[8][29] + coeff0_9*dmats2[9][29] + coeff0_10*dmats2[10][29] + coeff0_11*dmats2[11][29] + coeff0_12*dmats2[12][29] + coeff0_13*dmats2[13][29] + coeff0_14*dmats2[14][29] + coeff0_15*dmats2[15][29] + coeff0_16*dmats2[16][29] + coeff0_17*dmats2[17][29] + coeff0_18*dmats2[18][29] + coeff0_19*dmats2[19][29] + coeff0_20*dmats2[20][29] + coeff0_21*dmats2[21][29] + coeff0_22*dmats2[22][29] + coeff0_23*dmats2[23][29] + coeff0_24*dmats2[24][29] + coeff0_25*dmats2[25][29] + coeff0_26*dmats2[26][29] + coeff0_27*dmats2[27][29] + coeff0_28*dmats2[28][29] + coeff0_29*dmats2[29][29] + coeff0_30*dmats2[30][29] + coeff0_31*dmats2[31][29] + coeff0_32*dmats2[32][29] + coeff0_33*dmats2[33][29] + coeff0_34*dmats2[34][29];
          new_coeff0_30 = coeff0_0*dmats2[0][30] + coeff0_1*dmats2[1][30] + coeff0_2*dmats2[2][30] + coeff0_3*dmats2[3][30] + coeff0_4*dmats2[4][30] + coeff0_5*dmats2[5][30] + coeff0_6*dmats2[6][30] + coeff0_7*dmats2[7][30] + coeff0_8*dmats2[8][30] + coeff0_9*dmats2[9][30] + coeff0_10*dmats2[10][30] + coeff0_11*dmats2[11][30] + coeff0_12*dmats2[12][30] + coeff0_13*dmats2[13][30] + coeff0_14*dmats2[14][30] + coeff0_15*dmats2[15][30] + coeff0_16*dmats2[16][30] + coeff0_17*dmats2[17][30] + coeff0_18*dmats2[18][30] + coeff0_19*dmats2[19][30] + coeff0_20*dmats2[20][30] + coeff0_21*dmats2[21][30] + coeff0_22*dmats2[22][30] + coeff0_23*dmats2[23][30] + coeff0_24*dmats2[24][30] + coeff0_25*dmats2[25][30] + coeff0_26*dmats2[26][30] + coeff0_27*dmats2[27][30] + coeff0_28*dmats2[28][30] + coeff0_29*dmats2[29][30] + coeff0_30*dmats2[30][30] + coeff0_31*dmats2[31][30] + coeff0_32*dmats2[32][30] + coeff0_33*dmats2[33][30] + coeff0_34*dmats2[34][30];
          new_coeff0_31 = coeff0_0*dmats2[0][31] + coeff0_1*dmats2[1][31] + coeff0_2*dmats2[2][31] + coeff0_3*dmats2[3][31] + coeff0_4*dmats2[4][31] + coeff0_5*dmats2[5][31] + coeff0_6*dmats2[6][31] + coeff0_7*dmats2[7][31] + coeff0_8*dmats2[8][31] + coeff0_9*dmats2[9][31] + coeff0_10*dmats2[10][31] + coeff0_11*dmats2[11][31] + coeff0_12*dmats2[12][31] + coeff0_13*dmats2[13][31] + coeff0_14*dmats2[14][31] + coeff0_15*dmats2[15][31] + coeff0_16*dmats2[16][31] + coeff0_17*dmats2[17][31] + coeff0_18*dmats2[18][31] + coeff0_19*dmats2[19][31] + coeff0_20*dmats2[20][31] + coeff0_21*dmats2[21][31] + coeff0_22*dmats2[22][31] + coeff0_23*dmats2[23][31] + coeff0_24*dmats2[24][31] + coeff0_25*dmats2[25][31] + coeff0_26*dmats2[26][31] + coeff0_27*dmats2[27][31] + coeff0_28*dmats2[28][31] + coeff0_29*dmats2[29][31] + coeff0_30*dmats2[30][31] + coeff0_31*dmats2[31][31] + coeff0_32*dmats2[32][31] + coeff0_33*dmats2[33][31] + coeff0_34*dmats2[34][31];
          new_coeff0_32 = coeff0_0*dmats2[0][32] + coeff0_1*dmats2[1][32] + coeff0_2*dmats2[2][32] + coeff0_3*dmats2[3][32] + coeff0_4*dmats2[4][32] + coeff0_5*dmats2[5][32] + coeff0_6*dmats2[6][32] + coeff0_7*dmats2[7][32] + coeff0_8*dmats2[8][32] + coeff0_9*dmats2[9][32] + coeff0_10*dmats2[10][32] + coeff0_11*dmats2[11][32] + coeff0_12*dmats2[12][32] + coeff0_13*dmats2[13][32] + coeff0_14*dmats2[14][32] + coeff0_15*dmats2[15][32] + coeff0_16*dmats2[16][32] + coeff0_17*dmats2[17][32] + coeff0_18*dmats2[18][32] + coeff0_19*dmats2[19][32] + coeff0_20*dmats2[20][32] + coeff0_21*dmats2[21][32] + coeff0_22*dmats2[22][32] + coeff0_23*dmats2[23][32] + coeff0_24*dmats2[24][32] + coeff0_25*dmats2[25][32] + coeff0_26*dmats2[26][32] + coeff0_27*dmats2[27][32] + coeff0_28*dmats2[28][32] + coeff0_29*dmats2[29][32] + coeff0_30*dmats2[30][32] + coeff0_31*dmats2[31][32] + coeff0_32*dmats2[32][32] + coeff0_33*dmats2[33][32] + coeff0_34*dmats2[34][32];
          new_coeff0_33 = coeff0_0*dmats2[0][33] + coeff0_1*dmats2[1][33] + coeff0_2*dmats2[2][33] + coeff0_3*dmats2[3][33] + coeff0_4*dmats2[4][33] + coeff0_5*dmats2[5][33] + coeff0_6*dmats2[6][33] + coeff0_7*dmats2[7][33] + coeff0_8*dmats2[8][33] + coeff0_9*dmats2[9][33] + coeff0_10*dmats2[10][33] + coeff0_11*dmats2[11][33] + coeff0_12*dmats2[12][33] + coeff0_13*dmats2[13][33] + coeff0_14*dmats2[14][33] + coeff0_15*dmats2[15][33] + coeff0_16*dmats2[16][33] + coeff0_17*dmats2[17][33] + coeff0_18*dmats2[18][33] + coeff0_19*dmats2[19][33] + coeff0_20*dmats2[20][33] + coeff0_21*dmats2[21][33] + coeff0_22*dmats2[22][33] + coeff0_23*dmats2[23][33] + coeff0_24*dmats2[24][33] + coeff0_25*dmats2[25][33] + coeff0_26*dmats2[26][33] + coeff0_27*dmats2[27][33] + coeff0_28*dmats2[28][33] + coeff0_29*dmats2[29][33] + coeff0_30*dmats2[30][33] + coeff0_31*dmats2[31][33] + coeff0_32*dmats2[32][33] + coeff0_33*dmats2[33][33] + coeff0_34*dmats2[34][33];
          new_coeff0_34 = coeff0_0*dmats2[0][34] + coeff0_1*dmats2[1][34] + coeff0_2*dmats2[2][34] + coeff0_3*dmats2[3][34] + coeff0_4*dmats2[4][34] + coeff0_5*dmats2[5][34] + coeff0_6*dmats2[6][34] + coeff0_7*dmats2[7][34] + coeff0_8*dmats2[8][34] + coeff0_9*dmats2[9][34] + coeff0_10*dmats2[10][34] + coeff0_11*dmats2[11][34] + coeff0_12*dmats2[12][34] + coeff0_13*dmats2[13][34] + coeff0_14*dmats2[14][34] + coeff0_15*dmats2[15][34] + coeff0_16*dmats2[16][34] + coeff0_17*dmats2[17][34] + coeff0_18*dmats2[18][34] + coeff0_19*dmats2[19][34] + coeff0_20*dmats2[20][34] + coeff0_21*dmats2[21][34] + coeff0_22*dmats2[22][34] + coeff0_23*dmats2[23][34] + coeff0_24*dmats2[24][34] + coeff0_25*dmats2[25][34] + coeff0_26*dmats2[26][34] + coeff0_27*dmats2[27][34] + coeff0_28*dmats2[28][34] + coeff0_29*dmats2[29][34] + coeff0_30*dmats2[30][34] + coeff0_31*dmats2[31][34] + coeff0_32*dmats2[32][34] + coeff0_33*dmats2[33][34] + coeff0_34*dmats2[34][34];
        }
    
      }
      // Compute derivatives on reference element as dot product of coefficients and basisvalues
      derivatives[deriv_num] = new_coeff0_0*basisvalue0 + new_coeff0_1*basisvalue1 + new_coeff0_2*basisvalue2 + new_coeff0_3*basisvalue3 + new_coeff0_4*basisvalue4 + new_coeff0_5*basisvalue5 + new_coeff0_6*basisvalue6 + new_coeff0_7*basisvalue7 + new_coeff0_8*basisvalue8 + new_coeff0_9*basisvalue9 + new_coeff0_10*basisvalue10 + new_coeff0_11*basisvalue11 + new_coeff0_12*basisvalue12 + new_coeff0_13*basisvalue13 + new_coeff0_14*basisvalue14 + new_coeff0_15*basisvalue15 + new_coeff0_16*basisvalue16 + new_coeff0_17*basisvalue17 + new_coeff0_18*basisvalue18 + new_coeff0_19*basisvalue19 + new_coeff0_20*basisvalue20 + new_coeff0_21*basisvalue21 + new_coeff0_22*basisvalue22 + new_coeff0_23*basisvalue23 + new_coeff0_24*basisvalue24 + new_coeff0_25*basisvalue25 + new_coeff0_26*basisvalue26 + new_coeff0_27*basisvalue27 + new_coeff0_28*basisvalue28 + new_coeff0_29*basisvalue29 + new_coeff0_30*basisvalue30 + new_coeff0_31*basisvalue31 + new_coeff0_32*basisvalue32 + new_coeff0_33*basisvalue33 + new_coeff0_34*basisvalue34;
    }
    
    // Transform derivatives back to physical element
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        values[row] += transform[row][col]*derivatives[col];
      }
    }
    // Delete pointer to array of derivatives on FIAT element
    delete [] derivatives;
    
    // Delete pointer to array of combinations of derivatives and transform
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      delete [] combinations[row];
      delete [] transform[row];
    }
    
    delete [] combinations;
    delete [] transform;
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis_derivatives() is not yet implemented.");
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // The reference points, direction and weights:
    const static double X[35][1][3] = {{{0, 0, 0}}, {{1, 0, 0}}, {{0, 1, 0}}, {{0, 0, 1}}, {{0, 0.75, 0.25}}, {{0, 0.5, 0.5}}, {{0, 0.25, 0.75}}, {{0.75, 0, 0.25}}, {{0.5, 0, 0.5}}, {{0.25, 0, 0.75}}, {{0.75, 0.25, 0}}, {{0.5, 0.5, 0}}, {{0.25, 0.75, 0}}, {{0, 0, 0.25}}, {{0, 0, 0.5}}, {{0, 0, 0.75}}, {{0, 0.25, 0}}, {{0, 0.5, 0}}, {{0, 0.75, 0}}, {{0.25, 0, 0}}, {{0.5, 0, 0}}, {{0.75, 0, 0}}, {{0.5, 0.25, 0.25}}, {{0.25, 0.5, 0.25}}, {{0.25, 0.25, 0.5}}, {{0, 0.25, 0.25}}, {{0, 0.5, 0.25}}, {{0, 0.25, 0.5}}, {{0.25, 0, 0.25}}, {{0.5, 0, 0.25}}, {{0.25, 0, 0.5}}, {{0.25, 0.25, 0}}, {{0.5, 0.25, 0}}, {{0.25, 0.5, 0}}, {{0.25, 0.25, 0.25}}};
    const static double W[35][1] = {{1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}};
    const static double D[35][1][1] = {{{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}};
    
    const double * const * x = c.coordinates;
    double result = 0.0;
    // Iterate over the points:
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0][0] - X[i][0][1] - X[i][0][2];
    const double w1 = X[i][0][0];
    const double w2 = X[i][0][1];
    const double w3 = X[i][0][2];
    
    // Compute affine mapping y = F(X)
    double y[3];
    y[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0] + w3*x[3][0];
    y[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1] + w3*x[3][1];
    y[2] = w0*x[0][2] + w1*x[1][2] + w2*x[2][2] + w3*x[3][2];
    
    // Evaluate function at physical points
    double values[1];
    f.evaluate(values, y, c);
    
    // Map function values using appropriate mapping
    // Affine map: Do nothing
    
    // Note that we do not map the weights (yet).
    
    // Take directional components
    for(int k = 0; k < 1; k++)
      result += values[k]*D[i][0][k];
    // Multiply by weights 
    result *= W[i][0];
    
    return result;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate at vertices and use affine mapping
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new UFC_Poisson3D_4LinearForm_finite_element_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class UFC_Poisson3D_4LinearForm_dof_map_0: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  UFC_Poisson3D_4LinearForm_dof_map_0() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~UFC_Poisson3D_4LinearForm_dof_map_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for FiniteElement('Lagrange', 'tetrahedron', 4)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      return true;
      break;
    case 1:
      return true;
      break;
    case 2:
      return true;
      break;
    case 3:
      return true;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = m.num_entities[0] + 3*m.num_entities[1] + 3*m.num_entities[2] + m.num_entities[3];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space
  virtual unsigned int local_dimension() const
  {
    return 35;
  }

  // Return the geometric dimension of the coordinates this dof map provides
  virtual unsigned int geometric_dimension() const
  {
    return 3;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 15;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    dofs[3] = c.entity_indices[0][3];
    unsigned int offset = m.num_entities[0];
    dofs[4] = offset + 3*c.entity_indices[1][0];
    dofs[5] = offset + 3*c.entity_indices[1][0] + 1;
    dofs[6] = offset + 3*c.entity_indices[1][0] + 2;
    dofs[7] = offset + 3*c.entity_indices[1][1];
    dofs[8] = offset + 3*c.entity_indices[1][1] + 1;
    dofs[9] = offset + 3*c.entity_indices[1][1] + 2;
    dofs[10] = offset + 3*c.entity_indices[1][2];
    dofs[11] = offset + 3*c.entity_indices[1][2] + 1;
    dofs[12] = offset + 3*c.entity_indices[1][2] + 2;
    dofs[13] = offset + 3*c.entity_indices[1][3];
    dofs[14] = offset + 3*c.entity_indices[1][3] + 1;
    dofs[15] = offset + 3*c.entity_indices[1][3] + 2;
    dofs[16] = offset + 3*c.entity_indices[1][4];
    dofs[17] = offset + 3*c.entity_indices[1][4] + 1;
    dofs[18] = offset + 3*c.entity_indices[1][4] + 2;
    dofs[19] = offset + 3*c.entity_indices[1][5];
    dofs[20] = offset + 3*c.entity_indices[1][5] + 1;
    dofs[21] = offset + 3*c.entity_indices[1][5] + 2;
    offset = offset + 3*m.num_entities[1];
    dofs[22] = offset + 3*c.entity_indices[2][0];
    dofs[23] = offset + 3*c.entity_indices[2][0] + 1;
    dofs[24] = offset + 3*c.entity_indices[2][0] + 2;
    dofs[25] = offset + 3*c.entity_indices[2][1];
    dofs[26] = offset + 3*c.entity_indices[2][1] + 1;
    dofs[27] = offset + 3*c.entity_indices[2][1] + 2;
    dofs[28] = offset + 3*c.entity_indices[2][2];
    dofs[29] = offset + 3*c.entity_indices[2][2] + 1;
    dofs[30] = offset + 3*c.entity_indices[2][2] + 2;
    dofs[31] = offset + 3*c.entity_indices[2][3];
    dofs[32] = offset + 3*c.entity_indices[2][3] + 1;
    dofs[33] = offset + 3*c.entity_indices[2][3] + 2;
    offset = offset + 3*m.num_entities[2];
    dofs[34] = offset + c.entity_indices[3][0];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch (facet)
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 7;
      dofs[7] = 8;
      dofs[8] = 9;
      dofs[9] = 10;
      dofs[10] = 11;
      dofs[11] = 12;
      dofs[12] = 22;
      dofs[13] = 23;
      dofs[14] = 24;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 13;
      dofs[7] = 14;
      dofs[8] = 15;
      dofs[9] = 16;
      dofs[10] = 17;
      dofs[11] = 18;
      dofs[12] = 25;
      dofs[13] = 26;
      dofs[14] = 27;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 7;
      dofs[4] = 8;
      dofs[5] = 9;
      dofs[6] = 13;
      dofs[7] = 14;
      dofs[8] = 15;
      dofs[9] = 19;
      dofs[10] = 20;
      dofs[11] = 21;
      dofs[12] = 28;
      dofs[13] = 29;
      dofs[14] = 30;
      break;
    case 3:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 10;
      dofs[4] = 11;
      dofs[5] = 12;
      dofs[6] = 16;
      dofs[7] = 17;
      dofs[8] = 18;
      dofs[9] = 19;
      dofs[10] = 20;
      dofs[11] = 21;
      dofs[12] = 31;
      dofs[13] = 32;
      dofs[14] = 33;
      break;
    }
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[0][2] = x[0][2];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[1][2] = x[1][2];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[2][2] = x[2][2];
    coordinates[3][0] = x[3][0];
    coordinates[3][1] = x[3][1];
    coordinates[3][2] = x[3][2];
    coordinates[4][0] = 0.75*x[2][0] + 0.25*x[3][0];
    coordinates[4][1] = 0.75*x[2][1] + 0.25*x[3][1];
    coordinates[4][2] = 0.75*x[2][2] + 0.25*x[3][2];
    coordinates[5][0] = 0.5*x[2][0] + 0.5*x[3][0];
    coordinates[5][1] = 0.5*x[2][1] + 0.5*x[3][1];
    coordinates[5][2] = 0.5*x[2][2] + 0.5*x[3][2];
    coordinates[6][0] = 0.25*x[2][0] + 0.75*x[3][0];
    coordinates[6][1] = 0.25*x[2][1] + 0.75*x[3][1];
    coordinates[6][2] = 0.25*x[2][2] + 0.75*x[3][2];
    coordinates[7][0] = 0.75*x[1][0] + 0.25*x[3][0];
    coordinates[7][1] = 0.75*x[1][1] + 0.25*x[3][1];
    coordinates[7][2] = 0.75*x[1][2] + 0.25*x[3][2];
    coordinates[8][0] = 0.5*x[1][0] + 0.5*x[3][0];
    coordinates[8][1] = 0.5*x[1][1] + 0.5*x[3][1];
    coordinates[8][2] = 0.5*x[1][2] + 0.5*x[3][2];
    coordinates[9][0] = 0.25*x[1][0] + 0.75*x[3][0];
    coordinates[9][1] = 0.25*x[1][1] + 0.75*x[3][1];
    coordinates[9][2] = 0.25*x[1][2] + 0.75*x[3][2];
    coordinates[10][0] = 0.75*x[1][0] + 0.25*x[2][0];
    coordinates[10][1] = 0.75*x[1][1] + 0.25*x[2][1];
    coordinates[10][2] = 0.75*x[1][2] + 0.25*x[2][2];
    coordinates[11][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[11][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[11][2] = 0.5*x[1][2] + 0.5*x[2][2];
    coordinates[12][0] = 0.25*x[1][0] + 0.75*x[2][0];
    coordinates[12][1] = 0.25*x[1][1] + 0.75*x[2][1];
    coordinates[12][2] = 0.25*x[1][2] + 0.75*x[2][2];
    coordinates[13][0] = 0.75*x[0][0] + 0.25*x[3][0];
    coordinates[13][1] = 0.75*x[0][1] + 0.25*x[3][1];
    coordinates[13][2] = 0.75*x[0][2] + 0.25*x[3][2];
    coordinates[14][0] = 0.5*x[0][0] + 0.5*x[3][0];
    coordinates[14][1] = 0.5*x[0][1] + 0.5*x[3][1];
    coordinates[14][2] = 0.5*x[0][2] + 0.5*x[3][2];
    coordinates[15][0] = 0.25*x[0][0] + 0.75*x[3][0];
    coordinates[15][1] = 0.25*x[0][1] + 0.75*x[3][1];
    coordinates[15][2] = 0.25*x[0][2] + 0.75*x[3][2];
    coordinates[16][0] = 0.75*x[0][0] + 0.25*x[2][0];
    coordinates[16][1] = 0.75*x[0][1] + 0.25*x[2][1];
    coordinates[16][2] = 0.75*x[0][2] + 0.25*x[2][2];
    coordinates[17][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[17][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[17][2] = 0.5*x[0][2] + 0.5*x[2][2];
    coordinates[18][0] = 0.25*x[0][0] + 0.75*x[2][0];
    coordinates[18][1] = 0.25*x[0][1] + 0.75*x[2][1];
    coordinates[18][2] = 0.25*x[0][2] + 0.75*x[2][2];
    coordinates[19][0] = 0.75*x[0][0] + 0.25*x[1][0];
    coordinates[19][1] = 0.75*x[0][1] + 0.25*x[1][1];
    coordinates[19][2] = 0.75*x[0][2] + 0.25*x[1][2];
    coordinates[20][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[20][1] = 0.5*x[0][1] + 0.5*x[1][1];
    coordinates[20][2] = 0.5*x[0][2] + 0.5*x[1][2];
    coordinates[21][0] = 0.25*x[0][0] + 0.75*x[1][0];
    coordinates[21][1] = 0.25*x[0][1] + 0.75*x[1][1];
    coordinates[21][2] = 0.25*x[0][2] + 0.75*x[1][2];
    coordinates[22][0] = 0.5*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[22][1] = 0.5*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[22][2] = 0.5*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
    coordinates[23][0] = 0.25*x[1][0] + 0.5*x[2][0] + 0.25*x[3][0];
    coordinates[23][1] = 0.25*x[1][1] + 0.5*x[2][1] + 0.25*x[3][1];
    coordinates[23][2] = 0.25*x[1][2] + 0.5*x[2][2] + 0.25*x[3][2];
    coordinates[24][0] = 0.25*x[1][0] + 0.25*x[2][0] + 0.5*x[3][0];
    coordinates[24][1] = 0.25*x[1][1] + 0.25*x[2][1] + 0.5*x[3][1];
    coordinates[24][2] = 0.25*x[1][2] + 0.25*x[2][2] + 0.5*x[3][2];
    coordinates[25][0] = 0.5*x[0][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[25][1] = 0.5*x[0][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[25][2] = 0.5*x[0][2] + 0.25*x[2][2] + 0.25*x[3][2];
    coordinates[26][0] = 0.25*x[0][0] + 0.5*x[2][0] + 0.25*x[3][0];
    coordinates[26][1] = 0.25*x[0][1] + 0.5*x[2][1] + 0.25*x[3][1];
    coordinates[26][2] = 0.25*x[0][2] + 0.5*x[2][2] + 0.25*x[3][2];
    coordinates[27][0] = 0.25*x[0][0] + 0.25*x[2][0] + 0.5*x[3][0];
    coordinates[27][1] = 0.25*x[0][1] + 0.25*x[2][1] + 0.5*x[3][1];
    coordinates[27][2] = 0.25*x[0][2] + 0.25*x[2][2] + 0.5*x[3][2];
    coordinates[28][0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[3][0];
    coordinates[28][1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[3][1];
    coordinates[28][2] = 0.5*x[0][2] + 0.25*x[1][2] + 0.25*x[3][2];
    coordinates[29][0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[3][0];
    coordinates[29][1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[3][1];
    coordinates[29][2] = 0.25*x[0][2] + 0.5*x[1][2] + 0.25*x[3][2];
    coordinates[30][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[3][0];
    coordinates[30][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[3][1];
    coordinates[30][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.5*x[3][2];
    coordinates[31][0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0];
    coordinates[31][1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1];
    coordinates[31][2] = 0.5*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2];
    coordinates[32][0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[2][0];
    coordinates[32][1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[2][1];
    coordinates[32][2] = 0.25*x[0][2] + 0.5*x[1][2] + 0.25*x[2][2];
    coordinates[33][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[2][0];
    coordinates[33][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[2][1];
    coordinates[33][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.5*x[2][2];
    coordinates[34][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[34][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[34][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new UFC_Poisson3D_4LinearForm_dof_map_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class UFC_Poisson3D_4LinearForm_dof_map_1: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  UFC_Poisson3D_4LinearForm_dof_map_1() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~UFC_Poisson3D_4LinearForm_dof_map_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for FiniteElement('Lagrange', 'tetrahedron', 4)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      return true;
      break;
    case 1:
      return true;
      break;
    case 2:
      return true;
      break;
    case 3:
      return true;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = m.num_entities[0] + 3*m.num_entities[1] + 3*m.num_entities[2] + m.num_entities[3];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space
  virtual unsigned int local_dimension() const
  {
    return 35;
  }

  // Return the geometric dimension of the coordinates this dof map provides
  virtual unsigned int geometric_dimension() const
  {
    return 3;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 15;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    dofs[3] = c.entity_indices[0][3];
    unsigned int offset = m.num_entities[0];
    dofs[4] = offset + 3*c.entity_indices[1][0];
    dofs[5] = offset + 3*c.entity_indices[1][0] + 1;
    dofs[6] = offset + 3*c.entity_indices[1][0] + 2;
    dofs[7] = offset + 3*c.entity_indices[1][1];
    dofs[8] = offset + 3*c.entity_indices[1][1] + 1;
    dofs[9] = offset + 3*c.entity_indices[1][1] + 2;
    dofs[10] = offset + 3*c.entity_indices[1][2];
    dofs[11] = offset + 3*c.entity_indices[1][2] + 1;
    dofs[12] = offset + 3*c.entity_indices[1][2] + 2;
    dofs[13] = offset + 3*c.entity_indices[1][3];
    dofs[14] = offset + 3*c.entity_indices[1][3] + 1;
    dofs[15] = offset + 3*c.entity_indices[1][3] + 2;
    dofs[16] = offset + 3*c.entity_indices[1][4];
    dofs[17] = offset + 3*c.entity_indices[1][4] + 1;
    dofs[18] = offset + 3*c.entity_indices[1][4] + 2;
    dofs[19] = offset + 3*c.entity_indices[1][5];
    dofs[20] = offset + 3*c.entity_indices[1][5] + 1;
    dofs[21] = offset + 3*c.entity_indices[1][5] + 2;
    offset = offset + 3*m.num_entities[1];
    dofs[22] = offset + 3*c.entity_indices[2][0];
    dofs[23] = offset + 3*c.entity_indices[2][0] + 1;
    dofs[24] = offset + 3*c.entity_indices[2][0] + 2;
    dofs[25] = offset + 3*c.entity_indices[2][1];
    dofs[26] = offset + 3*c.entity_indices[2][1] + 1;
    dofs[27] = offset + 3*c.entity_indices[2][1] + 2;
    dofs[28] = offset + 3*c.entity_indices[2][2];
    dofs[29] = offset + 3*c.entity_indices[2][2] + 1;
    dofs[30] = offset + 3*c.entity_indices[2][2] + 2;
    dofs[31] = offset + 3*c.entity_indices[2][3];
    dofs[32] = offset + 3*c.entity_indices[2][3] + 1;
    dofs[33] = offset + 3*c.entity_indices[2][3] + 2;
    offset = offset + 3*m.num_entities[2];
    dofs[34] = offset + c.entity_indices[3][0];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch (facet)
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 7;
      dofs[7] = 8;
      dofs[8] = 9;
      dofs[9] = 10;
      dofs[10] = 11;
      dofs[11] = 12;
      dofs[12] = 22;
      dofs[13] = 23;
      dofs[14] = 24;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 13;
      dofs[7] = 14;
      dofs[8] = 15;
      dofs[9] = 16;
      dofs[10] = 17;
      dofs[11] = 18;
      dofs[12] = 25;
      dofs[13] = 26;
      dofs[14] = 27;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 7;
      dofs[4] = 8;
      dofs[5] = 9;
      dofs[6] = 13;
      dofs[7] = 14;
      dofs[8] = 15;
      dofs[9] = 19;
      dofs[10] = 20;
      dofs[11] = 21;
      dofs[12] = 28;
      dofs[13] = 29;
      dofs[14] = 30;
      break;
    case 3:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 10;
      dofs[4] = 11;
      dofs[5] = 12;
      dofs[6] = 16;
      dofs[7] = 17;
      dofs[8] = 18;
      dofs[9] = 19;
      dofs[10] = 20;
      dofs[11] = 21;
      dofs[12] = 31;
      dofs[13] = 32;
      dofs[14] = 33;
      break;
    }
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[0][2] = x[0][2];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[1][2] = x[1][2];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[2][2] = x[2][2];
    coordinates[3][0] = x[3][0];
    coordinates[3][1] = x[3][1];
    coordinates[3][2] = x[3][2];
    coordinates[4][0] = 0.75*x[2][0] + 0.25*x[3][0];
    coordinates[4][1] = 0.75*x[2][1] + 0.25*x[3][1];
    coordinates[4][2] = 0.75*x[2][2] + 0.25*x[3][2];
    coordinates[5][0] = 0.5*x[2][0] + 0.5*x[3][0];
    coordinates[5][1] = 0.5*x[2][1] + 0.5*x[3][1];
    coordinates[5][2] = 0.5*x[2][2] + 0.5*x[3][2];
    coordinates[6][0] = 0.25*x[2][0] + 0.75*x[3][0];
    coordinates[6][1] = 0.25*x[2][1] + 0.75*x[3][1];
    coordinates[6][2] = 0.25*x[2][2] + 0.75*x[3][2];
    coordinates[7][0] = 0.75*x[1][0] + 0.25*x[3][0];
    coordinates[7][1] = 0.75*x[1][1] + 0.25*x[3][1];
    coordinates[7][2] = 0.75*x[1][2] + 0.25*x[3][2];
    coordinates[8][0] = 0.5*x[1][0] + 0.5*x[3][0];
    coordinates[8][1] = 0.5*x[1][1] + 0.5*x[3][1];
    coordinates[8][2] = 0.5*x[1][2] + 0.5*x[3][2];
    coordinates[9][0] = 0.25*x[1][0] + 0.75*x[3][0];
    coordinates[9][1] = 0.25*x[1][1] + 0.75*x[3][1];
    coordinates[9][2] = 0.25*x[1][2] + 0.75*x[3][2];
    coordinates[10][0] = 0.75*x[1][0] + 0.25*x[2][0];
    coordinates[10][1] = 0.75*x[1][1] + 0.25*x[2][1];
    coordinates[10][2] = 0.75*x[1][2] + 0.25*x[2][2];
    coordinates[11][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[11][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[11][2] = 0.5*x[1][2] + 0.5*x[2][2];
    coordinates[12][0] = 0.25*x[1][0] + 0.75*x[2][0];
    coordinates[12][1] = 0.25*x[1][1] + 0.75*x[2][1];
    coordinates[12][2] = 0.25*x[1][2] + 0.75*x[2][2];
    coordinates[13][0] = 0.75*x[0][0] + 0.25*x[3][0];
    coordinates[13][1] = 0.75*x[0][1] + 0.25*x[3][1];
    coordinates[13][2] = 0.75*x[0][2] + 0.25*x[3][2];
    coordinates[14][0] = 0.5*x[0][0] + 0.5*x[3][0];
    coordinates[14][1] = 0.5*x[0][1] + 0.5*x[3][1];
    coordinates[14][2] = 0.5*x[0][2] + 0.5*x[3][2];
    coordinates[15][0] = 0.25*x[0][0] + 0.75*x[3][0];
    coordinates[15][1] = 0.25*x[0][1] + 0.75*x[3][1];
    coordinates[15][2] = 0.25*x[0][2] + 0.75*x[3][2];
    coordinates[16][0] = 0.75*x[0][0] + 0.25*x[2][0];
    coordinates[16][1] = 0.75*x[0][1] + 0.25*x[2][1];
    coordinates[16][2] = 0.75*x[0][2] + 0.25*x[2][2];
    coordinates[17][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[17][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[17][2] = 0.5*x[0][2] + 0.5*x[2][2];
    coordinates[18][0] = 0.25*x[0][0] + 0.75*x[2][0];
    coordinates[18][1] = 0.25*x[0][1] + 0.75*x[2][1];
    coordinates[18][2] = 0.25*x[0][2] + 0.75*x[2][2];
    coordinates[19][0] = 0.75*x[0][0] + 0.25*x[1][0];
    coordinates[19][1] = 0.75*x[0][1] + 0.25*x[1][1];
    coordinates[19][2] = 0.75*x[0][2] + 0.25*x[1][2];
    coordinates[20][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[20][1] = 0.5*x[0][1] + 0.5*x[1][1];
    coordinates[20][2] = 0.5*x[0][2] + 0.5*x[1][2];
    coordinates[21][0] = 0.25*x[0][0] + 0.75*x[1][0];
    coordinates[21][1] = 0.25*x[0][1] + 0.75*x[1][1];
    coordinates[21][2] = 0.25*x[0][2] + 0.75*x[1][2];
    coordinates[22][0] = 0.5*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[22][1] = 0.5*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[22][2] = 0.5*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
    coordinates[23][0] = 0.25*x[1][0] + 0.5*x[2][0] + 0.25*x[3][0];
    coordinates[23][1] = 0.25*x[1][1] + 0.5*x[2][1] + 0.25*x[3][1];
    coordinates[23][2] = 0.25*x[1][2] + 0.5*x[2][2] + 0.25*x[3][2];
    coordinates[24][0] = 0.25*x[1][0] + 0.25*x[2][0] + 0.5*x[3][0];
    coordinates[24][1] = 0.25*x[1][1] + 0.25*x[2][1] + 0.5*x[3][1];
    coordinates[24][2] = 0.25*x[1][2] + 0.25*x[2][2] + 0.5*x[3][2];
    coordinates[25][0] = 0.5*x[0][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[25][1] = 0.5*x[0][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[25][2] = 0.5*x[0][2] + 0.25*x[2][2] + 0.25*x[3][2];
    coordinates[26][0] = 0.25*x[0][0] + 0.5*x[2][0] + 0.25*x[3][0];
    coordinates[26][1] = 0.25*x[0][1] + 0.5*x[2][1] + 0.25*x[3][1];
    coordinates[26][2] = 0.25*x[0][2] + 0.5*x[2][2] + 0.25*x[3][2];
    coordinates[27][0] = 0.25*x[0][0] + 0.25*x[2][0] + 0.5*x[3][0];
    coordinates[27][1] = 0.25*x[0][1] + 0.25*x[2][1] + 0.5*x[3][1];
    coordinates[27][2] = 0.25*x[0][2] + 0.25*x[2][2] + 0.5*x[3][2];
    coordinates[28][0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[3][0];
    coordinates[28][1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[3][1];
    coordinates[28][2] = 0.5*x[0][2] + 0.25*x[1][2] + 0.25*x[3][2];
    coordinates[29][0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[3][0];
    coordinates[29][1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[3][1];
    coordinates[29][2] = 0.25*x[0][2] + 0.5*x[1][2] + 0.25*x[3][2];
    coordinates[30][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[3][0];
    coordinates[30][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[3][1];
    coordinates[30][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.5*x[3][2];
    coordinates[31][0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0];
    coordinates[31][1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1];
    coordinates[31][2] = 0.5*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2];
    coordinates[32][0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[2][0];
    coordinates[32][1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[2][1];
    coordinates[32][2] = 0.25*x[0][2] + 0.5*x[1][2] + 0.25*x[2][2];
    coordinates[33][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[2][0];
    coordinates[33][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[2][1];
    coordinates[33][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.5*x[2][2];
    coordinates[34][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[34][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[34][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new UFC_Poisson3D_4LinearForm_dof_map_1();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class UFC_Poisson3D_4LinearForm_cell_integral_0_quadrature: public ufc::cell_integral
{
public:

  /// Constructor
  UFC_Poisson3D_4LinearForm_cell_integral_0_quadrature() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson3D_4LinearForm_cell_integral_0_quadrature()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
      
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    
    const double d_10 = J_02*J_21 - J_01*J_22;
    
    const double d_20 = J_01*J_12 - J_02*J_11;
      
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
      
    // Compute inverse of Jacobian
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    
    // Array of quadrature weights
    const static double W125[125] = {0.000937439821766984, 0.00144688123847004, 0.00102268701578053, 0.000367520038007324, 4.71653365059364e-05, 0.00161927658526931, 0.00249925473264391, 0.00176652740822439, 0.000634831781565251, 8.1470536312884e-05, 0.00141792453255091, 0.00218848010941898, 0.00154686516950305, 0.000555892406098532, 7.13399262170554e-05, 0.000715891501943862, 0.00110493490770459, 0.000780991938624509, 0.000280662785913662, 3.60185932012982e-05, 0.000152536470498617, 0.000235430746830112, 0.000166407554052789, 5.9801395389292e-05, 7.67455552179798e-06, 0.00189377231486028, 0.00292292216383614, 0.00206598473020027, 0.000742446882427904, 9.52812185081393e-05, 0.00327118722298822, 0.00504887813656484, 0.00356865648488397, 0.00128245763045954, 0.000164582987156811, 0.00286442517370845, 0.00442106570107946, 0.00312490504969682, 0.00112298797668544, 0.000144117599953649, 0.00144621070637857, 0.0022321380949974, 0.00157772357985427, 0.000566981902660164, 7.27630862707133e-05, 0.000308147081155878, 0.000475606241660779, 0.000336168798819301, 0.000120807996789371, 1.55037800172006e-05, 0.00225090157446143, 0.00347412941301361, 0.00245558995953753, 0.00088245817276838, 0.000113249435042247, 0.00388807060532275, 0.00600100004508522, 0.00424163688396193, 0.00152430462570915, 0.00019562019257218, 0.0034046010087031, 0.0052547941847441, 0.00371420241029555, 0.00133476204345558, 0.000171295424533231, 0.00171893840164765, 0.00265307667295562, 0.00187525208922536, 0.000673903851785402, 8.64848134932762e-05, 0.000366257730507922, 0.000565296487744311, 0.00039956380849458, 0.000143590075769372, 1.8427496577589e-05, 0.00189377231486028, 0.00292292216383614, 0.00206598473020027, 0.000742446882427904, 9.52812185081393e-05, 0.00327118722298822, 0.00504887813656484, 0.00356865648488397, 0.00128245763045954, 0.000164582987156811, 0.00286442517370845, 0.00442106570107946, 0.00312490504969682, 0.00112298797668544, 0.000144117599953649, 0.00144621070637857, 0.0022321380949974, 0.00157772357985427, 0.000566981902660164, 7.27630862707133e-05, 0.000308147081155878, 0.000475606241660779, 0.000336168798819301, 0.000120807996789371, 1.55037800172006e-05, 0.000937439821766984, 0.00144688123847004, 0.00102268701578053, 0.000367520038007324, 4.71653365059364e-05, 0.00161927658526931, 0.00249925473264391, 0.00176652740822439, 0.000634831781565252, 8.1470536312884e-05, 0.00141792453255091, 0.00218848010941898, 0.00154686516950305, 0.000555892406098532, 7.13399262170554e-05, 0.000715891501943862, 0.00110493490770459, 0.000780991938624509, 0.000280662785913662, 3.60185932012982e-05, 0.000152536470498617, 0.000235430746830112, 0.000166407554052789, 5.9801395389292e-05, 7.67455552179798e-06};
    
    
    const static double FE0[125][35] = \
    {{0.305663545122521, -0.0308956026377742, -0.0284861396506215, -0.0264567387485711, 0.00553719265411166, 0.00387645332275327, 0.00568515050333974, 0.00604849035520944, 0.00428125822656393, 0.00643242509446911, 0.006722684097753, 0.00467332883378213, 0.00696334827094777, 0.316683332879071, -0.266830935779784, 0.130690033482262, 0.351982375922268, -0.291266875281556, 0.141477002112519, 0.398248079160477, -0.321682889512789, 0.154540818103216, -0.00152763868231477, -0.00156500797046689, -0.00159351937348628, 0.095210622103163, -0.0317968637110469, -0.032376140758266, 0.107725414571985, -0.0351173025979229, -0.0366317655360567, 0.119733005913317, -0.0390316455622192, -0.0399864425485487, 0.0130709476216943},
    {0.00669084371150382, -0.0278698977200172, -0.0255216716723957, -0.0266548092172969, 0.024696863491794, 0.00606875645427751, 0.0060850653969138, 0.0271328435929706, 0.00672966104875479, 0.0068849060966108, 0.00514622667323367, 0.00362131423099465, 0.00529990606922177, 0.726880420362404, -0.325409773332621, 0.139883262544633, 0.137865808082476, -0.175107042470174, 0.107680212589652, 0.155987336317311, -0.194176690389937, 0.118301272030906, -0.00578753808936753, -0.00590518015907635, -0.00208139128324129, 0.279853835753503, -0.119977797078753, -0.0422884203860176, 0.316638730113967, -0.133043715594682, -0.0478469472948314, 0.0600561704160453, -0.0252341084543328, -0.0257470368705249, 0.0411485850360966},
    {-0.0205345190513158, -0.0222688674682829, -0.0201879061271679, 0.0230686829582336, 0.0433835769156871, -0.0191358805337486, -0.00622364176003367, 0.0480669960341637, -0.0213449189181002, -0.0070416973856206, 0.00299440295601834, 0.0021455366393031, 0.00305788669055025, 0.167093720255385, 0.600939576151325, -0.143068850951722, 0.0104093446885927, -0.0604049087085829, 0.0621282499374311, 0.0117775826607491, -0.0673780271760177, 0.0688352264995513, -0.00741225556502832, -0.00751860203093282, 0.00465971047251568, 0.208682812741731, -0.152758304485709, 0.0946731145294437, 0.236112757380084, -0.170392661971493, 0.107117255262284, 0.0147089853118773, -0.0106148570284824, -0.0107671524426325, 0.0371976335199439},
    {0.0207507657939299, -0.014551889869055, -0.0130520026587977, -0.0404060597147742, 0.0450304029511844, -0.053477017443967, 0.0203411087250162, 0.0503360898201809, -0.0600144777647142, 0.0230148099219634, 0.00115514811169001, 0.000843706814744088, 0.00116922152266209, -0.126761056765116, 0.441928259975204, 0.467600669283435, -0.00290900218672421, -0.00621279895212727, 0.0237555195281293, -0.0032913708537282, -0.00697230141826363, 0.0265545028764067, -0.00454625343839362, -0.00458350342284596, 0.00748204353630152, 0.0334772199353669, -0.0931247868417252, 0.152015531609652, 0.0378775741255779, -0.104509109078726, 0.171996945322831, 0.000869241301477185, -0.00239834878787695, -0.00241799979419904, 0.0130292178352812},
    {-0.0368948524592729, -0.00638364542619714, -0.00567499956394006, 0.193565613495663, 0.0259638427028638, -0.0473788984736528, 0.0454310335985985, 0.0292366119663365, -0.0534353517327501, 0.0514026357641061, 0.000203698888670465, 0.000151179155458617, 0.000204674320153781, 0.204659584876928, -0.507343961262246, 1.04436695187696, 0.00142591522038153, 0.00143537619017193, 0.00415844620979047, 0.00161334213417563, 0.00161886059114077, 0.0046826226614413, -0.00105429916924141, -0.00105767666444951, 0.00260466153192876, -0.0100100832039724, -0.0214892201090949, 0.0529199015640963, -0.0113258409537497, -0.024236191046749, 0.0598758647845403, -7.89100056527786e-05, -0.000168859688239884, -0.000169400637910066, 0.00118137286371112},
    {-0.0110259115086918, -0.0273944922839774, -0.0207049086523348, -0.0264567387485711, 0.0051246288316901, 0.00536188113781915, 0.028277822772303, 0.00530923083978039, 0.00369992558671256, 0.00537260109800341, 0.0293515690248119, 0.00558638072303245, 0.00538270721270633, 0.126397002975774, -0.17165599760043, 0.109157185209764, 0.698773601926539, -0.259177038433349, 0.109362514995889, 0.132762407176673, -0.178843158089469, 0.113302027600821, -0.00656668547127675, -0.0018080441704938, -0.00662020150701525, 0.304657734076697, -0.0367347228625228, -0.13450515845961, 0.0578829738695038, -0.0253485180939921, -0.0255550990557525, 0.320000420807171, -0.140136829790449, -0.0385846983660778, 0.0453555872283231},
    {-0.0400796207547675, -0.0244753130251872, -0.0297236815267526, -0.0266548092172969, 0.035177482531519, 0.0120047522387559, 0.0302669913049302, 0.0236247260194704, 0.0057829048139265, 0.00575053008951586, 0.0222876553178486, 0.00615563069515604, 0.00630523077133382, 0.235223312881521, -0.204904421568362, 0.116835712643712, 0.22191055743483, -0.218111137493024, 0.128105777916878, 0.0421615523278778, -0.105068053208743, 0.0860341243033992, -0.0247372100836884, -0.00975655513128453, -0.00864704247671417, 0.876508240496472, -0.198227651010737, -0.175685259324049, 0.16653082428654, -0.0954898205714342, -0.033379048477236, 0.157105805520739, -0.090085455615669, -0.0355304301199561, 0.142783698010477},
    {0.0102723306758722, -0.0192801894065166, -0.0397189812555842, 0.0230686829582336, 0.0984497965965412, -0.0544785376003364, -0.0309562673116838, 0.0413568083073289, -0.0181908408918032, -0.00588148801582202, 0.0128148721626431, 0.00520560476519476, 0.00579589774391153, -0.0564785835866362, 0.352177395909631, -0.11949643476987, -0.0175005242960598, -0.100781285551626, 0.117757464577843, -0.00332498498225038, -0.0336517170080882, 0.0494675769545877, -0.0314204682320263, -0.0178782063943612, 0.0193585486349734, 0.608304956655548, -0.363238336703044, 0.393315014495556, 0.115573957173589, -0.121288328942359, 0.0747272764156985, 0.0358118904027677, -0.037582552760521, -0.0213844246405819, 0.129074077919252},
    {0.00912511728278446, -0.0124102698498274, -0.0397405972089105, -0.0404060597147742, 0.148813736423541, -0.200637348699184, 0.101176260361138, 0.0427698343143906, -0.0507088224103506, 0.0192228267319271, 0.0048820223853969, 0.00267462964338706, 0.00322733351433676, -0.0492106437897534, 0.128663531590443, 0.390557500837349, -0.00561721756543102, -0.00678633971875523, 0.0655709656704383, -0.00106723454287007, -0.00171517066909909, 0.0188454332574341, -0.0191066759686634, -0.0143632269164339, 0.0310837989915455, 0.048479382683923, -0.291823158304032, 0.631541397109155, 0.00921076515456771, -0.0737550052650138, 0.119988728653697, 0.00105137563406718, -0.00841886793603296, -0.00632878846865119, 0.0452107867882594},
    {-0.0406159076210842, -0.00537606858025756, -0.0235167508261139, 0.193565613495663, 0.111110855045382, -0.212909749655552, 0.225973035491152, 0.0245854244640892, -0.0448339756433928, 0.0429333965480555, 0.000852007325023561, 0.000570008174352196, 0.000731578166541991, 0.217346756079598, -0.507458929034599, 0.872294189200459, 0.00753214688322392, 0.00645170840967707, 0.0148637525779309, 0.00143105856985451, 0.00135858380447919, 0.00328889257587276, -0.00439993687100427, -0.00396984336412246, 0.010820944185458, -0.0498012326664733, -0.0806568214253447, 0.219853249301445, -0.00946190799271441, -0.0169845015228643, 0.0417706772585572, -0.000327902206051488, -0.000588597513558906, -0.000531062149718381, 0.00409930951603697},
    {-0.00588069770174659, -0.0209614117032461, 0.0196804606852359, -0.0264567387485711, -0.00832019668364345, -0.0348389537831829, 0.0625461354887269, 0.00400152580496328, 0.00272474454845843, 0.00376507190876496, 0.048930521949722, -0.0267307568512311, -0.00612435861726481, 0.0034930262076681, -0.0658600199515992, 0.0764964016825789, 0.0427126061047173, 0.646111276941326, -0.124430929391771, 0.0025711585877915, -0.050532177013686, 0.059843966895106, -0.0106962989107499, 0.00823276344896471, -0.0102615839031087, 0.258541102529702, 0.167268194342737, -0.208488513147469, 0.0155633251325515, -0.0130819973384466, -0.0125503236613744, 0.190307812351085, -0.159966220165596, 0.12312334027285, 0.0492677426897369},
    {0.0160155329372753, -0.0184718652791736, 0.0231559130793074, -0.0266548092172969, -0.0414127978223251, -0.0344432021170079, 0.0669458661735615, 0.0176021151318451, 0.00422485121361452, 0.00402992124403016, 0.0367296654322382, -0.0129029273094945, -0.00520186983952693, -0.036169047347175, -0.0724944037069556, 0.0818774466205662, -0.0754725780460939, 0.221401884724775, -0.105688373127378, -0.00454320129074364, -0.0271574639953149, 0.0449218359954092, -0.03997335545982, 0.0196171313744725, -0.01340327054917, 0.685904525794328, 0.398568738617759, -0.272319358735952, 0.0412891994362845, -0.048888997409057, -0.0163927308982087, 0.086156605038676, -0.102014814964114, 0.050064299188121, 0.155099535112543},
    {0.0196251555355451, -0.0142538719043458, 0.00551430449164191, 0.0230686829582336, -0.017812894403291, 0.0160562855400303, -0.068470437243077, 0.0302890327371375, -0.0131335888893545, -0.00412169541459877, 0.0207590359443044, -0.00110769826546359, -0.000734901381042523, -0.0723235380733696, 0.0876260164567924, -0.0837420574397002, -0.0495680050107215, 0.00739045414443786, -0.0149312715941613, -0.00298383108374492, -0.00604518312760953, 0.0253891234003548, -0.0501762046732541, 0.00369260001571806, 0.0300065444910839, 0.334770714499961, 0.0750239625962773, 0.609654406640305, 0.020152097378872, -0.0613674862179828, 0.0366991927248619, 0.013811537577699, -0.0420591130547637, 0.00309524170946097, 0.140207388933764},
    {-0.0190581391155919, -0.00897333425654375, -0.0307674372271625, -0.0404060597147742, 0.132351652535693, -0.22451483832234, 0.223786114643475, 0.03075310074583, -0.0361554636663502, 0.0134711890228238, 0.00776435926765642, 0.00213396519922823, 0.00201149461263444, 0.0872667704762525, -0.165422120128656, 0.273699284264116, 0.0220325931913584, 0.00976353258237014, 0.0408683030760231, 0.00132628973882768, 0.00157230163571785, 0.00949611899608965, -0.0301321459013353, -0.0112635157116613, 0.0481811635251757, -0.137863629824335, -0.228845143762455, 0.978915071973998, -0.0082989376695466, -0.0368528082257305, 0.058927471853479, -0.00209526623473827, -0.00930437699442111, -0.00347801304318121, 0.0491104524580727},
    {-0.040797424542492, -0.00381478498889274, -0.0382757664925028, 0.193565613495663, 0.190282673186367, -0.394592727959424, 0.499817125541642, 0.0174062774729831, -0.0316348028115302, 0.0300873491893934, 0.00133421565824141, 0.000745405326831869, 0.000877995254786759, 0.207221789959828, -0.444598645440034, 0.61129614650863, 0.0158838417532035, 0.0104760001378119, 0.0178385643921465, 0.000956155099287168, 0.000839868996894842, 0.00163179860956263, -0.00686687020511394, -0.0051560316909917, 0.0167729073733281, -0.0965076725717214, -0.104757061984401, 0.340781555015693, -0.00580944488641596, -0.00839845431548993, 0.0205139302338836, -0.000445302124200538, -0.000643753339572111, -0.000483366150934852, 0.00445289629753881},
    {0.00932435981520404, -0.0124384929539137, -0.0406552941435215, -0.0264567387485711, 0.0715572838247991, -0.134890782233763, 0.0993175900782414, 0.00233689276746118, 0.00155308751767142, 0.00204012014144113, 0.0453752157129881, -0.0589927390317722, 0.0285406155826313, -0.00274530159830429, -0.00403615898265428, 0.0414498988603882, -0.0533052495838727, 0.1533101456584, 0.579870570013429, -0.00109496327120835, -0.00176516193035206, 0.0189372104235511, -0.00968120372976684, 0.0172721051771463, -0.00882922451508178, 0.0251594819687861, 0.35092394715196, -0.179386721267945, 0.000516810424742569, -0.00404042139090867, -0.00368485041650238, 0.0100348568971314, -0.0784524624906234, 0.139965981645221, 0.0229695926275671},
    {-0.00343000582694792, -0.0108112314285623, -0.0261022528933717, -0.0266548092172969, 0.103392980678712, -0.158623419731344, 0.106303963340101, 0.0101628551970843, 0.00238940091495468, 0.00218362987416732, 0.0336739098154424, -0.0336069922318886, 0.00703717632537012, 0.0046660289296832, 0.00205905019873326, 0.0443656408238899, 0.0154605604751185, -0.0289605999565849, 0.142976994846623, 0.000317581213946179, 0.00043624380404303, 0.0140537054411443, -0.0358983017508575, 0.0489532756297688, -0.011532379994394, -0.030935120553302, 0.994602368027883, -0.234307761919136, -0.000635449999028206, -0.0149820487555176, -0.004813004262494, -0.00210551912277904, -0.0496419705742331, 0.0676950426566424, 0.0723104600244302},
    {-0.0254802305902349, -0.00816939214276999, 0.0194477483558447, 0.0230686829582336, -0.0931249229462171, 0.258170653831508, -0.108724843916401, 0.0171871218319639, -0.00734069551356106, -0.00223335809672932, 0.0187046946755821, -0.00995490362348402, -0.00208181898583694, 0.0693603943777793, -0.0450703189999695, -0.045375988084246, 0.0754847153641234, -0.0611210042829734, -0.0422971101827512, 0.00155056005752828, 0.00173788412922106, 0.00780634832064024, -0.0445325221215012, 0.0321718864559729, 0.0258180920932987, -0.273420273893853, 0.653648485037774, 0.524556022117167, -0.00561642914824797, -0.0185855147761846, 0.010775103435276, -0.00611234349835339, -0.0202265616474849, 0.01461239143254, 0.0653674479763462},
    {-0.0413033167094811, -0.00502599423716687, 0.00142320657028389, -0.0404060597147742, -0.00728506876419387, 0.0170939377878669, 0.355352052140279, 0.0171227627066027, -0.0199509940309113, 0.00729942076023664, 0.00686461589158586, -8.96551013662022e-05, -5.99936975455622e-05, 0.162767434125055, -0.238242506157153, 0.148305115029899, 0.0652544179974326, -0.00107060610644982, -0.00121891483006992, 0.00134041565416252, 0.00124954567544989, 0.00286492688956192, -0.0264025793534476, 0.000464679493717897, 0.041455813661746, -0.315283372068211, 0.00944107046730014, 0.842273574261528, -0.0064763548643406, -0.0110190374433332, 0.0173014597122298, -0.00259640861016869, -0.00441759667172853, 7.7748713767195e-05, 0.0228962608216351},
    {-0.030781286412569, -0.00209476062722424, -0.0414545183650566, 0.193565613495663, 0.218312526315296, -0.496518111503194, 0.793664260801162, 0.00953507766758153, -0.0172667766101738, 0.0163029574391283, 0.00116056657225547, 0.000511946582509167, 0.000545825785489332, 0.148260957594398, -0.292641263819637, 0.331233402999375, 0.0180456538848819, 0.00867658731539758, 0.0110897506202466, 0.000370682594362372, 0.000301734602309098, 0.000484358984172275, -0.00595155798029988, -0.00351547540607164, 0.0144316673106304, -0.100868360573134, -0.0714252543602301, 0.293213687890887, -0.00207197510408051, -0.00248386490399956, 0.00602301314340324, -0.000252191448058696, -0.000302324813502206, -0.000178577685041435, 0.00207602801312366},
    {-0.0415876825462491, -0.00431783986658356, 0.256494600498464, -0.0264567387485711, 0.294923085078976, -0.257360821304334, 0.128736049066641, 0.000801066700129545, 0.000522361946184708, 0.000660097964171789, 0.020161488871774, -0.0378559651934289, 0.0380601860437702, 0.00872429846354239, 0.00688702196831937, 0.0134114620492584, 0.21957578109077, -0.49910768926269, 0.773283313112873, 0.00112588142272712, 0.00101303245225041, 0.00210038326343512, -0.00422064635993364, 0.0106624764371306, -0.00370296164570996, -0.0556466343187304, 0.216633599631123, -0.0752344837839616, -0.000285329791407259, -0.00043969842860609, -0.000385767078773935, -0.00718126644549826, -0.0110664629722462, 0.0279568318739249, 0.00311696981125836},
    {-0.0405329728195471, -0.0037142682446487, -0.00474578684781536, -0.0266548092172969, 0.669144967779083, -0.31338587445254, 0.13779182750758, 0.00345414137402757, 0.000799034653613825, 0.000706531740539697, 0.0148351492186771, -0.0222033417422352, 0.0147360213951955, 0.0418315906646369, 0.0113675331696385, 0.0143548747900384, 0.179661983215495, -0.3158776939024, 0.299397365884506, 0.000921222223451976, 0.000805388003440254, 0.00154549593671606, -0.0155605339842405, 0.0312929506859299, -0.00483666042584486, -0.221373235069479, 0.635790811838522, -0.0982682742064898, -0.0011350979220731, -0.00162106505915666, -0.000503873532057903, -0.00487511807663236, -0.00696229234466285, 0.0140014906444224, 0.00981251712160667},
    {-0.0361168933250246, -0.00276215668983145, -0.0175985869100488, 0.0230686829582336, 0.13722625562885, 0.575928446322043, -0.140929787262841, 0.00576529064950153, -0.0024331807669413, -0.000722621723579509, 0.00813284841940006, -0.00736098410062293, 0.000992583157374948, 0.0813133174158523, -0.0385404156710593, -0.0146817811109556, 0.114705211796885, -0.116594455636229, 0.0201666905041452, 0.000588154424001377, 0.000492587905316737, 0.000847263751839174, -0.0191332374144267, 0.0232215300791439, 0.0108280636225285, -0.303061298652316, 0.471800681544232, 0.219997897619223, -0.00155395592539939, -0.00199326209964842, 0.00112804583792463, -0.00219209902154602, -0.00281180941293542, 0.0034126225188668, 0.00887035156804324},
    {-0.0263257809398333, -0.00166934325119214, 0.0200527846384615, -0.0404060597147742, -0.121039277759041, 0.409587603262319, 0.460609436699216, 0.00566033118596424, -0.00654850098736375, 0.00236178874253027, 0.00294142818295282, -0.000705110284432739, -0.00032251576415777, 0.0933367349209928, -0.115553699595248, 0.0479853624886687, 0.048503045772689, -0.0124422523789915, -0.00655267576338934, 0.000248700826247224, 0.000198927168058588, 0.000306432057937929, -0.0112330506905863, 0.00360255684182684, 0.017386497276055, -0.198216441830415, 0.0731945210967083, 0.353248095045939, -0.00101636076814725, -0.00117023657418754, 0.00181129023360528, -0.000528158531586959, -0.000608121102272832, 0.000195030797776698, 0.0031070186976706},
    {-0.0125964445065001, -0.000684999674742306, -0.0373255322657574, 0.193565613495663, 0.206363312425294, -0.508716820740598, 1.02875232011214, 0.00311203997815362, -0.0056192515959003, 0.00527495846785992, 0.000490981347431738, 0.000170699739526368, 0.000166940047684338, 0.0582613106027224, -0.108078195915314, 0.107173342659665, 0.00919178962470597, 0.00328316317153114, 0.00339178460704531, 4.7131177804154e-05, 3.62655983429082e-05, 5.11494469165108e-05, -0.00251056736786805, -0.00116540725334389, 0.00605261656260136, -0.0482871405937742, -0.023678023563922, 0.12297331871021, -0.000247593765947629, -0.000261545846873411, 0.000630549390916953, -3.9062454747826e-05, -4.12636512431305e-05, -1.91546178260379e-05, 0.000281716648142109},
    {-0.0277140447911062, -0.0126271398155743, -0.0284861396506215, -0.0264567387485711, 0.00553719265411166, 0.00387645332275327, 0.00568515050333974, 0.00325794945141118, 0.00367985906664886, 0.0316431114534618, 0.00362109612184817, 0.00401685452508364, 0.0342548886603179, 0.103801960721004, -0.157420166190056, 0.105479347123269, 0.115372225079874, -0.171836446844088, 0.114185461723149, 0.642152951745391, -0.163121764729731, 0.0671839478266717, -0.00131304741694864, -0.00769876382666728, -0.00783902033804168, 0.0561706681825989, -0.0256631078548466, -0.0261306397937107, 0.312641628866867, -0.0243616038309396, -0.145441135965869, 0.347490164197526, -0.0270770650281288, -0.158760396677318, 0.0518963102768922},
    {-0.036182050867274, -0.0234599611173095, -0.0255216716723957, -0.0266548092172969, 0.024696863491794, 0.00606875645427751, 0.0060850653969138, 0.0287184488864878, 0.0104029545786961, 0.0338690070637593, 0.00544696493631913, 0.00559795912265064, 0.026071896054486, 0.179952332893618, -0.18696061832771, 0.112899161577485, 0.0341311625622492, -0.100605831836208, 0.0869082226043882, 0.18997143177811, -0.172456730934776, 0.101060175091016, -0.00894658667501603, -0.029049428665263, -0.010239014895097, 0.160786953747622, -0.0968335485725666, -0.0341307967741618, 0.894927846626023, -0.165990349931469, -0.189969395829684, 0.169738993229578, -0.0314830240107242, -0.102224892396147, 0.163374515627626},
    {0.0142516980277666, -0.0371334490119634, -0.0201879061271679, 0.0230686829582336, 0.0433835769156871, -0.0191358805337486, -0.00622364176003367, 0.09419353716059, -0.05417748655495, -0.034640312467274, 0.0058679224703584, 0.00544578233700511, 0.0150427013047287, -0.0742448752547492, 0.315595803207861, -0.115470235870068, -0.00462519175889464, -0.0317228826959173, 0.0501434353232526, -0.0257434624174614, -0.0898137949654952, 0.108870403831837, -0.0188137222613499, -0.0369863556193762, 0.0229225736261528, 0.109594079865224, -0.123290550897265, 0.0764102513758065, 0.609992238864691, -0.349060089072392, 0.425293595842598, 0.038000347721053, -0.0217452025045108, -0.0427494241530001, 0.147687833092772},
    {0.00638473930951469, -0.0409323784102905, -0.0130520026587977, -0.0404060597147742, 0.0450304029511844, -0.053477017443967, 0.0203411087250162, 0.155250849713371, -0.213621118662252, 0.113217050295249, 0.0035628060607276, 0.00300316857367654, 0.00575176646630449, -0.0337564627061267, 0.0846428086527522, 0.377398428910149, -0.000774667128329125, -0.00118994144645204, 0.0191729745844869, -0.00431173779245635, -0.00475338070602025, 0.0661024641285421, -0.0161823576810786, -0.0225476873071009, 0.0368065129467913, 0.00641191382821805, -0.0751606029574702, 0.122691062199162, 0.0356882203517941, -0.300239109257121, 0.68288903754282, 0.000818998466035594, -0.00689009895986807, -0.00960031905880673, 0.0517306281851151},
    {-0.0409997915183174, -0.0255781559034303, -0.00567499956394006, 0.193565613495663, 0.0259638427028638, -0.0473788984736528, 0.0454310335985985, 0.121442089297964, -0.234455394972282, 0.252865646874597, 0.000846117828437081, 0.000663320581885518, 0.00100685701413862, 0.218085988961728, -0.504176529159724, 0.842903940766471, 0.00151946038197766, 0.00142641489966475, 0.00335626351580563, 0.00845719989080244, 0.00705864170483461, 0.0156984333273983, -0.00462589128971555, -0.00520304241143494, 0.0128131449558945, -0.00994758860206502, -0.0173438543621094, 0.0427114181401305, -0.0553675148342018, -0.0858263985827233, 0.237728475921549, -0.000385759514582351, -0.00059797428067307, -0.00067258077382976, 0.00469047038227792},
    {-0.0324041991309081, -0.0249565292980644, -0.0207049086523348, -0.0264567387485711, 0.0051246288316901, 0.00536188113781915, 0.028277822772303, 0.00604184678738186, 0.00607574336483796, 0.0264295056440364, 0.0334017654098674, 0.00917354006613424, 0.0264792207840048, 0.0290254836500229, -0.0981240834186821, 0.0881002806637313, 0.160464578117202, -0.148153922350204, 0.0882660014245901, 0.149976167089159, -0.167878620871496, 0.104064055106665, -0.0107833238118005, -0.008894334929592, -0.0325668423734902, 0.174152149243713, -0.0296484321034246, -0.108558517593135, 0.162769080505944, -0.0335957213522823, -0.101462831015626, 0.899853113520492, -0.185730695079488, -0.153194973792325, 0.180077810401831},
    {-0.00335768559689349, -0.0328037714586734, -0.0297236815267526, -0.0266548092172969, 0.035177482531519, 0.0120047522387559, 0.0302669913049302, 0.03812711034201, 0.0126102731283713, 0.0282886565901093, 0.0359692591934385, 0.0134230437541299, 0.0310174027846307, 0.009703884312667, -0.112584145831108, 0.0942975861431183, 0.00915468093161186, -0.11984053795887, 0.103393605903581, 0.00855630552958888, -0.125885306539981, 0.112063147708538, -0.053942263555504, -0.0479955470739245, -0.0425375072099569, 0.481594934920914, -0.159988659068097, -0.141794794590806, 0.450116550808096, -0.168058502846676, -0.132526692528935, 0.424641645748689, -0.158547023215991, -0.141068442713084, 0.56690205705785},
    {0.0234342855627476, -0.0407169244982236, -0.0397189812555842, 0.0230686829582336, 0.0984497965965412, -0.0544785376003364, -0.0309562673116838, 0.0996724370913473, -0.0540299424420025, -0.0289328796003985, 0.0308846255729641, 0.015461546143588, 0.0285118342755609, -0.0978204961038314, 0.166049912400659, -0.0964450431852938, -0.0303107808306083, -0.047517881135584, 0.0950415280461933, -0.0283295839106241, -0.0471266024348213, 0.096221841514526, -0.0933242228973654, -0.0879484905329412, 0.0952307571463897, 0.286812799284425, -0.293168052564464, 0.31744280598414, 0.268065917185613, -0.290754005221206, 0.29669386147487, 0.0830632391737673, -0.090093398407293, -0.0849037704350175, 0.512469989955714},
    {-0.00845414648597797, -0.038824229224894, -0.0397405972089105, -0.0404060597147742, 0.148813736423541, -0.200637348699184, 0.101176260361138, 0.144373886169673, -0.192520475532932, 0.0945630986440837, 0.0164797585832577, 0.0101544651668789, 0.0158762632431524, 0.0409046503519659, -0.0859340091226232, 0.315217228925193, 0.00466911836078679, 0.00453257711872138, 0.0529220359416226, 0.00436393180135336, 0.00434920969571951, 0.0513431096922211, -0.0725401649751163, -0.0706572068035244, 0.152910931948857, -0.0323792426830045, -0.235529178416942, 0.509714264151844, -0.0302628453445956, -0.226000740762852, 0.476397922489345, -0.00345439468696755, -0.0257971697390769, -0.0251275408296196, 0.17950290116164},
    {-0.041622798727191, -0.0223221930862674, -0.0235167508261139, 0.193565613495663, 0.111110855045382, -0.212909749655552, 0.225973035491152, 0.105185433623048, -0.200733059401549, 0.211202809530411, 0.00364519880726562, 0.00255207090336346, 0.00359886187881333, 0.215301987909138, -0.475633610993708, 0.704024776218103, 0.00746128548883342, 0.00604708911874119, 0.0119964688656596, 0.00697359512175873, 0.00570124525176767, 0.0113567101887967, -0.0196996312866692, -0.019528901491869, 0.0532316098304128, -0.0466779452874253, -0.0650977632975982, 0.17744258365649, -0.0436269449865273, -0.0613747055175499, 0.165844442975822, -0.00151189078517679, -0.00212693902228516, -0.00210850558779375, 0.0162757165526539},
    {0.0204785007083075, -0.0390271979027141, 0.0196804606852359, -0.0264567387485711, -0.00832019668364345, -0.0348389537831829, 0.0625461354887269, 0.0086398418615198, 0.00744901063083613, 0.0185215666392738, 0.105647693518024, -0.0730775632041426, -0.0301276360720806, -0.00851571579357294, -0.0333053616823686, 0.0617399069520701, -0.104129884165233, 0.326737978236299, -0.100427651936955, -0.0308356155601945, -0.0698607279807285, 0.104285879799548, -0.0292419501644123, 0.0404995390633587, -0.0504799416031009, 0.13074403767017, 0.135001418728343, -0.168270155447476, 0.0387167710278796, -0.0288650172890901, -0.0498292480129827, 0.473427364194998, -0.352960453307861, 0.488843445330789, 0.195610458802931},
    {0.0229180783083817, -0.0412289201478098, 0.0231559130793074, -0.0266548092172969, -0.0414127978223251, -0.0344432021170079, 0.0669458661735615, 0.0445075575635088, 0.0130053645486453, 0.019824443378776, 0.0928722307670985, -0.0397190965835421, -0.025589625169532, -0.040500387201195, -0.0325826767811744, 0.0660829244858204, -0.0845106204926892, 0.0995092818183706, -0.085300617797373, -0.0250258321629453, -0.0375735822013699, 0.0916750945711955, -0.123050027966022, 0.096502806540785, -0.0659348811061902, 0.308280423369521, 0.321683063451447, -0.219787748178932, 0.0912899951436843, -0.1214638956941, -0.0650849711590208, 0.190491367305736, -0.253454100119439, 0.198773071368573, 0.615800310043552},
    {0.00445003802812059, -0.0407212506634908, 0.00551430449164191, 0.0230686829582336, -0.017812894403291, 0.0160562855400303, -0.068470437243077, 0.0946630119350779, -0.047195250329771, -0.0202759092357742, 0.0648786933676808, -0.003980488301319, -0.00361520981062472, -0.0142731556284249, 0.0126780247385569, -0.0675878436185248, -0.00978231801921588, 0.00106927559029856, -0.0120509631645791, -0.00289680335425574, -0.00314298902008447, 0.06404239782991, -0.180307040223523, 0.0181650547242117, 0.147611580037063, 0.0484357451336121, 0.0605515078877837, 0.492049371094327, 0.0143431064798043, -0.1779828569618, 0.145708845883514, 0.00983025986835744, -0.121983179760304, 0.0122892102994555, 0.556673193850381},
    {-0.0313667839702792, -0.032584246211307, -0.0307674372271625, -0.0404060597147742, 0.132351652535693, -0.22451483832234, 0.223786114643475, 0.117677353552572, -0.149900211650407, 0.0662689933266994, 0.0297104756427882, 0.00884739960662245, 0.00989517130488747, 0.134459259594934, -0.22671291901406, 0.22090147996024, 0.0339474710854873, 0.0133810337451634, 0.0329846263837701, 0.0100527449542905, 0.00893401881804124, 0.029327503407754, -0.124927592957269, -0.0554087576283441, 0.237018217078895, -0.188943690958862, -0.184699901845772, 0.790078018420279, -0.0559512292137642, -0.123317258606937, 0.233963018722939, -0.014126232300057, -0.031134405198363, -0.0138089486133687, 0.194985960648534},
    {-0.0380744421614196, -0.0166949234470742, -0.0382757664925028, 0.193565613495663, 0.190282673186367, -0.394592727959424, 0.499817125541642, 0.0777809136606015, -0.145888070814491, 0.148009083628169, 0.00596201646672432, 0.00343753510190092, 0.00431913334314864, 0.189049666937128, -0.391279045283166, 0.493374412069855, 0.0144909229560622, 0.00921963972304148, 0.0143974263037846, 0.00429114593728435, 0.00340866761471975, 0.00588516523084967, -0.0316674787804409, -0.0253641329762114, 0.0825111788505984, -0.0849337495146656, -0.0845489606991817, 0.275043283538423, -0.0251511318687754, -0.0312592804980486, 0.0814475980799759, -0.00192786964437952, -0.0023960678307347, -0.00191913551123343, 0.01767958181581},
    {-0.00825021336394405, -0.0388609269646537, -0.0406552941435215, -0.0264567387485711, 0.0715572838247991, -0.134890782233763, 0.0993175900782414, 0.00787957016710421, 0.00589174064932516, 0.0100359892367157, 0.152996834530156, -0.223792873623523, 0.140400217113785, 0.0021783986187895, 0.0025705040090162, 0.0334540297651136, 0.0422977505056147, -0.0976384591715584, 0.468010968482276, 0.00427416501424581, 0.00426463891240287, 0.0515352884852301, -0.036726289343039, 0.0849668890239084, -0.0434337176531758, -0.0160232908424758, 0.283229163305198, -0.144782228129851, -0.00161914495010561, -0.0123708436327972, -0.0146301665398266, -0.0314387773391316, -0.240203447161016, 0.555714721066931, 0.0911974510521011},
    {-0.0198488651832076, -0.0363573468678739, -0.0261022528933717, -0.0266548092172969, 0.103392980678712, -0.158623419731344, 0.106303963340101, 0.0364627551749933, 0.00947054301501528, 0.0107419585096758, 0.120816788744321, -0.133203458467505, 0.0346180719574672, 0.024755654062101, 0.00927424233248085, 0.0358073121883814, 0.0820261281050843, -0.130442483751308, 0.115396099214526, 0.00828869627367681, 0.00778801235936357, 0.0406957966216644, -0.142285209974459, 0.240816478080212, -0.0567313851505342, -0.139335993251802, 0.80273916557744, -0.189108756762996, -0.0140798274249359, -0.0479271964399367, -0.0191093384963022, -0.0466525233047001, -0.158803412951156, 0.268773392686982, 0.287098240946532},
    {-0.0353856505415786, -0.0306200848898892, 0.0194477483558447, 0.0230686829582336, -0.0931249229462171, 0.258170653831508, -0.108724843916401, 0.067531935498614, -0.0309986215928048, -0.0109865871941614, 0.0734948088867029, -0.0420380180389091, -0.0102411188979747, 0.09090396072937, -0.053418281906734, -0.0366227589868138, 0.0989305159332579, -0.07244188880076, -0.0341378102706135, 0.00999687560186189, 0.00869811756323165, 0.0247559120407589, -0.18805395200869, 0.158263574599543, 0.127007272315765, -0.324063410110059, 0.527556796894204, 0.423366841894701, -0.0327464338725473, -0.063343890070126, 0.0427809924212843, -0.0356378486920947, -0.0689369712339989, 0.0580163903657516, 0.259532014079741},
    {-0.0413330967980873, -0.0211218344402416, 0.00142320657028389, -0.0404060597147742, -0.00728506876419387, 0.0170939377878669, 0.355352052140279, 0.073992786495107, -0.0899360086693542, 0.0359081343769532, 0.0296641416306708, -0.000404151390212629, -0.000295127767531009, 0.157864947105883, -0.219648979514327, 0.119696401413182, 0.0632889822277056, -0.000987051146063707, -0.000983780760084461, 0.00639531772709704, 0.00519315335829105, 0.00999203742546721, -0.119018761769261, 0.00228590380671466, 0.203934117044056, -0.290677226535459, 0.00761984615430339, 0.679795270879218, -0.0293727779195008, -0.0400901511575048, 0.0686929477078465, -0.0117757187634489, -0.0160723764878062, 0.000308690042227501, 0.0909062977046968},
    {-0.0266278562476347, -0.00968209848012829, -0.0414545183650566, 0.193565613495663, 0.218312526315296, -0.496518111503194, 0.793664260801162, 0.044568638242721, -0.0820828851711449, 0.0801993480982714, 0.00542469327662728, 0.00243369411063688, 0.0026850878029287, 0.126759861966115, -0.245715646165503, 0.267337012340232, 0.0154286376713807, 0.00728527901666089, 0.00895048860280724, 0.00155905556593931, 0.00120438047899996, 0.00182724782387423, -0.028292544770546, -0.0172937233551124, 0.0709938865144694, -0.0846939152475718, -0.0576470064111893, 0.236651468687048, -0.00855827473431769, -0.00953003022061859, 0.0239135040502403, -0.001041674532615, -0.00115995221981657, -0.000709016914432443, 0.00824256947780732},
    {-0.0398714950680977, -0.018585063518479, 0.256494600498464, -0.0264567387485711, 0.294923085078976, -0.257360821304334, 0.128736049066641, 0.00353082203659202, 0.00238662360542694, 0.00324722840044393, 0.0888647963864357, -0.172960417191054, 0.187229962453518, 0.00814813477108326, 0.00616862571740949, 0.0108243316129863, 0.205074719104349, -0.447044969785973, 0.624113536703126, 0.00517278926079175, 0.00414565073336089, 0.00747189331800403, -0.0192837443583846, 0.0524520573990263, -0.0182160268238256, -0.0498420450994394, 0.174844018669228, -0.060721418605846, -0.00125721198962147, -0.00162140787439519, -0.0015316324871063, -0.0316418914106895, -0.0408080835352965, 0.110998564394833, 0.0123754785904182},
    {-0.0376359379261082, -0.0163084975755771, -0.00474578684781536, -0.0266548092172969, 0.669144967779083, -0.31338587445254, 0.13779182750758, 0.0154769114656851, 0.00369162422462751, 0.00347565067341829, 0.066471596317428, -0.102581776488159, 0.0724910994750197, 0.0379956047588089, 0.00997162717358061, 0.0115857558571598, 0.163186854623018, -0.277088665503788, 0.241642287804682, 0.00411621292367498, 0.00326405021199662, 0.00558903746542614, -0.0718913052701172, 0.153939814567604, -0.023793045806185, -0.194189129108341, 0.513143947956848, -0.0793118888261497, -0.00489821195904203, -0.00604473520801716, -0.00200055710701373, -0.021037270177615, -0.025961458749954, 0.055590896991734, 0.0389591824463453},
    {-0.0320953472655637, -0.0125039973795695, -0.0175985869100488, 0.0230686829582336, 0.13722625562885, 0.575928446322043, -0.140929787262841, 0.0264907481816319, -0.0114343437918562, -0.00355480233381649, 0.037369363068683, -0.0345917672852213, 0.00488282708533206, 0.0711243588603504, -0.0328899499342602, -0.0118496005007186, 0.100332084660509, -0.099500374910785, 0.0162764465761881, 0.00253076894271229, 0.001975456328671, 0.0031420754400511, -0.0899135885916032, 0.114233971421774, 0.0532666325687122, -0.258629046058044, 0.380788240201603, 0.177559328673039, -0.00652363956815725, -0.00756007743351905, 0.00447874312604044, -0.00920261873617917, -0.0106646772112094, 0.013549324978021, 0.0352184501509474},
    {-0.0224172392883416, -0.00781686379284148, 0.0200527846384615, -0.0404060597147742, -0.121039277759041, 0.409587603262319, 0.460609436699216, 0.026741791264299, -0.0313547065949564, 0.0116183777209744, 0.0138965470222836, -0.00337612014232495, -0.00158655594443215, 0.0787502465351572, -0.0961276701025704, 0.0387287735102246, 0.040923081523459, -0.0103505533462799, -0.00528863558311495, 0.00103224072449096, 0.000792354457711026, 0.00116844376019949, -0.0537846767144485, 0.0177221041814198, 0.0855296195465344, -0.164893766239597, 0.0590749737571153, 0.28510497277546, -0.00415926793366316, -0.00452230110117076, 0.00719146634852046, -0.00216139083007445, -0.00235004339388608, 0.00077434162295732, 0.0123359691307153},
    {-0.0103777659891159, -0.00330330498807966, -0.0373255322657574, 0.193565613495663, 0.206363312425294, -0.508716820740598, 1.02875232011214, 0.0150615693989051, -0.0273436744040658, 0.0259491709984155, 0.00237623863762132, 0.000830636966295293, 0.000821230322520677, 0.0478241068894883, -0.0882267290306913, 0.086499130129109, 0.00754512943443959, 0.00268012197136592, 0.00273749433220898, 0.000190317776273029, 0.00014405732140242, 0.000199797921341288, -0.0122165977986355, -0.00573300288221721, 0.0297747144603602, -0.0394179087905201, -0.0191104279350486, 0.0992512208124508, -0.000994274360901274, -0.00102719095943716, 0.00250350531445984, -0.0001568650045817, -0.000162058201332459, -7.60506444297339e-05, 0.0011185152756555},
    {0.0110397084453416, 0.0110397084453416, -0.0284861396506215, -0.0264567387485711, 0.00553719265411166, 0.00387645332275327, 0.00568515050333974, -0.00532960946394796, -0.0471747144498051, 0.0685612292883654, -0.00592367329471855, -0.051494897433611, 0.0742201751917336, -0.00532960946394799, -0.0471747144498052, 0.0685612292883655, -0.00592367329471858, -0.0514948974336109, 0.0742201751917336, -0.0714377434247328, 0.626670020194433, -0.0714377434247328, 0.0168328829533163, -0.016680935840757, -0.0169848300658762, 0.0168328829533166, -0.016680935840757, -0.0169848300658761, 0.202999577068119, 0.202999577068119, -0.204832014189666, 0.225626883480278, 0.225626883480278, -0.223590194129101, 0.0730881651359095},
    {0.0226472627625867, 0.0226472627625867, -0.0255216716723957, -0.0266548092172969, 0.024696863491794, 0.00606875645427751, 0.0060850653969138, -0.0444953983204546, -0.0494918367818092, 0.0733840843206219, -0.00843934418035727, -0.0266321723423491, 0.0564900593294371, -0.0444953983204547, -0.0494918367818091, 0.073384084320622, -0.00843934418035732, -0.0266321723423491, 0.0564900593294371, -0.101775988349475, 0.217190315123544, -0.101775988349475, 0.0425631972267719, -0.0629414886189149, -0.0221849058346294, 0.0425631972267722, -0.0629414886189149, -0.0221849058346294, 0.513299537557785, 0.513299537557785, -0.26754338601508, 0.0973563925390684, 0.0973563925390681, -0.143968420425006, 0.230088488246687},
    {0.012691238507802, 0.0126912385078019, -0.0201879061271679, 0.0230686829582336, 0.0433835769156871, -0.0191358805337486, -0.00622364176003367, -0.0433014820764305, 0.0438748525012583, -0.0750552741686712, -0.00269752837971154, -0.00441018792091284, 0.0325930683139907, -0.0433014820764306, 0.0438748525012586, -0.0750552741686712, -0.00269752837971157, -0.00441018792091287, 0.0325930683139907, -0.0325313923782025, 0.0101117032054849, -0.0325313923782024, 0.0152360203786703, -0.0801384532583207, 0.0496664125009797, 0.0152360203786706, -0.0801384532583207, 0.0496664125009797, 0.183741887925501, 0.1837418879255, 0.598962207492992, 0.0114464663437147, 0.0114464663437143, -0.0602061486700866, 0.207996149939306},
    {-0.0259817649692688, -0.0259817649692688, -0.0130520026587977, -0.0404060597147742, 0.0450304029511844, -0.053477017443967, 0.0203411087250162, 0.114761862471351, -0.203918001595269, 0.245307739602699, 0.00263363620816368, 0.00286675838902462, 0.0124623705253957, 0.114761862471351, -0.203918001595269, 0.245307739602699, 0.00263363620816368, 0.00286675838902462, 0.0124623705253957, 0.0317608717348788, 0.0109314929980697, 0.0317608717348788, -0.0154473212203457, -0.0488541451322855, 0.0797487875729766, -0.0154473212203455, -0.0488541451322855, 0.0797487875729765, -0.186290113420392, -0.186290113420392, 0.961746730723858, -0.00427511698888059, -0.00427511698888082, -0.0135206087096315, 0.0728548267729458},
    {-0.0395812800366694, -0.0395812800366694, -0.00567499956394006, 0.193565613495663, 0.0259638427028638, -0.0473788984736528, 0.0454310335985985, 0.198592301718684, -0.417854165752403, 0.547884793820534, 0.00138364292022562, 0.00118219189796397, 0.00218156026497213, 0.198592301718684, -0.417854165752403, 0.547884793820534, 0.00138364292022561, 0.00118219189796397, 0.00218156026497212, 0.0166863233349911, 0.0104262409046442, 0.0166863233349911, -0.00824441658062042, -0.0112734483867722, 0.0277622815480125, -0.00824441658062024, -0.0112734483867722, 0.0277622815480124, -0.0994252192973007, -0.0994252192973007, 0.334804883294351, -0.000692720712645851, -0.000692720712646057, -0.000947229088207402, 0.00660582365173798},
    {0.0231926089616704, 0.0231926089616704, -0.0207049086523348, -0.0264567387485711, 0.0051246288316901, 0.00536188113781915, 0.028277822772303, -0.00884030110212687, -0.0253079998695848, 0.0572648931538838, -0.0488727493359342, -0.0382116124490959, 0.0573726111042975, -0.00884030110212684, -0.0253079998695849, 0.0572648931538839, -0.0488727493359342, -0.0382116124490959, 0.0573726111042974, -0.0989712960362717, 0.180358247044557, -0.0989712960362717, 0.0449170317499102, -0.0192713835165083, -0.0705626799833125, 0.0449170317499104, -0.0192713835165083, -0.0705626799833124, 0.0909606458976598, 0.09096064589766, -0.1428951713303, 0.502867130319971, 0.502867130319971, -0.215752131178203, 0.253612572333923},
    {0.0203118679564709, 0.0203118679564708, -0.0297236815267526, -0.0266548092172969, 0.035177482531519, 0.0120047522387559, 0.0302669913049302, -0.0336736952599977, -0.0229283032998649, 0.0612931213666137, -0.0317678906673699, -0.0244061024903267, 0.067205504344106, -0.0336736952599977, -0.022928303299865, 0.0612931213666138, -0.03176789066737, -0.0244061024903268, 0.067205504344106, -0.0643325647607151, 0.0466140832510673, -0.064332564760715, 0.0980791269856958, -0.103992103071011, -0.0921661509003817, 0.0980791269856963, -0.103992103071011, -0.0921661509003816, 0.198618216568047, 0.198618216568046, -0.186643958631942, 0.187377171996245, 0.187377171996244, -0.198673731937171, 0.798396474451868},
    {-0.00180109126924742, -0.00180109126924744, -0.0397189812555842, 0.0230686829582336, 0.0984497965965412, -0.0544785376003364, -0.0309562673116838, 0.00555831011591583, -0.00456747434668162, -0.0626889613928462, 0.0017223048995095, 0.00130705701651779, 0.0617766811608771, 0.00555831011591601, -0.00456747434668166, -0.0626889613928461, 0.00172230489950953, 0.00130705701651779, 0.061776681160877, 0.00348780763084159, 0.000109583510416389, 0.00348780763084152, -0.00788925500828128, -0.190558271548702, 0.206336781565265, -0.00788925500828119, -0.190558271548702, 0.206336781565265, -0.015976383639955, -0.0159763836399546, 0.417848780126889, -0.00495046214509442, -0.0049504621450946, -0.119574219460049, 0.721737076359336},
    {-0.034471487495116, -0.0344714874951161, -0.0397405972089105, -0.0404060597147742, 0.148813736423541, -0.200637348699184, 0.101176260361138, 0.144961877454661, -0.236495772351066, 0.204890163784638, 0.0165468756685058, 0.0124739359582676, 0.0343991495923875, 0.144961877454661, -0.236495772351066, 0.204890163784638, 0.0165468756685058, 0.0124739359582676, 0.0343991495923875, 0.0335087702761785, 0.0147033099162971, 0.0335087702761785, -0.0891097027200589, -0.153093192610233, 0.331312598050351, -0.0891097027200587, -0.153093192610233, 0.33131259805035, -0.180454402247565, -0.180454402247565, 0.670934982535923, -0.0205982194095057, -0.020598219409506, -0.0353883704605546, 0.252802898943637},
    {-0.0368397808547021, -0.0368397808547021, -0.0235167508261139, 0.193565613495663, 0.111110855045382, -0.212909749655552, 0.225973035491152, 0.181682419275111, -0.372044618841556, 0.457613792874257, 0.00629620010329688, 0.00473008406950609, 0.00779766537223645, 0.181682419275111, -0.372044618841556, 0.457613792874257, 0.00629620010329687, 0.00473008406950609, 0.00779766537223644, 0.0127503177700058, 0.00826548491825741, 0.0127503177700058, -0.0365118821743591, -0.0423133323947336, 0.115337096743451, -0.0365118821743589, -0.0423133323947336, 0.115337096743451, -0.0739395337610563, -0.0739395337610563, 0.233567010263677, -0.00256237285897823, -0.00256237285897845, -0.00296951370470124, 0.0229219043272775},
    {0.00674684819158467, 0.0067468481915846, 0.0196804606852359, -0.0264567387485711, -0.00832019668364345, -0.0348389537831829, 0.0625461354887269, -0.00194941845888496, -0.00275429046543177, 0.0401307367956719, -0.023837422858388, 0.0270206132794255, -0.0652776440045177, -0.00194941845888491, -0.00275429046543188, 0.0401307367956719, -0.0238374228583881, 0.0270206132794257, -0.0652776440045177, -0.0152945235567676, 0.00213618979458463, -0.0152945235567675, 0.0108122848147188, 0.0877504788958507, -0.109375048525289, 0.0108122848147191, 0.0877504788958507, -0.109375048525289, 0.00693735836225309, 0.00693735836225316, -0.0701770181336516, 0.0848297829783526, 0.0848297829783519, 0.688462633804094, 0.275487976679251},
    {-0.00609144832973586, -0.00609144832973591, 0.0231559130793074, -0.0266548092172969, -0.0414127978223251, -0.0344432021170079, 0.0669458661735615, 0.00816434032524237, 0.00350006571141662, 0.0429536839322981, 0.0170362190211201, -0.0106893926364397, -0.0554451214834525, 0.00816434032524244, 0.00350006571141653, 0.0429536839322982, 0.01703621902112, -0.0106893926364396, -0.0554451214834525, 0.0109307476183434, 0.00108623979023706, 0.0109307476183435, -0.0331158101767778, 0.209092934996116, -0.142861314642561, -0.0331158101767775, 0.209092934996116, -0.142861314642561, -0.0212477054192935, -0.0212477054192936, -0.0916624148143831, -0.0443367802907667, -0.0443367802907672, 0.279942041876281, 0.867262325800607},
    {-0.0273059160603584, -0.0273059160603584, 0.00551430449164191, 0.0230686829582336, -0.017812894403291, 0.0160562855400303, -0.068470437243077, 0.0736060687804511, -0.0470087115710616, -0.0439318764271495, 0.0504470063733281, -0.00396475546079807, -0.0078330864876019, 0.0736060687804512, -0.0470087115710616, -0.0439318764271495, 0.0504470063733281, -0.00396475546079802, -0.00783308648760191, 0.0323677157521986, 0.0116077934365192, 0.0323677157521986, -0.179594378435846, 0.0393582813059977, 0.319830475565695, -0.179594378435846, 0.0393582813059977, 0.319830475565695, -0.115231015868123, -0.115231015868123, 0.205209043434423, -0.0789752786450689, -0.0789752786450692, 0.0173075085100311, 0.783990655632163},
    {-0.0414952572760413, -0.0414952572760413, -0.0307674372271625, -0.0404060597147742, 0.132351652535693, -0.22451483832234, 0.223786114643475, 0.16267044412864, -0.236075956919999, 0.14358523664347, 0.0410700625241912, 0.0139336583010178, 0.0214398988443288, 0.16267044412864, -0.236075956919999, 0.14358523664347, 0.0410700625241912, 0.0139336583010179, 0.0214398988443288, 0.0263512982290835, 0.0146511550924152, 0.0263512982290835, -0.196746894006265, -0.120054329737058, 0.513548117749587, -0.196746894006265, -0.120054329737058, 0.513548117749587, -0.126236381465238, -0.126236381465238, 0.329501801898471, -0.0318714079092634, -0.0318714079092637, -0.0194478318636186, 0.274608464744932},
    {-0.030148903201228, -0.030148903201228, -0.0382757664925028, 0.193565613495663, 0.190282673186367, -0.394592727959424, 0.499817125541642, 0.144932884372863, -0.285213118685387, 0.320691747849012, 0.0111093095019601, 0.0067204268418242, 0.00935827982346661, 0.144932884372863, -0.285213118685387, 0.320691747849012, 0.0111093095019601, 0.00672042684182421, 0.00935827982346661, 0.0071279347975891, 0.00485754998163779, 0.0071279347975891, -0.0619103421784072, -0.0549565468376966, 0.178777231194511, -0.061910342178407, -0.0549565468376966, 0.178777231194511, -0.0397228002574106, -0.0397228002574106, 0.114706719353092, -0.00304480852812387, -0.00304480852812411, -0.00270281436993941, 0.0248990378775177},
    {-0.0343769182305, -0.0343769182305, -0.0406552941435215, -0.0264567387485711, 0.0715572838247991, -0.134890782233763, 0.0993175900782414, 0.00788538984784683, 0.00721823609719234, 0.0217450095009147, 0.153109834695484, -0.274178701139661, 0.30420559279803, 0.00788538984784687, 0.00721823609719225, 0.0217450095009147, 0.153109834695484, -0.274178701139661, 0.30420559279803, 0.0335225090290039, 0.0146717704862733, 0.0335225090290039, -0.0449950266365201, 0.184098026164553, -0.0941079728915134, -0.0449950266365199, 0.184098026164553, -0.0941079728915135, -0.00985139974635139, -0.00985139974635136, -0.0206043940758699, -0.191283654427672, -0.191283654427672, 0.782640790551171, 0.128437924139626},
    {-0.0389187470326058, -0.0389187470326058, -0.0261022528933717, -0.0266548092172969, 0.103392980678712, -0.158623419731344, 0.106303963340101, 0.0432694866595337, 0.0132740412274198, 0.0232746353490286, 0.143370417395263, -0.186699769646704, 0.0750070855859966, 0.0432694866595338, 0.0132740412274197, 0.0232746353490286, 0.143370417395263, -0.186699769646704, 0.0750070855859967, 0.0313901201786518, 0.0156235469115312, 0.0313901201786519, -0.199428875436031, 0.521777821828826, -0.122920070956765, -0.199428875436031, 0.521777821828826, -0.122920070956765, -0.0436637939734228, -0.0436637939734228, -0.0269126356036456, -0.144676927098488, -0.144676927098489, 0.378526989761577, 0.404334788592332},
    {-0.0416440845330914, -0.0416440845330915, 0.0194477483558447, 0.0230686829582336, -0.0931249229462171, 0.258170653831508, -0.108724843916401, 0.0988371868179024, -0.0509432594584426, -0.0238046730904876, 0.107564222799895, -0.0690854479984979, -0.022189464584294, 0.0988371868179026, -0.0509432594584426, -0.0238046730904877, 0.107564222799895, -0.0690854479984978, -0.0221894645842941, 0.0235505618380348, 0.013632215164498, 0.0235505618380348, -0.309048621426053, 0.342910185746873, 0.275187057105233, -0.309048621426053, 0.342910185746874, 0.275187057105233, -0.0676644006752471, -0.0676644006752472, 0.0602506078386307, -0.0736389703529617, -0.073638970352962, 0.0817073795230781, 0.365511894813098},
    {-0.035603940049537, -0.035603940049537, 0.00142320657028389, -0.0404060597147742, -0.00728506876419387, 0.0170939377878669, 0.355352052140279, 0.130111458040874, -0.16881787441171, 0.0778022678950678, 0.0521624458534589, -0.000758628047271511, -0.000639454263807722, 0.130111458040874, -0.16881787441171, 0.0778022678950677, 0.0521624458534589, -0.000758628047271433, -0.000639454263807725, 0.0114206645547967, 0.00749212826200695, 0.0114206645547967, -0.223408784471073, 0.00495287498050904, 0.441864693961637, -0.223408784471073, 0.00495287498050902, 0.441864693961637, -0.0489140557788822, -0.0489140557788822, 0.096743708347586, -0.0196099315498981, -0.0196099315498984, 0.000434743600494115, 0.128027878342123},
    {-0.0190914618206941, -0.0190914618206941, -0.0414545183650566, 0.193565613495663, 0.218312526315296, -0.496518111503194, 0.793664260801162, 0.0893574291686464, -0.168781804564629, 0.173768180219252, 0.0108761825431591, 0.00500425006863675, 0.00581778820286797, 0.0893574291686465, -0.168781804564629, 0.173768180219252, 0.0108761825431591, 0.00500425006863677, 0.00581778820286797, 0.0023812769978446, 0.00170109878674948, 0.0023812769978446, -0.0581761563588041, -0.0374703648831509, 0.153822677600759, -0.058176156358804, -0.0374703648831509, 0.153822677600759, -0.0127373315416967, -0.0127373315416967, 0.0336785818428492, -0.00155033044537075, -0.001550330445371, -0.000998543924408182, 0.0116084221772976},
    {-0.0326406157545149, -0.0326406157545149, 0.256494600498464, -0.0264567387485711, 0.294923085078976, -0.257360821304334, 0.128736049066641, 0.00642722051909644, 0.00459034567367256, 0.00703578000671511, 0.161762228976998, -0.332665821692273, 0.405671749578322, 0.00642722051909644, 0.00459034567367247, 0.00703578000671509, 0.161762228976998, -0.332665821692273, 0.405671749578322, 0.00884075179197754, 0.00593350265065467, 0.00884075179197755, -0.0370896576596457, 0.113648038034127, -0.0394687227148357, -0.0370896576596456, 0.113648038034127, -0.0394687227148358, -0.0020270520472671, -0.00202705204726712, -0.00215707451161491, -0.0510174587045981, -0.0510174587045984, 0.156324820802352, 0.0174290044518856},
    {-0.0296117205882894, -0.0296117205882894, -0.00474578684781536, -0.0266548092172969, 0.669144967779083, -0.31338587445254, 0.13779182750758, 0.0289705339871301, 0.00724008938007494, 0.00753070326528905, 0.124425189390175, -0.201185490545444, 0.157066693639851, 0.0289705339871302, 0.00724008938007482, 0.00753070326528905, 0.124425189390175, -0.201185490545445, 0.157066693639851, 0.00680017964035817, 0.00464794699527497, 0.00680017964035818, -0.140994706973029, 0.333541881262226, -0.0515524673161674, -0.140994706973029, 0.333541881262226, -0.0515524673161674, -0.00770574945841274, -0.00770574945841273, -0.00281748446895539, -0.033095328383736, -0.0330953283837363, 0.0782914360906759, 0.0548681620139455},
    {-0.0238587390077674, -0.0238587390077674, -0.0175985869100488, 0.0230686829582336, 0.13722625562885, 0.575928446322043, -0.140929787262841, 0.0516830959726854, -0.0230765940922683, -0.00770220141726753, 0.0729071283557037, -0.0698125040759921, 0.0105796368307601, 0.0516830959726856, -0.0230765940922685, -0.00770220141726757, 0.0729071283557038, -0.0698125040759921, 0.0105796368307601, 0.00398457556955574, 0.0027972829427246, 0.00398457556955575, -0.181462043216282, 0.247511105811688, 0.115412980620876, -0.181462043216282, 0.247511105811688, 0.115412980620876, -0.00991740095253245, -0.00991740095253243, 0.00630763758446082, -0.0139900524648018, -0.0139900524648021, 0.0190821909339989, 0.0495999019338641},
    {-0.0157278293793881, -0.0157278293793882, 0.0200527846384615, -0.0404060597147742, -0.121039277759041, 0.409587603262319, 0.460609436699216, 0.0545185779694685, -0.0652095057519489, 0.0251735756155996, 0.028330936205915, -0.00702143791948674, -0.00343759576377354, 0.0545185779694686, -0.065209505751949, 0.0251735756155995, 0.028330936205915, -0.00702143791948668, -0.00343759576377354, 0.00154836377203024, 0.00111786707593419, 0.00154836377203025, -0.111857917565132, 0.0383985389692676, 0.185317296160997, -0.111857917565132, 0.0383985389692675, 0.185317296160997, -0.00611334358715744, -0.00611334358715743, 0.0101281011548916, -0.00317683904502388, -0.00317683904502416, 0.00109054397332588, 0.017373361306934},
    {-0.00694959127879984, -0.00694959127879991, -0.0373255322657574, 0.193565613495663, 0.206363312425294, -0.508716820740598, 1.02875232011214, 0.0318555707589296, -0.0582963548319231, 0.0562241505637623, 0.00502580017102009, 0.00177090710663463, 0.00177936232736483, 0.0318555707589297, -0.0582963548319232, 0.0562241505637622, 0.00502580017102009, 0.00177090710663465, 0.00177936232736483, 0.000274673835474825, 0.000202936928471298, 0.000274673835474825, -0.0260456261138864, -0.0124217154086329, 0.0645129676364056, -0.0260456261138863, -0.0124217154086329, 0.0645129676364055, -0.00142346527490215, -0.00142346527490215, 0.00352581154354905, -0.000224577737946588, -0.000224577737946843, -0.0001071059200378, 0.00157526091427258},
    {-0.0126271398155742, -0.0277140447911064, -0.0284861396506215, -0.0264567387485711, 0.00553719265411166, 0.00387645332275327, 0.00568515050333974, 0.103801960721004, -0.157420166190056, 0.105479347123269, 0.115372225079874, -0.171836446844088, 0.114185461723149, 0.00325794945141113, 0.00367985906664876, 0.0316431114534618, 0.00362109612184808, 0.00401685452508374, 0.0342548886603179, 0.0671839478266712, -0.16312176472973, 0.64215295174539, 0.0561706681825986, -0.0256631078548467, -0.0261306397937107, -0.00131304741694851, -0.00769876382666734, -0.00783902033804163, -0.0243616038309396, 0.312641628866867, -0.145441135965869, -0.0270770650281286, 0.347490164197526, -0.158760396677319, 0.0518963102768923},
    {-0.0234599611173095, -0.036182050867274, -0.0255216716723957, -0.0266548092172969, 0.024696863491794, 0.00606875645427751, 0.0060850653969138, 0.179952332893617, -0.18696061832771, 0.112899161577484, 0.0341311625622492, -0.100605831836208, 0.0869082226043882, 0.0287184488864876, 0.0104029545786961, 0.0338690070637593, 0.00544696493631903, 0.00559795912265072, 0.026071896054486, 0.101060175091015, -0.172456730934776, 0.18997143177811, 0.160786953747621, -0.0968335485725667, -0.0341307967741618, -0.00894658667501581, -0.0290494286652632, -0.0102390148950969, -0.165990349931469, 0.894927846626024, -0.189969395829684, -0.0314830240107238, 0.169738993229578, -0.102224892396147, 0.163374515627626},
    {-0.0371334490119634, 0.0142516980277666, -0.0201879061271679, 0.0230686829582336, 0.0433835769156871, -0.0191358805337486, -0.00622364176003367, -0.0742448752547494, 0.315595803207861, -0.115470235870068, -0.00462519175889468, -0.0317228826959172, 0.0501434353232526, 0.0941935371605899, -0.05417748655495, -0.034640312467274, 0.00586792247035836, 0.00544578233700513, 0.0150427013047287, 0.108870403831837, -0.0898137949654951, -0.0257434624174615, 0.109594079865224, -0.123290550897265, 0.0764102513758066, -0.0188137222613498, -0.0369863556193762, 0.0229225736261529, -0.349060089072391, 0.609992238864691, 0.425293595842598, -0.0217452025045105, 0.0380003477210527, -0.0427494241530001, 0.147687833092773},
    {-0.0409323784102904, 0.00638473930951463, -0.0130520026587977, -0.0404060597147742, 0.0450304029511844, -0.053477017443967, 0.0203411087250162, -0.033756462706127, 0.0846428086527523, 0.37739842891015, -0.000774667128329145, -0.00118994144645203, 0.0191729745844869, 0.155250849713371, -0.213621118662252, 0.113217050295249, 0.00356280606072758, 0.00300316857367655, 0.00575176646630447, 0.0661024641285421, -0.00475338070602026, -0.00431173779245634, 0.00641191382821777, -0.0751606029574702, 0.122691062199162, -0.0161823576810784, -0.0225476873071008, 0.0368065129467911, -0.300239109257121, 0.0356882203517942, 0.68288903754282, -0.00689009895986782, 0.000818998466035354, -0.00960031905880673, 0.051730628185115},
    {-0.0255781559034303, -0.0409997915183174, -0.00567499956394006, 0.193565613495663, 0.0259638427028638, -0.0473788984736528, 0.0454310335985985, 0.218085988961727, -0.504176529159724, 0.842903940766471, 0.00151946038197768, 0.00142641489966477, 0.00335626351580564, 0.121442089297964, -0.234455394972282, 0.252865646874596, 0.000846117828437077, 0.000663320581885554, 0.00100685701413862, 0.0156984333273983, 0.0070586417048346, 0.00845719989080243, -0.00994758860206522, -0.0173438543621094, 0.0427114181401305, -0.00462589128971543, -0.0052030424114349, 0.0128131449558942, -0.0858263985827232, -0.0553675148342018, 0.237728475921549, -0.00059797428067285, -0.000385759514582563, -0.000672580773829759, 0.00469047038227792},
    {-0.0249565292980644, -0.0324041991309082, -0.0207049086523348, -0.0264567387485711, 0.0051246288316901, 0.00536188113781915, 0.028277822772303, 0.0290254836500228, -0.098124083418682, 0.0881002806637313, 0.160464578117202, -0.148153922350204, 0.0882660014245902, 0.00604184678738187, 0.00607574336483781, 0.0264295056440364, 0.0334017654098673, 0.00917354006613433, 0.0264792207840047, 0.104064055106665, -0.167878620871496, 0.149976167089159, 0.174152149243713, -0.0296484321034246, -0.108558517593135, -0.0107833238118004, -0.00889433492959201, -0.0325668423734902, -0.0335957213522823, 0.162769080505944, -0.101462831015626, -0.185730695079488, 0.899853113520492, -0.153194973792325, 0.180077810401831},
    {-0.0328037714586734, -0.0033576855968935, -0.0297236815267526, -0.0266548092172969, 0.035177482531519, 0.0120047522387559, 0.0302669913049302, 0.00970388431266672, -0.112584145831108, 0.0942975861431181, 0.00915468093161165, -0.119840537958869, 0.103393605903581, 0.0381271103420099, 0.0126102731283712, 0.0282886565901093, 0.0359692591934384, 0.0134230437541299, 0.0310174027846308, 0.112063147708538, -0.125885306539981, 0.00855630552958874, 0.481594934920913, -0.159988659068097, -0.141794794590806, -0.0539422635555038, -0.0479955470739246, -0.0425375072099569, -0.168058502846676, 0.450116550808097, -0.132526692528935, -0.158547023215991, 0.424641645748689, -0.141068442713084, 0.566902057057851},
    {-0.0407169244982235, 0.0234342855627475, -0.0397189812555842, 0.0230686829582336, 0.0984497965965412, -0.0544785376003364, -0.0309562673116838, -0.0978204961038315, 0.166049912400659, -0.0964450431852938, -0.0303107808306083, -0.0475178811355839, 0.0950415280461933, 0.0996724370913472, -0.0540299424420025, -0.0289328796003986, 0.030884625572964, 0.0154615461435879, 0.0285118342755608, 0.096221841514526, -0.0471266024348212, -0.0283295839106241, 0.286812799284424, -0.293168052564464, 0.31744280598414, -0.0933242228973652, -0.0879484905329413, 0.0952307571463897, -0.290754005221206, 0.268065917185613, 0.29669386147487, -0.0900933984072927, 0.083063239173767, -0.0849037704350176, 0.512469989955714},
    {-0.038824229224894, -0.00845414648597804, -0.0397405972089105, -0.0404060597147742, 0.148813736423541, -0.200637348699184, 0.101176260361138, 0.0409046503519656, -0.0859340091226232, 0.315217228925193, 0.00466911836078677, 0.0045325771187214, 0.0529220359416226, 0.144373886169673, -0.192520475532932, 0.0945630986440837, 0.0164797585832577, 0.0101544651668789, 0.0158762632431524, 0.0513431096922211, 0.00434920969571951, 0.00436393180135337, -0.0323792426830048, -0.235529178416942, 0.509714264151844, -0.0725401649751161, -0.0706572068035243, 0.152910931948857, -0.226000740762852, -0.0302628453445957, 0.476397922489345, -0.0257971697390766, -0.00345439468696782, -0.0251275408296196, 0.17950290116164},
    {-0.0223221930862673, -0.041622798727191, -0.0235167508261139, 0.193565613495663, 0.111110855045382, -0.212909749655552, 0.225973035491152, 0.215301987909138, -0.475633610993708, 0.704024776218104, 0.00746128548883344, 0.00604708911874122, 0.0119964688656596, 0.105185433623048, -0.200733059401549, 0.211202809530411, 0.0036451988072656, 0.00255207090336349, 0.00359886187881332, 0.0113567101887967, 0.00570124525176766, 0.00697359512175874, -0.0466779452874256, -0.0650977632975982, 0.17744258365649, -0.019699631286669, -0.0195289014918689, 0.0532316098304125, -0.0613747055175498, -0.0436269449865273, 0.165844442975822, -0.00212693902228494, -0.00151189078517701, -0.00210850558779375, 0.0162757165526539},
    {-0.039027197902714, 0.0204785007083075, 0.0196804606852359, -0.0264567387485711, -0.00832019668364345, -0.0348389537831829, 0.0625461354887269, -0.00851571579357299, -0.0333053616823685, 0.06173990695207, -0.104129884165233, 0.326737978236299, -0.100427651936955, 0.00863984186151987, 0.00744901063083596, 0.0185215666392738, 0.105647693518024, -0.0730775632041425, -0.0301276360720807, 0.104285879799548, -0.0698607279807284, -0.0308356155601945, 0.13074403767017, 0.135001418728343, -0.168270155447476, -0.0292419501644122, 0.0404995390633587, -0.0504799416031009, -0.0288650172890902, 0.0387167710278797, -0.0498292480129828, -0.352960453307861, 0.473427364194998, 0.488843445330789, 0.195610458802931},
    {-0.0412289201478098, 0.0229180783083817, 0.0231559130793074, -0.0266548092172969, -0.0414127978223251, -0.0344432021170079, 0.0669458661735615, -0.040500387201195, -0.0325826767811743, 0.0660829244858202, -0.0845106204926892, 0.0995092818183705, -0.085300617797373, 0.0445075575635089, 0.0130053645486452, 0.019824443378776, 0.0928722307670984, -0.039719096583542, -0.0255896251695321, 0.0916750945711955, -0.0375735822013698, -0.0250258321629453, 0.30828042336952, 0.321683063451447, -0.219787748178932, -0.123050027966022, 0.0965028065407851, -0.0659348811061902, -0.1214638956941, 0.0912899951436844, -0.0650849711590208, -0.253454100119439, 0.190491367305735, 0.198773071368573, 0.615800310043552},
    {-0.0407212506634907, 0.00445003802812051, 0.00551430449164191, 0.0230686829582336, -0.017812894403291, 0.0160562855400303, -0.068470437243077, -0.0142731556284249, 0.0126780247385569, -0.0675878436185248, -0.00978231801921589, 0.00106927559029856, -0.0120509631645791, 0.094663011935078, -0.047195250329771, -0.0202759092357743, 0.0648786933676808, -0.00398048830131894, -0.00361520981062474, 0.06404239782991, -0.00314298902008446, -0.00289680335425572, 0.0484357451336117, 0.0605515078877838, 0.492049371094326, -0.180307040223523, 0.0181650547242117, 0.147611580037063, -0.1779828569618, 0.0143431064798043, 0.145708845883514, -0.121983179760304, 0.00983025986835708, 0.0122892102994555, 0.556673193850381},
    {-0.0325842462113069, -0.0313667839702793, -0.0307674372271625, -0.0404060597147742, 0.132351652535693, -0.22451483832234, 0.223786114643475, 0.134459259594934, -0.22671291901406, 0.22090147996024, 0.0339474710854873, 0.0133810337451634, 0.0329846263837701, 0.117677353552572, -0.149900211650407, 0.0662689933266993, 0.0297104756427881, 0.00884739960662251, 0.00989517130488748, 0.029327503407754, 0.00893401881804124, 0.0100527449542905, -0.188943690958863, -0.184699901845772, 0.790078018420279, -0.124927592957268, -0.0554087576283441, 0.237018217078895, -0.123317258606937, -0.0559512292137643, 0.233963018722939, -0.0311344051983628, -0.0141262323000573, -0.0138089486133687, 0.194985960648534},
    {-0.0166949234470742, -0.0380744421614196, -0.0382757664925028, 0.193565613495663, 0.190282673186367, -0.394592727959424, 0.499817125541642, 0.189049666937128, -0.391279045283166, 0.493374412069855, 0.0144909229560622, 0.00921963972304149, 0.0143974263037846, 0.0777809136606015, -0.145888070814491, 0.148009083628169, 0.00596201646672429, 0.00343753510190096, 0.00431913334314863, 0.00588516523084967, 0.00340866761471974, 0.00429114593728434, -0.0849337495146659, -0.0845489606991818, 0.275043283538423, -0.0316674787804407, -0.0253641329762114, 0.082511178850598, -0.0312592804980485, -0.0251511318687754, 0.0814475980799757, -0.00239606783073446, -0.00192786964437976, -0.00191913551123342, 0.01767958181581},
    {-0.0388609269646537, -0.00825021336394413, -0.0406552941435215, -0.0264567387485711, 0.0715572838247991, -0.134890782233763, 0.0993175900782414, 0.00217839861878953, 0.00257050400901628, 0.0334540297651136, 0.0422977505056149, -0.0976384591715589, 0.468010968482276, 0.00787957016710432, 0.00589174064932503, 0.0100359892367157, 0.152996834530156, -0.223792873623523, 0.140400217113785, 0.0515352884852302, 0.00426463891240289, 0.00427416501424585, -0.016023290842476, 0.283229163305198, -0.144782228129851, -0.036726289343039, 0.0849668890239085, -0.0434337176531759, -0.0123708436327973, -0.00161914495010556, -0.0146301665398266, -0.240203447161016, -0.0314387773391322, 0.555714721066932, 0.0911974510521012},
    {-0.0363573468678739, -0.0198488651832076, -0.0261022528933717, -0.0266548092172969, 0.103392980678712, -0.158623419731344, 0.106303963340101, 0.0247556540621011, 0.00927424233248091, 0.0358073121883813, 0.0820261281050844, -0.130442483751309, 0.115396099214526, 0.0364627551749936, 0.00947054301501511, 0.0107419585096758, 0.120816788744321, -0.133203458467504, 0.0346180719574672, 0.0406957966216644, 0.00778801235936358, 0.00828869627367684, -0.139335993251802, 0.80273916557744, -0.189108756762996, -0.142285209974459, 0.240816478080212, -0.0567313851505342, -0.0479271964399367, -0.0140798274249358, -0.0191093384963022, -0.158803412951156, -0.0466525233047005, 0.268773392686982, 0.287098240946532},
    {-0.0306200848898892, -0.0353856505415786, 0.0194477483558447, 0.0230686829582336, -0.0931249229462171, 0.258170653831508, -0.108724843916401, 0.09090396072937, -0.053418281906734, -0.0366227589868138, 0.0989305159332579, -0.0724418888007602, -0.0341378102706134, 0.0675319354986143, -0.030998621592805, -0.0109865871941615, 0.0734948088867031, -0.042038018038909, -0.0102411188979747, 0.0247559120407589, 0.00869811756323167, 0.00999687560186194, -0.324063410110059, 0.527556796894204, 0.423366841894701, -0.188053952008691, 0.158263574599543, 0.127007272315765, -0.0633438900701261, -0.0327464338725475, 0.0427809924212844, -0.0689369712339988, -0.0356378486920951, 0.0580163903657517, 0.259532014079741},
    {-0.0211218344402416, -0.0413330967980874, 0.00142320657028389, -0.0404060597147742, -0.00728506876419387, 0.0170939377878669, 0.355352052140279, 0.157864947105883, -0.219648979514327, 0.119696401413182, 0.0632889822277056, -0.000987051146063762, -0.000983780760084434, 0.0739927864951071, -0.0899360086693542, 0.0359081343769531, 0.0296641416306707, -0.000404151390212536, -0.000295127767530988, 0.00999203742546721, 0.00519315335829105, 0.00639531772709704, -0.290677226535459, 0.00761984615430343, 0.679795270879218, -0.119018761769261, 0.00228590380671464, 0.203934117044056, -0.0400901511575048, -0.0293727779195009, 0.0686929477078465, -0.016072376487806, -0.0117757187634492, 0.000308690042227501, 0.0909062977046968},
    {-0.0096820984801282, -0.0266278562476348, -0.0414545183650566, 0.193565613495663, 0.218312526315296, -0.496518111503194, 0.793664260801162, 0.126759861966115, -0.245715646165504, 0.267337012340233, 0.0154286376713807, 0.00728527901666089, 0.00895048860280726, 0.0445686382427208, -0.0820828851711445, 0.0801993480982708, 0.00542469327662725, 0.0024336941106369, 0.00268508780292869, 0.00182724782387423, 0.00120438047899995, 0.00155905556593931, -0.0846939152475721, -0.0576470064111894, 0.236651468687049, -0.0282925447705457, -0.0172937233551123, 0.0709938865144689, -0.00953003022061855, -0.0085582747343177, 0.0239135040502402, -0.00115995221981632, -0.00104167453261525, -0.00070901691443244, 0.00824256947780729},
    {-0.0185850635184789, -0.0398714950680977, 0.256494600498464, -0.0264567387485711, 0.294923085078976, -0.257360821304334, 0.128736049066641, 0.0081481347710833, 0.00616862571740956, 0.0108243316129863, 0.20507471910435, -0.447044969785973, 0.624113536703126, 0.00353082203659206, 0.00238662360542684, 0.00324722840044391, 0.0888647963864357, -0.172960417191054, 0.187229962453518, 0.00747189331800403, 0.00414565073336089, 0.00517278926079176, -0.0498420450994396, 0.174844018669228, -0.0607214186058459, -0.0192837443583844, 0.0524520573990264, -0.0182160268238257, -0.00162140787439517, -0.00125721198962149, -0.0015316324871063, -0.0408080835352961, -0.0316418914106898, 0.110998564394833, 0.0123754785904182},
    {-0.016308497575577, -0.0376359379261082, -0.00474578684781536, -0.0266548092172969, 0.669144967779083, -0.31338587445254, 0.13779182750758, 0.0379956047588089, 0.00997162717358072, 0.0115857558571598, 0.163186854623018, -0.277088665503788, 0.241642287804682, 0.0154769114656852, 0.00369162422462736, 0.00347565067341827, 0.066471596317428, -0.102581776488159, 0.0724910994750197, 0.00558903746542615, 0.00326405021199662, 0.004116212923675, -0.194189129108341, 0.513143947956848, -0.0793118888261498, -0.0718913052701172, 0.153939814567604, -0.023793045806185, -0.00604473520801718, -0.00489821195904203, -0.00200055710701373, -0.0259614587499537, -0.0210372701776153, 0.055590896991734, 0.0389591824463453},
    {-0.0125039973795695, -0.0320953472655637, -0.0175985869100488, 0.0230686829582336, 0.13722625562885, 0.575928446322043, -0.140929787262841, 0.0711243588603503, -0.03288994993426, -0.0118496005007186, 0.100332084660509, -0.099500374910785, 0.0162764465761881, 0.0264907481816322, -0.0114343437918564, -0.00355480233381655, 0.0373693630686833, -0.0345917672852214, 0.00488282708533212, 0.00314207544005111, 0.00197545632867101, 0.00253076894271232, -0.258629046058043, 0.380788240201602, 0.177559328673039, -0.0899135885916039, 0.114233971421775, 0.0532666325687126, -0.00756007743351914, -0.00652363956815728, 0.00447874312604046, -0.0106646772112092, -0.00920261873617952, 0.0135493249780211, 0.0352184501509476},
    {-0.00781686379284142, -0.0224172392883417, 0.0200527846384615, -0.0404060597147742, -0.121039277759041, 0.409587603262319, 0.460609436699216, 0.0787502465351571, -0.0961276701025703, 0.0387287735102247, 0.040923081523459, -0.01035055334628, -0.00528863558311494, 0.0267417912642991, -0.0313547065949565, 0.0116183777209743, 0.0138965470222835, -0.00337612014232489, -0.00158655594443213, 0.00116844376019949, 0.000792354457711026, 0.00103224072449097, -0.164893766239597, 0.0590749737571153, 0.28510497277546, -0.0537846767144484, 0.0177221041814198, 0.0855296195465343, -0.00452230110117078, -0.00415926793366318, 0.00719146634852046, -0.00235004339388581, -0.00216139083007474, 0.00077434162295732, 0.0123359691307153},
    {-0.00330330498807955, -0.010377765989116, -0.0373255322657574, 0.193565613495663, 0.206363312425294, -0.508716820740598, 1.02875232011214, 0.0478241068894885, -0.0882267290306917, 0.0864991301291096, 0.00754512943443963, 0.00268012197136592, 0.002737494332209, 0.0150615693989049, -0.0273436744040654, 0.0259491709984149, 0.00237623863762128, 0.000830636966295305, 0.000821230322520663, 0.000199797921341287, 0.000144057321402418, 0.000190317776273027, -0.0394179087905204, -0.0191104279350487, 0.0992512208124514, -0.0122165977986352, -0.00573300288221714, 0.0297747144603596, -0.00102719095943715, -0.000994274360901273, 0.00250350531445982, -0.000162058201332205, -0.000156865004581955, -7.6050644429733e-05, 0.00111851527565549},
    {-0.0308956026377743, 0.30566354512252, -0.0284861396506215, -0.0264567387485711, 0.00553719265411166, 0.00387645332275327, 0.00568515050333974, 0.31668333287907, -0.266830935779783, 0.130690033482262, 0.351982375922268, -0.291266875281556, 0.141477002112519, 0.00604849035520949, 0.00428125822656373, 0.00643242509446912, 0.00672268409775297, 0.00467332883378228, 0.00696334827094774, 0.154540818103216, -0.321682889512789, 0.398248079160478, 0.0952106221031626, -0.0317968637110471, -0.0323761407582661, -0.00152763868231471, -0.00156500797046698, -0.00159351937348629, -0.0351173025979231, 0.107725414571986, -0.0366317655360569, -0.039031645562219, 0.119733005913318, -0.0399864425485489, 0.0130709476216944},
    {-0.0278698977200173, 0.00669084371150372, -0.0255216716723957, -0.0266548092172969, 0.024696863491794, 0.00606875645427751, 0.0060850653969138, 0.726880420362404, -0.325409773332621, 0.139883262544633, 0.137865808082476, -0.175107042470173, 0.107680212589652, 0.0271328435929707, 0.00672966104875469, 0.00688490609661069, 0.00514622667323366, 0.00362131423099481, 0.00529990606922177, 0.118301272030906, -0.194176690389937, 0.155987336317311, 0.279853835753502, -0.119977797078753, -0.0422884203860175, -0.00578753808936743, -0.00590518015907653, -0.00208139128324113, -0.133043715594683, 0.316638730113968, -0.0478469472948315, -0.0252341084543326, 0.0600561704160454, -0.025747036870525, 0.0411485850360966},
    {-0.022268867468283, -0.0205345190513158, -0.0201879061271679, 0.0230686829582336, 0.0433835769156871, -0.0191358805337486, -0.00622364176003367, 0.167093720255385, 0.600939576151325, -0.143068850951722, 0.0104093446885927, -0.0604049087085828, 0.0621282499374311, 0.0480669960341638, -0.0213449189181003, -0.00704169738562073, 0.00299440295601837, 0.00214553663930313, 0.00305788669055025, 0.0688352264995516, -0.067378027176018, 0.0117775826607491, 0.208682812741731, -0.152758304485708, 0.0946731145294438, -0.00741225556502829, -0.00751860203093287, 0.00465971047251578, -0.170392661971493, 0.236112757380085, 0.107117255262284, -0.0106148570284821, 0.0147089853118771, -0.0107671524426325, 0.0371976335199441},
    {-0.014551889869055, 0.0207507657939298, -0.0130520026587977, -0.0404060597147742, 0.0450304029511844, -0.053477017443967, 0.0203411087250162, -0.126761056765116, 0.441928259975204, 0.467600669283436, -0.00290900218672422, -0.00621279895212724, 0.0237555195281293, 0.0503360898201808, -0.0600144777647142, 0.0230148099219634, 0.00115514811169001, 0.000843706814744084, 0.00116922152266207, 0.0265545028764066, -0.00697230141826363, -0.00329137085372817, 0.0334772199353666, -0.0931247868417251, 0.152015531609652, -0.00454625343839352, -0.00458350342284581, 0.00748204353630127, -0.104509109078726, 0.0378775741255778, 0.171996945322831, -0.00239834878787668, 0.000869241301476933, -0.00241799979419903, 0.0130292178352812},
    {-0.00638364542619709, -0.0368948524592729, -0.00567499956394006, 0.193565613495663, 0.0259638427028638, -0.0473788984736528, 0.0454310335985985, 0.204659584876928, -0.507343961262246, 1.04436695187696, 0.00142591522038156, 0.00143537619017199, 0.00415844620979048, 0.0292366119663364, -0.0534353517327497, 0.0514026357641057, 0.000203698888670453, 0.000151179155458661, 0.000204674320153778, 0.00468262266144128, 0.00161886059114076, 0.00161334213417565, -0.0100100832039726, -0.0214892201090948, 0.0529199015640962, -0.00105429916924126, -0.00105767666444944, 0.00260466153192842, -0.0242361910467488, -0.0113258409537497, 0.0598758647845398, -0.000168859688239654, -7.8910005652995e-05, -0.000169400637910064, 0.00118137286371111},
    {-0.0273944922839775, -0.011025911508692, -0.0207049086523348, -0.0264567387485711, 0.0051246288316901, 0.00536188113781915, 0.028277822772303, 0.126397002975774, -0.17165599760043, 0.109157185209764, 0.698773601926539, -0.259177038433349, 0.109362514995889, 0.00530923083978041, 0.00369992558671236, 0.00537260109800341, 0.0293515690248119, 0.0055863807230326, 0.0053827072127063, 0.113302027600821, -0.178843158089469, 0.132762407176673, 0.304657734076697, -0.0367347228625228, -0.13450515845961, -0.00656668547127669, -0.00180804417049385, -0.00662020150701523, -0.0253485180939922, 0.057882973869504, -0.0255550990557525, -0.140136829790449, 0.320000420807172, -0.0385846983660779, 0.0453555872283232},
    {-0.0244753130251873, -0.0400796207547676, -0.0297236815267526, -0.0266548092172969, 0.035177482531519, 0.0120047522387559, 0.0302669913049302, 0.23522331288152, -0.204904421568362, 0.116835712643712, 0.22191055743483, -0.218111137493024, 0.128105777916878, 0.0236247260194704, 0.00578290481392635, 0.0057505300895158, 0.0222876553178487, 0.00615563069515611, 0.0063052307713338, 0.0860341243033995, -0.105068053208744, 0.0421615523278778, 0.876508240496471, -0.198227651010737, -0.175685259324049, -0.0247372100836885, -0.00975655513128467, -0.00864704247671411, -0.0954898205714347, 0.166530824286541, -0.0333790484772362, -0.0900854556156691, 0.157105805520739, -0.0355304301199562, 0.142783698010478},
    {-0.0192801894065167, 0.0102723306758721, -0.0397189812555842, 0.0230686829582336, 0.0984497965965412, -0.0544785376003364, -0.0309562673116838, -0.0564785835866364, 0.352177395909631, -0.11949643476987, -0.0175005242960599, -0.100781285551626, 0.117757464577843, 0.041356808307329, -0.0181908408918033, -0.00588148801582211, 0.0128148721626431, 0.00520560476519474, 0.00579589774391151, 0.0494675769545879, -0.0336517170080883, -0.00332498498225042, 0.608304956655547, -0.363238336703044, 0.393315014495556, -0.0314204682320264, -0.0178782063943612, 0.0193585486349735, -0.12128832894236, 0.115573957173589, 0.0747272764156988, -0.0375825527605208, 0.0358118904027676, -0.0213844246405819, 0.129074077919252},
    {-0.0124102698498274, 0.0091251172827844, -0.0397405972089105, -0.0404060597147742, 0.148813736423541, -0.200637348699184, 0.101176260361138, -0.0492106437897536, 0.128663531590443, 0.390557500837349, -0.00561721756543106, -0.00678633971875518, 0.0655709656704383, 0.0427698343143905, -0.0507088224103505, 0.0192228267319271, 0.00488202238539687, 0.00267462964338706, 0.00322733351433675, 0.018845433257434, -0.0017151706690991, -0.00106723454287006, 0.0484793826839227, -0.291823158304032, 0.631541397109155, -0.0191066759686632, -0.0143632269164338, 0.0310837989915452, -0.0737550052650136, 0.00921076515456765, 0.119988728653697, -0.00841886793603267, 0.00105137563406689, -0.00632878846865118, 0.0452107867882593},
    {-0.00537606858025744, -0.0406159076210842, -0.0235167508261139, 0.193565613495663, 0.111110855045382, -0.212909749655552, 0.225973035491152, 0.217346756079598, -0.5074589290346, 0.87229418920046, 0.00753214688322394, 0.00645170840967712, 0.0148637525779309, 0.0245854244640888, -0.044833975643392, 0.0429333965480547, 0.000852007325023534, 0.000570008174352239, 0.000731578166541979, 0.00328889257587271, 0.00135858380447916, 0.0014310585698545, -0.0498012326664735, -0.0806568214253448, 0.219853249301445, -0.00439993687100405, -0.00396984336412236, 0.0108209441854575, -0.016984501522864, -0.00946190799271432, 0.0417706772585564, -0.000588597513558668, -0.000327902206051711, -0.00053106214971837, 0.00409930951603689},
    {-0.0209614117032462, -0.00588069770174657, 0.0196804606852359, -0.0264567387485711, -0.00832019668364345, -0.0348389537831829, 0.0625461354887269, 0.00349302620766804, -0.0658600199515991, 0.0764964016825789, 0.0427126061047168, 0.646111276941326, -0.124430929391771, 0.00400152580496339, 0.00272474454845825, 0.00376507190876497, 0.0489305219497224, -0.0267307568512312, -0.00612435861726494, 0.0598439668951064, -0.0505321770136863, 0.00257115858779147, 0.258541102529701, 0.167268194342737, -0.208488513147469, -0.01069629891075, 0.00823276344896483, -0.0102615839031088, -0.0130819973384468, 0.0155633251325517, -0.0125503236613745, -0.159966220165597, 0.190307812351086, 0.123123340272851, 0.0492677426897372},
    {-0.0184718652791737, 0.0160155329372752, 0.0231559130793074, -0.0266548092172969, -0.0414127978223251, -0.0344432021170079, 0.0669458661735615, -0.036169047347175, -0.0724944037069556, 0.0818774466205661, -0.075472578046094, 0.221401884724775, -0.105688373127378, 0.0176021151318453, 0.0042248512136143, 0.00402992124403012, 0.0367296654322384, -0.0129029273094945, -0.00520186983952703, 0.0449218359954094, -0.027157463995315, -0.00454320129074367, 0.685904525794327, 0.398568738617759, -0.272319358735952, -0.0399733554598202, 0.0196171313744728, -0.01340327054917, -0.0488889974090573, 0.0412891994362848, -0.0163927308982088, -0.102014814964114, 0.0861566050386761, 0.0500642991881213, 0.155099535112544},
    {-0.0142538719043459, 0.019625155535545, 0.00551430449164191, 0.0230686829582336, -0.017812894403291, 0.0160562855400303, -0.068470437243077, -0.0723235380733696, 0.0876260164567922, -0.0837420574397002, -0.0495680050107214, 0.00739045414443792, -0.0149312715941613, 0.0302890327371378, -0.0131335888893546, -0.00412169541459887, 0.0207590359443045, -0.00110769826546356, -0.000734901381042549, 0.025389123400355, -0.00604518312760956, -0.00298383108374494, 0.33477071449996, 0.0750239625962774, 0.609654406640305, -0.0501762046732544, 0.00369260001571817, 0.0300065444910841, -0.0613674862179832, 0.0201520973788721, 0.0366991927248621, -0.0420591130547637, 0.0138115375776987, 0.00309524170946099, 0.140207388933765},
    {-0.00897333425654371, -0.019058139115592, -0.0307674372271625, -0.0404060597147742, 0.132351652535693, -0.22451483832234, 0.223786114643475, 0.0872667704762523, -0.165422120128656, 0.273699284264116, 0.0220325931913584, 0.00976353258237017, 0.0408683030760232, 0.0307531007458301, -0.0361554636663502, 0.0134711890228238, 0.0077643592676564, 0.00213396519922829, 0.00201149461263446, 0.00949611899608965, 0.00157230163571786, 0.00132628973882769, -0.137863629824335, -0.228845143762454, 0.978915071973998, -0.0301321459013352, -0.0112635157116612, 0.0481811635251755, -0.0368528082257305, -0.00829893766954673, 0.0589274718534791, -0.00930437699442086, -0.00209526623473859, -0.00347801304318122, 0.0491104524580728},
    {-0.00381478498889272, -0.040797424542492, -0.0382757664925028, 0.193565613495663, 0.190282673186367, -0.394592727959424, 0.499817125541642, 0.207221789959828, -0.444598645440034, 0.61129614650863, 0.0158838417532036, 0.010476000137812, 0.0178385643921465, 0.0174062774729832, -0.0316348028115303, 0.0300873491893934, 0.0013342156582414, 0.000745405326831925, 0.000877995254786769, 0.00163179860956264, 0.000839868996894842, 0.000956155099287178, -0.0965076725717216, -0.104757061984401, 0.340781555015693, -0.00686687020511378, -0.0051560316909917, 0.0167729073733279, -0.00839845431548992, -0.00580944488641606, 0.0205139302338836, -0.000643753339571877, -0.000445302124200787, -0.000483366150934852, 0.00445289629753881},
    {-0.0124384929539138, 0.00932435981520399, -0.0406552941435215, -0.0264567387485711, 0.0715572838247991, -0.134890782233763, 0.0993175900782414, -0.0027453015983042, -0.00403615898265421, 0.0414498988603882, -0.0533052495838725, 0.1533101456584, 0.579870570013429, 0.00233689276746134, 0.00155308751767127, 0.00204012014144113, 0.0453752157129887, -0.0589927390317728, 0.0285406155826317, 0.0189372104235514, -0.00176516193035209, -0.00109496327120835, 0.0251594819687857, 0.35092394715196, -0.179386721267945, -0.00968120372976691, 0.0172721051771466, -0.00882922451508193, -0.00404042139090875, 0.00051681042474265, -0.00368485041650242, -0.078452462490624, 0.0100348568971312, 0.139965981645223, 0.0229695926275674},
    {-0.0108112314285624, -0.00343000582694799, -0.0261022528933717, -0.0266548092172969, 0.103392980678712, -0.158623419731344, 0.106303963340101, 0.00466602892968338, 0.0020590501987333, 0.0443656408238898, 0.0154605604751187, -0.0289605999565853, 0.142976994846623, 0.0101628551970847, 0.00238940091495448, 0.0021836298741673, 0.0336739098154427, -0.0336069922318887, 0.00703717632537022, 0.0140537054411444, 0.000436243804043034, 0.000317581213946213, -0.0309351205533025, 0.994602368027883, -0.234307761919136, -0.0358983017508577, 0.0489532756297695, -0.0115323799943941, -0.0149820487555178, -0.000635449999028169, -0.00481300426249404, -0.0496419705742332, -0.0021055191227794, 0.067695042656643, 0.0723104600244308},
    {-0.00816939214277011, -0.025480230590235, 0.0194477483558447, 0.0230686829582336, -0.0931249229462171, 0.258170653831508, -0.108724843916401, 0.0693603943777795, -0.0450703189999695, -0.0453759880842459, 0.0754847153641236, -0.0611210042829736, -0.0422971101827511, 0.0171871218319644, -0.0073406955135613, -0.00223335809672941, 0.0187046946755825, -0.00995490362348404, -0.00208181898583693, 0.00780634832064037, 0.00173788412922109, 0.00155056005752834, -0.273420273893854, 0.653648485037773, 0.524556022117167, -0.0445325221215019, 0.0321718864559736, 0.0258180920932991, -0.018585514776185, -0.00561642914824809, 0.0107751034352762, -0.020226561647485, -0.00611234349835387, 0.0146123914325402, 0.0653674479763474},
    {-0.00502599423716682, -0.0413033167094812, 0.00142320657028389, -0.0404060597147742, -0.00728506876419387, 0.0170939377878669, 0.355352052140279, 0.162767434125055, -0.238242506157153, 0.148305115029899, 0.0652544179974326, -0.00107060610644985, -0.00121891483006988, 0.0171227627066027, -0.0199509940309113, 0.00729942076023658, 0.00686461589158584, -8.96551013661061e-05, -5.9993697545525e-05, 0.00286492688956191, 0.00124954567544989, 0.00134041565416254, -0.315283372068211, 0.00944107046730018, 0.842273574261528, -0.0264025793534475, 0.00046467949371789, 0.0414558136617459, -0.0110190374433332, -0.0064763548643407, 0.0173014597122298, -0.00441759667172827, -0.00259640861016901, 7.7748713767195e-05, 0.0228962608216351},
    {-0.00209476062722415, -0.0307812864125691, -0.0414545183650566, 0.193565613495663, 0.218312526315296, -0.496518111503194, 0.793664260801162, 0.148260957594398, -0.292641263819638, 0.331233402999376, 0.0180456538848819, 0.00867658731539759, 0.0110897506202466, 0.00953507766758134, -0.0172667766101734, 0.0163029574391277, 0.00116056657225543, 0.000511946582509205, 0.000545825785489329, 0.000484358984172271, 0.00030173460230909, 0.000370682594362364, -0.100868360573135, -0.0714252543602301, 0.293213687890888, -0.00595155798029956, -0.00351547540607157, 0.0144316673106299, -0.00248386490399951, -0.00207197510408051, 0.00602301314340308, -0.000302324813501949, -0.000252191448058954, -0.000178577685041431, 0.00207602801312361},
    {-0.00431783986658355, -0.0415876825462491, 0.256494600498464, -0.0264567387485711, 0.294923085078976, -0.257360821304334, 0.128736049066641, 0.00872429846354246, 0.00688702196831944, 0.0134114620492584, 0.21957578109077, -0.49910768926269, 0.773283313112873, 0.000801066700129615, 0.000522361946184598, 0.000660097964171761, 0.020161488871774, -0.0378559651934288, 0.0380601860437703, 0.00210038326343512, 0.00101303245225041, 0.00112588142272714, -0.0556466343187306, 0.216633599631123, -0.0752344837839615, -0.00422064635993353, 0.0106624764371307, -0.00370296164571004, -0.000439698428606068, -0.000285329791407277, -0.000385767078773935, -0.0110664629722458, -0.00718126644549854, 0.0279568318739249, 0.00311696981125836},
    {-0.00371426824464874, -0.0405329728195471, -0.00474578684781536, -0.0266548092172969, 0.669144967779083, -0.31338587445254, 0.13779182750758, 0.041831590664637, 0.0113675331696386, 0.0143548747900384, 0.179661983215495, -0.3158776939024, 0.299397365884506, 0.00345414137402781, 0.000799034653613675, 0.00070653174053968, 0.0148351492186774, -0.0222033417422354, 0.0147360213951958, 0.00154549593671609, 0.000805388003440265, 0.000921222223452022, -0.221373235069479, 0.635790811838521, -0.0982682742064899, -0.0155605339842407, 0.0312929506859305, -0.00483666042584493, -0.00162106505915672, -0.00113509792207312, -0.00050387353205791, -0.00696229234466264, -0.00487511807663271, 0.0140014906444226, 0.0098125171216068},
    {-0.00276215668983152, -0.0361168933250246, -0.0175985869100488, 0.0230686829582336, 0.13722625562885, 0.575928446322043, -0.140929787262841, 0.0813133174158523, -0.0385404156710591, -0.0146817811109555, 0.114705211796885, -0.116594455636229, 0.0201666905041452, 0.0057652906495019, -0.00243318076694153, -0.000722621723579573, 0.00813284841940039, -0.0073609841006231, 0.000992583157375035, 0.000847263751839206, 0.000492587905316755, 0.000588154424001427, -0.303061298652316, 0.471800681544231, 0.219997897619223, -0.0191332374144274, 0.0232215300791449, 0.0108280636225289, -0.00199326209964855, -0.00155395592539946, 0.00112804583792467, -0.00281180941293524, -0.0021920990215464, 0.00341262251886692, 0.00887035156804357},
    {-0.00166934325119207, -0.0263257809398333, 0.0200527846384615, -0.0404060597147742, -0.121039277759041, 0.409587603262319, 0.460609436699216, 0.0933367349209928, -0.115553699595248, 0.0479853624886688, 0.048503045772689, -0.0124422523789915, -0.00655267576338932, 0.0056603311859643, -0.00654850098736382, 0.00236178874253018, 0.00294142818295282, -0.000705110284432676, -0.000322515764157744, 0.000306432057937926, 0.000198927168058588, 0.000248700826247235, -0.198216441830415, 0.0731945210967083, 0.353248095045939, -0.0112330506905862, 0.00360255684182681, 0.0173864972760549, -0.00117023657418757, -0.00101636076814727, 0.00181129023360528, -0.000608121102272565, -0.000528158531587251, 0.000195030797776698, 0.0031070186976706},
    {-0.000684999674742247, -0.0125964445065001, -0.0373255322657574, 0.193565613495663, 0.206363312425294, -0.508716820740598, 1.02875232011214, 0.0582613106027223, -0.108078195915314, 0.107173342659665, 0.00919178962470598, 0.00328316317153113, 0.00339178460704532, 0.00311203997815367, -0.00561925159590036, 0.00527495846785977, 0.000490981347431733, 0.000170699739526397, 0.000166940047684341, 5.11494469165121e-05, 3.62655983429082e-05, 4.71311778041565e-05, -0.0482871405937743, -0.0236780235639219, 0.12297331871021, -0.00251056736786789, -0.00116540725334392, 0.00605261656260126, -0.000261545846873419, -0.000247593765947647, 0.000630549390916953, -4.12636512428809e-05, -3.90624547480824e-05, -1.91546178260379e-05, 0.000281716648142109}};
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('simplify expressions', True), ('ignore zero tables', True), ('non zero columns', True), ('remove zero terms', True), ('ignore ones', True)
    // Total number of operations to compute element tensor: 17750
    
    // Loop quadrature points for integral
    // Number of operations to compute element tensor for following IP loop = 17750
    for (unsigned int ip = 0; ip < 125; ip++)
    {
      
      // Function declarations
      double F0 = 0;
      
      // Total number of operations to compute function values = 70
      for (unsigned int r = 0; r < 35; r++)
      {
        F0 += FE0[ip][r]*w[0][r];
      }// end loop over 'r'
      
      // Number of operations to compute ip constants: 2
      // Number of operations: 2
      const double Gip0 = F0*W125[ip]*det;
      
      
      // Number of operations for primary indices = 70
      for (unsigned int j = 0; j < 35; j++)
      {
        // Number of operations to compute entry = 2
        A[j] += FE0[ip][j]*Gip0;
      }// end loop over 'j'
    }// end loop over 'ip'
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class UFC_Poisson3D_4LinearForm_cell_integral_0: public ufc::cell_integral
{
private:

  UFC_Poisson3D_4LinearForm_cell_integral_0_quadrature integral_0_quadrature;

public:

  /// Constructor
  UFC_Poisson3D_4LinearForm_cell_integral_0() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson3D_4LinearForm_cell_integral_0()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Reset values of the element tensor block
    A[0] = 0;
    A[1] = 0;
    A[2] = 0;
    A[3] = 0;
    A[4] = 0;
    A[5] = 0;
    A[6] = 0;
    A[7] = 0;
    A[8] = 0;
    A[9] = 0;
    A[10] = 0;
    A[11] = 0;
    A[12] = 0;
    A[13] = 0;
    A[14] = 0;
    A[15] = 0;
    A[16] = 0;
    A[17] = 0;
    A[18] = 0;
    A[19] = 0;
    A[20] = 0;
    A[21] = 0;
    A[22] = 0;
    A[23] = 0;
    A[24] = 0;
    A[25] = 0;
    A[26] = 0;
    A[27] = 0;
    A[28] = 0;
    A[29] = 0;
    A[30] = 0;
    A[31] = 0;
    A[32] = 0;
    A[33] = 0;
    A[34] = 0;
    
    // Add all contributions to element tensor
    integral_0_quadrature.tabulate_tensor(A, w, c);
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class UFC_Poisson3D_4LinearForm: public ufc::form
{
public:

  /// Constructor
  UFC_Poisson3D_4LinearForm() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson3D_4LinearForm()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "Form([Integral(Product(BasisFunction(FiniteElement('Lagrange', Cell('tetrahedron', 1), 4), 0), Function(FiniteElement('Lagrange', Cell('tetrahedron', 1), 4), 0)), Measure('cell', 0, None))])";
  }

  /// Return the rank of the global tensor (r)
  virtual unsigned int rank() const
  {
    return 1;
  }

  /// Return the number of coefficients (n)
  virtual unsigned int num_coefficients() const
  {
    return 1;
  }

  /// Return the number of cell integrals
  virtual unsigned int num_cell_integrals() const
  {
    return 1;
  }
  
  /// Return the number of exterior facet integrals
  virtual unsigned int num_exterior_facet_integrals() const
  {
    return 0;
  }
  
  /// Return the number of interior facet integrals
  virtual unsigned int num_interior_facet_integrals() const
  {
    return 0;
  }
    
  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      return new UFC_Poisson3D_4LinearForm_finite_element_0();
      break;
    case 1:
      return new UFC_Poisson3D_4LinearForm_finite_element_1();
      break;
    }
    return 0;
  }
  
  /// Create a new dof map for argument function i
  virtual ufc::dof_map* create_dof_map(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      return new UFC_Poisson3D_4LinearForm_dof_map_0();
      break;
    case 1:
      return new UFC_Poisson3D_4LinearForm_dof_map_1();
      break;
    }
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(unsigned int i) const
  {
    return new UFC_Poisson3D_4LinearForm_cell_integral_0();
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(unsigned int i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(unsigned int i) const
  {
    return 0;
  }

};

// DOLFIN wrappers

#include <dolfin/fem/Form.h>
#include <dolfin/fem/FiniteElement.h>
#include <dolfin/fem/DofMap.h>
#include <dolfin/function/Coefficient.h>
#include <dolfin/function/Function.h>
#include <dolfin/function/FunctionSpace.h>

class Poisson3D_4BilinearFormFunctionSpace0 : public dolfin::FunctionSpace
{
public:

  Poisson3D_4BilinearFormFunctionSpace0(const dolfin::Mesh& mesh)
    : dolfin::FunctionSpace(boost::shared_ptr<const dolfin::Mesh>(&mesh, dolfin::NoDeleter<const dolfin::Mesh>()),
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new UFC_Poisson3D_4LinearForm_finite_element_1()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new UFC_Poisson3D_4LinearForm_dof_map_1()), mesh)))
  {
    // Do nothing
  }

};

class Poisson3D_4BilinearFormFunctionSpace1 : public dolfin::FunctionSpace
{
public:

  Poisson3D_4BilinearFormFunctionSpace1(const dolfin::Mesh& mesh)
    : dolfin::FunctionSpace(boost::shared_ptr<const dolfin::Mesh>(&mesh, dolfin::NoDeleter<const dolfin::Mesh>()),
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new UFC_Poisson3D_4LinearForm_finite_element_1()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new UFC_Poisson3D_4LinearForm_dof_map_1()), mesh)))
  {
    // Do nothing
  }

};

class Poisson3D_4LinearFormFunctionSpace0 : public dolfin::FunctionSpace
{
public:

  Poisson3D_4LinearFormFunctionSpace0(const dolfin::Mesh& mesh)
    : dolfin::FunctionSpace(boost::shared_ptr<const dolfin::Mesh>(&mesh, dolfin::NoDeleter<const dolfin::Mesh>()),
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new UFC_Poisson3D_4LinearForm_finite_element_1()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new UFC_Poisson3D_4LinearForm_dof_map_1()), mesh)))
  {
    // Do nothing
  }

};

class Poisson3D_4LinearFormCoefficientSpace0 : public dolfin::FunctionSpace
{
public:

  Poisson3D_4LinearFormCoefficientSpace0(const dolfin::Mesh& mesh)
    : dolfin::FunctionSpace(boost::shared_ptr<const dolfin::Mesh>(&mesh, dolfin::NoDeleter<const dolfin::Mesh>()),
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new UFC_Poisson3D_4LinearForm_finite_element_1()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new UFC_Poisson3D_4LinearForm_dof_map_1()), mesh)))
  {
    // Do nothing
  }

};

class Poisson3D_4TestSpace : public dolfin::FunctionSpace
{
public:

  Poisson3D_4TestSpace(const dolfin::Mesh& mesh)
    : dolfin::FunctionSpace(boost::shared_ptr<const dolfin::Mesh>(&mesh, dolfin::NoDeleter<const dolfin::Mesh>()),
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new UFC_Poisson3D_4LinearForm_finite_element_1()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new UFC_Poisson3D_4LinearForm_dof_map_1()), mesh)))
  {
    // Do nothing
  }

};

class Poisson3D_4TrialSpace : public dolfin::FunctionSpace
{
public:

  Poisson3D_4TrialSpace(const dolfin::Mesh& mesh)
    : dolfin::FunctionSpace(boost::shared_ptr<const dolfin::Mesh>(&mesh, dolfin::NoDeleter<const dolfin::Mesh>()),
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new UFC_Poisson3D_4LinearForm_finite_element_1()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new UFC_Poisson3D_4LinearForm_dof_map_1()), mesh)))
  {
    // Do nothing
  }

};

class Poisson3D_4CoefficientSpace : public dolfin::FunctionSpace
{
public:

  Poisson3D_4CoefficientSpace(const dolfin::Mesh& mesh)
    : dolfin::FunctionSpace(boost::shared_ptr<const dolfin::Mesh>(&mesh, dolfin::NoDeleter<const dolfin::Mesh>()),
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new UFC_Poisson3D_4LinearForm_finite_element_1()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new UFC_Poisson3D_4LinearForm_dof_map_1()), mesh)))
  {
    // Do nothing
  }

};

class Poisson3D_4FunctionSpace : public dolfin::FunctionSpace
{
public:

  Poisson3D_4FunctionSpace(const dolfin::Mesh& mesh)
    : dolfin::FunctionSpace(boost::shared_ptr<const dolfin::Mesh>(&mesh, dolfin::NoDeleter<const dolfin::Mesh>()),
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new UFC_Poisson3D_4LinearForm_finite_element_1()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new UFC_Poisson3D_4LinearForm_dof_map_1()), mesh)))
  {
    // Do nothing
  }

};

class Poisson3D_4BilinearForm : public dolfin::Form
{
public:

  // Create form on given function space(s)
  Poisson3D_4BilinearForm(const dolfin::FunctionSpace& V0, const dolfin::FunctionSpace& V1) : dolfin::Form()
  {
    boost::shared_ptr<const dolfin::FunctionSpace> _V0(&V0, dolfin::NoDeleter<const dolfin::FunctionSpace>());
    _function_spaces.push_back(_V0);
    boost::shared_ptr<const dolfin::FunctionSpace> _V1(&V1, dolfin::NoDeleter<const dolfin::FunctionSpace>());
    _function_spaces.push_back(_V1);

    _ufc_form = boost::shared_ptr<const ufc::form>(new UFC_Poisson3D_4BilinearForm());
  }

  // Create form on given function space(s) (shared data)
  Poisson3D_4BilinearForm(boost::shared_ptr<const dolfin::FunctionSpace> V0, boost::shared_ptr<const dolfin::FunctionSpace> V1) : dolfin::Form()
  {
    _function_spaces.push_back(V0);
    _function_spaces.push_back(V1);

    _ufc_form = boost::shared_ptr<const ufc::form>(new UFC_Poisson3D_4BilinearForm());
  }

  // Destructor
  ~Poisson3D_4BilinearForm() {}

};

class Poisson3D_4LinearFormCoefficient0 : public dolfin::Coefficient
{
public:

  // Constructor
  Poisson3D_4LinearFormCoefficient0(dolfin::Form& form) : dolfin::Coefficient(form) {}

  // Destructor  
  ~Poisson3D_4LinearFormCoefficient0() {}

  // Attach function to coefficient
  const Poisson3D_4LinearFormCoefficient0& operator= (dolfin::Function& v)
  {
    attach(v);
    return *this;
  }

  /// Create function space for coefficient
  const dolfin::FunctionSpace* create_function_space() const
  {
    return new Poisson3D_4LinearFormCoefficientSpace0(form.mesh());
  }
  
  /// Return coefficient number
  dolfin::uint number() const
  {
    return 0;
  }
  
  /// Return coefficient name
  virtual std::string name() const
  {
    return "f";
  }
  
};
class Poisson3D_4LinearForm : public dolfin::Form
{
public:

  // Create form on given function space(s)
  Poisson3D_4LinearForm(const dolfin::FunctionSpace& V0) : dolfin::Form(), f(*this)
  {
    boost::shared_ptr<const dolfin::FunctionSpace> _V0(&V0, dolfin::NoDeleter<const dolfin::FunctionSpace>());
    _function_spaces.push_back(_V0);

    _coefficients.push_back(boost::shared_ptr<const dolfin::Function>(static_cast<const dolfin::Function*>(0)));

    _ufc_form = boost::shared_ptr<const ufc::form>(new UFC_Poisson3D_4LinearForm());
  }

  // Create form on given function space(s) (shared data)
  Poisson3D_4LinearForm(boost::shared_ptr<const dolfin::FunctionSpace> V0) : dolfin::Form(), f(*this)
  {
    _function_spaces.push_back(V0);

    _coefficients.push_back(boost::shared_ptr<const dolfin::Function>(static_cast<const dolfin::Function*>(0)));

    _ufc_form = boost::shared_ptr<const ufc::form>(new UFC_Poisson3D_4LinearForm());
  }

  // Create form on given function space(s) with given coefficient(s)
  Poisson3D_4LinearForm(const dolfin::FunctionSpace& V0, dolfin::Function& w0) : dolfin::Form(), f(*this)
  {
    boost::shared_ptr<const dolfin::FunctionSpace> _V0(&V0, dolfin::NoDeleter<const dolfin::FunctionSpace>());
    _function_spaces.push_back(_V0);

    _coefficients.push_back(boost::shared_ptr<const dolfin::Function>(static_cast<const dolfin::Function*>(0)));

    this->f = w0;

    _ufc_form = boost::shared_ptr<const ufc::form>(new UFC_Poisson3D_4LinearForm());
  }

  // Create form on given function space(s) with given coefficient(s) (shared data)
  Poisson3D_4LinearForm(boost::shared_ptr<const dolfin::FunctionSpace> V0, dolfin::Function& w0) : dolfin::Form(), f(*this)
  {
    _function_spaces.push_back(V0);

    _coefficients.push_back(boost::shared_ptr<const dolfin::Function>(static_cast<const dolfin::Function*>(0)));

    this->f = w0;

    _ufc_form = boost::shared_ptr<const ufc::form>(new UFC_Poisson3D_4LinearForm());
  }

  // Destructor
  ~Poisson3D_4LinearForm() {}

  // Coefficients
  Poisson3D_4LinearFormCoefficient0 f;

};

#endif
