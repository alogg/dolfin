// This code conforms with the UFC specification version 1.0
// and was automatically generated by FFC version 0.6.2.
//
// Warning: This code was generated with the option '-l dolfin'
// and contains DOLFIN-specific wrappers that depend on DOLFIN.

#ifndef __POISSON3D_4_H
#define __POISSON3D_4_H

#include <cmath>
#include <stdexcept>
#include <fstream>
#include <ufc.h>
    
/// This class defines the interface for a finite element.

class poisson3d_4_0_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  poisson3d_4_0_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~poisson3d_4_0_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', 'tetrahedron', 4)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 35;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_02 = element_coordinates[3][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
    const double J_12 = element_coordinates[3][1] - element_coordinates[0][1];
    const double J_20 = element_coordinates[1][2] - element_coordinates[0][2];
    const double J_21 = element_coordinates[2][2] - element_coordinates[0][2];
    const double J_22 = element_coordinates[3][2] - element_coordinates[0][2];
      
    // Compute sub determinants
    const double d00 = J_11*J_22 - J_12*J_21;
    const double d01 = J_12*J_20 - J_10*J_22;
    const double d02 = J_10*J_21 - J_11*J_20;
    
    const double d10 = J_02*J_21 - J_01*J_22;
    const double d11 = J_00*J_22 - J_02*J_20;
    const double d12 = J_01*J_20 - J_00*J_21;
    
    const double d20 = J_01*J_12 - J_02*J_11;
    const double d21 = J_02*J_10 - J_00*J_12;
    const double d22 = J_00*J_11 - J_01*J_10;
      
    // Compute determinant of Jacobian
    double detJ = J_00*d00 + J_10*d10 + J_20*d20;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = d00*(element_coordinates[0][0] - element_coordinates[2][0] - element_coordinates[3][0]) \
                    + d10*(element_coordinates[0][1] - element_coordinates[2][1] - element_coordinates[3][1]) \
                    + d20*(element_coordinates[0][2] - element_coordinates[2][2] - element_coordinates[3][2]);
    
    const double C1 = d01*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[3][0]) \
                    + d11*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[3][1]) \
                    + d21*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[3][2]);
    
    const double C2 = d02*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[2][0]) \
                    + d12*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[2][1]) \
                    + d22*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[2][2]);
    
    // Get coordinates and map to the UFC reference element
    double x = (C0 + d00*coordinates[0] + d10*coordinates[1] + d20*coordinates[2]) / detJ;
    double y = (C1 + d01*coordinates[0] + d11*coordinates[1] + d21*coordinates[2]) / detJ;
    double z = (C2 + d02*coordinates[0] + d12*coordinates[1] + d22*coordinates[2]) / detJ;
    
    // Map coordinates to the reference cube
    if (std::abs(y + z - 1.0) < 1e-14)
      x = 1.0;
    else
      x = -2.0 * x/(y + z - 1.0) - 1.0;
    if (std::abs(z - 1.0) < 1e-14)
      y = -1.0;
    else
      y = 2.0 * y/(1.0 - z) - 1.0;
    z = 2.0 * z - 1.0;
    
    // Reset values
    *values = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    const double scalings_y_4 = scalings_y_3*(0.5 - 0.5*y);
    const double scalings_z_0 = 1;
    const double scalings_z_1 = scalings_z_0*(0.5 - 0.5*z);
    const double scalings_z_2 = scalings_z_1*(0.5 - 0.5*z);
    const double scalings_z_3 = scalings_z_2*(0.5 - 0.5*z);
    const double scalings_z_4 = scalings_z_3*(0.5 - 0.5*z);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    const double psitilde_a_4 = 1.75*x*psitilde_a_3 - 0.75*psitilde_a_2;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_0_4 = 0.0285714285714286*psitilde_bs_0_3 + 1.8*y*psitilde_bs_0_3 - 0.771428571428571*psitilde_bs_0_2;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_1_3 = 0.285714285714286*psitilde_bs_1_2 + 2*y*psitilde_bs_1_2 - 0.714285714285714*psitilde_bs_1_1;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_2_2 = 1.02040816326531*psitilde_bs_2_1 + 2.57142857142857*y*psitilde_bs_2_1 - 0.551020408163265*psitilde_bs_2_0;
    const double psitilde_bs_3_0 = 1;
    const double psitilde_bs_3_1 = 4.5*y + 3.5;
    const double psitilde_bs_4_0 = 1;
    
    // Compute psitilde_cs
    const double psitilde_cs_00_0 = 1;
    const double psitilde_cs_00_1 = 2*z + 1;
    const double psitilde_cs_00_2 = 0.3125*psitilde_cs_00_1 + 1.875*z*psitilde_cs_00_1 - 0.5625*psitilde_cs_00_0;
    const double psitilde_cs_00_3 = 0.155555555555556*psitilde_cs_00_2 + 1.86666666666667*z*psitilde_cs_00_2 - 0.711111111111111*psitilde_cs_00_1;
    const double psitilde_cs_00_4 = 0.09375*psitilde_cs_00_3 + 1.875*z*psitilde_cs_00_3 - 0.78125*psitilde_cs_00_2;
    const double psitilde_cs_01_0 = 1;
    const double psitilde_cs_01_1 = 3*z + 2;
    const double psitilde_cs_01_2 = 0.777777777777778*psitilde_cs_01_1 + 2.33333333333333*z*psitilde_cs_01_1 - 0.555555555555556*psitilde_cs_01_0;
    const double psitilde_cs_01_3 = 0.428571428571429*psitilde_cs_01_2 + 2.14285714285714*z*psitilde_cs_01_2 - 0.714285714285714*psitilde_cs_01_1;
    const double psitilde_cs_02_0 = 1;
    const double psitilde_cs_02_1 = 4*z + 3;
    const double psitilde_cs_02_2 = 1.265625*psitilde_cs_02_1 + 2.8125*z*psitilde_cs_02_1 - 0.546875*psitilde_cs_02_0;
    const double psitilde_cs_03_0 = 1;
    const double psitilde_cs_03_1 = 5*z + 4;
    const double psitilde_cs_04_0 = 1;
    const double psitilde_cs_10_0 = 1;
    const double psitilde_cs_10_1 = 3*z + 2;
    const double psitilde_cs_10_2 = 0.777777777777778*psitilde_cs_10_1 + 2.33333333333333*z*psitilde_cs_10_1 - 0.555555555555556*psitilde_cs_10_0;
    const double psitilde_cs_10_3 = 0.428571428571429*psitilde_cs_10_2 + 2.14285714285714*z*psitilde_cs_10_2 - 0.714285714285714*psitilde_cs_10_1;
    const double psitilde_cs_11_0 = 1;
    const double psitilde_cs_11_1 = 4*z + 3;
    const double psitilde_cs_11_2 = 1.265625*psitilde_cs_11_1 + 2.8125*z*psitilde_cs_11_1 - 0.546875*psitilde_cs_11_0;
    const double psitilde_cs_12_0 = 1;
    const double psitilde_cs_12_1 = 5*z + 4;
    const double psitilde_cs_13_0 = 1;
    const double psitilde_cs_20_0 = 1;
    const double psitilde_cs_20_1 = 4*z + 3;
    const double psitilde_cs_20_2 = 1.265625*psitilde_cs_20_1 + 2.8125*z*psitilde_cs_20_1 - 0.546875*psitilde_cs_20_0;
    const double psitilde_cs_21_0 = 1;
    const double psitilde_cs_21_1 = 5*z + 4;
    const double psitilde_cs_22_0 = 1;
    const double psitilde_cs_30_0 = 1;
    const double psitilde_cs_30_1 = 5*z + 4;
    const double psitilde_cs_31_0 = 1;
    const double psitilde_cs_40_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.866025403784439*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_0;
    const double basisvalue1 = 2.73861278752583*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_0;
    const double basisvalue2 = 1.58113883008419*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_0;
    const double basisvalue3 = 1.11803398874989*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_1;
    const double basisvalue4 = 5.1234753829798*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_0;
    const double basisvalue5 = 3.96862696659689*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_0;
    const double basisvalue6 = 2.29128784747792*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_0;
    const double basisvalue7 = 3.24037034920393*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_1;
    const double basisvalue8 = 1.87082869338697*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_1;
    const double basisvalue9 = 1.3228756555323*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_2;
    const double basisvalue10 = 7.93725393319377*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_0;
    const double basisvalue11 = 6.70820393249937*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_0;
    const double basisvalue12 = 5.19615242270663*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_0;
    const double basisvalue13 = 3*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_0;
    const double basisvalue14 = 5.80947501931113*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_1;
    const double basisvalue15 = 4.5*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_1;
    const double basisvalue16 = 2.59807621135332*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_1;
    const double basisvalue17 = 3.67423461417477*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_2;
    const double basisvalue18 = 2.12132034355964*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_2;
    const double basisvalue19 = 1.5*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_3;
    const double basisvalue20 = 11.1242977306435*psitilde_a_4*scalings_y_4*psitilde_bs_4_0*scalings_z_4*psitilde_cs_40_0;
    const double basisvalue21 = 9.81070843517429*psitilde_a_3*scalings_y_3*psitilde_bs_3_1*scalings_z_4*psitilde_cs_31_0;
    const double basisvalue22 = 8.2915619758885*psitilde_a_2*scalings_y_2*psitilde_bs_2_2*scalings_z_4*psitilde_cs_22_0;
    const double basisvalue23 = 6.42261628933256*psitilde_a_1*scalings_y_1*psitilde_bs_1_3*scalings_z_4*psitilde_cs_13_0;
    const double basisvalue24 = 3.70809924354783*psitilde_a_0*scalings_y_0*psitilde_bs_0_4*scalings_z_4*psitilde_cs_04_0;
    const double basisvalue25 = 8.77496438739212*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_1;
    const double basisvalue26 = 7.41619848709566*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_1;
    const double basisvalue27 = 5.74456264653803*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_1;
    const double basisvalue28 = 3.3166247903554*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_1;
    const double basisvalue29 = 6.42261628933256*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_2;
    const double basisvalue30 = 4.9749371855331*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_2;
    const double basisvalue31 = 2.87228132326901*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_2;
    const double basisvalue32 = 4.06201920231798*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_3;
    const double basisvalue33 = 2.34520787991171*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_3;
    const double basisvalue34 = 1.6583123951777*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_4;
    
    // Table(s) of coefficients
    const static double coefficients0[35][35] = \
    {{-0.0137464349807051, -0.0144900147488139, -0.00836581391578937, -0.00591552374999941, 0, 0, 0, 0, 0, 0, -0.00671936840905293, -0.00567890279999946, -0.00439885919382571, -0.00253968253968254, -0.00491807409042211, -0.00380952380952381, -0.00219942959691287, -0.00311046316543895, -0.0017958267458706, -0.00126984126984128, 0.0136980289516341, 0.0120805260192622, 0.010209907964538, 0.00790856070259325, 0.00456600965054471, 0.0108051509532101, 0.00913201930108942, 0.00707363173407281, 0.00408396318581522, 0.00790856070259324, 0.00612594477872282, 0.0035368158670364, 0.00500181296677924, 0.00288779806280616, 0.00204198159290761},
    {-0.0137464349807054, 0.0144900147488139, -0.00836581391578934, -0.00591552374999945, 0, 0, 0, 0, 0, 0, 0.00671936840905293, -0.00567890279999946, 0.00439885919382572, -0.00253968253968254, -0.00491807409042213, 0.00380952380952382, -0.00219942959691286, 0.00311046316543897, -0.0017958267458706, -0.00126984126984127, 0.0136980289516341, -0.0120805260192622, 0.010209907964538, -0.00790856070259325, 0.00456600965054471, -0.0108051509532101, 0.00913201930108941, -0.0070736317340728, 0.00408396318581521, 0.00790856070259325, -0.00612594477872282, 0.0035368158670364, -0.00500181296677924, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807053, 0, 0.0167316278315787, -0.00591552374999946, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0101587301587302, 0, 0, -0.00659828879073857, 0, 0.00359165349174119, -0.00126984126984127, 0, 0, 0, 0, 0.0228300482527235, 0, 0, 0, -0.0163358527432608, 0, 0, 0.0106104476011092, 0, -0.0057755961256123, 0.00204198159290761},
    {-0.0137464349807054, 0, 0, 0.0177465712499983, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0126984126984127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0306297238936141},
    {0.0439885919382572, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0, 0.0406349206349206, 0, 0, 0.00439885919382572, 0, -0.0143666139669648, 0.00761904761904763, 0, 0, 0, 0, 0, 0, 0, 0, 0.0367556686723369, 0, 0, -0.0424417904044368, 0, 0.0303218796594646, -0.0122518895574456},
    {-0.0329914439536931, 0, -0.0200779533978945, -0.0141972569999986, 0, 0, -0.00969857289937744, 0, 0.0712696645099798, -0.050395263067897, 0, 0, 0, 0, 0, 0, 0.0461880215351701, 0, 0.0107749604752236, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0495154221385096, 0, -0.0606437593189292, 0.0306297238936141},
    {0.0439885919382573, 0, 0.0267706045305259, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0, 0.0359165349174119, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0505364660991076, -0.0408396318581522},
    {0.0439885919382573, 0.0231840235981023, -0.0133853022652629, 0.0189296759999982, 0.0433733365754904, -0.0335968420452647, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, -0.0227156111999979, 0.0175954367753029, -0.0101587301587302, 0.00327871606028141, -0.00253968253968255, 0.0014662863979419, -0.0124418526617558, 0.00718330698348238, 0.00761904761904763, 0, 0, 0, 0, 0, 0.0243115896447228, -0.0205470434274512, 0.0159156714016638, -0.00918891716808423, -0.031634242810373, 0.0245037791148913, -0.0141472634681456, 0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, -0.0173880176985766, 0.0100389766989472, -0.0141972569999986, -0.00722888942924838, 0.00559947367421081, -0.00323285763312582, 0.0617213399848368, -0.03563483225499, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, -0.0266666666666667, 0.01539600717839, 0.00933138949631686, -0.00538748023761177, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, -0.0285877423007065, 0.0165051407128365, -0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, 0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0.0311046316543895, -0.017958267458706, 0.0253968253968255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754903, -0.0335968420452647, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, 0, -0.0117302911835353, 0.0101587301587302, -0.0229510124219699, 0.00761904761904761, -0.00146628639794191, 0.0165891368823411, -0.0071833069834824, -0.00761904761904763, 0, 0.0241610520385245, -0.0357346778758831, 0.0355885231616696, -0.0228300482527235, -0.00270128773830253, -0.0114150241263618, 0.0159156714016638, -0.0112308987609918, 0.00395428035129663, 0.00306297238936141, -0.0035368158670364, -0.00375135972508443, 0.00072194951570154, 0.00204198159290761},
    {-0.0329914439536929, -0.0173880176985768, -0.0100389766989472, 0.0141972569999986, -0.00722888942924839, 0.0615942104163185, -0.0614242950293904, -0.00685792666498187, -0.00395942580611001, 0.00559947367421077, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042213, -0.0266666666666667, 0.0175954367753029, 0.00933138949631688, 0.00538748023761179, -0.00761904761904761, 0, 0, 0.0357346778758831, -0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108943, 0, 0.00408396318581521, 0.00131809345043221, 0.00714693557517662, -0.00471575448938186, -0.00250090648338962, -0.00144389903140307, 0.00204198159290761},
    {0.0439885919382572, 0.0231840235981022, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0.0293257279588382, 0.0101587301587302, 0, -0.0101587301587302, -0.0219942959691286, 0.00207364211029264, 0.017958267458706, -0.00761904761904762, 0, 0, 0, 0.0395428035129662, -0.0456600965054471, 0, 0, -0.017684079335182, 0.0142938711503532, 0, 0.00612594477872282, 0, -0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.043988591938257, -0.0231840235981023, -0.0133853022652629, 0.0189296759999983, 0.0433733365754903, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484216, -0.0268774736362117, -0.0227156111999979, -0.0175954367753029, -0.0101587301587302, 0.00327871606028139, 0.00253968253968253, 0.0014662863979419, 0.0124418526617558, 0.00718330698348236, 0.00761904761904761, 0, 0, 0, 0, 0, -0.0243115896447228, -0.0205470434274512, -0.0159156714016638, -0.00918891716808424, -0.031634242810373, -0.0245037791148913, -0.0141472634681456, -0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, 0.0173880176985768, 0.0100389766989471, -0.0141972569999987, -0.00722888942924838, -0.00559947367421082, -0.00323285763312581, -0.0617213399848367, -0.03563483225499, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, 0.0266666666666667, 0.01539600717839, -0.00933138949631689, -0.00538748023761178, -0.019047619047619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, 0.0285877423007065, 0.0165051407128365, 0.0525190361511819, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382572, -0.0231840235981023, -0.0133853022652629, 0.0189296759999981, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, -0.0311046316543896, -0.017958267458706, 0.0253968253968255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484216, -0.0268774736362117, 0, 0.0117302911835352, 0.0101587301587302, -0.0229510124219699, -0.00761904761904762, -0.00146628639794191, -0.0165891368823411, -0.00718330698348239, -0.00761904761904763, 0, -0.0241610520385245, -0.0357346778758831, -0.0355885231616696, -0.0228300482527235, 0.00270128773830254, -0.0114150241263618, -0.0159156714016638, -0.0112308987609918, 0.00395428035129662, -0.00306297238936141, -0.0035368158670364, 0.00375135972508443, 0.000721949515701533, 0.00204198159290761},
    {-0.0329914439536929, 0.0173880176985766, -0.0100389766989472, 0.0141972569999987, -0.00722888942924841, -0.0615942104163186, -0.0614242950293904, 0.00685792666498186, -0.00395942580610998, 0.00559947367421075, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042213, 0.0266666666666667, 0.0175954367753029, -0.00933138949631688, 0.00538748023761179, -0.00761904761904763, 0, 0, 0.0357346778758831, 0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108943, 0, 0.0040839631858152, 0.00131809345043222, -0.00714693557517663, -0.00471575448938187, 0.00250090648338962, -0.00144389903140308, 0.00204198159290761},
    {0.0439885919382573, -0.0231840235981022, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, -0.0293257279588382, 0.0101587301587302, 0, 0.0101587301587301, -0.0219942959691286, -0.00207364211029265, 0.017958267458706, -0.00761904761904761, 0, 0, 0, -0.0395428035129663, -0.0456600965054471, 0, 0, 0.017684079335182, 0.0142938711503532, 0, -0.00612594477872281, 0, 0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.0439885919382571, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484215, 0.0134387368181058, -0.0113578055999989, -0.0205280095711867, -0.0152380952380952, -0.00983614818084424, -0.0177777777777778, -0.0131965775814772, -0.0145154947720485, -0.0107749604752236, -0.00761904761904761, -0.0547921158065365, -0.0241610520385245, -0.00510495398226901, 0.00395428035129663, 0.00456600965054471, -0.0216103019064202, -0.00456600965054471, 0.00353681586703639, 0.00408396318581521, -0.00395428035129661, 0.0030629723893614, 0.0035368158670364, 0.00250090648338961, 0.00288779806280615, 0.00204198159290761},
    {-0.0329914439536931, 0, 0.0200779533978945, 0.0141972569999987, -0.0867466731509807, 0, 0.00969857289937743, 0, 0.00791885161221998, 0.00559947367421076, 0, 0.0340734167999968, 0, -0.0152380952380953, 0.0295084445425327, 0, -0.0131965775814772, 0, -0.0107749604752236, -0.00761904761904762, 0.0821881737098047, 0, -0.010209907964538, 0, 0.00456600965054471, 0, -0.00913201930108944, 0, 0.00408396318581521, -0.00790856070259326, 0, 0.0035368158670364, 0, 0.00288779806280615, 0.00204198159290761},
    {0.0439885919382573, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754903, -0.0335968420452646, 0.0193971457987549, -0.0274317066599274, 0.01583770322444, 0.0111989473484215, -0.0134387368181058, -0.0113578055999989, 0.0205280095711867, -0.0152380952380952, -0.00983614818084423, 0.0177777777777778, -0.0131965775814772, 0.0145154947720485, -0.0107749604752236, -0.00761904761904761, -0.0547921158065365, 0.0241610520385245, -0.005104953982269, -0.00395428035129662, 0.00456600965054471, 0.0216103019064202, -0.0045660096505447, -0.0035368158670364, 0.00408396318581521, -0.00395428035129662, -0.00306297238936141, 0.00353681586703641, -0.00250090648338962, 0.00288779806280615, 0.00204198159290761},
    {0.0439885919382573, 0.139104141588614, -0.080311813591578, -0.0567890279999947, 0.0578311154339872, 0.0335968420452646, -0.0420271492306356, 0.0274317066599275, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, -0.0586514559176763, 0.0406349206349207, 0.039344592723377, 0.00253968253968254, -0.0109971479845643, -0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, -0.053052238005546, 0.0367556686723369, -0.0105447476034577, -0.0245037791148913, 0.0235787724469093, 0.0175063453837273, 0, -0.0122518895574457},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0, 0.0783926314389509, 0.0096985728993774, -0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, 0.0586514559176763, -0.0609523809523809, 0, 0.033015873015873, 0.0241937255660415, -0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, 0.053052238005546, -0.0551335030085053, 0, -0.0326717054865217, 0.0141472634681456, 0.00875317269186366, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382571, 0, 0, 0.170367083999984, 0, -0.0111989473484216, 0.00969857289937744, 0.0822951199797824, 0.0475131096733199, -0.0167984210226324, 0, 0, 0, 0, 0, 0.0533333333333333, -0.0461880215351701, 0.0435464843161454, 0.0251415744421883, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.057175484601413, -0.0495154221385096, -0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382571, -0.139104141588614, -0.0803118135915779, -0.0567890279999947, 0.0578311154339871, -0.0335968420452646, -0.0420271492306356, -0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, 0.0586514559176763, 0.0406349206349206, 0.0393445927233769, -0.00253968253968253, -0.0109971479845643, 0.0601356211984865, 0.0179582674587059, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, 0.053052238005546, 0.0367556686723369, -0.0105447476034577, 0.0245037791148913, 0.0235787724469093, -0.0175063453837273, 0, -0.0122518895574457},
    {0.0439885919382571, 0, 0.160623627183156, -0.0567890279999946, 0, -0.0783926314389509, 0.00969857289937745, 0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, -0.0586514559176763, -0.0609523809523809, 0, -0.033015873015873, 0.0241937255660415, 0.0145154947720485, -0.0610581093596003, 0.0393650793650793, 0, 0, 0, 0, 0, 0, 0, -0.053052238005546, -0.0551335030085053, 0, 0.0326717054865217, 0.0141472634681456, -0.00875317269186368, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0, 0.0111989473484215, 0.00969857289937745, -0.0822951199797824, 0.0475131096733199, -0.0167984210226323, 0, 0, 0, 0, 0, -0.0533333333333333, -0.0461880215351701, -0.0435464843161453, 0.0251415744421883, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0571754846014129, -0.0495154221385096, 0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754903, 0.0447957893936862, 0.0484928644968872, -0.0548634133198549, 0, -0.0167984210226323, 0.0806324209086351, 0.0227156111999979, -0.0058651455917676, -0.0101587301587302, -0.00327871606028142, 0.0304761904761905, 0.0271262983619253, 0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, 0.0729347689341683, 0.0205470434274512, -0.00530522380055458, -0.00918891716808423, 0.031634242810373, -0.00816792637163039, -0.0141472634681456, -0.00875317269186365, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382571, 0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754904, -0.0447957893936862, 0.0484928644968873, 0.0548634133198549, 0, -0.0167984210226323, -0.0806324209086351, 0.0227156111999979, 0.0058651455917676, -0.0101587301587302, -0.00327871606028142, -0.0304761904761905, 0.0271262983619253, -0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, -0.0729347689341683, 0.0205470434274512, 0.00530522380055459, -0.00918891716808424, 0.031634242810373, 0.00816792637163042, -0.0141472634681456, 0.00875317269186367, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0.0144577788584968, 0, -0.00323285763312585, 0, -0.0950262193466398, -0.0167984210226323, 0, 0, 0, 0, -0.0688530372659096, 0, 0.01539600717839, 0, -0.0502831488843767, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0738132332242036, 0, 0.0165051407128365, 0, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754903, -0.0447957893936862, -0.00969857289937743, 0.0548634133198549, 0.03167540644888, 0.0391963157194754, 0.0806324209086351, 0, 0.0527863103259086, 0.0609523809523809, 0.0229510124219699, 0.0101587301587302, 0.0168622935763319, -0.0124418526617558, -0.00718330698348239, -0.013968253968254, 0, 0.0724831561155734, 0.0357346778758831, -0.0118628410538899, -0.0228300482527235, -0.00810386321490759, 0.0114150241263618, -0.00530522380055459, -0.0112308987609918, -0.00395428035129662, -0.00102099079645379, -0.0035368158670364, 0.00125045324169481, 0.000721949515701537, 0.00204198159290762},
    {0.0439885919382571, 0.139104141588614, -0.080311813591578, -0.0567890279999947, -0.0433733365754904, 0.0447957893936862, -0.00969857289937742, -0.0548634133198549, 0.0316754064488799, 0.0391963157194754, -0.0806324209086351, 0, -0.0527863103259086, 0.060952380952381, 0.0229510124219699, -0.0101587301587302, 0.0168622935763319, 0.0124418526617558, -0.00718330698348236, -0.013968253968254, 0, -0.0724831561155734, 0.0357346778758831, 0.0118628410538899, -0.0228300482527236, 0.00810386321490761, 0.0114150241263618, 0.00530522380055459, -0.0112308987609918, -0.00395428035129662, 0.00102099079645379, -0.0035368158670364, -0.0012504532416948, 0.000721949515701528, 0.0020419815929076},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0.0144577788584968, 0, -0.0614242950293905, 0, -0.0633508128977598, 0.0391963157194754, 0, -0.0681468335999936, 0, -0.0914285714285715, 0.00983614818084423, 0, 0.0285925847598672, 0, 0.0143666139669647, -0.0139682539682539, 0, 0, -0.0714693557517662, 0, 0.0456600965054471, 0, 0.0182640386021788, 0, 0.0040839631858152, -0.00263618690086443, 0, -0.00471575448938186, 0, -0.00144389903140306, 0.00204198159290759},
    {0.351908735506058, 0, 0, 0, -0.115662230867974, 0, -0.129314305325032, 0, 0, -0.134387368181059, 0, -0.0908624447999914, 0, 0.0406349206349206, -0.0786891854467539, 0, -0.0879771838765144, 0, 0, 0.0711111111111111, 0, 0, 0, 0, 0, 0, -0.0821881737098047, 0, 0.0367556686723369, 0.0210894952069153, 0, 0.0235787724469093, 0, 0, -0.0122518895574456}};
    
    // Extract relevant coefficients
    const double coeff0_0 = coefficients0[dof][0];
    const double coeff0_1 = coefficients0[dof][1];
    const double coeff0_2 = coefficients0[dof][2];
    const double coeff0_3 = coefficients0[dof][3];
    const double coeff0_4 = coefficients0[dof][4];
    const double coeff0_5 = coefficients0[dof][5];
    const double coeff0_6 = coefficients0[dof][6];
    const double coeff0_7 = coefficients0[dof][7];
    const double coeff0_8 = coefficients0[dof][8];
    const double coeff0_9 = coefficients0[dof][9];
    const double coeff0_10 = coefficients0[dof][10];
    const double coeff0_11 = coefficients0[dof][11];
    const double coeff0_12 = coefficients0[dof][12];
    const double coeff0_13 = coefficients0[dof][13];
    const double coeff0_14 = coefficients0[dof][14];
    const double coeff0_15 = coefficients0[dof][15];
    const double coeff0_16 = coefficients0[dof][16];
    const double coeff0_17 = coefficients0[dof][17];
    const double coeff0_18 = coefficients0[dof][18];
    const double coeff0_19 = coefficients0[dof][19];
    const double coeff0_20 = coefficients0[dof][20];
    const double coeff0_21 = coefficients0[dof][21];
    const double coeff0_22 = coefficients0[dof][22];
    const double coeff0_23 = coefficients0[dof][23];
    const double coeff0_24 = coefficients0[dof][24];
    const double coeff0_25 = coefficients0[dof][25];
    const double coeff0_26 = coefficients0[dof][26];
    const double coeff0_27 = coefficients0[dof][27];
    const double coeff0_28 = coefficients0[dof][28];
    const double coeff0_29 = coefficients0[dof][29];
    const double coeff0_30 = coefficients0[dof][30];
    const double coeff0_31 = coefficients0[dof][31];
    const double coeff0_32 = coefficients0[dof][32];
    const double coeff0_33 = coefficients0[dof][33];
    const double coeff0_34 = coefficients0[dof][34];
    
    // Compute value(s)
    *values = coeff0_0*basisvalue0 + coeff0_1*basisvalue1 + coeff0_2*basisvalue2 + coeff0_3*basisvalue3 + coeff0_4*basisvalue4 + coeff0_5*basisvalue5 + coeff0_6*basisvalue6 + coeff0_7*basisvalue7 + coeff0_8*basisvalue8 + coeff0_9*basisvalue9 + coeff0_10*basisvalue10 + coeff0_11*basisvalue11 + coeff0_12*basisvalue12 + coeff0_13*basisvalue13 + coeff0_14*basisvalue14 + coeff0_15*basisvalue15 + coeff0_16*basisvalue16 + coeff0_17*basisvalue17 + coeff0_18*basisvalue18 + coeff0_19*basisvalue19 + coeff0_20*basisvalue20 + coeff0_21*basisvalue21 + coeff0_22*basisvalue22 + coeff0_23*basisvalue23 + coeff0_24*basisvalue24 + coeff0_25*basisvalue25 + coeff0_26*basisvalue26 + coeff0_27*basisvalue27 + coeff0_28*basisvalue28 + coeff0_29*basisvalue29 + coeff0_30*basisvalue30 + coeff0_31*basisvalue31 + coeff0_32*basisvalue32 + coeff0_33*basisvalue33 + coeff0_34*basisvalue34;
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis() is not yet implemented.");
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_02 = element_coordinates[3][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
    const double J_12 = element_coordinates[3][1] - element_coordinates[0][1];
    const double J_20 = element_coordinates[1][2] - element_coordinates[0][2];
    const double J_21 = element_coordinates[2][2] - element_coordinates[0][2];
    const double J_22 = element_coordinates[3][2] - element_coordinates[0][2];
      
    // Compute sub determinants
    const double d00 = J_11*J_22 - J_12*J_21;
    const double d01 = J_12*J_20 - J_10*J_22;
    const double d02 = J_10*J_21 - J_11*J_20;
    
    const double d10 = J_02*J_21 - J_01*J_22;
    const double d11 = J_00*J_22 - J_02*J_20;
    const double d12 = J_01*J_20 - J_00*J_21;
    
    const double d20 = J_01*J_12 - J_02*J_11;
    const double d21 = J_02*J_10 - J_00*J_12;
    const double d22 = J_00*J_11 - J_01*J_10;
      
    // Compute determinant of Jacobian
    double detJ = J_00*d00 + J_10*d10 + J_20*d20;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = d00*(element_coordinates[0][0] - element_coordinates[2][0] - element_coordinates[3][0]) \
                    + d10*(element_coordinates[0][1] - element_coordinates[2][1] - element_coordinates[3][1]) \
                    + d20*(element_coordinates[0][2] - element_coordinates[2][2] - element_coordinates[3][2]);
    
    const double C1 = d01*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[3][0]) \
                    + d11*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[3][1]) \
                    + d21*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[3][2]);
    
    const double C2 = d02*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[2][0]) \
                    + d12*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[2][1]) \
                    + d22*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[2][2]);
    
    // Get coordinates and map to the UFC reference element
    double x = (C0 + d00*coordinates[0] + d10*coordinates[1] + d20*coordinates[2]) / detJ;
    double y = (C1 + d01*coordinates[0] + d11*coordinates[1] + d21*coordinates[2]) / detJ;
    double z = (C2 + d02*coordinates[0] + d12*coordinates[1] + d22*coordinates[2]) / detJ;
    
    // Map coordinates to the reference cube
    if (std::abs(y + z - 1.0) < 1e-14)
      x = 1.0;
    else
      x = -2.0 * x/(y + z - 1.0) - 1.0;
    if (std::abs(z - 1.0) < 1e-14)
      y = -1.0;
    else
      y = 2.0 * y/(1.0 - z) - 1.0;
    z = 2.0 * z - 1.0;
    
    // Compute number of derivatives
    unsigned int num_derivatives = 1;
    
    for (unsigned int j = 0; j < n; j++)
      num_derivatives *= 3;
    
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      combinations[j] = new unsigned int [n];
      for (unsigned int k = 0; k < n; k++)
        combinations[j][k] = 0;
    }
        
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] ={{d00 / detJ, d10 / detJ, d20 / detJ}, {d01 / detJ, d11 / detJ, d21 / detJ}, {d02 / detJ, d12 / detJ, d22 / detJ}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values
    for (unsigned int j = 0; j < 1*num_derivatives; j++)
      values[j] = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    const double scalings_y_4 = scalings_y_3*(0.5 - 0.5*y);
    const double scalings_z_0 = 1;
    const double scalings_z_1 = scalings_z_0*(0.5 - 0.5*z);
    const double scalings_z_2 = scalings_z_1*(0.5 - 0.5*z);
    const double scalings_z_3 = scalings_z_2*(0.5 - 0.5*z);
    const double scalings_z_4 = scalings_z_3*(0.5 - 0.5*z);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    const double psitilde_a_4 = 1.75*x*psitilde_a_3 - 0.75*psitilde_a_2;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_0_4 = 0.0285714285714286*psitilde_bs_0_3 + 1.8*y*psitilde_bs_0_3 - 0.771428571428571*psitilde_bs_0_2;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_1_3 = 0.285714285714286*psitilde_bs_1_2 + 2*y*psitilde_bs_1_2 - 0.714285714285714*psitilde_bs_1_1;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_2_2 = 1.02040816326531*psitilde_bs_2_1 + 2.57142857142857*y*psitilde_bs_2_1 - 0.551020408163265*psitilde_bs_2_0;
    const double psitilde_bs_3_0 = 1;
    const double psitilde_bs_3_1 = 4.5*y + 3.5;
    const double psitilde_bs_4_0 = 1;
    
    // Compute psitilde_cs
    const double psitilde_cs_00_0 = 1;
    const double psitilde_cs_00_1 = 2*z + 1;
    const double psitilde_cs_00_2 = 0.3125*psitilde_cs_00_1 + 1.875*z*psitilde_cs_00_1 - 0.5625*psitilde_cs_00_0;
    const double psitilde_cs_00_3 = 0.155555555555556*psitilde_cs_00_2 + 1.86666666666667*z*psitilde_cs_00_2 - 0.711111111111111*psitilde_cs_00_1;
    const double psitilde_cs_00_4 = 0.09375*psitilde_cs_00_3 + 1.875*z*psitilde_cs_00_3 - 0.78125*psitilde_cs_00_2;
    const double psitilde_cs_01_0 = 1;
    const double psitilde_cs_01_1 = 3*z + 2;
    const double psitilde_cs_01_2 = 0.777777777777778*psitilde_cs_01_1 + 2.33333333333333*z*psitilde_cs_01_1 - 0.555555555555556*psitilde_cs_01_0;
    const double psitilde_cs_01_3 = 0.428571428571429*psitilde_cs_01_2 + 2.14285714285714*z*psitilde_cs_01_2 - 0.714285714285714*psitilde_cs_01_1;
    const double psitilde_cs_02_0 = 1;
    const double psitilde_cs_02_1 = 4*z + 3;
    const double psitilde_cs_02_2 = 1.265625*psitilde_cs_02_1 + 2.8125*z*psitilde_cs_02_1 - 0.546875*psitilde_cs_02_0;
    const double psitilde_cs_03_0 = 1;
    const double psitilde_cs_03_1 = 5*z + 4;
    const double psitilde_cs_04_0 = 1;
    const double psitilde_cs_10_0 = 1;
    const double psitilde_cs_10_1 = 3*z + 2;
    const double psitilde_cs_10_2 = 0.777777777777778*psitilde_cs_10_1 + 2.33333333333333*z*psitilde_cs_10_1 - 0.555555555555556*psitilde_cs_10_0;
    const double psitilde_cs_10_3 = 0.428571428571429*psitilde_cs_10_2 + 2.14285714285714*z*psitilde_cs_10_2 - 0.714285714285714*psitilde_cs_10_1;
    const double psitilde_cs_11_0 = 1;
    const double psitilde_cs_11_1 = 4*z + 3;
    const double psitilde_cs_11_2 = 1.265625*psitilde_cs_11_1 + 2.8125*z*psitilde_cs_11_1 - 0.546875*psitilde_cs_11_0;
    const double psitilde_cs_12_0 = 1;
    const double psitilde_cs_12_1 = 5*z + 4;
    const double psitilde_cs_13_0 = 1;
    const double psitilde_cs_20_0 = 1;
    const double psitilde_cs_20_1 = 4*z + 3;
    const double psitilde_cs_20_2 = 1.265625*psitilde_cs_20_1 + 2.8125*z*psitilde_cs_20_1 - 0.546875*psitilde_cs_20_0;
    const double psitilde_cs_21_0 = 1;
    const double psitilde_cs_21_1 = 5*z + 4;
    const double psitilde_cs_22_0 = 1;
    const double psitilde_cs_30_0 = 1;
    const double psitilde_cs_30_1 = 5*z + 4;
    const double psitilde_cs_31_0 = 1;
    const double psitilde_cs_40_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.866025403784439*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_0;
    const double basisvalue1 = 2.73861278752583*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_0;
    const double basisvalue2 = 1.58113883008419*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_0;
    const double basisvalue3 = 1.11803398874989*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_1;
    const double basisvalue4 = 5.1234753829798*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_0;
    const double basisvalue5 = 3.96862696659689*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_0;
    const double basisvalue6 = 2.29128784747792*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_0;
    const double basisvalue7 = 3.24037034920393*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_1;
    const double basisvalue8 = 1.87082869338697*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_1;
    const double basisvalue9 = 1.3228756555323*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_2;
    const double basisvalue10 = 7.93725393319377*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_0;
    const double basisvalue11 = 6.70820393249937*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_0;
    const double basisvalue12 = 5.19615242270663*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_0;
    const double basisvalue13 = 3*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_0;
    const double basisvalue14 = 5.80947501931113*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_1;
    const double basisvalue15 = 4.5*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_1;
    const double basisvalue16 = 2.59807621135332*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_1;
    const double basisvalue17 = 3.67423461417477*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_2;
    const double basisvalue18 = 2.12132034355964*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_2;
    const double basisvalue19 = 1.5*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_3;
    const double basisvalue20 = 11.1242977306435*psitilde_a_4*scalings_y_4*psitilde_bs_4_0*scalings_z_4*psitilde_cs_40_0;
    const double basisvalue21 = 9.81070843517429*psitilde_a_3*scalings_y_3*psitilde_bs_3_1*scalings_z_4*psitilde_cs_31_0;
    const double basisvalue22 = 8.2915619758885*psitilde_a_2*scalings_y_2*psitilde_bs_2_2*scalings_z_4*psitilde_cs_22_0;
    const double basisvalue23 = 6.42261628933256*psitilde_a_1*scalings_y_1*psitilde_bs_1_3*scalings_z_4*psitilde_cs_13_0;
    const double basisvalue24 = 3.70809924354783*psitilde_a_0*scalings_y_0*psitilde_bs_0_4*scalings_z_4*psitilde_cs_04_0;
    const double basisvalue25 = 8.77496438739212*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_1;
    const double basisvalue26 = 7.41619848709566*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_1;
    const double basisvalue27 = 5.74456264653803*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_1;
    const double basisvalue28 = 3.3166247903554*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_1;
    const double basisvalue29 = 6.42261628933256*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_2;
    const double basisvalue30 = 4.9749371855331*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_2;
    const double basisvalue31 = 2.87228132326901*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_2;
    const double basisvalue32 = 4.06201920231798*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_3;
    const double basisvalue33 = 2.34520787991171*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_3;
    const double basisvalue34 = 1.6583123951777*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_4;
    
    // Table(s) of coefficients
    const static double coefficients0[35][35] = \
    {{-0.0137464349807051, -0.0144900147488139, -0.00836581391578937, -0.00591552374999941, 0, 0, 0, 0, 0, 0, -0.00671936840905293, -0.00567890279999946, -0.00439885919382571, -0.00253968253968254, -0.00491807409042211, -0.00380952380952381, -0.00219942959691287, -0.00311046316543895, -0.0017958267458706, -0.00126984126984128, 0.0136980289516341, 0.0120805260192622, 0.010209907964538, 0.00790856070259325, 0.00456600965054471, 0.0108051509532101, 0.00913201930108942, 0.00707363173407281, 0.00408396318581522, 0.00790856070259324, 0.00612594477872282, 0.0035368158670364, 0.00500181296677924, 0.00288779806280616, 0.00204198159290761},
    {-0.0137464349807054, 0.0144900147488139, -0.00836581391578934, -0.00591552374999945, 0, 0, 0, 0, 0, 0, 0.00671936840905293, -0.00567890279999946, 0.00439885919382572, -0.00253968253968254, -0.00491807409042213, 0.00380952380952382, -0.00219942959691286, 0.00311046316543897, -0.0017958267458706, -0.00126984126984127, 0.0136980289516341, -0.0120805260192622, 0.010209907964538, -0.00790856070259325, 0.00456600965054471, -0.0108051509532101, 0.00913201930108941, -0.0070736317340728, 0.00408396318581521, 0.00790856070259325, -0.00612594477872282, 0.0035368158670364, -0.00500181296677924, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807053, 0, 0.0167316278315787, -0.00591552374999946, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0101587301587302, 0, 0, -0.00659828879073857, 0, 0.00359165349174119, -0.00126984126984127, 0, 0, 0, 0, 0.0228300482527235, 0, 0, 0, -0.0163358527432608, 0, 0, 0.0106104476011092, 0, -0.0057755961256123, 0.00204198159290761},
    {-0.0137464349807054, 0, 0, 0.0177465712499983, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0126984126984127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0306297238936141},
    {0.0439885919382572, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0, 0.0406349206349206, 0, 0, 0.00439885919382572, 0, -0.0143666139669648, 0.00761904761904763, 0, 0, 0, 0, 0, 0, 0, 0, 0.0367556686723369, 0, 0, -0.0424417904044368, 0, 0.0303218796594646, -0.0122518895574456},
    {-0.0329914439536931, 0, -0.0200779533978945, -0.0141972569999986, 0, 0, -0.00969857289937744, 0, 0.0712696645099798, -0.050395263067897, 0, 0, 0, 0, 0, 0, 0.0461880215351701, 0, 0.0107749604752236, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0495154221385096, 0, -0.0606437593189292, 0.0306297238936141},
    {0.0439885919382573, 0, 0.0267706045305259, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0, 0.0359165349174119, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0505364660991076, -0.0408396318581522},
    {0.0439885919382573, 0.0231840235981023, -0.0133853022652629, 0.0189296759999982, 0.0433733365754904, -0.0335968420452647, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, -0.0227156111999979, 0.0175954367753029, -0.0101587301587302, 0.00327871606028141, -0.00253968253968255, 0.0014662863979419, -0.0124418526617558, 0.00718330698348238, 0.00761904761904763, 0, 0, 0, 0, 0, 0.0243115896447228, -0.0205470434274512, 0.0159156714016638, -0.00918891716808423, -0.031634242810373, 0.0245037791148913, -0.0141472634681456, 0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, -0.0173880176985766, 0.0100389766989472, -0.0141972569999986, -0.00722888942924838, 0.00559947367421081, -0.00323285763312582, 0.0617213399848368, -0.03563483225499, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, -0.0266666666666667, 0.01539600717839, 0.00933138949631686, -0.00538748023761177, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, -0.0285877423007065, 0.0165051407128365, -0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, 0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0.0311046316543895, -0.017958267458706, 0.0253968253968255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754903, -0.0335968420452647, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, 0, -0.0117302911835353, 0.0101587301587302, -0.0229510124219699, 0.00761904761904761, -0.00146628639794191, 0.0165891368823411, -0.0071833069834824, -0.00761904761904763, 0, 0.0241610520385245, -0.0357346778758831, 0.0355885231616696, -0.0228300482527235, -0.00270128773830253, -0.0114150241263618, 0.0159156714016638, -0.0112308987609918, 0.00395428035129663, 0.00306297238936141, -0.0035368158670364, -0.00375135972508443, 0.00072194951570154, 0.00204198159290761},
    {-0.0329914439536929, -0.0173880176985768, -0.0100389766989472, 0.0141972569999986, -0.00722888942924839, 0.0615942104163185, -0.0614242950293904, -0.00685792666498187, -0.00395942580611001, 0.00559947367421077, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042213, -0.0266666666666667, 0.0175954367753029, 0.00933138949631688, 0.00538748023761179, -0.00761904761904761, 0, 0, 0.0357346778758831, -0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108943, 0, 0.00408396318581521, 0.00131809345043221, 0.00714693557517662, -0.00471575448938186, -0.00250090648338962, -0.00144389903140307, 0.00204198159290761},
    {0.0439885919382572, 0.0231840235981022, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0.0293257279588382, 0.0101587301587302, 0, -0.0101587301587302, -0.0219942959691286, 0.00207364211029264, 0.017958267458706, -0.00761904761904762, 0, 0, 0, 0.0395428035129662, -0.0456600965054471, 0, 0, -0.017684079335182, 0.0142938711503532, 0, 0.00612594477872282, 0, -0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.043988591938257, -0.0231840235981023, -0.0133853022652629, 0.0189296759999983, 0.0433733365754903, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484216, -0.0268774736362117, -0.0227156111999979, -0.0175954367753029, -0.0101587301587302, 0.00327871606028139, 0.00253968253968253, 0.0014662863979419, 0.0124418526617558, 0.00718330698348236, 0.00761904761904761, 0, 0, 0, 0, 0, -0.0243115896447228, -0.0205470434274512, -0.0159156714016638, -0.00918891716808424, -0.031634242810373, -0.0245037791148913, -0.0141472634681456, -0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, 0.0173880176985768, 0.0100389766989471, -0.0141972569999987, -0.00722888942924838, -0.00559947367421082, -0.00323285763312581, -0.0617213399848367, -0.03563483225499, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, 0.0266666666666667, 0.01539600717839, -0.00933138949631689, -0.00538748023761178, -0.019047619047619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, 0.0285877423007065, 0.0165051407128365, 0.0525190361511819, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382572, -0.0231840235981023, -0.0133853022652629, 0.0189296759999981, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, -0.0311046316543896, -0.017958267458706, 0.0253968253968255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484216, -0.0268774736362117, 0, 0.0117302911835352, 0.0101587301587302, -0.0229510124219699, -0.00761904761904762, -0.00146628639794191, -0.0165891368823411, -0.00718330698348239, -0.00761904761904763, 0, -0.0241610520385245, -0.0357346778758831, -0.0355885231616696, -0.0228300482527235, 0.00270128773830254, -0.0114150241263618, -0.0159156714016638, -0.0112308987609918, 0.00395428035129662, -0.00306297238936141, -0.0035368158670364, 0.00375135972508443, 0.000721949515701533, 0.00204198159290761},
    {-0.0329914439536929, 0.0173880176985766, -0.0100389766989472, 0.0141972569999987, -0.00722888942924841, -0.0615942104163186, -0.0614242950293904, 0.00685792666498186, -0.00395942580610998, 0.00559947367421075, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042213, 0.0266666666666667, 0.0175954367753029, -0.00933138949631688, 0.00538748023761179, -0.00761904761904763, 0, 0, 0.0357346778758831, 0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108943, 0, 0.0040839631858152, 0.00131809345043222, -0.00714693557517663, -0.00471575448938187, 0.00250090648338962, -0.00144389903140308, 0.00204198159290761},
    {0.0439885919382573, -0.0231840235981022, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, -0.0293257279588382, 0.0101587301587302, 0, 0.0101587301587301, -0.0219942959691286, -0.00207364211029265, 0.017958267458706, -0.00761904761904761, 0, 0, 0, -0.0395428035129663, -0.0456600965054471, 0, 0, 0.017684079335182, 0.0142938711503532, 0, -0.00612594477872281, 0, 0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.0439885919382571, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484215, 0.0134387368181058, -0.0113578055999989, -0.0205280095711867, -0.0152380952380952, -0.00983614818084424, -0.0177777777777778, -0.0131965775814772, -0.0145154947720485, -0.0107749604752236, -0.00761904761904761, -0.0547921158065365, -0.0241610520385245, -0.00510495398226901, 0.00395428035129663, 0.00456600965054471, -0.0216103019064202, -0.00456600965054471, 0.00353681586703639, 0.00408396318581521, -0.00395428035129661, 0.0030629723893614, 0.0035368158670364, 0.00250090648338961, 0.00288779806280615, 0.00204198159290761},
    {-0.0329914439536931, 0, 0.0200779533978945, 0.0141972569999987, -0.0867466731509807, 0, 0.00969857289937743, 0, 0.00791885161221998, 0.00559947367421076, 0, 0.0340734167999968, 0, -0.0152380952380953, 0.0295084445425327, 0, -0.0131965775814772, 0, -0.0107749604752236, -0.00761904761904762, 0.0821881737098047, 0, -0.010209907964538, 0, 0.00456600965054471, 0, -0.00913201930108944, 0, 0.00408396318581521, -0.00790856070259326, 0, 0.0035368158670364, 0, 0.00288779806280615, 0.00204198159290761},
    {0.0439885919382573, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754903, -0.0335968420452646, 0.0193971457987549, -0.0274317066599274, 0.01583770322444, 0.0111989473484215, -0.0134387368181058, -0.0113578055999989, 0.0205280095711867, -0.0152380952380952, -0.00983614818084423, 0.0177777777777778, -0.0131965775814772, 0.0145154947720485, -0.0107749604752236, -0.00761904761904761, -0.0547921158065365, 0.0241610520385245, -0.005104953982269, -0.00395428035129662, 0.00456600965054471, 0.0216103019064202, -0.0045660096505447, -0.0035368158670364, 0.00408396318581521, -0.00395428035129662, -0.00306297238936141, 0.00353681586703641, -0.00250090648338962, 0.00288779806280615, 0.00204198159290761},
    {0.0439885919382573, 0.139104141588614, -0.080311813591578, -0.0567890279999947, 0.0578311154339872, 0.0335968420452646, -0.0420271492306356, 0.0274317066599275, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, -0.0586514559176763, 0.0406349206349207, 0.039344592723377, 0.00253968253968254, -0.0109971479845643, -0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, -0.053052238005546, 0.0367556686723369, -0.0105447476034577, -0.0245037791148913, 0.0235787724469093, 0.0175063453837273, 0, -0.0122518895574457},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0, 0.0783926314389509, 0.0096985728993774, -0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, 0.0586514559176763, -0.0609523809523809, 0, 0.033015873015873, 0.0241937255660415, -0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, 0.053052238005546, -0.0551335030085053, 0, -0.0326717054865217, 0.0141472634681456, 0.00875317269186366, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382571, 0, 0, 0.170367083999984, 0, -0.0111989473484216, 0.00969857289937744, 0.0822951199797824, 0.0475131096733199, -0.0167984210226324, 0, 0, 0, 0, 0, 0.0533333333333333, -0.0461880215351701, 0.0435464843161454, 0.0251415744421883, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.057175484601413, -0.0495154221385096, -0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382571, -0.139104141588614, -0.0803118135915779, -0.0567890279999947, 0.0578311154339871, -0.0335968420452646, -0.0420271492306356, -0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, 0.0586514559176763, 0.0406349206349206, 0.0393445927233769, -0.00253968253968253, -0.0109971479845643, 0.0601356211984865, 0.0179582674587059, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, 0.053052238005546, 0.0367556686723369, -0.0105447476034577, 0.0245037791148913, 0.0235787724469093, -0.0175063453837273, 0, -0.0122518895574457},
    {0.0439885919382571, 0, 0.160623627183156, -0.0567890279999946, 0, -0.0783926314389509, 0.00969857289937745, 0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, -0.0586514559176763, -0.0609523809523809, 0, -0.033015873015873, 0.0241937255660415, 0.0145154947720485, -0.0610581093596003, 0.0393650793650793, 0, 0, 0, 0, 0, 0, 0, -0.053052238005546, -0.0551335030085053, 0, 0.0326717054865217, 0.0141472634681456, -0.00875317269186368, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0, 0.0111989473484215, 0.00969857289937745, -0.0822951199797824, 0.0475131096733199, -0.0167984210226323, 0, 0, 0, 0, 0, -0.0533333333333333, -0.0461880215351701, -0.0435464843161453, 0.0251415744421883, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0571754846014129, -0.0495154221385096, 0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754903, 0.0447957893936862, 0.0484928644968872, -0.0548634133198549, 0, -0.0167984210226323, 0.0806324209086351, 0.0227156111999979, -0.0058651455917676, -0.0101587301587302, -0.00327871606028142, 0.0304761904761905, 0.0271262983619253, 0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, 0.0729347689341683, 0.0205470434274512, -0.00530522380055458, -0.00918891716808423, 0.031634242810373, -0.00816792637163039, -0.0141472634681456, -0.00875317269186365, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382571, 0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754904, -0.0447957893936862, 0.0484928644968873, 0.0548634133198549, 0, -0.0167984210226323, -0.0806324209086351, 0.0227156111999979, 0.0058651455917676, -0.0101587301587302, -0.00327871606028142, -0.0304761904761905, 0.0271262983619253, -0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, -0.0729347689341683, 0.0205470434274512, 0.00530522380055459, -0.00918891716808424, 0.031634242810373, 0.00816792637163042, -0.0141472634681456, 0.00875317269186367, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0.0144577788584968, 0, -0.00323285763312585, 0, -0.0950262193466398, -0.0167984210226323, 0, 0, 0, 0, -0.0688530372659096, 0, 0.01539600717839, 0, -0.0502831488843767, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0738132332242036, 0, 0.0165051407128365, 0, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754903, -0.0447957893936862, -0.00969857289937743, 0.0548634133198549, 0.03167540644888, 0.0391963157194754, 0.0806324209086351, 0, 0.0527863103259086, 0.0609523809523809, 0.0229510124219699, 0.0101587301587302, 0.0168622935763319, -0.0124418526617558, -0.00718330698348239, -0.013968253968254, 0, 0.0724831561155734, 0.0357346778758831, -0.0118628410538899, -0.0228300482527235, -0.00810386321490759, 0.0114150241263618, -0.00530522380055459, -0.0112308987609918, -0.00395428035129662, -0.00102099079645379, -0.0035368158670364, 0.00125045324169481, 0.000721949515701537, 0.00204198159290762},
    {0.0439885919382571, 0.139104141588614, -0.080311813591578, -0.0567890279999947, -0.0433733365754904, 0.0447957893936862, -0.00969857289937742, -0.0548634133198549, 0.0316754064488799, 0.0391963157194754, -0.0806324209086351, 0, -0.0527863103259086, 0.060952380952381, 0.0229510124219699, -0.0101587301587302, 0.0168622935763319, 0.0124418526617558, -0.00718330698348236, -0.013968253968254, 0, -0.0724831561155734, 0.0357346778758831, 0.0118628410538899, -0.0228300482527236, 0.00810386321490761, 0.0114150241263618, 0.00530522380055459, -0.0112308987609918, -0.00395428035129662, 0.00102099079645379, -0.0035368158670364, -0.0012504532416948, 0.000721949515701528, 0.0020419815929076},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0.0144577788584968, 0, -0.0614242950293905, 0, -0.0633508128977598, 0.0391963157194754, 0, -0.0681468335999936, 0, -0.0914285714285715, 0.00983614818084423, 0, 0.0285925847598672, 0, 0.0143666139669647, -0.0139682539682539, 0, 0, -0.0714693557517662, 0, 0.0456600965054471, 0, 0.0182640386021788, 0, 0.0040839631858152, -0.00263618690086443, 0, -0.00471575448938186, 0, -0.00144389903140306, 0.00204198159290759},
    {0.351908735506058, 0, 0, 0, -0.115662230867974, 0, -0.129314305325032, 0, 0, -0.134387368181059, 0, -0.0908624447999914, 0, 0.0406349206349206, -0.0786891854467539, 0, -0.0879771838765144, 0, 0, 0.0711111111111111, 0, 0, 0, 0, 0, 0, -0.0821881737098047, 0, 0.0367556686723369, 0.0210894952069153, 0, 0.0235787724469093, 0, 0, -0.0122518895574456}};
    
    // Interesting (new) part
    // Tables of derivatives of the polynomial base (transpose)
    const static double dmats0[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {6.32455532033677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 11.2249721603218, 0, 0, 0, 1.70793006049707e-14, 0, 0, 1.16063842564573e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.58257569495585, 0, 8.36660026534076, -1.18321595661992, 0, 0, 1.04642314135461e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.74165738677394, 0, 0, 8.69482604771366, 0, 0, 0, -1.66625972279159e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.49909083394701, 0, -3.34664010613631, -2.36643191323985, 15.4919333848297, 0, 0.692820323027549, 0, 0.56568542494924, 0.400000000000009, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 4.89897948556635, 0, 0, 0, 14.1985914794391, 0, -0.828078671210828, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.60000000000001, 0, 8.76356092008266, -1.54919333848296, 0, 0, 9.52470471983254, 0, -1.48131215963609, 0.261861468283193, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 4.24264068711929, 0, 0, 0, 0, 0, 14.3427433120127, 2.84156378982381e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.11769145362398, 0, 3.16227766016838, 4.91934955049954, 0, 0, 0, -1.2538531175753e-14, 10.690449676497, -2.41897262725905, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.54558441227157, 0, 0, 7.66811580507232, 0, 0, 0, 0, 0, 10.3691851174526, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 11.6057691494799, 0, 0, 0, -4.20458932936041, 0, -3.43303281162798, 0, 0, 19.6214168703486, 0, 0.611677741841197, 0, 0, 0.529728463363978, 0, 0.432521479156785, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.53137212479103, 0, 3.54562104171167, -2.50713268211203, 4.78713553878169, 0, -5.56626745075493, 0, -1.04880884817015, 0.741619848709563, 0, 18.8034951158403, 0, 1.68183573174416, -0.603122387046455, 0, 0.701283781217662, 0, 0.132137494528683, -0.0934353184302337, 0, 0, 0, 0, -2.04851899834062e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.12802291379194e-14, 2.59512887494071, 0, 0, 0, 10.0285307284481, 1.48509074345102e-14, -0.767649473578742, 0, 0, 0, 0, 16.4130361329658, 0, 0, -1.26347611061158, 0, 0.0967147429123335, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.96647939483827, 0, 8.12403840463597, -1.64130361329658, 0, 0, 11.7728501222091, 0, -2.40312296813959, 0.485504156227609, 0, 0, 0, 10.2761860629321, 0, 0, -1.48323969741914, 0, 0.30276503540975, -0.0611677741841184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.05298244095217, 0, -1.58564993434419, 4.4848952846511, 4.28174419288837, 0, 0.191485421551264, 0, -3.75233260785875, -4.31161222746203, 0, 0, 0, 0, 18.8807171866294, 0, 0.844371341865038, 0, 1.18187368057056, 1.04463861754668, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 2.32115382989598, 0, 0, 0, 3.92428337406973, 0, 5.49285249860476, 1.21484853427001e-14, 0, 0, 0, 0, 0, 0, 17.3044631365565, 0, -1.73008591662714, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.65329983228433, 0, 4.15220619990513, 2.93605316083776, 0, 0, 2.63248931621764, 0, 9.82591326180785, -2.8226127713774, 0, 0, 0, 0, 0, 0, 11.6081867662439, 0, -3.09487177319466, 0.683876505540249, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 2.01017818278148, 0, 0, 0, 0, 0, 8.91928088068602, 1.76356325376492e-14, 0, 0, 0, 0, 0, 0, 0, 0, 16.8558564884489, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.29782505861521, 0, 1.49829835452879, 5.50917601898535, 0, 0, 0, 0, 6.64803945320938, 4.13676892548485, 0, 0, 0, 0, 0, 0, 0, 0, 12.5636136423842, -3.55352656109507, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87616630392938, 0, 0, 6.2283092998577, 0, 0, 0, 0, 0, 11.0541524195338, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11.6057691494799, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    const static double dmats1[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.16227766016838, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.47722557505166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.95803989154981, 5.61248608016091, -1.08012344973464, -0.763762615825977, 0, 1.12766252988532e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.29128784747793, 7.24568837309472, 4.18330013267038, -0.591607978309962, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-2.64575131106459, 0, 9.66091783079296, 0.683130051063976, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87082869338697, 0, 0, 4.34741302385683, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.24037034920392, 0, 0, 7.52994023880667, 0, 0, 0, -1.40420976242894e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.74954541697351, 5.79655069847578, -1.67332005306815, -1.18321595661993, 7.74596669241484, -1.2, 0.346410161513776, -0.979795897113278, 0.282842712474625, 0.200000000000005, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.32379000772444, 2.44948974278317, 2.82842712474619, -0.999999999999997, 9.16515138991168, 7.09929573971955, -2.04939015319192, -0.414039335605417, -0.478091443733761, 0.169030850945703, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.80000000000001, -5.69209978830309, 4.38178046004133, -0.77459666924148, 0, 10.998181667894, 4.76235235991628, 0.962140470884725, -0.740656079818049, 0.130930734141596, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.19615242270664, 0, -3.16227766016837, -2.23606797749979, 0, 0, 13.7477270848675, 0, 0.534522483824846, 0.377964473009225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.01246117974981, 2.12132034355964, -0.408248290463859, 3.17542648054293, 0, 0, 0, 7.17137165600634, -1.3801311186847, -1.56144011671765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.55884572681199, 2.73861278752583, 1.5811388300842, 2.45967477524977, 0, 0, 0, 9.2582009977255, 5.3452248382485, -1.20948631362952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-1.79999999999999, 0, 3.65148371670111, -2.84018778721876, 0, 0, 0, 0, 12.3442679969673, 1.39659449751036, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.27279220613578, 0, 0, 3.83405790253616, 0, 0, 0, 0, 0, 5.18459255872629, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.20454076850485, 0, 0, 6.64078308635359, 0, 0, 0, 0, 0, 8.97997772825746, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.56904651573303, 5.80288457473998, -2.01017818278148, -1.42141062443803, 8.14215222512715, -2.10229466468021, 0.728256234341421, -1.71651640581399, 0.594618725379067, 0.420458932936047, 9.81070843517429, -1.18450885369836, 0.3058388709206, -0.105945692672795, -1.02581475831036, 0.264864231681991, -0.0917516612761804, 0.216260739578394, -0.0749149177264392, -0.0529728463363962, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.26568606239552, 3.07059789431495, 1.77281052085584, -1.25356634105601, 2.39356776939085, 6.30376871403133, -2.78313372537746, -0.908295106229249, -0.524404424085077, 0.370809924354783, 11.1242977306435, 9.40174755792013, -2.42752078113806, 0.840917865872083, -0.301561193523227, -0.794200206656967, 0.350641890608831, 0.114434427054266, 0.0660687472643429, -0.0467176592151151, 0, 0, 0, 1.18413955033316e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.91485421551268, 1.29756443747035, 3.74574588632197, -1.05945692672795, -8.09173593712687, 5.01426536422407, 1.80936716113936, -0.383824736789366, -1.1080065755349, 0.313391585264, 0, 12.7134831207354, 8.2065180664829, -2.84282124887606, 1.01946290306866, -0.631738055305791, -0.227958835180081, 0.0483573714561658, 0.139595707137601, -0.0394836284566112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741914, 7.03562363973515, 4.06201920231798, -0.820651806648292, 0, -6.79705818718658, 5.88642506110457, -2.08116553882674, -1.2015614840698, 0.242752078113806, 0, 0, 14.8323969741913, 5.13809303146605, 0, 0.856348838577678, -0.741619848709567, 0.262202212042541, 0.151382517704874, -0.0305838870920586, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-3.42539535431071, 0, 9.38083151964686, 1.89521416591737, 0, 1.48502651407619e-14, -3.39852909359332, 0, -2.77488738510233, -0.560611910581396, 0, 0, 0, 17.7988763690296, 0, 0, 0.42817441928884, 0, 0.349602949390053, 0.0706304617818605, 0, 0, 0, 0, -1.76908227133537e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.02649122047609, 2.74642624930238, -0.792824967172093, 2.24244764232555, 2.14087209644419, -0.331662479035538, 0.095742710775634, 6.49923072370876, -1.87616630392936, -2.15580611373101, 0, 0, 0, 0, 9.44035859331469, -1.46249406456536, 0.42218567093252, -2.04706526287664, 0.59093684028528, 0.522319308773337, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.71269767715535, 1.16057691494799, 1.34011878852098, 1.89521416591738, 2.53311402559511, 1.96214168703486, -0.566421515598881, 2.74642624930237, 3.17129986868837, -1.82198870938951, 0, 0, 0, 0, 11.1699829238239, 8.65223156827827, -2.49768411251822, -0.865042958313569, -0.998865569685858, 0.441440386136648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.32664991614216, -2.69693703815182, 2.07610309995257, 1.46802658041888, 0, 3.03973683071413, 1.31624465810882, -6.382117875081, 4.91295663090391, -1.4113063856887, 0, 0, 0, 0, 0, 13.4039795085887, 5.80409338312195, 2.01017818278147, -1.54743588659732, 0.341938252770131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.82970843102535, 0, -1.49829835452879, 4.23782770691181, 0, 0, 3.79967103839267, 0, -3.54562104171168, -4.07409060843206, 0, 0, 0, 0, 0, 0, 16.7549743857359, 0, 1.11676565710082, 0.987090711415304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741913, 1.00508909139074, -0.193429485824663, 3.55615782880925, 0, 0, 0, 4.459640440343, -0.858258202906983, 2.67027285925187, 0, 0, 0, 0, 0, 0, 0, 8.42792824422443, -1.62195554683794, -2.29379153190448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.14891252930761, 1.29756443747036, 0.749149177264399, 2.75458800949267, 0, 0, 0, 5.75737105184053, 3.3240197266047, 2.06838446274242, 0, 0, 0, 0, 0, 0, 0, 10.8804085776374, 6.2818068211921, -1.77676328054753, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.02006749648391e-14, 0, 0},
    {-1.32664991614216, 0, 1.73008591662714, -3.18072425757422, 0, 0, 0, 1.15266449376351e-14, 7.67649473578738, -2.38836465270397, 0, 0, 0, 0, 0, 0, 0, 0, 14.5072114368499, 2.05162951662072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.938083151964688, 0, 0, 3.11415464992885, 0, 0, 0, 0, 0, 5.52707620976692, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.80288457473997, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.6248076809272, 0, 0, 5.39387407630363, 0, 0, 0, 0, 0, 9.57317681262152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10.0508909139073, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    const static double dmats2[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.16227766016838, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.82574185835056, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.16397779494323, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.95803989154981, 5.61248608016091, -1.08012344973464, -0.763762615825976, 0, 1.39411605579536e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.29128784747792, 1.44913767461894, 4.18330013267038, -0.591607978309961, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.3228756555323, 0, 3.86436713231718, -0.341565025531985, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87082869338697, 7.09929573971954, 0, 4.34741302385683, 0, 1.2137796469483e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.08012344973464, 0, 7.09929573971954, 2.50998007960223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-3.81881307912987, 0, 0, 8.87411967464942, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.74954541697351, 5.79655069847578, -1.67332005306815, -1.18321595661993, 7.74596669241484, -1.19999999999999, 0.346410161513777, -0.97979589711328, 0.282842712474624, 0.200000000000005, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.32379000772445, 2.44948974278317, 2.82842712474619, -0.999999999999998, 1.30930734141596, 7.09929573971955, -2.04939015319192, -0.414039335605417, -0.478091443733761, 0.169030850945707, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.80000000000001, 0.632455532033672, 4.38178046004133, -0.774596669241482, 0, 3.14233761939829, 4.76235235991627, -0.106904496764972, -0.740656079818045, 0.130930734141597, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.03923048454133, 0, 3.16227766016838, -0.447213595499956, 0, 0, 5.8918830363718, 0, -0.534522483824849, 0.0755928946018436, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.0124611797498, 2.12132034355964, -0.408248290463861, 3.17542648054293, 9.07114735222144, 0, 0, 7.17137165600635, -1.3801311186847, -1.56144011671765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.558845726812, 0.547722557505166, 1.5811388300842, 2.45967477524977, 0, 9.07114735222146, 0, 1.85164019954509, 5.34522483824849, -1.20948631362952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.900000000000005, 0, 1.46059348668045, 1.42009389360939, 0, 0, 9.07114735222146, 0, 4.93770719878694, -0.698297248755174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.27279220613578, -6.26099033699941, 0, 3.83405790253616, 0, -1.33471233241901e-14, 0, 10.5830052442584, 1.61529151756054e-14, 5.18459255872629, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.734846922834955, 0, -6.26099033699941, 2.21359436211787, 0, 0, 0, 0, 10.5830052442584, 2.99332590941916, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.7157676649773, 0, 0, -4.69574275274955, 0, 0, 0, 0, 0, 12.69960629311, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.56904651573303, 5.80288457473998, -2.01017818278148, -1.42141062443803, 8.14215222512715, -2.10229466468021, 0.72825623434142, -1.71651640581399, 0.594618725379067, 0.420458932936046, 9.81070843517429, -1.18450885369836, 0.305838870920599, -0.105945692672794, -1.02581475831036, 0.264864231681991, -0.0917516612761805, 0.216260739578394, -0.0749149177264392, -0.052972846336396, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.26568606239552, 3.07059789431495, 1.77281052085584, -1.25356634105602, 2.39356776939084, 6.30376871403133, -2.78313372537746, -0.908295106229248, -0.524404424085073, 0.370809924354783, 1.23603308118261, 9.40174755792013, -2.42752078113806, 0.840917865872083, -0.301561193523226, -0.794200206656968, 0.350641890608831, 0.114434427054266, 0.0660687472643423, -0.0467176592151165, 0, 0, 0, 1.09746923696279e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.91485421551268, 1.29756443747035, 3.74574588632197, -1.05945692672795, 0.404586796856347, 5.01426536422407, 1.80936716113937, -0.383824736789372, -1.1080065755349, 0.313391585264004, 0, 2.82521847127454, 8.2065180664829, -2.84282124887606, -0.0509731451534344, -0.631738055305788, -0.227958835180082, 0.0483573714561684, 0.139595707137601, -0.039483628456609, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741914, 0.335029697130247, 4.06201920231798, -0.820651806648289, 0, 1.69926454679664, 5.88642506110457, -0.099103120896514, -1.2015614840698, 0.242752078113805, 0, 0, 4.94413232473044, 5.13809303146605, 0, -0.214087209644418, -0.741619848709568, 0.0124858196210747, 0.151382517704876, -0.0305838870920584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.856348838577678, 0, 2.68023757704196, -0.473803541479345, 0, 0, 5.09779364038992, 0, -0.792824967172097, 0.140152977645345, 0, 0, 0, 7.91061171956871, 0, 0, -0.642261628933257, 0, 0.0998865569685871, -0.0176576154454654, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.02649122047609, 2.74642624930238, -0.792824967172095, 2.24244764232555, 2.14087209644419, -0.331662479035546, 0.0957427107756332, 6.49923072370876, -1.87616630392937, -2.15580611373101, 11.0554159678513, 0, 0, 0, 9.44035859331468, -1.46249406456535, 0.42218567093252, -2.04706526287664, 0.59093684028528, 0.522319308773341, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.71269767715534, 1.16057691494799, 1.34011878852098, 1.89521416591737, 0.36187343222787, 1.96214168703486, -0.566421515598891, 2.74642624930238, 3.17129986868838, -1.82198870938951, 0, 11.0554159678513, 0, 0, 1.59571184626056, 8.65223156827827, -2.49768411251822, -0.865042958313572, -0.998865569685858, 0.441440386136647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.32664991614217, 0.299659670905757, 2.07610309995256, 1.46802658041888, 0, 0.868496237346881, 1.31624465810882, 0.709124208342336, 4.91295663090392, -1.4113063856887, 0, 0, 11.0554159678513, 0, 0, 3.82970843102535, 5.80409338312195, -0.223353131420161, -1.54743588659733, 0.341938252770126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.765941686205071, 0, 1.49829835452879, 0.847565541382364, 0, 0, 1.62843044502542, 0, 3.54562104171167, -0.814818121686411, 0, 0, 0, 11.0554159678513, 0, 0, 7.18070330817254, 0, -1.11676565710082, 0.197418142283063, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741914, 1.00508909139074, -0.193429485824663, 3.55615782880926, -8.46157280212812, 0, 0, 4.45964044034301, -0.858258202906987, 2.67027285925186, 0, 0, 0, 0, 12.4373429638327, 0, 0, 8.42792824422443, -1.62195554683794, -2.29379153190448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.1489125293076, 0.259512887494073, 0.749149177264395, 2.75458800949267, 0, -8.46157280212812, 0, 1.15147421036811, 3.32401972660469, 2.06838446274243, 0, 0, 0, 0, 0, 12.4373429638327, 0, 2.17608171552749, 6.2818068211921, -1.77676328054754, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.663324958071074, 0, 0.692034366650849, 1.59036212878711, 0, 0, -8.46157280212813, 0, 3.07059789431495, 1.19418232635198, 0, 0, 0, 0, 0, 0, 12.4373429638327, 0, 5.80288457473997, -1.02581475831036, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.938083151964688, 7.62808987244126, 0, 3.11415464992885, 0, 0, 0, -7.5213980463361, 0, 5.52707620976691, 0, 0, 0, 0, 0, 0, 0, 14.2141062443803, 0, 5.80288457473998, 0, 0, 0, 0, 0, 1.03455020940032e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.541602560309059, 0, 7.62808987244125, 1.79795802543454, 0, 0, 0, 0, -7.52139804633611, 3.1910589375405, 0, 0, 0, 0, 0, 0, 0, 0, 14.2141062443803, 3.35029697130244, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-5.36159180343549, 0, 0, 8.8994381845148, 0, 0, 0, 0, -1.07784467308941e-14, -5.26497863243527, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16.583123951777, 0, 0, 0, 0, 0, 1.2461107758246e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    // Compute reference derivatives
    // Declare pointer to array of derivatives on FIAT element
    double *derivatives = new double [num_derivatives];
    
    // Declare coefficients
    double coeff0_0 = 0;
    double coeff0_1 = 0;
    double coeff0_2 = 0;
    double coeff0_3 = 0;
    double coeff0_4 = 0;
    double coeff0_5 = 0;
    double coeff0_6 = 0;
    double coeff0_7 = 0;
    double coeff0_8 = 0;
    double coeff0_9 = 0;
    double coeff0_10 = 0;
    double coeff0_11 = 0;
    double coeff0_12 = 0;
    double coeff0_13 = 0;
    double coeff0_14 = 0;
    double coeff0_15 = 0;
    double coeff0_16 = 0;
    double coeff0_17 = 0;
    double coeff0_18 = 0;
    double coeff0_19 = 0;
    double coeff0_20 = 0;
    double coeff0_21 = 0;
    double coeff0_22 = 0;
    double coeff0_23 = 0;
    double coeff0_24 = 0;
    double coeff0_25 = 0;
    double coeff0_26 = 0;
    double coeff0_27 = 0;
    double coeff0_28 = 0;
    double coeff0_29 = 0;
    double coeff0_30 = 0;
    double coeff0_31 = 0;
    double coeff0_32 = 0;
    double coeff0_33 = 0;
    double coeff0_34 = 0;
    
    // Declare new coefficients
    double new_coeff0_0 = 0;
    double new_coeff0_1 = 0;
    double new_coeff0_2 = 0;
    double new_coeff0_3 = 0;
    double new_coeff0_4 = 0;
    double new_coeff0_5 = 0;
    double new_coeff0_6 = 0;
    double new_coeff0_7 = 0;
    double new_coeff0_8 = 0;
    double new_coeff0_9 = 0;
    double new_coeff0_10 = 0;
    double new_coeff0_11 = 0;
    double new_coeff0_12 = 0;
    double new_coeff0_13 = 0;
    double new_coeff0_14 = 0;
    double new_coeff0_15 = 0;
    double new_coeff0_16 = 0;
    double new_coeff0_17 = 0;
    double new_coeff0_18 = 0;
    double new_coeff0_19 = 0;
    double new_coeff0_20 = 0;
    double new_coeff0_21 = 0;
    double new_coeff0_22 = 0;
    double new_coeff0_23 = 0;
    double new_coeff0_24 = 0;
    double new_coeff0_25 = 0;
    double new_coeff0_26 = 0;
    double new_coeff0_27 = 0;
    double new_coeff0_28 = 0;
    double new_coeff0_29 = 0;
    double new_coeff0_30 = 0;
    double new_coeff0_31 = 0;
    double new_coeff0_32 = 0;
    double new_coeff0_33 = 0;
    double new_coeff0_34 = 0;
    
    // Loop possible derivatives
    for (unsigned int deriv_num = 0; deriv_num < num_derivatives; deriv_num++)
    {
      // Get values from coefficients array
      new_coeff0_0 = coefficients0[dof][0];
      new_coeff0_1 = coefficients0[dof][1];
      new_coeff0_2 = coefficients0[dof][2];
      new_coeff0_3 = coefficients0[dof][3];
      new_coeff0_4 = coefficients0[dof][4];
      new_coeff0_5 = coefficients0[dof][5];
      new_coeff0_6 = coefficients0[dof][6];
      new_coeff0_7 = coefficients0[dof][7];
      new_coeff0_8 = coefficients0[dof][8];
      new_coeff0_9 = coefficients0[dof][9];
      new_coeff0_10 = coefficients0[dof][10];
      new_coeff0_11 = coefficients0[dof][11];
      new_coeff0_12 = coefficients0[dof][12];
      new_coeff0_13 = coefficients0[dof][13];
      new_coeff0_14 = coefficients0[dof][14];
      new_coeff0_15 = coefficients0[dof][15];
      new_coeff0_16 = coefficients0[dof][16];
      new_coeff0_17 = coefficients0[dof][17];
      new_coeff0_18 = coefficients0[dof][18];
      new_coeff0_19 = coefficients0[dof][19];
      new_coeff0_20 = coefficients0[dof][20];
      new_coeff0_21 = coefficients0[dof][21];
      new_coeff0_22 = coefficients0[dof][22];
      new_coeff0_23 = coefficients0[dof][23];
      new_coeff0_24 = coefficients0[dof][24];
      new_coeff0_25 = coefficients0[dof][25];
      new_coeff0_26 = coefficients0[dof][26];
      new_coeff0_27 = coefficients0[dof][27];
      new_coeff0_28 = coefficients0[dof][28];
      new_coeff0_29 = coefficients0[dof][29];
      new_coeff0_30 = coefficients0[dof][30];
      new_coeff0_31 = coefficients0[dof][31];
      new_coeff0_32 = coefficients0[dof][32];
      new_coeff0_33 = coefficients0[dof][33];
      new_coeff0_34 = coefficients0[dof][34];
    
      // Loop derivative order
      for (unsigned int j = 0; j < n; j++)
      {
        // Update old coefficients
        coeff0_0 = new_coeff0_0;
        coeff0_1 = new_coeff0_1;
        coeff0_2 = new_coeff0_2;
        coeff0_3 = new_coeff0_3;
        coeff0_4 = new_coeff0_4;
        coeff0_5 = new_coeff0_5;
        coeff0_6 = new_coeff0_6;
        coeff0_7 = new_coeff0_7;
        coeff0_8 = new_coeff0_8;
        coeff0_9 = new_coeff0_9;
        coeff0_10 = new_coeff0_10;
        coeff0_11 = new_coeff0_11;
        coeff0_12 = new_coeff0_12;
        coeff0_13 = new_coeff0_13;
        coeff0_14 = new_coeff0_14;
        coeff0_15 = new_coeff0_15;
        coeff0_16 = new_coeff0_16;
        coeff0_17 = new_coeff0_17;
        coeff0_18 = new_coeff0_18;
        coeff0_19 = new_coeff0_19;
        coeff0_20 = new_coeff0_20;
        coeff0_21 = new_coeff0_21;
        coeff0_22 = new_coeff0_22;
        coeff0_23 = new_coeff0_23;
        coeff0_24 = new_coeff0_24;
        coeff0_25 = new_coeff0_25;
        coeff0_26 = new_coeff0_26;
        coeff0_27 = new_coeff0_27;
        coeff0_28 = new_coeff0_28;
        coeff0_29 = new_coeff0_29;
        coeff0_30 = new_coeff0_30;
        coeff0_31 = new_coeff0_31;
        coeff0_32 = new_coeff0_32;
        coeff0_33 = new_coeff0_33;
        coeff0_34 = new_coeff0_34;
    
        if(combinations[deriv_num][j] == 0)
        {
          new_coeff0_0 = coeff0_0*dmats0[0][0] + coeff0_1*dmats0[1][0] + coeff0_2*dmats0[2][0] + coeff0_3*dmats0[3][0] + coeff0_4*dmats0[4][0] + coeff0_5*dmats0[5][0] + coeff0_6*dmats0[6][0] + coeff0_7*dmats0[7][0] + coeff0_8*dmats0[8][0] + coeff0_9*dmats0[9][0] + coeff0_10*dmats0[10][0] + coeff0_11*dmats0[11][0] + coeff0_12*dmats0[12][0] + coeff0_13*dmats0[13][0] + coeff0_14*dmats0[14][0] + coeff0_15*dmats0[15][0] + coeff0_16*dmats0[16][0] + coeff0_17*dmats0[17][0] + coeff0_18*dmats0[18][0] + coeff0_19*dmats0[19][0] + coeff0_20*dmats0[20][0] + coeff0_21*dmats0[21][0] + coeff0_22*dmats0[22][0] + coeff0_23*dmats0[23][0] + coeff0_24*dmats0[24][0] + coeff0_25*dmats0[25][0] + coeff0_26*dmats0[26][0] + coeff0_27*dmats0[27][0] + coeff0_28*dmats0[28][0] + coeff0_29*dmats0[29][0] + coeff0_30*dmats0[30][0] + coeff0_31*dmats0[31][0] + coeff0_32*dmats0[32][0] + coeff0_33*dmats0[33][0] + coeff0_34*dmats0[34][0];
          new_coeff0_1 = coeff0_0*dmats0[0][1] + coeff0_1*dmats0[1][1] + coeff0_2*dmats0[2][1] + coeff0_3*dmats0[3][1] + coeff0_4*dmats0[4][1] + coeff0_5*dmats0[5][1] + coeff0_6*dmats0[6][1] + coeff0_7*dmats0[7][1] + coeff0_8*dmats0[8][1] + coeff0_9*dmats0[9][1] + coeff0_10*dmats0[10][1] + coeff0_11*dmats0[11][1] + coeff0_12*dmats0[12][1] + coeff0_13*dmats0[13][1] + coeff0_14*dmats0[14][1] + coeff0_15*dmats0[15][1] + coeff0_16*dmats0[16][1] + coeff0_17*dmats0[17][1] + coeff0_18*dmats0[18][1] + coeff0_19*dmats0[19][1] + coeff0_20*dmats0[20][1] + coeff0_21*dmats0[21][1] + coeff0_22*dmats0[22][1] + coeff0_23*dmats0[23][1] + coeff0_24*dmats0[24][1] + coeff0_25*dmats0[25][1] + coeff0_26*dmats0[26][1] + coeff0_27*dmats0[27][1] + coeff0_28*dmats0[28][1] + coeff0_29*dmats0[29][1] + coeff0_30*dmats0[30][1] + coeff0_31*dmats0[31][1] + coeff0_32*dmats0[32][1] + coeff0_33*dmats0[33][1] + coeff0_34*dmats0[34][1];
          new_coeff0_2 = coeff0_0*dmats0[0][2] + coeff0_1*dmats0[1][2] + coeff0_2*dmats0[2][2] + coeff0_3*dmats0[3][2] + coeff0_4*dmats0[4][2] + coeff0_5*dmats0[5][2] + coeff0_6*dmats0[6][2] + coeff0_7*dmats0[7][2] + coeff0_8*dmats0[8][2] + coeff0_9*dmats0[9][2] + coeff0_10*dmats0[10][2] + coeff0_11*dmats0[11][2] + coeff0_12*dmats0[12][2] + coeff0_13*dmats0[13][2] + coeff0_14*dmats0[14][2] + coeff0_15*dmats0[15][2] + coeff0_16*dmats0[16][2] + coeff0_17*dmats0[17][2] + coeff0_18*dmats0[18][2] + coeff0_19*dmats0[19][2] + coeff0_20*dmats0[20][2] + coeff0_21*dmats0[21][2] + coeff0_22*dmats0[22][2] + coeff0_23*dmats0[23][2] + coeff0_24*dmats0[24][2] + coeff0_25*dmats0[25][2] + coeff0_26*dmats0[26][2] + coeff0_27*dmats0[27][2] + coeff0_28*dmats0[28][2] + coeff0_29*dmats0[29][2] + coeff0_30*dmats0[30][2] + coeff0_31*dmats0[31][2] + coeff0_32*dmats0[32][2] + coeff0_33*dmats0[33][2] + coeff0_34*dmats0[34][2];
          new_coeff0_3 = coeff0_0*dmats0[0][3] + coeff0_1*dmats0[1][3] + coeff0_2*dmats0[2][3] + coeff0_3*dmats0[3][3] + coeff0_4*dmats0[4][3] + coeff0_5*dmats0[5][3] + coeff0_6*dmats0[6][3] + coeff0_7*dmats0[7][3] + coeff0_8*dmats0[8][3] + coeff0_9*dmats0[9][3] + coeff0_10*dmats0[10][3] + coeff0_11*dmats0[11][3] + coeff0_12*dmats0[12][3] + coeff0_13*dmats0[13][3] + coeff0_14*dmats0[14][3] + coeff0_15*dmats0[15][3] + coeff0_16*dmats0[16][3] + coeff0_17*dmats0[17][3] + coeff0_18*dmats0[18][3] + coeff0_19*dmats0[19][3] + coeff0_20*dmats0[20][3] + coeff0_21*dmats0[21][3] + coeff0_22*dmats0[22][3] + coeff0_23*dmats0[23][3] + coeff0_24*dmats0[24][3] + coeff0_25*dmats0[25][3] + coeff0_26*dmats0[26][3] + coeff0_27*dmats0[27][3] + coeff0_28*dmats0[28][3] + coeff0_29*dmats0[29][3] + coeff0_30*dmats0[30][3] + coeff0_31*dmats0[31][3] + coeff0_32*dmats0[32][3] + coeff0_33*dmats0[33][3] + coeff0_34*dmats0[34][3];
          new_coeff0_4 = coeff0_0*dmats0[0][4] + coeff0_1*dmats0[1][4] + coeff0_2*dmats0[2][4] + coeff0_3*dmats0[3][4] + coeff0_4*dmats0[4][4] + coeff0_5*dmats0[5][4] + coeff0_6*dmats0[6][4] + coeff0_7*dmats0[7][4] + coeff0_8*dmats0[8][4] + coeff0_9*dmats0[9][4] + coeff0_10*dmats0[10][4] + coeff0_11*dmats0[11][4] + coeff0_12*dmats0[12][4] + coeff0_13*dmats0[13][4] + coeff0_14*dmats0[14][4] + coeff0_15*dmats0[15][4] + coeff0_16*dmats0[16][4] + coeff0_17*dmats0[17][4] + coeff0_18*dmats0[18][4] + coeff0_19*dmats0[19][4] + coeff0_20*dmats0[20][4] + coeff0_21*dmats0[21][4] + coeff0_22*dmats0[22][4] + coeff0_23*dmats0[23][4] + coeff0_24*dmats0[24][4] + coeff0_25*dmats0[25][4] + coeff0_26*dmats0[26][4] + coeff0_27*dmats0[27][4] + coeff0_28*dmats0[28][4] + coeff0_29*dmats0[29][4] + coeff0_30*dmats0[30][4] + coeff0_31*dmats0[31][4] + coeff0_32*dmats0[32][4] + coeff0_33*dmats0[33][4] + coeff0_34*dmats0[34][4];
          new_coeff0_5 = coeff0_0*dmats0[0][5] + coeff0_1*dmats0[1][5] + coeff0_2*dmats0[2][5] + coeff0_3*dmats0[3][5] + coeff0_4*dmats0[4][5] + coeff0_5*dmats0[5][5] + coeff0_6*dmats0[6][5] + coeff0_7*dmats0[7][5] + coeff0_8*dmats0[8][5] + coeff0_9*dmats0[9][5] + coeff0_10*dmats0[10][5] + coeff0_11*dmats0[11][5] + coeff0_12*dmats0[12][5] + coeff0_13*dmats0[13][5] + coeff0_14*dmats0[14][5] + coeff0_15*dmats0[15][5] + coeff0_16*dmats0[16][5] + coeff0_17*dmats0[17][5] + coeff0_18*dmats0[18][5] + coeff0_19*dmats0[19][5] + coeff0_20*dmats0[20][5] + coeff0_21*dmats0[21][5] + coeff0_22*dmats0[22][5] + coeff0_23*dmats0[23][5] + coeff0_24*dmats0[24][5] + coeff0_25*dmats0[25][5] + coeff0_26*dmats0[26][5] + coeff0_27*dmats0[27][5] + coeff0_28*dmats0[28][5] + coeff0_29*dmats0[29][5] + coeff0_30*dmats0[30][5] + coeff0_31*dmats0[31][5] + coeff0_32*dmats0[32][5] + coeff0_33*dmats0[33][5] + coeff0_34*dmats0[34][5];
          new_coeff0_6 = coeff0_0*dmats0[0][6] + coeff0_1*dmats0[1][6] + coeff0_2*dmats0[2][6] + coeff0_3*dmats0[3][6] + coeff0_4*dmats0[4][6] + coeff0_5*dmats0[5][6] + coeff0_6*dmats0[6][6] + coeff0_7*dmats0[7][6] + coeff0_8*dmats0[8][6] + coeff0_9*dmats0[9][6] + coeff0_10*dmats0[10][6] + coeff0_11*dmats0[11][6] + coeff0_12*dmats0[12][6] + coeff0_13*dmats0[13][6] + coeff0_14*dmats0[14][6] + coeff0_15*dmats0[15][6] + coeff0_16*dmats0[16][6] + coeff0_17*dmats0[17][6] + coeff0_18*dmats0[18][6] + coeff0_19*dmats0[19][6] + coeff0_20*dmats0[20][6] + coeff0_21*dmats0[21][6] + coeff0_22*dmats0[22][6] + coeff0_23*dmats0[23][6] + coeff0_24*dmats0[24][6] + coeff0_25*dmats0[25][6] + coeff0_26*dmats0[26][6] + coeff0_27*dmats0[27][6] + coeff0_28*dmats0[28][6] + coeff0_29*dmats0[29][6] + coeff0_30*dmats0[30][6] + coeff0_31*dmats0[31][6] + coeff0_32*dmats0[32][6] + coeff0_33*dmats0[33][6] + coeff0_34*dmats0[34][6];
          new_coeff0_7 = coeff0_0*dmats0[0][7] + coeff0_1*dmats0[1][7] + coeff0_2*dmats0[2][7] + coeff0_3*dmats0[3][7] + coeff0_4*dmats0[4][7] + coeff0_5*dmats0[5][7] + coeff0_6*dmats0[6][7] + coeff0_7*dmats0[7][7] + coeff0_8*dmats0[8][7] + coeff0_9*dmats0[9][7] + coeff0_10*dmats0[10][7] + coeff0_11*dmats0[11][7] + coeff0_12*dmats0[12][7] + coeff0_13*dmats0[13][7] + coeff0_14*dmats0[14][7] + coeff0_15*dmats0[15][7] + coeff0_16*dmats0[16][7] + coeff0_17*dmats0[17][7] + coeff0_18*dmats0[18][7] + coeff0_19*dmats0[19][7] + coeff0_20*dmats0[20][7] + coeff0_21*dmats0[21][7] + coeff0_22*dmats0[22][7] + coeff0_23*dmats0[23][7] + coeff0_24*dmats0[24][7] + coeff0_25*dmats0[25][7] + coeff0_26*dmats0[26][7] + coeff0_27*dmats0[27][7] + coeff0_28*dmats0[28][7] + coeff0_29*dmats0[29][7] + coeff0_30*dmats0[30][7] + coeff0_31*dmats0[31][7] + coeff0_32*dmats0[32][7] + coeff0_33*dmats0[33][7] + coeff0_34*dmats0[34][7];
          new_coeff0_8 = coeff0_0*dmats0[0][8] + coeff0_1*dmats0[1][8] + coeff0_2*dmats0[2][8] + coeff0_3*dmats0[3][8] + coeff0_4*dmats0[4][8] + coeff0_5*dmats0[5][8] + coeff0_6*dmats0[6][8] + coeff0_7*dmats0[7][8] + coeff0_8*dmats0[8][8] + coeff0_9*dmats0[9][8] + coeff0_10*dmats0[10][8] + coeff0_11*dmats0[11][8] + coeff0_12*dmats0[12][8] + coeff0_13*dmats0[13][8] + coeff0_14*dmats0[14][8] + coeff0_15*dmats0[15][8] + coeff0_16*dmats0[16][8] + coeff0_17*dmats0[17][8] + coeff0_18*dmats0[18][8] + coeff0_19*dmats0[19][8] + coeff0_20*dmats0[20][8] + coeff0_21*dmats0[21][8] + coeff0_22*dmats0[22][8] + coeff0_23*dmats0[23][8] + coeff0_24*dmats0[24][8] + coeff0_25*dmats0[25][8] + coeff0_26*dmats0[26][8] + coeff0_27*dmats0[27][8] + coeff0_28*dmats0[28][8] + coeff0_29*dmats0[29][8] + coeff0_30*dmats0[30][8] + coeff0_31*dmats0[31][8] + coeff0_32*dmats0[32][8] + coeff0_33*dmats0[33][8] + coeff0_34*dmats0[34][8];
          new_coeff0_9 = coeff0_0*dmats0[0][9] + coeff0_1*dmats0[1][9] + coeff0_2*dmats0[2][9] + coeff0_3*dmats0[3][9] + coeff0_4*dmats0[4][9] + coeff0_5*dmats0[5][9] + coeff0_6*dmats0[6][9] + coeff0_7*dmats0[7][9] + coeff0_8*dmats0[8][9] + coeff0_9*dmats0[9][9] + coeff0_10*dmats0[10][9] + coeff0_11*dmats0[11][9] + coeff0_12*dmats0[12][9] + coeff0_13*dmats0[13][9] + coeff0_14*dmats0[14][9] + coeff0_15*dmats0[15][9] + coeff0_16*dmats0[16][9] + coeff0_17*dmats0[17][9] + coeff0_18*dmats0[18][9] + coeff0_19*dmats0[19][9] + coeff0_20*dmats0[20][9] + coeff0_21*dmats0[21][9] + coeff0_22*dmats0[22][9] + coeff0_23*dmats0[23][9] + coeff0_24*dmats0[24][9] + coeff0_25*dmats0[25][9] + coeff0_26*dmats0[26][9] + coeff0_27*dmats0[27][9] + coeff0_28*dmats0[28][9] + coeff0_29*dmats0[29][9] + coeff0_30*dmats0[30][9] + coeff0_31*dmats0[31][9] + coeff0_32*dmats0[32][9] + coeff0_33*dmats0[33][9] + coeff0_34*dmats0[34][9];
          new_coeff0_10 = coeff0_0*dmats0[0][10] + coeff0_1*dmats0[1][10] + coeff0_2*dmats0[2][10] + coeff0_3*dmats0[3][10] + coeff0_4*dmats0[4][10] + coeff0_5*dmats0[5][10] + coeff0_6*dmats0[6][10] + coeff0_7*dmats0[7][10] + coeff0_8*dmats0[8][10] + coeff0_9*dmats0[9][10] + coeff0_10*dmats0[10][10] + coeff0_11*dmats0[11][10] + coeff0_12*dmats0[12][10] + coeff0_13*dmats0[13][10] + coeff0_14*dmats0[14][10] + coeff0_15*dmats0[15][10] + coeff0_16*dmats0[16][10] + coeff0_17*dmats0[17][10] + coeff0_18*dmats0[18][10] + coeff0_19*dmats0[19][10] + coeff0_20*dmats0[20][10] + coeff0_21*dmats0[21][10] + coeff0_22*dmats0[22][10] + coeff0_23*dmats0[23][10] + coeff0_24*dmats0[24][10] + coeff0_25*dmats0[25][10] + coeff0_26*dmats0[26][10] + coeff0_27*dmats0[27][10] + coeff0_28*dmats0[28][10] + coeff0_29*dmats0[29][10] + coeff0_30*dmats0[30][10] + coeff0_31*dmats0[31][10] + coeff0_32*dmats0[32][10] + coeff0_33*dmats0[33][10] + coeff0_34*dmats0[34][10];
          new_coeff0_11 = coeff0_0*dmats0[0][11] + coeff0_1*dmats0[1][11] + coeff0_2*dmats0[2][11] + coeff0_3*dmats0[3][11] + coeff0_4*dmats0[4][11] + coeff0_5*dmats0[5][11] + coeff0_6*dmats0[6][11] + coeff0_7*dmats0[7][11] + coeff0_8*dmats0[8][11] + coeff0_9*dmats0[9][11] + coeff0_10*dmats0[10][11] + coeff0_11*dmats0[11][11] + coeff0_12*dmats0[12][11] + coeff0_13*dmats0[13][11] + coeff0_14*dmats0[14][11] + coeff0_15*dmats0[15][11] + coeff0_16*dmats0[16][11] + coeff0_17*dmats0[17][11] + coeff0_18*dmats0[18][11] + coeff0_19*dmats0[19][11] + coeff0_20*dmats0[20][11] + coeff0_21*dmats0[21][11] + coeff0_22*dmats0[22][11] + coeff0_23*dmats0[23][11] + coeff0_24*dmats0[24][11] + coeff0_25*dmats0[25][11] + coeff0_26*dmats0[26][11] + coeff0_27*dmats0[27][11] + coeff0_28*dmats0[28][11] + coeff0_29*dmats0[29][11] + coeff0_30*dmats0[30][11] + coeff0_31*dmats0[31][11] + coeff0_32*dmats0[32][11] + coeff0_33*dmats0[33][11] + coeff0_34*dmats0[34][11];
          new_coeff0_12 = coeff0_0*dmats0[0][12] + coeff0_1*dmats0[1][12] + coeff0_2*dmats0[2][12] + coeff0_3*dmats0[3][12] + coeff0_4*dmats0[4][12] + coeff0_5*dmats0[5][12] + coeff0_6*dmats0[6][12] + coeff0_7*dmats0[7][12] + coeff0_8*dmats0[8][12] + coeff0_9*dmats0[9][12] + coeff0_10*dmats0[10][12] + coeff0_11*dmats0[11][12] + coeff0_12*dmats0[12][12] + coeff0_13*dmats0[13][12] + coeff0_14*dmats0[14][12] + coeff0_15*dmats0[15][12] + coeff0_16*dmats0[16][12] + coeff0_17*dmats0[17][12] + coeff0_18*dmats0[18][12] + coeff0_19*dmats0[19][12] + coeff0_20*dmats0[20][12] + coeff0_21*dmats0[21][12] + coeff0_22*dmats0[22][12] + coeff0_23*dmats0[23][12] + coeff0_24*dmats0[24][12] + coeff0_25*dmats0[25][12] + coeff0_26*dmats0[26][12] + coeff0_27*dmats0[27][12] + coeff0_28*dmats0[28][12] + coeff0_29*dmats0[29][12] + coeff0_30*dmats0[30][12] + coeff0_31*dmats0[31][12] + coeff0_32*dmats0[32][12] + coeff0_33*dmats0[33][12] + coeff0_34*dmats0[34][12];
          new_coeff0_13 = coeff0_0*dmats0[0][13] + coeff0_1*dmats0[1][13] + coeff0_2*dmats0[2][13] + coeff0_3*dmats0[3][13] + coeff0_4*dmats0[4][13] + coeff0_5*dmats0[5][13] + coeff0_6*dmats0[6][13] + coeff0_7*dmats0[7][13] + coeff0_8*dmats0[8][13] + coeff0_9*dmats0[9][13] + coeff0_10*dmats0[10][13] + coeff0_11*dmats0[11][13] + coeff0_12*dmats0[12][13] + coeff0_13*dmats0[13][13] + coeff0_14*dmats0[14][13] + coeff0_15*dmats0[15][13] + coeff0_16*dmats0[16][13] + coeff0_17*dmats0[17][13] + coeff0_18*dmats0[18][13] + coeff0_19*dmats0[19][13] + coeff0_20*dmats0[20][13] + coeff0_21*dmats0[21][13] + coeff0_22*dmats0[22][13] + coeff0_23*dmats0[23][13] + coeff0_24*dmats0[24][13] + coeff0_25*dmats0[25][13] + coeff0_26*dmats0[26][13] + coeff0_27*dmats0[27][13] + coeff0_28*dmats0[28][13] + coeff0_29*dmats0[29][13] + coeff0_30*dmats0[30][13] + coeff0_31*dmats0[31][13] + coeff0_32*dmats0[32][13] + coeff0_33*dmats0[33][13] + coeff0_34*dmats0[34][13];
          new_coeff0_14 = coeff0_0*dmats0[0][14] + coeff0_1*dmats0[1][14] + coeff0_2*dmats0[2][14] + coeff0_3*dmats0[3][14] + coeff0_4*dmats0[4][14] + coeff0_5*dmats0[5][14] + coeff0_6*dmats0[6][14] + coeff0_7*dmats0[7][14] + coeff0_8*dmats0[8][14] + coeff0_9*dmats0[9][14] + coeff0_10*dmats0[10][14] + coeff0_11*dmats0[11][14] + coeff0_12*dmats0[12][14] + coeff0_13*dmats0[13][14] + coeff0_14*dmats0[14][14] + coeff0_15*dmats0[15][14] + coeff0_16*dmats0[16][14] + coeff0_17*dmats0[17][14] + coeff0_18*dmats0[18][14] + coeff0_19*dmats0[19][14] + coeff0_20*dmats0[20][14] + coeff0_21*dmats0[21][14] + coeff0_22*dmats0[22][14] + coeff0_23*dmats0[23][14] + coeff0_24*dmats0[24][14] + coeff0_25*dmats0[25][14] + coeff0_26*dmats0[26][14] + coeff0_27*dmats0[27][14] + coeff0_28*dmats0[28][14] + coeff0_29*dmats0[29][14] + coeff0_30*dmats0[30][14] + coeff0_31*dmats0[31][14] + coeff0_32*dmats0[32][14] + coeff0_33*dmats0[33][14] + coeff0_34*dmats0[34][14];
          new_coeff0_15 = coeff0_0*dmats0[0][15] + coeff0_1*dmats0[1][15] + coeff0_2*dmats0[2][15] + coeff0_3*dmats0[3][15] + coeff0_4*dmats0[4][15] + coeff0_5*dmats0[5][15] + coeff0_6*dmats0[6][15] + coeff0_7*dmats0[7][15] + coeff0_8*dmats0[8][15] + coeff0_9*dmats0[9][15] + coeff0_10*dmats0[10][15] + coeff0_11*dmats0[11][15] + coeff0_12*dmats0[12][15] + coeff0_13*dmats0[13][15] + coeff0_14*dmats0[14][15] + coeff0_15*dmats0[15][15] + coeff0_16*dmats0[16][15] + coeff0_17*dmats0[17][15] + coeff0_18*dmats0[18][15] + coeff0_19*dmats0[19][15] + coeff0_20*dmats0[20][15] + coeff0_21*dmats0[21][15] + coeff0_22*dmats0[22][15] + coeff0_23*dmats0[23][15] + coeff0_24*dmats0[24][15] + coeff0_25*dmats0[25][15] + coeff0_26*dmats0[26][15] + coeff0_27*dmats0[27][15] + coeff0_28*dmats0[28][15] + coeff0_29*dmats0[29][15] + coeff0_30*dmats0[30][15] + coeff0_31*dmats0[31][15] + coeff0_32*dmats0[32][15] + coeff0_33*dmats0[33][15] + coeff0_34*dmats0[34][15];
          new_coeff0_16 = coeff0_0*dmats0[0][16] + coeff0_1*dmats0[1][16] + coeff0_2*dmats0[2][16] + coeff0_3*dmats0[3][16] + coeff0_4*dmats0[4][16] + coeff0_5*dmats0[5][16] + coeff0_6*dmats0[6][16] + coeff0_7*dmats0[7][16] + coeff0_8*dmats0[8][16] + coeff0_9*dmats0[9][16] + coeff0_10*dmats0[10][16] + coeff0_11*dmats0[11][16] + coeff0_12*dmats0[12][16] + coeff0_13*dmats0[13][16] + coeff0_14*dmats0[14][16] + coeff0_15*dmats0[15][16] + coeff0_16*dmats0[16][16] + coeff0_17*dmats0[17][16] + coeff0_18*dmats0[18][16] + coeff0_19*dmats0[19][16] + coeff0_20*dmats0[20][16] + coeff0_21*dmats0[21][16] + coeff0_22*dmats0[22][16] + coeff0_23*dmats0[23][16] + coeff0_24*dmats0[24][16] + coeff0_25*dmats0[25][16] + coeff0_26*dmats0[26][16] + coeff0_27*dmats0[27][16] + coeff0_28*dmats0[28][16] + coeff0_29*dmats0[29][16] + coeff0_30*dmats0[30][16] + coeff0_31*dmats0[31][16] + coeff0_32*dmats0[32][16] + coeff0_33*dmats0[33][16] + coeff0_34*dmats0[34][16];
          new_coeff0_17 = coeff0_0*dmats0[0][17] + coeff0_1*dmats0[1][17] + coeff0_2*dmats0[2][17] + coeff0_3*dmats0[3][17] + coeff0_4*dmats0[4][17] + coeff0_5*dmats0[5][17] + coeff0_6*dmats0[6][17] + coeff0_7*dmats0[7][17] + coeff0_8*dmats0[8][17] + coeff0_9*dmats0[9][17] + coeff0_10*dmats0[10][17] + coeff0_11*dmats0[11][17] + coeff0_12*dmats0[12][17] + coeff0_13*dmats0[13][17] + coeff0_14*dmats0[14][17] + coeff0_15*dmats0[15][17] + coeff0_16*dmats0[16][17] + coeff0_17*dmats0[17][17] + coeff0_18*dmats0[18][17] + coeff0_19*dmats0[19][17] + coeff0_20*dmats0[20][17] + coeff0_21*dmats0[21][17] + coeff0_22*dmats0[22][17] + coeff0_23*dmats0[23][17] + coeff0_24*dmats0[24][17] + coeff0_25*dmats0[25][17] + coeff0_26*dmats0[26][17] + coeff0_27*dmats0[27][17] + coeff0_28*dmats0[28][17] + coeff0_29*dmats0[29][17] + coeff0_30*dmats0[30][17] + coeff0_31*dmats0[31][17] + coeff0_32*dmats0[32][17] + coeff0_33*dmats0[33][17] + coeff0_34*dmats0[34][17];
          new_coeff0_18 = coeff0_0*dmats0[0][18] + coeff0_1*dmats0[1][18] + coeff0_2*dmats0[2][18] + coeff0_3*dmats0[3][18] + coeff0_4*dmats0[4][18] + coeff0_5*dmats0[5][18] + coeff0_6*dmats0[6][18] + coeff0_7*dmats0[7][18] + coeff0_8*dmats0[8][18] + coeff0_9*dmats0[9][18] + coeff0_10*dmats0[10][18] + coeff0_11*dmats0[11][18] + coeff0_12*dmats0[12][18] + coeff0_13*dmats0[13][18] + coeff0_14*dmats0[14][18] + coeff0_15*dmats0[15][18] + coeff0_16*dmats0[16][18] + coeff0_17*dmats0[17][18] + coeff0_18*dmats0[18][18] + coeff0_19*dmats0[19][18] + coeff0_20*dmats0[20][18] + coeff0_21*dmats0[21][18] + coeff0_22*dmats0[22][18] + coeff0_23*dmats0[23][18] + coeff0_24*dmats0[24][18] + coeff0_25*dmats0[25][18] + coeff0_26*dmats0[26][18] + coeff0_27*dmats0[27][18] + coeff0_28*dmats0[28][18] + coeff0_29*dmats0[29][18] + coeff0_30*dmats0[30][18] + coeff0_31*dmats0[31][18] + coeff0_32*dmats0[32][18] + coeff0_33*dmats0[33][18] + coeff0_34*dmats0[34][18];
          new_coeff0_19 = coeff0_0*dmats0[0][19] + coeff0_1*dmats0[1][19] + coeff0_2*dmats0[2][19] + coeff0_3*dmats0[3][19] + coeff0_4*dmats0[4][19] + coeff0_5*dmats0[5][19] + coeff0_6*dmats0[6][19] + coeff0_7*dmats0[7][19] + coeff0_8*dmats0[8][19] + coeff0_9*dmats0[9][19] + coeff0_10*dmats0[10][19] + coeff0_11*dmats0[11][19] + coeff0_12*dmats0[12][19] + coeff0_13*dmats0[13][19] + coeff0_14*dmats0[14][19] + coeff0_15*dmats0[15][19] + coeff0_16*dmats0[16][19] + coeff0_17*dmats0[17][19] + coeff0_18*dmats0[18][19] + coeff0_19*dmats0[19][19] + coeff0_20*dmats0[20][19] + coeff0_21*dmats0[21][19] + coeff0_22*dmats0[22][19] + coeff0_23*dmats0[23][19] + coeff0_24*dmats0[24][19] + coeff0_25*dmats0[25][19] + coeff0_26*dmats0[26][19] + coeff0_27*dmats0[27][19] + coeff0_28*dmats0[28][19] + coeff0_29*dmats0[29][19] + coeff0_30*dmats0[30][19] + coeff0_31*dmats0[31][19] + coeff0_32*dmats0[32][19] + coeff0_33*dmats0[33][19] + coeff0_34*dmats0[34][19];
          new_coeff0_20 = coeff0_0*dmats0[0][20] + coeff0_1*dmats0[1][20] + coeff0_2*dmats0[2][20] + coeff0_3*dmats0[3][20] + coeff0_4*dmats0[4][20] + coeff0_5*dmats0[5][20] + coeff0_6*dmats0[6][20] + coeff0_7*dmats0[7][20] + coeff0_8*dmats0[8][20] + coeff0_9*dmats0[9][20] + coeff0_10*dmats0[10][20] + coeff0_11*dmats0[11][20] + coeff0_12*dmats0[12][20] + coeff0_13*dmats0[13][20] + coeff0_14*dmats0[14][20] + coeff0_15*dmats0[15][20] + coeff0_16*dmats0[16][20] + coeff0_17*dmats0[17][20] + coeff0_18*dmats0[18][20] + coeff0_19*dmats0[19][20] + coeff0_20*dmats0[20][20] + coeff0_21*dmats0[21][20] + coeff0_22*dmats0[22][20] + coeff0_23*dmats0[23][20] + coeff0_24*dmats0[24][20] + coeff0_25*dmats0[25][20] + coeff0_26*dmats0[26][20] + coeff0_27*dmats0[27][20] + coeff0_28*dmats0[28][20] + coeff0_29*dmats0[29][20] + coeff0_30*dmats0[30][20] + coeff0_31*dmats0[31][20] + coeff0_32*dmats0[32][20] + coeff0_33*dmats0[33][20] + coeff0_34*dmats0[34][20];
          new_coeff0_21 = coeff0_0*dmats0[0][21] + coeff0_1*dmats0[1][21] + coeff0_2*dmats0[2][21] + coeff0_3*dmats0[3][21] + coeff0_4*dmats0[4][21] + coeff0_5*dmats0[5][21] + coeff0_6*dmats0[6][21] + coeff0_7*dmats0[7][21] + coeff0_8*dmats0[8][21] + coeff0_9*dmats0[9][21] + coeff0_10*dmats0[10][21] + coeff0_11*dmats0[11][21] + coeff0_12*dmats0[12][21] + coeff0_13*dmats0[13][21] + coeff0_14*dmats0[14][21] + coeff0_15*dmats0[15][21] + coeff0_16*dmats0[16][21] + coeff0_17*dmats0[17][21] + coeff0_18*dmats0[18][21] + coeff0_19*dmats0[19][21] + coeff0_20*dmats0[20][21] + coeff0_21*dmats0[21][21] + coeff0_22*dmats0[22][21] + coeff0_23*dmats0[23][21] + coeff0_24*dmats0[24][21] + coeff0_25*dmats0[25][21] + coeff0_26*dmats0[26][21] + coeff0_27*dmats0[27][21] + coeff0_28*dmats0[28][21] + coeff0_29*dmats0[29][21] + coeff0_30*dmats0[30][21] + coeff0_31*dmats0[31][21] + coeff0_32*dmats0[32][21] + coeff0_33*dmats0[33][21] + coeff0_34*dmats0[34][21];
          new_coeff0_22 = coeff0_0*dmats0[0][22] + coeff0_1*dmats0[1][22] + coeff0_2*dmats0[2][22] + coeff0_3*dmats0[3][22] + coeff0_4*dmats0[4][22] + coeff0_5*dmats0[5][22] + coeff0_6*dmats0[6][22] + coeff0_7*dmats0[7][22] + coeff0_8*dmats0[8][22] + coeff0_9*dmats0[9][22] + coeff0_10*dmats0[10][22] + coeff0_11*dmats0[11][22] + coeff0_12*dmats0[12][22] + coeff0_13*dmats0[13][22] + coeff0_14*dmats0[14][22] + coeff0_15*dmats0[15][22] + coeff0_16*dmats0[16][22] + coeff0_17*dmats0[17][22] + coeff0_18*dmats0[18][22] + coeff0_19*dmats0[19][22] + coeff0_20*dmats0[20][22] + coeff0_21*dmats0[21][22] + coeff0_22*dmats0[22][22] + coeff0_23*dmats0[23][22] + coeff0_24*dmats0[24][22] + coeff0_25*dmats0[25][22] + coeff0_26*dmats0[26][22] + coeff0_27*dmats0[27][22] + coeff0_28*dmats0[28][22] + coeff0_29*dmats0[29][22] + coeff0_30*dmats0[30][22] + coeff0_31*dmats0[31][22] + coeff0_32*dmats0[32][22] + coeff0_33*dmats0[33][22] + coeff0_34*dmats0[34][22];
          new_coeff0_23 = coeff0_0*dmats0[0][23] + coeff0_1*dmats0[1][23] + coeff0_2*dmats0[2][23] + coeff0_3*dmats0[3][23] + coeff0_4*dmats0[4][23] + coeff0_5*dmats0[5][23] + coeff0_6*dmats0[6][23] + coeff0_7*dmats0[7][23] + coeff0_8*dmats0[8][23] + coeff0_9*dmats0[9][23] + coeff0_10*dmats0[10][23] + coeff0_11*dmats0[11][23] + coeff0_12*dmats0[12][23] + coeff0_13*dmats0[13][23] + coeff0_14*dmats0[14][23] + coeff0_15*dmats0[15][23] + coeff0_16*dmats0[16][23] + coeff0_17*dmats0[17][23] + coeff0_18*dmats0[18][23] + coeff0_19*dmats0[19][23] + coeff0_20*dmats0[20][23] + coeff0_21*dmats0[21][23] + coeff0_22*dmats0[22][23] + coeff0_23*dmats0[23][23] + coeff0_24*dmats0[24][23] + coeff0_25*dmats0[25][23] + coeff0_26*dmats0[26][23] + coeff0_27*dmats0[27][23] + coeff0_28*dmats0[28][23] + coeff0_29*dmats0[29][23] + coeff0_30*dmats0[30][23] + coeff0_31*dmats0[31][23] + coeff0_32*dmats0[32][23] + coeff0_33*dmats0[33][23] + coeff0_34*dmats0[34][23];
          new_coeff0_24 = coeff0_0*dmats0[0][24] + coeff0_1*dmats0[1][24] + coeff0_2*dmats0[2][24] + coeff0_3*dmats0[3][24] + coeff0_4*dmats0[4][24] + coeff0_5*dmats0[5][24] + coeff0_6*dmats0[6][24] + coeff0_7*dmats0[7][24] + coeff0_8*dmats0[8][24] + coeff0_9*dmats0[9][24] + coeff0_10*dmats0[10][24] + coeff0_11*dmats0[11][24] + coeff0_12*dmats0[12][24] + coeff0_13*dmats0[13][24] + coeff0_14*dmats0[14][24] + coeff0_15*dmats0[15][24] + coeff0_16*dmats0[16][24] + coeff0_17*dmats0[17][24] + coeff0_18*dmats0[18][24] + coeff0_19*dmats0[19][24] + coeff0_20*dmats0[20][24] + coeff0_21*dmats0[21][24] + coeff0_22*dmats0[22][24] + coeff0_23*dmats0[23][24] + coeff0_24*dmats0[24][24] + coeff0_25*dmats0[25][24] + coeff0_26*dmats0[26][24] + coeff0_27*dmats0[27][24] + coeff0_28*dmats0[28][24] + coeff0_29*dmats0[29][24] + coeff0_30*dmats0[30][24] + coeff0_31*dmats0[31][24] + coeff0_32*dmats0[32][24] + coeff0_33*dmats0[33][24] + coeff0_34*dmats0[34][24];
          new_coeff0_25 = coeff0_0*dmats0[0][25] + coeff0_1*dmats0[1][25] + coeff0_2*dmats0[2][25] + coeff0_3*dmats0[3][25] + coeff0_4*dmats0[4][25] + coeff0_5*dmats0[5][25] + coeff0_6*dmats0[6][25] + coeff0_7*dmats0[7][25] + coeff0_8*dmats0[8][25] + coeff0_9*dmats0[9][25] + coeff0_10*dmats0[10][25] + coeff0_11*dmats0[11][25] + coeff0_12*dmats0[12][25] + coeff0_13*dmats0[13][25] + coeff0_14*dmats0[14][25] + coeff0_15*dmats0[15][25] + coeff0_16*dmats0[16][25] + coeff0_17*dmats0[17][25] + coeff0_18*dmats0[18][25] + coeff0_19*dmats0[19][25] + coeff0_20*dmats0[20][25] + coeff0_21*dmats0[21][25] + coeff0_22*dmats0[22][25] + coeff0_23*dmats0[23][25] + coeff0_24*dmats0[24][25] + coeff0_25*dmats0[25][25] + coeff0_26*dmats0[26][25] + coeff0_27*dmats0[27][25] + coeff0_28*dmats0[28][25] + coeff0_29*dmats0[29][25] + coeff0_30*dmats0[30][25] + coeff0_31*dmats0[31][25] + coeff0_32*dmats0[32][25] + coeff0_33*dmats0[33][25] + coeff0_34*dmats0[34][25];
          new_coeff0_26 = coeff0_0*dmats0[0][26] + coeff0_1*dmats0[1][26] + coeff0_2*dmats0[2][26] + coeff0_3*dmats0[3][26] + coeff0_4*dmats0[4][26] + coeff0_5*dmats0[5][26] + coeff0_6*dmats0[6][26] + coeff0_7*dmats0[7][26] + coeff0_8*dmats0[8][26] + coeff0_9*dmats0[9][26] + coeff0_10*dmats0[10][26] + coeff0_11*dmats0[11][26] + coeff0_12*dmats0[12][26] + coeff0_13*dmats0[13][26] + coeff0_14*dmats0[14][26] + coeff0_15*dmats0[15][26] + coeff0_16*dmats0[16][26] + coeff0_17*dmats0[17][26] + coeff0_18*dmats0[18][26] + coeff0_19*dmats0[19][26] + coeff0_20*dmats0[20][26] + coeff0_21*dmats0[21][26] + coeff0_22*dmats0[22][26] + coeff0_23*dmats0[23][26] + coeff0_24*dmats0[24][26] + coeff0_25*dmats0[25][26] + coeff0_26*dmats0[26][26] + coeff0_27*dmats0[27][26] + coeff0_28*dmats0[28][26] + coeff0_29*dmats0[29][26] + coeff0_30*dmats0[30][26] + coeff0_31*dmats0[31][26] + coeff0_32*dmats0[32][26] + coeff0_33*dmats0[33][26] + coeff0_34*dmats0[34][26];
          new_coeff0_27 = coeff0_0*dmats0[0][27] + coeff0_1*dmats0[1][27] + coeff0_2*dmats0[2][27] + coeff0_3*dmats0[3][27] + coeff0_4*dmats0[4][27] + coeff0_5*dmats0[5][27] + coeff0_6*dmats0[6][27] + coeff0_7*dmats0[7][27] + coeff0_8*dmats0[8][27] + coeff0_9*dmats0[9][27] + coeff0_10*dmats0[10][27] + coeff0_11*dmats0[11][27] + coeff0_12*dmats0[12][27] + coeff0_13*dmats0[13][27] + coeff0_14*dmats0[14][27] + coeff0_15*dmats0[15][27] + coeff0_16*dmats0[16][27] + coeff0_17*dmats0[17][27] + coeff0_18*dmats0[18][27] + coeff0_19*dmats0[19][27] + coeff0_20*dmats0[20][27] + coeff0_21*dmats0[21][27] + coeff0_22*dmats0[22][27] + coeff0_23*dmats0[23][27] + coeff0_24*dmats0[24][27] + coeff0_25*dmats0[25][27] + coeff0_26*dmats0[26][27] + coeff0_27*dmats0[27][27] + coeff0_28*dmats0[28][27] + coeff0_29*dmats0[29][27] + coeff0_30*dmats0[30][27] + coeff0_31*dmats0[31][27] + coeff0_32*dmats0[32][27] + coeff0_33*dmats0[33][27] + coeff0_34*dmats0[34][27];
          new_coeff0_28 = coeff0_0*dmats0[0][28] + coeff0_1*dmats0[1][28] + coeff0_2*dmats0[2][28] + coeff0_3*dmats0[3][28] + coeff0_4*dmats0[4][28] + coeff0_5*dmats0[5][28] + coeff0_6*dmats0[6][28] + coeff0_7*dmats0[7][28] + coeff0_8*dmats0[8][28] + coeff0_9*dmats0[9][28] + coeff0_10*dmats0[10][28] + coeff0_11*dmats0[11][28] + coeff0_12*dmats0[12][28] + coeff0_13*dmats0[13][28] + coeff0_14*dmats0[14][28] + coeff0_15*dmats0[15][28] + coeff0_16*dmats0[16][28] + coeff0_17*dmats0[17][28] + coeff0_18*dmats0[18][28] + coeff0_19*dmats0[19][28] + coeff0_20*dmats0[20][28] + coeff0_21*dmats0[21][28] + coeff0_22*dmats0[22][28] + coeff0_23*dmats0[23][28] + coeff0_24*dmats0[24][28] + coeff0_25*dmats0[25][28] + coeff0_26*dmats0[26][28] + coeff0_27*dmats0[27][28] + coeff0_28*dmats0[28][28] + coeff0_29*dmats0[29][28] + coeff0_30*dmats0[30][28] + coeff0_31*dmats0[31][28] + coeff0_32*dmats0[32][28] + coeff0_33*dmats0[33][28] + coeff0_34*dmats0[34][28];
          new_coeff0_29 = coeff0_0*dmats0[0][29] + coeff0_1*dmats0[1][29] + coeff0_2*dmats0[2][29] + coeff0_3*dmats0[3][29] + coeff0_4*dmats0[4][29] + coeff0_5*dmats0[5][29] + coeff0_6*dmats0[6][29] + coeff0_7*dmats0[7][29] + coeff0_8*dmats0[8][29] + coeff0_9*dmats0[9][29] + coeff0_10*dmats0[10][29] + coeff0_11*dmats0[11][29] + coeff0_12*dmats0[12][29] + coeff0_13*dmats0[13][29] + coeff0_14*dmats0[14][29] + coeff0_15*dmats0[15][29] + coeff0_16*dmats0[16][29] + coeff0_17*dmats0[17][29] + coeff0_18*dmats0[18][29] + coeff0_19*dmats0[19][29] + coeff0_20*dmats0[20][29] + coeff0_21*dmats0[21][29] + coeff0_22*dmats0[22][29] + coeff0_23*dmats0[23][29] + coeff0_24*dmats0[24][29] + coeff0_25*dmats0[25][29] + coeff0_26*dmats0[26][29] + coeff0_27*dmats0[27][29] + coeff0_28*dmats0[28][29] + coeff0_29*dmats0[29][29] + coeff0_30*dmats0[30][29] + coeff0_31*dmats0[31][29] + coeff0_32*dmats0[32][29] + coeff0_33*dmats0[33][29] + coeff0_34*dmats0[34][29];
          new_coeff0_30 = coeff0_0*dmats0[0][30] + coeff0_1*dmats0[1][30] + coeff0_2*dmats0[2][30] + coeff0_3*dmats0[3][30] + coeff0_4*dmats0[4][30] + coeff0_5*dmats0[5][30] + coeff0_6*dmats0[6][30] + coeff0_7*dmats0[7][30] + coeff0_8*dmats0[8][30] + coeff0_9*dmats0[9][30] + coeff0_10*dmats0[10][30] + coeff0_11*dmats0[11][30] + coeff0_12*dmats0[12][30] + coeff0_13*dmats0[13][30] + coeff0_14*dmats0[14][30] + coeff0_15*dmats0[15][30] + coeff0_16*dmats0[16][30] + coeff0_17*dmats0[17][30] + coeff0_18*dmats0[18][30] + coeff0_19*dmats0[19][30] + coeff0_20*dmats0[20][30] + coeff0_21*dmats0[21][30] + coeff0_22*dmats0[22][30] + coeff0_23*dmats0[23][30] + coeff0_24*dmats0[24][30] + coeff0_25*dmats0[25][30] + coeff0_26*dmats0[26][30] + coeff0_27*dmats0[27][30] + coeff0_28*dmats0[28][30] + coeff0_29*dmats0[29][30] + coeff0_30*dmats0[30][30] + coeff0_31*dmats0[31][30] + coeff0_32*dmats0[32][30] + coeff0_33*dmats0[33][30] + coeff0_34*dmats0[34][30];
          new_coeff0_31 = coeff0_0*dmats0[0][31] + coeff0_1*dmats0[1][31] + coeff0_2*dmats0[2][31] + coeff0_3*dmats0[3][31] + coeff0_4*dmats0[4][31] + coeff0_5*dmats0[5][31] + coeff0_6*dmats0[6][31] + coeff0_7*dmats0[7][31] + coeff0_8*dmats0[8][31] + coeff0_9*dmats0[9][31] + coeff0_10*dmats0[10][31] + coeff0_11*dmats0[11][31] + coeff0_12*dmats0[12][31] + coeff0_13*dmats0[13][31] + coeff0_14*dmats0[14][31] + coeff0_15*dmats0[15][31] + coeff0_16*dmats0[16][31] + coeff0_17*dmats0[17][31] + coeff0_18*dmats0[18][31] + coeff0_19*dmats0[19][31] + coeff0_20*dmats0[20][31] + coeff0_21*dmats0[21][31] + coeff0_22*dmats0[22][31] + coeff0_23*dmats0[23][31] + coeff0_24*dmats0[24][31] + coeff0_25*dmats0[25][31] + coeff0_26*dmats0[26][31] + coeff0_27*dmats0[27][31] + coeff0_28*dmats0[28][31] + coeff0_29*dmats0[29][31] + coeff0_30*dmats0[30][31] + coeff0_31*dmats0[31][31] + coeff0_32*dmats0[32][31] + coeff0_33*dmats0[33][31] + coeff0_34*dmats0[34][31];
          new_coeff0_32 = coeff0_0*dmats0[0][32] + coeff0_1*dmats0[1][32] + coeff0_2*dmats0[2][32] + coeff0_3*dmats0[3][32] + coeff0_4*dmats0[4][32] + coeff0_5*dmats0[5][32] + coeff0_6*dmats0[6][32] + coeff0_7*dmats0[7][32] + coeff0_8*dmats0[8][32] + coeff0_9*dmats0[9][32] + coeff0_10*dmats0[10][32] + coeff0_11*dmats0[11][32] + coeff0_12*dmats0[12][32] + coeff0_13*dmats0[13][32] + coeff0_14*dmats0[14][32] + coeff0_15*dmats0[15][32] + coeff0_16*dmats0[16][32] + coeff0_17*dmats0[17][32] + coeff0_18*dmats0[18][32] + coeff0_19*dmats0[19][32] + coeff0_20*dmats0[20][32] + coeff0_21*dmats0[21][32] + coeff0_22*dmats0[22][32] + coeff0_23*dmats0[23][32] + coeff0_24*dmats0[24][32] + coeff0_25*dmats0[25][32] + coeff0_26*dmats0[26][32] + coeff0_27*dmats0[27][32] + coeff0_28*dmats0[28][32] + coeff0_29*dmats0[29][32] + coeff0_30*dmats0[30][32] + coeff0_31*dmats0[31][32] + coeff0_32*dmats0[32][32] + coeff0_33*dmats0[33][32] + coeff0_34*dmats0[34][32];
          new_coeff0_33 = coeff0_0*dmats0[0][33] + coeff0_1*dmats0[1][33] + coeff0_2*dmats0[2][33] + coeff0_3*dmats0[3][33] + coeff0_4*dmats0[4][33] + coeff0_5*dmats0[5][33] + coeff0_6*dmats0[6][33] + coeff0_7*dmats0[7][33] + coeff0_8*dmats0[8][33] + coeff0_9*dmats0[9][33] + coeff0_10*dmats0[10][33] + coeff0_11*dmats0[11][33] + coeff0_12*dmats0[12][33] + coeff0_13*dmats0[13][33] + coeff0_14*dmats0[14][33] + coeff0_15*dmats0[15][33] + coeff0_16*dmats0[16][33] + coeff0_17*dmats0[17][33] + coeff0_18*dmats0[18][33] + coeff0_19*dmats0[19][33] + coeff0_20*dmats0[20][33] + coeff0_21*dmats0[21][33] + coeff0_22*dmats0[22][33] + coeff0_23*dmats0[23][33] + coeff0_24*dmats0[24][33] + coeff0_25*dmats0[25][33] + coeff0_26*dmats0[26][33] + coeff0_27*dmats0[27][33] + coeff0_28*dmats0[28][33] + coeff0_29*dmats0[29][33] + coeff0_30*dmats0[30][33] + coeff0_31*dmats0[31][33] + coeff0_32*dmats0[32][33] + coeff0_33*dmats0[33][33] + coeff0_34*dmats0[34][33];
          new_coeff0_34 = coeff0_0*dmats0[0][34] + coeff0_1*dmats0[1][34] + coeff0_2*dmats0[2][34] + coeff0_3*dmats0[3][34] + coeff0_4*dmats0[4][34] + coeff0_5*dmats0[5][34] + coeff0_6*dmats0[6][34] + coeff0_7*dmats0[7][34] + coeff0_8*dmats0[8][34] + coeff0_9*dmats0[9][34] + coeff0_10*dmats0[10][34] + coeff0_11*dmats0[11][34] + coeff0_12*dmats0[12][34] + coeff0_13*dmats0[13][34] + coeff0_14*dmats0[14][34] + coeff0_15*dmats0[15][34] + coeff0_16*dmats0[16][34] + coeff0_17*dmats0[17][34] + coeff0_18*dmats0[18][34] + coeff0_19*dmats0[19][34] + coeff0_20*dmats0[20][34] + coeff0_21*dmats0[21][34] + coeff0_22*dmats0[22][34] + coeff0_23*dmats0[23][34] + coeff0_24*dmats0[24][34] + coeff0_25*dmats0[25][34] + coeff0_26*dmats0[26][34] + coeff0_27*dmats0[27][34] + coeff0_28*dmats0[28][34] + coeff0_29*dmats0[29][34] + coeff0_30*dmats0[30][34] + coeff0_31*dmats0[31][34] + coeff0_32*dmats0[32][34] + coeff0_33*dmats0[33][34] + coeff0_34*dmats0[34][34];
        }
        if(combinations[deriv_num][j] == 1)
        {
          new_coeff0_0 = coeff0_0*dmats1[0][0] + coeff0_1*dmats1[1][0] + coeff0_2*dmats1[2][0] + coeff0_3*dmats1[3][0] + coeff0_4*dmats1[4][0] + coeff0_5*dmats1[5][0] + coeff0_6*dmats1[6][0] + coeff0_7*dmats1[7][0] + coeff0_8*dmats1[8][0] + coeff0_9*dmats1[9][0] + coeff0_10*dmats1[10][0] + coeff0_11*dmats1[11][0] + coeff0_12*dmats1[12][0] + coeff0_13*dmats1[13][0] + coeff0_14*dmats1[14][0] + coeff0_15*dmats1[15][0] + coeff0_16*dmats1[16][0] + coeff0_17*dmats1[17][0] + coeff0_18*dmats1[18][0] + coeff0_19*dmats1[19][0] + coeff0_20*dmats1[20][0] + coeff0_21*dmats1[21][0] + coeff0_22*dmats1[22][0] + coeff0_23*dmats1[23][0] + coeff0_24*dmats1[24][0] + coeff0_25*dmats1[25][0] + coeff0_26*dmats1[26][0] + coeff0_27*dmats1[27][0] + coeff0_28*dmats1[28][0] + coeff0_29*dmats1[29][0] + coeff0_30*dmats1[30][0] + coeff0_31*dmats1[31][0] + coeff0_32*dmats1[32][0] + coeff0_33*dmats1[33][0] + coeff0_34*dmats1[34][0];
          new_coeff0_1 = coeff0_0*dmats1[0][1] + coeff0_1*dmats1[1][1] + coeff0_2*dmats1[2][1] + coeff0_3*dmats1[3][1] + coeff0_4*dmats1[4][1] + coeff0_5*dmats1[5][1] + coeff0_6*dmats1[6][1] + coeff0_7*dmats1[7][1] + coeff0_8*dmats1[8][1] + coeff0_9*dmats1[9][1] + coeff0_10*dmats1[10][1] + coeff0_11*dmats1[11][1] + coeff0_12*dmats1[12][1] + coeff0_13*dmats1[13][1] + coeff0_14*dmats1[14][1] + coeff0_15*dmats1[15][1] + coeff0_16*dmats1[16][1] + coeff0_17*dmats1[17][1] + coeff0_18*dmats1[18][1] + coeff0_19*dmats1[19][1] + coeff0_20*dmats1[20][1] + coeff0_21*dmats1[21][1] + coeff0_22*dmats1[22][1] + coeff0_23*dmats1[23][1] + coeff0_24*dmats1[24][1] + coeff0_25*dmats1[25][1] + coeff0_26*dmats1[26][1] + coeff0_27*dmats1[27][1] + coeff0_28*dmats1[28][1] + coeff0_29*dmats1[29][1] + coeff0_30*dmats1[30][1] + coeff0_31*dmats1[31][1] + coeff0_32*dmats1[32][1] + coeff0_33*dmats1[33][1] + coeff0_34*dmats1[34][1];
          new_coeff0_2 = coeff0_0*dmats1[0][2] + coeff0_1*dmats1[1][2] + coeff0_2*dmats1[2][2] + coeff0_3*dmats1[3][2] + coeff0_4*dmats1[4][2] + coeff0_5*dmats1[5][2] + coeff0_6*dmats1[6][2] + coeff0_7*dmats1[7][2] + coeff0_8*dmats1[8][2] + coeff0_9*dmats1[9][2] + coeff0_10*dmats1[10][2] + coeff0_11*dmats1[11][2] + coeff0_12*dmats1[12][2] + coeff0_13*dmats1[13][2] + coeff0_14*dmats1[14][2] + coeff0_15*dmats1[15][2] + coeff0_16*dmats1[16][2] + coeff0_17*dmats1[17][2] + coeff0_18*dmats1[18][2] + coeff0_19*dmats1[19][2] + coeff0_20*dmats1[20][2] + coeff0_21*dmats1[21][2] + coeff0_22*dmats1[22][2] + coeff0_23*dmats1[23][2] + coeff0_24*dmats1[24][2] + coeff0_25*dmats1[25][2] + coeff0_26*dmats1[26][2] + coeff0_27*dmats1[27][2] + coeff0_28*dmats1[28][2] + coeff0_29*dmats1[29][2] + coeff0_30*dmats1[30][2] + coeff0_31*dmats1[31][2] + coeff0_32*dmats1[32][2] + coeff0_33*dmats1[33][2] + coeff0_34*dmats1[34][2];
          new_coeff0_3 = coeff0_0*dmats1[0][3] + coeff0_1*dmats1[1][3] + coeff0_2*dmats1[2][3] + coeff0_3*dmats1[3][3] + coeff0_4*dmats1[4][3] + coeff0_5*dmats1[5][3] + coeff0_6*dmats1[6][3] + coeff0_7*dmats1[7][3] + coeff0_8*dmats1[8][3] + coeff0_9*dmats1[9][3] + coeff0_10*dmats1[10][3] + coeff0_11*dmats1[11][3] + coeff0_12*dmats1[12][3] + coeff0_13*dmats1[13][3] + coeff0_14*dmats1[14][3] + coeff0_15*dmats1[15][3] + coeff0_16*dmats1[16][3] + coeff0_17*dmats1[17][3] + coeff0_18*dmats1[18][3] + coeff0_19*dmats1[19][3] + coeff0_20*dmats1[20][3] + coeff0_21*dmats1[21][3] + coeff0_22*dmats1[22][3] + coeff0_23*dmats1[23][3] + coeff0_24*dmats1[24][3] + coeff0_25*dmats1[25][3] + coeff0_26*dmats1[26][3] + coeff0_27*dmats1[27][3] + coeff0_28*dmats1[28][3] + coeff0_29*dmats1[29][3] + coeff0_30*dmats1[30][3] + coeff0_31*dmats1[31][3] + coeff0_32*dmats1[32][3] + coeff0_33*dmats1[33][3] + coeff0_34*dmats1[34][3];
          new_coeff0_4 = coeff0_0*dmats1[0][4] + coeff0_1*dmats1[1][4] + coeff0_2*dmats1[2][4] + coeff0_3*dmats1[3][4] + coeff0_4*dmats1[4][4] + coeff0_5*dmats1[5][4] + coeff0_6*dmats1[6][4] + coeff0_7*dmats1[7][4] + coeff0_8*dmats1[8][4] + coeff0_9*dmats1[9][4] + coeff0_10*dmats1[10][4] + coeff0_11*dmats1[11][4] + coeff0_12*dmats1[12][4] + coeff0_13*dmats1[13][4] + coeff0_14*dmats1[14][4] + coeff0_15*dmats1[15][4] + coeff0_16*dmats1[16][4] + coeff0_17*dmats1[17][4] + coeff0_18*dmats1[18][4] + coeff0_19*dmats1[19][4] + coeff0_20*dmats1[20][4] + coeff0_21*dmats1[21][4] + coeff0_22*dmats1[22][4] + coeff0_23*dmats1[23][4] + coeff0_24*dmats1[24][4] + coeff0_25*dmats1[25][4] + coeff0_26*dmats1[26][4] + coeff0_27*dmats1[27][4] + coeff0_28*dmats1[28][4] + coeff0_29*dmats1[29][4] + coeff0_30*dmats1[30][4] + coeff0_31*dmats1[31][4] + coeff0_32*dmats1[32][4] + coeff0_33*dmats1[33][4] + coeff0_34*dmats1[34][4];
          new_coeff0_5 = coeff0_0*dmats1[0][5] + coeff0_1*dmats1[1][5] + coeff0_2*dmats1[2][5] + coeff0_3*dmats1[3][5] + coeff0_4*dmats1[4][5] + coeff0_5*dmats1[5][5] + coeff0_6*dmats1[6][5] + coeff0_7*dmats1[7][5] + coeff0_8*dmats1[8][5] + coeff0_9*dmats1[9][5] + coeff0_10*dmats1[10][5] + coeff0_11*dmats1[11][5] + coeff0_12*dmats1[12][5] + coeff0_13*dmats1[13][5] + coeff0_14*dmats1[14][5] + coeff0_15*dmats1[15][5] + coeff0_16*dmats1[16][5] + coeff0_17*dmats1[17][5] + coeff0_18*dmats1[18][5] + coeff0_19*dmats1[19][5] + coeff0_20*dmats1[20][5] + coeff0_21*dmats1[21][5] + coeff0_22*dmats1[22][5] + coeff0_23*dmats1[23][5] + coeff0_24*dmats1[24][5] + coeff0_25*dmats1[25][5] + coeff0_26*dmats1[26][5] + coeff0_27*dmats1[27][5] + coeff0_28*dmats1[28][5] + coeff0_29*dmats1[29][5] + coeff0_30*dmats1[30][5] + coeff0_31*dmats1[31][5] + coeff0_32*dmats1[32][5] + coeff0_33*dmats1[33][5] + coeff0_34*dmats1[34][5];
          new_coeff0_6 = coeff0_0*dmats1[0][6] + coeff0_1*dmats1[1][6] + coeff0_2*dmats1[2][6] + coeff0_3*dmats1[3][6] + coeff0_4*dmats1[4][6] + coeff0_5*dmats1[5][6] + coeff0_6*dmats1[6][6] + coeff0_7*dmats1[7][6] + coeff0_8*dmats1[8][6] + coeff0_9*dmats1[9][6] + coeff0_10*dmats1[10][6] + coeff0_11*dmats1[11][6] + coeff0_12*dmats1[12][6] + coeff0_13*dmats1[13][6] + coeff0_14*dmats1[14][6] + coeff0_15*dmats1[15][6] + coeff0_16*dmats1[16][6] + coeff0_17*dmats1[17][6] + coeff0_18*dmats1[18][6] + coeff0_19*dmats1[19][6] + coeff0_20*dmats1[20][6] + coeff0_21*dmats1[21][6] + coeff0_22*dmats1[22][6] + coeff0_23*dmats1[23][6] + coeff0_24*dmats1[24][6] + coeff0_25*dmats1[25][6] + coeff0_26*dmats1[26][6] + coeff0_27*dmats1[27][6] + coeff0_28*dmats1[28][6] + coeff0_29*dmats1[29][6] + coeff0_30*dmats1[30][6] + coeff0_31*dmats1[31][6] + coeff0_32*dmats1[32][6] + coeff0_33*dmats1[33][6] + coeff0_34*dmats1[34][6];
          new_coeff0_7 = coeff0_0*dmats1[0][7] + coeff0_1*dmats1[1][7] + coeff0_2*dmats1[2][7] + coeff0_3*dmats1[3][7] + coeff0_4*dmats1[4][7] + coeff0_5*dmats1[5][7] + coeff0_6*dmats1[6][7] + coeff0_7*dmats1[7][7] + coeff0_8*dmats1[8][7] + coeff0_9*dmats1[9][7] + coeff0_10*dmats1[10][7] + coeff0_11*dmats1[11][7] + coeff0_12*dmats1[12][7] + coeff0_13*dmats1[13][7] + coeff0_14*dmats1[14][7] + coeff0_15*dmats1[15][7] + coeff0_16*dmats1[16][7] + coeff0_17*dmats1[17][7] + coeff0_18*dmats1[18][7] + coeff0_19*dmats1[19][7] + coeff0_20*dmats1[20][7] + coeff0_21*dmats1[21][7] + coeff0_22*dmats1[22][7] + coeff0_23*dmats1[23][7] + coeff0_24*dmats1[24][7] + coeff0_25*dmats1[25][7] + coeff0_26*dmats1[26][7] + coeff0_27*dmats1[27][7] + coeff0_28*dmats1[28][7] + coeff0_29*dmats1[29][7] + coeff0_30*dmats1[30][7] + coeff0_31*dmats1[31][7] + coeff0_32*dmats1[32][7] + coeff0_33*dmats1[33][7] + coeff0_34*dmats1[34][7];
          new_coeff0_8 = coeff0_0*dmats1[0][8] + coeff0_1*dmats1[1][8] + coeff0_2*dmats1[2][8] + coeff0_3*dmats1[3][8] + coeff0_4*dmats1[4][8] + coeff0_5*dmats1[5][8] + coeff0_6*dmats1[6][8] + coeff0_7*dmats1[7][8] + coeff0_8*dmats1[8][8] + coeff0_9*dmats1[9][8] + coeff0_10*dmats1[10][8] + coeff0_11*dmats1[11][8] + coeff0_12*dmats1[12][8] + coeff0_13*dmats1[13][8] + coeff0_14*dmats1[14][8] + coeff0_15*dmats1[15][8] + coeff0_16*dmats1[16][8] + coeff0_17*dmats1[17][8] + coeff0_18*dmats1[18][8] + coeff0_19*dmats1[19][8] + coeff0_20*dmats1[20][8] + coeff0_21*dmats1[21][8] + coeff0_22*dmats1[22][8] + coeff0_23*dmats1[23][8] + coeff0_24*dmats1[24][8] + coeff0_25*dmats1[25][8] + coeff0_26*dmats1[26][8] + coeff0_27*dmats1[27][8] + coeff0_28*dmats1[28][8] + coeff0_29*dmats1[29][8] + coeff0_30*dmats1[30][8] + coeff0_31*dmats1[31][8] + coeff0_32*dmats1[32][8] + coeff0_33*dmats1[33][8] + coeff0_34*dmats1[34][8];
          new_coeff0_9 = coeff0_0*dmats1[0][9] + coeff0_1*dmats1[1][9] + coeff0_2*dmats1[2][9] + coeff0_3*dmats1[3][9] + coeff0_4*dmats1[4][9] + coeff0_5*dmats1[5][9] + coeff0_6*dmats1[6][9] + coeff0_7*dmats1[7][9] + coeff0_8*dmats1[8][9] + coeff0_9*dmats1[9][9] + coeff0_10*dmats1[10][9] + coeff0_11*dmats1[11][9] + coeff0_12*dmats1[12][9] + coeff0_13*dmats1[13][9] + coeff0_14*dmats1[14][9] + coeff0_15*dmats1[15][9] + coeff0_16*dmats1[16][9] + coeff0_17*dmats1[17][9] + coeff0_18*dmats1[18][9] + coeff0_19*dmats1[19][9] + coeff0_20*dmats1[20][9] + coeff0_21*dmats1[21][9] + coeff0_22*dmats1[22][9] + coeff0_23*dmats1[23][9] + coeff0_24*dmats1[24][9] + coeff0_25*dmats1[25][9] + coeff0_26*dmats1[26][9] + coeff0_27*dmats1[27][9] + coeff0_28*dmats1[28][9] + coeff0_29*dmats1[29][9] + coeff0_30*dmats1[30][9] + coeff0_31*dmats1[31][9] + coeff0_32*dmats1[32][9] + coeff0_33*dmats1[33][9] + coeff0_34*dmats1[34][9];
          new_coeff0_10 = coeff0_0*dmats1[0][10] + coeff0_1*dmats1[1][10] + coeff0_2*dmats1[2][10] + coeff0_3*dmats1[3][10] + coeff0_4*dmats1[4][10] + coeff0_5*dmats1[5][10] + coeff0_6*dmats1[6][10] + coeff0_7*dmats1[7][10] + coeff0_8*dmats1[8][10] + coeff0_9*dmats1[9][10] + coeff0_10*dmats1[10][10] + coeff0_11*dmats1[11][10] + coeff0_12*dmats1[12][10] + coeff0_13*dmats1[13][10] + coeff0_14*dmats1[14][10] + coeff0_15*dmats1[15][10] + coeff0_16*dmats1[16][10] + coeff0_17*dmats1[17][10] + coeff0_18*dmats1[18][10] + coeff0_19*dmats1[19][10] + coeff0_20*dmats1[20][10] + coeff0_21*dmats1[21][10] + coeff0_22*dmats1[22][10] + coeff0_23*dmats1[23][10] + coeff0_24*dmats1[24][10] + coeff0_25*dmats1[25][10] + coeff0_26*dmats1[26][10] + coeff0_27*dmats1[27][10] + coeff0_28*dmats1[28][10] + coeff0_29*dmats1[29][10] + coeff0_30*dmats1[30][10] + coeff0_31*dmats1[31][10] + coeff0_32*dmats1[32][10] + coeff0_33*dmats1[33][10] + coeff0_34*dmats1[34][10];
          new_coeff0_11 = coeff0_0*dmats1[0][11] + coeff0_1*dmats1[1][11] + coeff0_2*dmats1[2][11] + coeff0_3*dmats1[3][11] + coeff0_4*dmats1[4][11] + coeff0_5*dmats1[5][11] + coeff0_6*dmats1[6][11] + coeff0_7*dmats1[7][11] + coeff0_8*dmats1[8][11] + coeff0_9*dmats1[9][11] + coeff0_10*dmats1[10][11] + coeff0_11*dmats1[11][11] + coeff0_12*dmats1[12][11] + coeff0_13*dmats1[13][11] + coeff0_14*dmats1[14][11] + coeff0_15*dmats1[15][11] + coeff0_16*dmats1[16][11] + coeff0_17*dmats1[17][11] + coeff0_18*dmats1[18][11] + coeff0_19*dmats1[19][11] + coeff0_20*dmats1[20][11] + coeff0_21*dmats1[21][11] + coeff0_22*dmats1[22][11] + coeff0_23*dmats1[23][11] + coeff0_24*dmats1[24][11] + coeff0_25*dmats1[25][11] + coeff0_26*dmats1[26][11] + coeff0_27*dmats1[27][11] + coeff0_28*dmats1[28][11] + coeff0_29*dmats1[29][11] + coeff0_30*dmats1[30][11] + coeff0_31*dmats1[31][11] + coeff0_32*dmats1[32][11] + coeff0_33*dmats1[33][11] + coeff0_34*dmats1[34][11];
          new_coeff0_12 = coeff0_0*dmats1[0][12] + coeff0_1*dmats1[1][12] + coeff0_2*dmats1[2][12] + coeff0_3*dmats1[3][12] + coeff0_4*dmats1[4][12] + coeff0_5*dmats1[5][12] + coeff0_6*dmats1[6][12] + coeff0_7*dmats1[7][12] + coeff0_8*dmats1[8][12] + coeff0_9*dmats1[9][12] + coeff0_10*dmats1[10][12] + coeff0_11*dmats1[11][12] + coeff0_12*dmats1[12][12] + coeff0_13*dmats1[13][12] + coeff0_14*dmats1[14][12] + coeff0_15*dmats1[15][12] + coeff0_16*dmats1[16][12] + coeff0_17*dmats1[17][12] + coeff0_18*dmats1[18][12] + coeff0_19*dmats1[19][12] + coeff0_20*dmats1[20][12] + coeff0_21*dmats1[21][12] + coeff0_22*dmats1[22][12] + coeff0_23*dmats1[23][12] + coeff0_24*dmats1[24][12] + coeff0_25*dmats1[25][12] + coeff0_26*dmats1[26][12] + coeff0_27*dmats1[27][12] + coeff0_28*dmats1[28][12] + coeff0_29*dmats1[29][12] + coeff0_30*dmats1[30][12] + coeff0_31*dmats1[31][12] + coeff0_32*dmats1[32][12] + coeff0_33*dmats1[33][12] + coeff0_34*dmats1[34][12];
          new_coeff0_13 = coeff0_0*dmats1[0][13] + coeff0_1*dmats1[1][13] + coeff0_2*dmats1[2][13] + coeff0_3*dmats1[3][13] + coeff0_4*dmats1[4][13] + coeff0_5*dmats1[5][13] + coeff0_6*dmats1[6][13] + coeff0_7*dmats1[7][13] + coeff0_8*dmats1[8][13] + coeff0_9*dmats1[9][13] + coeff0_10*dmats1[10][13] + coeff0_11*dmats1[11][13] + coeff0_12*dmats1[12][13] + coeff0_13*dmats1[13][13] + coeff0_14*dmats1[14][13] + coeff0_15*dmats1[15][13] + coeff0_16*dmats1[16][13] + coeff0_17*dmats1[17][13] + coeff0_18*dmats1[18][13] + coeff0_19*dmats1[19][13] + coeff0_20*dmats1[20][13] + coeff0_21*dmats1[21][13] + coeff0_22*dmats1[22][13] + coeff0_23*dmats1[23][13] + coeff0_24*dmats1[24][13] + coeff0_25*dmats1[25][13] + coeff0_26*dmats1[26][13] + coeff0_27*dmats1[27][13] + coeff0_28*dmats1[28][13] + coeff0_29*dmats1[29][13] + coeff0_30*dmats1[30][13] + coeff0_31*dmats1[31][13] + coeff0_32*dmats1[32][13] + coeff0_33*dmats1[33][13] + coeff0_34*dmats1[34][13];
          new_coeff0_14 = coeff0_0*dmats1[0][14] + coeff0_1*dmats1[1][14] + coeff0_2*dmats1[2][14] + coeff0_3*dmats1[3][14] + coeff0_4*dmats1[4][14] + coeff0_5*dmats1[5][14] + coeff0_6*dmats1[6][14] + coeff0_7*dmats1[7][14] + coeff0_8*dmats1[8][14] + coeff0_9*dmats1[9][14] + coeff0_10*dmats1[10][14] + coeff0_11*dmats1[11][14] + coeff0_12*dmats1[12][14] + coeff0_13*dmats1[13][14] + coeff0_14*dmats1[14][14] + coeff0_15*dmats1[15][14] + coeff0_16*dmats1[16][14] + coeff0_17*dmats1[17][14] + coeff0_18*dmats1[18][14] + coeff0_19*dmats1[19][14] + coeff0_20*dmats1[20][14] + coeff0_21*dmats1[21][14] + coeff0_22*dmats1[22][14] + coeff0_23*dmats1[23][14] + coeff0_24*dmats1[24][14] + coeff0_25*dmats1[25][14] + coeff0_26*dmats1[26][14] + coeff0_27*dmats1[27][14] + coeff0_28*dmats1[28][14] + coeff0_29*dmats1[29][14] + coeff0_30*dmats1[30][14] + coeff0_31*dmats1[31][14] + coeff0_32*dmats1[32][14] + coeff0_33*dmats1[33][14] + coeff0_34*dmats1[34][14];
          new_coeff0_15 = coeff0_0*dmats1[0][15] + coeff0_1*dmats1[1][15] + coeff0_2*dmats1[2][15] + coeff0_3*dmats1[3][15] + coeff0_4*dmats1[4][15] + coeff0_5*dmats1[5][15] + coeff0_6*dmats1[6][15] + coeff0_7*dmats1[7][15] + coeff0_8*dmats1[8][15] + coeff0_9*dmats1[9][15] + coeff0_10*dmats1[10][15] + coeff0_11*dmats1[11][15] + coeff0_12*dmats1[12][15] + coeff0_13*dmats1[13][15] + coeff0_14*dmats1[14][15] + coeff0_15*dmats1[15][15] + coeff0_16*dmats1[16][15] + coeff0_17*dmats1[17][15] + coeff0_18*dmats1[18][15] + coeff0_19*dmats1[19][15] + coeff0_20*dmats1[20][15] + coeff0_21*dmats1[21][15] + coeff0_22*dmats1[22][15] + coeff0_23*dmats1[23][15] + coeff0_24*dmats1[24][15] + coeff0_25*dmats1[25][15] + coeff0_26*dmats1[26][15] + coeff0_27*dmats1[27][15] + coeff0_28*dmats1[28][15] + coeff0_29*dmats1[29][15] + coeff0_30*dmats1[30][15] + coeff0_31*dmats1[31][15] + coeff0_32*dmats1[32][15] + coeff0_33*dmats1[33][15] + coeff0_34*dmats1[34][15];
          new_coeff0_16 = coeff0_0*dmats1[0][16] + coeff0_1*dmats1[1][16] + coeff0_2*dmats1[2][16] + coeff0_3*dmats1[3][16] + coeff0_4*dmats1[4][16] + coeff0_5*dmats1[5][16] + coeff0_6*dmats1[6][16] + coeff0_7*dmats1[7][16] + coeff0_8*dmats1[8][16] + coeff0_9*dmats1[9][16] + coeff0_10*dmats1[10][16] + coeff0_11*dmats1[11][16] + coeff0_12*dmats1[12][16] + coeff0_13*dmats1[13][16] + coeff0_14*dmats1[14][16] + coeff0_15*dmats1[15][16] + coeff0_16*dmats1[16][16] + coeff0_17*dmats1[17][16] + coeff0_18*dmats1[18][16] + coeff0_19*dmats1[19][16] + coeff0_20*dmats1[20][16] + coeff0_21*dmats1[21][16] + coeff0_22*dmats1[22][16] + coeff0_23*dmats1[23][16] + coeff0_24*dmats1[24][16] + coeff0_25*dmats1[25][16] + coeff0_26*dmats1[26][16] + coeff0_27*dmats1[27][16] + coeff0_28*dmats1[28][16] + coeff0_29*dmats1[29][16] + coeff0_30*dmats1[30][16] + coeff0_31*dmats1[31][16] + coeff0_32*dmats1[32][16] + coeff0_33*dmats1[33][16] + coeff0_34*dmats1[34][16];
          new_coeff0_17 = coeff0_0*dmats1[0][17] + coeff0_1*dmats1[1][17] + coeff0_2*dmats1[2][17] + coeff0_3*dmats1[3][17] + coeff0_4*dmats1[4][17] + coeff0_5*dmats1[5][17] + coeff0_6*dmats1[6][17] + coeff0_7*dmats1[7][17] + coeff0_8*dmats1[8][17] + coeff0_9*dmats1[9][17] + coeff0_10*dmats1[10][17] + coeff0_11*dmats1[11][17] + coeff0_12*dmats1[12][17] + coeff0_13*dmats1[13][17] + coeff0_14*dmats1[14][17] + coeff0_15*dmats1[15][17] + coeff0_16*dmats1[16][17] + coeff0_17*dmats1[17][17] + coeff0_18*dmats1[18][17] + coeff0_19*dmats1[19][17] + coeff0_20*dmats1[20][17] + coeff0_21*dmats1[21][17] + coeff0_22*dmats1[22][17] + coeff0_23*dmats1[23][17] + coeff0_24*dmats1[24][17] + coeff0_25*dmats1[25][17] + coeff0_26*dmats1[26][17] + coeff0_27*dmats1[27][17] + coeff0_28*dmats1[28][17] + coeff0_29*dmats1[29][17] + coeff0_30*dmats1[30][17] + coeff0_31*dmats1[31][17] + coeff0_32*dmats1[32][17] + coeff0_33*dmats1[33][17] + coeff0_34*dmats1[34][17];
          new_coeff0_18 = coeff0_0*dmats1[0][18] + coeff0_1*dmats1[1][18] + coeff0_2*dmats1[2][18] + coeff0_3*dmats1[3][18] + coeff0_4*dmats1[4][18] + coeff0_5*dmats1[5][18] + coeff0_6*dmats1[6][18] + coeff0_7*dmats1[7][18] + coeff0_8*dmats1[8][18] + coeff0_9*dmats1[9][18] + coeff0_10*dmats1[10][18] + coeff0_11*dmats1[11][18] + coeff0_12*dmats1[12][18] + coeff0_13*dmats1[13][18] + coeff0_14*dmats1[14][18] + coeff0_15*dmats1[15][18] + coeff0_16*dmats1[16][18] + coeff0_17*dmats1[17][18] + coeff0_18*dmats1[18][18] + coeff0_19*dmats1[19][18] + coeff0_20*dmats1[20][18] + coeff0_21*dmats1[21][18] + coeff0_22*dmats1[22][18] + coeff0_23*dmats1[23][18] + coeff0_24*dmats1[24][18] + coeff0_25*dmats1[25][18] + coeff0_26*dmats1[26][18] + coeff0_27*dmats1[27][18] + coeff0_28*dmats1[28][18] + coeff0_29*dmats1[29][18] + coeff0_30*dmats1[30][18] + coeff0_31*dmats1[31][18] + coeff0_32*dmats1[32][18] + coeff0_33*dmats1[33][18] + coeff0_34*dmats1[34][18];
          new_coeff0_19 = coeff0_0*dmats1[0][19] + coeff0_1*dmats1[1][19] + coeff0_2*dmats1[2][19] + coeff0_3*dmats1[3][19] + coeff0_4*dmats1[4][19] + coeff0_5*dmats1[5][19] + coeff0_6*dmats1[6][19] + coeff0_7*dmats1[7][19] + coeff0_8*dmats1[8][19] + coeff0_9*dmats1[9][19] + coeff0_10*dmats1[10][19] + coeff0_11*dmats1[11][19] + coeff0_12*dmats1[12][19] + coeff0_13*dmats1[13][19] + coeff0_14*dmats1[14][19] + coeff0_15*dmats1[15][19] + coeff0_16*dmats1[16][19] + coeff0_17*dmats1[17][19] + coeff0_18*dmats1[18][19] + coeff0_19*dmats1[19][19] + coeff0_20*dmats1[20][19] + coeff0_21*dmats1[21][19] + coeff0_22*dmats1[22][19] + coeff0_23*dmats1[23][19] + coeff0_24*dmats1[24][19] + coeff0_25*dmats1[25][19] + coeff0_26*dmats1[26][19] + coeff0_27*dmats1[27][19] + coeff0_28*dmats1[28][19] + coeff0_29*dmats1[29][19] + coeff0_30*dmats1[30][19] + coeff0_31*dmats1[31][19] + coeff0_32*dmats1[32][19] + coeff0_33*dmats1[33][19] + coeff0_34*dmats1[34][19];
          new_coeff0_20 = coeff0_0*dmats1[0][20] + coeff0_1*dmats1[1][20] + coeff0_2*dmats1[2][20] + coeff0_3*dmats1[3][20] + coeff0_4*dmats1[4][20] + coeff0_5*dmats1[5][20] + coeff0_6*dmats1[6][20] + coeff0_7*dmats1[7][20] + coeff0_8*dmats1[8][20] + coeff0_9*dmats1[9][20] + coeff0_10*dmats1[10][20] + coeff0_11*dmats1[11][20] + coeff0_12*dmats1[12][20] + coeff0_13*dmats1[13][20] + coeff0_14*dmats1[14][20] + coeff0_15*dmats1[15][20] + coeff0_16*dmats1[16][20] + coeff0_17*dmats1[17][20] + coeff0_18*dmats1[18][20] + coeff0_19*dmats1[19][20] + coeff0_20*dmats1[20][20] + coeff0_21*dmats1[21][20] + coeff0_22*dmats1[22][20] + coeff0_23*dmats1[23][20] + coeff0_24*dmats1[24][20] + coeff0_25*dmats1[25][20] + coeff0_26*dmats1[26][20] + coeff0_27*dmats1[27][20] + coeff0_28*dmats1[28][20] + coeff0_29*dmats1[29][20] + coeff0_30*dmats1[30][20] + coeff0_31*dmats1[31][20] + coeff0_32*dmats1[32][20] + coeff0_33*dmats1[33][20] + coeff0_34*dmats1[34][20];
          new_coeff0_21 = coeff0_0*dmats1[0][21] + coeff0_1*dmats1[1][21] + coeff0_2*dmats1[2][21] + coeff0_3*dmats1[3][21] + coeff0_4*dmats1[4][21] + coeff0_5*dmats1[5][21] + coeff0_6*dmats1[6][21] + coeff0_7*dmats1[7][21] + coeff0_8*dmats1[8][21] + coeff0_9*dmats1[9][21] + coeff0_10*dmats1[10][21] + coeff0_11*dmats1[11][21] + coeff0_12*dmats1[12][21] + coeff0_13*dmats1[13][21] + coeff0_14*dmats1[14][21] + coeff0_15*dmats1[15][21] + coeff0_16*dmats1[16][21] + coeff0_17*dmats1[17][21] + coeff0_18*dmats1[18][21] + coeff0_19*dmats1[19][21] + coeff0_20*dmats1[20][21] + coeff0_21*dmats1[21][21] + coeff0_22*dmats1[22][21] + coeff0_23*dmats1[23][21] + coeff0_24*dmats1[24][21] + coeff0_25*dmats1[25][21] + coeff0_26*dmats1[26][21] + coeff0_27*dmats1[27][21] + coeff0_28*dmats1[28][21] + coeff0_29*dmats1[29][21] + coeff0_30*dmats1[30][21] + coeff0_31*dmats1[31][21] + coeff0_32*dmats1[32][21] + coeff0_33*dmats1[33][21] + coeff0_34*dmats1[34][21];
          new_coeff0_22 = coeff0_0*dmats1[0][22] + coeff0_1*dmats1[1][22] + coeff0_2*dmats1[2][22] + coeff0_3*dmats1[3][22] + coeff0_4*dmats1[4][22] + coeff0_5*dmats1[5][22] + coeff0_6*dmats1[6][22] + coeff0_7*dmats1[7][22] + coeff0_8*dmats1[8][22] + coeff0_9*dmats1[9][22] + coeff0_10*dmats1[10][22] + coeff0_11*dmats1[11][22] + coeff0_12*dmats1[12][22] + coeff0_13*dmats1[13][22] + coeff0_14*dmats1[14][22] + coeff0_15*dmats1[15][22] + coeff0_16*dmats1[16][22] + coeff0_17*dmats1[17][22] + coeff0_18*dmats1[18][22] + coeff0_19*dmats1[19][22] + coeff0_20*dmats1[20][22] + coeff0_21*dmats1[21][22] + coeff0_22*dmats1[22][22] + coeff0_23*dmats1[23][22] + coeff0_24*dmats1[24][22] + coeff0_25*dmats1[25][22] + coeff0_26*dmats1[26][22] + coeff0_27*dmats1[27][22] + coeff0_28*dmats1[28][22] + coeff0_29*dmats1[29][22] + coeff0_30*dmats1[30][22] + coeff0_31*dmats1[31][22] + coeff0_32*dmats1[32][22] + coeff0_33*dmats1[33][22] + coeff0_34*dmats1[34][22];
          new_coeff0_23 = coeff0_0*dmats1[0][23] + coeff0_1*dmats1[1][23] + coeff0_2*dmats1[2][23] + coeff0_3*dmats1[3][23] + coeff0_4*dmats1[4][23] + coeff0_5*dmats1[5][23] + coeff0_6*dmats1[6][23] + coeff0_7*dmats1[7][23] + coeff0_8*dmats1[8][23] + coeff0_9*dmats1[9][23] + coeff0_10*dmats1[10][23] + coeff0_11*dmats1[11][23] + coeff0_12*dmats1[12][23] + coeff0_13*dmats1[13][23] + coeff0_14*dmats1[14][23] + coeff0_15*dmats1[15][23] + coeff0_16*dmats1[16][23] + coeff0_17*dmats1[17][23] + coeff0_18*dmats1[18][23] + coeff0_19*dmats1[19][23] + coeff0_20*dmats1[20][23] + coeff0_21*dmats1[21][23] + coeff0_22*dmats1[22][23] + coeff0_23*dmats1[23][23] + coeff0_24*dmats1[24][23] + coeff0_25*dmats1[25][23] + coeff0_26*dmats1[26][23] + coeff0_27*dmats1[27][23] + coeff0_28*dmats1[28][23] + coeff0_29*dmats1[29][23] + coeff0_30*dmats1[30][23] + coeff0_31*dmats1[31][23] + coeff0_32*dmats1[32][23] + coeff0_33*dmats1[33][23] + coeff0_34*dmats1[34][23];
          new_coeff0_24 = coeff0_0*dmats1[0][24] + coeff0_1*dmats1[1][24] + coeff0_2*dmats1[2][24] + coeff0_3*dmats1[3][24] + coeff0_4*dmats1[4][24] + coeff0_5*dmats1[5][24] + coeff0_6*dmats1[6][24] + coeff0_7*dmats1[7][24] + coeff0_8*dmats1[8][24] + coeff0_9*dmats1[9][24] + coeff0_10*dmats1[10][24] + coeff0_11*dmats1[11][24] + coeff0_12*dmats1[12][24] + coeff0_13*dmats1[13][24] + coeff0_14*dmats1[14][24] + coeff0_15*dmats1[15][24] + coeff0_16*dmats1[16][24] + coeff0_17*dmats1[17][24] + coeff0_18*dmats1[18][24] + coeff0_19*dmats1[19][24] + coeff0_20*dmats1[20][24] + coeff0_21*dmats1[21][24] + coeff0_22*dmats1[22][24] + coeff0_23*dmats1[23][24] + coeff0_24*dmats1[24][24] + coeff0_25*dmats1[25][24] + coeff0_26*dmats1[26][24] + coeff0_27*dmats1[27][24] + coeff0_28*dmats1[28][24] + coeff0_29*dmats1[29][24] + coeff0_30*dmats1[30][24] + coeff0_31*dmats1[31][24] + coeff0_32*dmats1[32][24] + coeff0_33*dmats1[33][24] + coeff0_34*dmats1[34][24];
          new_coeff0_25 = coeff0_0*dmats1[0][25] + coeff0_1*dmats1[1][25] + coeff0_2*dmats1[2][25] + coeff0_3*dmats1[3][25] + coeff0_4*dmats1[4][25] + coeff0_5*dmats1[5][25] + coeff0_6*dmats1[6][25] + coeff0_7*dmats1[7][25] + coeff0_8*dmats1[8][25] + coeff0_9*dmats1[9][25] + coeff0_10*dmats1[10][25] + coeff0_11*dmats1[11][25] + coeff0_12*dmats1[12][25] + coeff0_13*dmats1[13][25] + coeff0_14*dmats1[14][25] + coeff0_15*dmats1[15][25] + coeff0_16*dmats1[16][25] + coeff0_17*dmats1[17][25] + coeff0_18*dmats1[18][25] + coeff0_19*dmats1[19][25] + coeff0_20*dmats1[20][25] + coeff0_21*dmats1[21][25] + coeff0_22*dmats1[22][25] + coeff0_23*dmats1[23][25] + coeff0_24*dmats1[24][25] + coeff0_25*dmats1[25][25] + coeff0_26*dmats1[26][25] + coeff0_27*dmats1[27][25] + coeff0_28*dmats1[28][25] + coeff0_29*dmats1[29][25] + coeff0_30*dmats1[30][25] + coeff0_31*dmats1[31][25] + coeff0_32*dmats1[32][25] + coeff0_33*dmats1[33][25] + coeff0_34*dmats1[34][25];
          new_coeff0_26 = coeff0_0*dmats1[0][26] + coeff0_1*dmats1[1][26] + coeff0_2*dmats1[2][26] + coeff0_3*dmats1[3][26] + coeff0_4*dmats1[4][26] + coeff0_5*dmats1[5][26] + coeff0_6*dmats1[6][26] + coeff0_7*dmats1[7][26] + coeff0_8*dmats1[8][26] + coeff0_9*dmats1[9][26] + coeff0_10*dmats1[10][26] + coeff0_11*dmats1[11][26] + coeff0_12*dmats1[12][26] + coeff0_13*dmats1[13][26] + coeff0_14*dmats1[14][26] + coeff0_15*dmats1[15][26] + coeff0_16*dmats1[16][26] + coeff0_17*dmats1[17][26] + coeff0_18*dmats1[18][26] + coeff0_19*dmats1[19][26] + coeff0_20*dmats1[20][26] + coeff0_21*dmats1[21][26] + coeff0_22*dmats1[22][26] + coeff0_23*dmats1[23][26] + coeff0_24*dmats1[24][26] + coeff0_25*dmats1[25][26] + coeff0_26*dmats1[26][26] + coeff0_27*dmats1[27][26] + coeff0_28*dmats1[28][26] + coeff0_29*dmats1[29][26] + coeff0_30*dmats1[30][26] + coeff0_31*dmats1[31][26] + coeff0_32*dmats1[32][26] + coeff0_33*dmats1[33][26] + coeff0_34*dmats1[34][26];
          new_coeff0_27 = coeff0_0*dmats1[0][27] + coeff0_1*dmats1[1][27] + coeff0_2*dmats1[2][27] + coeff0_3*dmats1[3][27] + coeff0_4*dmats1[4][27] + coeff0_5*dmats1[5][27] + coeff0_6*dmats1[6][27] + coeff0_7*dmats1[7][27] + coeff0_8*dmats1[8][27] + coeff0_9*dmats1[9][27] + coeff0_10*dmats1[10][27] + coeff0_11*dmats1[11][27] + coeff0_12*dmats1[12][27] + coeff0_13*dmats1[13][27] + coeff0_14*dmats1[14][27] + coeff0_15*dmats1[15][27] + coeff0_16*dmats1[16][27] + coeff0_17*dmats1[17][27] + coeff0_18*dmats1[18][27] + coeff0_19*dmats1[19][27] + coeff0_20*dmats1[20][27] + coeff0_21*dmats1[21][27] + coeff0_22*dmats1[22][27] + coeff0_23*dmats1[23][27] + coeff0_24*dmats1[24][27] + coeff0_25*dmats1[25][27] + coeff0_26*dmats1[26][27] + coeff0_27*dmats1[27][27] + coeff0_28*dmats1[28][27] + coeff0_29*dmats1[29][27] + coeff0_30*dmats1[30][27] + coeff0_31*dmats1[31][27] + coeff0_32*dmats1[32][27] + coeff0_33*dmats1[33][27] + coeff0_34*dmats1[34][27];
          new_coeff0_28 = coeff0_0*dmats1[0][28] + coeff0_1*dmats1[1][28] + coeff0_2*dmats1[2][28] + coeff0_3*dmats1[3][28] + coeff0_4*dmats1[4][28] + coeff0_5*dmats1[5][28] + coeff0_6*dmats1[6][28] + coeff0_7*dmats1[7][28] + coeff0_8*dmats1[8][28] + coeff0_9*dmats1[9][28] + coeff0_10*dmats1[10][28] + coeff0_11*dmats1[11][28] + coeff0_12*dmats1[12][28] + coeff0_13*dmats1[13][28] + coeff0_14*dmats1[14][28] + coeff0_15*dmats1[15][28] + coeff0_16*dmats1[16][28] + coeff0_17*dmats1[17][28] + coeff0_18*dmats1[18][28] + coeff0_19*dmats1[19][28] + coeff0_20*dmats1[20][28] + coeff0_21*dmats1[21][28] + coeff0_22*dmats1[22][28] + coeff0_23*dmats1[23][28] + coeff0_24*dmats1[24][28] + coeff0_25*dmats1[25][28] + coeff0_26*dmats1[26][28] + coeff0_27*dmats1[27][28] + coeff0_28*dmats1[28][28] + coeff0_29*dmats1[29][28] + coeff0_30*dmats1[30][28] + coeff0_31*dmats1[31][28] + coeff0_32*dmats1[32][28] + coeff0_33*dmats1[33][28] + coeff0_34*dmats1[34][28];
          new_coeff0_29 = coeff0_0*dmats1[0][29] + coeff0_1*dmats1[1][29] + coeff0_2*dmats1[2][29] + coeff0_3*dmats1[3][29] + coeff0_4*dmats1[4][29] + coeff0_5*dmats1[5][29] + coeff0_6*dmats1[6][29] + coeff0_7*dmats1[7][29] + coeff0_8*dmats1[8][29] + coeff0_9*dmats1[9][29] + coeff0_10*dmats1[10][29] + coeff0_11*dmats1[11][29] + coeff0_12*dmats1[12][29] + coeff0_13*dmats1[13][29] + coeff0_14*dmats1[14][29] + coeff0_15*dmats1[15][29] + coeff0_16*dmats1[16][29] + coeff0_17*dmats1[17][29] + coeff0_18*dmats1[18][29] + coeff0_19*dmats1[19][29] + coeff0_20*dmats1[20][29] + coeff0_21*dmats1[21][29] + coeff0_22*dmats1[22][29] + coeff0_23*dmats1[23][29] + coeff0_24*dmats1[24][29] + coeff0_25*dmats1[25][29] + coeff0_26*dmats1[26][29] + coeff0_27*dmats1[27][29] + coeff0_28*dmats1[28][29] + coeff0_29*dmats1[29][29] + coeff0_30*dmats1[30][29] + coeff0_31*dmats1[31][29] + coeff0_32*dmats1[32][29] + coeff0_33*dmats1[33][29] + coeff0_34*dmats1[34][29];
          new_coeff0_30 = coeff0_0*dmats1[0][30] + coeff0_1*dmats1[1][30] + coeff0_2*dmats1[2][30] + coeff0_3*dmats1[3][30] + coeff0_4*dmats1[4][30] + coeff0_5*dmats1[5][30] + coeff0_6*dmats1[6][30] + coeff0_7*dmats1[7][30] + coeff0_8*dmats1[8][30] + coeff0_9*dmats1[9][30] + coeff0_10*dmats1[10][30] + coeff0_11*dmats1[11][30] + coeff0_12*dmats1[12][30] + coeff0_13*dmats1[13][30] + coeff0_14*dmats1[14][30] + coeff0_15*dmats1[15][30] + coeff0_16*dmats1[16][30] + coeff0_17*dmats1[17][30] + coeff0_18*dmats1[18][30] + coeff0_19*dmats1[19][30] + coeff0_20*dmats1[20][30] + coeff0_21*dmats1[21][30] + coeff0_22*dmats1[22][30] + coeff0_23*dmats1[23][30] + coeff0_24*dmats1[24][30] + coeff0_25*dmats1[25][30] + coeff0_26*dmats1[26][30] + coeff0_27*dmats1[27][30] + coeff0_28*dmats1[28][30] + coeff0_29*dmats1[29][30] + coeff0_30*dmats1[30][30] + coeff0_31*dmats1[31][30] + coeff0_32*dmats1[32][30] + coeff0_33*dmats1[33][30] + coeff0_34*dmats1[34][30];
          new_coeff0_31 = coeff0_0*dmats1[0][31] + coeff0_1*dmats1[1][31] + coeff0_2*dmats1[2][31] + coeff0_3*dmats1[3][31] + coeff0_4*dmats1[4][31] + coeff0_5*dmats1[5][31] + coeff0_6*dmats1[6][31] + coeff0_7*dmats1[7][31] + coeff0_8*dmats1[8][31] + coeff0_9*dmats1[9][31] + coeff0_10*dmats1[10][31] + coeff0_11*dmats1[11][31] + coeff0_12*dmats1[12][31] + coeff0_13*dmats1[13][31] + coeff0_14*dmats1[14][31] + coeff0_15*dmats1[15][31] + coeff0_16*dmats1[16][31] + coeff0_17*dmats1[17][31] + coeff0_18*dmats1[18][31] + coeff0_19*dmats1[19][31] + coeff0_20*dmats1[20][31] + coeff0_21*dmats1[21][31] + coeff0_22*dmats1[22][31] + coeff0_23*dmats1[23][31] + coeff0_24*dmats1[24][31] + coeff0_25*dmats1[25][31] + coeff0_26*dmats1[26][31] + coeff0_27*dmats1[27][31] + coeff0_28*dmats1[28][31] + coeff0_29*dmats1[29][31] + coeff0_30*dmats1[30][31] + coeff0_31*dmats1[31][31] + coeff0_32*dmats1[32][31] + coeff0_33*dmats1[33][31] + coeff0_34*dmats1[34][31];
          new_coeff0_32 = coeff0_0*dmats1[0][32] + coeff0_1*dmats1[1][32] + coeff0_2*dmats1[2][32] + coeff0_3*dmats1[3][32] + coeff0_4*dmats1[4][32] + coeff0_5*dmats1[5][32] + coeff0_6*dmats1[6][32] + coeff0_7*dmats1[7][32] + coeff0_8*dmats1[8][32] + coeff0_9*dmats1[9][32] + coeff0_10*dmats1[10][32] + coeff0_11*dmats1[11][32] + coeff0_12*dmats1[12][32] + coeff0_13*dmats1[13][32] + coeff0_14*dmats1[14][32] + coeff0_15*dmats1[15][32] + coeff0_16*dmats1[16][32] + coeff0_17*dmats1[17][32] + coeff0_18*dmats1[18][32] + coeff0_19*dmats1[19][32] + coeff0_20*dmats1[20][32] + coeff0_21*dmats1[21][32] + coeff0_22*dmats1[22][32] + coeff0_23*dmats1[23][32] + coeff0_24*dmats1[24][32] + coeff0_25*dmats1[25][32] + coeff0_26*dmats1[26][32] + coeff0_27*dmats1[27][32] + coeff0_28*dmats1[28][32] + coeff0_29*dmats1[29][32] + coeff0_30*dmats1[30][32] + coeff0_31*dmats1[31][32] + coeff0_32*dmats1[32][32] + coeff0_33*dmats1[33][32] + coeff0_34*dmats1[34][32];
          new_coeff0_33 = coeff0_0*dmats1[0][33] + coeff0_1*dmats1[1][33] + coeff0_2*dmats1[2][33] + coeff0_3*dmats1[3][33] + coeff0_4*dmats1[4][33] + coeff0_5*dmats1[5][33] + coeff0_6*dmats1[6][33] + coeff0_7*dmats1[7][33] + coeff0_8*dmats1[8][33] + coeff0_9*dmats1[9][33] + coeff0_10*dmats1[10][33] + coeff0_11*dmats1[11][33] + coeff0_12*dmats1[12][33] + coeff0_13*dmats1[13][33] + coeff0_14*dmats1[14][33] + coeff0_15*dmats1[15][33] + coeff0_16*dmats1[16][33] + coeff0_17*dmats1[17][33] + coeff0_18*dmats1[18][33] + coeff0_19*dmats1[19][33] + coeff0_20*dmats1[20][33] + coeff0_21*dmats1[21][33] + coeff0_22*dmats1[22][33] + coeff0_23*dmats1[23][33] + coeff0_24*dmats1[24][33] + coeff0_25*dmats1[25][33] + coeff0_26*dmats1[26][33] + coeff0_27*dmats1[27][33] + coeff0_28*dmats1[28][33] + coeff0_29*dmats1[29][33] + coeff0_30*dmats1[30][33] + coeff0_31*dmats1[31][33] + coeff0_32*dmats1[32][33] + coeff0_33*dmats1[33][33] + coeff0_34*dmats1[34][33];
          new_coeff0_34 = coeff0_0*dmats1[0][34] + coeff0_1*dmats1[1][34] + coeff0_2*dmats1[2][34] + coeff0_3*dmats1[3][34] + coeff0_4*dmats1[4][34] + coeff0_5*dmats1[5][34] + coeff0_6*dmats1[6][34] + coeff0_7*dmats1[7][34] + coeff0_8*dmats1[8][34] + coeff0_9*dmats1[9][34] + coeff0_10*dmats1[10][34] + coeff0_11*dmats1[11][34] + coeff0_12*dmats1[12][34] + coeff0_13*dmats1[13][34] + coeff0_14*dmats1[14][34] + coeff0_15*dmats1[15][34] + coeff0_16*dmats1[16][34] + coeff0_17*dmats1[17][34] + coeff0_18*dmats1[18][34] + coeff0_19*dmats1[19][34] + coeff0_20*dmats1[20][34] + coeff0_21*dmats1[21][34] + coeff0_22*dmats1[22][34] + coeff0_23*dmats1[23][34] + coeff0_24*dmats1[24][34] + coeff0_25*dmats1[25][34] + coeff0_26*dmats1[26][34] + coeff0_27*dmats1[27][34] + coeff0_28*dmats1[28][34] + coeff0_29*dmats1[29][34] + coeff0_30*dmats1[30][34] + coeff0_31*dmats1[31][34] + coeff0_32*dmats1[32][34] + coeff0_33*dmats1[33][34] + coeff0_34*dmats1[34][34];
        }
        if(combinations[deriv_num][j] == 2)
        {
          new_coeff0_0 = coeff0_0*dmats2[0][0] + coeff0_1*dmats2[1][0] + coeff0_2*dmats2[2][0] + coeff0_3*dmats2[3][0] + coeff0_4*dmats2[4][0] + coeff0_5*dmats2[5][0] + coeff0_6*dmats2[6][0] + coeff0_7*dmats2[7][0] + coeff0_8*dmats2[8][0] + coeff0_9*dmats2[9][0] + coeff0_10*dmats2[10][0] + coeff0_11*dmats2[11][0] + coeff0_12*dmats2[12][0] + coeff0_13*dmats2[13][0] + coeff0_14*dmats2[14][0] + coeff0_15*dmats2[15][0] + coeff0_16*dmats2[16][0] + coeff0_17*dmats2[17][0] + coeff0_18*dmats2[18][0] + coeff0_19*dmats2[19][0] + coeff0_20*dmats2[20][0] + coeff0_21*dmats2[21][0] + coeff0_22*dmats2[22][0] + coeff0_23*dmats2[23][0] + coeff0_24*dmats2[24][0] + coeff0_25*dmats2[25][0] + coeff0_26*dmats2[26][0] + coeff0_27*dmats2[27][0] + coeff0_28*dmats2[28][0] + coeff0_29*dmats2[29][0] + coeff0_30*dmats2[30][0] + coeff0_31*dmats2[31][0] + coeff0_32*dmats2[32][0] + coeff0_33*dmats2[33][0] + coeff0_34*dmats2[34][0];
          new_coeff0_1 = coeff0_0*dmats2[0][1] + coeff0_1*dmats2[1][1] + coeff0_2*dmats2[2][1] + coeff0_3*dmats2[3][1] + coeff0_4*dmats2[4][1] + coeff0_5*dmats2[5][1] + coeff0_6*dmats2[6][1] + coeff0_7*dmats2[7][1] + coeff0_8*dmats2[8][1] + coeff0_9*dmats2[9][1] + coeff0_10*dmats2[10][1] + coeff0_11*dmats2[11][1] + coeff0_12*dmats2[12][1] + coeff0_13*dmats2[13][1] + coeff0_14*dmats2[14][1] + coeff0_15*dmats2[15][1] + coeff0_16*dmats2[16][1] + coeff0_17*dmats2[17][1] + coeff0_18*dmats2[18][1] + coeff0_19*dmats2[19][1] + coeff0_20*dmats2[20][1] + coeff0_21*dmats2[21][1] + coeff0_22*dmats2[22][1] + coeff0_23*dmats2[23][1] + coeff0_24*dmats2[24][1] + coeff0_25*dmats2[25][1] + coeff0_26*dmats2[26][1] + coeff0_27*dmats2[27][1] + coeff0_28*dmats2[28][1] + coeff0_29*dmats2[29][1] + coeff0_30*dmats2[30][1] + coeff0_31*dmats2[31][1] + coeff0_32*dmats2[32][1] + coeff0_33*dmats2[33][1] + coeff0_34*dmats2[34][1];
          new_coeff0_2 = coeff0_0*dmats2[0][2] + coeff0_1*dmats2[1][2] + coeff0_2*dmats2[2][2] + coeff0_3*dmats2[3][2] + coeff0_4*dmats2[4][2] + coeff0_5*dmats2[5][2] + coeff0_6*dmats2[6][2] + coeff0_7*dmats2[7][2] + coeff0_8*dmats2[8][2] + coeff0_9*dmats2[9][2] + coeff0_10*dmats2[10][2] + coeff0_11*dmats2[11][2] + coeff0_12*dmats2[12][2] + coeff0_13*dmats2[13][2] + coeff0_14*dmats2[14][2] + coeff0_15*dmats2[15][2] + coeff0_16*dmats2[16][2] + coeff0_17*dmats2[17][2] + coeff0_18*dmats2[18][2] + coeff0_19*dmats2[19][2] + coeff0_20*dmats2[20][2] + coeff0_21*dmats2[21][2] + coeff0_22*dmats2[22][2] + coeff0_23*dmats2[23][2] + coeff0_24*dmats2[24][2] + coeff0_25*dmats2[25][2] + coeff0_26*dmats2[26][2] + coeff0_27*dmats2[27][2] + coeff0_28*dmats2[28][2] + coeff0_29*dmats2[29][2] + coeff0_30*dmats2[30][2] + coeff0_31*dmats2[31][2] + coeff0_32*dmats2[32][2] + coeff0_33*dmats2[33][2] + coeff0_34*dmats2[34][2];
          new_coeff0_3 = coeff0_0*dmats2[0][3] + coeff0_1*dmats2[1][3] + coeff0_2*dmats2[2][3] + coeff0_3*dmats2[3][3] + coeff0_4*dmats2[4][3] + coeff0_5*dmats2[5][3] + coeff0_6*dmats2[6][3] + coeff0_7*dmats2[7][3] + coeff0_8*dmats2[8][3] + coeff0_9*dmats2[9][3] + coeff0_10*dmats2[10][3] + coeff0_11*dmats2[11][3] + coeff0_12*dmats2[12][3] + coeff0_13*dmats2[13][3] + coeff0_14*dmats2[14][3] + coeff0_15*dmats2[15][3] + coeff0_16*dmats2[16][3] + coeff0_17*dmats2[17][3] + coeff0_18*dmats2[18][3] + coeff0_19*dmats2[19][3] + coeff0_20*dmats2[20][3] + coeff0_21*dmats2[21][3] + coeff0_22*dmats2[22][3] + coeff0_23*dmats2[23][3] + coeff0_24*dmats2[24][3] + coeff0_25*dmats2[25][3] + coeff0_26*dmats2[26][3] + coeff0_27*dmats2[27][3] + coeff0_28*dmats2[28][3] + coeff0_29*dmats2[29][3] + coeff0_30*dmats2[30][3] + coeff0_31*dmats2[31][3] + coeff0_32*dmats2[32][3] + coeff0_33*dmats2[33][3] + coeff0_34*dmats2[34][3];
          new_coeff0_4 = coeff0_0*dmats2[0][4] + coeff0_1*dmats2[1][4] + coeff0_2*dmats2[2][4] + coeff0_3*dmats2[3][4] + coeff0_4*dmats2[4][4] + coeff0_5*dmats2[5][4] + coeff0_6*dmats2[6][4] + coeff0_7*dmats2[7][4] + coeff0_8*dmats2[8][4] + coeff0_9*dmats2[9][4] + coeff0_10*dmats2[10][4] + coeff0_11*dmats2[11][4] + coeff0_12*dmats2[12][4] + coeff0_13*dmats2[13][4] + coeff0_14*dmats2[14][4] + coeff0_15*dmats2[15][4] + coeff0_16*dmats2[16][4] + coeff0_17*dmats2[17][4] + coeff0_18*dmats2[18][4] + coeff0_19*dmats2[19][4] + coeff0_20*dmats2[20][4] + coeff0_21*dmats2[21][4] + coeff0_22*dmats2[22][4] + coeff0_23*dmats2[23][4] + coeff0_24*dmats2[24][4] + coeff0_25*dmats2[25][4] + coeff0_26*dmats2[26][4] + coeff0_27*dmats2[27][4] + coeff0_28*dmats2[28][4] + coeff0_29*dmats2[29][4] + coeff0_30*dmats2[30][4] + coeff0_31*dmats2[31][4] + coeff0_32*dmats2[32][4] + coeff0_33*dmats2[33][4] + coeff0_34*dmats2[34][4];
          new_coeff0_5 = coeff0_0*dmats2[0][5] + coeff0_1*dmats2[1][5] + coeff0_2*dmats2[2][5] + coeff0_3*dmats2[3][5] + coeff0_4*dmats2[4][5] + coeff0_5*dmats2[5][5] + coeff0_6*dmats2[6][5] + coeff0_7*dmats2[7][5] + coeff0_8*dmats2[8][5] + coeff0_9*dmats2[9][5] + coeff0_10*dmats2[10][5] + coeff0_11*dmats2[11][5] + coeff0_12*dmats2[12][5] + coeff0_13*dmats2[13][5] + coeff0_14*dmats2[14][5] + coeff0_15*dmats2[15][5] + coeff0_16*dmats2[16][5] + coeff0_17*dmats2[17][5] + coeff0_18*dmats2[18][5] + coeff0_19*dmats2[19][5] + coeff0_20*dmats2[20][5] + coeff0_21*dmats2[21][5] + coeff0_22*dmats2[22][5] + coeff0_23*dmats2[23][5] + coeff0_24*dmats2[24][5] + coeff0_25*dmats2[25][5] + coeff0_26*dmats2[26][5] + coeff0_27*dmats2[27][5] + coeff0_28*dmats2[28][5] + coeff0_29*dmats2[29][5] + coeff0_30*dmats2[30][5] + coeff0_31*dmats2[31][5] + coeff0_32*dmats2[32][5] + coeff0_33*dmats2[33][5] + coeff0_34*dmats2[34][5];
          new_coeff0_6 = coeff0_0*dmats2[0][6] + coeff0_1*dmats2[1][6] + coeff0_2*dmats2[2][6] + coeff0_3*dmats2[3][6] + coeff0_4*dmats2[4][6] + coeff0_5*dmats2[5][6] + coeff0_6*dmats2[6][6] + coeff0_7*dmats2[7][6] + coeff0_8*dmats2[8][6] + coeff0_9*dmats2[9][6] + coeff0_10*dmats2[10][6] + coeff0_11*dmats2[11][6] + coeff0_12*dmats2[12][6] + coeff0_13*dmats2[13][6] + coeff0_14*dmats2[14][6] + coeff0_15*dmats2[15][6] + coeff0_16*dmats2[16][6] + coeff0_17*dmats2[17][6] + coeff0_18*dmats2[18][6] + coeff0_19*dmats2[19][6] + coeff0_20*dmats2[20][6] + coeff0_21*dmats2[21][6] + coeff0_22*dmats2[22][6] + coeff0_23*dmats2[23][6] + coeff0_24*dmats2[24][6] + coeff0_25*dmats2[25][6] + coeff0_26*dmats2[26][6] + coeff0_27*dmats2[27][6] + coeff0_28*dmats2[28][6] + coeff0_29*dmats2[29][6] + coeff0_30*dmats2[30][6] + coeff0_31*dmats2[31][6] + coeff0_32*dmats2[32][6] + coeff0_33*dmats2[33][6] + coeff0_34*dmats2[34][6];
          new_coeff0_7 = coeff0_0*dmats2[0][7] + coeff0_1*dmats2[1][7] + coeff0_2*dmats2[2][7] + coeff0_3*dmats2[3][7] + coeff0_4*dmats2[4][7] + coeff0_5*dmats2[5][7] + coeff0_6*dmats2[6][7] + coeff0_7*dmats2[7][7] + coeff0_8*dmats2[8][7] + coeff0_9*dmats2[9][7] + coeff0_10*dmats2[10][7] + coeff0_11*dmats2[11][7] + coeff0_12*dmats2[12][7] + coeff0_13*dmats2[13][7] + coeff0_14*dmats2[14][7] + coeff0_15*dmats2[15][7] + coeff0_16*dmats2[16][7] + coeff0_17*dmats2[17][7] + coeff0_18*dmats2[18][7] + coeff0_19*dmats2[19][7] + coeff0_20*dmats2[20][7] + coeff0_21*dmats2[21][7] + coeff0_22*dmats2[22][7] + coeff0_23*dmats2[23][7] + coeff0_24*dmats2[24][7] + coeff0_25*dmats2[25][7] + coeff0_26*dmats2[26][7] + coeff0_27*dmats2[27][7] + coeff0_28*dmats2[28][7] + coeff0_29*dmats2[29][7] + coeff0_30*dmats2[30][7] + coeff0_31*dmats2[31][7] + coeff0_32*dmats2[32][7] + coeff0_33*dmats2[33][7] + coeff0_34*dmats2[34][7];
          new_coeff0_8 = coeff0_0*dmats2[0][8] + coeff0_1*dmats2[1][8] + coeff0_2*dmats2[2][8] + coeff0_3*dmats2[3][8] + coeff0_4*dmats2[4][8] + coeff0_5*dmats2[5][8] + coeff0_6*dmats2[6][8] + coeff0_7*dmats2[7][8] + coeff0_8*dmats2[8][8] + coeff0_9*dmats2[9][8] + coeff0_10*dmats2[10][8] + coeff0_11*dmats2[11][8] + coeff0_12*dmats2[12][8] + coeff0_13*dmats2[13][8] + coeff0_14*dmats2[14][8] + coeff0_15*dmats2[15][8] + coeff0_16*dmats2[16][8] + coeff0_17*dmats2[17][8] + coeff0_18*dmats2[18][8] + coeff0_19*dmats2[19][8] + coeff0_20*dmats2[20][8] + coeff0_21*dmats2[21][8] + coeff0_22*dmats2[22][8] + coeff0_23*dmats2[23][8] + coeff0_24*dmats2[24][8] + coeff0_25*dmats2[25][8] + coeff0_26*dmats2[26][8] + coeff0_27*dmats2[27][8] + coeff0_28*dmats2[28][8] + coeff0_29*dmats2[29][8] + coeff0_30*dmats2[30][8] + coeff0_31*dmats2[31][8] + coeff0_32*dmats2[32][8] + coeff0_33*dmats2[33][8] + coeff0_34*dmats2[34][8];
          new_coeff0_9 = coeff0_0*dmats2[0][9] + coeff0_1*dmats2[1][9] + coeff0_2*dmats2[2][9] + coeff0_3*dmats2[3][9] + coeff0_4*dmats2[4][9] + coeff0_5*dmats2[5][9] + coeff0_6*dmats2[6][9] + coeff0_7*dmats2[7][9] + coeff0_8*dmats2[8][9] + coeff0_9*dmats2[9][9] + coeff0_10*dmats2[10][9] + coeff0_11*dmats2[11][9] + coeff0_12*dmats2[12][9] + coeff0_13*dmats2[13][9] + coeff0_14*dmats2[14][9] + coeff0_15*dmats2[15][9] + coeff0_16*dmats2[16][9] + coeff0_17*dmats2[17][9] + coeff0_18*dmats2[18][9] + coeff0_19*dmats2[19][9] + coeff0_20*dmats2[20][9] + coeff0_21*dmats2[21][9] + coeff0_22*dmats2[22][9] + coeff0_23*dmats2[23][9] + coeff0_24*dmats2[24][9] + coeff0_25*dmats2[25][9] + coeff0_26*dmats2[26][9] + coeff0_27*dmats2[27][9] + coeff0_28*dmats2[28][9] + coeff0_29*dmats2[29][9] + coeff0_30*dmats2[30][9] + coeff0_31*dmats2[31][9] + coeff0_32*dmats2[32][9] + coeff0_33*dmats2[33][9] + coeff0_34*dmats2[34][9];
          new_coeff0_10 = coeff0_0*dmats2[0][10] + coeff0_1*dmats2[1][10] + coeff0_2*dmats2[2][10] + coeff0_3*dmats2[3][10] + coeff0_4*dmats2[4][10] + coeff0_5*dmats2[5][10] + coeff0_6*dmats2[6][10] + coeff0_7*dmats2[7][10] + coeff0_8*dmats2[8][10] + coeff0_9*dmats2[9][10] + coeff0_10*dmats2[10][10] + coeff0_11*dmats2[11][10] + coeff0_12*dmats2[12][10] + coeff0_13*dmats2[13][10] + coeff0_14*dmats2[14][10] + coeff0_15*dmats2[15][10] + coeff0_16*dmats2[16][10] + coeff0_17*dmats2[17][10] + coeff0_18*dmats2[18][10] + coeff0_19*dmats2[19][10] + coeff0_20*dmats2[20][10] + coeff0_21*dmats2[21][10] + coeff0_22*dmats2[22][10] + coeff0_23*dmats2[23][10] + coeff0_24*dmats2[24][10] + coeff0_25*dmats2[25][10] + coeff0_26*dmats2[26][10] + coeff0_27*dmats2[27][10] + coeff0_28*dmats2[28][10] + coeff0_29*dmats2[29][10] + coeff0_30*dmats2[30][10] + coeff0_31*dmats2[31][10] + coeff0_32*dmats2[32][10] + coeff0_33*dmats2[33][10] + coeff0_34*dmats2[34][10];
          new_coeff0_11 = coeff0_0*dmats2[0][11] + coeff0_1*dmats2[1][11] + coeff0_2*dmats2[2][11] + coeff0_3*dmats2[3][11] + coeff0_4*dmats2[4][11] + coeff0_5*dmats2[5][11] + coeff0_6*dmats2[6][11] + coeff0_7*dmats2[7][11] + coeff0_8*dmats2[8][11] + coeff0_9*dmats2[9][11] + coeff0_10*dmats2[10][11] + coeff0_11*dmats2[11][11] + coeff0_12*dmats2[12][11] + coeff0_13*dmats2[13][11] + coeff0_14*dmats2[14][11] + coeff0_15*dmats2[15][11] + coeff0_16*dmats2[16][11] + coeff0_17*dmats2[17][11] + coeff0_18*dmats2[18][11] + coeff0_19*dmats2[19][11] + coeff0_20*dmats2[20][11] + coeff0_21*dmats2[21][11] + coeff0_22*dmats2[22][11] + coeff0_23*dmats2[23][11] + coeff0_24*dmats2[24][11] + coeff0_25*dmats2[25][11] + coeff0_26*dmats2[26][11] + coeff0_27*dmats2[27][11] + coeff0_28*dmats2[28][11] + coeff0_29*dmats2[29][11] + coeff0_30*dmats2[30][11] + coeff0_31*dmats2[31][11] + coeff0_32*dmats2[32][11] + coeff0_33*dmats2[33][11] + coeff0_34*dmats2[34][11];
          new_coeff0_12 = coeff0_0*dmats2[0][12] + coeff0_1*dmats2[1][12] + coeff0_2*dmats2[2][12] + coeff0_3*dmats2[3][12] + coeff0_4*dmats2[4][12] + coeff0_5*dmats2[5][12] + coeff0_6*dmats2[6][12] + coeff0_7*dmats2[7][12] + coeff0_8*dmats2[8][12] + coeff0_9*dmats2[9][12] + coeff0_10*dmats2[10][12] + coeff0_11*dmats2[11][12] + coeff0_12*dmats2[12][12] + coeff0_13*dmats2[13][12] + coeff0_14*dmats2[14][12] + coeff0_15*dmats2[15][12] + coeff0_16*dmats2[16][12] + coeff0_17*dmats2[17][12] + coeff0_18*dmats2[18][12] + coeff0_19*dmats2[19][12] + coeff0_20*dmats2[20][12] + coeff0_21*dmats2[21][12] + coeff0_22*dmats2[22][12] + coeff0_23*dmats2[23][12] + coeff0_24*dmats2[24][12] + coeff0_25*dmats2[25][12] + coeff0_26*dmats2[26][12] + coeff0_27*dmats2[27][12] + coeff0_28*dmats2[28][12] + coeff0_29*dmats2[29][12] + coeff0_30*dmats2[30][12] + coeff0_31*dmats2[31][12] + coeff0_32*dmats2[32][12] + coeff0_33*dmats2[33][12] + coeff0_34*dmats2[34][12];
          new_coeff0_13 = coeff0_0*dmats2[0][13] + coeff0_1*dmats2[1][13] + coeff0_2*dmats2[2][13] + coeff0_3*dmats2[3][13] + coeff0_4*dmats2[4][13] + coeff0_5*dmats2[5][13] + coeff0_6*dmats2[6][13] + coeff0_7*dmats2[7][13] + coeff0_8*dmats2[8][13] + coeff0_9*dmats2[9][13] + coeff0_10*dmats2[10][13] + coeff0_11*dmats2[11][13] + coeff0_12*dmats2[12][13] + coeff0_13*dmats2[13][13] + coeff0_14*dmats2[14][13] + coeff0_15*dmats2[15][13] + coeff0_16*dmats2[16][13] + coeff0_17*dmats2[17][13] + coeff0_18*dmats2[18][13] + coeff0_19*dmats2[19][13] + coeff0_20*dmats2[20][13] + coeff0_21*dmats2[21][13] + coeff0_22*dmats2[22][13] + coeff0_23*dmats2[23][13] + coeff0_24*dmats2[24][13] + coeff0_25*dmats2[25][13] + coeff0_26*dmats2[26][13] + coeff0_27*dmats2[27][13] + coeff0_28*dmats2[28][13] + coeff0_29*dmats2[29][13] + coeff0_30*dmats2[30][13] + coeff0_31*dmats2[31][13] + coeff0_32*dmats2[32][13] + coeff0_33*dmats2[33][13] + coeff0_34*dmats2[34][13];
          new_coeff0_14 = coeff0_0*dmats2[0][14] + coeff0_1*dmats2[1][14] + coeff0_2*dmats2[2][14] + coeff0_3*dmats2[3][14] + coeff0_4*dmats2[4][14] + coeff0_5*dmats2[5][14] + coeff0_6*dmats2[6][14] + coeff0_7*dmats2[7][14] + coeff0_8*dmats2[8][14] + coeff0_9*dmats2[9][14] + coeff0_10*dmats2[10][14] + coeff0_11*dmats2[11][14] + coeff0_12*dmats2[12][14] + coeff0_13*dmats2[13][14] + coeff0_14*dmats2[14][14] + coeff0_15*dmats2[15][14] + coeff0_16*dmats2[16][14] + coeff0_17*dmats2[17][14] + coeff0_18*dmats2[18][14] + coeff0_19*dmats2[19][14] + coeff0_20*dmats2[20][14] + coeff0_21*dmats2[21][14] + coeff0_22*dmats2[22][14] + coeff0_23*dmats2[23][14] + coeff0_24*dmats2[24][14] + coeff0_25*dmats2[25][14] + coeff0_26*dmats2[26][14] + coeff0_27*dmats2[27][14] + coeff0_28*dmats2[28][14] + coeff0_29*dmats2[29][14] + coeff0_30*dmats2[30][14] + coeff0_31*dmats2[31][14] + coeff0_32*dmats2[32][14] + coeff0_33*dmats2[33][14] + coeff0_34*dmats2[34][14];
          new_coeff0_15 = coeff0_0*dmats2[0][15] + coeff0_1*dmats2[1][15] + coeff0_2*dmats2[2][15] + coeff0_3*dmats2[3][15] + coeff0_4*dmats2[4][15] + coeff0_5*dmats2[5][15] + coeff0_6*dmats2[6][15] + coeff0_7*dmats2[7][15] + coeff0_8*dmats2[8][15] + coeff0_9*dmats2[9][15] + coeff0_10*dmats2[10][15] + coeff0_11*dmats2[11][15] + coeff0_12*dmats2[12][15] + coeff0_13*dmats2[13][15] + coeff0_14*dmats2[14][15] + coeff0_15*dmats2[15][15] + coeff0_16*dmats2[16][15] + coeff0_17*dmats2[17][15] + coeff0_18*dmats2[18][15] + coeff0_19*dmats2[19][15] + coeff0_20*dmats2[20][15] + coeff0_21*dmats2[21][15] + coeff0_22*dmats2[22][15] + coeff0_23*dmats2[23][15] + coeff0_24*dmats2[24][15] + coeff0_25*dmats2[25][15] + coeff0_26*dmats2[26][15] + coeff0_27*dmats2[27][15] + coeff0_28*dmats2[28][15] + coeff0_29*dmats2[29][15] + coeff0_30*dmats2[30][15] + coeff0_31*dmats2[31][15] + coeff0_32*dmats2[32][15] + coeff0_33*dmats2[33][15] + coeff0_34*dmats2[34][15];
          new_coeff0_16 = coeff0_0*dmats2[0][16] + coeff0_1*dmats2[1][16] + coeff0_2*dmats2[2][16] + coeff0_3*dmats2[3][16] + coeff0_4*dmats2[4][16] + coeff0_5*dmats2[5][16] + coeff0_6*dmats2[6][16] + coeff0_7*dmats2[7][16] + coeff0_8*dmats2[8][16] + coeff0_9*dmats2[9][16] + coeff0_10*dmats2[10][16] + coeff0_11*dmats2[11][16] + coeff0_12*dmats2[12][16] + coeff0_13*dmats2[13][16] + coeff0_14*dmats2[14][16] + coeff0_15*dmats2[15][16] + coeff0_16*dmats2[16][16] + coeff0_17*dmats2[17][16] + coeff0_18*dmats2[18][16] + coeff0_19*dmats2[19][16] + coeff0_20*dmats2[20][16] + coeff0_21*dmats2[21][16] + coeff0_22*dmats2[22][16] + coeff0_23*dmats2[23][16] + coeff0_24*dmats2[24][16] + coeff0_25*dmats2[25][16] + coeff0_26*dmats2[26][16] + coeff0_27*dmats2[27][16] + coeff0_28*dmats2[28][16] + coeff0_29*dmats2[29][16] + coeff0_30*dmats2[30][16] + coeff0_31*dmats2[31][16] + coeff0_32*dmats2[32][16] + coeff0_33*dmats2[33][16] + coeff0_34*dmats2[34][16];
          new_coeff0_17 = coeff0_0*dmats2[0][17] + coeff0_1*dmats2[1][17] + coeff0_2*dmats2[2][17] + coeff0_3*dmats2[3][17] + coeff0_4*dmats2[4][17] + coeff0_5*dmats2[5][17] + coeff0_6*dmats2[6][17] + coeff0_7*dmats2[7][17] + coeff0_8*dmats2[8][17] + coeff0_9*dmats2[9][17] + coeff0_10*dmats2[10][17] + coeff0_11*dmats2[11][17] + coeff0_12*dmats2[12][17] + coeff0_13*dmats2[13][17] + coeff0_14*dmats2[14][17] + coeff0_15*dmats2[15][17] + coeff0_16*dmats2[16][17] + coeff0_17*dmats2[17][17] + coeff0_18*dmats2[18][17] + coeff0_19*dmats2[19][17] + coeff0_20*dmats2[20][17] + coeff0_21*dmats2[21][17] + coeff0_22*dmats2[22][17] + coeff0_23*dmats2[23][17] + coeff0_24*dmats2[24][17] + coeff0_25*dmats2[25][17] + coeff0_26*dmats2[26][17] + coeff0_27*dmats2[27][17] + coeff0_28*dmats2[28][17] + coeff0_29*dmats2[29][17] + coeff0_30*dmats2[30][17] + coeff0_31*dmats2[31][17] + coeff0_32*dmats2[32][17] + coeff0_33*dmats2[33][17] + coeff0_34*dmats2[34][17];
          new_coeff0_18 = coeff0_0*dmats2[0][18] + coeff0_1*dmats2[1][18] + coeff0_2*dmats2[2][18] + coeff0_3*dmats2[3][18] + coeff0_4*dmats2[4][18] + coeff0_5*dmats2[5][18] + coeff0_6*dmats2[6][18] + coeff0_7*dmats2[7][18] + coeff0_8*dmats2[8][18] + coeff0_9*dmats2[9][18] + coeff0_10*dmats2[10][18] + coeff0_11*dmats2[11][18] + coeff0_12*dmats2[12][18] + coeff0_13*dmats2[13][18] + coeff0_14*dmats2[14][18] + coeff0_15*dmats2[15][18] + coeff0_16*dmats2[16][18] + coeff0_17*dmats2[17][18] + coeff0_18*dmats2[18][18] + coeff0_19*dmats2[19][18] + coeff0_20*dmats2[20][18] + coeff0_21*dmats2[21][18] + coeff0_22*dmats2[22][18] + coeff0_23*dmats2[23][18] + coeff0_24*dmats2[24][18] + coeff0_25*dmats2[25][18] + coeff0_26*dmats2[26][18] + coeff0_27*dmats2[27][18] + coeff0_28*dmats2[28][18] + coeff0_29*dmats2[29][18] + coeff0_30*dmats2[30][18] + coeff0_31*dmats2[31][18] + coeff0_32*dmats2[32][18] + coeff0_33*dmats2[33][18] + coeff0_34*dmats2[34][18];
          new_coeff0_19 = coeff0_0*dmats2[0][19] + coeff0_1*dmats2[1][19] + coeff0_2*dmats2[2][19] + coeff0_3*dmats2[3][19] + coeff0_4*dmats2[4][19] + coeff0_5*dmats2[5][19] + coeff0_6*dmats2[6][19] + coeff0_7*dmats2[7][19] + coeff0_8*dmats2[8][19] + coeff0_9*dmats2[9][19] + coeff0_10*dmats2[10][19] + coeff0_11*dmats2[11][19] + coeff0_12*dmats2[12][19] + coeff0_13*dmats2[13][19] + coeff0_14*dmats2[14][19] + coeff0_15*dmats2[15][19] + coeff0_16*dmats2[16][19] + coeff0_17*dmats2[17][19] + coeff0_18*dmats2[18][19] + coeff0_19*dmats2[19][19] + coeff0_20*dmats2[20][19] + coeff0_21*dmats2[21][19] + coeff0_22*dmats2[22][19] + coeff0_23*dmats2[23][19] + coeff0_24*dmats2[24][19] + coeff0_25*dmats2[25][19] + coeff0_26*dmats2[26][19] + coeff0_27*dmats2[27][19] + coeff0_28*dmats2[28][19] + coeff0_29*dmats2[29][19] + coeff0_30*dmats2[30][19] + coeff0_31*dmats2[31][19] + coeff0_32*dmats2[32][19] + coeff0_33*dmats2[33][19] + coeff0_34*dmats2[34][19];
          new_coeff0_20 = coeff0_0*dmats2[0][20] + coeff0_1*dmats2[1][20] + coeff0_2*dmats2[2][20] + coeff0_3*dmats2[3][20] + coeff0_4*dmats2[4][20] + coeff0_5*dmats2[5][20] + coeff0_6*dmats2[6][20] + coeff0_7*dmats2[7][20] + coeff0_8*dmats2[8][20] + coeff0_9*dmats2[9][20] + coeff0_10*dmats2[10][20] + coeff0_11*dmats2[11][20] + coeff0_12*dmats2[12][20] + coeff0_13*dmats2[13][20] + coeff0_14*dmats2[14][20] + coeff0_15*dmats2[15][20] + coeff0_16*dmats2[16][20] + coeff0_17*dmats2[17][20] + coeff0_18*dmats2[18][20] + coeff0_19*dmats2[19][20] + coeff0_20*dmats2[20][20] + coeff0_21*dmats2[21][20] + coeff0_22*dmats2[22][20] + coeff0_23*dmats2[23][20] + coeff0_24*dmats2[24][20] + coeff0_25*dmats2[25][20] + coeff0_26*dmats2[26][20] + coeff0_27*dmats2[27][20] + coeff0_28*dmats2[28][20] + coeff0_29*dmats2[29][20] + coeff0_30*dmats2[30][20] + coeff0_31*dmats2[31][20] + coeff0_32*dmats2[32][20] + coeff0_33*dmats2[33][20] + coeff0_34*dmats2[34][20];
          new_coeff0_21 = coeff0_0*dmats2[0][21] + coeff0_1*dmats2[1][21] + coeff0_2*dmats2[2][21] + coeff0_3*dmats2[3][21] + coeff0_4*dmats2[4][21] + coeff0_5*dmats2[5][21] + coeff0_6*dmats2[6][21] + coeff0_7*dmats2[7][21] + coeff0_8*dmats2[8][21] + coeff0_9*dmats2[9][21] + coeff0_10*dmats2[10][21] + coeff0_11*dmats2[11][21] + coeff0_12*dmats2[12][21] + coeff0_13*dmats2[13][21] + coeff0_14*dmats2[14][21] + coeff0_15*dmats2[15][21] + coeff0_16*dmats2[16][21] + coeff0_17*dmats2[17][21] + coeff0_18*dmats2[18][21] + coeff0_19*dmats2[19][21] + coeff0_20*dmats2[20][21] + coeff0_21*dmats2[21][21] + coeff0_22*dmats2[22][21] + coeff0_23*dmats2[23][21] + coeff0_24*dmats2[24][21] + coeff0_25*dmats2[25][21] + coeff0_26*dmats2[26][21] + coeff0_27*dmats2[27][21] + coeff0_28*dmats2[28][21] + coeff0_29*dmats2[29][21] + coeff0_30*dmats2[30][21] + coeff0_31*dmats2[31][21] + coeff0_32*dmats2[32][21] + coeff0_33*dmats2[33][21] + coeff0_34*dmats2[34][21];
          new_coeff0_22 = coeff0_0*dmats2[0][22] + coeff0_1*dmats2[1][22] + coeff0_2*dmats2[2][22] + coeff0_3*dmats2[3][22] + coeff0_4*dmats2[4][22] + coeff0_5*dmats2[5][22] + coeff0_6*dmats2[6][22] + coeff0_7*dmats2[7][22] + coeff0_8*dmats2[8][22] + coeff0_9*dmats2[9][22] + coeff0_10*dmats2[10][22] + coeff0_11*dmats2[11][22] + coeff0_12*dmats2[12][22] + coeff0_13*dmats2[13][22] + coeff0_14*dmats2[14][22] + coeff0_15*dmats2[15][22] + coeff0_16*dmats2[16][22] + coeff0_17*dmats2[17][22] + coeff0_18*dmats2[18][22] + coeff0_19*dmats2[19][22] + coeff0_20*dmats2[20][22] + coeff0_21*dmats2[21][22] + coeff0_22*dmats2[22][22] + coeff0_23*dmats2[23][22] + coeff0_24*dmats2[24][22] + coeff0_25*dmats2[25][22] + coeff0_26*dmats2[26][22] + coeff0_27*dmats2[27][22] + coeff0_28*dmats2[28][22] + coeff0_29*dmats2[29][22] + coeff0_30*dmats2[30][22] + coeff0_31*dmats2[31][22] + coeff0_32*dmats2[32][22] + coeff0_33*dmats2[33][22] + coeff0_34*dmats2[34][22];
          new_coeff0_23 = coeff0_0*dmats2[0][23] + coeff0_1*dmats2[1][23] + coeff0_2*dmats2[2][23] + coeff0_3*dmats2[3][23] + coeff0_4*dmats2[4][23] + coeff0_5*dmats2[5][23] + coeff0_6*dmats2[6][23] + coeff0_7*dmats2[7][23] + coeff0_8*dmats2[8][23] + coeff0_9*dmats2[9][23] + coeff0_10*dmats2[10][23] + coeff0_11*dmats2[11][23] + coeff0_12*dmats2[12][23] + coeff0_13*dmats2[13][23] + coeff0_14*dmats2[14][23] + coeff0_15*dmats2[15][23] + coeff0_16*dmats2[16][23] + coeff0_17*dmats2[17][23] + coeff0_18*dmats2[18][23] + coeff0_19*dmats2[19][23] + coeff0_20*dmats2[20][23] + coeff0_21*dmats2[21][23] + coeff0_22*dmats2[22][23] + coeff0_23*dmats2[23][23] + coeff0_24*dmats2[24][23] + coeff0_25*dmats2[25][23] + coeff0_26*dmats2[26][23] + coeff0_27*dmats2[27][23] + coeff0_28*dmats2[28][23] + coeff0_29*dmats2[29][23] + coeff0_30*dmats2[30][23] + coeff0_31*dmats2[31][23] + coeff0_32*dmats2[32][23] + coeff0_33*dmats2[33][23] + coeff0_34*dmats2[34][23];
          new_coeff0_24 = coeff0_0*dmats2[0][24] + coeff0_1*dmats2[1][24] + coeff0_2*dmats2[2][24] + coeff0_3*dmats2[3][24] + coeff0_4*dmats2[4][24] + coeff0_5*dmats2[5][24] + coeff0_6*dmats2[6][24] + coeff0_7*dmats2[7][24] + coeff0_8*dmats2[8][24] + coeff0_9*dmats2[9][24] + coeff0_10*dmats2[10][24] + coeff0_11*dmats2[11][24] + coeff0_12*dmats2[12][24] + coeff0_13*dmats2[13][24] + coeff0_14*dmats2[14][24] + coeff0_15*dmats2[15][24] + coeff0_16*dmats2[16][24] + coeff0_17*dmats2[17][24] + coeff0_18*dmats2[18][24] + coeff0_19*dmats2[19][24] + coeff0_20*dmats2[20][24] + coeff0_21*dmats2[21][24] + coeff0_22*dmats2[22][24] + coeff0_23*dmats2[23][24] + coeff0_24*dmats2[24][24] + coeff0_25*dmats2[25][24] + coeff0_26*dmats2[26][24] + coeff0_27*dmats2[27][24] + coeff0_28*dmats2[28][24] + coeff0_29*dmats2[29][24] + coeff0_30*dmats2[30][24] + coeff0_31*dmats2[31][24] + coeff0_32*dmats2[32][24] + coeff0_33*dmats2[33][24] + coeff0_34*dmats2[34][24];
          new_coeff0_25 = coeff0_0*dmats2[0][25] + coeff0_1*dmats2[1][25] + coeff0_2*dmats2[2][25] + coeff0_3*dmats2[3][25] + coeff0_4*dmats2[4][25] + coeff0_5*dmats2[5][25] + coeff0_6*dmats2[6][25] + coeff0_7*dmats2[7][25] + coeff0_8*dmats2[8][25] + coeff0_9*dmats2[9][25] + coeff0_10*dmats2[10][25] + coeff0_11*dmats2[11][25] + coeff0_12*dmats2[12][25] + coeff0_13*dmats2[13][25] + coeff0_14*dmats2[14][25] + coeff0_15*dmats2[15][25] + coeff0_16*dmats2[16][25] + coeff0_17*dmats2[17][25] + coeff0_18*dmats2[18][25] + coeff0_19*dmats2[19][25] + coeff0_20*dmats2[20][25] + coeff0_21*dmats2[21][25] + coeff0_22*dmats2[22][25] + coeff0_23*dmats2[23][25] + coeff0_24*dmats2[24][25] + coeff0_25*dmats2[25][25] + coeff0_26*dmats2[26][25] + coeff0_27*dmats2[27][25] + coeff0_28*dmats2[28][25] + coeff0_29*dmats2[29][25] + coeff0_30*dmats2[30][25] + coeff0_31*dmats2[31][25] + coeff0_32*dmats2[32][25] + coeff0_33*dmats2[33][25] + coeff0_34*dmats2[34][25];
          new_coeff0_26 = coeff0_0*dmats2[0][26] + coeff0_1*dmats2[1][26] + coeff0_2*dmats2[2][26] + coeff0_3*dmats2[3][26] + coeff0_4*dmats2[4][26] + coeff0_5*dmats2[5][26] + coeff0_6*dmats2[6][26] + coeff0_7*dmats2[7][26] + coeff0_8*dmats2[8][26] + coeff0_9*dmats2[9][26] + coeff0_10*dmats2[10][26] + coeff0_11*dmats2[11][26] + coeff0_12*dmats2[12][26] + coeff0_13*dmats2[13][26] + coeff0_14*dmats2[14][26] + coeff0_15*dmats2[15][26] + coeff0_16*dmats2[16][26] + coeff0_17*dmats2[17][26] + coeff0_18*dmats2[18][26] + coeff0_19*dmats2[19][26] + coeff0_20*dmats2[20][26] + coeff0_21*dmats2[21][26] + coeff0_22*dmats2[22][26] + coeff0_23*dmats2[23][26] + coeff0_24*dmats2[24][26] + coeff0_25*dmats2[25][26] + coeff0_26*dmats2[26][26] + coeff0_27*dmats2[27][26] + coeff0_28*dmats2[28][26] + coeff0_29*dmats2[29][26] + coeff0_30*dmats2[30][26] + coeff0_31*dmats2[31][26] + coeff0_32*dmats2[32][26] + coeff0_33*dmats2[33][26] + coeff0_34*dmats2[34][26];
          new_coeff0_27 = coeff0_0*dmats2[0][27] + coeff0_1*dmats2[1][27] + coeff0_2*dmats2[2][27] + coeff0_3*dmats2[3][27] + coeff0_4*dmats2[4][27] + coeff0_5*dmats2[5][27] + coeff0_6*dmats2[6][27] + coeff0_7*dmats2[7][27] + coeff0_8*dmats2[8][27] + coeff0_9*dmats2[9][27] + coeff0_10*dmats2[10][27] + coeff0_11*dmats2[11][27] + coeff0_12*dmats2[12][27] + coeff0_13*dmats2[13][27] + coeff0_14*dmats2[14][27] + coeff0_15*dmats2[15][27] + coeff0_16*dmats2[16][27] + coeff0_17*dmats2[17][27] + coeff0_18*dmats2[18][27] + coeff0_19*dmats2[19][27] + coeff0_20*dmats2[20][27] + coeff0_21*dmats2[21][27] + coeff0_22*dmats2[22][27] + coeff0_23*dmats2[23][27] + coeff0_24*dmats2[24][27] + coeff0_25*dmats2[25][27] + coeff0_26*dmats2[26][27] + coeff0_27*dmats2[27][27] + coeff0_28*dmats2[28][27] + coeff0_29*dmats2[29][27] + coeff0_30*dmats2[30][27] + coeff0_31*dmats2[31][27] + coeff0_32*dmats2[32][27] + coeff0_33*dmats2[33][27] + coeff0_34*dmats2[34][27];
          new_coeff0_28 = coeff0_0*dmats2[0][28] + coeff0_1*dmats2[1][28] + coeff0_2*dmats2[2][28] + coeff0_3*dmats2[3][28] + coeff0_4*dmats2[4][28] + coeff0_5*dmats2[5][28] + coeff0_6*dmats2[6][28] + coeff0_7*dmats2[7][28] + coeff0_8*dmats2[8][28] + coeff0_9*dmats2[9][28] + coeff0_10*dmats2[10][28] + coeff0_11*dmats2[11][28] + coeff0_12*dmats2[12][28] + coeff0_13*dmats2[13][28] + coeff0_14*dmats2[14][28] + coeff0_15*dmats2[15][28] + coeff0_16*dmats2[16][28] + coeff0_17*dmats2[17][28] + coeff0_18*dmats2[18][28] + coeff0_19*dmats2[19][28] + coeff0_20*dmats2[20][28] + coeff0_21*dmats2[21][28] + coeff0_22*dmats2[22][28] + coeff0_23*dmats2[23][28] + coeff0_24*dmats2[24][28] + coeff0_25*dmats2[25][28] + coeff0_26*dmats2[26][28] + coeff0_27*dmats2[27][28] + coeff0_28*dmats2[28][28] + coeff0_29*dmats2[29][28] + coeff0_30*dmats2[30][28] + coeff0_31*dmats2[31][28] + coeff0_32*dmats2[32][28] + coeff0_33*dmats2[33][28] + coeff0_34*dmats2[34][28];
          new_coeff0_29 = coeff0_0*dmats2[0][29] + coeff0_1*dmats2[1][29] + coeff0_2*dmats2[2][29] + coeff0_3*dmats2[3][29] + coeff0_4*dmats2[4][29] + coeff0_5*dmats2[5][29] + coeff0_6*dmats2[6][29] + coeff0_7*dmats2[7][29] + coeff0_8*dmats2[8][29] + coeff0_9*dmats2[9][29] + coeff0_10*dmats2[10][29] + coeff0_11*dmats2[11][29] + coeff0_12*dmats2[12][29] + coeff0_13*dmats2[13][29] + coeff0_14*dmats2[14][29] + coeff0_15*dmats2[15][29] + coeff0_16*dmats2[16][29] + coeff0_17*dmats2[17][29] + coeff0_18*dmats2[18][29] + coeff0_19*dmats2[19][29] + coeff0_20*dmats2[20][29] + coeff0_21*dmats2[21][29] + coeff0_22*dmats2[22][29] + coeff0_23*dmats2[23][29] + coeff0_24*dmats2[24][29] + coeff0_25*dmats2[25][29] + coeff0_26*dmats2[26][29] + coeff0_27*dmats2[27][29] + coeff0_28*dmats2[28][29] + coeff0_29*dmats2[29][29] + coeff0_30*dmats2[30][29] + coeff0_31*dmats2[31][29] + coeff0_32*dmats2[32][29] + coeff0_33*dmats2[33][29] + coeff0_34*dmats2[34][29];
          new_coeff0_30 = coeff0_0*dmats2[0][30] + coeff0_1*dmats2[1][30] + coeff0_2*dmats2[2][30] + coeff0_3*dmats2[3][30] + coeff0_4*dmats2[4][30] + coeff0_5*dmats2[5][30] + coeff0_6*dmats2[6][30] + coeff0_7*dmats2[7][30] + coeff0_8*dmats2[8][30] + coeff0_9*dmats2[9][30] + coeff0_10*dmats2[10][30] + coeff0_11*dmats2[11][30] + coeff0_12*dmats2[12][30] + coeff0_13*dmats2[13][30] + coeff0_14*dmats2[14][30] + coeff0_15*dmats2[15][30] + coeff0_16*dmats2[16][30] + coeff0_17*dmats2[17][30] + coeff0_18*dmats2[18][30] + coeff0_19*dmats2[19][30] + coeff0_20*dmats2[20][30] + coeff0_21*dmats2[21][30] + coeff0_22*dmats2[22][30] + coeff0_23*dmats2[23][30] + coeff0_24*dmats2[24][30] + coeff0_25*dmats2[25][30] + coeff0_26*dmats2[26][30] + coeff0_27*dmats2[27][30] + coeff0_28*dmats2[28][30] + coeff0_29*dmats2[29][30] + coeff0_30*dmats2[30][30] + coeff0_31*dmats2[31][30] + coeff0_32*dmats2[32][30] + coeff0_33*dmats2[33][30] + coeff0_34*dmats2[34][30];
          new_coeff0_31 = coeff0_0*dmats2[0][31] + coeff0_1*dmats2[1][31] + coeff0_2*dmats2[2][31] + coeff0_3*dmats2[3][31] + coeff0_4*dmats2[4][31] + coeff0_5*dmats2[5][31] + coeff0_6*dmats2[6][31] + coeff0_7*dmats2[7][31] + coeff0_8*dmats2[8][31] + coeff0_9*dmats2[9][31] + coeff0_10*dmats2[10][31] + coeff0_11*dmats2[11][31] + coeff0_12*dmats2[12][31] + coeff0_13*dmats2[13][31] + coeff0_14*dmats2[14][31] + coeff0_15*dmats2[15][31] + coeff0_16*dmats2[16][31] + coeff0_17*dmats2[17][31] + coeff0_18*dmats2[18][31] + coeff0_19*dmats2[19][31] + coeff0_20*dmats2[20][31] + coeff0_21*dmats2[21][31] + coeff0_22*dmats2[22][31] + coeff0_23*dmats2[23][31] + coeff0_24*dmats2[24][31] + coeff0_25*dmats2[25][31] + coeff0_26*dmats2[26][31] + coeff0_27*dmats2[27][31] + coeff0_28*dmats2[28][31] + coeff0_29*dmats2[29][31] + coeff0_30*dmats2[30][31] + coeff0_31*dmats2[31][31] + coeff0_32*dmats2[32][31] + coeff0_33*dmats2[33][31] + coeff0_34*dmats2[34][31];
          new_coeff0_32 = coeff0_0*dmats2[0][32] + coeff0_1*dmats2[1][32] + coeff0_2*dmats2[2][32] + coeff0_3*dmats2[3][32] + coeff0_4*dmats2[4][32] + coeff0_5*dmats2[5][32] + coeff0_6*dmats2[6][32] + coeff0_7*dmats2[7][32] + coeff0_8*dmats2[8][32] + coeff0_9*dmats2[9][32] + coeff0_10*dmats2[10][32] + coeff0_11*dmats2[11][32] + coeff0_12*dmats2[12][32] + coeff0_13*dmats2[13][32] + coeff0_14*dmats2[14][32] + coeff0_15*dmats2[15][32] + coeff0_16*dmats2[16][32] + coeff0_17*dmats2[17][32] + coeff0_18*dmats2[18][32] + coeff0_19*dmats2[19][32] + coeff0_20*dmats2[20][32] + coeff0_21*dmats2[21][32] + coeff0_22*dmats2[22][32] + coeff0_23*dmats2[23][32] + coeff0_24*dmats2[24][32] + coeff0_25*dmats2[25][32] + coeff0_26*dmats2[26][32] + coeff0_27*dmats2[27][32] + coeff0_28*dmats2[28][32] + coeff0_29*dmats2[29][32] + coeff0_30*dmats2[30][32] + coeff0_31*dmats2[31][32] + coeff0_32*dmats2[32][32] + coeff0_33*dmats2[33][32] + coeff0_34*dmats2[34][32];
          new_coeff0_33 = coeff0_0*dmats2[0][33] + coeff0_1*dmats2[1][33] + coeff0_2*dmats2[2][33] + coeff0_3*dmats2[3][33] + coeff0_4*dmats2[4][33] + coeff0_5*dmats2[5][33] + coeff0_6*dmats2[6][33] + coeff0_7*dmats2[7][33] + coeff0_8*dmats2[8][33] + coeff0_9*dmats2[9][33] + coeff0_10*dmats2[10][33] + coeff0_11*dmats2[11][33] + coeff0_12*dmats2[12][33] + coeff0_13*dmats2[13][33] + coeff0_14*dmats2[14][33] + coeff0_15*dmats2[15][33] + coeff0_16*dmats2[16][33] + coeff0_17*dmats2[17][33] + coeff0_18*dmats2[18][33] + coeff0_19*dmats2[19][33] + coeff0_20*dmats2[20][33] + coeff0_21*dmats2[21][33] + coeff0_22*dmats2[22][33] + coeff0_23*dmats2[23][33] + coeff0_24*dmats2[24][33] + coeff0_25*dmats2[25][33] + coeff0_26*dmats2[26][33] + coeff0_27*dmats2[27][33] + coeff0_28*dmats2[28][33] + coeff0_29*dmats2[29][33] + coeff0_30*dmats2[30][33] + coeff0_31*dmats2[31][33] + coeff0_32*dmats2[32][33] + coeff0_33*dmats2[33][33] + coeff0_34*dmats2[34][33];
          new_coeff0_34 = coeff0_0*dmats2[0][34] + coeff0_1*dmats2[1][34] + coeff0_2*dmats2[2][34] + coeff0_3*dmats2[3][34] + coeff0_4*dmats2[4][34] + coeff0_5*dmats2[5][34] + coeff0_6*dmats2[6][34] + coeff0_7*dmats2[7][34] + coeff0_8*dmats2[8][34] + coeff0_9*dmats2[9][34] + coeff0_10*dmats2[10][34] + coeff0_11*dmats2[11][34] + coeff0_12*dmats2[12][34] + coeff0_13*dmats2[13][34] + coeff0_14*dmats2[14][34] + coeff0_15*dmats2[15][34] + coeff0_16*dmats2[16][34] + coeff0_17*dmats2[17][34] + coeff0_18*dmats2[18][34] + coeff0_19*dmats2[19][34] + coeff0_20*dmats2[20][34] + coeff0_21*dmats2[21][34] + coeff0_22*dmats2[22][34] + coeff0_23*dmats2[23][34] + coeff0_24*dmats2[24][34] + coeff0_25*dmats2[25][34] + coeff0_26*dmats2[26][34] + coeff0_27*dmats2[27][34] + coeff0_28*dmats2[28][34] + coeff0_29*dmats2[29][34] + coeff0_30*dmats2[30][34] + coeff0_31*dmats2[31][34] + coeff0_32*dmats2[32][34] + coeff0_33*dmats2[33][34] + coeff0_34*dmats2[34][34];
        }
    
      }
      // Compute derivatives on reference element as dot product of coefficients and basisvalues
      derivatives[deriv_num] = new_coeff0_0*basisvalue0 + new_coeff0_1*basisvalue1 + new_coeff0_2*basisvalue2 + new_coeff0_3*basisvalue3 + new_coeff0_4*basisvalue4 + new_coeff0_5*basisvalue5 + new_coeff0_6*basisvalue6 + new_coeff0_7*basisvalue7 + new_coeff0_8*basisvalue8 + new_coeff0_9*basisvalue9 + new_coeff0_10*basisvalue10 + new_coeff0_11*basisvalue11 + new_coeff0_12*basisvalue12 + new_coeff0_13*basisvalue13 + new_coeff0_14*basisvalue14 + new_coeff0_15*basisvalue15 + new_coeff0_16*basisvalue16 + new_coeff0_17*basisvalue17 + new_coeff0_18*basisvalue18 + new_coeff0_19*basisvalue19 + new_coeff0_20*basisvalue20 + new_coeff0_21*basisvalue21 + new_coeff0_22*basisvalue22 + new_coeff0_23*basisvalue23 + new_coeff0_24*basisvalue24 + new_coeff0_25*basisvalue25 + new_coeff0_26*basisvalue26 + new_coeff0_27*basisvalue27 + new_coeff0_28*basisvalue28 + new_coeff0_29*basisvalue29 + new_coeff0_30*basisvalue30 + new_coeff0_31*basisvalue31 + new_coeff0_32*basisvalue32 + new_coeff0_33*basisvalue33 + new_coeff0_34*basisvalue34;
    }
    
    // Transform derivatives back to physical element
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        values[row] += transform[row][col]*derivatives[col];
      }
    }
    // Delete pointer to array of derivatives on FIAT element
    delete [] derivatives;
    
    // Delete pointer to array of combinations of derivatives and transform
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      delete [] combinations[row];
      delete [] transform[row];
    }
    
    delete [] combinations;
    delete [] transform;
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis_derivatives() is not yet implemented.");
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // The reference points, direction and weights:
    const static double X[35][1][3] = {{{0, 0, 0}}, {{1, 0, 0}}, {{0, 1, 0}}, {{0, 0, 1}}, {{0, 0.75, 0.25}}, {{0, 0.5, 0.5}}, {{0, 0.25, 0.75}}, {{0.75, 0, 0.25}}, {{0.5, 0, 0.5}}, {{0.25, 0, 0.75}}, {{0.75, 0.25, 0}}, {{0.5, 0.5, 0}}, {{0.25, 0.75, 0}}, {{0, 0, 0.25}}, {{0, 0, 0.5}}, {{0, 0, 0.75}}, {{0, 0.25, 0}}, {{0, 0.5, 0}}, {{0, 0.75, 0}}, {{0.25, 0, 0}}, {{0.5, 0, 0}}, {{0.75, 0, 0}}, {{0.5, 0.25, 0.25}}, {{0.25, 0.5, 0.25}}, {{0.25, 0.25, 0.5}}, {{0, 0.25, 0.25}}, {{0, 0.5, 0.25}}, {{0, 0.25, 0.5}}, {{0.25, 0, 0.25}}, {{0.5, 0, 0.25}}, {{0.25, 0, 0.5}}, {{0.25, 0.25, 0}}, {{0.5, 0.25, 0}}, {{0.25, 0.5, 0}}, {{0.25, 0.25, 0.25}}};
    const static double W[35][1] = {{1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}};
    const static double D[35][1][1] = {{{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}};
    
    const double * const * x = c.coordinates;
    double result = 0.0;
    // Iterate over the points:
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0][0] - X[i][0][1] - X[i][0][2];
    const double w1 = X[i][0][0];
    const double w2 = X[i][0][1];
    const double w3 = X[i][0][2];
    
    // Compute affine mapping y = F(X)
    double y[3];
    y[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0] + w3*x[3][0];
    y[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1] + w3*x[3][1];
    y[2] = w0*x[0][2] + w1*x[1][2] + w2*x[2][2] + w3*x[3][2];
    
    // Evaluate function at physical points
    double values[1];
    f.evaluate(values, y, c);
    
    // Map function values using appropriate mapping
    // Affine map: Do nothing
    
    // Note that we do not map the weights (yet).
    
    // Take directional components
    for(int k = 0; k < 1; k++)
      result += values[k]*D[i][0][k];
    // Multiply by weights 
    result *= W[i][0];
    
    return result;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate at vertices and use affine mapping
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new poisson3d_4_0_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class poisson3d_4_0_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  poisson3d_4_0_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~poisson3d_4_0_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', 'tetrahedron', 4)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 35;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_02 = element_coordinates[3][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
    const double J_12 = element_coordinates[3][1] - element_coordinates[0][1];
    const double J_20 = element_coordinates[1][2] - element_coordinates[0][2];
    const double J_21 = element_coordinates[2][2] - element_coordinates[0][2];
    const double J_22 = element_coordinates[3][2] - element_coordinates[0][2];
      
    // Compute sub determinants
    const double d00 = J_11*J_22 - J_12*J_21;
    const double d01 = J_12*J_20 - J_10*J_22;
    const double d02 = J_10*J_21 - J_11*J_20;
    
    const double d10 = J_02*J_21 - J_01*J_22;
    const double d11 = J_00*J_22 - J_02*J_20;
    const double d12 = J_01*J_20 - J_00*J_21;
    
    const double d20 = J_01*J_12 - J_02*J_11;
    const double d21 = J_02*J_10 - J_00*J_12;
    const double d22 = J_00*J_11 - J_01*J_10;
      
    // Compute determinant of Jacobian
    double detJ = J_00*d00 + J_10*d10 + J_20*d20;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = d00*(element_coordinates[0][0] - element_coordinates[2][0] - element_coordinates[3][0]) \
                    + d10*(element_coordinates[0][1] - element_coordinates[2][1] - element_coordinates[3][1]) \
                    + d20*(element_coordinates[0][2] - element_coordinates[2][2] - element_coordinates[3][2]);
    
    const double C1 = d01*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[3][0]) \
                    + d11*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[3][1]) \
                    + d21*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[3][2]);
    
    const double C2 = d02*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[2][0]) \
                    + d12*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[2][1]) \
                    + d22*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[2][2]);
    
    // Get coordinates and map to the UFC reference element
    double x = (C0 + d00*coordinates[0] + d10*coordinates[1] + d20*coordinates[2]) / detJ;
    double y = (C1 + d01*coordinates[0] + d11*coordinates[1] + d21*coordinates[2]) / detJ;
    double z = (C2 + d02*coordinates[0] + d12*coordinates[1] + d22*coordinates[2]) / detJ;
    
    // Map coordinates to the reference cube
    if (std::abs(y + z - 1.0) < 1e-14)
      x = 1.0;
    else
      x = -2.0 * x/(y + z - 1.0) - 1.0;
    if (std::abs(z - 1.0) < 1e-14)
      y = -1.0;
    else
      y = 2.0 * y/(1.0 - z) - 1.0;
    z = 2.0 * z - 1.0;
    
    // Reset values
    *values = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    const double scalings_y_4 = scalings_y_3*(0.5 - 0.5*y);
    const double scalings_z_0 = 1;
    const double scalings_z_1 = scalings_z_0*(0.5 - 0.5*z);
    const double scalings_z_2 = scalings_z_1*(0.5 - 0.5*z);
    const double scalings_z_3 = scalings_z_2*(0.5 - 0.5*z);
    const double scalings_z_4 = scalings_z_3*(0.5 - 0.5*z);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    const double psitilde_a_4 = 1.75*x*psitilde_a_3 - 0.75*psitilde_a_2;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_0_4 = 0.0285714285714286*psitilde_bs_0_3 + 1.8*y*psitilde_bs_0_3 - 0.771428571428571*psitilde_bs_0_2;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_1_3 = 0.285714285714286*psitilde_bs_1_2 + 2*y*psitilde_bs_1_2 - 0.714285714285714*psitilde_bs_1_1;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_2_2 = 1.02040816326531*psitilde_bs_2_1 + 2.57142857142857*y*psitilde_bs_2_1 - 0.551020408163265*psitilde_bs_2_0;
    const double psitilde_bs_3_0 = 1;
    const double psitilde_bs_3_1 = 4.5*y + 3.5;
    const double psitilde_bs_4_0 = 1;
    
    // Compute psitilde_cs
    const double psitilde_cs_00_0 = 1;
    const double psitilde_cs_00_1 = 2*z + 1;
    const double psitilde_cs_00_2 = 0.3125*psitilde_cs_00_1 + 1.875*z*psitilde_cs_00_1 - 0.5625*psitilde_cs_00_0;
    const double psitilde_cs_00_3 = 0.155555555555556*psitilde_cs_00_2 + 1.86666666666667*z*psitilde_cs_00_2 - 0.711111111111111*psitilde_cs_00_1;
    const double psitilde_cs_00_4 = 0.09375*psitilde_cs_00_3 + 1.875*z*psitilde_cs_00_3 - 0.78125*psitilde_cs_00_2;
    const double psitilde_cs_01_0 = 1;
    const double psitilde_cs_01_1 = 3*z + 2;
    const double psitilde_cs_01_2 = 0.777777777777778*psitilde_cs_01_1 + 2.33333333333333*z*psitilde_cs_01_1 - 0.555555555555556*psitilde_cs_01_0;
    const double psitilde_cs_01_3 = 0.428571428571429*psitilde_cs_01_2 + 2.14285714285714*z*psitilde_cs_01_2 - 0.714285714285714*psitilde_cs_01_1;
    const double psitilde_cs_02_0 = 1;
    const double psitilde_cs_02_1 = 4*z + 3;
    const double psitilde_cs_02_2 = 1.265625*psitilde_cs_02_1 + 2.8125*z*psitilde_cs_02_1 - 0.546875*psitilde_cs_02_0;
    const double psitilde_cs_03_0 = 1;
    const double psitilde_cs_03_1 = 5*z + 4;
    const double psitilde_cs_04_0 = 1;
    const double psitilde_cs_10_0 = 1;
    const double psitilde_cs_10_1 = 3*z + 2;
    const double psitilde_cs_10_2 = 0.777777777777778*psitilde_cs_10_1 + 2.33333333333333*z*psitilde_cs_10_1 - 0.555555555555556*psitilde_cs_10_0;
    const double psitilde_cs_10_3 = 0.428571428571429*psitilde_cs_10_2 + 2.14285714285714*z*psitilde_cs_10_2 - 0.714285714285714*psitilde_cs_10_1;
    const double psitilde_cs_11_0 = 1;
    const double psitilde_cs_11_1 = 4*z + 3;
    const double psitilde_cs_11_2 = 1.265625*psitilde_cs_11_1 + 2.8125*z*psitilde_cs_11_1 - 0.546875*psitilde_cs_11_0;
    const double psitilde_cs_12_0 = 1;
    const double psitilde_cs_12_1 = 5*z + 4;
    const double psitilde_cs_13_0 = 1;
    const double psitilde_cs_20_0 = 1;
    const double psitilde_cs_20_1 = 4*z + 3;
    const double psitilde_cs_20_2 = 1.265625*psitilde_cs_20_1 + 2.8125*z*psitilde_cs_20_1 - 0.546875*psitilde_cs_20_0;
    const double psitilde_cs_21_0 = 1;
    const double psitilde_cs_21_1 = 5*z + 4;
    const double psitilde_cs_22_0 = 1;
    const double psitilde_cs_30_0 = 1;
    const double psitilde_cs_30_1 = 5*z + 4;
    const double psitilde_cs_31_0 = 1;
    const double psitilde_cs_40_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.866025403784439*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_0;
    const double basisvalue1 = 2.73861278752583*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_0;
    const double basisvalue2 = 1.58113883008419*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_0;
    const double basisvalue3 = 1.11803398874989*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_1;
    const double basisvalue4 = 5.1234753829798*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_0;
    const double basisvalue5 = 3.96862696659689*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_0;
    const double basisvalue6 = 2.29128784747792*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_0;
    const double basisvalue7 = 3.24037034920393*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_1;
    const double basisvalue8 = 1.87082869338697*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_1;
    const double basisvalue9 = 1.3228756555323*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_2;
    const double basisvalue10 = 7.93725393319377*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_0;
    const double basisvalue11 = 6.70820393249937*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_0;
    const double basisvalue12 = 5.19615242270663*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_0;
    const double basisvalue13 = 3*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_0;
    const double basisvalue14 = 5.80947501931113*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_1;
    const double basisvalue15 = 4.5*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_1;
    const double basisvalue16 = 2.59807621135332*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_1;
    const double basisvalue17 = 3.67423461417477*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_2;
    const double basisvalue18 = 2.12132034355964*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_2;
    const double basisvalue19 = 1.5*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_3;
    const double basisvalue20 = 11.1242977306435*psitilde_a_4*scalings_y_4*psitilde_bs_4_0*scalings_z_4*psitilde_cs_40_0;
    const double basisvalue21 = 9.81070843517429*psitilde_a_3*scalings_y_3*psitilde_bs_3_1*scalings_z_4*psitilde_cs_31_0;
    const double basisvalue22 = 8.2915619758885*psitilde_a_2*scalings_y_2*psitilde_bs_2_2*scalings_z_4*psitilde_cs_22_0;
    const double basisvalue23 = 6.42261628933256*psitilde_a_1*scalings_y_1*psitilde_bs_1_3*scalings_z_4*psitilde_cs_13_0;
    const double basisvalue24 = 3.70809924354783*psitilde_a_0*scalings_y_0*psitilde_bs_0_4*scalings_z_4*psitilde_cs_04_0;
    const double basisvalue25 = 8.77496438739212*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_1;
    const double basisvalue26 = 7.41619848709566*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_1;
    const double basisvalue27 = 5.74456264653803*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_1;
    const double basisvalue28 = 3.3166247903554*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_1;
    const double basisvalue29 = 6.42261628933256*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_2;
    const double basisvalue30 = 4.9749371855331*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_2;
    const double basisvalue31 = 2.87228132326901*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_2;
    const double basisvalue32 = 4.06201920231798*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_3;
    const double basisvalue33 = 2.34520787991171*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_3;
    const double basisvalue34 = 1.6583123951777*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_4;
    
    // Table(s) of coefficients
    const static double coefficients0[35][35] = \
    {{-0.0137464349807051, -0.0144900147488139, -0.00836581391578937, -0.00591552374999941, 0, 0, 0, 0, 0, 0, -0.00671936840905293, -0.00567890279999946, -0.00439885919382571, -0.00253968253968254, -0.00491807409042211, -0.00380952380952381, -0.00219942959691287, -0.00311046316543895, -0.0017958267458706, -0.00126984126984128, 0.0136980289516341, 0.0120805260192622, 0.010209907964538, 0.00790856070259325, 0.00456600965054471, 0.0108051509532101, 0.00913201930108942, 0.00707363173407281, 0.00408396318581522, 0.00790856070259324, 0.00612594477872282, 0.0035368158670364, 0.00500181296677924, 0.00288779806280616, 0.00204198159290761},
    {-0.0137464349807054, 0.0144900147488139, -0.00836581391578934, -0.00591552374999945, 0, 0, 0, 0, 0, 0, 0.00671936840905293, -0.00567890279999946, 0.00439885919382572, -0.00253968253968254, -0.00491807409042213, 0.00380952380952382, -0.00219942959691286, 0.00311046316543897, -0.0017958267458706, -0.00126984126984127, 0.0136980289516341, -0.0120805260192622, 0.010209907964538, -0.00790856070259325, 0.00456600965054471, -0.0108051509532101, 0.00913201930108941, -0.0070736317340728, 0.00408396318581521, 0.00790856070259325, -0.00612594477872282, 0.0035368158670364, -0.00500181296677924, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807053, 0, 0.0167316278315787, -0.00591552374999946, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0101587301587302, 0, 0, -0.00659828879073857, 0, 0.00359165349174119, -0.00126984126984127, 0, 0, 0, 0, 0.0228300482527235, 0, 0, 0, -0.0163358527432608, 0, 0, 0.0106104476011092, 0, -0.0057755961256123, 0.00204198159290761},
    {-0.0137464349807054, 0, 0, 0.0177465712499983, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0126984126984127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0306297238936141},
    {0.0439885919382572, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0, 0.0406349206349206, 0, 0, 0.00439885919382572, 0, -0.0143666139669648, 0.00761904761904763, 0, 0, 0, 0, 0, 0, 0, 0, 0.0367556686723369, 0, 0, -0.0424417904044368, 0, 0.0303218796594646, -0.0122518895574456},
    {-0.0329914439536931, 0, -0.0200779533978945, -0.0141972569999986, 0, 0, -0.00969857289937744, 0, 0.0712696645099798, -0.050395263067897, 0, 0, 0, 0, 0, 0, 0.0461880215351701, 0, 0.0107749604752236, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0495154221385096, 0, -0.0606437593189292, 0.0306297238936141},
    {0.0439885919382573, 0, 0.0267706045305259, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0, 0.0359165349174119, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0505364660991076, -0.0408396318581522},
    {0.0439885919382573, 0.0231840235981023, -0.0133853022652629, 0.0189296759999982, 0.0433733365754904, -0.0335968420452647, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, -0.0227156111999979, 0.0175954367753029, -0.0101587301587302, 0.00327871606028141, -0.00253968253968255, 0.0014662863979419, -0.0124418526617558, 0.00718330698348238, 0.00761904761904763, 0, 0, 0, 0, 0, 0.0243115896447228, -0.0205470434274512, 0.0159156714016638, -0.00918891716808423, -0.031634242810373, 0.0245037791148913, -0.0141472634681456, 0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, -0.0173880176985766, 0.0100389766989472, -0.0141972569999986, -0.00722888942924838, 0.00559947367421081, -0.00323285763312582, 0.0617213399848368, -0.03563483225499, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, -0.0266666666666667, 0.01539600717839, 0.00933138949631686, -0.00538748023761177, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, -0.0285877423007065, 0.0165051407128365, -0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, 0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0.0311046316543895, -0.017958267458706, 0.0253968253968255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754903, -0.0335968420452647, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, 0, -0.0117302911835353, 0.0101587301587302, -0.0229510124219699, 0.00761904761904761, -0.00146628639794191, 0.0165891368823411, -0.0071833069834824, -0.00761904761904763, 0, 0.0241610520385245, -0.0357346778758831, 0.0355885231616696, -0.0228300482527235, -0.00270128773830253, -0.0114150241263618, 0.0159156714016638, -0.0112308987609918, 0.00395428035129663, 0.00306297238936141, -0.0035368158670364, -0.00375135972508443, 0.00072194951570154, 0.00204198159290761},
    {-0.0329914439536929, -0.0173880176985768, -0.0100389766989472, 0.0141972569999986, -0.00722888942924839, 0.0615942104163185, -0.0614242950293904, -0.00685792666498187, -0.00395942580611001, 0.00559947367421077, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042213, -0.0266666666666667, 0.0175954367753029, 0.00933138949631688, 0.00538748023761179, -0.00761904761904761, 0, 0, 0.0357346778758831, -0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108943, 0, 0.00408396318581521, 0.00131809345043221, 0.00714693557517662, -0.00471575448938186, -0.00250090648338962, -0.00144389903140307, 0.00204198159290761},
    {0.0439885919382572, 0.0231840235981022, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0.0293257279588382, 0.0101587301587302, 0, -0.0101587301587302, -0.0219942959691286, 0.00207364211029264, 0.017958267458706, -0.00761904761904762, 0, 0, 0, 0.0395428035129662, -0.0456600965054471, 0, 0, -0.017684079335182, 0.0142938711503532, 0, 0.00612594477872282, 0, -0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.043988591938257, -0.0231840235981023, -0.0133853022652629, 0.0189296759999983, 0.0433733365754903, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484216, -0.0268774736362117, -0.0227156111999979, -0.0175954367753029, -0.0101587301587302, 0.00327871606028139, 0.00253968253968253, 0.0014662863979419, 0.0124418526617558, 0.00718330698348236, 0.00761904761904761, 0, 0, 0, 0, 0, -0.0243115896447228, -0.0205470434274512, -0.0159156714016638, -0.00918891716808424, -0.031634242810373, -0.0245037791148913, -0.0141472634681456, -0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, 0.0173880176985768, 0.0100389766989471, -0.0141972569999987, -0.00722888942924838, -0.00559947367421082, -0.00323285763312581, -0.0617213399848367, -0.03563483225499, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, 0.0266666666666667, 0.01539600717839, -0.00933138949631689, -0.00538748023761178, -0.019047619047619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, 0.0285877423007065, 0.0165051407128365, 0.0525190361511819, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382572, -0.0231840235981023, -0.0133853022652629, 0.0189296759999981, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, -0.0311046316543896, -0.017958267458706, 0.0253968253968255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484216, -0.0268774736362117, 0, 0.0117302911835352, 0.0101587301587302, -0.0229510124219699, -0.00761904761904762, -0.00146628639794191, -0.0165891368823411, -0.00718330698348239, -0.00761904761904763, 0, -0.0241610520385245, -0.0357346778758831, -0.0355885231616696, -0.0228300482527235, 0.00270128773830254, -0.0114150241263618, -0.0159156714016638, -0.0112308987609918, 0.00395428035129662, -0.00306297238936141, -0.0035368158670364, 0.00375135972508443, 0.000721949515701533, 0.00204198159290761},
    {-0.0329914439536929, 0.0173880176985766, -0.0100389766989472, 0.0141972569999987, -0.00722888942924841, -0.0615942104163186, -0.0614242950293904, 0.00685792666498186, -0.00395942580610998, 0.00559947367421075, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042213, 0.0266666666666667, 0.0175954367753029, -0.00933138949631688, 0.00538748023761179, -0.00761904761904763, 0, 0, 0.0357346778758831, 0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108943, 0, 0.0040839631858152, 0.00131809345043222, -0.00714693557517663, -0.00471575448938187, 0.00250090648338962, -0.00144389903140308, 0.00204198159290761},
    {0.0439885919382573, -0.0231840235981022, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, -0.0293257279588382, 0.0101587301587302, 0, 0.0101587301587301, -0.0219942959691286, -0.00207364211029265, 0.017958267458706, -0.00761904761904761, 0, 0, 0, -0.0395428035129663, -0.0456600965054471, 0, 0, 0.017684079335182, 0.0142938711503532, 0, -0.00612594477872281, 0, 0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.0439885919382571, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484215, 0.0134387368181058, -0.0113578055999989, -0.0205280095711867, -0.0152380952380952, -0.00983614818084424, -0.0177777777777778, -0.0131965775814772, -0.0145154947720485, -0.0107749604752236, -0.00761904761904761, -0.0547921158065365, -0.0241610520385245, -0.00510495398226901, 0.00395428035129663, 0.00456600965054471, -0.0216103019064202, -0.00456600965054471, 0.00353681586703639, 0.00408396318581521, -0.00395428035129661, 0.0030629723893614, 0.0035368158670364, 0.00250090648338961, 0.00288779806280615, 0.00204198159290761},
    {-0.0329914439536931, 0, 0.0200779533978945, 0.0141972569999987, -0.0867466731509807, 0, 0.00969857289937743, 0, 0.00791885161221998, 0.00559947367421076, 0, 0.0340734167999968, 0, -0.0152380952380953, 0.0295084445425327, 0, -0.0131965775814772, 0, -0.0107749604752236, -0.00761904761904762, 0.0821881737098047, 0, -0.010209907964538, 0, 0.00456600965054471, 0, -0.00913201930108944, 0, 0.00408396318581521, -0.00790856070259326, 0, 0.0035368158670364, 0, 0.00288779806280615, 0.00204198159290761},
    {0.0439885919382573, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754903, -0.0335968420452646, 0.0193971457987549, -0.0274317066599274, 0.01583770322444, 0.0111989473484215, -0.0134387368181058, -0.0113578055999989, 0.0205280095711867, -0.0152380952380952, -0.00983614818084423, 0.0177777777777778, -0.0131965775814772, 0.0145154947720485, -0.0107749604752236, -0.00761904761904761, -0.0547921158065365, 0.0241610520385245, -0.005104953982269, -0.00395428035129662, 0.00456600965054471, 0.0216103019064202, -0.0045660096505447, -0.0035368158670364, 0.00408396318581521, -0.00395428035129662, -0.00306297238936141, 0.00353681586703641, -0.00250090648338962, 0.00288779806280615, 0.00204198159290761},
    {0.0439885919382573, 0.139104141588614, -0.080311813591578, -0.0567890279999947, 0.0578311154339872, 0.0335968420452646, -0.0420271492306356, 0.0274317066599275, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, -0.0586514559176763, 0.0406349206349207, 0.039344592723377, 0.00253968253968254, -0.0109971479845643, -0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, -0.053052238005546, 0.0367556686723369, -0.0105447476034577, -0.0245037791148913, 0.0235787724469093, 0.0175063453837273, 0, -0.0122518895574457},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0, 0.0783926314389509, 0.0096985728993774, -0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, 0.0586514559176763, -0.0609523809523809, 0, 0.033015873015873, 0.0241937255660415, -0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, 0.053052238005546, -0.0551335030085053, 0, -0.0326717054865217, 0.0141472634681456, 0.00875317269186366, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382571, 0, 0, 0.170367083999984, 0, -0.0111989473484216, 0.00969857289937744, 0.0822951199797824, 0.0475131096733199, -0.0167984210226324, 0, 0, 0, 0, 0, 0.0533333333333333, -0.0461880215351701, 0.0435464843161454, 0.0251415744421883, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.057175484601413, -0.0495154221385096, -0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382571, -0.139104141588614, -0.0803118135915779, -0.0567890279999947, 0.0578311154339871, -0.0335968420452646, -0.0420271492306356, -0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, 0.0586514559176763, 0.0406349206349206, 0.0393445927233769, -0.00253968253968253, -0.0109971479845643, 0.0601356211984865, 0.0179582674587059, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, 0.053052238005546, 0.0367556686723369, -0.0105447476034577, 0.0245037791148913, 0.0235787724469093, -0.0175063453837273, 0, -0.0122518895574457},
    {0.0439885919382571, 0, 0.160623627183156, -0.0567890279999946, 0, -0.0783926314389509, 0.00969857289937745, 0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, -0.0586514559176763, -0.0609523809523809, 0, -0.033015873015873, 0.0241937255660415, 0.0145154947720485, -0.0610581093596003, 0.0393650793650793, 0, 0, 0, 0, 0, 0, 0, -0.053052238005546, -0.0551335030085053, 0, 0.0326717054865217, 0.0141472634681456, -0.00875317269186368, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0, 0.0111989473484215, 0.00969857289937745, -0.0822951199797824, 0.0475131096733199, -0.0167984210226323, 0, 0, 0, 0, 0, -0.0533333333333333, -0.0461880215351701, -0.0435464843161453, 0.0251415744421883, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0571754846014129, -0.0495154221385096, 0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754903, 0.0447957893936862, 0.0484928644968872, -0.0548634133198549, 0, -0.0167984210226323, 0.0806324209086351, 0.0227156111999979, -0.0058651455917676, -0.0101587301587302, -0.00327871606028142, 0.0304761904761905, 0.0271262983619253, 0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, 0.0729347689341683, 0.0205470434274512, -0.00530522380055458, -0.00918891716808423, 0.031634242810373, -0.00816792637163039, -0.0141472634681456, -0.00875317269186365, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382571, 0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754904, -0.0447957893936862, 0.0484928644968873, 0.0548634133198549, 0, -0.0167984210226323, -0.0806324209086351, 0.0227156111999979, 0.0058651455917676, -0.0101587301587302, -0.00327871606028142, -0.0304761904761905, 0.0271262983619253, -0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, -0.0729347689341683, 0.0205470434274512, 0.00530522380055459, -0.00918891716808424, 0.031634242810373, 0.00816792637163042, -0.0141472634681456, 0.00875317269186367, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0.0144577788584968, 0, -0.00323285763312585, 0, -0.0950262193466398, -0.0167984210226323, 0, 0, 0, 0, -0.0688530372659096, 0, 0.01539600717839, 0, -0.0502831488843767, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0738132332242036, 0, 0.0165051407128365, 0, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754903, -0.0447957893936862, -0.00969857289937743, 0.0548634133198549, 0.03167540644888, 0.0391963157194754, 0.0806324209086351, 0, 0.0527863103259086, 0.0609523809523809, 0.0229510124219699, 0.0101587301587302, 0.0168622935763319, -0.0124418526617558, -0.00718330698348239, -0.013968253968254, 0, 0.0724831561155734, 0.0357346778758831, -0.0118628410538899, -0.0228300482527235, -0.00810386321490759, 0.0114150241263618, -0.00530522380055459, -0.0112308987609918, -0.00395428035129662, -0.00102099079645379, -0.0035368158670364, 0.00125045324169481, 0.000721949515701537, 0.00204198159290762},
    {0.0439885919382571, 0.139104141588614, -0.080311813591578, -0.0567890279999947, -0.0433733365754904, 0.0447957893936862, -0.00969857289937742, -0.0548634133198549, 0.0316754064488799, 0.0391963157194754, -0.0806324209086351, 0, -0.0527863103259086, 0.060952380952381, 0.0229510124219699, -0.0101587301587302, 0.0168622935763319, 0.0124418526617558, -0.00718330698348236, -0.013968253968254, 0, -0.0724831561155734, 0.0357346778758831, 0.0118628410538899, -0.0228300482527236, 0.00810386321490761, 0.0114150241263618, 0.00530522380055459, -0.0112308987609918, -0.00395428035129662, 0.00102099079645379, -0.0035368158670364, -0.0012504532416948, 0.000721949515701528, 0.0020419815929076},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0.0144577788584968, 0, -0.0614242950293905, 0, -0.0633508128977598, 0.0391963157194754, 0, -0.0681468335999936, 0, -0.0914285714285715, 0.00983614818084423, 0, 0.0285925847598672, 0, 0.0143666139669647, -0.0139682539682539, 0, 0, -0.0714693557517662, 0, 0.0456600965054471, 0, 0.0182640386021788, 0, 0.0040839631858152, -0.00263618690086443, 0, -0.00471575448938186, 0, -0.00144389903140306, 0.00204198159290759},
    {0.351908735506058, 0, 0, 0, -0.115662230867974, 0, -0.129314305325032, 0, 0, -0.134387368181059, 0, -0.0908624447999914, 0, 0.0406349206349206, -0.0786891854467539, 0, -0.0879771838765144, 0, 0, 0.0711111111111111, 0, 0, 0, 0, 0, 0, -0.0821881737098047, 0, 0.0367556686723369, 0.0210894952069153, 0, 0.0235787724469093, 0, 0, -0.0122518895574456}};
    
    // Extract relevant coefficients
    const double coeff0_0 = coefficients0[dof][0];
    const double coeff0_1 = coefficients0[dof][1];
    const double coeff0_2 = coefficients0[dof][2];
    const double coeff0_3 = coefficients0[dof][3];
    const double coeff0_4 = coefficients0[dof][4];
    const double coeff0_5 = coefficients0[dof][5];
    const double coeff0_6 = coefficients0[dof][6];
    const double coeff0_7 = coefficients0[dof][7];
    const double coeff0_8 = coefficients0[dof][8];
    const double coeff0_9 = coefficients0[dof][9];
    const double coeff0_10 = coefficients0[dof][10];
    const double coeff0_11 = coefficients0[dof][11];
    const double coeff0_12 = coefficients0[dof][12];
    const double coeff0_13 = coefficients0[dof][13];
    const double coeff0_14 = coefficients0[dof][14];
    const double coeff0_15 = coefficients0[dof][15];
    const double coeff0_16 = coefficients0[dof][16];
    const double coeff0_17 = coefficients0[dof][17];
    const double coeff0_18 = coefficients0[dof][18];
    const double coeff0_19 = coefficients0[dof][19];
    const double coeff0_20 = coefficients0[dof][20];
    const double coeff0_21 = coefficients0[dof][21];
    const double coeff0_22 = coefficients0[dof][22];
    const double coeff0_23 = coefficients0[dof][23];
    const double coeff0_24 = coefficients0[dof][24];
    const double coeff0_25 = coefficients0[dof][25];
    const double coeff0_26 = coefficients0[dof][26];
    const double coeff0_27 = coefficients0[dof][27];
    const double coeff0_28 = coefficients0[dof][28];
    const double coeff0_29 = coefficients0[dof][29];
    const double coeff0_30 = coefficients0[dof][30];
    const double coeff0_31 = coefficients0[dof][31];
    const double coeff0_32 = coefficients0[dof][32];
    const double coeff0_33 = coefficients0[dof][33];
    const double coeff0_34 = coefficients0[dof][34];
    
    // Compute value(s)
    *values = coeff0_0*basisvalue0 + coeff0_1*basisvalue1 + coeff0_2*basisvalue2 + coeff0_3*basisvalue3 + coeff0_4*basisvalue4 + coeff0_5*basisvalue5 + coeff0_6*basisvalue6 + coeff0_7*basisvalue7 + coeff0_8*basisvalue8 + coeff0_9*basisvalue9 + coeff0_10*basisvalue10 + coeff0_11*basisvalue11 + coeff0_12*basisvalue12 + coeff0_13*basisvalue13 + coeff0_14*basisvalue14 + coeff0_15*basisvalue15 + coeff0_16*basisvalue16 + coeff0_17*basisvalue17 + coeff0_18*basisvalue18 + coeff0_19*basisvalue19 + coeff0_20*basisvalue20 + coeff0_21*basisvalue21 + coeff0_22*basisvalue22 + coeff0_23*basisvalue23 + coeff0_24*basisvalue24 + coeff0_25*basisvalue25 + coeff0_26*basisvalue26 + coeff0_27*basisvalue27 + coeff0_28*basisvalue28 + coeff0_29*basisvalue29 + coeff0_30*basisvalue30 + coeff0_31*basisvalue31 + coeff0_32*basisvalue32 + coeff0_33*basisvalue33 + coeff0_34*basisvalue34;
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis() is not yet implemented.");
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_02 = element_coordinates[3][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
    const double J_12 = element_coordinates[3][1] - element_coordinates[0][1];
    const double J_20 = element_coordinates[1][2] - element_coordinates[0][2];
    const double J_21 = element_coordinates[2][2] - element_coordinates[0][2];
    const double J_22 = element_coordinates[3][2] - element_coordinates[0][2];
      
    // Compute sub determinants
    const double d00 = J_11*J_22 - J_12*J_21;
    const double d01 = J_12*J_20 - J_10*J_22;
    const double d02 = J_10*J_21 - J_11*J_20;
    
    const double d10 = J_02*J_21 - J_01*J_22;
    const double d11 = J_00*J_22 - J_02*J_20;
    const double d12 = J_01*J_20 - J_00*J_21;
    
    const double d20 = J_01*J_12 - J_02*J_11;
    const double d21 = J_02*J_10 - J_00*J_12;
    const double d22 = J_00*J_11 - J_01*J_10;
      
    // Compute determinant of Jacobian
    double detJ = J_00*d00 + J_10*d10 + J_20*d20;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = d00*(element_coordinates[0][0] - element_coordinates[2][0] - element_coordinates[3][0]) \
                    + d10*(element_coordinates[0][1] - element_coordinates[2][1] - element_coordinates[3][1]) \
                    + d20*(element_coordinates[0][2] - element_coordinates[2][2] - element_coordinates[3][2]);
    
    const double C1 = d01*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[3][0]) \
                    + d11*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[3][1]) \
                    + d21*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[3][2]);
    
    const double C2 = d02*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[2][0]) \
                    + d12*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[2][1]) \
                    + d22*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[2][2]);
    
    // Get coordinates and map to the UFC reference element
    double x = (C0 + d00*coordinates[0] + d10*coordinates[1] + d20*coordinates[2]) / detJ;
    double y = (C1 + d01*coordinates[0] + d11*coordinates[1] + d21*coordinates[2]) / detJ;
    double z = (C2 + d02*coordinates[0] + d12*coordinates[1] + d22*coordinates[2]) / detJ;
    
    // Map coordinates to the reference cube
    if (std::abs(y + z - 1.0) < 1e-14)
      x = 1.0;
    else
      x = -2.0 * x/(y + z - 1.0) - 1.0;
    if (std::abs(z - 1.0) < 1e-14)
      y = -1.0;
    else
      y = 2.0 * y/(1.0 - z) - 1.0;
    z = 2.0 * z - 1.0;
    
    // Compute number of derivatives
    unsigned int num_derivatives = 1;
    
    for (unsigned int j = 0; j < n; j++)
      num_derivatives *= 3;
    
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      combinations[j] = new unsigned int [n];
      for (unsigned int k = 0; k < n; k++)
        combinations[j][k] = 0;
    }
        
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] ={{d00 / detJ, d10 / detJ, d20 / detJ}, {d01 / detJ, d11 / detJ, d21 / detJ}, {d02 / detJ, d12 / detJ, d22 / detJ}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values
    for (unsigned int j = 0; j < 1*num_derivatives; j++)
      values[j] = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    const double scalings_y_4 = scalings_y_3*(0.5 - 0.5*y);
    const double scalings_z_0 = 1;
    const double scalings_z_1 = scalings_z_0*(0.5 - 0.5*z);
    const double scalings_z_2 = scalings_z_1*(0.5 - 0.5*z);
    const double scalings_z_3 = scalings_z_2*(0.5 - 0.5*z);
    const double scalings_z_4 = scalings_z_3*(0.5 - 0.5*z);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    const double psitilde_a_4 = 1.75*x*psitilde_a_3 - 0.75*psitilde_a_2;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_0_4 = 0.0285714285714286*psitilde_bs_0_3 + 1.8*y*psitilde_bs_0_3 - 0.771428571428571*psitilde_bs_0_2;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_1_3 = 0.285714285714286*psitilde_bs_1_2 + 2*y*psitilde_bs_1_2 - 0.714285714285714*psitilde_bs_1_1;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_2_2 = 1.02040816326531*psitilde_bs_2_1 + 2.57142857142857*y*psitilde_bs_2_1 - 0.551020408163265*psitilde_bs_2_0;
    const double psitilde_bs_3_0 = 1;
    const double psitilde_bs_3_1 = 4.5*y + 3.5;
    const double psitilde_bs_4_0 = 1;
    
    // Compute psitilde_cs
    const double psitilde_cs_00_0 = 1;
    const double psitilde_cs_00_1 = 2*z + 1;
    const double psitilde_cs_00_2 = 0.3125*psitilde_cs_00_1 + 1.875*z*psitilde_cs_00_1 - 0.5625*psitilde_cs_00_0;
    const double psitilde_cs_00_3 = 0.155555555555556*psitilde_cs_00_2 + 1.86666666666667*z*psitilde_cs_00_2 - 0.711111111111111*psitilde_cs_00_1;
    const double psitilde_cs_00_4 = 0.09375*psitilde_cs_00_3 + 1.875*z*psitilde_cs_00_3 - 0.78125*psitilde_cs_00_2;
    const double psitilde_cs_01_0 = 1;
    const double psitilde_cs_01_1 = 3*z + 2;
    const double psitilde_cs_01_2 = 0.777777777777778*psitilde_cs_01_1 + 2.33333333333333*z*psitilde_cs_01_1 - 0.555555555555556*psitilde_cs_01_0;
    const double psitilde_cs_01_3 = 0.428571428571429*psitilde_cs_01_2 + 2.14285714285714*z*psitilde_cs_01_2 - 0.714285714285714*psitilde_cs_01_1;
    const double psitilde_cs_02_0 = 1;
    const double psitilde_cs_02_1 = 4*z + 3;
    const double psitilde_cs_02_2 = 1.265625*psitilde_cs_02_1 + 2.8125*z*psitilde_cs_02_1 - 0.546875*psitilde_cs_02_0;
    const double psitilde_cs_03_0 = 1;
    const double psitilde_cs_03_1 = 5*z + 4;
    const double psitilde_cs_04_0 = 1;
    const double psitilde_cs_10_0 = 1;
    const double psitilde_cs_10_1 = 3*z + 2;
    const double psitilde_cs_10_2 = 0.777777777777778*psitilde_cs_10_1 + 2.33333333333333*z*psitilde_cs_10_1 - 0.555555555555556*psitilde_cs_10_0;
    const double psitilde_cs_10_3 = 0.428571428571429*psitilde_cs_10_2 + 2.14285714285714*z*psitilde_cs_10_2 - 0.714285714285714*psitilde_cs_10_1;
    const double psitilde_cs_11_0 = 1;
    const double psitilde_cs_11_1 = 4*z + 3;
    const double psitilde_cs_11_2 = 1.265625*psitilde_cs_11_1 + 2.8125*z*psitilde_cs_11_1 - 0.546875*psitilde_cs_11_0;
    const double psitilde_cs_12_0 = 1;
    const double psitilde_cs_12_1 = 5*z + 4;
    const double psitilde_cs_13_0 = 1;
    const double psitilde_cs_20_0 = 1;
    const double psitilde_cs_20_1 = 4*z + 3;
    const double psitilde_cs_20_2 = 1.265625*psitilde_cs_20_1 + 2.8125*z*psitilde_cs_20_1 - 0.546875*psitilde_cs_20_0;
    const double psitilde_cs_21_0 = 1;
    const double psitilde_cs_21_1 = 5*z + 4;
    const double psitilde_cs_22_0 = 1;
    const double psitilde_cs_30_0 = 1;
    const double psitilde_cs_30_1 = 5*z + 4;
    const double psitilde_cs_31_0 = 1;
    const double psitilde_cs_40_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.866025403784439*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_0;
    const double basisvalue1 = 2.73861278752583*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_0;
    const double basisvalue2 = 1.58113883008419*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_0;
    const double basisvalue3 = 1.11803398874989*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_1;
    const double basisvalue4 = 5.1234753829798*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_0;
    const double basisvalue5 = 3.96862696659689*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_0;
    const double basisvalue6 = 2.29128784747792*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_0;
    const double basisvalue7 = 3.24037034920393*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_1;
    const double basisvalue8 = 1.87082869338697*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_1;
    const double basisvalue9 = 1.3228756555323*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_2;
    const double basisvalue10 = 7.93725393319377*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_0;
    const double basisvalue11 = 6.70820393249937*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_0;
    const double basisvalue12 = 5.19615242270663*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_0;
    const double basisvalue13 = 3*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_0;
    const double basisvalue14 = 5.80947501931113*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_1;
    const double basisvalue15 = 4.5*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_1;
    const double basisvalue16 = 2.59807621135332*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_1;
    const double basisvalue17 = 3.67423461417477*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_2;
    const double basisvalue18 = 2.12132034355964*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_2;
    const double basisvalue19 = 1.5*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_3;
    const double basisvalue20 = 11.1242977306435*psitilde_a_4*scalings_y_4*psitilde_bs_4_0*scalings_z_4*psitilde_cs_40_0;
    const double basisvalue21 = 9.81070843517429*psitilde_a_3*scalings_y_3*psitilde_bs_3_1*scalings_z_4*psitilde_cs_31_0;
    const double basisvalue22 = 8.2915619758885*psitilde_a_2*scalings_y_2*psitilde_bs_2_2*scalings_z_4*psitilde_cs_22_0;
    const double basisvalue23 = 6.42261628933256*psitilde_a_1*scalings_y_1*psitilde_bs_1_3*scalings_z_4*psitilde_cs_13_0;
    const double basisvalue24 = 3.70809924354783*psitilde_a_0*scalings_y_0*psitilde_bs_0_4*scalings_z_4*psitilde_cs_04_0;
    const double basisvalue25 = 8.77496438739212*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_1;
    const double basisvalue26 = 7.41619848709566*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_1;
    const double basisvalue27 = 5.74456264653803*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_1;
    const double basisvalue28 = 3.3166247903554*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_1;
    const double basisvalue29 = 6.42261628933256*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_2;
    const double basisvalue30 = 4.9749371855331*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_2;
    const double basisvalue31 = 2.87228132326901*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_2;
    const double basisvalue32 = 4.06201920231798*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_3;
    const double basisvalue33 = 2.34520787991171*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_3;
    const double basisvalue34 = 1.6583123951777*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_4;
    
    // Table(s) of coefficients
    const static double coefficients0[35][35] = \
    {{-0.0137464349807051, -0.0144900147488139, -0.00836581391578937, -0.00591552374999941, 0, 0, 0, 0, 0, 0, -0.00671936840905293, -0.00567890279999946, -0.00439885919382571, -0.00253968253968254, -0.00491807409042211, -0.00380952380952381, -0.00219942959691287, -0.00311046316543895, -0.0017958267458706, -0.00126984126984128, 0.0136980289516341, 0.0120805260192622, 0.010209907964538, 0.00790856070259325, 0.00456600965054471, 0.0108051509532101, 0.00913201930108942, 0.00707363173407281, 0.00408396318581522, 0.00790856070259324, 0.00612594477872282, 0.0035368158670364, 0.00500181296677924, 0.00288779806280616, 0.00204198159290761},
    {-0.0137464349807054, 0.0144900147488139, -0.00836581391578934, -0.00591552374999945, 0, 0, 0, 0, 0, 0, 0.00671936840905293, -0.00567890279999946, 0.00439885919382572, -0.00253968253968254, -0.00491807409042213, 0.00380952380952382, -0.00219942959691286, 0.00311046316543897, -0.0017958267458706, -0.00126984126984127, 0.0136980289516341, -0.0120805260192622, 0.010209907964538, -0.00790856070259325, 0.00456600965054471, -0.0108051509532101, 0.00913201930108941, -0.0070736317340728, 0.00408396318581521, 0.00790856070259325, -0.00612594477872282, 0.0035368158670364, -0.00500181296677924, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807053, 0, 0.0167316278315787, -0.00591552374999946, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0101587301587302, 0, 0, -0.00659828879073857, 0, 0.00359165349174119, -0.00126984126984127, 0, 0, 0, 0, 0.0228300482527235, 0, 0, 0, -0.0163358527432608, 0, 0, 0.0106104476011092, 0, -0.0057755961256123, 0.00204198159290761},
    {-0.0137464349807054, 0, 0, 0.0177465712499983, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0126984126984127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0306297238936141},
    {0.0439885919382572, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0, 0.0406349206349206, 0, 0, 0.00439885919382572, 0, -0.0143666139669648, 0.00761904761904763, 0, 0, 0, 0, 0, 0, 0, 0, 0.0367556686723369, 0, 0, -0.0424417904044368, 0, 0.0303218796594646, -0.0122518895574456},
    {-0.0329914439536931, 0, -0.0200779533978945, -0.0141972569999986, 0, 0, -0.00969857289937744, 0, 0.0712696645099798, -0.050395263067897, 0, 0, 0, 0, 0, 0, 0.0461880215351701, 0, 0.0107749604752236, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0495154221385096, 0, -0.0606437593189292, 0.0306297238936141},
    {0.0439885919382573, 0, 0.0267706045305259, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0, 0.0359165349174119, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0505364660991076, -0.0408396318581522},
    {0.0439885919382573, 0.0231840235981023, -0.0133853022652629, 0.0189296759999982, 0.0433733365754904, -0.0335968420452647, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, -0.0227156111999979, 0.0175954367753029, -0.0101587301587302, 0.00327871606028141, -0.00253968253968255, 0.0014662863979419, -0.0124418526617558, 0.00718330698348238, 0.00761904761904763, 0, 0, 0, 0, 0, 0.0243115896447228, -0.0205470434274512, 0.0159156714016638, -0.00918891716808423, -0.031634242810373, 0.0245037791148913, -0.0141472634681456, 0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, -0.0173880176985766, 0.0100389766989472, -0.0141972569999986, -0.00722888942924838, 0.00559947367421081, -0.00323285763312582, 0.0617213399848368, -0.03563483225499, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, -0.0266666666666667, 0.01539600717839, 0.00933138949631686, -0.00538748023761177, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, -0.0285877423007065, 0.0165051407128365, -0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, 0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0.0311046316543895, -0.017958267458706, 0.0253968253968255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754903, -0.0335968420452647, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, 0, -0.0117302911835353, 0.0101587301587302, -0.0229510124219699, 0.00761904761904761, -0.00146628639794191, 0.0165891368823411, -0.0071833069834824, -0.00761904761904763, 0, 0.0241610520385245, -0.0357346778758831, 0.0355885231616696, -0.0228300482527235, -0.00270128773830253, -0.0114150241263618, 0.0159156714016638, -0.0112308987609918, 0.00395428035129663, 0.00306297238936141, -0.0035368158670364, -0.00375135972508443, 0.00072194951570154, 0.00204198159290761},
    {-0.0329914439536929, -0.0173880176985768, -0.0100389766989472, 0.0141972569999986, -0.00722888942924839, 0.0615942104163185, -0.0614242950293904, -0.00685792666498187, -0.00395942580611001, 0.00559947367421077, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042213, -0.0266666666666667, 0.0175954367753029, 0.00933138949631688, 0.00538748023761179, -0.00761904761904761, 0, 0, 0.0357346778758831, -0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108943, 0, 0.00408396318581521, 0.00131809345043221, 0.00714693557517662, -0.00471575448938186, -0.00250090648338962, -0.00144389903140307, 0.00204198159290761},
    {0.0439885919382572, 0.0231840235981022, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0.0293257279588382, 0.0101587301587302, 0, -0.0101587301587302, -0.0219942959691286, 0.00207364211029264, 0.017958267458706, -0.00761904761904762, 0, 0, 0, 0.0395428035129662, -0.0456600965054471, 0, 0, -0.017684079335182, 0.0142938711503532, 0, 0.00612594477872282, 0, -0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.043988591938257, -0.0231840235981023, -0.0133853022652629, 0.0189296759999983, 0.0433733365754903, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484216, -0.0268774736362117, -0.0227156111999979, -0.0175954367753029, -0.0101587301587302, 0.00327871606028139, 0.00253968253968253, 0.0014662863979419, 0.0124418526617558, 0.00718330698348236, 0.00761904761904761, 0, 0, 0, 0, 0, -0.0243115896447228, -0.0205470434274512, -0.0159156714016638, -0.00918891716808424, -0.031634242810373, -0.0245037791148913, -0.0141472634681456, -0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, 0.0173880176985768, 0.0100389766989471, -0.0141972569999987, -0.00722888942924838, -0.00559947367421082, -0.00323285763312581, -0.0617213399848367, -0.03563483225499, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, 0.0266666666666667, 0.01539600717839, -0.00933138949631689, -0.00538748023761178, -0.019047619047619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, 0.0285877423007065, 0.0165051407128365, 0.0525190361511819, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382572, -0.0231840235981023, -0.0133853022652629, 0.0189296759999981, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, -0.0311046316543896, -0.017958267458706, 0.0253968253968255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484216, -0.0268774736362117, 0, 0.0117302911835352, 0.0101587301587302, -0.0229510124219699, -0.00761904761904762, -0.00146628639794191, -0.0165891368823411, -0.00718330698348239, -0.00761904761904763, 0, -0.0241610520385245, -0.0357346778758831, -0.0355885231616696, -0.0228300482527235, 0.00270128773830254, -0.0114150241263618, -0.0159156714016638, -0.0112308987609918, 0.00395428035129662, -0.00306297238936141, -0.0035368158670364, 0.00375135972508443, 0.000721949515701533, 0.00204198159290761},
    {-0.0329914439536929, 0.0173880176985766, -0.0100389766989472, 0.0141972569999987, -0.00722888942924841, -0.0615942104163186, -0.0614242950293904, 0.00685792666498186, -0.00395942580610998, 0.00559947367421075, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042213, 0.0266666666666667, 0.0175954367753029, -0.00933138949631688, 0.00538748023761179, -0.00761904761904763, 0, 0, 0.0357346778758831, 0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108943, 0, 0.0040839631858152, 0.00131809345043222, -0.00714693557517663, -0.00471575448938187, 0.00250090648338962, -0.00144389903140308, 0.00204198159290761},
    {0.0439885919382573, -0.0231840235981022, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, -0.0293257279588382, 0.0101587301587302, 0, 0.0101587301587301, -0.0219942959691286, -0.00207364211029265, 0.017958267458706, -0.00761904761904761, 0, 0, 0, -0.0395428035129663, -0.0456600965054471, 0, 0, 0.017684079335182, 0.0142938711503532, 0, -0.00612594477872281, 0, 0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.0439885919382571, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484215, 0.0134387368181058, -0.0113578055999989, -0.0205280095711867, -0.0152380952380952, -0.00983614818084424, -0.0177777777777778, -0.0131965775814772, -0.0145154947720485, -0.0107749604752236, -0.00761904761904761, -0.0547921158065365, -0.0241610520385245, -0.00510495398226901, 0.00395428035129663, 0.00456600965054471, -0.0216103019064202, -0.00456600965054471, 0.00353681586703639, 0.00408396318581521, -0.00395428035129661, 0.0030629723893614, 0.0035368158670364, 0.00250090648338961, 0.00288779806280615, 0.00204198159290761},
    {-0.0329914439536931, 0, 0.0200779533978945, 0.0141972569999987, -0.0867466731509807, 0, 0.00969857289937743, 0, 0.00791885161221998, 0.00559947367421076, 0, 0.0340734167999968, 0, -0.0152380952380953, 0.0295084445425327, 0, -0.0131965775814772, 0, -0.0107749604752236, -0.00761904761904762, 0.0821881737098047, 0, -0.010209907964538, 0, 0.00456600965054471, 0, -0.00913201930108944, 0, 0.00408396318581521, -0.00790856070259326, 0, 0.0035368158670364, 0, 0.00288779806280615, 0.00204198159290761},
    {0.0439885919382573, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754903, -0.0335968420452646, 0.0193971457987549, -0.0274317066599274, 0.01583770322444, 0.0111989473484215, -0.0134387368181058, -0.0113578055999989, 0.0205280095711867, -0.0152380952380952, -0.00983614818084423, 0.0177777777777778, -0.0131965775814772, 0.0145154947720485, -0.0107749604752236, -0.00761904761904761, -0.0547921158065365, 0.0241610520385245, -0.005104953982269, -0.00395428035129662, 0.00456600965054471, 0.0216103019064202, -0.0045660096505447, -0.0035368158670364, 0.00408396318581521, -0.00395428035129662, -0.00306297238936141, 0.00353681586703641, -0.00250090648338962, 0.00288779806280615, 0.00204198159290761},
    {0.0439885919382573, 0.139104141588614, -0.080311813591578, -0.0567890279999947, 0.0578311154339872, 0.0335968420452646, -0.0420271492306356, 0.0274317066599275, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, -0.0586514559176763, 0.0406349206349207, 0.039344592723377, 0.00253968253968254, -0.0109971479845643, -0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, -0.053052238005546, 0.0367556686723369, -0.0105447476034577, -0.0245037791148913, 0.0235787724469093, 0.0175063453837273, 0, -0.0122518895574457},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0, 0.0783926314389509, 0.0096985728993774, -0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, 0.0586514559176763, -0.0609523809523809, 0, 0.033015873015873, 0.0241937255660415, -0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, 0.053052238005546, -0.0551335030085053, 0, -0.0326717054865217, 0.0141472634681456, 0.00875317269186366, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382571, 0, 0, 0.170367083999984, 0, -0.0111989473484216, 0.00969857289937744, 0.0822951199797824, 0.0475131096733199, -0.0167984210226324, 0, 0, 0, 0, 0, 0.0533333333333333, -0.0461880215351701, 0.0435464843161454, 0.0251415744421883, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.057175484601413, -0.0495154221385096, -0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382571, -0.139104141588614, -0.0803118135915779, -0.0567890279999947, 0.0578311154339871, -0.0335968420452646, -0.0420271492306356, -0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, 0.0586514559176763, 0.0406349206349206, 0.0393445927233769, -0.00253968253968253, -0.0109971479845643, 0.0601356211984865, 0.0179582674587059, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, 0.053052238005546, 0.0367556686723369, -0.0105447476034577, 0.0245037791148913, 0.0235787724469093, -0.0175063453837273, 0, -0.0122518895574457},
    {0.0439885919382571, 0, 0.160623627183156, -0.0567890279999946, 0, -0.0783926314389509, 0.00969857289937745, 0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, -0.0586514559176763, -0.0609523809523809, 0, -0.033015873015873, 0.0241937255660415, 0.0145154947720485, -0.0610581093596003, 0.0393650793650793, 0, 0, 0, 0, 0, 0, 0, -0.053052238005546, -0.0551335030085053, 0, 0.0326717054865217, 0.0141472634681456, -0.00875317269186368, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0, 0.0111989473484215, 0.00969857289937745, -0.0822951199797824, 0.0475131096733199, -0.0167984210226323, 0, 0, 0, 0, 0, -0.0533333333333333, -0.0461880215351701, -0.0435464843161453, 0.0251415744421883, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0571754846014129, -0.0495154221385096, 0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754903, 0.0447957893936862, 0.0484928644968872, -0.0548634133198549, 0, -0.0167984210226323, 0.0806324209086351, 0.0227156111999979, -0.0058651455917676, -0.0101587301587302, -0.00327871606028142, 0.0304761904761905, 0.0271262983619253, 0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, 0.0729347689341683, 0.0205470434274512, -0.00530522380055458, -0.00918891716808423, 0.031634242810373, -0.00816792637163039, -0.0141472634681456, -0.00875317269186365, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382571, 0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754904, -0.0447957893936862, 0.0484928644968873, 0.0548634133198549, 0, -0.0167984210226323, -0.0806324209086351, 0.0227156111999979, 0.0058651455917676, -0.0101587301587302, -0.00327871606028142, -0.0304761904761905, 0.0271262983619253, -0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, -0.0729347689341683, 0.0205470434274512, 0.00530522380055459, -0.00918891716808424, 0.031634242810373, 0.00816792637163042, -0.0141472634681456, 0.00875317269186367, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0.0144577788584968, 0, -0.00323285763312585, 0, -0.0950262193466398, -0.0167984210226323, 0, 0, 0, 0, -0.0688530372659096, 0, 0.01539600717839, 0, -0.0502831488843767, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0738132332242036, 0, 0.0165051407128365, 0, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754903, -0.0447957893936862, -0.00969857289937743, 0.0548634133198549, 0.03167540644888, 0.0391963157194754, 0.0806324209086351, 0, 0.0527863103259086, 0.0609523809523809, 0.0229510124219699, 0.0101587301587302, 0.0168622935763319, -0.0124418526617558, -0.00718330698348239, -0.013968253968254, 0, 0.0724831561155734, 0.0357346778758831, -0.0118628410538899, -0.0228300482527235, -0.00810386321490759, 0.0114150241263618, -0.00530522380055459, -0.0112308987609918, -0.00395428035129662, -0.00102099079645379, -0.0035368158670364, 0.00125045324169481, 0.000721949515701537, 0.00204198159290762},
    {0.0439885919382571, 0.139104141588614, -0.080311813591578, -0.0567890279999947, -0.0433733365754904, 0.0447957893936862, -0.00969857289937742, -0.0548634133198549, 0.0316754064488799, 0.0391963157194754, -0.0806324209086351, 0, -0.0527863103259086, 0.060952380952381, 0.0229510124219699, -0.0101587301587302, 0.0168622935763319, 0.0124418526617558, -0.00718330698348236, -0.013968253968254, 0, -0.0724831561155734, 0.0357346778758831, 0.0118628410538899, -0.0228300482527236, 0.00810386321490761, 0.0114150241263618, 0.00530522380055459, -0.0112308987609918, -0.00395428035129662, 0.00102099079645379, -0.0035368158670364, -0.0012504532416948, 0.000721949515701528, 0.0020419815929076},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0.0144577788584968, 0, -0.0614242950293905, 0, -0.0633508128977598, 0.0391963157194754, 0, -0.0681468335999936, 0, -0.0914285714285715, 0.00983614818084423, 0, 0.0285925847598672, 0, 0.0143666139669647, -0.0139682539682539, 0, 0, -0.0714693557517662, 0, 0.0456600965054471, 0, 0.0182640386021788, 0, 0.0040839631858152, -0.00263618690086443, 0, -0.00471575448938186, 0, -0.00144389903140306, 0.00204198159290759},
    {0.351908735506058, 0, 0, 0, -0.115662230867974, 0, -0.129314305325032, 0, 0, -0.134387368181059, 0, -0.0908624447999914, 0, 0.0406349206349206, -0.0786891854467539, 0, -0.0879771838765144, 0, 0, 0.0711111111111111, 0, 0, 0, 0, 0, 0, -0.0821881737098047, 0, 0.0367556686723369, 0.0210894952069153, 0, 0.0235787724469093, 0, 0, -0.0122518895574456}};
    
    // Interesting (new) part
    // Tables of derivatives of the polynomial base (transpose)
    const static double dmats0[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {6.32455532033677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 11.2249721603218, 0, 0, 0, 1.70793006049707e-14, 0, 0, 1.16063842564573e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.58257569495585, 0, 8.36660026534076, -1.18321595661992, 0, 0, 1.04642314135461e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.74165738677394, 0, 0, 8.69482604771366, 0, 0, 0, -1.66625972279159e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.49909083394701, 0, -3.34664010613631, -2.36643191323985, 15.4919333848297, 0, 0.692820323027549, 0, 0.56568542494924, 0.400000000000009, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 4.89897948556635, 0, 0, 0, 14.1985914794391, 0, -0.828078671210828, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.60000000000001, 0, 8.76356092008266, -1.54919333848296, 0, 0, 9.52470471983254, 0, -1.48131215963609, 0.261861468283193, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 4.24264068711929, 0, 0, 0, 0, 0, 14.3427433120127, 2.84156378982381e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.11769145362398, 0, 3.16227766016838, 4.91934955049954, 0, 0, 0, -1.2538531175753e-14, 10.690449676497, -2.41897262725905, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.54558441227157, 0, 0, 7.66811580507232, 0, 0, 0, 0, 0, 10.3691851174526, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 11.6057691494799, 0, 0, 0, -4.20458932936041, 0, -3.43303281162798, 0, 0, 19.6214168703486, 0, 0.611677741841197, 0, 0, 0.529728463363978, 0, 0.432521479156785, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.53137212479103, 0, 3.54562104171167, -2.50713268211203, 4.78713553878169, 0, -5.56626745075493, 0, -1.04880884817015, 0.741619848709563, 0, 18.8034951158403, 0, 1.68183573174416, -0.603122387046455, 0, 0.701283781217662, 0, 0.132137494528683, -0.0934353184302337, 0, 0, 0, 0, -2.04851899834062e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.12802291379194e-14, 2.59512887494071, 0, 0, 0, 10.0285307284481, 1.48509074345102e-14, -0.767649473578742, 0, 0, 0, 0, 16.4130361329658, 0, 0, -1.26347611061158, 0, 0.0967147429123335, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.96647939483827, 0, 8.12403840463597, -1.64130361329658, 0, 0, 11.7728501222091, 0, -2.40312296813959, 0.485504156227609, 0, 0, 0, 10.2761860629321, 0, 0, -1.48323969741914, 0, 0.30276503540975, -0.0611677741841184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.05298244095217, 0, -1.58564993434419, 4.4848952846511, 4.28174419288837, 0, 0.191485421551264, 0, -3.75233260785875, -4.31161222746203, 0, 0, 0, 0, 18.8807171866294, 0, 0.844371341865038, 0, 1.18187368057056, 1.04463861754668, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 2.32115382989598, 0, 0, 0, 3.92428337406973, 0, 5.49285249860476, 1.21484853427001e-14, 0, 0, 0, 0, 0, 0, 17.3044631365565, 0, -1.73008591662714, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.65329983228433, 0, 4.15220619990513, 2.93605316083776, 0, 0, 2.63248931621764, 0, 9.82591326180785, -2.8226127713774, 0, 0, 0, 0, 0, 0, 11.6081867662439, 0, -3.09487177319466, 0.683876505540249, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 2.01017818278148, 0, 0, 0, 0, 0, 8.91928088068602, 1.76356325376492e-14, 0, 0, 0, 0, 0, 0, 0, 0, 16.8558564884489, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.29782505861521, 0, 1.49829835452879, 5.50917601898535, 0, 0, 0, 0, 6.64803945320938, 4.13676892548485, 0, 0, 0, 0, 0, 0, 0, 0, 12.5636136423842, -3.55352656109507, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87616630392938, 0, 0, 6.2283092998577, 0, 0, 0, 0, 0, 11.0541524195338, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11.6057691494799, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    const static double dmats1[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.16227766016838, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.47722557505166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.95803989154981, 5.61248608016091, -1.08012344973464, -0.763762615825977, 0, 1.12766252988532e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.29128784747793, 7.24568837309472, 4.18330013267038, -0.591607978309962, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-2.64575131106459, 0, 9.66091783079296, 0.683130051063976, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87082869338697, 0, 0, 4.34741302385683, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.24037034920392, 0, 0, 7.52994023880667, 0, 0, 0, -1.40420976242894e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.74954541697351, 5.79655069847578, -1.67332005306815, -1.18321595661993, 7.74596669241484, -1.2, 0.346410161513776, -0.979795897113278, 0.282842712474625, 0.200000000000005, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.32379000772444, 2.44948974278317, 2.82842712474619, -0.999999999999997, 9.16515138991168, 7.09929573971955, -2.04939015319192, -0.414039335605417, -0.478091443733761, 0.169030850945703, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.80000000000001, -5.69209978830309, 4.38178046004133, -0.77459666924148, 0, 10.998181667894, 4.76235235991628, 0.962140470884725, -0.740656079818049, 0.130930734141596, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.19615242270664, 0, -3.16227766016837, -2.23606797749979, 0, 0, 13.7477270848675, 0, 0.534522483824846, 0.377964473009225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.01246117974981, 2.12132034355964, -0.408248290463859, 3.17542648054293, 0, 0, 0, 7.17137165600634, -1.3801311186847, -1.56144011671765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.55884572681199, 2.73861278752583, 1.5811388300842, 2.45967477524977, 0, 0, 0, 9.2582009977255, 5.3452248382485, -1.20948631362952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-1.79999999999999, 0, 3.65148371670111, -2.84018778721876, 0, 0, 0, 0, 12.3442679969673, 1.39659449751036, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.27279220613578, 0, 0, 3.83405790253616, 0, 0, 0, 0, 0, 5.18459255872629, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.20454076850485, 0, 0, 6.64078308635359, 0, 0, 0, 0, 0, 8.97997772825746, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.56904651573303, 5.80288457473998, -2.01017818278148, -1.42141062443803, 8.14215222512715, -2.10229466468021, 0.728256234341421, -1.71651640581399, 0.594618725379067, 0.420458932936047, 9.81070843517429, -1.18450885369836, 0.3058388709206, -0.105945692672795, -1.02581475831036, 0.264864231681991, -0.0917516612761804, 0.216260739578394, -0.0749149177264392, -0.0529728463363962, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.26568606239552, 3.07059789431495, 1.77281052085584, -1.25356634105601, 2.39356776939085, 6.30376871403133, -2.78313372537746, -0.908295106229249, -0.524404424085077, 0.370809924354783, 11.1242977306435, 9.40174755792013, -2.42752078113806, 0.840917865872083, -0.301561193523227, -0.794200206656967, 0.350641890608831, 0.114434427054266, 0.0660687472643429, -0.0467176592151151, 0, 0, 0, 1.18413955033316e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.91485421551268, 1.29756443747035, 3.74574588632197, -1.05945692672795, -8.09173593712687, 5.01426536422407, 1.80936716113936, -0.383824736789366, -1.1080065755349, 0.313391585264, 0, 12.7134831207354, 8.2065180664829, -2.84282124887606, 1.01946290306866, -0.631738055305791, -0.227958835180081, 0.0483573714561658, 0.139595707137601, -0.0394836284566112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741914, 7.03562363973515, 4.06201920231798, -0.820651806648292, 0, -6.79705818718658, 5.88642506110457, -2.08116553882674, -1.2015614840698, 0.242752078113806, 0, 0, 14.8323969741913, 5.13809303146605, 0, 0.856348838577678, -0.741619848709567, 0.262202212042541, 0.151382517704874, -0.0305838870920586, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-3.42539535431071, 0, 9.38083151964686, 1.89521416591737, 0, 1.48502651407619e-14, -3.39852909359332, 0, -2.77488738510233, -0.560611910581396, 0, 0, 0, 17.7988763690296, 0, 0, 0.42817441928884, 0, 0.349602949390053, 0.0706304617818605, 0, 0, 0, 0, -1.76908227133537e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.02649122047609, 2.74642624930238, -0.792824967172093, 2.24244764232555, 2.14087209644419, -0.331662479035538, 0.095742710775634, 6.49923072370876, -1.87616630392936, -2.15580611373101, 0, 0, 0, 0, 9.44035859331469, -1.46249406456536, 0.42218567093252, -2.04706526287664, 0.59093684028528, 0.522319308773337, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.71269767715535, 1.16057691494799, 1.34011878852098, 1.89521416591738, 2.53311402559511, 1.96214168703486, -0.566421515598881, 2.74642624930237, 3.17129986868837, -1.82198870938951, 0, 0, 0, 0, 11.1699829238239, 8.65223156827827, -2.49768411251822, -0.865042958313569, -0.998865569685858, 0.441440386136648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.32664991614216, -2.69693703815182, 2.07610309995257, 1.46802658041888, 0, 3.03973683071413, 1.31624465810882, -6.382117875081, 4.91295663090391, -1.4113063856887, 0, 0, 0, 0, 0, 13.4039795085887, 5.80409338312195, 2.01017818278147, -1.54743588659732, 0.341938252770131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.82970843102535, 0, -1.49829835452879, 4.23782770691181, 0, 0, 3.79967103839267, 0, -3.54562104171168, -4.07409060843206, 0, 0, 0, 0, 0, 0, 16.7549743857359, 0, 1.11676565710082, 0.987090711415304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741913, 1.00508909139074, -0.193429485824663, 3.55615782880925, 0, 0, 0, 4.459640440343, -0.858258202906983, 2.67027285925187, 0, 0, 0, 0, 0, 0, 0, 8.42792824422443, -1.62195554683794, -2.29379153190448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.14891252930761, 1.29756443747036, 0.749149177264399, 2.75458800949267, 0, 0, 0, 5.75737105184053, 3.3240197266047, 2.06838446274242, 0, 0, 0, 0, 0, 0, 0, 10.8804085776374, 6.2818068211921, -1.77676328054753, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.02006749648391e-14, 0, 0},
    {-1.32664991614216, 0, 1.73008591662714, -3.18072425757422, 0, 0, 0, 1.15266449376351e-14, 7.67649473578738, -2.38836465270397, 0, 0, 0, 0, 0, 0, 0, 0, 14.5072114368499, 2.05162951662072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.938083151964688, 0, 0, 3.11415464992885, 0, 0, 0, 0, 0, 5.52707620976692, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.80288457473997, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.6248076809272, 0, 0, 5.39387407630363, 0, 0, 0, 0, 0, 9.57317681262152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10.0508909139073, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    const static double dmats2[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.16227766016838, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.82574185835056, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.16397779494323, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.95803989154981, 5.61248608016091, -1.08012344973464, -0.763762615825976, 0, 1.39411605579536e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.29128784747792, 1.44913767461894, 4.18330013267038, -0.591607978309961, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.3228756555323, 0, 3.86436713231718, -0.341565025531985, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87082869338697, 7.09929573971954, 0, 4.34741302385683, 0, 1.2137796469483e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.08012344973464, 0, 7.09929573971954, 2.50998007960223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-3.81881307912987, 0, 0, 8.87411967464942, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.74954541697351, 5.79655069847578, -1.67332005306815, -1.18321595661993, 7.74596669241484, -1.19999999999999, 0.346410161513777, -0.97979589711328, 0.282842712474624, 0.200000000000005, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.32379000772445, 2.44948974278317, 2.82842712474619, -0.999999999999998, 1.30930734141596, 7.09929573971955, -2.04939015319192, -0.414039335605417, -0.478091443733761, 0.169030850945707, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.80000000000001, 0.632455532033672, 4.38178046004133, -0.774596669241482, 0, 3.14233761939829, 4.76235235991627, -0.106904496764972, -0.740656079818045, 0.130930734141597, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.03923048454133, 0, 3.16227766016838, -0.447213595499956, 0, 0, 5.8918830363718, 0, -0.534522483824849, 0.0755928946018436, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.0124611797498, 2.12132034355964, -0.408248290463861, 3.17542648054293, 9.07114735222144, 0, 0, 7.17137165600635, -1.3801311186847, -1.56144011671765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.558845726812, 0.547722557505166, 1.5811388300842, 2.45967477524977, 0, 9.07114735222146, 0, 1.85164019954509, 5.34522483824849, -1.20948631362952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.900000000000005, 0, 1.46059348668045, 1.42009389360939, 0, 0, 9.07114735222146, 0, 4.93770719878694, -0.698297248755174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.27279220613578, -6.26099033699941, 0, 3.83405790253616, 0, -1.33471233241901e-14, 0, 10.5830052442584, 1.61529151756054e-14, 5.18459255872629, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.734846922834955, 0, -6.26099033699941, 2.21359436211787, 0, 0, 0, 0, 10.5830052442584, 2.99332590941916, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.7157676649773, 0, 0, -4.69574275274955, 0, 0, 0, 0, 0, 12.69960629311, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.56904651573303, 5.80288457473998, -2.01017818278148, -1.42141062443803, 8.14215222512715, -2.10229466468021, 0.72825623434142, -1.71651640581399, 0.594618725379067, 0.420458932936046, 9.81070843517429, -1.18450885369836, 0.305838870920599, -0.105945692672794, -1.02581475831036, 0.264864231681991, -0.0917516612761805, 0.216260739578394, -0.0749149177264392, -0.052972846336396, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.26568606239552, 3.07059789431495, 1.77281052085584, -1.25356634105602, 2.39356776939084, 6.30376871403133, -2.78313372537746, -0.908295106229248, -0.524404424085073, 0.370809924354783, 1.23603308118261, 9.40174755792013, -2.42752078113806, 0.840917865872083, -0.301561193523226, -0.794200206656968, 0.350641890608831, 0.114434427054266, 0.0660687472643423, -0.0467176592151165, 0, 0, 0, 1.09746923696279e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.91485421551268, 1.29756443747035, 3.74574588632197, -1.05945692672795, 0.404586796856347, 5.01426536422407, 1.80936716113937, -0.383824736789372, -1.1080065755349, 0.313391585264004, 0, 2.82521847127454, 8.2065180664829, -2.84282124887606, -0.0509731451534344, -0.631738055305788, -0.227958835180082, 0.0483573714561684, 0.139595707137601, -0.039483628456609, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741914, 0.335029697130247, 4.06201920231798, -0.820651806648289, 0, 1.69926454679664, 5.88642506110457, -0.099103120896514, -1.2015614840698, 0.242752078113805, 0, 0, 4.94413232473044, 5.13809303146605, 0, -0.214087209644418, -0.741619848709568, 0.0124858196210747, 0.151382517704876, -0.0305838870920584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.856348838577678, 0, 2.68023757704196, -0.473803541479345, 0, 0, 5.09779364038992, 0, -0.792824967172097, 0.140152977645345, 0, 0, 0, 7.91061171956871, 0, 0, -0.642261628933257, 0, 0.0998865569685871, -0.0176576154454654, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.02649122047609, 2.74642624930238, -0.792824967172095, 2.24244764232555, 2.14087209644419, -0.331662479035546, 0.0957427107756332, 6.49923072370876, -1.87616630392937, -2.15580611373101, 11.0554159678513, 0, 0, 0, 9.44035859331468, -1.46249406456535, 0.42218567093252, -2.04706526287664, 0.59093684028528, 0.522319308773341, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.71269767715534, 1.16057691494799, 1.34011878852098, 1.89521416591737, 0.36187343222787, 1.96214168703486, -0.566421515598891, 2.74642624930238, 3.17129986868838, -1.82198870938951, 0, 11.0554159678513, 0, 0, 1.59571184626056, 8.65223156827827, -2.49768411251822, -0.865042958313572, -0.998865569685858, 0.441440386136647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.32664991614217, 0.299659670905757, 2.07610309995256, 1.46802658041888, 0, 0.868496237346881, 1.31624465810882, 0.709124208342336, 4.91295663090392, -1.4113063856887, 0, 0, 11.0554159678513, 0, 0, 3.82970843102535, 5.80409338312195, -0.223353131420161, -1.54743588659733, 0.341938252770126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.765941686205071, 0, 1.49829835452879, 0.847565541382364, 0, 0, 1.62843044502542, 0, 3.54562104171167, -0.814818121686411, 0, 0, 0, 11.0554159678513, 0, 0, 7.18070330817254, 0, -1.11676565710082, 0.197418142283063, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741914, 1.00508909139074, -0.193429485824663, 3.55615782880926, -8.46157280212812, 0, 0, 4.45964044034301, -0.858258202906987, 2.67027285925186, 0, 0, 0, 0, 12.4373429638327, 0, 0, 8.42792824422443, -1.62195554683794, -2.29379153190448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.1489125293076, 0.259512887494073, 0.749149177264395, 2.75458800949267, 0, -8.46157280212812, 0, 1.15147421036811, 3.32401972660469, 2.06838446274243, 0, 0, 0, 0, 0, 12.4373429638327, 0, 2.17608171552749, 6.2818068211921, -1.77676328054754, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.663324958071074, 0, 0.692034366650849, 1.59036212878711, 0, 0, -8.46157280212813, 0, 3.07059789431495, 1.19418232635198, 0, 0, 0, 0, 0, 0, 12.4373429638327, 0, 5.80288457473997, -1.02581475831036, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.938083151964688, 7.62808987244126, 0, 3.11415464992885, 0, 0, 0, -7.5213980463361, 0, 5.52707620976691, 0, 0, 0, 0, 0, 0, 0, 14.2141062443803, 0, 5.80288457473998, 0, 0, 0, 0, 0, 1.03455020940032e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.541602560309059, 0, 7.62808987244125, 1.79795802543454, 0, 0, 0, 0, -7.52139804633611, 3.1910589375405, 0, 0, 0, 0, 0, 0, 0, 0, 14.2141062443803, 3.35029697130244, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-5.36159180343549, 0, 0, 8.8994381845148, 0, 0, 0, 0, -1.07784467308941e-14, -5.26497863243527, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16.583123951777, 0, 0, 0, 0, 0, 1.2461107758246e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    // Compute reference derivatives
    // Declare pointer to array of derivatives on FIAT element
    double *derivatives = new double [num_derivatives];
    
    // Declare coefficients
    double coeff0_0 = 0;
    double coeff0_1 = 0;
    double coeff0_2 = 0;
    double coeff0_3 = 0;
    double coeff0_4 = 0;
    double coeff0_5 = 0;
    double coeff0_6 = 0;
    double coeff0_7 = 0;
    double coeff0_8 = 0;
    double coeff0_9 = 0;
    double coeff0_10 = 0;
    double coeff0_11 = 0;
    double coeff0_12 = 0;
    double coeff0_13 = 0;
    double coeff0_14 = 0;
    double coeff0_15 = 0;
    double coeff0_16 = 0;
    double coeff0_17 = 0;
    double coeff0_18 = 0;
    double coeff0_19 = 0;
    double coeff0_20 = 0;
    double coeff0_21 = 0;
    double coeff0_22 = 0;
    double coeff0_23 = 0;
    double coeff0_24 = 0;
    double coeff0_25 = 0;
    double coeff0_26 = 0;
    double coeff0_27 = 0;
    double coeff0_28 = 0;
    double coeff0_29 = 0;
    double coeff0_30 = 0;
    double coeff0_31 = 0;
    double coeff0_32 = 0;
    double coeff0_33 = 0;
    double coeff0_34 = 0;
    
    // Declare new coefficients
    double new_coeff0_0 = 0;
    double new_coeff0_1 = 0;
    double new_coeff0_2 = 0;
    double new_coeff0_3 = 0;
    double new_coeff0_4 = 0;
    double new_coeff0_5 = 0;
    double new_coeff0_6 = 0;
    double new_coeff0_7 = 0;
    double new_coeff0_8 = 0;
    double new_coeff0_9 = 0;
    double new_coeff0_10 = 0;
    double new_coeff0_11 = 0;
    double new_coeff0_12 = 0;
    double new_coeff0_13 = 0;
    double new_coeff0_14 = 0;
    double new_coeff0_15 = 0;
    double new_coeff0_16 = 0;
    double new_coeff0_17 = 0;
    double new_coeff0_18 = 0;
    double new_coeff0_19 = 0;
    double new_coeff0_20 = 0;
    double new_coeff0_21 = 0;
    double new_coeff0_22 = 0;
    double new_coeff0_23 = 0;
    double new_coeff0_24 = 0;
    double new_coeff0_25 = 0;
    double new_coeff0_26 = 0;
    double new_coeff0_27 = 0;
    double new_coeff0_28 = 0;
    double new_coeff0_29 = 0;
    double new_coeff0_30 = 0;
    double new_coeff0_31 = 0;
    double new_coeff0_32 = 0;
    double new_coeff0_33 = 0;
    double new_coeff0_34 = 0;
    
    // Loop possible derivatives
    for (unsigned int deriv_num = 0; deriv_num < num_derivatives; deriv_num++)
    {
      // Get values from coefficients array
      new_coeff0_0 = coefficients0[dof][0];
      new_coeff0_1 = coefficients0[dof][1];
      new_coeff0_2 = coefficients0[dof][2];
      new_coeff0_3 = coefficients0[dof][3];
      new_coeff0_4 = coefficients0[dof][4];
      new_coeff0_5 = coefficients0[dof][5];
      new_coeff0_6 = coefficients0[dof][6];
      new_coeff0_7 = coefficients0[dof][7];
      new_coeff0_8 = coefficients0[dof][8];
      new_coeff0_9 = coefficients0[dof][9];
      new_coeff0_10 = coefficients0[dof][10];
      new_coeff0_11 = coefficients0[dof][11];
      new_coeff0_12 = coefficients0[dof][12];
      new_coeff0_13 = coefficients0[dof][13];
      new_coeff0_14 = coefficients0[dof][14];
      new_coeff0_15 = coefficients0[dof][15];
      new_coeff0_16 = coefficients0[dof][16];
      new_coeff0_17 = coefficients0[dof][17];
      new_coeff0_18 = coefficients0[dof][18];
      new_coeff0_19 = coefficients0[dof][19];
      new_coeff0_20 = coefficients0[dof][20];
      new_coeff0_21 = coefficients0[dof][21];
      new_coeff0_22 = coefficients0[dof][22];
      new_coeff0_23 = coefficients0[dof][23];
      new_coeff0_24 = coefficients0[dof][24];
      new_coeff0_25 = coefficients0[dof][25];
      new_coeff0_26 = coefficients0[dof][26];
      new_coeff0_27 = coefficients0[dof][27];
      new_coeff0_28 = coefficients0[dof][28];
      new_coeff0_29 = coefficients0[dof][29];
      new_coeff0_30 = coefficients0[dof][30];
      new_coeff0_31 = coefficients0[dof][31];
      new_coeff0_32 = coefficients0[dof][32];
      new_coeff0_33 = coefficients0[dof][33];
      new_coeff0_34 = coefficients0[dof][34];
    
      // Loop derivative order
      for (unsigned int j = 0; j < n; j++)
      {
        // Update old coefficients
        coeff0_0 = new_coeff0_0;
        coeff0_1 = new_coeff0_1;
        coeff0_2 = new_coeff0_2;
        coeff0_3 = new_coeff0_3;
        coeff0_4 = new_coeff0_4;
        coeff0_5 = new_coeff0_5;
        coeff0_6 = new_coeff0_6;
        coeff0_7 = new_coeff0_7;
        coeff0_8 = new_coeff0_8;
        coeff0_9 = new_coeff0_9;
        coeff0_10 = new_coeff0_10;
        coeff0_11 = new_coeff0_11;
        coeff0_12 = new_coeff0_12;
        coeff0_13 = new_coeff0_13;
        coeff0_14 = new_coeff0_14;
        coeff0_15 = new_coeff0_15;
        coeff0_16 = new_coeff0_16;
        coeff0_17 = new_coeff0_17;
        coeff0_18 = new_coeff0_18;
        coeff0_19 = new_coeff0_19;
        coeff0_20 = new_coeff0_20;
        coeff0_21 = new_coeff0_21;
        coeff0_22 = new_coeff0_22;
        coeff0_23 = new_coeff0_23;
        coeff0_24 = new_coeff0_24;
        coeff0_25 = new_coeff0_25;
        coeff0_26 = new_coeff0_26;
        coeff0_27 = new_coeff0_27;
        coeff0_28 = new_coeff0_28;
        coeff0_29 = new_coeff0_29;
        coeff0_30 = new_coeff0_30;
        coeff0_31 = new_coeff0_31;
        coeff0_32 = new_coeff0_32;
        coeff0_33 = new_coeff0_33;
        coeff0_34 = new_coeff0_34;
    
        if(combinations[deriv_num][j] == 0)
        {
          new_coeff0_0 = coeff0_0*dmats0[0][0] + coeff0_1*dmats0[1][0] + coeff0_2*dmats0[2][0] + coeff0_3*dmats0[3][0] + coeff0_4*dmats0[4][0] + coeff0_5*dmats0[5][0] + coeff0_6*dmats0[6][0] + coeff0_7*dmats0[7][0] + coeff0_8*dmats0[8][0] + coeff0_9*dmats0[9][0] + coeff0_10*dmats0[10][0] + coeff0_11*dmats0[11][0] + coeff0_12*dmats0[12][0] + coeff0_13*dmats0[13][0] + coeff0_14*dmats0[14][0] + coeff0_15*dmats0[15][0] + coeff0_16*dmats0[16][0] + coeff0_17*dmats0[17][0] + coeff0_18*dmats0[18][0] + coeff0_19*dmats0[19][0] + coeff0_20*dmats0[20][0] + coeff0_21*dmats0[21][0] + coeff0_22*dmats0[22][0] + coeff0_23*dmats0[23][0] + coeff0_24*dmats0[24][0] + coeff0_25*dmats0[25][0] + coeff0_26*dmats0[26][0] + coeff0_27*dmats0[27][0] + coeff0_28*dmats0[28][0] + coeff0_29*dmats0[29][0] + coeff0_30*dmats0[30][0] + coeff0_31*dmats0[31][0] + coeff0_32*dmats0[32][0] + coeff0_33*dmats0[33][0] + coeff0_34*dmats0[34][0];
          new_coeff0_1 = coeff0_0*dmats0[0][1] + coeff0_1*dmats0[1][1] + coeff0_2*dmats0[2][1] + coeff0_3*dmats0[3][1] + coeff0_4*dmats0[4][1] + coeff0_5*dmats0[5][1] + coeff0_6*dmats0[6][1] + coeff0_7*dmats0[7][1] + coeff0_8*dmats0[8][1] + coeff0_9*dmats0[9][1] + coeff0_10*dmats0[10][1] + coeff0_11*dmats0[11][1] + coeff0_12*dmats0[12][1] + coeff0_13*dmats0[13][1] + coeff0_14*dmats0[14][1] + coeff0_15*dmats0[15][1] + coeff0_16*dmats0[16][1] + coeff0_17*dmats0[17][1] + coeff0_18*dmats0[18][1] + coeff0_19*dmats0[19][1] + coeff0_20*dmats0[20][1] + coeff0_21*dmats0[21][1] + coeff0_22*dmats0[22][1] + coeff0_23*dmats0[23][1] + coeff0_24*dmats0[24][1] + coeff0_25*dmats0[25][1] + coeff0_26*dmats0[26][1] + coeff0_27*dmats0[27][1] + coeff0_28*dmats0[28][1] + coeff0_29*dmats0[29][1] + coeff0_30*dmats0[30][1] + coeff0_31*dmats0[31][1] + coeff0_32*dmats0[32][1] + coeff0_33*dmats0[33][1] + coeff0_34*dmats0[34][1];
          new_coeff0_2 = coeff0_0*dmats0[0][2] + coeff0_1*dmats0[1][2] + coeff0_2*dmats0[2][2] + coeff0_3*dmats0[3][2] + coeff0_4*dmats0[4][2] + coeff0_5*dmats0[5][2] + coeff0_6*dmats0[6][2] + coeff0_7*dmats0[7][2] + coeff0_8*dmats0[8][2] + coeff0_9*dmats0[9][2] + coeff0_10*dmats0[10][2] + coeff0_11*dmats0[11][2] + coeff0_12*dmats0[12][2] + coeff0_13*dmats0[13][2] + coeff0_14*dmats0[14][2] + coeff0_15*dmats0[15][2] + coeff0_16*dmats0[16][2] + coeff0_17*dmats0[17][2] + coeff0_18*dmats0[18][2] + coeff0_19*dmats0[19][2] + coeff0_20*dmats0[20][2] + coeff0_21*dmats0[21][2] + coeff0_22*dmats0[22][2] + coeff0_23*dmats0[23][2] + coeff0_24*dmats0[24][2] + coeff0_25*dmats0[25][2] + coeff0_26*dmats0[26][2] + coeff0_27*dmats0[27][2] + coeff0_28*dmats0[28][2] + coeff0_29*dmats0[29][2] + coeff0_30*dmats0[30][2] + coeff0_31*dmats0[31][2] + coeff0_32*dmats0[32][2] + coeff0_33*dmats0[33][2] + coeff0_34*dmats0[34][2];
          new_coeff0_3 = coeff0_0*dmats0[0][3] + coeff0_1*dmats0[1][3] + coeff0_2*dmats0[2][3] + coeff0_3*dmats0[3][3] + coeff0_4*dmats0[4][3] + coeff0_5*dmats0[5][3] + coeff0_6*dmats0[6][3] + coeff0_7*dmats0[7][3] + coeff0_8*dmats0[8][3] + coeff0_9*dmats0[9][3] + coeff0_10*dmats0[10][3] + coeff0_11*dmats0[11][3] + coeff0_12*dmats0[12][3] + coeff0_13*dmats0[13][3] + coeff0_14*dmats0[14][3] + coeff0_15*dmats0[15][3] + coeff0_16*dmats0[16][3] + coeff0_17*dmats0[17][3] + coeff0_18*dmats0[18][3] + coeff0_19*dmats0[19][3] + coeff0_20*dmats0[20][3] + coeff0_21*dmats0[21][3] + coeff0_22*dmats0[22][3] + coeff0_23*dmats0[23][3] + coeff0_24*dmats0[24][3] + coeff0_25*dmats0[25][3] + coeff0_26*dmats0[26][3] + coeff0_27*dmats0[27][3] + coeff0_28*dmats0[28][3] + coeff0_29*dmats0[29][3] + coeff0_30*dmats0[30][3] + coeff0_31*dmats0[31][3] + coeff0_32*dmats0[32][3] + coeff0_33*dmats0[33][3] + coeff0_34*dmats0[34][3];
          new_coeff0_4 = coeff0_0*dmats0[0][4] + coeff0_1*dmats0[1][4] + coeff0_2*dmats0[2][4] + coeff0_3*dmats0[3][4] + coeff0_4*dmats0[4][4] + coeff0_5*dmats0[5][4] + coeff0_6*dmats0[6][4] + coeff0_7*dmats0[7][4] + coeff0_8*dmats0[8][4] + coeff0_9*dmats0[9][4] + coeff0_10*dmats0[10][4] + coeff0_11*dmats0[11][4] + coeff0_12*dmats0[12][4] + coeff0_13*dmats0[13][4] + coeff0_14*dmats0[14][4] + coeff0_15*dmats0[15][4] + coeff0_16*dmats0[16][4] + coeff0_17*dmats0[17][4] + coeff0_18*dmats0[18][4] + coeff0_19*dmats0[19][4] + coeff0_20*dmats0[20][4] + coeff0_21*dmats0[21][4] + coeff0_22*dmats0[22][4] + coeff0_23*dmats0[23][4] + coeff0_24*dmats0[24][4] + coeff0_25*dmats0[25][4] + coeff0_26*dmats0[26][4] + coeff0_27*dmats0[27][4] + coeff0_28*dmats0[28][4] + coeff0_29*dmats0[29][4] + coeff0_30*dmats0[30][4] + coeff0_31*dmats0[31][4] + coeff0_32*dmats0[32][4] + coeff0_33*dmats0[33][4] + coeff0_34*dmats0[34][4];
          new_coeff0_5 = coeff0_0*dmats0[0][5] + coeff0_1*dmats0[1][5] + coeff0_2*dmats0[2][5] + coeff0_3*dmats0[3][5] + coeff0_4*dmats0[4][5] + coeff0_5*dmats0[5][5] + coeff0_6*dmats0[6][5] + coeff0_7*dmats0[7][5] + coeff0_8*dmats0[8][5] + coeff0_9*dmats0[9][5] + coeff0_10*dmats0[10][5] + coeff0_11*dmats0[11][5] + coeff0_12*dmats0[12][5] + coeff0_13*dmats0[13][5] + coeff0_14*dmats0[14][5] + coeff0_15*dmats0[15][5] + coeff0_16*dmats0[16][5] + coeff0_17*dmats0[17][5] + coeff0_18*dmats0[18][5] + coeff0_19*dmats0[19][5] + coeff0_20*dmats0[20][5] + coeff0_21*dmats0[21][5] + coeff0_22*dmats0[22][5] + coeff0_23*dmats0[23][5] + coeff0_24*dmats0[24][5] + coeff0_25*dmats0[25][5] + coeff0_26*dmats0[26][5] + coeff0_27*dmats0[27][5] + coeff0_28*dmats0[28][5] + coeff0_29*dmats0[29][5] + coeff0_30*dmats0[30][5] + coeff0_31*dmats0[31][5] + coeff0_32*dmats0[32][5] + coeff0_33*dmats0[33][5] + coeff0_34*dmats0[34][5];
          new_coeff0_6 = coeff0_0*dmats0[0][6] + coeff0_1*dmats0[1][6] + coeff0_2*dmats0[2][6] + coeff0_3*dmats0[3][6] + coeff0_4*dmats0[4][6] + coeff0_5*dmats0[5][6] + coeff0_6*dmats0[6][6] + coeff0_7*dmats0[7][6] + coeff0_8*dmats0[8][6] + coeff0_9*dmats0[9][6] + coeff0_10*dmats0[10][6] + coeff0_11*dmats0[11][6] + coeff0_12*dmats0[12][6] + coeff0_13*dmats0[13][6] + coeff0_14*dmats0[14][6] + coeff0_15*dmats0[15][6] + coeff0_16*dmats0[16][6] + coeff0_17*dmats0[17][6] + coeff0_18*dmats0[18][6] + coeff0_19*dmats0[19][6] + coeff0_20*dmats0[20][6] + coeff0_21*dmats0[21][6] + coeff0_22*dmats0[22][6] + coeff0_23*dmats0[23][6] + coeff0_24*dmats0[24][6] + coeff0_25*dmats0[25][6] + coeff0_26*dmats0[26][6] + coeff0_27*dmats0[27][6] + coeff0_28*dmats0[28][6] + coeff0_29*dmats0[29][6] + coeff0_30*dmats0[30][6] + coeff0_31*dmats0[31][6] + coeff0_32*dmats0[32][6] + coeff0_33*dmats0[33][6] + coeff0_34*dmats0[34][6];
          new_coeff0_7 = coeff0_0*dmats0[0][7] + coeff0_1*dmats0[1][7] + coeff0_2*dmats0[2][7] + coeff0_3*dmats0[3][7] + coeff0_4*dmats0[4][7] + coeff0_5*dmats0[5][7] + coeff0_6*dmats0[6][7] + coeff0_7*dmats0[7][7] + coeff0_8*dmats0[8][7] + coeff0_9*dmats0[9][7] + coeff0_10*dmats0[10][7] + coeff0_11*dmats0[11][7] + coeff0_12*dmats0[12][7] + coeff0_13*dmats0[13][7] + coeff0_14*dmats0[14][7] + coeff0_15*dmats0[15][7] + coeff0_16*dmats0[16][7] + coeff0_17*dmats0[17][7] + coeff0_18*dmats0[18][7] + coeff0_19*dmats0[19][7] + coeff0_20*dmats0[20][7] + coeff0_21*dmats0[21][7] + coeff0_22*dmats0[22][7] + coeff0_23*dmats0[23][7] + coeff0_24*dmats0[24][7] + coeff0_25*dmats0[25][7] + coeff0_26*dmats0[26][7] + coeff0_27*dmats0[27][7] + coeff0_28*dmats0[28][7] + coeff0_29*dmats0[29][7] + coeff0_30*dmats0[30][7] + coeff0_31*dmats0[31][7] + coeff0_32*dmats0[32][7] + coeff0_33*dmats0[33][7] + coeff0_34*dmats0[34][7];
          new_coeff0_8 = coeff0_0*dmats0[0][8] + coeff0_1*dmats0[1][8] + coeff0_2*dmats0[2][8] + coeff0_3*dmats0[3][8] + coeff0_4*dmats0[4][8] + coeff0_5*dmats0[5][8] + coeff0_6*dmats0[6][8] + coeff0_7*dmats0[7][8] + coeff0_8*dmats0[8][8] + coeff0_9*dmats0[9][8] + coeff0_10*dmats0[10][8] + coeff0_11*dmats0[11][8] + coeff0_12*dmats0[12][8] + coeff0_13*dmats0[13][8] + coeff0_14*dmats0[14][8] + coeff0_15*dmats0[15][8] + coeff0_16*dmats0[16][8] + coeff0_17*dmats0[17][8] + coeff0_18*dmats0[18][8] + coeff0_19*dmats0[19][8] + coeff0_20*dmats0[20][8] + coeff0_21*dmats0[21][8] + coeff0_22*dmats0[22][8] + coeff0_23*dmats0[23][8] + coeff0_24*dmats0[24][8] + coeff0_25*dmats0[25][8] + coeff0_26*dmats0[26][8] + coeff0_27*dmats0[27][8] + coeff0_28*dmats0[28][8] + coeff0_29*dmats0[29][8] + coeff0_30*dmats0[30][8] + coeff0_31*dmats0[31][8] + coeff0_32*dmats0[32][8] + coeff0_33*dmats0[33][8] + coeff0_34*dmats0[34][8];
          new_coeff0_9 = coeff0_0*dmats0[0][9] + coeff0_1*dmats0[1][9] + coeff0_2*dmats0[2][9] + coeff0_3*dmats0[3][9] + coeff0_4*dmats0[4][9] + coeff0_5*dmats0[5][9] + coeff0_6*dmats0[6][9] + coeff0_7*dmats0[7][9] + coeff0_8*dmats0[8][9] + coeff0_9*dmats0[9][9] + coeff0_10*dmats0[10][9] + coeff0_11*dmats0[11][9] + coeff0_12*dmats0[12][9] + coeff0_13*dmats0[13][9] + coeff0_14*dmats0[14][9] + coeff0_15*dmats0[15][9] + coeff0_16*dmats0[16][9] + coeff0_17*dmats0[17][9] + coeff0_18*dmats0[18][9] + coeff0_19*dmats0[19][9] + coeff0_20*dmats0[20][9] + coeff0_21*dmats0[21][9] + coeff0_22*dmats0[22][9] + coeff0_23*dmats0[23][9] + coeff0_24*dmats0[24][9] + coeff0_25*dmats0[25][9] + coeff0_26*dmats0[26][9] + coeff0_27*dmats0[27][9] + coeff0_28*dmats0[28][9] + coeff0_29*dmats0[29][9] + coeff0_30*dmats0[30][9] + coeff0_31*dmats0[31][9] + coeff0_32*dmats0[32][9] + coeff0_33*dmats0[33][9] + coeff0_34*dmats0[34][9];
          new_coeff0_10 = coeff0_0*dmats0[0][10] + coeff0_1*dmats0[1][10] + coeff0_2*dmats0[2][10] + coeff0_3*dmats0[3][10] + coeff0_4*dmats0[4][10] + coeff0_5*dmats0[5][10] + coeff0_6*dmats0[6][10] + coeff0_7*dmats0[7][10] + coeff0_8*dmats0[8][10] + coeff0_9*dmats0[9][10] + coeff0_10*dmats0[10][10] + coeff0_11*dmats0[11][10] + coeff0_12*dmats0[12][10] + coeff0_13*dmats0[13][10] + coeff0_14*dmats0[14][10] + coeff0_15*dmats0[15][10] + coeff0_16*dmats0[16][10] + coeff0_17*dmats0[17][10] + coeff0_18*dmats0[18][10] + coeff0_19*dmats0[19][10] + coeff0_20*dmats0[20][10] + coeff0_21*dmats0[21][10] + coeff0_22*dmats0[22][10] + coeff0_23*dmats0[23][10] + coeff0_24*dmats0[24][10] + coeff0_25*dmats0[25][10] + coeff0_26*dmats0[26][10] + coeff0_27*dmats0[27][10] + coeff0_28*dmats0[28][10] + coeff0_29*dmats0[29][10] + coeff0_30*dmats0[30][10] + coeff0_31*dmats0[31][10] + coeff0_32*dmats0[32][10] + coeff0_33*dmats0[33][10] + coeff0_34*dmats0[34][10];
          new_coeff0_11 = coeff0_0*dmats0[0][11] + coeff0_1*dmats0[1][11] + coeff0_2*dmats0[2][11] + coeff0_3*dmats0[3][11] + coeff0_4*dmats0[4][11] + coeff0_5*dmats0[5][11] + coeff0_6*dmats0[6][11] + coeff0_7*dmats0[7][11] + coeff0_8*dmats0[8][11] + coeff0_9*dmats0[9][11] + coeff0_10*dmats0[10][11] + coeff0_11*dmats0[11][11] + coeff0_12*dmats0[12][11] + coeff0_13*dmats0[13][11] + coeff0_14*dmats0[14][11] + coeff0_15*dmats0[15][11] + coeff0_16*dmats0[16][11] + coeff0_17*dmats0[17][11] + coeff0_18*dmats0[18][11] + coeff0_19*dmats0[19][11] + coeff0_20*dmats0[20][11] + coeff0_21*dmats0[21][11] + coeff0_22*dmats0[22][11] + coeff0_23*dmats0[23][11] + coeff0_24*dmats0[24][11] + coeff0_25*dmats0[25][11] + coeff0_26*dmats0[26][11] + coeff0_27*dmats0[27][11] + coeff0_28*dmats0[28][11] + coeff0_29*dmats0[29][11] + coeff0_30*dmats0[30][11] + coeff0_31*dmats0[31][11] + coeff0_32*dmats0[32][11] + coeff0_33*dmats0[33][11] + coeff0_34*dmats0[34][11];
          new_coeff0_12 = coeff0_0*dmats0[0][12] + coeff0_1*dmats0[1][12] + coeff0_2*dmats0[2][12] + coeff0_3*dmats0[3][12] + coeff0_4*dmats0[4][12] + coeff0_5*dmats0[5][12] + coeff0_6*dmats0[6][12] + coeff0_7*dmats0[7][12] + coeff0_8*dmats0[8][12] + coeff0_9*dmats0[9][12] + coeff0_10*dmats0[10][12] + coeff0_11*dmats0[11][12] + coeff0_12*dmats0[12][12] + coeff0_13*dmats0[13][12] + coeff0_14*dmats0[14][12] + coeff0_15*dmats0[15][12] + coeff0_16*dmats0[16][12] + coeff0_17*dmats0[17][12] + coeff0_18*dmats0[18][12] + coeff0_19*dmats0[19][12] + coeff0_20*dmats0[20][12] + coeff0_21*dmats0[21][12] + coeff0_22*dmats0[22][12] + coeff0_23*dmats0[23][12] + coeff0_24*dmats0[24][12] + coeff0_25*dmats0[25][12] + coeff0_26*dmats0[26][12] + coeff0_27*dmats0[27][12] + coeff0_28*dmats0[28][12] + coeff0_29*dmats0[29][12] + coeff0_30*dmats0[30][12] + coeff0_31*dmats0[31][12] + coeff0_32*dmats0[32][12] + coeff0_33*dmats0[33][12] + coeff0_34*dmats0[34][12];
          new_coeff0_13 = coeff0_0*dmats0[0][13] + coeff0_1*dmats0[1][13] + coeff0_2*dmats0[2][13] + coeff0_3*dmats0[3][13] + coeff0_4*dmats0[4][13] + coeff0_5*dmats0[5][13] + coeff0_6*dmats0[6][13] + coeff0_7*dmats0[7][13] + coeff0_8*dmats0[8][13] + coeff0_9*dmats0[9][13] + coeff0_10*dmats0[10][13] + coeff0_11*dmats0[11][13] + coeff0_12*dmats0[12][13] + coeff0_13*dmats0[13][13] + coeff0_14*dmats0[14][13] + coeff0_15*dmats0[15][13] + coeff0_16*dmats0[16][13] + coeff0_17*dmats0[17][13] + coeff0_18*dmats0[18][13] + coeff0_19*dmats0[19][13] + coeff0_20*dmats0[20][13] + coeff0_21*dmats0[21][13] + coeff0_22*dmats0[22][13] + coeff0_23*dmats0[23][13] + coeff0_24*dmats0[24][13] + coeff0_25*dmats0[25][13] + coeff0_26*dmats0[26][13] + coeff0_27*dmats0[27][13] + coeff0_28*dmats0[28][13] + coeff0_29*dmats0[29][13] + coeff0_30*dmats0[30][13] + coeff0_31*dmats0[31][13] + coeff0_32*dmats0[32][13] + coeff0_33*dmats0[33][13] + coeff0_34*dmats0[34][13];
          new_coeff0_14 = coeff0_0*dmats0[0][14] + coeff0_1*dmats0[1][14] + coeff0_2*dmats0[2][14] + coeff0_3*dmats0[3][14] + coeff0_4*dmats0[4][14] + coeff0_5*dmats0[5][14] + coeff0_6*dmats0[6][14] + coeff0_7*dmats0[7][14] + coeff0_8*dmats0[8][14] + coeff0_9*dmats0[9][14] + coeff0_10*dmats0[10][14] + coeff0_11*dmats0[11][14] + coeff0_12*dmats0[12][14] + coeff0_13*dmats0[13][14] + coeff0_14*dmats0[14][14] + coeff0_15*dmats0[15][14] + coeff0_16*dmats0[16][14] + coeff0_17*dmats0[17][14] + coeff0_18*dmats0[18][14] + coeff0_19*dmats0[19][14] + coeff0_20*dmats0[20][14] + coeff0_21*dmats0[21][14] + coeff0_22*dmats0[22][14] + coeff0_23*dmats0[23][14] + coeff0_24*dmats0[24][14] + coeff0_25*dmats0[25][14] + coeff0_26*dmats0[26][14] + coeff0_27*dmats0[27][14] + coeff0_28*dmats0[28][14] + coeff0_29*dmats0[29][14] + coeff0_30*dmats0[30][14] + coeff0_31*dmats0[31][14] + coeff0_32*dmats0[32][14] + coeff0_33*dmats0[33][14] + coeff0_34*dmats0[34][14];
          new_coeff0_15 = coeff0_0*dmats0[0][15] + coeff0_1*dmats0[1][15] + coeff0_2*dmats0[2][15] + coeff0_3*dmats0[3][15] + coeff0_4*dmats0[4][15] + coeff0_5*dmats0[5][15] + coeff0_6*dmats0[6][15] + coeff0_7*dmats0[7][15] + coeff0_8*dmats0[8][15] + coeff0_9*dmats0[9][15] + coeff0_10*dmats0[10][15] + coeff0_11*dmats0[11][15] + coeff0_12*dmats0[12][15] + coeff0_13*dmats0[13][15] + coeff0_14*dmats0[14][15] + coeff0_15*dmats0[15][15] + coeff0_16*dmats0[16][15] + coeff0_17*dmats0[17][15] + coeff0_18*dmats0[18][15] + coeff0_19*dmats0[19][15] + coeff0_20*dmats0[20][15] + coeff0_21*dmats0[21][15] + coeff0_22*dmats0[22][15] + coeff0_23*dmats0[23][15] + coeff0_24*dmats0[24][15] + coeff0_25*dmats0[25][15] + coeff0_26*dmats0[26][15] + coeff0_27*dmats0[27][15] + coeff0_28*dmats0[28][15] + coeff0_29*dmats0[29][15] + coeff0_30*dmats0[30][15] + coeff0_31*dmats0[31][15] + coeff0_32*dmats0[32][15] + coeff0_33*dmats0[33][15] + coeff0_34*dmats0[34][15];
          new_coeff0_16 = coeff0_0*dmats0[0][16] + coeff0_1*dmats0[1][16] + coeff0_2*dmats0[2][16] + coeff0_3*dmats0[3][16] + coeff0_4*dmats0[4][16] + coeff0_5*dmats0[5][16] + coeff0_6*dmats0[6][16] + coeff0_7*dmats0[7][16] + coeff0_8*dmats0[8][16] + coeff0_9*dmats0[9][16] + coeff0_10*dmats0[10][16] + coeff0_11*dmats0[11][16] + coeff0_12*dmats0[12][16] + coeff0_13*dmats0[13][16] + coeff0_14*dmats0[14][16] + coeff0_15*dmats0[15][16] + coeff0_16*dmats0[16][16] + coeff0_17*dmats0[17][16] + coeff0_18*dmats0[18][16] + coeff0_19*dmats0[19][16] + coeff0_20*dmats0[20][16] + coeff0_21*dmats0[21][16] + coeff0_22*dmats0[22][16] + coeff0_23*dmats0[23][16] + coeff0_24*dmats0[24][16] + coeff0_25*dmats0[25][16] + coeff0_26*dmats0[26][16] + coeff0_27*dmats0[27][16] + coeff0_28*dmats0[28][16] + coeff0_29*dmats0[29][16] + coeff0_30*dmats0[30][16] + coeff0_31*dmats0[31][16] + coeff0_32*dmats0[32][16] + coeff0_33*dmats0[33][16] + coeff0_34*dmats0[34][16];
          new_coeff0_17 = coeff0_0*dmats0[0][17] + coeff0_1*dmats0[1][17] + coeff0_2*dmats0[2][17] + coeff0_3*dmats0[3][17] + coeff0_4*dmats0[4][17] + coeff0_5*dmats0[5][17] + coeff0_6*dmats0[6][17] + coeff0_7*dmats0[7][17] + coeff0_8*dmats0[8][17] + coeff0_9*dmats0[9][17] + coeff0_10*dmats0[10][17] + coeff0_11*dmats0[11][17] + coeff0_12*dmats0[12][17] + coeff0_13*dmats0[13][17] + coeff0_14*dmats0[14][17] + coeff0_15*dmats0[15][17] + coeff0_16*dmats0[16][17] + coeff0_17*dmats0[17][17] + coeff0_18*dmats0[18][17] + coeff0_19*dmats0[19][17] + coeff0_20*dmats0[20][17] + coeff0_21*dmats0[21][17] + coeff0_22*dmats0[22][17] + coeff0_23*dmats0[23][17] + coeff0_24*dmats0[24][17] + coeff0_25*dmats0[25][17] + coeff0_26*dmats0[26][17] + coeff0_27*dmats0[27][17] + coeff0_28*dmats0[28][17] + coeff0_29*dmats0[29][17] + coeff0_30*dmats0[30][17] + coeff0_31*dmats0[31][17] + coeff0_32*dmats0[32][17] + coeff0_33*dmats0[33][17] + coeff0_34*dmats0[34][17];
          new_coeff0_18 = coeff0_0*dmats0[0][18] + coeff0_1*dmats0[1][18] + coeff0_2*dmats0[2][18] + coeff0_3*dmats0[3][18] + coeff0_4*dmats0[4][18] + coeff0_5*dmats0[5][18] + coeff0_6*dmats0[6][18] + coeff0_7*dmats0[7][18] + coeff0_8*dmats0[8][18] + coeff0_9*dmats0[9][18] + coeff0_10*dmats0[10][18] + coeff0_11*dmats0[11][18] + coeff0_12*dmats0[12][18] + coeff0_13*dmats0[13][18] + coeff0_14*dmats0[14][18] + coeff0_15*dmats0[15][18] + coeff0_16*dmats0[16][18] + coeff0_17*dmats0[17][18] + coeff0_18*dmats0[18][18] + coeff0_19*dmats0[19][18] + coeff0_20*dmats0[20][18] + coeff0_21*dmats0[21][18] + coeff0_22*dmats0[22][18] + coeff0_23*dmats0[23][18] + coeff0_24*dmats0[24][18] + coeff0_25*dmats0[25][18] + coeff0_26*dmats0[26][18] + coeff0_27*dmats0[27][18] + coeff0_28*dmats0[28][18] + coeff0_29*dmats0[29][18] + coeff0_30*dmats0[30][18] + coeff0_31*dmats0[31][18] + coeff0_32*dmats0[32][18] + coeff0_33*dmats0[33][18] + coeff0_34*dmats0[34][18];
          new_coeff0_19 = coeff0_0*dmats0[0][19] + coeff0_1*dmats0[1][19] + coeff0_2*dmats0[2][19] + coeff0_3*dmats0[3][19] + coeff0_4*dmats0[4][19] + coeff0_5*dmats0[5][19] + coeff0_6*dmats0[6][19] + coeff0_7*dmats0[7][19] + coeff0_8*dmats0[8][19] + coeff0_9*dmats0[9][19] + coeff0_10*dmats0[10][19] + coeff0_11*dmats0[11][19] + coeff0_12*dmats0[12][19] + coeff0_13*dmats0[13][19] + coeff0_14*dmats0[14][19] + coeff0_15*dmats0[15][19] + coeff0_16*dmats0[16][19] + coeff0_17*dmats0[17][19] + coeff0_18*dmats0[18][19] + coeff0_19*dmats0[19][19] + coeff0_20*dmats0[20][19] + coeff0_21*dmats0[21][19] + coeff0_22*dmats0[22][19] + coeff0_23*dmats0[23][19] + coeff0_24*dmats0[24][19] + coeff0_25*dmats0[25][19] + coeff0_26*dmats0[26][19] + coeff0_27*dmats0[27][19] + coeff0_28*dmats0[28][19] + coeff0_29*dmats0[29][19] + coeff0_30*dmats0[30][19] + coeff0_31*dmats0[31][19] + coeff0_32*dmats0[32][19] + coeff0_33*dmats0[33][19] + coeff0_34*dmats0[34][19];
          new_coeff0_20 = coeff0_0*dmats0[0][20] + coeff0_1*dmats0[1][20] + coeff0_2*dmats0[2][20] + coeff0_3*dmats0[3][20] + coeff0_4*dmats0[4][20] + coeff0_5*dmats0[5][20] + coeff0_6*dmats0[6][20] + coeff0_7*dmats0[7][20] + coeff0_8*dmats0[8][20] + coeff0_9*dmats0[9][20] + coeff0_10*dmats0[10][20] + coeff0_11*dmats0[11][20] + coeff0_12*dmats0[12][20] + coeff0_13*dmats0[13][20] + coeff0_14*dmats0[14][20] + coeff0_15*dmats0[15][20] + coeff0_16*dmats0[16][20] + coeff0_17*dmats0[17][20] + coeff0_18*dmats0[18][20] + coeff0_19*dmats0[19][20] + coeff0_20*dmats0[20][20] + coeff0_21*dmats0[21][20] + coeff0_22*dmats0[22][20] + coeff0_23*dmats0[23][20] + coeff0_24*dmats0[24][20] + coeff0_25*dmats0[25][20] + coeff0_26*dmats0[26][20] + coeff0_27*dmats0[27][20] + coeff0_28*dmats0[28][20] + coeff0_29*dmats0[29][20] + coeff0_30*dmats0[30][20] + coeff0_31*dmats0[31][20] + coeff0_32*dmats0[32][20] + coeff0_33*dmats0[33][20] + coeff0_34*dmats0[34][20];
          new_coeff0_21 = coeff0_0*dmats0[0][21] + coeff0_1*dmats0[1][21] + coeff0_2*dmats0[2][21] + coeff0_3*dmats0[3][21] + coeff0_4*dmats0[4][21] + coeff0_5*dmats0[5][21] + coeff0_6*dmats0[6][21] + coeff0_7*dmats0[7][21] + coeff0_8*dmats0[8][21] + coeff0_9*dmats0[9][21] + coeff0_10*dmats0[10][21] + coeff0_11*dmats0[11][21] + coeff0_12*dmats0[12][21] + coeff0_13*dmats0[13][21] + coeff0_14*dmats0[14][21] + coeff0_15*dmats0[15][21] + coeff0_16*dmats0[16][21] + coeff0_17*dmats0[17][21] + coeff0_18*dmats0[18][21] + coeff0_19*dmats0[19][21] + coeff0_20*dmats0[20][21] + coeff0_21*dmats0[21][21] + coeff0_22*dmats0[22][21] + coeff0_23*dmats0[23][21] + coeff0_24*dmats0[24][21] + coeff0_25*dmats0[25][21] + coeff0_26*dmats0[26][21] + coeff0_27*dmats0[27][21] + coeff0_28*dmats0[28][21] + coeff0_29*dmats0[29][21] + coeff0_30*dmats0[30][21] + coeff0_31*dmats0[31][21] + coeff0_32*dmats0[32][21] + coeff0_33*dmats0[33][21] + coeff0_34*dmats0[34][21];
          new_coeff0_22 = coeff0_0*dmats0[0][22] + coeff0_1*dmats0[1][22] + coeff0_2*dmats0[2][22] + coeff0_3*dmats0[3][22] + coeff0_4*dmats0[4][22] + coeff0_5*dmats0[5][22] + coeff0_6*dmats0[6][22] + coeff0_7*dmats0[7][22] + coeff0_8*dmats0[8][22] + coeff0_9*dmats0[9][22] + coeff0_10*dmats0[10][22] + coeff0_11*dmats0[11][22] + coeff0_12*dmats0[12][22] + coeff0_13*dmats0[13][22] + coeff0_14*dmats0[14][22] + coeff0_15*dmats0[15][22] + coeff0_16*dmats0[16][22] + coeff0_17*dmats0[17][22] + coeff0_18*dmats0[18][22] + coeff0_19*dmats0[19][22] + coeff0_20*dmats0[20][22] + coeff0_21*dmats0[21][22] + coeff0_22*dmats0[22][22] + coeff0_23*dmats0[23][22] + coeff0_24*dmats0[24][22] + coeff0_25*dmats0[25][22] + coeff0_26*dmats0[26][22] + coeff0_27*dmats0[27][22] + coeff0_28*dmats0[28][22] + coeff0_29*dmats0[29][22] + coeff0_30*dmats0[30][22] + coeff0_31*dmats0[31][22] + coeff0_32*dmats0[32][22] + coeff0_33*dmats0[33][22] + coeff0_34*dmats0[34][22];
          new_coeff0_23 = coeff0_0*dmats0[0][23] + coeff0_1*dmats0[1][23] + coeff0_2*dmats0[2][23] + coeff0_3*dmats0[3][23] + coeff0_4*dmats0[4][23] + coeff0_5*dmats0[5][23] + coeff0_6*dmats0[6][23] + coeff0_7*dmats0[7][23] + coeff0_8*dmats0[8][23] + coeff0_9*dmats0[9][23] + coeff0_10*dmats0[10][23] + coeff0_11*dmats0[11][23] + coeff0_12*dmats0[12][23] + coeff0_13*dmats0[13][23] + coeff0_14*dmats0[14][23] + coeff0_15*dmats0[15][23] + coeff0_16*dmats0[16][23] + coeff0_17*dmats0[17][23] + coeff0_18*dmats0[18][23] + coeff0_19*dmats0[19][23] + coeff0_20*dmats0[20][23] + coeff0_21*dmats0[21][23] + coeff0_22*dmats0[22][23] + coeff0_23*dmats0[23][23] + coeff0_24*dmats0[24][23] + coeff0_25*dmats0[25][23] + coeff0_26*dmats0[26][23] + coeff0_27*dmats0[27][23] + coeff0_28*dmats0[28][23] + coeff0_29*dmats0[29][23] + coeff0_30*dmats0[30][23] + coeff0_31*dmats0[31][23] + coeff0_32*dmats0[32][23] + coeff0_33*dmats0[33][23] + coeff0_34*dmats0[34][23];
          new_coeff0_24 = coeff0_0*dmats0[0][24] + coeff0_1*dmats0[1][24] + coeff0_2*dmats0[2][24] + coeff0_3*dmats0[3][24] + coeff0_4*dmats0[4][24] + coeff0_5*dmats0[5][24] + coeff0_6*dmats0[6][24] + coeff0_7*dmats0[7][24] + coeff0_8*dmats0[8][24] + coeff0_9*dmats0[9][24] + coeff0_10*dmats0[10][24] + coeff0_11*dmats0[11][24] + coeff0_12*dmats0[12][24] + coeff0_13*dmats0[13][24] + coeff0_14*dmats0[14][24] + coeff0_15*dmats0[15][24] + coeff0_16*dmats0[16][24] + coeff0_17*dmats0[17][24] + coeff0_18*dmats0[18][24] + coeff0_19*dmats0[19][24] + coeff0_20*dmats0[20][24] + coeff0_21*dmats0[21][24] + coeff0_22*dmats0[22][24] + coeff0_23*dmats0[23][24] + coeff0_24*dmats0[24][24] + coeff0_25*dmats0[25][24] + coeff0_26*dmats0[26][24] + coeff0_27*dmats0[27][24] + coeff0_28*dmats0[28][24] + coeff0_29*dmats0[29][24] + coeff0_30*dmats0[30][24] + coeff0_31*dmats0[31][24] + coeff0_32*dmats0[32][24] + coeff0_33*dmats0[33][24] + coeff0_34*dmats0[34][24];
          new_coeff0_25 = coeff0_0*dmats0[0][25] + coeff0_1*dmats0[1][25] + coeff0_2*dmats0[2][25] + coeff0_3*dmats0[3][25] + coeff0_4*dmats0[4][25] + coeff0_5*dmats0[5][25] + coeff0_6*dmats0[6][25] + coeff0_7*dmats0[7][25] + coeff0_8*dmats0[8][25] + coeff0_9*dmats0[9][25] + coeff0_10*dmats0[10][25] + coeff0_11*dmats0[11][25] + coeff0_12*dmats0[12][25] + coeff0_13*dmats0[13][25] + coeff0_14*dmats0[14][25] + coeff0_15*dmats0[15][25] + coeff0_16*dmats0[16][25] + coeff0_17*dmats0[17][25] + coeff0_18*dmats0[18][25] + coeff0_19*dmats0[19][25] + coeff0_20*dmats0[20][25] + coeff0_21*dmats0[21][25] + coeff0_22*dmats0[22][25] + coeff0_23*dmats0[23][25] + coeff0_24*dmats0[24][25] + coeff0_25*dmats0[25][25] + coeff0_26*dmats0[26][25] + coeff0_27*dmats0[27][25] + coeff0_28*dmats0[28][25] + coeff0_29*dmats0[29][25] + coeff0_30*dmats0[30][25] + coeff0_31*dmats0[31][25] + coeff0_32*dmats0[32][25] + coeff0_33*dmats0[33][25] + coeff0_34*dmats0[34][25];
          new_coeff0_26 = coeff0_0*dmats0[0][26] + coeff0_1*dmats0[1][26] + coeff0_2*dmats0[2][26] + coeff0_3*dmats0[3][26] + coeff0_4*dmats0[4][26] + coeff0_5*dmats0[5][26] + coeff0_6*dmats0[6][26] + coeff0_7*dmats0[7][26] + coeff0_8*dmats0[8][26] + coeff0_9*dmats0[9][26] + coeff0_10*dmats0[10][26] + coeff0_11*dmats0[11][26] + coeff0_12*dmats0[12][26] + coeff0_13*dmats0[13][26] + coeff0_14*dmats0[14][26] + coeff0_15*dmats0[15][26] + coeff0_16*dmats0[16][26] + coeff0_17*dmats0[17][26] + coeff0_18*dmats0[18][26] + coeff0_19*dmats0[19][26] + coeff0_20*dmats0[20][26] + coeff0_21*dmats0[21][26] + coeff0_22*dmats0[22][26] + coeff0_23*dmats0[23][26] + coeff0_24*dmats0[24][26] + coeff0_25*dmats0[25][26] + coeff0_26*dmats0[26][26] + coeff0_27*dmats0[27][26] + coeff0_28*dmats0[28][26] + coeff0_29*dmats0[29][26] + coeff0_30*dmats0[30][26] + coeff0_31*dmats0[31][26] + coeff0_32*dmats0[32][26] + coeff0_33*dmats0[33][26] + coeff0_34*dmats0[34][26];
          new_coeff0_27 = coeff0_0*dmats0[0][27] + coeff0_1*dmats0[1][27] + coeff0_2*dmats0[2][27] + coeff0_3*dmats0[3][27] + coeff0_4*dmats0[4][27] + coeff0_5*dmats0[5][27] + coeff0_6*dmats0[6][27] + coeff0_7*dmats0[7][27] + coeff0_8*dmats0[8][27] + coeff0_9*dmats0[9][27] + coeff0_10*dmats0[10][27] + coeff0_11*dmats0[11][27] + coeff0_12*dmats0[12][27] + coeff0_13*dmats0[13][27] + coeff0_14*dmats0[14][27] + coeff0_15*dmats0[15][27] + coeff0_16*dmats0[16][27] + coeff0_17*dmats0[17][27] + coeff0_18*dmats0[18][27] + coeff0_19*dmats0[19][27] + coeff0_20*dmats0[20][27] + coeff0_21*dmats0[21][27] + coeff0_22*dmats0[22][27] + coeff0_23*dmats0[23][27] + coeff0_24*dmats0[24][27] + coeff0_25*dmats0[25][27] + coeff0_26*dmats0[26][27] + coeff0_27*dmats0[27][27] + coeff0_28*dmats0[28][27] + coeff0_29*dmats0[29][27] + coeff0_30*dmats0[30][27] + coeff0_31*dmats0[31][27] + coeff0_32*dmats0[32][27] + coeff0_33*dmats0[33][27] + coeff0_34*dmats0[34][27];
          new_coeff0_28 = coeff0_0*dmats0[0][28] + coeff0_1*dmats0[1][28] + coeff0_2*dmats0[2][28] + coeff0_3*dmats0[3][28] + coeff0_4*dmats0[4][28] + coeff0_5*dmats0[5][28] + coeff0_6*dmats0[6][28] + coeff0_7*dmats0[7][28] + coeff0_8*dmats0[8][28] + coeff0_9*dmats0[9][28] + coeff0_10*dmats0[10][28] + coeff0_11*dmats0[11][28] + coeff0_12*dmats0[12][28] + coeff0_13*dmats0[13][28] + coeff0_14*dmats0[14][28] + coeff0_15*dmats0[15][28] + coeff0_16*dmats0[16][28] + coeff0_17*dmats0[17][28] + coeff0_18*dmats0[18][28] + coeff0_19*dmats0[19][28] + coeff0_20*dmats0[20][28] + coeff0_21*dmats0[21][28] + coeff0_22*dmats0[22][28] + coeff0_23*dmats0[23][28] + coeff0_24*dmats0[24][28] + coeff0_25*dmats0[25][28] + coeff0_26*dmats0[26][28] + coeff0_27*dmats0[27][28] + coeff0_28*dmats0[28][28] + coeff0_29*dmats0[29][28] + coeff0_30*dmats0[30][28] + coeff0_31*dmats0[31][28] + coeff0_32*dmats0[32][28] + coeff0_33*dmats0[33][28] + coeff0_34*dmats0[34][28];
          new_coeff0_29 = coeff0_0*dmats0[0][29] + coeff0_1*dmats0[1][29] + coeff0_2*dmats0[2][29] + coeff0_3*dmats0[3][29] + coeff0_4*dmats0[4][29] + coeff0_5*dmats0[5][29] + coeff0_6*dmats0[6][29] + coeff0_7*dmats0[7][29] + coeff0_8*dmats0[8][29] + coeff0_9*dmats0[9][29] + coeff0_10*dmats0[10][29] + coeff0_11*dmats0[11][29] + coeff0_12*dmats0[12][29] + coeff0_13*dmats0[13][29] + coeff0_14*dmats0[14][29] + coeff0_15*dmats0[15][29] + coeff0_16*dmats0[16][29] + coeff0_17*dmats0[17][29] + coeff0_18*dmats0[18][29] + coeff0_19*dmats0[19][29] + coeff0_20*dmats0[20][29] + coeff0_21*dmats0[21][29] + coeff0_22*dmats0[22][29] + coeff0_23*dmats0[23][29] + coeff0_24*dmats0[24][29] + coeff0_25*dmats0[25][29] + coeff0_26*dmats0[26][29] + coeff0_27*dmats0[27][29] + coeff0_28*dmats0[28][29] + coeff0_29*dmats0[29][29] + coeff0_30*dmats0[30][29] + coeff0_31*dmats0[31][29] + coeff0_32*dmats0[32][29] + coeff0_33*dmats0[33][29] + coeff0_34*dmats0[34][29];
          new_coeff0_30 = coeff0_0*dmats0[0][30] + coeff0_1*dmats0[1][30] + coeff0_2*dmats0[2][30] + coeff0_3*dmats0[3][30] + coeff0_4*dmats0[4][30] + coeff0_5*dmats0[5][30] + coeff0_6*dmats0[6][30] + coeff0_7*dmats0[7][30] + coeff0_8*dmats0[8][30] + coeff0_9*dmats0[9][30] + coeff0_10*dmats0[10][30] + coeff0_11*dmats0[11][30] + coeff0_12*dmats0[12][30] + coeff0_13*dmats0[13][30] + coeff0_14*dmats0[14][30] + coeff0_15*dmats0[15][30] + coeff0_16*dmats0[16][30] + coeff0_17*dmats0[17][30] + coeff0_18*dmats0[18][30] + coeff0_19*dmats0[19][30] + coeff0_20*dmats0[20][30] + coeff0_21*dmats0[21][30] + coeff0_22*dmats0[22][30] + coeff0_23*dmats0[23][30] + coeff0_24*dmats0[24][30] + coeff0_25*dmats0[25][30] + coeff0_26*dmats0[26][30] + coeff0_27*dmats0[27][30] + coeff0_28*dmats0[28][30] + coeff0_29*dmats0[29][30] + coeff0_30*dmats0[30][30] + coeff0_31*dmats0[31][30] + coeff0_32*dmats0[32][30] + coeff0_33*dmats0[33][30] + coeff0_34*dmats0[34][30];
          new_coeff0_31 = coeff0_0*dmats0[0][31] + coeff0_1*dmats0[1][31] + coeff0_2*dmats0[2][31] + coeff0_3*dmats0[3][31] + coeff0_4*dmats0[4][31] + coeff0_5*dmats0[5][31] + coeff0_6*dmats0[6][31] + coeff0_7*dmats0[7][31] + coeff0_8*dmats0[8][31] + coeff0_9*dmats0[9][31] + coeff0_10*dmats0[10][31] + coeff0_11*dmats0[11][31] + coeff0_12*dmats0[12][31] + coeff0_13*dmats0[13][31] + coeff0_14*dmats0[14][31] + coeff0_15*dmats0[15][31] + coeff0_16*dmats0[16][31] + coeff0_17*dmats0[17][31] + coeff0_18*dmats0[18][31] + coeff0_19*dmats0[19][31] + coeff0_20*dmats0[20][31] + coeff0_21*dmats0[21][31] + coeff0_22*dmats0[22][31] + coeff0_23*dmats0[23][31] + coeff0_24*dmats0[24][31] + coeff0_25*dmats0[25][31] + coeff0_26*dmats0[26][31] + coeff0_27*dmats0[27][31] + coeff0_28*dmats0[28][31] + coeff0_29*dmats0[29][31] + coeff0_30*dmats0[30][31] + coeff0_31*dmats0[31][31] + coeff0_32*dmats0[32][31] + coeff0_33*dmats0[33][31] + coeff0_34*dmats0[34][31];
          new_coeff0_32 = coeff0_0*dmats0[0][32] + coeff0_1*dmats0[1][32] + coeff0_2*dmats0[2][32] + coeff0_3*dmats0[3][32] + coeff0_4*dmats0[4][32] + coeff0_5*dmats0[5][32] + coeff0_6*dmats0[6][32] + coeff0_7*dmats0[7][32] + coeff0_8*dmats0[8][32] + coeff0_9*dmats0[9][32] + coeff0_10*dmats0[10][32] + coeff0_11*dmats0[11][32] + coeff0_12*dmats0[12][32] + coeff0_13*dmats0[13][32] + coeff0_14*dmats0[14][32] + coeff0_15*dmats0[15][32] + coeff0_16*dmats0[16][32] + coeff0_17*dmats0[17][32] + coeff0_18*dmats0[18][32] + coeff0_19*dmats0[19][32] + coeff0_20*dmats0[20][32] + coeff0_21*dmats0[21][32] + coeff0_22*dmats0[22][32] + coeff0_23*dmats0[23][32] + coeff0_24*dmats0[24][32] + coeff0_25*dmats0[25][32] + coeff0_26*dmats0[26][32] + coeff0_27*dmats0[27][32] + coeff0_28*dmats0[28][32] + coeff0_29*dmats0[29][32] + coeff0_30*dmats0[30][32] + coeff0_31*dmats0[31][32] + coeff0_32*dmats0[32][32] + coeff0_33*dmats0[33][32] + coeff0_34*dmats0[34][32];
          new_coeff0_33 = coeff0_0*dmats0[0][33] + coeff0_1*dmats0[1][33] + coeff0_2*dmats0[2][33] + coeff0_3*dmats0[3][33] + coeff0_4*dmats0[4][33] + coeff0_5*dmats0[5][33] + coeff0_6*dmats0[6][33] + coeff0_7*dmats0[7][33] + coeff0_8*dmats0[8][33] + coeff0_9*dmats0[9][33] + coeff0_10*dmats0[10][33] + coeff0_11*dmats0[11][33] + coeff0_12*dmats0[12][33] + coeff0_13*dmats0[13][33] + coeff0_14*dmats0[14][33] + coeff0_15*dmats0[15][33] + coeff0_16*dmats0[16][33] + coeff0_17*dmats0[17][33] + coeff0_18*dmats0[18][33] + coeff0_19*dmats0[19][33] + coeff0_20*dmats0[20][33] + coeff0_21*dmats0[21][33] + coeff0_22*dmats0[22][33] + coeff0_23*dmats0[23][33] + coeff0_24*dmats0[24][33] + coeff0_25*dmats0[25][33] + coeff0_26*dmats0[26][33] + coeff0_27*dmats0[27][33] + coeff0_28*dmats0[28][33] + coeff0_29*dmats0[29][33] + coeff0_30*dmats0[30][33] + coeff0_31*dmats0[31][33] + coeff0_32*dmats0[32][33] + coeff0_33*dmats0[33][33] + coeff0_34*dmats0[34][33];
          new_coeff0_34 = coeff0_0*dmats0[0][34] + coeff0_1*dmats0[1][34] + coeff0_2*dmats0[2][34] + coeff0_3*dmats0[3][34] + coeff0_4*dmats0[4][34] + coeff0_5*dmats0[5][34] + coeff0_6*dmats0[6][34] + coeff0_7*dmats0[7][34] + coeff0_8*dmats0[8][34] + coeff0_9*dmats0[9][34] + coeff0_10*dmats0[10][34] + coeff0_11*dmats0[11][34] + coeff0_12*dmats0[12][34] + coeff0_13*dmats0[13][34] + coeff0_14*dmats0[14][34] + coeff0_15*dmats0[15][34] + coeff0_16*dmats0[16][34] + coeff0_17*dmats0[17][34] + coeff0_18*dmats0[18][34] + coeff0_19*dmats0[19][34] + coeff0_20*dmats0[20][34] + coeff0_21*dmats0[21][34] + coeff0_22*dmats0[22][34] + coeff0_23*dmats0[23][34] + coeff0_24*dmats0[24][34] + coeff0_25*dmats0[25][34] + coeff0_26*dmats0[26][34] + coeff0_27*dmats0[27][34] + coeff0_28*dmats0[28][34] + coeff0_29*dmats0[29][34] + coeff0_30*dmats0[30][34] + coeff0_31*dmats0[31][34] + coeff0_32*dmats0[32][34] + coeff0_33*dmats0[33][34] + coeff0_34*dmats0[34][34];
        }
        if(combinations[deriv_num][j] == 1)
        {
          new_coeff0_0 = coeff0_0*dmats1[0][0] + coeff0_1*dmats1[1][0] + coeff0_2*dmats1[2][0] + coeff0_3*dmats1[3][0] + coeff0_4*dmats1[4][0] + coeff0_5*dmats1[5][0] + coeff0_6*dmats1[6][0] + coeff0_7*dmats1[7][0] + coeff0_8*dmats1[8][0] + coeff0_9*dmats1[9][0] + coeff0_10*dmats1[10][0] + coeff0_11*dmats1[11][0] + coeff0_12*dmats1[12][0] + coeff0_13*dmats1[13][0] + coeff0_14*dmats1[14][0] + coeff0_15*dmats1[15][0] + coeff0_16*dmats1[16][0] + coeff0_17*dmats1[17][0] + coeff0_18*dmats1[18][0] + coeff0_19*dmats1[19][0] + coeff0_20*dmats1[20][0] + coeff0_21*dmats1[21][0] + coeff0_22*dmats1[22][0] + coeff0_23*dmats1[23][0] + coeff0_24*dmats1[24][0] + coeff0_25*dmats1[25][0] + coeff0_26*dmats1[26][0] + coeff0_27*dmats1[27][0] + coeff0_28*dmats1[28][0] + coeff0_29*dmats1[29][0] + coeff0_30*dmats1[30][0] + coeff0_31*dmats1[31][0] + coeff0_32*dmats1[32][0] + coeff0_33*dmats1[33][0] + coeff0_34*dmats1[34][0];
          new_coeff0_1 = coeff0_0*dmats1[0][1] + coeff0_1*dmats1[1][1] + coeff0_2*dmats1[2][1] + coeff0_3*dmats1[3][1] + coeff0_4*dmats1[4][1] + coeff0_5*dmats1[5][1] + coeff0_6*dmats1[6][1] + coeff0_7*dmats1[7][1] + coeff0_8*dmats1[8][1] + coeff0_9*dmats1[9][1] + coeff0_10*dmats1[10][1] + coeff0_11*dmats1[11][1] + coeff0_12*dmats1[12][1] + coeff0_13*dmats1[13][1] + coeff0_14*dmats1[14][1] + coeff0_15*dmats1[15][1] + coeff0_16*dmats1[16][1] + coeff0_17*dmats1[17][1] + coeff0_18*dmats1[18][1] + coeff0_19*dmats1[19][1] + coeff0_20*dmats1[20][1] + coeff0_21*dmats1[21][1] + coeff0_22*dmats1[22][1] + coeff0_23*dmats1[23][1] + coeff0_24*dmats1[24][1] + coeff0_25*dmats1[25][1] + coeff0_26*dmats1[26][1] + coeff0_27*dmats1[27][1] + coeff0_28*dmats1[28][1] + coeff0_29*dmats1[29][1] + coeff0_30*dmats1[30][1] + coeff0_31*dmats1[31][1] + coeff0_32*dmats1[32][1] + coeff0_33*dmats1[33][1] + coeff0_34*dmats1[34][1];
          new_coeff0_2 = coeff0_0*dmats1[0][2] + coeff0_1*dmats1[1][2] + coeff0_2*dmats1[2][2] + coeff0_3*dmats1[3][2] + coeff0_4*dmats1[4][2] + coeff0_5*dmats1[5][2] + coeff0_6*dmats1[6][2] + coeff0_7*dmats1[7][2] + coeff0_8*dmats1[8][2] + coeff0_9*dmats1[9][2] + coeff0_10*dmats1[10][2] + coeff0_11*dmats1[11][2] + coeff0_12*dmats1[12][2] + coeff0_13*dmats1[13][2] + coeff0_14*dmats1[14][2] + coeff0_15*dmats1[15][2] + coeff0_16*dmats1[16][2] + coeff0_17*dmats1[17][2] + coeff0_18*dmats1[18][2] + coeff0_19*dmats1[19][2] + coeff0_20*dmats1[20][2] + coeff0_21*dmats1[21][2] + coeff0_22*dmats1[22][2] + coeff0_23*dmats1[23][2] + coeff0_24*dmats1[24][2] + coeff0_25*dmats1[25][2] + coeff0_26*dmats1[26][2] + coeff0_27*dmats1[27][2] + coeff0_28*dmats1[28][2] + coeff0_29*dmats1[29][2] + coeff0_30*dmats1[30][2] + coeff0_31*dmats1[31][2] + coeff0_32*dmats1[32][2] + coeff0_33*dmats1[33][2] + coeff0_34*dmats1[34][2];
          new_coeff0_3 = coeff0_0*dmats1[0][3] + coeff0_1*dmats1[1][3] + coeff0_2*dmats1[2][3] + coeff0_3*dmats1[3][3] + coeff0_4*dmats1[4][3] + coeff0_5*dmats1[5][3] + coeff0_6*dmats1[6][3] + coeff0_7*dmats1[7][3] + coeff0_8*dmats1[8][3] + coeff0_9*dmats1[9][3] + coeff0_10*dmats1[10][3] + coeff0_11*dmats1[11][3] + coeff0_12*dmats1[12][3] + coeff0_13*dmats1[13][3] + coeff0_14*dmats1[14][3] + coeff0_15*dmats1[15][3] + coeff0_16*dmats1[16][3] + coeff0_17*dmats1[17][3] + coeff0_18*dmats1[18][3] + coeff0_19*dmats1[19][3] + coeff0_20*dmats1[20][3] + coeff0_21*dmats1[21][3] + coeff0_22*dmats1[22][3] + coeff0_23*dmats1[23][3] + coeff0_24*dmats1[24][3] + coeff0_25*dmats1[25][3] + coeff0_26*dmats1[26][3] + coeff0_27*dmats1[27][3] + coeff0_28*dmats1[28][3] + coeff0_29*dmats1[29][3] + coeff0_30*dmats1[30][3] + coeff0_31*dmats1[31][3] + coeff0_32*dmats1[32][3] + coeff0_33*dmats1[33][3] + coeff0_34*dmats1[34][3];
          new_coeff0_4 = coeff0_0*dmats1[0][4] + coeff0_1*dmats1[1][4] + coeff0_2*dmats1[2][4] + coeff0_3*dmats1[3][4] + coeff0_4*dmats1[4][4] + coeff0_5*dmats1[5][4] + coeff0_6*dmats1[6][4] + coeff0_7*dmats1[7][4] + coeff0_8*dmats1[8][4] + coeff0_9*dmats1[9][4] + coeff0_10*dmats1[10][4] + coeff0_11*dmats1[11][4] + coeff0_12*dmats1[12][4] + coeff0_13*dmats1[13][4] + coeff0_14*dmats1[14][4] + coeff0_15*dmats1[15][4] + coeff0_16*dmats1[16][4] + coeff0_17*dmats1[17][4] + coeff0_18*dmats1[18][4] + coeff0_19*dmats1[19][4] + coeff0_20*dmats1[20][4] + coeff0_21*dmats1[21][4] + coeff0_22*dmats1[22][4] + coeff0_23*dmats1[23][4] + coeff0_24*dmats1[24][4] + coeff0_25*dmats1[25][4] + coeff0_26*dmats1[26][4] + coeff0_27*dmats1[27][4] + coeff0_28*dmats1[28][4] + coeff0_29*dmats1[29][4] + coeff0_30*dmats1[30][4] + coeff0_31*dmats1[31][4] + coeff0_32*dmats1[32][4] + coeff0_33*dmats1[33][4] + coeff0_34*dmats1[34][4];
          new_coeff0_5 = coeff0_0*dmats1[0][5] + coeff0_1*dmats1[1][5] + coeff0_2*dmats1[2][5] + coeff0_3*dmats1[3][5] + coeff0_4*dmats1[4][5] + coeff0_5*dmats1[5][5] + coeff0_6*dmats1[6][5] + coeff0_7*dmats1[7][5] + coeff0_8*dmats1[8][5] + coeff0_9*dmats1[9][5] + coeff0_10*dmats1[10][5] + coeff0_11*dmats1[11][5] + coeff0_12*dmats1[12][5] + coeff0_13*dmats1[13][5] + coeff0_14*dmats1[14][5] + coeff0_15*dmats1[15][5] + coeff0_16*dmats1[16][5] + coeff0_17*dmats1[17][5] + coeff0_18*dmats1[18][5] + coeff0_19*dmats1[19][5] + coeff0_20*dmats1[20][5] + coeff0_21*dmats1[21][5] + coeff0_22*dmats1[22][5] + coeff0_23*dmats1[23][5] + coeff0_24*dmats1[24][5] + coeff0_25*dmats1[25][5] + coeff0_26*dmats1[26][5] + coeff0_27*dmats1[27][5] + coeff0_28*dmats1[28][5] + coeff0_29*dmats1[29][5] + coeff0_30*dmats1[30][5] + coeff0_31*dmats1[31][5] + coeff0_32*dmats1[32][5] + coeff0_33*dmats1[33][5] + coeff0_34*dmats1[34][5];
          new_coeff0_6 = coeff0_0*dmats1[0][6] + coeff0_1*dmats1[1][6] + coeff0_2*dmats1[2][6] + coeff0_3*dmats1[3][6] + coeff0_4*dmats1[4][6] + coeff0_5*dmats1[5][6] + coeff0_6*dmats1[6][6] + coeff0_7*dmats1[7][6] + coeff0_8*dmats1[8][6] + coeff0_9*dmats1[9][6] + coeff0_10*dmats1[10][6] + coeff0_11*dmats1[11][6] + coeff0_12*dmats1[12][6] + coeff0_13*dmats1[13][6] + coeff0_14*dmats1[14][6] + coeff0_15*dmats1[15][6] + coeff0_16*dmats1[16][6] + coeff0_17*dmats1[17][6] + coeff0_18*dmats1[18][6] + coeff0_19*dmats1[19][6] + coeff0_20*dmats1[20][6] + coeff0_21*dmats1[21][6] + coeff0_22*dmats1[22][6] + coeff0_23*dmats1[23][6] + coeff0_24*dmats1[24][6] + coeff0_25*dmats1[25][6] + coeff0_26*dmats1[26][6] + coeff0_27*dmats1[27][6] + coeff0_28*dmats1[28][6] + coeff0_29*dmats1[29][6] + coeff0_30*dmats1[30][6] + coeff0_31*dmats1[31][6] + coeff0_32*dmats1[32][6] + coeff0_33*dmats1[33][6] + coeff0_34*dmats1[34][6];
          new_coeff0_7 = coeff0_0*dmats1[0][7] + coeff0_1*dmats1[1][7] + coeff0_2*dmats1[2][7] + coeff0_3*dmats1[3][7] + coeff0_4*dmats1[4][7] + coeff0_5*dmats1[5][7] + coeff0_6*dmats1[6][7] + coeff0_7*dmats1[7][7] + coeff0_8*dmats1[8][7] + coeff0_9*dmats1[9][7] + coeff0_10*dmats1[10][7] + coeff0_11*dmats1[11][7] + coeff0_12*dmats1[12][7] + coeff0_13*dmats1[13][7] + coeff0_14*dmats1[14][7] + coeff0_15*dmats1[15][7] + coeff0_16*dmats1[16][7] + coeff0_17*dmats1[17][7] + coeff0_18*dmats1[18][7] + coeff0_19*dmats1[19][7] + coeff0_20*dmats1[20][7] + coeff0_21*dmats1[21][7] + coeff0_22*dmats1[22][7] + coeff0_23*dmats1[23][7] + coeff0_24*dmats1[24][7] + coeff0_25*dmats1[25][7] + coeff0_26*dmats1[26][7] + coeff0_27*dmats1[27][7] + coeff0_28*dmats1[28][7] + coeff0_29*dmats1[29][7] + coeff0_30*dmats1[30][7] + coeff0_31*dmats1[31][7] + coeff0_32*dmats1[32][7] + coeff0_33*dmats1[33][7] + coeff0_34*dmats1[34][7];
          new_coeff0_8 = coeff0_0*dmats1[0][8] + coeff0_1*dmats1[1][8] + coeff0_2*dmats1[2][8] + coeff0_3*dmats1[3][8] + coeff0_4*dmats1[4][8] + coeff0_5*dmats1[5][8] + coeff0_6*dmats1[6][8] + coeff0_7*dmats1[7][8] + coeff0_8*dmats1[8][8] + coeff0_9*dmats1[9][8] + coeff0_10*dmats1[10][8] + coeff0_11*dmats1[11][8] + coeff0_12*dmats1[12][8] + coeff0_13*dmats1[13][8] + coeff0_14*dmats1[14][8] + coeff0_15*dmats1[15][8] + coeff0_16*dmats1[16][8] + coeff0_17*dmats1[17][8] + coeff0_18*dmats1[18][8] + coeff0_19*dmats1[19][8] + coeff0_20*dmats1[20][8] + coeff0_21*dmats1[21][8] + coeff0_22*dmats1[22][8] + coeff0_23*dmats1[23][8] + coeff0_24*dmats1[24][8] + coeff0_25*dmats1[25][8] + coeff0_26*dmats1[26][8] + coeff0_27*dmats1[27][8] + coeff0_28*dmats1[28][8] + coeff0_29*dmats1[29][8] + coeff0_30*dmats1[30][8] + coeff0_31*dmats1[31][8] + coeff0_32*dmats1[32][8] + coeff0_33*dmats1[33][8] + coeff0_34*dmats1[34][8];
          new_coeff0_9 = coeff0_0*dmats1[0][9] + coeff0_1*dmats1[1][9] + coeff0_2*dmats1[2][9] + coeff0_3*dmats1[3][9] + coeff0_4*dmats1[4][9] + coeff0_5*dmats1[5][9] + coeff0_6*dmats1[6][9] + coeff0_7*dmats1[7][9] + coeff0_8*dmats1[8][9] + coeff0_9*dmats1[9][9] + coeff0_10*dmats1[10][9] + coeff0_11*dmats1[11][9] + coeff0_12*dmats1[12][9] + coeff0_13*dmats1[13][9] + coeff0_14*dmats1[14][9] + coeff0_15*dmats1[15][9] + coeff0_16*dmats1[16][9] + coeff0_17*dmats1[17][9] + coeff0_18*dmats1[18][9] + coeff0_19*dmats1[19][9] + coeff0_20*dmats1[20][9] + coeff0_21*dmats1[21][9] + coeff0_22*dmats1[22][9] + coeff0_23*dmats1[23][9] + coeff0_24*dmats1[24][9] + coeff0_25*dmats1[25][9] + coeff0_26*dmats1[26][9] + coeff0_27*dmats1[27][9] + coeff0_28*dmats1[28][9] + coeff0_29*dmats1[29][9] + coeff0_30*dmats1[30][9] + coeff0_31*dmats1[31][9] + coeff0_32*dmats1[32][9] + coeff0_33*dmats1[33][9] + coeff0_34*dmats1[34][9];
          new_coeff0_10 = coeff0_0*dmats1[0][10] + coeff0_1*dmats1[1][10] + coeff0_2*dmats1[2][10] + coeff0_3*dmats1[3][10] + coeff0_4*dmats1[4][10] + coeff0_5*dmats1[5][10] + coeff0_6*dmats1[6][10] + coeff0_7*dmats1[7][10] + coeff0_8*dmats1[8][10] + coeff0_9*dmats1[9][10] + coeff0_10*dmats1[10][10] + coeff0_11*dmats1[11][10] + coeff0_12*dmats1[12][10] + coeff0_13*dmats1[13][10] + coeff0_14*dmats1[14][10] + coeff0_15*dmats1[15][10] + coeff0_16*dmats1[16][10] + coeff0_17*dmats1[17][10] + coeff0_18*dmats1[18][10] + coeff0_19*dmats1[19][10] + coeff0_20*dmats1[20][10] + coeff0_21*dmats1[21][10] + coeff0_22*dmats1[22][10] + coeff0_23*dmats1[23][10] + coeff0_24*dmats1[24][10] + coeff0_25*dmats1[25][10] + coeff0_26*dmats1[26][10] + coeff0_27*dmats1[27][10] + coeff0_28*dmats1[28][10] + coeff0_29*dmats1[29][10] + coeff0_30*dmats1[30][10] + coeff0_31*dmats1[31][10] + coeff0_32*dmats1[32][10] + coeff0_33*dmats1[33][10] + coeff0_34*dmats1[34][10];
          new_coeff0_11 = coeff0_0*dmats1[0][11] + coeff0_1*dmats1[1][11] + coeff0_2*dmats1[2][11] + coeff0_3*dmats1[3][11] + coeff0_4*dmats1[4][11] + coeff0_5*dmats1[5][11] + coeff0_6*dmats1[6][11] + coeff0_7*dmats1[7][11] + coeff0_8*dmats1[8][11] + coeff0_9*dmats1[9][11] + coeff0_10*dmats1[10][11] + coeff0_11*dmats1[11][11] + coeff0_12*dmats1[12][11] + coeff0_13*dmats1[13][11] + coeff0_14*dmats1[14][11] + coeff0_15*dmats1[15][11] + coeff0_16*dmats1[16][11] + coeff0_17*dmats1[17][11] + coeff0_18*dmats1[18][11] + coeff0_19*dmats1[19][11] + coeff0_20*dmats1[20][11] + coeff0_21*dmats1[21][11] + coeff0_22*dmats1[22][11] + coeff0_23*dmats1[23][11] + coeff0_24*dmats1[24][11] + coeff0_25*dmats1[25][11] + coeff0_26*dmats1[26][11] + coeff0_27*dmats1[27][11] + coeff0_28*dmats1[28][11] + coeff0_29*dmats1[29][11] + coeff0_30*dmats1[30][11] + coeff0_31*dmats1[31][11] + coeff0_32*dmats1[32][11] + coeff0_33*dmats1[33][11] + coeff0_34*dmats1[34][11];
          new_coeff0_12 = coeff0_0*dmats1[0][12] + coeff0_1*dmats1[1][12] + coeff0_2*dmats1[2][12] + coeff0_3*dmats1[3][12] + coeff0_4*dmats1[4][12] + coeff0_5*dmats1[5][12] + coeff0_6*dmats1[6][12] + coeff0_7*dmats1[7][12] + coeff0_8*dmats1[8][12] + coeff0_9*dmats1[9][12] + coeff0_10*dmats1[10][12] + coeff0_11*dmats1[11][12] + coeff0_12*dmats1[12][12] + coeff0_13*dmats1[13][12] + coeff0_14*dmats1[14][12] + coeff0_15*dmats1[15][12] + coeff0_16*dmats1[16][12] + coeff0_17*dmats1[17][12] + coeff0_18*dmats1[18][12] + coeff0_19*dmats1[19][12] + coeff0_20*dmats1[20][12] + coeff0_21*dmats1[21][12] + coeff0_22*dmats1[22][12] + coeff0_23*dmats1[23][12] + coeff0_24*dmats1[24][12] + coeff0_25*dmats1[25][12] + coeff0_26*dmats1[26][12] + coeff0_27*dmats1[27][12] + coeff0_28*dmats1[28][12] + coeff0_29*dmats1[29][12] + coeff0_30*dmats1[30][12] + coeff0_31*dmats1[31][12] + coeff0_32*dmats1[32][12] + coeff0_33*dmats1[33][12] + coeff0_34*dmats1[34][12];
          new_coeff0_13 = coeff0_0*dmats1[0][13] + coeff0_1*dmats1[1][13] + coeff0_2*dmats1[2][13] + coeff0_3*dmats1[3][13] + coeff0_4*dmats1[4][13] + coeff0_5*dmats1[5][13] + coeff0_6*dmats1[6][13] + coeff0_7*dmats1[7][13] + coeff0_8*dmats1[8][13] + coeff0_9*dmats1[9][13] + coeff0_10*dmats1[10][13] + coeff0_11*dmats1[11][13] + coeff0_12*dmats1[12][13] + coeff0_13*dmats1[13][13] + coeff0_14*dmats1[14][13] + coeff0_15*dmats1[15][13] + coeff0_16*dmats1[16][13] + coeff0_17*dmats1[17][13] + coeff0_18*dmats1[18][13] + coeff0_19*dmats1[19][13] + coeff0_20*dmats1[20][13] + coeff0_21*dmats1[21][13] + coeff0_22*dmats1[22][13] + coeff0_23*dmats1[23][13] + coeff0_24*dmats1[24][13] + coeff0_25*dmats1[25][13] + coeff0_26*dmats1[26][13] + coeff0_27*dmats1[27][13] + coeff0_28*dmats1[28][13] + coeff0_29*dmats1[29][13] + coeff0_30*dmats1[30][13] + coeff0_31*dmats1[31][13] + coeff0_32*dmats1[32][13] + coeff0_33*dmats1[33][13] + coeff0_34*dmats1[34][13];
          new_coeff0_14 = coeff0_0*dmats1[0][14] + coeff0_1*dmats1[1][14] + coeff0_2*dmats1[2][14] + coeff0_3*dmats1[3][14] + coeff0_4*dmats1[4][14] + coeff0_5*dmats1[5][14] + coeff0_6*dmats1[6][14] + coeff0_7*dmats1[7][14] + coeff0_8*dmats1[8][14] + coeff0_9*dmats1[9][14] + coeff0_10*dmats1[10][14] + coeff0_11*dmats1[11][14] + coeff0_12*dmats1[12][14] + coeff0_13*dmats1[13][14] + coeff0_14*dmats1[14][14] + coeff0_15*dmats1[15][14] + coeff0_16*dmats1[16][14] + coeff0_17*dmats1[17][14] + coeff0_18*dmats1[18][14] + coeff0_19*dmats1[19][14] + coeff0_20*dmats1[20][14] + coeff0_21*dmats1[21][14] + coeff0_22*dmats1[22][14] + coeff0_23*dmats1[23][14] + coeff0_24*dmats1[24][14] + coeff0_25*dmats1[25][14] + coeff0_26*dmats1[26][14] + coeff0_27*dmats1[27][14] + coeff0_28*dmats1[28][14] + coeff0_29*dmats1[29][14] + coeff0_30*dmats1[30][14] + coeff0_31*dmats1[31][14] + coeff0_32*dmats1[32][14] + coeff0_33*dmats1[33][14] + coeff0_34*dmats1[34][14];
          new_coeff0_15 = coeff0_0*dmats1[0][15] + coeff0_1*dmats1[1][15] + coeff0_2*dmats1[2][15] + coeff0_3*dmats1[3][15] + coeff0_4*dmats1[4][15] + coeff0_5*dmats1[5][15] + coeff0_6*dmats1[6][15] + coeff0_7*dmats1[7][15] + coeff0_8*dmats1[8][15] + coeff0_9*dmats1[9][15] + coeff0_10*dmats1[10][15] + coeff0_11*dmats1[11][15] + coeff0_12*dmats1[12][15] + coeff0_13*dmats1[13][15] + coeff0_14*dmats1[14][15] + coeff0_15*dmats1[15][15] + coeff0_16*dmats1[16][15] + coeff0_17*dmats1[17][15] + coeff0_18*dmats1[18][15] + coeff0_19*dmats1[19][15] + coeff0_20*dmats1[20][15] + coeff0_21*dmats1[21][15] + coeff0_22*dmats1[22][15] + coeff0_23*dmats1[23][15] + coeff0_24*dmats1[24][15] + coeff0_25*dmats1[25][15] + coeff0_26*dmats1[26][15] + coeff0_27*dmats1[27][15] + coeff0_28*dmats1[28][15] + coeff0_29*dmats1[29][15] + coeff0_30*dmats1[30][15] + coeff0_31*dmats1[31][15] + coeff0_32*dmats1[32][15] + coeff0_33*dmats1[33][15] + coeff0_34*dmats1[34][15];
          new_coeff0_16 = coeff0_0*dmats1[0][16] + coeff0_1*dmats1[1][16] + coeff0_2*dmats1[2][16] + coeff0_3*dmats1[3][16] + coeff0_4*dmats1[4][16] + coeff0_5*dmats1[5][16] + coeff0_6*dmats1[6][16] + coeff0_7*dmats1[7][16] + coeff0_8*dmats1[8][16] + coeff0_9*dmats1[9][16] + coeff0_10*dmats1[10][16] + coeff0_11*dmats1[11][16] + coeff0_12*dmats1[12][16] + coeff0_13*dmats1[13][16] + coeff0_14*dmats1[14][16] + coeff0_15*dmats1[15][16] + coeff0_16*dmats1[16][16] + coeff0_17*dmats1[17][16] + coeff0_18*dmats1[18][16] + coeff0_19*dmats1[19][16] + coeff0_20*dmats1[20][16] + coeff0_21*dmats1[21][16] + coeff0_22*dmats1[22][16] + coeff0_23*dmats1[23][16] + coeff0_24*dmats1[24][16] + coeff0_25*dmats1[25][16] + coeff0_26*dmats1[26][16] + coeff0_27*dmats1[27][16] + coeff0_28*dmats1[28][16] + coeff0_29*dmats1[29][16] + coeff0_30*dmats1[30][16] + coeff0_31*dmats1[31][16] + coeff0_32*dmats1[32][16] + coeff0_33*dmats1[33][16] + coeff0_34*dmats1[34][16];
          new_coeff0_17 = coeff0_0*dmats1[0][17] + coeff0_1*dmats1[1][17] + coeff0_2*dmats1[2][17] + coeff0_3*dmats1[3][17] + coeff0_4*dmats1[4][17] + coeff0_5*dmats1[5][17] + coeff0_6*dmats1[6][17] + coeff0_7*dmats1[7][17] + coeff0_8*dmats1[8][17] + coeff0_9*dmats1[9][17] + coeff0_10*dmats1[10][17] + coeff0_11*dmats1[11][17] + coeff0_12*dmats1[12][17] + coeff0_13*dmats1[13][17] + coeff0_14*dmats1[14][17] + coeff0_15*dmats1[15][17] + coeff0_16*dmats1[16][17] + coeff0_17*dmats1[17][17] + coeff0_18*dmats1[18][17] + coeff0_19*dmats1[19][17] + coeff0_20*dmats1[20][17] + coeff0_21*dmats1[21][17] + coeff0_22*dmats1[22][17] + coeff0_23*dmats1[23][17] + coeff0_24*dmats1[24][17] + coeff0_25*dmats1[25][17] + coeff0_26*dmats1[26][17] + coeff0_27*dmats1[27][17] + coeff0_28*dmats1[28][17] + coeff0_29*dmats1[29][17] + coeff0_30*dmats1[30][17] + coeff0_31*dmats1[31][17] + coeff0_32*dmats1[32][17] + coeff0_33*dmats1[33][17] + coeff0_34*dmats1[34][17];
          new_coeff0_18 = coeff0_0*dmats1[0][18] + coeff0_1*dmats1[1][18] + coeff0_2*dmats1[2][18] + coeff0_3*dmats1[3][18] + coeff0_4*dmats1[4][18] + coeff0_5*dmats1[5][18] + coeff0_6*dmats1[6][18] + coeff0_7*dmats1[7][18] + coeff0_8*dmats1[8][18] + coeff0_9*dmats1[9][18] + coeff0_10*dmats1[10][18] + coeff0_11*dmats1[11][18] + coeff0_12*dmats1[12][18] + coeff0_13*dmats1[13][18] + coeff0_14*dmats1[14][18] + coeff0_15*dmats1[15][18] + coeff0_16*dmats1[16][18] + coeff0_17*dmats1[17][18] + coeff0_18*dmats1[18][18] + coeff0_19*dmats1[19][18] + coeff0_20*dmats1[20][18] + coeff0_21*dmats1[21][18] + coeff0_22*dmats1[22][18] + coeff0_23*dmats1[23][18] + coeff0_24*dmats1[24][18] + coeff0_25*dmats1[25][18] + coeff0_26*dmats1[26][18] + coeff0_27*dmats1[27][18] + coeff0_28*dmats1[28][18] + coeff0_29*dmats1[29][18] + coeff0_30*dmats1[30][18] + coeff0_31*dmats1[31][18] + coeff0_32*dmats1[32][18] + coeff0_33*dmats1[33][18] + coeff0_34*dmats1[34][18];
          new_coeff0_19 = coeff0_0*dmats1[0][19] + coeff0_1*dmats1[1][19] + coeff0_2*dmats1[2][19] + coeff0_3*dmats1[3][19] + coeff0_4*dmats1[4][19] + coeff0_5*dmats1[5][19] + coeff0_6*dmats1[6][19] + coeff0_7*dmats1[7][19] + coeff0_8*dmats1[8][19] + coeff0_9*dmats1[9][19] + coeff0_10*dmats1[10][19] + coeff0_11*dmats1[11][19] + coeff0_12*dmats1[12][19] + coeff0_13*dmats1[13][19] + coeff0_14*dmats1[14][19] + coeff0_15*dmats1[15][19] + coeff0_16*dmats1[16][19] + coeff0_17*dmats1[17][19] + coeff0_18*dmats1[18][19] + coeff0_19*dmats1[19][19] + coeff0_20*dmats1[20][19] + coeff0_21*dmats1[21][19] + coeff0_22*dmats1[22][19] + coeff0_23*dmats1[23][19] + coeff0_24*dmats1[24][19] + coeff0_25*dmats1[25][19] + coeff0_26*dmats1[26][19] + coeff0_27*dmats1[27][19] + coeff0_28*dmats1[28][19] + coeff0_29*dmats1[29][19] + coeff0_30*dmats1[30][19] + coeff0_31*dmats1[31][19] + coeff0_32*dmats1[32][19] + coeff0_33*dmats1[33][19] + coeff0_34*dmats1[34][19];
          new_coeff0_20 = coeff0_0*dmats1[0][20] + coeff0_1*dmats1[1][20] + coeff0_2*dmats1[2][20] + coeff0_3*dmats1[3][20] + coeff0_4*dmats1[4][20] + coeff0_5*dmats1[5][20] + coeff0_6*dmats1[6][20] + coeff0_7*dmats1[7][20] + coeff0_8*dmats1[8][20] + coeff0_9*dmats1[9][20] + coeff0_10*dmats1[10][20] + coeff0_11*dmats1[11][20] + coeff0_12*dmats1[12][20] + coeff0_13*dmats1[13][20] + coeff0_14*dmats1[14][20] + coeff0_15*dmats1[15][20] + coeff0_16*dmats1[16][20] + coeff0_17*dmats1[17][20] + coeff0_18*dmats1[18][20] + coeff0_19*dmats1[19][20] + coeff0_20*dmats1[20][20] + coeff0_21*dmats1[21][20] + coeff0_22*dmats1[22][20] + coeff0_23*dmats1[23][20] + coeff0_24*dmats1[24][20] + coeff0_25*dmats1[25][20] + coeff0_26*dmats1[26][20] + coeff0_27*dmats1[27][20] + coeff0_28*dmats1[28][20] + coeff0_29*dmats1[29][20] + coeff0_30*dmats1[30][20] + coeff0_31*dmats1[31][20] + coeff0_32*dmats1[32][20] + coeff0_33*dmats1[33][20] + coeff0_34*dmats1[34][20];
          new_coeff0_21 = coeff0_0*dmats1[0][21] + coeff0_1*dmats1[1][21] + coeff0_2*dmats1[2][21] + coeff0_3*dmats1[3][21] + coeff0_4*dmats1[4][21] + coeff0_5*dmats1[5][21] + coeff0_6*dmats1[6][21] + coeff0_7*dmats1[7][21] + coeff0_8*dmats1[8][21] + coeff0_9*dmats1[9][21] + coeff0_10*dmats1[10][21] + coeff0_11*dmats1[11][21] + coeff0_12*dmats1[12][21] + coeff0_13*dmats1[13][21] + coeff0_14*dmats1[14][21] + coeff0_15*dmats1[15][21] + coeff0_16*dmats1[16][21] + coeff0_17*dmats1[17][21] + coeff0_18*dmats1[18][21] + coeff0_19*dmats1[19][21] + coeff0_20*dmats1[20][21] + coeff0_21*dmats1[21][21] + coeff0_22*dmats1[22][21] + coeff0_23*dmats1[23][21] + coeff0_24*dmats1[24][21] + coeff0_25*dmats1[25][21] + coeff0_26*dmats1[26][21] + coeff0_27*dmats1[27][21] + coeff0_28*dmats1[28][21] + coeff0_29*dmats1[29][21] + coeff0_30*dmats1[30][21] + coeff0_31*dmats1[31][21] + coeff0_32*dmats1[32][21] + coeff0_33*dmats1[33][21] + coeff0_34*dmats1[34][21];
          new_coeff0_22 = coeff0_0*dmats1[0][22] + coeff0_1*dmats1[1][22] + coeff0_2*dmats1[2][22] + coeff0_3*dmats1[3][22] + coeff0_4*dmats1[4][22] + coeff0_5*dmats1[5][22] + coeff0_6*dmats1[6][22] + coeff0_7*dmats1[7][22] + coeff0_8*dmats1[8][22] + coeff0_9*dmats1[9][22] + coeff0_10*dmats1[10][22] + coeff0_11*dmats1[11][22] + coeff0_12*dmats1[12][22] + coeff0_13*dmats1[13][22] + coeff0_14*dmats1[14][22] + coeff0_15*dmats1[15][22] + coeff0_16*dmats1[16][22] + coeff0_17*dmats1[17][22] + coeff0_18*dmats1[18][22] + coeff0_19*dmats1[19][22] + coeff0_20*dmats1[20][22] + coeff0_21*dmats1[21][22] + coeff0_22*dmats1[22][22] + coeff0_23*dmats1[23][22] + coeff0_24*dmats1[24][22] + coeff0_25*dmats1[25][22] + coeff0_26*dmats1[26][22] + coeff0_27*dmats1[27][22] + coeff0_28*dmats1[28][22] + coeff0_29*dmats1[29][22] + coeff0_30*dmats1[30][22] + coeff0_31*dmats1[31][22] + coeff0_32*dmats1[32][22] + coeff0_33*dmats1[33][22] + coeff0_34*dmats1[34][22];
          new_coeff0_23 = coeff0_0*dmats1[0][23] + coeff0_1*dmats1[1][23] + coeff0_2*dmats1[2][23] + coeff0_3*dmats1[3][23] + coeff0_4*dmats1[4][23] + coeff0_5*dmats1[5][23] + coeff0_6*dmats1[6][23] + coeff0_7*dmats1[7][23] + coeff0_8*dmats1[8][23] + coeff0_9*dmats1[9][23] + coeff0_10*dmats1[10][23] + coeff0_11*dmats1[11][23] + coeff0_12*dmats1[12][23] + coeff0_13*dmats1[13][23] + coeff0_14*dmats1[14][23] + coeff0_15*dmats1[15][23] + coeff0_16*dmats1[16][23] + coeff0_17*dmats1[17][23] + coeff0_18*dmats1[18][23] + coeff0_19*dmats1[19][23] + coeff0_20*dmats1[20][23] + coeff0_21*dmats1[21][23] + coeff0_22*dmats1[22][23] + coeff0_23*dmats1[23][23] + coeff0_24*dmats1[24][23] + coeff0_25*dmats1[25][23] + coeff0_26*dmats1[26][23] + coeff0_27*dmats1[27][23] + coeff0_28*dmats1[28][23] + coeff0_29*dmats1[29][23] + coeff0_30*dmats1[30][23] + coeff0_31*dmats1[31][23] + coeff0_32*dmats1[32][23] + coeff0_33*dmats1[33][23] + coeff0_34*dmats1[34][23];
          new_coeff0_24 = coeff0_0*dmats1[0][24] + coeff0_1*dmats1[1][24] + coeff0_2*dmats1[2][24] + coeff0_3*dmats1[3][24] + coeff0_4*dmats1[4][24] + coeff0_5*dmats1[5][24] + coeff0_6*dmats1[6][24] + coeff0_7*dmats1[7][24] + coeff0_8*dmats1[8][24] + coeff0_9*dmats1[9][24] + coeff0_10*dmats1[10][24] + coeff0_11*dmats1[11][24] + coeff0_12*dmats1[12][24] + coeff0_13*dmats1[13][24] + coeff0_14*dmats1[14][24] + coeff0_15*dmats1[15][24] + coeff0_16*dmats1[16][24] + coeff0_17*dmats1[17][24] + coeff0_18*dmats1[18][24] + coeff0_19*dmats1[19][24] + coeff0_20*dmats1[20][24] + coeff0_21*dmats1[21][24] + coeff0_22*dmats1[22][24] + coeff0_23*dmats1[23][24] + coeff0_24*dmats1[24][24] + coeff0_25*dmats1[25][24] + coeff0_26*dmats1[26][24] + coeff0_27*dmats1[27][24] + coeff0_28*dmats1[28][24] + coeff0_29*dmats1[29][24] + coeff0_30*dmats1[30][24] + coeff0_31*dmats1[31][24] + coeff0_32*dmats1[32][24] + coeff0_33*dmats1[33][24] + coeff0_34*dmats1[34][24];
          new_coeff0_25 = coeff0_0*dmats1[0][25] + coeff0_1*dmats1[1][25] + coeff0_2*dmats1[2][25] + coeff0_3*dmats1[3][25] + coeff0_4*dmats1[4][25] + coeff0_5*dmats1[5][25] + coeff0_6*dmats1[6][25] + coeff0_7*dmats1[7][25] + coeff0_8*dmats1[8][25] + coeff0_9*dmats1[9][25] + coeff0_10*dmats1[10][25] + coeff0_11*dmats1[11][25] + coeff0_12*dmats1[12][25] + coeff0_13*dmats1[13][25] + coeff0_14*dmats1[14][25] + coeff0_15*dmats1[15][25] + coeff0_16*dmats1[16][25] + coeff0_17*dmats1[17][25] + coeff0_18*dmats1[18][25] + coeff0_19*dmats1[19][25] + coeff0_20*dmats1[20][25] + coeff0_21*dmats1[21][25] + coeff0_22*dmats1[22][25] + coeff0_23*dmats1[23][25] + coeff0_24*dmats1[24][25] + coeff0_25*dmats1[25][25] + coeff0_26*dmats1[26][25] + coeff0_27*dmats1[27][25] + coeff0_28*dmats1[28][25] + coeff0_29*dmats1[29][25] + coeff0_30*dmats1[30][25] + coeff0_31*dmats1[31][25] + coeff0_32*dmats1[32][25] + coeff0_33*dmats1[33][25] + coeff0_34*dmats1[34][25];
          new_coeff0_26 = coeff0_0*dmats1[0][26] + coeff0_1*dmats1[1][26] + coeff0_2*dmats1[2][26] + coeff0_3*dmats1[3][26] + coeff0_4*dmats1[4][26] + coeff0_5*dmats1[5][26] + coeff0_6*dmats1[6][26] + coeff0_7*dmats1[7][26] + coeff0_8*dmats1[8][26] + coeff0_9*dmats1[9][26] + coeff0_10*dmats1[10][26] + coeff0_11*dmats1[11][26] + coeff0_12*dmats1[12][26] + coeff0_13*dmats1[13][26] + coeff0_14*dmats1[14][26] + coeff0_15*dmats1[15][26] + coeff0_16*dmats1[16][26] + coeff0_17*dmats1[17][26] + coeff0_18*dmats1[18][26] + coeff0_19*dmats1[19][26] + coeff0_20*dmats1[20][26] + coeff0_21*dmats1[21][26] + coeff0_22*dmats1[22][26] + coeff0_23*dmats1[23][26] + coeff0_24*dmats1[24][26] + coeff0_25*dmats1[25][26] + coeff0_26*dmats1[26][26] + coeff0_27*dmats1[27][26] + coeff0_28*dmats1[28][26] + coeff0_29*dmats1[29][26] + coeff0_30*dmats1[30][26] + coeff0_31*dmats1[31][26] + coeff0_32*dmats1[32][26] + coeff0_33*dmats1[33][26] + coeff0_34*dmats1[34][26];
          new_coeff0_27 = coeff0_0*dmats1[0][27] + coeff0_1*dmats1[1][27] + coeff0_2*dmats1[2][27] + coeff0_3*dmats1[3][27] + coeff0_4*dmats1[4][27] + coeff0_5*dmats1[5][27] + coeff0_6*dmats1[6][27] + coeff0_7*dmats1[7][27] + coeff0_8*dmats1[8][27] + coeff0_9*dmats1[9][27] + coeff0_10*dmats1[10][27] + coeff0_11*dmats1[11][27] + coeff0_12*dmats1[12][27] + coeff0_13*dmats1[13][27] + coeff0_14*dmats1[14][27] + coeff0_15*dmats1[15][27] + coeff0_16*dmats1[16][27] + coeff0_17*dmats1[17][27] + coeff0_18*dmats1[18][27] + coeff0_19*dmats1[19][27] + coeff0_20*dmats1[20][27] + coeff0_21*dmats1[21][27] + coeff0_22*dmats1[22][27] + coeff0_23*dmats1[23][27] + coeff0_24*dmats1[24][27] + coeff0_25*dmats1[25][27] + coeff0_26*dmats1[26][27] + coeff0_27*dmats1[27][27] + coeff0_28*dmats1[28][27] + coeff0_29*dmats1[29][27] + coeff0_30*dmats1[30][27] + coeff0_31*dmats1[31][27] + coeff0_32*dmats1[32][27] + coeff0_33*dmats1[33][27] + coeff0_34*dmats1[34][27];
          new_coeff0_28 = coeff0_0*dmats1[0][28] + coeff0_1*dmats1[1][28] + coeff0_2*dmats1[2][28] + coeff0_3*dmats1[3][28] + coeff0_4*dmats1[4][28] + coeff0_5*dmats1[5][28] + coeff0_6*dmats1[6][28] + coeff0_7*dmats1[7][28] + coeff0_8*dmats1[8][28] + coeff0_9*dmats1[9][28] + coeff0_10*dmats1[10][28] + coeff0_11*dmats1[11][28] + coeff0_12*dmats1[12][28] + coeff0_13*dmats1[13][28] + coeff0_14*dmats1[14][28] + coeff0_15*dmats1[15][28] + coeff0_16*dmats1[16][28] + coeff0_17*dmats1[17][28] + coeff0_18*dmats1[18][28] + coeff0_19*dmats1[19][28] + coeff0_20*dmats1[20][28] + coeff0_21*dmats1[21][28] + coeff0_22*dmats1[22][28] + coeff0_23*dmats1[23][28] + coeff0_24*dmats1[24][28] + coeff0_25*dmats1[25][28] + coeff0_26*dmats1[26][28] + coeff0_27*dmats1[27][28] + coeff0_28*dmats1[28][28] + coeff0_29*dmats1[29][28] + coeff0_30*dmats1[30][28] + coeff0_31*dmats1[31][28] + coeff0_32*dmats1[32][28] + coeff0_33*dmats1[33][28] + coeff0_34*dmats1[34][28];
          new_coeff0_29 = coeff0_0*dmats1[0][29] + coeff0_1*dmats1[1][29] + coeff0_2*dmats1[2][29] + coeff0_3*dmats1[3][29] + coeff0_4*dmats1[4][29] + coeff0_5*dmats1[5][29] + coeff0_6*dmats1[6][29] + coeff0_7*dmats1[7][29] + coeff0_8*dmats1[8][29] + coeff0_9*dmats1[9][29] + coeff0_10*dmats1[10][29] + coeff0_11*dmats1[11][29] + coeff0_12*dmats1[12][29] + coeff0_13*dmats1[13][29] + coeff0_14*dmats1[14][29] + coeff0_15*dmats1[15][29] + coeff0_16*dmats1[16][29] + coeff0_17*dmats1[17][29] + coeff0_18*dmats1[18][29] + coeff0_19*dmats1[19][29] + coeff0_20*dmats1[20][29] + coeff0_21*dmats1[21][29] + coeff0_22*dmats1[22][29] + coeff0_23*dmats1[23][29] + coeff0_24*dmats1[24][29] + coeff0_25*dmats1[25][29] + coeff0_26*dmats1[26][29] + coeff0_27*dmats1[27][29] + coeff0_28*dmats1[28][29] + coeff0_29*dmats1[29][29] + coeff0_30*dmats1[30][29] + coeff0_31*dmats1[31][29] + coeff0_32*dmats1[32][29] + coeff0_33*dmats1[33][29] + coeff0_34*dmats1[34][29];
          new_coeff0_30 = coeff0_0*dmats1[0][30] + coeff0_1*dmats1[1][30] + coeff0_2*dmats1[2][30] + coeff0_3*dmats1[3][30] + coeff0_4*dmats1[4][30] + coeff0_5*dmats1[5][30] + coeff0_6*dmats1[6][30] + coeff0_7*dmats1[7][30] + coeff0_8*dmats1[8][30] + coeff0_9*dmats1[9][30] + coeff0_10*dmats1[10][30] + coeff0_11*dmats1[11][30] + coeff0_12*dmats1[12][30] + coeff0_13*dmats1[13][30] + coeff0_14*dmats1[14][30] + coeff0_15*dmats1[15][30] + coeff0_16*dmats1[16][30] + coeff0_17*dmats1[17][30] + coeff0_18*dmats1[18][30] + coeff0_19*dmats1[19][30] + coeff0_20*dmats1[20][30] + coeff0_21*dmats1[21][30] + coeff0_22*dmats1[22][30] + coeff0_23*dmats1[23][30] + coeff0_24*dmats1[24][30] + coeff0_25*dmats1[25][30] + coeff0_26*dmats1[26][30] + coeff0_27*dmats1[27][30] + coeff0_28*dmats1[28][30] + coeff0_29*dmats1[29][30] + coeff0_30*dmats1[30][30] + coeff0_31*dmats1[31][30] + coeff0_32*dmats1[32][30] + coeff0_33*dmats1[33][30] + coeff0_34*dmats1[34][30];
          new_coeff0_31 = coeff0_0*dmats1[0][31] + coeff0_1*dmats1[1][31] + coeff0_2*dmats1[2][31] + coeff0_3*dmats1[3][31] + coeff0_4*dmats1[4][31] + coeff0_5*dmats1[5][31] + coeff0_6*dmats1[6][31] + coeff0_7*dmats1[7][31] + coeff0_8*dmats1[8][31] + coeff0_9*dmats1[9][31] + coeff0_10*dmats1[10][31] + coeff0_11*dmats1[11][31] + coeff0_12*dmats1[12][31] + coeff0_13*dmats1[13][31] + coeff0_14*dmats1[14][31] + coeff0_15*dmats1[15][31] + coeff0_16*dmats1[16][31] + coeff0_17*dmats1[17][31] + coeff0_18*dmats1[18][31] + coeff0_19*dmats1[19][31] + coeff0_20*dmats1[20][31] + coeff0_21*dmats1[21][31] + coeff0_22*dmats1[22][31] + coeff0_23*dmats1[23][31] + coeff0_24*dmats1[24][31] + coeff0_25*dmats1[25][31] + coeff0_26*dmats1[26][31] + coeff0_27*dmats1[27][31] + coeff0_28*dmats1[28][31] + coeff0_29*dmats1[29][31] + coeff0_30*dmats1[30][31] + coeff0_31*dmats1[31][31] + coeff0_32*dmats1[32][31] + coeff0_33*dmats1[33][31] + coeff0_34*dmats1[34][31];
          new_coeff0_32 = coeff0_0*dmats1[0][32] + coeff0_1*dmats1[1][32] + coeff0_2*dmats1[2][32] + coeff0_3*dmats1[3][32] + coeff0_4*dmats1[4][32] + coeff0_5*dmats1[5][32] + coeff0_6*dmats1[6][32] + coeff0_7*dmats1[7][32] + coeff0_8*dmats1[8][32] + coeff0_9*dmats1[9][32] + coeff0_10*dmats1[10][32] + coeff0_11*dmats1[11][32] + coeff0_12*dmats1[12][32] + coeff0_13*dmats1[13][32] + coeff0_14*dmats1[14][32] + coeff0_15*dmats1[15][32] + coeff0_16*dmats1[16][32] + coeff0_17*dmats1[17][32] + coeff0_18*dmats1[18][32] + coeff0_19*dmats1[19][32] + coeff0_20*dmats1[20][32] + coeff0_21*dmats1[21][32] + coeff0_22*dmats1[22][32] + coeff0_23*dmats1[23][32] + coeff0_24*dmats1[24][32] + coeff0_25*dmats1[25][32] + coeff0_26*dmats1[26][32] + coeff0_27*dmats1[27][32] + coeff0_28*dmats1[28][32] + coeff0_29*dmats1[29][32] + coeff0_30*dmats1[30][32] + coeff0_31*dmats1[31][32] + coeff0_32*dmats1[32][32] + coeff0_33*dmats1[33][32] + coeff0_34*dmats1[34][32];
          new_coeff0_33 = coeff0_0*dmats1[0][33] + coeff0_1*dmats1[1][33] + coeff0_2*dmats1[2][33] + coeff0_3*dmats1[3][33] + coeff0_4*dmats1[4][33] + coeff0_5*dmats1[5][33] + coeff0_6*dmats1[6][33] + coeff0_7*dmats1[7][33] + coeff0_8*dmats1[8][33] + coeff0_9*dmats1[9][33] + coeff0_10*dmats1[10][33] + coeff0_11*dmats1[11][33] + coeff0_12*dmats1[12][33] + coeff0_13*dmats1[13][33] + coeff0_14*dmats1[14][33] + coeff0_15*dmats1[15][33] + coeff0_16*dmats1[16][33] + coeff0_17*dmats1[17][33] + coeff0_18*dmats1[18][33] + coeff0_19*dmats1[19][33] + coeff0_20*dmats1[20][33] + coeff0_21*dmats1[21][33] + coeff0_22*dmats1[22][33] + coeff0_23*dmats1[23][33] + coeff0_24*dmats1[24][33] + coeff0_25*dmats1[25][33] + coeff0_26*dmats1[26][33] + coeff0_27*dmats1[27][33] + coeff0_28*dmats1[28][33] + coeff0_29*dmats1[29][33] + coeff0_30*dmats1[30][33] + coeff0_31*dmats1[31][33] + coeff0_32*dmats1[32][33] + coeff0_33*dmats1[33][33] + coeff0_34*dmats1[34][33];
          new_coeff0_34 = coeff0_0*dmats1[0][34] + coeff0_1*dmats1[1][34] + coeff0_2*dmats1[2][34] + coeff0_3*dmats1[3][34] + coeff0_4*dmats1[4][34] + coeff0_5*dmats1[5][34] + coeff0_6*dmats1[6][34] + coeff0_7*dmats1[7][34] + coeff0_8*dmats1[8][34] + coeff0_9*dmats1[9][34] + coeff0_10*dmats1[10][34] + coeff0_11*dmats1[11][34] + coeff0_12*dmats1[12][34] + coeff0_13*dmats1[13][34] + coeff0_14*dmats1[14][34] + coeff0_15*dmats1[15][34] + coeff0_16*dmats1[16][34] + coeff0_17*dmats1[17][34] + coeff0_18*dmats1[18][34] + coeff0_19*dmats1[19][34] + coeff0_20*dmats1[20][34] + coeff0_21*dmats1[21][34] + coeff0_22*dmats1[22][34] + coeff0_23*dmats1[23][34] + coeff0_24*dmats1[24][34] + coeff0_25*dmats1[25][34] + coeff0_26*dmats1[26][34] + coeff0_27*dmats1[27][34] + coeff0_28*dmats1[28][34] + coeff0_29*dmats1[29][34] + coeff0_30*dmats1[30][34] + coeff0_31*dmats1[31][34] + coeff0_32*dmats1[32][34] + coeff0_33*dmats1[33][34] + coeff0_34*dmats1[34][34];
        }
        if(combinations[deriv_num][j] == 2)
        {
          new_coeff0_0 = coeff0_0*dmats2[0][0] + coeff0_1*dmats2[1][0] + coeff0_2*dmats2[2][0] + coeff0_3*dmats2[3][0] + coeff0_4*dmats2[4][0] + coeff0_5*dmats2[5][0] + coeff0_6*dmats2[6][0] + coeff0_7*dmats2[7][0] + coeff0_8*dmats2[8][0] + coeff0_9*dmats2[9][0] + coeff0_10*dmats2[10][0] + coeff0_11*dmats2[11][0] + coeff0_12*dmats2[12][0] + coeff0_13*dmats2[13][0] + coeff0_14*dmats2[14][0] + coeff0_15*dmats2[15][0] + coeff0_16*dmats2[16][0] + coeff0_17*dmats2[17][0] + coeff0_18*dmats2[18][0] + coeff0_19*dmats2[19][0] + coeff0_20*dmats2[20][0] + coeff0_21*dmats2[21][0] + coeff0_22*dmats2[22][0] + coeff0_23*dmats2[23][0] + coeff0_24*dmats2[24][0] + coeff0_25*dmats2[25][0] + coeff0_26*dmats2[26][0] + coeff0_27*dmats2[27][0] + coeff0_28*dmats2[28][0] + coeff0_29*dmats2[29][0] + coeff0_30*dmats2[30][0] + coeff0_31*dmats2[31][0] + coeff0_32*dmats2[32][0] + coeff0_33*dmats2[33][0] + coeff0_34*dmats2[34][0];
          new_coeff0_1 = coeff0_0*dmats2[0][1] + coeff0_1*dmats2[1][1] + coeff0_2*dmats2[2][1] + coeff0_3*dmats2[3][1] + coeff0_4*dmats2[4][1] + coeff0_5*dmats2[5][1] + coeff0_6*dmats2[6][1] + coeff0_7*dmats2[7][1] + coeff0_8*dmats2[8][1] + coeff0_9*dmats2[9][1] + coeff0_10*dmats2[10][1] + coeff0_11*dmats2[11][1] + coeff0_12*dmats2[12][1] + coeff0_13*dmats2[13][1] + coeff0_14*dmats2[14][1] + coeff0_15*dmats2[15][1] + coeff0_16*dmats2[16][1] + coeff0_17*dmats2[17][1] + coeff0_18*dmats2[18][1] + coeff0_19*dmats2[19][1] + coeff0_20*dmats2[20][1] + coeff0_21*dmats2[21][1] + coeff0_22*dmats2[22][1] + coeff0_23*dmats2[23][1] + coeff0_24*dmats2[24][1] + coeff0_25*dmats2[25][1] + coeff0_26*dmats2[26][1] + coeff0_27*dmats2[27][1] + coeff0_28*dmats2[28][1] + coeff0_29*dmats2[29][1] + coeff0_30*dmats2[30][1] + coeff0_31*dmats2[31][1] + coeff0_32*dmats2[32][1] + coeff0_33*dmats2[33][1] + coeff0_34*dmats2[34][1];
          new_coeff0_2 = coeff0_0*dmats2[0][2] + coeff0_1*dmats2[1][2] + coeff0_2*dmats2[2][2] + coeff0_3*dmats2[3][2] + coeff0_4*dmats2[4][2] + coeff0_5*dmats2[5][2] + coeff0_6*dmats2[6][2] + coeff0_7*dmats2[7][2] + coeff0_8*dmats2[8][2] + coeff0_9*dmats2[9][2] + coeff0_10*dmats2[10][2] + coeff0_11*dmats2[11][2] + coeff0_12*dmats2[12][2] + coeff0_13*dmats2[13][2] + coeff0_14*dmats2[14][2] + coeff0_15*dmats2[15][2] + coeff0_16*dmats2[16][2] + coeff0_17*dmats2[17][2] + coeff0_18*dmats2[18][2] + coeff0_19*dmats2[19][2] + coeff0_20*dmats2[20][2] + coeff0_21*dmats2[21][2] + coeff0_22*dmats2[22][2] + coeff0_23*dmats2[23][2] + coeff0_24*dmats2[24][2] + coeff0_25*dmats2[25][2] + coeff0_26*dmats2[26][2] + coeff0_27*dmats2[27][2] + coeff0_28*dmats2[28][2] + coeff0_29*dmats2[29][2] + coeff0_30*dmats2[30][2] + coeff0_31*dmats2[31][2] + coeff0_32*dmats2[32][2] + coeff0_33*dmats2[33][2] + coeff0_34*dmats2[34][2];
          new_coeff0_3 = coeff0_0*dmats2[0][3] + coeff0_1*dmats2[1][3] + coeff0_2*dmats2[2][3] + coeff0_3*dmats2[3][3] + coeff0_4*dmats2[4][3] + coeff0_5*dmats2[5][3] + coeff0_6*dmats2[6][3] + coeff0_7*dmats2[7][3] + coeff0_8*dmats2[8][3] + coeff0_9*dmats2[9][3] + coeff0_10*dmats2[10][3] + coeff0_11*dmats2[11][3] + coeff0_12*dmats2[12][3] + coeff0_13*dmats2[13][3] + coeff0_14*dmats2[14][3] + coeff0_15*dmats2[15][3] + coeff0_16*dmats2[16][3] + coeff0_17*dmats2[17][3] + coeff0_18*dmats2[18][3] + coeff0_19*dmats2[19][3] + coeff0_20*dmats2[20][3] + coeff0_21*dmats2[21][3] + coeff0_22*dmats2[22][3] + coeff0_23*dmats2[23][3] + coeff0_24*dmats2[24][3] + coeff0_25*dmats2[25][3] + coeff0_26*dmats2[26][3] + coeff0_27*dmats2[27][3] + coeff0_28*dmats2[28][3] + coeff0_29*dmats2[29][3] + coeff0_30*dmats2[30][3] + coeff0_31*dmats2[31][3] + coeff0_32*dmats2[32][3] + coeff0_33*dmats2[33][3] + coeff0_34*dmats2[34][3];
          new_coeff0_4 = coeff0_0*dmats2[0][4] + coeff0_1*dmats2[1][4] + coeff0_2*dmats2[2][4] + coeff0_3*dmats2[3][4] + coeff0_4*dmats2[4][4] + coeff0_5*dmats2[5][4] + coeff0_6*dmats2[6][4] + coeff0_7*dmats2[7][4] + coeff0_8*dmats2[8][4] + coeff0_9*dmats2[9][4] + coeff0_10*dmats2[10][4] + coeff0_11*dmats2[11][4] + coeff0_12*dmats2[12][4] + coeff0_13*dmats2[13][4] + coeff0_14*dmats2[14][4] + coeff0_15*dmats2[15][4] + coeff0_16*dmats2[16][4] + coeff0_17*dmats2[17][4] + coeff0_18*dmats2[18][4] + coeff0_19*dmats2[19][4] + coeff0_20*dmats2[20][4] + coeff0_21*dmats2[21][4] + coeff0_22*dmats2[22][4] + coeff0_23*dmats2[23][4] + coeff0_24*dmats2[24][4] + coeff0_25*dmats2[25][4] + coeff0_26*dmats2[26][4] + coeff0_27*dmats2[27][4] + coeff0_28*dmats2[28][4] + coeff0_29*dmats2[29][4] + coeff0_30*dmats2[30][4] + coeff0_31*dmats2[31][4] + coeff0_32*dmats2[32][4] + coeff0_33*dmats2[33][4] + coeff0_34*dmats2[34][4];
          new_coeff0_5 = coeff0_0*dmats2[0][5] + coeff0_1*dmats2[1][5] + coeff0_2*dmats2[2][5] + coeff0_3*dmats2[3][5] + coeff0_4*dmats2[4][5] + coeff0_5*dmats2[5][5] + coeff0_6*dmats2[6][5] + coeff0_7*dmats2[7][5] + coeff0_8*dmats2[8][5] + coeff0_9*dmats2[9][5] + coeff0_10*dmats2[10][5] + coeff0_11*dmats2[11][5] + coeff0_12*dmats2[12][5] + coeff0_13*dmats2[13][5] + coeff0_14*dmats2[14][5] + coeff0_15*dmats2[15][5] + coeff0_16*dmats2[16][5] + coeff0_17*dmats2[17][5] + coeff0_18*dmats2[18][5] + coeff0_19*dmats2[19][5] + coeff0_20*dmats2[20][5] + coeff0_21*dmats2[21][5] + coeff0_22*dmats2[22][5] + coeff0_23*dmats2[23][5] + coeff0_24*dmats2[24][5] + coeff0_25*dmats2[25][5] + coeff0_26*dmats2[26][5] + coeff0_27*dmats2[27][5] + coeff0_28*dmats2[28][5] + coeff0_29*dmats2[29][5] + coeff0_30*dmats2[30][5] + coeff0_31*dmats2[31][5] + coeff0_32*dmats2[32][5] + coeff0_33*dmats2[33][5] + coeff0_34*dmats2[34][5];
          new_coeff0_6 = coeff0_0*dmats2[0][6] + coeff0_1*dmats2[1][6] + coeff0_2*dmats2[2][6] + coeff0_3*dmats2[3][6] + coeff0_4*dmats2[4][6] + coeff0_5*dmats2[5][6] + coeff0_6*dmats2[6][6] + coeff0_7*dmats2[7][6] + coeff0_8*dmats2[8][6] + coeff0_9*dmats2[9][6] + coeff0_10*dmats2[10][6] + coeff0_11*dmats2[11][6] + coeff0_12*dmats2[12][6] + coeff0_13*dmats2[13][6] + coeff0_14*dmats2[14][6] + coeff0_15*dmats2[15][6] + coeff0_16*dmats2[16][6] + coeff0_17*dmats2[17][6] + coeff0_18*dmats2[18][6] + coeff0_19*dmats2[19][6] + coeff0_20*dmats2[20][6] + coeff0_21*dmats2[21][6] + coeff0_22*dmats2[22][6] + coeff0_23*dmats2[23][6] + coeff0_24*dmats2[24][6] + coeff0_25*dmats2[25][6] + coeff0_26*dmats2[26][6] + coeff0_27*dmats2[27][6] + coeff0_28*dmats2[28][6] + coeff0_29*dmats2[29][6] + coeff0_30*dmats2[30][6] + coeff0_31*dmats2[31][6] + coeff0_32*dmats2[32][6] + coeff0_33*dmats2[33][6] + coeff0_34*dmats2[34][6];
          new_coeff0_7 = coeff0_0*dmats2[0][7] + coeff0_1*dmats2[1][7] + coeff0_2*dmats2[2][7] + coeff0_3*dmats2[3][7] + coeff0_4*dmats2[4][7] + coeff0_5*dmats2[5][7] + coeff0_6*dmats2[6][7] + coeff0_7*dmats2[7][7] + coeff0_8*dmats2[8][7] + coeff0_9*dmats2[9][7] + coeff0_10*dmats2[10][7] + coeff0_11*dmats2[11][7] + coeff0_12*dmats2[12][7] + coeff0_13*dmats2[13][7] + coeff0_14*dmats2[14][7] + coeff0_15*dmats2[15][7] + coeff0_16*dmats2[16][7] + coeff0_17*dmats2[17][7] + coeff0_18*dmats2[18][7] + coeff0_19*dmats2[19][7] + coeff0_20*dmats2[20][7] + coeff0_21*dmats2[21][7] + coeff0_22*dmats2[22][7] + coeff0_23*dmats2[23][7] + coeff0_24*dmats2[24][7] + coeff0_25*dmats2[25][7] + coeff0_26*dmats2[26][7] + coeff0_27*dmats2[27][7] + coeff0_28*dmats2[28][7] + coeff0_29*dmats2[29][7] + coeff0_30*dmats2[30][7] + coeff0_31*dmats2[31][7] + coeff0_32*dmats2[32][7] + coeff0_33*dmats2[33][7] + coeff0_34*dmats2[34][7];
          new_coeff0_8 = coeff0_0*dmats2[0][8] + coeff0_1*dmats2[1][8] + coeff0_2*dmats2[2][8] + coeff0_3*dmats2[3][8] + coeff0_4*dmats2[4][8] + coeff0_5*dmats2[5][8] + coeff0_6*dmats2[6][8] + coeff0_7*dmats2[7][8] + coeff0_8*dmats2[8][8] + coeff0_9*dmats2[9][8] + coeff0_10*dmats2[10][8] + coeff0_11*dmats2[11][8] + coeff0_12*dmats2[12][8] + coeff0_13*dmats2[13][8] + coeff0_14*dmats2[14][8] + coeff0_15*dmats2[15][8] + coeff0_16*dmats2[16][8] + coeff0_17*dmats2[17][8] + coeff0_18*dmats2[18][8] + coeff0_19*dmats2[19][8] + coeff0_20*dmats2[20][8] + coeff0_21*dmats2[21][8] + coeff0_22*dmats2[22][8] + coeff0_23*dmats2[23][8] + coeff0_24*dmats2[24][8] + coeff0_25*dmats2[25][8] + coeff0_26*dmats2[26][8] + coeff0_27*dmats2[27][8] + coeff0_28*dmats2[28][8] + coeff0_29*dmats2[29][8] + coeff0_30*dmats2[30][8] + coeff0_31*dmats2[31][8] + coeff0_32*dmats2[32][8] + coeff0_33*dmats2[33][8] + coeff0_34*dmats2[34][8];
          new_coeff0_9 = coeff0_0*dmats2[0][9] + coeff0_1*dmats2[1][9] + coeff0_2*dmats2[2][9] + coeff0_3*dmats2[3][9] + coeff0_4*dmats2[4][9] + coeff0_5*dmats2[5][9] + coeff0_6*dmats2[6][9] + coeff0_7*dmats2[7][9] + coeff0_8*dmats2[8][9] + coeff0_9*dmats2[9][9] + coeff0_10*dmats2[10][9] + coeff0_11*dmats2[11][9] + coeff0_12*dmats2[12][9] + coeff0_13*dmats2[13][9] + coeff0_14*dmats2[14][9] + coeff0_15*dmats2[15][9] + coeff0_16*dmats2[16][9] + coeff0_17*dmats2[17][9] + coeff0_18*dmats2[18][9] + coeff0_19*dmats2[19][9] + coeff0_20*dmats2[20][9] + coeff0_21*dmats2[21][9] + coeff0_22*dmats2[22][9] + coeff0_23*dmats2[23][9] + coeff0_24*dmats2[24][9] + coeff0_25*dmats2[25][9] + coeff0_26*dmats2[26][9] + coeff0_27*dmats2[27][9] + coeff0_28*dmats2[28][9] + coeff0_29*dmats2[29][9] + coeff0_30*dmats2[30][9] + coeff0_31*dmats2[31][9] + coeff0_32*dmats2[32][9] + coeff0_33*dmats2[33][9] + coeff0_34*dmats2[34][9];
          new_coeff0_10 = coeff0_0*dmats2[0][10] + coeff0_1*dmats2[1][10] + coeff0_2*dmats2[2][10] + coeff0_3*dmats2[3][10] + coeff0_4*dmats2[4][10] + coeff0_5*dmats2[5][10] + coeff0_6*dmats2[6][10] + coeff0_7*dmats2[7][10] + coeff0_8*dmats2[8][10] + coeff0_9*dmats2[9][10] + coeff0_10*dmats2[10][10] + coeff0_11*dmats2[11][10] + coeff0_12*dmats2[12][10] + coeff0_13*dmats2[13][10] + coeff0_14*dmats2[14][10] + coeff0_15*dmats2[15][10] + coeff0_16*dmats2[16][10] + coeff0_17*dmats2[17][10] + coeff0_18*dmats2[18][10] + coeff0_19*dmats2[19][10] + coeff0_20*dmats2[20][10] + coeff0_21*dmats2[21][10] + coeff0_22*dmats2[22][10] + coeff0_23*dmats2[23][10] + coeff0_24*dmats2[24][10] + coeff0_25*dmats2[25][10] + coeff0_26*dmats2[26][10] + coeff0_27*dmats2[27][10] + coeff0_28*dmats2[28][10] + coeff0_29*dmats2[29][10] + coeff0_30*dmats2[30][10] + coeff0_31*dmats2[31][10] + coeff0_32*dmats2[32][10] + coeff0_33*dmats2[33][10] + coeff0_34*dmats2[34][10];
          new_coeff0_11 = coeff0_0*dmats2[0][11] + coeff0_1*dmats2[1][11] + coeff0_2*dmats2[2][11] + coeff0_3*dmats2[3][11] + coeff0_4*dmats2[4][11] + coeff0_5*dmats2[5][11] + coeff0_6*dmats2[6][11] + coeff0_7*dmats2[7][11] + coeff0_8*dmats2[8][11] + coeff0_9*dmats2[9][11] + coeff0_10*dmats2[10][11] + coeff0_11*dmats2[11][11] + coeff0_12*dmats2[12][11] + coeff0_13*dmats2[13][11] + coeff0_14*dmats2[14][11] + coeff0_15*dmats2[15][11] + coeff0_16*dmats2[16][11] + coeff0_17*dmats2[17][11] + coeff0_18*dmats2[18][11] + coeff0_19*dmats2[19][11] + coeff0_20*dmats2[20][11] + coeff0_21*dmats2[21][11] + coeff0_22*dmats2[22][11] + coeff0_23*dmats2[23][11] + coeff0_24*dmats2[24][11] + coeff0_25*dmats2[25][11] + coeff0_26*dmats2[26][11] + coeff0_27*dmats2[27][11] + coeff0_28*dmats2[28][11] + coeff0_29*dmats2[29][11] + coeff0_30*dmats2[30][11] + coeff0_31*dmats2[31][11] + coeff0_32*dmats2[32][11] + coeff0_33*dmats2[33][11] + coeff0_34*dmats2[34][11];
          new_coeff0_12 = coeff0_0*dmats2[0][12] + coeff0_1*dmats2[1][12] + coeff0_2*dmats2[2][12] + coeff0_3*dmats2[3][12] + coeff0_4*dmats2[4][12] + coeff0_5*dmats2[5][12] + coeff0_6*dmats2[6][12] + coeff0_7*dmats2[7][12] + coeff0_8*dmats2[8][12] + coeff0_9*dmats2[9][12] + coeff0_10*dmats2[10][12] + coeff0_11*dmats2[11][12] + coeff0_12*dmats2[12][12] + coeff0_13*dmats2[13][12] + coeff0_14*dmats2[14][12] + coeff0_15*dmats2[15][12] + coeff0_16*dmats2[16][12] + coeff0_17*dmats2[17][12] + coeff0_18*dmats2[18][12] + coeff0_19*dmats2[19][12] + coeff0_20*dmats2[20][12] + coeff0_21*dmats2[21][12] + coeff0_22*dmats2[22][12] + coeff0_23*dmats2[23][12] + coeff0_24*dmats2[24][12] + coeff0_25*dmats2[25][12] + coeff0_26*dmats2[26][12] + coeff0_27*dmats2[27][12] + coeff0_28*dmats2[28][12] + coeff0_29*dmats2[29][12] + coeff0_30*dmats2[30][12] + coeff0_31*dmats2[31][12] + coeff0_32*dmats2[32][12] + coeff0_33*dmats2[33][12] + coeff0_34*dmats2[34][12];
          new_coeff0_13 = coeff0_0*dmats2[0][13] + coeff0_1*dmats2[1][13] + coeff0_2*dmats2[2][13] + coeff0_3*dmats2[3][13] + coeff0_4*dmats2[4][13] + coeff0_5*dmats2[5][13] + coeff0_6*dmats2[6][13] + coeff0_7*dmats2[7][13] + coeff0_8*dmats2[8][13] + coeff0_9*dmats2[9][13] + coeff0_10*dmats2[10][13] + coeff0_11*dmats2[11][13] + coeff0_12*dmats2[12][13] + coeff0_13*dmats2[13][13] + coeff0_14*dmats2[14][13] + coeff0_15*dmats2[15][13] + coeff0_16*dmats2[16][13] + coeff0_17*dmats2[17][13] + coeff0_18*dmats2[18][13] + coeff0_19*dmats2[19][13] + coeff0_20*dmats2[20][13] + coeff0_21*dmats2[21][13] + coeff0_22*dmats2[22][13] + coeff0_23*dmats2[23][13] + coeff0_24*dmats2[24][13] + coeff0_25*dmats2[25][13] + coeff0_26*dmats2[26][13] + coeff0_27*dmats2[27][13] + coeff0_28*dmats2[28][13] + coeff0_29*dmats2[29][13] + coeff0_30*dmats2[30][13] + coeff0_31*dmats2[31][13] + coeff0_32*dmats2[32][13] + coeff0_33*dmats2[33][13] + coeff0_34*dmats2[34][13];
          new_coeff0_14 = coeff0_0*dmats2[0][14] + coeff0_1*dmats2[1][14] + coeff0_2*dmats2[2][14] + coeff0_3*dmats2[3][14] + coeff0_4*dmats2[4][14] + coeff0_5*dmats2[5][14] + coeff0_6*dmats2[6][14] + coeff0_7*dmats2[7][14] + coeff0_8*dmats2[8][14] + coeff0_9*dmats2[9][14] + coeff0_10*dmats2[10][14] + coeff0_11*dmats2[11][14] + coeff0_12*dmats2[12][14] + coeff0_13*dmats2[13][14] + coeff0_14*dmats2[14][14] + coeff0_15*dmats2[15][14] + coeff0_16*dmats2[16][14] + coeff0_17*dmats2[17][14] + coeff0_18*dmats2[18][14] + coeff0_19*dmats2[19][14] + coeff0_20*dmats2[20][14] + coeff0_21*dmats2[21][14] + coeff0_22*dmats2[22][14] + coeff0_23*dmats2[23][14] + coeff0_24*dmats2[24][14] + coeff0_25*dmats2[25][14] + coeff0_26*dmats2[26][14] + coeff0_27*dmats2[27][14] + coeff0_28*dmats2[28][14] + coeff0_29*dmats2[29][14] + coeff0_30*dmats2[30][14] + coeff0_31*dmats2[31][14] + coeff0_32*dmats2[32][14] + coeff0_33*dmats2[33][14] + coeff0_34*dmats2[34][14];
          new_coeff0_15 = coeff0_0*dmats2[0][15] + coeff0_1*dmats2[1][15] + coeff0_2*dmats2[2][15] + coeff0_3*dmats2[3][15] + coeff0_4*dmats2[4][15] + coeff0_5*dmats2[5][15] + coeff0_6*dmats2[6][15] + coeff0_7*dmats2[7][15] + coeff0_8*dmats2[8][15] + coeff0_9*dmats2[9][15] + coeff0_10*dmats2[10][15] + coeff0_11*dmats2[11][15] + coeff0_12*dmats2[12][15] + coeff0_13*dmats2[13][15] + coeff0_14*dmats2[14][15] + coeff0_15*dmats2[15][15] + coeff0_16*dmats2[16][15] + coeff0_17*dmats2[17][15] + coeff0_18*dmats2[18][15] + coeff0_19*dmats2[19][15] + coeff0_20*dmats2[20][15] + coeff0_21*dmats2[21][15] + coeff0_22*dmats2[22][15] + coeff0_23*dmats2[23][15] + coeff0_24*dmats2[24][15] + coeff0_25*dmats2[25][15] + coeff0_26*dmats2[26][15] + coeff0_27*dmats2[27][15] + coeff0_28*dmats2[28][15] + coeff0_29*dmats2[29][15] + coeff0_30*dmats2[30][15] + coeff0_31*dmats2[31][15] + coeff0_32*dmats2[32][15] + coeff0_33*dmats2[33][15] + coeff0_34*dmats2[34][15];
          new_coeff0_16 = coeff0_0*dmats2[0][16] + coeff0_1*dmats2[1][16] + coeff0_2*dmats2[2][16] + coeff0_3*dmats2[3][16] + coeff0_4*dmats2[4][16] + coeff0_5*dmats2[5][16] + coeff0_6*dmats2[6][16] + coeff0_7*dmats2[7][16] + coeff0_8*dmats2[8][16] + coeff0_9*dmats2[9][16] + coeff0_10*dmats2[10][16] + coeff0_11*dmats2[11][16] + coeff0_12*dmats2[12][16] + coeff0_13*dmats2[13][16] + coeff0_14*dmats2[14][16] + coeff0_15*dmats2[15][16] + coeff0_16*dmats2[16][16] + coeff0_17*dmats2[17][16] + coeff0_18*dmats2[18][16] + coeff0_19*dmats2[19][16] + coeff0_20*dmats2[20][16] + coeff0_21*dmats2[21][16] + coeff0_22*dmats2[22][16] + coeff0_23*dmats2[23][16] + coeff0_24*dmats2[24][16] + coeff0_25*dmats2[25][16] + coeff0_26*dmats2[26][16] + coeff0_27*dmats2[27][16] + coeff0_28*dmats2[28][16] + coeff0_29*dmats2[29][16] + coeff0_30*dmats2[30][16] + coeff0_31*dmats2[31][16] + coeff0_32*dmats2[32][16] + coeff0_33*dmats2[33][16] + coeff0_34*dmats2[34][16];
          new_coeff0_17 = coeff0_0*dmats2[0][17] + coeff0_1*dmats2[1][17] + coeff0_2*dmats2[2][17] + coeff0_3*dmats2[3][17] + coeff0_4*dmats2[4][17] + coeff0_5*dmats2[5][17] + coeff0_6*dmats2[6][17] + coeff0_7*dmats2[7][17] + coeff0_8*dmats2[8][17] + coeff0_9*dmats2[9][17] + coeff0_10*dmats2[10][17] + coeff0_11*dmats2[11][17] + coeff0_12*dmats2[12][17] + coeff0_13*dmats2[13][17] + coeff0_14*dmats2[14][17] + coeff0_15*dmats2[15][17] + coeff0_16*dmats2[16][17] + coeff0_17*dmats2[17][17] + coeff0_18*dmats2[18][17] + coeff0_19*dmats2[19][17] + coeff0_20*dmats2[20][17] + coeff0_21*dmats2[21][17] + coeff0_22*dmats2[22][17] + coeff0_23*dmats2[23][17] + coeff0_24*dmats2[24][17] + coeff0_25*dmats2[25][17] + coeff0_26*dmats2[26][17] + coeff0_27*dmats2[27][17] + coeff0_28*dmats2[28][17] + coeff0_29*dmats2[29][17] + coeff0_30*dmats2[30][17] + coeff0_31*dmats2[31][17] + coeff0_32*dmats2[32][17] + coeff0_33*dmats2[33][17] + coeff0_34*dmats2[34][17];
          new_coeff0_18 = coeff0_0*dmats2[0][18] + coeff0_1*dmats2[1][18] + coeff0_2*dmats2[2][18] + coeff0_3*dmats2[3][18] + coeff0_4*dmats2[4][18] + coeff0_5*dmats2[5][18] + coeff0_6*dmats2[6][18] + coeff0_7*dmats2[7][18] + coeff0_8*dmats2[8][18] + coeff0_9*dmats2[9][18] + coeff0_10*dmats2[10][18] + coeff0_11*dmats2[11][18] + coeff0_12*dmats2[12][18] + coeff0_13*dmats2[13][18] + coeff0_14*dmats2[14][18] + coeff0_15*dmats2[15][18] + coeff0_16*dmats2[16][18] + coeff0_17*dmats2[17][18] + coeff0_18*dmats2[18][18] + coeff0_19*dmats2[19][18] + coeff0_20*dmats2[20][18] + coeff0_21*dmats2[21][18] + coeff0_22*dmats2[22][18] + coeff0_23*dmats2[23][18] + coeff0_24*dmats2[24][18] + coeff0_25*dmats2[25][18] + coeff0_26*dmats2[26][18] + coeff0_27*dmats2[27][18] + coeff0_28*dmats2[28][18] + coeff0_29*dmats2[29][18] + coeff0_30*dmats2[30][18] + coeff0_31*dmats2[31][18] + coeff0_32*dmats2[32][18] + coeff0_33*dmats2[33][18] + coeff0_34*dmats2[34][18];
          new_coeff0_19 = coeff0_0*dmats2[0][19] + coeff0_1*dmats2[1][19] + coeff0_2*dmats2[2][19] + coeff0_3*dmats2[3][19] + coeff0_4*dmats2[4][19] + coeff0_5*dmats2[5][19] + coeff0_6*dmats2[6][19] + coeff0_7*dmats2[7][19] + coeff0_8*dmats2[8][19] + coeff0_9*dmats2[9][19] + coeff0_10*dmats2[10][19] + coeff0_11*dmats2[11][19] + coeff0_12*dmats2[12][19] + coeff0_13*dmats2[13][19] + coeff0_14*dmats2[14][19] + coeff0_15*dmats2[15][19] + coeff0_16*dmats2[16][19] + coeff0_17*dmats2[17][19] + coeff0_18*dmats2[18][19] + coeff0_19*dmats2[19][19] + coeff0_20*dmats2[20][19] + coeff0_21*dmats2[21][19] + coeff0_22*dmats2[22][19] + coeff0_23*dmats2[23][19] + coeff0_24*dmats2[24][19] + coeff0_25*dmats2[25][19] + coeff0_26*dmats2[26][19] + coeff0_27*dmats2[27][19] + coeff0_28*dmats2[28][19] + coeff0_29*dmats2[29][19] + coeff0_30*dmats2[30][19] + coeff0_31*dmats2[31][19] + coeff0_32*dmats2[32][19] + coeff0_33*dmats2[33][19] + coeff0_34*dmats2[34][19];
          new_coeff0_20 = coeff0_0*dmats2[0][20] + coeff0_1*dmats2[1][20] + coeff0_2*dmats2[2][20] + coeff0_3*dmats2[3][20] + coeff0_4*dmats2[4][20] + coeff0_5*dmats2[5][20] + coeff0_6*dmats2[6][20] + coeff0_7*dmats2[7][20] + coeff0_8*dmats2[8][20] + coeff0_9*dmats2[9][20] + coeff0_10*dmats2[10][20] + coeff0_11*dmats2[11][20] + coeff0_12*dmats2[12][20] + coeff0_13*dmats2[13][20] + coeff0_14*dmats2[14][20] + coeff0_15*dmats2[15][20] + coeff0_16*dmats2[16][20] + coeff0_17*dmats2[17][20] + coeff0_18*dmats2[18][20] + coeff0_19*dmats2[19][20] + coeff0_20*dmats2[20][20] + coeff0_21*dmats2[21][20] + coeff0_22*dmats2[22][20] + coeff0_23*dmats2[23][20] + coeff0_24*dmats2[24][20] + coeff0_25*dmats2[25][20] + coeff0_26*dmats2[26][20] + coeff0_27*dmats2[27][20] + coeff0_28*dmats2[28][20] + coeff0_29*dmats2[29][20] + coeff0_30*dmats2[30][20] + coeff0_31*dmats2[31][20] + coeff0_32*dmats2[32][20] + coeff0_33*dmats2[33][20] + coeff0_34*dmats2[34][20];
          new_coeff0_21 = coeff0_0*dmats2[0][21] + coeff0_1*dmats2[1][21] + coeff0_2*dmats2[2][21] + coeff0_3*dmats2[3][21] + coeff0_4*dmats2[4][21] + coeff0_5*dmats2[5][21] + coeff0_6*dmats2[6][21] + coeff0_7*dmats2[7][21] + coeff0_8*dmats2[8][21] + coeff0_9*dmats2[9][21] + coeff0_10*dmats2[10][21] + coeff0_11*dmats2[11][21] + coeff0_12*dmats2[12][21] + coeff0_13*dmats2[13][21] + coeff0_14*dmats2[14][21] + coeff0_15*dmats2[15][21] + coeff0_16*dmats2[16][21] + coeff0_17*dmats2[17][21] + coeff0_18*dmats2[18][21] + coeff0_19*dmats2[19][21] + coeff0_20*dmats2[20][21] + coeff0_21*dmats2[21][21] + coeff0_22*dmats2[22][21] + coeff0_23*dmats2[23][21] + coeff0_24*dmats2[24][21] + coeff0_25*dmats2[25][21] + coeff0_26*dmats2[26][21] + coeff0_27*dmats2[27][21] + coeff0_28*dmats2[28][21] + coeff0_29*dmats2[29][21] + coeff0_30*dmats2[30][21] + coeff0_31*dmats2[31][21] + coeff0_32*dmats2[32][21] + coeff0_33*dmats2[33][21] + coeff0_34*dmats2[34][21];
          new_coeff0_22 = coeff0_0*dmats2[0][22] + coeff0_1*dmats2[1][22] + coeff0_2*dmats2[2][22] + coeff0_3*dmats2[3][22] + coeff0_4*dmats2[4][22] + coeff0_5*dmats2[5][22] + coeff0_6*dmats2[6][22] + coeff0_7*dmats2[7][22] + coeff0_8*dmats2[8][22] + coeff0_9*dmats2[9][22] + coeff0_10*dmats2[10][22] + coeff0_11*dmats2[11][22] + coeff0_12*dmats2[12][22] + coeff0_13*dmats2[13][22] + coeff0_14*dmats2[14][22] + coeff0_15*dmats2[15][22] + coeff0_16*dmats2[16][22] + coeff0_17*dmats2[17][22] + coeff0_18*dmats2[18][22] + coeff0_19*dmats2[19][22] + coeff0_20*dmats2[20][22] + coeff0_21*dmats2[21][22] + coeff0_22*dmats2[22][22] + coeff0_23*dmats2[23][22] + coeff0_24*dmats2[24][22] + coeff0_25*dmats2[25][22] + coeff0_26*dmats2[26][22] + coeff0_27*dmats2[27][22] + coeff0_28*dmats2[28][22] + coeff0_29*dmats2[29][22] + coeff0_30*dmats2[30][22] + coeff0_31*dmats2[31][22] + coeff0_32*dmats2[32][22] + coeff0_33*dmats2[33][22] + coeff0_34*dmats2[34][22];
          new_coeff0_23 = coeff0_0*dmats2[0][23] + coeff0_1*dmats2[1][23] + coeff0_2*dmats2[2][23] + coeff0_3*dmats2[3][23] + coeff0_4*dmats2[4][23] + coeff0_5*dmats2[5][23] + coeff0_6*dmats2[6][23] + coeff0_7*dmats2[7][23] + coeff0_8*dmats2[8][23] + coeff0_9*dmats2[9][23] + coeff0_10*dmats2[10][23] + coeff0_11*dmats2[11][23] + coeff0_12*dmats2[12][23] + coeff0_13*dmats2[13][23] + coeff0_14*dmats2[14][23] + coeff0_15*dmats2[15][23] + coeff0_16*dmats2[16][23] + coeff0_17*dmats2[17][23] + coeff0_18*dmats2[18][23] + coeff0_19*dmats2[19][23] + coeff0_20*dmats2[20][23] + coeff0_21*dmats2[21][23] + coeff0_22*dmats2[22][23] + coeff0_23*dmats2[23][23] + coeff0_24*dmats2[24][23] + coeff0_25*dmats2[25][23] + coeff0_26*dmats2[26][23] + coeff0_27*dmats2[27][23] + coeff0_28*dmats2[28][23] + coeff0_29*dmats2[29][23] + coeff0_30*dmats2[30][23] + coeff0_31*dmats2[31][23] + coeff0_32*dmats2[32][23] + coeff0_33*dmats2[33][23] + coeff0_34*dmats2[34][23];
          new_coeff0_24 = coeff0_0*dmats2[0][24] + coeff0_1*dmats2[1][24] + coeff0_2*dmats2[2][24] + coeff0_3*dmats2[3][24] + coeff0_4*dmats2[4][24] + coeff0_5*dmats2[5][24] + coeff0_6*dmats2[6][24] + coeff0_7*dmats2[7][24] + coeff0_8*dmats2[8][24] + coeff0_9*dmats2[9][24] + coeff0_10*dmats2[10][24] + coeff0_11*dmats2[11][24] + coeff0_12*dmats2[12][24] + coeff0_13*dmats2[13][24] + coeff0_14*dmats2[14][24] + coeff0_15*dmats2[15][24] + coeff0_16*dmats2[16][24] + coeff0_17*dmats2[17][24] + coeff0_18*dmats2[18][24] + coeff0_19*dmats2[19][24] + coeff0_20*dmats2[20][24] + coeff0_21*dmats2[21][24] + coeff0_22*dmats2[22][24] + coeff0_23*dmats2[23][24] + coeff0_24*dmats2[24][24] + coeff0_25*dmats2[25][24] + coeff0_26*dmats2[26][24] + coeff0_27*dmats2[27][24] + coeff0_28*dmats2[28][24] + coeff0_29*dmats2[29][24] + coeff0_30*dmats2[30][24] + coeff0_31*dmats2[31][24] + coeff0_32*dmats2[32][24] + coeff0_33*dmats2[33][24] + coeff0_34*dmats2[34][24];
          new_coeff0_25 = coeff0_0*dmats2[0][25] + coeff0_1*dmats2[1][25] + coeff0_2*dmats2[2][25] + coeff0_3*dmats2[3][25] + coeff0_4*dmats2[4][25] + coeff0_5*dmats2[5][25] + coeff0_6*dmats2[6][25] + coeff0_7*dmats2[7][25] + coeff0_8*dmats2[8][25] + coeff0_9*dmats2[9][25] + coeff0_10*dmats2[10][25] + coeff0_11*dmats2[11][25] + coeff0_12*dmats2[12][25] + coeff0_13*dmats2[13][25] + coeff0_14*dmats2[14][25] + coeff0_15*dmats2[15][25] + coeff0_16*dmats2[16][25] + coeff0_17*dmats2[17][25] + coeff0_18*dmats2[18][25] + coeff0_19*dmats2[19][25] + coeff0_20*dmats2[20][25] + coeff0_21*dmats2[21][25] + coeff0_22*dmats2[22][25] + coeff0_23*dmats2[23][25] + coeff0_24*dmats2[24][25] + coeff0_25*dmats2[25][25] + coeff0_26*dmats2[26][25] + coeff0_27*dmats2[27][25] + coeff0_28*dmats2[28][25] + coeff0_29*dmats2[29][25] + coeff0_30*dmats2[30][25] + coeff0_31*dmats2[31][25] + coeff0_32*dmats2[32][25] + coeff0_33*dmats2[33][25] + coeff0_34*dmats2[34][25];
          new_coeff0_26 = coeff0_0*dmats2[0][26] + coeff0_1*dmats2[1][26] + coeff0_2*dmats2[2][26] + coeff0_3*dmats2[3][26] + coeff0_4*dmats2[4][26] + coeff0_5*dmats2[5][26] + coeff0_6*dmats2[6][26] + coeff0_7*dmats2[7][26] + coeff0_8*dmats2[8][26] + coeff0_9*dmats2[9][26] + coeff0_10*dmats2[10][26] + coeff0_11*dmats2[11][26] + coeff0_12*dmats2[12][26] + coeff0_13*dmats2[13][26] + coeff0_14*dmats2[14][26] + coeff0_15*dmats2[15][26] + coeff0_16*dmats2[16][26] + coeff0_17*dmats2[17][26] + coeff0_18*dmats2[18][26] + coeff0_19*dmats2[19][26] + coeff0_20*dmats2[20][26] + coeff0_21*dmats2[21][26] + coeff0_22*dmats2[22][26] + coeff0_23*dmats2[23][26] + coeff0_24*dmats2[24][26] + coeff0_25*dmats2[25][26] + coeff0_26*dmats2[26][26] + coeff0_27*dmats2[27][26] + coeff0_28*dmats2[28][26] + coeff0_29*dmats2[29][26] + coeff0_30*dmats2[30][26] + coeff0_31*dmats2[31][26] + coeff0_32*dmats2[32][26] + coeff0_33*dmats2[33][26] + coeff0_34*dmats2[34][26];
          new_coeff0_27 = coeff0_0*dmats2[0][27] + coeff0_1*dmats2[1][27] + coeff0_2*dmats2[2][27] + coeff0_3*dmats2[3][27] + coeff0_4*dmats2[4][27] + coeff0_5*dmats2[5][27] + coeff0_6*dmats2[6][27] + coeff0_7*dmats2[7][27] + coeff0_8*dmats2[8][27] + coeff0_9*dmats2[9][27] + coeff0_10*dmats2[10][27] + coeff0_11*dmats2[11][27] + coeff0_12*dmats2[12][27] + coeff0_13*dmats2[13][27] + coeff0_14*dmats2[14][27] + coeff0_15*dmats2[15][27] + coeff0_16*dmats2[16][27] + coeff0_17*dmats2[17][27] + coeff0_18*dmats2[18][27] + coeff0_19*dmats2[19][27] + coeff0_20*dmats2[20][27] + coeff0_21*dmats2[21][27] + coeff0_22*dmats2[22][27] + coeff0_23*dmats2[23][27] + coeff0_24*dmats2[24][27] + coeff0_25*dmats2[25][27] + coeff0_26*dmats2[26][27] + coeff0_27*dmats2[27][27] + coeff0_28*dmats2[28][27] + coeff0_29*dmats2[29][27] + coeff0_30*dmats2[30][27] + coeff0_31*dmats2[31][27] + coeff0_32*dmats2[32][27] + coeff0_33*dmats2[33][27] + coeff0_34*dmats2[34][27];
          new_coeff0_28 = coeff0_0*dmats2[0][28] + coeff0_1*dmats2[1][28] + coeff0_2*dmats2[2][28] + coeff0_3*dmats2[3][28] + coeff0_4*dmats2[4][28] + coeff0_5*dmats2[5][28] + coeff0_6*dmats2[6][28] + coeff0_7*dmats2[7][28] + coeff0_8*dmats2[8][28] + coeff0_9*dmats2[9][28] + coeff0_10*dmats2[10][28] + coeff0_11*dmats2[11][28] + coeff0_12*dmats2[12][28] + coeff0_13*dmats2[13][28] + coeff0_14*dmats2[14][28] + coeff0_15*dmats2[15][28] + coeff0_16*dmats2[16][28] + coeff0_17*dmats2[17][28] + coeff0_18*dmats2[18][28] + coeff0_19*dmats2[19][28] + coeff0_20*dmats2[20][28] + coeff0_21*dmats2[21][28] + coeff0_22*dmats2[22][28] + coeff0_23*dmats2[23][28] + coeff0_24*dmats2[24][28] + coeff0_25*dmats2[25][28] + coeff0_26*dmats2[26][28] + coeff0_27*dmats2[27][28] + coeff0_28*dmats2[28][28] + coeff0_29*dmats2[29][28] + coeff0_30*dmats2[30][28] + coeff0_31*dmats2[31][28] + coeff0_32*dmats2[32][28] + coeff0_33*dmats2[33][28] + coeff0_34*dmats2[34][28];
          new_coeff0_29 = coeff0_0*dmats2[0][29] + coeff0_1*dmats2[1][29] + coeff0_2*dmats2[2][29] + coeff0_3*dmats2[3][29] + coeff0_4*dmats2[4][29] + coeff0_5*dmats2[5][29] + coeff0_6*dmats2[6][29] + coeff0_7*dmats2[7][29] + coeff0_8*dmats2[8][29] + coeff0_9*dmats2[9][29] + coeff0_10*dmats2[10][29] + coeff0_11*dmats2[11][29] + coeff0_12*dmats2[12][29] + coeff0_13*dmats2[13][29] + coeff0_14*dmats2[14][29] + coeff0_15*dmats2[15][29] + coeff0_16*dmats2[16][29] + coeff0_17*dmats2[17][29] + coeff0_18*dmats2[18][29] + coeff0_19*dmats2[19][29] + coeff0_20*dmats2[20][29] + coeff0_21*dmats2[21][29] + coeff0_22*dmats2[22][29] + coeff0_23*dmats2[23][29] + coeff0_24*dmats2[24][29] + coeff0_25*dmats2[25][29] + coeff0_26*dmats2[26][29] + coeff0_27*dmats2[27][29] + coeff0_28*dmats2[28][29] + coeff0_29*dmats2[29][29] + coeff0_30*dmats2[30][29] + coeff0_31*dmats2[31][29] + coeff0_32*dmats2[32][29] + coeff0_33*dmats2[33][29] + coeff0_34*dmats2[34][29];
          new_coeff0_30 = coeff0_0*dmats2[0][30] + coeff0_1*dmats2[1][30] + coeff0_2*dmats2[2][30] + coeff0_3*dmats2[3][30] + coeff0_4*dmats2[4][30] + coeff0_5*dmats2[5][30] + coeff0_6*dmats2[6][30] + coeff0_7*dmats2[7][30] + coeff0_8*dmats2[8][30] + coeff0_9*dmats2[9][30] + coeff0_10*dmats2[10][30] + coeff0_11*dmats2[11][30] + coeff0_12*dmats2[12][30] + coeff0_13*dmats2[13][30] + coeff0_14*dmats2[14][30] + coeff0_15*dmats2[15][30] + coeff0_16*dmats2[16][30] + coeff0_17*dmats2[17][30] + coeff0_18*dmats2[18][30] + coeff0_19*dmats2[19][30] + coeff0_20*dmats2[20][30] + coeff0_21*dmats2[21][30] + coeff0_22*dmats2[22][30] + coeff0_23*dmats2[23][30] + coeff0_24*dmats2[24][30] + coeff0_25*dmats2[25][30] + coeff0_26*dmats2[26][30] + coeff0_27*dmats2[27][30] + coeff0_28*dmats2[28][30] + coeff0_29*dmats2[29][30] + coeff0_30*dmats2[30][30] + coeff0_31*dmats2[31][30] + coeff0_32*dmats2[32][30] + coeff0_33*dmats2[33][30] + coeff0_34*dmats2[34][30];
          new_coeff0_31 = coeff0_0*dmats2[0][31] + coeff0_1*dmats2[1][31] + coeff0_2*dmats2[2][31] + coeff0_3*dmats2[3][31] + coeff0_4*dmats2[4][31] + coeff0_5*dmats2[5][31] + coeff0_6*dmats2[6][31] + coeff0_7*dmats2[7][31] + coeff0_8*dmats2[8][31] + coeff0_9*dmats2[9][31] + coeff0_10*dmats2[10][31] + coeff0_11*dmats2[11][31] + coeff0_12*dmats2[12][31] + coeff0_13*dmats2[13][31] + coeff0_14*dmats2[14][31] + coeff0_15*dmats2[15][31] + coeff0_16*dmats2[16][31] + coeff0_17*dmats2[17][31] + coeff0_18*dmats2[18][31] + coeff0_19*dmats2[19][31] + coeff0_20*dmats2[20][31] + coeff0_21*dmats2[21][31] + coeff0_22*dmats2[22][31] + coeff0_23*dmats2[23][31] + coeff0_24*dmats2[24][31] + coeff0_25*dmats2[25][31] + coeff0_26*dmats2[26][31] + coeff0_27*dmats2[27][31] + coeff0_28*dmats2[28][31] + coeff0_29*dmats2[29][31] + coeff0_30*dmats2[30][31] + coeff0_31*dmats2[31][31] + coeff0_32*dmats2[32][31] + coeff0_33*dmats2[33][31] + coeff0_34*dmats2[34][31];
          new_coeff0_32 = coeff0_0*dmats2[0][32] + coeff0_1*dmats2[1][32] + coeff0_2*dmats2[2][32] + coeff0_3*dmats2[3][32] + coeff0_4*dmats2[4][32] + coeff0_5*dmats2[5][32] + coeff0_6*dmats2[6][32] + coeff0_7*dmats2[7][32] + coeff0_8*dmats2[8][32] + coeff0_9*dmats2[9][32] + coeff0_10*dmats2[10][32] + coeff0_11*dmats2[11][32] + coeff0_12*dmats2[12][32] + coeff0_13*dmats2[13][32] + coeff0_14*dmats2[14][32] + coeff0_15*dmats2[15][32] + coeff0_16*dmats2[16][32] + coeff0_17*dmats2[17][32] + coeff0_18*dmats2[18][32] + coeff0_19*dmats2[19][32] + coeff0_20*dmats2[20][32] + coeff0_21*dmats2[21][32] + coeff0_22*dmats2[22][32] + coeff0_23*dmats2[23][32] + coeff0_24*dmats2[24][32] + coeff0_25*dmats2[25][32] + coeff0_26*dmats2[26][32] + coeff0_27*dmats2[27][32] + coeff0_28*dmats2[28][32] + coeff0_29*dmats2[29][32] + coeff0_30*dmats2[30][32] + coeff0_31*dmats2[31][32] + coeff0_32*dmats2[32][32] + coeff0_33*dmats2[33][32] + coeff0_34*dmats2[34][32];
          new_coeff0_33 = coeff0_0*dmats2[0][33] + coeff0_1*dmats2[1][33] + coeff0_2*dmats2[2][33] + coeff0_3*dmats2[3][33] + coeff0_4*dmats2[4][33] + coeff0_5*dmats2[5][33] + coeff0_6*dmats2[6][33] + coeff0_7*dmats2[7][33] + coeff0_8*dmats2[8][33] + coeff0_9*dmats2[9][33] + coeff0_10*dmats2[10][33] + coeff0_11*dmats2[11][33] + coeff0_12*dmats2[12][33] + coeff0_13*dmats2[13][33] + coeff0_14*dmats2[14][33] + coeff0_15*dmats2[15][33] + coeff0_16*dmats2[16][33] + coeff0_17*dmats2[17][33] + coeff0_18*dmats2[18][33] + coeff0_19*dmats2[19][33] + coeff0_20*dmats2[20][33] + coeff0_21*dmats2[21][33] + coeff0_22*dmats2[22][33] + coeff0_23*dmats2[23][33] + coeff0_24*dmats2[24][33] + coeff0_25*dmats2[25][33] + coeff0_26*dmats2[26][33] + coeff0_27*dmats2[27][33] + coeff0_28*dmats2[28][33] + coeff0_29*dmats2[29][33] + coeff0_30*dmats2[30][33] + coeff0_31*dmats2[31][33] + coeff0_32*dmats2[32][33] + coeff0_33*dmats2[33][33] + coeff0_34*dmats2[34][33];
          new_coeff0_34 = coeff0_0*dmats2[0][34] + coeff0_1*dmats2[1][34] + coeff0_2*dmats2[2][34] + coeff0_3*dmats2[3][34] + coeff0_4*dmats2[4][34] + coeff0_5*dmats2[5][34] + coeff0_6*dmats2[6][34] + coeff0_7*dmats2[7][34] + coeff0_8*dmats2[8][34] + coeff0_9*dmats2[9][34] + coeff0_10*dmats2[10][34] + coeff0_11*dmats2[11][34] + coeff0_12*dmats2[12][34] + coeff0_13*dmats2[13][34] + coeff0_14*dmats2[14][34] + coeff0_15*dmats2[15][34] + coeff0_16*dmats2[16][34] + coeff0_17*dmats2[17][34] + coeff0_18*dmats2[18][34] + coeff0_19*dmats2[19][34] + coeff0_20*dmats2[20][34] + coeff0_21*dmats2[21][34] + coeff0_22*dmats2[22][34] + coeff0_23*dmats2[23][34] + coeff0_24*dmats2[24][34] + coeff0_25*dmats2[25][34] + coeff0_26*dmats2[26][34] + coeff0_27*dmats2[27][34] + coeff0_28*dmats2[28][34] + coeff0_29*dmats2[29][34] + coeff0_30*dmats2[30][34] + coeff0_31*dmats2[31][34] + coeff0_32*dmats2[32][34] + coeff0_33*dmats2[33][34] + coeff0_34*dmats2[34][34];
        }
    
      }
      // Compute derivatives on reference element as dot product of coefficients and basisvalues
      derivatives[deriv_num] = new_coeff0_0*basisvalue0 + new_coeff0_1*basisvalue1 + new_coeff0_2*basisvalue2 + new_coeff0_3*basisvalue3 + new_coeff0_4*basisvalue4 + new_coeff0_5*basisvalue5 + new_coeff0_6*basisvalue6 + new_coeff0_7*basisvalue7 + new_coeff0_8*basisvalue8 + new_coeff0_9*basisvalue9 + new_coeff0_10*basisvalue10 + new_coeff0_11*basisvalue11 + new_coeff0_12*basisvalue12 + new_coeff0_13*basisvalue13 + new_coeff0_14*basisvalue14 + new_coeff0_15*basisvalue15 + new_coeff0_16*basisvalue16 + new_coeff0_17*basisvalue17 + new_coeff0_18*basisvalue18 + new_coeff0_19*basisvalue19 + new_coeff0_20*basisvalue20 + new_coeff0_21*basisvalue21 + new_coeff0_22*basisvalue22 + new_coeff0_23*basisvalue23 + new_coeff0_24*basisvalue24 + new_coeff0_25*basisvalue25 + new_coeff0_26*basisvalue26 + new_coeff0_27*basisvalue27 + new_coeff0_28*basisvalue28 + new_coeff0_29*basisvalue29 + new_coeff0_30*basisvalue30 + new_coeff0_31*basisvalue31 + new_coeff0_32*basisvalue32 + new_coeff0_33*basisvalue33 + new_coeff0_34*basisvalue34;
    }
    
    // Transform derivatives back to physical element
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        values[row] += transform[row][col]*derivatives[col];
      }
    }
    // Delete pointer to array of derivatives on FIAT element
    delete [] derivatives;
    
    // Delete pointer to array of combinations of derivatives and transform
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      delete [] combinations[row];
      delete [] transform[row];
    }
    
    delete [] combinations;
    delete [] transform;
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis_derivatives() is not yet implemented.");
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // The reference points, direction and weights:
    const static double X[35][1][3] = {{{0, 0, 0}}, {{1, 0, 0}}, {{0, 1, 0}}, {{0, 0, 1}}, {{0, 0.75, 0.25}}, {{0, 0.5, 0.5}}, {{0, 0.25, 0.75}}, {{0.75, 0, 0.25}}, {{0.5, 0, 0.5}}, {{0.25, 0, 0.75}}, {{0.75, 0.25, 0}}, {{0.5, 0.5, 0}}, {{0.25, 0.75, 0}}, {{0, 0, 0.25}}, {{0, 0, 0.5}}, {{0, 0, 0.75}}, {{0, 0.25, 0}}, {{0, 0.5, 0}}, {{0, 0.75, 0}}, {{0.25, 0, 0}}, {{0.5, 0, 0}}, {{0.75, 0, 0}}, {{0.5, 0.25, 0.25}}, {{0.25, 0.5, 0.25}}, {{0.25, 0.25, 0.5}}, {{0, 0.25, 0.25}}, {{0, 0.5, 0.25}}, {{0, 0.25, 0.5}}, {{0.25, 0, 0.25}}, {{0.5, 0, 0.25}}, {{0.25, 0, 0.5}}, {{0.25, 0.25, 0}}, {{0.5, 0.25, 0}}, {{0.25, 0.5, 0}}, {{0.25, 0.25, 0.25}}};
    const static double W[35][1] = {{1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}};
    const static double D[35][1][1] = {{{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}};
    
    const double * const * x = c.coordinates;
    double result = 0.0;
    // Iterate over the points:
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0][0] - X[i][0][1] - X[i][0][2];
    const double w1 = X[i][0][0];
    const double w2 = X[i][0][1];
    const double w3 = X[i][0][2];
    
    // Compute affine mapping y = F(X)
    double y[3];
    y[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0] + w3*x[3][0];
    y[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1] + w3*x[3][1];
    y[2] = w0*x[0][2] + w1*x[1][2] + w2*x[2][2] + w3*x[3][2];
    
    // Evaluate function at physical points
    double values[1];
    f.evaluate(values, y, c);
    
    // Map function values using appropriate mapping
    // Affine map: Do nothing
    
    // Note that we do not map the weights (yet).
    
    // Take directional components
    for(int k = 0; k < 1; k++)
      result += values[k]*D[i][0][k];
    // Multiply by weights 
    result *= W[i][0];
    
    return result;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate at vertices and use affine mapping
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new poisson3d_4_0_finite_element_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class poisson3d_4_0_dof_map_0: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  poisson3d_4_0_dof_map_0() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~poisson3d_4_0_dof_map_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for FiniteElement('Lagrange', 'tetrahedron', 4)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return true;
      break;
    case 2:
      return true;
      break;
    case 3:
      return true;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = m.num_entities[0] + 3*m.num_entities[1] + 3*m.num_entities[2] + m.num_entities[3];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 35;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 35;
  }

  // Return the geometric dimension of the coordinates this dof map provides
  virtual unsigned int geometric_dimension() const
  {
    return 3;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 15;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    dofs[3] = c.entity_indices[0][3];
    unsigned int offset = m.num_entities[0];
    dofs[4] = offset + 3*c.entity_indices[1][0];
    dofs[5] = offset + 3*c.entity_indices[1][0] + 1;
    dofs[6] = offset + 3*c.entity_indices[1][0] + 2;
    dofs[7] = offset + 3*c.entity_indices[1][1];
    dofs[8] = offset + 3*c.entity_indices[1][1] + 1;
    dofs[9] = offset + 3*c.entity_indices[1][1] + 2;
    dofs[10] = offset + 3*c.entity_indices[1][2];
    dofs[11] = offset + 3*c.entity_indices[1][2] + 1;
    dofs[12] = offset + 3*c.entity_indices[1][2] + 2;
    dofs[13] = offset + 3*c.entity_indices[1][3];
    dofs[14] = offset + 3*c.entity_indices[1][3] + 1;
    dofs[15] = offset + 3*c.entity_indices[1][3] + 2;
    dofs[16] = offset + 3*c.entity_indices[1][4];
    dofs[17] = offset + 3*c.entity_indices[1][4] + 1;
    dofs[18] = offset + 3*c.entity_indices[1][4] + 2;
    dofs[19] = offset + 3*c.entity_indices[1][5];
    dofs[20] = offset + 3*c.entity_indices[1][5] + 1;
    dofs[21] = offset + 3*c.entity_indices[1][5] + 2;
    offset = offset + 3*m.num_entities[1];
    dofs[22] = offset + 3*c.entity_indices[2][0];
    dofs[23] = offset + 3*c.entity_indices[2][0] + 1;
    dofs[24] = offset + 3*c.entity_indices[2][0] + 2;
    dofs[25] = offset + 3*c.entity_indices[2][1];
    dofs[26] = offset + 3*c.entity_indices[2][1] + 1;
    dofs[27] = offset + 3*c.entity_indices[2][1] + 2;
    dofs[28] = offset + 3*c.entity_indices[2][2];
    dofs[29] = offset + 3*c.entity_indices[2][2] + 1;
    dofs[30] = offset + 3*c.entity_indices[2][2] + 2;
    dofs[31] = offset + 3*c.entity_indices[2][3];
    dofs[32] = offset + 3*c.entity_indices[2][3] + 1;
    dofs[33] = offset + 3*c.entity_indices[2][3] + 2;
    offset = offset + 3*m.num_entities[2];
    dofs[34] = offset + c.entity_indices[3][0];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 7;
      dofs[7] = 8;
      dofs[8] = 9;
      dofs[9] = 10;
      dofs[10] = 11;
      dofs[11] = 12;
      dofs[12] = 22;
      dofs[13] = 23;
      dofs[14] = 24;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 13;
      dofs[7] = 14;
      dofs[8] = 15;
      dofs[9] = 16;
      dofs[10] = 17;
      dofs[11] = 18;
      dofs[12] = 25;
      dofs[13] = 26;
      dofs[14] = 27;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 7;
      dofs[4] = 8;
      dofs[5] = 9;
      dofs[6] = 13;
      dofs[7] = 14;
      dofs[8] = 15;
      dofs[9] = 19;
      dofs[10] = 20;
      dofs[11] = 21;
      dofs[12] = 28;
      dofs[13] = 29;
      dofs[14] = 30;
      break;
    case 3:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 10;
      dofs[4] = 11;
      dofs[5] = 12;
      dofs[6] = 16;
      dofs[7] = 17;
      dofs[8] = 18;
      dofs[9] = 19;
      dofs[10] = 20;
      dofs[11] = 21;
      dofs[12] = 31;
      dofs[13] = 32;
      dofs[14] = 33;
      break;
    }
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[0][2] = x[0][2];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[1][2] = x[1][2];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[2][2] = x[2][2];
    coordinates[3][0] = x[3][0];
    coordinates[3][1] = x[3][1];
    coordinates[3][2] = x[3][2];
    coordinates[4][0] = 0.75*x[2][0] + 0.25*x[3][0];
    coordinates[4][1] = 0.75*x[2][1] + 0.25*x[3][1];
    coordinates[4][2] = 0.75*x[2][2] + 0.25*x[3][2];
    coordinates[5][0] = 0.5*x[2][0] + 0.5*x[3][0];
    coordinates[5][1] = 0.5*x[2][1] + 0.5*x[3][1];
    coordinates[5][2] = 0.5*x[2][2] + 0.5*x[3][2];
    coordinates[6][0] = 0.25*x[2][0] + 0.75*x[3][0];
    coordinates[6][1] = 0.25*x[2][1] + 0.75*x[3][1];
    coordinates[6][2] = 0.25*x[2][2] + 0.75*x[3][2];
    coordinates[7][0] = 0.75*x[1][0] + 0.25*x[3][0];
    coordinates[7][1] = 0.75*x[1][1] + 0.25*x[3][1];
    coordinates[7][2] = 0.75*x[1][2] + 0.25*x[3][2];
    coordinates[8][0] = 0.5*x[1][0] + 0.5*x[3][0];
    coordinates[8][1] = 0.5*x[1][1] + 0.5*x[3][1];
    coordinates[8][2] = 0.5*x[1][2] + 0.5*x[3][2];
    coordinates[9][0] = 0.25*x[1][0] + 0.75*x[3][0];
    coordinates[9][1] = 0.25*x[1][1] + 0.75*x[3][1];
    coordinates[9][2] = 0.25*x[1][2] + 0.75*x[3][2];
    coordinates[10][0] = 0.75*x[1][0] + 0.25*x[2][0];
    coordinates[10][1] = 0.75*x[1][1] + 0.25*x[2][1];
    coordinates[10][2] = 0.75*x[1][2] + 0.25*x[2][2];
    coordinates[11][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[11][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[11][2] = 0.5*x[1][2] + 0.5*x[2][2];
    coordinates[12][0] = 0.25*x[1][0] + 0.75*x[2][0];
    coordinates[12][1] = 0.25*x[1][1] + 0.75*x[2][1];
    coordinates[12][2] = 0.25*x[1][2] + 0.75*x[2][2];
    coordinates[13][0] = 0.75*x[0][0] + 0.25*x[3][0];
    coordinates[13][1] = 0.75*x[0][1] + 0.25*x[3][1];
    coordinates[13][2] = 0.75*x[0][2] + 0.25*x[3][2];
    coordinates[14][0] = 0.5*x[0][0] + 0.5*x[3][0];
    coordinates[14][1] = 0.5*x[0][1] + 0.5*x[3][1];
    coordinates[14][2] = 0.5*x[0][2] + 0.5*x[3][2];
    coordinates[15][0] = 0.25*x[0][0] + 0.75*x[3][0];
    coordinates[15][1] = 0.25*x[0][1] + 0.75*x[3][1];
    coordinates[15][2] = 0.25*x[0][2] + 0.75*x[3][2];
    coordinates[16][0] = 0.75*x[0][0] + 0.25*x[2][0];
    coordinates[16][1] = 0.75*x[0][1] + 0.25*x[2][1];
    coordinates[16][2] = 0.75*x[0][2] + 0.25*x[2][2];
    coordinates[17][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[17][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[17][2] = 0.5*x[0][2] + 0.5*x[2][2];
    coordinates[18][0] = 0.25*x[0][0] + 0.75*x[2][0];
    coordinates[18][1] = 0.25*x[0][1] + 0.75*x[2][1];
    coordinates[18][2] = 0.25*x[0][2] + 0.75*x[2][2];
    coordinates[19][0] = 0.75*x[0][0] + 0.25*x[1][0];
    coordinates[19][1] = 0.75*x[0][1] + 0.25*x[1][1];
    coordinates[19][2] = 0.75*x[0][2] + 0.25*x[1][2];
    coordinates[20][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[20][1] = 0.5*x[0][1] + 0.5*x[1][1];
    coordinates[20][2] = 0.5*x[0][2] + 0.5*x[1][2];
    coordinates[21][0] = 0.25*x[0][0] + 0.75*x[1][0];
    coordinates[21][1] = 0.25*x[0][1] + 0.75*x[1][1];
    coordinates[21][2] = 0.25*x[0][2] + 0.75*x[1][2];
    coordinates[22][0] = 0.5*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[22][1] = 0.5*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[22][2] = 0.5*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
    coordinates[23][0] = 0.25*x[1][0] + 0.5*x[2][0] + 0.25*x[3][0];
    coordinates[23][1] = 0.25*x[1][1] + 0.5*x[2][1] + 0.25*x[3][1];
    coordinates[23][2] = 0.25*x[1][2] + 0.5*x[2][2] + 0.25*x[3][2];
    coordinates[24][0] = 0.25*x[1][0] + 0.25*x[2][0] + 0.5*x[3][0];
    coordinates[24][1] = 0.25*x[1][1] + 0.25*x[2][1] + 0.5*x[3][1];
    coordinates[24][2] = 0.25*x[1][2] + 0.25*x[2][2] + 0.5*x[3][2];
    coordinates[25][0] = 0.5*x[0][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[25][1] = 0.5*x[0][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[25][2] = 0.5*x[0][2] + 0.25*x[2][2] + 0.25*x[3][2];
    coordinates[26][0] = 0.25*x[0][0] + 0.5*x[2][0] + 0.25*x[3][0];
    coordinates[26][1] = 0.25*x[0][1] + 0.5*x[2][1] + 0.25*x[3][1];
    coordinates[26][2] = 0.25*x[0][2] + 0.5*x[2][2] + 0.25*x[3][2];
    coordinates[27][0] = 0.25*x[0][0] + 0.25*x[2][0] + 0.5*x[3][0];
    coordinates[27][1] = 0.25*x[0][1] + 0.25*x[2][1] + 0.5*x[3][1];
    coordinates[27][2] = 0.25*x[0][2] + 0.25*x[2][2] + 0.5*x[3][2];
    coordinates[28][0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[3][0];
    coordinates[28][1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[3][1];
    coordinates[28][2] = 0.5*x[0][2] + 0.25*x[1][2] + 0.25*x[3][2];
    coordinates[29][0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[3][0];
    coordinates[29][1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[3][1];
    coordinates[29][2] = 0.25*x[0][2] + 0.5*x[1][2] + 0.25*x[3][2];
    coordinates[30][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[3][0];
    coordinates[30][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[3][1];
    coordinates[30][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.5*x[3][2];
    coordinates[31][0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0];
    coordinates[31][1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1];
    coordinates[31][2] = 0.5*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2];
    coordinates[32][0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[2][0];
    coordinates[32][1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[2][1];
    coordinates[32][2] = 0.25*x[0][2] + 0.5*x[1][2] + 0.25*x[2][2];
    coordinates[33][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[2][0];
    coordinates[33][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[2][1];
    coordinates[33][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.5*x[2][2];
    coordinates[34][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[34][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[34][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new poisson3d_4_0_dof_map_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class poisson3d_4_0_dof_map_1: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  poisson3d_4_0_dof_map_1() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~poisson3d_4_0_dof_map_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for FiniteElement('Lagrange', 'tetrahedron', 4)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return true;
      break;
    case 2:
      return true;
      break;
    case 3:
      return true;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = m.num_entities[0] + 3*m.num_entities[1] + 3*m.num_entities[2] + m.num_entities[3];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 35;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 35;
  }

  // Return the geometric dimension of the coordinates this dof map provides
  virtual unsigned int geometric_dimension() const
  {
    return 3;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 15;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    dofs[3] = c.entity_indices[0][3];
    unsigned int offset = m.num_entities[0];
    dofs[4] = offset + 3*c.entity_indices[1][0];
    dofs[5] = offset + 3*c.entity_indices[1][0] + 1;
    dofs[6] = offset + 3*c.entity_indices[1][0] + 2;
    dofs[7] = offset + 3*c.entity_indices[1][1];
    dofs[8] = offset + 3*c.entity_indices[1][1] + 1;
    dofs[9] = offset + 3*c.entity_indices[1][1] + 2;
    dofs[10] = offset + 3*c.entity_indices[1][2];
    dofs[11] = offset + 3*c.entity_indices[1][2] + 1;
    dofs[12] = offset + 3*c.entity_indices[1][2] + 2;
    dofs[13] = offset + 3*c.entity_indices[1][3];
    dofs[14] = offset + 3*c.entity_indices[1][3] + 1;
    dofs[15] = offset + 3*c.entity_indices[1][3] + 2;
    dofs[16] = offset + 3*c.entity_indices[1][4];
    dofs[17] = offset + 3*c.entity_indices[1][4] + 1;
    dofs[18] = offset + 3*c.entity_indices[1][4] + 2;
    dofs[19] = offset + 3*c.entity_indices[1][5];
    dofs[20] = offset + 3*c.entity_indices[1][5] + 1;
    dofs[21] = offset + 3*c.entity_indices[1][5] + 2;
    offset = offset + 3*m.num_entities[1];
    dofs[22] = offset + 3*c.entity_indices[2][0];
    dofs[23] = offset + 3*c.entity_indices[2][0] + 1;
    dofs[24] = offset + 3*c.entity_indices[2][0] + 2;
    dofs[25] = offset + 3*c.entity_indices[2][1];
    dofs[26] = offset + 3*c.entity_indices[2][1] + 1;
    dofs[27] = offset + 3*c.entity_indices[2][1] + 2;
    dofs[28] = offset + 3*c.entity_indices[2][2];
    dofs[29] = offset + 3*c.entity_indices[2][2] + 1;
    dofs[30] = offset + 3*c.entity_indices[2][2] + 2;
    dofs[31] = offset + 3*c.entity_indices[2][3];
    dofs[32] = offset + 3*c.entity_indices[2][3] + 1;
    dofs[33] = offset + 3*c.entity_indices[2][3] + 2;
    offset = offset + 3*m.num_entities[2];
    dofs[34] = offset + c.entity_indices[3][0];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 7;
      dofs[7] = 8;
      dofs[8] = 9;
      dofs[9] = 10;
      dofs[10] = 11;
      dofs[11] = 12;
      dofs[12] = 22;
      dofs[13] = 23;
      dofs[14] = 24;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 13;
      dofs[7] = 14;
      dofs[8] = 15;
      dofs[9] = 16;
      dofs[10] = 17;
      dofs[11] = 18;
      dofs[12] = 25;
      dofs[13] = 26;
      dofs[14] = 27;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 7;
      dofs[4] = 8;
      dofs[5] = 9;
      dofs[6] = 13;
      dofs[7] = 14;
      dofs[8] = 15;
      dofs[9] = 19;
      dofs[10] = 20;
      dofs[11] = 21;
      dofs[12] = 28;
      dofs[13] = 29;
      dofs[14] = 30;
      break;
    case 3:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 10;
      dofs[4] = 11;
      dofs[5] = 12;
      dofs[6] = 16;
      dofs[7] = 17;
      dofs[8] = 18;
      dofs[9] = 19;
      dofs[10] = 20;
      dofs[11] = 21;
      dofs[12] = 31;
      dofs[13] = 32;
      dofs[14] = 33;
      break;
    }
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[0][2] = x[0][2];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[1][2] = x[1][2];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[2][2] = x[2][2];
    coordinates[3][0] = x[3][0];
    coordinates[3][1] = x[3][1];
    coordinates[3][2] = x[3][2];
    coordinates[4][0] = 0.75*x[2][0] + 0.25*x[3][0];
    coordinates[4][1] = 0.75*x[2][1] + 0.25*x[3][1];
    coordinates[4][2] = 0.75*x[2][2] + 0.25*x[3][2];
    coordinates[5][0] = 0.5*x[2][0] + 0.5*x[3][0];
    coordinates[5][1] = 0.5*x[2][1] + 0.5*x[3][1];
    coordinates[5][2] = 0.5*x[2][2] + 0.5*x[3][2];
    coordinates[6][0] = 0.25*x[2][0] + 0.75*x[3][0];
    coordinates[6][1] = 0.25*x[2][1] + 0.75*x[3][1];
    coordinates[6][2] = 0.25*x[2][2] + 0.75*x[3][2];
    coordinates[7][0] = 0.75*x[1][0] + 0.25*x[3][0];
    coordinates[7][1] = 0.75*x[1][1] + 0.25*x[3][1];
    coordinates[7][2] = 0.75*x[1][2] + 0.25*x[3][2];
    coordinates[8][0] = 0.5*x[1][0] + 0.5*x[3][0];
    coordinates[8][1] = 0.5*x[1][1] + 0.5*x[3][1];
    coordinates[8][2] = 0.5*x[1][2] + 0.5*x[3][2];
    coordinates[9][0] = 0.25*x[1][0] + 0.75*x[3][0];
    coordinates[9][1] = 0.25*x[1][1] + 0.75*x[3][1];
    coordinates[9][2] = 0.25*x[1][2] + 0.75*x[3][2];
    coordinates[10][0] = 0.75*x[1][0] + 0.25*x[2][0];
    coordinates[10][1] = 0.75*x[1][1] + 0.25*x[2][1];
    coordinates[10][2] = 0.75*x[1][2] + 0.25*x[2][2];
    coordinates[11][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[11][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[11][2] = 0.5*x[1][2] + 0.5*x[2][2];
    coordinates[12][0] = 0.25*x[1][0] + 0.75*x[2][0];
    coordinates[12][1] = 0.25*x[1][1] + 0.75*x[2][1];
    coordinates[12][2] = 0.25*x[1][2] + 0.75*x[2][2];
    coordinates[13][0] = 0.75*x[0][0] + 0.25*x[3][0];
    coordinates[13][1] = 0.75*x[0][1] + 0.25*x[3][1];
    coordinates[13][2] = 0.75*x[0][2] + 0.25*x[3][2];
    coordinates[14][0] = 0.5*x[0][0] + 0.5*x[3][0];
    coordinates[14][1] = 0.5*x[0][1] + 0.5*x[3][1];
    coordinates[14][2] = 0.5*x[0][2] + 0.5*x[3][2];
    coordinates[15][0] = 0.25*x[0][0] + 0.75*x[3][0];
    coordinates[15][1] = 0.25*x[0][1] + 0.75*x[3][1];
    coordinates[15][2] = 0.25*x[0][2] + 0.75*x[3][2];
    coordinates[16][0] = 0.75*x[0][0] + 0.25*x[2][0];
    coordinates[16][1] = 0.75*x[0][1] + 0.25*x[2][1];
    coordinates[16][2] = 0.75*x[0][2] + 0.25*x[2][2];
    coordinates[17][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[17][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[17][2] = 0.5*x[0][2] + 0.5*x[2][2];
    coordinates[18][0] = 0.25*x[0][0] + 0.75*x[2][0];
    coordinates[18][1] = 0.25*x[0][1] + 0.75*x[2][1];
    coordinates[18][2] = 0.25*x[0][2] + 0.75*x[2][2];
    coordinates[19][0] = 0.75*x[0][0] + 0.25*x[1][0];
    coordinates[19][1] = 0.75*x[0][1] + 0.25*x[1][1];
    coordinates[19][2] = 0.75*x[0][2] + 0.25*x[1][2];
    coordinates[20][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[20][1] = 0.5*x[0][1] + 0.5*x[1][1];
    coordinates[20][2] = 0.5*x[0][2] + 0.5*x[1][2];
    coordinates[21][0] = 0.25*x[0][0] + 0.75*x[1][0];
    coordinates[21][1] = 0.25*x[0][1] + 0.75*x[1][1];
    coordinates[21][2] = 0.25*x[0][2] + 0.75*x[1][2];
    coordinates[22][0] = 0.5*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[22][1] = 0.5*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[22][2] = 0.5*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
    coordinates[23][0] = 0.25*x[1][0] + 0.5*x[2][0] + 0.25*x[3][0];
    coordinates[23][1] = 0.25*x[1][1] + 0.5*x[2][1] + 0.25*x[3][1];
    coordinates[23][2] = 0.25*x[1][2] + 0.5*x[2][2] + 0.25*x[3][2];
    coordinates[24][0] = 0.25*x[1][0] + 0.25*x[2][0] + 0.5*x[3][0];
    coordinates[24][1] = 0.25*x[1][1] + 0.25*x[2][1] + 0.5*x[3][1];
    coordinates[24][2] = 0.25*x[1][2] + 0.25*x[2][2] + 0.5*x[3][2];
    coordinates[25][0] = 0.5*x[0][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[25][1] = 0.5*x[0][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[25][2] = 0.5*x[0][2] + 0.25*x[2][2] + 0.25*x[3][2];
    coordinates[26][0] = 0.25*x[0][0] + 0.5*x[2][0] + 0.25*x[3][0];
    coordinates[26][1] = 0.25*x[0][1] + 0.5*x[2][1] + 0.25*x[3][1];
    coordinates[26][2] = 0.25*x[0][2] + 0.5*x[2][2] + 0.25*x[3][2];
    coordinates[27][0] = 0.25*x[0][0] + 0.25*x[2][0] + 0.5*x[3][0];
    coordinates[27][1] = 0.25*x[0][1] + 0.25*x[2][1] + 0.5*x[3][1];
    coordinates[27][2] = 0.25*x[0][2] + 0.25*x[2][2] + 0.5*x[3][2];
    coordinates[28][0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[3][0];
    coordinates[28][1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[3][1];
    coordinates[28][2] = 0.5*x[0][2] + 0.25*x[1][2] + 0.25*x[3][2];
    coordinates[29][0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[3][0];
    coordinates[29][1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[3][1];
    coordinates[29][2] = 0.25*x[0][2] + 0.5*x[1][2] + 0.25*x[3][2];
    coordinates[30][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[3][0];
    coordinates[30][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[3][1];
    coordinates[30][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.5*x[3][2];
    coordinates[31][0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0];
    coordinates[31][1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1];
    coordinates[31][2] = 0.5*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2];
    coordinates[32][0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[2][0];
    coordinates[32][1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[2][1];
    coordinates[32][2] = 0.25*x[0][2] + 0.5*x[1][2] + 0.25*x[2][2];
    coordinates[33][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[2][0];
    coordinates[33][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[2][1];
    coordinates[33][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.5*x[2][2];
    coordinates[34][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[34][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[34][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new poisson3d_4_0_dof_map_1();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class poisson3d_4_0_cell_integral_0_quadrature: public ufc::cell_integral
{
public:

  /// Constructor
  poisson3d_4_0_cell_integral_0_quadrature() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~poisson3d_4_0_cell_integral_0_quadrature()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
      
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
      
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
      
    // Compute inverse of Jacobian
    const double Jinv_00 = d_00 / detJ;
    const double Jinv_01 = d_10 / detJ;
    const double Jinv_02 = d_20 / detJ;
    const double Jinv_10 = d_01 / detJ;
    const double Jinv_11 = d_11 / detJ;
    const double Jinv_12 = d_21 / detJ;
    const double Jinv_20 = d_02 / detJ;
    const double Jinv_21 = d_12 / detJ;
    const double Jinv_22 = d_22 / detJ;
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    
    // Array of quadrature weights
    const static double W64[64] = {0.0026134590075074, 0.00338108957856492, 0.00161758872343451, 0.000243985421620605, 0.00392412678076307, 0.00507672939399183, 0.00242882065938497, 0.000366345798555432, 0.00250430944300902, 0.0032398803788146, 0.00155003109035391, 0.000233795515279108, 0.000601372928720174, 0.000778009425931694, 0.000372217075256263, 5.6142540266951e-05, 0.00489961445988875, 0.00633873932658916, 0.00303259438036939, 0.00045741467393993, 0.00735680500908296, 0.00951766095289489, 0.00455346144286727, 0.000686811297504771, 0.00469498496963441, 0.00607400564032183, 0.00290593987575818, 0.000438311021534327, 0.00112743130421366, 0.00145858275269461, 0.000697818545806259, 0.000105253918778391, 0.00489961445988875, 0.00633873932658916, 0.00303259438036939, 0.00045741467393993, 0.00735680500908296, 0.00951766095289489, 0.00455346144286727, 0.000686811297504771, 0.00469498496963441, 0.00607400564032183, 0.00290593987575818, 0.000438311021534327, 0.00112743130421366, 0.00145858275269461, 0.000697818545806259, 0.000105253918778391, 0.0026134590075074, 0.00338108957856492, 0.00161758872343451, 0.000243985421620605, 0.00392412678076307, 0.00507672939399183, 0.00242882065938497, 0.000366345798555432, 0.00250430944300902, 0.0032398803788146, 0.00155003109035391, 0.000233795515279108, 0.000601372928720174, 0.000778009425931694, 0.000372217075256263, 5.6142540266951e-05};
    
    
    const static double FE0_D010[64][30] = \
    {{-2.61665455821179, -0.337956235103878, 0.108340828633996, 0.0883969431835097, 0.18826364632462, 0.218367276513481, 0.105762301137932, 0.139147830671431, -1.99429993054148, 0.88799633014401, -0.18826364632462, 4.74252247825224, -3.4506995190151, 1.66278783407854, -2.56138440643199, 1.06244098376895, -0.218367276513482, -0.0725889973161024, -0.0546542982292036, -0.0779222420962224, 2.55246902761864, -0.666509925711154, -0.97639327332752, -0.549032743738479, 0.0725889973161025, 0.0779222420962243, 3.2782703670194, -1.16820328490688, -0.85603379125884, 0.603687041967683},
    {-0.0971243045950508, -0.449540396859089, 0.666327544990171, 0.0283809878733434, 0.0303348329193273, 0.191622862578409, 0.104106290443436, 0.139203719782339, -4.70183916807173, 0.189067653393766, -0.0303348329193277, 1.14613455744865, -2.29026183547777, 1.69079197948326, -0.982269916552131, 0.69353230851267, -0.191622862578409, -0.304705118454546, -0.248207903789381, -0.0173537509230887, 7.08790903930817, -3.05239741622662, -0.217448641267107, -1.65350431537734, 0.304705118454543, 0.0173537509230878, 1.48074818633696, -0.797638598956104, -0.63768198956717, 1.90171221916672},
    {0.157576792955305, -0.631126388910169, 1.89531730714558, -1.72179988344472, 0.10042981162099, 0.137985777757088, 0.0861011863854359, 0.115898726667423, -0.619333549054627, -5.28014630426966, -0.10042981162099, -0.272558266045288, -0.683595557110846, 1.429703419111, -0.0378722704885507, 0.264041637740582, -0.137985777757091, -0.45696733361783, -0.407710121462211, 0.558798755468925, 3.78243158221261, -5.05841534030356, 7.00194618771438, -1.25030156625702, 0.456967333617831, -0.558798755468927, 0.23129583760584, -0.350142824126015, -0.309322293784714, 1.65801168771924},
    {-0.332272064837322, -0.835475545867991, 3.66460410302372, -6.30243350482935, 5.48363837580173, 0.065665888411242, 0.0458827667356911, 0.0615408996728259, 1.61056772993438, -3.0096854928473, -5.48363837580173, 0.19739974692222, 0.203432307017003, 0.766915556766089, 0.0270467925859671, 0.0219110122003371, -0.0656658884112457, -0.322173434508346, -0.308626061699912, 0.743164881188396, -1.42182233628487, -3.85334949667324, 9.31211899767665, -0.147382337298936, 0.322173434508346, -0.743164881188402, -0.0238771292314193, -0.0677937789360244, -0.064710563027375, 0.456008398998854},
    {0.0875743252958662, 0.31266857990608, -0.128217417910573, -0.173147693978936, 0.188263646324617, 0.186413882500131, -0.171171345641126, -0.126299082891032, -0.816407479188932, 0.644611219481143, -0.188263646324617, -2.93793538864611, 4.19475734029278, -1.65706485684861, -0.804192734241911, 0.63725347602595, -0.186413882500132, -0.0599779345644008, 0.0821055794160249, -0.0597627155966212, -0.133865220053956, 1.07849011715346, -0.471463525502207, -0.30567070491861, 0.0599779345643999, 0.0597627155966223, -0.13186238499681, -0.466082130384822, 1.06235420212975, 0.223565125502586},
    {0.34730795587707, 0.358442270125219, -0.589309695251549, -0.029866572341664, 0.0303348329193259, 0.15950810376607, -0.0889006886871415, -0.0944225104881763, -1.46628619271142, 0.13486432870481, -0.0303348329193258, -1.22434772362475, 1.8860986154724, -1.36750111784994, -0.234936612320399, 0.401436481027339, -0.15950810376607, -0.247257815454365, 0.200328327521327, -0.0133095153970326, -0.881760153558977, 2.93735604152194, -0.104997756363147, -0.904594779161596, 0.247257815454363, 0.0133095153970349, -0.14128056609002, -0.312535792340199, 0.470639688898596, 0.704266451640268},
    {-0.161328789785951, 0.204881260678232, -0.483666898076633, 0.153798325928093, 0.100429811620989, 0.111120368180021, -0.00609759402874574, -0.0226836002358249, 1.00650376582929, -3.5347743375574, -0.100429811620988, 0.0782665809275572, 0.425215577845658, -0.547034629665495, 0.0472042414949506, 0.140142090387453, -0.111120368180022, -0.362297712445737, 0.0279311817241996, 0.42857251280838, -1.92627056670234, 1.40343369894969, 3.3809760116293, -0.64194732797358, 0.362297712445735, -0.428572512808379, -0.0903405869925524, -0.134044496358707, 0.0658199457334266, 0.614016146249383},
    {-0.219620965508788, -0.316700773842387, 1.69125897299839, -3.80801363222959, 5.48363837580173, 0.0513521406623338, 0.021542085170389, 0.021782903846043, 0.830265560700902, -0.68845779221869, -5.48363837580173, 0.298335211957057, 0.152951840302491, 0.0850346870916261, 0.010693569207415, 0.0038946332205013, -0.0513521406623364, -0.250344264117838, -0.143018329933172, 0.569972709217253, -1.71865201592868, -0.802872517770623, 4.49647142444828, -0.0258565470562516, 0.250344264117836, -0.569972709217256, -0.0221357179506371, -0.0254367183908888, -0.0103407551028203, 0.168874876989428},
    {-0.0209772079821639, -0.350933368613928, 0.44925441966461, -0.538254520513326, 0.188263646324617, 0.123390082929376, -0.337105568676916, 0.254820076580361, 0.0418596436277117, 0.30485443324413, -0.188263646324617, 0.234075036228744, -2.87754163478653, 3.01537717515388, 0.0237430665741771, 0.190928497886897, -0.123390082929378, -0.0379975323947994, 0.146971036680839, -0.0344126752992376, -1.40851160820063, 0.917397544908306, 0.233400087269195, -0.0832408653956389, 0.0379975323947987, 0.0344126752992384, -0.798917094981411, 0.146177070790021, 0.520353951826873, -0.0637301712851993},
    {-0.244720001995119, -0.216923199943662, 0.51726416308916, -0.111178053602373, 0.030334832919327, 0.102354027564882, -0.20514987173231, 0.0477235191445473, 0.574312506192716, 0.0591984535429127, -0.0303348329193268, 0.953331178547799, -1.33636979589499, 0.844681819285975, 0.0529868795095988, 0.10923518408151, -0.102354027564883, -0.153278933199059, 0.429402097731097, -0.0076639092982291, -4.20928411112942, 3.11770744184755, 0.0519796000594571, -0.228641708593652, 0.153278933199059, 0.00766390929823137, -0.388354471847842, 0.0959146876507996, 0.287644073193697, -0.200760389137448},
    {-0.343330389268094, 0.276022045414921, -1.31167064875703, 2.77206539309932, 0.100429811620989, 0.0683473488315207, -0.066168119941118, -0.0354224448750839, 1.11730697889861, -1.09829838147577, -0.100429811620989, 0.766075457975782, -0.307559904120656, -0.391207210001953, 0.030173538537351, 0.0262159540743621, -0.0683473488315208, -0.218124283638552, 0.289887364894584, 0.246781401718773, -3.09684445049345, 3.29120812035187, -1.67376701162356, -0.114854009023941, 0.218124283638551, -0.246781401718771, -0.0836321236114171, 0.039952165866755, 0.0888810299491507, -0.175033355870642},
    {0.119021627700703, 0.138208304688549, -0.377808999793021, -0.325893969559762, 5.48363837580173, 0.0303732203363815, 0.00108083458798749, -0.00280198672226929, -0.852751660911766, 2.55189188053654, -5.48363837580173, 0.115115490962853, -0.081442432589375, -0.290902990762732, -0.00632435657324765, -0.00846340609805398, -0.0303732203363825, -0.146767978003654, -0.00704786611526884, 0.328202719302649, -0.263183207368186, 1.49374386807297, -2.22599791097679, 0.0551878647492848, 0.14676797800365, -0.328202719302647, -0.00195187476469254, 0.00738257151006467, 0.0110782180602124, -0.0481399986340127},
    {-0.16077512287077, 2.2440021053822, 1.87719259162016, -0.8675374714403, 0.188263646324618, 0.0465489992587244, -0.197339547588017, 0.357364893237747, 0.0303812937688861, -0.00156579513538666, -0.188263646324618, 0.763538283229883, -1.31234021251956, -1.53442505322176, 0.00578374741761362, -0.000356172861470066, -0.0465489992587242, -0.0138007611324136, 0.0795049346306667, -0.0115499527517866, -0.0842704290369369, -1.82330345635211, 0.869103266575686, 0.00014349632606173, 0.0138007611324096, 0.011549952751788, -0.0160427294515943, 0.197695720449485, -0.347105911203761, -0.0796484309567213},
    {-0.0231092835261119, 0.00319288667625652, 4.37286031043355, -0.18451134278766, 0.0303348329193276, 0.03767544475598, -0.121601693121933, 0.135408973378283, -0.0598673982106517, -0.00904317013277032, -0.0303348329193279, 0.0914307809021492, -0.132249321813464, 0.0607349377611674, -0.00185383990226817, -0.00595987641042129, -0.0376754447559811, -0.0547452997884477, 0.239182794430887, -0.00257224378862454, 0.582621768788842, -4.89561468101174, 0.193554512920429, 0.0117226977495805, 0.054745299788447, 0.00257224378862295, 0.0180413299256945, 0.127561569532355, -0.151596463401708, -0.250905492180462},
    {0.25757029285913, -0.132026023671421, 0.432971142057139, 5.13343100868266, 0.10042981162099, 0.0242960786153925, -0.0427421685927022, 0.00392441073250549, -0.940209564617415, 1.09911326458013, -0.100429811620991, -0.536154837699096, 0.11005408777266, 0.300556480738724, -0.00852197328592389, -0.0091514786850585, -0.024296078615392, -0.0760864843203679, 0.180175325775281, 0.082827432191335, 2.64172503778601, -2.13448661522574, -6.23254427326278, 0.0385771407416878, 0.0760864843203669, -0.0828274321913342, 0.0239443535228534, 0.0518936472777583, -0.0193467909694339, -0.218752466516965},
    {0.643627477463276, 0.326425626978741, -1.55864364979357, 2.81456398596073, 5.48363837580173, 0.0104401582457717, -0.00318329697115382, -0.00387973782841731, -2.96400307709653, 5.47430204856335, -5.48363837580173, -0.534208193621274, -0.20305063914919, -0.232794271671555, -0.00737792430187983, -0.00619148444210122, -0.0104401582457721, -0.0500511926820887, 0.0204293344528024, 0.110154931808961, 2.91813195089406, 1.60451477599603, -8.28886603452408, 0.0397348747456797, 0.0500511926820843, -0.110154931808957, 0.00726374301125422, 0.00937478141325019, 0.00399391911904784, -0.0601642091984775},
    {0.26052963780404, -0.337956235103879, 0.108340828633997, 0.088396943183514, 0.188263646324616, -0.118688289051527, -0.123384593447939, 0.661369484286702, -0.635906402027001, 0.595554242297345, -0.188263646324616, 0.197864561630014, -1.26100414479345, 1.14056618046328, -3.88190762860052, -0.831275555643354, 0.118688289051528, 0.0846838980078687, -0.259771818644169, -0.370364329942857, 0.988957978689206, -0.461392405296204, -0.68395118548086, -1.75015337692898, -0.0846838980078684, 0.370364329942858, 6.03712041520847, 0.954660149091292, -2.81658227089465, 2.00992519557315},
    {0.302516099307215, -0.449540396859091, 0.666327544990173, 0.028380987873344, 0.0303348329193268, 0.0347833019774876, 0.0323350839678328, 0.661635125168622, -0.993419927901684, 0.123939045497017, -0.0303348329193273, -0.271101447298221, -0.750234829246887, 1.16836057409698, -0.986424054181831, 0.141206481639182, -0.0347833019774872, -0.0946404443832336, -1.17973189041439, -0.0824823588198433, 2.44796581251313, -2.12087342960162, -0.152320033370361, -5.15185888147606, 0.0946404443832333, 0.082482358819844, 2.43072671833567, -0.173541565607014, -2.10593778932247, 6.33159077189045},
    {-0.21843793762351, -0.63112638891017, 1.89531730714558, -1.72179988344472, 0.100429811620989, 0.22361384982296, 0.186874892225894, 0.550866518835753, 1.17789027189967, -3.18297519703051, -0.10042981162099, -0.076960360066363, -0.0682109403426264, 0.994735626942669, 0.342349173516006, 0.34546299638071, -0.223613849822961, -0.991806556977172, -1.93784575346093, 2.65596986270808, 0.455072129259604, -3.52827970830485, 4.90477508047522, -3.58236461057066, 0.991806556977171, -2.65596986270808, 0.132264924041636, -0.532337888606603, -1.0254806163934, 5.52021036403158},
    {-0.18467858359371, -0.835475545867992, 3.66460410302373, -6.30243350482935, 5.48363837580173, 0.220601860279336, 0.171854823099439, 0.292503827639716, 0.629994022019076, -0.220588521013089, -5.48363837580173, 0.256334411241436, 0.227867089421063, 0.535952628799201, 0.0502852852996205, 0.00601501011116284, -0.220601860279338, -1.20670706092577, -1.46689932770776, 3.53226185302261, -1.59952189437741, -2.6950762306654, 6.52302202584243, -0.0513422558010662, 1.20670706092577, -3.53226185302261, -0.127671711144152, -0.177869833210601, -0.215117401795185, 1.51824158350883},
    {0.259550726522875, 0.312668579906081, -0.128217417910574, -0.173147693978936, 0.188263646324617, 0.0606216909073096, -0.0922339306404464, -0.600299400389247, -0.147079344555395, 0.420321814372866, -0.188263646324617, -0.960647123653589, 1.57149235657503, -1.1830645393504, -0.688608800465997, 0.223900949430206, -0.0606216909073091, -0.0323184972102057, 0.390247727567259, -0.284052120704891, -0.495051206536268, 0.770347969002237, -0.247174120393931, -0.947339402197952, 0.0323184972102049, 0.284052120704892, -2.31777356999158, -0.131667018789761, 3.60668177084683, 0.557091674630693},
    {-0.0203093940389602, 0.35844227012522, -0.589309695251549, -0.0298665723416659, 0.0303348329193269, 0.16852491355416, -0.13626522617421, -0.448790087242391, 0.204474492569863, 0.0849137322354278, -0.0303348329193265, -0.0647115558027052, 0.739712220812174, -1.01313354109573, 0.155717997003429, 0.387416031407633, -0.16852491355416, -0.378991913828713, 0.952160317710242, -0.0632601118664205, -1.80068884865135, 2.18552405133304, -0.0550471598937635, -2.70708956281723, 0.378991913828711, 0.0632601118664223, -1.37131853080694, -0.251150805233424, 1.6643906210459, 1.75492924510699},
    {-0.350400156294149, 0.204881260678232, -0.483666898076633, 0.153798325928092, 0.100429811620989, 0.254937392993912, -0.0172984082228324, -0.107815126670265, 1.3618387575883, -1.92634217405987, -0.100429811620989, 0.39466089105994, 0.212761107787033, -0.461903103231056, 0.303570119720277, 0.216664603484215, -0.254937392993912, -1.02781091993654, 0.132756875643076, 2.0370046763059, -2.17677986454248, 1.29860800503081, 1.77254384813178, -1.66279552722341, 1.02781091993654, -2.0370046763059, -0.485230223036151, -0.199366195261384, 0.28947522998614, 1.53003865158033},
    {-0.0223844325018226, -0.316700773842388, 1.69125897299839, -3.8080136322296, 5.48363837580173, 0.188817160483828, 0.0859604165777829, 0.103534117732254, -0.203161865393725, 1.45064915099943, -5.48363837580173, 0.241317562368113, 0.0944841707706781, 0.0032834732054176, -0.012436998015208, -0.0327463127423484, -0.18881716048383, -0.998960734822763, -0.679765962969288, 2.70907965243536, -1.22197222287016, -0.266124884734515, 2.35736448123016, 0.258954408333451, 0.998960734822762, -2.70907965243537, -0.0748057027386414, -0.0532141038354348, -0.0162914169784031, 0.420811554635839},
    {-0.309054780062581, -0.350933368613928, 0.449254419664607, -0.538254520513323, 0.188263646324617, 0.245642220944691, -0.858748318755, 1.21115954032942, 0.127851137302472, 0.175703701153112, -0.188263646324617, 1.42270897612223, -2.82175853885054, 2.05903771140482, 0.344678021868894, 0.28032325268791, -0.245642220944692, -0.0967955444608568, 0.69855317374088, -0.163563407390253, -0.942920964815351, 0.365815407848273, 0.362550819360211, -0.228030371136456, 0.0967955444608577, 0.163563407390253, -2.54205116816729, 0.57842506606709, 0.986213605968974, -0.470522802604425},
    {-0.358579623296543, -0.216923199943662, 0.517264163089157, -0.111178053602372, 0.0303348329193269, 0.256580410431232, -0.621730944952845, 0.226829833369821, 0.593144251553414, 0.0304358104778528, -0.0303348329193263, 1.20255159330441, -1.29262427512491, 0.665575505060698, 0.260104645449674, 0.170203422309209, -0.256580410431232, -0.464529932066269, 2.04094769252014, -0.0364265523632901, -2.61657026170108, 1.50616184705851, 0.0807422431245174, -0.558724452821564, 0.464529932066269, 0.0364265523632905, -1.14741410446365, 0.451527522643634, 0.660479625644153, -1.48222323969857},
    {-0.209120412751909, 0.276022045414921, -1.31167064875703, 2.77206539309932, 0.100429811620989, 0.225482960005565, -0.244673893188876, -0.168362841060222, 0.499560744523661, -0.172128055533881, -0.100429811620989, 0.514343504016228, -0.322978322862424, -0.258266813816816, 0.0641223971199364, 0.0151927301496362, -0.225482960005565, -0.806571468622247, 1.37783432265121, 1.17295172766066, -1.39115125836187, 2.20326116259524, -2.59993733756544, -0.08555495963269, 0.806571468622245, -1.17295172766066, -0.178564777998393, 0.229481163039238, 0.282805221938679, -1.29227936301852},
    {0.312478109057611, 0.138208304688549, -0.37780899979302, -0.325893969559763, 5.48363837580173, 0.125378211827877, 0.00467101063595437, -0.0133178397718857, -1.67399695237152, 3.78363632073527, -5.48363837580173, -0.0427577374324087, -0.127541538600639, -0.280387137713114, -0.0590087139335767, -0.0542305386031385, -0.125378211827878, -0.634282797655859, -0.0334984998004384, 1.55994715950137, 0.531611450406407, 1.52019450175813, -3.45774235117551, 0.388918336556836, 0.634282797655857, -1.55994715950137, 0.0187394056819565, 0.0495595279671817, 0.0535871480235089, -0.355419836756396},
    {0.0441090754128552, 2.24400210538221, 1.87719259162015, -0.867537471440298, 0.188263646324618, 0.176031214445462, -0.802961015003402, 1.69855493975254, -0.0313921455951192, -0.0449127549558018, -0.188263646324618, -0.278452704337046, 0.865956623278546, -2.87561509973656, -0.0284048020475076, -0.0415696064932369, -0.176031214445461, -0.056154345655198, 0.377886865797337, -0.0548969125721996, 0.275884941493742, -2.12168538751878, 0.912450226396099, 0.0195633511672836, 0.0561543456551952, 0.0548969125722, 0.249631141881445, 0.844530621496636, -1.91978127958647, -0.397450216964616},
    {0.182854617686687, 0.0031928866762569, 4.37286031043355, -0.184511342787659, 0.0303348329193271, 0.149676919217672, -0.5119143304671, 0.643598699734295, -0.339061320545858, -0.0186967982081533, -0.0303348329193272, -0.697714152851513, 0.959121437083415, -0.447454788594848, -0.0499031319415434, -0.0518730111222531, -0.149676919217673, -0.230464747389047, 1.13683555567983, -0.012225871864007, 1.75946845237299, -5.79326744226069, 0.203208140995811, 0.115197172484189, 0.230464747389047, 0.0122258718640045, 0.258959017160666, 0.563787341589352, -0.852654584953417, -1.25203272816401},
    {0.430953001399549, -0.132026023671421, 0.432971142057138, 5.13343100868266, 0.10042981162099, 0.103393084530576, -0.188587926934792, 0.0186527198430681, -1.39647055428432, 1.4099645253935, -0.10042981162099, -0.942394586057495, 0.357639436701203, 0.285828171628161, -0.0601609933964599, -0.0517981611997575, -0.103393084530576, -0.335710442829218, 0.856373122844863, 0.393678693004705, 3.77418382452249, -2.81068441229532, -6.54339553407616, 0.235214171899742, 0.335710442829217, -0.393678693004705, 0.162594655109279, 0.240386088134547, -0.121086381555887, -1.0915872947446},
    {0.73687391683395, 0.326425626978741, -1.55864364979357, 2.81456398596072, 5.48363837580173, 0.0474159810998228, -0.0146766561828547, -0.0184403895797015, -3.30810129762872, 5.88771338502163, -5.48363837580173, -0.639426571502028, -0.205639352390394, -0.218233619920271, -0.0391383089428408, -0.0307017163177627, -0.0474159810998231, -0.23076205368005, 0.0971006039129572, 0.523566268267237, 3.33890144088641, 1.52784350653588, -8.70227737098236, 0.203122234279905, 0.230762053680046, -0.523566268267233, 0.0395027069505952, 0.0453783725006123, 0.0180759915719517, -0.300222838192859},
    {-0.242112183715197, -0.337956235103879, 0.108340828633997, 0.0883969431835125, 0.188263646324619, 0.910263235975047, -1.90887936855836, 1.34272290687397, 0.1161568521489, 0.213998984901443, -0.188263646324619, 0.0114409048411573, 0.109414756101919, 0.459212757876, 1.43959085542531, -4.62118069312338, -0.910263235975047, 1.31014206262739, -0.527392901760537, -0.751919587338761, -0.03072635860308, -0.19377132217982, -0.302395928084957, -1.27675846648537, -1.3101420626274, 0.751919587338762, -0.380807365619691, 6.53006006168173, -2.40150639667959, 1.80415136824591},
    {-0.347940059792458, -0.449540396859091, 0.666327544990172, 0.0283809878733436, 0.0303348329193264, -0.090075195317429, -1.15940513698844, 1.34326221524189, 0.631043869767727, 0.0389643999770734, -0.0303348329193274, 0.149775465282281, 0.160971507345547, 0.486733484023721, 1.27213319153948, -1.59175310227737, 0.0900751953174287, 3.39342299200284, -2.39511055599667, -0.167457004339787, -0.391876650738555, -0.905494764019346, -0.0673453878504181, -3.2882592427594, -3.39342299200284, 0.167457004339787, -0.789991501822737, 2.75115823926581, -1.82540390495863, 5.68336979875607},
    {-0.264871803916117, -0.63112638891017, 1.89531730714558, -1.72179988344472, 0.100429811620989, -0.139787485467038, -0.209615672908323, 1.1183780187083, 0.720643717372981, -0.446752557129667, -0.10042981162099, 0.262052042480397, 0.206722023275767, 0.427224127070123, 0.425233331533269, -0.0543886306339456, 0.139787485467038, 1.11249936446436, -3.93424544824101, 5.39219250260892, -1.08408101099379, -1.53188001352477, 2.16855244057438, -1.02081213460243, -1.11249936446437, -5.39219250260891, -0.639688335363993, 0.264004303542266, -0.903923014877578, 4.95505758284344},
    {0.251073694749743, -0.835475545867993, 3.66460410302373, -6.30243350482935, 5.48363837580173, 0.247106172443953, 0.226456203454841, 0.593845950034656, -1.42005757838021, 3.41840414528315, -5.48363837580173, 0.199800662202126, 0.149990682511856, 0.234610506404266, -0.230119111922976, -0.122828558845079, -0.247106172443954, -1.59009968280775, -2.97812248098437, 7.17125451931884, -1.06069344725473, -1.1838530773888, 2.88402935954619, 1.61531672271624, 1.59009968280775, -7.17125451931883, -0.171884462870296, -0.103627644609763, -0.191842375241383, 1.36280575826813},
    {-0.354977542438393, 0.312668579906081, -0.128217417910574, -0.173147693978935, 0.188263646324618, -0.161830420667416, 1.7234861196673, -1.21873744561208, 0.126071847127061, 0.127686775663472, -0.188263646324617, 0.74534256429606, -0.138407107636185, -0.564626494127564, 1.19834327843348, -1.27097497208273, 0.161830420667415, 0.603904452120071, 0.79228717926895, -0.576687159414283, -0.366162946517032, 0.368308517300543, 0.0454609183154622, -0.584267644550131, -0.603904452120073, 0.576687159414282, -3.48046701757169, -0.45251114758457, 3.5008611847503, -0.208019534718817},
    {-0.336177667614903, 0.35844227012522, -0.58930969525155, -0.0298665723416653, 0.0303348329193266, -0.245351328163602, 0.481668275062812, -0.911140814378886, 0.493827561454053, 0.0197421530236531, -0.0303348329193263, 0.604789100668448, -0.0762708892195325, -0.550782813959233, 0.763514413781913, -0.318388353512671, 0.245351328163602, 1.33965492533839, 1.93309110864833, -0.128431691078194, -1.10911112659746, 1.20459326039496, 0.0101244193180106, -1.27779579253432, -1.33965492533839, 0.128431691078194, -1.71481382924361, -0.163279921550142, 1.86244022984058, -0.655295316114007},
    {-0.118117019922264, 0.204881260678232, -0.483666898076633, 0.153798325928091, 0.100429811620989, 0.0425061088440207, -0.00417162582753519, -0.218887994875991, 0.177195303849182, 0.172212629272512, -0.100429811620989, 0.300757922986168, -0.0366919287168066, -0.35083023502533, 0.0801913980783608, -0.00467109539564591, -0.0425061088440202, -0.247863417500437, 0.26952513263177, 4.13555947963828, -0.855368153814665, 1.16183974804212, -0.326010955200605, 0.301795428951817, 0.247863417500435, -4.13555947963828, -0.38710488729705, 0.00884272122317905, 0.52580148409468, -0.571320561583586},
    {0.394442721463883, -0.316700773842389, 1.6912589729984, -3.8080136322296, 5.48363837580173, 0.255745030827463, 0.130999772008352, 0.21019662204708, -2.00482142866547, 4.2415863458704, -5.48363837580173, 0.0464454714237895, -0.0208083879358806, -0.103379031109405, -0.249167453855976, -0.145915140523654, -0.255745030827464, -1.52237080410914, -1.38007173218239, 5.50001684730633, -0.120618428811508, 0.434180884478574, -0.433572713640807, 1.53720390231881, 1.52237080410914, -5.50001684730632, -0.0149909544886873, 0.0149153685153003, 0.0539617862975847, -0.157132170136424},
    {-0.192468191903714, -0.350933368613928, 0.449254419664605, -0.538254520513322, 0.188263646324617, -0.04106709109433, 0.226023772945924, 2.45891547359977, 0.0410587679977579, 0.00719806234883287, -0.188263646324617, 0.715726752162648, -0.983606969779471, 0.811281778134464, 0.224727983827076, -0.00302260946815953, 0.0410670910943294, 0.0254767243039476, 1.41821382802837, -0.33206904619453, -0.136467941223139, -0.353845246439224, 0.531056458164489, -0.0189657330669378, -0.0254767243039468, 0.332069046194529, -0.746933402623825, -0.223001163477764, -1.93671005480302, -1.39924809496144},
    {-0.0579729019650718, -0.216923199943661, 0.517264163089155, -0.11117805360237, 0.0303348329193261, 0.0979411138874701, -0.326281844202937, 0.460513556286238, -0.00912774663570571, -0.00709140647947636, -0.0303348329193254, 0.239581839576237, -0.396577519811782, 0.431891782144278, -0.0081263141041612, -0.0208116360121883, -0.0979411138874703, -0.243783398835878, 4.14356465423254, -0.0739537693206191, 0.088318698200441, -0.59645511465389, 0.118269460081846, 0.264294078597947, 0.243783398835878, 0.073953769320617, 0.0786289882368011, 0.347093480215124, -0.531016230418878, -4.40785873283048},
    {0.225565484443058, 0.276022045414921, -1.31167064875703, 2.77206539309932, 0.100429811620989, 0.242028983444844, -0.311788872704875, -0.341812933207462, -0.852939205087355, 1.03626557791777, -0.100429811620988, -0.239460959740111, -0.177309848448293, -0.0848167216695764, -0.222270469965023, -0.116554276521093, -0.242028983444843, -1.02781709025048, 2.79730128295273, 2.3813453611123, 1.38081565155067, 0.783794202293716, -3.80833097101709, 1.0456993683501, 1.02781709025048, -2.3813453611123, 0.359831676131939, 0.428343149225965, 0.204251727040546, -3.84300065130283},
    {0.625377600303054, 0.138208304688548, -0.377808999793019, -0.325893969559764, 5.48363837580173, 0.207840031305072, 0.00824827304638109, -0.027038091349312, -2.89580215412672, 5.3907188388044, -5.48363837580173, -0.30812410578464, -0.188794913071279, -0.266666886135686, -0.207239539597308, -0.136437384707658, -0.207840031305073, -1.12004405715045, -0.0680091901676936, 3.16702967757049, 1.71890596179436, 1.55470519212538, -5.06482486924464, 1.12496227881744, 1.12004405715045, -3.16702967757049, 0.123014370862901, 0.128189111661273, 0.111263260083721, -1.05695308864975},
    {0.445188683796849, 2.24400210538221, 1.87719259162015, -0.867537471440297, 0.188263646324618, 0.251335865827114, -1.27260439352379, 3.44843341033408, -0.13440475230783, -0.101468432469227, -0.188263646324618, -2.09224641355793, 4.02854919469698, -4.6254935703181, -0.246903722311183, -0.148845643231902, -0.251335865827112, -0.0889984266495804, 0.767191959967927, -0.111452590085623, 0.768202642377046, -2.51099048168937, 0.969005903909523, 0.0897318768856101, 0.088998426649579, 0.111452590085623, 1.41120078446162, 1.42145003675569, -4.61273047248452, -0.856923836853535},
    {0.542293065584038, 0.00319288667625739, 4.37286031043355, -0.184511342787657, 0.0303348329193263, 0.233047796265582, -0.864316933211789, 1.30664437579785, -0.773943947209461, -0.0312920869787577, -0.0303348329193263, -1.97488737980749, 2.5399018922056, -1.1105004646584, -0.231260418584871, -0.146583295328366, -0.233047796265581, -0.389117029591606, 2.30802173100928, -0.0248211606346114, 3.36553725436605, -6.96445361759014, 0.215803429766415, 0.391427516945235, 0.389117029591606, 0.0248211606346072, 1.00564848011793, 1.01090022854015, -2.08103243733091, -2.69944924795451},
    {0.696647594003245, -0.132026023671421, 0.432971142057137, 5.13343100868266, 0.10042981162099, 0.179690567637897, -0.344292044235397, 0.0378690502114724, -2.0533274054127, 1.81553861257373, -0.10042981162099, -1.54648645658891, 0.715253044997323, 0.266611841259755, -0.179590626402307, -0.121765637690285, -0.179690567637896, -0.612883531366295, 1.73862241333247, 0.799252780184932, 5.31328996613849, -3.69293370278294, -6.94896962125638, 0.614897934491051, 0.612883531366295, -0.799252780184933, 0.464717448742237, 0.466057681925679, -0.322995872551402, -2.35352034782352},
    {0.866122121955718, 0.32642562697874, -1.55864364979357, 2.81456398596072, 5.48363837580173, 0.0905566439693853, -0.0285953874203274, -0.0374379739141649, -3.77398544236569, 6.42709973003854, -5.48363837580173, -0.785371706004918, -0.207940007343737, -0.199236035585807, -0.0906495648074961, -0.0652980027053136, -0.0905566439693857, -0.44960720239534, 0.197135199374743, 1.06295261328415, 3.90482018108516, 1.42780891107409, -9.24166371599927, 0.450161230301585, 0.449607202395337, -1.06295261328414, 0.093792160958899, 0.0938933901256356, 0.0342953777627669, -0.647296429676326},
    {0.262326815091422, -0.33795623510388, 0.108340828633999, 0.0883969431835137, 0.188263646324618, 6.97671389735957, -4.41670862487792, 1.86494456048924, -0.0894026163922216, -0.0784431029452175, -0.188263646324618, 0.11821054716184, 0.0204277685898817, -0.0630088957392699, -1.53894819927434, 3.91937002415417, -6.97671389735957, 3.03136795500696, -0.732510422175485, -1.04436167518541, -0.0302844104769115, 0.0113461982351266, -0.00995384023830064, 0.65002689443534, -3.03136795500697, 1.04436167518542, -0.521306208366911, 0.497338600723756, 0.195309847152006, 0.0824835277401621},
    {0.382897749059931, -0.44954039685909, 0.66632754499017, 0.0283809878733418, 0.0303348329193267, 2.00292864633947, -2.91444664836601, 1.86569362062817, -0.587242812072386, -0.0261642079196744, -0.0303348329193288, 0.0846123604872485, 0.0177282086744733, -0.0356979213625635, -1.64425915824829, 2.6868052803149, -2.00292864633947, 8.5301935880843, -3.32663454262167, -0.232585612236539, -0.105113955523451, 0.026029222605659, -0.00221677995367059, 3.06679803516216, -8.53019358808431, 0.232585612236538, -0.294315367469899, 0.227641368051111, 0.0728809050900163, 0.259836507459513},
    {0.582912531849486, -0.63112638891017, 1.89531730714558, -1.72179988344472, 0.100429811620989, -0.239523825164354, -0.918167814148711, 1.55334581087663, -1.77749109602364, 1.65041855010949, -0.100429811620991, 0.043176729195753, 0.0127807929631378, -0.00774366509820636, -1.45677894538782, 0.88010297082423, 0.239523825164355, 4.87301877545594, -5.46438108023972, 7.48936360984806, -0.11608182959588, -0.00174438152606477, 0.0713813333352263, 5.23784208978575, -4.87301877545594, -7.48936360984806, -0.0951372221642526, 0.0380648433244819, -0.0014296433245571, 0.226538990453972},
    {0.812452135616643, -0.835475545867994, 3.66460410302373, -6.30243350482936, 5.48363837580173, 0.173807930028902, 0.184182334239251, 0.824808878001546, -3.58199787646156, 6.20750111711737, -5.48363837580173, 0.0131962924773906, 0.00617953933657829, 0.00364757843737923, -0.806216324172755, -0.181408029877254, -0.173807930028903, -1.29326671905912, -4.13639574699222, 9.96035149115304, -0.0570264151812102, -0.0255798113809614, 0.0949323877119763, 4.07408998454622, 1.29326671905912, -9.96035149115304, -0.0128351909782728, -0.00277430436200076, -0.00575736285051789, 0.0623057624459966},
    {0.404206071679303, 0.312668579906081, -0.128217417910575, -0.173147693978936, 0.188263646324618, 1.49613339776545, 4.42785703112518, -1.6927377631103, -0.124544170479948, -0.0966026294448029, -0.188263646324618, -0.490009880059314, -0.136238594896718, -0.0906261766293544, -1.64424322359767, 2.47039173426359, -1.49613339776545, 1.55150804171481, 1.10042932742018, -0.800976564522558, 0.192595219241201, 0.0601663691493201, 0.269750323423737, 0.613951962651609, -1.55150804171481, 0.800976564522557, 2.54265922615501, -6.89824876538877, 0.794321760552955, -1.71438129007179},
    {0.507063488468922, 0.358442270125221, -0.589309695251553, -0.0298665723416648, 0.0303348329193273, 0.0710197363376287, 1.47626003455429, -1.2655083911331, -0.733385228998833, -0.03020844344573, -0.0303348329193276, -0.488389534487907, -0.180700986901213, -0.196415237205023, -1.57490224360711, 1.49315821229376, -0.0710197363376304, 4.1058943026982, 2.68492309883724, -0.178382287547582, 0.869933654044328, 0.452761270206056, 0.0600750157873926, 2.71565637527837, -4.10589430269821, 0.178382287547579, 1.86813206670942, -2.96941824684805, 0.972278568030793, -5.40057947411561},
    {0.671962873295985, 0.204881260678233, -0.483666898076634, 0.15379832592809, 0.100429811620989, -0.1820029351808, 0.027151168478106, -0.304019521310431, -1.9940738062327, 1.78064479277004, -0.10042981162099, -0.404522635107623, -0.206622790275703, -0.26569870859089, -1.25341917431049, 0.314350539750138, 0.1820029351808, 1.61322747684966, 0.374350826550649, 5.7439916431358, 1.42072665018609, 1.05701405412324, -1.93444311869813, 4.33415543338378, -1.61322747684966, -5.7439916431358, 0.893029144272987, -0.341501708228245, 0.664409551347936, -4.70850625993443},
    {0.854659261789438, -0.316700773842389, 1.6912589729984, -3.8080136322296, 5.48363837580173, 0.239374195003022, 0.135622046814995, 0.29194783593329, -3.73314907767068, 6.38069328908852, -5.48363837580173, -0.213756128882994, -0.139072114068444, -0.185130244995613, -0.644422180069843, -0.227247790459784, -0.239374195003023, -1.57608705190348, -1.9168193652185, 7.63912379052443, 1.07096158715759, 0.97092851751468, -2.57267965685892, 3.21181530352968, 1.57608705190348, -7.63912379052443, 0.184871106513051, 0.0916257436447858, 0.167603237623503, -1.29499593831118},
    {0.63196013663153, -0.350933368613926, 0.449254419664605, -0.538254520513324, 0.188263646324619, -0.245178772671681, 2.410508322138, 3.41525493734883, -0.177976321311655, -0.121952669742184, -0.188263646324618, -1.91427250782968, 1.77830342542667, -0.145057685614601, -1.35298504251687, 0.546150406763189, 0.245178772671681, 0.271705295222066, 1.96979596508842, -0.461219778285548, 0.634149285146312, -0.905427383499261, 0.660207190255507, 0.44629792716058, -0.271705295222066, 0.461219778285547, 4.82083510436926, -2.95665872890118, -6.88310499920122, -2.416093892249},
    {0.699938941386467, -0.21692319994366, 0.517264163089152, -0.111178053602369, 0.0303348329193264, -0.116209006894857, 0.54319170108263, 0.639619870511512, -0.95117927307912, -0.0358540495445367, -0.0303348329193255, -1.66902382882621, 0.933222619464405, 0.252785467919, -1.17617497382134, 0.175175059571121, 0.116209006894856, 0.405848874101022, 5.75511024902158, -0.102716412385682, 2.64191581943289, -2.20800070944292, 0.147032103146905, 1.85597787797826, -0.405848874101022, 0.102716412385678, 3.26684501829045, -0.718366760653751, -2.73028991498063, -7.61108812699983},
    {0.804449259426939, 0.276022045414921, -1.31167064875703, 2.77206539309932, 0.100429811620989, 0.157022569763056, -0.236163321155012, -0.474753329392601, -2.30843348521194, 1.96243590385965, -0.100429811620988, -1.18999803696498, 0.0614030576075599, 0.0481236745155609, -0.835527183461997, -0.167187751689789, -0.157022569763056, -0.778516229484539, 3.88524824070936, 3.30751568705418, 3.92425688943188, -0.304152755462917, -4.73450129695898, 2.75049450924062, 0.778516229484539, -3.30751568705419, 1.42036724341977, 0.403351072844799, -0.11008673056517, -6.63574274994998},
    {0.915095482842409, 0.138208304688547, -0.377808999793018, -0.325893969559765, 5.48363837580173, 0.242772631084242, 0.0101416649367539, -0.0375539443989283, -3.94745604157909, 6.62246327900312, -5.48363837580173, -0.560561951204754, -0.236590803240137, -0.256151033086068, -0.392374307610204, -0.206087899454946, -0.242772631084243, -1.37715028081005, -0.0944598238528628, 4.39877411776921, 2.74410921556156, 1.58115582581054, -6.29656930944336, 1.91950994261021, 1.37715028081005, -4.39877411776921, 0.272762493646931, 0.195946234518188, 0.157165758362205, -1.82505011875735},
    {0.868638985211498, 2.24400210538221, 1.87719259162015, -0.867537471440296, 0.188263646324618, 0.250809322516257, -1.386896949022, 4.78962345684887, -0.230538830650144, -0.144815392289642, -0.188263646324618, -3.84413241617306, 6.69817494241226, -5.9666836168329, -0.588215719540759, -0.231510490727833, -0.250809322516254, -0.0969913721940555, 1.0655738911346, -0.154799549906036, 1.16271865188603, -2.80937241285604, 1.01235286372994, 0.177873009683446, 0.0969913721940545, 0.154799549906036, 2.96665592739346, 1.61840743974983, -7.16806366470157, -1.24344690081804},
    {0.894239071655411, 0.00319288667625789, 4.37286031043354, -0.184511342787656, 0.0303348329193259, 0.255773608793593, -1.01420051076149, 1.81483410215386, -1.16137946239125, -0.0409457150541404, -0.0303348329193257, -3.15044347821519, 3.87170171089794, -1.61869019101442, -0.481998258407616, -0.225065649048983, -0.255773608793593, -0.456594884345625, 3.20567449225822, -0.0344747887099947, 4.65062553079678, -7.86210637883908, 0.225457057841797, 0.711385177373004, 0.456594884345624, 0.0344747887099893, 1.93011283472731, 1.23926615981047, -3.26294867847355, -3.91705966963122},
    {0.932314949394835, -0.132026023671421, 0.432971142057136, 5.13343100868266, 0.100429811620989, 0.219317728895969, -0.437124360783321, 0.052597359322035, -2.60395904918184, 2.1263898733871, -0.10042981162099, -2.06802429359264, 1.01585183572003, 0.251883532149192, -0.316329095558073, -0.181067362668037, -0.219317728895968, -0.778136835772909, 2.41482021040206, 1.1101040409983, 6.54011940697722, -4.36913149985252, -7.25982088206976, 1.00027627385358, 0.778136835772909, -1.1101040409983, 0.794494082962225, 0.618191723451355, -0.530762346726188, -3.41509648425563},
    {0.971133168652245, 0.32642562697874, -1.55864364979357, 2.81456398596072, 5.48363837580173, 0.119844479565316, -0.0384379828016436, -0.0519986256654492, -4.14403873378693, 6.84051106649682, -5.48363837580173, -0.904005455041911, -0.208877956754555, -0.184675383834522, -0.138251176842044, -0.0934196017713623, -0.119844479565316, -0.604362992504244, 0.273806468834898, 1.47636394974242, 4.35154474196657, 1.35113764161393, -9.65507505245755, 0.665458731613924, 0.604362992504242, -1.47636394974242, 0.145173879952597, 0.131857584573, 0.0450759225549015, -0.939265200448819}};
    // Array of non-zero columns
    static const unsigned int nzc2[30] = {0, 2, 4, 5, 6, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34};
    
    const static double FE0_D001[64][30] = \
    {{-2.61665455821179, -0.39670141158331, 0.202156726410701, 0.104101948809163, 0.137487919401695, 0.218367276513483, 0.114493927887235, 0.157622757753222, 4.98241396681808, -3.89335121387582, 1.92429321685283, -2.23419141910733, 0.966009105862812, -0.2021567264107, -2.56138440643199, 1.06244098376895, -0.218367276513482, -0.0813206240654078, -0.0847679127254544, -0.0662835546817639, 2.91710794676055, -1.07011105467197, -0.820404447054914, 3.34431273113415, -1.17693491165619, -0.940551082455375, -0.615075107853228, 0.0813206240654096, 0.0847679127254553, 0.68135866253499},
    {-0.0971243045950517, 0.346390058705359, 0.174901641144902, -0.130567659355243, -0.115221071571267, 0.19162286257841, -0.145073844060268, -0.132094973372042, -2.69891052173226, 4.25039744226718, -1.80075267464523, -0.856794088890817, 0.624184812888233, -0.174901641144904, -0.982269916552131, 0.693532308512669, -0.191622862578408, -0.0555249839508379, -0.0572913852708398, 0.0630284237127531, 0.112132602068756, -0.49361715353299, 0.859882558393328, 0.128554203518659, -0.548458464452401, 0.985810686405513, -0.301310332559032, 0.0555249839508387, 0.0572913852708399, 0.238281908846279},
    {0.157576792955305, -0.351201920067467, 0.123642391765631, -0.307820525808744, 0.178200900522257, 0.137985777757089, -0.346492107766977, 0.204298075763006, -0.858857374218979, -1.58521578630869, 2.63769828763983, -0.0330344408809344, 0.234572257037863, -0.123642391765631, -0.0378722704885498, 0.264041637740582, -0.13798577775709, -0.0243740394654185, -0.0248248207051114, 0.0875141056162463, -0.83066674989707, 0.0732482687708782, 0.685500290255746, -0.952316279586279, 0.0824504700263951, 0.785890474311825, -0.0666894490648969, 0.0243740394654188, 0.0248248207051132, -0.0208246565513487},
    {-0.332272064837323, 1.77751327294542, 0.0578933212354503, -0.23858973432335, 0.413516568270601, 0.0656658884112413, -0.271571427138713, 0.474075265311323, 1.78437565996328, -4.09982592947846, 0.870209061407083, 0.0235918168933198, 0.0192499727777494, -0.0578933212354502, 0.0270467925859682, 0.0219110122003369, -0.0656658884112439, -0.00471924063394129, -0.00475328859650966, 0.0267577424464947, -0.147499565414454, 0.219339761545596, -0.289608819749468, -0.169100589849639, 0.249660414938382, -0.332021468047652, -0.00215887668072024, 0.00471924063394067, 0.00475328859651086, -0.0245988657657746},
    {0.0875743252958667, -0.396701411583311, -0.0356729062616834, -0.03460450551812, 0.666545937704304, 0.186413882500132, 0.094602619801141, 0.120889283852101, 0.679725918576514, -1.80256750474042, 1.43196867245135, -4.43406878641156, -0.23309969083241, 0.0356729062616825, -0.804192734241911, 0.63725347602595, -0.186413882500132, -0.325751900006666, 0.0216109650404263, -0.246456467964157, 6.74117053529279, 0.26770419635053, -2.97364768658554, 1.22262432675417, -0.731856095827091, -0.539320876364362, -1.66015741666959, 0.325751900006667, -0.021610965040422, 1.90661388463375},
    {0.34730795587707, 0.346390058705358, 0.101992726716842, -0.1201864200656, -0.558595529905266, 0.159508103766071, -0.117722478519047, -0.101310667057415, -1.39526645637379, 2.08973096441721, -1.38816252262585, -1.29536745996238, 0.409838580918114, -0.101992726716842, -0.234936612320398, 0.401436481027339, -0.15950810376607, -0.218436025622458, -0.0404462244050411, 0.234353193098575, -1.36036675471709, -0.289652160852513, 3.21432974458473, -0.246725324469551, -0.283714002508293, 0.582972603847363, -0.799150020782063, 0.218436025622458, 0.0404462244050416, 0.56479682768349},
    {-0.161328789785952, -0.351201920067468, 0.243015108355066, -0.780294492171822, 0.863923804034904, 0.111120368180021, -0.2747095662848, 0.156687069959906, 0.824500830648486, -2.31155651072535, 1.99958638993029, 0.260269516108358, 0.398064409367551, -0.243015108355065, 0.0472042414949515, 0.140142090387453, -0.111120368180022, -0.0936857401896812, -0.0482631839802586, 0.325396208317109, -3.12233722505627, 0.382230082804271, 1.99814390491301, -0.566288217706109, 0.134567475897347, 0.362396906251252, -0.165999697260024, 0.0936857401896805, 0.0482631839802588, -0.159396511057081},
    {-0.219620965508789, 1.77751327294542, 0.20691314884166, -0.938985349862097, 2.00474187080317, 0.0513521406623326, -0.211024069027362, 0.363593558014056, 1.06963975570393, -2.01699752931235, -0.61053453382821, 0.0589610169540352, 0.0173297934874965, -0.20691314884166, 0.0106935692074154, 0.00389463322050121, -0.0513521406623349, -0.0177781099200849, -0.0143472983469428, 0.0994910234630081, -0.254490232020021, 0.921655556374597, -1.80921265573718, -0.0461560714062883, 0.207129435806865, -0.328131055815183, -0.00183619360060338, 0.0177781099200827, 0.0143472983469427, -0.0976548298624032},
    {-0.0209772079821643, -0.396701411583311, 0.399877762194956, -1.65993791461285, 1.40509174086318, 0.123390082929379, 0.0599331426904395, 0.0696106867104157, -0.20331912904397, -0.123703717824718, 0.744701466434163, 0.479253808900425, -5.28804995692452, -0.399877762194953, 0.0237430665741756, 0.190928497886898, -0.123390082929377, -0.435036243762159, 0.596927340689375, -0.299159589437828, 1.43055486500621, 6.94798787153737, -3.31490041476981, 0.070872174132088, -0.250861640577339, -0.164225927416676, -0.953030134509134, 0.435036243762155, -0.596927340689377, 1.25218972394696},
    {-0.244720001995119, 0.346390058705359, -0.205061948774458, 1.25569982385825, -1.1775301913267, 0.102354027564883, -0.0729779800399434, -0.0583368920737829, 0.458103499297861, 0.25242808017995, -0.812201636188052, 1.06954018544265, -1.87956149697762, 0.205061948774459, 0.052986879509598, 0.109235184081511, -0.102354027564883, -0.285450824891426, 0.24333049211907, 0.284468107532127, -3.85932203668383, 0.62386167311937, 3.96731204256788, -0.191197520700792, -0.036257204041568, 0.196547533264977, -0.425798659740701, 0.285450824891426, -0.243330492119073, 0.141330552208575},
    {-0.343330389268094, -0.351201920067468, -0.0835461193906448, 0.450426536556231, 1.82116810428009, 0.0683473488315203, -0.165391128058818, 0.090223832841098, 1.27432954866167, -1.68860256613002, 1.10880532680391, 0.609052888212722, -0.0713965829656412, 0.0835461193906451, 0.030173538537351, 0.0262159540743625, -0.0683473488315207, -0.118901275520852, 0.0160424062525861, 0.394980082644587, -2.74270358699422, -0.379029953590591, 0.312482594501407, -0.135878302164453, 0.139175173984455, 0.0154809307860052, -0.0626078304709058, 0.118901275520852, -0.0160424062525875, -0.332372252173678},
    {0.119021627700702, 1.77751327294542, 0.253349046363802, -1.33875328318574, 4.22603467501402, 0.0303732203363803, -0.123715939849417, 0.209365102102903, -0.609979029827521, 1.3910430113093, -2.67759888212791, -0.127657140121392, -0.0915840975261231, -0.253349046363801, -0.00632435657324856, -0.00846340609805389, -0.0303732203363822, -0.0219712035662451, -0.0117787709119664, 0.12076653527417, 0.907807326795808, 1.43033738071186, -5.00618486168844, 0.0449743526214177, 0.132179345947474, -0.24801509815107, 0.00826163736317439, 0.021971203566242, 0.011778770911966, -0.129028172637344},
    {-0.16077512287077, -0.396701411583311, 6.32404851007064, -4.55659847811125, 2.0711722515106, 0.0465489992587252, 0.0217678079089792, 0.0233634884685059, 0.281190616285139, 0.151417764140293, 0.124868154028649, 0.512728960713622, 0.0745567365024581, -6.32404851007064, 0.00578374741761075, -0.000356172861468817, -0.0465489992587249, -0.232908116629407, 0.549961335597693, -0.14800494894958, -1.62415093733462, 4.48204174160879, -0.959750274889608, -0.0183209444158329, -0.021411635047513, -0.0108262914702804, 0.00242171129030179, 0.232908116629402, -0.549961335597687, 0.145583237659288},
    {-0.0231092835261122, 0.34639005870536, 1.75409916439269, 3.85712313652989, -1.73573567238647, 0.0376754447559796, -0.0260649086724376, -0.0195796560795947, 0.195906210582944, -0.226433594639724, -0.29275339112247, -0.164342827891448, 0.881951188948033, -1.7540991643927, -0.00185383990226929, -0.00595987641041928, -0.0376754447559807, -0.150282084237941, 0.250862632720209, 0.140736547379929, -0.214188317465698, -4.73907432547793, 2.11426681774362, -0.00241611304011639, 0.0320247850828557, 0.0238496090219806, 0.0321801407153927, 0.150282084237942, -0.250862632720206, -0.172916688095319},
    {0.25757029285913, -0.351201920067468, -0.247959121416688, 3.44947832137329, 2.68448865880024, 0.0242960786153931, -0.0576920151294539, 0.0302818946024344, -0.720891835721444, 0.509096752407345, 0.305426710522433, -0.755472566595072, 0.547178448555985, 0.247959121416687, -0.00852197328592583, -0.0091514786850569, -0.0242960786153924, -0.0611366377836184, 0.0412344999417684, 0.195410774154917, 2.79461718917547, -3.99665676992928, -4.72363328138063, 0.0315241798095733, 0.0668434938145068, -0.0532841011260784, 0.03099731445497, 0.0611366377836189, -0.0412344999417684, -0.226408088609888},
    {0.643627477463276, 1.77751327294542, 0.180795646006107, -1.1217012806552, 6.22937670065131, 0.0104401582457715, -0.0421899274451725, 0.0702693706935887, -2.84415859753122, 4.96486302347839, -4.54184517635587, -0.654052673186596, -0.164612656347537, -0.180795646006107, -0.00737792430188249, -0.00619148444210058, -0.0104401582457725, -0.0110445622080652, -0.00331236672255072, 0.0597475244623035, 3.38913299317738, 1.28631393700273, -8.96445702064209, 0.0382305090977502, 0.048381411887274, -0.101121955489452, 0.00876810865918742, 0.0110445622080614, 0.00331236672255102, -0.0685156331214916},
    {0.26052963780404, -0.396701411583313, 0.202156726410702, 0.104101948809159, 0.137487919401701, -0.118688289051527, -0.133571098516483, 0.749180792140801, 0.274356833948044, -1.47092024263404, 1.33273518246527, -0.712398674345035, 0.647875223764907, -0.202156726410701, -3.88190762860052, -0.831275555643355, 0.118688289051528, 0.0948704030764136, -0.402901794823364, -0.315045661617761, 1.14655309506224, -0.751977172574069, -0.571642340118907, 6.24764386375317, 0.964846654159838, -3.11491702729344, -1.96067682547367, -0.0948704030764134, 0.402901794823369, 2.27572248709143},
    {0.302516099307215, 0.34639005870536, 0.174901641144901, -0.130567659355241, -0.115221071571268, 0.0347833019774873, -0.0450594763221733, -0.627847261393691, -1.08349512321911, 1.73958935183012, -1.30500038662358, -0.18102625198079, 0.409170307741555, -0.174901641144902, -0.986424054181831, 0.141206481639181, -0.0347833019774869, -0.0172458840932294, -0.272305890417521, 0.299574027745597, -0.327089630808415, -0.278602648386314, 0.623336954360473, -1.78233309352895, -0.096147005317007, 3.39660440910447, -0.938799069611438, 0.0172458840932275, 0.272305890417522, 0.639225041865842},
    {-0.21843793762351, -0.351201920067466, 0.123642391765631, -0.307820525808742, 0.178200900522257, 0.223613849822961, -0.75203000114562, 0.971028526683914, 1.03810278643263, -2.33943076546058, 1.87096783671892, 0.0628271254006766, 0.141404732565693, -0.12364239176563, 0.342349173516006, 0.345462996380709, -0.22361384982296, -0.0529016636056606, -0.117992345177284, 0.415954446576276, -0.598087975218644, 0.166415793243046, 0.357059949295712, -3.25902104704227, 0.40656700476491, 1.94564334684235, -0.191078639486747, 0.0529016636056598, 0.117992345177287, -0.22487580708953},
    {-0.18467858359371, 1.77751327294542, 0.0578933212354505, -0.238589734323349, 0.4135165682706, 0.220601860279335, -1.01717622737603, 2.2532792083003, 0.877100194463029, -1.56094000223284, -0.908994881581897, 0.00922823879748572, 0.00141088596622, -0.0578933212354504, 0.0502852852996214, 0.00601501011116281, -0.220601860279337, -0.017676010450304, -0.0225923754080386, 0.127179520062293, -0.032714209702807, 0.237178848357126, -0.390030597365277, -0.17826189854397, 1.01116121726487, -2.12530259505596, -0.000752068401250604, 0.0176760104503046, 0.0225923754080397, -0.126427451661043},
    {0.259550726522875, -0.396701411583312, -0.0356729062616831, -0.0346045055181213, 0.666545937704306, 0.0606216909073095, 0.050975655069259, 0.574586631579222, -0.308909765222812, -0.532210874440987, 0.978271324724236, -0.798816702986173, -0.151993763092264, 0.0356729062616826, -0.688608800465997, 0.223900949430206, -0.060621690907309, -0.17552808291991, 0.102716892780574, -1.17140731788667, 2.18096760194488, 0.186598268610384, -2.04869683666301, 1.8800727108187, -0.274876604499465, -1.76605054193192, -5.14518568300823, 0.17552808291991, -0.102716892780572, 6.3165930008949},
    {-0.0203093940389598, 0.346390058705359, 0.101992726716843, -0.120186420065601, -0.558595529905268, 0.16852491355416, -0.180442698454674, -0.481529487748321, -0.0408768355937409, 0.722739872862287, -1.00794370193494, 0.180639772360899, 0.258043945749361, -0.101992726716842, 0.155717997003429, 0.387416031407633, -0.16852491355416, -0.334814441548248, -0.192240859573791, 1.11388046592354, -1.9568467142154, -0.137857525683759, 2.33480247175977, -1.68687242459303, -0.206973332952958, 2.01268391533792, -2.39153566903114, 0.334814441548247, 0.19224085957379, 1.2776552031076},
    {-0.350400156294148, -0.351201920067467, 0.243015108355066, -0.780294492171823, 0.863923804034904, 0.254937392993912, -0.779330043605613, 0.744733469100725, 1.40434486643232, -2.11428278086017, 1.41153999078947, 0.35215478221592, 0.216932733614567, -0.243015108355065, 0.303570119720277, 0.216664603484215, -0.254937392993912, -0.265779284553756, -0.229394859733242, 1.54660781591123, -1.99301088356971, 0.563361758557255, 0.776932297318886, -1.71804724252789, 0.562665440121398, 0.669743653706889, -0.429978507731667, 0.265779284553756, 0.229394859733243, -1.11662930817957},
    {-0.022384432501823, 1.77751327294542, 0.20691314884166, -0.938985349862097, 2.00474187080316, 0.188817160483827, -0.842059472797185, 1.72815977650085, 0.0525831654337384, 0.167388746437666, -1.975100752315, -0.0144274684593485, -0.036515601237673, -0.20691314884166, -0.0124369980152076, -0.0327463127423483, -0.188817160483829, -0.0709408454477883, -0.0681926930721112, 0.47288072376959, 0.192287953699958, 0.975500951099767, -2.18260235604377, 0.165759149309733, 0.87480578553954, -1.88148192779537, 0.0183895562850747, 0.0709408454477877, 0.0681926930721111, -0.491270280054666},
    {-0.309054780062582, -0.396701411583312, 0.399877762194954, -1.65993791461285, 1.40509174086318, 0.245642220944692, 0.152674682073988, 0.330859516446369, 0.0867840462081417, 0.13551950873954, 0.483452636698213, 1.46377606721657, -3.04778231179647, -0.399877762194952, 0.344678021868894, 0.280323252687911, -0.245642220944691, -1.10821854528985, 2.83719498581743, -1.42190519558375, -0.676712999455853, 4.70772022640932, -2.19215480862389, -0.159346844950773, -0.4329979347619, -0.51619069336449, -2.61073469435297, 1.10821854528984, -2.83719498581743, 4.03263988993672},
    {-0.358579623296543, 0.346390058705359, -0.205061948774459, 1.25569982385825, -1.1775301913267, 0.256580410431231, -0.221168398048955, -0.277275183088055, 0.691085365440885, -0.0856324556759197, -0.593263345173781, 1.10461047941694, -0.966342430921969, 0.205061948774459, 0.260104645449674, 0.170203422309209, -0.256580410431232, -0.865092478970159, 1.15654955817472, 1.35207659844, -2.82678383975025, -0.289357392936278, 2.89970355166, -0.665627949491483, 0.0509649757397458, 0.682798487129863, -1.04051060779373, 0.865092478970158, -1.15654955817472, -0.311565990646273},
    {-0.209120412751909, -0.351201920067468, -0.0835461193906451, 0.45042653655623, 1.82116810428009, 0.225482960005564, -0.611576862650214, 0.428833777059641, 0.741589727968507, -0.951462777734498, 0.770195382585367, 0.272314520571382, -0.0111894501575488, 0.0835461193906452, 0.0641223971199363, 0.0151927301496363, -0.225482960005565, -0.439668499160906, 0.0762495390606786, 1.87733989313133, -0.92360540886613, -0.439237086398682, -1.16987721598534, -0.217483051161462, 0.596384132500578, -0.275473123018114, -0.0466366864696221, 0.439668499160907, -0.0762495390606796, -1.83070320666171},
    {0.312478109057611, 1.77751327294542, 0.253349046363801, -1.33875328318574, 4.22603467501402, 0.125378211827876, -0.534659491189287, 0.995112097236993, -1.46615692106645, 2.83951141632541, -3.463345877262, -0.250597768737482, -0.135789811647015, -0.253349046363801, -0.0590087139335773, -0.0542305386031383, -0.125378211827878, -0.0949522958306104, -0.0559844850328575, 0.574003207724905, 1.48398462786264, 1.47454309483275, -5.45942153413918, 0.349436568523895, 0.588890029792431, -1.28553995182731, 0.0582211737148983, 0.0949522958306086, 0.0559844850328571, -0.632224381439806},
    {0.0441090754128553, -0.396701411583311, 6.32404851007064, -4.55659847811125, 2.0711722515106, 0.176031214445462, 0.0885717097592907, 0.111046634683379, 0.219943720231991, 0.0954636081246871, 0.0371850078137786, -0.529788570164162, 2.13856101680234, -6.32404851007064, -0.0284048020475102, -0.041569606493236, -0.176031214445461, -0.947687070417887, 2.61396561589757, -0.703467357603281, -1.13709581511053, 2.4180374613089, -0.40428786623591, -0.0609657953308768, -0.0470021032660581, -0.0216760373049903, 0.330160288379604, 0.947687070417883, -2.61396561589757, 0.373307069223681},
    {0.182854617686687, 0.346390058705359, 1.75409916439269, 3.85712313652989, -1.73573567238647, 0.149676919217672, -0.109727092848608, -0.0930620835509117, -0.106013524280275, -0.203960188460622, -0.219270963651151, -0.930761949117098, 1.82343837029521, -1.7540991643927, -0.0499031319415442, -0.0518730111222516, -0.149676919217672, -0.632651985007538, 1.19234981406738, 0.668920653033649, 1.08041490941367, -5.6805615068251, 1.5860827120899, 0.0579268284734079, 0.161600103970858, 0.0850383870190476, 0.316229361171447, 0.632651985007538, -1.19234981406738, -0.985150014205094},
    {0.430953001399549, -0.351201920067469, -0.247959121416688, 3.44947832137329, 2.68448865880024, 0.103393084530577, -0.254549965342959, 0.14392981133658, -1.21677998664642, 0.945250111526046, 0.191778793788288, -1.1220851536954, 0.701931480936603, 0.247959121416688, -0.0601609933964615, -0.0517981611997563, -0.103393084530576, -0.269748404421053, 0.195987532322385, 0.92878719203367, 3.89460619415455, -4.1514098023099, -5.45700969925939, 0.20881069209116, 0.306348126542711, -0.292579510031275, 0.188998134917862, 0.269748404421054, -0.195987532322385, -1.11778532695153},
    {0.73687391683395, 1.77751327294542, 0.180795646006107, -1.1217012806552, 6.22937670065131, 0.0474159810998227, -0.19451752855721, 0.333990240685136, -3.21754465365933, 5.50872351022738, -4.80556604634742, -0.729983215471419, -0.177043964970057, -0.180795646006107, -0.039138308942843, -0.0307017163177621, -0.0474159810998238, -0.0509211813056893, -0.0157436753450704, 0.283979917260422, 3.68929592826033, 1.29874524562525, -9.18868941344022, 0.197802909384117, 0.225219244874974, -0.492654841126408, 0.0448220318463864, 0.0509211813056859, 0.0157436753450706, -0.328801949106809},
    {-0.242112183715198, -0.396701411583311, 0.202156726410703, 0.104101948809159, 0.137487919401698, 0.910263235975045, -2.06647448493138, 1.52099882878989, -0.00253143690262618, 0.0804278863849573, 0.56091714581618, 0.13012919389268, 0.23279934954986, -0.202156726410701, 1.43959085542531, -4.62118069312338, -0.910263235975046, 1.46773717900042, -0.817977669038409, -0.6396107419768, -0.020539853534526, -0.336901298359023, -0.247077259759855, -0.227227914317665, 6.68765517805476, -2.73336176989753, -1.4303379177874, -1.46773717900042, 0.817977669038413, 2.06994865976421},
    {-0.347940059792458, 0.346390058705359, 0.174901641144901, -0.130567659355241, -0.115221071571267, -0.0900751953174294, 1.6156503063331, -1.27466555370425, 0.665827171745213, -0.00609507634509732, -0.658182094313018, 0.114992163304793, 0.128636423377715, -0.174901641144901, 1.27213319153948, -1.59175310227737, 0.0900751953174295, 0.618367548681293, -0.552839774781359, 0.608199983391046, -0.314482090448549, 0.00193123597752652, 0.314710998715021, -3.47904669245964, -0.0238972040557297, 3.48157905462441, -0.5992040521225, -0.618367548681295, 0.552839774781361, -0.00899593126854234},
    {-0.264871803916117, -0.351201920067467, 0.123642391765631, -0.307820525808741, 0.178200900522257, -0.139787485467037, 0.843544431569925, 1.97139764833991, 0.94425756719594, -1.19878255827528, 0.870598715062925, 0.0384381926574373, 0.019847131049873, -0.12364239176563, 0.425233331533269, -0.0543886306339461, 0.139787485467039, 0.0593392599861139, -0.239549946693105, 0.844477371429403, -0.145176117622273, 0.287973394758867, -0.0714629755574206, -1.60605168681469, -0.789155800935982, -0.79057929305849, -0.0544487831517336, -0.0593392599861161, 0.239549946693107, -0.790028588277668},
    {0.251073694749743, 1.77751327294542, 0.0578933212354502, -0.238589734323349, 0.413516568270598, 0.247106172443952, -1.34035148121976, 4.57464349421983, -1.19945571810087, 2.40122791790713, -3.23035916750143, -0.0208011980772064, -0.0218641405875853, -0.0578933212354505, -0.230119111922975, -0.122828558845079, -0.247106172443954, -0.0232919981331407, -0.0458674019618422, 0.258201896111124, 0.128337603220737, 0.260453874910931, -0.521052973414127, 1.41977087905534, 1.46318004006485, -5.7642952613522, 0.023661380790602, 0.023291998133142, 0.0458674019618413, -0.281863276901729},
    {-0.354977542438394, -0.396701411583311, -0.0356729062616825, -0.0346045055181224, 0.666545937704306, -0.161830420667416, -0.95253268881385, 1.16653497104885, 0.186693538034369, 0.178662430732731, 0.386322985254605, 0.684720873388752, -0.0461731769957381, 0.035672906261682, 1.19834327843348, -1.27097497208273, 0.161830420667416, 3.27992326060122, 0.208537478877097, -2.37820987568337, -0.509372532226736, 0.0807776825138594, -0.841894278866324, -0.891462746259805, 2.22350766089658, -1.47341550322253, -3.17327191586202, -3.27992326060122, -0.208537478877097, 5.55148179154539},
    {-0.336177667614903, 0.346390058705359, 0.101992726716842, -0.120186420065601, -0.558595529905268, -0.245351328163603, 0.637826140626859, -0.977608869015617, 0.662352475008212, -0.16070054543102, -0.511864320667649, 0.436264187114289, 0.0599943369546777, -0.101992726716843, 0.763514413781912, -0.318388353512671, 0.245351328163603, 1.18349705977435, -0.390290468368473, 2.26141794057534, -1.064933654317, 0.0601920831109245, 1.18726499710798, -1.86376103931599, -0.319437787114187, 2.07785549454969, -1.12884858246194, -1.18349705977435, 0.390290468368473, -1.1325693581134},
    {-0.118117019922264, -0.351201920067467, 0.243015108355065, -0.780294492171823, 0.863923804034904, 0.0425061088440201, -0.187940606800303, 1.51196980241046, 0.432132696843094, -0.607117414333098, 0.644303657479735, 0.0458205299922568, -0.0193935204939753, -0.243015108355065, 0.0801913980783608, -0.00467109539564613, -0.0425061088440204, -0.0640944365276659, -0.465721113841783, 3.13994792882539, -0.0933365184318841, 0.799688012665797, -0.816407815595276, -0.163350050863322, 0.19261170219595, -1.42881114962549, 0.0780405925180862, 0.0640944365276655, 0.465721113841784, -3.21798852134348},
    {0.394442721463883, 1.77751327294542, 0.206913148841659, -0.938985349862096, 2.00474187080316, 0.255745030827461, -1.28326040456176, 3.50853762348672, -1.81600426818164, 3.39952687307321, -3.75547859930088, -0.142371689060036, -0.106768804513663, -0.206913148841659, -0.249167453855975, -0.145915140523653, -0.255745030827464, -0.108110627539019, -0.1384458963481, 0.960050010032387, 0.80740146056346, 1.04575415437576, -2.66977164230659, 1.41304895303559, 1.42917554508542, -4.67241912266635, 0.10916399479453, 0.108110627539019, 0.138445896348099, -1.06921400482692},
    {-0.192468191903715, -0.396701411583312, 0.399877762194954, -1.65993791461285, 1.40509174086318, -0.0410670910943293, -0.0401841924135745, 0.671716283022831, 0.286700988942449, 0.159872744422823, 0.142595870121754, 0.47008453121796, -0.124858651024474, -0.399877762194953, 0.224727983827076, -0.0030226094681594, 0.0410670910943298, 0.291684689663446, 5.76011864658942, -2.88677467417863, -1.14789094205213, 1.78479656563732, -0.727285330029011, -0.548759212289695, 0.0432068018817342, -0.347685054560212, -0.217139923401069, -0.291684689663447, -5.76011864658942, 3.1039145975797},
    {-0.0579729019650717, 0.346390058705359, -0.20506194877446, 1.25569982385825, -1.1775301913267, 0.0979411138874701, -0.11606826615377, -0.562928512254454, 0.247452663795526, -0.228259804528432, -0.307610016007382, -0.0169985708549943, 0.225153425141061, 0.205061948774459, -0.00812631410416111, -0.0208116360121887, -0.0979411138874705, -0.453996976885045, 2.34804541423775, 2.74500753921487, -0.312243848703448, -1.48085324899931, 1.50677261088514, -0.149270877728578, 0.136879902165959, 0.720325704087192, 0.492193944563325, 0.453996976885043, -2.34804541423775, -3.23720148377819},
    {0.225565484443058, -0.351201920067468, -0.0835461193906456, 0.450426536556229, 1.82116810428009, 0.242028983444844, -0.779334722200612, 0.870625194206358, -0.627456245081789, 0.424688715267548, 0.328403965438649, -0.464943919745676, 0.0673640447405824, 0.0835461193906457, -0.222270469965023, -0.116554276521093, -0.242028983444844, -0.560271240754735, 0.154803033958809, 3.8114054826924, 1.74771862101201, -0.517790581296814, -3.10394280554642, 0.835512032228428, 0.895888998721705, -1.48386675646976, 0.570019012253608, 0.560271240754736, -0.15480303395881, -4.38142449494601},
    {0.625377600303054, 1.77751327294542, 0.253349046363801, -1.33875328318574, 4.22603467501402, 0.207840031305071, -0.944124904409848, 2.02029249853973, -2.77042394229885, 4.85605934761511, -4.48852627856474, -0.433502317612517, -0.193465923707229, -0.253349046363801, -0.207239539597308, -0.136437384707657, -0.207840031305073, -0.167670879694215, -0.11366059709307, 1.16535049460682, 2.25823646361961, 1.53221920689297, -6.05076882102111, 1.07956951095402, 1.08056228911751, -2.89262246989644, 0.168407138726327, 0.167670879694215, 0.11366059709307, -1.33375763333315},
    {0.445188683796849, -0.396701411583311, 6.32404851007064, -4.55659847811125, 2.0711722515106, 0.251335865827114, 0.140376363080481, 0.225448654138396, 0.0416264621376284, -0.0128967227099305, -0.0772170116412348, -2.2682776280034, 4.83151020970039, -6.32404851007064, -0.246903722311185, -0.148845643231902, -0.251335865827112, -1.50197918325385, 5.30691480879561, -1.42819068271763, -0.123330082385644, -0.274911731589139, 0.320435458878441, -0.0134245720356422, 0.00846928015141531, 0.0348796402084341, 1.51435723338288, 1.50197918325385, -5.3069148087956, -0.0861665506652445},
    {0.542293065584037, 0.346390058705359, 1.75409916439269, 3.85712313652989, -1.73573567238647, 0.233047796265582, -0.185263390252464, -0.188936130731822, -0.624267027991788, -0.141019179827371, -0.123396916470239, -2.12456429902517, 3.0518162226727, -1.7540991643927, -0.231260418584871, -0.146583295328365, -0.233047796265581, -1.06817057255093, 2.42072766644487, 1.35805341045947, 2.96335001674757, -6.90893935920259, 0.89694995466407, 0.322562873527042, 0.331846685580826, 0.09763367578965, 1.07451312353613, 1.06817057255093, -2.42072766644486, -2.4325665339956},
    {0.696647594003245, -0.351201920067469, -0.247959121416688, 3.44947832137329, 2.68448865880024, 0.179690567637898, -0.464714413867441, 0.292208605409281, -1.94993432088212, 1.56098864723076, 0.0434999997155876, -1.64987954111949, 0.903840971932116, 0.247959121416688, -0.179590626402308, -0.121765637690284, -0.179690567637897, -0.492461161734252, 0.397897023317897, 1.8856386150017, 5.37925200454667, -4.35331929330541, -6.41386112222742, 0.585535618204537, 0.58648005155772, -0.698153597211506, 0.494079765028752, 0.492461161734254, -0.397897023317897, -2.37971838003045},
    {0.866122121955718, 1.77751327294542, 0.180795646006107, -1.1217012806552, 6.22937670065131, 0.090556643969385, -0.378989874794237, 0.678072329454316, -3.72656946126587, 6.23258220148132, -5.1496481351166, -0.832787687104745, -0.193263351160873, -0.180795646006106, -0.0906495648074984, -0.0652980027053128, -0.0905566439693865, -0.0992127150214238, -0.0319630615358863, 0.576540570826294, 4.08466105345953, 1.31496463181607, -9.48125006700609, 0.44461842149651, 0.444287877499552, -1.03204118614332, 0.0993349697639777, 0.0992127150214211, 0.0319630615358863, -0.675875540590273},
    {0.262326815091423, -0.396701411583313, 0.202156726410704, 0.104101948809159, 0.1374879194017, 6.97671389735957, -4.78134754401983, 2.11255686317746, 0.128964660121262, 0.0360508249420143, -0.0306408885713867, -0.100156729351648, -0.0853345325480405, -0.202156726410702, -1.53894819927434, 3.91937002415418, -6.97671389735957, 3.39600687414886, -1.13611155113631, -0.888372848912809, -0.039016037226216, -0.0187674162611246, 0.00168484717615368, -0.599497014536957, 0.861977519865654, 0.0258883506338389, 0.728217700605391, -3.39600687414887, 1.13611155113631, 0.160155148307433},
    {0.382897749059931, 0.346390058705359, 0.174901641144902, -0.130567659355246, -0.115221071571266, 2.00292864633947, 4.06132978887341, -1.7704178417259, -0.395619949493978, -0.171238051979939, -0.162429806291375, -0.10701050209116, -0.0863780817689604, -0.174901641144902, -1.64425915824829, 2.6868052803149, -2.00292864633947, 1.55441715084489, -0.767854279928036, 0.844745587423897, 0.144066178980255, 0.216945741124204, 0.0781653946821713, 2.21363445225523, -6.74813506918831, 1.20104254771896, 0.558848215437044, -1.55441715084489, 0.767854279928038, -1.40359380286094},
    {0.582912531849485, -0.351201920067466, 0.123642391765631, -0.307820525808742, 0.178200900522255, -0.239523825164352, 3.69493051796097, 2.73812809926082, -1.63950531826655, 1.30392644234252, 0.10386826414201, -0.0948090485613347, -0.0733203934222977, -0.12364239176563, -1.45677894538782, 0.88010297082423, 0.239523825164355, 0.259920443346256, -0.332717471165276, 1.17291771238943, 0.316511464556536, 0.381140919231039, -0.399903316517456, 4.86332522619432, -4.5750334887852, -6.14467438006732, 0.279379641427173, -0.25992044334626, 0.332717471165275, -1.4522973538166},
    {0.812452135616644, 1.77751327294542, 0.0578933212354497, -0.238589734323348, 0.413516568270596, 0.1738079300289, -1.09014043663116, 6.35384743720881, -3.51633198805033, 5.93592968997866, -5.00956311049041, -0.0524695959338468, -0.0397032273991158, -0.0578933212354502, -0.806216324172753, -0.181408029877252, -0.173807930028903, -0.0189439481886983, -0.0637064887733706, 0.358623673726921, 0.260427778693192, 0.278292961722462, -0.621474751029939, 4.00157696497627, 1.27154846650842, -9.54920807801233, 0.0596778285916817, 0.0189439481886993, 0.0637064887733674, -0.418301502318601},
    {0.404206071679303, -0.396701411583312, -0.0356729062616843, -0.0346045055181241, 0.666545937704307, 1.49613339776545, -2.44717872422156, 1.62023231877597, 0.0618697120201846, -0.00200000964366443, -0.0673743624725129, -0.676423762559445, 0.0349327507444066, 0.0356729062616817, -1.64424322359767, 2.47039173426359, -1.49613339776545, 8.42654379706156, 0.289643406617244, -3.30316072560589, -0.0731787462010632, -0.000328245226282165, 0.0830565710561946, -0.177882067739885, -0.0232130100420215, 0.201892972561582, 3.3344932565465, -8.42654379706156, -0.289643406617244, -0.0313325309406124},
    {0.507063488468923, 0.34639005870536, 0.101992726716841, -0.120186420065601, -0.558595529905269, 0.07101973633763, 1.9548666357124, -1.35782768970652, -0.573877125232763, -0.147930921964773, -0.131645499976748, -0.647897638253977, -0.0918002982140735, -0.101992726716843, -1.57490224360711, 1.49315821229376, -0.07101973633763, 3.6272877015401, -0.542085103537224, 3.14094521340031, 0.898755443876234, 0.211986718279676, 0.307737724283011, 2.18468455731572, -3.44802484800616, 0.748045375997918, 2.39910388467208, -3.6272877015401, 0.542085103537224, -5.54004909807238},
    {0.671962873295984, -0.351201920067467, 0.243015108355065, -0.780294492171822, 0.863923804034902, -0.1820029351808, 1.22321782683205, 2.10001620155127, -1.88295343805268, 1.50593522648524, 0.0562572583389111, -0.515643003287643, -0.200525196246959, -0.243015108355065, -1.25341917431049, 0.314350539750138, 0.1820029351808, 0.417160818495719, -0.646852789594767, 4.36115953641951, 1.68933862244214, 0.980819688418781, -2.0376194231894, 4.1064251968354, -1.53756836658218, -4.95302222407618, 1.12075938082137, -0.41716081849572, 0.646852789594766, -5.48191891724088},
    {0.854659261789438, 1.77751327294542, 0.206913148841659, -0.938985349862096, 2.00474187080316, 0.239374195003021, -1.32853973709366, 4.87310384197352, -3.68179693700834, 6.16966922006116, -5.12004481778767, -0.265108269545324, -0.160614199238834, -0.206913148841659, -0.644422180069842, -0.227247790459783, -0.239374195003024, -0.111925267994819, -0.192291291073268, 1.33343971033897, 1.30352774135534, 1.09959954910093, -3.04316134261318, 3.16860047521872, 1.55578752755345, -7.39728213712239, 0.228085934824015, 0.11192526799482, 0.192291291073266, -1.56152564516298},
    {0.63196013663153, -0.396701411583311, 0.399877762194953, -1.65993791461285, 1.40509174086318, -0.24517877267168, -0.42855815106885, 0.932965112758784, -0.0545862383822772, -0.0620195270517433, -0.118652959614201, -2.03766259075905, 2.11540899410359, -0.399877762194955, -1.35298504251687, 0.54615040676319, 0.24517877267168, 3.11077176842891, 8.00038629171748, -4.00952028032456, 0.237110573778957, -0.455471079490736, 0.395460276116914, 0.157438754188446, -0.117592255694339, 0.262581175569639, 5.10969427734139, -3.11077176842891, -8.00038629171748, -1.10017399701684},
    {0.699938941386467, 0.346390058705359, -0.205061948774461, 1.25569982385825, -1.1775301913267, -0.116209006894856, 0.193229626637042, -0.781866803268725, -0.848825245514237, -0.108832029584479, -0.0886717249931119, -1.77137785639109, 1.13837249119671, 0.205061948774458, -1.17617497382134, 0.17517505957112, 0.116209006894856, 0.755810948546611, 3.2612644802934, 3.81261603012274, 2.50974392774052, -2.39407231505496, 0.439164119977266, 1.66644174073763, -0.368404686208163, 0.29160003635243, 3.45638115553108, -0.755810948546611, -3.2612644802934, -7.26899718565381},
    {0.804449259426939, -0.351201920067468, -0.0835461193906464, 0.45042653655623, 1.82116810428009, 0.157022569763056, -0.590304184654241, 1.2092351384249, -2.24008613638041, 1.79704477580084, -0.010205978779894, -1.2583453857965, 0.127571177548675, 0.0835461193906464, -0.835527183461997, -0.167187751689789, -0.157022569763057, -0.424375365985308, 0.215010166766901, 5.29376529317914, 4.02347989754958, -0.577997714104908, -4.58630261603317, 2.67154539958652, 0.757491936344029, -3.04525335454942, 1.49931635307386, 0.424375365985308, -0.215010166766903, -6.79308164625301},
    {0.915095482842409, 1.77751327294542, 0.253349046363801, -1.33875328318574, 4.22603467501402, 0.242772631084241, -1.16084886922723, 2.80603949367382, -3.91708282124271, 6.4987473391537, -5.27427327369883, -0.590935171541135, -0.237671637828121, -0.253349046363801, -0.392374307610205, -0.206087899454945, -0.242772631084244, -0.206159746646054, -0.157866311213961, 1.61858716705756, 2.86890598999897, 1.57642492101386, -6.50400549347186, 1.90492131055404, 1.36693676868218, -4.31858649661765, 0.287351125703106, 0.206159746646054, 0.15786631121396, -1.90593829276066},
    {0.868638985211497, -0.396701411583311, 6.32404851007063, -4.55659847811125, 2.0711722515106, 0.250809322516257, 0.152983559275671, 0.31313180035327, -0.183989831391422, -0.123047584380658, -0.164900157856107, -3.89068141543178, 6.89551449000027, -6.32404851007064, -0.588215719540761, -0.231510490727832, -0.250809322516254, -1.63687188049173, 7.37091908909549, -1.98365309137133, 0.943611296389043, -2.33891601188902, 0.87589786753214, 0.142660613503523, 0.0785269314521544, 0.132423305683972, 3.00186832357338, 1.63687188049172, -7.37091908909549, -1.01821523220205},
    {0.894239071655411, 0.346390058705358, 1.75409916439269, 3.85712313652989, -1.73573567238647, 0.255773608793594, -0.217390424506949, -0.262418558203138, -1.12370401763527, -0.0670106237265836, -0.0499144889989207, -3.18811892297117, 3.99330340401987, -1.7540991643927, -0.481998258407616, -0.225065649048982, -0.255773608793592, -1.25340497060016, 3.36221484779204, 1.88623751611319, 4.5550887463473, -7.85042654054976, 0.368765849010349, 0.688664662667407, 0.442456073555928, 0.0557521539433464, 1.9528333494329, 1.25340497060016, -3.36221484779203, -3.83907086554609},
    {0.932314949394835, -0.351201920067469, -0.247959121416689, 3.44947832137328, 2.68448865880024, 0.21931772889597, -0.590016512172769, 0.405856522143427, -2.57966297056645, 2.06869785825763, -0.0701479170185569, -2.09232037220804, 1.05859400431273, 0.247959121416688, -0.316329095558074, -0.181067362668037, -0.219317728895969, -0.625244684383462, 0.552650055698514, 2.61901503288046, 6.55506925351398, -4.50807232568603, -7.14723754010618, 0.991033283347708, 0.7710838748408, -1.08056070993306, 0.803737073468094, 0.625244684383463, -0.552650055698514, -3.42275210634855},
    {0.971133168652245, 1.77751327294542, 0.180795646006107, -1.1217012806552, 6.22937670065131, 0.119844479565316, -0.509439025084952, 0.941793199445864, -4.13359857554116, 6.79832113905164, -5.41336900510814, -0.914445613287687, -0.205694659783393, -0.180795646006106, -0.138251176842046, -0.0934196017713615, -0.119844479565317, -0.13336195022093, -0.0443943701584057, 0.800772963624411, 4.39055137244059, 1.32739594043859, -9.70548245980421, 0.663788950819111, 0.602858626856315, -1.46733097342292, 0.146843660747413, 0.133361950220928, 0.0443943701584059, -0.947616624371826}};
    // Array of non-zero columns
    static const unsigned int nzc0[30] = {0, 3, 4, 5, 6, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34};
    
    const static double FE0_D100[64][30] = \
    {{-2.61665455821179, -0.262326815091422, 0.0894026163922232, 0.0784431029452084, 0.18826364632462, 0.100156729351642, 0.0853345325480474, 0.2021567264107, -1.99429993054149, 0.88799633014401, -0.18826364632462, -2.23419141910733, 0.966009105862812, -0.2021567264107, 4.41532949092758, -2.85692904038522, 1.32058092276085, -0.0423045868391937, -0.0660004964643346, -0.0679684018579204, -0.47889892738832, 0.0660004964643351, 0.0679684018579198, 2.48233521126848, -0.577437897119223, -0.966439433089219, 2.78093176629565, -0.646897076539956, -1.05134363841086, 0.521203514227512},
    {-0.0971243045950528, -0.38289774905993, 0.587242812072382, 0.0261642079196774, 0.0303348329193275, 0.107010502091157, 0.0863780817689655, 0.174901641144903, -4.70183916807173, 0.189067653393766, -0.0303348329193274, -0.856794088890817, 0.624184812888233, -0.174901641144903, 1.02065872978734, -1.99327297180224, 1.45263629566988, -0.19959116293109, -0.274237126395047, -0.0151369709694205, -1.44228454877614, 0.274237126395047, 0.0151369709694194, 6.87668927270698, -2.76209291670763, -0.215231861313444, 1.25310681828586, -0.503323231486199, -0.710562894657198, 1.64187571170723},
    {0.157576792955305, -0.582912531849484, 1.77749109602364, -1.65041855010949, 0.100429811620989, 0.0948090485613329, 0.0733203934223003, 0.12364239176563, -0.619333549054629, -5.28014630426966, -0.100429811620991, -0.0330344408809344, 0.234572257037862, -0.123642391765631, -0.277396095652904, -0.616061333083649, 1.31879316763073, -0.340885504021948, -0.405965739936154, 0.4874174221337, -1.09058719324332, 0.405965739936154, -0.487417422133701, 3.62271720919892, -4.78087475616793, 6.93056485437915, 0.193230994281361, -0.255005601961761, -0.307892650460161, 1.43147269726527},
    {-0.332272064837322, -0.812452135616642, 3.58199787646156, -6.20750111711738, 5.48363837580173, 0.0524695959338434, 0.0397032273991167, 0.0578933212354519, 1.61056772993438, -3.0096854928473, -5.48363837580173, 0.0235918168933185, 0.0192499727777489, -0.0578933212354524, 0.200854722614868, 0.203319042077588, 0.740550435761507, -0.265147019327117, -0.283046250318976, 0.648232493476431, -0.128555617225746, 0.283046250318974, -0.64823249347643, -1.44064905635805, -3.75191655003789, 9.21718660996467, -0.0211028248694195, -0.0549585879577455, -0.0589532001768645, 0.393702636552863},
    {0.0875743252958648, -0.404206071679305, 0.124544170479949, 0.0966026294448013, 0.188263646324617, 0.676423762559448, -0.0349327507444067, -0.0356729062616831, -0.816407479188932, 0.644611219481141, -0.188263646324617, -4.43406878641156, -0.233099690832407, 0.0356729062616823, 0.691940663523536, -1.83313825823764, 1.45782934109754, -0.252573153805609, 0.0219392102667135, -0.329513039020359, -1.68537326176876, -0.0219392102667133, 0.329513039020359, 1.2458373367962, -0.553974028087214, -0.741213848925942, 6.76638638039197, -3.00874135653986, 0.268032441576815, 1.93794641557437},
    {0.347307955877069, -0.507063488468924, 0.733385228998835, 0.030208443445729, 0.0303348329193258, 0.64789763825398, 0.0918002982140736, 0.101992726716842, -1.46628619271142, 0.13486432870481, -0.0303348329193254, -1.29536745996238, 0.409838580918115, -0.101992726716842, -0.163916875982769, -1.09172173126642, 1.41539413984105, -1.1171914694987, -0.252432942684716, -0.0733845311844253, -4.98765445625718, 0.252432942684714, 0.0733845311844255, 3.20129952353661, -2.46839855982403, -0.165072772150541, 2.82813768075803, -2.18066785904963, -0.501638879132187, 6.10484592575589},
    {-0.161328789785952, -0.671962873295983, 1.99407380623269, -1.78064479277004, 0.100429811620987, 0.515643003287642, 0.200525196246959, 0.243015108355065, 1.00650376582929, -3.5347743375574, -0.100429811620989, 0.260269516108358, 0.39806440936755, -0.243015108355065, -0.13479869368585, -0.174208449362685, 1.14229880613047, -1.78302436263182, -1.02908287239904, 2.36301563150651, -3.53949804355199, 1.02908287239904, -2.36301563150651, 0.971280148876072, -3.97185772093805, 5.31541913032743, 0.251161121235692, -1.02707364063169, -0.598589605614509, 5.32252240618381},
    {-0.219620965508789, -0.854659261789436, 3.73314907767067, -6.38069328908852, 5.48363837580173, 0.26510826954532, 0.160614199238835, 0.206913148841661, 0.830265560700905, -0.688457792218688, -5.48363837580173, 0.0589610169540344, 0.0173297934874956, -0.206913148841661, 0.250067764210438, 0.231142423680283, 0.593070039407503, -1.32130585127541, -1.11394684744787, 3.14265236607618, -0.142564964025193, 1.11394684744787, -3.14265236607618, -1.60194359895973, -2.96147103941184, 7.0691510813072, -0.113761461595425, -0.210307824903932, -0.17794399272633, 1.46387081530061},
    {-0.0209772079821642, -0.631960136631528, 0.177976321311653, 0.121952669742182, 0.188263646324617, 2.03766259075904, -2.11540899410358, 0.399877762194955, 0.0418596436277129, 0.304854433244129, -0.188263646324617, 0.479253808900425, -5.28804995692452, -0.399877762194957, -0.221435706097506, -0.355221908876288, 1.22959495958749, -0.672146817541111, 1.05239842018011, -0.694619865554746, -1.68021690342269, -1.05239842018011, 0.694619865554746, 0.188464429826421, -0.408300394765787, -0.426807102986313, 2.15774163391977, -4.67465803357924, 7.4034589510281, 2.3523637209638},
    {-0.244720001995119, -0.699938941386467, 0.951179273079119, 0.035854049544535, 0.030334832919327, 1.77137785639109, -1.13837249119671, -0.205061948774459, 0.574312506192717, 0.0591984535429108, -0.0303348329193259, 1.06954018544265, -1.87956149697762, 0.205061948774457, -0.0632221273852587, -0.065939875489609, 1.07382094625645, -2.79519475263195, 2.63740280717403, -0.154696012445137, -4.61513298523044, -2.63740280717403, 0.154696012445137, 0.177207165507367, -1.7026989447792, -0.0950525030874495, 0.330012288805909, -3.17093033063965, 3.01793398817433, 7.41032773786239},
    {-0.343330389268094, -0.804449259426936, 2.30843348521193, -1.96243590385965, 0.100429811620987, 1.2583453857965, -0.127571177548675, -0.083546119390645, 1.11730697889861, -1.09829838147577, -0.100429811620989, 0.609052888212722, -0.0713965829656407, 0.0835461193906444, 0.187196108300408, 0.193403705764149, 0.767179834630472, -4.14238117307042, 0.594040120357494, 4.98128269867774, -2.31832822100891, -0.594040120357497, -4.98128269867774, -0.893370238508486, -2.53237022560205, 3.06073428533542, -0.486983196456216, -1.380415077553, 0.198967760514316, 6.46070939407932},
    {0.119021627700702, -0.915095482842408, 3.94745604157908, -6.62246327900312, 5.48363837580173, 0.59093517154113, 0.237671637828124, 0.253349046363802, -0.852751660911764, 2.55189188053654, -5.48363837580173, -0.127657140121392, -0.0915840975261248, -0.253349046363802, 0.236448274510997, 0.19762449335689, 0.362001087273819, -2.8908771935652, -1.58820369192583, 6.62477202874602, 1.11396707344187, 1.58820369192582, -6.62477202874602, -1.32196241606077, -1.77274196460655, 4.07057139846658, -0.197898109282884, -0.265379922136857, -0.146087540302, 1.77691012012333},
    {-0.160775122870769, -0.868638985211494, 0.230538830650143, 0.144815392289633, 0.188263646324619, 3.89068141543177, -6.89551449000026, 6.32404851007064, 0.0303812937688854, -0.00156579513538712, -0.188263646324618, 0.512728960713624, 0.0745567365024608, -6.32404851007064, 0.256593069933868, 0.231154317866366, 0.541666720282029, -1.17651941301843, 2.8888773474867, -1.02390281648172, 0.0127209431571247, -2.8888773474867, 1.02390281648172, -0.0968478758679944, -0.164072248551035, -0.143249597154248, -1.63445016920144, -2.76896020694396, 6.8209577534978, 1.16379846986131},
    {-0.0231092835261119, -0.894239071655409, 1.16137946239124, 0.0409457150541434, 0.0303348329193285, 3.18811892297117, -3.99330340401987, 1.7540991643927, -0.0598673982106508, -0.00904317013277374, -0.0303348329193261, -0.164342827891449, 0.881951188948036, -1.7540991643927, 0.253919768891327, 0.219105772638561, 0.444322813651632, -4.70537083058522, 8.10128917326997, -0.22802930163043, 1.03921665313448, -8.10128917326997, 0.228029301630427, -0.44487218659605, -0.656639877584545, -0.0319025449213746, -1.22122482988478, -1.80255126519494, 3.11135221507183, 3.66615417745075},
    {0.25757029285913, -0.932314949394832, 2.60395904918183, -2.12638987338708, 0.100429811620989, 2.09232037220803, -1.05859400431274, -0.247959121416688, -0.940209564617415, 1.09911326458012, -0.10042981162099, -0.755472566595072, 0.547178448555987, 0.247959121416686, 0.210795755610048, 0.171915883982973, 0.29203301694268, -6.61620589129757, 4.5493068256278, 7.34264831426108, 3.41986187355894, -4.5493068256278, -7.34264831426108, -0.739559695031237, -0.924189789533182, 1.02727660880696, -0.5942473699285, -0.742600435684461, 0.511415555756748, 3.19634401773864},
    {0.643627477463276, -0.971133168652244, 4.14403873378693, -6.84051106649681, 5.48363837580173, 0.91444561328768, 0.205694659783396, 0.180795646006106, -2.96400307709653, 5.47430204856335, -5.48363837580173, -0.654052673186595, -0.164612656347539, -0.180795646006106, 0.112466555263439, 0.0872281173292572, 0.12781101859627, -4.40159593464864, -1.33070830716114, 9.76522998426651, 3.52249494339832, 1.33070830716113, -9.7652299842665, -0.564628117758574, -0.615407538931818, 1.36620901793346, -0.124593841561749, -0.135799098539339, -0.0410820034358582, 0.879100991250316},
    {0.26052963780404, 0.242112183715196, -0.116156852148898, -0.213998984901438, 0.188263646324617, -0.130129193892681, -0.232799349549861, 0.202156726410701, -0.635906402027003, 0.595554242297345, -0.188263646324616, -0.712398674345036, 0.647875223764908, -0.202156726410701, -2.97164439262547, 3.78990513748002, -1.32090256637378, 0.115410256610939, -0.0660004964643399, -0.0679684018579032, -0.321184083938174, 0.0660004964643403, 0.0679684018579028, -0.440011314301594, 1.1920745684775, -0.381555257395907, -0.492939646473259, 1.33546751471098, -0.415075874215048, 0.205773827327235},
    {0.302516099307214, 0.347940059792458, -0.631043869767728, -0.0389643999770743, 0.0303348329193279, -0.114992163304795, -0.128636423377714, 0.174901641144902, -0.993419927901684, 0.123939045497018, -0.0303348329193273, -0.181026251980791, 0.409170307741555, -0.174901641144902, -1.07649924949926, 1.73295958391655, -1.30691649351697, 0.29723620635532, -0.274237126395047, -0.0151369709694239, -0.945457179489711, 0.274237126395047, 0.0151369709694237, -1.75843588947322, 3.38289968714263, -0.0849746455199414, -0.32043152093014, 0.616449936215725, -0.280533884363842, 0.648220973134393},
    {-0.21843793762351, 0.264871803916117, -0.720643717372979, 0.446752557129661, 0.100429811620991, -0.0384381926574378, -0.0198471310498723, 0.123642391765631, 1.17789027189967, -3.1829751970305, -0.100429811620991, 0.0628271254006754, 0.141404732565693, -0.123642391765631, 0.202561688048966, 0.399851627014656, -0.648847181356231, 0.0922744540166119, -0.405965739936153, 0.487417422133699, -0.657427235204758, 0.405965739936154, -0.487417422133699, -2.46986524610629, 2.0126186915796, 2.73622263990085, -0.131739379500631, 0.107350446757391, -0.121557601515821, 0.565152781188149},
    {-0.18467858359371, -0.251073694749742, 1.42005757838021, -3.41840414528316, 5.48363837580173, 0.020801198077205, 0.021864140587587, 0.0578933212354521, 0.629994022019076, -0.220588521013087, -5.48363837580173, 0.00922823879748434, 0.00141088596622, -0.0578933212354524, 0.297391457743572, 0.128843568956242, 0.00951725164363658, -0.146013613671039, -0.283046250318974, 0.648232493476423, -0.00942221156966278, 0.283046250318973, -0.648232493476424, -1.64144193860881, -0.408609661790477, 3.63899266629625, -0.024044066534391, -0.00598537034030139, -0.0232750265538071, 0.155435825240703},
    {0.259550726522875, 0.354977542438393, -0.12607184712706, -0.127686775663472, 0.188263646324617, -0.684720873388751, 0.0461731769957383, -0.035672906261683, -0.147079344555396, 0.420321814372865, -0.188263646324617, -0.798816702986173, -0.151993763092264, 0.0356729062616838, -0.850439221133414, 1.49487592151293, -1.25896496934079, 0.333844449306827, 0.0219392102667148, -0.329513039020354, -1.09895565865634, -0.0219392102667147, 0.329513039020354, -0.343434950077882, 0.616586141760339, -0.292635038709393, -1.86526242240701, 3.34879999878193, 0.105820586096524, 0.765111209349511},
    {-0.0203093940389605, 0.336177667614903, -0.493827561454052, -0.0197421530236543, 0.0303348329193274, -0.436264187114288, -0.0599943369546786, 0.101992726716842, 0.204474492569863, 0.0849137322354289, -0.0303348329193269, 0.180639772360898, 0.258043945749361, -0.101992726716841, -0.0896333311601747, 0.705804384920304, -0.932039327336072, 0.730119212768748, -0.252432942684714, -0.0733845311844313, -3.14034377398974, 0.252432942684714, 0.073384531184431, -1.36743463747884, 1.65678770636303, -0.065171579211773, -1.2080386092568, 1.46366302401019, -0.198049608794684, 2.410224561221},
    {-0.350400156294149, 0.118117019922264, -0.177195303849183, -0.172212629272512, 0.100429811620989, -0.0458205299922574, 0.0193935204939743, 0.243015108355065, 1.3618387575883, -1.92634217405987, -0.10042981162099, 0.35215478221592, 0.216932733614566, -0.243015108355065, 0.346076228564297, 0.221335698879861, -0.335128791072274, -0.172442766121869, -1.02908287239904, 2.36301563150651, -1.92891644704204, 1.02908287239904, -2.36301563150651, -1.91065894472384, 0.726015490984721, 2.09855480333238, -0.494072944259334, 0.187738692035669, -0.236326254108542, 2.10135921316391},
    {-0.022384432501823, -0.394442721463882, 2.00482142866546, -4.2415863458704, 5.48363837580173, 0.142371689060033, 0.106768804513666, 0.206913148841661, -0.203161865393724, 1.45064915099943, -5.48363837580173, -0.0144274684593492, -0.0365156012376737, -0.206913148841661, 0.243308032812255, 0.113168827781305, 0.0603502933721433, -0.878342306011242, -1.11394684744787, 3.14265236607618, 0.30039858123898, 1.11394684744787, -3.14265236607618, -1.26341639577569, -0.538243167496053, 2.79093719487097, -0.0897210712539451, -0.0382231493467421, -0.0702532032759927, 0.577943724772263},
    {-0.309054780062582, 0.192468191903715, -0.0410587679977578, -0.00719806234883551, 0.188263646324617, -0.470084531217962, 0.124858651024475, 0.399877762194954, 0.127851137302472, 0.175703701153111, -0.188263646324617, 1.46377606721657, -3.04778231179647, -0.399877762194953, 0.303610930774563, 0.283345862156071, -0.470370204771768, 0.0396723967622819, 1.05239842018011, -0.694619865554743, -0.9683976891193, -1.05239842018011, 0.694619865554741, -0.202553646832508, 0.115761277527793, -0.168505638804277, -2.31905000468952, 1.32535846869092, 2.92292366077199, 0.928725292357021},
    {-0.358579623296543, 0.0579729019650724, 0.00912774663570477, 0.00709140647947744, 0.0303348329193272, 0.0169985708549927, -0.225153425141061, -0.205061948774459, 0.593144251553414, 0.0304358104778523, -0.0303348329193262, 1.10461047941694, -0.96634243092197, 0.205061948774459, 0.358045759337144, 0.191015058321398, -0.248454096327071, -0.552848630266707, 2.63740280717403, -0.15469601244514, -2.3727868628652, -2.63740280717403, 0.154696012445138, -0.802507851657443, 0.200235853468324, -0.0375272169573306, -1.49450758467877, 0.372898534406836, 1.19149585606303, 2.92563549313191},
    {-0.209120412751909, -0.225565484443056, 0.852939205087349, -1.03626557791776, 0.100429811620988, 0.464943919745672, -0.0673640447405833, -0.0835461193906452, 0.499560744523661, -0.17212805553388, -0.100429811620989, 0.272314520571382, -0.011189450157549, 0.0835461193906451, 0.306151380564781, 0.131747006670728, -0.00321249004054464, -2.1873871201729, 0.594040120357493, 4.98128269867774, -0.36333416811139, -0.594040120357494, -4.98128269867774, -1.11337204988317, -0.23912789972784, 1.20839363345164, -0.60690792722436, -0.130350513092696, 0.0785534948981309, 2.55072128828429},
    {0.31247810905761, -0.625377600303053, 2.89580215412672, -5.3907188388044, 5.48363837580173, 0.433502317612513, 0.193465923707232, 0.253349046363802, -1.67399695237152, 3.78363632073527, -5.48363837580173, -0.250597768737482, -0.135789811647017, -0.253349046363801, 0.148831317371497, 0.0822068461045178, 0.0818613277694265, -2.35318875945021, -1.58820369192583, 6.62477202874601, 1.65165550755686, 1.58820369192582, -6.62477202874601, -0.731125720593619, -0.490679481161581, 1.60708251806913, -0.109449705979321, -0.0734548428957132, -0.0576761120602167, 0.701533251893343},
    {0.0441090754128556, -0.445188683796847, 0.134404752307831, 0.101468432469219, 0.188263646324619, 2.26827762800339, -4.83151020970037, 6.32404851007064, -0.0313921455951207, -0.0449127549558019, -0.188263646324618, -0.529788570164161, 2.13856101680234, -6.32404851007064, 0.222931063779604, 0.107276036738668, 0.0708725078657185, -0.824356988032234, 2.8888773474867, -1.02390281648172, 0.364883368143326, -2.8888773474867, 1.02390281648172, -0.0694350754822939, -0.033577531230417, -0.056555677513419, -1.17181889487425, -0.566670162964976, 2.69294919289803, 0.459473619888912},
    {0.182854617686687, -0.542293065584035, 0.773943947209457, 0.0312920869787622, 0.030334832919328, 2.12456429902516, -3.0518162226727, 1.75409916439269, -0.339061320545858, -0.018696798208156, -0.0303348329193257, -0.930761949117098, 1.82343837029521, -1.7540991643927, 0.18314466432404, 0.0947102842061117, 0.0815834993671955, -3.59600200175509, 8.10128917326997, -0.22802930163043, 2.14858548196461, -8.10128917326997, 0.228029301630427, -0.273919857107423, -0.160962769556178, -0.01259528877061, -0.751941211379491, -0.441861138528573, 1.22837785237749, 1.44741651979049},
    {0.430953001399549, -0.696647594003243, 2.0533274054127, -1.81553861257371, 0.100429811620989, 1.64987954111948, -0.903840971932118, -0.247959121416689, -1.39647055428432, 1.4099645253935, -0.10042981162099, -1.1220851536954, 0.701931480936604, 0.247959121416687, 0.11952957424144, 0.0699674764905225, 0.0761975418717302, -5.6490004089677, 4.5493068256278, 7.34264831426108, 4.38706735588881, -4.5493068256278, -7.34264831426108, -0.377669359466569, -0.279187491661809, 0.405574087180217, -0.303463026816397, -0.224331360607687, 0.201909490995513, 1.2619330530789},
    {0.736873916833949, -0.866122121955717, 3.77398544236568, -6.42709973003853, 5.48363837580173, 0.832787687104739, 0.193263351160877, 0.180795646006106, -3.30810129762872, 5.88771338502163, -5.48363837580173, -0.729983215471419, -0.177043964970059, -0.180795646006106, 0.0514183350265477, 0.0345962863875473, 0.0432335837076707, -4.1355822347652, -1.33070830716114, 9.7652299842665, 3.78850864328176, 1.33070830716113, -9.7652299842665, -0.246484968115443, -0.21939917662152, 0.539386345016908, -0.0543906831750436, -0.0484137884582802, -0.0162193861908188, 0.347073591483441},
    {-0.242112183715198, -0.26052963780404, 0.635906402027003, -0.595554242297344, 0.188263646324619, 0.712398674345031, -0.647875223764909, 0.202156726410701, 0.116156852148899, 0.213998984901444, -0.188263646324619, 0.130129193892682, 0.23279934954986, -0.202156726410702, 1.32090256637379, -3.78990513748002, 2.97164439262547, 0.32118408393819, -0.0660004964643376, -0.0679684018579034, -0.115410256610945, 0.0660004964643376, 0.067968401857903, -1.19207456847751, 0.440011314301604, 0.3815552573959, -1.33546751471099, 0.492939646473272, 0.415075874215049, -0.205773827327245},
    {-0.347940059792458, -0.302516099307214, 0.993419927901683, -0.123939045497018, 0.0303348329193271, 0.181026251980788, -0.409170307741553, 0.174901641144901, 0.631043869767726, 0.0389643999770744, -0.0303348329193269, 0.114992163304793, 0.128636423377714, -0.174901641144901, 1.30691649351696, -1.73295958391655, 1.07649924949926, 0.945457179489708, -0.274237126395048, -0.0151369709694242, -0.297236206355324, 0.274237126395049, 0.0151369709694236, -3.38289968714263, 1.75843588947322, 0.084974645519945, -0.616449936215725, 0.320431520930142, 0.280533884363838, -0.648220973134383},
    {-0.264871803916117, 0.218437937623509, -1.17789027189967, 3.1829751970305, 0.10042981162099, -0.0628271254006756, -0.141404732565692, 0.123642391765631, 0.72064371737298, -0.446752557129664, -0.10042981162099, 0.0384381926574363, 0.0198471310498727, -0.12364239176563, 0.648847181356229, -0.399851627014656, -0.202561688048966, 0.657427235204752, -0.405965739936154, 0.487417422133696, -0.0922744540166155, 0.405965739936154, -0.487417422133698, -2.0126186915796, 2.46986524610628, -2.73622263990083, -0.107350446757391, 0.131739379500628, 0.121557601515818, -0.565152781188134},
    {0.251073694749743, 0.18467858359371, -0.629994022019075, 0.220588521013079, 5.48363837580173, -0.00922823879748481, -0.0014108859662173, 0.0578933212354522, -1.42005757838021, 3.41840414528316, -5.48363837580173, -0.0208011980772077, -0.0218641405875853, -0.0578933212354523, -0.00951725164364065, -0.128843568956239, -0.297391457743575, 0.00942221156965246, -0.283046250318971, 0.648232493476411, 0.146013613671035, 0.283046250318972, -0.648232493476412, 0.408609661790477, 1.6414419386088, -3.63899266629623, 0.00598537034030171, 0.0240440665343883, 0.0232750265538012, -0.155435825240686},
    {-0.354977542438393, -0.259550726522875, 0.147079344555396, -0.420321814372864, 0.188263646324618, 0.798816702986174, 0.151993763092262, -0.0356729062616828, 0.126071847127061, 0.127686775663473, -0.188263646324618, 0.684720873388751, -0.0461731769957399, 0.0356729062616823, 1.25896496934079, -1.49487592151293, 0.850439221133414, 1.09895565865634, 0.0219392102667142, -0.329513039020353, -0.333844449306824, -0.0219392102667134, 0.329513039020352, -0.61658614176034, 0.343434950077883, 0.292635038709392, -3.34879999878193, 1.86526242240701, -0.105820586096523, -0.765111209349515},
    {-0.336177667614903, 0.0203093940389601, -0.204474492569863, -0.0849137322354258, 0.0303348329193272, -0.180639772360899, -0.258043945749362, 0.101992726716842, 0.493827561454051, 0.019742153023655, -0.0303348329193269, 0.436264187114288, 0.0599943369546767, -0.101992726716842, 0.932039327336073, -0.705804384920305, 0.0896333311601748, 3.14034377398975, -0.252432942684713, -0.0733845311844317, -0.73011921276875, 0.252432942684714, 0.07338453118443, -1.65678770636303, 1.36743463747884, 0.065171579211774, -1.46366302401019, 1.2080386092568, 0.198049608794683, -2.41022456122099},
    {-0.118117019922264, 0.350400156294148, -1.3618387575883, 1.92634217405987, 0.100429811620989, -0.35215478221592, -0.216932733614568, 0.243015108355065, 0.177195303849181, 0.172212629272514, -0.10042981162099, 0.0458205299922559, -0.0193935204939757, -0.243015108355065, 0.335128791072273, -0.221335698879862, -0.346076228564296, 1.92891644704204, -1.02908287239904, 2.36301563150651, 0.17244276612187, 1.02908287239904, -2.36301563150651, -0.726015490984719, 1.91065894472384, -2.09855480333238, -0.187738692035669, 0.49407294425933, 0.23632625410854, -2.10135921316391},
    {0.394442721463883, 0.0223844325018236, 0.203161865393723, -1.45064915099943, 5.48363837580173, 0.0144274684593476, 0.0365156012376761, 0.206913148841661, -2.00482142866547, 4.2415863458704, -5.48363837580173, -0.142371689060037, -0.106768804513664, -0.20691314884166, -0.0603502933721472, -0.113168827781303, -0.243308032812257, -0.300398581238984, -1.11394684744787, 3.14265236607617, 0.878342306011245, 1.11394684744787, -3.14265236607617, 0.538243167496056, 1.26341639577568, -2.79093719487096, 0.0382231493467435, 0.0897210712539433, 0.0702532032759865, -0.577943724772261},
    {-0.192468191903715, 0.309054780062581, -0.127851137302471, -0.175703701153113, 0.188263646324618, -1.46377606721656, 3.04778231179647, 0.399877762194954, 0.0410587679977578, 0.00719806234883299, -0.188263646324617, 0.47008453121796, -0.124858651024477, -0.399877762194952, 0.470370204771766, -0.283345862156071, -0.303610930774563, 0.968397689119297, 1.0523984201801, -0.69461986555474, -0.0396723967622846, -1.05239842018011, 0.694619865554738, -0.115761277527792, 0.202553646832505, 0.168505638804279, -1.32535846869091, 2.31905000468952, -2.92292366077199, -0.928725292357011},
    {-0.0579729019650721, 0.358579623296543, -0.593144251553415, -0.0304358104778481, 0.0303348329193269, -1.10461047941694, 0.966342430921967, -0.205061948774459, -0.00912774663570706, -0.00709140647947536, -0.030334832919326, -0.0169985708549942, 0.22515342514106, 0.20506194877446, 0.24845409632707, -0.191015058321399, -0.358045759337144, 2.3727868628652, 2.63740280717403, -0.15469601244514, 0.552848630266711, -2.63740280717403, 0.154696012445137, -0.200235853468324, 0.802507851657443, 0.0375272169573255, -0.372898534406834, 1.49450758467877, -1.19149585606303, -2.92563549313191},
    {0.225565484443058, 0.209120412751909, -0.499560744523665, 0.17212805553389, 0.100429811620989, -0.272314520571384, 0.0111894501575473, -0.0835461193906456, -0.852939205087356, 1.03626557791777, -0.10042981162099, -0.464943919745676, 0.0673640447405816, 0.0835461193906459, 0.0032124900405426, -0.131747006670731, -0.306151380564781, 0.363334168111402, 0.594040120357492, 4.98128269867774, 2.18738712017292, -0.594040120357492, -4.98128269867774, 0.239127899727848, 1.11337204988317, -1.20839363345165, 0.1303505130927, 0.606907927224358, -0.0785534948981326, -2.55072128828432},
    {0.625377600303054, -0.312478109057611, 1.67399695237152, -3.78363632073527, 5.48363837580173, 0.250597768737479, 0.135789811647019, 0.253349046363801, -2.89580215412672, 5.3907188388044, -5.48363837580173, -0.433502317612517, -0.193465923707231, -0.253349046363801, -0.0818613277694286, -0.0822068461045188, -0.148831317371498, -1.65165550755686, -1.58820369192583, 6.62477202874601, 2.35318875945022, 1.58820369192582, -6.62477202874601, 0.490679481161584, 0.731125720593618, -1.60708251806913, 0.0734548428957155, 0.10944970597932, 0.05767611206021, -0.701533251893363},
    {0.445188683796849, -0.0441090754128549, 0.0313921455951215, 0.0449127549557941, 0.188263646324619, 0.529788570164156, -2.13856101680233, 6.32404851007064, -0.134404752307832, -0.101468432469227, -0.188263646324618, -2.2682776280034, 4.83151020970039, -6.32404851007064, -0.0708725078657231, -0.107276036738665, -0.222931063779607, -0.364883368143318, 2.8888773474867, -1.02390281648172, 0.824356988032241, -2.88887734748669, 1.02390281648171, 0.0335775312304197, 0.0694350754822899, 0.0565556775134313, 0.566670162964987, 1.17181889487425, -2.69294919289805, -0.459473619888922},
    {0.542293065584037, -0.182854617686686, 0.339061320545854, 0.0186967982081598, 0.0303348329193275, 0.930761949117092, -1.8234383702952, 1.75409916439269, -0.773943947209461, -0.0312920869787595, -0.0303348329193252, -2.12456429902517, 3.0518162226727, -1.7540991643927, -0.0815834993671965, -0.0947102842061153, -0.18314466432404, -2.14858548196459, 8.10128917326997, -0.22802930163043, 3.59600200175511, -8.10128917326997, 0.228029301630425, 0.16096276955618, 0.273919857107423, 0.0125952887705972, 0.441861138528581, 0.751941211379492, -1.2283778523775, -1.44741651979051},
    {0.696647594003245, -0.430953001399548, 1.39647055428431, -1.40996452539348, 0.100429811620989, 1.12208515369539, -0.701931480936605, -0.247959121416689, -2.0533274054127, 1.81553861257373, -0.10042981162099, -1.64987954111949, 0.903840971932117, 0.247959121416688, -0.0761975418717284, -0.0699674764905329, -0.119529574241437, -4.38706735588879, 4.54930682562779, 7.34264831426108, 5.64900040896773, -4.54930682562779, -7.34264831426108, 0.279187491661816, 0.377669359466572, -0.405574087180241, 0.224331360607692, 0.303463026816398, -0.201909490995514, -1.26193305307895},
    {0.866122121955717, -0.736873916833949, 3.30810129762871, -5.88771338502162, 5.48363837580173, 0.729983215471414, 0.177043964970061, 0.180795646006106, -3.77398544236569, 6.42709973003854, -5.48363837580173, -0.832787687104745, -0.193263351160875, -0.180795646006106, -0.0432335837076706, -0.0345962863875538, -0.0514183350265469, -3.78850864328173, -1.33070830716114, 9.7652299842665, 4.13558223476523, 1.33070830716113, -9.7652299842665, 0.219399176621527, 0.246484968115448, -0.539386345016921, 0.0484137884582833, 0.0543906831750452, 0.0162193861908132, -0.347073591483491},
    {0.262326815091423, 2.61665455821179, 1.99429993054148, -0.887996330144, 0.188263646324617, 2.23419141910733, -0.966009105862811, 0.202156726410702, -0.0894026163922201, -0.0784431029452162, -0.188263646324618, -0.100156729351647, -0.0853345325480402, -0.202156726410704, -1.32058092276085, 2.85692904038521, -4.41532949092758, 0.478898927388324, -0.0660004964643308, -0.0679684018578983, 0.0423045868392042, 0.0660004964643307, 0.0679684018578974, 0.577437897119222, -2.48233521126849, 0.966439433089214, 0.646897076539972, -2.78093176629566, 1.05134363841085, -0.521203514227527},
    {0.382897749059931, 0.0971243045950525, 4.70183916807172, -0.189067653393769, 0.0303348329193261, 0.856794088890811, -0.624184812888228, 0.174901641144902, -0.587242812072384, -0.026164207919675, -0.030334832919327, -0.107010502091159, -0.0863780817689607, -0.174901641144903, -1.45263629566988, 1.99327297180224, -1.02065872978734, 1.44228454877614, -0.274237126395051, -0.0151369709694282, 0.199591162931095, 0.27423712639505, 0.015136970969426, 2.76209291670762, -6.87668927270696, 0.21523186131344, 0.503323231486202, -1.25310681828585, 0.710562894657191, -1.64187571170723},
    {0.582912531849485, -0.157576792955305, 0.61933354905463, 5.28014630426965, 0.100429811620991, 0.0330344408809329, -0.234572257037862, 0.123642391765631, -1.77749109602364, 1.65041855010949, -0.10042981162099, -0.0948090485613351, -0.0733203934222981, -0.123642391765631, -1.31879316763074, 0.616061333083654, 0.277396095652902, 1.09058719324332, -0.405965739936155, 0.487417422133686, 0.340885504021947, 0.405965739936156, -0.487417422133689, 4.78087475616792, -3.62271720919892, -6.93056485437915, 0.255005601961757, -0.193230994281356, 0.307892650460159, -1.43147269726527},
    {0.812452135616643, 0.332272064837323, -1.61056772993437, 3.00968549284729, 5.48363837580173, -0.023591816893318, -0.0192499727777459, 0.057893321235452, -3.58199787646156, 6.20750111711737, -5.48363837580173, -0.052469595933848, -0.0397032273991157, -0.0578933212354518, -0.740550435761513, -0.203319042077584, -0.20085472261487, 0.128555617225731, -0.28304625031897, 0.648232493476397, 0.265147019327118, 0.283046250318971, -0.6482324934764, 3.75191655003789, 1.44064905635804, -9.21718660996466, 0.0549585879577476, 0.0211028248694166, 0.0589532001768598, -0.393702636552851},
    {0.404206071679303, -0.0875743252958643, 0.816407479188928, -0.644611219481137, 0.188263646324618, 4.43406878641155, 0.23309969083241, -0.0356729062616837, -0.124544170479947, -0.0966026294448017, -0.188263646324618, -0.676423762559445, 0.034932750744406, 0.03567290626168, -1.45782934109754, 1.83313825823764, -0.691940663523537, 1.68537326176878, 0.021939210266713, -0.329513039020354, 0.252573153805602, -0.0219392102667116, 0.329513039020352, 0.553974028087207, -1.24583733679619, 0.741213848925939, 3.00874135653984, -6.76638638039195, -0.268032441576813, -1.93794641557438},
    {0.507063488468923, -0.347307955877069, 1.46628619271141, -0.134864328704811, 0.0303348329193275, 1.29536745996238, -0.409838580918112, 0.101992726716842, -0.733385228998834, -0.0302084434457282, -0.0303348329193279, -0.647897638253978, -0.0918002982140735, -0.101992726716843, -1.41539413984104, 1.09172173126642, 0.163916875982768, 4.98765445625719, -0.252432942684713, -0.0733845311844333, 1.11719146949869, 0.252432942684715, 0.0733845311844297, 2.46839855982401, -3.2012995235366, 0.165072772150541, 2.18066785904962, -2.82813768075802, 0.501638879132185, -6.10484592575588},
    {0.671962873295984, 0.161328789785951, -1.00650376582928, 3.5347743375574, 0.100429811620991, -0.260269516108358, -0.39806440936755, 0.243015108355065, -1.9940738062327, 1.78064479277004, -0.100429811620991, -0.515643003287643, -0.20052519624696, -0.243015108355065, -1.14229880613047, 0.174208449362687, 0.13479869368585, 3.53949804355199, -1.02908287239904, 2.3630156315065, 1.78302436263182, 1.02908287239904, -2.3630156315065, 3.97185772093805, -0.971280148876076, -5.31541913032743, 1.02707364063169, -0.25116112123569, 0.598589605614507, -5.32252240618381},
    {0.854659261789438, 0.219620965508789, -0.830265560700903, 0.688457792218683, 5.48363837580173, -0.0589610169540351, -0.0173297934874926, 0.20691314884166, -3.73314907767068, 6.38069328908852, -5.48363837580173, -0.265108269545325, -0.160614199238834, -0.20691314884166, -0.593070039407509, -0.23114242368028, -0.250067764210439, 0.142564964025185, -1.11394684744787, 3.14265236607616, 1.32130585127542, 1.11394684744787, -3.14265236607616, 2.96147103941185, 1.60194359895973, -7.0691510813072, 0.210307824903936, 0.113761461595422, 0.177943992726325, -1.4638708153006},
    {0.631960136631529, 0.0209772079821636, -0.0418596436277123, -0.30485443324413, 0.188263646324619, -0.479253808900424, 5.28804995692452, 0.399877762194955, -0.177976321311655, -0.121952669742183, -0.188263646324619, -2.03766259075905, 2.11540899410358, -0.399877762194954, -1.22959495958749, 0.355221908876292, 0.221435706097505, 1.6802169034227, 1.0523984201801, -0.694619865554741, 0.672146817541106, -1.0523984201801, 0.69461986555474, 0.408300394765787, -0.18846442982642, 0.426807102986314, 4.67465803357924, -2.15774163391977, -7.40345895102811, -2.35236372096381},
    {0.699938941386467, 0.244720001995118, -0.574312506192718, -0.059198453542908, 0.0303348329193271, -1.06954018544265, 1.87956149697762, -0.205061948774459, -0.951179273079121, -0.0358540495445346, -0.0303348329193266, -1.77137785639109, 1.13837249119671, 0.20506194877446, -1.07382094625645, 0.0659398754896088, 0.0632221273852586, 4.61513298523044, 2.63740280717403, -0.154696012445141, 2.79519475263195, -2.63740280717402, 0.154696012445136, 1.7026989447792, -0.177207165507365, 0.0950525030874462, 3.17093033063965, -0.330012288805905, -3.01793398817433, -7.41032773786239},
    {0.804449259426939, 0.343330389268093, -1.11730697889861, 1.09829838147578, 0.10042981162099, -0.609052888212724, 0.07139658296564, -0.0835461193906463, -2.30843348521194, 1.96243590385966, -0.10042981162099, -1.2583453857965, 0.127571177548674, 0.0835461193906465, -0.767179834630477, -0.193403705764152, -0.187196108300406, 2.31832822100891, 0.594040120357493, 4.98128269867773, 4.14238117307043, -0.59404012035749, -4.98128269867774, 2.53237022560206, 0.893370238508482, -3.06073428533543, 1.38041507755301, 0.486983196456213, -0.198967760514319, -6.46070939407935},
    {0.915095482842409, -0.119021627700702, 0.852751660911764, -2.55189188053655, 5.48363837580173, 0.12765714012139, 0.0915840975261275, 0.253349046363801, -3.94745604157909, 6.62246327900312, -5.48363837580173, -0.590935171541135, -0.237671637828123, -0.253349046363801, -0.362001087273821, -0.19762449335689, -0.236448274510997, -1.11396707344187, -1.58820369192583, 6.624772028746, 2.89087719356521, 1.58820369192582, -6.624772028746, 1.77274196460656, 1.32196241606076, -4.07057139846657, 0.265379922136861, 0.197898109282882, 0.146087540301993, -1.77691012012335},
    {0.868638985211497, 0.160775122870768, -0.0303812937688834, 0.00156579513538001, 0.188263646324619, -0.512728960713625, -0.074556736502452, 6.32404851007064, -0.230538830650147, -0.144815392289642, -0.188263646324618, -3.89068141543178, 6.89551449000027, -6.32404851007064, -0.541666720282035, -0.231154317866364, -0.256593069933868, -0.012720943157115, 2.88887734748669, -1.02390281648172, 1.17651941301844, -2.88887734748669, 1.02390281648171, 0.164072248551043, 0.0968478758679861, 0.14324959715426, 2.76896020694398, 1.63445016920143, -6.82095775349782, -1.16379846986132},
    {0.89423907165541, 0.0231092835261113, 0.0598673982106481, 0.00904317013277818, 0.0303348329193271, 0.164342827891446, -0.881951188948034, 1.75409916439269, -1.16137946239125, -0.0409457150541417, -0.0303348329193251, -3.18811892297117, 3.99330340401987, -1.7540991643927, -0.444322813651633, -0.219105772638565, -0.253919768891325, -1.03921665313447, 8.10128917326996, -0.22802930163043, 4.70537083058524, -8.10128917326996, 0.228029301630425, 0.656639877584547, 0.444872186596048, 0.0319025449213622, 1.80255126519495, 1.22122482988478, -3.11135221507184, -3.66615417745077},
    {0.932314949394835, -0.25757029285913, 0.940209564617411, -1.09911326458011, 0.100429811620989, 0.755472566595068, -0.547178448555988, -0.247959121416689, -2.60395904918184, 2.1263898733871, -0.10042981162099, -2.09232037220804, 1.05859400431273, 0.247959121416688, -0.292033016942679, -0.171915883982984, -0.210795755610044, -3.41986187355892, 4.54930682562779, 7.34264831426107, 6.61620589129761, -4.54930682562779, -7.34264831426108, 0.92418978953319, 0.739559695031237, -1.02727660880698, 0.742600435684469, 0.594247369928498, -0.511415555756749, -3.19634401773869},
    {0.971133168652245, -0.643627477463275, 2.96400307709653, -5.47430204856334, 5.48363837580173, 0.65405267318659, 0.164612656347541, 0.180795646006105, -4.14403873378693, 6.84051106649682, -5.48363837580173, -0.914445613287686, -0.205694659783395, -0.180795646006106, -0.12781101859627, -0.0872281173292636, -0.112466555263438, -3.5224949433983, -1.33070830716114, 9.7652299842665, 4.40159593464866, 1.33070830716113, -9.7652299842665, 0.615407538931827, 0.564628117758577, -1.36620901793347, 0.135799098539343, 0.12459384156175, 0.0410820034358526, -0.879100991250366}};
    // Array of non-zero columns
    static const unsigned int nzc1[30] = {0, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34};
    
    // Number of operations to compute geometry constants: 36
    const double G0 = det*(Jinv_00*Jinv_20 + Jinv_01*Jinv_21 + Jinv_02*Jinv_22);
    const double G1 = det*(Jinv_20*Jinv_20 + Jinv_21*Jinv_21 + Jinv_22*Jinv_22);
    const double G2 = det*(Jinv_00*Jinv_00 + Jinv_01*Jinv_01 + Jinv_02*Jinv_02);
    const double G3 = det*(Jinv_00*Jinv_10 + Jinv_01*Jinv_11 + Jinv_02*Jinv_12);
    const double G4 = det*(Jinv_10*Jinv_10 + Jinv_11*Jinv_11 + Jinv_12*Jinv_12);
    const double G5 = det*(Jinv_10*Jinv_20 + Jinv_11*Jinv_21 + Jinv_12*Jinv_22);
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('simplify expressions', True), ('ignore zero tables', True), ('non zero columns', True), ('remove zero terms', True), ('ignore ones', True)
    // Total number of operations to compute element tensor: 1555620
    
    // Loop quadrature points for integral
    // Number of operations to compute element tensor for following IP loop = 1555584
    for (unsigned int ip = 0; ip < 64; ip++)
    {
      
      // Number of operations to compute ip constants: 6
      // Number of operations: 1
      const double Gip0 = W64[ip]*G0;
      
      // Number of operations: 1
      const double Gip1 = W64[ip]*G1;
      
      // Number of operations: 1
      const double Gip2 = W64[ip]*G2;
      
      // Number of operations: 1
      const double Gip3 = W64[ip]*G3;
      
      // Number of operations: 1
      const double Gip4 = W64[ip]*G4;
      
      // Number of operations: 1
      const double Gip5 = W64[ip]*G5;
      
      
      // Number of operations for primary indices = 24300
      for (unsigned int j = 0; j < 30; j++)
      {
        for (unsigned int k = 0; k < 30; k++)
        {
          // Number of operations to compute entry = 3
          A[nzc0[j]*35 + nzc1[k]] += FE0_D001[ip][j]*FE0_D100[ip][k]*Gip0;
          // Number of operations to compute entry = 3
          A[nzc0[j]*35 + nzc0[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*Gip1;
          // Number of operations to compute entry = 3
          A[nzc1[j]*35 + nzc0[k]] += FE0_D001[ip][k]*FE0_D100[ip][j]*Gip0;
          // Number of operations to compute entry = 3
          A[nzc1[j]*35 + nzc1[k]] += FE0_D100[ip][j]*FE0_D100[ip][k]*Gip2;
          // Number of operations to compute entry = 3
          A[nzc1[j]*35 + nzc2[k]] += FE0_D010[ip][k]*FE0_D100[ip][j]*Gip3;
          // Number of operations to compute entry = 3
          A[nzc2[j]*35 + nzc2[k]] += FE0_D010[ip][j]*FE0_D010[ip][k]*Gip4;
          // Number of operations to compute entry = 3
          A[nzc2[j]*35 + nzc1[k]] += FE0_D010[ip][j]*FE0_D100[ip][k]*Gip3;
          // Number of operations to compute entry = 3
          A[nzc2[j]*35 + nzc0[k]] += FE0_D001[ip][k]*FE0_D010[ip][j]*Gip5;
          // Number of operations to compute entry = 3
          A[nzc0[j]*35 + nzc2[k]] += FE0_D001[ip][j]*FE0_D010[ip][k]*Gip5;
        }// end loop over 'k'
      }// end loop over 'j'
    }// end loop over 'ip'
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class poisson3d_4_0_cell_integral_0: public ufc::cell_integral
{
private:

  poisson3d_4_0_cell_integral_0_quadrature integral_0_quadrature;

public:

  /// Constructor
  poisson3d_4_0_cell_integral_0() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~poisson3d_4_0_cell_integral_0()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Reset values of the element tensor block
    A[0] = 0;
    A[1] = 0;
    A[2] = 0;
    A[3] = 0;
    A[4] = 0;
    A[5] = 0;
    A[6] = 0;
    A[7] = 0;
    A[8] = 0;
    A[9] = 0;
    A[10] = 0;
    A[11] = 0;
    A[12] = 0;
    A[13] = 0;
    A[14] = 0;
    A[15] = 0;
    A[16] = 0;
    A[17] = 0;
    A[18] = 0;
    A[19] = 0;
    A[20] = 0;
    A[21] = 0;
    A[22] = 0;
    A[23] = 0;
    A[24] = 0;
    A[25] = 0;
    A[26] = 0;
    A[27] = 0;
    A[28] = 0;
    A[29] = 0;
    A[30] = 0;
    A[31] = 0;
    A[32] = 0;
    A[33] = 0;
    A[34] = 0;
    A[35] = 0;
    A[36] = 0;
    A[37] = 0;
    A[38] = 0;
    A[39] = 0;
    A[40] = 0;
    A[41] = 0;
    A[42] = 0;
    A[43] = 0;
    A[44] = 0;
    A[45] = 0;
    A[46] = 0;
    A[47] = 0;
    A[48] = 0;
    A[49] = 0;
    A[50] = 0;
    A[51] = 0;
    A[52] = 0;
    A[53] = 0;
    A[54] = 0;
    A[55] = 0;
    A[56] = 0;
    A[57] = 0;
    A[58] = 0;
    A[59] = 0;
    A[60] = 0;
    A[61] = 0;
    A[62] = 0;
    A[63] = 0;
    A[64] = 0;
    A[65] = 0;
    A[66] = 0;
    A[67] = 0;
    A[68] = 0;
    A[69] = 0;
    A[70] = 0;
    A[71] = 0;
    A[72] = 0;
    A[73] = 0;
    A[74] = 0;
    A[75] = 0;
    A[76] = 0;
    A[77] = 0;
    A[78] = 0;
    A[79] = 0;
    A[80] = 0;
    A[81] = 0;
    A[82] = 0;
    A[83] = 0;
    A[84] = 0;
    A[85] = 0;
    A[86] = 0;
    A[87] = 0;
    A[88] = 0;
    A[89] = 0;
    A[90] = 0;
    A[91] = 0;
    A[92] = 0;
    A[93] = 0;
    A[94] = 0;
    A[95] = 0;
    A[96] = 0;
    A[97] = 0;
    A[98] = 0;
    A[99] = 0;
    A[100] = 0;
    A[101] = 0;
    A[102] = 0;
    A[103] = 0;
    A[104] = 0;
    A[105] = 0;
    A[106] = 0;
    A[107] = 0;
    A[108] = 0;
    A[109] = 0;
    A[110] = 0;
    A[111] = 0;
    A[112] = 0;
    A[113] = 0;
    A[114] = 0;
    A[115] = 0;
    A[116] = 0;
    A[117] = 0;
    A[118] = 0;
    A[119] = 0;
    A[120] = 0;
    A[121] = 0;
    A[122] = 0;
    A[123] = 0;
    A[124] = 0;
    A[125] = 0;
    A[126] = 0;
    A[127] = 0;
    A[128] = 0;
    A[129] = 0;
    A[130] = 0;
    A[131] = 0;
    A[132] = 0;
    A[133] = 0;
    A[134] = 0;
    A[135] = 0;
    A[136] = 0;
    A[137] = 0;
    A[138] = 0;
    A[139] = 0;
    A[140] = 0;
    A[141] = 0;
    A[142] = 0;
    A[143] = 0;
    A[144] = 0;
    A[145] = 0;
    A[146] = 0;
    A[147] = 0;
    A[148] = 0;
    A[149] = 0;
    A[150] = 0;
    A[151] = 0;
    A[152] = 0;
    A[153] = 0;
    A[154] = 0;
    A[155] = 0;
    A[156] = 0;
    A[157] = 0;
    A[158] = 0;
    A[159] = 0;
    A[160] = 0;
    A[161] = 0;
    A[162] = 0;
    A[163] = 0;
    A[164] = 0;
    A[165] = 0;
    A[166] = 0;
    A[167] = 0;
    A[168] = 0;
    A[169] = 0;
    A[170] = 0;
    A[171] = 0;
    A[172] = 0;
    A[173] = 0;
    A[174] = 0;
    A[175] = 0;
    A[176] = 0;
    A[177] = 0;
    A[178] = 0;
    A[179] = 0;
    A[180] = 0;
    A[181] = 0;
    A[182] = 0;
    A[183] = 0;
    A[184] = 0;
    A[185] = 0;
    A[186] = 0;
    A[187] = 0;
    A[188] = 0;
    A[189] = 0;
    A[190] = 0;
    A[191] = 0;
    A[192] = 0;
    A[193] = 0;
    A[194] = 0;
    A[195] = 0;
    A[196] = 0;
    A[197] = 0;
    A[198] = 0;
    A[199] = 0;
    A[200] = 0;
    A[201] = 0;
    A[202] = 0;
    A[203] = 0;
    A[204] = 0;
    A[205] = 0;
    A[206] = 0;
    A[207] = 0;
    A[208] = 0;
    A[209] = 0;
    A[210] = 0;
    A[211] = 0;
    A[212] = 0;
    A[213] = 0;
    A[214] = 0;
    A[215] = 0;
    A[216] = 0;
    A[217] = 0;
    A[218] = 0;
    A[219] = 0;
    A[220] = 0;
    A[221] = 0;
    A[222] = 0;
    A[223] = 0;
    A[224] = 0;
    A[225] = 0;
    A[226] = 0;
    A[227] = 0;
    A[228] = 0;
    A[229] = 0;
    A[230] = 0;
    A[231] = 0;
    A[232] = 0;
    A[233] = 0;
    A[234] = 0;
    A[235] = 0;
    A[236] = 0;
    A[237] = 0;
    A[238] = 0;
    A[239] = 0;
    A[240] = 0;
    A[241] = 0;
    A[242] = 0;
    A[243] = 0;
    A[244] = 0;
    A[245] = 0;
    A[246] = 0;
    A[247] = 0;
    A[248] = 0;
    A[249] = 0;
    A[250] = 0;
    A[251] = 0;
    A[252] = 0;
    A[253] = 0;
    A[254] = 0;
    A[255] = 0;
    A[256] = 0;
    A[257] = 0;
    A[258] = 0;
    A[259] = 0;
    A[260] = 0;
    A[261] = 0;
    A[262] = 0;
    A[263] = 0;
    A[264] = 0;
    A[265] = 0;
    A[266] = 0;
    A[267] = 0;
    A[268] = 0;
    A[269] = 0;
    A[270] = 0;
    A[271] = 0;
    A[272] = 0;
    A[273] = 0;
    A[274] = 0;
    A[275] = 0;
    A[276] = 0;
    A[277] = 0;
    A[278] = 0;
    A[279] = 0;
    A[280] = 0;
    A[281] = 0;
    A[282] = 0;
    A[283] = 0;
    A[284] = 0;
    A[285] = 0;
    A[286] = 0;
    A[287] = 0;
    A[288] = 0;
    A[289] = 0;
    A[290] = 0;
    A[291] = 0;
    A[292] = 0;
    A[293] = 0;
    A[294] = 0;
    A[295] = 0;
    A[296] = 0;
    A[297] = 0;
    A[298] = 0;
    A[299] = 0;
    A[300] = 0;
    A[301] = 0;
    A[302] = 0;
    A[303] = 0;
    A[304] = 0;
    A[305] = 0;
    A[306] = 0;
    A[307] = 0;
    A[308] = 0;
    A[309] = 0;
    A[310] = 0;
    A[311] = 0;
    A[312] = 0;
    A[313] = 0;
    A[314] = 0;
    A[315] = 0;
    A[316] = 0;
    A[317] = 0;
    A[318] = 0;
    A[319] = 0;
    A[320] = 0;
    A[321] = 0;
    A[322] = 0;
    A[323] = 0;
    A[324] = 0;
    A[325] = 0;
    A[326] = 0;
    A[327] = 0;
    A[328] = 0;
    A[329] = 0;
    A[330] = 0;
    A[331] = 0;
    A[332] = 0;
    A[333] = 0;
    A[334] = 0;
    A[335] = 0;
    A[336] = 0;
    A[337] = 0;
    A[338] = 0;
    A[339] = 0;
    A[340] = 0;
    A[341] = 0;
    A[342] = 0;
    A[343] = 0;
    A[344] = 0;
    A[345] = 0;
    A[346] = 0;
    A[347] = 0;
    A[348] = 0;
    A[349] = 0;
    A[350] = 0;
    A[351] = 0;
    A[352] = 0;
    A[353] = 0;
    A[354] = 0;
    A[355] = 0;
    A[356] = 0;
    A[357] = 0;
    A[358] = 0;
    A[359] = 0;
    A[360] = 0;
    A[361] = 0;
    A[362] = 0;
    A[363] = 0;
    A[364] = 0;
    A[365] = 0;
    A[366] = 0;
    A[367] = 0;
    A[368] = 0;
    A[369] = 0;
    A[370] = 0;
    A[371] = 0;
    A[372] = 0;
    A[373] = 0;
    A[374] = 0;
    A[375] = 0;
    A[376] = 0;
    A[377] = 0;
    A[378] = 0;
    A[379] = 0;
    A[380] = 0;
    A[381] = 0;
    A[382] = 0;
    A[383] = 0;
    A[384] = 0;
    A[385] = 0;
    A[386] = 0;
    A[387] = 0;
    A[388] = 0;
    A[389] = 0;
    A[390] = 0;
    A[391] = 0;
    A[392] = 0;
    A[393] = 0;
    A[394] = 0;
    A[395] = 0;
    A[396] = 0;
    A[397] = 0;
    A[398] = 0;
    A[399] = 0;
    A[400] = 0;
    A[401] = 0;
    A[402] = 0;
    A[403] = 0;
    A[404] = 0;
    A[405] = 0;
    A[406] = 0;
    A[407] = 0;
    A[408] = 0;
    A[409] = 0;
    A[410] = 0;
    A[411] = 0;
    A[412] = 0;
    A[413] = 0;
    A[414] = 0;
    A[415] = 0;
    A[416] = 0;
    A[417] = 0;
    A[418] = 0;
    A[419] = 0;
    A[420] = 0;
    A[421] = 0;
    A[422] = 0;
    A[423] = 0;
    A[424] = 0;
    A[425] = 0;
    A[426] = 0;
    A[427] = 0;
    A[428] = 0;
    A[429] = 0;
    A[430] = 0;
    A[431] = 0;
    A[432] = 0;
    A[433] = 0;
    A[434] = 0;
    A[435] = 0;
    A[436] = 0;
    A[437] = 0;
    A[438] = 0;
    A[439] = 0;
    A[440] = 0;
    A[441] = 0;
    A[442] = 0;
    A[443] = 0;
    A[444] = 0;
    A[445] = 0;
    A[446] = 0;
    A[447] = 0;
    A[448] = 0;
    A[449] = 0;
    A[450] = 0;
    A[451] = 0;
    A[452] = 0;
    A[453] = 0;
    A[454] = 0;
    A[455] = 0;
    A[456] = 0;
    A[457] = 0;
    A[458] = 0;
    A[459] = 0;
    A[460] = 0;
    A[461] = 0;
    A[462] = 0;
    A[463] = 0;
    A[464] = 0;
    A[465] = 0;
    A[466] = 0;
    A[467] = 0;
    A[468] = 0;
    A[469] = 0;
    A[470] = 0;
    A[471] = 0;
    A[472] = 0;
    A[473] = 0;
    A[474] = 0;
    A[475] = 0;
    A[476] = 0;
    A[477] = 0;
    A[478] = 0;
    A[479] = 0;
    A[480] = 0;
    A[481] = 0;
    A[482] = 0;
    A[483] = 0;
    A[484] = 0;
    A[485] = 0;
    A[486] = 0;
    A[487] = 0;
    A[488] = 0;
    A[489] = 0;
    A[490] = 0;
    A[491] = 0;
    A[492] = 0;
    A[493] = 0;
    A[494] = 0;
    A[495] = 0;
    A[496] = 0;
    A[497] = 0;
    A[498] = 0;
    A[499] = 0;
    A[500] = 0;
    A[501] = 0;
    A[502] = 0;
    A[503] = 0;
    A[504] = 0;
    A[505] = 0;
    A[506] = 0;
    A[507] = 0;
    A[508] = 0;
    A[509] = 0;
    A[510] = 0;
    A[511] = 0;
    A[512] = 0;
    A[513] = 0;
    A[514] = 0;
    A[515] = 0;
    A[516] = 0;
    A[517] = 0;
    A[518] = 0;
    A[519] = 0;
    A[520] = 0;
    A[521] = 0;
    A[522] = 0;
    A[523] = 0;
    A[524] = 0;
    A[525] = 0;
    A[526] = 0;
    A[527] = 0;
    A[528] = 0;
    A[529] = 0;
    A[530] = 0;
    A[531] = 0;
    A[532] = 0;
    A[533] = 0;
    A[534] = 0;
    A[535] = 0;
    A[536] = 0;
    A[537] = 0;
    A[538] = 0;
    A[539] = 0;
    A[540] = 0;
    A[541] = 0;
    A[542] = 0;
    A[543] = 0;
    A[544] = 0;
    A[545] = 0;
    A[546] = 0;
    A[547] = 0;
    A[548] = 0;
    A[549] = 0;
    A[550] = 0;
    A[551] = 0;
    A[552] = 0;
    A[553] = 0;
    A[554] = 0;
    A[555] = 0;
    A[556] = 0;
    A[557] = 0;
    A[558] = 0;
    A[559] = 0;
    A[560] = 0;
    A[561] = 0;
    A[562] = 0;
    A[563] = 0;
    A[564] = 0;
    A[565] = 0;
    A[566] = 0;
    A[567] = 0;
    A[568] = 0;
    A[569] = 0;
    A[570] = 0;
    A[571] = 0;
    A[572] = 0;
    A[573] = 0;
    A[574] = 0;
    A[575] = 0;
    A[576] = 0;
    A[577] = 0;
    A[578] = 0;
    A[579] = 0;
    A[580] = 0;
    A[581] = 0;
    A[582] = 0;
    A[583] = 0;
    A[584] = 0;
    A[585] = 0;
    A[586] = 0;
    A[587] = 0;
    A[588] = 0;
    A[589] = 0;
    A[590] = 0;
    A[591] = 0;
    A[592] = 0;
    A[593] = 0;
    A[594] = 0;
    A[595] = 0;
    A[596] = 0;
    A[597] = 0;
    A[598] = 0;
    A[599] = 0;
    A[600] = 0;
    A[601] = 0;
    A[602] = 0;
    A[603] = 0;
    A[604] = 0;
    A[605] = 0;
    A[606] = 0;
    A[607] = 0;
    A[608] = 0;
    A[609] = 0;
    A[610] = 0;
    A[611] = 0;
    A[612] = 0;
    A[613] = 0;
    A[614] = 0;
    A[615] = 0;
    A[616] = 0;
    A[617] = 0;
    A[618] = 0;
    A[619] = 0;
    A[620] = 0;
    A[621] = 0;
    A[622] = 0;
    A[623] = 0;
    A[624] = 0;
    A[625] = 0;
    A[626] = 0;
    A[627] = 0;
    A[628] = 0;
    A[629] = 0;
    A[630] = 0;
    A[631] = 0;
    A[632] = 0;
    A[633] = 0;
    A[634] = 0;
    A[635] = 0;
    A[636] = 0;
    A[637] = 0;
    A[638] = 0;
    A[639] = 0;
    A[640] = 0;
    A[641] = 0;
    A[642] = 0;
    A[643] = 0;
    A[644] = 0;
    A[645] = 0;
    A[646] = 0;
    A[647] = 0;
    A[648] = 0;
    A[649] = 0;
    A[650] = 0;
    A[651] = 0;
    A[652] = 0;
    A[653] = 0;
    A[654] = 0;
    A[655] = 0;
    A[656] = 0;
    A[657] = 0;
    A[658] = 0;
    A[659] = 0;
    A[660] = 0;
    A[661] = 0;
    A[662] = 0;
    A[663] = 0;
    A[664] = 0;
    A[665] = 0;
    A[666] = 0;
    A[667] = 0;
    A[668] = 0;
    A[669] = 0;
    A[670] = 0;
    A[671] = 0;
    A[672] = 0;
    A[673] = 0;
    A[674] = 0;
    A[675] = 0;
    A[676] = 0;
    A[677] = 0;
    A[678] = 0;
    A[679] = 0;
    A[680] = 0;
    A[681] = 0;
    A[682] = 0;
    A[683] = 0;
    A[684] = 0;
    A[685] = 0;
    A[686] = 0;
    A[687] = 0;
    A[688] = 0;
    A[689] = 0;
    A[690] = 0;
    A[691] = 0;
    A[692] = 0;
    A[693] = 0;
    A[694] = 0;
    A[695] = 0;
    A[696] = 0;
    A[697] = 0;
    A[698] = 0;
    A[699] = 0;
    A[700] = 0;
    A[701] = 0;
    A[702] = 0;
    A[703] = 0;
    A[704] = 0;
    A[705] = 0;
    A[706] = 0;
    A[707] = 0;
    A[708] = 0;
    A[709] = 0;
    A[710] = 0;
    A[711] = 0;
    A[712] = 0;
    A[713] = 0;
    A[714] = 0;
    A[715] = 0;
    A[716] = 0;
    A[717] = 0;
    A[718] = 0;
    A[719] = 0;
    A[720] = 0;
    A[721] = 0;
    A[722] = 0;
    A[723] = 0;
    A[724] = 0;
    A[725] = 0;
    A[726] = 0;
    A[727] = 0;
    A[728] = 0;
    A[729] = 0;
    A[730] = 0;
    A[731] = 0;
    A[732] = 0;
    A[733] = 0;
    A[734] = 0;
    A[735] = 0;
    A[736] = 0;
    A[737] = 0;
    A[738] = 0;
    A[739] = 0;
    A[740] = 0;
    A[741] = 0;
    A[742] = 0;
    A[743] = 0;
    A[744] = 0;
    A[745] = 0;
    A[746] = 0;
    A[747] = 0;
    A[748] = 0;
    A[749] = 0;
    A[750] = 0;
    A[751] = 0;
    A[752] = 0;
    A[753] = 0;
    A[754] = 0;
    A[755] = 0;
    A[756] = 0;
    A[757] = 0;
    A[758] = 0;
    A[759] = 0;
    A[760] = 0;
    A[761] = 0;
    A[762] = 0;
    A[763] = 0;
    A[764] = 0;
    A[765] = 0;
    A[766] = 0;
    A[767] = 0;
    A[768] = 0;
    A[769] = 0;
    A[770] = 0;
    A[771] = 0;
    A[772] = 0;
    A[773] = 0;
    A[774] = 0;
    A[775] = 0;
    A[776] = 0;
    A[777] = 0;
    A[778] = 0;
    A[779] = 0;
    A[780] = 0;
    A[781] = 0;
    A[782] = 0;
    A[783] = 0;
    A[784] = 0;
    A[785] = 0;
    A[786] = 0;
    A[787] = 0;
    A[788] = 0;
    A[789] = 0;
    A[790] = 0;
    A[791] = 0;
    A[792] = 0;
    A[793] = 0;
    A[794] = 0;
    A[795] = 0;
    A[796] = 0;
    A[797] = 0;
    A[798] = 0;
    A[799] = 0;
    A[800] = 0;
    A[801] = 0;
    A[802] = 0;
    A[803] = 0;
    A[804] = 0;
    A[805] = 0;
    A[806] = 0;
    A[807] = 0;
    A[808] = 0;
    A[809] = 0;
    A[810] = 0;
    A[811] = 0;
    A[812] = 0;
    A[813] = 0;
    A[814] = 0;
    A[815] = 0;
    A[816] = 0;
    A[817] = 0;
    A[818] = 0;
    A[819] = 0;
    A[820] = 0;
    A[821] = 0;
    A[822] = 0;
    A[823] = 0;
    A[824] = 0;
    A[825] = 0;
    A[826] = 0;
    A[827] = 0;
    A[828] = 0;
    A[829] = 0;
    A[830] = 0;
    A[831] = 0;
    A[832] = 0;
    A[833] = 0;
    A[834] = 0;
    A[835] = 0;
    A[836] = 0;
    A[837] = 0;
    A[838] = 0;
    A[839] = 0;
    A[840] = 0;
    A[841] = 0;
    A[842] = 0;
    A[843] = 0;
    A[844] = 0;
    A[845] = 0;
    A[846] = 0;
    A[847] = 0;
    A[848] = 0;
    A[849] = 0;
    A[850] = 0;
    A[851] = 0;
    A[852] = 0;
    A[853] = 0;
    A[854] = 0;
    A[855] = 0;
    A[856] = 0;
    A[857] = 0;
    A[858] = 0;
    A[859] = 0;
    A[860] = 0;
    A[861] = 0;
    A[862] = 0;
    A[863] = 0;
    A[864] = 0;
    A[865] = 0;
    A[866] = 0;
    A[867] = 0;
    A[868] = 0;
    A[869] = 0;
    A[870] = 0;
    A[871] = 0;
    A[872] = 0;
    A[873] = 0;
    A[874] = 0;
    A[875] = 0;
    A[876] = 0;
    A[877] = 0;
    A[878] = 0;
    A[879] = 0;
    A[880] = 0;
    A[881] = 0;
    A[882] = 0;
    A[883] = 0;
    A[884] = 0;
    A[885] = 0;
    A[886] = 0;
    A[887] = 0;
    A[888] = 0;
    A[889] = 0;
    A[890] = 0;
    A[891] = 0;
    A[892] = 0;
    A[893] = 0;
    A[894] = 0;
    A[895] = 0;
    A[896] = 0;
    A[897] = 0;
    A[898] = 0;
    A[899] = 0;
    A[900] = 0;
    A[901] = 0;
    A[902] = 0;
    A[903] = 0;
    A[904] = 0;
    A[905] = 0;
    A[906] = 0;
    A[907] = 0;
    A[908] = 0;
    A[909] = 0;
    A[910] = 0;
    A[911] = 0;
    A[912] = 0;
    A[913] = 0;
    A[914] = 0;
    A[915] = 0;
    A[916] = 0;
    A[917] = 0;
    A[918] = 0;
    A[919] = 0;
    A[920] = 0;
    A[921] = 0;
    A[922] = 0;
    A[923] = 0;
    A[924] = 0;
    A[925] = 0;
    A[926] = 0;
    A[927] = 0;
    A[928] = 0;
    A[929] = 0;
    A[930] = 0;
    A[931] = 0;
    A[932] = 0;
    A[933] = 0;
    A[934] = 0;
    A[935] = 0;
    A[936] = 0;
    A[937] = 0;
    A[938] = 0;
    A[939] = 0;
    A[940] = 0;
    A[941] = 0;
    A[942] = 0;
    A[943] = 0;
    A[944] = 0;
    A[945] = 0;
    A[946] = 0;
    A[947] = 0;
    A[948] = 0;
    A[949] = 0;
    A[950] = 0;
    A[951] = 0;
    A[952] = 0;
    A[953] = 0;
    A[954] = 0;
    A[955] = 0;
    A[956] = 0;
    A[957] = 0;
    A[958] = 0;
    A[959] = 0;
    A[960] = 0;
    A[961] = 0;
    A[962] = 0;
    A[963] = 0;
    A[964] = 0;
    A[965] = 0;
    A[966] = 0;
    A[967] = 0;
    A[968] = 0;
    A[969] = 0;
    A[970] = 0;
    A[971] = 0;
    A[972] = 0;
    A[973] = 0;
    A[974] = 0;
    A[975] = 0;
    A[976] = 0;
    A[977] = 0;
    A[978] = 0;
    A[979] = 0;
    A[980] = 0;
    A[981] = 0;
    A[982] = 0;
    A[983] = 0;
    A[984] = 0;
    A[985] = 0;
    A[986] = 0;
    A[987] = 0;
    A[988] = 0;
    A[989] = 0;
    A[990] = 0;
    A[991] = 0;
    A[992] = 0;
    A[993] = 0;
    A[994] = 0;
    A[995] = 0;
    A[996] = 0;
    A[997] = 0;
    A[998] = 0;
    A[999] = 0;
    A[1000] = 0;
    A[1001] = 0;
    A[1002] = 0;
    A[1003] = 0;
    A[1004] = 0;
    A[1005] = 0;
    A[1006] = 0;
    A[1007] = 0;
    A[1008] = 0;
    A[1009] = 0;
    A[1010] = 0;
    A[1011] = 0;
    A[1012] = 0;
    A[1013] = 0;
    A[1014] = 0;
    A[1015] = 0;
    A[1016] = 0;
    A[1017] = 0;
    A[1018] = 0;
    A[1019] = 0;
    A[1020] = 0;
    A[1021] = 0;
    A[1022] = 0;
    A[1023] = 0;
    A[1024] = 0;
    A[1025] = 0;
    A[1026] = 0;
    A[1027] = 0;
    A[1028] = 0;
    A[1029] = 0;
    A[1030] = 0;
    A[1031] = 0;
    A[1032] = 0;
    A[1033] = 0;
    A[1034] = 0;
    A[1035] = 0;
    A[1036] = 0;
    A[1037] = 0;
    A[1038] = 0;
    A[1039] = 0;
    A[1040] = 0;
    A[1041] = 0;
    A[1042] = 0;
    A[1043] = 0;
    A[1044] = 0;
    A[1045] = 0;
    A[1046] = 0;
    A[1047] = 0;
    A[1048] = 0;
    A[1049] = 0;
    A[1050] = 0;
    A[1051] = 0;
    A[1052] = 0;
    A[1053] = 0;
    A[1054] = 0;
    A[1055] = 0;
    A[1056] = 0;
    A[1057] = 0;
    A[1058] = 0;
    A[1059] = 0;
    A[1060] = 0;
    A[1061] = 0;
    A[1062] = 0;
    A[1063] = 0;
    A[1064] = 0;
    A[1065] = 0;
    A[1066] = 0;
    A[1067] = 0;
    A[1068] = 0;
    A[1069] = 0;
    A[1070] = 0;
    A[1071] = 0;
    A[1072] = 0;
    A[1073] = 0;
    A[1074] = 0;
    A[1075] = 0;
    A[1076] = 0;
    A[1077] = 0;
    A[1078] = 0;
    A[1079] = 0;
    A[1080] = 0;
    A[1081] = 0;
    A[1082] = 0;
    A[1083] = 0;
    A[1084] = 0;
    A[1085] = 0;
    A[1086] = 0;
    A[1087] = 0;
    A[1088] = 0;
    A[1089] = 0;
    A[1090] = 0;
    A[1091] = 0;
    A[1092] = 0;
    A[1093] = 0;
    A[1094] = 0;
    A[1095] = 0;
    A[1096] = 0;
    A[1097] = 0;
    A[1098] = 0;
    A[1099] = 0;
    A[1100] = 0;
    A[1101] = 0;
    A[1102] = 0;
    A[1103] = 0;
    A[1104] = 0;
    A[1105] = 0;
    A[1106] = 0;
    A[1107] = 0;
    A[1108] = 0;
    A[1109] = 0;
    A[1110] = 0;
    A[1111] = 0;
    A[1112] = 0;
    A[1113] = 0;
    A[1114] = 0;
    A[1115] = 0;
    A[1116] = 0;
    A[1117] = 0;
    A[1118] = 0;
    A[1119] = 0;
    A[1120] = 0;
    A[1121] = 0;
    A[1122] = 0;
    A[1123] = 0;
    A[1124] = 0;
    A[1125] = 0;
    A[1126] = 0;
    A[1127] = 0;
    A[1128] = 0;
    A[1129] = 0;
    A[1130] = 0;
    A[1131] = 0;
    A[1132] = 0;
    A[1133] = 0;
    A[1134] = 0;
    A[1135] = 0;
    A[1136] = 0;
    A[1137] = 0;
    A[1138] = 0;
    A[1139] = 0;
    A[1140] = 0;
    A[1141] = 0;
    A[1142] = 0;
    A[1143] = 0;
    A[1144] = 0;
    A[1145] = 0;
    A[1146] = 0;
    A[1147] = 0;
    A[1148] = 0;
    A[1149] = 0;
    A[1150] = 0;
    A[1151] = 0;
    A[1152] = 0;
    A[1153] = 0;
    A[1154] = 0;
    A[1155] = 0;
    A[1156] = 0;
    A[1157] = 0;
    A[1158] = 0;
    A[1159] = 0;
    A[1160] = 0;
    A[1161] = 0;
    A[1162] = 0;
    A[1163] = 0;
    A[1164] = 0;
    A[1165] = 0;
    A[1166] = 0;
    A[1167] = 0;
    A[1168] = 0;
    A[1169] = 0;
    A[1170] = 0;
    A[1171] = 0;
    A[1172] = 0;
    A[1173] = 0;
    A[1174] = 0;
    A[1175] = 0;
    A[1176] = 0;
    A[1177] = 0;
    A[1178] = 0;
    A[1179] = 0;
    A[1180] = 0;
    A[1181] = 0;
    A[1182] = 0;
    A[1183] = 0;
    A[1184] = 0;
    A[1185] = 0;
    A[1186] = 0;
    A[1187] = 0;
    A[1188] = 0;
    A[1189] = 0;
    A[1190] = 0;
    A[1191] = 0;
    A[1192] = 0;
    A[1193] = 0;
    A[1194] = 0;
    A[1195] = 0;
    A[1196] = 0;
    A[1197] = 0;
    A[1198] = 0;
    A[1199] = 0;
    A[1200] = 0;
    A[1201] = 0;
    A[1202] = 0;
    A[1203] = 0;
    A[1204] = 0;
    A[1205] = 0;
    A[1206] = 0;
    A[1207] = 0;
    A[1208] = 0;
    A[1209] = 0;
    A[1210] = 0;
    A[1211] = 0;
    A[1212] = 0;
    A[1213] = 0;
    A[1214] = 0;
    A[1215] = 0;
    A[1216] = 0;
    A[1217] = 0;
    A[1218] = 0;
    A[1219] = 0;
    A[1220] = 0;
    A[1221] = 0;
    A[1222] = 0;
    A[1223] = 0;
    A[1224] = 0;
    
    // Add all contributions to element tensor
    integral_0_quadrature.tabulate_tensor(A, w, c);
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class poisson3d_4_form_0: public ufc::form
{
public:

  /// Constructor
  poisson3d_4_form_0() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~poisson3d_4_form_0()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "Form([Integral(IndexSum(Product(SpatialDerivative(BasisFunction(FiniteElement('Lagrange', Cell('tetrahedron', 1), 4), 0), MultiIndex((Index(0),), {Index(0): 3})), SpatialDerivative(BasisFunction(FiniteElement('Lagrange', Cell('tetrahedron', 1), 4), 1), MultiIndex((Index(0),), {Index(0): 3}))), MultiIndex((Index(0),), {Index(0): 3})), Measure('cell', 0, None))])";
  }

  /// Return the rank of the global tensor (r)
  virtual unsigned int rank() const
  {
    return 2;
  }

  /// Return the number of coefficients (n)
  virtual unsigned int num_coefficients() const
  {
    return 0;
  }

  /// Return the number of cell integrals
  virtual unsigned int num_cell_integrals() const
  {
    return 1;
  }
  
  /// Return the number of exterior facet integrals
  virtual unsigned int num_exterior_facet_integrals() const
  {
    return 0;
  }
  
  /// Return the number of interior facet integrals
  virtual unsigned int num_interior_facet_integrals() const
  {
    return 0;
  }
    
  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new poisson3d_4_0_finite_element_0();
      break;
    case 1:
      return new poisson3d_4_0_finite_element_1();
      break;
    }
    return 0;
  }
  
  /// Create a new dof map for argument function i
  virtual ufc::dof_map* create_dof_map(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new poisson3d_4_0_dof_map_0();
      break;
    case 1:
      return new poisson3d_4_0_dof_map_1();
      break;
    }
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(unsigned int i) const
  {
    return new poisson3d_4_0_cell_integral_0();
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(unsigned int i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(unsigned int i) const
  {
    return 0;
  }

};

/// This class defines the interface for a finite element.

class poisson3d_4_1_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  poisson3d_4_1_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~poisson3d_4_1_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', 'tetrahedron', 4)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 35;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_02 = element_coordinates[3][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
    const double J_12 = element_coordinates[3][1] - element_coordinates[0][1];
    const double J_20 = element_coordinates[1][2] - element_coordinates[0][2];
    const double J_21 = element_coordinates[2][2] - element_coordinates[0][2];
    const double J_22 = element_coordinates[3][2] - element_coordinates[0][2];
      
    // Compute sub determinants
    const double d00 = J_11*J_22 - J_12*J_21;
    const double d01 = J_12*J_20 - J_10*J_22;
    const double d02 = J_10*J_21 - J_11*J_20;
    
    const double d10 = J_02*J_21 - J_01*J_22;
    const double d11 = J_00*J_22 - J_02*J_20;
    const double d12 = J_01*J_20 - J_00*J_21;
    
    const double d20 = J_01*J_12 - J_02*J_11;
    const double d21 = J_02*J_10 - J_00*J_12;
    const double d22 = J_00*J_11 - J_01*J_10;
      
    // Compute determinant of Jacobian
    double detJ = J_00*d00 + J_10*d10 + J_20*d20;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = d00*(element_coordinates[0][0] - element_coordinates[2][0] - element_coordinates[3][0]) \
                    + d10*(element_coordinates[0][1] - element_coordinates[2][1] - element_coordinates[3][1]) \
                    + d20*(element_coordinates[0][2] - element_coordinates[2][2] - element_coordinates[3][2]);
    
    const double C1 = d01*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[3][0]) \
                    + d11*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[3][1]) \
                    + d21*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[3][2]);
    
    const double C2 = d02*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[2][0]) \
                    + d12*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[2][1]) \
                    + d22*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[2][2]);
    
    // Get coordinates and map to the UFC reference element
    double x = (C0 + d00*coordinates[0] + d10*coordinates[1] + d20*coordinates[2]) / detJ;
    double y = (C1 + d01*coordinates[0] + d11*coordinates[1] + d21*coordinates[2]) / detJ;
    double z = (C2 + d02*coordinates[0] + d12*coordinates[1] + d22*coordinates[2]) / detJ;
    
    // Map coordinates to the reference cube
    if (std::abs(y + z - 1.0) < 1e-14)
      x = 1.0;
    else
      x = -2.0 * x/(y + z - 1.0) - 1.0;
    if (std::abs(z - 1.0) < 1e-14)
      y = -1.0;
    else
      y = 2.0 * y/(1.0 - z) - 1.0;
    z = 2.0 * z - 1.0;
    
    // Reset values
    *values = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    const double scalings_y_4 = scalings_y_3*(0.5 - 0.5*y);
    const double scalings_z_0 = 1;
    const double scalings_z_1 = scalings_z_0*(0.5 - 0.5*z);
    const double scalings_z_2 = scalings_z_1*(0.5 - 0.5*z);
    const double scalings_z_3 = scalings_z_2*(0.5 - 0.5*z);
    const double scalings_z_4 = scalings_z_3*(0.5 - 0.5*z);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    const double psitilde_a_4 = 1.75*x*psitilde_a_3 - 0.75*psitilde_a_2;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_0_4 = 0.0285714285714286*psitilde_bs_0_3 + 1.8*y*psitilde_bs_0_3 - 0.771428571428571*psitilde_bs_0_2;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_1_3 = 0.285714285714286*psitilde_bs_1_2 + 2*y*psitilde_bs_1_2 - 0.714285714285714*psitilde_bs_1_1;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_2_2 = 1.02040816326531*psitilde_bs_2_1 + 2.57142857142857*y*psitilde_bs_2_1 - 0.551020408163265*psitilde_bs_2_0;
    const double psitilde_bs_3_0 = 1;
    const double psitilde_bs_3_1 = 4.5*y + 3.5;
    const double psitilde_bs_4_0 = 1;
    
    // Compute psitilde_cs
    const double psitilde_cs_00_0 = 1;
    const double psitilde_cs_00_1 = 2*z + 1;
    const double psitilde_cs_00_2 = 0.3125*psitilde_cs_00_1 + 1.875*z*psitilde_cs_00_1 - 0.5625*psitilde_cs_00_0;
    const double psitilde_cs_00_3 = 0.155555555555556*psitilde_cs_00_2 + 1.86666666666667*z*psitilde_cs_00_2 - 0.711111111111111*psitilde_cs_00_1;
    const double psitilde_cs_00_4 = 0.09375*psitilde_cs_00_3 + 1.875*z*psitilde_cs_00_3 - 0.78125*psitilde_cs_00_2;
    const double psitilde_cs_01_0 = 1;
    const double psitilde_cs_01_1 = 3*z + 2;
    const double psitilde_cs_01_2 = 0.777777777777778*psitilde_cs_01_1 + 2.33333333333333*z*psitilde_cs_01_1 - 0.555555555555556*psitilde_cs_01_0;
    const double psitilde_cs_01_3 = 0.428571428571429*psitilde_cs_01_2 + 2.14285714285714*z*psitilde_cs_01_2 - 0.714285714285714*psitilde_cs_01_1;
    const double psitilde_cs_02_0 = 1;
    const double psitilde_cs_02_1 = 4*z + 3;
    const double psitilde_cs_02_2 = 1.265625*psitilde_cs_02_1 + 2.8125*z*psitilde_cs_02_1 - 0.546875*psitilde_cs_02_0;
    const double psitilde_cs_03_0 = 1;
    const double psitilde_cs_03_1 = 5*z + 4;
    const double psitilde_cs_04_0 = 1;
    const double psitilde_cs_10_0 = 1;
    const double psitilde_cs_10_1 = 3*z + 2;
    const double psitilde_cs_10_2 = 0.777777777777778*psitilde_cs_10_1 + 2.33333333333333*z*psitilde_cs_10_1 - 0.555555555555556*psitilde_cs_10_0;
    const double psitilde_cs_10_3 = 0.428571428571429*psitilde_cs_10_2 + 2.14285714285714*z*psitilde_cs_10_2 - 0.714285714285714*psitilde_cs_10_1;
    const double psitilde_cs_11_0 = 1;
    const double psitilde_cs_11_1 = 4*z + 3;
    const double psitilde_cs_11_2 = 1.265625*psitilde_cs_11_1 + 2.8125*z*psitilde_cs_11_1 - 0.546875*psitilde_cs_11_0;
    const double psitilde_cs_12_0 = 1;
    const double psitilde_cs_12_1 = 5*z + 4;
    const double psitilde_cs_13_0 = 1;
    const double psitilde_cs_20_0 = 1;
    const double psitilde_cs_20_1 = 4*z + 3;
    const double psitilde_cs_20_2 = 1.265625*psitilde_cs_20_1 + 2.8125*z*psitilde_cs_20_1 - 0.546875*psitilde_cs_20_0;
    const double psitilde_cs_21_0 = 1;
    const double psitilde_cs_21_1 = 5*z + 4;
    const double psitilde_cs_22_0 = 1;
    const double psitilde_cs_30_0 = 1;
    const double psitilde_cs_30_1 = 5*z + 4;
    const double psitilde_cs_31_0 = 1;
    const double psitilde_cs_40_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.866025403784439*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_0;
    const double basisvalue1 = 2.73861278752583*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_0;
    const double basisvalue2 = 1.58113883008419*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_0;
    const double basisvalue3 = 1.11803398874989*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_1;
    const double basisvalue4 = 5.1234753829798*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_0;
    const double basisvalue5 = 3.96862696659689*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_0;
    const double basisvalue6 = 2.29128784747792*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_0;
    const double basisvalue7 = 3.24037034920393*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_1;
    const double basisvalue8 = 1.87082869338697*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_1;
    const double basisvalue9 = 1.3228756555323*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_2;
    const double basisvalue10 = 7.93725393319377*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_0;
    const double basisvalue11 = 6.70820393249937*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_0;
    const double basisvalue12 = 5.19615242270663*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_0;
    const double basisvalue13 = 3*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_0;
    const double basisvalue14 = 5.80947501931113*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_1;
    const double basisvalue15 = 4.5*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_1;
    const double basisvalue16 = 2.59807621135332*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_1;
    const double basisvalue17 = 3.67423461417477*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_2;
    const double basisvalue18 = 2.12132034355964*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_2;
    const double basisvalue19 = 1.5*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_3;
    const double basisvalue20 = 11.1242977306435*psitilde_a_4*scalings_y_4*psitilde_bs_4_0*scalings_z_4*psitilde_cs_40_0;
    const double basisvalue21 = 9.81070843517429*psitilde_a_3*scalings_y_3*psitilde_bs_3_1*scalings_z_4*psitilde_cs_31_0;
    const double basisvalue22 = 8.2915619758885*psitilde_a_2*scalings_y_2*psitilde_bs_2_2*scalings_z_4*psitilde_cs_22_0;
    const double basisvalue23 = 6.42261628933256*psitilde_a_1*scalings_y_1*psitilde_bs_1_3*scalings_z_4*psitilde_cs_13_0;
    const double basisvalue24 = 3.70809924354783*psitilde_a_0*scalings_y_0*psitilde_bs_0_4*scalings_z_4*psitilde_cs_04_0;
    const double basisvalue25 = 8.77496438739212*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_1;
    const double basisvalue26 = 7.41619848709566*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_1;
    const double basisvalue27 = 5.74456264653803*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_1;
    const double basisvalue28 = 3.3166247903554*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_1;
    const double basisvalue29 = 6.42261628933256*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_2;
    const double basisvalue30 = 4.9749371855331*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_2;
    const double basisvalue31 = 2.87228132326901*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_2;
    const double basisvalue32 = 4.06201920231798*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_3;
    const double basisvalue33 = 2.34520787991171*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_3;
    const double basisvalue34 = 1.6583123951777*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_4;
    
    // Table(s) of coefficients
    const static double coefficients0[35][35] = \
    {{-0.0137464349807051, -0.0144900147488139, -0.00836581391578937, -0.00591552374999941, 0, 0, 0, 0, 0, 0, -0.00671936840905293, -0.00567890279999946, -0.00439885919382571, -0.00253968253968254, -0.00491807409042211, -0.00380952380952381, -0.00219942959691287, -0.00311046316543895, -0.0017958267458706, -0.00126984126984128, 0.0136980289516341, 0.0120805260192622, 0.010209907964538, 0.00790856070259325, 0.00456600965054471, 0.0108051509532101, 0.00913201930108942, 0.00707363173407281, 0.00408396318581522, 0.00790856070259324, 0.00612594477872282, 0.0035368158670364, 0.00500181296677924, 0.00288779806280616, 0.00204198159290761},
    {-0.0137464349807054, 0.0144900147488139, -0.00836581391578934, -0.00591552374999945, 0, 0, 0, 0, 0, 0, 0.00671936840905293, -0.00567890279999946, 0.00439885919382572, -0.00253968253968254, -0.00491807409042213, 0.00380952380952382, -0.00219942959691286, 0.00311046316543897, -0.0017958267458706, -0.00126984126984127, 0.0136980289516341, -0.0120805260192622, 0.010209907964538, -0.00790856070259325, 0.00456600965054471, -0.0108051509532101, 0.00913201930108941, -0.0070736317340728, 0.00408396318581521, 0.00790856070259325, -0.00612594477872282, 0.0035368158670364, -0.00500181296677924, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807053, 0, 0.0167316278315787, -0.00591552374999946, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0101587301587302, 0, 0, -0.00659828879073857, 0, 0.00359165349174119, -0.00126984126984127, 0, 0, 0, 0, 0.0228300482527235, 0, 0, 0, -0.0163358527432608, 0, 0, 0.0106104476011092, 0, -0.0057755961256123, 0.00204198159290761},
    {-0.0137464349807054, 0, 0, 0.0177465712499983, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0126984126984127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0306297238936141},
    {0.0439885919382572, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0, 0.0406349206349206, 0, 0, 0.00439885919382572, 0, -0.0143666139669648, 0.00761904761904763, 0, 0, 0, 0, 0, 0, 0, 0, 0.0367556686723369, 0, 0, -0.0424417904044368, 0, 0.0303218796594646, -0.0122518895574456},
    {-0.0329914439536931, 0, -0.0200779533978945, -0.0141972569999986, 0, 0, -0.00969857289937744, 0, 0.0712696645099798, -0.050395263067897, 0, 0, 0, 0, 0, 0, 0.0461880215351701, 0, 0.0107749604752236, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0495154221385096, 0, -0.0606437593189292, 0.0306297238936141},
    {0.0439885919382573, 0, 0.0267706045305259, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0, 0.0359165349174119, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0505364660991076, -0.0408396318581522},
    {0.0439885919382573, 0.0231840235981023, -0.0133853022652629, 0.0189296759999982, 0.0433733365754904, -0.0335968420452647, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, -0.0227156111999979, 0.0175954367753029, -0.0101587301587302, 0.00327871606028141, -0.00253968253968255, 0.0014662863979419, -0.0124418526617558, 0.00718330698348238, 0.00761904761904763, 0, 0, 0, 0, 0, 0.0243115896447228, -0.0205470434274512, 0.0159156714016638, -0.00918891716808423, -0.031634242810373, 0.0245037791148913, -0.0141472634681456, 0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, -0.0173880176985766, 0.0100389766989472, -0.0141972569999986, -0.00722888942924838, 0.00559947367421081, -0.00323285763312582, 0.0617213399848368, -0.03563483225499, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, -0.0266666666666667, 0.01539600717839, 0.00933138949631686, -0.00538748023761177, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, -0.0285877423007065, 0.0165051407128365, -0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, 0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0.0311046316543895, -0.017958267458706, 0.0253968253968255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754903, -0.0335968420452647, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, 0, -0.0117302911835353, 0.0101587301587302, -0.0229510124219699, 0.00761904761904761, -0.00146628639794191, 0.0165891368823411, -0.0071833069834824, -0.00761904761904763, 0, 0.0241610520385245, -0.0357346778758831, 0.0355885231616696, -0.0228300482527235, -0.00270128773830253, -0.0114150241263618, 0.0159156714016638, -0.0112308987609918, 0.00395428035129663, 0.00306297238936141, -0.0035368158670364, -0.00375135972508443, 0.00072194951570154, 0.00204198159290761},
    {-0.0329914439536929, -0.0173880176985768, -0.0100389766989472, 0.0141972569999986, -0.00722888942924839, 0.0615942104163185, -0.0614242950293904, -0.00685792666498187, -0.00395942580611001, 0.00559947367421077, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042213, -0.0266666666666667, 0.0175954367753029, 0.00933138949631688, 0.00538748023761179, -0.00761904761904761, 0, 0, 0.0357346778758831, -0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108943, 0, 0.00408396318581521, 0.00131809345043221, 0.00714693557517662, -0.00471575448938186, -0.00250090648338962, -0.00144389903140307, 0.00204198159290761},
    {0.0439885919382572, 0.0231840235981022, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0.0293257279588382, 0.0101587301587302, 0, -0.0101587301587302, -0.0219942959691286, 0.00207364211029264, 0.017958267458706, -0.00761904761904762, 0, 0, 0, 0.0395428035129662, -0.0456600965054471, 0, 0, -0.017684079335182, 0.0142938711503532, 0, 0.00612594477872282, 0, -0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.043988591938257, -0.0231840235981023, -0.0133853022652629, 0.0189296759999983, 0.0433733365754903, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484216, -0.0268774736362117, -0.0227156111999979, -0.0175954367753029, -0.0101587301587302, 0.00327871606028139, 0.00253968253968253, 0.0014662863979419, 0.0124418526617558, 0.00718330698348236, 0.00761904761904761, 0, 0, 0, 0, 0, -0.0243115896447228, -0.0205470434274512, -0.0159156714016638, -0.00918891716808424, -0.031634242810373, -0.0245037791148913, -0.0141472634681456, -0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, 0.0173880176985768, 0.0100389766989471, -0.0141972569999987, -0.00722888942924838, -0.00559947367421082, -0.00323285763312581, -0.0617213399848367, -0.03563483225499, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, 0.0266666666666667, 0.01539600717839, -0.00933138949631689, -0.00538748023761178, -0.019047619047619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, 0.0285877423007065, 0.0165051407128365, 0.0525190361511819, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382572, -0.0231840235981023, -0.0133853022652629, 0.0189296759999981, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, -0.0311046316543896, -0.017958267458706, 0.0253968253968255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484216, -0.0268774736362117, 0, 0.0117302911835352, 0.0101587301587302, -0.0229510124219699, -0.00761904761904762, -0.00146628639794191, -0.0165891368823411, -0.00718330698348239, -0.00761904761904763, 0, -0.0241610520385245, -0.0357346778758831, -0.0355885231616696, -0.0228300482527235, 0.00270128773830254, -0.0114150241263618, -0.0159156714016638, -0.0112308987609918, 0.00395428035129662, -0.00306297238936141, -0.0035368158670364, 0.00375135972508443, 0.000721949515701533, 0.00204198159290761},
    {-0.0329914439536929, 0.0173880176985766, -0.0100389766989472, 0.0141972569999987, -0.00722888942924841, -0.0615942104163186, -0.0614242950293904, 0.00685792666498186, -0.00395942580610998, 0.00559947367421075, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042213, 0.0266666666666667, 0.0175954367753029, -0.00933138949631688, 0.00538748023761179, -0.00761904761904763, 0, 0, 0.0357346778758831, 0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108943, 0, 0.0040839631858152, 0.00131809345043222, -0.00714693557517663, -0.00471575448938187, 0.00250090648338962, -0.00144389903140308, 0.00204198159290761},
    {0.0439885919382573, -0.0231840235981022, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, -0.0293257279588382, 0.0101587301587302, 0, 0.0101587301587301, -0.0219942959691286, -0.00207364211029265, 0.017958267458706, -0.00761904761904761, 0, 0, 0, -0.0395428035129663, -0.0456600965054471, 0, 0, 0.017684079335182, 0.0142938711503532, 0, -0.00612594477872281, 0, 0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.0439885919382571, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484215, 0.0134387368181058, -0.0113578055999989, -0.0205280095711867, -0.0152380952380952, -0.00983614818084424, -0.0177777777777778, -0.0131965775814772, -0.0145154947720485, -0.0107749604752236, -0.00761904761904761, -0.0547921158065365, -0.0241610520385245, -0.00510495398226901, 0.00395428035129663, 0.00456600965054471, -0.0216103019064202, -0.00456600965054471, 0.00353681586703639, 0.00408396318581521, -0.00395428035129661, 0.0030629723893614, 0.0035368158670364, 0.00250090648338961, 0.00288779806280615, 0.00204198159290761},
    {-0.0329914439536931, 0, 0.0200779533978945, 0.0141972569999987, -0.0867466731509807, 0, 0.00969857289937743, 0, 0.00791885161221998, 0.00559947367421076, 0, 0.0340734167999968, 0, -0.0152380952380953, 0.0295084445425327, 0, -0.0131965775814772, 0, -0.0107749604752236, -0.00761904761904762, 0.0821881737098047, 0, -0.010209907964538, 0, 0.00456600965054471, 0, -0.00913201930108944, 0, 0.00408396318581521, -0.00790856070259326, 0, 0.0035368158670364, 0, 0.00288779806280615, 0.00204198159290761},
    {0.0439885919382573, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754903, -0.0335968420452646, 0.0193971457987549, -0.0274317066599274, 0.01583770322444, 0.0111989473484215, -0.0134387368181058, -0.0113578055999989, 0.0205280095711867, -0.0152380952380952, -0.00983614818084423, 0.0177777777777778, -0.0131965775814772, 0.0145154947720485, -0.0107749604752236, -0.00761904761904761, -0.0547921158065365, 0.0241610520385245, -0.005104953982269, -0.00395428035129662, 0.00456600965054471, 0.0216103019064202, -0.0045660096505447, -0.0035368158670364, 0.00408396318581521, -0.00395428035129662, -0.00306297238936141, 0.00353681586703641, -0.00250090648338962, 0.00288779806280615, 0.00204198159290761},
    {0.0439885919382573, 0.139104141588614, -0.080311813591578, -0.0567890279999947, 0.0578311154339872, 0.0335968420452646, -0.0420271492306356, 0.0274317066599275, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, -0.0586514559176763, 0.0406349206349207, 0.039344592723377, 0.00253968253968254, -0.0109971479845643, -0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, -0.053052238005546, 0.0367556686723369, -0.0105447476034577, -0.0245037791148913, 0.0235787724469093, 0.0175063453837273, 0, -0.0122518895574457},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0, 0.0783926314389509, 0.0096985728993774, -0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, 0.0586514559176763, -0.0609523809523809, 0, 0.033015873015873, 0.0241937255660415, -0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, 0.053052238005546, -0.0551335030085053, 0, -0.0326717054865217, 0.0141472634681456, 0.00875317269186366, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382571, 0, 0, 0.170367083999984, 0, -0.0111989473484216, 0.00969857289937744, 0.0822951199797824, 0.0475131096733199, -0.0167984210226324, 0, 0, 0, 0, 0, 0.0533333333333333, -0.0461880215351701, 0.0435464843161454, 0.0251415744421883, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.057175484601413, -0.0495154221385096, -0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382571, -0.139104141588614, -0.0803118135915779, -0.0567890279999947, 0.0578311154339871, -0.0335968420452646, -0.0420271492306356, -0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, 0.0586514559176763, 0.0406349206349206, 0.0393445927233769, -0.00253968253968253, -0.0109971479845643, 0.0601356211984865, 0.0179582674587059, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, 0.053052238005546, 0.0367556686723369, -0.0105447476034577, 0.0245037791148913, 0.0235787724469093, -0.0175063453837273, 0, -0.0122518895574457},
    {0.0439885919382571, 0, 0.160623627183156, -0.0567890279999946, 0, -0.0783926314389509, 0.00969857289937745, 0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, -0.0586514559176763, -0.0609523809523809, 0, -0.033015873015873, 0.0241937255660415, 0.0145154947720485, -0.0610581093596003, 0.0393650793650793, 0, 0, 0, 0, 0, 0, 0, -0.053052238005546, -0.0551335030085053, 0, 0.0326717054865217, 0.0141472634681456, -0.00875317269186368, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0, 0.0111989473484215, 0.00969857289937745, -0.0822951199797824, 0.0475131096733199, -0.0167984210226323, 0, 0, 0, 0, 0, -0.0533333333333333, -0.0461880215351701, -0.0435464843161453, 0.0251415744421883, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0571754846014129, -0.0495154221385096, 0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754903, 0.0447957893936862, 0.0484928644968872, -0.0548634133198549, 0, -0.0167984210226323, 0.0806324209086351, 0.0227156111999979, -0.0058651455917676, -0.0101587301587302, -0.00327871606028142, 0.0304761904761905, 0.0271262983619253, 0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, 0.0729347689341683, 0.0205470434274512, -0.00530522380055458, -0.00918891716808423, 0.031634242810373, -0.00816792637163039, -0.0141472634681456, -0.00875317269186365, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382571, 0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754904, -0.0447957893936862, 0.0484928644968873, 0.0548634133198549, 0, -0.0167984210226323, -0.0806324209086351, 0.0227156111999979, 0.0058651455917676, -0.0101587301587302, -0.00327871606028142, -0.0304761904761905, 0.0271262983619253, -0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, -0.0729347689341683, 0.0205470434274512, 0.00530522380055459, -0.00918891716808424, 0.031634242810373, 0.00816792637163042, -0.0141472634681456, 0.00875317269186367, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0.0144577788584968, 0, -0.00323285763312585, 0, -0.0950262193466398, -0.0167984210226323, 0, 0, 0, 0, -0.0688530372659096, 0, 0.01539600717839, 0, -0.0502831488843767, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0738132332242036, 0, 0.0165051407128365, 0, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754903, -0.0447957893936862, -0.00969857289937743, 0.0548634133198549, 0.03167540644888, 0.0391963157194754, 0.0806324209086351, 0, 0.0527863103259086, 0.0609523809523809, 0.0229510124219699, 0.0101587301587302, 0.0168622935763319, -0.0124418526617558, -0.00718330698348239, -0.013968253968254, 0, 0.0724831561155734, 0.0357346778758831, -0.0118628410538899, -0.0228300482527235, -0.00810386321490759, 0.0114150241263618, -0.00530522380055459, -0.0112308987609918, -0.00395428035129662, -0.00102099079645379, -0.0035368158670364, 0.00125045324169481, 0.000721949515701537, 0.00204198159290762},
    {0.0439885919382571, 0.139104141588614, -0.080311813591578, -0.0567890279999947, -0.0433733365754904, 0.0447957893936862, -0.00969857289937742, -0.0548634133198549, 0.0316754064488799, 0.0391963157194754, -0.0806324209086351, 0, -0.0527863103259086, 0.060952380952381, 0.0229510124219699, -0.0101587301587302, 0.0168622935763319, 0.0124418526617558, -0.00718330698348236, -0.013968253968254, 0, -0.0724831561155734, 0.0357346778758831, 0.0118628410538899, -0.0228300482527236, 0.00810386321490761, 0.0114150241263618, 0.00530522380055459, -0.0112308987609918, -0.00395428035129662, 0.00102099079645379, -0.0035368158670364, -0.0012504532416948, 0.000721949515701528, 0.0020419815929076},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0.0144577788584968, 0, -0.0614242950293905, 0, -0.0633508128977598, 0.0391963157194754, 0, -0.0681468335999936, 0, -0.0914285714285715, 0.00983614818084423, 0, 0.0285925847598672, 0, 0.0143666139669647, -0.0139682539682539, 0, 0, -0.0714693557517662, 0, 0.0456600965054471, 0, 0.0182640386021788, 0, 0.0040839631858152, -0.00263618690086443, 0, -0.00471575448938186, 0, -0.00144389903140306, 0.00204198159290759},
    {0.351908735506058, 0, 0, 0, -0.115662230867974, 0, -0.129314305325032, 0, 0, -0.134387368181059, 0, -0.0908624447999914, 0, 0.0406349206349206, -0.0786891854467539, 0, -0.0879771838765144, 0, 0, 0.0711111111111111, 0, 0, 0, 0, 0, 0, -0.0821881737098047, 0, 0.0367556686723369, 0.0210894952069153, 0, 0.0235787724469093, 0, 0, -0.0122518895574456}};
    
    // Extract relevant coefficients
    const double coeff0_0 = coefficients0[dof][0];
    const double coeff0_1 = coefficients0[dof][1];
    const double coeff0_2 = coefficients0[dof][2];
    const double coeff0_3 = coefficients0[dof][3];
    const double coeff0_4 = coefficients0[dof][4];
    const double coeff0_5 = coefficients0[dof][5];
    const double coeff0_6 = coefficients0[dof][6];
    const double coeff0_7 = coefficients0[dof][7];
    const double coeff0_8 = coefficients0[dof][8];
    const double coeff0_9 = coefficients0[dof][9];
    const double coeff0_10 = coefficients0[dof][10];
    const double coeff0_11 = coefficients0[dof][11];
    const double coeff0_12 = coefficients0[dof][12];
    const double coeff0_13 = coefficients0[dof][13];
    const double coeff0_14 = coefficients0[dof][14];
    const double coeff0_15 = coefficients0[dof][15];
    const double coeff0_16 = coefficients0[dof][16];
    const double coeff0_17 = coefficients0[dof][17];
    const double coeff0_18 = coefficients0[dof][18];
    const double coeff0_19 = coefficients0[dof][19];
    const double coeff0_20 = coefficients0[dof][20];
    const double coeff0_21 = coefficients0[dof][21];
    const double coeff0_22 = coefficients0[dof][22];
    const double coeff0_23 = coefficients0[dof][23];
    const double coeff0_24 = coefficients0[dof][24];
    const double coeff0_25 = coefficients0[dof][25];
    const double coeff0_26 = coefficients0[dof][26];
    const double coeff0_27 = coefficients0[dof][27];
    const double coeff0_28 = coefficients0[dof][28];
    const double coeff0_29 = coefficients0[dof][29];
    const double coeff0_30 = coefficients0[dof][30];
    const double coeff0_31 = coefficients0[dof][31];
    const double coeff0_32 = coefficients0[dof][32];
    const double coeff0_33 = coefficients0[dof][33];
    const double coeff0_34 = coefficients0[dof][34];
    
    // Compute value(s)
    *values = coeff0_0*basisvalue0 + coeff0_1*basisvalue1 + coeff0_2*basisvalue2 + coeff0_3*basisvalue3 + coeff0_4*basisvalue4 + coeff0_5*basisvalue5 + coeff0_6*basisvalue6 + coeff0_7*basisvalue7 + coeff0_8*basisvalue8 + coeff0_9*basisvalue9 + coeff0_10*basisvalue10 + coeff0_11*basisvalue11 + coeff0_12*basisvalue12 + coeff0_13*basisvalue13 + coeff0_14*basisvalue14 + coeff0_15*basisvalue15 + coeff0_16*basisvalue16 + coeff0_17*basisvalue17 + coeff0_18*basisvalue18 + coeff0_19*basisvalue19 + coeff0_20*basisvalue20 + coeff0_21*basisvalue21 + coeff0_22*basisvalue22 + coeff0_23*basisvalue23 + coeff0_24*basisvalue24 + coeff0_25*basisvalue25 + coeff0_26*basisvalue26 + coeff0_27*basisvalue27 + coeff0_28*basisvalue28 + coeff0_29*basisvalue29 + coeff0_30*basisvalue30 + coeff0_31*basisvalue31 + coeff0_32*basisvalue32 + coeff0_33*basisvalue33 + coeff0_34*basisvalue34;
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis() is not yet implemented.");
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_02 = element_coordinates[3][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
    const double J_12 = element_coordinates[3][1] - element_coordinates[0][1];
    const double J_20 = element_coordinates[1][2] - element_coordinates[0][2];
    const double J_21 = element_coordinates[2][2] - element_coordinates[0][2];
    const double J_22 = element_coordinates[3][2] - element_coordinates[0][2];
      
    // Compute sub determinants
    const double d00 = J_11*J_22 - J_12*J_21;
    const double d01 = J_12*J_20 - J_10*J_22;
    const double d02 = J_10*J_21 - J_11*J_20;
    
    const double d10 = J_02*J_21 - J_01*J_22;
    const double d11 = J_00*J_22 - J_02*J_20;
    const double d12 = J_01*J_20 - J_00*J_21;
    
    const double d20 = J_01*J_12 - J_02*J_11;
    const double d21 = J_02*J_10 - J_00*J_12;
    const double d22 = J_00*J_11 - J_01*J_10;
      
    // Compute determinant of Jacobian
    double detJ = J_00*d00 + J_10*d10 + J_20*d20;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = d00*(element_coordinates[0][0] - element_coordinates[2][0] - element_coordinates[3][0]) \
                    + d10*(element_coordinates[0][1] - element_coordinates[2][1] - element_coordinates[3][1]) \
                    + d20*(element_coordinates[0][2] - element_coordinates[2][2] - element_coordinates[3][2]);
    
    const double C1 = d01*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[3][0]) \
                    + d11*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[3][1]) \
                    + d21*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[3][2]);
    
    const double C2 = d02*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[2][0]) \
                    + d12*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[2][1]) \
                    + d22*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[2][2]);
    
    // Get coordinates and map to the UFC reference element
    double x = (C0 + d00*coordinates[0] + d10*coordinates[1] + d20*coordinates[2]) / detJ;
    double y = (C1 + d01*coordinates[0] + d11*coordinates[1] + d21*coordinates[2]) / detJ;
    double z = (C2 + d02*coordinates[0] + d12*coordinates[1] + d22*coordinates[2]) / detJ;
    
    // Map coordinates to the reference cube
    if (std::abs(y + z - 1.0) < 1e-14)
      x = 1.0;
    else
      x = -2.0 * x/(y + z - 1.0) - 1.0;
    if (std::abs(z - 1.0) < 1e-14)
      y = -1.0;
    else
      y = 2.0 * y/(1.0 - z) - 1.0;
    z = 2.0 * z - 1.0;
    
    // Compute number of derivatives
    unsigned int num_derivatives = 1;
    
    for (unsigned int j = 0; j < n; j++)
      num_derivatives *= 3;
    
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      combinations[j] = new unsigned int [n];
      for (unsigned int k = 0; k < n; k++)
        combinations[j][k] = 0;
    }
        
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] ={{d00 / detJ, d10 / detJ, d20 / detJ}, {d01 / detJ, d11 / detJ, d21 / detJ}, {d02 / detJ, d12 / detJ, d22 / detJ}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values
    for (unsigned int j = 0; j < 1*num_derivatives; j++)
      values[j] = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    const double scalings_y_4 = scalings_y_3*(0.5 - 0.5*y);
    const double scalings_z_0 = 1;
    const double scalings_z_1 = scalings_z_0*(0.5 - 0.5*z);
    const double scalings_z_2 = scalings_z_1*(0.5 - 0.5*z);
    const double scalings_z_3 = scalings_z_2*(0.5 - 0.5*z);
    const double scalings_z_4 = scalings_z_3*(0.5 - 0.5*z);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    const double psitilde_a_4 = 1.75*x*psitilde_a_3 - 0.75*psitilde_a_2;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_0_4 = 0.0285714285714286*psitilde_bs_0_3 + 1.8*y*psitilde_bs_0_3 - 0.771428571428571*psitilde_bs_0_2;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_1_3 = 0.285714285714286*psitilde_bs_1_2 + 2*y*psitilde_bs_1_2 - 0.714285714285714*psitilde_bs_1_1;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_2_2 = 1.02040816326531*psitilde_bs_2_1 + 2.57142857142857*y*psitilde_bs_2_1 - 0.551020408163265*psitilde_bs_2_0;
    const double psitilde_bs_3_0 = 1;
    const double psitilde_bs_3_1 = 4.5*y + 3.5;
    const double psitilde_bs_4_0 = 1;
    
    // Compute psitilde_cs
    const double psitilde_cs_00_0 = 1;
    const double psitilde_cs_00_1 = 2*z + 1;
    const double psitilde_cs_00_2 = 0.3125*psitilde_cs_00_1 + 1.875*z*psitilde_cs_00_1 - 0.5625*psitilde_cs_00_0;
    const double psitilde_cs_00_3 = 0.155555555555556*psitilde_cs_00_2 + 1.86666666666667*z*psitilde_cs_00_2 - 0.711111111111111*psitilde_cs_00_1;
    const double psitilde_cs_00_4 = 0.09375*psitilde_cs_00_3 + 1.875*z*psitilde_cs_00_3 - 0.78125*psitilde_cs_00_2;
    const double psitilde_cs_01_0 = 1;
    const double psitilde_cs_01_1 = 3*z + 2;
    const double psitilde_cs_01_2 = 0.777777777777778*psitilde_cs_01_1 + 2.33333333333333*z*psitilde_cs_01_1 - 0.555555555555556*psitilde_cs_01_0;
    const double psitilde_cs_01_3 = 0.428571428571429*psitilde_cs_01_2 + 2.14285714285714*z*psitilde_cs_01_2 - 0.714285714285714*psitilde_cs_01_1;
    const double psitilde_cs_02_0 = 1;
    const double psitilde_cs_02_1 = 4*z + 3;
    const double psitilde_cs_02_2 = 1.265625*psitilde_cs_02_1 + 2.8125*z*psitilde_cs_02_1 - 0.546875*psitilde_cs_02_0;
    const double psitilde_cs_03_0 = 1;
    const double psitilde_cs_03_1 = 5*z + 4;
    const double psitilde_cs_04_0 = 1;
    const double psitilde_cs_10_0 = 1;
    const double psitilde_cs_10_1 = 3*z + 2;
    const double psitilde_cs_10_2 = 0.777777777777778*psitilde_cs_10_1 + 2.33333333333333*z*psitilde_cs_10_1 - 0.555555555555556*psitilde_cs_10_0;
    const double psitilde_cs_10_3 = 0.428571428571429*psitilde_cs_10_2 + 2.14285714285714*z*psitilde_cs_10_2 - 0.714285714285714*psitilde_cs_10_1;
    const double psitilde_cs_11_0 = 1;
    const double psitilde_cs_11_1 = 4*z + 3;
    const double psitilde_cs_11_2 = 1.265625*psitilde_cs_11_1 + 2.8125*z*psitilde_cs_11_1 - 0.546875*psitilde_cs_11_0;
    const double psitilde_cs_12_0 = 1;
    const double psitilde_cs_12_1 = 5*z + 4;
    const double psitilde_cs_13_0 = 1;
    const double psitilde_cs_20_0 = 1;
    const double psitilde_cs_20_1 = 4*z + 3;
    const double psitilde_cs_20_2 = 1.265625*psitilde_cs_20_1 + 2.8125*z*psitilde_cs_20_1 - 0.546875*psitilde_cs_20_0;
    const double psitilde_cs_21_0 = 1;
    const double psitilde_cs_21_1 = 5*z + 4;
    const double psitilde_cs_22_0 = 1;
    const double psitilde_cs_30_0 = 1;
    const double psitilde_cs_30_1 = 5*z + 4;
    const double psitilde_cs_31_0 = 1;
    const double psitilde_cs_40_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.866025403784439*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_0;
    const double basisvalue1 = 2.73861278752583*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_0;
    const double basisvalue2 = 1.58113883008419*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_0;
    const double basisvalue3 = 1.11803398874989*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_1;
    const double basisvalue4 = 5.1234753829798*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_0;
    const double basisvalue5 = 3.96862696659689*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_0;
    const double basisvalue6 = 2.29128784747792*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_0;
    const double basisvalue7 = 3.24037034920393*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_1;
    const double basisvalue8 = 1.87082869338697*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_1;
    const double basisvalue9 = 1.3228756555323*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_2;
    const double basisvalue10 = 7.93725393319377*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_0;
    const double basisvalue11 = 6.70820393249937*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_0;
    const double basisvalue12 = 5.19615242270663*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_0;
    const double basisvalue13 = 3*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_0;
    const double basisvalue14 = 5.80947501931113*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_1;
    const double basisvalue15 = 4.5*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_1;
    const double basisvalue16 = 2.59807621135332*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_1;
    const double basisvalue17 = 3.67423461417477*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_2;
    const double basisvalue18 = 2.12132034355964*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_2;
    const double basisvalue19 = 1.5*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_3;
    const double basisvalue20 = 11.1242977306435*psitilde_a_4*scalings_y_4*psitilde_bs_4_0*scalings_z_4*psitilde_cs_40_0;
    const double basisvalue21 = 9.81070843517429*psitilde_a_3*scalings_y_3*psitilde_bs_3_1*scalings_z_4*psitilde_cs_31_0;
    const double basisvalue22 = 8.2915619758885*psitilde_a_2*scalings_y_2*psitilde_bs_2_2*scalings_z_4*psitilde_cs_22_0;
    const double basisvalue23 = 6.42261628933256*psitilde_a_1*scalings_y_1*psitilde_bs_1_3*scalings_z_4*psitilde_cs_13_0;
    const double basisvalue24 = 3.70809924354783*psitilde_a_0*scalings_y_0*psitilde_bs_0_4*scalings_z_4*psitilde_cs_04_0;
    const double basisvalue25 = 8.77496438739212*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_1;
    const double basisvalue26 = 7.41619848709566*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_1;
    const double basisvalue27 = 5.74456264653803*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_1;
    const double basisvalue28 = 3.3166247903554*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_1;
    const double basisvalue29 = 6.42261628933256*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_2;
    const double basisvalue30 = 4.9749371855331*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_2;
    const double basisvalue31 = 2.87228132326901*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_2;
    const double basisvalue32 = 4.06201920231798*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_3;
    const double basisvalue33 = 2.34520787991171*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_3;
    const double basisvalue34 = 1.6583123951777*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_4;
    
    // Table(s) of coefficients
    const static double coefficients0[35][35] = \
    {{-0.0137464349807051, -0.0144900147488139, -0.00836581391578937, -0.00591552374999941, 0, 0, 0, 0, 0, 0, -0.00671936840905293, -0.00567890279999946, -0.00439885919382571, -0.00253968253968254, -0.00491807409042211, -0.00380952380952381, -0.00219942959691287, -0.00311046316543895, -0.0017958267458706, -0.00126984126984128, 0.0136980289516341, 0.0120805260192622, 0.010209907964538, 0.00790856070259325, 0.00456600965054471, 0.0108051509532101, 0.00913201930108942, 0.00707363173407281, 0.00408396318581522, 0.00790856070259324, 0.00612594477872282, 0.0035368158670364, 0.00500181296677924, 0.00288779806280616, 0.00204198159290761},
    {-0.0137464349807054, 0.0144900147488139, -0.00836581391578934, -0.00591552374999945, 0, 0, 0, 0, 0, 0, 0.00671936840905293, -0.00567890279999946, 0.00439885919382572, -0.00253968253968254, -0.00491807409042213, 0.00380952380952382, -0.00219942959691286, 0.00311046316543897, -0.0017958267458706, -0.00126984126984127, 0.0136980289516341, -0.0120805260192622, 0.010209907964538, -0.00790856070259325, 0.00456600965054471, -0.0108051509532101, 0.00913201930108941, -0.0070736317340728, 0.00408396318581521, 0.00790856070259325, -0.00612594477872282, 0.0035368158670364, -0.00500181296677924, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807053, 0, 0.0167316278315787, -0.00591552374999946, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0101587301587302, 0, 0, -0.00659828879073857, 0, 0.00359165349174119, -0.00126984126984127, 0, 0, 0, 0, 0.0228300482527235, 0, 0, 0, -0.0163358527432608, 0, 0, 0.0106104476011092, 0, -0.0057755961256123, 0.00204198159290761},
    {-0.0137464349807054, 0, 0, 0.0177465712499983, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0126984126984127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0306297238936141},
    {0.0439885919382572, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0, 0.0406349206349206, 0, 0, 0.00439885919382572, 0, -0.0143666139669648, 0.00761904761904763, 0, 0, 0, 0, 0, 0, 0, 0, 0.0367556686723369, 0, 0, -0.0424417904044368, 0, 0.0303218796594646, -0.0122518895574456},
    {-0.0329914439536931, 0, -0.0200779533978945, -0.0141972569999986, 0, 0, -0.00969857289937744, 0, 0.0712696645099798, -0.050395263067897, 0, 0, 0, 0, 0, 0, 0.0461880215351701, 0, 0.0107749604752236, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0495154221385096, 0, -0.0606437593189292, 0.0306297238936141},
    {0.0439885919382573, 0, 0.0267706045305259, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0, 0.0359165349174119, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0505364660991076, -0.0408396318581522},
    {0.0439885919382573, 0.0231840235981023, -0.0133853022652629, 0.0189296759999982, 0.0433733365754904, -0.0335968420452647, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, -0.0227156111999979, 0.0175954367753029, -0.0101587301587302, 0.00327871606028141, -0.00253968253968255, 0.0014662863979419, -0.0124418526617558, 0.00718330698348238, 0.00761904761904763, 0, 0, 0, 0, 0, 0.0243115896447228, -0.0205470434274512, 0.0159156714016638, -0.00918891716808423, -0.031634242810373, 0.0245037791148913, -0.0141472634681456, 0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, -0.0173880176985766, 0.0100389766989472, -0.0141972569999986, -0.00722888942924838, 0.00559947367421081, -0.00323285763312582, 0.0617213399848368, -0.03563483225499, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, -0.0266666666666667, 0.01539600717839, 0.00933138949631686, -0.00538748023761177, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, -0.0285877423007065, 0.0165051407128365, -0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, 0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0.0311046316543895, -0.017958267458706, 0.0253968253968255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754903, -0.0335968420452647, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, 0, -0.0117302911835353, 0.0101587301587302, -0.0229510124219699, 0.00761904761904761, -0.00146628639794191, 0.0165891368823411, -0.0071833069834824, -0.00761904761904763, 0, 0.0241610520385245, -0.0357346778758831, 0.0355885231616696, -0.0228300482527235, -0.00270128773830253, -0.0114150241263618, 0.0159156714016638, -0.0112308987609918, 0.00395428035129663, 0.00306297238936141, -0.0035368158670364, -0.00375135972508443, 0.00072194951570154, 0.00204198159290761},
    {-0.0329914439536929, -0.0173880176985768, -0.0100389766989472, 0.0141972569999986, -0.00722888942924839, 0.0615942104163185, -0.0614242950293904, -0.00685792666498187, -0.00395942580611001, 0.00559947367421077, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042213, -0.0266666666666667, 0.0175954367753029, 0.00933138949631688, 0.00538748023761179, -0.00761904761904761, 0, 0, 0.0357346778758831, -0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108943, 0, 0.00408396318581521, 0.00131809345043221, 0.00714693557517662, -0.00471575448938186, -0.00250090648338962, -0.00144389903140307, 0.00204198159290761},
    {0.0439885919382572, 0.0231840235981022, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0.0293257279588382, 0.0101587301587302, 0, -0.0101587301587302, -0.0219942959691286, 0.00207364211029264, 0.017958267458706, -0.00761904761904762, 0, 0, 0, 0.0395428035129662, -0.0456600965054471, 0, 0, -0.017684079335182, 0.0142938711503532, 0, 0.00612594477872282, 0, -0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.043988591938257, -0.0231840235981023, -0.0133853022652629, 0.0189296759999983, 0.0433733365754903, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484216, -0.0268774736362117, -0.0227156111999979, -0.0175954367753029, -0.0101587301587302, 0.00327871606028139, 0.00253968253968253, 0.0014662863979419, 0.0124418526617558, 0.00718330698348236, 0.00761904761904761, 0, 0, 0, 0, 0, -0.0243115896447228, -0.0205470434274512, -0.0159156714016638, -0.00918891716808424, -0.031634242810373, -0.0245037791148913, -0.0141472634681456, -0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, 0.0173880176985768, 0.0100389766989471, -0.0141972569999987, -0.00722888942924838, -0.00559947367421082, -0.00323285763312581, -0.0617213399848367, -0.03563483225499, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, 0.0266666666666667, 0.01539600717839, -0.00933138949631689, -0.00538748023761178, -0.019047619047619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, 0.0285877423007065, 0.0165051407128365, 0.0525190361511819, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382572, -0.0231840235981023, -0.0133853022652629, 0.0189296759999981, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, -0.0311046316543896, -0.017958267458706, 0.0253968253968255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484216, -0.0268774736362117, 0, 0.0117302911835352, 0.0101587301587302, -0.0229510124219699, -0.00761904761904762, -0.00146628639794191, -0.0165891368823411, -0.00718330698348239, -0.00761904761904763, 0, -0.0241610520385245, -0.0357346778758831, -0.0355885231616696, -0.0228300482527235, 0.00270128773830254, -0.0114150241263618, -0.0159156714016638, -0.0112308987609918, 0.00395428035129662, -0.00306297238936141, -0.0035368158670364, 0.00375135972508443, 0.000721949515701533, 0.00204198159290761},
    {-0.0329914439536929, 0.0173880176985766, -0.0100389766989472, 0.0141972569999987, -0.00722888942924841, -0.0615942104163186, -0.0614242950293904, 0.00685792666498186, -0.00395942580610998, 0.00559947367421075, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042213, 0.0266666666666667, 0.0175954367753029, -0.00933138949631688, 0.00538748023761179, -0.00761904761904763, 0, 0, 0.0357346778758831, 0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108943, 0, 0.0040839631858152, 0.00131809345043222, -0.00714693557517663, -0.00471575448938187, 0.00250090648338962, -0.00144389903140308, 0.00204198159290761},
    {0.0439885919382573, -0.0231840235981022, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, -0.0293257279588382, 0.0101587301587302, 0, 0.0101587301587301, -0.0219942959691286, -0.00207364211029265, 0.017958267458706, -0.00761904761904761, 0, 0, 0, -0.0395428035129663, -0.0456600965054471, 0, 0, 0.017684079335182, 0.0142938711503532, 0, -0.00612594477872281, 0, 0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.0439885919382571, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484215, 0.0134387368181058, -0.0113578055999989, -0.0205280095711867, -0.0152380952380952, -0.00983614818084424, -0.0177777777777778, -0.0131965775814772, -0.0145154947720485, -0.0107749604752236, -0.00761904761904761, -0.0547921158065365, -0.0241610520385245, -0.00510495398226901, 0.00395428035129663, 0.00456600965054471, -0.0216103019064202, -0.00456600965054471, 0.00353681586703639, 0.00408396318581521, -0.00395428035129661, 0.0030629723893614, 0.0035368158670364, 0.00250090648338961, 0.00288779806280615, 0.00204198159290761},
    {-0.0329914439536931, 0, 0.0200779533978945, 0.0141972569999987, -0.0867466731509807, 0, 0.00969857289937743, 0, 0.00791885161221998, 0.00559947367421076, 0, 0.0340734167999968, 0, -0.0152380952380953, 0.0295084445425327, 0, -0.0131965775814772, 0, -0.0107749604752236, -0.00761904761904762, 0.0821881737098047, 0, -0.010209907964538, 0, 0.00456600965054471, 0, -0.00913201930108944, 0, 0.00408396318581521, -0.00790856070259326, 0, 0.0035368158670364, 0, 0.00288779806280615, 0.00204198159290761},
    {0.0439885919382573, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754903, -0.0335968420452646, 0.0193971457987549, -0.0274317066599274, 0.01583770322444, 0.0111989473484215, -0.0134387368181058, -0.0113578055999989, 0.0205280095711867, -0.0152380952380952, -0.00983614818084423, 0.0177777777777778, -0.0131965775814772, 0.0145154947720485, -0.0107749604752236, -0.00761904761904761, -0.0547921158065365, 0.0241610520385245, -0.005104953982269, -0.00395428035129662, 0.00456600965054471, 0.0216103019064202, -0.0045660096505447, -0.0035368158670364, 0.00408396318581521, -0.00395428035129662, -0.00306297238936141, 0.00353681586703641, -0.00250090648338962, 0.00288779806280615, 0.00204198159290761},
    {0.0439885919382573, 0.139104141588614, -0.080311813591578, -0.0567890279999947, 0.0578311154339872, 0.0335968420452646, -0.0420271492306356, 0.0274317066599275, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, -0.0586514559176763, 0.0406349206349207, 0.039344592723377, 0.00253968253968254, -0.0109971479845643, -0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, -0.053052238005546, 0.0367556686723369, -0.0105447476034577, -0.0245037791148913, 0.0235787724469093, 0.0175063453837273, 0, -0.0122518895574457},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0, 0.0783926314389509, 0.0096985728993774, -0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, 0.0586514559176763, -0.0609523809523809, 0, 0.033015873015873, 0.0241937255660415, -0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, 0.053052238005546, -0.0551335030085053, 0, -0.0326717054865217, 0.0141472634681456, 0.00875317269186366, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382571, 0, 0, 0.170367083999984, 0, -0.0111989473484216, 0.00969857289937744, 0.0822951199797824, 0.0475131096733199, -0.0167984210226324, 0, 0, 0, 0, 0, 0.0533333333333333, -0.0461880215351701, 0.0435464843161454, 0.0251415744421883, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.057175484601413, -0.0495154221385096, -0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382571, -0.139104141588614, -0.0803118135915779, -0.0567890279999947, 0.0578311154339871, -0.0335968420452646, -0.0420271492306356, -0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, 0.0586514559176763, 0.0406349206349206, 0.0393445927233769, -0.00253968253968253, -0.0109971479845643, 0.0601356211984865, 0.0179582674587059, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, 0.053052238005546, 0.0367556686723369, -0.0105447476034577, 0.0245037791148913, 0.0235787724469093, -0.0175063453837273, 0, -0.0122518895574457},
    {0.0439885919382571, 0, 0.160623627183156, -0.0567890279999946, 0, -0.0783926314389509, 0.00969857289937745, 0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, -0.0586514559176763, -0.0609523809523809, 0, -0.033015873015873, 0.0241937255660415, 0.0145154947720485, -0.0610581093596003, 0.0393650793650793, 0, 0, 0, 0, 0, 0, 0, -0.053052238005546, -0.0551335030085053, 0, 0.0326717054865217, 0.0141472634681456, -0.00875317269186368, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0, 0.0111989473484215, 0.00969857289937745, -0.0822951199797824, 0.0475131096733199, -0.0167984210226323, 0, 0, 0, 0, 0, -0.0533333333333333, -0.0461880215351701, -0.0435464843161453, 0.0251415744421883, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0571754846014129, -0.0495154221385096, 0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754903, 0.0447957893936862, 0.0484928644968872, -0.0548634133198549, 0, -0.0167984210226323, 0.0806324209086351, 0.0227156111999979, -0.0058651455917676, -0.0101587301587302, -0.00327871606028142, 0.0304761904761905, 0.0271262983619253, 0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, 0.0729347689341683, 0.0205470434274512, -0.00530522380055458, -0.00918891716808423, 0.031634242810373, -0.00816792637163039, -0.0141472634681456, -0.00875317269186365, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382571, 0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754904, -0.0447957893936862, 0.0484928644968873, 0.0548634133198549, 0, -0.0167984210226323, -0.0806324209086351, 0.0227156111999979, 0.0058651455917676, -0.0101587301587302, -0.00327871606028142, -0.0304761904761905, 0.0271262983619253, -0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, -0.0729347689341683, 0.0205470434274512, 0.00530522380055459, -0.00918891716808424, 0.031634242810373, 0.00816792637163042, -0.0141472634681456, 0.00875317269186367, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0.0144577788584968, 0, -0.00323285763312585, 0, -0.0950262193466398, -0.0167984210226323, 0, 0, 0, 0, -0.0688530372659096, 0, 0.01539600717839, 0, -0.0502831488843767, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0738132332242036, 0, 0.0165051407128365, 0, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754903, -0.0447957893936862, -0.00969857289937743, 0.0548634133198549, 0.03167540644888, 0.0391963157194754, 0.0806324209086351, 0, 0.0527863103259086, 0.0609523809523809, 0.0229510124219699, 0.0101587301587302, 0.0168622935763319, -0.0124418526617558, -0.00718330698348239, -0.013968253968254, 0, 0.0724831561155734, 0.0357346778758831, -0.0118628410538899, -0.0228300482527235, -0.00810386321490759, 0.0114150241263618, -0.00530522380055459, -0.0112308987609918, -0.00395428035129662, -0.00102099079645379, -0.0035368158670364, 0.00125045324169481, 0.000721949515701537, 0.00204198159290762},
    {0.0439885919382571, 0.139104141588614, -0.080311813591578, -0.0567890279999947, -0.0433733365754904, 0.0447957893936862, -0.00969857289937742, -0.0548634133198549, 0.0316754064488799, 0.0391963157194754, -0.0806324209086351, 0, -0.0527863103259086, 0.060952380952381, 0.0229510124219699, -0.0101587301587302, 0.0168622935763319, 0.0124418526617558, -0.00718330698348236, -0.013968253968254, 0, -0.0724831561155734, 0.0357346778758831, 0.0118628410538899, -0.0228300482527236, 0.00810386321490761, 0.0114150241263618, 0.00530522380055459, -0.0112308987609918, -0.00395428035129662, 0.00102099079645379, -0.0035368158670364, -0.0012504532416948, 0.000721949515701528, 0.0020419815929076},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0.0144577788584968, 0, -0.0614242950293905, 0, -0.0633508128977598, 0.0391963157194754, 0, -0.0681468335999936, 0, -0.0914285714285715, 0.00983614818084423, 0, 0.0285925847598672, 0, 0.0143666139669647, -0.0139682539682539, 0, 0, -0.0714693557517662, 0, 0.0456600965054471, 0, 0.0182640386021788, 0, 0.0040839631858152, -0.00263618690086443, 0, -0.00471575448938186, 0, -0.00144389903140306, 0.00204198159290759},
    {0.351908735506058, 0, 0, 0, -0.115662230867974, 0, -0.129314305325032, 0, 0, -0.134387368181059, 0, -0.0908624447999914, 0, 0.0406349206349206, -0.0786891854467539, 0, -0.0879771838765144, 0, 0, 0.0711111111111111, 0, 0, 0, 0, 0, 0, -0.0821881737098047, 0, 0.0367556686723369, 0.0210894952069153, 0, 0.0235787724469093, 0, 0, -0.0122518895574456}};
    
    // Interesting (new) part
    // Tables of derivatives of the polynomial base (transpose)
    const static double dmats0[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {6.32455532033677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 11.2249721603218, 0, 0, 0, 1.70793006049707e-14, 0, 0, 1.16063842564573e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.58257569495585, 0, 8.36660026534076, -1.18321595661992, 0, 0, 1.04642314135461e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.74165738677394, 0, 0, 8.69482604771366, 0, 0, 0, -1.66625972279159e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.49909083394701, 0, -3.34664010613631, -2.36643191323985, 15.4919333848297, 0, 0.692820323027549, 0, 0.56568542494924, 0.400000000000009, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 4.89897948556635, 0, 0, 0, 14.1985914794391, 0, -0.828078671210828, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.60000000000001, 0, 8.76356092008266, -1.54919333848296, 0, 0, 9.52470471983254, 0, -1.48131215963609, 0.261861468283193, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 4.24264068711929, 0, 0, 0, 0, 0, 14.3427433120127, 2.84156378982381e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.11769145362398, 0, 3.16227766016838, 4.91934955049954, 0, 0, 0, -1.2538531175753e-14, 10.690449676497, -2.41897262725905, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.54558441227157, 0, 0, 7.66811580507232, 0, 0, 0, 0, 0, 10.3691851174526, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 11.6057691494799, 0, 0, 0, -4.20458932936041, 0, -3.43303281162798, 0, 0, 19.6214168703486, 0, 0.611677741841197, 0, 0, 0.529728463363978, 0, 0.432521479156785, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.53137212479103, 0, 3.54562104171167, -2.50713268211203, 4.78713553878169, 0, -5.56626745075493, 0, -1.04880884817015, 0.741619848709563, 0, 18.8034951158403, 0, 1.68183573174416, -0.603122387046455, 0, 0.701283781217662, 0, 0.132137494528683, -0.0934353184302337, 0, 0, 0, 0, -2.04851899834062e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.12802291379194e-14, 2.59512887494071, 0, 0, 0, 10.0285307284481, 1.48509074345102e-14, -0.767649473578742, 0, 0, 0, 0, 16.4130361329658, 0, 0, -1.26347611061158, 0, 0.0967147429123335, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.96647939483827, 0, 8.12403840463597, -1.64130361329658, 0, 0, 11.7728501222091, 0, -2.40312296813959, 0.485504156227609, 0, 0, 0, 10.2761860629321, 0, 0, -1.48323969741914, 0, 0.30276503540975, -0.0611677741841184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.05298244095217, 0, -1.58564993434419, 4.4848952846511, 4.28174419288837, 0, 0.191485421551264, 0, -3.75233260785875, -4.31161222746203, 0, 0, 0, 0, 18.8807171866294, 0, 0.844371341865038, 0, 1.18187368057056, 1.04463861754668, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 2.32115382989598, 0, 0, 0, 3.92428337406973, 0, 5.49285249860476, 1.21484853427001e-14, 0, 0, 0, 0, 0, 0, 17.3044631365565, 0, -1.73008591662714, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.65329983228433, 0, 4.15220619990513, 2.93605316083776, 0, 0, 2.63248931621764, 0, 9.82591326180785, -2.8226127713774, 0, 0, 0, 0, 0, 0, 11.6081867662439, 0, -3.09487177319466, 0.683876505540249, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 2.01017818278148, 0, 0, 0, 0, 0, 8.91928088068602, 1.76356325376492e-14, 0, 0, 0, 0, 0, 0, 0, 0, 16.8558564884489, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.29782505861521, 0, 1.49829835452879, 5.50917601898535, 0, 0, 0, 0, 6.64803945320938, 4.13676892548485, 0, 0, 0, 0, 0, 0, 0, 0, 12.5636136423842, -3.55352656109507, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87616630392938, 0, 0, 6.2283092998577, 0, 0, 0, 0, 0, 11.0541524195338, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11.6057691494799, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    const static double dmats1[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.16227766016838, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.47722557505166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.95803989154981, 5.61248608016091, -1.08012344973464, -0.763762615825977, 0, 1.12766252988532e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.29128784747793, 7.24568837309472, 4.18330013267038, -0.591607978309962, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-2.64575131106459, 0, 9.66091783079296, 0.683130051063976, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87082869338697, 0, 0, 4.34741302385683, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.24037034920392, 0, 0, 7.52994023880667, 0, 0, 0, -1.40420976242894e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.74954541697351, 5.79655069847578, -1.67332005306815, -1.18321595661993, 7.74596669241484, -1.2, 0.346410161513776, -0.979795897113278, 0.282842712474625, 0.200000000000005, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.32379000772444, 2.44948974278317, 2.82842712474619, -0.999999999999997, 9.16515138991168, 7.09929573971955, -2.04939015319192, -0.414039335605417, -0.478091443733761, 0.169030850945703, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.80000000000001, -5.69209978830309, 4.38178046004133, -0.77459666924148, 0, 10.998181667894, 4.76235235991628, 0.962140470884725, -0.740656079818049, 0.130930734141596, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.19615242270664, 0, -3.16227766016837, -2.23606797749979, 0, 0, 13.7477270848675, 0, 0.534522483824846, 0.377964473009225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.01246117974981, 2.12132034355964, -0.408248290463859, 3.17542648054293, 0, 0, 0, 7.17137165600634, -1.3801311186847, -1.56144011671765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.55884572681199, 2.73861278752583, 1.5811388300842, 2.45967477524977, 0, 0, 0, 9.2582009977255, 5.3452248382485, -1.20948631362952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-1.79999999999999, 0, 3.65148371670111, -2.84018778721876, 0, 0, 0, 0, 12.3442679969673, 1.39659449751036, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.27279220613578, 0, 0, 3.83405790253616, 0, 0, 0, 0, 0, 5.18459255872629, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.20454076850485, 0, 0, 6.64078308635359, 0, 0, 0, 0, 0, 8.97997772825746, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.56904651573303, 5.80288457473998, -2.01017818278148, -1.42141062443803, 8.14215222512715, -2.10229466468021, 0.728256234341421, -1.71651640581399, 0.594618725379067, 0.420458932936047, 9.81070843517429, -1.18450885369836, 0.3058388709206, -0.105945692672795, -1.02581475831036, 0.264864231681991, -0.0917516612761804, 0.216260739578394, -0.0749149177264392, -0.0529728463363962, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.26568606239552, 3.07059789431495, 1.77281052085584, -1.25356634105601, 2.39356776939085, 6.30376871403133, -2.78313372537746, -0.908295106229249, -0.524404424085077, 0.370809924354783, 11.1242977306435, 9.40174755792013, -2.42752078113806, 0.840917865872083, -0.301561193523227, -0.794200206656967, 0.350641890608831, 0.114434427054266, 0.0660687472643429, -0.0467176592151151, 0, 0, 0, 1.18413955033316e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.91485421551268, 1.29756443747035, 3.74574588632197, -1.05945692672795, -8.09173593712687, 5.01426536422407, 1.80936716113936, -0.383824736789366, -1.1080065755349, 0.313391585264, 0, 12.7134831207354, 8.2065180664829, -2.84282124887606, 1.01946290306866, -0.631738055305791, -0.227958835180081, 0.0483573714561658, 0.139595707137601, -0.0394836284566112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741914, 7.03562363973515, 4.06201920231798, -0.820651806648292, 0, -6.79705818718658, 5.88642506110457, -2.08116553882674, -1.2015614840698, 0.242752078113806, 0, 0, 14.8323969741913, 5.13809303146605, 0, 0.856348838577678, -0.741619848709567, 0.262202212042541, 0.151382517704874, -0.0305838870920586, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-3.42539535431071, 0, 9.38083151964686, 1.89521416591737, 0, 1.48502651407619e-14, -3.39852909359332, 0, -2.77488738510233, -0.560611910581396, 0, 0, 0, 17.7988763690296, 0, 0, 0.42817441928884, 0, 0.349602949390053, 0.0706304617818605, 0, 0, 0, 0, -1.76908227133537e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.02649122047609, 2.74642624930238, -0.792824967172093, 2.24244764232555, 2.14087209644419, -0.331662479035538, 0.095742710775634, 6.49923072370876, -1.87616630392936, -2.15580611373101, 0, 0, 0, 0, 9.44035859331469, -1.46249406456536, 0.42218567093252, -2.04706526287664, 0.59093684028528, 0.522319308773337, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.71269767715535, 1.16057691494799, 1.34011878852098, 1.89521416591738, 2.53311402559511, 1.96214168703486, -0.566421515598881, 2.74642624930237, 3.17129986868837, -1.82198870938951, 0, 0, 0, 0, 11.1699829238239, 8.65223156827827, -2.49768411251822, -0.865042958313569, -0.998865569685858, 0.441440386136648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.32664991614216, -2.69693703815182, 2.07610309995257, 1.46802658041888, 0, 3.03973683071413, 1.31624465810882, -6.382117875081, 4.91295663090391, -1.4113063856887, 0, 0, 0, 0, 0, 13.4039795085887, 5.80409338312195, 2.01017818278147, -1.54743588659732, 0.341938252770131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.82970843102535, 0, -1.49829835452879, 4.23782770691181, 0, 0, 3.79967103839267, 0, -3.54562104171168, -4.07409060843206, 0, 0, 0, 0, 0, 0, 16.7549743857359, 0, 1.11676565710082, 0.987090711415304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741913, 1.00508909139074, -0.193429485824663, 3.55615782880925, 0, 0, 0, 4.459640440343, -0.858258202906983, 2.67027285925187, 0, 0, 0, 0, 0, 0, 0, 8.42792824422443, -1.62195554683794, -2.29379153190448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.14891252930761, 1.29756443747036, 0.749149177264399, 2.75458800949267, 0, 0, 0, 5.75737105184053, 3.3240197266047, 2.06838446274242, 0, 0, 0, 0, 0, 0, 0, 10.8804085776374, 6.2818068211921, -1.77676328054753, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.02006749648391e-14, 0, 0},
    {-1.32664991614216, 0, 1.73008591662714, -3.18072425757422, 0, 0, 0, 1.15266449376351e-14, 7.67649473578738, -2.38836465270397, 0, 0, 0, 0, 0, 0, 0, 0, 14.5072114368499, 2.05162951662072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.938083151964688, 0, 0, 3.11415464992885, 0, 0, 0, 0, 0, 5.52707620976692, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.80288457473997, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.6248076809272, 0, 0, 5.39387407630363, 0, 0, 0, 0, 0, 9.57317681262152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10.0508909139073, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    const static double dmats2[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.16227766016838, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.82574185835056, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.16397779494323, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.95803989154981, 5.61248608016091, -1.08012344973464, -0.763762615825976, 0, 1.39411605579536e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.29128784747792, 1.44913767461894, 4.18330013267038, -0.591607978309961, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.3228756555323, 0, 3.86436713231718, -0.341565025531985, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87082869338697, 7.09929573971954, 0, 4.34741302385683, 0, 1.2137796469483e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.08012344973464, 0, 7.09929573971954, 2.50998007960223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-3.81881307912987, 0, 0, 8.87411967464942, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.74954541697351, 5.79655069847578, -1.67332005306815, -1.18321595661993, 7.74596669241484, -1.19999999999999, 0.346410161513777, -0.97979589711328, 0.282842712474624, 0.200000000000005, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.32379000772445, 2.44948974278317, 2.82842712474619, -0.999999999999998, 1.30930734141596, 7.09929573971955, -2.04939015319192, -0.414039335605417, -0.478091443733761, 0.169030850945707, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.80000000000001, 0.632455532033672, 4.38178046004133, -0.774596669241482, 0, 3.14233761939829, 4.76235235991627, -0.106904496764972, -0.740656079818045, 0.130930734141597, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.03923048454133, 0, 3.16227766016838, -0.447213595499956, 0, 0, 5.8918830363718, 0, -0.534522483824849, 0.0755928946018436, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.0124611797498, 2.12132034355964, -0.408248290463861, 3.17542648054293, 9.07114735222144, 0, 0, 7.17137165600635, -1.3801311186847, -1.56144011671765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.558845726812, 0.547722557505166, 1.5811388300842, 2.45967477524977, 0, 9.07114735222146, 0, 1.85164019954509, 5.34522483824849, -1.20948631362952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.900000000000005, 0, 1.46059348668045, 1.42009389360939, 0, 0, 9.07114735222146, 0, 4.93770719878694, -0.698297248755174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.27279220613578, -6.26099033699941, 0, 3.83405790253616, 0, -1.33471233241901e-14, 0, 10.5830052442584, 1.61529151756054e-14, 5.18459255872629, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.734846922834955, 0, -6.26099033699941, 2.21359436211787, 0, 0, 0, 0, 10.5830052442584, 2.99332590941916, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.7157676649773, 0, 0, -4.69574275274955, 0, 0, 0, 0, 0, 12.69960629311, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.56904651573303, 5.80288457473998, -2.01017818278148, -1.42141062443803, 8.14215222512715, -2.10229466468021, 0.72825623434142, -1.71651640581399, 0.594618725379067, 0.420458932936046, 9.81070843517429, -1.18450885369836, 0.305838870920599, -0.105945692672794, -1.02581475831036, 0.264864231681991, -0.0917516612761805, 0.216260739578394, -0.0749149177264392, -0.052972846336396, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.26568606239552, 3.07059789431495, 1.77281052085584, -1.25356634105602, 2.39356776939084, 6.30376871403133, -2.78313372537746, -0.908295106229248, -0.524404424085073, 0.370809924354783, 1.23603308118261, 9.40174755792013, -2.42752078113806, 0.840917865872083, -0.301561193523226, -0.794200206656968, 0.350641890608831, 0.114434427054266, 0.0660687472643423, -0.0467176592151165, 0, 0, 0, 1.09746923696279e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.91485421551268, 1.29756443747035, 3.74574588632197, -1.05945692672795, 0.404586796856347, 5.01426536422407, 1.80936716113937, -0.383824736789372, -1.1080065755349, 0.313391585264004, 0, 2.82521847127454, 8.2065180664829, -2.84282124887606, -0.0509731451534344, -0.631738055305788, -0.227958835180082, 0.0483573714561684, 0.139595707137601, -0.039483628456609, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741914, 0.335029697130247, 4.06201920231798, -0.820651806648289, 0, 1.69926454679664, 5.88642506110457, -0.099103120896514, -1.2015614840698, 0.242752078113805, 0, 0, 4.94413232473044, 5.13809303146605, 0, -0.214087209644418, -0.741619848709568, 0.0124858196210747, 0.151382517704876, -0.0305838870920584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.856348838577678, 0, 2.68023757704196, -0.473803541479345, 0, 0, 5.09779364038992, 0, -0.792824967172097, 0.140152977645345, 0, 0, 0, 7.91061171956871, 0, 0, -0.642261628933257, 0, 0.0998865569685871, -0.0176576154454654, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.02649122047609, 2.74642624930238, -0.792824967172095, 2.24244764232555, 2.14087209644419, -0.331662479035546, 0.0957427107756332, 6.49923072370876, -1.87616630392937, -2.15580611373101, 11.0554159678513, 0, 0, 0, 9.44035859331468, -1.46249406456535, 0.42218567093252, -2.04706526287664, 0.59093684028528, 0.522319308773341, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.71269767715534, 1.16057691494799, 1.34011878852098, 1.89521416591737, 0.36187343222787, 1.96214168703486, -0.566421515598891, 2.74642624930238, 3.17129986868838, -1.82198870938951, 0, 11.0554159678513, 0, 0, 1.59571184626056, 8.65223156827827, -2.49768411251822, -0.865042958313572, -0.998865569685858, 0.441440386136647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.32664991614217, 0.299659670905757, 2.07610309995256, 1.46802658041888, 0, 0.868496237346881, 1.31624465810882, 0.709124208342336, 4.91295663090392, -1.4113063856887, 0, 0, 11.0554159678513, 0, 0, 3.82970843102535, 5.80409338312195, -0.223353131420161, -1.54743588659733, 0.341938252770126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.765941686205071, 0, 1.49829835452879, 0.847565541382364, 0, 0, 1.62843044502542, 0, 3.54562104171167, -0.814818121686411, 0, 0, 0, 11.0554159678513, 0, 0, 7.18070330817254, 0, -1.11676565710082, 0.197418142283063, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741914, 1.00508909139074, -0.193429485824663, 3.55615782880926, -8.46157280212812, 0, 0, 4.45964044034301, -0.858258202906987, 2.67027285925186, 0, 0, 0, 0, 12.4373429638327, 0, 0, 8.42792824422443, -1.62195554683794, -2.29379153190448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.1489125293076, 0.259512887494073, 0.749149177264395, 2.75458800949267, 0, -8.46157280212812, 0, 1.15147421036811, 3.32401972660469, 2.06838446274243, 0, 0, 0, 0, 0, 12.4373429638327, 0, 2.17608171552749, 6.2818068211921, -1.77676328054754, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.663324958071074, 0, 0.692034366650849, 1.59036212878711, 0, 0, -8.46157280212813, 0, 3.07059789431495, 1.19418232635198, 0, 0, 0, 0, 0, 0, 12.4373429638327, 0, 5.80288457473997, -1.02581475831036, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.938083151964688, 7.62808987244126, 0, 3.11415464992885, 0, 0, 0, -7.5213980463361, 0, 5.52707620976691, 0, 0, 0, 0, 0, 0, 0, 14.2141062443803, 0, 5.80288457473998, 0, 0, 0, 0, 0, 1.03455020940032e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.541602560309059, 0, 7.62808987244125, 1.79795802543454, 0, 0, 0, 0, -7.52139804633611, 3.1910589375405, 0, 0, 0, 0, 0, 0, 0, 0, 14.2141062443803, 3.35029697130244, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-5.36159180343549, 0, 0, 8.8994381845148, 0, 0, 0, 0, -1.07784467308941e-14, -5.26497863243527, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16.583123951777, 0, 0, 0, 0, 0, 1.2461107758246e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    // Compute reference derivatives
    // Declare pointer to array of derivatives on FIAT element
    double *derivatives = new double [num_derivatives];
    
    // Declare coefficients
    double coeff0_0 = 0;
    double coeff0_1 = 0;
    double coeff0_2 = 0;
    double coeff0_3 = 0;
    double coeff0_4 = 0;
    double coeff0_5 = 0;
    double coeff0_6 = 0;
    double coeff0_7 = 0;
    double coeff0_8 = 0;
    double coeff0_9 = 0;
    double coeff0_10 = 0;
    double coeff0_11 = 0;
    double coeff0_12 = 0;
    double coeff0_13 = 0;
    double coeff0_14 = 0;
    double coeff0_15 = 0;
    double coeff0_16 = 0;
    double coeff0_17 = 0;
    double coeff0_18 = 0;
    double coeff0_19 = 0;
    double coeff0_20 = 0;
    double coeff0_21 = 0;
    double coeff0_22 = 0;
    double coeff0_23 = 0;
    double coeff0_24 = 0;
    double coeff0_25 = 0;
    double coeff0_26 = 0;
    double coeff0_27 = 0;
    double coeff0_28 = 0;
    double coeff0_29 = 0;
    double coeff0_30 = 0;
    double coeff0_31 = 0;
    double coeff0_32 = 0;
    double coeff0_33 = 0;
    double coeff0_34 = 0;
    
    // Declare new coefficients
    double new_coeff0_0 = 0;
    double new_coeff0_1 = 0;
    double new_coeff0_2 = 0;
    double new_coeff0_3 = 0;
    double new_coeff0_4 = 0;
    double new_coeff0_5 = 0;
    double new_coeff0_6 = 0;
    double new_coeff0_7 = 0;
    double new_coeff0_8 = 0;
    double new_coeff0_9 = 0;
    double new_coeff0_10 = 0;
    double new_coeff0_11 = 0;
    double new_coeff0_12 = 0;
    double new_coeff0_13 = 0;
    double new_coeff0_14 = 0;
    double new_coeff0_15 = 0;
    double new_coeff0_16 = 0;
    double new_coeff0_17 = 0;
    double new_coeff0_18 = 0;
    double new_coeff0_19 = 0;
    double new_coeff0_20 = 0;
    double new_coeff0_21 = 0;
    double new_coeff0_22 = 0;
    double new_coeff0_23 = 0;
    double new_coeff0_24 = 0;
    double new_coeff0_25 = 0;
    double new_coeff0_26 = 0;
    double new_coeff0_27 = 0;
    double new_coeff0_28 = 0;
    double new_coeff0_29 = 0;
    double new_coeff0_30 = 0;
    double new_coeff0_31 = 0;
    double new_coeff0_32 = 0;
    double new_coeff0_33 = 0;
    double new_coeff0_34 = 0;
    
    // Loop possible derivatives
    for (unsigned int deriv_num = 0; deriv_num < num_derivatives; deriv_num++)
    {
      // Get values from coefficients array
      new_coeff0_0 = coefficients0[dof][0];
      new_coeff0_1 = coefficients0[dof][1];
      new_coeff0_2 = coefficients0[dof][2];
      new_coeff0_3 = coefficients0[dof][3];
      new_coeff0_4 = coefficients0[dof][4];
      new_coeff0_5 = coefficients0[dof][5];
      new_coeff0_6 = coefficients0[dof][6];
      new_coeff0_7 = coefficients0[dof][7];
      new_coeff0_8 = coefficients0[dof][8];
      new_coeff0_9 = coefficients0[dof][9];
      new_coeff0_10 = coefficients0[dof][10];
      new_coeff0_11 = coefficients0[dof][11];
      new_coeff0_12 = coefficients0[dof][12];
      new_coeff0_13 = coefficients0[dof][13];
      new_coeff0_14 = coefficients0[dof][14];
      new_coeff0_15 = coefficients0[dof][15];
      new_coeff0_16 = coefficients0[dof][16];
      new_coeff0_17 = coefficients0[dof][17];
      new_coeff0_18 = coefficients0[dof][18];
      new_coeff0_19 = coefficients0[dof][19];
      new_coeff0_20 = coefficients0[dof][20];
      new_coeff0_21 = coefficients0[dof][21];
      new_coeff0_22 = coefficients0[dof][22];
      new_coeff0_23 = coefficients0[dof][23];
      new_coeff0_24 = coefficients0[dof][24];
      new_coeff0_25 = coefficients0[dof][25];
      new_coeff0_26 = coefficients0[dof][26];
      new_coeff0_27 = coefficients0[dof][27];
      new_coeff0_28 = coefficients0[dof][28];
      new_coeff0_29 = coefficients0[dof][29];
      new_coeff0_30 = coefficients0[dof][30];
      new_coeff0_31 = coefficients0[dof][31];
      new_coeff0_32 = coefficients0[dof][32];
      new_coeff0_33 = coefficients0[dof][33];
      new_coeff0_34 = coefficients0[dof][34];
    
      // Loop derivative order
      for (unsigned int j = 0; j < n; j++)
      {
        // Update old coefficients
        coeff0_0 = new_coeff0_0;
        coeff0_1 = new_coeff0_1;
        coeff0_2 = new_coeff0_2;
        coeff0_3 = new_coeff0_3;
        coeff0_4 = new_coeff0_4;
        coeff0_5 = new_coeff0_5;
        coeff0_6 = new_coeff0_6;
        coeff0_7 = new_coeff0_7;
        coeff0_8 = new_coeff0_8;
        coeff0_9 = new_coeff0_9;
        coeff0_10 = new_coeff0_10;
        coeff0_11 = new_coeff0_11;
        coeff0_12 = new_coeff0_12;
        coeff0_13 = new_coeff0_13;
        coeff0_14 = new_coeff0_14;
        coeff0_15 = new_coeff0_15;
        coeff0_16 = new_coeff0_16;
        coeff0_17 = new_coeff0_17;
        coeff0_18 = new_coeff0_18;
        coeff0_19 = new_coeff0_19;
        coeff0_20 = new_coeff0_20;
        coeff0_21 = new_coeff0_21;
        coeff0_22 = new_coeff0_22;
        coeff0_23 = new_coeff0_23;
        coeff0_24 = new_coeff0_24;
        coeff0_25 = new_coeff0_25;
        coeff0_26 = new_coeff0_26;
        coeff0_27 = new_coeff0_27;
        coeff0_28 = new_coeff0_28;
        coeff0_29 = new_coeff0_29;
        coeff0_30 = new_coeff0_30;
        coeff0_31 = new_coeff0_31;
        coeff0_32 = new_coeff0_32;
        coeff0_33 = new_coeff0_33;
        coeff0_34 = new_coeff0_34;
    
        if(combinations[deriv_num][j] == 0)
        {
          new_coeff0_0 = coeff0_0*dmats0[0][0] + coeff0_1*dmats0[1][0] + coeff0_2*dmats0[2][0] + coeff0_3*dmats0[3][0] + coeff0_4*dmats0[4][0] + coeff0_5*dmats0[5][0] + coeff0_6*dmats0[6][0] + coeff0_7*dmats0[7][0] + coeff0_8*dmats0[8][0] + coeff0_9*dmats0[9][0] + coeff0_10*dmats0[10][0] + coeff0_11*dmats0[11][0] + coeff0_12*dmats0[12][0] + coeff0_13*dmats0[13][0] + coeff0_14*dmats0[14][0] + coeff0_15*dmats0[15][0] + coeff0_16*dmats0[16][0] + coeff0_17*dmats0[17][0] + coeff0_18*dmats0[18][0] + coeff0_19*dmats0[19][0] + coeff0_20*dmats0[20][0] + coeff0_21*dmats0[21][0] + coeff0_22*dmats0[22][0] + coeff0_23*dmats0[23][0] + coeff0_24*dmats0[24][0] + coeff0_25*dmats0[25][0] + coeff0_26*dmats0[26][0] + coeff0_27*dmats0[27][0] + coeff0_28*dmats0[28][0] + coeff0_29*dmats0[29][0] + coeff0_30*dmats0[30][0] + coeff0_31*dmats0[31][0] + coeff0_32*dmats0[32][0] + coeff0_33*dmats0[33][0] + coeff0_34*dmats0[34][0];
          new_coeff0_1 = coeff0_0*dmats0[0][1] + coeff0_1*dmats0[1][1] + coeff0_2*dmats0[2][1] + coeff0_3*dmats0[3][1] + coeff0_4*dmats0[4][1] + coeff0_5*dmats0[5][1] + coeff0_6*dmats0[6][1] + coeff0_7*dmats0[7][1] + coeff0_8*dmats0[8][1] + coeff0_9*dmats0[9][1] + coeff0_10*dmats0[10][1] + coeff0_11*dmats0[11][1] + coeff0_12*dmats0[12][1] + coeff0_13*dmats0[13][1] + coeff0_14*dmats0[14][1] + coeff0_15*dmats0[15][1] + coeff0_16*dmats0[16][1] + coeff0_17*dmats0[17][1] + coeff0_18*dmats0[18][1] + coeff0_19*dmats0[19][1] + coeff0_20*dmats0[20][1] + coeff0_21*dmats0[21][1] + coeff0_22*dmats0[22][1] + coeff0_23*dmats0[23][1] + coeff0_24*dmats0[24][1] + coeff0_25*dmats0[25][1] + coeff0_26*dmats0[26][1] + coeff0_27*dmats0[27][1] + coeff0_28*dmats0[28][1] + coeff0_29*dmats0[29][1] + coeff0_30*dmats0[30][1] + coeff0_31*dmats0[31][1] + coeff0_32*dmats0[32][1] + coeff0_33*dmats0[33][1] + coeff0_34*dmats0[34][1];
          new_coeff0_2 = coeff0_0*dmats0[0][2] + coeff0_1*dmats0[1][2] + coeff0_2*dmats0[2][2] + coeff0_3*dmats0[3][2] + coeff0_4*dmats0[4][2] + coeff0_5*dmats0[5][2] + coeff0_6*dmats0[6][2] + coeff0_7*dmats0[7][2] + coeff0_8*dmats0[8][2] + coeff0_9*dmats0[9][2] + coeff0_10*dmats0[10][2] + coeff0_11*dmats0[11][2] + coeff0_12*dmats0[12][2] + coeff0_13*dmats0[13][2] + coeff0_14*dmats0[14][2] + coeff0_15*dmats0[15][2] + coeff0_16*dmats0[16][2] + coeff0_17*dmats0[17][2] + coeff0_18*dmats0[18][2] + coeff0_19*dmats0[19][2] + coeff0_20*dmats0[20][2] + coeff0_21*dmats0[21][2] + coeff0_22*dmats0[22][2] + coeff0_23*dmats0[23][2] + coeff0_24*dmats0[24][2] + coeff0_25*dmats0[25][2] + coeff0_26*dmats0[26][2] + coeff0_27*dmats0[27][2] + coeff0_28*dmats0[28][2] + coeff0_29*dmats0[29][2] + coeff0_30*dmats0[30][2] + coeff0_31*dmats0[31][2] + coeff0_32*dmats0[32][2] + coeff0_33*dmats0[33][2] + coeff0_34*dmats0[34][2];
          new_coeff0_3 = coeff0_0*dmats0[0][3] + coeff0_1*dmats0[1][3] + coeff0_2*dmats0[2][3] + coeff0_3*dmats0[3][3] + coeff0_4*dmats0[4][3] + coeff0_5*dmats0[5][3] + coeff0_6*dmats0[6][3] + coeff0_7*dmats0[7][3] + coeff0_8*dmats0[8][3] + coeff0_9*dmats0[9][3] + coeff0_10*dmats0[10][3] + coeff0_11*dmats0[11][3] + coeff0_12*dmats0[12][3] + coeff0_13*dmats0[13][3] + coeff0_14*dmats0[14][3] + coeff0_15*dmats0[15][3] + coeff0_16*dmats0[16][3] + coeff0_17*dmats0[17][3] + coeff0_18*dmats0[18][3] + coeff0_19*dmats0[19][3] + coeff0_20*dmats0[20][3] + coeff0_21*dmats0[21][3] + coeff0_22*dmats0[22][3] + coeff0_23*dmats0[23][3] + coeff0_24*dmats0[24][3] + coeff0_25*dmats0[25][3] + coeff0_26*dmats0[26][3] + coeff0_27*dmats0[27][3] + coeff0_28*dmats0[28][3] + coeff0_29*dmats0[29][3] + coeff0_30*dmats0[30][3] + coeff0_31*dmats0[31][3] + coeff0_32*dmats0[32][3] + coeff0_33*dmats0[33][3] + coeff0_34*dmats0[34][3];
          new_coeff0_4 = coeff0_0*dmats0[0][4] + coeff0_1*dmats0[1][4] + coeff0_2*dmats0[2][4] + coeff0_3*dmats0[3][4] + coeff0_4*dmats0[4][4] + coeff0_5*dmats0[5][4] + coeff0_6*dmats0[6][4] + coeff0_7*dmats0[7][4] + coeff0_8*dmats0[8][4] + coeff0_9*dmats0[9][4] + coeff0_10*dmats0[10][4] + coeff0_11*dmats0[11][4] + coeff0_12*dmats0[12][4] + coeff0_13*dmats0[13][4] + coeff0_14*dmats0[14][4] + coeff0_15*dmats0[15][4] + coeff0_16*dmats0[16][4] + coeff0_17*dmats0[17][4] + coeff0_18*dmats0[18][4] + coeff0_19*dmats0[19][4] + coeff0_20*dmats0[20][4] + coeff0_21*dmats0[21][4] + coeff0_22*dmats0[22][4] + coeff0_23*dmats0[23][4] + coeff0_24*dmats0[24][4] + coeff0_25*dmats0[25][4] + coeff0_26*dmats0[26][4] + coeff0_27*dmats0[27][4] + coeff0_28*dmats0[28][4] + coeff0_29*dmats0[29][4] + coeff0_30*dmats0[30][4] + coeff0_31*dmats0[31][4] + coeff0_32*dmats0[32][4] + coeff0_33*dmats0[33][4] + coeff0_34*dmats0[34][4];
          new_coeff0_5 = coeff0_0*dmats0[0][5] + coeff0_1*dmats0[1][5] + coeff0_2*dmats0[2][5] + coeff0_3*dmats0[3][5] + coeff0_4*dmats0[4][5] + coeff0_5*dmats0[5][5] + coeff0_6*dmats0[6][5] + coeff0_7*dmats0[7][5] + coeff0_8*dmats0[8][5] + coeff0_9*dmats0[9][5] + coeff0_10*dmats0[10][5] + coeff0_11*dmats0[11][5] + coeff0_12*dmats0[12][5] + coeff0_13*dmats0[13][5] + coeff0_14*dmats0[14][5] + coeff0_15*dmats0[15][5] + coeff0_16*dmats0[16][5] + coeff0_17*dmats0[17][5] + coeff0_18*dmats0[18][5] + coeff0_19*dmats0[19][5] + coeff0_20*dmats0[20][5] + coeff0_21*dmats0[21][5] + coeff0_22*dmats0[22][5] + coeff0_23*dmats0[23][5] + coeff0_24*dmats0[24][5] + coeff0_25*dmats0[25][5] + coeff0_26*dmats0[26][5] + coeff0_27*dmats0[27][5] + coeff0_28*dmats0[28][5] + coeff0_29*dmats0[29][5] + coeff0_30*dmats0[30][5] + coeff0_31*dmats0[31][5] + coeff0_32*dmats0[32][5] + coeff0_33*dmats0[33][5] + coeff0_34*dmats0[34][5];
          new_coeff0_6 = coeff0_0*dmats0[0][6] + coeff0_1*dmats0[1][6] + coeff0_2*dmats0[2][6] + coeff0_3*dmats0[3][6] + coeff0_4*dmats0[4][6] + coeff0_5*dmats0[5][6] + coeff0_6*dmats0[6][6] + coeff0_7*dmats0[7][6] + coeff0_8*dmats0[8][6] + coeff0_9*dmats0[9][6] + coeff0_10*dmats0[10][6] + coeff0_11*dmats0[11][6] + coeff0_12*dmats0[12][6] + coeff0_13*dmats0[13][6] + coeff0_14*dmats0[14][6] + coeff0_15*dmats0[15][6] + coeff0_16*dmats0[16][6] + coeff0_17*dmats0[17][6] + coeff0_18*dmats0[18][6] + coeff0_19*dmats0[19][6] + coeff0_20*dmats0[20][6] + coeff0_21*dmats0[21][6] + coeff0_22*dmats0[22][6] + coeff0_23*dmats0[23][6] + coeff0_24*dmats0[24][6] + coeff0_25*dmats0[25][6] + coeff0_26*dmats0[26][6] + coeff0_27*dmats0[27][6] + coeff0_28*dmats0[28][6] + coeff0_29*dmats0[29][6] + coeff0_30*dmats0[30][6] + coeff0_31*dmats0[31][6] + coeff0_32*dmats0[32][6] + coeff0_33*dmats0[33][6] + coeff0_34*dmats0[34][6];
          new_coeff0_7 = coeff0_0*dmats0[0][7] + coeff0_1*dmats0[1][7] + coeff0_2*dmats0[2][7] + coeff0_3*dmats0[3][7] + coeff0_4*dmats0[4][7] + coeff0_5*dmats0[5][7] + coeff0_6*dmats0[6][7] + coeff0_7*dmats0[7][7] + coeff0_8*dmats0[8][7] + coeff0_9*dmats0[9][7] + coeff0_10*dmats0[10][7] + coeff0_11*dmats0[11][7] + coeff0_12*dmats0[12][7] + coeff0_13*dmats0[13][7] + coeff0_14*dmats0[14][7] + coeff0_15*dmats0[15][7] + coeff0_16*dmats0[16][7] + coeff0_17*dmats0[17][7] + coeff0_18*dmats0[18][7] + coeff0_19*dmats0[19][7] + coeff0_20*dmats0[20][7] + coeff0_21*dmats0[21][7] + coeff0_22*dmats0[22][7] + coeff0_23*dmats0[23][7] + coeff0_24*dmats0[24][7] + coeff0_25*dmats0[25][7] + coeff0_26*dmats0[26][7] + coeff0_27*dmats0[27][7] + coeff0_28*dmats0[28][7] + coeff0_29*dmats0[29][7] + coeff0_30*dmats0[30][7] + coeff0_31*dmats0[31][7] + coeff0_32*dmats0[32][7] + coeff0_33*dmats0[33][7] + coeff0_34*dmats0[34][7];
          new_coeff0_8 = coeff0_0*dmats0[0][8] + coeff0_1*dmats0[1][8] + coeff0_2*dmats0[2][8] + coeff0_3*dmats0[3][8] + coeff0_4*dmats0[4][8] + coeff0_5*dmats0[5][8] + coeff0_6*dmats0[6][8] + coeff0_7*dmats0[7][8] + coeff0_8*dmats0[8][8] + coeff0_9*dmats0[9][8] + coeff0_10*dmats0[10][8] + coeff0_11*dmats0[11][8] + coeff0_12*dmats0[12][8] + coeff0_13*dmats0[13][8] + coeff0_14*dmats0[14][8] + coeff0_15*dmats0[15][8] + coeff0_16*dmats0[16][8] + coeff0_17*dmats0[17][8] + coeff0_18*dmats0[18][8] + coeff0_19*dmats0[19][8] + coeff0_20*dmats0[20][8] + coeff0_21*dmats0[21][8] + coeff0_22*dmats0[22][8] + coeff0_23*dmats0[23][8] + coeff0_24*dmats0[24][8] + coeff0_25*dmats0[25][8] + coeff0_26*dmats0[26][8] + coeff0_27*dmats0[27][8] + coeff0_28*dmats0[28][8] + coeff0_29*dmats0[29][8] + coeff0_30*dmats0[30][8] + coeff0_31*dmats0[31][8] + coeff0_32*dmats0[32][8] + coeff0_33*dmats0[33][8] + coeff0_34*dmats0[34][8];
          new_coeff0_9 = coeff0_0*dmats0[0][9] + coeff0_1*dmats0[1][9] + coeff0_2*dmats0[2][9] + coeff0_3*dmats0[3][9] + coeff0_4*dmats0[4][9] + coeff0_5*dmats0[5][9] + coeff0_6*dmats0[6][9] + coeff0_7*dmats0[7][9] + coeff0_8*dmats0[8][9] + coeff0_9*dmats0[9][9] + coeff0_10*dmats0[10][9] + coeff0_11*dmats0[11][9] + coeff0_12*dmats0[12][9] + coeff0_13*dmats0[13][9] + coeff0_14*dmats0[14][9] + coeff0_15*dmats0[15][9] + coeff0_16*dmats0[16][9] + coeff0_17*dmats0[17][9] + coeff0_18*dmats0[18][9] + coeff0_19*dmats0[19][9] + coeff0_20*dmats0[20][9] + coeff0_21*dmats0[21][9] + coeff0_22*dmats0[22][9] + coeff0_23*dmats0[23][9] + coeff0_24*dmats0[24][9] + coeff0_25*dmats0[25][9] + coeff0_26*dmats0[26][9] + coeff0_27*dmats0[27][9] + coeff0_28*dmats0[28][9] + coeff0_29*dmats0[29][9] + coeff0_30*dmats0[30][9] + coeff0_31*dmats0[31][9] + coeff0_32*dmats0[32][9] + coeff0_33*dmats0[33][9] + coeff0_34*dmats0[34][9];
          new_coeff0_10 = coeff0_0*dmats0[0][10] + coeff0_1*dmats0[1][10] + coeff0_2*dmats0[2][10] + coeff0_3*dmats0[3][10] + coeff0_4*dmats0[4][10] + coeff0_5*dmats0[5][10] + coeff0_6*dmats0[6][10] + coeff0_7*dmats0[7][10] + coeff0_8*dmats0[8][10] + coeff0_9*dmats0[9][10] + coeff0_10*dmats0[10][10] + coeff0_11*dmats0[11][10] + coeff0_12*dmats0[12][10] + coeff0_13*dmats0[13][10] + coeff0_14*dmats0[14][10] + coeff0_15*dmats0[15][10] + coeff0_16*dmats0[16][10] + coeff0_17*dmats0[17][10] + coeff0_18*dmats0[18][10] + coeff0_19*dmats0[19][10] + coeff0_20*dmats0[20][10] + coeff0_21*dmats0[21][10] + coeff0_22*dmats0[22][10] + coeff0_23*dmats0[23][10] + coeff0_24*dmats0[24][10] + coeff0_25*dmats0[25][10] + coeff0_26*dmats0[26][10] + coeff0_27*dmats0[27][10] + coeff0_28*dmats0[28][10] + coeff0_29*dmats0[29][10] + coeff0_30*dmats0[30][10] + coeff0_31*dmats0[31][10] + coeff0_32*dmats0[32][10] + coeff0_33*dmats0[33][10] + coeff0_34*dmats0[34][10];
          new_coeff0_11 = coeff0_0*dmats0[0][11] + coeff0_1*dmats0[1][11] + coeff0_2*dmats0[2][11] + coeff0_3*dmats0[3][11] + coeff0_4*dmats0[4][11] + coeff0_5*dmats0[5][11] + coeff0_6*dmats0[6][11] + coeff0_7*dmats0[7][11] + coeff0_8*dmats0[8][11] + coeff0_9*dmats0[9][11] + coeff0_10*dmats0[10][11] + coeff0_11*dmats0[11][11] + coeff0_12*dmats0[12][11] + coeff0_13*dmats0[13][11] + coeff0_14*dmats0[14][11] + coeff0_15*dmats0[15][11] + coeff0_16*dmats0[16][11] + coeff0_17*dmats0[17][11] + coeff0_18*dmats0[18][11] + coeff0_19*dmats0[19][11] + coeff0_20*dmats0[20][11] + coeff0_21*dmats0[21][11] + coeff0_22*dmats0[22][11] + coeff0_23*dmats0[23][11] + coeff0_24*dmats0[24][11] + coeff0_25*dmats0[25][11] + coeff0_26*dmats0[26][11] + coeff0_27*dmats0[27][11] + coeff0_28*dmats0[28][11] + coeff0_29*dmats0[29][11] + coeff0_30*dmats0[30][11] + coeff0_31*dmats0[31][11] + coeff0_32*dmats0[32][11] + coeff0_33*dmats0[33][11] + coeff0_34*dmats0[34][11];
          new_coeff0_12 = coeff0_0*dmats0[0][12] + coeff0_1*dmats0[1][12] + coeff0_2*dmats0[2][12] + coeff0_3*dmats0[3][12] + coeff0_4*dmats0[4][12] + coeff0_5*dmats0[5][12] + coeff0_6*dmats0[6][12] + coeff0_7*dmats0[7][12] + coeff0_8*dmats0[8][12] + coeff0_9*dmats0[9][12] + coeff0_10*dmats0[10][12] + coeff0_11*dmats0[11][12] + coeff0_12*dmats0[12][12] + coeff0_13*dmats0[13][12] + coeff0_14*dmats0[14][12] + coeff0_15*dmats0[15][12] + coeff0_16*dmats0[16][12] + coeff0_17*dmats0[17][12] + coeff0_18*dmats0[18][12] + coeff0_19*dmats0[19][12] + coeff0_20*dmats0[20][12] + coeff0_21*dmats0[21][12] + coeff0_22*dmats0[22][12] + coeff0_23*dmats0[23][12] + coeff0_24*dmats0[24][12] + coeff0_25*dmats0[25][12] + coeff0_26*dmats0[26][12] + coeff0_27*dmats0[27][12] + coeff0_28*dmats0[28][12] + coeff0_29*dmats0[29][12] + coeff0_30*dmats0[30][12] + coeff0_31*dmats0[31][12] + coeff0_32*dmats0[32][12] + coeff0_33*dmats0[33][12] + coeff0_34*dmats0[34][12];
          new_coeff0_13 = coeff0_0*dmats0[0][13] + coeff0_1*dmats0[1][13] + coeff0_2*dmats0[2][13] + coeff0_3*dmats0[3][13] + coeff0_4*dmats0[4][13] + coeff0_5*dmats0[5][13] + coeff0_6*dmats0[6][13] + coeff0_7*dmats0[7][13] + coeff0_8*dmats0[8][13] + coeff0_9*dmats0[9][13] + coeff0_10*dmats0[10][13] + coeff0_11*dmats0[11][13] + coeff0_12*dmats0[12][13] + coeff0_13*dmats0[13][13] + coeff0_14*dmats0[14][13] + coeff0_15*dmats0[15][13] + coeff0_16*dmats0[16][13] + coeff0_17*dmats0[17][13] + coeff0_18*dmats0[18][13] + coeff0_19*dmats0[19][13] + coeff0_20*dmats0[20][13] + coeff0_21*dmats0[21][13] + coeff0_22*dmats0[22][13] + coeff0_23*dmats0[23][13] + coeff0_24*dmats0[24][13] + coeff0_25*dmats0[25][13] + coeff0_26*dmats0[26][13] + coeff0_27*dmats0[27][13] + coeff0_28*dmats0[28][13] + coeff0_29*dmats0[29][13] + coeff0_30*dmats0[30][13] + coeff0_31*dmats0[31][13] + coeff0_32*dmats0[32][13] + coeff0_33*dmats0[33][13] + coeff0_34*dmats0[34][13];
          new_coeff0_14 = coeff0_0*dmats0[0][14] + coeff0_1*dmats0[1][14] + coeff0_2*dmats0[2][14] + coeff0_3*dmats0[3][14] + coeff0_4*dmats0[4][14] + coeff0_5*dmats0[5][14] + coeff0_6*dmats0[6][14] + coeff0_7*dmats0[7][14] + coeff0_8*dmats0[8][14] + coeff0_9*dmats0[9][14] + coeff0_10*dmats0[10][14] + coeff0_11*dmats0[11][14] + coeff0_12*dmats0[12][14] + coeff0_13*dmats0[13][14] + coeff0_14*dmats0[14][14] + coeff0_15*dmats0[15][14] + coeff0_16*dmats0[16][14] + coeff0_17*dmats0[17][14] + coeff0_18*dmats0[18][14] + coeff0_19*dmats0[19][14] + coeff0_20*dmats0[20][14] + coeff0_21*dmats0[21][14] + coeff0_22*dmats0[22][14] + coeff0_23*dmats0[23][14] + coeff0_24*dmats0[24][14] + coeff0_25*dmats0[25][14] + coeff0_26*dmats0[26][14] + coeff0_27*dmats0[27][14] + coeff0_28*dmats0[28][14] + coeff0_29*dmats0[29][14] + coeff0_30*dmats0[30][14] + coeff0_31*dmats0[31][14] + coeff0_32*dmats0[32][14] + coeff0_33*dmats0[33][14] + coeff0_34*dmats0[34][14];
          new_coeff0_15 = coeff0_0*dmats0[0][15] + coeff0_1*dmats0[1][15] + coeff0_2*dmats0[2][15] + coeff0_3*dmats0[3][15] + coeff0_4*dmats0[4][15] + coeff0_5*dmats0[5][15] + coeff0_6*dmats0[6][15] + coeff0_7*dmats0[7][15] + coeff0_8*dmats0[8][15] + coeff0_9*dmats0[9][15] + coeff0_10*dmats0[10][15] + coeff0_11*dmats0[11][15] + coeff0_12*dmats0[12][15] + coeff0_13*dmats0[13][15] + coeff0_14*dmats0[14][15] + coeff0_15*dmats0[15][15] + coeff0_16*dmats0[16][15] + coeff0_17*dmats0[17][15] + coeff0_18*dmats0[18][15] + coeff0_19*dmats0[19][15] + coeff0_20*dmats0[20][15] + coeff0_21*dmats0[21][15] + coeff0_22*dmats0[22][15] + coeff0_23*dmats0[23][15] + coeff0_24*dmats0[24][15] + coeff0_25*dmats0[25][15] + coeff0_26*dmats0[26][15] + coeff0_27*dmats0[27][15] + coeff0_28*dmats0[28][15] + coeff0_29*dmats0[29][15] + coeff0_30*dmats0[30][15] + coeff0_31*dmats0[31][15] + coeff0_32*dmats0[32][15] + coeff0_33*dmats0[33][15] + coeff0_34*dmats0[34][15];
          new_coeff0_16 = coeff0_0*dmats0[0][16] + coeff0_1*dmats0[1][16] + coeff0_2*dmats0[2][16] + coeff0_3*dmats0[3][16] + coeff0_4*dmats0[4][16] + coeff0_5*dmats0[5][16] + coeff0_6*dmats0[6][16] + coeff0_7*dmats0[7][16] + coeff0_8*dmats0[8][16] + coeff0_9*dmats0[9][16] + coeff0_10*dmats0[10][16] + coeff0_11*dmats0[11][16] + coeff0_12*dmats0[12][16] + coeff0_13*dmats0[13][16] + coeff0_14*dmats0[14][16] + coeff0_15*dmats0[15][16] + coeff0_16*dmats0[16][16] + coeff0_17*dmats0[17][16] + coeff0_18*dmats0[18][16] + coeff0_19*dmats0[19][16] + coeff0_20*dmats0[20][16] + coeff0_21*dmats0[21][16] + coeff0_22*dmats0[22][16] + coeff0_23*dmats0[23][16] + coeff0_24*dmats0[24][16] + coeff0_25*dmats0[25][16] + coeff0_26*dmats0[26][16] + coeff0_27*dmats0[27][16] + coeff0_28*dmats0[28][16] + coeff0_29*dmats0[29][16] + coeff0_30*dmats0[30][16] + coeff0_31*dmats0[31][16] + coeff0_32*dmats0[32][16] + coeff0_33*dmats0[33][16] + coeff0_34*dmats0[34][16];
          new_coeff0_17 = coeff0_0*dmats0[0][17] + coeff0_1*dmats0[1][17] + coeff0_2*dmats0[2][17] + coeff0_3*dmats0[3][17] + coeff0_4*dmats0[4][17] + coeff0_5*dmats0[5][17] + coeff0_6*dmats0[6][17] + coeff0_7*dmats0[7][17] + coeff0_8*dmats0[8][17] + coeff0_9*dmats0[9][17] + coeff0_10*dmats0[10][17] + coeff0_11*dmats0[11][17] + coeff0_12*dmats0[12][17] + coeff0_13*dmats0[13][17] + coeff0_14*dmats0[14][17] + coeff0_15*dmats0[15][17] + coeff0_16*dmats0[16][17] + coeff0_17*dmats0[17][17] + coeff0_18*dmats0[18][17] + coeff0_19*dmats0[19][17] + coeff0_20*dmats0[20][17] + coeff0_21*dmats0[21][17] + coeff0_22*dmats0[22][17] + coeff0_23*dmats0[23][17] + coeff0_24*dmats0[24][17] + coeff0_25*dmats0[25][17] + coeff0_26*dmats0[26][17] + coeff0_27*dmats0[27][17] + coeff0_28*dmats0[28][17] + coeff0_29*dmats0[29][17] + coeff0_30*dmats0[30][17] + coeff0_31*dmats0[31][17] + coeff0_32*dmats0[32][17] + coeff0_33*dmats0[33][17] + coeff0_34*dmats0[34][17];
          new_coeff0_18 = coeff0_0*dmats0[0][18] + coeff0_1*dmats0[1][18] + coeff0_2*dmats0[2][18] + coeff0_3*dmats0[3][18] + coeff0_4*dmats0[4][18] + coeff0_5*dmats0[5][18] + coeff0_6*dmats0[6][18] + coeff0_7*dmats0[7][18] + coeff0_8*dmats0[8][18] + coeff0_9*dmats0[9][18] + coeff0_10*dmats0[10][18] + coeff0_11*dmats0[11][18] + coeff0_12*dmats0[12][18] + coeff0_13*dmats0[13][18] + coeff0_14*dmats0[14][18] + coeff0_15*dmats0[15][18] + coeff0_16*dmats0[16][18] + coeff0_17*dmats0[17][18] + coeff0_18*dmats0[18][18] + coeff0_19*dmats0[19][18] + coeff0_20*dmats0[20][18] + coeff0_21*dmats0[21][18] + coeff0_22*dmats0[22][18] + coeff0_23*dmats0[23][18] + coeff0_24*dmats0[24][18] + coeff0_25*dmats0[25][18] + coeff0_26*dmats0[26][18] + coeff0_27*dmats0[27][18] + coeff0_28*dmats0[28][18] + coeff0_29*dmats0[29][18] + coeff0_30*dmats0[30][18] + coeff0_31*dmats0[31][18] + coeff0_32*dmats0[32][18] + coeff0_33*dmats0[33][18] + coeff0_34*dmats0[34][18];
          new_coeff0_19 = coeff0_0*dmats0[0][19] + coeff0_1*dmats0[1][19] + coeff0_2*dmats0[2][19] + coeff0_3*dmats0[3][19] + coeff0_4*dmats0[4][19] + coeff0_5*dmats0[5][19] + coeff0_6*dmats0[6][19] + coeff0_7*dmats0[7][19] + coeff0_8*dmats0[8][19] + coeff0_9*dmats0[9][19] + coeff0_10*dmats0[10][19] + coeff0_11*dmats0[11][19] + coeff0_12*dmats0[12][19] + coeff0_13*dmats0[13][19] + coeff0_14*dmats0[14][19] + coeff0_15*dmats0[15][19] + coeff0_16*dmats0[16][19] + coeff0_17*dmats0[17][19] + coeff0_18*dmats0[18][19] + coeff0_19*dmats0[19][19] + coeff0_20*dmats0[20][19] + coeff0_21*dmats0[21][19] + coeff0_22*dmats0[22][19] + coeff0_23*dmats0[23][19] + coeff0_24*dmats0[24][19] + coeff0_25*dmats0[25][19] + coeff0_26*dmats0[26][19] + coeff0_27*dmats0[27][19] + coeff0_28*dmats0[28][19] + coeff0_29*dmats0[29][19] + coeff0_30*dmats0[30][19] + coeff0_31*dmats0[31][19] + coeff0_32*dmats0[32][19] + coeff0_33*dmats0[33][19] + coeff0_34*dmats0[34][19];
          new_coeff0_20 = coeff0_0*dmats0[0][20] + coeff0_1*dmats0[1][20] + coeff0_2*dmats0[2][20] + coeff0_3*dmats0[3][20] + coeff0_4*dmats0[4][20] + coeff0_5*dmats0[5][20] + coeff0_6*dmats0[6][20] + coeff0_7*dmats0[7][20] + coeff0_8*dmats0[8][20] + coeff0_9*dmats0[9][20] + coeff0_10*dmats0[10][20] + coeff0_11*dmats0[11][20] + coeff0_12*dmats0[12][20] + coeff0_13*dmats0[13][20] + coeff0_14*dmats0[14][20] + coeff0_15*dmats0[15][20] + coeff0_16*dmats0[16][20] + coeff0_17*dmats0[17][20] + coeff0_18*dmats0[18][20] + coeff0_19*dmats0[19][20] + coeff0_20*dmats0[20][20] + coeff0_21*dmats0[21][20] + coeff0_22*dmats0[22][20] + coeff0_23*dmats0[23][20] + coeff0_24*dmats0[24][20] + coeff0_25*dmats0[25][20] + coeff0_26*dmats0[26][20] + coeff0_27*dmats0[27][20] + coeff0_28*dmats0[28][20] + coeff0_29*dmats0[29][20] + coeff0_30*dmats0[30][20] + coeff0_31*dmats0[31][20] + coeff0_32*dmats0[32][20] + coeff0_33*dmats0[33][20] + coeff0_34*dmats0[34][20];
          new_coeff0_21 = coeff0_0*dmats0[0][21] + coeff0_1*dmats0[1][21] + coeff0_2*dmats0[2][21] + coeff0_3*dmats0[3][21] + coeff0_4*dmats0[4][21] + coeff0_5*dmats0[5][21] + coeff0_6*dmats0[6][21] + coeff0_7*dmats0[7][21] + coeff0_8*dmats0[8][21] + coeff0_9*dmats0[9][21] + coeff0_10*dmats0[10][21] + coeff0_11*dmats0[11][21] + coeff0_12*dmats0[12][21] + coeff0_13*dmats0[13][21] + coeff0_14*dmats0[14][21] + coeff0_15*dmats0[15][21] + coeff0_16*dmats0[16][21] + coeff0_17*dmats0[17][21] + coeff0_18*dmats0[18][21] + coeff0_19*dmats0[19][21] + coeff0_20*dmats0[20][21] + coeff0_21*dmats0[21][21] + coeff0_22*dmats0[22][21] + coeff0_23*dmats0[23][21] + coeff0_24*dmats0[24][21] + coeff0_25*dmats0[25][21] + coeff0_26*dmats0[26][21] + coeff0_27*dmats0[27][21] + coeff0_28*dmats0[28][21] + coeff0_29*dmats0[29][21] + coeff0_30*dmats0[30][21] + coeff0_31*dmats0[31][21] + coeff0_32*dmats0[32][21] + coeff0_33*dmats0[33][21] + coeff0_34*dmats0[34][21];
          new_coeff0_22 = coeff0_0*dmats0[0][22] + coeff0_1*dmats0[1][22] + coeff0_2*dmats0[2][22] + coeff0_3*dmats0[3][22] + coeff0_4*dmats0[4][22] + coeff0_5*dmats0[5][22] + coeff0_6*dmats0[6][22] + coeff0_7*dmats0[7][22] + coeff0_8*dmats0[8][22] + coeff0_9*dmats0[9][22] + coeff0_10*dmats0[10][22] + coeff0_11*dmats0[11][22] + coeff0_12*dmats0[12][22] + coeff0_13*dmats0[13][22] + coeff0_14*dmats0[14][22] + coeff0_15*dmats0[15][22] + coeff0_16*dmats0[16][22] + coeff0_17*dmats0[17][22] + coeff0_18*dmats0[18][22] + coeff0_19*dmats0[19][22] + coeff0_20*dmats0[20][22] + coeff0_21*dmats0[21][22] + coeff0_22*dmats0[22][22] + coeff0_23*dmats0[23][22] + coeff0_24*dmats0[24][22] + coeff0_25*dmats0[25][22] + coeff0_26*dmats0[26][22] + coeff0_27*dmats0[27][22] + coeff0_28*dmats0[28][22] + coeff0_29*dmats0[29][22] + coeff0_30*dmats0[30][22] + coeff0_31*dmats0[31][22] + coeff0_32*dmats0[32][22] + coeff0_33*dmats0[33][22] + coeff0_34*dmats0[34][22];
          new_coeff0_23 = coeff0_0*dmats0[0][23] + coeff0_1*dmats0[1][23] + coeff0_2*dmats0[2][23] + coeff0_3*dmats0[3][23] + coeff0_4*dmats0[4][23] + coeff0_5*dmats0[5][23] + coeff0_6*dmats0[6][23] + coeff0_7*dmats0[7][23] + coeff0_8*dmats0[8][23] + coeff0_9*dmats0[9][23] + coeff0_10*dmats0[10][23] + coeff0_11*dmats0[11][23] + coeff0_12*dmats0[12][23] + coeff0_13*dmats0[13][23] + coeff0_14*dmats0[14][23] + coeff0_15*dmats0[15][23] + coeff0_16*dmats0[16][23] + coeff0_17*dmats0[17][23] + coeff0_18*dmats0[18][23] + coeff0_19*dmats0[19][23] + coeff0_20*dmats0[20][23] + coeff0_21*dmats0[21][23] + coeff0_22*dmats0[22][23] + coeff0_23*dmats0[23][23] + coeff0_24*dmats0[24][23] + coeff0_25*dmats0[25][23] + coeff0_26*dmats0[26][23] + coeff0_27*dmats0[27][23] + coeff0_28*dmats0[28][23] + coeff0_29*dmats0[29][23] + coeff0_30*dmats0[30][23] + coeff0_31*dmats0[31][23] + coeff0_32*dmats0[32][23] + coeff0_33*dmats0[33][23] + coeff0_34*dmats0[34][23];
          new_coeff0_24 = coeff0_0*dmats0[0][24] + coeff0_1*dmats0[1][24] + coeff0_2*dmats0[2][24] + coeff0_3*dmats0[3][24] + coeff0_4*dmats0[4][24] + coeff0_5*dmats0[5][24] + coeff0_6*dmats0[6][24] + coeff0_7*dmats0[7][24] + coeff0_8*dmats0[8][24] + coeff0_9*dmats0[9][24] + coeff0_10*dmats0[10][24] + coeff0_11*dmats0[11][24] + coeff0_12*dmats0[12][24] + coeff0_13*dmats0[13][24] + coeff0_14*dmats0[14][24] + coeff0_15*dmats0[15][24] + coeff0_16*dmats0[16][24] + coeff0_17*dmats0[17][24] + coeff0_18*dmats0[18][24] + coeff0_19*dmats0[19][24] + coeff0_20*dmats0[20][24] + coeff0_21*dmats0[21][24] + coeff0_22*dmats0[22][24] + coeff0_23*dmats0[23][24] + coeff0_24*dmats0[24][24] + coeff0_25*dmats0[25][24] + coeff0_26*dmats0[26][24] + coeff0_27*dmats0[27][24] + coeff0_28*dmats0[28][24] + coeff0_29*dmats0[29][24] + coeff0_30*dmats0[30][24] + coeff0_31*dmats0[31][24] + coeff0_32*dmats0[32][24] + coeff0_33*dmats0[33][24] + coeff0_34*dmats0[34][24];
          new_coeff0_25 = coeff0_0*dmats0[0][25] + coeff0_1*dmats0[1][25] + coeff0_2*dmats0[2][25] + coeff0_3*dmats0[3][25] + coeff0_4*dmats0[4][25] + coeff0_5*dmats0[5][25] + coeff0_6*dmats0[6][25] + coeff0_7*dmats0[7][25] + coeff0_8*dmats0[8][25] + coeff0_9*dmats0[9][25] + coeff0_10*dmats0[10][25] + coeff0_11*dmats0[11][25] + coeff0_12*dmats0[12][25] + coeff0_13*dmats0[13][25] + coeff0_14*dmats0[14][25] + coeff0_15*dmats0[15][25] + coeff0_16*dmats0[16][25] + coeff0_17*dmats0[17][25] + coeff0_18*dmats0[18][25] + coeff0_19*dmats0[19][25] + coeff0_20*dmats0[20][25] + coeff0_21*dmats0[21][25] + coeff0_22*dmats0[22][25] + coeff0_23*dmats0[23][25] + coeff0_24*dmats0[24][25] + coeff0_25*dmats0[25][25] + coeff0_26*dmats0[26][25] + coeff0_27*dmats0[27][25] + coeff0_28*dmats0[28][25] + coeff0_29*dmats0[29][25] + coeff0_30*dmats0[30][25] + coeff0_31*dmats0[31][25] + coeff0_32*dmats0[32][25] + coeff0_33*dmats0[33][25] + coeff0_34*dmats0[34][25];
          new_coeff0_26 = coeff0_0*dmats0[0][26] + coeff0_1*dmats0[1][26] + coeff0_2*dmats0[2][26] + coeff0_3*dmats0[3][26] + coeff0_4*dmats0[4][26] + coeff0_5*dmats0[5][26] + coeff0_6*dmats0[6][26] + coeff0_7*dmats0[7][26] + coeff0_8*dmats0[8][26] + coeff0_9*dmats0[9][26] + coeff0_10*dmats0[10][26] + coeff0_11*dmats0[11][26] + coeff0_12*dmats0[12][26] + coeff0_13*dmats0[13][26] + coeff0_14*dmats0[14][26] + coeff0_15*dmats0[15][26] + coeff0_16*dmats0[16][26] + coeff0_17*dmats0[17][26] + coeff0_18*dmats0[18][26] + coeff0_19*dmats0[19][26] + coeff0_20*dmats0[20][26] + coeff0_21*dmats0[21][26] + coeff0_22*dmats0[22][26] + coeff0_23*dmats0[23][26] + coeff0_24*dmats0[24][26] + coeff0_25*dmats0[25][26] + coeff0_26*dmats0[26][26] + coeff0_27*dmats0[27][26] + coeff0_28*dmats0[28][26] + coeff0_29*dmats0[29][26] + coeff0_30*dmats0[30][26] + coeff0_31*dmats0[31][26] + coeff0_32*dmats0[32][26] + coeff0_33*dmats0[33][26] + coeff0_34*dmats0[34][26];
          new_coeff0_27 = coeff0_0*dmats0[0][27] + coeff0_1*dmats0[1][27] + coeff0_2*dmats0[2][27] + coeff0_3*dmats0[3][27] + coeff0_4*dmats0[4][27] + coeff0_5*dmats0[5][27] + coeff0_6*dmats0[6][27] + coeff0_7*dmats0[7][27] + coeff0_8*dmats0[8][27] + coeff0_9*dmats0[9][27] + coeff0_10*dmats0[10][27] + coeff0_11*dmats0[11][27] + coeff0_12*dmats0[12][27] + coeff0_13*dmats0[13][27] + coeff0_14*dmats0[14][27] + coeff0_15*dmats0[15][27] + coeff0_16*dmats0[16][27] + coeff0_17*dmats0[17][27] + coeff0_18*dmats0[18][27] + coeff0_19*dmats0[19][27] + coeff0_20*dmats0[20][27] + coeff0_21*dmats0[21][27] + coeff0_22*dmats0[22][27] + coeff0_23*dmats0[23][27] + coeff0_24*dmats0[24][27] + coeff0_25*dmats0[25][27] + coeff0_26*dmats0[26][27] + coeff0_27*dmats0[27][27] + coeff0_28*dmats0[28][27] + coeff0_29*dmats0[29][27] + coeff0_30*dmats0[30][27] + coeff0_31*dmats0[31][27] + coeff0_32*dmats0[32][27] + coeff0_33*dmats0[33][27] + coeff0_34*dmats0[34][27];
          new_coeff0_28 = coeff0_0*dmats0[0][28] + coeff0_1*dmats0[1][28] + coeff0_2*dmats0[2][28] + coeff0_3*dmats0[3][28] + coeff0_4*dmats0[4][28] + coeff0_5*dmats0[5][28] + coeff0_6*dmats0[6][28] + coeff0_7*dmats0[7][28] + coeff0_8*dmats0[8][28] + coeff0_9*dmats0[9][28] + coeff0_10*dmats0[10][28] + coeff0_11*dmats0[11][28] + coeff0_12*dmats0[12][28] + coeff0_13*dmats0[13][28] + coeff0_14*dmats0[14][28] + coeff0_15*dmats0[15][28] + coeff0_16*dmats0[16][28] + coeff0_17*dmats0[17][28] + coeff0_18*dmats0[18][28] + coeff0_19*dmats0[19][28] + coeff0_20*dmats0[20][28] + coeff0_21*dmats0[21][28] + coeff0_22*dmats0[22][28] + coeff0_23*dmats0[23][28] + coeff0_24*dmats0[24][28] + coeff0_25*dmats0[25][28] + coeff0_26*dmats0[26][28] + coeff0_27*dmats0[27][28] + coeff0_28*dmats0[28][28] + coeff0_29*dmats0[29][28] + coeff0_30*dmats0[30][28] + coeff0_31*dmats0[31][28] + coeff0_32*dmats0[32][28] + coeff0_33*dmats0[33][28] + coeff0_34*dmats0[34][28];
          new_coeff0_29 = coeff0_0*dmats0[0][29] + coeff0_1*dmats0[1][29] + coeff0_2*dmats0[2][29] + coeff0_3*dmats0[3][29] + coeff0_4*dmats0[4][29] + coeff0_5*dmats0[5][29] + coeff0_6*dmats0[6][29] + coeff0_7*dmats0[7][29] + coeff0_8*dmats0[8][29] + coeff0_9*dmats0[9][29] + coeff0_10*dmats0[10][29] + coeff0_11*dmats0[11][29] + coeff0_12*dmats0[12][29] + coeff0_13*dmats0[13][29] + coeff0_14*dmats0[14][29] + coeff0_15*dmats0[15][29] + coeff0_16*dmats0[16][29] + coeff0_17*dmats0[17][29] + coeff0_18*dmats0[18][29] + coeff0_19*dmats0[19][29] + coeff0_20*dmats0[20][29] + coeff0_21*dmats0[21][29] + coeff0_22*dmats0[22][29] + coeff0_23*dmats0[23][29] + coeff0_24*dmats0[24][29] + coeff0_25*dmats0[25][29] + coeff0_26*dmats0[26][29] + coeff0_27*dmats0[27][29] + coeff0_28*dmats0[28][29] + coeff0_29*dmats0[29][29] + coeff0_30*dmats0[30][29] + coeff0_31*dmats0[31][29] + coeff0_32*dmats0[32][29] + coeff0_33*dmats0[33][29] + coeff0_34*dmats0[34][29];
          new_coeff0_30 = coeff0_0*dmats0[0][30] + coeff0_1*dmats0[1][30] + coeff0_2*dmats0[2][30] + coeff0_3*dmats0[3][30] + coeff0_4*dmats0[4][30] + coeff0_5*dmats0[5][30] + coeff0_6*dmats0[6][30] + coeff0_7*dmats0[7][30] + coeff0_8*dmats0[8][30] + coeff0_9*dmats0[9][30] + coeff0_10*dmats0[10][30] + coeff0_11*dmats0[11][30] + coeff0_12*dmats0[12][30] + coeff0_13*dmats0[13][30] + coeff0_14*dmats0[14][30] + coeff0_15*dmats0[15][30] + coeff0_16*dmats0[16][30] + coeff0_17*dmats0[17][30] + coeff0_18*dmats0[18][30] + coeff0_19*dmats0[19][30] + coeff0_20*dmats0[20][30] + coeff0_21*dmats0[21][30] + coeff0_22*dmats0[22][30] + coeff0_23*dmats0[23][30] + coeff0_24*dmats0[24][30] + coeff0_25*dmats0[25][30] + coeff0_26*dmats0[26][30] + coeff0_27*dmats0[27][30] + coeff0_28*dmats0[28][30] + coeff0_29*dmats0[29][30] + coeff0_30*dmats0[30][30] + coeff0_31*dmats0[31][30] + coeff0_32*dmats0[32][30] + coeff0_33*dmats0[33][30] + coeff0_34*dmats0[34][30];
          new_coeff0_31 = coeff0_0*dmats0[0][31] + coeff0_1*dmats0[1][31] + coeff0_2*dmats0[2][31] + coeff0_3*dmats0[3][31] + coeff0_4*dmats0[4][31] + coeff0_5*dmats0[5][31] + coeff0_6*dmats0[6][31] + coeff0_7*dmats0[7][31] + coeff0_8*dmats0[8][31] + coeff0_9*dmats0[9][31] + coeff0_10*dmats0[10][31] + coeff0_11*dmats0[11][31] + coeff0_12*dmats0[12][31] + coeff0_13*dmats0[13][31] + coeff0_14*dmats0[14][31] + coeff0_15*dmats0[15][31] + coeff0_16*dmats0[16][31] + coeff0_17*dmats0[17][31] + coeff0_18*dmats0[18][31] + coeff0_19*dmats0[19][31] + coeff0_20*dmats0[20][31] + coeff0_21*dmats0[21][31] + coeff0_22*dmats0[22][31] + coeff0_23*dmats0[23][31] + coeff0_24*dmats0[24][31] + coeff0_25*dmats0[25][31] + coeff0_26*dmats0[26][31] + coeff0_27*dmats0[27][31] + coeff0_28*dmats0[28][31] + coeff0_29*dmats0[29][31] + coeff0_30*dmats0[30][31] + coeff0_31*dmats0[31][31] + coeff0_32*dmats0[32][31] + coeff0_33*dmats0[33][31] + coeff0_34*dmats0[34][31];
          new_coeff0_32 = coeff0_0*dmats0[0][32] + coeff0_1*dmats0[1][32] + coeff0_2*dmats0[2][32] + coeff0_3*dmats0[3][32] + coeff0_4*dmats0[4][32] + coeff0_5*dmats0[5][32] + coeff0_6*dmats0[6][32] + coeff0_7*dmats0[7][32] + coeff0_8*dmats0[8][32] + coeff0_9*dmats0[9][32] + coeff0_10*dmats0[10][32] + coeff0_11*dmats0[11][32] + coeff0_12*dmats0[12][32] + coeff0_13*dmats0[13][32] + coeff0_14*dmats0[14][32] + coeff0_15*dmats0[15][32] + coeff0_16*dmats0[16][32] + coeff0_17*dmats0[17][32] + coeff0_18*dmats0[18][32] + coeff0_19*dmats0[19][32] + coeff0_20*dmats0[20][32] + coeff0_21*dmats0[21][32] + coeff0_22*dmats0[22][32] + coeff0_23*dmats0[23][32] + coeff0_24*dmats0[24][32] + coeff0_25*dmats0[25][32] + coeff0_26*dmats0[26][32] + coeff0_27*dmats0[27][32] + coeff0_28*dmats0[28][32] + coeff0_29*dmats0[29][32] + coeff0_30*dmats0[30][32] + coeff0_31*dmats0[31][32] + coeff0_32*dmats0[32][32] + coeff0_33*dmats0[33][32] + coeff0_34*dmats0[34][32];
          new_coeff0_33 = coeff0_0*dmats0[0][33] + coeff0_1*dmats0[1][33] + coeff0_2*dmats0[2][33] + coeff0_3*dmats0[3][33] + coeff0_4*dmats0[4][33] + coeff0_5*dmats0[5][33] + coeff0_6*dmats0[6][33] + coeff0_7*dmats0[7][33] + coeff0_8*dmats0[8][33] + coeff0_9*dmats0[9][33] + coeff0_10*dmats0[10][33] + coeff0_11*dmats0[11][33] + coeff0_12*dmats0[12][33] + coeff0_13*dmats0[13][33] + coeff0_14*dmats0[14][33] + coeff0_15*dmats0[15][33] + coeff0_16*dmats0[16][33] + coeff0_17*dmats0[17][33] + coeff0_18*dmats0[18][33] + coeff0_19*dmats0[19][33] + coeff0_20*dmats0[20][33] + coeff0_21*dmats0[21][33] + coeff0_22*dmats0[22][33] + coeff0_23*dmats0[23][33] + coeff0_24*dmats0[24][33] + coeff0_25*dmats0[25][33] + coeff0_26*dmats0[26][33] + coeff0_27*dmats0[27][33] + coeff0_28*dmats0[28][33] + coeff0_29*dmats0[29][33] + coeff0_30*dmats0[30][33] + coeff0_31*dmats0[31][33] + coeff0_32*dmats0[32][33] + coeff0_33*dmats0[33][33] + coeff0_34*dmats0[34][33];
          new_coeff0_34 = coeff0_0*dmats0[0][34] + coeff0_1*dmats0[1][34] + coeff0_2*dmats0[2][34] + coeff0_3*dmats0[3][34] + coeff0_4*dmats0[4][34] + coeff0_5*dmats0[5][34] + coeff0_6*dmats0[6][34] + coeff0_7*dmats0[7][34] + coeff0_8*dmats0[8][34] + coeff0_9*dmats0[9][34] + coeff0_10*dmats0[10][34] + coeff0_11*dmats0[11][34] + coeff0_12*dmats0[12][34] + coeff0_13*dmats0[13][34] + coeff0_14*dmats0[14][34] + coeff0_15*dmats0[15][34] + coeff0_16*dmats0[16][34] + coeff0_17*dmats0[17][34] + coeff0_18*dmats0[18][34] + coeff0_19*dmats0[19][34] + coeff0_20*dmats0[20][34] + coeff0_21*dmats0[21][34] + coeff0_22*dmats0[22][34] + coeff0_23*dmats0[23][34] + coeff0_24*dmats0[24][34] + coeff0_25*dmats0[25][34] + coeff0_26*dmats0[26][34] + coeff0_27*dmats0[27][34] + coeff0_28*dmats0[28][34] + coeff0_29*dmats0[29][34] + coeff0_30*dmats0[30][34] + coeff0_31*dmats0[31][34] + coeff0_32*dmats0[32][34] + coeff0_33*dmats0[33][34] + coeff0_34*dmats0[34][34];
        }
        if(combinations[deriv_num][j] == 1)
        {
          new_coeff0_0 = coeff0_0*dmats1[0][0] + coeff0_1*dmats1[1][0] + coeff0_2*dmats1[2][0] + coeff0_3*dmats1[3][0] + coeff0_4*dmats1[4][0] + coeff0_5*dmats1[5][0] + coeff0_6*dmats1[6][0] + coeff0_7*dmats1[7][0] + coeff0_8*dmats1[8][0] + coeff0_9*dmats1[9][0] + coeff0_10*dmats1[10][0] + coeff0_11*dmats1[11][0] + coeff0_12*dmats1[12][0] + coeff0_13*dmats1[13][0] + coeff0_14*dmats1[14][0] + coeff0_15*dmats1[15][0] + coeff0_16*dmats1[16][0] + coeff0_17*dmats1[17][0] + coeff0_18*dmats1[18][0] + coeff0_19*dmats1[19][0] + coeff0_20*dmats1[20][0] + coeff0_21*dmats1[21][0] + coeff0_22*dmats1[22][0] + coeff0_23*dmats1[23][0] + coeff0_24*dmats1[24][0] + coeff0_25*dmats1[25][0] + coeff0_26*dmats1[26][0] + coeff0_27*dmats1[27][0] + coeff0_28*dmats1[28][0] + coeff0_29*dmats1[29][0] + coeff0_30*dmats1[30][0] + coeff0_31*dmats1[31][0] + coeff0_32*dmats1[32][0] + coeff0_33*dmats1[33][0] + coeff0_34*dmats1[34][0];
          new_coeff0_1 = coeff0_0*dmats1[0][1] + coeff0_1*dmats1[1][1] + coeff0_2*dmats1[2][1] + coeff0_3*dmats1[3][1] + coeff0_4*dmats1[4][1] + coeff0_5*dmats1[5][1] + coeff0_6*dmats1[6][1] + coeff0_7*dmats1[7][1] + coeff0_8*dmats1[8][1] + coeff0_9*dmats1[9][1] + coeff0_10*dmats1[10][1] + coeff0_11*dmats1[11][1] + coeff0_12*dmats1[12][1] + coeff0_13*dmats1[13][1] + coeff0_14*dmats1[14][1] + coeff0_15*dmats1[15][1] + coeff0_16*dmats1[16][1] + coeff0_17*dmats1[17][1] + coeff0_18*dmats1[18][1] + coeff0_19*dmats1[19][1] + coeff0_20*dmats1[20][1] + coeff0_21*dmats1[21][1] + coeff0_22*dmats1[22][1] + coeff0_23*dmats1[23][1] + coeff0_24*dmats1[24][1] + coeff0_25*dmats1[25][1] + coeff0_26*dmats1[26][1] + coeff0_27*dmats1[27][1] + coeff0_28*dmats1[28][1] + coeff0_29*dmats1[29][1] + coeff0_30*dmats1[30][1] + coeff0_31*dmats1[31][1] + coeff0_32*dmats1[32][1] + coeff0_33*dmats1[33][1] + coeff0_34*dmats1[34][1];
          new_coeff0_2 = coeff0_0*dmats1[0][2] + coeff0_1*dmats1[1][2] + coeff0_2*dmats1[2][2] + coeff0_3*dmats1[3][2] + coeff0_4*dmats1[4][2] + coeff0_5*dmats1[5][2] + coeff0_6*dmats1[6][2] + coeff0_7*dmats1[7][2] + coeff0_8*dmats1[8][2] + coeff0_9*dmats1[9][2] + coeff0_10*dmats1[10][2] + coeff0_11*dmats1[11][2] + coeff0_12*dmats1[12][2] + coeff0_13*dmats1[13][2] + coeff0_14*dmats1[14][2] + coeff0_15*dmats1[15][2] + coeff0_16*dmats1[16][2] + coeff0_17*dmats1[17][2] + coeff0_18*dmats1[18][2] + coeff0_19*dmats1[19][2] + coeff0_20*dmats1[20][2] + coeff0_21*dmats1[21][2] + coeff0_22*dmats1[22][2] + coeff0_23*dmats1[23][2] + coeff0_24*dmats1[24][2] + coeff0_25*dmats1[25][2] + coeff0_26*dmats1[26][2] + coeff0_27*dmats1[27][2] + coeff0_28*dmats1[28][2] + coeff0_29*dmats1[29][2] + coeff0_30*dmats1[30][2] + coeff0_31*dmats1[31][2] + coeff0_32*dmats1[32][2] + coeff0_33*dmats1[33][2] + coeff0_34*dmats1[34][2];
          new_coeff0_3 = coeff0_0*dmats1[0][3] + coeff0_1*dmats1[1][3] + coeff0_2*dmats1[2][3] + coeff0_3*dmats1[3][3] + coeff0_4*dmats1[4][3] + coeff0_5*dmats1[5][3] + coeff0_6*dmats1[6][3] + coeff0_7*dmats1[7][3] + coeff0_8*dmats1[8][3] + coeff0_9*dmats1[9][3] + coeff0_10*dmats1[10][3] + coeff0_11*dmats1[11][3] + coeff0_12*dmats1[12][3] + coeff0_13*dmats1[13][3] + coeff0_14*dmats1[14][3] + coeff0_15*dmats1[15][3] + coeff0_16*dmats1[16][3] + coeff0_17*dmats1[17][3] + coeff0_18*dmats1[18][3] + coeff0_19*dmats1[19][3] + coeff0_20*dmats1[20][3] + coeff0_21*dmats1[21][3] + coeff0_22*dmats1[22][3] + coeff0_23*dmats1[23][3] + coeff0_24*dmats1[24][3] + coeff0_25*dmats1[25][3] + coeff0_26*dmats1[26][3] + coeff0_27*dmats1[27][3] + coeff0_28*dmats1[28][3] + coeff0_29*dmats1[29][3] + coeff0_30*dmats1[30][3] + coeff0_31*dmats1[31][3] + coeff0_32*dmats1[32][3] + coeff0_33*dmats1[33][3] + coeff0_34*dmats1[34][3];
          new_coeff0_4 = coeff0_0*dmats1[0][4] + coeff0_1*dmats1[1][4] + coeff0_2*dmats1[2][4] + coeff0_3*dmats1[3][4] + coeff0_4*dmats1[4][4] + coeff0_5*dmats1[5][4] + coeff0_6*dmats1[6][4] + coeff0_7*dmats1[7][4] + coeff0_8*dmats1[8][4] + coeff0_9*dmats1[9][4] + coeff0_10*dmats1[10][4] + coeff0_11*dmats1[11][4] + coeff0_12*dmats1[12][4] + coeff0_13*dmats1[13][4] + coeff0_14*dmats1[14][4] + coeff0_15*dmats1[15][4] + coeff0_16*dmats1[16][4] + coeff0_17*dmats1[17][4] + coeff0_18*dmats1[18][4] + coeff0_19*dmats1[19][4] + coeff0_20*dmats1[20][4] + coeff0_21*dmats1[21][4] + coeff0_22*dmats1[22][4] + coeff0_23*dmats1[23][4] + coeff0_24*dmats1[24][4] + coeff0_25*dmats1[25][4] + coeff0_26*dmats1[26][4] + coeff0_27*dmats1[27][4] + coeff0_28*dmats1[28][4] + coeff0_29*dmats1[29][4] + coeff0_30*dmats1[30][4] + coeff0_31*dmats1[31][4] + coeff0_32*dmats1[32][4] + coeff0_33*dmats1[33][4] + coeff0_34*dmats1[34][4];
          new_coeff0_5 = coeff0_0*dmats1[0][5] + coeff0_1*dmats1[1][5] + coeff0_2*dmats1[2][5] + coeff0_3*dmats1[3][5] + coeff0_4*dmats1[4][5] + coeff0_5*dmats1[5][5] + coeff0_6*dmats1[6][5] + coeff0_7*dmats1[7][5] + coeff0_8*dmats1[8][5] + coeff0_9*dmats1[9][5] + coeff0_10*dmats1[10][5] + coeff0_11*dmats1[11][5] + coeff0_12*dmats1[12][5] + coeff0_13*dmats1[13][5] + coeff0_14*dmats1[14][5] + coeff0_15*dmats1[15][5] + coeff0_16*dmats1[16][5] + coeff0_17*dmats1[17][5] + coeff0_18*dmats1[18][5] + coeff0_19*dmats1[19][5] + coeff0_20*dmats1[20][5] + coeff0_21*dmats1[21][5] + coeff0_22*dmats1[22][5] + coeff0_23*dmats1[23][5] + coeff0_24*dmats1[24][5] + coeff0_25*dmats1[25][5] + coeff0_26*dmats1[26][5] + coeff0_27*dmats1[27][5] + coeff0_28*dmats1[28][5] + coeff0_29*dmats1[29][5] + coeff0_30*dmats1[30][5] + coeff0_31*dmats1[31][5] + coeff0_32*dmats1[32][5] + coeff0_33*dmats1[33][5] + coeff0_34*dmats1[34][5];
          new_coeff0_6 = coeff0_0*dmats1[0][6] + coeff0_1*dmats1[1][6] + coeff0_2*dmats1[2][6] + coeff0_3*dmats1[3][6] + coeff0_4*dmats1[4][6] + coeff0_5*dmats1[5][6] + coeff0_6*dmats1[6][6] + coeff0_7*dmats1[7][6] + coeff0_8*dmats1[8][6] + coeff0_9*dmats1[9][6] + coeff0_10*dmats1[10][6] + coeff0_11*dmats1[11][6] + coeff0_12*dmats1[12][6] + coeff0_13*dmats1[13][6] + coeff0_14*dmats1[14][6] + coeff0_15*dmats1[15][6] + coeff0_16*dmats1[16][6] + coeff0_17*dmats1[17][6] + coeff0_18*dmats1[18][6] + coeff0_19*dmats1[19][6] + coeff0_20*dmats1[20][6] + coeff0_21*dmats1[21][6] + coeff0_22*dmats1[22][6] + coeff0_23*dmats1[23][6] + coeff0_24*dmats1[24][6] + coeff0_25*dmats1[25][6] + coeff0_26*dmats1[26][6] + coeff0_27*dmats1[27][6] + coeff0_28*dmats1[28][6] + coeff0_29*dmats1[29][6] + coeff0_30*dmats1[30][6] + coeff0_31*dmats1[31][6] + coeff0_32*dmats1[32][6] + coeff0_33*dmats1[33][6] + coeff0_34*dmats1[34][6];
          new_coeff0_7 = coeff0_0*dmats1[0][7] + coeff0_1*dmats1[1][7] + coeff0_2*dmats1[2][7] + coeff0_3*dmats1[3][7] + coeff0_4*dmats1[4][7] + coeff0_5*dmats1[5][7] + coeff0_6*dmats1[6][7] + coeff0_7*dmats1[7][7] + coeff0_8*dmats1[8][7] + coeff0_9*dmats1[9][7] + coeff0_10*dmats1[10][7] + coeff0_11*dmats1[11][7] + coeff0_12*dmats1[12][7] + coeff0_13*dmats1[13][7] + coeff0_14*dmats1[14][7] + coeff0_15*dmats1[15][7] + coeff0_16*dmats1[16][7] + coeff0_17*dmats1[17][7] + coeff0_18*dmats1[18][7] + coeff0_19*dmats1[19][7] + coeff0_20*dmats1[20][7] + coeff0_21*dmats1[21][7] + coeff0_22*dmats1[22][7] + coeff0_23*dmats1[23][7] + coeff0_24*dmats1[24][7] + coeff0_25*dmats1[25][7] + coeff0_26*dmats1[26][7] + coeff0_27*dmats1[27][7] + coeff0_28*dmats1[28][7] + coeff0_29*dmats1[29][7] + coeff0_30*dmats1[30][7] + coeff0_31*dmats1[31][7] + coeff0_32*dmats1[32][7] + coeff0_33*dmats1[33][7] + coeff0_34*dmats1[34][7];
          new_coeff0_8 = coeff0_0*dmats1[0][8] + coeff0_1*dmats1[1][8] + coeff0_2*dmats1[2][8] + coeff0_3*dmats1[3][8] + coeff0_4*dmats1[4][8] + coeff0_5*dmats1[5][8] + coeff0_6*dmats1[6][8] + coeff0_7*dmats1[7][8] + coeff0_8*dmats1[8][8] + coeff0_9*dmats1[9][8] + coeff0_10*dmats1[10][8] + coeff0_11*dmats1[11][8] + coeff0_12*dmats1[12][8] + coeff0_13*dmats1[13][8] + coeff0_14*dmats1[14][8] + coeff0_15*dmats1[15][8] + coeff0_16*dmats1[16][8] + coeff0_17*dmats1[17][8] + coeff0_18*dmats1[18][8] + coeff0_19*dmats1[19][8] + coeff0_20*dmats1[20][8] + coeff0_21*dmats1[21][8] + coeff0_22*dmats1[22][8] + coeff0_23*dmats1[23][8] + coeff0_24*dmats1[24][8] + coeff0_25*dmats1[25][8] + coeff0_26*dmats1[26][8] + coeff0_27*dmats1[27][8] + coeff0_28*dmats1[28][8] + coeff0_29*dmats1[29][8] + coeff0_30*dmats1[30][8] + coeff0_31*dmats1[31][8] + coeff0_32*dmats1[32][8] + coeff0_33*dmats1[33][8] + coeff0_34*dmats1[34][8];
          new_coeff0_9 = coeff0_0*dmats1[0][9] + coeff0_1*dmats1[1][9] + coeff0_2*dmats1[2][9] + coeff0_3*dmats1[3][9] + coeff0_4*dmats1[4][9] + coeff0_5*dmats1[5][9] + coeff0_6*dmats1[6][9] + coeff0_7*dmats1[7][9] + coeff0_8*dmats1[8][9] + coeff0_9*dmats1[9][9] + coeff0_10*dmats1[10][9] + coeff0_11*dmats1[11][9] + coeff0_12*dmats1[12][9] + coeff0_13*dmats1[13][9] + coeff0_14*dmats1[14][9] + coeff0_15*dmats1[15][9] + coeff0_16*dmats1[16][9] + coeff0_17*dmats1[17][9] + coeff0_18*dmats1[18][9] + coeff0_19*dmats1[19][9] + coeff0_20*dmats1[20][9] + coeff0_21*dmats1[21][9] + coeff0_22*dmats1[22][9] + coeff0_23*dmats1[23][9] + coeff0_24*dmats1[24][9] + coeff0_25*dmats1[25][9] + coeff0_26*dmats1[26][9] + coeff0_27*dmats1[27][9] + coeff0_28*dmats1[28][9] + coeff0_29*dmats1[29][9] + coeff0_30*dmats1[30][9] + coeff0_31*dmats1[31][9] + coeff0_32*dmats1[32][9] + coeff0_33*dmats1[33][9] + coeff0_34*dmats1[34][9];
          new_coeff0_10 = coeff0_0*dmats1[0][10] + coeff0_1*dmats1[1][10] + coeff0_2*dmats1[2][10] + coeff0_3*dmats1[3][10] + coeff0_4*dmats1[4][10] + coeff0_5*dmats1[5][10] + coeff0_6*dmats1[6][10] + coeff0_7*dmats1[7][10] + coeff0_8*dmats1[8][10] + coeff0_9*dmats1[9][10] + coeff0_10*dmats1[10][10] + coeff0_11*dmats1[11][10] + coeff0_12*dmats1[12][10] + coeff0_13*dmats1[13][10] + coeff0_14*dmats1[14][10] + coeff0_15*dmats1[15][10] + coeff0_16*dmats1[16][10] + coeff0_17*dmats1[17][10] + coeff0_18*dmats1[18][10] + coeff0_19*dmats1[19][10] + coeff0_20*dmats1[20][10] + coeff0_21*dmats1[21][10] + coeff0_22*dmats1[22][10] + coeff0_23*dmats1[23][10] + coeff0_24*dmats1[24][10] + coeff0_25*dmats1[25][10] + coeff0_26*dmats1[26][10] + coeff0_27*dmats1[27][10] + coeff0_28*dmats1[28][10] + coeff0_29*dmats1[29][10] + coeff0_30*dmats1[30][10] + coeff0_31*dmats1[31][10] + coeff0_32*dmats1[32][10] + coeff0_33*dmats1[33][10] + coeff0_34*dmats1[34][10];
          new_coeff0_11 = coeff0_0*dmats1[0][11] + coeff0_1*dmats1[1][11] + coeff0_2*dmats1[2][11] + coeff0_3*dmats1[3][11] + coeff0_4*dmats1[4][11] + coeff0_5*dmats1[5][11] + coeff0_6*dmats1[6][11] + coeff0_7*dmats1[7][11] + coeff0_8*dmats1[8][11] + coeff0_9*dmats1[9][11] + coeff0_10*dmats1[10][11] + coeff0_11*dmats1[11][11] + coeff0_12*dmats1[12][11] + coeff0_13*dmats1[13][11] + coeff0_14*dmats1[14][11] + coeff0_15*dmats1[15][11] + coeff0_16*dmats1[16][11] + coeff0_17*dmats1[17][11] + coeff0_18*dmats1[18][11] + coeff0_19*dmats1[19][11] + coeff0_20*dmats1[20][11] + coeff0_21*dmats1[21][11] + coeff0_22*dmats1[22][11] + coeff0_23*dmats1[23][11] + coeff0_24*dmats1[24][11] + coeff0_25*dmats1[25][11] + coeff0_26*dmats1[26][11] + coeff0_27*dmats1[27][11] + coeff0_28*dmats1[28][11] + coeff0_29*dmats1[29][11] + coeff0_30*dmats1[30][11] + coeff0_31*dmats1[31][11] + coeff0_32*dmats1[32][11] + coeff0_33*dmats1[33][11] + coeff0_34*dmats1[34][11];
          new_coeff0_12 = coeff0_0*dmats1[0][12] + coeff0_1*dmats1[1][12] + coeff0_2*dmats1[2][12] + coeff0_3*dmats1[3][12] + coeff0_4*dmats1[4][12] + coeff0_5*dmats1[5][12] + coeff0_6*dmats1[6][12] + coeff0_7*dmats1[7][12] + coeff0_8*dmats1[8][12] + coeff0_9*dmats1[9][12] + coeff0_10*dmats1[10][12] + coeff0_11*dmats1[11][12] + coeff0_12*dmats1[12][12] + coeff0_13*dmats1[13][12] + coeff0_14*dmats1[14][12] + coeff0_15*dmats1[15][12] + coeff0_16*dmats1[16][12] + coeff0_17*dmats1[17][12] + coeff0_18*dmats1[18][12] + coeff0_19*dmats1[19][12] + coeff0_20*dmats1[20][12] + coeff0_21*dmats1[21][12] + coeff0_22*dmats1[22][12] + coeff0_23*dmats1[23][12] + coeff0_24*dmats1[24][12] + coeff0_25*dmats1[25][12] + coeff0_26*dmats1[26][12] + coeff0_27*dmats1[27][12] + coeff0_28*dmats1[28][12] + coeff0_29*dmats1[29][12] + coeff0_30*dmats1[30][12] + coeff0_31*dmats1[31][12] + coeff0_32*dmats1[32][12] + coeff0_33*dmats1[33][12] + coeff0_34*dmats1[34][12];
          new_coeff0_13 = coeff0_0*dmats1[0][13] + coeff0_1*dmats1[1][13] + coeff0_2*dmats1[2][13] + coeff0_3*dmats1[3][13] + coeff0_4*dmats1[4][13] + coeff0_5*dmats1[5][13] + coeff0_6*dmats1[6][13] + coeff0_7*dmats1[7][13] + coeff0_8*dmats1[8][13] + coeff0_9*dmats1[9][13] + coeff0_10*dmats1[10][13] + coeff0_11*dmats1[11][13] + coeff0_12*dmats1[12][13] + coeff0_13*dmats1[13][13] + coeff0_14*dmats1[14][13] + coeff0_15*dmats1[15][13] + coeff0_16*dmats1[16][13] + coeff0_17*dmats1[17][13] + coeff0_18*dmats1[18][13] + coeff0_19*dmats1[19][13] + coeff0_20*dmats1[20][13] + coeff0_21*dmats1[21][13] + coeff0_22*dmats1[22][13] + coeff0_23*dmats1[23][13] + coeff0_24*dmats1[24][13] + coeff0_25*dmats1[25][13] + coeff0_26*dmats1[26][13] + coeff0_27*dmats1[27][13] + coeff0_28*dmats1[28][13] + coeff0_29*dmats1[29][13] + coeff0_30*dmats1[30][13] + coeff0_31*dmats1[31][13] + coeff0_32*dmats1[32][13] + coeff0_33*dmats1[33][13] + coeff0_34*dmats1[34][13];
          new_coeff0_14 = coeff0_0*dmats1[0][14] + coeff0_1*dmats1[1][14] + coeff0_2*dmats1[2][14] + coeff0_3*dmats1[3][14] + coeff0_4*dmats1[4][14] + coeff0_5*dmats1[5][14] + coeff0_6*dmats1[6][14] + coeff0_7*dmats1[7][14] + coeff0_8*dmats1[8][14] + coeff0_9*dmats1[9][14] + coeff0_10*dmats1[10][14] + coeff0_11*dmats1[11][14] + coeff0_12*dmats1[12][14] + coeff0_13*dmats1[13][14] + coeff0_14*dmats1[14][14] + coeff0_15*dmats1[15][14] + coeff0_16*dmats1[16][14] + coeff0_17*dmats1[17][14] + coeff0_18*dmats1[18][14] + coeff0_19*dmats1[19][14] + coeff0_20*dmats1[20][14] + coeff0_21*dmats1[21][14] + coeff0_22*dmats1[22][14] + coeff0_23*dmats1[23][14] + coeff0_24*dmats1[24][14] + coeff0_25*dmats1[25][14] + coeff0_26*dmats1[26][14] + coeff0_27*dmats1[27][14] + coeff0_28*dmats1[28][14] + coeff0_29*dmats1[29][14] + coeff0_30*dmats1[30][14] + coeff0_31*dmats1[31][14] + coeff0_32*dmats1[32][14] + coeff0_33*dmats1[33][14] + coeff0_34*dmats1[34][14];
          new_coeff0_15 = coeff0_0*dmats1[0][15] + coeff0_1*dmats1[1][15] + coeff0_2*dmats1[2][15] + coeff0_3*dmats1[3][15] + coeff0_4*dmats1[4][15] + coeff0_5*dmats1[5][15] + coeff0_6*dmats1[6][15] + coeff0_7*dmats1[7][15] + coeff0_8*dmats1[8][15] + coeff0_9*dmats1[9][15] + coeff0_10*dmats1[10][15] + coeff0_11*dmats1[11][15] + coeff0_12*dmats1[12][15] + coeff0_13*dmats1[13][15] + coeff0_14*dmats1[14][15] + coeff0_15*dmats1[15][15] + coeff0_16*dmats1[16][15] + coeff0_17*dmats1[17][15] + coeff0_18*dmats1[18][15] + coeff0_19*dmats1[19][15] + coeff0_20*dmats1[20][15] + coeff0_21*dmats1[21][15] + coeff0_22*dmats1[22][15] + coeff0_23*dmats1[23][15] + coeff0_24*dmats1[24][15] + coeff0_25*dmats1[25][15] + coeff0_26*dmats1[26][15] + coeff0_27*dmats1[27][15] + coeff0_28*dmats1[28][15] + coeff0_29*dmats1[29][15] + coeff0_30*dmats1[30][15] + coeff0_31*dmats1[31][15] + coeff0_32*dmats1[32][15] + coeff0_33*dmats1[33][15] + coeff0_34*dmats1[34][15];
          new_coeff0_16 = coeff0_0*dmats1[0][16] + coeff0_1*dmats1[1][16] + coeff0_2*dmats1[2][16] + coeff0_3*dmats1[3][16] + coeff0_4*dmats1[4][16] + coeff0_5*dmats1[5][16] + coeff0_6*dmats1[6][16] + coeff0_7*dmats1[7][16] + coeff0_8*dmats1[8][16] + coeff0_9*dmats1[9][16] + coeff0_10*dmats1[10][16] + coeff0_11*dmats1[11][16] + coeff0_12*dmats1[12][16] + coeff0_13*dmats1[13][16] + coeff0_14*dmats1[14][16] + coeff0_15*dmats1[15][16] + coeff0_16*dmats1[16][16] + coeff0_17*dmats1[17][16] + coeff0_18*dmats1[18][16] + coeff0_19*dmats1[19][16] + coeff0_20*dmats1[20][16] + coeff0_21*dmats1[21][16] + coeff0_22*dmats1[22][16] + coeff0_23*dmats1[23][16] + coeff0_24*dmats1[24][16] + coeff0_25*dmats1[25][16] + coeff0_26*dmats1[26][16] + coeff0_27*dmats1[27][16] + coeff0_28*dmats1[28][16] + coeff0_29*dmats1[29][16] + coeff0_30*dmats1[30][16] + coeff0_31*dmats1[31][16] + coeff0_32*dmats1[32][16] + coeff0_33*dmats1[33][16] + coeff0_34*dmats1[34][16];
          new_coeff0_17 = coeff0_0*dmats1[0][17] + coeff0_1*dmats1[1][17] + coeff0_2*dmats1[2][17] + coeff0_3*dmats1[3][17] + coeff0_4*dmats1[4][17] + coeff0_5*dmats1[5][17] + coeff0_6*dmats1[6][17] + coeff0_7*dmats1[7][17] + coeff0_8*dmats1[8][17] + coeff0_9*dmats1[9][17] + coeff0_10*dmats1[10][17] + coeff0_11*dmats1[11][17] + coeff0_12*dmats1[12][17] + coeff0_13*dmats1[13][17] + coeff0_14*dmats1[14][17] + coeff0_15*dmats1[15][17] + coeff0_16*dmats1[16][17] + coeff0_17*dmats1[17][17] + coeff0_18*dmats1[18][17] + coeff0_19*dmats1[19][17] + coeff0_20*dmats1[20][17] + coeff0_21*dmats1[21][17] + coeff0_22*dmats1[22][17] + coeff0_23*dmats1[23][17] + coeff0_24*dmats1[24][17] + coeff0_25*dmats1[25][17] + coeff0_26*dmats1[26][17] + coeff0_27*dmats1[27][17] + coeff0_28*dmats1[28][17] + coeff0_29*dmats1[29][17] + coeff0_30*dmats1[30][17] + coeff0_31*dmats1[31][17] + coeff0_32*dmats1[32][17] + coeff0_33*dmats1[33][17] + coeff0_34*dmats1[34][17];
          new_coeff0_18 = coeff0_0*dmats1[0][18] + coeff0_1*dmats1[1][18] + coeff0_2*dmats1[2][18] + coeff0_3*dmats1[3][18] + coeff0_4*dmats1[4][18] + coeff0_5*dmats1[5][18] + coeff0_6*dmats1[6][18] + coeff0_7*dmats1[7][18] + coeff0_8*dmats1[8][18] + coeff0_9*dmats1[9][18] + coeff0_10*dmats1[10][18] + coeff0_11*dmats1[11][18] + coeff0_12*dmats1[12][18] + coeff0_13*dmats1[13][18] + coeff0_14*dmats1[14][18] + coeff0_15*dmats1[15][18] + coeff0_16*dmats1[16][18] + coeff0_17*dmats1[17][18] + coeff0_18*dmats1[18][18] + coeff0_19*dmats1[19][18] + coeff0_20*dmats1[20][18] + coeff0_21*dmats1[21][18] + coeff0_22*dmats1[22][18] + coeff0_23*dmats1[23][18] + coeff0_24*dmats1[24][18] + coeff0_25*dmats1[25][18] + coeff0_26*dmats1[26][18] + coeff0_27*dmats1[27][18] + coeff0_28*dmats1[28][18] + coeff0_29*dmats1[29][18] + coeff0_30*dmats1[30][18] + coeff0_31*dmats1[31][18] + coeff0_32*dmats1[32][18] + coeff0_33*dmats1[33][18] + coeff0_34*dmats1[34][18];
          new_coeff0_19 = coeff0_0*dmats1[0][19] + coeff0_1*dmats1[1][19] + coeff0_2*dmats1[2][19] + coeff0_3*dmats1[3][19] + coeff0_4*dmats1[4][19] + coeff0_5*dmats1[5][19] + coeff0_6*dmats1[6][19] + coeff0_7*dmats1[7][19] + coeff0_8*dmats1[8][19] + coeff0_9*dmats1[9][19] + coeff0_10*dmats1[10][19] + coeff0_11*dmats1[11][19] + coeff0_12*dmats1[12][19] + coeff0_13*dmats1[13][19] + coeff0_14*dmats1[14][19] + coeff0_15*dmats1[15][19] + coeff0_16*dmats1[16][19] + coeff0_17*dmats1[17][19] + coeff0_18*dmats1[18][19] + coeff0_19*dmats1[19][19] + coeff0_20*dmats1[20][19] + coeff0_21*dmats1[21][19] + coeff0_22*dmats1[22][19] + coeff0_23*dmats1[23][19] + coeff0_24*dmats1[24][19] + coeff0_25*dmats1[25][19] + coeff0_26*dmats1[26][19] + coeff0_27*dmats1[27][19] + coeff0_28*dmats1[28][19] + coeff0_29*dmats1[29][19] + coeff0_30*dmats1[30][19] + coeff0_31*dmats1[31][19] + coeff0_32*dmats1[32][19] + coeff0_33*dmats1[33][19] + coeff0_34*dmats1[34][19];
          new_coeff0_20 = coeff0_0*dmats1[0][20] + coeff0_1*dmats1[1][20] + coeff0_2*dmats1[2][20] + coeff0_3*dmats1[3][20] + coeff0_4*dmats1[4][20] + coeff0_5*dmats1[5][20] + coeff0_6*dmats1[6][20] + coeff0_7*dmats1[7][20] + coeff0_8*dmats1[8][20] + coeff0_9*dmats1[9][20] + coeff0_10*dmats1[10][20] + coeff0_11*dmats1[11][20] + coeff0_12*dmats1[12][20] + coeff0_13*dmats1[13][20] + coeff0_14*dmats1[14][20] + coeff0_15*dmats1[15][20] + coeff0_16*dmats1[16][20] + coeff0_17*dmats1[17][20] + coeff0_18*dmats1[18][20] + coeff0_19*dmats1[19][20] + coeff0_20*dmats1[20][20] + coeff0_21*dmats1[21][20] + coeff0_22*dmats1[22][20] + coeff0_23*dmats1[23][20] + coeff0_24*dmats1[24][20] + coeff0_25*dmats1[25][20] + coeff0_26*dmats1[26][20] + coeff0_27*dmats1[27][20] + coeff0_28*dmats1[28][20] + coeff0_29*dmats1[29][20] + coeff0_30*dmats1[30][20] + coeff0_31*dmats1[31][20] + coeff0_32*dmats1[32][20] + coeff0_33*dmats1[33][20] + coeff0_34*dmats1[34][20];
          new_coeff0_21 = coeff0_0*dmats1[0][21] + coeff0_1*dmats1[1][21] + coeff0_2*dmats1[2][21] + coeff0_3*dmats1[3][21] + coeff0_4*dmats1[4][21] + coeff0_5*dmats1[5][21] + coeff0_6*dmats1[6][21] + coeff0_7*dmats1[7][21] + coeff0_8*dmats1[8][21] + coeff0_9*dmats1[9][21] + coeff0_10*dmats1[10][21] + coeff0_11*dmats1[11][21] + coeff0_12*dmats1[12][21] + coeff0_13*dmats1[13][21] + coeff0_14*dmats1[14][21] + coeff0_15*dmats1[15][21] + coeff0_16*dmats1[16][21] + coeff0_17*dmats1[17][21] + coeff0_18*dmats1[18][21] + coeff0_19*dmats1[19][21] + coeff0_20*dmats1[20][21] + coeff0_21*dmats1[21][21] + coeff0_22*dmats1[22][21] + coeff0_23*dmats1[23][21] + coeff0_24*dmats1[24][21] + coeff0_25*dmats1[25][21] + coeff0_26*dmats1[26][21] + coeff0_27*dmats1[27][21] + coeff0_28*dmats1[28][21] + coeff0_29*dmats1[29][21] + coeff0_30*dmats1[30][21] + coeff0_31*dmats1[31][21] + coeff0_32*dmats1[32][21] + coeff0_33*dmats1[33][21] + coeff0_34*dmats1[34][21];
          new_coeff0_22 = coeff0_0*dmats1[0][22] + coeff0_1*dmats1[1][22] + coeff0_2*dmats1[2][22] + coeff0_3*dmats1[3][22] + coeff0_4*dmats1[4][22] + coeff0_5*dmats1[5][22] + coeff0_6*dmats1[6][22] + coeff0_7*dmats1[7][22] + coeff0_8*dmats1[8][22] + coeff0_9*dmats1[9][22] + coeff0_10*dmats1[10][22] + coeff0_11*dmats1[11][22] + coeff0_12*dmats1[12][22] + coeff0_13*dmats1[13][22] + coeff0_14*dmats1[14][22] + coeff0_15*dmats1[15][22] + coeff0_16*dmats1[16][22] + coeff0_17*dmats1[17][22] + coeff0_18*dmats1[18][22] + coeff0_19*dmats1[19][22] + coeff0_20*dmats1[20][22] + coeff0_21*dmats1[21][22] + coeff0_22*dmats1[22][22] + coeff0_23*dmats1[23][22] + coeff0_24*dmats1[24][22] + coeff0_25*dmats1[25][22] + coeff0_26*dmats1[26][22] + coeff0_27*dmats1[27][22] + coeff0_28*dmats1[28][22] + coeff0_29*dmats1[29][22] + coeff0_30*dmats1[30][22] + coeff0_31*dmats1[31][22] + coeff0_32*dmats1[32][22] + coeff0_33*dmats1[33][22] + coeff0_34*dmats1[34][22];
          new_coeff0_23 = coeff0_0*dmats1[0][23] + coeff0_1*dmats1[1][23] + coeff0_2*dmats1[2][23] + coeff0_3*dmats1[3][23] + coeff0_4*dmats1[4][23] + coeff0_5*dmats1[5][23] + coeff0_6*dmats1[6][23] + coeff0_7*dmats1[7][23] + coeff0_8*dmats1[8][23] + coeff0_9*dmats1[9][23] + coeff0_10*dmats1[10][23] + coeff0_11*dmats1[11][23] + coeff0_12*dmats1[12][23] + coeff0_13*dmats1[13][23] + coeff0_14*dmats1[14][23] + coeff0_15*dmats1[15][23] + coeff0_16*dmats1[16][23] + coeff0_17*dmats1[17][23] + coeff0_18*dmats1[18][23] + coeff0_19*dmats1[19][23] + coeff0_20*dmats1[20][23] + coeff0_21*dmats1[21][23] + coeff0_22*dmats1[22][23] + coeff0_23*dmats1[23][23] + coeff0_24*dmats1[24][23] + coeff0_25*dmats1[25][23] + coeff0_26*dmats1[26][23] + coeff0_27*dmats1[27][23] + coeff0_28*dmats1[28][23] + coeff0_29*dmats1[29][23] + coeff0_30*dmats1[30][23] + coeff0_31*dmats1[31][23] + coeff0_32*dmats1[32][23] + coeff0_33*dmats1[33][23] + coeff0_34*dmats1[34][23];
          new_coeff0_24 = coeff0_0*dmats1[0][24] + coeff0_1*dmats1[1][24] + coeff0_2*dmats1[2][24] + coeff0_3*dmats1[3][24] + coeff0_4*dmats1[4][24] + coeff0_5*dmats1[5][24] + coeff0_6*dmats1[6][24] + coeff0_7*dmats1[7][24] + coeff0_8*dmats1[8][24] + coeff0_9*dmats1[9][24] + coeff0_10*dmats1[10][24] + coeff0_11*dmats1[11][24] + coeff0_12*dmats1[12][24] + coeff0_13*dmats1[13][24] + coeff0_14*dmats1[14][24] + coeff0_15*dmats1[15][24] + coeff0_16*dmats1[16][24] + coeff0_17*dmats1[17][24] + coeff0_18*dmats1[18][24] + coeff0_19*dmats1[19][24] + coeff0_20*dmats1[20][24] + coeff0_21*dmats1[21][24] + coeff0_22*dmats1[22][24] + coeff0_23*dmats1[23][24] + coeff0_24*dmats1[24][24] + coeff0_25*dmats1[25][24] + coeff0_26*dmats1[26][24] + coeff0_27*dmats1[27][24] + coeff0_28*dmats1[28][24] + coeff0_29*dmats1[29][24] + coeff0_30*dmats1[30][24] + coeff0_31*dmats1[31][24] + coeff0_32*dmats1[32][24] + coeff0_33*dmats1[33][24] + coeff0_34*dmats1[34][24];
          new_coeff0_25 = coeff0_0*dmats1[0][25] + coeff0_1*dmats1[1][25] + coeff0_2*dmats1[2][25] + coeff0_3*dmats1[3][25] + coeff0_4*dmats1[4][25] + coeff0_5*dmats1[5][25] + coeff0_6*dmats1[6][25] + coeff0_7*dmats1[7][25] + coeff0_8*dmats1[8][25] + coeff0_9*dmats1[9][25] + coeff0_10*dmats1[10][25] + coeff0_11*dmats1[11][25] + coeff0_12*dmats1[12][25] + coeff0_13*dmats1[13][25] + coeff0_14*dmats1[14][25] + coeff0_15*dmats1[15][25] + coeff0_16*dmats1[16][25] + coeff0_17*dmats1[17][25] + coeff0_18*dmats1[18][25] + coeff0_19*dmats1[19][25] + coeff0_20*dmats1[20][25] + coeff0_21*dmats1[21][25] + coeff0_22*dmats1[22][25] + coeff0_23*dmats1[23][25] + coeff0_24*dmats1[24][25] + coeff0_25*dmats1[25][25] + coeff0_26*dmats1[26][25] + coeff0_27*dmats1[27][25] + coeff0_28*dmats1[28][25] + coeff0_29*dmats1[29][25] + coeff0_30*dmats1[30][25] + coeff0_31*dmats1[31][25] + coeff0_32*dmats1[32][25] + coeff0_33*dmats1[33][25] + coeff0_34*dmats1[34][25];
          new_coeff0_26 = coeff0_0*dmats1[0][26] + coeff0_1*dmats1[1][26] + coeff0_2*dmats1[2][26] + coeff0_3*dmats1[3][26] + coeff0_4*dmats1[4][26] + coeff0_5*dmats1[5][26] + coeff0_6*dmats1[6][26] + coeff0_7*dmats1[7][26] + coeff0_8*dmats1[8][26] + coeff0_9*dmats1[9][26] + coeff0_10*dmats1[10][26] + coeff0_11*dmats1[11][26] + coeff0_12*dmats1[12][26] + coeff0_13*dmats1[13][26] + coeff0_14*dmats1[14][26] + coeff0_15*dmats1[15][26] + coeff0_16*dmats1[16][26] + coeff0_17*dmats1[17][26] + coeff0_18*dmats1[18][26] + coeff0_19*dmats1[19][26] + coeff0_20*dmats1[20][26] + coeff0_21*dmats1[21][26] + coeff0_22*dmats1[22][26] + coeff0_23*dmats1[23][26] + coeff0_24*dmats1[24][26] + coeff0_25*dmats1[25][26] + coeff0_26*dmats1[26][26] + coeff0_27*dmats1[27][26] + coeff0_28*dmats1[28][26] + coeff0_29*dmats1[29][26] + coeff0_30*dmats1[30][26] + coeff0_31*dmats1[31][26] + coeff0_32*dmats1[32][26] + coeff0_33*dmats1[33][26] + coeff0_34*dmats1[34][26];
          new_coeff0_27 = coeff0_0*dmats1[0][27] + coeff0_1*dmats1[1][27] + coeff0_2*dmats1[2][27] + coeff0_3*dmats1[3][27] + coeff0_4*dmats1[4][27] + coeff0_5*dmats1[5][27] + coeff0_6*dmats1[6][27] + coeff0_7*dmats1[7][27] + coeff0_8*dmats1[8][27] + coeff0_9*dmats1[9][27] + coeff0_10*dmats1[10][27] + coeff0_11*dmats1[11][27] + coeff0_12*dmats1[12][27] + coeff0_13*dmats1[13][27] + coeff0_14*dmats1[14][27] + coeff0_15*dmats1[15][27] + coeff0_16*dmats1[16][27] + coeff0_17*dmats1[17][27] + coeff0_18*dmats1[18][27] + coeff0_19*dmats1[19][27] + coeff0_20*dmats1[20][27] + coeff0_21*dmats1[21][27] + coeff0_22*dmats1[22][27] + coeff0_23*dmats1[23][27] + coeff0_24*dmats1[24][27] + coeff0_25*dmats1[25][27] + coeff0_26*dmats1[26][27] + coeff0_27*dmats1[27][27] + coeff0_28*dmats1[28][27] + coeff0_29*dmats1[29][27] + coeff0_30*dmats1[30][27] + coeff0_31*dmats1[31][27] + coeff0_32*dmats1[32][27] + coeff0_33*dmats1[33][27] + coeff0_34*dmats1[34][27];
          new_coeff0_28 = coeff0_0*dmats1[0][28] + coeff0_1*dmats1[1][28] + coeff0_2*dmats1[2][28] + coeff0_3*dmats1[3][28] + coeff0_4*dmats1[4][28] + coeff0_5*dmats1[5][28] + coeff0_6*dmats1[6][28] + coeff0_7*dmats1[7][28] + coeff0_8*dmats1[8][28] + coeff0_9*dmats1[9][28] + coeff0_10*dmats1[10][28] + coeff0_11*dmats1[11][28] + coeff0_12*dmats1[12][28] + coeff0_13*dmats1[13][28] + coeff0_14*dmats1[14][28] + coeff0_15*dmats1[15][28] + coeff0_16*dmats1[16][28] + coeff0_17*dmats1[17][28] + coeff0_18*dmats1[18][28] + coeff0_19*dmats1[19][28] + coeff0_20*dmats1[20][28] + coeff0_21*dmats1[21][28] + coeff0_22*dmats1[22][28] + coeff0_23*dmats1[23][28] + coeff0_24*dmats1[24][28] + coeff0_25*dmats1[25][28] + coeff0_26*dmats1[26][28] + coeff0_27*dmats1[27][28] + coeff0_28*dmats1[28][28] + coeff0_29*dmats1[29][28] + coeff0_30*dmats1[30][28] + coeff0_31*dmats1[31][28] + coeff0_32*dmats1[32][28] + coeff0_33*dmats1[33][28] + coeff0_34*dmats1[34][28];
          new_coeff0_29 = coeff0_0*dmats1[0][29] + coeff0_1*dmats1[1][29] + coeff0_2*dmats1[2][29] + coeff0_3*dmats1[3][29] + coeff0_4*dmats1[4][29] + coeff0_5*dmats1[5][29] + coeff0_6*dmats1[6][29] + coeff0_7*dmats1[7][29] + coeff0_8*dmats1[8][29] + coeff0_9*dmats1[9][29] + coeff0_10*dmats1[10][29] + coeff0_11*dmats1[11][29] + coeff0_12*dmats1[12][29] + coeff0_13*dmats1[13][29] + coeff0_14*dmats1[14][29] + coeff0_15*dmats1[15][29] + coeff0_16*dmats1[16][29] + coeff0_17*dmats1[17][29] + coeff0_18*dmats1[18][29] + coeff0_19*dmats1[19][29] + coeff0_20*dmats1[20][29] + coeff0_21*dmats1[21][29] + coeff0_22*dmats1[22][29] + coeff0_23*dmats1[23][29] + coeff0_24*dmats1[24][29] + coeff0_25*dmats1[25][29] + coeff0_26*dmats1[26][29] + coeff0_27*dmats1[27][29] + coeff0_28*dmats1[28][29] + coeff0_29*dmats1[29][29] + coeff0_30*dmats1[30][29] + coeff0_31*dmats1[31][29] + coeff0_32*dmats1[32][29] + coeff0_33*dmats1[33][29] + coeff0_34*dmats1[34][29];
          new_coeff0_30 = coeff0_0*dmats1[0][30] + coeff0_1*dmats1[1][30] + coeff0_2*dmats1[2][30] + coeff0_3*dmats1[3][30] + coeff0_4*dmats1[4][30] + coeff0_5*dmats1[5][30] + coeff0_6*dmats1[6][30] + coeff0_7*dmats1[7][30] + coeff0_8*dmats1[8][30] + coeff0_9*dmats1[9][30] + coeff0_10*dmats1[10][30] + coeff0_11*dmats1[11][30] + coeff0_12*dmats1[12][30] + coeff0_13*dmats1[13][30] + coeff0_14*dmats1[14][30] + coeff0_15*dmats1[15][30] + coeff0_16*dmats1[16][30] + coeff0_17*dmats1[17][30] + coeff0_18*dmats1[18][30] + coeff0_19*dmats1[19][30] + coeff0_20*dmats1[20][30] + coeff0_21*dmats1[21][30] + coeff0_22*dmats1[22][30] + coeff0_23*dmats1[23][30] + coeff0_24*dmats1[24][30] + coeff0_25*dmats1[25][30] + coeff0_26*dmats1[26][30] + coeff0_27*dmats1[27][30] + coeff0_28*dmats1[28][30] + coeff0_29*dmats1[29][30] + coeff0_30*dmats1[30][30] + coeff0_31*dmats1[31][30] + coeff0_32*dmats1[32][30] + coeff0_33*dmats1[33][30] + coeff0_34*dmats1[34][30];
          new_coeff0_31 = coeff0_0*dmats1[0][31] + coeff0_1*dmats1[1][31] + coeff0_2*dmats1[2][31] + coeff0_3*dmats1[3][31] + coeff0_4*dmats1[4][31] + coeff0_5*dmats1[5][31] + coeff0_6*dmats1[6][31] + coeff0_7*dmats1[7][31] + coeff0_8*dmats1[8][31] + coeff0_9*dmats1[9][31] + coeff0_10*dmats1[10][31] + coeff0_11*dmats1[11][31] + coeff0_12*dmats1[12][31] + coeff0_13*dmats1[13][31] + coeff0_14*dmats1[14][31] + coeff0_15*dmats1[15][31] + coeff0_16*dmats1[16][31] + coeff0_17*dmats1[17][31] + coeff0_18*dmats1[18][31] + coeff0_19*dmats1[19][31] + coeff0_20*dmats1[20][31] + coeff0_21*dmats1[21][31] + coeff0_22*dmats1[22][31] + coeff0_23*dmats1[23][31] + coeff0_24*dmats1[24][31] + coeff0_25*dmats1[25][31] + coeff0_26*dmats1[26][31] + coeff0_27*dmats1[27][31] + coeff0_28*dmats1[28][31] + coeff0_29*dmats1[29][31] + coeff0_30*dmats1[30][31] + coeff0_31*dmats1[31][31] + coeff0_32*dmats1[32][31] + coeff0_33*dmats1[33][31] + coeff0_34*dmats1[34][31];
          new_coeff0_32 = coeff0_0*dmats1[0][32] + coeff0_1*dmats1[1][32] + coeff0_2*dmats1[2][32] + coeff0_3*dmats1[3][32] + coeff0_4*dmats1[4][32] + coeff0_5*dmats1[5][32] + coeff0_6*dmats1[6][32] + coeff0_7*dmats1[7][32] + coeff0_8*dmats1[8][32] + coeff0_9*dmats1[9][32] + coeff0_10*dmats1[10][32] + coeff0_11*dmats1[11][32] + coeff0_12*dmats1[12][32] + coeff0_13*dmats1[13][32] + coeff0_14*dmats1[14][32] + coeff0_15*dmats1[15][32] + coeff0_16*dmats1[16][32] + coeff0_17*dmats1[17][32] + coeff0_18*dmats1[18][32] + coeff0_19*dmats1[19][32] + coeff0_20*dmats1[20][32] + coeff0_21*dmats1[21][32] + coeff0_22*dmats1[22][32] + coeff0_23*dmats1[23][32] + coeff0_24*dmats1[24][32] + coeff0_25*dmats1[25][32] + coeff0_26*dmats1[26][32] + coeff0_27*dmats1[27][32] + coeff0_28*dmats1[28][32] + coeff0_29*dmats1[29][32] + coeff0_30*dmats1[30][32] + coeff0_31*dmats1[31][32] + coeff0_32*dmats1[32][32] + coeff0_33*dmats1[33][32] + coeff0_34*dmats1[34][32];
          new_coeff0_33 = coeff0_0*dmats1[0][33] + coeff0_1*dmats1[1][33] + coeff0_2*dmats1[2][33] + coeff0_3*dmats1[3][33] + coeff0_4*dmats1[4][33] + coeff0_5*dmats1[5][33] + coeff0_6*dmats1[6][33] + coeff0_7*dmats1[7][33] + coeff0_8*dmats1[8][33] + coeff0_9*dmats1[9][33] + coeff0_10*dmats1[10][33] + coeff0_11*dmats1[11][33] + coeff0_12*dmats1[12][33] + coeff0_13*dmats1[13][33] + coeff0_14*dmats1[14][33] + coeff0_15*dmats1[15][33] + coeff0_16*dmats1[16][33] + coeff0_17*dmats1[17][33] + coeff0_18*dmats1[18][33] + coeff0_19*dmats1[19][33] + coeff0_20*dmats1[20][33] + coeff0_21*dmats1[21][33] + coeff0_22*dmats1[22][33] + coeff0_23*dmats1[23][33] + coeff0_24*dmats1[24][33] + coeff0_25*dmats1[25][33] + coeff0_26*dmats1[26][33] + coeff0_27*dmats1[27][33] + coeff0_28*dmats1[28][33] + coeff0_29*dmats1[29][33] + coeff0_30*dmats1[30][33] + coeff0_31*dmats1[31][33] + coeff0_32*dmats1[32][33] + coeff0_33*dmats1[33][33] + coeff0_34*dmats1[34][33];
          new_coeff0_34 = coeff0_0*dmats1[0][34] + coeff0_1*dmats1[1][34] + coeff0_2*dmats1[2][34] + coeff0_3*dmats1[3][34] + coeff0_4*dmats1[4][34] + coeff0_5*dmats1[5][34] + coeff0_6*dmats1[6][34] + coeff0_7*dmats1[7][34] + coeff0_8*dmats1[8][34] + coeff0_9*dmats1[9][34] + coeff0_10*dmats1[10][34] + coeff0_11*dmats1[11][34] + coeff0_12*dmats1[12][34] + coeff0_13*dmats1[13][34] + coeff0_14*dmats1[14][34] + coeff0_15*dmats1[15][34] + coeff0_16*dmats1[16][34] + coeff0_17*dmats1[17][34] + coeff0_18*dmats1[18][34] + coeff0_19*dmats1[19][34] + coeff0_20*dmats1[20][34] + coeff0_21*dmats1[21][34] + coeff0_22*dmats1[22][34] + coeff0_23*dmats1[23][34] + coeff0_24*dmats1[24][34] + coeff0_25*dmats1[25][34] + coeff0_26*dmats1[26][34] + coeff0_27*dmats1[27][34] + coeff0_28*dmats1[28][34] + coeff0_29*dmats1[29][34] + coeff0_30*dmats1[30][34] + coeff0_31*dmats1[31][34] + coeff0_32*dmats1[32][34] + coeff0_33*dmats1[33][34] + coeff0_34*dmats1[34][34];
        }
        if(combinations[deriv_num][j] == 2)
        {
          new_coeff0_0 = coeff0_0*dmats2[0][0] + coeff0_1*dmats2[1][0] + coeff0_2*dmats2[2][0] + coeff0_3*dmats2[3][0] + coeff0_4*dmats2[4][0] + coeff0_5*dmats2[5][0] + coeff0_6*dmats2[6][0] + coeff0_7*dmats2[7][0] + coeff0_8*dmats2[8][0] + coeff0_9*dmats2[9][0] + coeff0_10*dmats2[10][0] + coeff0_11*dmats2[11][0] + coeff0_12*dmats2[12][0] + coeff0_13*dmats2[13][0] + coeff0_14*dmats2[14][0] + coeff0_15*dmats2[15][0] + coeff0_16*dmats2[16][0] + coeff0_17*dmats2[17][0] + coeff0_18*dmats2[18][0] + coeff0_19*dmats2[19][0] + coeff0_20*dmats2[20][0] + coeff0_21*dmats2[21][0] + coeff0_22*dmats2[22][0] + coeff0_23*dmats2[23][0] + coeff0_24*dmats2[24][0] + coeff0_25*dmats2[25][0] + coeff0_26*dmats2[26][0] + coeff0_27*dmats2[27][0] + coeff0_28*dmats2[28][0] + coeff0_29*dmats2[29][0] + coeff0_30*dmats2[30][0] + coeff0_31*dmats2[31][0] + coeff0_32*dmats2[32][0] + coeff0_33*dmats2[33][0] + coeff0_34*dmats2[34][0];
          new_coeff0_1 = coeff0_0*dmats2[0][1] + coeff0_1*dmats2[1][1] + coeff0_2*dmats2[2][1] + coeff0_3*dmats2[3][1] + coeff0_4*dmats2[4][1] + coeff0_5*dmats2[5][1] + coeff0_6*dmats2[6][1] + coeff0_7*dmats2[7][1] + coeff0_8*dmats2[8][1] + coeff0_9*dmats2[9][1] + coeff0_10*dmats2[10][1] + coeff0_11*dmats2[11][1] + coeff0_12*dmats2[12][1] + coeff0_13*dmats2[13][1] + coeff0_14*dmats2[14][1] + coeff0_15*dmats2[15][1] + coeff0_16*dmats2[16][1] + coeff0_17*dmats2[17][1] + coeff0_18*dmats2[18][1] + coeff0_19*dmats2[19][1] + coeff0_20*dmats2[20][1] + coeff0_21*dmats2[21][1] + coeff0_22*dmats2[22][1] + coeff0_23*dmats2[23][1] + coeff0_24*dmats2[24][1] + coeff0_25*dmats2[25][1] + coeff0_26*dmats2[26][1] + coeff0_27*dmats2[27][1] + coeff0_28*dmats2[28][1] + coeff0_29*dmats2[29][1] + coeff0_30*dmats2[30][1] + coeff0_31*dmats2[31][1] + coeff0_32*dmats2[32][1] + coeff0_33*dmats2[33][1] + coeff0_34*dmats2[34][1];
          new_coeff0_2 = coeff0_0*dmats2[0][2] + coeff0_1*dmats2[1][2] + coeff0_2*dmats2[2][2] + coeff0_3*dmats2[3][2] + coeff0_4*dmats2[4][2] + coeff0_5*dmats2[5][2] + coeff0_6*dmats2[6][2] + coeff0_7*dmats2[7][2] + coeff0_8*dmats2[8][2] + coeff0_9*dmats2[9][2] + coeff0_10*dmats2[10][2] + coeff0_11*dmats2[11][2] + coeff0_12*dmats2[12][2] + coeff0_13*dmats2[13][2] + coeff0_14*dmats2[14][2] + coeff0_15*dmats2[15][2] + coeff0_16*dmats2[16][2] + coeff0_17*dmats2[17][2] + coeff0_18*dmats2[18][2] + coeff0_19*dmats2[19][2] + coeff0_20*dmats2[20][2] + coeff0_21*dmats2[21][2] + coeff0_22*dmats2[22][2] + coeff0_23*dmats2[23][2] + coeff0_24*dmats2[24][2] + coeff0_25*dmats2[25][2] + coeff0_26*dmats2[26][2] + coeff0_27*dmats2[27][2] + coeff0_28*dmats2[28][2] + coeff0_29*dmats2[29][2] + coeff0_30*dmats2[30][2] + coeff0_31*dmats2[31][2] + coeff0_32*dmats2[32][2] + coeff0_33*dmats2[33][2] + coeff0_34*dmats2[34][2];
          new_coeff0_3 = coeff0_0*dmats2[0][3] + coeff0_1*dmats2[1][3] + coeff0_2*dmats2[2][3] + coeff0_3*dmats2[3][3] + coeff0_4*dmats2[4][3] + coeff0_5*dmats2[5][3] + coeff0_6*dmats2[6][3] + coeff0_7*dmats2[7][3] + coeff0_8*dmats2[8][3] + coeff0_9*dmats2[9][3] + coeff0_10*dmats2[10][3] + coeff0_11*dmats2[11][3] + coeff0_12*dmats2[12][3] + coeff0_13*dmats2[13][3] + coeff0_14*dmats2[14][3] + coeff0_15*dmats2[15][3] + coeff0_16*dmats2[16][3] + coeff0_17*dmats2[17][3] + coeff0_18*dmats2[18][3] + coeff0_19*dmats2[19][3] + coeff0_20*dmats2[20][3] + coeff0_21*dmats2[21][3] + coeff0_22*dmats2[22][3] + coeff0_23*dmats2[23][3] + coeff0_24*dmats2[24][3] + coeff0_25*dmats2[25][3] + coeff0_26*dmats2[26][3] + coeff0_27*dmats2[27][3] + coeff0_28*dmats2[28][3] + coeff0_29*dmats2[29][3] + coeff0_30*dmats2[30][3] + coeff0_31*dmats2[31][3] + coeff0_32*dmats2[32][3] + coeff0_33*dmats2[33][3] + coeff0_34*dmats2[34][3];
          new_coeff0_4 = coeff0_0*dmats2[0][4] + coeff0_1*dmats2[1][4] + coeff0_2*dmats2[2][4] + coeff0_3*dmats2[3][4] + coeff0_4*dmats2[4][4] + coeff0_5*dmats2[5][4] + coeff0_6*dmats2[6][4] + coeff0_7*dmats2[7][4] + coeff0_8*dmats2[8][4] + coeff0_9*dmats2[9][4] + coeff0_10*dmats2[10][4] + coeff0_11*dmats2[11][4] + coeff0_12*dmats2[12][4] + coeff0_13*dmats2[13][4] + coeff0_14*dmats2[14][4] + coeff0_15*dmats2[15][4] + coeff0_16*dmats2[16][4] + coeff0_17*dmats2[17][4] + coeff0_18*dmats2[18][4] + coeff0_19*dmats2[19][4] + coeff0_20*dmats2[20][4] + coeff0_21*dmats2[21][4] + coeff0_22*dmats2[22][4] + coeff0_23*dmats2[23][4] + coeff0_24*dmats2[24][4] + coeff0_25*dmats2[25][4] + coeff0_26*dmats2[26][4] + coeff0_27*dmats2[27][4] + coeff0_28*dmats2[28][4] + coeff0_29*dmats2[29][4] + coeff0_30*dmats2[30][4] + coeff0_31*dmats2[31][4] + coeff0_32*dmats2[32][4] + coeff0_33*dmats2[33][4] + coeff0_34*dmats2[34][4];
          new_coeff0_5 = coeff0_0*dmats2[0][5] + coeff0_1*dmats2[1][5] + coeff0_2*dmats2[2][5] + coeff0_3*dmats2[3][5] + coeff0_4*dmats2[4][5] + coeff0_5*dmats2[5][5] + coeff0_6*dmats2[6][5] + coeff0_7*dmats2[7][5] + coeff0_8*dmats2[8][5] + coeff0_9*dmats2[9][5] + coeff0_10*dmats2[10][5] + coeff0_11*dmats2[11][5] + coeff0_12*dmats2[12][5] + coeff0_13*dmats2[13][5] + coeff0_14*dmats2[14][5] + coeff0_15*dmats2[15][5] + coeff0_16*dmats2[16][5] + coeff0_17*dmats2[17][5] + coeff0_18*dmats2[18][5] + coeff0_19*dmats2[19][5] + coeff0_20*dmats2[20][5] + coeff0_21*dmats2[21][5] + coeff0_22*dmats2[22][5] + coeff0_23*dmats2[23][5] + coeff0_24*dmats2[24][5] + coeff0_25*dmats2[25][5] + coeff0_26*dmats2[26][5] + coeff0_27*dmats2[27][5] + coeff0_28*dmats2[28][5] + coeff0_29*dmats2[29][5] + coeff0_30*dmats2[30][5] + coeff0_31*dmats2[31][5] + coeff0_32*dmats2[32][5] + coeff0_33*dmats2[33][5] + coeff0_34*dmats2[34][5];
          new_coeff0_6 = coeff0_0*dmats2[0][6] + coeff0_1*dmats2[1][6] + coeff0_2*dmats2[2][6] + coeff0_3*dmats2[3][6] + coeff0_4*dmats2[4][6] + coeff0_5*dmats2[5][6] + coeff0_6*dmats2[6][6] + coeff0_7*dmats2[7][6] + coeff0_8*dmats2[8][6] + coeff0_9*dmats2[9][6] + coeff0_10*dmats2[10][6] + coeff0_11*dmats2[11][6] + coeff0_12*dmats2[12][6] + coeff0_13*dmats2[13][6] + coeff0_14*dmats2[14][6] + coeff0_15*dmats2[15][6] + coeff0_16*dmats2[16][6] + coeff0_17*dmats2[17][6] + coeff0_18*dmats2[18][6] + coeff0_19*dmats2[19][6] + coeff0_20*dmats2[20][6] + coeff0_21*dmats2[21][6] + coeff0_22*dmats2[22][6] + coeff0_23*dmats2[23][6] + coeff0_24*dmats2[24][6] + coeff0_25*dmats2[25][6] + coeff0_26*dmats2[26][6] + coeff0_27*dmats2[27][6] + coeff0_28*dmats2[28][6] + coeff0_29*dmats2[29][6] + coeff0_30*dmats2[30][6] + coeff0_31*dmats2[31][6] + coeff0_32*dmats2[32][6] + coeff0_33*dmats2[33][6] + coeff0_34*dmats2[34][6];
          new_coeff0_7 = coeff0_0*dmats2[0][7] + coeff0_1*dmats2[1][7] + coeff0_2*dmats2[2][7] + coeff0_3*dmats2[3][7] + coeff0_4*dmats2[4][7] + coeff0_5*dmats2[5][7] + coeff0_6*dmats2[6][7] + coeff0_7*dmats2[7][7] + coeff0_8*dmats2[8][7] + coeff0_9*dmats2[9][7] + coeff0_10*dmats2[10][7] + coeff0_11*dmats2[11][7] + coeff0_12*dmats2[12][7] + coeff0_13*dmats2[13][7] + coeff0_14*dmats2[14][7] + coeff0_15*dmats2[15][7] + coeff0_16*dmats2[16][7] + coeff0_17*dmats2[17][7] + coeff0_18*dmats2[18][7] + coeff0_19*dmats2[19][7] + coeff0_20*dmats2[20][7] + coeff0_21*dmats2[21][7] + coeff0_22*dmats2[22][7] + coeff0_23*dmats2[23][7] + coeff0_24*dmats2[24][7] + coeff0_25*dmats2[25][7] + coeff0_26*dmats2[26][7] + coeff0_27*dmats2[27][7] + coeff0_28*dmats2[28][7] + coeff0_29*dmats2[29][7] + coeff0_30*dmats2[30][7] + coeff0_31*dmats2[31][7] + coeff0_32*dmats2[32][7] + coeff0_33*dmats2[33][7] + coeff0_34*dmats2[34][7];
          new_coeff0_8 = coeff0_0*dmats2[0][8] + coeff0_1*dmats2[1][8] + coeff0_2*dmats2[2][8] + coeff0_3*dmats2[3][8] + coeff0_4*dmats2[4][8] + coeff0_5*dmats2[5][8] + coeff0_6*dmats2[6][8] + coeff0_7*dmats2[7][8] + coeff0_8*dmats2[8][8] + coeff0_9*dmats2[9][8] + coeff0_10*dmats2[10][8] + coeff0_11*dmats2[11][8] + coeff0_12*dmats2[12][8] + coeff0_13*dmats2[13][8] + coeff0_14*dmats2[14][8] + coeff0_15*dmats2[15][8] + coeff0_16*dmats2[16][8] + coeff0_17*dmats2[17][8] + coeff0_18*dmats2[18][8] + coeff0_19*dmats2[19][8] + coeff0_20*dmats2[20][8] + coeff0_21*dmats2[21][8] + coeff0_22*dmats2[22][8] + coeff0_23*dmats2[23][8] + coeff0_24*dmats2[24][8] + coeff0_25*dmats2[25][8] + coeff0_26*dmats2[26][8] + coeff0_27*dmats2[27][8] + coeff0_28*dmats2[28][8] + coeff0_29*dmats2[29][8] + coeff0_30*dmats2[30][8] + coeff0_31*dmats2[31][8] + coeff0_32*dmats2[32][8] + coeff0_33*dmats2[33][8] + coeff0_34*dmats2[34][8];
          new_coeff0_9 = coeff0_0*dmats2[0][9] + coeff0_1*dmats2[1][9] + coeff0_2*dmats2[2][9] + coeff0_3*dmats2[3][9] + coeff0_4*dmats2[4][9] + coeff0_5*dmats2[5][9] + coeff0_6*dmats2[6][9] + coeff0_7*dmats2[7][9] + coeff0_8*dmats2[8][9] + coeff0_9*dmats2[9][9] + coeff0_10*dmats2[10][9] + coeff0_11*dmats2[11][9] + coeff0_12*dmats2[12][9] + coeff0_13*dmats2[13][9] + coeff0_14*dmats2[14][9] + coeff0_15*dmats2[15][9] + coeff0_16*dmats2[16][9] + coeff0_17*dmats2[17][9] + coeff0_18*dmats2[18][9] + coeff0_19*dmats2[19][9] + coeff0_20*dmats2[20][9] + coeff0_21*dmats2[21][9] + coeff0_22*dmats2[22][9] + coeff0_23*dmats2[23][9] + coeff0_24*dmats2[24][9] + coeff0_25*dmats2[25][9] + coeff0_26*dmats2[26][9] + coeff0_27*dmats2[27][9] + coeff0_28*dmats2[28][9] + coeff0_29*dmats2[29][9] + coeff0_30*dmats2[30][9] + coeff0_31*dmats2[31][9] + coeff0_32*dmats2[32][9] + coeff0_33*dmats2[33][9] + coeff0_34*dmats2[34][9];
          new_coeff0_10 = coeff0_0*dmats2[0][10] + coeff0_1*dmats2[1][10] + coeff0_2*dmats2[2][10] + coeff0_3*dmats2[3][10] + coeff0_4*dmats2[4][10] + coeff0_5*dmats2[5][10] + coeff0_6*dmats2[6][10] + coeff0_7*dmats2[7][10] + coeff0_8*dmats2[8][10] + coeff0_9*dmats2[9][10] + coeff0_10*dmats2[10][10] + coeff0_11*dmats2[11][10] + coeff0_12*dmats2[12][10] + coeff0_13*dmats2[13][10] + coeff0_14*dmats2[14][10] + coeff0_15*dmats2[15][10] + coeff0_16*dmats2[16][10] + coeff0_17*dmats2[17][10] + coeff0_18*dmats2[18][10] + coeff0_19*dmats2[19][10] + coeff0_20*dmats2[20][10] + coeff0_21*dmats2[21][10] + coeff0_22*dmats2[22][10] + coeff0_23*dmats2[23][10] + coeff0_24*dmats2[24][10] + coeff0_25*dmats2[25][10] + coeff0_26*dmats2[26][10] + coeff0_27*dmats2[27][10] + coeff0_28*dmats2[28][10] + coeff0_29*dmats2[29][10] + coeff0_30*dmats2[30][10] + coeff0_31*dmats2[31][10] + coeff0_32*dmats2[32][10] + coeff0_33*dmats2[33][10] + coeff0_34*dmats2[34][10];
          new_coeff0_11 = coeff0_0*dmats2[0][11] + coeff0_1*dmats2[1][11] + coeff0_2*dmats2[2][11] + coeff0_3*dmats2[3][11] + coeff0_4*dmats2[4][11] + coeff0_5*dmats2[5][11] + coeff0_6*dmats2[6][11] + coeff0_7*dmats2[7][11] + coeff0_8*dmats2[8][11] + coeff0_9*dmats2[9][11] + coeff0_10*dmats2[10][11] + coeff0_11*dmats2[11][11] + coeff0_12*dmats2[12][11] + coeff0_13*dmats2[13][11] + coeff0_14*dmats2[14][11] + coeff0_15*dmats2[15][11] + coeff0_16*dmats2[16][11] + coeff0_17*dmats2[17][11] + coeff0_18*dmats2[18][11] + coeff0_19*dmats2[19][11] + coeff0_20*dmats2[20][11] + coeff0_21*dmats2[21][11] + coeff0_22*dmats2[22][11] + coeff0_23*dmats2[23][11] + coeff0_24*dmats2[24][11] + coeff0_25*dmats2[25][11] + coeff0_26*dmats2[26][11] + coeff0_27*dmats2[27][11] + coeff0_28*dmats2[28][11] + coeff0_29*dmats2[29][11] + coeff0_30*dmats2[30][11] + coeff0_31*dmats2[31][11] + coeff0_32*dmats2[32][11] + coeff0_33*dmats2[33][11] + coeff0_34*dmats2[34][11];
          new_coeff0_12 = coeff0_0*dmats2[0][12] + coeff0_1*dmats2[1][12] + coeff0_2*dmats2[2][12] + coeff0_3*dmats2[3][12] + coeff0_4*dmats2[4][12] + coeff0_5*dmats2[5][12] + coeff0_6*dmats2[6][12] + coeff0_7*dmats2[7][12] + coeff0_8*dmats2[8][12] + coeff0_9*dmats2[9][12] + coeff0_10*dmats2[10][12] + coeff0_11*dmats2[11][12] + coeff0_12*dmats2[12][12] + coeff0_13*dmats2[13][12] + coeff0_14*dmats2[14][12] + coeff0_15*dmats2[15][12] + coeff0_16*dmats2[16][12] + coeff0_17*dmats2[17][12] + coeff0_18*dmats2[18][12] + coeff0_19*dmats2[19][12] + coeff0_20*dmats2[20][12] + coeff0_21*dmats2[21][12] + coeff0_22*dmats2[22][12] + coeff0_23*dmats2[23][12] + coeff0_24*dmats2[24][12] + coeff0_25*dmats2[25][12] + coeff0_26*dmats2[26][12] + coeff0_27*dmats2[27][12] + coeff0_28*dmats2[28][12] + coeff0_29*dmats2[29][12] + coeff0_30*dmats2[30][12] + coeff0_31*dmats2[31][12] + coeff0_32*dmats2[32][12] + coeff0_33*dmats2[33][12] + coeff0_34*dmats2[34][12];
          new_coeff0_13 = coeff0_0*dmats2[0][13] + coeff0_1*dmats2[1][13] + coeff0_2*dmats2[2][13] + coeff0_3*dmats2[3][13] + coeff0_4*dmats2[4][13] + coeff0_5*dmats2[5][13] + coeff0_6*dmats2[6][13] + coeff0_7*dmats2[7][13] + coeff0_8*dmats2[8][13] + coeff0_9*dmats2[9][13] + coeff0_10*dmats2[10][13] + coeff0_11*dmats2[11][13] + coeff0_12*dmats2[12][13] + coeff0_13*dmats2[13][13] + coeff0_14*dmats2[14][13] + coeff0_15*dmats2[15][13] + coeff0_16*dmats2[16][13] + coeff0_17*dmats2[17][13] + coeff0_18*dmats2[18][13] + coeff0_19*dmats2[19][13] + coeff0_20*dmats2[20][13] + coeff0_21*dmats2[21][13] + coeff0_22*dmats2[22][13] + coeff0_23*dmats2[23][13] + coeff0_24*dmats2[24][13] + coeff0_25*dmats2[25][13] + coeff0_26*dmats2[26][13] + coeff0_27*dmats2[27][13] + coeff0_28*dmats2[28][13] + coeff0_29*dmats2[29][13] + coeff0_30*dmats2[30][13] + coeff0_31*dmats2[31][13] + coeff0_32*dmats2[32][13] + coeff0_33*dmats2[33][13] + coeff0_34*dmats2[34][13];
          new_coeff0_14 = coeff0_0*dmats2[0][14] + coeff0_1*dmats2[1][14] + coeff0_2*dmats2[2][14] + coeff0_3*dmats2[3][14] + coeff0_4*dmats2[4][14] + coeff0_5*dmats2[5][14] + coeff0_6*dmats2[6][14] + coeff0_7*dmats2[7][14] + coeff0_8*dmats2[8][14] + coeff0_9*dmats2[9][14] + coeff0_10*dmats2[10][14] + coeff0_11*dmats2[11][14] + coeff0_12*dmats2[12][14] + coeff0_13*dmats2[13][14] + coeff0_14*dmats2[14][14] + coeff0_15*dmats2[15][14] + coeff0_16*dmats2[16][14] + coeff0_17*dmats2[17][14] + coeff0_18*dmats2[18][14] + coeff0_19*dmats2[19][14] + coeff0_20*dmats2[20][14] + coeff0_21*dmats2[21][14] + coeff0_22*dmats2[22][14] + coeff0_23*dmats2[23][14] + coeff0_24*dmats2[24][14] + coeff0_25*dmats2[25][14] + coeff0_26*dmats2[26][14] + coeff0_27*dmats2[27][14] + coeff0_28*dmats2[28][14] + coeff0_29*dmats2[29][14] + coeff0_30*dmats2[30][14] + coeff0_31*dmats2[31][14] + coeff0_32*dmats2[32][14] + coeff0_33*dmats2[33][14] + coeff0_34*dmats2[34][14];
          new_coeff0_15 = coeff0_0*dmats2[0][15] + coeff0_1*dmats2[1][15] + coeff0_2*dmats2[2][15] + coeff0_3*dmats2[3][15] + coeff0_4*dmats2[4][15] + coeff0_5*dmats2[5][15] + coeff0_6*dmats2[6][15] + coeff0_7*dmats2[7][15] + coeff0_8*dmats2[8][15] + coeff0_9*dmats2[9][15] + coeff0_10*dmats2[10][15] + coeff0_11*dmats2[11][15] + coeff0_12*dmats2[12][15] + coeff0_13*dmats2[13][15] + coeff0_14*dmats2[14][15] + coeff0_15*dmats2[15][15] + coeff0_16*dmats2[16][15] + coeff0_17*dmats2[17][15] + coeff0_18*dmats2[18][15] + coeff0_19*dmats2[19][15] + coeff0_20*dmats2[20][15] + coeff0_21*dmats2[21][15] + coeff0_22*dmats2[22][15] + coeff0_23*dmats2[23][15] + coeff0_24*dmats2[24][15] + coeff0_25*dmats2[25][15] + coeff0_26*dmats2[26][15] + coeff0_27*dmats2[27][15] + coeff0_28*dmats2[28][15] + coeff0_29*dmats2[29][15] + coeff0_30*dmats2[30][15] + coeff0_31*dmats2[31][15] + coeff0_32*dmats2[32][15] + coeff0_33*dmats2[33][15] + coeff0_34*dmats2[34][15];
          new_coeff0_16 = coeff0_0*dmats2[0][16] + coeff0_1*dmats2[1][16] + coeff0_2*dmats2[2][16] + coeff0_3*dmats2[3][16] + coeff0_4*dmats2[4][16] + coeff0_5*dmats2[5][16] + coeff0_6*dmats2[6][16] + coeff0_7*dmats2[7][16] + coeff0_8*dmats2[8][16] + coeff0_9*dmats2[9][16] + coeff0_10*dmats2[10][16] + coeff0_11*dmats2[11][16] + coeff0_12*dmats2[12][16] + coeff0_13*dmats2[13][16] + coeff0_14*dmats2[14][16] + coeff0_15*dmats2[15][16] + coeff0_16*dmats2[16][16] + coeff0_17*dmats2[17][16] + coeff0_18*dmats2[18][16] + coeff0_19*dmats2[19][16] + coeff0_20*dmats2[20][16] + coeff0_21*dmats2[21][16] + coeff0_22*dmats2[22][16] + coeff0_23*dmats2[23][16] + coeff0_24*dmats2[24][16] + coeff0_25*dmats2[25][16] + coeff0_26*dmats2[26][16] + coeff0_27*dmats2[27][16] + coeff0_28*dmats2[28][16] + coeff0_29*dmats2[29][16] + coeff0_30*dmats2[30][16] + coeff0_31*dmats2[31][16] + coeff0_32*dmats2[32][16] + coeff0_33*dmats2[33][16] + coeff0_34*dmats2[34][16];
          new_coeff0_17 = coeff0_0*dmats2[0][17] + coeff0_1*dmats2[1][17] + coeff0_2*dmats2[2][17] + coeff0_3*dmats2[3][17] + coeff0_4*dmats2[4][17] + coeff0_5*dmats2[5][17] + coeff0_6*dmats2[6][17] + coeff0_7*dmats2[7][17] + coeff0_8*dmats2[8][17] + coeff0_9*dmats2[9][17] + coeff0_10*dmats2[10][17] + coeff0_11*dmats2[11][17] + coeff0_12*dmats2[12][17] + coeff0_13*dmats2[13][17] + coeff0_14*dmats2[14][17] + coeff0_15*dmats2[15][17] + coeff0_16*dmats2[16][17] + coeff0_17*dmats2[17][17] + coeff0_18*dmats2[18][17] + coeff0_19*dmats2[19][17] + coeff0_20*dmats2[20][17] + coeff0_21*dmats2[21][17] + coeff0_22*dmats2[22][17] + coeff0_23*dmats2[23][17] + coeff0_24*dmats2[24][17] + coeff0_25*dmats2[25][17] + coeff0_26*dmats2[26][17] + coeff0_27*dmats2[27][17] + coeff0_28*dmats2[28][17] + coeff0_29*dmats2[29][17] + coeff0_30*dmats2[30][17] + coeff0_31*dmats2[31][17] + coeff0_32*dmats2[32][17] + coeff0_33*dmats2[33][17] + coeff0_34*dmats2[34][17];
          new_coeff0_18 = coeff0_0*dmats2[0][18] + coeff0_1*dmats2[1][18] + coeff0_2*dmats2[2][18] + coeff0_3*dmats2[3][18] + coeff0_4*dmats2[4][18] + coeff0_5*dmats2[5][18] + coeff0_6*dmats2[6][18] + coeff0_7*dmats2[7][18] + coeff0_8*dmats2[8][18] + coeff0_9*dmats2[9][18] + coeff0_10*dmats2[10][18] + coeff0_11*dmats2[11][18] + coeff0_12*dmats2[12][18] + coeff0_13*dmats2[13][18] + coeff0_14*dmats2[14][18] + coeff0_15*dmats2[15][18] + coeff0_16*dmats2[16][18] + coeff0_17*dmats2[17][18] + coeff0_18*dmats2[18][18] + coeff0_19*dmats2[19][18] + coeff0_20*dmats2[20][18] + coeff0_21*dmats2[21][18] + coeff0_22*dmats2[22][18] + coeff0_23*dmats2[23][18] + coeff0_24*dmats2[24][18] + coeff0_25*dmats2[25][18] + coeff0_26*dmats2[26][18] + coeff0_27*dmats2[27][18] + coeff0_28*dmats2[28][18] + coeff0_29*dmats2[29][18] + coeff0_30*dmats2[30][18] + coeff0_31*dmats2[31][18] + coeff0_32*dmats2[32][18] + coeff0_33*dmats2[33][18] + coeff0_34*dmats2[34][18];
          new_coeff0_19 = coeff0_0*dmats2[0][19] + coeff0_1*dmats2[1][19] + coeff0_2*dmats2[2][19] + coeff0_3*dmats2[3][19] + coeff0_4*dmats2[4][19] + coeff0_5*dmats2[5][19] + coeff0_6*dmats2[6][19] + coeff0_7*dmats2[7][19] + coeff0_8*dmats2[8][19] + coeff0_9*dmats2[9][19] + coeff0_10*dmats2[10][19] + coeff0_11*dmats2[11][19] + coeff0_12*dmats2[12][19] + coeff0_13*dmats2[13][19] + coeff0_14*dmats2[14][19] + coeff0_15*dmats2[15][19] + coeff0_16*dmats2[16][19] + coeff0_17*dmats2[17][19] + coeff0_18*dmats2[18][19] + coeff0_19*dmats2[19][19] + coeff0_20*dmats2[20][19] + coeff0_21*dmats2[21][19] + coeff0_22*dmats2[22][19] + coeff0_23*dmats2[23][19] + coeff0_24*dmats2[24][19] + coeff0_25*dmats2[25][19] + coeff0_26*dmats2[26][19] + coeff0_27*dmats2[27][19] + coeff0_28*dmats2[28][19] + coeff0_29*dmats2[29][19] + coeff0_30*dmats2[30][19] + coeff0_31*dmats2[31][19] + coeff0_32*dmats2[32][19] + coeff0_33*dmats2[33][19] + coeff0_34*dmats2[34][19];
          new_coeff0_20 = coeff0_0*dmats2[0][20] + coeff0_1*dmats2[1][20] + coeff0_2*dmats2[2][20] + coeff0_3*dmats2[3][20] + coeff0_4*dmats2[4][20] + coeff0_5*dmats2[5][20] + coeff0_6*dmats2[6][20] + coeff0_7*dmats2[7][20] + coeff0_8*dmats2[8][20] + coeff0_9*dmats2[9][20] + coeff0_10*dmats2[10][20] + coeff0_11*dmats2[11][20] + coeff0_12*dmats2[12][20] + coeff0_13*dmats2[13][20] + coeff0_14*dmats2[14][20] + coeff0_15*dmats2[15][20] + coeff0_16*dmats2[16][20] + coeff0_17*dmats2[17][20] + coeff0_18*dmats2[18][20] + coeff0_19*dmats2[19][20] + coeff0_20*dmats2[20][20] + coeff0_21*dmats2[21][20] + coeff0_22*dmats2[22][20] + coeff0_23*dmats2[23][20] + coeff0_24*dmats2[24][20] + coeff0_25*dmats2[25][20] + coeff0_26*dmats2[26][20] + coeff0_27*dmats2[27][20] + coeff0_28*dmats2[28][20] + coeff0_29*dmats2[29][20] + coeff0_30*dmats2[30][20] + coeff0_31*dmats2[31][20] + coeff0_32*dmats2[32][20] + coeff0_33*dmats2[33][20] + coeff0_34*dmats2[34][20];
          new_coeff0_21 = coeff0_0*dmats2[0][21] + coeff0_1*dmats2[1][21] + coeff0_2*dmats2[2][21] + coeff0_3*dmats2[3][21] + coeff0_4*dmats2[4][21] + coeff0_5*dmats2[5][21] + coeff0_6*dmats2[6][21] + coeff0_7*dmats2[7][21] + coeff0_8*dmats2[8][21] + coeff0_9*dmats2[9][21] + coeff0_10*dmats2[10][21] + coeff0_11*dmats2[11][21] + coeff0_12*dmats2[12][21] + coeff0_13*dmats2[13][21] + coeff0_14*dmats2[14][21] + coeff0_15*dmats2[15][21] + coeff0_16*dmats2[16][21] + coeff0_17*dmats2[17][21] + coeff0_18*dmats2[18][21] + coeff0_19*dmats2[19][21] + coeff0_20*dmats2[20][21] + coeff0_21*dmats2[21][21] + coeff0_22*dmats2[22][21] + coeff0_23*dmats2[23][21] + coeff0_24*dmats2[24][21] + coeff0_25*dmats2[25][21] + coeff0_26*dmats2[26][21] + coeff0_27*dmats2[27][21] + coeff0_28*dmats2[28][21] + coeff0_29*dmats2[29][21] + coeff0_30*dmats2[30][21] + coeff0_31*dmats2[31][21] + coeff0_32*dmats2[32][21] + coeff0_33*dmats2[33][21] + coeff0_34*dmats2[34][21];
          new_coeff0_22 = coeff0_0*dmats2[0][22] + coeff0_1*dmats2[1][22] + coeff0_2*dmats2[2][22] + coeff0_3*dmats2[3][22] + coeff0_4*dmats2[4][22] + coeff0_5*dmats2[5][22] + coeff0_6*dmats2[6][22] + coeff0_7*dmats2[7][22] + coeff0_8*dmats2[8][22] + coeff0_9*dmats2[9][22] + coeff0_10*dmats2[10][22] + coeff0_11*dmats2[11][22] + coeff0_12*dmats2[12][22] + coeff0_13*dmats2[13][22] + coeff0_14*dmats2[14][22] + coeff0_15*dmats2[15][22] + coeff0_16*dmats2[16][22] + coeff0_17*dmats2[17][22] + coeff0_18*dmats2[18][22] + coeff0_19*dmats2[19][22] + coeff0_20*dmats2[20][22] + coeff0_21*dmats2[21][22] + coeff0_22*dmats2[22][22] + coeff0_23*dmats2[23][22] + coeff0_24*dmats2[24][22] + coeff0_25*dmats2[25][22] + coeff0_26*dmats2[26][22] + coeff0_27*dmats2[27][22] + coeff0_28*dmats2[28][22] + coeff0_29*dmats2[29][22] + coeff0_30*dmats2[30][22] + coeff0_31*dmats2[31][22] + coeff0_32*dmats2[32][22] + coeff0_33*dmats2[33][22] + coeff0_34*dmats2[34][22];
          new_coeff0_23 = coeff0_0*dmats2[0][23] + coeff0_1*dmats2[1][23] + coeff0_2*dmats2[2][23] + coeff0_3*dmats2[3][23] + coeff0_4*dmats2[4][23] + coeff0_5*dmats2[5][23] + coeff0_6*dmats2[6][23] + coeff0_7*dmats2[7][23] + coeff0_8*dmats2[8][23] + coeff0_9*dmats2[9][23] + coeff0_10*dmats2[10][23] + coeff0_11*dmats2[11][23] + coeff0_12*dmats2[12][23] + coeff0_13*dmats2[13][23] + coeff0_14*dmats2[14][23] + coeff0_15*dmats2[15][23] + coeff0_16*dmats2[16][23] + coeff0_17*dmats2[17][23] + coeff0_18*dmats2[18][23] + coeff0_19*dmats2[19][23] + coeff0_20*dmats2[20][23] + coeff0_21*dmats2[21][23] + coeff0_22*dmats2[22][23] + coeff0_23*dmats2[23][23] + coeff0_24*dmats2[24][23] + coeff0_25*dmats2[25][23] + coeff0_26*dmats2[26][23] + coeff0_27*dmats2[27][23] + coeff0_28*dmats2[28][23] + coeff0_29*dmats2[29][23] + coeff0_30*dmats2[30][23] + coeff0_31*dmats2[31][23] + coeff0_32*dmats2[32][23] + coeff0_33*dmats2[33][23] + coeff0_34*dmats2[34][23];
          new_coeff0_24 = coeff0_0*dmats2[0][24] + coeff0_1*dmats2[1][24] + coeff0_2*dmats2[2][24] + coeff0_3*dmats2[3][24] + coeff0_4*dmats2[4][24] + coeff0_5*dmats2[5][24] + coeff0_6*dmats2[6][24] + coeff0_7*dmats2[7][24] + coeff0_8*dmats2[8][24] + coeff0_9*dmats2[9][24] + coeff0_10*dmats2[10][24] + coeff0_11*dmats2[11][24] + coeff0_12*dmats2[12][24] + coeff0_13*dmats2[13][24] + coeff0_14*dmats2[14][24] + coeff0_15*dmats2[15][24] + coeff0_16*dmats2[16][24] + coeff0_17*dmats2[17][24] + coeff0_18*dmats2[18][24] + coeff0_19*dmats2[19][24] + coeff0_20*dmats2[20][24] + coeff0_21*dmats2[21][24] + coeff0_22*dmats2[22][24] + coeff0_23*dmats2[23][24] + coeff0_24*dmats2[24][24] + coeff0_25*dmats2[25][24] + coeff0_26*dmats2[26][24] + coeff0_27*dmats2[27][24] + coeff0_28*dmats2[28][24] + coeff0_29*dmats2[29][24] + coeff0_30*dmats2[30][24] + coeff0_31*dmats2[31][24] + coeff0_32*dmats2[32][24] + coeff0_33*dmats2[33][24] + coeff0_34*dmats2[34][24];
          new_coeff0_25 = coeff0_0*dmats2[0][25] + coeff0_1*dmats2[1][25] + coeff0_2*dmats2[2][25] + coeff0_3*dmats2[3][25] + coeff0_4*dmats2[4][25] + coeff0_5*dmats2[5][25] + coeff0_6*dmats2[6][25] + coeff0_7*dmats2[7][25] + coeff0_8*dmats2[8][25] + coeff0_9*dmats2[9][25] + coeff0_10*dmats2[10][25] + coeff0_11*dmats2[11][25] + coeff0_12*dmats2[12][25] + coeff0_13*dmats2[13][25] + coeff0_14*dmats2[14][25] + coeff0_15*dmats2[15][25] + coeff0_16*dmats2[16][25] + coeff0_17*dmats2[17][25] + coeff0_18*dmats2[18][25] + coeff0_19*dmats2[19][25] + coeff0_20*dmats2[20][25] + coeff0_21*dmats2[21][25] + coeff0_22*dmats2[22][25] + coeff0_23*dmats2[23][25] + coeff0_24*dmats2[24][25] + coeff0_25*dmats2[25][25] + coeff0_26*dmats2[26][25] + coeff0_27*dmats2[27][25] + coeff0_28*dmats2[28][25] + coeff0_29*dmats2[29][25] + coeff0_30*dmats2[30][25] + coeff0_31*dmats2[31][25] + coeff0_32*dmats2[32][25] + coeff0_33*dmats2[33][25] + coeff0_34*dmats2[34][25];
          new_coeff0_26 = coeff0_0*dmats2[0][26] + coeff0_1*dmats2[1][26] + coeff0_2*dmats2[2][26] + coeff0_3*dmats2[3][26] + coeff0_4*dmats2[4][26] + coeff0_5*dmats2[5][26] + coeff0_6*dmats2[6][26] + coeff0_7*dmats2[7][26] + coeff0_8*dmats2[8][26] + coeff0_9*dmats2[9][26] + coeff0_10*dmats2[10][26] + coeff0_11*dmats2[11][26] + coeff0_12*dmats2[12][26] + coeff0_13*dmats2[13][26] + coeff0_14*dmats2[14][26] + coeff0_15*dmats2[15][26] + coeff0_16*dmats2[16][26] + coeff0_17*dmats2[17][26] + coeff0_18*dmats2[18][26] + coeff0_19*dmats2[19][26] + coeff0_20*dmats2[20][26] + coeff0_21*dmats2[21][26] + coeff0_22*dmats2[22][26] + coeff0_23*dmats2[23][26] + coeff0_24*dmats2[24][26] + coeff0_25*dmats2[25][26] + coeff0_26*dmats2[26][26] + coeff0_27*dmats2[27][26] + coeff0_28*dmats2[28][26] + coeff0_29*dmats2[29][26] + coeff0_30*dmats2[30][26] + coeff0_31*dmats2[31][26] + coeff0_32*dmats2[32][26] + coeff0_33*dmats2[33][26] + coeff0_34*dmats2[34][26];
          new_coeff0_27 = coeff0_0*dmats2[0][27] + coeff0_1*dmats2[1][27] + coeff0_2*dmats2[2][27] + coeff0_3*dmats2[3][27] + coeff0_4*dmats2[4][27] + coeff0_5*dmats2[5][27] + coeff0_6*dmats2[6][27] + coeff0_7*dmats2[7][27] + coeff0_8*dmats2[8][27] + coeff0_9*dmats2[9][27] + coeff0_10*dmats2[10][27] + coeff0_11*dmats2[11][27] + coeff0_12*dmats2[12][27] + coeff0_13*dmats2[13][27] + coeff0_14*dmats2[14][27] + coeff0_15*dmats2[15][27] + coeff0_16*dmats2[16][27] + coeff0_17*dmats2[17][27] + coeff0_18*dmats2[18][27] + coeff0_19*dmats2[19][27] + coeff0_20*dmats2[20][27] + coeff0_21*dmats2[21][27] + coeff0_22*dmats2[22][27] + coeff0_23*dmats2[23][27] + coeff0_24*dmats2[24][27] + coeff0_25*dmats2[25][27] + coeff0_26*dmats2[26][27] + coeff0_27*dmats2[27][27] + coeff0_28*dmats2[28][27] + coeff0_29*dmats2[29][27] + coeff0_30*dmats2[30][27] + coeff0_31*dmats2[31][27] + coeff0_32*dmats2[32][27] + coeff0_33*dmats2[33][27] + coeff0_34*dmats2[34][27];
          new_coeff0_28 = coeff0_0*dmats2[0][28] + coeff0_1*dmats2[1][28] + coeff0_2*dmats2[2][28] + coeff0_3*dmats2[3][28] + coeff0_4*dmats2[4][28] + coeff0_5*dmats2[5][28] + coeff0_6*dmats2[6][28] + coeff0_7*dmats2[7][28] + coeff0_8*dmats2[8][28] + coeff0_9*dmats2[9][28] + coeff0_10*dmats2[10][28] + coeff0_11*dmats2[11][28] + coeff0_12*dmats2[12][28] + coeff0_13*dmats2[13][28] + coeff0_14*dmats2[14][28] + coeff0_15*dmats2[15][28] + coeff0_16*dmats2[16][28] + coeff0_17*dmats2[17][28] + coeff0_18*dmats2[18][28] + coeff0_19*dmats2[19][28] + coeff0_20*dmats2[20][28] + coeff0_21*dmats2[21][28] + coeff0_22*dmats2[22][28] + coeff0_23*dmats2[23][28] + coeff0_24*dmats2[24][28] + coeff0_25*dmats2[25][28] + coeff0_26*dmats2[26][28] + coeff0_27*dmats2[27][28] + coeff0_28*dmats2[28][28] + coeff0_29*dmats2[29][28] + coeff0_30*dmats2[30][28] + coeff0_31*dmats2[31][28] + coeff0_32*dmats2[32][28] + coeff0_33*dmats2[33][28] + coeff0_34*dmats2[34][28];
          new_coeff0_29 = coeff0_0*dmats2[0][29] + coeff0_1*dmats2[1][29] + coeff0_2*dmats2[2][29] + coeff0_3*dmats2[3][29] + coeff0_4*dmats2[4][29] + coeff0_5*dmats2[5][29] + coeff0_6*dmats2[6][29] + coeff0_7*dmats2[7][29] + coeff0_8*dmats2[8][29] + coeff0_9*dmats2[9][29] + coeff0_10*dmats2[10][29] + coeff0_11*dmats2[11][29] + coeff0_12*dmats2[12][29] + coeff0_13*dmats2[13][29] + coeff0_14*dmats2[14][29] + coeff0_15*dmats2[15][29] + coeff0_16*dmats2[16][29] + coeff0_17*dmats2[17][29] + coeff0_18*dmats2[18][29] + coeff0_19*dmats2[19][29] + coeff0_20*dmats2[20][29] + coeff0_21*dmats2[21][29] + coeff0_22*dmats2[22][29] + coeff0_23*dmats2[23][29] + coeff0_24*dmats2[24][29] + coeff0_25*dmats2[25][29] + coeff0_26*dmats2[26][29] + coeff0_27*dmats2[27][29] + coeff0_28*dmats2[28][29] + coeff0_29*dmats2[29][29] + coeff0_30*dmats2[30][29] + coeff0_31*dmats2[31][29] + coeff0_32*dmats2[32][29] + coeff0_33*dmats2[33][29] + coeff0_34*dmats2[34][29];
          new_coeff0_30 = coeff0_0*dmats2[0][30] + coeff0_1*dmats2[1][30] + coeff0_2*dmats2[2][30] + coeff0_3*dmats2[3][30] + coeff0_4*dmats2[4][30] + coeff0_5*dmats2[5][30] + coeff0_6*dmats2[6][30] + coeff0_7*dmats2[7][30] + coeff0_8*dmats2[8][30] + coeff0_9*dmats2[9][30] + coeff0_10*dmats2[10][30] + coeff0_11*dmats2[11][30] + coeff0_12*dmats2[12][30] + coeff0_13*dmats2[13][30] + coeff0_14*dmats2[14][30] + coeff0_15*dmats2[15][30] + coeff0_16*dmats2[16][30] + coeff0_17*dmats2[17][30] + coeff0_18*dmats2[18][30] + coeff0_19*dmats2[19][30] + coeff0_20*dmats2[20][30] + coeff0_21*dmats2[21][30] + coeff0_22*dmats2[22][30] + coeff0_23*dmats2[23][30] + coeff0_24*dmats2[24][30] + coeff0_25*dmats2[25][30] + coeff0_26*dmats2[26][30] + coeff0_27*dmats2[27][30] + coeff0_28*dmats2[28][30] + coeff0_29*dmats2[29][30] + coeff0_30*dmats2[30][30] + coeff0_31*dmats2[31][30] + coeff0_32*dmats2[32][30] + coeff0_33*dmats2[33][30] + coeff0_34*dmats2[34][30];
          new_coeff0_31 = coeff0_0*dmats2[0][31] + coeff0_1*dmats2[1][31] + coeff0_2*dmats2[2][31] + coeff0_3*dmats2[3][31] + coeff0_4*dmats2[4][31] + coeff0_5*dmats2[5][31] + coeff0_6*dmats2[6][31] + coeff0_7*dmats2[7][31] + coeff0_8*dmats2[8][31] + coeff0_9*dmats2[9][31] + coeff0_10*dmats2[10][31] + coeff0_11*dmats2[11][31] + coeff0_12*dmats2[12][31] + coeff0_13*dmats2[13][31] + coeff0_14*dmats2[14][31] + coeff0_15*dmats2[15][31] + coeff0_16*dmats2[16][31] + coeff0_17*dmats2[17][31] + coeff0_18*dmats2[18][31] + coeff0_19*dmats2[19][31] + coeff0_20*dmats2[20][31] + coeff0_21*dmats2[21][31] + coeff0_22*dmats2[22][31] + coeff0_23*dmats2[23][31] + coeff0_24*dmats2[24][31] + coeff0_25*dmats2[25][31] + coeff0_26*dmats2[26][31] + coeff0_27*dmats2[27][31] + coeff0_28*dmats2[28][31] + coeff0_29*dmats2[29][31] + coeff0_30*dmats2[30][31] + coeff0_31*dmats2[31][31] + coeff0_32*dmats2[32][31] + coeff0_33*dmats2[33][31] + coeff0_34*dmats2[34][31];
          new_coeff0_32 = coeff0_0*dmats2[0][32] + coeff0_1*dmats2[1][32] + coeff0_2*dmats2[2][32] + coeff0_3*dmats2[3][32] + coeff0_4*dmats2[4][32] + coeff0_5*dmats2[5][32] + coeff0_6*dmats2[6][32] + coeff0_7*dmats2[7][32] + coeff0_8*dmats2[8][32] + coeff0_9*dmats2[9][32] + coeff0_10*dmats2[10][32] + coeff0_11*dmats2[11][32] + coeff0_12*dmats2[12][32] + coeff0_13*dmats2[13][32] + coeff0_14*dmats2[14][32] + coeff0_15*dmats2[15][32] + coeff0_16*dmats2[16][32] + coeff0_17*dmats2[17][32] + coeff0_18*dmats2[18][32] + coeff0_19*dmats2[19][32] + coeff0_20*dmats2[20][32] + coeff0_21*dmats2[21][32] + coeff0_22*dmats2[22][32] + coeff0_23*dmats2[23][32] + coeff0_24*dmats2[24][32] + coeff0_25*dmats2[25][32] + coeff0_26*dmats2[26][32] + coeff0_27*dmats2[27][32] + coeff0_28*dmats2[28][32] + coeff0_29*dmats2[29][32] + coeff0_30*dmats2[30][32] + coeff0_31*dmats2[31][32] + coeff0_32*dmats2[32][32] + coeff0_33*dmats2[33][32] + coeff0_34*dmats2[34][32];
          new_coeff0_33 = coeff0_0*dmats2[0][33] + coeff0_1*dmats2[1][33] + coeff0_2*dmats2[2][33] + coeff0_3*dmats2[3][33] + coeff0_4*dmats2[4][33] + coeff0_5*dmats2[5][33] + coeff0_6*dmats2[6][33] + coeff0_7*dmats2[7][33] + coeff0_8*dmats2[8][33] + coeff0_9*dmats2[9][33] + coeff0_10*dmats2[10][33] + coeff0_11*dmats2[11][33] + coeff0_12*dmats2[12][33] + coeff0_13*dmats2[13][33] + coeff0_14*dmats2[14][33] + coeff0_15*dmats2[15][33] + coeff0_16*dmats2[16][33] + coeff0_17*dmats2[17][33] + coeff0_18*dmats2[18][33] + coeff0_19*dmats2[19][33] + coeff0_20*dmats2[20][33] + coeff0_21*dmats2[21][33] + coeff0_22*dmats2[22][33] + coeff0_23*dmats2[23][33] + coeff0_24*dmats2[24][33] + coeff0_25*dmats2[25][33] + coeff0_26*dmats2[26][33] + coeff0_27*dmats2[27][33] + coeff0_28*dmats2[28][33] + coeff0_29*dmats2[29][33] + coeff0_30*dmats2[30][33] + coeff0_31*dmats2[31][33] + coeff0_32*dmats2[32][33] + coeff0_33*dmats2[33][33] + coeff0_34*dmats2[34][33];
          new_coeff0_34 = coeff0_0*dmats2[0][34] + coeff0_1*dmats2[1][34] + coeff0_2*dmats2[2][34] + coeff0_3*dmats2[3][34] + coeff0_4*dmats2[4][34] + coeff0_5*dmats2[5][34] + coeff0_6*dmats2[6][34] + coeff0_7*dmats2[7][34] + coeff0_8*dmats2[8][34] + coeff0_9*dmats2[9][34] + coeff0_10*dmats2[10][34] + coeff0_11*dmats2[11][34] + coeff0_12*dmats2[12][34] + coeff0_13*dmats2[13][34] + coeff0_14*dmats2[14][34] + coeff0_15*dmats2[15][34] + coeff0_16*dmats2[16][34] + coeff0_17*dmats2[17][34] + coeff0_18*dmats2[18][34] + coeff0_19*dmats2[19][34] + coeff0_20*dmats2[20][34] + coeff0_21*dmats2[21][34] + coeff0_22*dmats2[22][34] + coeff0_23*dmats2[23][34] + coeff0_24*dmats2[24][34] + coeff0_25*dmats2[25][34] + coeff0_26*dmats2[26][34] + coeff0_27*dmats2[27][34] + coeff0_28*dmats2[28][34] + coeff0_29*dmats2[29][34] + coeff0_30*dmats2[30][34] + coeff0_31*dmats2[31][34] + coeff0_32*dmats2[32][34] + coeff0_33*dmats2[33][34] + coeff0_34*dmats2[34][34];
        }
    
      }
      // Compute derivatives on reference element as dot product of coefficients and basisvalues
      derivatives[deriv_num] = new_coeff0_0*basisvalue0 + new_coeff0_1*basisvalue1 + new_coeff0_2*basisvalue2 + new_coeff0_3*basisvalue3 + new_coeff0_4*basisvalue4 + new_coeff0_5*basisvalue5 + new_coeff0_6*basisvalue6 + new_coeff0_7*basisvalue7 + new_coeff0_8*basisvalue8 + new_coeff0_9*basisvalue9 + new_coeff0_10*basisvalue10 + new_coeff0_11*basisvalue11 + new_coeff0_12*basisvalue12 + new_coeff0_13*basisvalue13 + new_coeff0_14*basisvalue14 + new_coeff0_15*basisvalue15 + new_coeff0_16*basisvalue16 + new_coeff0_17*basisvalue17 + new_coeff0_18*basisvalue18 + new_coeff0_19*basisvalue19 + new_coeff0_20*basisvalue20 + new_coeff0_21*basisvalue21 + new_coeff0_22*basisvalue22 + new_coeff0_23*basisvalue23 + new_coeff0_24*basisvalue24 + new_coeff0_25*basisvalue25 + new_coeff0_26*basisvalue26 + new_coeff0_27*basisvalue27 + new_coeff0_28*basisvalue28 + new_coeff0_29*basisvalue29 + new_coeff0_30*basisvalue30 + new_coeff0_31*basisvalue31 + new_coeff0_32*basisvalue32 + new_coeff0_33*basisvalue33 + new_coeff0_34*basisvalue34;
    }
    
    // Transform derivatives back to physical element
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        values[row] += transform[row][col]*derivatives[col];
      }
    }
    // Delete pointer to array of derivatives on FIAT element
    delete [] derivatives;
    
    // Delete pointer to array of combinations of derivatives and transform
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      delete [] combinations[row];
      delete [] transform[row];
    }
    
    delete [] combinations;
    delete [] transform;
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis_derivatives() is not yet implemented.");
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // The reference points, direction and weights:
    const static double X[35][1][3] = {{{0, 0, 0}}, {{1, 0, 0}}, {{0, 1, 0}}, {{0, 0, 1}}, {{0, 0.75, 0.25}}, {{0, 0.5, 0.5}}, {{0, 0.25, 0.75}}, {{0.75, 0, 0.25}}, {{0.5, 0, 0.5}}, {{0.25, 0, 0.75}}, {{0.75, 0.25, 0}}, {{0.5, 0.5, 0}}, {{0.25, 0.75, 0}}, {{0, 0, 0.25}}, {{0, 0, 0.5}}, {{0, 0, 0.75}}, {{0, 0.25, 0}}, {{0, 0.5, 0}}, {{0, 0.75, 0}}, {{0.25, 0, 0}}, {{0.5, 0, 0}}, {{0.75, 0, 0}}, {{0.5, 0.25, 0.25}}, {{0.25, 0.5, 0.25}}, {{0.25, 0.25, 0.5}}, {{0, 0.25, 0.25}}, {{0, 0.5, 0.25}}, {{0, 0.25, 0.5}}, {{0.25, 0, 0.25}}, {{0.5, 0, 0.25}}, {{0.25, 0, 0.5}}, {{0.25, 0.25, 0}}, {{0.5, 0.25, 0}}, {{0.25, 0.5, 0}}, {{0.25, 0.25, 0.25}}};
    const static double W[35][1] = {{1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}};
    const static double D[35][1][1] = {{{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}};
    
    const double * const * x = c.coordinates;
    double result = 0.0;
    // Iterate over the points:
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0][0] - X[i][0][1] - X[i][0][2];
    const double w1 = X[i][0][0];
    const double w2 = X[i][0][1];
    const double w3 = X[i][0][2];
    
    // Compute affine mapping y = F(X)
    double y[3];
    y[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0] + w3*x[3][0];
    y[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1] + w3*x[3][1];
    y[2] = w0*x[0][2] + w1*x[1][2] + w2*x[2][2] + w3*x[3][2];
    
    // Evaluate function at physical points
    double values[1];
    f.evaluate(values, y, c);
    
    // Map function values using appropriate mapping
    // Affine map: Do nothing
    
    // Note that we do not map the weights (yet).
    
    // Take directional components
    for(int k = 0; k < 1; k++)
      result += values[k]*D[i][0][k];
    // Multiply by weights 
    result *= W[i][0];
    
    return result;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate at vertices and use affine mapping
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new poisson3d_4_1_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class poisson3d_4_1_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  poisson3d_4_1_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~poisson3d_4_1_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', 'tetrahedron', 4)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 35;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_02 = element_coordinates[3][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
    const double J_12 = element_coordinates[3][1] - element_coordinates[0][1];
    const double J_20 = element_coordinates[1][2] - element_coordinates[0][2];
    const double J_21 = element_coordinates[2][2] - element_coordinates[0][2];
    const double J_22 = element_coordinates[3][2] - element_coordinates[0][2];
      
    // Compute sub determinants
    const double d00 = J_11*J_22 - J_12*J_21;
    const double d01 = J_12*J_20 - J_10*J_22;
    const double d02 = J_10*J_21 - J_11*J_20;
    
    const double d10 = J_02*J_21 - J_01*J_22;
    const double d11 = J_00*J_22 - J_02*J_20;
    const double d12 = J_01*J_20 - J_00*J_21;
    
    const double d20 = J_01*J_12 - J_02*J_11;
    const double d21 = J_02*J_10 - J_00*J_12;
    const double d22 = J_00*J_11 - J_01*J_10;
      
    // Compute determinant of Jacobian
    double detJ = J_00*d00 + J_10*d10 + J_20*d20;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = d00*(element_coordinates[0][0] - element_coordinates[2][0] - element_coordinates[3][0]) \
                    + d10*(element_coordinates[0][1] - element_coordinates[2][1] - element_coordinates[3][1]) \
                    + d20*(element_coordinates[0][2] - element_coordinates[2][2] - element_coordinates[3][2]);
    
    const double C1 = d01*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[3][0]) \
                    + d11*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[3][1]) \
                    + d21*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[3][2]);
    
    const double C2 = d02*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[2][0]) \
                    + d12*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[2][1]) \
                    + d22*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[2][2]);
    
    // Get coordinates and map to the UFC reference element
    double x = (C0 + d00*coordinates[0] + d10*coordinates[1] + d20*coordinates[2]) / detJ;
    double y = (C1 + d01*coordinates[0] + d11*coordinates[1] + d21*coordinates[2]) / detJ;
    double z = (C2 + d02*coordinates[0] + d12*coordinates[1] + d22*coordinates[2]) / detJ;
    
    // Map coordinates to the reference cube
    if (std::abs(y + z - 1.0) < 1e-14)
      x = 1.0;
    else
      x = -2.0 * x/(y + z - 1.0) - 1.0;
    if (std::abs(z - 1.0) < 1e-14)
      y = -1.0;
    else
      y = 2.0 * y/(1.0 - z) - 1.0;
    z = 2.0 * z - 1.0;
    
    // Reset values
    *values = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    const double scalings_y_4 = scalings_y_3*(0.5 - 0.5*y);
    const double scalings_z_0 = 1;
    const double scalings_z_1 = scalings_z_0*(0.5 - 0.5*z);
    const double scalings_z_2 = scalings_z_1*(0.5 - 0.5*z);
    const double scalings_z_3 = scalings_z_2*(0.5 - 0.5*z);
    const double scalings_z_4 = scalings_z_3*(0.5 - 0.5*z);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    const double psitilde_a_4 = 1.75*x*psitilde_a_3 - 0.75*psitilde_a_2;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_0_4 = 0.0285714285714286*psitilde_bs_0_3 + 1.8*y*psitilde_bs_0_3 - 0.771428571428571*psitilde_bs_0_2;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_1_3 = 0.285714285714286*psitilde_bs_1_2 + 2*y*psitilde_bs_1_2 - 0.714285714285714*psitilde_bs_1_1;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_2_2 = 1.02040816326531*psitilde_bs_2_1 + 2.57142857142857*y*psitilde_bs_2_1 - 0.551020408163265*psitilde_bs_2_0;
    const double psitilde_bs_3_0 = 1;
    const double psitilde_bs_3_1 = 4.5*y + 3.5;
    const double psitilde_bs_4_0 = 1;
    
    // Compute psitilde_cs
    const double psitilde_cs_00_0 = 1;
    const double psitilde_cs_00_1 = 2*z + 1;
    const double psitilde_cs_00_2 = 0.3125*psitilde_cs_00_1 + 1.875*z*psitilde_cs_00_1 - 0.5625*psitilde_cs_00_0;
    const double psitilde_cs_00_3 = 0.155555555555556*psitilde_cs_00_2 + 1.86666666666667*z*psitilde_cs_00_2 - 0.711111111111111*psitilde_cs_00_1;
    const double psitilde_cs_00_4 = 0.09375*psitilde_cs_00_3 + 1.875*z*psitilde_cs_00_3 - 0.78125*psitilde_cs_00_2;
    const double psitilde_cs_01_0 = 1;
    const double psitilde_cs_01_1 = 3*z + 2;
    const double psitilde_cs_01_2 = 0.777777777777778*psitilde_cs_01_1 + 2.33333333333333*z*psitilde_cs_01_1 - 0.555555555555556*psitilde_cs_01_0;
    const double psitilde_cs_01_3 = 0.428571428571429*psitilde_cs_01_2 + 2.14285714285714*z*psitilde_cs_01_2 - 0.714285714285714*psitilde_cs_01_1;
    const double psitilde_cs_02_0 = 1;
    const double psitilde_cs_02_1 = 4*z + 3;
    const double psitilde_cs_02_2 = 1.265625*psitilde_cs_02_1 + 2.8125*z*psitilde_cs_02_1 - 0.546875*psitilde_cs_02_0;
    const double psitilde_cs_03_0 = 1;
    const double psitilde_cs_03_1 = 5*z + 4;
    const double psitilde_cs_04_0 = 1;
    const double psitilde_cs_10_0 = 1;
    const double psitilde_cs_10_1 = 3*z + 2;
    const double psitilde_cs_10_2 = 0.777777777777778*psitilde_cs_10_1 + 2.33333333333333*z*psitilde_cs_10_1 - 0.555555555555556*psitilde_cs_10_0;
    const double psitilde_cs_10_3 = 0.428571428571429*psitilde_cs_10_2 + 2.14285714285714*z*psitilde_cs_10_2 - 0.714285714285714*psitilde_cs_10_1;
    const double psitilde_cs_11_0 = 1;
    const double psitilde_cs_11_1 = 4*z + 3;
    const double psitilde_cs_11_2 = 1.265625*psitilde_cs_11_1 + 2.8125*z*psitilde_cs_11_1 - 0.546875*psitilde_cs_11_0;
    const double psitilde_cs_12_0 = 1;
    const double psitilde_cs_12_1 = 5*z + 4;
    const double psitilde_cs_13_0 = 1;
    const double psitilde_cs_20_0 = 1;
    const double psitilde_cs_20_1 = 4*z + 3;
    const double psitilde_cs_20_2 = 1.265625*psitilde_cs_20_1 + 2.8125*z*psitilde_cs_20_1 - 0.546875*psitilde_cs_20_0;
    const double psitilde_cs_21_0 = 1;
    const double psitilde_cs_21_1 = 5*z + 4;
    const double psitilde_cs_22_0 = 1;
    const double psitilde_cs_30_0 = 1;
    const double psitilde_cs_30_1 = 5*z + 4;
    const double psitilde_cs_31_0 = 1;
    const double psitilde_cs_40_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.866025403784439*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_0;
    const double basisvalue1 = 2.73861278752583*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_0;
    const double basisvalue2 = 1.58113883008419*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_0;
    const double basisvalue3 = 1.11803398874989*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_1;
    const double basisvalue4 = 5.1234753829798*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_0;
    const double basisvalue5 = 3.96862696659689*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_0;
    const double basisvalue6 = 2.29128784747792*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_0;
    const double basisvalue7 = 3.24037034920393*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_1;
    const double basisvalue8 = 1.87082869338697*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_1;
    const double basisvalue9 = 1.3228756555323*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_2;
    const double basisvalue10 = 7.93725393319377*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_0;
    const double basisvalue11 = 6.70820393249937*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_0;
    const double basisvalue12 = 5.19615242270663*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_0;
    const double basisvalue13 = 3*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_0;
    const double basisvalue14 = 5.80947501931113*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_1;
    const double basisvalue15 = 4.5*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_1;
    const double basisvalue16 = 2.59807621135332*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_1;
    const double basisvalue17 = 3.67423461417477*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_2;
    const double basisvalue18 = 2.12132034355964*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_2;
    const double basisvalue19 = 1.5*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_3;
    const double basisvalue20 = 11.1242977306435*psitilde_a_4*scalings_y_4*psitilde_bs_4_0*scalings_z_4*psitilde_cs_40_0;
    const double basisvalue21 = 9.81070843517429*psitilde_a_3*scalings_y_3*psitilde_bs_3_1*scalings_z_4*psitilde_cs_31_0;
    const double basisvalue22 = 8.2915619758885*psitilde_a_2*scalings_y_2*psitilde_bs_2_2*scalings_z_4*psitilde_cs_22_0;
    const double basisvalue23 = 6.42261628933256*psitilde_a_1*scalings_y_1*psitilde_bs_1_3*scalings_z_4*psitilde_cs_13_0;
    const double basisvalue24 = 3.70809924354783*psitilde_a_0*scalings_y_0*psitilde_bs_0_4*scalings_z_4*psitilde_cs_04_0;
    const double basisvalue25 = 8.77496438739212*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_1;
    const double basisvalue26 = 7.41619848709566*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_1;
    const double basisvalue27 = 5.74456264653803*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_1;
    const double basisvalue28 = 3.3166247903554*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_1;
    const double basisvalue29 = 6.42261628933256*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_2;
    const double basisvalue30 = 4.9749371855331*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_2;
    const double basisvalue31 = 2.87228132326901*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_2;
    const double basisvalue32 = 4.06201920231798*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_3;
    const double basisvalue33 = 2.34520787991171*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_3;
    const double basisvalue34 = 1.6583123951777*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_4;
    
    // Table(s) of coefficients
    const static double coefficients0[35][35] = \
    {{-0.0137464349807051, -0.0144900147488139, -0.00836581391578937, -0.00591552374999941, 0, 0, 0, 0, 0, 0, -0.00671936840905293, -0.00567890279999946, -0.00439885919382571, -0.00253968253968254, -0.00491807409042211, -0.00380952380952381, -0.00219942959691287, -0.00311046316543895, -0.0017958267458706, -0.00126984126984128, 0.0136980289516341, 0.0120805260192622, 0.010209907964538, 0.00790856070259325, 0.00456600965054471, 0.0108051509532101, 0.00913201930108942, 0.00707363173407281, 0.00408396318581522, 0.00790856070259324, 0.00612594477872282, 0.0035368158670364, 0.00500181296677924, 0.00288779806280616, 0.00204198159290761},
    {-0.0137464349807054, 0.0144900147488139, -0.00836581391578934, -0.00591552374999945, 0, 0, 0, 0, 0, 0, 0.00671936840905293, -0.00567890279999946, 0.00439885919382572, -0.00253968253968254, -0.00491807409042213, 0.00380952380952382, -0.00219942959691286, 0.00311046316543897, -0.0017958267458706, -0.00126984126984127, 0.0136980289516341, -0.0120805260192622, 0.010209907964538, -0.00790856070259325, 0.00456600965054471, -0.0108051509532101, 0.00913201930108941, -0.0070736317340728, 0.00408396318581521, 0.00790856070259325, -0.00612594477872282, 0.0035368158670364, -0.00500181296677924, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807053, 0, 0.0167316278315787, -0.00591552374999946, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0101587301587302, 0, 0, -0.00659828879073857, 0, 0.00359165349174119, -0.00126984126984127, 0, 0, 0, 0, 0.0228300482527235, 0, 0, 0, -0.0163358527432608, 0, 0, 0.0106104476011092, 0, -0.0057755961256123, 0.00204198159290761},
    {-0.0137464349807054, 0, 0, 0.0177465712499983, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0126984126984127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0306297238936141},
    {0.0439885919382572, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0, 0.0406349206349206, 0, 0, 0.00439885919382572, 0, -0.0143666139669648, 0.00761904761904763, 0, 0, 0, 0, 0, 0, 0, 0, 0.0367556686723369, 0, 0, -0.0424417904044368, 0, 0.0303218796594646, -0.0122518895574456},
    {-0.0329914439536931, 0, -0.0200779533978945, -0.0141972569999986, 0, 0, -0.00969857289937744, 0, 0.0712696645099798, -0.050395263067897, 0, 0, 0, 0, 0, 0, 0.0461880215351701, 0, 0.0107749604752236, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0495154221385096, 0, -0.0606437593189292, 0.0306297238936141},
    {0.0439885919382573, 0, 0.0267706045305259, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0, 0.0359165349174119, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0505364660991076, -0.0408396318581522},
    {0.0439885919382573, 0.0231840235981023, -0.0133853022652629, 0.0189296759999982, 0.0433733365754904, -0.0335968420452647, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, -0.0227156111999979, 0.0175954367753029, -0.0101587301587302, 0.00327871606028141, -0.00253968253968255, 0.0014662863979419, -0.0124418526617558, 0.00718330698348238, 0.00761904761904763, 0, 0, 0, 0, 0, 0.0243115896447228, -0.0205470434274512, 0.0159156714016638, -0.00918891716808423, -0.031634242810373, 0.0245037791148913, -0.0141472634681456, 0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, -0.0173880176985766, 0.0100389766989472, -0.0141972569999986, -0.00722888942924838, 0.00559947367421081, -0.00323285763312582, 0.0617213399848368, -0.03563483225499, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, -0.0266666666666667, 0.01539600717839, 0.00933138949631686, -0.00538748023761177, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, -0.0285877423007065, 0.0165051407128365, -0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, 0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0.0311046316543895, -0.017958267458706, 0.0253968253968255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754903, -0.0335968420452647, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, 0, -0.0117302911835353, 0.0101587301587302, -0.0229510124219699, 0.00761904761904761, -0.00146628639794191, 0.0165891368823411, -0.0071833069834824, -0.00761904761904763, 0, 0.0241610520385245, -0.0357346778758831, 0.0355885231616696, -0.0228300482527235, -0.00270128773830253, -0.0114150241263618, 0.0159156714016638, -0.0112308987609918, 0.00395428035129663, 0.00306297238936141, -0.0035368158670364, -0.00375135972508443, 0.00072194951570154, 0.00204198159290761},
    {-0.0329914439536929, -0.0173880176985768, -0.0100389766989472, 0.0141972569999986, -0.00722888942924839, 0.0615942104163185, -0.0614242950293904, -0.00685792666498187, -0.00395942580611001, 0.00559947367421077, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042213, -0.0266666666666667, 0.0175954367753029, 0.00933138949631688, 0.00538748023761179, -0.00761904761904761, 0, 0, 0.0357346778758831, -0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108943, 0, 0.00408396318581521, 0.00131809345043221, 0.00714693557517662, -0.00471575448938186, -0.00250090648338962, -0.00144389903140307, 0.00204198159290761},
    {0.0439885919382572, 0.0231840235981022, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0.0293257279588382, 0.0101587301587302, 0, -0.0101587301587302, -0.0219942959691286, 0.00207364211029264, 0.017958267458706, -0.00761904761904762, 0, 0, 0, 0.0395428035129662, -0.0456600965054471, 0, 0, -0.017684079335182, 0.0142938711503532, 0, 0.00612594477872282, 0, -0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.043988591938257, -0.0231840235981023, -0.0133853022652629, 0.0189296759999983, 0.0433733365754903, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484216, -0.0268774736362117, -0.0227156111999979, -0.0175954367753029, -0.0101587301587302, 0.00327871606028139, 0.00253968253968253, 0.0014662863979419, 0.0124418526617558, 0.00718330698348236, 0.00761904761904761, 0, 0, 0, 0, 0, -0.0243115896447228, -0.0205470434274512, -0.0159156714016638, -0.00918891716808424, -0.031634242810373, -0.0245037791148913, -0.0141472634681456, -0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, 0.0173880176985768, 0.0100389766989471, -0.0141972569999987, -0.00722888942924838, -0.00559947367421082, -0.00323285763312581, -0.0617213399848367, -0.03563483225499, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, 0.0266666666666667, 0.01539600717839, -0.00933138949631689, -0.00538748023761178, -0.019047619047619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, 0.0285877423007065, 0.0165051407128365, 0.0525190361511819, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382572, -0.0231840235981023, -0.0133853022652629, 0.0189296759999981, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, -0.0311046316543896, -0.017958267458706, 0.0253968253968255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484216, -0.0268774736362117, 0, 0.0117302911835352, 0.0101587301587302, -0.0229510124219699, -0.00761904761904762, -0.00146628639794191, -0.0165891368823411, -0.00718330698348239, -0.00761904761904763, 0, -0.0241610520385245, -0.0357346778758831, -0.0355885231616696, -0.0228300482527235, 0.00270128773830254, -0.0114150241263618, -0.0159156714016638, -0.0112308987609918, 0.00395428035129662, -0.00306297238936141, -0.0035368158670364, 0.00375135972508443, 0.000721949515701533, 0.00204198159290761},
    {-0.0329914439536929, 0.0173880176985766, -0.0100389766989472, 0.0141972569999987, -0.00722888942924841, -0.0615942104163186, -0.0614242950293904, 0.00685792666498186, -0.00395942580610998, 0.00559947367421075, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042213, 0.0266666666666667, 0.0175954367753029, -0.00933138949631688, 0.00538748023761179, -0.00761904761904763, 0, 0, 0.0357346778758831, 0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108943, 0, 0.0040839631858152, 0.00131809345043222, -0.00714693557517663, -0.00471575448938187, 0.00250090648338962, -0.00144389903140308, 0.00204198159290761},
    {0.0439885919382573, -0.0231840235981022, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, -0.0293257279588382, 0.0101587301587302, 0, 0.0101587301587301, -0.0219942959691286, -0.00207364211029265, 0.017958267458706, -0.00761904761904761, 0, 0, 0, -0.0395428035129663, -0.0456600965054471, 0, 0, 0.017684079335182, 0.0142938711503532, 0, -0.00612594477872281, 0, 0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.0439885919382571, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484215, 0.0134387368181058, -0.0113578055999989, -0.0205280095711867, -0.0152380952380952, -0.00983614818084424, -0.0177777777777778, -0.0131965775814772, -0.0145154947720485, -0.0107749604752236, -0.00761904761904761, -0.0547921158065365, -0.0241610520385245, -0.00510495398226901, 0.00395428035129663, 0.00456600965054471, -0.0216103019064202, -0.00456600965054471, 0.00353681586703639, 0.00408396318581521, -0.00395428035129661, 0.0030629723893614, 0.0035368158670364, 0.00250090648338961, 0.00288779806280615, 0.00204198159290761},
    {-0.0329914439536931, 0, 0.0200779533978945, 0.0141972569999987, -0.0867466731509807, 0, 0.00969857289937743, 0, 0.00791885161221998, 0.00559947367421076, 0, 0.0340734167999968, 0, -0.0152380952380953, 0.0295084445425327, 0, -0.0131965775814772, 0, -0.0107749604752236, -0.00761904761904762, 0.0821881737098047, 0, -0.010209907964538, 0, 0.00456600965054471, 0, -0.00913201930108944, 0, 0.00408396318581521, -0.00790856070259326, 0, 0.0035368158670364, 0, 0.00288779806280615, 0.00204198159290761},
    {0.0439885919382573, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754903, -0.0335968420452646, 0.0193971457987549, -0.0274317066599274, 0.01583770322444, 0.0111989473484215, -0.0134387368181058, -0.0113578055999989, 0.0205280095711867, -0.0152380952380952, -0.00983614818084423, 0.0177777777777778, -0.0131965775814772, 0.0145154947720485, -0.0107749604752236, -0.00761904761904761, -0.0547921158065365, 0.0241610520385245, -0.005104953982269, -0.00395428035129662, 0.00456600965054471, 0.0216103019064202, -0.0045660096505447, -0.0035368158670364, 0.00408396318581521, -0.00395428035129662, -0.00306297238936141, 0.00353681586703641, -0.00250090648338962, 0.00288779806280615, 0.00204198159290761},
    {0.0439885919382573, 0.139104141588614, -0.080311813591578, -0.0567890279999947, 0.0578311154339872, 0.0335968420452646, -0.0420271492306356, 0.0274317066599275, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, -0.0586514559176763, 0.0406349206349207, 0.039344592723377, 0.00253968253968254, -0.0109971479845643, -0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, -0.053052238005546, 0.0367556686723369, -0.0105447476034577, -0.0245037791148913, 0.0235787724469093, 0.0175063453837273, 0, -0.0122518895574457},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0, 0.0783926314389509, 0.0096985728993774, -0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, 0.0586514559176763, -0.0609523809523809, 0, 0.033015873015873, 0.0241937255660415, -0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, 0.053052238005546, -0.0551335030085053, 0, -0.0326717054865217, 0.0141472634681456, 0.00875317269186366, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382571, 0, 0, 0.170367083999984, 0, -0.0111989473484216, 0.00969857289937744, 0.0822951199797824, 0.0475131096733199, -0.0167984210226324, 0, 0, 0, 0, 0, 0.0533333333333333, -0.0461880215351701, 0.0435464843161454, 0.0251415744421883, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.057175484601413, -0.0495154221385096, -0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382571, -0.139104141588614, -0.0803118135915779, -0.0567890279999947, 0.0578311154339871, -0.0335968420452646, -0.0420271492306356, -0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, 0.0586514559176763, 0.0406349206349206, 0.0393445927233769, -0.00253968253968253, -0.0109971479845643, 0.0601356211984865, 0.0179582674587059, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, 0.053052238005546, 0.0367556686723369, -0.0105447476034577, 0.0245037791148913, 0.0235787724469093, -0.0175063453837273, 0, -0.0122518895574457},
    {0.0439885919382571, 0, 0.160623627183156, -0.0567890279999946, 0, -0.0783926314389509, 0.00969857289937745, 0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, -0.0586514559176763, -0.0609523809523809, 0, -0.033015873015873, 0.0241937255660415, 0.0145154947720485, -0.0610581093596003, 0.0393650793650793, 0, 0, 0, 0, 0, 0, 0, -0.053052238005546, -0.0551335030085053, 0, 0.0326717054865217, 0.0141472634681456, -0.00875317269186368, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0, 0.0111989473484215, 0.00969857289937745, -0.0822951199797824, 0.0475131096733199, -0.0167984210226323, 0, 0, 0, 0, 0, -0.0533333333333333, -0.0461880215351701, -0.0435464843161453, 0.0251415744421883, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0571754846014129, -0.0495154221385096, 0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754903, 0.0447957893936862, 0.0484928644968872, -0.0548634133198549, 0, -0.0167984210226323, 0.0806324209086351, 0.0227156111999979, -0.0058651455917676, -0.0101587301587302, -0.00327871606028142, 0.0304761904761905, 0.0271262983619253, 0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, 0.0729347689341683, 0.0205470434274512, -0.00530522380055458, -0.00918891716808423, 0.031634242810373, -0.00816792637163039, -0.0141472634681456, -0.00875317269186365, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382571, 0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754904, -0.0447957893936862, 0.0484928644968873, 0.0548634133198549, 0, -0.0167984210226323, -0.0806324209086351, 0.0227156111999979, 0.0058651455917676, -0.0101587301587302, -0.00327871606028142, -0.0304761904761905, 0.0271262983619253, -0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, -0.0729347689341683, 0.0205470434274512, 0.00530522380055459, -0.00918891716808424, 0.031634242810373, 0.00816792637163042, -0.0141472634681456, 0.00875317269186367, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0.0144577788584968, 0, -0.00323285763312585, 0, -0.0950262193466398, -0.0167984210226323, 0, 0, 0, 0, -0.0688530372659096, 0, 0.01539600717839, 0, -0.0502831488843767, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0738132332242036, 0, 0.0165051407128365, 0, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754903, -0.0447957893936862, -0.00969857289937743, 0.0548634133198549, 0.03167540644888, 0.0391963157194754, 0.0806324209086351, 0, 0.0527863103259086, 0.0609523809523809, 0.0229510124219699, 0.0101587301587302, 0.0168622935763319, -0.0124418526617558, -0.00718330698348239, -0.013968253968254, 0, 0.0724831561155734, 0.0357346778758831, -0.0118628410538899, -0.0228300482527235, -0.00810386321490759, 0.0114150241263618, -0.00530522380055459, -0.0112308987609918, -0.00395428035129662, -0.00102099079645379, -0.0035368158670364, 0.00125045324169481, 0.000721949515701537, 0.00204198159290762},
    {0.0439885919382571, 0.139104141588614, -0.080311813591578, -0.0567890279999947, -0.0433733365754904, 0.0447957893936862, -0.00969857289937742, -0.0548634133198549, 0.0316754064488799, 0.0391963157194754, -0.0806324209086351, 0, -0.0527863103259086, 0.060952380952381, 0.0229510124219699, -0.0101587301587302, 0.0168622935763319, 0.0124418526617558, -0.00718330698348236, -0.013968253968254, 0, -0.0724831561155734, 0.0357346778758831, 0.0118628410538899, -0.0228300482527236, 0.00810386321490761, 0.0114150241263618, 0.00530522380055459, -0.0112308987609918, -0.00395428035129662, 0.00102099079645379, -0.0035368158670364, -0.0012504532416948, 0.000721949515701528, 0.0020419815929076},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0.0144577788584968, 0, -0.0614242950293905, 0, -0.0633508128977598, 0.0391963157194754, 0, -0.0681468335999936, 0, -0.0914285714285715, 0.00983614818084423, 0, 0.0285925847598672, 0, 0.0143666139669647, -0.0139682539682539, 0, 0, -0.0714693557517662, 0, 0.0456600965054471, 0, 0.0182640386021788, 0, 0.0040839631858152, -0.00263618690086443, 0, -0.00471575448938186, 0, -0.00144389903140306, 0.00204198159290759},
    {0.351908735506058, 0, 0, 0, -0.115662230867974, 0, -0.129314305325032, 0, 0, -0.134387368181059, 0, -0.0908624447999914, 0, 0.0406349206349206, -0.0786891854467539, 0, -0.0879771838765144, 0, 0, 0.0711111111111111, 0, 0, 0, 0, 0, 0, -0.0821881737098047, 0, 0.0367556686723369, 0.0210894952069153, 0, 0.0235787724469093, 0, 0, -0.0122518895574456}};
    
    // Extract relevant coefficients
    const double coeff0_0 = coefficients0[dof][0];
    const double coeff0_1 = coefficients0[dof][1];
    const double coeff0_2 = coefficients0[dof][2];
    const double coeff0_3 = coefficients0[dof][3];
    const double coeff0_4 = coefficients0[dof][4];
    const double coeff0_5 = coefficients0[dof][5];
    const double coeff0_6 = coefficients0[dof][6];
    const double coeff0_7 = coefficients0[dof][7];
    const double coeff0_8 = coefficients0[dof][8];
    const double coeff0_9 = coefficients0[dof][9];
    const double coeff0_10 = coefficients0[dof][10];
    const double coeff0_11 = coefficients0[dof][11];
    const double coeff0_12 = coefficients0[dof][12];
    const double coeff0_13 = coefficients0[dof][13];
    const double coeff0_14 = coefficients0[dof][14];
    const double coeff0_15 = coefficients0[dof][15];
    const double coeff0_16 = coefficients0[dof][16];
    const double coeff0_17 = coefficients0[dof][17];
    const double coeff0_18 = coefficients0[dof][18];
    const double coeff0_19 = coefficients0[dof][19];
    const double coeff0_20 = coefficients0[dof][20];
    const double coeff0_21 = coefficients0[dof][21];
    const double coeff0_22 = coefficients0[dof][22];
    const double coeff0_23 = coefficients0[dof][23];
    const double coeff0_24 = coefficients0[dof][24];
    const double coeff0_25 = coefficients0[dof][25];
    const double coeff0_26 = coefficients0[dof][26];
    const double coeff0_27 = coefficients0[dof][27];
    const double coeff0_28 = coefficients0[dof][28];
    const double coeff0_29 = coefficients0[dof][29];
    const double coeff0_30 = coefficients0[dof][30];
    const double coeff0_31 = coefficients0[dof][31];
    const double coeff0_32 = coefficients0[dof][32];
    const double coeff0_33 = coefficients0[dof][33];
    const double coeff0_34 = coefficients0[dof][34];
    
    // Compute value(s)
    *values = coeff0_0*basisvalue0 + coeff0_1*basisvalue1 + coeff0_2*basisvalue2 + coeff0_3*basisvalue3 + coeff0_4*basisvalue4 + coeff0_5*basisvalue5 + coeff0_6*basisvalue6 + coeff0_7*basisvalue7 + coeff0_8*basisvalue8 + coeff0_9*basisvalue9 + coeff0_10*basisvalue10 + coeff0_11*basisvalue11 + coeff0_12*basisvalue12 + coeff0_13*basisvalue13 + coeff0_14*basisvalue14 + coeff0_15*basisvalue15 + coeff0_16*basisvalue16 + coeff0_17*basisvalue17 + coeff0_18*basisvalue18 + coeff0_19*basisvalue19 + coeff0_20*basisvalue20 + coeff0_21*basisvalue21 + coeff0_22*basisvalue22 + coeff0_23*basisvalue23 + coeff0_24*basisvalue24 + coeff0_25*basisvalue25 + coeff0_26*basisvalue26 + coeff0_27*basisvalue27 + coeff0_28*basisvalue28 + coeff0_29*basisvalue29 + coeff0_30*basisvalue30 + coeff0_31*basisvalue31 + coeff0_32*basisvalue32 + coeff0_33*basisvalue33 + coeff0_34*basisvalue34;
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis() is not yet implemented.");
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_02 = element_coordinates[3][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
    const double J_12 = element_coordinates[3][1] - element_coordinates[0][1];
    const double J_20 = element_coordinates[1][2] - element_coordinates[0][2];
    const double J_21 = element_coordinates[2][2] - element_coordinates[0][2];
    const double J_22 = element_coordinates[3][2] - element_coordinates[0][2];
      
    // Compute sub determinants
    const double d00 = J_11*J_22 - J_12*J_21;
    const double d01 = J_12*J_20 - J_10*J_22;
    const double d02 = J_10*J_21 - J_11*J_20;
    
    const double d10 = J_02*J_21 - J_01*J_22;
    const double d11 = J_00*J_22 - J_02*J_20;
    const double d12 = J_01*J_20 - J_00*J_21;
    
    const double d20 = J_01*J_12 - J_02*J_11;
    const double d21 = J_02*J_10 - J_00*J_12;
    const double d22 = J_00*J_11 - J_01*J_10;
      
    // Compute determinant of Jacobian
    double detJ = J_00*d00 + J_10*d10 + J_20*d20;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = d00*(element_coordinates[0][0] - element_coordinates[2][0] - element_coordinates[3][0]) \
                    + d10*(element_coordinates[0][1] - element_coordinates[2][1] - element_coordinates[3][1]) \
                    + d20*(element_coordinates[0][2] - element_coordinates[2][2] - element_coordinates[3][2]);
    
    const double C1 = d01*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[3][0]) \
                    + d11*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[3][1]) \
                    + d21*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[3][2]);
    
    const double C2 = d02*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[2][0]) \
                    + d12*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[2][1]) \
                    + d22*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[2][2]);
    
    // Get coordinates and map to the UFC reference element
    double x = (C0 + d00*coordinates[0] + d10*coordinates[1] + d20*coordinates[2]) / detJ;
    double y = (C1 + d01*coordinates[0] + d11*coordinates[1] + d21*coordinates[2]) / detJ;
    double z = (C2 + d02*coordinates[0] + d12*coordinates[1] + d22*coordinates[2]) / detJ;
    
    // Map coordinates to the reference cube
    if (std::abs(y + z - 1.0) < 1e-14)
      x = 1.0;
    else
      x = -2.0 * x/(y + z - 1.0) - 1.0;
    if (std::abs(z - 1.0) < 1e-14)
      y = -1.0;
    else
      y = 2.0 * y/(1.0 - z) - 1.0;
    z = 2.0 * z - 1.0;
    
    // Compute number of derivatives
    unsigned int num_derivatives = 1;
    
    for (unsigned int j = 0; j < n; j++)
      num_derivatives *= 3;
    
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      combinations[j] = new unsigned int [n];
      for (unsigned int k = 0; k < n; k++)
        combinations[j][k] = 0;
    }
        
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] ={{d00 / detJ, d10 / detJ, d20 / detJ}, {d01 / detJ, d11 / detJ, d21 / detJ}, {d02 / detJ, d12 / detJ, d22 / detJ}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values
    for (unsigned int j = 0; j < 1*num_derivatives; j++)
      values[j] = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    const double scalings_y_4 = scalings_y_3*(0.5 - 0.5*y);
    const double scalings_z_0 = 1;
    const double scalings_z_1 = scalings_z_0*(0.5 - 0.5*z);
    const double scalings_z_2 = scalings_z_1*(0.5 - 0.5*z);
    const double scalings_z_3 = scalings_z_2*(0.5 - 0.5*z);
    const double scalings_z_4 = scalings_z_3*(0.5 - 0.5*z);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    const double psitilde_a_4 = 1.75*x*psitilde_a_3 - 0.75*psitilde_a_2;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_0_4 = 0.0285714285714286*psitilde_bs_0_3 + 1.8*y*psitilde_bs_0_3 - 0.771428571428571*psitilde_bs_0_2;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_1_3 = 0.285714285714286*psitilde_bs_1_2 + 2*y*psitilde_bs_1_2 - 0.714285714285714*psitilde_bs_1_1;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_2_2 = 1.02040816326531*psitilde_bs_2_1 + 2.57142857142857*y*psitilde_bs_2_1 - 0.551020408163265*psitilde_bs_2_0;
    const double psitilde_bs_3_0 = 1;
    const double psitilde_bs_3_1 = 4.5*y + 3.5;
    const double psitilde_bs_4_0 = 1;
    
    // Compute psitilde_cs
    const double psitilde_cs_00_0 = 1;
    const double psitilde_cs_00_1 = 2*z + 1;
    const double psitilde_cs_00_2 = 0.3125*psitilde_cs_00_1 + 1.875*z*psitilde_cs_00_1 - 0.5625*psitilde_cs_00_0;
    const double psitilde_cs_00_3 = 0.155555555555556*psitilde_cs_00_2 + 1.86666666666667*z*psitilde_cs_00_2 - 0.711111111111111*psitilde_cs_00_1;
    const double psitilde_cs_00_4 = 0.09375*psitilde_cs_00_3 + 1.875*z*psitilde_cs_00_3 - 0.78125*psitilde_cs_00_2;
    const double psitilde_cs_01_0 = 1;
    const double psitilde_cs_01_1 = 3*z + 2;
    const double psitilde_cs_01_2 = 0.777777777777778*psitilde_cs_01_1 + 2.33333333333333*z*psitilde_cs_01_1 - 0.555555555555556*psitilde_cs_01_0;
    const double psitilde_cs_01_3 = 0.428571428571429*psitilde_cs_01_2 + 2.14285714285714*z*psitilde_cs_01_2 - 0.714285714285714*psitilde_cs_01_1;
    const double psitilde_cs_02_0 = 1;
    const double psitilde_cs_02_1 = 4*z + 3;
    const double psitilde_cs_02_2 = 1.265625*psitilde_cs_02_1 + 2.8125*z*psitilde_cs_02_1 - 0.546875*psitilde_cs_02_0;
    const double psitilde_cs_03_0 = 1;
    const double psitilde_cs_03_1 = 5*z + 4;
    const double psitilde_cs_04_0 = 1;
    const double psitilde_cs_10_0 = 1;
    const double psitilde_cs_10_1 = 3*z + 2;
    const double psitilde_cs_10_2 = 0.777777777777778*psitilde_cs_10_1 + 2.33333333333333*z*psitilde_cs_10_1 - 0.555555555555556*psitilde_cs_10_0;
    const double psitilde_cs_10_3 = 0.428571428571429*psitilde_cs_10_2 + 2.14285714285714*z*psitilde_cs_10_2 - 0.714285714285714*psitilde_cs_10_1;
    const double psitilde_cs_11_0 = 1;
    const double psitilde_cs_11_1 = 4*z + 3;
    const double psitilde_cs_11_2 = 1.265625*psitilde_cs_11_1 + 2.8125*z*psitilde_cs_11_1 - 0.546875*psitilde_cs_11_0;
    const double psitilde_cs_12_0 = 1;
    const double psitilde_cs_12_1 = 5*z + 4;
    const double psitilde_cs_13_0 = 1;
    const double psitilde_cs_20_0 = 1;
    const double psitilde_cs_20_1 = 4*z + 3;
    const double psitilde_cs_20_2 = 1.265625*psitilde_cs_20_1 + 2.8125*z*psitilde_cs_20_1 - 0.546875*psitilde_cs_20_0;
    const double psitilde_cs_21_0 = 1;
    const double psitilde_cs_21_1 = 5*z + 4;
    const double psitilde_cs_22_0 = 1;
    const double psitilde_cs_30_0 = 1;
    const double psitilde_cs_30_1 = 5*z + 4;
    const double psitilde_cs_31_0 = 1;
    const double psitilde_cs_40_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.866025403784439*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_0;
    const double basisvalue1 = 2.73861278752583*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_0;
    const double basisvalue2 = 1.58113883008419*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_0;
    const double basisvalue3 = 1.11803398874989*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_1;
    const double basisvalue4 = 5.1234753829798*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_0;
    const double basisvalue5 = 3.96862696659689*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_0;
    const double basisvalue6 = 2.29128784747792*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_0;
    const double basisvalue7 = 3.24037034920393*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_1;
    const double basisvalue8 = 1.87082869338697*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_1;
    const double basisvalue9 = 1.3228756555323*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_2;
    const double basisvalue10 = 7.93725393319377*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_0;
    const double basisvalue11 = 6.70820393249937*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_0;
    const double basisvalue12 = 5.19615242270663*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_0;
    const double basisvalue13 = 3*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_0;
    const double basisvalue14 = 5.80947501931113*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_1;
    const double basisvalue15 = 4.5*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_1;
    const double basisvalue16 = 2.59807621135332*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_1;
    const double basisvalue17 = 3.67423461417477*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_2;
    const double basisvalue18 = 2.12132034355964*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_2;
    const double basisvalue19 = 1.5*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_3;
    const double basisvalue20 = 11.1242977306435*psitilde_a_4*scalings_y_4*psitilde_bs_4_0*scalings_z_4*psitilde_cs_40_0;
    const double basisvalue21 = 9.81070843517429*psitilde_a_3*scalings_y_3*psitilde_bs_3_1*scalings_z_4*psitilde_cs_31_0;
    const double basisvalue22 = 8.2915619758885*psitilde_a_2*scalings_y_2*psitilde_bs_2_2*scalings_z_4*psitilde_cs_22_0;
    const double basisvalue23 = 6.42261628933256*psitilde_a_1*scalings_y_1*psitilde_bs_1_3*scalings_z_4*psitilde_cs_13_0;
    const double basisvalue24 = 3.70809924354783*psitilde_a_0*scalings_y_0*psitilde_bs_0_4*scalings_z_4*psitilde_cs_04_0;
    const double basisvalue25 = 8.77496438739212*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_1;
    const double basisvalue26 = 7.41619848709566*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_1;
    const double basisvalue27 = 5.74456264653803*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_1;
    const double basisvalue28 = 3.3166247903554*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_1;
    const double basisvalue29 = 6.42261628933256*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_2;
    const double basisvalue30 = 4.9749371855331*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_2;
    const double basisvalue31 = 2.87228132326901*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_2;
    const double basisvalue32 = 4.06201920231798*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_3;
    const double basisvalue33 = 2.34520787991171*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_3;
    const double basisvalue34 = 1.6583123951777*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_4;
    
    // Table(s) of coefficients
    const static double coefficients0[35][35] = \
    {{-0.0137464349807051, -0.0144900147488139, -0.00836581391578937, -0.00591552374999941, 0, 0, 0, 0, 0, 0, -0.00671936840905293, -0.00567890279999946, -0.00439885919382571, -0.00253968253968254, -0.00491807409042211, -0.00380952380952381, -0.00219942959691287, -0.00311046316543895, -0.0017958267458706, -0.00126984126984128, 0.0136980289516341, 0.0120805260192622, 0.010209907964538, 0.00790856070259325, 0.00456600965054471, 0.0108051509532101, 0.00913201930108942, 0.00707363173407281, 0.00408396318581522, 0.00790856070259324, 0.00612594477872282, 0.0035368158670364, 0.00500181296677924, 0.00288779806280616, 0.00204198159290761},
    {-0.0137464349807054, 0.0144900147488139, -0.00836581391578934, -0.00591552374999945, 0, 0, 0, 0, 0, 0, 0.00671936840905293, -0.00567890279999946, 0.00439885919382572, -0.00253968253968254, -0.00491807409042213, 0.00380952380952382, -0.00219942959691286, 0.00311046316543897, -0.0017958267458706, -0.00126984126984127, 0.0136980289516341, -0.0120805260192622, 0.010209907964538, -0.00790856070259325, 0.00456600965054471, -0.0108051509532101, 0.00913201930108941, -0.0070736317340728, 0.00408396318581521, 0.00790856070259325, -0.00612594477872282, 0.0035368158670364, -0.00500181296677924, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807053, 0, 0.0167316278315787, -0.00591552374999946, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0101587301587302, 0, 0, -0.00659828879073857, 0, 0.00359165349174119, -0.00126984126984127, 0, 0, 0, 0, 0.0228300482527235, 0, 0, 0, -0.0163358527432608, 0, 0, 0.0106104476011092, 0, -0.0057755961256123, 0.00204198159290761},
    {-0.0137464349807054, 0, 0, 0.0177465712499983, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0126984126984127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0306297238936141},
    {0.0439885919382572, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0, 0.0406349206349206, 0, 0, 0.00439885919382572, 0, -0.0143666139669648, 0.00761904761904763, 0, 0, 0, 0, 0, 0, 0, 0, 0.0367556686723369, 0, 0, -0.0424417904044368, 0, 0.0303218796594646, -0.0122518895574456},
    {-0.0329914439536931, 0, -0.0200779533978945, -0.0141972569999986, 0, 0, -0.00969857289937744, 0, 0.0712696645099798, -0.050395263067897, 0, 0, 0, 0, 0, 0, 0.0461880215351701, 0, 0.0107749604752236, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0495154221385096, 0, -0.0606437593189292, 0.0306297238936141},
    {0.0439885919382573, 0, 0.0267706045305259, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0, 0.0359165349174119, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0505364660991076, -0.0408396318581522},
    {0.0439885919382573, 0.0231840235981023, -0.0133853022652629, 0.0189296759999982, 0.0433733365754904, -0.0335968420452647, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, -0.0227156111999979, 0.0175954367753029, -0.0101587301587302, 0.00327871606028141, -0.00253968253968255, 0.0014662863979419, -0.0124418526617558, 0.00718330698348238, 0.00761904761904763, 0, 0, 0, 0, 0, 0.0243115896447228, -0.0205470434274512, 0.0159156714016638, -0.00918891716808423, -0.031634242810373, 0.0245037791148913, -0.0141472634681456, 0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, -0.0173880176985766, 0.0100389766989472, -0.0141972569999986, -0.00722888942924838, 0.00559947367421081, -0.00323285763312582, 0.0617213399848368, -0.03563483225499, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, -0.0266666666666667, 0.01539600717839, 0.00933138949631686, -0.00538748023761177, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, -0.0285877423007065, 0.0165051407128365, -0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, 0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0.0311046316543895, -0.017958267458706, 0.0253968253968255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754903, -0.0335968420452647, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, 0, -0.0117302911835353, 0.0101587301587302, -0.0229510124219699, 0.00761904761904761, -0.00146628639794191, 0.0165891368823411, -0.0071833069834824, -0.00761904761904763, 0, 0.0241610520385245, -0.0357346778758831, 0.0355885231616696, -0.0228300482527235, -0.00270128773830253, -0.0114150241263618, 0.0159156714016638, -0.0112308987609918, 0.00395428035129663, 0.00306297238936141, -0.0035368158670364, -0.00375135972508443, 0.00072194951570154, 0.00204198159290761},
    {-0.0329914439536929, -0.0173880176985768, -0.0100389766989472, 0.0141972569999986, -0.00722888942924839, 0.0615942104163185, -0.0614242950293904, -0.00685792666498187, -0.00395942580611001, 0.00559947367421077, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042213, -0.0266666666666667, 0.0175954367753029, 0.00933138949631688, 0.00538748023761179, -0.00761904761904761, 0, 0, 0.0357346778758831, -0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108943, 0, 0.00408396318581521, 0.00131809345043221, 0.00714693557517662, -0.00471575448938186, -0.00250090648338962, -0.00144389903140307, 0.00204198159290761},
    {0.0439885919382572, 0.0231840235981022, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0.0293257279588382, 0.0101587301587302, 0, -0.0101587301587302, -0.0219942959691286, 0.00207364211029264, 0.017958267458706, -0.00761904761904762, 0, 0, 0, 0.0395428035129662, -0.0456600965054471, 0, 0, -0.017684079335182, 0.0142938711503532, 0, 0.00612594477872282, 0, -0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.043988591938257, -0.0231840235981023, -0.0133853022652629, 0.0189296759999983, 0.0433733365754903, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484216, -0.0268774736362117, -0.0227156111999979, -0.0175954367753029, -0.0101587301587302, 0.00327871606028139, 0.00253968253968253, 0.0014662863979419, 0.0124418526617558, 0.00718330698348236, 0.00761904761904761, 0, 0, 0, 0, 0, -0.0243115896447228, -0.0205470434274512, -0.0159156714016638, -0.00918891716808424, -0.031634242810373, -0.0245037791148913, -0.0141472634681456, -0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, 0.0173880176985768, 0.0100389766989471, -0.0141972569999987, -0.00722888942924838, -0.00559947367421082, -0.00323285763312581, -0.0617213399848367, -0.03563483225499, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, 0.0266666666666667, 0.01539600717839, -0.00933138949631689, -0.00538748023761178, -0.019047619047619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, 0.0285877423007065, 0.0165051407128365, 0.0525190361511819, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382572, -0.0231840235981023, -0.0133853022652629, 0.0189296759999981, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, -0.0311046316543896, -0.017958267458706, 0.0253968253968255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484216, -0.0268774736362117, 0, 0.0117302911835352, 0.0101587301587302, -0.0229510124219699, -0.00761904761904762, -0.00146628639794191, -0.0165891368823411, -0.00718330698348239, -0.00761904761904763, 0, -0.0241610520385245, -0.0357346778758831, -0.0355885231616696, -0.0228300482527235, 0.00270128773830254, -0.0114150241263618, -0.0159156714016638, -0.0112308987609918, 0.00395428035129662, -0.00306297238936141, -0.0035368158670364, 0.00375135972508443, 0.000721949515701533, 0.00204198159290761},
    {-0.0329914439536929, 0.0173880176985766, -0.0100389766989472, 0.0141972569999987, -0.00722888942924841, -0.0615942104163186, -0.0614242950293904, 0.00685792666498186, -0.00395942580610998, 0.00559947367421075, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042213, 0.0266666666666667, 0.0175954367753029, -0.00933138949631688, 0.00538748023761179, -0.00761904761904763, 0, 0, 0.0357346778758831, 0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108943, 0, 0.0040839631858152, 0.00131809345043222, -0.00714693557517663, -0.00471575448938187, 0.00250090648338962, -0.00144389903140308, 0.00204198159290761},
    {0.0439885919382573, -0.0231840235981022, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, -0.0293257279588382, 0.0101587301587302, 0, 0.0101587301587301, -0.0219942959691286, -0.00207364211029265, 0.017958267458706, -0.00761904761904761, 0, 0, 0, -0.0395428035129663, -0.0456600965054471, 0, 0, 0.017684079335182, 0.0142938711503532, 0, -0.00612594477872281, 0, 0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.0439885919382571, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484215, 0.0134387368181058, -0.0113578055999989, -0.0205280095711867, -0.0152380952380952, -0.00983614818084424, -0.0177777777777778, -0.0131965775814772, -0.0145154947720485, -0.0107749604752236, -0.00761904761904761, -0.0547921158065365, -0.0241610520385245, -0.00510495398226901, 0.00395428035129663, 0.00456600965054471, -0.0216103019064202, -0.00456600965054471, 0.00353681586703639, 0.00408396318581521, -0.00395428035129661, 0.0030629723893614, 0.0035368158670364, 0.00250090648338961, 0.00288779806280615, 0.00204198159290761},
    {-0.0329914439536931, 0, 0.0200779533978945, 0.0141972569999987, -0.0867466731509807, 0, 0.00969857289937743, 0, 0.00791885161221998, 0.00559947367421076, 0, 0.0340734167999968, 0, -0.0152380952380953, 0.0295084445425327, 0, -0.0131965775814772, 0, -0.0107749604752236, -0.00761904761904762, 0.0821881737098047, 0, -0.010209907964538, 0, 0.00456600965054471, 0, -0.00913201930108944, 0, 0.00408396318581521, -0.00790856070259326, 0, 0.0035368158670364, 0, 0.00288779806280615, 0.00204198159290761},
    {0.0439885919382573, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754903, -0.0335968420452646, 0.0193971457987549, -0.0274317066599274, 0.01583770322444, 0.0111989473484215, -0.0134387368181058, -0.0113578055999989, 0.0205280095711867, -0.0152380952380952, -0.00983614818084423, 0.0177777777777778, -0.0131965775814772, 0.0145154947720485, -0.0107749604752236, -0.00761904761904761, -0.0547921158065365, 0.0241610520385245, -0.005104953982269, -0.00395428035129662, 0.00456600965054471, 0.0216103019064202, -0.0045660096505447, -0.0035368158670364, 0.00408396318581521, -0.00395428035129662, -0.00306297238936141, 0.00353681586703641, -0.00250090648338962, 0.00288779806280615, 0.00204198159290761},
    {0.0439885919382573, 0.139104141588614, -0.080311813591578, -0.0567890279999947, 0.0578311154339872, 0.0335968420452646, -0.0420271492306356, 0.0274317066599275, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, -0.0586514559176763, 0.0406349206349207, 0.039344592723377, 0.00253968253968254, -0.0109971479845643, -0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, -0.053052238005546, 0.0367556686723369, -0.0105447476034577, -0.0245037791148913, 0.0235787724469093, 0.0175063453837273, 0, -0.0122518895574457},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0, 0.0783926314389509, 0.0096985728993774, -0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, 0.0586514559176763, -0.0609523809523809, 0, 0.033015873015873, 0.0241937255660415, -0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, 0.053052238005546, -0.0551335030085053, 0, -0.0326717054865217, 0.0141472634681456, 0.00875317269186366, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382571, 0, 0, 0.170367083999984, 0, -0.0111989473484216, 0.00969857289937744, 0.0822951199797824, 0.0475131096733199, -0.0167984210226324, 0, 0, 0, 0, 0, 0.0533333333333333, -0.0461880215351701, 0.0435464843161454, 0.0251415744421883, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.057175484601413, -0.0495154221385096, -0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382571, -0.139104141588614, -0.0803118135915779, -0.0567890279999947, 0.0578311154339871, -0.0335968420452646, -0.0420271492306356, -0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, 0.0586514559176763, 0.0406349206349206, 0.0393445927233769, -0.00253968253968253, -0.0109971479845643, 0.0601356211984865, 0.0179582674587059, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, 0.053052238005546, 0.0367556686723369, -0.0105447476034577, 0.0245037791148913, 0.0235787724469093, -0.0175063453837273, 0, -0.0122518895574457},
    {0.0439885919382571, 0, 0.160623627183156, -0.0567890279999946, 0, -0.0783926314389509, 0.00969857289937745, 0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, -0.0586514559176763, -0.0609523809523809, 0, -0.033015873015873, 0.0241937255660415, 0.0145154947720485, -0.0610581093596003, 0.0393650793650793, 0, 0, 0, 0, 0, 0, 0, -0.053052238005546, -0.0551335030085053, 0, 0.0326717054865217, 0.0141472634681456, -0.00875317269186368, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0, 0.0111989473484215, 0.00969857289937745, -0.0822951199797824, 0.0475131096733199, -0.0167984210226323, 0, 0, 0, 0, 0, -0.0533333333333333, -0.0461880215351701, -0.0435464843161453, 0.0251415744421883, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0571754846014129, -0.0495154221385096, 0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754903, 0.0447957893936862, 0.0484928644968872, -0.0548634133198549, 0, -0.0167984210226323, 0.0806324209086351, 0.0227156111999979, -0.0058651455917676, -0.0101587301587302, -0.00327871606028142, 0.0304761904761905, 0.0271262983619253, 0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, 0.0729347689341683, 0.0205470434274512, -0.00530522380055458, -0.00918891716808423, 0.031634242810373, -0.00816792637163039, -0.0141472634681456, -0.00875317269186365, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382571, 0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754904, -0.0447957893936862, 0.0484928644968873, 0.0548634133198549, 0, -0.0167984210226323, -0.0806324209086351, 0.0227156111999979, 0.0058651455917676, -0.0101587301587302, -0.00327871606028142, -0.0304761904761905, 0.0271262983619253, -0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, -0.0729347689341683, 0.0205470434274512, 0.00530522380055459, -0.00918891716808424, 0.031634242810373, 0.00816792637163042, -0.0141472634681456, 0.00875317269186367, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0.0144577788584968, 0, -0.00323285763312585, 0, -0.0950262193466398, -0.0167984210226323, 0, 0, 0, 0, -0.0688530372659096, 0, 0.01539600717839, 0, -0.0502831488843767, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0738132332242036, 0, 0.0165051407128365, 0, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754903, -0.0447957893936862, -0.00969857289937743, 0.0548634133198549, 0.03167540644888, 0.0391963157194754, 0.0806324209086351, 0, 0.0527863103259086, 0.0609523809523809, 0.0229510124219699, 0.0101587301587302, 0.0168622935763319, -0.0124418526617558, -0.00718330698348239, -0.013968253968254, 0, 0.0724831561155734, 0.0357346778758831, -0.0118628410538899, -0.0228300482527235, -0.00810386321490759, 0.0114150241263618, -0.00530522380055459, -0.0112308987609918, -0.00395428035129662, -0.00102099079645379, -0.0035368158670364, 0.00125045324169481, 0.000721949515701537, 0.00204198159290762},
    {0.0439885919382571, 0.139104141588614, -0.080311813591578, -0.0567890279999947, -0.0433733365754904, 0.0447957893936862, -0.00969857289937742, -0.0548634133198549, 0.0316754064488799, 0.0391963157194754, -0.0806324209086351, 0, -0.0527863103259086, 0.060952380952381, 0.0229510124219699, -0.0101587301587302, 0.0168622935763319, 0.0124418526617558, -0.00718330698348236, -0.013968253968254, 0, -0.0724831561155734, 0.0357346778758831, 0.0118628410538899, -0.0228300482527236, 0.00810386321490761, 0.0114150241263618, 0.00530522380055459, -0.0112308987609918, -0.00395428035129662, 0.00102099079645379, -0.0035368158670364, -0.0012504532416948, 0.000721949515701528, 0.0020419815929076},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0.0144577788584968, 0, -0.0614242950293905, 0, -0.0633508128977598, 0.0391963157194754, 0, -0.0681468335999936, 0, -0.0914285714285715, 0.00983614818084423, 0, 0.0285925847598672, 0, 0.0143666139669647, -0.0139682539682539, 0, 0, -0.0714693557517662, 0, 0.0456600965054471, 0, 0.0182640386021788, 0, 0.0040839631858152, -0.00263618690086443, 0, -0.00471575448938186, 0, -0.00144389903140306, 0.00204198159290759},
    {0.351908735506058, 0, 0, 0, -0.115662230867974, 0, -0.129314305325032, 0, 0, -0.134387368181059, 0, -0.0908624447999914, 0, 0.0406349206349206, -0.0786891854467539, 0, -0.0879771838765144, 0, 0, 0.0711111111111111, 0, 0, 0, 0, 0, 0, -0.0821881737098047, 0, 0.0367556686723369, 0.0210894952069153, 0, 0.0235787724469093, 0, 0, -0.0122518895574456}};
    
    // Interesting (new) part
    // Tables of derivatives of the polynomial base (transpose)
    const static double dmats0[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {6.32455532033677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 11.2249721603218, 0, 0, 0, 1.70793006049707e-14, 0, 0, 1.16063842564573e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.58257569495585, 0, 8.36660026534076, -1.18321595661992, 0, 0, 1.04642314135461e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.74165738677394, 0, 0, 8.69482604771366, 0, 0, 0, -1.66625972279159e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.49909083394701, 0, -3.34664010613631, -2.36643191323985, 15.4919333848297, 0, 0.692820323027549, 0, 0.56568542494924, 0.400000000000009, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 4.89897948556635, 0, 0, 0, 14.1985914794391, 0, -0.828078671210828, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.60000000000001, 0, 8.76356092008266, -1.54919333848296, 0, 0, 9.52470471983254, 0, -1.48131215963609, 0.261861468283193, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 4.24264068711929, 0, 0, 0, 0, 0, 14.3427433120127, 2.84156378982381e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.11769145362398, 0, 3.16227766016838, 4.91934955049954, 0, 0, 0, -1.2538531175753e-14, 10.690449676497, -2.41897262725905, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.54558441227157, 0, 0, 7.66811580507232, 0, 0, 0, 0, 0, 10.3691851174526, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 11.6057691494799, 0, 0, 0, -4.20458932936041, 0, -3.43303281162798, 0, 0, 19.6214168703486, 0, 0.611677741841197, 0, 0, 0.529728463363978, 0, 0.432521479156785, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.53137212479103, 0, 3.54562104171167, -2.50713268211203, 4.78713553878169, 0, -5.56626745075493, 0, -1.04880884817015, 0.741619848709563, 0, 18.8034951158403, 0, 1.68183573174416, -0.603122387046455, 0, 0.701283781217662, 0, 0.132137494528683, -0.0934353184302337, 0, 0, 0, 0, -2.04851899834062e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.12802291379194e-14, 2.59512887494071, 0, 0, 0, 10.0285307284481, 1.48509074345102e-14, -0.767649473578742, 0, 0, 0, 0, 16.4130361329658, 0, 0, -1.26347611061158, 0, 0.0967147429123335, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.96647939483827, 0, 8.12403840463597, -1.64130361329658, 0, 0, 11.7728501222091, 0, -2.40312296813959, 0.485504156227609, 0, 0, 0, 10.2761860629321, 0, 0, -1.48323969741914, 0, 0.30276503540975, -0.0611677741841184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.05298244095217, 0, -1.58564993434419, 4.4848952846511, 4.28174419288837, 0, 0.191485421551264, 0, -3.75233260785875, -4.31161222746203, 0, 0, 0, 0, 18.8807171866294, 0, 0.844371341865038, 0, 1.18187368057056, 1.04463861754668, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 2.32115382989598, 0, 0, 0, 3.92428337406973, 0, 5.49285249860476, 1.21484853427001e-14, 0, 0, 0, 0, 0, 0, 17.3044631365565, 0, -1.73008591662714, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.65329983228433, 0, 4.15220619990513, 2.93605316083776, 0, 0, 2.63248931621764, 0, 9.82591326180785, -2.8226127713774, 0, 0, 0, 0, 0, 0, 11.6081867662439, 0, -3.09487177319466, 0.683876505540249, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 2.01017818278148, 0, 0, 0, 0, 0, 8.91928088068602, 1.76356325376492e-14, 0, 0, 0, 0, 0, 0, 0, 0, 16.8558564884489, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.29782505861521, 0, 1.49829835452879, 5.50917601898535, 0, 0, 0, 0, 6.64803945320938, 4.13676892548485, 0, 0, 0, 0, 0, 0, 0, 0, 12.5636136423842, -3.55352656109507, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87616630392938, 0, 0, 6.2283092998577, 0, 0, 0, 0, 0, 11.0541524195338, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11.6057691494799, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    const static double dmats1[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.16227766016838, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.47722557505166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.95803989154981, 5.61248608016091, -1.08012344973464, -0.763762615825977, 0, 1.12766252988532e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.29128784747793, 7.24568837309472, 4.18330013267038, -0.591607978309962, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-2.64575131106459, 0, 9.66091783079296, 0.683130051063976, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87082869338697, 0, 0, 4.34741302385683, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.24037034920392, 0, 0, 7.52994023880667, 0, 0, 0, -1.40420976242894e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.74954541697351, 5.79655069847578, -1.67332005306815, -1.18321595661993, 7.74596669241484, -1.2, 0.346410161513776, -0.979795897113278, 0.282842712474625, 0.200000000000005, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.32379000772444, 2.44948974278317, 2.82842712474619, -0.999999999999997, 9.16515138991168, 7.09929573971955, -2.04939015319192, -0.414039335605417, -0.478091443733761, 0.169030850945703, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.80000000000001, -5.69209978830309, 4.38178046004133, -0.77459666924148, 0, 10.998181667894, 4.76235235991628, 0.962140470884725, -0.740656079818049, 0.130930734141596, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.19615242270664, 0, -3.16227766016837, -2.23606797749979, 0, 0, 13.7477270848675, 0, 0.534522483824846, 0.377964473009225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.01246117974981, 2.12132034355964, -0.408248290463859, 3.17542648054293, 0, 0, 0, 7.17137165600634, -1.3801311186847, -1.56144011671765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.55884572681199, 2.73861278752583, 1.5811388300842, 2.45967477524977, 0, 0, 0, 9.2582009977255, 5.3452248382485, -1.20948631362952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-1.79999999999999, 0, 3.65148371670111, -2.84018778721876, 0, 0, 0, 0, 12.3442679969673, 1.39659449751036, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.27279220613578, 0, 0, 3.83405790253616, 0, 0, 0, 0, 0, 5.18459255872629, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.20454076850485, 0, 0, 6.64078308635359, 0, 0, 0, 0, 0, 8.97997772825746, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.56904651573303, 5.80288457473998, -2.01017818278148, -1.42141062443803, 8.14215222512715, -2.10229466468021, 0.728256234341421, -1.71651640581399, 0.594618725379067, 0.420458932936047, 9.81070843517429, -1.18450885369836, 0.3058388709206, -0.105945692672795, -1.02581475831036, 0.264864231681991, -0.0917516612761804, 0.216260739578394, -0.0749149177264392, -0.0529728463363962, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.26568606239552, 3.07059789431495, 1.77281052085584, -1.25356634105601, 2.39356776939085, 6.30376871403133, -2.78313372537746, -0.908295106229249, -0.524404424085077, 0.370809924354783, 11.1242977306435, 9.40174755792013, -2.42752078113806, 0.840917865872083, -0.301561193523227, -0.794200206656967, 0.350641890608831, 0.114434427054266, 0.0660687472643429, -0.0467176592151151, 0, 0, 0, 1.18413955033316e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.91485421551268, 1.29756443747035, 3.74574588632197, -1.05945692672795, -8.09173593712687, 5.01426536422407, 1.80936716113936, -0.383824736789366, -1.1080065755349, 0.313391585264, 0, 12.7134831207354, 8.2065180664829, -2.84282124887606, 1.01946290306866, -0.631738055305791, -0.227958835180081, 0.0483573714561658, 0.139595707137601, -0.0394836284566112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741914, 7.03562363973515, 4.06201920231798, -0.820651806648292, 0, -6.79705818718658, 5.88642506110457, -2.08116553882674, -1.2015614840698, 0.242752078113806, 0, 0, 14.8323969741913, 5.13809303146605, 0, 0.856348838577678, -0.741619848709567, 0.262202212042541, 0.151382517704874, -0.0305838870920586, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-3.42539535431071, 0, 9.38083151964686, 1.89521416591737, 0, 1.48502651407619e-14, -3.39852909359332, 0, -2.77488738510233, -0.560611910581396, 0, 0, 0, 17.7988763690296, 0, 0, 0.42817441928884, 0, 0.349602949390053, 0.0706304617818605, 0, 0, 0, 0, -1.76908227133537e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.02649122047609, 2.74642624930238, -0.792824967172093, 2.24244764232555, 2.14087209644419, -0.331662479035538, 0.095742710775634, 6.49923072370876, -1.87616630392936, -2.15580611373101, 0, 0, 0, 0, 9.44035859331469, -1.46249406456536, 0.42218567093252, -2.04706526287664, 0.59093684028528, 0.522319308773337, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.71269767715535, 1.16057691494799, 1.34011878852098, 1.89521416591738, 2.53311402559511, 1.96214168703486, -0.566421515598881, 2.74642624930237, 3.17129986868837, -1.82198870938951, 0, 0, 0, 0, 11.1699829238239, 8.65223156827827, -2.49768411251822, -0.865042958313569, -0.998865569685858, 0.441440386136648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.32664991614216, -2.69693703815182, 2.07610309995257, 1.46802658041888, 0, 3.03973683071413, 1.31624465810882, -6.382117875081, 4.91295663090391, -1.4113063856887, 0, 0, 0, 0, 0, 13.4039795085887, 5.80409338312195, 2.01017818278147, -1.54743588659732, 0.341938252770131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.82970843102535, 0, -1.49829835452879, 4.23782770691181, 0, 0, 3.79967103839267, 0, -3.54562104171168, -4.07409060843206, 0, 0, 0, 0, 0, 0, 16.7549743857359, 0, 1.11676565710082, 0.987090711415304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741913, 1.00508909139074, -0.193429485824663, 3.55615782880925, 0, 0, 0, 4.459640440343, -0.858258202906983, 2.67027285925187, 0, 0, 0, 0, 0, 0, 0, 8.42792824422443, -1.62195554683794, -2.29379153190448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.14891252930761, 1.29756443747036, 0.749149177264399, 2.75458800949267, 0, 0, 0, 5.75737105184053, 3.3240197266047, 2.06838446274242, 0, 0, 0, 0, 0, 0, 0, 10.8804085776374, 6.2818068211921, -1.77676328054753, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.02006749648391e-14, 0, 0},
    {-1.32664991614216, 0, 1.73008591662714, -3.18072425757422, 0, 0, 0, 1.15266449376351e-14, 7.67649473578738, -2.38836465270397, 0, 0, 0, 0, 0, 0, 0, 0, 14.5072114368499, 2.05162951662072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.938083151964688, 0, 0, 3.11415464992885, 0, 0, 0, 0, 0, 5.52707620976692, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.80288457473997, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.6248076809272, 0, 0, 5.39387407630363, 0, 0, 0, 0, 0, 9.57317681262152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10.0508909139073, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    const static double dmats2[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.16227766016838, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.82574185835056, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.16397779494323, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.95803989154981, 5.61248608016091, -1.08012344973464, -0.763762615825976, 0, 1.39411605579536e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.29128784747792, 1.44913767461894, 4.18330013267038, -0.591607978309961, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.3228756555323, 0, 3.86436713231718, -0.341565025531985, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87082869338697, 7.09929573971954, 0, 4.34741302385683, 0, 1.2137796469483e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.08012344973464, 0, 7.09929573971954, 2.50998007960223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-3.81881307912987, 0, 0, 8.87411967464942, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.74954541697351, 5.79655069847578, -1.67332005306815, -1.18321595661993, 7.74596669241484, -1.19999999999999, 0.346410161513777, -0.97979589711328, 0.282842712474624, 0.200000000000005, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.32379000772445, 2.44948974278317, 2.82842712474619, -0.999999999999998, 1.30930734141596, 7.09929573971955, -2.04939015319192, -0.414039335605417, -0.478091443733761, 0.169030850945707, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.80000000000001, 0.632455532033672, 4.38178046004133, -0.774596669241482, 0, 3.14233761939829, 4.76235235991627, -0.106904496764972, -0.740656079818045, 0.130930734141597, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.03923048454133, 0, 3.16227766016838, -0.447213595499956, 0, 0, 5.8918830363718, 0, -0.534522483824849, 0.0755928946018436, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.0124611797498, 2.12132034355964, -0.408248290463861, 3.17542648054293, 9.07114735222144, 0, 0, 7.17137165600635, -1.3801311186847, -1.56144011671765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.558845726812, 0.547722557505166, 1.5811388300842, 2.45967477524977, 0, 9.07114735222146, 0, 1.85164019954509, 5.34522483824849, -1.20948631362952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.900000000000005, 0, 1.46059348668045, 1.42009389360939, 0, 0, 9.07114735222146, 0, 4.93770719878694, -0.698297248755174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.27279220613578, -6.26099033699941, 0, 3.83405790253616, 0, -1.33471233241901e-14, 0, 10.5830052442584, 1.61529151756054e-14, 5.18459255872629, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.734846922834955, 0, -6.26099033699941, 2.21359436211787, 0, 0, 0, 0, 10.5830052442584, 2.99332590941916, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.7157676649773, 0, 0, -4.69574275274955, 0, 0, 0, 0, 0, 12.69960629311, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.56904651573303, 5.80288457473998, -2.01017818278148, -1.42141062443803, 8.14215222512715, -2.10229466468021, 0.72825623434142, -1.71651640581399, 0.594618725379067, 0.420458932936046, 9.81070843517429, -1.18450885369836, 0.305838870920599, -0.105945692672794, -1.02581475831036, 0.264864231681991, -0.0917516612761805, 0.216260739578394, -0.0749149177264392, -0.052972846336396, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.26568606239552, 3.07059789431495, 1.77281052085584, -1.25356634105602, 2.39356776939084, 6.30376871403133, -2.78313372537746, -0.908295106229248, -0.524404424085073, 0.370809924354783, 1.23603308118261, 9.40174755792013, -2.42752078113806, 0.840917865872083, -0.301561193523226, -0.794200206656968, 0.350641890608831, 0.114434427054266, 0.0660687472643423, -0.0467176592151165, 0, 0, 0, 1.09746923696279e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.91485421551268, 1.29756443747035, 3.74574588632197, -1.05945692672795, 0.404586796856347, 5.01426536422407, 1.80936716113937, -0.383824736789372, -1.1080065755349, 0.313391585264004, 0, 2.82521847127454, 8.2065180664829, -2.84282124887606, -0.0509731451534344, -0.631738055305788, -0.227958835180082, 0.0483573714561684, 0.139595707137601, -0.039483628456609, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741914, 0.335029697130247, 4.06201920231798, -0.820651806648289, 0, 1.69926454679664, 5.88642506110457, -0.099103120896514, -1.2015614840698, 0.242752078113805, 0, 0, 4.94413232473044, 5.13809303146605, 0, -0.214087209644418, -0.741619848709568, 0.0124858196210747, 0.151382517704876, -0.0305838870920584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.856348838577678, 0, 2.68023757704196, -0.473803541479345, 0, 0, 5.09779364038992, 0, -0.792824967172097, 0.140152977645345, 0, 0, 0, 7.91061171956871, 0, 0, -0.642261628933257, 0, 0.0998865569685871, -0.0176576154454654, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.02649122047609, 2.74642624930238, -0.792824967172095, 2.24244764232555, 2.14087209644419, -0.331662479035546, 0.0957427107756332, 6.49923072370876, -1.87616630392937, -2.15580611373101, 11.0554159678513, 0, 0, 0, 9.44035859331468, -1.46249406456535, 0.42218567093252, -2.04706526287664, 0.59093684028528, 0.522319308773341, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.71269767715534, 1.16057691494799, 1.34011878852098, 1.89521416591737, 0.36187343222787, 1.96214168703486, -0.566421515598891, 2.74642624930238, 3.17129986868838, -1.82198870938951, 0, 11.0554159678513, 0, 0, 1.59571184626056, 8.65223156827827, -2.49768411251822, -0.865042958313572, -0.998865569685858, 0.441440386136647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.32664991614217, 0.299659670905757, 2.07610309995256, 1.46802658041888, 0, 0.868496237346881, 1.31624465810882, 0.709124208342336, 4.91295663090392, -1.4113063856887, 0, 0, 11.0554159678513, 0, 0, 3.82970843102535, 5.80409338312195, -0.223353131420161, -1.54743588659733, 0.341938252770126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.765941686205071, 0, 1.49829835452879, 0.847565541382364, 0, 0, 1.62843044502542, 0, 3.54562104171167, -0.814818121686411, 0, 0, 0, 11.0554159678513, 0, 0, 7.18070330817254, 0, -1.11676565710082, 0.197418142283063, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741914, 1.00508909139074, -0.193429485824663, 3.55615782880926, -8.46157280212812, 0, 0, 4.45964044034301, -0.858258202906987, 2.67027285925186, 0, 0, 0, 0, 12.4373429638327, 0, 0, 8.42792824422443, -1.62195554683794, -2.29379153190448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.1489125293076, 0.259512887494073, 0.749149177264395, 2.75458800949267, 0, -8.46157280212812, 0, 1.15147421036811, 3.32401972660469, 2.06838446274243, 0, 0, 0, 0, 0, 12.4373429638327, 0, 2.17608171552749, 6.2818068211921, -1.77676328054754, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.663324958071074, 0, 0.692034366650849, 1.59036212878711, 0, 0, -8.46157280212813, 0, 3.07059789431495, 1.19418232635198, 0, 0, 0, 0, 0, 0, 12.4373429638327, 0, 5.80288457473997, -1.02581475831036, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.938083151964688, 7.62808987244126, 0, 3.11415464992885, 0, 0, 0, -7.5213980463361, 0, 5.52707620976691, 0, 0, 0, 0, 0, 0, 0, 14.2141062443803, 0, 5.80288457473998, 0, 0, 0, 0, 0, 1.03455020940032e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.541602560309059, 0, 7.62808987244125, 1.79795802543454, 0, 0, 0, 0, -7.52139804633611, 3.1910589375405, 0, 0, 0, 0, 0, 0, 0, 0, 14.2141062443803, 3.35029697130244, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-5.36159180343549, 0, 0, 8.8994381845148, 0, 0, 0, 0, -1.07784467308941e-14, -5.26497863243527, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16.583123951777, 0, 0, 0, 0, 0, 1.2461107758246e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    // Compute reference derivatives
    // Declare pointer to array of derivatives on FIAT element
    double *derivatives = new double [num_derivatives];
    
    // Declare coefficients
    double coeff0_0 = 0;
    double coeff0_1 = 0;
    double coeff0_2 = 0;
    double coeff0_3 = 0;
    double coeff0_4 = 0;
    double coeff0_5 = 0;
    double coeff0_6 = 0;
    double coeff0_7 = 0;
    double coeff0_8 = 0;
    double coeff0_9 = 0;
    double coeff0_10 = 0;
    double coeff0_11 = 0;
    double coeff0_12 = 0;
    double coeff0_13 = 0;
    double coeff0_14 = 0;
    double coeff0_15 = 0;
    double coeff0_16 = 0;
    double coeff0_17 = 0;
    double coeff0_18 = 0;
    double coeff0_19 = 0;
    double coeff0_20 = 0;
    double coeff0_21 = 0;
    double coeff0_22 = 0;
    double coeff0_23 = 0;
    double coeff0_24 = 0;
    double coeff0_25 = 0;
    double coeff0_26 = 0;
    double coeff0_27 = 0;
    double coeff0_28 = 0;
    double coeff0_29 = 0;
    double coeff0_30 = 0;
    double coeff0_31 = 0;
    double coeff0_32 = 0;
    double coeff0_33 = 0;
    double coeff0_34 = 0;
    
    // Declare new coefficients
    double new_coeff0_0 = 0;
    double new_coeff0_1 = 0;
    double new_coeff0_2 = 0;
    double new_coeff0_3 = 0;
    double new_coeff0_4 = 0;
    double new_coeff0_5 = 0;
    double new_coeff0_6 = 0;
    double new_coeff0_7 = 0;
    double new_coeff0_8 = 0;
    double new_coeff0_9 = 0;
    double new_coeff0_10 = 0;
    double new_coeff0_11 = 0;
    double new_coeff0_12 = 0;
    double new_coeff0_13 = 0;
    double new_coeff0_14 = 0;
    double new_coeff0_15 = 0;
    double new_coeff0_16 = 0;
    double new_coeff0_17 = 0;
    double new_coeff0_18 = 0;
    double new_coeff0_19 = 0;
    double new_coeff0_20 = 0;
    double new_coeff0_21 = 0;
    double new_coeff0_22 = 0;
    double new_coeff0_23 = 0;
    double new_coeff0_24 = 0;
    double new_coeff0_25 = 0;
    double new_coeff0_26 = 0;
    double new_coeff0_27 = 0;
    double new_coeff0_28 = 0;
    double new_coeff0_29 = 0;
    double new_coeff0_30 = 0;
    double new_coeff0_31 = 0;
    double new_coeff0_32 = 0;
    double new_coeff0_33 = 0;
    double new_coeff0_34 = 0;
    
    // Loop possible derivatives
    for (unsigned int deriv_num = 0; deriv_num < num_derivatives; deriv_num++)
    {
      // Get values from coefficients array
      new_coeff0_0 = coefficients0[dof][0];
      new_coeff0_1 = coefficients0[dof][1];
      new_coeff0_2 = coefficients0[dof][2];
      new_coeff0_3 = coefficients0[dof][3];
      new_coeff0_4 = coefficients0[dof][4];
      new_coeff0_5 = coefficients0[dof][5];
      new_coeff0_6 = coefficients0[dof][6];
      new_coeff0_7 = coefficients0[dof][7];
      new_coeff0_8 = coefficients0[dof][8];
      new_coeff0_9 = coefficients0[dof][9];
      new_coeff0_10 = coefficients0[dof][10];
      new_coeff0_11 = coefficients0[dof][11];
      new_coeff0_12 = coefficients0[dof][12];
      new_coeff0_13 = coefficients0[dof][13];
      new_coeff0_14 = coefficients0[dof][14];
      new_coeff0_15 = coefficients0[dof][15];
      new_coeff0_16 = coefficients0[dof][16];
      new_coeff0_17 = coefficients0[dof][17];
      new_coeff0_18 = coefficients0[dof][18];
      new_coeff0_19 = coefficients0[dof][19];
      new_coeff0_20 = coefficients0[dof][20];
      new_coeff0_21 = coefficients0[dof][21];
      new_coeff0_22 = coefficients0[dof][22];
      new_coeff0_23 = coefficients0[dof][23];
      new_coeff0_24 = coefficients0[dof][24];
      new_coeff0_25 = coefficients0[dof][25];
      new_coeff0_26 = coefficients0[dof][26];
      new_coeff0_27 = coefficients0[dof][27];
      new_coeff0_28 = coefficients0[dof][28];
      new_coeff0_29 = coefficients0[dof][29];
      new_coeff0_30 = coefficients0[dof][30];
      new_coeff0_31 = coefficients0[dof][31];
      new_coeff0_32 = coefficients0[dof][32];
      new_coeff0_33 = coefficients0[dof][33];
      new_coeff0_34 = coefficients0[dof][34];
    
      // Loop derivative order
      for (unsigned int j = 0; j < n; j++)
      {
        // Update old coefficients
        coeff0_0 = new_coeff0_0;
        coeff0_1 = new_coeff0_1;
        coeff0_2 = new_coeff0_2;
        coeff0_3 = new_coeff0_3;
        coeff0_4 = new_coeff0_4;
        coeff0_5 = new_coeff0_5;
        coeff0_6 = new_coeff0_6;
        coeff0_7 = new_coeff0_7;
        coeff0_8 = new_coeff0_8;
        coeff0_9 = new_coeff0_9;
        coeff0_10 = new_coeff0_10;
        coeff0_11 = new_coeff0_11;
        coeff0_12 = new_coeff0_12;
        coeff0_13 = new_coeff0_13;
        coeff0_14 = new_coeff0_14;
        coeff0_15 = new_coeff0_15;
        coeff0_16 = new_coeff0_16;
        coeff0_17 = new_coeff0_17;
        coeff0_18 = new_coeff0_18;
        coeff0_19 = new_coeff0_19;
        coeff0_20 = new_coeff0_20;
        coeff0_21 = new_coeff0_21;
        coeff0_22 = new_coeff0_22;
        coeff0_23 = new_coeff0_23;
        coeff0_24 = new_coeff0_24;
        coeff0_25 = new_coeff0_25;
        coeff0_26 = new_coeff0_26;
        coeff0_27 = new_coeff0_27;
        coeff0_28 = new_coeff0_28;
        coeff0_29 = new_coeff0_29;
        coeff0_30 = new_coeff0_30;
        coeff0_31 = new_coeff0_31;
        coeff0_32 = new_coeff0_32;
        coeff0_33 = new_coeff0_33;
        coeff0_34 = new_coeff0_34;
    
        if(combinations[deriv_num][j] == 0)
        {
          new_coeff0_0 = coeff0_0*dmats0[0][0] + coeff0_1*dmats0[1][0] + coeff0_2*dmats0[2][0] + coeff0_3*dmats0[3][0] + coeff0_4*dmats0[4][0] + coeff0_5*dmats0[5][0] + coeff0_6*dmats0[6][0] + coeff0_7*dmats0[7][0] + coeff0_8*dmats0[8][0] + coeff0_9*dmats0[9][0] + coeff0_10*dmats0[10][0] + coeff0_11*dmats0[11][0] + coeff0_12*dmats0[12][0] + coeff0_13*dmats0[13][0] + coeff0_14*dmats0[14][0] + coeff0_15*dmats0[15][0] + coeff0_16*dmats0[16][0] + coeff0_17*dmats0[17][0] + coeff0_18*dmats0[18][0] + coeff0_19*dmats0[19][0] + coeff0_20*dmats0[20][0] + coeff0_21*dmats0[21][0] + coeff0_22*dmats0[22][0] + coeff0_23*dmats0[23][0] + coeff0_24*dmats0[24][0] + coeff0_25*dmats0[25][0] + coeff0_26*dmats0[26][0] + coeff0_27*dmats0[27][0] + coeff0_28*dmats0[28][0] + coeff0_29*dmats0[29][0] + coeff0_30*dmats0[30][0] + coeff0_31*dmats0[31][0] + coeff0_32*dmats0[32][0] + coeff0_33*dmats0[33][0] + coeff0_34*dmats0[34][0];
          new_coeff0_1 = coeff0_0*dmats0[0][1] + coeff0_1*dmats0[1][1] + coeff0_2*dmats0[2][1] + coeff0_3*dmats0[3][1] + coeff0_4*dmats0[4][1] + coeff0_5*dmats0[5][1] + coeff0_6*dmats0[6][1] + coeff0_7*dmats0[7][1] + coeff0_8*dmats0[8][1] + coeff0_9*dmats0[9][1] + coeff0_10*dmats0[10][1] + coeff0_11*dmats0[11][1] + coeff0_12*dmats0[12][1] + coeff0_13*dmats0[13][1] + coeff0_14*dmats0[14][1] + coeff0_15*dmats0[15][1] + coeff0_16*dmats0[16][1] + coeff0_17*dmats0[17][1] + coeff0_18*dmats0[18][1] + coeff0_19*dmats0[19][1] + coeff0_20*dmats0[20][1] + coeff0_21*dmats0[21][1] + coeff0_22*dmats0[22][1] + coeff0_23*dmats0[23][1] + coeff0_24*dmats0[24][1] + coeff0_25*dmats0[25][1] + coeff0_26*dmats0[26][1] + coeff0_27*dmats0[27][1] + coeff0_28*dmats0[28][1] + coeff0_29*dmats0[29][1] + coeff0_30*dmats0[30][1] + coeff0_31*dmats0[31][1] + coeff0_32*dmats0[32][1] + coeff0_33*dmats0[33][1] + coeff0_34*dmats0[34][1];
          new_coeff0_2 = coeff0_0*dmats0[0][2] + coeff0_1*dmats0[1][2] + coeff0_2*dmats0[2][2] + coeff0_3*dmats0[3][2] + coeff0_4*dmats0[4][2] + coeff0_5*dmats0[5][2] + coeff0_6*dmats0[6][2] + coeff0_7*dmats0[7][2] + coeff0_8*dmats0[8][2] + coeff0_9*dmats0[9][2] + coeff0_10*dmats0[10][2] + coeff0_11*dmats0[11][2] + coeff0_12*dmats0[12][2] + coeff0_13*dmats0[13][2] + coeff0_14*dmats0[14][2] + coeff0_15*dmats0[15][2] + coeff0_16*dmats0[16][2] + coeff0_17*dmats0[17][2] + coeff0_18*dmats0[18][2] + coeff0_19*dmats0[19][2] + coeff0_20*dmats0[20][2] + coeff0_21*dmats0[21][2] + coeff0_22*dmats0[22][2] + coeff0_23*dmats0[23][2] + coeff0_24*dmats0[24][2] + coeff0_25*dmats0[25][2] + coeff0_26*dmats0[26][2] + coeff0_27*dmats0[27][2] + coeff0_28*dmats0[28][2] + coeff0_29*dmats0[29][2] + coeff0_30*dmats0[30][2] + coeff0_31*dmats0[31][2] + coeff0_32*dmats0[32][2] + coeff0_33*dmats0[33][2] + coeff0_34*dmats0[34][2];
          new_coeff0_3 = coeff0_0*dmats0[0][3] + coeff0_1*dmats0[1][3] + coeff0_2*dmats0[2][3] + coeff0_3*dmats0[3][3] + coeff0_4*dmats0[4][3] + coeff0_5*dmats0[5][3] + coeff0_6*dmats0[6][3] + coeff0_7*dmats0[7][3] + coeff0_8*dmats0[8][3] + coeff0_9*dmats0[9][3] + coeff0_10*dmats0[10][3] + coeff0_11*dmats0[11][3] + coeff0_12*dmats0[12][3] + coeff0_13*dmats0[13][3] + coeff0_14*dmats0[14][3] + coeff0_15*dmats0[15][3] + coeff0_16*dmats0[16][3] + coeff0_17*dmats0[17][3] + coeff0_18*dmats0[18][3] + coeff0_19*dmats0[19][3] + coeff0_20*dmats0[20][3] + coeff0_21*dmats0[21][3] + coeff0_22*dmats0[22][3] + coeff0_23*dmats0[23][3] + coeff0_24*dmats0[24][3] + coeff0_25*dmats0[25][3] + coeff0_26*dmats0[26][3] + coeff0_27*dmats0[27][3] + coeff0_28*dmats0[28][3] + coeff0_29*dmats0[29][3] + coeff0_30*dmats0[30][3] + coeff0_31*dmats0[31][3] + coeff0_32*dmats0[32][3] + coeff0_33*dmats0[33][3] + coeff0_34*dmats0[34][3];
          new_coeff0_4 = coeff0_0*dmats0[0][4] + coeff0_1*dmats0[1][4] + coeff0_2*dmats0[2][4] + coeff0_3*dmats0[3][4] + coeff0_4*dmats0[4][4] + coeff0_5*dmats0[5][4] + coeff0_6*dmats0[6][4] + coeff0_7*dmats0[7][4] + coeff0_8*dmats0[8][4] + coeff0_9*dmats0[9][4] + coeff0_10*dmats0[10][4] + coeff0_11*dmats0[11][4] + coeff0_12*dmats0[12][4] + coeff0_13*dmats0[13][4] + coeff0_14*dmats0[14][4] + coeff0_15*dmats0[15][4] + coeff0_16*dmats0[16][4] + coeff0_17*dmats0[17][4] + coeff0_18*dmats0[18][4] + coeff0_19*dmats0[19][4] + coeff0_20*dmats0[20][4] + coeff0_21*dmats0[21][4] + coeff0_22*dmats0[22][4] + coeff0_23*dmats0[23][4] + coeff0_24*dmats0[24][4] + coeff0_25*dmats0[25][4] + coeff0_26*dmats0[26][4] + coeff0_27*dmats0[27][4] + coeff0_28*dmats0[28][4] + coeff0_29*dmats0[29][4] + coeff0_30*dmats0[30][4] + coeff0_31*dmats0[31][4] + coeff0_32*dmats0[32][4] + coeff0_33*dmats0[33][4] + coeff0_34*dmats0[34][4];
          new_coeff0_5 = coeff0_0*dmats0[0][5] + coeff0_1*dmats0[1][5] + coeff0_2*dmats0[2][5] + coeff0_3*dmats0[3][5] + coeff0_4*dmats0[4][5] + coeff0_5*dmats0[5][5] + coeff0_6*dmats0[6][5] + coeff0_7*dmats0[7][5] + coeff0_8*dmats0[8][5] + coeff0_9*dmats0[9][5] + coeff0_10*dmats0[10][5] + coeff0_11*dmats0[11][5] + coeff0_12*dmats0[12][5] + coeff0_13*dmats0[13][5] + coeff0_14*dmats0[14][5] + coeff0_15*dmats0[15][5] + coeff0_16*dmats0[16][5] + coeff0_17*dmats0[17][5] + coeff0_18*dmats0[18][5] + coeff0_19*dmats0[19][5] + coeff0_20*dmats0[20][5] + coeff0_21*dmats0[21][5] + coeff0_22*dmats0[22][5] + coeff0_23*dmats0[23][5] + coeff0_24*dmats0[24][5] + coeff0_25*dmats0[25][5] + coeff0_26*dmats0[26][5] + coeff0_27*dmats0[27][5] + coeff0_28*dmats0[28][5] + coeff0_29*dmats0[29][5] + coeff0_30*dmats0[30][5] + coeff0_31*dmats0[31][5] + coeff0_32*dmats0[32][5] + coeff0_33*dmats0[33][5] + coeff0_34*dmats0[34][5];
          new_coeff0_6 = coeff0_0*dmats0[0][6] + coeff0_1*dmats0[1][6] + coeff0_2*dmats0[2][6] + coeff0_3*dmats0[3][6] + coeff0_4*dmats0[4][6] + coeff0_5*dmats0[5][6] + coeff0_6*dmats0[6][6] + coeff0_7*dmats0[7][6] + coeff0_8*dmats0[8][6] + coeff0_9*dmats0[9][6] + coeff0_10*dmats0[10][6] + coeff0_11*dmats0[11][6] + coeff0_12*dmats0[12][6] + coeff0_13*dmats0[13][6] + coeff0_14*dmats0[14][6] + coeff0_15*dmats0[15][6] + coeff0_16*dmats0[16][6] + coeff0_17*dmats0[17][6] + coeff0_18*dmats0[18][6] + coeff0_19*dmats0[19][6] + coeff0_20*dmats0[20][6] + coeff0_21*dmats0[21][6] + coeff0_22*dmats0[22][6] + coeff0_23*dmats0[23][6] + coeff0_24*dmats0[24][6] + coeff0_25*dmats0[25][6] + coeff0_26*dmats0[26][6] + coeff0_27*dmats0[27][6] + coeff0_28*dmats0[28][6] + coeff0_29*dmats0[29][6] + coeff0_30*dmats0[30][6] + coeff0_31*dmats0[31][6] + coeff0_32*dmats0[32][6] + coeff0_33*dmats0[33][6] + coeff0_34*dmats0[34][6];
          new_coeff0_7 = coeff0_0*dmats0[0][7] + coeff0_1*dmats0[1][7] + coeff0_2*dmats0[2][7] + coeff0_3*dmats0[3][7] + coeff0_4*dmats0[4][7] + coeff0_5*dmats0[5][7] + coeff0_6*dmats0[6][7] + coeff0_7*dmats0[7][7] + coeff0_8*dmats0[8][7] + coeff0_9*dmats0[9][7] + coeff0_10*dmats0[10][7] + coeff0_11*dmats0[11][7] + coeff0_12*dmats0[12][7] + coeff0_13*dmats0[13][7] + coeff0_14*dmats0[14][7] + coeff0_15*dmats0[15][7] + coeff0_16*dmats0[16][7] + coeff0_17*dmats0[17][7] + coeff0_18*dmats0[18][7] + coeff0_19*dmats0[19][7] + coeff0_20*dmats0[20][7] + coeff0_21*dmats0[21][7] + coeff0_22*dmats0[22][7] + coeff0_23*dmats0[23][7] + coeff0_24*dmats0[24][7] + coeff0_25*dmats0[25][7] + coeff0_26*dmats0[26][7] + coeff0_27*dmats0[27][7] + coeff0_28*dmats0[28][7] + coeff0_29*dmats0[29][7] + coeff0_30*dmats0[30][7] + coeff0_31*dmats0[31][7] + coeff0_32*dmats0[32][7] + coeff0_33*dmats0[33][7] + coeff0_34*dmats0[34][7];
          new_coeff0_8 = coeff0_0*dmats0[0][8] + coeff0_1*dmats0[1][8] + coeff0_2*dmats0[2][8] + coeff0_3*dmats0[3][8] + coeff0_4*dmats0[4][8] + coeff0_5*dmats0[5][8] + coeff0_6*dmats0[6][8] + coeff0_7*dmats0[7][8] + coeff0_8*dmats0[8][8] + coeff0_9*dmats0[9][8] + coeff0_10*dmats0[10][8] + coeff0_11*dmats0[11][8] + coeff0_12*dmats0[12][8] + coeff0_13*dmats0[13][8] + coeff0_14*dmats0[14][8] + coeff0_15*dmats0[15][8] + coeff0_16*dmats0[16][8] + coeff0_17*dmats0[17][8] + coeff0_18*dmats0[18][8] + coeff0_19*dmats0[19][8] + coeff0_20*dmats0[20][8] + coeff0_21*dmats0[21][8] + coeff0_22*dmats0[22][8] + coeff0_23*dmats0[23][8] + coeff0_24*dmats0[24][8] + coeff0_25*dmats0[25][8] + coeff0_26*dmats0[26][8] + coeff0_27*dmats0[27][8] + coeff0_28*dmats0[28][8] + coeff0_29*dmats0[29][8] + coeff0_30*dmats0[30][8] + coeff0_31*dmats0[31][8] + coeff0_32*dmats0[32][8] + coeff0_33*dmats0[33][8] + coeff0_34*dmats0[34][8];
          new_coeff0_9 = coeff0_0*dmats0[0][9] + coeff0_1*dmats0[1][9] + coeff0_2*dmats0[2][9] + coeff0_3*dmats0[3][9] + coeff0_4*dmats0[4][9] + coeff0_5*dmats0[5][9] + coeff0_6*dmats0[6][9] + coeff0_7*dmats0[7][9] + coeff0_8*dmats0[8][9] + coeff0_9*dmats0[9][9] + coeff0_10*dmats0[10][9] + coeff0_11*dmats0[11][9] + coeff0_12*dmats0[12][9] + coeff0_13*dmats0[13][9] + coeff0_14*dmats0[14][9] + coeff0_15*dmats0[15][9] + coeff0_16*dmats0[16][9] + coeff0_17*dmats0[17][9] + coeff0_18*dmats0[18][9] + coeff0_19*dmats0[19][9] + coeff0_20*dmats0[20][9] + coeff0_21*dmats0[21][9] + coeff0_22*dmats0[22][9] + coeff0_23*dmats0[23][9] + coeff0_24*dmats0[24][9] + coeff0_25*dmats0[25][9] + coeff0_26*dmats0[26][9] + coeff0_27*dmats0[27][9] + coeff0_28*dmats0[28][9] + coeff0_29*dmats0[29][9] + coeff0_30*dmats0[30][9] + coeff0_31*dmats0[31][9] + coeff0_32*dmats0[32][9] + coeff0_33*dmats0[33][9] + coeff0_34*dmats0[34][9];
          new_coeff0_10 = coeff0_0*dmats0[0][10] + coeff0_1*dmats0[1][10] + coeff0_2*dmats0[2][10] + coeff0_3*dmats0[3][10] + coeff0_4*dmats0[4][10] + coeff0_5*dmats0[5][10] + coeff0_6*dmats0[6][10] + coeff0_7*dmats0[7][10] + coeff0_8*dmats0[8][10] + coeff0_9*dmats0[9][10] + coeff0_10*dmats0[10][10] + coeff0_11*dmats0[11][10] + coeff0_12*dmats0[12][10] + coeff0_13*dmats0[13][10] + coeff0_14*dmats0[14][10] + coeff0_15*dmats0[15][10] + coeff0_16*dmats0[16][10] + coeff0_17*dmats0[17][10] + coeff0_18*dmats0[18][10] + coeff0_19*dmats0[19][10] + coeff0_20*dmats0[20][10] + coeff0_21*dmats0[21][10] + coeff0_22*dmats0[22][10] + coeff0_23*dmats0[23][10] + coeff0_24*dmats0[24][10] + coeff0_25*dmats0[25][10] + coeff0_26*dmats0[26][10] + coeff0_27*dmats0[27][10] + coeff0_28*dmats0[28][10] + coeff0_29*dmats0[29][10] + coeff0_30*dmats0[30][10] + coeff0_31*dmats0[31][10] + coeff0_32*dmats0[32][10] + coeff0_33*dmats0[33][10] + coeff0_34*dmats0[34][10];
          new_coeff0_11 = coeff0_0*dmats0[0][11] + coeff0_1*dmats0[1][11] + coeff0_2*dmats0[2][11] + coeff0_3*dmats0[3][11] + coeff0_4*dmats0[4][11] + coeff0_5*dmats0[5][11] + coeff0_6*dmats0[6][11] + coeff0_7*dmats0[7][11] + coeff0_8*dmats0[8][11] + coeff0_9*dmats0[9][11] + coeff0_10*dmats0[10][11] + coeff0_11*dmats0[11][11] + coeff0_12*dmats0[12][11] + coeff0_13*dmats0[13][11] + coeff0_14*dmats0[14][11] + coeff0_15*dmats0[15][11] + coeff0_16*dmats0[16][11] + coeff0_17*dmats0[17][11] + coeff0_18*dmats0[18][11] + coeff0_19*dmats0[19][11] + coeff0_20*dmats0[20][11] + coeff0_21*dmats0[21][11] + coeff0_22*dmats0[22][11] + coeff0_23*dmats0[23][11] + coeff0_24*dmats0[24][11] + coeff0_25*dmats0[25][11] + coeff0_26*dmats0[26][11] + coeff0_27*dmats0[27][11] + coeff0_28*dmats0[28][11] + coeff0_29*dmats0[29][11] + coeff0_30*dmats0[30][11] + coeff0_31*dmats0[31][11] + coeff0_32*dmats0[32][11] + coeff0_33*dmats0[33][11] + coeff0_34*dmats0[34][11];
          new_coeff0_12 = coeff0_0*dmats0[0][12] + coeff0_1*dmats0[1][12] + coeff0_2*dmats0[2][12] + coeff0_3*dmats0[3][12] + coeff0_4*dmats0[4][12] + coeff0_5*dmats0[5][12] + coeff0_6*dmats0[6][12] + coeff0_7*dmats0[7][12] + coeff0_8*dmats0[8][12] + coeff0_9*dmats0[9][12] + coeff0_10*dmats0[10][12] + coeff0_11*dmats0[11][12] + coeff0_12*dmats0[12][12] + coeff0_13*dmats0[13][12] + coeff0_14*dmats0[14][12] + coeff0_15*dmats0[15][12] + coeff0_16*dmats0[16][12] + coeff0_17*dmats0[17][12] + coeff0_18*dmats0[18][12] + coeff0_19*dmats0[19][12] + coeff0_20*dmats0[20][12] + coeff0_21*dmats0[21][12] + coeff0_22*dmats0[22][12] + coeff0_23*dmats0[23][12] + coeff0_24*dmats0[24][12] + coeff0_25*dmats0[25][12] + coeff0_26*dmats0[26][12] + coeff0_27*dmats0[27][12] + coeff0_28*dmats0[28][12] + coeff0_29*dmats0[29][12] + coeff0_30*dmats0[30][12] + coeff0_31*dmats0[31][12] + coeff0_32*dmats0[32][12] + coeff0_33*dmats0[33][12] + coeff0_34*dmats0[34][12];
          new_coeff0_13 = coeff0_0*dmats0[0][13] + coeff0_1*dmats0[1][13] + coeff0_2*dmats0[2][13] + coeff0_3*dmats0[3][13] + coeff0_4*dmats0[4][13] + coeff0_5*dmats0[5][13] + coeff0_6*dmats0[6][13] + coeff0_7*dmats0[7][13] + coeff0_8*dmats0[8][13] + coeff0_9*dmats0[9][13] + coeff0_10*dmats0[10][13] + coeff0_11*dmats0[11][13] + coeff0_12*dmats0[12][13] + coeff0_13*dmats0[13][13] + coeff0_14*dmats0[14][13] + coeff0_15*dmats0[15][13] + coeff0_16*dmats0[16][13] + coeff0_17*dmats0[17][13] + coeff0_18*dmats0[18][13] + coeff0_19*dmats0[19][13] + coeff0_20*dmats0[20][13] + coeff0_21*dmats0[21][13] + coeff0_22*dmats0[22][13] + coeff0_23*dmats0[23][13] + coeff0_24*dmats0[24][13] + coeff0_25*dmats0[25][13] + coeff0_26*dmats0[26][13] + coeff0_27*dmats0[27][13] + coeff0_28*dmats0[28][13] + coeff0_29*dmats0[29][13] + coeff0_30*dmats0[30][13] + coeff0_31*dmats0[31][13] + coeff0_32*dmats0[32][13] + coeff0_33*dmats0[33][13] + coeff0_34*dmats0[34][13];
          new_coeff0_14 = coeff0_0*dmats0[0][14] + coeff0_1*dmats0[1][14] + coeff0_2*dmats0[2][14] + coeff0_3*dmats0[3][14] + coeff0_4*dmats0[4][14] + coeff0_5*dmats0[5][14] + coeff0_6*dmats0[6][14] + coeff0_7*dmats0[7][14] + coeff0_8*dmats0[8][14] + coeff0_9*dmats0[9][14] + coeff0_10*dmats0[10][14] + coeff0_11*dmats0[11][14] + coeff0_12*dmats0[12][14] + coeff0_13*dmats0[13][14] + coeff0_14*dmats0[14][14] + coeff0_15*dmats0[15][14] + coeff0_16*dmats0[16][14] + coeff0_17*dmats0[17][14] + coeff0_18*dmats0[18][14] + coeff0_19*dmats0[19][14] + coeff0_20*dmats0[20][14] + coeff0_21*dmats0[21][14] + coeff0_22*dmats0[22][14] + coeff0_23*dmats0[23][14] + coeff0_24*dmats0[24][14] + coeff0_25*dmats0[25][14] + coeff0_26*dmats0[26][14] + coeff0_27*dmats0[27][14] + coeff0_28*dmats0[28][14] + coeff0_29*dmats0[29][14] + coeff0_30*dmats0[30][14] + coeff0_31*dmats0[31][14] + coeff0_32*dmats0[32][14] + coeff0_33*dmats0[33][14] + coeff0_34*dmats0[34][14];
          new_coeff0_15 = coeff0_0*dmats0[0][15] + coeff0_1*dmats0[1][15] + coeff0_2*dmats0[2][15] + coeff0_3*dmats0[3][15] + coeff0_4*dmats0[4][15] + coeff0_5*dmats0[5][15] + coeff0_6*dmats0[6][15] + coeff0_7*dmats0[7][15] + coeff0_8*dmats0[8][15] + coeff0_9*dmats0[9][15] + coeff0_10*dmats0[10][15] + coeff0_11*dmats0[11][15] + coeff0_12*dmats0[12][15] + coeff0_13*dmats0[13][15] + coeff0_14*dmats0[14][15] + coeff0_15*dmats0[15][15] + coeff0_16*dmats0[16][15] + coeff0_17*dmats0[17][15] + coeff0_18*dmats0[18][15] + coeff0_19*dmats0[19][15] + coeff0_20*dmats0[20][15] + coeff0_21*dmats0[21][15] + coeff0_22*dmats0[22][15] + coeff0_23*dmats0[23][15] + coeff0_24*dmats0[24][15] + coeff0_25*dmats0[25][15] + coeff0_26*dmats0[26][15] + coeff0_27*dmats0[27][15] + coeff0_28*dmats0[28][15] + coeff0_29*dmats0[29][15] + coeff0_30*dmats0[30][15] + coeff0_31*dmats0[31][15] + coeff0_32*dmats0[32][15] + coeff0_33*dmats0[33][15] + coeff0_34*dmats0[34][15];
          new_coeff0_16 = coeff0_0*dmats0[0][16] + coeff0_1*dmats0[1][16] + coeff0_2*dmats0[2][16] + coeff0_3*dmats0[3][16] + coeff0_4*dmats0[4][16] + coeff0_5*dmats0[5][16] + coeff0_6*dmats0[6][16] + coeff0_7*dmats0[7][16] + coeff0_8*dmats0[8][16] + coeff0_9*dmats0[9][16] + coeff0_10*dmats0[10][16] + coeff0_11*dmats0[11][16] + coeff0_12*dmats0[12][16] + coeff0_13*dmats0[13][16] + coeff0_14*dmats0[14][16] + coeff0_15*dmats0[15][16] + coeff0_16*dmats0[16][16] + coeff0_17*dmats0[17][16] + coeff0_18*dmats0[18][16] + coeff0_19*dmats0[19][16] + coeff0_20*dmats0[20][16] + coeff0_21*dmats0[21][16] + coeff0_22*dmats0[22][16] + coeff0_23*dmats0[23][16] + coeff0_24*dmats0[24][16] + coeff0_25*dmats0[25][16] + coeff0_26*dmats0[26][16] + coeff0_27*dmats0[27][16] + coeff0_28*dmats0[28][16] + coeff0_29*dmats0[29][16] + coeff0_30*dmats0[30][16] + coeff0_31*dmats0[31][16] + coeff0_32*dmats0[32][16] + coeff0_33*dmats0[33][16] + coeff0_34*dmats0[34][16];
          new_coeff0_17 = coeff0_0*dmats0[0][17] + coeff0_1*dmats0[1][17] + coeff0_2*dmats0[2][17] + coeff0_3*dmats0[3][17] + coeff0_4*dmats0[4][17] + coeff0_5*dmats0[5][17] + coeff0_6*dmats0[6][17] + coeff0_7*dmats0[7][17] + coeff0_8*dmats0[8][17] + coeff0_9*dmats0[9][17] + coeff0_10*dmats0[10][17] + coeff0_11*dmats0[11][17] + coeff0_12*dmats0[12][17] + coeff0_13*dmats0[13][17] + coeff0_14*dmats0[14][17] + coeff0_15*dmats0[15][17] + coeff0_16*dmats0[16][17] + coeff0_17*dmats0[17][17] + coeff0_18*dmats0[18][17] + coeff0_19*dmats0[19][17] + coeff0_20*dmats0[20][17] + coeff0_21*dmats0[21][17] + coeff0_22*dmats0[22][17] + coeff0_23*dmats0[23][17] + coeff0_24*dmats0[24][17] + coeff0_25*dmats0[25][17] + coeff0_26*dmats0[26][17] + coeff0_27*dmats0[27][17] + coeff0_28*dmats0[28][17] + coeff0_29*dmats0[29][17] + coeff0_30*dmats0[30][17] + coeff0_31*dmats0[31][17] + coeff0_32*dmats0[32][17] + coeff0_33*dmats0[33][17] + coeff0_34*dmats0[34][17];
          new_coeff0_18 = coeff0_0*dmats0[0][18] + coeff0_1*dmats0[1][18] + coeff0_2*dmats0[2][18] + coeff0_3*dmats0[3][18] + coeff0_4*dmats0[4][18] + coeff0_5*dmats0[5][18] + coeff0_6*dmats0[6][18] + coeff0_7*dmats0[7][18] + coeff0_8*dmats0[8][18] + coeff0_9*dmats0[9][18] + coeff0_10*dmats0[10][18] + coeff0_11*dmats0[11][18] + coeff0_12*dmats0[12][18] + coeff0_13*dmats0[13][18] + coeff0_14*dmats0[14][18] + coeff0_15*dmats0[15][18] + coeff0_16*dmats0[16][18] + coeff0_17*dmats0[17][18] + coeff0_18*dmats0[18][18] + coeff0_19*dmats0[19][18] + coeff0_20*dmats0[20][18] + coeff0_21*dmats0[21][18] + coeff0_22*dmats0[22][18] + coeff0_23*dmats0[23][18] + coeff0_24*dmats0[24][18] + coeff0_25*dmats0[25][18] + coeff0_26*dmats0[26][18] + coeff0_27*dmats0[27][18] + coeff0_28*dmats0[28][18] + coeff0_29*dmats0[29][18] + coeff0_30*dmats0[30][18] + coeff0_31*dmats0[31][18] + coeff0_32*dmats0[32][18] + coeff0_33*dmats0[33][18] + coeff0_34*dmats0[34][18];
          new_coeff0_19 = coeff0_0*dmats0[0][19] + coeff0_1*dmats0[1][19] + coeff0_2*dmats0[2][19] + coeff0_3*dmats0[3][19] + coeff0_4*dmats0[4][19] + coeff0_5*dmats0[5][19] + coeff0_6*dmats0[6][19] + coeff0_7*dmats0[7][19] + coeff0_8*dmats0[8][19] + coeff0_9*dmats0[9][19] + coeff0_10*dmats0[10][19] + coeff0_11*dmats0[11][19] + coeff0_12*dmats0[12][19] + coeff0_13*dmats0[13][19] + coeff0_14*dmats0[14][19] + coeff0_15*dmats0[15][19] + coeff0_16*dmats0[16][19] + coeff0_17*dmats0[17][19] + coeff0_18*dmats0[18][19] + coeff0_19*dmats0[19][19] + coeff0_20*dmats0[20][19] + coeff0_21*dmats0[21][19] + coeff0_22*dmats0[22][19] + coeff0_23*dmats0[23][19] + coeff0_24*dmats0[24][19] + coeff0_25*dmats0[25][19] + coeff0_26*dmats0[26][19] + coeff0_27*dmats0[27][19] + coeff0_28*dmats0[28][19] + coeff0_29*dmats0[29][19] + coeff0_30*dmats0[30][19] + coeff0_31*dmats0[31][19] + coeff0_32*dmats0[32][19] + coeff0_33*dmats0[33][19] + coeff0_34*dmats0[34][19];
          new_coeff0_20 = coeff0_0*dmats0[0][20] + coeff0_1*dmats0[1][20] + coeff0_2*dmats0[2][20] + coeff0_3*dmats0[3][20] + coeff0_4*dmats0[4][20] + coeff0_5*dmats0[5][20] + coeff0_6*dmats0[6][20] + coeff0_7*dmats0[7][20] + coeff0_8*dmats0[8][20] + coeff0_9*dmats0[9][20] + coeff0_10*dmats0[10][20] + coeff0_11*dmats0[11][20] + coeff0_12*dmats0[12][20] + coeff0_13*dmats0[13][20] + coeff0_14*dmats0[14][20] + coeff0_15*dmats0[15][20] + coeff0_16*dmats0[16][20] + coeff0_17*dmats0[17][20] + coeff0_18*dmats0[18][20] + coeff0_19*dmats0[19][20] + coeff0_20*dmats0[20][20] + coeff0_21*dmats0[21][20] + coeff0_22*dmats0[22][20] + coeff0_23*dmats0[23][20] + coeff0_24*dmats0[24][20] + coeff0_25*dmats0[25][20] + coeff0_26*dmats0[26][20] + coeff0_27*dmats0[27][20] + coeff0_28*dmats0[28][20] + coeff0_29*dmats0[29][20] + coeff0_30*dmats0[30][20] + coeff0_31*dmats0[31][20] + coeff0_32*dmats0[32][20] + coeff0_33*dmats0[33][20] + coeff0_34*dmats0[34][20];
          new_coeff0_21 = coeff0_0*dmats0[0][21] + coeff0_1*dmats0[1][21] + coeff0_2*dmats0[2][21] + coeff0_3*dmats0[3][21] + coeff0_4*dmats0[4][21] + coeff0_5*dmats0[5][21] + coeff0_6*dmats0[6][21] + coeff0_7*dmats0[7][21] + coeff0_8*dmats0[8][21] + coeff0_9*dmats0[9][21] + coeff0_10*dmats0[10][21] + coeff0_11*dmats0[11][21] + coeff0_12*dmats0[12][21] + coeff0_13*dmats0[13][21] + coeff0_14*dmats0[14][21] + coeff0_15*dmats0[15][21] + coeff0_16*dmats0[16][21] + coeff0_17*dmats0[17][21] + coeff0_18*dmats0[18][21] + coeff0_19*dmats0[19][21] + coeff0_20*dmats0[20][21] + coeff0_21*dmats0[21][21] + coeff0_22*dmats0[22][21] + coeff0_23*dmats0[23][21] + coeff0_24*dmats0[24][21] + coeff0_25*dmats0[25][21] + coeff0_26*dmats0[26][21] + coeff0_27*dmats0[27][21] + coeff0_28*dmats0[28][21] + coeff0_29*dmats0[29][21] + coeff0_30*dmats0[30][21] + coeff0_31*dmats0[31][21] + coeff0_32*dmats0[32][21] + coeff0_33*dmats0[33][21] + coeff0_34*dmats0[34][21];
          new_coeff0_22 = coeff0_0*dmats0[0][22] + coeff0_1*dmats0[1][22] + coeff0_2*dmats0[2][22] + coeff0_3*dmats0[3][22] + coeff0_4*dmats0[4][22] + coeff0_5*dmats0[5][22] + coeff0_6*dmats0[6][22] + coeff0_7*dmats0[7][22] + coeff0_8*dmats0[8][22] + coeff0_9*dmats0[9][22] + coeff0_10*dmats0[10][22] + coeff0_11*dmats0[11][22] + coeff0_12*dmats0[12][22] + coeff0_13*dmats0[13][22] + coeff0_14*dmats0[14][22] + coeff0_15*dmats0[15][22] + coeff0_16*dmats0[16][22] + coeff0_17*dmats0[17][22] + coeff0_18*dmats0[18][22] + coeff0_19*dmats0[19][22] + coeff0_20*dmats0[20][22] + coeff0_21*dmats0[21][22] + coeff0_22*dmats0[22][22] + coeff0_23*dmats0[23][22] + coeff0_24*dmats0[24][22] + coeff0_25*dmats0[25][22] + coeff0_26*dmats0[26][22] + coeff0_27*dmats0[27][22] + coeff0_28*dmats0[28][22] + coeff0_29*dmats0[29][22] + coeff0_30*dmats0[30][22] + coeff0_31*dmats0[31][22] + coeff0_32*dmats0[32][22] + coeff0_33*dmats0[33][22] + coeff0_34*dmats0[34][22];
          new_coeff0_23 = coeff0_0*dmats0[0][23] + coeff0_1*dmats0[1][23] + coeff0_2*dmats0[2][23] + coeff0_3*dmats0[3][23] + coeff0_4*dmats0[4][23] + coeff0_5*dmats0[5][23] + coeff0_6*dmats0[6][23] + coeff0_7*dmats0[7][23] + coeff0_8*dmats0[8][23] + coeff0_9*dmats0[9][23] + coeff0_10*dmats0[10][23] + coeff0_11*dmats0[11][23] + coeff0_12*dmats0[12][23] + coeff0_13*dmats0[13][23] + coeff0_14*dmats0[14][23] + coeff0_15*dmats0[15][23] + coeff0_16*dmats0[16][23] + coeff0_17*dmats0[17][23] + coeff0_18*dmats0[18][23] + coeff0_19*dmats0[19][23] + coeff0_20*dmats0[20][23] + coeff0_21*dmats0[21][23] + coeff0_22*dmats0[22][23] + coeff0_23*dmats0[23][23] + coeff0_24*dmats0[24][23] + coeff0_25*dmats0[25][23] + coeff0_26*dmats0[26][23] + coeff0_27*dmats0[27][23] + coeff0_28*dmats0[28][23] + coeff0_29*dmats0[29][23] + coeff0_30*dmats0[30][23] + coeff0_31*dmats0[31][23] + coeff0_32*dmats0[32][23] + coeff0_33*dmats0[33][23] + coeff0_34*dmats0[34][23];
          new_coeff0_24 = coeff0_0*dmats0[0][24] + coeff0_1*dmats0[1][24] + coeff0_2*dmats0[2][24] + coeff0_3*dmats0[3][24] + coeff0_4*dmats0[4][24] + coeff0_5*dmats0[5][24] + coeff0_6*dmats0[6][24] + coeff0_7*dmats0[7][24] + coeff0_8*dmats0[8][24] + coeff0_9*dmats0[9][24] + coeff0_10*dmats0[10][24] + coeff0_11*dmats0[11][24] + coeff0_12*dmats0[12][24] + coeff0_13*dmats0[13][24] + coeff0_14*dmats0[14][24] + coeff0_15*dmats0[15][24] + coeff0_16*dmats0[16][24] + coeff0_17*dmats0[17][24] + coeff0_18*dmats0[18][24] + coeff0_19*dmats0[19][24] + coeff0_20*dmats0[20][24] + coeff0_21*dmats0[21][24] + coeff0_22*dmats0[22][24] + coeff0_23*dmats0[23][24] + coeff0_24*dmats0[24][24] + coeff0_25*dmats0[25][24] + coeff0_26*dmats0[26][24] + coeff0_27*dmats0[27][24] + coeff0_28*dmats0[28][24] + coeff0_29*dmats0[29][24] + coeff0_30*dmats0[30][24] + coeff0_31*dmats0[31][24] + coeff0_32*dmats0[32][24] + coeff0_33*dmats0[33][24] + coeff0_34*dmats0[34][24];
          new_coeff0_25 = coeff0_0*dmats0[0][25] + coeff0_1*dmats0[1][25] + coeff0_2*dmats0[2][25] + coeff0_3*dmats0[3][25] + coeff0_4*dmats0[4][25] + coeff0_5*dmats0[5][25] + coeff0_6*dmats0[6][25] + coeff0_7*dmats0[7][25] + coeff0_8*dmats0[8][25] + coeff0_9*dmats0[9][25] + coeff0_10*dmats0[10][25] + coeff0_11*dmats0[11][25] + coeff0_12*dmats0[12][25] + coeff0_13*dmats0[13][25] + coeff0_14*dmats0[14][25] + coeff0_15*dmats0[15][25] + coeff0_16*dmats0[16][25] + coeff0_17*dmats0[17][25] + coeff0_18*dmats0[18][25] + coeff0_19*dmats0[19][25] + coeff0_20*dmats0[20][25] + coeff0_21*dmats0[21][25] + coeff0_22*dmats0[22][25] + coeff0_23*dmats0[23][25] + coeff0_24*dmats0[24][25] + coeff0_25*dmats0[25][25] + coeff0_26*dmats0[26][25] + coeff0_27*dmats0[27][25] + coeff0_28*dmats0[28][25] + coeff0_29*dmats0[29][25] + coeff0_30*dmats0[30][25] + coeff0_31*dmats0[31][25] + coeff0_32*dmats0[32][25] + coeff0_33*dmats0[33][25] + coeff0_34*dmats0[34][25];
          new_coeff0_26 = coeff0_0*dmats0[0][26] + coeff0_1*dmats0[1][26] + coeff0_2*dmats0[2][26] + coeff0_3*dmats0[3][26] + coeff0_4*dmats0[4][26] + coeff0_5*dmats0[5][26] + coeff0_6*dmats0[6][26] + coeff0_7*dmats0[7][26] + coeff0_8*dmats0[8][26] + coeff0_9*dmats0[9][26] + coeff0_10*dmats0[10][26] + coeff0_11*dmats0[11][26] + coeff0_12*dmats0[12][26] + coeff0_13*dmats0[13][26] + coeff0_14*dmats0[14][26] + coeff0_15*dmats0[15][26] + coeff0_16*dmats0[16][26] + coeff0_17*dmats0[17][26] + coeff0_18*dmats0[18][26] + coeff0_19*dmats0[19][26] + coeff0_20*dmats0[20][26] + coeff0_21*dmats0[21][26] + coeff0_22*dmats0[22][26] + coeff0_23*dmats0[23][26] + coeff0_24*dmats0[24][26] + coeff0_25*dmats0[25][26] + coeff0_26*dmats0[26][26] + coeff0_27*dmats0[27][26] + coeff0_28*dmats0[28][26] + coeff0_29*dmats0[29][26] + coeff0_30*dmats0[30][26] + coeff0_31*dmats0[31][26] + coeff0_32*dmats0[32][26] + coeff0_33*dmats0[33][26] + coeff0_34*dmats0[34][26];
          new_coeff0_27 = coeff0_0*dmats0[0][27] + coeff0_1*dmats0[1][27] + coeff0_2*dmats0[2][27] + coeff0_3*dmats0[3][27] + coeff0_4*dmats0[4][27] + coeff0_5*dmats0[5][27] + coeff0_6*dmats0[6][27] + coeff0_7*dmats0[7][27] + coeff0_8*dmats0[8][27] + coeff0_9*dmats0[9][27] + coeff0_10*dmats0[10][27] + coeff0_11*dmats0[11][27] + coeff0_12*dmats0[12][27] + coeff0_13*dmats0[13][27] + coeff0_14*dmats0[14][27] + coeff0_15*dmats0[15][27] + coeff0_16*dmats0[16][27] + coeff0_17*dmats0[17][27] + coeff0_18*dmats0[18][27] + coeff0_19*dmats0[19][27] + coeff0_20*dmats0[20][27] + coeff0_21*dmats0[21][27] + coeff0_22*dmats0[22][27] + coeff0_23*dmats0[23][27] + coeff0_24*dmats0[24][27] + coeff0_25*dmats0[25][27] + coeff0_26*dmats0[26][27] + coeff0_27*dmats0[27][27] + coeff0_28*dmats0[28][27] + coeff0_29*dmats0[29][27] + coeff0_30*dmats0[30][27] + coeff0_31*dmats0[31][27] + coeff0_32*dmats0[32][27] + coeff0_33*dmats0[33][27] + coeff0_34*dmats0[34][27];
          new_coeff0_28 = coeff0_0*dmats0[0][28] + coeff0_1*dmats0[1][28] + coeff0_2*dmats0[2][28] + coeff0_3*dmats0[3][28] + coeff0_4*dmats0[4][28] + coeff0_5*dmats0[5][28] + coeff0_6*dmats0[6][28] + coeff0_7*dmats0[7][28] + coeff0_8*dmats0[8][28] + coeff0_9*dmats0[9][28] + coeff0_10*dmats0[10][28] + coeff0_11*dmats0[11][28] + coeff0_12*dmats0[12][28] + coeff0_13*dmats0[13][28] + coeff0_14*dmats0[14][28] + coeff0_15*dmats0[15][28] + coeff0_16*dmats0[16][28] + coeff0_17*dmats0[17][28] + coeff0_18*dmats0[18][28] + coeff0_19*dmats0[19][28] + coeff0_20*dmats0[20][28] + coeff0_21*dmats0[21][28] + coeff0_22*dmats0[22][28] + coeff0_23*dmats0[23][28] + coeff0_24*dmats0[24][28] + coeff0_25*dmats0[25][28] + coeff0_26*dmats0[26][28] + coeff0_27*dmats0[27][28] + coeff0_28*dmats0[28][28] + coeff0_29*dmats0[29][28] + coeff0_30*dmats0[30][28] + coeff0_31*dmats0[31][28] + coeff0_32*dmats0[32][28] + coeff0_33*dmats0[33][28] + coeff0_34*dmats0[34][28];
          new_coeff0_29 = coeff0_0*dmats0[0][29] + coeff0_1*dmats0[1][29] + coeff0_2*dmats0[2][29] + coeff0_3*dmats0[3][29] + coeff0_4*dmats0[4][29] + coeff0_5*dmats0[5][29] + coeff0_6*dmats0[6][29] + coeff0_7*dmats0[7][29] + coeff0_8*dmats0[8][29] + coeff0_9*dmats0[9][29] + coeff0_10*dmats0[10][29] + coeff0_11*dmats0[11][29] + coeff0_12*dmats0[12][29] + coeff0_13*dmats0[13][29] + coeff0_14*dmats0[14][29] + coeff0_15*dmats0[15][29] + coeff0_16*dmats0[16][29] + coeff0_17*dmats0[17][29] + coeff0_18*dmats0[18][29] + coeff0_19*dmats0[19][29] + coeff0_20*dmats0[20][29] + coeff0_21*dmats0[21][29] + coeff0_22*dmats0[22][29] + coeff0_23*dmats0[23][29] + coeff0_24*dmats0[24][29] + coeff0_25*dmats0[25][29] + coeff0_26*dmats0[26][29] + coeff0_27*dmats0[27][29] + coeff0_28*dmats0[28][29] + coeff0_29*dmats0[29][29] + coeff0_30*dmats0[30][29] + coeff0_31*dmats0[31][29] + coeff0_32*dmats0[32][29] + coeff0_33*dmats0[33][29] + coeff0_34*dmats0[34][29];
          new_coeff0_30 = coeff0_0*dmats0[0][30] + coeff0_1*dmats0[1][30] + coeff0_2*dmats0[2][30] + coeff0_3*dmats0[3][30] + coeff0_4*dmats0[4][30] + coeff0_5*dmats0[5][30] + coeff0_6*dmats0[6][30] + coeff0_7*dmats0[7][30] + coeff0_8*dmats0[8][30] + coeff0_9*dmats0[9][30] + coeff0_10*dmats0[10][30] + coeff0_11*dmats0[11][30] + coeff0_12*dmats0[12][30] + coeff0_13*dmats0[13][30] + coeff0_14*dmats0[14][30] + coeff0_15*dmats0[15][30] + coeff0_16*dmats0[16][30] + coeff0_17*dmats0[17][30] + coeff0_18*dmats0[18][30] + coeff0_19*dmats0[19][30] + coeff0_20*dmats0[20][30] + coeff0_21*dmats0[21][30] + coeff0_22*dmats0[22][30] + coeff0_23*dmats0[23][30] + coeff0_24*dmats0[24][30] + coeff0_25*dmats0[25][30] + coeff0_26*dmats0[26][30] + coeff0_27*dmats0[27][30] + coeff0_28*dmats0[28][30] + coeff0_29*dmats0[29][30] + coeff0_30*dmats0[30][30] + coeff0_31*dmats0[31][30] + coeff0_32*dmats0[32][30] + coeff0_33*dmats0[33][30] + coeff0_34*dmats0[34][30];
          new_coeff0_31 = coeff0_0*dmats0[0][31] + coeff0_1*dmats0[1][31] + coeff0_2*dmats0[2][31] + coeff0_3*dmats0[3][31] + coeff0_4*dmats0[4][31] + coeff0_5*dmats0[5][31] + coeff0_6*dmats0[6][31] + coeff0_7*dmats0[7][31] + coeff0_8*dmats0[8][31] + coeff0_9*dmats0[9][31] + coeff0_10*dmats0[10][31] + coeff0_11*dmats0[11][31] + coeff0_12*dmats0[12][31] + coeff0_13*dmats0[13][31] + coeff0_14*dmats0[14][31] + coeff0_15*dmats0[15][31] + coeff0_16*dmats0[16][31] + coeff0_17*dmats0[17][31] + coeff0_18*dmats0[18][31] + coeff0_19*dmats0[19][31] + coeff0_20*dmats0[20][31] + coeff0_21*dmats0[21][31] + coeff0_22*dmats0[22][31] + coeff0_23*dmats0[23][31] + coeff0_24*dmats0[24][31] + coeff0_25*dmats0[25][31] + coeff0_26*dmats0[26][31] + coeff0_27*dmats0[27][31] + coeff0_28*dmats0[28][31] + coeff0_29*dmats0[29][31] + coeff0_30*dmats0[30][31] + coeff0_31*dmats0[31][31] + coeff0_32*dmats0[32][31] + coeff0_33*dmats0[33][31] + coeff0_34*dmats0[34][31];
          new_coeff0_32 = coeff0_0*dmats0[0][32] + coeff0_1*dmats0[1][32] + coeff0_2*dmats0[2][32] + coeff0_3*dmats0[3][32] + coeff0_4*dmats0[4][32] + coeff0_5*dmats0[5][32] + coeff0_6*dmats0[6][32] + coeff0_7*dmats0[7][32] + coeff0_8*dmats0[8][32] + coeff0_9*dmats0[9][32] + coeff0_10*dmats0[10][32] + coeff0_11*dmats0[11][32] + coeff0_12*dmats0[12][32] + coeff0_13*dmats0[13][32] + coeff0_14*dmats0[14][32] + coeff0_15*dmats0[15][32] + coeff0_16*dmats0[16][32] + coeff0_17*dmats0[17][32] + coeff0_18*dmats0[18][32] + coeff0_19*dmats0[19][32] + coeff0_20*dmats0[20][32] + coeff0_21*dmats0[21][32] + coeff0_22*dmats0[22][32] + coeff0_23*dmats0[23][32] + coeff0_24*dmats0[24][32] + coeff0_25*dmats0[25][32] + coeff0_26*dmats0[26][32] + coeff0_27*dmats0[27][32] + coeff0_28*dmats0[28][32] + coeff0_29*dmats0[29][32] + coeff0_30*dmats0[30][32] + coeff0_31*dmats0[31][32] + coeff0_32*dmats0[32][32] + coeff0_33*dmats0[33][32] + coeff0_34*dmats0[34][32];
          new_coeff0_33 = coeff0_0*dmats0[0][33] + coeff0_1*dmats0[1][33] + coeff0_2*dmats0[2][33] + coeff0_3*dmats0[3][33] + coeff0_4*dmats0[4][33] + coeff0_5*dmats0[5][33] + coeff0_6*dmats0[6][33] + coeff0_7*dmats0[7][33] + coeff0_8*dmats0[8][33] + coeff0_9*dmats0[9][33] + coeff0_10*dmats0[10][33] + coeff0_11*dmats0[11][33] + coeff0_12*dmats0[12][33] + coeff0_13*dmats0[13][33] + coeff0_14*dmats0[14][33] + coeff0_15*dmats0[15][33] + coeff0_16*dmats0[16][33] + coeff0_17*dmats0[17][33] + coeff0_18*dmats0[18][33] + coeff0_19*dmats0[19][33] + coeff0_20*dmats0[20][33] + coeff0_21*dmats0[21][33] + coeff0_22*dmats0[22][33] + coeff0_23*dmats0[23][33] + coeff0_24*dmats0[24][33] + coeff0_25*dmats0[25][33] + coeff0_26*dmats0[26][33] + coeff0_27*dmats0[27][33] + coeff0_28*dmats0[28][33] + coeff0_29*dmats0[29][33] + coeff0_30*dmats0[30][33] + coeff0_31*dmats0[31][33] + coeff0_32*dmats0[32][33] + coeff0_33*dmats0[33][33] + coeff0_34*dmats0[34][33];
          new_coeff0_34 = coeff0_0*dmats0[0][34] + coeff0_1*dmats0[1][34] + coeff0_2*dmats0[2][34] + coeff0_3*dmats0[3][34] + coeff0_4*dmats0[4][34] + coeff0_5*dmats0[5][34] + coeff0_6*dmats0[6][34] + coeff0_7*dmats0[7][34] + coeff0_8*dmats0[8][34] + coeff0_9*dmats0[9][34] + coeff0_10*dmats0[10][34] + coeff0_11*dmats0[11][34] + coeff0_12*dmats0[12][34] + coeff0_13*dmats0[13][34] + coeff0_14*dmats0[14][34] + coeff0_15*dmats0[15][34] + coeff0_16*dmats0[16][34] + coeff0_17*dmats0[17][34] + coeff0_18*dmats0[18][34] + coeff0_19*dmats0[19][34] + coeff0_20*dmats0[20][34] + coeff0_21*dmats0[21][34] + coeff0_22*dmats0[22][34] + coeff0_23*dmats0[23][34] + coeff0_24*dmats0[24][34] + coeff0_25*dmats0[25][34] + coeff0_26*dmats0[26][34] + coeff0_27*dmats0[27][34] + coeff0_28*dmats0[28][34] + coeff0_29*dmats0[29][34] + coeff0_30*dmats0[30][34] + coeff0_31*dmats0[31][34] + coeff0_32*dmats0[32][34] + coeff0_33*dmats0[33][34] + coeff0_34*dmats0[34][34];
        }
        if(combinations[deriv_num][j] == 1)
        {
          new_coeff0_0 = coeff0_0*dmats1[0][0] + coeff0_1*dmats1[1][0] + coeff0_2*dmats1[2][0] + coeff0_3*dmats1[3][0] + coeff0_4*dmats1[4][0] + coeff0_5*dmats1[5][0] + coeff0_6*dmats1[6][0] + coeff0_7*dmats1[7][0] + coeff0_8*dmats1[8][0] + coeff0_9*dmats1[9][0] + coeff0_10*dmats1[10][0] + coeff0_11*dmats1[11][0] + coeff0_12*dmats1[12][0] + coeff0_13*dmats1[13][0] + coeff0_14*dmats1[14][0] + coeff0_15*dmats1[15][0] + coeff0_16*dmats1[16][0] + coeff0_17*dmats1[17][0] + coeff0_18*dmats1[18][0] + coeff0_19*dmats1[19][0] + coeff0_20*dmats1[20][0] + coeff0_21*dmats1[21][0] + coeff0_22*dmats1[22][0] + coeff0_23*dmats1[23][0] + coeff0_24*dmats1[24][0] + coeff0_25*dmats1[25][0] + coeff0_26*dmats1[26][0] + coeff0_27*dmats1[27][0] + coeff0_28*dmats1[28][0] + coeff0_29*dmats1[29][0] + coeff0_30*dmats1[30][0] + coeff0_31*dmats1[31][0] + coeff0_32*dmats1[32][0] + coeff0_33*dmats1[33][0] + coeff0_34*dmats1[34][0];
          new_coeff0_1 = coeff0_0*dmats1[0][1] + coeff0_1*dmats1[1][1] + coeff0_2*dmats1[2][1] + coeff0_3*dmats1[3][1] + coeff0_4*dmats1[4][1] + coeff0_5*dmats1[5][1] + coeff0_6*dmats1[6][1] + coeff0_7*dmats1[7][1] + coeff0_8*dmats1[8][1] + coeff0_9*dmats1[9][1] + coeff0_10*dmats1[10][1] + coeff0_11*dmats1[11][1] + coeff0_12*dmats1[12][1] + coeff0_13*dmats1[13][1] + coeff0_14*dmats1[14][1] + coeff0_15*dmats1[15][1] + coeff0_16*dmats1[16][1] + coeff0_17*dmats1[17][1] + coeff0_18*dmats1[18][1] + coeff0_19*dmats1[19][1] + coeff0_20*dmats1[20][1] + coeff0_21*dmats1[21][1] + coeff0_22*dmats1[22][1] + coeff0_23*dmats1[23][1] + coeff0_24*dmats1[24][1] + coeff0_25*dmats1[25][1] + coeff0_26*dmats1[26][1] + coeff0_27*dmats1[27][1] + coeff0_28*dmats1[28][1] + coeff0_29*dmats1[29][1] + coeff0_30*dmats1[30][1] + coeff0_31*dmats1[31][1] + coeff0_32*dmats1[32][1] + coeff0_33*dmats1[33][1] + coeff0_34*dmats1[34][1];
          new_coeff0_2 = coeff0_0*dmats1[0][2] + coeff0_1*dmats1[1][2] + coeff0_2*dmats1[2][2] + coeff0_3*dmats1[3][2] + coeff0_4*dmats1[4][2] + coeff0_5*dmats1[5][2] + coeff0_6*dmats1[6][2] + coeff0_7*dmats1[7][2] + coeff0_8*dmats1[8][2] + coeff0_9*dmats1[9][2] + coeff0_10*dmats1[10][2] + coeff0_11*dmats1[11][2] + coeff0_12*dmats1[12][2] + coeff0_13*dmats1[13][2] + coeff0_14*dmats1[14][2] + coeff0_15*dmats1[15][2] + coeff0_16*dmats1[16][2] + coeff0_17*dmats1[17][2] + coeff0_18*dmats1[18][2] + coeff0_19*dmats1[19][2] + coeff0_20*dmats1[20][2] + coeff0_21*dmats1[21][2] + coeff0_22*dmats1[22][2] + coeff0_23*dmats1[23][2] + coeff0_24*dmats1[24][2] + coeff0_25*dmats1[25][2] + coeff0_26*dmats1[26][2] + coeff0_27*dmats1[27][2] + coeff0_28*dmats1[28][2] + coeff0_29*dmats1[29][2] + coeff0_30*dmats1[30][2] + coeff0_31*dmats1[31][2] + coeff0_32*dmats1[32][2] + coeff0_33*dmats1[33][2] + coeff0_34*dmats1[34][2];
          new_coeff0_3 = coeff0_0*dmats1[0][3] + coeff0_1*dmats1[1][3] + coeff0_2*dmats1[2][3] + coeff0_3*dmats1[3][3] + coeff0_4*dmats1[4][3] + coeff0_5*dmats1[5][3] + coeff0_6*dmats1[6][3] + coeff0_7*dmats1[7][3] + coeff0_8*dmats1[8][3] + coeff0_9*dmats1[9][3] + coeff0_10*dmats1[10][3] + coeff0_11*dmats1[11][3] + coeff0_12*dmats1[12][3] + coeff0_13*dmats1[13][3] + coeff0_14*dmats1[14][3] + coeff0_15*dmats1[15][3] + coeff0_16*dmats1[16][3] + coeff0_17*dmats1[17][3] + coeff0_18*dmats1[18][3] + coeff0_19*dmats1[19][3] + coeff0_20*dmats1[20][3] + coeff0_21*dmats1[21][3] + coeff0_22*dmats1[22][3] + coeff0_23*dmats1[23][3] + coeff0_24*dmats1[24][3] + coeff0_25*dmats1[25][3] + coeff0_26*dmats1[26][3] + coeff0_27*dmats1[27][3] + coeff0_28*dmats1[28][3] + coeff0_29*dmats1[29][3] + coeff0_30*dmats1[30][3] + coeff0_31*dmats1[31][3] + coeff0_32*dmats1[32][3] + coeff0_33*dmats1[33][3] + coeff0_34*dmats1[34][3];
          new_coeff0_4 = coeff0_0*dmats1[0][4] + coeff0_1*dmats1[1][4] + coeff0_2*dmats1[2][4] + coeff0_3*dmats1[3][4] + coeff0_4*dmats1[4][4] + coeff0_5*dmats1[5][4] + coeff0_6*dmats1[6][4] + coeff0_7*dmats1[7][4] + coeff0_8*dmats1[8][4] + coeff0_9*dmats1[9][4] + coeff0_10*dmats1[10][4] + coeff0_11*dmats1[11][4] + coeff0_12*dmats1[12][4] + coeff0_13*dmats1[13][4] + coeff0_14*dmats1[14][4] + coeff0_15*dmats1[15][4] + coeff0_16*dmats1[16][4] + coeff0_17*dmats1[17][4] + coeff0_18*dmats1[18][4] + coeff0_19*dmats1[19][4] + coeff0_20*dmats1[20][4] + coeff0_21*dmats1[21][4] + coeff0_22*dmats1[22][4] + coeff0_23*dmats1[23][4] + coeff0_24*dmats1[24][4] + coeff0_25*dmats1[25][4] + coeff0_26*dmats1[26][4] + coeff0_27*dmats1[27][4] + coeff0_28*dmats1[28][4] + coeff0_29*dmats1[29][4] + coeff0_30*dmats1[30][4] + coeff0_31*dmats1[31][4] + coeff0_32*dmats1[32][4] + coeff0_33*dmats1[33][4] + coeff0_34*dmats1[34][4];
          new_coeff0_5 = coeff0_0*dmats1[0][5] + coeff0_1*dmats1[1][5] + coeff0_2*dmats1[2][5] + coeff0_3*dmats1[3][5] + coeff0_4*dmats1[4][5] + coeff0_5*dmats1[5][5] + coeff0_6*dmats1[6][5] + coeff0_7*dmats1[7][5] + coeff0_8*dmats1[8][5] + coeff0_9*dmats1[9][5] + coeff0_10*dmats1[10][5] + coeff0_11*dmats1[11][5] + coeff0_12*dmats1[12][5] + coeff0_13*dmats1[13][5] + coeff0_14*dmats1[14][5] + coeff0_15*dmats1[15][5] + coeff0_16*dmats1[16][5] + coeff0_17*dmats1[17][5] + coeff0_18*dmats1[18][5] + coeff0_19*dmats1[19][5] + coeff0_20*dmats1[20][5] + coeff0_21*dmats1[21][5] + coeff0_22*dmats1[22][5] + coeff0_23*dmats1[23][5] + coeff0_24*dmats1[24][5] + coeff0_25*dmats1[25][5] + coeff0_26*dmats1[26][5] + coeff0_27*dmats1[27][5] + coeff0_28*dmats1[28][5] + coeff0_29*dmats1[29][5] + coeff0_30*dmats1[30][5] + coeff0_31*dmats1[31][5] + coeff0_32*dmats1[32][5] + coeff0_33*dmats1[33][5] + coeff0_34*dmats1[34][5];
          new_coeff0_6 = coeff0_0*dmats1[0][6] + coeff0_1*dmats1[1][6] + coeff0_2*dmats1[2][6] + coeff0_3*dmats1[3][6] + coeff0_4*dmats1[4][6] + coeff0_5*dmats1[5][6] + coeff0_6*dmats1[6][6] + coeff0_7*dmats1[7][6] + coeff0_8*dmats1[8][6] + coeff0_9*dmats1[9][6] + coeff0_10*dmats1[10][6] + coeff0_11*dmats1[11][6] + coeff0_12*dmats1[12][6] + coeff0_13*dmats1[13][6] + coeff0_14*dmats1[14][6] + coeff0_15*dmats1[15][6] + coeff0_16*dmats1[16][6] + coeff0_17*dmats1[17][6] + coeff0_18*dmats1[18][6] + coeff0_19*dmats1[19][6] + coeff0_20*dmats1[20][6] + coeff0_21*dmats1[21][6] + coeff0_22*dmats1[22][6] + coeff0_23*dmats1[23][6] + coeff0_24*dmats1[24][6] + coeff0_25*dmats1[25][6] + coeff0_26*dmats1[26][6] + coeff0_27*dmats1[27][6] + coeff0_28*dmats1[28][6] + coeff0_29*dmats1[29][6] + coeff0_30*dmats1[30][6] + coeff0_31*dmats1[31][6] + coeff0_32*dmats1[32][6] + coeff0_33*dmats1[33][6] + coeff0_34*dmats1[34][6];
          new_coeff0_7 = coeff0_0*dmats1[0][7] + coeff0_1*dmats1[1][7] + coeff0_2*dmats1[2][7] + coeff0_3*dmats1[3][7] + coeff0_4*dmats1[4][7] + coeff0_5*dmats1[5][7] + coeff0_6*dmats1[6][7] + coeff0_7*dmats1[7][7] + coeff0_8*dmats1[8][7] + coeff0_9*dmats1[9][7] + coeff0_10*dmats1[10][7] + coeff0_11*dmats1[11][7] + coeff0_12*dmats1[12][7] + coeff0_13*dmats1[13][7] + coeff0_14*dmats1[14][7] + coeff0_15*dmats1[15][7] + coeff0_16*dmats1[16][7] + coeff0_17*dmats1[17][7] + coeff0_18*dmats1[18][7] + coeff0_19*dmats1[19][7] + coeff0_20*dmats1[20][7] + coeff0_21*dmats1[21][7] + coeff0_22*dmats1[22][7] + coeff0_23*dmats1[23][7] + coeff0_24*dmats1[24][7] + coeff0_25*dmats1[25][7] + coeff0_26*dmats1[26][7] + coeff0_27*dmats1[27][7] + coeff0_28*dmats1[28][7] + coeff0_29*dmats1[29][7] + coeff0_30*dmats1[30][7] + coeff0_31*dmats1[31][7] + coeff0_32*dmats1[32][7] + coeff0_33*dmats1[33][7] + coeff0_34*dmats1[34][7];
          new_coeff0_8 = coeff0_0*dmats1[0][8] + coeff0_1*dmats1[1][8] + coeff0_2*dmats1[2][8] + coeff0_3*dmats1[3][8] + coeff0_4*dmats1[4][8] + coeff0_5*dmats1[5][8] + coeff0_6*dmats1[6][8] + coeff0_7*dmats1[7][8] + coeff0_8*dmats1[8][8] + coeff0_9*dmats1[9][8] + coeff0_10*dmats1[10][8] + coeff0_11*dmats1[11][8] + coeff0_12*dmats1[12][8] + coeff0_13*dmats1[13][8] + coeff0_14*dmats1[14][8] + coeff0_15*dmats1[15][8] + coeff0_16*dmats1[16][8] + coeff0_17*dmats1[17][8] + coeff0_18*dmats1[18][8] + coeff0_19*dmats1[19][8] + coeff0_20*dmats1[20][8] + coeff0_21*dmats1[21][8] + coeff0_22*dmats1[22][8] + coeff0_23*dmats1[23][8] + coeff0_24*dmats1[24][8] + coeff0_25*dmats1[25][8] + coeff0_26*dmats1[26][8] + coeff0_27*dmats1[27][8] + coeff0_28*dmats1[28][8] + coeff0_29*dmats1[29][8] + coeff0_30*dmats1[30][8] + coeff0_31*dmats1[31][8] + coeff0_32*dmats1[32][8] + coeff0_33*dmats1[33][8] + coeff0_34*dmats1[34][8];
          new_coeff0_9 = coeff0_0*dmats1[0][9] + coeff0_1*dmats1[1][9] + coeff0_2*dmats1[2][9] + coeff0_3*dmats1[3][9] + coeff0_4*dmats1[4][9] + coeff0_5*dmats1[5][9] + coeff0_6*dmats1[6][9] + coeff0_7*dmats1[7][9] + coeff0_8*dmats1[8][9] + coeff0_9*dmats1[9][9] + coeff0_10*dmats1[10][9] + coeff0_11*dmats1[11][9] + coeff0_12*dmats1[12][9] + coeff0_13*dmats1[13][9] + coeff0_14*dmats1[14][9] + coeff0_15*dmats1[15][9] + coeff0_16*dmats1[16][9] + coeff0_17*dmats1[17][9] + coeff0_18*dmats1[18][9] + coeff0_19*dmats1[19][9] + coeff0_20*dmats1[20][9] + coeff0_21*dmats1[21][9] + coeff0_22*dmats1[22][9] + coeff0_23*dmats1[23][9] + coeff0_24*dmats1[24][9] + coeff0_25*dmats1[25][9] + coeff0_26*dmats1[26][9] + coeff0_27*dmats1[27][9] + coeff0_28*dmats1[28][9] + coeff0_29*dmats1[29][9] + coeff0_30*dmats1[30][9] + coeff0_31*dmats1[31][9] + coeff0_32*dmats1[32][9] + coeff0_33*dmats1[33][9] + coeff0_34*dmats1[34][9];
          new_coeff0_10 = coeff0_0*dmats1[0][10] + coeff0_1*dmats1[1][10] + coeff0_2*dmats1[2][10] + coeff0_3*dmats1[3][10] + coeff0_4*dmats1[4][10] + coeff0_5*dmats1[5][10] + coeff0_6*dmats1[6][10] + coeff0_7*dmats1[7][10] + coeff0_8*dmats1[8][10] + coeff0_9*dmats1[9][10] + coeff0_10*dmats1[10][10] + coeff0_11*dmats1[11][10] + coeff0_12*dmats1[12][10] + coeff0_13*dmats1[13][10] + coeff0_14*dmats1[14][10] + coeff0_15*dmats1[15][10] + coeff0_16*dmats1[16][10] + coeff0_17*dmats1[17][10] + coeff0_18*dmats1[18][10] + coeff0_19*dmats1[19][10] + coeff0_20*dmats1[20][10] + coeff0_21*dmats1[21][10] + coeff0_22*dmats1[22][10] + coeff0_23*dmats1[23][10] + coeff0_24*dmats1[24][10] + coeff0_25*dmats1[25][10] + coeff0_26*dmats1[26][10] + coeff0_27*dmats1[27][10] + coeff0_28*dmats1[28][10] + coeff0_29*dmats1[29][10] + coeff0_30*dmats1[30][10] + coeff0_31*dmats1[31][10] + coeff0_32*dmats1[32][10] + coeff0_33*dmats1[33][10] + coeff0_34*dmats1[34][10];
          new_coeff0_11 = coeff0_0*dmats1[0][11] + coeff0_1*dmats1[1][11] + coeff0_2*dmats1[2][11] + coeff0_3*dmats1[3][11] + coeff0_4*dmats1[4][11] + coeff0_5*dmats1[5][11] + coeff0_6*dmats1[6][11] + coeff0_7*dmats1[7][11] + coeff0_8*dmats1[8][11] + coeff0_9*dmats1[9][11] + coeff0_10*dmats1[10][11] + coeff0_11*dmats1[11][11] + coeff0_12*dmats1[12][11] + coeff0_13*dmats1[13][11] + coeff0_14*dmats1[14][11] + coeff0_15*dmats1[15][11] + coeff0_16*dmats1[16][11] + coeff0_17*dmats1[17][11] + coeff0_18*dmats1[18][11] + coeff0_19*dmats1[19][11] + coeff0_20*dmats1[20][11] + coeff0_21*dmats1[21][11] + coeff0_22*dmats1[22][11] + coeff0_23*dmats1[23][11] + coeff0_24*dmats1[24][11] + coeff0_25*dmats1[25][11] + coeff0_26*dmats1[26][11] + coeff0_27*dmats1[27][11] + coeff0_28*dmats1[28][11] + coeff0_29*dmats1[29][11] + coeff0_30*dmats1[30][11] + coeff0_31*dmats1[31][11] + coeff0_32*dmats1[32][11] + coeff0_33*dmats1[33][11] + coeff0_34*dmats1[34][11];
          new_coeff0_12 = coeff0_0*dmats1[0][12] + coeff0_1*dmats1[1][12] + coeff0_2*dmats1[2][12] + coeff0_3*dmats1[3][12] + coeff0_4*dmats1[4][12] + coeff0_5*dmats1[5][12] + coeff0_6*dmats1[6][12] + coeff0_7*dmats1[7][12] + coeff0_8*dmats1[8][12] + coeff0_9*dmats1[9][12] + coeff0_10*dmats1[10][12] + coeff0_11*dmats1[11][12] + coeff0_12*dmats1[12][12] + coeff0_13*dmats1[13][12] + coeff0_14*dmats1[14][12] + coeff0_15*dmats1[15][12] + coeff0_16*dmats1[16][12] + coeff0_17*dmats1[17][12] + coeff0_18*dmats1[18][12] + coeff0_19*dmats1[19][12] + coeff0_20*dmats1[20][12] + coeff0_21*dmats1[21][12] + coeff0_22*dmats1[22][12] + coeff0_23*dmats1[23][12] + coeff0_24*dmats1[24][12] + coeff0_25*dmats1[25][12] + coeff0_26*dmats1[26][12] + coeff0_27*dmats1[27][12] + coeff0_28*dmats1[28][12] + coeff0_29*dmats1[29][12] + coeff0_30*dmats1[30][12] + coeff0_31*dmats1[31][12] + coeff0_32*dmats1[32][12] + coeff0_33*dmats1[33][12] + coeff0_34*dmats1[34][12];
          new_coeff0_13 = coeff0_0*dmats1[0][13] + coeff0_1*dmats1[1][13] + coeff0_2*dmats1[2][13] + coeff0_3*dmats1[3][13] + coeff0_4*dmats1[4][13] + coeff0_5*dmats1[5][13] + coeff0_6*dmats1[6][13] + coeff0_7*dmats1[7][13] + coeff0_8*dmats1[8][13] + coeff0_9*dmats1[9][13] + coeff0_10*dmats1[10][13] + coeff0_11*dmats1[11][13] + coeff0_12*dmats1[12][13] + coeff0_13*dmats1[13][13] + coeff0_14*dmats1[14][13] + coeff0_15*dmats1[15][13] + coeff0_16*dmats1[16][13] + coeff0_17*dmats1[17][13] + coeff0_18*dmats1[18][13] + coeff0_19*dmats1[19][13] + coeff0_20*dmats1[20][13] + coeff0_21*dmats1[21][13] + coeff0_22*dmats1[22][13] + coeff0_23*dmats1[23][13] + coeff0_24*dmats1[24][13] + coeff0_25*dmats1[25][13] + coeff0_26*dmats1[26][13] + coeff0_27*dmats1[27][13] + coeff0_28*dmats1[28][13] + coeff0_29*dmats1[29][13] + coeff0_30*dmats1[30][13] + coeff0_31*dmats1[31][13] + coeff0_32*dmats1[32][13] + coeff0_33*dmats1[33][13] + coeff0_34*dmats1[34][13];
          new_coeff0_14 = coeff0_0*dmats1[0][14] + coeff0_1*dmats1[1][14] + coeff0_2*dmats1[2][14] + coeff0_3*dmats1[3][14] + coeff0_4*dmats1[4][14] + coeff0_5*dmats1[5][14] + coeff0_6*dmats1[6][14] + coeff0_7*dmats1[7][14] + coeff0_8*dmats1[8][14] + coeff0_9*dmats1[9][14] + coeff0_10*dmats1[10][14] + coeff0_11*dmats1[11][14] + coeff0_12*dmats1[12][14] + coeff0_13*dmats1[13][14] + coeff0_14*dmats1[14][14] + coeff0_15*dmats1[15][14] + coeff0_16*dmats1[16][14] + coeff0_17*dmats1[17][14] + coeff0_18*dmats1[18][14] + coeff0_19*dmats1[19][14] + coeff0_20*dmats1[20][14] + coeff0_21*dmats1[21][14] + coeff0_22*dmats1[22][14] + coeff0_23*dmats1[23][14] + coeff0_24*dmats1[24][14] + coeff0_25*dmats1[25][14] + coeff0_26*dmats1[26][14] + coeff0_27*dmats1[27][14] + coeff0_28*dmats1[28][14] + coeff0_29*dmats1[29][14] + coeff0_30*dmats1[30][14] + coeff0_31*dmats1[31][14] + coeff0_32*dmats1[32][14] + coeff0_33*dmats1[33][14] + coeff0_34*dmats1[34][14];
          new_coeff0_15 = coeff0_0*dmats1[0][15] + coeff0_1*dmats1[1][15] + coeff0_2*dmats1[2][15] + coeff0_3*dmats1[3][15] + coeff0_4*dmats1[4][15] + coeff0_5*dmats1[5][15] + coeff0_6*dmats1[6][15] + coeff0_7*dmats1[7][15] + coeff0_8*dmats1[8][15] + coeff0_9*dmats1[9][15] + coeff0_10*dmats1[10][15] + coeff0_11*dmats1[11][15] + coeff0_12*dmats1[12][15] + coeff0_13*dmats1[13][15] + coeff0_14*dmats1[14][15] + coeff0_15*dmats1[15][15] + coeff0_16*dmats1[16][15] + coeff0_17*dmats1[17][15] + coeff0_18*dmats1[18][15] + coeff0_19*dmats1[19][15] + coeff0_20*dmats1[20][15] + coeff0_21*dmats1[21][15] + coeff0_22*dmats1[22][15] + coeff0_23*dmats1[23][15] + coeff0_24*dmats1[24][15] + coeff0_25*dmats1[25][15] + coeff0_26*dmats1[26][15] + coeff0_27*dmats1[27][15] + coeff0_28*dmats1[28][15] + coeff0_29*dmats1[29][15] + coeff0_30*dmats1[30][15] + coeff0_31*dmats1[31][15] + coeff0_32*dmats1[32][15] + coeff0_33*dmats1[33][15] + coeff0_34*dmats1[34][15];
          new_coeff0_16 = coeff0_0*dmats1[0][16] + coeff0_1*dmats1[1][16] + coeff0_2*dmats1[2][16] + coeff0_3*dmats1[3][16] + coeff0_4*dmats1[4][16] + coeff0_5*dmats1[5][16] + coeff0_6*dmats1[6][16] + coeff0_7*dmats1[7][16] + coeff0_8*dmats1[8][16] + coeff0_9*dmats1[9][16] + coeff0_10*dmats1[10][16] + coeff0_11*dmats1[11][16] + coeff0_12*dmats1[12][16] + coeff0_13*dmats1[13][16] + coeff0_14*dmats1[14][16] + coeff0_15*dmats1[15][16] + coeff0_16*dmats1[16][16] + coeff0_17*dmats1[17][16] + coeff0_18*dmats1[18][16] + coeff0_19*dmats1[19][16] + coeff0_20*dmats1[20][16] + coeff0_21*dmats1[21][16] + coeff0_22*dmats1[22][16] + coeff0_23*dmats1[23][16] + coeff0_24*dmats1[24][16] + coeff0_25*dmats1[25][16] + coeff0_26*dmats1[26][16] + coeff0_27*dmats1[27][16] + coeff0_28*dmats1[28][16] + coeff0_29*dmats1[29][16] + coeff0_30*dmats1[30][16] + coeff0_31*dmats1[31][16] + coeff0_32*dmats1[32][16] + coeff0_33*dmats1[33][16] + coeff0_34*dmats1[34][16];
          new_coeff0_17 = coeff0_0*dmats1[0][17] + coeff0_1*dmats1[1][17] + coeff0_2*dmats1[2][17] + coeff0_3*dmats1[3][17] + coeff0_4*dmats1[4][17] + coeff0_5*dmats1[5][17] + coeff0_6*dmats1[6][17] + coeff0_7*dmats1[7][17] + coeff0_8*dmats1[8][17] + coeff0_9*dmats1[9][17] + coeff0_10*dmats1[10][17] + coeff0_11*dmats1[11][17] + coeff0_12*dmats1[12][17] + coeff0_13*dmats1[13][17] + coeff0_14*dmats1[14][17] + coeff0_15*dmats1[15][17] + coeff0_16*dmats1[16][17] + coeff0_17*dmats1[17][17] + coeff0_18*dmats1[18][17] + coeff0_19*dmats1[19][17] + coeff0_20*dmats1[20][17] + coeff0_21*dmats1[21][17] + coeff0_22*dmats1[22][17] + coeff0_23*dmats1[23][17] + coeff0_24*dmats1[24][17] + coeff0_25*dmats1[25][17] + coeff0_26*dmats1[26][17] + coeff0_27*dmats1[27][17] + coeff0_28*dmats1[28][17] + coeff0_29*dmats1[29][17] + coeff0_30*dmats1[30][17] + coeff0_31*dmats1[31][17] + coeff0_32*dmats1[32][17] + coeff0_33*dmats1[33][17] + coeff0_34*dmats1[34][17];
          new_coeff0_18 = coeff0_0*dmats1[0][18] + coeff0_1*dmats1[1][18] + coeff0_2*dmats1[2][18] + coeff0_3*dmats1[3][18] + coeff0_4*dmats1[4][18] + coeff0_5*dmats1[5][18] + coeff0_6*dmats1[6][18] + coeff0_7*dmats1[7][18] + coeff0_8*dmats1[8][18] + coeff0_9*dmats1[9][18] + coeff0_10*dmats1[10][18] + coeff0_11*dmats1[11][18] + coeff0_12*dmats1[12][18] + coeff0_13*dmats1[13][18] + coeff0_14*dmats1[14][18] + coeff0_15*dmats1[15][18] + coeff0_16*dmats1[16][18] + coeff0_17*dmats1[17][18] + coeff0_18*dmats1[18][18] + coeff0_19*dmats1[19][18] + coeff0_20*dmats1[20][18] + coeff0_21*dmats1[21][18] + coeff0_22*dmats1[22][18] + coeff0_23*dmats1[23][18] + coeff0_24*dmats1[24][18] + coeff0_25*dmats1[25][18] + coeff0_26*dmats1[26][18] + coeff0_27*dmats1[27][18] + coeff0_28*dmats1[28][18] + coeff0_29*dmats1[29][18] + coeff0_30*dmats1[30][18] + coeff0_31*dmats1[31][18] + coeff0_32*dmats1[32][18] + coeff0_33*dmats1[33][18] + coeff0_34*dmats1[34][18];
          new_coeff0_19 = coeff0_0*dmats1[0][19] + coeff0_1*dmats1[1][19] + coeff0_2*dmats1[2][19] + coeff0_3*dmats1[3][19] + coeff0_4*dmats1[4][19] + coeff0_5*dmats1[5][19] + coeff0_6*dmats1[6][19] + coeff0_7*dmats1[7][19] + coeff0_8*dmats1[8][19] + coeff0_9*dmats1[9][19] + coeff0_10*dmats1[10][19] + coeff0_11*dmats1[11][19] + coeff0_12*dmats1[12][19] + coeff0_13*dmats1[13][19] + coeff0_14*dmats1[14][19] + coeff0_15*dmats1[15][19] + coeff0_16*dmats1[16][19] + coeff0_17*dmats1[17][19] + coeff0_18*dmats1[18][19] + coeff0_19*dmats1[19][19] + coeff0_20*dmats1[20][19] + coeff0_21*dmats1[21][19] + coeff0_22*dmats1[22][19] + coeff0_23*dmats1[23][19] + coeff0_24*dmats1[24][19] + coeff0_25*dmats1[25][19] + coeff0_26*dmats1[26][19] + coeff0_27*dmats1[27][19] + coeff0_28*dmats1[28][19] + coeff0_29*dmats1[29][19] + coeff0_30*dmats1[30][19] + coeff0_31*dmats1[31][19] + coeff0_32*dmats1[32][19] + coeff0_33*dmats1[33][19] + coeff0_34*dmats1[34][19];
          new_coeff0_20 = coeff0_0*dmats1[0][20] + coeff0_1*dmats1[1][20] + coeff0_2*dmats1[2][20] + coeff0_3*dmats1[3][20] + coeff0_4*dmats1[4][20] + coeff0_5*dmats1[5][20] + coeff0_6*dmats1[6][20] + coeff0_7*dmats1[7][20] + coeff0_8*dmats1[8][20] + coeff0_9*dmats1[9][20] + coeff0_10*dmats1[10][20] + coeff0_11*dmats1[11][20] + coeff0_12*dmats1[12][20] + coeff0_13*dmats1[13][20] + coeff0_14*dmats1[14][20] + coeff0_15*dmats1[15][20] + coeff0_16*dmats1[16][20] + coeff0_17*dmats1[17][20] + coeff0_18*dmats1[18][20] + coeff0_19*dmats1[19][20] + coeff0_20*dmats1[20][20] + coeff0_21*dmats1[21][20] + coeff0_22*dmats1[22][20] + coeff0_23*dmats1[23][20] + coeff0_24*dmats1[24][20] + coeff0_25*dmats1[25][20] + coeff0_26*dmats1[26][20] + coeff0_27*dmats1[27][20] + coeff0_28*dmats1[28][20] + coeff0_29*dmats1[29][20] + coeff0_30*dmats1[30][20] + coeff0_31*dmats1[31][20] + coeff0_32*dmats1[32][20] + coeff0_33*dmats1[33][20] + coeff0_34*dmats1[34][20];
          new_coeff0_21 = coeff0_0*dmats1[0][21] + coeff0_1*dmats1[1][21] + coeff0_2*dmats1[2][21] + coeff0_3*dmats1[3][21] + coeff0_4*dmats1[4][21] + coeff0_5*dmats1[5][21] + coeff0_6*dmats1[6][21] + coeff0_7*dmats1[7][21] + coeff0_8*dmats1[8][21] + coeff0_9*dmats1[9][21] + coeff0_10*dmats1[10][21] + coeff0_11*dmats1[11][21] + coeff0_12*dmats1[12][21] + coeff0_13*dmats1[13][21] + coeff0_14*dmats1[14][21] + coeff0_15*dmats1[15][21] + coeff0_16*dmats1[16][21] + coeff0_17*dmats1[17][21] + coeff0_18*dmats1[18][21] + coeff0_19*dmats1[19][21] + coeff0_20*dmats1[20][21] + coeff0_21*dmats1[21][21] + coeff0_22*dmats1[22][21] + coeff0_23*dmats1[23][21] + coeff0_24*dmats1[24][21] + coeff0_25*dmats1[25][21] + coeff0_26*dmats1[26][21] + coeff0_27*dmats1[27][21] + coeff0_28*dmats1[28][21] + coeff0_29*dmats1[29][21] + coeff0_30*dmats1[30][21] + coeff0_31*dmats1[31][21] + coeff0_32*dmats1[32][21] + coeff0_33*dmats1[33][21] + coeff0_34*dmats1[34][21];
          new_coeff0_22 = coeff0_0*dmats1[0][22] + coeff0_1*dmats1[1][22] + coeff0_2*dmats1[2][22] + coeff0_3*dmats1[3][22] + coeff0_4*dmats1[4][22] + coeff0_5*dmats1[5][22] + coeff0_6*dmats1[6][22] + coeff0_7*dmats1[7][22] + coeff0_8*dmats1[8][22] + coeff0_9*dmats1[9][22] + coeff0_10*dmats1[10][22] + coeff0_11*dmats1[11][22] + coeff0_12*dmats1[12][22] + coeff0_13*dmats1[13][22] + coeff0_14*dmats1[14][22] + coeff0_15*dmats1[15][22] + coeff0_16*dmats1[16][22] + coeff0_17*dmats1[17][22] + coeff0_18*dmats1[18][22] + coeff0_19*dmats1[19][22] + coeff0_20*dmats1[20][22] + coeff0_21*dmats1[21][22] + coeff0_22*dmats1[22][22] + coeff0_23*dmats1[23][22] + coeff0_24*dmats1[24][22] + coeff0_25*dmats1[25][22] + coeff0_26*dmats1[26][22] + coeff0_27*dmats1[27][22] + coeff0_28*dmats1[28][22] + coeff0_29*dmats1[29][22] + coeff0_30*dmats1[30][22] + coeff0_31*dmats1[31][22] + coeff0_32*dmats1[32][22] + coeff0_33*dmats1[33][22] + coeff0_34*dmats1[34][22];
          new_coeff0_23 = coeff0_0*dmats1[0][23] + coeff0_1*dmats1[1][23] + coeff0_2*dmats1[2][23] + coeff0_3*dmats1[3][23] + coeff0_4*dmats1[4][23] + coeff0_5*dmats1[5][23] + coeff0_6*dmats1[6][23] + coeff0_7*dmats1[7][23] + coeff0_8*dmats1[8][23] + coeff0_9*dmats1[9][23] + coeff0_10*dmats1[10][23] + coeff0_11*dmats1[11][23] + coeff0_12*dmats1[12][23] + coeff0_13*dmats1[13][23] + coeff0_14*dmats1[14][23] + coeff0_15*dmats1[15][23] + coeff0_16*dmats1[16][23] + coeff0_17*dmats1[17][23] + coeff0_18*dmats1[18][23] + coeff0_19*dmats1[19][23] + coeff0_20*dmats1[20][23] + coeff0_21*dmats1[21][23] + coeff0_22*dmats1[22][23] + coeff0_23*dmats1[23][23] + coeff0_24*dmats1[24][23] + coeff0_25*dmats1[25][23] + coeff0_26*dmats1[26][23] + coeff0_27*dmats1[27][23] + coeff0_28*dmats1[28][23] + coeff0_29*dmats1[29][23] + coeff0_30*dmats1[30][23] + coeff0_31*dmats1[31][23] + coeff0_32*dmats1[32][23] + coeff0_33*dmats1[33][23] + coeff0_34*dmats1[34][23];
          new_coeff0_24 = coeff0_0*dmats1[0][24] + coeff0_1*dmats1[1][24] + coeff0_2*dmats1[2][24] + coeff0_3*dmats1[3][24] + coeff0_4*dmats1[4][24] + coeff0_5*dmats1[5][24] + coeff0_6*dmats1[6][24] + coeff0_7*dmats1[7][24] + coeff0_8*dmats1[8][24] + coeff0_9*dmats1[9][24] + coeff0_10*dmats1[10][24] + coeff0_11*dmats1[11][24] + coeff0_12*dmats1[12][24] + coeff0_13*dmats1[13][24] + coeff0_14*dmats1[14][24] + coeff0_15*dmats1[15][24] + coeff0_16*dmats1[16][24] + coeff0_17*dmats1[17][24] + coeff0_18*dmats1[18][24] + coeff0_19*dmats1[19][24] + coeff0_20*dmats1[20][24] + coeff0_21*dmats1[21][24] + coeff0_22*dmats1[22][24] + coeff0_23*dmats1[23][24] + coeff0_24*dmats1[24][24] + coeff0_25*dmats1[25][24] + coeff0_26*dmats1[26][24] + coeff0_27*dmats1[27][24] + coeff0_28*dmats1[28][24] + coeff0_29*dmats1[29][24] + coeff0_30*dmats1[30][24] + coeff0_31*dmats1[31][24] + coeff0_32*dmats1[32][24] + coeff0_33*dmats1[33][24] + coeff0_34*dmats1[34][24];
          new_coeff0_25 = coeff0_0*dmats1[0][25] + coeff0_1*dmats1[1][25] + coeff0_2*dmats1[2][25] + coeff0_3*dmats1[3][25] + coeff0_4*dmats1[4][25] + coeff0_5*dmats1[5][25] + coeff0_6*dmats1[6][25] + coeff0_7*dmats1[7][25] + coeff0_8*dmats1[8][25] + coeff0_9*dmats1[9][25] + coeff0_10*dmats1[10][25] + coeff0_11*dmats1[11][25] + coeff0_12*dmats1[12][25] + coeff0_13*dmats1[13][25] + coeff0_14*dmats1[14][25] + coeff0_15*dmats1[15][25] + coeff0_16*dmats1[16][25] + coeff0_17*dmats1[17][25] + coeff0_18*dmats1[18][25] + coeff0_19*dmats1[19][25] + coeff0_20*dmats1[20][25] + coeff0_21*dmats1[21][25] + coeff0_22*dmats1[22][25] + coeff0_23*dmats1[23][25] + coeff0_24*dmats1[24][25] + coeff0_25*dmats1[25][25] + coeff0_26*dmats1[26][25] + coeff0_27*dmats1[27][25] + coeff0_28*dmats1[28][25] + coeff0_29*dmats1[29][25] + coeff0_30*dmats1[30][25] + coeff0_31*dmats1[31][25] + coeff0_32*dmats1[32][25] + coeff0_33*dmats1[33][25] + coeff0_34*dmats1[34][25];
          new_coeff0_26 = coeff0_0*dmats1[0][26] + coeff0_1*dmats1[1][26] + coeff0_2*dmats1[2][26] + coeff0_3*dmats1[3][26] + coeff0_4*dmats1[4][26] + coeff0_5*dmats1[5][26] + coeff0_6*dmats1[6][26] + coeff0_7*dmats1[7][26] + coeff0_8*dmats1[8][26] + coeff0_9*dmats1[9][26] + coeff0_10*dmats1[10][26] + coeff0_11*dmats1[11][26] + coeff0_12*dmats1[12][26] + coeff0_13*dmats1[13][26] + coeff0_14*dmats1[14][26] + coeff0_15*dmats1[15][26] + coeff0_16*dmats1[16][26] + coeff0_17*dmats1[17][26] + coeff0_18*dmats1[18][26] + coeff0_19*dmats1[19][26] + coeff0_20*dmats1[20][26] + coeff0_21*dmats1[21][26] + coeff0_22*dmats1[22][26] + coeff0_23*dmats1[23][26] + coeff0_24*dmats1[24][26] + coeff0_25*dmats1[25][26] + coeff0_26*dmats1[26][26] + coeff0_27*dmats1[27][26] + coeff0_28*dmats1[28][26] + coeff0_29*dmats1[29][26] + coeff0_30*dmats1[30][26] + coeff0_31*dmats1[31][26] + coeff0_32*dmats1[32][26] + coeff0_33*dmats1[33][26] + coeff0_34*dmats1[34][26];
          new_coeff0_27 = coeff0_0*dmats1[0][27] + coeff0_1*dmats1[1][27] + coeff0_2*dmats1[2][27] + coeff0_3*dmats1[3][27] + coeff0_4*dmats1[4][27] + coeff0_5*dmats1[5][27] + coeff0_6*dmats1[6][27] + coeff0_7*dmats1[7][27] + coeff0_8*dmats1[8][27] + coeff0_9*dmats1[9][27] + coeff0_10*dmats1[10][27] + coeff0_11*dmats1[11][27] + coeff0_12*dmats1[12][27] + coeff0_13*dmats1[13][27] + coeff0_14*dmats1[14][27] + coeff0_15*dmats1[15][27] + coeff0_16*dmats1[16][27] + coeff0_17*dmats1[17][27] + coeff0_18*dmats1[18][27] + coeff0_19*dmats1[19][27] + coeff0_20*dmats1[20][27] + coeff0_21*dmats1[21][27] + coeff0_22*dmats1[22][27] + coeff0_23*dmats1[23][27] + coeff0_24*dmats1[24][27] + coeff0_25*dmats1[25][27] + coeff0_26*dmats1[26][27] + coeff0_27*dmats1[27][27] + coeff0_28*dmats1[28][27] + coeff0_29*dmats1[29][27] + coeff0_30*dmats1[30][27] + coeff0_31*dmats1[31][27] + coeff0_32*dmats1[32][27] + coeff0_33*dmats1[33][27] + coeff0_34*dmats1[34][27];
          new_coeff0_28 = coeff0_0*dmats1[0][28] + coeff0_1*dmats1[1][28] + coeff0_2*dmats1[2][28] + coeff0_3*dmats1[3][28] + coeff0_4*dmats1[4][28] + coeff0_5*dmats1[5][28] + coeff0_6*dmats1[6][28] + coeff0_7*dmats1[7][28] + coeff0_8*dmats1[8][28] + coeff0_9*dmats1[9][28] + coeff0_10*dmats1[10][28] + coeff0_11*dmats1[11][28] + coeff0_12*dmats1[12][28] + coeff0_13*dmats1[13][28] + coeff0_14*dmats1[14][28] + coeff0_15*dmats1[15][28] + coeff0_16*dmats1[16][28] + coeff0_17*dmats1[17][28] + coeff0_18*dmats1[18][28] + coeff0_19*dmats1[19][28] + coeff0_20*dmats1[20][28] + coeff0_21*dmats1[21][28] + coeff0_22*dmats1[22][28] + coeff0_23*dmats1[23][28] + coeff0_24*dmats1[24][28] + coeff0_25*dmats1[25][28] + coeff0_26*dmats1[26][28] + coeff0_27*dmats1[27][28] + coeff0_28*dmats1[28][28] + coeff0_29*dmats1[29][28] + coeff0_30*dmats1[30][28] + coeff0_31*dmats1[31][28] + coeff0_32*dmats1[32][28] + coeff0_33*dmats1[33][28] + coeff0_34*dmats1[34][28];
          new_coeff0_29 = coeff0_0*dmats1[0][29] + coeff0_1*dmats1[1][29] + coeff0_2*dmats1[2][29] + coeff0_3*dmats1[3][29] + coeff0_4*dmats1[4][29] + coeff0_5*dmats1[5][29] + coeff0_6*dmats1[6][29] + coeff0_7*dmats1[7][29] + coeff0_8*dmats1[8][29] + coeff0_9*dmats1[9][29] + coeff0_10*dmats1[10][29] + coeff0_11*dmats1[11][29] + coeff0_12*dmats1[12][29] + coeff0_13*dmats1[13][29] + coeff0_14*dmats1[14][29] + coeff0_15*dmats1[15][29] + coeff0_16*dmats1[16][29] + coeff0_17*dmats1[17][29] + coeff0_18*dmats1[18][29] + coeff0_19*dmats1[19][29] + coeff0_20*dmats1[20][29] + coeff0_21*dmats1[21][29] + coeff0_22*dmats1[22][29] + coeff0_23*dmats1[23][29] + coeff0_24*dmats1[24][29] + coeff0_25*dmats1[25][29] + coeff0_26*dmats1[26][29] + coeff0_27*dmats1[27][29] + coeff0_28*dmats1[28][29] + coeff0_29*dmats1[29][29] + coeff0_30*dmats1[30][29] + coeff0_31*dmats1[31][29] + coeff0_32*dmats1[32][29] + coeff0_33*dmats1[33][29] + coeff0_34*dmats1[34][29];
          new_coeff0_30 = coeff0_0*dmats1[0][30] + coeff0_1*dmats1[1][30] + coeff0_2*dmats1[2][30] + coeff0_3*dmats1[3][30] + coeff0_4*dmats1[4][30] + coeff0_5*dmats1[5][30] + coeff0_6*dmats1[6][30] + coeff0_7*dmats1[7][30] + coeff0_8*dmats1[8][30] + coeff0_9*dmats1[9][30] + coeff0_10*dmats1[10][30] + coeff0_11*dmats1[11][30] + coeff0_12*dmats1[12][30] + coeff0_13*dmats1[13][30] + coeff0_14*dmats1[14][30] + coeff0_15*dmats1[15][30] + coeff0_16*dmats1[16][30] + coeff0_17*dmats1[17][30] + coeff0_18*dmats1[18][30] + coeff0_19*dmats1[19][30] + coeff0_20*dmats1[20][30] + coeff0_21*dmats1[21][30] + coeff0_22*dmats1[22][30] + coeff0_23*dmats1[23][30] + coeff0_24*dmats1[24][30] + coeff0_25*dmats1[25][30] + coeff0_26*dmats1[26][30] + coeff0_27*dmats1[27][30] + coeff0_28*dmats1[28][30] + coeff0_29*dmats1[29][30] + coeff0_30*dmats1[30][30] + coeff0_31*dmats1[31][30] + coeff0_32*dmats1[32][30] + coeff0_33*dmats1[33][30] + coeff0_34*dmats1[34][30];
          new_coeff0_31 = coeff0_0*dmats1[0][31] + coeff0_1*dmats1[1][31] + coeff0_2*dmats1[2][31] + coeff0_3*dmats1[3][31] + coeff0_4*dmats1[4][31] + coeff0_5*dmats1[5][31] + coeff0_6*dmats1[6][31] + coeff0_7*dmats1[7][31] + coeff0_8*dmats1[8][31] + coeff0_9*dmats1[9][31] + coeff0_10*dmats1[10][31] + coeff0_11*dmats1[11][31] + coeff0_12*dmats1[12][31] + coeff0_13*dmats1[13][31] + coeff0_14*dmats1[14][31] + coeff0_15*dmats1[15][31] + coeff0_16*dmats1[16][31] + coeff0_17*dmats1[17][31] + coeff0_18*dmats1[18][31] + coeff0_19*dmats1[19][31] + coeff0_20*dmats1[20][31] + coeff0_21*dmats1[21][31] + coeff0_22*dmats1[22][31] + coeff0_23*dmats1[23][31] + coeff0_24*dmats1[24][31] + coeff0_25*dmats1[25][31] + coeff0_26*dmats1[26][31] + coeff0_27*dmats1[27][31] + coeff0_28*dmats1[28][31] + coeff0_29*dmats1[29][31] + coeff0_30*dmats1[30][31] + coeff0_31*dmats1[31][31] + coeff0_32*dmats1[32][31] + coeff0_33*dmats1[33][31] + coeff0_34*dmats1[34][31];
          new_coeff0_32 = coeff0_0*dmats1[0][32] + coeff0_1*dmats1[1][32] + coeff0_2*dmats1[2][32] + coeff0_3*dmats1[3][32] + coeff0_4*dmats1[4][32] + coeff0_5*dmats1[5][32] + coeff0_6*dmats1[6][32] + coeff0_7*dmats1[7][32] + coeff0_8*dmats1[8][32] + coeff0_9*dmats1[9][32] + coeff0_10*dmats1[10][32] + coeff0_11*dmats1[11][32] + coeff0_12*dmats1[12][32] + coeff0_13*dmats1[13][32] + coeff0_14*dmats1[14][32] + coeff0_15*dmats1[15][32] + coeff0_16*dmats1[16][32] + coeff0_17*dmats1[17][32] + coeff0_18*dmats1[18][32] + coeff0_19*dmats1[19][32] + coeff0_20*dmats1[20][32] + coeff0_21*dmats1[21][32] + coeff0_22*dmats1[22][32] + coeff0_23*dmats1[23][32] + coeff0_24*dmats1[24][32] + coeff0_25*dmats1[25][32] + coeff0_26*dmats1[26][32] + coeff0_27*dmats1[27][32] + coeff0_28*dmats1[28][32] + coeff0_29*dmats1[29][32] + coeff0_30*dmats1[30][32] + coeff0_31*dmats1[31][32] + coeff0_32*dmats1[32][32] + coeff0_33*dmats1[33][32] + coeff0_34*dmats1[34][32];
          new_coeff0_33 = coeff0_0*dmats1[0][33] + coeff0_1*dmats1[1][33] + coeff0_2*dmats1[2][33] + coeff0_3*dmats1[3][33] + coeff0_4*dmats1[4][33] + coeff0_5*dmats1[5][33] + coeff0_6*dmats1[6][33] + coeff0_7*dmats1[7][33] + coeff0_8*dmats1[8][33] + coeff0_9*dmats1[9][33] + coeff0_10*dmats1[10][33] + coeff0_11*dmats1[11][33] + coeff0_12*dmats1[12][33] + coeff0_13*dmats1[13][33] + coeff0_14*dmats1[14][33] + coeff0_15*dmats1[15][33] + coeff0_16*dmats1[16][33] + coeff0_17*dmats1[17][33] + coeff0_18*dmats1[18][33] + coeff0_19*dmats1[19][33] + coeff0_20*dmats1[20][33] + coeff0_21*dmats1[21][33] + coeff0_22*dmats1[22][33] + coeff0_23*dmats1[23][33] + coeff0_24*dmats1[24][33] + coeff0_25*dmats1[25][33] + coeff0_26*dmats1[26][33] + coeff0_27*dmats1[27][33] + coeff0_28*dmats1[28][33] + coeff0_29*dmats1[29][33] + coeff0_30*dmats1[30][33] + coeff0_31*dmats1[31][33] + coeff0_32*dmats1[32][33] + coeff0_33*dmats1[33][33] + coeff0_34*dmats1[34][33];
          new_coeff0_34 = coeff0_0*dmats1[0][34] + coeff0_1*dmats1[1][34] + coeff0_2*dmats1[2][34] + coeff0_3*dmats1[3][34] + coeff0_4*dmats1[4][34] + coeff0_5*dmats1[5][34] + coeff0_6*dmats1[6][34] + coeff0_7*dmats1[7][34] + coeff0_8*dmats1[8][34] + coeff0_9*dmats1[9][34] + coeff0_10*dmats1[10][34] + coeff0_11*dmats1[11][34] + coeff0_12*dmats1[12][34] + coeff0_13*dmats1[13][34] + coeff0_14*dmats1[14][34] + coeff0_15*dmats1[15][34] + coeff0_16*dmats1[16][34] + coeff0_17*dmats1[17][34] + coeff0_18*dmats1[18][34] + coeff0_19*dmats1[19][34] + coeff0_20*dmats1[20][34] + coeff0_21*dmats1[21][34] + coeff0_22*dmats1[22][34] + coeff0_23*dmats1[23][34] + coeff0_24*dmats1[24][34] + coeff0_25*dmats1[25][34] + coeff0_26*dmats1[26][34] + coeff0_27*dmats1[27][34] + coeff0_28*dmats1[28][34] + coeff0_29*dmats1[29][34] + coeff0_30*dmats1[30][34] + coeff0_31*dmats1[31][34] + coeff0_32*dmats1[32][34] + coeff0_33*dmats1[33][34] + coeff0_34*dmats1[34][34];
        }
        if(combinations[deriv_num][j] == 2)
        {
          new_coeff0_0 = coeff0_0*dmats2[0][0] + coeff0_1*dmats2[1][0] + coeff0_2*dmats2[2][0] + coeff0_3*dmats2[3][0] + coeff0_4*dmats2[4][0] + coeff0_5*dmats2[5][0] + coeff0_6*dmats2[6][0] + coeff0_7*dmats2[7][0] + coeff0_8*dmats2[8][0] + coeff0_9*dmats2[9][0] + coeff0_10*dmats2[10][0] + coeff0_11*dmats2[11][0] + coeff0_12*dmats2[12][0] + coeff0_13*dmats2[13][0] + coeff0_14*dmats2[14][0] + coeff0_15*dmats2[15][0] + coeff0_16*dmats2[16][0] + coeff0_17*dmats2[17][0] + coeff0_18*dmats2[18][0] + coeff0_19*dmats2[19][0] + coeff0_20*dmats2[20][0] + coeff0_21*dmats2[21][0] + coeff0_22*dmats2[22][0] + coeff0_23*dmats2[23][0] + coeff0_24*dmats2[24][0] + coeff0_25*dmats2[25][0] + coeff0_26*dmats2[26][0] + coeff0_27*dmats2[27][0] + coeff0_28*dmats2[28][0] + coeff0_29*dmats2[29][0] + coeff0_30*dmats2[30][0] + coeff0_31*dmats2[31][0] + coeff0_32*dmats2[32][0] + coeff0_33*dmats2[33][0] + coeff0_34*dmats2[34][0];
          new_coeff0_1 = coeff0_0*dmats2[0][1] + coeff0_1*dmats2[1][1] + coeff0_2*dmats2[2][1] + coeff0_3*dmats2[3][1] + coeff0_4*dmats2[4][1] + coeff0_5*dmats2[5][1] + coeff0_6*dmats2[6][1] + coeff0_7*dmats2[7][1] + coeff0_8*dmats2[8][1] + coeff0_9*dmats2[9][1] + coeff0_10*dmats2[10][1] + coeff0_11*dmats2[11][1] + coeff0_12*dmats2[12][1] + coeff0_13*dmats2[13][1] + coeff0_14*dmats2[14][1] + coeff0_15*dmats2[15][1] + coeff0_16*dmats2[16][1] + coeff0_17*dmats2[17][1] + coeff0_18*dmats2[18][1] + coeff0_19*dmats2[19][1] + coeff0_20*dmats2[20][1] + coeff0_21*dmats2[21][1] + coeff0_22*dmats2[22][1] + coeff0_23*dmats2[23][1] + coeff0_24*dmats2[24][1] + coeff0_25*dmats2[25][1] + coeff0_26*dmats2[26][1] + coeff0_27*dmats2[27][1] + coeff0_28*dmats2[28][1] + coeff0_29*dmats2[29][1] + coeff0_30*dmats2[30][1] + coeff0_31*dmats2[31][1] + coeff0_32*dmats2[32][1] + coeff0_33*dmats2[33][1] + coeff0_34*dmats2[34][1];
          new_coeff0_2 = coeff0_0*dmats2[0][2] + coeff0_1*dmats2[1][2] + coeff0_2*dmats2[2][2] + coeff0_3*dmats2[3][2] + coeff0_4*dmats2[4][2] + coeff0_5*dmats2[5][2] + coeff0_6*dmats2[6][2] + coeff0_7*dmats2[7][2] + coeff0_8*dmats2[8][2] + coeff0_9*dmats2[9][2] + coeff0_10*dmats2[10][2] + coeff0_11*dmats2[11][2] + coeff0_12*dmats2[12][2] + coeff0_13*dmats2[13][2] + coeff0_14*dmats2[14][2] + coeff0_15*dmats2[15][2] + coeff0_16*dmats2[16][2] + coeff0_17*dmats2[17][2] + coeff0_18*dmats2[18][2] + coeff0_19*dmats2[19][2] + coeff0_20*dmats2[20][2] + coeff0_21*dmats2[21][2] + coeff0_22*dmats2[22][2] + coeff0_23*dmats2[23][2] + coeff0_24*dmats2[24][2] + coeff0_25*dmats2[25][2] + coeff0_26*dmats2[26][2] + coeff0_27*dmats2[27][2] + coeff0_28*dmats2[28][2] + coeff0_29*dmats2[29][2] + coeff0_30*dmats2[30][2] + coeff0_31*dmats2[31][2] + coeff0_32*dmats2[32][2] + coeff0_33*dmats2[33][2] + coeff0_34*dmats2[34][2];
          new_coeff0_3 = coeff0_0*dmats2[0][3] + coeff0_1*dmats2[1][3] + coeff0_2*dmats2[2][3] + coeff0_3*dmats2[3][3] + coeff0_4*dmats2[4][3] + coeff0_5*dmats2[5][3] + coeff0_6*dmats2[6][3] + coeff0_7*dmats2[7][3] + coeff0_8*dmats2[8][3] + coeff0_9*dmats2[9][3] + coeff0_10*dmats2[10][3] + coeff0_11*dmats2[11][3] + coeff0_12*dmats2[12][3] + coeff0_13*dmats2[13][3] + coeff0_14*dmats2[14][3] + coeff0_15*dmats2[15][3] + coeff0_16*dmats2[16][3] + coeff0_17*dmats2[17][3] + coeff0_18*dmats2[18][3] + coeff0_19*dmats2[19][3] + coeff0_20*dmats2[20][3] + coeff0_21*dmats2[21][3] + coeff0_22*dmats2[22][3] + coeff0_23*dmats2[23][3] + coeff0_24*dmats2[24][3] + coeff0_25*dmats2[25][3] + coeff0_26*dmats2[26][3] + coeff0_27*dmats2[27][3] + coeff0_28*dmats2[28][3] + coeff0_29*dmats2[29][3] + coeff0_30*dmats2[30][3] + coeff0_31*dmats2[31][3] + coeff0_32*dmats2[32][3] + coeff0_33*dmats2[33][3] + coeff0_34*dmats2[34][3];
          new_coeff0_4 = coeff0_0*dmats2[0][4] + coeff0_1*dmats2[1][4] + coeff0_2*dmats2[2][4] + coeff0_3*dmats2[3][4] + coeff0_4*dmats2[4][4] + coeff0_5*dmats2[5][4] + coeff0_6*dmats2[6][4] + coeff0_7*dmats2[7][4] + coeff0_8*dmats2[8][4] + coeff0_9*dmats2[9][4] + coeff0_10*dmats2[10][4] + coeff0_11*dmats2[11][4] + coeff0_12*dmats2[12][4] + coeff0_13*dmats2[13][4] + coeff0_14*dmats2[14][4] + coeff0_15*dmats2[15][4] + coeff0_16*dmats2[16][4] + coeff0_17*dmats2[17][4] + coeff0_18*dmats2[18][4] + coeff0_19*dmats2[19][4] + coeff0_20*dmats2[20][4] + coeff0_21*dmats2[21][4] + coeff0_22*dmats2[22][4] + coeff0_23*dmats2[23][4] + coeff0_24*dmats2[24][4] + coeff0_25*dmats2[25][4] + coeff0_26*dmats2[26][4] + coeff0_27*dmats2[27][4] + coeff0_28*dmats2[28][4] + coeff0_29*dmats2[29][4] + coeff0_30*dmats2[30][4] + coeff0_31*dmats2[31][4] + coeff0_32*dmats2[32][4] + coeff0_33*dmats2[33][4] + coeff0_34*dmats2[34][4];
          new_coeff0_5 = coeff0_0*dmats2[0][5] + coeff0_1*dmats2[1][5] + coeff0_2*dmats2[2][5] + coeff0_3*dmats2[3][5] + coeff0_4*dmats2[4][5] + coeff0_5*dmats2[5][5] + coeff0_6*dmats2[6][5] + coeff0_7*dmats2[7][5] + coeff0_8*dmats2[8][5] + coeff0_9*dmats2[9][5] + coeff0_10*dmats2[10][5] + coeff0_11*dmats2[11][5] + coeff0_12*dmats2[12][5] + coeff0_13*dmats2[13][5] + coeff0_14*dmats2[14][5] + coeff0_15*dmats2[15][5] + coeff0_16*dmats2[16][5] + coeff0_17*dmats2[17][5] + coeff0_18*dmats2[18][5] + coeff0_19*dmats2[19][5] + coeff0_20*dmats2[20][5] + coeff0_21*dmats2[21][5] + coeff0_22*dmats2[22][5] + coeff0_23*dmats2[23][5] + coeff0_24*dmats2[24][5] + coeff0_25*dmats2[25][5] + coeff0_26*dmats2[26][5] + coeff0_27*dmats2[27][5] + coeff0_28*dmats2[28][5] + coeff0_29*dmats2[29][5] + coeff0_30*dmats2[30][5] + coeff0_31*dmats2[31][5] + coeff0_32*dmats2[32][5] + coeff0_33*dmats2[33][5] + coeff0_34*dmats2[34][5];
          new_coeff0_6 = coeff0_0*dmats2[0][6] + coeff0_1*dmats2[1][6] + coeff0_2*dmats2[2][6] + coeff0_3*dmats2[3][6] + coeff0_4*dmats2[4][6] + coeff0_5*dmats2[5][6] + coeff0_6*dmats2[6][6] + coeff0_7*dmats2[7][6] + coeff0_8*dmats2[8][6] + coeff0_9*dmats2[9][6] + coeff0_10*dmats2[10][6] + coeff0_11*dmats2[11][6] + coeff0_12*dmats2[12][6] + coeff0_13*dmats2[13][6] + coeff0_14*dmats2[14][6] + coeff0_15*dmats2[15][6] + coeff0_16*dmats2[16][6] + coeff0_17*dmats2[17][6] + coeff0_18*dmats2[18][6] + coeff0_19*dmats2[19][6] + coeff0_20*dmats2[20][6] + coeff0_21*dmats2[21][6] + coeff0_22*dmats2[22][6] + coeff0_23*dmats2[23][6] + coeff0_24*dmats2[24][6] + coeff0_25*dmats2[25][6] + coeff0_26*dmats2[26][6] + coeff0_27*dmats2[27][6] + coeff0_28*dmats2[28][6] + coeff0_29*dmats2[29][6] + coeff0_30*dmats2[30][6] + coeff0_31*dmats2[31][6] + coeff0_32*dmats2[32][6] + coeff0_33*dmats2[33][6] + coeff0_34*dmats2[34][6];
          new_coeff0_7 = coeff0_0*dmats2[0][7] + coeff0_1*dmats2[1][7] + coeff0_2*dmats2[2][7] + coeff0_3*dmats2[3][7] + coeff0_4*dmats2[4][7] + coeff0_5*dmats2[5][7] + coeff0_6*dmats2[6][7] + coeff0_7*dmats2[7][7] + coeff0_8*dmats2[8][7] + coeff0_9*dmats2[9][7] + coeff0_10*dmats2[10][7] + coeff0_11*dmats2[11][7] + coeff0_12*dmats2[12][7] + coeff0_13*dmats2[13][7] + coeff0_14*dmats2[14][7] + coeff0_15*dmats2[15][7] + coeff0_16*dmats2[16][7] + coeff0_17*dmats2[17][7] + coeff0_18*dmats2[18][7] + coeff0_19*dmats2[19][7] + coeff0_20*dmats2[20][7] + coeff0_21*dmats2[21][7] + coeff0_22*dmats2[22][7] + coeff0_23*dmats2[23][7] + coeff0_24*dmats2[24][7] + coeff0_25*dmats2[25][7] + coeff0_26*dmats2[26][7] + coeff0_27*dmats2[27][7] + coeff0_28*dmats2[28][7] + coeff0_29*dmats2[29][7] + coeff0_30*dmats2[30][7] + coeff0_31*dmats2[31][7] + coeff0_32*dmats2[32][7] + coeff0_33*dmats2[33][7] + coeff0_34*dmats2[34][7];
          new_coeff0_8 = coeff0_0*dmats2[0][8] + coeff0_1*dmats2[1][8] + coeff0_2*dmats2[2][8] + coeff0_3*dmats2[3][8] + coeff0_4*dmats2[4][8] + coeff0_5*dmats2[5][8] + coeff0_6*dmats2[6][8] + coeff0_7*dmats2[7][8] + coeff0_8*dmats2[8][8] + coeff0_9*dmats2[9][8] + coeff0_10*dmats2[10][8] + coeff0_11*dmats2[11][8] + coeff0_12*dmats2[12][8] + coeff0_13*dmats2[13][8] + coeff0_14*dmats2[14][8] + coeff0_15*dmats2[15][8] + coeff0_16*dmats2[16][8] + coeff0_17*dmats2[17][8] + coeff0_18*dmats2[18][8] + coeff0_19*dmats2[19][8] + coeff0_20*dmats2[20][8] + coeff0_21*dmats2[21][8] + coeff0_22*dmats2[22][8] + coeff0_23*dmats2[23][8] + coeff0_24*dmats2[24][8] + coeff0_25*dmats2[25][8] + coeff0_26*dmats2[26][8] + coeff0_27*dmats2[27][8] + coeff0_28*dmats2[28][8] + coeff0_29*dmats2[29][8] + coeff0_30*dmats2[30][8] + coeff0_31*dmats2[31][8] + coeff0_32*dmats2[32][8] + coeff0_33*dmats2[33][8] + coeff0_34*dmats2[34][8];
          new_coeff0_9 = coeff0_0*dmats2[0][9] + coeff0_1*dmats2[1][9] + coeff0_2*dmats2[2][9] + coeff0_3*dmats2[3][9] + coeff0_4*dmats2[4][9] + coeff0_5*dmats2[5][9] + coeff0_6*dmats2[6][9] + coeff0_7*dmats2[7][9] + coeff0_8*dmats2[8][9] + coeff0_9*dmats2[9][9] + coeff0_10*dmats2[10][9] + coeff0_11*dmats2[11][9] + coeff0_12*dmats2[12][9] + coeff0_13*dmats2[13][9] + coeff0_14*dmats2[14][9] + coeff0_15*dmats2[15][9] + coeff0_16*dmats2[16][9] + coeff0_17*dmats2[17][9] + coeff0_18*dmats2[18][9] + coeff0_19*dmats2[19][9] + coeff0_20*dmats2[20][9] + coeff0_21*dmats2[21][9] + coeff0_22*dmats2[22][9] + coeff0_23*dmats2[23][9] + coeff0_24*dmats2[24][9] + coeff0_25*dmats2[25][9] + coeff0_26*dmats2[26][9] + coeff0_27*dmats2[27][9] + coeff0_28*dmats2[28][9] + coeff0_29*dmats2[29][9] + coeff0_30*dmats2[30][9] + coeff0_31*dmats2[31][9] + coeff0_32*dmats2[32][9] + coeff0_33*dmats2[33][9] + coeff0_34*dmats2[34][9];
          new_coeff0_10 = coeff0_0*dmats2[0][10] + coeff0_1*dmats2[1][10] + coeff0_2*dmats2[2][10] + coeff0_3*dmats2[3][10] + coeff0_4*dmats2[4][10] + coeff0_5*dmats2[5][10] + coeff0_6*dmats2[6][10] + coeff0_7*dmats2[7][10] + coeff0_8*dmats2[8][10] + coeff0_9*dmats2[9][10] + coeff0_10*dmats2[10][10] + coeff0_11*dmats2[11][10] + coeff0_12*dmats2[12][10] + coeff0_13*dmats2[13][10] + coeff0_14*dmats2[14][10] + coeff0_15*dmats2[15][10] + coeff0_16*dmats2[16][10] + coeff0_17*dmats2[17][10] + coeff0_18*dmats2[18][10] + coeff0_19*dmats2[19][10] + coeff0_20*dmats2[20][10] + coeff0_21*dmats2[21][10] + coeff0_22*dmats2[22][10] + coeff0_23*dmats2[23][10] + coeff0_24*dmats2[24][10] + coeff0_25*dmats2[25][10] + coeff0_26*dmats2[26][10] + coeff0_27*dmats2[27][10] + coeff0_28*dmats2[28][10] + coeff0_29*dmats2[29][10] + coeff0_30*dmats2[30][10] + coeff0_31*dmats2[31][10] + coeff0_32*dmats2[32][10] + coeff0_33*dmats2[33][10] + coeff0_34*dmats2[34][10];
          new_coeff0_11 = coeff0_0*dmats2[0][11] + coeff0_1*dmats2[1][11] + coeff0_2*dmats2[2][11] + coeff0_3*dmats2[3][11] + coeff0_4*dmats2[4][11] + coeff0_5*dmats2[5][11] + coeff0_6*dmats2[6][11] + coeff0_7*dmats2[7][11] + coeff0_8*dmats2[8][11] + coeff0_9*dmats2[9][11] + coeff0_10*dmats2[10][11] + coeff0_11*dmats2[11][11] + coeff0_12*dmats2[12][11] + coeff0_13*dmats2[13][11] + coeff0_14*dmats2[14][11] + coeff0_15*dmats2[15][11] + coeff0_16*dmats2[16][11] + coeff0_17*dmats2[17][11] + coeff0_18*dmats2[18][11] + coeff0_19*dmats2[19][11] + coeff0_20*dmats2[20][11] + coeff0_21*dmats2[21][11] + coeff0_22*dmats2[22][11] + coeff0_23*dmats2[23][11] + coeff0_24*dmats2[24][11] + coeff0_25*dmats2[25][11] + coeff0_26*dmats2[26][11] + coeff0_27*dmats2[27][11] + coeff0_28*dmats2[28][11] + coeff0_29*dmats2[29][11] + coeff0_30*dmats2[30][11] + coeff0_31*dmats2[31][11] + coeff0_32*dmats2[32][11] + coeff0_33*dmats2[33][11] + coeff0_34*dmats2[34][11];
          new_coeff0_12 = coeff0_0*dmats2[0][12] + coeff0_1*dmats2[1][12] + coeff0_2*dmats2[2][12] + coeff0_3*dmats2[3][12] + coeff0_4*dmats2[4][12] + coeff0_5*dmats2[5][12] + coeff0_6*dmats2[6][12] + coeff0_7*dmats2[7][12] + coeff0_8*dmats2[8][12] + coeff0_9*dmats2[9][12] + coeff0_10*dmats2[10][12] + coeff0_11*dmats2[11][12] + coeff0_12*dmats2[12][12] + coeff0_13*dmats2[13][12] + coeff0_14*dmats2[14][12] + coeff0_15*dmats2[15][12] + coeff0_16*dmats2[16][12] + coeff0_17*dmats2[17][12] + coeff0_18*dmats2[18][12] + coeff0_19*dmats2[19][12] + coeff0_20*dmats2[20][12] + coeff0_21*dmats2[21][12] + coeff0_22*dmats2[22][12] + coeff0_23*dmats2[23][12] + coeff0_24*dmats2[24][12] + coeff0_25*dmats2[25][12] + coeff0_26*dmats2[26][12] + coeff0_27*dmats2[27][12] + coeff0_28*dmats2[28][12] + coeff0_29*dmats2[29][12] + coeff0_30*dmats2[30][12] + coeff0_31*dmats2[31][12] + coeff0_32*dmats2[32][12] + coeff0_33*dmats2[33][12] + coeff0_34*dmats2[34][12];
          new_coeff0_13 = coeff0_0*dmats2[0][13] + coeff0_1*dmats2[1][13] + coeff0_2*dmats2[2][13] + coeff0_3*dmats2[3][13] + coeff0_4*dmats2[4][13] + coeff0_5*dmats2[5][13] + coeff0_6*dmats2[6][13] + coeff0_7*dmats2[7][13] + coeff0_8*dmats2[8][13] + coeff0_9*dmats2[9][13] + coeff0_10*dmats2[10][13] + coeff0_11*dmats2[11][13] + coeff0_12*dmats2[12][13] + coeff0_13*dmats2[13][13] + coeff0_14*dmats2[14][13] + coeff0_15*dmats2[15][13] + coeff0_16*dmats2[16][13] + coeff0_17*dmats2[17][13] + coeff0_18*dmats2[18][13] + coeff0_19*dmats2[19][13] + coeff0_20*dmats2[20][13] + coeff0_21*dmats2[21][13] + coeff0_22*dmats2[22][13] + coeff0_23*dmats2[23][13] + coeff0_24*dmats2[24][13] + coeff0_25*dmats2[25][13] + coeff0_26*dmats2[26][13] + coeff0_27*dmats2[27][13] + coeff0_28*dmats2[28][13] + coeff0_29*dmats2[29][13] + coeff0_30*dmats2[30][13] + coeff0_31*dmats2[31][13] + coeff0_32*dmats2[32][13] + coeff0_33*dmats2[33][13] + coeff0_34*dmats2[34][13];
          new_coeff0_14 = coeff0_0*dmats2[0][14] + coeff0_1*dmats2[1][14] + coeff0_2*dmats2[2][14] + coeff0_3*dmats2[3][14] + coeff0_4*dmats2[4][14] + coeff0_5*dmats2[5][14] + coeff0_6*dmats2[6][14] + coeff0_7*dmats2[7][14] + coeff0_8*dmats2[8][14] + coeff0_9*dmats2[9][14] + coeff0_10*dmats2[10][14] + coeff0_11*dmats2[11][14] + coeff0_12*dmats2[12][14] + coeff0_13*dmats2[13][14] + coeff0_14*dmats2[14][14] + coeff0_15*dmats2[15][14] + coeff0_16*dmats2[16][14] + coeff0_17*dmats2[17][14] + coeff0_18*dmats2[18][14] + coeff0_19*dmats2[19][14] + coeff0_20*dmats2[20][14] + coeff0_21*dmats2[21][14] + coeff0_22*dmats2[22][14] + coeff0_23*dmats2[23][14] + coeff0_24*dmats2[24][14] + coeff0_25*dmats2[25][14] + coeff0_26*dmats2[26][14] + coeff0_27*dmats2[27][14] + coeff0_28*dmats2[28][14] + coeff0_29*dmats2[29][14] + coeff0_30*dmats2[30][14] + coeff0_31*dmats2[31][14] + coeff0_32*dmats2[32][14] + coeff0_33*dmats2[33][14] + coeff0_34*dmats2[34][14];
          new_coeff0_15 = coeff0_0*dmats2[0][15] + coeff0_1*dmats2[1][15] + coeff0_2*dmats2[2][15] + coeff0_3*dmats2[3][15] + coeff0_4*dmats2[4][15] + coeff0_5*dmats2[5][15] + coeff0_6*dmats2[6][15] + coeff0_7*dmats2[7][15] + coeff0_8*dmats2[8][15] + coeff0_9*dmats2[9][15] + coeff0_10*dmats2[10][15] + coeff0_11*dmats2[11][15] + coeff0_12*dmats2[12][15] + coeff0_13*dmats2[13][15] + coeff0_14*dmats2[14][15] + coeff0_15*dmats2[15][15] + coeff0_16*dmats2[16][15] + coeff0_17*dmats2[17][15] + coeff0_18*dmats2[18][15] + coeff0_19*dmats2[19][15] + coeff0_20*dmats2[20][15] + coeff0_21*dmats2[21][15] + coeff0_22*dmats2[22][15] + coeff0_23*dmats2[23][15] + coeff0_24*dmats2[24][15] + coeff0_25*dmats2[25][15] + coeff0_26*dmats2[26][15] + coeff0_27*dmats2[27][15] + coeff0_28*dmats2[28][15] + coeff0_29*dmats2[29][15] + coeff0_30*dmats2[30][15] + coeff0_31*dmats2[31][15] + coeff0_32*dmats2[32][15] + coeff0_33*dmats2[33][15] + coeff0_34*dmats2[34][15];
          new_coeff0_16 = coeff0_0*dmats2[0][16] + coeff0_1*dmats2[1][16] + coeff0_2*dmats2[2][16] + coeff0_3*dmats2[3][16] + coeff0_4*dmats2[4][16] + coeff0_5*dmats2[5][16] + coeff0_6*dmats2[6][16] + coeff0_7*dmats2[7][16] + coeff0_8*dmats2[8][16] + coeff0_9*dmats2[9][16] + coeff0_10*dmats2[10][16] + coeff0_11*dmats2[11][16] + coeff0_12*dmats2[12][16] + coeff0_13*dmats2[13][16] + coeff0_14*dmats2[14][16] + coeff0_15*dmats2[15][16] + coeff0_16*dmats2[16][16] + coeff0_17*dmats2[17][16] + coeff0_18*dmats2[18][16] + coeff0_19*dmats2[19][16] + coeff0_20*dmats2[20][16] + coeff0_21*dmats2[21][16] + coeff0_22*dmats2[22][16] + coeff0_23*dmats2[23][16] + coeff0_24*dmats2[24][16] + coeff0_25*dmats2[25][16] + coeff0_26*dmats2[26][16] + coeff0_27*dmats2[27][16] + coeff0_28*dmats2[28][16] + coeff0_29*dmats2[29][16] + coeff0_30*dmats2[30][16] + coeff0_31*dmats2[31][16] + coeff0_32*dmats2[32][16] + coeff0_33*dmats2[33][16] + coeff0_34*dmats2[34][16];
          new_coeff0_17 = coeff0_0*dmats2[0][17] + coeff0_1*dmats2[1][17] + coeff0_2*dmats2[2][17] + coeff0_3*dmats2[3][17] + coeff0_4*dmats2[4][17] + coeff0_5*dmats2[5][17] + coeff0_6*dmats2[6][17] + coeff0_7*dmats2[7][17] + coeff0_8*dmats2[8][17] + coeff0_9*dmats2[9][17] + coeff0_10*dmats2[10][17] + coeff0_11*dmats2[11][17] + coeff0_12*dmats2[12][17] + coeff0_13*dmats2[13][17] + coeff0_14*dmats2[14][17] + coeff0_15*dmats2[15][17] + coeff0_16*dmats2[16][17] + coeff0_17*dmats2[17][17] + coeff0_18*dmats2[18][17] + coeff0_19*dmats2[19][17] + coeff0_20*dmats2[20][17] + coeff0_21*dmats2[21][17] + coeff0_22*dmats2[22][17] + coeff0_23*dmats2[23][17] + coeff0_24*dmats2[24][17] + coeff0_25*dmats2[25][17] + coeff0_26*dmats2[26][17] + coeff0_27*dmats2[27][17] + coeff0_28*dmats2[28][17] + coeff0_29*dmats2[29][17] + coeff0_30*dmats2[30][17] + coeff0_31*dmats2[31][17] + coeff0_32*dmats2[32][17] + coeff0_33*dmats2[33][17] + coeff0_34*dmats2[34][17];
          new_coeff0_18 = coeff0_0*dmats2[0][18] + coeff0_1*dmats2[1][18] + coeff0_2*dmats2[2][18] + coeff0_3*dmats2[3][18] + coeff0_4*dmats2[4][18] + coeff0_5*dmats2[5][18] + coeff0_6*dmats2[6][18] + coeff0_7*dmats2[7][18] + coeff0_8*dmats2[8][18] + coeff0_9*dmats2[9][18] + coeff0_10*dmats2[10][18] + coeff0_11*dmats2[11][18] + coeff0_12*dmats2[12][18] + coeff0_13*dmats2[13][18] + coeff0_14*dmats2[14][18] + coeff0_15*dmats2[15][18] + coeff0_16*dmats2[16][18] + coeff0_17*dmats2[17][18] + coeff0_18*dmats2[18][18] + coeff0_19*dmats2[19][18] + coeff0_20*dmats2[20][18] + coeff0_21*dmats2[21][18] + coeff0_22*dmats2[22][18] + coeff0_23*dmats2[23][18] + coeff0_24*dmats2[24][18] + coeff0_25*dmats2[25][18] + coeff0_26*dmats2[26][18] + coeff0_27*dmats2[27][18] + coeff0_28*dmats2[28][18] + coeff0_29*dmats2[29][18] + coeff0_30*dmats2[30][18] + coeff0_31*dmats2[31][18] + coeff0_32*dmats2[32][18] + coeff0_33*dmats2[33][18] + coeff0_34*dmats2[34][18];
          new_coeff0_19 = coeff0_0*dmats2[0][19] + coeff0_1*dmats2[1][19] + coeff0_2*dmats2[2][19] + coeff0_3*dmats2[3][19] + coeff0_4*dmats2[4][19] + coeff0_5*dmats2[5][19] + coeff0_6*dmats2[6][19] + coeff0_7*dmats2[7][19] + coeff0_8*dmats2[8][19] + coeff0_9*dmats2[9][19] + coeff0_10*dmats2[10][19] + coeff0_11*dmats2[11][19] + coeff0_12*dmats2[12][19] + coeff0_13*dmats2[13][19] + coeff0_14*dmats2[14][19] + coeff0_15*dmats2[15][19] + coeff0_16*dmats2[16][19] + coeff0_17*dmats2[17][19] + coeff0_18*dmats2[18][19] + coeff0_19*dmats2[19][19] + coeff0_20*dmats2[20][19] + coeff0_21*dmats2[21][19] + coeff0_22*dmats2[22][19] + coeff0_23*dmats2[23][19] + coeff0_24*dmats2[24][19] + coeff0_25*dmats2[25][19] + coeff0_26*dmats2[26][19] + coeff0_27*dmats2[27][19] + coeff0_28*dmats2[28][19] + coeff0_29*dmats2[29][19] + coeff0_30*dmats2[30][19] + coeff0_31*dmats2[31][19] + coeff0_32*dmats2[32][19] + coeff0_33*dmats2[33][19] + coeff0_34*dmats2[34][19];
          new_coeff0_20 = coeff0_0*dmats2[0][20] + coeff0_1*dmats2[1][20] + coeff0_2*dmats2[2][20] + coeff0_3*dmats2[3][20] + coeff0_4*dmats2[4][20] + coeff0_5*dmats2[5][20] + coeff0_6*dmats2[6][20] + coeff0_7*dmats2[7][20] + coeff0_8*dmats2[8][20] + coeff0_9*dmats2[9][20] + coeff0_10*dmats2[10][20] + coeff0_11*dmats2[11][20] + coeff0_12*dmats2[12][20] + coeff0_13*dmats2[13][20] + coeff0_14*dmats2[14][20] + coeff0_15*dmats2[15][20] + coeff0_16*dmats2[16][20] + coeff0_17*dmats2[17][20] + coeff0_18*dmats2[18][20] + coeff0_19*dmats2[19][20] + coeff0_20*dmats2[20][20] + coeff0_21*dmats2[21][20] + coeff0_22*dmats2[22][20] + coeff0_23*dmats2[23][20] + coeff0_24*dmats2[24][20] + coeff0_25*dmats2[25][20] + coeff0_26*dmats2[26][20] + coeff0_27*dmats2[27][20] + coeff0_28*dmats2[28][20] + coeff0_29*dmats2[29][20] + coeff0_30*dmats2[30][20] + coeff0_31*dmats2[31][20] + coeff0_32*dmats2[32][20] + coeff0_33*dmats2[33][20] + coeff0_34*dmats2[34][20];
          new_coeff0_21 = coeff0_0*dmats2[0][21] + coeff0_1*dmats2[1][21] + coeff0_2*dmats2[2][21] + coeff0_3*dmats2[3][21] + coeff0_4*dmats2[4][21] + coeff0_5*dmats2[5][21] + coeff0_6*dmats2[6][21] + coeff0_7*dmats2[7][21] + coeff0_8*dmats2[8][21] + coeff0_9*dmats2[9][21] + coeff0_10*dmats2[10][21] + coeff0_11*dmats2[11][21] + coeff0_12*dmats2[12][21] + coeff0_13*dmats2[13][21] + coeff0_14*dmats2[14][21] + coeff0_15*dmats2[15][21] + coeff0_16*dmats2[16][21] + coeff0_17*dmats2[17][21] + coeff0_18*dmats2[18][21] + coeff0_19*dmats2[19][21] + coeff0_20*dmats2[20][21] + coeff0_21*dmats2[21][21] + coeff0_22*dmats2[22][21] + coeff0_23*dmats2[23][21] + coeff0_24*dmats2[24][21] + coeff0_25*dmats2[25][21] + coeff0_26*dmats2[26][21] + coeff0_27*dmats2[27][21] + coeff0_28*dmats2[28][21] + coeff0_29*dmats2[29][21] + coeff0_30*dmats2[30][21] + coeff0_31*dmats2[31][21] + coeff0_32*dmats2[32][21] + coeff0_33*dmats2[33][21] + coeff0_34*dmats2[34][21];
          new_coeff0_22 = coeff0_0*dmats2[0][22] + coeff0_1*dmats2[1][22] + coeff0_2*dmats2[2][22] + coeff0_3*dmats2[3][22] + coeff0_4*dmats2[4][22] + coeff0_5*dmats2[5][22] + coeff0_6*dmats2[6][22] + coeff0_7*dmats2[7][22] + coeff0_8*dmats2[8][22] + coeff0_9*dmats2[9][22] + coeff0_10*dmats2[10][22] + coeff0_11*dmats2[11][22] + coeff0_12*dmats2[12][22] + coeff0_13*dmats2[13][22] + coeff0_14*dmats2[14][22] + coeff0_15*dmats2[15][22] + coeff0_16*dmats2[16][22] + coeff0_17*dmats2[17][22] + coeff0_18*dmats2[18][22] + coeff0_19*dmats2[19][22] + coeff0_20*dmats2[20][22] + coeff0_21*dmats2[21][22] + coeff0_22*dmats2[22][22] + coeff0_23*dmats2[23][22] + coeff0_24*dmats2[24][22] + coeff0_25*dmats2[25][22] + coeff0_26*dmats2[26][22] + coeff0_27*dmats2[27][22] + coeff0_28*dmats2[28][22] + coeff0_29*dmats2[29][22] + coeff0_30*dmats2[30][22] + coeff0_31*dmats2[31][22] + coeff0_32*dmats2[32][22] + coeff0_33*dmats2[33][22] + coeff0_34*dmats2[34][22];
          new_coeff0_23 = coeff0_0*dmats2[0][23] + coeff0_1*dmats2[1][23] + coeff0_2*dmats2[2][23] + coeff0_3*dmats2[3][23] + coeff0_4*dmats2[4][23] + coeff0_5*dmats2[5][23] + coeff0_6*dmats2[6][23] + coeff0_7*dmats2[7][23] + coeff0_8*dmats2[8][23] + coeff0_9*dmats2[9][23] + coeff0_10*dmats2[10][23] + coeff0_11*dmats2[11][23] + coeff0_12*dmats2[12][23] + coeff0_13*dmats2[13][23] + coeff0_14*dmats2[14][23] + coeff0_15*dmats2[15][23] + coeff0_16*dmats2[16][23] + coeff0_17*dmats2[17][23] + coeff0_18*dmats2[18][23] + coeff0_19*dmats2[19][23] + coeff0_20*dmats2[20][23] + coeff0_21*dmats2[21][23] + coeff0_22*dmats2[22][23] + coeff0_23*dmats2[23][23] + coeff0_24*dmats2[24][23] + coeff0_25*dmats2[25][23] + coeff0_26*dmats2[26][23] + coeff0_27*dmats2[27][23] + coeff0_28*dmats2[28][23] + coeff0_29*dmats2[29][23] + coeff0_30*dmats2[30][23] + coeff0_31*dmats2[31][23] + coeff0_32*dmats2[32][23] + coeff0_33*dmats2[33][23] + coeff0_34*dmats2[34][23];
          new_coeff0_24 = coeff0_0*dmats2[0][24] + coeff0_1*dmats2[1][24] + coeff0_2*dmats2[2][24] + coeff0_3*dmats2[3][24] + coeff0_4*dmats2[4][24] + coeff0_5*dmats2[5][24] + coeff0_6*dmats2[6][24] + coeff0_7*dmats2[7][24] + coeff0_8*dmats2[8][24] + coeff0_9*dmats2[9][24] + coeff0_10*dmats2[10][24] + coeff0_11*dmats2[11][24] + coeff0_12*dmats2[12][24] + coeff0_13*dmats2[13][24] + coeff0_14*dmats2[14][24] + coeff0_15*dmats2[15][24] + coeff0_16*dmats2[16][24] + coeff0_17*dmats2[17][24] + coeff0_18*dmats2[18][24] + coeff0_19*dmats2[19][24] + coeff0_20*dmats2[20][24] + coeff0_21*dmats2[21][24] + coeff0_22*dmats2[22][24] + coeff0_23*dmats2[23][24] + coeff0_24*dmats2[24][24] + coeff0_25*dmats2[25][24] + coeff0_26*dmats2[26][24] + coeff0_27*dmats2[27][24] + coeff0_28*dmats2[28][24] + coeff0_29*dmats2[29][24] + coeff0_30*dmats2[30][24] + coeff0_31*dmats2[31][24] + coeff0_32*dmats2[32][24] + coeff0_33*dmats2[33][24] + coeff0_34*dmats2[34][24];
          new_coeff0_25 = coeff0_0*dmats2[0][25] + coeff0_1*dmats2[1][25] + coeff0_2*dmats2[2][25] + coeff0_3*dmats2[3][25] + coeff0_4*dmats2[4][25] + coeff0_5*dmats2[5][25] + coeff0_6*dmats2[6][25] + coeff0_7*dmats2[7][25] + coeff0_8*dmats2[8][25] + coeff0_9*dmats2[9][25] + coeff0_10*dmats2[10][25] + coeff0_11*dmats2[11][25] + coeff0_12*dmats2[12][25] + coeff0_13*dmats2[13][25] + coeff0_14*dmats2[14][25] + coeff0_15*dmats2[15][25] + coeff0_16*dmats2[16][25] + coeff0_17*dmats2[17][25] + coeff0_18*dmats2[18][25] + coeff0_19*dmats2[19][25] + coeff0_20*dmats2[20][25] + coeff0_21*dmats2[21][25] + coeff0_22*dmats2[22][25] + coeff0_23*dmats2[23][25] + coeff0_24*dmats2[24][25] + coeff0_25*dmats2[25][25] + coeff0_26*dmats2[26][25] + coeff0_27*dmats2[27][25] + coeff0_28*dmats2[28][25] + coeff0_29*dmats2[29][25] + coeff0_30*dmats2[30][25] + coeff0_31*dmats2[31][25] + coeff0_32*dmats2[32][25] + coeff0_33*dmats2[33][25] + coeff0_34*dmats2[34][25];
          new_coeff0_26 = coeff0_0*dmats2[0][26] + coeff0_1*dmats2[1][26] + coeff0_2*dmats2[2][26] + coeff0_3*dmats2[3][26] + coeff0_4*dmats2[4][26] + coeff0_5*dmats2[5][26] + coeff0_6*dmats2[6][26] + coeff0_7*dmats2[7][26] + coeff0_8*dmats2[8][26] + coeff0_9*dmats2[9][26] + coeff0_10*dmats2[10][26] + coeff0_11*dmats2[11][26] + coeff0_12*dmats2[12][26] + coeff0_13*dmats2[13][26] + coeff0_14*dmats2[14][26] + coeff0_15*dmats2[15][26] + coeff0_16*dmats2[16][26] + coeff0_17*dmats2[17][26] + coeff0_18*dmats2[18][26] + coeff0_19*dmats2[19][26] + coeff0_20*dmats2[20][26] + coeff0_21*dmats2[21][26] + coeff0_22*dmats2[22][26] + coeff0_23*dmats2[23][26] + coeff0_24*dmats2[24][26] + coeff0_25*dmats2[25][26] + coeff0_26*dmats2[26][26] + coeff0_27*dmats2[27][26] + coeff0_28*dmats2[28][26] + coeff0_29*dmats2[29][26] + coeff0_30*dmats2[30][26] + coeff0_31*dmats2[31][26] + coeff0_32*dmats2[32][26] + coeff0_33*dmats2[33][26] + coeff0_34*dmats2[34][26];
          new_coeff0_27 = coeff0_0*dmats2[0][27] + coeff0_1*dmats2[1][27] + coeff0_2*dmats2[2][27] + coeff0_3*dmats2[3][27] + coeff0_4*dmats2[4][27] + coeff0_5*dmats2[5][27] + coeff0_6*dmats2[6][27] + coeff0_7*dmats2[7][27] + coeff0_8*dmats2[8][27] + coeff0_9*dmats2[9][27] + coeff0_10*dmats2[10][27] + coeff0_11*dmats2[11][27] + coeff0_12*dmats2[12][27] + coeff0_13*dmats2[13][27] + coeff0_14*dmats2[14][27] + coeff0_15*dmats2[15][27] + coeff0_16*dmats2[16][27] + coeff0_17*dmats2[17][27] + coeff0_18*dmats2[18][27] + coeff0_19*dmats2[19][27] + coeff0_20*dmats2[20][27] + coeff0_21*dmats2[21][27] + coeff0_22*dmats2[22][27] + coeff0_23*dmats2[23][27] + coeff0_24*dmats2[24][27] + coeff0_25*dmats2[25][27] + coeff0_26*dmats2[26][27] + coeff0_27*dmats2[27][27] + coeff0_28*dmats2[28][27] + coeff0_29*dmats2[29][27] + coeff0_30*dmats2[30][27] + coeff0_31*dmats2[31][27] + coeff0_32*dmats2[32][27] + coeff0_33*dmats2[33][27] + coeff0_34*dmats2[34][27];
          new_coeff0_28 = coeff0_0*dmats2[0][28] + coeff0_1*dmats2[1][28] + coeff0_2*dmats2[2][28] + coeff0_3*dmats2[3][28] + coeff0_4*dmats2[4][28] + coeff0_5*dmats2[5][28] + coeff0_6*dmats2[6][28] + coeff0_7*dmats2[7][28] + coeff0_8*dmats2[8][28] + coeff0_9*dmats2[9][28] + coeff0_10*dmats2[10][28] + coeff0_11*dmats2[11][28] + coeff0_12*dmats2[12][28] + coeff0_13*dmats2[13][28] + coeff0_14*dmats2[14][28] + coeff0_15*dmats2[15][28] + coeff0_16*dmats2[16][28] + coeff0_17*dmats2[17][28] + coeff0_18*dmats2[18][28] + coeff0_19*dmats2[19][28] + coeff0_20*dmats2[20][28] + coeff0_21*dmats2[21][28] + coeff0_22*dmats2[22][28] + coeff0_23*dmats2[23][28] + coeff0_24*dmats2[24][28] + coeff0_25*dmats2[25][28] + coeff0_26*dmats2[26][28] + coeff0_27*dmats2[27][28] + coeff0_28*dmats2[28][28] + coeff0_29*dmats2[29][28] + coeff0_30*dmats2[30][28] + coeff0_31*dmats2[31][28] + coeff0_32*dmats2[32][28] + coeff0_33*dmats2[33][28] + coeff0_34*dmats2[34][28];
          new_coeff0_29 = coeff0_0*dmats2[0][29] + coeff0_1*dmats2[1][29] + coeff0_2*dmats2[2][29] + coeff0_3*dmats2[3][29] + coeff0_4*dmats2[4][29] + coeff0_5*dmats2[5][29] + coeff0_6*dmats2[6][29] + coeff0_7*dmats2[7][29] + coeff0_8*dmats2[8][29] + coeff0_9*dmats2[9][29] + coeff0_10*dmats2[10][29] + coeff0_11*dmats2[11][29] + coeff0_12*dmats2[12][29] + coeff0_13*dmats2[13][29] + coeff0_14*dmats2[14][29] + coeff0_15*dmats2[15][29] + coeff0_16*dmats2[16][29] + coeff0_17*dmats2[17][29] + coeff0_18*dmats2[18][29] + coeff0_19*dmats2[19][29] + coeff0_20*dmats2[20][29] + coeff0_21*dmats2[21][29] + coeff0_22*dmats2[22][29] + coeff0_23*dmats2[23][29] + coeff0_24*dmats2[24][29] + coeff0_25*dmats2[25][29] + coeff0_26*dmats2[26][29] + coeff0_27*dmats2[27][29] + coeff0_28*dmats2[28][29] + coeff0_29*dmats2[29][29] + coeff0_30*dmats2[30][29] + coeff0_31*dmats2[31][29] + coeff0_32*dmats2[32][29] + coeff0_33*dmats2[33][29] + coeff0_34*dmats2[34][29];
          new_coeff0_30 = coeff0_0*dmats2[0][30] + coeff0_1*dmats2[1][30] + coeff0_2*dmats2[2][30] + coeff0_3*dmats2[3][30] + coeff0_4*dmats2[4][30] + coeff0_5*dmats2[5][30] + coeff0_6*dmats2[6][30] + coeff0_7*dmats2[7][30] + coeff0_8*dmats2[8][30] + coeff0_9*dmats2[9][30] + coeff0_10*dmats2[10][30] + coeff0_11*dmats2[11][30] + coeff0_12*dmats2[12][30] + coeff0_13*dmats2[13][30] + coeff0_14*dmats2[14][30] + coeff0_15*dmats2[15][30] + coeff0_16*dmats2[16][30] + coeff0_17*dmats2[17][30] + coeff0_18*dmats2[18][30] + coeff0_19*dmats2[19][30] + coeff0_20*dmats2[20][30] + coeff0_21*dmats2[21][30] + coeff0_22*dmats2[22][30] + coeff0_23*dmats2[23][30] + coeff0_24*dmats2[24][30] + coeff0_25*dmats2[25][30] + coeff0_26*dmats2[26][30] + coeff0_27*dmats2[27][30] + coeff0_28*dmats2[28][30] + coeff0_29*dmats2[29][30] + coeff0_30*dmats2[30][30] + coeff0_31*dmats2[31][30] + coeff0_32*dmats2[32][30] + coeff0_33*dmats2[33][30] + coeff0_34*dmats2[34][30];
          new_coeff0_31 = coeff0_0*dmats2[0][31] + coeff0_1*dmats2[1][31] + coeff0_2*dmats2[2][31] + coeff0_3*dmats2[3][31] + coeff0_4*dmats2[4][31] + coeff0_5*dmats2[5][31] + coeff0_6*dmats2[6][31] + coeff0_7*dmats2[7][31] + coeff0_8*dmats2[8][31] + coeff0_9*dmats2[9][31] + coeff0_10*dmats2[10][31] + coeff0_11*dmats2[11][31] + coeff0_12*dmats2[12][31] + coeff0_13*dmats2[13][31] + coeff0_14*dmats2[14][31] + coeff0_15*dmats2[15][31] + coeff0_16*dmats2[16][31] + coeff0_17*dmats2[17][31] + coeff0_18*dmats2[18][31] + coeff0_19*dmats2[19][31] + coeff0_20*dmats2[20][31] + coeff0_21*dmats2[21][31] + coeff0_22*dmats2[22][31] + coeff0_23*dmats2[23][31] + coeff0_24*dmats2[24][31] + coeff0_25*dmats2[25][31] + coeff0_26*dmats2[26][31] + coeff0_27*dmats2[27][31] + coeff0_28*dmats2[28][31] + coeff0_29*dmats2[29][31] + coeff0_30*dmats2[30][31] + coeff0_31*dmats2[31][31] + coeff0_32*dmats2[32][31] + coeff0_33*dmats2[33][31] + coeff0_34*dmats2[34][31];
          new_coeff0_32 = coeff0_0*dmats2[0][32] + coeff0_1*dmats2[1][32] + coeff0_2*dmats2[2][32] + coeff0_3*dmats2[3][32] + coeff0_4*dmats2[4][32] + coeff0_5*dmats2[5][32] + coeff0_6*dmats2[6][32] + coeff0_7*dmats2[7][32] + coeff0_8*dmats2[8][32] + coeff0_9*dmats2[9][32] + coeff0_10*dmats2[10][32] + coeff0_11*dmats2[11][32] + coeff0_12*dmats2[12][32] + coeff0_13*dmats2[13][32] + coeff0_14*dmats2[14][32] + coeff0_15*dmats2[15][32] + coeff0_16*dmats2[16][32] + coeff0_17*dmats2[17][32] + coeff0_18*dmats2[18][32] + coeff0_19*dmats2[19][32] + coeff0_20*dmats2[20][32] + coeff0_21*dmats2[21][32] + coeff0_22*dmats2[22][32] + coeff0_23*dmats2[23][32] + coeff0_24*dmats2[24][32] + coeff0_25*dmats2[25][32] + coeff0_26*dmats2[26][32] + coeff0_27*dmats2[27][32] + coeff0_28*dmats2[28][32] + coeff0_29*dmats2[29][32] + coeff0_30*dmats2[30][32] + coeff0_31*dmats2[31][32] + coeff0_32*dmats2[32][32] + coeff0_33*dmats2[33][32] + coeff0_34*dmats2[34][32];
          new_coeff0_33 = coeff0_0*dmats2[0][33] + coeff0_1*dmats2[1][33] + coeff0_2*dmats2[2][33] + coeff0_3*dmats2[3][33] + coeff0_4*dmats2[4][33] + coeff0_5*dmats2[5][33] + coeff0_6*dmats2[6][33] + coeff0_7*dmats2[7][33] + coeff0_8*dmats2[8][33] + coeff0_9*dmats2[9][33] + coeff0_10*dmats2[10][33] + coeff0_11*dmats2[11][33] + coeff0_12*dmats2[12][33] + coeff0_13*dmats2[13][33] + coeff0_14*dmats2[14][33] + coeff0_15*dmats2[15][33] + coeff0_16*dmats2[16][33] + coeff0_17*dmats2[17][33] + coeff0_18*dmats2[18][33] + coeff0_19*dmats2[19][33] + coeff0_20*dmats2[20][33] + coeff0_21*dmats2[21][33] + coeff0_22*dmats2[22][33] + coeff0_23*dmats2[23][33] + coeff0_24*dmats2[24][33] + coeff0_25*dmats2[25][33] + coeff0_26*dmats2[26][33] + coeff0_27*dmats2[27][33] + coeff0_28*dmats2[28][33] + coeff0_29*dmats2[29][33] + coeff0_30*dmats2[30][33] + coeff0_31*dmats2[31][33] + coeff0_32*dmats2[32][33] + coeff0_33*dmats2[33][33] + coeff0_34*dmats2[34][33];
          new_coeff0_34 = coeff0_0*dmats2[0][34] + coeff0_1*dmats2[1][34] + coeff0_2*dmats2[2][34] + coeff0_3*dmats2[3][34] + coeff0_4*dmats2[4][34] + coeff0_5*dmats2[5][34] + coeff0_6*dmats2[6][34] + coeff0_7*dmats2[7][34] + coeff0_8*dmats2[8][34] + coeff0_9*dmats2[9][34] + coeff0_10*dmats2[10][34] + coeff0_11*dmats2[11][34] + coeff0_12*dmats2[12][34] + coeff0_13*dmats2[13][34] + coeff0_14*dmats2[14][34] + coeff0_15*dmats2[15][34] + coeff0_16*dmats2[16][34] + coeff0_17*dmats2[17][34] + coeff0_18*dmats2[18][34] + coeff0_19*dmats2[19][34] + coeff0_20*dmats2[20][34] + coeff0_21*dmats2[21][34] + coeff0_22*dmats2[22][34] + coeff0_23*dmats2[23][34] + coeff0_24*dmats2[24][34] + coeff0_25*dmats2[25][34] + coeff0_26*dmats2[26][34] + coeff0_27*dmats2[27][34] + coeff0_28*dmats2[28][34] + coeff0_29*dmats2[29][34] + coeff0_30*dmats2[30][34] + coeff0_31*dmats2[31][34] + coeff0_32*dmats2[32][34] + coeff0_33*dmats2[33][34] + coeff0_34*dmats2[34][34];
        }
    
      }
      // Compute derivatives on reference element as dot product of coefficients and basisvalues
      derivatives[deriv_num] = new_coeff0_0*basisvalue0 + new_coeff0_1*basisvalue1 + new_coeff0_2*basisvalue2 + new_coeff0_3*basisvalue3 + new_coeff0_4*basisvalue4 + new_coeff0_5*basisvalue5 + new_coeff0_6*basisvalue6 + new_coeff0_7*basisvalue7 + new_coeff0_8*basisvalue8 + new_coeff0_9*basisvalue9 + new_coeff0_10*basisvalue10 + new_coeff0_11*basisvalue11 + new_coeff0_12*basisvalue12 + new_coeff0_13*basisvalue13 + new_coeff0_14*basisvalue14 + new_coeff0_15*basisvalue15 + new_coeff0_16*basisvalue16 + new_coeff0_17*basisvalue17 + new_coeff0_18*basisvalue18 + new_coeff0_19*basisvalue19 + new_coeff0_20*basisvalue20 + new_coeff0_21*basisvalue21 + new_coeff0_22*basisvalue22 + new_coeff0_23*basisvalue23 + new_coeff0_24*basisvalue24 + new_coeff0_25*basisvalue25 + new_coeff0_26*basisvalue26 + new_coeff0_27*basisvalue27 + new_coeff0_28*basisvalue28 + new_coeff0_29*basisvalue29 + new_coeff0_30*basisvalue30 + new_coeff0_31*basisvalue31 + new_coeff0_32*basisvalue32 + new_coeff0_33*basisvalue33 + new_coeff0_34*basisvalue34;
    }
    
    // Transform derivatives back to physical element
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        values[row] += transform[row][col]*derivatives[col];
      }
    }
    // Delete pointer to array of derivatives on FIAT element
    delete [] derivatives;
    
    // Delete pointer to array of combinations of derivatives and transform
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      delete [] combinations[row];
      delete [] transform[row];
    }
    
    delete [] combinations;
    delete [] transform;
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis_derivatives() is not yet implemented.");
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // The reference points, direction and weights:
    const static double X[35][1][3] = {{{0, 0, 0}}, {{1, 0, 0}}, {{0, 1, 0}}, {{0, 0, 1}}, {{0, 0.75, 0.25}}, {{0, 0.5, 0.5}}, {{0, 0.25, 0.75}}, {{0.75, 0, 0.25}}, {{0.5, 0, 0.5}}, {{0.25, 0, 0.75}}, {{0.75, 0.25, 0}}, {{0.5, 0.5, 0}}, {{0.25, 0.75, 0}}, {{0, 0, 0.25}}, {{0, 0, 0.5}}, {{0, 0, 0.75}}, {{0, 0.25, 0}}, {{0, 0.5, 0}}, {{0, 0.75, 0}}, {{0.25, 0, 0}}, {{0.5, 0, 0}}, {{0.75, 0, 0}}, {{0.5, 0.25, 0.25}}, {{0.25, 0.5, 0.25}}, {{0.25, 0.25, 0.5}}, {{0, 0.25, 0.25}}, {{0, 0.5, 0.25}}, {{0, 0.25, 0.5}}, {{0.25, 0, 0.25}}, {{0.5, 0, 0.25}}, {{0.25, 0, 0.5}}, {{0.25, 0.25, 0}}, {{0.5, 0.25, 0}}, {{0.25, 0.5, 0}}, {{0.25, 0.25, 0.25}}};
    const static double W[35][1] = {{1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}};
    const static double D[35][1][1] = {{{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}};
    
    const double * const * x = c.coordinates;
    double result = 0.0;
    // Iterate over the points:
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0][0] - X[i][0][1] - X[i][0][2];
    const double w1 = X[i][0][0];
    const double w2 = X[i][0][1];
    const double w3 = X[i][0][2];
    
    // Compute affine mapping y = F(X)
    double y[3];
    y[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0] + w3*x[3][0];
    y[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1] + w3*x[3][1];
    y[2] = w0*x[0][2] + w1*x[1][2] + w2*x[2][2] + w3*x[3][2];
    
    // Evaluate function at physical points
    double values[1];
    f.evaluate(values, y, c);
    
    // Map function values using appropriate mapping
    // Affine map: Do nothing
    
    // Note that we do not map the weights (yet).
    
    // Take directional components
    for(int k = 0; k < 1; k++)
      result += values[k]*D[i][0][k];
    // Multiply by weights 
    result *= W[i][0];
    
    return result;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate at vertices and use affine mapping
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new poisson3d_4_1_finite_element_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class poisson3d_4_1_dof_map_0: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  poisson3d_4_1_dof_map_0() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~poisson3d_4_1_dof_map_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for FiniteElement('Lagrange', 'tetrahedron', 4)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return true;
      break;
    case 2:
      return true;
      break;
    case 3:
      return true;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = m.num_entities[0] + 3*m.num_entities[1] + 3*m.num_entities[2] + m.num_entities[3];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 35;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 35;
  }

  // Return the geometric dimension of the coordinates this dof map provides
  virtual unsigned int geometric_dimension() const
  {
    return 3;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 15;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    dofs[3] = c.entity_indices[0][3];
    unsigned int offset = m.num_entities[0];
    dofs[4] = offset + 3*c.entity_indices[1][0];
    dofs[5] = offset + 3*c.entity_indices[1][0] + 1;
    dofs[6] = offset + 3*c.entity_indices[1][0] + 2;
    dofs[7] = offset + 3*c.entity_indices[1][1];
    dofs[8] = offset + 3*c.entity_indices[1][1] + 1;
    dofs[9] = offset + 3*c.entity_indices[1][1] + 2;
    dofs[10] = offset + 3*c.entity_indices[1][2];
    dofs[11] = offset + 3*c.entity_indices[1][2] + 1;
    dofs[12] = offset + 3*c.entity_indices[1][2] + 2;
    dofs[13] = offset + 3*c.entity_indices[1][3];
    dofs[14] = offset + 3*c.entity_indices[1][3] + 1;
    dofs[15] = offset + 3*c.entity_indices[1][3] + 2;
    dofs[16] = offset + 3*c.entity_indices[1][4];
    dofs[17] = offset + 3*c.entity_indices[1][4] + 1;
    dofs[18] = offset + 3*c.entity_indices[1][4] + 2;
    dofs[19] = offset + 3*c.entity_indices[1][5];
    dofs[20] = offset + 3*c.entity_indices[1][5] + 1;
    dofs[21] = offset + 3*c.entity_indices[1][5] + 2;
    offset = offset + 3*m.num_entities[1];
    dofs[22] = offset + 3*c.entity_indices[2][0];
    dofs[23] = offset + 3*c.entity_indices[2][0] + 1;
    dofs[24] = offset + 3*c.entity_indices[2][0] + 2;
    dofs[25] = offset + 3*c.entity_indices[2][1];
    dofs[26] = offset + 3*c.entity_indices[2][1] + 1;
    dofs[27] = offset + 3*c.entity_indices[2][1] + 2;
    dofs[28] = offset + 3*c.entity_indices[2][2];
    dofs[29] = offset + 3*c.entity_indices[2][2] + 1;
    dofs[30] = offset + 3*c.entity_indices[2][2] + 2;
    dofs[31] = offset + 3*c.entity_indices[2][3];
    dofs[32] = offset + 3*c.entity_indices[2][3] + 1;
    dofs[33] = offset + 3*c.entity_indices[2][3] + 2;
    offset = offset + 3*m.num_entities[2];
    dofs[34] = offset + c.entity_indices[3][0];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 7;
      dofs[7] = 8;
      dofs[8] = 9;
      dofs[9] = 10;
      dofs[10] = 11;
      dofs[11] = 12;
      dofs[12] = 22;
      dofs[13] = 23;
      dofs[14] = 24;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 13;
      dofs[7] = 14;
      dofs[8] = 15;
      dofs[9] = 16;
      dofs[10] = 17;
      dofs[11] = 18;
      dofs[12] = 25;
      dofs[13] = 26;
      dofs[14] = 27;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 7;
      dofs[4] = 8;
      dofs[5] = 9;
      dofs[6] = 13;
      dofs[7] = 14;
      dofs[8] = 15;
      dofs[9] = 19;
      dofs[10] = 20;
      dofs[11] = 21;
      dofs[12] = 28;
      dofs[13] = 29;
      dofs[14] = 30;
      break;
    case 3:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 10;
      dofs[4] = 11;
      dofs[5] = 12;
      dofs[6] = 16;
      dofs[7] = 17;
      dofs[8] = 18;
      dofs[9] = 19;
      dofs[10] = 20;
      dofs[11] = 21;
      dofs[12] = 31;
      dofs[13] = 32;
      dofs[14] = 33;
      break;
    }
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[0][2] = x[0][2];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[1][2] = x[1][2];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[2][2] = x[2][2];
    coordinates[3][0] = x[3][0];
    coordinates[3][1] = x[3][1];
    coordinates[3][2] = x[3][2];
    coordinates[4][0] = 0.75*x[2][0] + 0.25*x[3][0];
    coordinates[4][1] = 0.75*x[2][1] + 0.25*x[3][1];
    coordinates[4][2] = 0.75*x[2][2] + 0.25*x[3][2];
    coordinates[5][0] = 0.5*x[2][0] + 0.5*x[3][0];
    coordinates[5][1] = 0.5*x[2][1] + 0.5*x[3][1];
    coordinates[5][2] = 0.5*x[2][2] + 0.5*x[3][2];
    coordinates[6][0] = 0.25*x[2][0] + 0.75*x[3][0];
    coordinates[6][1] = 0.25*x[2][1] + 0.75*x[3][1];
    coordinates[6][2] = 0.25*x[2][2] + 0.75*x[3][2];
    coordinates[7][0] = 0.75*x[1][0] + 0.25*x[3][0];
    coordinates[7][1] = 0.75*x[1][1] + 0.25*x[3][1];
    coordinates[7][2] = 0.75*x[1][2] + 0.25*x[3][2];
    coordinates[8][0] = 0.5*x[1][0] + 0.5*x[3][0];
    coordinates[8][1] = 0.5*x[1][1] + 0.5*x[3][1];
    coordinates[8][2] = 0.5*x[1][2] + 0.5*x[3][2];
    coordinates[9][0] = 0.25*x[1][0] + 0.75*x[3][0];
    coordinates[9][1] = 0.25*x[1][1] + 0.75*x[3][1];
    coordinates[9][2] = 0.25*x[1][2] + 0.75*x[3][2];
    coordinates[10][0] = 0.75*x[1][0] + 0.25*x[2][0];
    coordinates[10][1] = 0.75*x[1][1] + 0.25*x[2][1];
    coordinates[10][2] = 0.75*x[1][2] + 0.25*x[2][2];
    coordinates[11][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[11][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[11][2] = 0.5*x[1][2] + 0.5*x[2][2];
    coordinates[12][0] = 0.25*x[1][0] + 0.75*x[2][0];
    coordinates[12][1] = 0.25*x[1][1] + 0.75*x[2][1];
    coordinates[12][2] = 0.25*x[1][2] + 0.75*x[2][2];
    coordinates[13][0] = 0.75*x[0][0] + 0.25*x[3][0];
    coordinates[13][1] = 0.75*x[0][1] + 0.25*x[3][1];
    coordinates[13][2] = 0.75*x[0][2] + 0.25*x[3][2];
    coordinates[14][0] = 0.5*x[0][0] + 0.5*x[3][0];
    coordinates[14][1] = 0.5*x[0][1] + 0.5*x[3][1];
    coordinates[14][2] = 0.5*x[0][2] + 0.5*x[3][2];
    coordinates[15][0] = 0.25*x[0][0] + 0.75*x[3][0];
    coordinates[15][1] = 0.25*x[0][1] + 0.75*x[3][1];
    coordinates[15][2] = 0.25*x[0][2] + 0.75*x[3][2];
    coordinates[16][0] = 0.75*x[0][0] + 0.25*x[2][0];
    coordinates[16][1] = 0.75*x[0][1] + 0.25*x[2][1];
    coordinates[16][2] = 0.75*x[0][2] + 0.25*x[2][2];
    coordinates[17][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[17][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[17][2] = 0.5*x[0][2] + 0.5*x[2][2];
    coordinates[18][0] = 0.25*x[0][0] + 0.75*x[2][0];
    coordinates[18][1] = 0.25*x[0][1] + 0.75*x[2][1];
    coordinates[18][2] = 0.25*x[0][2] + 0.75*x[2][2];
    coordinates[19][0] = 0.75*x[0][0] + 0.25*x[1][0];
    coordinates[19][1] = 0.75*x[0][1] + 0.25*x[1][1];
    coordinates[19][2] = 0.75*x[0][2] + 0.25*x[1][2];
    coordinates[20][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[20][1] = 0.5*x[0][1] + 0.5*x[1][1];
    coordinates[20][2] = 0.5*x[0][2] + 0.5*x[1][2];
    coordinates[21][0] = 0.25*x[0][0] + 0.75*x[1][0];
    coordinates[21][1] = 0.25*x[0][1] + 0.75*x[1][1];
    coordinates[21][2] = 0.25*x[0][2] + 0.75*x[1][2];
    coordinates[22][0] = 0.5*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[22][1] = 0.5*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[22][2] = 0.5*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
    coordinates[23][0] = 0.25*x[1][0] + 0.5*x[2][0] + 0.25*x[3][0];
    coordinates[23][1] = 0.25*x[1][1] + 0.5*x[2][1] + 0.25*x[3][1];
    coordinates[23][2] = 0.25*x[1][2] + 0.5*x[2][2] + 0.25*x[3][2];
    coordinates[24][0] = 0.25*x[1][0] + 0.25*x[2][0] + 0.5*x[3][0];
    coordinates[24][1] = 0.25*x[1][1] + 0.25*x[2][1] + 0.5*x[3][1];
    coordinates[24][2] = 0.25*x[1][2] + 0.25*x[2][2] + 0.5*x[3][2];
    coordinates[25][0] = 0.5*x[0][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[25][1] = 0.5*x[0][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[25][2] = 0.5*x[0][2] + 0.25*x[2][2] + 0.25*x[3][2];
    coordinates[26][0] = 0.25*x[0][0] + 0.5*x[2][0] + 0.25*x[3][0];
    coordinates[26][1] = 0.25*x[0][1] + 0.5*x[2][1] + 0.25*x[3][1];
    coordinates[26][2] = 0.25*x[0][2] + 0.5*x[2][2] + 0.25*x[3][2];
    coordinates[27][0] = 0.25*x[0][0] + 0.25*x[2][0] + 0.5*x[3][0];
    coordinates[27][1] = 0.25*x[0][1] + 0.25*x[2][1] + 0.5*x[3][1];
    coordinates[27][2] = 0.25*x[0][2] + 0.25*x[2][2] + 0.5*x[3][2];
    coordinates[28][0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[3][0];
    coordinates[28][1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[3][1];
    coordinates[28][2] = 0.5*x[0][2] + 0.25*x[1][2] + 0.25*x[3][2];
    coordinates[29][0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[3][0];
    coordinates[29][1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[3][1];
    coordinates[29][2] = 0.25*x[0][2] + 0.5*x[1][2] + 0.25*x[3][2];
    coordinates[30][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[3][0];
    coordinates[30][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[3][1];
    coordinates[30][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.5*x[3][2];
    coordinates[31][0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0];
    coordinates[31][1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1];
    coordinates[31][2] = 0.5*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2];
    coordinates[32][0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[2][0];
    coordinates[32][1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[2][1];
    coordinates[32][2] = 0.25*x[0][2] + 0.5*x[1][2] + 0.25*x[2][2];
    coordinates[33][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[2][0];
    coordinates[33][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[2][1];
    coordinates[33][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.5*x[2][2];
    coordinates[34][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[34][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[34][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new poisson3d_4_1_dof_map_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class poisson3d_4_1_dof_map_1: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  poisson3d_4_1_dof_map_1() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~poisson3d_4_1_dof_map_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for FiniteElement('Lagrange', 'tetrahedron', 4)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return true;
      break;
    case 2:
      return true;
      break;
    case 3:
      return true;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = m.num_entities[0] + 3*m.num_entities[1] + 3*m.num_entities[2] + m.num_entities[3];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 35;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 35;
  }

  // Return the geometric dimension of the coordinates this dof map provides
  virtual unsigned int geometric_dimension() const
  {
    return 3;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 15;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    dofs[3] = c.entity_indices[0][3];
    unsigned int offset = m.num_entities[0];
    dofs[4] = offset + 3*c.entity_indices[1][0];
    dofs[5] = offset + 3*c.entity_indices[1][0] + 1;
    dofs[6] = offset + 3*c.entity_indices[1][0] + 2;
    dofs[7] = offset + 3*c.entity_indices[1][1];
    dofs[8] = offset + 3*c.entity_indices[1][1] + 1;
    dofs[9] = offset + 3*c.entity_indices[1][1] + 2;
    dofs[10] = offset + 3*c.entity_indices[1][2];
    dofs[11] = offset + 3*c.entity_indices[1][2] + 1;
    dofs[12] = offset + 3*c.entity_indices[1][2] + 2;
    dofs[13] = offset + 3*c.entity_indices[1][3];
    dofs[14] = offset + 3*c.entity_indices[1][3] + 1;
    dofs[15] = offset + 3*c.entity_indices[1][3] + 2;
    dofs[16] = offset + 3*c.entity_indices[1][4];
    dofs[17] = offset + 3*c.entity_indices[1][4] + 1;
    dofs[18] = offset + 3*c.entity_indices[1][4] + 2;
    dofs[19] = offset + 3*c.entity_indices[1][5];
    dofs[20] = offset + 3*c.entity_indices[1][5] + 1;
    dofs[21] = offset + 3*c.entity_indices[1][5] + 2;
    offset = offset + 3*m.num_entities[1];
    dofs[22] = offset + 3*c.entity_indices[2][0];
    dofs[23] = offset + 3*c.entity_indices[2][0] + 1;
    dofs[24] = offset + 3*c.entity_indices[2][0] + 2;
    dofs[25] = offset + 3*c.entity_indices[2][1];
    dofs[26] = offset + 3*c.entity_indices[2][1] + 1;
    dofs[27] = offset + 3*c.entity_indices[2][1] + 2;
    dofs[28] = offset + 3*c.entity_indices[2][2];
    dofs[29] = offset + 3*c.entity_indices[2][2] + 1;
    dofs[30] = offset + 3*c.entity_indices[2][2] + 2;
    dofs[31] = offset + 3*c.entity_indices[2][3];
    dofs[32] = offset + 3*c.entity_indices[2][3] + 1;
    dofs[33] = offset + 3*c.entity_indices[2][3] + 2;
    offset = offset + 3*m.num_entities[2];
    dofs[34] = offset + c.entity_indices[3][0];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 7;
      dofs[7] = 8;
      dofs[8] = 9;
      dofs[9] = 10;
      dofs[10] = 11;
      dofs[11] = 12;
      dofs[12] = 22;
      dofs[13] = 23;
      dofs[14] = 24;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 13;
      dofs[7] = 14;
      dofs[8] = 15;
      dofs[9] = 16;
      dofs[10] = 17;
      dofs[11] = 18;
      dofs[12] = 25;
      dofs[13] = 26;
      dofs[14] = 27;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 7;
      dofs[4] = 8;
      dofs[5] = 9;
      dofs[6] = 13;
      dofs[7] = 14;
      dofs[8] = 15;
      dofs[9] = 19;
      dofs[10] = 20;
      dofs[11] = 21;
      dofs[12] = 28;
      dofs[13] = 29;
      dofs[14] = 30;
      break;
    case 3:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 10;
      dofs[4] = 11;
      dofs[5] = 12;
      dofs[6] = 16;
      dofs[7] = 17;
      dofs[8] = 18;
      dofs[9] = 19;
      dofs[10] = 20;
      dofs[11] = 21;
      dofs[12] = 31;
      dofs[13] = 32;
      dofs[14] = 33;
      break;
    }
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[0][2] = x[0][2];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[1][2] = x[1][2];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[2][2] = x[2][2];
    coordinates[3][0] = x[3][0];
    coordinates[3][1] = x[3][1];
    coordinates[3][2] = x[3][2];
    coordinates[4][0] = 0.75*x[2][0] + 0.25*x[3][0];
    coordinates[4][1] = 0.75*x[2][1] + 0.25*x[3][1];
    coordinates[4][2] = 0.75*x[2][2] + 0.25*x[3][2];
    coordinates[5][0] = 0.5*x[2][0] + 0.5*x[3][0];
    coordinates[5][1] = 0.5*x[2][1] + 0.5*x[3][1];
    coordinates[5][2] = 0.5*x[2][2] + 0.5*x[3][2];
    coordinates[6][0] = 0.25*x[2][0] + 0.75*x[3][0];
    coordinates[6][1] = 0.25*x[2][1] + 0.75*x[3][1];
    coordinates[6][2] = 0.25*x[2][2] + 0.75*x[3][2];
    coordinates[7][0] = 0.75*x[1][0] + 0.25*x[3][0];
    coordinates[7][1] = 0.75*x[1][1] + 0.25*x[3][1];
    coordinates[7][2] = 0.75*x[1][2] + 0.25*x[3][2];
    coordinates[8][0] = 0.5*x[1][0] + 0.5*x[3][0];
    coordinates[8][1] = 0.5*x[1][1] + 0.5*x[3][1];
    coordinates[8][2] = 0.5*x[1][2] + 0.5*x[3][2];
    coordinates[9][0] = 0.25*x[1][0] + 0.75*x[3][0];
    coordinates[9][1] = 0.25*x[1][1] + 0.75*x[3][1];
    coordinates[9][2] = 0.25*x[1][2] + 0.75*x[3][2];
    coordinates[10][0] = 0.75*x[1][0] + 0.25*x[2][0];
    coordinates[10][1] = 0.75*x[1][1] + 0.25*x[2][1];
    coordinates[10][2] = 0.75*x[1][2] + 0.25*x[2][2];
    coordinates[11][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[11][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[11][2] = 0.5*x[1][2] + 0.5*x[2][2];
    coordinates[12][0] = 0.25*x[1][0] + 0.75*x[2][0];
    coordinates[12][1] = 0.25*x[1][1] + 0.75*x[2][1];
    coordinates[12][2] = 0.25*x[1][2] + 0.75*x[2][2];
    coordinates[13][0] = 0.75*x[0][0] + 0.25*x[3][0];
    coordinates[13][1] = 0.75*x[0][1] + 0.25*x[3][1];
    coordinates[13][2] = 0.75*x[0][2] + 0.25*x[3][2];
    coordinates[14][0] = 0.5*x[0][0] + 0.5*x[3][0];
    coordinates[14][1] = 0.5*x[0][1] + 0.5*x[3][1];
    coordinates[14][2] = 0.5*x[0][2] + 0.5*x[3][2];
    coordinates[15][0] = 0.25*x[0][0] + 0.75*x[3][0];
    coordinates[15][1] = 0.25*x[0][1] + 0.75*x[3][1];
    coordinates[15][2] = 0.25*x[0][2] + 0.75*x[3][2];
    coordinates[16][0] = 0.75*x[0][0] + 0.25*x[2][0];
    coordinates[16][1] = 0.75*x[0][1] + 0.25*x[2][1];
    coordinates[16][2] = 0.75*x[0][2] + 0.25*x[2][2];
    coordinates[17][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[17][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[17][2] = 0.5*x[0][2] + 0.5*x[2][2];
    coordinates[18][0] = 0.25*x[0][0] + 0.75*x[2][0];
    coordinates[18][1] = 0.25*x[0][1] + 0.75*x[2][1];
    coordinates[18][2] = 0.25*x[0][2] + 0.75*x[2][2];
    coordinates[19][0] = 0.75*x[0][0] + 0.25*x[1][0];
    coordinates[19][1] = 0.75*x[0][1] + 0.25*x[1][1];
    coordinates[19][2] = 0.75*x[0][2] + 0.25*x[1][2];
    coordinates[20][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[20][1] = 0.5*x[0][1] + 0.5*x[1][1];
    coordinates[20][2] = 0.5*x[0][2] + 0.5*x[1][2];
    coordinates[21][0] = 0.25*x[0][0] + 0.75*x[1][0];
    coordinates[21][1] = 0.25*x[0][1] + 0.75*x[1][1];
    coordinates[21][2] = 0.25*x[0][2] + 0.75*x[1][2];
    coordinates[22][0] = 0.5*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[22][1] = 0.5*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[22][2] = 0.5*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
    coordinates[23][0] = 0.25*x[1][0] + 0.5*x[2][0] + 0.25*x[3][0];
    coordinates[23][1] = 0.25*x[1][1] + 0.5*x[2][1] + 0.25*x[3][1];
    coordinates[23][2] = 0.25*x[1][2] + 0.5*x[2][2] + 0.25*x[3][2];
    coordinates[24][0] = 0.25*x[1][0] + 0.25*x[2][0] + 0.5*x[3][0];
    coordinates[24][1] = 0.25*x[1][1] + 0.25*x[2][1] + 0.5*x[3][1];
    coordinates[24][2] = 0.25*x[1][2] + 0.25*x[2][2] + 0.5*x[3][2];
    coordinates[25][0] = 0.5*x[0][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[25][1] = 0.5*x[0][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[25][2] = 0.5*x[0][2] + 0.25*x[2][2] + 0.25*x[3][2];
    coordinates[26][0] = 0.25*x[0][0] + 0.5*x[2][0] + 0.25*x[3][0];
    coordinates[26][1] = 0.25*x[0][1] + 0.5*x[2][1] + 0.25*x[3][1];
    coordinates[26][2] = 0.25*x[0][2] + 0.5*x[2][2] + 0.25*x[3][2];
    coordinates[27][0] = 0.25*x[0][0] + 0.25*x[2][0] + 0.5*x[3][0];
    coordinates[27][1] = 0.25*x[0][1] + 0.25*x[2][1] + 0.5*x[3][1];
    coordinates[27][2] = 0.25*x[0][2] + 0.25*x[2][2] + 0.5*x[3][2];
    coordinates[28][0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[3][0];
    coordinates[28][1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[3][1];
    coordinates[28][2] = 0.5*x[0][2] + 0.25*x[1][2] + 0.25*x[3][2];
    coordinates[29][0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[3][0];
    coordinates[29][1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[3][1];
    coordinates[29][2] = 0.25*x[0][2] + 0.5*x[1][2] + 0.25*x[3][2];
    coordinates[30][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[3][0];
    coordinates[30][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[3][1];
    coordinates[30][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.5*x[3][2];
    coordinates[31][0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0];
    coordinates[31][1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1];
    coordinates[31][2] = 0.5*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2];
    coordinates[32][0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[2][0];
    coordinates[32][1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[2][1];
    coordinates[32][2] = 0.25*x[0][2] + 0.5*x[1][2] + 0.25*x[2][2];
    coordinates[33][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[2][0];
    coordinates[33][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[2][1];
    coordinates[33][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.5*x[2][2];
    coordinates[34][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[34][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[34][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new poisson3d_4_1_dof_map_1();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class poisson3d_4_1_cell_integral_0_quadrature: public ufc::cell_integral
{
public:

  /// Constructor
  poisson3d_4_1_cell_integral_0_quadrature() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~poisson3d_4_1_cell_integral_0_quadrature()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
      
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    
    const double d_10 = J_02*J_21 - J_01*J_22;
    
    const double d_20 = J_01*J_12 - J_02*J_11;
      
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
      
    // Compute inverse of Jacobian
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    
    // Array of quadrature weights
    const static double W125[125] = {0.000937439821766984, 0.00144688123847004, 0.00102268701578053, 0.000367520038007324, 4.71653365059364e-05, 0.00161927658526931, 0.00249925473264391, 0.00176652740822439, 0.000634831781565251, 8.1470536312884e-05, 0.00141792453255091, 0.00218848010941898, 0.00154686516950305, 0.000555892406098532, 7.13399262170554e-05, 0.000715891501943862, 0.00110493490770459, 0.000780991938624509, 0.000280662785913662, 3.60185932012982e-05, 0.000152536470498617, 0.000235430746830112, 0.000166407554052789, 5.9801395389292e-05, 7.67455552179798e-06, 0.00189377231486028, 0.00292292216383614, 0.00206598473020027, 0.000742446882427904, 9.52812185081393e-05, 0.00327118722298822, 0.00504887813656484, 0.00356865648488397, 0.00128245763045954, 0.000164582987156811, 0.00286442517370845, 0.00442106570107946, 0.00312490504969682, 0.00112298797668544, 0.000144117599953649, 0.00144621070637857, 0.0022321380949974, 0.00157772357985427, 0.000566981902660164, 7.27630862707133e-05, 0.000308147081155878, 0.000475606241660779, 0.000336168798819301, 0.000120807996789371, 1.55037800172006e-05, 0.00225090157446143, 0.00347412941301361, 0.00245558995953753, 0.00088245817276838, 0.000113249435042247, 0.00388807060532275, 0.00600100004508522, 0.00424163688396193, 0.00152430462570915, 0.00019562019257218, 0.0034046010087031, 0.0052547941847441, 0.00371420241029555, 0.00133476204345558, 0.000171295424533231, 0.00171893840164765, 0.00265307667295562, 0.00187525208922536, 0.000673903851785402, 8.64848134932762e-05, 0.000366257730507922, 0.000565296487744311, 0.00039956380849458, 0.000143590075769372, 1.8427496577589e-05, 0.00189377231486028, 0.00292292216383614, 0.00206598473020027, 0.000742446882427904, 9.52812185081393e-05, 0.00327118722298822, 0.00504887813656484, 0.00356865648488397, 0.00128245763045954, 0.000164582987156811, 0.00286442517370845, 0.00442106570107946, 0.00312490504969682, 0.00112298797668544, 0.000144117599953649, 0.00144621070637857, 0.0022321380949974, 0.00157772357985427, 0.000566981902660164, 7.27630862707133e-05, 0.000308147081155878, 0.000475606241660779, 0.000336168798819301, 0.000120807996789371, 1.55037800172006e-05, 0.000937439821766984, 0.00144688123847004, 0.00102268701578053, 0.000367520038007324, 4.71653365059364e-05, 0.00161927658526931, 0.00249925473264391, 0.00176652740822439, 0.000634831781565252, 8.1470536312884e-05, 0.00141792453255091, 0.00218848010941898, 0.00154686516950305, 0.000555892406098532, 7.13399262170554e-05, 0.000715891501943862, 0.00110493490770459, 0.000780991938624509, 0.000280662785913662, 3.60185932012982e-05, 0.000152536470498617, 0.000235430746830112, 0.000166407554052789, 5.9801395389292e-05, 7.67455552179798e-06};
    
    
    const static double FE0[125][35] = \
    {{0.305663545122521, -0.0308956026377742, -0.0284861396506215, -0.0264567387485711, 0.00553719265411168, 0.00387645332275314, 0.0056851505033398, 0.00604849035520954, 0.00428125822656385, 0.00643242509446914, 0.00672268409775298, 0.0046733288337822, 0.00696334827094777, 0.31668333287907, -0.266830935779783, 0.130690033482262, 0.351982375922268, -0.291266875281556, 0.141477002112519, 0.398248079160477, -0.321682889512789, 0.154540818103216, -0.0015276386823145, -0.00156500797046678, -0.00159351937348634, 0.0952106221031629, -0.0317968637110471, -0.0323761407582661, 0.107725414571985, -0.035117302597923, -0.0366317655360568, 0.119733005913317, -0.0390316455622191, -0.0399864425485488, 0.0130709476216944},
    {0.006690843711504, -0.0278698977200172, -0.0255216716723957, -0.026654809217297, 0.024696863491794, 0.00606875645427728, 0.0060850653969139, 0.0271328435929708, 0.00672966104875468, 0.00688490609661093, 0.00514622667323359, 0.00362131423099473, 0.00529990606922182, 0.726880420362404, -0.325409773332621, 0.139883262544633, 0.137865808082476, -0.175107042470174, 0.107680212589652, 0.155987336317311, -0.194176690389937, 0.118301272030906, -0.00578753808936716, -0.00590518015907624, -0.00208139128324144, 0.279853835753502, -0.119977797078753, -0.0422884203860176, 0.316638730113967, -0.133043715594682, -0.0478469472948315, 0.0600561704160453, -0.0252341084543327, -0.0257470368705251, 0.0411485850360966},
    {-0.0205345190513156, -0.0222688674682829, -0.0201879061271679, 0.0230686829582336, 0.043383576915687, -0.0191358805337486, -0.00622364176003369, 0.0480669960341637, -0.0213449189181001, -0.00704169738562062, 0.00299440295601829, 0.00214553663930316, 0.00305788669055031, 0.167093720255385, 0.600939576151325, -0.143068850951722, 0.0104093446885927, -0.0604049087085829, 0.0621282499374311, 0.011777582660749, -0.0673780271760179, 0.0688352264995514, -0.00741225556502808, -0.00751860203093276, 0.00465971047251567, 0.208682812741731, -0.152758304485709, 0.0946731145294436, 0.236112757380084, -0.170392661971493, 0.107117255262284, 0.0147089853118774, -0.0106148570284823, -0.0107671524426326, 0.0371976335199438},
    {0.0207507657939301, -0.0145518898690551, -0.0130520026587977, -0.0404060597147743, 0.0450304029511844, -0.053477017443967, 0.0203411087250163, 0.050336089820181, -0.0600144777647142, 0.0230148099219635, 0.00115514811169001, 0.000843706814744065, 0.00116922152266217, -0.126761056765116, 0.441928259975204, 0.467600669283435, -0.00290900218672414, -0.00621279895212727, 0.0237555195281293, -0.00329137085372827, -0.00697230141826384, 0.0265545028764068, -0.00454625343839341, -0.00458350342284589, 0.0074820435363015, 0.0334772199353669, -0.0931247868417253, 0.152015531609652, 0.0378775741255781, -0.104509109078726, 0.171996945322831, 0.000869241301477262, -0.00239834878787698, -0.00241799979419913, 0.0130292178352812},
    {-0.0368948524592727, -0.00638364542619724, -0.00567499956393999, 0.193565613495663, 0.0259638427028639, -0.047378898473653, 0.0454310335985989, 0.0292366119663366, -0.0534353517327504, 0.0514026357641066, 0.000203698888670434, 0.000151179155458532, 0.000204674320153853, 0.204659584876929, -0.507343961262246, 1.04436695187696, 0.00142591522038169, 0.00143537619017191, 0.00415844620979059, 0.0016133421341756, 0.00161886059114059, 0.0046826226614414, -0.0010542991692411, -0.00105767666444949, 0.00260466153192867, -0.0100100832039723, -0.0214892201090949, 0.052919901564096, -0.0113258409537496, -0.024236191046749, 0.0598758647845402, -7.89100056528786e-05, -0.000168859688240075, -0.000169400637910137, 0.00118137286371127},
    {-0.0110259115086917, -0.0273944922839774, -0.0207049086523348, -0.0264567387485711, 0.0051246288316901, 0.005361881137819, 0.028277822772303, 0.00530923083978048, 0.00369992558671246, 0.00537260109800344, 0.0293515690248119, 0.00558638072303258, 0.00538270721270645, 0.126397002975774, -0.17165599760043, 0.109157185209764, 0.698773601926539, -0.259177038433349, 0.109362514995889, 0.132762407176673, -0.17884315808947, 0.113302027600821, -0.00656668547127647, -0.00180804417049373, -0.00662020150701532, 0.304657734076697, -0.0367347228625229, -0.13450515845961, 0.0578829738695039, -0.0253485180939921, -0.0255550990557524, 0.320000420807171, -0.140136829790449, -0.0385846983660779, 0.045355587228323},
    {-0.0400796207547673, -0.0244753130251872, -0.0297236815267526, -0.026654809217297, 0.035177482531519, 0.0120047522387556, 0.0302669913049303, 0.0236247260194704, 0.00578290481392627, 0.00575053008951597, 0.0222876553178486, 0.00615563069515602, 0.00630523077133388, 0.235223312881521, -0.204904421568362, 0.116835712643712, 0.22191055743483, -0.218111137493024, 0.128105777916878, 0.0421615523278776, -0.105068053208743, 0.0860341243033992, -0.0247372100836881, -0.00975655513128437, -0.00864704247671431, 0.876508240496471, -0.198227651010737, -0.175685259324049, 0.166530824286541, -0.0954898205714343, -0.0333790484772361, 0.157105805520739, -0.090085455615669, -0.0355304301199561, 0.142783698010477},
    {0.0102723306758724, -0.0192801894065166, -0.0397189812555842, 0.0230686829582336, 0.0984497965965411, -0.0544785376003365, -0.0309562673116838, 0.0413568083073289, -0.0181908408918032, -0.00588148801582202, 0.0128148721626431, 0.00520560476519468, 0.00579589774391156, -0.0564785835866364, 0.352177395909631, -0.11949643476987, -0.0175005242960597, -0.100781285551626, 0.117757464577843, -0.00332498498225046, -0.0336517170080884, 0.0494675769545878, -0.0314204682320263, -0.017878206394361, 0.0193585486349735, 0.608304956655548, -0.363238336703044, 0.393315014495556, 0.115573957173589, -0.121288328942359, 0.0747272764156987, 0.0358118904027677, -0.0375825527605209, -0.021384424640582, 0.129074077919252},
    {0.00912511728278469, -0.0124102698498275, -0.0397405972089105, -0.0404060597147743, 0.148813736423541, -0.200637348699184, 0.101176260361139, 0.0427698343143907, -0.0507088224103506, 0.0192228267319273, 0.00488202238539691, 0.002674629643387, 0.00322733351433681, -0.0492106437897533, 0.128663531590443, 0.390557500837349, -0.00561721756543091, -0.00678633971875514, 0.0655709656704383, -0.00106723454287011, -0.00171517066909934, 0.0188454332574342, -0.0191066759686632, -0.0143632269164338, 0.0310837989915454, 0.0484793826839228, -0.291823158304032, 0.631541397109155, 0.00921076515456784, -0.0737550052650138, 0.119988728653697, 0.00105137563406711, -0.00841886793603299, -0.00632878846865129, 0.0452107867882595},
    {-0.0406159076210839, -0.00537606858025765, -0.0235167508261139, 0.193565613495663, 0.111110855045382, -0.212909749655552, 0.225973035491152, 0.0245854244640894, -0.0448339756433931, 0.0429333965480559, 0.00085200732502351, 0.000570008174352125, 0.00073157816654203, 0.217346756079599, -0.507458929034599, 0.872294189200459, 0.00753214688322406, 0.00645170840967707, 0.014863752577931, 0.00143105856985449, 0.00135858380447898, 0.00328889257587286, -0.00439993687100396, -0.00396984336412242, 0.0108209441854579, -0.0498012326664733, -0.0806568214253448, 0.219853249301445, -0.00946190799271438, -0.0169845015228643, 0.041770677258557, -0.000327902206051656, -0.000588597513559047, -0.000531062149718411, 0.00409930951603713},
    {-0.0058806977017464, -0.020961411703246, 0.019680460685236, -0.0264567387485711, -0.00832019668364345, -0.0348389537831831, 0.0625461354887269, 0.00400152580496346, 0.00272474454845834, 0.00376507190876499, 0.048930521949722, -0.026730756851231, -0.00612435861726484, 0.00349302620766791, -0.065860019951599, 0.076496401682579, 0.0427126061047172, 0.646111276941327, -0.124430929391771, 0.00257115858779144, -0.0505321770136862, 0.0598439668951061, -0.0106962989107496, 0.00823276344896472, -0.0102615839031089, 0.258541102529702, 0.167268194342736, -0.208488513147469, 0.0155633251325515, -0.0130819973384467, -0.0125503236613743, 0.190307812351085, -0.159966220165597, 0.12312334027285, 0.0492677426897368},
    {0.0160155329372755, -0.0184718652791736, 0.0231559130793075, -0.026654809217297, -0.041412797822325, -0.0344432021170082, 0.0669458661735615, 0.0176021151318453, 0.00422485121361423, 0.00402992124403025, 0.0367296654322382, -0.0129029273094944, -0.00520186983952697, -0.0361690473471752, -0.0724944037069555, 0.0818774466205662, -0.075472578046094, 0.221401884724776, -0.105688373127378, -0.00454320129074374, -0.0271574639953151, 0.0449218359954092, -0.0399733554598198, 0.0196171313744725, -0.0134032705491701, 0.685904525794329, 0.398568738617759, -0.272319358735952, 0.0412891994362847, -0.0488889974090571, -0.0163927308982086, 0.0861566050386759, -0.102014814964114, 0.0500642991881211, 0.155099535112543},
    {0.0196251555355453, -0.0142538719043459, 0.00551430449164192, 0.0230686829582336, -0.017812894403291, 0.0160562855400303, -0.0684704372430771, 0.0302890327371377, -0.0131335888893546, -0.00412169541459877, 0.0207590359443044, -0.00110769826546358, -0.000734901381042532, -0.0723235380733697, 0.0876260164567923, -0.0837420574397003, -0.0495680050107214, 0.00739045414443804, -0.0149312715941613, -0.00298383108374498, -0.00604518312760977, 0.0253891234003549, -0.0501762046732542, 0.00369260001571805, 0.0300065444910839, 0.334770714499961, 0.0750239625962772, 0.609654406640305, 0.0201520973788722, -0.0613674862179829, 0.0366991927248621, 0.013811537577699, -0.0420591130547637, 0.003095241709461, 0.140207388933764},
    {-0.0190581391155917, -0.00897333425654382, -0.0307674372271626, -0.0404060597147743, 0.132351652535693, -0.22451483832234, 0.223786114643476, 0.0307531007458301, -0.0361554636663503, 0.0134711890228239, 0.00776435926765642, 0.00213396519922821, 0.00201149461263445, 0.0872667704762525, -0.165422120128656, 0.273699284264116, 0.0220325931913585, 0.00976353258237032, 0.0408683030760232, 0.00132628973882769, 0.00157230163571757, 0.00949611899608974, -0.0301321459013352, -0.0112635157116612, 0.0481811635251755, -0.137863629824335, -0.228845143762454, 0.978915071973998, -0.0082989376695466, -0.0368528082257306, 0.0589274718534792, -0.00209526623473839, -0.00930437699442119, -0.00347801304318129, 0.0491104524580728},
    {-0.0407974245424917, -0.00381478498889282, -0.0382757664925027, 0.193565613495663, 0.190282673186367, -0.394592727959425, 0.499817125541642, 0.0174062774729833, -0.0316348028115305, 0.0300873491893938, 0.00133421565824135, 0.000745405326831829, 0.00087799525478678, 0.207221789959829, -0.444598645440034, 0.61129614650863, 0.0158838417532036, 0.010476000137812, 0.0178385643921466, 0.000956155099287147, 0.000839868996894595, 0.00163179860956274, -0.0068668702051136, -0.00515603169099161, 0.0167729073733279, -0.0965076725717215, -0.104757061984401, 0.340781555015693, -0.00580944488641592, -0.00839845431548998, 0.0205139302338836, -0.000445302124200693, -0.000643753339572247, -0.000483366150934922, 0.00445289629753901},
    {0.00932435981520423, -0.0124384929539136, -0.0406552941435215, -0.0264567387485711, 0.071557283824799, -0.134890782233764, 0.0993175900782414, 0.00233689276746142, 0.00155308751767135, 0.00204012014144116, 0.0453752157129881, -0.0589927390317721, 0.0285406155826311, -0.00274530159830436, -0.00403615898265414, 0.0414498988603883, -0.0533052495838728, 0.153310145658401, 0.579870570013429, -0.00109496327120837, -0.00176516193035235, 0.0189372104235512, -0.00968120372976664, 0.0172721051771462, -0.00882922451508198, 0.0251594819687861, 0.35092394715196, -0.179386721267945, 0.000516810424742654, -0.00404042139090877, -0.0036848504165023, 0.0100348568971313, -0.0784524624906235, 0.139965981645221, 0.0229695926275671},
    {-0.00343000582694772, -0.0108112314285623, -0.0261022528933716, -0.026654809217297, 0.103392980678712, -0.158623419731344, 0.106303963340101, 0.0101628551970848, 0.00238940091495442, 0.00218362987416739, 0.0336739098154425, -0.0336069922318884, 0.00703717632537005, 0.00466602892968322, 0.00205905019873337, 0.04436564082389, 0.0154605604751185, -0.0289605999565848, 0.142976994846623, 0.000317581213946114, 0.00043624380404279, 0.0140537054411443, -0.0358983017508574, 0.0489532756297685, -0.011532379994394, -0.0309351205533019, 0.994602368027883, -0.234307761919136, -0.000635449999027938, -0.0149820487555177, -0.00481300426249396, -0.0021055191227791, -0.0496419705742333, 0.0676950426566426, 0.0723104600244304},
    {-0.0254802305902347, -0.00816939214276999, 0.0194477483558447, 0.0230686829582336, -0.093124922946217, 0.258170653831508, -0.108724843916401, 0.0171871218319643, -0.0073406955135613, -0.0022333580967293, 0.0187046946755822, -0.00995490362348385, -0.00208181898583695, 0.0693603943777794, -0.0450703189999696, -0.045375988084246, 0.0754847153641235, -0.0611210042829732, -0.0422971101827511, 0.00155056005752826, 0.00173788412922081, 0.00780634832064031, -0.0445325221215012, 0.0321718864559726, 0.0258180920932987, -0.273420273893853, 0.653648485037773, 0.524556022117167, -0.00561642914824785, -0.0185855147761847, 0.0107751034352762, -0.00611234349835345, -0.0202265616474851, 0.0146123914325401, 0.0653674479763461},
    {-0.0413033167094809, -0.00502599423716691, 0.00142320657028388, -0.0404060597147743, -0.00728506876419383, 0.0170939377878666, 0.355352052140279, 0.0171227627066029, -0.0199509940309114, 0.00729942076023669, 0.00686461589158586, -8.96551013661741e-05, -5.99936975455707e-05, 0.162767434125055, -0.238242506157153, 0.148305115029899, 0.0652544179974327, -0.00107060610644964, -0.00121891483006983, 0.00134041565416253, 0.00124954567544961, 0.00286492688956201, -0.0264025793534475, 0.000464679493717858, 0.0414558136617459, -0.315283372068211, 0.00944107046730017, 0.842273574261528, -0.00647635486434063, -0.0110190374433332, 0.0173014597122299, -0.00259640861016882, -0.00441759667172863, 7.77487137671596e-05, 0.0228962608216351},
    {-0.0307812864125687, -0.00209476062722429, -0.0414545183650565, 0.193565613495663, 0.218312526315296, -0.496518111503194, 0.793664260801163, 0.00953507766758166, -0.0172667766101739, 0.0163029574391284, 0.00116056657225539, 0.000511946582509133, 0.000545825785489327, 0.148260957594398, -0.292641263819637, 0.331233402999375, 0.018045653884882, 0.00867658731539761, 0.0110897506202467, 0.00037068259436234, 0.000301734602308843, 0.000484358984172377, -0.00595155798029954, -0.00351547540607162, 0.0144316673106302, -0.100868360573134, -0.07142525436023, 0.293213687890887, -0.00207197510408043, -0.00248386490399957, 0.00602301314340322, -0.000252191448058869, -0.000302324813502332, -0.000178577685041489, 0.00207602801312383},
    {-0.0415876825462489, -0.00431783986658352, 0.256494600498464, -0.0264567387485711, 0.294923085078976, -0.257360821304334, 0.128736049066641, 0.000801066700129685, 0.000522361946184706, 0.000660097964171812, 0.020161488871774, -0.0378559651934288, 0.0380601860437702, 0.00872429846354235, 0.00688702196831946, 0.0134114620492586, 0.21957578109077, -0.499107689262689, 0.773283313112874, 0.00112588142272706, 0.0010130324522501, 0.00210038326343516, -0.00422064635993333, 0.0106624764371304, -0.00370296164571025, -0.0556466343187305, 0.216633599631123, -0.0752344837839616, -0.000285329791407228, -0.000439698428606096, -0.000385767078773852, -0.00718126644549834, -0.0110664629722462, 0.0279568318739248, 0.00311696981125829},
    {-0.0405329728195469, -0.00371426824464867, -0.00474578684781529, -0.026654809217297, 0.669144967779083, -0.31338587445254, 0.13779182750758, 0.00345414137402788, 0.000799034653613678, 0.000706531740539739, 0.0148351492186772, -0.0222033417422349, 0.0147360213951956, 0.0418315906646369, 0.0113675331696386, 0.0143548747900386, 0.179661983215495, -0.3158776939024, 0.299397365884506, 0.000921222223451898, 0.00080538800343997, 0.00154549593671607, -0.0155605339842404, 0.0312929506859297, -0.0048366604258448, -0.221373235069479, 0.635790811838522, -0.0982682742064898, -0.00113509792207298, -0.00162106505915675, -0.000503873532057924, -0.00487511807663239, -0.00696229234466305, 0.0140014906444225, 0.00981251712160667},
    {-0.0361168933250244, -0.00276215668983143, -0.0175985869100487, 0.0230686829582336, 0.13722625562885, 0.575928446322043, -0.140929787262841, 0.0057652906495018, -0.00243318076694151, -0.000722621723579481, 0.00813284841940006, -0.00736098410062279, 0.00099258315737497, 0.0813133174158524, -0.0385404156710594, -0.0146817811109555, 0.114705211796885, -0.116594455636229, 0.0201666905041453, 0.000588154424001337, 0.000492587905316505, 0.000847263751839249, -0.0191332374144266, 0.0232215300791436, 0.0108280636225287, -0.303061298652317, 0.471800681544232, 0.219997897619223, -0.00155395592539933, -0.00199326209964857, 0.00112804583792461, -0.00219209902154605, -0.00281180941293555, 0.00341262251886692, 0.00887035156804302},
    {-0.026325780939833, -0.00166934325119213, 0.0200527846384615, -0.0404060597147743, -0.121039277759041, 0.409587603262319, 0.460609436699216, 0.00566033118596444, -0.00654850098736384, 0.00236178874253031, 0.0029414281829528, -0.00070511028443274, -0.000322515764157772, 0.0933367349209927, -0.115553699595248, 0.0479853624886688, 0.0485030457726891, -0.0124422523789915, -0.00655267576338924, 0.00024870082624719, 0.000198927168058349, 0.000306432057938036, -0.0112330506905862, 0.00360255684182679, 0.0173864972760548, -0.198216441830415, 0.0731945210967083, 0.353248095045939, -0.00101636076814718, -0.00117023657418768, 0.00181129023360524, -0.000528158531587054, -0.000608121102272949, 0.000195030797776711, 0.00310701869767047},
    {-0.0125964445064998, -0.000684999674742336, -0.0373255322657574, 0.193565613495663, 0.206363312425294, -0.508716820740599, 1.02875232011214, 0.00311203997815373, -0.00561925159590037, 0.00527495846785998, 0.000490981347431652, 0.000170699739526332, 0.000166940047684325, 0.0582613106027223, -0.108078195915314, 0.107173342659665, 0.00919178962470598, 0.00328316317153113, 0.00339178460704541, 4.71311778040812e-05, 3.62655983426462e-05, 5.11494469166225e-05, -0.0025105673678677, -0.00116540725334387, 0.00605261656260094, -0.0482871405937743, -0.0236780235639219, 0.12297331871021, -0.000247593765947475, -0.000261545846873409, 0.000630549390916943, -3.90624547479883e-05, -4.12636512432405e-05, -1.91546178260841e-05, 0.00028171664814222},
    {-0.0277140447911061, -0.0126271398155743, -0.0284861396506215, -0.0264567387485711, 0.00553719265411168, 0.00387645332275314, 0.0056851505033398, 0.00325794945141118, 0.0036798590666488, 0.0316431114534619, 0.00362109612184813, 0.00401685452508362, 0.0342548886603179, 0.103801960721004, -0.157420166190056, 0.105479347123269, 0.115372225079874, -0.171836446844088, 0.114185461723149, 0.642152951745391, -0.163121764729731, 0.0671839478266717, -0.00131304741694832, -0.00769876382666718, -0.00783902033804171, 0.0561706681825988, -0.0256631078548467, -0.0261306397937106, 0.312641628866867, -0.0243616038309396, -0.145441135965869, 0.347490164197526, -0.0270770650281286, -0.158760396677319, 0.0518963102768923},
    {-0.0361820508672739, -0.0234599611173094, -0.0255216716723957, -0.026654809217297, 0.024696863491794, 0.00606875645427728, 0.0060850653969139, 0.0287184488864877, 0.0104029545786961, 0.0338690070637595, 0.005446964936319, 0.00559795912265066, 0.026071896054486, 0.179952332893617, -0.18696061832771, 0.112899161577485, 0.0341311625622492, -0.100605831836208, 0.0869082226043882, 0.18997143177811, -0.172456730934776, 0.101060175091016, -0.00894658667501569, -0.0290494286652629, -0.0102390148950972, 0.160786953747622, -0.0968335485725666, -0.0341307967741619, 0.894927846626024, -0.165990349931469, -0.189969395829684, 0.169738993229578, -0.0314830240107239, -0.102224892396147, 0.163374515627626},
    {0.0142516980277668, -0.0371334490119634, -0.0201879061271679, 0.0230686829582336, 0.043383576915687, -0.0191358805337486, -0.00622364176003369, 0.0941935371605899, -0.0541774865549499, -0.0346403124672739, 0.0058679224703583, 0.00544578233700515, 0.0150427013047287, -0.0742448752547494, 0.315595803207861, -0.115470235870069, -0.00462519175889463, -0.0317228826959173, 0.0501434353232526, -0.0257434624174616, -0.0898137949654955, 0.108870403831838, -0.0188137222613497, -0.0369863556193761, 0.0229225736261528, 0.109594079865224, -0.123290550897265, 0.0764102513758065, 0.609992238864691, -0.349060089072392, 0.425293595842598, 0.0380003477210529, -0.0217452025045105, -0.0427494241530003, 0.147687833092772},
    {0.00638473930951494, -0.0409323784102905, -0.0130520026587977, -0.0404060597147743, 0.0450304029511844, -0.053477017443967, 0.0203411087250163, 0.155250849713371, -0.213621118662252, 0.113217050295249, 0.00356280606072758, 0.00300316857367654, 0.00575176646630454, -0.0337564627061267, 0.0846428086527524, 0.377398428910149, -0.000774667128329021, -0.00118994144645207, 0.0191729745844869, -0.00431173779245646, -0.00475338070602042, 0.0661024641285422, -0.0161823576810783, -0.0225476873071009, 0.0368065129467912, 0.00641191382821803, -0.0751606029574703, 0.122691062199162, 0.0356882203517943, -0.300239109257121, 0.682889037542821, 0.000818998466035543, -0.00689009895986812, -0.00960031905880675, 0.0517306281851151},
    {-0.0409997915183171, -0.0255781559034304, -0.00567499956393999, 0.193565613495663, 0.0259638427028639, -0.047378898473653, 0.0454310335985989, 0.121442089297964, -0.234455394972282, 0.252865646874597, 0.000846117828437058, 0.000663320581885442, 0.00100685701413868, 0.218085988961728, -0.504176529159724, 0.842903940766471, 0.0015194603819778, 0.00142641489966469, 0.00335626351580574, 0.00845719989080235, 0.00705864170483446, 0.0156984333273984, -0.00462589128971524, -0.00520304241143496, 0.0128131449558944, -0.00994758860206498, -0.0173438543621094, 0.0427114181401303, -0.0553675148342017, -0.0858263985827232, 0.237728475921549, -0.000385759514582508, -0.000597974280673263, -0.000672580773829804, 0.00469047038227808},
    {-0.032404199130908, -0.0249565292980644, -0.0207049086523348, -0.0264567387485711, 0.0051246288316901, 0.005361881137819, 0.028277822772303, 0.00604184678738191, 0.0060757433648379, 0.0264295056440364, 0.0334017654098673, 0.00917354006613425, 0.0264792207840048, 0.0290254836500227, -0.098124083418682, 0.0881002806637314, 0.160464578117202, -0.148153922350204, 0.0882660014245902, 0.149976167089158, -0.167878620871497, 0.104064055106665, -0.0107833238118002, -0.00889433492959189, -0.0325668423734903, 0.174152149243713, -0.0296484321034247, -0.108558517593135, 0.162769080505944, -0.0335957213522823, -0.101462831015625, 0.899853113520492, -0.185730695079488, -0.153194973792325, 0.180077810401831},
    {-0.00335768559689333, -0.0328037714586734, -0.0297236815267526, -0.026654809217297, 0.035177482531519, 0.0120047522387556, 0.0302669913049303, 0.03812711034201, 0.0126102731283712, 0.0282886565901095, 0.0359692591934384, 0.0134230437541298, 0.0310174027846308, 0.00970388431266678, -0.112584145831108, 0.0942975861431182, 0.00915468093161189, -0.11984053795887, 0.103393605903581, 0.0085563055295887, -0.125885306539981, 0.112063147708538, -0.0539422635555037, -0.0479955470739243, -0.042537507209957, 0.481594934920914, -0.159988659068097, -0.141794794590807, 0.450116550808097, -0.168058502846676, -0.132526692528935, 0.424641645748689, -0.158547023215991, -0.141068442713084, 0.56690205705785},
    {0.0234342855627478, -0.0407169244982235, -0.0397189812555842, 0.0230686829582336, 0.0984497965965411, -0.0544785376003365, -0.0309562673116838, 0.0996724370913473, -0.0540299424420024, -0.0289328796003985, 0.030884625572964, 0.0154615461435879, 0.0285118342755609, -0.0978204961038315, 0.166049912400659, -0.0964450431852938, -0.0303107808306083, -0.047517881135584, 0.0950415280461933, -0.0283295839106242, -0.0471266024348214, 0.0962218415145261, -0.0933242228973652, -0.0879484905329411, 0.0952307571463896, 0.286812799284425, -0.293168052564464, 0.31744280598414, 0.268065917185613, -0.290754005221206, 0.29669386147487, 0.0830632391737672, -0.0900933984072928, -0.0849037704350176, 0.512469989955714},
    {-0.00845414648597772, -0.0388242292248941, -0.0397405972089105, -0.0404060597147743, 0.148813736423541, -0.200637348699184, 0.101176260361139, 0.144373886169673, -0.192520475532932, 0.0945630986440838, 0.0164797585832577, 0.0101544651668788, 0.0158762632431525, 0.0409046503519659, -0.0859340091226232, 0.315217228925193, 0.00466911836078691, 0.00453257711872145, 0.0529220359416226, 0.00436393180135328, 0.00434920969571931, 0.0513431096922212, -0.072540164975116, -0.0706572068035243, 0.152910931948857, -0.0323792426830047, -0.235529178416942, 0.509714264151844, -0.0302628453445955, -0.226000740762852, 0.476397922489345, -0.00345439468696766, -0.0257971697390769, -0.0251275408296197, 0.17950290116164},
    {-0.0416227987271907, -0.0223221930862675, -0.0235167508261139, 0.193565613495663, 0.111110855045382, -0.212909749655552, 0.225973035491152, 0.105185433623048, -0.200733059401549, 0.211202809530412, 0.00364519880726559, 0.0025520709033634, 0.00359886187881335, 0.215301987909138, -0.475633610993708, 0.704024776218103, 0.00746128548883354, 0.00604708911874117, 0.0119964688656597, 0.00697359512175868, 0.00570124525176747, 0.0113567101887968, -0.0196996312866689, -0.019528901491869, 0.0532316098304127, -0.0466779452874254, -0.0650977632975982, 0.17744258365649, -0.0436269449865271, -0.0613747055175499, 0.165844442975822, -0.00151189078517698, -0.00212693902228531, -0.00210850558779378, 0.0162757165526541},
    {0.0204785007083077, -0.039027197902714, 0.019680460685236, -0.0264567387485711, -0.00832019668364345, -0.0348389537831831, 0.0625461354887269, 0.00863984186151997, 0.00744901063083607, 0.0185215666392738, 0.105647693518024, -0.0730775632041425, -0.0301276360720807, -0.0085157157935731, -0.0333053616823684, 0.0617399069520702, -0.104129884165233, 0.326737978236299, -0.100427651936955, -0.0308356155601946, -0.0698607279807287, 0.104285879799548, -0.029241950164412, 0.0404995390633586, -0.050479941603101, 0.13074403767017, 0.135001418728343, -0.168270155447477, 0.0387167710278796, -0.0288650172890903, -0.0498292480129826, 0.473427364194998, -0.352960453307861, 0.488843445330789, 0.195610458802931},
    {0.0229180783083819, -0.0412289201478098, 0.0231559130793075, -0.026654809217297, -0.041412797822325, -0.0344432021170082, 0.0669458661735615, 0.044507557563509, 0.0130053645486451, 0.0198244433787761, 0.0928722307670984, -0.0397190965835419, -0.025589625169532, -0.0405003872011951, -0.0325826767811743, 0.0660829244858204, -0.0845106204926893, 0.0995092818183707, -0.085300617797373, -0.0250258321629454, -0.03757358220137, 0.0916750945711956, -0.123050027966021, 0.0965028065407849, -0.0659348811061903, 0.308280423369521, 0.321683063451447, -0.219787748178932, 0.0912899951436845, -0.121463895694101, -0.0650849711590207, 0.190491367305736, -0.253454100119439, 0.198773071368574, 0.615800310043552},
    {0.00445003802812082, -0.0407212506634908, 0.00551430449164192, 0.0230686829582336, -0.017812894403291, 0.0160562855400303, -0.0684704372430771, 0.0946630119350781, -0.047195250329771, -0.0202759092357742, 0.0648786933676808, -0.00398048830131889, -0.00361520981062476, -0.0142731556284249, 0.0126780247385569, -0.0675878436185248, -0.00978231801921586, 0.00106927559029878, -0.0120509631645791, -0.00289680335425581, -0.00314298902008463, 0.0640423978299101, -0.180307040223523, 0.0181650547242117, 0.147611580037063, 0.0484357451336119, 0.0605515078877836, 0.492049371094327, 0.0143431064798044, -0.1779828569618, 0.145708845883514, 0.00983025986835735, -0.121983179760304, 0.0122892102994556, 0.556673193850382},
    {-0.031366783970279, -0.0325842462113071, -0.0307674372271626, -0.0404060597147743, 0.132351652535693, -0.22451483832234, 0.223786114643476, 0.117677353552572, -0.149900211650407, 0.0662689933266995, 0.0297104756427882, 0.00884739960662246, 0.00989517130488747, 0.134459259594934, -0.22671291901406, 0.22090147996024, 0.0339474710854874, 0.0133810337451635, 0.0329846263837702, 0.0100527449542904, 0.00893401881804101, 0.0293275034077541, -0.124927592957268, -0.0554087576283441, 0.237018217078895, -0.188943690958863, -0.184699901845772, 0.790078018420279, -0.0559512292137641, -0.123317258606937, 0.23396301872294, -0.0141262323000572, -0.0311344051983631, -0.0138089486133687, 0.194985960648534},
    {-0.0380744421614193, -0.0166949234470743, -0.0382757664925027, 0.193565613495663, 0.190282673186367, -0.394592727959425, 0.499817125541642, 0.0777809136606018, -0.145888070814491, 0.148009083628169, 0.00596201646672426, 0.00343753510190088, 0.00431913334314864, 0.189049666937128, -0.391279045283166, 0.493374412069855, 0.0144909229560623, 0.00921963972304149, 0.0143974263037847, 0.0042911459372843, 0.00340866761471952, 0.00588516523084976, -0.0316674787804406, -0.0253641329762115, 0.0825111788505982, -0.0849337495146657, -0.0845489606991816, 0.275043283538423, -0.0251511318687753, -0.0312592804980486, 0.0814475980799758, -0.0019278696443797, -0.00239606783073481, -0.00191913551123349, 0.0176795818158102},
    {-0.00825021336394387, -0.0388609269646536, -0.0406552941435215, -0.0264567387485711, 0.071557283824799, -0.134890782233764, 0.0993175900782414, 0.00787957016710444, 0.00589174064932513, 0.0100359892367157, 0.152996834530156, -0.223792873623523, 0.140400217113784, 0.00217839861878943, 0.00257050400901632, 0.0334540297651138, 0.0422977505056146, -0.0976384591715583, 0.468010968482276, 0.00427416501424574, 0.0042646389124026, 0.0515352884852302, -0.0367262893430387, 0.0849668890239082, -0.043433717653176, -0.0160232908424757, 0.283229163305198, -0.144782228129851, -0.00161914495010553, -0.0123708436327974, -0.0146301665398265, -0.0314387773391318, -0.240203447161016, 0.555714721066931, 0.0911974510521011},
    {-0.0198488651832074, -0.0363573468678739, -0.0261022528933716, -0.026654809217297, 0.103392980678712, -0.158623419731344, 0.106303963340101, 0.0364627551749937, 0.00947054301501509, 0.0107419585096759, 0.120816788744321, -0.133203458467504, 0.0346180719574671, 0.0247556540621011, 0.00927424233248094, 0.0358073121883814, 0.0820261281050843, -0.130442483751308, 0.115396099214526, 0.0082886962736767, 0.00778801235936338, 0.0406957966216644, -0.142285209974459, 0.240816478080212, -0.0567313851505342, -0.139335993251802, 0.80273916557744, -0.189108756762996, -0.0140798274249356, -0.0479271964399368, -0.0191093384963022, -0.0466525233047002, -0.158803412951156, 0.268773392686982, 0.287098240946532},
    {-0.0353856505415783, -0.0306200848898892, 0.0194477483558447, 0.0230686829582336, -0.093124922946217, 0.258170653831508, -0.108724843916401, 0.0675319354986144, -0.030998621592805, -0.0109865871941614, 0.073494808886703, -0.0420380180389089, -0.0102411188979747, 0.0909039607293701, -0.0534182819067341, -0.0366227589868138, 0.0989305159332579, -0.0724418888007598, -0.0341378102706134, 0.00999687560186183, 0.00869811756323144, 0.024755912040759, -0.18805395200869, 0.158263574599542, 0.127007272315765, -0.324063410110059, 0.527556796894204, 0.423366841894701, -0.0327464338725472, -0.0633438900701261, 0.0427809924212845, -0.0356378486920947, -0.0689369712339991, 0.0580163903657518, 0.259532014079741},
    {-0.0413330967980871, -0.0211218344402417, 0.00142320657028388, -0.0404060597147743, -0.00728506876419383, 0.0170939377878666, 0.355352052140279, 0.0739927864951072, -0.0899360086693542, 0.0359081343769532, 0.0296641416306708, -0.000404151390212579, -0.000295127767531036, 0.157864947105883, -0.219648979514327, 0.119696401413182, 0.0632889822277057, -0.000987051146063558, -0.000983780760084381, 0.00639531772709702, 0.00519315335829079, 0.00999203742546731, -0.119018761769261, 0.00228590380671457, 0.203934117044056, -0.290677226535459, 0.00761984615430339, 0.679795270879218, -0.0293727779195008, -0.0400901511575048, 0.0686929477078467, -0.011775718763449, -0.0160723764878064, 0.000308690042227478, 0.0909062977046968},
    {-0.0266278562476344, -0.00968209848012832, -0.0414545183650565, 0.193565613495663, 0.218312526315296, -0.496518111503194, 0.793664260801163, 0.0445686382427211, -0.082082885171145, 0.0801993480982715, 0.00542469327662722, 0.00243369411063683, 0.00268508780292869, 0.126759861966115, -0.245715646165503, 0.267337012340232, 0.0154286376713808, 0.00728527901666089, 0.00895048860280734, 0.00155905556593928, 0.00120438047899971, 0.00182724782387435, -0.0282925447705456, -0.0172937233551124, 0.070993886514469, -0.084693915247572, -0.0576470064111893, 0.236651468687048, -0.00855827473431757, -0.00953003022061854, 0.0239135040502402, -0.00104167453261515, -0.00115995221981669, -0.000709016914432494, 0.00824256947780757},
    {-0.0398714950680975, -0.0185850635184789, 0.256494600498464, -0.0264567387485711, 0.294923085078976, -0.257360821304334, 0.128736049066641, 0.00353082203659215, 0.00238662360542696, 0.00324722840044395, 0.0888647963864357, -0.172960417191053, 0.187229962453518, 0.0081481347710832, 0.00616862571740957, 0.0108243316129864, 0.205074719104349, -0.447044969785973, 0.624113536703126, 0.00517278926079166, 0.00414565073336059, 0.00747189331800406, -0.0192837443583842, 0.0524520573990262, -0.0182160268238259, -0.0498420450994394, 0.174844018669227, -0.060721418605846, -0.00125721198962144, -0.00162140787439521, -0.00153163248710622, -0.0316418914106896, -0.0408080835352966, 0.110998564394833, 0.0123754785904181},
    {-0.037635937926108, -0.016308497575577, -0.00474578684781529, -0.026654809217297, 0.669144967779083, -0.31338587445254, 0.13779182750758, 0.0154769114656853, 0.00369162422462739, 0.00347565067341833, 0.066471596317428, -0.102581776488159, 0.0724910994750197, 0.0379956047588088, 0.00997162717358071, 0.01158575585716, 0.163186854623018, -0.277088665503787, 0.241642287804682, 0.00411621292367488, 0.00326405021199635, 0.00558903746542617, -0.0718913052701171, 0.153939814567603, -0.0237930458061849, -0.194189129108341, 0.513143947956848, -0.0793118888261497, -0.00489821195904191, -0.00604473520801723, -0.00200055710701374, -0.0210372701776151, -0.0259614587499541, 0.0555908969917341, 0.0389591824463453},
    {-0.0320953472655634, -0.0125039973795695, -0.0175985869100487, 0.0230686829582336, 0.13722625562885, 0.575928446322043, -0.140929787262841, 0.0264907481816322, -0.0114343437918564, -0.00355480233381646, 0.0373693630686831, -0.0345917672852212, 0.00488282708533206, 0.0711243588603505, -0.0328899499342603, -0.0118496005007186, 0.100332084660509, -0.0995003749107849, 0.0162764465761882, 0.00253076894271223, 0.00197545632867078, 0.00314207544005117, -0.0899135885916031, 0.114233971421773, 0.0532666325687123, -0.258629046058044, 0.380788240201603, 0.17755932867304, -0.00652363956815718, -0.00756007743351926, 0.00447874312604042, -0.00920261873617919, -0.0106646772112095, 0.0135493249780211, 0.0352184501509472},
    {-0.0224172392883414, -0.00781686379284149, 0.0200527846384615, -0.0404060597147743, -0.121039277759041, 0.409587603262319, 0.460609436699216, 0.0267417912642992, -0.0313547065949565, 0.0116183777209745, 0.0138965470222835, -0.00337612014232496, -0.00158655594443216, 0.0787502465351571, -0.0961276701025705, 0.0387287735102246, 0.0409230815234591, -0.0103505533462799, -0.00528863558311487, 0.00103224072449091, 0.000792354457710787, 0.0011684437601996, -0.0537846767144484, 0.0177221041814198, 0.0855296195465342, -0.164893766239597, 0.0590749737571153, 0.28510497277546, -0.00415926793366308, -0.00452230110117091, 0.0071914663485204, -0.00216139083007456, -0.00235004339388619, 0.000774341622957371, 0.0123359691307151},
    {-0.0103777659891155, -0.00330330498807969, -0.0373255322657574, 0.193565613495663, 0.206363312425294, -0.508716820740599, 1.02875232011214, 0.0150615693989052, -0.0273436744040659, 0.0259491709984156, 0.00237623863762121, 0.000830636966295262, 0.000821230322520647, 0.0478241068894881, -0.0882267290306914, 0.0864991301291091, 0.0075451294344396, 0.00268012197136591, 0.00273749433220907, 0.000190317776272956, 0.000144057321402164, 0.000199797921341429, -0.0122165977986352, -0.00573300288221721, 0.0297747144603598, -0.0394179087905202, -0.0191104279350486, 0.0992512208124507, -0.000994274360901144, -0.00102719095943713, 0.00250350531445981, -0.000156865004581861, -0.000162058201332599, -7.60506444297659e-05, 0.00111851527565568},
    {0.0110397084453419, 0.0110397084453415, -0.0284861396506215, -0.0264567387485711, 0.00553719265411168, 0.00387645332275314, 0.0056851505033398, -0.00532960946394797, -0.0471747144498051, 0.0685612292883655, -0.0059236732947185, -0.051494897433611, 0.0742201751917336, -0.00532960946394821, -0.047174714449805, 0.0685612292883655, -0.00592367329471862, -0.0514948974336111, 0.0742201751917336, -0.071437743424733, 0.626670020194433, -0.0714377434247327, 0.0168328829533167, -0.0166809358407569, -0.0169848300658762, 0.0168328829533165, -0.016680935840757, -0.0169848300658761, 0.202999577068119, 0.202999577068119, -0.204832014189666, 0.225626883480278, 0.225626883480278, -0.223590194129101, 0.0730881651359096},
    {0.0226472627625869, 0.0226472627625866, -0.0255216716723957, -0.026654809217297, 0.024696863491794, 0.00606875645427728, 0.0060850653969139, -0.0444953983204547, -0.0494918367818091, 0.0733840843206221, -0.00843934418035731, -0.0266321723423492, 0.0564900593294371, -0.044495398320455, -0.0494918367818089, 0.073384084320622, -0.00843934418035738, -0.0266321723423492, 0.0564900593294372, -0.101775988349476, 0.217190315123543, -0.101775988349475, 0.0425631972267723, -0.0629414886189147, -0.0221849058346295, 0.0425631972267721, -0.0629414886189149, -0.0221849058346294, 0.513299537557785, 0.513299537557785, -0.26754338601508, 0.0973563925390682, 0.0973563925390682, -0.143968420425006, 0.230088488246688},
    {0.0126912385078023, 0.0126912385078019, -0.0201879061271679, 0.0230686829582336, 0.043383576915687, -0.0191358805337486, -0.00622364176003369, -0.0433014820764305, 0.0438748525012586, -0.0750552741686712, -0.00269752837971155, -0.00441018792091285, 0.0325930683139907, -0.0433014820764309, 0.0438748525012588, -0.0750552741686713, -0.0026975283797116, -0.00441018792091289, 0.0325930683139907, -0.0325313923782026, 0.0101117032054846, -0.0325313923782023, 0.0152360203786706, -0.0801384532583206, 0.0496664125009796, 0.0152360203786705, -0.0801384532583207, 0.0496664125009796, 0.183741887925501, 0.1837418879255, 0.598962207492992, 0.0114464663437145, 0.0114464663437144, -0.0602061486700867, 0.207996149939306},
    {-0.0259817649692685, -0.0259817649692689, -0.0130520026587977, -0.0404060597147743, 0.0450304029511844, -0.053477017443967, 0.0203411087250163, 0.114761862471351, -0.203918001595269, 0.245307739602699, 0.00263363620816371, 0.00286675838902461, 0.0124623705253957, 0.114761862471351, -0.203918001595269, 0.245307739602699, 0.00263363620816373, 0.00286675838902457, 0.0124623705253957, 0.0317608717348786, 0.0109314929980696, 0.0317608717348789, -0.0154473212203454, -0.0488541451322856, 0.0797487875729765, -0.0154473212203455, -0.0488541451322855, 0.0797487875729765, -0.186290113420392, -0.186290113420392, 0.961746730723858, -0.00427511698888075, -0.00427511698888096, -0.0135206087096315, 0.0728548267729459},
    {-0.0395812800366691, -0.0395812800366694, -0.00567499956393999, 0.193565613495663, 0.0259638427028639, -0.047378898473653, 0.0454310335985989, 0.198592301718684, -0.417854165752404, 0.547884793820534, 0.00138364292022561, 0.00118219189796389, 0.00218156026497216, 0.198592301718684, -0.417854165752403, 0.547884793820534, 0.00138364292022574, 0.00118219189796387, 0.00218156026497222, 0.016686323334991, 0.010426240904644, 0.0166863233349912, -0.00824441658062001, -0.0112734483867722, 0.0277622815480123, -0.00824441658062016, -0.0112734483867722, 0.0277622815480124, -0.0994252192973006, -0.0994252192973007, 0.33480488329435, -0.000692720712646088, -0.00069272071264627, -0.000947229088207427, 0.00660582365173814},
    {0.0231926089616707, 0.0231926089616704, -0.0207049086523348, -0.0264567387485711, 0.0051246288316901, 0.005361881137819, 0.028277822772303, -0.00884030110212681, -0.0253079998695848, 0.0572648931538839, -0.0488727493359342, -0.0382116124490961, 0.0573726111042974, -0.00884030110212705, -0.0253079998695847, 0.0572648931538839, -0.0488727493359342, -0.0382116124490961, 0.0573726111042975, -0.0989712960362719, 0.180358247044557, -0.0989712960362716, 0.0449170317499106, -0.0192713835165082, -0.0705626799833125, 0.0449170317499104, -0.0192713835165084, -0.0705626799833124, 0.0909606458976599, 0.0909606458976598, -0.1428951713303, 0.502867130319971, 0.502867130319971, -0.215752131178203, 0.253612572333923},
    {0.0203118679564711, 0.0203118679564708, -0.0297236815267526, -0.026654809217297, 0.035177482531519, 0.0120047522387556, 0.0302669913049303, -0.0336736952599976, -0.0229283032998649, 0.0612931213666139, -0.0317678906673699, -0.0244061024903268, 0.067205504344106, -0.0336736952599979, -0.0229283032998648, 0.0612931213666139, -0.03176789066737, -0.0244061024903269, 0.0672055043441061, -0.0643325647607152, 0.0466140832510671, -0.0643325647607149, 0.0980791269856963, -0.10399210307101, -0.0921661509003818, 0.0980791269856962, -0.103992103071011, -0.0921661509003818, 0.198618216568047, 0.198618216568046, -0.186643958631942, 0.187377171996244, 0.187377171996244, -0.198673731937171, 0.798396474451869},
    {-0.00180109126924717, -0.00180109126924747, -0.0397189812555842, 0.0230686829582336, 0.0984497965965411, -0.0544785376003365, -0.0309562673116838, 0.00555831011591593, -0.00456747434668142, -0.0626889613928461, 0.00172230489950953, 0.00130705701651777, 0.0617766811608771, 0.00555831011591584, -0.00456747434668153, -0.0626889613928462, 0.00172230489950954, 0.00130705701651783, 0.0617766811608771, 0.0034878076308415, 0.000109583510416225, 0.00348780763084166, -0.00788925500828095, -0.190558271548702, 0.206336781565265, -0.0078892550082814, -0.190558271548702, 0.206336781565265, -0.0159763836399549, -0.0159763836399548, 0.41784878012689, -0.00495046214509456, -0.00495046214509461, -0.119574219460049, 0.721737076359336},
    {-0.0344714874951157, -0.0344714874951161, -0.0397405972089105, -0.0404060597147743, 0.148813736423541, -0.200637348699184, 0.101176260361139, 0.144961877454661, -0.236495772351066, 0.204890163784638, 0.0165468756685059, 0.0124739359582676, 0.0343991495923875, 0.144961877454661, -0.236495772351066, 0.204890163784638, 0.0165468756685059, 0.0124739359582676, 0.0343991495923876, 0.0335087702761784, 0.0147033099162969, 0.0335087702761786, -0.0891097027200586, -0.153093192610233, 0.331312598050351, -0.0891097027200588, -0.153093192610233, 0.33131259805035, -0.180454402247565, -0.180454402247565, 0.670934982535923, -0.0205982194095059, -0.0205982194095061, -0.0353883704605547, 0.252802898943637},
    {-0.0368397808547018, -0.0368397808547022, -0.0235167508261139, 0.193565613495663, 0.111110855045382, -0.212909749655552, 0.225973035491152, 0.181682419275111, -0.372044618841556, 0.457613792874258, 0.00629620010329685, 0.00473008406950602, 0.00779766537223647, 0.181682419275111, -0.372044618841556, 0.457613792874257, 0.00629620010329699, 0.00473008406950604, 0.00779766537223654, 0.0127503177700057, 0.00826548491825723, 0.0127503177700059, -0.0365118821743588, -0.0423133323947337, 0.115337096743451, -0.0365118821743589, -0.0423133323947336, 0.115337096743451, -0.0739395337610562, -0.0739395337610563, 0.233567010263676, -0.00256237285897843, -0.00256237285897865, -0.00296951370470126, 0.0229219043272777},
    {0.00674684819158489, 0.00674684819158459, 0.019680460685236, -0.0264567387485711, -0.00832019668364345, -0.0348389537831831, 0.0625461354887269, -0.00194941845888478, -0.00275429046543176, 0.040130736795672, -0.023837422858388, 0.0270206132794256, -0.0652776440045177, -0.00194941845888506, -0.00275429046543177, 0.040130736795672, -0.0238374228583882, 0.0270206132794257, -0.0652776440045176, -0.0152945235567677, 0.00213618979458439, -0.0152945235567674, 0.0108122848147192, 0.0877504788958507, -0.109375048525289, 0.0108122848147191, 0.0877504788958505, -0.109375048525289, 0.00693735836225317, 0.00693735836225292, -0.0701770181336514, 0.0848297829783525, 0.0848297829783518, 0.688462633804094, 0.275487976679251},
    {-0.00609144832973564, -0.0060914483297359, 0.0231559130793075, -0.026654809217297, -0.041412797822325, -0.0344432021170082, 0.0669458661735615, 0.00816434032524264, 0.00350006571141658, 0.0429536839322983, 0.0170362190211201, -0.0106893926364395, -0.0554451214834526, 0.00816434032524237, 0.00350006571141662, 0.0429536839322983, 0.0170362190211199, -0.0106893926364395, -0.0554451214834525, 0.0109307476183433, 0.00108623979023695, 0.0109307476183436, -0.0331158101767775, 0.209092934996116, -0.142861314642561, -0.0331158101767773, 0.209092934996116, -0.142861314642561, -0.0212477054192934, -0.0212477054192938, -0.0916624148143829, -0.0443367802907668, -0.0443367802907674, 0.279942041876281, 0.867262325800607},
    {-0.0273059160603582, -0.0273059160603585, 0.00551430449164192, 0.0230686829582336, -0.017812894403291, 0.0160562855400303, -0.0684704372430771, 0.0736060687804513, -0.0470087115710615, -0.0439318764271495, 0.0504470063733282, -0.00396475546079795, -0.00783308648760195, 0.0736060687804512, -0.0470087115710615, -0.0439318764271495, 0.0504470063733281, -0.00396475546079785, -0.00783308648760187, 0.0323677157521985, 0.0116077934365191, 0.0323677157521987, -0.179594378435846, 0.0393582813059977, 0.319830475565695, -0.179594378435846, 0.0393582813059977, 0.319830475565694, -0.115231015868122, -0.115231015868123, 0.205209043434423, -0.078975278645069, -0.0789752786450694, 0.0173075085100312, 0.783990655632163},
    {-0.041495257276041, -0.0414952572760414, -0.0307674372271626, -0.0404060597147743, 0.132351652535693, -0.22451483832234, 0.223786114643476, 0.16267044412864, -0.236075956919999, 0.14358523664347, 0.0410700625241912, 0.0139336583010178, 0.0214398988443288, 0.16267044412864, -0.236075956919999, 0.14358523664347, 0.0410700625241913, 0.0139336583010179, 0.0214398988443289, 0.0263512982290834, 0.014651155092415, 0.0263512982290836, -0.196746894006264, -0.120054329737058, 0.513548117749587, -0.196746894006265, -0.120054329737058, 0.513548117749587, -0.126236381465238, -0.126236381465238, 0.329501801898471, -0.0318714079092635, -0.0318714079092638, -0.0194478318636186, 0.274608464744932},
    {-0.0301489032012277, -0.0301489032012281, -0.0382757664925027, 0.193565613495663, 0.190282673186367, -0.394592727959425, 0.499817125541642, 0.144932884372864, -0.285213118685387, 0.320691747849012, 0.0111093095019601, 0.00672042684182414, 0.00935827982346662, 0.144932884372864, -0.285213118685387, 0.320691747849012, 0.0111093095019602, 0.00672042684182418, 0.00935827982346671, 0.00712793479758901, 0.00485754998163756, 0.0071279347975892, -0.0619103421784069, -0.0549565468376966, 0.17877723119451, -0.0619103421784071, -0.0549565468376966, 0.178777231194511, -0.0397228002574105, -0.0397228002574106, 0.114706719353092, -0.00304480852812407, -0.0030448085281243, -0.00270281436993947, 0.0248990378775179},
    {-0.0343769182304998, -0.0343769182305, -0.0406552941435215, -0.0264567387485711, 0.071557283824799, -0.134890782233764, 0.0993175900782414, 0.00788538984784701, 0.00721823609719237, 0.0217450095009147, 0.153109834695484, -0.274178701139661, 0.30420559279803, 0.00788538984784677, 0.00721823609719234, 0.0217450095009148, 0.153109834695484, -0.274178701139661, 0.30420559279803, 0.0335225090290038, 0.0146717704862731, 0.0335225090290039, -0.0449950266365197, 0.184098026164553, -0.0941079728915136, -0.0449950266365198, 0.184098026164553, -0.0941079728915135, -0.00985139974635126, -0.00985139974635161, -0.0206043940758698, -0.191283654427672, -0.191283654427673, 0.782640790551171, 0.128437924139626},
    {-0.0389187470326056, -0.0389187470326058, -0.0261022528933716, -0.026654809217297, 0.103392980678712, -0.158623419731344, 0.106303963340101, 0.043269486659534, 0.0132740412274197, 0.0232746353490286, 0.143370417395263, -0.186699769646704, 0.0750070855859965, 0.0432694866595338, 0.0132740412274197, 0.0232746353490287, 0.143370417395263, -0.186699769646704, 0.0750070855859967, 0.0313901201786517, 0.015623546911531, 0.0313901201786519, -0.19942887543603, 0.521777821828825, -0.122920070956765, -0.19942887543603, 0.521777821828826, -0.122920070956765, -0.0436637939734226, -0.043663793973423, -0.0269126356036456, -0.144676927098488, -0.144676927098489, 0.378526989761577, 0.404334788592332},
    {-0.0416440845330912, -0.0416440845330915, 0.0194477483558447, 0.0230686829582336, -0.093124922946217, 0.258170653831508, -0.108724843916401, 0.0988371868179028, -0.0509432594584426, -0.0238046730904876, 0.107564222799895, -0.0690854479984977, -0.0221894645842941, 0.0988371868179027, -0.0509432594584427, -0.0238046730904877, 0.107564222799895, -0.0690854479984976, -0.0221894645842941, 0.0235505618380347, 0.0136322151644978, 0.0235505618380349, -0.309048621426053, 0.342910185746873, 0.275187057105233, -0.309048621426053, 0.342910185746873, 0.275187057105233, -0.067664400675247, -0.0676644006752474, 0.0602506078386308, -0.0736389703529617, -0.0736389703529622, 0.0817073795230783, 0.365511894813098},
    {-0.0356039400495367, -0.0356039400495371, 0.00142320657028388, -0.0404060597147743, -0.00728506876419383, 0.0170939377878666, 0.355352052140279, 0.130111458040874, -0.16881787441171, 0.0778022678950679, 0.0521624458534589, -0.000758628047271481, -0.000639454263807766, 0.130111458040874, -0.16881787441171, 0.0778022678950678, 0.0521624458534589, -0.000758628047271352, -0.000639454263807677, 0.0114206645547966, 0.0074921282620067, 0.0114206645547968, -0.223408784471073, 0.00495287498050894, 0.441864693961637, -0.223408784471073, 0.00495287498050905, 0.441864693961637, -0.0489140557788821, -0.0489140557788823, 0.0967437083475862, -0.0196099315498982, -0.0196099315498986, 0.000434743600494099, 0.128027878342123},
    {-0.0190914618206938, -0.0190914618206941, -0.0414545183650565, 0.193565613495663, 0.218312526315296, -0.496518111503194, 0.793664260801163, 0.0893574291686465, -0.168781804564629, 0.173768180219252, 0.010876182543159, 0.0050042500686367, 0.00581778820286796, 0.0893574291686464, -0.168781804564629, 0.173768180219252, 0.0108761825431591, 0.00500425006863675, 0.00581778820286806, 0.00238127699784452, 0.00170109878674923, 0.00238127699784471, -0.0581761563588038, -0.0374703648831509, 0.153822677600759, -0.058176156358804, -0.0374703648831508, 0.153822677600759, -0.0127373315416965, -0.0127373315416967, 0.0336785818428491, -0.00155033044537092, -0.00155033044537114, -0.000998543924408258, 0.0116084221772978},
    {-0.0326406157545147, -0.0326406157545149, 0.256494600498464, -0.0264567387485711, 0.294923085078976, -0.257360821304334, 0.128736049066641, 0.00642722051909655, 0.00459034567367259, 0.00703578000671514, 0.161762228976998, -0.332665821692273, 0.405671749578322, 0.00642722051909637, 0.00459034567367254, 0.00703578000671523, 0.161762228976998, -0.332665821692273, 0.405671749578322, 0.00884075179197743, 0.00593350265065438, 0.00884075179197758, -0.0370896576596453, 0.113648038034127, -0.039468722714836, -0.0370896576596456, 0.113648038034127, -0.0394687227148359, -0.00202705204726703, -0.0020270520472672, -0.00215707451161483, -0.0510174587045983, -0.0510174587045984, 0.156324820802352, 0.0174290044518855},
    {-0.0296117205882892, -0.0296117205882894, -0.00474578684781529, -0.026654809217297, 0.669144967779083, -0.31338587445254, 0.13779182750758, 0.0289705339871303, 0.00724008938007487, 0.00753070326528911, 0.124425189390175, -0.201185490545444, 0.157066693639851, 0.0289705339871301, 0.00724008938007489, 0.00753070326528919, 0.124425189390175, -0.201185490545444, 0.157066693639851, 0.00680017964035805, 0.0046479469952747, 0.0068001796403582, -0.140994706973029, 0.333541881262226, -0.0515524673161673, -0.140994706973029, 0.333541881262226, -0.0515524673161673, -0.00770574945841262, -0.00770574945841286, -0.00281748446895541, -0.033095328383736, -0.0330953283837364, 0.078291436090676, 0.0548681620139455},
    {-0.0238587390077672, -0.0238587390077674, -0.0175985869100487, 0.0230686829582336, 0.13722625562885, 0.575928446322043, -0.140929787262841, 0.0516830959726856, -0.0230765940922685, -0.00770220141726749, 0.0729071283557038, -0.069812504075992, 0.0105796368307601, 0.0516830959726856, -0.0230765940922685, -0.00770220141726753, 0.0729071283557039, -0.0698125040759921, 0.0105796368307601, 0.00398457556955565, 0.00279728294272438, 0.00398457556955582, -0.181462043216282, 0.247511105811688, 0.115412980620876, -0.181462043216282, 0.247511105811688, 0.115412980620876, -0.00991740095253239, -0.00991740095253264, 0.00630763758446083, -0.0139900524648018, -0.0139900524648023, 0.019082190933999, 0.049599901933864},
    {-0.0157278293793878, -0.0157278293793882, 0.0200527846384615, -0.0404060597147743, -0.121039277759041, 0.409587603262319, 0.460609436699216, 0.0545185779694687, -0.0652095057519489, 0.0251735756155996, 0.028330936205915, -0.00702143791948676, -0.00343759576377357, 0.0545185779694685, -0.0652095057519491, 0.0251735756155995, 0.0283309362059151, -0.0070214379194867, -0.00343759576377348, 0.00154836377203018, 0.00111786707593395, 0.00154836377203036, -0.111857917565132, 0.0383985389692675, 0.185317296160997, -0.111857917565132, 0.0383985389692676, 0.185317296160997, -0.0061133435871573, -0.00611334358715755, 0.0101281011548915, -0.00317683904502398, -0.00317683904502428, 0.00109054397332591, 0.0173733613069338},
    {-0.00694959127879952, -0.00694959127879992, -0.0373255322657574, 0.193565613495663, 0.206363312425294, -0.508716820740599, 1.02875232011214, 0.0318555707589298, -0.0582963548319231, 0.0562241505637624, 0.00502580017102, 0.0017709071066346, 0.00177936232736481, 0.0318555707589295, -0.0582963548319232, 0.0562241505637623, 0.00502580017102009, 0.00177090710663463, 0.00177936232736491, 0.000274673835474753, 0.000202936928471036, 0.00027467383547495, -0.0260456261138861, -0.0124217154086329, 0.0645129676364052, -0.0260456261138865, -0.0124217154086329, 0.0645129676364054, -0.00142346527490199, -0.0014234652749022, 0.00352581154354903, -0.000224577737946762, -0.000224577737946965, -0.000107105920037836, 0.00157526091427275},
    {-0.012627139815574, -0.0277140447911065, -0.0284861396506215, -0.0264567387485711, 0.00553719265411168, 0.00387645332275314, 0.0056851505033398, 0.103801960721004, -0.157420166190056, 0.105479347123269, 0.115372225079874, -0.171836446844088, 0.114185461723149, 0.00325794945141088, 0.00367985906664897, 0.0316431114534618, 0.00362109612184803, 0.0040168545250835, 0.034254888660318, 0.0671839478266712, -0.163121764729731, 0.64215295174539, 0.0561706681825991, -0.0256631078548465, -0.0261306397937106, -0.00131304741694854, -0.00769876382666736, -0.00783902033804146, -0.0243616038309393, 0.312641628866867, -0.145441135965869, -0.0270770650281287, 0.347490164197526, -0.158760396677319, 0.0518963102768923},
    {-0.0234599611173092, -0.0361820508672742, -0.0255216716723957, -0.026654809217297, 0.024696863491794, 0.00606875645427728, 0.0060850653969139, 0.179952332893617, -0.18696061832771, 0.112899161577485, 0.0341311625622492, -0.100605831836208, 0.0869082226043882, 0.0287184488864873, 0.0104029545786964, 0.0338690070637595, 0.00544696493631892, 0.00559795912265052, 0.0260718960544861, 0.101060175091015, -0.172456730934776, 0.18997143177811, 0.160786953747622, -0.0968335485725664, -0.0341307967741619, -0.00894658667501576, -0.0290494286652631, -0.010239014895097, -0.165990349931469, 0.894927846626024, -0.189969395829684, -0.031483024010724, 0.169738993229577, -0.102224892396147, 0.163374515627626},
    {-0.0371334490119631, 0.0142516980277665, -0.0201879061271679, 0.0230686829582336, 0.043383576915687, -0.0191358805337486, -0.00622364176003369, -0.0742448752547493, 0.315595803207861, -0.115470235870068, -0.00462519175889463, -0.0317228826959173, 0.0501434353232526, 0.0941935371605895, -0.0541774865549495, -0.0346403124672741, 0.00586792247035822, 0.00544578233700503, 0.0150427013047288, 0.108870403831837, -0.0898137949654954, -0.0257434624174613, 0.109594079865224, -0.123290550897265, 0.0764102513758065, -0.0188137222613497, -0.0369863556193762, 0.0229225736261528, -0.349060089072391, 0.60999223886469, 0.425293595842598, -0.0217452025045107, 0.0380003477210525, -0.0427494241530003, 0.147687833092773},
    {-0.0409323784102901, 0.00638473930951457, -0.0130520026587977, -0.0404060597147743, 0.0450304029511844, -0.053477017443967, 0.0203411087250163, -0.0337564627061267, 0.0846428086527526, 0.37739842891015, -0.000774667128329098, -0.00118994144645211, 0.0191729745844869, 0.155250849713371, -0.213621118662252, 0.113217050295249, 0.00356280606072754, 0.00300316857367646, 0.00575176646630453, 0.066102464128542, -0.00475338070602042, -0.00431173779245622, 0.00641191382821829, -0.0751606029574704, 0.122691062199162, -0.0161823576810783, -0.0225476873071008, 0.0368065129467911, -0.300239109257121, 0.035688220351794, 0.68288903754282, -0.00689009895986802, 0.000818998466035112, -0.00960031905880675, 0.051730628185115},
    {-0.02557815590343, -0.0409997915183174, -0.00567499956393999, 0.193565613495663, 0.0259638427028639, -0.047378898473653, 0.0454310335985989, 0.218085988961728, -0.504176529159724, 0.842903940766471, 0.00151946038197766, 0.00142641489966468, 0.00335626351580565, 0.121442089297963, -0.234455394972282, 0.252865646874596, 0.000846117828437168, 0.000663320581885435, 0.00100685701413871, 0.0156984333273982, 0.00705864170483445, 0.00845719989080249, -0.00994758860206473, -0.0173438543621095, 0.0427114181401302, -0.00462589128971532, -0.005203042411435, 0.0128131449558944, -0.085826398582723, -0.0553675148342017, 0.237728475921549, -0.000597974280673127, -0.000385759514582799, -0.0006725807738298, 0.0046904703822781},
    {-0.0249565292980642, -0.0324041991309082, -0.0207049086523348, -0.0264567387485711, 0.0051246288316901, 0.005361881137819, 0.028277822772303, 0.0290254836500228, -0.098124083418682, 0.0881002806637314, 0.160464578117202, -0.148153922350204, 0.08826600142459, 0.00604184678738162, 0.00607574336483797, 0.0264295056440364, 0.0334017654098673, 0.00917354006613401, 0.0264792207840049, 0.104064055106665, -0.167878620871497, 0.149976167089159, 0.174152149243713, -0.0296484321034244, -0.108558517593135, -0.0107833238118004, -0.00889433492959207, -0.0325668423734901, -0.0335957213522821, 0.162769080505943, -0.101462831015625, -0.185730695079488, 0.899853113520492, -0.153194973792325, 0.180077810401831},
    {-0.0328037714586731, -0.0033576855968936, -0.0297236815267526, -0.026654809217297, 0.035177482531519, 0.0120047522387556, 0.0302669913049303, 0.00970388431266683, -0.112584145831108, 0.0942975861431183, 0.00915468093161173, -0.11984053795887, 0.103393605903581, 0.0381271103420095, 0.0126102731283715, 0.0282886565901095, 0.0359692591934384, 0.0134230437541296, 0.0310174027846309, 0.112063147708537, -0.125885306539981, 0.00855630552958881, 0.481594934920914, -0.159988659068097, -0.141794794590807, -0.0539422635555038, -0.0479955470739246, -0.042537507209957, -0.168058502846675, 0.450116550808096, -0.132526692528935, -0.158547023215991, 0.424641645748689, -0.141068442713085, 0.566902057057851},
    {-0.0407169244982232, 0.0234342855627474, -0.0397189812555842, 0.0230686829582336, 0.0984497965965411, -0.0544785376003365, -0.0309562673116838, -0.0978204961038313, 0.166049912400659, -0.0964450431852937, -0.0303107808306083, -0.0475178811355841, 0.0950415280461932, 0.0996724370913469, -0.0540299424420021, -0.0289328796003986, 0.030884625572964, 0.0154615461435878, 0.028511834275561, 0.0962218415145259, -0.0471266024348214, -0.028329583910624, 0.286812799284425, -0.293168052564463, 0.31744280598414, -0.0933242228973654, -0.0879484905329412, 0.0952307571463896, -0.290754005221206, 0.268065917185612, 0.29669386147487, -0.0900933984072929, 0.0830632391737669, -0.0849037704350176, 0.512469989955714},
    {-0.0388242292248937, -0.0084541464859781, -0.0397405972089105, -0.0404060597147743, 0.148813736423541, -0.200637348699184, 0.101176260361139, 0.0409046503519659, -0.0859340091226229, 0.315217228925193, 0.00466911836078682, 0.0045325771187213, 0.0529220359416226, 0.144373886169673, -0.192520475532931, 0.0945630986440835, 0.0164797585832577, 0.0101544651668788, 0.0158762632431525, 0.051343109692221, 0.00434920969571931, 0.00436393180135349, -0.0323792426830043, -0.235529178416942, 0.509714264151844, -0.0725401649751161, -0.0706572068035243, 0.152910931948857, -0.226000740762852, -0.0302628453445958, 0.476397922489345, -0.0257971697390768, -0.00345439468696804, -0.0251275408296197, 0.17950290116164},
    {-0.022322193086267, -0.041622798727191, -0.0235167508261139, 0.193565613495663, 0.111110855045382, -0.212909749655552, 0.225973035491152, 0.215301987909138, -0.475633610993708, 0.704024776218104, 0.00746128548883341, 0.00604708911874112, 0.0119964688656596, 0.105185433623048, -0.200733059401549, 0.211202809530411, 0.00364519880726568, 0.0025520709033634, 0.00359886187881341, 0.0113567101887965, 0.00570124525176746, 0.00697359512175882, -0.0466779452874252, -0.0650977632975984, 0.17744258365649, -0.019699631286669, -0.019528901491869, 0.0532316098304127, -0.0613747055175497, -0.0436269449865273, 0.165844442975822, -0.00212693902228517, -0.0015118907851772, -0.00210850558779377, 0.0162757165526541},
    {-0.0390271979027138, 0.0204785007083074, 0.019680460685236, -0.0264567387485711, -0.00832019668364345, -0.0348389537831831, 0.0625461354887269, -0.00851571579357287, -0.0333053616823684, 0.0617399069520702, -0.104129884165233, 0.326737978236299, -0.100427651936955, 0.00863984186151964, 0.00744901063083607, 0.0185215666392738, 0.105647693518024, -0.0730775632041428, -0.0301276360720805, 0.104285879799548, -0.0698607279807286, -0.0308356155601945, 0.13074403767017, 0.135001418728343, -0.168270155447476, -0.0292419501644121, 0.0404995390633586, -0.0504799416031009, -0.02886501728909, 0.0387167710278794, -0.0498292480129826, -0.352960453307861, 0.473427364194998, 0.488843445330789, 0.195610458802931},
    {-0.0412289201478096, 0.0229180783083816, 0.0231559130793075, -0.026654809217297, -0.041412797822325, -0.0344432021170082, 0.0669458661735615, -0.0405003872011949, -0.0325826767811742, 0.0660829244858204, -0.0845106204926892, 0.0995092818183704, -0.0853006177973731, 0.0445075575635087, 0.0130053645486453, 0.0198244433787761, 0.0928722307670984, -0.0397190965835421, -0.0255896251695319, 0.0916750945711954, -0.03757358220137, -0.0250258321629452, 0.308280423369521, 0.321683063451447, -0.219787748178932, -0.123050027966021, 0.0965028065407849, -0.0659348811061903, -0.1214638956941, 0.0912899951436841, -0.0650849711590207, -0.253454100119439, 0.190491367305735, 0.198773071368574, 0.615800310043553},
    {-0.0407212506634905, 0.00445003802812046, 0.00551430449164192, 0.0230686829582336, -0.017812894403291, 0.0160562855400303, -0.0684704372430771, -0.0142731556284247, 0.0126780247385571, -0.0675878436185247, -0.00978231801921584, 0.00106927559029855, -0.0120509631645792, 0.0946630119350779, -0.0471952503297709, -0.0202759092357743, 0.0648786933676808, -0.00398048830131895, -0.00361520981062468, 0.0640423978299099, -0.00314298902008462, -0.0028968033542556, 0.048435745133612, 0.0605515078877836, 0.492049371094326, -0.180307040223523, 0.0181650547242117, 0.147611580037063, -0.1779828569618, 0.014343106479804, 0.145708845883514, -0.121983179760304, 0.00983025986835689, 0.0122892102994556, 0.556673193850382},
    {-0.0325842462113066, -0.0313667839702793, -0.0307674372271626, -0.0404060597147743, 0.132351652535693, -0.22451483832234, 0.223786114643476, 0.134459259594934, -0.22671291901406, 0.22090147996024, 0.0339474710854873, 0.0133810337451633, 0.0329846263837701, 0.117677353552572, -0.149900211650407, 0.0662689933266993, 0.0297104756427882, 0.00884739960662248, 0.00989517130488752, 0.0293275034077539, 0.008934018818041, 0.0100527449542906, -0.188943690958862, -0.184699901845772, 0.790078018420279, -0.124927592957268, -0.0554087576283441, 0.237018217078895, -0.123317258606937, -0.0559512292137643, 0.23396301872294, -0.0311344051983629, -0.0141262323000576, -0.0138089486133687, 0.194985960648534},
    {-0.0166949234470739, -0.0380744421614197, -0.0382757664925027, 0.193565613495663, 0.190282673186367, -0.394592727959425, 0.499817125541642, 0.189049666937128, -0.391279045283166, 0.493374412069855, 0.0144909229560622, 0.00921963972304141, 0.0143974263037846, 0.0777809136606014, -0.145888070814491, 0.148009083628169, 0.00596201646672435, 0.00343753510190089, 0.00431913334314872, 0.00588516523084954, 0.00340866761471951, 0.00429114593728443, -0.0849337495146655, -0.0845489606991819, 0.275043283538423, -0.0316674787804407, -0.0253641329762114, 0.082511178850598, -0.0312592804980484, -0.0251511318687753, 0.0814475980799756, -0.00239606783073463, -0.00192786964437995, -0.00191913551123348, 0.0176795818158101},
    {-0.0388609269646534, -0.00825021336394413, -0.0406552941435215, -0.0264567387485711, 0.071557283824799, -0.134890782233764, 0.0993175900782414, 0.00217839861878966, 0.00257050400901636, 0.0334540297651137, 0.0422977505056148, -0.0976384591715588, 0.468010968482276, 0.00787957016710417, 0.00589174064932509, 0.0100359892367158, 0.152996834530156, -0.223792873623523, 0.140400217113785, 0.05153528848523, 0.00426463891240262, 0.00427416501424588, -0.0160232908424755, 0.283229163305198, -0.144782228129851, -0.0367262893430388, 0.0849668890239083, -0.043433717653176, -0.0123708436327971, -0.00161914495010586, -0.0146301665398266, -0.240203447161016, -0.0314387773391322, 0.555714721066932, 0.0911974510521012},
    {-0.0363573468678737, -0.0198488651832076, -0.0261022528933716, -0.026654809217297, 0.103392980678712, -0.158623419731344, 0.106303963340101, 0.0247556540621012, 0.00927424233248095, 0.0358073121883814, 0.0820261281050843, -0.130442483751308, 0.115396099214526, 0.0364627551749935, 0.00947054301501516, 0.010741958509676, 0.120816788744321, -0.133203458467504, 0.0346180719574672, 0.0406957966216642, 0.00778801235936338, 0.00828869627367685, -0.139335993251802, 0.802739165577439, -0.189108756762996, -0.142285209974459, 0.240816478080212, -0.0567313851505343, -0.0479271964399365, -0.0140798274249361, -0.0191093384963022, -0.158803412951156, -0.0466525233047007, 0.268773392686982, 0.287098240946532},
    {-0.0306200848898889, -0.0353856505415786, 0.0194477483558447, 0.0230686829582336, -0.093124922946217, 0.258170653831508, -0.108724843916401, 0.0909039607293702, -0.053418281906734, -0.0366227589868137, 0.098930515933258, -0.0724418888007601, -0.0341378102706135, 0.0675319354986144, -0.030998621592805, -0.0109865871941615, 0.0734948088867031, -0.0420380180389089, -0.0102411188979747, 0.0247559120407588, 0.00869811756323146, 0.00999687560186202, -0.324063410110059, 0.527556796894203, 0.423366841894701, -0.18805395200869, 0.158263574599543, 0.127007272315765, -0.0633438900701259, -0.0327464338725477, 0.0427809924212846, -0.0689369712339987, -0.0356378486920953, 0.0580163903657519, 0.259532014079741},
    {-0.0211218344402413, -0.0413330967980874, 0.00142320657028388, -0.0404060597147743, -0.00728506876419383, 0.0170939377878666, 0.355352052140279, 0.157864947105883, -0.219648979514327, 0.119696401413183, 0.0632889822277056, -0.000987051146063769, -0.000983780760084492, 0.0739927864951071, -0.0899360086693543, 0.0359081343769531, 0.0296641416306708, -0.000404151390212544, -0.000295127767530972, 0.0099920374254671, 0.00519315335829079, 0.00639531772709715, -0.290677226535459, 0.00761984615430328, 0.679795270879218, -0.119018761769261, 0.00228590380671467, 0.203934117044056, -0.0400901511575047, -0.029372777919501, 0.0686929477078467, -0.016072376487806, -0.0117757187634494, 0.000308690042227478, 0.0909062977046968},
    {-0.00968209848012787, -0.0266278562476348, -0.0414545183650565, 0.193565613495663, 0.218312526315296, -0.496518111503194, 0.793664260801163, 0.126759861966115, -0.245715646165504, 0.267337012340233, 0.0154286376713807, 0.00728527901666083, 0.00895048860280724, 0.0445686382427206, -0.0820828851711444, 0.0801993480982709, 0.00542469327662728, 0.00243369411063686, 0.00268508780292878, 0.00182724782387413, 0.00120438047899971, 0.00155905556593943, -0.0846939152475718, -0.0576470064111895, 0.236651468687048, -0.0282925447705458, -0.0172937233551123, 0.0709938865144689, -0.00953003022061835, -0.00855827473431771, 0.0239135040502402, -0.00115995221981651, -0.0010416745326154, -0.000709016914432478, 0.00824256947780751},
    {-0.0185850635184787, -0.0398714950680977, 0.256494600498464, -0.0264567387485711, 0.294923085078976, -0.257360821304334, 0.128736049066641, 0.00814813477108338, 0.00616862571740961, 0.0108243316129863, 0.20507471910435, -0.447044969785973, 0.624113536703126, 0.00353082203659198, 0.0023866236054269, 0.00324722840044405, 0.0888647963864357, -0.172960417191054, 0.187229962453518, 0.00747189331800391, 0.00414565073336059, 0.00517278926079178, -0.0498420450994391, 0.174844018669227, -0.0607214186058462, -0.0192837443583844, 0.0524520573990264, -0.0182160268238257, -0.00162140787439506, -0.00125721198962158, -0.00153163248710622, -0.0408080835352964, -0.0316418914106898, 0.110998564394833, 0.0123754785904181},
    {-0.0163084975755768, -0.0376359379261082, -0.00474578684781529, -0.026654809217297, 0.669144967779083, -0.31338587445254, 0.13779182750758, 0.037995604758809, 0.00997162717358069, 0.0115857558571599, 0.163186854623018, -0.277088665503788, 0.241642287804682, 0.0154769114656852, 0.00369162422462742, 0.00347565067341842, 0.066471596317428, -0.102581776488159, 0.0724910994750196, 0.005589037465426, 0.00326405021199635, 0.00411621292367501, -0.194189129108341, 0.513143947956848, -0.0793118888261498, -0.0718913052701171, 0.153939814567603, -0.023793045806185, -0.00604473520801705, -0.00489821195904219, -0.00200055710701374, -0.0259614587499537, -0.0210372701776154, 0.0555908969917341, 0.0389591824463453},
    {-0.0125039973795693, -0.0320953472655637, -0.0175985869100487, 0.0230686829582336, 0.13722625562885, 0.575928446322043, -0.140929787262841, 0.0711243588603504, -0.0328899499342601, -0.0118496005007185, 0.100332084660509, -0.0995003749107849, 0.016276446576188, 0.0264907481816323, -0.0114343437918565, -0.00355480233381651, 0.0373693630686833, -0.0345917672852214, 0.00488282708533209, 0.003142075440051, 0.00197545632867078, 0.0025307689427124, -0.258629046058044, 0.380788240201602, 0.177559328673039, -0.0899135885916038, 0.114233971421775, 0.0532666325687127, -0.00756007743351904, -0.00652363956815749, 0.00447874312604044, -0.0106646772112092, -0.00920261873617967, 0.0135493249780212, 0.0352184501509475},
    {-0.00781686379284112, -0.0224172392883417, 0.0200527846384615, -0.0404060597147743, -0.121039277759041, 0.409587603262319, 0.460609436699216, 0.0787502465351573, -0.0961276701025704, 0.0387287735102247, 0.040923081523459, -0.01035055334628, -0.00528863558311498, 0.026741791264299, -0.0313547065949566, 0.0116183777209744, 0.0138965470222836, -0.00337612014232493, -0.00158655594443209, 0.00116844376019941, 0.000792354457710787, 0.00103224072449108, -0.164893766239597, 0.0590749737571152, 0.285104972775459, -0.0537846767144485, 0.0177221041814198, 0.0855296195465342, -0.00452230110117066, -0.00415926793366331, 0.0071914663485204, -0.00235004339388589, -0.00216139083007487, 0.000774341622957371, 0.0123359691307151},
    {-0.00330330498807923, -0.010377765989116, -0.0373255322657574, 0.193565613495663, 0.206363312425294, -0.508716820740599, 1.02875232011214, 0.0478241068894886, -0.0882267290306917, 0.0864991301291097, 0.00754512943443955, 0.00268012197136589, 0.00273749433220898, 0.0150615693989047, -0.0273436744040656, 0.025949170998415, 0.00237623863762127, 0.00083063696629527, 0.000821230322520741, 0.000199797921341218, 0.000144057321402157, 0.000190317776273153, -0.0394179087905202, -0.0191104279350487, 0.099251220812451, -0.0122165977986354, -0.0057330028822171, 0.0297747144603595, -0.00102719095943697, -0.000994274360901328, 0.00250350531445981, -0.000162058201332398, -0.000156865004582088, -7.60506444297659e-05, 0.00111851527565568},
    {-0.030895602637774, 0.30566354512252, -0.0284861396506215, -0.0264567387485711, 0.00553719265411168, 0.00387645332275314, 0.0056851505033398, 0.31668333287907, -0.266830935779783, 0.130690033482262, 0.351982375922268, -0.291266875281556, 0.141477002112519, 0.00604849035520929, 0.00428125822656396, 0.00643242509446906, 0.00672268409775295, 0.00467332883378196, 0.00696334827094789, 0.154540818103216, -0.32168288951279, 0.398248079160478, 0.0952106221031632, -0.031796863711047, -0.0323761407582659, -0.00152763868231478, -0.00156500797046696, -0.00159351937348607, -0.0351173025979227, 0.107725414571986, -0.0366317655360569, -0.0390316455622191, 0.119733005913318, -0.039986442548549, 0.0130709476216945},
    {-0.027869897720017, 0.00669084371150355, -0.0255216716723957, -0.026654809217297, 0.024696863491794, 0.00606875645427728, 0.0060850653969139, 0.726880420362404, -0.325409773332621, 0.139883262544633, 0.137865808082476, -0.175107042470174, 0.107680212589652, 0.0271328435929704, 0.00672966104875523, 0.00688490609661094, 0.00514622667323357, 0.00362131423099449, 0.00529990606922197, 0.118301272030906, -0.194176690389937, 0.155987336317311, 0.279853835753503, -0.119977797078753, -0.0422884203860176, -0.00578753808936727, -0.00590518015907649, -0.00208139128324124, -0.133043715594682, 0.316638730113968, -0.0478469472948316, -0.0252341084543328, 0.0600561704160452, -0.0257470368705252, 0.0411485850360967},
    {-0.0222688674682827, -0.0205345190513159, -0.0201879061271679, 0.0230686829582336, 0.043383576915687, -0.0191358805337486, -0.00622364176003369, 0.167093720255385, 0.600939576151325, -0.143068850951722, 0.0104093446885927, -0.060404908708583, 0.062128249937431, 0.0480669960341634, -0.0213449189180996, -0.00704169738562071, 0.00299440295601819, 0.00214553663930296, 0.00305788669055038, 0.0688352264995515, -0.0673780271760181, 0.0117775826607492, 0.208682812741731, -0.152758304485708, 0.0946731145294437, -0.00741225556502811, -0.0075186020309328, 0.00465971047251565, -0.170392661971493, 0.236112757380084, 0.107117255262284, -0.0106148570284824, 0.014708985311877, -0.0107671524426326, 0.0371976335199441},
    {-0.0145518898690547, 0.0207507657939298, -0.0130520026587977, -0.0404060597147743, 0.0450304029511844, -0.053477017443967, 0.0203411087250163, -0.126761056765116, 0.441928259975205, 0.467600669283436, -0.00290900218672422, -0.00621279895212738, 0.0237555195281293, 0.0503360898201806, -0.0600144777647139, 0.0230148099219631, 0.00115514811168991, 0.00084370681474398, 0.00116922152266214, 0.0265545028764065, -0.00697230141826382, -0.00329137085372802, 0.0334772199353673, -0.0931247868417254, 0.152015531609652, -0.0045462534383933, -0.00458350342284581, 0.00748204353630137, -0.104509109078726, 0.0378775741255776, 0.171996945322831, -0.00239834878787693, 0.000869241301476664, -0.00241799979419909, 0.0130292178352812},
    {-0.00638364542619678, -0.036894852459273, -0.00567499956393999, 0.193565613495663, 0.0259638427028639, -0.047378898473653, 0.0454310335985989, 0.204659584876928, -0.507343961262246, 1.04436695187696, 0.00142591522038155, 0.00143537619017188, 0.0041584462097905, 0.0292366119663364, -0.0534353517327498, 0.0514026357641056, 0.000203698888670505, 0.000151179155458528, 0.000204674320153881, 0.00468262266144112, 0.00161886059114058, 0.00161334213417572, -0.0100100832039721, -0.021489220109095, 0.0529199015640959, -0.00105429916924111, -0.00105767666444956, 0.00260466153192864, -0.0242361910467486, -0.0113258409537497, 0.0598758647845397, -0.000168859688239962, -7.89100056531947e-05, -0.000169400637910144, 0.00118137286371131},
    {-0.0273944922839772, -0.011025911508692, -0.0207049086523348, -0.0264567387485711, 0.0051246288316901, 0.005361881137819, 0.028277822772303, 0.126397002975774, -0.17165599760043, 0.109157185209764, 0.698773601926539, -0.259177038433349, 0.109362514995888, 0.00530923083978014, 0.00369992558671253, 0.00537260109800339, 0.0293515690248119, 0.00558638072303221, 0.00538270721270645, 0.113302027600821, -0.17884315808947, 0.132762407176673, 0.304657734076697, -0.0367347228625226, -0.13450515845961, -0.00656668547127677, -0.00180804417049389, -0.00662020150701508, -0.025348518093992, 0.0578829738695038, -0.0255550990557525, -0.140136829790449, 0.320000420807171, -0.038584698366078, 0.0453555872283231},
    {-0.024475313025187, -0.0400796207547677, -0.0297236815267526, -0.026654809217297, 0.035177482531519, 0.0120047522387556, 0.0302669913049303, 0.23522331288152, -0.204904421568362, 0.116835712643712, 0.22191055743483, -0.218111137493024, 0.128105777916878, 0.02362472601947, 0.00578290481392669, 0.00575053008951603, 0.0222876553178487, 0.00615563069515569, 0.00630523077133404, 0.0860341243033993, -0.105068053208744, 0.0421615523278779, 0.876508240496471, -0.198227651010737, -0.175685259324049, -0.0247372100836885, -0.00975655513128467, -0.00864704247671432, -0.0954898205714345, 0.166530824286541, -0.0333790484772363, -0.0900854556156694, 0.157105805520739, -0.0355304301199563, 0.142783698010478},
    {-0.0192801894065164, 0.010272330675872, -0.0397189812555842, 0.0230686829582336, 0.0984497965965411, -0.0544785376003365, -0.0309562673116838, -0.0564785835866363, 0.352177395909631, -0.11949643476987, -0.0175005242960599, -0.100781285551627, 0.117757464577843, 0.0413568083073286, -0.0181908408918029, -0.00588148801582208, 0.0128148721626431, 0.00520560476519448, 0.00579589774391169, 0.0494675769545878, -0.0336517170080885, -0.00332498498225024, 0.608304956655549, -0.363238336703043, 0.393315014495556, -0.0314204682320265, -0.0178782063943612, 0.0193585486349734, -0.12128832894236, 0.115573957173589, 0.0747272764156991, -0.037582552760521, 0.0358118904027675, -0.021384424640582, 0.129074077919252},
    {-0.0124102698498271, 0.00912511728278435, -0.0397405972089105, -0.0404060597147743, 0.148813736423541, -0.200637348699184, 0.101176260361139, -0.0492106437897534, 0.128663531590444, 0.39055750083735, -0.00561721756543102, -0.00678633971875538, 0.0655709656704383, 0.0427698343143903, -0.0507088224103502, 0.0192228267319269, 0.00488202238539685, 0.00267462964338692, 0.00322733351433683, 0.018845433257434, -0.00171517066909935, -0.00106723454286991, 0.0484793826839233, -0.291823158304032, 0.631541397109155, -0.0191066759686632, -0.0143632269164337, 0.0310837989915453, -0.0737550052650136, 0.00921076515456753, 0.119988728653697, -0.00841886793603288, 0.00105137563406663, -0.00632878846865127, 0.0452107867882594},
    {-0.00537606858025713, -0.0406159076210842, -0.0235167508261139, 0.193565613495663, 0.111110855045382, -0.212909749655552, 0.225973035491152, 0.217346756079598, -0.507458929034599, 0.87229418920046, 0.00753214688322392, 0.00645170840967701, 0.0148637525779309, 0.0245854244640887, -0.0448339756433922, 0.0429333965480546, 0.000852007325023583, 0.000570008174352117, 0.000731578166542067, 0.00328889257587258, 0.00135858380447895, 0.00143105856985458, -0.0498012326664731, -0.080656821425345, 0.219853249301445, -0.00439993687100396, -0.00396984336412243, 0.0108209441854577, -0.0169845015228638, -0.00946190799271427, 0.0417706772585562, -0.000588597513558913, -0.000327902206051899, -0.000531062149718402, 0.00409930951603707},
    {-0.020961411703246, -0.00588069770174662, 0.019680460685236, -0.0264567387485711, -0.00832019668364345, -0.0348389537831831, 0.0625461354887269, 0.0034930262076681, -0.0658600199515989, 0.076496401682579, 0.0427126061047167, 0.646111276941326, -0.124430929391771, 0.00400152580496312, 0.00272474454845835, 0.00376507190876501, 0.0489305219497223, -0.0267307568512316, -0.00612435861726466, 0.0598439668951062, -0.0505321770136865, 0.00257115858779157, 0.258541102529702, 0.167268194342737, -0.208488513147469, -0.0106962989107499, 0.00823276344896466, -0.0102615839031087, -0.0130819973384465, 0.0155633251325515, -0.0125503236613744, -0.159966220165597, 0.190307812351086, 0.123123340272851, 0.0492677426897372},
    {-0.0184718652791734, 0.0160155329372752, 0.0231559130793075, -0.026654809217297, -0.041412797822325, -0.0344432021170082, 0.0669458661735615, -0.036169047347175, -0.0724944037069554, 0.0818774466205663, -0.0754725780460941, 0.221401884724775, -0.105688373127378, 0.0176021151318449, 0.00422485121361443, 0.00402992124403032, 0.0367296654322383, -0.0129029273094948, -0.00520186983952684, 0.0449218359954092, -0.0271574639953152, -0.00454320129074356, 0.685904525794328, 0.398568738617759, -0.272319358735952, -0.0399733554598201, 0.0196171313744725, -0.0134032705491703, -0.0488889974090572, 0.0412891994362844, -0.0163927308982087, -0.102014814964114, 0.086156605038676, 0.0500642991881214, 0.155099535112544},
    {-0.0142538719043456, 0.0196251555355449, 0.00551430449164192, 0.0230686829582336, -0.017812894403291, 0.0160562855400303, -0.0684704372430771, -0.0723235380733695, 0.0876260164567925, -0.0837420574397002, -0.0495680050107215, 0.0073904541444377, -0.0149312715941614, 0.0302890327371375, -0.0131335888893544, -0.00412169541459884, 0.0207590359443045, -0.00110769826546377, -0.000734901381042467, 0.0253891234003549, -0.00604518312760979, -0.00298383108374479, 0.334770714499961, 0.0750239625962772, 0.609654406640305, -0.0501762046732544, 0.0036926000157181, 0.030006544491084, -0.0613674862179831, 0.0201520973788718, 0.0366991927248623, -0.0420591130547638, 0.0138115375776986, 0.00309524170946101, 0.140207388933765},
    {-0.00897333425654342, -0.019058139115592, -0.0307674372271626, -0.0404060597147743, 0.132351652535693, -0.22451483832234, 0.223786114643476, 0.0872667704762525, -0.165422120128656, 0.273699284264116, 0.0220325931913584, 0.00976353258237003, 0.0408683030760231, 0.0307531007458299, -0.0361554636663502, 0.0134711890228237, 0.00776435926765642, 0.00213396519922817, 0.00201149461263451, 0.0094961189960895, 0.00157230163571757, 0.00132628973882784, -0.137863629824334, -0.228845143762455, 0.978915071973998, -0.0301321459013353, -0.0112635157116612, 0.0481811635251755, -0.0368528082257304, -0.00829893766954683, 0.0589274718534793, -0.00930437699442098, -0.00209526623473884, -0.0034780130431813, 0.0491104524580729},
    {-0.0038147849888924, -0.0407974245424921, -0.0382757664925027, 0.193565613495663, 0.190282673186367, -0.394592727959425, 0.499817125541642, 0.207221789959829, -0.444598645440034, 0.611296146508631, 0.0158838417532035, 0.0104760001378119, 0.0178385643921465, 0.0174062774729831, -0.0316348028115304, 0.0300873491893934, 0.00133421565824143, 0.000745405326831831, 0.000877995254786861, 0.00163179860956252, 0.000839868996894595, 0.000956155099287275, -0.0965076725717212, -0.104757061984402, 0.340781555015693, -0.00686687020511387, -0.00515603169099173, 0.016772907373328, -0.00839845431548974, -0.00580944488641593, 0.0205139302338836, -0.0006437533395721, -0.000445302124200986, -0.000483366150934922, 0.00445289629753901},
    {-0.0124384929539136, 0.00932435981520396, -0.0406552941435215, -0.0264567387485711, 0.071557283824799, -0.134890782233764, 0.0993175900782414, -0.00274530159830412, -0.0040361589826541, 0.0414498988603882, -0.0533052495838725, 0.153310145658399, 0.579870570013429, 0.00233689276746114, 0.00155308751767131, 0.00204012014144122, 0.0453752157129886, -0.0589927390317731, 0.0285406155826317, 0.0189372104235512, -0.00176516193035239, -0.00109496327120829, 0.0251594819687862, 0.35092394715196, -0.179386721267945, -0.00968120372976678, 0.0172721051771464, -0.00882922451508195, -0.00404042139090854, 0.000516810424742331, -0.00368485041650233, -0.0784524624906241, 0.0100348568971312, 0.139965981645223, 0.0229695926275674},
    {-0.0108112314285621, -0.00343000582694799, -0.0261022528933716, -0.026654809217297, 0.103392980678712, -0.158623419731344, 0.106303963340101, 0.00466602892968344, 0.00205905019873343, 0.0443656408238899, 0.0154605604751187, -0.0289605999565852, 0.142976994846623, 0.0101628551970845, 0.00238940091495451, 0.00218362987416748, 0.0336739098154426, -0.0336069922318888, 0.00703717632537013, 0.0140537054411442, 0.000436243804042796, 0.000317581213946236, -0.0309351205533021, 0.994602368027882, -0.234307761919136, -0.0358983017508573, 0.0489532756297691, -0.0115323799943943, -0.0149820487555175, -0.000635449999028504, -0.00481300426249399, -0.0496419705742331, -0.00210551912277953, 0.0676950426566431, 0.072310460024431},
    {-0.00816939214276983, -0.025480230590235, 0.0194477483558447, 0.0230686829582336, -0.093124922946217, 0.258170653831508, -0.108724843916401, 0.0693603943777796, -0.0450703189999694, -0.0453759880842459, 0.0754847153641236, -0.0611210042829735, -0.0422971101827513, 0.0171871218319643, -0.00734069551356129, -0.00223335809672937, 0.0187046946755824, -0.00995490362348409, -0.00208181898583702, 0.00780634832064019, 0.00173788412922084, 0.00155056005752843, -0.273420273893854, 0.653648485037773, 0.524556022117167, -0.0445325221215017, 0.0321718864559734, 0.0258180920932991, -0.0185855147761848, -0.00561642914824835, 0.0107751034352764, -0.0202265616474849, -0.00611234349835406, 0.0146123914325404, 0.0653674479763473},
    {-0.00502599423716651, -0.0413033167094812, 0.00142320657028388, -0.0404060597147743, -0.00728506876419383, 0.0170939377878666, 0.355352052140279, 0.162767434125055, -0.238242506157153, 0.148305115029899, 0.0652544179974326, -0.00107060610644989, -0.00121891483006995, 0.0171227627066027, -0.0199509940309113, 0.00729942076023652, 0.00686461589158588, -8.96551013661641e-05, -5.9993697545523e-05, 0.00286492688956177, 0.00124954567544961, 0.00134041565416266, -0.31528337206821, 0.0094410704673, 0.842273574261528, -0.0264025793534474, 0.000464679493717898, 0.0414558136617459, -0.0110190374433331, -0.00647635486434079, 0.0173014597122299, -0.00441759667172832, -0.00259640861016925, 7.77487137671596e-05, 0.0228962608216351},
    {-0.00209476062722381, -0.0307812864125691, -0.0414545183650565, 0.193565613495663, 0.218312526315296, -0.496518111503194, 0.793664260801163, 0.148260957594398, -0.292641263819638, 0.331233402999376, 0.0180456538848818, 0.00867658731539753, 0.0110897506202466, 0.00953507766758122, -0.0172667766101734, 0.0163029574391278, 0.00116056657225546, 0.000511946582509139, 0.000545825785489406, 0.00048435898417216, 0.000301734602308833, 0.00037068259436248, -0.100868360573134, -0.0714252543602302, 0.293213687890887, -0.00595155798029966, -0.00351547540607155, 0.01443166731063, -0.00248386490399935, -0.00207197510408046, 0.00602301314340306, -0.000302324813502113, -0.000252191448059112, -0.000178577685041487, 0.00207602801312377},
    {-0.0043178398665833, -0.0415876825462491, 0.256494600498464, -0.0264567387485711, 0.294923085078976, -0.257360821304334, 0.128736049066641, 0.00872429846354251, 0.00688702196831951, 0.0134114620492585, 0.21957578109077, -0.499107689262689, 0.773283313112873, 0.000801066700129491, 0.000522361946184637, 0.000660097964171907, 0.0201614888717739, -0.0378559651934289, 0.0380601860437702, 0.002100383263435, 0.0010130324522501, 0.00112588142272717, -0.0556466343187302, 0.216633599631123, -0.0752344837839618, -0.0042206463599335, 0.0106624764371305, -0.00370296164571007, -0.000439698428605989, -0.000285329791407415, -0.000385767078773852, -0.011066462972246, -0.00718126644549858, 0.0279568318739248, 0.00311696981125829},
    {-0.00371426824464846, -0.0405329728195471, -0.00474578684781529, -0.026654809217297, 0.669144967779083, -0.31338587445254, 0.13779182750758, 0.041831590664637, 0.0113675331696386, 0.0143548747900385, 0.179661983215495, -0.3158776939024, 0.299397365884505, 0.00345414137402773, 0.000799034653613734, 0.000706531740539846, 0.0148351492186773, -0.0222033417422354, 0.0147360213951957, 0.00154549593671592, 0.000805388003439984, 0.000921222223452034, -0.221373235069479, 0.635790811838521, -0.0982682742064898, -0.0155605339842406, 0.0312929506859304, -0.00483666042584492, -0.0016210650591566, -0.00113509792207329, -0.000503873532057931, -0.00696229234466272, -0.00487511807663282, 0.0140014906444227, 0.00981251712160678},
    {-0.00276215668983126, -0.0361168933250246, -0.0175985869100487, 0.0230686829582336, 0.13722625562885, 0.575928446322043, -0.140929787262841, 0.0813133174158523, -0.0385404156710592, -0.0146817811109555, 0.114705211796885, -0.116594455636229, 0.0201666905041451, 0.00576529064950189, -0.00243318076694156, -0.000722621723579523, 0.00813284841940034, -0.00736098410062309, 0.000992583157374961, 0.000847263751839069, 0.000492587905316519, 0.000588154424001503, -0.303061298652316, 0.471800681544231, 0.219997897619223, -0.0191332374144273, 0.0232215300791448, 0.010828063622529, -0.00199326209964842, -0.00155395592539968, 0.00112804583792466, -0.00281180941293522, -0.00219209902154655, 0.00341262251886703, 0.0088703515680434},
    {-0.00166934325119176, -0.0263257809398333, 0.0200527846384615, -0.0404060597147743, -0.121039277759041, 0.409587603262319, 0.460609436699216, 0.093336734920993, -0.115553699595248, 0.0479853624886689, 0.048503045772689, -0.0124422523789916, -0.00655267576338936, 0.00566033118596416, -0.00654850098736391, 0.00236178874253021, 0.00294142818295285, -0.000705110284432722, -0.000322515764157706, 0.000306432057937819, 0.000198927168058349, 0.000248700826247349, -0.198216441830415, 0.0731945210967082, 0.353248095045939, -0.0112330506905864, 0.00360255684182688, 0.0173864972760549, -0.00117023657418741, -0.00101636076814736, 0.00181129023360524, -0.00060812110227268, -0.000528158531587419, 0.000195030797776711, 0.00310701869767047},
    {-0.000684999674741907, -0.0125964445065002, -0.0373255322657574, 0.193565613495663, 0.206363312425294, -0.508716820740599, 1.02875232011214, 0.0582613106027225, -0.108078195915314, 0.107173342659665, 0.00919178962470588, 0.00328316317153109, 0.00339178460704529, 0.00311203997815347, -0.0056192515959004, 0.00527495846785987, 0.000490981347431731, 0.000170699739526356, 0.000166940047684401, 5.11494469164053e-05, 3.62655983426462e-05, 4.71311778042636e-05, -0.048287140593774, -0.0236780235639219, 0.122973318710209, -0.00251056736786809, -0.00116540725334386, 0.00605261656260119, -0.000261545846873169, -0.000247593765947659, 0.000630549390916943, -4.1263651243038e-05, -3.90624547481908e-05, -1.91546178260841e-05, 0.00028171664814222}};
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('simplify expressions', True), ('ignore zero tables', True), ('non zero columns', True), ('remove zero terms', True), ('ignore ones', True)
    // Total number of operations to compute element tensor: 17750
    
    // Loop quadrature points for integral
    // Number of operations to compute element tensor for following IP loop = 17750
    for (unsigned int ip = 0; ip < 125; ip++)
    {
      
      // Function declarations
      double F0 = 0;
      
      // Total number of operations to compute function values = 70
      for (unsigned int r = 0; r < 35; r++)
      {
        F0 += FE0[ip][r]*w[0][r];
      }// end loop over 'r'
      
      // Number of operations to compute ip constants: 2
      // Number of operations: 2
      const double Gip0 = F0*W125[ip]*det;
      
      
      // Number of operations for primary indices = 70
      for (unsigned int j = 0; j < 35; j++)
      {
        // Number of operations to compute entry = 2
        A[j] += FE0[ip][j]*Gip0;
      }// end loop over 'j'
    }// end loop over 'ip'
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class poisson3d_4_1_cell_integral_0: public ufc::cell_integral
{
private:

  poisson3d_4_1_cell_integral_0_quadrature integral_0_quadrature;

public:

  /// Constructor
  poisson3d_4_1_cell_integral_0() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~poisson3d_4_1_cell_integral_0()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Reset values of the element tensor block
    A[0] = 0;
    A[1] = 0;
    A[2] = 0;
    A[3] = 0;
    A[4] = 0;
    A[5] = 0;
    A[6] = 0;
    A[7] = 0;
    A[8] = 0;
    A[9] = 0;
    A[10] = 0;
    A[11] = 0;
    A[12] = 0;
    A[13] = 0;
    A[14] = 0;
    A[15] = 0;
    A[16] = 0;
    A[17] = 0;
    A[18] = 0;
    A[19] = 0;
    A[20] = 0;
    A[21] = 0;
    A[22] = 0;
    A[23] = 0;
    A[24] = 0;
    A[25] = 0;
    A[26] = 0;
    A[27] = 0;
    A[28] = 0;
    A[29] = 0;
    A[30] = 0;
    A[31] = 0;
    A[32] = 0;
    A[33] = 0;
    A[34] = 0;
    
    // Add all contributions to element tensor
    integral_0_quadrature.tabulate_tensor(A, w, c);
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class poisson3d_4_form_1: public ufc::form
{
public:

  /// Constructor
  poisson3d_4_form_1() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~poisson3d_4_form_1()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "Form([Integral(Product(BasisFunction(FiniteElement('Lagrange', Cell('tetrahedron', 1), 4), 0), Function(FiniteElement('Lagrange', Cell('tetrahedron', 1), 4), 0)), Measure('cell', 0, None))])";
  }

  /// Return the rank of the global tensor (r)
  virtual unsigned int rank() const
  {
    return 1;
  }

  /// Return the number of coefficients (n)
  virtual unsigned int num_coefficients() const
  {
    return 1;
  }

  /// Return the number of cell integrals
  virtual unsigned int num_cell_integrals() const
  {
    return 1;
  }
  
  /// Return the number of exterior facet integrals
  virtual unsigned int num_exterior_facet_integrals() const
  {
    return 0;
  }
  
  /// Return the number of interior facet integrals
  virtual unsigned int num_interior_facet_integrals() const
  {
    return 0;
  }
    
  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new poisson3d_4_1_finite_element_0();
      break;
    case 1:
      return new poisson3d_4_1_finite_element_1();
      break;
    }
    return 0;
  }
  
  /// Create a new dof map for argument function i
  virtual ufc::dof_map* create_dof_map(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new poisson3d_4_1_dof_map_0();
      break;
    case 1:
      return new poisson3d_4_1_dof_map_1();
      break;
    }
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(unsigned int i) const
  {
    return new poisson3d_4_1_cell_integral_0();
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(unsigned int i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(unsigned int i) const
  {
    return 0;
  }

};

// DOLFIN wrappers

// Standard library includes
#include <string>

// DOLFIN includes
#include <dolfin/fem/FiniteElement.h>
#include <dolfin/fem/DofMap.h>
#include <dolfin/fem/Form.h>
#include <dolfin/function/FunctionSpace.h>
#include <dolfin/function/Function.h>
#include <dolfin/function/Coefficient.h>

namespace Poisson3D_4
{

class CoefficientReference
{
public:
  
  CoefficientReference(const std::string & name):
    _name(name)
  {}
  
  ~CoefficientReference()
  {}

  CoefficientReference& operator=(dolfin::Function & f)
  {
    _function_pointer = dolfin::reference_to_no_delete_pointer(f);
    return *this;
  }
  
  CoefficientReference& operator=(const boost::shared_ptr<dolfin::Function> f)
  {
    _function_pointer = f;
    return *this;
  }

  std::string name() const
  {
    return _name;
  }

  dolfin::Function & function() const
  {
    return *_function_pointer;
  }

  boost::shared_ptr<dolfin::Function> function_pointer() const
  {
    return _function_pointer;
  }

private:

  boost::shared_ptr<dolfin::Function> _function_pointer;
  std::string _name;

};

class CoefficientSet
{
public:

  CoefficientSet():
    f("f")
  {}
  
  ~CoefficientSet()
  {}

  dolfin::uint num_coefficients() const
  {
    return 1;
  }

  std::string name(dolfin::uint i) const
  {
    switch(i)
    {
    case 0: return "f";
    default:
        throw std::runtime_error("Invalid coefficient number.");
    }
  }

  void disp() const
  {
    for(dolfin::uint i = 0; i < num_coefficients(); ++i)
    {
        dolfin::cout << "Coefficient " << i << ": \t" << name(i) << dolfin::endl;
    }
  }

  CoefficientReference f;
};

class CoefficientSpace_f: public dolfin::FunctionSpace
{
public:

  CoefficientSpace_f(const dolfin::Mesh & mesh):
      dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson3d_4_1_finite_element_1()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson3d_4_1_dof_map_1()), mesh)))
  {
    // Do nothing
  }

  CoefficientSpace_f(dolfin::Mesh & mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson3d_4_1_finite_element_1()))),
                          boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson3d_4_1_dof_map_1()), mesh)))
  {
    // Do nothing
  }

// Not using shared_ptr for mesh until DofMap::DofMap can take a shared_ptr.
// 
//  CoefficientSpace_f(boost::shared_ptr<dolfin::Mesh> mesh):
//      dolfin::FunctionSpace(mesh,
//                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson3d_4_1_finite_element_1()))),
//                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson3d_4_1_dof_map_1()), mesh)))
//  {
//      // Do nothing
//  }
//
//  CoefficientSpace_f(boost::shared_ptr<const dolfin::Mesh> mesh):
//      dolfin::FunctionSpace(mesh,
//                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson3d_4_1_finite_element_1()))),
//                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson3d_4_1_dof_map_1()), mesh)))
//  {
//      // Do nothing
//  }
// 

  virtual ~CoefficientSpace_f()
  {
  }
  
};

class Form_0_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  Form_0_FunctionSpace_0(const dolfin::Mesh & mesh):
      dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson3d_4_0_finite_element_0()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson3d_4_0_dof_map_0()), mesh)))
  {
    // Do nothing
  }

  Form_0_FunctionSpace_0(dolfin::Mesh & mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson3d_4_0_finite_element_0()))),
                          boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson3d_4_0_dof_map_0()), mesh)))
  {
    // Do nothing
  }

// Not using shared_ptr for mesh until DofMap::DofMap can take a shared_ptr.
// 
//  Form_0_FunctionSpace_0(boost::shared_ptr<dolfin::Mesh> mesh):
//      dolfin::FunctionSpace(mesh,
//                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson3d_4_0_finite_element_0()))),
//                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson3d_4_0_dof_map_0()), mesh)))
//  {
//      // Do nothing
//  }
//
//  Form_0_FunctionSpace_0(boost::shared_ptr<const dolfin::Mesh> mesh):
//      dolfin::FunctionSpace(mesh,
//                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson3d_4_0_finite_element_0()))),
//                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson3d_4_0_dof_map_0()), mesh)))
//  {
//      // Do nothing
//  }
// 

  virtual ~Form_0_FunctionSpace_0()
  {
  }
  
};

class Form_0_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  Form_0_FunctionSpace_1(const dolfin::Mesh & mesh):
      dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson3d_4_0_finite_element_1()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson3d_4_0_dof_map_1()), mesh)))
  {
    // Do nothing
  }

  Form_0_FunctionSpace_1(dolfin::Mesh & mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson3d_4_0_finite_element_1()))),
                          boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson3d_4_0_dof_map_1()), mesh)))
  {
    // Do nothing
  }

// Not using shared_ptr for mesh until DofMap::DofMap can take a shared_ptr.
// 
//  Form_0_FunctionSpace_1(boost::shared_ptr<dolfin::Mesh> mesh):
//      dolfin::FunctionSpace(mesh,
//                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson3d_4_0_finite_element_1()))),
//                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson3d_4_0_dof_map_1()), mesh)))
//  {
//      // Do nothing
//  }
//
//  Form_0_FunctionSpace_1(boost::shared_ptr<const dolfin::Mesh> mesh):
//      dolfin::FunctionSpace(mesh,
//                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson3d_4_0_finite_element_1()))),
//                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson3d_4_0_dof_map_1()), mesh)))
//  {
//      // Do nothing
//  }
// 

  virtual ~Form_0_FunctionSpace_1()
  {
  }
  
};

class Form_0: public dolfin::Form
{
public:

  // Constructor
  Form_0(const dolfin::FunctionSpace & _V0, const dolfin::FunctionSpace & _V1):
    dolfin::Form(2, 0)
  {
    boost::shared_ptr<const dolfin::FunctionSpace> _pV0 = dolfin::reference_to_no_delete_pointer(_V0);
    boost::shared_ptr<const dolfin::FunctionSpace> _pV1 = dolfin::reference_to_no_delete_pointer(_V1);

    _function_spaces[0] = _pV0;
    _function_spaces[1] = _pV1;

    _ufc_form = boost::shared_ptr<const ufc::form>(new poisson3d_4_form_0());
  }

  // Constructor
  Form_0(const dolfin::FunctionSpace & _V0, const dolfin::FunctionSpace & _V1, const CoefficientSet & coefficients):
    dolfin::Form(2, 0)
  {
    boost::shared_ptr<const dolfin::FunctionSpace> _pV0 = dolfin::reference_to_no_delete_pointer(_V0);
    boost::shared_ptr<const dolfin::FunctionSpace> _pV1 = dolfin::reference_to_no_delete_pointer(_V1);

    _function_spaces[0] = _pV0;
    _function_spaces[1] = _pV1;

    update_coefficients(coefficients);

    _ufc_form = boost::shared_ptr<const ufc::form>(new poisson3d_4_form_0());
  }

  // Constructor
  Form_0(boost::shared_ptr<const dolfin::FunctionSpace> _pV0, boost::shared_ptr<const dolfin::FunctionSpace> _pV1):
    dolfin::Form(2, 0)
  {
    _function_spaces[0] = _pV0;
    _function_spaces[1] = _pV1;

    _ufc_form = boost::shared_ptr<const ufc::form>(new poisson3d_4_form_0());
  }

  // Constructor
  Form_0(boost::shared_ptr<const dolfin::FunctionSpace> _pV0, boost::shared_ptr<const dolfin::FunctionSpace> _pV1, const CoefficientSet & coefficients):
    dolfin::Form(2, 0)
  {
    _function_spaces[0] = _pV0;
    _function_spaces[1] = _pV1;

    update_coefficients(coefficients);

    _ufc_form = boost::shared_ptr<const ufc::form>(new poisson3d_4_form_0());
  }

  // Destructor
  ~Form_0()
  {}

  void update_coefficients(const CoefficientSet & coefficients)
  {

  }

  /// Return the number of the coefficient with this name
  virtual dolfin::uint coefficient_number(const std::string & name) const
  {
    dolfin::error("No coefficients.");
    return 0;
  }
  
  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(dolfin::uint i) const
  {
    dolfin::error("No coefficients.");
    return "unnamed";
  }

  // Typedefs
  typedef Form_0_FunctionSpace_0 TestSpace;
  typedef Form_0_FunctionSpace_1 TrialSpace;

  // Coefficients
};

class Form_1_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  Form_1_FunctionSpace_0(const dolfin::Mesh & mesh):
      dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson3d_4_1_finite_element_0()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson3d_4_1_dof_map_0()), mesh)))
  {
    // Do nothing
  }

  Form_1_FunctionSpace_0(dolfin::Mesh & mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson3d_4_1_finite_element_0()))),
                          boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson3d_4_1_dof_map_0()), mesh)))
  {
    // Do nothing
  }

// Not using shared_ptr for mesh until DofMap::DofMap can take a shared_ptr.
// 
//  Form_1_FunctionSpace_0(boost::shared_ptr<dolfin::Mesh> mesh):
//      dolfin::FunctionSpace(mesh,
//                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson3d_4_1_finite_element_0()))),
//                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson3d_4_1_dof_map_0()), mesh)))
//  {
//      // Do nothing
//  }
//
//  Form_1_FunctionSpace_0(boost::shared_ptr<const dolfin::Mesh> mesh):
//      dolfin::FunctionSpace(mesh,
//                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson3d_4_1_finite_element_0()))),
//                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson3d_4_1_dof_map_0()), mesh)))
//  {
//      // Do nothing
//  }
// 

  virtual ~Form_1_FunctionSpace_0()
  {
  }
  
};

typedef CoefficientSpace_f Form_1_FunctionSpace_1;

class Form_1_Coefficient_f: public dolfin::Coefficient
{
public:

  Form_1_Coefficient_f(dolfin::Form & form):
    dolfin::Coefficient(form)
  {}
  
  ~Form_1_Coefficient_f()
  {}

  const Form_1_Coefficient_f& operator=(dolfin::Function & f)
  {
    attach(f);
    return *this;
  }
  
  const Form_1_Coefficient_f& operator=(boost::shared_ptr<dolfin::Function> f)
  {
    attach(f);
    return *this;
  }
  
  const dolfin::FunctionSpace * create_function_space() const
  {
    return new Form_1_FunctionSpace_1(form.mesh());
  }
  
  dolfin::uint number() const
  {
    return 0;
  }

  std::string name() const
  {
    return "f";
  }

};

class Form_1: public dolfin::Form
{
public:

  // Constructor
  Form_1(const dolfin::FunctionSpace & _V0):
    dolfin::Form(1, 1), f(*this)
  {
    boost::shared_ptr<const dolfin::FunctionSpace> _pV0 = dolfin::reference_to_no_delete_pointer(_V0);

    _function_spaces[0] = _pV0;

    _ufc_form = boost::shared_ptr<const ufc::form>(new poisson3d_4_form_1());
  }

  // Constructor
  Form_1(const dolfin::FunctionSpace & _V0, const CoefficientSet & coefficients):
    dolfin::Form(1, 1), f(*this)
  {
    boost::shared_ptr<const dolfin::FunctionSpace> _pV0 = dolfin::reference_to_no_delete_pointer(_V0);

    _function_spaces[0] = _pV0;

    update_coefficients(coefficients);

    _ufc_form = boost::shared_ptr<const ufc::form>(new poisson3d_4_form_1());
  }

  // Constructor
  Form_1(const dolfin::FunctionSpace & _V0, dolfin::Function & _f):
    dolfin::Form(1, 1), f(*this)
  {
    boost::shared_ptr<const dolfin::FunctionSpace> _pV0 = dolfin::reference_to_no_delete_pointer(_V0);

    _function_spaces[0] = _pV0;

    boost::shared_ptr<dolfin::Function> _pf = dolfin::reference_to_no_delete_pointer(_f);

    f = _pf;

    _ufc_form = boost::shared_ptr<const ufc::form>(new poisson3d_4_form_1());
  }

  // Constructor
  Form_1(const dolfin::FunctionSpace & _V0, boost::shared_ptr<dolfin::Function> _pf):
    dolfin::Form(1, 1), f(*this)
  {
    boost::shared_ptr<const dolfin::FunctionSpace> _pV0 = dolfin::reference_to_no_delete_pointer(_V0);

    _function_spaces[0] = _pV0;

    f = _pf;

    _ufc_form = boost::shared_ptr<const ufc::form>(new poisson3d_4_form_1());
  }

  // Constructor
  Form_1(boost::shared_ptr<const dolfin::FunctionSpace> _pV0):
    dolfin::Form(1, 1), f(*this)
  {
    _function_spaces[0] = _pV0;

    _ufc_form = boost::shared_ptr<const ufc::form>(new poisson3d_4_form_1());
  }

  // Constructor
  Form_1(boost::shared_ptr<const dolfin::FunctionSpace> _pV0, const CoefficientSet & coefficients):
    dolfin::Form(1, 1), f(*this)
  {
    _function_spaces[0] = _pV0;

    update_coefficients(coefficients);

    _ufc_form = boost::shared_ptr<const ufc::form>(new poisson3d_4_form_1());
  }

  // Constructor
  Form_1(boost::shared_ptr<const dolfin::FunctionSpace> _pV0, dolfin::Function & _f):
    dolfin::Form(1, 1), f(*this)
  {
    _function_spaces[0] = _pV0;

    boost::shared_ptr<dolfin::Function> _pf = dolfin::reference_to_no_delete_pointer(_f);

    f = _pf;

    _ufc_form = boost::shared_ptr<const ufc::form>(new poisson3d_4_form_1());
  }

  // Constructor
  Form_1(boost::shared_ptr<const dolfin::FunctionSpace> _pV0, boost::shared_ptr<dolfin::Function> _pf):
    dolfin::Form(1, 1), f(*this)
  {
    _function_spaces[0] = _pV0;

    f = _pf;

    _ufc_form = boost::shared_ptr<const ufc::form>(new poisson3d_4_form_1());
  }

  // Destructor
  ~Form_1()
  {}

  void update_coefficients(const CoefficientSet & coefficients)
  {
    f = coefficients.f.function_pointer();
  }

  /// Return the number of the coefficient with this name
  virtual dolfin::uint coefficient_number(const std::string & name) const
  {
    if(name == "f") return 0;
    dolfin::error("Invalid coefficient.");
    return 0;
  }
  
  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(dolfin::uint i) const
  {
    switch(i)
    {
      case 0: return "f";
    }
    dolfin::error("Invalid coefficient.");
    return "unnamed";
  }

  // Typedefs
  typedef Form_1_FunctionSpace_0 TestSpace;
  typedef Form_1_FunctionSpace_1 CoefficientSpace_f;

  // Coefficients
  Form_1_Coefficient_f f;
};

// Class typedefs
typedef Form_0 BilinearForm;
typedef Form_1 LinearForm;
typedef Form_0_FunctionSpace_0 FunctionSpace;

} // namespace Poisson3D_4

#endif
