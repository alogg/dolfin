// This code conforms with the UFC specification version 1.0
// and was automatically generated by FFC version 0.7.0.
//
// Warning: This code was generated with the option '-l dolfin'
// and contains DOLFIN-specific wrappers that depend on DOLFIN.

#ifndef __POISSON3D_4_H
#define __POISSON3D_4_H

#include <cmath>
#include <stdexcept>
#include <fstream>
#include <ufc.h>
    
/// This class defines the interface for a finite element.

class poisson3d_4_0_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  poisson3d_4_0_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~poisson3d_4_0_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', 'tetrahedron', 4)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 35;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_02 = element_coordinates[3][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
    const double J_12 = element_coordinates[3][1] - element_coordinates[0][1];
    const double J_20 = element_coordinates[1][2] - element_coordinates[0][2];
    const double J_21 = element_coordinates[2][2] - element_coordinates[0][2];
    const double J_22 = element_coordinates[3][2] - element_coordinates[0][2];
    
    // Compute sub determinants
    const double d00 = J_11*J_22 - J_12*J_21;
    const double d01 = J_12*J_20 - J_10*J_22;
    const double d02 = J_10*J_21 - J_11*J_20;
    
    const double d10 = J_02*J_21 - J_01*J_22;
    const double d11 = J_00*J_22 - J_02*J_20;
    const double d12 = J_01*J_20 - J_00*J_21;
    
    const double d20 = J_01*J_12 - J_02*J_11;
    const double d21 = J_02*J_10 - J_00*J_12;
    const double d22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d00 + J_10*d10 + J_20*d20;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = d00*(element_coordinates[0][0] - element_coordinates[2][0] - element_coordinates[3][0]) \
                    + d10*(element_coordinates[0][1] - element_coordinates[2][1] - element_coordinates[3][1]) \
                    + d20*(element_coordinates[0][2] - element_coordinates[2][2] - element_coordinates[3][2]);
    
    const double C1 = d01*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[3][0]) \
                    + d11*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[3][1]) \
                    + d21*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[3][2]);
    
    const double C2 = d02*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[2][0]) \
                    + d12*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[2][1]) \
                    + d22*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[2][2]);
    
    // Get coordinates and map to the UFC reference element
    double x = (C0 + d00*coordinates[0] + d10*coordinates[1] + d20*coordinates[2]) / detJ;
    double y = (C1 + d01*coordinates[0] + d11*coordinates[1] + d21*coordinates[2]) / detJ;
    double z = (C2 + d02*coordinates[0] + d12*coordinates[1] + d22*coordinates[2]) / detJ;
    
    // Map coordinates to the reference cube
    if (std::abs(y + z - 1.0) < 1e-14)
      x = 1.0;
    else
      x = -2.0 * x/(y + z - 1.0) - 1.0;
    if (std::abs(z - 1.0) < 1e-14)
      y = -1.0;
    else
      y = 2.0 * y/(1.0 - z) - 1.0;
    z = 2.0 * z - 1.0;
    
    // Reset values
    *values = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    const double scalings_y_4 = scalings_y_3*(0.5 - 0.5*y);
    const double scalings_z_0 = 1;
    const double scalings_z_1 = scalings_z_0*(0.5 - 0.5*z);
    const double scalings_z_2 = scalings_z_1*(0.5 - 0.5*z);
    const double scalings_z_3 = scalings_z_2*(0.5 - 0.5*z);
    const double scalings_z_4 = scalings_z_3*(0.5 - 0.5*z);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    const double psitilde_a_4 = 1.75*x*psitilde_a_3 - 0.75*psitilde_a_2;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_0_4 = 0.0285714285714286*psitilde_bs_0_3 + 1.8*y*psitilde_bs_0_3 - 0.771428571428571*psitilde_bs_0_2;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_1_3 = 0.285714285714286*psitilde_bs_1_2 + 2*y*psitilde_bs_1_2 - 0.714285714285714*psitilde_bs_1_1;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_2_2 = 1.02040816326531*psitilde_bs_2_1 + 2.57142857142857*y*psitilde_bs_2_1 - 0.551020408163265*psitilde_bs_2_0;
    const double psitilde_bs_3_0 = 1;
    const double psitilde_bs_3_1 = 4.5*y + 3.5;
    const double psitilde_bs_4_0 = 1;
    
    // Compute psitilde_cs
    const double psitilde_cs_00_0 = 1;
    const double psitilde_cs_00_1 = 2*z + 1;
    const double psitilde_cs_00_2 = 0.3125*psitilde_cs_00_1 + 1.875*z*psitilde_cs_00_1 - 0.5625*psitilde_cs_00_0;
    const double psitilde_cs_00_3 = 0.155555555555556*psitilde_cs_00_2 + 1.86666666666667*z*psitilde_cs_00_2 - 0.711111111111111*psitilde_cs_00_1;
    const double psitilde_cs_00_4 = 0.09375*psitilde_cs_00_3 + 1.875*z*psitilde_cs_00_3 - 0.78125*psitilde_cs_00_2;
    const double psitilde_cs_01_0 = 1;
    const double psitilde_cs_01_1 = 3*z + 2;
    const double psitilde_cs_01_2 = 0.777777777777778*psitilde_cs_01_1 + 2.33333333333333*z*psitilde_cs_01_1 - 0.555555555555556*psitilde_cs_01_0;
    const double psitilde_cs_01_3 = 0.428571428571429*psitilde_cs_01_2 + 2.14285714285714*z*psitilde_cs_01_2 - 0.714285714285714*psitilde_cs_01_1;
    const double psitilde_cs_02_0 = 1;
    const double psitilde_cs_02_1 = 4*z + 3;
    const double psitilde_cs_02_2 = 1.265625*psitilde_cs_02_1 + 2.8125*z*psitilde_cs_02_1 - 0.546875*psitilde_cs_02_0;
    const double psitilde_cs_03_0 = 1;
    const double psitilde_cs_03_1 = 5*z + 4;
    const double psitilde_cs_04_0 = 1;
    const double psitilde_cs_10_0 = 1;
    const double psitilde_cs_10_1 = 3*z + 2;
    const double psitilde_cs_10_2 = 0.777777777777778*psitilde_cs_10_1 + 2.33333333333333*z*psitilde_cs_10_1 - 0.555555555555556*psitilde_cs_10_0;
    const double psitilde_cs_10_3 = 0.428571428571429*psitilde_cs_10_2 + 2.14285714285714*z*psitilde_cs_10_2 - 0.714285714285714*psitilde_cs_10_1;
    const double psitilde_cs_11_0 = 1;
    const double psitilde_cs_11_1 = 4*z + 3;
    const double psitilde_cs_11_2 = 1.265625*psitilde_cs_11_1 + 2.8125*z*psitilde_cs_11_1 - 0.546875*psitilde_cs_11_0;
    const double psitilde_cs_12_0 = 1;
    const double psitilde_cs_12_1 = 5*z + 4;
    const double psitilde_cs_13_0 = 1;
    const double psitilde_cs_20_0 = 1;
    const double psitilde_cs_20_1 = 4*z + 3;
    const double psitilde_cs_20_2 = 1.265625*psitilde_cs_20_1 + 2.8125*z*psitilde_cs_20_1 - 0.546875*psitilde_cs_20_0;
    const double psitilde_cs_21_0 = 1;
    const double psitilde_cs_21_1 = 5*z + 4;
    const double psitilde_cs_22_0 = 1;
    const double psitilde_cs_30_0 = 1;
    const double psitilde_cs_30_1 = 5*z + 4;
    const double psitilde_cs_31_0 = 1;
    const double psitilde_cs_40_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.866025403784439*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_0;
    const double basisvalue1 = 2.73861278752583*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_0;
    const double basisvalue2 = 1.58113883008419*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_0;
    const double basisvalue3 = 1.11803398874989*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_1;
    const double basisvalue4 = 5.1234753829798*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_0;
    const double basisvalue5 = 3.96862696659689*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_0;
    const double basisvalue6 = 2.29128784747792*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_0;
    const double basisvalue7 = 3.24037034920393*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_1;
    const double basisvalue8 = 1.87082869338697*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_1;
    const double basisvalue9 = 1.3228756555323*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_2;
    const double basisvalue10 = 7.93725393319377*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_0;
    const double basisvalue11 = 6.70820393249937*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_0;
    const double basisvalue12 = 5.19615242270663*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_0;
    const double basisvalue13 = 3*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_0;
    const double basisvalue14 = 5.80947501931113*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_1;
    const double basisvalue15 = 4.5*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_1;
    const double basisvalue16 = 2.59807621135332*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_1;
    const double basisvalue17 = 3.67423461417477*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_2;
    const double basisvalue18 = 2.12132034355964*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_2;
    const double basisvalue19 = 1.5*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_3;
    const double basisvalue20 = 11.1242977306435*psitilde_a_4*scalings_y_4*psitilde_bs_4_0*scalings_z_4*psitilde_cs_40_0;
    const double basisvalue21 = 9.81070843517429*psitilde_a_3*scalings_y_3*psitilde_bs_3_1*scalings_z_4*psitilde_cs_31_0;
    const double basisvalue22 = 8.2915619758885*psitilde_a_2*scalings_y_2*psitilde_bs_2_2*scalings_z_4*psitilde_cs_22_0;
    const double basisvalue23 = 6.42261628933256*psitilde_a_1*scalings_y_1*psitilde_bs_1_3*scalings_z_4*psitilde_cs_13_0;
    const double basisvalue24 = 3.70809924354783*psitilde_a_0*scalings_y_0*psitilde_bs_0_4*scalings_z_4*psitilde_cs_04_0;
    const double basisvalue25 = 8.77496438739212*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_1;
    const double basisvalue26 = 7.41619848709566*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_1;
    const double basisvalue27 = 5.74456264653803*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_1;
    const double basisvalue28 = 3.3166247903554*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_1;
    const double basisvalue29 = 6.42261628933256*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_2;
    const double basisvalue30 = 4.9749371855331*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_2;
    const double basisvalue31 = 2.87228132326901*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_2;
    const double basisvalue32 = 4.06201920231798*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_3;
    const double basisvalue33 = 2.34520787991171*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_3;
    const double basisvalue34 = 1.6583123951777*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_4;
    
    // Table(s) of coefficients
    static const double coefficients0[35][35] = \
    {{-0.0137464349807054, -0.0144900147488139, -0.00836581391578938, -0.00591552374999942, 0, 0, 0, 0, 0, 0, -0.00671936840905293, -0.00567890279999946, -0.00439885919382572, -0.00253968253968254, -0.00491807409042212, -0.00380952380952381, -0.00219942959691286, -0.00311046316543896, -0.0017958267458706, -0.00126984126984129, 0.0136980289516341, 0.0120805260192622, 0.010209907964538, 0.00790856070259326, 0.00456600965054471, 0.0108051509532101, 0.00913201930108942, 0.0070736317340728, 0.00408396318581521, 0.00790856070259324, 0.00612594477872281, 0.0035368158670364, 0.00500181296677924, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807054, 0.0144900147488139, -0.00836581391578937, -0.00591552374999945, 0, 0, 0, 0, 0, 0, 0.00671936840905292, -0.00567890279999946, 0.00439885919382571, -0.00253968253968253, -0.00491807409042211, 0.0038095238095238, -0.00219942959691286, 0.00311046316543895, -0.00179582674587059, -0.00126984126984127, 0.0136980289516341, -0.0120805260192622, 0.010209907964538, -0.00790856070259325, 0.00456600965054471, -0.0108051509532101, 0.00913201930108942, -0.00707363173407281, 0.00408396318581522, 0.00790856070259325, -0.00612594477872282, 0.0035368158670364, -0.00500181296677924, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807054, 0, 0.0167316278315787, -0.00591552374999944, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0101587301587302, 0, 0, -0.00659828879073858, 0, 0.00359165349174119, -0.00126984126984127, 0, 0, 0, 0, 0.0228300482527235, 0, 0, 0, -0.0163358527432608, 0, 0, 0.0106104476011092, 0, -0.0057755961256123, 0.00204198159290761},
    {-0.0137464349807054, 0, 0, 0.0177465712499983, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0126984126984127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0306297238936141},
    {0.0439885919382572, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0, 0.0406349206349206, 0, 0, 0.00439885919382572, 0, -0.0143666139669648, 0.00761904761904762, 0, 0, 0, 0, 0, 0, 0, 0, 0.0367556686723369, 0, 0, -0.0424417904044368, 0, 0.0303218796594646, -0.0122518895574456},
    {-0.0329914439536929, 0, -0.0200779533978945, -0.0141972569999987, 0, 0, -0.00969857289937743, 0, 0.0712696645099798, -0.050395263067897, 0, 0, 0, 0, 0, 0, 0.0461880215351701, 0, 0.0107749604752236, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0495154221385096, 0, -0.0606437593189292, 0.0306297238936141},
    {0.0439885919382572, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0, 0.0359165349174119, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0505364660991076, -0.0408396318581521},
    {0.0439885919382572, 0.0231840235981022, -0.013385302265263, 0.0189296759999982, 0.0433733365754904, -0.0335968420452646, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484216, 0.0268774736362117, -0.0227156111999979, 0.0175954367753029, -0.0101587301587302, 0.00327871606028142, -0.00253968253968254, 0.00146628639794192, -0.0124418526617558, 0.00718330698348239, 0.00761904761904763, 0, 0, 0, 0, 0, 0.0243115896447228, -0.0205470434274512, 0.0159156714016638, -0.00918891716808423, -0.031634242810373, 0.0245037791148913, -0.0141472634681456, 0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.032991443953693, -0.0173880176985767, 0.0100389766989472, -0.0141972569999986, -0.00722888942924839, 0.00559947367421073, -0.00323285763312585, 0.0617213399848368, -0.03563483225499, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, -0.0266666666666667, 0.01539600717839, 0.00933138949631687, -0.00538748023761181, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, -0.0285877423007065, 0.0165051407128366, -0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, 0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0.0311046316543896, -0.017958267458706, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, -0.0335968420452646, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, 0, -0.0117302911835353, 0.0101587301587301, -0.0229510124219699, 0.00761904761904762, -0.0014662863979419, 0.0165891368823411, -0.00718330698348239, -0.00761904761904761, 0, 0.0241610520385245, -0.0357346778758831, 0.0355885231616696, -0.0228300482527235, -0.00270128773830253, -0.0114150241263618, 0.0159156714016638, -0.0112308987609918, 0.00395428035129663, 0.00306297238936141, -0.0035368158670364, -0.00375135972508442, 0.000721949515701537, 0.0020419815929076},
    {-0.0329914439536929, -0.0173880176985767, -0.0100389766989473, 0.0141972569999987, -0.00722888942924838, 0.0615942104163185, -0.0614242950293905, -0.00685792666498185, -0.00395942580611001, 0.00559947367421077, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042211, -0.0266666666666667, 0.0175954367753029, 0.00933138949631687, 0.0053874802376118, -0.00761904761904761, 0, 0, 0.0357346778758831, -0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108941, 0, 0.00408396318581522, 0.0013180934504322, 0.00714693557517662, -0.00471575448938186, -0.00250090648338961, -0.00144389903140308, 0.0020419815929076},
    {0.0439885919382572, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0.0293257279588381, 0.0101587301587301, 0, -0.0101587301587302, -0.0219942959691286, 0.00207364211029263, 0.017958267458706, -0.00761904761904761, 0, 0, 0, 0.0395428035129662, -0.0456600965054471, 0, 0, -0.017684079335182, 0.0142938711503532, 0, 0.00612594477872281, 0, -0.0012504532416948, -0.00360974757850769, 0.0020419815929076},
    {0.043988591938257, -0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0.0433733365754903, 0.0335968420452647, 0.0193971457987549, 0.0274317066599275, 0.01583770322444, 0.0111989473484216, -0.0268774736362117, -0.0227156111999979, -0.0175954367753029, -0.0101587301587302, 0.00327871606028141, 0.00253968253968254, 0.00146628639794192, 0.0124418526617558, 0.00718330698348239, 0.00761904761904762, 0, 0, 0, 0, 0, -0.0243115896447228, -0.0205470434274512, -0.0159156714016638, -0.00918891716808423, -0.031634242810373, -0.0245037791148913, -0.0141472634681456, -0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, 0.0173880176985767, 0.0100389766989472, -0.0141972569999987, -0.00722888942924838, -0.00559947367421076, -0.00323285763312582, -0.0617213399848368, -0.0356348322549899, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, 0.0266666666666667, 0.01539600717839, -0.00933138949631688, -0.00538748023761179, -0.019047619047619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, 0.0285877423007065, 0.0165051407128365, 0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382572, -0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, -0.0311046316543895, -0.017958267458706, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484215, -0.0268774736362117, 0, 0.0117302911835353, 0.0101587301587302, -0.0229510124219699, -0.00761904761904762, -0.00146628639794191, -0.0165891368823411, -0.00718330698348239, -0.00761904761904762, 0, -0.0241610520385245, -0.0357346778758831, -0.0355885231616696, -0.0228300482527235, 0.00270128773830253, -0.0114150241263618, -0.0159156714016638, -0.0112308987609918, 0.00395428035129663, -0.00306297238936141, -0.0035368158670364, 0.00375135972508442, 0.000721949515701537, 0.0020419815929076},
    {-0.0329914439536929, 0.0173880176985767, -0.0100389766989473, 0.0141972569999987, -0.00722888942924837, -0.0615942104163185, -0.0614242950293905, 0.00685792666498186, -0.00395942580610999, 0.00559947367421076, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042212, 0.0266666666666667, 0.0175954367753029, -0.00933138949631687, 0.0053874802376118, -0.00761904761904762, 0, 0, 0.0357346778758831, 0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108942, 0, 0.00408396318581522, 0.00131809345043221, -0.00714693557517662, -0.00471575448938187, 0.00250090648338962, -0.00144389903140308, 0.00204198159290761},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, -0.0293257279588381, 0.0101587301587301, 0, 0.0101587301587302, -0.0219942959691286, -0.00207364211029264, 0.017958267458706, -0.00761904761904762, 0, 0, 0, -0.0395428035129662, -0.0456600965054471, 0, 0, 0.017684079335182, 0.0142938711503532, 0, -0.00612594477872281, 0, 0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.0439885919382573, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0134387368181058, -0.0113578055999989, -0.0205280095711867, -0.0152380952380952, -0.00983614818084423, -0.0177777777777778, -0.0131965775814772, -0.0145154947720485, -0.0107749604752236, -0.00761904761904762, -0.0547921158065365, -0.0241610520385245, -0.00510495398226901, 0.00395428035129662, 0.00456600965054471, -0.0216103019064202, -0.00456600965054471, 0.0035368158670364, 0.00408396318581522, -0.00395428035129662, 0.00306297238936141, 0.0035368158670364, 0.00250090648338962, 0.00288779806280615, 0.00204198159290761},
    {-0.0329914439536929, 0, 0.0200779533978945, 0.0141972569999987, -0.0867466731509807, 0, 0.00969857289937743, 0, 0.00791885161221999, 0.00559947367421078, 0, 0.0340734167999968, 0, -0.0152380952380952, 0.0295084445425327, 0, -0.0131965775814772, 0, -0.0107749604752236, -0.00761904761904762, 0.0821881737098047, 0, -0.010209907964538, 0, 0.00456600965054471, 0, -0.00913201930108942, 0, 0.00408396318581521, -0.00790856070259325, 0, 0.0035368158670364, 0, 0.00288779806280615, 0.0020419815929076},
    {0.0439885919382571, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754904, -0.0335968420452646, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, -0.0134387368181059, -0.0113578055999989, 0.0205280095711867, -0.0152380952380952, -0.00983614818084423, 0.0177777777777778, -0.0131965775814772, 0.0145154947720485, -0.0107749604752236, -0.00761904761904762, -0.0547921158065365, 0.0241610520385245, -0.00510495398226901, -0.00395428035129662, 0.00456600965054471, 0.0216103019064202, -0.00456600965054471, -0.0035368158670364, 0.00408396318581521, -0.00395428035129662, -0.0030629723893614, 0.0035368158670364, -0.00250090648338962, 0.00288779806280615, 0.0020419815929076},
    {0.0439885919382573, 0.139104141588614, -0.0803118135915779, -0.0567890279999946, 0.0578311154339871, 0.0335968420452646, -0.0420271492306356, 0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, -0.0586514559176763, 0.0406349206349207, 0.0393445927233769, 0.00253968253968253, -0.0109971479845643, -0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, -0.053052238005546, 0.0367556686723369, -0.0105447476034577, -0.0245037791148912, 0.0235787724469093, 0.0175063453837273, 0, -0.0122518895574456},
    {0.0439885919382571, 0, 0.160623627183156, -0.0567890279999947, 0, 0.0783926314389508, 0.00969857289937743, -0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, 0.0586514559176763, -0.060952380952381, 0, 0.033015873015873, 0.0241937255660415, -0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, 0.053052238005546, -0.0551335030085054, 0, -0.0326717054865217, 0.0141472634681456, 0.00875317269186366, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382573, 0, 0, 0.170367083999984, 0, -0.0111989473484215, 0.00969857289937744, 0.0822951199797824, 0.0475131096733199, -0.0167984210226323, 0, 0, 0, 0, 0, 0.0533333333333333, -0.0461880215351701, 0.0435464843161454, 0.0251415744421884, -0.0825396825396825, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0571754846014129, -0.0495154221385096, -0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, 0.0578311154339871, -0.0335968420452646, -0.0420271492306356, -0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, 0.0586514559176763, 0.0406349206349206, 0.0393445927233769, -0.00253968253968253, -0.0109971479845643, 0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, 0.053052238005546, 0.0367556686723369, -0.0105447476034577, 0.0245037791148913, 0.0235787724469093, -0.0175063453837273, 0, -0.0122518895574456},
    {0.0439885919382571, 0, 0.160623627183156, -0.0567890279999947, 0, -0.0783926314389508, 0.00969857289937743, 0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, -0.0586514559176763, -0.060952380952381, 0, -0.033015873015873, 0.0241937255660415, 0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, -0.053052238005546, -0.0551335030085054, 0, 0.0326717054865217, 0.0141472634681456, -0.00875317269186366, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382574, 0, 0, 0.170367083999984, 0, 0.0111989473484216, 0.00969857289937746, -0.0822951199797824, 0.0475131096733199, -0.0167984210226323, 0, 0, 0, 0, 0, -0.0533333333333333, -0.0461880215351701, -0.0435464843161454, 0.0251415744421884, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.057175484601413, -0.0495154221385096, 0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754904, 0.0447957893936862, 0.0484928644968872, -0.0548634133198549, 0, -0.0167984210226323, 0.0806324209086351, 0.0227156111999978, -0.00586514559176761, -0.0101587301587302, -0.00327871606028142, 0.0304761904761905, 0.0271262983619253, 0.045620126426438, 0.0430998419008943, 0.0393650793650793, 0, 0, 0, 0, 0, 0.0729347689341683, 0.0205470434274512, -0.0053052238005546, -0.00918891716808422, 0.031634242810373, -0.00816792637163041, -0.0141472634681456, -0.00875317269186366, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754904, -0.0447957893936862, 0.0484928644968872, 0.0548634133198549, 0, -0.0167984210226323, -0.0806324209086351, 0.0227156111999979, 0.00586514559176762, -0.0101587301587302, -0.00327871606028142, -0.0304761904761905, 0.0271262983619253, -0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, -0.0729347689341683, 0.0205470434274512, 0.0053052238005546, -0.00918891716808422, 0.031634242810373, 0.00816792637163041, -0.0141472634681456, 0.00875317269186366, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0.0144577788584968, 0, -0.00323285763312579, 0, -0.0950262193466398, -0.0167984210226323, 0, 0, 0, 0, -0.0688530372659096, 0, 0.01539600717839, 0, -0.0502831488843767, -0.0825396825396825, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0738132332242036, 0, 0.0165051407128365, 0, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754904, -0.0447957893936862, -0.00969857289937743, 0.0548634133198549, 0.0316754064488799, 0.0391963157194754, 0.0806324209086352, 0, 0.0527863103259087, 0.060952380952381, 0.0229510124219699, 0.0101587301587302, 0.0168622935763319, -0.0124418526617558, -0.00718330698348239, -0.013968253968254, 0, 0.0724831561155734, 0.0357346778758831, -0.0118628410538899, -0.0228300482527235, -0.00810386321490759, 0.0114150241263618, -0.00530522380055459, -0.0112308987609918, -0.00395428035129662, -0.0010209907964538, -0.0035368158670364, 0.00125045324169481, 0.000721949515701534, 0.00204198159290761},
    {0.0439885919382572, 0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754904, 0.0447957893936862, -0.00969857289937744, -0.0548634133198549, 0.0316754064488799, 0.0391963157194754, -0.0806324209086351, 0, -0.0527863103259086, 0.060952380952381, 0.0229510124219699, -0.0101587301587302, 0.0168622935763319, 0.0124418526617558, -0.00718330698348239, -0.013968253968254, 0, -0.0724831561155734, 0.0357346778758831, 0.0118628410538899, -0.0228300482527235, 0.00810386321490759, 0.0114150241263618, 0.0053052238005546, -0.0112308987609918, -0.00395428035129663, 0.0010209907964538, -0.0035368158670364, -0.00125045324169481, 0.000721949515701532, 0.0020419815929076},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0.0144577788584968, 0, -0.0614242950293905, 0, -0.0633508128977598, 0.0391963157194754, 0, -0.0681468335999936, 0, -0.0914285714285714, 0.00983614818084423, 0, 0.0285925847598672, 0, 0.0143666139669648, -0.013968253968254, 0, 0, -0.0714693557517662, 0, 0.0456600965054471, 0, 0.0182640386021788, 0, 0.00408396318581519, -0.00263618690086442, 0, -0.00471575448938187, 0, -0.00144389903140307, 0.0020419815929076},
    {0.351908735506058, 0, 0, 0, -0.115662230867974, 0, -0.129314305325033, 0, 0, -0.134387368181059, 0, -0.0908624447999914, 0, 0.0406349206349207, -0.0786891854467539, 0, -0.0879771838765144, 0, 0, 0.0711111111111111, 0, 0, 0, 0, 0, 0, -0.0821881737098047, 0, 0.0367556686723369, 0.0210894952069153, 0, 0.0235787724469093, 0, 0, -0.0122518895574456}};
    
    // Extract relevant coefficients
    const double coeff0_0 = coefficients0[dof][0];
    const double coeff0_1 = coefficients0[dof][1];
    const double coeff0_2 = coefficients0[dof][2];
    const double coeff0_3 = coefficients0[dof][3];
    const double coeff0_4 = coefficients0[dof][4];
    const double coeff0_5 = coefficients0[dof][5];
    const double coeff0_6 = coefficients0[dof][6];
    const double coeff0_7 = coefficients0[dof][7];
    const double coeff0_8 = coefficients0[dof][8];
    const double coeff0_9 = coefficients0[dof][9];
    const double coeff0_10 = coefficients0[dof][10];
    const double coeff0_11 = coefficients0[dof][11];
    const double coeff0_12 = coefficients0[dof][12];
    const double coeff0_13 = coefficients0[dof][13];
    const double coeff0_14 = coefficients0[dof][14];
    const double coeff0_15 = coefficients0[dof][15];
    const double coeff0_16 = coefficients0[dof][16];
    const double coeff0_17 = coefficients0[dof][17];
    const double coeff0_18 = coefficients0[dof][18];
    const double coeff0_19 = coefficients0[dof][19];
    const double coeff0_20 = coefficients0[dof][20];
    const double coeff0_21 = coefficients0[dof][21];
    const double coeff0_22 = coefficients0[dof][22];
    const double coeff0_23 = coefficients0[dof][23];
    const double coeff0_24 = coefficients0[dof][24];
    const double coeff0_25 = coefficients0[dof][25];
    const double coeff0_26 = coefficients0[dof][26];
    const double coeff0_27 = coefficients0[dof][27];
    const double coeff0_28 = coefficients0[dof][28];
    const double coeff0_29 = coefficients0[dof][29];
    const double coeff0_30 = coefficients0[dof][30];
    const double coeff0_31 = coefficients0[dof][31];
    const double coeff0_32 = coefficients0[dof][32];
    const double coeff0_33 = coefficients0[dof][33];
    const double coeff0_34 = coefficients0[dof][34];
    
    // Compute value(s)
    *values = coeff0_0*basisvalue0 + coeff0_1*basisvalue1 + coeff0_2*basisvalue2 + coeff0_3*basisvalue3 + coeff0_4*basisvalue4 + coeff0_5*basisvalue5 + coeff0_6*basisvalue6 + coeff0_7*basisvalue7 + coeff0_8*basisvalue8 + coeff0_9*basisvalue9 + coeff0_10*basisvalue10 + coeff0_11*basisvalue11 + coeff0_12*basisvalue12 + coeff0_13*basisvalue13 + coeff0_14*basisvalue14 + coeff0_15*basisvalue15 + coeff0_16*basisvalue16 + coeff0_17*basisvalue17 + coeff0_18*basisvalue18 + coeff0_19*basisvalue19 + coeff0_20*basisvalue20 + coeff0_21*basisvalue21 + coeff0_22*basisvalue22 + coeff0_23*basisvalue23 + coeff0_24*basisvalue24 + coeff0_25*basisvalue25 + coeff0_26*basisvalue26 + coeff0_27*basisvalue27 + coeff0_28*basisvalue28 + coeff0_29*basisvalue29 + coeff0_30*basisvalue30 + coeff0_31*basisvalue31 + coeff0_32*basisvalue32 + coeff0_33*basisvalue33 + coeff0_34*basisvalue34;
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis() is not yet implemented.");
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_02 = element_coordinates[3][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
    const double J_12 = element_coordinates[3][1] - element_coordinates[0][1];
    const double J_20 = element_coordinates[1][2] - element_coordinates[0][2];
    const double J_21 = element_coordinates[2][2] - element_coordinates[0][2];
    const double J_22 = element_coordinates[3][2] - element_coordinates[0][2];
    
    // Compute sub determinants
    const double d00 = J_11*J_22 - J_12*J_21;
    const double d01 = J_12*J_20 - J_10*J_22;
    const double d02 = J_10*J_21 - J_11*J_20;
    
    const double d10 = J_02*J_21 - J_01*J_22;
    const double d11 = J_00*J_22 - J_02*J_20;
    const double d12 = J_01*J_20 - J_00*J_21;
    
    const double d20 = J_01*J_12 - J_02*J_11;
    const double d21 = J_02*J_10 - J_00*J_12;
    const double d22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d00 + J_10*d10 + J_20*d20;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = d00*(element_coordinates[0][0] - element_coordinates[2][0] - element_coordinates[3][0]) \
                    + d10*(element_coordinates[0][1] - element_coordinates[2][1] - element_coordinates[3][1]) \
                    + d20*(element_coordinates[0][2] - element_coordinates[2][2] - element_coordinates[3][2]);
    
    const double C1 = d01*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[3][0]) \
                    + d11*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[3][1]) \
                    + d21*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[3][2]);
    
    const double C2 = d02*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[2][0]) \
                    + d12*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[2][1]) \
                    + d22*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[2][2]);
    
    // Get coordinates and map to the UFC reference element
    double x = (C0 + d00*coordinates[0] + d10*coordinates[1] + d20*coordinates[2]) / detJ;
    double y = (C1 + d01*coordinates[0] + d11*coordinates[1] + d21*coordinates[2]) / detJ;
    double z = (C2 + d02*coordinates[0] + d12*coordinates[1] + d22*coordinates[2]) / detJ;
    
    // Map coordinates to the reference cube
    if (std::abs(y + z - 1.0) < 1e-14)
      x = 1.0;
    else
      x = -2.0 * x/(y + z - 1.0) - 1.0;
    if (std::abs(z - 1.0) < 1e-14)
      y = -1.0;
    else
      y = 2.0 * y/(1.0 - z) - 1.0;
    z = 2.0 * z - 1.0;
    
    // Compute number of derivatives
    unsigned int num_derivatives = 1;
    
    for (unsigned int j = 0; j < n; j++)
      num_derivatives *= 3;
    
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      combinations[j] = new unsigned int [n];
      for (unsigned int k = 0; k < n; k++)
        combinations[j][k] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] ={{d00 / detJ, d10 / detJ, d20 / detJ}, {d01 / detJ, d11 / detJ, d21 / detJ}, {d02 / detJ, d12 / detJ, d22 / detJ}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values
    for (unsigned int j = 0; j < 1*num_derivatives; j++)
      values[j] = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    const double scalings_y_4 = scalings_y_3*(0.5 - 0.5*y);
    const double scalings_z_0 = 1;
    const double scalings_z_1 = scalings_z_0*(0.5 - 0.5*z);
    const double scalings_z_2 = scalings_z_1*(0.5 - 0.5*z);
    const double scalings_z_3 = scalings_z_2*(0.5 - 0.5*z);
    const double scalings_z_4 = scalings_z_3*(0.5 - 0.5*z);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    const double psitilde_a_4 = 1.75*x*psitilde_a_3 - 0.75*psitilde_a_2;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_0_4 = 0.0285714285714286*psitilde_bs_0_3 + 1.8*y*psitilde_bs_0_3 - 0.771428571428571*psitilde_bs_0_2;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_1_3 = 0.285714285714286*psitilde_bs_1_2 + 2*y*psitilde_bs_1_2 - 0.714285714285714*psitilde_bs_1_1;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_2_2 = 1.02040816326531*psitilde_bs_2_1 + 2.57142857142857*y*psitilde_bs_2_1 - 0.551020408163265*psitilde_bs_2_0;
    const double psitilde_bs_3_0 = 1;
    const double psitilde_bs_3_1 = 4.5*y + 3.5;
    const double psitilde_bs_4_0 = 1;
    
    // Compute psitilde_cs
    const double psitilde_cs_00_0 = 1;
    const double psitilde_cs_00_1 = 2*z + 1;
    const double psitilde_cs_00_2 = 0.3125*psitilde_cs_00_1 + 1.875*z*psitilde_cs_00_1 - 0.5625*psitilde_cs_00_0;
    const double psitilde_cs_00_3 = 0.155555555555556*psitilde_cs_00_2 + 1.86666666666667*z*psitilde_cs_00_2 - 0.711111111111111*psitilde_cs_00_1;
    const double psitilde_cs_00_4 = 0.09375*psitilde_cs_00_3 + 1.875*z*psitilde_cs_00_3 - 0.78125*psitilde_cs_00_2;
    const double psitilde_cs_01_0 = 1;
    const double psitilde_cs_01_1 = 3*z + 2;
    const double psitilde_cs_01_2 = 0.777777777777778*psitilde_cs_01_1 + 2.33333333333333*z*psitilde_cs_01_1 - 0.555555555555556*psitilde_cs_01_0;
    const double psitilde_cs_01_3 = 0.428571428571429*psitilde_cs_01_2 + 2.14285714285714*z*psitilde_cs_01_2 - 0.714285714285714*psitilde_cs_01_1;
    const double psitilde_cs_02_0 = 1;
    const double psitilde_cs_02_1 = 4*z + 3;
    const double psitilde_cs_02_2 = 1.265625*psitilde_cs_02_1 + 2.8125*z*psitilde_cs_02_1 - 0.546875*psitilde_cs_02_0;
    const double psitilde_cs_03_0 = 1;
    const double psitilde_cs_03_1 = 5*z + 4;
    const double psitilde_cs_04_0 = 1;
    const double psitilde_cs_10_0 = 1;
    const double psitilde_cs_10_1 = 3*z + 2;
    const double psitilde_cs_10_2 = 0.777777777777778*psitilde_cs_10_1 + 2.33333333333333*z*psitilde_cs_10_1 - 0.555555555555556*psitilde_cs_10_0;
    const double psitilde_cs_10_3 = 0.428571428571429*psitilde_cs_10_2 + 2.14285714285714*z*psitilde_cs_10_2 - 0.714285714285714*psitilde_cs_10_1;
    const double psitilde_cs_11_0 = 1;
    const double psitilde_cs_11_1 = 4*z + 3;
    const double psitilde_cs_11_2 = 1.265625*psitilde_cs_11_1 + 2.8125*z*psitilde_cs_11_1 - 0.546875*psitilde_cs_11_0;
    const double psitilde_cs_12_0 = 1;
    const double psitilde_cs_12_1 = 5*z + 4;
    const double psitilde_cs_13_0 = 1;
    const double psitilde_cs_20_0 = 1;
    const double psitilde_cs_20_1 = 4*z + 3;
    const double psitilde_cs_20_2 = 1.265625*psitilde_cs_20_1 + 2.8125*z*psitilde_cs_20_1 - 0.546875*psitilde_cs_20_0;
    const double psitilde_cs_21_0 = 1;
    const double psitilde_cs_21_1 = 5*z + 4;
    const double psitilde_cs_22_0 = 1;
    const double psitilde_cs_30_0 = 1;
    const double psitilde_cs_30_1 = 5*z + 4;
    const double psitilde_cs_31_0 = 1;
    const double psitilde_cs_40_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.866025403784439*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_0;
    const double basisvalue1 = 2.73861278752583*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_0;
    const double basisvalue2 = 1.58113883008419*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_0;
    const double basisvalue3 = 1.11803398874989*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_1;
    const double basisvalue4 = 5.1234753829798*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_0;
    const double basisvalue5 = 3.96862696659689*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_0;
    const double basisvalue6 = 2.29128784747792*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_0;
    const double basisvalue7 = 3.24037034920393*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_1;
    const double basisvalue8 = 1.87082869338697*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_1;
    const double basisvalue9 = 1.3228756555323*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_2;
    const double basisvalue10 = 7.93725393319377*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_0;
    const double basisvalue11 = 6.70820393249937*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_0;
    const double basisvalue12 = 5.19615242270663*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_0;
    const double basisvalue13 = 3*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_0;
    const double basisvalue14 = 5.80947501931113*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_1;
    const double basisvalue15 = 4.5*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_1;
    const double basisvalue16 = 2.59807621135332*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_1;
    const double basisvalue17 = 3.67423461417477*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_2;
    const double basisvalue18 = 2.12132034355964*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_2;
    const double basisvalue19 = 1.5*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_3;
    const double basisvalue20 = 11.1242977306435*psitilde_a_4*scalings_y_4*psitilde_bs_4_0*scalings_z_4*psitilde_cs_40_0;
    const double basisvalue21 = 9.81070843517429*psitilde_a_3*scalings_y_3*psitilde_bs_3_1*scalings_z_4*psitilde_cs_31_0;
    const double basisvalue22 = 8.2915619758885*psitilde_a_2*scalings_y_2*psitilde_bs_2_2*scalings_z_4*psitilde_cs_22_0;
    const double basisvalue23 = 6.42261628933256*psitilde_a_1*scalings_y_1*psitilde_bs_1_3*scalings_z_4*psitilde_cs_13_0;
    const double basisvalue24 = 3.70809924354783*psitilde_a_0*scalings_y_0*psitilde_bs_0_4*scalings_z_4*psitilde_cs_04_0;
    const double basisvalue25 = 8.77496438739212*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_1;
    const double basisvalue26 = 7.41619848709566*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_1;
    const double basisvalue27 = 5.74456264653803*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_1;
    const double basisvalue28 = 3.3166247903554*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_1;
    const double basisvalue29 = 6.42261628933256*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_2;
    const double basisvalue30 = 4.9749371855331*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_2;
    const double basisvalue31 = 2.87228132326901*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_2;
    const double basisvalue32 = 4.06201920231798*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_3;
    const double basisvalue33 = 2.34520787991171*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_3;
    const double basisvalue34 = 1.6583123951777*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_4;
    
    // Table(s) of coefficients
    static const double coefficients0[35][35] = \
    {{-0.0137464349807054, -0.0144900147488139, -0.00836581391578938, -0.00591552374999942, 0, 0, 0, 0, 0, 0, -0.00671936840905293, -0.00567890279999946, -0.00439885919382572, -0.00253968253968254, -0.00491807409042212, -0.00380952380952381, -0.00219942959691286, -0.00311046316543896, -0.0017958267458706, -0.00126984126984129, 0.0136980289516341, 0.0120805260192622, 0.010209907964538, 0.00790856070259326, 0.00456600965054471, 0.0108051509532101, 0.00913201930108942, 0.0070736317340728, 0.00408396318581521, 0.00790856070259324, 0.00612594477872281, 0.0035368158670364, 0.00500181296677924, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807054, 0.0144900147488139, -0.00836581391578937, -0.00591552374999945, 0, 0, 0, 0, 0, 0, 0.00671936840905292, -0.00567890279999946, 0.00439885919382571, -0.00253968253968253, -0.00491807409042211, 0.0038095238095238, -0.00219942959691286, 0.00311046316543895, -0.00179582674587059, -0.00126984126984127, 0.0136980289516341, -0.0120805260192622, 0.010209907964538, -0.00790856070259325, 0.00456600965054471, -0.0108051509532101, 0.00913201930108942, -0.00707363173407281, 0.00408396318581522, 0.00790856070259325, -0.00612594477872282, 0.0035368158670364, -0.00500181296677924, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807054, 0, 0.0167316278315787, -0.00591552374999944, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0101587301587302, 0, 0, -0.00659828879073858, 0, 0.00359165349174119, -0.00126984126984127, 0, 0, 0, 0, 0.0228300482527235, 0, 0, 0, -0.0163358527432608, 0, 0, 0.0106104476011092, 0, -0.0057755961256123, 0.00204198159290761},
    {-0.0137464349807054, 0, 0, 0.0177465712499983, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0126984126984127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0306297238936141},
    {0.0439885919382572, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0, 0.0406349206349206, 0, 0, 0.00439885919382572, 0, -0.0143666139669648, 0.00761904761904762, 0, 0, 0, 0, 0, 0, 0, 0, 0.0367556686723369, 0, 0, -0.0424417904044368, 0, 0.0303218796594646, -0.0122518895574456},
    {-0.0329914439536929, 0, -0.0200779533978945, -0.0141972569999987, 0, 0, -0.00969857289937743, 0, 0.0712696645099798, -0.050395263067897, 0, 0, 0, 0, 0, 0, 0.0461880215351701, 0, 0.0107749604752236, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0495154221385096, 0, -0.0606437593189292, 0.0306297238936141},
    {0.0439885919382572, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0, 0.0359165349174119, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0505364660991076, -0.0408396318581521},
    {0.0439885919382572, 0.0231840235981022, -0.013385302265263, 0.0189296759999982, 0.0433733365754904, -0.0335968420452646, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484216, 0.0268774736362117, -0.0227156111999979, 0.0175954367753029, -0.0101587301587302, 0.00327871606028142, -0.00253968253968254, 0.00146628639794192, -0.0124418526617558, 0.00718330698348239, 0.00761904761904763, 0, 0, 0, 0, 0, 0.0243115896447228, -0.0205470434274512, 0.0159156714016638, -0.00918891716808423, -0.031634242810373, 0.0245037791148913, -0.0141472634681456, 0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.032991443953693, -0.0173880176985767, 0.0100389766989472, -0.0141972569999986, -0.00722888942924839, 0.00559947367421073, -0.00323285763312585, 0.0617213399848368, -0.03563483225499, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, -0.0266666666666667, 0.01539600717839, 0.00933138949631687, -0.00538748023761181, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, -0.0285877423007065, 0.0165051407128366, -0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, 0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0.0311046316543896, -0.017958267458706, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, -0.0335968420452646, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, 0, -0.0117302911835353, 0.0101587301587301, -0.0229510124219699, 0.00761904761904762, -0.0014662863979419, 0.0165891368823411, -0.00718330698348239, -0.00761904761904761, 0, 0.0241610520385245, -0.0357346778758831, 0.0355885231616696, -0.0228300482527235, -0.00270128773830253, -0.0114150241263618, 0.0159156714016638, -0.0112308987609918, 0.00395428035129663, 0.00306297238936141, -0.0035368158670364, -0.00375135972508442, 0.000721949515701537, 0.0020419815929076},
    {-0.0329914439536929, -0.0173880176985767, -0.0100389766989473, 0.0141972569999987, -0.00722888942924838, 0.0615942104163185, -0.0614242950293905, -0.00685792666498185, -0.00395942580611001, 0.00559947367421077, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042211, -0.0266666666666667, 0.0175954367753029, 0.00933138949631687, 0.0053874802376118, -0.00761904761904761, 0, 0, 0.0357346778758831, -0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108941, 0, 0.00408396318581522, 0.0013180934504322, 0.00714693557517662, -0.00471575448938186, -0.00250090648338961, -0.00144389903140308, 0.0020419815929076},
    {0.0439885919382572, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0.0293257279588381, 0.0101587301587301, 0, -0.0101587301587302, -0.0219942959691286, 0.00207364211029263, 0.017958267458706, -0.00761904761904761, 0, 0, 0, 0.0395428035129662, -0.0456600965054471, 0, 0, -0.017684079335182, 0.0142938711503532, 0, 0.00612594477872281, 0, -0.0012504532416948, -0.00360974757850769, 0.0020419815929076},
    {0.043988591938257, -0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0.0433733365754903, 0.0335968420452647, 0.0193971457987549, 0.0274317066599275, 0.01583770322444, 0.0111989473484216, -0.0268774736362117, -0.0227156111999979, -0.0175954367753029, -0.0101587301587302, 0.00327871606028141, 0.00253968253968254, 0.00146628639794192, 0.0124418526617558, 0.00718330698348239, 0.00761904761904762, 0, 0, 0, 0, 0, -0.0243115896447228, -0.0205470434274512, -0.0159156714016638, -0.00918891716808423, -0.031634242810373, -0.0245037791148913, -0.0141472634681456, -0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, 0.0173880176985767, 0.0100389766989472, -0.0141972569999987, -0.00722888942924838, -0.00559947367421076, -0.00323285763312582, -0.0617213399848368, -0.0356348322549899, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, 0.0266666666666667, 0.01539600717839, -0.00933138949631688, -0.00538748023761179, -0.019047619047619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, 0.0285877423007065, 0.0165051407128365, 0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382572, -0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, -0.0311046316543895, -0.017958267458706, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484215, -0.0268774736362117, 0, 0.0117302911835353, 0.0101587301587302, -0.0229510124219699, -0.00761904761904762, -0.00146628639794191, -0.0165891368823411, -0.00718330698348239, -0.00761904761904762, 0, -0.0241610520385245, -0.0357346778758831, -0.0355885231616696, -0.0228300482527235, 0.00270128773830253, -0.0114150241263618, -0.0159156714016638, -0.0112308987609918, 0.00395428035129663, -0.00306297238936141, -0.0035368158670364, 0.00375135972508442, 0.000721949515701537, 0.0020419815929076},
    {-0.0329914439536929, 0.0173880176985767, -0.0100389766989473, 0.0141972569999987, -0.00722888942924837, -0.0615942104163185, -0.0614242950293905, 0.00685792666498186, -0.00395942580610999, 0.00559947367421076, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042212, 0.0266666666666667, 0.0175954367753029, -0.00933138949631687, 0.0053874802376118, -0.00761904761904762, 0, 0, 0.0357346778758831, 0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108942, 0, 0.00408396318581522, 0.00131809345043221, -0.00714693557517662, -0.00471575448938187, 0.00250090648338962, -0.00144389903140308, 0.00204198159290761},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, -0.0293257279588381, 0.0101587301587301, 0, 0.0101587301587302, -0.0219942959691286, -0.00207364211029264, 0.017958267458706, -0.00761904761904762, 0, 0, 0, -0.0395428035129662, -0.0456600965054471, 0, 0, 0.017684079335182, 0.0142938711503532, 0, -0.00612594477872281, 0, 0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.0439885919382573, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0134387368181058, -0.0113578055999989, -0.0205280095711867, -0.0152380952380952, -0.00983614818084423, -0.0177777777777778, -0.0131965775814772, -0.0145154947720485, -0.0107749604752236, -0.00761904761904762, -0.0547921158065365, -0.0241610520385245, -0.00510495398226901, 0.00395428035129662, 0.00456600965054471, -0.0216103019064202, -0.00456600965054471, 0.0035368158670364, 0.00408396318581522, -0.00395428035129662, 0.00306297238936141, 0.0035368158670364, 0.00250090648338962, 0.00288779806280615, 0.00204198159290761},
    {-0.0329914439536929, 0, 0.0200779533978945, 0.0141972569999987, -0.0867466731509807, 0, 0.00969857289937743, 0, 0.00791885161221999, 0.00559947367421078, 0, 0.0340734167999968, 0, -0.0152380952380952, 0.0295084445425327, 0, -0.0131965775814772, 0, -0.0107749604752236, -0.00761904761904762, 0.0821881737098047, 0, -0.010209907964538, 0, 0.00456600965054471, 0, -0.00913201930108942, 0, 0.00408396318581521, -0.00790856070259325, 0, 0.0035368158670364, 0, 0.00288779806280615, 0.0020419815929076},
    {0.0439885919382571, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754904, -0.0335968420452646, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, -0.0134387368181059, -0.0113578055999989, 0.0205280095711867, -0.0152380952380952, -0.00983614818084423, 0.0177777777777778, -0.0131965775814772, 0.0145154947720485, -0.0107749604752236, -0.00761904761904762, -0.0547921158065365, 0.0241610520385245, -0.00510495398226901, -0.00395428035129662, 0.00456600965054471, 0.0216103019064202, -0.00456600965054471, -0.0035368158670364, 0.00408396318581521, -0.00395428035129662, -0.0030629723893614, 0.0035368158670364, -0.00250090648338962, 0.00288779806280615, 0.0020419815929076},
    {0.0439885919382573, 0.139104141588614, -0.0803118135915779, -0.0567890279999946, 0.0578311154339871, 0.0335968420452646, -0.0420271492306356, 0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, -0.0586514559176763, 0.0406349206349207, 0.0393445927233769, 0.00253968253968253, -0.0109971479845643, -0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, -0.053052238005546, 0.0367556686723369, -0.0105447476034577, -0.0245037791148912, 0.0235787724469093, 0.0175063453837273, 0, -0.0122518895574456},
    {0.0439885919382571, 0, 0.160623627183156, -0.0567890279999947, 0, 0.0783926314389508, 0.00969857289937743, -0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, 0.0586514559176763, -0.060952380952381, 0, 0.033015873015873, 0.0241937255660415, -0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, 0.053052238005546, -0.0551335030085054, 0, -0.0326717054865217, 0.0141472634681456, 0.00875317269186366, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382573, 0, 0, 0.170367083999984, 0, -0.0111989473484215, 0.00969857289937744, 0.0822951199797824, 0.0475131096733199, -0.0167984210226323, 0, 0, 0, 0, 0, 0.0533333333333333, -0.0461880215351701, 0.0435464843161454, 0.0251415744421884, -0.0825396825396825, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0571754846014129, -0.0495154221385096, -0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, 0.0578311154339871, -0.0335968420452646, -0.0420271492306356, -0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, 0.0586514559176763, 0.0406349206349206, 0.0393445927233769, -0.00253968253968253, -0.0109971479845643, 0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, 0.053052238005546, 0.0367556686723369, -0.0105447476034577, 0.0245037791148913, 0.0235787724469093, -0.0175063453837273, 0, -0.0122518895574456},
    {0.0439885919382571, 0, 0.160623627183156, -0.0567890279999947, 0, -0.0783926314389508, 0.00969857289937743, 0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, -0.0586514559176763, -0.060952380952381, 0, -0.033015873015873, 0.0241937255660415, 0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, -0.053052238005546, -0.0551335030085054, 0, 0.0326717054865217, 0.0141472634681456, -0.00875317269186366, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382574, 0, 0, 0.170367083999984, 0, 0.0111989473484216, 0.00969857289937746, -0.0822951199797824, 0.0475131096733199, -0.0167984210226323, 0, 0, 0, 0, 0, -0.0533333333333333, -0.0461880215351701, -0.0435464843161454, 0.0251415744421884, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.057175484601413, -0.0495154221385096, 0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754904, 0.0447957893936862, 0.0484928644968872, -0.0548634133198549, 0, -0.0167984210226323, 0.0806324209086351, 0.0227156111999978, -0.00586514559176761, -0.0101587301587302, -0.00327871606028142, 0.0304761904761905, 0.0271262983619253, 0.045620126426438, 0.0430998419008943, 0.0393650793650793, 0, 0, 0, 0, 0, 0.0729347689341683, 0.0205470434274512, -0.0053052238005546, -0.00918891716808422, 0.031634242810373, -0.00816792637163041, -0.0141472634681456, -0.00875317269186366, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754904, -0.0447957893936862, 0.0484928644968872, 0.0548634133198549, 0, -0.0167984210226323, -0.0806324209086351, 0.0227156111999979, 0.00586514559176762, -0.0101587301587302, -0.00327871606028142, -0.0304761904761905, 0.0271262983619253, -0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, -0.0729347689341683, 0.0205470434274512, 0.0053052238005546, -0.00918891716808422, 0.031634242810373, 0.00816792637163041, -0.0141472634681456, 0.00875317269186366, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0.0144577788584968, 0, -0.00323285763312579, 0, -0.0950262193466398, -0.0167984210226323, 0, 0, 0, 0, -0.0688530372659096, 0, 0.01539600717839, 0, -0.0502831488843767, -0.0825396825396825, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0738132332242036, 0, 0.0165051407128365, 0, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754904, -0.0447957893936862, -0.00969857289937743, 0.0548634133198549, 0.0316754064488799, 0.0391963157194754, 0.0806324209086352, 0, 0.0527863103259087, 0.060952380952381, 0.0229510124219699, 0.0101587301587302, 0.0168622935763319, -0.0124418526617558, -0.00718330698348239, -0.013968253968254, 0, 0.0724831561155734, 0.0357346778758831, -0.0118628410538899, -0.0228300482527235, -0.00810386321490759, 0.0114150241263618, -0.00530522380055459, -0.0112308987609918, -0.00395428035129662, -0.0010209907964538, -0.0035368158670364, 0.00125045324169481, 0.000721949515701534, 0.00204198159290761},
    {0.0439885919382572, 0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754904, 0.0447957893936862, -0.00969857289937744, -0.0548634133198549, 0.0316754064488799, 0.0391963157194754, -0.0806324209086351, 0, -0.0527863103259086, 0.060952380952381, 0.0229510124219699, -0.0101587301587302, 0.0168622935763319, 0.0124418526617558, -0.00718330698348239, -0.013968253968254, 0, -0.0724831561155734, 0.0357346778758831, 0.0118628410538899, -0.0228300482527235, 0.00810386321490759, 0.0114150241263618, 0.0053052238005546, -0.0112308987609918, -0.00395428035129663, 0.0010209907964538, -0.0035368158670364, -0.00125045324169481, 0.000721949515701532, 0.0020419815929076},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0.0144577788584968, 0, -0.0614242950293905, 0, -0.0633508128977598, 0.0391963157194754, 0, -0.0681468335999936, 0, -0.0914285714285714, 0.00983614818084423, 0, 0.0285925847598672, 0, 0.0143666139669648, -0.013968253968254, 0, 0, -0.0714693557517662, 0, 0.0456600965054471, 0, 0.0182640386021788, 0, 0.00408396318581519, -0.00263618690086442, 0, -0.00471575448938187, 0, -0.00144389903140307, 0.0020419815929076},
    {0.351908735506058, 0, 0, 0, -0.115662230867974, 0, -0.129314305325033, 0, 0, -0.134387368181059, 0, -0.0908624447999914, 0, 0.0406349206349207, -0.0786891854467539, 0, -0.0879771838765144, 0, 0, 0.0711111111111111, 0, 0, 0, 0, 0, 0, -0.0821881737098047, 0, 0.0367556686723369, 0.0210894952069153, 0, 0.0235787724469093, 0, 0, -0.0122518895574456}};
    
    // Interesting (new) part
    // Tables of derivatives of the polynomial base (transpose)
    static const double dmats0[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {6.32455532033676, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 11.2249721603218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.58257569495584, 0, 8.36660026534075, -1.18321595661992, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.74165738677394, 0, 0, 8.69482604771366, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.49909083394702, 0, -3.3466401061363, -2.36643191323985, 15.4919333848297, 0, 0.692820323027558, 0, 0.565685424949242, 0.400000000000006, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 4.89897948556635, 0, 0, 0, 14.1985914794391, 0, -0.828078671210817, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.60000000000001, 0, 8.76356092008266, -1.54919333848297, 0, 1.05385203468073e-14, 9.52470471983253, 0, -1.48131215963609, 0.261861468283189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 4.24264068711929, 0, 0, 0, 0, 0, 14.3427433120127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.11022302462516e-14, 0, 0},
    {3.11769145362397, 0, 3.16227766016838, 4.91934955049954, 0, 0, 0, 0, 10.690449676497, -2.41897262725906, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.54558441227158, 0, 0, 7.66811580507233, 0, 0, 0, 0, 0, 10.3691851174526, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 11.6057691494799, 0, 0, 0, -4.20458932936041, 0, -3.43303281162798, 0, 0, 19.6214168703486, 0, 0.6116777418412, 0, 0, 0.529728463363978, 0, 0.432521479156785, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.53137212479104, 0, 3.54562104171167, -2.50713268211203, 4.78713553878169, -1.29633448990283e-14, -5.5662674507549, 0, -1.04880884817015, 0.741619848709566, 0, 18.8034951158403, 0, 1.68183573174416, -0.603122387046457, 0, 0.701283781217661, 0, 0.132137494528679, -0.093435318430233, 0, 0, 0, 0, -1.35102366043011e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 2.59512887494071, 0, 0, 0, 10.0285307284481, 0, -0.767649473578739, 0, 0, 0, 0, 16.4130361329658, 0, 0, -1.26347611061158, 0, 0.0967147429123337, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.96647939483827, 0, 8.12403840463596, -1.64130361329658, 0, 0, 11.7728501222091, 0, -2.40312296813959, 0.485504156227608, 0, 0, 0, 10.2761860629321, 0, 0, -1.48323969741913, 0, 0.30276503540975, -0.06116777418412, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.05298244095218, 0, -1.58564993434419, 4.4848952846511, 4.28174419288838, 0, 0.191485421551267, 0, -3.75233260785875, -4.31161222746202, 0, 0, 0, 0, 18.8807171866294, 0, 0.844371341865036, 0, 1.18187368057056, 1.04463861754669, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 2.32115382989599, 0, 0, 0, 3.92428337406973, 0, 5.49285249860477, 1.10651505319526e-14, 0, 0, 0, 0, 0, 0, 17.3044631365565, 0, -1.73008591662714, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.65329983228432, 0, 4.15220619990513, 2.93605316083775, 0, 0, 2.63248931621764, 0, 9.82591326180785, -2.82261277137741, 0, 0, 0, 0, 0, 0, 11.6081867662439, 0, -3.09487177319465, 0.683876505540241, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 2.01017818278147, 0, 0, 0, 0, 0, 8.91928088068603, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16.8558564884489, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.29782505861521, 0, 1.49829835452879, 5.50917601898535, 0, 0, 0, 0, 6.64803945320939, 4.13676892548485, 0, 0, 0, 0, 0, 0, 0, 0, 12.5636136423842, -3.55352656109508, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87616630392938, 0, 0, 6.2283092998577, 0, 0, 0, 0, 1.26414611676556e-14, 11.0541524195338, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11.6057691494799, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    static const double dmats1[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.16227766016838, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.47722557505166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.95803989154981, 5.61248608016091, -1.08012344973464, -0.763762615825972, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.29128784747792, 7.24568837309472, 4.18330013267038, -0.59160797830996, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-2.64575131106459, 0, 9.66091783079296, 0.683130051063973, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87082869338697, 0, 0, 4.34741302385683, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.24037034920393, 0, 0, 7.52994023880668, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.74954541697351, 5.79655069847578, -1.67332005306815, -1.18321595661993, 7.74596669241484, -1.2, 0.346410161513782, -0.979795897113276, 0.282842712474624, 0.200000000000003, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.32379000772445, 2.44948974278318, 2.8284271247462, -0.999999999999997, 9.16515138991168, 7.09929573971954, -2.04939015319192, -0.414039335605406, -0.47809144373376, 0.1690308509457, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.80000000000001, -5.69209978830308, 4.38178046004133, -0.774596669241484, 0, 10.998181667894, 4.76235235991627, 0.962140470884735, -0.740656079818043, 0.130930734141594, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.19615242270664, 0, -3.16227766016838, -2.23606797749979, 0, 0, 13.7477270848675, 0, 0.53452248382485, 0.377964473009225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.01246117974981, 2.12132034355964, -0.408248290463865, 3.17542648054294, 0, 0, 0, 7.17137165600636, -1.38013111868471, -1.56144011671765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.55884572681199, 2.73861278752583, 1.58113883008419, 2.45967477524977, 0, 0, 0, 9.25820099772552, 5.34522483824848, -1.20948631362953, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-1.8, 0, 3.65148371670111, -2.84018778721878, 0, 0, 0, 0, 12.3442679969674, 1.39659449751034, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.27279220613579, 0, 0, 3.83405790253616, 0, 0, 0, 0, 0, 5.18459255872629, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.20454076850486, 0, 0, 6.6407830863536, 0, 0, 0, 0, 0, 8.97997772825746, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.56904651573303, 5.80288457473998, -2.01017818278147, -1.42141062443803, 8.14215222512715, -2.10229466468021, 0.728256234341424, -1.71651640581399, 0.594618725379072, 0.420458932936045, 9.81070843517429, -1.18450885369836, 0.305838870920601, -0.105945692672795, -1.02581475831037, 0.264864231681988, -0.0917516612761807, 0.216260739578392, -0.0749149177264403, -0.0529728463363971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.26568606239552, 3.07059789431495, 1.77281052085584, -1.25356634105601, 2.39356776939085, 6.30376871403131, -2.78313372537745, -0.908295106229242, -0.524404424085073, 0.370809924354785, 11.1242977306435, 9.40174755792013, -2.42752078113806, 0.840917865872083, -0.301561193523229, -0.794200206656968, 0.350641890608831, 0.114434427054264, 0.0660687472643388, -0.0467176592151161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.91485421551268, 1.29756443747035, 3.74574588632197, -1.05945692672795, -8.09173593712687, 5.01426536422408, 1.80936716113936, -0.383824736789367, -1.1080065755349, 0.313391585264002, 0, 12.7134831207354, 8.20651806648289, -2.84282124887606, 1.01946290306866, -0.631738055305789, -0.227958835180082, 0.0483573714561662, 0.139595707137601, -0.0394836284566123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741913, 7.03562363973515, 4.06201920231798, -0.820651806648291, 0, -6.79705818718656, 5.88642506110457, -2.08116553882675, -1.2015614840698, 0.242752078113807, 0, 0, 14.8323969741913, 5.13809303146605, 0, 0.856348838577677, -0.741619848709568, 0.262202212042541, 0.151382517704876, -0.03058388709206, 0, 0, 0, 0, 0, 0, 0, -1.07304327303254e-14, 0, 0, 0, 0, 0, 0, 0},
    {-3.42539535431072, 0, 9.38083151964686, 1.89521416591738, 0, 0, -3.3985290935933, 0, -2.77488738510233, -0.560611910581395, 0, 0, 0, 17.7988763690296, 0, 0, 0.428174419288839, 0, 0.349602949390051, 0.0706304617818617, 0, 0, 0, 0, -1.22900818059705e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.02649122047609, 2.74642624930239, -0.792824967172094, 2.24244764232555, 2.14087209644419, -0.331662479035539, 0.0957427107756354, 6.49923072370876, -1.87616630392937, -2.15580611373101, 0, 0, 0, 0, 9.44035859331468, -1.46249406456536, 0.422185670932519, -2.04706526287664, 0.59093684028528, 0.522319308773342, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.71269767715535, 1.16057691494799, 1.34011878852098, 1.89521416591737, 2.53311402559511, 1.96214168703486, -0.566421515598879, 2.74642624930239, 3.17129986868837, -1.82198870938952, 0, 0, 0, 0, 11.1699829238239, 8.65223156827827, -2.49768411251822, -0.86504295831357, -0.998865569685859, 0.441440386136645, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.32664991614216, -2.69693703815182, 2.07610309995257, 1.46802658041887, 0, 3.03973683071413, 1.31624465810882, -6.382117875081, 4.91295663090393, -1.4113063856887, 0, 0, 0, 0, 0, 13.4039795085887, 5.80409338312195, 2.01017818278147, -1.54743588659732, 0.341938252770122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.82970843102536, 0, -1.49829835452879, 4.23782770691181, 0, 0, 3.79967103839267, 0, -3.54562104171168, -4.07409060843206, 0, 0, 0, 0, 0, 0, 16.7549743857359, 0, 1.11676565710082, 0.987090711415303, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741914, 1.00508909139074, -0.193429485824667, 3.55615782880926, 0, 0, 0, 4.45964044034301, -0.858258202906997, 2.67027285925187, 0, 0, 0, 0, 0, 0, 0, 8.42792824422443, -1.62195554683794, -2.29379153190449, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.14891252930761, 1.29756443747036, 0.749149177264392, 2.75458800949268, 0, 0, 0, 5.75737105184054, 3.32401972660469, 2.06838446274242, 0, 0, 0, 0, 0, 0, 0, 10.8804085776374, 6.2818068211921, -1.77676328054754, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-1.32664991614217, 0, 1.73008591662714, -3.18072425757423, 0, 0, 0, 0, 7.67649473578739, -2.38836465270398, 0, 0, 0, 0, 0, 0, 0, 0, 14.5072114368499, 2.05162951662072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.93808315196469, 0, 0, 3.11415464992885, 0, 0, 0, 0, 0, 5.52707620976692, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.80288457473997, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.6248076809272, 0, 0, 5.39387407630364, 0, 0, 0, 0, 1.09477880811911e-14, 9.57317681262152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10.0508909139073, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    static const double dmats2[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.16227766016838, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.82574185835055, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.16397779494322, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.95803989154981, 5.61248608016091, -1.08012344973464, -0.763762615825972, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.29128784747792, 1.44913767461894, 4.18330013267038, -0.591607978309961, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.32287565553229, 0, 3.86436713231718, -0.341565025531985, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87082869338697, 7.09929573971954, 0, 4.34741302385683, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.08012344973464, 0, 7.09929573971954, 2.50998007960223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-3.81881307912987, 0, 0, 8.87411967464942, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.74954541697351, 5.79655069847578, -1.67332005306815, -1.18321595661993, 7.74596669241484, -1.2, 0.346410161513782, -0.979795897113276, 0.282842712474623, 0.200000000000002, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.32379000772445, 2.44948974278318, 2.82842712474619, -0.999999999999997, 1.30930734141596, 7.09929573971954, -2.04939015319193, -0.414039335605408, -0.47809144373376, 0.169030850945702, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.80000000000001, 0.632455532033676, 4.38178046004133, -0.774596669241484, 0, 3.1423376193983, 4.76235235991627, -0.106904496764967, -0.740656079818043, 0.130930734141594, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.03923048454133, 0, 3.16227766016838, -0.447213595499958, 0, 0, 5.89188303637179, 0, -0.534522483824848, 0.0755928946018432, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.01246117974981, 2.12132034355964, -0.408248290463862, 3.17542648054294, 9.07114735222145, 0, 0, 7.17137165600636, -1.38013111868471, -1.56144011671765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.55884572681199, 0.54772255750517, 1.58113883008419, 2.45967477524977, 0, 9.07114735222145, 0, 1.85164019954511, 5.34522483824848, -1.20948631362953, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.900000000000006, 0, 1.46059348668044, 1.42009389360938, 0, 0, 9.07114735222146, 0, 4.93770719878694, -0.69829724875518, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.27279220613579, -6.26099033699941, 0, 3.83405790253617, 0, 0, 0, 10.5830052442584, 0, 5.18459255872629, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.734846922834956, 0, -6.26099033699941, 2.21359436211787, 0, 0, 0, 0, 10.5830052442584, 2.99332590941915, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.7157676649773, 0, 0, -4.69574275274955, 0, 0, 0, 0, 1.02381519203602e-14, 12.69960629311, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.56904651573303, 5.80288457473998, -2.01017818278147, -1.42141062443803, 8.14215222512715, -2.10229466468021, 0.728256234341424, -1.71651640581399, 0.594618725379071, 0.420458932936045, 9.81070843517429, -1.18450885369836, 0.305838870920601, -0.105945692672795, -1.02581475831037, 0.264864231681988, -0.0917516612761806, 0.216260739578392, -0.0749149177264403, -0.0529728463363971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.26568606239552, 3.07059789431495, 1.77281052085584, -1.25356634105601, 2.39356776939084, 6.30376871403131, -2.78313372537745, -0.908295106229243, -0.524404424085072, 0.370809924354783, 1.23603308118261, 9.40174755792013, -2.42752078113806, 0.840917865872083, -0.301561193523228, -0.794200206656968, 0.350641890608832, 0.114434427054263, 0.0660687472643389, -0.0467176592151161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.91485421551268, 1.29756443747036, 3.74574588632197, -1.05945692672795, 0.404586796856345, 5.01426536422408, 1.80936716113936, -0.383824736789367, -1.1080065755349, 0.313391585264004, 0, 2.82521847127454, 8.2065180664829, -2.84282124887606, -0.0509731451534337, -0.631738055305789, -0.227958835180083, 0.0483573714561674, 0.139595707137602, -0.0394836284566113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741913, 0.335029697130247, 4.06201920231798, -0.820651806648289, 0, 1.69926454679665, 5.88642506110457, -0.0991031208965142, -1.2015614840698, 0.242752078113805, 0, 0, 4.94413232473044, 5.13809303146605, 0, -0.21408720964442, -0.741619848709568, 0.012485819621074, 0.151382517704875, -0.0305838870920598, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.856348838577676, 0, 2.68023757704196, -0.473803541479343, 0, 0, 5.09779364038993, 0, -0.792824967172093, 0.140152977645346, 0, 0, 0, 7.91061171956871, 0, 0, -0.642261628933256, 0, 0.0998865569685856, -0.0176576154454656, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.02649122047609, 2.74642624930238, -0.792824967172095, 2.24244764232555, 2.14087209644419, -0.331662479035541, 0.0957427107756347, 6.49923072370876, -1.87616630392937, -2.15580611373101, 11.0554159678513, 0, 0, 0, 9.44035859331468, -1.46249406456536, 0.422185670932518, -2.04706526287664, 0.59093684028528, 0.522319308773342, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.71269767715535, 1.16057691494799, 1.34011878852098, 1.89521416591737, 0.361873432227872, 1.96214168703486, -0.566421515598874, 2.74642624930239, 3.17129986868837, -1.82198870938952, 0, 11.0554159678513, 0, 0, 1.59571184626056, 8.65223156827827, -2.49768411251822, -0.865042958313571, -0.99886556968586, 0.441440386136643, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.32664991614216, 0.299659670905759, 2.07610309995256, 1.46802658041887, 0, 0.868496237346896, 1.31624465810882, 0.70912420834234, 4.91295663090392, -1.41130638568871, 0, 0, 11.0554159678513, 0, 0, 3.82970843102535, 5.80409338312195, -0.223353131420162, -1.54743588659732, 0.341938252770121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.765941686205069, 0, 1.49829835452879, 0.847565541382364, 0, 0, 1.62843044502543, 0, 3.54562104171167, -0.814818121686416, 0, 0, 0, 11.0554159678513, 0, 0, 7.18070330817254, 0, -1.11676565710082, 0.197418142283061, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741913, 1.00508909139074, -0.193429485824669, 3.55615782880926, -8.46157280212812, 0, 0, 4.45964044034301, -0.858258202906995, 2.67027285925187, 0, 0, 0, 0, 12.4373429638328, 0, 0, 8.42792824422443, -1.62195554683794, -2.29379153190448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.1489125293076, 0.25951288749407, 0.749149177264392, 2.75458800949268, 0, -8.46157280212812, 0, 1.15147421036811, 3.3240197266047, 2.06838446274242, 0, 0, 0, 0, 0, 12.4373429638327, 0, 2.17608171552749, 6.28180682119209, -1.77676328054754, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.663324958071074, 0, 0.692034366650854, 1.59036212878711, 0, 0, -8.46157280212813, 0, 3.07059789431495, 1.19418232635198, 0, 0, 0, 0, 0, 0, 12.4373429638327, 0, 5.80288457473997, -1.02581475831036, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.938083151964692, 7.62808987244125, 0, 3.11415464992885, 0, 0, 0, -7.5213980463361, 0, 5.52707620976692, 0, 0, 0, 0, 0, 0, 0, 14.2141062443803, 0, 5.80288457473997, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.541602560309066, 0, 7.62808987244125, 1.79795802543454, 0, 0, 0, 0, -7.5213980463361, 3.1910589375405, 0, 0, 0, 0, 0, 0, 0, 0, 14.2141062443803, 3.35029697130245, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-5.36159180343549, 0, 0, 8.8994381845148, 0, 0, 0, 0, 0, -5.26497863243526, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16.583123951777, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    // Compute reference derivatives
    // Declare pointer to array of derivatives on FIAT element
    double *derivatives = new double [num_derivatives];
    
    // Declare coefficients
    double coeff0_0 = 0;
    double coeff0_1 = 0;
    double coeff0_2 = 0;
    double coeff0_3 = 0;
    double coeff0_4 = 0;
    double coeff0_5 = 0;
    double coeff0_6 = 0;
    double coeff0_7 = 0;
    double coeff0_8 = 0;
    double coeff0_9 = 0;
    double coeff0_10 = 0;
    double coeff0_11 = 0;
    double coeff0_12 = 0;
    double coeff0_13 = 0;
    double coeff0_14 = 0;
    double coeff0_15 = 0;
    double coeff0_16 = 0;
    double coeff0_17 = 0;
    double coeff0_18 = 0;
    double coeff0_19 = 0;
    double coeff0_20 = 0;
    double coeff0_21 = 0;
    double coeff0_22 = 0;
    double coeff0_23 = 0;
    double coeff0_24 = 0;
    double coeff0_25 = 0;
    double coeff0_26 = 0;
    double coeff0_27 = 0;
    double coeff0_28 = 0;
    double coeff0_29 = 0;
    double coeff0_30 = 0;
    double coeff0_31 = 0;
    double coeff0_32 = 0;
    double coeff0_33 = 0;
    double coeff0_34 = 0;
    
    // Declare new coefficients
    double new_coeff0_0 = 0;
    double new_coeff0_1 = 0;
    double new_coeff0_2 = 0;
    double new_coeff0_3 = 0;
    double new_coeff0_4 = 0;
    double new_coeff0_5 = 0;
    double new_coeff0_6 = 0;
    double new_coeff0_7 = 0;
    double new_coeff0_8 = 0;
    double new_coeff0_9 = 0;
    double new_coeff0_10 = 0;
    double new_coeff0_11 = 0;
    double new_coeff0_12 = 0;
    double new_coeff0_13 = 0;
    double new_coeff0_14 = 0;
    double new_coeff0_15 = 0;
    double new_coeff0_16 = 0;
    double new_coeff0_17 = 0;
    double new_coeff0_18 = 0;
    double new_coeff0_19 = 0;
    double new_coeff0_20 = 0;
    double new_coeff0_21 = 0;
    double new_coeff0_22 = 0;
    double new_coeff0_23 = 0;
    double new_coeff0_24 = 0;
    double new_coeff0_25 = 0;
    double new_coeff0_26 = 0;
    double new_coeff0_27 = 0;
    double new_coeff0_28 = 0;
    double new_coeff0_29 = 0;
    double new_coeff0_30 = 0;
    double new_coeff0_31 = 0;
    double new_coeff0_32 = 0;
    double new_coeff0_33 = 0;
    double new_coeff0_34 = 0;
    
    // Loop possible derivatives
    for (unsigned int deriv_num = 0; deriv_num < num_derivatives; deriv_num++)
    {
      // Get values from coefficients array
      new_coeff0_0 = coefficients0[dof][0];
      new_coeff0_1 = coefficients0[dof][1];
      new_coeff0_2 = coefficients0[dof][2];
      new_coeff0_3 = coefficients0[dof][3];
      new_coeff0_4 = coefficients0[dof][4];
      new_coeff0_5 = coefficients0[dof][5];
      new_coeff0_6 = coefficients0[dof][6];
      new_coeff0_7 = coefficients0[dof][7];
      new_coeff0_8 = coefficients0[dof][8];
      new_coeff0_9 = coefficients0[dof][9];
      new_coeff0_10 = coefficients0[dof][10];
      new_coeff0_11 = coefficients0[dof][11];
      new_coeff0_12 = coefficients0[dof][12];
      new_coeff0_13 = coefficients0[dof][13];
      new_coeff0_14 = coefficients0[dof][14];
      new_coeff0_15 = coefficients0[dof][15];
      new_coeff0_16 = coefficients0[dof][16];
      new_coeff0_17 = coefficients0[dof][17];
      new_coeff0_18 = coefficients0[dof][18];
      new_coeff0_19 = coefficients0[dof][19];
      new_coeff0_20 = coefficients0[dof][20];
      new_coeff0_21 = coefficients0[dof][21];
      new_coeff0_22 = coefficients0[dof][22];
      new_coeff0_23 = coefficients0[dof][23];
      new_coeff0_24 = coefficients0[dof][24];
      new_coeff0_25 = coefficients0[dof][25];
      new_coeff0_26 = coefficients0[dof][26];
      new_coeff0_27 = coefficients0[dof][27];
      new_coeff0_28 = coefficients0[dof][28];
      new_coeff0_29 = coefficients0[dof][29];
      new_coeff0_30 = coefficients0[dof][30];
      new_coeff0_31 = coefficients0[dof][31];
      new_coeff0_32 = coefficients0[dof][32];
      new_coeff0_33 = coefficients0[dof][33];
      new_coeff0_34 = coefficients0[dof][34];
    
      // Loop derivative order
      for (unsigned int j = 0; j < n; j++)
      {
        // Update old coefficients
        coeff0_0 = new_coeff0_0;
        coeff0_1 = new_coeff0_1;
        coeff0_2 = new_coeff0_2;
        coeff0_3 = new_coeff0_3;
        coeff0_4 = new_coeff0_4;
        coeff0_5 = new_coeff0_5;
        coeff0_6 = new_coeff0_6;
        coeff0_7 = new_coeff0_7;
        coeff0_8 = new_coeff0_8;
        coeff0_9 = new_coeff0_9;
        coeff0_10 = new_coeff0_10;
        coeff0_11 = new_coeff0_11;
        coeff0_12 = new_coeff0_12;
        coeff0_13 = new_coeff0_13;
        coeff0_14 = new_coeff0_14;
        coeff0_15 = new_coeff0_15;
        coeff0_16 = new_coeff0_16;
        coeff0_17 = new_coeff0_17;
        coeff0_18 = new_coeff0_18;
        coeff0_19 = new_coeff0_19;
        coeff0_20 = new_coeff0_20;
        coeff0_21 = new_coeff0_21;
        coeff0_22 = new_coeff0_22;
        coeff0_23 = new_coeff0_23;
        coeff0_24 = new_coeff0_24;
        coeff0_25 = new_coeff0_25;
        coeff0_26 = new_coeff0_26;
        coeff0_27 = new_coeff0_27;
        coeff0_28 = new_coeff0_28;
        coeff0_29 = new_coeff0_29;
        coeff0_30 = new_coeff0_30;
        coeff0_31 = new_coeff0_31;
        coeff0_32 = new_coeff0_32;
        coeff0_33 = new_coeff0_33;
        coeff0_34 = new_coeff0_34;
    
        if(combinations[deriv_num][j] == 0)
        {
          new_coeff0_0 = coeff0_0*dmats0[0][0] + coeff0_1*dmats0[1][0] + coeff0_2*dmats0[2][0] + coeff0_3*dmats0[3][0] + coeff0_4*dmats0[4][0] + coeff0_5*dmats0[5][0] + coeff0_6*dmats0[6][0] + coeff0_7*dmats0[7][0] + coeff0_8*dmats0[8][0] + coeff0_9*dmats0[9][0] + coeff0_10*dmats0[10][0] + coeff0_11*dmats0[11][0] + coeff0_12*dmats0[12][0] + coeff0_13*dmats0[13][0] + coeff0_14*dmats0[14][0] + coeff0_15*dmats0[15][0] + coeff0_16*dmats0[16][0] + coeff0_17*dmats0[17][0] + coeff0_18*dmats0[18][0] + coeff0_19*dmats0[19][0] + coeff0_20*dmats0[20][0] + coeff0_21*dmats0[21][0] + coeff0_22*dmats0[22][0] + coeff0_23*dmats0[23][0] + coeff0_24*dmats0[24][0] + coeff0_25*dmats0[25][0] + coeff0_26*dmats0[26][0] + coeff0_27*dmats0[27][0] + coeff0_28*dmats0[28][0] + coeff0_29*dmats0[29][0] + coeff0_30*dmats0[30][0] + coeff0_31*dmats0[31][0] + coeff0_32*dmats0[32][0] + coeff0_33*dmats0[33][0] + coeff0_34*dmats0[34][0];
          new_coeff0_1 = coeff0_0*dmats0[0][1] + coeff0_1*dmats0[1][1] + coeff0_2*dmats0[2][1] + coeff0_3*dmats0[3][1] + coeff0_4*dmats0[4][1] + coeff0_5*dmats0[5][1] + coeff0_6*dmats0[6][1] + coeff0_7*dmats0[7][1] + coeff0_8*dmats0[8][1] + coeff0_9*dmats0[9][1] + coeff0_10*dmats0[10][1] + coeff0_11*dmats0[11][1] + coeff0_12*dmats0[12][1] + coeff0_13*dmats0[13][1] + coeff0_14*dmats0[14][1] + coeff0_15*dmats0[15][1] + coeff0_16*dmats0[16][1] + coeff0_17*dmats0[17][1] + coeff0_18*dmats0[18][1] + coeff0_19*dmats0[19][1] + coeff0_20*dmats0[20][1] + coeff0_21*dmats0[21][1] + coeff0_22*dmats0[22][1] + coeff0_23*dmats0[23][1] + coeff0_24*dmats0[24][1] + coeff0_25*dmats0[25][1] + coeff0_26*dmats0[26][1] + coeff0_27*dmats0[27][1] + coeff0_28*dmats0[28][1] + coeff0_29*dmats0[29][1] + coeff0_30*dmats0[30][1] + coeff0_31*dmats0[31][1] + coeff0_32*dmats0[32][1] + coeff0_33*dmats0[33][1] + coeff0_34*dmats0[34][1];
          new_coeff0_2 = coeff0_0*dmats0[0][2] + coeff0_1*dmats0[1][2] + coeff0_2*dmats0[2][2] + coeff0_3*dmats0[3][2] + coeff0_4*dmats0[4][2] + coeff0_5*dmats0[5][2] + coeff0_6*dmats0[6][2] + coeff0_7*dmats0[7][2] + coeff0_8*dmats0[8][2] + coeff0_9*dmats0[9][2] + coeff0_10*dmats0[10][2] + coeff0_11*dmats0[11][2] + coeff0_12*dmats0[12][2] + coeff0_13*dmats0[13][2] + coeff0_14*dmats0[14][2] + coeff0_15*dmats0[15][2] + coeff0_16*dmats0[16][2] + coeff0_17*dmats0[17][2] + coeff0_18*dmats0[18][2] + coeff0_19*dmats0[19][2] + coeff0_20*dmats0[20][2] + coeff0_21*dmats0[21][2] + coeff0_22*dmats0[22][2] + coeff0_23*dmats0[23][2] + coeff0_24*dmats0[24][2] + coeff0_25*dmats0[25][2] + coeff0_26*dmats0[26][2] + coeff0_27*dmats0[27][2] + coeff0_28*dmats0[28][2] + coeff0_29*dmats0[29][2] + coeff0_30*dmats0[30][2] + coeff0_31*dmats0[31][2] + coeff0_32*dmats0[32][2] + coeff0_33*dmats0[33][2] + coeff0_34*dmats0[34][2];
          new_coeff0_3 = coeff0_0*dmats0[0][3] + coeff0_1*dmats0[1][3] + coeff0_2*dmats0[2][3] + coeff0_3*dmats0[3][3] + coeff0_4*dmats0[4][3] + coeff0_5*dmats0[5][3] + coeff0_6*dmats0[6][3] + coeff0_7*dmats0[7][3] + coeff0_8*dmats0[8][3] + coeff0_9*dmats0[9][3] + coeff0_10*dmats0[10][3] + coeff0_11*dmats0[11][3] + coeff0_12*dmats0[12][3] + coeff0_13*dmats0[13][3] + coeff0_14*dmats0[14][3] + coeff0_15*dmats0[15][3] + coeff0_16*dmats0[16][3] + coeff0_17*dmats0[17][3] + coeff0_18*dmats0[18][3] + coeff0_19*dmats0[19][3] + coeff0_20*dmats0[20][3] + coeff0_21*dmats0[21][3] + coeff0_22*dmats0[22][3] + coeff0_23*dmats0[23][3] + coeff0_24*dmats0[24][3] + coeff0_25*dmats0[25][3] + coeff0_26*dmats0[26][3] + coeff0_27*dmats0[27][3] + coeff0_28*dmats0[28][3] + coeff0_29*dmats0[29][3] + coeff0_30*dmats0[30][3] + coeff0_31*dmats0[31][3] + coeff0_32*dmats0[32][3] + coeff0_33*dmats0[33][3] + coeff0_34*dmats0[34][3];
          new_coeff0_4 = coeff0_0*dmats0[0][4] + coeff0_1*dmats0[1][4] + coeff0_2*dmats0[2][4] + coeff0_3*dmats0[3][4] + coeff0_4*dmats0[4][4] + coeff0_5*dmats0[5][4] + coeff0_6*dmats0[6][4] + coeff0_7*dmats0[7][4] + coeff0_8*dmats0[8][4] + coeff0_9*dmats0[9][4] + coeff0_10*dmats0[10][4] + coeff0_11*dmats0[11][4] + coeff0_12*dmats0[12][4] + coeff0_13*dmats0[13][4] + coeff0_14*dmats0[14][4] + coeff0_15*dmats0[15][4] + coeff0_16*dmats0[16][4] + coeff0_17*dmats0[17][4] + coeff0_18*dmats0[18][4] + coeff0_19*dmats0[19][4] + coeff0_20*dmats0[20][4] + coeff0_21*dmats0[21][4] + coeff0_22*dmats0[22][4] + coeff0_23*dmats0[23][4] + coeff0_24*dmats0[24][4] + coeff0_25*dmats0[25][4] + coeff0_26*dmats0[26][4] + coeff0_27*dmats0[27][4] + coeff0_28*dmats0[28][4] + coeff0_29*dmats0[29][4] + coeff0_30*dmats0[30][4] + coeff0_31*dmats0[31][4] + coeff0_32*dmats0[32][4] + coeff0_33*dmats0[33][4] + coeff0_34*dmats0[34][4];
          new_coeff0_5 = coeff0_0*dmats0[0][5] + coeff0_1*dmats0[1][5] + coeff0_2*dmats0[2][5] + coeff0_3*dmats0[3][5] + coeff0_4*dmats0[4][5] + coeff0_5*dmats0[5][5] + coeff0_6*dmats0[6][5] + coeff0_7*dmats0[7][5] + coeff0_8*dmats0[8][5] + coeff0_9*dmats0[9][5] + coeff0_10*dmats0[10][5] + coeff0_11*dmats0[11][5] + coeff0_12*dmats0[12][5] + coeff0_13*dmats0[13][5] + coeff0_14*dmats0[14][5] + coeff0_15*dmats0[15][5] + coeff0_16*dmats0[16][5] + coeff0_17*dmats0[17][5] + coeff0_18*dmats0[18][5] + coeff0_19*dmats0[19][5] + coeff0_20*dmats0[20][5] + coeff0_21*dmats0[21][5] + coeff0_22*dmats0[22][5] + coeff0_23*dmats0[23][5] + coeff0_24*dmats0[24][5] + coeff0_25*dmats0[25][5] + coeff0_26*dmats0[26][5] + coeff0_27*dmats0[27][5] + coeff0_28*dmats0[28][5] + coeff0_29*dmats0[29][5] + coeff0_30*dmats0[30][5] + coeff0_31*dmats0[31][5] + coeff0_32*dmats0[32][5] + coeff0_33*dmats0[33][5] + coeff0_34*dmats0[34][5];
          new_coeff0_6 = coeff0_0*dmats0[0][6] + coeff0_1*dmats0[1][6] + coeff0_2*dmats0[2][6] + coeff0_3*dmats0[3][6] + coeff0_4*dmats0[4][6] + coeff0_5*dmats0[5][6] + coeff0_6*dmats0[6][6] + coeff0_7*dmats0[7][6] + coeff0_8*dmats0[8][6] + coeff0_9*dmats0[9][6] + coeff0_10*dmats0[10][6] + coeff0_11*dmats0[11][6] + coeff0_12*dmats0[12][6] + coeff0_13*dmats0[13][6] + coeff0_14*dmats0[14][6] + coeff0_15*dmats0[15][6] + coeff0_16*dmats0[16][6] + coeff0_17*dmats0[17][6] + coeff0_18*dmats0[18][6] + coeff0_19*dmats0[19][6] + coeff0_20*dmats0[20][6] + coeff0_21*dmats0[21][6] + coeff0_22*dmats0[22][6] + coeff0_23*dmats0[23][6] + coeff0_24*dmats0[24][6] + coeff0_25*dmats0[25][6] + coeff0_26*dmats0[26][6] + coeff0_27*dmats0[27][6] + coeff0_28*dmats0[28][6] + coeff0_29*dmats0[29][6] + coeff0_30*dmats0[30][6] + coeff0_31*dmats0[31][6] + coeff0_32*dmats0[32][6] + coeff0_33*dmats0[33][6] + coeff0_34*dmats0[34][6];
          new_coeff0_7 = coeff0_0*dmats0[0][7] + coeff0_1*dmats0[1][7] + coeff0_2*dmats0[2][7] + coeff0_3*dmats0[3][7] + coeff0_4*dmats0[4][7] + coeff0_5*dmats0[5][7] + coeff0_6*dmats0[6][7] + coeff0_7*dmats0[7][7] + coeff0_8*dmats0[8][7] + coeff0_9*dmats0[9][7] + coeff0_10*dmats0[10][7] + coeff0_11*dmats0[11][7] + coeff0_12*dmats0[12][7] + coeff0_13*dmats0[13][7] + coeff0_14*dmats0[14][7] + coeff0_15*dmats0[15][7] + coeff0_16*dmats0[16][7] + coeff0_17*dmats0[17][7] + coeff0_18*dmats0[18][7] + coeff0_19*dmats0[19][7] + coeff0_20*dmats0[20][7] + coeff0_21*dmats0[21][7] + coeff0_22*dmats0[22][7] + coeff0_23*dmats0[23][7] + coeff0_24*dmats0[24][7] + coeff0_25*dmats0[25][7] + coeff0_26*dmats0[26][7] + coeff0_27*dmats0[27][7] + coeff0_28*dmats0[28][7] + coeff0_29*dmats0[29][7] + coeff0_30*dmats0[30][7] + coeff0_31*dmats0[31][7] + coeff0_32*dmats0[32][7] + coeff0_33*dmats0[33][7] + coeff0_34*dmats0[34][7];
          new_coeff0_8 = coeff0_0*dmats0[0][8] + coeff0_1*dmats0[1][8] + coeff0_2*dmats0[2][8] + coeff0_3*dmats0[3][8] + coeff0_4*dmats0[4][8] + coeff0_5*dmats0[5][8] + coeff0_6*dmats0[6][8] + coeff0_7*dmats0[7][8] + coeff0_8*dmats0[8][8] + coeff0_9*dmats0[9][8] + coeff0_10*dmats0[10][8] + coeff0_11*dmats0[11][8] + coeff0_12*dmats0[12][8] + coeff0_13*dmats0[13][8] + coeff0_14*dmats0[14][8] + coeff0_15*dmats0[15][8] + coeff0_16*dmats0[16][8] + coeff0_17*dmats0[17][8] + coeff0_18*dmats0[18][8] + coeff0_19*dmats0[19][8] + coeff0_20*dmats0[20][8] + coeff0_21*dmats0[21][8] + coeff0_22*dmats0[22][8] + coeff0_23*dmats0[23][8] + coeff0_24*dmats0[24][8] + coeff0_25*dmats0[25][8] + coeff0_26*dmats0[26][8] + coeff0_27*dmats0[27][8] + coeff0_28*dmats0[28][8] + coeff0_29*dmats0[29][8] + coeff0_30*dmats0[30][8] + coeff0_31*dmats0[31][8] + coeff0_32*dmats0[32][8] + coeff0_33*dmats0[33][8] + coeff0_34*dmats0[34][8];
          new_coeff0_9 = coeff0_0*dmats0[0][9] + coeff0_1*dmats0[1][9] + coeff0_2*dmats0[2][9] + coeff0_3*dmats0[3][9] + coeff0_4*dmats0[4][9] + coeff0_5*dmats0[5][9] + coeff0_6*dmats0[6][9] + coeff0_7*dmats0[7][9] + coeff0_8*dmats0[8][9] + coeff0_9*dmats0[9][9] + coeff0_10*dmats0[10][9] + coeff0_11*dmats0[11][9] + coeff0_12*dmats0[12][9] + coeff0_13*dmats0[13][9] + coeff0_14*dmats0[14][9] + coeff0_15*dmats0[15][9] + coeff0_16*dmats0[16][9] + coeff0_17*dmats0[17][9] + coeff0_18*dmats0[18][9] + coeff0_19*dmats0[19][9] + coeff0_20*dmats0[20][9] + coeff0_21*dmats0[21][9] + coeff0_22*dmats0[22][9] + coeff0_23*dmats0[23][9] + coeff0_24*dmats0[24][9] + coeff0_25*dmats0[25][9] + coeff0_26*dmats0[26][9] + coeff0_27*dmats0[27][9] + coeff0_28*dmats0[28][9] + coeff0_29*dmats0[29][9] + coeff0_30*dmats0[30][9] + coeff0_31*dmats0[31][9] + coeff0_32*dmats0[32][9] + coeff0_33*dmats0[33][9] + coeff0_34*dmats0[34][9];
          new_coeff0_10 = coeff0_0*dmats0[0][10] + coeff0_1*dmats0[1][10] + coeff0_2*dmats0[2][10] + coeff0_3*dmats0[3][10] + coeff0_4*dmats0[4][10] + coeff0_5*dmats0[5][10] + coeff0_6*dmats0[6][10] + coeff0_7*dmats0[7][10] + coeff0_8*dmats0[8][10] + coeff0_9*dmats0[9][10] + coeff0_10*dmats0[10][10] + coeff0_11*dmats0[11][10] + coeff0_12*dmats0[12][10] + coeff0_13*dmats0[13][10] + coeff0_14*dmats0[14][10] + coeff0_15*dmats0[15][10] + coeff0_16*dmats0[16][10] + coeff0_17*dmats0[17][10] + coeff0_18*dmats0[18][10] + coeff0_19*dmats0[19][10] + coeff0_20*dmats0[20][10] + coeff0_21*dmats0[21][10] + coeff0_22*dmats0[22][10] + coeff0_23*dmats0[23][10] + coeff0_24*dmats0[24][10] + coeff0_25*dmats0[25][10] + coeff0_26*dmats0[26][10] + coeff0_27*dmats0[27][10] + coeff0_28*dmats0[28][10] + coeff0_29*dmats0[29][10] + coeff0_30*dmats0[30][10] + coeff0_31*dmats0[31][10] + coeff0_32*dmats0[32][10] + coeff0_33*dmats0[33][10] + coeff0_34*dmats0[34][10];
          new_coeff0_11 = coeff0_0*dmats0[0][11] + coeff0_1*dmats0[1][11] + coeff0_2*dmats0[2][11] + coeff0_3*dmats0[3][11] + coeff0_4*dmats0[4][11] + coeff0_5*dmats0[5][11] + coeff0_6*dmats0[6][11] + coeff0_7*dmats0[7][11] + coeff0_8*dmats0[8][11] + coeff0_9*dmats0[9][11] + coeff0_10*dmats0[10][11] + coeff0_11*dmats0[11][11] + coeff0_12*dmats0[12][11] + coeff0_13*dmats0[13][11] + coeff0_14*dmats0[14][11] + coeff0_15*dmats0[15][11] + coeff0_16*dmats0[16][11] + coeff0_17*dmats0[17][11] + coeff0_18*dmats0[18][11] + coeff0_19*dmats0[19][11] + coeff0_20*dmats0[20][11] + coeff0_21*dmats0[21][11] + coeff0_22*dmats0[22][11] + coeff0_23*dmats0[23][11] + coeff0_24*dmats0[24][11] + coeff0_25*dmats0[25][11] + coeff0_26*dmats0[26][11] + coeff0_27*dmats0[27][11] + coeff0_28*dmats0[28][11] + coeff0_29*dmats0[29][11] + coeff0_30*dmats0[30][11] + coeff0_31*dmats0[31][11] + coeff0_32*dmats0[32][11] + coeff0_33*dmats0[33][11] + coeff0_34*dmats0[34][11];
          new_coeff0_12 = coeff0_0*dmats0[0][12] + coeff0_1*dmats0[1][12] + coeff0_2*dmats0[2][12] + coeff0_3*dmats0[3][12] + coeff0_4*dmats0[4][12] + coeff0_5*dmats0[5][12] + coeff0_6*dmats0[6][12] + coeff0_7*dmats0[7][12] + coeff0_8*dmats0[8][12] + coeff0_9*dmats0[9][12] + coeff0_10*dmats0[10][12] + coeff0_11*dmats0[11][12] + coeff0_12*dmats0[12][12] + coeff0_13*dmats0[13][12] + coeff0_14*dmats0[14][12] + coeff0_15*dmats0[15][12] + coeff0_16*dmats0[16][12] + coeff0_17*dmats0[17][12] + coeff0_18*dmats0[18][12] + coeff0_19*dmats0[19][12] + coeff0_20*dmats0[20][12] + coeff0_21*dmats0[21][12] + coeff0_22*dmats0[22][12] + coeff0_23*dmats0[23][12] + coeff0_24*dmats0[24][12] + coeff0_25*dmats0[25][12] + coeff0_26*dmats0[26][12] + coeff0_27*dmats0[27][12] + coeff0_28*dmats0[28][12] + coeff0_29*dmats0[29][12] + coeff0_30*dmats0[30][12] + coeff0_31*dmats0[31][12] + coeff0_32*dmats0[32][12] + coeff0_33*dmats0[33][12] + coeff0_34*dmats0[34][12];
          new_coeff0_13 = coeff0_0*dmats0[0][13] + coeff0_1*dmats0[1][13] + coeff0_2*dmats0[2][13] + coeff0_3*dmats0[3][13] + coeff0_4*dmats0[4][13] + coeff0_5*dmats0[5][13] + coeff0_6*dmats0[6][13] + coeff0_7*dmats0[7][13] + coeff0_8*dmats0[8][13] + coeff0_9*dmats0[9][13] + coeff0_10*dmats0[10][13] + coeff0_11*dmats0[11][13] + coeff0_12*dmats0[12][13] + coeff0_13*dmats0[13][13] + coeff0_14*dmats0[14][13] + coeff0_15*dmats0[15][13] + coeff0_16*dmats0[16][13] + coeff0_17*dmats0[17][13] + coeff0_18*dmats0[18][13] + coeff0_19*dmats0[19][13] + coeff0_20*dmats0[20][13] + coeff0_21*dmats0[21][13] + coeff0_22*dmats0[22][13] + coeff0_23*dmats0[23][13] + coeff0_24*dmats0[24][13] + coeff0_25*dmats0[25][13] + coeff0_26*dmats0[26][13] + coeff0_27*dmats0[27][13] + coeff0_28*dmats0[28][13] + coeff0_29*dmats0[29][13] + coeff0_30*dmats0[30][13] + coeff0_31*dmats0[31][13] + coeff0_32*dmats0[32][13] + coeff0_33*dmats0[33][13] + coeff0_34*dmats0[34][13];
          new_coeff0_14 = coeff0_0*dmats0[0][14] + coeff0_1*dmats0[1][14] + coeff0_2*dmats0[2][14] + coeff0_3*dmats0[3][14] + coeff0_4*dmats0[4][14] + coeff0_5*dmats0[5][14] + coeff0_6*dmats0[6][14] + coeff0_7*dmats0[7][14] + coeff0_8*dmats0[8][14] + coeff0_9*dmats0[9][14] + coeff0_10*dmats0[10][14] + coeff0_11*dmats0[11][14] + coeff0_12*dmats0[12][14] + coeff0_13*dmats0[13][14] + coeff0_14*dmats0[14][14] + coeff0_15*dmats0[15][14] + coeff0_16*dmats0[16][14] + coeff0_17*dmats0[17][14] + coeff0_18*dmats0[18][14] + coeff0_19*dmats0[19][14] + coeff0_20*dmats0[20][14] + coeff0_21*dmats0[21][14] + coeff0_22*dmats0[22][14] + coeff0_23*dmats0[23][14] + coeff0_24*dmats0[24][14] + coeff0_25*dmats0[25][14] + coeff0_26*dmats0[26][14] + coeff0_27*dmats0[27][14] + coeff0_28*dmats0[28][14] + coeff0_29*dmats0[29][14] + coeff0_30*dmats0[30][14] + coeff0_31*dmats0[31][14] + coeff0_32*dmats0[32][14] + coeff0_33*dmats0[33][14] + coeff0_34*dmats0[34][14];
          new_coeff0_15 = coeff0_0*dmats0[0][15] + coeff0_1*dmats0[1][15] + coeff0_2*dmats0[2][15] + coeff0_3*dmats0[3][15] + coeff0_4*dmats0[4][15] + coeff0_5*dmats0[5][15] + coeff0_6*dmats0[6][15] + coeff0_7*dmats0[7][15] + coeff0_8*dmats0[8][15] + coeff0_9*dmats0[9][15] + coeff0_10*dmats0[10][15] + coeff0_11*dmats0[11][15] + coeff0_12*dmats0[12][15] + coeff0_13*dmats0[13][15] + coeff0_14*dmats0[14][15] + coeff0_15*dmats0[15][15] + coeff0_16*dmats0[16][15] + coeff0_17*dmats0[17][15] + coeff0_18*dmats0[18][15] + coeff0_19*dmats0[19][15] + coeff0_20*dmats0[20][15] + coeff0_21*dmats0[21][15] + coeff0_22*dmats0[22][15] + coeff0_23*dmats0[23][15] + coeff0_24*dmats0[24][15] + coeff0_25*dmats0[25][15] + coeff0_26*dmats0[26][15] + coeff0_27*dmats0[27][15] + coeff0_28*dmats0[28][15] + coeff0_29*dmats0[29][15] + coeff0_30*dmats0[30][15] + coeff0_31*dmats0[31][15] + coeff0_32*dmats0[32][15] + coeff0_33*dmats0[33][15] + coeff0_34*dmats0[34][15];
          new_coeff0_16 = coeff0_0*dmats0[0][16] + coeff0_1*dmats0[1][16] + coeff0_2*dmats0[2][16] + coeff0_3*dmats0[3][16] + coeff0_4*dmats0[4][16] + coeff0_5*dmats0[5][16] + coeff0_6*dmats0[6][16] + coeff0_7*dmats0[7][16] + coeff0_8*dmats0[8][16] + coeff0_9*dmats0[9][16] + coeff0_10*dmats0[10][16] + coeff0_11*dmats0[11][16] + coeff0_12*dmats0[12][16] + coeff0_13*dmats0[13][16] + coeff0_14*dmats0[14][16] + coeff0_15*dmats0[15][16] + coeff0_16*dmats0[16][16] + coeff0_17*dmats0[17][16] + coeff0_18*dmats0[18][16] + coeff0_19*dmats0[19][16] + coeff0_20*dmats0[20][16] + coeff0_21*dmats0[21][16] + coeff0_22*dmats0[22][16] + coeff0_23*dmats0[23][16] + coeff0_24*dmats0[24][16] + coeff0_25*dmats0[25][16] + coeff0_26*dmats0[26][16] + coeff0_27*dmats0[27][16] + coeff0_28*dmats0[28][16] + coeff0_29*dmats0[29][16] + coeff0_30*dmats0[30][16] + coeff0_31*dmats0[31][16] + coeff0_32*dmats0[32][16] + coeff0_33*dmats0[33][16] + coeff0_34*dmats0[34][16];
          new_coeff0_17 = coeff0_0*dmats0[0][17] + coeff0_1*dmats0[1][17] + coeff0_2*dmats0[2][17] + coeff0_3*dmats0[3][17] + coeff0_4*dmats0[4][17] + coeff0_5*dmats0[5][17] + coeff0_6*dmats0[6][17] + coeff0_7*dmats0[7][17] + coeff0_8*dmats0[8][17] + coeff0_9*dmats0[9][17] + coeff0_10*dmats0[10][17] + coeff0_11*dmats0[11][17] + coeff0_12*dmats0[12][17] + coeff0_13*dmats0[13][17] + coeff0_14*dmats0[14][17] + coeff0_15*dmats0[15][17] + coeff0_16*dmats0[16][17] + coeff0_17*dmats0[17][17] + coeff0_18*dmats0[18][17] + coeff0_19*dmats0[19][17] + coeff0_20*dmats0[20][17] + coeff0_21*dmats0[21][17] + coeff0_22*dmats0[22][17] + coeff0_23*dmats0[23][17] + coeff0_24*dmats0[24][17] + coeff0_25*dmats0[25][17] + coeff0_26*dmats0[26][17] + coeff0_27*dmats0[27][17] + coeff0_28*dmats0[28][17] + coeff0_29*dmats0[29][17] + coeff0_30*dmats0[30][17] + coeff0_31*dmats0[31][17] + coeff0_32*dmats0[32][17] + coeff0_33*dmats0[33][17] + coeff0_34*dmats0[34][17];
          new_coeff0_18 = coeff0_0*dmats0[0][18] + coeff0_1*dmats0[1][18] + coeff0_2*dmats0[2][18] + coeff0_3*dmats0[3][18] + coeff0_4*dmats0[4][18] + coeff0_5*dmats0[5][18] + coeff0_6*dmats0[6][18] + coeff0_7*dmats0[7][18] + coeff0_8*dmats0[8][18] + coeff0_9*dmats0[9][18] + coeff0_10*dmats0[10][18] + coeff0_11*dmats0[11][18] + coeff0_12*dmats0[12][18] + coeff0_13*dmats0[13][18] + coeff0_14*dmats0[14][18] + coeff0_15*dmats0[15][18] + coeff0_16*dmats0[16][18] + coeff0_17*dmats0[17][18] + coeff0_18*dmats0[18][18] + coeff0_19*dmats0[19][18] + coeff0_20*dmats0[20][18] + coeff0_21*dmats0[21][18] + coeff0_22*dmats0[22][18] + coeff0_23*dmats0[23][18] + coeff0_24*dmats0[24][18] + coeff0_25*dmats0[25][18] + coeff0_26*dmats0[26][18] + coeff0_27*dmats0[27][18] + coeff0_28*dmats0[28][18] + coeff0_29*dmats0[29][18] + coeff0_30*dmats0[30][18] + coeff0_31*dmats0[31][18] + coeff0_32*dmats0[32][18] + coeff0_33*dmats0[33][18] + coeff0_34*dmats0[34][18];
          new_coeff0_19 = coeff0_0*dmats0[0][19] + coeff0_1*dmats0[1][19] + coeff0_2*dmats0[2][19] + coeff0_3*dmats0[3][19] + coeff0_4*dmats0[4][19] + coeff0_5*dmats0[5][19] + coeff0_6*dmats0[6][19] + coeff0_7*dmats0[7][19] + coeff0_8*dmats0[8][19] + coeff0_9*dmats0[9][19] + coeff0_10*dmats0[10][19] + coeff0_11*dmats0[11][19] + coeff0_12*dmats0[12][19] + coeff0_13*dmats0[13][19] + coeff0_14*dmats0[14][19] + coeff0_15*dmats0[15][19] + coeff0_16*dmats0[16][19] + coeff0_17*dmats0[17][19] + coeff0_18*dmats0[18][19] + coeff0_19*dmats0[19][19] + coeff0_20*dmats0[20][19] + coeff0_21*dmats0[21][19] + coeff0_22*dmats0[22][19] + coeff0_23*dmats0[23][19] + coeff0_24*dmats0[24][19] + coeff0_25*dmats0[25][19] + coeff0_26*dmats0[26][19] + coeff0_27*dmats0[27][19] + coeff0_28*dmats0[28][19] + coeff0_29*dmats0[29][19] + coeff0_30*dmats0[30][19] + coeff0_31*dmats0[31][19] + coeff0_32*dmats0[32][19] + coeff0_33*dmats0[33][19] + coeff0_34*dmats0[34][19];
          new_coeff0_20 = coeff0_0*dmats0[0][20] + coeff0_1*dmats0[1][20] + coeff0_2*dmats0[2][20] + coeff0_3*dmats0[3][20] + coeff0_4*dmats0[4][20] + coeff0_5*dmats0[5][20] + coeff0_6*dmats0[6][20] + coeff0_7*dmats0[7][20] + coeff0_8*dmats0[8][20] + coeff0_9*dmats0[9][20] + coeff0_10*dmats0[10][20] + coeff0_11*dmats0[11][20] + coeff0_12*dmats0[12][20] + coeff0_13*dmats0[13][20] + coeff0_14*dmats0[14][20] + coeff0_15*dmats0[15][20] + coeff0_16*dmats0[16][20] + coeff0_17*dmats0[17][20] + coeff0_18*dmats0[18][20] + coeff0_19*dmats0[19][20] + coeff0_20*dmats0[20][20] + coeff0_21*dmats0[21][20] + coeff0_22*dmats0[22][20] + coeff0_23*dmats0[23][20] + coeff0_24*dmats0[24][20] + coeff0_25*dmats0[25][20] + coeff0_26*dmats0[26][20] + coeff0_27*dmats0[27][20] + coeff0_28*dmats0[28][20] + coeff0_29*dmats0[29][20] + coeff0_30*dmats0[30][20] + coeff0_31*dmats0[31][20] + coeff0_32*dmats0[32][20] + coeff0_33*dmats0[33][20] + coeff0_34*dmats0[34][20];
          new_coeff0_21 = coeff0_0*dmats0[0][21] + coeff0_1*dmats0[1][21] + coeff0_2*dmats0[2][21] + coeff0_3*dmats0[3][21] + coeff0_4*dmats0[4][21] + coeff0_5*dmats0[5][21] + coeff0_6*dmats0[6][21] + coeff0_7*dmats0[7][21] + coeff0_8*dmats0[8][21] + coeff0_9*dmats0[9][21] + coeff0_10*dmats0[10][21] + coeff0_11*dmats0[11][21] + coeff0_12*dmats0[12][21] + coeff0_13*dmats0[13][21] + coeff0_14*dmats0[14][21] + coeff0_15*dmats0[15][21] + coeff0_16*dmats0[16][21] + coeff0_17*dmats0[17][21] + coeff0_18*dmats0[18][21] + coeff0_19*dmats0[19][21] + coeff0_20*dmats0[20][21] + coeff0_21*dmats0[21][21] + coeff0_22*dmats0[22][21] + coeff0_23*dmats0[23][21] + coeff0_24*dmats0[24][21] + coeff0_25*dmats0[25][21] + coeff0_26*dmats0[26][21] + coeff0_27*dmats0[27][21] + coeff0_28*dmats0[28][21] + coeff0_29*dmats0[29][21] + coeff0_30*dmats0[30][21] + coeff0_31*dmats0[31][21] + coeff0_32*dmats0[32][21] + coeff0_33*dmats0[33][21] + coeff0_34*dmats0[34][21];
          new_coeff0_22 = coeff0_0*dmats0[0][22] + coeff0_1*dmats0[1][22] + coeff0_2*dmats0[2][22] + coeff0_3*dmats0[3][22] + coeff0_4*dmats0[4][22] + coeff0_5*dmats0[5][22] + coeff0_6*dmats0[6][22] + coeff0_7*dmats0[7][22] + coeff0_8*dmats0[8][22] + coeff0_9*dmats0[9][22] + coeff0_10*dmats0[10][22] + coeff0_11*dmats0[11][22] + coeff0_12*dmats0[12][22] + coeff0_13*dmats0[13][22] + coeff0_14*dmats0[14][22] + coeff0_15*dmats0[15][22] + coeff0_16*dmats0[16][22] + coeff0_17*dmats0[17][22] + coeff0_18*dmats0[18][22] + coeff0_19*dmats0[19][22] + coeff0_20*dmats0[20][22] + coeff0_21*dmats0[21][22] + coeff0_22*dmats0[22][22] + coeff0_23*dmats0[23][22] + coeff0_24*dmats0[24][22] + coeff0_25*dmats0[25][22] + coeff0_26*dmats0[26][22] + coeff0_27*dmats0[27][22] + coeff0_28*dmats0[28][22] + coeff0_29*dmats0[29][22] + coeff0_30*dmats0[30][22] + coeff0_31*dmats0[31][22] + coeff0_32*dmats0[32][22] + coeff0_33*dmats0[33][22] + coeff0_34*dmats0[34][22];
          new_coeff0_23 = coeff0_0*dmats0[0][23] + coeff0_1*dmats0[1][23] + coeff0_2*dmats0[2][23] + coeff0_3*dmats0[3][23] + coeff0_4*dmats0[4][23] + coeff0_5*dmats0[5][23] + coeff0_6*dmats0[6][23] + coeff0_7*dmats0[7][23] + coeff0_8*dmats0[8][23] + coeff0_9*dmats0[9][23] + coeff0_10*dmats0[10][23] + coeff0_11*dmats0[11][23] + coeff0_12*dmats0[12][23] + coeff0_13*dmats0[13][23] + coeff0_14*dmats0[14][23] + coeff0_15*dmats0[15][23] + coeff0_16*dmats0[16][23] + coeff0_17*dmats0[17][23] + coeff0_18*dmats0[18][23] + coeff0_19*dmats0[19][23] + coeff0_20*dmats0[20][23] + coeff0_21*dmats0[21][23] + coeff0_22*dmats0[22][23] + coeff0_23*dmats0[23][23] + coeff0_24*dmats0[24][23] + coeff0_25*dmats0[25][23] + coeff0_26*dmats0[26][23] + coeff0_27*dmats0[27][23] + coeff0_28*dmats0[28][23] + coeff0_29*dmats0[29][23] + coeff0_30*dmats0[30][23] + coeff0_31*dmats0[31][23] + coeff0_32*dmats0[32][23] + coeff0_33*dmats0[33][23] + coeff0_34*dmats0[34][23];
          new_coeff0_24 = coeff0_0*dmats0[0][24] + coeff0_1*dmats0[1][24] + coeff0_2*dmats0[2][24] + coeff0_3*dmats0[3][24] + coeff0_4*dmats0[4][24] + coeff0_5*dmats0[5][24] + coeff0_6*dmats0[6][24] + coeff0_7*dmats0[7][24] + coeff0_8*dmats0[8][24] + coeff0_9*dmats0[9][24] + coeff0_10*dmats0[10][24] + coeff0_11*dmats0[11][24] + coeff0_12*dmats0[12][24] + coeff0_13*dmats0[13][24] + coeff0_14*dmats0[14][24] + coeff0_15*dmats0[15][24] + coeff0_16*dmats0[16][24] + coeff0_17*dmats0[17][24] + coeff0_18*dmats0[18][24] + coeff0_19*dmats0[19][24] + coeff0_20*dmats0[20][24] + coeff0_21*dmats0[21][24] + coeff0_22*dmats0[22][24] + coeff0_23*dmats0[23][24] + coeff0_24*dmats0[24][24] + coeff0_25*dmats0[25][24] + coeff0_26*dmats0[26][24] + coeff0_27*dmats0[27][24] + coeff0_28*dmats0[28][24] + coeff0_29*dmats0[29][24] + coeff0_30*dmats0[30][24] + coeff0_31*dmats0[31][24] + coeff0_32*dmats0[32][24] + coeff0_33*dmats0[33][24] + coeff0_34*dmats0[34][24];
          new_coeff0_25 = coeff0_0*dmats0[0][25] + coeff0_1*dmats0[1][25] + coeff0_2*dmats0[2][25] + coeff0_3*dmats0[3][25] + coeff0_4*dmats0[4][25] + coeff0_5*dmats0[5][25] + coeff0_6*dmats0[6][25] + coeff0_7*dmats0[7][25] + coeff0_8*dmats0[8][25] + coeff0_9*dmats0[9][25] + coeff0_10*dmats0[10][25] + coeff0_11*dmats0[11][25] + coeff0_12*dmats0[12][25] + coeff0_13*dmats0[13][25] + coeff0_14*dmats0[14][25] + coeff0_15*dmats0[15][25] + coeff0_16*dmats0[16][25] + coeff0_17*dmats0[17][25] + coeff0_18*dmats0[18][25] + coeff0_19*dmats0[19][25] + coeff0_20*dmats0[20][25] + coeff0_21*dmats0[21][25] + coeff0_22*dmats0[22][25] + coeff0_23*dmats0[23][25] + coeff0_24*dmats0[24][25] + coeff0_25*dmats0[25][25] + coeff0_26*dmats0[26][25] + coeff0_27*dmats0[27][25] + coeff0_28*dmats0[28][25] + coeff0_29*dmats0[29][25] + coeff0_30*dmats0[30][25] + coeff0_31*dmats0[31][25] + coeff0_32*dmats0[32][25] + coeff0_33*dmats0[33][25] + coeff0_34*dmats0[34][25];
          new_coeff0_26 = coeff0_0*dmats0[0][26] + coeff0_1*dmats0[1][26] + coeff0_2*dmats0[2][26] + coeff0_3*dmats0[3][26] + coeff0_4*dmats0[4][26] + coeff0_5*dmats0[5][26] + coeff0_6*dmats0[6][26] + coeff0_7*dmats0[7][26] + coeff0_8*dmats0[8][26] + coeff0_9*dmats0[9][26] + coeff0_10*dmats0[10][26] + coeff0_11*dmats0[11][26] + coeff0_12*dmats0[12][26] + coeff0_13*dmats0[13][26] + coeff0_14*dmats0[14][26] + coeff0_15*dmats0[15][26] + coeff0_16*dmats0[16][26] + coeff0_17*dmats0[17][26] + coeff0_18*dmats0[18][26] + coeff0_19*dmats0[19][26] + coeff0_20*dmats0[20][26] + coeff0_21*dmats0[21][26] + coeff0_22*dmats0[22][26] + coeff0_23*dmats0[23][26] + coeff0_24*dmats0[24][26] + coeff0_25*dmats0[25][26] + coeff0_26*dmats0[26][26] + coeff0_27*dmats0[27][26] + coeff0_28*dmats0[28][26] + coeff0_29*dmats0[29][26] + coeff0_30*dmats0[30][26] + coeff0_31*dmats0[31][26] + coeff0_32*dmats0[32][26] + coeff0_33*dmats0[33][26] + coeff0_34*dmats0[34][26];
          new_coeff0_27 = coeff0_0*dmats0[0][27] + coeff0_1*dmats0[1][27] + coeff0_2*dmats0[2][27] + coeff0_3*dmats0[3][27] + coeff0_4*dmats0[4][27] + coeff0_5*dmats0[5][27] + coeff0_6*dmats0[6][27] + coeff0_7*dmats0[7][27] + coeff0_8*dmats0[8][27] + coeff0_9*dmats0[9][27] + coeff0_10*dmats0[10][27] + coeff0_11*dmats0[11][27] + coeff0_12*dmats0[12][27] + coeff0_13*dmats0[13][27] + coeff0_14*dmats0[14][27] + coeff0_15*dmats0[15][27] + coeff0_16*dmats0[16][27] + coeff0_17*dmats0[17][27] + coeff0_18*dmats0[18][27] + coeff0_19*dmats0[19][27] + coeff0_20*dmats0[20][27] + coeff0_21*dmats0[21][27] + coeff0_22*dmats0[22][27] + coeff0_23*dmats0[23][27] + coeff0_24*dmats0[24][27] + coeff0_25*dmats0[25][27] + coeff0_26*dmats0[26][27] + coeff0_27*dmats0[27][27] + coeff0_28*dmats0[28][27] + coeff0_29*dmats0[29][27] + coeff0_30*dmats0[30][27] + coeff0_31*dmats0[31][27] + coeff0_32*dmats0[32][27] + coeff0_33*dmats0[33][27] + coeff0_34*dmats0[34][27];
          new_coeff0_28 = coeff0_0*dmats0[0][28] + coeff0_1*dmats0[1][28] + coeff0_2*dmats0[2][28] + coeff0_3*dmats0[3][28] + coeff0_4*dmats0[4][28] + coeff0_5*dmats0[5][28] + coeff0_6*dmats0[6][28] + coeff0_7*dmats0[7][28] + coeff0_8*dmats0[8][28] + coeff0_9*dmats0[9][28] + coeff0_10*dmats0[10][28] + coeff0_11*dmats0[11][28] + coeff0_12*dmats0[12][28] + coeff0_13*dmats0[13][28] + coeff0_14*dmats0[14][28] + coeff0_15*dmats0[15][28] + coeff0_16*dmats0[16][28] + coeff0_17*dmats0[17][28] + coeff0_18*dmats0[18][28] + coeff0_19*dmats0[19][28] + coeff0_20*dmats0[20][28] + coeff0_21*dmats0[21][28] + coeff0_22*dmats0[22][28] + coeff0_23*dmats0[23][28] + coeff0_24*dmats0[24][28] + coeff0_25*dmats0[25][28] + coeff0_26*dmats0[26][28] + coeff0_27*dmats0[27][28] + coeff0_28*dmats0[28][28] + coeff0_29*dmats0[29][28] + coeff0_30*dmats0[30][28] + coeff0_31*dmats0[31][28] + coeff0_32*dmats0[32][28] + coeff0_33*dmats0[33][28] + coeff0_34*dmats0[34][28];
          new_coeff0_29 = coeff0_0*dmats0[0][29] + coeff0_1*dmats0[1][29] + coeff0_2*dmats0[2][29] + coeff0_3*dmats0[3][29] + coeff0_4*dmats0[4][29] + coeff0_5*dmats0[5][29] + coeff0_6*dmats0[6][29] + coeff0_7*dmats0[7][29] + coeff0_8*dmats0[8][29] + coeff0_9*dmats0[9][29] + coeff0_10*dmats0[10][29] + coeff0_11*dmats0[11][29] + coeff0_12*dmats0[12][29] + coeff0_13*dmats0[13][29] + coeff0_14*dmats0[14][29] + coeff0_15*dmats0[15][29] + coeff0_16*dmats0[16][29] + coeff0_17*dmats0[17][29] + coeff0_18*dmats0[18][29] + coeff0_19*dmats0[19][29] + coeff0_20*dmats0[20][29] + coeff0_21*dmats0[21][29] + coeff0_22*dmats0[22][29] + coeff0_23*dmats0[23][29] + coeff0_24*dmats0[24][29] + coeff0_25*dmats0[25][29] + coeff0_26*dmats0[26][29] + coeff0_27*dmats0[27][29] + coeff0_28*dmats0[28][29] + coeff0_29*dmats0[29][29] + coeff0_30*dmats0[30][29] + coeff0_31*dmats0[31][29] + coeff0_32*dmats0[32][29] + coeff0_33*dmats0[33][29] + coeff0_34*dmats0[34][29];
          new_coeff0_30 = coeff0_0*dmats0[0][30] + coeff0_1*dmats0[1][30] + coeff0_2*dmats0[2][30] + coeff0_3*dmats0[3][30] + coeff0_4*dmats0[4][30] + coeff0_5*dmats0[5][30] + coeff0_6*dmats0[6][30] + coeff0_7*dmats0[7][30] + coeff0_8*dmats0[8][30] + coeff0_9*dmats0[9][30] + coeff0_10*dmats0[10][30] + coeff0_11*dmats0[11][30] + coeff0_12*dmats0[12][30] + coeff0_13*dmats0[13][30] + coeff0_14*dmats0[14][30] + coeff0_15*dmats0[15][30] + coeff0_16*dmats0[16][30] + coeff0_17*dmats0[17][30] + coeff0_18*dmats0[18][30] + coeff0_19*dmats0[19][30] + coeff0_20*dmats0[20][30] + coeff0_21*dmats0[21][30] + coeff0_22*dmats0[22][30] + coeff0_23*dmats0[23][30] + coeff0_24*dmats0[24][30] + coeff0_25*dmats0[25][30] + coeff0_26*dmats0[26][30] + coeff0_27*dmats0[27][30] + coeff0_28*dmats0[28][30] + coeff0_29*dmats0[29][30] + coeff0_30*dmats0[30][30] + coeff0_31*dmats0[31][30] + coeff0_32*dmats0[32][30] + coeff0_33*dmats0[33][30] + coeff0_34*dmats0[34][30];
          new_coeff0_31 = coeff0_0*dmats0[0][31] + coeff0_1*dmats0[1][31] + coeff0_2*dmats0[2][31] + coeff0_3*dmats0[3][31] + coeff0_4*dmats0[4][31] + coeff0_5*dmats0[5][31] + coeff0_6*dmats0[6][31] + coeff0_7*dmats0[7][31] + coeff0_8*dmats0[8][31] + coeff0_9*dmats0[9][31] + coeff0_10*dmats0[10][31] + coeff0_11*dmats0[11][31] + coeff0_12*dmats0[12][31] + coeff0_13*dmats0[13][31] + coeff0_14*dmats0[14][31] + coeff0_15*dmats0[15][31] + coeff0_16*dmats0[16][31] + coeff0_17*dmats0[17][31] + coeff0_18*dmats0[18][31] + coeff0_19*dmats0[19][31] + coeff0_20*dmats0[20][31] + coeff0_21*dmats0[21][31] + coeff0_22*dmats0[22][31] + coeff0_23*dmats0[23][31] + coeff0_24*dmats0[24][31] + coeff0_25*dmats0[25][31] + coeff0_26*dmats0[26][31] + coeff0_27*dmats0[27][31] + coeff0_28*dmats0[28][31] + coeff0_29*dmats0[29][31] + coeff0_30*dmats0[30][31] + coeff0_31*dmats0[31][31] + coeff0_32*dmats0[32][31] + coeff0_33*dmats0[33][31] + coeff0_34*dmats0[34][31];
          new_coeff0_32 = coeff0_0*dmats0[0][32] + coeff0_1*dmats0[1][32] + coeff0_2*dmats0[2][32] + coeff0_3*dmats0[3][32] + coeff0_4*dmats0[4][32] + coeff0_5*dmats0[5][32] + coeff0_6*dmats0[6][32] + coeff0_7*dmats0[7][32] + coeff0_8*dmats0[8][32] + coeff0_9*dmats0[9][32] + coeff0_10*dmats0[10][32] + coeff0_11*dmats0[11][32] + coeff0_12*dmats0[12][32] + coeff0_13*dmats0[13][32] + coeff0_14*dmats0[14][32] + coeff0_15*dmats0[15][32] + coeff0_16*dmats0[16][32] + coeff0_17*dmats0[17][32] + coeff0_18*dmats0[18][32] + coeff0_19*dmats0[19][32] + coeff0_20*dmats0[20][32] + coeff0_21*dmats0[21][32] + coeff0_22*dmats0[22][32] + coeff0_23*dmats0[23][32] + coeff0_24*dmats0[24][32] + coeff0_25*dmats0[25][32] + coeff0_26*dmats0[26][32] + coeff0_27*dmats0[27][32] + coeff0_28*dmats0[28][32] + coeff0_29*dmats0[29][32] + coeff0_30*dmats0[30][32] + coeff0_31*dmats0[31][32] + coeff0_32*dmats0[32][32] + coeff0_33*dmats0[33][32] + coeff0_34*dmats0[34][32];
          new_coeff0_33 = coeff0_0*dmats0[0][33] + coeff0_1*dmats0[1][33] + coeff0_2*dmats0[2][33] + coeff0_3*dmats0[3][33] + coeff0_4*dmats0[4][33] + coeff0_5*dmats0[5][33] + coeff0_6*dmats0[6][33] + coeff0_7*dmats0[7][33] + coeff0_8*dmats0[8][33] + coeff0_9*dmats0[9][33] + coeff0_10*dmats0[10][33] + coeff0_11*dmats0[11][33] + coeff0_12*dmats0[12][33] + coeff0_13*dmats0[13][33] + coeff0_14*dmats0[14][33] + coeff0_15*dmats0[15][33] + coeff0_16*dmats0[16][33] + coeff0_17*dmats0[17][33] + coeff0_18*dmats0[18][33] + coeff0_19*dmats0[19][33] + coeff0_20*dmats0[20][33] + coeff0_21*dmats0[21][33] + coeff0_22*dmats0[22][33] + coeff0_23*dmats0[23][33] + coeff0_24*dmats0[24][33] + coeff0_25*dmats0[25][33] + coeff0_26*dmats0[26][33] + coeff0_27*dmats0[27][33] + coeff0_28*dmats0[28][33] + coeff0_29*dmats0[29][33] + coeff0_30*dmats0[30][33] + coeff0_31*dmats0[31][33] + coeff0_32*dmats0[32][33] + coeff0_33*dmats0[33][33] + coeff0_34*dmats0[34][33];
          new_coeff0_34 = coeff0_0*dmats0[0][34] + coeff0_1*dmats0[1][34] + coeff0_2*dmats0[2][34] + coeff0_3*dmats0[3][34] + coeff0_4*dmats0[4][34] + coeff0_5*dmats0[5][34] + coeff0_6*dmats0[6][34] + coeff0_7*dmats0[7][34] + coeff0_8*dmats0[8][34] + coeff0_9*dmats0[9][34] + coeff0_10*dmats0[10][34] + coeff0_11*dmats0[11][34] + coeff0_12*dmats0[12][34] + coeff0_13*dmats0[13][34] + coeff0_14*dmats0[14][34] + coeff0_15*dmats0[15][34] + coeff0_16*dmats0[16][34] + coeff0_17*dmats0[17][34] + coeff0_18*dmats0[18][34] + coeff0_19*dmats0[19][34] + coeff0_20*dmats0[20][34] + coeff0_21*dmats0[21][34] + coeff0_22*dmats0[22][34] + coeff0_23*dmats0[23][34] + coeff0_24*dmats0[24][34] + coeff0_25*dmats0[25][34] + coeff0_26*dmats0[26][34] + coeff0_27*dmats0[27][34] + coeff0_28*dmats0[28][34] + coeff0_29*dmats0[29][34] + coeff0_30*dmats0[30][34] + coeff0_31*dmats0[31][34] + coeff0_32*dmats0[32][34] + coeff0_33*dmats0[33][34] + coeff0_34*dmats0[34][34];
        }
        if(combinations[deriv_num][j] == 1)
        {
          new_coeff0_0 = coeff0_0*dmats1[0][0] + coeff0_1*dmats1[1][0] + coeff0_2*dmats1[2][0] + coeff0_3*dmats1[3][0] + coeff0_4*dmats1[4][0] + coeff0_5*dmats1[5][0] + coeff0_6*dmats1[6][0] + coeff0_7*dmats1[7][0] + coeff0_8*dmats1[8][0] + coeff0_9*dmats1[9][0] + coeff0_10*dmats1[10][0] + coeff0_11*dmats1[11][0] + coeff0_12*dmats1[12][0] + coeff0_13*dmats1[13][0] + coeff0_14*dmats1[14][0] + coeff0_15*dmats1[15][0] + coeff0_16*dmats1[16][0] + coeff0_17*dmats1[17][0] + coeff0_18*dmats1[18][0] + coeff0_19*dmats1[19][0] + coeff0_20*dmats1[20][0] + coeff0_21*dmats1[21][0] + coeff0_22*dmats1[22][0] + coeff0_23*dmats1[23][0] + coeff0_24*dmats1[24][0] + coeff0_25*dmats1[25][0] + coeff0_26*dmats1[26][0] + coeff0_27*dmats1[27][0] + coeff0_28*dmats1[28][0] + coeff0_29*dmats1[29][0] + coeff0_30*dmats1[30][0] + coeff0_31*dmats1[31][0] + coeff0_32*dmats1[32][0] + coeff0_33*dmats1[33][0] + coeff0_34*dmats1[34][0];
          new_coeff0_1 = coeff0_0*dmats1[0][1] + coeff0_1*dmats1[1][1] + coeff0_2*dmats1[2][1] + coeff0_3*dmats1[3][1] + coeff0_4*dmats1[4][1] + coeff0_5*dmats1[5][1] + coeff0_6*dmats1[6][1] + coeff0_7*dmats1[7][1] + coeff0_8*dmats1[8][1] + coeff0_9*dmats1[9][1] + coeff0_10*dmats1[10][1] + coeff0_11*dmats1[11][1] + coeff0_12*dmats1[12][1] + coeff0_13*dmats1[13][1] + coeff0_14*dmats1[14][1] + coeff0_15*dmats1[15][1] + coeff0_16*dmats1[16][1] + coeff0_17*dmats1[17][1] + coeff0_18*dmats1[18][1] + coeff0_19*dmats1[19][1] + coeff0_20*dmats1[20][1] + coeff0_21*dmats1[21][1] + coeff0_22*dmats1[22][1] + coeff0_23*dmats1[23][1] + coeff0_24*dmats1[24][1] + coeff0_25*dmats1[25][1] + coeff0_26*dmats1[26][1] + coeff0_27*dmats1[27][1] + coeff0_28*dmats1[28][1] + coeff0_29*dmats1[29][1] + coeff0_30*dmats1[30][1] + coeff0_31*dmats1[31][1] + coeff0_32*dmats1[32][1] + coeff0_33*dmats1[33][1] + coeff0_34*dmats1[34][1];
          new_coeff0_2 = coeff0_0*dmats1[0][2] + coeff0_1*dmats1[1][2] + coeff0_2*dmats1[2][2] + coeff0_3*dmats1[3][2] + coeff0_4*dmats1[4][2] + coeff0_5*dmats1[5][2] + coeff0_6*dmats1[6][2] + coeff0_7*dmats1[7][2] + coeff0_8*dmats1[8][2] + coeff0_9*dmats1[9][2] + coeff0_10*dmats1[10][2] + coeff0_11*dmats1[11][2] + coeff0_12*dmats1[12][2] + coeff0_13*dmats1[13][2] + coeff0_14*dmats1[14][2] + coeff0_15*dmats1[15][2] + coeff0_16*dmats1[16][2] + coeff0_17*dmats1[17][2] + coeff0_18*dmats1[18][2] + coeff0_19*dmats1[19][2] + coeff0_20*dmats1[20][2] + coeff0_21*dmats1[21][2] + coeff0_22*dmats1[22][2] + coeff0_23*dmats1[23][2] + coeff0_24*dmats1[24][2] + coeff0_25*dmats1[25][2] + coeff0_26*dmats1[26][2] + coeff0_27*dmats1[27][2] + coeff0_28*dmats1[28][2] + coeff0_29*dmats1[29][2] + coeff0_30*dmats1[30][2] + coeff0_31*dmats1[31][2] + coeff0_32*dmats1[32][2] + coeff0_33*dmats1[33][2] + coeff0_34*dmats1[34][2];
          new_coeff0_3 = coeff0_0*dmats1[0][3] + coeff0_1*dmats1[1][3] + coeff0_2*dmats1[2][3] + coeff0_3*dmats1[3][3] + coeff0_4*dmats1[4][3] + coeff0_5*dmats1[5][3] + coeff0_6*dmats1[6][3] + coeff0_7*dmats1[7][3] + coeff0_8*dmats1[8][3] + coeff0_9*dmats1[9][3] + coeff0_10*dmats1[10][3] + coeff0_11*dmats1[11][3] + coeff0_12*dmats1[12][3] + coeff0_13*dmats1[13][3] + coeff0_14*dmats1[14][3] + coeff0_15*dmats1[15][3] + coeff0_16*dmats1[16][3] + coeff0_17*dmats1[17][3] + coeff0_18*dmats1[18][3] + coeff0_19*dmats1[19][3] + coeff0_20*dmats1[20][3] + coeff0_21*dmats1[21][3] + coeff0_22*dmats1[22][3] + coeff0_23*dmats1[23][3] + coeff0_24*dmats1[24][3] + coeff0_25*dmats1[25][3] + coeff0_26*dmats1[26][3] + coeff0_27*dmats1[27][3] + coeff0_28*dmats1[28][3] + coeff0_29*dmats1[29][3] + coeff0_30*dmats1[30][3] + coeff0_31*dmats1[31][3] + coeff0_32*dmats1[32][3] + coeff0_33*dmats1[33][3] + coeff0_34*dmats1[34][3];
          new_coeff0_4 = coeff0_0*dmats1[0][4] + coeff0_1*dmats1[1][4] + coeff0_2*dmats1[2][4] + coeff0_3*dmats1[3][4] + coeff0_4*dmats1[4][4] + coeff0_5*dmats1[5][4] + coeff0_6*dmats1[6][4] + coeff0_7*dmats1[7][4] + coeff0_8*dmats1[8][4] + coeff0_9*dmats1[9][4] + coeff0_10*dmats1[10][4] + coeff0_11*dmats1[11][4] + coeff0_12*dmats1[12][4] + coeff0_13*dmats1[13][4] + coeff0_14*dmats1[14][4] + coeff0_15*dmats1[15][4] + coeff0_16*dmats1[16][4] + coeff0_17*dmats1[17][4] + coeff0_18*dmats1[18][4] + coeff0_19*dmats1[19][4] + coeff0_20*dmats1[20][4] + coeff0_21*dmats1[21][4] + coeff0_22*dmats1[22][4] + coeff0_23*dmats1[23][4] + coeff0_24*dmats1[24][4] + coeff0_25*dmats1[25][4] + coeff0_26*dmats1[26][4] + coeff0_27*dmats1[27][4] + coeff0_28*dmats1[28][4] + coeff0_29*dmats1[29][4] + coeff0_30*dmats1[30][4] + coeff0_31*dmats1[31][4] + coeff0_32*dmats1[32][4] + coeff0_33*dmats1[33][4] + coeff0_34*dmats1[34][4];
          new_coeff0_5 = coeff0_0*dmats1[0][5] + coeff0_1*dmats1[1][5] + coeff0_2*dmats1[2][5] + coeff0_3*dmats1[3][5] + coeff0_4*dmats1[4][5] + coeff0_5*dmats1[5][5] + coeff0_6*dmats1[6][5] + coeff0_7*dmats1[7][5] + coeff0_8*dmats1[8][5] + coeff0_9*dmats1[9][5] + coeff0_10*dmats1[10][5] + coeff0_11*dmats1[11][5] + coeff0_12*dmats1[12][5] + coeff0_13*dmats1[13][5] + coeff0_14*dmats1[14][5] + coeff0_15*dmats1[15][5] + coeff0_16*dmats1[16][5] + coeff0_17*dmats1[17][5] + coeff0_18*dmats1[18][5] + coeff0_19*dmats1[19][5] + coeff0_20*dmats1[20][5] + coeff0_21*dmats1[21][5] + coeff0_22*dmats1[22][5] + coeff0_23*dmats1[23][5] + coeff0_24*dmats1[24][5] + coeff0_25*dmats1[25][5] + coeff0_26*dmats1[26][5] + coeff0_27*dmats1[27][5] + coeff0_28*dmats1[28][5] + coeff0_29*dmats1[29][5] + coeff0_30*dmats1[30][5] + coeff0_31*dmats1[31][5] + coeff0_32*dmats1[32][5] + coeff0_33*dmats1[33][5] + coeff0_34*dmats1[34][5];
          new_coeff0_6 = coeff0_0*dmats1[0][6] + coeff0_1*dmats1[1][6] + coeff0_2*dmats1[2][6] + coeff0_3*dmats1[3][6] + coeff0_4*dmats1[4][6] + coeff0_5*dmats1[5][6] + coeff0_6*dmats1[6][6] + coeff0_7*dmats1[7][6] + coeff0_8*dmats1[8][6] + coeff0_9*dmats1[9][6] + coeff0_10*dmats1[10][6] + coeff0_11*dmats1[11][6] + coeff0_12*dmats1[12][6] + coeff0_13*dmats1[13][6] + coeff0_14*dmats1[14][6] + coeff0_15*dmats1[15][6] + coeff0_16*dmats1[16][6] + coeff0_17*dmats1[17][6] + coeff0_18*dmats1[18][6] + coeff0_19*dmats1[19][6] + coeff0_20*dmats1[20][6] + coeff0_21*dmats1[21][6] + coeff0_22*dmats1[22][6] + coeff0_23*dmats1[23][6] + coeff0_24*dmats1[24][6] + coeff0_25*dmats1[25][6] + coeff0_26*dmats1[26][6] + coeff0_27*dmats1[27][6] + coeff0_28*dmats1[28][6] + coeff0_29*dmats1[29][6] + coeff0_30*dmats1[30][6] + coeff0_31*dmats1[31][6] + coeff0_32*dmats1[32][6] + coeff0_33*dmats1[33][6] + coeff0_34*dmats1[34][6];
          new_coeff0_7 = coeff0_0*dmats1[0][7] + coeff0_1*dmats1[1][7] + coeff0_2*dmats1[2][7] + coeff0_3*dmats1[3][7] + coeff0_4*dmats1[4][7] + coeff0_5*dmats1[5][7] + coeff0_6*dmats1[6][7] + coeff0_7*dmats1[7][7] + coeff0_8*dmats1[8][7] + coeff0_9*dmats1[9][7] + coeff0_10*dmats1[10][7] + coeff0_11*dmats1[11][7] + coeff0_12*dmats1[12][7] + coeff0_13*dmats1[13][7] + coeff0_14*dmats1[14][7] + coeff0_15*dmats1[15][7] + coeff0_16*dmats1[16][7] + coeff0_17*dmats1[17][7] + coeff0_18*dmats1[18][7] + coeff0_19*dmats1[19][7] + coeff0_20*dmats1[20][7] + coeff0_21*dmats1[21][7] + coeff0_22*dmats1[22][7] + coeff0_23*dmats1[23][7] + coeff0_24*dmats1[24][7] + coeff0_25*dmats1[25][7] + coeff0_26*dmats1[26][7] + coeff0_27*dmats1[27][7] + coeff0_28*dmats1[28][7] + coeff0_29*dmats1[29][7] + coeff0_30*dmats1[30][7] + coeff0_31*dmats1[31][7] + coeff0_32*dmats1[32][7] + coeff0_33*dmats1[33][7] + coeff0_34*dmats1[34][7];
          new_coeff0_8 = coeff0_0*dmats1[0][8] + coeff0_1*dmats1[1][8] + coeff0_2*dmats1[2][8] + coeff0_3*dmats1[3][8] + coeff0_4*dmats1[4][8] + coeff0_5*dmats1[5][8] + coeff0_6*dmats1[6][8] + coeff0_7*dmats1[7][8] + coeff0_8*dmats1[8][8] + coeff0_9*dmats1[9][8] + coeff0_10*dmats1[10][8] + coeff0_11*dmats1[11][8] + coeff0_12*dmats1[12][8] + coeff0_13*dmats1[13][8] + coeff0_14*dmats1[14][8] + coeff0_15*dmats1[15][8] + coeff0_16*dmats1[16][8] + coeff0_17*dmats1[17][8] + coeff0_18*dmats1[18][8] + coeff0_19*dmats1[19][8] + coeff0_20*dmats1[20][8] + coeff0_21*dmats1[21][8] + coeff0_22*dmats1[22][8] + coeff0_23*dmats1[23][8] + coeff0_24*dmats1[24][8] + coeff0_25*dmats1[25][8] + coeff0_26*dmats1[26][8] + coeff0_27*dmats1[27][8] + coeff0_28*dmats1[28][8] + coeff0_29*dmats1[29][8] + coeff0_30*dmats1[30][8] + coeff0_31*dmats1[31][8] + coeff0_32*dmats1[32][8] + coeff0_33*dmats1[33][8] + coeff0_34*dmats1[34][8];
          new_coeff0_9 = coeff0_0*dmats1[0][9] + coeff0_1*dmats1[1][9] + coeff0_2*dmats1[2][9] + coeff0_3*dmats1[3][9] + coeff0_4*dmats1[4][9] + coeff0_5*dmats1[5][9] + coeff0_6*dmats1[6][9] + coeff0_7*dmats1[7][9] + coeff0_8*dmats1[8][9] + coeff0_9*dmats1[9][9] + coeff0_10*dmats1[10][9] + coeff0_11*dmats1[11][9] + coeff0_12*dmats1[12][9] + coeff0_13*dmats1[13][9] + coeff0_14*dmats1[14][9] + coeff0_15*dmats1[15][9] + coeff0_16*dmats1[16][9] + coeff0_17*dmats1[17][9] + coeff0_18*dmats1[18][9] + coeff0_19*dmats1[19][9] + coeff0_20*dmats1[20][9] + coeff0_21*dmats1[21][9] + coeff0_22*dmats1[22][9] + coeff0_23*dmats1[23][9] + coeff0_24*dmats1[24][9] + coeff0_25*dmats1[25][9] + coeff0_26*dmats1[26][9] + coeff0_27*dmats1[27][9] + coeff0_28*dmats1[28][9] + coeff0_29*dmats1[29][9] + coeff0_30*dmats1[30][9] + coeff0_31*dmats1[31][9] + coeff0_32*dmats1[32][9] + coeff0_33*dmats1[33][9] + coeff0_34*dmats1[34][9];
          new_coeff0_10 = coeff0_0*dmats1[0][10] + coeff0_1*dmats1[1][10] + coeff0_2*dmats1[2][10] + coeff0_3*dmats1[3][10] + coeff0_4*dmats1[4][10] + coeff0_5*dmats1[5][10] + coeff0_6*dmats1[6][10] + coeff0_7*dmats1[7][10] + coeff0_8*dmats1[8][10] + coeff0_9*dmats1[9][10] + coeff0_10*dmats1[10][10] + coeff0_11*dmats1[11][10] + coeff0_12*dmats1[12][10] + coeff0_13*dmats1[13][10] + coeff0_14*dmats1[14][10] + coeff0_15*dmats1[15][10] + coeff0_16*dmats1[16][10] + coeff0_17*dmats1[17][10] + coeff0_18*dmats1[18][10] + coeff0_19*dmats1[19][10] + coeff0_20*dmats1[20][10] + coeff0_21*dmats1[21][10] + coeff0_22*dmats1[22][10] + coeff0_23*dmats1[23][10] + coeff0_24*dmats1[24][10] + coeff0_25*dmats1[25][10] + coeff0_26*dmats1[26][10] + coeff0_27*dmats1[27][10] + coeff0_28*dmats1[28][10] + coeff0_29*dmats1[29][10] + coeff0_30*dmats1[30][10] + coeff0_31*dmats1[31][10] + coeff0_32*dmats1[32][10] + coeff0_33*dmats1[33][10] + coeff0_34*dmats1[34][10];
          new_coeff0_11 = coeff0_0*dmats1[0][11] + coeff0_1*dmats1[1][11] + coeff0_2*dmats1[2][11] + coeff0_3*dmats1[3][11] + coeff0_4*dmats1[4][11] + coeff0_5*dmats1[5][11] + coeff0_6*dmats1[6][11] + coeff0_7*dmats1[7][11] + coeff0_8*dmats1[8][11] + coeff0_9*dmats1[9][11] + coeff0_10*dmats1[10][11] + coeff0_11*dmats1[11][11] + coeff0_12*dmats1[12][11] + coeff0_13*dmats1[13][11] + coeff0_14*dmats1[14][11] + coeff0_15*dmats1[15][11] + coeff0_16*dmats1[16][11] + coeff0_17*dmats1[17][11] + coeff0_18*dmats1[18][11] + coeff0_19*dmats1[19][11] + coeff0_20*dmats1[20][11] + coeff0_21*dmats1[21][11] + coeff0_22*dmats1[22][11] + coeff0_23*dmats1[23][11] + coeff0_24*dmats1[24][11] + coeff0_25*dmats1[25][11] + coeff0_26*dmats1[26][11] + coeff0_27*dmats1[27][11] + coeff0_28*dmats1[28][11] + coeff0_29*dmats1[29][11] + coeff0_30*dmats1[30][11] + coeff0_31*dmats1[31][11] + coeff0_32*dmats1[32][11] + coeff0_33*dmats1[33][11] + coeff0_34*dmats1[34][11];
          new_coeff0_12 = coeff0_0*dmats1[0][12] + coeff0_1*dmats1[1][12] + coeff0_2*dmats1[2][12] + coeff0_3*dmats1[3][12] + coeff0_4*dmats1[4][12] + coeff0_5*dmats1[5][12] + coeff0_6*dmats1[6][12] + coeff0_7*dmats1[7][12] + coeff0_8*dmats1[8][12] + coeff0_9*dmats1[9][12] + coeff0_10*dmats1[10][12] + coeff0_11*dmats1[11][12] + coeff0_12*dmats1[12][12] + coeff0_13*dmats1[13][12] + coeff0_14*dmats1[14][12] + coeff0_15*dmats1[15][12] + coeff0_16*dmats1[16][12] + coeff0_17*dmats1[17][12] + coeff0_18*dmats1[18][12] + coeff0_19*dmats1[19][12] + coeff0_20*dmats1[20][12] + coeff0_21*dmats1[21][12] + coeff0_22*dmats1[22][12] + coeff0_23*dmats1[23][12] + coeff0_24*dmats1[24][12] + coeff0_25*dmats1[25][12] + coeff0_26*dmats1[26][12] + coeff0_27*dmats1[27][12] + coeff0_28*dmats1[28][12] + coeff0_29*dmats1[29][12] + coeff0_30*dmats1[30][12] + coeff0_31*dmats1[31][12] + coeff0_32*dmats1[32][12] + coeff0_33*dmats1[33][12] + coeff0_34*dmats1[34][12];
          new_coeff0_13 = coeff0_0*dmats1[0][13] + coeff0_1*dmats1[1][13] + coeff0_2*dmats1[2][13] + coeff0_3*dmats1[3][13] + coeff0_4*dmats1[4][13] + coeff0_5*dmats1[5][13] + coeff0_6*dmats1[6][13] + coeff0_7*dmats1[7][13] + coeff0_8*dmats1[8][13] + coeff0_9*dmats1[9][13] + coeff0_10*dmats1[10][13] + coeff0_11*dmats1[11][13] + coeff0_12*dmats1[12][13] + coeff0_13*dmats1[13][13] + coeff0_14*dmats1[14][13] + coeff0_15*dmats1[15][13] + coeff0_16*dmats1[16][13] + coeff0_17*dmats1[17][13] + coeff0_18*dmats1[18][13] + coeff0_19*dmats1[19][13] + coeff0_20*dmats1[20][13] + coeff0_21*dmats1[21][13] + coeff0_22*dmats1[22][13] + coeff0_23*dmats1[23][13] + coeff0_24*dmats1[24][13] + coeff0_25*dmats1[25][13] + coeff0_26*dmats1[26][13] + coeff0_27*dmats1[27][13] + coeff0_28*dmats1[28][13] + coeff0_29*dmats1[29][13] + coeff0_30*dmats1[30][13] + coeff0_31*dmats1[31][13] + coeff0_32*dmats1[32][13] + coeff0_33*dmats1[33][13] + coeff0_34*dmats1[34][13];
          new_coeff0_14 = coeff0_0*dmats1[0][14] + coeff0_1*dmats1[1][14] + coeff0_2*dmats1[2][14] + coeff0_3*dmats1[3][14] + coeff0_4*dmats1[4][14] + coeff0_5*dmats1[5][14] + coeff0_6*dmats1[6][14] + coeff0_7*dmats1[7][14] + coeff0_8*dmats1[8][14] + coeff0_9*dmats1[9][14] + coeff0_10*dmats1[10][14] + coeff0_11*dmats1[11][14] + coeff0_12*dmats1[12][14] + coeff0_13*dmats1[13][14] + coeff0_14*dmats1[14][14] + coeff0_15*dmats1[15][14] + coeff0_16*dmats1[16][14] + coeff0_17*dmats1[17][14] + coeff0_18*dmats1[18][14] + coeff0_19*dmats1[19][14] + coeff0_20*dmats1[20][14] + coeff0_21*dmats1[21][14] + coeff0_22*dmats1[22][14] + coeff0_23*dmats1[23][14] + coeff0_24*dmats1[24][14] + coeff0_25*dmats1[25][14] + coeff0_26*dmats1[26][14] + coeff0_27*dmats1[27][14] + coeff0_28*dmats1[28][14] + coeff0_29*dmats1[29][14] + coeff0_30*dmats1[30][14] + coeff0_31*dmats1[31][14] + coeff0_32*dmats1[32][14] + coeff0_33*dmats1[33][14] + coeff0_34*dmats1[34][14];
          new_coeff0_15 = coeff0_0*dmats1[0][15] + coeff0_1*dmats1[1][15] + coeff0_2*dmats1[2][15] + coeff0_3*dmats1[3][15] + coeff0_4*dmats1[4][15] + coeff0_5*dmats1[5][15] + coeff0_6*dmats1[6][15] + coeff0_7*dmats1[7][15] + coeff0_8*dmats1[8][15] + coeff0_9*dmats1[9][15] + coeff0_10*dmats1[10][15] + coeff0_11*dmats1[11][15] + coeff0_12*dmats1[12][15] + coeff0_13*dmats1[13][15] + coeff0_14*dmats1[14][15] + coeff0_15*dmats1[15][15] + coeff0_16*dmats1[16][15] + coeff0_17*dmats1[17][15] + coeff0_18*dmats1[18][15] + coeff0_19*dmats1[19][15] + coeff0_20*dmats1[20][15] + coeff0_21*dmats1[21][15] + coeff0_22*dmats1[22][15] + coeff0_23*dmats1[23][15] + coeff0_24*dmats1[24][15] + coeff0_25*dmats1[25][15] + coeff0_26*dmats1[26][15] + coeff0_27*dmats1[27][15] + coeff0_28*dmats1[28][15] + coeff0_29*dmats1[29][15] + coeff0_30*dmats1[30][15] + coeff0_31*dmats1[31][15] + coeff0_32*dmats1[32][15] + coeff0_33*dmats1[33][15] + coeff0_34*dmats1[34][15];
          new_coeff0_16 = coeff0_0*dmats1[0][16] + coeff0_1*dmats1[1][16] + coeff0_2*dmats1[2][16] + coeff0_3*dmats1[3][16] + coeff0_4*dmats1[4][16] + coeff0_5*dmats1[5][16] + coeff0_6*dmats1[6][16] + coeff0_7*dmats1[7][16] + coeff0_8*dmats1[8][16] + coeff0_9*dmats1[9][16] + coeff0_10*dmats1[10][16] + coeff0_11*dmats1[11][16] + coeff0_12*dmats1[12][16] + coeff0_13*dmats1[13][16] + coeff0_14*dmats1[14][16] + coeff0_15*dmats1[15][16] + coeff0_16*dmats1[16][16] + coeff0_17*dmats1[17][16] + coeff0_18*dmats1[18][16] + coeff0_19*dmats1[19][16] + coeff0_20*dmats1[20][16] + coeff0_21*dmats1[21][16] + coeff0_22*dmats1[22][16] + coeff0_23*dmats1[23][16] + coeff0_24*dmats1[24][16] + coeff0_25*dmats1[25][16] + coeff0_26*dmats1[26][16] + coeff0_27*dmats1[27][16] + coeff0_28*dmats1[28][16] + coeff0_29*dmats1[29][16] + coeff0_30*dmats1[30][16] + coeff0_31*dmats1[31][16] + coeff0_32*dmats1[32][16] + coeff0_33*dmats1[33][16] + coeff0_34*dmats1[34][16];
          new_coeff0_17 = coeff0_0*dmats1[0][17] + coeff0_1*dmats1[1][17] + coeff0_2*dmats1[2][17] + coeff0_3*dmats1[3][17] + coeff0_4*dmats1[4][17] + coeff0_5*dmats1[5][17] + coeff0_6*dmats1[6][17] + coeff0_7*dmats1[7][17] + coeff0_8*dmats1[8][17] + coeff0_9*dmats1[9][17] + coeff0_10*dmats1[10][17] + coeff0_11*dmats1[11][17] + coeff0_12*dmats1[12][17] + coeff0_13*dmats1[13][17] + coeff0_14*dmats1[14][17] + coeff0_15*dmats1[15][17] + coeff0_16*dmats1[16][17] + coeff0_17*dmats1[17][17] + coeff0_18*dmats1[18][17] + coeff0_19*dmats1[19][17] + coeff0_20*dmats1[20][17] + coeff0_21*dmats1[21][17] + coeff0_22*dmats1[22][17] + coeff0_23*dmats1[23][17] + coeff0_24*dmats1[24][17] + coeff0_25*dmats1[25][17] + coeff0_26*dmats1[26][17] + coeff0_27*dmats1[27][17] + coeff0_28*dmats1[28][17] + coeff0_29*dmats1[29][17] + coeff0_30*dmats1[30][17] + coeff0_31*dmats1[31][17] + coeff0_32*dmats1[32][17] + coeff0_33*dmats1[33][17] + coeff0_34*dmats1[34][17];
          new_coeff0_18 = coeff0_0*dmats1[0][18] + coeff0_1*dmats1[1][18] + coeff0_2*dmats1[2][18] + coeff0_3*dmats1[3][18] + coeff0_4*dmats1[4][18] + coeff0_5*dmats1[5][18] + coeff0_6*dmats1[6][18] + coeff0_7*dmats1[7][18] + coeff0_8*dmats1[8][18] + coeff0_9*dmats1[9][18] + coeff0_10*dmats1[10][18] + coeff0_11*dmats1[11][18] + coeff0_12*dmats1[12][18] + coeff0_13*dmats1[13][18] + coeff0_14*dmats1[14][18] + coeff0_15*dmats1[15][18] + coeff0_16*dmats1[16][18] + coeff0_17*dmats1[17][18] + coeff0_18*dmats1[18][18] + coeff0_19*dmats1[19][18] + coeff0_20*dmats1[20][18] + coeff0_21*dmats1[21][18] + coeff0_22*dmats1[22][18] + coeff0_23*dmats1[23][18] + coeff0_24*dmats1[24][18] + coeff0_25*dmats1[25][18] + coeff0_26*dmats1[26][18] + coeff0_27*dmats1[27][18] + coeff0_28*dmats1[28][18] + coeff0_29*dmats1[29][18] + coeff0_30*dmats1[30][18] + coeff0_31*dmats1[31][18] + coeff0_32*dmats1[32][18] + coeff0_33*dmats1[33][18] + coeff0_34*dmats1[34][18];
          new_coeff0_19 = coeff0_0*dmats1[0][19] + coeff0_1*dmats1[1][19] + coeff0_2*dmats1[2][19] + coeff0_3*dmats1[3][19] + coeff0_4*dmats1[4][19] + coeff0_5*dmats1[5][19] + coeff0_6*dmats1[6][19] + coeff0_7*dmats1[7][19] + coeff0_8*dmats1[8][19] + coeff0_9*dmats1[9][19] + coeff0_10*dmats1[10][19] + coeff0_11*dmats1[11][19] + coeff0_12*dmats1[12][19] + coeff0_13*dmats1[13][19] + coeff0_14*dmats1[14][19] + coeff0_15*dmats1[15][19] + coeff0_16*dmats1[16][19] + coeff0_17*dmats1[17][19] + coeff0_18*dmats1[18][19] + coeff0_19*dmats1[19][19] + coeff0_20*dmats1[20][19] + coeff0_21*dmats1[21][19] + coeff0_22*dmats1[22][19] + coeff0_23*dmats1[23][19] + coeff0_24*dmats1[24][19] + coeff0_25*dmats1[25][19] + coeff0_26*dmats1[26][19] + coeff0_27*dmats1[27][19] + coeff0_28*dmats1[28][19] + coeff0_29*dmats1[29][19] + coeff0_30*dmats1[30][19] + coeff0_31*dmats1[31][19] + coeff0_32*dmats1[32][19] + coeff0_33*dmats1[33][19] + coeff0_34*dmats1[34][19];
          new_coeff0_20 = coeff0_0*dmats1[0][20] + coeff0_1*dmats1[1][20] + coeff0_2*dmats1[2][20] + coeff0_3*dmats1[3][20] + coeff0_4*dmats1[4][20] + coeff0_5*dmats1[5][20] + coeff0_6*dmats1[6][20] + coeff0_7*dmats1[7][20] + coeff0_8*dmats1[8][20] + coeff0_9*dmats1[9][20] + coeff0_10*dmats1[10][20] + coeff0_11*dmats1[11][20] + coeff0_12*dmats1[12][20] + coeff0_13*dmats1[13][20] + coeff0_14*dmats1[14][20] + coeff0_15*dmats1[15][20] + coeff0_16*dmats1[16][20] + coeff0_17*dmats1[17][20] + coeff0_18*dmats1[18][20] + coeff0_19*dmats1[19][20] + coeff0_20*dmats1[20][20] + coeff0_21*dmats1[21][20] + coeff0_22*dmats1[22][20] + coeff0_23*dmats1[23][20] + coeff0_24*dmats1[24][20] + coeff0_25*dmats1[25][20] + coeff0_26*dmats1[26][20] + coeff0_27*dmats1[27][20] + coeff0_28*dmats1[28][20] + coeff0_29*dmats1[29][20] + coeff0_30*dmats1[30][20] + coeff0_31*dmats1[31][20] + coeff0_32*dmats1[32][20] + coeff0_33*dmats1[33][20] + coeff0_34*dmats1[34][20];
          new_coeff0_21 = coeff0_0*dmats1[0][21] + coeff0_1*dmats1[1][21] + coeff0_2*dmats1[2][21] + coeff0_3*dmats1[3][21] + coeff0_4*dmats1[4][21] + coeff0_5*dmats1[5][21] + coeff0_6*dmats1[6][21] + coeff0_7*dmats1[7][21] + coeff0_8*dmats1[8][21] + coeff0_9*dmats1[9][21] + coeff0_10*dmats1[10][21] + coeff0_11*dmats1[11][21] + coeff0_12*dmats1[12][21] + coeff0_13*dmats1[13][21] + coeff0_14*dmats1[14][21] + coeff0_15*dmats1[15][21] + coeff0_16*dmats1[16][21] + coeff0_17*dmats1[17][21] + coeff0_18*dmats1[18][21] + coeff0_19*dmats1[19][21] + coeff0_20*dmats1[20][21] + coeff0_21*dmats1[21][21] + coeff0_22*dmats1[22][21] + coeff0_23*dmats1[23][21] + coeff0_24*dmats1[24][21] + coeff0_25*dmats1[25][21] + coeff0_26*dmats1[26][21] + coeff0_27*dmats1[27][21] + coeff0_28*dmats1[28][21] + coeff0_29*dmats1[29][21] + coeff0_30*dmats1[30][21] + coeff0_31*dmats1[31][21] + coeff0_32*dmats1[32][21] + coeff0_33*dmats1[33][21] + coeff0_34*dmats1[34][21];
          new_coeff0_22 = coeff0_0*dmats1[0][22] + coeff0_1*dmats1[1][22] + coeff0_2*dmats1[2][22] + coeff0_3*dmats1[3][22] + coeff0_4*dmats1[4][22] + coeff0_5*dmats1[5][22] + coeff0_6*dmats1[6][22] + coeff0_7*dmats1[7][22] + coeff0_8*dmats1[8][22] + coeff0_9*dmats1[9][22] + coeff0_10*dmats1[10][22] + coeff0_11*dmats1[11][22] + coeff0_12*dmats1[12][22] + coeff0_13*dmats1[13][22] + coeff0_14*dmats1[14][22] + coeff0_15*dmats1[15][22] + coeff0_16*dmats1[16][22] + coeff0_17*dmats1[17][22] + coeff0_18*dmats1[18][22] + coeff0_19*dmats1[19][22] + coeff0_20*dmats1[20][22] + coeff0_21*dmats1[21][22] + coeff0_22*dmats1[22][22] + coeff0_23*dmats1[23][22] + coeff0_24*dmats1[24][22] + coeff0_25*dmats1[25][22] + coeff0_26*dmats1[26][22] + coeff0_27*dmats1[27][22] + coeff0_28*dmats1[28][22] + coeff0_29*dmats1[29][22] + coeff0_30*dmats1[30][22] + coeff0_31*dmats1[31][22] + coeff0_32*dmats1[32][22] + coeff0_33*dmats1[33][22] + coeff0_34*dmats1[34][22];
          new_coeff0_23 = coeff0_0*dmats1[0][23] + coeff0_1*dmats1[1][23] + coeff0_2*dmats1[2][23] + coeff0_3*dmats1[3][23] + coeff0_4*dmats1[4][23] + coeff0_5*dmats1[5][23] + coeff0_6*dmats1[6][23] + coeff0_7*dmats1[7][23] + coeff0_8*dmats1[8][23] + coeff0_9*dmats1[9][23] + coeff0_10*dmats1[10][23] + coeff0_11*dmats1[11][23] + coeff0_12*dmats1[12][23] + coeff0_13*dmats1[13][23] + coeff0_14*dmats1[14][23] + coeff0_15*dmats1[15][23] + coeff0_16*dmats1[16][23] + coeff0_17*dmats1[17][23] + coeff0_18*dmats1[18][23] + coeff0_19*dmats1[19][23] + coeff0_20*dmats1[20][23] + coeff0_21*dmats1[21][23] + coeff0_22*dmats1[22][23] + coeff0_23*dmats1[23][23] + coeff0_24*dmats1[24][23] + coeff0_25*dmats1[25][23] + coeff0_26*dmats1[26][23] + coeff0_27*dmats1[27][23] + coeff0_28*dmats1[28][23] + coeff0_29*dmats1[29][23] + coeff0_30*dmats1[30][23] + coeff0_31*dmats1[31][23] + coeff0_32*dmats1[32][23] + coeff0_33*dmats1[33][23] + coeff0_34*dmats1[34][23];
          new_coeff0_24 = coeff0_0*dmats1[0][24] + coeff0_1*dmats1[1][24] + coeff0_2*dmats1[2][24] + coeff0_3*dmats1[3][24] + coeff0_4*dmats1[4][24] + coeff0_5*dmats1[5][24] + coeff0_6*dmats1[6][24] + coeff0_7*dmats1[7][24] + coeff0_8*dmats1[8][24] + coeff0_9*dmats1[9][24] + coeff0_10*dmats1[10][24] + coeff0_11*dmats1[11][24] + coeff0_12*dmats1[12][24] + coeff0_13*dmats1[13][24] + coeff0_14*dmats1[14][24] + coeff0_15*dmats1[15][24] + coeff0_16*dmats1[16][24] + coeff0_17*dmats1[17][24] + coeff0_18*dmats1[18][24] + coeff0_19*dmats1[19][24] + coeff0_20*dmats1[20][24] + coeff0_21*dmats1[21][24] + coeff0_22*dmats1[22][24] + coeff0_23*dmats1[23][24] + coeff0_24*dmats1[24][24] + coeff0_25*dmats1[25][24] + coeff0_26*dmats1[26][24] + coeff0_27*dmats1[27][24] + coeff0_28*dmats1[28][24] + coeff0_29*dmats1[29][24] + coeff0_30*dmats1[30][24] + coeff0_31*dmats1[31][24] + coeff0_32*dmats1[32][24] + coeff0_33*dmats1[33][24] + coeff0_34*dmats1[34][24];
          new_coeff0_25 = coeff0_0*dmats1[0][25] + coeff0_1*dmats1[1][25] + coeff0_2*dmats1[2][25] + coeff0_3*dmats1[3][25] + coeff0_4*dmats1[4][25] + coeff0_5*dmats1[5][25] + coeff0_6*dmats1[6][25] + coeff0_7*dmats1[7][25] + coeff0_8*dmats1[8][25] + coeff0_9*dmats1[9][25] + coeff0_10*dmats1[10][25] + coeff0_11*dmats1[11][25] + coeff0_12*dmats1[12][25] + coeff0_13*dmats1[13][25] + coeff0_14*dmats1[14][25] + coeff0_15*dmats1[15][25] + coeff0_16*dmats1[16][25] + coeff0_17*dmats1[17][25] + coeff0_18*dmats1[18][25] + coeff0_19*dmats1[19][25] + coeff0_20*dmats1[20][25] + coeff0_21*dmats1[21][25] + coeff0_22*dmats1[22][25] + coeff0_23*dmats1[23][25] + coeff0_24*dmats1[24][25] + coeff0_25*dmats1[25][25] + coeff0_26*dmats1[26][25] + coeff0_27*dmats1[27][25] + coeff0_28*dmats1[28][25] + coeff0_29*dmats1[29][25] + coeff0_30*dmats1[30][25] + coeff0_31*dmats1[31][25] + coeff0_32*dmats1[32][25] + coeff0_33*dmats1[33][25] + coeff0_34*dmats1[34][25];
          new_coeff0_26 = coeff0_0*dmats1[0][26] + coeff0_1*dmats1[1][26] + coeff0_2*dmats1[2][26] + coeff0_3*dmats1[3][26] + coeff0_4*dmats1[4][26] + coeff0_5*dmats1[5][26] + coeff0_6*dmats1[6][26] + coeff0_7*dmats1[7][26] + coeff0_8*dmats1[8][26] + coeff0_9*dmats1[9][26] + coeff0_10*dmats1[10][26] + coeff0_11*dmats1[11][26] + coeff0_12*dmats1[12][26] + coeff0_13*dmats1[13][26] + coeff0_14*dmats1[14][26] + coeff0_15*dmats1[15][26] + coeff0_16*dmats1[16][26] + coeff0_17*dmats1[17][26] + coeff0_18*dmats1[18][26] + coeff0_19*dmats1[19][26] + coeff0_20*dmats1[20][26] + coeff0_21*dmats1[21][26] + coeff0_22*dmats1[22][26] + coeff0_23*dmats1[23][26] + coeff0_24*dmats1[24][26] + coeff0_25*dmats1[25][26] + coeff0_26*dmats1[26][26] + coeff0_27*dmats1[27][26] + coeff0_28*dmats1[28][26] + coeff0_29*dmats1[29][26] + coeff0_30*dmats1[30][26] + coeff0_31*dmats1[31][26] + coeff0_32*dmats1[32][26] + coeff0_33*dmats1[33][26] + coeff0_34*dmats1[34][26];
          new_coeff0_27 = coeff0_0*dmats1[0][27] + coeff0_1*dmats1[1][27] + coeff0_2*dmats1[2][27] + coeff0_3*dmats1[3][27] + coeff0_4*dmats1[4][27] + coeff0_5*dmats1[5][27] + coeff0_6*dmats1[6][27] + coeff0_7*dmats1[7][27] + coeff0_8*dmats1[8][27] + coeff0_9*dmats1[9][27] + coeff0_10*dmats1[10][27] + coeff0_11*dmats1[11][27] + coeff0_12*dmats1[12][27] + coeff0_13*dmats1[13][27] + coeff0_14*dmats1[14][27] + coeff0_15*dmats1[15][27] + coeff0_16*dmats1[16][27] + coeff0_17*dmats1[17][27] + coeff0_18*dmats1[18][27] + coeff0_19*dmats1[19][27] + coeff0_20*dmats1[20][27] + coeff0_21*dmats1[21][27] + coeff0_22*dmats1[22][27] + coeff0_23*dmats1[23][27] + coeff0_24*dmats1[24][27] + coeff0_25*dmats1[25][27] + coeff0_26*dmats1[26][27] + coeff0_27*dmats1[27][27] + coeff0_28*dmats1[28][27] + coeff0_29*dmats1[29][27] + coeff0_30*dmats1[30][27] + coeff0_31*dmats1[31][27] + coeff0_32*dmats1[32][27] + coeff0_33*dmats1[33][27] + coeff0_34*dmats1[34][27];
          new_coeff0_28 = coeff0_0*dmats1[0][28] + coeff0_1*dmats1[1][28] + coeff0_2*dmats1[2][28] + coeff0_3*dmats1[3][28] + coeff0_4*dmats1[4][28] + coeff0_5*dmats1[5][28] + coeff0_6*dmats1[6][28] + coeff0_7*dmats1[7][28] + coeff0_8*dmats1[8][28] + coeff0_9*dmats1[9][28] + coeff0_10*dmats1[10][28] + coeff0_11*dmats1[11][28] + coeff0_12*dmats1[12][28] + coeff0_13*dmats1[13][28] + coeff0_14*dmats1[14][28] + coeff0_15*dmats1[15][28] + coeff0_16*dmats1[16][28] + coeff0_17*dmats1[17][28] + coeff0_18*dmats1[18][28] + coeff0_19*dmats1[19][28] + coeff0_20*dmats1[20][28] + coeff0_21*dmats1[21][28] + coeff0_22*dmats1[22][28] + coeff0_23*dmats1[23][28] + coeff0_24*dmats1[24][28] + coeff0_25*dmats1[25][28] + coeff0_26*dmats1[26][28] + coeff0_27*dmats1[27][28] + coeff0_28*dmats1[28][28] + coeff0_29*dmats1[29][28] + coeff0_30*dmats1[30][28] + coeff0_31*dmats1[31][28] + coeff0_32*dmats1[32][28] + coeff0_33*dmats1[33][28] + coeff0_34*dmats1[34][28];
          new_coeff0_29 = coeff0_0*dmats1[0][29] + coeff0_1*dmats1[1][29] + coeff0_2*dmats1[2][29] + coeff0_3*dmats1[3][29] + coeff0_4*dmats1[4][29] + coeff0_5*dmats1[5][29] + coeff0_6*dmats1[6][29] + coeff0_7*dmats1[7][29] + coeff0_8*dmats1[8][29] + coeff0_9*dmats1[9][29] + coeff0_10*dmats1[10][29] + coeff0_11*dmats1[11][29] + coeff0_12*dmats1[12][29] + coeff0_13*dmats1[13][29] + coeff0_14*dmats1[14][29] + coeff0_15*dmats1[15][29] + coeff0_16*dmats1[16][29] + coeff0_17*dmats1[17][29] + coeff0_18*dmats1[18][29] + coeff0_19*dmats1[19][29] + coeff0_20*dmats1[20][29] + coeff0_21*dmats1[21][29] + coeff0_22*dmats1[22][29] + coeff0_23*dmats1[23][29] + coeff0_24*dmats1[24][29] + coeff0_25*dmats1[25][29] + coeff0_26*dmats1[26][29] + coeff0_27*dmats1[27][29] + coeff0_28*dmats1[28][29] + coeff0_29*dmats1[29][29] + coeff0_30*dmats1[30][29] + coeff0_31*dmats1[31][29] + coeff0_32*dmats1[32][29] + coeff0_33*dmats1[33][29] + coeff0_34*dmats1[34][29];
          new_coeff0_30 = coeff0_0*dmats1[0][30] + coeff0_1*dmats1[1][30] + coeff0_2*dmats1[2][30] + coeff0_3*dmats1[3][30] + coeff0_4*dmats1[4][30] + coeff0_5*dmats1[5][30] + coeff0_6*dmats1[6][30] + coeff0_7*dmats1[7][30] + coeff0_8*dmats1[8][30] + coeff0_9*dmats1[9][30] + coeff0_10*dmats1[10][30] + coeff0_11*dmats1[11][30] + coeff0_12*dmats1[12][30] + coeff0_13*dmats1[13][30] + coeff0_14*dmats1[14][30] + coeff0_15*dmats1[15][30] + coeff0_16*dmats1[16][30] + coeff0_17*dmats1[17][30] + coeff0_18*dmats1[18][30] + coeff0_19*dmats1[19][30] + coeff0_20*dmats1[20][30] + coeff0_21*dmats1[21][30] + coeff0_22*dmats1[22][30] + coeff0_23*dmats1[23][30] + coeff0_24*dmats1[24][30] + coeff0_25*dmats1[25][30] + coeff0_26*dmats1[26][30] + coeff0_27*dmats1[27][30] + coeff0_28*dmats1[28][30] + coeff0_29*dmats1[29][30] + coeff0_30*dmats1[30][30] + coeff0_31*dmats1[31][30] + coeff0_32*dmats1[32][30] + coeff0_33*dmats1[33][30] + coeff0_34*dmats1[34][30];
          new_coeff0_31 = coeff0_0*dmats1[0][31] + coeff0_1*dmats1[1][31] + coeff0_2*dmats1[2][31] + coeff0_3*dmats1[3][31] + coeff0_4*dmats1[4][31] + coeff0_5*dmats1[5][31] + coeff0_6*dmats1[6][31] + coeff0_7*dmats1[7][31] + coeff0_8*dmats1[8][31] + coeff0_9*dmats1[9][31] + coeff0_10*dmats1[10][31] + coeff0_11*dmats1[11][31] + coeff0_12*dmats1[12][31] + coeff0_13*dmats1[13][31] + coeff0_14*dmats1[14][31] + coeff0_15*dmats1[15][31] + coeff0_16*dmats1[16][31] + coeff0_17*dmats1[17][31] + coeff0_18*dmats1[18][31] + coeff0_19*dmats1[19][31] + coeff0_20*dmats1[20][31] + coeff0_21*dmats1[21][31] + coeff0_22*dmats1[22][31] + coeff0_23*dmats1[23][31] + coeff0_24*dmats1[24][31] + coeff0_25*dmats1[25][31] + coeff0_26*dmats1[26][31] + coeff0_27*dmats1[27][31] + coeff0_28*dmats1[28][31] + coeff0_29*dmats1[29][31] + coeff0_30*dmats1[30][31] + coeff0_31*dmats1[31][31] + coeff0_32*dmats1[32][31] + coeff0_33*dmats1[33][31] + coeff0_34*dmats1[34][31];
          new_coeff0_32 = coeff0_0*dmats1[0][32] + coeff0_1*dmats1[1][32] + coeff0_2*dmats1[2][32] + coeff0_3*dmats1[3][32] + coeff0_4*dmats1[4][32] + coeff0_5*dmats1[5][32] + coeff0_6*dmats1[6][32] + coeff0_7*dmats1[7][32] + coeff0_8*dmats1[8][32] + coeff0_9*dmats1[9][32] + coeff0_10*dmats1[10][32] + coeff0_11*dmats1[11][32] + coeff0_12*dmats1[12][32] + coeff0_13*dmats1[13][32] + coeff0_14*dmats1[14][32] + coeff0_15*dmats1[15][32] + coeff0_16*dmats1[16][32] + coeff0_17*dmats1[17][32] + coeff0_18*dmats1[18][32] + coeff0_19*dmats1[19][32] + coeff0_20*dmats1[20][32] + coeff0_21*dmats1[21][32] + coeff0_22*dmats1[22][32] + coeff0_23*dmats1[23][32] + coeff0_24*dmats1[24][32] + coeff0_25*dmats1[25][32] + coeff0_26*dmats1[26][32] + coeff0_27*dmats1[27][32] + coeff0_28*dmats1[28][32] + coeff0_29*dmats1[29][32] + coeff0_30*dmats1[30][32] + coeff0_31*dmats1[31][32] + coeff0_32*dmats1[32][32] + coeff0_33*dmats1[33][32] + coeff0_34*dmats1[34][32];
          new_coeff0_33 = coeff0_0*dmats1[0][33] + coeff0_1*dmats1[1][33] + coeff0_2*dmats1[2][33] + coeff0_3*dmats1[3][33] + coeff0_4*dmats1[4][33] + coeff0_5*dmats1[5][33] + coeff0_6*dmats1[6][33] + coeff0_7*dmats1[7][33] + coeff0_8*dmats1[8][33] + coeff0_9*dmats1[9][33] + coeff0_10*dmats1[10][33] + coeff0_11*dmats1[11][33] + coeff0_12*dmats1[12][33] + coeff0_13*dmats1[13][33] + coeff0_14*dmats1[14][33] + coeff0_15*dmats1[15][33] + coeff0_16*dmats1[16][33] + coeff0_17*dmats1[17][33] + coeff0_18*dmats1[18][33] + coeff0_19*dmats1[19][33] + coeff0_20*dmats1[20][33] + coeff0_21*dmats1[21][33] + coeff0_22*dmats1[22][33] + coeff0_23*dmats1[23][33] + coeff0_24*dmats1[24][33] + coeff0_25*dmats1[25][33] + coeff0_26*dmats1[26][33] + coeff0_27*dmats1[27][33] + coeff0_28*dmats1[28][33] + coeff0_29*dmats1[29][33] + coeff0_30*dmats1[30][33] + coeff0_31*dmats1[31][33] + coeff0_32*dmats1[32][33] + coeff0_33*dmats1[33][33] + coeff0_34*dmats1[34][33];
          new_coeff0_34 = coeff0_0*dmats1[0][34] + coeff0_1*dmats1[1][34] + coeff0_2*dmats1[2][34] + coeff0_3*dmats1[3][34] + coeff0_4*dmats1[4][34] + coeff0_5*dmats1[5][34] + coeff0_6*dmats1[6][34] + coeff0_7*dmats1[7][34] + coeff0_8*dmats1[8][34] + coeff0_9*dmats1[9][34] + coeff0_10*dmats1[10][34] + coeff0_11*dmats1[11][34] + coeff0_12*dmats1[12][34] + coeff0_13*dmats1[13][34] + coeff0_14*dmats1[14][34] + coeff0_15*dmats1[15][34] + coeff0_16*dmats1[16][34] + coeff0_17*dmats1[17][34] + coeff0_18*dmats1[18][34] + coeff0_19*dmats1[19][34] + coeff0_20*dmats1[20][34] + coeff0_21*dmats1[21][34] + coeff0_22*dmats1[22][34] + coeff0_23*dmats1[23][34] + coeff0_24*dmats1[24][34] + coeff0_25*dmats1[25][34] + coeff0_26*dmats1[26][34] + coeff0_27*dmats1[27][34] + coeff0_28*dmats1[28][34] + coeff0_29*dmats1[29][34] + coeff0_30*dmats1[30][34] + coeff0_31*dmats1[31][34] + coeff0_32*dmats1[32][34] + coeff0_33*dmats1[33][34] + coeff0_34*dmats1[34][34];
        }
        if(combinations[deriv_num][j] == 2)
        {
          new_coeff0_0 = coeff0_0*dmats2[0][0] + coeff0_1*dmats2[1][0] + coeff0_2*dmats2[2][0] + coeff0_3*dmats2[3][0] + coeff0_4*dmats2[4][0] + coeff0_5*dmats2[5][0] + coeff0_6*dmats2[6][0] + coeff0_7*dmats2[7][0] + coeff0_8*dmats2[8][0] + coeff0_9*dmats2[9][0] + coeff0_10*dmats2[10][0] + coeff0_11*dmats2[11][0] + coeff0_12*dmats2[12][0] + coeff0_13*dmats2[13][0] + coeff0_14*dmats2[14][0] + coeff0_15*dmats2[15][0] + coeff0_16*dmats2[16][0] + coeff0_17*dmats2[17][0] + coeff0_18*dmats2[18][0] + coeff0_19*dmats2[19][0] + coeff0_20*dmats2[20][0] + coeff0_21*dmats2[21][0] + coeff0_22*dmats2[22][0] + coeff0_23*dmats2[23][0] + coeff0_24*dmats2[24][0] + coeff0_25*dmats2[25][0] + coeff0_26*dmats2[26][0] + coeff0_27*dmats2[27][0] + coeff0_28*dmats2[28][0] + coeff0_29*dmats2[29][0] + coeff0_30*dmats2[30][0] + coeff0_31*dmats2[31][0] + coeff0_32*dmats2[32][0] + coeff0_33*dmats2[33][0] + coeff0_34*dmats2[34][0];
          new_coeff0_1 = coeff0_0*dmats2[0][1] + coeff0_1*dmats2[1][1] + coeff0_2*dmats2[2][1] + coeff0_3*dmats2[3][1] + coeff0_4*dmats2[4][1] + coeff0_5*dmats2[5][1] + coeff0_6*dmats2[6][1] + coeff0_7*dmats2[7][1] + coeff0_8*dmats2[8][1] + coeff0_9*dmats2[9][1] + coeff0_10*dmats2[10][1] + coeff0_11*dmats2[11][1] + coeff0_12*dmats2[12][1] + coeff0_13*dmats2[13][1] + coeff0_14*dmats2[14][1] + coeff0_15*dmats2[15][1] + coeff0_16*dmats2[16][1] + coeff0_17*dmats2[17][1] + coeff0_18*dmats2[18][1] + coeff0_19*dmats2[19][1] + coeff0_20*dmats2[20][1] + coeff0_21*dmats2[21][1] + coeff0_22*dmats2[22][1] + coeff0_23*dmats2[23][1] + coeff0_24*dmats2[24][1] + coeff0_25*dmats2[25][1] + coeff0_26*dmats2[26][1] + coeff0_27*dmats2[27][1] + coeff0_28*dmats2[28][1] + coeff0_29*dmats2[29][1] + coeff0_30*dmats2[30][1] + coeff0_31*dmats2[31][1] + coeff0_32*dmats2[32][1] + coeff0_33*dmats2[33][1] + coeff0_34*dmats2[34][1];
          new_coeff0_2 = coeff0_0*dmats2[0][2] + coeff0_1*dmats2[1][2] + coeff0_2*dmats2[2][2] + coeff0_3*dmats2[3][2] + coeff0_4*dmats2[4][2] + coeff0_5*dmats2[5][2] + coeff0_6*dmats2[6][2] + coeff0_7*dmats2[7][2] + coeff0_8*dmats2[8][2] + coeff0_9*dmats2[9][2] + coeff0_10*dmats2[10][2] + coeff0_11*dmats2[11][2] + coeff0_12*dmats2[12][2] + coeff0_13*dmats2[13][2] + coeff0_14*dmats2[14][2] + coeff0_15*dmats2[15][2] + coeff0_16*dmats2[16][2] + coeff0_17*dmats2[17][2] + coeff0_18*dmats2[18][2] + coeff0_19*dmats2[19][2] + coeff0_20*dmats2[20][2] + coeff0_21*dmats2[21][2] + coeff0_22*dmats2[22][2] + coeff0_23*dmats2[23][2] + coeff0_24*dmats2[24][2] + coeff0_25*dmats2[25][2] + coeff0_26*dmats2[26][2] + coeff0_27*dmats2[27][2] + coeff0_28*dmats2[28][2] + coeff0_29*dmats2[29][2] + coeff0_30*dmats2[30][2] + coeff0_31*dmats2[31][2] + coeff0_32*dmats2[32][2] + coeff0_33*dmats2[33][2] + coeff0_34*dmats2[34][2];
          new_coeff0_3 = coeff0_0*dmats2[0][3] + coeff0_1*dmats2[1][3] + coeff0_2*dmats2[2][3] + coeff0_3*dmats2[3][3] + coeff0_4*dmats2[4][3] + coeff0_5*dmats2[5][3] + coeff0_6*dmats2[6][3] + coeff0_7*dmats2[7][3] + coeff0_8*dmats2[8][3] + coeff0_9*dmats2[9][3] + coeff0_10*dmats2[10][3] + coeff0_11*dmats2[11][3] + coeff0_12*dmats2[12][3] + coeff0_13*dmats2[13][3] + coeff0_14*dmats2[14][3] + coeff0_15*dmats2[15][3] + coeff0_16*dmats2[16][3] + coeff0_17*dmats2[17][3] + coeff0_18*dmats2[18][3] + coeff0_19*dmats2[19][3] + coeff0_20*dmats2[20][3] + coeff0_21*dmats2[21][3] + coeff0_22*dmats2[22][3] + coeff0_23*dmats2[23][3] + coeff0_24*dmats2[24][3] + coeff0_25*dmats2[25][3] + coeff0_26*dmats2[26][3] + coeff0_27*dmats2[27][3] + coeff0_28*dmats2[28][3] + coeff0_29*dmats2[29][3] + coeff0_30*dmats2[30][3] + coeff0_31*dmats2[31][3] + coeff0_32*dmats2[32][3] + coeff0_33*dmats2[33][3] + coeff0_34*dmats2[34][3];
          new_coeff0_4 = coeff0_0*dmats2[0][4] + coeff0_1*dmats2[1][4] + coeff0_2*dmats2[2][4] + coeff0_3*dmats2[3][4] + coeff0_4*dmats2[4][4] + coeff0_5*dmats2[5][4] + coeff0_6*dmats2[6][4] + coeff0_7*dmats2[7][4] + coeff0_8*dmats2[8][4] + coeff0_9*dmats2[9][4] + coeff0_10*dmats2[10][4] + coeff0_11*dmats2[11][4] + coeff0_12*dmats2[12][4] + coeff0_13*dmats2[13][4] + coeff0_14*dmats2[14][4] + coeff0_15*dmats2[15][4] + coeff0_16*dmats2[16][4] + coeff0_17*dmats2[17][4] + coeff0_18*dmats2[18][4] + coeff0_19*dmats2[19][4] + coeff0_20*dmats2[20][4] + coeff0_21*dmats2[21][4] + coeff0_22*dmats2[22][4] + coeff0_23*dmats2[23][4] + coeff0_24*dmats2[24][4] + coeff0_25*dmats2[25][4] + coeff0_26*dmats2[26][4] + coeff0_27*dmats2[27][4] + coeff0_28*dmats2[28][4] + coeff0_29*dmats2[29][4] + coeff0_30*dmats2[30][4] + coeff0_31*dmats2[31][4] + coeff0_32*dmats2[32][4] + coeff0_33*dmats2[33][4] + coeff0_34*dmats2[34][4];
          new_coeff0_5 = coeff0_0*dmats2[0][5] + coeff0_1*dmats2[1][5] + coeff0_2*dmats2[2][5] + coeff0_3*dmats2[3][5] + coeff0_4*dmats2[4][5] + coeff0_5*dmats2[5][5] + coeff0_6*dmats2[6][5] + coeff0_7*dmats2[7][5] + coeff0_8*dmats2[8][5] + coeff0_9*dmats2[9][5] + coeff0_10*dmats2[10][5] + coeff0_11*dmats2[11][5] + coeff0_12*dmats2[12][5] + coeff0_13*dmats2[13][5] + coeff0_14*dmats2[14][5] + coeff0_15*dmats2[15][5] + coeff0_16*dmats2[16][5] + coeff0_17*dmats2[17][5] + coeff0_18*dmats2[18][5] + coeff0_19*dmats2[19][5] + coeff0_20*dmats2[20][5] + coeff0_21*dmats2[21][5] + coeff0_22*dmats2[22][5] + coeff0_23*dmats2[23][5] + coeff0_24*dmats2[24][5] + coeff0_25*dmats2[25][5] + coeff0_26*dmats2[26][5] + coeff0_27*dmats2[27][5] + coeff0_28*dmats2[28][5] + coeff0_29*dmats2[29][5] + coeff0_30*dmats2[30][5] + coeff0_31*dmats2[31][5] + coeff0_32*dmats2[32][5] + coeff0_33*dmats2[33][5] + coeff0_34*dmats2[34][5];
          new_coeff0_6 = coeff0_0*dmats2[0][6] + coeff0_1*dmats2[1][6] + coeff0_2*dmats2[2][6] + coeff0_3*dmats2[3][6] + coeff0_4*dmats2[4][6] + coeff0_5*dmats2[5][6] + coeff0_6*dmats2[6][6] + coeff0_7*dmats2[7][6] + coeff0_8*dmats2[8][6] + coeff0_9*dmats2[9][6] + coeff0_10*dmats2[10][6] + coeff0_11*dmats2[11][6] + coeff0_12*dmats2[12][6] + coeff0_13*dmats2[13][6] + coeff0_14*dmats2[14][6] + coeff0_15*dmats2[15][6] + coeff0_16*dmats2[16][6] + coeff0_17*dmats2[17][6] + coeff0_18*dmats2[18][6] + coeff0_19*dmats2[19][6] + coeff0_20*dmats2[20][6] + coeff0_21*dmats2[21][6] + coeff0_22*dmats2[22][6] + coeff0_23*dmats2[23][6] + coeff0_24*dmats2[24][6] + coeff0_25*dmats2[25][6] + coeff0_26*dmats2[26][6] + coeff0_27*dmats2[27][6] + coeff0_28*dmats2[28][6] + coeff0_29*dmats2[29][6] + coeff0_30*dmats2[30][6] + coeff0_31*dmats2[31][6] + coeff0_32*dmats2[32][6] + coeff0_33*dmats2[33][6] + coeff0_34*dmats2[34][6];
          new_coeff0_7 = coeff0_0*dmats2[0][7] + coeff0_1*dmats2[1][7] + coeff0_2*dmats2[2][7] + coeff0_3*dmats2[3][7] + coeff0_4*dmats2[4][7] + coeff0_5*dmats2[5][7] + coeff0_6*dmats2[6][7] + coeff0_7*dmats2[7][7] + coeff0_8*dmats2[8][7] + coeff0_9*dmats2[9][7] + coeff0_10*dmats2[10][7] + coeff0_11*dmats2[11][7] + coeff0_12*dmats2[12][7] + coeff0_13*dmats2[13][7] + coeff0_14*dmats2[14][7] + coeff0_15*dmats2[15][7] + coeff0_16*dmats2[16][7] + coeff0_17*dmats2[17][7] + coeff0_18*dmats2[18][7] + coeff0_19*dmats2[19][7] + coeff0_20*dmats2[20][7] + coeff0_21*dmats2[21][7] + coeff0_22*dmats2[22][7] + coeff0_23*dmats2[23][7] + coeff0_24*dmats2[24][7] + coeff0_25*dmats2[25][7] + coeff0_26*dmats2[26][7] + coeff0_27*dmats2[27][7] + coeff0_28*dmats2[28][7] + coeff0_29*dmats2[29][7] + coeff0_30*dmats2[30][7] + coeff0_31*dmats2[31][7] + coeff0_32*dmats2[32][7] + coeff0_33*dmats2[33][7] + coeff0_34*dmats2[34][7];
          new_coeff0_8 = coeff0_0*dmats2[0][8] + coeff0_1*dmats2[1][8] + coeff0_2*dmats2[2][8] + coeff0_3*dmats2[3][8] + coeff0_4*dmats2[4][8] + coeff0_5*dmats2[5][8] + coeff0_6*dmats2[6][8] + coeff0_7*dmats2[7][8] + coeff0_8*dmats2[8][8] + coeff0_9*dmats2[9][8] + coeff0_10*dmats2[10][8] + coeff0_11*dmats2[11][8] + coeff0_12*dmats2[12][8] + coeff0_13*dmats2[13][8] + coeff0_14*dmats2[14][8] + coeff0_15*dmats2[15][8] + coeff0_16*dmats2[16][8] + coeff0_17*dmats2[17][8] + coeff0_18*dmats2[18][8] + coeff0_19*dmats2[19][8] + coeff0_20*dmats2[20][8] + coeff0_21*dmats2[21][8] + coeff0_22*dmats2[22][8] + coeff0_23*dmats2[23][8] + coeff0_24*dmats2[24][8] + coeff0_25*dmats2[25][8] + coeff0_26*dmats2[26][8] + coeff0_27*dmats2[27][8] + coeff0_28*dmats2[28][8] + coeff0_29*dmats2[29][8] + coeff0_30*dmats2[30][8] + coeff0_31*dmats2[31][8] + coeff0_32*dmats2[32][8] + coeff0_33*dmats2[33][8] + coeff0_34*dmats2[34][8];
          new_coeff0_9 = coeff0_0*dmats2[0][9] + coeff0_1*dmats2[1][9] + coeff0_2*dmats2[2][9] + coeff0_3*dmats2[3][9] + coeff0_4*dmats2[4][9] + coeff0_5*dmats2[5][9] + coeff0_6*dmats2[6][9] + coeff0_7*dmats2[7][9] + coeff0_8*dmats2[8][9] + coeff0_9*dmats2[9][9] + coeff0_10*dmats2[10][9] + coeff0_11*dmats2[11][9] + coeff0_12*dmats2[12][9] + coeff0_13*dmats2[13][9] + coeff0_14*dmats2[14][9] + coeff0_15*dmats2[15][9] + coeff0_16*dmats2[16][9] + coeff0_17*dmats2[17][9] + coeff0_18*dmats2[18][9] + coeff0_19*dmats2[19][9] + coeff0_20*dmats2[20][9] + coeff0_21*dmats2[21][9] + coeff0_22*dmats2[22][9] + coeff0_23*dmats2[23][9] + coeff0_24*dmats2[24][9] + coeff0_25*dmats2[25][9] + coeff0_26*dmats2[26][9] + coeff0_27*dmats2[27][9] + coeff0_28*dmats2[28][9] + coeff0_29*dmats2[29][9] + coeff0_30*dmats2[30][9] + coeff0_31*dmats2[31][9] + coeff0_32*dmats2[32][9] + coeff0_33*dmats2[33][9] + coeff0_34*dmats2[34][9];
          new_coeff0_10 = coeff0_0*dmats2[0][10] + coeff0_1*dmats2[1][10] + coeff0_2*dmats2[2][10] + coeff0_3*dmats2[3][10] + coeff0_4*dmats2[4][10] + coeff0_5*dmats2[5][10] + coeff0_6*dmats2[6][10] + coeff0_7*dmats2[7][10] + coeff0_8*dmats2[8][10] + coeff0_9*dmats2[9][10] + coeff0_10*dmats2[10][10] + coeff0_11*dmats2[11][10] + coeff0_12*dmats2[12][10] + coeff0_13*dmats2[13][10] + coeff0_14*dmats2[14][10] + coeff0_15*dmats2[15][10] + coeff0_16*dmats2[16][10] + coeff0_17*dmats2[17][10] + coeff0_18*dmats2[18][10] + coeff0_19*dmats2[19][10] + coeff0_20*dmats2[20][10] + coeff0_21*dmats2[21][10] + coeff0_22*dmats2[22][10] + coeff0_23*dmats2[23][10] + coeff0_24*dmats2[24][10] + coeff0_25*dmats2[25][10] + coeff0_26*dmats2[26][10] + coeff0_27*dmats2[27][10] + coeff0_28*dmats2[28][10] + coeff0_29*dmats2[29][10] + coeff0_30*dmats2[30][10] + coeff0_31*dmats2[31][10] + coeff0_32*dmats2[32][10] + coeff0_33*dmats2[33][10] + coeff0_34*dmats2[34][10];
          new_coeff0_11 = coeff0_0*dmats2[0][11] + coeff0_1*dmats2[1][11] + coeff0_2*dmats2[2][11] + coeff0_3*dmats2[3][11] + coeff0_4*dmats2[4][11] + coeff0_5*dmats2[5][11] + coeff0_6*dmats2[6][11] + coeff0_7*dmats2[7][11] + coeff0_8*dmats2[8][11] + coeff0_9*dmats2[9][11] + coeff0_10*dmats2[10][11] + coeff0_11*dmats2[11][11] + coeff0_12*dmats2[12][11] + coeff0_13*dmats2[13][11] + coeff0_14*dmats2[14][11] + coeff0_15*dmats2[15][11] + coeff0_16*dmats2[16][11] + coeff0_17*dmats2[17][11] + coeff0_18*dmats2[18][11] + coeff0_19*dmats2[19][11] + coeff0_20*dmats2[20][11] + coeff0_21*dmats2[21][11] + coeff0_22*dmats2[22][11] + coeff0_23*dmats2[23][11] + coeff0_24*dmats2[24][11] + coeff0_25*dmats2[25][11] + coeff0_26*dmats2[26][11] + coeff0_27*dmats2[27][11] + coeff0_28*dmats2[28][11] + coeff0_29*dmats2[29][11] + coeff0_30*dmats2[30][11] + coeff0_31*dmats2[31][11] + coeff0_32*dmats2[32][11] + coeff0_33*dmats2[33][11] + coeff0_34*dmats2[34][11];
          new_coeff0_12 = coeff0_0*dmats2[0][12] + coeff0_1*dmats2[1][12] + coeff0_2*dmats2[2][12] + coeff0_3*dmats2[3][12] + coeff0_4*dmats2[4][12] + coeff0_5*dmats2[5][12] + coeff0_6*dmats2[6][12] + coeff0_7*dmats2[7][12] + coeff0_8*dmats2[8][12] + coeff0_9*dmats2[9][12] + coeff0_10*dmats2[10][12] + coeff0_11*dmats2[11][12] + coeff0_12*dmats2[12][12] + coeff0_13*dmats2[13][12] + coeff0_14*dmats2[14][12] + coeff0_15*dmats2[15][12] + coeff0_16*dmats2[16][12] + coeff0_17*dmats2[17][12] + coeff0_18*dmats2[18][12] + coeff0_19*dmats2[19][12] + coeff0_20*dmats2[20][12] + coeff0_21*dmats2[21][12] + coeff0_22*dmats2[22][12] + coeff0_23*dmats2[23][12] + coeff0_24*dmats2[24][12] + coeff0_25*dmats2[25][12] + coeff0_26*dmats2[26][12] + coeff0_27*dmats2[27][12] + coeff0_28*dmats2[28][12] + coeff0_29*dmats2[29][12] + coeff0_30*dmats2[30][12] + coeff0_31*dmats2[31][12] + coeff0_32*dmats2[32][12] + coeff0_33*dmats2[33][12] + coeff0_34*dmats2[34][12];
          new_coeff0_13 = coeff0_0*dmats2[0][13] + coeff0_1*dmats2[1][13] + coeff0_2*dmats2[2][13] + coeff0_3*dmats2[3][13] + coeff0_4*dmats2[4][13] + coeff0_5*dmats2[5][13] + coeff0_6*dmats2[6][13] + coeff0_7*dmats2[7][13] + coeff0_8*dmats2[8][13] + coeff0_9*dmats2[9][13] + coeff0_10*dmats2[10][13] + coeff0_11*dmats2[11][13] + coeff0_12*dmats2[12][13] + coeff0_13*dmats2[13][13] + coeff0_14*dmats2[14][13] + coeff0_15*dmats2[15][13] + coeff0_16*dmats2[16][13] + coeff0_17*dmats2[17][13] + coeff0_18*dmats2[18][13] + coeff0_19*dmats2[19][13] + coeff0_20*dmats2[20][13] + coeff0_21*dmats2[21][13] + coeff0_22*dmats2[22][13] + coeff0_23*dmats2[23][13] + coeff0_24*dmats2[24][13] + coeff0_25*dmats2[25][13] + coeff0_26*dmats2[26][13] + coeff0_27*dmats2[27][13] + coeff0_28*dmats2[28][13] + coeff0_29*dmats2[29][13] + coeff0_30*dmats2[30][13] + coeff0_31*dmats2[31][13] + coeff0_32*dmats2[32][13] + coeff0_33*dmats2[33][13] + coeff0_34*dmats2[34][13];
          new_coeff0_14 = coeff0_0*dmats2[0][14] + coeff0_1*dmats2[1][14] + coeff0_2*dmats2[2][14] + coeff0_3*dmats2[3][14] + coeff0_4*dmats2[4][14] + coeff0_5*dmats2[5][14] + coeff0_6*dmats2[6][14] + coeff0_7*dmats2[7][14] + coeff0_8*dmats2[8][14] + coeff0_9*dmats2[9][14] + coeff0_10*dmats2[10][14] + coeff0_11*dmats2[11][14] + coeff0_12*dmats2[12][14] + coeff0_13*dmats2[13][14] + coeff0_14*dmats2[14][14] + coeff0_15*dmats2[15][14] + coeff0_16*dmats2[16][14] + coeff0_17*dmats2[17][14] + coeff0_18*dmats2[18][14] + coeff0_19*dmats2[19][14] + coeff0_20*dmats2[20][14] + coeff0_21*dmats2[21][14] + coeff0_22*dmats2[22][14] + coeff0_23*dmats2[23][14] + coeff0_24*dmats2[24][14] + coeff0_25*dmats2[25][14] + coeff0_26*dmats2[26][14] + coeff0_27*dmats2[27][14] + coeff0_28*dmats2[28][14] + coeff0_29*dmats2[29][14] + coeff0_30*dmats2[30][14] + coeff0_31*dmats2[31][14] + coeff0_32*dmats2[32][14] + coeff0_33*dmats2[33][14] + coeff0_34*dmats2[34][14];
          new_coeff0_15 = coeff0_0*dmats2[0][15] + coeff0_1*dmats2[1][15] + coeff0_2*dmats2[2][15] + coeff0_3*dmats2[3][15] + coeff0_4*dmats2[4][15] + coeff0_5*dmats2[5][15] + coeff0_6*dmats2[6][15] + coeff0_7*dmats2[7][15] + coeff0_8*dmats2[8][15] + coeff0_9*dmats2[9][15] + coeff0_10*dmats2[10][15] + coeff0_11*dmats2[11][15] + coeff0_12*dmats2[12][15] + coeff0_13*dmats2[13][15] + coeff0_14*dmats2[14][15] + coeff0_15*dmats2[15][15] + coeff0_16*dmats2[16][15] + coeff0_17*dmats2[17][15] + coeff0_18*dmats2[18][15] + coeff0_19*dmats2[19][15] + coeff0_20*dmats2[20][15] + coeff0_21*dmats2[21][15] + coeff0_22*dmats2[22][15] + coeff0_23*dmats2[23][15] + coeff0_24*dmats2[24][15] + coeff0_25*dmats2[25][15] + coeff0_26*dmats2[26][15] + coeff0_27*dmats2[27][15] + coeff0_28*dmats2[28][15] + coeff0_29*dmats2[29][15] + coeff0_30*dmats2[30][15] + coeff0_31*dmats2[31][15] + coeff0_32*dmats2[32][15] + coeff0_33*dmats2[33][15] + coeff0_34*dmats2[34][15];
          new_coeff0_16 = coeff0_0*dmats2[0][16] + coeff0_1*dmats2[1][16] + coeff0_2*dmats2[2][16] + coeff0_3*dmats2[3][16] + coeff0_4*dmats2[4][16] + coeff0_5*dmats2[5][16] + coeff0_6*dmats2[6][16] + coeff0_7*dmats2[7][16] + coeff0_8*dmats2[8][16] + coeff0_9*dmats2[9][16] + coeff0_10*dmats2[10][16] + coeff0_11*dmats2[11][16] + coeff0_12*dmats2[12][16] + coeff0_13*dmats2[13][16] + coeff0_14*dmats2[14][16] + coeff0_15*dmats2[15][16] + coeff0_16*dmats2[16][16] + coeff0_17*dmats2[17][16] + coeff0_18*dmats2[18][16] + coeff0_19*dmats2[19][16] + coeff0_20*dmats2[20][16] + coeff0_21*dmats2[21][16] + coeff0_22*dmats2[22][16] + coeff0_23*dmats2[23][16] + coeff0_24*dmats2[24][16] + coeff0_25*dmats2[25][16] + coeff0_26*dmats2[26][16] + coeff0_27*dmats2[27][16] + coeff0_28*dmats2[28][16] + coeff0_29*dmats2[29][16] + coeff0_30*dmats2[30][16] + coeff0_31*dmats2[31][16] + coeff0_32*dmats2[32][16] + coeff0_33*dmats2[33][16] + coeff0_34*dmats2[34][16];
          new_coeff0_17 = coeff0_0*dmats2[0][17] + coeff0_1*dmats2[1][17] + coeff0_2*dmats2[2][17] + coeff0_3*dmats2[3][17] + coeff0_4*dmats2[4][17] + coeff0_5*dmats2[5][17] + coeff0_6*dmats2[6][17] + coeff0_7*dmats2[7][17] + coeff0_8*dmats2[8][17] + coeff0_9*dmats2[9][17] + coeff0_10*dmats2[10][17] + coeff0_11*dmats2[11][17] + coeff0_12*dmats2[12][17] + coeff0_13*dmats2[13][17] + coeff0_14*dmats2[14][17] + coeff0_15*dmats2[15][17] + coeff0_16*dmats2[16][17] + coeff0_17*dmats2[17][17] + coeff0_18*dmats2[18][17] + coeff0_19*dmats2[19][17] + coeff0_20*dmats2[20][17] + coeff0_21*dmats2[21][17] + coeff0_22*dmats2[22][17] + coeff0_23*dmats2[23][17] + coeff0_24*dmats2[24][17] + coeff0_25*dmats2[25][17] + coeff0_26*dmats2[26][17] + coeff0_27*dmats2[27][17] + coeff0_28*dmats2[28][17] + coeff0_29*dmats2[29][17] + coeff0_30*dmats2[30][17] + coeff0_31*dmats2[31][17] + coeff0_32*dmats2[32][17] + coeff0_33*dmats2[33][17] + coeff0_34*dmats2[34][17];
          new_coeff0_18 = coeff0_0*dmats2[0][18] + coeff0_1*dmats2[1][18] + coeff0_2*dmats2[2][18] + coeff0_3*dmats2[3][18] + coeff0_4*dmats2[4][18] + coeff0_5*dmats2[5][18] + coeff0_6*dmats2[6][18] + coeff0_7*dmats2[7][18] + coeff0_8*dmats2[8][18] + coeff0_9*dmats2[9][18] + coeff0_10*dmats2[10][18] + coeff0_11*dmats2[11][18] + coeff0_12*dmats2[12][18] + coeff0_13*dmats2[13][18] + coeff0_14*dmats2[14][18] + coeff0_15*dmats2[15][18] + coeff0_16*dmats2[16][18] + coeff0_17*dmats2[17][18] + coeff0_18*dmats2[18][18] + coeff0_19*dmats2[19][18] + coeff0_20*dmats2[20][18] + coeff0_21*dmats2[21][18] + coeff0_22*dmats2[22][18] + coeff0_23*dmats2[23][18] + coeff0_24*dmats2[24][18] + coeff0_25*dmats2[25][18] + coeff0_26*dmats2[26][18] + coeff0_27*dmats2[27][18] + coeff0_28*dmats2[28][18] + coeff0_29*dmats2[29][18] + coeff0_30*dmats2[30][18] + coeff0_31*dmats2[31][18] + coeff0_32*dmats2[32][18] + coeff0_33*dmats2[33][18] + coeff0_34*dmats2[34][18];
          new_coeff0_19 = coeff0_0*dmats2[0][19] + coeff0_1*dmats2[1][19] + coeff0_2*dmats2[2][19] + coeff0_3*dmats2[3][19] + coeff0_4*dmats2[4][19] + coeff0_5*dmats2[5][19] + coeff0_6*dmats2[6][19] + coeff0_7*dmats2[7][19] + coeff0_8*dmats2[8][19] + coeff0_9*dmats2[9][19] + coeff0_10*dmats2[10][19] + coeff0_11*dmats2[11][19] + coeff0_12*dmats2[12][19] + coeff0_13*dmats2[13][19] + coeff0_14*dmats2[14][19] + coeff0_15*dmats2[15][19] + coeff0_16*dmats2[16][19] + coeff0_17*dmats2[17][19] + coeff0_18*dmats2[18][19] + coeff0_19*dmats2[19][19] + coeff0_20*dmats2[20][19] + coeff0_21*dmats2[21][19] + coeff0_22*dmats2[22][19] + coeff0_23*dmats2[23][19] + coeff0_24*dmats2[24][19] + coeff0_25*dmats2[25][19] + coeff0_26*dmats2[26][19] + coeff0_27*dmats2[27][19] + coeff0_28*dmats2[28][19] + coeff0_29*dmats2[29][19] + coeff0_30*dmats2[30][19] + coeff0_31*dmats2[31][19] + coeff0_32*dmats2[32][19] + coeff0_33*dmats2[33][19] + coeff0_34*dmats2[34][19];
          new_coeff0_20 = coeff0_0*dmats2[0][20] + coeff0_1*dmats2[1][20] + coeff0_2*dmats2[2][20] + coeff0_3*dmats2[3][20] + coeff0_4*dmats2[4][20] + coeff0_5*dmats2[5][20] + coeff0_6*dmats2[6][20] + coeff0_7*dmats2[7][20] + coeff0_8*dmats2[8][20] + coeff0_9*dmats2[9][20] + coeff0_10*dmats2[10][20] + coeff0_11*dmats2[11][20] + coeff0_12*dmats2[12][20] + coeff0_13*dmats2[13][20] + coeff0_14*dmats2[14][20] + coeff0_15*dmats2[15][20] + coeff0_16*dmats2[16][20] + coeff0_17*dmats2[17][20] + coeff0_18*dmats2[18][20] + coeff0_19*dmats2[19][20] + coeff0_20*dmats2[20][20] + coeff0_21*dmats2[21][20] + coeff0_22*dmats2[22][20] + coeff0_23*dmats2[23][20] + coeff0_24*dmats2[24][20] + coeff0_25*dmats2[25][20] + coeff0_26*dmats2[26][20] + coeff0_27*dmats2[27][20] + coeff0_28*dmats2[28][20] + coeff0_29*dmats2[29][20] + coeff0_30*dmats2[30][20] + coeff0_31*dmats2[31][20] + coeff0_32*dmats2[32][20] + coeff0_33*dmats2[33][20] + coeff0_34*dmats2[34][20];
          new_coeff0_21 = coeff0_0*dmats2[0][21] + coeff0_1*dmats2[1][21] + coeff0_2*dmats2[2][21] + coeff0_3*dmats2[3][21] + coeff0_4*dmats2[4][21] + coeff0_5*dmats2[5][21] + coeff0_6*dmats2[6][21] + coeff0_7*dmats2[7][21] + coeff0_8*dmats2[8][21] + coeff0_9*dmats2[9][21] + coeff0_10*dmats2[10][21] + coeff0_11*dmats2[11][21] + coeff0_12*dmats2[12][21] + coeff0_13*dmats2[13][21] + coeff0_14*dmats2[14][21] + coeff0_15*dmats2[15][21] + coeff0_16*dmats2[16][21] + coeff0_17*dmats2[17][21] + coeff0_18*dmats2[18][21] + coeff0_19*dmats2[19][21] + coeff0_20*dmats2[20][21] + coeff0_21*dmats2[21][21] + coeff0_22*dmats2[22][21] + coeff0_23*dmats2[23][21] + coeff0_24*dmats2[24][21] + coeff0_25*dmats2[25][21] + coeff0_26*dmats2[26][21] + coeff0_27*dmats2[27][21] + coeff0_28*dmats2[28][21] + coeff0_29*dmats2[29][21] + coeff0_30*dmats2[30][21] + coeff0_31*dmats2[31][21] + coeff0_32*dmats2[32][21] + coeff0_33*dmats2[33][21] + coeff0_34*dmats2[34][21];
          new_coeff0_22 = coeff0_0*dmats2[0][22] + coeff0_1*dmats2[1][22] + coeff0_2*dmats2[2][22] + coeff0_3*dmats2[3][22] + coeff0_4*dmats2[4][22] + coeff0_5*dmats2[5][22] + coeff0_6*dmats2[6][22] + coeff0_7*dmats2[7][22] + coeff0_8*dmats2[8][22] + coeff0_9*dmats2[9][22] + coeff0_10*dmats2[10][22] + coeff0_11*dmats2[11][22] + coeff0_12*dmats2[12][22] + coeff0_13*dmats2[13][22] + coeff0_14*dmats2[14][22] + coeff0_15*dmats2[15][22] + coeff0_16*dmats2[16][22] + coeff0_17*dmats2[17][22] + coeff0_18*dmats2[18][22] + coeff0_19*dmats2[19][22] + coeff0_20*dmats2[20][22] + coeff0_21*dmats2[21][22] + coeff0_22*dmats2[22][22] + coeff0_23*dmats2[23][22] + coeff0_24*dmats2[24][22] + coeff0_25*dmats2[25][22] + coeff0_26*dmats2[26][22] + coeff0_27*dmats2[27][22] + coeff0_28*dmats2[28][22] + coeff0_29*dmats2[29][22] + coeff0_30*dmats2[30][22] + coeff0_31*dmats2[31][22] + coeff0_32*dmats2[32][22] + coeff0_33*dmats2[33][22] + coeff0_34*dmats2[34][22];
          new_coeff0_23 = coeff0_0*dmats2[0][23] + coeff0_1*dmats2[1][23] + coeff0_2*dmats2[2][23] + coeff0_3*dmats2[3][23] + coeff0_4*dmats2[4][23] + coeff0_5*dmats2[5][23] + coeff0_6*dmats2[6][23] + coeff0_7*dmats2[7][23] + coeff0_8*dmats2[8][23] + coeff0_9*dmats2[9][23] + coeff0_10*dmats2[10][23] + coeff0_11*dmats2[11][23] + coeff0_12*dmats2[12][23] + coeff0_13*dmats2[13][23] + coeff0_14*dmats2[14][23] + coeff0_15*dmats2[15][23] + coeff0_16*dmats2[16][23] + coeff0_17*dmats2[17][23] + coeff0_18*dmats2[18][23] + coeff0_19*dmats2[19][23] + coeff0_20*dmats2[20][23] + coeff0_21*dmats2[21][23] + coeff0_22*dmats2[22][23] + coeff0_23*dmats2[23][23] + coeff0_24*dmats2[24][23] + coeff0_25*dmats2[25][23] + coeff0_26*dmats2[26][23] + coeff0_27*dmats2[27][23] + coeff0_28*dmats2[28][23] + coeff0_29*dmats2[29][23] + coeff0_30*dmats2[30][23] + coeff0_31*dmats2[31][23] + coeff0_32*dmats2[32][23] + coeff0_33*dmats2[33][23] + coeff0_34*dmats2[34][23];
          new_coeff0_24 = coeff0_0*dmats2[0][24] + coeff0_1*dmats2[1][24] + coeff0_2*dmats2[2][24] + coeff0_3*dmats2[3][24] + coeff0_4*dmats2[4][24] + coeff0_5*dmats2[5][24] + coeff0_6*dmats2[6][24] + coeff0_7*dmats2[7][24] + coeff0_8*dmats2[8][24] + coeff0_9*dmats2[9][24] + coeff0_10*dmats2[10][24] + coeff0_11*dmats2[11][24] + coeff0_12*dmats2[12][24] + coeff0_13*dmats2[13][24] + coeff0_14*dmats2[14][24] + coeff0_15*dmats2[15][24] + coeff0_16*dmats2[16][24] + coeff0_17*dmats2[17][24] + coeff0_18*dmats2[18][24] + coeff0_19*dmats2[19][24] + coeff0_20*dmats2[20][24] + coeff0_21*dmats2[21][24] + coeff0_22*dmats2[22][24] + coeff0_23*dmats2[23][24] + coeff0_24*dmats2[24][24] + coeff0_25*dmats2[25][24] + coeff0_26*dmats2[26][24] + coeff0_27*dmats2[27][24] + coeff0_28*dmats2[28][24] + coeff0_29*dmats2[29][24] + coeff0_30*dmats2[30][24] + coeff0_31*dmats2[31][24] + coeff0_32*dmats2[32][24] + coeff0_33*dmats2[33][24] + coeff0_34*dmats2[34][24];
          new_coeff0_25 = coeff0_0*dmats2[0][25] + coeff0_1*dmats2[1][25] + coeff0_2*dmats2[2][25] + coeff0_3*dmats2[3][25] + coeff0_4*dmats2[4][25] + coeff0_5*dmats2[5][25] + coeff0_6*dmats2[6][25] + coeff0_7*dmats2[7][25] + coeff0_8*dmats2[8][25] + coeff0_9*dmats2[9][25] + coeff0_10*dmats2[10][25] + coeff0_11*dmats2[11][25] + coeff0_12*dmats2[12][25] + coeff0_13*dmats2[13][25] + coeff0_14*dmats2[14][25] + coeff0_15*dmats2[15][25] + coeff0_16*dmats2[16][25] + coeff0_17*dmats2[17][25] + coeff0_18*dmats2[18][25] + coeff0_19*dmats2[19][25] + coeff0_20*dmats2[20][25] + coeff0_21*dmats2[21][25] + coeff0_22*dmats2[22][25] + coeff0_23*dmats2[23][25] + coeff0_24*dmats2[24][25] + coeff0_25*dmats2[25][25] + coeff0_26*dmats2[26][25] + coeff0_27*dmats2[27][25] + coeff0_28*dmats2[28][25] + coeff0_29*dmats2[29][25] + coeff0_30*dmats2[30][25] + coeff0_31*dmats2[31][25] + coeff0_32*dmats2[32][25] + coeff0_33*dmats2[33][25] + coeff0_34*dmats2[34][25];
          new_coeff0_26 = coeff0_0*dmats2[0][26] + coeff0_1*dmats2[1][26] + coeff0_2*dmats2[2][26] + coeff0_3*dmats2[3][26] + coeff0_4*dmats2[4][26] + coeff0_5*dmats2[5][26] + coeff0_6*dmats2[6][26] + coeff0_7*dmats2[7][26] + coeff0_8*dmats2[8][26] + coeff0_9*dmats2[9][26] + coeff0_10*dmats2[10][26] + coeff0_11*dmats2[11][26] + coeff0_12*dmats2[12][26] + coeff0_13*dmats2[13][26] + coeff0_14*dmats2[14][26] + coeff0_15*dmats2[15][26] + coeff0_16*dmats2[16][26] + coeff0_17*dmats2[17][26] + coeff0_18*dmats2[18][26] + coeff0_19*dmats2[19][26] + coeff0_20*dmats2[20][26] + coeff0_21*dmats2[21][26] + coeff0_22*dmats2[22][26] + coeff0_23*dmats2[23][26] + coeff0_24*dmats2[24][26] + coeff0_25*dmats2[25][26] + coeff0_26*dmats2[26][26] + coeff0_27*dmats2[27][26] + coeff0_28*dmats2[28][26] + coeff0_29*dmats2[29][26] + coeff0_30*dmats2[30][26] + coeff0_31*dmats2[31][26] + coeff0_32*dmats2[32][26] + coeff0_33*dmats2[33][26] + coeff0_34*dmats2[34][26];
          new_coeff0_27 = coeff0_0*dmats2[0][27] + coeff0_1*dmats2[1][27] + coeff0_2*dmats2[2][27] + coeff0_3*dmats2[3][27] + coeff0_4*dmats2[4][27] + coeff0_5*dmats2[5][27] + coeff0_6*dmats2[6][27] + coeff0_7*dmats2[7][27] + coeff0_8*dmats2[8][27] + coeff0_9*dmats2[9][27] + coeff0_10*dmats2[10][27] + coeff0_11*dmats2[11][27] + coeff0_12*dmats2[12][27] + coeff0_13*dmats2[13][27] + coeff0_14*dmats2[14][27] + coeff0_15*dmats2[15][27] + coeff0_16*dmats2[16][27] + coeff0_17*dmats2[17][27] + coeff0_18*dmats2[18][27] + coeff0_19*dmats2[19][27] + coeff0_20*dmats2[20][27] + coeff0_21*dmats2[21][27] + coeff0_22*dmats2[22][27] + coeff0_23*dmats2[23][27] + coeff0_24*dmats2[24][27] + coeff0_25*dmats2[25][27] + coeff0_26*dmats2[26][27] + coeff0_27*dmats2[27][27] + coeff0_28*dmats2[28][27] + coeff0_29*dmats2[29][27] + coeff0_30*dmats2[30][27] + coeff0_31*dmats2[31][27] + coeff0_32*dmats2[32][27] + coeff0_33*dmats2[33][27] + coeff0_34*dmats2[34][27];
          new_coeff0_28 = coeff0_0*dmats2[0][28] + coeff0_1*dmats2[1][28] + coeff0_2*dmats2[2][28] + coeff0_3*dmats2[3][28] + coeff0_4*dmats2[4][28] + coeff0_5*dmats2[5][28] + coeff0_6*dmats2[6][28] + coeff0_7*dmats2[7][28] + coeff0_8*dmats2[8][28] + coeff0_9*dmats2[9][28] + coeff0_10*dmats2[10][28] + coeff0_11*dmats2[11][28] + coeff0_12*dmats2[12][28] + coeff0_13*dmats2[13][28] + coeff0_14*dmats2[14][28] + coeff0_15*dmats2[15][28] + coeff0_16*dmats2[16][28] + coeff0_17*dmats2[17][28] + coeff0_18*dmats2[18][28] + coeff0_19*dmats2[19][28] + coeff0_20*dmats2[20][28] + coeff0_21*dmats2[21][28] + coeff0_22*dmats2[22][28] + coeff0_23*dmats2[23][28] + coeff0_24*dmats2[24][28] + coeff0_25*dmats2[25][28] + coeff0_26*dmats2[26][28] + coeff0_27*dmats2[27][28] + coeff0_28*dmats2[28][28] + coeff0_29*dmats2[29][28] + coeff0_30*dmats2[30][28] + coeff0_31*dmats2[31][28] + coeff0_32*dmats2[32][28] + coeff0_33*dmats2[33][28] + coeff0_34*dmats2[34][28];
          new_coeff0_29 = coeff0_0*dmats2[0][29] + coeff0_1*dmats2[1][29] + coeff0_2*dmats2[2][29] + coeff0_3*dmats2[3][29] + coeff0_4*dmats2[4][29] + coeff0_5*dmats2[5][29] + coeff0_6*dmats2[6][29] + coeff0_7*dmats2[7][29] + coeff0_8*dmats2[8][29] + coeff0_9*dmats2[9][29] + coeff0_10*dmats2[10][29] + coeff0_11*dmats2[11][29] + coeff0_12*dmats2[12][29] + coeff0_13*dmats2[13][29] + coeff0_14*dmats2[14][29] + coeff0_15*dmats2[15][29] + coeff0_16*dmats2[16][29] + coeff0_17*dmats2[17][29] + coeff0_18*dmats2[18][29] + coeff0_19*dmats2[19][29] + coeff0_20*dmats2[20][29] + coeff0_21*dmats2[21][29] + coeff0_22*dmats2[22][29] + coeff0_23*dmats2[23][29] + coeff0_24*dmats2[24][29] + coeff0_25*dmats2[25][29] + coeff0_26*dmats2[26][29] + coeff0_27*dmats2[27][29] + coeff0_28*dmats2[28][29] + coeff0_29*dmats2[29][29] + coeff0_30*dmats2[30][29] + coeff0_31*dmats2[31][29] + coeff0_32*dmats2[32][29] + coeff0_33*dmats2[33][29] + coeff0_34*dmats2[34][29];
          new_coeff0_30 = coeff0_0*dmats2[0][30] + coeff0_1*dmats2[1][30] + coeff0_2*dmats2[2][30] + coeff0_3*dmats2[3][30] + coeff0_4*dmats2[4][30] + coeff0_5*dmats2[5][30] + coeff0_6*dmats2[6][30] + coeff0_7*dmats2[7][30] + coeff0_8*dmats2[8][30] + coeff0_9*dmats2[9][30] + coeff0_10*dmats2[10][30] + coeff0_11*dmats2[11][30] + coeff0_12*dmats2[12][30] + coeff0_13*dmats2[13][30] + coeff0_14*dmats2[14][30] + coeff0_15*dmats2[15][30] + coeff0_16*dmats2[16][30] + coeff0_17*dmats2[17][30] + coeff0_18*dmats2[18][30] + coeff0_19*dmats2[19][30] + coeff0_20*dmats2[20][30] + coeff0_21*dmats2[21][30] + coeff0_22*dmats2[22][30] + coeff0_23*dmats2[23][30] + coeff0_24*dmats2[24][30] + coeff0_25*dmats2[25][30] + coeff0_26*dmats2[26][30] + coeff0_27*dmats2[27][30] + coeff0_28*dmats2[28][30] + coeff0_29*dmats2[29][30] + coeff0_30*dmats2[30][30] + coeff0_31*dmats2[31][30] + coeff0_32*dmats2[32][30] + coeff0_33*dmats2[33][30] + coeff0_34*dmats2[34][30];
          new_coeff0_31 = coeff0_0*dmats2[0][31] + coeff0_1*dmats2[1][31] + coeff0_2*dmats2[2][31] + coeff0_3*dmats2[3][31] + coeff0_4*dmats2[4][31] + coeff0_5*dmats2[5][31] + coeff0_6*dmats2[6][31] + coeff0_7*dmats2[7][31] + coeff0_8*dmats2[8][31] + coeff0_9*dmats2[9][31] + coeff0_10*dmats2[10][31] + coeff0_11*dmats2[11][31] + coeff0_12*dmats2[12][31] + coeff0_13*dmats2[13][31] + coeff0_14*dmats2[14][31] + coeff0_15*dmats2[15][31] + coeff0_16*dmats2[16][31] + coeff0_17*dmats2[17][31] + coeff0_18*dmats2[18][31] + coeff0_19*dmats2[19][31] + coeff0_20*dmats2[20][31] + coeff0_21*dmats2[21][31] + coeff0_22*dmats2[22][31] + coeff0_23*dmats2[23][31] + coeff0_24*dmats2[24][31] + coeff0_25*dmats2[25][31] + coeff0_26*dmats2[26][31] + coeff0_27*dmats2[27][31] + coeff0_28*dmats2[28][31] + coeff0_29*dmats2[29][31] + coeff0_30*dmats2[30][31] + coeff0_31*dmats2[31][31] + coeff0_32*dmats2[32][31] + coeff0_33*dmats2[33][31] + coeff0_34*dmats2[34][31];
          new_coeff0_32 = coeff0_0*dmats2[0][32] + coeff0_1*dmats2[1][32] + coeff0_2*dmats2[2][32] + coeff0_3*dmats2[3][32] + coeff0_4*dmats2[4][32] + coeff0_5*dmats2[5][32] + coeff0_6*dmats2[6][32] + coeff0_7*dmats2[7][32] + coeff0_8*dmats2[8][32] + coeff0_9*dmats2[9][32] + coeff0_10*dmats2[10][32] + coeff0_11*dmats2[11][32] + coeff0_12*dmats2[12][32] + coeff0_13*dmats2[13][32] + coeff0_14*dmats2[14][32] + coeff0_15*dmats2[15][32] + coeff0_16*dmats2[16][32] + coeff0_17*dmats2[17][32] + coeff0_18*dmats2[18][32] + coeff0_19*dmats2[19][32] + coeff0_20*dmats2[20][32] + coeff0_21*dmats2[21][32] + coeff0_22*dmats2[22][32] + coeff0_23*dmats2[23][32] + coeff0_24*dmats2[24][32] + coeff0_25*dmats2[25][32] + coeff0_26*dmats2[26][32] + coeff0_27*dmats2[27][32] + coeff0_28*dmats2[28][32] + coeff0_29*dmats2[29][32] + coeff0_30*dmats2[30][32] + coeff0_31*dmats2[31][32] + coeff0_32*dmats2[32][32] + coeff0_33*dmats2[33][32] + coeff0_34*dmats2[34][32];
          new_coeff0_33 = coeff0_0*dmats2[0][33] + coeff0_1*dmats2[1][33] + coeff0_2*dmats2[2][33] + coeff0_3*dmats2[3][33] + coeff0_4*dmats2[4][33] + coeff0_5*dmats2[5][33] + coeff0_6*dmats2[6][33] + coeff0_7*dmats2[7][33] + coeff0_8*dmats2[8][33] + coeff0_9*dmats2[9][33] + coeff0_10*dmats2[10][33] + coeff0_11*dmats2[11][33] + coeff0_12*dmats2[12][33] + coeff0_13*dmats2[13][33] + coeff0_14*dmats2[14][33] + coeff0_15*dmats2[15][33] + coeff0_16*dmats2[16][33] + coeff0_17*dmats2[17][33] + coeff0_18*dmats2[18][33] + coeff0_19*dmats2[19][33] + coeff0_20*dmats2[20][33] + coeff0_21*dmats2[21][33] + coeff0_22*dmats2[22][33] + coeff0_23*dmats2[23][33] + coeff0_24*dmats2[24][33] + coeff0_25*dmats2[25][33] + coeff0_26*dmats2[26][33] + coeff0_27*dmats2[27][33] + coeff0_28*dmats2[28][33] + coeff0_29*dmats2[29][33] + coeff0_30*dmats2[30][33] + coeff0_31*dmats2[31][33] + coeff0_32*dmats2[32][33] + coeff0_33*dmats2[33][33] + coeff0_34*dmats2[34][33];
          new_coeff0_34 = coeff0_0*dmats2[0][34] + coeff0_1*dmats2[1][34] + coeff0_2*dmats2[2][34] + coeff0_3*dmats2[3][34] + coeff0_4*dmats2[4][34] + coeff0_5*dmats2[5][34] + coeff0_6*dmats2[6][34] + coeff0_7*dmats2[7][34] + coeff0_8*dmats2[8][34] + coeff0_9*dmats2[9][34] + coeff0_10*dmats2[10][34] + coeff0_11*dmats2[11][34] + coeff0_12*dmats2[12][34] + coeff0_13*dmats2[13][34] + coeff0_14*dmats2[14][34] + coeff0_15*dmats2[15][34] + coeff0_16*dmats2[16][34] + coeff0_17*dmats2[17][34] + coeff0_18*dmats2[18][34] + coeff0_19*dmats2[19][34] + coeff0_20*dmats2[20][34] + coeff0_21*dmats2[21][34] + coeff0_22*dmats2[22][34] + coeff0_23*dmats2[23][34] + coeff0_24*dmats2[24][34] + coeff0_25*dmats2[25][34] + coeff0_26*dmats2[26][34] + coeff0_27*dmats2[27][34] + coeff0_28*dmats2[28][34] + coeff0_29*dmats2[29][34] + coeff0_30*dmats2[30][34] + coeff0_31*dmats2[31][34] + coeff0_32*dmats2[32][34] + coeff0_33*dmats2[33][34] + coeff0_34*dmats2[34][34];
        }
    
      }
      // Compute derivatives on reference element as dot product of coefficients and basisvalues
      derivatives[deriv_num] = new_coeff0_0*basisvalue0 + new_coeff0_1*basisvalue1 + new_coeff0_2*basisvalue2 + new_coeff0_3*basisvalue3 + new_coeff0_4*basisvalue4 + new_coeff0_5*basisvalue5 + new_coeff0_6*basisvalue6 + new_coeff0_7*basisvalue7 + new_coeff0_8*basisvalue8 + new_coeff0_9*basisvalue9 + new_coeff0_10*basisvalue10 + new_coeff0_11*basisvalue11 + new_coeff0_12*basisvalue12 + new_coeff0_13*basisvalue13 + new_coeff0_14*basisvalue14 + new_coeff0_15*basisvalue15 + new_coeff0_16*basisvalue16 + new_coeff0_17*basisvalue17 + new_coeff0_18*basisvalue18 + new_coeff0_19*basisvalue19 + new_coeff0_20*basisvalue20 + new_coeff0_21*basisvalue21 + new_coeff0_22*basisvalue22 + new_coeff0_23*basisvalue23 + new_coeff0_24*basisvalue24 + new_coeff0_25*basisvalue25 + new_coeff0_26*basisvalue26 + new_coeff0_27*basisvalue27 + new_coeff0_28*basisvalue28 + new_coeff0_29*basisvalue29 + new_coeff0_30*basisvalue30 + new_coeff0_31*basisvalue31 + new_coeff0_32*basisvalue32 + new_coeff0_33*basisvalue33 + new_coeff0_34*basisvalue34;
    }
    
    // Transform derivatives back to physical element
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        values[row] += transform[row][col]*derivatives[col];
      }
    }
    // Delete pointer to array of derivatives on FIAT element
    delete [] derivatives;
    
    // Delete pointer to array of combinations of derivatives and transform
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      delete [] combinations[row];
      delete [] transform[row];
    }
    
    delete [] combinations;
    delete [] transform;
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis_derivatives() is not yet implemented.");
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // The reference points, direction and weights:
    static const double X[35][1][3] = {{{0, 0, 0}}, {{1, 0, 0}}, {{0, 1, 0}}, {{0, 0, 1}}, {{0, 0.75, 0.25}}, {{0, 0.5, 0.5}}, {{0, 0.25, 0.75}}, {{0.75, 0, 0.25}}, {{0.5, 0, 0.5}}, {{0.25, 0, 0.75}}, {{0.75, 0.25, 0}}, {{0.5, 0.5, 0}}, {{0.25, 0.75, 0}}, {{0, 0, 0.25}}, {{0, 0, 0.5}}, {{0, 0, 0.75}}, {{0, 0.25, 0}}, {{0, 0.5, 0}}, {{0, 0.75, 0}}, {{0.25, 0, 0}}, {{0.5, 0, 0}}, {{0.75, 0, 0}}, {{0.5, 0.25, 0.25}}, {{0.25, 0.5, 0.25}}, {{0.25, 0.25, 0.5}}, {{0, 0.25, 0.25}}, {{0, 0.5, 0.25}}, {{0, 0.25, 0.5}}, {{0.25, 0, 0.25}}, {{0.5, 0, 0.25}}, {{0.25, 0, 0.5}}, {{0.25, 0.25, 0}}, {{0.5, 0.25, 0}}, {{0.25, 0.5, 0}}, {{0.25, 0.25, 0.25}}};
    static const double W[35][1] = {{1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}};
    static const double D[35][1][1] = {{{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}};
    
    const double * const * x = c.coordinates;
    double result = 0.0;
    // Iterate over the points:
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0][0] - X[i][0][1] - X[i][0][2];
    const double w1 = X[i][0][0];
    const double w2 = X[i][0][1];
    const double w3 = X[i][0][2];
    
    // Compute affine mapping y = F(X)
    double y[3];
    y[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0] + w3*x[3][0];
    y[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1] + w3*x[3][1];
    y[2] = w0*x[0][2] + w1*x[1][2] + w2*x[2][2] + w3*x[3][2];
    
    // Evaluate function at physical points
    double values[1];
    f.evaluate(values, y, c);
    
    // Map function values using appropriate mapping
    // Affine map: Do nothing
    
    // Note that we do not map the weights (yet).
    
    // Take directional components
    for(int k = 0; k < 1; k++)
      result += values[k]*D[i][0][k];
    // Multiply by weights
    result *= W[i][0];
    
    return result;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate at vertices and use affine mapping
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new poisson3d_4_0_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class poisson3d_4_0_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  poisson3d_4_0_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~poisson3d_4_0_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', 'tetrahedron', 4)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 35;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_02 = element_coordinates[3][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
    const double J_12 = element_coordinates[3][1] - element_coordinates[0][1];
    const double J_20 = element_coordinates[1][2] - element_coordinates[0][2];
    const double J_21 = element_coordinates[2][2] - element_coordinates[0][2];
    const double J_22 = element_coordinates[3][2] - element_coordinates[0][2];
    
    // Compute sub determinants
    const double d00 = J_11*J_22 - J_12*J_21;
    const double d01 = J_12*J_20 - J_10*J_22;
    const double d02 = J_10*J_21 - J_11*J_20;
    
    const double d10 = J_02*J_21 - J_01*J_22;
    const double d11 = J_00*J_22 - J_02*J_20;
    const double d12 = J_01*J_20 - J_00*J_21;
    
    const double d20 = J_01*J_12 - J_02*J_11;
    const double d21 = J_02*J_10 - J_00*J_12;
    const double d22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d00 + J_10*d10 + J_20*d20;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = d00*(element_coordinates[0][0] - element_coordinates[2][0] - element_coordinates[3][0]) \
                    + d10*(element_coordinates[0][1] - element_coordinates[2][1] - element_coordinates[3][1]) \
                    + d20*(element_coordinates[0][2] - element_coordinates[2][2] - element_coordinates[3][2]);
    
    const double C1 = d01*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[3][0]) \
                    + d11*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[3][1]) \
                    + d21*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[3][2]);
    
    const double C2 = d02*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[2][0]) \
                    + d12*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[2][1]) \
                    + d22*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[2][2]);
    
    // Get coordinates and map to the UFC reference element
    double x = (C0 + d00*coordinates[0] + d10*coordinates[1] + d20*coordinates[2]) / detJ;
    double y = (C1 + d01*coordinates[0] + d11*coordinates[1] + d21*coordinates[2]) / detJ;
    double z = (C2 + d02*coordinates[0] + d12*coordinates[1] + d22*coordinates[2]) / detJ;
    
    // Map coordinates to the reference cube
    if (std::abs(y + z - 1.0) < 1e-14)
      x = 1.0;
    else
      x = -2.0 * x/(y + z - 1.0) - 1.0;
    if (std::abs(z - 1.0) < 1e-14)
      y = -1.0;
    else
      y = 2.0 * y/(1.0 - z) - 1.0;
    z = 2.0 * z - 1.0;
    
    // Reset values
    *values = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    const double scalings_y_4 = scalings_y_3*(0.5 - 0.5*y);
    const double scalings_z_0 = 1;
    const double scalings_z_1 = scalings_z_0*(0.5 - 0.5*z);
    const double scalings_z_2 = scalings_z_1*(0.5 - 0.5*z);
    const double scalings_z_3 = scalings_z_2*(0.5 - 0.5*z);
    const double scalings_z_4 = scalings_z_3*(0.5 - 0.5*z);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    const double psitilde_a_4 = 1.75*x*psitilde_a_3 - 0.75*psitilde_a_2;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_0_4 = 0.0285714285714286*psitilde_bs_0_3 + 1.8*y*psitilde_bs_0_3 - 0.771428571428571*psitilde_bs_0_2;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_1_3 = 0.285714285714286*psitilde_bs_1_2 + 2*y*psitilde_bs_1_2 - 0.714285714285714*psitilde_bs_1_1;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_2_2 = 1.02040816326531*psitilde_bs_2_1 + 2.57142857142857*y*psitilde_bs_2_1 - 0.551020408163265*psitilde_bs_2_0;
    const double psitilde_bs_3_0 = 1;
    const double psitilde_bs_3_1 = 4.5*y + 3.5;
    const double psitilde_bs_4_0 = 1;
    
    // Compute psitilde_cs
    const double psitilde_cs_00_0 = 1;
    const double psitilde_cs_00_1 = 2*z + 1;
    const double psitilde_cs_00_2 = 0.3125*psitilde_cs_00_1 + 1.875*z*psitilde_cs_00_1 - 0.5625*psitilde_cs_00_0;
    const double psitilde_cs_00_3 = 0.155555555555556*psitilde_cs_00_2 + 1.86666666666667*z*psitilde_cs_00_2 - 0.711111111111111*psitilde_cs_00_1;
    const double psitilde_cs_00_4 = 0.09375*psitilde_cs_00_3 + 1.875*z*psitilde_cs_00_3 - 0.78125*psitilde_cs_00_2;
    const double psitilde_cs_01_0 = 1;
    const double psitilde_cs_01_1 = 3*z + 2;
    const double psitilde_cs_01_2 = 0.777777777777778*psitilde_cs_01_1 + 2.33333333333333*z*psitilde_cs_01_1 - 0.555555555555556*psitilde_cs_01_0;
    const double psitilde_cs_01_3 = 0.428571428571429*psitilde_cs_01_2 + 2.14285714285714*z*psitilde_cs_01_2 - 0.714285714285714*psitilde_cs_01_1;
    const double psitilde_cs_02_0 = 1;
    const double psitilde_cs_02_1 = 4*z + 3;
    const double psitilde_cs_02_2 = 1.265625*psitilde_cs_02_1 + 2.8125*z*psitilde_cs_02_1 - 0.546875*psitilde_cs_02_0;
    const double psitilde_cs_03_0 = 1;
    const double psitilde_cs_03_1 = 5*z + 4;
    const double psitilde_cs_04_0 = 1;
    const double psitilde_cs_10_0 = 1;
    const double psitilde_cs_10_1 = 3*z + 2;
    const double psitilde_cs_10_2 = 0.777777777777778*psitilde_cs_10_1 + 2.33333333333333*z*psitilde_cs_10_1 - 0.555555555555556*psitilde_cs_10_0;
    const double psitilde_cs_10_3 = 0.428571428571429*psitilde_cs_10_2 + 2.14285714285714*z*psitilde_cs_10_2 - 0.714285714285714*psitilde_cs_10_1;
    const double psitilde_cs_11_0 = 1;
    const double psitilde_cs_11_1 = 4*z + 3;
    const double psitilde_cs_11_2 = 1.265625*psitilde_cs_11_1 + 2.8125*z*psitilde_cs_11_1 - 0.546875*psitilde_cs_11_0;
    const double psitilde_cs_12_0 = 1;
    const double psitilde_cs_12_1 = 5*z + 4;
    const double psitilde_cs_13_0 = 1;
    const double psitilde_cs_20_0 = 1;
    const double psitilde_cs_20_1 = 4*z + 3;
    const double psitilde_cs_20_2 = 1.265625*psitilde_cs_20_1 + 2.8125*z*psitilde_cs_20_1 - 0.546875*psitilde_cs_20_0;
    const double psitilde_cs_21_0 = 1;
    const double psitilde_cs_21_1 = 5*z + 4;
    const double psitilde_cs_22_0 = 1;
    const double psitilde_cs_30_0 = 1;
    const double psitilde_cs_30_1 = 5*z + 4;
    const double psitilde_cs_31_0 = 1;
    const double psitilde_cs_40_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.866025403784439*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_0;
    const double basisvalue1 = 2.73861278752583*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_0;
    const double basisvalue2 = 1.58113883008419*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_0;
    const double basisvalue3 = 1.11803398874989*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_1;
    const double basisvalue4 = 5.1234753829798*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_0;
    const double basisvalue5 = 3.96862696659689*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_0;
    const double basisvalue6 = 2.29128784747792*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_0;
    const double basisvalue7 = 3.24037034920393*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_1;
    const double basisvalue8 = 1.87082869338697*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_1;
    const double basisvalue9 = 1.3228756555323*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_2;
    const double basisvalue10 = 7.93725393319377*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_0;
    const double basisvalue11 = 6.70820393249937*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_0;
    const double basisvalue12 = 5.19615242270663*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_0;
    const double basisvalue13 = 3*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_0;
    const double basisvalue14 = 5.80947501931113*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_1;
    const double basisvalue15 = 4.5*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_1;
    const double basisvalue16 = 2.59807621135332*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_1;
    const double basisvalue17 = 3.67423461417477*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_2;
    const double basisvalue18 = 2.12132034355964*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_2;
    const double basisvalue19 = 1.5*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_3;
    const double basisvalue20 = 11.1242977306435*psitilde_a_4*scalings_y_4*psitilde_bs_4_0*scalings_z_4*psitilde_cs_40_0;
    const double basisvalue21 = 9.81070843517429*psitilde_a_3*scalings_y_3*psitilde_bs_3_1*scalings_z_4*psitilde_cs_31_0;
    const double basisvalue22 = 8.2915619758885*psitilde_a_2*scalings_y_2*psitilde_bs_2_2*scalings_z_4*psitilde_cs_22_0;
    const double basisvalue23 = 6.42261628933256*psitilde_a_1*scalings_y_1*psitilde_bs_1_3*scalings_z_4*psitilde_cs_13_0;
    const double basisvalue24 = 3.70809924354783*psitilde_a_0*scalings_y_0*psitilde_bs_0_4*scalings_z_4*psitilde_cs_04_0;
    const double basisvalue25 = 8.77496438739212*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_1;
    const double basisvalue26 = 7.41619848709566*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_1;
    const double basisvalue27 = 5.74456264653803*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_1;
    const double basisvalue28 = 3.3166247903554*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_1;
    const double basisvalue29 = 6.42261628933256*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_2;
    const double basisvalue30 = 4.9749371855331*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_2;
    const double basisvalue31 = 2.87228132326901*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_2;
    const double basisvalue32 = 4.06201920231798*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_3;
    const double basisvalue33 = 2.34520787991171*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_3;
    const double basisvalue34 = 1.6583123951777*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_4;
    
    // Table(s) of coefficients
    static const double coefficients0[35][35] = \
    {{-0.0137464349807054, -0.0144900147488139, -0.00836581391578938, -0.00591552374999942, 0, 0, 0, 0, 0, 0, -0.00671936840905293, -0.00567890279999946, -0.00439885919382572, -0.00253968253968254, -0.00491807409042212, -0.00380952380952381, -0.00219942959691286, -0.00311046316543896, -0.0017958267458706, -0.00126984126984129, 0.0136980289516341, 0.0120805260192622, 0.010209907964538, 0.00790856070259326, 0.00456600965054471, 0.0108051509532101, 0.00913201930108942, 0.0070736317340728, 0.00408396318581521, 0.00790856070259324, 0.00612594477872281, 0.0035368158670364, 0.00500181296677924, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807054, 0.0144900147488139, -0.00836581391578937, -0.00591552374999945, 0, 0, 0, 0, 0, 0, 0.00671936840905292, -0.00567890279999946, 0.00439885919382571, -0.00253968253968253, -0.00491807409042211, 0.0038095238095238, -0.00219942959691286, 0.00311046316543895, -0.00179582674587059, -0.00126984126984127, 0.0136980289516341, -0.0120805260192622, 0.010209907964538, -0.00790856070259325, 0.00456600965054471, -0.0108051509532101, 0.00913201930108942, -0.00707363173407281, 0.00408396318581522, 0.00790856070259325, -0.00612594477872282, 0.0035368158670364, -0.00500181296677924, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807054, 0, 0.0167316278315787, -0.00591552374999944, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0101587301587302, 0, 0, -0.00659828879073858, 0, 0.00359165349174119, -0.00126984126984127, 0, 0, 0, 0, 0.0228300482527235, 0, 0, 0, -0.0163358527432608, 0, 0, 0.0106104476011092, 0, -0.0057755961256123, 0.00204198159290761},
    {-0.0137464349807054, 0, 0, 0.0177465712499983, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0126984126984127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0306297238936141},
    {0.0439885919382572, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0, 0.0406349206349206, 0, 0, 0.00439885919382572, 0, -0.0143666139669648, 0.00761904761904762, 0, 0, 0, 0, 0, 0, 0, 0, 0.0367556686723369, 0, 0, -0.0424417904044368, 0, 0.0303218796594646, -0.0122518895574456},
    {-0.0329914439536929, 0, -0.0200779533978945, -0.0141972569999987, 0, 0, -0.00969857289937743, 0, 0.0712696645099798, -0.050395263067897, 0, 0, 0, 0, 0, 0, 0.0461880215351701, 0, 0.0107749604752236, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0495154221385096, 0, -0.0606437593189292, 0.0306297238936141},
    {0.0439885919382572, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0, 0.0359165349174119, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0505364660991076, -0.0408396318581521},
    {0.0439885919382572, 0.0231840235981022, -0.013385302265263, 0.0189296759999982, 0.0433733365754904, -0.0335968420452646, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484216, 0.0268774736362117, -0.0227156111999979, 0.0175954367753029, -0.0101587301587302, 0.00327871606028142, -0.00253968253968254, 0.00146628639794192, -0.0124418526617558, 0.00718330698348239, 0.00761904761904763, 0, 0, 0, 0, 0, 0.0243115896447228, -0.0205470434274512, 0.0159156714016638, -0.00918891716808423, -0.031634242810373, 0.0245037791148913, -0.0141472634681456, 0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.032991443953693, -0.0173880176985767, 0.0100389766989472, -0.0141972569999986, -0.00722888942924839, 0.00559947367421073, -0.00323285763312585, 0.0617213399848368, -0.03563483225499, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, -0.0266666666666667, 0.01539600717839, 0.00933138949631687, -0.00538748023761181, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, -0.0285877423007065, 0.0165051407128366, -0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, 0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0.0311046316543896, -0.017958267458706, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, -0.0335968420452646, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, 0, -0.0117302911835353, 0.0101587301587301, -0.0229510124219699, 0.00761904761904762, -0.0014662863979419, 0.0165891368823411, -0.00718330698348239, -0.00761904761904761, 0, 0.0241610520385245, -0.0357346778758831, 0.0355885231616696, -0.0228300482527235, -0.00270128773830253, -0.0114150241263618, 0.0159156714016638, -0.0112308987609918, 0.00395428035129663, 0.00306297238936141, -0.0035368158670364, -0.00375135972508442, 0.000721949515701537, 0.0020419815929076},
    {-0.0329914439536929, -0.0173880176985767, -0.0100389766989473, 0.0141972569999987, -0.00722888942924838, 0.0615942104163185, -0.0614242950293905, -0.00685792666498185, -0.00395942580611001, 0.00559947367421077, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042211, -0.0266666666666667, 0.0175954367753029, 0.00933138949631687, 0.0053874802376118, -0.00761904761904761, 0, 0, 0.0357346778758831, -0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108941, 0, 0.00408396318581522, 0.0013180934504322, 0.00714693557517662, -0.00471575448938186, -0.00250090648338961, -0.00144389903140308, 0.0020419815929076},
    {0.0439885919382572, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0.0293257279588381, 0.0101587301587301, 0, -0.0101587301587302, -0.0219942959691286, 0.00207364211029263, 0.017958267458706, -0.00761904761904761, 0, 0, 0, 0.0395428035129662, -0.0456600965054471, 0, 0, -0.017684079335182, 0.0142938711503532, 0, 0.00612594477872281, 0, -0.0012504532416948, -0.00360974757850769, 0.0020419815929076},
    {0.043988591938257, -0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0.0433733365754903, 0.0335968420452647, 0.0193971457987549, 0.0274317066599275, 0.01583770322444, 0.0111989473484216, -0.0268774736362117, -0.0227156111999979, -0.0175954367753029, -0.0101587301587302, 0.00327871606028141, 0.00253968253968254, 0.00146628639794192, 0.0124418526617558, 0.00718330698348239, 0.00761904761904762, 0, 0, 0, 0, 0, -0.0243115896447228, -0.0205470434274512, -0.0159156714016638, -0.00918891716808423, -0.031634242810373, -0.0245037791148913, -0.0141472634681456, -0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, 0.0173880176985767, 0.0100389766989472, -0.0141972569999987, -0.00722888942924838, -0.00559947367421076, -0.00323285763312582, -0.0617213399848368, -0.0356348322549899, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, 0.0266666666666667, 0.01539600717839, -0.00933138949631688, -0.00538748023761179, -0.019047619047619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, 0.0285877423007065, 0.0165051407128365, 0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382572, -0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, -0.0311046316543895, -0.017958267458706, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484215, -0.0268774736362117, 0, 0.0117302911835353, 0.0101587301587302, -0.0229510124219699, -0.00761904761904762, -0.00146628639794191, -0.0165891368823411, -0.00718330698348239, -0.00761904761904762, 0, -0.0241610520385245, -0.0357346778758831, -0.0355885231616696, -0.0228300482527235, 0.00270128773830253, -0.0114150241263618, -0.0159156714016638, -0.0112308987609918, 0.00395428035129663, -0.00306297238936141, -0.0035368158670364, 0.00375135972508442, 0.000721949515701537, 0.0020419815929076},
    {-0.0329914439536929, 0.0173880176985767, -0.0100389766989473, 0.0141972569999987, -0.00722888942924837, -0.0615942104163185, -0.0614242950293905, 0.00685792666498186, -0.00395942580610999, 0.00559947367421076, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042212, 0.0266666666666667, 0.0175954367753029, -0.00933138949631687, 0.0053874802376118, -0.00761904761904762, 0, 0, 0.0357346778758831, 0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108942, 0, 0.00408396318581522, 0.00131809345043221, -0.00714693557517662, -0.00471575448938187, 0.00250090648338962, -0.00144389903140308, 0.00204198159290761},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, -0.0293257279588381, 0.0101587301587301, 0, 0.0101587301587302, -0.0219942959691286, -0.00207364211029264, 0.017958267458706, -0.00761904761904762, 0, 0, 0, -0.0395428035129662, -0.0456600965054471, 0, 0, 0.017684079335182, 0.0142938711503532, 0, -0.00612594477872281, 0, 0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.0439885919382573, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0134387368181058, -0.0113578055999989, -0.0205280095711867, -0.0152380952380952, -0.00983614818084423, -0.0177777777777778, -0.0131965775814772, -0.0145154947720485, -0.0107749604752236, -0.00761904761904762, -0.0547921158065365, -0.0241610520385245, -0.00510495398226901, 0.00395428035129662, 0.00456600965054471, -0.0216103019064202, -0.00456600965054471, 0.0035368158670364, 0.00408396318581522, -0.00395428035129662, 0.00306297238936141, 0.0035368158670364, 0.00250090648338962, 0.00288779806280615, 0.00204198159290761},
    {-0.0329914439536929, 0, 0.0200779533978945, 0.0141972569999987, -0.0867466731509807, 0, 0.00969857289937743, 0, 0.00791885161221999, 0.00559947367421078, 0, 0.0340734167999968, 0, -0.0152380952380952, 0.0295084445425327, 0, -0.0131965775814772, 0, -0.0107749604752236, -0.00761904761904762, 0.0821881737098047, 0, -0.010209907964538, 0, 0.00456600965054471, 0, -0.00913201930108942, 0, 0.00408396318581521, -0.00790856070259325, 0, 0.0035368158670364, 0, 0.00288779806280615, 0.0020419815929076},
    {0.0439885919382571, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754904, -0.0335968420452646, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, -0.0134387368181059, -0.0113578055999989, 0.0205280095711867, -0.0152380952380952, -0.00983614818084423, 0.0177777777777778, -0.0131965775814772, 0.0145154947720485, -0.0107749604752236, -0.00761904761904762, -0.0547921158065365, 0.0241610520385245, -0.00510495398226901, -0.00395428035129662, 0.00456600965054471, 0.0216103019064202, -0.00456600965054471, -0.0035368158670364, 0.00408396318581521, -0.00395428035129662, -0.0030629723893614, 0.0035368158670364, -0.00250090648338962, 0.00288779806280615, 0.0020419815929076},
    {0.0439885919382573, 0.139104141588614, -0.0803118135915779, -0.0567890279999946, 0.0578311154339871, 0.0335968420452646, -0.0420271492306356, 0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, -0.0586514559176763, 0.0406349206349207, 0.0393445927233769, 0.00253968253968253, -0.0109971479845643, -0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, -0.053052238005546, 0.0367556686723369, -0.0105447476034577, -0.0245037791148912, 0.0235787724469093, 0.0175063453837273, 0, -0.0122518895574456},
    {0.0439885919382571, 0, 0.160623627183156, -0.0567890279999947, 0, 0.0783926314389508, 0.00969857289937743, -0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, 0.0586514559176763, -0.060952380952381, 0, 0.033015873015873, 0.0241937255660415, -0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, 0.053052238005546, -0.0551335030085054, 0, -0.0326717054865217, 0.0141472634681456, 0.00875317269186366, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382573, 0, 0, 0.170367083999984, 0, -0.0111989473484215, 0.00969857289937744, 0.0822951199797824, 0.0475131096733199, -0.0167984210226323, 0, 0, 0, 0, 0, 0.0533333333333333, -0.0461880215351701, 0.0435464843161454, 0.0251415744421884, -0.0825396825396825, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0571754846014129, -0.0495154221385096, -0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, 0.0578311154339871, -0.0335968420452646, -0.0420271492306356, -0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, 0.0586514559176763, 0.0406349206349206, 0.0393445927233769, -0.00253968253968253, -0.0109971479845643, 0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, 0.053052238005546, 0.0367556686723369, -0.0105447476034577, 0.0245037791148913, 0.0235787724469093, -0.0175063453837273, 0, -0.0122518895574456},
    {0.0439885919382571, 0, 0.160623627183156, -0.0567890279999947, 0, -0.0783926314389508, 0.00969857289937743, 0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, -0.0586514559176763, -0.060952380952381, 0, -0.033015873015873, 0.0241937255660415, 0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, -0.053052238005546, -0.0551335030085054, 0, 0.0326717054865217, 0.0141472634681456, -0.00875317269186366, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382574, 0, 0, 0.170367083999984, 0, 0.0111989473484216, 0.00969857289937746, -0.0822951199797824, 0.0475131096733199, -0.0167984210226323, 0, 0, 0, 0, 0, -0.0533333333333333, -0.0461880215351701, -0.0435464843161454, 0.0251415744421884, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.057175484601413, -0.0495154221385096, 0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754904, 0.0447957893936862, 0.0484928644968872, -0.0548634133198549, 0, -0.0167984210226323, 0.0806324209086351, 0.0227156111999978, -0.00586514559176761, -0.0101587301587302, -0.00327871606028142, 0.0304761904761905, 0.0271262983619253, 0.045620126426438, 0.0430998419008943, 0.0393650793650793, 0, 0, 0, 0, 0, 0.0729347689341683, 0.0205470434274512, -0.0053052238005546, -0.00918891716808422, 0.031634242810373, -0.00816792637163041, -0.0141472634681456, -0.00875317269186366, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754904, -0.0447957893936862, 0.0484928644968872, 0.0548634133198549, 0, -0.0167984210226323, -0.0806324209086351, 0.0227156111999979, 0.00586514559176762, -0.0101587301587302, -0.00327871606028142, -0.0304761904761905, 0.0271262983619253, -0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, -0.0729347689341683, 0.0205470434274512, 0.0053052238005546, -0.00918891716808422, 0.031634242810373, 0.00816792637163041, -0.0141472634681456, 0.00875317269186366, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0.0144577788584968, 0, -0.00323285763312579, 0, -0.0950262193466398, -0.0167984210226323, 0, 0, 0, 0, -0.0688530372659096, 0, 0.01539600717839, 0, -0.0502831488843767, -0.0825396825396825, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0738132332242036, 0, 0.0165051407128365, 0, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754904, -0.0447957893936862, -0.00969857289937743, 0.0548634133198549, 0.0316754064488799, 0.0391963157194754, 0.0806324209086352, 0, 0.0527863103259087, 0.060952380952381, 0.0229510124219699, 0.0101587301587302, 0.0168622935763319, -0.0124418526617558, -0.00718330698348239, -0.013968253968254, 0, 0.0724831561155734, 0.0357346778758831, -0.0118628410538899, -0.0228300482527235, -0.00810386321490759, 0.0114150241263618, -0.00530522380055459, -0.0112308987609918, -0.00395428035129662, -0.0010209907964538, -0.0035368158670364, 0.00125045324169481, 0.000721949515701534, 0.00204198159290761},
    {0.0439885919382572, 0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754904, 0.0447957893936862, -0.00969857289937744, -0.0548634133198549, 0.0316754064488799, 0.0391963157194754, -0.0806324209086351, 0, -0.0527863103259086, 0.060952380952381, 0.0229510124219699, -0.0101587301587302, 0.0168622935763319, 0.0124418526617558, -0.00718330698348239, -0.013968253968254, 0, -0.0724831561155734, 0.0357346778758831, 0.0118628410538899, -0.0228300482527235, 0.00810386321490759, 0.0114150241263618, 0.0053052238005546, -0.0112308987609918, -0.00395428035129663, 0.0010209907964538, -0.0035368158670364, -0.00125045324169481, 0.000721949515701532, 0.0020419815929076},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0.0144577788584968, 0, -0.0614242950293905, 0, -0.0633508128977598, 0.0391963157194754, 0, -0.0681468335999936, 0, -0.0914285714285714, 0.00983614818084423, 0, 0.0285925847598672, 0, 0.0143666139669648, -0.013968253968254, 0, 0, -0.0714693557517662, 0, 0.0456600965054471, 0, 0.0182640386021788, 0, 0.00408396318581519, -0.00263618690086442, 0, -0.00471575448938187, 0, -0.00144389903140307, 0.0020419815929076},
    {0.351908735506058, 0, 0, 0, -0.115662230867974, 0, -0.129314305325033, 0, 0, -0.134387368181059, 0, -0.0908624447999914, 0, 0.0406349206349207, -0.0786891854467539, 0, -0.0879771838765144, 0, 0, 0.0711111111111111, 0, 0, 0, 0, 0, 0, -0.0821881737098047, 0, 0.0367556686723369, 0.0210894952069153, 0, 0.0235787724469093, 0, 0, -0.0122518895574456}};
    
    // Extract relevant coefficients
    const double coeff0_0 = coefficients0[dof][0];
    const double coeff0_1 = coefficients0[dof][1];
    const double coeff0_2 = coefficients0[dof][2];
    const double coeff0_3 = coefficients0[dof][3];
    const double coeff0_4 = coefficients0[dof][4];
    const double coeff0_5 = coefficients0[dof][5];
    const double coeff0_6 = coefficients0[dof][6];
    const double coeff0_7 = coefficients0[dof][7];
    const double coeff0_8 = coefficients0[dof][8];
    const double coeff0_9 = coefficients0[dof][9];
    const double coeff0_10 = coefficients0[dof][10];
    const double coeff0_11 = coefficients0[dof][11];
    const double coeff0_12 = coefficients0[dof][12];
    const double coeff0_13 = coefficients0[dof][13];
    const double coeff0_14 = coefficients0[dof][14];
    const double coeff0_15 = coefficients0[dof][15];
    const double coeff0_16 = coefficients0[dof][16];
    const double coeff0_17 = coefficients0[dof][17];
    const double coeff0_18 = coefficients0[dof][18];
    const double coeff0_19 = coefficients0[dof][19];
    const double coeff0_20 = coefficients0[dof][20];
    const double coeff0_21 = coefficients0[dof][21];
    const double coeff0_22 = coefficients0[dof][22];
    const double coeff0_23 = coefficients0[dof][23];
    const double coeff0_24 = coefficients0[dof][24];
    const double coeff0_25 = coefficients0[dof][25];
    const double coeff0_26 = coefficients0[dof][26];
    const double coeff0_27 = coefficients0[dof][27];
    const double coeff0_28 = coefficients0[dof][28];
    const double coeff0_29 = coefficients0[dof][29];
    const double coeff0_30 = coefficients0[dof][30];
    const double coeff0_31 = coefficients0[dof][31];
    const double coeff0_32 = coefficients0[dof][32];
    const double coeff0_33 = coefficients0[dof][33];
    const double coeff0_34 = coefficients0[dof][34];
    
    // Compute value(s)
    *values = coeff0_0*basisvalue0 + coeff0_1*basisvalue1 + coeff0_2*basisvalue2 + coeff0_3*basisvalue3 + coeff0_4*basisvalue4 + coeff0_5*basisvalue5 + coeff0_6*basisvalue6 + coeff0_7*basisvalue7 + coeff0_8*basisvalue8 + coeff0_9*basisvalue9 + coeff0_10*basisvalue10 + coeff0_11*basisvalue11 + coeff0_12*basisvalue12 + coeff0_13*basisvalue13 + coeff0_14*basisvalue14 + coeff0_15*basisvalue15 + coeff0_16*basisvalue16 + coeff0_17*basisvalue17 + coeff0_18*basisvalue18 + coeff0_19*basisvalue19 + coeff0_20*basisvalue20 + coeff0_21*basisvalue21 + coeff0_22*basisvalue22 + coeff0_23*basisvalue23 + coeff0_24*basisvalue24 + coeff0_25*basisvalue25 + coeff0_26*basisvalue26 + coeff0_27*basisvalue27 + coeff0_28*basisvalue28 + coeff0_29*basisvalue29 + coeff0_30*basisvalue30 + coeff0_31*basisvalue31 + coeff0_32*basisvalue32 + coeff0_33*basisvalue33 + coeff0_34*basisvalue34;
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis() is not yet implemented.");
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_02 = element_coordinates[3][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
    const double J_12 = element_coordinates[3][1] - element_coordinates[0][1];
    const double J_20 = element_coordinates[1][2] - element_coordinates[0][2];
    const double J_21 = element_coordinates[2][2] - element_coordinates[0][2];
    const double J_22 = element_coordinates[3][2] - element_coordinates[0][2];
    
    // Compute sub determinants
    const double d00 = J_11*J_22 - J_12*J_21;
    const double d01 = J_12*J_20 - J_10*J_22;
    const double d02 = J_10*J_21 - J_11*J_20;
    
    const double d10 = J_02*J_21 - J_01*J_22;
    const double d11 = J_00*J_22 - J_02*J_20;
    const double d12 = J_01*J_20 - J_00*J_21;
    
    const double d20 = J_01*J_12 - J_02*J_11;
    const double d21 = J_02*J_10 - J_00*J_12;
    const double d22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d00 + J_10*d10 + J_20*d20;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = d00*(element_coordinates[0][0] - element_coordinates[2][0] - element_coordinates[3][0]) \
                    + d10*(element_coordinates[0][1] - element_coordinates[2][1] - element_coordinates[3][1]) \
                    + d20*(element_coordinates[0][2] - element_coordinates[2][2] - element_coordinates[3][2]);
    
    const double C1 = d01*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[3][0]) \
                    + d11*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[3][1]) \
                    + d21*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[3][2]);
    
    const double C2 = d02*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[2][0]) \
                    + d12*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[2][1]) \
                    + d22*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[2][2]);
    
    // Get coordinates and map to the UFC reference element
    double x = (C0 + d00*coordinates[0] + d10*coordinates[1] + d20*coordinates[2]) / detJ;
    double y = (C1 + d01*coordinates[0] + d11*coordinates[1] + d21*coordinates[2]) / detJ;
    double z = (C2 + d02*coordinates[0] + d12*coordinates[1] + d22*coordinates[2]) / detJ;
    
    // Map coordinates to the reference cube
    if (std::abs(y + z - 1.0) < 1e-14)
      x = 1.0;
    else
      x = -2.0 * x/(y + z - 1.0) - 1.0;
    if (std::abs(z - 1.0) < 1e-14)
      y = -1.0;
    else
      y = 2.0 * y/(1.0 - z) - 1.0;
    z = 2.0 * z - 1.0;
    
    // Compute number of derivatives
    unsigned int num_derivatives = 1;
    
    for (unsigned int j = 0; j < n; j++)
      num_derivatives *= 3;
    
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      combinations[j] = new unsigned int [n];
      for (unsigned int k = 0; k < n; k++)
        combinations[j][k] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] ={{d00 / detJ, d10 / detJ, d20 / detJ}, {d01 / detJ, d11 / detJ, d21 / detJ}, {d02 / detJ, d12 / detJ, d22 / detJ}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values
    for (unsigned int j = 0; j < 1*num_derivatives; j++)
      values[j] = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    const double scalings_y_4 = scalings_y_3*(0.5 - 0.5*y);
    const double scalings_z_0 = 1;
    const double scalings_z_1 = scalings_z_0*(0.5 - 0.5*z);
    const double scalings_z_2 = scalings_z_1*(0.5 - 0.5*z);
    const double scalings_z_3 = scalings_z_2*(0.5 - 0.5*z);
    const double scalings_z_4 = scalings_z_3*(0.5 - 0.5*z);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    const double psitilde_a_4 = 1.75*x*psitilde_a_3 - 0.75*psitilde_a_2;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_0_4 = 0.0285714285714286*psitilde_bs_0_3 + 1.8*y*psitilde_bs_0_3 - 0.771428571428571*psitilde_bs_0_2;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_1_3 = 0.285714285714286*psitilde_bs_1_2 + 2*y*psitilde_bs_1_2 - 0.714285714285714*psitilde_bs_1_1;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_2_2 = 1.02040816326531*psitilde_bs_2_1 + 2.57142857142857*y*psitilde_bs_2_1 - 0.551020408163265*psitilde_bs_2_0;
    const double psitilde_bs_3_0 = 1;
    const double psitilde_bs_3_1 = 4.5*y + 3.5;
    const double psitilde_bs_4_0 = 1;
    
    // Compute psitilde_cs
    const double psitilde_cs_00_0 = 1;
    const double psitilde_cs_00_1 = 2*z + 1;
    const double psitilde_cs_00_2 = 0.3125*psitilde_cs_00_1 + 1.875*z*psitilde_cs_00_1 - 0.5625*psitilde_cs_00_0;
    const double psitilde_cs_00_3 = 0.155555555555556*psitilde_cs_00_2 + 1.86666666666667*z*psitilde_cs_00_2 - 0.711111111111111*psitilde_cs_00_1;
    const double psitilde_cs_00_4 = 0.09375*psitilde_cs_00_3 + 1.875*z*psitilde_cs_00_3 - 0.78125*psitilde_cs_00_2;
    const double psitilde_cs_01_0 = 1;
    const double psitilde_cs_01_1 = 3*z + 2;
    const double psitilde_cs_01_2 = 0.777777777777778*psitilde_cs_01_1 + 2.33333333333333*z*psitilde_cs_01_1 - 0.555555555555556*psitilde_cs_01_0;
    const double psitilde_cs_01_3 = 0.428571428571429*psitilde_cs_01_2 + 2.14285714285714*z*psitilde_cs_01_2 - 0.714285714285714*psitilde_cs_01_1;
    const double psitilde_cs_02_0 = 1;
    const double psitilde_cs_02_1 = 4*z + 3;
    const double psitilde_cs_02_2 = 1.265625*psitilde_cs_02_1 + 2.8125*z*psitilde_cs_02_1 - 0.546875*psitilde_cs_02_0;
    const double psitilde_cs_03_0 = 1;
    const double psitilde_cs_03_1 = 5*z + 4;
    const double psitilde_cs_04_0 = 1;
    const double psitilde_cs_10_0 = 1;
    const double psitilde_cs_10_1 = 3*z + 2;
    const double psitilde_cs_10_2 = 0.777777777777778*psitilde_cs_10_1 + 2.33333333333333*z*psitilde_cs_10_1 - 0.555555555555556*psitilde_cs_10_0;
    const double psitilde_cs_10_3 = 0.428571428571429*psitilde_cs_10_2 + 2.14285714285714*z*psitilde_cs_10_2 - 0.714285714285714*psitilde_cs_10_1;
    const double psitilde_cs_11_0 = 1;
    const double psitilde_cs_11_1 = 4*z + 3;
    const double psitilde_cs_11_2 = 1.265625*psitilde_cs_11_1 + 2.8125*z*psitilde_cs_11_1 - 0.546875*psitilde_cs_11_0;
    const double psitilde_cs_12_0 = 1;
    const double psitilde_cs_12_1 = 5*z + 4;
    const double psitilde_cs_13_0 = 1;
    const double psitilde_cs_20_0 = 1;
    const double psitilde_cs_20_1 = 4*z + 3;
    const double psitilde_cs_20_2 = 1.265625*psitilde_cs_20_1 + 2.8125*z*psitilde_cs_20_1 - 0.546875*psitilde_cs_20_0;
    const double psitilde_cs_21_0 = 1;
    const double psitilde_cs_21_1 = 5*z + 4;
    const double psitilde_cs_22_0 = 1;
    const double psitilde_cs_30_0 = 1;
    const double psitilde_cs_30_1 = 5*z + 4;
    const double psitilde_cs_31_0 = 1;
    const double psitilde_cs_40_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.866025403784439*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_0;
    const double basisvalue1 = 2.73861278752583*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_0;
    const double basisvalue2 = 1.58113883008419*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_0;
    const double basisvalue3 = 1.11803398874989*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_1;
    const double basisvalue4 = 5.1234753829798*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_0;
    const double basisvalue5 = 3.96862696659689*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_0;
    const double basisvalue6 = 2.29128784747792*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_0;
    const double basisvalue7 = 3.24037034920393*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_1;
    const double basisvalue8 = 1.87082869338697*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_1;
    const double basisvalue9 = 1.3228756555323*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_2;
    const double basisvalue10 = 7.93725393319377*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_0;
    const double basisvalue11 = 6.70820393249937*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_0;
    const double basisvalue12 = 5.19615242270663*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_0;
    const double basisvalue13 = 3*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_0;
    const double basisvalue14 = 5.80947501931113*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_1;
    const double basisvalue15 = 4.5*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_1;
    const double basisvalue16 = 2.59807621135332*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_1;
    const double basisvalue17 = 3.67423461417477*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_2;
    const double basisvalue18 = 2.12132034355964*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_2;
    const double basisvalue19 = 1.5*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_3;
    const double basisvalue20 = 11.1242977306435*psitilde_a_4*scalings_y_4*psitilde_bs_4_0*scalings_z_4*psitilde_cs_40_0;
    const double basisvalue21 = 9.81070843517429*psitilde_a_3*scalings_y_3*psitilde_bs_3_1*scalings_z_4*psitilde_cs_31_0;
    const double basisvalue22 = 8.2915619758885*psitilde_a_2*scalings_y_2*psitilde_bs_2_2*scalings_z_4*psitilde_cs_22_0;
    const double basisvalue23 = 6.42261628933256*psitilde_a_1*scalings_y_1*psitilde_bs_1_3*scalings_z_4*psitilde_cs_13_0;
    const double basisvalue24 = 3.70809924354783*psitilde_a_0*scalings_y_0*psitilde_bs_0_4*scalings_z_4*psitilde_cs_04_0;
    const double basisvalue25 = 8.77496438739212*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_1;
    const double basisvalue26 = 7.41619848709566*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_1;
    const double basisvalue27 = 5.74456264653803*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_1;
    const double basisvalue28 = 3.3166247903554*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_1;
    const double basisvalue29 = 6.42261628933256*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_2;
    const double basisvalue30 = 4.9749371855331*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_2;
    const double basisvalue31 = 2.87228132326901*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_2;
    const double basisvalue32 = 4.06201920231798*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_3;
    const double basisvalue33 = 2.34520787991171*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_3;
    const double basisvalue34 = 1.6583123951777*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_4;
    
    // Table(s) of coefficients
    static const double coefficients0[35][35] = \
    {{-0.0137464349807054, -0.0144900147488139, -0.00836581391578938, -0.00591552374999942, 0, 0, 0, 0, 0, 0, -0.00671936840905293, -0.00567890279999946, -0.00439885919382572, -0.00253968253968254, -0.00491807409042212, -0.00380952380952381, -0.00219942959691286, -0.00311046316543896, -0.0017958267458706, -0.00126984126984129, 0.0136980289516341, 0.0120805260192622, 0.010209907964538, 0.00790856070259326, 0.00456600965054471, 0.0108051509532101, 0.00913201930108942, 0.0070736317340728, 0.00408396318581521, 0.00790856070259324, 0.00612594477872281, 0.0035368158670364, 0.00500181296677924, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807054, 0.0144900147488139, -0.00836581391578937, -0.00591552374999945, 0, 0, 0, 0, 0, 0, 0.00671936840905292, -0.00567890279999946, 0.00439885919382571, -0.00253968253968253, -0.00491807409042211, 0.0038095238095238, -0.00219942959691286, 0.00311046316543895, -0.00179582674587059, -0.00126984126984127, 0.0136980289516341, -0.0120805260192622, 0.010209907964538, -0.00790856070259325, 0.00456600965054471, -0.0108051509532101, 0.00913201930108942, -0.00707363173407281, 0.00408396318581522, 0.00790856070259325, -0.00612594477872282, 0.0035368158670364, -0.00500181296677924, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807054, 0, 0.0167316278315787, -0.00591552374999944, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0101587301587302, 0, 0, -0.00659828879073858, 0, 0.00359165349174119, -0.00126984126984127, 0, 0, 0, 0, 0.0228300482527235, 0, 0, 0, -0.0163358527432608, 0, 0, 0.0106104476011092, 0, -0.0057755961256123, 0.00204198159290761},
    {-0.0137464349807054, 0, 0, 0.0177465712499983, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0126984126984127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0306297238936141},
    {0.0439885919382572, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0, 0.0406349206349206, 0, 0, 0.00439885919382572, 0, -0.0143666139669648, 0.00761904761904762, 0, 0, 0, 0, 0, 0, 0, 0, 0.0367556686723369, 0, 0, -0.0424417904044368, 0, 0.0303218796594646, -0.0122518895574456},
    {-0.0329914439536929, 0, -0.0200779533978945, -0.0141972569999987, 0, 0, -0.00969857289937743, 0, 0.0712696645099798, -0.050395263067897, 0, 0, 0, 0, 0, 0, 0.0461880215351701, 0, 0.0107749604752236, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0495154221385096, 0, -0.0606437593189292, 0.0306297238936141},
    {0.0439885919382572, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0, 0.0359165349174119, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0505364660991076, -0.0408396318581521},
    {0.0439885919382572, 0.0231840235981022, -0.013385302265263, 0.0189296759999982, 0.0433733365754904, -0.0335968420452646, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484216, 0.0268774736362117, -0.0227156111999979, 0.0175954367753029, -0.0101587301587302, 0.00327871606028142, -0.00253968253968254, 0.00146628639794192, -0.0124418526617558, 0.00718330698348239, 0.00761904761904763, 0, 0, 0, 0, 0, 0.0243115896447228, -0.0205470434274512, 0.0159156714016638, -0.00918891716808423, -0.031634242810373, 0.0245037791148913, -0.0141472634681456, 0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.032991443953693, -0.0173880176985767, 0.0100389766989472, -0.0141972569999986, -0.00722888942924839, 0.00559947367421073, -0.00323285763312585, 0.0617213399848368, -0.03563483225499, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, -0.0266666666666667, 0.01539600717839, 0.00933138949631687, -0.00538748023761181, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, -0.0285877423007065, 0.0165051407128366, -0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, 0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0.0311046316543896, -0.017958267458706, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, -0.0335968420452646, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, 0, -0.0117302911835353, 0.0101587301587301, -0.0229510124219699, 0.00761904761904762, -0.0014662863979419, 0.0165891368823411, -0.00718330698348239, -0.00761904761904761, 0, 0.0241610520385245, -0.0357346778758831, 0.0355885231616696, -0.0228300482527235, -0.00270128773830253, -0.0114150241263618, 0.0159156714016638, -0.0112308987609918, 0.00395428035129663, 0.00306297238936141, -0.0035368158670364, -0.00375135972508442, 0.000721949515701537, 0.0020419815929076},
    {-0.0329914439536929, -0.0173880176985767, -0.0100389766989473, 0.0141972569999987, -0.00722888942924838, 0.0615942104163185, -0.0614242950293905, -0.00685792666498185, -0.00395942580611001, 0.00559947367421077, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042211, -0.0266666666666667, 0.0175954367753029, 0.00933138949631687, 0.0053874802376118, -0.00761904761904761, 0, 0, 0.0357346778758831, -0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108941, 0, 0.00408396318581522, 0.0013180934504322, 0.00714693557517662, -0.00471575448938186, -0.00250090648338961, -0.00144389903140308, 0.0020419815929076},
    {0.0439885919382572, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0.0293257279588381, 0.0101587301587301, 0, -0.0101587301587302, -0.0219942959691286, 0.00207364211029263, 0.017958267458706, -0.00761904761904761, 0, 0, 0, 0.0395428035129662, -0.0456600965054471, 0, 0, -0.017684079335182, 0.0142938711503532, 0, 0.00612594477872281, 0, -0.0012504532416948, -0.00360974757850769, 0.0020419815929076},
    {0.043988591938257, -0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0.0433733365754903, 0.0335968420452647, 0.0193971457987549, 0.0274317066599275, 0.01583770322444, 0.0111989473484216, -0.0268774736362117, -0.0227156111999979, -0.0175954367753029, -0.0101587301587302, 0.00327871606028141, 0.00253968253968254, 0.00146628639794192, 0.0124418526617558, 0.00718330698348239, 0.00761904761904762, 0, 0, 0, 0, 0, -0.0243115896447228, -0.0205470434274512, -0.0159156714016638, -0.00918891716808423, -0.031634242810373, -0.0245037791148913, -0.0141472634681456, -0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, 0.0173880176985767, 0.0100389766989472, -0.0141972569999987, -0.00722888942924838, -0.00559947367421076, -0.00323285763312582, -0.0617213399848368, -0.0356348322549899, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, 0.0266666666666667, 0.01539600717839, -0.00933138949631688, -0.00538748023761179, -0.019047619047619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, 0.0285877423007065, 0.0165051407128365, 0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382572, -0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, -0.0311046316543895, -0.017958267458706, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484215, -0.0268774736362117, 0, 0.0117302911835353, 0.0101587301587302, -0.0229510124219699, -0.00761904761904762, -0.00146628639794191, -0.0165891368823411, -0.00718330698348239, -0.00761904761904762, 0, -0.0241610520385245, -0.0357346778758831, -0.0355885231616696, -0.0228300482527235, 0.00270128773830253, -0.0114150241263618, -0.0159156714016638, -0.0112308987609918, 0.00395428035129663, -0.00306297238936141, -0.0035368158670364, 0.00375135972508442, 0.000721949515701537, 0.0020419815929076},
    {-0.0329914439536929, 0.0173880176985767, -0.0100389766989473, 0.0141972569999987, -0.00722888942924837, -0.0615942104163185, -0.0614242950293905, 0.00685792666498186, -0.00395942580610999, 0.00559947367421076, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042212, 0.0266666666666667, 0.0175954367753029, -0.00933138949631687, 0.0053874802376118, -0.00761904761904762, 0, 0, 0.0357346778758831, 0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108942, 0, 0.00408396318581522, 0.00131809345043221, -0.00714693557517662, -0.00471575448938187, 0.00250090648338962, -0.00144389903140308, 0.00204198159290761},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, -0.0293257279588381, 0.0101587301587301, 0, 0.0101587301587302, -0.0219942959691286, -0.00207364211029264, 0.017958267458706, -0.00761904761904762, 0, 0, 0, -0.0395428035129662, -0.0456600965054471, 0, 0, 0.017684079335182, 0.0142938711503532, 0, -0.00612594477872281, 0, 0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.0439885919382573, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0134387368181058, -0.0113578055999989, -0.0205280095711867, -0.0152380952380952, -0.00983614818084423, -0.0177777777777778, -0.0131965775814772, -0.0145154947720485, -0.0107749604752236, -0.00761904761904762, -0.0547921158065365, -0.0241610520385245, -0.00510495398226901, 0.00395428035129662, 0.00456600965054471, -0.0216103019064202, -0.00456600965054471, 0.0035368158670364, 0.00408396318581522, -0.00395428035129662, 0.00306297238936141, 0.0035368158670364, 0.00250090648338962, 0.00288779806280615, 0.00204198159290761},
    {-0.0329914439536929, 0, 0.0200779533978945, 0.0141972569999987, -0.0867466731509807, 0, 0.00969857289937743, 0, 0.00791885161221999, 0.00559947367421078, 0, 0.0340734167999968, 0, -0.0152380952380952, 0.0295084445425327, 0, -0.0131965775814772, 0, -0.0107749604752236, -0.00761904761904762, 0.0821881737098047, 0, -0.010209907964538, 0, 0.00456600965054471, 0, -0.00913201930108942, 0, 0.00408396318581521, -0.00790856070259325, 0, 0.0035368158670364, 0, 0.00288779806280615, 0.0020419815929076},
    {0.0439885919382571, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754904, -0.0335968420452646, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, -0.0134387368181059, -0.0113578055999989, 0.0205280095711867, -0.0152380952380952, -0.00983614818084423, 0.0177777777777778, -0.0131965775814772, 0.0145154947720485, -0.0107749604752236, -0.00761904761904762, -0.0547921158065365, 0.0241610520385245, -0.00510495398226901, -0.00395428035129662, 0.00456600965054471, 0.0216103019064202, -0.00456600965054471, -0.0035368158670364, 0.00408396318581521, -0.00395428035129662, -0.0030629723893614, 0.0035368158670364, -0.00250090648338962, 0.00288779806280615, 0.0020419815929076},
    {0.0439885919382573, 0.139104141588614, -0.0803118135915779, -0.0567890279999946, 0.0578311154339871, 0.0335968420452646, -0.0420271492306356, 0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, -0.0586514559176763, 0.0406349206349207, 0.0393445927233769, 0.00253968253968253, -0.0109971479845643, -0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, -0.053052238005546, 0.0367556686723369, -0.0105447476034577, -0.0245037791148912, 0.0235787724469093, 0.0175063453837273, 0, -0.0122518895574456},
    {0.0439885919382571, 0, 0.160623627183156, -0.0567890279999947, 0, 0.0783926314389508, 0.00969857289937743, -0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, 0.0586514559176763, -0.060952380952381, 0, 0.033015873015873, 0.0241937255660415, -0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, 0.053052238005546, -0.0551335030085054, 0, -0.0326717054865217, 0.0141472634681456, 0.00875317269186366, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382573, 0, 0, 0.170367083999984, 0, -0.0111989473484215, 0.00969857289937744, 0.0822951199797824, 0.0475131096733199, -0.0167984210226323, 0, 0, 0, 0, 0, 0.0533333333333333, -0.0461880215351701, 0.0435464843161454, 0.0251415744421884, -0.0825396825396825, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0571754846014129, -0.0495154221385096, -0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, 0.0578311154339871, -0.0335968420452646, -0.0420271492306356, -0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, 0.0586514559176763, 0.0406349206349206, 0.0393445927233769, -0.00253968253968253, -0.0109971479845643, 0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, 0.053052238005546, 0.0367556686723369, -0.0105447476034577, 0.0245037791148913, 0.0235787724469093, -0.0175063453837273, 0, -0.0122518895574456},
    {0.0439885919382571, 0, 0.160623627183156, -0.0567890279999947, 0, -0.0783926314389508, 0.00969857289937743, 0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, -0.0586514559176763, -0.060952380952381, 0, -0.033015873015873, 0.0241937255660415, 0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, -0.053052238005546, -0.0551335030085054, 0, 0.0326717054865217, 0.0141472634681456, -0.00875317269186366, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382574, 0, 0, 0.170367083999984, 0, 0.0111989473484216, 0.00969857289937746, -0.0822951199797824, 0.0475131096733199, -0.0167984210226323, 0, 0, 0, 0, 0, -0.0533333333333333, -0.0461880215351701, -0.0435464843161454, 0.0251415744421884, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.057175484601413, -0.0495154221385096, 0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754904, 0.0447957893936862, 0.0484928644968872, -0.0548634133198549, 0, -0.0167984210226323, 0.0806324209086351, 0.0227156111999978, -0.00586514559176761, -0.0101587301587302, -0.00327871606028142, 0.0304761904761905, 0.0271262983619253, 0.045620126426438, 0.0430998419008943, 0.0393650793650793, 0, 0, 0, 0, 0, 0.0729347689341683, 0.0205470434274512, -0.0053052238005546, -0.00918891716808422, 0.031634242810373, -0.00816792637163041, -0.0141472634681456, -0.00875317269186366, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754904, -0.0447957893936862, 0.0484928644968872, 0.0548634133198549, 0, -0.0167984210226323, -0.0806324209086351, 0.0227156111999979, 0.00586514559176762, -0.0101587301587302, -0.00327871606028142, -0.0304761904761905, 0.0271262983619253, -0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, -0.0729347689341683, 0.0205470434274512, 0.0053052238005546, -0.00918891716808422, 0.031634242810373, 0.00816792637163041, -0.0141472634681456, 0.00875317269186366, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0.0144577788584968, 0, -0.00323285763312579, 0, -0.0950262193466398, -0.0167984210226323, 0, 0, 0, 0, -0.0688530372659096, 0, 0.01539600717839, 0, -0.0502831488843767, -0.0825396825396825, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0738132332242036, 0, 0.0165051407128365, 0, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754904, -0.0447957893936862, -0.00969857289937743, 0.0548634133198549, 0.0316754064488799, 0.0391963157194754, 0.0806324209086352, 0, 0.0527863103259087, 0.060952380952381, 0.0229510124219699, 0.0101587301587302, 0.0168622935763319, -0.0124418526617558, -0.00718330698348239, -0.013968253968254, 0, 0.0724831561155734, 0.0357346778758831, -0.0118628410538899, -0.0228300482527235, -0.00810386321490759, 0.0114150241263618, -0.00530522380055459, -0.0112308987609918, -0.00395428035129662, -0.0010209907964538, -0.0035368158670364, 0.00125045324169481, 0.000721949515701534, 0.00204198159290761},
    {0.0439885919382572, 0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754904, 0.0447957893936862, -0.00969857289937744, -0.0548634133198549, 0.0316754064488799, 0.0391963157194754, -0.0806324209086351, 0, -0.0527863103259086, 0.060952380952381, 0.0229510124219699, -0.0101587301587302, 0.0168622935763319, 0.0124418526617558, -0.00718330698348239, -0.013968253968254, 0, -0.0724831561155734, 0.0357346778758831, 0.0118628410538899, -0.0228300482527235, 0.00810386321490759, 0.0114150241263618, 0.0053052238005546, -0.0112308987609918, -0.00395428035129663, 0.0010209907964538, -0.0035368158670364, -0.00125045324169481, 0.000721949515701532, 0.0020419815929076},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0.0144577788584968, 0, -0.0614242950293905, 0, -0.0633508128977598, 0.0391963157194754, 0, -0.0681468335999936, 0, -0.0914285714285714, 0.00983614818084423, 0, 0.0285925847598672, 0, 0.0143666139669648, -0.013968253968254, 0, 0, -0.0714693557517662, 0, 0.0456600965054471, 0, 0.0182640386021788, 0, 0.00408396318581519, -0.00263618690086442, 0, -0.00471575448938187, 0, -0.00144389903140307, 0.0020419815929076},
    {0.351908735506058, 0, 0, 0, -0.115662230867974, 0, -0.129314305325033, 0, 0, -0.134387368181059, 0, -0.0908624447999914, 0, 0.0406349206349207, -0.0786891854467539, 0, -0.0879771838765144, 0, 0, 0.0711111111111111, 0, 0, 0, 0, 0, 0, -0.0821881737098047, 0, 0.0367556686723369, 0.0210894952069153, 0, 0.0235787724469093, 0, 0, -0.0122518895574456}};
    
    // Interesting (new) part
    // Tables of derivatives of the polynomial base (transpose)
    static const double dmats0[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {6.32455532033676, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 11.2249721603218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.58257569495584, 0, 8.36660026534075, -1.18321595661992, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.74165738677394, 0, 0, 8.69482604771366, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.49909083394702, 0, -3.3466401061363, -2.36643191323985, 15.4919333848297, 0, 0.692820323027558, 0, 0.565685424949242, 0.400000000000006, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 4.89897948556635, 0, 0, 0, 14.1985914794391, 0, -0.828078671210817, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.60000000000001, 0, 8.76356092008266, -1.54919333848297, 0, 1.05385203468073e-14, 9.52470471983253, 0, -1.48131215963609, 0.261861468283189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 4.24264068711929, 0, 0, 0, 0, 0, 14.3427433120127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.11022302462516e-14, 0, 0},
    {3.11769145362397, 0, 3.16227766016838, 4.91934955049954, 0, 0, 0, 0, 10.690449676497, -2.41897262725906, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.54558441227158, 0, 0, 7.66811580507233, 0, 0, 0, 0, 0, 10.3691851174526, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 11.6057691494799, 0, 0, 0, -4.20458932936041, 0, -3.43303281162798, 0, 0, 19.6214168703486, 0, 0.6116777418412, 0, 0, 0.529728463363978, 0, 0.432521479156785, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.53137212479104, 0, 3.54562104171167, -2.50713268211203, 4.78713553878169, -1.29633448990283e-14, -5.5662674507549, 0, -1.04880884817015, 0.741619848709566, 0, 18.8034951158403, 0, 1.68183573174416, -0.603122387046457, 0, 0.701283781217661, 0, 0.132137494528679, -0.093435318430233, 0, 0, 0, 0, -1.35102366043011e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 2.59512887494071, 0, 0, 0, 10.0285307284481, 0, -0.767649473578739, 0, 0, 0, 0, 16.4130361329658, 0, 0, -1.26347611061158, 0, 0.0967147429123337, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.96647939483827, 0, 8.12403840463596, -1.64130361329658, 0, 0, 11.7728501222091, 0, -2.40312296813959, 0.485504156227608, 0, 0, 0, 10.2761860629321, 0, 0, -1.48323969741913, 0, 0.30276503540975, -0.06116777418412, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.05298244095218, 0, -1.58564993434419, 4.4848952846511, 4.28174419288838, 0, 0.191485421551267, 0, -3.75233260785875, -4.31161222746202, 0, 0, 0, 0, 18.8807171866294, 0, 0.844371341865036, 0, 1.18187368057056, 1.04463861754669, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 2.32115382989599, 0, 0, 0, 3.92428337406973, 0, 5.49285249860477, 1.10651505319526e-14, 0, 0, 0, 0, 0, 0, 17.3044631365565, 0, -1.73008591662714, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.65329983228432, 0, 4.15220619990513, 2.93605316083775, 0, 0, 2.63248931621764, 0, 9.82591326180785, -2.82261277137741, 0, 0, 0, 0, 0, 0, 11.6081867662439, 0, -3.09487177319465, 0.683876505540241, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 2.01017818278147, 0, 0, 0, 0, 0, 8.91928088068603, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16.8558564884489, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.29782505861521, 0, 1.49829835452879, 5.50917601898535, 0, 0, 0, 0, 6.64803945320939, 4.13676892548485, 0, 0, 0, 0, 0, 0, 0, 0, 12.5636136423842, -3.55352656109508, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87616630392938, 0, 0, 6.2283092998577, 0, 0, 0, 0, 1.26414611676556e-14, 11.0541524195338, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11.6057691494799, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    static const double dmats1[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.16227766016838, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.47722557505166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.95803989154981, 5.61248608016091, -1.08012344973464, -0.763762615825972, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.29128784747792, 7.24568837309472, 4.18330013267038, -0.59160797830996, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-2.64575131106459, 0, 9.66091783079296, 0.683130051063973, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87082869338697, 0, 0, 4.34741302385683, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.24037034920393, 0, 0, 7.52994023880668, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.74954541697351, 5.79655069847578, -1.67332005306815, -1.18321595661993, 7.74596669241484, -1.2, 0.346410161513782, -0.979795897113276, 0.282842712474624, 0.200000000000003, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.32379000772445, 2.44948974278318, 2.8284271247462, -0.999999999999997, 9.16515138991168, 7.09929573971954, -2.04939015319192, -0.414039335605406, -0.47809144373376, 0.1690308509457, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.80000000000001, -5.69209978830308, 4.38178046004133, -0.774596669241484, 0, 10.998181667894, 4.76235235991627, 0.962140470884735, -0.740656079818043, 0.130930734141594, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.19615242270664, 0, -3.16227766016838, -2.23606797749979, 0, 0, 13.7477270848675, 0, 0.53452248382485, 0.377964473009225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.01246117974981, 2.12132034355964, -0.408248290463865, 3.17542648054294, 0, 0, 0, 7.17137165600636, -1.38013111868471, -1.56144011671765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.55884572681199, 2.73861278752583, 1.58113883008419, 2.45967477524977, 0, 0, 0, 9.25820099772552, 5.34522483824848, -1.20948631362953, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-1.8, 0, 3.65148371670111, -2.84018778721878, 0, 0, 0, 0, 12.3442679969674, 1.39659449751034, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.27279220613579, 0, 0, 3.83405790253616, 0, 0, 0, 0, 0, 5.18459255872629, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.20454076850486, 0, 0, 6.6407830863536, 0, 0, 0, 0, 0, 8.97997772825746, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.56904651573303, 5.80288457473998, -2.01017818278147, -1.42141062443803, 8.14215222512715, -2.10229466468021, 0.728256234341424, -1.71651640581399, 0.594618725379072, 0.420458932936045, 9.81070843517429, -1.18450885369836, 0.305838870920601, -0.105945692672795, -1.02581475831037, 0.264864231681988, -0.0917516612761807, 0.216260739578392, -0.0749149177264403, -0.0529728463363971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.26568606239552, 3.07059789431495, 1.77281052085584, -1.25356634105601, 2.39356776939085, 6.30376871403131, -2.78313372537745, -0.908295106229242, -0.524404424085073, 0.370809924354785, 11.1242977306435, 9.40174755792013, -2.42752078113806, 0.840917865872083, -0.301561193523229, -0.794200206656968, 0.350641890608831, 0.114434427054264, 0.0660687472643388, -0.0467176592151161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.91485421551268, 1.29756443747035, 3.74574588632197, -1.05945692672795, -8.09173593712687, 5.01426536422408, 1.80936716113936, -0.383824736789367, -1.1080065755349, 0.313391585264002, 0, 12.7134831207354, 8.20651806648289, -2.84282124887606, 1.01946290306866, -0.631738055305789, -0.227958835180082, 0.0483573714561662, 0.139595707137601, -0.0394836284566123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741913, 7.03562363973515, 4.06201920231798, -0.820651806648291, 0, -6.79705818718656, 5.88642506110457, -2.08116553882675, -1.2015614840698, 0.242752078113807, 0, 0, 14.8323969741913, 5.13809303146605, 0, 0.856348838577677, -0.741619848709568, 0.262202212042541, 0.151382517704876, -0.03058388709206, 0, 0, 0, 0, 0, 0, 0, -1.07304327303254e-14, 0, 0, 0, 0, 0, 0, 0},
    {-3.42539535431072, 0, 9.38083151964686, 1.89521416591738, 0, 0, -3.3985290935933, 0, -2.77488738510233, -0.560611910581395, 0, 0, 0, 17.7988763690296, 0, 0, 0.428174419288839, 0, 0.349602949390051, 0.0706304617818617, 0, 0, 0, 0, -1.22900818059705e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.02649122047609, 2.74642624930239, -0.792824967172094, 2.24244764232555, 2.14087209644419, -0.331662479035539, 0.0957427107756354, 6.49923072370876, -1.87616630392937, -2.15580611373101, 0, 0, 0, 0, 9.44035859331468, -1.46249406456536, 0.422185670932519, -2.04706526287664, 0.59093684028528, 0.522319308773342, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.71269767715535, 1.16057691494799, 1.34011878852098, 1.89521416591737, 2.53311402559511, 1.96214168703486, -0.566421515598879, 2.74642624930239, 3.17129986868837, -1.82198870938952, 0, 0, 0, 0, 11.1699829238239, 8.65223156827827, -2.49768411251822, -0.86504295831357, -0.998865569685859, 0.441440386136645, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.32664991614216, -2.69693703815182, 2.07610309995257, 1.46802658041887, 0, 3.03973683071413, 1.31624465810882, -6.382117875081, 4.91295663090393, -1.4113063856887, 0, 0, 0, 0, 0, 13.4039795085887, 5.80409338312195, 2.01017818278147, -1.54743588659732, 0.341938252770122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.82970843102536, 0, -1.49829835452879, 4.23782770691181, 0, 0, 3.79967103839267, 0, -3.54562104171168, -4.07409060843206, 0, 0, 0, 0, 0, 0, 16.7549743857359, 0, 1.11676565710082, 0.987090711415303, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741914, 1.00508909139074, -0.193429485824667, 3.55615782880926, 0, 0, 0, 4.45964044034301, -0.858258202906997, 2.67027285925187, 0, 0, 0, 0, 0, 0, 0, 8.42792824422443, -1.62195554683794, -2.29379153190449, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.14891252930761, 1.29756443747036, 0.749149177264392, 2.75458800949268, 0, 0, 0, 5.75737105184054, 3.32401972660469, 2.06838446274242, 0, 0, 0, 0, 0, 0, 0, 10.8804085776374, 6.2818068211921, -1.77676328054754, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-1.32664991614217, 0, 1.73008591662714, -3.18072425757423, 0, 0, 0, 0, 7.67649473578739, -2.38836465270398, 0, 0, 0, 0, 0, 0, 0, 0, 14.5072114368499, 2.05162951662072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.93808315196469, 0, 0, 3.11415464992885, 0, 0, 0, 0, 0, 5.52707620976692, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.80288457473997, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.6248076809272, 0, 0, 5.39387407630364, 0, 0, 0, 0, 1.09477880811911e-14, 9.57317681262152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10.0508909139073, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    static const double dmats2[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.16227766016838, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.82574185835055, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.16397779494322, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.95803989154981, 5.61248608016091, -1.08012344973464, -0.763762615825972, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.29128784747792, 1.44913767461894, 4.18330013267038, -0.591607978309961, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.32287565553229, 0, 3.86436713231718, -0.341565025531985, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87082869338697, 7.09929573971954, 0, 4.34741302385683, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.08012344973464, 0, 7.09929573971954, 2.50998007960223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-3.81881307912987, 0, 0, 8.87411967464942, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.74954541697351, 5.79655069847578, -1.67332005306815, -1.18321595661993, 7.74596669241484, -1.2, 0.346410161513782, -0.979795897113276, 0.282842712474623, 0.200000000000002, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.32379000772445, 2.44948974278318, 2.82842712474619, -0.999999999999997, 1.30930734141596, 7.09929573971954, -2.04939015319193, -0.414039335605408, -0.47809144373376, 0.169030850945702, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.80000000000001, 0.632455532033676, 4.38178046004133, -0.774596669241484, 0, 3.1423376193983, 4.76235235991627, -0.106904496764967, -0.740656079818043, 0.130930734141594, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.03923048454133, 0, 3.16227766016838, -0.447213595499958, 0, 0, 5.89188303637179, 0, -0.534522483824848, 0.0755928946018432, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.01246117974981, 2.12132034355964, -0.408248290463862, 3.17542648054294, 9.07114735222145, 0, 0, 7.17137165600636, -1.38013111868471, -1.56144011671765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.55884572681199, 0.54772255750517, 1.58113883008419, 2.45967477524977, 0, 9.07114735222145, 0, 1.85164019954511, 5.34522483824848, -1.20948631362953, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.900000000000006, 0, 1.46059348668044, 1.42009389360938, 0, 0, 9.07114735222146, 0, 4.93770719878694, -0.69829724875518, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.27279220613579, -6.26099033699941, 0, 3.83405790253617, 0, 0, 0, 10.5830052442584, 0, 5.18459255872629, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.734846922834956, 0, -6.26099033699941, 2.21359436211787, 0, 0, 0, 0, 10.5830052442584, 2.99332590941915, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.7157676649773, 0, 0, -4.69574275274955, 0, 0, 0, 0, 1.02381519203602e-14, 12.69960629311, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.56904651573303, 5.80288457473998, -2.01017818278147, -1.42141062443803, 8.14215222512715, -2.10229466468021, 0.728256234341424, -1.71651640581399, 0.594618725379071, 0.420458932936045, 9.81070843517429, -1.18450885369836, 0.305838870920601, -0.105945692672795, -1.02581475831037, 0.264864231681988, -0.0917516612761806, 0.216260739578392, -0.0749149177264403, -0.0529728463363971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.26568606239552, 3.07059789431495, 1.77281052085584, -1.25356634105601, 2.39356776939084, 6.30376871403131, -2.78313372537745, -0.908295106229243, -0.524404424085072, 0.370809924354783, 1.23603308118261, 9.40174755792013, -2.42752078113806, 0.840917865872083, -0.301561193523228, -0.794200206656968, 0.350641890608832, 0.114434427054263, 0.0660687472643389, -0.0467176592151161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.91485421551268, 1.29756443747036, 3.74574588632197, -1.05945692672795, 0.404586796856345, 5.01426536422408, 1.80936716113936, -0.383824736789367, -1.1080065755349, 0.313391585264004, 0, 2.82521847127454, 8.2065180664829, -2.84282124887606, -0.0509731451534337, -0.631738055305789, -0.227958835180083, 0.0483573714561674, 0.139595707137602, -0.0394836284566113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741913, 0.335029697130247, 4.06201920231798, -0.820651806648289, 0, 1.69926454679665, 5.88642506110457, -0.0991031208965142, -1.2015614840698, 0.242752078113805, 0, 0, 4.94413232473044, 5.13809303146605, 0, -0.21408720964442, -0.741619848709568, 0.012485819621074, 0.151382517704875, -0.0305838870920598, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.856348838577676, 0, 2.68023757704196, -0.473803541479343, 0, 0, 5.09779364038993, 0, -0.792824967172093, 0.140152977645346, 0, 0, 0, 7.91061171956871, 0, 0, -0.642261628933256, 0, 0.0998865569685856, -0.0176576154454656, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.02649122047609, 2.74642624930238, -0.792824967172095, 2.24244764232555, 2.14087209644419, -0.331662479035541, 0.0957427107756347, 6.49923072370876, -1.87616630392937, -2.15580611373101, 11.0554159678513, 0, 0, 0, 9.44035859331468, -1.46249406456536, 0.422185670932518, -2.04706526287664, 0.59093684028528, 0.522319308773342, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.71269767715535, 1.16057691494799, 1.34011878852098, 1.89521416591737, 0.361873432227872, 1.96214168703486, -0.566421515598874, 2.74642624930239, 3.17129986868837, -1.82198870938952, 0, 11.0554159678513, 0, 0, 1.59571184626056, 8.65223156827827, -2.49768411251822, -0.865042958313571, -0.99886556968586, 0.441440386136643, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.32664991614216, 0.299659670905759, 2.07610309995256, 1.46802658041887, 0, 0.868496237346896, 1.31624465810882, 0.70912420834234, 4.91295663090392, -1.41130638568871, 0, 0, 11.0554159678513, 0, 0, 3.82970843102535, 5.80409338312195, -0.223353131420162, -1.54743588659732, 0.341938252770121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.765941686205069, 0, 1.49829835452879, 0.847565541382364, 0, 0, 1.62843044502543, 0, 3.54562104171167, -0.814818121686416, 0, 0, 0, 11.0554159678513, 0, 0, 7.18070330817254, 0, -1.11676565710082, 0.197418142283061, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741913, 1.00508909139074, -0.193429485824669, 3.55615782880926, -8.46157280212812, 0, 0, 4.45964044034301, -0.858258202906995, 2.67027285925187, 0, 0, 0, 0, 12.4373429638328, 0, 0, 8.42792824422443, -1.62195554683794, -2.29379153190448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.1489125293076, 0.25951288749407, 0.749149177264392, 2.75458800949268, 0, -8.46157280212812, 0, 1.15147421036811, 3.3240197266047, 2.06838446274242, 0, 0, 0, 0, 0, 12.4373429638327, 0, 2.17608171552749, 6.28180682119209, -1.77676328054754, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.663324958071074, 0, 0.692034366650854, 1.59036212878711, 0, 0, -8.46157280212813, 0, 3.07059789431495, 1.19418232635198, 0, 0, 0, 0, 0, 0, 12.4373429638327, 0, 5.80288457473997, -1.02581475831036, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.938083151964692, 7.62808987244125, 0, 3.11415464992885, 0, 0, 0, -7.5213980463361, 0, 5.52707620976692, 0, 0, 0, 0, 0, 0, 0, 14.2141062443803, 0, 5.80288457473997, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.541602560309066, 0, 7.62808987244125, 1.79795802543454, 0, 0, 0, 0, -7.5213980463361, 3.1910589375405, 0, 0, 0, 0, 0, 0, 0, 0, 14.2141062443803, 3.35029697130245, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-5.36159180343549, 0, 0, 8.8994381845148, 0, 0, 0, 0, 0, -5.26497863243526, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16.583123951777, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    // Compute reference derivatives
    // Declare pointer to array of derivatives on FIAT element
    double *derivatives = new double [num_derivatives];
    
    // Declare coefficients
    double coeff0_0 = 0;
    double coeff0_1 = 0;
    double coeff0_2 = 0;
    double coeff0_3 = 0;
    double coeff0_4 = 0;
    double coeff0_5 = 0;
    double coeff0_6 = 0;
    double coeff0_7 = 0;
    double coeff0_8 = 0;
    double coeff0_9 = 0;
    double coeff0_10 = 0;
    double coeff0_11 = 0;
    double coeff0_12 = 0;
    double coeff0_13 = 0;
    double coeff0_14 = 0;
    double coeff0_15 = 0;
    double coeff0_16 = 0;
    double coeff0_17 = 0;
    double coeff0_18 = 0;
    double coeff0_19 = 0;
    double coeff0_20 = 0;
    double coeff0_21 = 0;
    double coeff0_22 = 0;
    double coeff0_23 = 0;
    double coeff0_24 = 0;
    double coeff0_25 = 0;
    double coeff0_26 = 0;
    double coeff0_27 = 0;
    double coeff0_28 = 0;
    double coeff0_29 = 0;
    double coeff0_30 = 0;
    double coeff0_31 = 0;
    double coeff0_32 = 0;
    double coeff0_33 = 0;
    double coeff0_34 = 0;
    
    // Declare new coefficients
    double new_coeff0_0 = 0;
    double new_coeff0_1 = 0;
    double new_coeff0_2 = 0;
    double new_coeff0_3 = 0;
    double new_coeff0_4 = 0;
    double new_coeff0_5 = 0;
    double new_coeff0_6 = 0;
    double new_coeff0_7 = 0;
    double new_coeff0_8 = 0;
    double new_coeff0_9 = 0;
    double new_coeff0_10 = 0;
    double new_coeff0_11 = 0;
    double new_coeff0_12 = 0;
    double new_coeff0_13 = 0;
    double new_coeff0_14 = 0;
    double new_coeff0_15 = 0;
    double new_coeff0_16 = 0;
    double new_coeff0_17 = 0;
    double new_coeff0_18 = 0;
    double new_coeff0_19 = 0;
    double new_coeff0_20 = 0;
    double new_coeff0_21 = 0;
    double new_coeff0_22 = 0;
    double new_coeff0_23 = 0;
    double new_coeff0_24 = 0;
    double new_coeff0_25 = 0;
    double new_coeff0_26 = 0;
    double new_coeff0_27 = 0;
    double new_coeff0_28 = 0;
    double new_coeff0_29 = 0;
    double new_coeff0_30 = 0;
    double new_coeff0_31 = 0;
    double new_coeff0_32 = 0;
    double new_coeff0_33 = 0;
    double new_coeff0_34 = 0;
    
    // Loop possible derivatives
    for (unsigned int deriv_num = 0; deriv_num < num_derivatives; deriv_num++)
    {
      // Get values from coefficients array
      new_coeff0_0 = coefficients0[dof][0];
      new_coeff0_1 = coefficients0[dof][1];
      new_coeff0_2 = coefficients0[dof][2];
      new_coeff0_3 = coefficients0[dof][3];
      new_coeff0_4 = coefficients0[dof][4];
      new_coeff0_5 = coefficients0[dof][5];
      new_coeff0_6 = coefficients0[dof][6];
      new_coeff0_7 = coefficients0[dof][7];
      new_coeff0_8 = coefficients0[dof][8];
      new_coeff0_9 = coefficients0[dof][9];
      new_coeff0_10 = coefficients0[dof][10];
      new_coeff0_11 = coefficients0[dof][11];
      new_coeff0_12 = coefficients0[dof][12];
      new_coeff0_13 = coefficients0[dof][13];
      new_coeff0_14 = coefficients0[dof][14];
      new_coeff0_15 = coefficients0[dof][15];
      new_coeff0_16 = coefficients0[dof][16];
      new_coeff0_17 = coefficients0[dof][17];
      new_coeff0_18 = coefficients0[dof][18];
      new_coeff0_19 = coefficients0[dof][19];
      new_coeff0_20 = coefficients0[dof][20];
      new_coeff0_21 = coefficients0[dof][21];
      new_coeff0_22 = coefficients0[dof][22];
      new_coeff0_23 = coefficients0[dof][23];
      new_coeff0_24 = coefficients0[dof][24];
      new_coeff0_25 = coefficients0[dof][25];
      new_coeff0_26 = coefficients0[dof][26];
      new_coeff0_27 = coefficients0[dof][27];
      new_coeff0_28 = coefficients0[dof][28];
      new_coeff0_29 = coefficients0[dof][29];
      new_coeff0_30 = coefficients0[dof][30];
      new_coeff0_31 = coefficients0[dof][31];
      new_coeff0_32 = coefficients0[dof][32];
      new_coeff0_33 = coefficients0[dof][33];
      new_coeff0_34 = coefficients0[dof][34];
    
      // Loop derivative order
      for (unsigned int j = 0; j < n; j++)
      {
        // Update old coefficients
        coeff0_0 = new_coeff0_0;
        coeff0_1 = new_coeff0_1;
        coeff0_2 = new_coeff0_2;
        coeff0_3 = new_coeff0_3;
        coeff0_4 = new_coeff0_4;
        coeff0_5 = new_coeff0_5;
        coeff0_6 = new_coeff0_6;
        coeff0_7 = new_coeff0_7;
        coeff0_8 = new_coeff0_8;
        coeff0_9 = new_coeff0_9;
        coeff0_10 = new_coeff0_10;
        coeff0_11 = new_coeff0_11;
        coeff0_12 = new_coeff0_12;
        coeff0_13 = new_coeff0_13;
        coeff0_14 = new_coeff0_14;
        coeff0_15 = new_coeff0_15;
        coeff0_16 = new_coeff0_16;
        coeff0_17 = new_coeff0_17;
        coeff0_18 = new_coeff0_18;
        coeff0_19 = new_coeff0_19;
        coeff0_20 = new_coeff0_20;
        coeff0_21 = new_coeff0_21;
        coeff0_22 = new_coeff0_22;
        coeff0_23 = new_coeff0_23;
        coeff0_24 = new_coeff0_24;
        coeff0_25 = new_coeff0_25;
        coeff0_26 = new_coeff0_26;
        coeff0_27 = new_coeff0_27;
        coeff0_28 = new_coeff0_28;
        coeff0_29 = new_coeff0_29;
        coeff0_30 = new_coeff0_30;
        coeff0_31 = new_coeff0_31;
        coeff0_32 = new_coeff0_32;
        coeff0_33 = new_coeff0_33;
        coeff0_34 = new_coeff0_34;
    
        if(combinations[deriv_num][j] == 0)
        {
          new_coeff0_0 = coeff0_0*dmats0[0][0] + coeff0_1*dmats0[1][0] + coeff0_2*dmats0[2][0] + coeff0_3*dmats0[3][0] + coeff0_4*dmats0[4][0] + coeff0_5*dmats0[5][0] + coeff0_6*dmats0[6][0] + coeff0_7*dmats0[7][0] + coeff0_8*dmats0[8][0] + coeff0_9*dmats0[9][0] + coeff0_10*dmats0[10][0] + coeff0_11*dmats0[11][0] + coeff0_12*dmats0[12][0] + coeff0_13*dmats0[13][0] + coeff0_14*dmats0[14][0] + coeff0_15*dmats0[15][0] + coeff0_16*dmats0[16][0] + coeff0_17*dmats0[17][0] + coeff0_18*dmats0[18][0] + coeff0_19*dmats0[19][0] + coeff0_20*dmats0[20][0] + coeff0_21*dmats0[21][0] + coeff0_22*dmats0[22][0] + coeff0_23*dmats0[23][0] + coeff0_24*dmats0[24][0] + coeff0_25*dmats0[25][0] + coeff0_26*dmats0[26][0] + coeff0_27*dmats0[27][0] + coeff0_28*dmats0[28][0] + coeff0_29*dmats0[29][0] + coeff0_30*dmats0[30][0] + coeff0_31*dmats0[31][0] + coeff0_32*dmats0[32][0] + coeff0_33*dmats0[33][0] + coeff0_34*dmats0[34][0];
          new_coeff0_1 = coeff0_0*dmats0[0][1] + coeff0_1*dmats0[1][1] + coeff0_2*dmats0[2][1] + coeff0_3*dmats0[3][1] + coeff0_4*dmats0[4][1] + coeff0_5*dmats0[5][1] + coeff0_6*dmats0[6][1] + coeff0_7*dmats0[7][1] + coeff0_8*dmats0[8][1] + coeff0_9*dmats0[9][1] + coeff0_10*dmats0[10][1] + coeff0_11*dmats0[11][1] + coeff0_12*dmats0[12][1] + coeff0_13*dmats0[13][1] + coeff0_14*dmats0[14][1] + coeff0_15*dmats0[15][1] + coeff0_16*dmats0[16][1] + coeff0_17*dmats0[17][1] + coeff0_18*dmats0[18][1] + coeff0_19*dmats0[19][1] + coeff0_20*dmats0[20][1] + coeff0_21*dmats0[21][1] + coeff0_22*dmats0[22][1] + coeff0_23*dmats0[23][1] + coeff0_24*dmats0[24][1] + coeff0_25*dmats0[25][1] + coeff0_26*dmats0[26][1] + coeff0_27*dmats0[27][1] + coeff0_28*dmats0[28][1] + coeff0_29*dmats0[29][1] + coeff0_30*dmats0[30][1] + coeff0_31*dmats0[31][1] + coeff0_32*dmats0[32][1] + coeff0_33*dmats0[33][1] + coeff0_34*dmats0[34][1];
          new_coeff0_2 = coeff0_0*dmats0[0][2] + coeff0_1*dmats0[1][2] + coeff0_2*dmats0[2][2] + coeff0_3*dmats0[3][2] + coeff0_4*dmats0[4][2] + coeff0_5*dmats0[5][2] + coeff0_6*dmats0[6][2] + coeff0_7*dmats0[7][2] + coeff0_8*dmats0[8][2] + coeff0_9*dmats0[9][2] + coeff0_10*dmats0[10][2] + coeff0_11*dmats0[11][2] + coeff0_12*dmats0[12][2] + coeff0_13*dmats0[13][2] + coeff0_14*dmats0[14][2] + coeff0_15*dmats0[15][2] + coeff0_16*dmats0[16][2] + coeff0_17*dmats0[17][2] + coeff0_18*dmats0[18][2] + coeff0_19*dmats0[19][2] + coeff0_20*dmats0[20][2] + coeff0_21*dmats0[21][2] + coeff0_22*dmats0[22][2] + coeff0_23*dmats0[23][2] + coeff0_24*dmats0[24][2] + coeff0_25*dmats0[25][2] + coeff0_26*dmats0[26][2] + coeff0_27*dmats0[27][2] + coeff0_28*dmats0[28][2] + coeff0_29*dmats0[29][2] + coeff0_30*dmats0[30][2] + coeff0_31*dmats0[31][2] + coeff0_32*dmats0[32][2] + coeff0_33*dmats0[33][2] + coeff0_34*dmats0[34][2];
          new_coeff0_3 = coeff0_0*dmats0[0][3] + coeff0_1*dmats0[1][3] + coeff0_2*dmats0[2][3] + coeff0_3*dmats0[3][3] + coeff0_4*dmats0[4][3] + coeff0_5*dmats0[5][3] + coeff0_6*dmats0[6][3] + coeff0_7*dmats0[7][3] + coeff0_8*dmats0[8][3] + coeff0_9*dmats0[9][3] + coeff0_10*dmats0[10][3] + coeff0_11*dmats0[11][3] + coeff0_12*dmats0[12][3] + coeff0_13*dmats0[13][3] + coeff0_14*dmats0[14][3] + coeff0_15*dmats0[15][3] + coeff0_16*dmats0[16][3] + coeff0_17*dmats0[17][3] + coeff0_18*dmats0[18][3] + coeff0_19*dmats0[19][3] + coeff0_20*dmats0[20][3] + coeff0_21*dmats0[21][3] + coeff0_22*dmats0[22][3] + coeff0_23*dmats0[23][3] + coeff0_24*dmats0[24][3] + coeff0_25*dmats0[25][3] + coeff0_26*dmats0[26][3] + coeff0_27*dmats0[27][3] + coeff0_28*dmats0[28][3] + coeff0_29*dmats0[29][3] + coeff0_30*dmats0[30][3] + coeff0_31*dmats0[31][3] + coeff0_32*dmats0[32][3] + coeff0_33*dmats0[33][3] + coeff0_34*dmats0[34][3];
          new_coeff0_4 = coeff0_0*dmats0[0][4] + coeff0_1*dmats0[1][4] + coeff0_2*dmats0[2][4] + coeff0_3*dmats0[3][4] + coeff0_4*dmats0[4][4] + coeff0_5*dmats0[5][4] + coeff0_6*dmats0[6][4] + coeff0_7*dmats0[7][4] + coeff0_8*dmats0[8][4] + coeff0_9*dmats0[9][4] + coeff0_10*dmats0[10][4] + coeff0_11*dmats0[11][4] + coeff0_12*dmats0[12][4] + coeff0_13*dmats0[13][4] + coeff0_14*dmats0[14][4] + coeff0_15*dmats0[15][4] + coeff0_16*dmats0[16][4] + coeff0_17*dmats0[17][4] + coeff0_18*dmats0[18][4] + coeff0_19*dmats0[19][4] + coeff0_20*dmats0[20][4] + coeff0_21*dmats0[21][4] + coeff0_22*dmats0[22][4] + coeff0_23*dmats0[23][4] + coeff0_24*dmats0[24][4] + coeff0_25*dmats0[25][4] + coeff0_26*dmats0[26][4] + coeff0_27*dmats0[27][4] + coeff0_28*dmats0[28][4] + coeff0_29*dmats0[29][4] + coeff0_30*dmats0[30][4] + coeff0_31*dmats0[31][4] + coeff0_32*dmats0[32][4] + coeff0_33*dmats0[33][4] + coeff0_34*dmats0[34][4];
          new_coeff0_5 = coeff0_0*dmats0[0][5] + coeff0_1*dmats0[1][5] + coeff0_2*dmats0[2][5] + coeff0_3*dmats0[3][5] + coeff0_4*dmats0[4][5] + coeff0_5*dmats0[5][5] + coeff0_6*dmats0[6][5] + coeff0_7*dmats0[7][5] + coeff0_8*dmats0[8][5] + coeff0_9*dmats0[9][5] + coeff0_10*dmats0[10][5] + coeff0_11*dmats0[11][5] + coeff0_12*dmats0[12][5] + coeff0_13*dmats0[13][5] + coeff0_14*dmats0[14][5] + coeff0_15*dmats0[15][5] + coeff0_16*dmats0[16][5] + coeff0_17*dmats0[17][5] + coeff0_18*dmats0[18][5] + coeff0_19*dmats0[19][5] + coeff0_20*dmats0[20][5] + coeff0_21*dmats0[21][5] + coeff0_22*dmats0[22][5] + coeff0_23*dmats0[23][5] + coeff0_24*dmats0[24][5] + coeff0_25*dmats0[25][5] + coeff0_26*dmats0[26][5] + coeff0_27*dmats0[27][5] + coeff0_28*dmats0[28][5] + coeff0_29*dmats0[29][5] + coeff0_30*dmats0[30][5] + coeff0_31*dmats0[31][5] + coeff0_32*dmats0[32][5] + coeff0_33*dmats0[33][5] + coeff0_34*dmats0[34][5];
          new_coeff0_6 = coeff0_0*dmats0[0][6] + coeff0_1*dmats0[1][6] + coeff0_2*dmats0[2][6] + coeff0_3*dmats0[3][6] + coeff0_4*dmats0[4][6] + coeff0_5*dmats0[5][6] + coeff0_6*dmats0[6][6] + coeff0_7*dmats0[7][6] + coeff0_8*dmats0[8][6] + coeff0_9*dmats0[9][6] + coeff0_10*dmats0[10][6] + coeff0_11*dmats0[11][6] + coeff0_12*dmats0[12][6] + coeff0_13*dmats0[13][6] + coeff0_14*dmats0[14][6] + coeff0_15*dmats0[15][6] + coeff0_16*dmats0[16][6] + coeff0_17*dmats0[17][6] + coeff0_18*dmats0[18][6] + coeff0_19*dmats0[19][6] + coeff0_20*dmats0[20][6] + coeff0_21*dmats0[21][6] + coeff0_22*dmats0[22][6] + coeff0_23*dmats0[23][6] + coeff0_24*dmats0[24][6] + coeff0_25*dmats0[25][6] + coeff0_26*dmats0[26][6] + coeff0_27*dmats0[27][6] + coeff0_28*dmats0[28][6] + coeff0_29*dmats0[29][6] + coeff0_30*dmats0[30][6] + coeff0_31*dmats0[31][6] + coeff0_32*dmats0[32][6] + coeff0_33*dmats0[33][6] + coeff0_34*dmats0[34][6];
          new_coeff0_7 = coeff0_0*dmats0[0][7] + coeff0_1*dmats0[1][7] + coeff0_2*dmats0[2][7] + coeff0_3*dmats0[3][7] + coeff0_4*dmats0[4][7] + coeff0_5*dmats0[5][7] + coeff0_6*dmats0[6][7] + coeff0_7*dmats0[7][7] + coeff0_8*dmats0[8][7] + coeff0_9*dmats0[9][7] + coeff0_10*dmats0[10][7] + coeff0_11*dmats0[11][7] + coeff0_12*dmats0[12][7] + coeff0_13*dmats0[13][7] + coeff0_14*dmats0[14][7] + coeff0_15*dmats0[15][7] + coeff0_16*dmats0[16][7] + coeff0_17*dmats0[17][7] + coeff0_18*dmats0[18][7] + coeff0_19*dmats0[19][7] + coeff0_20*dmats0[20][7] + coeff0_21*dmats0[21][7] + coeff0_22*dmats0[22][7] + coeff0_23*dmats0[23][7] + coeff0_24*dmats0[24][7] + coeff0_25*dmats0[25][7] + coeff0_26*dmats0[26][7] + coeff0_27*dmats0[27][7] + coeff0_28*dmats0[28][7] + coeff0_29*dmats0[29][7] + coeff0_30*dmats0[30][7] + coeff0_31*dmats0[31][7] + coeff0_32*dmats0[32][7] + coeff0_33*dmats0[33][7] + coeff0_34*dmats0[34][7];
          new_coeff0_8 = coeff0_0*dmats0[0][8] + coeff0_1*dmats0[1][8] + coeff0_2*dmats0[2][8] + coeff0_3*dmats0[3][8] + coeff0_4*dmats0[4][8] + coeff0_5*dmats0[5][8] + coeff0_6*dmats0[6][8] + coeff0_7*dmats0[7][8] + coeff0_8*dmats0[8][8] + coeff0_9*dmats0[9][8] + coeff0_10*dmats0[10][8] + coeff0_11*dmats0[11][8] + coeff0_12*dmats0[12][8] + coeff0_13*dmats0[13][8] + coeff0_14*dmats0[14][8] + coeff0_15*dmats0[15][8] + coeff0_16*dmats0[16][8] + coeff0_17*dmats0[17][8] + coeff0_18*dmats0[18][8] + coeff0_19*dmats0[19][8] + coeff0_20*dmats0[20][8] + coeff0_21*dmats0[21][8] + coeff0_22*dmats0[22][8] + coeff0_23*dmats0[23][8] + coeff0_24*dmats0[24][8] + coeff0_25*dmats0[25][8] + coeff0_26*dmats0[26][8] + coeff0_27*dmats0[27][8] + coeff0_28*dmats0[28][8] + coeff0_29*dmats0[29][8] + coeff0_30*dmats0[30][8] + coeff0_31*dmats0[31][8] + coeff0_32*dmats0[32][8] + coeff0_33*dmats0[33][8] + coeff0_34*dmats0[34][8];
          new_coeff0_9 = coeff0_0*dmats0[0][9] + coeff0_1*dmats0[1][9] + coeff0_2*dmats0[2][9] + coeff0_3*dmats0[3][9] + coeff0_4*dmats0[4][9] + coeff0_5*dmats0[5][9] + coeff0_6*dmats0[6][9] + coeff0_7*dmats0[7][9] + coeff0_8*dmats0[8][9] + coeff0_9*dmats0[9][9] + coeff0_10*dmats0[10][9] + coeff0_11*dmats0[11][9] + coeff0_12*dmats0[12][9] + coeff0_13*dmats0[13][9] + coeff0_14*dmats0[14][9] + coeff0_15*dmats0[15][9] + coeff0_16*dmats0[16][9] + coeff0_17*dmats0[17][9] + coeff0_18*dmats0[18][9] + coeff0_19*dmats0[19][9] + coeff0_20*dmats0[20][9] + coeff0_21*dmats0[21][9] + coeff0_22*dmats0[22][9] + coeff0_23*dmats0[23][9] + coeff0_24*dmats0[24][9] + coeff0_25*dmats0[25][9] + coeff0_26*dmats0[26][9] + coeff0_27*dmats0[27][9] + coeff0_28*dmats0[28][9] + coeff0_29*dmats0[29][9] + coeff0_30*dmats0[30][9] + coeff0_31*dmats0[31][9] + coeff0_32*dmats0[32][9] + coeff0_33*dmats0[33][9] + coeff0_34*dmats0[34][9];
          new_coeff0_10 = coeff0_0*dmats0[0][10] + coeff0_1*dmats0[1][10] + coeff0_2*dmats0[2][10] + coeff0_3*dmats0[3][10] + coeff0_4*dmats0[4][10] + coeff0_5*dmats0[5][10] + coeff0_6*dmats0[6][10] + coeff0_7*dmats0[7][10] + coeff0_8*dmats0[8][10] + coeff0_9*dmats0[9][10] + coeff0_10*dmats0[10][10] + coeff0_11*dmats0[11][10] + coeff0_12*dmats0[12][10] + coeff0_13*dmats0[13][10] + coeff0_14*dmats0[14][10] + coeff0_15*dmats0[15][10] + coeff0_16*dmats0[16][10] + coeff0_17*dmats0[17][10] + coeff0_18*dmats0[18][10] + coeff0_19*dmats0[19][10] + coeff0_20*dmats0[20][10] + coeff0_21*dmats0[21][10] + coeff0_22*dmats0[22][10] + coeff0_23*dmats0[23][10] + coeff0_24*dmats0[24][10] + coeff0_25*dmats0[25][10] + coeff0_26*dmats0[26][10] + coeff0_27*dmats0[27][10] + coeff0_28*dmats0[28][10] + coeff0_29*dmats0[29][10] + coeff0_30*dmats0[30][10] + coeff0_31*dmats0[31][10] + coeff0_32*dmats0[32][10] + coeff0_33*dmats0[33][10] + coeff0_34*dmats0[34][10];
          new_coeff0_11 = coeff0_0*dmats0[0][11] + coeff0_1*dmats0[1][11] + coeff0_2*dmats0[2][11] + coeff0_3*dmats0[3][11] + coeff0_4*dmats0[4][11] + coeff0_5*dmats0[5][11] + coeff0_6*dmats0[6][11] + coeff0_7*dmats0[7][11] + coeff0_8*dmats0[8][11] + coeff0_9*dmats0[9][11] + coeff0_10*dmats0[10][11] + coeff0_11*dmats0[11][11] + coeff0_12*dmats0[12][11] + coeff0_13*dmats0[13][11] + coeff0_14*dmats0[14][11] + coeff0_15*dmats0[15][11] + coeff0_16*dmats0[16][11] + coeff0_17*dmats0[17][11] + coeff0_18*dmats0[18][11] + coeff0_19*dmats0[19][11] + coeff0_20*dmats0[20][11] + coeff0_21*dmats0[21][11] + coeff0_22*dmats0[22][11] + coeff0_23*dmats0[23][11] + coeff0_24*dmats0[24][11] + coeff0_25*dmats0[25][11] + coeff0_26*dmats0[26][11] + coeff0_27*dmats0[27][11] + coeff0_28*dmats0[28][11] + coeff0_29*dmats0[29][11] + coeff0_30*dmats0[30][11] + coeff0_31*dmats0[31][11] + coeff0_32*dmats0[32][11] + coeff0_33*dmats0[33][11] + coeff0_34*dmats0[34][11];
          new_coeff0_12 = coeff0_0*dmats0[0][12] + coeff0_1*dmats0[1][12] + coeff0_2*dmats0[2][12] + coeff0_3*dmats0[3][12] + coeff0_4*dmats0[4][12] + coeff0_5*dmats0[5][12] + coeff0_6*dmats0[6][12] + coeff0_7*dmats0[7][12] + coeff0_8*dmats0[8][12] + coeff0_9*dmats0[9][12] + coeff0_10*dmats0[10][12] + coeff0_11*dmats0[11][12] + coeff0_12*dmats0[12][12] + coeff0_13*dmats0[13][12] + coeff0_14*dmats0[14][12] + coeff0_15*dmats0[15][12] + coeff0_16*dmats0[16][12] + coeff0_17*dmats0[17][12] + coeff0_18*dmats0[18][12] + coeff0_19*dmats0[19][12] + coeff0_20*dmats0[20][12] + coeff0_21*dmats0[21][12] + coeff0_22*dmats0[22][12] + coeff0_23*dmats0[23][12] + coeff0_24*dmats0[24][12] + coeff0_25*dmats0[25][12] + coeff0_26*dmats0[26][12] + coeff0_27*dmats0[27][12] + coeff0_28*dmats0[28][12] + coeff0_29*dmats0[29][12] + coeff0_30*dmats0[30][12] + coeff0_31*dmats0[31][12] + coeff0_32*dmats0[32][12] + coeff0_33*dmats0[33][12] + coeff0_34*dmats0[34][12];
          new_coeff0_13 = coeff0_0*dmats0[0][13] + coeff0_1*dmats0[1][13] + coeff0_2*dmats0[2][13] + coeff0_3*dmats0[3][13] + coeff0_4*dmats0[4][13] + coeff0_5*dmats0[5][13] + coeff0_6*dmats0[6][13] + coeff0_7*dmats0[7][13] + coeff0_8*dmats0[8][13] + coeff0_9*dmats0[9][13] + coeff0_10*dmats0[10][13] + coeff0_11*dmats0[11][13] + coeff0_12*dmats0[12][13] + coeff0_13*dmats0[13][13] + coeff0_14*dmats0[14][13] + coeff0_15*dmats0[15][13] + coeff0_16*dmats0[16][13] + coeff0_17*dmats0[17][13] + coeff0_18*dmats0[18][13] + coeff0_19*dmats0[19][13] + coeff0_20*dmats0[20][13] + coeff0_21*dmats0[21][13] + coeff0_22*dmats0[22][13] + coeff0_23*dmats0[23][13] + coeff0_24*dmats0[24][13] + coeff0_25*dmats0[25][13] + coeff0_26*dmats0[26][13] + coeff0_27*dmats0[27][13] + coeff0_28*dmats0[28][13] + coeff0_29*dmats0[29][13] + coeff0_30*dmats0[30][13] + coeff0_31*dmats0[31][13] + coeff0_32*dmats0[32][13] + coeff0_33*dmats0[33][13] + coeff0_34*dmats0[34][13];
          new_coeff0_14 = coeff0_0*dmats0[0][14] + coeff0_1*dmats0[1][14] + coeff0_2*dmats0[2][14] + coeff0_3*dmats0[3][14] + coeff0_4*dmats0[4][14] + coeff0_5*dmats0[5][14] + coeff0_6*dmats0[6][14] + coeff0_7*dmats0[7][14] + coeff0_8*dmats0[8][14] + coeff0_9*dmats0[9][14] + coeff0_10*dmats0[10][14] + coeff0_11*dmats0[11][14] + coeff0_12*dmats0[12][14] + coeff0_13*dmats0[13][14] + coeff0_14*dmats0[14][14] + coeff0_15*dmats0[15][14] + coeff0_16*dmats0[16][14] + coeff0_17*dmats0[17][14] + coeff0_18*dmats0[18][14] + coeff0_19*dmats0[19][14] + coeff0_20*dmats0[20][14] + coeff0_21*dmats0[21][14] + coeff0_22*dmats0[22][14] + coeff0_23*dmats0[23][14] + coeff0_24*dmats0[24][14] + coeff0_25*dmats0[25][14] + coeff0_26*dmats0[26][14] + coeff0_27*dmats0[27][14] + coeff0_28*dmats0[28][14] + coeff0_29*dmats0[29][14] + coeff0_30*dmats0[30][14] + coeff0_31*dmats0[31][14] + coeff0_32*dmats0[32][14] + coeff0_33*dmats0[33][14] + coeff0_34*dmats0[34][14];
          new_coeff0_15 = coeff0_0*dmats0[0][15] + coeff0_1*dmats0[1][15] + coeff0_2*dmats0[2][15] + coeff0_3*dmats0[3][15] + coeff0_4*dmats0[4][15] + coeff0_5*dmats0[5][15] + coeff0_6*dmats0[6][15] + coeff0_7*dmats0[7][15] + coeff0_8*dmats0[8][15] + coeff0_9*dmats0[9][15] + coeff0_10*dmats0[10][15] + coeff0_11*dmats0[11][15] + coeff0_12*dmats0[12][15] + coeff0_13*dmats0[13][15] + coeff0_14*dmats0[14][15] + coeff0_15*dmats0[15][15] + coeff0_16*dmats0[16][15] + coeff0_17*dmats0[17][15] + coeff0_18*dmats0[18][15] + coeff0_19*dmats0[19][15] + coeff0_20*dmats0[20][15] + coeff0_21*dmats0[21][15] + coeff0_22*dmats0[22][15] + coeff0_23*dmats0[23][15] + coeff0_24*dmats0[24][15] + coeff0_25*dmats0[25][15] + coeff0_26*dmats0[26][15] + coeff0_27*dmats0[27][15] + coeff0_28*dmats0[28][15] + coeff0_29*dmats0[29][15] + coeff0_30*dmats0[30][15] + coeff0_31*dmats0[31][15] + coeff0_32*dmats0[32][15] + coeff0_33*dmats0[33][15] + coeff0_34*dmats0[34][15];
          new_coeff0_16 = coeff0_0*dmats0[0][16] + coeff0_1*dmats0[1][16] + coeff0_2*dmats0[2][16] + coeff0_3*dmats0[3][16] + coeff0_4*dmats0[4][16] + coeff0_5*dmats0[5][16] + coeff0_6*dmats0[6][16] + coeff0_7*dmats0[7][16] + coeff0_8*dmats0[8][16] + coeff0_9*dmats0[9][16] + coeff0_10*dmats0[10][16] + coeff0_11*dmats0[11][16] + coeff0_12*dmats0[12][16] + coeff0_13*dmats0[13][16] + coeff0_14*dmats0[14][16] + coeff0_15*dmats0[15][16] + coeff0_16*dmats0[16][16] + coeff0_17*dmats0[17][16] + coeff0_18*dmats0[18][16] + coeff0_19*dmats0[19][16] + coeff0_20*dmats0[20][16] + coeff0_21*dmats0[21][16] + coeff0_22*dmats0[22][16] + coeff0_23*dmats0[23][16] + coeff0_24*dmats0[24][16] + coeff0_25*dmats0[25][16] + coeff0_26*dmats0[26][16] + coeff0_27*dmats0[27][16] + coeff0_28*dmats0[28][16] + coeff0_29*dmats0[29][16] + coeff0_30*dmats0[30][16] + coeff0_31*dmats0[31][16] + coeff0_32*dmats0[32][16] + coeff0_33*dmats0[33][16] + coeff0_34*dmats0[34][16];
          new_coeff0_17 = coeff0_0*dmats0[0][17] + coeff0_1*dmats0[1][17] + coeff0_2*dmats0[2][17] + coeff0_3*dmats0[3][17] + coeff0_4*dmats0[4][17] + coeff0_5*dmats0[5][17] + coeff0_6*dmats0[6][17] + coeff0_7*dmats0[7][17] + coeff0_8*dmats0[8][17] + coeff0_9*dmats0[9][17] + coeff0_10*dmats0[10][17] + coeff0_11*dmats0[11][17] + coeff0_12*dmats0[12][17] + coeff0_13*dmats0[13][17] + coeff0_14*dmats0[14][17] + coeff0_15*dmats0[15][17] + coeff0_16*dmats0[16][17] + coeff0_17*dmats0[17][17] + coeff0_18*dmats0[18][17] + coeff0_19*dmats0[19][17] + coeff0_20*dmats0[20][17] + coeff0_21*dmats0[21][17] + coeff0_22*dmats0[22][17] + coeff0_23*dmats0[23][17] + coeff0_24*dmats0[24][17] + coeff0_25*dmats0[25][17] + coeff0_26*dmats0[26][17] + coeff0_27*dmats0[27][17] + coeff0_28*dmats0[28][17] + coeff0_29*dmats0[29][17] + coeff0_30*dmats0[30][17] + coeff0_31*dmats0[31][17] + coeff0_32*dmats0[32][17] + coeff0_33*dmats0[33][17] + coeff0_34*dmats0[34][17];
          new_coeff0_18 = coeff0_0*dmats0[0][18] + coeff0_1*dmats0[1][18] + coeff0_2*dmats0[2][18] + coeff0_3*dmats0[3][18] + coeff0_4*dmats0[4][18] + coeff0_5*dmats0[5][18] + coeff0_6*dmats0[6][18] + coeff0_7*dmats0[7][18] + coeff0_8*dmats0[8][18] + coeff0_9*dmats0[9][18] + coeff0_10*dmats0[10][18] + coeff0_11*dmats0[11][18] + coeff0_12*dmats0[12][18] + coeff0_13*dmats0[13][18] + coeff0_14*dmats0[14][18] + coeff0_15*dmats0[15][18] + coeff0_16*dmats0[16][18] + coeff0_17*dmats0[17][18] + coeff0_18*dmats0[18][18] + coeff0_19*dmats0[19][18] + coeff0_20*dmats0[20][18] + coeff0_21*dmats0[21][18] + coeff0_22*dmats0[22][18] + coeff0_23*dmats0[23][18] + coeff0_24*dmats0[24][18] + coeff0_25*dmats0[25][18] + coeff0_26*dmats0[26][18] + coeff0_27*dmats0[27][18] + coeff0_28*dmats0[28][18] + coeff0_29*dmats0[29][18] + coeff0_30*dmats0[30][18] + coeff0_31*dmats0[31][18] + coeff0_32*dmats0[32][18] + coeff0_33*dmats0[33][18] + coeff0_34*dmats0[34][18];
          new_coeff0_19 = coeff0_0*dmats0[0][19] + coeff0_1*dmats0[1][19] + coeff0_2*dmats0[2][19] + coeff0_3*dmats0[3][19] + coeff0_4*dmats0[4][19] + coeff0_5*dmats0[5][19] + coeff0_6*dmats0[6][19] + coeff0_7*dmats0[7][19] + coeff0_8*dmats0[8][19] + coeff0_9*dmats0[9][19] + coeff0_10*dmats0[10][19] + coeff0_11*dmats0[11][19] + coeff0_12*dmats0[12][19] + coeff0_13*dmats0[13][19] + coeff0_14*dmats0[14][19] + coeff0_15*dmats0[15][19] + coeff0_16*dmats0[16][19] + coeff0_17*dmats0[17][19] + coeff0_18*dmats0[18][19] + coeff0_19*dmats0[19][19] + coeff0_20*dmats0[20][19] + coeff0_21*dmats0[21][19] + coeff0_22*dmats0[22][19] + coeff0_23*dmats0[23][19] + coeff0_24*dmats0[24][19] + coeff0_25*dmats0[25][19] + coeff0_26*dmats0[26][19] + coeff0_27*dmats0[27][19] + coeff0_28*dmats0[28][19] + coeff0_29*dmats0[29][19] + coeff0_30*dmats0[30][19] + coeff0_31*dmats0[31][19] + coeff0_32*dmats0[32][19] + coeff0_33*dmats0[33][19] + coeff0_34*dmats0[34][19];
          new_coeff0_20 = coeff0_0*dmats0[0][20] + coeff0_1*dmats0[1][20] + coeff0_2*dmats0[2][20] + coeff0_3*dmats0[3][20] + coeff0_4*dmats0[4][20] + coeff0_5*dmats0[5][20] + coeff0_6*dmats0[6][20] + coeff0_7*dmats0[7][20] + coeff0_8*dmats0[8][20] + coeff0_9*dmats0[9][20] + coeff0_10*dmats0[10][20] + coeff0_11*dmats0[11][20] + coeff0_12*dmats0[12][20] + coeff0_13*dmats0[13][20] + coeff0_14*dmats0[14][20] + coeff0_15*dmats0[15][20] + coeff0_16*dmats0[16][20] + coeff0_17*dmats0[17][20] + coeff0_18*dmats0[18][20] + coeff0_19*dmats0[19][20] + coeff0_20*dmats0[20][20] + coeff0_21*dmats0[21][20] + coeff0_22*dmats0[22][20] + coeff0_23*dmats0[23][20] + coeff0_24*dmats0[24][20] + coeff0_25*dmats0[25][20] + coeff0_26*dmats0[26][20] + coeff0_27*dmats0[27][20] + coeff0_28*dmats0[28][20] + coeff0_29*dmats0[29][20] + coeff0_30*dmats0[30][20] + coeff0_31*dmats0[31][20] + coeff0_32*dmats0[32][20] + coeff0_33*dmats0[33][20] + coeff0_34*dmats0[34][20];
          new_coeff0_21 = coeff0_0*dmats0[0][21] + coeff0_1*dmats0[1][21] + coeff0_2*dmats0[2][21] + coeff0_3*dmats0[3][21] + coeff0_4*dmats0[4][21] + coeff0_5*dmats0[5][21] + coeff0_6*dmats0[6][21] + coeff0_7*dmats0[7][21] + coeff0_8*dmats0[8][21] + coeff0_9*dmats0[9][21] + coeff0_10*dmats0[10][21] + coeff0_11*dmats0[11][21] + coeff0_12*dmats0[12][21] + coeff0_13*dmats0[13][21] + coeff0_14*dmats0[14][21] + coeff0_15*dmats0[15][21] + coeff0_16*dmats0[16][21] + coeff0_17*dmats0[17][21] + coeff0_18*dmats0[18][21] + coeff0_19*dmats0[19][21] + coeff0_20*dmats0[20][21] + coeff0_21*dmats0[21][21] + coeff0_22*dmats0[22][21] + coeff0_23*dmats0[23][21] + coeff0_24*dmats0[24][21] + coeff0_25*dmats0[25][21] + coeff0_26*dmats0[26][21] + coeff0_27*dmats0[27][21] + coeff0_28*dmats0[28][21] + coeff0_29*dmats0[29][21] + coeff0_30*dmats0[30][21] + coeff0_31*dmats0[31][21] + coeff0_32*dmats0[32][21] + coeff0_33*dmats0[33][21] + coeff0_34*dmats0[34][21];
          new_coeff0_22 = coeff0_0*dmats0[0][22] + coeff0_1*dmats0[1][22] + coeff0_2*dmats0[2][22] + coeff0_3*dmats0[3][22] + coeff0_4*dmats0[4][22] + coeff0_5*dmats0[5][22] + coeff0_6*dmats0[6][22] + coeff0_7*dmats0[7][22] + coeff0_8*dmats0[8][22] + coeff0_9*dmats0[9][22] + coeff0_10*dmats0[10][22] + coeff0_11*dmats0[11][22] + coeff0_12*dmats0[12][22] + coeff0_13*dmats0[13][22] + coeff0_14*dmats0[14][22] + coeff0_15*dmats0[15][22] + coeff0_16*dmats0[16][22] + coeff0_17*dmats0[17][22] + coeff0_18*dmats0[18][22] + coeff0_19*dmats0[19][22] + coeff0_20*dmats0[20][22] + coeff0_21*dmats0[21][22] + coeff0_22*dmats0[22][22] + coeff0_23*dmats0[23][22] + coeff0_24*dmats0[24][22] + coeff0_25*dmats0[25][22] + coeff0_26*dmats0[26][22] + coeff0_27*dmats0[27][22] + coeff0_28*dmats0[28][22] + coeff0_29*dmats0[29][22] + coeff0_30*dmats0[30][22] + coeff0_31*dmats0[31][22] + coeff0_32*dmats0[32][22] + coeff0_33*dmats0[33][22] + coeff0_34*dmats0[34][22];
          new_coeff0_23 = coeff0_0*dmats0[0][23] + coeff0_1*dmats0[1][23] + coeff0_2*dmats0[2][23] + coeff0_3*dmats0[3][23] + coeff0_4*dmats0[4][23] + coeff0_5*dmats0[5][23] + coeff0_6*dmats0[6][23] + coeff0_7*dmats0[7][23] + coeff0_8*dmats0[8][23] + coeff0_9*dmats0[9][23] + coeff0_10*dmats0[10][23] + coeff0_11*dmats0[11][23] + coeff0_12*dmats0[12][23] + coeff0_13*dmats0[13][23] + coeff0_14*dmats0[14][23] + coeff0_15*dmats0[15][23] + coeff0_16*dmats0[16][23] + coeff0_17*dmats0[17][23] + coeff0_18*dmats0[18][23] + coeff0_19*dmats0[19][23] + coeff0_20*dmats0[20][23] + coeff0_21*dmats0[21][23] + coeff0_22*dmats0[22][23] + coeff0_23*dmats0[23][23] + coeff0_24*dmats0[24][23] + coeff0_25*dmats0[25][23] + coeff0_26*dmats0[26][23] + coeff0_27*dmats0[27][23] + coeff0_28*dmats0[28][23] + coeff0_29*dmats0[29][23] + coeff0_30*dmats0[30][23] + coeff0_31*dmats0[31][23] + coeff0_32*dmats0[32][23] + coeff0_33*dmats0[33][23] + coeff0_34*dmats0[34][23];
          new_coeff0_24 = coeff0_0*dmats0[0][24] + coeff0_1*dmats0[1][24] + coeff0_2*dmats0[2][24] + coeff0_3*dmats0[3][24] + coeff0_4*dmats0[4][24] + coeff0_5*dmats0[5][24] + coeff0_6*dmats0[6][24] + coeff0_7*dmats0[7][24] + coeff0_8*dmats0[8][24] + coeff0_9*dmats0[9][24] + coeff0_10*dmats0[10][24] + coeff0_11*dmats0[11][24] + coeff0_12*dmats0[12][24] + coeff0_13*dmats0[13][24] + coeff0_14*dmats0[14][24] + coeff0_15*dmats0[15][24] + coeff0_16*dmats0[16][24] + coeff0_17*dmats0[17][24] + coeff0_18*dmats0[18][24] + coeff0_19*dmats0[19][24] + coeff0_20*dmats0[20][24] + coeff0_21*dmats0[21][24] + coeff0_22*dmats0[22][24] + coeff0_23*dmats0[23][24] + coeff0_24*dmats0[24][24] + coeff0_25*dmats0[25][24] + coeff0_26*dmats0[26][24] + coeff0_27*dmats0[27][24] + coeff0_28*dmats0[28][24] + coeff0_29*dmats0[29][24] + coeff0_30*dmats0[30][24] + coeff0_31*dmats0[31][24] + coeff0_32*dmats0[32][24] + coeff0_33*dmats0[33][24] + coeff0_34*dmats0[34][24];
          new_coeff0_25 = coeff0_0*dmats0[0][25] + coeff0_1*dmats0[1][25] + coeff0_2*dmats0[2][25] + coeff0_3*dmats0[3][25] + coeff0_4*dmats0[4][25] + coeff0_5*dmats0[5][25] + coeff0_6*dmats0[6][25] + coeff0_7*dmats0[7][25] + coeff0_8*dmats0[8][25] + coeff0_9*dmats0[9][25] + coeff0_10*dmats0[10][25] + coeff0_11*dmats0[11][25] + coeff0_12*dmats0[12][25] + coeff0_13*dmats0[13][25] + coeff0_14*dmats0[14][25] + coeff0_15*dmats0[15][25] + coeff0_16*dmats0[16][25] + coeff0_17*dmats0[17][25] + coeff0_18*dmats0[18][25] + coeff0_19*dmats0[19][25] + coeff0_20*dmats0[20][25] + coeff0_21*dmats0[21][25] + coeff0_22*dmats0[22][25] + coeff0_23*dmats0[23][25] + coeff0_24*dmats0[24][25] + coeff0_25*dmats0[25][25] + coeff0_26*dmats0[26][25] + coeff0_27*dmats0[27][25] + coeff0_28*dmats0[28][25] + coeff0_29*dmats0[29][25] + coeff0_30*dmats0[30][25] + coeff0_31*dmats0[31][25] + coeff0_32*dmats0[32][25] + coeff0_33*dmats0[33][25] + coeff0_34*dmats0[34][25];
          new_coeff0_26 = coeff0_0*dmats0[0][26] + coeff0_1*dmats0[1][26] + coeff0_2*dmats0[2][26] + coeff0_3*dmats0[3][26] + coeff0_4*dmats0[4][26] + coeff0_5*dmats0[5][26] + coeff0_6*dmats0[6][26] + coeff0_7*dmats0[7][26] + coeff0_8*dmats0[8][26] + coeff0_9*dmats0[9][26] + coeff0_10*dmats0[10][26] + coeff0_11*dmats0[11][26] + coeff0_12*dmats0[12][26] + coeff0_13*dmats0[13][26] + coeff0_14*dmats0[14][26] + coeff0_15*dmats0[15][26] + coeff0_16*dmats0[16][26] + coeff0_17*dmats0[17][26] + coeff0_18*dmats0[18][26] + coeff0_19*dmats0[19][26] + coeff0_20*dmats0[20][26] + coeff0_21*dmats0[21][26] + coeff0_22*dmats0[22][26] + coeff0_23*dmats0[23][26] + coeff0_24*dmats0[24][26] + coeff0_25*dmats0[25][26] + coeff0_26*dmats0[26][26] + coeff0_27*dmats0[27][26] + coeff0_28*dmats0[28][26] + coeff0_29*dmats0[29][26] + coeff0_30*dmats0[30][26] + coeff0_31*dmats0[31][26] + coeff0_32*dmats0[32][26] + coeff0_33*dmats0[33][26] + coeff0_34*dmats0[34][26];
          new_coeff0_27 = coeff0_0*dmats0[0][27] + coeff0_1*dmats0[1][27] + coeff0_2*dmats0[2][27] + coeff0_3*dmats0[3][27] + coeff0_4*dmats0[4][27] + coeff0_5*dmats0[5][27] + coeff0_6*dmats0[6][27] + coeff0_7*dmats0[7][27] + coeff0_8*dmats0[8][27] + coeff0_9*dmats0[9][27] + coeff0_10*dmats0[10][27] + coeff0_11*dmats0[11][27] + coeff0_12*dmats0[12][27] + coeff0_13*dmats0[13][27] + coeff0_14*dmats0[14][27] + coeff0_15*dmats0[15][27] + coeff0_16*dmats0[16][27] + coeff0_17*dmats0[17][27] + coeff0_18*dmats0[18][27] + coeff0_19*dmats0[19][27] + coeff0_20*dmats0[20][27] + coeff0_21*dmats0[21][27] + coeff0_22*dmats0[22][27] + coeff0_23*dmats0[23][27] + coeff0_24*dmats0[24][27] + coeff0_25*dmats0[25][27] + coeff0_26*dmats0[26][27] + coeff0_27*dmats0[27][27] + coeff0_28*dmats0[28][27] + coeff0_29*dmats0[29][27] + coeff0_30*dmats0[30][27] + coeff0_31*dmats0[31][27] + coeff0_32*dmats0[32][27] + coeff0_33*dmats0[33][27] + coeff0_34*dmats0[34][27];
          new_coeff0_28 = coeff0_0*dmats0[0][28] + coeff0_1*dmats0[1][28] + coeff0_2*dmats0[2][28] + coeff0_3*dmats0[3][28] + coeff0_4*dmats0[4][28] + coeff0_5*dmats0[5][28] + coeff0_6*dmats0[6][28] + coeff0_7*dmats0[7][28] + coeff0_8*dmats0[8][28] + coeff0_9*dmats0[9][28] + coeff0_10*dmats0[10][28] + coeff0_11*dmats0[11][28] + coeff0_12*dmats0[12][28] + coeff0_13*dmats0[13][28] + coeff0_14*dmats0[14][28] + coeff0_15*dmats0[15][28] + coeff0_16*dmats0[16][28] + coeff0_17*dmats0[17][28] + coeff0_18*dmats0[18][28] + coeff0_19*dmats0[19][28] + coeff0_20*dmats0[20][28] + coeff0_21*dmats0[21][28] + coeff0_22*dmats0[22][28] + coeff0_23*dmats0[23][28] + coeff0_24*dmats0[24][28] + coeff0_25*dmats0[25][28] + coeff0_26*dmats0[26][28] + coeff0_27*dmats0[27][28] + coeff0_28*dmats0[28][28] + coeff0_29*dmats0[29][28] + coeff0_30*dmats0[30][28] + coeff0_31*dmats0[31][28] + coeff0_32*dmats0[32][28] + coeff0_33*dmats0[33][28] + coeff0_34*dmats0[34][28];
          new_coeff0_29 = coeff0_0*dmats0[0][29] + coeff0_1*dmats0[1][29] + coeff0_2*dmats0[2][29] + coeff0_3*dmats0[3][29] + coeff0_4*dmats0[4][29] + coeff0_5*dmats0[5][29] + coeff0_6*dmats0[6][29] + coeff0_7*dmats0[7][29] + coeff0_8*dmats0[8][29] + coeff0_9*dmats0[9][29] + coeff0_10*dmats0[10][29] + coeff0_11*dmats0[11][29] + coeff0_12*dmats0[12][29] + coeff0_13*dmats0[13][29] + coeff0_14*dmats0[14][29] + coeff0_15*dmats0[15][29] + coeff0_16*dmats0[16][29] + coeff0_17*dmats0[17][29] + coeff0_18*dmats0[18][29] + coeff0_19*dmats0[19][29] + coeff0_20*dmats0[20][29] + coeff0_21*dmats0[21][29] + coeff0_22*dmats0[22][29] + coeff0_23*dmats0[23][29] + coeff0_24*dmats0[24][29] + coeff0_25*dmats0[25][29] + coeff0_26*dmats0[26][29] + coeff0_27*dmats0[27][29] + coeff0_28*dmats0[28][29] + coeff0_29*dmats0[29][29] + coeff0_30*dmats0[30][29] + coeff0_31*dmats0[31][29] + coeff0_32*dmats0[32][29] + coeff0_33*dmats0[33][29] + coeff0_34*dmats0[34][29];
          new_coeff0_30 = coeff0_0*dmats0[0][30] + coeff0_1*dmats0[1][30] + coeff0_2*dmats0[2][30] + coeff0_3*dmats0[3][30] + coeff0_4*dmats0[4][30] + coeff0_5*dmats0[5][30] + coeff0_6*dmats0[6][30] + coeff0_7*dmats0[7][30] + coeff0_8*dmats0[8][30] + coeff0_9*dmats0[9][30] + coeff0_10*dmats0[10][30] + coeff0_11*dmats0[11][30] + coeff0_12*dmats0[12][30] + coeff0_13*dmats0[13][30] + coeff0_14*dmats0[14][30] + coeff0_15*dmats0[15][30] + coeff0_16*dmats0[16][30] + coeff0_17*dmats0[17][30] + coeff0_18*dmats0[18][30] + coeff0_19*dmats0[19][30] + coeff0_20*dmats0[20][30] + coeff0_21*dmats0[21][30] + coeff0_22*dmats0[22][30] + coeff0_23*dmats0[23][30] + coeff0_24*dmats0[24][30] + coeff0_25*dmats0[25][30] + coeff0_26*dmats0[26][30] + coeff0_27*dmats0[27][30] + coeff0_28*dmats0[28][30] + coeff0_29*dmats0[29][30] + coeff0_30*dmats0[30][30] + coeff0_31*dmats0[31][30] + coeff0_32*dmats0[32][30] + coeff0_33*dmats0[33][30] + coeff0_34*dmats0[34][30];
          new_coeff0_31 = coeff0_0*dmats0[0][31] + coeff0_1*dmats0[1][31] + coeff0_2*dmats0[2][31] + coeff0_3*dmats0[3][31] + coeff0_4*dmats0[4][31] + coeff0_5*dmats0[5][31] + coeff0_6*dmats0[6][31] + coeff0_7*dmats0[7][31] + coeff0_8*dmats0[8][31] + coeff0_9*dmats0[9][31] + coeff0_10*dmats0[10][31] + coeff0_11*dmats0[11][31] + coeff0_12*dmats0[12][31] + coeff0_13*dmats0[13][31] + coeff0_14*dmats0[14][31] + coeff0_15*dmats0[15][31] + coeff0_16*dmats0[16][31] + coeff0_17*dmats0[17][31] + coeff0_18*dmats0[18][31] + coeff0_19*dmats0[19][31] + coeff0_20*dmats0[20][31] + coeff0_21*dmats0[21][31] + coeff0_22*dmats0[22][31] + coeff0_23*dmats0[23][31] + coeff0_24*dmats0[24][31] + coeff0_25*dmats0[25][31] + coeff0_26*dmats0[26][31] + coeff0_27*dmats0[27][31] + coeff0_28*dmats0[28][31] + coeff0_29*dmats0[29][31] + coeff0_30*dmats0[30][31] + coeff0_31*dmats0[31][31] + coeff0_32*dmats0[32][31] + coeff0_33*dmats0[33][31] + coeff0_34*dmats0[34][31];
          new_coeff0_32 = coeff0_0*dmats0[0][32] + coeff0_1*dmats0[1][32] + coeff0_2*dmats0[2][32] + coeff0_3*dmats0[3][32] + coeff0_4*dmats0[4][32] + coeff0_5*dmats0[5][32] + coeff0_6*dmats0[6][32] + coeff0_7*dmats0[7][32] + coeff0_8*dmats0[8][32] + coeff0_9*dmats0[9][32] + coeff0_10*dmats0[10][32] + coeff0_11*dmats0[11][32] + coeff0_12*dmats0[12][32] + coeff0_13*dmats0[13][32] + coeff0_14*dmats0[14][32] + coeff0_15*dmats0[15][32] + coeff0_16*dmats0[16][32] + coeff0_17*dmats0[17][32] + coeff0_18*dmats0[18][32] + coeff0_19*dmats0[19][32] + coeff0_20*dmats0[20][32] + coeff0_21*dmats0[21][32] + coeff0_22*dmats0[22][32] + coeff0_23*dmats0[23][32] + coeff0_24*dmats0[24][32] + coeff0_25*dmats0[25][32] + coeff0_26*dmats0[26][32] + coeff0_27*dmats0[27][32] + coeff0_28*dmats0[28][32] + coeff0_29*dmats0[29][32] + coeff0_30*dmats0[30][32] + coeff0_31*dmats0[31][32] + coeff0_32*dmats0[32][32] + coeff0_33*dmats0[33][32] + coeff0_34*dmats0[34][32];
          new_coeff0_33 = coeff0_0*dmats0[0][33] + coeff0_1*dmats0[1][33] + coeff0_2*dmats0[2][33] + coeff0_3*dmats0[3][33] + coeff0_4*dmats0[4][33] + coeff0_5*dmats0[5][33] + coeff0_6*dmats0[6][33] + coeff0_7*dmats0[7][33] + coeff0_8*dmats0[8][33] + coeff0_9*dmats0[9][33] + coeff0_10*dmats0[10][33] + coeff0_11*dmats0[11][33] + coeff0_12*dmats0[12][33] + coeff0_13*dmats0[13][33] + coeff0_14*dmats0[14][33] + coeff0_15*dmats0[15][33] + coeff0_16*dmats0[16][33] + coeff0_17*dmats0[17][33] + coeff0_18*dmats0[18][33] + coeff0_19*dmats0[19][33] + coeff0_20*dmats0[20][33] + coeff0_21*dmats0[21][33] + coeff0_22*dmats0[22][33] + coeff0_23*dmats0[23][33] + coeff0_24*dmats0[24][33] + coeff0_25*dmats0[25][33] + coeff0_26*dmats0[26][33] + coeff0_27*dmats0[27][33] + coeff0_28*dmats0[28][33] + coeff0_29*dmats0[29][33] + coeff0_30*dmats0[30][33] + coeff0_31*dmats0[31][33] + coeff0_32*dmats0[32][33] + coeff0_33*dmats0[33][33] + coeff0_34*dmats0[34][33];
          new_coeff0_34 = coeff0_0*dmats0[0][34] + coeff0_1*dmats0[1][34] + coeff0_2*dmats0[2][34] + coeff0_3*dmats0[3][34] + coeff0_4*dmats0[4][34] + coeff0_5*dmats0[5][34] + coeff0_6*dmats0[6][34] + coeff0_7*dmats0[7][34] + coeff0_8*dmats0[8][34] + coeff0_9*dmats0[9][34] + coeff0_10*dmats0[10][34] + coeff0_11*dmats0[11][34] + coeff0_12*dmats0[12][34] + coeff0_13*dmats0[13][34] + coeff0_14*dmats0[14][34] + coeff0_15*dmats0[15][34] + coeff0_16*dmats0[16][34] + coeff0_17*dmats0[17][34] + coeff0_18*dmats0[18][34] + coeff0_19*dmats0[19][34] + coeff0_20*dmats0[20][34] + coeff0_21*dmats0[21][34] + coeff0_22*dmats0[22][34] + coeff0_23*dmats0[23][34] + coeff0_24*dmats0[24][34] + coeff0_25*dmats0[25][34] + coeff0_26*dmats0[26][34] + coeff0_27*dmats0[27][34] + coeff0_28*dmats0[28][34] + coeff0_29*dmats0[29][34] + coeff0_30*dmats0[30][34] + coeff0_31*dmats0[31][34] + coeff0_32*dmats0[32][34] + coeff0_33*dmats0[33][34] + coeff0_34*dmats0[34][34];
        }
        if(combinations[deriv_num][j] == 1)
        {
          new_coeff0_0 = coeff0_0*dmats1[0][0] + coeff0_1*dmats1[1][0] + coeff0_2*dmats1[2][0] + coeff0_3*dmats1[3][0] + coeff0_4*dmats1[4][0] + coeff0_5*dmats1[5][0] + coeff0_6*dmats1[6][0] + coeff0_7*dmats1[7][0] + coeff0_8*dmats1[8][0] + coeff0_9*dmats1[9][0] + coeff0_10*dmats1[10][0] + coeff0_11*dmats1[11][0] + coeff0_12*dmats1[12][0] + coeff0_13*dmats1[13][0] + coeff0_14*dmats1[14][0] + coeff0_15*dmats1[15][0] + coeff0_16*dmats1[16][0] + coeff0_17*dmats1[17][0] + coeff0_18*dmats1[18][0] + coeff0_19*dmats1[19][0] + coeff0_20*dmats1[20][0] + coeff0_21*dmats1[21][0] + coeff0_22*dmats1[22][0] + coeff0_23*dmats1[23][0] + coeff0_24*dmats1[24][0] + coeff0_25*dmats1[25][0] + coeff0_26*dmats1[26][0] + coeff0_27*dmats1[27][0] + coeff0_28*dmats1[28][0] + coeff0_29*dmats1[29][0] + coeff0_30*dmats1[30][0] + coeff0_31*dmats1[31][0] + coeff0_32*dmats1[32][0] + coeff0_33*dmats1[33][0] + coeff0_34*dmats1[34][0];
          new_coeff0_1 = coeff0_0*dmats1[0][1] + coeff0_1*dmats1[1][1] + coeff0_2*dmats1[2][1] + coeff0_3*dmats1[3][1] + coeff0_4*dmats1[4][1] + coeff0_5*dmats1[5][1] + coeff0_6*dmats1[6][1] + coeff0_7*dmats1[7][1] + coeff0_8*dmats1[8][1] + coeff0_9*dmats1[9][1] + coeff0_10*dmats1[10][1] + coeff0_11*dmats1[11][1] + coeff0_12*dmats1[12][1] + coeff0_13*dmats1[13][1] + coeff0_14*dmats1[14][1] + coeff0_15*dmats1[15][1] + coeff0_16*dmats1[16][1] + coeff0_17*dmats1[17][1] + coeff0_18*dmats1[18][1] + coeff0_19*dmats1[19][1] + coeff0_20*dmats1[20][1] + coeff0_21*dmats1[21][1] + coeff0_22*dmats1[22][1] + coeff0_23*dmats1[23][1] + coeff0_24*dmats1[24][1] + coeff0_25*dmats1[25][1] + coeff0_26*dmats1[26][1] + coeff0_27*dmats1[27][1] + coeff0_28*dmats1[28][1] + coeff0_29*dmats1[29][1] + coeff0_30*dmats1[30][1] + coeff0_31*dmats1[31][1] + coeff0_32*dmats1[32][1] + coeff0_33*dmats1[33][1] + coeff0_34*dmats1[34][1];
          new_coeff0_2 = coeff0_0*dmats1[0][2] + coeff0_1*dmats1[1][2] + coeff0_2*dmats1[2][2] + coeff0_3*dmats1[3][2] + coeff0_4*dmats1[4][2] + coeff0_5*dmats1[5][2] + coeff0_6*dmats1[6][2] + coeff0_7*dmats1[7][2] + coeff0_8*dmats1[8][2] + coeff0_9*dmats1[9][2] + coeff0_10*dmats1[10][2] + coeff0_11*dmats1[11][2] + coeff0_12*dmats1[12][2] + coeff0_13*dmats1[13][2] + coeff0_14*dmats1[14][2] + coeff0_15*dmats1[15][2] + coeff0_16*dmats1[16][2] + coeff0_17*dmats1[17][2] + coeff0_18*dmats1[18][2] + coeff0_19*dmats1[19][2] + coeff0_20*dmats1[20][2] + coeff0_21*dmats1[21][2] + coeff0_22*dmats1[22][2] + coeff0_23*dmats1[23][2] + coeff0_24*dmats1[24][2] + coeff0_25*dmats1[25][2] + coeff0_26*dmats1[26][2] + coeff0_27*dmats1[27][2] + coeff0_28*dmats1[28][2] + coeff0_29*dmats1[29][2] + coeff0_30*dmats1[30][2] + coeff0_31*dmats1[31][2] + coeff0_32*dmats1[32][2] + coeff0_33*dmats1[33][2] + coeff0_34*dmats1[34][2];
          new_coeff0_3 = coeff0_0*dmats1[0][3] + coeff0_1*dmats1[1][3] + coeff0_2*dmats1[2][3] + coeff0_3*dmats1[3][3] + coeff0_4*dmats1[4][3] + coeff0_5*dmats1[5][3] + coeff0_6*dmats1[6][3] + coeff0_7*dmats1[7][3] + coeff0_8*dmats1[8][3] + coeff0_9*dmats1[9][3] + coeff0_10*dmats1[10][3] + coeff0_11*dmats1[11][3] + coeff0_12*dmats1[12][3] + coeff0_13*dmats1[13][3] + coeff0_14*dmats1[14][3] + coeff0_15*dmats1[15][3] + coeff0_16*dmats1[16][3] + coeff0_17*dmats1[17][3] + coeff0_18*dmats1[18][3] + coeff0_19*dmats1[19][3] + coeff0_20*dmats1[20][3] + coeff0_21*dmats1[21][3] + coeff0_22*dmats1[22][3] + coeff0_23*dmats1[23][3] + coeff0_24*dmats1[24][3] + coeff0_25*dmats1[25][3] + coeff0_26*dmats1[26][3] + coeff0_27*dmats1[27][3] + coeff0_28*dmats1[28][3] + coeff0_29*dmats1[29][3] + coeff0_30*dmats1[30][3] + coeff0_31*dmats1[31][3] + coeff0_32*dmats1[32][3] + coeff0_33*dmats1[33][3] + coeff0_34*dmats1[34][3];
          new_coeff0_4 = coeff0_0*dmats1[0][4] + coeff0_1*dmats1[1][4] + coeff0_2*dmats1[2][4] + coeff0_3*dmats1[3][4] + coeff0_4*dmats1[4][4] + coeff0_5*dmats1[5][4] + coeff0_6*dmats1[6][4] + coeff0_7*dmats1[7][4] + coeff0_8*dmats1[8][4] + coeff0_9*dmats1[9][4] + coeff0_10*dmats1[10][4] + coeff0_11*dmats1[11][4] + coeff0_12*dmats1[12][4] + coeff0_13*dmats1[13][4] + coeff0_14*dmats1[14][4] + coeff0_15*dmats1[15][4] + coeff0_16*dmats1[16][4] + coeff0_17*dmats1[17][4] + coeff0_18*dmats1[18][4] + coeff0_19*dmats1[19][4] + coeff0_20*dmats1[20][4] + coeff0_21*dmats1[21][4] + coeff0_22*dmats1[22][4] + coeff0_23*dmats1[23][4] + coeff0_24*dmats1[24][4] + coeff0_25*dmats1[25][4] + coeff0_26*dmats1[26][4] + coeff0_27*dmats1[27][4] + coeff0_28*dmats1[28][4] + coeff0_29*dmats1[29][4] + coeff0_30*dmats1[30][4] + coeff0_31*dmats1[31][4] + coeff0_32*dmats1[32][4] + coeff0_33*dmats1[33][4] + coeff0_34*dmats1[34][4];
          new_coeff0_5 = coeff0_0*dmats1[0][5] + coeff0_1*dmats1[1][5] + coeff0_2*dmats1[2][5] + coeff0_3*dmats1[3][5] + coeff0_4*dmats1[4][5] + coeff0_5*dmats1[5][5] + coeff0_6*dmats1[6][5] + coeff0_7*dmats1[7][5] + coeff0_8*dmats1[8][5] + coeff0_9*dmats1[9][5] + coeff0_10*dmats1[10][5] + coeff0_11*dmats1[11][5] + coeff0_12*dmats1[12][5] + coeff0_13*dmats1[13][5] + coeff0_14*dmats1[14][5] + coeff0_15*dmats1[15][5] + coeff0_16*dmats1[16][5] + coeff0_17*dmats1[17][5] + coeff0_18*dmats1[18][5] + coeff0_19*dmats1[19][5] + coeff0_20*dmats1[20][5] + coeff0_21*dmats1[21][5] + coeff0_22*dmats1[22][5] + coeff0_23*dmats1[23][5] + coeff0_24*dmats1[24][5] + coeff0_25*dmats1[25][5] + coeff0_26*dmats1[26][5] + coeff0_27*dmats1[27][5] + coeff0_28*dmats1[28][5] + coeff0_29*dmats1[29][5] + coeff0_30*dmats1[30][5] + coeff0_31*dmats1[31][5] + coeff0_32*dmats1[32][5] + coeff0_33*dmats1[33][5] + coeff0_34*dmats1[34][5];
          new_coeff0_6 = coeff0_0*dmats1[0][6] + coeff0_1*dmats1[1][6] + coeff0_2*dmats1[2][6] + coeff0_3*dmats1[3][6] + coeff0_4*dmats1[4][6] + coeff0_5*dmats1[5][6] + coeff0_6*dmats1[6][6] + coeff0_7*dmats1[7][6] + coeff0_8*dmats1[8][6] + coeff0_9*dmats1[9][6] + coeff0_10*dmats1[10][6] + coeff0_11*dmats1[11][6] + coeff0_12*dmats1[12][6] + coeff0_13*dmats1[13][6] + coeff0_14*dmats1[14][6] + coeff0_15*dmats1[15][6] + coeff0_16*dmats1[16][6] + coeff0_17*dmats1[17][6] + coeff0_18*dmats1[18][6] + coeff0_19*dmats1[19][6] + coeff0_20*dmats1[20][6] + coeff0_21*dmats1[21][6] + coeff0_22*dmats1[22][6] + coeff0_23*dmats1[23][6] + coeff0_24*dmats1[24][6] + coeff0_25*dmats1[25][6] + coeff0_26*dmats1[26][6] + coeff0_27*dmats1[27][6] + coeff0_28*dmats1[28][6] + coeff0_29*dmats1[29][6] + coeff0_30*dmats1[30][6] + coeff0_31*dmats1[31][6] + coeff0_32*dmats1[32][6] + coeff0_33*dmats1[33][6] + coeff0_34*dmats1[34][6];
          new_coeff0_7 = coeff0_0*dmats1[0][7] + coeff0_1*dmats1[1][7] + coeff0_2*dmats1[2][7] + coeff0_3*dmats1[3][7] + coeff0_4*dmats1[4][7] + coeff0_5*dmats1[5][7] + coeff0_6*dmats1[6][7] + coeff0_7*dmats1[7][7] + coeff0_8*dmats1[8][7] + coeff0_9*dmats1[9][7] + coeff0_10*dmats1[10][7] + coeff0_11*dmats1[11][7] + coeff0_12*dmats1[12][7] + coeff0_13*dmats1[13][7] + coeff0_14*dmats1[14][7] + coeff0_15*dmats1[15][7] + coeff0_16*dmats1[16][7] + coeff0_17*dmats1[17][7] + coeff0_18*dmats1[18][7] + coeff0_19*dmats1[19][7] + coeff0_20*dmats1[20][7] + coeff0_21*dmats1[21][7] + coeff0_22*dmats1[22][7] + coeff0_23*dmats1[23][7] + coeff0_24*dmats1[24][7] + coeff0_25*dmats1[25][7] + coeff0_26*dmats1[26][7] + coeff0_27*dmats1[27][7] + coeff0_28*dmats1[28][7] + coeff0_29*dmats1[29][7] + coeff0_30*dmats1[30][7] + coeff0_31*dmats1[31][7] + coeff0_32*dmats1[32][7] + coeff0_33*dmats1[33][7] + coeff0_34*dmats1[34][7];
          new_coeff0_8 = coeff0_0*dmats1[0][8] + coeff0_1*dmats1[1][8] + coeff0_2*dmats1[2][8] + coeff0_3*dmats1[3][8] + coeff0_4*dmats1[4][8] + coeff0_5*dmats1[5][8] + coeff0_6*dmats1[6][8] + coeff0_7*dmats1[7][8] + coeff0_8*dmats1[8][8] + coeff0_9*dmats1[9][8] + coeff0_10*dmats1[10][8] + coeff0_11*dmats1[11][8] + coeff0_12*dmats1[12][8] + coeff0_13*dmats1[13][8] + coeff0_14*dmats1[14][8] + coeff0_15*dmats1[15][8] + coeff0_16*dmats1[16][8] + coeff0_17*dmats1[17][8] + coeff0_18*dmats1[18][8] + coeff0_19*dmats1[19][8] + coeff0_20*dmats1[20][8] + coeff0_21*dmats1[21][8] + coeff0_22*dmats1[22][8] + coeff0_23*dmats1[23][8] + coeff0_24*dmats1[24][8] + coeff0_25*dmats1[25][8] + coeff0_26*dmats1[26][8] + coeff0_27*dmats1[27][8] + coeff0_28*dmats1[28][8] + coeff0_29*dmats1[29][8] + coeff0_30*dmats1[30][8] + coeff0_31*dmats1[31][8] + coeff0_32*dmats1[32][8] + coeff0_33*dmats1[33][8] + coeff0_34*dmats1[34][8];
          new_coeff0_9 = coeff0_0*dmats1[0][9] + coeff0_1*dmats1[1][9] + coeff0_2*dmats1[2][9] + coeff0_3*dmats1[3][9] + coeff0_4*dmats1[4][9] + coeff0_5*dmats1[5][9] + coeff0_6*dmats1[6][9] + coeff0_7*dmats1[7][9] + coeff0_8*dmats1[8][9] + coeff0_9*dmats1[9][9] + coeff0_10*dmats1[10][9] + coeff0_11*dmats1[11][9] + coeff0_12*dmats1[12][9] + coeff0_13*dmats1[13][9] + coeff0_14*dmats1[14][9] + coeff0_15*dmats1[15][9] + coeff0_16*dmats1[16][9] + coeff0_17*dmats1[17][9] + coeff0_18*dmats1[18][9] + coeff0_19*dmats1[19][9] + coeff0_20*dmats1[20][9] + coeff0_21*dmats1[21][9] + coeff0_22*dmats1[22][9] + coeff0_23*dmats1[23][9] + coeff0_24*dmats1[24][9] + coeff0_25*dmats1[25][9] + coeff0_26*dmats1[26][9] + coeff0_27*dmats1[27][9] + coeff0_28*dmats1[28][9] + coeff0_29*dmats1[29][9] + coeff0_30*dmats1[30][9] + coeff0_31*dmats1[31][9] + coeff0_32*dmats1[32][9] + coeff0_33*dmats1[33][9] + coeff0_34*dmats1[34][9];
          new_coeff0_10 = coeff0_0*dmats1[0][10] + coeff0_1*dmats1[1][10] + coeff0_2*dmats1[2][10] + coeff0_3*dmats1[3][10] + coeff0_4*dmats1[4][10] + coeff0_5*dmats1[5][10] + coeff0_6*dmats1[6][10] + coeff0_7*dmats1[7][10] + coeff0_8*dmats1[8][10] + coeff0_9*dmats1[9][10] + coeff0_10*dmats1[10][10] + coeff0_11*dmats1[11][10] + coeff0_12*dmats1[12][10] + coeff0_13*dmats1[13][10] + coeff0_14*dmats1[14][10] + coeff0_15*dmats1[15][10] + coeff0_16*dmats1[16][10] + coeff0_17*dmats1[17][10] + coeff0_18*dmats1[18][10] + coeff0_19*dmats1[19][10] + coeff0_20*dmats1[20][10] + coeff0_21*dmats1[21][10] + coeff0_22*dmats1[22][10] + coeff0_23*dmats1[23][10] + coeff0_24*dmats1[24][10] + coeff0_25*dmats1[25][10] + coeff0_26*dmats1[26][10] + coeff0_27*dmats1[27][10] + coeff0_28*dmats1[28][10] + coeff0_29*dmats1[29][10] + coeff0_30*dmats1[30][10] + coeff0_31*dmats1[31][10] + coeff0_32*dmats1[32][10] + coeff0_33*dmats1[33][10] + coeff0_34*dmats1[34][10];
          new_coeff0_11 = coeff0_0*dmats1[0][11] + coeff0_1*dmats1[1][11] + coeff0_2*dmats1[2][11] + coeff0_3*dmats1[3][11] + coeff0_4*dmats1[4][11] + coeff0_5*dmats1[5][11] + coeff0_6*dmats1[6][11] + coeff0_7*dmats1[7][11] + coeff0_8*dmats1[8][11] + coeff0_9*dmats1[9][11] + coeff0_10*dmats1[10][11] + coeff0_11*dmats1[11][11] + coeff0_12*dmats1[12][11] + coeff0_13*dmats1[13][11] + coeff0_14*dmats1[14][11] + coeff0_15*dmats1[15][11] + coeff0_16*dmats1[16][11] + coeff0_17*dmats1[17][11] + coeff0_18*dmats1[18][11] + coeff0_19*dmats1[19][11] + coeff0_20*dmats1[20][11] + coeff0_21*dmats1[21][11] + coeff0_22*dmats1[22][11] + coeff0_23*dmats1[23][11] + coeff0_24*dmats1[24][11] + coeff0_25*dmats1[25][11] + coeff0_26*dmats1[26][11] + coeff0_27*dmats1[27][11] + coeff0_28*dmats1[28][11] + coeff0_29*dmats1[29][11] + coeff0_30*dmats1[30][11] + coeff0_31*dmats1[31][11] + coeff0_32*dmats1[32][11] + coeff0_33*dmats1[33][11] + coeff0_34*dmats1[34][11];
          new_coeff0_12 = coeff0_0*dmats1[0][12] + coeff0_1*dmats1[1][12] + coeff0_2*dmats1[2][12] + coeff0_3*dmats1[3][12] + coeff0_4*dmats1[4][12] + coeff0_5*dmats1[5][12] + coeff0_6*dmats1[6][12] + coeff0_7*dmats1[7][12] + coeff0_8*dmats1[8][12] + coeff0_9*dmats1[9][12] + coeff0_10*dmats1[10][12] + coeff0_11*dmats1[11][12] + coeff0_12*dmats1[12][12] + coeff0_13*dmats1[13][12] + coeff0_14*dmats1[14][12] + coeff0_15*dmats1[15][12] + coeff0_16*dmats1[16][12] + coeff0_17*dmats1[17][12] + coeff0_18*dmats1[18][12] + coeff0_19*dmats1[19][12] + coeff0_20*dmats1[20][12] + coeff0_21*dmats1[21][12] + coeff0_22*dmats1[22][12] + coeff0_23*dmats1[23][12] + coeff0_24*dmats1[24][12] + coeff0_25*dmats1[25][12] + coeff0_26*dmats1[26][12] + coeff0_27*dmats1[27][12] + coeff0_28*dmats1[28][12] + coeff0_29*dmats1[29][12] + coeff0_30*dmats1[30][12] + coeff0_31*dmats1[31][12] + coeff0_32*dmats1[32][12] + coeff0_33*dmats1[33][12] + coeff0_34*dmats1[34][12];
          new_coeff0_13 = coeff0_0*dmats1[0][13] + coeff0_1*dmats1[1][13] + coeff0_2*dmats1[2][13] + coeff0_3*dmats1[3][13] + coeff0_4*dmats1[4][13] + coeff0_5*dmats1[5][13] + coeff0_6*dmats1[6][13] + coeff0_7*dmats1[7][13] + coeff0_8*dmats1[8][13] + coeff0_9*dmats1[9][13] + coeff0_10*dmats1[10][13] + coeff0_11*dmats1[11][13] + coeff0_12*dmats1[12][13] + coeff0_13*dmats1[13][13] + coeff0_14*dmats1[14][13] + coeff0_15*dmats1[15][13] + coeff0_16*dmats1[16][13] + coeff0_17*dmats1[17][13] + coeff0_18*dmats1[18][13] + coeff0_19*dmats1[19][13] + coeff0_20*dmats1[20][13] + coeff0_21*dmats1[21][13] + coeff0_22*dmats1[22][13] + coeff0_23*dmats1[23][13] + coeff0_24*dmats1[24][13] + coeff0_25*dmats1[25][13] + coeff0_26*dmats1[26][13] + coeff0_27*dmats1[27][13] + coeff0_28*dmats1[28][13] + coeff0_29*dmats1[29][13] + coeff0_30*dmats1[30][13] + coeff0_31*dmats1[31][13] + coeff0_32*dmats1[32][13] + coeff0_33*dmats1[33][13] + coeff0_34*dmats1[34][13];
          new_coeff0_14 = coeff0_0*dmats1[0][14] + coeff0_1*dmats1[1][14] + coeff0_2*dmats1[2][14] + coeff0_3*dmats1[3][14] + coeff0_4*dmats1[4][14] + coeff0_5*dmats1[5][14] + coeff0_6*dmats1[6][14] + coeff0_7*dmats1[7][14] + coeff0_8*dmats1[8][14] + coeff0_9*dmats1[9][14] + coeff0_10*dmats1[10][14] + coeff0_11*dmats1[11][14] + coeff0_12*dmats1[12][14] + coeff0_13*dmats1[13][14] + coeff0_14*dmats1[14][14] + coeff0_15*dmats1[15][14] + coeff0_16*dmats1[16][14] + coeff0_17*dmats1[17][14] + coeff0_18*dmats1[18][14] + coeff0_19*dmats1[19][14] + coeff0_20*dmats1[20][14] + coeff0_21*dmats1[21][14] + coeff0_22*dmats1[22][14] + coeff0_23*dmats1[23][14] + coeff0_24*dmats1[24][14] + coeff0_25*dmats1[25][14] + coeff0_26*dmats1[26][14] + coeff0_27*dmats1[27][14] + coeff0_28*dmats1[28][14] + coeff0_29*dmats1[29][14] + coeff0_30*dmats1[30][14] + coeff0_31*dmats1[31][14] + coeff0_32*dmats1[32][14] + coeff0_33*dmats1[33][14] + coeff0_34*dmats1[34][14];
          new_coeff0_15 = coeff0_0*dmats1[0][15] + coeff0_1*dmats1[1][15] + coeff0_2*dmats1[2][15] + coeff0_3*dmats1[3][15] + coeff0_4*dmats1[4][15] + coeff0_5*dmats1[5][15] + coeff0_6*dmats1[6][15] + coeff0_7*dmats1[7][15] + coeff0_8*dmats1[8][15] + coeff0_9*dmats1[9][15] + coeff0_10*dmats1[10][15] + coeff0_11*dmats1[11][15] + coeff0_12*dmats1[12][15] + coeff0_13*dmats1[13][15] + coeff0_14*dmats1[14][15] + coeff0_15*dmats1[15][15] + coeff0_16*dmats1[16][15] + coeff0_17*dmats1[17][15] + coeff0_18*dmats1[18][15] + coeff0_19*dmats1[19][15] + coeff0_20*dmats1[20][15] + coeff0_21*dmats1[21][15] + coeff0_22*dmats1[22][15] + coeff0_23*dmats1[23][15] + coeff0_24*dmats1[24][15] + coeff0_25*dmats1[25][15] + coeff0_26*dmats1[26][15] + coeff0_27*dmats1[27][15] + coeff0_28*dmats1[28][15] + coeff0_29*dmats1[29][15] + coeff0_30*dmats1[30][15] + coeff0_31*dmats1[31][15] + coeff0_32*dmats1[32][15] + coeff0_33*dmats1[33][15] + coeff0_34*dmats1[34][15];
          new_coeff0_16 = coeff0_0*dmats1[0][16] + coeff0_1*dmats1[1][16] + coeff0_2*dmats1[2][16] + coeff0_3*dmats1[3][16] + coeff0_4*dmats1[4][16] + coeff0_5*dmats1[5][16] + coeff0_6*dmats1[6][16] + coeff0_7*dmats1[7][16] + coeff0_8*dmats1[8][16] + coeff0_9*dmats1[9][16] + coeff0_10*dmats1[10][16] + coeff0_11*dmats1[11][16] + coeff0_12*dmats1[12][16] + coeff0_13*dmats1[13][16] + coeff0_14*dmats1[14][16] + coeff0_15*dmats1[15][16] + coeff0_16*dmats1[16][16] + coeff0_17*dmats1[17][16] + coeff0_18*dmats1[18][16] + coeff0_19*dmats1[19][16] + coeff0_20*dmats1[20][16] + coeff0_21*dmats1[21][16] + coeff0_22*dmats1[22][16] + coeff0_23*dmats1[23][16] + coeff0_24*dmats1[24][16] + coeff0_25*dmats1[25][16] + coeff0_26*dmats1[26][16] + coeff0_27*dmats1[27][16] + coeff0_28*dmats1[28][16] + coeff0_29*dmats1[29][16] + coeff0_30*dmats1[30][16] + coeff0_31*dmats1[31][16] + coeff0_32*dmats1[32][16] + coeff0_33*dmats1[33][16] + coeff0_34*dmats1[34][16];
          new_coeff0_17 = coeff0_0*dmats1[0][17] + coeff0_1*dmats1[1][17] + coeff0_2*dmats1[2][17] + coeff0_3*dmats1[3][17] + coeff0_4*dmats1[4][17] + coeff0_5*dmats1[5][17] + coeff0_6*dmats1[6][17] + coeff0_7*dmats1[7][17] + coeff0_8*dmats1[8][17] + coeff0_9*dmats1[9][17] + coeff0_10*dmats1[10][17] + coeff0_11*dmats1[11][17] + coeff0_12*dmats1[12][17] + coeff0_13*dmats1[13][17] + coeff0_14*dmats1[14][17] + coeff0_15*dmats1[15][17] + coeff0_16*dmats1[16][17] + coeff0_17*dmats1[17][17] + coeff0_18*dmats1[18][17] + coeff0_19*dmats1[19][17] + coeff0_20*dmats1[20][17] + coeff0_21*dmats1[21][17] + coeff0_22*dmats1[22][17] + coeff0_23*dmats1[23][17] + coeff0_24*dmats1[24][17] + coeff0_25*dmats1[25][17] + coeff0_26*dmats1[26][17] + coeff0_27*dmats1[27][17] + coeff0_28*dmats1[28][17] + coeff0_29*dmats1[29][17] + coeff0_30*dmats1[30][17] + coeff0_31*dmats1[31][17] + coeff0_32*dmats1[32][17] + coeff0_33*dmats1[33][17] + coeff0_34*dmats1[34][17];
          new_coeff0_18 = coeff0_0*dmats1[0][18] + coeff0_1*dmats1[1][18] + coeff0_2*dmats1[2][18] + coeff0_3*dmats1[3][18] + coeff0_4*dmats1[4][18] + coeff0_5*dmats1[5][18] + coeff0_6*dmats1[6][18] + coeff0_7*dmats1[7][18] + coeff0_8*dmats1[8][18] + coeff0_9*dmats1[9][18] + coeff0_10*dmats1[10][18] + coeff0_11*dmats1[11][18] + coeff0_12*dmats1[12][18] + coeff0_13*dmats1[13][18] + coeff0_14*dmats1[14][18] + coeff0_15*dmats1[15][18] + coeff0_16*dmats1[16][18] + coeff0_17*dmats1[17][18] + coeff0_18*dmats1[18][18] + coeff0_19*dmats1[19][18] + coeff0_20*dmats1[20][18] + coeff0_21*dmats1[21][18] + coeff0_22*dmats1[22][18] + coeff0_23*dmats1[23][18] + coeff0_24*dmats1[24][18] + coeff0_25*dmats1[25][18] + coeff0_26*dmats1[26][18] + coeff0_27*dmats1[27][18] + coeff0_28*dmats1[28][18] + coeff0_29*dmats1[29][18] + coeff0_30*dmats1[30][18] + coeff0_31*dmats1[31][18] + coeff0_32*dmats1[32][18] + coeff0_33*dmats1[33][18] + coeff0_34*dmats1[34][18];
          new_coeff0_19 = coeff0_0*dmats1[0][19] + coeff0_1*dmats1[1][19] + coeff0_2*dmats1[2][19] + coeff0_3*dmats1[3][19] + coeff0_4*dmats1[4][19] + coeff0_5*dmats1[5][19] + coeff0_6*dmats1[6][19] + coeff0_7*dmats1[7][19] + coeff0_8*dmats1[8][19] + coeff0_9*dmats1[9][19] + coeff0_10*dmats1[10][19] + coeff0_11*dmats1[11][19] + coeff0_12*dmats1[12][19] + coeff0_13*dmats1[13][19] + coeff0_14*dmats1[14][19] + coeff0_15*dmats1[15][19] + coeff0_16*dmats1[16][19] + coeff0_17*dmats1[17][19] + coeff0_18*dmats1[18][19] + coeff0_19*dmats1[19][19] + coeff0_20*dmats1[20][19] + coeff0_21*dmats1[21][19] + coeff0_22*dmats1[22][19] + coeff0_23*dmats1[23][19] + coeff0_24*dmats1[24][19] + coeff0_25*dmats1[25][19] + coeff0_26*dmats1[26][19] + coeff0_27*dmats1[27][19] + coeff0_28*dmats1[28][19] + coeff0_29*dmats1[29][19] + coeff0_30*dmats1[30][19] + coeff0_31*dmats1[31][19] + coeff0_32*dmats1[32][19] + coeff0_33*dmats1[33][19] + coeff0_34*dmats1[34][19];
          new_coeff0_20 = coeff0_0*dmats1[0][20] + coeff0_1*dmats1[1][20] + coeff0_2*dmats1[2][20] + coeff0_3*dmats1[3][20] + coeff0_4*dmats1[4][20] + coeff0_5*dmats1[5][20] + coeff0_6*dmats1[6][20] + coeff0_7*dmats1[7][20] + coeff0_8*dmats1[8][20] + coeff0_9*dmats1[9][20] + coeff0_10*dmats1[10][20] + coeff0_11*dmats1[11][20] + coeff0_12*dmats1[12][20] + coeff0_13*dmats1[13][20] + coeff0_14*dmats1[14][20] + coeff0_15*dmats1[15][20] + coeff0_16*dmats1[16][20] + coeff0_17*dmats1[17][20] + coeff0_18*dmats1[18][20] + coeff0_19*dmats1[19][20] + coeff0_20*dmats1[20][20] + coeff0_21*dmats1[21][20] + coeff0_22*dmats1[22][20] + coeff0_23*dmats1[23][20] + coeff0_24*dmats1[24][20] + coeff0_25*dmats1[25][20] + coeff0_26*dmats1[26][20] + coeff0_27*dmats1[27][20] + coeff0_28*dmats1[28][20] + coeff0_29*dmats1[29][20] + coeff0_30*dmats1[30][20] + coeff0_31*dmats1[31][20] + coeff0_32*dmats1[32][20] + coeff0_33*dmats1[33][20] + coeff0_34*dmats1[34][20];
          new_coeff0_21 = coeff0_0*dmats1[0][21] + coeff0_1*dmats1[1][21] + coeff0_2*dmats1[2][21] + coeff0_3*dmats1[3][21] + coeff0_4*dmats1[4][21] + coeff0_5*dmats1[5][21] + coeff0_6*dmats1[6][21] + coeff0_7*dmats1[7][21] + coeff0_8*dmats1[8][21] + coeff0_9*dmats1[9][21] + coeff0_10*dmats1[10][21] + coeff0_11*dmats1[11][21] + coeff0_12*dmats1[12][21] + coeff0_13*dmats1[13][21] + coeff0_14*dmats1[14][21] + coeff0_15*dmats1[15][21] + coeff0_16*dmats1[16][21] + coeff0_17*dmats1[17][21] + coeff0_18*dmats1[18][21] + coeff0_19*dmats1[19][21] + coeff0_20*dmats1[20][21] + coeff0_21*dmats1[21][21] + coeff0_22*dmats1[22][21] + coeff0_23*dmats1[23][21] + coeff0_24*dmats1[24][21] + coeff0_25*dmats1[25][21] + coeff0_26*dmats1[26][21] + coeff0_27*dmats1[27][21] + coeff0_28*dmats1[28][21] + coeff0_29*dmats1[29][21] + coeff0_30*dmats1[30][21] + coeff0_31*dmats1[31][21] + coeff0_32*dmats1[32][21] + coeff0_33*dmats1[33][21] + coeff0_34*dmats1[34][21];
          new_coeff0_22 = coeff0_0*dmats1[0][22] + coeff0_1*dmats1[1][22] + coeff0_2*dmats1[2][22] + coeff0_3*dmats1[3][22] + coeff0_4*dmats1[4][22] + coeff0_5*dmats1[5][22] + coeff0_6*dmats1[6][22] + coeff0_7*dmats1[7][22] + coeff0_8*dmats1[8][22] + coeff0_9*dmats1[9][22] + coeff0_10*dmats1[10][22] + coeff0_11*dmats1[11][22] + coeff0_12*dmats1[12][22] + coeff0_13*dmats1[13][22] + coeff0_14*dmats1[14][22] + coeff0_15*dmats1[15][22] + coeff0_16*dmats1[16][22] + coeff0_17*dmats1[17][22] + coeff0_18*dmats1[18][22] + coeff0_19*dmats1[19][22] + coeff0_20*dmats1[20][22] + coeff0_21*dmats1[21][22] + coeff0_22*dmats1[22][22] + coeff0_23*dmats1[23][22] + coeff0_24*dmats1[24][22] + coeff0_25*dmats1[25][22] + coeff0_26*dmats1[26][22] + coeff0_27*dmats1[27][22] + coeff0_28*dmats1[28][22] + coeff0_29*dmats1[29][22] + coeff0_30*dmats1[30][22] + coeff0_31*dmats1[31][22] + coeff0_32*dmats1[32][22] + coeff0_33*dmats1[33][22] + coeff0_34*dmats1[34][22];
          new_coeff0_23 = coeff0_0*dmats1[0][23] + coeff0_1*dmats1[1][23] + coeff0_2*dmats1[2][23] + coeff0_3*dmats1[3][23] + coeff0_4*dmats1[4][23] + coeff0_5*dmats1[5][23] + coeff0_6*dmats1[6][23] + coeff0_7*dmats1[7][23] + coeff0_8*dmats1[8][23] + coeff0_9*dmats1[9][23] + coeff0_10*dmats1[10][23] + coeff0_11*dmats1[11][23] + coeff0_12*dmats1[12][23] + coeff0_13*dmats1[13][23] + coeff0_14*dmats1[14][23] + coeff0_15*dmats1[15][23] + coeff0_16*dmats1[16][23] + coeff0_17*dmats1[17][23] + coeff0_18*dmats1[18][23] + coeff0_19*dmats1[19][23] + coeff0_20*dmats1[20][23] + coeff0_21*dmats1[21][23] + coeff0_22*dmats1[22][23] + coeff0_23*dmats1[23][23] + coeff0_24*dmats1[24][23] + coeff0_25*dmats1[25][23] + coeff0_26*dmats1[26][23] + coeff0_27*dmats1[27][23] + coeff0_28*dmats1[28][23] + coeff0_29*dmats1[29][23] + coeff0_30*dmats1[30][23] + coeff0_31*dmats1[31][23] + coeff0_32*dmats1[32][23] + coeff0_33*dmats1[33][23] + coeff0_34*dmats1[34][23];
          new_coeff0_24 = coeff0_0*dmats1[0][24] + coeff0_1*dmats1[1][24] + coeff0_2*dmats1[2][24] + coeff0_3*dmats1[3][24] + coeff0_4*dmats1[4][24] + coeff0_5*dmats1[5][24] + coeff0_6*dmats1[6][24] + coeff0_7*dmats1[7][24] + coeff0_8*dmats1[8][24] + coeff0_9*dmats1[9][24] + coeff0_10*dmats1[10][24] + coeff0_11*dmats1[11][24] + coeff0_12*dmats1[12][24] + coeff0_13*dmats1[13][24] + coeff0_14*dmats1[14][24] + coeff0_15*dmats1[15][24] + coeff0_16*dmats1[16][24] + coeff0_17*dmats1[17][24] + coeff0_18*dmats1[18][24] + coeff0_19*dmats1[19][24] + coeff0_20*dmats1[20][24] + coeff0_21*dmats1[21][24] + coeff0_22*dmats1[22][24] + coeff0_23*dmats1[23][24] + coeff0_24*dmats1[24][24] + coeff0_25*dmats1[25][24] + coeff0_26*dmats1[26][24] + coeff0_27*dmats1[27][24] + coeff0_28*dmats1[28][24] + coeff0_29*dmats1[29][24] + coeff0_30*dmats1[30][24] + coeff0_31*dmats1[31][24] + coeff0_32*dmats1[32][24] + coeff0_33*dmats1[33][24] + coeff0_34*dmats1[34][24];
          new_coeff0_25 = coeff0_0*dmats1[0][25] + coeff0_1*dmats1[1][25] + coeff0_2*dmats1[2][25] + coeff0_3*dmats1[3][25] + coeff0_4*dmats1[4][25] + coeff0_5*dmats1[5][25] + coeff0_6*dmats1[6][25] + coeff0_7*dmats1[7][25] + coeff0_8*dmats1[8][25] + coeff0_9*dmats1[9][25] + coeff0_10*dmats1[10][25] + coeff0_11*dmats1[11][25] + coeff0_12*dmats1[12][25] + coeff0_13*dmats1[13][25] + coeff0_14*dmats1[14][25] + coeff0_15*dmats1[15][25] + coeff0_16*dmats1[16][25] + coeff0_17*dmats1[17][25] + coeff0_18*dmats1[18][25] + coeff0_19*dmats1[19][25] + coeff0_20*dmats1[20][25] + coeff0_21*dmats1[21][25] + coeff0_22*dmats1[22][25] + coeff0_23*dmats1[23][25] + coeff0_24*dmats1[24][25] + coeff0_25*dmats1[25][25] + coeff0_26*dmats1[26][25] + coeff0_27*dmats1[27][25] + coeff0_28*dmats1[28][25] + coeff0_29*dmats1[29][25] + coeff0_30*dmats1[30][25] + coeff0_31*dmats1[31][25] + coeff0_32*dmats1[32][25] + coeff0_33*dmats1[33][25] + coeff0_34*dmats1[34][25];
          new_coeff0_26 = coeff0_0*dmats1[0][26] + coeff0_1*dmats1[1][26] + coeff0_2*dmats1[2][26] + coeff0_3*dmats1[3][26] + coeff0_4*dmats1[4][26] + coeff0_5*dmats1[5][26] + coeff0_6*dmats1[6][26] + coeff0_7*dmats1[7][26] + coeff0_8*dmats1[8][26] + coeff0_9*dmats1[9][26] + coeff0_10*dmats1[10][26] + coeff0_11*dmats1[11][26] + coeff0_12*dmats1[12][26] + coeff0_13*dmats1[13][26] + coeff0_14*dmats1[14][26] + coeff0_15*dmats1[15][26] + coeff0_16*dmats1[16][26] + coeff0_17*dmats1[17][26] + coeff0_18*dmats1[18][26] + coeff0_19*dmats1[19][26] + coeff0_20*dmats1[20][26] + coeff0_21*dmats1[21][26] + coeff0_22*dmats1[22][26] + coeff0_23*dmats1[23][26] + coeff0_24*dmats1[24][26] + coeff0_25*dmats1[25][26] + coeff0_26*dmats1[26][26] + coeff0_27*dmats1[27][26] + coeff0_28*dmats1[28][26] + coeff0_29*dmats1[29][26] + coeff0_30*dmats1[30][26] + coeff0_31*dmats1[31][26] + coeff0_32*dmats1[32][26] + coeff0_33*dmats1[33][26] + coeff0_34*dmats1[34][26];
          new_coeff0_27 = coeff0_0*dmats1[0][27] + coeff0_1*dmats1[1][27] + coeff0_2*dmats1[2][27] + coeff0_3*dmats1[3][27] + coeff0_4*dmats1[4][27] + coeff0_5*dmats1[5][27] + coeff0_6*dmats1[6][27] + coeff0_7*dmats1[7][27] + coeff0_8*dmats1[8][27] + coeff0_9*dmats1[9][27] + coeff0_10*dmats1[10][27] + coeff0_11*dmats1[11][27] + coeff0_12*dmats1[12][27] + coeff0_13*dmats1[13][27] + coeff0_14*dmats1[14][27] + coeff0_15*dmats1[15][27] + coeff0_16*dmats1[16][27] + coeff0_17*dmats1[17][27] + coeff0_18*dmats1[18][27] + coeff0_19*dmats1[19][27] + coeff0_20*dmats1[20][27] + coeff0_21*dmats1[21][27] + coeff0_22*dmats1[22][27] + coeff0_23*dmats1[23][27] + coeff0_24*dmats1[24][27] + coeff0_25*dmats1[25][27] + coeff0_26*dmats1[26][27] + coeff0_27*dmats1[27][27] + coeff0_28*dmats1[28][27] + coeff0_29*dmats1[29][27] + coeff0_30*dmats1[30][27] + coeff0_31*dmats1[31][27] + coeff0_32*dmats1[32][27] + coeff0_33*dmats1[33][27] + coeff0_34*dmats1[34][27];
          new_coeff0_28 = coeff0_0*dmats1[0][28] + coeff0_1*dmats1[1][28] + coeff0_2*dmats1[2][28] + coeff0_3*dmats1[3][28] + coeff0_4*dmats1[4][28] + coeff0_5*dmats1[5][28] + coeff0_6*dmats1[6][28] + coeff0_7*dmats1[7][28] + coeff0_8*dmats1[8][28] + coeff0_9*dmats1[9][28] + coeff0_10*dmats1[10][28] + coeff0_11*dmats1[11][28] + coeff0_12*dmats1[12][28] + coeff0_13*dmats1[13][28] + coeff0_14*dmats1[14][28] + coeff0_15*dmats1[15][28] + coeff0_16*dmats1[16][28] + coeff0_17*dmats1[17][28] + coeff0_18*dmats1[18][28] + coeff0_19*dmats1[19][28] + coeff0_20*dmats1[20][28] + coeff0_21*dmats1[21][28] + coeff0_22*dmats1[22][28] + coeff0_23*dmats1[23][28] + coeff0_24*dmats1[24][28] + coeff0_25*dmats1[25][28] + coeff0_26*dmats1[26][28] + coeff0_27*dmats1[27][28] + coeff0_28*dmats1[28][28] + coeff0_29*dmats1[29][28] + coeff0_30*dmats1[30][28] + coeff0_31*dmats1[31][28] + coeff0_32*dmats1[32][28] + coeff0_33*dmats1[33][28] + coeff0_34*dmats1[34][28];
          new_coeff0_29 = coeff0_0*dmats1[0][29] + coeff0_1*dmats1[1][29] + coeff0_2*dmats1[2][29] + coeff0_3*dmats1[3][29] + coeff0_4*dmats1[4][29] + coeff0_5*dmats1[5][29] + coeff0_6*dmats1[6][29] + coeff0_7*dmats1[7][29] + coeff0_8*dmats1[8][29] + coeff0_9*dmats1[9][29] + coeff0_10*dmats1[10][29] + coeff0_11*dmats1[11][29] + coeff0_12*dmats1[12][29] + coeff0_13*dmats1[13][29] + coeff0_14*dmats1[14][29] + coeff0_15*dmats1[15][29] + coeff0_16*dmats1[16][29] + coeff0_17*dmats1[17][29] + coeff0_18*dmats1[18][29] + coeff0_19*dmats1[19][29] + coeff0_20*dmats1[20][29] + coeff0_21*dmats1[21][29] + coeff0_22*dmats1[22][29] + coeff0_23*dmats1[23][29] + coeff0_24*dmats1[24][29] + coeff0_25*dmats1[25][29] + coeff0_26*dmats1[26][29] + coeff0_27*dmats1[27][29] + coeff0_28*dmats1[28][29] + coeff0_29*dmats1[29][29] + coeff0_30*dmats1[30][29] + coeff0_31*dmats1[31][29] + coeff0_32*dmats1[32][29] + coeff0_33*dmats1[33][29] + coeff0_34*dmats1[34][29];
          new_coeff0_30 = coeff0_0*dmats1[0][30] + coeff0_1*dmats1[1][30] + coeff0_2*dmats1[2][30] + coeff0_3*dmats1[3][30] + coeff0_4*dmats1[4][30] + coeff0_5*dmats1[5][30] + coeff0_6*dmats1[6][30] + coeff0_7*dmats1[7][30] + coeff0_8*dmats1[8][30] + coeff0_9*dmats1[9][30] + coeff0_10*dmats1[10][30] + coeff0_11*dmats1[11][30] + coeff0_12*dmats1[12][30] + coeff0_13*dmats1[13][30] + coeff0_14*dmats1[14][30] + coeff0_15*dmats1[15][30] + coeff0_16*dmats1[16][30] + coeff0_17*dmats1[17][30] + coeff0_18*dmats1[18][30] + coeff0_19*dmats1[19][30] + coeff0_20*dmats1[20][30] + coeff0_21*dmats1[21][30] + coeff0_22*dmats1[22][30] + coeff0_23*dmats1[23][30] + coeff0_24*dmats1[24][30] + coeff0_25*dmats1[25][30] + coeff0_26*dmats1[26][30] + coeff0_27*dmats1[27][30] + coeff0_28*dmats1[28][30] + coeff0_29*dmats1[29][30] + coeff0_30*dmats1[30][30] + coeff0_31*dmats1[31][30] + coeff0_32*dmats1[32][30] + coeff0_33*dmats1[33][30] + coeff0_34*dmats1[34][30];
          new_coeff0_31 = coeff0_0*dmats1[0][31] + coeff0_1*dmats1[1][31] + coeff0_2*dmats1[2][31] + coeff0_3*dmats1[3][31] + coeff0_4*dmats1[4][31] + coeff0_5*dmats1[5][31] + coeff0_6*dmats1[6][31] + coeff0_7*dmats1[7][31] + coeff0_8*dmats1[8][31] + coeff0_9*dmats1[9][31] + coeff0_10*dmats1[10][31] + coeff0_11*dmats1[11][31] + coeff0_12*dmats1[12][31] + coeff0_13*dmats1[13][31] + coeff0_14*dmats1[14][31] + coeff0_15*dmats1[15][31] + coeff0_16*dmats1[16][31] + coeff0_17*dmats1[17][31] + coeff0_18*dmats1[18][31] + coeff0_19*dmats1[19][31] + coeff0_20*dmats1[20][31] + coeff0_21*dmats1[21][31] + coeff0_22*dmats1[22][31] + coeff0_23*dmats1[23][31] + coeff0_24*dmats1[24][31] + coeff0_25*dmats1[25][31] + coeff0_26*dmats1[26][31] + coeff0_27*dmats1[27][31] + coeff0_28*dmats1[28][31] + coeff0_29*dmats1[29][31] + coeff0_30*dmats1[30][31] + coeff0_31*dmats1[31][31] + coeff0_32*dmats1[32][31] + coeff0_33*dmats1[33][31] + coeff0_34*dmats1[34][31];
          new_coeff0_32 = coeff0_0*dmats1[0][32] + coeff0_1*dmats1[1][32] + coeff0_2*dmats1[2][32] + coeff0_3*dmats1[3][32] + coeff0_4*dmats1[4][32] + coeff0_5*dmats1[5][32] + coeff0_6*dmats1[6][32] + coeff0_7*dmats1[7][32] + coeff0_8*dmats1[8][32] + coeff0_9*dmats1[9][32] + coeff0_10*dmats1[10][32] + coeff0_11*dmats1[11][32] + coeff0_12*dmats1[12][32] + coeff0_13*dmats1[13][32] + coeff0_14*dmats1[14][32] + coeff0_15*dmats1[15][32] + coeff0_16*dmats1[16][32] + coeff0_17*dmats1[17][32] + coeff0_18*dmats1[18][32] + coeff0_19*dmats1[19][32] + coeff0_20*dmats1[20][32] + coeff0_21*dmats1[21][32] + coeff0_22*dmats1[22][32] + coeff0_23*dmats1[23][32] + coeff0_24*dmats1[24][32] + coeff0_25*dmats1[25][32] + coeff0_26*dmats1[26][32] + coeff0_27*dmats1[27][32] + coeff0_28*dmats1[28][32] + coeff0_29*dmats1[29][32] + coeff0_30*dmats1[30][32] + coeff0_31*dmats1[31][32] + coeff0_32*dmats1[32][32] + coeff0_33*dmats1[33][32] + coeff0_34*dmats1[34][32];
          new_coeff0_33 = coeff0_0*dmats1[0][33] + coeff0_1*dmats1[1][33] + coeff0_2*dmats1[2][33] + coeff0_3*dmats1[3][33] + coeff0_4*dmats1[4][33] + coeff0_5*dmats1[5][33] + coeff0_6*dmats1[6][33] + coeff0_7*dmats1[7][33] + coeff0_8*dmats1[8][33] + coeff0_9*dmats1[9][33] + coeff0_10*dmats1[10][33] + coeff0_11*dmats1[11][33] + coeff0_12*dmats1[12][33] + coeff0_13*dmats1[13][33] + coeff0_14*dmats1[14][33] + coeff0_15*dmats1[15][33] + coeff0_16*dmats1[16][33] + coeff0_17*dmats1[17][33] + coeff0_18*dmats1[18][33] + coeff0_19*dmats1[19][33] + coeff0_20*dmats1[20][33] + coeff0_21*dmats1[21][33] + coeff0_22*dmats1[22][33] + coeff0_23*dmats1[23][33] + coeff0_24*dmats1[24][33] + coeff0_25*dmats1[25][33] + coeff0_26*dmats1[26][33] + coeff0_27*dmats1[27][33] + coeff0_28*dmats1[28][33] + coeff0_29*dmats1[29][33] + coeff0_30*dmats1[30][33] + coeff0_31*dmats1[31][33] + coeff0_32*dmats1[32][33] + coeff0_33*dmats1[33][33] + coeff0_34*dmats1[34][33];
          new_coeff0_34 = coeff0_0*dmats1[0][34] + coeff0_1*dmats1[1][34] + coeff0_2*dmats1[2][34] + coeff0_3*dmats1[3][34] + coeff0_4*dmats1[4][34] + coeff0_5*dmats1[5][34] + coeff0_6*dmats1[6][34] + coeff0_7*dmats1[7][34] + coeff0_8*dmats1[8][34] + coeff0_9*dmats1[9][34] + coeff0_10*dmats1[10][34] + coeff0_11*dmats1[11][34] + coeff0_12*dmats1[12][34] + coeff0_13*dmats1[13][34] + coeff0_14*dmats1[14][34] + coeff0_15*dmats1[15][34] + coeff0_16*dmats1[16][34] + coeff0_17*dmats1[17][34] + coeff0_18*dmats1[18][34] + coeff0_19*dmats1[19][34] + coeff0_20*dmats1[20][34] + coeff0_21*dmats1[21][34] + coeff0_22*dmats1[22][34] + coeff0_23*dmats1[23][34] + coeff0_24*dmats1[24][34] + coeff0_25*dmats1[25][34] + coeff0_26*dmats1[26][34] + coeff0_27*dmats1[27][34] + coeff0_28*dmats1[28][34] + coeff0_29*dmats1[29][34] + coeff0_30*dmats1[30][34] + coeff0_31*dmats1[31][34] + coeff0_32*dmats1[32][34] + coeff0_33*dmats1[33][34] + coeff0_34*dmats1[34][34];
        }
        if(combinations[deriv_num][j] == 2)
        {
          new_coeff0_0 = coeff0_0*dmats2[0][0] + coeff0_1*dmats2[1][0] + coeff0_2*dmats2[2][0] + coeff0_3*dmats2[3][0] + coeff0_4*dmats2[4][0] + coeff0_5*dmats2[5][0] + coeff0_6*dmats2[6][0] + coeff0_7*dmats2[7][0] + coeff0_8*dmats2[8][0] + coeff0_9*dmats2[9][0] + coeff0_10*dmats2[10][0] + coeff0_11*dmats2[11][0] + coeff0_12*dmats2[12][0] + coeff0_13*dmats2[13][0] + coeff0_14*dmats2[14][0] + coeff0_15*dmats2[15][0] + coeff0_16*dmats2[16][0] + coeff0_17*dmats2[17][0] + coeff0_18*dmats2[18][0] + coeff0_19*dmats2[19][0] + coeff0_20*dmats2[20][0] + coeff0_21*dmats2[21][0] + coeff0_22*dmats2[22][0] + coeff0_23*dmats2[23][0] + coeff0_24*dmats2[24][0] + coeff0_25*dmats2[25][0] + coeff0_26*dmats2[26][0] + coeff0_27*dmats2[27][0] + coeff0_28*dmats2[28][0] + coeff0_29*dmats2[29][0] + coeff0_30*dmats2[30][0] + coeff0_31*dmats2[31][0] + coeff0_32*dmats2[32][0] + coeff0_33*dmats2[33][0] + coeff0_34*dmats2[34][0];
          new_coeff0_1 = coeff0_0*dmats2[0][1] + coeff0_1*dmats2[1][1] + coeff0_2*dmats2[2][1] + coeff0_3*dmats2[3][1] + coeff0_4*dmats2[4][1] + coeff0_5*dmats2[5][1] + coeff0_6*dmats2[6][1] + coeff0_7*dmats2[7][1] + coeff0_8*dmats2[8][1] + coeff0_9*dmats2[9][1] + coeff0_10*dmats2[10][1] + coeff0_11*dmats2[11][1] + coeff0_12*dmats2[12][1] + coeff0_13*dmats2[13][1] + coeff0_14*dmats2[14][1] + coeff0_15*dmats2[15][1] + coeff0_16*dmats2[16][1] + coeff0_17*dmats2[17][1] + coeff0_18*dmats2[18][1] + coeff0_19*dmats2[19][1] + coeff0_20*dmats2[20][1] + coeff0_21*dmats2[21][1] + coeff0_22*dmats2[22][1] + coeff0_23*dmats2[23][1] + coeff0_24*dmats2[24][1] + coeff0_25*dmats2[25][1] + coeff0_26*dmats2[26][1] + coeff0_27*dmats2[27][1] + coeff0_28*dmats2[28][1] + coeff0_29*dmats2[29][1] + coeff0_30*dmats2[30][1] + coeff0_31*dmats2[31][1] + coeff0_32*dmats2[32][1] + coeff0_33*dmats2[33][1] + coeff0_34*dmats2[34][1];
          new_coeff0_2 = coeff0_0*dmats2[0][2] + coeff0_1*dmats2[1][2] + coeff0_2*dmats2[2][2] + coeff0_3*dmats2[3][2] + coeff0_4*dmats2[4][2] + coeff0_5*dmats2[5][2] + coeff0_6*dmats2[6][2] + coeff0_7*dmats2[7][2] + coeff0_8*dmats2[8][2] + coeff0_9*dmats2[9][2] + coeff0_10*dmats2[10][2] + coeff0_11*dmats2[11][2] + coeff0_12*dmats2[12][2] + coeff0_13*dmats2[13][2] + coeff0_14*dmats2[14][2] + coeff0_15*dmats2[15][2] + coeff0_16*dmats2[16][2] + coeff0_17*dmats2[17][2] + coeff0_18*dmats2[18][2] + coeff0_19*dmats2[19][2] + coeff0_20*dmats2[20][2] + coeff0_21*dmats2[21][2] + coeff0_22*dmats2[22][2] + coeff0_23*dmats2[23][2] + coeff0_24*dmats2[24][2] + coeff0_25*dmats2[25][2] + coeff0_26*dmats2[26][2] + coeff0_27*dmats2[27][2] + coeff0_28*dmats2[28][2] + coeff0_29*dmats2[29][2] + coeff0_30*dmats2[30][2] + coeff0_31*dmats2[31][2] + coeff0_32*dmats2[32][2] + coeff0_33*dmats2[33][2] + coeff0_34*dmats2[34][2];
          new_coeff0_3 = coeff0_0*dmats2[0][3] + coeff0_1*dmats2[1][3] + coeff0_2*dmats2[2][3] + coeff0_3*dmats2[3][3] + coeff0_4*dmats2[4][3] + coeff0_5*dmats2[5][3] + coeff0_6*dmats2[6][3] + coeff0_7*dmats2[7][3] + coeff0_8*dmats2[8][3] + coeff0_9*dmats2[9][3] + coeff0_10*dmats2[10][3] + coeff0_11*dmats2[11][3] + coeff0_12*dmats2[12][3] + coeff0_13*dmats2[13][3] + coeff0_14*dmats2[14][3] + coeff0_15*dmats2[15][3] + coeff0_16*dmats2[16][3] + coeff0_17*dmats2[17][3] + coeff0_18*dmats2[18][3] + coeff0_19*dmats2[19][3] + coeff0_20*dmats2[20][3] + coeff0_21*dmats2[21][3] + coeff0_22*dmats2[22][3] + coeff0_23*dmats2[23][3] + coeff0_24*dmats2[24][3] + coeff0_25*dmats2[25][3] + coeff0_26*dmats2[26][3] + coeff0_27*dmats2[27][3] + coeff0_28*dmats2[28][3] + coeff0_29*dmats2[29][3] + coeff0_30*dmats2[30][3] + coeff0_31*dmats2[31][3] + coeff0_32*dmats2[32][3] + coeff0_33*dmats2[33][3] + coeff0_34*dmats2[34][3];
          new_coeff0_4 = coeff0_0*dmats2[0][4] + coeff0_1*dmats2[1][4] + coeff0_2*dmats2[2][4] + coeff0_3*dmats2[3][4] + coeff0_4*dmats2[4][4] + coeff0_5*dmats2[5][4] + coeff0_6*dmats2[6][4] + coeff0_7*dmats2[7][4] + coeff0_8*dmats2[8][4] + coeff0_9*dmats2[9][4] + coeff0_10*dmats2[10][4] + coeff0_11*dmats2[11][4] + coeff0_12*dmats2[12][4] + coeff0_13*dmats2[13][4] + coeff0_14*dmats2[14][4] + coeff0_15*dmats2[15][4] + coeff0_16*dmats2[16][4] + coeff0_17*dmats2[17][4] + coeff0_18*dmats2[18][4] + coeff0_19*dmats2[19][4] + coeff0_20*dmats2[20][4] + coeff0_21*dmats2[21][4] + coeff0_22*dmats2[22][4] + coeff0_23*dmats2[23][4] + coeff0_24*dmats2[24][4] + coeff0_25*dmats2[25][4] + coeff0_26*dmats2[26][4] + coeff0_27*dmats2[27][4] + coeff0_28*dmats2[28][4] + coeff0_29*dmats2[29][4] + coeff0_30*dmats2[30][4] + coeff0_31*dmats2[31][4] + coeff0_32*dmats2[32][4] + coeff0_33*dmats2[33][4] + coeff0_34*dmats2[34][4];
          new_coeff0_5 = coeff0_0*dmats2[0][5] + coeff0_1*dmats2[1][5] + coeff0_2*dmats2[2][5] + coeff0_3*dmats2[3][5] + coeff0_4*dmats2[4][5] + coeff0_5*dmats2[5][5] + coeff0_6*dmats2[6][5] + coeff0_7*dmats2[7][5] + coeff0_8*dmats2[8][5] + coeff0_9*dmats2[9][5] + coeff0_10*dmats2[10][5] + coeff0_11*dmats2[11][5] + coeff0_12*dmats2[12][5] + coeff0_13*dmats2[13][5] + coeff0_14*dmats2[14][5] + coeff0_15*dmats2[15][5] + coeff0_16*dmats2[16][5] + coeff0_17*dmats2[17][5] + coeff0_18*dmats2[18][5] + coeff0_19*dmats2[19][5] + coeff0_20*dmats2[20][5] + coeff0_21*dmats2[21][5] + coeff0_22*dmats2[22][5] + coeff0_23*dmats2[23][5] + coeff0_24*dmats2[24][5] + coeff0_25*dmats2[25][5] + coeff0_26*dmats2[26][5] + coeff0_27*dmats2[27][5] + coeff0_28*dmats2[28][5] + coeff0_29*dmats2[29][5] + coeff0_30*dmats2[30][5] + coeff0_31*dmats2[31][5] + coeff0_32*dmats2[32][5] + coeff0_33*dmats2[33][5] + coeff0_34*dmats2[34][5];
          new_coeff0_6 = coeff0_0*dmats2[0][6] + coeff0_1*dmats2[1][6] + coeff0_2*dmats2[2][6] + coeff0_3*dmats2[3][6] + coeff0_4*dmats2[4][6] + coeff0_5*dmats2[5][6] + coeff0_6*dmats2[6][6] + coeff0_7*dmats2[7][6] + coeff0_8*dmats2[8][6] + coeff0_9*dmats2[9][6] + coeff0_10*dmats2[10][6] + coeff0_11*dmats2[11][6] + coeff0_12*dmats2[12][6] + coeff0_13*dmats2[13][6] + coeff0_14*dmats2[14][6] + coeff0_15*dmats2[15][6] + coeff0_16*dmats2[16][6] + coeff0_17*dmats2[17][6] + coeff0_18*dmats2[18][6] + coeff0_19*dmats2[19][6] + coeff0_20*dmats2[20][6] + coeff0_21*dmats2[21][6] + coeff0_22*dmats2[22][6] + coeff0_23*dmats2[23][6] + coeff0_24*dmats2[24][6] + coeff0_25*dmats2[25][6] + coeff0_26*dmats2[26][6] + coeff0_27*dmats2[27][6] + coeff0_28*dmats2[28][6] + coeff0_29*dmats2[29][6] + coeff0_30*dmats2[30][6] + coeff0_31*dmats2[31][6] + coeff0_32*dmats2[32][6] + coeff0_33*dmats2[33][6] + coeff0_34*dmats2[34][6];
          new_coeff0_7 = coeff0_0*dmats2[0][7] + coeff0_1*dmats2[1][7] + coeff0_2*dmats2[2][7] + coeff0_3*dmats2[3][7] + coeff0_4*dmats2[4][7] + coeff0_5*dmats2[5][7] + coeff0_6*dmats2[6][7] + coeff0_7*dmats2[7][7] + coeff0_8*dmats2[8][7] + coeff0_9*dmats2[9][7] + coeff0_10*dmats2[10][7] + coeff0_11*dmats2[11][7] + coeff0_12*dmats2[12][7] + coeff0_13*dmats2[13][7] + coeff0_14*dmats2[14][7] + coeff0_15*dmats2[15][7] + coeff0_16*dmats2[16][7] + coeff0_17*dmats2[17][7] + coeff0_18*dmats2[18][7] + coeff0_19*dmats2[19][7] + coeff0_20*dmats2[20][7] + coeff0_21*dmats2[21][7] + coeff0_22*dmats2[22][7] + coeff0_23*dmats2[23][7] + coeff0_24*dmats2[24][7] + coeff0_25*dmats2[25][7] + coeff0_26*dmats2[26][7] + coeff0_27*dmats2[27][7] + coeff0_28*dmats2[28][7] + coeff0_29*dmats2[29][7] + coeff0_30*dmats2[30][7] + coeff0_31*dmats2[31][7] + coeff0_32*dmats2[32][7] + coeff0_33*dmats2[33][7] + coeff0_34*dmats2[34][7];
          new_coeff0_8 = coeff0_0*dmats2[0][8] + coeff0_1*dmats2[1][8] + coeff0_2*dmats2[2][8] + coeff0_3*dmats2[3][8] + coeff0_4*dmats2[4][8] + coeff0_5*dmats2[5][8] + coeff0_6*dmats2[6][8] + coeff0_7*dmats2[7][8] + coeff0_8*dmats2[8][8] + coeff0_9*dmats2[9][8] + coeff0_10*dmats2[10][8] + coeff0_11*dmats2[11][8] + coeff0_12*dmats2[12][8] + coeff0_13*dmats2[13][8] + coeff0_14*dmats2[14][8] + coeff0_15*dmats2[15][8] + coeff0_16*dmats2[16][8] + coeff0_17*dmats2[17][8] + coeff0_18*dmats2[18][8] + coeff0_19*dmats2[19][8] + coeff0_20*dmats2[20][8] + coeff0_21*dmats2[21][8] + coeff0_22*dmats2[22][8] + coeff0_23*dmats2[23][8] + coeff0_24*dmats2[24][8] + coeff0_25*dmats2[25][8] + coeff0_26*dmats2[26][8] + coeff0_27*dmats2[27][8] + coeff0_28*dmats2[28][8] + coeff0_29*dmats2[29][8] + coeff0_30*dmats2[30][8] + coeff0_31*dmats2[31][8] + coeff0_32*dmats2[32][8] + coeff0_33*dmats2[33][8] + coeff0_34*dmats2[34][8];
          new_coeff0_9 = coeff0_0*dmats2[0][9] + coeff0_1*dmats2[1][9] + coeff0_2*dmats2[2][9] + coeff0_3*dmats2[3][9] + coeff0_4*dmats2[4][9] + coeff0_5*dmats2[5][9] + coeff0_6*dmats2[6][9] + coeff0_7*dmats2[7][9] + coeff0_8*dmats2[8][9] + coeff0_9*dmats2[9][9] + coeff0_10*dmats2[10][9] + coeff0_11*dmats2[11][9] + coeff0_12*dmats2[12][9] + coeff0_13*dmats2[13][9] + coeff0_14*dmats2[14][9] + coeff0_15*dmats2[15][9] + coeff0_16*dmats2[16][9] + coeff0_17*dmats2[17][9] + coeff0_18*dmats2[18][9] + coeff0_19*dmats2[19][9] + coeff0_20*dmats2[20][9] + coeff0_21*dmats2[21][9] + coeff0_22*dmats2[22][9] + coeff0_23*dmats2[23][9] + coeff0_24*dmats2[24][9] + coeff0_25*dmats2[25][9] + coeff0_26*dmats2[26][9] + coeff0_27*dmats2[27][9] + coeff0_28*dmats2[28][9] + coeff0_29*dmats2[29][9] + coeff0_30*dmats2[30][9] + coeff0_31*dmats2[31][9] + coeff0_32*dmats2[32][9] + coeff0_33*dmats2[33][9] + coeff0_34*dmats2[34][9];
          new_coeff0_10 = coeff0_0*dmats2[0][10] + coeff0_1*dmats2[1][10] + coeff0_2*dmats2[2][10] + coeff0_3*dmats2[3][10] + coeff0_4*dmats2[4][10] + coeff0_5*dmats2[5][10] + coeff0_6*dmats2[6][10] + coeff0_7*dmats2[7][10] + coeff0_8*dmats2[8][10] + coeff0_9*dmats2[9][10] + coeff0_10*dmats2[10][10] + coeff0_11*dmats2[11][10] + coeff0_12*dmats2[12][10] + coeff0_13*dmats2[13][10] + coeff0_14*dmats2[14][10] + coeff0_15*dmats2[15][10] + coeff0_16*dmats2[16][10] + coeff0_17*dmats2[17][10] + coeff0_18*dmats2[18][10] + coeff0_19*dmats2[19][10] + coeff0_20*dmats2[20][10] + coeff0_21*dmats2[21][10] + coeff0_22*dmats2[22][10] + coeff0_23*dmats2[23][10] + coeff0_24*dmats2[24][10] + coeff0_25*dmats2[25][10] + coeff0_26*dmats2[26][10] + coeff0_27*dmats2[27][10] + coeff0_28*dmats2[28][10] + coeff0_29*dmats2[29][10] + coeff0_30*dmats2[30][10] + coeff0_31*dmats2[31][10] + coeff0_32*dmats2[32][10] + coeff0_33*dmats2[33][10] + coeff0_34*dmats2[34][10];
          new_coeff0_11 = coeff0_0*dmats2[0][11] + coeff0_1*dmats2[1][11] + coeff0_2*dmats2[2][11] + coeff0_3*dmats2[3][11] + coeff0_4*dmats2[4][11] + coeff0_5*dmats2[5][11] + coeff0_6*dmats2[6][11] + coeff0_7*dmats2[7][11] + coeff0_8*dmats2[8][11] + coeff0_9*dmats2[9][11] + coeff0_10*dmats2[10][11] + coeff0_11*dmats2[11][11] + coeff0_12*dmats2[12][11] + coeff0_13*dmats2[13][11] + coeff0_14*dmats2[14][11] + coeff0_15*dmats2[15][11] + coeff0_16*dmats2[16][11] + coeff0_17*dmats2[17][11] + coeff0_18*dmats2[18][11] + coeff0_19*dmats2[19][11] + coeff0_20*dmats2[20][11] + coeff0_21*dmats2[21][11] + coeff0_22*dmats2[22][11] + coeff0_23*dmats2[23][11] + coeff0_24*dmats2[24][11] + coeff0_25*dmats2[25][11] + coeff0_26*dmats2[26][11] + coeff0_27*dmats2[27][11] + coeff0_28*dmats2[28][11] + coeff0_29*dmats2[29][11] + coeff0_30*dmats2[30][11] + coeff0_31*dmats2[31][11] + coeff0_32*dmats2[32][11] + coeff0_33*dmats2[33][11] + coeff0_34*dmats2[34][11];
          new_coeff0_12 = coeff0_0*dmats2[0][12] + coeff0_1*dmats2[1][12] + coeff0_2*dmats2[2][12] + coeff0_3*dmats2[3][12] + coeff0_4*dmats2[4][12] + coeff0_5*dmats2[5][12] + coeff0_6*dmats2[6][12] + coeff0_7*dmats2[7][12] + coeff0_8*dmats2[8][12] + coeff0_9*dmats2[9][12] + coeff0_10*dmats2[10][12] + coeff0_11*dmats2[11][12] + coeff0_12*dmats2[12][12] + coeff0_13*dmats2[13][12] + coeff0_14*dmats2[14][12] + coeff0_15*dmats2[15][12] + coeff0_16*dmats2[16][12] + coeff0_17*dmats2[17][12] + coeff0_18*dmats2[18][12] + coeff0_19*dmats2[19][12] + coeff0_20*dmats2[20][12] + coeff0_21*dmats2[21][12] + coeff0_22*dmats2[22][12] + coeff0_23*dmats2[23][12] + coeff0_24*dmats2[24][12] + coeff0_25*dmats2[25][12] + coeff0_26*dmats2[26][12] + coeff0_27*dmats2[27][12] + coeff0_28*dmats2[28][12] + coeff0_29*dmats2[29][12] + coeff0_30*dmats2[30][12] + coeff0_31*dmats2[31][12] + coeff0_32*dmats2[32][12] + coeff0_33*dmats2[33][12] + coeff0_34*dmats2[34][12];
          new_coeff0_13 = coeff0_0*dmats2[0][13] + coeff0_1*dmats2[1][13] + coeff0_2*dmats2[2][13] + coeff0_3*dmats2[3][13] + coeff0_4*dmats2[4][13] + coeff0_5*dmats2[5][13] + coeff0_6*dmats2[6][13] + coeff0_7*dmats2[7][13] + coeff0_8*dmats2[8][13] + coeff0_9*dmats2[9][13] + coeff0_10*dmats2[10][13] + coeff0_11*dmats2[11][13] + coeff0_12*dmats2[12][13] + coeff0_13*dmats2[13][13] + coeff0_14*dmats2[14][13] + coeff0_15*dmats2[15][13] + coeff0_16*dmats2[16][13] + coeff0_17*dmats2[17][13] + coeff0_18*dmats2[18][13] + coeff0_19*dmats2[19][13] + coeff0_20*dmats2[20][13] + coeff0_21*dmats2[21][13] + coeff0_22*dmats2[22][13] + coeff0_23*dmats2[23][13] + coeff0_24*dmats2[24][13] + coeff0_25*dmats2[25][13] + coeff0_26*dmats2[26][13] + coeff0_27*dmats2[27][13] + coeff0_28*dmats2[28][13] + coeff0_29*dmats2[29][13] + coeff0_30*dmats2[30][13] + coeff0_31*dmats2[31][13] + coeff0_32*dmats2[32][13] + coeff0_33*dmats2[33][13] + coeff0_34*dmats2[34][13];
          new_coeff0_14 = coeff0_0*dmats2[0][14] + coeff0_1*dmats2[1][14] + coeff0_2*dmats2[2][14] + coeff0_3*dmats2[3][14] + coeff0_4*dmats2[4][14] + coeff0_5*dmats2[5][14] + coeff0_6*dmats2[6][14] + coeff0_7*dmats2[7][14] + coeff0_8*dmats2[8][14] + coeff0_9*dmats2[9][14] + coeff0_10*dmats2[10][14] + coeff0_11*dmats2[11][14] + coeff0_12*dmats2[12][14] + coeff0_13*dmats2[13][14] + coeff0_14*dmats2[14][14] + coeff0_15*dmats2[15][14] + coeff0_16*dmats2[16][14] + coeff0_17*dmats2[17][14] + coeff0_18*dmats2[18][14] + coeff0_19*dmats2[19][14] + coeff0_20*dmats2[20][14] + coeff0_21*dmats2[21][14] + coeff0_22*dmats2[22][14] + coeff0_23*dmats2[23][14] + coeff0_24*dmats2[24][14] + coeff0_25*dmats2[25][14] + coeff0_26*dmats2[26][14] + coeff0_27*dmats2[27][14] + coeff0_28*dmats2[28][14] + coeff0_29*dmats2[29][14] + coeff0_30*dmats2[30][14] + coeff0_31*dmats2[31][14] + coeff0_32*dmats2[32][14] + coeff0_33*dmats2[33][14] + coeff0_34*dmats2[34][14];
          new_coeff0_15 = coeff0_0*dmats2[0][15] + coeff0_1*dmats2[1][15] + coeff0_2*dmats2[2][15] + coeff0_3*dmats2[3][15] + coeff0_4*dmats2[4][15] + coeff0_5*dmats2[5][15] + coeff0_6*dmats2[6][15] + coeff0_7*dmats2[7][15] + coeff0_8*dmats2[8][15] + coeff0_9*dmats2[9][15] + coeff0_10*dmats2[10][15] + coeff0_11*dmats2[11][15] + coeff0_12*dmats2[12][15] + coeff0_13*dmats2[13][15] + coeff0_14*dmats2[14][15] + coeff0_15*dmats2[15][15] + coeff0_16*dmats2[16][15] + coeff0_17*dmats2[17][15] + coeff0_18*dmats2[18][15] + coeff0_19*dmats2[19][15] + coeff0_20*dmats2[20][15] + coeff0_21*dmats2[21][15] + coeff0_22*dmats2[22][15] + coeff0_23*dmats2[23][15] + coeff0_24*dmats2[24][15] + coeff0_25*dmats2[25][15] + coeff0_26*dmats2[26][15] + coeff0_27*dmats2[27][15] + coeff0_28*dmats2[28][15] + coeff0_29*dmats2[29][15] + coeff0_30*dmats2[30][15] + coeff0_31*dmats2[31][15] + coeff0_32*dmats2[32][15] + coeff0_33*dmats2[33][15] + coeff0_34*dmats2[34][15];
          new_coeff0_16 = coeff0_0*dmats2[0][16] + coeff0_1*dmats2[1][16] + coeff0_2*dmats2[2][16] + coeff0_3*dmats2[3][16] + coeff0_4*dmats2[4][16] + coeff0_5*dmats2[5][16] + coeff0_6*dmats2[6][16] + coeff0_7*dmats2[7][16] + coeff0_8*dmats2[8][16] + coeff0_9*dmats2[9][16] + coeff0_10*dmats2[10][16] + coeff0_11*dmats2[11][16] + coeff0_12*dmats2[12][16] + coeff0_13*dmats2[13][16] + coeff0_14*dmats2[14][16] + coeff0_15*dmats2[15][16] + coeff0_16*dmats2[16][16] + coeff0_17*dmats2[17][16] + coeff0_18*dmats2[18][16] + coeff0_19*dmats2[19][16] + coeff0_20*dmats2[20][16] + coeff0_21*dmats2[21][16] + coeff0_22*dmats2[22][16] + coeff0_23*dmats2[23][16] + coeff0_24*dmats2[24][16] + coeff0_25*dmats2[25][16] + coeff0_26*dmats2[26][16] + coeff0_27*dmats2[27][16] + coeff0_28*dmats2[28][16] + coeff0_29*dmats2[29][16] + coeff0_30*dmats2[30][16] + coeff0_31*dmats2[31][16] + coeff0_32*dmats2[32][16] + coeff0_33*dmats2[33][16] + coeff0_34*dmats2[34][16];
          new_coeff0_17 = coeff0_0*dmats2[0][17] + coeff0_1*dmats2[1][17] + coeff0_2*dmats2[2][17] + coeff0_3*dmats2[3][17] + coeff0_4*dmats2[4][17] + coeff0_5*dmats2[5][17] + coeff0_6*dmats2[6][17] + coeff0_7*dmats2[7][17] + coeff0_8*dmats2[8][17] + coeff0_9*dmats2[9][17] + coeff0_10*dmats2[10][17] + coeff0_11*dmats2[11][17] + coeff0_12*dmats2[12][17] + coeff0_13*dmats2[13][17] + coeff0_14*dmats2[14][17] + coeff0_15*dmats2[15][17] + coeff0_16*dmats2[16][17] + coeff0_17*dmats2[17][17] + coeff0_18*dmats2[18][17] + coeff0_19*dmats2[19][17] + coeff0_20*dmats2[20][17] + coeff0_21*dmats2[21][17] + coeff0_22*dmats2[22][17] + coeff0_23*dmats2[23][17] + coeff0_24*dmats2[24][17] + coeff0_25*dmats2[25][17] + coeff0_26*dmats2[26][17] + coeff0_27*dmats2[27][17] + coeff0_28*dmats2[28][17] + coeff0_29*dmats2[29][17] + coeff0_30*dmats2[30][17] + coeff0_31*dmats2[31][17] + coeff0_32*dmats2[32][17] + coeff0_33*dmats2[33][17] + coeff0_34*dmats2[34][17];
          new_coeff0_18 = coeff0_0*dmats2[0][18] + coeff0_1*dmats2[1][18] + coeff0_2*dmats2[2][18] + coeff0_3*dmats2[3][18] + coeff0_4*dmats2[4][18] + coeff0_5*dmats2[5][18] + coeff0_6*dmats2[6][18] + coeff0_7*dmats2[7][18] + coeff0_8*dmats2[8][18] + coeff0_9*dmats2[9][18] + coeff0_10*dmats2[10][18] + coeff0_11*dmats2[11][18] + coeff0_12*dmats2[12][18] + coeff0_13*dmats2[13][18] + coeff0_14*dmats2[14][18] + coeff0_15*dmats2[15][18] + coeff0_16*dmats2[16][18] + coeff0_17*dmats2[17][18] + coeff0_18*dmats2[18][18] + coeff0_19*dmats2[19][18] + coeff0_20*dmats2[20][18] + coeff0_21*dmats2[21][18] + coeff0_22*dmats2[22][18] + coeff0_23*dmats2[23][18] + coeff0_24*dmats2[24][18] + coeff0_25*dmats2[25][18] + coeff0_26*dmats2[26][18] + coeff0_27*dmats2[27][18] + coeff0_28*dmats2[28][18] + coeff0_29*dmats2[29][18] + coeff0_30*dmats2[30][18] + coeff0_31*dmats2[31][18] + coeff0_32*dmats2[32][18] + coeff0_33*dmats2[33][18] + coeff0_34*dmats2[34][18];
          new_coeff0_19 = coeff0_0*dmats2[0][19] + coeff0_1*dmats2[1][19] + coeff0_2*dmats2[2][19] + coeff0_3*dmats2[3][19] + coeff0_4*dmats2[4][19] + coeff0_5*dmats2[5][19] + coeff0_6*dmats2[6][19] + coeff0_7*dmats2[7][19] + coeff0_8*dmats2[8][19] + coeff0_9*dmats2[9][19] + coeff0_10*dmats2[10][19] + coeff0_11*dmats2[11][19] + coeff0_12*dmats2[12][19] + coeff0_13*dmats2[13][19] + coeff0_14*dmats2[14][19] + coeff0_15*dmats2[15][19] + coeff0_16*dmats2[16][19] + coeff0_17*dmats2[17][19] + coeff0_18*dmats2[18][19] + coeff0_19*dmats2[19][19] + coeff0_20*dmats2[20][19] + coeff0_21*dmats2[21][19] + coeff0_22*dmats2[22][19] + coeff0_23*dmats2[23][19] + coeff0_24*dmats2[24][19] + coeff0_25*dmats2[25][19] + coeff0_26*dmats2[26][19] + coeff0_27*dmats2[27][19] + coeff0_28*dmats2[28][19] + coeff0_29*dmats2[29][19] + coeff0_30*dmats2[30][19] + coeff0_31*dmats2[31][19] + coeff0_32*dmats2[32][19] + coeff0_33*dmats2[33][19] + coeff0_34*dmats2[34][19];
          new_coeff0_20 = coeff0_0*dmats2[0][20] + coeff0_1*dmats2[1][20] + coeff0_2*dmats2[2][20] + coeff0_3*dmats2[3][20] + coeff0_4*dmats2[4][20] + coeff0_5*dmats2[5][20] + coeff0_6*dmats2[6][20] + coeff0_7*dmats2[7][20] + coeff0_8*dmats2[8][20] + coeff0_9*dmats2[9][20] + coeff0_10*dmats2[10][20] + coeff0_11*dmats2[11][20] + coeff0_12*dmats2[12][20] + coeff0_13*dmats2[13][20] + coeff0_14*dmats2[14][20] + coeff0_15*dmats2[15][20] + coeff0_16*dmats2[16][20] + coeff0_17*dmats2[17][20] + coeff0_18*dmats2[18][20] + coeff0_19*dmats2[19][20] + coeff0_20*dmats2[20][20] + coeff0_21*dmats2[21][20] + coeff0_22*dmats2[22][20] + coeff0_23*dmats2[23][20] + coeff0_24*dmats2[24][20] + coeff0_25*dmats2[25][20] + coeff0_26*dmats2[26][20] + coeff0_27*dmats2[27][20] + coeff0_28*dmats2[28][20] + coeff0_29*dmats2[29][20] + coeff0_30*dmats2[30][20] + coeff0_31*dmats2[31][20] + coeff0_32*dmats2[32][20] + coeff0_33*dmats2[33][20] + coeff0_34*dmats2[34][20];
          new_coeff0_21 = coeff0_0*dmats2[0][21] + coeff0_1*dmats2[1][21] + coeff0_2*dmats2[2][21] + coeff0_3*dmats2[3][21] + coeff0_4*dmats2[4][21] + coeff0_5*dmats2[5][21] + coeff0_6*dmats2[6][21] + coeff0_7*dmats2[7][21] + coeff0_8*dmats2[8][21] + coeff0_9*dmats2[9][21] + coeff0_10*dmats2[10][21] + coeff0_11*dmats2[11][21] + coeff0_12*dmats2[12][21] + coeff0_13*dmats2[13][21] + coeff0_14*dmats2[14][21] + coeff0_15*dmats2[15][21] + coeff0_16*dmats2[16][21] + coeff0_17*dmats2[17][21] + coeff0_18*dmats2[18][21] + coeff0_19*dmats2[19][21] + coeff0_20*dmats2[20][21] + coeff0_21*dmats2[21][21] + coeff0_22*dmats2[22][21] + coeff0_23*dmats2[23][21] + coeff0_24*dmats2[24][21] + coeff0_25*dmats2[25][21] + coeff0_26*dmats2[26][21] + coeff0_27*dmats2[27][21] + coeff0_28*dmats2[28][21] + coeff0_29*dmats2[29][21] + coeff0_30*dmats2[30][21] + coeff0_31*dmats2[31][21] + coeff0_32*dmats2[32][21] + coeff0_33*dmats2[33][21] + coeff0_34*dmats2[34][21];
          new_coeff0_22 = coeff0_0*dmats2[0][22] + coeff0_1*dmats2[1][22] + coeff0_2*dmats2[2][22] + coeff0_3*dmats2[3][22] + coeff0_4*dmats2[4][22] + coeff0_5*dmats2[5][22] + coeff0_6*dmats2[6][22] + coeff0_7*dmats2[7][22] + coeff0_8*dmats2[8][22] + coeff0_9*dmats2[9][22] + coeff0_10*dmats2[10][22] + coeff0_11*dmats2[11][22] + coeff0_12*dmats2[12][22] + coeff0_13*dmats2[13][22] + coeff0_14*dmats2[14][22] + coeff0_15*dmats2[15][22] + coeff0_16*dmats2[16][22] + coeff0_17*dmats2[17][22] + coeff0_18*dmats2[18][22] + coeff0_19*dmats2[19][22] + coeff0_20*dmats2[20][22] + coeff0_21*dmats2[21][22] + coeff0_22*dmats2[22][22] + coeff0_23*dmats2[23][22] + coeff0_24*dmats2[24][22] + coeff0_25*dmats2[25][22] + coeff0_26*dmats2[26][22] + coeff0_27*dmats2[27][22] + coeff0_28*dmats2[28][22] + coeff0_29*dmats2[29][22] + coeff0_30*dmats2[30][22] + coeff0_31*dmats2[31][22] + coeff0_32*dmats2[32][22] + coeff0_33*dmats2[33][22] + coeff0_34*dmats2[34][22];
          new_coeff0_23 = coeff0_0*dmats2[0][23] + coeff0_1*dmats2[1][23] + coeff0_2*dmats2[2][23] + coeff0_3*dmats2[3][23] + coeff0_4*dmats2[4][23] + coeff0_5*dmats2[5][23] + coeff0_6*dmats2[6][23] + coeff0_7*dmats2[7][23] + coeff0_8*dmats2[8][23] + coeff0_9*dmats2[9][23] + coeff0_10*dmats2[10][23] + coeff0_11*dmats2[11][23] + coeff0_12*dmats2[12][23] + coeff0_13*dmats2[13][23] + coeff0_14*dmats2[14][23] + coeff0_15*dmats2[15][23] + coeff0_16*dmats2[16][23] + coeff0_17*dmats2[17][23] + coeff0_18*dmats2[18][23] + coeff0_19*dmats2[19][23] + coeff0_20*dmats2[20][23] + coeff0_21*dmats2[21][23] + coeff0_22*dmats2[22][23] + coeff0_23*dmats2[23][23] + coeff0_24*dmats2[24][23] + coeff0_25*dmats2[25][23] + coeff0_26*dmats2[26][23] + coeff0_27*dmats2[27][23] + coeff0_28*dmats2[28][23] + coeff0_29*dmats2[29][23] + coeff0_30*dmats2[30][23] + coeff0_31*dmats2[31][23] + coeff0_32*dmats2[32][23] + coeff0_33*dmats2[33][23] + coeff0_34*dmats2[34][23];
          new_coeff0_24 = coeff0_0*dmats2[0][24] + coeff0_1*dmats2[1][24] + coeff0_2*dmats2[2][24] + coeff0_3*dmats2[3][24] + coeff0_4*dmats2[4][24] + coeff0_5*dmats2[5][24] + coeff0_6*dmats2[6][24] + coeff0_7*dmats2[7][24] + coeff0_8*dmats2[8][24] + coeff0_9*dmats2[9][24] + coeff0_10*dmats2[10][24] + coeff0_11*dmats2[11][24] + coeff0_12*dmats2[12][24] + coeff0_13*dmats2[13][24] + coeff0_14*dmats2[14][24] + coeff0_15*dmats2[15][24] + coeff0_16*dmats2[16][24] + coeff0_17*dmats2[17][24] + coeff0_18*dmats2[18][24] + coeff0_19*dmats2[19][24] + coeff0_20*dmats2[20][24] + coeff0_21*dmats2[21][24] + coeff0_22*dmats2[22][24] + coeff0_23*dmats2[23][24] + coeff0_24*dmats2[24][24] + coeff0_25*dmats2[25][24] + coeff0_26*dmats2[26][24] + coeff0_27*dmats2[27][24] + coeff0_28*dmats2[28][24] + coeff0_29*dmats2[29][24] + coeff0_30*dmats2[30][24] + coeff0_31*dmats2[31][24] + coeff0_32*dmats2[32][24] + coeff0_33*dmats2[33][24] + coeff0_34*dmats2[34][24];
          new_coeff0_25 = coeff0_0*dmats2[0][25] + coeff0_1*dmats2[1][25] + coeff0_2*dmats2[2][25] + coeff0_3*dmats2[3][25] + coeff0_4*dmats2[4][25] + coeff0_5*dmats2[5][25] + coeff0_6*dmats2[6][25] + coeff0_7*dmats2[7][25] + coeff0_8*dmats2[8][25] + coeff0_9*dmats2[9][25] + coeff0_10*dmats2[10][25] + coeff0_11*dmats2[11][25] + coeff0_12*dmats2[12][25] + coeff0_13*dmats2[13][25] + coeff0_14*dmats2[14][25] + coeff0_15*dmats2[15][25] + coeff0_16*dmats2[16][25] + coeff0_17*dmats2[17][25] + coeff0_18*dmats2[18][25] + coeff0_19*dmats2[19][25] + coeff0_20*dmats2[20][25] + coeff0_21*dmats2[21][25] + coeff0_22*dmats2[22][25] + coeff0_23*dmats2[23][25] + coeff0_24*dmats2[24][25] + coeff0_25*dmats2[25][25] + coeff0_26*dmats2[26][25] + coeff0_27*dmats2[27][25] + coeff0_28*dmats2[28][25] + coeff0_29*dmats2[29][25] + coeff0_30*dmats2[30][25] + coeff0_31*dmats2[31][25] + coeff0_32*dmats2[32][25] + coeff0_33*dmats2[33][25] + coeff0_34*dmats2[34][25];
          new_coeff0_26 = coeff0_0*dmats2[0][26] + coeff0_1*dmats2[1][26] + coeff0_2*dmats2[2][26] + coeff0_3*dmats2[3][26] + coeff0_4*dmats2[4][26] + coeff0_5*dmats2[5][26] + coeff0_6*dmats2[6][26] + coeff0_7*dmats2[7][26] + coeff0_8*dmats2[8][26] + coeff0_9*dmats2[9][26] + coeff0_10*dmats2[10][26] + coeff0_11*dmats2[11][26] + coeff0_12*dmats2[12][26] + coeff0_13*dmats2[13][26] + coeff0_14*dmats2[14][26] + coeff0_15*dmats2[15][26] + coeff0_16*dmats2[16][26] + coeff0_17*dmats2[17][26] + coeff0_18*dmats2[18][26] + coeff0_19*dmats2[19][26] + coeff0_20*dmats2[20][26] + coeff0_21*dmats2[21][26] + coeff0_22*dmats2[22][26] + coeff0_23*dmats2[23][26] + coeff0_24*dmats2[24][26] + coeff0_25*dmats2[25][26] + coeff0_26*dmats2[26][26] + coeff0_27*dmats2[27][26] + coeff0_28*dmats2[28][26] + coeff0_29*dmats2[29][26] + coeff0_30*dmats2[30][26] + coeff0_31*dmats2[31][26] + coeff0_32*dmats2[32][26] + coeff0_33*dmats2[33][26] + coeff0_34*dmats2[34][26];
          new_coeff0_27 = coeff0_0*dmats2[0][27] + coeff0_1*dmats2[1][27] + coeff0_2*dmats2[2][27] + coeff0_3*dmats2[3][27] + coeff0_4*dmats2[4][27] + coeff0_5*dmats2[5][27] + coeff0_6*dmats2[6][27] + coeff0_7*dmats2[7][27] + coeff0_8*dmats2[8][27] + coeff0_9*dmats2[9][27] + coeff0_10*dmats2[10][27] + coeff0_11*dmats2[11][27] + coeff0_12*dmats2[12][27] + coeff0_13*dmats2[13][27] + coeff0_14*dmats2[14][27] + coeff0_15*dmats2[15][27] + coeff0_16*dmats2[16][27] + coeff0_17*dmats2[17][27] + coeff0_18*dmats2[18][27] + coeff0_19*dmats2[19][27] + coeff0_20*dmats2[20][27] + coeff0_21*dmats2[21][27] + coeff0_22*dmats2[22][27] + coeff0_23*dmats2[23][27] + coeff0_24*dmats2[24][27] + coeff0_25*dmats2[25][27] + coeff0_26*dmats2[26][27] + coeff0_27*dmats2[27][27] + coeff0_28*dmats2[28][27] + coeff0_29*dmats2[29][27] + coeff0_30*dmats2[30][27] + coeff0_31*dmats2[31][27] + coeff0_32*dmats2[32][27] + coeff0_33*dmats2[33][27] + coeff0_34*dmats2[34][27];
          new_coeff0_28 = coeff0_0*dmats2[0][28] + coeff0_1*dmats2[1][28] + coeff0_2*dmats2[2][28] + coeff0_3*dmats2[3][28] + coeff0_4*dmats2[4][28] + coeff0_5*dmats2[5][28] + coeff0_6*dmats2[6][28] + coeff0_7*dmats2[7][28] + coeff0_8*dmats2[8][28] + coeff0_9*dmats2[9][28] + coeff0_10*dmats2[10][28] + coeff0_11*dmats2[11][28] + coeff0_12*dmats2[12][28] + coeff0_13*dmats2[13][28] + coeff0_14*dmats2[14][28] + coeff0_15*dmats2[15][28] + coeff0_16*dmats2[16][28] + coeff0_17*dmats2[17][28] + coeff0_18*dmats2[18][28] + coeff0_19*dmats2[19][28] + coeff0_20*dmats2[20][28] + coeff0_21*dmats2[21][28] + coeff0_22*dmats2[22][28] + coeff0_23*dmats2[23][28] + coeff0_24*dmats2[24][28] + coeff0_25*dmats2[25][28] + coeff0_26*dmats2[26][28] + coeff0_27*dmats2[27][28] + coeff0_28*dmats2[28][28] + coeff0_29*dmats2[29][28] + coeff0_30*dmats2[30][28] + coeff0_31*dmats2[31][28] + coeff0_32*dmats2[32][28] + coeff0_33*dmats2[33][28] + coeff0_34*dmats2[34][28];
          new_coeff0_29 = coeff0_0*dmats2[0][29] + coeff0_1*dmats2[1][29] + coeff0_2*dmats2[2][29] + coeff0_3*dmats2[3][29] + coeff0_4*dmats2[4][29] + coeff0_5*dmats2[5][29] + coeff0_6*dmats2[6][29] + coeff0_7*dmats2[7][29] + coeff0_8*dmats2[8][29] + coeff0_9*dmats2[9][29] + coeff0_10*dmats2[10][29] + coeff0_11*dmats2[11][29] + coeff0_12*dmats2[12][29] + coeff0_13*dmats2[13][29] + coeff0_14*dmats2[14][29] + coeff0_15*dmats2[15][29] + coeff0_16*dmats2[16][29] + coeff0_17*dmats2[17][29] + coeff0_18*dmats2[18][29] + coeff0_19*dmats2[19][29] + coeff0_20*dmats2[20][29] + coeff0_21*dmats2[21][29] + coeff0_22*dmats2[22][29] + coeff0_23*dmats2[23][29] + coeff0_24*dmats2[24][29] + coeff0_25*dmats2[25][29] + coeff0_26*dmats2[26][29] + coeff0_27*dmats2[27][29] + coeff0_28*dmats2[28][29] + coeff0_29*dmats2[29][29] + coeff0_30*dmats2[30][29] + coeff0_31*dmats2[31][29] + coeff0_32*dmats2[32][29] + coeff0_33*dmats2[33][29] + coeff0_34*dmats2[34][29];
          new_coeff0_30 = coeff0_0*dmats2[0][30] + coeff0_1*dmats2[1][30] + coeff0_2*dmats2[2][30] + coeff0_3*dmats2[3][30] + coeff0_4*dmats2[4][30] + coeff0_5*dmats2[5][30] + coeff0_6*dmats2[6][30] + coeff0_7*dmats2[7][30] + coeff0_8*dmats2[8][30] + coeff0_9*dmats2[9][30] + coeff0_10*dmats2[10][30] + coeff0_11*dmats2[11][30] + coeff0_12*dmats2[12][30] + coeff0_13*dmats2[13][30] + coeff0_14*dmats2[14][30] + coeff0_15*dmats2[15][30] + coeff0_16*dmats2[16][30] + coeff0_17*dmats2[17][30] + coeff0_18*dmats2[18][30] + coeff0_19*dmats2[19][30] + coeff0_20*dmats2[20][30] + coeff0_21*dmats2[21][30] + coeff0_22*dmats2[22][30] + coeff0_23*dmats2[23][30] + coeff0_24*dmats2[24][30] + coeff0_25*dmats2[25][30] + coeff0_26*dmats2[26][30] + coeff0_27*dmats2[27][30] + coeff0_28*dmats2[28][30] + coeff0_29*dmats2[29][30] + coeff0_30*dmats2[30][30] + coeff0_31*dmats2[31][30] + coeff0_32*dmats2[32][30] + coeff0_33*dmats2[33][30] + coeff0_34*dmats2[34][30];
          new_coeff0_31 = coeff0_0*dmats2[0][31] + coeff0_1*dmats2[1][31] + coeff0_2*dmats2[2][31] + coeff0_3*dmats2[3][31] + coeff0_4*dmats2[4][31] + coeff0_5*dmats2[5][31] + coeff0_6*dmats2[6][31] + coeff0_7*dmats2[7][31] + coeff0_8*dmats2[8][31] + coeff0_9*dmats2[9][31] + coeff0_10*dmats2[10][31] + coeff0_11*dmats2[11][31] + coeff0_12*dmats2[12][31] + coeff0_13*dmats2[13][31] + coeff0_14*dmats2[14][31] + coeff0_15*dmats2[15][31] + coeff0_16*dmats2[16][31] + coeff0_17*dmats2[17][31] + coeff0_18*dmats2[18][31] + coeff0_19*dmats2[19][31] + coeff0_20*dmats2[20][31] + coeff0_21*dmats2[21][31] + coeff0_22*dmats2[22][31] + coeff0_23*dmats2[23][31] + coeff0_24*dmats2[24][31] + coeff0_25*dmats2[25][31] + coeff0_26*dmats2[26][31] + coeff0_27*dmats2[27][31] + coeff0_28*dmats2[28][31] + coeff0_29*dmats2[29][31] + coeff0_30*dmats2[30][31] + coeff0_31*dmats2[31][31] + coeff0_32*dmats2[32][31] + coeff0_33*dmats2[33][31] + coeff0_34*dmats2[34][31];
          new_coeff0_32 = coeff0_0*dmats2[0][32] + coeff0_1*dmats2[1][32] + coeff0_2*dmats2[2][32] + coeff0_3*dmats2[3][32] + coeff0_4*dmats2[4][32] + coeff0_5*dmats2[5][32] + coeff0_6*dmats2[6][32] + coeff0_7*dmats2[7][32] + coeff0_8*dmats2[8][32] + coeff0_9*dmats2[9][32] + coeff0_10*dmats2[10][32] + coeff0_11*dmats2[11][32] + coeff0_12*dmats2[12][32] + coeff0_13*dmats2[13][32] + coeff0_14*dmats2[14][32] + coeff0_15*dmats2[15][32] + coeff0_16*dmats2[16][32] + coeff0_17*dmats2[17][32] + coeff0_18*dmats2[18][32] + coeff0_19*dmats2[19][32] + coeff0_20*dmats2[20][32] + coeff0_21*dmats2[21][32] + coeff0_22*dmats2[22][32] + coeff0_23*dmats2[23][32] + coeff0_24*dmats2[24][32] + coeff0_25*dmats2[25][32] + coeff0_26*dmats2[26][32] + coeff0_27*dmats2[27][32] + coeff0_28*dmats2[28][32] + coeff0_29*dmats2[29][32] + coeff0_30*dmats2[30][32] + coeff0_31*dmats2[31][32] + coeff0_32*dmats2[32][32] + coeff0_33*dmats2[33][32] + coeff0_34*dmats2[34][32];
          new_coeff0_33 = coeff0_0*dmats2[0][33] + coeff0_1*dmats2[1][33] + coeff0_2*dmats2[2][33] + coeff0_3*dmats2[3][33] + coeff0_4*dmats2[4][33] + coeff0_5*dmats2[5][33] + coeff0_6*dmats2[6][33] + coeff0_7*dmats2[7][33] + coeff0_8*dmats2[8][33] + coeff0_9*dmats2[9][33] + coeff0_10*dmats2[10][33] + coeff0_11*dmats2[11][33] + coeff0_12*dmats2[12][33] + coeff0_13*dmats2[13][33] + coeff0_14*dmats2[14][33] + coeff0_15*dmats2[15][33] + coeff0_16*dmats2[16][33] + coeff0_17*dmats2[17][33] + coeff0_18*dmats2[18][33] + coeff0_19*dmats2[19][33] + coeff0_20*dmats2[20][33] + coeff0_21*dmats2[21][33] + coeff0_22*dmats2[22][33] + coeff0_23*dmats2[23][33] + coeff0_24*dmats2[24][33] + coeff0_25*dmats2[25][33] + coeff0_26*dmats2[26][33] + coeff0_27*dmats2[27][33] + coeff0_28*dmats2[28][33] + coeff0_29*dmats2[29][33] + coeff0_30*dmats2[30][33] + coeff0_31*dmats2[31][33] + coeff0_32*dmats2[32][33] + coeff0_33*dmats2[33][33] + coeff0_34*dmats2[34][33];
          new_coeff0_34 = coeff0_0*dmats2[0][34] + coeff0_1*dmats2[1][34] + coeff0_2*dmats2[2][34] + coeff0_3*dmats2[3][34] + coeff0_4*dmats2[4][34] + coeff0_5*dmats2[5][34] + coeff0_6*dmats2[6][34] + coeff0_7*dmats2[7][34] + coeff0_8*dmats2[8][34] + coeff0_9*dmats2[9][34] + coeff0_10*dmats2[10][34] + coeff0_11*dmats2[11][34] + coeff0_12*dmats2[12][34] + coeff0_13*dmats2[13][34] + coeff0_14*dmats2[14][34] + coeff0_15*dmats2[15][34] + coeff0_16*dmats2[16][34] + coeff0_17*dmats2[17][34] + coeff0_18*dmats2[18][34] + coeff0_19*dmats2[19][34] + coeff0_20*dmats2[20][34] + coeff0_21*dmats2[21][34] + coeff0_22*dmats2[22][34] + coeff0_23*dmats2[23][34] + coeff0_24*dmats2[24][34] + coeff0_25*dmats2[25][34] + coeff0_26*dmats2[26][34] + coeff0_27*dmats2[27][34] + coeff0_28*dmats2[28][34] + coeff0_29*dmats2[29][34] + coeff0_30*dmats2[30][34] + coeff0_31*dmats2[31][34] + coeff0_32*dmats2[32][34] + coeff0_33*dmats2[33][34] + coeff0_34*dmats2[34][34];
        }
    
      }
      // Compute derivatives on reference element as dot product of coefficients and basisvalues
      derivatives[deriv_num] = new_coeff0_0*basisvalue0 + new_coeff0_1*basisvalue1 + new_coeff0_2*basisvalue2 + new_coeff0_3*basisvalue3 + new_coeff0_4*basisvalue4 + new_coeff0_5*basisvalue5 + new_coeff0_6*basisvalue6 + new_coeff0_7*basisvalue7 + new_coeff0_8*basisvalue8 + new_coeff0_9*basisvalue9 + new_coeff0_10*basisvalue10 + new_coeff0_11*basisvalue11 + new_coeff0_12*basisvalue12 + new_coeff0_13*basisvalue13 + new_coeff0_14*basisvalue14 + new_coeff0_15*basisvalue15 + new_coeff0_16*basisvalue16 + new_coeff0_17*basisvalue17 + new_coeff0_18*basisvalue18 + new_coeff0_19*basisvalue19 + new_coeff0_20*basisvalue20 + new_coeff0_21*basisvalue21 + new_coeff0_22*basisvalue22 + new_coeff0_23*basisvalue23 + new_coeff0_24*basisvalue24 + new_coeff0_25*basisvalue25 + new_coeff0_26*basisvalue26 + new_coeff0_27*basisvalue27 + new_coeff0_28*basisvalue28 + new_coeff0_29*basisvalue29 + new_coeff0_30*basisvalue30 + new_coeff0_31*basisvalue31 + new_coeff0_32*basisvalue32 + new_coeff0_33*basisvalue33 + new_coeff0_34*basisvalue34;
    }
    
    // Transform derivatives back to physical element
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        values[row] += transform[row][col]*derivatives[col];
      }
    }
    // Delete pointer to array of derivatives on FIAT element
    delete [] derivatives;
    
    // Delete pointer to array of combinations of derivatives and transform
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      delete [] combinations[row];
      delete [] transform[row];
    }
    
    delete [] combinations;
    delete [] transform;
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis_derivatives() is not yet implemented.");
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // The reference points, direction and weights:
    static const double X[35][1][3] = {{{0, 0, 0}}, {{1, 0, 0}}, {{0, 1, 0}}, {{0, 0, 1}}, {{0, 0.75, 0.25}}, {{0, 0.5, 0.5}}, {{0, 0.25, 0.75}}, {{0.75, 0, 0.25}}, {{0.5, 0, 0.5}}, {{0.25, 0, 0.75}}, {{0.75, 0.25, 0}}, {{0.5, 0.5, 0}}, {{0.25, 0.75, 0}}, {{0, 0, 0.25}}, {{0, 0, 0.5}}, {{0, 0, 0.75}}, {{0, 0.25, 0}}, {{0, 0.5, 0}}, {{0, 0.75, 0}}, {{0.25, 0, 0}}, {{0.5, 0, 0}}, {{0.75, 0, 0}}, {{0.5, 0.25, 0.25}}, {{0.25, 0.5, 0.25}}, {{0.25, 0.25, 0.5}}, {{0, 0.25, 0.25}}, {{0, 0.5, 0.25}}, {{0, 0.25, 0.5}}, {{0.25, 0, 0.25}}, {{0.5, 0, 0.25}}, {{0.25, 0, 0.5}}, {{0.25, 0.25, 0}}, {{0.5, 0.25, 0}}, {{0.25, 0.5, 0}}, {{0.25, 0.25, 0.25}}};
    static const double W[35][1] = {{1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}};
    static const double D[35][1][1] = {{{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}};
    
    const double * const * x = c.coordinates;
    double result = 0.0;
    // Iterate over the points:
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0][0] - X[i][0][1] - X[i][0][2];
    const double w1 = X[i][0][0];
    const double w2 = X[i][0][1];
    const double w3 = X[i][0][2];
    
    // Compute affine mapping y = F(X)
    double y[3];
    y[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0] + w3*x[3][0];
    y[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1] + w3*x[3][1];
    y[2] = w0*x[0][2] + w1*x[1][2] + w2*x[2][2] + w3*x[3][2];
    
    // Evaluate function at physical points
    double values[1];
    f.evaluate(values, y, c);
    
    // Map function values using appropriate mapping
    // Affine map: Do nothing
    
    // Note that we do not map the weights (yet).
    
    // Take directional components
    for(int k = 0; k < 1; k++)
      result += values[k]*D[i][0][k];
    // Multiply by weights
    result *= W[i][0];
    
    return result;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate at vertices and use affine mapping
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new poisson3d_4_0_finite_element_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class poisson3d_4_0_dof_map_0: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  poisson3d_4_0_dof_map_0() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~poisson3d_4_0_dof_map_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for FiniteElement('Lagrange', 'tetrahedron', 4)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return true;
      break;
    case 2:
      return true;
      break;
    case 3:
      return true;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = m.num_entities[0] + 3*m.num_entities[1] + 3*m.num_entities[2] + m.num_entities[3];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 35;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 35;
  }

  // Return the geometric dimension of the coordinates this dof map provides
  virtual unsigned int geometric_dimension() const
  {
    return 3;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 15;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    dofs[3] = c.entity_indices[0][3];
    unsigned int offset = m.num_entities[0];
    dofs[4] = offset + 3*c.entity_indices[1][0];
    dofs[5] = offset + 3*c.entity_indices[1][0] + 1;
    dofs[6] = offset + 3*c.entity_indices[1][0] + 2;
    dofs[7] = offset + 3*c.entity_indices[1][1];
    dofs[8] = offset + 3*c.entity_indices[1][1] + 1;
    dofs[9] = offset + 3*c.entity_indices[1][1] + 2;
    dofs[10] = offset + 3*c.entity_indices[1][2];
    dofs[11] = offset + 3*c.entity_indices[1][2] + 1;
    dofs[12] = offset + 3*c.entity_indices[1][2] + 2;
    dofs[13] = offset + 3*c.entity_indices[1][3];
    dofs[14] = offset + 3*c.entity_indices[1][3] + 1;
    dofs[15] = offset + 3*c.entity_indices[1][3] + 2;
    dofs[16] = offset + 3*c.entity_indices[1][4];
    dofs[17] = offset + 3*c.entity_indices[1][4] + 1;
    dofs[18] = offset + 3*c.entity_indices[1][4] + 2;
    dofs[19] = offset + 3*c.entity_indices[1][5];
    dofs[20] = offset + 3*c.entity_indices[1][5] + 1;
    dofs[21] = offset + 3*c.entity_indices[1][5] + 2;
    offset = offset + 3*m.num_entities[1];
    dofs[22] = offset + 3*c.entity_indices[2][0];
    dofs[23] = offset + 3*c.entity_indices[2][0] + 1;
    dofs[24] = offset + 3*c.entity_indices[2][0] + 2;
    dofs[25] = offset + 3*c.entity_indices[2][1];
    dofs[26] = offset + 3*c.entity_indices[2][1] + 1;
    dofs[27] = offset + 3*c.entity_indices[2][1] + 2;
    dofs[28] = offset + 3*c.entity_indices[2][2];
    dofs[29] = offset + 3*c.entity_indices[2][2] + 1;
    dofs[30] = offset + 3*c.entity_indices[2][2] + 2;
    dofs[31] = offset + 3*c.entity_indices[2][3];
    dofs[32] = offset + 3*c.entity_indices[2][3] + 1;
    dofs[33] = offset + 3*c.entity_indices[2][3] + 2;
    offset = offset + 3*m.num_entities[2];
    dofs[34] = offset + c.entity_indices[3][0];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 7;
      dofs[7] = 8;
      dofs[8] = 9;
      dofs[9] = 10;
      dofs[10] = 11;
      dofs[11] = 12;
      dofs[12] = 22;
      dofs[13] = 23;
      dofs[14] = 24;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 13;
      dofs[7] = 14;
      dofs[8] = 15;
      dofs[9] = 16;
      dofs[10] = 17;
      dofs[11] = 18;
      dofs[12] = 25;
      dofs[13] = 26;
      dofs[14] = 27;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 7;
      dofs[4] = 8;
      dofs[5] = 9;
      dofs[6] = 13;
      dofs[7] = 14;
      dofs[8] = 15;
      dofs[9] = 19;
      dofs[10] = 20;
      dofs[11] = 21;
      dofs[12] = 28;
      dofs[13] = 29;
      dofs[14] = 30;
      break;
    case 3:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 10;
      dofs[4] = 11;
      dofs[5] = 12;
      dofs[6] = 16;
      dofs[7] = 17;
      dofs[8] = 18;
      dofs[9] = 19;
      dofs[10] = 20;
      dofs[11] = 21;
      dofs[12] = 31;
      dofs[13] = 32;
      dofs[14] = 33;
      break;
    }
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[0][2] = x[0][2];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[1][2] = x[1][2];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[2][2] = x[2][2];
    coordinates[3][0] = x[3][0];
    coordinates[3][1] = x[3][1];
    coordinates[3][2] = x[3][2];
    coordinates[4][0] = 0.75*x[2][0] + 0.25*x[3][0];
    coordinates[4][1] = 0.75*x[2][1] + 0.25*x[3][1];
    coordinates[4][2] = 0.75*x[2][2] + 0.25*x[3][2];
    coordinates[5][0] = 0.5*x[2][0] + 0.5*x[3][0];
    coordinates[5][1] = 0.5*x[2][1] + 0.5*x[3][1];
    coordinates[5][2] = 0.5*x[2][2] + 0.5*x[3][2];
    coordinates[6][0] = 0.25*x[2][0] + 0.75*x[3][0];
    coordinates[6][1] = 0.25*x[2][1] + 0.75*x[3][1];
    coordinates[6][2] = 0.25*x[2][2] + 0.75*x[3][2];
    coordinates[7][0] = 0.75*x[1][0] + 0.25*x[3][0];
    coordinates[7][1] = 0.75*x[1][1] + 0.25*x[3][1];
    coordinates[7][2] = 0.75*x[1][2] + 0.25*x[3][2];
    coordinates[8][0] = 0.5*x[1][0] + 0.5*x[3][0];
    coordinates[8][1] = 0.5*x[1][1] + 0.5*x[3][1];
    coordinates[8][2] = 0.5*x[1][2] + 0.5*x[3][2];
    coordinates[9][0] = 0.25*x[1][0] + 0.75*x[3][0];
    coordinates[9][1] = 0.25*x[1][1] + 0.75*x[3][1];
    coordinates[9][2] = 0.25*x[1][2] + 0.75*x[3][2];
    coordinates[10][0] = 0.75*x[1][0] + 0.25*x[2][0];
    coordinates[10][1] = 0.75*x[1][1] + 0.25*x[2][1];
    coordinates[10][2] = 0.75*x[1][2] + 0.25*x[2][2];
    coordinates[11][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[11][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[11][2] = 0.5*x[1][2] + 0.5*x[2][2];
    coordinates[12][0] = 0.25*x[1][0] + 0.75*x[2][0];
    coordinates[12][1] = 0.25*x[1][1] + 0.75*x[2][1];
    coordinates[12][2] = 0.25*x[1][2] + 0.75*x[2][2];
    coordinates[13][0] = 0.75*x[0][0] + 0.25*x[3][0];
    coordinates[13][1] = 0.75*x[0][1] + 0.25*x[3][1];
    coordinates[13][2] = 0.75*x[0][2] + 0.25*x[3][2];
    coordinates[14][0] = 0.5*x[0][0] + 0.5*x[3][0];
    coordinates[14][1] = 0.5*x[0][1] + 0.5*x[3][1];
    coordinates[14][2] = 0.5*x[0][2] + 0.5*x[3][2];
    coordinates[15][0] = 0.25*x[0][0] + 0.75*x[3][0];
    coordinates[15][1] = 0.25*x[0][1] + 0.75*x[3][1];
    coordinates[15][2] = 0.25*x[0][2] + 0.75*x[3][2];
    coordinates[16][0] = 0.75*x[0][0] + 0.25*x[2][0];
    coordinates[16][1] = 0.75*x[0][1] + 0.25*x[2][1];
    coordinates[16][2] = 0.75*x[0][2] + 0.25*x[2][2];
    coordinates[17][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[17][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[17][2] = 0.5*x[0][2] + 0.5*x[2][2];
    coordinates[18][0] = 0.25*x[0][0] + 0.75*x[2][0];
    coordinates[18][1] = 0.25*x[0][1] + 0.75*x[2][1];
    coordinates[18][2] = 0.25*x[0][2] + 0.75*x[2][2];
    coordinates[19][0] = 0.75*x[0][0] + 0.25*x[1][0];
    coordinates[19][1] = 0.75*x[0][1] + 0.25*x[1][1];
    coordinates[19][2] = 0.75*x[0][2] + 0.25*x[1][2];
    coordinates[20][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[20][1] = 0.5*x[0][1] + 0.5*x[1][1];
    coordinates[20][2] = 0.5*x[0][2] + 0.5*x[1][2];
    coordinates[21][0] = 0.25*x[0][0] + 0.75*x[1][0];
    coordinates[21][1] = 0.25*x[0][1] + 0.75*x[1][1];
    coordinates[21][2] = 0.25*x[0][2] + 0.75*x[1][2];
    coordinates[22][0] = 0.5*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[22][1] = 0.5*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[22][2] = 0.5*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
    coordinates[23][0] = 0.25*x[1][0] + 0.5*x[2][0] + 0.25*x[3][0];
    coordinates[23][1] = 0.25*x[1][1] + 0.5*x[2][1] + 0.25*x[3][1];
    coordinates[23][2] = 0.25*x[1][2] + 0.5*x[2][2] + 0.25*x[3][2];
    coordinates[24][0] = 0.25*x[1][0] + 0.25*x[2][0] + 0.5*x[3][0];
    coordinates[24][1] = 0.25*x[1][1] + 0.25*x[2][1] + 0.5*x[3][1];
    coordinates[24][2] = 0.25*x[1][2] + 0.25*x[2][2] + 0.5*x[3][2];
    coordinates[25][0] = 0.5*x[0][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[25][1] = 0.5*x[0][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[25][2] = 0.5*x[0][2] + 0.25*x[2][2] + 0.25*x[3][2];
    coordinates[26][0] = 0.25*x[0][0] + 0.5*x[2][0] + 0.25*x[3][0];
    coordinates[26][1] = 0.25*x[0][1] + 0.5*x[2][1] + 0.25*x[3][1];
    coordinates[26][2] = 0.25*x[0][2] + 0.5*x[2][2] + 0.25*x[3][2];
    coordinates[27][0] = 0.25*x[0][0] + 0.25*x[2][0] + 0.5*x[3][0];
    coordinates[27][1] = 0.25*x[0][1] + 0.25*x[2][1] + 0.5*x[3][1];
    coordinates[27][2] = 0.25*x[0][2] + 0.25*x[2][2] + 0.5*x[3][2];
    coordinates[28][0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[3][0];
    coordinates[28][1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[3][1];
    coordinates[28][2] = 0.5*x[0][2] + 0.25*x[1][2] + 0.25*x[3][2];
    coordinates[29][0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[3][0];
    coordinates[29][1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[3][1];
    coordinates[29][2] = 0.25*x[0][2] + 0.5*x[1][2] + 0.25*x[3][2];
    coordinates[30][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[3][0];
    coordinates[30][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[3][1];
    coordinates[30][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.5*x[3][2];
    coordinates[31][0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0];
    coordinates[31][1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1];
    coordinates[31][2] = 0.5*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2];
    coordinates[32][0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[2][0];
    coordinates[32][1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[2][1];
    coordinates[32][2] = 0.25*x[0][2] + 0.5*x[1][2] + 0.25*x[2][2];
    coordinates[33][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[2][0];
    coordinates[33][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[2][1];
    coordinates[33][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.5*x[2][2];
    coordinates[34][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[34][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[34][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new poisson3d_4_0_dof_map_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class poisson3d_4_0_dof_map_1: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  poisson3d_4_0_dof_map_1() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~poisson3d_4_0_dof_map_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for FiniteElement('Lagrange', 'tetrahedron', 4)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return true;
      break;
    case 2:
      return true;
      break;
    case 3:
      return true;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = m.num_entities[0] + 3*m.num_entities[1] + 3*m.num_entities[2] + m.num_entities[3];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 35;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 35;
  }

  // Return the geometric dimension of the coordinates this dof map provides
  virtual unsigned int geometric_dimension() const
  {
    return 3;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 15;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    dofs[3] = c.entity_indices[0][3];
    unsigned int offset = m.num_entities[0];
    dofs[4] = offset + 3*c.entity_indices[1][0];
    dofs[5] = offset + 3*c.entity_indices[1][0] + 1;
    dofs[6] = offset + 3*c.entity_indices[1][0] + 2;
    dofs[7] = offset + 3*c.entity_indices[1][1];
    dofs[8] = offset + 3*c.entity_indices[1][1] + 1;
    dofs[9] = offset + 3*c.entity_indices[1][1] + 2;
    dofs[10] = offset + 3*c.entity_indices[1][2];
    dofs[11] = offset + 3*c.entity_indices[1][2] + 1;
    dofs[12] = offset + 3*c.entity_indices[1][2] + 2;
    dofs[13] = offset + 3*c.entity_indices[1][3];
    dofs[14] = offset + 3*c.entity_indices[1][3] + 1;
    dofs[15] = offset + 3*c.entity_indices[1][3] + 2;
    dofs[16] = offset + 3*c.entity_indices[1][4];
    dofs[17] = offset + 3*c.entity_indices[1][4] + 1;
    dofs[18] = offset + 3*c.entity_indices[1][4] + 2;
    dofs[19] = offset + 3*c.entity_indices[1][5];
    dofs[20] = offset + 3*c.entity_indices[1][5] + 1;
    dofs[21] = offset + 3*c.entity_indices[1][5] + 2;
    offset = offset + 3*m.num_entities[1];
    dofs[22] = offset + 3*c.entity_indices[2][0];
    dofs[23] = offset + 3*c.entity_indices[2][0] + 1;
    dofs[24] = offset + 3*c.entity_indices[2][0] + 2;
    dofs[25] = offset + 3*c.entity_indices[2][1];
    dofs[26] = offset + 3*c.entity_indices[2][1] + 1;
    dofs[27] = offset + 3*c.entity_indices[2][1] + 2;
    dofs[28] = offset + 3*c.entity_indices[2][2];
    dofs[29] = offset + 3*c.entity_indices[2][2] + 1;
    dofs[30] = offset + 3*c.entity_indices[2][2] + 2;
    dofs[31] = offset + 3*c.entity_indices[2][3];
    dofs[32] = offset + 3*c.entity_indices[2][3] + 1;
    dofs[33] = offset + 3*c.entity_indices[2][3] + 2;
    offset = offset + 3*m.num_entities[2];
    dofs[34] = offset + c.entity_indices[3][0];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 7;
      dofs[7] = 8;
      dofs[8] = 9;
      dofs[9] = 10;
      dofs[10] = 11;
      dofs[11] = 12;
      dofs[12] = 22;
      dofs[13] = 23;
      dofs[14] = 24;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 13;
      dofs[7] = 14;
      dofs[8] = 15;
      dofs[9] = 16;
      dofs[10] = 17;
      dofs[11] = 18;
      dofs[12] = 25;
      dofs[13] = 26;
      dofs[14] = 27;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 7;
      dofs[4] = 8;
      dofs[5] = 9;
      dofs[6] = 13;
      dofs[7] = 14;
      dofs[8] = 15;
      dofs[9] = 19;
      dofs[10] = 20;
      dofs[11] = 21;
      dofs[12] = 28;
      dofs[13] = 29;
      dofs[14] = 30;
      break;
    case 3:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 10;
      dofs[4] = 11;
      dofs[5] = 12;
      dofs[6] = 16;
      dofs[7] = 17;
      dofs[8] = 18;
      dofs[9] = 19;
      dofs[10] = 20;
      dofs[11] = 21;
      dofs[12] = 31;
      dofs[13] = 32;
      dofs[14] = 33;
      break;
    }
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[0][2] = x[0][2];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[1][2] = x[1][2];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[2][2] = x[2][2];
    coordinates[3][0] = x[3][0];
    coordinates[3][1] = x[3][1];
    coordinates[3][2] = x[3][2];
    coordinates[4][0] = 0.75*x[2][0] + 0.25*x[3][0];
    coordinates[4][1] = 0.75*x[2][1] + 0.25*x[3][1];
    coordinates[4][2] = 0.75*x[2][2] + 0.25*x[3][2];
    coordinates[5][0] = 0.5*x[2][0] + 0.5*x[3][0];
    coordinates[5][1] = 0.5*x[2][1] + 0.5*x[3][1];
    coordinates[5][2] = 0.5*x[2][2] + 0.5*x[3][2];
    coordinates[6][0] = 0.25*x[2][0] + 0.75*x[3][0];
    coordinates[6][1] = 0.25*x[2][1] + 0.75*x[3][1];
    coordinates[6][2] = 0.25*x[2][2] + 0.75*x[3][2];
    coordinates[7][0] = 0.75*x[1][0] + 0.25*x[3][0];
    coordinates[7][1] = 0.75*x[1][1] + 0.25*x[3][1];
    coordinates[7][2] = 0.75*x[1][2] + 0.25*x[3][2];
    coordinates[8][0] = 0.5*x[1][0] + 0.5*x[3][0];
    coordinates[8][1] = 0.5*x[1][1] + 0.5*x[3][1];
    coordinates[8][2] = 0.5*x[1][2] + 0.5*x[3][2];
    coordinates[9][0] = 0.25*x[1][0] + 0.75*x[3][0];
    coordinates[9][1] = 0.25*x[1][1] + 0.75*x[3][1];
    coordinates[9][2] = 0.25*x[1][2] + 0.75*x[3][2];
    coordinates[10][0] = 0.75*x[1][0] + 0.25*x[2][0];
    coordinates[10][1] = 0.75*x[1][1] + 0.25*x[2][1];
    coordinates[10][2] = 0.75*x[1][2] + 0.25*x[2][2];
    coordinates[11][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[11][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[11][2] = 0.5*x[1][2] + 0.5*x[2][2];
    coordinates[12][0] = 0.25*x[1][0] + 0.75*x[2][0];
    coordinates[12][1] = 0.25*x[1][1] + 0.75*x[2][1];
    coordinates[12][2] = 0.25*x[1][2] + 0.75*x[2][2];
    coordinates[13][0] = 0.75*x[0][0] + 0.25*x[3][0];
    coordinates[13][1] = 0.75*x[0][1] + 0.25*x[3][1];
    coordinates[13][2] = 0.75*x[0][2] + 0.25*x[3][2];
    coordinates[14][0] = 0.5*x[0][0] + 0.5*x[3][0];
    coordinates[14][1] = 0.5*x[0][1] + 0.5*x[3][1];
    coordinates[14][2] = 0.5*x[0][2] + 0.5*x[3][2];
    coordinates[15][0] = 0.25*x[0][0] + 0.75*x[3][0];
    coordinates[15][1] = 0.25*x[0][1] + 0.75*x[3][1];
    coordinates[15][2] = 0.25*x[0][2] + 0.75*x[3][2];
    coordinates[16][0] = 0.75*x[0][0] + 0.25*x[2][0];
    coordinates[16][1] = 0.75*x[0][1] + 0.25*x[2][1];
    coordinates[16][2] = 0.75*x[0][2] + 0.25*x[2][2];
    coordinates[17][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[17][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[17][2] = 0.5*x[0][2] + 0.5*x[2][2];
    coordinates[18][0] = 0.25*x[0][0] + 0.75*x[2][0];
    coordinates[18][1] = 0.25*x[0][1] + 0.75*x[2][1];
    coordinates[18][2] = 0.25*x[0][2] + 0.75*x[2][2];
    coordinates[19][0] = 0.75*x[0][0] + 0.25*x[1][0];
    coordinates[19][1] = 0.75*x[0][1] + 0.25*x[1][1];
    coordinates[19][2] = 0.75*x[0][2] + 0.25*x[1][2];
    coordinates[20][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[20][1] = 0.5*x[0][1] + 0.5*x[1][1];
    coordinates[20][2] = 0.5*x[0][2] + 0.5*x[1][2];
    coordinates[21][0] = 0.25*x[0][0] + 0.75*x[1][0];
    coordinates[21][1] = 0.25*x[0][1] + 0.75*x[1][1];
    coordinates[21][2] = 0.25*x[0][2] + 0.75*x[1][2];
    coordinates[22][0] = 0.5*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[22][1] = 0.5*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[22][2] = 0.5*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
    coordinates[23][0] = 0.25*x[1][0] + 0.5*x[2][0] + 0.25*x[3][0];
    coordinates[23][1] = 0.25*x[1][1] + 0.5*x[2][1] + 0.25*x[3][1];
    coordinates[23][2] = 0.25*x[1][2] + 0.5*x[2][2] + 0.25*x[3][2];
    coordinates[24][0] = 0.25*x[1][0] + 0.25*x[2][0] + 0.5*x[3][0];
    coordinates[24][1] = 0.25*x[1][1] + 0.25*x[2][1] + 0.5*x[3][1];
    coordinates[24][2] = 0.25*x[1][2] + 0.25*x[2][2] + 0.5*x[3][2];
    coordinates[25][0] = 0.5*x[0][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[25][1] = 0.5*x[0][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[25][2] = 0.5*x[0][2] + 0.25*x[2][2] + 0.25*x[3][2];
    coordinates[26][0] = 0.25*x[0][0] + 0.5*x[2][0] + 0.25*x[3][0];
    coordinates[26][1] = 0.25*x[0][1] + 0.5*x[2][1] + 0.25*x[3][1];
    coordinates[26][2] = 0.25*x[0][2] + 0.5*x[2][2] + 0.25*x[3][2];
    coordinates[27][0] = 0.25*x[0][0] + 0.25*x[2][0] + 0.5*x[3][0];
    coordinates[27][1] = 0.25*x[0][1] + 0.25*x[2][1] + 0.5*x[3][1];
    coordinates[27][2] = 0.25*x[0][2] + 0.25*x[2][2] + 0.5*x[3][2];
    coordinates[28][0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[3][0];
    coordinates[28][1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[3][1];
    coordinates[28][2] = 0.5*x[0][2] + 0.25*x[1][2] + 0.25*x[3][2];
    coordinates[29][0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[3][0];
    coordinates[29][1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[3][1];
    coordinates[29][2] = 0.25*x[0][2] + 0.5*x[1][2] + 0.25*x[3][2];
    coordinates[30][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[3][0];
    coordinates[30][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[3][1];
    coordinates[30][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.5*x[3][2];
    coordinates[31][0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0];
    coordinates[31][1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1];
    coordinates[31][2] = 0.5*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2];
    coordinates[32][0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[2][0];
    coordinates[32][1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[2][1];
    coordinates[32][2] = 0.25*x[0][2] + 0.5*x[1][2] + 0.25*x[2][2];
    coordinates[33][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[2][0];
    coordinates[33][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[2][1];
    coordinates[33][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.5*x[2][2];
    coordinates[34][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[34][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[34][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new poisson3d_4_0_dof_map_1();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class poisson3d_4_0_cell_integral_0_quadrature: public ufc::cell_integral
{
public:

  /// Constructor
  poisson3d_4_0_cell_integral_0_quadrature() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~poisson3d_4_0_cell_integral_0_quadrature()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    const double Jinv_00 = d_00 / detJ;
    const double Jinv_01 = d_10 / detJ;
    const double Jinv_02 = d_20 / detJ;
    const double Jinv_10 = d_01 / detJ;
    const double Jinv_11 = d_11 / detJ;
    const double Jinv_12 = d_21 / detJ;
    const double Jinv_20 = d_02 / detJ;
    const double Jinv_21 = d_12 / detJ;
    const double Jinv_22 = d_22 / detJ;
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    
    // Array of quadrature weights
    static const double W64[64] = {0.0026134590075074, 0.00338108957856492, 0.00161758872343451, 0.000243985421620605, 0.00392412678076307, 0.00507672939399183, 0.00242882065938497, 0.000366345798555432, 0.00250430944300902, 0.0032398803788146, 0.00155003109035391, 0.000233795515279108, 0.000601372928720174, 0.000778009425931694, 0.000372217075256263, 5.6142540266951e-05, 0.00489961445988875, 0.00633873932658916, 0.00303259438036939, 0.00045741467393993, 0.00735680500908296, 0.00951766095289489, 0.00455346144286727, 0.000686811297504771, 0.00469498496963441, 0.00607400564032183, 0.00290593987575818, 0.000438311021534327, 0.00112743130421366, 0.00145858275269461, 0.000697818545806259, 0.000105253918778391, 0.00489961445988875, 0.00633873932658916, 0.00303259438036939, 0.00045741467393993, 0.00735680500908296, 0.00951766095289489, 0.00455346144286727, 0.000686811297504771, 0.00469498496963441, 0.00607400564032183, 0.00290593987575818, 0.000438311021534327, 0.00112743130421366, 0.00145858275269461, 0.000697818545806259, 0.000105253918778391, 0.0026134590075074, 0.00338108957856492, 0.00161758872343451, 0.000243985421620605, 0.00392412678076307, 0.00507672939399183, 0.00242882065938497, 0.000366345798555432, 0.00250430944300902, 0.0032398803788146, 0.00155003109035391, 0.000233795515279108, 0.000601372928720174, 0.000778009425931694, 0.000372217075256263, 5.6142540266951e-05};
    // Quadrature points on the UFC reference element: (0.0622918093484527, 0.0543346112272345, 0.0485005494469973), (0.0498465213688842, 0.0434790928042876, 0.238600737551862), (0.0316174621017319, 0.027578625974397, 0.517047295104368), (0.0133649941129659, 0.0116577406689234, 0.795851417896773), (0.0477749046478169, 0.263415975366112, 0.0485005494469973), (0.0382299507805671, 0.210788066397987, 0.238600737551862), (0.024249114818074, 0.13370208226799, 0.517047295104368), (0.0102503254608295, 0.0565171086994073, 0.795851417896773), (0.0275098322538483, 0.555285975747014, 0.0485005494469973), (0.0220136396042882, 0.444345324777483, 0.238600737551862), (0.013963169280339, 0.28184657786378, 0.517047295104368), (0.00590236100005809, 0.119139159297124, 0.795851417896773), (0.00923314621657362, 0.818518016420533, 0.0485005494469973), (0.007388454838612, 0.654986204816931, 0.238600737551862), (0.00468646927478461, 0.415455300374957, 0.517047295104368), (0.00198101397470041, 0.175616803962505, 0.795851417896773), (0.296072900492077, 0.0543346112272345, 0.0485005494469973), (0.236920460578858, 0.0434790928042876, 0.238600737551862), (0.150277762174051, 0.027578625974397, 0.517047295104368), (0.063523802141471, 0.0116577406689234, 0.795851417896773), (0.227074068609678, 0.263415975366112, 0.0485005494469973), (0.181706913503757, 0.210788066397987, 0.238600737551862), (0.115256015737018, 0.13370208226799, 0.517047295104368), (0.0487197855050096, 0.0565171086994073, 0.795851417896773), (0.130754202079533, 0.555285975747014, 0.0485005494469973), (0.104630804534349, 0.444345324777483, 0.238600737551862), (0.0663669280461273, 0.28184657786378, 0.517047295104368), (0.0280539152629691, 0.119139159297124, 0.795851417896773), (0.0438851336893508, 0.818518016420533, 0.0485005494469973), (0.0351173176233467, 0.654986204816931, 0.238600737551862), (0.0222747832462335, 0.415455300374957, 0.517047295104368), (0.00941575721655391, 0.175616803962505, 0.795851417896773), (0.601091938833691, 0.0543346112272345, 0.0485005494469973), (0.480999709064992, 0.0434790928042876, 0.238600737551862), (0.305096316747185, 0.027578625974397, 0.517047295104368), (0.128967039292833, 0.0116577406689234, 0.795851417896773), (0.461009406577212, 0.263415975366112, 0.0485005494469973), (0.368904282546393, 0.210788066397987, 0.238600737551862), (0.233994606890624, 0.13370208226799, 0.517047295104368), (0.0989116878988102, 0.0565171086994073, 0.795851417896773), (0.265459272726456, 0.555285975747014, 0.0485005494469973), (0.212423133136306, 0.444345324777483, 0.238600737551862), (0.134739198985725, 0.28184657786378, 0.517047295104368), (0.0569555075431344, 0.119139159297124, 0.795851417896773), (0.0890963004431186, 0.818518016420533, 0.0485005494469973), (0.0712957400078597, 0.654986204816931, 0.238600737551862), (0.045222621274442, 0.415455300374957, 0.517047295104368), (0.0191160209241683, 0.175616803962505, 0.795851417896773), (0.834873029977315, 0.0543346112272345, 0.0485005494469973), (0.668073648274966, 0.0434790928042876, 0.238600737551862), (0.423756616819504, 0.027578625974397, 0.517047295104368), (0.179125847321338, 0.0116577406689234, 0.795851417896773), (0.640308570539073, 0.263415975366112, 0.0485005494469973), (0.512381245269583, 0.210788066397987, 0.238600737551862), (0.325001507809568, 0.13370208226799, 0.517047295104368), (0.13738114794299, 0.0565171086994073, 0.795851417896773), (0.368703642552141, 0.555285975747014, 0.0485005494469973), (0.295040298066366, 0.444345324777483, 0.238600737551862), (0.187142957751513, 0.28184657786378, 0.517047295104368), (0.0791070618060454, 0.119139159297124, 0.795851417896773), (0.123748287915896, 0.818518016420533, 0.0485005494469973), (0.0990246027925943, 0.654986204816931, 0.238600737551862), (0.0628109352458909, 0.415455300374957, 0.517047295104368), (0.0265507641660218, 0.175616803962505, 0.795851417896773)
    
    // Value of basis functions at quadrature points.
    static const double FE0_D010[64][30] = \
    {{-2.61665455821179, -0.337956235103879, 0.108340828633998, 0.0883969431835132, 0.188263646324619, 0.218367276513482, 0.105762301137927, 0.139147830671432, -1.99429993054149, 0.887996330144005, -0.188263646324619, 4.74252247825223, -3.4506995190151, 1.66278783407854, -2.561384406432, 1.06244098376896, -0.218367276513486, -0.0725889973161096, -0.0546542982292126, -0.0779222420962022, 2.55246902761865, -0.666509925711162, -0.976393273327519, -0.549032743738478, 0.0725889973161065, 0.0779222420962024, 3.27827036701942, -1.16820328490688, -0.856033791258853, 0.603687041967696},
    {-0.0971243045950521, -0.44954039685909, 0.666327544990173, 0.0283809878733435, 0.0303348329193264, 0.191622862578407, 0.10410629044343, 0.139203719782342, -4.70183916807172, 0.189067653393768, -0.0303348329193258, 1.14613455744865, -2.29026183547777, 1.69079197948326, -0.982269916552128, 0.693532308512665, -0.191622862578408, -0.304705118454548, -0.248207903789395, -0.0173537509230901, 7.08790903930817, -3.05239741622662, -0.217448641267111, -1.65350431537734, 0.304705118454547, 0.0173537509230874, 1.48074818633696, -0.797638598956094, -0.637681989567177, 1.90171221916674},
    {0.157576792955306, -0.631126388910169, 1.89531730714558, -1.72179988344473, 0.100429811620992, 0.137985777757089, 0.0861011863854317, 0.115898726667426, -0.619333549054627, -5.28014630426966, -0.100429811620992, -0.272558266045291, -0.683595557110842, 1.429703419111, -0.0378722704885488, 0.264041637740579, -0.137985777757089, -0.456967333617832, -0.407710121462228, 0.558798755468932, 3.78243158221261, -5.05841534030356, 7.00194618771438, -1.25030156625702, 0.456967333617832, -0.558798755468934, 0.23129583760584, -0.350142824126011, -0.309322293784717, 1.65801168771925},
    {-0.332272064837321, -0.835475545867991, 3.66460410302373, -6.30243350482936, 5.48363837580173, 0.0656658884112431, 0.0458827667356927, 0.0615408996728308, 1.61056772993438, -3.00968549284731, -5.48363837580173, 0.197399746922217, 0.203432307017004, 0.766915556766091, 0.0270467925859696, 0.0219110122003377, -0.065665888411242, -0.322173434508339, -0.308626061699952, 0.7431648811884, -1.42182233628486, -3.85334949667324, 9.31211899767667, -0.14738233729893, 0.322173434508335, -0.743164881188404, -0.0238771292314195, -0.0677937789360324, -0.0647105630273787, 0.456008398998887},
    {0.0875743252958658, 0.312668579906081, -0.128217417910573, -0.173147693978936, 0.188263646324619, 0.186413882500133, -0.171171345641125, -0.126299082891032, -0.816407479188932, 0.644611219481142, -0.188263646324619, -2.93793538864611, 4.19475734029278, -1.65706485684861, -0.804192734241912, 0.637253476025953, -0.186413882500134, -0.059977934564401, 0.0821055794160294, -0.0597627155966184, -0.133865220053959, 1.07849011715346, -0.471463525502206, -0.305670704918613, 0.0599779345644013, 0.0597627155966175, -0.131862384996813, -0.466082130384826, 1.06235420212976, 0.223565125502585},
    {0.347307955877069, 0.35844227012522, -0.589309695251551, -0.0298665723416645, 0.030334832919327, 0.15950810376607, -0.0889006886871393, -0.0944225104881782, -1.46628619271142, 0.134864328704811, -0.030334832919326, -1.22434772362475, 1.8860986154724, -1.36750111784994, -0.234936612320397, 0.401436481027339, -0.15950810376607, -0.247257815454361, 0.200328327521336, -0.0133095153970368, -0.881760153558982, 2.93735604152195, -0.104997756363148, -0.904594779161601, 0.247257815454361, 0.0133095153970367, -0.141280566090026, -0.312535792340199, 0.470639688898602, 0.704266451640265},
    {-0.161328789785951, 0.204881260678232, -0.483666898076634, 0.15379832592809, 0.100429811620991, 0.111120368180022, -0.00609759402874502, -0.022683600235825, 1.00650376582928, -3.5347743375574, -0.10042981162099, 0.0782665809275573, 0.425215577845658, -0.547034629665496, 0.0472042414949515, 0.140142090387454, -0.111120368180022, -0.362297712445734, 0.0279311817241975, 0.42857251280838, -1.92627056670234, 1.40343369894969, 3.38097601162931, -0.641947327973583, 0.362297712445734, -0.42857251280838, -0.0903405869925548, -0.134044496358708, 0.0658199457334283, 0.614016146249386},
    {-0.219620965508788, -0.316700773842388, 1.6912589729984, -3.8080136322296, 5.48363837580173, 0.0513521406623345, 0.0215420851703899, 0.0217829038460466, 0.830265560700905, -0.688457792218694, -5.48363837580173, 0.298335211957056, 0.152951840302491, 0.0850346870916277, 0.0106935692074174, 0.00389463322050219, -0.0513521406623337, -0.250344264117832, -0.143018329933201, 0.569972709217251, -1.71865201592867, -0.802872517770628, 4.4964714244483, -0.0258565470562468, 0.250344264117827, -0.569972709217253, -0.0221357179506378, -0.025436718390894, -0.0103407551028237, 0.168874876989452},
    {-0.0209772079821645, -0.350933368613928, 0.449254419664605, -0.538254520513323, 0.188263646324618, 0.123390082929376, -0.337105568676909, 0.254820076580356, 0.041859643627712, 0.304854433244129, -0.188263646324617, 0.234075036228746, -2.87754163478653, 3.01537717515388, 0.0237430665741764, 0.190928497886898, -0.123390082929378, -0.037997532394798, 0.146971036680844, -0.034412675299237, -1.40851160820063, 0.917397544908313, 0.233400087269194, -0.0832408653956322, 0.0379975323947972, 0.0344126752992369, -0.798917094981411, 0.146177070790014, 0.520353951826877, -0.0637301712852095},
    {-0.244720001995119, -0.216923199943661, 0.517264163089155, -0.111178053602371, 0.0303348329193277, 0.102354027564883, -0.205149871732307, 0.0477235191445431, 0.574312506192715, 0.0591984535429122, -0.0303348329193271, 0.953331178547798, -1.33636979589499, 0.844681819285973, 0.0529868795095981, 0.109235184081512, -0.102354027564883, -0.153278933199055, 0.429402097731095, -0.00766390929823145, -4.20928411112942, 3.11770744184755, 0.0519796000594578, -0.228641708593652, 0.153278933199055, 0.00766390929823274, -0.388354471847844, 0.0959146876507955, 0.287644073193702, -0.200760389137444},
    {-0.343330389268093, 0.276022045414921, -1.31167064875703, 2.77206539309932, 0.100429811620991, 0.0683473488315223, -0.0661681199411171, -0.0354224448750851, 1.11730697889861, -1.09829838147577, -0.100429811620991, 0.766075457975781, -0.307559904120654, -0.391207210001955, 0.0301735385373513, 0.0262159540743642, -0.0683473488315225, -0.218124283638552, 0.28988736489458, 0.246781401718767, -3.09684445049345, 3.29120812035187, -1.67376701162355, -0.114854009023943, 0.218124283638551, -0.246781401718766, -0.0836321236114182, 0.0399521658667529, 0.0888810299491524, -0.175033355870637},
    {0.119021627700703, 0.138208304688548, -0.377808999793017, -0.325893969559766, 5.48363837580173, 0.0303732203363821, 0.00108083458798659, -0.00280198672226755, -0.852751660911763, 2.55189188053654, -5.48363837580173, 0.115115490962853, -0.0814424325893739, -0.290902990762731, -0.006324356573245, -0.00846340609805269, -0.0303732203363813, -0.14676797800365, -0.00704786611528454, 0.328202719302642, -0.263183207368186, 1.49374386807297, -2.22599791097678, 0.0551878647492857, 0.146767978003645, -0.328202719302642, -0.00195187476469415, 0.00738257151006353, 0.0110782180602098, -0.0481399986339964},
    {-0.160775122870768, 2.24400210538221, 1.87719259162015, -0.867537471440296, 0.188263646324616, 0.0465489992587223, -0.197339547588005, 0.357364893237734, 0.0303812937688837, -0.00156579513538815, -0.188263646324616, 0.763538283229875, -1.31234021251955, -1.53442505322177, 0.00578374741760962, -0.000356172861465216, -0.0465489992587224, -0.0138007611324121, 0.0795049346306657, -0.0115499527517763, -0.0842704290369312, -1.8233034563521, 0.869103266575685, 0.000143496326075884, 0.0138007611324058, 0.0115499527517773, -0.016042729451581, 0.197695720449468, -0.34710591120376, -0.0796484309567345},
    {-0.0231092835261096, 0.00319288667625742, 4.37286031043355, -0.184511342787659, 0.030334832919328, 0.0376754447559796, -0.121601693121927, 0.135408973378276, -0.0598673982106558, -0.00904317013277037, -0.0303348329193286, 0.0914307809021419, -0.132249321813456, 0.0607349377611652, -0.00185383990227219, -0.00595987641041879, -0.0376754447559799, -0.0547452997884497, 0.239182794430863, -0.00257224378862895, 0.582621768788858, -4.89561468101175, 0.193554512920433, 0.011722697749589, 0.054745299788448, 0.00257224378862853, 0.01804132992571, 0.127561569532344, -0.151596463401712, -0.25090549218045},
    {0.257570292859132, -0.132026023671421, 0.43297114205714, 5.13343100868266, 0.100429811620993, 0.0242960786153938, -0.0427421685926992, 0.00392441073250343, -0.940209564617416, 1.09911326458012, -0.100429811620994, -0.536154837699099, 0.110054087772664, 0.300556480738723, -0.00852197328592444, -0.0091514786850558, -0.0242960786153931, -0.0760864843203751, 0.18017532577527, 0.082827432191325, 2.64172503778601, -2.13448661522574, -6.23254427326278, 0.0385771407416862, 0.0760864843203729, -0.0828274321913231, 0.0239443535228576, 0.0518936472777527, -0.019346790969434, -0.218752466516952},
    {0.643627477463277, 0.326425626978739, -1.55864364979356, 2.81456398596072, 5.48363837580173, 0.0104401582457722, -0.00318329697115622, -0.0038797378284169, -2.96400307709653, 5.47430204856335, -5.48363837580173, -0.534208193621274, -0.203050639149188, -0.232794271671556, -0.00737792430187707, -0.00619148444209918, -0.0104401582457711, -0.0500511926820881, 0.0204293344527984, 0.110154931808951, 2.91813195089406, 1.60451477599603, -8.28886603452407, 0.0397348747456753, 0.0500511926820819, -0.11015493180895, 0.0072637430112515, 0.00937478141325154, 0.00399391911904673, -0.0601642091984665},
    {0.26052963780404, -0.33795623510388, 0.108340828633998, 0.0883969431835127, 0.188263646324618, -0.118688289051528, -0.123384593447938, 0.661369484286701, -0.635906402027003, 0.595554242297348, -0.188263646324618, 0.197864561630013, -1.26100414479345, 1.14056618046327, -3.88190762860052, -0.831275555643357, 0.118688289051528, 0.0846838980078671, -0.259771818644165, -0.370364329942858, 0.988957978689209, -0.461392405296205, -0.683951185480862, -1.75015337692899, -0.0846838980078689, 0.370364329942857, 6.03712041520847, 0.954660149091294, -2.81658227089465, 2.00992519557315},
    {0.302516099307214, -0.449540396859091, 0.666327544990172, 0.0283809878733445, 0.0303348329193264, 0.0347833019774881, 0.0323350839678313, 0.661635125168622, -0.993419927901685, 0.123939045497016, -0.0303348329193261, -0.27110144729822, -0.750234829246888, 1.16836057409698, -0.986424054181831, 0.141206481639182, -0.0347833019774883, -0.0946404443832311, -1.1797318904144, -0.0824823588198412, 2.44796581251313, -2.12087342960162, -0.152320033370361, -5.15185888147606, 0.0946404443832324, 0.0824823588198375, 2.43072671833568, -0.173541565607013, -2.10593778932247, 6.33159077189046},
    {-0.218437937623509, -0.631126388910169, 1.89531730714558, -1.72179988344472, 0.10042981162099, 0.22361384982296, 0.186874892225892, 0.550866518835754, 1.17789027189967, -3.18297519703051, -0.10042981162099, -0.0769603600663637, -0.0682109403426265, 0.994735626942669, 0.342349173516006, 0.345462996380709, -0.22361384982296, -0.991806556977169, -1.93784575346093, 2.65596986270808, 0.455072129259607, -3.52827970830485, 4.90477508047522, -3.58236461057065, 0.99180655697717, -2.65596986270809, 0.132264924041637, -0.532337888606602, -1.0254806163934, 5.52021036403159},
    {-0.18467858359371, -0.835475545867991, 3.66460410302373, -6.30243350482936, 5.48363837580173, 0.220601860279335, 0.171854823099441, 0.292503827639719, 0.629994022019079, -0.22058852101309, -5.48363837580173, 0.256334411241436, 0.227867089421063, 0.535952628799202, 0.0502852852996227, 0.00601501011116352, -0.220601860279334, -1.20670706092577, -1.46689932770779, 3.53226185302261, -1.59952189437741, -2.6950762306654, 6.52302202584245, -0.0513422558010627, 1.20670706092577, -3.53226185302262, -0.127671711144153, -0.177869833210607, -0.215117401795186, 1.51824158350885},
    {0.259550726522875, 0.312668579906081, -0.128217417910573, -0.173147693978935, 0.188263646324618, 0.0606216909073097, -0.0922339306404479, -0.600299400389245, -0.147079344555396, 0.420321814372867, -0.188263646324617, -0.960647123653589, 1.57149235657503, -1.1830645393504, -0.688608800465997, 0.223900949430204, -0.0606216909073092, -0.0323184972102072, 0.390247727567255, -0.284052120704891, -0.495051206536266, 0.770347969002236, -0.247174120393932, -0.947339402197953, 0.0323184972102067, 0.284052120704891, -2.31777356999158, -0.131667018789757, 3.60668177084682, 0.557091674630697},
    {-0.0203093940389603, 0.35844227012522, -0.58930969525155, -0.029866572341665, 0.0303348329193275, 0.16852491355416, -0.13626522617421, -0.44879008724239, 0.204474492569862, 0.0849137322354271, -0.0303348329193268, -0.064711555802704, 0.739712220812173, -1.01313354109573, 0.155717997003429, 0.387416031407633, -0.16852491355416, -0.378991913828712, 0.952160317710244, -0.0632601118664207, -1.80068884865135, 2.18552405133304, -0.0550471598937643, -2.70708956281723, 0.378991913828712, 0.0632601118664202, -1.37131853080694, -0.251150805233423, 1.6643906210459, 1.75492924510699},
    {-0.350400156294149, 0.204881260678232, -0.483666898076634, 0.153798325928091, 0.10042981162099, 0.254937392993913, -0.0172984082228326, -0.107815126670265, 1.3618387575883, -1.92634217405987, -0.100429811620989, 0.39466089105994, 0.212761107787033, -0.461903103231056, 0.303570119720277, 0.216664603484215, -0.254937392993913, -1.02781091993654, 0.132756875643076, 2.03700467630591, -2.17677986454248, 1.29860800503081, 1.77254384813178, -1.6627955272234, 1.02781091993654, -2.03700467630591, -0.485230223036152, -0.199366195261383, 0.28947522998614, 1.53003865158033},
    {-0.0223844325018227, -0.316700773842388, 1.6912589729984, -3.8080136322296, 5.48363837580173, 0.188817160483828, 0.0859604165777834, 0.103534117732256, -0.203161865393722, 1.45064915099943, -5.48363837580173, 0.241317562368114, 0.094484170770678, 0.00328347320541831, -0.0124369980152058, -0.0327463127423474, -0.188817160483827, -0.998960734822758, -0.679765962969308, 2.70907965243537, -1.22197222287016, -0.266124884734516, 2.35736448123017, 0.258954408333452, 0.998960734822755, -2.70907965243537, -0.0748057027386426, -0.0532141038354384, -0.0162914169784045, 0.420811554635858},
    {-0.309054780062582, -0.350933368613928, 0.449254419664607, -0.538254520513324, 0.188263646324617, 0.245642220944691, -0.858748318754998, 1.21115954032942, 0.127851137302471, 0.175703701153112, -0.188263646324617, 1.42270897612224, -2.82175853885054, 2.05903771140482, 0.344678021868894, 0.28032325268791, -0.24564222094469, -0.096795544460857, 0.698553173740879, -0.163563407390254, -0.942920964815349, 0.365815407848271, 0.362550819360211, -0.228030371136451, 0.096795544460857, 0.163563407390254, -2.54205116816729, 0.578425066067087, 0.986213605968973, -0.470522802604429},
    {-0.358579623296543, -0.216923199943661, 0.517264163089156, -0.111178053602372, 0.0303348329193279, 0.256580410431232, -0.621730944952844, 0.22682983336982, 0.593144251553413, 0.0304358104778528, -0.0303348329193275, 1.20255159330441, -1.29262427512491, 0.665575505060697, 0.260104645449673, 0.17020342230921, -0.256580410431232, -0.464529932066269, 2.04094769252014, -0.0364265523632912, -2.61657026170108, 1.50616184705851, 0.0807422431245184, -0.558724452821564, 0.464529932066268, 0.0364265523632921, -1.14741410446365, 0.451527522643634, 0.660479625644154, -1.48222323969857},
    {-0.209120412751909, 0.276022045414921, -1.31167064875703, 2.77206539309932, 0.100429811620991, 0.225482960005566, -0.244673893188876, -0.168362841060222, 0.499560744523662, -0.172128055533883, -0.100429811620991, 0.514343504016228, -0.322978322862424, -0.258266813816817, 0.0641223971199369, 0.0151927301496376, -0.225482960005566, -0.806571468622248, 1.37783432265121, 1.17295172766066, -1.39115125836187, 2.20326116259524, -2.59993733756544, -0.0855549596326921, 0.806571468622247, -1.17295172766065, -0.178564777998394, 0.229481163039238, 0.282805221938681, -1.29227936301852},
    {0.312478109057611, 0.138208304688548, -0.377808999793017, -0.325893969559765, 5.48363837580173, 0.125378211827877, 0.00467101063595315, -0.0133178397718845, -1.67399695237152, 3.78363632073527, -5.48363837580173, -0.0427577374324076, -0.127541538600638, -0.280387137713114, -0.0590087139335741, -0.0542305386031371, -0.125378211827877, -0.634282797655856, -0.0334984998004488, 1.55994715950137, 0.531611450406404, 1.52019450175813, -3.4577423511755, 0.388918336556835, 0.634282797655852, -1.55994715950137, 0.0187394056819546, 0.0495595279671812, 0.0535871480235074, -0.355419836756382},
    {0.0441090754128565, 2.24400210538221, 1.87719259162015, -0.867537471440297, 0.188263646324616, 0.17603121444546, -0.802961015003396, 1.69855493975253, -0.0313921455951209, -0.0449127549558017, -0.188263646324616, -0.278452704337051, 0.865956623278553, -2.87561509973657, -0.0284048020475103, -0.0415696064932332, -0.176031214445459, -0.0561543456551979, 0.377886865797334, -0.0548969125721909, 0.275884941493745, -2.12168538751878, 0.9124502263961, 0.0195633511672931, 0.0561543456551927, 0.0548969125721916, 0.249631141881453, 0.844530621496626, -1.91978127958647, -0.397450216964622},
    {0.182854617686689, 0.00319288667625736, 4.37286031043355, -0.184511342787659, 0.0303348329193279, 0.149676919217672, -0.511914330467095, 0.643598699734291, -0.339061320545862, -0.018696798208153, -0.0303348329193286, -0.697714152851518, 0.959121437083419, -0.447454788594849, -0.0499031319415465, -0.0518730111222507, -0.149676919217672, -0.230464747389051, 1.13683555567981, -0.0122258718640115, 1.75946845237301, -5.79326744226069, 0.203208140995816, 0.115197172484195, 0.230464747389049, 0.0122258718640107, 0.258959017160678, 0.563787341589345, -0.852654584953421, -1.252032728164},
    {0.43095300139955, -0.132026023671421, 0.432971142057141, 5.13343100868265, 0.100429811620993, 0.103393084530578, -0.188587926934789, 0.0186527198430666, -1.39647055428432, 1.40996452539349, -0.100429811620994, -0.942394586057497, 0.357639436701206, 0.28582817162816, -0.06016099339646, -0.0517981611997547, -0.103393084530577, -0.335710442829225, 0.856373122844855, 0.393678693004697, 3.7741838245225, -2.81068441229533, -6.54339553407615, 0.235214171899739, 0.335710442829223, -0.393678693004695, 0.162594655109283, 0.240386088134542, -0.121086381555887, -1.09158729474459},
    {0.73687391683395, 0.326425626978739, -1.55864364979356, 2.81456398596072, 5.48363837580173, 0.0474159810998232, -0.0146766561828571, -0.0184403895797013, -3.30810129762872, 5.88771338502162, -5.48363837580173, -0.639426571502028, -0.205639352390392, -0.218233619920271, -0.0391383089428379, -0.0307017163177606, -0.0474159810998222, -0.23076205368005, 0.0971006039129555, 0.523566268267228, 3.3389014408864, 1.52784350653588, -8.70227737098235, 0.2031222342799, 0.230762053680044, -0.523566268267227, 0.0395027069505925, 0.0453783725006138, 0.018075991571951, -0.300222838192849},
    {-0.242112183715196, -0.337956235103879, 0.108340828633997, 0.0883969431835134, 0.188263646324618, 0.910263235975048, -1.90887936855836, 1.34272290687397, 0.116156852148898, 0.213998984901442, -0.188263646324618, 0.0114409048411534, 0.109414756101923, 0.459212757875997, 1.43959085542531, -4.62118069312338, -0.910263235975046, 1.31014206262739, -0.527392901760545, -0.751919587338767, -0.03072635860307, -0.193771322179826, -0.302395928084955, -1.27675846648537, -1.31014206262739, 0.751919587338767, -0.380807365619682, 6.53006006168173, -2.4015063966796, 1.80415136824592},
    {-0.347940059792458, -0.44954039685909, 0.666327544990171, 0.028380987873345, 0.0303348329193263, -0.0900751953174301, -1.15940513698844, 1.34326221524189, 0.631043869767725, 0.0389643999770748, -0.0303348329193265, 0.149775465282281, 0.160971507345549, 0.486733484023718, 1.27213319153947, -1.59175310227737, 0.0900751953174294, 3.39342299200284, -2.39511055599667, -0.167457004339782, -0.391876650738551, -0.905494764019347, -0.0673453878504194, -3.2882592427594, -3.39342299200284, 0.16745700433978, -0.789991501822735, 2.75115823926581, -1.82540390495863, 5.68336979875607},
    {-0.264871803916117, -0.631126388910169, 1.89531730714558, -1.72179988344472, 0.100429811620989, -0.139787485467039, -0.209615672908321, 1.1183780187083, 0.72064371737298, -0.446752557129663, -0.100429811620988, 0.262052042480398, 0.206722023275767, 0.427224127070122, 0.425233331533269, -0.0543886306339465, 0.139787485467039, 1.11249936446437, -3.93424544824101, 5.39219250260893, -1.08408101099379, -1.53188001352477, 2.16855244057438, -1.02081213460242, -1.11249936446437, -5.39219250260893, -0.639688335363995, 0.264004303542267, -0.903923014877575, 4.95505758284343},
    {0.251073694749742, -0.835475545867991, 3.66460410302373, -6.30243350482935, 5.48363837580173, 0.247106172443951, 0.226456203454843, 0.593845950034656, -1.4200575783802, 3.41840414528315, -5.48363837580173, 0.199800662202129, 0.149990682511855, 0.234610506404265, -0.230119111922975, -0.122828558845077, -0.247106172443951, -1.59009968280775, -2.97812248098439, 7.17125451931886, -1.06069344725473, -1.18385307738879, 2.8840293595462, 1.61531672271624, 1.59009968280775, -7.17125451931885, -0.171884462870297, -0.103627644609769, -0.191842375241381, 1.36280575826815},
    {-0.354977542438393, 0.312668579906081, -0.128217417910572, -0.173147693978935, 0.188263646324617, -0.161830420667416, 1.7234861196673, -1.21873744561208, 0.12607184712706, 0.127686775663472, -0.188263646324617, 0.745342564296061, -0.138407107636185, -0.564626494127563, 1.19834327843348, -1.27097497208273, 0.161830420667416, 0.603904452120069, 0.79228717926895, -0.576687159414285, -0.36616294651703, 0.368308517300541, 0.0454609183154634, -0.584267644550132, -0.60390445212007, 0.576687159414285, -3.48046701757169, -0.452511147584568, 3.5008611847503, -0.208019534718817},
    {-0.336177667614903, 0.35844227012522, -0.58930969525155, -0.0298665723416651, 0.0303348329193272, -0.245351328163604, 0.481668275062813, -0.911140814378886, 0.493827561454052, 0.0197421530236554, -0.030334832919327, 0.604789100668449, -0.0762708892195326, -0.550782813959233, 0.763514413781913, -0.318388353512672, 0.245351328163603, 1.33965492533839, 1.93309110864833, -0.128431691078192, -1.10911112659746, 1.20459326039496, 0.0101244193180089, -1.27779579253432, -1.33965492533839, 0.128431691078193, -1.71481382924361, -0.16327992155014, 1.86244022984058, -0.655295316114008},
    {-0.118117019922264, 0.204881260678232, -0.483666898076633, 0.153798325928092, 0.10042981162099, 0.0425061088440197, -0.00417162582753463, -0.21888799487599, 0.177195303849182, 0.172212629272514, -0.100429811620989, 0.30075792298617, -0.0366919287168075, -0.350830235025329, 0.0801913980783609, -0.00467109539564617, -0.0425061088440196, -0.247863417500435, 0.26952513263177, 4.13555947963829, -0.855368153814663, 1.16183974804211, -0.326010955200608, 0.301795428951818, 0.247863417500435, -4.13555947963829, -0.387104887297051, 0.00884272122318065, 0.525801484094681, -0.57132056158359},
    {0.394442721463882, -0.316700773842388, 1.6912589729984, -3.8080136322296, 5.48363837580173, 0.255745030827462, 0.130999772008352, 0.210196622047081, -2.00482142866546, 4.2415863458704, -5.48363837580173, 0.0464454714237923, -0.0208083879358809, -0.103379031109406, -0.249167453855974, -0.145915140523652, -0.255745030827462, -1.52237080410914, -1.3800717321824, 5.50001684730634, -0.120618428811512, 0.43418088447858, -0.433572713640802, 1.53720390231881, 1.52237080410914, -5.50001684730634, -0.0149909544886884, 0.0149153685152971, 0.0539617862975855, -0.157132170136412},
    {-0.192468191903715, -0.350933368613929, 0.449254419664608, -0.538254520513325, 0.188263646324617, -0.0410670910943303, 0.226023772945922, 2.45891547359977, 0.0410587679977576, 0.00719806234883465, -0.188263646324617, 0.715726752162651, -0.983606969779475, 0.811281778134467, 0.224727983827076, -0.00302260946815981, 0.0410670910943308, 0.0254767243039443, 1.41821382802837, -0.332069046194531, -0.136467941223138, -0.353845246439228, 0.531056458164491, -0.0189657330669357, -0.0254767243039447, 0.332069046194531, -0.746933402623825, -0.223001163477763, -1.93671005480302, -1.39924809496144},
    {-0.0579729019650721, -0.216923199943662, 0.517264163089157, -0.111178053602372, 0.0303348329193273, 0.0979411138874706, -0.326281844202937, 0.460513556286239, -0.0091277466357055, -0.00709140647947486, -0.0303348329193273, 0.239581839576239, -0.396577519811784, 0.431891782144279, -0.0081263141041611, -0.0208116360121873, -0.0979411138874707, -0.243783398835881, 4.14356465423254, -0.0739537693206185, 0.0883186982004401, -0.596455114653891, 0.118269460081847, 0.264294078597947, 0.243783398835879, 0.0739537693206195, 0.0786289882368005, 0.347093480215125, -0.531016230418878, -4.40785873283049},
    {0.225565484443058, 0.27602204541492, -1.31167064875703, 2.77206539309932, 0.100429811620991, 0.242028983444845, -0.311788872704874, -0.341812933207462, -0.852939205087354, 1.03626557791776, -0.10042981162099, -0.239460959740109, -0.177309848448294, -0.0848167216695762, -0.222270469965022, -0.116554276521091, -0.242028983444845, -1.02781709025048, 2.79730128295274, 2.3813453611123, 1.38081565155066, 0.783794202293715, -3.80833097101709, 1.04569936835009, 1.02781709025048, -2.3813453611123, 0.359831676131938, 0.428343149225965, 0.204251727040547, -3.84300065130283},
    {0.625377600303054, 0.138208304688548, -0.377808999793017, -0.325893969559764, 5.48363837580173, 0.207840031305072, 0.00824827304637965, -0.0270380913493113, -2.89580215412672, 5.3907188388044, -5.48363837580173, -0.308124105784637, -0.188794913071278, -0.266666886135687, -0.207239539597305, -0.136437384707655, -0.207840031305071, -1.12004405715045, -0.0680091901676973, 3.1670296775705, 1.71890596179436, 1.55470519212538, -5.06482486924464, 1.12496227881744, 1.12004405715045, -3.16702967757049, 0.1230143708629, 0.128189111661273, 0.111263260083721, -1.05695308864974},
    {0.44518868379685, 2.24400210538221, 1.87719259162015, -0.867537471440299, 0.188263646324616, 0.251335865827114, -1.27260439352379, 3.44843341033408, -0.13440475230783, -0.101468432469225, -0.188263646324617, -2.09224641355794, 4.02854919469699, -4.6254935703181, -0.246903722311184, -0.1488456432319, -0.251335865827112, -0.0889984266495835, 0.76719195996792, -0.111452590085616, 0.768202642377044, -2.51099048168937, 0.969005903909525, 0.0897318768856152, 0.0889984266495789, 0.111452590085616, 1.41120078446163, 1.42145003675569, -4.61273047248452, -0.856923836853531},
    {0.542293065584039, 0.00319288667625725, 4.37286031043355, -0.184511342787659, 0.0303348329193275, 0.233047796265582, -0.864316933211785, 1.30664437579785, -0.773943947209463, -0.031292086978757, -0.0303348329193284, -1.9748873798075, 2.5399018922056, -1.1105004646584, -0.231260418584873, -0.146583295328364, -0.233047796265582, -0.389117029591611, 2.30802173100927, -0.0248211606346152, 3.36553725436607, -6.96445361759015, 0.215803429766421, 0.391427516945239, 0.389117029591609, 0.024821160634614, 1.00564848011794, 1.01090022854015, -2.08103243733091, -2.69944924795451},
    {0.696647594003245, -0.132026023671421, 0.432971142057141, 5.13343100868265, 0.100429811620993, 0.179690567637898, -0.344292044235393, 0.0378690502114714, -2.0533274054127, 1.81553861257372, -0.100429811620994, -1.54648645658891, 0.715253044997324, 0.266611841259756, -0.179590626402307, -0.121765637690282, -0.179690567637898, -0.612883531366303, 1.73862241333247, 0.799252780184926, 5.3132899661385, -3.69293370278294, -6.94896962125638, 0.614897934491046, 0.6128835313663, -0.799252780184925, 0.464717448742239, 0.466057681925673, -0.322995872551401, -2.35352034782352},
    {0.866122121955718, 0.326425626978739, -1.55864364979356, 2.81456398596072, 5.48363837580173, 0.0905566439693855, -0.0285953874203299, -0.0374379739141649, -3.77398544236569, 6.42709973003854, -5.48363837580173, -0.785371706004917, -0.207940007343735, -0.199236035585807, -0.0906495648074935, -0.0652980027053111, -0.0905566439693846, -0.449607202395341, 0.197135199374744, 1.06295261328414, 3.90482018108516, 1.42780891107409, -9.24166371599927, 0.450161230301578, 0.449607202395335, -1.06295261328414, 0.0937921609588961, 0.0938933901256371, 0.0342953777627669, -0.647296429676316},
    {0.262326815091423, -0.337956235103879, 0.108340828633995, 0.088396943183513, 0.188263646324618, 6.97671389735957, -4.41670862487792, 1.86494456048924, -0.0894026163922223, -0.0784431029452156, -0.188263646324618, 0.118210547161839, 0.0204277685898823, -0.0630088957392694, -1.53894819927434, 3.91937002415417, -6.97671389735957, 3.03136795500697, -0.732510422175497, -1.04436167518542, -0.030284410476905, 0.0113461982351276, -0.00995384023829701, 0.650026894435343, -3.03136795500698, 1.04436167518542, -0.521306208366909, 0.497338600723745, 0.195309847152011, 0.0824835277401714},
    {0.38289774905993, -0.44954039685909, 0.666327544990169, 0.0283809878733463, 0.0303348329193263, 2.00292864633947, -2.914446648366, 1.86569362062816, -0.587242812072385, -0.0261642079196731, -0.0303348329193268, 0.0846123604872486, 0.0177282086744736, -0.0356979213625633, -1.64425915824829, 2.6868052803149, -2.00292864633947, 8.53019358808431, -3.32663454262167, -0.232585612236534, -0.105113955523447, 0.0260292226056588, -0.00221677995366925, 3.06679803516218, -8.53019358808431, 0.232585612236535, -0.294315367469891, 0.227641368051103, 0.0728809050900165, 0.259836507459501},
    {0.582912531849485, -0.631126388910169, 1.89531730714558, -1.72179988344472, 0.100429811620991, -0.239523825164353, -0.918167814148706, 1.55334581087663, -1.77749109602364, 1.65041855010949, -0.100429811620989, 0.043176729195754, 0.0127807929631379, -0.00774366509820728, -1.45677894538783, 0.880102970824233, 0.239523825164352, 4.87301877545594, -5.46438108023971, 7.48936360984808, -0.11608182959588, -0.00174438152606207, 0.0713813333352251, 5.23784208978577, -4.87301877545594, -7.48936360984808, -0.0951372221642463, 0.0380648433244756, -0.0014296433245563, 0.226538990453951},
    {0.812452135616642, -0.835475545867991, 3.66460410302373, -6.30243350482935, 5.48363837580173, 0.173807930028901, 0.184182334239255, 0.824808878001545, -3.58199787646156, 6.20750111711737, -5.48363837580173, 0.0131962924773951, 0.00617953933657829, 0.00364757843737542, -0.806216324172755, -0.181408029877248, -0.173807930028901, -1.29326671905912, -4.13639574699223, 9.96035149115307, -0.0570264151812206, -0.0255798113809446, 0.0949323877119769, 4.07408998454622, 1.29326671905912, -9.96035149115307, -0.0128351909782721, -0.00277430436200884, -0.00575736285051405, 0.0623057624459995},
    {0.404206071679303, 0.31266857990608, -0.12821741791057, -0.173147693978937, 0.188263646324618, 1.49613339776545, 4.42785703112518, -1.69273776311029, -0.124544170479948, -0.0966026294448024, -0.188263646324618, -0.490009880059314, -0.136238594896719, -0.0906261766293509, -1.64424322359767, 2.47039173426359, -1.49613339776545, 1.55150804171481, 1.10042932742017, -0.800976564522558, 0.192595219241204, 0.0601663691493129, 0.26975032342374, 0.613951962651615, -1.55150804171481, 0.800976564522558, 2.54265922615502, -6.89824876538877, 0.794321760552941, -1.71438129007179},
    {0.507063488468923, 0.35844227012522, -0.589309695251549, -0.029866572341664, 0.0303348329193264, 0.0710197363376295, 1.47626003455429, -1.2655083911331, -0.733385228998833, -0.0302084434457272, -0.0303348329193266, -0.488389534487908, -0.180700986901215, -0.19641523720502, -1.57490224360712, 1.49315821229376, -0.07101973633763, 4.1058943026982, 2.68492309883723, -0.178382287547577, 0.869933654044335, 0.452761270206047, 0.0600750157873928, 2.71565637527838, -4.10589430269821, 0.17838228754758, 1.86813206670943, -2.96941824684805, 0.972278568030784, -5.40057947411561},
    {0.671962873295984, 0.204881260678232, -0.483666898076633, 0.153798325928092, 0.10042981162099, -0.1820029351808, 0.0271511684781075, -0.304019521310429, -1.9940738062327, 1.78064479277004, -0.100429811620989, -0.404522635107623, -0.206622790275704, -0.265698708590889, -1.25341917431049, 0.314350539750141, 0.1820029351808, 1.61322747684966, 0.374350826550648, 5.74399164313582, 1.42072665018609, 1.05701405412324, -1.93444311869814, 4.33415543338379, -1.61322747684966, -5.74399164313581, 0.893029144272992, -0.341501708228248, 0.664409551347933, -4.70850625993444},
    {0.854659261789436, -0.316700773842388, 1.6912589729984, -3.8080136322296, 5.48363837580173, 0.239374195003021, 0.135622046814996, 0.29194783593329, -3.73314907767067, 6.38069328908852, -5.48363837580173, -0.21375612888299, -0.139072114068444, -0.185130244995616, -0.644422180069842, -0.227247790459779, -0.239374195003021, -1.57608705190348, -1.91681936521851, 7.63912379052446, 1.07096158715759, 0.970928517514691, -2.57267965685892, 3.21181530352968, 1.57608705190348, -7.63912379052445, 0.184871106513051, 0.0916257436447811, 0.167603237623505, -1.29499593831117},
    {0.631960136631531, -0.350933368613929, 0.449254419664609, -0.538254520513326, 0.188263646324618, -0.24517877267168, 2.41050832213799, 3.41525493734884, -0.177976321311655, -0.121952669742181, -0.188263646324618, -1.91427250782967, 1.77830342542667, -0.145057685614595, -1.35298504251687, 0.546150406763189, 0.24517877267168, 0.271705295222057, 1.96979596508841, -0.461219778285547, 0.634149285146313, -0.905427383499269, 0.660207190255509, 0.446297927160588, -0.271705295222058, 0.461219778285546, 4.82083510436927, -2.95665872890118, -6.88310499920124, -2.41609389224899},
    {0.699938941386467, -0.216923199943662, 0.517264163089158, -0.111178053602371, 0.0303348329193263, -0.116209006894856, 0.543191701082628, 0.639619870511517, -0.951179273079119, -0.0358540495445347, -0.0303348329193266, -1.66902382882621, 0.9332226194644, 0.252785467919005, -1.17617497382134, 0.175175059571124, 0.116209006894855, 0.405848874101016, 5.75511024902158, -0.102716412385678, 2.64191581943289, -2.20800070944293, 0.147032103146908, 1.85597787797826, -0.405848874101019, 0.10271641238568, 3.26684501829045, -0.71836676065375, -2.73028991498063, -7.61108812699984},
    {0.804449259426938, 0.27602204541492, -1.31167064875703, 2.77206539309932, 0.100429811620991, 0.157022569763057, -0.236163321155011, -0.474753329392599, -2.30843348521193, 1.96243590385965, -0.10042981162099, -1.18999803696498, 0.0614030576075573, 0.0481236745155625, -0.835527183461997, -0.167187751689785, -0.157022569763057, -0.778516229484543, 3.88524824070937, 3.30751568705419, 3.92425688943188, -0.30415275546292, -4.73450129695898, 2.75049450924061, 0.778516229484541, -3.30751568705419, 1.42036724341977, 0.403351072844796, -0.11008673056517, -6.63574274994998},
    {0.915095482842408, 0.138208304688548, -0.377808999793017, -0.325893969559764, 5.48363837580173, 0.242772631084242, 0.0101416649367524, -0.0375539443989282, -3.94745604157908, 6.62246327900312, -5.48363837580173, -0.560561951204751, -0.236590803240137, -0.25615103308607, -0.392374307610203, -0.206087899454942, -0.242772631084242, -1.37715028081005, -0.0944598238528617, 4.39877411776922, 2.74410921556155, 1.58115582581055, -6.29656930944336, 1.9195099426102, 1.37715028081005, -4.39877411776922, 0.272762493646929, 0.195946234518187, 0.157165758362206, -1.82505011875734},
    {0.868638985211498, 2.24400210538221, 1.87719259162015, -0.8675374714403, 0.188263646324617, 0.250809322516257, -1.38689694902201, 4.78962345684888, -0.230538830650143, -0.144815392289639, -0.188263646324617, -3.84413241617306, 6.69817494241226, -5.9666836168329, -0.588215719540759, -0.231510490727831, -0.250809322516256, -0.0969913721940615, 1.06557389113459, -0.15479954990603, 1.16271865188603, -2.80937241285604, 1.01235286372994, 0.177873009683449, 0.0969913721940569, 0.15479954990603, 2.96665592739346, 1.61840743974984, -7.16806366470157, -1.24344690081803},
    {0.894239071655412, 0.00319288667625714, 4.37286031043355, -0.184511342787659, 0.0303348329193271, 0.255773608793594, -1.01420051076149, 1.81483410215386, -1.16137946239125, -0.0409457150541397, -0.0303348329193281, -3.15044347821519, 3.87170171089794, -1.61869019101441, -0.481998258407617, -0.22506564904898, -0.255773608793594, -0.456594884345631, 3.20567449225822, -0.0344747887099975, 4.65062553079679, -7.8621063788391, 0.225457057841804, 0.711385177373007, 0.456594884345629, 0.0344747887099962, 1.93011283472731, 1.23926615981047, -3.26294867847355, -3.91705966963122},
    {0.932314949394835, -0.132026023671421, 0.432971142057141, 5.13343100868265, 0.100429811620993, 0.21931772889597, -0.437124360783317, 0.0525973593220345, -2.60395904918184, 2.1263898733871, -0.100429811620994, -2.06802429359264, 1.01585183572003, 0.251883532149194, -0.316329095558073, -0.181067362668033, -0.21931772889597, -0.778136835772918, 2.41482021040206, 1.1101040409983, 6.54011940697722, -4.36913149985253, -7.25982088206975, 1.00027627385357, 0.778136835772915, -1.1101040409983, 0.794494082962226, 0.618191723451349, -0.530762346726185, -3.41509648425563},
    {0.971133168652245, 0.326425626978739, -1.55864364979356, 2.81456398596072, 5.48363837580173, 0.119844479565316, -0.0384379828016461, -0.0519986256654493, -4.14403873378693, 6.84051106649682, -5.48363837580173, -0.904005455041909, -0.208877956754554, -0.184675383834523, -0.138251176842042, -0.0934196017713595, -0.119844479565315, -0.604362992504246, 0.273806468834901, 1.47636394974242, 4.35154474196656, 1.35113764161393, -9.65507505245755, 0.665458731613916, 0.604362992504241, -1.47636394974242, 0.145173879952594, 0.131857584573002, 0.0450759225549019, -0.939265200448811}};
    
    // Array of non-zero columns
    static const unsigned int nzc2[30] = {0, 2, 4, 5, 6, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34};
    static const double FE0_D100[64][30] = \
    {{-2.61665455821179, -0.262326815091422, 0.0894026163922214, 0.0784431029452147, 0.188263646324619, 0.100156729351643, 0.0853345325480426, 0.202156726410704, -1.99429993054149, 0.887996330144005, -0.188263646324618, -2.23419141910734, 0.966009105862815, -0.202156726410703, 4.41532949092758, -2.85692904038522, 1.32058092276085, -0.0423045868392042, -0.0660004964643408, -0.0679684018579038, -0.47889892738832, 0.066000496464341, 0.0679684018579037, 2.4823352112685, -0.577437897119226, -0.966439433089219, 2.78093176629566, -0.646897076539969, -1.05134363841086, 0.521203514227524},
    {-0.0971243045950525, -0.382897749059931, 0.587242812072383, 0.0261642079196777, 0.0303348329193271, 0.107010502091157, 0.0863780817689602, 0.174901641144903, -4.70183916807172, 0.189067653393769, -0.0303348329193251, -0.856794088890816, 0.624184812888231, -0.174901641144902, 1.02065872978734, -1.99327297180224, 1.45263629566988, -0.199591162931102, -0.274237126395049, -0.0151369709694234, -1.44228454877614, 0.274237126395049, 0.015136970969423, 6.87668927270697, -2.76209291670763, -0.215231861313445, 1.25310681828586, -0.503323231486203, -0.710562894657192, 1.64187571170724},
    {0.157576792955306, -0.582912531849485, 1.77749109602363, -1.65041855010949, 0.100429811620992, 0.0948090485613331, 0.0733203934222967, 0.123642391765632, -0.619333549054628, -5.28014630426966, -0.100429811620992, -0.0330344408809372, 0.234572257037862, -0.123642391765632, -0.277396095652904, -0.61606133308365, 1.31879316763073, -0.340885504021953, -0.405965739936161, 0.487417422133698, -1.09058719324333, 0.405965739936162, -0.487417422133698, 3.62271720919892, -4.78087475616793, 6.93056485437915, 0.193230994281365, -0.255005601961762, -0.307892650460159, 1.43147269726528},
    {-0.332272064837322, -0.812452135616645, 3.58199787646156, -6.20750111711737, 5.48363837580173, 0.0524695959338477, 0.0397032273991157, 0.0578933212354552, 1.61056772993438, -3.0096854928473, -5.48363837580173, 0.023591816893319, 0.0192499727777452, -0.0578933212354546, 0.200854722614869, 0.203319042077584, 0.740550435761514, -0.26514701932712, -0.283046250319001, 0.648232493476413, -0.128555617225747, 0.283046250319002, -0.648232493476416, -1.44064905635804, -3.7519165500379, 9.21718660996467, -0.0211028248694077, -0.054958587957759, -0.05895320017686, 0.393702636552868},
    {0.0875743252958653, -0.404206071679305, 0.124544170479948, 0.0966026294448003, 0.188263646324619, 0.676423762559449, -0.0349327507444046, -0.0356729062616812, -0.816407479188933, 0.644611219481142, -0.188263646324618, -4.43406878641156, -0.233099690832411, 0.0356729062616849, 0.691940663523537, -1.83313825823764, 1.45782934109754, -0.252573153805609, 0.0219392102667131, -0.329513039020354, -1.68537326176877, -0.0219392102667129, 0.329513039020354, 1.2458373367962, -0.553974028087214, -0.741213848925942, 6.76638638039197, -3.00874135653985, 0.26803244157681, 1.93794641557438},
    {0.347307955877069, -0.507063488468924, 0.733385228998833, 0.0302084434457294, 0.030334832919327, 0.64789763825398, 0.0918002982140739, 0.101992726716843, -1.46628619271142, 0.134864328704811, -0.0303348329193253, -1.29536745996238, 0.40983858091811, -0.101992726716841, -0.163916875982767, -1.09172173126643, 1.41539413984105, -1.11719146949869, -0.252432942684715, -0.0733845311844303, -4.98765445625719, 0.252432942684715, 0.0733845311844303, 3.20129952353661, -2.46839855982402, -0.16507277215054, 2.82813768075803, -2.18066785904963, -0.501638879132187, 6.10484592575588},
    {-0.161328789785951, -0.671962873295984, 1.99407380623269, -1.78064479277004, 0.10042981162099, 0.515643003287643, 0.200525196246959, 0.243015108355066, 1.00650376582928, -3.5347743375574, -0.10042981162099, 0.260269516108357, 0.39806440936755, -0.243015108355065, -0.134798693685849, -0.174208449362686, 1.14229880613047, -1.78302436263182, -1.02908287239904, 2.36301563150651, -3.53949804355199, 1.02908287239904, -2.36301563150651, 0.971280148876074, -3.97185772093805, 5.31541913032744, 0.251161121235694, -1.02707364063169, -0.598589605614509, 5.32252240618381},
    {-0.219620965508788, -0.854659261789439, 3.73314907767068, -6.38069328908851, 5.48363837580173, 0.265108269545324, 0.160614199238834, 0.206913148841662, 0.830265560700906, -0.68845779221869, -5.48363837580173, 0.0589610169540363, 0.0173297934874928, -0.206913148841662, 0.250067764210438, 0.23114242368028, 0.593070039407509, -1.32130585127542, -1.11394684744789, 3.14265236607617, -0.142564964025193, 1.11394684744789, -3.14265236607617, -1.60194359895972, -2.96147103941186, 7.0691510813072, -0.113761461595416, -0.210307824903943, -0.177943992726326, 1.46387081530061},
    {-0.0209772079821646, -0.63196013663153, 0.177976321311655, 0.12195266974218, 0.188263646324618, 2.03766259075905, -2.11540899410358, 0.399877762194952, 0.0418596436277126, 0.304854433244129, -0.188263646324617, 0.479253808900427, -5.28804995692452, -0.399877762194951, -0.221435706097504, -0.355221908876293, 1.22959495958749, -0.672146817541108, 1.0523984201801, -0.694619865554741, -1.68021690342269, -1.0523984201801, 0.694619865554742, 0.188464429826426, -0.408300394765793, -0.42680710298631, 2.15774163391977, -4.67465803357925, 7.4034589510281, 2.3523637209638},
    {-0.244720001995119, -0.699938941386468, 0.951179273079122, 0.0358540495445338, 0.0303348329193279, 1.7713778563911, -1.13837249119671, -0.205061948774459, 0.574312506192714, 0.0591984535429119, -0.0303348329193266, 1.06954018544265, -1.87956149697762, 0.20506194877446, -0.063222127385257, -0.0659398754896115, 1.07382094625645, -2.79519475263195, 2.63740280717402, -0.154696012445138, -4.61513298523044, -2.63740280717402, 0.154696012445139, 0.177207165507371, -1.7026989447792, -0.0950525030874474, 0.330012288805912, -3.17093033063966, 3.01793398817433, 7.41032773786239},
    {-0.343330389268093, -0.804449259426938, 2.30843348521193, -1.96243590385965, 0.100429811620991, 1.2583453857965, -0.127571177548676, -0.083546119390645, 1.11730697889861, -1.09829838147577, -0.10042981162099, 0.609052888212723, -0.0713965829656415, 0.0835461193906456, 0.187196108300409, 0.193403705764149, 0.767179834630472, -4.14238117307042, 0.594040120357491, 4.98128269867774, -2.31832822100891, -0.594040120357492, -4.98128269867774, -0.893370238508483, -2.53237022560206, 3.06073428533542, -0.486983196456213, -1.38041507755301, 0.198967760514318, 6.46070939407933},
    {0.119021627700702, -0.915095482842411, 3.94745604157909, -6.62246327900312, 5.48363837580173, 0.590935171541133, 0.237671637828122, 0.253349046363802, -0.852751660911763, 2.55189188053654, -5.48363837580173, -0.127657140121389, -0.0915840975261261, -0.253349046363801, 0.236448274510997, 0.197624493356888, 0.362001087273823, -2.8908771935652, -1.58820369192583, 6.624772028746, 1.11396707344187, 1.58820369192583, -6.62477202874601, -1.32196241606076, -1.77274196460656, 4.07057139846658, -0.19789810928288, -0.265379922136864, -0.146087540301995, 1.77691012012333},
    {-0.160775122870767, -0.868638985211498, 0.230538830650143, 0.144815392289639, 0.188263646324616, 3.89068141543178, -6.89551449000026, 6.32404851007063, 0.0303812937688839, -0.00156579513538818, -0.188263646324616, 0.512728960713618, 0.0745567365024627, -6.32404851007063, 0.256593069933867, 0.231154317866362, 0.541666720282036, -1.17651941301843, 2.88887734748669, -1.02390281648171, 0.0127209431571319, -2.8888773474867, 1.02390281648171, -0.0968478758679821, -0.164072248551043, -0.143249597154252, -1.63445016920141, -2.76896020694398, 6.82095775349779, 1.1637984698613},
    {-0.0231092835261097, -0.894239071655413, 1.16137946239125, 0.040945715054135, 0.0303348329193296, 3.18811892297118, -3.99330340401987, 1.7540991643927, -0.059867398210655, -0.00904317013277124, -0.0303348329193281, -0.164342827891453, 0.881951188948037, -1.75409916439269, 0.253919768891325, 0.21910577263856, 0.444322813651638, -4.70537083058524, 8.10128917326995, -0.228029301630426, 1.03921665313449, -8.10128917326995, 0.228029301630428, -0.444872186596038, -0.656639877584555, -0.0319025449213673, -1.22122482988476, -1.80255126519496, 3.11135221507183, 3.66615417745075},
    {0.257570292859132, -0.932314949394835, 2.60395904918184, -2.1263898733871, 0.100429811620995, 2.09232037220803, -1.05859400431274, -0.247959121416687, -0.940209564617417, 1.09911326458012, -0.100429811620993, -0.755472566595072, 0.547178448555987, 0.247959121416688, 0.210795755610048, 0.171915883982976, 0.29203301694268, -6.61620589129759, 4.54930682562779, 7.34264831426107, 3.41986187355894, -4.54930682562779, -7.34264831426108, -0.739559695031233, -0.924189789533187, 1.02727660880697, -0.594247369928494, -0.742600435684467, 0.51141555575675, 3.19634401773865},
    {0.643627477463277, -0.971133168652246, 4.14403873378693, -6.84051106649681, 5.48363837580174, 0.914445613287682, 0.205694659783393, 0.180795646006106, -2.96400307709653, 5.47430204856335, -5.48363837580173, -0.654052673186591, -0.164612656347539, -0.180795646006105, 0.112466555263439, 0.0872281173292582, 0.127811018596271, -4.40159593464864, -1.33070830716114, 9.76522998426649, 3.52249494339832, 1.33070830716114, -9.7652299842665, -0.564628117758572, -0.615407538931825, 1.36620901793347, -0.12459384156175, -0.13579909853934, -0.0410820034358528, 0.879100991250325},
    {0.260529637804041, 0.242112183715197, -0.116156852148901, -0.213998984901439, 0.188263646324618, -0.130129193892681, -0.232799349549862, 0.202156726410702, -0.635906402027005, 0.595554242297348, -0.188263646324618, -0.712398674345034, 0.647875223764909, -0.202156726410702, -2.97164439262547, 3.78990513748002, -1.32090256637378, 0.115410256610943, -0.0660004964643399, -0.0679684018579052, -0.321184083938175, 0.06600049646434, 0.0679684018579053, -0.440011314301597, 1.1920745684775, -0.38155525739591, -0.492939646473262, 1.33546751471098, -0.415075874215048, 0.205773827327231},
    {0.302516099307214, 0.347940059792458, -0.631043869767727, -0.0389643999770734, 0.0303348329193264, -0.114992163304793, -0.128636423377716, 0.174901641144902, -0.993419927901683, 0.123939045497016, -0.0303348329193265, -0.181026251980791, 0.409170307741555, -0.174901641144902, -1.07649924949926, 1.73295958391655, -1.30691649351696, 0.29723620635532, -0.274237126395049, -0.0151369709694216, -0.945457179489711, 0.274237126395049, 0.0151369709694218, -1.75843588947322, 3.38289968714263, -0.0849746455199431, -0.320431520930138, 0.616449936215723, -0.28053388436384, 0.648220973134392},
    {-0.218437937623509, 0.264871803916117, -0.720643717372981, 0.446752557129666, 0.10042981162099, -0.0384381926574376, -0.0198471310498737, 0.123642391765631, 1.17789027189967, -3.1829751970305, -0.100429811620991, 0.0628271254006745, 0.141404732565693, -0.123642391765631, 0.202561688048967, 0.399851627014655, -0.64884718135623, 0.0922744540166142, -0.405965739936158, 0.4874174221337, -0.657427235204759, 0.405965739936158, -0.4874174221337, -2.46986524610629, 2.0126186915796, 2.73622263990084, -0.131739379500629, 0.107350446757392, -0.12155760151582, 0.565152781188145},
    {-0.18467858359371, -0.251073694749744, 1.42005757838021, -3.41840414528315, 5.48363837580173, 0.0208011980772059, 0.0218641405875872, 0.0578933212354543, 0.629994022019079, -0.220588521013087, -5.48363837580173, 0.00922823879748571, 0.00141088596621712, -0.0578933212354537, 0.297391457743572, 0.12884356895624, 0.00951725164364078, -0.146013613671037, -0.283046250318997, 0.648232493476416, -0.00942221156966338, 0.283046250318997, -0.648232493476418, -1.6414419386088, -0.408609661790481, 3.63899266629624, -0.0240440665343834, -0.00598537034030803, -0.0232750265538035, 0.1554358252407},
    {0.259550726522875, 0.354977542438393, -0.126071847127061, -0.127686775663472, 0.188263646324617, -0.684720873388752, 0.0461731769957385, -0.0356729062616823, -0.147079344555397, 0.420321814372867, -0.188263646324618, -0.798816702986173, -0.151993763092264, 0.0356729062616825, -0.850439221133414, 1.49487592151293, -1.25896496934079, 0.333844449306822, 0.0219392102667143, -0.329513039020354, -1.09895565865634, -0.0219392102667139, 0.329513039020355, -0.343434950077881, 0.61658614176034, -0.292635038709395, -1.86526242240701, 3.34879999878193, 0.105820586096525, 0.765111209349514},
    {-0.0203093940389603, 0.336177667614903, -0.493827561454052, -0.0197421530236544, 0.0303348329193269, -0.436264187114288, -0.0599943369546778, 0.101992726716842, 0.204474492569863, 0.0849137322354274, -0.030334832919327, 0.180639772360899, 0.258043945749361, -0.101992726716842, -0.0896333311601742, 0.705804384920304, -0.932039327336072, 0.730119212768749, -0.252432942684715, -0.0733845311844302, -3.14034377398974, 0.252432942684715, 0.073384531184431, -1.36743463747884, 1.65678770636303, -0.0651715792117735, -1.2080386092568, 1.46366302401018, -0.198049608794683, 2.41022456122099},
    {-0.350400156294149, 0.118117019922264, -0.177195303849184, -0.172212629272512, 0.100429811620989, -0.0458205299922571, 0.0193935204939748, 0.243015108355065, 1.3618387575883, -1.92634217405987, -0.10042981162099, 0.35215478221592, 0.216932733614567, -0.243015108355065, 0.346076228564297, 0.221335698879861, -0.335128791072274, -0.172442766121869, -1.02908287239904, 2.36301563150651, -1.92891644704204, 1.02908287239904, -2.36301563150651, -1.91065894472384, 0.726015490984722, 2.09855480333238, -0.494072944259332, 0.187738692035669, -0.236326254108541, 2.10135921316391},
    {-0.022384432501823, -0.394442721463884, 2.00482142866546, -4.2415863458704, 5.48363837580173, 0.142371689060035, 0.106768804513666, 0.206913148841662, -0.203161865393722, 1.45064915099943, -5.48363837580173, -0.0144274684593472, -0.0365156012376753, -0.206913148841661, 0.243308032812255, 0.113168827781304, 0.0603502933721472, -0.878342306011244, -1.11394684744789, 3.14265236607617, 0.30039858123898, 1.11394684744789, -3.14265236607617, -1.26341639577568, -0.538243167496059, 2.79093719487097, -0.089721071253939, -0.0382231493467479, -0.0702532032759891, 0.577943724772264},
    {-0.309054780062582, 0.192468191903715, -0.0410587679977577, -0.00719806234883544, 0.188263646324617, -0.470084531217961, 0.124858651024477, 0.399877762194952, 0.127851137302472, 0.175703701153112, -0.188263646324617, 1.46377606721657, -3.04778231179647, -0.399877762194953, 0.303610930774564, 0.28334586215607, -0.470370204771766, 0.0396723967622819, 1.0523984201801, -0.694619865554742, -0.968397689119296, -1.0523984201801, 0.694619865554743, -0.202553646832505, 0.115761277527791, -0.168505638804277, -2.31905000468952, 1.32535846869091, 2.92292366077199, 0.928725292357013},
    {-0.358579623296543, 0.0579729019650716, 0.00912774663570664, 0.00709140647947422, 0.0303348329193278, 0.0169985708549946, -0.225153425141061, -0.205061948774459, 0.593144251553413, 0.0304358104778528, -0.0303348329193275, 1.10461047941694, -0.966342430921969, 0.205061948774459, 0.358045759337145, 0.191015058321397, -0.248454096327071, -0.55284863026671, 2.63740280717402, -0.154696012445138, -2.3727868628652, -2.63740280717403, 0.15469601244514, -0.802507851657442, 0.200235853468324, -0.0375272169573284, -1.49450758467877, 0.372898534406833, 1.19149585606303, 2.92563549313191},
    {-0.209120412751909, -0.225565484443057, 0.852939205087351, -1.03626557791776, 0.100429811620991, 0.464943919745674, -0.0673640447405832, -0.0835461193906449, 0.499560744523661, -0.172128055533883, -0.10042981162099, 0.272314520571383, -0.0111894501575484, 0.0835461193906453, 0.306151380564783, 0.131747006670728, -0.00321249004054478, -2.18738712017291, 0.594040120357493, 4.98128269867774, -0.363334168111393, -0.594040120357493, -4.98128269867774, -1.11337204988317, -0.239127899727842, 1.20839363345164, -0.606907927224359, -0.130350513092697, 0.0785534948981322, 2.5507212882843},
    {0.312478109057611, -0.625377600303055, 2.89580215412672, -5.3907188388044, 5.48363837580173, 0.433502317612514, 0.193465923707231, 0.253349046363802, -1.67399695237152, 3.78363632073527, -5.48363837580173, -0.250597768737479, -0.135789811647017, -0.253349046363801, 0.148831317371497, 0.0822068461045175, 0.0818613277694294, -2.35318875945021, -1.58820369192583, 6.624772028746, 1.65165550755686, 1.58820369192583, -6.62477202874601, -0.731125720593616, -0.490679481161587, 1.60708251806913, -0.109449705979318, -0.0734548428957164, -0.0576761120602124, 0.701533251893348},
    {0.0441090754128569, -0.445188683796849, 0.13440475230783, 0.101468432469225, 0.188263646324616, 2.26827762800339, -4.83151020970038, 6.32404851007064, -0.0313921455951213, -0.0449127549558015, -0.188263646324616, -0.529788570164164, 2.13856101680235, -6.32404851007064, 0.222931063779604, 0.107276036738665, 0.0708725078657234, -0.824356988032235, 2.8888773474867, -1.02390281648171, 0.364883368143329, -2.8888773474867, 1.02390281648171, -0.0694350754822858, -0.033577531230421, -0.0565556775134244, -1.17181889487424, -0.566670162964992, 2.69294919289803, 0.459473619888905},
    {0.182854617686689, -0.542293065584038, 0.773943947209464, 0.0312920869787528, 0.0303348329193294, 2.12456429902517, -3.0518162226727, 1.7540991643927, -0.339061320545861, -0.0186967982081535, -0.0303348329193282, -0.930761949117101, 1.82343837029521, -1.75409916439269, 0.183144664324039, 0.0947102842061115, 0.0815834993671997, -3.59600200175511, 8.10128917326995, -0.228029301630426, 2.14858548196462, -8.10128917326995, 0.228029301630429, -0.273919857107413, -0.160962769556186, -0.0125952887706024, -0.751941211379476, -0.441861138528589, 1.22837785237749, 1.44741651979048},
    {0.43095300139955, -0.696647594003245, 2.0533274054127, -1.81553861257372, 0.100429811620995, 1.64987954111948, -0.903840971932118, -0.247959121416687, -1.39647055428432, 1.40996452539349, -0.100429811620993, -1.1220851536954, 0.701931480936604, 0.247959121416688, 0.11952957424144, 0.0699674764905251, 0.0761975418717296, -5.64900040896772, 4.54930682562779, 7.34264831426107, 4.38706735588881, -4.54930682562779, -7.34264831426108, -0.377669359466567, -0.279187491661813, 0.405574087180228, -0.303463026816394, -0.224331360607691, 0.201909490995514, 1.2619330530789},
    {0.73687391683395, -0.866122121955719, 3.77398544236569, -6.42709973003853, 5.48363837580174, 0.83278768710474, 0.193263351160874, 0.180795646006106, -3.30810129762872, 5.88771338502163, -5.48363837580173, -0.729983215471415, -0.177043964970059, -0.180795646006105, 0.0514183350265473, 0.0345962863875487, 0.043233583707672, -4.13558223476521, -1.33070830716113, 9.76522998426649, 3.78850864328176, 1.33070830716114, -9.7652299842665, -0.246484968115443, -0.219399176621525, 0.539386345016911, -0.0543906831750444, -0.0484137884582796, -0.0162193861908138, 0.347073591483449},
    {-0.242112183715196, -0.260529637804041, 0.635906402027005, -0.595554242297347, 0.188263646324618, 0.712398674345035, -0.647875223764909, 0.202156726410702, 0.116156852148897, 0.213998984901442, -0.188263646324618, 0.130129193892679, 0.232799349549863, -0.202156726410702, 1.32090256637378, -3.78990513748002, 2.97164439262548, 0.32118408393818, -0.0660004964643423, -0.0679684018579058, -0.115410256610938, 0.0660004964643421, 0.0679684018579058, -1.1920745684775, 0.440011314301597, 0.381555257395905, -1.33546751471098, 0.492939646473262, 0.415075874215047, -0.205773827327242},
    {-0.347940059792458, -0.302516099307213, 0.993419927901681, -0.123939045497015, 0.0303348329193266, 0.181026251980791, -0.409170307741555, 0.174901641144901, 0.631043869767725, 0.0389643999770748, -0.0303348329193269, 0.114992163304792, 0.128636423377717, -0.174901641144902, 1.30691649351696, -1.73295958391655, 1.07649924949926, 0.945457179489712, -0.27423712639505, -0.0151369709694212, -0.297236206355322, 0.274237126395049, 0.0151369709694214, -3.38289968714263, 1.75843588947322, 0.0849746455199394, -0.616449936215722, 0.32043152093014, 0.280533884363838, -0.648220973134391},
    {-0.264871803916117, 0.21843793762351, -1.17789027189967, 3.18297519703051, 0.100429811620989, -0.0628271254006755, -0.141404732565693, 0.12364239176563, 0.72064371737298, -0.446752557129663, -0.100429811620989, 0.0384381926574371, 0.0198471310498734, -0.12364239176563, 0.648847181356231, -0.399851627014657, -0.202561688048967, 0.657427235204761, -0.405965739936155, 0.487417422133702, -0.0922744540166122, 0.405965739936155, -0.487417422133702, -2.0126186915796, 2.46986524610629, -2.73622263990085, -0.107350446757392, 0.13173937950063, 0.12155760151582, -0.565152781188149},
    {0.251073694749742, 0.184678583593711, -0.62999402201908, 0.220588521013085, 5.48363837580173, -0.00922823879748713, -0.00141088596621575, 0.0578933212354532, -1.4200575783802, 3.41840414528315, -5.48363837580173, -0.0208011980772063, -0.0218641405875861, -0.0578933212354528, -0.00951725164364009, -0.128843568956239, -0.297391457743574, 0.00942221156966063, -0.283046250318992, 0.648232493476419, 0.146013613671034, 0.283046250318992, -0.648232493476422, 0.408609661790476, 1.64144193860881, -3.63899266629624, 0.00598537034030693, 0.0240440665343871, 0.0232750265538025, -0.155435825240695},
    {-0.354977542438393, -0.259550726522875, 0.147079344555396, -0.420321814372865, 0.188263646324617, 0.798816702986172, 0.151993763092264, -0.0356729062616831, 0.126071847127061, 0.127686775663472, -0.188263646324618, 0.684720873388752, -0.0461731769957379, 0.0356729062616818, 1.25896496934079, -1.49487592151293, 0.850439221133414, 1.09895565865634, 0.0219392102667149, -0.329513039020354, -0.333844449306822, -0.0219392102667149, 0.329513039020355, -0.616586141760339, 0.343434950077882, 0.292635038709393, -3.34879999878194, 1.86526242240701, -0.105820586096524, -0.765111209349514},
    {-0.336177667614903, 0.0203093940389608, -0.204474492569864, -0.0849137322354266, 0.0303348329193266, -0.1806397723609, -0.25804394574936, 0.101992726716842, 0.493827561454052, 0.0197421530236558, -0.0303348329193276, 0.436264187114288, 0.0599943369546784, -0.101992726716843, 0.932039327336073, -0.705804384920305, 0.0896333311601745, 3.14034377398974, -0.252432942684715, -0.0733845311844304, -0.730119212768747, 0.252432942684715, 0.0733845311844318, -1.65678770636303, 1.36743463747884, 0.065171579211771, -1.46366302401019, 1.2080386092568, 0.198049608794683, -2.410224561221},
    {-0.118117019922264, 0.350400156294149, -1.3618387575883, 1.92634217405987, 0.100429811620989, -0.352154782215921, -0.216932733614566, 0.243015108355065, 0.177195303849182, 0.172212629272514, -0.10042981162099, 0.0458205299922566, -0.0193935204939744, -0.243015108355065, 0.335128791072274, -0.221335698879862, -0.346076228564297, 1.92891644704204, -1.02908287239904, 2.36301563150651, 0.172442766121874, 1.02908287239904, -2.36301563150651, -0.726015490984719, 1.91065894472384, -2.09855480333239, -0.187738692035669, 0.494072944259333, 0.236326254108541, -2.10135921316392},
    {0.394442721463882, 0.0223844325018233, 0.20316186539372, -1.45064915099943, 5.48363837580173, 0.0144274684593458, 0.0365156012376769, 0.206913148841661, -2.00482142866546, 4.2415863458704, -5.48363837580173, -0.142371689060035, -0.106768804513664, -0.206913148841661, -0.0603502933721468, -0.113168827781303, -0.243308032812257, -0.30039858123898, -1.11394684744788, 3.14265236607617, 0.878342306011244, 1.11394684744788, -3.14265236607617, 0.538243167496056, 1.26341639577569, -2.79093719487097, 0.0382231493467476, 0.0897210712539426, 0.0702532032759883, -0.577943724772265},
    {-0.192468191903715, 0.309054780062582, -0.127851137302472, -0.175703701153112, 0.188263646324617, -1.46377606721657, 3.04778231179647, 0.399877762194953, 0.0410587679977577, 0.00719806234883493, -0.188263646324618, 0.470084531217961, -0.124858651024476, -0.399877762194954, 0.470370204771766, -0.28334586215607, -0.303610930774563, 0.968397689119293, 1.0523984201801, -0.694619865554743, -0.0396723967622829, -1.0523984201801, 0.694619865554744, -0.115761277527791, 0.202553646832505, 0.168505638804277, -1.32535846869092, 2.31905000468952, -2.92292366077199, -0.928725292357011},
    {-0.0579729019650719, 0.358579623296543, -0.593144251553414, -0.030435810477853, 0.0303348329193271, -1.10461047941694, 0.96634243092197, -0.205061948774459, -0.009127746635706, -0.00709140647947427, -0.0303348329193278, -0.0169985708549938, 0.22515342514106, 0.205061948774459, 0.248454096327072, -0.191015058321398, -0.358045759337145, 2.3727868628652, 2.63740280717403, -0.154696012445138, 0.55284863026671, -2.63740280717403, 0.15469601244514, -0.200235853468324, 0.802507851657444, 0.0375272169573269, -0.372898534406835, 1.49450758467877, -1.19149585606303, -2.92563549313191},
    {0.225565484443058, 0.209120412751909, -0.499560744523664, 0.172128055533885, 0.100429811620991, -0.272314520571384, 0.0111894501575494, -0.0835461193906448, -0.852939205087355, 1.03626557791776, -0.100429811620991, -0.464943919745675, 0.0673640447405832, 0.083546119390645, 0.00321249004054444, -0.131747006670729, -0.306151380564782, 0.363334168111401, 0.594040120357494, 4.98128269867774, 2.18738712017291, -0.594040120357494, -4.98128269867774, 0.239127899727847, 1.11337204988317, -1.20839363345165, 0.130350513092699, 0.606907927224361, -0.0785534948981321, -2.55072128828432},
    {0.625377600303054, -0.312478109057611, 1.67399695237152, -3.78363632073527, 5.48363837580173, 0.250597768737478, 0.135789811647018, 0.253349046363802, -2.89580215412672, 5.3907188388044, -5.48363837580173, -0.433502317612515, -0.19346592370723, -0.253349046363801, -0.0818613277694283, -0.0822068461045177, -0.148831317371497, -1.65165550755686, -1.58820369192583, 6.624772028746, 2.35318875945022, 1.58820369192583, -6.62477202874601, 0.490679481161584, 0.731125720593618, -1.60708251806913, 0.0734548428957169, 0.109449705979321, 0.0576761120602131, -0.701533251893361},
    {0.44518868379685, -0.0441090754128556, 0.0313921455951203, 0.0449127549558009, 0.188263646324617, 0.529788570164159, -2.13856101680234, 6.32404851007064, -0.134404752307831, -0.101468432469225, -0.188263646324617, -2.2682776280034, 4.83151020970038, -6.32404851007064, -0.0708725078657233, -0.107276036738666, -0.222931063779605, -0.364883368143326, 2.8888773474867, -1.02390281648171, 0.82435698803224, -2.8888773474867, 1.02390281648172, 0.0335775312304233, 0.0694350754822894, 0.056555677513423, 0.566670162964996, 1.17181889487424, -2.69294919289805, -0.459473619888916},
    {0.542293065584038, -0.182854617686689, 0.339061320545861, 0.0186967982081495, 0.030334832919329, 0.930761949117098, -1.8234383702952, 1.7540991643927, -0.773943947209463, -0.031292086978757, -0.0303348329193283, -2.12456429902517, 3.0518162226727, -1.75409916439269, -0.0815834993671976, -0.0947102842061142, -0.183144664324037, -2.14858548196461, 8.10128917326995, -0.228029301630426, 3.59600200175512, -8.10128917326996, 0.228029301630429, 0.160962769556188, 0.273919857107417, 0.0125952887706049, 0.44186113852859, 0.751941211379481, -1.2283778523775, -1.44741651979051},
    {0.696647594003245, -0.43095300139955, 1.39647055428432, -1.40996452539349, 0.100429811620995, 1.1220851536954, -0.701931480936604, -0.247959121416686, -2.0533274054127, 1.81553861257372, -0.100429811620993, -1.64987954111948, 0.903840971932118, 0.247959121416688, -0.0761975418717277, -0.0699674764905296, -0.119529574241439, -4.38706735588879, 4.54930682562779, 7.34264831426107, 5.64900040896773, -4.54930682562779, -7.34264831426108, 0.279187491661817, 0.377669359466571, -0.40557408718023, 0.224331360607693, 0.303463026816397, -0.201909490995514, -1.26193305307894},
    {0.866122121955718, -0.73687391683395, 3.30810129762872, -5.88771338502162, 5.48363837580174, 0.729983215471413, 0.177043964970058, 0.180795646006106, -3.77398544236569, 6.42709973003854, -5.48363837580173, -0.832787687104741, -0.193263351160874, -0.180795646006105, -0.0432335837076708, -0.0345962863875518, -0.0514183350265464, -3.78850864328174, -1.33070830716113, 9.76522998426649, 4.13558223476522, 1.33070830716114, -9.7652299842665, 0.219399176621526, 0.246484968115446, -0.539386345016919, 0.0484137884582817, 0.0543906831750475, 0.0162193861908177, -0.347073591483484},
    {0.262326815091423, 2.61665455821179, 1.99429993054149, -0.887996330144003, 0.188263646324618, 2.23419141910734, -0.966009105862812, 0.2021567264107, -0.0894026163922212, -0.078443102945215, -0.188263646324618, -0.100156729351644, -0.0853345325480432, -0.2021567264107, -1.32058092276085, 2.85692904038521, -4.41532949092758, 0.478898927388328, -0.0660004964643465, -0.067968401857906, 0.0423045868392088, 0.066000496464346, 0.0679684018579058, 0.577437897119227, -2.4823352112685, 0.966439433089219, 0.646897076539975, -2.78093176629566, 1.05134363841085, -0.521203514227537},
    {0.38289774905993, 0.0971243045950509, 4.70183916807172, -0.189067653393768, 0.0303348329193278, 0.856794088890817, -0.624184812888229, 0.1749016411449, -0.587242812072384, -0.0261642079196741, -0.0303348329193262, -0.10701050209116, -0.0863780817689597, -0.1749016411449, -1.45263629566988, 1.99327297180224, -1.02065872978734, 1.44228454877614, -0.274237126395051, -0.0151369709694213, 0.1995911629311, 0.274237126395051, 0.0151369709694211, 2.76209291670763, -6.87668927270697, 0.215231861313444, 0.503323231486209, -1.25310681828586, 0.71056289465719, -1.64187571170724},
    {0.582912531849484, -0.157576792955305, 0.619333549054628, 5.28014630426966, 0.100429811620991, 0.0330344408809365, -0.234572257037861, 0.12364239176563, -1.77749109602364, 1.65041855010949, -0.100429811620989, -0.0948090485613358, -0.0733203934222968, -0.12364239176563, -1.31879316763073, 0.616061333083653, 0.277396095652902, 1.09058719324333, -0.405965739936154, 0.487417422133704, 0.340885504021954, 0.405965739936154, -0.487417422133704, 4.78087475616793, -3.62271720919892, -6.93056485437915, 0.255005601961766, -0.193230994281366, 0.307892650460159, -1.43147269726528},
    {0.812452135616642, 0.332272064837324, -1.61056772993438, 3.0096854928473, 5.48363837580173, -0.0235918168933214, -0.0192499727777433, 0.0578933212354526, -3.58199787646156, 6.20750111711737, -5.48363837580173, -0.0524695959338478, -0.0397032273991144, -0.0578933212354521, -0.740550435761512, -0.203319042077582, -0.200854722614873, 0.128555617225743, -0.283046250318988, 0.648232493476422, 0.265147019327115, 0.283046250318989, -0.648232493476424, 3.75191655003789, 1.44064905635806, -9.21718660996467, 0.0549585879577551, 0.0211028248694151, 0.0589532001768585, -0.39370263655286},
    {0.404206071679303, -0.0875743252958657, 0.81640747918893, -0.644611219481139, 0.188263646324618, 4.43406878641155, 0.233099690832409, -0.0356729062616814, -0.124544170479947, -0.096602629444802, -0.188263646324618, -0.676423762559445, 0.0349327507444054, 0.0356729062616815, -1.45782934109754, 1.83313825823763, -0.691940663523536, 1.68537326176877, 0.0219392102667161, -0.329513039020355, 0.252573153805608, -0.0219392102667167, 0.329513039020356, 0.55397402808721, -1.2458373367962, 0.741213848925942, 3.00874135653985, -6.76638638039195, -0.268032441576815, -1.93794641557437},
    {0.507063488468923, -0.347307955877069, 1.46628619271142, -0.134864328704812, 0.0303348329193266, 1.29536745996238, -0.40983858091811, 0.101992726716843, -0.733385228998834, -0.030208443445727, -0.0303348329193269, -0.647897638253979, -0.0918002982140731, -0.101992726716843, -1.41539413984105, 1.09172173126642, 0.163916875982768, 4.98765445625718, -0.252432942684714, -0.0733845311844304, 1.1171914694987, 0.252432942684714, 0.0733845311844321, 2.46839855982402, -3.2012995235366, 0.165072772150541, 2.18066785904963, -2.82813768075802, 0.501638879132183, -6.10484592575588},
    {0.671962873295983, 0.161328789785952, -1.00650376582928, 3.5347743375574, 0.10042981162099, -0.260269516108358, -0.398064409367548, 0.243015108355065, -1.99407380623269, 1.78064479277004, -0.100429811620989, -0.515643003287644, -0.200525196246958, -0.243015108355065, -1.14229880613047, 0.174208449362688, 0.134798693685849, 3.53949804355199, -1.02908287239904, 2.36301563150651, 1.78302436263183, 1.02908287239904, -2.36301563150651, 3.97185772093805, -0.971280148876075, -5.31541913032744, 1.0270736406317, -0.251161121235694, 0.598589605614507, -5.32252240618382},
    {0.854659261789437, 0.21962096550879, -0.830265560700908, 0.688457792218687, 5.48363837580173, -0.0589610169540385, -0.017329793487491, 0.206913148841661, -3.73314907767067, 6.38069328908852, -5.48363837580173, -0.265108269545324, -0.160614199238833, -0.20691314884166, -0.593070039407508, -0.231142423680278, -0.250067764210441, 0.142564964025193, -1.11394684744788, 3.14265236607617, 1.32130585127542, 1.11394684744788, -3.14265236607618, 2.96147103941185, 1.60194359895973, -7.0691510813072, 0.210307824903941, 0.113761461595423, 0.177943992726325, -1.46387081530061},
    {0.63196013663153, 0.0209772079821643, -0.0418596436277122, -0.304854433244128, 0.188263646324618, -0.479253808900426, 5.28804995692452, 0.399877762194955, -0.177976321311655, -0.121952669742181, -0.188263646324618, -2.03766259075905, 2.11540899410358, -0.399877762194954, -1.22959495958749, 0.355221908876293, 0.221435706097503, 1.68021690342268, 1.0523984201801, -0.694619865554744, 0.672146817541109, -1.0523984201801, 0.694619865554745, 0.408300394765792, -0.188464429826425, 0.42680710298631, 4.67465803357925, -2.15774163391977, -7.4034589510281, -2.35236372096379},
    {0.699938941386467, 0.244720001995119, -0.574312506192716, -0.0591984535429126, 0.0303348329193263, -1.06954018544265, 1.87956149697762, -0.205061948774458, -0.95117927307912, -0.0358540495445337, -0.0303348329193273, -1.77137785639109, 1.13837249119671, 0.205061948774459, -1.07382094625645, 0.0659398754896111, 0.0632221273852562, 4.61513298523044, 2.63740280717403, -0.154696012445137, 2.79519475263195, -2.63740280717403, 0.15469601244514, 1.7026989447792, -0.177207165507366, 0.0950525030874471, 3.17093033063966, -0.330012288805906, -3.01793398817433, -7.41032773786239},
    {0.804449259426938, 0.343330389268094, -1.11730697889861, 1.09829838147577, 0.100429811620991, -0.609052888212725, 0.0713965829656431, -0.0835461193906445, -2.30843348521194, 1.96243590385965, -0.10042981162099, -1.2583453857965, 0.127571177548676, 0.0835461193906449, -0.767179834630474, -0.193403705764149, -0.187196108300409, 2.31832822100892, 0.594040120357495, 4.98128269867774, 4.14238117307043, -0.594040120357495, -4.98128269867774, 2.53237022560206, 0.893370238508485, -3.06073428533543, 1.38041507755301, 0.486983196456216, -0.198967760514319, -6.46070939407935},
    {0.915095482842408, -0.119021627700702, 0.852751660911762, -2.55189188053655, 5.48363837580173, 0.127657140121387, 0.0915840975261273, 0.253349046363802, -3.94745604157909, 6.62246327900312, -5.48363837580173, -0.590935171541133, -0.237671637828121, -0.253349046363801, -0.362001087273821, -0.197624493356888, -0.236448274510998, -1.11396707344186, -1.58820369192583, 6.624772028746, 2.89087719356521, 1.58820369192583, -6.62477202874601, 1.77274196460656, 1.32196241606077, -4.07057139846658, 0.265379922136862, 0.197898109282885, 0.146087540301995, -1.77691012012335},
    {0.868638985211498, 0.160775122870769, -0.0303812937688846, 0.00156579513538735, 0.188263646324617, -0.512728960713624, -0.0745567365024551, 6.32404851007064, -0.230538830650145, -0.144815392289638, -0.188263646324617, -3.89068141543178, 6.89551449000027, -6.32404851007064, -0.541666720282035, -0.231154317866363, -0.256593069933868, -0.012720943157131, 2.8888773474867, -1.02390281648172, 1.17651941301844, -2.8888773474867, 1.02390281648172, 0.164072248551044, 0.0968478758679869, 0.14324959715425, 2.76896020694398, 1.63445016920143, -6.82095775349781, -1.16379846986131},
    {0.894239071655411, 0.0231092835261098, 0.0598673982106544, 0.00904317013276733, 0.0303348329193286, 0.164342827891451, -0.881951188948033, 1.7540991643927, -1.16137946239125, -0.0409457150541393, -0.0303348329193282, -3.18811892297117, 3.99330340401987, -1.75409916439269, -0.444322813651634, -0.219105772638563, -0.253919768891324, -1.03921665313448, 8.10128917326996, -0.228029301630426, 4.70537083058525, -8.10128917326996, 0.228029301630429, 0.656639877584554, 0.444872186596043, 0.0319025449213699, 1.80255126519496, 1.22122482988477, -3.11135221507184, -3.66615417745077},
    {0.932314949394835, -0.257570292859131, 0.940209564617414, -1.09911326458012, 0.100429811620995, 0.75547256659507, -0.547178448555986, -0.247959121416686, -2.60395904918184, 2.1263898733871, -0.100429811620993, -2.09232037220804, 1.05859400431274, 0.247959121416688, -0.292033016942678, -0.17191588398298, -0.210795755610046, -3.41986187355892, 4.54930682562779, 7.34264831426107, 6.61620589129761, -4.54930682562779, -7.34264831426108, 0.924189789533191, 0.739559695031238, -1.02727660880697, 0.742600435684468, 0.594247369928498, -0.51141555575675, -3.19634401773869},
    {0.971133168652245, -0.643627477463277, 2.96400307709653, -5.47430204856334, 5.48363837580174, 0.65405267318659, 0.164612656347539, 0.180795646006106, -4.14403873378693, 6.84051106649682, -5.48363837580173, -0.914445613287683, -0.205694659783394, -0.180795646006105, -0.12781101859627, -0.0872281173292613, -0.112466555263438, -3.5224949433983, -1.33070830716113, 9.76522998426649, 4.40159593464866, 1.33070830716113, -9.7652299842665, 0.615407538931826, 0.564628117758577, -1.36620901793347, 0.135799098539341, 0.124593841561753, 0.0410820034358567, -0.87910099125036}};
    
    // Array of non-zero columns
    static const unsigned int nzc1[30] = {0, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34};
    static const double FE0_D001[64][30] = \
    {{-2.61665455821179, -0.396701411583311, 0.202156726410704, 0.104101948809161, 0.137487919401698, 0.218367276513486, 0.114493927887232, 0.157622757753226, 4.98241396681808, -3.89335121387582, 1.92429321685284, -2.23419141910734, 0.966009105862817, -0.202156726410704, -2.561384406432, 1.06244098376896, -0.218367276513485, -0.0813206240654187, -0.084767912725461, -0.066283554681748, 2.91710794676055, -1.07011105467198, -0.820404447054917, 3.34431273113415, -1.17693491165619, -0.940551082455372, -0.615075107853212, 0.0813206240654162, 0.0847679127254614, 0.681358662534964},
    {-0.0971243045950518, 0.346390058705359, 0.174901641144902, -0.130567659355242, -0.115221071571267, 0.191622862578408, -0.145073844060268, -0.132094973372041, -2.69891052173226, 4.25039744226717, -1.80075267464523, -0.856794088890817, 0.624184812888232, -0.174901641144903, -0.982269916552129, 0.693532308512664, -0.191622862578407, -0.0555249839508484, -0.0572913852708475, 0.0630284237127477, 0.112132602068761, -0.49361715353299, 0.859882558393323, 0.128554203518661, -0.548458464452397, 0.985810686405509, -0.301310332559032, 0.0555249839508479, 0.0572913852708475, 0.238281908846285},
    {0.157576792955305, -0.351201920067467, 0.123642391765632, -0.307820525808746, 0.178200900522259, 0.137985777757088, -0.346492107766976, 0.204298075763009, -0.858857374218982, -1.58521578630869, 2.63769828763983, -0.0330344408809365, 0.234572257037862, -0.123642391765632, -0.0378722704885493, 0.26404163774058, -0.13798577775709, -0.0243740394654232, -0.0248248207051188, 0.0875141056162417, -0.830666749897066, 0.0732482687708826, 0.685500290255744, -0.952316279586279, 0.0824504700263968, 0.785890474311821, -0.0666894490649015, 0.0243740394654231, 0.0248248207051194, -0.0208246565513392},
    {-0.332272064837322, 1.77751327294542, 0.0578933212354536, -0.238589734323368, 0.413516568270607, 0.0656658884112404, -0.271571427138708, 0.474075265311329, 1.78437565996328, -4.09982592947846, 0.870209061407084, 0.0235918168933198, 0.0192499727777458, -0.0578933212354541, 0.0270467925859699, 0.0219110122003387, -0.0656658884112416, -0.00471924063393544, -0.00475328859651961, 0.0267577424464665, -0.14749956541445, 0.219339761545619, -0.289608819749475, -0.16910058984964, 0.249660414938372, -0.332021468047661, -0.00215887668071306, 0.00471924063393201, 0.00475328859651945, -0.0245988657657488},
    {0.0875743252958655, -0.396701411583311, -0.0356729062616839, -0.0346045055181206, 0.666545937704305, 0.186413882500133, 0.0946026198011393, 0.120889283852103, 0.679725918576516, -1.80256750474042, 1.43196867245135, -4.43406878641156, -0.23309969083241, 0.0356729062616832, -0.804192734241911, 0.637253476025952, -0.186413882500133, -0.325751900006664, 0.0216109650404286, -0.246456467964157, 6.74117053529279, 0.26770419635053, -2.97364768658554, 1.22262432675417, -0.73185609582709, -0.539320876364361, -1.6601574166696, 0.325751900006664, -0.0216109650404302, 1.90661388463375},
    {0.347307955877069, 0.346390058705359, 0.101992726716842, -0.120186420065602, -0.558595529905268, 0.15950810376607, -0.117722478519046, -0.101310667057417, -1.39526645637379, 2.08973096441721, -1.38816252262585, -1.29536745996238, 0.409838580918111, -0.101992726716842, -0.234936612320397, 0.401436481027339, -0.15950810376607, -0.218436025622454, -0.0404462244050394, 0.234353193098576, -1.36036675471709, -0.28965216085251, 3.21432974458474, -0.246725324469556, -0.283714002508293, 0.58297260384737, -0.79915002078207, 0.218436025622455, 0.0404462244050387, 0.564796827683494},
    {-0.161328789785951, -0.351201920067467, 0.243015108355066, -0.780294492171824, 0.863923804034904, 0.111120368180021, -0.274709566284801, 0.156687069959906, 0.824500830648484, -2.31155651072535, 1.99958638993029, 0.260269516108357, 0.39806440936755, -0.243015108355065, 0.0472042414949512, 0.140142090387454, -0.111120368180022, -0.0936857401896799, -0.0482631839802601, 0.325396208317107, -3.12233722505628, 0.382230082804274, 1.99814390491301, -0.566288217706111, 0.134567475897346, 0.362396906251255, -0.165999697260026, 0.0936857401896789, 0.0482631839802597, -0.159396511057078},
    {-0.219620965508788, 1.77751327294542, 0.206913148841662, -0.938985349862108, 2.00474187080317, 0.051352140662332, -0.211024069027357, 0.363593558014058, 1.06963975570392, -2.01699752931235, -0.61053453382821, 0.0589610169540364, 0.0173297934874935, -0.206913148841662, 0.0106935692074171, 0.00389463322050293, -0.0513521406623333, -0.0177781099200812, -0.0143472983469492, 0.0994910234629842, -0.254490232020021, 0.921655556374614, -1.80921265573718, -0.0461560714062902, 0.207129435806857, -0.328131055815187, -0.00183619360059634, 0.0177781099200773, 0.0143472983469492, -0.0976548298623841},
    {-0.0209772079821653, -0.396701411583311, 0.39987776219495, -1.65993791461285, 1.40509174086318, 0.123390082929377, 0.0599331426904403, 0.0696106867104169, -0.203319129043969, -0.123703717824721, 0.744701466434165, 0.479253808900427, -5.28804995692452, -0.399877762194951, 0.0237430665741762, 0.190928497886899, -0.123390082929377, -0.435036243762149, 0.596927340689375, -0.299159589437829, 1.43055486500621, 6.94798787153737, -3.31490041476982, 0.0708721741320862, -0.250861640577339, -0.164225927416678, -0.953030134509128, 0.435036243762147, -0.596927340689376, 1.25218972394696},
    {-0.244720001995119, 0.346390058705359, -0.205061948774459, 1.25569982385825, -1.1775301913267, 0.102354027564883, -0.0729779800399424, -0.0583368920737837, 0.45810349929786, 0.252428080179953, -0.812201636188053, 1.06954018544265, -1.87956149697762, 0.20506194877446, 0.0529868795095981, 0.109235184081513, -0.102354027564883, -0.28545082489142, 0.243330492119065, 0.284468107532123, -3.85932203668383, 0.623861673119374, 3.96731204256788, -0.191197520700795, -0.0362572040415702, 0.196547533264981, -0.425798659740701, 0.285450824891421, -0.243330492119066, 0.141330552208576},
    {-0.343330389268093, -0.351201920067467, -0.083546119390645, 0.450426536556231, 1.82116810428009, 0.0683473488315223, -0.16539112805882, 0.0902238328410976, 1.27432954866167, -1.68860256613002, 1.10880532680391, 0.609052888212722, -0.0713965829656413, 0.0835461193906449, 0.0301735385373506, 0.0262159540743646, -0.0683473488315221, -0.118901275520852, 0.0160424062525841, 0.394980082644579, -2.74270358699422, -0.379029953590589, 0.312482594501409, -0.135878302164455, 0.139175173984454, 0.0154809307860082, -0.0626078304709047, 0.11890127552085, -0.0160424062525846, -0.332372252173672},
    {0.119021627700702, 1.77751327294542, 0.253349046363802, -1.33875328318574, 4.22603467501402, 0.0303732203363799, -0.123715939849412, 0.209365102102901, -0.609979029827522, 1.39104301130931, -2.67759888212791, -0.127657140121389, -0.0915840975261255, -0.253349046363802, -0.00632435657324611, -0.00846340609805209, -0.0303732203363812, -0.021971203566246, -0.0117787709119694, 0.120766535274153, 0.907807326795803, 1.43033738071187, -5.00618486168844, 0.0449743526214128, 0.132179345947467, -0.248015098151068, 0.00826163736317909, 0.021971203566242, 0.0117787709119701, -0.12902817263733},
    {-0.160775122870768, -0.396701411583311, 6.32404851007063, -4.55659847811125, 2.0711722515106, 0.0465489992587234, 0.0217678079089792, 0.0233634884685084, 0.281190616285138, 0.151417764140288, 0.124868154028652, 0.512728960713615, 0.0745567365024638, -6.32404851007063, 0.00578374741760693, -0.000356172861464085, -0.046548999258723, -0.232908116629393, 0.549961335597679, -0.148004948949567, -1.62415093733461, 4.48204174160878, -0.959750274889608, -0.0183209444158293, -0.0214116350475182, -0.0108262914702852, 0.00242171129032292, 0.232908116629389, -0.54996133559767, 0.145583237659252},
    {-0.0231092835261093, 0.346390058705359, 1.75409916439269, 3.85712313652989, -1.73573567238647, 0.0376754447559802, -0.0260649086724405, -0.0195796560795941, 0.195906210582939, -0.226433594639722, -0.292753391122468, -0.164342827891456, 0.881951188948038, -1.7540991643927, -0.00185383990227337, -0.00595987641041763, -0.0376754447559802, -0.150282084237934, 0.250862632720189, 0.140736547379913, -0.214188317465681, -4.73907432547793, 2.11426681774361, -0.00241611304010862, 0.0320247850828578, 0.0238496090219759, 0.0321801407154087, 0.150282084237935, -0.250862632720188, -0.17291668809532},
    {0.257570292859132, -0.351201920067467, -0.247959121416687, 3.44947832137328, 2.68448865880024, 0.0242960786153945, -0.0576920151294584, 0.030281894602433, -0.720891835721446, 0.509096752407349, 0.30542671052243, -0.755472566595073, 0.547178448555987, 0.247959121416686, -0.00852197328592617, -0.00915147868505474, -0.0242960786153931, -0.0611366377836187, 0.0412344999417636, 0.195410774154901, 2.79461718917547, -3.99665676992927, -4.72363328138063, 0.0315241798095729, 0.06684349381451, -0.0532841011260771, 0.0309973144549744, 0.0611366377836178, -0.0412344999417636, -0.226408088609873},
    {0.643627477463276, 1.77751327294542, 0.180795646006108, -1.12170128065519, 6.2293767006513, 0.0104401582457703, -0.0421899274451683, 0.0702693706935838, -2.84415859753122, 4.96486302347839, -4.54184517635587, -0.654052673186592, -0.164612656347539, -0.180795646006107, -0.00737792430187915, -0.00619148444209858, -0.0104401582457716, -0.0110445622080699, -0.00331236672255076, 0.0597475244622926, 3.38913299317737, 1.28631393700273, -8.96445702064209, 0.0382305090977413, 0.0483814118872688, -0.101121955489444, 0.00876810865918785, 0.0110445622080664, 0.00331236672255261, -0.0685156331214813},
    {0.260529637804041, -0.396701411583311, 0.202156726410703, 0.104101948809161, 0.137487919401697, -0.118688289051527, -0.133571098516484, 0.749180792140797, 0.274356833948042, -1.47092024263404, 1.33273518246527, -0.712398674345035, 0.647875223764909, -0.202156726410703, -3.88190762860052, -0.831275555643357, 0.118688289051528, 0.0948704030764151, -0.402901794823364, -0.315045661617758, 1.14655309506224, -0.751977172574072, -0.571642340118903, 6.24764386375316, 0.964846654159839, -3.11491702729344, -1.96067682547368, -0.0948704030764169, 0.402901794823368, 2.27572248709144},
    {0.302516099307214, 0.346390058705359, 0.174901641144902, -0.130567659355242, -0.115221071571266, 0.0347833019774884, -0.0450594763221724, -0.62784726139369, -1.08349512321911, 1.73958935183012, -1.30500038662358, -0.181026251980791, 0.409170307741555, -0.174901641144902, -0.986424054181831, 0.141206481639182, -0.034783301977488, -0.0172458840932281, -0.272305890417524, 0.299574027745598, -0.327089630808413, -0.278602648386314, 0.623336954360471, -1.78233309352895, -0.0961470053170088, 3.39660440910447, -0.938799069611435, 0.017245884093227, 0.272305890417525, 0.639225041865838},
    {-0.218437937623509, -0.351201920067467, 0.123642391765631, -0.307820525808743, 0.178200900522258, 0.22361384982296, -0.752030001145616, 0.971028526683916, 1.03810278643263, -2.33943076546058, 1.87096783671892, 0.0628271254006747, 0.141404732565693, -0.123642391765631, 0.342349173516005, 0.345462996380709, -0.22361384982296, -0.0529016636056609, -0.117992345177289, 0.415954446576279, -0.59808797521864, 0.166415793243049, 0.35705994929571, -3.25902104704227, 0.406567004764907, 1.94564334684235, -0.191078639486748, 0.0529016636056609, 0.11799234517729, -0.224875807089532},
    {-0.18467858359371, 1.77751327294542, 0.0578933212354528, -0.238589734323364, 0.413516568270605, 0.220601860279333, -1.01717622737602, 2.25327920830031, 0.877100194463028, -1.56094000223284, -0.908994881581895, 0.00922823879748633, 0.00141088596621727, -0.0578933212354532, 0.0502852852996228, 0.00601501011116408, -0.220601860279334, -0.0176760104503018, -0.0225923754080478, 0.127179520062281, -0.0327142097028057, 0.237178848357144, -0.390030597365284, -0.178261898543971, 1.01116121726486, -2.12530259505596, -0.00075206840124622, 0.0176760104502997, 0.0225923754080478, -0.126427451661033},
    {0.259550726522875, -0.396701411583311, -0.0356729062616831, -0.0346045055181202, 0.666545937704304, 0.0606216909073088, 0.05097565506926, 0.574586631579221, -0.308909765222813, -0.532210874440985, 0.978271324724235, -0.798816702986172, -0.151993763092263, 0.0356729062616818, -0.688608800465997, 0.223900949430204, -0.0606216909073089, -0.175528082919912, 0.102716892780573, -1.17140731788668, 2.18096760194488, 0.186598268610384, -2.04869683666301, 1.8800727108187, -0.274876604499464, -1.76605054193192, -5.14518568300823, 0.175528082919913, -0.102716892780573, 6.3165930008949},
    {-0.02030939403896, 0.346390058705359, 0.101992726716843, -0.120186420065602, -0.558595529905268, 0.16852491355416, -0.180442698454674, -0.481529487748321, -0.0408768355937407, 0.722739872862286, -1.00794370193494, 0.180639772360899, 0.258043945749361, -0.101992726716843, 0.155717997003429, 0.387416031407633, -0.16852491355416, -0.334814441548247, -0.192240859573791, 1.11388046592354, -1.9568467142154, -0.137857525683759, 2.33480247175977, -1.68687242459303, -0.206973332952958, 2.01268391533792, -2.39153566903114, 0.334814441548247, 0.192240859573791, 1.2776552031076},
    {-0.350400156294148, -0.351201920067467, 0.243015108355066, -0.780294492171823, 0.863923804034904, 0.254937392993912, -0.779330043605613, 0.744733469100726, 1.40434486643232, -2.11428278086017, 1.41153999078947, 0.35215478221592, 0.216932733614567, -0.243015108355065, 0.303570119720277, 0.216664603484215, -0.254937392993912, -0.265779284553756, -0.229394859733244, 1.54660781591123, -1.99301088356971, 0.563361758557256, 0.776932297318886, -1.71804724252789, 0.562665440121397, 0.669743653706888, -0.429978507731666, 0.265779284553756, 0.229394859733244, -1.11662930817957},
    {-0.0223844325018229, 1.77751327294542, 0.206913148841661, -0.938985349862106, 2.00474187080317, 0.188817160483826, -0.842059472797182, 1.72815977650085, 0.0525831654337383, 0.167388746437668, -1.975100752315, -0.014427468459347, -0.0365156012376751, -0.206913148841661, -0.0124369980152059, -0.032746312742347, -0.188817160483827, -0.0709408454477879, -0.0681926930721175, 0.472880723769579, 0.192287953699956, 0.97550095109978, -2.18260235604378, 0.16575914930973, 0.874805785539532, -1.88148192779538, 0.0183895562850792, 0.0709408454477855, 0.0681926930721176, -0.491270280054657},
    {-0.309054780062582, -0.396701411583311, 0.399877762194952, -1.65993791461285, 1.40509174086318, 0.24564222094469, 0.15267468207399, 0.33085951644637, 0.0867840462081405, 0.135519508739539, 0.483452636698213, 1.46377606721657, -3.04778231179647, -0.399877762194953, 0.344678021868894, 0.280323252687911, -0.24564222094469, -1.10821854528985, 2.83719498581743, -1.42190519558375, -0.676712999455853, 4.70772022640932, -2.19215480862389, -0.159346844950773, -0.432997934761901, -0.516190693364491, -2.61073469435296, 1.10821854528984, -2.83719498581743, 4.03263988993672},
    {-0.358579623296543, 0.346390058705359, -0.205061948774459, 1.25569982385825, -1.1775301913267, 0.256580410431232, -0.221168398048955, -0.277275183088055, 0.691085365440884, -0.0856324556759185, -0.593263345173782, 1.10461047941694, -0.966342430921969, 0.205061948774459, 0.260104645449674, 0.17020342230921, -0.256580410431232, -0.865092478970157, 1.15654955817472, 1.35207659844, -2.82678383975025, -0.289357392936277, 2.89970355166, -0.665627949491484, 0.0509649757397454, 0.682798487129865, -1.04051060779373, 0.865092478970157, -1.15654955817472, -0.311565990646275},
    {-0.209120412751909, -0.351201920067467, -0.0835461193906449, 0.450426536556231, 1.82116810428009, 0.225482960005566, -0.611576862650217, 0.42883377705964, 0.741589727968507, -0.951462777734498, 0.770195382585366, 0.272314520571382, -0.0111894501575484, 0.083546119390645, 0.0641223971199366, 0.0151927301496377, -0.225482960005566, -0.439668499160907, 0.0762495390606784, 1.87733989313133, -0.923605408866132, -0.439237086398683, -1.16987721598534, -0.217483051161464, 0.596384132500578, -0.275473123018112, -0.0466366864696214, 0.439668499160907, -0.0762495390606782, -1.83070320666171},
    {0.312478109057611, 1.77751327294542, 0.253349046363802, -1.33875328318574, 4.22603467501402, 0.125378211827875, -0.534659491189284, 0.995112097236991, -1.46615692106645, 2.83951141632542, -3.463345877262, -0.25059776873748, -0.135789811647017, -0.253349046363802, -0.059008713933575, -0.0542305386031367, -0.125378211827877, -0.0949522958306132, -0.0559844850328604, 0.574003207724896, 1.48398462786264, 1.47454309483276, -5.45942153413918, 0.349436568523889, 0.588890029792424, -1.2855399518273, 0.0582211737149009, 0.0949522958306104, 0.0559844850328612, -0.632224381439797},
    {0.0441090754128561, -0.396701411583311, 6.32404851007063, -4.55659847811125, 2.0711722515106, 0.176031214445461, 0.0885717097592914, 0.111046634683381, 0.21994372023199, 0.0954636081246851, 0.0371850078137795, -0.529788570164167, 2.13856101680235, -6.32404851007064, -0.0284048020475126, -0.0415696064932324, -0.17603121444546, -0.947687070417883, 2.61396561589756, -0.703467357603271, -1.13709581511053, 2.4180374613089, -0.404287866235907, -0.0609657953308739, -0.0470021032660625, -0.0216760373049946, 0.330160288379618, 0.947687070417878, -2.61396561589755, 0.373307069223659},
    {0.182854617686689, 0.346390058705359, 1.7540991643927, 3.85712313652989, -1.73573567238647, 0.149676919217673, -0.109727092848611, -0.0930620835509116, -0.106013524280279, -0.203960188460619, -0.21927096365115, -0.930761949117103, 1.82343837029521, -1.7540991643927, -0.0499031319415475, -0.0518730111222499, -0.149676919217672, -0.632651985007533, 1.19234981406736, 0.668920653033635, 1.08041490941369, -5.6805615068251, 1.58608271208989, 0.0579268284734145, 0.16160010397086, 0.0850383870190441, 0.316229361171459, 0.632651985007533, -1.19234981406736, -0.985150014205092},
    {0.43095300139955, -0.351201920067467, -0.247959121416687, 3.44947832137328, 2.68448865880024, 0.103393084530579, -0.254549965342964, 0.143929811336578, -1.21677998664642, 0.94525011152605, 0.191778793788286, -1.1220851536954, 0.701931480936605, 0.247959121416686, -0.0601609933964615, -0.0517981611997538, -0.103393084530577, -0.269748404421053, 0.195987532322383, 0.928787192033657, 3.89460619415455, -4.15140980230989, -5.45700969925939, 0.208810692091159, 0.306348126542714, -0.292579510031273, 0.188998134917866, 0.269748404421053, -0.195987532322382, -1.11778532695152},
    {0.736873916833949, 1.77751327294542, 0.180795646006108, -1.12170128065519, 6.2293767006513, 0.0474159810998215, -0.194517528557206, 0.333990240685132, -3.21754465365933, 5.50872351022739, -4.80556604634742, -0.729983215471415, -0.177043964970058, -0.180795646006107, -0.0391383089428398, -0.03070171631776, -0.0474159810998228, -0.0509211813056945, -0.0157436753450702, 0.283979917260414, 3.68929592826032, 1.29874524562525, -9.18868941344021, 0.197802909384108, 0.225219244874968, -0.492654841126398, 0.0448220318463862, 0.0509211813056914, 0.0157436753450721, -0.328801949106802},
    {-0.242112183715196, -0.396701411583311, 0.202156726410703, 0.104101948809161, 0.137487919401697, 0.910263235975045, -2.06647448493138, 1.52099882878988, -0.00253143690262884, 0.0804278863849584, 0.560917145816178, 0.130129193892678, 0.232799349549863, -0.202156726410703, 1.43959085542531, -4.62118069312338, -0.910263235975046, 1.46773717900042, -0.817977669038415, -0.639610741976808, -0.0205398535345199, -0.336901298359025, -0.247077259759857, -0.227227914317661, 6.68765517805476, -2.73336176989753, -1.43033791778739, -1.46773717900042, 0.817977669038418, 2.0699486597642},
    {-0.347940059792458, 0.346390058705359, 0.174901641144901, -0.130567659355241, -0.115221071571267, -0.0900751953174301, 1.6156503063331, -1.27466555370425, 0.665827171745214, -0.00609507634509809, -0.658182094313018, 0.114992163304792, 0.128636423377717, -0.174901641144902, 1.27213319153948, -1.59175310227737, 0.0900751953174295, 0.618367548681297, -0.552839774781363, 0.608199983391051, -0.314482090448547, 0.00193123597752297, 0.314710998715021, -3.47904669245964, -0.0238972040557299, 3.48157905462441, -0.599204052122497, -0.618367548681298, 0.552839774781365, -0.00899593126855202},
    {-0.264871803916117, -0.351201920067467, 0.123642391765631, -0.307820525808741, 0.178200900522257, -0.139787485467039, 0.843544431569929, 1.97139764833991, 0.94425756719594, -1.19878255827528, 0.870598715062925, 0.0384381926574368, 0.0198471310498733, -0.12364239176563, 0.425233331533269, -0.0543886306339464, 0.139787485467039, 0.0593392599861158, -0.239549946693108, 0.844477371429415, -0.145176117622272, 0.287973394758866, -0.0714629755574223, -1.60605168681469, -0.789155800935983, -0.790579293058494, -0.0544487831517309, -0.059339259986117, 0.239549946693109, -0.790028588277682},
    {0.251073694749743, 1.77751327294542, 0.0578933212354518, -0.23858973432336, 0.413516568270605, 0.247106172443949, -1.34035148121976, 4.57464349421984, -1.19945571810087, 2.40122791790713, -3.23035916750142, -0.0208011980772058, -0.0218641405875862, -0.0578933212354521, -0.230119111922974, -0.122828558845077, -0.247106172443951, -0.0232919981331429, -0.0458674019618504, 0.258201896111134, 0.128337603220734, 0.260453874910944, -0.521052973414131, 1.41977087905534, 1.46318004006484, -5.7642952613522, 0.0236613807906047, 0.0232919981331413, 0.0458674019618498, -0.281863276901737},
    {-0.354977542438394, -0.396701411583311, -0.0356729062616828, -0.0346045055181201, 0.666545937704304, -0.161830420667417, -0.952532688813851, 1.16653497104885, 0.186693538034369, 0.178662430732732, 0.386322985254603, 0.684720873388753, -0.046173176995738, 0.0356729062616818, 1.19834327843348, -1.27097497208273, 0.161830420667416, 3.27992326060122, 0.208537478877099, -2.37820987568337, -0.509372532226735, 0.0807776825138581, -0.84189427886632, -0.891462746259804, 2.22350766089658, -1.47341550322253, -3.17327191586202, -3.27992326060122, -0.2085374788771, 5.55148179154539},
    {-0.336177667614903, 0.346390058705359, 0.101992726716843, -0.120186420065602, -0.558595529905268, -0.245351328163604, 0.637826140626859, -0.977608869015617, 0.662352475008212, -0.160700545431019, -0.511864320667649, 0.436264187114288, 0.0599943369546783, -0.101992726716843, 0.763514413781913, -0.318388353512672, 0.245351328163603, 1.18349705977435, -0.390290468368473, 2.26141794057534, -1.064933654317, 0.0601920831109242, 1.18726499710797, -1.86376103931599, -0.319437787114187, 2.07785549454969, -1.12884858246194, -1.18349705977434, 0.390290468368472, -1.1325693581134},
    {-0.118117019922264, -0.351201920067467, 0.243015108355066, -0.780294492171822, 0.863923804034904, 0.0425061088440194, -0.187940606800303, 1.51196980241046, 0.432132696843095, -0.6071174143331, 0.644303657479736, 0.0458205299922566, -0.0193935204939746, -0.243015108355065, 0.0801913980783611, -0.00467109539564626, -0.0425061088440197, -0.0640944365276667, -0.465721113841784, 3.1399479288254, -0.0933365184318829, 0.799688012665797, -0.816407815595279, -0.16335005086332, 0.192611702195949, -1.4288111496255, 0.0780405925180885, 0.0640944365276667, 0.465721113841784, -3.21798852134348},
    {0.394442721463882, 1.77751327294542, 0.206913148841661, -0.938985349862104, 2.00474187080317, 0.25574503082746, -1.28326040456176, 3.50853762348673, -1.81600426818164, 3.39952687307321, -3.75547859930088, -0.142371689060035, -0.106768804513664, -0.206913148841661, -0.249167453855974, -0.145915140523651, -0.255745030827462, -0.108110627539022, -0.138445896348106, 0.960050010032393, 0.807401460563456, 1.04575415437577, -2.66977164230659, 1.41304895303559, 1.42917554508542, -4.67241912266635, 0.109163994794532, 0.108110627539021, 0.138445896348106, -1.06921400482693},
    {-0.192468191903715, -0.396701411583311, 0.399877762194953, -1.65993791461285, 1.40509174086318, -0.0410670910943308, -0.0401841924135733, 0.671716283022831, 0.286700988942448, 0.159872744422825, 0.142595870121752, 0.470084531217961, -0.124858651024476, -0.399877762194953, 0.224727983827076, -0.00302260946815971, 0.0410670910943305, 0.29168468966344, 5.76011864658942, -2.88677467417864, -1.14789094205213, 1.78479656563733, -0.727285330029012, -0.548759212289692, 0.0432068018817329, -0.347685054560214, -0.217139923401069, -0.29168468966344, -5.76011864658942, 3.1039145975797},
    {-0.0579729019650718, 0.346390058705359, -0.205061948774459, 1.25569982385825, -1.1775301913267, 0.097941113887471, -0.116068266153772, -0.562928512254454, 0.247452663795526, -0.228259804528431, -0.307610016007383, -0.0169985708549937, 0.22515342514106, 0.205061948774459, -0.00812631410416088, -0.0208116360121876, -0.0979411138874706, -0.453996976885046, 2.34804541423775, 2.74500753921486, -0.312243848703448, -1.48085324899931, 1.50677261088514, -0.149270877728577, 0.136879902165959, 0.720325704087193, 0.492193944563325, 0.453996976885045, -2.34804541423775, -3.23720148377819},
    {0.225565484443058, -0.351201920067467, -0.0835461193906449, 0.450426536556231, 1.82116810428009, 0.242028983444845, -0.779334722200616, 0.870625194206358, -0.627456245081788, 0.424688715267548, 0.328403965438649, -0.464943919745675, 0.0673640447405831, 0.0835461193906451, -0.222270469965022, -0.116554276521091, -0.242028983444845, -0.560271240754737, 0.154803033958812, 3.81140548269241, 1.747718621012, -0.517790581296815, -3.10394280554642, 0.835512032228425, 0.895888998721706, -1.48386675646976, 0.570019012253608, 0.560271240754737, -0.154803033958811, -4.38142449494601},
    {0.625377600303054, 1.77751327294542, 0.253349046363802, -1.33875328318574, 4.22603467501402, 0.20784003130507, -0.944124904409846, 2.02029249853973, -2.77042394229884, 4.85605934761511, -4.48852627856474, -0.433502317612515, -0.19346592370723, -0.253349046363802, -0.207239539597306, -0.136437384707655, -0.207840031305071, -0.16767087969422, -0.113660597093073, 1.16535049460682, 2.2582364636196, 1.53221920689297, -6.05076882102111, 1.07956951095401, 1.0805622891175, -2.89262246989643, 0.168407138726328, 0.167670879694219, 0.113660597093074, -1.33375763333315},
    {0.445188683796849, -0.396701411583311, 6.32404851007064, -4.55659847811125, 2.0711722515106, 0.251335865827114, 0.140376363080483, 0.225448654138397, 0.0416264621376282, -0.0128967227099299, -0.0772170116412363, -2.2682776280034, 4.83151020970038, -6.32404851007064, -0.246903722311186, -0.148845643231899, -0.251335865827113, -1.50197918325386, 5.3069148087956, -1.42819068271763, -0.123330082385642, -0.274911731589139, 0.320435458878446, -0.0134245720356396, 0.00846928015141243, 0.0348796402084292, 1.51435723338288, 1.50197918325385, -5.3069148087956, -0.0861665506652504},
    {0.542293065584039, 0.346390058705358, 1.7540991643927, 3.85712313652989, -1.73573567238647, 0.233047796265584, -0.185263390252469, -0.188936130731822, -0.624267027991791, -0.141019179827367, -0.123396916470239, -2.12456429902517, 3.0518162226727, -1.7540991643927, -0.231260418584873, -0.146583295328363, -0.233047796265582, -1.06817057255093, 2.42072766644486, 1.35805341045946, 2.96335001674758, -6.90893935920259, 0.896949954664064, 0.322562873527047, 0.33184668558083, 0.0976336757896481, 1.07451312353614, 1.06817057255093, -2.42072766644486, -2.43256653399559},
    {0.696647594003245, -0.351201920067467, -0.247959121416687, 3.44947832137329, 2.68448865880024, 0.1796905676379, -0.464714413867446, 0.292208605409279, -1.94993432088213, 1.56098864723076, 0.0434999997155848, -1.64987954111949, 0.903840971932118, 0.247959121416686, -0.179590626402308, -0.121765637690281, -0.179690567637898, -0.492461161734253, 0.397897023317898, 1.88563861500169, 5.37925200454667, -4.35331929330541, -6.41386112222742, 0.585535618204533, 0.586480051557724, -0.698153597211502, 0.494079765028754, 0.492461161734252, -0.397897023317897, -2.37971838003045},
    {0.866122121955718, 1.77751327294542, 0.180795646006108, -1.12170128065519, 6.2293767006513, 0.0905566439693838, -0.378989874794234, 0.678072329454311, -3.72656946126587, 6.23258220148133, -5.1496481351166, -0.832787687104742, -0.193263351160874, -0.180795646006107, -0.0906495648074953, -0.0652980027053106, -0.0905566439693853, -0.0992127150214299, -0.0319630615358858, 0.57654057082629, 4.08466105345952, 1.31496463181607, -9.48125006700609, 0.444618421496499, 0.444287877499547, -1.03204118614331, 0.0993349697639766, 0.0992127150214274, 0.0319630615358878, -0.675875540590269},
    {0.262326815091423, -0.396701411583313, 0.202156726410701, 0.104101948809159, 0.137487919401699, 6.97671389735957, -4.78134754401982, 2.11255686317746, 0.128964660121258, 0.0360508249420193, -0.0306408885713915, -0.100156729351646, -0.0853345325480423, -0.202156726410701, -1.53894819927434, 3.91937002415418, -6.97671389735957, 3.39600687414888, -1.13611155113632, -0.888372848912821, -0.0390160372262138, -0.0187674162611166, 0.00168484717615312, -0.599497014536958, 0.861977519865647, 0.025888350633845, 0.728217700605393, -3.39600687414888, 1.13611155113632, 0.160155148307443},
    {0.38289774905993, 0.346390058705359, 0.1749016411449, -0.13056765935524, -0.115221071571267, 2.00292864633947, 4.0613297888734, -1.7704178417259, -0.395619949493976, -0.171238051979943, -0.16242980629137, -0.107010502091161, -0.0863780817689593, -0.1749016411449, -1.64425915824829, 2.6868052803149, -2.00292864633947, 1.5544171508449, -0.76785427992804, 0.8447455874239, 0.144066178980255, 0.216945741124198, 0.0781653946821715, 2.21363445225523, -6.74813506918831, 1.20104254771896, 0.558848215437052, -1.5544171508449, 0.767854279928042, -1.40359380286095},
    {0.582912531849484, -0.351201920067467, 0.12364239176563, -0.30782052580874, 0.178200900522258, -0.239523825164352, 3.69493051796097, 2.73812809926082, -1.63950531826655, 1.30392644234251, 0.103868264142018, -0.0948090485613363, -0.0733203934222964, -0.123642391765629, -1.45677894538783, 0.880102970824234, 0.239523825164352, 0.259920443346261, -0.332717471165276, 1.17291771238945, 0.316511464556534, 0.381140919231035, -0.399903316517459, 4.86332522619433, -4.5750334887852, -6.14467438006733, 0.279379641427187, -0.259920443346265, 0.332717471165277, -1.45229735381663},
    {0.812452135616642, 1.77751327294542, 0.0578933212354512, -0.238589734323358, 0.413516568270605, 0.173807930028899, -1.09014043663116, 6.35384743720882, -3.51633198805032, 5.93592968997866, -5.0095631104904, -0.0524695959338473, -0.0397032273991146, -0.0578933212354514, -0.806216324172754, -0.181408029877247, -0.173807930028901, -0.0189439481887033, -0.0637064887733778, 0.358623673726947, 0.260427778693185, 0.278292961722471, -0.621474751029942, 4.00157696497627, 1.27154846650841, -9.54920807801233, 0.059677828591686, 0.018943948188701, 0.0637064887733762, -0.418301502318629},
    {0.404206071679303, -0.396701411583311, -0.0356729062616815, -0.0346045055181205, 0.666545937704303, 1.49613339776545, -2.44717872422156, 1.62023231877597, 0.0618697120201853, -0.00200000964366329, -0.0673743624725142, -0.676423762559445, 0.0349327507444066, 0.0356729062616811, -1.64424322359767, 2.47039173426359, -1.49613339776545, 8.42654379706155, 0.289643406617244, -3.30316072560589, -0.0731787462010625, -0.000328245226286636, 0.0830565710562023, -0.177882067739882, -0.0232130100420219, 0.201892972561581, 3.33449325654651, -8.42654379706155, -0.289643406617248, -0.0313325309406174},
    {0.507063488468923, 0.346390058705358, 0.101992726716843, -0.120186420065602, -0.558595529905267, 0.0710197363376302, 1.95486663571239, -1.35782768970652, -0.573877125232763, -0.147930921964774, -0.131645499976744, -0.647897638253979, -0.091800298214073, -0.101992726716843, -1.57490224360712, 1.49315821229376, -0.0710197363376298, 3.6272877015401, -0.542085103537223, 3.1409452134003, 0.89875544387624, 0.211986718279675, 0.307737724283006, 2.18468455731573, -3.44802484800616, 0.748045375997911, 2.39910388467208, -3.6272877015401, 0.542085103537221, -5.54004909807238},
    {0.671962873295984, -0.351201920067468, 0.243015108355066, -0.780294492171822, 0.863923804034905, -0.182002935180799, 1.22321782683204, 2.10001620155128, -1.88295343805267, 1.50593522648524, 0.0562572583389175, -0.515643003287644, -0.200525196246958, -0.243015108355065, -1.25341917431049, 0.314350539750141, 0.1820029351808, 0.417160818495717, -0.646852789594767, 4.36115953641952, 1.68933862244215, 0.980819688418781, -2.03761942318941, 4.1064251968354, -1.53756836658218, -4.95302222407618, 1.12075938082138, -0.417160818495719, 0.646852789594766, -5.4819189172409},
    {0.854659261789437, 1.77751327294542, 0.20691314884166, -0.938985349862102, 2.00474187080317, 0.239374195003019, -1.32853973709366, 4.87310384197352, -3.68179693700834, 6.16966922006115, -5.12004481778767, -0.265108269545324, -0.160614199238833, -0.20691314884166, -0.644422180069842, -0.227247790459779, -0.239374195003022, -0.111925267994825, -0.192291291073274, 1.33343971033899, 1.30352774135534, 1.09959954910093, -3.04316134261318, 3.16860047521871, 1.55578752755344, -7.39728213712239, 0.228085934824017, 0.111925267994824, 0.192291291073273, -1.561525645163},
    {0.63196013663153, -0.396701411583312, 0.399877762194954, -1.65993791461285, 1.40509174086318, -0.24517877267168, -0.428558151068852, 0.932965112758784, -0.0545862383822768, -0.062019527051741, -0.118652959614201, -2.03766259075905, 2.11540899410358, -0.399877762194954, -1.35298504251687, 0.54615040676319, 0.24517877267168, 3.1107717684289, 8.00038629171748, -4.00952028032456, 0.237110573778957, -0.45547107949073, 0.395460276116914, 0.157438754188455, -0.11759225569434, 0.262581175569632, 5.1096942773414, -3.11077176842889, -8.00038629171748, -1.10017399701684},
    {0.699938941386467, 0.346390058705358, -0.205061948774458, 1.25569982385825, -1.1775301913267, -0.116209006894854, 0.193229626637038, -0.781866803268725, -0.848825245514237, -0.108832029584477, -0.0886717249931107, -1.77137785639109, 1.13837249119671, 0.205061948774459, -1.17617497382134, 0.175175059571123, 0.116209006894855, 0.755810948546604, 3.2612644802934, 3.81261603012274, 2.50974392774053, -2.39407231505496, 0.439164119977265, 1.66644174073763, -0.368404686208164, 0.291600036352429, 3.45638115553108, -0.755810948546606, -3.2612644802934, -7.26899718565382},
    {0.804449259426938, -0.351201920067468, -0.0835461193906448, 0.450426536556231, 1.82116810428009, 0.157022569763058, -0.590304184654245, 1.2092351384249, -2.24008613638041, 1.79704477580083, -0.0102059787798923, -1.2583453857965, 0.127571177548676, 0.0835461193906452, -0.835527183461996, -0.167187751689785, -0.157022569763057, -0.42437536598531, 0.215010166766906, 5.29376529317915, 4.02347989754958, -0.577997714104908, -4.58630261603317, 2.67154539958652, 0.757491936344028, -3.04525335454942, 1.49931635307386, 0.42437536598531, -0.215010166766906, -6.79308164625301},
    {0.915095482842408, 1.77751327294542, 0.253349046363802, -1.33875328318574, 4.22603467501402, 0.24277263108424, -1.16084886922723, 2.80603949367382, -3.9170828212427, 6.4987473391537, -5.27427327369883, -0.590935171541133, -0.237671637828121, -0.253349046363801, -0.392374307610203, -0.206087899454942, -0.242772631084242, -0.206159746646061, -0.157866311213964, 1.61858716705757, 2.86890598999896, 1.57642492101386, -6.50400549347185, 1.90492131055403, 1.36693676868218, -4.31858649661764, 0.287351125703105, 0.20615974664606, 0.157866311213965, -1.90593829276067},
    {0.868638985211498, -0.396701411583311, 6.32404851007064, -4.55659847811125, 2.0711722515106, 0.250809322516258, 0.152983559275672, 0.31313180035327, -0.183989831391421, -0.123047584380656, -0.16490015785611, -3.89068141543178, 6.89551449000027, -6.32404851007064, -0.588215719540761, -0.23151049072783, -0.250809322516256, -1.63687188049174, 7.37091908909549, -1.98365309137133, 0.943611296389042, -2.33891601188902, 0.875897867532147, 0.142660613503526, 0.0785269314521528, 0.132423305683966, 3.00186832357338, 1.63687188049174, -7.37091908909548, -1.01821523220205},
    {0.894239071655412, 0.346390058705358, 1.7540991643927, 3.85712313652989, -1.73573567238647, 0.255773608793596, -0.217390424506954, -0.26241855820314, -1.12370401763527, -0.0670106237265791, -0.0499144889989218, -3.18811892297118, 3.99330340401987, -1.7540991643927, -0.481998258407618, -0.22506564904898, -0.255773608793594, -1.25340497060017, 3.36221484779203, 1.88623751611318, 4.5550887463473, -7.85042654054976, 0.368765849010345, 0.688664662667412, 0.442456073555931, 0.0557521539433454, 1.95283334943291, 1.25340497060016, -3.36221484779203, -3.83907086554608},
    {0.932314949394835, -0.351201920067468, -0.247959121416687, 3.44947832137329, 2.68448865880024, 0.219317728895972, -0.590016512172775, 0.405856522143425, -2.57966297056645, 2.06869785825764, -0.0701479170185598, -2.09232037220804, 1.05859400431274, 0.247959121416687, -0.316329095558074, -0.181067362668033, -0.21931772889597, -0.625244684383463, 0.552650055698516, 2.61901503288045, 6.55506925351398, -4.50807232568602, -7.14723754010618, 0.991033283347703, 0.771083874840804, -1.08056070993305, 0.803737073468095, 0.625244684383462, -0.552650055698516, -3.42275210634854},
    {0.971133168652245, 1.77751327294542, 0.180795646006108, -1.12170128065519, 6.2293767006513, 0.119844479565315, -0.509439025084948, 0.941793199445859, -4.13359857554116, 6.79832113905164, -5.41336900510815, -0.914445613287683, -0.205694659783394, -0.180795646006107, -0.138251176842043, -0.0934196017713591, -0.119844479565316, -0.133361950220936, -0.0443943701584052, 0.800772963624411, 4.39055137244058, 1.32739594043859, -9.70548245980421, 0.6637889508191, 0.60285862685631, -1.46733097342291, 0.146843660747411, 0.133361950220934, 0.0443943701584073, -0.947616624371825}};
    
    // Array of non-zero columns
    static const unsigned int nzc0[30] = {0, 3, 4, 5, 6, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34};
    
    // Number of operations to compute geometry constants: 36
    const double G0 = det*(Jinv_00*Jinv_20 + Jinv_01*Jinv_21 + Jinv_02*Jinv_22);
    const double G1 = det*(Jinv_20*Jinv_20 + Jinv_21*Jinv_21 + Jinv_22*Jinv_22);
    const double G2 = det*(Jinv_00*Jinv_00 + Jinv_01*Jinv_01 + Jinv_02*Jinv_02);
    const double G3 = det*(Jinv_00*Jinv_10 + Jinv_01*Jinv_11 + Jinv_02*Jinv_12);
    const double G4 = det*(Jinv_10*Jinv_10 + Jinv_11*Jinv_11 + Jinv_12*Jinv_12);
    const double G5 = det*(Jinv_10*Jinv_20 + Jinv_11*Jinv_21 + Jinv_12*Jinv_22);
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('simplify expressions', True), ('ignore zero tables', True), ('non zero columns', True), ('remove zero terms', True), ('ignore ones', True)
    // Total number of operations to compute element tensor: 1555620
    
    // Loop quadrature points for integral
    // Number of operations to compute element tensor for following IP loop = 1555584
    for (unsigned int ip = 0; ip < 64; ip++)
    {
      
      // Number of operations to compute ip constants: 6
      // Number of operations: 1
      const double Gip0 = G0*W64[ip];
      
      // Number of operations: 1
      const double Gip1 = G1*W64[ip];
      
      // Number of operations: 1
      const double Gip2 = G2*W64[ip];
      
      // Number of operations: 1
      const double Gip3 = G3*W64[ip];
      
      // Number of operations: 1
      const double Gip4 = G4*W64[ip];
      
      // Number of operations: 1
      const double Gip5 = G5*W64[ip];
      
      
      // Number of operations for primary indices = 24300
      for (unsigned int j = 0; j < 30; j++)
      {
        for (unsigned int k = 0; k < 30; k++)
        {
          // Number of operations to compute entry = 3
          A[nzc0[j]*35 + nzc1[k]] += FE0_D001[ip][j]*FE0_D100[ip][k]*Gip0;
          // Number of operations to compute entry = 3
          A[nzc0[j]*35 + nzc0[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*Gip1;
          // Number of operations to compute entry = 3
          A[nzc1[j]*35 + nzc0[k]] += FE0_D001[ip][k]*FE0_D100[ip][j]*Gip0;
          // Number of operations to compute entry = 3
          A[nzc1[j]*35 + nzc1[k]] += FE0_D100[ip][j]*FE0_D100[ip][k]*Gip2;
          // Number of operations to compute entry = 3
          A[nzc1[j]*35 + nzc2[k]] += FE0_D010[ip][k]*FE0_D100[ip][j]*Gip3;
          // Number of operations to compute entry = 3
          A[nzc2[j]*35 + nzc2[k]] += FE0_D010[ip][j]*FE0_D010[ip][k]*Gip4;
          // Number of operations to compute entry = 3
          A[nzc2[j]*35 + nzc1[k]] += FE0_D010[ip][j]*FE0_D100[ip][k]*Gip3;
          // Number of operations to compute entry = 3
          A[nzc2[j]*35 + nzc0[k]] += FE0_D001[ip][k]*FE0_D010[ip][j]*Gip5;
          // Number of operations to compute entry = 3
          A[nzc0[j]*35 + nzc2[k]] += FE0_D001[ip][j]*FE0_D010[ip][k]*Gip5;
        }// end loop over 'k'
      }// end loop over 'j'
    }// end loop over 'ip'
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class poisson3d_4_0_cell_integral_0: public ufc::cell_integral
{
private:

  poisson3d_4_0_cell_integral_0_quadrature integral_0_quadrature;

public:

  /// Constructor
  poisson3d_4_0_cell_integral_0() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~poisson3d_4_0_cell_integral_0()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Reset values of the element tensor block
    for (unsigned int j = 0; j < 1225; j++)
      A[j] = 0;
    
    // Add all contributions to element tensor
    integral_0_quadrature.tabulate_tensor(A, w, c);
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class poisson3d_4_form_0: public ufc::form
{
public:

  /// Constructor
  poisson3d_4_form_0() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~poisson3d_4_form_0()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "Form([Integral(IndexSum(Product(SpatialDerivative(BasisFunction(FiniteElement('Lagrange', Cell('tetrahedron', 1, Space(3)), 4), 0), MultiIndex((Index(0),), {Index(0): 3})), SpatialDerivative(BasisFunction(FiniteElement('Lagrange', Cell('tetrahedron', 1, Space(3)), 4), 1), MultiIndex((Index(0),), {Index(0): 3}))), MultiIndex((Index(0),), {Index(0): 3})), Measure('cell', 0, None))])";
  }

  /// Return the rank of the global tensor (r)
  virtual unsigned int rank() const
  {
    return 2;
  }

  /// Return the number of coefficients (n)
  virtual unsigned int num_coefficients() const
  {
    return 0;
  }

  /// Return the number of cell integrals
  virtual unsigned int num_cell_integrals() const
  {
    return 1;
  }

  /// Return the number of exterior facet integrals
  virtual unsigned int num_exterior_facet_integrals() const
  {
    return 0;
  }

  /// Return the number of interior facet integrals
  virtual unsigned int num_interior_facet_integrals() const
  {
    return 0;
  }

  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new poisson3d_4_0_finite_element_0();
      break;
    case 1:
      return new poisson3d_4_0_finite_element_1();
      break;
    }
    return 0;
  }

  /// Create a new dof map for argument function i
  virtual ufc::dof_map* create_dof_map(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new poisson3d_4_0_dof_map_0();
      break;
    case 1:
      return new poisson3d_4_0_dof_map_1();
      break;
    }
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(unsigned int i) const
  {
    return new poisson3d_4_0_cell_integral_0();
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(unsigned int i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(unsigned int i) const
  {
    return 0;
  }

};

/// This class defines the interface for a finite element.

class poisson3d_4_1_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  poisson3d_4_1_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~poisson3d_4_1_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', 'tetrahedron', 4)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 35;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_02 = element_coordinates[3][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
    const double J_12 = element_coordinates[3][1] - element_coordinates[0][1];
    const double J_20 = element_coordinates[1][2] - element_coordinates[0][2];
    const double J_21 = element_coordinates[2][2] - element_coordinates[0][2];
    const double J_22 = element_coordinates[3][2] - element_coordinates[0][2];
    
    // Compute sub determinants
    const double d00 = J_11*J_22 - J_12*J_21;
    const double d01 = J_12*J_20 - J_10*J_22;
    const double d02 = J_10*J_21 - J_11*J_20;
    
    const double d10 = J_02*J_21 - J_01*J_22;
    const double d11 = J_00*J_22 - J_02*J_20;
    const double d12 = J_01*J_20 - J_00*J_21;
    
    const double d20 = J_01*J_12 - J_02*J_11;
    const double d21 = J_02*J_10 - J_00*J_12;
    const double d22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d00 + J_10*d10 + J_20*d20;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = d00*(element_coordinates[0][0] - element_coordinates[2][0] - element_coordinates[3][0]) \
                    + d10*(element_coordinates[0][1] - element_coordinates[2][1] - element_coordinates[3][1]) \
                    + d20*(element_coordinates[0][2] - element_coordinates[2][2] - element_coordinates[3][2]);
    
    const double C1 = d01*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[3][0]) \
                    + d11*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[3][1]) \
                    + d21*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[3][2]);
    
    const double C2 = d02*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[2][0]) \
                    + d12*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[2][1]) \
                    + d22*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[2][2]);
    
    // Get coordinates and map to the UFC reference element
    double x = (C0 + d00*coordinates[0] + d10*coordinates[1] + d20*coordinates[2]) / detJ;
    double y = (C1 + d01*coordinates[0] + d11*coordinates[1] + d21*coordinates[2]) / detJ;
    double z = (C2 + d02*coordinates[0] + d12*coordinates[1] + d22*coordinates[2]) / detJ;
    
    // Map coordinates to the reference cube
    if (std::abs(y + z - 1.0) < 1e-14)
      x = 1.0;
    else
      x = -2.0 * x/(y + z - 1.0) - 1.0;
    if (std::abs(z - 1.0) < 1e-14)
      y = -1.0;
    else
      y = 2.0 * y/(1.0 - z) - 1.0;
    z = 2.0 * z - 1.0;
    
    // Reset values
    *values = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    const double scalings_y_4 = scalings_y_3*(0.5 - 0.5*y);
    const double scalings_z_0 = 1;
    const double scalings_z_1 = scalings_z_0*(0.5 - 0.5*z);
    const double scalings_z_2 = scalings_z_1*(0.5 - 0.5*z);
    const double scalings_z_3 = scalings_z_2*(0.5 - 0.5*z);
    const double scalings_z_4 = scalings_z_3*(0.5 - 0.5*z);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    const double psitilde_a_4 = 1.75*x*psitilde_a_3 - 0.75*psitilde_a_2;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_0_4 = 0.0285714285714286*psitilde_bs_0_3 + 1.8*y*psitilde_bs_0_3 - 0.771428571428571*psitilde_bs_0_2;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_1_3 = 0.285714285714286*psitilde_bs_1_2 + 2*y*psitilde_bs_1_2 - 0.714285714285714*psitilde_bs_1_1;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_2_2 = 1.02040816326531*psitilde_bs_2_1 + 2.57142857142857*y*psitilde_bs_2_1 - 0.551020408163265*psitilde_bs_2_0;
    const double psitilde_bs_3_0 = 1;
    const double psitilde_bs_3_1 = 4.5*y + 3.5;
    const double psitilde_bs_4_0 = 1;
    
    // Compute psitilde_cs
    const double psitilde_cs_00_0 = 1;
    const double psitilde_cs_00_1 = 2*z + 1;
    const double psitilde_cs_00_2 = 0.3125*psitilde_cs_00_1 + 1.875*z*psitilde_cs_00_1 - 0.5625*psitilde_cs_00_0;
    const double psitilde_cs_00_3 = 0.155555555555556*psitilde_cs_00_2 + 1.86666666666667*z*psitilde_cs_00_2 - 0.711111111111111*psitilde_cs_00_1;
    const double psitilde_cs_00_4 = 0.09375*psitilde_cs_00_3 + 1.875*z*psitilde_cs_00_3 - 0.78125*psitilde_cs_00_2;
    const double psitilde_cs_01_0 = 1;
    const double psitilde_cs_01_1 = 3*z + 2;
    const double psitilde_cs_01_2 = 0.777777777777778*psitilde_cs_01_1 + 2.33333333333333*z*psitilde_cs_01_1 - 0.555555555555556*psitilde_cs_01_0;
    const double psitilde_cs_01_3 = 0.428571428571429*psitilde_cs_01_2 + 2.14285714285714*z*psitilde_cs_01_2 - 0.714285714285714*psitilde_cs_01_1;
    const double psitilde_cs_02_0 = 1;
    const double psitilde_cs_02_1 = 4*z + 3;
    const double psitilde_cs_02_2 = 1.265625*psitilde_cs_02_1 + 2.8125*z*psitilde_cs_02_1 - 0.546875*psitilde_cs_02_0;
    const double psitilde_cs_03_0 = 1;
    const double psitilde_cs_03_1 = 5*z + 4;
    const double psitilde_cs_04_0 = 1;
    const double psitilde_cs_10_0 = 1;
    const double psitilde_cs_10_1 = 3*z + 2;
    const double psitilde_cs_10_2 = 0.777777777777778*psitilde_cs_10_1 + 2.33333333333333*z*psitilde_cs_10_1 - 0.555555555555556*psitilde_cs_10_0;
    const double psitilde_cs_10_3 = 0.428571428571429*psitilde_cs_10_2 + 2.14285714285714*z*psitilde_cs_10_2 - 0.714285714285714*psitilde_cs_10_1;
    const double psitilde_cs_11_0 = 1;
    const double psitilde_cs_11_1 = 4*z + 3;
    const double psitilde_cs_11_2 = 1.265625*psitilde_cs_11_1 + 2.8125*z*psitilde_cs_11_1 - 0.546875*psitilde_cs_11_0;
    const double psitilde_cs_12_0 = 1;
    const double psitilde_cs_12_1 = 5*z + 4;
    const double psitilde_cs_13_0 = 1;
    const double psitilde_cs_20_0 = 1;
    const double psitilde_cs_20_1 = 4*z + 3;
    const double psitilde_cs_20_2 = 1.265625*psitilde_cs_20_1 + 2.8125*z*psitilde_cs_20_1 - 0.546875*psitilde_cs_20_0;
    const double psitilde_cs_21_0 = 1;
    const double psitilde_cs_21_1 = 5*z + 4;
    const double psitilde_cs_22_0 = 1;
    const double psitilde_cs_30_0 = 1;
    const double psitilde_cs_30_1 = 5*z + 4;
    const double psitilde_cs_31_0 = 1;
    const double psitilde_cs_40_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.866025403784439*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_0;
    const double basisvalue1 = 2.73861278752583*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_0;
    const double basisvalue2 = 1.58113883008419*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_0;
    const double basisvalue3 = 1.11803398874989*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_1;
    const double basisvalue4 = 5.1234753829798*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_0;
    const double basisvalue5 = 3.96862696659689*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_0;
    const double basisvalue6 = 2.29128784747792*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_0;
    const double basisvalue7 = 3.24037034920393*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_1;
    const double basisvalue8 = 1.87082869338697*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_1;
    const double basisvalue9 = 1.3228756555323*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_2;
    const double basisvalue10 = 7.93725393319377*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_0;
    const double basisvalue11 = 6.70820393249937*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_0;
    const double basisvalue12 = 5.19615242270663*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_0;
    const double basisvalue13 = 3*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_0;
    const double basisvalue14 = 5.80947501931113*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_1;
    const double basisvalue15 = 4.5*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_1;
    const double basisvalue16 = 2.59807621135332*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_1;
    const double basisvalue17 = 3.67423461417477*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_2;
    const double basisvalue18 = 2.12132034355964*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_2;
    const double basisvalue19 = 1.5*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_3;
    const double basisvalue20 = 11.1242977306435*psitilde_a_4*scalings_y_4*psitilde_bs_4_0*scalings_z_4*psitilde_cs_40_0;
    const double basisvalue21 = 9.81070843517429*psitilde_a_3*scalings_y_3*psitilde_bs_3_1*scalings_z_4*psitilde_cs_31_0;
    const double basisvalue22 = 8.2915619758885*psitilde_a_2*scalings_y_2*psitilde_bs_2_2*scalings_z_4*psitilde_cs_22_0;
    const double basisvalue23 = 6.42261628933256*psitilde_a_1*scalings_y_1*psitilde_bs_1_3*scalings_z_4*psitilde_cs_13_0;
    const double basisvalue24 = 3.70809924354783*psitilde_a_0*scalings_y_0*psitilde_bs_0_4*scalings_z_4*psitilde_cs_04_0;
    const double basisvalue25 = 8.77496438739212*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_1;
    const double basisvalue26 = 7.41619848709566*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_1;
    const double basisvalue27 = 5.74456264653803*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_1;
    const double basisvalue28 = 3.3166247903554*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_1;
    const double basisvalue29 = 6.42261628933256*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_2;
    const double basisvalue30 = 4.9749371855331*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_2;
    const double basisvalue31 = 2.87228132326901*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_2;
    const double basisvalue32 = 4.06201920231798*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_3;
    const double basisvalue33 = 2.34520787991171*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_3;
    const double basisvalue34 = 1.6583123951777*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_4;
    
    // Table(s) of coefficients
    static const double coefficients0[35][35] = \
    {{-0.0137464349807054, -0.0144900147488139, -0.00836581391578938, -0.00591552374999942, 0, 0, 0, 0, 0, 0, -0.00671936840905293, -0.00567890279999946, -0.00439885919382572, -0.00253968253968254, -0.00491807409042212, -0.00380952380952381, -0.00219942959691286, -0.00311046316543896, -0.0017958267458706, -0.00126984126984129, 0.0136980289516341, 0.0120805260192622, 0.010209907964538, 0.00790856070259326, 0.00456600965054471, 0.0108051509532101, 0.00913201930108942, 0.0070736317340728, 0.00408396318581521, 0.00790856070259324, 0.00612594477872281, 0.0035368158670364, 0.00500181296677924, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807054, 0.0144900147488139, -0.00836581391578937, -0.00591552374999945, 0, 0, 0, 0, 0, 0, 0.00671936840905292, -0.00567890279999946, 0.00439885919382571, -0.00253968253968253, -0.00491807409042211, 0.0038095238095238, -0.00219942959691286, 0.00311046316543895, -0.00179582674587059, -0.00126984126984127, 0.0136980289516341, -0.0120805260192622, 0.010209907964538, -0.00790856070259325, 0.00456600965054471, -0.0108051509532101, 0.00913201930108942, -0.00707363173407281, 0.00408396318581522, 0.00790856070259325, -0.00612594477872282, 0.0035368158670364, -0.00500181296677924, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807054, 0, 0.0167316278315787, -0.00591552374999944, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0101587301587302, 0, 0, -0.00659828879073858, 0, 0.00359165349174119, -0.00126984126984127, 0, 0, 0, 0, 0.0228300482527235, 0, 0, 0, -0.0163358527432608, 0, 0, 0.0106104476011092, 0, -0.0057755961256123, 0.00204198159290761},
    {-0.0137464349807054, 0, 0, 0.0177465712499983, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0126984126984127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0306297238936141},
    {0.0439885919382572, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0, 0.0406349206349206, 0, 0, 0.00439885919382572, 0, -0.0143666139669648, 0.00761904761904762, 0, 0, 0, 0, 0, 0, 0, 0, 0.0367556686723369, 0, 0, -0.0424417904044368, 0, 0.0303218796594646, -0.0122518895574456},
    {-0.0329914439536929, 0, -0.0200779533978945, -0.0141972569999987, 0, 0, -0.00969857289937743, 0, 0.0712696645099798, -0.050395263067897, 0, 0, 0, 0, 0, 0, 0.0461880215351701, 0, 0.0107749604752236, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0495154221385096, 0, -0.0606437593189292, 0.0306297238936141},
    {0.0439885919382572, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0, 0.0359165349174119, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0505364660991076, -0.0408396318581521},
    {0.0439885919382572, 0.0231840235981022, -0.013385302265263, 0.0189296759999982, 0.0433733365754904, -0.0335968420452646, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484216, 0.0268774736362117, -0.0227156111999979, 0.0175954367753029, -0.0101587301587302, 0.00327871606028142, -0.00253968253968254, 0.00146628639794192, -0.0124418526617558, 0.00718330698348239, 0.00761904761904763, 0, 0, 0, 0, 0, 0.0243115896447228, -0.0205470434274512, 0.0159156714016638, -0.00918891716808423, -0.031634242810373, 0.0245037791148913, -0.0141472634681456, 0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.032991443953693, -0.0173880176985767, 0.0100389766989472, -0.0141972569999986, -0.00722888942924839, 0.00559947367421073, -0.00323285763312585, 0.0617213399848368, -0.03563483225499, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, -0.0266666666666667, 0.01539600717839, 0.00933138949631687, -0.00538748023761181, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, -0.0285877423007065, 0.0165051407128366, -0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, 0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0.0311046316543896, -0.017958267458706, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, -0.0335968420452646, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, 0, -0.0117302911835353, 0.0101587301587301, -0.0229510124219699, 0.00761904761904762, -0.0014662863979419, 0.0165891368823411, -0.00718330698348239, -0.00761904761904761, 0, 0.0241610520385245, -0.0357346778758831, 0.0355885231616696, -0.0228300482527235, -0.00270128773830253, -0.0114150241263618, 0.0159156714016638, -0.0112308987609918, 0.00395428035129663, 0.00306297238936141, -0.0035368158670364, -0.00375135972508442, 0.000721949515701537, 0.0020419815929076},
    {-0.0329914439536929, -0.0173880176985767, -0.0100389766989473, 0.0141972569999987, -0.00722888942924838, 0.0615942104163185, -0.0614242950293905, -0.00685792666498185, -0.00395942580611001, 0.00559947367421077, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042211, -0.0266666666666667, 0.0175954367753029, 0.00933138949631687, 0.0053874802376118, -0.00761904761904761, 0, 0, 0.0357346778758831, -0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108941, 0, 0.00408396318581522, 0.0013180934504322, 0.00714693557517662, -0.00471575448938186, -0.00250090648338961, -0.00144389903140308, 0.0020419815929076},
    {0.0439885919382572, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0.0293257279588381, 0.0101587301587301, 0, -0.0101587301587302, -0.0219942959691286, 0.00207364211029263, 0.017958267458706, -0.00761904761904761, 0, 0, 0, 0.0395428035129662, -0.0456600965054471, 0, 0, -0.017684079335182, 0.0142938711503532, 0, 0.00612594477872281, 0, -0.0012504532416948, -0.00360974757850769, 0.0020419815929076},
    {0.043988591938257, -0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0.0433733365754903, 0.0335968420452647, 0.0193971457987549, 0.0274317066599275, 0.01583770322444, 0.0111989473484216, -0.0268774736362117, -0.0227156111999979, -0.0175954367753029, -0.0101587301587302, 0.00327871606028141, 0.00253968253968254, 0.00146628639794192, 0.0124418526617558, 0.00718330698348239, 0.00761904761904762, 0, 0, 0, 0, 0, -0.0243115896447228, -0.0205470434274512, -0.0159156714016638, -0.00918891716808423, -0.031634242810373, -0.0245037791148913, -0.0141472634681456, -0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, 0.0173880176985767, 0.0100389766989472, -0.0141972569999987, -0.00722888942924838, -0.00559947367421076, -0.00323285763312582, -0.0617213399848368, -0.0356348322549899, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, 0.0266666666666667, 0.01539600717839, -0.00933138949631688, -0.00538748023761179, -0.019047619047619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, 0.0285877423007065, 0.0165051407128365, 0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382572, -0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, -0.0311046316543895, -0.017958267458706, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484215, -0.0268774736362117, 0, 0.0117302911835353, 0.0101587301587302, -0.0229510124219699, -0.00761904761904762, -0.00146628639794191, -0.0165891368823411, -0.00718330698348239, -0.00761904761904762, 0, -0.0241610520385245, -0.0357346778758831, -0.0355885231616696, -0.0228300482527235, 0.00270128773830253, -0.0114150241263618, -0.0159156714016638, -0.0112308987609918, 0.00395428035129663, -0.00306297238936141, -0.0035368158670364, 0.00375135972508442, 0.000721949515701537, 0.0020419815929076},
    {-0.0329914439536929, 0.0173880176985767, -0.0100389766989473, 0.0141972569999987, -0.00722888942924837, -0.0615942104163185, -0.0614242950293905, 0.00685792666498186, -0.00395942580610999, 0.00559947367421076, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042212, 0.0266666666666667, 0.0175954367753029, -0.00933138949631687, 0.0053874802376118, -0.00761904761904762, 0, 0, 0.0357346778758831, 0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108942, 0, 0.00408396318581522, 0.00131809345043221, -0.00714693557517662, -0.00471575448938187, 0.00250090648338962, -0.00144389903140308, 0.00204198159290761},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, -0.0293257279588381, 0.0101587301587301, 0, 0.0101587301587302, -0.0219942959691286, -0.00207364211029264, 0.017958267458706, -0.00761904761904762, 0, 0, 0, -0.0395428035129662, -0.0456600965054471, 0, 0, 0.017684079335182, 0.0142938711503532, 0, -0.00612594477872281, 0, 0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.0439885919382573, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0134387368181058, -0.0113578055999989, -0.0205280095711867, -0.0152380952380952, -0.00983614818084423, -0.0177777777777778, -0.0131965775814772, -0.0145154947720485, -0.0107749604752236, -0.00761904761904762, -0.0547921158065365, -0.0241610520385245, -0.00510495398226901, 0.00395428035129662, 0.00456600965054471, -0.0216103019064202, -0.00456600965054471, 0.0035368158670364, 0.00408396318581522, -0.00395428035129662, 0.00306297238936141, 0.0035368158670364, 0.00250090648338962, 0.00288779806280615, 0.00204198159290761},
    {-0.0329914439536929, 0, 0.0200779533978945, 0.0141972569999987, -0.0867466731509807, 0, 0.00969857289937743, 0, 0.00791885161221999, 0.00559947367421078, 0, 0.0340734167999968, 0, -0.0152380952380952, 0.0295084445425327, 0, -0.0131965775814772, 0, -0.0107749604752236, -0.00761904761904762, 0.0821881737098047, 0, -0.010209907964538, 0, 0.00456600965054471, 0, -0.00913201930108942, 0, 0.00408396318581521, -0.00790856070259325, 0, 0.0035368158670364, 0, 0.00288779806280615, 0.0020419815929076},
    {0.0439885919382571, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754904, -0.0335968420452646, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, -0.0134387368181059, -0.0113578055999989, 0.0205280095711867, -0.0152380952380952, -0.00983614818084423, 0.0177777777777778, -0.0131965775814772, 0.0145154947720485, -0.0107749604752236, -0.00761904761904762, -0.0547921158065365, 0.0241610520385245, -0.00510495398226901, -0.00395428035129662, 0.00456600965054471, 0.0216103019064202, -0.00456600965054471, -0.0035368158670364, 0.00408396318581521, -0.00395428035129662, -0.0030629723893614, 0.0035368158670364, -0.00250090648338962, 0.00288779806280615, 0.0020419815929076},
    {0.0439885919382573, 0.139104141588614, -0.0803118135915779, -0.0567890279999946, 0.0578311154339871, 0.0335968420452646, -0.0420271492306356, 0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, -0.0586514559176763, 0.0406349206349207, 0.0393445927233769, 0.00253968253968253, -0.0109971479845643, -0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, -0.053052238005546, 0.0367556686723369, -0.0105447476034577, -0.0245037791148912, 0.0235787724469093, 0.0175063453837273, 0, -0.0122518895574456},
    {0.0439885919382571, 0, 0.160623627183156, -0.0567890279999947, 0, 0.0783926314389508, 0.00969857289937743, -0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, 0.0586514559176763, -0.060952380952381, 0, 0.033015873015873, 0.0241937255660415, -0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, 0.053052238005546, -0.0551335030085054, 0, -0.0326717054865217, 0.0141472634681456, 0.00875317269186366, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382573, 0, 0, 0.170367083999984, 0, -0.0111989473484215, 0.00969857289937744, 0.0822951199797824, 0.0475131096733199, -0.0167984210226323, 0, 0, 0, 0, 0, 0.0533333333333333, -0.0461880215351701, 0.0435464843161454, 0.0251415744421884, -0.0825396825396825, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0571754846014129, -0.0495154221385096, -0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, 0.0578311154339871, -0.0335968420452646, -0.0420271492306356, -0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, 0.0586514559176763, 0.0406349206349206, 0.0393445927233769, -0.00253968253968253, -0.0109971479845643, 0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, 0.053052238005546, 0.0367556686723369, -0.0105447476034577, 0.0245037791148913, 0.0235787724469093, -0.0175063453837273, 0, -0.0122518895574456},
    {0.0439885919382571, 0, 0.160623627183156, -0.0567890279999947, 0, -0.0783926314389508, 0.00969857289937743, 0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, -0.0586514559176763, -0.060952380952381, 0, -0.033015873015873, 0.0241937255660415, 0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, -0.053052238005546, -0.0551335030085054, 0, 0.0326717054865217, 0.0141472634681456, -0.00875317269186366, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382574, 0, 0, 0.170367083999984, 0, 0.0111989473484216, 0.00969857289937746, -0.0822951199797824, 0.0475131096733199, -0.0167984210226323, 0, 0, 0, 0, 0, -0.0533333333333333, -0.0461880215351701, -0.0435464843161454, 0.0251415744421884, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.057175484601413, -0.0495154221385096, 0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754904, 0.0447957893936862, 0.0484928644968872, -0.0548634133198549, 0, -0.0167984210226323, 0.0806324209086351, 0.0227156111999978, -0.00586514559176761, -0.0101587301587302, -0.00327871606028142, 0.0304761904761905, 0.0271262983619253, 0.045620126426438, 0.0430998419008943, 0.0393650793650793, 0, 0, 0, 0, 0, 0.0729347689341683, 0.0205470434274512, -0.0053052238005546, -0.00918891716808422, 0.031634242810373, -0.00816792637163041, -0.0141472634681456, -0.00875317269186366, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754904, -0.0447957893936862, 0.0484928644968872, 0.0548634133198549, 0, -0.0167984210226323, -0.0806324209086351, 0.0227156111999979, 0.00586514559176762, -0.0101587301587302, -0.00327871606028142, -0.0304761904761905, 0.0271262983619253, -0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, -0.0729347689341683, 0.0205470434274512, 0.0053052238005546, -0.00918891716808422, 0.031634242810373, 0.00816792637163041, -0.0141472634681456, 0.00875317269186366, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0.0144577788584968, 0, -0.00323285763312579, 0, -0.0950262193466398, -0.0167984210226323, 0, 0, 0, 0, -0.0688530372659096, 0, 0.01539600717839, 0, -0.0502831488843767, -0.0825396825396825, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0738132332242036, 0, 0.0165051407128365, 0, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754904, -0.0447957893936862, -0.00969857289937743, 0.0548634133198549, 0.0316754064488799, 0.0391963157194754, 0.0806324209086352, 0, 0.0527863103259087, 0.060952380952381, 0.0229510124219699, 0.0101587301587302, 0.0168622935763319, -0.0124418526617558, -0.00718330698348239, -0.013968253968254, 0, 0.0724831561155734, 0.0357346778758831, -0.0118628410538899, -0.0228300482527235, -0.00810386321490759, 0.0114150241263618, -0.00530522380055459, -0.0112308987609918, -0.00395428035129662, -0.0010209907964538, -0.0035368158670364, 0.00125045324169481, 0.000721949515701534, 0.00204198159290761},
    {0.0439885919382572, 0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754904, 0.0447957893936862, -0.00969857289937744, -0.0548634133198549, 0.0316754064488799, 0.0391963157194754, -0.0806324209086351, 0, -0.0527863103259086, 0.060952380952381, 0.0229510124219699, -0.0101587301587302, 0.0168622935763319, 0.0124418526617558, -0.00718330698348239, -0.013968253968254, 0, -0.0724831561155734, 0.0357346778758831, 0.0118628410538899, -0.0228300482527235, 0.00810386321490759, 0.0114150241263618, 0.0053052238005546, -0.0112308987609918, -0.00395428035129663, 0.0010209907964538, -0.0035368158670364, -0.00125045324169481, 0.000721949515701532, 0.0020419815929076},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0.0144577788584968, 0, -0.0614242950293905, 0, -0.0633508128977598, 0.0391963157194754, 0, -0.0681468335999936, 0, -0.0914285714285714, 0.00983614818084423, 0, 0.0285925847598672, 0, 0.0143666139669648, -0.013968253968254, 0, 0, -0.0714693557517662, 0, 0.0456600965054471, 0, 0.0182640386021788, 0, 0.00408396318581519, -0.00263618690086442, 0, -0.00471575448938187, 0, -0.00144389903140307, 0.0020419815929076},
    {0.351908735506058, 0, 0, 0, -0.115662230867974, 0, -0.129314305325033, 0, 0, -0.134387368181059, 0, -0.0908624447999914, 0, 0.0406349206349207, -0.0786891854467539, 0, -0.0879771838765144, 0, 0, 0.0711111111111111, 0, 0, 0, 0, 0, 0, -0.0821881737098047, 0, 0.0367556686723369, 0.0210894952069153, 0, 0.0235787724469093, 0, 0, -0.0122518895574456}};
    
    // Extract relevant coefficients
    const double coeff0_0 = coefficients0[dof][0];
    const double coeff0_1 = coefficients0[dof][1];
    const double coeff0_2 = coefficients0[dof][2];
    const double coeff0_3 = coefficients0[dof][3];
    const double coeff0_4 = coefficients0[dof][4];
    const double coeff0_5 = coefficients0[dof][5];
    const double coeff0_6 = coefficients0[dof][6];
    const double coeff0_7 = coefficients0[dof][7];
    const double coeff0_8 = coefficients0[dof][8];
    const double coeff0_9 = coefficients0[dof][9];
    const double coeff0_10 = coefficients0[dof][10];
    const double coeff0_11 = coefficients0[dof][11];
    const double coeff0_12 = coefficients0[dof][12];
    const double coeff0_13 = coefficients0[dof][13];
    const double coeff0_14 = coefficients0[dof][14];
    const double coeff0_15 = coefficients0[dof][15];
    const double coeff0_16 = coefficients0[dof][16];
    const double coeff0_17 = coefficients0[dof][17];
    const double coeff0_18 = coefficients0[dof][18];
    const double coeff0_19 = coefficients0[dof][19];
    const double coeff0_20 = coefficients0[dof][20];
    const double coeff0_21 = coefficients0[dof][21];
    const double coeff0_22 = coefficients0[dof][22];
    const double coeff0_23 = coefficients0[dof][23];
    const double coeff0_24 = coefficients0[dof][24];
    const double coeff0_25 = coefficients0[dof][25];
    const double coeff0_26 = coefficients0[dof][26];
    const double coeff0_27 = coefficients0[dof][27];
    const double coeff0_28 = coefficients0[dof][28];
    const double coeff0_29 = coefficients0[dof][29];
    const double coeff0_30 = coefficients0[dof][30];
    const double coeff0_31 = coefficients0[dof][31];
    const double coeff0_32 = coefficients0[dof][32];
    const double coeff0_33 = coefficients0[dof][33];
    const double coeff0_34 = coefficients0[dof][34];
    
    // Compute value(s)
    *values = coeff0_0*basisvalue0 + coeff0_1*basisvalue1 + coeff0_2*basisvalue2 + coeff0_3*basisvalue3 + coeff0_4*basisvalue4 + coeff0_5*basisvalue5 + coeff0_6*basisvalue6 + coeff0_7*basisvalue7 + coeff0_8*basisvalue8 + coeff0_9*basisvalue9 + coeff0_10*basisvalue10 + coeff0_11*basisvalue11 + coeff0_12*basisvalue12 + coeff0_13*basisvalue13 + coeff0_14*basisvalue14 + coeff0_15*basisvalue15 + coeff0_16*basisvalue16 + coeff0_17*basisvalue17 + coeff0_18*basisvalue18 + coeff0_19*basisvalue19 + coeff0_20*basisvalue20 + coeff0_21*basisvalue21 + coeff0_22*basisvalue22 + coeff0_23*basisvalue23 + coeff0_24*basisvalue24 + coeff0_25*basisvalue25 + coeff0_26*basisvalue26 + coeff0_27*basisvalue27 + coeff0_28*basisvalue28 + coeff0_29*basisvalue29 + coeff0_30*basisvalue30 + coeff0_31*basisvalue31 + coeff0_32*basisvalue32 + coeff0_33*basisvalue33 + coeff0_34*basisvalue34;
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis() is not yet implemented.");
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_02 = element_coordinates[3][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
    const double J_12 = element_coordinates[3][1] - element_coordinates[0][1];
    const double J_20 = element_coordinates[1][2] - element_coordinates[0][2];
    const double J_21 = element_coordinates[2][2] - element_coordinates[0][2];
    const double J_22 = element_coordinates[3][2] - element_coordinates[0][2];
    
    // Compute sub determinants
    const double d00 = J_11*J_22 - J_12*J_21;
    const double d01 = J_12*J_20 - J_10*J_22;
    const double d02 = J_10*J_21 - J_11*J_20;
    
    const double d10 = J_02*J_21 - J_01*J_22;
    const double d11 = J_00*J_22 - J_02*J_20;
    const double d12 = J_01*J_20 - J_00*J_21;
    
    const double d20 = J_01*J_12 - J_02*J_11;
    const double d21 = J_02*J_10 - J_00*J_12;
    const double d22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d00 + J_10*d10 + J_20*d20;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = d00*(element_coordinates[0][0] - element_coordinates[2][0] - element_coordinates[3][0]) \
                    + d10*(element_coordinates[0][1] - element_coordinates[2][1] - element_coordinates[3][1]) \
                    + d20*(element_coordinates[0][2] - element_coordinates[2][2] - element_coordinates[3][2]);
    
    const double C1 = d01*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[3][0]) \
                    + d11*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[3][1]) \
                    + d21*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[3][2]);
    
    const double C2 = d02*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[2][0]) \
                    + d12*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[2][1]) \
                    + d22*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[2][2]);
    
    // Get coordinates and map to the UFC reference element
    double x = (C0 + d00*coordinates[0] + d10*coordinates[1] + d20*coordinates[2]) / detJ;
    double y = (C1 + d01*coordinates[0] + d11*coordinates[1] + d21*coordinates[2]) / detJ;
    double z = (C2 + d02*coordinates[0] + d12*coordinates[1] + d22*coordinates[2]) / detJ;
    
    // Map coordinates to the reference cube
    if (std::abs(y + z - 1.0) < 1e-14)
      x = 1.0;
    else
      x = -2.0 * x/(y + z - 1.0) - 1.0;
    if (std::abs(z - 1.0) < 1e-14)
      y = -1.0;
    else
      y = 2.0 * y/(1.0 - z) - 1.0;
    z = 2.0 * z - 1.0;
    
    // Compute number of derivatives
    unsigned int num_derivatives = 1;
    
    for (unsigned int j = 0; j < n; j++)
      num_derivatives *= 3;
    
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      combinations[j] = new unsigned int [n];
      for (unsigned int k = 0; k < n; k++)
        combinations[j][k] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] ={{d00 / detJ, d10 / detJ, d20 / detJ}, {d01 / detJ, d11 / detJ, d21 / detJ}, {d02 / detJ, d12 / detJ, d22 / detJ}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values
    for (unsigned int j = 0; j < 1*num_derivatives; j++)
      values[j] = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    const double scalings_y_4 = scalings_y_3*(0.5 - 0.5*y);
    const double scalings_z_0 = 1;
    const double scalings_z_1 = scalings_z_0*(0.5 - 0.5*z);
    const double scalings_z_2 = scalings_z_1*(0.5 - 0.5*z);
    const double scalings_z_3 = scalings_z_2*(0.5 - 0.5*z);
    const double scalings_z_4 = scalings_z_3*(0.5 - 0.5*z);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    const double psitilde_a_4 = 1.75*x*psitilde_a_3 - 0.75*psitilde_a_2;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_0_4 = 0.0285714285714286*psitilde_bs_0_3 + 1.8*y*psitilde_bs_0_3 - 0.771428571428571*psitilde_bs_0_2;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_1_3 = 0.285714285714286*psitilde_bs_1_2 + 2*y*psitilde_bs_1_2 - 0.714285714285714*psitilde_bs_1_1;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_2_2 = 1.02040816326531*psitilde_bs_2_1 + 2.57142857142857*y*psitilde_bs_2_1 - 0.551020408163265*psitilde_bs_2_0;
    const double psitilde_bs_3_0 = 1;
    const double psitilde_bs_3_1 = 4.5*y + 3.5;
    const double psitilde_bs_4_0 = 1;
    
    // Compute psitilde_cs
    const double psitilde_cs_00_0 = 1;
    const double psitilde_cs_00_1 = 2*z + 1;
    const double psitilde_cs_00_2 = 0.3125*psitilde_cs_00_1 + 1.875*z*psitilde_cs_00_1 - 0.5625*psitilde_cs_00_0;
    const double psitilde_cs_00_3 = 0.155555555555556*psitilde_cs_00_2 + 1.86666666666667*z*psitilde_cs_00_2 - 0.711111111111111*psitilde_cs_00_1;
    const double psitilde_cs_00_4 = 0.09375*psitilde_cs_00_3 + 1.875*z*psitilde_cs_00_3 - 0.78125*psitilde_cs_00_2;
    const double psitilde_cs_01_0 = 1;
    const double psitilde_cs_01_1 = 3*z + 2;
    const double psitilde_cs_01_2 = 0.777777777777778*psitilde_cs_01_1 + 2.33333333333333*z*psitilde_cs_01_1 - 0.555555555555556*psitilde_cs_01_0;
    const double psitilde_cs_01_3 = 0.428571428571429*psitilde_cs_01_2 + 2.14285714285714*z*psitilde_cs_01_2 - 0.714285714285714*psitilde_cs_01_1;
    const double psitilde_cs_02_0 = 1;
    const double psitilde_cs_02_1 = 4*z + 3;
    const double psitilde_cs_02_2 = 1.265625*psitilde_cs_02_1 + 2.8125*z*psitilde_cs_02_1 - 0.546875*psitilde_cs_02_0;
    const double psitilde_cs_03_0 = 1;
    const double psitilde_cs_03_1 = 5*z + 4;
    const double psitilde_cs_04_0 = 1;
    const double psitilde_cs_10_0 = 1;
    const double psitilde_cs_10_1 = 3*z + 2;
    const double psitilde_cs_10_2 = 0.777777777777778*psitilde_cs_10_1 + 2.33333333333333*z*psitilde_cs_10_1 - 0.555555555555556*psitilde_cs_10_0;
    const double psitilde_cs_10_3 = 0.428571428571429*psitilde_cs_10_2 + 2.14285714285714*z*psitilde_cs_10_2 - 0.714285714285714*psitilde_cs_10_1;
    const double psitilde_cs_11_0 = 1;
    const double psitilde_cs_11_1 = 4*z + 3;
    const double psitilde_cs_11_2 = 1.265625*psitilde_cs_11_1 + 2.8125*z*psitilde_cs_11_1 - 0.546875*psitilde_cs_11_0;
    const double psitilde_cs_12_0 = 1;
    const double psitilde_cs_12_1 = 5*z + 4;
    const double psitilde_cs_13_0 = 1;
    const double psitilde_cs_20_0 = 1;
    const double psitilde_cs_20_1 = 4*z + 3;
    const double psitilde_cs_20_2 = 1.265625*psitilde_cs_20_1 + 2.8125*z*psitilde_cs_20_1 - 0.546875*psitilde_cs_20_0;
    const double psitilde_cs_21_0 = 1;
    const double psitilde_cs_21_1 = 5*z + 4;
    const double psitilde_cs_22_0 = 1;
    const double psitilde_cs_30_0 = 1;
    const double psitilde_cs_30_1 = 5*z + 4;
    const double psitilde_cs_31_0 = 1;
    const double psitilde_cs_40_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.866025403784439*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_0;
    const double basisvalue1 = 2.73861278752583*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_0;
    const double basisvalue2 = 1.58113883008419*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_0;
    const double basisvalue3 = 1.11803398874989*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_1;
    const double basisvalue4 = 5.1234753829798*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_0;
    const double basisvalue5 = 3.96862696659689*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_0;
    const double basisvalue6 = 2.29128784747792*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_0;
    const double basisvalue7 = 3.24037034920393*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_1;
    const double basisvalue8 = 1.87082869338697*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_1;
    const double basisvalue9 = 1.3228756555323*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_2;
    const double basisvalue10 = 7.93725393319377*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_0;
    const double basisvalue11 = 6.70820393249937*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_0;
    const double basisvalue12 = 5.19615242270663*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_0;
    const double basisvalue13 = 3*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_0;
    const double basisvalue14 = 5.80947501931113*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_1;
    const double basisvalue15 = 4.5*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_1;
    const double basisvalue16 = 2.59807621135332*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_1;
    const double basisvalue17 = 3.67423461417477*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_2;
    const double basisvalue18 = 2.12132034355964*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_2;
    const double basisvalue19 = 1.5*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_3;
    const double basisvalue20 = 11.1242977306435*psitilde_a_4*scalings_y_4*psitilde_bs_4_0*scalings_z_4*psitilde_cs_40_0;
    const double basisvalue21 = 9.81070843517429*psitilde_a_3*scalings_y_3*psitilde_bs_3_1*scalings_z_4*psitilde_cs_31_0;
    const double basisvalue22 = 8.2915619758885*psitilde_a_2*scalings_y_2*psitilde_bs_2_2*scalings_z_4*psitilde_cs_22_0;
    const double basisvalue23 = 6.42261628933256*psitilde_a_1*scalings_y_1*psitilde_bs_1_3*scalings_z_4*psitilde_cs_13_0;
    const double basisvalue24 = 3.70809924354783*psitilde_a_0*scalings_y_0*psitilde_bs_0_4*scalings_z_4*psitilde_cs_04_0;
    const double basisvalue25 = 8.77496438739212*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_1;
    const double basisvalue26 = 7.41619848709566*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_1;
    const double basisvalue27 = 5.74456264653803*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_1;
    const double basisvalue28 = 3.3166247903554*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_1;
    const double basisvalue29 = 6.42261628933256*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_2;
    const double basisvalue30 = 4.9749371855331*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_2;
    const double basisvalue31 = 2.87228132326901*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_2;
    const double basisvalue32 = 4.06201920231798*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_3;
    const double basisvalue33 = 2.34520787991171*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_3;
    const double basisvalue34 = 1.6583123951777*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_4;
    
    // Table(s) of coefficients
    static const double coefficients0[35][35] = \
    {{-0.0137464349807054, -0.0144900147488139, -0.00836581391578938, -0.00591552374999942, 0, 0, 0, 0, 0, 0, -0.00671936840905293, -0.00567890279999946, -0.00439885919382572, -0.00253968253968254, -0.00491807409042212, -0.00380952380952381, -0.00219942959691286, -0.00311046316543896, -0.0017958267458706, -0.00126984126984129, 0.0136980289516341, 0.0120805260192622, 0.010209907964538, 0.00790856070259326, 0.00456600965054471, 0.0108051509532101, 0.00913201930108942, 0.0070736317340728, 0.00408396318581521, 0.00790856070259324, 0.00612594477872281, 0.0035368158670364, 0.00500181296677924, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807054, 0.0144900147488139, -0.00836581391578937, -0.00591552374999945, 0, 0, 0, 0, 0, 0, 0.00671936840905292, -0.00567890279999946, 0.00439885919382571, -0.00253968253968253, -0.00491807409042211, 0.0038095238095238, -0.00219942959691286, 0.00311046316543895, -0.00179582674587059, -0.00126984126984127, 0.0136980289516341, -0.0120805260192622, 0.010209907964538, -0.00790856070259325, 0.00456600965054471, -0.0108051509532101, 0.00913201930108942, -0.00707363173407281, 0.00408396318581522, 0.00790856070259325, -0.00612594477872282, 0.0035368158670364, -0.00500181296677924, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807054, 0, 0.0167316278315787, -0.00591552374999944, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0101587301587302, 0, 0, -0.00659828879073858, 0, 0.00359165349174119, -0.00126984126984127, 0, 0, 0, 0, 0.0228300482527235, 0, 0, 0, -0.0163358527432608, 0, 0, 0.0106104476011092, 0, -0.0057755961256123, 0.00204198159290761},
    {-0.0137464349807054, 0, 0, 0.0177465712499983, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0126984126984127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0306297238936141},
    {0.0439885919382572, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0, 0.0406349206349206, 0, 0, 0.00439885919382572, 0, -0.0143666139669648, 0.00761904761904762, 0, 0, 0, 0, 0, 0, 0, 0, 0.0367556686723369, 0, 0, -0.0424417904044368, 0, 0.0303218796594646, -0.0122518895574456},
    {-0.0329914439536929, 0, -0.0200779533978945, -0.0141972569999987, 0, 0, -0.00969857289937743, 0, 0.0712696645099798, -0.050395263067897, 0, 0, 0, 0, 0, 0, 0.0461880215351701, 0, 0.0107749604752236, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0495154221385096, 0, -0.0606437593189292, 0.0306297238936141},
    {0.0439885919382572, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0, 0.0359165349174119, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0505364660991076, -0.0408396318581521},
    {0.0439885919382572, 0.0231840235981022, -0.013385302265263, 0.0189296759999982, 0.0433733365754904, -0.0335968420452646, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484216, 0.0268774736362117, -0.0227156111999979, 0.0175954367753029, -0.0101587301587302, 0.00327871606028142, -0.00253968253968254, 0.00146628639794192, -0.0124418526617558, 0.00718330698348239, 0.00761904761904763, 0, 0, 0, 0, 0, 0.0243115896447228, -0.0205470434274512, 0.0159156714016638, -0.00918891716808423, -0.031634242810373, 0.0245037791148913, -0.0141472634681456, 0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.032991443953693, -0.0173880176985767, 0.0100389766989472, -0.0141972569999986, -0.00722888942924839, 0.00559947367421073, -0.00323285763312585, 0.0617213399848368, -0.03563483225499, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, -0.0266666666666667, 0.01539600717839, 0.00933138949631687, -0.00538748023761181, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, -0.0285877423007065, 0.0165051407128366, -0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, 0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0.0311046316543896, -0.017958267458706, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, -0.0335968420452646, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, 0, -0.0117302911835353, 0.0101587301587301, -0.0229510124219699, 0.00761904761904762, -0.0014662863979419, 0.0165891368823411, -0.00718330698348239, -0.00761904761904761, 0, 0.0241610520385245, -0.0357346778758831, 0.0355885231616696, -0.0228300482527235, -0.00270128773830253, -0.0114150241263618, 0.0159156714016638, -0.0112308987609918, 0.00395428035129663, 0.00306297238936141, -0.0035368158670364, -0.00375135972508442, 0.000721949515701537, 0.0020419815929076},
    {-0.0329914439536929, -0.0173880176985767, -0.0100389766989473, 0.0141972569999987, -0.00722888942924838, 0.0615942104163185, -0.0614242950293905, -0.00685792666498185, -0.00395942580611001, 0.00559947367421077, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042211, -0.0266666666666667, 0.0175954367753029, 0.00933138949631687, 0.0053874802376118, -0.00761904761904761, 0, 0, 0.0357346778758831, -0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108941, 0, 0.00408396318581522, 0.0013180934504322, 0.00714693557517662, -0.00471575448938186, -0.00250090648338961, -0.00144389903140308, 0.0020419815929076},
    {0.0439885919382572, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0.0293257279588381, 0.0101587301587301, 0, -0.0101587301587302, -0.0219942959691286, 0.00207364211029263, 0.017958267458706, -0.00761904761904761, 0, 0, 0, 0.0395428035129662, -0.0456600965054471, 0, 0, -0.017684079335182, 0.0142938711503532, 0, 0.00612594477872281, 0, -0.0012504532416948, -0.00360974757850769, 0.0020419815929076},
    {0.043988591938257, -0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0.0433733365754903, 0.0335968420452647, 0.0193971457987549, 0.0274317066599275, 0.01583770322444, 0.0111989473484216, -0.0268774736362117, -0.0227156111999979, -0.0175954367753029, -0.0101587301587302, 0.00327871606028141, 0.00253968253968254, 0.00146628639794192, 0.0124418526617558, 0.00718330698348239, 0.00761904761904762, 0, 0, 0, 0, 0, -0.0243115896447228, -0.0205470434274512, -0.0159156714016638, -0.00918891716808423, -0.031634242810373, -0.0245037791148913, -0.0141472634681456, -0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, 0.0173880176985767, 0.0100389766989472, -0.0141972569999987, -0.00722888942924838, -0.00559947367421076, -0.00323285763312582, -0.0617213399848368, -0.0356348322549899, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, 0.0266666666666667, 0.01539600717839, -0.00933138949631688, -0.00538748023761179, -0.019047619047619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, 0.0285877423007065, 0.0165051407128365, 0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382572, -0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, -0.0311046316543895, -0.017958267458706, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484215, -0.0268774736362117, 0, 0.0117302911835353, 0.0101587301587302, -0.0229510124219699, -0.00761904761904762, -0.00146628639794191, -0.0165891368823411, -0.00718330698348239, -0.00761904761904762, 0, -0.0241610520385245, -0.0357346778758831, -0.0355885231616696, -0.0228300482527235, 0.00270128773830253, -0.0114150241263618, -0.0159156714016638, -0.0112308987609918, 0.00395428035129663, -0.00306297238936141, -0.0035368158670364, 0.00375135972508442, 0.000721949515701537, 0.0020419815929076},
    {-0.0329914439536929, 0.0173880176985767, -0.0100389766989473, 0.0141972569999987, -0.00722888942924837, -0.0615942104163185, -0.0614242950293905, 0.00685792666498186, -0.00395942580610999, 0.00559947367421076, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042212, 0.0266666666666667, 0.0175954367753029, -0.00933138949631687, 0.0053874802376118, -0.00761904761904762, 0, 0, 0.0357346778758831, 0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108942, 0, 0.00408396318581522, 0.00131809345043221, -0.00714693557517662, -0.00471575448938187, 0.00250090648338962, -0.00144389903140308, 0.00204198159290761},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, -0.0293257279588381, 0.0101587301587301, 0, 0.0101587301587302, -0.0219942959691286, -0.00207364211029264, 0.017958267458706, -0.00761904761904762, 0, 0, 0, -0.0395428035129662, -0.0456600965054471, 0, 0, 0.017684079335182, 0.0142938711503532, 0, -0.00612594477872281, 0, 0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.0439885919382573, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0134387368181058, -0.0113578055999989, -0.0205280095711867, -0.0152380952380952, -0.00983614818084423, -0.0177777777777778, -0.0131965775814772, -0.0145154947720485, -0.0107749604752236, -0.00761904761904762, -0.0547921158065365, -0.0241610520385245, -0.00510495398226901, 0.00395428035129662, 0.00456600965054471, -0.0216103019064202, -0.00456600965054471, 0.0035368158670364, 0.00408396318581522, -0.00395428035129662, 0.00306297238936141, 0.0035368158670364, 0.00250090648338962, 0.00288779806280615, 0.00204198159290761},
    {-0.0329914439536929, 0, 0.0200779533978945, 0.0141972569999987, -0.0867466731509807, 0, 0.00969857289937743, 0, 0.00791885161221999, 0.00559947367421078, 0, 0.0340734167999968, 0, -0.0152380952380952, 0.0295084445425327, 0, -0.0131965775814772, 0, -0.0107749604752236, -0.00761904761904762, 0.0821881737098047, 0, -0.010209907964538, 0, 0.00456600965054471, 0, -0.00913201930108942, 0, 0.00408396318581521, -0.00790856070259325, 0, 0.0035368158670364, 0, 0.00288779806280615, 0.0020419815929076},
    {0.0439885919382571, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754904, -0.0335968420452646, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, -0.0134387368181059, -0.0113578055999989, 0.0205280095711867, -0.0152380952380952, -0.00983614818084423, 0.0177777777777778, -0.0131965775814772, 0.0145154947720485, -0.0107749604752236, -0.00761904761904762, -0.0547921158065365, 0.0241610520385245, -0.00510495398226901, -0.00395428035129662, 0.00456600965054471, 0.0216103019064202, -0.00456600965054471, -0.0035368158670364, 0.00408396318581521, -0.00395428035129662, -0.0030629723893614, 0.0035368158670364, -0.00250090648338962, 0.00288779806280615, 0.0020419815929076},
    {0.0439885919382573, 0.139104141588614, -0.0803118135915779, -0.0567890279999946, 0.0578311154339871, 0.0335968420452646, -0.0420271492306356, 0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, -0.0586514559176763, 0.0406349206349207, 0.0393445927233769, 0.00253968253968253, -0.0109971479845643, -0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, -0.053052238005546, 0.0367556686723369, -0.0105447476034577, -0.0245037791148912, 0.0235787724469093, 0.0175063453837273, 0, -0.0122518895574456},
    {0.0439885919382571, 0, 0.160623627183156, -0.0567890279999947, 0, 0.0783926314389508, 0.00969857289937743, -0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, 0.0586514559176763, -0.060952380952381, 0, 0.033015873015873, 0.0241937255660415, -0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, 0.053052238005546, -0.0551335030085054, 0, -0.0326717054865217, 0.0141472634681456, 0.00875317269186366, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382573, 0, 0, 0.170367083999984, 0, -0.0111989473484215, 0.00969857289937744, 0.0822951199797824, 0.0475131096733199, -0.0167984210226323, 0, 0, 0, 0, 0, 0.0533333333333333, -0.0461880215351701, 0.0435464843161454, 0.0251415744421884, -0.0825396825396825, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0571754846014129, -0.0495154221385096, -0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, 0.0578311154339871, -0.0335968420452646, -0.0420271492306356, -0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, 0.0586514559176763, 0.0406349206349206, 0.0393445927233769, -0.00253968253968253, -0.0109971479845643, 0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, 0.053052238005546, 0.0367556686723369, -0.0105447476034577, 0.0245037791148913, 0.0235787724469093, -0.0175063453837273, 0, -0.0122518895574456},
    {0.0439885919382571, 0, 0.160623627183156, -0.0567890279999947, 0, -0.0783926314389508, 0.00969857289937743, 0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, -0.0586514559176763, -0.060952380952381, 0, -0.033015873015873, 0.0241937255660415, 0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, -0.053052238005546, -0.0551335030085054, 0, 0.0326717054865217, 0.0141472634681456, -0.00875317269186366, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382574, 0, 0, 0.170367083999984, 0, 0.0111989473484216, 0.00969857289937746, -0.0822951199797824, 0.0475131096733199, -0.0167984210226323, 0, 0, 0, 0, 0, -0.0533333333333333, -0.0461880215351701, -0.0435464843161454, 0.0251415744421884, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.057175484601413, -0.0495154221385096, 0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754904, 0.0447957893936862, 0.0484928644968872, -0.0548634133198549, 0, -0.0167984210226323, 0.0806324209086351, 0.0227156111999978, -0.00586514559176761, -0.0101587301587302, -0.00327871606028142, 0.0304761904761905, 0.0271262983619253, 0.045620126426438, 0.0430998419008943, 0.0393650793650793, 0, 0, 0, 0, 0, 0.0729347689341683, 0.0205470434274512, -0.0053052238005546, -0.00918891716808422, 0.031634242810373, -0.00816792637163041, -0.0141472634681456, -0.00875317269186366, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754904, -0.0447957893936862, 0.0484928644968872, 0.0548634133198549, 0, -0.0167984210226323, -0.0806324209086351, 0.0227156111999979, 0.00586514559176762, -0.0101587301587302, -0.00327871606028142, -0.0304761904761905, 0.0271262983619253, -0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, -0.0729347689341683, 0.0205470434274512, 0.0053052238005546, -0.00918891716808422, 0.031634242810373, 0.00816792637163041, -0.0141472634681456, 0.00875317269186366, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0.0144577788584968, 0, -0.00323285763312579, 0, -0.0950262193466398, -0.0167984210226323, 0, 0, 0, 0, -0.0688530372659096, 0, 0.01539600717839, 0, -0.0502831488843767, -0.0825396825396825, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0738132332242036, 0, 0.0165051407128365, 0, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754904, -0.0447957893936862, -0.00969857289937743, 0.0548634133198549, 0.0316754064488799, 0.0391963157194754, 0.0806324209086352, 0, 0.0527863103259087, 0.060952380952381, 0.0229510124219699, 0.0101587301587302, 0.0168622935763319, -0.0124418526617558, -0.00718330698348239, -0.013968253968254, 0, 0.0724831561155734, 0.0357346778758831, -0.0118628410538899, -0.0228300482527235, -0.00810386321490759, 0.0114150241263618, -0.00530522380055459, -0.0112308987609918, -0.00395428035129662, -0.0010209907964538, -0.0035368158670364, 0.00125045324169481, 0.000721949515701534, 0.00204198159290761},
    {0.0439885919382572, 0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754904, 0.0447957893936862, -0.00969857289937744, -0.0548634133198549, 0.0316754064488799, 0.0391963157194754, -0.0806324209086351, 0, -0.0527863103259086, 0.060952380952381, 0.0229510124219699, -0.0101587301587302, 0.0168622935763319, 0.0124418526617558, -0.00718330698348239, -0.013968253968254, 0, -0.0724831561155734, 0.0357346778758831, 0.0118628410538899, -0.0228300482527235, 0.00810386321490759, 0.0114150241263618, 0.0053052238005546, -0.0112308987609918, -0.00395428035129663, 0.0010209907964538, -0.0035368158670364, -0.00125045324169481, 0.000721949515701532, 0.0020419815929076},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0.0144577788584968, 0, -0.0614242950293905, 0, -0.0633508128977598, 0.0391963157194754, 0, -0.0681468335999936, 0, -0.0914285714285714, 0.00983614818084423, 0, 0.0285925847598672, 0, 0.0143666139669648, -0.013968253968254, 0, 0, -0.0714693557517662, 0, 0.0456600965054471, 0, 0.0182640386021788, 0, 0.00408396318581519, -0.00263618690086442, 0, -0.00471575448938187, 0, -0.00144389903140307, 0.0020419815929076},
    {0.351908735506058, 0, 0, 0, -0.115662230867974, 0, -0.129314305325033, 0, 0, -0.134387368181059, 0, -0.0908624447999914, 0, 0.0406349206349207, -0.0786891854467539, 0, -0.0879771838765144, 0, 0, 0.0711111111111111, 0, 0, 0, 0, 0, 0, -0.0821881737098047, 0, 0.0367556686723369, 0.0210894952069153, 0, 0.0235787724469093, 0, 0, -0.0122518895574456}};
    
    // Interesting (new) part
    // Tables of derivatives of the polynomial base (transpose)
    static const double dmats0[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {6.32455532033676, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 11.2249721603218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.58257569495584, 0, 8.36660026534075, -1.18321595661992, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.74165738677394, 0, 0, 8.69482604771366, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.49909083394702, 0, -3.3466401061363, -2.36643191323985, 15.4919333848297, 0, 0.692820323027558, 0, 0.565685424949242, 0.400000000000006, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 4.89897948556635, 0, 0, 0, 14.1985914794391, 0, -0.828078671210817, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.60000000000001, 0, 8.76356092008266, -1.54919333848297, 0, 1.05385203468073e-14, 9.52470471983253, 0, -1.48131215963609, 0.261861468283189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 4.24264068711929, 0, 0, 0, 0, 0, 14.3427433120127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.11022302462516e-14, 0, 0},
    {3.11769145362397, 0, 3.16227766016838, 4.91934955049954, 0, 0, 0, 0, 10.690449676497, -2.41897262725906, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.54558441227158, 0, 0, 7.66811580507233, 0, 0, 0, 0, 0, 10.3691851174526, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 11.6057691494799, 0, 0, 0, -4.20458932936041, 0, -3.43303281162798, 0, 0, 19.6214168703486, 0, 0.6116777418412, 0, 0, 0.529728463363978, 0, 0.432521479156785, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.53137212479104, 0, 3.54562104171167, -2.50713268211203, 4.78713553878169, -1.29633448990283e-14, -5.5662674507549, 0, -1.04880884817015, 0.741619848709566, 0, 18.8034951158403, 0, 1.68183573174416, -0.603122387046457, 0, 0.701283781217661, 0, 0.132137494528679, -0.093435318430233, 0, 0, 0, 0, -1.35102366043011e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 2.59512887494071, 0, 0, 0, 10.0285307284481, 0, -0.767649473578739, 0, 0, 0, 0, 16.4130361329658, 0, 0, -1.26347611061158, 0, 0.0967147429123337, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.96647939483827, 0, 8.12403840463596, -1.64130361329658, 0, 0, 11.7728501222091, 0, -2.40312296813959, 0.485504156227608, 0, 0, 0, 10.2761860629321, 0, 0, -1.48323969741913, 0, 0.30276503540975, -0.06116777418412, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.05298244095218, 0, -1.58564993434419, 4.4848952846511, 4.28174419288838, 0, 0.191485421551267, 0, -3.75233260785875, -4.31161222746202, 0, 0, 0, 0, 18.8807171866294, 0, 0.844371341865036, 0, 1.18187368057056, 1.04463861754669, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 2.32115382989599, 0, 0, 0, 3.92428337406973, 0, 5.49285249860477, 1.10651505319526e-14, 0, 0, 0, 0, 0, 0, 17.3044631365565, 0, -1.73008591662714, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.65329983228432, 0, 4.15220619990513, 2.93605316083775, 0, 0, 2.63248931621764, 0, 9.82591326180785, -2.82261277137741, 0, 0, 0, 0, 0, 0, 11.6081867662439, 0, -3.09487177319465, 0.683876505540241, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 2.01017818278147, 0, 0, 0, 0, 0, 8.91928088068603, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16.8558564884489, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.29782505861521, 0, 1.49829835452879, 5.50917601898535, 0, 0, 0, 0, 6.64803945320939, 4.13676892548485, 0, 0, 0, 0, 0, 0, 0, 0, 12.5636136423842, -3.55352656109508, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87616630392938, 0, 0, 6.2283092998577, 0, 0, 0, 0, 1.26414611676556e-14, 11.0541524195338, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11.6057691494799, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    static const double dmats1[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.16227766016838, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.47722557505166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.95803989154981, 5.61248608016091, -1.08012344973464, -0.763762615825972, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.29128784747792, 7.24568837309472, 4.18330013267038, -0.59160797830996, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-2.64575131106459, 0, 9.66091783079296, 0.683130051063973, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87082869338697, 0, 0, 4.34741302385683, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.24037034920393, 0, 0, 7.52994023880668, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.74954541697351, 5.79655069847578, -1.67332005306815, -1.18321595661993, 7.74596669241484, -1.2, 0.346410161513782, -0.979795897113276, 0.282842712474624, 0.200000000000003, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.32379000772445, 2.44948974278318, 2.8284271247462, -0.999999999999997, 9.16515138991168, 7.09929573971954, -2.04939015319192, -0.414039335605406, -0.47809144373376, 0.1690308509457, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.80000000000001, -5.69209978830308, 4.38178046004133, -0.774596669241484, 0, 10.998181667894, 4.76235235991627, 0.962140470884735, -0.740656079818043, 0.130930734141594, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.19615242270664, 0, -3.16227766016838, -2.23606797749979, 0, 0, 13.7477270848675, 0, 0.53452248382485, 0.377964473009225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.01246117974981, 2.12132034355964, -0.408248290463865, 3.17542648054294, 0, 0, 0, 7.17137165600636, -1.38013111868471, -1.56144011671765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.55884572681199, 2.73861278752583, 1.58113883008419, 2.45967477524977, 0, 0, 0, 9.25820099772552, 5.34522483824848, -1.20948631362953, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-1.8, 0, 3.65148371670111, -2.84018778721878, 0, 0, 0, 0, 12.3442679969674, 1.39659449751034, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.27279220613579, 0, 0, 3.83405790253616, 0, 0, 0, 0, 0, 5.18459255872629, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.20454076850486, 0, 0, 6.6407830863536, 0, 0, 0, 0, 0, 8.97997772825746, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.56904651573303, 5.80288457473998, -2.01017818278147, -1.42141062443803, 8.14215222512715, -2.10229466468021, 0.728256234341424, -1.71651640581399, 0.594618725379072, 0.420458932936045, 9.81070843517429, -1.18450885369836, 0.305838870920601, -0.105945692672795, -1.02581475831037, 0.264864231681988, -0.0917516612761807, 0.216260739578392, -0.0749149177264403, -0.0529728463363971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.26568606239552, 3.07059789431495, 1.77281052085584, -1.25356634105601, 2.39356776939085, 6.30376871403131, -2.78313372537745, -0.908295106229242, -0.524404424085073, 0.370809924354785, 11.1242977306435, 9.40174755792013, -2.42752078113806, 0.840917865872083, -0.301561193523229, -0.794200206656968, 0.350641890608831, 0.114434427054264, 0.0660687472643388, -0.0467176592151161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.91485421551268, 1.29756443747035, 3.74574588632197, -1.05945692672795, -8.09173593712687, 5.01426536422408, 1.80936716113936, -0.383824736789367, -1.1080065755349, 0.313391585264002, 0, 12.7134831207354, 8.20651806648289, -2.84282124887606, 1.01946290306866, -0.631738055305789, -0.227958835180082, 0.0483573714561662, 0.139595707137601, -0.0394836284566123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741913, 7.03562363973515, 4.06201920231798, -0.820651806648291, 0, -6.79705818718656, 5.88642506110457, -2.08116553882675, -1.2015614840698, 0.242752078113807, 0, 0, 14.8323969741913, 5.13809303146605, 0, 0.856348838577677, -0.741619848709568, 0.262202212042541, 0.151382517704876, -0.03058388709206, 0, 0, 0, 0, 0, 0, 0, -1.07304327303254e-14, 0, 0, 0, 0, 0, 0, 0},
    {-3.42539535431072, 0, 9.38083151964686, 1.89521416591738, 0, 0, -3.3985290935933, 0, -2.77488738510233, -0.560611910581395, 0, 0, 0, 17.7988763690296, 0, 0, 0.428174419288839, 0, 0.349602949390051, 0.0706304617818617, 0, 0, 0, 0, -1.22900818059705e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.02649122047609, 2.74642624930239, -0.792824967172094, 2.24244764232555, 2.14087209644419, -0.331662479035539, 0.0957427107756354, 6.49923072370876, -1.87616630392937, -2.15580611373101, 0, 0, 0, 0, 9.44035859331468, -1.46249406456536, 0.422185670932519, -2.04706526287664, 0.59093684028528, 0.522319308773342, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.71269767715535, 1.16057691494799, 1.34011878852098, 1.89521416591737, 2.53311402559511, 1.96214168703486, -0.566421515598879, 2.74642624930239, 3.17129986868837, -1.82198870938952, 0, 0, 0, 0, 11.1699829238239, 8.65223156827827, -2.49768411251822, -0.86504295831357, -0.998865569685859, 0.441440386136645, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.32664991614216, -2.69693703815182, 2.07610309995257, 1.46802658041887, 0, 3.03973683071413, 1.31624465810882, -6.382117875081, 4.91295663090393, -1.4113063856887, 0, 0, 0, 0, 0, 13.4039795085887, 5.80409338312195, 2.01017818278147, -1.54743588659732, 0.341938252770122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.82970843102536, 0, -1.49829835452879, 4.23782770691181, 0, 0, 3.79967103839267, 0, -3.54562104171168, -4.07409060843206, 0, 0, 0, 0, 0, 0, 16.7549743857359, 0, 1.11676565710082, 0.987090711415303, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741914, 1.00508909139074, -0.193429485824667, 3.55615782880926, 0, 0, 0, 4.45964044034301, -0.858258202906997, 2.67027285925187, 0, 0, 0, 0, 0, 0, 0, 8.42792824422443, -1.62195554683794, -2.29379153190449, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.14891252930761, 1.29756443747036, 0.749149177264392, 2.75458800949268, 0, 0, 0, 5.75737105184054, 3.32401972660469, 2.06838446274242, 0, 0, 0, 0, 0, 0, 0, 10.8804085776374, 6.2818068211921, -1.77676328054754, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-1.32664991614217, 0, 1.73008591662714, -3.18072425757423, 0, 0, 0, 0, 7.67649473578739, -2.38836465270398, 0, 0, 0, 0, 0, 0, 0, 0, 14.5072114368499, 2.05162951662072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.93808315196469, 0, 0, 3.11415464992885, 0, 0, 0, 0, 0, 5.52707620976692, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.80288457473997, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.6248076809272, 0, 0, 5.39387407630364, 0, 0, 0, 0, 1.09477880811911e-14, 9.57317681262152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10.0508909139073, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    static const double dmats2[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.16227766016838, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.82574185835055, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.16397779494322, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.95803989154981, 5.61248608016091, -1.08012344973464, -0.763762615825972, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.29128784747792, 1.44913767461894, 4.18330013267038, -0.591607978309961, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.32287565553229, 0, 3.86436713231718, -0.341565025531985, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87082869338697, 7.09929573971954, 0, 4.34741302385683, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.08012344973464, 0, 7.09929573971954, 2.50998007960223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-3.81881307912987, 0, 0, 8.87411967464942, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.74954541697351, 5.79655069847578, -1.67332005306815, -1.18321595661993, 7.74596669241484, -1.2, 0.346410161513782, -0.979795897113276, 0.282842712474623, 0.200000000000002, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.32379000772445, 2.44948974278318, 2.82842712474619, -0.999999999999997, 1.30930734141596, 7.09929573971954, -2.04939015319193, -0.414039335605408, -0.47809144373376, 0.169030850945702, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.80000000000001, 0.632455532033676, 4.38178046004133, -0.774596669241484, 0, 3.1423376193983, 4.76235235991627, -0.106904496764967, -0.740656079818043, 0.130930734141594, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.03923048454133, 0, 3.16227766016838, -0.447213595499958, 0, 0, 5.89188303637179, 0, -0.534522483824848, 0.0755928946018432, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.01246117974981, 2.12132034355964, -0.408248290463862, 3.17542648054294, 9.07114735222145, 0, 0, 7.17137165600636, -1.38013111868471, -1.56144011671765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.55884572681199, 0.54772255750517, 1.58113883008419, 2.45967477524977, 0, 9.07114735222145, 0, 1.85164019954511, 5.34522483824848, -1.20948631362953, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.900000000000006, 0, 1.46059348668044, 1.42009389360938, 0, 0, 9.07114735222146, 0, 4.93770719878694, -0.69829724875518, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.27279220613579, -6.26099033699941, 0, 3.83405790253617, 0, 0, 0, 10.5830052442584, 0, 5.18459255872629, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.734846922834956, 0, -6.26099033699941, 2.21359436211787, 0, 0, 0, 0, 10.5830052442584, 2.99332590941915, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.7157676649773, 0, 0, -4.69574275274955, 0, 0, 0, 0, 1.02381519203602e-14, 12.69960629311, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.56904651573303, 5.80288457473998, -2.01017818278147, -1.42141062443803, 8.14215222512715, -2.10229466468021, 0.728256234341424, -1.71651640581399, 0.594618725379071, 0.420458932936045, 9.81070843517429, -1.18450885369836, 0.305838870920601, -0.105945692672795, -1.02581475831037, 0.264864231681988, -0.0917516612761806, 0.216260739578392, -0.0749149177264403, -0.0529728463363971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.26568606239552, 3.07059789431495, 1.77281052085584, -1.25356634105601, 2.39356776939084, 6.30376871403131, -2.78313372537745, -0.908295106229243, -0.524404424085072, 0.370809924354783, 1.23603308118261, 9.40174755792013, -2.42752078113806, 0.840917865872083, -0.301561193523228, -0.794200206656968, 0.350641890608832, 0.114434427054263, 0.0660687472643389, -0.0467176592151161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.91485421551268, 1.29756443747036, 3.74574588632197, -1.05945692672795, 0.404586796856345, 5.01426536422408, 1.80936716113936, -0.383824736789367, -1.1080065755349, 0.313391585264004, 0, 2.82521847127454, 8.2065180664829, -2.84282124887606, -0.0509731451534337, -0.631738055305789, -0.227958835180083, 0.0483573714561674, 0.139595707137602, -0.0394836284566113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741913, 0.335029697130247, 4.06201920231798, -0.820651806648289, 0, 1.69926454679665, 5.88642506110457, -0.0991031208965142, -1.2015614840698, 0.242752078113805, 0, 0, 4.94413232473044, 5.13809303146605, 0, -0.21408720964442, -0.741619848709568, 0.012485819621074, 0.151382517704875, -0.0305838870920598, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.856348838577676, 0, 2.68023757704196, -0.473803541479343, 0, 0, 5.09779364038993, 0, -0.792824967172093, 0.140152977645346, 0, 0, 0, 7.91061171956871, 0, 0, -0.642261628933256, 0, 0.0998865569685856, -0.0176576154454656, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.02649122047609, 2.74642624930238, -0.792824967172095, 2.24244764232555, 2.14087209644419, -0.331662479035541, 0.0957427107756347, 6.49923072370876, -1.87616630392937, -2.15580611373101, 11.0554159678513, 0, 0, 0, 9.44035859331468, -1.46249406456536, 0.422185670932518, -2.04706526287664, 0.59093684028528, 0.522319308773342, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.71269767715535, 1.16057691494799, 1.34011878852098, 1.89521416591737, 0.361873432227872, 1.96214168703486, -0.566421515598874, 2.74642624930239, 3.17129986868837, -1.82198870938952, 0, 11.0554159678513, 0, 0, 1.59571184626056, 8.65223156827827, -2.49768411251822, -0.865042958313571, -0.99886556968586, 0.441440386136643, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.32664991614216, 0.299659670905759, 2.07610309995256, 1.46802658041887, 0, 0.868496237346896, 1.31624465810882, 0.70912420834234, 4.91295663090392, -1.41130638568871, 0, 0, 11.0554159678513, 0, 0, 3.82970843102535, 5.80409338312195, -0.223353131420162, -1.54743588659732, 0.341938252770121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.765941686205069, 0, 1.49829835452879, 0.847565541382364, 0, 0, 1.62843044502543, 0, 3.54562104171167, -0.814818121686416, 0, 0, 0, 11.0554159678513, 0, 0, 7.18070330817254, 0, -1.11676565710082, 0.197418142283061, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741913, 1.00508909139074, -0.193429485824669, 3.55615782880926, -8.46157280212812, 0, 0, 4.45964044034301, -0.858258202906995, 2.67027285925187, 0, 0, 0, 0, 12.4373429638328, 0, 0, 8.42792824422443, -1.62195554683794, -2.29379153190448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.1489125293076, 0.25951288749407, 0.749149177264392, 2.75458800949268, 0, -8.46157280212812, 0, 1.15147421036811, 3.3240197266047, 2.06838446274242, 0, 0, 0, 0, 0, 12.4373429638327, 0, 2.17608171552749, 6.28180682119209, -1.77676328054754, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.663324958071074, 0, 0.692034366650854, 1.59036212878711, 0, 0, -8.46157280212813, 0, 3.07059789431495, 1.19418232635198, 0, 0, 0, 0, 0, 0, 12.4373429638327, 0, 5.80288457473997, -1.02581475831036, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.938083151964692, 7.62808987244125, 0, 3.11415464992885, 0, 0, 0, -7.5213980463361, 0, 5.52707620976692, 0, 0, 0, 0, 0, 0, 0, 14.2141062443803, 0, 5.80288457473997, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.541602560309066, 0, 7.62808987244125, 1.79795802543454, 0, 0, 0, 0, -7.5213980463361, 3.1910589375405, 0, 0, 0, 0, 0, 0, 0, 0, 14.2141062443803, 3.35029697130245, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-5.36159180343549, 0, 0, 8.8994381845148, 0, 0, 0, 0, 0, -5.26497863243526, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16.583123951777, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    // Compute reference derivatives
    // Declare pointer to array of derivatives on FIAT element
    double *derivatives = new double [num_derivatives];
    
    // Declare coefficients
    double coeff0_0 = 0;
    double coeff0_1 = 0;
    double coeff0_2 = 0;
    double coeff0_3 = 0;
    double coeff0_4 = 0;
    double coeff0_5 = 0;
    double coeff0_6 = 0;
    double coeff0_7 = 0;
    double coeff0_8 = 0;
    double coeff0_9 = 0;
    double coeff0_10 = 0;
    double coeff0_11 = 0;
    double coeff0_12 = 0;
    double coeff0_13 = 0;
    double coeff0_14 = 0;
    double coeff0_15 = 0;
    double coeff0_16 = 0;
    double coeff0_17 = 0;
    double coeff0_18 = 0;
    double coeff0_19 = 0;
    double coeff0_20 = 0;
    double coeff0_21 = 0;
    double coeff0_22 = 0;
    double coeff0_23 = 0;
    double coeff0_24 = 0;
    double coeff0_25 = 0;
    double coeff0_26 = 0;
    double coeff0_27 = 0;
    double coeff0_28 = 0;
    double coeff0_29 = 0;
    double coeff0_30 = 0;
    double coeff0_31 = 0;
    double coeff0_32 = 0;
    double coeff0_33 = 0;
    double coeff0_34 = 0;
    
    // Declare new coefficients
    double new_coeff0_0 = 0;
    double new_coeff0_1 = 0;
    double new_coeff0_2 = 0;
    double new_coeff0_3 = 0;
    double new_coeff0_4 = 0;
    double new_coeff0_5 = 0;
    double new_coeff0_6 = 0;
    double new_coeff0_7 = 0;
    double new_coeff0_8 = 0;
    double new_coeff0_9 = 0;
    double new_coeff0_10 = 0;
    double new_coeff0_11 = 0;
    double new_coeff0_12 = 0;
    double new_coeff0_13 = 0;
    double new_coeff0_14 = 0;
    double new_coeff0_15 = 0;
    double new_coeff0_16 = 0;
    double new_coeff0_17 = 0;
    double new_coeff0_18 = 0;
    double new_coeff0_19 = 0;
    double new_coeff0_20 = 0;
    double new_coeff0_21 = 0;
    double new_coeff0_22 = 0;
    double new_coeff0_23 = 0;
    double new_coeff0_24 = 0;
    double new_coeff0_25 = 0;
    double new_coeff0_26 = 0;
    double new_coeff0_27 = 0;
    double new_coeff0_28 = 0;
    double new_coeff0_29 = 0;
    double new_coeff0_30 = 0;
    double new_coeff0_31 = 0;
    double new_coeff0_32 = 0;
    double new_coeff0_33 = 0;
    double new_coeff0_34 = 0;
    
    // Loop possible derivatives
    for (unsigned int deriv_num = 0; deriv_num < num_derivatives; deriv_num++)
    {
      // Get values from coefficients array
      new_coeff0_0 = coefficients0[dof][0];
      new_coeff0_1 = coefficients0[dof][1];
      new_coeff0_2 = coefficients0[dof][2];
      new_coeff0_3 = coefficients0[dof][3];
      new_coeff0_4 = coefficients0[dof][4];
      new_coeff0_5 = coefficients0[dof][5];
      new_coeff0_6 = coefficients0[dof][6];
      new_coeff0_7 = coefficients0[dof][7];
      new_coeff0_8 = coefficients0[dof][8];
      new_coeff0_9 = coefficients0[dof][9];
      new_coeff0_10 = coefficients0[dof][10];
      new_coeff0_11 = coefficients0[dof][11];
      new_coeff0_12 = coefficients0[dof][12];
      new_coeff0_13 = coefficients0[dof][13];
      new_coeff0_14 = coefficients0[dof][14];
      new_coeff0_15 = coefficients0[dof][15];
      new_coeff0_16 = coefficients0[dof][16];
      new_coeff0_17 = coefficients0[dof][17];
      new_coeff0_18 = coefficients0[dof][18];
      new_coeff0_19 = coefficients0[dof][19];
      new_coeff0_20 = coefficients0[dof][20];
      new_coeff0_21 = coefficients0[dof][21];
      new_coeff0_22 = coefficients0[dof][22];
      new_coeff0_23 = coefficients0[dof][23];
      new_coeff0_24 = coefficients0[dof][24];
      new_coeff0_25 = coefficients0[dof][25];
      new_coeff0_26 = coefficients0[dof][26];
      new_coeff0_27 = coefficients0[dof][27];
      new_coeff0_28 = coefficients0[dof][28];
      new_coeff0_29 = coefficients0[dof][29];
      new_coeff0_30 = coefficients0[dof][30];
      new_coeff0_31 = coefficients0[dof][31];
      new_coeff0_32 = coefficients0[dof][32];
      new_coeff0_33 = coefficients0[dof][33];
      new_coeff0_34 = coefficients0[dof][34];
    
      // Loop derivative order
      for (unsigned int j = 0; j < n; j++)
      {
        // Update old coefficients
        coeff0_0 = new_coeff0_0;
        coeff0_1 = new_coeff0_1;
        coeff0_2 = new_coeff0_2;
        coeff0_3 = new_coeff0_3;
        coeff0_4 = new_coeff0_4;
        coeff0_5 = new_coeff0_5;
        coeff0_6 = new_coeff0_6;
        coeff0_7 = new_coeff0_7;
        coeff0_8 = new_coeff0_8;
        coeff0_9 = new_coeff0_9;
        coeff0_10 = new_coeff0_10;
        coeff0_11 = new_coeff0_11;
        coeff0_12 = new_coeff0_12;
        coeff0_13 = new_coeff0_13;
        coeff0_14 = new_coeff0_14;
        coeff0_15 = new_coeff0_15;
        coeff0_16 = new_coeff0_16;
        coeff0_17 = new_coeff0_17;
        coeff0_18 = new_coeff0_18;
        coeff0_19 = new_coeff0_19;
        coeff0_20 = new_coeff0_20;
        coeff0_21 = new_coeff0_21;
        coeff0_22 = new_coeff0_22;
        coeff0_23 = new_coeff0_23;
        coeff0_24 = new_coeff0_24;
        coeff0_25 = new_coeff0_25;
        coeff0_26 = new_coeff0_26;
        coeff0_27 = new_coeff0_27;
        coeff0_28 = new_coeff0_28;
        coeff0_29 = new_coeff0_29;
        coeff0_30 = new_coeff0_30;
        coeff0_31 = new_coeff0_31;
        coeff0_32 = new_coeff0_32;
        coeff0_33 = new_coeff0_33;
        coeff0_34 = new_coeff0_34;
    
        if(combinations[deriv_num][j] == 0)
        {
          new_coeff0_0 = coeff0_0*dmats0[0][0] + coeff0_1*dmats0[1][0] + coeff0_2*dmats0[2][0] + coeff0_3*dmats0[3][0] + coeff0_4*dmats0[4][0] + coeff0_5*dmats0[5][0] + coeff0_6*dmats0[6][0] + coeff0_7*dmats0[7][0] + coeff0_8*dmats0[8][0] + coeff0_9*dmats0[9][0] + coeff0_10*dmats0[10][0] + coeff0_11*dmats0[11][0] + coeff0_12*dmats0[12][0] + coeff0_13*dmats0[13][0] + coeff0_14*dmats0[14][0] + coeff0_15*dmats0[15][0] + coeff0_16*dmats0[16][0] + coeff0_17*dmats0[17][0] + coeff0_18*dmats0[18][0] + coeff0_19*dmats0[19][0] + coeff0_20*dmats0[20][0] + coeff0_21*dmats0[21][0] + coeff0_22*dmats0[22][0] + coeff0_23*dmats0[23][0] + coeff0_24*dmats0[24][0] + coeff0_25*dmats0[25][0] + coeff0_26*dmats0[26][0] + coeff0_27*dmats0[27][0] + coeff0_28*dmats0[28][0] + coeff0_29*dmats0[29][0] + coeff0_30*dmats0[30][0] + coeff0_31*dmats0[31][0] + coeff0_32*dmats0[32][0] + coeff0_33*dmats0[33][0] + coeff0_34*dmats0[34][0];
          new_coeff0_1 = coeff0_0*dmats0[0][1] + coeff0_1*dmats0[1][1] + coeff0_2*dmats0[2][1] + coeff0_3*dmats0[3][1] + coeff0_4*dmats0[4][1] + coeff0_5*dmats0[5][1] + coeff0_6*dmats0[6][1] + coeff0_7*dmats0[7][1] + coeff0_8*dmats0[8][1] + coeff0_9*dmats0[9][1] + coeff0_10*dmats0[10][1] + coeff0_11*dmats0[11][1] + coeff0_12*dmats0[12][1] + coeff0_13*dmats0[13][1] + coeff0_14*dmats0[14][1] + coeff0_15*dmats0[15][1] + coeff0_16*dmats0[16][1] + coeff0_17*dmats0[17][1] + coeff0_18*dmats0[18][1] + coeff0_19*dmats0[19][1] + coeff0_20*dmats0[20][1] + coeff0_21*dmats0[21][1] + coeff0_22*dmats0[22][1] + coeff0_23*dmats0[23][1] + coeff0_24*dmats0[24][1] + coeff0_25*dmats0[25][1] + coeff0_26*dmats0[26][1] + coeff0_27*dmats0[27][1] + coeff0_28*dmats0[28][1] + coeff0_29*dmats0[29][1] + coeff0_30*dmats0[30][1] + coeff0_31*dmats0[31][1] + coeff0_32*dmats0[32][1] + coeff0_33*dmats0[33][1] + coeff0_34*dmats0[34][1];
          new_coeff0_2 = coeff0_0*dmats0[0][2] + coeff0_1*dmats0[1][2] + coeff0_2*dmats0[2][2] + coeff0_3*dmats0[3][2] + coeff0_4*dmats0[4][2] + coeff0_5*dmats0[5][2] + coeff0_6*dmats0[6][2] + coeff0_7*dmats0[7][2] + coeff0_8*dmats0[8][2] + coeff0_9*dmats0[9][2] + coeff0_10*dmats0[10][2] + coeff0_11*dmats0[11][2] + coeff0_12*dmats0[12][2] + coeff0_13*dmats0[13][2] + coeff0_14*dmats0[14][2] + coeff0_15*dmats0[15][2] + coeff0_16*dmats0[16][2] + coeff0_17*dmats0[17][2] + coeff0_18*dmats0[18][2] + coeff0_19*dmats0[19][2] + coeff0_20*dmats0[20][2] + coeff0_21*dmats0[21][2] + coeff0_22*dmats0[22][2] + coeff0_23*dmats0[23][2] + coeff0_24*dmats0[24][2] + coeff0_25*dmats0[25][2] + coeff0_26*dmats0[26][2] + coeff0_27*dmats0[27][2] + coeff0_28*dmats0[28][2] + coeff0_29*dmats0[29][2] + coeff0_30*dmats0[30][2] + coeff0_31*dmats0[31][2] + coeff0_32*dmats0[32][2] + coeff0_33*dmats0[33][2] + coeff0_34*dmats0[34][2];
          new_coeff0_3 = coeff0_0*dmats0[0][3] + coeff0_1*dmats0[1][3] + coeff0_2*dmats0[2][3] + coeff0_3*dmats0[3][3] + coeff0_4*dmats0[4][3] + coeff0_5*dmats0[5][3] + coeff0_6*dmats0[6][3] + coeff0_7*dmats0[7][3] + coeff0_8*dmats0[8][3] + coeff0_9*dmats0[9][3] + coeff0_10*dmats0[10][3] + coeff0_11*dmats0[11][3] + coeff0_12*dmats0[12][3] + coeff0_13*dmats0[13][3] + coeff0_14*dmats0[14][3] + coeff0_15*dmats0[15][3] + coeff0_16*dmats0[16][3] + coeff0_17*dmats0[17][3] + coeff0_18*dmats0[18][3] + coeff0_19*dmats0[19][3] + coeff0_20*dmats0[20][3] + coeff0_21*dmats0[21][3] + coeff0_22*dmats0[22][3] + coeff0_23*dmats0[23][3] + coeff0_24*dmats0[24][3] + coeff0_25*dmats0[25][3] + coeff0_26*dmats0[26][3] + coeff0_27*dmats0[27][3] + coeff0_28*dmats0[28][3] + coeff0_29*dmats0[29][3] + coeff0_30*dmats0[30][3] + coeff0_31*dmats0[31][3] + coeff0_32*dmats0[32][3] + coeff0_33*dmats0[33][3] + coeff0_34*dmats0[34][3];
          new_coeff0_4 = coeff0_0*dmats0[0][4] + coeff0_1*dmats0[1][4] + coeff0_2*dmats0[2][4] + coeff0_3*dmats0[3][4] + coeff0_4*dmats0[4][4] + coeff0_5*dmats0[5][4] + coeff0_6*dmats0[6][4] + coeff0_7*dmats0[7][4] + coeff0_8*dmats0[8][4] + coeff0_9*dmats0[9][4] + coeff0_10*dmats0[10][4] + coeff0_11*dmats0[11][4] + coeff0_12*dmats0[12][4] + coeff0_13*dmats0[13][4] + coeff0_14*dmats0[14][4] + coeff0_15*dmats0[15][4] + coeff0_16*dmats0[16][4] + coeff0_17*dmats0[17][4] + coeff0_18*dmats0[18][4] + coeff0_19*dmats0[19][4] + coeff0_20*dmats0[20][4] + coeff0_21*dmats0[21][4] + coeff0_22*dmats0[22][4] + coeff0_23*dmats0[23][4] + coeff0_24*dmats0[24][4] + coeff0_25*dmats0[25][4] + coeff0_26*dmats0[26][4] + coeff0_27*dmats0[27][4] + coeff0_28*dmats0[28][4] + coeff0_29*dmats0[29][4] + coeff0_30*dmats0[30][4] + coeff0_31*dmats0[31][4] + coeff0_32*dmats0[32][4] + coeff0_33*dmats0[33][4] + coeff0_34*dmats0[34][4];
          new_coeff0_5 = coeff0_0*dmats0[0][5] + coeff0_1*dmats0[1][5] + coeff0_2*dmats0[2][5] + coeff0_3*dmats0[3][5] + coeff0_4*dmats0[4][5] + coeff0_5*dmats0[5][5] + coeff0_6*dmats0[6][5] + coeff0_7*dmats0[7][5] + coeff0_8*dmats0[8][5] + coeff0_9*dmats0[9][5] + coeff0_10*dmats0[10][5] + coeff0_11*dmats0[11][5] + coeff0_12*dmats0[12][5] + coeff0_13*dmats0[13][5] + coeff0_14*dmats0[14][5] + coeff0_15*dmats0[15][5] + coeff0_16*dmats0[16][5] + coeff0_17*dmats0[17][5] + coeff0_18*dmats0[18][5] + coeff0_19*dmats0[19][5] + coeff0_20*dmats0[20][5] + coeff0_21*dmats0[21][5] + coeff0_22*dmats0[22][5] + coeff0_23*dmats0[23][5] + coeff0_24*dmats0[24][5] + coeff0_25*dmats0[25][5] + coeff0_26*dmats0[26][5] + coeff0_27*dmats0[27][5] + coeff0_28*dmats0[28][5] + coeff0_29*dmats0[29][5] + coeff0_30*dmats0[30][5] + coeff0_31*dmats0[31][5] + coeff0_32*dmats0[32][5] + coeff0_33*dmats0[33][5] + coeff0_34*dmats0[34][5];
          new_coeff0_6 = coeff0_0*dmats0[0][6] + coeff0_1*dmats0[1][6] + coeff0_2*dmats0[2][6] + coeff0_3*dmats0[3][6] + coeff0_4*dmats0[4][6] + coeff0_5*dmats0[5][6] + coeff0_6*dmats0[6][6] + coeff0_7*dmats0[7][6] + coeff0_8*dmats0[8][6] + coeff0_9*dmats0[9][6] + coeff0_10*dmats0[10][6] + coeff0_11*dmats0[11][6] + coeff0_12*dmats0[12][6] + coeff0_13*dmats0[13][6] + coeff0_14*dmats0[14][6] + coeff0_15*dmats0[15][6] + coeff0_16*dmats0[16][6] + coeff0_17*dmats0[17][6] + coeff0_18*dmats0[18][6] + coeff0_19*dmats0[19][6] + coeff0_20*dmats0[20][6] + coeff0_21*dmats0[21][6] + coeff0_22*dmats0[22][6] + coeff0_23*dmats0[23][6] + coeff0_24*dmats0[24][6] + coeff0_25*dmats0[25][6] + coeff0_26*dmats0[26][6] + coeff0_27*dmats0[27][6] + coeff0_28*dmats0[28][6] + coeff0_29*dmats0[29][6] + coeff0_30*dmats0[30][6] + coeff0_31*dmats0[31][6] + coeff0_32*dmats0[32][6] + coeff0_33*dmats0[33][6] + coeff0_34*dmats0[34][6];
          new_coeff0_7 = coeff0_0*dmats0[0][7] + coeff0_1*dmats0[1][7] + coeff0_2*dmats0[2][7] + coeff0_3*dmats0[3][7] + coeff0_4*dmats0[4][7] + coeff0_5*dmats0[5][7] + coeff0_6*dmats0[6][7] + coeff0_7*dmats0[7][7] + coeff0_8*dmats0[8][7] + coeff0_9*dmats0[9][7] + coeff0_10*dmats0[10][7] + coeff0_11*dmats0[11][7] + coeff0_12*dmats0[12][7] + coeff0_13*dmats0[13][7] + coeff0_14*dmats0[14][7] + coeff0_15*dmats0[15][7] + coeff0_16*dmats0[16][7] + coeff0_17*dmats0[17][7] + coeff0_18*dmats0[18][7] + coeff0_19*dmats0[19][7] + coeff0_20*dmats0[20][7] + coeff0_21*dmats0[21][7] + coeff0_22*dmats0[22][7] + coeff0_23*dmats0[23][7] + coeff0_24*dmats0[24][7] + coeff0_25*dmats0[25][7] + coeff0_26*dmats0[26][7] + coeff0_27*dmats0[27][7] + coeff0_28*dmats0[28][7] + coeff0_29*dmats0[29][7] + coeff0_30*dmats0[30][7] + coeff0_31*dmats0[31][7] + coeff0_32*dmats0[32][7] + coeff0_33*dmats0[33][7] + coeff0_34*dmats0[34][7];
          new_coeff0_8 = coeff0_0*dmats0[0][8] + coeff0_1*dmats0[1][8] + coeff0_2*dmats0[2][8] + coeff0_3*dmats0[3][8] + coeff0_4*dmats0[4][8] + coeff0_5*dmats0[5][8] + coeff0_6*dmats0[6][8] + coeff0_7*dmats0[7][8] + coeff0_8*dmats0[8][8] + coeff0_9*dmats0[9][8] + coeff0_10*dmats0[10][8] + coeff0_11*dmats0[11][8] + coeff0_12*dmats0[12][8] + coeff0_13*dmats0[13][8] + coeff0_14*dmats0[14][8] + coeff0_15*dmats0[15][8] + coeff0_16*dmats0[16][8] + coeff0_17*dmats0[17][8] + coeff0_18*dmats0[18][8] + coeff0_19*dmats0[19][8] + coeff0_20*dmats0[20][8] + coeff0_21*dmats0[21][8] + coeff0_22*dmats0[22][8] + coeff0_23*dmats0[23][8] + coeff0_24*dmats0[24][8] + coeff0_25*dmats0[25][8] + coeff0_26*dmats0[26][8] + coeff0_27*dmats0[27][8] + coeff0_28*dmats0[28][8] + coeff0_29*dmats0[29][8] + coeff0_30*dmats0[30][8] + coeff0_31*dmats0[31][8] + coeff0_32*dmats0[32][8] + coeff0_33*dmats0[33][8] + coeff0_34*dmats0[34][8];
          new_coeff0_9 = coeff0_0*dmats0[0][9] + coeff0_1*dmats0[1][9] + coeff0_2*dmats0[2][9] + coeff0_3*dmats0[3][9] + coeff0_4*dmats0[4][9] + coeff0_5*dmats0[5][9] + coeff0_6*dmats0[6][9] + coeff0_7*dmats0[7][9] + coeff0_8*dmats0[8][9] + coeff0_9*dmats0[9][9] + coeff0_10*dmats0[10][9] + coeff0_11*dmats0[11][9] + coeff0_12*dmats0[12][9] + coeff0_13*dmats0[13][9] + coeff0_14*dmats0[14][9] + coeff0_15*dmats0[15][9] + coeff0_16*dmats0[16][9] + coeff0_17*dmats0[17][9] + coeff0_18*dmats0[18][9] + coeff0_19*dmats0[19][9] + coeff0_20*dmats0[20][9] + coeff0_21*dmats0[21][9] + coeff0_22*dmats0[22][9] + coeff0_23*dmats0[23][9] + coeff0_24*dmats0[24][9] + coeff0_25*dmats0[25][9] + coeff0_26*dmats0[26][9] + coeff0_27*dmats0[27][9] + coeff0_28*dmats0[28][9] + coeff0_29*dmats0[29][9] + coeff0_30*dmats0[30][9] + coeff0_31*dmats0[31][9] + coeff0_32*dmats0[32][9] + coeff0_33*dmats0[33][9] + coeff0_34*dmats0[34][9];
          new_coeff0_10 = coeff0_0*dmats0[0][10] + coeff0_1*dmats0[1][10] + coeff0_2*dmats0[2][10] + coeff0_3*dmats0[3][10] + coeff0_4*dmats0[4][10] + coeff0_5*dmats0[5][10] + coeff0_6*dmats0[6][10] + coeff0_7*dmats0[7][10] + coeff0_8*dmats0[8][10] + coeff0_9*dmats0[9][10] + coeff0_10*dmats0[10][10] + coeff0_11*dmats0[11][10] + coeff0_12*dmats0[12][10] + coeff0_13*dmats0[13][10] + coeff0_14*dmats0[14][10] + coeff0_15*dmats0[15][10] + coeff0_16*dmats0[16][10] + coeff0_17*dmats0[17][10] + coeff0_18*dmats0[18][10] + coeff0_19*dmats0[19][10] + coeff0_20*dmats0[20][10] + coeff0_21*dmats0[21][10] + coeff0_22*dmats0[22][10] + coeff0_23*dmats0[23][10] + coeff0_24*dmats0[24][10] + coeff0_25*dmats0[25][10] + coeff0_26*dmats0[26][10] + coeff0_27*dmats0[27][10] + coeff0_28*dmats0[28][10] + coeff0_29*dmats0[29][10] + coeff0_30*dmats0[30][10] + coeff0_31*dmats0[31][10] + coeff0_32*dmats0[32][10] + coeff0_33*dmats0[33][10] + coeff0_34*dmats0[34][10];
          new_coeff0_11 = coeff0_0*dmats0[0][11] + coeff0_1*dmats0[1][11] + coeff0_2*dmats0[2][11] + coeff0_3*dmats0[3][11] + coeff0_4*dmats0[4][11] + coeff0_5*dmats0[5][11] + coeff0_6*dmats0[6][11] + coeff0_7*dmats0[7][11] + coeff0_8*dmats0[8][11] + coeff0_9*dmats0[9][11] + coeff0_10*dmats0[10][11] + coeff0_11*dmats0[11][11] + coeff0_12*dmats0[12][11] + coeff0_13*dmats0[13][11] + coeff0_14*dmats0[14][11] + coeff0_15*dmats0[15][11] + coeff0_16*dmats0[16][11] + coeff0_17*dmats0[17][11] + coeff0_18*dmats0[18][11] + coeff0_19*dmats0[19][11] + coeff0_20*dmats0[20][11] + coeff0_21*dmats0[21][11] + coeff0_22*dmats0[22][11] + coeff0_23*dmats0[23][11] + coeff0_24*dmats0[24][11] + coeff0_25*dmats0[25][11] + coeff0_26*dmats0[26][11] + coeff0_27*dmats0[27][11] + coeff0_28*dmats0[28][11] + coeff0_29*dmats0[29][11] + coeff0_30*dmats0[30][11] + coeff0_31*dmats0[31][11] + coeff0_32*dmats0[32][11] + coeff0_33*dmats0[33][11] + coeff0_34*dmats0[34][11];
          new_coeff0_12 = coeff0_0*dmats0[0][12] + coeff0_1*dmats0[1][12] + coeff0_2*dmats0[2][12] + coeff0_3*dmats0[3][12] + coeff0_4*dmats0[4][12] + coeff0_5*dmats0[5][12] + coeff0_6*dmats0[6][12] + coeff0_7*dmats0[7][12] + coeff0_8*dmats0[8][12] + coeff0_9*dmats0[9][12] + coeff0_10*dmats0[10][12] + coeff0_11*dmats0[11][12] + coeff0_12*dmats0[12][12] + coeff0_13*dmats0[13][12] + coeff0_14*dmats0[14][12] + coeff0_15*dmats0[15][12] + coeff0_16*dmats0[16][12] + coeff0_17*dmats0[17][12] + coeff0_18*dmats0[18][12] + coeff0_19*dmats0[19][12] + coeff0_20*dmats0[20][12] + coeff0_21*dmats0[21][12] + coeff0_22*dmats0[22][12] + coeff0_23*dmats0[23][12] + coeff0_24*dmats0[24][12] + coeff0_25*dmats0[25][12] + coeff0_26*dmats0[26][12] + coeff0_27*dmats0[27][12] + coeff0_28*dmats0[28][12] + coeff0_29*dmats0[29][12] + coeff0_30*dmats0[30][12] + coeff0_31*dmats0[31][12] + coeff0_32*dmats0[32][12] + coeff0_33*dmats0[33][12] + coeff0_34*dmats0[34][12];
          new_coeff0_13 = coeff0_0*dmats0[0][13] + coeff0_1*dmats0[1][13] + coeff0_2*dmats0[2][13] + coeff0_3*dmats0[3][13] + coeff0_4*dmats0[4][13] + coeff0_5*dmats0[5][13] + coeff0_6*dmats0[6][13] + coeff0_7*dmats0[7][13] + coeff0_8*dmats0[8][13] + coeff0_9*dmats0[9][13] + coeff0_10*dmats0[10][13] + coeff0_11*dmats0[11][13] + coeff0_12*dmats0[12][13] + coeff0_13*dmats0[13][13] + coeff0_14*dmats0[14][13] + coeff0_15*dmats0[15][13] + coeff0_16*dmats0[16][13] + coeff0_17*dmats0[17][13] + coeff0_18*dmats0[18][13] + coeff0_19*dmats0[19][13] + coeff0_20*dmats0[20][13] + coeff0_21*dmats0[21][13] + coeff0_22*dmats0[22][13] + coeff0_23*dmats0[23][13] + coeff0_24*dmats0[24][13] + coeff0_25*dmats0[25][13] + coeff0_26*dmats0[26][13] + coeff0_27*dmats0[27][13] + coeff0_28*dmats0[28][13] + coeff0_29*dmats0[29][13] + coeff0_30*dmats0[30][13] + coeff0_31*dmats0[31][13] + coeff0_32*dmats0[32][13] + coeff0_33*dmats0[33][13] + coeff0_34*dmats0[34][13];
          new_coeff0_14 = coeff0_0*dmats0[0][14] + coeff0_1*dmats0[1][14] + coeff0_2*dmats0[2][14] + coeff0_3*dmats0[3][14] + coeff0_4*dmats0[4][14] + coeff0_5*dmats0[5][14] + coeff0_6*dmats0[6][14] + coeff0_7*dmats0[7][14] + coeff0_8*dmats0[8][14] + coeff0_9*dmats0[9][14] + coeff0_10*dmats0[10][14] + coeff0_11*dmats0[11][14] + coeff0_12*dmats0[12][14] + coeff0_13*dmats0[13][14] + coeff0_14*dmats0[14][14] + coeff0_15*dmats0[15][14] + coeff0_16*dmats0[16][14] + coeff0_17*dmats0[17][14] + coeff0_18*dmats0[18][14] + coeff0_19*dmats0[19][14] + coeff0_20*dmats0[20][14] + coeff0_21*dmats0[21][14] + coeff0_22*dmats0[22][14] + coeff0_23*dmats0[23][14] + coeff0_24*dmats0[24][14] + coeff0_25*dmats0[25][14] + coeff0_26*dmats0[26][14] + coeff0_27*dmats0[27][14] + coeff0_28*dmats0[28][14] + coeff0_29*dmats0[29][14] + coeff0_30*dmats0[30][14] + coeff0_31*dmats0[31][14] + coeff0_32*dmats0[32][14] + coeff0_33*dmats0[33][14] + coeff0_34*dmats0[34][14];
          new_coeff0_15 = coeff0_0*dmats0[0][15] + coeff0_1*dmats0[1][15] + coeff0_2*dmats0[2][15] + coeff0_3*dmats0[3][15] + coeff0_4*dmats0[4][15] + coeff0_5*dmats0[5][15] + coeff0_6*dmats0[6][15] + coeff0_7*dmats0[7][15] + coeff0_8*dmats0[8][15] + coeff0_9*dmats0[9][15] + coeff0_10*dmats0[10][15] + coeff0_11*dmats0[11][15] + coeff0_12*dmats0[12][15] + coeff0_13*dmats0[13][15] + coeff0_14*dmats0[14][15] + coeff0_15*dmats0[15][15] + coeff0_16*dmats0[16][15] + coeff0_17*dmats0[17][15] + coeff0_18*dmats0[18][15] + coeff0_19*dmats0[19][15] + coeff0_20*dmats0[20][15] + coeff0_21*dmats0[21][15] + coeff0_22*dmats0[22][15] + coeff0_23*dmats0[23][15] + coeff0_24*dmats0[24][15] + coeff0_25*dmats0[25][15] + coeff0_26*dmats0[26][15] + coeff0_27*dmats0[27][15] + coeff0_28*dmats0[28][15] + coeff0_29*dmats0[29][15] + coeff0_30*dmats0[30][15] + coeff0_31*dmats0[31][15] + coeff0_32*dmats0[32][15] + coeff0_33*dmats0[33][15] + coeff0_34*dmats0[34][15];
          new_coeff0_16 = coeff0_0*dmats0[0][16] + coeff0_1*dmats0[1][16] + coeff0_2*dmats0[2][16] + coeff0_3*dmats0[3][16] + coeff0_4*dmats0[4][16] + coeff0_5*dmats0[5][16] + coeff0_6*dmats0[6][16] + coeff0_7*dmats0[7][16] + coeff0_8*dmats0[8][16] + coeff0_9*dmats0[9][16] + coeff0_10*dmats0[10][16] + coeff0_11*dmats0[11][16] + coeff0_12*dmats0[12][16] + coeff0_13*dmats0[13][16] + coeff0_14*dmats0[14][16] + coeff0_15*dmats0[15][16] + coeff0_16*dmats0[16][16] + coeff0_17*dmats0[17][16] + coeff0_18*dmats0[18][16] + coeff0_19*dmats0[19][16] + coeff0_20*dmats0[20][16] + coeff0_21*dmats0[21][16] + coeff0_22*dmats0[22][16] + coeff0_23*dmats0[23][16] + coeff0_24*dmats0[24][16] + coeff0_25*dmats0[25][16] + coeff0_26*dmats0[26][16] + coeff0_27*dmats0[27][16] + coeff0_28*dmats0[28][16] + coeff0_29*dmats0[29][16] + coeff0_30*dmats0[30][16] + coeff0_31*dmats0[31][16] + coeff0_32*dmats0[32][16] + coeff0_33*dmats0[33][16] + coeff0_34*dmats0[34][16];
          new_coeff0_17 = coeff0_0*dmats0[0][17] + coeff0_1*dmats0[1][17] + coeff0_2*dmats0[2][17] + coeff0_3*dmats0[3][17] + coeff0_4*dmats0[4][17] + coeff0_5*dmats0[5][17] + coeff0_6*dmats0[6][17] + coeff0_7*dmats0[7][17] + coeff0_8*dmats0[8][17] + coeff0_9*dmats0[9][17] + coeff0_10*dmats0[10][17] + coeff0_11*dmats0[11][17] + coeff0_12*dmats0[12][17] + coeff0_13*dmats0[13][17] + coeff0_14*dmats0[14][17] + coeff0_15*dmats0[15][17] + coeff0_16*dmats0[16][17] + coeff0_17*dmats0[17][17] + coeff0_18*dmats0[18][17] + coeff0_19*dmats0[19][17] + coeff0_20*dmats0[20][17] + coeff0_21*dmats0[21][17] + coeff0_22*dmats0[22][17] + coeff0_23*dmats0[23][17] + coeff0_24*dmats0[24][17] + coeff0_25*dmats0[25][17] + coeff0_26*dmats0[26][17] + coeff0_27*dmats0[27][17] + coeff0_28*dmats0[28][17] + coeff0_29*dmats0[29][17] + coeff0_30*dmats0[30][17] + coeff0_31*dmats0[31][17] + coeff0_32*dmats0[32][17] + coeff0_33*dmats0[33][17] + coeff0_34*dmats0[34][17];
          new_coeff0_18 = coeff0_0*dmats0[0][18] + coeff0_1*dmats0[1][18] + coeff0_2*dmats0[2][18] + coeff0_3*dmats0[3][18] + coeff0_4*dmats0[4][18] + coeff0_5*dmats0[5][18] + coeff0_6*dmats0[6][18] + coeff0_7*dmats0[7][18] + coeff0_8*dmats0[8][18] + coeff0_9*dmats0[9][18] + coeff0_10*dmats0[10][18] + coeff0_11*dmats0[11][18] + coeff0_12*dmats0[12][18] + coeff0_13*dmats0[13][18] + coeff0_14*dmats0[14][18] + coeff0_15*dmats0[15][18] + coeff0_16*dmats0[16][18] + coeff0_17*dmats0[17][18] + coeff0_18*dmats0[18][18] + coeff0_19*dmats0[19][18] + coeff0_20*dmats0[20][18] + coeff0_21*dmats0[21][18] + coeff0_22*dmats0[22][18] + coeff0_23*dmats0[23][18] + coeff0_24*dmats0[24][18] + coeff0_25*dmats0[25][18] + coeff0_26*dmats0[26][18] + coeff0_27*dmats0[27][18] + coeff0_28*dmats0[28][18] + coeff0_29*dmats0[29][18] + coeff0_30*dmats0[30][18] + coeff0_31*dmats0[31][18] + coeff0_32*dmats0[32][18] + coeff0_33*dmats0[33][18] + coeff0_34*dmats0[34][18];
          new_coeff0_19 = coeff0_0*dmats0[0][19] + coeff0_1*dmats0[1][19] + coeff0_2*dmats0[2][19] + coeff0_3*dmats0[3][19] + coeff0_4*dmats0[4][19] + coeff0_5*dmats0[5][19] + coeff0_6*dmats0[6][19] + coeff0_7*dmats0[7][19] + coeff0_8*dmats0[8][19] + coeff0_9*dmats0[9][19] + coeff0_10*dmats0[10][19] + coeff0_11*dmats0[11][19] + coeff0_12*dmats0[12][19] + coeff0_13*dmats0[13][19] + coeff0_14*dmats0[14][19] + coeff0_15*dmats0[15][19] + coeff0_16*dmats0[16][19] + coeff0_17*dmats0[17][19] + coeff0_18*dmats0[18][19] + coeff0_19*dmats0[19][19] + coeff0_20*dmats0[20][19] + coeff0_21*dmats0[21][19] + coeff0_22*dmats0[22][19] + coeff0_23*dmats0[23][19] + coeff0_24*dmats0[24][19] + coeff0_25*dmats0[25][19] + coeff0_26*dmats0[26][19] + coeff0_27*dmats0[27][19] + coeff0_28*dmats0[28][19] + coeff0_29*dmats0[29][19] + coeff0_30*dmats0[30][19] + coeff0_31*dmats0[31][19] + coeff0_32*dmats0[32][19] + coeff0_33*dmats0[33][19] + coeff0_34*dmats0[34][19];
          new_coeff0_20 = coeff0_0*dmats0[0][20] + coeff0_1*dmats0[1][20] + coeff0_2*dmats0[2][20] + coeff0_3*dmats0[3][20] + coeff0_4*dmats0[4][20] + coeff0_5*dmats0[5][20] + coeff0_6*dmats0[6][20] + coeff0_7*dmats0[7][20] + coeff0_8*dmats0[8][20] + coeff0_9*dmats0[9][20] + coeff0_10*dmats0[10][20] + coeff0_11*dmats0[11][20] + coeff0_12*dmats0[12][20] + coeff0_13*dmats0[13][20] + coeff0_14*dmats0[14][20] + coeff0_15*dmats0[15][20] + coeff0_16*dmats0[16][20] + coeff0_17*dmats0[17][20] + coeff0_18*dmats0[18][20] + coeff0_19*dmats0[19][20] + coeff0_20*dmats0[20][20] + coeff0_21*dmats0[21][20] + coeff0_22*dmats0[22][20] + coeff0_23*dmats0[23][20] + coeff0_24*dmats0[24][20] + coeff0_25*dmats0[25][20] + coeff0_26*dmats0[26][20] + coeff0_27*dmats0[27][20] + coeff0_28*dmats0[28][20] + coeff0_29*dmats0[29][20] + coeff0_30*dmats0[30][20] + coeff0_31*dmats0[31][20] + coeff0_32*dmats0[32][20] + coeff0_33*dmats0[33][20] + coeff0_34*dmats0[34][20];
          new_coeff0_21 = coeff0_0*dmats0[0][21] + coeff0_1*dmats0[1][21] + coeff0_2*dmats0[2][21] + coeff0_3*dmats0[3][21] + coeff0_4*dmats0[4][21] + coeff0_5*dmats0[5][21] + coeff0_6*dmats0[6][21] + coeff0_7*dmats0[7][21] + coeff0_8*dmats0[8][21] + coeff0_9*dmats0[9][21] + coeff0_10*dmats0[10][21] + coeff0_11*dmats0[11][21] + coeff0_12*dmats0[12][21] + coeff0_13*dmats0[13][21] + coeff0_14*dmats0[14][21] + coeff0_15*dmats0[15][21] + coeff0_16*dmats0[16][21] + coeff0_17*dmats0[17][21] + coeff0_18*dmats0[18][21] + coeff0_19*dmats0[19][21] + coeff0_20*dmats0[20][21] + coeff0_21*dmats0[21][21] + coeff0_22*dmats0[22][21] + coeff0_23*dmats0[23][21] + coeff0_24*dmats0[24][21] + coeff0_25*dmats0[25][21] + coeff0_26*dmats0[26][21] + coeff0_27*dmats0[27][21] + coeff0_28*dmats0[28][21] + coeff0_29*dmats0[29][21] + coeff0_30*dmats0[30][21] + coeff0_31*dmats0[31][21] + coeff0_32*dmats0[32][21] + coeff0_33*dmats0[33][21] + coeff0_34*dmats0[34][21];
          new_coeff0_22 = coeff0_0*dmats0[0][22] + coeff0_1*dmats0[1][22] + coeff0_2*dmats0[2][22] + coeff0_3*dmats0[3][22] + coeff0_4*dmats0[4][22] + coeff0_5*dmats0[5][22] + coeff0_6*dmats0[6][22] + coeff0_7*dmats0[7][22] + coeff0_8*dmats0[8][22] + coeff0_9*dmats0[9][22] + coeff0_10*dmats0[10][22] + coeff0_11*dmats0[11][22] + coeff0_12*dmats0[12][22] + coeff0_13*dmats0[13][22] + coeff0_14*dmats0[14][22] + coeff0_15*dmats0[15][22] + coeff0_16*dmats0[16][22] + coeff0_17*dmats0[17][22] + coeff0_18*dmats0[18][22] + coeff0_19*dmats0[19][22] + coeff0_20*dmats0[20][22] + coeff0_21*dmats0[21][22] + coeff0_22*dmats0[22][22] + coeff0_23*dmats0[23][22] + coeff0_24*dmats0[24][22] + coeff0_25*dmats0[25][22] + coeff0_26*dmats0[26][22] + coeff0_27*dmats0[27][22] + coeff0_28*dmats0[28][22] + coeff0_29*dmats0[29][22] + coeff0_30*dmats0[30][22] + coeff0_31*dmats0[31][22] + coeff0_32*dmats0[32][22] + coeff0_33*dmats0[33][22] + coeff0_34*dmats0[34][22];
          new_coeff0_23 = coeff0_0*dmats0[0][23] + coeff0_1*dmats0[1][23] + coeff0_2*dmats0[2][23] + coeff0_3*dmats0[3][23] + coeff0_4*dmats0[4][23] + coeff0_5*dmats0[5][23] + coeff0_6*dmats0[6][23] + coeff0_7*dmats0[7][23] + coeff0_8*dmats0[8][23] + coeff0_9*dmats0[9][23] + coeff0_10*dmats0[10][23] + coeff0_11*dmats0[11][23] + coeff0_12*dmats0[12][23] + coeff0_13*dmats0[13][23] + coeff0_14*dmats0[14][23] + coeff0_15*dmats0[15][23] + coeff0_16*dmats0[16][23] + coeff0_17*dmats0[17][23] + coeff0_18*dmats0[18][23] + coeff0_19*dmats0[19][23] + coeff0_20*dmats0[20][23] + coeff0_21*dmats0[21][23] + coeff0_22*dmats0[22][23] + coeff0_23*dmats0[23][23] + coeff0_24*dmats0[24][23] + coeff0_25*dmats0[25][23] + coeff0_26*dmats0[26][23] + coeff0_27*dmats0[27][23] + coeff0_28*dmats0[28][23] + coeff0_29*dmats0[29][23] + coeff0_30*dmats0[30][23] + coeff0_31*dmats0[31][23] + coeff0_32*dmats0[32][23] + coeff0_33*dmats0[33][23] + coeff0_34*dmats0[34][23];
          new_coeff0_24 = coeff0_0*dmats0[0][24] + coeff0_1*dmats0[1][24] + coeff0_2*dmats0[2][24] + coeff0_3*dmats0[3][24] + coeff0_4*dmats0[4][24] + coeff0_5*dmats0[5][24] + coeff0_6*dmats0[6][24] + coeff0_7*dmats0[7][24] + coeff0_8*dmats0[8][24] + coeff0_9*dmats0[9][24] + coeff0_10*dmats0[10][24] + coeff0_11*dmats0[11][24] + coeff0_12*dmats0[12][24] + coeff0_13*dmats0[13][24] + coeff0_14*dmats0[14][24] + coeff0_15*dmats0[15][24] + coeff0_16*dmats0[16][24] + coeff0_17*dmats0[17][24] + coeff0_18*dmats0[18][24] + coeff0_19*dmats0[19][24] + coeff0_20*dmats0[20][24] + coeff0_21*dmats0[21][24] + coeff0_22*dmats0[22][24] + coeff0_23*dmats0[23][24] + coeff0_24*dmats0[24][24] + coeff0_25*dmats0[25][24] + coeff0_26*dmats0[26][24] + coeff0_27*dmats0[27][24] + coeff0_28*dmats0[28][24] + coeff0_29*dmats0[29][24] + coeff0_30*dmats0[30][24] + coeff0_31*dmats0[31][24] + coeff0_32*dmats0[32][24] + coeff0_33*dmats0[33][24] + coeff0_34*dmats0[34][24];
          new_coeff0_25 = coeff0_0*dmats0[0][25] + coeff0_1*dmats0[1][25] + coeff0_2*dmats0[2][25] + coeff0_3*dmats0[3][25] + coeff0_4*dmats0[4][25] + coeff0_5*dmats0[5][25] + coeff0_6*dmats0[6][25] + coeff0_7*dmats0[7][25] + coeff0_8*dmats0[8][25] + coeff0_9*dmats0[9][25] + coeff0_10*dmats0[10][25] + coeff0_11*dmats0[11][25] + coeff0_12*dmats0[12][25] + coeff0_13*dmats0[13][25] + coeff0_14*dmats0[14][25] + coeff0_15*dmats0[15][25] + coeff0_16*dmats0[16][25] + coeff0_17*dmats0[17][25] + coeff0_18*dmats0[18][25] + coeff0_19*dmats0[19][25] + coeff0_20*dmats0[20][25] + coeff0_21*dmats0[21][25] + coeff0_22*dmats0[22][25] + coeff0_23*dmats0[23][25] + coeff0_24*dmats0[24][25] + coeff0_25*dmats0[25][25] + coeff0_26*dmats0[26][25] + coeff0_27*dmats0[27][25] + coeff0_28*dmats0[28][25] + coeff0_29*dmats0[29][25] + coeff0_30*dmats0[30][25] + coeff0_31*dmats0[31][25] + coeff0_32*dmats0[32][25] + coeff0_33*dmats0[33][25] + coeff0_34*dmats0[34][25];
          new_coeff0_26 = coeff0_0*dmats0[0][26] + coeff0_1*dmats0[1][26] + coeff0_2*dmats0[2][26] + coeff0_3*dmats0[3][26] + coeff0_4*dmats0[4][26] + coeff0_5*dmats0[5][26] + coeff0_6*dmats0[6][26] + coeff0_7*dmats0[7][26] + coeff0_8*dmats0[8][26] + coeff0_9*dmats0[9][26] + coeff0_10*dmats0[10][26] + coeff0_11*dmats0[11][26] + coeff0_12*dmats0[12][26] + coeff0_13*dmats0[13][26] + coeff0_14*dmats0[14][26] + coeff0_15*dmats0[15][26] + coeff0_16*dmats0[16][26] + coeff0_17*dmats0[17][26] + coeff0_18*dmats0[18][26] + coeff0_19*dmats0[19][26] + coeff0_20*dmats0[20][26] + coeff0_21*dmats0[21][26] + coeff0_22*dmats0[22][26] + coeff0_23*dmats0[23][26] + coeff0_24*dmats0[24][26] + coeff0_25*dmats0[25][26] + coeff0_26*dmats0[26][26] + coeff0_27*dmats0[27][26] + coeff0_28*dmats0[28][26] + coeff0_29*dmats0[29][26] + coeff0_30*dmats0[30][26] + coeff0_31*dmats0[31][26] + coeff0_32*dmats0[32][26] + coeff0_33*dmats0[33][26] + coeff0_34*dmats0[34][26];
          new_coeff0_27 = coeff0_0*dmats0[0][27] + coeff0_1*dmats0[1][27] + coeff0_2*dmats0[2][27] + coeff0_3*dmats0[3][27] + coeff0_4*dmats0[4][27] + coeff0_5*dmats0[5][27] + coeff0_6*dmats0[6][27] + coeff0_7*dmats0[7][27] + coeff0_8*dmats0[8][27] + coeff0_9*dmats0[9][27] + coeff0_10*dmats0[10][27] + coeff0_11*dmats0[11][27] + coeff0_12*dmats0[12][27] + coeff0_13*dmats0[13][27] + coeff0_14*dmats0[14][27] + coeff0_15*dmats0[15][27] + coeff0_16*dmats0[16][27] + coeff0_17*dmats0[17][27] + coeff0_18*dmats0[18][27] + coeff0_19*dmats0[19][27] + coeff0_20*dmats0[20][27] + coeff0_21*dmats0[21][27] + coeff0_22*dmats0[22][27] + coeff0_23*dmats0[23][27] + coeff0_24*dmats0[24][27] + coeff0_25*dmats0[25][27] + coeff0_26*dmats0[26][27] + coeff0_27*dmats0[27][27] + coeff0_28*dmats0[28][27] + coeff0_29*dmats0[29][27] + coeff0_30*dmats0[30][27] + coeff0_31*dmats0[31][27] + coeff0_32*dmats0[32][27] + coeff0_33*dmats0[33][27] + coeff0_34*dmats0[34][27];
          new_coeff0_28 = coeff0_0*dmats0[0][28] + coeff0_1*dmats0[1][28] + coeff0_2*dmats0[2][28] + coeff0_3*dmats0[3][28] + coeff0_4*dmats0[4][28] + coeff0_5*dmats0[5][28] + coeff0_6*dmats0[6][28] + coeff0_7*dmats0[7][28] + coeff0_8*dmats0[8][28] + coeff0_9*dmats0[9][28] + coeff0_10*dmats0[10][28] + coeff0_11*dmats0[11][28] + coeff0_12*dmats0[12][28] + coeff0_13*dmats0[13][28] + coeff0_14*dmats0[14][28] + coeff0_15*dmats0[15][28] + coeff0_16*dmats0[16][28] + coeff0_17*dmats0[17][28] + coeff0_18*dmats0[18][28] + coeff0_19*dmats0[19][28] + coeff0_20*dmats0[20][28] + coeff0_21*dmats0[21][28] + coeff0_22*dmats0[22][28] + coeff0_23*dmats0[23][28] + coeff0_24*dmats0[24][28] + coeff0_25*dmats0[25][28] + coeff0_26*dmats0[26][28] + coeff0_27*dmats0[27][28] + coeff0_28*dmats0[28][28] + coeff0_29*dmats0[29][28] + coeff0_30*dmats0[30][28] + coeff0_31*dmats0[31][28] + coeff0_32*dmats0[32][28] + coeff0_33*dmats0[33][28] + coeff0_34*dmats0[34][28];
          new_coeff0_29 = coeff0_0*dmats0[0][29] + coeff0_1*dmats0[1][29] + coeff0_2*dmats0[2][29] + coeff0_3*dmats0[3][29] + coeff0_4*dmats0[4][29] + coeff0_5*dmats0[5][29] + coeff0_6*dmats0[6][29] + coeff0_7*dmats0[7][29] + coeff0_8*dmats0[8][29] + coeff0_9*dmats0[9][29] + coeff0_10*dmats0[10][29] + coeff0_11*dmats0[11][29] + coeff0_12*dmats0[12][29] + coeff0_13*dmats0[13][29] + coeff0_14*dmats0[14][29] + coeff0_15*dmats0[15][29] + coeff0_16*dmats0[16][29] + coeff0_17*dmats0[17][29] + coeff0_18*dmats0[18][29] + coeff0_19*dmats0[19][29] + coeff0_20*dmats0[20][29] + coeff0_21*dmats0[21][29] + coeff0_22*dmats0[22][29] + coeff0_23*dmats0[23][29] + coeff0_24*dmats0[24][29] + coeff0_25*dmats0[25][29] + coeff0_26*dmats0[26][29] + coeff0_27*dmats0[27][29] + coeff0_28*dmats0[28][29] + coeff0_29*dmats0[29][29] + coeff0_30*dmats0[30][29] + coeff0_31*dmats0[31][29] + coeff0_32*dmats0[32][29] + coeff0_33*dmats0[33][29] + coeff0_34*dmats0[34][29];
          new_coeff0_30 = coeff0_0*dmats0[0][30] + coeff0_1*dmats0[1][30] + coeff0_2*dmats0[2][30] + coeff0_3*dmats0[3][30] + coeff0_4*dmats0[4][30] + coeff0_5*dmats0[5][30] + coeff0_6*dmats0[6][30] + coeff0_7*dmats0[7][30] + coeff0_8*dmats0[8][30] + coeff0_9*dmats0[9][30] + coeff0_10*dmats0[10][30] + coeff0_11*dmats0[11][30] + coeff0_12*dmats0[12][30] + coeff0_13*dmats0[13][30] + coeff0_14*dmats0[14][30] + coeff0_15*dmats0[15][30] + coeff0_16*dmats0[16][30] + coeff0_17*dmats0[17][30] + coeff0_18*dmats0[18][30] + coeff0_19*dmats0[19][30] + coeff0_20*dmats0[20][30] + coeff0_21*dmats0[21][30] + coeff0_22*dmats0[22][30] + coeff0_23*dmats0[23][30] + coeff0_24*dmats0[24][30] + coeff0_25*dmats0[25][30] + coeff0_26*dmats0[26][30] + coeff0_27*dmats0[27][30] + coeff0_28*dmats0[28][30] + coeff0_29*dmats0[29][30] + coeff0_30*dmats0[30][30] + coeff0_31*dmats0[31][30] + coeff0_32*dmats0[32][30] + coeff0_33*dmats0[33][30] + coeff0_34*dmats0[34][30];
          new_coeff0_31 = coeff0_0*dmats0[0][31] + coeff0_1*dmats0[1][31] + coeff0_2*dmats0[2][31] + coeff0_3*dmats0[3][31] + coeff0_4*dmats0[4][31] + coeff0_5*dmats0[5][31] + coeff0_6*dmats0[6][31] + coeff0_7*dmats0[7][31] + coeff0_8*dmats0[8][31] + coeff0_9*dmats0[9][31] + coeff0_10*dmats0[10][31] + coeff0_11*dmats0[11][31] + coeff0_12*dmats0[12][31] + coeff0_13*dmats0[13][31] + coeff0_14*dmats0[14][31] + coeff0_15*dmats0[15][31] + coeff0_16*dmats0[16][31] + coeff0_17*dmats0[17][31] + coeff0_18*dmats0[18][31] + coeff0_19*dmats0[19][31] + coeff0_20*dmats0[20][31] + coeff0_21*dmats0[21][31] + coeff0_22*dmats0[22][31] + coeff0_23*dmats0[23][31] + coeff0_24*dmats0[24][31] + coeff0_25*dmats0[25][31] + coeff0_26*dmats0[26][31] + coeff0_27*dmats0[27][31] + coeff0_28*dmats0[28][31] + coeff0_29*dmats0[29][31] + coeff0_30*dmats0[30][31] + coeff0_31*dmats0[31][31] + coeff0_32*dmats0[32][31] + coeff0_33*dmats0[33][31] + coeff0_34*dmats0[34][31];
          new_coeff0_32 = coeff0_0*dmats0[0][32] + coeff0_1*dmats0[1][32] + coeff0_2*dmats0[2][32] + coeff0_3*dmats0[3][32] + coeff0_4*dmats0[4][32] + coeff0_5*dmats0[5][32] + coeff0_6*dmats0[6][32] + coeff0_7*dmats0[7][32] + coeff0_8*dmats0[8][32] + coeff0_9*dmats0[9][32] + coeff0_10*dmats0[10][32] + coeff0_11*dmats0[11][32] + coeff0_12*dmats0[12][32] + coeff0_13*dmats0[13][32] + coeff0_14*dmats0[14][32] + coeff0_15*dmats0[15][32] + coeff0_16*dmats0[16][32] + coeff0_17*dmats0[17][32] + coeff0_18*dmats0[18][32] + coeff0_19*dmats0[19][32] + coeff0_20*dmats0[20][32] + coeff0_21*dmats0[21][32] + coeff0_22*dmats0[22][32] + coeff0_23*dmats0[23][32] + coeff0_24*dmats0[24][32] + coeff0_25*dmats0[25][32] + coeff0_26*dmats0[26][32] + coeff0_27*dmats0[27][32] + coeff0_28*dmats0[28][32] + coeff0_29*dmats0[29][32] + coeff0_30*dmats0[30][32] + coeff0_31*dmats0[31][32] + coeff0_32*dmats0[32][32] + coeff0_33*dmats0[33][32] + coeff0_34*dmats0[34][32];
          new_coeff0_33 = coeff0_0*dmats0[0][33] + coeff0_1*dmats0[1][33] + coeff0_2*dmats0[2][33] + coeff0_3*dmats0[3][33] + coeff0_4*dmats0[4][33] + coeff0_5*dmats0[5][33] + coeff0_6*dmats0[6][33] + coeff0_7*dmats0[7][33] + coeff0_8*dmats0[8][33] + coeff0_9*dmats0[9][33] + coeff0_10*dmats0[10][33] + coeff0_11*dmats0[11][33] + coeff0_12*dmats0[12][33] + coeff0_13*dmats0[13][33] + coeff0_14*dmats0[14][33] + coeff0_15*dmats0[15][33] + coeff0_16*dmats0[16][33] + coeff0_17*dmats0[17][33] + coeff0_18*dmats0[18][33] + coeff0_19*dmats0[19][33] + coeff0_20*dmats0[20][33] + coeff0_21*dmats0[21][33] + coeff0_22*dmats0[22][33] + coeff0_23*dmats0[23][33] + coeff0_24*dmats0[24][33] + coeff0_25*dmats0[25][33] + coeff0_26*dmats0[26][33] + coeff0_27*dmats0[27][33] + coeff0_28*dmats0[28][33] + coeff0_29*dmats0[29][33] + coeff0_30*dmats0[30][33] + coeff0_31*dmats0[31][33] + coeff0_32*dmats0[32][33] + coeff0_33*dmats0[33][33] + coeff0_34*dmats0[34][33];
          new_coeff0_34 = coeff0_0*dmats0[0][34] + coeff0_1*dmats0[1][34] + coeff0_2*dmats0[2][34] + coeff0_3*dmats0[3][34] + coeff0_4*dmats0[4][34] + coeff0_5*dmats0[5][34] + coeff0_6*dmats0[6][34] + coeff0_7*dmats0[7][34] + coeff0_8*dmats0[8][34] + coeff0_9*dmats0[9][34] + coeff0_10*dmats0[10][34] + coeff0_11*dmats0[11][34] + coeff0_12*dmats0[12][34] + coeff0_13*dmats0[13][34] + coeff0_14*dmats0[14][34] + coeff0_15*dmats0[15][34] + coeff0_16*dmats0[16][34] + coeff0_17*dmats0[17][34] + coeff0_18*dmats0[18][34] + coeff0_19*dmats0[19][34] + coeff0_20*dmats0[20][34] + coeff0_21*dmats0[21][34] + coeff0_22*dmats0[22][34] + coeff0_23*dmats0[23][34] + coeff0_24*dmats0[24][34] + coeff0_25*dmats0[25][34] + coeff0_26*dmats0[26][34] + coeff0_27*dmats0[27][34] + coeff0_28*dmats0[28][34] + coeff0_29*dmats0[29][34] + coeff0_30*dmats0[30][34] + coeff0_31*dmats0[31][34] + coeff0_32*dmats0[32][34] + coeff0_33*dmats0[33][34] + coeff0_34*dmats0[34][34];
        }
        if(combinations[deriv_num][j] == 1)
        {
          new_coeff0_0 = coeff0_0*dmats1[0][0] + coeff0_1*dmats1[1][0] + coeff0_2*dmats1[2][0] + coeff0_3*dmats1[3][0] + coeff0_4*dmats1[4][0] + coeff0_5*dmats1[5][0] + coeff0_6*dmats1[6][0] + coeff0_7*dmats1[7][0] + coeff0_8*dmats1[8][0] + coeff0_9*dmats1[9][0] + coeff0_10*dmats1[10][0] + coeff0_11*dmats1[11][0] + coeff0_12*dmats1[12][0] + coeff0_13*dmats1[13][0] + coeff0_14*dmats1[14][0] + coeff0_15*dmats1[15][0] + coeff0_16*dmats1[16][0] + coeff0_17*dmats1[17][0] + coeff0_18*dmats1[18][0] + coeff0_19*dmats1[19][0] + coeff0_20*dmats1[20][0] + coeff0_21*dmats1[21][0] + coeff0_22*dmats1[22][0] + coeff0_23*dmats1[23][0] + coeff0_24*dmats1[24][0] + coeff0_25*dmats1[25][0] + coeff0_26*dmats1[26][0] + coeff0_27*dmats1[27][0] + coeff0_28*dmats1[28][0] + coeff0_29*dmats1[29][0] + coeff0_30*dmats1[30][0] + coeff0_31*dmats1[31][0] + coeff0_32*dmats1[32][0] + coeff0_33*dmats1[33][0] + coeff0_34*dmats1[34][0];
          new_coeff0_1 = coeff0_0*dmats1[0][1] + coeff0_1*dmats1[1][1] + coeff0_2*dmats1[2][1] + coeff0_3*dmats1[3][1] + coeff0_4*dmats1[4][1] + coeff0_5*dmats1[5][1] + coeff0_6*dmats1[6][1] + coeff0_7*dmats1[7][1] + coeff0_8*dmats1[8][1] + coeff0_9*dmats1[9][1] + coeff0_10*dmats1[10][1] + coeff0_11*dmats1[11][1] + coeff0_12*dmats1[12][1] + coeff0_13*dmats1[13][1] + coeff0_14*dmats1[14][1] + coeff0_15*dmats1[15][1] + coeff0_16*dmats1[16][1] + coeff0_17*dmats1[17][1] + coeff0_18*dmats1[18][1] + coeff0_19*dmats1[19][1] + coeff0_20*dmats1[20][1] + coeff0_21*dmats1[21][1] + coeff0_22*dmats1[22][1] + coeff0_23*dmats1[23][1] + coeff0_24*dmats1[24][1] + coeff0_25*dmats1[25][1] + coeff0_26*dmats1[26][1] + coeff0_27*dmats1[27][1] + coeff0_28*dmats1[28][1] + coeff0_29*dmats1[29][1] + coeff0_30*dmats1[30][1] + coeff0_31*dmats1[31][1] + coeff0_32*dmats1[32][1] + coeff0_33*dmats1[33][1] + coeff0_34*dmats1[34][1];
          new_coeff0_2 = coeff0_0*dmats1[0][2] + coeff0_1*dmats1[1][2] + coeff0_2*dmats1[2][2] + coeff0_3*dmats1[3][2] + coeff0_4*dmats1[4][2] + coeff0_5*dmats1[5][2] + coeff0_6*dmats1[6][2] + coeff0_7*dmats1[7][2] + coeff0_8*dmats1[8][2] + coeff0_9*dmats1[9][2] + coeff0_10*dmats1[10][2] + coeff0_11*dmats1[11][2] + coeff0_12*dmats1[12][2] + coeff0_13*dmats1[13][2] + coeff0_14*dmats1[14][2] + coeff0_15*dmats1[15][2] + coeff0_16*dmats1[16][2] + coeff0_17*dmats1[17][2] + coeff0_18*dmats1[18][2] + coeff0_19*dmats1[19][2] + coeff0_20*dmats1[20][2] + coeff0_21*dmats1[21][2] + coeff0_22*dmats1[22][2] + coeff0_23*dmats1[23][2] + coeff0_24*dmats1[24][2] + coeff0_25*dmats1[25][2] + coeff0_26*dmats1[26][2] + coeff0_27*dmats1[27][2] + coeff0_28*dmats1[28][2] + coeff0_29*dmats1[29][2] + coeff0_30*dmats1[30][2] + coeff0_31*dmats1[31][2] + coeff0_32*dmats1[32][2] + coeff0_33*dmats1[33][2] + coeff0_34*dmats1[34][2];
          new_coeff0_3 = coeff0_0*dmats1[0][3] + coeff0_1*dmats1[1][3] + coeff0_2*dmats1[2][3] + coeff0_3*dmats1[3][3] + coeff0_4*dmats1[4][3] + coeff0_5*dmats1[5][3] + coeff0_6*dmats1[6][3] + coeff0_7*dmats1[7][3] + coeff0_8*dmats1[8][3] + coeff0_9*dmats1[9][3] + coeff0_10*dmats1[10][3] + coeff0_11*dmats1[11][3] + coeff0_12*dmats1[12][3] + coeff0_13*dmats1[13][3] + coeff0_14*dmats1[14][3] + coeff0_15*dmats1[15][3] + coeff0_16*dmats1[16][3] + coeff0_17*dmats1[17][3] + coeff0_18*dmats1[18][3] + coeff0_19*dmats1[19][3] + coeff0_20*dmats1[20][3] + coeff0_21*dmats1[21][3] + coeff0_22*dmats1[22][3] + coeff0_23*dmats1[23][3] + coeff0_24*dmats1[24][3] + coeff0_25*dmats1[25][3] + coeff0_26*dmats1[26][3] + coeff0_27*dmats1[27][3] + coeff0_28*dmats1[28][3] + coeff0_29*dmats1[29][3] + coeff0_30*dmats1[30][3] + coeff0_31*dmats1[31][3] + coeff0_32*dmats1[32][3] + coeff0_33*dmats1[33][3] + coeff0_34*dmats1[34][3];
          new_coeff0_4 = coeff0_0*dmats1[0][4] + coeff0_1*dmats1[1][4] + coeff0_2*dmats1[2][4] + coeff0_3*dmats1[3][4] + coeff0_4*dmats1[4][4] + coeff0_5*dmats1[5][4] + coeff0_6*dmats1[6][4] + coeff0_7*dmats1[7][4] + coeff0_8*dmats1[8][4] + coeff0_9*dmats1[9][4] + coeff0_10*dmats1[10][4] + coeff0_11*dmats1[11][4] + coeff0_12*dmats1[12][4] + coeff0_13*dmats1[13][4] + coeff0_14*dmats1[14][4] + coeff0_15*dmats1[15][4] + coeff0_16*dmats1[16][4] + coeff0_17*dmats1[17][4] + coeff0_18*dmats1[18][4] + coeff0_19*dmats1[19][4] + coeff0_20*dmats1[20][4] + coeff0_21*dmats1[21][4] + coeff0_22*dmats1[22][4] + coeff0_23*dmats1[23][4] + coeff0_24*dmats1[24][4] + coeff0_25*dmats1[25][4] + coeff0_26*dmats1[26][4] + coeff0_27*dmats1[27][4] + coeff0_28*dmats1[28][4] + coeff0_29*dmats1[29][4] + coeff0_30*dmats1[30][4] + coeff0_31*dmats1[31][4] + coeff0_32*dmats1[32][4] + coeff0_33*dmats1[33][4] + coeff0_34*dmats1[34][4];
          new_coeff0_5 = coeff0_0*dmats1[0][5] + coeff0_1*dmats1[1][5] + coeff0_2*dmats1[2][5] + coeff0_3*dmats1[3][5] + coeff0_4*dmats1[4][5] + coeff0_5*dmats1[5][5] + coeff0_6*dmats1[6][5] + coeff0_7*dmats1[7][5] + coeff0_8*dmats1[8][5] + coeff0_9*dmats1[9][5] + coeff0_10*dmats1[10][5] + coeff0_11*dmats1[11][5] + coeff0_12*dmats1[12][5] + coeff0_13*dmats1[13][5] + coeff0_14*dmats1[14][5] + coeff0_15*dmats1[15][5] + coeff0_16*dmats1[16][5] + coeff0_17*dmats1[17][5] + coeff0_18*dmats1[18][5] + coeff0_19*dmats1[19][5] + coeff0_20*dmats1[20][5] + coeff0_21*dmats1[21][5] + coeff0_22*dmats1[22][5] + coeff0_23*dmats1[23][5] + coeff0_24*dmats1[24][5] + coeff0_25*dmats1[25][5] + coeff0_26*dmats1[26][5] + coeff0_27*dmats1[27][5] + coeff0_28*dmats1[28][5] + coeff0_29*dmats1[29][5] + coeff0_30*dmats1[30][5] + coeff0_31*dmats1[31][5] + coeff0_32*dmats1[32][5] + coeff0_33*dmats1[33][5] + coeff0_34*dmats1[34][5];
          new_coeff0_6 = coeff0_0*dmats1[0][6] + coeff0_1*dmats1[1][6] + coeff0_2*dmats1[2][6] + coeff0_3*dmats1[3][6] + coeff0_4*dmats1[4][6] + coeff0_5*dmats1[5][6] + coeff0_6*dmats1[6][6] + coeff0_7*dmats1[7][6] + coeff0_8*dmats1[8][6] + coeff0_9*dmats1[9][6] + coeff0_10*dmats1[10][6] + coeff0_11*dmats1[11][6] + coeff0_12*dmats1[12][6] + coeff0_13*dmats1[13][6] + coeff0_14*dmats1[14][6] + coeff0_15*dmats1[15][6] + coeff0_16*dmats1[16][6] + coeff0_17*dmats1[17][6] + coeff0_18*dmats1[18][6] + coeff0_19*dmats1[19][6] + coeff0_20*dmats1[20][6] + coeff0_21*dmats1[21][6] + coeff0_22*dmats1[22][6] + coeff0_23*dmats1[23][6] + coeff0_24*dmats1[24][6] + coeff0_25*dmats1[25][6] + coeff0_26*dmats1[26][6] + coeff0_27*dmats1[27][6] + coeff0_28*dmats1[28][6] + coeff0_29*dmats1[29][6] + coeff0_30*dmats1[30][6] + coeff0_31*dmats1[31][6] + coeff0_32*dmats1[32][6] + coeff0_33*dmats1[33][6] + coeff0_34*dmats1[34][6];
          new_coeff0_7 = coeff0_0*dmats1[0][7] + coeff0_1*dmats1[1][7] + coeff0_2*dmats1[2][7] + coeff0_3*dmats1[3][7] + coeff0_4*dmats1[4][7] + coeff0_5*dmats1[5][7] + coeff0_6*dmats1[6][7] + coeff0_7*dmats1[7][7] + coeff0_8*dmats1[8][7] + coeff0_9*dmats1[9][7] + coeff0_10*dmats1[10][7] + coeff0_11*dmats1[11][7] + coeff0_12*dmats1[12][7] + coeff0_13*dmats1[13][7] + coeff0_14*dmats1[14][7] + coeff0_15*dmats1[15][7] + coeff0_16*dmats1[16][7] + coeff0_17*dmats1[17][7] + coeff0_18*dmats1[18][7] + coeff0_19*dmats1[19][7] + coeff0_20*dmats1[20][7] + coeff0_21*dmats1[21][7] + coeff0_22*dmats1[22][7] + coeff0_23*dmats1[23][7] + coeff0_24*dmats1[24][7] + coeff0_25*dmats1[25][7] + coeff0_26*dmats1[26][7] + coeff0_27*dmats1[27][7] + coeff0_28*dmats1[28][7] + coeff0_29*dmats1[29][7] + coeff0_30*dmats1[30][7] + coeff0_31*dmats1[31][7] + coeff0_32*dmats1[32][7] + coeff0_33*dmats1[33][7] + coeff0_34*dmats1[34][7];
          new_coeff0_8 = coeff0_0*dmats1[0][8] + coeff0_1*dmats1[1][8] + coeff0_2*dmats1[2][8] + coeff0_3*dmats1[3][8] + coeff0_4*dmats1[4][8] + coeff0_5*dmats1[5][8] + coeff0_6*dmats1[6][8] + coeff0_7*dmats1[7][8] + coeff0_8*dmats1[8][8] + coeff0_9*dmats1[9][8] + coeff0_10*dmats1[10][8] + coeff0_11*dmats1[11][8] + coeff0_12*dmats1[12][8] + coeff0_13*dmats1[13][8] + coeff0_14*dmats1[14][8] + coeff0_15*dmats1[15][8] + coeff0_16*dmats1[16][8] + coeff0_17*dmats1[17][8] + coeff0_18*dmats1[18][8] + coeff0_19*dmats1[19][8] + coeff0_20*dmats1[20][8] + coeff0_21*dmats1[21][8] + coeff0_22*dmats1[22][8] + coeff0_23*dmats1[23][8] + coeff0_24*dmats1[24][8] + coeff0_25*dmats1[25][8] + coeff0_26*dmats1[26][8] + coeff0_27*dmats1[27][8] + coeff0_28*dmats1[28][8] + coeff0_29*dmats1[29][8] + coeff0_30*dmats1[30][8] + coeff0_31*dmats1[31][8] + coeff0_32*dmats1[32][8] + coeff0_33*dmats1[33][8] + coeff0_34*dmats1[34][8];
          new_coeff0_9 = coeff0_0*dmats1[0][9] + coeff0_1*dmats1[1][9] + coeff0_2*dmats1[2][9] + coeff0_3*dmats1[3][9] + coeff0_4*dmats1[4][9] + coeff0_5*dmats1[5][9] + coeff0_6*dmats1[6][9] + coeff0_7*dmats1[7][9] + coeff0_8*dmats1[8][9] + coeff0_9*dmats1[9][9] + coeff0_10*dmats1[10][9] + coeff0_11*dmats1[11][9] + coeff0_12*dmats1[12][9] + coeff0_13*dmats1[13][9] + coeff0_14*dmats1[14][9] + coeff0_15*dmats1[15][9] + coeff0_16*dmats1[16][9] + coeff0_17*dmats1[17][9] + coeff0_18*dmats1[18][9] + coeff0_19*dmats1[19][9] + coeff0_20*dmats1[20][9] + coeff0_21*dmats1[21][9] + coeff0_22*dmats1[22][9] + coeff0_23*dmats1[23][9] + coeff0_24*dmats1[24][9] + coeff0_25*dmats1[25][9] + coeff0_26*dmats1[26][9] + coeff0_27*dmats1[27][9] + coeff0_28*dmats1[28][9] + coeff0_29*dmats1[29][9] + coeff0_30*dmats1[30][9] + coeff0_31*dmats1[31][9] + coeff0_32*dmats1[32][9] + coeff0_33*dmats1[33][9] + coeff0_34*dmats1[34][9];
          new_coeff0_10 = coeff0_0*dmats1[0][10] + coeff0_1*dmats1[1][10] + coeff0_2*dmats1[2][10] + coeff0_3*dmats1[3][10] + coeff0_4*dmats1[4][10] + coeff0_5*dmats1[5][10] + coeff0_6*dmats1[6][10] + coeff0_7*dmats1[7][10] + coeff0_8*dmats1[8][10] + coeff0_9*dmats1[9][10] + coeff0_10*dmats1[10][10] + coeff0_11*dmats1[11][10] + coeff0_12*dmats1[12][10] + coeff0_13*dmats1[13][10] + coeff0_14*dmats1[14][10] + coeff0_15*dmats1[15][10] + coeff0_16*dmats1[16][10] + coeff0_17*dmats1[17][10] + coeff0_18*dmats1[18][10] + coeff0_19*dmats1[19][10] + coeff0_20*dmats1[20][10] + coeff0_21*dmats1[21][10] + coeff0_22*dmats1[22][10] + coeff0_23*dmats1[23][10] + coeff0_24*dmats1[24][10] + coeff0_25*dmats1[25][10] + coeff0_26*dmats1[26][10] + coeff0_27*dmats1[27][10] + coeff0_28*dmats1[28][10] + coeff0_29*dmats1[29][10] + coeff0_30*dmats1[30][10] + coeff0_31*dmats1[31][10] + coeff0_32*dmats1[32][10] + coeff0_33*dmats1[33][10] + coeff0_34*dmats1[34][10];
          new_coeff0_11 = coeff0_0*dmats1[0][11] + coeff0_1*dmats1[1][11] + coeff0_2*dmats1[2][11] + coeff0_3*dmats1[3][11] + coeff0_4*dmats1[4][11] + coeff0_5*dmats1[5][11] + coeff0_6*dmats1[6][11] + coeff0_7*dmats1[7][11] + coeff0_8*dmats1[8][11] + coeff0_9*dmats1[9][11] + coeff0_10*dmats1[10][11] + coeff0_11*dmats1[11][11] + coeff0_12*dmats1[12][11] + coeff0_13*dmats1[13][11] + coeff0_14*dmats1[14][11] + coeff0_15*dmats1[15][11] + coeff0_16*dmats1[16][11] + coeff0_17*dmats1[17][11] + coeff0_18*dmats1[18][11] + coeff0_19*dmats1[19][11] + coeff0_20*dmats1[20][11] + coeff0_21*dmats1[21][11] + coeff0_22*dmats1[22][11] + coeff0_23*dmats1[23][11] + coeff0_24*dmats1[24][11] + coeff0_25*dmats1[25][11] + coeff0_26*dmats1[26][11] + coeff0_27*dmats1[27][11] + coeff0_28*dmats1[28][11] + coeff0_29*dmats1[29][11] + coeff0_30*dmats1[30][11] + coeff0_31*dmats1[31][11] + coeff0_32*dmats1[32][11] + coeff0_33*dmats1[33][11] + coeff0_34*dmats1[34][11];
          new_coeff0_12 = coeff0_0*dmats1[0][12] + coeff0_1*dmats1[1][12] + coeff0_2*dmats1[2][12] + coeff0_3*dmats1[3][12] + coeff0_4*dmats1[4][12] + coeff0_5*dmats1[5][12] + coeff0_6*dmats1[6][12] + coeff0_7*dmats1[7][12] + coeff0_8*dmats1[8][12] + coeff0_9*dmats1[9][12] + coeff0_10*dmats1[10][12] + coeff0_11*dmats1[11][12] + coeff0_12*dmats1[12][12] + coeff0_13*dmats1[13][12] + coeff0_14*dmats1[14][12] + coeff0_15*dmats1[15][12] + coeff0_16*dmats1[16][12] + coeff0_17*dmats1[17][12] + coeff0_18*dmats1[18][12] + coeff0_19*dmats1[19][12] + coeff0_20*dmats1[20][12] + coeff0_21*dmats1[21][12] + coeff0_22*dmats1[22][12] + coeff0_23*dmats1[23][12] + coeff0_24*dmats1[24][12] + coeff0_25*dmats1[25][12] + coeff0_26*dmats1[26][12] + coeff0_27*dmats1[27][12] + coeff0_28*dmats1[28][12] + coeff0_29*dmats1[29][12] + coeff0_30*dmats1[30][12] + coeff0_31*dmats1[31][12] + coeff0_32*dmats1[32][12] + coeff0_33*dmats1[33][12] + coeff0_34*dmats1[34][12];
          new_coeff0_13 = coeff0_0*dmats1[0][13] + coeff0_1*dmats1[1][13] + coeff0_2*dmats1[2][13] + coeff0_3*dmats1[3][13] + coeff0_4*dmats1[4][13] + coeff0_5*dmats1[5][13] + coeff0_6*dmats1[6][13] + coeff0_7*dmats1[7][13] + coeff0_8*dmats1[8][13] + coeff0_9*dmats1[9][13] + coeff0_10*dmats1[10][13] + coeff0_11*dmats1[11][13] + coeff0_12*dmats1[12][13] + coeff0_13*dmats1[13][13] + coeff0_14*dmats1[14][13] + coeff0_15*dmats1[15][13] + coeff0_16*dmats1[16][13] + coeff0_17*dmats1[17][13] + coeff0_18*dmats1[18][13] + coeff0_19*dmats1[19][13] + coeff0_20*dmats1[20][13] + coeff0_21*dmats1[21][13] + coeff0_22*dmats1[22][13] + coeff0_23*dmats1[23][13] + coeff0_24*dmats1[24][13] + coeff0_25*dmats1[25][13] + coeff0_26*dmats1[26][13] + coeff0_27*dmats1[27][13] + coeff0_28*dmats1[28][13] + coeff0_29*dmats1[29][13] + coeff0_30*dmats1[30][13] + coeff0_31*dmats1[31][13] + coeff0_32*dmats1[32][13] + coeff0_33*dmats1[33][13] + coeff0_34*dmats1[34][13];
          new_coeff0_14 = coeff0_0*dmats1[0][14] + coeff0_1*dmats1[1][14] + coeff0_2*dmats1[2][14] + coeff0_3*dmats1[3][14] + coeff0_4*dmats1[4][14] + coeff0_5*dmats1[5][14] + coeff0_6*dmats1[6][14] + coeff0_7*dmats1[7][14] + coeff0_8*dmats1[8][14] + coeff0_9*dmats1[9][14] + coeff0_10*dmats1[10][14] + coeff0_11*dmats1[11][14] + coeff0_12*dmats1[12][14] + coeff0_13*dmats1[13][14] + coeff0_14*dmats1[14][14] + coeff0_15*dmats1[15][14] + coeff0_16*dmats1[16][14] + coeff0_17*dmats1[17][14] + coeff0_18*dmats1[18][14] + coeff0_19*dmats1[19][14] + coeff0_20*dmats1[20][14] + coeff0_21*dmats1[21][14] + coeff0_22*dmats1[22][14] + coeff0_23*dmats1[23][14] + coeff0_24*dmats1[24][14] + coeff0_25*dmats1[25][14] + coeff0_26*dmats1[26][14] + coeff0_27*dmats1[27][14] + coeff0_28*dmats1[28][14] + coeff0_29*dmats1[29][14] + coeff0_30*dmats1[30][14] + coeff0_31*dmats1[31][14] + coeff0_32*dmats1[32][14] + coeff0_33*dmats1[33][14] + coeff0_34*dmats1[34][14];
          new_coeff0_15 = coeff0_0*dmats1[0][15] + coeff0_1*dmats1[1][15] + coeff0_2*dmats1[2][15] + coeff0_3*dmats1[3][15] + coeff0_4*dmats1[4][15] + coeff0_5*dmats1[5][15] + coeff0_6*dmats1[6][15] + coeff0_7*dmats1[7][15] + coeff0_8*dmats1[8][15] + coeff0_9*dmats1[9][15] + coeff0_10*dmats1[10][15] + coeff0_11*dmats1[11][15] + coeff0_12*dmats1[12][15] + coeff0_13*dmats1[13][15] + coeff0_14*dmats1[14][15] + coeff0_15*dmats1[15][15] + coeff0_16*dmats1[16][15] + coeff0_17*dmats1[17][15] + coeff0_18*dmats1[18][15] + coeff0_19*dmats1[19][15] + coeff0_20*dmats1[20][15] + coeff0_21*dmats1[21][15] + coeff0_22*dmats1[22][15] + coeff0_23*dmats1[23][15] + coeff0_24*dmats1[24][15] + coeff0_25*dmats1[25][15] + coeff0_26*dmats1[26][15] + coeff0_27*dmats1[27][15] + coeff0_28*dmats1[28][15] + coeff0_29*dmats1[29][15] + coeff0_30*dmats1[30][15] + coeff0_31*dmats1[31][15] + coeff0_32*dmats1[32][15] + coeff0_33*dmats1[33][15] + coeff0_34*dmats1[34][15];
          new_coeff0_16 = coeff0_0*dmats1[0][16] + coeff0_1*dmats1[1][16] + coeff0_2*dmats1[2][16] + coeff0_3*dmats1[3][16] + coeff0_4*dmats1[4][16] + coeff0_5*dmats1[5][16] + coeff0_6*dmats1[6][16] + coeff0_7*dmats1[7][16] + coeff0_8*dmats1[8][16] + coeff0_9*dmats1[9][16] + coeff0_10*dmats1[10][16] + coeff0_11*dmats1[11][16] + coeff0_12*dmats1[12][16] + coeff0_13*dmats1[13][16] + coeff0_14*dmats1[14][16] + coeff0_15*dmats1[15][16] + coeff0_16*dmats1[16][16] + coeff0_17*dmats1[17][16] + coeff0_18*dmats1[18][16] + coeff0_19*dmats1[19][16] + coeff0_20*dmats1[20][16] + coeff0_21*dmats1[21][16] + coeff0_22*dmats1[22][16] + coeff0_23*dmats1[23][16] + coeff0_24*dmats1[24][16] + coeff0_25*dmats1[25][16] + coeff0_26*dmats1[26][16] + coeff0_27*dmats1[27][16] + coeff0_28*dmats1[28][16] + coeff0_29*dmats1[29][16] + coeff0_30*dmats1[30][16] + coeff0_31*dmats1[31][16] + coeff0_32*dmats1[32][16] + coeff0_33*dmats1[33][16] + coeff0_34*dmats1[34][16];
          new_coeff0_17 = coeff0_0*dmats1[0][17] + coeff0_1*dmats1[1][17] + coeff0_2*dmats1[2][17] + coeff0_3*dmats1[3][17] + coeff0_4*dmats1[4][17] + coeff0_5*dmats1[5][17] + coeff0_6*dmats1[6][17] + coeff0_7*dmats1[7][17] + coeff0_8*dmats1[8][17] + coeff0_9*dmats1[9][17] + coeff0_10*dmats1[10][17] + coeff0_11*dmats1[11][17] + coeff0_12*dmats1[12][17] + coeff0_13*dmats1[13][17] + coeff0_14*dmats1[14][17] + coeff0_15*dmats1[15][17] + coeff0_16*dmats1[16][17] + coeff0_17*dmats1[17][17] + coeff0_18*dmats1[18][17] + coeff0_19*dmats1[19][17] + coeff0_20*dmats1[20][17] + coeff0_21*dmats1[21][17] + coeff0_22*dmats1[22][17] + coeff0_23*dmats1[23][17] + coeff0_24*dmats1[24][17] + coeff0_25*dmats1[25][17] + coeff0_26*dmats1[26][17] + coeff0_27*dmats1[27][17] + coeff0_28*dmats1[28][17] + coeff0_29*dmats1[29][17] + coeff0_30*dmats1[30][17] + coeff0_31*dmats1[31][17] + coeff0_32*dmats1[32][17] + coeff0_33*dmats1[33][17] + coeff0_34*dmats1[34][17];
          new_coeff0_18 = coeff0_0*dmats1[0][18] + coeff0_1*dmats1[1][18] + coeff0_2*dmats1[2][18] + coeff0_3*dmats1[3][18] + coeff0_4*dmats1[4][18] + coeff0_5*dmats1[5][18] + coeff0_6*dmats1[6][18] + coeff0_7*dmats1[7][18] + coeff0_8*dmats1[8][18] + coeff0_9*dmats1[9][18] + coeff0_10*dmats1[10][18] + coeff0_11*dmats1[11][18] + coeff0_12*dmats1[12][18] + coeff0_13*dmats1[13][18] + coeff0_14*dmats1[14][18] + coeff0_15*dmats1[15][18] + coeff0_16*dmats1[16][18] + coeff0_17*dmats1[17][18] + coeff0_18*dmats1[18][18] + coeff0_19*dmats1[19][18] + coeff0_20*dmats1[20][18] + coeff0_21*dmats1[21][18] + coeff0_22*dmats1[22][18] + coeff0_23*dmats1[23][18] + coeff0_24*dmats1[24][18] + coeff0_25*dmats1[25][18] + coeff0_26*dmats1[26][18] + coeff0_27*dmats1[27][18] + coeff0_28*dmats1[28][18] + coeff0_29*dmats1[29][18] + coeff0_30*dmats1[30][18] + coeff0_31*dmats1[31][18] + coeff0_32*dmats1[32][18] + coeff0_33*dmats1[33][18] + coeff0_34*dmats1[34][18];
          new_coeff0_19 = coeff0_0*dmats1[0][19] + coeff0_1*dmats1[1][19] + coeff0_2*dmats1[2][19] + coeff0_3*dmats1[3][19] + coeff0_4*dmats1[4][19] + coeff0_5*dmats1[5][19] + coeff0_6*dmats1[6][19] + coeff0_7*dmats1[7][19] + coeff0_8*dmats1[8][19] + coeff0_9*dmats1[9][19] + coeff0_10*dmats1[10][19] + coeff0_11*dmats1[11][19] + coeff0_12*dmats1[12][19] + coeff0_13*dmats1[13][19] + coeff0_14*dmats1[14][19] + coeff0_15*dmats1[15][19] + coeff0_16*dmats1[16][19] + coeff0_17*dmats1[17][19] + coeff0_18*dmats1[18][19] + coeff0_19*dmats1[19][19] + coeff0_20*dmats1[20][19] + coeff0_21*dmats1[21][19] + coeff0_22*dmats1[22][19] + coeff0_23*dmats1[23][19] + coeff0_24*dmats1[24][19] + coeff0_25*dmats1[25][19] + coeff0_26*dmats1[26][19] + coeff0_27*dmats1[27][19] + coeff0_28*dmats1[28][19] + coeff0_29*dmats1[29][19] + coeff0_30*dmats1[30][19] + coeff0_31*dmats1[31][19] + coeff0_32*dmats1[32][19] + coeff0_33*dmats1[33][19] + coeff0_34*dmats1[34][19];
          new_coeff0_20 = coeff0_0*dmats1[0][20] + coeff0_1*dmats1[1][20] + coeff0_2*dmats1[2][20] + coeff0_3*dmats1[3][20] + coeff0_4*dmats1[4][20] + coeff0_5*dmats1[5][20] + coeff0_6*dmats1[6][20] + coeff0_7*dmats1[7][20] + coeff0_8*dmats1[8][20] + coeff0_9*dmats1[9][20] + coeff0_10*dmats1[10][20] + coeff0_11*dmats1[11][20] + coeff0_12*dmats1[12][20] + coeff0_13*dmats1[13][20] + coeff0_14*dmats1[14][20] + coeff0_15*dmats1[15][20] + coeff0_16*dmats1[16][20] + coeff0_17*dmats1[17][20] + coeff0_18*dmats1[18][20] + coeff0_19*dmats1[19][20] + coeff0_20*dmats1[20][20] + coeff0_21*dmats1[21][20] + coeff0_22*dmats1[22][20] + coeff0_23*dmats1[23][20] + coeff0_24*dmats1[24][20] + coeff0_25*dmats1[25][20] + coeff0_26*dmats1[26][20] + coeff0_27*dmats1[27][20] + coeff0_28*dmats1[28][20] + coeff0_29*dmats1[29][20] + coeff0_30*dmats1[30][20] + coeff0_31*dmats1[31][20] + coeff0_32*dmats1[32][20] + coeff0_33*dmats1[33][20] + coeff0_34*dmats1[34][20];
          new_coeff0_21 = coeff0_0*dmats1[0][21] + coeff0_1*dmats1[1][21] + coeff0_2*dmats1[2][21] + coeff0_3*dmats1[3][21] + coeff0_4*dmats1[4][21] + coeff0_5*dmats1[5][21] + coeff0_6*dmats1[6][21] + coeff0_7*dmats1[7][21] + coeff0_8*dmats1[8][21] + coeff0_9*dmats1[9][21] + coeff0_10*dmats1[10][21] + coeff0_11*dmats1[11][21] + coeff0_12*dmats1[12][21] + coeff0_13*dmats1[13][21] + coeff0_14*dmats1[14][21] + coeff0_15*dmats1[15][21] + coeff0_16*dmats1[16][21] + coeff0_17*dmats1[17][21] + coeff0_18*dmats1[18][21] + coeff0_19*dmats1[19][21] + coeff0_20*dmats1[20][21] + coeff0_21*dmats1[21][21] + coeff0_22*dmats1[22][21] + coeff0_23*dmats1[23][21] + coeff0_24*dmats1[24][21] + coeff0_25*dmats1[25][21] + coeff0_26*dmats1[26][21] + coeff0_27*dmats1[27][21] + coeff0_28*dmats1[28][21] + coeff0_29*dmats1[29][21] + coeff0_30*dmats1[30][21] + coeff0_31*dmats1[31][21] + coeff0_32*dmats1[32][21] + coeff0_33*dmats1[33][21] + coeff0_34*dmats1[34][21];
          new_coeff0_22 = coeff0_0*dmats1[0][22] + coeff0_1*dmats1[1][22] + coeff0_2*dmats1[2][22] + coeff0_3*dmats1[3][22] + coeff0_4*dmats1[4][22] + coeff0_5*dmats1[5][22] + coeff0_6*dmats1[6][22] + coeff0_7*dmats1[7][22] + coeff0_8*dmats1[8][22] + coeff0_9*dmats1[9][22] + coeff0_10*dmats1[10][22] + coeff0_11*dmats1[11][22] + coeff0_12*dmats1[12][22] + coeff0_13*dmats1[13][22] + coeff0_14*dmats1[14][22] + coeff0_15*dmats1[15][22] + coeff0_16*dmats1[16][22] + coeff0_17*dmats1[17][22] + coeff0_18*dmats1[18][22] + coeff0_19*dmats1[19][22] + coeff0_20*dmats1[20][22] + coeff0_21*dmats1[21][22] + coeff0_22*dmats1[22][22] + coeff0_23*dmats1[23][22] + coeff0_24*dmats1[24][22] + coeff0_25*dmats1[25][22] + coeff0_26*dmats1[26][22] + coeff0_27*dmats1[27][22] + coeff0_28*dmats1[28][22] + coeff0_29*dmats1[29][22] + coeff0_30*dmats1[30][22] + coeff0_31*dmats1[31][22] + coeff0_32*dmats1[32][22] + coeff0_33*dmats1[33][22] + coeff0_34*dmats1[34][22];
          new_coeff0_23 = coeff0_0*dmats1[0][23] + coeff0_1*dmats1[1][23] + coeff0_2*dmats1[2][23] + coeff0_3*dmats1[3][23] + coeff0_4*dmats1[4][23] + coeff0_5*dmats1[5][23] + coeff0_6*dmats1[6][23] + coeff0_7*dmats1[7][23] + coeff0_8*dmats1[8][23] + coeff0_9*dmats1[9][23] + coeff0_10*dmats1[10][23] + coeff0_11*dmats1[11][23] + coeff0_12*dmats1[12][23] + coeff0_13*dmats1[13][23] + coeff0_14*dmats1[14][23] + coeff0_15*dmats1[15][23] + coeff0_16*dmats1[16][23] + coeff0_17*dmats1[17][23] + coeff0_18*dmats1[18][23] + coeff0_19*dmats1[19][23] + coeff0_20*dmats1[20][23] + coeff0_21*dmats1[21][23] + coeff0_22*dmats1[22][23] + coeff0_23*dmats1[23][23] + coeff0_24*dmats1[24][23] + coeff0_25*dmats1[25][23] + coeff0_26*dmats1[26][23] + coeff0_27*dmats1[27][23] + coeff0_28*dmats1[28][23] + coeff0_29*dmats1[29][23] + coeff0_30*dmats1[30][23] + coeff0_31*dmats1[31][23] + coeff0_32*dmats1[32][23] + coeff0_33*dmats1[33][23] + coeff0_34*dmats1[34][23];
          new_coeff0_24 = coeff0_0*dmats1[0][24] + coeff0_1*dmats1[1][24] + coeff0_2*dmats1[2][24] + coeff0_3*dmats1[3][24] + coeff0_4*dmats1[4][24] + coeff0_5*dmats1[5][24] + coeff0_6*dmats1[6][24] + coeff0_7*dmats1[7][24] + coeff0_8*dmats1[8][24] + coeff0_9*dmats1[9][24] + coeff0_10*dmats1[10][24] + coeff0_11*dmats1[11][24] + coeff0_12*dmats1[12][24] + coeff0_13*dmats1[13][24] + coeff0_14*dmats1[14][24] + coeff0_15*dmats1[15][24] + coeff0_16*dmats1[16][24] + coeff0_17*dmats1[17][24] + coeff0_18*dmats1[18][24] + coeff0_19*dmats1[19][24] + coeff0_20*dmats1[20][24] + coeff0_21*dmats1[21][24] + coeff0_22*dmats1[22][24] + coeff0_23*dmats1[23][24] + coeff0_24*dmats1[24][24] + coeff0_25*dmats1[25][24] + coeff0_26*dmats1[26][24] + coeff0_27*dmats1[27][24] + coeff0_28*dmats1[28][24] + coeff0_29*dmats1[29][24] + coeff0_30*dmats1[30][24] + coeff0_31*dmats1[31][24] + coeff0_32*dmats1[32][24] + coeff0_33*dmats1[33][24] + coeff0_34*dmats1[34][24];
          new_coeff0_25 = coeff0_0*dmats1[0][25] + coeff0_1*dmats1[1][25] + coeff0_2*dmats1[2][25] + coeff0_3*dmats1[3][25] + coeff0_4*dmats1[4][25] + coeff0_5*dmats1[5][25] + coeff0_6*dmats1[6][25] + coeff0_7*dmats1[7][25] + coeff0_8*dmats1[8][25] + coeff0_9*dmats1[9][25] + coeff0_10*dmats1[10][25] + coeff0_11*dmats1[11][25] + coeff0_12*dmats1[12][25] + coeff0_13*dmats1[13][25] + coeff0_14*dmats1[14][25] + coeff0_15*dmats1[15][25] + coeff0_16*dmats1[16][25] + coeff0_17*dmats1[17][25] + coeff0_18*dmats1[18][25] + coeff0_19*dmats1[19][25] + coeff0_20*dmats1[20][25] + coeff0_21*dmats1[21][25] + coeff0_22*dmats1[22][25] + coeff0_23*dmats1[23][25] + coeff0_24*dmats1[24][25] + coeff0_25*dmats1[25][25] + coeff0_26*dmats1[26][25] + coeff0_27*dmats1[27][25] + coeff0_28*dmats1[28][25] + coeff0_29*dmats1[29][25] + coeff0_30*dmats1[30][25] + coeff0_31*dmats1[31][25] + coeff0_32*dmats1[32][25] + coeff0_33*dmats1[33][25] + coeff0_34*dmats1[34][25];
          new_coeff0_26 = coeff0_0*dmats1[0][26] + coeff0_1*dmats1[1][26] + coeff0_2*dmats1[2][26] + coeff0_3*dmats1[3][26] + coeff0_4*dmats1[4][26] + coeff0_5*dmats1[5][26] + coeff0_6*dmats1[6][26] + coeff0_7*dmats1[7][26] + coeff0_8*dmats1[8][26] + coeff0_9*dmats1[9][26] + coeff0_10*dmats1[10][26] + coeff0_11*dmats1[11][26] + coeff0_12*dmats1[12][26] + coeff0_13*dmats1[13][26] + coeff0_14*dmats1[14][26] + coeff0_15*dmats1[15][26] + coeff0_16*dmats1[16][26] + coeff0_17*dmats1[17][26] + coeff0_18*dmats1[18][26] + coeff0_19*dmats1[19][26] + coeff0_20*dmats1[20][26] + coeff0_21*dmats1[21][26] + coeff0_22*dmats1[22][26] + coeff0_23*dmats1[23][26] + coeff0_24*dmats1[24][26] + coeff0_25*dmats1[25][26] + coeff0_26*dmats1[26][26] + coeff0_27*dmats1[27][26] + coeff0_28*dmats1[28][26] + coeff0_29*dmats1[29][26] + coeff0_30*dmats1[30][26] + coeff0_31*dmats1[31][26] + coeff0_32*dmats1[32][26] + coeff0_33*dmats1[33][26] + coeff0_34*dmats1[34][26];
          new_coeff0_27 = coeff0_0*dmats1[0][27] + coeff0_1*dmats1[1][27] + coeff0_2*dmats1[2][27] + coeff0_3*dmats1[3][27] + coeff0_4*dmats1[4][27] + coeff0_5*dmats1[5][27] + coeff0_6*dmats1[6][27] + coeff0_7*dmats1[7][27] + coeff0_8*dmats1[8][27] + coeff0_9*dmats1[9][27] + coeff0_10*dmats1[10][27] + coeff0_11*dmats1[11][27] + coeff0_12*dmats1[12][27] + coeff0_13*dmats1[13][27] + coeff0_14*dmats1[14][27] + coeff0_15*dmats1[15][27] + coeff0_16*dmats1[16][27] + coeff0_17*dmats1[17][27] + coeff0_18*dmats1[18][27] + coeff0_19*dmats1[19][27] + coeff0_20*dmats1[20][27] + coeff0_21*dmats1[21][27] + coeff0_22*dmats1[22][27] + coeff0_23*dmats1[23][27] + coeff0_24*dmats1[24][27] + coeff0_25*dmats1[25][27] + coeff0_26*dmats1[26][27] + coeff0_27*dmats1[27][27] + coeff0_28*dmats1[28][27] + coeff0_29*dmats1[29][27] + coeff0_30*dmats1[30][27] + coeff0_31*dmats1[31][27] + coeff0_32*dmats1[32][27] + coeff0_33*dmats1[33][27] + coeff0_34*dmats1[34][27];
          new_coeff0_28 = coeff0_0*dmats1[0][28] + coeff0_1*dmats1[1][28] + coeff0_2*dmats1[2][28] + coeff0_3*dmats1[3][28] + coeff0_4*dmats1[4][28] + coeff0_5*dmats1[5][28] + coeff0_6*dmats1[6][28] + coeff0_7*dmats1[7][28] + coeff0_8*dmats1[8][28] + coeff0_9*dmats1[9][28] + coeff0_10*dmats1[10][28] + coeff0_11*dmats1[11][28] + coeff0_12*dmats1[12][28] + coeff0_13*dmats1[13][28] + coeff0_14*dmats1[14][28] + coeff0_15*dmats1[15][28] + coeff0_16*dmats1[16][28] + coeff0_17*dmats1[17][28] + coeff0_18*dmats1[18][28] + coeff0_19*dmats1[19][28] + coeff0_20*dmats1[20][28] + coeff0_21*dmats1[21][28] + coeff0_22*dmats1[22][28] + coeff0_23*dmats1[23][28] + coeff0_24*dmats1[24][28] + coeff0_25*dmats1[25][28] + coeff0_26*dmats1[26][28] + coeff0_27*dmats1[27][28] + coeff0_28*dmats1[28][28] + coeff0_29*dmats1[29][28] + coeff0_30*dmats1[30][28] + coeff0_31*dmats1[31][28] + coeff0_32*dmats1[32][28] + coeff0_33*dmats1[33][28] + coeff0_34*dmats1[34][28];
          new_coeff0_29 = coeff0_0*dmats1[0][29] + coeff0_1*dmats1[1][29] + coeff0_2*dmats1[2][29] + coeff0_3*dmats1[3][29] + coeff0_4*dmats1[4][29] + coeff0_5*dmats1[5][29] + coeff0_6*dmats1[6][29] + coeff0_7*dmats1[7][29] + coeff0_8*dmats1[8][29] + coeff0_9*dmats1[9][29] + coeff0_10*dmats1[10][29] + coeff0_11*dmats1[11][29] + coeff0_12*dmats1[12][29] + coeff0_13*dmats1[13][29] + coeff0_14*dmats1[14][29] + coeff0_15*dmats1[15][29] + coeff0_16*dmats1[16][29] + coeff0_17*dmats1[17][29] + coeff0_18*dmats1[18][29] + coeff0_19*dmats1[19][29] + coeff0_20*dmats1[20][29] + coeff0_21*dmats1[21][29] + coeff0_22*dmats1[22][29] + coeff0_23*dmats1[23][29] + coeff0_24*dmats1[24][29] + coeff0_25*dmats1[25][29] + coeff0_26*dmats1[26][29] + coeff0_27*dmats1[27][29] + coeff0_28*dmats1[28][29] + coeff0_29*dmats1[29][29] + coeff0_30*dmats1[30][29] + coeff0_31*dmats1[31][29] + coeff0_32*dmats1[32][29] + coeff0_33*dmats1[33][29] + coeff0_34*dmats1[34][29];
          new_coeff0_30 = coeff0_0*dmats1[0][30] + coeff0_1*dmats1[1][30] + coeff0_2*dmats1[2][30] + coeff0_3*dmats1[3][30] + coeff0_4*dmats1[4][30] + coeff0_5*dmats1[5][30] + coeff0_6*dmats1[6][30] + coeff0_7*dmats1[7][30] + coeff0_8*dmats1[8][30] + coeff0_9*dmats1[9][30] + coeff0_10*dmats1[10][30] + coeff0_11*dmats1[11][30] + coeff0_12*dmats1[12][30] + coeff0_13*dmats1[13][30] + coeff0_14*dmats1[14][30] + coeff0_15*dmats1[15][30] + coeff0_16*dmats1[16][30] + coeff0_17*dmats1[17][30] + coeff0_18*dmats1[18][30] + coeff0_19*dmats1[19][30] + coeff0_20*dmats1[20][30] + coeff0_21*dmats1[21][30] + coeff0_22*dmats1[22][30] + coeff0_23*dmats1[23][30] + coeff0_24*dmats1[24][30] + coeff0_25*dmats1[25][30] + coeff0_26*dmats1[26][30] + coeff0_27*dmats1[27][30] + coeff0_28*dmats1[28][30] + coeff0_29*dmats1[29][30] + coeff0_30*dmats1[30][30] + coeff0_31*dmats1[31][30] + coeff0_32*dmats1[32][30] + coeff0_33*dmats1[33][30] + coeff0_34*dmats1[34][30];
          new_coeff0_31 = coeff0_0*dmats1[0][31] + coeff0_1*dmats1[1][31] + coeff0_2*dmats1[2][31] + coeff0_3*dmats1[3][31] + coeff0_4*dmats1[4][31] + coeff0_5*dmats1[5][31] + coeff0_6*dmats1[6][31] + coeff0_7*dmats1[7][31] + coeff0_8*dmats1[8][31] + coeff0_9*dmats1[9][31] + coeff0_10*dmats1[10][31] + coeff0_11*dmats1[11][31] + coeff0_12*dmats1[12][31] + coeff0_13*dmats1[13][31] + coeff0_14*dmats1[14][31] + coeff0_15*dmats1[15][31] + coeff0_16*dmats1[16][31] + coeff0_17*dmats1[17][31] + coeff0_18*dmats1[18][31] + coeff0_19*dmats1[19][31] + coeff0_20*dmats1[20][31] + coeff0_21*dmats1[21][31] + coeff0_22*dmats1[22][31] + coeff0_23*dmats1[23][31] + coeff0_24*dmats1[24][31] + coeff0_25*dmats1[25][31] + coeff0_26*dmats1[26][31] + coeff0_27*dmats1[27][31] + coeff0_28*dmats1[28][31] + coeff0_29*dmats1[29][31] + coeff0_30*dmats1[30][31] + coeff0_31*dmats1[31][31] + coeff0_32*dmats1[32][31] + coeff0_33*dmats1[33][31] + coeff0_34*dmats1[34][31];
          new_coeff0_32 = coeff0_0*dmats1[0][32] + coeff0_1*dmats1[1][32] + coeff0_2*dmats1[2][32] + coeff0_3*dmats1[3][32] + coeff0_4*dmats1[4][32] + coeff0_5*dmats1[5][32] + coeff0_6*dmats1[6][32] + coeff0_7*dmats1[7][32] + coeff0_8*dmats1[8][32] + coeff0_9*dmats1[9][32] + coeff0_10*dmats1[10][32] + coeff0_11*dmats1[11][32] + coeff0_12*dmats1[12][32] + coeff0_13*dmats1[13][32] + coeff0_14*dmats1[14][32] + coeff0_15*dmats1[15][32] + coeff0_16*dmats1[16][32] + coeff0_17*dmats1[17][32] + coeff0_18*dmats1[18][32] + coeff0_19*dmats1[19][32] + coeff0_20*dmats1[20][32] + coeff0_21*dmats1[21][32] + coeff0_22*dmats1[22][32] + coeff0_23*dmats1[23][32] + coeff0_24*dmats1[24][32] + coeff0_25*dmats1[25][32] + coeff0_26*dmats1[26][32] + coeff0_27*dmats1[27][32] + coeff0_28*dmats1[28][32] + coeff0_29*dmats1[29][32] + coeff0_30*dmats1[30][32] + coeff0_31*dmats1[31][32] + coeff0_32*dmats1[32][32] + coeff0_33*dmats1[33][32] + coeff0_34*dmats1[34][32];
          new_coeff0_33 = coeff0_0*dmats1[0][33] + coeff0_1*dmats1[1][33] + coeff0_2*dmats1[2][33] + coeff0_3*dmats1[3][33] + coeff0_4*dmats1[4][33] + coeff0_5*dmats1[5][33] + coeff0_6*dmats1[6][33] + coeff0_7*dmats1[7][33] + coeff0_8*dmats1[8][33] + coeff0_9*dmats1[9][33] + coeff0_10*dmats1[10][33] + coeff0_11*dmats1[11][33] + coeff0_12*dmats1[12][33] + coeff0_13*dmats1[13][33] + coeff0_14*dmats1[14][33] + coeff0_15*dmats1[15][33] + coeff0_16*dmats1[16][33] + coeff0_17*dmats1[17][33] + coeff0_18*dmats1[18][33] + coeff0_19*dmats1[19][33] + coeff0_20*dmats1[20][33] + coeff0_21*dmats1[21][33] + coeff0_22*dmats1[22][33] + coeff0_23*dmats1[23][33] + coeff0_24*dmats1[24][33] + coeff0_25*dmats1[25][33] + coeff0_26*dmats1[26][33] + coeff0_27*dmats1[27][33] + coeff0_28*dmats1[28][33] + coeff0_29*dmats1[29][33] + coeff0_30*dmats1[30][33] + coeff0_31*dmats1[31][33] + coeff0_32*dmats1[32][33] + coeff0_33*dmats1[33][33] + coeff0_34*dmats1[34][33];
          new_coeff0_34 = coeff0_0*dmats1[0][34] + coeff0_1*dmats1[1][34] + coeff0_2*dmats1[2][34] + coeff0_3*dmats1[3][34] + coeff0_4*dmats1[4][34] + coeff0_5*dmats1[5][34] + coeff0_6*dmats1[6][34] + coeff0_7*dmats1[7][34] + coeff0_8*dmats1[8][34] + coeff0_9*dmats1[9][34] + coeff0_10*dmats1[10][34] + coeff0_11*dmats1[11][34] + coeff0_12*dmats1[12][34] + coeff0_13*dmats1[13][34] + coeff0_14*dmats1[14][34] + coeff0_15*dmats1[15][34] + coeff0_16*dmats1[16][34] + coeff0_17*dmats1[17][34] + coeff0_18*dmats1[18][34] + coeff0_19*dmats1[19][34] + coeff0_20*dmats1[20][34] + coeff0_21*dmats1[21][34] + coeff0_22*dmats1[22][34] + coeff0_23*dmats1[23][34] + coeff0_24*dmats1[24][34] + coeff0_25*dmats1[25][34] + coeff0_26*dmats1[26][34] + coeff0_27*dmats1[27][34] + coeff0_28*dmats1[28][34] + coeff0_29*dmats1[29][34] + coeff0_30*dmats1[30][34] + coeff0_31*dmats1[31][34] + coeff0_32*dmats1[32][34] + coeff0_33*dmats1[33][34] + coeff0_34*dmats1[34][34];
        }
        if(combinations[deriv_num][j] == 2)
        {
          new_coeff0_0 = coeff0_0*dmats2[0][0] + coeff0_1*dmats2[1][0] + coeff0_2*dmats2[2][0] + coeff0_3*dmats2[3][0] + coeff0_4*dmats2[4][0] + coeff0_5*dmats2[5][0] + coeff0_6*dmats2[6][0] + coeff0_7*dmats2[7][0] + coeff0_8*dmats2[8][0] + coeff0_9*dmats2[9][0] + coeff0_10*dmats2[10][0] + coeff0_11*dmats2[11][0] + coeff0_12*dmats2[12][0] + coeff0_13*dmats2[13][0] + coeff0_14*dmats2[14][0] + coeff0_15*dmats2[15][0] + coeff0_16*dmats2[16][0] + coeff0_17*dmats2[17][0] + coeff0_18*dmats2[18][0] + coeff0_19*dmats2[19][0] + coeff0_20*dmats2[20][0] + coeff0_21*dmats2[21][0] + coeff0_22*dmats2[22][0] + coeff0_23*dmats2[23][0] + coeff0_24*dmats2[24][0] + coeff0_25*dmats2[25][0] + coeff0_26*dmats2[26][0] + coeff0_27*dmats2[27][0] + coeff0_28*dmats2[28][0] + coeff0_29*dmats2[29][0] + coeff0_30*dmats2[30][0] + coeff0_31*dmats2[31][0] + coeff0_32*dmats2[32][0] + coeff0_33*dmats2[33][0] + coeff0_34*dmats2[34][0];
          new_coeff0_1 = coeff0_0*dmats2[0][1] + coeff0_1*dmats2[1][1] + coeff0_2*dmats2[2][1] + coeff0_3*dmats2[3][1] + coeff0_4*dmats2[4][1] + coeff0_5*dmats2[5][1] + coeff0_6*dmats2[6][1] + coeff0_7*dmats2[7][1] + coeff0_8*dmats2[8][1] + coeff0_9*dmats2[9][1] + coeff0_10*dmats2[10][1] + coeff0_11*dmats2[11][1] + coeff0_12*dmats2[12][1] + coeff0_13*dmats2[13][1] + coeff0_14*dmats2[14][1] + coeff0_15*dmats2[15][1] + coeff0_16*dmats2[16][1] + coeff0_17*dmats2[17][1] + coeff0_18*dmats2[18][1] + coeff0_19*dmats2[19][1] + coeff0_20*dmats2[20][1] + coeff0_21*dmats2[21][1] + coeff0_22*dmats2[22][1] + coeff0_23*dmats2[23][1] + coeff0_24*dmats2[24][1] + coeff0_25*dmats2[25][1] + coeff0_26*dmats2[26][1] + coeff0_27*dmats2[27][1] + coeff0_28*dmats2[28][1] + coeff0_29*dmats2[29][1] + coeff0_30*dmats2[30][1] + coeff0_31*dmats2[31][1] + coeff0_32*dmats2[32][1] + coeff0_33*dmats2[33][1] + coeff0_34*dmats2[34][1];
          new_coeff0_2 = coeff0_0*dmats2[0][2] + coeff0_1*dmats2[1][2] + coeff0_2*dmats2[2][2] + coeff0_3*dmats2[3][2] + coeff0_4*dmats2[4][2] + coeff0_5*dmats2[5][2] + coeff0_6*dmats2[6][2] + coeff0_7*dmats2[7][2] + coeff0_8*dmats2[8][2] + coeff0_9*dmats2[9][2] + coeff0_10*dmats2[10][2] + coeff0_11*dmats2[11][2] + coeff0_12*dmats2[12][2] + coeff0_13*dmats2[13][2] + coeff0_14*dmats2[14][2] + coeff0_15*dmats2[15][2] + coeff0_16*dmats2[16][2] + coeff0_17*dmats2[17][2] + coeff0_18*dmats2[18][2] + coeff0_19*dmats2[19][2] + coeff0_20*dmats2[20][2] + coeff0_21*dmats2[21][2] + coeff0_22*dmats2[22][2] + coeff0_23*dmats2[23][2] + coeff0_24*dmats2[24][2] + coeff0_25*dmats2[25][2] + coeff0_26*dmats2[26][2] + coeff0_27*dmats2[27][2] + coeff0_28*dmats2[28][2] + coeff0_29*dmats2[29][2] + coeff0_30*dmats2[30][2] + coeff0_31*dmats2[31][2] + coeff0_32*dmats2[32][2] + coeff0_33*dmats2[33][2] + coeff0_34*dmats2[34][2];
          new_coeff0_3 = coeff0_0*dmats2[0][3] + coeff0_1*dmats2[1][3] + coeff0_2*dmats2[2][3] + coeff0_3*dmats2[3][3] + coeff0_4*dmats2[4][3] + coeff0_5*dmats2[5][3] + coeff0_6*dmats2[6][3] + coeff0_7*dmats2[7][3] + coeff0_8*dmats2[8][3] + coeff0_9*dmats2[9][3] + coeff0_10*dmats2[10][3] + coeff0_11*dmats2[11][3] + coeff0_12*dmats2[12][3] + coeff0_13*dmats2[13][3] + coeff0_14*dmats2[14][3] + coeff0_15*dmats2[15][3] + coeff0_16*dmats2[16][3] + coeff0_17*dmats2[17][3] + coeff0_18*dmats2[18][3] + coeff0_19*dmats2[19][3] + coeff0_20*dmats2[20][3] + coeff0_21*dmats2[21][3] + coeff0_22*dmats2[22][3] + coeff0_23*dmats2[23][3] + coeff0_24*dmats2[24][3] + coeff0_25*dmats2[25][3] + coeff0_26*dmats2[26][3] + coeff0_27*dmats2[27][3] + coeff0_28*dmats2[28][3] + coeff0_29*dmats2[29][3] + coeff0_30*dmats2[30][3] + coeff0_31*dmats2[31][3] + coeff0_32*dmats2[32][3] + coeff0_33*dmats2[33][3] + coeff0_34*dmats2[34][3];
          new_coeff0_4 = coeff0_0*dmats2[0][4] + coeff0_1*dmats2[1][4] + coeff0_2*dmats2[2][4] + coeff0_3*dmats2[3][4] + coeff0_4*dmats2[4][4] + coeff0_5*dmats2[5][4] + coeff0_6*dmats2[6][4] + coeff0_7*dmats2[7][4] + coeff0_8*dmats2[8][4] + coeff0_9*dmats2[9][4] + coeff0_10*dmats2[10][4] + coeff0_11*dmats2[11][4] + coeff0_12*dmats2[12][4] + coeff0_13*dmats2[13][4] + coeff0_14*dmats2[14][4] + coeff0_15*dmats2[15][4] + coeff0_16*dmats2[16][4] + coeff0_17*dmats2[17][4] + coeff0_18*dmats2[18][4] + coeff0_19*dmats2[19][4] + coeff0_20*dmats2[20][4] + coeff0_21*dmats2[21][4] + coeff0_22*dmats2[22][4] + coeff0_23*dmats2[23][4] + coeff0_24*dmats2[24][4] + coeff0_25*dmats2[25][4] + coeff0_26*dmats2[26][4] + coeff0_27*dmats2[27][4] + coeff0_28*dmats2[28][4] + coeff0_29*dmats2[29][4] + coeff0_30*dmats2[30][4] + coeff0_31*dmats2[31][4] + coeff0_32*dmats2[32][4] + coeff0_33*dmats2[33][4] + coeff0_34*dmats2[34][4];
          new_coeff0_5 = coeff0_0*dmats2[0][5] + coeff0_1*dmats2[1][5] + coeff0_2*dmats2[2][5] + coeff0_3*dmats2[3][5] + coeff0_4*dmats2[4][5] + coeff0_5*dmats2[5][5] + coeff0_6*dmats2[6][5] + coeff0_7*dmats2[7][5] + coeff0_8*dmats2[8][5] + coeff0_9*dmats2[9][5] + coeff0_10*dmats2[10][5] + coeff0_11*dmats2[11][5] + coeff0_12*dmats2[12][5] + coeff0_13*dmats2[13][5] + coeff0_14*dmats2[14][5] + coeff0_15*dmats2[15][5] + coeff0_16*dmats2[16][5] + coeff0_17*dmats2[17][5] + coeff0_18*dmats2[18][5] + coeff0_19*dmats2[19][5] + coeff0_20*dmats2[20][5] + coeff0_21*dmats2[21][5] + coeff0_22*dmats2[22][5] + coeff0_23*dmats2[23][5] + coeff0_24*dmats2[24][5] + coeff0_25*dmats2[25][5] + coeff0_26*dmats2[26][5] + coeff0_27*dmats2[27][5] + coeff0_28*dmats2[28][5] + coeff0_29*dmats2[29][5] + coeff0_30*dmats2[30][5] + coeff0_31*dmats2[31][5] + coeff0_32*dmats2[32][5] + coeff0_33*dmats2[33][5] + coeff0_34*dmats2[34][5];
          new_coeff0_6 = coeff0_0*dmats2[0][6] + coeff0_1*dmats2[1][6] + coeff0_2*dmats2[2][6] + coeff0_3*dmats2[3][6] + coeff0_4*dmats2[4][6] + coeff0_5*dmats2[5][6] + coeff0_6*dmats2[6][6] + coeff0_7*dmats2[7][6] + coeff0_8*dmats2[8][6] + coeff0_9*dmats2[9][6] + coeff0_10*dmats2[10][6] + coeff0_11*dmats2[11][6] + coeff0_12*dmats2[12][6] + coeff0_13*dmats2[13][6] + coeff0_14*dmats2[14][6] + coeff0_15*dmats2[15][6] + coeff0_16*dmats2[16][6] + coeff0_17*dmats2[17][6] + coeff0_18*dmats2[18][6] + coeff0_19*dmats2[19][6] + coeff0_20*dmats2[20][6] + coeff0_21*dmats2[21][6] + coeff0_22*dmats2[22][6] + coeff0_23*dmats2[23][6] + coeff0_24*dmats2[24][6] + coeff0_25*dmats2[25][6] + coeff0_26*dmats2[26][6] + coeff0_27*dmats2[27][6] + coeff0_28*dmats2[28][6] + coeff0_29*dmats2[29][6] + coeff0_30*dmats2[30][6] + coeff0_31*dmats2[31][6] + coeff0_32*dmats2[32][6] + coeff0_33*dmats2[33][6] + coeff0_34*dmats2[34][6];
          new_coeff0_7 = coeff0_0*dmats2[0][7] + coeff0_1*dmats2[1][7] + coeff0_2*dmats2[2][7] + coeff0_3*dmats2[3][7] + coeff0_4*dmats2[4][7] + coeff0_5*dmats2[5][7] + coeff0_6*dmats2[6][7] + coeff0_7*dmats2[7][7] + coeff0_8*dmats2[8][7] + coeff0_9*dmats2[9][7] + coeff0_10*dmats2[10][7] + coeff0_11*dmats2[11][7] + coeff0_12*dmats2[12][7] + coeff0_13*dmats2[13][7] + coeff0_14*dmats2[14][7] + coeff0_15*dmats2[15][7] + coeff0_16*dmats2[16][7] + coeff0_17*dmats2[17][7] + coeff0_18*dmats2[18][7] + coeff0_19*dmats2[19][7] + coeff0_20*dmats2[20][7] + coeff0_21*dmats2[21][7] + coeff0_22*dmats2[22][7] + coeff0_23*dmats2[23][7] + coeff0_24*dmats2[24][7] + coeff0_25*dmats2[25][7] + coeff0_26*dmats2[26][7] + coeff0_27*dmats2[27][7] + coeff0_28*dmats2[28][7] + coeff0_29*dmats2[29][7] + coeff0_30*dmats2[30][7] + coeff0_31*dmats2[31][7] + coeff0_32*dmats2[32][7] + coeff0_33*dmats2[33][7] + coeff0_34*dmats2[34][7];
          new_coeff0_8 = coeff0_0*dmats2[0][8] + coeff0_1*dmats2[1][8] + coeff0_2*dmats2[2][8] + coeff0_3*dmats2[3][8] + coeff0_4*dmats2[4][8] + coeff0_5*dmats2[5][8] + coeff0_6*dmats2[6][8] + coeff0_7*dmats2[7][8] + coeff0_8*dmats2[8][8] + coeff0_9*dmats2[9][8] + coeff0_10*dmats2[10][8] + coeff0_11*dmats2[11][8] + coeff0_12*dmats2[12][8] + coeff0_13*dmats2[13][8] + coeff0_14*dmats2[14][8] + coeff0_15*dmats2[15][8] + coeff0_16*dmats2[16][8] + coeff0_17*dmats2[17][8] + coeff0_18*dmats2[18][8] + coeff0_19*dmats2[19][8] + coeff0_20*dmats2[20][8] + coeff0_21*dmats2[21][8] + coeff0_22*dmats2[22][8] + coeff0_23*dmats2[23][8] + coeff0_24*dmats2[24][8] + coeff0_25*dmats2[25][8] + coeff0_26*dmats2[26][8] + coeff0_27*dmats2[27][8] + coeff0_28*dmats2[28][8] + coeff0_29*dmats2[29][8] + coeff0_30*dmats2[30][8] + coeff0_31*dmats2[31][8] + coeff0_32*dmats2[32][8] + coeff0_33*dmats2[33][8] + coeff0_34*dmats2[34][8];
          new_coeff0_9 = coeff0_0*dmats2[0][9] + coeff0_1*dmats2[1][9] + coeff0_2*dmats2[2][9] + coeff0_3*dmats2[3][9] + coeff0_4*dmats2[4][9] + coeff0_5*dmats2[5][9] + coeff0_6*dmats2[6][9] + coeff0_7*dmats2[7][9] + coeff0_8*dmats2[8][9] + coeff0_9*dmats2[9][9] + coeff0_10*dmats2[10][9] + coeff0_11*dmats2[11][9] + coeff0_12*dmats2[12][9] + coeff0_13*dmats2[13][9] + coeff0_14*dmats2[14][9] + coeff0_15*dmats2[15][9] + coeff0_16*dmats2[16][9] + coeff0_17*dmats2[17][9] + coeff0_18*dmats2[18][9] + coeff0_19*dmats2[19][9] + coeff0_20*dmats2[20][9] + coeff0_21*dmats2[21][9] + coeff0_22*dmats2[22][9] + coeff0_23*dmats2[23][9] + coeff0_24*dmats2[24][9] + coeff0_25*dmats2[25][9] + coeff0_26*dmats2[26][9] + coeff0_27*dmats2[27][9] + coeff0_28*dmats2[28][9] + coeff0_29*dmats2[29][9] + coeff0_30*dmats2[30][9] + coeff0_31*dmats2[31][9] + coeff0_32*dmats2[32][9] + coeff0_33*dmats2[33][9] + coeff0_34*dmats2[34][9];
          new_coeff0_10 = coeff0_0*dmats2[0][10] + coeff0_1*dmats2[1][10] + coeff0_2*dmats2[2][10] + coeff0_3*dmats2[3][10] + coeff0_4*dmats2[4][10] + coeff0_5*dmats2[5][10] + coeff0_6*dmats2[6][10] + coeff0_7*dmats2[7][10] + coeff0_8*dmats2[8][10] + coeff0_9*dmats2[9][10] + coeff0_10*dmats2[10][10] + coeff0_11*dmats2[11][10] + coeff0_12*dmats2[12][10] + coeff0_13*dmats2[13][10] + coeff0_14*dmats2[14][10] + coeff0_15*dmats2[15][10] + coeff0_16*dmats2[16][10] + coeff0_17*dmats2[17][10] + coeff0_18*dmats2[18][10] + coeff0_19*dmats2[19][10] + coeff0_20*dmats2[20][10] + coeff0_21*dmats2[21][10] + coeff0_22*dmats2[22][10] + coeff0_23*dmats2[23][10] + coeff0_24*dmats2[24][10] + coeff0_25*dmats2[25][10] + coeff0_26*dmats2[26][10] + coeff0_27*dmats2[27][10] + coeff0_28*dmats2[28][10] + coeff0_29*dmats2[29][10] + coeff0_30*dmats2[30][10] + coeff0_31*dmats2[31][10] + coeff0_32*dmats2[32][10] + coeff0_33*dmats2[33][10] + coeff0_34*dmats2[34][10];
          new_coeff0_11 = coeff0_0*dmats2[0][11] + coeff0_1*dmats2[1][11] + coeff0_2*dmats2[2][11] + coeff0_3*dmats2[3][11] + coeff0_4*dmats2[4][11] + coeff0_5*dmats2[5][11] + coeff0_6*dmats2[6][11] + coeff0_7*dmats2[7][11] + coeff0_8*dmats2[8][11] + coeff0_9*dmats2[9][11] + coeff0_10*dmats2[10][11] + coeff0_11*dmats2[11][11] + coeff0_12*dmats2[12][11] + coeff0_13*dmats2[13][11] + coeff0_14*dmats2[14][11] + coeff0_15*dmats2[15][11] + coeff0_16*dmats2[16][11] + coeff0_17*dmats2[17][11] + coeff0_18*dmats2[18][11] + coeff0_19*dmats2[19][11] + coeff0_20*dmats2[20][11] + coeff0_21*dmats2[21][11] + coeff0_22*dmats2[22][11] + coeff0_23*dmats2[23][11] + coeff0_24*dmats2[24][11] + coeff0_25*dmats2[25][11] + coeff0_26*dmats2[26][11] + coeff0_27*dmats2[27][11] + coeff0_28*dmats2[28][11] + coeff0_29*dmats2[29][11] + coeff0_30*dmats2[30][11] + coeff0_31*dmats2[31][11] + coeff0_32*dmats2[32][11] + coeff0_33*dmats2[33][11] + coeff0_34*dmats2[34][11];
          new_coeff0_12 = coeff0_0*dmats2[0][12] + coeff0_1*dmats2[1][12] + coeff0_2*dmats2[2][12] + coeff0_3*dmats2[3][12] + coeff0_4*dmats2[4][12] + coeff0_5*dmats2[5][12] + coeff0_6*dmats2[6][12] + coeff0_7*dmats2[7][12] + coeff0_8*dmats2[8][12] + coeff0_9*dmats2[9][12] + coeff0_10*dmats2[10][12] + coeff0_11*dmats2[11][12] + coeff0_12*dmats2[12][12] + coeff0_13*dmats2[13][12] + coeff0_14*dmats2[14][12] + coeff0_15*dmats2[15][12] + coeff0_16*dmats2[16][12] + coeff0_17*dmats2[17][12] + coeff0_18*dmats2[18][12] + coeff0_19*dmats2[19][12] + coeff0_20*dmats2[20][12] + coeff0_21*dmats2[21][12] + coeff0_22*dmats2[22][12] + coeff0_23*dmats2[23][12] + coeff0_24*dmats2[24][12] + coeff0_25*dmats2[25][12] + coeff0_26*dmats2[26][12] + coeff0_27*dmats2[27][12] + coeff0_28*dmats2[28][12] + coeff0_29*dmats2[29][12] + coeff0_30*dmats2[30][12] + coeff0_31*dmats2[31][12] + coeff0_32*dmats2[32][12] + coeff0_33*dmats2[33][12] + coeff0_34*dmats2[34][12];
          new_coeff0_13 = coeff0_0*dmats2[0][13] + coeff0_1*dmats2[1][13] + coeff0_2*dmats2[2][13] + coeff0_3*dmats2[3][13] + coeff0_4*dmats2[4][13] + coeff0_5*dmats2[5][13] + coeff0_6*dmats2[6][13] + coeff0_7*dmats2[7][13] + coeff0_8*dmats2[8][13] + coeff0_9*dmats2[9][13] + coeff0_10*dmats2[10][13] + coeff0_11*dmats2[11][13] + coeff0_12*dmats2[12][13] + coeff0_13*dmats2[13][13] + coeff0_14*dmats2[14][13] + coeff0_15*dmats2[15][13] + coeff0_16*dmats2[16][13] + coeff0_17*dmats2[17][13] + coeff0_18*dmats2[18][13] + coeff0_19*dmats2[19][13] + coeff0_20*dmats2[20][13] + coeff0_21*dmats2[21][13] + coeff0_22*dmats2[22][13] + coeff0_23*dmats2[23][13] + coeff0_24*dmats2[24][13] + coeff0_25*dmats2[25][13] + coeff0_26*dmats2[26][13] + coeff0_27*dmats2[27][13] + coeff0_28*dmats2[28][13] + coeff0_29*dmats2[29][13] + coeff0_30*dmats2[30][13] + coeff0_31*dmats2[31][13] + coeff0_32*dmats2[32][13] + coeff0_33*dmats2[33][13] + coeff0_34*dmats2[34][13];
          new_coeff0_14 = coeff0_0*dmats2[0][14] + coeff0_1*dmats2[1][14] + coeff0_2*dmats2[2][14] + coeff0_3*dmats2[3][14] + coeff0_4*dmats2[4][14] + coeff0_5*dmats2[5][14] + coeff0_6*dmats2[6][14] + coeff0_7*dmats2[7][14] + coeff0_8*dmats2[8][14] + coeff0_9*dmats2[9][14] + coeff0_10*dmats2[10][14] + coeff0_11*dmats2[11][14] + coeff0_12*dmats2[12][14] + coeff0_13*dmats2[13][14] + coeff0_14*dmats2[14][14] + coeff0_15*dmats2[15][14] + coeff0_16*dmats2[16][14] + coeff0_17*dmats2[17][14] + coeff0_18*dmats2[18][14] + coeff0_19*dmats2[19][14] + coeff0_20*dmats2[20][14] + coeff0_21*dmats2[21][14] + coeff0_22*dmats2[22][14] + coeff0_23*dmats2[23][14] + coeff0_24*dmats2[24][14] + coeff0_25*dmats2[25][14] + coeff0_26*dmats2[26][14] + coeff0_27*dmats2[27][14] + coeff0_28*dmats2[28][14] + coeff0_29*dmats2[29][14] + coeff0_30*dmats2[30][14] + coeff0_31*dmats2[31][14] + coeff0_32*dmats2[32][14] + coeff0_33*dmats2[33][14] + coeff0_34*dmats2[34][14];
          new_coeff0_15 = coeff0_0*dmats2[0][15] + coeff0_1*dmats2[1][15] + coeff0_2*dmats2[2][15] + coeff0_3*dmats2[3][15] + coeff0_4*dmats2[4][15] + coeff0_5*dmats2[5][15] + coeff0_6*dmats2[6][15] + coeff0_7*dmats2[7][15] + coeff0_8*dmats2[8][15] + coeff0_9*dmats2[9][15] + coeff0_10*dmats2[10][15] + coeff0_11*dmats2[11][15] + coeff0_12*dmats2[12][15] + coeff0_13*dmats2[13][15] + coeff0_14*dmats2[14][15] + coeff0_15*dmats2[15][15] + coeff0_16*dmats2[16][15] + coeff0_17*dmats2[17][15] + coeff0_18*dmats2[18][15] + coeff0_19*dmats2[19][15] + coeff0_20*dmats2[20][15] + coeff0_21*dmats2[21][15] + coeff0_22*dmats2[22][15] + coeff0_23*dmats2[23][15] + coeff0_24*dmats2[24][15] + coeff0_25*dmats2[25][15] + coeff0_26*dmats2[26][15] + coeff0_27*dmats2[27][15] + coeff0_28*dmats2[28][15] + coeff0_29*dmats2[29][15] + coeff0_30*dmats2[30][15] + coeff0_31*dmats2[31][15] + coeff0_32*dmats2[32][15] + coeff0_33*dmats2[33][15] + coeff0_34*dmats2[34][15];
          new_coeff0_16 = coeff0_0*dmats2[0][16] + coeff0_1*dmats2[1][16] + coeff0_2*dmats2[2][16] + coeff0_3*dmats2[3][16] + coeff0_4*dmats2[4][16] + coeff0_5*dmats2[5][16] + coeff0_6*dmats2[6][16] + coeff0_7*dmats2[7][16] + coeff0_8*dmats2[8][16] + coeff0_9*dmats2[9][16] + coeff0_10*dmats2[10][16] + coeff0_11*dmats2[11][16] + coeff0_12*dmats2[12][16] + coeff0_13*dmats2[13][16] + coeff0_14*dmats2[14][16] + coeff0_15*dmats2[15][16] + coeff0_16*dmats2[16][16] + coeff0_17*dmats2[17][16] + coeff0_18*dmats2[18][16] + coeff0_19*dmats2[19][16] + coeff0_20*dmats2[20][16] + coeff0_21*dmats2[21][16] + coeff0_22*dmats2[22][16] + coeff0_23*dmats2[23][16] + coeff0_24*dmats2[24][16] + coeff0_25*dmats2[25][16] + coeff0_26*dmats2[26][16] + coeff0_27*dmats2[27][16] + coeff0_28*dmats2[28][16] + coeff0_29*dmats2[29][16] + coeff0_30*dmats2[30][16] + coeff0_31*dmats2[31][16] + coeff0_32*dmats2[32][16] + coeff0_33*dmats2[33][16] + coeff0_34*dmats2[34][16];
          new_coeff0_17 = coeff0_0*dmats2[0][17] + coeff0_1*dmats2[1][17] + coeff0_2*dmats2[2][17] + coeff0_3*dmats2[3][17] + coeff0_4*dmats2[4][17] + coeff0_5*dmats2[5][17] + coeff0_6*dmats2[6][17] + coeff0_7*dmats2[7][17] + coeff0_8*dmats2[8][17] + coeff0_9*dmats2[9][17] + coeff0_10*dmats2[10][17] + coeff0_11*dmats2[11][17] + coeff0_12*dmats2[12][17] + coeff0_13*dmats2[13][17] + coeff0_14*dmats2[14][17] + coeff0_15*dmats2[15][17] + coeff0_16*dmats2[16][17] + coeff0_17*dmats2[17][17] + coeff0_18*dmats2[18][17] + coeff0_19*dmats2[19][17] + coeff0_20*dmats2[20][17] + coeff0_21*dmats2[21][17] + coeff0_22*dmats2[22][17] + coeff0_23*dmats2[23][17] + coeff0_24*dmats2[24][17] + coeff0_25*dmats2[25][17] + coeff0_26*dmats2[26][17] + coeff0_27*dmats2[27][17] + coeff0_28*dmats2[28][17] + coeff0_29*dmats2[29][17] + coeff0_30*dmats2[30][17] + coeff0_31*dmats2[31][17] + coeff0_32*dmats2[32][17] + coeff0_33*dmats2[33][17] + coeff0_34*dmats2[34][17];
          new_coeff0_18 = coeff0_0*dmats2[0][18] + coeff0_1*dmats2[1][18] + coeff0_2*dmats2[2][18] + coeff0_3*dmats2[3][18] + coeff0_4*dmats2[4][18] + coeff0_5*dmats2[5][18] + coeff0_6*dmats2[6][18] + coeff0_7*dmats2[7][18] + coeff0_8*dmats2[8][18] + coeff0_9*dmats2[9][18] + coeff0_10*dmats2[10][18] + coeff0_11*dmats2[11][18] + coeff0_12*dmats2[12][18] + coeff0_13*dmats2[13][18] + coeff0_14*dmats2[14][18] + coeff0_15*dmats2[15][18] + coeff0_16*dmats2[16][18] + coeff0_17*dmats2[17][18] + coeff0_18*dmats2[18][18] + coeff0_19*dmats2[19][18] + coeff0_20*dmats2[20][18] + coeff0_21*dmats2[21][18] + coeff0_22*dmats2[22][18] + coeff0_23*dmats2[23][18] + coeff0_24*dmats2[24][18] + coeff0_25*dmats2[25][18] + coeff0_26*dmats2[26][18] + coeff0_27*dmats2[27][18] + coeff0_28*dmats2[28][18] + coeff0_29*dmats2[29][18] + coeff0_30*dmats2[30][18] + coeff0_31*dmats2[31][18] + coeff0_32*dmats2[32][18] + coeff0_33*dmats2[33][18] + coeff0_34*dmats2[34][18];
          new_coeff0_19 = coeff0_0*dmats2[0][19] + coeff0_1*dmats2[1][19] + coeff0_2*dmats2[2][19] + coeff0_3*dmats2[3][19] + coeff0_4*dmats2[4][19] + coeff0_5*dmats2[5][19] + coeff0_6*dmats2[6][19] + coeff0_7*dmats2[7][19] + coeff0_8*dmats2[8][19] + coeff0_9*dmats2[9][19] + coeff0_10*dmats2[10][19] + coeff0_11*dmats2[11][19] + coeff0_12*dmats2[12][19] + coeff0_13*dmats2[13][19] + coeff0_14*dmats2[14][19] + coeff0_15*dmats2[15][19] + coeff0_16*dmats2[16][19] + coeff0_17*dmats2[17][19] + coeff0_18*dmats2[18][19] + coeff0_19*dmats2[19][19] + coeff0_20*dmats2[20][19] + coeff0_21*dmats2[21][19] + coeff0_22*dmats2[22][19] + coeff0_23*dmats2[23][19] + coeff0_24*dmats2[24][19] + coeff0_25*dmats2[25][19] + coeff0_26*dmats2[26][19] + coeff0_27*dmats2[27][19] + coeff0_28*dmats2[28][19] + coeff0_29*dmats2[29][19] + coeff0_30*dmats2[30][19] + coeff0_31*dmats2[31][19] + coeff0_32*dmats2[32][19] + coeff0_33*dmats2[33][19] + coeff0_34*dmats2[34][19];
          new_coeff0_20 = coeff0_0*dmats2[0][20] + coeff0_1*dmats2[1][20] + coeff0_2*dmats2[2][20] + coeff0_3*dmats2[3][20] + coeff0_4*dmats2[4][20] + coeff0_5*dmats2[5][20] + coeff0_6*dmats2[6][20] + coeff0_7*dmats2[7][20] + coeff0_8*dmats2[8][20] + coeff0_9*dmats2[9][20] + coeff0_10*dmats2[10][20] + coeff0_11*dmats2[11][20] + coeff0_12*dmats2[12][20] + coeff0_13*dmats2[13][20] + coeff0_14*dmats2[14][20] + coeff0_15*dmats2[15][20] + coeff0_16*dmats2[16][20] + coeff0_17*dmats2[17][20] + coeff0_18*dmats2[18][20] + coeff0_19*dmats2[19][20] + coeff0_20*dmats2[20][20] + coeff0_21*dmats2[21][20] + coeff0_22*dmats2[22][20] + coeff0_23*dmats2[23][20] + coeff0_24*dmats2[24][20] + coeff0_25*dmats2[25][20] + coeff0_26*dmats2[26][20] + coeff0_27*dmats2[27][20] + coeff0_28*dmats2[28][20] + coeff0_29*dmats2[29][20] + coeff0_30*dmats2[30][20] + coeff0_31*dmats2[31][20] + coeff0_32*dmats2[32][20] + coeff0_33*dmats2[33][20] + coeff0_34*dmats2[34][20];
          new_coeff0_21 = coeff0_0*dmats2[0][21] + coeff0_1*dmats2[1][21] + coeff0_2*dmats2[2][21] + coeff0_3*dmats2[3][21] + coeff0_4*dmats2[4][21] + coeff0_5*dmats2[5][21] + coeff0_6*dmats2[6][21] + coeff0_7*dmats2[7][21] + coeff0_8*dmats2[8][21] + coeff0_9*dmats2[9][21] + coeff0_10*dmats2[10][21] + coeff0_11*dmats2[11][21] + coeff0_12*dmats2[12][21] + coeff0_13*dmats2[13][21] + coeff0_14*dmats2[14][21] + coeff0_15*dmats2[15][21] + coeff0_16*dmats2[16][21] + coeff0_17*dmats2[17][21] + coeff0_18*dmats2[18][21] + coeff0_19*dmats2[19][21] + coeff0_20*dmats2[20][21] + coeff0_21*dmats2[21][21] + coeff0_22*dmats2[22][21] + coeff0_23*dmats2[23][21] + coeff0_24*dmats2[24][21] + coeff0_25*dmats2[25][21] + coeff0_26*dmats2[26][21] + coeff0_27*dmats2[27][21] + coeff0_28*dmats2[28][21] + coeff0_29*dmats2[29][21] + coeff0_30*dmats2[30][21] + coeff0_31*dmats2[31][21] + coeff0_32*dmats2[32][21] + coeff0_33*dmats2[33][21] + coeff0_34*dmats2[34][21];
          new_coeff0_22 = coeff0_0*dmats2[0][22] + coeff0_1*dmats2[1][22] + coeff0_2*dmats2[2][22] + coeff0_3*dmats2[3][22] + coeff0_4*dmats2[4][22] + coeff0_5*dmats2[5][22] + coeff0_6*dmats2[6][22] + coeff0_7*dmats2[7][22] + coeff0_8*dmats2[8][22] + coeff0_9*dmats2[9][22] + coeff0_10*dmats2[10][22] + coeff0_11*dmats2[11][22] + coeff0_12*dmats2[12][22] + coeff0_13*dmats2[13][22] + coeff0_14*dmats2[14][22] + coeff0_15*dmats2[15][22] + coeff0_16*dmats2[16][22] + coeff0_17*dmats2[17][22] + coeff0_18*dmats2[18][22] + coeff0_19*dmats2[19][22] + coeff0_20*dmats2[20][22] + coeff0_21*dmats2[21][22] + coeff0_22*dmats2[22][22] + coeff0_23*dmats2[23][22] + coeff0_24*dmats2[24][22] + coeff0_25*dmats2[25][22] + coeff0_26*dmats2[26][22] + coeff0_27*dmats2[27][22] + coeff0_28*dmats2[28][22] + coeff0_29*dmats2[29][22] + coeff0_30*dmats2[30][22] + coeff0_31*dmats2[31][22] + coeff0_32*dmats2[32][22] + coeff0_33*dmats2[33][22] + coeff0_34*dmats2[34][22];
          new_coeff0_23 = coeff0_0*dmats2[0][23] + coeff0_1*dmats2[1][23] + coeff0_2*dmats2[2][23] + coeff0_3*dmats2[3][23] + coeff0_4*dmats2[4][23] + coeff0_5*dmats2[5][23] + coeff0_6*dmats2[6][23] + coeff0_7*dmats2[7][23] + coeff0_8*dmats2[8][23] + coeff0_9*dmats2[9][23] + coeff0_10*dmats2[10][23] + coeff0_11*dmats2[11][23] + coeff0_12*dmats2[12][23] + coeff0_13*dmats2[13][23] + coeff0_14*dmats2[14][23] + coeff0_15*dmats2[15][23] + coeff0_16*dmats2[16][23] + coeff0_17*dmats2[17][23] + coeff0_18*dmats2[18][23] + coeff0_19*dmats2[19][23] + coeff0_20*dmats2[20][23] + coeff0_21*dmats2[21][23] + coeff0_22*dmats2[22][23] + coeff0_23*dmats2[23][23] + coeff0_24*dmats2[24][23] + coeff0_25*dmats2[25][23] + coeff0_26*dmats2[26][23] + coeff0_27*dmats2[27][23] + coeff0_28*dmats2[28][23] + coeff0_29*dmats2[29][23] + coeff0_30*dmats2[30][23] + coeff0_31*dmats2[31][23] + coeff0_32*dmats2[32][23] + coeff0_33*dmats2[33][23] + coeff0_34*dmats2[34][23];
          new_coeff0_24 = coeff0_0*dmats2[0][24] + coeff0_1*dmats2[1][24] + coeff0_2*dmats2[2][24] + coeff0_3*dmats2[3][24] + coeff0_4*dmats2[4][24] + coeff0_5*dmats2[5][24] + coeff0_6*dmats2[6][24] + coeff0_7*dmats2[7][24] + coeff0_8*dmats2[8][24] + coeff0_9*dmats2[9][24] + coeff0_10*dmats2[10][24] + coeff0_11*dmats2[11][24] + coeff0_12*dmats2[12][24] + coeff0_13*dmats2[13][24] + coeff0_14*dmats2[14][24] + coeff0_15*dmats2[15][24] + coeff0_16*dmats2[16][24] + coeff0_17*dmats2[17][24] + coeff0_18*dmats2[18][24] + coeff0_19*dmats2[19][24] + coeff0_20*dmats2[20][24] + coeff0_21*dmats2[21][24] + coeff0_22*dmats2[22][24] + coeff0_23*dmats2[23][24] + coeff0_24*dmats2[24][24] + coeff0_25*dmats2[25][24] + coeff0_26*dmats2[26][24] + coeff0_27*dmats2[27][24] + coeff0_28*dmats2[28][24] + coeff0_29*dmats2[29][24] + coeff0_30*dmats2[30][24] + coeff0_31*dmats2[31][24] + coeff0_32*dmats2[32][24] + coeff0_33*dmats2[33][24] + coeff0_34*dmats2[34][24];
          new_coeff0_25 = coeff0_0*dmats2[0][25] + coeff0_1*dmats2[1][25] + coeff0_2*dmats2[2][25] + coeff0_3*dmats2[3][25] + coeff0_4*dmats2[4][25] + coeff0_5*dmats2[5][25] + coeff0_6*dmats2[6][25] + coeff0_7*dmats2[7][25] + coeff0_8*dmats2[8][25] + coeff0_9*dmats2[9][25] + coeff0_10*dmats2[10][25] + coeff0_11*dmats2[11][25] + coeff0_12*dmats2[12][25] + coeff0_13*dmats2[13][25] + coeff0_14*dmats2[14][25] + coeff0_15*dmats2[15][25] + coeff0_16*dmats2[16][25] + coeff0_17*dmats2[17][25] + coeff0_18*dmats2[18][25] + coeff0_19*dmats2[19][25] + coeff0_20*dmats2[20][25] + coeff0_21*dmats2[21][25] + coeff0_22*dmats2[22][25] + coeff0_23*dmats2[23][25] + coeff0_24*dmats2[24][25] + coeff0_25*dmats2[25][25] + coeff0_26*dmats2[26][25] + coeff0_27*dmats2[27][25] + coeff0_28*dmats2[28][25] + coeff0_29*dmats2[29][25] + coeff0_30*dmats2[30][25] + coeff0_31*dmats2[31][25] + coeff0_32*dmats2[32][25] + coeff0_33*dmats2[33][25] + coeff0_34*dmats2[34][25];
          new_coeff0_26 = coeff0_0*dmats2[0][26] + coeff0_1*dmats2[1][26] + coeff0_2*dmats2[2][26] + coeff0_3*dmats2[3][26] + coeff0_4*dmats2[4][26] + coeff0_5*dmats2[5][26] + coeff0_6*dmats2[6][26] + coeff0_7*dmats2[7][26] + coeff0_8*dmats2[8][26] + coeff0_9*dmats2[9][26] + coeff0_10*dmats2[10][26] + coeff0_11*dmats2[11][26] + coeff0_12*dmats2[12][26] + coeff0_13*dmats2[13][26] + coeff0_14*dmats2[14][26] + coeff0_15*dmats2[15][26] + coeff0_16*dmats2[16][26] + coeff0_17*dmats2[17][26] + coeff0_18*dmats2[18][26] + coeff0_19*dmats2[19][26] + coeff0_20*dmats2[20][26] + coeff0_21*dmats2[21][26] + coeff0_22*dmats2[22][26] + coeff0_23*dmats2[23][26] + coeff0_24*dmats2[24][26] + coeff0_25*dmats2[25][26] + coeff0_26*dmats2[26][26] + coeff0_27*dmats2[27][26] + coeff0_28*dmats2[28][26] + coeff0_29*dmats2[29][26] + coeff0_30*dmats2[30][26] + coeff0_31*dmats2[31][26] + coeff0_32*dmats2[32][26] + coeff0_33*dmats2[33][26] + coeff0_34*dmats2[34][26];
          new_coeff0_27 = coeff0_0*dmats2[0][27] + coeff0_1*dmats2[1][27] + coeff0_2*dmats2[2][27] + coeff0_3*dmats2[3][27] + coeff0_4*dmats2[4][27] + coeff0_5*dmats2[5][27] + coeff0_6*dmats2[6][27] + coeff0_7*dmats2[7][27] + coeff0_8*dmats2[8][27] + coeff0_9*dmats2[9][27] + coeff0_10*dmats2[10][27] + coeff0_11*dmats2[11][27] + coeff0_12*dmats2[12][27] + coeff0_13*dmats2[13][27] + coeff0_14*dmats2[14][27] + coeff0_15*dmats2[15][27] + coeff0_16*dmats2[16][27] + coeff0_17*dmats2[17][27] + coeff0_18*dmats2[18][27] + coeff0_19*dmats2[19][27] + coeff0_20*dmats2[20][27] + coeff0_21*dmats2[21][27] + coeff0_22*dmats2[22][27] + coeff0_23*dmats2[23][27] + coeff0_24*dmats2[24][27] + coeff0_25*dmats2[25][27] + coeff0_26*dmats2[26][27] + coeff0_27*dmats2[27][27] + coeff0_28*dmats2[28][27] + coeff0_29*dmats2[29][27] + coeff0_30*dmats2[30][27] + coeff0_31*dmats2[31][27] + coeff0_32*dmats2[32][27] + coeff0_33*dmats2[33][27] + coeff0_34*dmats2[34][27];
          new_coeff0_28 = coeff0_0*dmats2[0][28] + coeff0_1*dmats2[1][28] + coeff0_2*dmats2[2][28] + coeff0_3*dmats2[3][28] + coeff0_4*dmats2[4][28] + coeff0_5*dmats2[5][28] + coeff0_6*dmats2[6][28] + coeff0_7*dmats2[7][28] + coeff0_8*dmats2[8][28] + coeff0_9*dmats2[9][28] + coeff0_10*dmats2[10][28] + coeff0_11*dmats2[11][28] + coeff0_12*dmats2[12][28] + coeff0_13*dmats2[13][28] + coeff0_14*dmats2[14][28] + coeff0_15*dmats2[15][28] + coeff0_16*dmats2[16][28] + coeff0_17*dmats2[17][28] + coeff0_18*dmats2[18][28] + coeff0_19*dmats2[19][28] + coeff0_20*dmats2[20][28] + coeff0_21*dmats2[21][28] + coeff0_22*dmats2[22][28] + coeff0_23*dmats2[23][28] + coeff0_24*dmats2[24][28] + coeff0_25*dmats2[25][28] + coeff0_26*dmats2[26][28] + coeff0_27*dmats2[27][28] + coeff0_28*dmats2[28][28] + coeff0_29*dmats2[29][28] + coeff0_30*dmats2[30][28] + coeff0_31*dmats2[31][28] + coeff0_32*dmats2[32][28] + coeff0_33*dmats2[33][28] + coeff0_34*dmats2[34][28];
          new_coeff0_29 = coeff0_0*dmats2[0][29] + coeff0_1*dmats2[1][29] + coeff0_2*dmats2[2][29] + coeff0_3*dmats2[3][29] + coeff0_4*dmats2[4][29] + coeff0_5*dmats2[5][29] + coeff0_6*dmats2[6][29] + coeff0_7*dmats2[7][29] + coeff0_8*dmats2[8][29] + coeff0_9*dmats2[9][29] + coeff0_10*dmats2[10][29] + coeff0_11*dmats2[11][29] + coeff0_12*dmats2[12][29] + coeff0_13*dmats2[13][29] + coeff0_14*dmats2[14][29] + coeff0_15*dmats2[15][29] + coeff0_16*dmats2[16][29] + coeff0_17*dmats2[17][29] + coeff0_18*dmats2[18][29] + coeff0_19*dmats2[19][29] + coeff0_20*dmats2[20][29] + coeff0_21*dmats2[21][29] + coeff0_22*dmats2[22][29] + coeff0_23*dmats2[23][29] + coeff0_24*dmats2[24][29] + coeff0_25*dmats2[25][29] + coeff0_26*dmats2[26][29] + coeff0_27*dmats2[27][29] + coeff0_28*dmats2[28][29] + coeff0_29*dmats2[29][29] + coeff0_30*dmats2[30][29] + coeff0_31*dmats2[31][29] + coeff0_32*dmats2[32][29] + coeff0_33*dmats2[33][29] + coeff0_34*dmats2[34][29];
          new_coeff0_30 = coeff0_0*dmats2[0][30] + coeff0_1*dmats2[1][30] + coeff0_2*dmats2[2][30] + coeff0_3*dmats2[3][30] + coeff0_4*dmats2[4][30] + coeff0_5*dmats2[5][30] + coeff0_6*dmats2[6][30] + coeff0_7*dmats2[7][30] + coeff0_8*dmats2[8][30] + coeff0_9*dmats2[9][30] + coeff0_10*dmats2[10][30] + coeff0_11*dmats2[11][30] + coeff0_12*dmats2[12][30] + coeff0_13*dmats2[13][30] + coeff0_14*dmats2[14][30] + coeff0_15*dmats2[15][30] + coeff0_16*dmats2[16][30] + coeff0_17*dmats2[17][30] + coeff0_18*dmats2[18][30] + coeff0_19*dmats2[19][30] + coeff0_20*dmats2[20][30] + coeff0_21*dmats2[21][30] + coeff0_22*dmats2[22][30] + coeff0_23*dmats2[23][30] + coeff0_24*dmats2[24][30] + coeff0_25*dmats2[25][30] + coeff0_26*dmats2[26][30] + coeff0_27*dmats2[27][30] + coeff0_28*dmats2[28][30] + coeff0_29*dmats2[29][30] + coeff0_30*dmats2[30][30] + coeff0_31*dmats2[31][30] + coeff0_32*dmats2[32][30] + coeff0_33*dmats2[33][30] + coeff0_34*dmats2[34][30];
          new_coeff0_31 = coeff0_0*dmats2[0][31] + coeff0_1*dmats2[1][31] + coeff0_2*dmats2[2][31] + coeff0_3*dmats2[3][31] + coeff0_4*dmats2[4][31] + coeff0_5*dmats2[5][31] + coeff0_6*dmats2[6][31] + coeff0_7*dmats2[7][31] + coeff0_8*dmats2[8][31] + coeff0_9*dmats2[9][31] + coeff0_10*dmats2[10][31] + coeff0_11*dmats2[11][31] + coeff0_12*dmats2[12][31] + coeff0_13*dmats2[13][31] + coeff0_14*dmats2[14][31] + coeff0_15*dmats2[15][31] + coeff0_16*dmats2[16][31] + coeff0_17*dmats2[17][31] + coeff0_18*dmats2[18][31] + coeff0_19*dmats2[19][31] + coeff0_20*dmats2[20][31] + coeff0_21*dmats2[21][31] + coeff0_22*dmats2[22][31] + coeff0_23*dmats2[23][31] + coeff0_24*dmats2[24][31] + coeff0_25*dmats2[25][31] + coeff0_26*dmats2[26][31] + coeff0_27*dmats2[27][31] + coeff0_28*dmats2[28][31] + coeff0_29*dmats2[29][31] + coeff0_30*dmats2[30][31] + coeff0_31*dmats2[31][31] + coeff0_32*dmats2[32][31] + coeff0_33*dmats2[33][31] + coeff0_34*dmats2[34][31];
          new_coeff0_32 = coeff0_0*dmats2[0][32] + coeff0_1*dmats2[1][32] + coeff0_2*dmats2[2][32] + coeff0_3*dmats2[3][32] + coeff0_4*dmats2[4][32] + coeff0_5*dmats2[5][32] + coeff0_6*dmats2[6][32] + coeff0_7*dmats2[7][32] + coeff0_8*dmats2[8][32] + coeff0_9*dmats2[9][32] + coeff0_10*dmats2[10][32] + coeff0_11*dmats2[11][32] + coeff0_12*dmats2[12][32] + coeff0_13*dmats2[13][32] + coeff0_14*dmats2[14][32] + coeff0_15*dmats2[15][32] + coeff0_16*dmats2[16][32] + coeff0_17*dmats2[17][32] + coeff0_18*dmats2[18][32] + coeff0_19*dmats2[19][32] + coeff0_20*dmats2[20][32] + coeff0_21*dmats2[21][32] + coeff0_22*dmats2[22][32] + coeff0_23*dmats2[23][32] + coeff0_24*dmats2[24][32] + coeff0_25*dmats2[25][32] + coeff0_26*dmats2[26][32] + coeff0_27*dmats2[27][32] + coeff0_28*dmats2[28][32] + coeff0_29*dmats2[29][32] + coeff0_30*dmats2[30][32] + coeff0_31*dmats2[31][32] + coeff0_32*dmats2[32][32] + coeff0_33*dmats2[33][32] + coeff0_34*dmats2[34][32];
          new_coeff0_33 = coeff0_0*dmats2[0][33] + coeff0_1*dmats2[1][33] + coeff0_2*dmats2[2][33] + coeff0_3*dmats2[3][33] + coeff0_4*dmats2[4][33] + coeff0_5*dmats2[5][33] + coeff0_6*dmats2[6][33] + coeff0_7*dmats2[7][33] + coeff0_8*dmats2[8][33] + coeff0_9*dmats2[9][33] + coeff0_10*dmats2[10][33] + coeff0_11*dmats2[11][33] + coeff0_12*dmats2[12][33] + coeff0_13*dmats2[13][33] + coeff0_14*dmats2[14][33] + coeff0_15*dmats2[15][33] + coeff0_16*dmats2[16][33] + coeff0_17*dmats2[17][33] + coeff0_18*dmats2[18][33] + coeff0_19*dmats2[19][33] + coeff0_20*dmats2[20][33] + coeff0_21*dmats2[21][33] + coeff0_22*dmats2[22][33] + coeff0_23*dmats2[23][33] + coeff0_24*dmats2[24][33] + coeff0_25*dmats2[25][33] + coeff0_26*dmats2[26][33] + coeff0_27*dmats2[27][33] + coeff0_28*dmats2[28][33] + coeff0_29*dmats2[29][33] + coeff0_30*dmats2[30][33] + coeff0_31*dmats2[31][33] + coeff0_32*dmats2[32][33] + coeff0_33*dmats2[33][33] + coeff0_34*dmats2[34][33];
          new_coeff0_34 = coeff0_0*dmats2[0][34] + coeff0_1*dmats2[1][34] + coeff0_2*dmats2[2][34] + coeff0_3*dmats2[3][34] + coeff0_4*dmats2[4][34] + coeff0_5*dmats2[5][34] + coeff0_6*dmats2[6][34] + coeff0_7*dmats2[7][34] + coeff0_8*dmats2[8][34] + coeff0_9*dmats2[9][34] + coeff0_10*dmats2[10][34] + coeff0_11*dmats2[11][34] + coeff0_12*dmats2[12][34] + coeff0_13*dmats2[13][34] + coeff0_14*dmats2[14][34] + coeff0_15*dmats2[15][34] + coeff0_16*dmats2[16][34] + coeff0_17*dmats2[17][34] + coeff0_18*dmats2[18][34] + coeff0_19*dmats2[19][34] + coeff0_20*dmats2[20][34] + coeff0_21*dmats2[21][34] + coeff0_22*dmats2[22][34] + coeff0_23*dmats2[23][34] + coeff0_24*dmats2[24][34] + coeff0_25*dmats2[25][34] + coeff0_26*dmats2[26][34] + coeff0_27*dmats2[27][34] + coeff0_28*dmats2[28][34] + coeff0_29*dmats2[29][34] + coeff0_30*dmats2[30][34] + coeff0_31*dmats2[31][34] + coeff0_32*dmats2[32][34] + coeff0_33*dmats2[33][34] + coeff0_34*dmats2[34][34];
        }
    
      }
      // Compute derivatives on reference element as dot product of coefficients and basisvalues
      derivatives[deriv_num] = new_coeff0_0*basisvalue0 + new_coeff0_1*basisvalue1 + new_coeff0_2*basisvalue2 + new_coeff0_3*basisvalue3 + new_coeff0_4*basisvalue4 + new_coeff0_5*basisvalue5 + new_coeff0_6*basisvalue6 + new_coeff0_7*basisvalue7 + new_coeff0_8*basisvalue8 + new_coeff0_9*basisvalue9 + new_coeff0_10*basisvalue10 + new_coeff0_11*basisvalue11 + new_coeff0_12*basisvalue12 + new_coeff0_13*basisvalue13 + new_coeff0_14*basisvalue14 + new_coeff0_15*basisvalue15 + new_coeff0_16*basisvalue16 + new_coeff0_17*basisvalue17 + new_coeff0_18*basisvalue18 + new_coeff0_19*basisvalue19 + new_coeff0_20*basisvalue20 + new_coeff0_21*basisvalue21 + new_coeff0_22*basisvalue22 + new_coeff0_23*basisvalue23 + new_coeff0_24*basisvalue24 + new_coeff0_25*basisvalue25 + new_coeff0_26*basisvalue26 + new_coeff0_27*basisvalue27 + new_coeff0_28*basisvalue28 + new_coeff0_29*basisvalue29 + new_coeff0_30*basisvalue30 + new_coeff0_31*basisvalue31 + new_coeff0_32*basisvalue32 + new_coeff0_33*basisvalue33 + new_coeff0_34*basisvalue34;
    }
    
    // Transform derivatives back to physical element
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        values[row] += transform[row][col]*derivatives[col];
      }
    }
    // Delete pointer to array of derivatives on FIAT element
    delete [] derivatives;
    
    // Delete pointer to array of combinations of derivatives and transform
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      delete [] combinations[row];
      delete [] transform[row];
    }
    
    delete [] combinations;
    delete [] transform;
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis_derivatives() is not yet implemented.");
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // The reference points, direction and weights:
    static const double X[35][1][3] = {{{0, 0, 0}}, {{1, 0, 0}}, {{0, 1, 0}}, {{0, 0, 1}}, {{0, 0.75, 0.25}}, {{0, 0.5, 0.5}}, {{0, 0.25, 0.75}}, {{0.75, 0, 0.25}}, {{0.5, 0, 0.5}}, {{0.25, 0, 0.75}}, {{0.75, 0.25, 0}}, {{0.5, 0.5, 0}}, {{0.25, 0.75, 0}}, {{0, 0, 0.25}}, {{0, 0, 0.5}}, {{0, 0, 0.75}}, {{0, 0.25, 0}}, {{0, 0.5, 0}}, {{0, 0.75, 0}}, {{0.25, 0, 0}}, {{0.5, 0, 0}}, {{0.75, 0, 0}}, {{0.5, 0.25, 0.25}}, {{0.25, 0.5, 0.25}}, {{0.25, 0.25, 0.5}}, {{0, 0.25, 0.25}}, {{0, 0.5, 0.25}}, {{0, 0.25, 0.5}}, {{0.25, 0, 0.25}}, {{0.5, 0, 0.25}}, {{0.25, 0, 0.5}}, {{0.25, 0.25, 0}}, {{0.5, 0.25, 0}}, {{0.25, 0.5, 0}}, {{0.25, 0.25, 0.25}}};
    static const double W[35][1] = {{1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}};
    static const double D[35][1][1] = {{{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}};
    
    const double * const * x = c.coordinates;
    double result = 0.0;
    // Iterate over the points:
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0][0] - X[i][0][1] - X[i][0][2];
    const double w1 = X[i][0][0];
    const double w2 = X[i][0][1];
    const double w3 = X[i][0][2];
    
    // Compute affine mapping y = F(X)
    double y[3];
    y[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0] + w3*x[3][0];
    y[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1] + w3*x[3][1];
    y[2] = w0*x[0][2] + w1*x[1][2] + w2*x[2][2] + w3*x[3][2];
    
    // Evaluate function at physical points
    double values[1];
    f.evaluate(values, y, c);
    
    // Map function values using appropriate mapping
    // Affine map: Do nothing
    
    // Note that we do not map the weights (yet).
    
    // Take directional components
    for(int k = 0; k < 1; k++)
      result += values[k]*D[i][0][k];
    // Multiply by weights
    result *= W[i][0];
    
    return result;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate at vertices and use affine mapping
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new poisson3d_4_1_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class poisson3d_4_1_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  poisson3d_4_1_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~poisson3d_4_1_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', 'tetrahedron', 4)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 35;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_02 = element_coordinates[3][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
    const double J_12 = element_coordinates[3][1] - element_coordinates[0][1];
    const double J_20 = element_coordinates[1][2] - element_coordinates[0][2];
    const double J_21 = element_coordinates[2][2] - element_coordinates[0][2];
    const double J_22 = element_coordinates[3][2] - element_coordinates[0][2];
    
    // Compute sub determinants
    const double d00 = J_11*J_22 - J_12*J_21;
    const double d01 = J_12*J_20 - J_10*J_22;
    const double d02 = J_10*J_21 - J_11*J_20;
    
    const double d10 = J_02*J_21 - J_01*J_22;
    const double d11 = J_00*J_22 - J_02*J_20;
    const double d12 = J_01*J_20 - J_00*J_21;
    
    const double d20 = J_01*J_12 - J_02*J_11;
    const double d21 = J_02*J_10 - J_00*J_12;
    const double d22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d00 + J_10*d10 + J_20*d20;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = d00*(element_coordinates[0][0] - element_coordinates[2][0] - element_coordinates[3][0]) \
                    + d10*(element_coordinates[0][1] - element_coordinates[2][1] - element_coordinates[3][1]) \
                    + d20*(element_coordinates[0][2] - element_coordinates[2][2] - element_coordinates[3][2]);
    
    const double C1 = d01*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[3][0]) \
                    + d11*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[3][1]) \
                    + d21*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[3][2]);
    
    const double C2 = d02*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[2][0]) \
                    + d12*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[2][1]) \
                    + d22*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[2][2]);
    
    // Get coordinates and map to the UFC reference element
    double x = (C0 + d00*coordinates[0] + d10*coordinates[1] + d20*coordinates[2]) / detJ;
    double y = (C1 + d01*coordinates[0] + d11*coordinates[1] + d21*coordinates[2]) / detJ;
    double z = (C2 + d02*coordinates[0] + d12*coordinates[1] + d22*coordinates[2]) / detJ;
    
    // Map coordinates to the reference cube
    if (std::abs(y + z - 1.0) < 1e-14)
      x = 1.0;
    else
      x = -2.0 * x/(y + z - 1.0) - 1.0;
    if (std::abs(z - 1.0) < 1e-14)
      y = -1.0;
    else
      y = 2.0 * y/(1.0 - z) - 1.0;
    z = 2.0 * z - 1.0;
    
    // Reset values
    *values = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    const double scalings_y_4 = scalings_y_3*(0.5 - 0.5*y);
    const double scalings_z_0 = 1;
    const double scalings_z_1 = scalings_z_0*(0.5 - 0.5*z);
    const double scalings_z_2 = scalings_z_1*(0.5 - 0.5*z);
    const double scalings_z_3 = scalings_z_2*(0.5 - 0.5*z);
    const double scalings_z_4 = scalings_z_3*(0.5 - 0.5*z);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    const double psitilde_a_4 = 1.75*x*psitilde_a_3 - 0.75*psitilde_a_2;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_0_4 = 0.0285714285714286*psitilde_bs_0_3 + 1.8*y*psitilde_bs_0_3 - 0.771428571428571*psitilde_bs_0_2;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_1_3 = 0.285714285714286*psitilde_bs_1_2 + 2*y*psitilde_bs_1_2 - 0.714285714285714*psitilde_bs_1_1;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_2_2 = 1.02040816326531*psitilde_bs_2_1 + 2.57142857142857*y*psitilde_bs_2_1 - 0.551020408163265*psitilde_bs_2_0;
    const double psitilde_bs_3_0 = 1;
    const double psitilde_bs_3_1 = 4.5*y + 3.5;
    const double psitilde_bs_4_0 = 1;
    
    // Compute psitilde_cs
    const double psitilde_cs_00_0 = 1;
    const double psitilde_cs_00_1 = 2*z + 1;
    const double psitilde_cs_00_2 = 0.3125*psitilde_cs_00_1 + 1.875*z*psitilde_cs_00_1 - 0.5625*psitilde_cs_00_0;
    const double psitilde_cs_00_3 = 0.155555555555556*psitilde_cs_00_2 + 1.86666666666667*z*psitilde_cs_00_2 - 0.711111111111111*psitilde_cs_00_1;
    const double psitilde_cs_00_4 = 0.09375*psitilde_cs_00_3 + 1.875*z*psitilde_cs_00_3 - 0.78125*psitilde_cs_00_2;
    const double psitilde_cs_01_0 = 1;
    const double psitilde_cs_01_1 = 3*z + 2;
    const double psitilde_cs_01_2 = 0.777777777777778*psitilde_cs_01_1 + 2.33333333333333*z*psitilde_cs_01_1 - 0.555555555555556*psitilde_cs_01_0;
    const double psitilde_cs_01_3 = 0.428571428571429*psitilde_cs_01_2 + 2.14285714285714*z*psitilde_cs_01_2 - 0.714285714285714*psitilde_cs_01_1;
    const double psitilde_cs_02_0 = 1;
    const double psitilde_cs_02_1 = 4*z + 3;
    const double psitilde_cs_02_2 = 1.265625*psitilde_cs_02_1 + 2.8125*z*psitilde_cs_02_1 - 0.546875*psitilde_cs_02_0;
    const double psitilde_cs_03_0 = 1;
    const double psitilde_cs_03_1 = 5*z + 4;
    const double psitilde_cs_04_0 = 1;
    const double psitilde_cs_10_0 = 1;
    const double psitilde_cs_10_1 = 3*z + 2;
    const double psitilde_cs_10_2 = 0.777777777777778*psitilde_cs_10_1 + 2.33333333333333*z*psitilde_cs_10_1 - 0.555555555555556*psitilde_cs_10_0;
    const double psitilde_cs_10_3 = 0.428571428571429*psitilde_cs_10_2 + 2.14285714285714*z*psitilde_cs_10_2 - 0.714285714285714*psitilde_cs_10_1;
    const double psitilde_cs_11_0 = 1;
    const double psitilde_cs_11_1 = 4*z + 3;
    const double psitilde_cs_11_2 = 1.265625*psitilde_cs_11_1 + 2.8125*z*psitilde_cs_11_1 - 0.546875*psitilde_cs_11_0;
    const double psitilde_cs_12_0 = 1;
    const double psitilde_cs_12_1 = 5*z + 4;
    const double psitilde_cs_13_0 = 1;
    const double psitilde_cs_20_0 = 1;
    const double psitilde_cs_20_1 = 4*z + 3;
    const double psitilde_cs_20_2 = 1.265625*psitilde_cs_20_1 + 2.8125*z*psitilde_cs_20_1 - 0.546875*psitilde_cs_20_0;
    const double psitilde_cs_21_0 = 1;
    const double psitilde_cs_21_1 = 5*z + 4;
    const double psitilde_cs_22_0 = 1;
    const double psitilde_cs_30_0 = 1;
    const double psitilde_cs_30_1 = 5*z + 4;
    const double psitilde_cs_31_0 = 1;
    const double psitilde_cs_40_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.866025403784439*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_0;
    const double basisvalue1 = 2.73861278752583*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_0;
    const double basisvalue2 = 1.58113883008419*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_0;
    const double basisvalue3 = 1.11803398874989*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_1;
    const double basisvalue4 = 5.1234753829798*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_0;
    const double basisvalue5 = 3.96862696659689*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_0;
    const double basisvalue6 = 2.29128784747792*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_0;
    const double basisvalue7 = 3.24037034920393*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_1;
    const double basisvalue8 = 1.87082869338697*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_1;
    const double basisvalue9 = 1.3228756555323*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_2;
    const double basisvalue10 = 7.93725393319377*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_0;
    const double basisvalue11 = 6.70820393249937*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_0;
    const double basisvalue12 = 5.19615242270663*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_0;
    const double basisvalue13 = 3*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_0;
    const double basisvalue14 = 5.80947501931113*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_1;
    const double basisvalue15 = 4.5*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_1;
    const double basisvalue16 = 2.59807621135332*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_1;
    const double basisvalue17 = 3.67423461417477*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_2;
    const double basisvalue18 = 2.12132034355964*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_2;
    const double basisvalue19 = 1.5*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_3;
    const double basisvalue20 = 11.1242977306435*psitilde_a_4*scalings_y_4*psitilde_bs_4_0*scalings_z_4*psitilde_cs_40_0;
    const double basisvalue21 = 9.81070843517429*psitilde_a_3*scalings_y_3*psitilde_bs_3_1*scalings_z_4*psitilde_cs_31_0;
    const double basisvalue22 = 8.2915619758885*psitilde_a_2*scalings_y_2*psitilde_bs_2_2*scalings_z_4*psitilde_cs_22_0;
    const double basisvalue23 = 6.42261628933256*psitilde_a_1*scalings_y_1*psitilde_bs_1_3*scalings_z_4*psitilde_cs_13_0;
    const double basisvalue24 = 3.70809924354783*psitilde_a_0*scalings_y_0*psitilde_bs_0_4*scalings_z_4*psitilde_cs_04_0;
    const double basisvalue25 = 8.77496438739212*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_1;
    const double basisvalue26 = 7.41619848709566*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_1;
    const double basisvalue27 = 5.74456264653803*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_1;
    const double basisvalue28 = 3.3166247903554*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_1;
    const double basisvalue29 = 6.42261628933256*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_2;
    const double basisvalue30 = 4.9749371855331*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_2;
    const double basisvalue31 = 2.87228132326901*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_2;
    const double basisvalue32 = 4.06201920231798*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_3;
    const double basisvalue33 = 2.34520787991171*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_3;
    const double basisvalue34 = 1.6583123951777*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_4;
    
    // Table(s) of coefficients
    static const double coefficients0[35][35] = \
    {{-0.0137464349807054, -0.0144900147488139, -0.00836581391578938, -0.00591552374999942, 0, 0, 0, 0, 0, 0, -0.00671936840905293, -0.00567890279999946, -0.00439885919382572, -0.00253968253968254, -0.00491807409042212, -0.00380952380952381, -0.00219942959691286, -0.00311046316543896, -0.0017958267458706, -0.00126984126984129, 0.0136980289516341, 0.0120805260192622, 0.010209907964538, 0.00790856070259326, 0.00456600965054471, 0.0108051509532101, 0.00913201930108942, 0.0070736317340728, 0.00408396318581521, 0.00790856070259324, 0.00612594477872281, 0.0035368158670364, 0.00500181296677924, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807054, 0.0144900147488139, -0.00836581391578937, -0.00591552374999945, 0, 0, 0, 0, 0, 0, 0.00671936840905292, -0.00567890279999946, 0.00439885919382571, -0.00253968253968253, -0.00491807409042211, 0.0038095238095238, -0.00219942959691286, 0.00311046316543895, -0.00179582674587059, -0.00126984126984127, 0.0136980289516341, -0.0120805260192622, 0.010209907964538, -0.00790856070259325, 0.00456600965054471, -0.0108051509532101, 0.00913201930108942, -0.00707363173407281, 0.00408396318581522, 0.00790856070259325, -0.00612594477872282, 0.0035368158670364, -0.00500181296677924, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807054, 0, 0.0167316278315787, -0.00591552374999944, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0101587301587302, 0, 0, -0.00659828879073858, 0, 0.00359165349174119, -0.00126984126984127, 0, 0, 0, 0, 0.0228300482527235, 0, 0, 0, -0.0163358527432608, 0, 0, 0.0106104476011092, 0, -0.0057755961256123, 0.00204198159290761},
    {-0.0137464349807054, 0, 0, 0.0177465712499983, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0126984126984127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0306297238936141},
    {0.0439885919382572, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0, 0.0406349206349206, 0, 0, 0.00439885919382572, 0, -0.0143666139669648, 0.00761904761904762, 0, 0, 0, 0, 0, 0, 0, 0, 0.0367556686723369, 0, 0, -0.0424417904044368, 0, 0.0303218796594646, -0.0122518895574456},
    {-0.0329914439536929, 0, -0.0200779533978945, -0.0141972569999987, 0, 0, -0.00969857289937743, 0, 0.0712696645099798, -0.050395263067897, 0, 0, 0, 0, 0, 0, 0.0461880215351701, 0, 0.0107749604752236, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0495154221385096, 0, -0.0606437593189292, 0.0306297238936141},
    {0.0439885919382572, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0, 0.0359165349174119, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0505364660991076, -0.0408396318581521},
    {0.0439885919382572, 0.0231840235981022, -0.013385302265263, 0.0189296759999982, 0.0433733365754904, -0.0335968420452646, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484216, 0.0268774736362117, -0.0227156111999979, 0.0175954367753029, -0.0101587301587302, 0.00327871606028142, -0.00253968253968254, 0.00146628639794192, -0.0124418526617558, 0.00718330698348239, 0.00761904761904763, 0, 0, 0, 0, 0, 0.0243115896447228, -0.0205470434274512, 0.0159156714016638, -0.00918891716808423, -0.031634242810373, 0.0245037791148913, -0.0141472634681456, 0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.032991443953693, -0.0173880176985767, 0.0100389766989472, -0.0141972569999986, -0.00722888942924839, 0.00559947367421073, -0.00323285763312585, 0.0617213399848368, -0.03563483225499, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, -0.0266666666666667, 0.01539600717839, 0.00933138949631687, -0.00538748023761181, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, -0.0285877423007065, 0.0165051407128366, -0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, 0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0.0311046316543896, -0.017958267458706, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, -0.0335968420452646, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, 0, -0.0117302911835353, 0.0101587301587301, -0.0229510124219699, 0.00761904761904762, -0.0014662863979419, 0.0165891368823411, -0.00718330698348239, -0.00761904761904761, 0, 0.0241610520385245, -0.0357346778758831, 0.0355885231616696, -0.0228300482527235, -0.00270128773830253, -0.0114150241263618, 0.0159156714016638, -0.0112308987609918, 0.00395428035129663, 0.00306297238936141, -0.0035368158670364, -0.00375135972508442, 0.000721949515701537, 0.0020419815929076},
    {-0.0329914439536929, -0.0173880176985767, -0.0100389766989473, 0.0141972569999987, -0.00722888942924838, 0.0615942104163185, -0.0614242950293905, -0.00685792666498185, -0.00395942580611001, 0.00559947367421077, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042211, -0.0266666666666667, 0.0175954367753029, 0.00933138949631687, 0.0053874802376118, -0.00761904761904761, 0, 0, 0.0357346778758831, -0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108941, 0, 0.00408396318581522, 0.0013180934504322, 0.00714693557517662, -0.00471575448938186, -0.00250090648338961, -0.00144389903140308, 0.0020419815929076},
    {0.0439885919382572, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0.0293257279588381, 0.0101587301587301, 0, -0.0101587301587302, -0.0219942959691286, 0.00207364211029263, 0.017958267458706, -0.00761904761904761, 0, 0, 0, 0.0395428035129662, -0.0456600965054471, 0, 0, -0.017684079335182, 0.0142938711503532, 0, 0.00612594477872281, 0, -0.0012504532416948, -0.00360974757850769, 0.0020419815929076},
    {0.043988591938257, -0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0.0433733365754903, 0.0335968420452647, 0.0193971457987549, 0.0274317066599275, 0.01583770322444, 0.0111989473484216, -0.0268774736362117, -0.0227156111999979, -0.0175954367753029, -0.0101587301587302, 0.00327871606028141, 0.00253968253968254, 0.00146628639794192, 0.0124418526617558, 0.00718330698348239, 0.00761904761904762, 0, 0, 0, 0, 0, -0.0243115896447228, -0.0205470434274512, -0.0159156714016638, -0.00918891716808423, -0.031634242810373, -0.0245037791148913, -0.0141472634681456, -0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, 0.0173880176985767, 0.0100389766989472, -0.0141972569999987, -0.00722888942924838, -0.00559947367421076, -0.00323285763312582, -0.0617213399848368, -0.0356348322549899, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, 0.0266666666666667, 0.01539600717839, -0.00933138949631688, -0.00538748023761179, -0.019047619047619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, 0.0285877423007065, 0.0165051407128365, 0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382572, -0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, -0.0311046316543895, -0.017958267458706, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484215, -0.0268774736362117, 0, 0.0117302911835353, 0.0101587301587302, -0.0229510124219699, -0.00761904761904762, -0.00146628639794191, -0.0165891368823411, -0.00718330698348239, -0.00761904761904762, 0, -0.0241610520385245, -0.0357346778758831, -0.0355885231616696, -0.0228300482527235, 0.00270128773830253, -0.0114150241263618, -0.0159156714016638, -0.0112308987609918, 0.00395428035129663, -0.00306297238936141, -0.0035368158670364, 0.00375135972508442, 0.000721949515701537, 0.0020419815929076},
    {-0.0329914439536929, 0.0173880176985767, -0.0100389766989473, 0.0141972569999987, -0.00722888942924837, -0.0615942104163185, -0.0614242950293905, 0.00685792666498186, -0.00395942580610999, 0.00559947367421076, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042212, 0.0266666666666667, 0.0175954367753029, -0.00933138949631687, 0.0053874802376118, -0.00761904761904762, 0, 0, 0.0357346778758831, 0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108942, 0, 0.00408396318581522, 0.00131809345043221, -0.00714693557517662, -0.00471575448938187, 0.00250090648338962, -0.00144389903140308, 0.00204198159290761},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, -0.0293257279588381, 0.0101587301587301, 0, 0.0101587301587302, -0.0219942959691286, -0.00207364211029264, 0.017958267458706, -0.00761904761904762, 0, 0, 0, -0.0395428035129662, -0.0456600965054471, 0, 0, 0.017684079335182, 0.0142938711503532, 0, -0.00612594477872281, 0, 0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.0439885919382573, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0134387368181058, -0.0113578055999989, -0.0205280095711867, -0.0152380952380952, -0.00983614818084423, -0.0177777777777778, -0.0131965775814772, -0.0145154947720485, -0.0107749604752236, -0.00761904761904762, -0.0547921158065365, -0.0241610520385245, -0.00510495398226901, 0.00395428035129662, 0.00456600965054471, -0.0216103019064202, -0.00456600965054471, 0.0035368158670364, 0.00408396318581522, -0.00395428035129662, 0.00306297238936141, 0.0035368158670364, 0.00250090648338962, 0.00288779806280615, 0.00204198159290761},
    {-0.0329914439536929, 0, 0.0200779533978945, 0.0141972569999987, -0.0867466731509807, 0, 0.00969857289937743, 0, 0.00791885161221999, 0.00559947367421078, 0, 0.0340734167999968, 0, -0.0152380952380952, 0.0295084445425327, 0, -0.0131965775814772, 0, -0.0107749604752236, -0.00761904761904762, 0.0821881737098047, 0, -0.010209907964538, 0, 0.00456600965054471, 0, -0.00913201930108942, 0, 0.00408396318581521, -0.00790856070259325, 0, 0.0035368158670364, 0, 0.00288779806280615, 0.0020419815929076},
    {0.0439885919382571, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754904, -0.0335968420452646, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, -0.0134387368181059, -0.0113578055999989, 0.0205280095711867, -0.0152380952380952, -0.00983614818084423, 0.0177777777777778, -0.0131965775814772, 0.0145154947720485, -0.0107749604752236, -0.00761904761904762, -0.0547921158065365, 0.0241610520385245, -0.00510495398226901, -0.00395428035129662, 0.00456600965054471, 0.0216103019064202, -0.00456600965054471, -0.0035368158670364, 0.00408396318581521, -0.00395428035129662, -0.0030629723893614, 0.0035368158670364, -0.00250090648338962, 0.00288779806280615, 0.0020419815929076},
    {0.0439885919382573, 0.139104141588614, -0.0803118135915779, -0.0567890279999946, 0.0578311154339871, 0.0335968420452646, -0.0420271492306356, 0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, -0.0586514559176763, 0.0406349206349207, 0.0393445927233769, 0.00253968253968253, -0.0109971479845643, -0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, -0.053052238005546, 0.0367556686723369, -0.0105447476034577, -0.0245037791148912, 0.0235787724469093, 0.0175063453837273, 0, -0.0122518895574456},
    {0.0439885919382571, 0, 0.160623627183156, -0.0567890279999947, 0, 0.0783926314389508, 0.00969857289937743, -0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, 0.0586514559176763, -0.060952380952381, 0, 0.033015873015873, 0.0241937255660415, -0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, 0.053052238005546, -0.0551335030085054, 0, -0.0326717054865217, 0.0141472634681456, 0.00875317269186366, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382573, 0, 0, 0.170367083999984, 0, -0.0111989473484215, 0.00969857289937744, 0.0822951199797824, 0.0475131096733199, -0.0167984210226323, 0, 0, 0, 0, 0, 0.0533333333333333, -0.0461880215351701, 0.0435464843161454, 0.0251415744421884, -0.0825396825396825, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0571754846014129, -0.0495154221385096, -0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, 0.0578311154339871, -0.0335968420452646, -0.0420271492306356, -0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, 0.0586514559176763, 0.0406349206349206, 0.0393445927233769, -0.00253968253968253, -0.0109971479845643, 0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, 0.053052238005546, 0.0367556686723369, -0.0105447476034577, 0.0245037791148913, 0.0235787724469093, -0.0175063453837273, 0, -0.0122518895574456},
    {0.0439885919382571, 0, 0.160623627183156, -0.0567890279999947, 0, -0.0783926314389508, 0.00969857289937743, 0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, -0.0586514559176763, -0.060952380952381, 0, -0.033015873015873, 0.0241937255660415, 0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, -0.053052238005546, -0.0551335030085054, 0, 0.0326717054865217, 0.0141472634681456, -0.00875317269186366, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382574, 0, 0, 0.170367083999984, 0, 0.0111989473484216, 0.00969857289937746, -0.0822951199797824, 0.0475131096733199, -0.0167984210226323, 0, 0, 0, 0, 0, -0.0533333333333333, -0.0461880215351701, -0.0435464843161454, 0.0251415744421884, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.057175484601413, -0.0495154221385096, 0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754904, 0.0447957893936862, 0.0484928644968872, -0.0548634133198549, 0, -0.0167984210226323, 0.0806324209086351, 0.0227156111999978, -0.00586514559176761, -0.0101587301587302, -0.00327871606028142, 0.0304761904761905, 0.0271262983619253, 0.045620126426438, 0.0430998419008943, 0.0393650793650793, 0, 0, 0, 0, 0, 0.0729347689341683, 0.0205470434274512, -0.0053052238005546, -0.00918891716808422, 0.031634242810373, -0.00816792637163041, -0.0141472634681456, -0.00875317269186366, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754904, -0.0447957893936862, 0.0484928644968872, 0.0548634133198549, 0, -0.0167984210226323, -0.0806324209086351, 0.0227156111999979, 0.00586514559176762, -0.0101587301587302, -0.00327871606028142, -0.0304761904761905, 0.0271262983619253, -0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, -0.0729347689341683, 0.0205470434274512, 0.0053052238005546, -0.00918891716808422, 0.031634242810373, 0.00816792637163041, -0.0141472634681456, 0.00875317269186366, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0.0144577788584968, 0, -0.00323285763312579, 0, -0.0950262193466398, -0.0167984210226323, 0, 0, 0, 0, -0.0688530372659096, 0, 0.01539600717839, 0, -0.0502831488843767, -0.0825396825396825, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0738132332242036, 0, 0.0165051407128365, 0, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754904, -0.0447957893936862, -0.00969857289937743, 0.0548634133198549, 0.0316754064488799, 0.0391963157194754, 0.0806324209086352, 0, 0.0527863103259087, 0.060952380952381, 0.0229510124219699, 0.0101587301587302, 0.0168622935763319, -0.0124418526617558, -0.00718330698348239, -0.013968253968254, 0, 0.0724831561155734, 0.0357346778758831, -0.0118628410538899, -0.0228300482527235, -0.00810386321490759, 0.0114150241263618, -0.00530522380055459, -0.0112308987609918, -0.00395428035129662, -0.0010209907964538, -0.0035368158670364, 0.00125045324169481, 0.000721949515701534, 0.00204198159290761},
    {0.0439885919382572, 0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754904, 0.0447957893936862, -0.00969857289937744, -0.0548634133198549, 0.0316754064488799, 0.0391963157194754, -0.0806324209086351, 0, -0.0527863103259086, 0.060952380952381, 0.0229510124219699, -0.0101587301587302, 0.0168622935763319, 0.0124418526617558, -0.00718330698348239, -0.013968253968254, 0, -0.0724831561155734, 0.0357346778758831, 0.0118628410538899, -0.0228300482527235, 0.00810386321490759, 0.0114150241263618, 0.0053052238005546, -0.0112308987609918, -0.00395428035129663, 0.0010209907964538, -0.0035368158670364, -0.00125045324169481, 0.000721949515701532, 0.0020419815929076},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0.0144577788584968, 0, -0.0614242950293905, 0, -0.0633508128977598, 0.0391963157194754, 0, -0.0681468335999936, 0, -0.0914285714285714, 0.00983614818084423, 0, 0.0285925847598672, 0, 0.0143666139669648, -0.013968253968254, 0, 0, -0.0714693557517662, 0, 0.0456600965054471, 0, 0.0182640386021788, 0, 0.00408396318581519, -0.00263618690086442, 0, -0.00471575448938187, 0, -0.00144389903140307, 0.0020419815929076},
    {0.351908735506058, 0, 0, 0, -0.115662230867974, 0, -0.129314305325033, 0, 0, -0.134387368181059, 0, -0.0908624447999914, 0, 0.0406349206349207, -0.0786891854467539, 0, -0.0879771838765144, 0, 0, 0.0711111111111111, 0, 0, 0, 0, 0, 0, -0.0821881737098047, 0, 0.0367556686723369, 0.0210894952069153, 0, 0.0235787724469093, 0, 0, -0.0122518895574456}};
    
    // Extract relevant coefficients
    const double coeff0_0 = coefficients0[dof][0];
    const double coeff0_1 = coefficients0[dof][1];
    const double coeff0_2 = coefficients0[dof][2];
    const double coeff0_3 = coefficients0[dof][3];
    const double coeff0_4 = coefficients0[dof][4];
    const double coeff0_5 = coefficients0[dof][5];
    const double coeff0_6 = coefficients0[dof][6];
    const double coeff0_7 = coefficients0[dof][7];
    const double coeff0_8 = coefficients0[dof][8];
    const double coeff0_9 = coefficients0[dof][9];
    const double coeff0_10 = coefficients0[dof][10];
    const double coeff0_11 = coefficients0[dof][11];
    const double coeff0_12 = coefficients0[dof][12];
    const double coeff0_13 = coefficients0[dof][13];
    const double coeff0_14 = coefficients0[dof][14];
    const double coeff0_15 = coefficients0[dof][15];
    const double coeff0_16 = coefficients0[dof][16];
    const double coeff0_17 = coefficients0[dof][17];
    const double coeff0_18 = coefficients0[dof][18];
    const double coeff0_19 = coefficients0[dof][19];
    const double coeff0_20 = coefficients0[dof][20];
    const double coeff0_21 = coefficients0[dof][21];
    const double coeff0_22 = coefficients0[dof][22];
    const double coeff0_23 = coefficients0[dof][23];
    const double coeff0_24 = coefficients0[dof][24];
    const double coeff0_25 = coefficients0[dof][25];
    const double coeff0_26 = coefficients0[dof][26];
    const double coeff0_27 = coefficients0[dof][27];
    const double coeff0_28 = coefficients0[dof][28];
    const double coeff0_29 = coefficients0[dof][29];
    const double coeff0_30 = coefficients0[dof][30];
    const double coeff0_31 = coefficients0[dof][31];
    const double coeff0_32 = coefficients0[dof][32];
    const double coeff0_33 = coefficients0[dof][33];
    const double coeff0_34 = coefficients0[dof][34];
    
    // Compute value(s)
    *values = coeff0_0*basisvalue0 + coeff0_1*basisvalue1 + coeff0_2*basisvalue2 + coeff0_3*basisvalue3 + coeff0_4*basisvalue4 + coeff0_5*basisvalue5 + coeff0_6*basisvalue6 + coeff0_7*basisvalue7 + coeff0_8*basisvalue8 + coeff0_9*basisvalue9 + coeff0_10*basisvalue10 + coeff0_11*basisvalue11 + coeff0_12*basisvalue12 + coeff0_13*basisvalue13 + coeff0_14*basisvalue14 + coeff0_15*basisvalue15 + coeff0_16*basisvalue16 + coeff0_17*basisvalue17 + coeff0_18*basisvalue18 + coeff0_19*basisvalue19 + coeff0_20*basisvalue20 + coeff0_21*basisvalue21 + coeff0_22*basisvalue22 + coeff0_23*basisvalue23 + coeff0_24*basisvalue24 + coeff0_25*basisvalue25 + coeff0_26*basisvalue26 + coeff0_27*basisvalue27 + coeff0_28*basisvalue28 + coeff0_29*basisvalue29 + coeff0_30*basisvalue30 + coeff0_31*basisvalue31 + coeff0_32*basisvalue32 + coeff0_33*basisvalue33 + coeff0_34*basisvalue34;
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis() is not yet implemented.");
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_02 = element_coordinates[3][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
    const double J_12 = element_coordinates[3][1] - element_coordinates[0][1];
    const double J_20 = element_coordinates[1][2] - element_coordinates[0][2];
    const double J_21 = element_coordinates[2][2] - element_coordinates[0][2];
    const double J_22 = element_coordinates[3][2] - element_coordinates[0][2];
    
    // Compute sub determinants
    const double d00 = J_11*J_22 - J_12*J_21;
    const double d01 = J_12*J_20 - J_10*J_22;
    const double d02 = J_10*J_21 - J_11*J_20;
    
    const double d10 = J_02*J_21 - J_01*J_22;
    const double d11 = J_00*J_22 - J_02*J_20;
    const double d12 = J_01*J_20 - J_00*J_21;
    
    const double d20 = J_01*J_12 - J_02*J_11;
    const double d21 = J_02*J_10 - J_00*J_12;
    const double d22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d00 + J_10*d10 + J_20*d20;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = d00*(element_coordinates[0][0] - element_coordinates[2][0] - element_coordinates[3][0]) \
                    + d10*(element_coordinates[0][1] - element_coordinates[2][1] - element_coordinates[3][1]) \
                    + d20*(element_coordinates[0][2] - element_coordinates[2][2] - element_coordinates[3][2]);
    
    const double C1 = d01*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[3][0]) \
                    + d11*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[3][1]) \
                    + d21*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[3][2]);
    
    const double C2 = d02*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[2][0]) \
                    + d12*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[2][1]) \
                    + d22*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[2][2]);
    
    // Get coordinates and map to the UFC reference element
    double x = (C0 + d00*coordinates[0] + d10*coordinates[1] + d20*coordinates[2]) / detJ;
    double y = (C1 + d01*coordinates[0] + d11*coordinates[1] + d21*coordinates[2]) / detJ;
    double z = (C2 + d02*coordinates[0] + d12*coordinates[1] + d22*coordinates[2]) / detJ;
    
    // Map coordinates to the reference cube
    if (std::abs(y + z - 1.0) < 1e-14)
      x = 1.0;
    else
      x = -2.0 * x/(y + z - 1.0) - 1.0;
    if (std::abs(z - 1.0) < 1e-14)
      y = -1.0;
    else
      y = 2.0 * y/(1.0 - z) - 1.0;
    z = 2.0 * z - 1.0;
    
    // Compute number of derivatives
    unsigned int num_derivatives = 1;
    
    for (unsigned int j = 0; j < n; j++)
      num_derivatives *= 3;
    
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      combinations[j] = new unsigned int [n];
      for (unsigned int k = 0; k < n; k++)
        combinations[j][k] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] ={{d00 / detJ, d10 / detJ, d20 / detJ}, {d01 / detJ, d11 / detJ, d21 / detJ}, {d02 / detJ, d12 / detJ, d22 / detJ}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values
    for (unsigned int j = 0; j < 1*num_derivatives; j++)
      values[j] = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    const double scalings_y_4 = scalings_y_3*(0.5 - 0.5*y);
    const double scalings_z_0 = 1;
    const double scalings_z_1 = scalings_z_0*(0.5 - 0.5*z);
    const double scalings_z_2 = scalings_z_1*(0.5 - 0.5*z);
    const double scalings_z_3 = scalings_z_2*(0.5 - 0.5*z);
    const double scalings_z_4 = scalings_z_3*(0.5 - 0.5*z);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    const double psitilde_a_4 = 1.75*x*psitilde_a_3 - 0.75*psitilde_a_2;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_0_4 = 0.0285714285714286*psitilde_bs_0_3 + 1.8*y*psitilde_bs_0_3 - 0.771428571428571*psitilde_bs_0_2;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_1_3 = 0.285714285714286*psitilde_bs_1_2 + 2*y*psitilde_bs_1_2 - 0.714285714285714*psitilde_bs_1_1;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_2_2 = 1.02040816326531*psitilde_bs_2_1 + 2.57142857142857*y*psitilde_bs_2_1 - 0.551020408163265*psitilde_bs_2_0;
    const double psitilde_bs_3_0 = 1;
    const double psitilde_bs_3_1 = 4.5*y + 3.5;
    const double psitilde_bs_4_0 = 1;
    
    // Compute psitilde_cs
    const double psitilde_cs_00_0 = 1;
    const double psitilde_cs_00_1 = 2*z + 1;
    const double psitilde_cs_00_2 = 0.3125*psitilde_cs_00_1 + 1.875*z*psitilde_cs_00_1 - 0.5625*psitilde_cs_00_0;
    const double psitilde_cs_00_3 = 0.155555555555556*psitilde_cs_00_2 + 1.86666666666667*z*psitilde_cs_00_2 - 0.711111111111111*psitilde_cs_00_1;
    const double psitilde_cs_00_4 = 0.09375*psitilde_cs_00_3 + 1.875*z*psitilde_cs_00_3 - 0.78125*psitilde_cs_00_2;
    const double psitilde_cs_01_0 = 1;
    const double psitilde_cs_01_1 = 3*z + 2;
    const double psitilde_cs_01_2 = 0.777777777777778*psitilde_cs_01_1 + 2.33333333333333*z*psitilde_cs_01_1 - 0.555555555555556*psitilde_cs_01_0;
    const double psitilde_cs_01_3 = 0.428571428571429*psitilde_cs_01_2 + 2.14285714285714*z*psitilde_cs_01_2 - 0.714285714285714*psitilde_cs_01_1;
    const double psitilde_cs_02_0 = 1;
    const double psitilde_cs_02_1 = 4*z + 3;
    const double psitilde_cs_02_2 = 1.265625*psitilde_cs_02_1 + 2.8125*z*psitilde_cs_02_1 - 0.546875*psitilde_cs_02_0;
    const double psitilde_cs_03_0 = 1;
    const double psitilde_cs_03_1 = 5*z + 4;
    const double psitilde_cs_04_0 = 1;
    const double psitilde_cs_10_0 = 1;
    const double psitilde_cs_10_1 = 3*z + 2;
    const double psitilde_cs_10_2 = 0.777777777777778*psitilde_cs_10_1 + 2.33333333333333*z*psitilde_cs_10_1 - 0.555555555555556*psitilde_cs_10_0;
    const double psitilde_cs_10_3 = 0.428571428571429*psitilde_cs_10_2 + 2.14285714285714*z*psitilde_cs_10_2 - 0.714285714285714*psitilde_cs_10_1;
    const double psitilde_cs_11_0 = 1;
    const double psitilde_cs_11_1 = 4*z + 3;
    const double psitilde_cs_11_2 = 1.265625*psitilde_cs_11_1 + 2.8125*z*psitilde_cs_11_1 - 0.546875*psitilde_cs_11_0;
    const double psitilde_cs_12_0 = 1;
    const double psitilde_cs_12_1 = 5*z + 4;
    const double psitilde_cs_13_0 = 1;
    const double psitilde_cs_20_0 = 1;
    const double psitilde_cs_20_1 = 4*z + 3;
    const double psitilde_cs_20_2 = 1.265625*psitilde_cs_20_1 + 2.8125*z*psitilde_cs_20_1 - 0.546875*psitilde_cs_20_0;
    const double psitilde_cs_21_0 = 1;
    const double psitilde_cs_21_1 = 5*z + 4;
    const double psitilde_cs_22_0 = 1;
    const double psitilde_cs_30_0 = 1;
    const double psitilde_cs_30_1 = 5*z + 4;
    const double psitilde_cs_31_0 = 1;
    const double psitilde_cs_40_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.866025403784439*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_0;
    const double basisvalue1 = 2.73861278752583*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_0;
    const double basisvalue2 = 1.58113883008419*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_0;
    const double basisvalue3 = 1.11803398874989*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_1;
    const double basisvalue4 = 5.1234753829798*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_0;
    const double basisvalue5 = 3.96862696659689*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_0;
    const double basisvalue6 = 2.29128784747792*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_0;
    const double basisvalue7 = 3.24037034920393*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_1;
    const double basisvalue8 = 1.87082869338697*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_1;
    const double basisvalue9 = 1.3228756555323*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_2;
    const double basisvalue10 = 7.93725393319377*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_0;
    const double basisvalue11 = 6.70820393249937*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_0;
    const double basisvalue12 = 5.19615242270663*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_0;
    const double basisvalue13 = 3*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_0;
    const double basisvalue14 = 5.80947501931113*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_1;
    const double basisvalue15 = 4.5*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_1;
    const double basisvalue16 = 2.59807621135332*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_1;
    const double basisvalue17 = 3.67423461417477*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_2;
    const double basisvalue18 = 2.12132034355964*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_2;
    const double basisvalue19 = 1.5*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_3;
    const double basisvalue20 = 11.1242977306435*psitilde_a_4*scalings_y_4*psitilde_bs_4_0*scalings_z_4*psitilde_cs_40_0;
    const double basisvalue21 = 9.81070843517429*psitilde_a_3*scalings_y_3*psitilde_bs_3_1*scalings_z_4*psitilde_cs_31_0;
    const double basisvalue22 = 8.2915619758885*psitilde_a_2*scalings_y_2*psitilde_bs_2_2*scalings_z_4*psitilde_cs_22_0;
    const double basisvalue23 = 6.42261628933256*psitilde_a_1*scalings_y_1*psitilde_bs_1_3*scalings_z_4*psitilde_cs_13_0;
    const double basisvalue24 = 3.70809924354783*psitilde_a_0*scalings_y_0*psitilde_bs_0_4*scalings_z_4*psitilde_cs_04_0;
    const double basisvalue25 = 8.77496438739212*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_1;
    const double basisvalue26 = 7.41619848709566*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_1;
    const double basisvalue27 = 5.74456264653803*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_1;
    const double basisvalue28 = 3.3166247903554*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_1;
    const double basisvalue29 = 6.42261628933256*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_2;
    const double basisvalue30 = 4.9749371855331*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_2;
    const double basisvalue31 = 2.87228132326901*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_2;
    const double basisvalue32 = 4.06201920231798*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_3;
    const double basisvalue33 = 2.34520787991171*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_3;
    const double basisvalue34 = 1.6583123951777*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_4;
    
    // Table(s) of coefficients
    static const double coefficients0[35][35] = \
    {{-0.0137464349807054, -0.0144900147488139, -0.00836581391578938, -0.00591552374999942, 0, 0, 0, 0, 0, 0, -0.00671936840905293, -0.00567890279999946, -0.00439885919382572, -0.00253968253968254, -0.00491807409042212, -0.00380952380952381, -0.00219942959691286, -0.00311046316543896, -0.0017958267458706, -0.00126984126984129, 0.0136980289516341, 0.0120805260192622, 0.010209907964538, 0.00790856070259326, 0.00456600965054471, 0.0108051509532101, 0.00913201930108942, 0.0070736317340728, 0.00408396318581521, 0.00790856070259324, 0.00612594477872281, 0.0035368158670364, 0.00500181296677924, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807054, 0.0144900147488139, -0.00836581391578937, -0.00591552374999945, 0, 0, 0, 0, 0, 0, 0.00671936840905292, -0.00567890279999946, 0.00439885919382571, -0.00253968253968253, -0.00491807409042211, 0.0038095238095238, -0.00219942959691286, 0.00311046316543895, -0.00179582674587059, -0.00126984126984127, 0.0136980289516341, -0.0120805260192622, 0.010209907964538, -0.00790856070259325, 0.00456600965054471, -0.0108051509532101, 0.00913201930108942, -0.00707363173407281, 0.00408396318581522, 0.00790856070259325, -0.00612594477872282, 0.0035368158670364, -0.00500181296677924, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807054, 0, 0.0167316278315787, -0.00591552374999944, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0101587301587302, 0, 0, -0.00659828879073858, 0, 0.00359165349174119, -0.00126984126984127, 0, 0, 0, 0, 0.0228300482527235, 0, 0, 0, -0.0163358527432608, 0, 0, 0.0106104476011092, 0, -0.0057755961256123, 0.00204198159290761},
    {-0.0137464349807054, 0, 0, 0.0177465712499983, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0126984126984127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0306297238936141},
    {0.0439885919382572, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0, 0.0406349206349206, 0, 0, 0.00439885919382572, 0, -0.0143666139669648, 0.00761904761904762, 0, 0, 0, 0, 0, 0, 0, 0, 0.0367556686723369, 0, 0, -0.0424417904044368, 0, 0.0303218796594646, -0.0122518895574456},
    {-0.0329914439536929, 0, -0.0200779533978945, -0.0141972569999987, 0, 0, -0.00969857289937743, 0, 0.0712696645099798, -0.050395263067897, 0, 0, 0, 0, 0, 0, 0.0461880215351701, 0, 0.0107749604752236, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0495154221385096, 0, -0.0606437593189292, 0.0306297238936141},
    {0.0439885919382572, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0, 0.0359165349174119, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0505364660991076, -0.0408396318581521},
    {0.0439885919382572, 0.0231840235981022, -0.013385302265263, 0.0189296759999982, 0.0433733365754904, -0.0335968420452646, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484216, 0.0268774736362117, -0.0227156111999979, 0.0175954367753029, -0.0101587301587302, 0.00327871606028142, -0.00253968253968254, 0.00146628639794192, -0.0124418526617558, 0.00718330698348239, 0.00761904761904763, 0, 0, 0, 0, 0, 0.0243115896447228, -0.0205470434274512, 0.0159156714016638, -0.00918891716808423, -0.031634242810373, 0.0245037791148913, -0.0141472634681456, 0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.032991443953693, -0.0173880176985767, 0.0100389766989472, -0.0141972569999986, -0.00722888942924839, 0.00559947367421073, -0.00323285763312585, 0.0617213399848368, -0.03563483225499, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, -0.0266666666666667, 0.01539600717839, 0.00933138949631687, -0.00538748023761181, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, -0.0285877423007065, 0.0165051407128366, -0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, 0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0.0311046316543896, -0.017958267458706, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, -0.0335968420452646, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, 0, -0.0117302911835353, 0.0101587301587301, -0.0229510124219699, 0.00761904761904762, -0.0014662863979419, 0.0165891368823411, -0.00718330698348239, -0.00761904761904761, 0, 0.0241610520385245, -0.0357346778758831, 0.0355885231616696, -0.0228300482527235, -0.00270128773830253, -0.0114150241263618, 0.0159156714016638, -0.0112308987609918, 0.00395428035129663, 0.00306297238936141, -0.0035368158670364, -0.00375135972508442, 0.000721949515701537, 0.0020419815929076},
    {-0.0329914439536929, -0.0173880176985767, -0.0100389766989473, 0.0141972569999987, -0.00722888942924838, 0.0615942104163185, -0.0614242950293905, -0.00685792666498185, -0.00395942580611001, 0.00559947367421077, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042211, -0.0266666666666667, 0.0175954367753029, 0.00933138949631687, 0.0053874802376118, -0.00761904761904761, 0, 0, 0.0357346778758831, -0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108941, 0, 0.00408396318581522, 0.0013180934504322, 0.00714693557517662, -0.00471575448938186, -0.00250090648338961, -0.00144389903140308, 0.0020419815929076},
    {0.0439885919382572, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0.0293257279588381, 0.0101587301587301, 0, -0.0101587301587302, -0.0219942959691286, 0.00207364211029263, 0.017958267458706, -0.00761904761904761, 0, 0, 0, 0.0395428035129662, -0.0456600965054471, 0, 0, -0.017684079335182, 0.0142938711503532, 0, 0.00612594477872281, 0, -0.0012504532416948, -0.00360974757850769, 0.0020419815929076},
    {0.043988591938257, -0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0.0433733365754903, 0.0335968420452647, 0.0193971457987549, 0.0274317066599275, 0.01583770322444, 0.0111989473484216, -0.0268774736362117, -0.0227156111999979, -0.0175954367753029, -0.0101587301587302, 0.00327871606028141, 0.00253968253968254, 0.00146628639794192, 0.0124418526617558, 0.00718330698348239, 0.00761904761904762, 0, 0, 0, 0, 0, -0.0243115896447228, -0.0205470434274512, -0.0159156714016638, -0.00918891716808423, -0.031634242810373, -0.0245037791148913, -0.0141472634681456, -0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, 0.0173880176985767, 0.0100389766989472, -0.0141972569999987, -0.00722888942924838, -0.00559947367421076, -0.00323285763312582, -0.0617213399848368, -0.0356348322549899, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, 0.0266666666666667, 0.01539600717839, -0.00933138949631688, -0.00538748023761179, -0.019047619047619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, 0.0285877423007065, 0.0165051407128365, 0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382572, -0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, -0.0311046316543895, -0.017958267458706, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484215, -0.0268774736362117, 0, 0.0117302911835353, 0.0101587301587302, -0.0229510124219699, -0.00761904761904762, -0.00146628639794191, -0.0165891368823411, -0.00718330698348239, -0.00761904761904762, 0, -0.0241610520385245, -0.0357346778758831, -0.0355885231616696, -0.0228300482527235, 0.00270128773830253, -0.0114150241263618, -0.0159156714016638, -0.0112308987609918, 0.00395428035129663, -0.00306297238936141, -0.0035368158670364, 0.00375135972508442, 0.000721949515701537, 0.0020419815929076},
    {-0.0329914439536929, 0.0173880176985767, -0.0100389766989473, 0.0141972569999987, -0.00722888942924837, -0.0615942104163185, -0.0614242950293905, 0.00685792666498186, -0.00395942580610999, 0.00559947367421076, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042212, 0.0266666666666667, 0.0175954367753029, -0.00933138949631687, 0.0053874802376118, -0.00761904761904762, 0, 0, 0.0357346778758831, 0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108942, 0, 0.00408396318581522, 0.00131809345043221, -0.00714693557517662, -0.00471575448938187, 0.00250090648338962, -0.00144389903140308, 0.00204198159290761},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, -0.0293257279588381, 0.0101587301587301, 0, 0.0101587301587302, -0.0219942959691286, -0.00207364211029264, 0.017958267458706, -0.00761904761904762, 0, 0, 0, -0.0395428035129662, -0.0456600965054471, 0, 0, 0.017684079335182, 0.0142938711503532, 0, -0.00612594477872281, 0, 0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.0439885919382573, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0134387368181058, -0.0113578055999989, -0.0205280095711867, -0.0152380952380952, -0.00983614818084423, -0.0177777777777778, -0.0131965775814772, -0.0145154947720485, -0.0107749604752236, -0.00761904761904762, -0.0547921158065365, -0.0241610520385245, -0.00510495398226901, 0.00395428035129662, 0.00456600965054471, -0.0216103019064202, -0.00456600965054471, 0.0035368158670364, 0.00408396318581522, -0.00395428035129662, 0.00306297238936141, 0.0035368158670364, 0.00250090648338962, 0.00288779806280615, 0.00204198159290761},
    {-0.0329914439536929, 0, 0.0200779533978945, 0.0141972569999987, -0.0867466731509807, 0, 0.00969857289937743, 0, 0.00791885161221999, 0.00559947367421078, 0, 0.0340734167999968, 0, -0.0152380952380952, 0.0295084445425327, 0, -0.0131965775814772, 0, -0.0107749604752236, -0.00761904761904762, 0.0821881737098047, 0, -0.010209907964538, 0, 0.00456600965054471, 0, -0.00913201930108942, 0, 0.00408396318581521, -0.00790856070259325, 0, 0.0035368158670364, 0, 0.00288779806280615, 0.0020419815929076},
    {0.0439885919382571, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754904, -0.0335968420452646, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, -0.0134387368181059, -0.0113578055999989, 0.0205280095711867, -0.0152380952380952, -0.00983614818084423, 0.0177777777777778, -0.0131965775814772, 0.0145154947720485, -0.0107749604752236, -0.00761904761904762, -0.0547921158065365, 0.0241610520385245, -0.00510495398226901, -0.00395428035129662, 0.00456600965054471, 0.0216103019064202, -0.00456600965054471, -0.0035368158670364, 0.00408396318581521, -0.00395428035129662, -0.0030629723893614, 0.0035368158670364, -0.00250090648338962, 0.00288779806280615, 0.0020419815929076},
    {0.0439885919382573, 0.139104141588614, -0.0803118135915779, -0.0567890279999946, 0.0578311154339871, 0.0335968420452646, -0.0420271492306356, 0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, -0.0586514559176763, 0.0406349206349207, 0.0393445927233769, 0.00253968253968253, -0.0109971479845643, -0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, -0.053052238005546, 0.0367556686723369, -0.0105447476034577, -0.0245037791148912, 0.0235787724469093, 0.0175063453837273, 0, -0.0122518895574456},
    {0.0439885919382571, 0, 0.160623627183156, -0.0567890279999947, 0, 0.0783926314389508, 0.00969857289937743, -0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, 0.0586514559176763, -0.060952380952381, 0, 0.033015873015873, 0.0241937255660415, -0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, 0.053052238005546, -0.0551335030085054, 0, -0.0326717054865217, 0.0141472634681456, 0.00875317269186366, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382573, 0, 0, 0.170367083999984, 0, -0.0111989473484215, 0.00969857289937744, 0.0822951199797824, 0.0475131096733199, -0.0167984210226323, 0, 0, 0, 0, 0, 0.0533333333333333, -0.0461880215351701, 0.0435464843161454, 0.0251415744421884, -0.0825396825396825, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0571754846014129, -0.0495154221385096, -0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, 0.0578311154339871, -0.0335968420452646, -0.0420271492306356, -0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, 0.0586514559176763, 0.0406349206349206, 0.0393445927233769, -0.00253968253968253, -0.0109971479845643, 0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, 0.053052238005546, 0.0367556686723369, -0.0105447476034577, 0.0245037791148913, 0.0235787724469093, -0.0175063453837273, 0, -0.0122518895574456},
    {0.0439885919382571, 0, 0.160623627183156, -0.0567890279999947, 0, -0.0783926314389508, 0.00969857289937743, 0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, -0.0586514559176763, -0.060952380952381, 0, -0.033015873015873, 0.0241937255660415, 0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, -0.053052238005546, -0.0551335030085054, 0, 0.0326717054865217, 0.0141472634681456, -0.00875317269186366, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382574, 0, 0, 0.170367083999984, 0, 0.0111989473484216, 0.00969857289937746, -0.0822951199797824, 0.0475131096733199, -0.0167984210226323, 0, 0, 0, 0, 0, -0.0533333333333333, -0.0461880215351701, -0.0435464843161454, 0.0251415744421884, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.057175484601413, -0.0495154221385096, 0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754904, 0.0447957893936862, 0.0484928644968872, -0.0548634133198549, 0, -0.0167984210226323, 0.0806324209086351, 0.0227156111999978, -0.00586514559176761, -0.0101587301587302, -0.00327871606028142, 0.0304761904761905, 0.0271262983619253, 0.045620126426438, 0.0430998419008943, 0.0393650793650793, 0, 0, 0, 0, 0, 0.0729347689341683, 0.0205470434274512, -0.0053052238005546, -0.00918891716808422, 0.031634242810373, -0.00816792637163041, -0.0141472634681456, -0.00875317269186366, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754904, -0.0447957893936862, 0.0484928644968872, 0.0548634133198549, 0, -0.0167984210226323, -0.0806324209086351, 0.0227156111999979, 0.00586514559176762, -0.0101587301587302, -0.00327871606028142, -0.0304761904761905, 0.0271262983619253, -0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, -0.0729347689341683, 0.0205470434274512, 0.0053052238005546, -0.00918891716808422, 0.031634242810373, 0.00816792637163041, -0.0141472634681456, 0.00875317269186366, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0.0144577788584968, 0, -0.00323285763312579, 0, -0.0950262193466398, -0.0167984210226323, 0, 0, 0, 0, -0.0688530372659096, 0, 0.01539600717839, 0, -0.0502831488843767, -0.0825396825396825, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0738132332242036, 0, 0.0165051407128365, 0, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754904, -0.0447957893936862, -0.00969857289937743, 0.0548634133198549, 0.0316754064488799, 0.0391963157194754, 0.0806324209086352, 0, 0.0527863103259087, 0.060952380952381, 0.0229510124219699, 0.0101587301587302, 0.0168622935763319, -0.0124418526617558, -0.00718330698348239, -0.013968253968254, 0, 0.0724831561155734, 0.0357346778758831, -0.0118628410538899, -0.0228300482527235, -0.00810386321490759, 0.0114150241263618, -0.00530522380055459, -0.0112308987609918, -0.00395428035129662, -0.0010209907964538, -0.0035368158670364, 0.00125045324169481, 0.000721949515701534, 0.00204198159290761},
    {0.0439885919382572, 0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754904, 0.0447957893936862, -0.00969857289937744, -0.0548634133198549, 0.0316754064488799, 0.0391963157194754, -0.0806324209086351, 0, -0.0527863103259086, 0.060952380952381, 0.0229510124219699, -0.0101587301587302, 0.0168622935763319, 0.0124418526617558, -0.00718330698348239, -0.013968253968254, 0, -0.0724831561155734, 0.0357346778758831, 0.0118628410538899, -0.0228300482527235, 0.00810386321490759, 0.0114150241263618, 0.0053052238005546, -0.0112308987609918, -0.00395428035129663, 0.0010209907964538, -0.0035368158670364, -0.00125045324169481, 0.000721949515701532, 0.0020419815929076},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0.0144577788584968, 0, -0.0614242950293905, 0, -0.0633508128977598, 0.0391963157194754, 0, -0.0681468335999936, 0, -0.0914285714285714, 0.00983614818084423, 0, 0.0285925847598672, 0, 0.0143666139669648, -0.013968253968254, 0, 0, -0.0714693557517662, 0, 0.0456600965054471, 0, 0.0182640386021788, 0, 0.00408396318581519, -0.00263618690086442, 0, -0.00471575448938187, 0, -0.00144389903140307, 0.0020419815929076},
    {0.351908735506058, 0, 0, 0, -0.115662230867974, 0, -0.129314305325033, 0, 0, -0.134387368181059, 0, -0.0908624447999914, 0, 0.0406349206349207, -0.0786891854467539, 0, -0.0879771838765144, 0, 0, 0.0711111111111111, 0, 0, 0, 0, 0, 0, -0.0821881737098047, 0, 0.0367556686723369, 0.0210894952069153, 0, 0.0235787724469093, 0, 0, -0.0122518895574456}};
    
    // Interesting (new) part
    // Tables of derivatives of the polynomial base (transpose)
    static const double dmats0[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {6.32455532033676, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 11.2249721603218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.58257569495584, 0, 8.36660026534075, -1.18321595661992, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.74165738677394, 0, 0, 8.69482604771366, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.49909083394702, 0, -3.3466401061363, -2.36643191323985, 15.4919333848297, 0, 0.692820323027558, 0, 0.565685424949242, 0.400000000000006, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 4.89897948556635, 0, 0, 0, 14.1985914794391, 0, -0.828078671210817, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.60000000000001, 0, 8.76356092008266, -1.54919333848297, 0, 1.05385203468073e-14, 9.52470471983253, 0, -1.48131215963609, 0.261861468283189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 4.24264068711929, 0, 0, 0, 0, 0, 14.3427433120127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.11022302462516e-14, 0, 0},
    {3.11769145362397, 0, 3.16227766016838, 4.91934955049954, 0, 0, 0, 0, 10.690449676497, -2.41897262725906, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.54558441227158, 0, 0, 7.66811580507233, 0, 0, 0, 0, 0, 10.3691851174526, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 11.6057691494799, 0, 0, 0, -4.20458932936041, 0, -3.43303281162798, 0, 0, 19.6214168703486, 0, 0.6116777418412, 0, 0, 0.529728463363978, 0, 0.432521479156785, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.53137212479104, 0, 3.54562104171167, -2.50713268211203, 4.78713553878169, -1.29633448990283e-14, -5.5662674507549, 0, -1.04880884817015, 0.741619848709566, 0, 18.8034951158403, 0, 1.68183573174416, -0.603122387046457, 0, 0.701283781217661, 0, 0.132137494528679, -0.093435318430233, 0, 0, 0, 0, -1.35102366043011e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 2.59512887494071, 0, 0, 0, 10.0285307284481, 0, -0.767649473578739, 0, 0, 0, 0, 16.4130361329658, 0, 0, -1.26347611061158, 0, 0.0967147429123337, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.96647939483827, 0, 8.12403840463596, -1.64130361329658, 0, 0, 11.7728501222091, 0, -2.40312296813959, 0.485504156227608, 0, 0, 0, 10.2761860629321, 0, 0, -1.48323969741913, 0, 0.30276503540975, -0.06116777418412, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.05298244095218, 0, -1.58564993434419, 4.4848952846511, 4.28174419288838, 0, 0.191485421551267, 0, -3.75233260785875, -4.31161222746202, 0, 0, 0, 0, 18.8807171866294, 0, 0.844371341865036, 0, 1.18187368057056, 1.04463861754669, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 2.32115382989599, 0, 0, 0, 3.92428337406973, 0, 5.49285249860477, 1.10651505319526e-14, 0, 0, 0, 0, 0, 0, 17.3044631365565, 0, -1.73008591662714, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.65329983228432, 0, 4.15220619990513, 2.93605316083775, 0, 0, 2.63248931621764, 0, 9.82591326180785, -2.82261277137741, 0, 0, 0, 0, 0, 0, 11.6081867662439, 0, -3.09487177319465, 0.683876505540241, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 2.01017818278147, 0, 0, 0, 0, 0, 8.91928088068603, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16.8558564884489, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.29782505861521, 0, 1.49829835452879, 5.50917601898535, 0, 0, 0, 0, 6.64803945320939, 4.13676892548485, 0, 0, 0, 0, 0, 0, 0, 0, 12.5636136423842, -3.55352656109508, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87616630392938, 0, 0, 6.2283092998577, 0, 0, 0, 0, 1.26414611676556e-14, 11.0541524195338, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11.6057691494799, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    static const double dmats1[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.16227766016838, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.47722557505166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.95803989154981, 5.61248608016091, -1.08012344973464, -0.763762615825972, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.29128784747792, 7.24568837309472, 4.18330013267038, -0.59160797830996, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-2.64575131106459, 0, 9.66091783079296, 0.683130051063973, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87082869338697, 0, 0, 4.34741302385683, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.24037034920393, 0, 0, 7.52994023880668, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.74954541697351, 5.79655069847578, -1.67332005306815, -1.18321595661993, 7.74596669241484, -1.2, 0.346410161513782, -0.979795897113276, 0.282842712474624, 0.200000000000003, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.32379000772445, 2.44948974278318, 2.8284271247462, -0.999999999999997, 9.16515138991168, 7.09929573971954, -2.04939015319192, -0.414039335605406, -0.47809144373376, 0.1690308509457, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.80000000000001, -5.69209978830308, 4.38178046004133, -0.774596669241484, 0, 10.998181667894, 4.76235235991627, 0.962140470884735, -0.740656079818043, 0.130930734141594, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.19615242270664, 0, -3.16227766016838, -2.23606797749979, 0, 0, 13.7477270848675, 0, 0.53452248382485, 0.377964473009225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.01246117974981, 2.12132034355964, -0.408248290463865, 3.17542648054294, 0, 0, 0, 7.17137165600636, -1.38013111868471, -1.56144011671765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.55884572681199, 2.73861278752583, 1.58113883008419, 2.45967477524977, 0, 0, 0, 9.25820099772552, 5.34522483824848, -1.20948631362953, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-1.8, 0, 3.65148371670111, -2.84018778721878, 0, 0, 0, 0, 12.3442679969674, 1.39659449751034, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.27279220613579, 0, 0, 3.83405790253616, 0, 0, 0, 0, 0, 5.18459255872629, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.20454076850486, 0, 0, 6.6407830863536, 0, 0, 0, 0, 0, 8.97997772825746, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.56904651573303, 5.80288457473998, -2.01017818278147, -1.42141062443803, 8.14215222512715, -2.10229466468021, 0.728256234341424, -1.71651640581399, 0.594618725379072, 0.420458932936045, 9.81070843517429, -1.18450885369836, 0.305838870920601, -0.105945692672795, -1.02581475831037, 0.264864231681988, -0.0917516612761807, 0.216260739578392, -0.0749149177264403, -0.0529728463363971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.26568606239552, 3.07059789431495, 1.77281052085584, -1.25356634105601, 2.39356776939085, 6.30376871403131, -2.78313372537745, -0.908295106229242, -0.524404424085073, 0.370809924354785, 11.1242977306435, 9.40174755792013, -2.42752078113806, 0.840917865872083, -0.301561193523229, -0.794200206656968, 0.350641890608831, 0.114434427054264, 0.0660687472643388, -0.0467176592151161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.91485421551268, 1.29756443747035, 3.74574588632197, -1.05945692672795, -8.09173593712687, 5.01426536422408, 1.80936716113936, -0.383824736789367, -1.1080065755349, 0.313391585264002, 0, 12.7134831207354, 8.20651806648289, -2.84282124887606, 1.01946290306866, -0.631738055305789, -0.227958835180082, 0.0483573714561662, 0.139595707137601, -0.0394836284566123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741913, 7.03562363973515, 4.06201920231798, -0.820651806648291, 0, -6.79705818718656, 5.88642506110457, -2.08116553882675, -1.2015614840698, 0.242752078113807, 0, 0, 14.8323969741913, 5.13809303146605, 0, 0.856348838577677, -0.741619848709568, 0.262202212042541, 0.151382517704876, -0.03058388709206, 0, 0, 0, 0, 0, 0, 0, -1.07304327303254e-14, 0, 0, 0, 0, 0, 0, 0},
    {-3.42539535431072, 0, 9.38083151964686, 1.89521416591738, 0, 0, -3.3985290935933, 0, -2.77488738510233, -0.560611910581395, 0, 0, 0, 17.7988763690296, 0, 0, 0.428174419288839, 0, 0.349602949390051, 0.0706304617818617, 0, 0, 0, 0, -1.22900818059705e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.02649122047609, 2.74642624930239, -0.792824967172094, 2.24244764232555, 2.14087209644419, -0.331662479035539, 0.0957427107756354, 6.49923072370876, -1.87616630392937, -2.15580611373101, 0, 0, 0, 0, 9.44035859331468, -1.46249406456536, 0.422185670932519, -2.04706526287664, 0.59093684028528, 0.522319308773342, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.71269767715535, 1.16057691494799, 1.34011878852098, 1.89521416591737, 2.53311402559511, 1.96214168703486, -0.566421515598879, 2.74642624930239, 3.17129986868837, -1.82198870938952, 0, 0, 0, 0, 11.1699829238239, 8.65223156827827, -2.49768411251822, -0.86504295831357, -0.998865569685859, 0.441440386136645, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.32664991614216, -2.69693703815182, 2.07610309995257, 1.46802658041887, 0, 3.03973683071413, 1.31624465810882, -6.382117875081, 4.91295663090393, -1.4113063856887, 0, 0, 0, 0, 0, 13.4039795085887, 5.80409338312195, 2.01017818278147, -1.54743588659732, 0.341938252770122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.82970843102536, 0, -1.49829835452879, 4.23782770691181, 0, 0, 3.79967103839267, 0, -3.54562104171168, -4.07409060843206, 0, 0, 0, 0, 0, 0, 16.7549743857359, 0, 1.11676565710082, 0.987090711415303, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741914, 1.00508909139074, -0.193429485824667, 3.55615782880926, 0, 0, 0, 4.45964044034301, -0.858258202906997, 2.67027285925187, 0, 0, 0, 0, 0, 0, 0, 8.42792824422443, -1.62195554683794, -2.29379153190449, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.14891252930761, 1.29756443747036, 0.749149177264392, 2.75458800949268, 0, 0, 0, 5.75737105184054, 3.32401972660469, 2.06838446274242, 0, 0, 0, 0, 0, 0, 0, 10.8804085776374, 6.2818068211921, -1.77676328054754, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-1.32664991614217, 0, 1.73008591662714, -3.18072425757423, 0, 0, 0, 0, 7.67649473578739, -2.38836465270398, 0, 0, 0, 0, 0, 0, 0, 0, 14.5072114368499, 2.05162951662072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.93808315196469, 0, 0, 3.11415464992885, 0, 0, 0, 0, 0, 5.52707620976692, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.80288457473997, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.6248076809272, 0, 0, 5.39387407630364, 0, 0, 0, 0, 1.09477880811911e-14, 9.57317681262152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10.0508909139073, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    static const double dmats2[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.16227766016838, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.82574185835055, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.16397779494322, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.95803989154981, 5.61248608016091, -1.08012344973464, -0.763762615825972, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.29128784747792, 1.44913767461894, 4.18330013267038, -0.591607978309961, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.32287565553229, 0, 3.86436713231718, -0.341565025531985, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87082869338697, 7.09929573971954, 0, 4.34741302385683, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.08012344973464, 0, 7.09929573971954, 2.50998007960223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-3.81881307912987, 0, 0, 8.87411967464942, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.74954541697351, 5.79655069847578, -1.67332005306815, -1.18321595661993, 7.74596669241484, -1.2, 0.346410161513782, -0.979795897113276, 0.282842712474623, 0.200000000000002, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.32379000772445, 2.44948974278318, 2.82842712474619, -0.999999999999997, 1.30930734141596, 7.09929573971954, -2.04939015319193, -0.414039335605408, -0.47809144373376, 0.169030850945702, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.80000000000001, 0.632455532033676, 4.38178046004133, -0.774596669241484, 0, 3.1423376193983, 4.76235235991627, -0.106904496764967, -0.740656079818043, 0.130930734141594, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.03923048454133, 0, 3.16227766016838, -0.447213595499958, 0, 0, 5.89188303637179, 0, -0.534522483824848, 0.0755928946018432, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.01246117974981, 2.12132034355964, -0.408248290463862, 3.17542648054294, 9.07114735222145, 0, 0, 7.17137165600636, -1.38013111868471, -1.56144011671765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.55884572681199, 0.54772255750517, 1.58113883008419, 2.45967477524977, 0, 9.07114735222145, 0, 1.85164019954511, 5.34522483824848, -1.20948631362953, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.900000000000006, 0, 1.46059348668044, 1.42009389360938, 0, 0, 9.07114735222146, 0, 4.93770719878694, -0.69829724875518, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.27279220613579, -6.26099033699941, 0, 3.83405790253617, 0, 0, 0, 10.5830052442584, 0, 5.18459255872629, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.734846922834956, 0, -6.26099033699941, 2.21359436211787, 0, 0, 0, 0, 10.5830052442584, 2.99332590941915, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.7157676649773, 0, 0, -4.69574275274955, 0, 0, 0, 0, 1.02381519203602e-14, 12.69960629311, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.56904651573303, 5.80288457473998, -2.01017818278147, -1.42141062443803, 8.14215222512715, -2.10229466468021, 0.728256234341424, -1.71651640581399, 0.594618725379071, 0.420458932936045, 9.81070843517429, -1.18450885369836, 0.305838870920601, -0.105945692672795, -1.02581475831037, 0.264864231681988, -0.0917516612761806, 0.216260739578392, -0.0749149177264403, -0.0529728463363971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.26568606239552, 3.07059789431495, 1.77281052085584, -1.25356634105601, 2.39356776939084, 6.30376871403131, -2.78313372537745, -0.908295106229243, -0.524404424085072, 0.370809924354783, 1.23603308118261, 9.40174755792013, -2.42752078113806, 0.840917865872083, -0.301561193523228, -0.794200206656968, 0.350641890608832, 0.114434427054263, 0.0660687472643389, -0.0467176592151161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.91485421551268, 1.29756443747036, 3.74574588632197, -1.05945692672795, 0.404586796856345, 5.01426536422408, 1.80936716113936, -0.383824736789367, -1.1080065755349, 0.313391585264004, 0, 2.82521847127454, 8.2065180664829, -2.84282124887606, -0.0509731451534337, -0.631738055305789, -0.227958835180083, 0.0483573714561674, 0.139595707137602, -0.0394836284566113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741913, 0.335029697130247, 4.06201920231798, -0.820651806648289, 0, 1.69926454679665, 5.88642506110457, -0.0991031208965142, -1.2015614840698, 0.242752078113805, 0, 0, 4.94413232473044, 5.13809303146605, 0, -0.21408720964442, -0.741619848709568, 0.012485819621074, 0.151382517704875, -0.0305838870920598, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.856348838577676, 0, 2.68023757704196, -0.473803541479343, 0, 0, 5.09779364038993, 0, -0.792824967172093, 0.140152977645346, 0, 0, 0, 7.91061171956871, 0, 0, -0.642261628933256, 0, 0.0998865569685856, -0.0176576154454656, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.02649122047609, 2.74642624930238, -0.792824967172095, 2.24244764232555, 2.14087209644419, -0.331662479035541, 0.0957427107756347, 6.49923072370876, -1.87616630392937, -2.15580611373101, 11.0554159678513, 0, 0, 0, 9.44035859331468, -1.46249406456536, 0.422185670932518, -2.04706526287664, 0.59093684028528, 0.522319308773342, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.71269767715535, 1.16057691494799, 1.34011878852098, 1.89521416591737, 0.361873432227872, 1.96214168703486, -0.566421515598874, 2.74642624930239, 3.17129986868837, -1.82198870938952, 0, 11.0554159678513, 0, 0, 1.59571184626056, 8.65223156827827, -2.49768411251822, -0.865042958313571, -0.99886556968586, 0.441440386136643, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.32664991614216, 0.299659670905759, 2.07610309995256, 1.46802658041887, 0, 0.868496237346896, 1.31624465810882, 0.70912420834234, 4.91295663090392, -1.41130638568871, 0, 0, 11.0554159678513, 0, 0, 3.82970843102535, 5.80409338312195, -0.223353131420162, -1.54743588659732, 0.341938252770121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.765941686205069, 0, 1.49829835452879, 0.847565541382364, 0, 0, 1.62843044502543, 0, 3.54562104171167, -0.814818121686416, 0, 0, 0, 11.0554159678513, 0, 0, 7.18070330817254, 0, -1.11676565710082, 0.197418142283061, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741913, 1.00508909139074, -0.193429485824669, 3.55615782880926, -8.46157280212812, 0, 0, 4.45964044034301, -0.858258202906995, 2.67027285925187, 0, 0, 0, 0, 12.4373429638328, 0, 0, 8.42792824422443, -1.62195554683794, -2.29379153190448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.1489125293076, 0.25951288749407, 0.749149177264392, 2.75458800949268, 0, -8.46157280212812, 0, 1.15147421036811, 3.3240197266047, 2.06838446274242, 0, 0, 0, 0, 0, 12.4373429638327, 0, 2.17608171552749, 6.28180682119209, -1.77676328054754, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.663324958071074, 0, 0.692034366650854, 1.59036212878711, 0, 0, -8.46157280212813, 0, 3.07059789431495, 1.19418232635198, 0, 0, 0, 0, 0, 0, 12.4373429638327, 0, 5.80288457473997, -1.02581475831036, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.938083151964692, 7.62808987244125, 0, 3.11415464992885, 0, 0, 0, -7.5213980463361, 0, 5.52707620976692, 0, 0, 0, 0, 0, 0, 0, 14.2141062443803, 0, 5.80288457473997, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.541602560309066, 0, 7.62808987244125, 1.79795802543454, 0, 0, 0, 0, -7.5213980463361, 3.1910589375405, 0, 0, 0, 0, 0, 0, 0, 0, 14.2141062443803, 3.35029697130245, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-5.36159180343549, 0, 0, 8.8994381845148, 0, 0, 0, 0, 0, -5.26497863243526, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16.583123951777, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    // Compute reference derivatives
    // Declare pointer to array of derivatives on FIAT element
    double *derivatives = new double [num_derivatives];
    
    // Declare coefficients
    double coeff0_0 = 0;
    double coeff0_1 = 0;
    double coeff0_2 = 0;
    double coeff0_3 = 0;
    double coeff0_4 = 0;
    double coeff0_5 = 0;
    double coeff0_6 = 0;
    double coeff0_7 = 0;
    double coeff0_8 = 0;
    double coeff0_9 = 0;
    double coeff0_10 = 0;
    double coeff0_11 = 0;
    double coeff0_12 = 0;
    double coeff0_13 = 0;
    double coeff0_14 = 0;
    double coeff0_15 = 0;
    double coeff0_16 = 0;
    double coeff0_17 = 0;
    double coeff0_18 = 0;
    double coeff0_19 = 0;
    double coeff0_20 = 0;
    double coeff0_21 = 0;
    double coeff0_22 = 0;
    double coeff0_23 = 0;
    double coeff0_24 = 0;
    double coeff0_25 = 0;
    double coeff0_26 = 0;
    double coeff0_27 = 0;
    double coeff0_28 = 0;
    double coeff0_29 = 0;
    double coeff0_30 = 0;
    double coeff0_31 = 0;
    double coeff0_32 = 0;
    double coeff0_33 = 0;
    double coeff0_34 = 0;
    
    // Declare new coefficients
    double new_coeff0_0 = 0;
    double new_coeff0_1 = 0;
    double new_coeff0_2 = 0;
    double new_coeff0_3 = 0;
    double new_coeff0_4 = 0;
    double new_coeff0_5 = 0;
    double new_coeff0_6 = 0;
    double new_coeff0_7 = 0;
    double new_coeff0_8 = 0;
    double new_coeff0_9 = 0;
    double new_coeff0_10 = 0;
    double new_coeff0_11 = 0;
    double new_coeff0_12 = 0;
    double new_coeff0_13 = 0;
    double new_coeff0_14 = 0;
    double new_coeff0_15 = 0;
    double new_coeff0_16 = 0;
    double new_coeff0_17 = 0;
    double new_coeff0_18 = 0;
    double new_coeff0_19 = 0;
    double new_coeff0_20 = 0;
    double new_coeff0_21 = 0;
    double new_coeff0_22 = 0;
    double new_coeff0_23 = 0;
    double new_coeff0_24 = 0;
    double new_coeff0_25 = 0;
    double new_coeff0_26 = 0;
    double new_coeff0_27 = 0;
    double new_coeff0_28 = 0;
    double new_coeff0_29 = 0;
    double new_coeff0_30 = 0;
    double new_coeff0_31 = 0;
    double new_coeff0_32 = 0;
    double new_coeff0_33 = 0;
    double new_coeff0_34 = 0;
    
    // Loop possible derivatives
    for (unsigned int deriv_num = 0; deriv_num < num_derivatives; deriv_num++)
    {
      // Get values from coefficients array
      new_coeff0_0 = coefficients0[dof][0];
      new_coeff0_1 = coefficients0[dof][1];
      new_coeff0_2 = coefficients0[dof][2];
      new_coeff0_3 = coefficients0[dof][3];
      new_coeff0_4 = coefficients0[dof][4];
      new_coeff0_5 = coefficients0[dof][5];
      new_coeff0_6 = coefficients0[dof][6];
      new_coeff0_7 = coefficients0[dof][7];
      new_coeff0_8 = coefficients0[dof][8];
      new_coeff0_9 = coefficients0[dof][9];
      new_coeff0_10 = coefficients0[dof][10];
      new_coeff0_11 = coefficients0[dof][11];
      new_coeff0_12 = coefficients0[dof][12];
      new_coeff0_13 = coefficients0[dof][13];
      new_coeff0_14 = coefficients0[dof][14];
      new_coeff0_15 = coefficients0[dof][15];
      new_coeff0_16 = coefficients0[dof][16];
      new_coeff0_17 = coefficients0[dof][17];
      new_coeff0_18 = coefficients0[dof][18];
      new_coeff0_19 = coefficients0[dof][19];
      new_coeff0_20 = coefficients0[dof][20];
      new_coeff0_21 = coefficients0[dof][21];
      new_coeff0_22 = coefficients0[dof][22];
      new_coeff0_23 = coefficients0[dof][23];
      new_coeff0_24 = coefficients0[dof][24];
      new_coeff0_25 = coefficients0[dof][25];
      new_coeff0_26 = coefficients0[dof][26];
      new_coeff0_27 = coefficients0[dof][27];
      new_coeff0_28 = coefficients0[dof][28];
      new_coeff0_29 = coefficients0[dof][29];
      new_coeff0_30 = coefficients0[dof][30];
      new_coeff0_31 = coefficients0[dof][31];
      new_coeff0_32 = coefficients0[dof][32];
      new_coeff0_33 = coefficients0[dof][33];
      new_coeff0_34 = coefficients0[dof][34];
    
      // Loop derivative order
      for (unsigned int j = 0; j < n; j++)
      {
        // Update old coefficients
        coeff0_0 = new_coeff0_0;
        coeff0_1 = new_coeff0_1;
        coeff0_2 = new_coeff0_2;
        coeff0_3 = new_coeff0_3;
        coeff0_4 = new_coeff0_4;
        coeff0_5 = new_coeff0_5;
        coeff0_6 = new_coeff0_6;
        coeff0_7 = new_coeff0_7;
        coeff0_8 = new_coeff0_8;
        coeff0_9 = new_coeff0_9;
        coeff0_10 = new_coeff0_10;
        coeff0_11 = new_coeff0_11;
        coeff0_12 = new_coeff0_12;
        coeff0_13 = new_coeff0_13;
        coeff0_14 = new_coeff0_14;
        coeff0_15 = new_coeff0_15;
        coeff0_16 = new_coeff0_16;
        coeff0_17 = new_coeff0_17;
        coeff0_18 = new_coeff0_18;
        coeff0_19 = new_coeff0_19;
        coeff0_20 = new_coeff0_20;
        coeff0_21 = new_coeff0_21;
        coeff0_22 = new_coeff0_22;
        coeff0_23 = new_coeff0_23;
        coeff0_24 = new_coeff0_24;
        coeff0_25 = new_coeff0_25;
        coeff0_26 = new_coeff0_26;
        coeff0_27 = new_coeff0_27;
        coeff0_28 = new_coeff0_28;
        coeff0_29 = new_coeff0_29;
        coeff0_30 = new_coeff0_30;
        coeff0_31 = new_coeff0_31;
        coeff0_32 = new_coeff0_32;
        coeff0_33 = new_coeff0_33;
        coeff0_34 = new_coeff0_34;
    
        if(combinations[deriv_num][j] == 0)
        {
          new_coeff0_0 = coeff0_0*dmats0[0][0] + coeff0_1*dmats0[1][0] + coeff0_2*dmats0[2][0] + coeff0_3*dmats0[3][0] + coeff0_4*dmats0[4][0] + coeff0_5*dmats0[5][0] + coeff0_6*dmats0[6][0] + coeff0_7*dmats0[7][0] + coeff0_8*dmats0[8][0] + coeff0_9*dmats0[9][0] + coeff0_10*dmats0[10][0] + coeff0_11*dmats0[11][0] + coeff0_12*dmats0[12][0] + coeff0_13*dmats0[13][0] + coeff0_14*dmats0[14][0] + coeff0_15*dmats0[15][0] + coeff0_16*dmats0[16][0] + coeff0_17*dmats0[17][0] + coeff0_18*dmats0[18][0] + coeff0_19*dmats0[19][0] + coeff0_20*dmats0[20][0] + coeff0_21*dmats0[21][0] + coeff0_22*dmats0[22][0] + coeff0_23*dmats0[23][0] + coeff0_24*dmats0[24][0] + coeff0_25*dmats0[25][0] + coeff0_26*dmats0[26][0] + coeff0_27*dmats0[27][0] + coeff0_28*dmats0[28][0] + coeff0_29*dmats0[29][0] + coeff0_30*dmats0[30][0] + coeff0_31*dmats0[31][0] + coeff0_32*dmats0[32][0] + coeff0_33*dmats0[33][0] + coeff0_34*dmats0[34][0];
          new_coeff0_1 = coeff0_0*dmats0[0][1] + coeff0_1*dmats0[1][1] + coeff0_2*dmats0[2][1] + coeff0_3*dmats0[3][1] + coeff0_4*dmats0[4][1] + coeff0_5*dmats0[5][1] + coeff0_6*dmats0[6][1] + coeff0_7*dmats0[7][1] + coeff0_8*dmats0[8][1] + coeff0_9*dmats0[9][1] + coeff0_10*dmats0[10][1] + coeff0_11*dmats0[11][1] + coeff0_12*dmats0[12][1] + coeff0_13*dmats0[13][1] + coeff0_14*dmats0[14][1] + coeff0_15*dmats0[15][1] + coeff0_16*dmats0[16][1] + coeff0_17*dmats0[17][1] + coeff0_18*dmats0[18][1] + coeff0_19*dmats0[19][1] + coeff0_20*dmats0[20][1] + coeff0_21*dmats0[21][1] + coeff0_22*dmats0[22][1] + coeff0_23*dmats0[23][1] + coeff0_24*dmats0[24][1] + coeff0_25*dmats0[25][1] + coeff0_26*dmats0[26][1] + coeff0_27*dmats0[27][1] + coeff0_28*dmats0[28][1] + coeff0_29*dmats0[29][1] + coeff0_30*dmats0[30][1] + coeff0_31*dmats0[31][1] + coeff0_32*dmats0[32][1] + coeff0_33*dmats0[33][1] + coeff0_34*dmats0[34][1];
          new_coeff0_2 = coeff0_0*dmats0[0][2] + coeff0_1*dmats0[1][2] + coeff0_2*dmats0[2][2] + coeff0_3*dmats0[3][2] + coeff0_4*dmats0[4][2] + coeff0_5*dmats0[5][2] + coeff0_6*dmats0[6][2] + coeff0_7*dmats0[7][2] + coeff0_8*dmats0[8][2] + coeff0_9*dmats0[9][2] + coeff0_10*dmats0[10][2] + coeff0_11*dmats0[11][2] + coeff0_12*dmats0[12][2] + coeff0_13*dmats0[13][2] + coeff0_14*dmats0[14][2] + coeff0_15*dmats0[15][2] + coeff0_16*dmats0[16][2] + coeff0_17*dmats0[17][2] + coeff0_18*dmats0[18][2] + coeff0_19*dmats0[19][2] + coeff0_20*dmats0[20][2] + coeff0_21*dmats0[21][2] + coeff0_22*dmats0[22][2] + coeff0_23*dmats0[23][2] + coeff0_24*dmats0[24][2] + coeff0_25*dmats0[25][2] + coeff0_26*dmats0[26][2] + coeff0_27*dmats0[27][2] + coeff0_28*dmats0[28][2] + coeff0_29*dmats0[29][2] + coeff0_30*dmats0[30][2] + coeff0_31*dmats0[31][2] + coeff0_32*dmats0[32][2] + coeff0_33*dmats0[33][2] + coeff0_34*dmats0[34][2];
          new_coeff0_3 = coeff0_0*dmats0[0][3] + coeff0_1*dmats0[1][3] + coeff0_2*dmats0[2][3] + coeff0_3*dmats0[3][3] + coeff0_4*dmats0[4][3] + coeff0_5*dmats0[5][3] + coeff0_6*dmats0[6][3] + coeff0_7*dmats0[7][3] + coeff0_8*dmats0[8][3] + coeff0_9*dmats0[9][3] + coeff0_10*dmats0[10][3] + coeff0_11*dmats0[11][3] + coeff0_12*dmats0[12][3] + coeff0_13*dmats0[13][3] + coeff0_14*dmats0[14][3] + coeff0_15*dmats0[15][3] + coeff0_16*dmats0[16][3] + coeff0_17*dmats0[17][3] + coeff0_18*dmats0[18][3] + coeff0_19*dmats0[19][3] + coeff0_20*dmats0[20][3] + coeff0_21*dmats0[21][3] + coeff0_22*dmats0[22][3] + coeff0_23*dmats0[23][3] + coeff0_24*dmats0[24][3] + coeff0_25*dmats0[25][3] + coeff0_26*dmats0[26][3] + coeff0_27*dmats0[27][3] + coeff0_28*dmats0[28][3] + coeff0_29*dmats0[29][3] + coeff0_30*dmats0[30][3] + coeff0_31*dmats0[31][3] + coeff0_32*dmats0[32][3] + coeff0_33*dmats0[33][3] + coeff0_34*dmats0[34][3];
          new_coeff0_4 = coeff0_0*dmats0[0][4] + coeff0_1*dmats0[1][4] + coeff0_2*dmats0[2][4] + coeff0_3*dmats0[3][4] + coeff0_4*dmats0[4][4] + coeff0_5*dmats0[5][4] + coeff0_6*dmats0[6][4] + coeff0_7*dmats0[7][4] + coeff0_8*dmats0[8][4] + coeff0_9*dmats0[9][4] + coeff0_10*dmats0[10][4] + coeff0_11*dmats0[11][4] + coeff0_12*dmats0[12][4] + coeff0_13*dmats0[13][4] + coeff0_14*dmats0[14][4] + coeff0_15*dmats0[15][4] + coeff0_16*dmats0[16][4] + coeff0_17*dmats0[17][4] + coeff0_18*dmats0[18][4] + coeff0_19*dmats0[19][4] + coeff0_20*dmats0[20][4] + coeff0_21*dmats0[21][4] + coeff0_22*dmats0[22][4] + coeff0_23*dmats0[23][4] + coeff0_24*dmats0[24][4] + coeff0_25*dmats0[25][4] + coeff0_26*dmats0[26][4] + coeff0_27*dmats0[27][4] + coeff0_28*dmats0[28][4] + coeff0_29*dmats0[29][4] + coeff0_30*dmats0[30][4] + coeff0_31*dmats0[31][4] + coeff0_32*dmats0[32][4] + coeff0_33*dmats0[33][4] + coeff0_34*dmats0[34][4];
          new_coeff0_5 = coeff0_0*dmats0[0][5] + coeff0_1*dmats0[1][5] + coeff0_2*dmats0[2][5] + coeff0_3*dmats0[3][5] + coeff0_4*dmats0[4][5] + coeff0_5*dmats0[5][5] + coeff0_6*dmats0[6][5] + coeff0_7*dmats0[7][5] + coeff0_8*dmats0[8][5] + coeff0_9*dmats0[9][5] + coeff0_10*dmats0[10][5] + coeff0_11*dmats0[11][5] + coeff0_12*dmats0[12][5] + coeff0_13*dmats0[13][5] + coeff0_14*dmats0[14][5] + coeff0_15*dmats0[15][5] + coeff0_16*dmats0[16][5] + coeff0_17*dmats0[17][5] + coeff0_18*dmats0[18][5] + coeff0_19*dmats0[19][5] + coeff0_20*dmats0[20][5] + coeff0_21*dmats0[21][5] + coeff0_22*dmats0[22][5] + coeff0_23*dmats0[23][5] + coeff0_24*dmats0[24][5] + coeff0_25*dmats0[25][5] + coeff0_26*dmats0[26][5] + coeff0_27*dmats0[27][5] + coeff0_28*dmats0[28][5] + coeff0_29*dmats0[29][5] + coeff0_30*dmats0[30][5] + coeff0_31*dmats0[31][5] + coeff0_32*dmats0[32][5] + coeff0_33*dmats0[33][5] + coeff0_34*dmats0[34][5];
          new_coeff0_6 = coeff0_0*dmats0[0][6] + coeff0_1*dmats0[1][6] + coeff0_2*dmats0[2][6] + coeff0_3*dmats0[3][6] + coeff0_4*dmats0[4][6] + coeff0_5*dmats0[5][6] + coeff0_6*dmats0[6][6] + coeff0_7*dmats0[7][6] + coeff0_8*dmats0[8][6] + coeff0_9*dmats0[9][6] + coeff0_10*dmats0[10][6] + coeff0_11*dmats0[11][6] + coeff0_12*dmats0[12][6] + coeff0_13*dmats0[13][6] + coeff0_14*dmats0[14][6] + coeff0_15*dmats0[15][6] + coeff0_16*dmats0[16][6] + coeff0_17*dmats0[17][6] + coeff0_18*dmats0[18][6] + coeff0_19*dmats0[19][6] + coeff0_20*dmats0[20][6] + coeff0_21*dmats0[21][6] + coeff0_22*dmats0[22][6] + coeff0_23*dmats0[23][6] + coeff0_24*dmats0[24][6] + coeff0_25*dmats0[25][6] + coeff0_26*dmats0[26][6] + coeff0_27*dmats0[27][6] + coeff0_28*dmats0[28][6] + coeff0_29*dmats0[29][6] + coeff0_30*dmats0[30][6] + coeff0_31*dmats0[31][6] + coeff0_32*dmats0[32][6] + coeff0_33*dmats0[33][6] + coeff0_34*dmats0[34][6];
          new_coeff0_7 = coeff0_0*dmats0[0][7] + coeff0_1*dmats0[1][7] + coeff0_2*dmats0[2][7] + coeff0_3*dmats0[3][7] + coeff0_4*dmats0[4][7] + coeff0_5*dmats0[5][7] + coeff0_6*dmats0[6][7] + coeff0_7*dmats0[7][7] + coeff0_8*dmats0[8][7] + coeff0_9*dmats0[9][7] + coeff0_10*dmats0[10][7] + coeff0_11*dmats0[11][7] + coeff0_12*dmats0[12][7] + coeff0_13*dmats0[13][7] + coeff0_14*dmats0[14][7] + coeff0_15*dmats0[15][7] + coeff0_16*dmats0[16][7] + coeff0_17*dmats0[17][7] + coeff0_18*dmats0[18][7] + coeff0_19*dmats0[19][7] + coeff0_20*dmats0[20][7] + coeff0_21*dmats0[21][7] + coeff0_22*dmats0[22][7] + coeff0_23*dmats0[23][7] + coeff0_24*dmats0[24][7] + coeff0_25*dmats0[25][7] + coeff0_26*dmats0[26][7] + coeff0_27*dmats0[27][7] + coeff0_28*dmats0[28][7] + coeff0_29*dmats0[29][7] + coeff0_30*dmats0[30][7] + coeff0_31*dmats0[31][7] + coeff0_32*dmats0[32][7] + coeff0_33*dmats0[33][7] + coeff0_34*dmats0[34][7];
          new_coeff0_8 = coeff0_0*dmats0[0][8] + coeff0_1*dmats0[1][8] + coeff0_2*dmats0[2][8] + coeff0_3*dmats0[3][8] + coeff0_4*dmats0[4][8] + coeff0_5*dmats0[5][8] + coeff0_6*dmats0[6][8] + coeff0_7*dmats0[7][8] + coeff0_8*dmats0[8][8] + coeff0_9*dmats0[9][8] + coeff0_10*dmats0[10][8] + coeff0_11*dmats0[11][8] + coeff0_12*dmats0[12][8] + coeff0_13*dmats0[13][8] + coeff0_14*dmats0[14][8] + coeff0_15*dmats0[15][8] + coeff0_16*dmats0[16][8] + coeff0_17*dmats0[17][8] + coeff0_18*dmats0[18][8] + coeff0_19*dmats0[19][8] + coeff0_20*dmats0[20][8] + coeff0_21*dmats0[21][8] + coeff0_22*dmats0[22][8] + coeff0_23*dmats0[23][8] + coeff0_24*dmats0[24][8] + coeff0_25*dmats0[25][8] + coeff0_26*dmats0[26][8] + coeff0_27*dmats0[27][8] + coeff0_28*dmats0[28][8] + coeff0_29*dmats0[29][8] + coeff0_30*dmats0[30][8] + coeff0_31*dmats0[31][8] + coeff0_32*dmats0[32][8] + coeff0_33*dmats0[33][8] + coeff0_34*dmats0[34][8];
          new_coeff0_9 = coeff0_0*dmats0[0][9] + coeff0_1*dmats0[1][9] + coeff0_2*dmats0[2][9] + coeff0_3*dmats0[3][9] + coeff0_4*dmats0[4][9] + coeff0_5*dmats0[5][9] + coeff0_6*dmats0[6][9] + coeff0_7*dmats0[7][9] + coeff0_8*dmats0[8][9] + coeff0_9*dmats0[9][9] + coeff0_10*dmats0[10][9] + coeff0_11*dmats0[11][9] + coeff0_12*dmats0[12][9] + coeff0_13*dmats0[13][9] + coeff0_14*dmats0[14][9] + coeff0_15*dmats0[15][9] + coeff0_16*dmats0[16][9] + coeff0_17*dmats0[17][9] + coeff0_18*dmats0[18][9] + coeff0_19*dmats0[19][9] + coeff0_20*dmats0[20][9] + coeff0_21*dmats0[21][9] + coeff0_22*dmats0[22][9] + coeff0_23*dmats0[23][9] + coeff0_24*dmats0[24][9] + coeff0_25*dmats0[25][9] + coeff0_26*dmats0[26][9] + coeff0_27*dmats0[27][9] + coeff0_28*dmats0[28][9] + coeff0_29*dmats0[29][9] + coeff0_30*dmats0[30][9] + coeff0_31*dmats0[31][9] + coeff0_32*dmats0[32][9] + coeff0_33*dmats0[33][9] + coeff0_34*dmats0[34][9];
          new_coeff0_10 = coeff0_0*dmats0[0][10] + coeff0_1*dmats0[1][10] + coeff0_2*dmats0[2][10] + coeff0_3*dmats0[3][10] + coeff0_4*dmats0[4][10] + coeff0_5*dmats0[5][10] + coeff0_6*dmats0[6][10] + coeff0_7*dmats0[7][10] + coeff0_8*dmats0[8][10] + coeff0_9*dmats0[9][10] + coeff0_10*dmats0[10][10] + coeff0_11*dmats0[11][10] + coeff0_12*dmats0[12][10] + coeff0_13*dmats0[13][10] + coeff0_14*dmats0[14][10] + coeff0_15*dmats0[15][10] + coeff0_16*dmats0[16][10] + coeff0_17*dmats0[17][10] + coeff0_18*dmats0[18][10] + coeff0_19*dmats0[19][10] + coeff0_20*dmats0[20][10] + coeff0_21*dmats0[21][10] + coeff0_22*dmats0[22][10] + coeff0_23*dmats0[23][10] + coeff0_24*dmats0[24][10] + coeff0_25*dmats0[25][10] + coeff0_26*dmats0[26][10] + coeff0_27*dmats0[27][10] + coeff0_28*dmats0[28][10] + coeff0_29*dmats0[29][10] + coeff0_30*dmats0[30][10] + coeff0_31*dmats0[31][10] + coeff0_32*dmats0[32][10] + coeff0_33*dmats0[33][10] + coeff0_34*dmats0[34][10];
          new_coeff0_11 = coeff0_0*dmats0[0][11] + coeff0_1*dmats0[1][11] + coeff0_2*dmats0[2][11] + coeff0_3*dmats0[3][11] + coeff0_4*dmats0[4][11] + coeff0_5*dmats0[5][11] + coeff0_6*dmats0[6][11] + coeff0_7*dmats0[7][11] + coeff0_8*dmats0[8][11] + coeff0_9*dmats0[9][11] + coeff0_10*dmats0[10][11] + coeff0_11*dmats0[11][11] + coeff0_12*dmats0[12][11] + coeff0_13*dmats0[13][11] + coeff0_14*dmats0[14][11] + coeff0_15*dmats0[15][11] + coeff0_16*dmats0[16][11] + coeff0_17*dmats0[17][11] + coeff0_18*dmats0[18][11] + coeff0_19*dmats0[19][11] + coeff0_20*dmats0[20][11] + coeff0_21*dmats0[21][11] + coeff0_22*dmats0[22][11] + coeff0_23*dmats0[23][11] + coeff0_24*dmats0[24][11] + coeff0_25*dmats0[25][11] + coeff0_26*dmats0[26][11] + coeff0_27*dmats0[27][11] + coeff0_28*dmats0[28][11] + coeff0_29*dmats0[29][11] + coeff0_30*dmats0[30][11] + coeff0_31*dmats0[31][11] + coeff0_32*dmats0[32][11] + coeff0_33*dmats0[33][11] + coeff0_34*dmats0[34][11];
          new_coeff0_12 = coeff0_0*dmats0[0][12] + coeff0_1*dmats0[1][12] + coeff0_2*dmats0[2][12] + coeff0_3*dmats0[3][12] + coeff0_4*dmats0[4][12] + coeff0_5*dmats0[5][12] + coeff0_6*dmats0[6][12] + coeff0_7*dmats0[7][12] + coeff0_8*dmats0[8][12] + coeff0_9*dmats0[9][12] + coeff0_10*dmats0[10][12] + coeff0_11*dmats0[11][12] + coeff0_12*dmats0[12][12] + coeff0_13*dmats0[13][12] + coeff0_14*dmats0[14][12] + coeff0_15*dmats0[15][12] + coeff0_16*dmats0[16][12] + coeff0_17*dmats0[17][12] + coeff0_18*dmats0[18][12] + coeff0_19*dmats0[19][12] + coeff0_20*dmats0[20][12] + coeff0_21*dmats0[21][12] + coeff0_22*dmats0[22][12] + coeff0_23*dmats0[23][12] + coeff0_24*dmats0[24][12] + coeff0_25*dmats0[25][12] + coeff0_26*dmats0[26][12] + coeff0_27*dmats0[27][12] + coeff0_28*dmats0[28][12] + coeff0_29*dmats0[29][12] + coeff0_30*dmats0[30][12] + coeff0_31*dmats0[31][12] + coeff0_32*dmats0[32][12] + coeff0_33*dmats0[33][12] + coeff0_34*dmats0[34][12];
          new_coeff0_13 = coeff0_0*dmats0[0][13] + coeff0_1*dmats0[1][13] + coeff0_2*dmats0[2][13] + coeff0_3*dmats0[3][13] + coeff0_4*dmats0[4][13] + coeff0_5*dmats0[5][13] + coeff0_6*dmats0[6][13] + coeff0_7*dmats0[7][13] + coeff0_8*dmats0[8][13] + coeff0_9*dmats0[9][13] + coeff0_10*dmats0[10][13] + coeff0_11*dmats0[11][13] + coeff0_12*dmats0[12][13] + coeff0_13*dmats0[13][13] + coeff0_14*dmats0[14][13] + coeff0_15*dmats0[15][13] + coeff0_16*dmats0[16][13] + coeff0_17*dmats0[17][13] + coeff0_18*dmats0[18][13] + coeff0_19*dmats0[19][13] + coeff0_20*dmats0[20][13] + coeff0_21*dmats0[21][13] + coeff0_22*dmats0[22][13] + coeff0_23*dmats0[23][13] + coeff0_24*dmats0[24][13] + coeff0_25*dmats0[25][13] + coeff0_26*dmats0[26][13] + coeff0_27*dmats0[27][13] + coeff0_28*dmats0[28][13] + coeff0_29*dmats0[29][13] + coeff0_30*dmats0[30][13] + coeff0_31*dmats0[31][13] + coeff0_32*dmats0[32][13] + coeff0_33*dmats0[33][13] + coeff0_34*dmats0[34][13];
          new_coeff0_14 = coeff0_0*dmats0[0][14] + coeff0_1*dmats0[1][14] + coeff0_2*dmats0[2][14] + coeff0_3*dmats0[3][14] + coeff0_4*dmats0[4][14] + coeff0_5*dmats0[5][14] + coeff0_6*dmats0[6][14] + coeff0_7*dmats0[7][14] + coeff0_8*dmats0[8][14] + coeff0_9*dmats0[9][14] + coeff0_10*dmats0[10][14] + coeff0_11*dmats0[11][14] + coeff0_12*dmats0[12][14] + coeff0_13*dmats0[13][14] + coeff0_14*dmats0[14][14] + coeff0_15*dmats0[15][14] + coeff0_16*dmats0[16][14] + coeff0_17*dmats0[17][14] + coeff0_18*dmats0[18][14] + coeff0_19*dmats0[19][14] + coeff0_20*dmats0[20][14] + coeff0_21*dmats0[21][14] + coeff0_22*dmats0[22][14] + coeff0_23*dmats0[23][14] + coeff0_24*dmats0[24][14] + coeff0_25*dmats0[25][14] + coeff0_26*dmats0[26][14] + coeff0_27*dmats0[27][14] + coeff0_28*dmats0[28][14] + coeff0_29*dmats0[29][14] + coeff0_30*dmats0[30][14] + coeff0_31*dmats0[31][14] + coeff0_32*dmats0[32][14] + coeff0_33*dmats0[33][14] + coeff0_34*dmats0[34][14];
          new_coeff0_15 = coeff0_0*dmats0[0][15] + coeff0_1*dmats0[1][15] + coeff0_2*dmats0[2][15] + coeff0_3*dmats0[3][15] + coeff0_4*dmats0[4][15] + coeff0_5*dmats0[5][15] + coeff0_6*dmats0[6][15] + coeff0_7*dmats0[7][15] + coeff0_8*dmats0[8][15] + coeff0_9*dmats0[9][15] + coeff0_10*dmats0[10][15] + coeff0_11*dmats0[11][15] + coeff0_12*dmats0[12][15] + coeff0_13*dmats0[13][15] + coeff0_14*dmats0[14][15] + coeff0_15*dmats0[15][15] + coeff0_16*dmats0[16][15] + coeff0_17*dmats0[17][15] + coeff0_18*dmats0[18][15] + coeff0_19*dmats0[19][15] + coeff0_20*dmats0[20][15] + coeff0_21*dmats0[21][15] + coeff0_22*dmats0[22][15] + coeff0_23*dmats0[23][15] + coeff0_24*dmats0[24][15] + coeff0_25*dmats0[25][15] + coeff0_26*dmats0[26][15] + coeff0_27*dmats0[27][15] + coeff0_28*dmats0[28][15] + coeff0_29*dmats0[29][15] + coeff0_30*dmats0[30][15] + coeff0_31*dmats0[31][15] + coeff0_32*dmats0[32][15] + coeff0_33*dmats0[33][15] + coeff0_34*dmats0[34][15];
          new_coeff0_16 = coeff0_0*dmats0[0][16] + coeff0_1*dmats0[1][16] + coeff0_2*dmats0[2][16] + coeff0_3*dmats0[3][16] + coeff0_4*dmats0[4][16] + coeff0_5*dmats0[5][16] + coeff0_6*dmats0[6][16] + coeff0_7*dmats0[7][16] + coeff0_8*dmats0[8][16] + coeff0_9*dmats0[9][16] + coeff0_10*dmats0[10][16] + coeff0_11*dmats0[11][16] + coeff0_12*dmats0[12][16] + coeff0_13*dmats0[13][16] + coeff0_14*dmats0[14][16] + coeff0_15*dmats0[15][16] + coeff0_16*dmats0[16][16] + coeff0_17*dmats0[17][16] + coeff0_18*dmats0[18][16] + coeff0_19*dmats0[19][16] + coeff0_20*dmats0[20][16] + coeff0_21*dmats0[21][16] + coeff0_22*dmats0[22][16] + coeff0_23*dmats0[23][16] + coeff0_24*dmats0[24][16] + coeff0_25*dmats0[25][16] + coeff0_26*dmats0[26][16] + coeff0_27*dmats0[27][16] + coeff0_28*dmats0[28][16] + coeff0_29*dmats0[29][16] + coeff0_30*dmats0[30][16] + coeff0_31*dmats0[31][16] + coeff0_32*dmats0[32][16] + coeff0_33*dmats0[33][16] + coeff0_34*dmats0[34][16];
          new_coeff0_17 = coeff0_0*dmats0[0][17] + coeff0_1*dmats0[1][17] + coeff0_2*dmats0[2][17] + coeff0_3*dmats0[3][17] + coeff0_4*dmats0[4][17] + coeff0_5*dmats0[5][17] + coeff0_6*dmats0[6][17] + coeff0_7*dmats0[7][17] + coeff0_8*dmats0[8][17] + coeff0_9*dmats0[9][17] + coeff0_10*dmats0[10][17] + coeff0_11*dmats0[11][17] + coeff0_12*dmats0[12][17] + coeff0_13*dmats0[13][17] + coeff0_14*dmats0[14][17] + coeff0_15*dmats0[15][17] + coeff0_16*dmats0[16][17] + coeff0_17*dmats0[17][17] + coeff0_18*dmats0[18][17] + coeff0_19*dmats0[19][17] + coeff0_20*dmats0[20][17] + coeff0_21*dmats0[21][17] + coeff0_22*dmats0[22][17] + coeff0_23*dmats0[23][17] + coeff0_24*dmats0[24][17] + coeff0_25*dmats0[25][17] + coeff0_26*dmats0[26][17] + coeff0_27*dmats0[27][17] + coeff0_28*dmats0[28][17] + coeff0_29*dmats0[29][17] + coeff0_30*dmats0[30][17] + coeff0_31*dmats0[31][17] + coeff0_32*dmats0[32][17] + coeff0_33*dmats0[33][17] + coeff0_34*dmats0[34][17];
          new_coeff0_18 = coeff0_0*dmats0[0][18] + coeff0_1*dmats0[1][18] + coeff0_2*dmats0[2][18] + coeff0_3*dmats0[3][18] + coeff0_4*dmats0[4][18] + coeff0_5*dmats0[5][18] + coeff0_6*dmats0[6][18] + coeff0_7*dmats0[7][18] + coeff0_8*dmats0[8][18] + coeff0_9*dmats0[9][18] + coeff0_10*dmats0[10][18] + coeff0_11*dmats0[11][18] + coeff0_12*dmats0[12][18] + coeff0_13*dmats0[13][18] + coeff0_14*dmats0[14][18] + coeff0_15*dmats0[15][18] + coeff0_16*dmats0[16][18] + coeff0_17*dmats0[17][18] + coeff0_18*dmats0[18][18] + coeff0_19*dmats0[19][18] + coeff0_20*dmats0[20][18] + coeff0_21*dmats0[21][18] + coeff0_22*dmats0[22][18] + coeff0_23*dmats0[23][18] + coeff0_24*dmats0[24][18] + coeff0_25*dmats0[25][18] + coeff0_26*dmats0[26][18] + coeff0_27*dmats0[27][18] + coeff0_28*dmats0[28][18] + coeff0_29*dmats0[29][18] + coeff0_30*dmats0[30][18] + coeff0_31*dmats0[31][18] + coeff0_32*dmats0[32][18] + coeff0_33*dmats0[33][18] + coeff0_34*dmats0[34][18];
          new_coeff0_19 = coeff0_0*dmats0[0][19] + coeff0_1*dmats0[1][19] + coeff0_2*dmats0[2][19] + coeff0_3*dmats0[3][19] + coeff0_4*dmats0[4][19] + coeff0_5*dmats0[5][19] + coeff0_6*dmats0[6][19] + coeff0_7*dmats0[7][19] + coeff0_8*dmats0[8][19] + coeff0_9*dmats0[9][19] + coeff0_10*dmats0[10][19] + coeff0_11*dmats0[11][19] + coeff0_12*dmats0[12][19] + coeff0_13*dmats0[13][19] + coeff0_14*dmats0[14][19] + coeff0_15*dmats0[15][19] + coeff0_16*dmats0[16][19] + coeff0_17*dmats0[17][19] + coeff0_18*dmats0[18][19] + coeff0_19*dmats0[19][19] + coeff0_20*dmats0[20][19] + coeff0_21*dmats0[21][19] + coeff0_22*dmats0[22][19] + coeff0_23*dmats0[23][19] + coeff0_24*dmats0[24][19] + coeff0_25*dmats0[25][19] + coeff0_26*dmats0[26][19] + coeff0_27*dmats0[27][19] + coeff0_28*dmats0[28][19] + coeff0_29*dmats0[29][19] + coeff0_30*dmats0[30][19] + coeff0_31*dmats0[31][19] + coeff0_32*dmats0[32][19] + coeff0_33*dmats0[33][19] + coeff0_34*dmats0[34][19];
          new_coeff0_20 = coeff0_0*dmats0[0][20] + coeff0_1*dmats0[1][20] + coeff0_2*dmats0[2][20] + coeff0_3*dmats0[3][20] + coeff0_4*dmats0[4][20] + coeff0_5*dmats0[5][20] + coeff0_6*dmats0[6][20] + coeff0_7*dmats0[7][20] + coeff0_8*dmats0[8][20] + coeff0_9*dmats0[9][20] + coeff0_10*dmats0[10][20] + coeff0_11*dmats0[11][20] + coeff0_12*dmats0[12][20] + coeff0_13*dmats0[13][20] + coeff0_14*dmats0[14][20] + coeff0_15*dmats0[15][20] + coeff0_16*dmats0[16][20] + coeff0_17*dmats0[17][20] + coeff0_18*dmats0[18][20] + coeff0_19*dmats0[19][20] + coeff0_20*dmats0[20][20] + coeff0_21*dmats0[21][20] + coeff0_22*dmats0[22][20] + coeff0_23*dmats0[23][20] + coeff0_24*dmats0[24][20] + coeff0_25*dmats0[25][20] + coeff0_26*dmats0[26][20] + coeff0_27*dmats0[27][20] + coeff0_28*dmats0[28][20] + coeff0_29*dmats0[29][20] + coeff0_30*dmats0[30][20] + coeff0_31*dmats0[31][20] + coeff0_32*dmats0[32][20] + coeff0_33*dmats0[33][20] + coeff0_34*dmats0[34][20];
          new_coeff0_21 = coeff0_0*dmats0[0][21] + coeff0_1*dmats0[1][21] + coeff0_2*dmats0[2][21] + coeff0_3*dmats0[3][21] + coeff0_4*dmats0[4][21] + coeff0_5*dmats0[5][21] + coeff0_6*dmats0[6][21] + coeff0_7*dmats0[7][21] + coeff0_8*dmats0[8][21] + coeff0_9*dmats0[9][21] + coeff0_10*dmats0[10][21] + coeff0_11*dmats0[11][21] + coeff0_12*dmats0[12][21] + coeff0_13*dmats0[13][21] + coeff0_14*dmats0[14][21] + coeff0_15*dmats0[15][21] + coeff0_16*dmats0[16][21] + coeff0_17*dmats0[17][21] + coeff0_18*dmats0[18][21] + coeff0_19*dmats0[19][21] + coeff0_20*dmats0[20][21] + coeff0_21*dmats0[21][21] + coeff0_22*dmats0[22][21] + coeff0_23*dmats0[23][21] + coeff0_24*dmats0[24][21] + coeff0_25*dmats0[25][21] + coeff0_26*dmats0[26][21] + coeff0_27*dmats0[27][21] + coeff0_28*dmats0[28][21] + coeff0_29*dmats0[29][21] + coeff0_30*dmats0[30][21] + coeff0_31*dmats0[31][21] + coeff0_32*dmats0[32][21] + coeff0_33*dmats0[33][21] + coeff0_34*dmats0[34][21];
          new_coeff0_22 = coeff0_0*dmats0[0][22] + coeff0_1*dmats0[1][22] + coeff0_2*dmats0[2][22] + coeff0_3*dmats0[3][22] + coeff0_4*dmats0[4][22] + coeff0_5*dmats0[5][22] + coeff0_6*dmats0[6][22] + coeff0_7*dmats0[7][22] + coeff0_8*dmats0[8][22] + coeff0_9*dmats0[9][22] + coeff0_10*dmats0[10][22] + coeff0_11*dmats0[11][22] + coeff0_12*dmats0[12][22] + coeff0_13*dmats0[13][22] + coeff0_14*dmats0[14][22] + coeff0_15*dmats0[15][22] + coeff0_16*dmats0[16][22] + coeff0_17*dmats0[17][22] + coeff0_18*dmats0[18][22] + coeff0_19*dmats0[19][22] + coeff0_20*dmats0[20][22] + coeff0_21*dmats0[21][22] + coeff0_22*dmats0[22][22] + coeff0_23*dmats0[23][22] + coeff0_24*dmats0[24][22] + coeff0_25*dmats0[25][22] + coeff0_26*dmats0[26][22] + coeff0_27*dmats0[27][22] + coeff0_28*dmats0[28][22] + coeff0_29*dmats0[29][22] + coeff0_30*dmats0[30][22] + coeff0_31*dmats0[31][22] + coeff0_32*dmats0[32][22] + coeff0_33*dmats0[33][22] + coeff0_34*dmats0[34][22];
          new_coeff0_23 = coeff0_0*dmats0[0][23] + coeff0_1*dmats0[1][23] + coeff0_2*dmats0[2][23] + coeff0_3*dmats0[3][23] + coeff0_4*dmats0[4][23] + coeff0_5*dmats0[5][23] + coeff0_6*dmats0[6][23] + coeff0_7*dmats0[7][23] + coeff0_8*dmats0[8][23] + coeff0_9*dmats0[9][23] + coeff0_10*dmats0[10][23] + coeff0_11*dmats0[11][23] + coeff0_12*dmats0[12][23] + coeff0_13*dmats0[13][23] + coeff0_14*dmats0[14][23] + coeff0_15*dmats0[15][23] + coeff0_16*dmats0[16][23] + coeff0_17*dmats0[17][23] + coeff0_18*dmats0[18][23] + coeff0_19*dmats0[19][23] + coeff0_20*dmats0[20][23] + coeff0_21*dmats0[21][23] + coeff0_22*dmats0[22][23] + coeff0_23*dmats0[23][23] + coeff0_24*dmats0[24][23] + coeff0_25*dmats0[25][23] + coeff0_26*dmats0[26][23] + coeff0_27*dmats0[27][23] + coeff0_28*dmats0[28][23] + coeff0_29*dmats0[29][23] + coeff0_30*dmats0[30][23] + coeff0_31*dmats0[31][23] + coeff0_32*dmats0[32][23] + coeff0_33*dmats0[33][23] + coeff0_34*dmats0[34][23];
          new_coeff0_24 = coeff0_0*dmats0[0][24] + coeff0_1*dmats0[1][24] + coeff0_2*dmats0[2][24] + coeff0_3*dmats0[3][24] + coeff0_4*dmats0[4][24] + coeff0_5*dmats0[5][24] + coeff0_6*dmats0[6][24] + coeff0_7*dmats0[7][24] + coeff0_8*dmats0[8][24] + coeff0_9*dmats0[9][24] + coeff0_10*dmats0[10][24] + coeff0_11*dmats0[11][24] + coeff0_12*dmats0[12][24] + coeff0_13*dmats0[13][24] + coeff0_14*dmats0[14][24] + coeff0_15*dmats0[15][24] + coeff0_16*dmats0[16][24] + coeff0_17*dmats0[17][24] + coeff0_18*dmats0[18][24] + coeff0_19*dmats0[19][24] + coeff0_20*dmats0[20][24] + coeff0_21*dmats0[21][24] + coeff0_22*dmats0[22][24] + coeff0_23*dmats0[23][24] + coeff0_24*dmats0[24][24] + coeff0_25*dmats0[25][24] + coeff0_26*dmats0[26][24] + coeff0_27*dmats0[27][24] + coeff0_28*dmats0[28][24] + coeff0_29*dmats0[29][24] + coeff0_30*dmats0[30][24] + coeff0_31*dmats0[31][24] + coeff0_32*dmats0[32][24] + coeff0_33*dmats0[33][24] + coeff0_34*dmats0[34][24];
          new_coeff0_25 = coeff0_0*dmats0[0][25] + coeff0_1*dmats0[1][25] + coeff0_2*dmats0[2][25] + coeff0_3*dmats0[3][25] + coeff0_4*dmats0[4][25] + coeff0_5*dmats0[5][25] + coeff0_6*dmats0[6][25] + coeff0_7*dmats0[7][25] + coeff0_8*dmats0[8][25] + coeff0_9*dmats0[9][25] + coeff0_10*dmats0[10][25] + coeff0_11*dmats0[11][25] + coeff0_12*dmats0[12][25] + coeff0_13*dmats0[13][25] + coeff0_14*dmats0[14][25] + coeff0_15*dmats0[15][25] + coeff0_16*dmats0[16][25] + coeff0_17*dmats0[17][25] + coeff0_18*dmats0[18][25] + coeff0_19*dmats0[19][25] + coeff0_20*dmats0[20][25] + coeff0_21*dmats0[21][25] + coeff0_22*dmats0[22][25] + coeff0_23*dmats0[23][25] + coeff0_24*dmats0[24][25] + coeff0_25*dmats0[25][25] + coeff0_26*dmats0[26][25] + coeff0_27*dmats0[27][25] + coeff0_28*dmats0[28][25] + coeff0_29*dmats0[29][25] + coeff0_30*dmats0[30][25] + coeff0_31*dmats0[31][25] + coeff0_32*dmats0[32][25] + coeff0_33*dmats0[33][25] + coeff0_34*dmats0[34][25];
          new_coeff0_26 = coeff0_0*dmats0[0][26] + coeff0_1*dmats0[1][26] + coeff0_2*dmats0[2][26] + coeff0_3*dmats0[3][26] + coeff0_4*dmats0[4][26] + coeff0_5*dmats0[5][26] + coeff0_6*dmats0[6][26] + coeff0_7*dmats0[7][26] + coeff0_8*dmats0[8][26] + coeff0_9*dmats0[9][26] + coeff0_10*dmats0[10][26] + coeff0_11*dmats0[11][26] + coeff0_12*dmats0[12][26] + coeff0_13*dmats0[13][26] + coeff0_14*dmats0[14][26] + coeff0_15*dmats0[15][26] + coeff0_16*dmats0[16][26] + coeff0_17*dmats0[17][26] + coeff0_18*dmats0[18][26] + coeff0_19*dmats0[19][26] + coeff0_20*dmats0[20][26] + coeff0_21*dmats0[21][26] + coeff0_22*dmats0[22][26] + coeff0_23*dmats0[23][26] + coeff0_24*dmats0[24][26] + coeff0_25*dmats0[25][26] + coeff0_26*dmats0[26][26] + coeff0_27*dmats0[27][26] + coeff0_28*dmats0[28][26] + coeff0_29*dmats0[29][26] + coeff0_30*dmats0[30][26] + coeff0_31*dmats0[31][26] + coeff0_32*dmats0[32][26] + coeff0_33*dmats0[33][26] + coeff0_34*dmats0[34][26];
          new_coeff0_27 = coeff0_0*dmats0[0][27] + coeff0_1*dmats0[1][27] + coeff0_2*dmats0[2][27] + coeff0_3*dmats0[3][27] + coeff0_4*dmats0[4][27] + coeff0_5*dmats0[5][27] + coeff0_6*dmats0[6][27] + coeff0_7*dmats0[7][27] + coeff0_8*dmats0[8][27] + coeff0_9*dmats0[9][27] + coeff0_10*dmats0[10][27] + coeff0_11*dmats0[11][27] + coeff0_12*dmats0[12][27] + coeff0_13*dmats0[13][27] + coeff0_14*dmats0[14][27] + coeff0_15*dmats0[15][27] + coeff0_16*dmats0[16][27] + coeff0_17*dmats0[17][27] + coeff0_18*dmats0[18][27] + coeff0_19*dmats0[19][27] + coeff0_20*dmats0[20][27] + coeff0_21*dmats0[21][27] + coeff0_22*dmats0[22][27] + coeff0_23*dmats0[23][27] + coeff0_24*dmats0[24][27] + coeff0_25*dmats0[25][27] + coeff0_26*dmats0[26][27] + coeff0_27*dmats0[27][27] + coeff0_28*dmats0[28][27] + coeff0_29*dmats0[29][27] + coeff0_30*dmats0[30][27] + coeff0_31*dmats0[31][27] + coeff0_32*dmats0[32][27] + coeff0_33*dmats0[33][27] + coeff0_34*dmats0[34][27];
          new_coeff0_28 = coeff0_0*dmats0[0][28] + coeff0_1*dmats0[1][28] + coeff0_2*dmats0[2][28] + coeff0_3*dmats0[3][28] + coeff0_4*dmats0[4][28] + coeff0_5*dmats0[5][28] + coeff0_6*dmats0[6][28] + coeff0_7*dmats0[7][28] + coeff0_8*dmats0[8][28] + coeff0_9*dmats0[9][28] + coeff0_10*dmats0[10][28] + coeff0_11*dmats0[11][28] + coeff0_12*dmats0[12][28] + coeff0_13*dmats0[13][28] + coeff0_14*dmats0[14][28] + coeff0_15*dmats0[15][28] + coeff0_16*dmats0[16][28] + coeff0_17*dmats0[17][28] + coeff0_18*dmats0[18][28] + coeff0_19*dmats0[19][28] + coeff0_20*dmats0[20][28] + coeff0_21*dmats0[21][28] + coeff0_22*dmats0[22][28] + coeff0_23*dmats0[23][28] + coeff0_24*dmats0[24][28] + coeff0_25*dmats0[25][28] + coeff0_26*dmats0[26][28] + coeff0_27*dmats0[27][28] + coeff0_28*dmats0[28][28] + coeff0_29*dmats0[29][28] + coeff0_30*dmats0[30][28] + coeff0_31*dmats0[31][28] + coeff0_32*dmats0[32][28] + coeff0_33*dmats0[33][28] + coeff0_34*dmats0[34][28];
          new_coeff0_29 = coeff0_0*dmats0[0][29] + coeff0_1*dmats0[1][29] + coeff0_2*dmats0[2][29] + coeff0_3*dmats0[3][29] + coeff0_4*dmats0[4][29] + coeff0_5*dmats0[5][29] + coeff0_6*dmats0[6][29] + coeff0_7*dmats0[7][29] + coeff0_8*dmats0[8][29] + coeff0_9*dmats0[9][29] + coeff0_10*dmats0[10][29] + coeff0_11*dmats0[11][29] + coeff0_12*dmats0[12][29] + coeff0_13*dmats0[13][29] + coeff0_14*dmats0[14][29] + coeff0_15*dmats0[15][29] + coeff0_16*dmats0[16][29] + coeff0_17*dmats0[17][29] + coeff0_18*dmats0[18][29] + coeff0_19*dmats0[19][29] + coeff0_20*dmats0[20][29] + coeff0_21*dmats0[21][29] + coeff0_22*dmats0[22][29] + coeff0_23*dmats0[23][29] + coeff0_24*dmats0[24][29] + coeff0_25*dmats0[25][29] + coeff0_26*dmats0[26][29] + coeff0_27*dmats0[27][29] + coeff0_28*dmats0[28][29] + coeff0_29*dmats0[29][29] + coeff0_30*dmats0[30][29] + coeff0_31*dmats0[31][29] + coeff0_32*dmats0[32][29] + coeff0_33*dmats0[33][29] + coeff0_34*dmats0[34][29];
          new_coeff0_30 = coeff0_0*dmats0[0][30] + coeff0_1*dmats0[1][30] + coeff0_2*dmats0[2][30] + coeff0_3*dmats0[3][30] + coeff0_4*dmats0[4][30] + coeff0_5*dmats0[5][30] + coeff0_6*dmats0[6][30] + coeff0_7*dmats0[7][30] + coeff0_8*dmats0[8][30] + coeff0_9*dmats0[9][30] + coeff0_10*dmats0[10][30] + coeff0_11*dmats0[11][30] + coeff0_12*dmats0[12][30] + coeff0_13*dmats0[13][30] + coeff0_14*dmats0[14][30] + coeff0_15*dmats0[15][30] + coeff0_16*dmats0[16][30] + coeff0_17*dmats0[17][30] + coeff0_18*dmats0[18][30] + coeff0_19*dmats0[19][30] + coeff0_20*dmats0[20][30] + coeff0_21*dmats0[21][30] + coeff0_22*dmats0[22][30] + coeff0_23*dmats0[23][30] + coeff0_24*dmats0[24][30] + coeff0_25*dmats0[25][30] + coeff0_26*dmats0[26][30] + coeff0_27*dmats0[27][30] + coeff0_28*dmats0[28][30] + coeff0_29*dmats0[29][30] + coeff0_30*dmats0[30][30] + coeff0_31*dmats0[31][30] + coeff0_32*dmats0[32][30] + coeff0_33*dmats0[33][30] + coeff0_34*dmats0[34][30];
          new_coeff0_31 = coeff0_0*dmats0[0][31] + coeff0_1*dmats0[1][31] + coeff0_2*dmats0[2][31] + coeff0_3*dmats0[3][31] + coeff0_4*dmats0[4][31] + coeff0_5*dmats0[5][31] + coeff0_6*dmats0[6][31] + coeff0_7*dmats0[7][31] + coeff0_8*dmats0[8][31] + coeff0_9*dmats0[9][31] + coeff0_10*dmats0[10][31] + coeff0_11*dmats0[11][31] + coeff0_12*dmats0[12][31] + coeff0_13*dmats0[13][31] + coeff0_14*dmats0[14][31] + coeff0_15*dmats0[15][31] + coeff0_16*dmats0[16][31] + coeff0_17*dmats0[17][31] + coeff0_18*dmats0[18][31] + coeff0_19*dmats0[19][31] + coeff0_20*dmats0[20][31] + coeff0_21*dmats0[21][31] + coeff0_22*dmats0[22][31] + coeff0_23*dmats0[23][31] + coeff0_24*dmats0[24][31] + coeff0_25*dmats0[25][31] + coeff0_26*dmats0[26][31] + coeff0_27*dmats0[27][31] + coeff0_28*dmats0[28][31] + coeff0_29*dmats0[29][31] + coeff0_30*dmats0[30][31] + coeff0_31*dmats0[31][31] + coeff0_32*dmats0[32][31] + coeff0_33*dmats0[33][31] + coeff0_34*dmats0[34][31];
          new_coeff0_32 = coeff0_0*dmats0[0][32] + coeff0_1*dmats0[1][32] + coeff0_2*dmats0[2][32] + coeff0_3*dmats0[3][32] + coeff0_4*dmats0[4][32] + coeff0_5*dmats0[5][32] + coeff0_6*dmats0[6][32] + coeff0_7*dmats0[7][32] + coeff0_8*dmats0[8][32] + coeff0_9*dmats0[9][32] + coeff0_10*dmats0[10][32] + coeff0_11*dmats0[11][32] + coeff0_12*dmats0[12][32] + coeff0_13*dmats0[13][32] + coeff0_14*dmats0[14][32] + coeff0_15*dmats0[15][32] + coeff0_16*dmats0[16][32] + coeff0_17*dmats0[17][32] + coeff0_18*dmats0[18][32] + coeff0_19*dmats0[19][32] + coeff0_20*dmats0[20][32] + coeff0_21*dmats0[21][32] + coeff0_22*dmats0[22][32] + coeff0_23*dmats0[23][32] + coeff0_24*dmats0[24][32] + coeff0_25*dmats0[25][32] + coeff0_26*dmats0[26][32] + coeff0_27*dmats0[27][32] + coeff0_28*dmats0[28][32] + coeff0_29*dmats0[29][32] + coeff0_30*dmats0[30][32] + coeff0_31*dmats0[31][32] + coeff0_32*dmats0[32][32] + coeff0_33*dmats0[33][32] + coeff0_34*dmats0[34][32];
          new_coeff0_33 = coeff0_0*dmats0[0][33] + coeff0_1*dmats0[1][33] + coeff0_2*dmats0[2][33] + coeff0_3*dmats0[3][33] + coeff0_4*dmats0[4][33] + coeff0_5*dmats0[5][33] + coeff0_6*dmats0[6][33] + coeff0_7*dmats0[7][33] + coeff0_8*dmats0[8][33] + coeff0_9*dmats0[9][33] + coeff0_10*dmats0[10][33] + coeff0_11*dmats0[11][33] + coeff0_12*dmats0[12][33] + coeff0_13*dmats0[13][33] + coeff0_14*dmats0[14][33] + coeff0_15*dmats0[15][33] + coeff0_16*dmats0[16][33] + coeff0_17*dmats0[17][33] + coeff0_18*dmats0[18][33] + coeff0_19*dmats0[19][33] + coeff0_20*dmats0[20][33] + coeff0_21*dmats0[21][33] + coeff0_22*dmats0[22][33] + coeff0_23*dmats0[23][33] + coeff0_24*dmats0[24][33] + coeff0_25*dmats0[25][33] + coeff0_26*dmats0[26][33] + coeff0_27*dmats0[27][33] + coeff0_28*dmats0[28][33] + coeff0_29*dmats0[29][33] + coeff0_30*dmats0[30][33] + coeff0_31*dmats0[31][33] + coeff0_32*dmats0[32][33] + coeff0_33*dmats0[33][33] + coeff0_34*dmats0[34][33];
          new_coeff0_34 = coeff0_0*dmats0[0][34] + coeff0_1*dmats0[1][34] + coeff0_2*dmats0[2][34] + coeff0_3*dmats0[3][34] + coeff0_4*dmats0[4][34] + coeff0_5*dmats0[5][34] + coeff0_6*dmats0[6][34] + coeff0_7*dmats0[7][34] + coeff0_8*dmats0[8][34] + coeff0_9*dmats0[9][34] + coeff0_10*dmats0[10][34] + coeff0_11*dmats0[11][34] + coeff0_12*dmats0[12][34] + coeff0_13*dmats0[13][34] + coeff0_14*dmats0[14][34] + coeff0_15*dmats0[15][34] + coeff0_16*dmats0[16][34] + coeff0_17*dmats0[17][34] + coeff0_18*dmats0[18][34] + coeff0_19*dmats0[19][34] + coeff0_20*dmats0[20][34] + coeff0_21*dmats0[21][34] + coeff0_22*dmats0[22][34] + coeff0_23*dmats0[23][34] + coeff0_24*dmats0[24][34] + coeff0_25*dmats0[25][34] + coeff0_26*dmats0[26][34] + coeff0_27*dmats0[27][34] + coeff0_28*dmats0[28][34] + coeff0_29*dmats0[29][34] + coeff0_30*dmats0[30][34] + coeff0_31*dmats0[31][34] + coeff0_32*dmats0[32][34] + coeff0_33*dmats0[33][34] + coeff0_34*dmats0[34][34];
        }
        if(combinations[deriv_num][j] == 1)
        {
          new_coeff0_0 = coeff0_0*dmats1[0][0] + coeff0_1*dmats1[1][0] + coeff0_2*dmats1[2][0] + coeff0_3*dmats1[3][0] + coeff0_4*dmats1[4][0] + coeff0_5*dmats1[5][0] + coeff0_6*dmats1[6][0] + coeff0_7*dmats1[7][0] + coeff0_8*dmats1[8][0] + coeff0_9*dmats1[9][0] + coeff0_10*dmats1[10][0] + coeff0_11*dmats1[11][0] + coeff0_12*dmats1[12][0] + coeff0_13*dmats1[13][0] + coeff0_14*dmats1[14][0] + coeff0_15*dmats1[15][0] + coeff0_16*dmats1[16][0] + coeff0_17*dmats1[17][0] + coeff0_18*dmats1[18][0] + coeff0_19*dmats1[19][0] + coeff0_20*dmats1[20][0] + coeff0_21*dmats1[21][0] + coeff0_22*dmats1[22][0] + coeff0_23*dmats1[23][0] + coeff0_24*dmats1[24][0] + coeff0_25*dmats1[25][0] + coeff0_26*dmats1[26][0] + coeff0_27*dmats1[27][0] + coeff0_28*dmats1[28][0] + coeff0_29*dmats1[29][0] + coeff0_30*dmats1[30][0] + coeff0_31*dmats1[31][0] + coeff0_32*dmats1[32][0] + coeff0_33*dmats1[33][0] + coeff0_34*dmats1[34][0];
          new_coeff0_1 = coeff0_0*dmats1[0][1] + coeff0_1*dmats1[1][1] + coeff0_2*dmats1[2][1] + coeff0_3*dmats1[3][1] + coeff0_4*dmats1[4][1] + coeff0_5*dmats1[5][1] + coeff0_6*dmats1[6][1] + coeff0_7*dmats1[7][1] + coeff0_8*dmats1[8][1] + coeff0_9*dmats1[9][1] + coeff0_10*dmats1[10][1] + coeff0_11*dmats1[11][1] + coeff0_12*dmats1[12][1] + coeff0_13*dmats1[13][1] + coeff0_14*dmats1[14][1] + coeff0_15*dmats1[15][1] + coeff0_16*dmats1[16][1] + coeff0_17*dmats1[17][1] + coeff0_18*dmats1[18][1] + coeff0_19*dmats1[19][1] + coeff0_20*dmats1[20][1] + coeff0_21*dmats1[21][1] + coeff0_22*dmats1[22][1] + coeff0_23*dmats1[23][1] + coeff0_24*dmats1[24][1] + coeff0_25*dmats1[25][1] + coeff0_26*dmats1[26][1] + coeff0_27*dmats1[27][1] + coeff0_28*dmats1[28][1] + coeff0_29*dmats1[29][1] + coeff0_30*dmats1[30][1] + coeff0_31*dmats1[31][1] + coeff0_32*dmats1[32][1] + coeff0_33*dmats1[33][1] + coeff0_34*dmats1[34][1];
          new_coeff0_2 = coeff0_0*dmats1[0][2] + coeff0_1*dmats1[1][2] + coeff0_2*dmats1[2][2] + coeff0_3*dmats1[3][2] + coeff0_4*dmats1[4][2] + coeff0_5*dmats1[5][2] + coeff0_6*dmats1[6][2] + coeff0_7*dmats1[7][2] + coeff0_8*dmats1[8][2] + coeff0_9*dmats1[9][2] + coeff0_10*dmats1[10][2] + coeff0_11*dmats1[11][2] + coeff0_12*dmats1[12][2] + coeff0_13*dmats1[13][2] + coeff0_14*dmats1[14][2] + coeff0_15*dmats1[15][2] + coeff0_16*dmats1[16][2] + coeff0_17*dmats1[17][2] + coeff0_18*dmats1[18][2] + coeff0_19*dmats1[19][2] + coeff0_20*dmats1[20][2] + coeff0_21*dmats1[21][2] + coeff0_22*dmats1[22][2] + coeff0_23*dmats1[23][2] + coeff0_24*dmats1[24][2] + coeff0_25*dmats1[25][2] + coeff0_26*dmats1[26][2] + coeff0_27*dmats1[27][2] + coeff0_28*dmats1[28][2] + coeff0_29*dmats1[29][2] + coeff0_30*dmats1[30][2] + coeff0_31*dmats1[31][2] + coeff0_32*dmats1[32][2] + coeff0_33*dmats1[33][2] + coeff0_34*dmats1[34][2];
          new_coeff0_3 = coeff0_0*dmats1[0][3] + coeff0_1*dmats1[1][3] + coeff0_2*dmats1[2][3] + coeff0_3*dmats1[3][3] + coeff0_4*dmats1[4][3] + coeff0_5*dmats1[5][3] + coeff0_6*dmats1[6][3] + coeff0_7*dmats1[7][3] + coeff0_8*dmats1[8][3] + coeff0_9*dmats1[9][3] + coeff0_10*dmats1[10][3] + coeff0_11*dmats1[11][3] + coeff0_12*dmats1[12][3] + coeff0_13*dmats1[13][3] + coeff0_14*dmats1[14][3] + coeff0_15*dmats1[15][3] + coeff0_16*dmats1[16][3] + coeff0_17*dmats1[17][3] + coeff0_18*dmats1[18][3] + coeff0_19*dmats1[19][3] + coeff0_20*dmats1[20][3] + coeff0_21*dmats1[21][3] + coeff0_22*dmats1[22][3] + coeff0_23*dmats1[23][3] + coeff0_24*dmats1[24][3] + coeff0_25*dmats1[25][3] + coeff0_26*dmats1[26][3] + coeff0_27*dmats1[27][3] + coeff0_28*dmats1[28][3] + coeff0_29*dmats1[29][3] + coeff0_30*dmats1[30][3] + coeff0_31*dmats1[31][3] + coeff0_32*dmats1[32][3] + coeff0_33*dmats1[33][3] + coeff0_34*dmats1[34][3];
          new_coeff0_4 = coeff0_0*dmats1[0][4] + coeff0_1*dmats1[1][4] + coeff0_2*dmats1[2][4] + coeff0_3*dmats1[3][4] + coeff0_4*dmats1[4][4] + coeff0_5*dmats1[5][4] + coeff0_6*dmats1[6][4] + coeff0_7*dmats1[7][4] + coeff0_8*dmats1[8][4] + coeff0_9*dmats1[9][4] + coeff0_10*dmats1[10][4] + coeff0_11*dmats1[11][4] + coeff0_12*dmats1[12][4] + coeff0_13*dmats1[13][4] + coeff0_14*dmats1[14][4] + coeff0_15*dmats1[15][4] + coeff0_16*dmats1[16][4] + coeff0_17*dmats1[17][4] + coeff0_18*dmats1[18][4] + coeff0_19*dmats1[19][4] + coeff0_20*dmats1[20][4] + coeff0_21*dmats1[21][4] + coeff0_22*dmats1[22][4] + coeff0_23*dmats1[23][4] + coeff0_24*dmats1[24][4] + coeff0_25*dmats1[25][4] + coeff0_26*dmats1[26][4] + coeff0_27*dmats1[27][4] + coeff0_28*dmats1[28][4] + coeff0_29*dmats1[29][4] + coeff0_30*dmats1[30][4] + coeff0_31*dmats1[31][4] + coeff0_32*dmats1[32][4] + coeff0_33*dmats1[33][4] + coeff0_34*dmats1[34][4];
          new_coeff0_5 = coeff0_0*dmats1[0][5] + coeff0_1*dmats1[1][5] + coeff0_2*dmats1[2][5] + coeff0_3*dmats1[3][5] + coeff0_4*dmats1[4][5] + coeff0_5*dmats1[5][5] + coeff0_6*dmats1[6][5] + coeff0_7*dmats1[7][5] + coeff0_8*dmats1[8][5] + coeff0_9*dmats1[9][5] + coeff0_10*dmats1[10][5] + coeff0_11*dmats1[11][5] + coeff0_12*dmats1[12][5] + coeff0_13*dmats1[13][5] + coeff0_14*dmats1[14][5] + coeff0_15*dmats1[15][5] + coeff0_16*dmats1[16][5] + coeff0_17*dmats1[17][5] + coeff0_18*dmats1[18][5] + coeff0_19*dmats1[19][5] + coeff0_20*dmats1[20][5] + coeff0_21*dmats1[21][5] + coeff0_22*dmats1[22][5] + coeff0_23*dmats1[23][5] + coeff0_24*dmats1[24][5] + coeff0_25*dmats1[25][5] + coeff0_26*dmats1[26][5] + coeff0_27*dmats1[27][5] + coeff0_28*dmats1[28][5] + coeff0_29*dmats1[29][5] + coeff0_30*dmats1[30][5] + coeff0_31*dmats1[31][5] + coeff0_32*dmats1[32][5] + coeff0_33*dmats1[33][5] + coeff0_34*dmats1[34][5];
          new_coeff0_6 = coeff0_0*dmats1[0][6] + coeff0_1*dmats1[1][6] + coeff0_2*dmats1[2][6] + coeff0_3*dmats1[3][6] + coeff0_4*dmats1[4][6] + coeff0_5*dmats1[5][6] + coeff0_6*dmats1[6][6] + coeff0_7*dmats1[7][6] + coeff0_8*dmats1[8][6] + coeff0_9*dmats1[9][6] + coeff0_10*dmats1[10][6] + coeff0_11*dmats1[11][6] + coeff0_12*dmats1[12][6] + coeff0_13*dmats1[13][6] + coeff0_14*dmats1[14][6] + coeff0_15*dmats1[15][6] + coeff0_16*dmats1[16][6] + coeff0_17*dmats1[17][6] + coeff0_18*dmats1[18][6] + coeff0_19*dmats1[19][6] + coeff0_20*dmats1[20][6] + coeff0_21*dmats1[21][6] + coeff0_22*dmats1[22][6] + coeff0_23*dmats1[23][6] + coeff0_24*dmats1[24][6] + coeff0_25*dmats1[25][6] + coeff0_26*dmats1[26][6] + coeff0_27*dmats1[27][6] + coeff0_28*dmats1[28][6] + coeff0_29*dmats1[29][6] + coeff0_30*dmats1[30][6] + coeff0_31*dmats1[31][6] + coeff0_32*dmats1[32][6] + coeff0_33*dmats1[33][6] + coeff0_34*dmats1[34][6];
          new_coeff0_7 = coeff0_0*dmats1[0][7] + coeff0_1*dmats1[1][7] + coeff0_2*dmats1[2][7] + coeff0_3*dmats1[3][7] + coeff0_4*dmats1[4][7] + coeff0_5*dmats1[5][7] + coeff0_6*dmats1[6][7] + coeff0_7*dmats1[7][7] + coeff0_8*dmats1[8][7] + coeff0_9*dmats1[9][7] + coeff0_10*dmats1[10][7] + coeff0_11*dmats1[11][7] + coeff0_12*dmats1[12][7] + coeff0_13*dmats1[13][7] + coeff0_14*dmats1[14][7] + coeff0_15*dmats1[15][7] + coeff0_16*dmats1[16][7] + coeff0_17*dmats1[17][7] + coeff0_18*dmats1[18][7] + coeff0_19*dmats1[19][7] + coeff0_20*dmats1[20][7] + coeff0_21*dmats1[21][7] + coeff0_22*dmats1[22][7] + coeff0_23*dmats1[23][7] + coeff0_24*dmats1[24][7] + coeff0_25*dmats1[25][7] + coeff0_26*dmats1[26][7] + coeff0_27*dmats1[27][7] + coeff0_28*dmats1[28][7] + coeff0_29*dmats1[29][7] + coeff0_30*dmats1[30][7] + coeff0_31*dmats1[31][7] + coeff0_32*dmats1[32][7] + coeff0_33*dmats1[33][7] + coeff0_34*dmats1[34][7];
          new_coeff0_8 = coeff0_0*dmats1[0][8] + coeff0_1*dmats1[1][8] + coeff0_2*dmats1[2][8] + coeff0_3*dmats1[3][8] + coeff0_4*dmats1[4][8] + coeff0_5*dmats1[5][8] + coeff0_6*dmats1[6][8] + coeff0_7*dmats1[7][8] + coeff0_8*dmats1[8][8] + coeff0_9*dmats1[9][8] + coeff0_10*dmats1[10][8] + coeff0_11*dmats1[11][8] + coeff0_12*dmats1[12][8] + coeff0_13*dmats1[13][8] + coeff0_14*dmats1[14][8] + coeff0_15*dmats1[15][8] + coeff0_16*dmats1[16][8] + coeff0_17*dmats1[17][8] + coeff0_18*dmats1[18][8] + coeff0_19*dmats1[19][8] + coeff0_20*dmats1[20][8] + coeff0_21*dmats1[21][8] + coeff0_22*dmats1[22][8] + coeff0_23*dmats1[23][8] + coeff0_24*dmats1[24][8] + coeff0_25*dmats1[25][8] + coeff0_26*dmats1[26][8] + coeff0_27*dmats1[27][8] + coeff0_28*dmats1[28][8] + coeff0_29*dmats1[29][8] + coeff0_30*dmats1[30][8] + coeff0_31*dmats1[31][8] + coeff0_32*dmats1[32][8] + coeff0_33*dmats1[33][8] + coeff0_34*dmats1[34][8];
          new_coeff0_9 = coeff0_0*dmats1[0][9] + coeff0_1*dmats1[1][9] + coeff0_2*dmats1[2][9] + coeff0_3*dmats1[3][9] + coeff0_4*dmats1[4][9] + coeff0_5*dmats1[5][9] + coeff0_6*dmats1[6][9] + coeff0_7*dmats1[7][9] + coeff0_8*dmats1[8][9] + coeff0_9*dmats1[9][9] + coeff0_10*dmats1[10][9] + coeff0_11*dmats1[11][9] + coeff0_12*dmats1[12][9] + coeff0_13*dmats1[13][9] + coeff0_14*dmats1[14][9] + coeff0_15*dmats1[15][9] + coeff0_16*dmats1[16][9] + coeff0_17*dmats1[17][9] + coeff0_18*dmats1[18][9] + coeff0_19*dmats1[19][9] + coeff0_20*dmats1[20][9] + coeff0_21*dmats1[21][9] + coeff0_22*dmats1[22][9] + coeff0_23*dmats1[23][9] + coeff0_24*dmats1[24][9] + coeff0_25*dmats1[25][9] + coeff0_26*dmats1[26][9] + coeff0_27*dmats1[27][9] + coeff0_28*dmats1[28][9] + coeff0_29*dmats1[29][9] + coeff0_30*dmats1[30][9] + coeff0_31*dmats1[31][9] + coeff0_32*dmats1[32][9] + coeff0_33*dmats1[33][9] + coeff0_34*dmats1[34][9];
          new_coeff0_10 = coeff0_0*dmats1[0][10] + coeff0_1*dmats1[1][10] + coeff0_2*dmats1[2][10] + coeff0_3*dmats1[3][10] + coeff0_4*dmats1[4][10] + coeff0_5*dmats1[5][10] + coeff0_6*dmats1[6][10] + coeff0_7*dmats1[7][10] + coeff0_8*dmats1[8][10] + coeff0_9*dmats1[9][10] + coeff0_10*dmats1[10][10] + coeff0_11*dmats1[11][10] + coeff0_12*dmats1[12][10] + coeff0_13*dmats1[13][10] + coeff0_14*dmats1[14][10] + coeff0_15*dmats1[15][10] + coeff0_16*dmats1[16][10] + coeff0_17*dmats1[17][10] + coeff0_18*dmats1[18][10] + coeff0_19*dmats1[19][10] + coeff0_20*dmats1[20][10] + coeff0_21*dmats1[21][10] + coeff0_22*dmats1[22][10] + coeff0_23*dmats1[23][10] + coeff0_24*dmats1[24][10] + coeff0_25*dmats1[25][10] + coeff0_26*dmats1[26][10] + coeff0_27*dmats1[27][10] + coeff0_28*dmats1[28][10] + coeff0_29*dmats1[29][10] + coeff0_30*dmats1[30][10] + coeff0_31*dmats1[31][10] + coeff0_32*dmats1[32][10] + coeff0_33*dmats1[33][10] + coeff0_34*dmats1[34][10];
          new_coeff0_11 = coeff0_0*dmats1[0][11] + coeff0_1*dmats1[1][11] + coeff0_2*dmats1[2][11] + coeff0_3*dmats1[3][11] + coeff0_4*dmats1[4][11] + coeff0_5*dmats1[5][11] + coeff0_6*dmats1[6][11] + coeff0_7*dmats1[7][11] + coeff0_8*dmats1[8][11] + coeff0_9*dmats1[9][11] + coeff0_10*dmats1[10][11] + coeff0_11*dmats1[11][11] + coeff0_12*dmats1[12][11] + coeff0_13*dmats1[13][11] + coeff0_14*dmats1[14][11] + coeff0_15*dmats1[15][11] + coeff0_16*dmats1[16][11] + coeff0_17*dmats1[17][11] + coeff0_18*dmats1[18][11] + coeff0_19*dmats1[19][11] + coeff0_20*dmats1[20][11] + coeff0_21*dmats1[21][11] + coeff0_22*dmats1[22][11] + coeff0_23*dmats1[23][11] + coeff0_24*dmats1[24][11] + coeff0_25*dmats1[25][11] + coeff0_26*dmats1[26][11] + coeff0_27*dmats1[27][11] + coeff0_28*dmats1[28][11] + coeff0_29*dmats1[29][11] + coeff0_30*dmats1[30][11] + coeff0_31*dmats1[31][11] + coeff0_32*dmats1[32][11] + coeff0_33*dmats1[33][11] + coeff0_34*dmats1[34][11];
          new_coeff0_12 = coeff0_0*dmats1[0][12] + coeff0_1*dmats1[1][12] + coeff0_2*dmats1[2][12] + coeff0_3*dmats1[3][12] + coeff0_4*dmats1[4][12] + coeff0_5*dmats1[5][12] + coeff0_6*dmats1[6][12] + coeff0_7*dmats1[7][12] + coeff0_8*dmats1[8][12] + coeff0_9*dmats1[9][12] + coeff0_10*dmats1[10][12] + coeff0_11*dmats1[11][12] + coeff0_12*dmats1[12][12] + coeff0_13*dmats1[13][12] + coeff0_14*dmats1[14][12] + coeff0_15*dmats1[15][12] + coeff0_16*dmats1[16][12] + coeff0_17*dmats1[17][12] + coeff0_18*dmats1[18][12] + coeff0_19*dmats1[19][12] + coeff0_20*dmats1[20][12] + coeff0_21*dmats1[21][12] + coeff0_22*dmats1[22][12] + coeff0_23*dmats1[23][12] + coeff0_24*dmats1[24][12] + coeff0_25*dmats1[25][12] + coeff0_26*dmats1[26][12] + coeff0_27*dmats1[27][12] + coeff0_28*dmats1[28][12] + coeff0_29*dmats1[29][12] + coeff0_30*dmats1[30][12] + coeff0_31*dmats1[31][12] + coeff0_32*dmats1[32][12] + coeff0_33*dmats1[33][12] + coeff0_34*dmats1[34][12];
          new_coeff0_13 = coeff0_0*dmats1[0][13] + coeff0_1*dmats1[1][13] + coeff0_2*dmats1[2][13] + coeff0_3*dmats1[3][13] + coeff0_4*dmats1[4][13] + coeff0_5*dmats1[5][13] + coeff0_6*dmats1[6][13] + coeff0_7*dmats1[7][13] + coeff0_8*dmats1[8][13] + coeff0_9*dmats1[9][13] + coeff0_10*dmats1[10][13] + coeff0_11*dmats1[11][13] + coeff0_12*dmats1[12][13] + coeff0_13*dmats1[13][13] + coeff0_14*dmats1[14][13] + coeff0_15*dmats1[15][13] + coeff0_16*dmats1[16][13] + coeff0_17*dmats1[17][13] + coeff0_18*dmats1[18][13] + coeff0_19*dmats1[19][13] + coeff0_20*dmats1[20][13] + coeff0_21*dmats1[21][13] + coeff0_22*dmats1[22][13] + coeff0_23*dmats1[23][13] + coeff0_24*dmats1[24][13] + coeff0_25*dmats1[25][13] + coeff0_26*dmats1[26][13] + coeff0_27*dmats1[27][13] + coeff0_28*dmats1[28][13] + coeff0_29*dmats1[29][13] + coeff0_30*dmats1[30][13] + coeff0_31*dmats1[31][13] + coeff0_32*dmats1[32][13] + coeff0_33*dmats1[33][13] + coeff0_34*dmats1[34][13];
          new_coeff0_14 = coeff0_0*dmats1[0][14] + coeff0_1*dmats1[1][14] + coeff0_2*dmats1[2][14] + coeff0_3*dmats1[3][14] + coeff0_4*dmats1[4][14] + coeff0_5*dmats1[5][14] + coeff0_6*dmats1[6][14] + coeff0_7*dmats1[7][14] + coeff0_8*dmats1[8][14] + coeff0_9*dmats1[9][14] + coeff0_10*dmats1[10][14] + coeff0_11*dmats1[11][14] + coeff0_12*dmats1[12][14] + coeff0_13*dmats1[13][14] + coeff0_14*dmats1[14][14] + coeff0_15*dmats1[15][14] + coeff0_16*dmats1[16][14] + coeff0_17*dmats1[17][14] + coeff0_18*dmats1[18][14] + coeff0_19*dmats1[19][14] + coeff0_20*dmats1[20][14] + coeff0_21*dmats1[21][14] + coeff0_22*dmats1[22][14] + coeff0_23*dmats1[23][14] + coeff0_24*dmats1[24][14] + coeff0_25*dmats1[25][14] + coeff0_26*dmats1[26][14] + coeff0_27*dmats1[27][14] + coeff0_28*dmats1[28][14] + coeff0_29*dmats1[29][14] + coeff0_30*dmats1[30][14] + coeff0_31*dmats1[31][14] + coeff0_32*dmats1[32][14] + coeff0_33*dmats1[33][14] + coeff0_34*dmats1[34][14];
          new_coeff0_15 = coeff0_0*dmats1[0][15] + coeff0_1*dmats1[1][15] + coeff0_2*dmats1[2][15] + coeff0_3*dmats1[3][15] + coeff0_4*dmats1[4][15] + coeff0_5*dmats1[5][15] + coeff0_6*dmats1[6][15] + coeff0_7*dmats1[7][15] + coeff0_8*dmats1[8][15] + coeff0_9*dmats1[9][15] + coeff0_10*dmats1[10][15] + coeff0_11*dmats1[11][15] + coeff0_12*dmats1[12][15] + coeff0_13*dmats1[13][15] + coeff0_14*dmats1[14][15] + coeff0_15*dmats1[15][15] + coeff0_16*dmats1[16][15] + coeff0_17*dmats1[17][15] + coeff0_18*dmats1[18][15] + coeff0_19*dmats1[19][15] + coeff0_20*dmats1[20][15] + coeff0_21*dmats1[21][15] + coeff0_22*dmats1[22][15] + coeff0_23*dmats1[23][15] + coeff0_24*dmats1[24][15] + coeff0_25*dmats1[25][15] + coeff0_26*dmats1[26][15] + coeff0_27*dmats1[27][15] + coeff0_28*dmats1[28][15] + coeff0_29*dmats1[29][15] + coeff0_30*dmats1[30][15] + coeff0_31*dmats1[31][15] + coeff0_32*dmats1[32][15] + coeff0_33*dmats1[33][15] + coeff0_34*dmats1[34][15];
          new_coeff0_16 = coeff0_0*dmats1[0][16] + coeff0_1*dmats1[1][16] + coeff0_2*dmats1[2][16] + coeff0_3*dmats1[3][16] + coeff0_4*dmats1[4][16] + coeff0_5*dmats1[5][16] + coeff0_6*dmats1[6][16] + coeff0_7*dmats1[7][16] + coeff0_8*dmats1[8][16] + coeff0_9*dmats1[9][16] + coeff0_10*dmats1[10][16] + coeff0_11*dmats1[11][16] + coeff0_12*dmats1[12][16] + coeff0_13*dmats1[13][16] + coeff0_14*dmats1[14][16] + coeff0_15*dmats1[15][16] + coeff0_16*dmats1[16][16] + coeff0_17*dmats1[17][16] + coeff0_18*dmats1[18][16] + coeff0_19*dmats1[19][16] + coeff0_20*dmats1[20][16] + coeff0_21*dmats1[21][16] + coeff0_22*dmats1[22][16] + coeff0_23*dmats1[23][16] + coeff0_24*dmats1[24][16] + coeff0_25*dmats1[25][16] + coeff0_26*dmats1[26][16] + coeff0_27*dmats1[27][16] + coeff0_28*dmats1[28][16] + coeff0_29*dmats1[29][16] + coeff0_30*dmats1[30][16] + coeff0_31*dmats1[31][16] + coeff0_32*dmats1[32][16] + coeff0_33*dmats1[33][16] + coeff0_34*dmats1[34][16];
          new_coeff0_17 = coeff0_0*dmats1[0][17] + coeff0_1*dmats1[1][17] + coeff0_2*dmats1[2][17] + coeff0_3*dmats1[3][17] + coeff0_4*dmats1[4][17] + coeff0_5*dmats1[5][17] + coeff0_6*dmats1[6][17] + coeff0_7*dmats1[7][17] + coeff0_8*dmats1[8][17] + coeff0_9*dmats1[9][17] + coeff0_10*dmats1[10][17] + coeff0_11*dmats1[11][17] + coeff0_12*dmats1[12][17] + coeff0_13*dmats1[13][17] + coeff0_14*dmats1[14][17] + coeff0_15*dmats1[15][17] + coeff0_16*dmats1[16][17] + coeff0_17*dmats1[17][17] + coeff0_18*dmats1[18][17] + coeff0_19*dmats1[19][17] + coeff0_20*dmats1[20][17] + coeff0_21*dmats1[21][17] + coeff0_22*dmats1[22][17] + coeff0_23*dmats1[23][17] + coeff0_24*dmats1[24][17] + coeff0_25*dmats1[25][17] + coeff0_26*dmats1[26][17] + coeff0_27*dmats1[27][17] + coeff0_28*dmats1[28][17] + coeff0_29*dmats1[29][17] + coeff0_30*dmats1[30][17] + coeff0_31*dmats1[31][17] + coeff0_32*dmats1[32][17] + coeff0_33*dmats1[33][17] + coeff0_34*dmats1[34][17];
          new_coeff0_18 = coeff0_0*dmats1[0][18] + coeff0_1*dmats1[1][18] + coeff0_2*dmats1[2][18] + coeff0_3*dmats1[3][18] + coeff0_4*dmats1[4][18] + coeff0_5*dmats1[5][18] + coeff0_6*dmats1[6][18] + coeff0_7*dmats1[7][18] + coeff0_8*dmats1[8][18] + coeff0_9*dmats1[9][18] + coeff0_10*dmats1[10][18] + coeff0_11*dmats1[11][18] + coeff0_12*dmats1[12][18] + coeff0_13*dmats1[13][18] + coeff0_14*dmats1[14][18] + coeff0_15*dmats1[15][18] + coeff0_16*dmats1[16][18] + coeff0_17*dmats1[17][18] + coeff0_18*dmats1[18][18] + coeff0_19*dmats1[19][18] + coeff0_20*dmats1[20][18] + coeff0_21*dmats1[21][18] + coeff0_22*dmats1[22][18] + coeff0_23*dmats1[23][18] + coeff0_24*dmats1[24][18] + coeff0_25*dmats1[25][18] + coeff0_26*dmats1[26][18] + coeff0_27*dmats1[27][18] + coeff0_28*dmats1[28][18] + coeff0_29*dmats1[29][18] + coeff0_30*dmats1[30][18] + coeff0_31*dmats1[31][18] + coeff0_32*dmats1[32][18] + coeff0_33*dmats1[33][18] + coeff0_34*dmats1[34][18];
          new_coeff0_19 = coeff0_0*dmats1[0][19] + coeff0_1*dmats1[1][19] + coeff0_2*dmats1[2][19] + coeff0_3*dmats1[3][19] + coeff0_4*dmats1[4][19] + coeff0_5*dmats1[5][19] + coeff0_6*dmats1[6][19] + coeff0_7*dmats1[7][19] + coeff0_8*dmats1[8][19] + coeff0_9*dmats1[9][19] + coeff0_10*dmats1[10][19] + coeff0_11*dmats1[11][19] + coeff0_12*dmats1[12][19] + coeff0_13*dmats1[13][19] + coeff0_14*dmats1[14][19] + coeff0_15*dmats1[15][19] + coeff0_16*dmats1[16][19] + coeff0_17*dmats1[17][19] + coeff0_18*dmats1[18][19] + coeff0_19*dmats1[19][19] + coeff0_20*dmats1[20][19] + coeff0_21*dmats1[21][19] + coeff0_22*dmats1[22][19] + coeff0_23*dmats1[23][19] + coeff0_24*dmats1[24][19] + coeff0_25*dmats1[25][19] + coeff0_26*dmats1[26][19] + coeff0_27*dmats1[27][19] + coeff0_28*dmats1[28][19] + coeff0_29*dmats1[29][19] + coeff0_30*dmats1[30][19] + coeff0_31*dmats1[31][19] + coeff0_32*dmats1[32][19] + coeff0_33*dmats1[33][19] + coeff0_34*dmats1[34][19];
          new_coeff0_20 = coeff0_0*dmats1[0][20] + coeff0_1*dmats1[1][20] + coeff0_2*dmats1[2][20] + coeff0_3*dmats1[3][20] + coeff0_4*dmats1[4][20] + coeff0_5*dmats1[5][20] + coeff0_6*dmats1[6][20] + coeff0_7*dmats1[7][20] + coeff0_8*dmats1[8][20] + coeff0_9*dmats1[9][20] + coeff0_10*dmats1[10][20] + coeff0_11*dmats1[11][20] + coeff0_12*dmats1[12][20] + coeff0_13*dmats1[13][20] + coeff0_14*dmats1[14][20] + coeff0_15*dmats1[15][20] + coeff0_16*dmats1[16][20] + coeff0_17*dmats1[17][20] + coeff0_18*dmats1[18][20] + coeff0_19*dmats1[19][20] + coeff0_20*dmats1[20][20] + coeff0_21*dmats1[21][20] + coeff0_22*dmats1[22][20] + coeff0_23*dmats1[23][20] + coeff0_24*dmats1[24][20] + coeff0_25*dmats1[25][20] + coeff0_26*dmats1[26][20] + coeff0_27*dmats1[27][20] + coeff0_28*dmats1[28][20] + coeff0_29*dmats1[29][20] + coeff0_30*dmats1[30][20] + coeff0_31*dmats1[31][20] + coeff0_32*dmats1[32][20] + coeff0_33*dmats1[33][20] + coeff0_34*dmats1[34][20];
          new_coeff0_21 = coeff0_0*dmats1[0][21] + coeff0_1*dmats1[1][21] + coeff0_2*dmats1[2][21] + coeff0_3*dmats1[3][21] + coeff0_4*dmats1[4][21] + coeff0_5*dmats1[5][21] + coeff0_6*dmats1[6][21] + coeff0_7*dmats1[7][21] + coeff0_8*dmats1[8][21] + coeff0_9*dmats1[9][21] + coeff0_10*dmats1[10][21] + coeff0_11*dmats1[11][21] + coeff0_12*dmats1[12][21] + coeff0_13*dmats1[13][21] + coeff0_14*dmats1[14][21] + coeff0_15*dmats1[15][21] + coeff0_16*dmats1[16][21] + coeff0_17*dmats1[17][21] + coeff0_18*dmats1[18][21] + coeff0_19*dmats1[19][21] + coeff0_20*dmats1[20][21] + coeff0_21*dmats1[21][21] + coeff0_22*dmats1[22][21] + coeff0_23*dmats1[23][21] + coeff0_24*dmats1[24][21] + coeff0_25*dmats1[25][21] + coeff0_26*dmats1[26][21] + coeff0_27*dmats1[27][21] + coeff0_28*dmats1[28][21] + coeff0_29*dmats1[29][21] + coeff0_30*dmats1[30][21] + coeff0_31*dmats1[31][21] + coeff0_32*dmats1[32][21] + coeff0_33*dmats1[33][21] + coeff0_34*dmats1[34][21];
          new_coeff0_22 = coeff0_0*dmats1[0][22] + coeff0_1*dmats1[1][22] + coeff0_2*dmats1[2][22] + coeff0_3*dmats1[3][22] + coeff0_4*dmats1[4][22] + coeff0_5*dmats1[5][22] + coeff0_6*dmats1[6][22] + coeff0_7*dmats1[7][22] + coeff0_8*dmats1[8][22] + coeff0_9*dmats1[9][22] + coeff0_10*dmats1[10][22] + coeff0_11*dmats1[11][22] + coeff0_12*dmats1[12][22] + coeff0_13*dmats1[13][22] + coeff0_14*dmats1[14][22] + coeff0_15*dmats1[15][22] + coeff0_16*dmats1[16][22] + coeff0_17*dmats1[17][22] + coeff0_18*dmats1[18][22] + coeff0_19*dmats1[19][22] + coeff0_20*dmats1[20][22] + coeff0_21*dmats1[21][22] + coeff0_22*dmats1[22][22] + coeff0_23*dmats1[23][22] + coeff0_24*dmats1[24][22] + coeff0_25*dmats1[25][22] + coeff0_26*dmats1[26][22] + coeff0_27*dmats1[27][22] + coeff0_28*dmats1[28][22] + coeff0_29*dmats1[29][22] + coeff0_30*dmats1[30][22] + coeff0_31*dmats1[31][22] + coeff0_32*dmats1[32][22] + coeff0_33*dmats1[33][22] + coeff0_34*dmats1[34][22];
          new_coeff0_23 = coeff0_0*dmats1[0][23] + coeff0_1*dmats1[1][23] + coeff0_2*dmats1[2][23] + coeff0_3*dmats1[3][23] + coeff0_4*dmats1[4][23] + coeff0_5*dmats1[5][23] + coeff0_6*dmats1[6][23] + coeff0_7*dmats1[7][23] + coeff0_8*dmats1[8][23] + coeff0_9*dmats1[9][23] + coeff0_10*dmats1[10][23] + coeff0_11*dmats1[11][23] + coeff0_12*dmats1[12][23] + coeff0_13*dmats1[13][23] + coeff0_14*dmats1[14][23] + coeff0_15*dmats1[15][23] + coeff0_16*dmats1[16][23] + coeff0_17*dmats1[17][23] + coeff0_18*dmats1[18][23] + coeff0_19*dmats1[19][23] + coeff0_20*dmats1[20][23] + coeff0_21*dmats1[21][23] + coeff0_22*dmats1[22][23] + coeff0_23*dmats1[23][23] + coeff0_24*dmats1[24][23] + coeff0_25*dmats1[25][23] + coeff0_26*dmats1[26][23] + coeff0_27*dmats1[27][23] + coeff0_28*dmats1[28][23] + coeff0_29*dmats1[29][23] + coeff0_30*dmats1[30][23] + coeff0_31*dmats1[31][23] + coeff0_32*dmats1[32][23] + coeff0_33*dmats1[33][23] + coeff0_34*dmats1[34][23];
          new_coeff0_24 = coeff0_0*dmats1[0][24] + coeff0_1*dmats1[1][24] + coeff0_2*dmats1[2][24] + coeff0_3*dmats1[3][24] + coeff0_4*dmats1[4][24] + coeff0_5*dmats1[5][24] + coeff0_6*dmats1[6][24] + coeff0_7*dmats1[7][24] + coeff0_8*dmats1[8][24] + coeff0_9*dmats1[9][24] + coeff0_10*dmats1[10][24] + coeff0_11*dmats1[11][24] + coeff0_12*dmats1[12][24] + coeff0_13*dmats1[13][24] + coeff0_14*dmats1[14][24] + coeff0_15*dmats1[15][24] + coeff0_16*dmats1[16][24] + coeff0_17*dmats1[17][24] + coeff0_18*dmats1[18][24] + coeff0_19*dmats1[19][24] + coeff0_20*dmats1[20][24] + coeff0_21*dmats1[21][24] + coeff0_22*dmats1[22][24] + coeff0_23*dmats1[23][24] + coeff0_24*dmats1[24][24] + coeff0_25*dmats1[25][24] + coeff0_26*dmats1[26][24] + coeff0_27*dmats1[27][24] + coeff0_28*dmats1[28][24] + coeff0_29*dmats1[29][24] + coeff0_30*dmats1[30][24] + coeff0_31*dmats1[31][24] + coeff0_32*dmats1[32][24] + coeff0_33*dmats1[33][24] + coeff0_34*dmats1[34][24];
          new_coeff0_25 = coeff0_0*dmats1[0][25] + coeff0_1*dmats1[1][25] + coeff0_2*dmats1[2][25] + coeff0_3*dmats1[3][25] + coeff0_4*dmats1[4][25] + coeff0_5*dmats1[5][25] + coeff0_6*dmats1[6][25] + coeff0_7*dmats1[7][25] + coeff0_8*dmats1[8][25] + coeff0_9*dmats1[9][25] + coeff0_10*dmats1[10][25] + coeff0_11*dmats1[11][25] + coeff0_12*dmats1[12][25] + coeff0_13*dmats1[13][25] + coeff0_14*dmats1[14][25] + coeff0_15*dmats1[15][25] + coeff0_16*dmats1[16][25] + coeff0_17*dmats1[17][25] + coeff0_18*dmats1[18][25] + coeff0_19*dmats1[19][25] + coeff0_20*dmats1[20][25] + coeff0_21*dmats1[21][25] + coeff0_22*dmats1[22][25] + coeff0_23*dmats1[23][25] + coeff0_24*dmats1[24][25] + coeff0_25*dmats1[25][25] + coeff0_26*dmats1[26][25] + coeff0_27*dmats1[27][25] + coeff0_28*dmats1[28][25] + coeff0_29*dmats1[29][25] + coeff0_30*dmats1[30][25] + coeff0_31*dmats1[31][25] + coeff0_32*dmats1[32][25] + coeff0_33*dmats1[33][25] + coeff0_34*dmats1[34][25];
          new_coeff0_26 = coeff0_0*dmats1[0][26] + coeff0_1*dmats1[1][26] + coeff0_2*dmats1[2][26] + coeff0_3*dmats1[3][26] + coeff0_4*dmats1[4][26] + coeff0_5*dmats1[5][26] + coeff0_6*dmats1[6][26] + coeff0_7*dmats1[7][26] + coeff0_8*dmats1[8][26] + coeff0_9*dmats1[9][26] + coeff0_10*dmats1[10][26] + coeff0_11*dmats1[11][26] + coeff0_12*dmats1[12][26] + coeff0_13*dmats1[13][26] + coeff0_14*dmats1[14][26] + coeff0_15*dmats1[15][26] + coeff0_16*dmats1[16][26] + coeff0_17*dmats1[17][26] + coeff0_18*dmats1[18][26] + coeff0_19*dmats1[19][26] + coeff0_20*dmats1[20][26] + coeff0_21*dmats1[21][26] + coeff0_22*dmats1[22][26] + coeff0_23*dmats1[23][26] + coeff0_24*dmats1[24][26] + coeff0_25*dmats1[25][26] + coeff0_26*dmats1[26][26] + coeff0_27*dmats1[27][26] + coeff0_28*dmats1[28][26] + coeff0_29*dmats1[29][26] + coeff0_30*dmats1[30][26] + coeff0_31*dmats1[31][26] + coeff0_32*dmats1[32][26] + coeff0_33*dmats1[33][26] + coeff0_34*dmats1[34][26];
          new_coeff0_27 = coeff0_0*dmats1[0][27] + coeff0_1*dmats1[1][27] + coeff0_2*dmats1[2][27] + coeff0_3*dmats1[3][27] + coeff0_4*dmats1[4][27] + coeff0_5*dmats1[5][27] + coeff0_6*dmats1[6][27] + coeff0_7*dmats1[7][27] + coeff0_8*dmats1[8][27] + coeff0_9*dmats1[9][27] + coeff0_10*dmats1[10][27] + coeff0_11*dmats1[11][27] + coeff0_12*dmats1[12][27] + coeff0_13*dmats1[13][27] + coeff0_14*dmats1[14][27] + coeff0_15*dmats1[15][27] + coeff0_16*dmats1[16][27] + coeff0_17*dmats1[17][27] + coeff0_18*dmats1[18][27] + coeff0_19*dmats1[19][27] + coeff0_20*dmats1[20][27] + coeff0_21*dmats1[21][27] + coeff0_22*dmats1[22][27] + coeff0_23*dmats1[23][27] + coeff0_24*dmats1[24][27] + coeff0_25*dmats1[25][27] + coeff0_26*dmats1[26][27] + coeff0_27*dmats1[27][27] + coeff0_28*dmats1[28][27] + coeff0_29*dmats1[29][27] + coeff0_30*dmats1[30][27] + coeff0_31*dmats1[31][27] + coeff0_32*dmats1[32][27] + coeff0_33*dmats1[33][27] + coeff0_34*dmats1[34][27];
          new_coeff0_28 = coeff0_0*dmats1[0][28] + coeff0_1*dmats1[1][28] + coeff0_2*dmats1[2][28] + coeff0_3*dmats1[3][28] + coeff0_4*dmats1[4][28] + coeff0_5*dmats1[5][28] + coeff0_6*dmats1[6][28] + coeff0_7*dmats1[7][28] + coeff0_8*dmats1[8][28] + coeff0_9*dmats1[9][28] + coeff0_10*dmats1[10][28] + coeff0_11*dmats1[11][28] + coeff0_12*dmats1[12][28] + coeff0_13*dmats1[13][28] + coeff0_14*dmats1[14][28] + coeff0_15*dmats1[15][28] + coeff0_16*dmats1[16][28] + coeff0_17*dmats1[17][28] + coeff0_18*dmats1[18][28] + coeff0_19*dmats1[19][28] + coeff0_20*dmats1[20][28] + coeff0_21*dmats1[21][28] + coeff0_22*dmats1[22][28] + coeff0_23*dmats1[23][28] + coeff0_24*dmats1[24][28] + coeff0_25*dmats1[25][28] + coeff0_26*dmats1[26][28] + coeff0_27*dmats1[27][28] + coeff0_28*dmats1[28][28] + coeff0_29*dmats1[29][28] + coeff0_30*dmats1[30][28] + coeff0_31*dmats1[31][28] + coeff0_32*dmats1[32][28] + coeff0_33*dmats1[33][28] + coeff0_34*dmats1[34][28];
          new_coeff0_29 = coeff0_0*dmats1[0][29] + coeff0_1*dmats1[1][29] + coeff0_2*dmats1[2][29] + coeff0_3*dmats1[3][29] + coeff0_4*dmats1[4][29] + coeff0_5*dmats1[5][29] + coeff0_6*dmats1[6][29] + coeff0_7*dmats1[7][29] + coeff0_8*dmats1[8][29] + coeff0_9*dmats1[9][29] + coeff0_10*dmats1[10][29] + coeff0_11*dmats1[11][29] + coeff0_12*dmats1[12][29] + coeff0_13*dmats1[13][29] + coeff0_14*dmats1[14][29] + coeff0_15*dmats1[15][29] + coeff0_16*dmats1[16][29] + coeff0_17*dmats1[17][29] + coeff0_18*dmats1[18][29] + coeff0_19*dmats1[19][29] + coeff0_20*dmats1[20][29] + coeff0_21*dmats1[21][29] + coeff0_22*dmats1[22][29] + coeff0_23*dmats1[23][29] + coeff0_24*dmats1[24][29] + coeff0_25*dmats1[25][29] + coeff0_26*dmats1[26][29] + coeff0_27*dmats1[27][29] + coeff0_28*dmats1[28][29] + coeff0_29*dmats1[29][29] + coeff0_30*dmats1[30][29] + coeff0_31*dmats1[31][29] + coeff0_32*dmats1[32][29] + coeff0_33*dmats1[33][29] + coeff0_34*dmats1[34][29];
          new_coeff0_30 = coeff0_0*dmats1[0][30] + coeff0_1*dmats1[1][30] + coeff0_2*dmats1[2][30] + coeff0_3*dmats1[3][30] + coeff0_4*dmats1[4][30] + coeff0_5*dmats1[5][30] + coeff0_6*dmats1[6][30] + coeff0_7*dmats1[7][30] + coeff0_8*dmats1[8][30] + coeff0_9*dmats1[9][30] + coeff0_10*dmats1[10][30] + coeff0_11*dmats1[11][30] + coeff0_12*dmats1[12][30] + coeff0_13*dmats1[13][30] + coeff0_14*dmats1[14][30] + coeff0_15*dmats1[15][30] + coeff0_16*dmats1[16][30] + coeff0_17*dmats1[17][30] + coeff0_18*dmats1[18][30] + coeff0_19*dmats1[19][30] + coeff0_20*dmats1[20][30] + coeff0_21*dmats1[21][30] + coeff0_22*dmats1[22][30] + coeff0_23*dmats1[23][30] + coeff0_24*dmats1[24][30] + coeff0_25*dmats1[25][30] + coeff0_26*dmats1[26][30] + coeff0_27*dmats1[27][30] + coeff0_28*dmats1[28][30] + coeff0_29*dmats1[29][30] + coeff0_30*dmats1[30][30] + coeff0_31*dmats1[31][30] + coeff0_32*dmats1[32][30] + coeff0_33*dmats1[33][30] + coeff0_34*dmats1[34][30];
          new_coeff0_31 = coeff0_0*dmats1[0][31] + coeff0_1*dmats1[1][31] + coeff0_2*dmats1[2][31] + coeff0_3*dmats1[3][31] + coeff0_4*dmats1[4][31] + coeff0_5*dmats1[5][31] + coeff0_6*dmats1[6][31] + coeff0_7*dmats1[7][31] + coeff0_8*dmats1[8][31] + coeff0_9*dmats1[9][31] + coeff0_10*dmats1[10][31] + coeff0_11*dmats1[11][31] + coeff0_12*dmats1[12][31] + coeff0_13*dmats1[13][31] + coeff0_14*dmats1[14][31] + coeff0_15*dmats1[15][31] + coeff0_16*dmats1[16][31] + coeff0_17*dmats1[17][31] + coeff0_18*dmats1[18][31] + coeff0_19*dmats1[19][31] + coeff0_20*dmats1[20][31] + coeff0_21*dmats1[21][31] + coeff0_22*dmats1[22][31] + coeff0_23*dmats1[23][31] + coeff0_24*dmats1[24][31] + coeff0_25*dmats1[25][31] + coeff0_26*dmats1[26][31] + coeff0_27*dmats1[27][31] + coeff0_28*dmats1[28][31] + coeff0_29*dmats1[29][31] + coeff0_30*dmats1[30][31] + coeff0_31*dmats1[31][31] + coeff0_32*dmats1[32][31] + coeff0_33*dmats1[33][31] + coeff0_34*dmats1[34][31];
          new_coeff0_32 = coeff0_0*dmats1[0][32] + coeff0_1*dmats1[1][32] + coeff0_2*dmats1[2][32] + coeff0_3*dmats1[3][32] + coeff0_4*dmats1[4][32] + coeff0_5*dmats1[5][32] + coeff0_6*dmats1[6][32] + coeff0_7*dmats1[7][32] + coeff0_8*dmats1[8][32] + coeff0_9*dmats1[9][32] + coeff0_10*dmats1[10][32] + coeff0_11*dmats1[11][32] + coeff0_12*dmats1[12][32] + coeff0_13*dmats1[13][32] + coeff0_14*dmats1[14][32] + coeff0_15*dmats1[15][32] + coeff0_16*dmats1[16][32] + coeff0_17*dmats1[17][32] + coeff0_18*dmats1[18][32] + coeff0_19*dmats1[19][32] + coeff0_20*dmats1[20][32] + coeff0_21*dmats1[21][32] + coeff0_22*dmats1[22][32] + coeff0_23*dmats1[23][32] + coeff0_24*dmats1[24][32] + coeff0_25*dmats1[25][32] + coeff0_26*dmats1[26][32] + coeff0_27*dmats1[27][32] + coeff0_28*dmats1[28][32] + coeff0_29*dmats1[29][32] + coeff0_30*dmats1[30][32] + coeff0_31*dmats1[31][32] + coeff0_32*dmats1[32][32] + coeff0_33*dmats1[33][32] + coeff0_34*dmats1[34][32];
          new_coeff0_33 = coeff0_0*dmats1[0][33] + coeff0_1*dmats1[1][33] + coeff0_2*dmats1[2][33] + coeff0_3*dmats1[3][33] + coeff0_4*dmats1[4][33] + coeff0_5*dmats1[5][33] + coeff0_6*dmats1[6][33] + coeff0_7*dmats1[7][33] + coeff0_8*dmats1[8][33] + coeff0_9*dmats1[9][33] + coeff0_10*dmats1[10][33] + coeff0_11*dmats1[11][33] + coeff0_12*dmats1[12][33] + coeff0_13*dmats1[13][33] + coeff0_14*dmats1[14][33] + coeff0_15*dmats1[15][33] + coeff0_16*dmats1[16][33] + coeff0_17*dmats1[17][33] + coeff0_18*dmats1[18][33] + coeff0_19*dmats1[19][33] + coeff0_20*dmats1[20][33] + coeff0_21*dmats1[21][33] + coeff0_22*dmats1[22][33] + coeff0_23*dmats1[23][33] + coeff0_24*dmats1[24][33] + coeff0_25*dmats1[25][33] + coeff0_26*dmats1[26][33] + coeff0_27*dmats1[27][33] + coeff0_28*dmats1[28][33] + coeff0_29*dmats1[29][33] + coeff0_30*dmats1[30][33] + coeff0_31*dmats1[31][33] + coeff0_32*dmats1[32][33] + coeff0_33*dmats1[33][33] + coeff0_34*dmats1[34][33];
          new_coeff0_34 = coeff0_0*dmats1[0][34] + coeff0_1*dmats1[1][34] + coeff0_2*dmats1[2][34] + coeff0_3*dmats1[3][34] + coeff0_4*dmats1[4][34] + coeff0_5*dmats1[5][34] + coeff0_6*dmats1[6][34] + coeff0_7*dmats1[7][34] + coeff0_8*dmats1[8][34] + coeff0_9*dmats1[9][34] + coeff0_10*dmats1[10][34] + coeff0_11*dmats1[11][34] + coeff0_12*dmats1[12][34] + coeff0_13*dmats1[13][34] + coeff0_14*dmats1[14][34] + coeff0_15*dmats1[15][34] + coeff0_16*dmats1[16][34] + coeff0_17*dmats1[17][34] + coeff0_18*dmats1[18][34] + coeff0_19*dmats1[19][34] + coeff0_20*dmats1[20][34] + coeff0_21*dmats1[21][34] + coeff0_22*dmats1[22][34] + coeff0_23*dmats1[23][34] + coeff0_24*dmats1[24][34] + coeff0_25*dmats1[25][34] + coeff0_26*dmats1[26][34] + coeff0_27*dmats1[27][34] + coeff0_28*dmats1[28][34] + coeff0_29*dmats1[29][34] + coeff0_30*dmats1[30][34] + coeff0_31*dmats1[31][34] + coeff0_32*dmats1[32][34] + coeff0_33*dmats1[33][34] + coeff0_34*dmats1[34][34];
        }
        if(combinations[deriv_num][j] == 2)
        {
          new_coeff0_0 = coeff0_0*dmats2[0][0] + coeff0_1*dmats2[1][0] + coeff0_2*dmats2[2][0] + coeff0_3*dmats2[3][0] + coeff0_4*dmats2[4][0] + coeff0_5*dmats2[5][0] + coeff0_6*dmats2[6][0] + coeff0_7*dmats2[7][0] + coeff0_8*dmats2[8][0] + coeff0_9*dmats2[9][0] + coeff0_10*dmats2[10][0] + coeff0_11*dmats2[11][0] + coeff0_12*dmats2[12][0] + coeff0_13*dmats2[13][0] + coeff0_14*dmats2[14][0] + coeff0_15*dmats2[15][0] + coeff0_16*dmats2[16][0] + coeff0_17*dmats2[17][0] + coeff0_18*dmats2[18][0] + coeff0_19*dmats2[19][0] + coeff0_20*dmats2[20][0] + coeff0_21*dmats2[21][0] + coeff0_22*dmats2[22][0] + coeff0_23*dmats2[23][0] + coeff0_24*dmats2[24][0] + coeff0_25*dmats2[25][0] + coeff0_26*dmats2[26][0] + coeff0_27*dmats2[27][0] + coeff0_28*dmats2[28][0] + coeff0_29*dmats2[29][0] + coeff0_30*dmats2[30][0] + coeff0_31*dmats2[31][0] + coeff0_32*dmats2[32][0] + coeff0_33*dmats2[33][0] + coeff0_34*dmats2[34][0];
          new_coeff0_1 = coeff0_0*dmats2[0][1] + coeff0_1*dmats2[1][1] + coeff0_2*dmats2[2][1] + coeff0_3*dmats2[3][1] + coeff0_4*dmats2[4][1] + coeff0_5*dmats2[5][1] + coeff0_6*dmats2[6][1] + coeff0_7*dmats2[7][1] + coeff0_8*dmats2[8][1] + coeff0_9*dmats2[9][1] + coeff0_10*dmats2[10][1] + coeff0_11*dmats2[11][1] + coeff0_12*dmats2[12][1] + coeff0_13*dmats2[13][1] + coeff0_14*dmats2[14][1] + coeff0_15*dmats2[15][1] + coeff0_16*dmats2[16][1] + coeff0_17*dmats2[17][1] + coeff0_18*dmats2[18][1] + coeff0_19*dmats2[19][1] + coeff0_20*dmats2[20][1] + coeff0_21*dmats2[21][1] + coeff0_22*dmats2[22][1] + coeff0_23*dmats2[23][1] + coeff0_24*dmats2[24][1] + coeff0_25*dmats2[25][1] + coeff0_26*dmats2[26][1] + coeff0_27*dmats2[27][1] + coeff0_28*dmats2[28][1] + coeff0_29*dmats2[29][1] + coeff0_30*dmats2[30][1] + coeff0_31*dmats2[31][1] + coeff0_32*dmats2[32][1] + coeff0_33*dmats2[33][1] + coeff0_34*dmats2[34][1];
          new_coeff0_2 = coeff0_0*dmats2[0][2] + coeff0_1*dmats2[1][2] + coeff0_2*dmats2[2][2] + coeff0_3*dmats2[3][2] + coeff0_4*dmats2[4][2] + coeff0_5*dmats2[5][2] + coeff0_6*dmats2[6][2] + coeff0_7*dmats2[7][2] + coeff0_8*dmats2[8][2] + coeff0_9*dmats2[9][2] + coeff0_10*dmats2[10][2] + coeff0_11*dmats2[11][2] + coeff0_12*dmats2[12][2] + coeff0_13*dmats2[13][2] + coeff0_14*dmats2[14][2] + coeff0_15*dmats2[15][2] + coeff0_16*dmats2[16][2] + coeff0_17*dmats2[17][2] + coeff0_18*dmats2[18][2] + coeff0_19*dmats2[19][2] + coeff0_20*dmats2[20][2] + coeff0_21*dmats2[21][2] + coeff0_22*dmats2[22][2] + coeff0_23*dmats2[23][2] + coeff0_24*dmats2[24][2] + coeff0_25*dmats2[25][2] + coeff0_26*dmats2[26][2] + coeff0_27*dmats2[27][2] + coeff0_28*dmats2[28][2] + coeff0_29*dmats2[29][2] + coeff0_30*dmats2[30][2] + coeff0_31*dmats2[31][2] + coeff0_32*dmats2[32][2] + coeff0_33*dmats2[33][2] + coeff0_34*dmats2[34][2];
          new_coeff0_3 = coeff0_0*dmats2[0][3] + coeff0_1*dmats2[1][3] + coeff0_2*dmats2[2][3] + coeff0_3*dmats2[3][3] + coeff0_4*dmats2[4][3] + coeff0_5*dmats2[5][3] + coeff0_6*dmats2[6][3] + coeff0_7*dmats2[7][3] + coeff0_8*dmats2[8][3] + coeff0_9*dmats2[9][3] + coeff0_10*dmats2[10][3] + coeff0_11*dmats2[11][3] + coeff0_12*dmats2[12][3] + coeff0_13*dmats2[13][3] + coeff0_14*dmats2[14][3] + coeff0_15*dmats2[15][3] + coeff0_16*dmats2[16][3] + coeff0_17*dmats2[17][3] + coeff0_18*dmats2[18][3] + coeff0_19*dmats2[19][3] + coeff0_20*dmats2[20][3] + coeff0_21*dmats2[21][3] + coeff0_22*dmats2[22][3] + coeff0_23*dmats2[23][3] + coeff0_24*dmats2[24][3] + coeff0_25*dmats2[25][3] + coeff0_26*dmats2[26][3] + coeff0_27*dmats2[27][3] + coeff0_28*dmats2[28][3] + coeff0_29*dmats2[29][3] + coeff0_30*dmats2[30][3] + coeff0_31*dmats2[31][3] + coeff0_32*dmats2[32][3] + coeff0_33*dmats2[33][3] + coeff0_34*dmats2[34][3];
          new_coeff0_4 = coeff0_0*dmats2[0][4] + coeff0_1*dmats2[1][4] + coeff0_2*dmats2[2][4] + coeff0_3*dmats2[3][4] + coeff0_4*dmats2[4][4] + coeff0_5*dmats2[5][4] + coeff0_6*dmats2[6][4] + coeff0_7*dmats2[7][4] + coeff0_8*dmats2[8][4] + coeff0_9*dmats2[9][4] + coeff0_10*dmats2[10][4] + coeff0_11*dmats2[11][4] + coeff0_12*dmats2[12][4] + coeff0_13*dmats2[13][4] + coeff0_14*dmats2[14][4] + coeff0_15*dmats2[15][4] + coeff0_16*dmats2[16][4] + coeff0_17*dmats2[17][4] + coeff0_18*dmats2[18][4] + coeff0_19*dmats2[19][4] + coeff0_20*dmats2[20][4] + coeff0_21*dmats2[21][4] + coeff0_22*dmats2[22][4] + coeff0_23*dmats2[23][4] + coeff0_24*dmats2[24][4] + coeff0_25*dmats2[25][4] + coeff0_26*dmats2[26][4] + coeff0_27*dmats2[27][4] + coeff0_28*dmats2[28][4] + coeff0_29*dmats2[29][4] + coeff0_30*dmats2[30][4] + coeff0_31*dmats2[31][4] + coeff0_32*dmats2[32][4] + coeff0_33*dmats2[33][4] + coeff0_34*dmats2[34][4];
          new_coeff0_5 = coeff0_0*dmats2[0][5] + coeff0_1*dmats2[1][5] + coeff0_2*dmats2[2][5] + coeff0_3*dmats2[3][5] + coeff0_4*dmats2[4][5] + coeff0_5*dmats2[5][5] + coeff0_6*dmats2[6][5] + coeff0_7*dmats2[7][5] + coeff0_8*dmats2[8][5] + coeff0_9*dmats2[9][5] + coeff0_10*dmats2[10][5] + coeff0_11*dmats2[11][5] + coeff0_12*dmats2[12][5] + coeff0_13*dmats2[13][5] + coeff0_14*dmats2[14][5] + coeff0_15*dmats2[15][5] + coeff0_16*dmats2[16][5] + coeff0_17*dmats2[17][5] + coeff0_18*dmats2[18][5] + coeff0_19*dmats2[19][5] + coeff0_20*dmats2[20][5] + coeff0_21*dmats2[21][5] + coeff0_22*dmats2[22][5] + coeff0_23*dmats2[23][5] + coeff0_24*dmats2[24][5] + coeff0_25*dmats2[25][5] + coeff0_26*dmats2[26][5] + coeff0_27*dmats2[27][5] + coeff0_28*dmats2[28][5] + coeff0_29*dmats2[29][5] + coeff0_30*dmats2[30][5] + coeff0_31*dmats2[31][5] + coeff0_32*dmats2[32][5] + coeff0_33*dmats2[33][5] + coeff0_34*dmats2[34][5];
          new_coeff0_6 = coeff0_0*dmats2[0][6] + coeff0_1*dmats2[1][6] + coeff0_2*dmats2[2][6] + coeff0_3*dmats2[3][6] + coeff0_4*dmats2[4][6] + coeff0_5*dmats2[5][6] + coeff0_6*dmats2[6][6] + coeff0_7*dmats2[7][6] + coeff0_8*dmats2[8][6] + coeff0_9*dmats2[9][6] + coeff0_10*dmats2[10][6] + coeff0_11*dmats2[11][6] + coeff0_12*dmats2[12][6] + coeff0_13*dmats2[13][6] + coeff0_14*dmats2[14][6] + coeff0_15*dmats2[15][6] + coeff0_16*dmats2[16][6] + coeff0_17*dmats2[17][6] + coeff0_18*dmats2[18][6] + coeff0_19*dmats2[19][6] + coeff0_20*dmats2[20][6] + coeff0_21*dmats2[21][6] + coeff0_22*dmats2[22][6] + coeff0_23*dmats2[23][6] + coeff0_24*dmats2[24][6] + coeff0_25*dmats2[25][6] + coeff0_26*dmats2[26][6] + coeff0_27*dmats2[27][6] + coeff0_28*dmats2[28][6] + coeff0_29*dmats2[29][6] + coeff0_30*dmats2[30][6] + coeff0_31*dmats2[31][6] + coeff0_32*dmats2[32][6] + coeff0_33*dmats2[33][6] + coeff0_34*dmats2[34][6];
          new_coeff0_7 = coeff0_0*dmats2[0][7] + coeff0_1*dmats2[1][7] + coeff0_2*dmats2[2][7] + coeff0_3*dmats2[3][7] + coeff0_4*dmats2[4][7] + coeff0_5*dmats2[5][7] + coeff0_6*dmats2[6][7] + coeff0_7*dmats2[7][7] + coeff0_8*dmats2[8][7] + coeff0_9*dmats2[9][7] + coeff0_10*dmats2[10][7] + coeff0_11*dmats2[11][7] + coeff0_12*dmats2[12][7] + coeff0_13*dmats2[13][7] + coeff0_14*dmats2[14][7] + coeff0_15*dmats2[15][7] + coeff0_16*dmats2[16][7] + coeff0_17*dmats2[17][7] + coeff0_18*dmats2[18][7] + coeff0_19*dmats2[19][7] + coeff0_20*dmats2[20][7] + coeff0_21*dmats2[21][7] + coeff0_22*dmats2[22][7] + coeff0_23*dmats2[23][7] + coeff0_24*dmats2[24][7] + coeff0_25*dmats2[25][7] + coeff0_26*dmats2[26][7] + coeff0_27*dmats2[27][7] + coeff0_28*dmats2[28][7] + coeff0_29*dmats2[29][7] + coeff0_30*dmats2[30][7] + coeff0_31*dmats2[31][7] + coeff0_32*dmats2[32][7] + coeff0_33*dmats2[33][7] + coeff0_34*dmats2[34][7];
          new_coeff0_8 = coeff0_0*dmats2[0][8] + coeff0_1*dmats2[1][8] + coeff0_2*dmats2[2][8] + coeff0_3*dmats2[3][8] + coeff0_4*dmats2[4][8] + coeff0_5*dmats2[5][8] + coeff0_6*dmats2[6][8] + coeff0_7*dmats2[7][8] + coeff0_8*dmats2[8][8] + coeff0_9*dmats2[9][8] + coeff0_10*dmats2[10][8] + coeff0_11*dmats2[11][8] + coeff0_12*dmats2[12][8] + coeff0_13*dmats2[13][8] + coeff0_14*dmats2[14][8] + coeff0_15*dmats2[15][8] + coeff0_16*dmats2[16][8] + coeff0_17*dmats2[17][8] + coeff0_18*dmats2[18][8] + coeff0_19*dmats2[19][8] + coeff0_20*dmats2[20][8] + coeff0_21*dmats2[21][8] + coeff0_22*dmats2[22][8] + coeff0_23*dmats2[23][8] + coeff0_24*dmats2[24][8] + coeff0_25*dmats2[25][8] + coeff0_26*dmats2[26][8] + coeff0_27*dmats2[27][8] + coeff0_28*dmats2[28][8] + coeff0_29*dmats2[29][8] + coeff0_30*dmats2[30][8] + coeff0_31*dmats2[31][8] + coeff0_32*dmats2[32][8] + coeff0_33*dmats2[33][8] + coeff0_34*dmats2[34][8];
          new_coeff0_9 = coeff0_0*dmats2[0][9] + coeff0_1*dmats2[1][9] + coeff0_2*dmats2[2][9] + coeff0_3*dmats2[3][9] + coeff0_4*dmats2[4][9] + coeff0_5*dmats2[5][9] + coeff0_6*dmats2[6][9] + coeff0_7*dmats2[7][9] + coeff0_8*dmats2[8][9] + coeff0_9*dmats2[9][9] + coeff0_10*dmats2[10][9] + coeff0_11*dmats2[11][9] + coeff0_12*dmats2[12][9] + coeff0_13*dmats2[13][9] + coeff0_14*dmats2[14][9] + coeff0_15*dmats2[15][9] + coeff0_16*dmats2[16][9] + coeff0_17*dmats2[17][9] + coeff0_18*dmats2[18][9] + coeff0_19*dmats2[19][9] + coeff0_20*dmats2[20][9] + coeff0_21*dmats2[21][9] + coeff0_22*dmats2[22][9] + coeff0_23*dmats2[23][9] + coeff0_24*dmats2[24][9] + coeff0_25*dmats2[25][9] + coeff0_26*dmats2[26][9] + coeff0_27*dmats2[27][9] + coeff0_28*dmats2[28][9] + coeff0_29*dmats2[29][9] + coeff0_30*dmats2[30][9] + coeff0_31*dmats2[31][9] + coeff0_32*dmats2[32][9] + coeff0_33*dmats2[33][9] + coeff0_34*dmats2[34][9];
          new_coeff0_10 = coeff0_0*dmats2[0][10] + coeff0_1*dmats2[1][10] + coeff0_2*dmats2[2][10] + coeff0_3*dmats2[3][10] + coeff0_4*dmats2[4][10] + coeff0_5*dmats2[5][10] + coeff0_6*dmats2[6][10] + coeff0_7*dmats2[7][10] + coeff0_8*dmats2[8][10] + coeff0_9*dmats2[9][10] + coeff0_10*dmats2[10][10] + coeff0_11*dmats2[11][10] + coeff0_12*dmats2[12][10] + coeff0_13*dmats2[13][10] + coeff0_14*dmats2[14][10] + coeff0_15*dmats2[15][10] + coeff0_16*dmats2[16][10] + coeff0_17*dmats2[17][10] + coeff0_18*dmats2[18][10] + coeff0_19*dmats2[19][10] + coeff0_20*dmats2[20][10] + coeff0_21*dmats2[21][10] + coeff0_22*dmats2[22][10] + coeff0_23*dmats2[23][10] + coeff0_24*dmats2[24][10] + coeff0_25*dmats2[25][10] + coeff0_26*dmats2[26][10] + coeff0_27*dmats2[27][10] + coeff0_28*dmats2[28][10] + coeff0_29*dmats2[29][10] + coeff0_30*dmats2[30][10] + coeff0_31*dmats2[31][10] + coeff0_32*dmats2[32][10] + coeff0_33*dmats2[33][10] + coeff0_34*dmats2[34][10];
          new_coeff0_11 = coeff0_0*dmats2[0][11] + coeff0_1*dmats2[1][11] + coeff0_2*dmats2[2][11] + coeff0_3*dmats2[3][11] + coeff0_4*dmats2[4][11] + coeff0_5*dmats2[5][11] + coeff0_6*dmats2[6][11] + coeff0_7*dmats2[7][11] + coeff0_8*dmats2[8][11] + coeff0_9*dmats2[9][11] + coeff0_10*dmats2[10][11] + coeff0_11*dmats2[11][11] + coeff0_12*dmats2[12][11] + coeff0_13*dmats2[13][11] + coeff0_14*dmats2[14][11] + coeff0_15*dmats2[15][11] + coeff0_16*dmats2[16][11] + coeff0_17*dmats2[17][11] + coeff0_18*dmats2[18][11] + coeff0_19*dmats2[19][11] + coeff0_20*dmats2[20][11] + coeff0_21*dmats2[21][11] + coeff0_22*dmats2[22][11] + coeff0_23*dmats2[23][11] + coeff0_24*dmats2[24][11] + coeff0_25*dmats2[25][11] + coeff0_26*dmats2[26][11] + coeff0_27*dmats2[27][11] + coeff0_28*dmats2[28][11] + coeff0_29*dmats2[29][11] + coeff0_30*dmats2[30][11] + coeff0_31*dmats2[31][11] + coeff0_32*dmats2[32][11] + coeff0_33*dmats2[33][11] + coeff0_34*dmats2[34][11];
          new_coeff0_12 = coeff0_0*dmats2[0][12] + coeff0_1*dmats2[1][12] + coeff0_2*dmats2[2][12] + coeff0_3*dmats2[3][12] + coeff0_4*dmats2[4][12] + coeff0_5*dmats2[5][12] + coeff0_6*dmats2[6][12] + coeff0_7*dmats2[7][12] + coeff0_8*dmats2[8][12] + coeff0_9*dmats2[9][12] + coeff0_10*dmats2[10][12] + coeff0_11*dmats2[11][12] + coeff0_12*dmats2[12][12] + coeff0_13*dmats2[13][12] + coeff0_14*dmats2[14][12] + coeff0_15*dmats2[15][12] + coeff0_16*dmats2[16][12] + coeff0_17*dmats2[17][12] + coeff0_18*dmats2[18][12] + coeff0_19*dmats2[19][12] + coeff0_20*dmats2[20][12] + coeff0_21*dmats2[21][12] + coeff0_22*dmats2[22][12] + coeff0_23*dmats2[23][12] + coeff0_24*dmats2[24][12] + coeff0_25*dmats2[25][12] + coeff0_26*dmats2[26][12] + coeff0_27*dmats2[27][12] + coeff0_28*dmats2[28][12] + coeff0_29*dmats2[29][12] + coeff0_30*dmats2[30][12] + coeff0_31*dmats2[31][12] + coeff0_32*dmats2[32][12] + coeff0_33*dmats2[33][12] + coeff0_34*dmats2[34][12];
          new_coeff0_13 = coeff0_0*dmats2[0][13] + coeff0_1*dmats2[1][13] + coeff0_2*dmats2[2][13] + coeff0_3*dmats2[3][13] + coeff0_4*dmats2[4][13] + coeff0_5*dmats2[5][13] + coeff0_6*dmats2[6][13] + coeff0_7*dmats2[7][13] + coeff0_8*dmats2[8][13] + coeff0_9*dmats2[9][13] + coeff0_10*dmats2[10][13] + coeff0_11*dmats2[11][13] + coeff0_12*dmats2[12][13] + coeff0_13*dmats2[13][13] + coeff0_14*dmats2[14][13] + coeff0_15*dmats2[15][13] + coeff0_16*dmats2[16][13] + coeff0_17*dmats2[17][13] + coeff0_18*dmats2[18][13] + coeff0_19*dmats2[19][13] + coeff0_20*dmats2[20][13] + coeff0_21*dmats2[21][13] + coeff0_22*dmats2[22][13] + coeff0_23*dmats2[23][13] + coeff0_24*dmats2[24][13] + coeff0_25*dmats2[25][13] + coeff0_26*dmats2[26][13] + coeff0_27*dmats2[27][13] + coeff0_28*dmats2[28][13] + coeff0_29*dmats2[29][13] + coeff0_30*dmats2[30][13] + coeff0_31*dmats2[31][13] + coeff0_32*dmats2[32][13] + coeff0_33*dmats2[33][13] + coeff0_34*dmats2[34][13];
          new_coeff0_14 = coeff0_0*dmats2[0][14] + coeff0_1*dmats2[1][14] + coeff0_2*dmats2[2][14] + coeff0_3*dmats2[3][14] + coeff0_4*dmats2[4][14] + coeff0_5*dmats2[5][14] + coeff0_6*dmats2[6][14] + coeff0_7*dmats2[7][14] + coeff0_8*dmats2[8][14] + coeff0_9*dmats2[9][14] + coeff0_10*dmats2[10][14] + coeff0_11*dmats2[11][14] + coeff0_12*dmats2[12][14] + coeff0_13*dmats2[13][14] + coeff0_14*dmats2[14][14] + coeff0_15*dmats2[15][14] + coeff0_16*dmats2[16][14] + coeff0_17*dmats2[17][14] + coeff0_18*dmats2[18][14] + coeff0_19*dmats2[19][14] + coeff0_20*dmats2[20][14] + coeff0_21*dmats2[21][14] + coeff0_22*dmats2[22][14] + coeff0_23*dmats2[23][14] + coeff0_24*dmats2[24][14] + coeff0_25*dmats2[25][14] + coeff0_26*dmats2[26][14] + coeff0_27*dmats2[27][14] + coeff0_28*dmats2[28][14] + coeff0_29*dmats2[29][14] + coeff0_30*dmats2[30][14] + coeff0_31*dmats2[31][14] + coeff0_32*dmats2[32][14] + coeff0_33*dmats2[33][14] + coeff0_34*dmats2[34][14];
          new_coeff0_15 = coeff0_0*dmats2[0][15] + coeff0_1*dmats2[1][15] + coeff0_2*dmats2[2][15] + coeff0_3*dmats2[3][15] + coeff0_4*dmats2[4][15] + coeff0_5*dmats2[5][15] + coeff0_6*dmats2[6][15] + coeff0_7*dmats2[7][15] + coeff0_8*dmats2[8][15] + coeff0_9*dmats2[9][15] + coeff0_10*dmats2[10][15] + coeff0_11*dmats2[11][15] + coeff0_12*dmats2[12][15] + coeff0_13*dmats2[13][15] + coeff0_14*dmats2[14][15] + coeff0_15*dmats2[15][15] + coeff0_16*dmats2[16][15] + coeff0_17*dmats2[17][15] + coeff0_18*dmats2[18][15] + coeff0_19*dmats2[19][15] + coeff0_20*dmats2[20][15] + coeff0_21*dmats2[21][15] + coeff0_22*dmats2[22][15] + coeff0_23*dmats2[23][15] + coeff0_24*dmats2[24][15] + coeff0_25*dmats2[25][15] + coeff0_26*dmats2[26][15] + coeff0_27*dmats2[27][15] + coeff0_28*dmats2[28][15] + coeff0_29*dmats2[29][15] + coeff0_30*dmats2[30][15] + coeff0_31*dmats2[31][15] + coeff0_32*dmats2[32][15] + coeff0_33*dmats2[33][15] + coeff0_34*dmats2[34][15];
          new_coeff0_16 = coeff0_0*dmats2[0][16] + coeff0_1*dmats2[1][16] + coeff0_2*dmats2[2][16] + coeff0_3*dmats2[3][16] + coeff0_4*dmats2[4][16] + coeff0_5*dmats2[5][16] + coeff0_6*dmats2[6][16] + coeff0_7*dmats2[7][16] + coeff0_8*dmats2[8][16] + coeff0_9*dmats2[9][16] + coeff0_10*dmats2[10][16] + coeff0_11*dmats2[11][16] + coeff0_12*dmats2[12][16] + coeff0_13*dmats2[13][16] + coeff0_14*dmats2[14][16] + coeff0_15*dmats2[15][16] + coeff0_16*dmats2[16][16] + coeff0_17*dmats2[17][16] + coeff0_18*dmats2[18][16] + coeff0_19*dmats2[19][16] + coeff0_20*dmats2[20][16] + coeff0_21*dmats2[21][16] + coeff0_22*dmats2[22][16] + coeff0_23*dmats2[23][16] + coeff0_24*dmats2[24][16] + coeff0_25*dmats2[25][16] + coeff0_26*dmats2[26][16] + coeff0_27*dmats2[27][16] + coeff0_28*dmats2[28][16] + coeff0_29*dmats2[29][16] + coeff0_30*dmats2[30][16] + coeff0_31*dmats2[31][16] + coeff0_32*dmats2[32][16] + coeff0_33*dmats2[33][16] + coeff0_34*dmats2[34][16];
          new_coeff0_17 = coeff0_0*dmats2[0][17] + coeff0_1*dmats2[1][17] + coeff0_2*dmats2[2][17] + coeff0_3*dmats2[3][17] + coeff0_4*dmats2[4][17] + coeff0_5*dmats2[5][17] + coeff0_6*dmats2[6][17] + coeff0_7*dmats2[7][17] + coeff0_8*dmats2[8][17] + coeff0_9*dmats2[9][17] + coeff0_10*dmats2[10][17] + coeff0_11*dmats2[11][17] + coeff0_12*dmats2[12][17] + coeff0_13*dmats2[13][17] + coeff0_14*dmats2[14][17] + coeff0_15*dmats2[15][17] + coeff0_16*dmats2[16][17] + coeff0_17*dmats2[17][17] + coeff0_18*dmats2[18][17] + coeff0_19*dmats2[19][17] + coeff0_20*dmats2[20][17] + coeff0_21*dmats2[21][17] + coeff0_22*dmats2[22][17] + coeff0_23*dmats2[23][17] + coeff0_24*dmats2[24][17] + coeff0_25*dmats2[25][17] + coeff0_26*dmats2[26][17] + coeff0_27*dmats2[27][17] + coeff0_28*dmats2[28][17] + coeff0_29*dmats2[29][17] + coeff0_30*dmats2[30][17] + coeff0_31*dmats2[31][17] + coeff0_32*dmats2[32][17] + coeff0_33*dmats2[33][17] + coeff0_34*dmats2[34][17];
          new_coeff0_18 = coeff0_0*dmats2[0][18] + coeff0_1*dmats2[1][18] + coeff0_2*dmats2[2][18] + coeff0_3*dmats2[3][18] + coeff0_4*dmats2[4][18] + coeff0_5*dmats2[5][18] + coeff0_6*dmats2[6][18] + coeff0_7*dmats2[7][18] + coeff0_8*dmats2[8][18] + coeff0_9*dmats2[9][18] + coeff0_10*dmats2[10][18] + coeff0_11*dmats2[11][18] + coeff0_12*dmats2[12][18] + coeff0_13*dmats2[13][18] + coeff0_14*dmats2[14][18] + coeff0_15*dmats2[15][18] + coeff0_16*dmats2[16][18] + coeff0_17*dmats2[17][18] + coeff0_18*dmats2[18][18] + coeff0_19*dmats2[19][18] + coeff0_20*dmats2[20][18] + coeff0_21*dmats2[21][18] + coeff0_22*dmats2[22][18] + coeff0_23*dmats2[23][18] + coeff0_24*dmats2[24][18] + coeff0_25*dmats2[25][18] + coeff0_26*dmats2[26][18] + coeff0_27*dmats2[27][18] + coeff0_28*dmats2[28][18] + coeff0_29*dmats2[29][18] + coeff0_30*dmats2[30][18] + coeff0_31*dmats2[31][18] + coeff0_32*dmats2[32][18] + coeff0_33*dmats2[33][18] + coeff0_34*dmats2[34][18];
          new_coeff0_19 = coeff0_0*dmats2[0][19] + coeff0_1*dmats2[1][19] + coeff0_2*dmats2[2][19] + coeff0_3*dmats2[3][19] + coeff0_4*dmats2[4][19] + coeff0_5*dmats2[5][19] + coeff0_6*dmats2[6][19] + coeff0_7*dmats2[7][19] + coeff0_8*dmats2[8][19] + coeff0_9*dmats2[9][19] + coeff0_10*dmats2[10][19] + coeff0_11*dmats2[11][19] + coeff0_12*dmats2[12][19] + coeff0_13*dmats2[13][19] + coeff0_14*dmats2[14][19] + coeff0_15*dmats2[15][19] + coeff0_16*dmats2[16][19] + coeff0_17*dmats2[17][19] + coeff0_18*dmats2[18][19] + coeff0_19*dmats2[19][19] + coeff0_20*dmats2[20][19] + coeff0_21*dmats2[21][19] + coeff0_22*dmats2[22][19] + coeff0_23*dmats2[23][19] + coeff0_24*dmats2[24][19] + coeff0_25*dmats2[25][19] + coeff0_26*dmats2[26][19] + coeff0_27*dmats2[27][19] + coeff0_28*dmats2[28][19] + coeff0_29*dmats2[29][19] + coeff0_30*dmats2[30][19] + coeff0_31*dmats2[31][19] + coeff0_32*dmats2[32][19] + coeff0_33*dmats2[33][19] + coeff0_34*dmats2[34][19];
          new_coeff0_20 = coeff0_0*dmats2[0][20] + coeff0_1*dmats2[1][20] + coeff0_2*dmats2[2][20] + coeff0_3*dmats2[3][20] + coeff0_4*dmats2[4][20] + coeff0_5*dmats2[5][20] + coeff0_6*dmats2[6][20] + coeff0_7*dmats2[7][20] + coeff0_8*dmats2[8][20] + coeff0_9*dmats2[9][20] + coeff0_10*dmats2[10][20] + coeff0_11*dmats2[11][20] + coeff0_12*dmats2[12][20] + coeff0_13*dmats2[13][20] + coeff0_14*dmats2[14][20] + coeff0_15*dmats2[15][20] + coeff0_16*dmats2[16][20] + coeff0_17*dmats2[17][20] + coeff0_18*dmats2[18][20] + coeff0_19*dmats2[19][20] + coeff0_20*dmats2[20][20] + coeff0_21*dmats2[21][20] + coeff0_22*dmats2[22][20] + coeff0_23*dmats2[23][20] + coeff0_24*dmats2[24][20] + coeff0_25*dmats2[25][20] + coeff0_26*dmats2[26][20] + coeff0_27*dmats2[27][20] + coeff0_28*dmats2[28][20] + coeff0_29*dmats2[29][20] + coeff0_30*dmats2[30][20] + coeff0_31*dmats2[31][20] + coeff0_32*dmats2[32][20] + coeff0_33*dmats2[33][20] + coeff0_34*dmats2[34][20];
          new_coeff0_21 = coeff0_0*dmats2[0][21] + coeff0_1*dmats2[1][21] + coeff0_2*dmats2[2][21] + coeff0_3*dmats2[3][21] + coeff0_4*dmats2[4][21] + coeff0_5*dmats2[5][21] + coeff0_6*dmats2[6][21] + coeff0_7*dmats2[7][21] + coeff0_8*dmats2[8][21] + coeff0_9*dmats2[9][21] + coeff0_10*dmats2[10][21] + coeff0_11*dmats2[11][21] + coeff0_12*dmats2[12][21] + coeff0_13*dmats2[13][21] + coeff0_14*dmats2[14][21] + coeff0_15*dmats2[15][21] + coeff0_16*dmats2[16][21] + coeff0_17*dmats2[17][21] + coeff0_18*dmats2[18][21] + coeff0_19*dmats2[19][21] + coeff0_20*dmats2[20][21] + coeff0_21*dmats2[21][21] + coeff0_22*dmats2[22][21] + coeff0_23*dmats2[23][21] + coeff0_24*dmats2[24][21] + coeff0_25*dmats2[25][21] + coeff0_26*dmats2[26][21] + coeff0_27*dmats2[27][21] + coeff0_28*dmats2[28][21] + coeff0_29*dmats2[29][21] + coeff0_30*dmats2[30][21] + coeff0_31*dmats2[31][21] + coeff0_32*dmats2[32][21] + coeff0_33*dmats2[33][21] + coeff0_34*dmats2[34][21];
          new_coeff0_22 = coeff0_0*dmats2[0][22] + coeff0_1*dmats2[1][22] + coeff0_2*dmats2[2][22] + coeff0_3*dmats2[3][22] + coeff0_4*dmats2[4][22] + coeff0_5*dmats2[5][22] + coeff0_6*dmats2[6][22] + coeff0_7*dmats2[7][22] + coeff0_8*dmats2[8][22] + coeff0_9*dmats2[9][22] + coeff0_10*dmats2[10][22] + coeff0_11*dmats2[11][22] + coeff0_12*dmats2[12][22] + coeff0_13*dmats2[13][22] + coeff0_14*dmats2[14][22] + coeff0_15*dmats2[15][22] + coeff0_16*dmats2[16][22] + coeff0_17*dmats2[17][22] + coeff0_18*dmats2[18][22] + coeff0_19*dmats2[19][22] + coeff0_20*dmats2[20][22] + coeff0_21*dmats2[21][22] + coeff0_22*dmats2[22][22] + coeff0_23*dmats2[23][22] + coeff0_24*dmats2[24][22] + coeff0_25*dmats2[25][22] + coeff0_26*dmats2[26][22] + coeff0_27*dmats2[27][22] + coeff0_28*dmats2[28][22] + coeff0_29*dmats2[29][22] + coeff0_30*dmats2[30][22] + coeff0_31*dmats2[31][22] + coeff0_32*dmats2[32][22] + coeff0_33*dmats2[33][22] + coeff0_34*dmats2[34][22];
          new_coeff0_23 = coeff0_0*dmats2[0][23] + coeff0_1*dmats2[1][23] + coeff0_2*dmats2[2][23] + coeff0_3*dmats2[3][23] + coeff0_4*dmats2[4][23] + coeff0_5*dmats2[5][23] + coeff0_6*dmats2[6][23] + coeff0_7*dmats2[7][23] + coeff0_8*dmats2[8][23] + coeff0_9*dmats2[9][23] + coeff0_10*dmats2[10][23] + coeff0_11*dmats2[11][23] + coeff0_12*dmats2[12][23] + coeff0_13*dmats2[13][23] + coeff0_14*dmats2[14][23] + coeff0_15*dmats2[15][23] + coeff0_16*dmats2[16][23] + coeff0_17*dmats2[17][23] + coeff0_18*dmats2[18][23] + coeff0_19*dmats2[19][23] + coeff0_20*dmats2[20][23] + coeff0_21*dmats2[21][23] + coeff0_22*dmats2[22][23] + coeff0_23*dmats2[23][23] + coeff0_24*dmats2[24][23] + coeff0_25*dmats2[25][23] + coeff0_26*dmats2[26][23] + coeff0_27*dmats2[27][23] + coeff0_28*dmats2[28][23] + coeff0_29*dmats2[29][23] + coeff0_30*dmats2[30][23] + coeff0_31*dmats2[31][23] + coeff0_32*dmats2[32][23] + coeff0_33*dmats2[33][23] + coeff0_34*dmats2[34][23];
          new_coeff0_24 = coeff0_0*dmats2[0][24] + coeff0_1*dmats2[1][24] + coeff0_2*dmats2[2][24] + coeff0_3*dmats2[3][24] + coeff0_4*dmats2[4][24] + coeff0_5*dmats2[5][24] + coeff0_6*dmats2[6][24] + coeff0_7*dmats2[7][24] + coeff0_8*dmats2[8][24] + coeff0_9*dmats2[9][24] + coeff0_10*dmats2[10][24] + coeff0_11*dmats2[11][24] + coeff0_12*dmats2[12][24] + coeff0_13*dmats2[13][24] + coeff0_14*dmats2[14][24] + coeff0_15*dmats2[15][24] + coeff0_16*dmats2[16][24] + coeff0_17*dmats2[17][24] + coeff0_18*dmats2[18][24] + coeff0_19*dmats2[19][24] + coeff0_20*dmats2[20][24] + coeff0_21*dmats2[21][24] + coeff0_22*dmats2[22][24] + coeff0_23*dmats2[23][24] + coeff0_24*dmats2[24][24] + coeff0_25*dmats2[25][24] + coeff0_26*dmats2[26][24] + coeff0_27*dmats2[27][24] + coeff0_28*dmats2[28][24] + coeff0_29*dmats2[29][24] + coeff0_30*dmats2[30][24] + coeff0_31*dmats2[31][24] + coeff0_32*dmats2[32][24] + coeff0_33*dmats2[33][24] + coeff0_34*dmats2[34][24];
          new_coeff0_25 = coeff0_0*dmats2[0][25] + coeff0_1*dmats2[1][25] + coeff0_2*dmats2[2][25] + coeff0_3*dmats2[3][25] + coeff0_4*dmats2[4][25] + coeff0_5*dmats2[5][25] + coeff0_6*dmats2[6][25] + coeff0_7*dmats2[7][25] + coeff0_8*dmats2[8][25] + coeff0_9*dmats2[9][25] + coeff0_10*dmats2[10][25] + coeff0_11*dmats2[11][25] + coeff0_12*dmats2[12][25] + coeff0_13*dmats2[13][25] + coeff0_14*dmats2[14][25] + coeff0_15*dmats2[15][25] + coeff0_16*dmats2[16][25] + coeff0_17*dmats2[17][25] + coeff0_18*dmats2[18][25] + coeff0_19*dmats2[19][25] + coeff0_20*dmats2[20][25] + coeff0_21*dmats2[21][25] + coeff0_22*dmats2[22][25] + coeff0_23*dmats2[23][25] + coeff0_24*dmats2[24][25] + coeff0_25*dmats2[25][25] + coeff0_26*dmats2[26][25] + coeff0_27*dmats2[27][25] + coeff0_28*dmats2[28][25] + coeff0_29*dmats2[29][25] + coeff0_30*dmats2[30][25] + coeff0_31*dmats2[31][25] + coeff0_32*dmats2[32][25] + coeff0_33*dmats2[33][25] + coeff0_34*dmats2[34][25];
          new_coeff0_26 = coeff0_0*dmats2[0][26] + coeff0_1*dmats2[1][26] + coeff0_2*dmats2[2][26] + coeff0_3*dmats2[3][26] + coeff0_4*dmats2[4][26] + coeff0_5*dmats2[5][26] + coeff0_6*dmats2[6][26] + coeff0_7*dmats2[7][26] + coeff0_8*dmats2[8][26] + coeff0_9*dmats2[9][26] + coeff0_10*dmats2[10][26] + coeff0_11*dmats2[11][26] + coeff0_12*dmats2[12][26] + coeff0_13*dmats2[13][26] + coeff0_14*dmats2[14][26] + coeff0_15*dmats2[15][26] + coeff0_16*dmats2[16][26] + coeff0_17*dmats2[17][26] + coeff0_18*dmats2[18][26] + coeff0_19*dmats2[19][26] + coeff0_20*dmats2[20][26] + coeff0_21*dmats2[21][26] + coeff0_22*dmats2[22][26] + coeff0_23*dmats2[23][26] + coeff0_24*dmats2[24][26] + coeff0_25*dmats2[25][26] + coeff0_26*dmats2[26][26] + coeff0_27*dmats2[27][26] + coeff0_28*dmats2[28][26] + coeff0_29*dmats2[29][26] + coeff0_30*dmats2[30][26] + coeff0_31*dmats2[31][26] + coeff0_32*dmats2[32][26] + coeff0_33*dmats2[33][26] + coeff0_34*dmats2[34][26];
          new_coeff0_27 = coeff0_0*dmats2[0][27] + coeff0_1*dmats2[1][27] + coeff0_2*dmats2[2][27] + coeff0_3*dmats2[3][27] + coeff0_4*dmats2[4][27] + coeff0_5*dmats2[5][27] + coeff0_6*dmats2[6][27] + coeff0_7*dmats2[7][27] + coeff0_8*dmats2[8][27] + coeff0_9*dmats2[9][27] + coeff0_10*dmats2[10][27] + coeff0_11*dmats2[11][27] + coeff0_12*dmats2[12][27] + coeff0_13*dmats2[13][27] + coeff0_14*dmats2[14][27] + coeff0_15*dmats2[15][27] + coeff0_16*dmats2[16][27] + coeff0_17*dmats2[17][27] + coeff0_18*dmats2[18][27] + coeff0_19*dmats2[19][27] + coeff0_20*dmats2[20][27] + coeff0_21*dmats2[21][27] + coeff0_22*dmats2[22][27] + coeff0_23*dmats2[23][27] + coeff0_24*dmats2[24][27] + coeff0_25*dmats2[25][27] + coeff0_26*dmats2[26][27] + coeff0_27*dmats2[27][27] + coeff0_28*dmats2[28][27] + coeff0_29*dmats2[29][27] + coeff0_30*dmats2[30][27] + coeff0_31*dmats2[31][27] + coeff0_32*dmats2[32][27] + coeff0_33*dmats2[33][27] + coeff0_34*dmats2[34][27];
          new_coeff0_28 = coeff0_0*dmats2[0][28] + coeff0_1*dmats2[1][28] + coeff0_2*dmats2[2][28] + coeff0_3*dmats2[3][28] + coeff0_4*dmats2[4][28] + coeff0_5*dmats2[5][28] + coeff0_6*dmats2[6][28] + coeff0_7*dmats2[7][28] + coeff0_8*dmats2[8][28] + coeff0_9*dmats2[9][28] + coeff0_10*dmats2[10][28] + coeff0_11*dmats2[11][28] + coeff0_12*dmats2[12][28] + coeff0_13*dmats2[13][28] + coeff0_14*dmats2[14][28] + coeff0_15*dmats2[15][28] + coeff0_16*dmats2[16][28] + coeff0_17*dmats2[17][28] + coeff0_18*dmats2[18][28] + coeff0_19*dmats2[19][28] + coeff0_20*dmats2[20][28] + coeff0_21*dmats2[21][28] + coeff0_22*dmats2[22][28] + coeff0_23*dmats2[23][28] + coeff0_24*dmats2[24][28] + coeff0_25*dmats2[25][28] + coeff0_26*dmats2[26][28] + coeff0_27*dmats2[27][28] + coeff0_28*dmats2[28][28] + coeff0_29*dmats2[29][28] + coeff0_30*dmats2[30][28] + coeff0_31*dmats2[31][28] + coeff0_32*dmats2[32][28] + coeff0_33*dmats2[33][28] + coeff0_34*dmats2[34][28];
          new_coeff0_29 = coeff0_0*dmats2[0][29] + coeff0_1*dmats2[1][29] + coeff0_2*dmats2[2][29] + coeff0_3*dmats2[3][29] + coeff0_4*dmats2[4][29] + coeff0_5*dmats2[5][29] + coeff0_6*dmats2[6][29] + coeff0_7*dmats2[7][29] + coeff0_8*dmats2[8][29] + coeff0_9*dmats2[9][29] + coeff0_10*dmats2[10][29] + coeff0_11*dmats2[11][29] + coeff0_12*dmats2[12][29] + coeff0_13*dmats2[13][29] + coeff0_14*dmats2[14][29] + coeff0_15*dmats2[15][29] + coeff0_16*dmats2[16][29] + coeff0_17*dmats2[17][29] + coeff0_18*dmats2[18][29] + coeff0_19*dmats2[19][29] + coeff0_20*dmats2[20][29] + coeff0_21*dmats2[21][29] + coeff0_22*dmats2[22][29] + coeff0_23*dmats2[23][29] + coeff0_24*dmats2[24][29] + coeff0_25*dmats2[25][29] + coeff0_26*dmats2[26][29] + coeff0_27*dmats2[27][29] + coeff0_28*dmats2[28][29] + coeff0_29*dmats2[29][29] + coeff0_30*dmats2[30][29] + coeff0_31*dmats2[31][29] + coeff0_32*dmats2[32][29] + coeff0_33*dmats2[33][29] + coeff0_34*dmats2[34][29];
          new_coeff0_30 = coeff0_0*dmats2[0][30] + coeff0_1*dmats2[1][30] + coeff0_2*dmats2[2][30] + coeff0_3*dmats2[3][30] + coeff0_4*dmats2[4][30] + coeff0_5*dmats2[5][30] + coeff0_6*dmats2[6][30] + coeff0_7*dmats2[7][30] + coeff0_8*dmats2[8][30] + coeff0_9*dmats2[9][30] + coeff0_10*dmats2[10][30] + coeff0_11*dmats2[11][30] + coeff0_12*dmats2[12][30] + coeff0_13*dmats2[13][30] + coeff0_14*dmats2[14][30] + coeff0_15*dmats2[15][30] + coeff0_16*dmats2[16][30] + coeff0_17*dmats2[17][30] + coeff0_18*dmats2[18][30] + coeff0_19*dmats2[19][30] + coeff0_20*dmats2[20][30] + coeff0_21*dmats2[21][30] + coeff0_22*dmats2[22][30] + coeff0_23*dmats2[23][30] + coeff0_24*dmats2[24][30] + coeff0_25*dmats2[25][30] + coeff0_26*dmats2[26][30] + coeff0_27*dmats2[27][30] + coeff0_28*dmats2[28][30] + coeff0_29*dmats2[29][30] + coeff0_30*dmats2[30][30] + coeff0_31*dmats2[31][30] + coeff0_32*dmats2[32][30] + coeff0_33*dmats2[33][30] + coeff0_34*dmats2[34][30];
          new_coeff0_31 = coeff0_0*dmats2[0][31] + coeff0_1*dmats2[1][31] + coeff0_2*dmats2[2][31] + coeff0_3*dmats2[3][31] + coeff0_4*dmats2[4][31] + coeff0_5*dmats2[5][31] + coeff0_6*dmats2[6][31] + coeff0_7*dmats2[7][31] + coeff0_8*dmats2[8][31] + coeff0_9*dmats2[9][31] + coeff0_10*dmats2[10][31] + coeff0_11*dmats2[11][31] + coeff0_12*dmats2[12][31] + coeff0_13*dmats2[13][31] + coeff0_14*dmats2[14][31] + coeff0_15*dmats2[15][31] + coeff0_16*dmats2[16][31] + coeff0_17*dmats2[17][31] + coeff0_18*dmats2[18][31] + coeff0_19*dmats2[19][31] + coeff0_20*dmats2[20][31] + coeff0_21*dmats2[21][31] + coeff0_22*dmats2[22][31] + coeff0_23*dmats2[23][31] + coeff0_24*dmats2[24][31] + coeff0_25*dmats2[25][31] + coeff0_26*dmats2[26][31] + coeff0_27*dmats2[27][31] + coeff0_28*dmats2[28][31] + coeff0_29*dmats2[29][31] + coeff0_30*dmats2[30][31] + coeff0_31*dmats2[31][31] + coeff0_32*dmats2[32][31] + coeff0_33*dmats2[33][31] + coeff0_34*dmats2[34][31];
          new_coeff0_32 = coeff0_0*dmats2[0][32] + coeff0_1*dmats2[1][32] + coeff0_2*dmats2[2][32] + coeff0_3*dmats2[3][32] + coeff0_4*dmats2[4][32] + coeff0_5*dmats2[5][32] + coeff0_6*dmats2[6][32] + coeff0_7*dmats2[7][32] + coeff0_8*dmats2[8][32] + coeff0_9*dmats2[9][32] + coeff0_10*dmats2[10][32] + coeff0_11*dmats2[11][32] + coeff0_12*dmats2[12][32] + coeff0_13*dmats2[13][32] + coeff0_14*dmats2[14][32] + coeff0_15*dmats2[15][32] + coeff0_16*dmats2[16][32] + coeff0_17*dmats2[17][32] + coeff0_18*dmats2[18][32] + coeff0_19*dmats2[19][32] + coeff0_20*dmats2[20][32] + coeff0_21*dmats2[21][32] + coeff0_22*dmats2[22][32] + coeff0_23*dmats2[23][32] + coeff0_24*dmats2[24][32] + coeff0_25*dmats2[25][32] + coeff0_26*dmats2[26][32] + coeff0_27*dmats2[27][32] + coeff0_28*dmats2[28][32] + coeff0_29*dmats2[29][32] + coeff0_30*dmats2[30][32] + coeff0_31*dmats2[31][32] + coeff0_32*dmats2[32][32] + coeff0_33*dmats2[33][32] + coeff0_34*dmats2[34][32];
          new_coeff0_33 = coeff0_0*dmats2[0][33] + coeff0_1*dmats2[1][33] + coeff0_2*dmats2[2][33] + coeff0_3*dmats2[3][33] + coeff0_4*dmats2[4][33] + coeff0_5*dmats2[5][33] + coeff0_6*dmats2[6][33] + coeff0_7*dmats2[7][33] + coeff0_8*dmats2[8][33] + coeff0_9*dmats2[9][33] + coeff0_10*dmats2[10][33] + coeff0_11*dmats2[11][33] + coeff0_12*dmats2[12][33] + coeff0_13*dmats2[13][33] + coeff0_14*dmats2[14][33] + coeff0_15*dmats2[15][33] + coeff0_16*dmats2[16][33] + coeff0_17*dmats2[17][33] + coeff0_18*dmats2[18][33] + coeff0_19*dmats2[19][33] + coeff0_20*dmats2[20][33] + coeff0_21*dmats2[21][33] + coeff0_22*dmats2[22][33] + coeff0_23*dmats2[23][33] + coeff0_24*dmats2[24][33] + coeff0_25*dmats2[25][33] + coeff0_26*dmats2[26][33] + coeff0_27*dmats2[27][33] + coeff0_28*dmats2[28][33] + coeff0_29*dmats2[29][33] + coeff0_30*dmats2[30][33] + coeff0_31*dmats2[31][33] + coeff0_32*dmats2[32][33] + coeff0_33*dmats2[33][33] + coeff0_34*dmats2[34][33];
          new_coeff0_34 = coeff0_0*dmats2[0][34] + coeff0_1*dmats2[1][34] + coeff0_2*dmats2[2][34] + coeff0_3*dmats2[3][34] + coeff0_4*dmats2[4][34] + coeff0_5*dmats2[5][34] + coeff0_6*dmats2[6][34] + coeff0_7*dmats2[7][34] + coeff0_8*dmats2[8][34] + coeff0_9*dmats2[9][34] + coeff0_10*dmats2[10][34] + coeff0_11*dmats2[11][34] + coeff0_12*dmats2[12][34] + coeff0_13*dmats2[13][34] + coeff0_14*dmats2[14][34] + coeff0_15*dmats2[15][34] + coeff0_16*dmats2[16][34] + coeff0_17*dmats2[17][34] + coeff0_18*dmats2[18][34] + coeff0_19*dmats2[19][34] + coeff0_20*dmats2[20][34] + coeff0_21*dmats2[21][34] + coeff0_22*dmats2[22][34] + coeff0_23*dmats2[23][34] + coeff0_24*dmats2[24][34] + coeff0_25*dmats2[25][34] + coeff0_26*dmats2[26][34] + coeff0_27*dmats2[27][34] + coeff0_28*dmats2[28][34] + coeff0_29*dmats2[29][34] + coeff0_30*dmats2[30][34] + coeff0_31*dmats2[31][34] + coeff0_32*dmats2[32][34] + coeff0_33*dmats2[33][34] + coeff0_34*dmats2[34][34];
        }
    
      }
      // Compute derivatives on reference element as dot product of coefficients and basisvalues
      derivatives[deriv_num] = new_coeff0_0*basisvalue0 + new_coeff0_1*basisvalue1 + new_coeff0_2*basisvalue2 + new_coeff0_3*basisvalue3 + new_coeff0_4*basisvalue4 + new_coeff0_5*basisvalue5 + new_coeff0_6*basisvalue6 + new_coeff0_7*basisvalue7 + new_coeff0_8*basisvalue8 + new_coeff0_9*basisvalue9 + new_coeff0_10*basisvalue10 + new_coeff0_11*basisvalue11 + new_coeff0_12*basisvalue12 + new_coeff0_13*basisvalue13 + new_coeff0_14*basisvalue14 + new_coeff0_15*basisvalue15 + new_coeff0_16*basisvalue16 + new_coeff0_17*basisvalue17 + new_coeff0_18*basisvalue18 + new_coeff0_19*basisvalue19 + new_coeff0_20*basisvalue20 + new_coeff0_21*basisvalue21 + new_coeff0_22*basisvalue22 + new_coeff0_23*basisvalue23 + new_coeff0_24*basisvalue24 + new_coeff0_25*basisvalue25 + new_coeff0_26*basisvalue26 + new_coeff0_27*basisvalue27 + new_coeff0_28*basisvalue28 + new_coeff0_29*basisvalue29 + new_coeff0_30*basisvalue30 + new_coeff0_31*basisvalue31 + new_coeff0_32*basisvalue32 + new_coeff0_33*basisvalue33 + new_coeff0_34*basisvalue34;
    }
    
    // Transform derivatives back to physical element
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        values[row] += transform[row][col]*derivatives[col];
      }
    }
    // Delete pointer to array of derivatives on FIAT element
    delete [] derivatives;
    
    // Delete pointer to array of combinations of derivatives and transform
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      delete [] combinations[row];
      delete [] transform[row];
    }
    
    delete [] combinations;
    delete [] transform;
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis_derivatives() is not yet implemented.");
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // The reference points, direction and weights:
    static const double X[35][1][3] = {{{0, 0, 0}}, {{1, 0, 0}}, {{0, 1, 0}}, {{0, 0, 1}}, {{0, 0.75, 0.25}}, {{0, 0.5, 0.5}}, {{0, 0.25, 0.75}}, {{0.75, 0, 0.25}}, {{0.5, 0, 0.5}}, {{0.25, 0, 0.75}}, {{0.75, 0.25, 0}}, {{0.5, 0.5, 0}}, {{0.25, 0.75, 0}}, {{0, 0, 0.25}}, {{0, 0, 0.5}}, {{0, 0, 0.75}}, {{0, 0.25, 0}}, {{0, 0.5, 0}}, {{0, 0.75, 0}}, {{0.25, 0, 0}}, {{0.5, 0, 0}}, {{0.75, 0, 0}}, {{0.5, 0.25, 0.25}}, {{0.25, 0.5, 0.25}}, {{0.25, 0.25, 0.5}}, {{0, 0.25, 0.25}}, {{0, 0.5, 0.25}}, {{0, 0.25, 0.5}}, {{0.25, 0, 0.25}}, {{0.5, 0, 0.25}}, {{0.25, 0, 0.5}}, {{0.25, 0.25, 0}}, {{0.5, 0.25, 0}}, {{0.25, 0.5, 0}}, {{0.25, 0.25, 0.25}}};
    static const double W[35][1] = {{1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}};
    static const double D[35][1][1] = {{{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}};
    
    const double * const * x = c.coordinates;
    double result = 0.0;
    // Iterate over the points:
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0][0] - X[i][0][1] - X[i][0][2];
    const double w1 = X[i][0][0];
    const double w2 = X[i][0][1];
    const double w3 = X[i][0][2];
    
    // Compute affine mapping y = F(X)
    double y[3];
    y[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0] + w3*x[3][0];
    y[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1] + w3*x[3][1];
    y[2] = w0*x[0][2] + w1*x[1][2] + w2*x[2][2] + w3*x[3][2];
    
    // Evaluate function at physical points
    double values[1];
    f.evaluate(values, y, c);
    
    // Map function values using appropriate mapping
    // Affine map: Do nothing
    
    // Note that we do not map the weights (yet).
    
    // Take directional components
    for(int k = 0; k < 1; k++)
      result += values[k]*D[i][0][k];
    // Multiply by weights
    result *= W[i][0];
    
    return result;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate at vertices and use affine mapping
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new poisson3d_4_1_finite_element_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class poisson3d_4_1_dof_map_0: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  poisson3d_4_1_dof_map_0() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~poisson3d_4_1_dof_map_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for FiniteElement('Lagrange', 'tetrahedron', 4)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return true;
      break;
    case 2:
      return true;
      break;
    case 3:
      return true;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = m.num_entities[0] + 3*m.num_entities[1] + 3*m.num_entities[2] + m.num_entities[3];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 35;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 35;
  }

  // Return the geometric dimension of the coordinates this dof map provides
  virtual unsigned int geometric_dimension() const
  {
    return 3;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 15;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    dofs[3] = c.entity_indices[0][3];
    unsigned int offset = m.num_entities[0];
    dofs[4] = offset + 3*c.entity_indices[1][0];
    dofs[5] = offset + 3*c.entity_indices[1][0] + 1;
    dofs[6] = offset + 3*c.entity_indices[1][0] + 2;
    dofs[7] = offset + 3*c.entity_indices[1][1];
    dofs[8] = offset + 3*c.entity_indices[1][1] + 1;
    dofs[9] = offset + 3*c.entity_indices[1][1] + 2;
    dofs[10] = offset + 3*c.entity_indices[1][2];
    dofs[11] = offset + 3*c.entity_indices[1][2] + 1;
    dofs[12] = offset + 3*c.entity_indices[1][2] + 2;
    dofs[13] = offset + 3*c.entity_indices[1][3];
    dofs[14] = offset + 3*c.entity_indices[1][3] + 1;
    dofs[15] = offset + 3*c.entity_indices[1][3] + 2;
    dofs[16] = offset + 3*c.entity_indices[1][4];
    dofs[17] = offset + 3*c.entity_indices[1][4] + 1;
    dofs[18] = offset + 3*c.entity_indices[1][4] + 2;
    dofs[19] = offset + 3*c.entity_indices[1][5];
    dofs[20] = offset + 3*c.entity_indices[1][5] + 1;
    dofs[21] = offset + 3*c.entity_indices[1][5] + 2;
    offset = offset + 3*m.num_entities[1];
    dofs[22] = offset + 3*c.entity_indices[2][0];
    dofs[23] = offset + 3*c.entity_indices[2][0] + 1;
    dofs[24] = offset + 3*c.entity_indices[2][0] + 2;
    dofs[25] = offset + 3*c.entity_indices[2][1];
    dofs[26] = offset + 3*c.entity_indices[2][1] + 1;
    dofs[27] = offset + 3*c.entity_indices[2][1] + 2;
    dofs[28] = offset + 3*c.entity_indices[2][2];
    dofs[29] = offset + 3*c.entity_indices[2][2] + 1;
    dofs[30] = offset + 3*c.entity_indices[2][2] + 2;
    dofs[31] = offset + 3*c.entity_indices[2][3];
    dofs[32] = offset + 3*c.entity_indices[2][3] + 1;
    dofs[33] = offset + 3*c.entity_indices[2][3] + 2;
    offset = offset + 3*m.num_entities[2];
    dofs[34] = offset + c.entity_indices[3][0];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 7;
      dofs[7] = 8;
      dofs[8] = 9;
      dofs[9] = 10;
      dofs[10] = 11;
      dofs[11] = 12;
      dofs[12] = 22;
      dofs[13] = 23;
      dofs[14] = 24;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 13;
      dofs[7] = 14;
      dofs[8] = 15;
      dofs[9] = 16;
      dofs[10] = 17;
      dofs[11] = 18;
      dofs[12] = 25;
      dofs[13] = 26;
      dofs[14] = 27;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 7;
      dofs[4] = 8;
      dofs[5] = 9;
      dofs[6] = 13;
      dofs[7] = 14;
      dofs[8] = 15;
      dofs[9] = 19;
      dofs[10] = 20;
      dofs[11] = 21;
      dofs[12] = 28;
      dofs[13] = 29;
      dofs[14] = 30;
      break;
    case 3:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 10;
      dofs[4] = 11;
      dofs[5] = 12;
      dofs[6] = 16;
      dofs[7] = 17;
      dofs[8] = 18;
      dofs[9] = 19;
      dofs[10] = 20;
      dofs[11] = 21;
      dofs[12] = 31;
      dofs[13] = 32;
      dofs[14] = 33;
      break;
    }
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[0][2] = x[0][2];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[1][2] = x[1][2];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[2][2] = x[2][2];
    coordinates[3][0] = x[3][0];
    coordinates[3][1] = x[3][1];
    coordinates[3][2] = x[3][2];
    coordinates[4][0] = 0.75*x[2][0] + 0.25*x[3][0];
    coordinates[4][1] = 0.75*x[2][1] + 0.25*x[3][1];
    coordinates[4][2] = 0.75*x[2][2] + 0.25*x[3][2];
    coordinates[5][0] = 0.5*x[2][0] + 0.5*x[3][0];
    coordinates[5][1] = 0.5*x[2][1] + 0.5*x[3][1];
    coordinates[5][2] = 0.5*x[2][2] + 0.5*x[3][2];
    coordinates[6][0] = 0.25*x[2][0] + 0.75*x[3][0];
    coordinates[6][1] = 0.25*x[2][1] + 0.75*x[3][1];
    coordinates[6][2] = 0.25*x[2][2] + 0.75*x[3][2];
    coordinates[7][0] = 0.75*x[1][0] + 0.25*x[3][0];
    coordinates[7][1] = 0.75*x[1][1] + 0.25*x[3][1];
    coordinates[7][2] = 0.75*x[1][2] + 0.25*x[3][2];
    coordinates[8][0] = 0.5*x[1][0] + 0.5*x[3][0];
    coordinates[8][1] = 0.5*x[1][1] + 0.5*x[3][1];
    coordinates[8][2] = 0.5*x[1][2] + 0.5*x[3][2];
    coordinates[9][0] = 0.25*x[1][0] + 0.75*x[3][0];
    coordinates[9][1] = 0.25*x[1][1] + 0.75*x[3][1];
    coordinates[9][2] = 0.25*x[1][2] + 0.75*x[3][2];
    coordinates[10][0] = 0.75*x[1][0] + 0.25*x[2][0];
    coordinates[10][1] = 0.75*x[1][1] + 0.25*x[2][1];
    coordinates[10][2] = 0.75*x[1][2] + 0.25*x[2][2];
    coordinates[11][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[11][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[11][2] = 0.5*x[1][2] + 0.5*x[2][2];
    coordinates[12][0] = 0.25*x[1][0] + 0.75*x[2][0];
    coordinates[12][1] = 0.25*x[1][1] + 0.75*x[2][1];
    coordinates[12][2] = 0.25*x[1][2] + 0.75*x[2][2];
    coordinates[13][0] = 0.75*x[0][0] + 0.25*x[3][0];
    coordinates[13][1] = 0.75*x[0][1] + 0.25*x[3][1];
    coordinates[13][2] = 0.75*x[0][2] + 0.25*x[3][2];
    coordinates[14][0] = 0.5*x[0][0] + 0.5*x[3][0];
    coordinates[14][1] = 0.5*x[0][1] + 0.5*x[3][1];
    coordinates[14][2] = 0.5*x[0][2] + 0.5*x[3][2];
    coordinates[15][0] = 0.25*x[0][0] + 0.75*x[3][0];
    coordinates[15][1] = 0.25*x[0][1] + 0.75*x[3][1];
    coordinates[15][2] = 0.25*x[0][2] + 0.75*x[3][2];
    coordinates[16][0] = 0.75*x[0][0] + 0.25*x[2][0];
    coordinates[16][1] = 0.75*x[0][1] + 0.25*x[2][1];
    coordinates[16][2] = 0.75*x[0][2] + 0.25*x[2][2];
    coordinates[17][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[17][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[17][2] = 0.5*x[0][2] + 0.5*x[2][2];
    coordinates[18][0] = 0.25*x[0][0] + 0.75*x[2][0];
    coordinates[18][1] = 0.25*x[0][1] + 0.75*x[2][1];
    coordinates[18][2] = 0.25*x[0][2] + 0.75*x[2][2];
    coordinates[19][0] = 0.75*x[0][0] + 0.25*x[1][0];
    coordinates[19][1] = 0.75*x[0][1] + 0.25*x[1][1];
    coordinates[19][2] = 0.75*x[0][2] + 0.25*x[1][2];
    coordinates[20][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[20][1] = 0.5*x[0][1] + 0.5*x[1][1];
    coordinates[20][2] = 0.5*x[0][2] + 0.5*x[1][2];
    coordinates[21][0] = 0.25*x[0][0] + 0.75*x[1][0];
    coordinates[21][1] = 0.25*x[0][1] + 0.75*x[1][1];
    coordinates[21][2] = 0.25*x[0][2] + 0.75*x[1][2];
    coordinates[22][0] = 0.5*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[22][1] = 0.5*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[22][2] = 0.5*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
    coordinates[23][0] = 0.25*x[1][0] + 0.5*x[2][0] + 0.25*x[3][0];
    coordinates[23][1] = 0.25*x[1][1] + 0.5*x[2][1] + 0.25*x[3][1];
    coordinates[23][2] = 0.25*x[1][2] + 0.5*x[2][2] + 0.25*x[3][2];
    coordinates[24][0] = 0.25*x[1][0] + 0.25*x[2][0] + 0.5*x[3][0];
    coordinates[24][1] = 0.25*x[1][1] + 0.25*x[2][1] + 0.5*x[3][1];
    coordinates[24][2] = 0.25*x[1][2] + 0.25*x[2][2] + 0.5*x[3][2];
    coordinates[25][0] = 0.5*x[0][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[25][1] = 0.5*x[0][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[25][2] = 0.5*x[0][2] + 0.25*x[2][2] + 0.25*x[3][2];
    coordinates[26][0] = 0.25*x[0][0] + 0.5*x[2][0] + 0.25*x[3][0];
    coordinates[26][1] = 0.25*x[0][1] + 0.5*x[2][1] + 0.25*x[3][1];
    coordinates[26][2] = 0.25*x[0][2] + 0.5*x[2][2] + 0.25*x[3][2];
    coordinates[27][0] = 0.25*x[0][0] + 0.25*x[2][0] + 0.5*x[3][0];
    coordinates[27][1] = 0.25*x[0][1] + 0.25*x[2][1] + 0.5*x[3][1];
    coordinates[27][2] = 0.25*x[0][2] + 0.25*x[2][2] + 0.5*x[3][2];
    coordinates[28][0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[3][0];
    coordinates[28][1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[3][1];
    coordinates[28][2] = 0.5*x[0][2] + 0.25*x[1][2] + 0.25*x[3][2];
    coordinates[29][0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[3][0];
    coordinates[29][1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[3][1];
    coordinates[29][2] = 0.25*x[0][2] + 0.5*x[1][2] + 0.25*x[3][2];
    coordinates[30][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[3][0];
    coordinates[30][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[3][1];
    coordinates[30][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.5*x[3][2];
    coordinates[31][0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0];
    coordinates[31][1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1];
    coordinates[31][2] = 0.5*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2];
    coordinates[32][0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[2][0];
    coordinates[32][1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[2][1];
    coordinates[32][2] = 0.25*x[0][2] + 0.5*x[1][2] + 0.25*x[2][2];
    coordinates[33][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[2][0];
    coordinates[33][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[2][1];
    coordinates[33][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.5*x[2][2];
    coordinates[34][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[34][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[34][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new poisson3d_4_1_dof_map_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class poisson3d_4_1_dof_map_1: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  poisson3d_4_1_dof_map_1() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~poisson3d_4_1_dof_map_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for FiniteElement('Lagrange', 'tetrahedron', 4)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return true;
      break;
    case 2:
      return true;
      break;
    case 3:
      return true;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = m.num_entities[0] + 3*m.num_entities[1] + 3*m.num_entities[2] + m.num_entities[3];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 35;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 35;
  }

  // Return the geometric dimension of the coordinates this dof map provides
  virtual unsigned int geometric_dimension() const
  {
    return 3;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 15;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    dofs[3] = c.entity_indices[0][3];
    unsigned int offset = m.num_entities[0];
    dofs[4] = offset + 3*c.entity_indices[1][0];
    dofs[5] = offset + 3*c.entity_indices[1][0] + 1;
    dofs[6] = offset + 3*c.entity_indices[1][0] + 2;
    dofs[7] = offset + 3*c.entity_indices[1][1];
    dofs[8] = offset + 3*c.entity_indices[1][1] + 1;
    dofs[9] = offset + 3*c.entity_indices[1][1] + 2;
    dofs[10] = offset + 3*c.entity_indices[1][2];
    dofs[11] = offset + 3*c.entity_indices[1][2] + 1;
    dofs[12] = offset + 3*c.entity_indices[1][2] + 2;
    dofs[13] = offset + 3*c.entity_indices[1][3];
    dofs[14] = offset + 3*c.entity_indices[1][3] + 1;
    dofs[15] = offset + 3*c.entity_indices[1][3] + 2;
    dofs[16] = offset + 3*c.entity_indices[1][4];
    dofs[17] = offset + 3*c.entity_indices[1][4] + 1;
    dofs[18] = offset + 3*c.entity_indices[1][4] + 2;
    dofs[19] = offset + 3*c.entity_indices[1][5];
    dofs[20] = offset + 3*c.entity_indices[1][5] + 1;
    dofs[21] = offset + 3*c.entity_indices[1][5] + 2;
    offset = offset + 3*m.num_entities[1];
    dofs[22] = offset + 3*c.entity_indices[2][0];
    dofs[23] = offset + 3*c.entity_indices[2][0] + 1;
    dofs[24] = offset + 3*c.entity_indices[2][0] + 2;
    dofs[25] = offset + 3*c.entity_indices[2][1];
    dofs[26] = offset + 3*c.entity_indices[2][1] + 1;
    dofs[27] = offset + 3*c.entity_indices[2][1] + 2;
    dofs[28] = offset + 3*c.entity_indices[2][2];
    dofs[29] = offset + 3*c.entity_indices[2][2] + 1;
    dofs[30] = offset + 3*c.entity_indices[2][2] + 2;
    dofs[31] = offset + 3*c.entity_indices[2][3];
    dofs[32] = offset + 3*c.entity_indices[2][3] + 1;
    dofs[33] = offset + 3*c.entity_indices[2][3] + 2;
    offset = offset + 3*m.num_entities[2];
    dofs[34] = offset + c.entity_indices[3][0];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 7;
      dofs[7] = 8;
      dofs[8] = 9;
      dofs[9] = 10;
      dofs[10] = 11;
      dofs[11] = 12;
      dofs[12] = 22;
      dofs[13] = 23;
      dofs[14] = 24;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 13;
      dofs[7] = 14;
      dofs[8] = 15;
      dofs[9] = 16;
      dofs[10] = 17;
      dofs[11] = 18;
      dofs[12] = 25;
      dofs[13] = 26;
      dofs[14] = 27;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 7;
      dofs[4] = 8;
      dofs[5] = 9;
      dofs[6] = 13;
      dofs[7] = 14;
      dofs[8] = 15;
      dofs[9] = 19;
      dofs[10] = 20;
      dofs[11] = 21;
      dofs[12] = 28;
      dofs[13] = 29;
      dofs[14] = 30;
      break;
    case 3:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 10;
      dofs[4] = 11;
      dofs[5] = 12;
      dofs[6] = 16;
      dofs[7] = 17;
      dofs[8] = 18;
      dofs[9] = 19;
      dofs[10] = 20;
      dofs[11] = 21;
      dofs[12] = 31;
      dofs[13] = 32;
      dofs[14] = 33;
      break;
    }
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[0][2] = x[0][2];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[1][2] = x[1][2];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[2][2] = x[2][2];
    coordinates[3][0] = x[3][0];
    coordinates[3][1] = x[3][1];
    coordinates[3][2] = x[3][2];
    coordinates[4][0] = 0.75*x[2][0] + 0.25*x[3][0];
    coordinates[4][1] = 0.75*x[2][1] + 0.25*x[3][1];
    coordinates[4][2] = 0.75*x[2][2] + 0.25*x[3][2];
    coordinates[5][0] = 0.5*x[2][0] + 0.5*x[3][0];
    coordinates[5][1] = 0.5*x[2][1] + 0.5*x[3][1];
    coordinates[5][2] = 0.5*x[2][2] + 0.5*x[3][2];
    coordinates[6][0] = 0.25*x[2][0] + 0.75*x[3][0];
    coordinates[6][1] = 0.25*x[2][1] + 0.75*x[3][1];
    coordinates[6][2] = 0.25*x[2][2] + 0.75*x[3][2];
    coordinates[7][0] = 0.75*x[1][0] + 0.25*x[3][0];
    coordinates[7][1] = 0.75*x[1][1] + 0.25*x[3][1];
    coordinates[7][2] = 0.75*x[1][2] + 0.25*x[3][2];
    coordinates[8][0] = 0.5*x[1][0] + 0.5*x[3][0];
    coordinates[8][1] = 0.5*x[1][1] + 0.5*x[3][1];
    coordinates[8][2] = 0.5*x[1][2] + 0.5*x[3][2];
    coordinates[9][0] = 0.25*x[1][0] + 0.75*x[3][0];
    coordinates[9][1] = 0.25*x[1][1] + 0.75*x[3][1];
    coordinates[9][2] = 0.25*x[1][2] + 0.75*x[3][2];
    coordinates[10][0] = 0.75*x[1][0] + 0.25*x[2][0];
    coordinates[10][1] = 0.75*x[1][1] + 0.25*x[2][1];
    coordinates[10][2] = 0.75*x[1][2] + 0.25*x[2][2];
    coordinates[11][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[11][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[11][2] = 0.5*x[1][2] + 0.5*x[2][2];
    coordinates[12][0] = 0.25*x[1][0] + 0.75*x[2][0];
    coordinates[12][1] = 0.25*x[1][1] + 0.75*x[2][1];
    coordinates[12][2] = 0.25*x[1][2] + 0.75*x[2][2];
    coordinates[13][0] = 0.75*x[0][0] + 0.25*x[3][0];
    coordinates[13][1] = 0.75*x[0][1] + 0.25*x[3][1];
    coordinates[13][2] = 0.75*x[0][2] + 0.25*x[3][2];
    coordinates[14][0] = 0.5*x[0][0] + 0.5*x[3][0];
    coordinates[14][1] = 0.5*x[0][1] + 0.5*x[3][1];
    coordinates[14][2] = 0.5*x[0][2] + 0.5*x[3][2];
    coordinates[15][0] = 0.25*x[0][0] + 0.75*x[3][0];
    coordinates[15][1] = 0.25*x[0][1] + 0.75*x[3][1];
    coordinates[15][2] = 0.25*x[0][2] + 0.75*x[3][2];
    coordinates[16][0] = 0.75*x[0][0] + 0.25*x[2][0];
    coordinates[16][1] = 0.75*x[0][1] + 0.25*x[2][1];
    coordinates[16][2] = 0.75*x[0][2] + 0.25*x[2][2];
    coordinates[17][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[17][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[17][2] = 0.5*x[0][2] + 0.5*x[2][2];
    coordinates[18][0] = 0.25*x[0][0] + 0.75*x[2][0];
    coordinates[18][1] = 0.25*x[0][1] + 0.75*x[2][1];
    coordinates[18][2] = 0.25*x[0][2] + 0.75*x[2][2];
    coordinates[19][0] = 0.75*x[0][0] + 0.25*x[1][0];
    coordinates[19][1] = 0.75*x[0][1] + 0.25*x[1][1];
    coordinates[19][2] = 0.75*x[0][2] + 0.25*x[1][2];
    coordinates[20][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[20][1] = 0.5*x[0][1] + 0.5*x[1][1];
    coordinates[20][2] = 0.5*x[0][2] + 0.5*x[1][2];
    coordinates[21][0] = 0.25*x[0][0] + 0.75*x[1][0];
    coordinates[21][1] = 0.25*x[0][1] + 0.75*x[1][1];
    coordinates[21][2] = 0.25*x[0][2] + 0.75*x[1][2];
    coordinates[22][0] = 0.5*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[22][1] = 0.5*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[22][2] = 0.5*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
    coordinates[23][0] = 0.25*x[1][0] + 0.5*x[2][0] + 0.25*x[3][0];
    coordinates[23][1] = 0.25*x[1][1] + 0.5*x[2][1] + 0.25*x[3][1];
    coordinates[23][2] = 0.25*x[1][2] + 0.5*x[2][2] + 0.25*x[3][2];
    coordinates[24][0] = 0.25*x[1][0] + 0.25*x[2][0] + 0.5*x[3][0];
    coordinates[24][1] = 0.25*x[1][1] + 0.25*x[2][1] + 0.5*x[3][1];
    coordinates[24][2] = 0.25*x[1][2] + 0.25*x[2][2] + 0.5*x[3][2];
    coordinates[25][0] = 0.5*x[0][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[25][1] = 0.5*x[0][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[25][2] = 0.5*x[0][2] + 0.25*x[2][2] + 0.25*x[3][2];
    coordinates[26][0] = 0.25*x[0][0] + 0.5*x[2][0] + 0.25*x[3][0];
    coordinates[26][1] = 0.25*x[0][1] + 0.5*x[2][1] + 0.25*x[3][1];
    coordinates[26][2] = 0.25*x[0][2] + 0.5*x[2][2] + 0.25*x[3][2];
    coordinates[27][0] = 0.25*x[0][0] + 0.25*x[2][0] + 0.5*x[3][0];
    coordinates[27][1] = 0.25*x[0][1] + 0.25*x[2][1] + 0.5*x[3][1];
    coordinates[27][2] = 0.25*x[0][2] + 0.25*x[2][2] + 0.5*x[3][2];
    coordinates[28][0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[3][0];
    coordinates[28][1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[3][1];
    coordinates[28][2] = 0.5*x[0][2] + 0.25*x[1][2] + 0.25*x[3][2];
    coordinates[29][0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[3][0];
    coordinates[29][1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[3][1];
    coordinates[29][2] = 0.25*x[0][2] + 0.5*x[1][2] + 0.25*x[3][2];
    coordinates[30][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[3][0];
    coordinates[30][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[3][1];
    coordinates[30][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.5*x[3][2];
    coordinates[31][0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0];
    coordinates[31][1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1];
    coordinates[31][2] = 0.5*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2];
    coordinates[32][0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[2][0];
    coordinates[32][1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[2][1];
    coordinates[32][2] = 0.25*x[0][2] + 0.5*x[1][2] + 0.25*x[2][2];
    coordinates[33][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[2][0];
    coordinates[33][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[2][1];
    coordinates[33][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.5*x[2][2];
    coordinates[34][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[34][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[34][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new poisson3d_4_1_dof_map_1();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class poisson3d_4_1_cell_integral_0_quadrature: public ufc::cell_integral
{
public:

  /// Constructor
  poisson3d_4_1_cell_integral_0_quadrature() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~poisson3d_4_1_cell_integral_0_quadrature()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    
    const double d_10 = J_02*J_21 - J_01*J_22;
    
    const double d_20 = J_01*J_12 - J_02*J_11;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    
    // Array of quadrature weights
    static const double W125[125] = {0.000937439821766984, 0.00144688123847004, 0.00102268701578053, 0.000367520038007324, 4.71653365059364e-05, 0.00161927658526931, 0.00249925473264391, 0.00176652740822439, 0.000634831781565251, 8.1470536312884e-05, 0.00141792453255091, 0.00218848010941898, 0.00154686516950305, 0.000555892406098532, 7.13399262170554e-05, 0.000715891501943862, 0.00110493490770459, 0.000780991938624509, 0.000280662785913662, 3.60185932012982e-05, 0.000152536470498617, 0.000235430746830112, 0.000166407554052789, 5.9801395389292e-05, 7.67455552179798e-06, 0.00189377231486028, 0.00292292216383614, 0.00206598473020027, 0.000742446882427904, 9.52812185081393e-05, 0.00327118722298822, 0.00504887813656484, 0.00356865648488397, 0.00128245763045954, 0.000164582987156811, 0.00286442517370845, 0.00442106570107946, 0.00312490504969682, 0.00112298797668544, 0.000144117599953649, 0.00144621070637857, 0.0022321380949974, 0.00157772357985427, 0.000566981902660164, 7.27630862707133e-05, 0.000308147081155878, 0.000475606241660779, 0.000336168798819301, 0.000120807996789371, 1.55037800172006e-05, 0.00225090157446143, 0.00347412941301361, 0.00245558995953753, 0.00088245817276838, 0.000113249435042247, 0.00388807060532275, 0.00600100004508522, 0.00424163688396193, 0.00152430462570915, 0.00019562019257218, 0.0034046010087031, 0.0052547941847441, 0.00371420241029555, 0.00133476204345558, 0.000171295424533231, 0.00171893840164765, 0.00265307667295562, 0.00187525208922536, 0.000673903851785402, 8.64848134932762e-05, 0.000366257730507922, 0.000565296487744311, 0.00039956380849458, 0.000143590075769372, 1.8427496577589e-05, 0.00189377231486028, 0.00292292216383614, 0.00206598473020027, 0.000742446882427904, 9.52812185081393e-05, 0.00327118722298822, 0.00504887813656484, 0.00356865648488397, 0.00128245763045954, 0.000164582987156811, 0.00286442517370845, 0.00442106570107946, 0.00312490504969682, 0.00112298797668544, 0.000144117599953649, 0.00144621070637857, 0.0022321380949974, 0.00157772357985427, 0.000566981902660164, 7.27630862707133e-05, 0.000308147081155878, 0.000475606241660779, 0.000336168798819301, 0.000120807996789371, 1.55037800172006e-05, 0.000937439821766984, 0.00144688123847004, 0.00102268701578053, 0.000367520038007324, 4.71653365059364e-05, 0.00161927658526931, 0.00249925473264391, 0.00176652740822439, 0.000634831781565252, 8.1470536312884e-05, 0.00141792453255091, 0.00218848010941898, 0.00154686516950305, 0.000555892406098532, 7.13399262170554e-05, 0.000715891501943862, 0.00110493490770459, 0.000780991938624509, 0.000280662785913662, 3.60185932012982e-05, 0.000152536470498617, 0.000235430746830112, 0.000166407554052789, 5.9801395389292e-05, 7.67455552179798e-06};
    // Quadrature points on the UFC reference element: (0.0434850684329929, 0.0384332743963333, 0.034578939918215), (0.0372285899889251, 0.0329036302803046, 0.173480320771696), (0.0274810994988124, 0.0242885357160768, 0.389886387065519), (0.0164705687743685, 0.0145571321830714, 0.634333472630887), (0.0067089045501621, 0.00592951049099777, 0.851054212947016), (0.0363203493206216, 0.191166323793956, 0.034578939918215), (0.0310947054204484, 0.163661986623795, 0.173480320771696), (0.0229532381913956, 0.120810681788372, 0.389886387065519), (0.0137568327003139, 0.0724068788863314, 0.634333472630887), (0.00560352704046152, 0.0294932643722359, 0.851054212947016), (0.025452983470971, 0.42283010559815, 0.034578939918215), (0.0217908978824722, 0.361994799675747, 0.173480320771696), (0.0160854287808059, 0.267214393854326, 0.389886387065519), (0.00964066816216436, 0.160152727938308, 0.634333472630887), (0.00392690279162666, 0.0652345028216781, 0.851054212947016), (0.0137918067694829, 0.671415856030076, 0.034578939918215), (0.0118074902013492, 0.574814908126993, 0.173480320771696), (0.00871595763232119, 0.42431222048264, 0.389886387065519), (0.00522383682733774, 0.254308005746508, 0.634333472630887), (0.00212780888992548, 0.103586473561889, 0.851054212947016), (0.00446245462992895, 0.870293213094632, 0.034578939918215), (0.00382041237943087, 0.745078491721125, 0.173480320771696), (0.00282012111543484, 0.54999601573695, 0.389886387065519), (0.00169021617151183, 0.329635544721039, 0.634333472630887), (0.000688470393412244, 0.134269401146344, 0.851054212947016), (0.213916656125506, 0.0384332743963333, 0.034578939918215), (0.183139081291086, 0.0329036302803046, 0.173480320771696), (0.135188126023001, 0.0242885357160768, 0.389886387065519), (0.0810238806942951, 0.0145571321830714, 0.634333472630887), (0.0330032003938849, 0.00592951049099777, 0.851054212947016), (0.178671161296432, 0.191166323793956, 0.034578939918215), (0.152964584084757, 0.163661986623795, 0.173480320771696), (0.112914159689587, 0.120810681788372, 0.389886387065519), (0.0676741639412116, 0.0724068788863314, 0.634333472630887), (0.027565502601231, 0.0294932643722359, 0.851054212947016), (0.125211188776624, 0.42283010559815, 0.034578939918215), (0.107196244066483, 0.361994799675747, 0.173480320771696), (0.0791292565731431, 0.267214393854326, 0.389886387065519), (0.0474254628170509, 0.160152727938308, 0.634333472630887), (0.0193176633816068, 0.0652345028216781, 0.851054212947016), (0.0678462123292524, 0.671415856030076, 0.034578939918215), (0.0580847383280397, 0.574814908126993, 0.173480320771696), (0.0428765224208113, 0.42431222048264, 0.389886387065519), (0.0256976876550462, 0.254308005746508, 0.634333472630887), (0.0104673576243388, 0.103586473561889, 0.851054212947016), (0.0219522104240708, 0.870293213094632, 0.034578939918215), (0.0187938037280005, 0.745078491721125, 0.173480320771696), (0.0138730580546826, 0.54999601573695, 0.389886387065519), (0.00831470213956798, 0.329635544721039, 0.634333472630887), (0.00338680125632329, 0.134269401146344, 0.851054212947016), (0.463493892842726, 0.0384332743963333, 0.034578939918215), (0.396808024474, 0.0329036302803046, 0.173480320771696), (0.292912538609202, 0.0242885357160768, 0.389886387065519), (0.175554697593021, 0.0145571321830714, 0.634333472630887), (0.0715081382809929, 0.00592951049099777, 0.851054212947016), (0.387127368143914, 0.191166323793956, 0.034578939918215), (0.331428846302255, 0.163661986623795, 0.173480320771696), (0.244651465573054, 0.120810681788372, 0.389886387065519), (0.146629824241391, 0.0724068788863314, 0.634333472630887), (0.0597262613403738, 0.0294932643722359, 0.851054212947016), (0.271295477241817, 0.42283010559815, 0.034578939918215), (0.232262439776279, 0.361994799675747, 0.173480320771696), (0.171449609540077, 0.267214393854326, 0.389886387065519), (0.102756899715403, 0.160152727938308, 0.634333472630887), (0.0418556421156527, 0.0652345028216781, 0.851054212947016), (0.147002602025855, 0.671415856030076, 0.034578939918215), (0.125852385550656, 0.574814908126993, 0.173480320771696), (0.0929006962259202, 0.42431222048264, 0.389886387065519), (0.0556792608113027, 0.254308005746508, 0.634333472630887), (0.0226796567455474, 0.103586473561889, 0.851054212947016), (0.0475639234935763, 0.870293213094632, 0.034578939918215), (0.0407205937535897, 0.745078491721125, 0.173480320771696), (0.0300587985987655, 0.54999601573695, 0.389886387065519), (0.0180154913240372, 0.329635544721039, 0.634333472630887), (0.00733819295331972, 0.134269401146344, 0.851054212947016), (0.713071129559946, 0.0384332743963333, 0.034578939918215), (0.610476967656914, 0.0329036302803046, 0.173480320771696), (0.450636951195403, 0.0242885357160768, 0.389886387065519), (0.270085514491747, 0.0145571321830714, 0.634333472630887), (0.110013076168101, 0.00592951049099777, 0.851054212947016), (0.595583574991397, 0.191166323793956, 0.034578939918215), (0.509893108519752, 0.163661986623795, 0.173480320771696), (0.376388771456521, 0.120810681788372, 0.389886387065519), (0.22558548454157, 0.0724068788863314, 0.634333472630887), (0.0918870200795167, 0.0294932643722359, 0.851054212947016), (0.417379765707011, 0.42283010559815, 0.034578939918215), (0.357328635486074, 0.361994799675747, 0.173480320771696), (0.263769962507011, 0.267214393854326, 0.389886387065519), (0.158088336613754, 0.160152727938308, 0.634333472630887), (0.0643936208496987, 0.0652345028216781, 0.851054212947016), (0.226158991722457, 0.671415856030076, 0.034578939918215), (0.193620032773272, 0.574814908126993, 0.173480320771696), (0.142924870031029, 0.42431222048264, 0.389886387065519), (0.0856608339675592, 0.254308005746508, 0.634333472630887), (0.0348919558667561, 0.103586473561889, 0.851054212947016), (0.0731756365630818, 0.870293213094632, 0.034578939918215), (0.062647383779179, 0.745078491721125, 0.173480320771696), (0.0462445391428484, 0.54999601573695, 0.389886387065519), (0.0277162805085065, 0.329635544721039, 0.634333472630887), (0.0112895846503162, 0.134269401146344, 0.851054212947016), (0.883502717252459, 0.0384332743963333, 0.034578939918215), (0.756387458959075, 0.0329036302803046, 0.173480320771696), (0.558343977719591, 0.0242885357160768, 0.389886387065519), (0.334638826411673, 0.0145571321830714, 0.634333472630887), (0.136307372011824, 0.00592951049099777, 0.851054212947016), (0.737934386967207, 0.191166323793956, 0.034578939918215), (0.631762987184061, 0.163661986623795, 0.173480320771696), (0.466349692954713, 0.120810681788372, 0.389886387065519), (0.279502815782468, 0.0724068788863314, 0.634333472630887), (0.113848995640286, 0.0294932643722359, 0.851054212947016), (0.517137971012664, 0.42283010559815, 0.034578939918215), (0.442733981670085, 0.361994799675747, 0.173480320771696), (0.326813790299348, 0.267214393854326, 0.389886387065519), (0.195873131268641, 0.160152727938308, 0.634333472630887), (0.0797843814396788, 0.0652345028216781, 0.851054212947016), (0.280213397282226, 0.671415856030076, 0.034578939918215), (0.239897280899962, 0.574814908126993, 0.173480320771696), (0.177085434819519, 0.42431222048264, 0.389886387065519), (0.106134684795268, 0.254308005746508, 0.634333472630887), (0.0432315046011695, 0.103586473561889, 0.851054212947016), (0.0906653923572237, 0.870293213094632, 0.034578939918215), (0.0776207751277486, 0.745078491721125, 0.173480320771696), (0.0572974760820962, 0.54999601573695, 0.389886387065519), (0.0343407664765626, 0.329635544721039, 0.634333472630887), (0.0139879155132272, 0.134269401146344, 0.851054212947016)
    
    // Value of basis functions at quadrature points.
    static const double FE0[125][35] = \
    {{0.30566354512252, -0.0308956026377742, -0.0284861396506215, -0.0264567387485711, 0.00553719265411168, 0.00387645332275325, 0.00568515050333966, 0.0060484903552095, 0.00428125822656377, 0.00643242509446909, 0.00672268409775296, 0.00467332883378221, 0.0069633482709477, 0.316683332879071, -0.266830935779784, 0.130690033482262, 0.351982375922268, -0.291266875281556, 0.141477002112519, 0.398248079160478, -0.321682889512789, 0.154540818103216, -0.00152763868231464, -0.00156500797046703, -0.00159351937348602, 0.095210622103163, -0.0317968637110469, -0.0323761407582659, 0.107725414571985, -0.0351173025979229, -0.0366317655360566, 0.119733005913317, -0.0390316455622192, -0.0399864425485487, 0.0130709476216941},
    {0.00669084371150374, -0.0278698977200173, -0.0255216716723957, -0.0266548092172969, 0.0246968634917941, 0.00606875645427747, 0.00608506539691369, 0.0271328435929707, 0.00672966104875444, 0.00688490609661084, 0.00514622667323365, 0.00362131423099468, 0.00529990606922175, 0.726880420362404, -0.325409773332621, 0.139883262544633, 0.137865808082476, -0.175107042470174, 0.107680212589652, 0.155987336317311, -0.194176690389937, 0.118301272030906, -0.00578753808936735, -0.00590518015907651, -0.00208139128324103, 0.279853835753503, -0.119977797078753, -0.0422884203860174, 0.316638730113967, -0.133043715594682, -0.0478469472948313, 0.0600561704160452, -0.0252341084543328, -0.0257470368705249, 0.0411485850360965},
    {-0.0205345190513159, -0.0222688674682829, -0.020187906127168, 0.0230686829582336, 0.0433835769156871, -0.0191358805337486, -0.00622364176003377, 0.0480669960341637, -0.0213449189181004, -0.00704169738562054, 0.00299440295601833, 0.00214553663930309, 0.00305788669055025, 0.167093720255385, 0.600939576151325, -0.143068850951722, 0.0104093446885927, -0.0604049087085829, 0.0621282499374311, 0.0117775826607492, -0.0673780271760178, 0.0688352264995513, -0.00741225556502813, -0.00751860203093295, 0.00465971047251581, 0.208682812741731, -0.152758304485708, 0.0946731145294439, 0.236112757380084, -0.170392661971493, 0.107117255262284, 0.0147089853118772, -0.0106148570284824, -0.0107671524426324, 0.0371976335199438},
    {0.0207507657939299, -0.014551889869055, -0.0130520026587977, -0.0404060597147742, 0.0450304029511844, -0.053477017443967, 0.0203411087250161, 0.0503360898201809, -0.0600144777647142, 0.0230148099219634, 0.00115514811169004, 0.000843706814744078, 0.00116922152266209, -0.126761056765116, 0.441928259975204, 0.467600669283435, -0.0029090021867242, -0.00621279895212723, 0.0237555195281293, -0.00329137085372809, -0.00697230141826366, 0.0265545028764066, -0.00454625343839346, -0.00458350342284601, 0.00748204353630155, 0.033477219935367, -0.0931247868417252, 0.152015531609652, 0.037877574125578, -0.104509109078726, 0.171996945322831, 0.000869241301477079, -0.00239834878787691, -0.00241799979419899, 0.0130292178352812},
    {-0.0368948524592729, -0.00638364542619712, -0.00567499956394003, 0.193565613495663, 0.0259638427028639, -0.0473788984736528, 0.0454310335985984, 0.0292366119663366, -0.0534353517327502, 0.0514026357641062, 0.000203698888670554, 0.000151179155458613, 0.00020467432015378, 0.204659584876928, -0.507343961262246, 1.04436695187696, 0.00142591522038159, 0.00143537619017199, 0.00415844620979045, 0.00161334213417573, 0.00161886059114076, 0.00468262266144125, -0.00105429916924129, -0.00105767666444954, 0.00260466153192876, -0.0100100832039723, -0.0214892201090949, 0.0529199015640966, -0.0113258409537497, -0.0242361910467491, 0.0598758647845404, -7.89100056529316e-05, -0.000168859688239862, -0.000169400637910025, 0.00118137286371129},
    {-0.011025911508692, -0.0273944922839774, -0.0207049086523349, -0.0264567387485711, 0.00512462883169011, 0.00536188113781912, 0.0282778227723029, 0.0053092308397804, 0.00369992558671245, 0.00537260109800339, 0.0293515690248118, 0.0055863807230325, 0.00538270721270627, 0.126397002975774, -0.17165599760043, 0.109157185209764, 0.698773601926539, -0.259177038433349, 0.109362514995889, 0.132762407176673, -0.178843158089469, 0.113302027600821, -0.00656668547127663, -0.00180804417049387, -0.0066202015070151, 0.304657734076697, -0.0367347228625229, -0.13450515845961, 0.0578829738695039, -0.0253485180939921, -0.0255550990557524, 0.320000420807171, -0.140136829790449, -0.0385846983660778, 0.0453555872283229},
    {-0.0400796207547677, -0.0244753130251872, -0.0297236815267526, -0.0266548092172969, 0.0351774825315191, 0.0120047522387558, 0.0302669913049301, 0.0236247260194704, 0.00578290481392632, 0.0057505300895159, 0.0222876553178486, 0.00615563069515598, 0.00630523077133379, 0.235223312881521, -0.204904421568362, 0.116835712643712, 0.22191055743483, -0.218111137493024, 0.128105777916878, 0.0421615523278779, -0.105068053208743, 0.0860341243033991, -0.0247372100836883, -0.00975655513128461, -0.00864704247671411, 0.876508240496472, -0.198227651010737, -0.175685259324049, 0.166530824286541, -0.0954898205714342, -0.033379048477236, 0.157105805520738, -0.0900854556156691, -0.0355304301199561, 0.142783698010477},
    {0.0102723306758721, -0.0192801894065166, -0.0397189812555842, 0.0230686829582336, 0.0984497965965412, -0.0544785376003364, -0.0309562673116839, 0.0413568083073289, -0.0181908408918032, -0.00588148801582196, 0.0128148721626431, 0.00520560476519468, 0.00579589774391151, -0.0564785835866363, 0.352177395909631, -0.11949643476987, -0.0175005242960598, -0.100781285551626, 0.117757464577843, -0.00332498498225023, -0.0336517170080883, 0.0494675769545877, -0.0314204682320262, -0.0178782063943613, 0.0193585486349734, 0.608304956655548, -0.363238336703044, 0.393315014495556, 0.115573957173589, -0.121288328942359, 0.0747272764156986, 0.0358118904027676, -0.037582552760521, -0.0213844246405818, 0.129074077919252},
    {0.00912511728278442, -0.0124102698498274, -0.0397405972089105, -0.0404060597147742, 0.148813736423541, -0.200637348699184, 0.101176260361138, 0.0427698343143907, -0.0507088224103506, 0.0192228267319272, 0.00488202238539695, 0.00267462964338703, 0.00322733351433675, -0.0492106437897535, 0.128663531590443, 0.390557500837349, -0.005617217565431, -0.00678633971875516, 0.0655709656704383, -0.00106723454286993, -0.00171517066909918, 0.0188454332574341, -0.0191066759686632, -0.014363226916434, 0.0310837989915455, 0.0484793826839231, -0.291823158304032, 0.631541397109156, 0.00921076515456774, -0.0737550052650138, 0.119988728653697, 0.00105137563406705, -0.00841886793603293, -0.00632878846865113, 0.0452107867882594},
    {-0.0406159076210842, -0.00537606858025755, -0.0235167508261139, 0.193565613495663, 0.111110855045382, -0.212909749655552, 0.225973035491151, 0.0245854244640893, -0.0448339756433929, 0.0429333965480556, 0.000852007325023647, 0.000570008174352196, 0.00073157816654199, 0.217346756079598, -0.507458929034599, 0.872294189200459, 0.00753214688322397, 0.00645170840967714, 0.0148637525779309, 0.00143105856985462, 0.00135858380447916, 0.0032888925758727, -0.00439993687100414, -0.00396984336412254, 0.010820944185458, -0.0498012326664732, -0.0806568214253448, 0.219853249301445, -0.00946190799271438, -0.0169845015228644, 0.0417706772585573, -0.000327902206051645, -0.000588597513558875, -0.000531062149718329, 0.00409930951603711},
    {-0.00588069770174666, -0.0209614117032461, 0.0196804606852359, -0.0264567387485711, -0.00832019668364343, -0.0348389537831829, 0.0625461354887268, 0.00400152580496331, 0.00272474454845837, 0.00376507190876495, 0.048930521949722, -0.0267307568512311, -0.0061243586172648, 0.00349302620766797, -0.0658600199515992, 0.0764964016825789, 0.0427126061047173, 0.646111276941326, -0.124430929391771, 0.00257115858779159, -0.0505321770136859, 0.0598439668951059, -0.0106962989107497, 0.0082327634489647, -0.0102615839031087, 0.258541102529702, 0.167268194342736, -0.208488513147468, 0.0155633251325515, -0.0130819973384466, -0.0125503236613743, 0.190307812351085, -0.159966220165596, 0.12312334027285, 0.0492677426897367},
    {0.0160155329372752, -0.0184718652791736, 0.0231559130793075, -0.0266548092172969, -0.0414127978223251, -0.034443202117008, 0.0669458661735614, 0.0176021151318452, 0.0042248512136145, 0.00402992124403019, 0.0367296654322382, -0.0129029273094945, -0.00520186983952699, -0.0361690473471751, -0.0724944037069556, 0.0818774466205662, -0.0754725780460939, 0.221401884724776, -0.105688373127378, -0.00454320129074356, -0.0271574639953149, 0.0449218359954091, -0.0399733554598198, 0.0196171313744726, -0.0134032705491701, 0.685904525794329, 0.398568738617759, -0.272319358735952, 0.0412891994362845, -0.0488889974090571, -0.0163927308982086, 0.0861566050386759, -0.102014814964114, 0.050064299188121, 0.155099535112543},
    {0.019625155535545, -0.0142538719043459, 0.0055143044916419, 0.0230686829582336, -0.017812894403291, 0.0160562855400304, -0.0684704372430771, 0.0302890327371376, -0.0131335888893545, -0.00412169541459871, 0.0207590359443044, -0.00110769826546363, -0.000734901381042603, -0.0723235380733697, 0.0876260164567925, -0.0837420574397002, -0.0495680050107215, 0.00739045414443796, -0.0149312715941614, -0.0029838310837448, -0.0060451831276096, 0.0253891234003548, -0.050176204673254, 0.00369260001571806, 0.0300065444910838, 0.334770714499961, 0.0750239625962772, 0.609654406640305, 0.020152097378872, -0.0613674862179829, 0.0366991927248619, 0.0138115375776989, -0.0420591130547637, 0.00309524170946106, 0.140207388933763},
    {-0.0190581391155919, -0.00897333425654375, -0.0307674372271625, -0.0404060597147742, 0.132351652535693, -0.22451483832234, 0.223786114643475, 0.0307531007458301, -0.0361554636663503, 0.0134711890228239, 0.00776435926765647, 0.00213396519922823, 0.0020114946126344, 0.0872667704762523, -0.165422120128656, 0.273699284264116, 0.0220325931913584, 0.00976353258237024, 0.0408683030760231, 0.00132628973882783, 0.00157230163571773, 0.00949611899608963, -0.0301321459013352, -0.0112635157116614, 0.0481811635251757, -0.137863629824334, -0.228845143762455, 0.978915071973999, -0.00829893766954656, -0.0368528082257305, 0.0589274718534791, -0.00209526623473842, -0.00930437699442107, -0.0034780130431811, 0.0491104524580726},
    {-0.040797424542492, -0.00381478498889274, -0.0382757664925027, 0.193565613495663, 0.190282673186367, -0.394592727959424, 0.499817125541642, 0.0174062774729832, -0.0316348028115304, 0.0300873491893935, 0.00133421565824149, 0.000745405326831877, 0.000877995254786759, 0.207221789959828, -0.444598645440034, 0.61129614650863, 0.0158838417532036, 0.010476000137812, 0.0178385643921464, 0.000956155099287279, 0.000839868996894806, 0.00163179860956258, -0.0068668702051138, -0.00515603169099183, 0.0167729073733281, -0.0965076725717213, -0.104757061984402, 0.340781555015694, -0.00580944488641592, -0.00839845431548995, 0.0205139302338837, -0.000445302124200698, -0.000643753339572064, -0.000483366150934786, 0.00445289629753894},
    {0.00932435981520398, -0.0124384929539137, -0.0406552941435215, -0.0264567387485711, 0.0715572838247991, -0.134890782233763, 0.0993175900782414, 0.00233689276746127, 0.00155308751767135, 0.00204012014144113, 0.0453752157129882, -0.0589927390317723, 0.0285406155826313, -0.00274530159830441, -0.00403615898265425, 0.0414498988603882, -0.0533052495838727, 0.1533101456584, 0.579870570013429, -0.00109496327120831, -0.00176516193035212, 0.0189372104235511, -0.00968120372976661, 0.0172721051771462, -0.00882922451508184, 0.0251594819687862, 0.35092394715196, -0.179386721267945, 0.000516810424742581, -0.00404042139090878, -0.0036848504165023, 0.0100348568971313, -0.0784524624906233, 0.139965981645221, 0.0229695926275669},
    {-0.00343000582694802, -0.0108112314285623, -0.0261022528933716, -0.0266548092172969, 0.103392980678712, -0.158623419731344, 0.106303963340101, 0.0101628551970845, 0.00238940091495467, 0.00218362987416734, 0.0336739098154425, -0.0336069922318886, 0.00703717632537002, 0.0046660289296831, 0.00205905019873328, 0.0443656408238899, 0.0154605604751186, -0.0289605999565849, 0.142976994846623, 0.000317581213946188, 0.000436243804043004, 0.0140537054411442, -0.0358983017508572, 0.0489532756297689, -0.0115323799943941, -0.0309351205533019, 0.994602368027883, -0.234307761919136, -0.000635449999028159, -0.0149820487555178, -0.00481300426249389, -0.00210551912277912, -0.049641970574233, 0.0676950426566425, 0.0723104600244302},
    {-0.0254802305902349, -0.00816939214276999, 0.0194477483558447, 0.0230686829582336, -0.0931249229462171, 0.258170653831508, -0.108724843916401, 0.0171871218319641, -0.00734069551356106, -0.00223335809672926, 0.0187046946755822, -0.00995490362348396, -0.00208181898583707, 0.0693603943777792, -0.0450703189999694, -0.0453759880842459, 0.0754847153641234, -0.0611210042829733, -0.0422971101827513, 0.00155056005752834, 0.00173788412922099, 0.00780634832064018, -0.0445325221215009, 0.032171886455973, 0.0258180920932986, -0.273420273893853, 0.653648485037774, 0.524556022117167, -0.00561642914824791, -0.0185855147761847, 0.0107751034352762, -0.00611234349835352, -0.0202265616474849, 0.0146123914325401, 0.0653674479763461},
    {-0.0413033167094812, -0.00502599423716687, 0.00142320657028388, -0.0404060597147742, -0.00728506876419385, 0.017093937787867, 0.355352052140279, 0.0171227627066028, -0.0199509940309114, 0.00729942076023672, 0.00686461589158592, -8.96551013661723e-05, -5.99936975456272e-05, 0.162767434125055, -0.238242506157153, 0.148305115029899, 0.0652544179974327, -0.00107060610644973, -0.00121891483006999, 0.00134041565416264, 0.0012495456754498, 0.00286492688956188, -0.0264025793534474, 0.000464679493717838, 0.041455813661746, -0.31528337206821, 0.00944107046730005, 0.842273574261528, -0.00647635486434055, -0.0110190374433332, 0.0173014597122299, -0.00259640861016885, -0.00441759667172847, 7.77487137673428e-05, 0.022896260821635},
    {-0.0307812864125691, -0.00209476062722424, -0.0414545183650565, 0.193565613495663, 0.218312526315296, -0.496518111503194, 0.793664260801162, 0.00953507766758163, -0.017266776610174, 0.0163029574391284, 0.00116056657225554, 0.000511946582509183, 0.000545825785489333, 0.148260957594398, -0.292641263819637, 0.331233402999375, 0.0180456538848819, 0.00867658731539764, 0.0110897506202466, 0.000370682594362475, 0.000301734602309078, 0.000484358984172209, -0.00595155798029972, -0.00351547540607179, 0.0144316673106304, -0.100868360573134, -0.0714252543602302, 0.293213687890888, -0.00207197510408044, -0.00248386490399955, 0.00602301314340333, -0.000252191448058854, -0.000302324813502133, -0.000178577685041356, 0.00207602801312379},
    {-0.0415876825462492, -0.00431783986658357, 0.256494600498464, -0.0264567387485711, 0.294923085078977, -0.257360821304334, 0.128736049066641, 0.00080106670012963, 0.000522361946184601, 0.000660097964171801, 0.0201614888717741, -0.0378559651934289, 0.0380601860437702, 0.00872429846354225, 0.00688702196831944, 0.0134114620492585, 0.21957578109077, -0.49910768926269, 0.773283313112873, 0.00112588142272712, 0.00101303245225034, 0.00210038326343504, -0.00422064635993338, 0.0106624764371304, -0.00370296164571002, -0.0556466343187303, 0.216633599631123, -0.0752344837839613, -0.000285329791407244, -0.000439698428606236, -0.000385767078773827, -0.00718126644549836, -0.011066462972246, 0.0279568318739249, 0.00311696981125809},
    {-0.0405329728195472, -0.0037142682446487, -0.00474578684781537, -0.0266548092172969, 0.669144967779083, -0.31338587445254, 0.13779182750758, 0.00345414137402771, 0.000799034653613713, 0.00070653174053971, 0.0148351492186772, -0.0222033417422352, 0.0147360213951955, 0.0418315906646367, 0.0113675331696386, 0.0143548747900385, 0.179661983215495, -0.3158776939024, 0.299397365884506, 0.000921222223451972, 0.000805388003440224, 0.00154549593671598, -0.0155605339842403, 0.0312929506859299, -0.00483666042584475, -0.221373235069479, 0.635790811838522, -0.0982682742064897, -0.00113509792207312, -0.00162106505915686, -0.000503873532057693, -0.00487511807663248, -0.00696229234466274, 0.0140014906444225, 0.00981251712160659},
    {-0.0361168933250246, -0.00276215668983145, -0.0175985869100488, 0.0230686829582336, 0.13722625562885, 0.575928446322043, -0.140929787262841, 0.00576529064950165, -0.00243318076694139, -0.000722621723579448, 0.00813284841940013, -0.0073609841006229, 0.000992583157374874, 0.0813133174158522, -0.0385404156710592, -0.0146817811109555, 0.114705211796885, -0.116594455636229, 0.0201666905041451, 0.000588154424001408, 0.00049258790531673, 0.000847263751839095, -0.0191332374144265, 0.023221530079144, 0.0108280636225285, -0.303061298652316, 0.471800681544232, 0.219997897619223, -0.00155395592539939, -0.00199326209964857, 0.00112804583792485, -0.00219209902154617, -0.00281180941293532, 0.00341262251886694, 0.00887035156804321},
    {-0.0263257809398333, -0.00166934325119214, 0.0200527846384615, -0.0404060597147742, -0.121039277759041, 0.409587603262319, 0.460609436699216, 0.00566033118596434, -0.00654850098736387, 0.00236178874253036, 0.00294142818295288, -0.000705110284432725, -0.000322515764157816, 0.0933367349209927, -0.115553699595248, 0.0479853624886689, 0.048503045772689, -0.0124422523789915, -0.00655267576338942, 0.000248700826247299, 0.000198927168058583, 0.000306432057937854, -0.0112330506905862, 0.00360255684182683, 0.017386497276055, -0.198216441830415, 0.0731945210967082, 0.353248095045939, -0.00101636076814718, -0.00117023657418756, 0.0018112902336054, -0.000528158531587124, -0.000608121102272731, 0.000195030797776843, 0.0031070186976706},
    {-0.0125964445065002, -0.000684999674742305, -0.0373255322657574, 0.193565613495663, 0.206363312425294, -0.508716820740598, 1.02875232011214, 0.00311203997815372, -0.00561925159590044, 0.00527495846785997, 0.0004909813474318, 0.000170699739526382, 0.000166940047684343, 0.0582613106027223, -0.108078195915314, 0.107173342659665, 0.009191789624706, 0.0032831631715312, 0.00339178460704527, 4.71311778042446e-05, 3.62655983429211e-05, 5.11494469164307e-05, -0.0025105673678679, -0.00116540725334405, 0.00605261656260134, -0.0482871405937741, -0.0236780235639221, 0.12297331871021, -0.000247593765947533, -0.000261545846873364, 0.000630549390917038, -3.906245474798e-05, -4.12636512430338e-05, -1.91546178259542e-05, 0.000281716648142271},
    {-0.0277140447911063, -0.0126271398155743, -0.0284861396506215, -0.0264567387485711, 0.00553719265411168, 0.00387645332275325, 0.00568515050333966, 0.00325794945141117, 0.0036798590666487, 0.0316431114534618, 0.00362109612184814, 0.00401685452508365, 0.0342548886603178, 0.103801960721004, -0.157420166190056, 0.105479347123269, 0.115372225079874, -0.171836446844088, 0.114185461723149, 0.642152951745391, -0.163121764729731, 0.0671839478266716, -0.00131304741694846, -0.00769876382666736, -0.00783902033804147, 0.0561706681825989, -0.0256631078548466, -0.0261306397937105, 0.312641628866867, -0.0243616038309395, -0.145441135965869, 0.347490164197526, -0.0270770650281287, -0.158760396677319, 0.051896310276892},
    {-0.0361820508672741, -0.0234599611173095, -0.0255216716723957, -0.0266548092172969, 0.0246968634917941, 0.00606875645427747, 0.0060850653969137, 0.0287184488864878, 0.0104029545786958, 0.0338690070637594, 0.00544696493631907, 0.00559795912265065, 0.026071896054486, 0.179952332893618, -0.18696061832771, 0.112899161577485, 0.0341311625622492, -0.100605831836208, 0.0869082226043882, 0.18997143177811, -0.172456730934776, 0.101060175091016, -0.00894658667501581, -0.0290494286652631, -0.0102390148950968, 0.160786953747622, -0.0968335485725666, -0.0341307967741616, 0.894927846626023, -0.165990349931469, -0.189969395829684, 0.169738993229578, -0.0314830240107242, -0.102224892396147, 0.163374515627626},
    {0.0142516980277665, -0.0371334490119635, -0.020187906127168, 0.0230686829582336, 0.0433835769156871, -0.0191358805337486, -0.00622364176003377, 0.09419353716059, -0.0541774865549501, -0.0346403124672739, 0.00586792247035833, 0.00544578233700512, 0.0150427013047287, -0.0742448752547493, 0.315595803207861, -0.115470235870068, -0.00462519175889466, -0.0317228826959172, 0.0501434353232526, -0.0257434624174613, -0.0898137949654953, 0.108870403831837, -0.0188137222613497, -0.0369863556193763, 0.0229225736261529, 0.109594079865224, -0.123290550897265, 0.0764102513758067, 0.609992238864691, -0.349060089072392, 0.425293595842598, 0.0380003477210529, -0.0217452025045107, -0.0427494241530001, 0.147687833092772},
    {0.00638473930951465, -0.0409323784102905, -0.0130520026587977, -0.0404060597147742, 0.0450304029511844, -0.053477017443967, 0.0203411087250161, 0.155250849713371, -0.213621118662252, 0.113217050295249, 0.00356280606072759, 0.00300316857367656, 0.00575176646630448, -0.0337564627061269, 0.0846428086527524, 0.37739842891015, -0.000774667128329133, -0.001189941446452, 0.0191729745844869, -0.00431173779245624, -0.0047533807060203, 0.0661024641285421, -0.0161823576810783, -0.0225476873071009, 0.0368065129467913, 0.00641191382821821, -0.0751606029574703, 0.122691062199162, 0.0356882203517942, -0.300239109257121, 0.68288903754282, 0.000818998466035515, -0.00689009895986798, -0.0096003190588067, 0.051730628185115},
    {-0.0409997915183174, -0.0255781559034303, -0.00567499956394003, 0.193565613495663, 0.0259638427028639, -0.0473788984736528, 0.0454310335985984, 0.121442089297964, -0.234455394972282, 0.252865646874597, 0.000846117828437154, 0.000663320581885527, 0.00100685701413863, 0.218085988961727, -0.504176529159724, 0.842903940766471, 0.00151946038197771, 0.00142641489966478, 0.00335626351580562, 0.00845719989080253, 0.0070586417048346, 0.0156984333273983, -0.00462589128971538, -0.00520304241143498, 0.0128131449558945, -0.00994758860206489, -0.0173438543621095, 0.0427114181401308, -0.0553675148342017, -0.0858263985827234, 0.237728475921549, -0.000385759514582493, -0.000597974280673016, -0.000672580773829721, 0.00469047038227806},
    {-0.0324041991309082, -0.0249565292980644, -0.0207049086523349, -0.0264567387485711, 0.00512462883169011, 0.00536188113781912, 0.0282778227723029, 0.00604184678738186, 0.00607574336483784, 0.0264295056440364, 0.0334017654098673, 0.00917354006613423, 0.0264792207840047, 0.0290254836500228, -0.0981240834186821, 0.0881002806637313, 0.160464578117202, -0.148153922350204, 0.0882660014245901, 0.149976167089159, -0.167878620871496, 0.104064055106665, -0.0107833238118004, -0.00889433492959205, -0.0325668423734901, 0.174152149243713, -0.0296484321034247, -0.108558517593135, 0.162769080505944, -0.0335957213522823, -0.101462831015625, 0.899853113520492, -0.185730695079488, -0.153194973792325, 0.180077810401831},
    {-0.00335768559689364, -0.0328037714586735, -0.0297236815267526, -0.0266548092172969, 0.0351774825315191, 0.0120047522387558, 0.0302669913049301, 0.0381271103420099, 0.0126102731283712, 0.0282886565901094, 0.0359692591934385, 0.0134230437541298, 0.0310174027846307, 0.00970388431266687, -0.112584145831108, 0.0942975861431182, 0.0091546809316119, -0.11984053795887, 0.103393605903581, 0.00855630552958894, -0.125885306539981, 0.112063147708538, -0.0539422635555038, -0.0479955470739245, -0.0425375072099568, 0.481594934920914, -0.159988659068097, -0.141794794590806, 0.450116550808096, -0.168058502846676, -0.132526692528935, 0.424641645748689, -0.158547023215991, -0.141068442713084, 0.56690205705785},
    {0.0234342855627475, -0.0407169244982236, -0.0397189812555842, 0.0230686829582336, 0.0984497965965412, -0.0544785376003364, -0.0309562673116839, 0.0996724370913472, -0.0540299424420025, -0.0289328796003985, 0.030884625572964, 0.0154615461435879, 0.0285118342755608, -0.0978204961038315, 0.166049912400659, -0.0964450431852937, -0.0303107808306083, -0.047517881135584, 0.0950415280461933, -0.028329583910624, -0.0471266024348213, 0.096221841514526, -0.0933242228973652, -0.0879484905329413, 0.0952307571463896, 0.286812799284425, -0.293168052564464, 0.31744280598414, 0.268065917185613, -0.290754005221206, 0.29669386147487, 0.0830632391737672, -0.0900933984072929, -0.0849037704350175, 0.512469989955714},
    {-0.008454146485978, -0.0388242292248941, -0.0397405972089105, -0.0404060597147742, 0.148813736423541, -0.200637348699184, 0.101176260361138, 0.144373886169673, -0.192520475532932, 0.0945630986440838, 0.0164797585832577, 0.0101544651668789, 0.0158762632431524, 0.0409046503519657, -0.0859340091226231, 0.315217228925193, 0.0046691183607868, 0.00453257711872145, 0.0529220359416226, 0.00436393180135349, 0.00434920969571942, 0.0513431096922211, -0.072540164975116, -0.0706572068035245, 0.152910931948857, -0.0323792426830043, -0.235529178416942, 0.509714264151844, -0.0302628453445956, -0.226000740762852, 0.476397922489345, -0.00345439468696765, -0.0257971697390768, -0.0251275408296196, 0.17950290116164},
    {-0.041622798727191, -0.0223221930862674, -0.0235167508261139, 0.193565613495663, 0.111110855045382, -0.212909749655552, 0.225973035491151, 0.105185433623048, -0.200733059401549, 0.211202809530411, 0.00364519880726569, 0.00255207090336347, 0.00359886187881333, 0.215301987909138, -0.475633610993708, 0.704024776218103, 0.00746128548883346, 0.00604708911874124, 0.0119964688656595, 0.00697359512175884, 0.00570124525176764, 0.0113567101887966, -0.019699631286669, -0.0195289014918691, 0.0532316098304128, -0.0466779452874252, -0.0650977632975983, 0.17744258365649, -0.0436269449865272, -0.0613747055175499, 0.165844442975822, -0.00151189078517694, -0.00212693902228511, -0.0021085055877937, 0.0162757165526541},
    {0.0204785007083074, -0.0390271979027141, 0.0196804606852359, -0.0264567387485711, -0.00832019668364343, -0.0348389537831829, 0.0625461354887268, 0.00863984186151985, 0.00744901063083605, 0.0185215666392738, 0.105647693518024, -0.0730775632041426, -0.0301276360720806, -0.00851571579357307, -0.0333053616823685, 0.0617399069520701, -0.104129884165233, 0.326737978236299, -0.100427651936955, -0.0308356155601945, -0.0698607279807284, 0.104285879799548, -0.0292419501644121, 0.0404995390633586, -0.0504799416031008, 0.13074403767017, 0.135001418728343, -0.168270155447476, 0.0387167710278796, -0.0288650172890901, -0.0498292480129826, 0.473427364194998, -0.352960453307861, 0.488843445330789, 0.195610458802931},
    {0.0229180783083816, -0.0412289201478099, 0.0231559130793075, -0.0266548092172969, -0.0414127978223251, -0.034443202117008, 0.0669458661735615, 0.0445075575635088, 0.0130053645486453, 0.019824443378776, 0.0928722307670984, -0.039719096583542, -0.025589625169532, -0.0405003872011951, -0.0325826767811744, 0.0660829244858203, -0.0845106204926892, 0.0995092818183707, -0.0853006177973731, -0.0250258321629452, -0.0375735822013698, 0.0916750945711954, -0.123050027966021, 0.0965028065407849, -0.0659348811061902, 0.308280423369521, 0.321683063451447, -0.219787748178932, 0.0912899951436844, -0.121463895694101, -0.0650849711590207, 0.190491367305736, -0.253454100119439, 0.198773071368573, 0.615800310043552},
    {0.00445003802812053, -0.0407212506634908, 0.0055143044916419, 0.0230686829582336, -0.017812894403291, 0.0160562855400304, -0.0684704372430771, 0.094663011935078, -0.0471952503297709, -0.0202759092357742, 0.0648786933676808, -0.00398048830131898, -0.00361520981062479, -0.014273155628425, 0.012678024738557, -0.0675878436185248, -0.00978231801921587, 0.00106927559029868, -0.0120509631645792, -0.00289680335425564, -0.00314298902008453, 0.06404239782991, -0.180307040223523, 0.0181650547242116, 0.147611580037062, 0.0484357451336123, 0.0605515078877836, 0.492049371094327, 0.0143431064798044, -0.1779828569618, 0.145708845883514, 0.00983025986835733, -0.121983179760304, 0.0122892102994557, 0.556673193850381},
    {-0.0313667839702793, -0.032584246211307, -0.0307674372271625, -0.0404060597147742, 0.132351652535693, -0.22451483832234, 0.223786114643475, 0.117677353552572, -0.149900211650407, 0.0662689933266995, 0.0297104756427882, 0.00884739960662248, 0.00989517130488743, 0.134459259594934, -0.22671291901406, 0.22090147996024, 0.0339474710854874, 0.0133810337451635, 0.0329846263837701, 0.0100527449542906, 0.00893401881804112, 0.029327503407754, -0.124927592957268, -0.0554087576283442, 0.237018217078895, -0.188943690958862, -0.184699901845772, 0.790078018420279, -0.0559512292137641, -0.123317258606937, 0.233963018722939, -0.0141262323000572, -0.031134405198363, -0.0138089486133686, 0.194985960648534},
    {-0.0380744421614196, -0.0166949234470742, -0.0382757664925027, 0.193565613495663, 0.190282673186367, -0.394592727959424, 0.499817125541642, 0.0777809136606017, -0.145888070814491, 0.148009083628169, 0.00596201646672439, 0.00343753510190094, 0.00431913334314864, 0.189049666937128, -0.391279045283166, 0.493374412069855, 0.0144909229560622, 0.00921963972304153, 0.0143974263037846, 0.00429114593728446, 0.00340866761471971, 0.00588516523084961, -0.0316674787804408, -0.0253641329762116, 0.0825111788505984, -0.0849337495146655, -0.0845489606991818, 0.275043283538423, -0.0251511318687753, -0.0312592804980486, 0.081447598079976, -0.00192786964437967, -0.00239606783073463, -0.00191913551123336, 0.0176795818158101},
    {-0.00825021336394413, -0.0388609269646537, -0.0406552941435215, -0.0264567387485711, 0.0715572838247991, -0.134890782233763, 0.0993175900782414, 0.0078795701671043, 0.00589174064932508, 0.0100359892367157, 0.152996834530156, -0.223792873623523, 0.140400217113785, 0.00217839861878938, 0.00257050400901626, 0.0334540297651137, 0.0422977505056147, -0.0976384591715584, 0.468010968482276, 0.00427416501424585, 0.00426463891240279, 0.0515352884852301, -0.0367262893430388, 0.0849668890239083, -0.0434337176531759, -0.0160232908424757, 0.283229163305198, -0.144782228129851, -0.00161914495010558, -0.0123708436327974, -0.0146301665398265, -0.0314387773391318, -0.240203447161016, 0.555714721066931, 0.0911974510521009},
    {-0.0198488651832077, -0.0363573468678739, -0.0261022528933716, -0.0266548092172969, 0.103392980678712, -0.158623419731344, 0.106303963340101, 0.0364627551749935, 0.00947054301501524, 0.0107419585096759, 0.120816788744321, -0.133203458467504, 0.0346180719574671, 0.0247556540621009, 0.00927424233248091, 0.0358073121883814, 0.0820261281050843, -0.130442483751308, 0.115396099214526, 0.00828869627367681, 0.00778801235936354, 0.0406957966216643, -0.142285209974459, 0.240816478080212, -0.0567313851505341, -0.139335993251802, 0.80273916557744, -0.189108756762996, -0.0140798274249358, -0.0479271964399368, -0.0191093384963021, -0.0466525233047002, -0.158803412951156, 0.268773392686982, 0.287098240946532},
    {-0.0353856505415786, -0.0306200848898892, 0.0194477483558447, 0.0230686829582336, -0.0931249229462171, 0.258170653831508, -0.108724843916401, 0.0675319354986142, -0.0309986215928048, -0.0109865871941614, 0.073494808886703, -0.042038018038909, -0.0102411188979748, 0.0909039607293698, -0.0534182819067339, -0.0366227589868138, 0.0989305159332579, -0.0724418888007599, -0.0341378102706136, 0.00999687560186195, 0.00869811756323157, 0.0247559120407588, -0.18805395200869, 0.158263574599543, 0.127007272315765, -0.324063410110059, 0.527556796894204, 0.423366841894701, -0.0327464338725473, -0.0633438900701261, 0.0427809924212845, -0.0356378486920948, -0.0689369712339988, 0.0580163903657518, 0.259532014079741},
    {-0.0413330967980874, -0.0211218344402416, 0.00142320657028388, -0.0404060597147742, -0.00728506876419385, 0.017093937787867, 0.355352052140279, 0.0739927864951071, -0.0899360086693542, 0.0359081343769532, 0.0296641416306708, -0.000404151390212588, -0.000295127767531072, 0.157864947105883, -0.219648979514327, 0.119696401413183, 0.0632889822277056, -0.000987051146063622, -0.000983780760084533, 0.00639531772709715, 0.00519315335829096, 0.00999203742546717, -0.119018761769261, 0.00228590380671458, 0.203934117044056, -0.290677226535459, 0.0076198461543033, 0.679795270879219, -0.0293727779195008, -0.0400901511575049, 0.0686929477078466, -0.011775718763449, -0.0160723764878062, 0.00030869004222766, 0.0909062977046966},
    {-0.0266278562476348, -0.0096820984801283, -0.0414545183650565, 0.193565613495663, 0.218312526315296, -0.496518111503194, 0.793664260801162, 0.0445686382427211, -0.082082885171145, 0.0801993480982714, 0.00542469327662735, 0.00243369411063689, 0.0026850878029287, 0.126759861966115, -0.245715646165503, 0.267337012340232, 0.0154286376713808, 0.00728527901666094, 0.0089504886028072, 0.00155905556593942, 0.00120438047899994, 0.00182724782387417, -0.0282925447705458, -0.0172937233551125, 0.0709938865144694, -0.0846939152475717, -0.0576470064111895, 0.236651468687049, -0.00855827473431761, -0.00953003022061857, 0.0239135040502404, -0.00104167453261515, -0.00115995221981648, -0.000709016914432363, 0.00824256947780744},
    {-0.0398714950680978, -0.018585063518479, 0.256494600498464, -0.0264567387485711, 0.294923085078977, -0.257360821304334, 0.128736049066641, 0.0035308220365921, 0.00238662360542683, 0.00324722840044395, 0.0888647963864358, -0.172960417191054, 0.187229962453518, 0.00814813477108312, 0.00616862571740957, 0.0108243316129863, 0.20507471910435, -0.447044969785973, 0.624113536703126, 0.00517278926079175, 0.00414565073336081, 0.00747189331800396, -0.0192837443583843, 0.0524520573990262, -0.0182160268238256, -0.0498420450994392, 0.174844018669227, -0.0607214186058457, -0.00125721198962145, -0.00162140787439533, -0.00153163248710619, -0.0316418914106896, -0.0408080835352963, 0.110998564394833, 0.0123754785904179},
    {-0.0376359379261083, -0.0163084975755771, -0.00474578684781537, -0.0266548092172969, 0.669144967779083, -0.31338587445254, 0.13779182750758, 0.0154769114656852, 0.00369162422462738, 0.0034756506734183, 0.066471596317428, -0.102581776488159, 0.0724910994750196, 0.0379956047588087, 0.00997162717358076, 0.0115857558571599, 0.163186854623018, -0.277088665503788, 0.241642287804682, 0.00411621292367497, 0.00326405021199659, 0.00558903746542606, -0.0718913052701171, 0.153939814567603, -0.0237930458061849, -0.194189129108341, 0.513143947956848, -0.0793118888261496, -0.00489821195904204, -0.00604473520801733, -0.00200055710701352, -0.0210372701776152, -0.0259614587499538, 0.055590896991734, 0.0389591824463452},
    {-0.0320953472655637, -0.0125039973795695, -0.0175985869100488, 0.0230686829582336, 0.13722625562885, 0.575928446322043, -0.140929787262841, 0.026490748181632, -0.0114343437918563, -0.00355480233381643, 0.0373693630686831, -0.0345917672852212, 0.00488282708533199, 0.0711243588603503, -0.0328899499342601, -0.0118496005007185, 0.100332084660509, -0.099500374910785, 0.016276446576188, 0.00253076894271232, 0.00197545632867099, 0.00314207544005102, -0.089913588591603, 0.114233971421774, 0.0532666325687123, -0.258629046058044, 0.380788240201603, 0.177559328673039, -0.00652363956815725, -0.00756007743351917, 0.00447874312604067, -0.00920261873617932, -0.0106646772112093, 0.0135493249780212, 0.0352184501509474},
    {-0.0224172392883417, -0.00781686379284149, 0.0200527846384615, -0.0404060597147742, -0.121039277759041, 0.409587603262319, 0.460609436699216, 0.0267417912642991, -0.0313547065949565, 0.0116183777209745, 0.0138965470222836, -0.00337612014232493, -0.00158655594443219, 0.0787502465351571, -0.0961276701025704, 0.0387287735102247, 0.040923081523459, -0.0103505533462799, -0.00528863558311503, 0.00103224072449103, 0.000792354457711021, 0.00116844376019942, -0.0537846767144484, 0.0177221041814198, 0.0855296195465343, -0.164893766239597, 0.0590749737571152, 0.28510497277546, -0.0041592679336631, -0.00452230110117076, 0.00719146634852059, -0.00216139083007461, -0.00235004339388598, 0.000774341622957466, 0.0123359691307153},
    {-0.010377765989116, -0.00330330498807967, -0.0373255322657574, 0.193565613495663, 0.206363312425294, -0.508716820740598, 1.02875232011214, 0.0150615693989052, -0.0273436744040659, 0.0259491709984155, 0.00237623863762138, 0.000830636966295308, 0.000821230322520682, 0.0478241068894882, -0.0882267290306913, 0.0864991301291092, 0.00754512943443961, 0.00268012197136597, 0.00273749433220894, 0.000190317776273119, 0.000144057321402432, 0.000199797921341208, -0.0122165977986354, -0.00573300288221737, 0.0297747144603602, -0.03941790879052, -0.0191104279350488, 0.0992512208124512, -0.000994274360901174, -0.00102719095943711, 0.00250350531445993, -0.000156865004581852, -0.000162058201332359, -7.60506444296503e-05, 0.00111851527565566},
    {0.0110397084453416, 0.0110397084453416, -0.0284861396506215, -0.0264567387485711, 0.00553719265411168, 0.00387645332275325, 0.00568515050333967, -0.005329609463948, -0.0471747144498052, 0.0685612292883655, -0.00592367329471851, -0.051494897433611, 0.0742201751917336, -0.00532960946394807, -0.0471747144498051, 0.0685612292883654, -0.00592367329471855, -0.051494897433611, 0.0742201751917336, -0.0714377434247328, 0.626670020194433, -0.0714377434247329, 0.0168328829533166, -0.016680935840757, -0.0169848300658761, 0.0168328829533166, -0.016680935840757, -0.0169848300658761, 0.202999577068119, 0.202999577068119, -0.204832014189666, 0.225626883480278, 0.225626883480278, -0.223590194129101, 0.0730881651359092},
    {0.0226472627625867, 0.0226472627625867, -0.0255216716723957, -0.0266548092172969, 0.0246968634917941, 0.00606875645427747, 0.0060850653969137, -0.0444953983204547, -0.0494918367818093, 0.073384084320622, -0.00843934418035725, -0.0266321723423491, 0.0564900593294371, -0.0444953983204548, -0.0494918367818091, 0.0733840843206219, -0.00843934418035729, -0.0266321723423491, 0.0564900593294371, -0.101775988349475, 0.217190315123544, -0.101775988349475, 0.0425631972267722, -0.0629414886189149, -0.0221849058346293, 0.0425631972267722, -0.0629414886189149, -0.0221849058346292, 0.513299537557785, 0.513299537557785, -0.26754338601508, 0.0973563925390682, 0.0973563925390681, -0.143968420425006, 0.230088488246687},
    {0.012691238507802, 0.0126912385078019, -0.020187906127168, 0.0230686829582336, 0.0433835769156871, -0.0191358805337486, -0.00622364176003377, -0.0433014820764305, 0.0438748525012584, -0.0750552741686711, -0.00269752837971156, -0.00441018792091283, 0.0325930683139907, -0.0433014820764307, 0.0438748525012586, -0.0750552741686712, -0.00269752837971159, -0.00441018792091282, 0.0325930683139907, -0.0325313923782024, 0.0101117032054848, -0.0325313923782025, 0.0152360203786706, -0.0801384532583207, 0.0496664125009797, 0.0152360203786707, -0.0801384532583207, 0.0496664125009799, 0.183741887925501, 0.1837418879255, 0.598962207492992, 0.0114464663437146, 0.0114464663437144, -0.0602061486700866, 0.207996149939306},
    {-0.0259817649692688, -0.0259817649692689, -0.0130520026587977, -0.0404060597147742, 0.0450304029511844, -0.053477017443967, 0.0203411087250161, 0.114761862471351, -0.203918001595269, 0.245307739602699, 0.00263363620816368, 0.00286675838902466, 0.0124623705253957, 0.114761862471351, -0.203918001595269, 0.245307739602699, 0.00263363620816366, 0.00286675838902467, 0.0124623705253957, 0.0317608717348789, 0.0109314929980697, 0.0317608717348788, -0.0154473212203454, -0.0488541451322856, 0.0797487875729766, -0.0154473212203453, -0.0488541451322856, 0.0797487875729767, -0.186290113420392, -0.186290113420392, 0.961746730723858, -0.00427511698888066, -0.0042751169888807, -0.0135206087096314, 0.0728548267729456},
    {-0.0395812800366694, -0.0395812800366694, -0.00567499956394003, 0.193565613495663, 0.0259638427028639, -0.0473788984736528, 0.0454310335985984, 0.198592301718684, -0.417854165752403, 0.547884793820534, 0.00138364292022568, 0.00118219189796399, 0.00218156026497215, 0.198592301718684, -0.417854165752403, 0.547884793820534, 0.00138364292022564, 0.00118219189796397, 0.00218156026497212, 0.0166863233349912, 0.0104262409046442, 0.0166863233349911, -0.00824441658062017, -0.0112734483867722, 0.0277622815480125, -0.00824441658062007, -0.0112734483867722, 0.0277622815480126, -0.0994252192973006, -0.0994252192973008, 0.334804883294351, -0.000692720712645986, -0.000692720712645969, -0.000947229088207365, 0.00660582365173809},
    {0.0231926089616704, 0.0231926089616704, -0.0207049086523349, -0.0264567387485711, 0.00512462883169011, 0.00536188113781912, 0.0282778227723029, -0.00884030110212687, -0.0253079998695849, 0.0572648931538839, -0.0488727493359342, -0.038211612449096, 0.0573726111042974, -0.00884030110212696, -0.0253079998695848, 0.0572648931538838, -0.0488727493359342, -0.038211612449096, 0.0573726111042974, -0.0989712960362717, 0.180358247044557, -0.0989712960362718, 0.0449170317499104, -0.0192713835165083, -0.0705626799833124, 0.0449170317499104, -0.0192713835165083, -0.0705626799833124, 0.0909606458976599, 0.0909606458976599, -0.1428951713303, 0.502867130319971, 0.502867130319971, -0.215752131178203, 0.253612572333923},
    {0.0203118679564708, 0.0203118679564708, -0.0297236815267526, -0.0266548092172969, 0.0351774825315191, 0.0120047522387558, 0.0302669913049301, -0.0336736952599977, -0.022928303299865, 0.0612931213666138, -0.0317678906673699, -0.0244061024903268, 0.067205504344106, -0.0336736952599979, -0.0229283032998649, 0.0612931213666138, -0.0317678906673699, -0.0244061024903269, 0.0672055043441059, -0.064332564760715, 0.0466140832510674, -0.0643325647607151, 0.0980791269856962, -0.103992103071011, -0.0921661509003816, 0.0980791269856964, -0.103992103071011, -0.0921661509003816, 0.198618216568047, 0.198618216568046, -0.186643958631942, 0.187377171996244, 0.187377171996244, -0.198673731937171, 0.798396474451868},
    {-0.00180109126924745, -0.00180109126924746, -0.0397189812555842, 0.0230686829582336, 0.0984497965965412, -0.0544785376003364, -0.0309562673116839, 0.00555831011591584, -0.00456747434668153, -0.0626889613928461, 0.0017223048995095, 0.00130705701651778, 0.0617766811608771, 0.00555831011591584, -0.0045674743466816, -0.0626889613928461, 0.00172230489950954, 0.00130705701651785, 0.061776681160877, 0.00348780763084172, 0.00010958351041635, 0.00348780763084147, -0.00788925500828088, -0.190558271548703, 0.206336781565265, -0.007889255008281, -0.190558271548702, 0.206336781565265, -0.0159763836399549, -0.0159763836399546, 0.41784878012689, -0.00495046214509453, -0.00495046214509452, -0.119574219460049, 0.721737076359336},
    {-0.034471487495116, -0.0344714874951161, -0.0397405972089105, -0.0404060597147742, 0.148813736423541, -0.200637348699184, 0.101176260361138, 0.144961877454661, -0.236495772351066, 0.204890163784638, 0.0165468756685059, 0.0124739359582676, 0.0343991495923875, 0.144961877454661, -0.236495772351066, 0.204890163784638, 0.0165468756685059, 0.0124739359582677, 0.0343991495923875, 0.0335087702761786, 0.014703309916297, 0.0335087702761784, -0.0891097027200585, -0.153093192610233, 0.331312598050351, -0.0891097027200585, -0.153093192610233, 0.33131259805035, -0.180454402247565, -0.180454402247565, 0.670934982535923, -0.0205982194095058, -0.0205982194095059, -0.0353883704605545, 0.252802898943636},
    {-0.0368397808547021, -0.0368397808547022, -0.0235167508261139, 0.193565613495663, 0.111110855045382, -0.212909749655552, 0.225973035491151, 0.181682419275111, -0.372044618841556, 0.457613792874258, 0.00629620010329694, 0.00473008406950611, 0.00779766537223646, 0.181682419275111, -0.372044618841556, 0.457613792874257, 0.00629620010329691, 0.00473008406950611, 0.00779766537223643, 0.0127503177700059, 0.00826548491825738, 0.0127503177700057, -0.0365118821743589, -0.0423133323947337, 0.115337096743451, -0.0365118821743588, -0.0423133323947337, 0.115337096743452, -0.0739395337610562, -0.0739395337610564, 0.233567010263677, -0.00256237285897836, -0.00256237285897836, -0.00296951370470119, 0.0229219043272776},
    {0.00674684819158463, 0.00674684819158458, 0.0196804606852359, -0.0264567387485711, -0.00832019668364343, -0.0348389537831829, 0.0625461354887268, -0.00194941845888491, -0.00275429046543188, 0.0401307367956719, -0.023837422858388, 0.0270206132794255, -0.0652776440045177, -0.00194941845888503, -0.00275429046543178, 0.0401307367956719, -0.0238374228583881, 0.0270206132794258, -0.0652776440045178, -0.0152945235567675, 0.00213618979458465, -0.0152945235567676, 0.010812284814719, 0.0877504788958506, -0.109375048525289, 0.0108122848147191, 0.0877504788958506, -0.109375048525289, 0.00693735836225317, 0.00693735836225308, -0.0701770181336515, 0.0848297829783524, 0.084829782978352, 0.688462633804094, 0.275487976679251},
    {-0.00609144832973591, -0.00609144832973593, 0.0231559130793075, -0.0266548092172969, -0.0414127978223251, -0.034443202117008, 0.0669458661735614, 0.00816434032524244, 0.00350006571141655, 0.0429536839322982, 0.0170362190211201, -0.0106893926364396, -0.0554451214834525, 0.00816434032524226, 0.00350006571141662, 0.0429536839322982, 0.01703621902112, -0.0106893926364395, -0.0554451214834526, 0.0109307476183435, 0.0010862397902371, 0.0109307476183434, -0.0331158101767776, 0.209092934996116, -0.142861314642561, -0.0331158101767773, 0.209092934996116, -0.142861314642561, -0.0212477054192934, -0.0212477054192936, -0.091662414814383, -0.0443367802907669, -0.0443367802907672, 0.279942041876281, 0.867262325800607},
    {-0.0273059160603584, -0.0273059160603585, 0.0055143044916419, 0.0230686829582336, -0.017812894403291, 0.0160562855400304, -0.0684704372430771, 0.0736060687804511, -0.0470087115710615, -0.0439318764271495, 0.0504470063733281, -0.00396475546079802, -0.00783308648760196, 0.073606068780451, -0.0470087115710615, -0.0439318764271495, 0.0504470063733281, -0.00396475546079791, -0.007833086487602, 0.0323677157521987, 0.0116077934365192, 0.0323677157521985, -0.179594378435846, 0.0393582813059976, 0.319830475565695, -0.179594378435846, 0.0393582813059976, 0.319830475565695, -0.115231015868122, -0.115231015868123, 0.205209043434423, -0.078975278645069, -0.0789752786450691, 0.0173075085100313, 0.783990655632163},
    {-0.0414952572760413, -0.0414952572760414, -0.0307674372271625, -0.0404060597147742, 0.132351652535693, -0.22451483832234, 0.223786114643475, 0.16267044412864, -0.236075956919999, 0.14358523664347, 0.0410700625241912, 0.0139336583010179, 0.0214398988443288, 0.16267044412864, -0.236075956919999, 0.14358523664347, 0.0410700625241912, 0.0139336583010179, 0.0214398988443287, 0.0263512982290836, 0.0146511550924151, 0.0263512982290835, -0.196746894006264, -0.120054329737058, 0.513548117749587, -0.196746894006264, -0.120054329737058, 0.513548117749587, -0.126236381465237, -0.126236381465238, 0.329501801898471, -0.0318714079092635, -0.0318714079092636, -0.0194478318636184, 0.274608464744932},
    {-0.030148903201228, -0.0301489032012281, -0.0382757664925027, 0.193565613495663, 0.190282673186367, -0.394592727959424, 0.499817125541642, 0.144932884372863, -0.285213118685387, 0.320691747849012, 0.0111093095019602, 0.00672042684182422, 0.00935827982346663, 0.144932884372863, -0.285213118685387, 0.320691747849012, 0.0111093095019602, 0.00672042684182424, 0.00935827982346659, 0.0071279347975892, 0.00485754998163775, 0.00712793479758904, -0.061910342178407, -0.0549565468376967, 0.178777231194511, -0.0619103421784069, -0.0549565468376967, 0.178777231194511, -0.0397228002574105, -0.0397228002574106, 0.114706719353092, -0.00304480852812401, -0.00304480852812402, -0.00270281436993934, 0.0248990378775178},
    {-0.0343769182305001, -0.0343769182305001, -0.0406552941435215, -0.0264567387485711, 0.0715572838247991, -0.134890782233763, 0.0993175900782414, 0.0078853898478469, 0.00721823609719223, 0.0217450095009147, 0.153109834695484, -0.274178701139661, 0.30420559279803, 0.00788538984784675, 0.00721823609719235, 0.0217450095009147, 0.153109834695484, -0.274178701139661, 0.30420559279803, 0.0335225090290039, 0.0146717704862732, 0.0335225090290039, -0.0449950266365199, 0.184098026164553, -0.0941079728915134, -0.0449950266365198, 0.184098026164553, -0.0941079728915133, -0.00985139974635135, -0.00985139974635147, -0.0206043940758698, -0.191283654427672, -0.191283654427672, 0.782640790551171, 0.128437924139626},
    {-0.0389187470326059, -0.0389187470326059, -0.0261022528933716, -0.0266548092172969, 0.103392980678712, -0.158623419731344, 0.106303963340101, 0.0432694866595338, 0.0132740412274197, 0.0232746353490286, 0.143370417395263, -0.186699769646704, 0.0750070855859965, 0.0432694866595337, 0.0132740412274198, 0.0232746353490286, 0.143370417395263, -0.186699769646704, 0.0750070855859966, 0.0313901201786518, 0.0156235469115312, 0.0313901201786518, -0.19942887543603, 0.521777821828825, -0.122920070956765, -0.19942887543603, 0.521777821828826, -0.122920070956765, -0.0436637939734227, -0.0436637939734229, -0.0269126356036455, -0.144676927098488, -0.144676927098488, 0.378526989761577, 0.404334788592332},
    {-0.0416440845330915, -0.0416440845330915, 0.0194477483558447, 0.0230686829582336, -0.0931249229462171, 0.258170653831508, -0.108724843916401, 0.0988371868179026, -0.0509432594584426, -0.0238046730904876, 0.107564222799895, -0.0690854479984978, -0.0221894645842941, 0.0988371868179025, -0.0509432594584425, -0.0238046730904876, 0.107564222799895, -0.0690854479984977, -0.0221894645842942, 0.0235505618380349, 0.0136322151644979, 0.0235505618380348, -0.309048621426053, 0.342910185746873, 0.275187057105233, -0.309048621426053, 0.342910185746873, 0.275187057105233, -0.0676644006752471, -0.0676644006752472, 0.0602506078386308, -0.0736389703529618, -0.0736389703529619, 0.0817073795230784, 0.365511894813098},
    {-0.035603940049537, -0.0356039400495371, 0.00142320657028388, -0.0404060597147742, -0.00728506876419385, 0.017093937787867, 0.355352052140279, 0.130111458040874, -0.16881787441171, 0.0778022678950679, 0.0521624458534589, -0.000758628047271465, -0.000639454263807781, 0.130111458040874, -0.16881787441171, 0.0778022678950679, 0.0521624458534589, -0.00075862804727136, -0.000639454263807804, 0.0114206645547968, 0.00749212826200686, 0.0114206645547967, -0.223408784471073, 0.00495287498050894, 0.441864693961637, -0.223408784471073, 0.00495287498050893, 0.441864693961637, -0.0489140557788821, -0.0489140557788822, 0.0967437083475861, -0.0196099315498982, -0.0196099315498983, 0.000434743600494279, 0.128027878342123},
    {-0.0190914618206941, -0.0190914618206941, -0.0414545183650565, 0.193565613495663, 0.218312526315296, -0.496518111503194, 0.793664260801162, 0.0893574291686465, -0.168781804564629, 0.173768180219252, 0.0108761825431592, 0.00500425006863677, 0.00581778820286798, 0.0893574291686464, -0.168781804564629, 0.173768180219252, 0.0108761825431591, 0.00500425006863681, 0.00581778820286794, 0.0023812769978447, 0.00170109878674946, 0.00238127699784453, -0.0581761563588039, -0.037470364883151, 0.153822677600759, -0.0581761563588039, -0.037470364883151, 0.153822677600759, -0.0127373315416966, -0.0127373315416967, 0.0336785818428493, -0.00155033044537089, -0.0015503304453709, -0.000998543924408102, 0.0116084221772977},
    {-0.0326406157545149, -0.0326406157545149, 0.256494600498464, -0.0264567387485711, 0.294923085078977, -0.257360821304334, 0.128736049066641, 0.0064272205190965, 0.00459034567367243, 0.00703578000671513, 0.161762228976998, -0.332665821692273, 0.405671749578322, 0.0064272205190963, 0.00459034567367257, 0.00703578000671514, 0.161762228976998, -0.332665821692273, 0.405671749578322, 0.00884075179197753, 0.00593350265065459, 0.00884075179197748, -0.0370896576596455, 0.113648038034127, -0.0394687227148358, -0.0370896576596455, 0.113648038034127, -0.0394687227148355, -0.00202705204726707, -0.00202705204726725, -0.0021570745116148, -0.0510174587045982, -0.0510174587045983, 0.156324820802352, 0.0174290044518853},
    {-0.0296117205882895, -0.0296117205882894, -0.00474578684781537, -0.0266548092172969, 0.669144967779083, -0.31338587445254, 0.13779182750758, 0.0289705339871302, 0.00724008938007478, 0.00753070326528907, 0.124425189390175, -0.201185490545444, 0.157066693639851, 0.02897053398713, 0.007240089380075, 0.0075307032652891, 0.124425189390175, -0.201185490545445, 0.157066693639851, 0.00680017964035816, 0.00464794699527493, 0.00680017964035809, -0.140994706973029, 0.333541881262225, -0.0515524673161672, -0.140994706973029, 0.333541881262226, -0.0515524673161672, -0.00770574945841275, -0.00770574945841286, -0.00281748446895518, -0.0330953283837361, -0.0330953283837361, 0.0782914360906759, 0.0548681620139454},
    {-0.0238587390077675, -0.0238587390077675, -0.0175985869100488, 0.0230686829582336, 0.13722625562885, 0.575928446322043, -0.140929787262841, 0.0516830959726855, -0.0230765940922684, -0.00770220141726747, 0.0729071283557038, -0.0698125040759921, 0.01057963683076, 0.0516830959726854, -0.0230765940922683, -0.0077022014172675, 0.0729071283557039, -0.0698125040759921, 0.01057963683076, 0.00398457556955577, 0.0027972829427246, 0.00398457556955567, -0.181462043216282, 0.247511105811688, 0.115412980620876, -0.181462043216282, 0.247511105811688, 0.115412980620876, -0.00991740095253245, -0.00991740095253251, 0.00630763758446105, -0.0139900524648019, -0.013990052464802, 0.0190821909339991, 0.0495999019338641},
    {-0.0157278293793882, -0.0157278293793882, 0.0200527846384615, -0.0404060597147742, -0.121039277759041, 0.409587603262319, 0.460609436699216, 0.0545185779694686, -0.065209505751949, 0.0251735756155997, 0.0283309362059151, -0.00702143791948672, -0.00343759576377359, 0.0545185779694685, -0.0652095057519489, 0.0251735756155996, 0.0283309362059151, -0.00702143791948664, -0.00343759576377362, 0.00154836377203032, 0.00111786707593419, 0.00154836377203017, -0.111857917565132, 0.0383985389692675, 0.185317296160997, -0.111857917565132, 0.0383985389692675, 0.185317296160997, -0.00611334358715737, -0.00611334358715741, 0.0101281011548917, -0.00317683904502402, -0.00317683904502404, 0.00109054397332603, 0.0173733613069339},
    {-0.00694959127879995, -0.00694959127879991, -0.0373255322657574, 0.193565613495663, 0.206363312425294, -0.508716820740598, 1.02875232011214, 0.0318555707589297, -0.0582963548319232, 0.0562241505637624, 0.00502580017102015, 0.00177090710663465, 0.00177936232736484, 0.0318555707589295, -0.0582963548319232, 0.0562241505637624, 0.00502580017102011, 0.0017709071066347, 0.00177936232736479, 0.000274673835474915, 0.000202936928471311, 0.000274673835474745, -0.0260456261138863, -0.0124217154086331, 0.0645129676364055, -0.0260456261138862, -0.0124217154086331, 0.0645129676364058, -0.00142346527490204, -0.00142346527490209, 0.00352581154354914, -0.000224577737946736, -0.000224577737946737, -0.000107105920037716, 0.00157526091427274},
    {-0.0126271398155742, -0.0277140447911064, -0.0284861396506215, -0.0264567387485711, 0.00553719265411168, 0.00387645332275325, 0.00568515050333966, 0.103801960721004, -0.157420166190056, 0.105479347123269, 0.115372225079874, -0.171836446844088, 0.114185461723149, 0.003257949451411, 0.00367985906664891, 0.0316431114534618, 0.00362109612184811, 0.00401685452508367, 0.0342548886603178, 0.0671839478266715, -0.163121764729731, 0.64215295174539, 0.0561706681825989, -0.0256631078548465, -0.0261306397937107, -0.00131304741694846, -0.00769876382666736, -0.00783902033804157, -0.0243616038309396, 0.312641628866867, -0.145441135965869, -0.0270770650281287, 0.347490164197526, -0.158760396677319, 0.051896310276892},
    {-0.0234599611173094, -0.036182050867274, -0.0255216716723957, -0.0266548092172969, 0.0246968634917941, 0.00606875645427747, 0.0060850653969137, 0.179952332893617, -0.18696061832771, 0.112899161577485, 0.0341311625622493, -0.100605831836208, 0.0869082226043883, 0.0287184488864875, 0.0104029545786962, 0.0338690070637593, 0.00544696493631907, 0.00559795912265068, 0.026071896054486, 0.101060175091016, -0.172456730934776, 0.18997143177811, 0.160786953747622, -0.0968335485725666, -0.0341307967741618, -0.00894658667501576, -0.0290494286652632, -0.0102390148950968, -0.165990349931469, 0.894927846626024, -0.189969395829684, -0.0314830240107241, 0.169738993229578, -0.102224892396147, 0.163374515627626},
    {-0.0371334490119634, 0.0142516980277666, -0.020187906127168, 0.0230686829582336, 0.0433835769156871, -0.0191358805337486, -0.00622364176003377, -0.0742448752547494, 0.315595803207861, -0.115470235870068, -0.00462519175889462, -0.0317228826959172, 0.0501434353232526, 0.0941935371605897, -0.0541774865549499, -0.034640312467274, 0.00586792247035835, 0.00544578233700518, 0.0150427013047287, 0.108870403831838, -0.0898137949654952, -0.0257434624174615, 0.109594079865224, -0.123290550897265, 0.0764102513758065, -0.0188137222613497, -0.0369863556193763, 0.022922573626153, -0.349060089072391, 0.609992238864691, 0.425293595842598, -0.0217452025045106, 0.0380003477210528, -0.0427494241530002, 0.147687833092772},
    {-0.0409323784102904, 0.00638473930951459, -0.0130520026587977, -0.0404060597147742, 0.0450304029511844, -0.053477017443967, 0.0203411087250161, -0.0337564627061268, 0.0846428086527525, 0.37739842891015, -0.000774667128329117, -0.00118994144645199, 0.0191729745844869, 0.155250849713371, -0.213621118662252, 0.113217050295249, 0.00356280606072757, 0.00300316857367659, 0.00575176646630446, 0.0661024641285422, -0.0047533807060203, -0.00431173779245639, 0.00641191382821819, -0.0751606029574703, 0.122691062199162, -0.0161823576810782, -0.0225476873071008, 0.0368065129467912, -0.300239109257121, 0.0356882203517942, 0.68288903754282, -0.00689009895986791, 0.000818998466035462, -0.0096003190588067, 0.051730628185115},
    {-0.0255781559034303, -0.0409997915183175, -0.00567499956394003, 0.193565613495663, 0.0259638427028639, -0.0473788984736528, 0.0454310335985984, 0.218085988961728, -0.504176529159724, 0.842903940766471, 0.00151946038197772, 0.0014264148996648, 0.00335626351580567, 0.121442089297963, -0.234455394972281, 0.252865646874596, 0.000846117828437107, 0.000663320581885522, 0.00100685701413862, 0.0156984333273984, 0.00705864170483459, 0.00845719989080236, -0.00994758860206491, -0.0173438543621095, 0.0427114181401306, -0.00462589128971524, -0.00520304241143497, 0.0128131449558945, -0.0858263985827231, -0.0553675148342018, 0.237728475921549, -0.000597974280672988, -0.00038575951458245, -0.00067258077382972, 0.00469047038227805},
    {-0.0249565292980644, -0.0324041991309082, -0.0207049086523349, -0.0264567387485711, 0.00512462883169011, 0.00536188113781912, 0.0282778227723029, 0.0290254836500228, -0.0981240834186822, 0.0881002806637313, 0.160464578117202, -0.148153922350204, 0.0882660014245901, 0.00604184678738171, 0.00607574336483798, 0.0264295056440364, 0.0334017654098674, 0.00917354006613421, 0.0264792207840047, 0.104064055106665, -0.167878620871496, 0.149976167089158, 0.174152149243713, -0.0296484321034246, -0.108558517593135, -0.0107833238118003, -0.00889433492959201, -0.0325668423734901, -0.0335957213522823, 0.162769080505944, -0.101462831015625, -0.185730695079488, 0.899853113520492, -0.153194973792325, 0.180077810401831},
    {-0.0328037714586734, -0.00335768559689348, -0.0297236815267526, -0.0266548092172969, 0.0351774825315191, 0.0120047522387558, 0.0302669913049301, 0.00970388431266669, -0.112584145831108, 0.0942975861431182, 0.00915468093161175, -0.119840537958869, 0.103393605903581, 0.0381271103420097, 0.0126102731283714, 0.0282886565901094, 0.0359692591934385, 0.0134230437541298, 0.0310174027846307, 0.112063147708538, -0.125885306539981, 0.00855630552958866, 0.481594934920914, -0.159988659068097, -0.141794794590806, -0.0539422635555037, -0.0479955470739246, -0.0425375072099568, -0.168058502846676, 0.450116550808097, -0.132526692528935, -0.158547023215991, 0.424641645748689, -0.141068442713084, 0.566902057057851},
    {-0.0407169244982235, 0.0234342855627475, -0.0397189812555842, 0.0230686829582336, 0.0984497965965412, -0.0544785376003364, -0.0309562673116839, -0.0978204961038315, 0.166049912400659, -0.0964450431852937, -0.0303107808306083, -0.047517881135584, 0.0950415280461933, 0.099672437091347, -0.0540299424420024, -0.0289328796003985, 0.030884625572964, 0.015461546143588, 0.0285118342755608, 0.0962218415145262, -0.0471266024348213, -0.0283295839106241, 0.286812799284425, -0.293168052564464, 0.31744280598414, -0.0933242228973651, -0.0879484905329413, 0.0952307571463898, -0.290754005221206, 0.268065917185613, 0.29669386147487, -0.0900933984072929, 0.0830632391737671, -0.0849037704350175, 0.512469989955714},
    {-0.038824229224894, -0.00845414648597809, -0.0397405972089105, -0.0404060597147742, 0.148813736423541, -0.200637348699184, 0.101176260361138, 0.0409046503519658, -0.0859340091226231, 0.315217228925193, 0.0046691183607868, 0.00453257711872142, 0.0529220359416226, 0.144373886169673, -0.192520475532932, 0.0945630986440837, 0.0164797585832577, 0.0101544651668789, 0.0158762632431524, 0.0513431096922212, 0.00434920969571942, 0.00436393180135333, -0.0323792426830043, -0.235529178416942, 0.509714264151844, -0.0725401649751159, -0.0706572068035244, 0.152910931948857, -0.226000740762852, -0.0302628453445956, 0.476397922489345, -0.0257971697390767, -0.00345439468696771, -0.0251275408296196, 0.17950290116164},
    {-0.0223221930862673, -0.0416227987271911, -0.0235167508261139, 0.193565613495663, 0.111110855045382, -0.212909749655552, 0.225973035491151, 0.215301987909138, -0.475633610993708, 0.704024776218104, 0.00746128548883349, 0.00604708911874125, 0.0119964688656596, 0.105185433623048, -0.200733059401549, 0.211202809530411, 0.00364519880726563, 0.00255207090336348, 0.00359886187881332, 0.0113567101887967, 0.00570124525176763, 0.00697359512175867, -0.0466779452874253, -0.0650977632975983, 0.17744258365649, -0.0196996312866688, -0.019528901491869, 0.0532316098304128, -0.0613747055175497, -0.0436269449865273, 0.165844442975822, -0.00212693902228508, -0.0015118907851769, -0.0021085055877937, 0.016275716552654},
    {-0.039027197902714, 0.0204785007083074, 0.0196804606852359, -0.0264567387485711, -0.00832019668364343, -0.0348389537831829, 0.0625461354887268, -0.00851571579357297, -0.0333053616823686, 0.0617399069520701, -0.104129884165233, 0.326737978236299, -0.100427651936955, 0.00863984186151973, 0.00744901063083614, 0.0185215666392738, 0.105647693518024, -0.0730775632041425, -0.0301276360720808, 0.104285879799548, -0.0698607279807283, -0.0308356155601946, 0.13074403767017, 0.135001418728343, -0.168270155447476, -0.0292419501644121, 0.0404995390633587, -0.0504799416031008, -0.0288650172890901, 0.0387167710278796, -0.0498292480129827, -0.352960453307861, 0.473427364194998, 0.488843445330789, 0.195610458802931},
    {-0.0412289201478098, 0.0229180783083817, 0.0231559130793075, -0.0266548092172969, -0.0414127978223251, -0.034443202117008, 0.0669458661735615, -0.040500387201195, -0.0325826767811744, 0.0660829244858203, -0.0845106204926891, 0.0995092818183705, -0.085300617797373, 0.0445075575635087, 0.0130053645486454, 0.019824443378776, 0.0928722307670984, -0.0397190965835419, -0.0255896251695322, 0.0916750945711955, -0.0375735822013698, -0.0250258321629454, 0.308280423369521, 0.321683063451447, -0.219787748178931, -0.123050027966021, 0.096502806540785, -0.0659348811061901, -0.1214638956941, 0.0912899951436844, -0.0650849711590208, -0.253454100119439, 0.190491367305736, 0.198773071368574, 0.615800310043552},
    {-0.0407212506634907, 0.00445003802812047, 0.0055143044916419, 0.0230686829582336, -0.017812894403291, 0.0160562855400304, -0.0684704372430771, -0.0142731556284249, 0.0126780247385569, -0.0675878436185247, -0.00978231801921583, 0.0010692755902986, -0.0120509631645791, 0.0946630119350778, -0.0471952503297709, -0.0202759092357742, 0.0648786933676808, -0.00398048830131886, -0.00361520981062484, 0.0640423978299101, -0.00314298902008453, -0.00289680335425577, 0.0484357451336121, 0.0605515078877836, 0.492049371094326, -0.180307040223523, 0.0181650547242117, 0.147611580037063, -0.1779828569618, 0.0143431064798043, 0.145708845883514, -0.121983179760304, 0.00983025986835719, 0.0122892102994557, 0.556673193850381},
    {-0.032584246211307, -0.0313667839702794, -0.0307674372271625, -0.0404060597147742, 0.132351652535693, -0.22451483832234, 0.223786114643475, 0.134459259594934, -0.22671291901406, 0.22090147996024, 0.0339474710854873, 0.0133810337451634, 0.0329846263837701, 0.117677353552572, -0.149900211650407, 0.0662689933266994, 0.0297104756427882, 0.00884739960662257, 0.00989517130488741, 0.0293275034077542, 0.00893401881804112, 0.0100527449542905, -0.188943690958862, -0.184699901845772, 0.790078018420279, -0.124927592957268, -0.0554087576283442, 0.237018217078895, -0.123317258606937, -0.0559512292137642, 0.233963018722939, -0.0311344051983628, -0.0141262323000572, -0.0138089486133686, 0.194985960648534},
    {-0.0166949234470742, -0.0380744421614197, -0.0382757664925027, 0.193565613495663, 0.190282673186367, -0.394592727959424, 0.499817125541642, 0.189049666937128, -0.391279045283166, 0.493374412069855, 0.0144909229560623, 0.00921963972304151, 0.0143974263037846, 0.0777809136606013, -0.145888070814491, 0.148009083628169, 0.00596201646672433, 0.00343753510190096, 0.00431913334314861, 0.00588516523084977, 0.00340866761471971, 0.00429114593728428, -0.0849337495146656, -0.0845489606991819, 0.275043283538423, -0.0316674787804405, -0.0253641329762115, 0.0825111788505982, -0.0312592804980485, -0.0251511318687753, 0.0814475980799758, -0.00239606783073458, -0.00192786964437965, -0.00191913551123336, 0.0176795818158101},
    {-0.0388609269646537, -0.00825021336394416, -0.0406552941435215, -0.0264567387485711, 0.0715572838247991, -0.134890782233763, 0.0993175900782414, 0.00217839861878957, 0.00257050400901614, 0.0334540297651137, 0.0422977505056149, -0.0976384591715589, 0.468010968482276, 0.0078795701671042, 0.00589174064932518, 0.0100359892367157, 0.152996834530156, -0.223792873623523, 0.140400217113785, 0.0515352884852302, 0.00426463891240281, 0.00427416501424581, -0.0160232908424758, 0.283229163305198, -0.144782228129851, -0.0367262893430388, 0.0849668890239083, -0.0434337176531757, -0.0123708436327972, -0.00161914495010566, -0.0146301665398266, -0.240203447161016, -0.031438777339132, 0.555714721066932, 0.091197451052101},
    {-0.0363573468678739, -0.0198488651832077, -0.0261022528933716, -0.0266548092172969, 0.103392980678712, -0.158623419731344, 0.106303963340101, 0.0247556540621011, 0.00927424233248076, 0.0358073121883813, 0.0820261281050845, -0.130442483751308, 0.115396099214526, 0.0364627551749934, 0.00947054301501533, 0.0107419585096759, 0.120816788744321, -0.133203458467504, 0.0346180719574671, 0.0406957966216644, 0.00778801235936355, 0.00828869627367673, -0.139335993251802, 0.802739165577439, -0.189108756762996, -0.142285209974459, 0.240816478080212, -0.056731385150534, -0.0479271964399367, -0.0140798274249359, -0.0191093384963021, -0.158803412951156, -0.0466525233047003, 0.268773392686982, 0.287098240946532},
    {-0.0306200848898892, -0.0353856505415787, 0.0194477483558447, 0.0230686829582336, -0.0931249229462171, 0.258170653831508, -0.108724843916401, 0.0909039607293701, -0.053418281906734, -0.0366227589868137, 0.098930515933258, -0.0724418888007601, -0.0341378102706135, 0.0675319354986142, -0.0309986215928049, -0.0109865871941614, 0.0734948088867031, -0.042038018038909, -0.0102411188979748, 0.024755912040759, 0.0086981175632316, 0.00999687560186186, -0.324063410110059, 0.527556796894204, 0.423366841894701, -0.18805395200869, 0.158263574599543, 0.127007272315765, -0.063343890070126, -0.0327464338725474, 0.0427809924212845, -0.0689369712339988, -0.035637848692095, 0.0580163903657519, 0.259532014079741},
    {-0.0211218344402416, -0.0413330967980875, 0.00142320657028388, -0.0404060597147742, -0.00728506876419385, 0.017093937787867, 0.355352052140279, 0.157864947105883, -0.219648979514327, 0.119696401413183, 0.0632889822277057, -0.00098705114606372, -0.00098378076008449, 0.073992786495107, -0.0899360086693542, 0.0359081343769532, 0.0296641416306708, -0.000404151390212483, -0.000295127767531074, 0.00999203742546733, 0.00519315335829096, 0.006395317727097, -0.290677226535459, 0.0076198461543033, 0.679795270879218, -0.11901876176926, 0.00228590380671457, 0.203934117044056, -0.0400901511575047, -0.0293727779195008, 0.0686929477078466, -0.0160723764878061, -0.011775718763449, 0.00030869004222766, 0.0909062977046966},
    {-0.00968209848012827, -0.0266278562476348, -0.0414545183650565, 0.193565613495663, 0.218312526315296, -0.496518111503194, 0.793664260801162, 0.126759861966115, -0.245715646165504, 0.267337012340233, 0.0154286376713808, 0.00728527901666091, 0.00895048860280727, 0.0445686382427207, -0.0820828851711445, 0.080199348098271, 0.00542469327662728, 0.00243369411063693, 0.00268508780292865, 0.00182724782387433, 0.00120438047899993, 0.00155905556593924, -0.0846939152475718, -0.0576470064111895, 0.236651468687049, -0.0282925447705456, -0.0172937233551124, 0.0709938865144692, -0.00953003022061846, -0.00855827473431765, 0.0239135040502403, -0.00115995221981645, -0.00104167453261514, -0.00070901691443236, 0.00824256947780742},
    {-0.018585063518479, -0.0398714950680977, 0.256494600498464, -0.0264567387485711, 0.294923085078977, -0.257360821304334, 0.128736049066641, 0.00814813477108335, 0.00616862571740942, 0.0108243316129863, 0.20507471910435, -0.447044969785973, 0.624113536703126, 0.00353082203659192, 0.00238662360542696, 0.00324722840044395, 0.0888647963864358, -0.172960417191054, 0.187229962453518, 0.00747189331800402, 0.00414565073336081, 0.00517278926079169, -0.0498420450994393, 0.174844018669228, -0.0607214186058459, -0.0192837443583843, 0.052452057399026, -0.0182160268238253, -0.00162140787439513, -0.00125721198962161, -0.00153163248710619, -0.0408080835352963, -0.0316418914106896, 0.110998564394833, 0.0123754785904179},
    {-0.0163084975755771, -0.0376359379261082, -0.00474578684781537, -0.0266548092172969, 0.669144967779083, -0.31338587445254, 0.13779182750758, 0.037995604758809, 0.00997162717358054, 0.0115857558571598, 0.163186854623018, -0.277088665503788, 0.241642287804682, 0.015476911465685, 0.00369162422462757, 0.00347565067341832, 0.066471596317428, -0.102581776488159, 0.0724910994750196, 0.00558903746542613, 0.00326405021199659, 0.0041162129236749, -0.194189129108341, 0.513143947956848, -0.0793118888261495, -0.071891305270117, 0.153939814567603, -0.0237930458061847, -0.00604473520801719, -0.00489821195904212, -0.00200055710701352, -0.0259614587499538, -0.0210372701776152, 0.055590896991734, 0.0389591824463452},
    {-0.0125039973795696, -0.0320953472655637, -0.0175985869100488, 0.0230686829582336, 0.13722625562885, 0.575928446322043, -0.140929787262841, 0.0711243588603503, -0.0328899499342602, -0.0118496005007185, 0.100332084660509, -0.0995003749107849, 0.016276446576188, 0.0264907481816321, -0.0114343437918563, -0.00355480233381648, 0.0373693630686833, -0.0345917672852214, 0.00488282708533201, 0.00314207544005114, 0.001975456328671, 0.00253076894271223, -0.258629046058044, 0.380788240201602, 0.177559328673039, -0.0899135885916037, 0.114233971421774, 0.0532666325687127, -0.00756007743351914, -0.00652363956815731, 0.00447874312604069, -0.0106646772112093, -0.00920261873617939, 0.0135493249780213, 0.0352184501509476},
    {-0.00781686379284147, -0.0224172392883417, 0.0200527846384615, -0.0404060597147742, -0.121039277759041, 0.409587603262319, 0.460609436699216, 0.0787502465351572, -0.0961276701025704, 0.0387287735102248, 0.0409230815234591, -0.0103505533462799, -0.00528863558311498, 0.0267417912642989, -0.0313547065949564, 0.0116183777209745, 0.0138965470222836, -0.00337612014232486, -0.00158655594443221, 0.00116844376019957, 0.000792354457711021, 0.00103224072449089, -0.164893766239597, 0.0590749737571152, 0.28510497277546, -0.0537846767144483, 0.0177221041814198, 0.0855296195465344, -0.00452230110117071, -0.00415926793366312, 0.00719146634852059, -0.00235004339388594, -0.00216139083007462, 0.000774341622957466, 0.0123359691307153},
    {-0.00330330498807966, -0.010377765989116, -0.0373255322657574, 0.193565613495663, 0.206363312425294, -0.508716820740598, 1.02875232011214, 0.0478241068894886, -0.0882267290306918, 0.0864991301291097, 0.00754512943443968, 0.00268012197136593, 0.00273749433220901, 0.0150615693989048, -0.0273436744040654, 0.0259491709984151, 0.0023762386376213, 0.000830636966295346, 0.000821230322520621, 0.000199797921341376, 0.000144057321402431, 0.000190317776272947, -0.0394179087905203, -0.0191104279350489, 0.0992512208124514, -0.0122165977986351, -0.00573300288221727, 0.02977471446036, -0.00102719095943705, -0.000994274360901206, 0.0025035053144599, -0.000162058201332348, -0.000156865004581845, -7.60506444296494e-05, 0.00111851527565565},
    {-0.0308956026377742, 0.30566354512252, -0.0284861396506215, -0.0264567387485711, 0.00553719265411168, 0.00387645332275325, 0.00568515050333967, 0.31668333287907, -0.266830935779784, 0.130690033482262, 0.351982375922268, -0.291266875281556, 0.141477002112519, 0.00604849035520931, 0.00428125822656395, 0.00643242509446904, 0.00672268409775301, 0.00467332883378222, 0.00696334827094772, 0.154540818103216, -0.32168288951279, 0.398248079160478, 0.095210622103163, -0.0317968637110469, -0.0323761407582661, -0.00152763868231458, -0.00156500797046702, -0.00159351937348625, -0.035117302597923, 0.107725414571986, -0.0366317655360567, -0.0390316455622191, 0.119733005913318, -0.0399864425485489, 0.0130709476216942},
    {-0.0278698977200172, 0.00669084371150369, -0.0255216716723957, -0.0266548092172969, 0.0246968634917941, 0.00606875645427747, 0.0060850653969137, 0.726880420362404, -0.325409773332621, 0.139883262544633, 0.137865808082476, -0.175107042470173, 0.107680212589653, 0.0271328435929705, 0.00672966104875488, 0.00688490609661075, 0.00514622667323368, 0.00362131423099475, 0.00529990606922176, 0.118301272030906, -0.194176690389937, 0.155987336317311, 0.279853835753503, -0.119977797078753, -0.0422884203860176, -0.00578753808936733, -0.00590518015907653, -0.00208139128324106, -0.133043715594683, 0.316638730113968, -0.0478469472948314, -0.0252341084543328, 0.0600561704160454, -0.025747036870525, 0.0411485850360965},
    {-0.022268867468283, -0.0205345190513158, -0.020187906127168, 0.0230686829582336, 0.0433835769156871, -0.0191358805337486, -0.00622364176003377, 0.167093720255385, 0.600939576151325, -0.143068850951722, 0.0104093446885927, -0.0604049087085828, 0.0621282499374311, 0.0480669960341637, -0.0213449189181002, -0.00704169738562068, 0.00299440295601836, 0.00214553663930318, 0.00305788669055022, 0.0688352264995517, -0.067378027176018, 0.0117775826607491, 0.208682812741731, -0.152758304485709, 0.0946731145294436, -0.00741225556502819, -0.00751860203093293, 0.00465971047251587, -0.170392661971493, 0.236112757380085, 0.107117255262284, -0.0106148570284823, 0.0147089853118772, -0.0107671524426325, 0.037197633519944},
    {-0.014551889869055, 0.0207507657939298, -0.0130520026587977, -0.0404060597147742, 0.0450304029511844, -0.053477017443967, 0.0203411087250161, -0.126761056765116, 0.441928259975204, 0.467600669283436, -0.00290900218672419, -0.00621279895212721, 0.0237555195281293, 0.0503360898201807, -0.0600144777647141, 0.0230148099219634, 0.00115514811169, 0.000843706814744121, 0.00116922152266206, 0.0265545028764067, -0.00697230141826367, -0.00329137085372822, 0.0334772199353671, -0.0931247868417252, 0.152015531609652, -0.00454625343839336, -0.00458350342284591, 0.0074820435363014, -0.104509109078725, 0.0378775741255779, 0.171996945322831, -0.00239834878787681, 0.000869241301477038, -0.00241799979419899, 0.0130292178352812},
    {-0.00638364542619706, -0.036894852459273, -0.00567499956394003, 0.193565613495663, 0.0259638427028639, -0.0473788984736528, 0.0454310335985984, 0.204659584876928, -0.507343961262246, 1.04436695187696, 0.0014259152203816, 0.00143537619017202, 0.00415844620979052, 0.0292366119663362, -0.0534353517327496, 0.0514026357641058, 0.000203698888670483, 0.000151179155458607, 0.000204674320153793, 0.00468262266144135, 0.00161886059114075, 0.00161334213417557, -0.0100100832039723, -0.0214892201090949, 0.0529199015640963, -0.00105429916924107, -0.00105767666444951, 0.00260466153192863, -0.0242361910467486, -0.0113258409537497, 0.0598758647845398, -0.000168859688239799, -7.89100056528683e-05, -0.000169400637910023, 0.00118137286371128},
    {-0.0273944922839774, -0.011025911508692, -0.0207049086523349, -0.0264567387485711, 0.00512462883169011, 0.00536188113781912, 0.0282778227723029, 0.126397002975774, -0.17165599760043, 0.109157185209764, 0.698773601926539, -0.259177038433349, 0.109362514995889, 0.00530923083978021, 0.0036999255867126, 0.00537260109800335, 0.029351569024812, 0.00558638072303256, 0.00538270721270621, 0.113302027600821, -0.178843158089469, 0.132762407176673, 0.304657734076697, -0.0367347228625228, -0.13450515845961, -0.00656668547127658, -0.00180804417049383, -0.00662020150701516, -0.0253485180939921, 0.0578829738695039, -0.0255550990557524, -0.140136829790449, 0.320000420807172, -0.0385846983660778, 0.045355587228323},
    {-0.0244753130251873, -0.0400796207547676, -0.0297236815267526, -0.0266548092172969, 0.0351774825315191, 0.0120047522387558, 0.0302669913049301, 0.23522331288152, -0.204904421568362, 0.116835712643712, 0.22191055743483, -0.218111137493024, 0.128105777916878, 0.0236247260194702, 0.0057829048139266, 0.00575053008951585, 0.0222876553178488, 0.00615563069515605, 0.00630523077133374, 0.0860341243033995, -0.105068053208744, 0.0421615523278778, 0.876508240496471, -0.198227651010737, -0.175685259324049, -0.0247372100836885, -0.00975655513128464, -0.00864704247671403, -0.0954898205714346, 0.166530824286541, -0.0333790484772362, -0.0900854556156694, 0.157105805520739, -0.0355304301199563, 0.142783698010478},
    {-0.0192801894065167, 0.0102723306758721, -0.0397189812555842, 0.0230686829582336, 0.0984497965965412, -0.0544785376003364, -0.0309562673116839, -0.0564785835866364, 0.352177395909631, -0.11949643476987, -0.0175005242960598, -0.100781285551626, 0.117757464577843, 0.0413568083073288, -0.0181908408918032, -0.00588148801582206, 0.0128148721626432, 0.00520560476519477, 0.00579589774391145, 0.049467576954588, -0.0336517170080884, -0.00332498498225044, 0.608304956655548, -0.363238336703044, 0.393315014495556, -0.0314204682320264, -0.0178782063943613, 0.0193585486349736, -0.12128832894236, 0.115573957173589, 0.0747272764156989, -0.037582552760521, 0.0358118904027677, -0.0213844246405819, 0.129074077919252},
    {-0.0124102698498274, 0.00912511728278436, -0.0397405972089105, -0.0404060597147742, 0.148813736423541, -0.200637348699184, 0.101176260361138, -0.0492106437897535, 0.128663531590444, 0.39055750083735, -0.00561721756543102, -0.00678633971875518, 0.0655709656704383, 0.0427698343143904, -0.0507088224103504, 0.0192228267319272, 0.00488202238539691, 0.00267462964338709, 0.00322733351433671, 0.0188454332574342, -0.00171517066909918, -0.00106723454287009, 0.0484793826839232, -0.291823158304032, 0.631541397109155, -0.0191066759686631, -0.0143632269164339, 0.0310837989915453, -0.0737550052650136, 0.00921076515456774, 0.119988728653697, -0.00841886793603278, 0.001051375634067, -0.00632878846865112, 0.0452107867882593},
    {-0.00537606858025744, -0.0406159076210843, -0.0235167508261139, 0.193565613495663, 0.111110855045382, -0.212909749655552, 0.225973035491151, 0.217346756079598, -0.507458929034599, 0.87229418920046, 0.00753214688322398, 0.00645170840967715, 0.0148637525779309, 0.0245854244640886, -0.0448339756433919, 0.0429333965480547, 0.000852007325023573, 0.000570008174352201, 0.000731578166541981, 0.0032888925758728, 0.00135858380447914, 0.00143105856985444, -0.0498012326664731, -0.0806568214253449, 0.219853249301445, -0.00439993687100388, -0.00396984336412244, 0.0108209441854577, -0.0169845015228639, -0.00946190799271428, 0.0417706772585564, -0.000588597513558803, -0.000327902206051585, -0.000531062149718319, 0.00409930951603703},
    {-0.0209614117032462, -0.00588069770174656, 0.0196804606852359, -0.0264567387485711, -0.00832019668364343, -0.0348389537831829, 0.0625461354887268, 0.00349302620766802, -0.0658600199515992, 0.0764964016825789, 0.0427126061047168, 0.646111276941326, -0.124430929391771, 0.00400152580496322, 0.00272474454845848, 0.00376507190876494, 0.0489305219497224, -0.0267307568512311, -0.00612435861726501, 0.0598439668951063, -0.0505321770136862, 0.00257115858779138, 0.258541102529702, 0.167268194342736, -0.208488513147468, -0.0106962989107498, 0.00823276344896476, -0.0102615839031086, -0.0130819973384467, 0.0155633251325517, -0.0125503236613744, -0.159966220165598, 0.190307812351087, 0.123123340272851, 0.0492677426897371},
    {-0.0184718652791737, 0.0160155329372752, 0.0231559130793075, -0.0266548092172969, -0.0414127978223251, -0.034443202117008, 0.0669458661735614, -0.036169047347175, -0.0724944037069557, 0.0818774466205661, -0.075472578046094, 0.221401884724775, -0.105688373127378, 0.0176021151318451, 0.00422485121361458, 0.00402992124403017, 0.0367296654322384, -0.0129029273094945, -0.00520186983952712, 0.0449218359954094, -0.027157463995315, -0.00454320129074377, 0.685904525794328, 0.398568738617759, -0.272319358735951, -0.0399733554598201, 0.0196171313744727, -0.0134032705491699, -0.0488889974090572, 0.0412891994362848, -0.0163927308982087, -0.102014814964115, 0.0861566050386763, 0.0500642991881213, 0.155099535112544},
    {-0.0142538719043459, 0.019625155535545, 0.0055143044916419, 0.0230686829582336, -0.017812894403291, 0.0160562855400304, -0.0684704372430771, -0.0723235380733696, 0.0876260164567922, -0.0837420574397002, -0.0495680050107214, 0.00739045414443791, -0.0149312715941613, 0.0302890327371376, -0.0131335888893545, -0.00412169541459881, 0.0207590359443045, -0.00110769826546353, -0.00073490138104265, 0.0253891234003551, -0.00604518312760963, -0.00298383108374499, 0.334770714499961, 0.0750239625962771, 0.609654406640305, -0.0501762046732543, 0.00369260001571808, 0.0300065444910841, -0.0613674862179831, 0.0201520973788722, 0.0366991927248622, -0.0420591130547638, 0.0138115375776989, 0.00309524170946109, 0.140207388933764},
    {-0.00897333425654374, -0.019058139115592, -0.0307674372271625, -0.0404060597147742, 0.132351652535693, -0.22451483832234, 0.223786114643475, 0.0872667704762524, -0.165422120128656, 0.273699284264116, 0.0220325931913584, 0.00976353258237018, 0.0408683030760231, 0.03075310074583, -0.0361554636663503, 0.0134711890228238, 0.00776435926765645, 0.00213396519922832, 0.00201149461263439, 0.0094961189960898, 0.00157230163571773, 0.00132628973882767, -0.137863629824334, -0.228845143762455, 0.978915071973998, -0.0301321459013351, -0.0112635157116613, 0.0481811635251756, -0.0368528082257304, -0.0082989376695466, 0.0589274718534792, -0.00930437699442094, -0.00209526623473846, -0.00347801304318111, 0.0491104524580727},
    {-0.00381478498889275, -0.0407974245424921, -0.0382757664925027, 0.193565613495663, 0.190282673186367, -0.394592727959424, 0.499817125541642, 0.207221789959828, -0.444598645440034, 0.611296146508631, 0.0158838417532036, 0.010476000137812, 0.0178385643921465, 0.017406277472983, -0.0316348028115302, 0.0300873491893935, 0.00133421565824144, 0.000745405326831913, 0.000877995254786752, 0.00163179860956274, 0.000839868996894806, 0.000956155099287118, -0.0965076725717213, -0.104757061984402, 0.340781555015693, -0.00686687020511363, -0.00515603169099181, 0.0167729073733281, -0.00839845431548982, -0.005809444886416, 0.0205139302338837, -0.000643753339572001, -0.000445302124200664, -0.000483366150934786, 0.00445289629753894},
    {-0.0124384929539138, 0.00932435981520397, -0.0406552941435215, -0.0264567387485711, 0.0715572838247991, -0.134890782233763, 0.0993175900782414, -0.00274530159830419, -0.00403615898265437, 0.0414498988603882, -0.0533052495838724, 0.153310145658399, 0.579870570013429, 0.00233689276746121, 0.00155308751767146, 0.00204012014144114, 0.0453752157129888, -0.0589927390317729, 0.0285406155826316, 0.0189372104235514, -0.00176516193035215, -0.00109496327120842, 0.025159481968786, 0.35092394715196, -0.179386721267945, -0.00968120372976676, 0.0172721051771463, -0.00882922451508169, -0.00404042139090869, 0.000516810424742571, -0.00368485041650233, -0.0784524624906242, 0.0100348568971315, 0.139965981645223, 0.0229695926275672},
    {-0.0108112314285624, -0.00343000582694805, -0.0261022528933716, -0.0266548092172969, 0.103392980678712, -0.158623419731344, 0.106303963340101, 0.00466602892968341, 0.00205905019873312, 0.0443656408238899, 0.0154605604751188, -0.0289605999565852, 0.142976994846623, 0.0101628551970845, 0.00238940091495476, 0.00218362987416735, 0.0336739098154428, -0.0336069922318887, 0.0070371763253701, 0.0140537054411444, 0.000436243804043009, 0.000317581213946097, -0.0309351205533024, 0.994602368027882, -0.234307761919136, -0.0358983017508575, 0.0489532756297692, -0.0115323799943939, -0.0149820487555177, -0.000635449999028154, -0.00481300426249393, -0.0496419705742333, -0.00210551912277916, 0.067695042656643, 0.0723104600244307},
    {-0.00816939214277011, -0.0254802305902351, 0.0194477483558447, 0.0230686829582336, -0.0931249229462171, 0.258170653831508, -0.108724843916401, 0.0693603943777795, -0.0450703189999695, -0.0453759880842459, 0.0754847153641236, -0.0611210042829735, -0.0422971101827512, 0.0171871218319643, -0.00734069551356118, -0.00223335809672934, 0.0187046946755825, -0.00995490362348401, -0.00208181898583707, 0.00780634832064042, 0.00173788412922102, 0.00155056005752826, -0.273420273893854, 0.653648485037773, 0.524556022117167, -0.0445325221215017, 0.0321718864559735, 0.0258180920932991, -0.0185855147761849, -0.00561642914824799, 0.0107751034352764, -0.0202265616474851, -0.00611234349835369, 0.0146123914325404, 0.0653674479763473},
    {-0.00502599423716685, -0.0413033167094813, 0.00142320657028388, -0.0404060597147742, -0.00728506876419385, 0.017093937787867, 0.355352052140279, 0.162767434125055, -0.238242506157153, 0.148305115029899, 0.0652544179974327, -0.00107060610644982, -0.00121891483006993, 0.0171227627066026, -0.0199509940309113, 0.00729942076023668, 0.00686461589158589, -8.96551013660699e-05, -5.99936975456147e-05, 0.00286492688956203, 0.0012495456754498, 0.00134041565416249, -0.31528337206821, 0.00944107046730004, 0.842273574261528, -0.0264025793534473, 0.000464679493717818, 0.041455813661746, -0.0110190374433331, -0.00647635486434058, 0.0173014597122299, -0.00441759667172835, -0.00259640861016887, 7.77487137673428e-05, 0.022896260821635},
    {-0.00209476062722422, -0.0307812864125691, -0.0414545183650565, 0.193565613495663, 0.218312526315296, -0.496518111503194, 0.793664260801162, 0.148260957594398, -0.292641263819638, 0.331233402999376, 0.018045653884882, 0.00867658731539761, 0.0110897506202466, 0.0095350776675812, -0.0172667766101734, 0.0163029574391279, 0.00116056657225547, 0.000511946582509222, 0.000545825785489297, 0.000484358984172369, 0.000301734602309071, 0.000370682594362297, -0.100868360573134, -0.0714252543602303, 0.293213687890888, -0.00595155798029946, -0.00351547540607169, 0.0144316673106302, -0.00248386490399941, -0.00207197510408044, 0.00602301314340317, -0.000302324813502076, -0.000252191448058835, -0.000178577685041352, 0.00207602801312374},
    {-0.00431783986658358, -0.0415876825462491, 0.256494600498464, -0.0264567387485711, 0.294923085078977, -0.257360821304334, 0.128736049066641, 0.0087242984635425, 0.00688702196831929, 0.0134114620492585, 0.21957578109077, -0.49910768926269, 0.773283313112873, 0.000801066700129475, 0.000522361946184732, 0.000660097964171804, 0.0201614888717742, -0.0378559651934289, 0.0380601860437702, 0.0021003832634351, 0.00101303245225034, 0.00112588142272706, -0.0556466343187304, 0.216633599631123, -0.0752344837839615, -0.00422064635993336, 0.0106624764371303, -0.00370296164570971, -0.000439698428606019, -0.000285329791407385, -0.000385767078773827, -0.011066462972246, -0.00718126644549835, 0.0279568318739249, 0.00311696981125809},
    {-0.00371426824464878, -0.0405329728195472, -0.00474578684781537, -0.0266548092172969, 0.669144967779083, -0.31338587445254, 0.13779182750758, 0.041831590664637, 0.0113675331696384, 0.0143548747900384, 0.179661983215495, -0.3158776939024, 0.299397365884506, 0.00345414137402763, 0.000799034653613911, 0.000706531740539736, 0.0148351492186774, -0.0222033417422354, 0.0147360213951957, 0.00154549593671607, 0.000805388003440235, 0.000921222223451915, -0.221373235069479, 0.635790811838521, -0.0982682742064895, -0.0155605339842405, 0.0312929506859302, -0.00483666042584468, -0.00162106505915672, -0.00113509792207319, -0.0005038735320577, -0.00696229234466276, -0.00487511807663254, 0.0140014906444227, 0.00981251712160672},
    {-0.00276215668983154, -0.0361168933250247, -0.0175985869100488, 0.0230686829582336, 0.13722625562885, 0.575928446322043, -0.140929787262841, 0.0813133174158523, -0.0385404156710593, -0.0146817811109555, 0.114705211796885, -0.116594455636229, 0.0201666905041452, 0.00576529064950174, -0.00243318076694137, -0.000722621723579498, 0.00813284841940044, -0.00736098410062309, 0.00099258315737492, 0.000847263751839235, 0.000492587905316748, 0.000588154424001331, -0.303061298652316, 0.471800681544231, 0.219997897619223, -0.0191332374144272, 0.0232215300791448, 0.0108280636225289, -0.00199326209964856, -0.00155395592539945, 0.0011280458379249, -0.00281180941293535, -0.00219209902154626, 0.00341262251886706, 0.00887035156804354},
    {-0.00166934325119213, -0.0263257809398334, 0.0200527846384615, -0.0404060597147742, -0.121039277759041, 0.409587603262319, 0.460609436699216, 0.0933367349209928, -0.115553699595248, 0.0479853624886689, 0.048503045772689, -0.0124422523789915, -0.00655267576338936, 0.00566033118596418, -0.0065485009873638, 0.00236178874253032, 0.00294142818295286, -0.000705110284432646, -0.000322515764157829, 0.000306432057938004, 0.000198927168058583, 0.000248700826247155, -0.198216441830415, 0.0731945210967082, 0.353248095045939, -0.0112330506905861, 0.00360255684182678, 0.017386497276055, -0.0011702365741875, -0.0010163607681472, 0.0018112902336054, -0.000608121102272686, -0.000528158531587121, 0.000195030797776843, 0.0031070186976706},
    {-0.000684999674742352, -0.0125964445065001, -0.0373255322657574, 0.193565613495663, 0.206363312425294, -0.508716820740598, 1.02875232011214, 0.0582613106027224, -0.108078195915314, 0.107173342659665, 0.00919178962470603, 0.00328316317153115, 0.00339178460704533, 0.00311203997815354, -0.00561925159590034, 0.00527495846785994, 0.000490981347431758, 0.000170699739526435, 0.000166940047684299, 5.1149446916601e-05, 3.62655983429209e-05, 4.71311778040761e-05, -0.0482871405937741, -0.0236780235639221, 0.12297331871021, -0.00251056736786783, -0.00116540725334404, 0.00605261656260159, -0.000261545846873313, -0.000247593765947575, 0.000630549390917038, -4.12636512430215e-05, -3.90624547479691e-05, -1.91546178259544e-05, 0.00028171664814227}};
    
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('simplify expressions', True), ('ignore zero tables', True), ('non zero columns', True), ('remove zero terms', True), ('ignore ones', True)
    // Total number of operations to compute element tensor: 17750
    
    // Loop quadrature points for integral
    // Number of operations to compute element tensor for following IP loop = 17750
    for (unsigned int ip = 0; ip < 125; ip++)
    {
      
      // Function declarations
      double F0 = 0;
      
      // Total number of operations to compute function values = 70
      for (unsigned int r = 0; r < 35; r++)
      {
        F0 += FE0[ip][r]*w[0][r];
      }// end loop over 'r'
      
      // Number of operations to compute ip constants: 2
      // Number of operations: 2
      const double Gip0 = F0*W125[ip]*det;
      
      
      // Number of operations for primary indices = 70
      for (unsigned int j = 0; j < 35; j++)
      {
        // Number of operations to compute entry = 2
        A[j] += FE0[ip][j]*Gip0;
      }// end loop over 'j'
    }// end loop over 'ip'
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class poisson3d_4_1_cell_integral_0: public ufc::cell_integral
{
private:

  poisson3d_4_1_cell_integral_0_quadrature integral_0_quadrature;

public:

  /// Constructor
  poisson3d_4_1_cell_integral_0() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~poisson3d_4_1_cell_integral_0()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Reset values of the element tensor block
    for (unsigned int j = 0; j < 35; j++)
      A[j] = 0;
    
    // Add all contributions to element tensor
    integral_0_quadrature.tabulate_tensor(A, w, c);
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class poisson3d_4_form_1: public ufc::form
{
public:

  /// Constructor
  poisson3d_4_form_1() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~poisson3d_4_form_1()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "Form([Integral(Product(BasisFunction(FiniteElement('Lagrange', Cell('tetrahedron', 1, Space(3)), 4), 0), Function(FiniteElement('Lagrange', Cell('tetrahedron', 1, Space(3)), 4), 0)), Measure('cell', 0, None))])";
  }

  /// Return the rank of the global tensor (r)
  virtual unsigned int rank() const
  {
    return 1;
  }

  /// Return the number of coefficients (n)
  virtual unsigned int num_coefficients() const
  {
    return 1;
  }

  /// Return the number of cell integrals
  virtual unsigned int num_cell_integrals() const
  {
    return 1;
  }

  /// Return the number of exterior facet integrals
  virtual unsigned int num_exterior_facet_integrals() const
  {
    return 0;
  }

  /// Return the number of interior facet integrals
  virtual unsigned int num_interior_facet_integrals() const
  {
    return 0;
  }

  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new poisson3d_4_1_finite_element_0();
      break;
    case 1:
      return new poisson3d_4_1_finite_element_1();
      break;
    }
    return 0;
  }

  /// Create a new dof map for argument function i
  virtual ufc::dof_map* create_dof_map(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new poisson3d_4_1_dof_map_0();
      break;
    case 1:
      return new poisson3d_4_1_dof_map_1();
      break;
    }
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(unsigned int i) const
  {
    return new poisson3d_4_1_cell_integral_0();
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(unsigned int i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(unsigned int i) const
  {
    return 0;
  }

};

// DOLFIN wrappers

// Standard library includes
#include <string>

// DOLFIN includes
#include <dolfin/common/NoDeleter.h>
#include <dolfin/fem/FiniteElement.h>
#include <dolfin/fem/DofMap.h>
#include <dolfin/fem/Form.h>
#include <dolfin/function/FunctionSpace.h>
#include <dolfin/function/Function.h>
#include <dolfin/function/Coefficient.h>

namespace Poisson3D_4
{

class CoefficientReference
{
public:
  
  CoefficientReference(const std::string & name):
    _name(name)
  {}
  
  ~CoefficientReference()
  {}

  CoefficientReference& operator=(dolfin::Function & f)
  {
    _function_pointer = dolfin::reference_to_no_delete_pointer(f);
    return *this;
  }
  
  CoefficientReference& operator=(const boost::shared_ptr<dolfin::Function> f)
  {
    _function_pointer = f;
    return *this;
  }

  std::string name() const
  {
    return _name;
  }

  dolfin::Function & function() const
  {
    return *_function_pointer;
  }

  boost::shared_ptr<dolfin::Function> function_pointer() const
  {
    return _function_pointer;
  }

private:

  boost::shared_ptr<dolfin::Function> _function_pointer;
  std::string _name;

};

class CoefficientSet
{
public:

  CoefficientSet():
    f("f")
  {}
  
  ~CoefficientSet()
  {}

  dolfin::uint num_coefficients() const
  {
    return 1;
  }

  std::string name(dolfin::uint i) const
  {
    switch(i)
    {
    case 0: return "f";
    default:
        throw std::runtime_error("Invalid coefficient number.");
    }
  }

  void disp() const
  {
    for(dolfin::uint i = 0; i < num_coefficients(); ++i)
    {
        dolfin::cout << "Coefficient " << i << ": \t" << name(i) << dolfin::endl;
    }
  }

  CoefficientReference f;
};

class CoefficientSpace_f: public dolfin::FunctionSpace
{
public:


  CoefficientSpace_f(const dolfin::Mesh & mesh):
      dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson3d_4_1_finite_element_1()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson3d_4_1_dof_map_1()), dolfin::reference_to_no_delete_pointer(mesh))))
  {
    // Do nothing
  }

  CoefficientSpace_f(dolfin::Mesh & mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson3d_4_1_finite_element_1()))),
                          boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson3d_4_1_dof_map_1()), dolfin::reference_to_no_delete_pointer(mesh))))
  {
    // Do nothing
  }

  CoefficientSpace_f(boost::shared_ptr<dolfin::Mesh> mesh):
      dolfin::FunctionSpace(mesh,
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson3d_4_1_finite_element_1()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson3d_4_1_dof_map_1()), mesh)))
  {
      // Do nothing
  }

  CoefficientSpace_f(boost::shared_ptr<const dolfin::Mesh> mesh):
      dolfin::FunctionSpace(mesh,
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson3d_4_1_finite_element_1()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson3d_4_1_dof_map_1()), mesh)))
  {
      // Do nothing
  }
 

  ~CoefficientSpace_f()
  {
  }
  
};

class Form_0_FunctionSpace_0: public dolfin::FunctionSpace
{
public:


  Form_0_FunctionSpace_0(const dolfin::Mesh & mesh):
      dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson3d_4_0_finite_element_0()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson3d_4_0_dof_map_0()), dolfin::reference_to_no_delete_pointer(mesh))))
  {
    // Do nothing
  }

  Form_0_FunctionSpace_0(dolfin::Mesh & mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson3d_4_0_finite_element_0()))),
                          boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson3d_4_0_dof_map_0()), dolfin::reference_to_no_delete_pointer(mesh))))
  {
    // Do nothing
  }

  Form_0_FunctionSpace_0(boost::shared_ptr<dolfin::Mesh> mesh):
      dolfin::FunctionSpace(mesh,
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson3d_4_0_finite_element_0()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson3d_4_0_dof_map_0()), mesh)))
  {
      // Do nothing
  }

  Form_0_FunctionSpace_0(boost::shared_ptr<const dolfin::Mesh> mesh):
      dolfin::FunctionSpace(mesh,
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson3d_4_0_finite_element_0()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson3d_4_0_dof_map_0()), mesh)))
  {
      // Do nothing
  }
 

  ~Form_0_FunctionSpace_0()
  {
  }
  
};

class Form_0_FunctionSpace_1: public dolfin::FunctionSpace
{
public:


  Form_0_FunctionSpace_1(const dolfin::Mesh & mesh):
      dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson3d_4_0_finite_element_1()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson3d_4_0_dof_map_1()), dolfin::reference_to_no_delete_pointer(mesh))))
  {
    // Do nothing
  }

  Form_0_FunctionSpace_1(dolfin::Mesh & mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson3d_4_0_finite_element_1()))),
                          boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson3d_4_0_dof_map_1()), dolfin::reference_to_no_delete_pointer(mesh))))
  {
    // Do nothing
  }

  Form_0_FunctionSpace_1(boost::shared_ptr<dolfin::Mesh> mesh):
      dolfin::FunctionSpace(mesh,
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson3d_4_0_finite_element_1()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson3d_4_0_dof_map_1()), mesh)))
  {
      // Do nothing
  }

  Form_0_FunctionSpace_1(boost::shared_ptr<const dolfin::Mesh> mesh):
      dolfin::FunctionSpace(mesh,
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson3d_4_0_finite_element_1()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson3d_4_0_dof_map_1()), mesh)))
  {
      // Do nothing
  }
 

  ~Form_0_FunctionSpace_1()
  {
  }
  
};

class Form_0: public dolfin::Form
{
public:

  // Constructor
  Form_0(const dolfin::FunctionSpace & _V0, const dolfin::FunctionSpace & _V1):
    dolfin::Form(2, 0)
  {
    boost::shared_ptr<const dolfin::FunctionSpace> _pV0 = dolfin::reference_to_no_delete_pointer(_V0);
    boost::shared_ptr<const dolfin::FunctionSpace> _pV1 = dolfin::reference_to_no_delete_pointer(_V1);

    _function_spaces[0] = _pV0;
    _function_spaces[1] = _pV1;

    _ufc_form = boost::shared_ptr<const ufc::form>(new poisson3d_4_form_0());
  }

  // Constructor
  Form_0(const dolfin::FunctionSpace & _V0, const dolfin::FunctionSpace & _V1, const CoefficientSet & coefficients):
    dolfin::Form(2, 0)
  {
    boost::shared_ptr<const dolfin::FunctionSpace> _pV0 = dolfin::reference_to_no_delete_pointer(_V0);
    boost::shared_ptr<const dolfin::FunctionSpace> _pV1 = dolfin::reference_to_no_delete_pointer(_V1);

    _function_spaces[0] = _pV0;
    _function_spaces[1] = _pV1;

    update_coefficients(coefficients);

    _ufc_form = boost::shared_ptr<const ufc::form>(new poisson3d_4_form_0());
  }

  // Constructor
  Form_0(boost::shared_ptr<const dolfin::FunctionSpace> _pV0, boost::shared_ptr<const dolfin::FunctionSpace> _pV1):
    dolfin::Form(2, 0)
  {
    _function_spaces[0] = _pV0;
    _function_spaces[1] = _pV1;

    _ufc_form = boost::shared_ptr<const ufc::form>(new poisson3d_4_form_0());
  }

  // Constructor
  Form_0(boost::shared_ptr<const dolfin::FunctionSpace> _pV0, boost::shared_ptr<const dolfin::FunctionSpace> _pV1, const CoefficientSet & coefficients):
    dolfin::Form(2, 0)
  {
    _function_spaces[0] = _pV0;
    _function_spaces[1] = _pV1;

    update_coefficients(coefficients);

    _ufc_form = boost::shared_ptr<const ufc::form>(new poisson3d_4_form_0());
  }

  // Destructor
  ~Form_0()
  {}

  void update_coefficients(const CoefficientSet & coefficients)
  {

  }

  /// Return the number of the coefficient with this name
  virtual dolfin::uint coefficient_number(const std::string & name) const
  {
    dolfin::error("No coefficients.");
    return 0;
  }
  
  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(dolfin::uint i) const
  {
    dolfin::error("No coefficients.");
    return "unnamed";
  }

  // Typedefs
  typedef Form_0_FunctionSpace_0 TestSpace;
  typedef Form_0_FunctionSpace_1 TrialSpace;

  // Coefficients
};

class Form_1_FunctionSpace_0: public dolfin::FunctionSpace
{
public:


  Form_1_FunctionSpace_0(const dolfin::Mesh & mesh):
      dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson3d_4_1_finite_element_0()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson3d_4_1_dof_map_0()), dolfin::reference_to_no_delete_pointer(mesh))))
  {
    // Do nothing
  }

  Form_1_FunctionSpace_0(dolfin::Mesh & mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson3d_4_1_finite_element_0()))),
                          boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson3d_4_1_dof_map_0()), dolfin::reference_to_no_delete_pointer(mesh))))
  {
    // Do nothing
  }

  Form_1_FunctionSpace_0(boost::shared_ptr<dolfin::Mesh> mesh):
      dolfin::FunctionSpace(mesh,
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson3d_4_1_finite_element_0()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson3d_4_1_dof_map_0()), mesh)))
  {
      // Do nothing
  }

  Form_1_FunctionSpace_0(boost::shared_ptr<const dolfin::Mesh> mesh):
      dolfin::FunctionSpace(mesh,
                            boost::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(boost::shared_ptr<ufc::finite_element>(new poisson3d_4_1_finite_element_0()))),
                            boost::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(boost::shared_ptr<ufc::dof_map>(new poisson3d_4_1_dof_map_0()), mesh)))
  {
      // Do nothing
  }
 

  ~Form_1_FunctionSpace_0()
  {
  }
  
};

typedef CoefficientSpace_f Form_1_FunctionSpace_1;

class Form_1_Coefficient_f: public dolfin::Coefficient
{
public:

  Form_1_Coefficient_f(dolfin::Form & form):
    dolfin::Coefficient(form)
  {}
  
  ~Form_1_Coefficient_f()
  {}

  const Form_1_Coefficient_f& operator=(dolfin::Function & f)
  {
    attach(f);
    return *this;
  }
  
  const Form_1_Coefficient_f& operator=(boost::shared_ptr<dolfin::Function> f)
  {
    attach(f);
    return *this;
  }
  
  const dolfin::FunctionSpace * create_function_space() const
  {
    return new Form_1_FunctionSpace_1(form.mesh());
  }
  
  dolfin::uint number() const
  {
    return 0;
  }

  std::string name() const
  {
    return "f";
  }

};

class Form_1: public dolfin::Form
{
public:

  // Constructor
  Form_1(const dolfin::FunctionSpace & _V0):
    dolfin::Form(1, 1), f(*this)
  {
    boost::shared_ptr<const dolfin::FunctionSpace> _pV0 = dolfin::reference_to_no_delete_pointer(_V0);

    _function_spaces[0] = _pV0;

    _ufc_form = boost::shared_ptr<const ufc::form>(new poisson3d_4_form_1());
  }

  // Constructor
  Form_1(const dolfin::FunctionSpace & _V0, const CoefficientSet & coefficients):
    dolfin::Form(1, 1), f(*this)
  {
    boost::shared_ptr<const dolfin::FunctionSpace> _pV0 = dolfin::reference_to_no_delete_pointer(_V0);

    _function_spaces[0] = _pV0;

    update_coefficients(coefficients);

    _ufc_form = boost::shared_ptr<const ufc::form>(new poisson3d_4_form_1());
  }

  // Constructor
  Form_1(const dolfin::FunctionSpace & _V0, dolfin::Function & _f):
    dolfin::Form(1, 1), f(*this)
  {
    boost::shared_ptr<const dolfin::FunctionSpace> _pV0 = dolfin::reference_to_no_delete_pointer(_V0);

    _function_spaces[0] = _pV0;

    boost::shared_ptr<dolfin::Function> _pf = dolfin::reference_to_no_delete_pointer(_f);

    f = _pf;

    _ufc_form = boost::shared_ptr<const ufc::form>(new poisson3d_4_form_1());
  }

  // Constructor
  Form_1(const dolfin::FunctionSpace & _V0, boost::shared_ptr<dolfin::Function> _pf):
    dolfin::Form(1, 1), f(*this)
  {
    boost::shared_ptr<const dolfin::FunctionSpace> _pV0 = dolfin::reference_to_no_delete_pointer(_V0);

    _function_spaces[0] = _pV0;

    f = _pf;

    _ufc_form = boost::shared_ptr<const ufc::form>(new poisson3d_4_form_1());
  }

  // Constructor
  Form_1(boost::shared_ptr<const dolfin::FunctionSpace> _pV0):
    dolfin::Form(1, 1), f(*this)
  {
    _function_spaces[0] = _pV0;

    _ufc_form = boost::shared_ptr<const ufc::form>(new poisson3d_4_form_1());
  }

  // Constructor
  Form_1(boost::shared_ptr<const dolfin::FunctionSpace> _pV0, const CoefficientSet & coefficients):
    dolfin::Form(1, 1), f(*this)
  {
    _function_spaces[0] = _pV0;

    update_coefficients(coefficients);

    _ufc_form = boost::shared_ptr<const ufc::form>(new poisson3d_4_form_1());
  }

  // Constructor
  Form_1(boost::shared_ptr<const dolfin::FunctionSpace> _pV0, dolfin::Function & _f):
    dolfin::Form(1, 1), f(*this)
  {
    _function_spaces[0] = _pV0;

    boost::shared_ptr<dolfin::Function> _pf = dolfin::reference_to_no_delete_pointer(_f);

    f = _pf;

    _ufc_form = boost::shared_ptr<const ufc::form>(new poisson3d_4_form_1());
  }

  // Constructor
  Form_1(boost::shared_ptr<const dolfin::FunctionSpace> _pV0, boost::shared_ptr<dolfin::Function> _pf):
    dolfin::Form(1, 1), f(*this)
  {
    _function_spaces[0] = _pV0;

    f = _pf;

    _ufc_form = boost::shared_ptr<const ufc::form>(new poisson3d_4_form_1());
  }

  // Destructor
  ~Form_1()
  {}

  void update_coefficients(const CoefficientSet & coefficients)
  {
    f = coefficients.f.function_pointer();
  }

  /// Return the number of the coefficient with this name
  virtual dolfin::uint coefficient_number(const std::string & name) const
  {
    if(name == "f") return 0;
    dolfin::error("Invalid coefficient.");
    return 0;
  }
  
  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(dolfin::uint i) const
  {
    switch(i)
    {
      case 0: return "f";
    }
    dolfin::error("Invalid coefficient.");
    return "unnamed";
  }

  // Typedefs
  typedef Form_1_FunctionSpace_0 TestSpace;
  typedef Form_1_FunctionSpace_1 CoefficientSpace_f;

  // Coefficients
  Form_1_Coefficient_f f;
};

// Class typedefs
typedef Form_0 BilinearForm;
typedef Form_1 LinearForm;
typedef Form_0::TestSpace FunctionSpace;

} // namespace Poisson3D_4

#endif
