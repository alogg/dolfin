// This code conforms with the UFC specification version 1.0
// and was automatically generated by FFC version 0.6.0.
//
// Warning: This code was generated with the option '-l dolfin'
// and contains DOLFIN-specific wrappers that depend on DOLFIN.

#ifndef __POISSON3D_4_H
#define __POISSON3D_4_H

#include <cmath>
#include <stdexcept>
#include <fstream>
#include <ufc.h>

/// This class defines the interface for a finite element.

class UFC_Poisson3D_4BilinearForm_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  UFC_Poisson3D_4BilinearForm_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson3D_4BilinearForm_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', 'tetrahedron', 4)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 35;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_02 = element_coordinates[3][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
    const double J_12 = element_coordinates[3][1] - element_coordinates[0][1];
    const double J_20 = element_coordinates[1][2] - element_coordinates[0][2];
    const double J_21 = element_coordinates[2][2] - element_coordinates[0][2];
    const double J_22 = element_coordinates[3][2] - element_coordinates[0][2];
      
    // Compute sub determinants
    const double d00 = J_11*J_22 - J_12*J_21;
    const double d01 = J_12*J_20 - J_10*J_22;
    const double d02 = J_10*J_21 - J_11*J_20;
    
    const double d10 = J_02*J_21 - J_01*J_22;
    const double d11 = J_00*J_22 - J_02*J_20;
    const double d12 = J_01*J_20 - J_00*J_21;
    
    const double d20 = J_01*J_12 - J_02*J_11;
    const double d21 = J_02*J_10 - J_00*J_12;
    const double d22 = J_00*J_11 - J_01*J_10;
      
    // Compute determinant of Jacobian
    double detJ = J_00*d00 + J_10*d10 + J_20*d20;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = d00*(element_coordinates[0][0] - element_coordinates[2][0] - element_coordinates[3][0]) \
                    + d10*(element_coordinates[0][1] - element_coordinates[2][1] - element_coordinates[3][1]) \
                    + d20*(element_coordinates[0][2] - element_coordinates[2][2] - element_coordinates[3][2]);
    
    const double C1 = d01*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[3][0]) \
                    + d11*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[3][1]) \
                    + d21*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[3][2]);
    
    const double C2 = d02*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[2][0]) \
                    + d12*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[2][1]) \
                    + d22*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[2][2]);
    
    // Get coordinates and map to the UFC reference element
    double x = (C0 + d00*coordinates[0] + d10*coordinates[1] + d20*coordinates[2]) / detJ;
    double y = (C1 + d01*coordinates[0] + d11*coordinates[1] + d21*coordinates[2]) / detJ;
    double z = (C2 + d02*coordinates[0] + d12*coordinates[1] + d22*coordinates[2]) / detJ;
    
    // Map coordinates to the reference cube
    if (std::abs(y + z - 1.0) < 1e-14)
      x = 1.0;
    else
      x = -2.0 * x/(y + z - 1.0) - 1.0;
    if (std::abs(z - 1.0) < 1e-14)
      y = -1.0;
    else
      y = 2.0 * y/(1.0 - z) - 1.0;
    z = 2.0 * z - 1.0;
    
    // Reset values
    *values = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    const double scalings_y_4 = scalings_y_3*(0.5 - 0.5*y);
    const double scalings_z_0 = 1;
    const double scalings_z_1 = scalings_z_0*(0.5 - 0.5*z);
    const double scalings_z_2 = scalings_z_1*(0.5 - 0.5*z);
    const double scalings_z_3 = scalings_z_2*(0.5 - 0.5*z);
    const double scalings_z_4 = scalings_z_3*(0.5 - 0.5*z);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    const double psitilde_a_4 = 1.75*x*psitilde_a_3 - 0.75*psitilde_a_2;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_0_4 = 0.0285714285714286*psitilde_bs_0_3 + 1.8*y*psitilde_bs_0_3 - 0.771428571428571*psitilde_bs_0_2;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_1_3 = 0.285714285714286*psitilde_bs_1_2 + 2*y*psitilde_bs_1_2 - 0.714285714285714*psitilde_bs_1_1;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_2_2 = 1.02040816326531*psitilde_bs_2_1 + 2.57142857142857*y*psitilde_bs_2_1 - 0.551020408163265*psitilde_bs_2_0;
    const double psitilde_bs_3_0 = 1;
    const double psitilde_bs_3_1 = 4.5*y + 3.5;
    const double psitilde_bs_4_0 = 1;
    
    // Compute psitilde_cs
    const double psitilde_cs_00_0 = 1;
    const double psitilde_cs_00_1 = 2*z + 1;
    const double psitilde_cs_00_2 = 0.3125*psitilde_cs_00_1 + 1.875*z*psitilde_cs_00_1 - 0.5625*psitilde_cs_00_0;
    const double psitilde_cs_00_3 = 0.155555555555556*psitilde_cs_00_2 + 1.86666666666667*z*psitilde_cs_00_2 - 0.711111111111111*psitilde_cs_00_1;
    const double psitilde_cs_00_4 = 0.09375*psitilde_cs_00_3 + 1.875*z*psitilde_cs_00_3 - 0.78125*psitilde_cs_00_2;
    const double psitilde_cs_01_0 = 1;
    const double psitilde_cs_01_1 = 3*z + 2;
    const double psitilde_cs_01_2 = 0.777777777777778*psitilde_cs_01_1 + 2.33333333333333*z*psitilde_cs_01_1 - 0.555555555555556*psitilde_cs_01_0;
    const double psitilde_cs_01_3 = 0.428571428571429*psitilde_cs_01_2 + 2.14285714285714*z*psitilde_cs_01_2 - 0.714285714285714*psitilde_cs_01_1;
    const double psitilde_cs_02_0 = 1;
    const double psitilde_cs_02_1 = 4*z + 3;
    const double psitilde_cs_02_2 = 1.265625*psitilde_cs_02_1 + 2.8125*z*psitilde_cs_02_1 - 0.546875*psitilde_cs_02_0;
    const double psitilde_cs_03_0 = 1;
    const double psitilde_cs_03_1 = 5*z + 4;
    const double psitilde_cs_04_0 = 1;
    const double psitilde_cs_10_0 = 1;
    const double psitilde_cs_10_1 = 3*z + 2;
    const double psitilde_cs_10_2 = 0.777777777777778*psitilde_cs_10_1 + 2.33333333333333*z*psitilde_cs_10_1 - 0.555555555555556*psitilde_cs_10_0;
    const double psitilde_cs_10_3 = 0.428571428571429*psitilde_cs_10_2 + 2.14285714285714*z*psitilde_cs_10_2 - 0.714285714285714*psitilde_cs_10_1;
    const double psitilde_cs_11_0 = 1;
    const double psitilde_cs_11_1 = 4*z + 3;
    const double psitilde_cs_11_2 = 1.265625*psitilde_cs_11_1 + 2.8125*z*psitilde_cs_11_1 - 0.546875*psitilde_cs_11_0;
    const double psitilde_cs_12_0 = 1;
    const double psitilde_cs_12_1 = 5*z + 4;
    const double psitilde_cs_13_0 = 1;
    const double psitilde_cs_20_0 = 1;
    const double psitilde_cs_20_1 = 4*z + 3;
    const double psitilde_cs_20_2 = 1.265625*psitilde_cs_20_1 + 2.8125*z*psitilde_cs_20_1 - 0.546875*psitilde_cs_20_0;
    const double psitilde_cs_21_0 = 1;
    const double psitilde_cs_21_1 = 5*z + 4;
    const double psitilde_cs_22_0 = 1;
    const double psitilde_cs_30_0 = 1;
    const double psitilde_cs_30_1 = 5*z + 4;
    const double psitilde_cs_31_0 = 1;
    const double psitilde_cs_40_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.866025403784439*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_0;
    const double basisvalue1 = 2.73861278752583*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_0;
    const double basisvalue2 = 1.58113883008419*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_0;
    const double basisvalue3 = 1.11803398874989*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_1;
    const double basisvalue4 = 5.1234753829798*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_0;
    const double basisvalue5 = 3.96862696659689*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_0;
    const double basisvalue6 = 2.29128784747792*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_0;
    const double basisvalue7 = 3.24037034920393*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_1;
    const double basisvalue8 = 1.87082869338697*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_1;
    const double basisvalue9 = 1.3228756555323*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_2;
    const double basisvalue10 = 7.93725393319377*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_0;
    const double basisvalue11 = 6.70820393249937*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_0;
    const double basisvalue12 = 5.19615242270663*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_0;
    const double basisvalue13 = 3*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_0;
    const double basisvalue14 = 5.80947501931113*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_1;
    const double basisvalue15 = 4.5*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_1;
    const double basisvalue16 = 2.59807621135332*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_1;
    const double basisvalue17 = 3.67423461417477*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_2;
    const double basisvalue18 = 2.12132034355964*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_2;
    const double basisvalue19 = 1.5*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_3;
    const double basisvalue20 = 11.1242977306435*psitilde_a_4*scalings_y_4*psitilde_bs_4_0*scalings_z_4*psitilde_cs_40_0;
    const double basisvalue21 = 9.81070843517429*psitilde_a_3*scalings_y_3*psitilde_bs_3_1*scalings_z_4*psitilde_cs_31_0;
    const double basisvalue22 = 8.2915619758885*psitilde_a_2*scalings_y_2*psitilde_bs_2_2*scalings_z_4*psitilde_cs_22_0;
    const double basisvalue23 = 6.42261628933256*psitilde_a_1*scalings_y_1*psitilde_bs_1_3*scalings_z_4*psitilde_cs_13_0;
    const double basisvalue24 = 3.70809924354783*psitilde_a_0*scalings_y_0*psitilde_bs_0_4*scalings_z_4*psitilde_cs_04_0;
    const double basisvalue25 = 8.77496438739212*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_1;
    const double basisvalue26 = 7.41619848709566*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_1;
    const double basisvalue27 = 5.74456264653803*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_1;
    const double basisvalue28 = 3.3166247903554*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_1;
    const double basisvalue29 = 6.42261628933256*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_2;
    const double basisvalue30 = 4.9749371855331*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_2;
    const double basisvalue31 = 2.87228132326901*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_2;
    const double basisvalue32 = 4.06201920231798*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_3;
    const double basisvalue33 = 2.34520787991171*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_3;
    const double basisvalue34 = 1.6583123951777*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_4;
    
    // Table(s) of coefficients
    const static double coefficients0[35][35] = \
    {{-0.0137464349807051, -0.0144900147488139, -0.00836581391578937, -0.00591552374999941, 0, 0, 0, 0, 0, 0, -0.00671936840905293, -0.00567890279999946, -0.00439885919382571, -0.00253968253968254, -0.00491807409042211, -0.00380952380952381, -0.00219942959691287, -0.00311046316543895, -0.0017958267458706, -0.00126984126984128, 0.0136980289516341, 0.0120805260192622, 0.010209907964538, 0.00790856070259325, 0.00456600965054471, 0.0108051509532101, 0.00913201930108942, 0.00707363173407281, 0.00408396318581522, 0.00790856070259324, 0.00612594477872282, 0.0035368158670364, 0.00500181296677924, 0.00288779806280616, 0.00204198159290761},
    {-0.0137464349807054, 0.0144900147488139, -0.00836581391578934, -0.00591552374999945, 0, 0, 0, 0, 0, 0, 0.00671936840905293, -0.00567890279999946, 0.00439885919382572, -0.00253968253968254, -0.00491807409042213, 0.00380952380952382, -0.00219942959691286, 0.00311046316543897, -0.0017958267458706, -0.00126984126984127, 0.0136980289516341, -0.0120805260192622, 0.010209907964538, -0.00790856070259325, 0.00456600965054471, -0.0108051509532101, 0.00913201930108941, -0.0070736317340728, 0.00408396318581521, 0.00790856070259325, -0.00612594477872282, 0.0035368158670364, -0.00500181296677924, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807053, 0, 0.0167316278315787, -0.00591552374999946, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0101587301587302, 0, 0, -0.00659828879073857, 0, 0.00359165349174119, -0.00126984126984127, 0, 0, 0, 0, 0.0228300482527235, 0, 0, 0, -0.0163358527432608, 0, 0, 0.0106104476011092, 0, -0.0057755961256123, 0.00204198159290761},
    {-0.0137464349807054, 0, 0, 0.0177465712499983, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0126984126984127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0306297238936141},
    {0.0439885919382572, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0, 0.0406349206349206, 0, 0, 0.00439885919382572, 0, -0.0143666139669648, 0.00761904761904763, 0, 0, 0, 0, 0, 0, 0, 0, 0.0367556686723369, 0, 0, -0.0424417904044368, 0, 0.0303218796594646, -0.0122518895574456},
    {-0.0329914439536931, 0, -0.0200779533978945, -0.0141972569999986, 0, 0, -0.00969857289937744, 0, 0.0712696645099798, -0.050395263067897, 0, 0, 0, 0, 0, 0, 0.0461880215351701, 0, 0.0107749604752236, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0495154221385096, 0, -0.0606437593189292, 0.0306297238936141},
    {0.0439885919382573, 0, 0.0267706045305259, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0, 0.0359165349174119, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0505364660991076, -0.0408396318581522},
    {0.0439885919382573, 0.0231840235981023, -0.0133853022652629, 0.0189296759999982, 0.0433733365754904, -0.0335968420452647, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, -0.0227156111999979, 0.0175954367753029, -0.0101587301587302, 0.00327871606028141, -0.00253968253968255, 0.0014662863979419, -0.0124418526617558, 0.00718330698348238, 0.00761904761904763, 0, 0, 0, 0, 0, 0.0243115896447228, -0.0205470434274512, 0.0159156714016638, -0.00918891716808423, -0.031634242810373, 0.0245037791148913, -0.0141472634681456, 0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, -0.0173880176985766, 0.0100389766989472, -0.0141972569999986, -0.00722888942924838, 0.00559947367421081, -0.00323285763312582, 0.0617213399848368, -0.03563483225499, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, -0.0266666666666667, 0.01539600717839, 0.00933138949631686, -0.00538748023761177, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, -0.0285877423007065, 0.0165051407128365, -0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, 0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0.0311046316543895, -0.017958267458706, 0.0253968253968255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754903, -0.0335968420452647, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, 0, -0.0117302911835353, 0.0101587301587302, -0.0229510124219699, 0.00761904761904761, -0.00146628639794191, 0.0165891368823411, -0.0071833069834824, -0.00761904761904763, 0, 0.0241610520385245, -0.0357346778758831, 0.0355885231616696, -0.0228300482527235, -0.00270128773830253, -0.0114150241263618, 0.0159156714016638, -0.0112308987609918, 0.00395428035129663, 0.00306297238936141, -0.0035368158670364, -0.00375135972508443, 0.00072194951570154, 0.00204198159290761},
    {-0.0329914439536929, -0.0173880176985768, -0.0100389766989472, 0.0141972569999986, -0.00722888942924839, 0.0615942104163185, -0.0614242950293904, -0.00685792666498187, -0.00395942580611001, 0.00559947367421077, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042213, -0.0266666666666667, 0.0175954367753029, 0.00933138949631688, 0.00538748023761179, -0.00761904761904761, 0, 0, 0.0357346778758831, -0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108943, 0, 0.00408396318581521, 0.00131809345043221, 0.00714693557517662, -0.00471575448938186, -0.00250090648338962, -0.00144389903140307, 0.00204198159290761},
    {0.0439885919382572, 0.0231840235981022, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0.0293257279588382, 0.0101587301587302, 0, -0.0101587301587302, -0.0219942959691286, 0.00207364211029264, 0.017958267458706, -0.00761904761904762, 0, 0, 0, 0.0395428035129662, -0.0456600965054471, 0, 0, -0.017684079335182, 0.0142938711503532, 0, 0.00612594477872282, 0, -0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.043988591938257, -0.0231840235981023, -0.0133853022652629, 0.0189296759999983, 0.0433733365754903, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484216, -0.0268774736362117, -0.0227156111999979, -0.0175954367753029, -0.0101587301587302, 0.00327871606028139, 0.00253968253968253, 0.0014662863979419, 0.0124418526617558, 0.00718330698348236, 0.00761904761904761, 0, 0, 0, 0, 0, -0.0243115896447228, -0.0205470434274512, -0.0159156714016638, -0.00918891716808424, -0.031634242810373, -0.0245037791148913, -0.0141472634681456, -0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, 0.0173880176985768, 0.0100389766989471, -0.0141972569999987, -0.00722888942924838, -0.00559947367421082, -0.00323285763312581, -0.0617213399848367, -0.03563483225499, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, 0.0266666666666667, 0.01539600717839, -0.00933138949631689, -0.00538748023761178, -0.019047619047619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, 0.0285877423007065, 0.0165051407128365, 0.0525190361511819, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382572, -0.0231840235981023, -0.0133853022652629, 0.0189296759999981, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, -0.0311046316543896, -0.017958267458706, 0.0253968253968255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484216, -0.0268774736362117, 0, 0.0117302911835352, 0.0101587301587302, -0.0229510124219699, -0.00761904761904762, -0.00146628639794191, -0.0165891368823411, -0.00718330698348239, -0.00761904761904763, 0, -0.0241610520385245, -0.0357346778758831, -0.0355885231616696, -0.0228300482527235, 0.00270128773830254, -0.0114150241263618, -0.0159156714016638, -0.0112308987609918, 0.00395428035129662, -0.00306297238936141, -0.0035368158670364, 0.00375135972508443, 0.000721949515701533, 0.00204198159290761},
    {-0.0329914439536929, 0.0173880176985766, -0.0100389766989472, 0.0141972569999987, -0.00722888942924841, -0.0615942104163186, -0.0614242950293904, 0.00685792666498186, -0.00395942580610998, 0.00559947367421075, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042213, 0.0266666666666667, 0.0175954367753029, -0.00933138949631688, 0.00538748023761179, -0.00761904761904763, 0, 0, 0.0357346778758831, 0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108943, 0, 0.0040839631858152, 0.00131809345043222, -0.00714693557517663, -0.00471575448938187, 0.00250090648338962, -0.00144389903140308, 0.00204198159290761},
    {0.0439885919382573, -0.0231840235981022, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, -0.0293257279588382, 0.0101587301587302, 0, 0.0101587301587301, -0.0219942959691286, -0.00207364211029265, 0.017958267458706, -0.00761904761904761, 0, 0, 0, -0.0395428035129663, -0.0456600965054471, 0, 0, 0.017684079335182, 0.0142938711503532, 0, -0.00612594477872281, 0, 0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.0439885919382571, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484215, 0.0134387368181058, -0.0113578055999989, -0.0205280095711867, -0.0152380952380952, -0.00983614818084424, -0.0177777777777778, -0.0131965775814772, -0.0145154947720485, -0.0107749604752236, -0.00761904761904761, -0.0547921158065365, -0.0241610520385245, -0.00510495398226901, 0.00395428035129663, 0.00456600965054471, -0.0216103019064202, -0.00456600965054471, 0.00353681586703639, 0.00408396318581521, -0.00395428035129661, 0.0030629723893614, 0.0035368158670364, 0.00250090648338961, 0.00288779806280615, 0.00204198159290761},
    {-0.0329914439536931, 0, 0.0200779533978945, 0.0141972569999987, -0.0867466731509807, 0, 0.00969857289937743, 0, 0.00791885161221998, 0.00559947367421076, 0, 0.0340734167999968, 0, -0.0152380952380953, 0.0295084445425327, 0, -0.0131965775814772, 0, -0.0107749604752236, -0.00761904761904762, 0.0821881737098047, 0, -0.010209907964538, 0, 0.00456600965054471, 0, -0.00913201930108944, 0, 0.00408396318581521, -0.00790856070259326, 0, 0.0035368158670364, 0, 0.00288779806280615, 0.00204198159290761},
    {0.0439885919382573, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754903, -0.0335968420452646, 0.0193971457987549, -0.0274317066599274, 0.01583770322444, 0.0111989473484215, -0.0134387368181058, -0.0113578055999989, 0.0205280095711867, -0.0152380952380952, -0.00983614818084423, 0.0177777777777778, -0.0131965775814772, 0.0145154947720485, -0.0107749604752236, -0.00761904761904761, -0.0547921158065365, 0.0241610520385245, -0.005104953982269, -0.00395428035129662, 0.00456600965054471, 0.0216103019064202, -0.0045660096505447, -0.0035368158670364, 0.00408396318581521, -0.00395428035129662, -0.00306297238936141, 0.00353681586703641, -0.00250090648338962, 0.00288779806280615, 0.00204198159290761},
    {0.0439885919382573, 0.139104141588614, -0.080311813591578, -0.0567890279999947, 0.0578311154339872, 0.0335968420452646, -0.0420271492306356, 0.0274317066599275, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, -0.0586514559176763, 0.0406349206349207, 0.039344592723377, 0.00253968253968254, -0.0109971479845643, -0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, -0.053052238005546, 0.0367556686723369, -0.0105447476034577, -0.0245037791148913, 0.0235787724469093, 0.0175063453837273, 0, -0.0122518895574457},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0, 0.0783926314389509, 0.0096985728993774, -0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, 0.0586514559176763, -0.0609523809523809, 0, 0.033015873015873, 0.0241937255660415, -0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, 0.053052238005546, -0.0551335030085053, 0, -0.0326717054865217, 0.0141472634681456, 0.00875317269186366, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382571, 0, 0, 0.170367083999984, 0, -0.0111989473484216, 0.00969857289937744, 0.0822951199797824, 0.0475131096733199, -0.0167984210226324, 0, 0, 0, 0, 0, 0.0533333333333333, -0.0461880215351701, 0.0435464843161454, 0.0251415744421883, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.057175484601413, -0.0495154221385096, -0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382571, -0.139104141588614, -0.0803118135915779, -0.0567890279999947, 0.0578311154339871, -0.0335968420452646, -0.0420271492306356, -0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, 0.0586514559176763, 0.0406349206349206, 0.0393445927233769, -0.00253968253968253, -0.0109971479845643, 0.0601356211984865, 0.0179582674587059, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, 0.053052238005546, 0.0367556686723369, -0.0105447476034577, 0.0245037791148913, 0.0235787724469093, -0.0175063453837273, 0, -0.0122518895574457},
    {0.0439885919382571, 0, 0.160623627183156, -0.0567890279999946, 0, -0.0783926314389509, 0.00969857289937745, 0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, -0.0586514559176763, -0.0609523809523809, 0, -0.033015873015873, 0.0241937255660415, 0.0145154947720485, -0.0610581093596003, 0.0393650793650793, 0, 0, 0, 0, 0, 0, 0, -0.053052238005546, -0.0551335030085053, 0, 0.0326717054865217, 0.0141472634681456, -0.00875317269186368, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0, 0.0111989473484215, 0.00969857289937745, -0.0822951199797824, 0.0475131096733199, -0.0167984210226323, 0, 0, 0, 0, 0, -0.0533333333333333, -0.0461880215351701, -0.0435464843161453, 0.0251415744421883, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0571754846014129, -0.0495154221385096, 0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754903, 0.0447957893936862, 0.0484928644968872, -0.0548634133198549, 0, -0.0167984210226323, 0.0806324209086351, 0.0227156111999979, -0.0058651455917676, -0.0101587301587302, -0.00327871606028142, 0.0304761904761905, 0.0271262983619253, 0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, 0.0729347689341683, 0.0205470434274512, -0.00530522380055458, -0.00918891716808423, 0.031634242810373, -0.00816792637163039, -0.0141472634681456, -0.00875317269186365, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382571, 0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754904, -0.0447957893936862, 0.0484928644968873, 0.0548634133198549, 0, -0.0167984210226323, -0.0806324209086351, 0.0227156111999979, 0.0058651455917676, -0.0101587301587302, -0.00327871606028142, -0.0304761904761905, 0.0271262983619253, -0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, -0.0729347689341683, 0.0205470434274512, 0.00530522380055459, -0.00918891716808424, 0.031634242810373, 0.00816792637163042, -0.0141472634681456, 0.00875317269186367, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0.0144577788584968, 0, -0.00323285763312585, 0, -0.0950262193466398, -0.0167984210226323, 0, 0, 0, 0, -0.0688530372659096, 0, 0.01539600717839, 0, -0.0502831488843767, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0738132332242036, 0, 0.0165051407128365, 0, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754903, -0.0447957893936862, -0.00969857289937743, 0.0548634133198549, 0.03167540644888, 0.0391963157194754, 0.0806324209086351, 0, 0.0527863103259086, 0.0609523809523809, 0.0229510124219699, 0.0101587301587302, 0.0168622935763319, -0.0124418526617558, -0.00718330698348239, -0.013968253968254, 0, 0.0724831561155734, 0.0357346778758831, -0.0118628410538899, -0.0228300482527235, -0.00810386321490759, 0.0114150241263618, -0.00530522380055459, -0.0112308987609918, -0.00395428035129662, -0.00102099079645379, -0.0035368158670364, 0.00125045324169481, 0.000721949515701537, 0.00204198159290762},
    {0.0439885919382571, 0.139104141588614, -0.080311813591578, -0.0567890279999947, -0.0433733365754904, 0.0447957893936862, -0.00969857289937742, -0.0548634133198549, 0.0316754064488799, 0.0391963157194754, -0.0806324209086351, 0, -0.0527863103259086, 0.060952380952381, 0.0229510124219699, -0.0101587301587302, 0.0168622935763319, 0.0124418526617558, -0.00718330698348236, -0.013968253968254, 0, -0.0724831561155734, 0.0357346778758831, 0.0118628410538899, -0.0228300482527236, 0.00810386321490761, 0.0114150241263618, 0.00530522380055459, -0.0112308987609918, -0.00395428035129662, 0.00102099079645379, -0.0035368158670364, -0.0012504532416948, 0.000721949515701528, 0.0020419815929076},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0.0144577788584968, 0, -0.0614242950293905, 0, -0.0633508128977598, 0.0391963157194754, 0, -0.0681468335999936, 0, -0.0914285714285715, 0.00983614818084423, 0, 0.0285925847598672, 0, 0.0143666139669647, -0.0139682539682539, 0, 0, -0.0714693557517662, 0, 0.0456600965054471, 0, 0.0182640386021788, 0, 0.0040839631858152, -0.00263618690086443, 0, -0.00471575448938186, 0, -0.00144389903140306, 0.00204198159290759},
    {0.351908735506058, 0, 0, 0, -0.115662230867974, 0, -0.129314305325032, 0, 0, -0.134387368181059, 0, -0.0908624447999914, 0, 0.0406349206349206, -0.0786891854467539, 0, -0.0879771838765144, 0, 0, 0.0711111111111111, 0, 0, 0, 0, 0, 0, -0.0821881737098047, 0, 0.0367556686723369, 0.0210894952069153, 0, 0.0235787724469093, 0, 0, -0.0122518895574456}};
    
    // Extract relevant coefficients
    const double coeff0_0 = coefficients0[dof][0];
    const double coeff0_1 = coefficients0[dof][1];
    const double coeff0_2 = coefficients0[dof][2];
    const double coeff0_3 = coefficients0[dof][3];
    const double coeff0_4 = coefficients0[dof][4];
    const double coeff0_5 = coefficients0[dof][5];
    const double coeff0_6 = coefficients0[dof][6];
    const double coeff0_7 = coefficients0[dof][7];
    const double coeff0_8 = coefficients0[dof][8];
    const double coeff0_9 = coefficients0[dof][9];
    const double coeff0_10 = coefficients0[dof][10];
    const double coeff0_11 = coefficients0[dof][11];
    const double coeff0_12 = coefficients0[dof][12];
    const double coeff0_13 = coefficients0[dof][13];
    const double coeff0_14 = coefficients0[dof][14];
    const double coeff0_15 = coefficients0[dof][15];
    const double coeff0_16 = coefficients0[dof][16];
    const double coeff0_17 = coefficients0[dof][17];
    const double coeff0_18 = coefficients0[dof][18];
    const double coeff0_19 = coefficients0[dof][19];
    const double coeff0_20 = coefficients0[dof][20];
    const double coeff0_21 = coefficients0[dof][21];
    const double coeff0_22 = coefficients0[dof][22];
    const double coeff0_23 = coefficients0[dof][23];
    const double coeff0_24 = coefficients0[dof][24];
    const double coeff0_25 = coefficients0[dof][25];
    const double coeff0_26 = coefficients0[dof][26];
    const double coeff0_27 = coefficients0[dof][27];
    const double coeff0_28 = coefficients0[dof][28];
    const double coeff0_29 = coefficients0[dof][29];
    const double coeff0_30 = coefficients0[dof][30];
    const double coeff0_31 = coefficients0[dof][31];
    const double coeff0_32 = coefficients0[dof][32];
    const double coeff0_33 = coefficients0[dof][33];
    const double coeff0_34 = coefficients0[dof][34];
    
    // Compute value(s)
    *values = coeff0_0*basisvalue0 + coeff0_1*basisvalue1 + coeff0_2*basisvalue2 + coeff0_3*basisvalue3 + coeff0_4*basisvalue4 + coeff0_5*basisvalue5 + coeff0_6*basisvalue6 + coeff0_7*basisvalue7 + coeff0_8*basisvalue8 + coeff0_9*basisvalue9 + coeff0_10*basisvalue10 + coeff0_11*basisvalue11 + coeff0_12*basisvalue12 + coeff0_13*basisvalue13 + coeff0_14*basisvalue14 + coeff0_15*basisvalue15 + coeff0_16*basisvalue16 + coeff0_17*basisvalue17 + coeff0_18*basisvalue18 + coeff0_19*basisvalue19 + coeff0_20*basisvalue20 + coeff0_21*basisvalue21 + coeff0_22*basisvalue22 + coeff0_23*basisvalue23 + coeff0_24*basisvalue24 + coeff0_25*basisvalue25 + coeff0_26*basisvalue26 + coeff0_27*basisvalue27 + coeff0_28*basisvalue28 + coeff0_29*basisvalue29 + coeff0_30*basisvalue30 + coeff0_31*basisvalue31 + coeff0_32*basisvalue32 + coeff0_33*basisvalue33 + coeff0_34*basisvalue34;
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis() is not yet implemented.");
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_02 = element_coordinates[3][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
    const double J_12 = element_coordinates[3][1] - element_coordinates[0][1];
    const double J_20 = element_coordinates[1][2] - element_coordinates[0][2];
    const double J_21 = element_coordinates[2][2] - element_coordinates[0][2];
    const double J_22 = element_coordinates[3][2] - element_coordinates[0][2];
      
    // Compute sub determinants
    const double d00 = J_11*J_22 - J_12*J_21;
    const double d01 = J_12*J_20 - J_10*J_22;
    const double d02 = J_10*J_21 - J_11*J_20;
    
    const double d10 = J_02*J_21 - J_01*J_22;
    const double d11 = J_00*J_22 - J_02*J_20;
    const double d12 = J_01*J_20 - J_00*J_21;
    
    const double d20 = J_01*J_12 - J_02*J_11;
    const double d21 = J_02*J_10 - J_00*J_12;
    const double d22 = J_00*J_11 - J_01*J_10;
      
    // Compute determinant of Jacobian
    double detJ = J_00*d00 + J_10*d10 + J_20*d20;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = d00*(element_coordinates[0][0] - element_coordinates[2][0] - element_coordinates[3][0]) \
                    + d10*(element_coordinates[0][1] - element_coordinates[2][1] - element_coordinates[3][1]) \
                    + d20*(element_coordinates[0][2] - element_coordinates[2][2] - element_coordinates[3][2]);
    
    const double C1 = d01*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[3][0]) \
                    + d11*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[3][1]) \
                    + d21*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[3][2]);
    
    const double C2 = d02*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[2][0]) \
                    + d12*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[2][1]) \
                    + d22*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[2][2]);
    
    // Get coordinates and map to the UFC reference element
    double x = (C0 + d00*coordinates[0] + d10*coordinates[1] + d20*coordinates[2]) / detJ;
    double y = (C1 + d01*coordinates[0] + d11*coordinates[1] + d21*coordinates[2]) / detJ;
    double z = (C2 + d02*coordinates[0] + d12*coordinates[1] + d22*coordinates[2]) / detJ;
    
    // Map coordinates to the reference cube
    if (std::abs(y + z - 1.0) < 1e-14)
      x = 1.0;
    else
      x = -2.0 * x/(y + z - 1.0) - 1.0;
    if (std::abs(z - 1.0) < 1e-14)
      y = -1.0;
    else
      y = 2.0 * y/(1.0 - z) - 1.0;
    z = 2.0 * z - 1.0;
    
    // Compute number of derivatives
    unsigned int num_derivatives = 1;
    
    for (unsigned int j = 0; j < n; j++)
      num_derivatives *= 3;
    
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      combinations[j] = new unsigned int [n];
      for (unsigned int k = 0; k < n; k++)
        combinations[j][k] = 0;
    }
        
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] ={{d00 / detJ, d10 / detJ, d20 / detJ}, {d01 / detJ, d11 / detJ, d21 / detJ}, {d02 / detJ, d12 / detJ, d22 / detJ}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values
    for (unsigned int j = 0; j < 1*num_derivatives; j++)
      values[j] = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    const double scalings_y_4 = scalings_y_3*(0.5 - 0.5*y);
    const double scalings_z_0 = 1;
    const double scalings_z_1 = scalings_z_0*(0.5 - 0.5*z);
    const double scalings_z_2 = scalings_z_1*(0.5 - 0.5*z);
    const double scalings_z_3 = scalings_z_2*(0.5 - 0.5*z);
    const double scalings_z_4 = scalings_z_3*(0.5 - 0.5*z);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    const double psitilde_a_4 = 1.75*x*psitilde_a_3 - 0.75*psitilde_a_2;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_0_4 = 0.0285714285714286*psitilde_bs_0_3 + 1.8*y*psitilde_bs_0_3 - 0.771428571428571*psitilde_bs_0_2;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_1_3 = 0.285714285714286*psitilde_bs_1_2 + 2*y*psitilde_bs_1_2 - 0.714285714285714*psitilde_bs_1_1;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_2_2 = 1.02040816326531*psitilde_bs_2_1 + 2.57142857142857*y*psitilde_bs_2_1 - 0.551020408163265*psitilde_bs_2_0;
    const double psitilde_bs_3_0 = 1;
    const double psitilde_bs_3_1 = 4.5*y + 3.5;
    const double psitilde_bs_4_0 = 1;
    
    // Compute psitilde_cs
    const double psitilde_cs_00_0 = 1;
    const double psitilde_cs_00_1 = 2*z + 1;
    const double psitilde_cs_00_2 = 0.3125*psitilde_cs_00_1 + 1.875*z*psitilde_cs_00_1 - 0.5625*psitilde_cs_00_0;
    const double psitilde_cs_00_3 = 0.155555555555556*psitilde_cs_00_2 + 1.86666666666667*z*psitilde_cs_00_2 - 0.711111111111111*psitilde_cs_00_1;
    const double psitilde_cs_00_4 = 0.09375*psitilde_cs_00_3 + 1.875*z*psitilde_cs_00_3 - 0.78125*psitilde_cs_00_2;
    const double psitilde_cs_01_0 = 1;
    const double psitilde_cs_01_1 = 3*z + 2;
    const double psitilde_cs_01_2 = 0.777777777777778*psitilde_cs_01_1 + 2.33333333333333*z*psitilde_cs_01_1 - 0.555555555555556*psitilde_cs_01_0;
    const double psitilde_cs_01_3 = 0.428571428571429*psitilde_cs_01_2 + 2.14285714285714*z*psitilde_cs_01_2 - 0.714285714285714*psitilde_cs_01_1;
    const double psitilde_cs_02_0 = 1;
    const double psitilde_cs_02_1 = 4*z + 3;
    const double psitilde_cs_02_2 = 1.265625*psitilde_cs_02_1 + 2.8125*z*psitilde_cs_02_1 - 0.546875*psitilde_cs_02_0;
    const double psitilde_cs_03_0 = 1;
    const double psitilde_cs_03_1 = 5*z + 4;
    const double psitilde_cs_04_0 = 1;
    const double psitilde_cs_10_0 = 1;
    const double psitilde_cs_10_1 = 3*z + 2;
    const double psitilde_cs_10_2 = 0.777777777777778*psitilde_cs_10_1 + 2.33333333333333*z*psitilde_cs_10_1 - 0.555555555555556*psitilde_cs_10_0;
    const double psitilde_cs_10_3 = 0.428571428571429*psitilde_cs_10_2 + 2.14285714285714*z*psitilde_cs_10_2 - 0.714285714285714*psitilde_cs_10_1;
    const double psitilde_cs_11_0 = 1;
    const double psitilde_cs_11_1 = 4*z + 3;
    const double psitilde_cs_11_2 = 1.265625*psitilde_cs_11_1 + 2.8125*z*psitilde_cs_11_1 - 0.546875*psitilde_cs_11_0;
    const double psitilde_cs_12_0 = 1;
    const double psitilde_cs_12_1 = 5*z + 4;
    const double psitilde_cs_13_0 = 1;
    const double psitilde_cs_20_0 = 1;
    const double psitilde_cs_20_1 = 4*z + 3;
    const double psitilde_cs_20_2 = 1.265625*psitilde_cs_20_1 + 2.8125*z*psitilde_cs_20_1 - 0.546875*psitilde_cs_20_0;
    const double psitilde_cs_21_0 = 1;
    const double psitilde_cs_21_1 = 5*z + 4;
    const double psitilde_cs_22_0 = 1;
    const double psitilde_cs_30_0 = 1;
    const double psitilde_cs_30_1 = 5*z + 4;
    const double psitilde_cs_31_0 = 1;
    const double psitilde_cs_40_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.866025403784439*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_0;
    const double basisvalue1 = 2.73861278752583*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_0;
    const double basisvalue2 = 1.58113883008419*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_0;
    const double basisvalue3 = 1.11803398874989*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_1;
    const double basisvalue4 = 5.1234753829798*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_0;
    const double basisvalue5 = 3.96862696659689*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_0;
    const double basisvalue6 = 2.29128784747792*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_0;
    const double basisvalue7 = 3.24037034920393*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_1;
    const double basisvalue8 = 1.87082869338697*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_1;
    const double basisvalue9 = 1.3228756555323*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_2;
    const double basisvalue10 = 7.93725393319377*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_0;
    const double basisvalue11 = 6.70820393249937*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_0;
    const double basisvalue12 = 5.19615242270663*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_0;
    const double basisvalue13 = 3*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_0;
    const double basisvalue14 = 5.80947501931113*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_1;
    const double basisvalue15 = 4.5*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_1;
    const double basisvalue16 = 2.59807621135332*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_1;
    const double basisvalue17 = 3.67423461417477*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_2;
    const double basisvalue18 = 2.12132034355964*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_2;
    const double basisvalue19 = 1.5*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_3;
    const double basisvalue20 = 11.1242977306435*psitilde_a_4*scalings_y_4*psitilde_bs_4_0*scalings_z_4*psitilde_cs_40_0;
    const double basisvalue21 = 9.81070843517429*psitilde_a_3*scalings_y_3*psitilde_bs_3_1*scalings_z_4*psitilde_cs_31_0;
    const double basisvalue22 = 8.2915619758885*psitilde_a_2*scalings_y_2*psitilde_bs_2_2*scalings_z_4*psitilde_cs_22_0;
    const double basisvalue23 = 6.42261628933256*psitilde_a_1*scalings_y_1*psitilde_bs_1_3*scalings_z_4*psitilde_cs_13_0;
    const double basisvalue24 = 3.70809924354783*psitilde_a_0*scalings_y_0*psitilde_bs_0_4*scalings_z_4*psitilde_cs_04_0;
    const double basisvalue25 = 8.77496438739212*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_1;
    const double basisvalue26 = 7.41619848709566*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_1;
    const double basisvalue27 = 5.74456264653803*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_1;
    const double basisvalue28 = 3.3166247903554*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_1;
    const double basisvalue29 = 6.42261628933256*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_2;
    const double basisvalue30 = 4.9749371855331*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_2;
    const double basisvalue31 = 2.87228132326901*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_2;
    const double basisvalue32 = 4.06201920231798*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_3;
    const double basisvalue33 = 2.34520787991171*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_3;
    const double basisvalue34 = 1.6583123951777*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_4;
    
    // Table(s) of coefficients
    const static double coefficients0[35][35] = \
    {{-0.0137464349807051, -0.0144900147488139, -0.00836581391578937, -0.00591552374999941, 0, 0, 0, 0, 0, 0, -0.00671936840905293, -0.00567890279999946, -0.00439885919382571, -0.00253968253968254, -0.00491807409042211, -0.00380952380952381, -0.00219942959691287, -0.00311046316543895, -0.0017958267458706, -0.00126984126984128, 0.0136980289516341, 0.0120805260192622, 0.010209907964538, 0.00790856070259325, 0.00456600965054471, 0.0108051509532101, 0.00913201930108942, 0.00707363173407281, 0.00408396318581522, 0.00790856070259324, 0.00612594477872282, 0.0035368158670364, 0.00500181296677924, 0.00288779806280616, 0.00204198159290761},
    {-0.0137464349807054, 0.0144900147488139, -0.00836581391578934, -0.00591552374999945, 0, 0, 0, 0, 0, 0, 0.00671936840905293, -0.00567890279999946, 0.00439885919382572, -0.00253968253968254, -0.00491807409042213, 0.00380952380952382, -0.00219942959691286, 0.00311046316543897, -0.0017958267458706, -0.00126984126984127, 0.0136980289516341, -0.0120805260192622, 0.010209907964538, -0.00790856070259325, 0.00456600965054471, -0.0108051509532101, 0.00913201930108941, -0.0070736317340728, 0.00408396318581521, 0.00790856070259325, -0.00612594477872282, 0.0035368158670364, -0.00500181296677924, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807053, 0, 0.0167316278315787, -0.00591552374999946, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0101587301587302, 0, 0, -0.00659828879073857, 0, 0.00359165349174119, -0.00126984126984127, 0, 0, 0, 0, 0.0228300482527235, 0, 0, 0, -0.0163358527432608, 0, 0, 0.0106104476011092, 0, -0.0057755961256123, 0.00204198159290761},
    {-0.0137464349807054, 0, 0, 0.0177465712499983, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0126984126984127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0306297238936141},
    {0.0439885919382572, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0, 0.0406349206349206, 0, 0, 0.00439885919382572, 0, -0.0143666139669648, 0.00761904761904763, 0, 0, 0, 0, 0, 0, 0, 0, 0.0367556686723369, 0, 0, -0.0424417904044368, 0, 0.0303218796594646, -0.0122518895574456},
    {-0.0329914439536931, 0, -0.0200779533978945, -0.0141972569999986, 0, 0, -0.00969857289937744, 0, 0.0712696645099798, -0.050395263067897, 0, 0, 0, 0, 0, 0, 0.0461880215351701, 0, 0.0107749604752236, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0495154221385096, 0, -0.0606437593189292, 0.0306297238936141},
    {0.0439885919382573, 0, 0.0267706045305259, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0, 0.0359165349174119, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0505364660991076, -0.0408396318581522},
    {0.0439885919382573, 0.0231840235981023, -0.0133853022652629, 0.0189296759999982, 0.0433733365754904, -0.0335968420452647, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, -0.0227156111999979, 0.0175954367753029, -0.0101587301587302, 0.00327871606028141, -0.00253968253968255, 0.0014662863979419, -0.0124418526617558, 0.00718330698348238, 0.00761904761904763, 0, 0, 0, 0, 0, 0.0243115896447228, -0.0205470434274512, 0.0159156714016638, -0.00918891716808423, -0.031634242810373, 0.0245037791148913, -0.0141472634681456, 0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, -0.0173880176985766, 0.0100389766989472, -0.0141972569999986, -0.00722888942924838, 0.00559947367421081, -0.00323285763312582, 0.0617213399848368, -0.03563483225499, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, -0.0266666666666667, 0.01539600717839, 0.00933138949631686, -0.00538748023761177, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, -0.0285877423007065, 0.0165051407128365, -0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, 0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0.0311046316543895, -0.017958267458706, 0.0253968253968255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754903, -0.0335968420452647, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, 0, -0.0117302911835353, 0.0101587301587302, -0.0229510124219699, 0.00761904761904761, -0.00146628639794191, 0.0165891368823411, -0.0071833069834824, -0.00761904761904763, 0, 0.0241610520385245, -0.0357346778758831, 0.0355885231616696, -0.0228300482527235, -0.00270128773830253, -0.0114150241263618, 0.0159156714016638, -0.0112308987609918, 0.00395428035129663, 0.00306297238936141, -0.0035368158670364, -0.00375135972508443, 0.00072194951570154, 0.00204198159290761},
    {-0.0329914439536929, -0.0173880176985768, -0.0100389766989472, 0.0141972569999986, -0.00722888942924839, 0.0615942104163185, -0.0614242950293904, -0.00685792666498187, -0.00395942580611001, 0.00559947367421077, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042213, -0.0266666666666667, 0.0175954367753029, 0.00933138949631688, 0.00538748023761179, -0.00761904761904761, 0, 0, 0.0357346778758831, -0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108943, 0, 0.00408396318581521, 0.00131809345043221, 0.00714693557517662, -0.00471575448938186, -0.00250090648338962, -0.00144389903140307, 0.00204198159290761},
    {0.0439885919382572, 0.0231840235981022, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0.0293257279588382, 0.0101587301587302, 0, -0.0101587301587302, -0.0219942959691286, 0.00207364211029264, 0.017958267458706, -0.00761904761904762, 0, 0, 0, 0.0395428035129662, -0.0456600965054471, 0, 0, -0.017684079335182, 0.0142938711503532, 0, 0.00612594477872282, 0, -0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.043988591938257, -0.0231840235981023, -0.0133853022652629, 0.0189296759999983, 0.0433733365754903, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484216, -0.0268774736362117, -0.0227156111999979, -0.0175954367753029, -0.0101587301587302, 0.00327871606028139, 0.00253968253968253, 0.0014662863979419, 0.0124418526617558, 0.00718330698348236, 0.00761904761904761, 0, 0, 0, 0, 0, -0.0243115896447228, -0.0205470434274512, -0.0159156714016638, -0.00918891716808424, -0.031634242810373, -0.0245037791148913, -0.0141472634681456, -0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, 0.0173880176985768, 0.0100389766989471, -0.0141972569999987, -0.00722888942924838, -0.00559947367421082, -0.00323285763312581, -0.0617213399848367, -0.03563483225499, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, 0.0266666666666667, 0.01539600717839, -0.00933138949631689, -0.00538748023761178, -0.019047619047619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, 0.0285877423007065, 0.0165051407128365, 0.0525190361511819, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382572, -0.0231840235981023, -0.0133853022652629, 0.0189296759999981, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, -0.0311046316543896, -0.017958267458706, 0.0253968253968255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484216, -0.0268774736362117, 0, 0.0117302911835352, 0.0101587301587302, -0.0229510124219699, -0.00761904761904762, -0.00146628639794191, -0.0165891368823411, -0.00718330698348239, -0.00761904761904763, 0, -0.0241610520385245, -0.0357346778758831, -0.0355885231616696, -0.0228300482527235, 0.00270128773830254, -0.0114150241263618, -0.0159156714016638, -0.0112308987609918, 0.00395428035129662, -0.00306297238936141, -0.0035368158670364, 0.00375135972508443, 0.000721949515701533, 0.00204198159290761},
    {-0.0329914439536929, 0.0173880176985766, -0.0100389766989472, 0.0141972569999987, -0.00722888942924841, -0.0615942104163186, -0.0614242950293904, 0.00685792666498186, -0.00395942580610998, 0.00559947367421075, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042213, 0.0266666666666667, 0.0175954367753029, -0.00933138949631688, 0.00538748023761179, -0.00761904761904763, 0, 0, 0.0357346778758831, 0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108943, 0, 0.0040839631858152, 0.00131809345043222, -0.00714693557517663, -0.00471575448938187, 0.00250090648338962, -0.00144389903140308, 0.00204198159290761},
    {0.0439885919382573, -0.0231840235981022, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, -0.0293257279588382, 0.0101587301587302, 0, 0.0101587301587301, -0.0219942959691286, -0.00207364211029265, 0.017958267458706, -0.00761904761904761, 0, 0, 0, -0.0395428035129663, -0.0456600965054471, 0, 0, 0.017684079335182, 0.0142938711503532, 0, -0.00612594477872281, 0, 0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.0439885919382571, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484215, 0.0134387368181058, -0.0113578055999989, -0.0205280095711867, -0.0152380952380952, -0.00983614818084424, -0.0177777777777778, -0.0131965775814772, -0.0145154947720485, -0.0107749604752236, -0.00761904761904761, -0.0547921158065365, -0.0241610520385245, -0.00510495398226901, 0.00395428035129663, 0.00456600965054471, -0.0216103019064202, -0.00456600965054471, 0.00353681586703639, 0.00408396318581521, -0.00395428035129661, 0.0030629723893614, 0.0035368158670364, 0.00250090648338961, 0.00288779806280615, 0.00204198159290761},
    {-0.0329914439536931, 0, 0.0200779533978945, 0.0141972569999987, -0.0867466731509807, 0, 0.00969857289937743, 0, 0.00791885161221998, 0.00559947367421076, 0, 0.0340734167999968, 0, -0.0152380952380953, 0.0295084445425327, 0, -0.0131965775814772, 0, -0.0107749604752236, -0.00761904761904762, 0.0821881737098047, 0, -0.010209907964538, 0, 0.00456600965054471, 0, -0.00913201930108944, 0, 0.00408396318581521, -0.00790856070259326, 0, 0.0035368158670364, 0, 0.00288779806280615, 0.00204198159290761},
    {0.0439885919382573, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754903, -0.0335968420452646, 0.0193971457987549, -0.0274317066599274, 0.01583770322444, 0.0111989473484215, -0.0134387368181058, -0.0113578055999989, 0.0205280095711867, -0.0152380952380952, -0.00983614818084423, 0.0177777777777778, -0.0131965775814772, 0.0145154947720485, -0.0107749604752236, -0.00761904761904761, -0.0547921158065365, 0.0241610520385245, -0.005104953982269, -0.00395428035129662, 0.00456600965054471, 0.0216103019064202, -0.0045660096505447, -0.0035368158670364, 0.00408396318581521, -0.00395428035129662, -0.00306297238936141, 0.00353681586703641, -0.00250090648338962, 0.00288779806280615, 0.00204198159290761},
    {0.0439885919382573, 0.139104141588614, -0.080311813591578, -0.0567890279999947, 0.0578311154339872, 0.0335968420452646, -0.0420271492306356, 0.0274317066599275, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, -0.0586514559176763, 0.0406349206349207, 0.039344592723377, 0.00253968253968254, -0.0109971479845643, -0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, -0.053052238005546, 0.0367556686723369, -0.0105447476034577, -0.0245037791148913, 0.0235787724469093, 0.0175063453837273, 0, -0.0122518895574457},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0, 0.0783926314389509, 0.0096985728993774, -0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, 0.0586514559176763, -0.0609523809523809, 0, 0.033015873015873, 0.0241937255660415, -0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, 0.053052238005546, -0.0551335030085053, 0, -0.0326717054865217, 0.0141472634681456, 0.00875317269186366, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382571, 0, 0, 0.170367083999984, 0, -0.0111989473484216, 0.00969857289937744, 0.0822951199797824, 0.0475131096733199, -0.0167984210226324, 0, 0, 0, 0, 0, 0.0533333333333333, -0.0461880215351701, 0.0435464843161454, 0.0251415744421883, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.057175484601413, -0.0495154221385096, -0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382571, -0.139104141588614, -0.0803118135915779, -0.0567890279999947, 0.0578311154339871, -0.0335968420452646, -0.0420271492306356, -0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, 0.0586514559176763, 0.0406349206349206, 0.0393445927233769, -0.00253968253968253, -0.0109971479845643, 0.0601356211984865, 0.0179582674587059, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, 0.053052238005546, 0.0367556686723369, -0.0105447476034577, 0.0245037791148913, 0.0235787724469093, -0.0175063453837273, 0, -0.0122518895574457},
    {0.0439885919382571, 0, 0.160623627183156, -0.0567890279999946, 0, -0.0783926314389509, 0.00969857289937745, 0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, -0.0586514559176763, -0.0609523809523809, 0, -0.033015873015873, 0.0241937255660415, 0.0145154947720485, -0.0610581093596003, 0.0393650793650793, 0, 0, 0, 0, 0, 0, 0, -0.053052238005546, -0.0551335030085053, 0, 0.0326717054865217, 0.0141472634681456, -0.00875317269186368, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0, 0.0111989473484215, 0.00969857289937745, -0.0822951199797824, 0.0475131096733199, -0.0167984210226323, 0, 0, 0, 0, 0, -0.0533333333333333, -0.0461880215351701, -0.0435464843161453, 0.0251415744421883, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0571754846014129, -0.0495154221385096, 0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754903, 0.0447957893936862, 0.0484928644968872, -0.0548634133198549, 0, -0.0167984210226323, 0.0806324209086351, 0.0227156111999979, -0.0058651455917676, -0.0101587301587302, -0.00327871606028142, 0.0304761904761905, 0.0271262983619253, 0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, 0.0729347689341683, 0.0205470434274512, -0.00530522380055458, -0.00918891716808423, 0.031634242810373, -0.00816792637163039, -0.0141472634681456, -0.00875317269186365, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382571, 0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754904, -0.0447957893936862, 0.0484928644968873, 0.0548634133198549, 0, -0.0167984210226323, -0.0806324209086351, 0.0227156111999979, 0.0058651455917676, -0.0101587301587302, -0.00327871606028142, -0.0304761904761905, 0.0271262983619253, -0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, -0.0729347689341683, 0.0205470434274512, 0.00530522380055459, -0.00918891716808424, 0.031634242810373, 0.00816792637163042, -0.0141472634681456, 0.00875317269186367, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0.0144577788584968, 0, -0.00323285763312585, 0, -0.0950262193466398, -0.0167984210226323, 0, 0, 0, 0, -0.0688530372659096, 0, 0.01539600717839, 0, -0.0502831488843767, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0738132332242036, 0, 0.0165051407128365, 0, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754903, -0.0447957893936862, -0.00969857289937743, 0.0548634133198549, 0.03167540644888, 0.0391963157194754, 0.0806324209086351, 0, 0.0527863103259086, 0.0609523809523809, 0.0229510124219699, 0.0101587301587302, 0.0168622935763319, -0.0124418526617558, -0.00718330698348239, -0.013968253968254, 0, 0.0724831561155734, 0.0357346778758831, -0.0118628410538899, -0.0228300482527235, -0.00810386321490759, 0.0114150241263618, -0.00530522380055459, -0.0112308987609918, -0.00395428035129662, -0.00102099079645379, -0.0035368158670364, 0.00125045324169481, 0.000721949515701537, 0.00204198159290762},
    {0.0439885919382571, 0.139104141588614, -0.080311813591578, -0.0567890279999947, -0.0433733365754904, 0.0447957893936862, -0.00969857289937742, -0.0548634133198549, 0.0316754064488799, 0.0391963157194754, -0.0806324209086351, 0, -0.0527863103259086, 0.060952380952381, 0.0229510124219699, -0.0101587301587302, 0.0168622935763319, 0.0124418526617558, -0.00718330698348236, -0.013968253968254, 0, -0.0724831561155734, 0.0357346778758831, 0.0118628410538899, -0.0228300482527236, 0.00810386321490761, 0.0114150241263618, 0.00530522380055459, -0.0112308987609918, -0.00395428035129662, 0.00102099079645379, -0.0035368158670364, -0.0012504532416948, 0.000721949515701528, 0.0020419815929076},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0.0144577788584968, 0, -0.0614242950293905, 0, -0.0633508128977598, 0.0391963157194754, 0, -0.0681468335999936, 0, -0.0914285714285715, 0.00983614818084423, 0, 0.0285925847598672, 0, 0.0143666139669647, -0.0139682539682539, 0, 0, -0.0714693557517662, 0, 0.0456600965054471, 0, 0.0182640386021788, 0, 0.0040839631858152, -0.00263618690086443, 0, -0.00471575448938186, 0, -0.00144389903140306, 0.00204198159290759},
    {0.351908735506058, 0, 0, 0, -0.115662230867974, 0, -0.129314305325032, 0, 0, -0.134387368181059, 0, -0.0908624447999914, 0, 0.0406349206349206, -0.0786891854467539, 0, -0.0879771838765144, 0, 0, 0.0711111111111111, 0, 0, 0, 0, 0, 0, -0.0821881737098047, 0, 0.0367556686723369, 0.0210894952069153, 0, 0.0235787724469093, 0, 0, -0.0122518895574456}};
    
    // Interesting (new) part
    // Tables of derivatives of the polynomial base (transpose)
    const static double dmats0[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {6.32455532033677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 11.2249721603218, 0, 0, 0, 1.70793006049707e-14, 0, 0, 1.16063842564573e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.58257569495585, 0, 8.36660026534076, -1.18321595661992, 0, 0, 1.04642314135461e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.74165738677394, 0, 0, 8.69482604771366, 0, 0, 0, -1.66625972279159e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.49909083394701, 0, -3.34664010613631, -2.36643191323985, 15.4919333848297, 0, 0.692820323027549, 0, 0.56568542494924, 0.400000000000009, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 4.89897948556635, 0, 0, 0, 14.1985914794391, 0, -0.828078671210828, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.60000000000001, 0, 8.76356092008266, -1.54919333848296, 0, 0, 9.52470471983254, 0, -1.48131215963609, 0.261861468283193, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 4.24264068711929, 0, 0, 0, 0, 0, 14.3427433120127, 2.84156378982381e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.11769145362398, 0, 3.16227766016838, 4.91934955049954, 0, 0, 0, -1.2538531175753e-14, 10.690449676497, -2.41897262725905, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.54558441227157, 0, 0, 7.66811580507232, 0, 0, 0, 0, 0, 10.3691851174526, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 11.6057691494799, 0, 0, 0, -4.20458932936041, 0, -3.43303281162798, 0, 0, 19.6214168703486, 0, 0.611677741841197, 0, 0, 0.529728463363978, 0, 0.432521479156785, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.53137212479103, 0, 3.54562104171167, -2.50713268211203, 4.78713553878169, 0, -5.56626745075493, 0, -1.04880884817015, 0.741619848709563, 0, 18.8034951158403, 0, 1.68183573174416, -0.603122387046455, 0, 0.701283781217662, 0, 0.132137494528683, -0.0934353184302337, 0, 0, 0, 0, -2.04851899834062e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.12802291379194e-14, 2.59512887494071, 0, 0, 0, 10.0285307284481, 1.48509074345102e-14, -0.767649473578742, 0, 0, 0, 0, 16.4130361329658, 0, 0, -1.26347611061158, 0, 0.0967147429123335, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.96647939483827, 0, 8.12403840463597, -1.64130361329658, 0, 0, 11.7728501222091, 0, -2.40312296813959, 0.485504156227609, 0, 0, 0, 10.2761860629321, 0, 0, -1.48323969741914, 0, 0.30276503540975, -0.0611677741841184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.05298244095217, 0, -1.58564993434419, 4.4848952846511, 4.28174419288837, 0, 0.191485421551264, 0, -3.75233260785875, -4.31161222746203, 0, 0, 0, 0, 18.8807171866294, 0, 0.844371341865038, 0, 1.18187368057056, 1.04463861754668, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 2.32115382989598, 0, 0, 0, 3.92428337406973, 0, 5.49285249860476, 1.21484853427001e-14, 0, 0, 0, 0, 0, 0, 17.3044631365565, 0, -1.73008591662714, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.65329983228433, 0, 4.15220619990513, 2.93605316083776, 0, 0, 2.63248931621764, 0, 9.82591326180785, -2.8226127713774, 0, 0, 0, 0, 0, 0, 11.6081867662439, 0, -3.09487177319466, 0.683876505540249, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 2.01017818278148, 0, 0, 0, 0, 0, 8.91928088068602, 1.76356325376492e-14, 0, 0, 0, 0, 0, 0, 0, 0, 16.8558564884489, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.29782505861521, 0, 1.49829835452879, 5.50917601898535, 0, 0, 0, 0, 6.64803945320938, 4.13676892548485, 0, 0, 0, 0, 0, 0, 0, 0, 12.5636136423842, -3.55352656109507, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87616630392938, 0, 0, 6.2283092998577, 0, 0, 0, 0, 0, 11.0541524195338, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11.6057691494799, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    const static double dmats1[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.16227766016838, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.47722557505166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.95803989154981, 5.61248608016091, -1.08012344973464, -0.763762615825977, 0, 1.12766252988532e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.29128784747793, 7.24568837309472, 4.18330013267038, -0.591607978309962, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-2.64575131106459, 0, 9.66091783079296, 0.683130051063976, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87082869338697, 0, 0, 4.34741302385683, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.24037034920392, 0, 0, 7.52994023880667, 0, 0, 0, -1.40420976242894e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.74954541697351, 5.79655069847578, -1.67332005306815, -1.18321595661993, 7.74596669241484, -1.2, 0.346410161513776, -0.979795897113278, 0.282842712474625, 0.200000000000005, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.32379000772444, 2.44948974278317, 2.82842712474619, -0.999999999999997, 9.16515138991168, 7.09929573971955, -2.04939015319192, -0.414039335605417, -0.478091443733761, 0.169030850945703, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.80000000000001, -5.69209978830309, 4.38178046004133, -0.77459666924148, 0, 10.998181667894, 4.76235235991628, 0.962140470884725, -0.740656079818049, 0.130930734141596, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.19615242270664, 0, -3.16227766016837, -2.23606797749979, 0, 0, 13.7477270848675, 0, 0.534522483824846, 0.377964473009225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.01246117974981, 2.12132034355964, -0.408248290463859, 3.17542648054293, 0, 0, 0, 7.17137165600634, -1.3801311186847, -1.56144011671765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.55884572681199, 2.73861278752583, 1.5811388300842, 2.45967477524977, 0, 0, 0, 9.2582009977255, 5.3452248382485, -1.20948631362952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-1.79999999999999, 0, 3.65148371670111, -2.84018778721876, 0, 0, 0, 0, 12.3442679969673, 1.39659449751036, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.27279220613578, 0, 0, 3.83405790253616, 0, 0, 0, 0, 0, 5.18459255872629, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.20454076850485, 0, 0, 6.64078308635359, 0, 0, 0, 0, 0, 8.97997772825746, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.56904651573303, 5.80288457473998, -2.01017818278148, -1.42141062443803, 8.14215222512715, -2.10229466468021, 0.728256234341421, -1.71651640581399, 0.594618725379067, 0.420458932936047, 9.81070843517429, -1.18450885369836, 0.3058388709206, -0.105945692672795, -1.02581475831036, 0.264864231681991, -0.0917516612761804, 0.216260739578394, -0.0749149177264392, -0.0529728463363962, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.26568606239552, 3.07059789431495, 1.77281052085584, -1.25356634105601, 2.39356776939085, 6.30376871403133, -2.78313372537746, -0.908295106229249, -0.524404424085077, 0.370809924354783, 11.1242977306435, 9.40174755792013, -2.42752078113806, 0.840917865872083, -0.301561193523227, -0.794200206656967, 0.350641890608831, 0.114434427054266, 0.0660687472643429, -0.0467176592151151, 0, 0, 0, 1.18413955033316e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.91485421551268, 1.29756443747035, 3.74574588632197, -1.05945692672795, -8.09173593712687, 5.01426536422407, 1.80936716113936, -0.383824736789366, -1.1080065755349, 0.313391585264, 0, 12.7134831207354, 8.2065180664829, -2.84282124887606, 1.01946290306866, -0.631738055305791, -0.227958835180081, 0.0483573714561658, 0.139595707137601, -0.0394836284566112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741914, 7.03562363973515, 4.06201920231798, -0.820651806648292, 0, -6.79705818718658, 5.88642506110457, -2.08116553882674, -1.2015614840698, 0.242752078113806, 0, 0, 14.8323969741913, 5.13809303146605, 0, 0.856348838577678, -0.741619848709567, 0.262202212042541, 0.151382517704874, -0.0305838870920586, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-3.42539535431071, 0, 9.38083151964686, 1.89521416591737, 0, 1.48502651407619e-14, -3.39852909359332, 0, -2.77488738510233, -0.560611910581396, 0, 0, 0, 17.7988763690296, 0, 0, 0.42817441928884, 0, 0.349602949390053, 0.0706304617818605, 0, 0, 0, 0, -1.76908227133537e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.02649122047609, 2.74642624930238, -0.792824967172093, 2.24244764232555, 2.14087209644419, -0.331662479035538, 0.095742710775634, 6.49923072370876, -1.87616630392936, -2.15580611373101, 0, 0, 0, 0, 9.44035859331469, -1.46249406456536, 0.42218567093252, -2.04706526287664, 0.59093684028528, 0.522319308773337, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.71269767715535, 1.16057691494799, 1.34011878852098, 1.89521416591738, 2.53311402559511, 1.96214168703486, -0.566421515598881, 2.74642624930237, 3.17129986868837, -1.82198870938951, 0, 0, 0, 0, 11.1699829238239, 8.65223156827827, -2.49768411251822, -0.865042958313569, -0.998865569685858, 0.441440386136648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.32664991614216, -2.69693703815182, 2.07610309995257, 1.46802658041888, 0, 3.03973683071413, 1.31624465810882, -6.382117875081, 4.91295663090391, -1.4113063856887, 0, 0, 0, 0, 0, 13.4039795085887, 5.80409338312195, 2.01017818278147, -1.54743588659732, 0.341938252770131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.82970843102535, 0, -1.49829835452879, 4.23782770691181, 0, 0, 3.79967103839267, 0, -3.54562104171168, -4.07409060843206, 0, 0, 0, 0, 0, 0, 16.7549743857359, 0, 1.11676565710082, 0.987090711415304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741913, 1.00508909139074, -0.193429485824663, 3.55615782880925, 0, 0, 0, 4.459640440343, -0.858258202906983, 2.67027285925187, 0, 0, 0, 0, 0, 0, 0, 8.42792824422443, -1.62195554683794, -2.29379153190448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.14891252930761, 1.29756443747036, 0.749149177264399, 2.75458800949267, 0, 0, 0, 5.75737105184053, 3.3240197266047, 2.06838446274242, 0, 0, 0, 0, 0, 0, 0, 10.8804085776374, 6.2818068211921, -1.77676328054753, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.02006749648391e-14, 0, 0},
    {-1.32664991614216, 0, 1.73008591662714, -3.18072425757422, 0, 0, 0, 1.15266449376351e-14, 7.67649473578738, -2.38836465270397, 0, 0, 0, 0, 0, 0, 0, 0, 14.5072114368499, 2.05162951662072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.938083151964688, 0, 0, 3.11415464992885, 0, 0, 0, 0, 0, 5.52707620976692, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.80288457473997, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.6248076809272, 0, 0, 5.39387407630363, 0, 0, 0, 0, 0, 9.57317681262152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10.0508909139073, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    const static double dmats2[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.16227766016838, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.82574185835056, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.16397779494323, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.95803989154981, 5.61248608016091, -1.08012344973464, -0.763762615825976, 0, 1.39411605579536e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.29128784747792, 1.44913767461894, 4.18330013267038, -0.591607978309961, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.3228756555323, 0, 3.86436713231718, -0.341565025531985, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87082869338697, 7.09929573971954, 0, 4.34741302385683, 0, 1.2137796469483e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.08012344973464, 0, 7.09929573971954, 2.50998007960223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-3.81881307912987, 0, 0, 8.87411967464942, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.74954541697351, 5.79655069847578, -1.67332005306815, -1.18321595661993, 7.74596669241484, -1.19999999999999, 0.346410161513777, -0.97979589711328, 0.282842712474624, 0.200000000000005, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.32379000772445, 2.44948974278317, 2.82842712474619, -0.999999999999998, 1.30930734141596, 7.09929573971955, -2.04939015319192, -0.414039335605417, -0.478091443733761, 0.169030850945707, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.80000000000001, 0.632455532033672, 4.38178046004133, -0.774596669241482, 0, 3.14233761939829, 4.76235235991627, -0.106904496764972, -0.740656079818045, 0.130930734141597, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.03923048454133, 0, 3.16227766016838, -0.447213595499956, 0, 0, 5.8918830363718, 0, -0.534522483824849, 0.0755928946018436, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.0124611797498, 2.12132034355964, -0.408248290463861, 3.17542648054293, 9.07114735222144, 0, 0, 7.17137165600635, -1.3801311186847, -1.56144011671765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.558845726812, 0.547722557505166, 1.5811388300842, 2.45967477524977, 0, 9.07114735222146, 0, 1.85164019954509, 5.34522483824849, -1.20948631362952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.900000000000005, 0, 1.46059348668045, 1.42009389360939, 0, 0, 9.07114735222146, 0, 4.93770719878694, -0.698297248755174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.27279220613578, -6.26099033699941, 0, 3.83405790253616, 0, -1.33471233241901e-14, 0, 10.5830052442584, 1.61529151756054e-14, 5.18459255872629, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.734846922834955, 0, -6.26099033699941, 2.21359436211787, 0, 0, 0, 0, 10.5830052442584, 2.99332590941916, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.7157676649773, 0, 0, -4.69574275274955, 0, 0, 0, 0, 0, 12.69960629311, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.56904651573303, 5.80288457473998, -2.01017818278148, -1.42141062443803, 8.14215222512715, -2.10229466468021, 0.72825623434142, -1.71651640581399, 0.594618725379067, 0.420458932936046, 9.81070843517429, -1.18450885369836, 0.305838870920599, -0.105945692672794, -1.02581475831036, 0.264864231681991, -0.0917516612761805, 0.216260739578394, -0.0749149177264392, -0.052972846336396, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.26568606239552, 3.07059789431495, 1.77281052085584, -1.25356634105602, 2.39356776939084, 6.30376871403133, -2.78313372537746, -0.908295106229248, -0.524404424085073, 0.370809924354783, 1.23603308118261, 9.40174755792013, -2.42752078113806, 0.840917865872083, -0.301561193523226, -0.794200206656968, 0.350641890608831, 0.114434427054266, 0.0660687472643423, -0.0467176592151165, 0, 0, 0, 1.09746923696279e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.91485421551268, 1.29756443747035, 3.74574588632197, -1.05945692672795, 0.404586796856347, 5.01426536422407, 1.80936716113937, -0.383824736789372, -1.1080065755349, 0.313391585264004, 0, 2.82521847127454, 8.2065180664829, -2.84282124887606, -0.0509731451534344, -0.631738055305788, -0.227958835180082, 0.0483573714561684, 0.139595707137601, -0.039483628456609, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741914, 0.335029697130247, 4.06201920231798, -0.820651806648289, 0, 1.69926454679664, 5.88642506110457, -0.099103120896514, -1.2015614840698, 0.242752078113805, 0, 0, 4.94413232473044, 5.13809303146605, 0, -0.214087209644418, -0.741619848709568, 0.0124858196210747, 0.151382517704876, -0.0305838870920584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.856348838577678, 0, 2.68023757704196, -0.473803541479345, 0, 0, 5.09779364038992, 0, -0.792824967172097, 0.140152977645345, 0, 0, 0, 7.91061171956871, 0, 0, -0.642261628933257, 0, 0.0998865569685871, -0.0176576154454654, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.02649122047609, 2.74642624930238, -0.792824967172095, 2.24244764232555, 2.14087209644419, -0.331662479035546, 0.0957427107756332, 6.49923072370876, -1.87616630392937, -2.15580611373101, 11.0554159678513, 0, 0, 0, 9.44035859331468, -1.46249406456535, 0.42218567093252, -2.04706526287664, 0.59093684028528, 0.522319308773341, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.71269767715534, 1.16057691494799, 1.34011878852098, 1.89521416591737, 0.36187343222787, 1.96214168703486, -0.566421515598891, 2.74642624930238, 3.17129986868838, -1.82198870938951, 0, 11.0554159678513, 0, 0, 1.59571184626056, 8.65223156827827, -2.49768411251822, -0.865042958313572, -0.998865569685858, 0.441440386136647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.32664991614217, 0.299659670905757, 2.07610309995256, 1.46802658041888, 0, 0.868496237346881, 1.31624465810882, 0.709124208342336, 4.91295663090392, -1.4113063856887, 0, 0, 11.0554159678513, 0, 0, 3.82970843102535, 5.80409338312195, -0.223353131420161, -1.54743588659733, 0.341938252770126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.765941686205071, 0, 1.49829835452879, 0.847565541382364, 0, 0, 1.62843044502542, 0, 3.54562104171167, -0.814818121686411, 0, 0, 0, 11.0554159678513, 0, 0, 7.18070330817254, 0, -1.11676565710082, 0.197418142283063, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741914, 1.00508909139074, -0.193429485824663, 3.55615782880926, -8.46157280212812, 0, 0, 4.45964044034301, -0.858258202906987, 2.67027285925186, 0, 0, 0, 0, 12.4373429638327, 0, 0, 8.42792824422443, -1.62195554683794, -2.29379153190448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.1489125293076, 0.259512887494073, 0.749149177264395, 2.75458800949267, 0, -8.46157280212812, 0, 1.15147421036811, 3.32401972660469, 2.06838446274243, 0, 0, 0, 0, 0, 12.4373429638327, 0, 2.17608171552749, 6.2818068211921, -1.77676328054754, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.663324958071074, 0, 0.692034366650849, 1.59036212878711, 0, 0, -8.46157280212813, 0, 3.07059789431495, 1.19418232635198, 0, 0, 0, 0, 0, 0, 12.4373429638327, 0, 5.80288457473997, -1.02581475831036, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.938083151964688, 7.62808987244126, 0, 3.11415464992885, 0, 0, 0, -7.5213980463361, 0, 5.52707620976691, 0, 0, 0, 0, 0, 0, 0, 14.2141062443803, 0, 5.80288457473998, 0, 0, 0, 0, 0, 1.03455020940032e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.541602560309059, 0, 7.62808987244125, 1.79795802543454, 0, 0, 0, 0, -7.52139804633611, 3.1910589375405, 0, 0, 0, 0, 0, 0, 0, 0, 14.2141062443803, 3.35029697130244, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-5.36159180343549, 0, 0, 8.8994381845148, 0, 0, 0, 0, -1.07784467308941e-14, -5.26497863243527, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16.583123951777, 0, 0, 0, 0, 0, 1.2461107758246e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    // Compute reference derivatives
    // Declare pointer to array of derivatives on FIAT element
    double *derivatives = new double [num_derivatives];
    
    // Declare coefficients
    double coeff0_0 = 0;
    double coeff0_1 = 0;
    double coeff0_2 = 0;
    double coeff0_3 = 0;
    double coeff0_4 = 0;
    double coeff0_5 = 0;
    double coeff0_6 = 0;
    double coeff0_7 = 0;
    double coeff0_8 = 0;
    double coeff0_9 = 0;
    double coeff0_10 = 0;
    double coeff0_11 = 0;
    double coeff0_12 = 0;
    double coeff0_13 = 0;
    double coeff0_14 = 0;
    double coeff0_15 = 0;
    double coeff0_16 = 0;
    double coeff0_17 = 0;
    double coeff0_18 = 0;
    double coeff0_19 = 0;
    double coeff0_20 = 0;
    double coeff0_21 = 0;
    double coeff0_22 = 0;
    double coeff0_23 = 0;
    double coeff0_24 = 0;
    double coeff0_25 = 0;
    double coeff0_26 = 0;
    double coeff0_27 = 0;
    double coeff0_28 = 0;
    double coeff0_29 = 0;
    double coeff0_30 = 0;
    double coeff0_31 = 0;
    double coeff0_32 = 0;
    double coeff0_33 = 0;
    double coeff0_34 = 0;
    
    // Declare new coefficients
    double new_coeff0_0 = 0;
    double new_coeff0_1 = 0;
    double new_coeff0_2 = 0;
    double new_coeff0_3 = 0;
    double new_coeff0_4 = 0;
    double new_coeff0_5 = 0;
    double new_coeff0_6 = 0;
    double new_coeff0_7 = 0;
    double new_coeff0_8 = 0;
    double new_coeff0_9 = 0;
    double new_coeff0_10 = 0;
    double new_coeff0_11 = 0;
    double new_coeff0_12 = 0;
    double new_coeff0_13 = 0;
    double new_coeff0_14 = 0;
    double new_coeff0_15 = 0;
    double new_coeff0_16 = 0;
    double new_coeff0_17 = 0;
    double new_coeff0_18 = 0;
    double new_coeff0_19 = 0;
    double new_coeff0_20 = 0;
    double new_coeff0_21 = 0;
    double new_coeff0_22 = 0;
    double new_coeff0_23 = 0;
    double new_coeff0_24 = 0;
    double new_coeff0_25 = 0;
    double new_coeff0_26 = 0;
    double new_coeff0_27 = 0;
    double new_coeff0_28 = 0;
    double new_coeff0_29 = 0;
    double new_coeff0_30 = 0;
    double new_coeff0_31 = 0;
    double new_coeff0_32 = 0;
    double new_coeff0_33 = 0;
    double new_coeff0_34 = 0;
    
    // Loop possible derivatives
    for (unsigned int deriv_num = 0; deriv_num < num_derivatives; deriv_num++)
    {
      // Get values from coefficients array
      new_coeff0_0 = coefficients0[dof][0];
      new_coeff0_1 = coefficients0[dof][1];
      new_coeff0_2 = coefficients0[dof][2];
      new_coeff0_3 = coefficients0[dof][3];
      new_coeff0_4 = coefficients0[dof][4];
      new_coeff0_5 = coefficients0[dof][5];
      new_coeff0_6 = coefficients0[dof][6];
      new_coeff0_7 = coefficients0[dof][7];
      new_coeff0_8 = coefficients0[dof][8];
      new_coeff0_9 = coefficients0[dof][9];
      new_coeff0_10 = coefficients0[dof][10];
      new_coeff0_11 = coefficients0[dof][11];
      new_coeff0_12 = coefficients0[dof][12];
      new_coeff0_13 = coefficients0[dof][13];
      new_coeff0_14 = coefficients0[dof][14];
      new_coeff0_15 = coefficients0[dof][15];
      new_coeff0_16 = coefficients0[dof][16];
      new_coeff0_17 = coefficients0[dof][17];
      new_coeff0_18 = coefficients0[dof][18];
      new_coeff0_19 = coefficients0[dof][19];
      new_coeff0_20 = coefficients0[dof][20];
      new_coeff0_21 = coefficients0[dof][21];
      new_coeff0_22 = coefficients0[dof][22];
      new_coeff0_23 = coefficients0[dof][23];
      new_coeff0_24 = coefficients0[dof][24];
      new_coeff0_25 = coefficients0[dof][25];
      new_coeff0_26 = coefficients0[dof][26];
      new_coeff0_27 = coefficients0[dof][27];
      new_coeff0_28 = coefficients0[dof][28];
      new_coeff0_29 = coefficients0[dof][29];
      new_coeff0_30 = coefficients0[dof][30];
      new_coeff0_31 = coefficients0[dof][31];
      new_coeff0_32 = coefficients0[dof][32];
      new_coeff0_33 = coefficients0[dof][33];
      new_coeff0_34 = coefficients0[dof][34];
    
      // Loop derivative order
      for (unsigned int j = 0; j < n; j++)
      {
        // Update old coefficients
        coeff0_0 = new_coeff0_0;
        coeff0_1 = new_coeff0_1;
        coeff0_2 = new_coeff0_2;
        coeff0_3 = new_coeff0_3;
        coeff0_4 = new_coeff0_4;
        coeff0_5 = new_coeff0_5;
        coeff0_6 = new_coeff0_6;
        coeff0_7 = new_coeff0_7;
        coeff0_8 = new_coeff0_8;
        coeff0_9 = new_coeff0_9;
        coeff0_10 = new_coeff0_10;
        coeff0_11 = new_coeff0_11;
        coeff0_12 = new_coeff0_12;
        coeff0_13 = new_coeff0_13;
        coeff0_14 = new_coeff0_14;
        coeff0_15 = new_coeff0_15;
        coeff0_16 = new_coeff0_16;
        coeff0_17 = new_coeff0_17;
        coeff0_18 = new_coeff0_18;
        coeff0_19 = new_coeff0_19;
        coeff0_20 = new_coeff0_20;
        coeff0_21 = new_coeff0_21;
        coeff0_22 = new_coeff0_22;
        coeff0_23 = new_coeff0_23;
        coeff0_24 = new_coeff0_24;
        coeff0_25 = new_coeff0_25;
        coeff0_26 = new_coeff0_26;
        coeff0_27 = new_coeff0_27;
        coeff0_28 = new_coeff0_28;
        coeff0_29 = new_coeff0_29;
        coeff0_30 = new_coeff0_30;
        coeff0_31 = new_coeff0_31;
        coeff0_32 = new_coeff0_32;
        coeff0_33 = new_coeff0_33;
        coeff0_34 = new_coeff0_34;
    
        if(combinations[deriv_num][j] == 0)
        {
          new_coeff0_0 = coeff0_0*dmats0[0][0] + coeff0_1*dmats0[1][0] + coeff0_2*dmats0[2][0] + coeff0_3*dmats0[3][0] + coeff0_4*dmats0[4][0] + coeff0_5*dmats0[5][0] + coeff0_6*dmats0[6][0] + coeff0_7*dmats0[7][0] + coeff0_8*dmats0[8][0] + coeff0_9*dmats0[9][0] + coeff0_10*dmats0[10][0] + coeff0_11*dmats0[11][0] + coeff0_12*dmats0[12][0] + coeff0_13*dmats0[13][0] + coeff0_14*dmats0[14][0] + coeff0_15*dmats0[15][0] + coeff0_16*dmats0[16][0] + coeff0_17*dmats0[17][0] + coeff0_18*dmats0[18][0] + coeff0_19*dmats0[19][0] + coeff0_20*dmats0[20][0] + coeff0_21*dmats0[21][0] + coeff0_22*dmats0[22][0] + coeff0_23*dmats0[23][0] + coeff0_24*dmats0[24][0] + coeff0_25*dmats0[25][0] + coeff0_26*dmats0[26][0] + coeff0_27*dmats0[27][0] + coeff0_28*dmats0[28][0] + coeff0_29*dmats0[29][0] + coeff0_30*dmats0[30][0] + coeff0_31*dmats0[31][0] + coeff0_32*dmats0[32][0] + coeff0_33*dmats0[33][0] + coeff0_34*dmats0[34][0];
          new_coeff0_1 = coeff0_0*dmats0[0][1] + coeff0_1*dmats0[1][1] + coeff0_2*dmats0[2][1] + coeff0_3*dmats0[3][1] + coeff0_4*dmats0[4][1] + coeff0_5*dmats0[5][1] + coeff0_6*dmats0[6][1] + coeff0_7*dmats0[7][1] + coeff0_8*dmats0[8][1] + coeff0_9*dmats0[9][1] + coeff0_10*dmats0[10][1] + coeff0_11*dmats0[11][1] + coeff0_12*dmats0[12][1] + coeff0_13*dmats0[13][1] + coeff0_14*dmats0[14][1] + coeff0_15*dmats0[15][1] + coeff0_16*dmats0[16][1] + coeff0_17*dmats0[17][1] + coeff0_18*dmats0[18][1] + coeff0_19*dmats0[19][1] + coeff0_20*dmats0[20][1] + coeff0_21*dmats0[21][1] + coeff0_22*dmats0[22][1] + coeff0_23*dmats0[23][1] + coeff0_24*dmats0[24][1] + coeff0_25*dmats0[25][1] + coeff0_26*dmats0[26][1] + coeff0_27*dmats0[27][1] + coeff0_28*dmats0[28][1] + coeff0_29*dmats0[29][1] + coeff0_30*dmats0[30][1] + coeff0_31*dmats0[31][1] + coeff0_32*dmats0[32][1] + coeff0_33*dmats0[33][1] + coeff0_34*dmats0[34][1];
          new_coeff0_2 = coeff0_0*dmats0[0][2] + coeff0_1*dmats0[1][2] + coeff0_2*dmats0[2][2] + coeff0_3*dmats0[3][2] + coeff0_4*dmats0[4][2] + coeff0_5*dmats0[5][2] + coeff0_6*dmats0[6][2] + coeff0_7*dmats0[7][2] + coeff0_8*dmats0[8][2] + coeff0_9*dmats0[9][2] + coeff0_10*dmats0[10][2] + coeff0_11*dmats0[11][2] + coeff0_12*dmats0[12][2] + coeff0_13*dmats0[13][2] + coeff0_14*dmats0[14][2] + coeff0_15*dmats0[15][2] + coeff0_16*dmats0[16][2] + coeff0_17*dmats0[17][2] + coeff0_18*dmats0[18][2] + coeff0_19*dmats0[19][2] + coeff0_20*dmats0[20][2] + coeff0_21*dmats0[21][2] + coeff0_22*dmats0[22][2] + coeff0_23*dmats0[23][2] + coeff0_24*dmats0[24][2] + coeff0_25*dmats0[25][2] + coeff0_26*dmats0[26][2] + coeff0_27*dmats0[27][2] + coeff0_28*dmats0[28][2] + coeff0_29*dmats0[29][2] + coeff0_30*dmats0[30][2] + coeff0_31*dmats0[31][2] + coeff0_32*dmats0[32][2] + coeff0_33*dmats0[33][2] + coeff0_34*dmats0[34][2];
          new_coeff0_3 = coeff0_0*dmats0[0][3] + coeff0_1*dmats0[1][3] + coeff0_2*dmats0[2][3] + coeff0_3*dmats0[3][3] + coeff0_4*dmats0[4][3] + coeff0_5*dmats0[5][3] + coeff0_6*dmats0[6][3] + coeff0_7*dmats0[7][3] + coeff0_8*dmats0[8][3] + coeff0_9*dmats0[9][3] + coeff0_10*dmats0[10][3] + coeff0_11*dmats0[11][3] + coeff0_12*dmats0[12][3] + coeff0_13*dmats0[13][3] + coeff0_14*dmats0[14][3] + coeff0_15*dmats0[15][3] + coeff0_16*dmats0[16][3] + coeff0_17*dmats0[17][3] + coeff0_18*dmats0[18][3] + coeff0_19*dmats0[19][3] + coeff0_20*dmats0[20][3] + coeff0_21*dmats0[21][3] + coeff0_22*dmats0[22][3] + coeff0_23*dmats0[23][3] + coeff0_24*dmats0[24][3] + coeff0_25*dmats0[25][3] + coeff0_26*dmats0[26][3] + coeff0_27*dmats0[27][3] + coeff0_28*dmats0[28][3] + coeff0_29*dmats0[29][3] + coeff0_30*dmats0[30][3] + coeff0_31*dmats0[31][3] + coeff0_32*dmats0[32][3] + coeff0_33*dmats0[33][3] + coeff0_34*dmats0[34][3];
          new_coeff0_4 = coeff0_0*dmats0[0][4] + coeff0_1*dmats0[1][4] + coeff0_2*dmats0[2][4] + coeff0_3*dmats0[3][4] + coeff0_4*dmats0[4][4] + coeff0_5*dmats0[5][4] + coeff0_6*dmats0[6][4] + coeff0_7*dmats0[7][4] + coeff0_8*dmats0[8][4] + coeff0_9*dmats0[9][4] + coeff0_10*dmats0[10][4] + coeff0_11*dmats0[11][4] + coeff0_12*dmats0[12][4] + coeff0_13*dmats0[13][4] + coeff0_14*dmats0[14][4] + coeff0_15*dmats0[15][4] + coeff0_16*dmats0[16][4] + coeff0_17*dmats0[17][4] + coeff0_18*dmats0[18][4] + coeff0_19*dmats0[19][4] + coeff0_20*dmats0[20][4] + coeff0_21*dmats0[21][4] + coeff0_22*dmats0[22][4] + coeff0_23*dmats0[23][4] + coeff0_24*dmats0[24][4] + coeff0_25*dmats0[25][4] + coeff0_26*dmats0[26][4] + coeff0_27*dmats0[27][4] + coeff0_28*dmats0[28][4] + coeff0_29*dmats0[29][4] + coeff0_30*dmats0[30][4] + coeff0_31*dmats0[31][4] + coeff0_32*dmats0[32][4] + coeff0_33*dmats0[33][4] + coeff0_34*dmats0[34][4];
          new_coeff0_5 = coeff0_0*dmats0[0][5] + coeff0_1*dmats0[1][5] + coeff0_2*dmats0[2][5] + coeff0_3*dmats0[3][5] + coeff0_4*dmats0[4][5] + coeff0_5*dmats0[5][5] + coeff0_6*dmats0[6][5] + coeff0_7*dmats0[7][5] + coeff0_8*dmats0[8][5] + coeff0_9*dmats0[9][5] + coeff0_10*dmats0[10][5] + coeff0_11*dmats0[11][5] + coeff0_12*dmats0[12][5] + coeff0_13*dmats0[13][5] + coeff0_14*dmats0[14][5] + coeff0_15*dmats0[15][5] + coeff0_16*dmats0[16][5] + coeff0_17*dmats0[17][5] + coeff0_18*dmats0[18][5] + coeff0_19*dmats0[19][5] + coeff0_20*dmats0[20][5] + coeff0_21*dmats0[21][5] + coeff0_22*dmats0[22][5] + coeff0_23*dmats0[23][5] + coeff0_24*dmats0[24][5] + coeff0_25*dmats0[25][5] + coeff0_26*dmats0[26][5] + coeff0_27*dmats0[27][5] + coeff0_28*dmats0[28][5] + coeff0_29*dmats0[29][5] + coeff0_30*dmats0[30][5] + coeff0_31*dmats0[31][5] + coeff0_32*dmats0[32][5] + coeff0_33*dmats0[33][5] + coeff0_34*dmats0[34][5];
          new_coeff0_6 = coeff0_0*dmats0[0][6] + coeff0_1*dmats0[1][6] + coeff0_2*dmats0[2][6] + coeff0_3*dmats0[3][6] + coeff0_4*dmats0[4][6] + coeff0_5*dmats0[5][6] + coeff0_6*dmats0[6][6] + coeff0_7*dmats0[7][6] + coeff0_8*dmats0[8][6] + coeff0_9*dmats0[9][6] + coeff0_10*dmats0[10][6] + coeff0_11*dmats0[11][6] + coeff0_12*dmats0[12][6] + coeff0_13*dmats0[13][6] + coeff0_14*dmats0[14][6] + coeff0_15*dmats0[15][6] + coeff0_16*dmats0[16][6] + coeff0_17*dmats0[17][6] + coeff0_18*dmats0[18][6] + coeff0_19*dmats0[19][6] + coeff0_20*dmats0[20][6] + coeff0_21*dmats0[21][6] + coeff0_22*dmats0[22][6] + coeff0_23*dmats0[23][6] + coeff0_24*dmats0[24][6] + coeff0_25*dmats0[25][6] + coeff0_26*dmats0[26][6] + coeff0_27*dmats0[27][6] + coeff0_28*dmats0[28][6] + coeff0_29*dmats0[29][6] + coeff0_30*dmats0[30][6] + coeff0_31*dmats0[31][6] + coeff0_32*dmats0[32][6] + coeff0_33*dmats0[33][6] + coeff0_34*dmats0[34][6];
          new_coeff0_7 = coeff0_0*dmats0[0][7] + coeff0_1*dmats0[1][7] + coeff0_2*dmats0[2][7] + coeff0_3*dmats0[3][7] + coeff0_4*dmats0[4][7] + coeff0_5*dmats0[5][7] + coeff0_6*dmats0[6][7] + coeff0_7*dmats0[7][7] + coeff0_8*dmats0[8][7] + coeff0_9*dmats0[9][7] + coeff0_10*dmats0[10][7] + coeff0_11*dmats0[11][7] + coeff0_12*dmats0[12][7] + coeff0_13*dmats0[13][7] + coeff0_14*dmats0[14][7] + coeff0_15*dmats0[15][7] + coeff0_16*dmats0[16][7] + coeff0_17*dmats0[17][7] + coeff0_18*dmats0[18][7] + coeff0_19*dmats0[19][7] + coeff0_20*dmats0[20][7] + coeff0_21*dmats0[21][7] + coeff0_22*dmats0[22][7] + coeff0_23*dmats0[23][7] + coeff0_24*dmats0[24][7] + coeff0_25*dmats0[25][7] + coeff0_26*dmats0[26][7] + coeff0_27*dmats0[27][7] + coeff0_28*dmats0[28][7] + coeff0_29*dmats0[29][7] + coeff0_30*dmats0[30][7] + coeff0_31*dmats0[31][7] + coeff0_32*dmats0[32][7] + coeff0_33*dmats0[33][7] + coeff0_34*dmats0[34][7];
          new_coeff0_8 = coeff0_0*dmats0[0][8] + coeff0_1*dmats0[1][8] + coeff0_2*dmats0[2][8] + coeff0_3*dmats0[3][8] + coeff0_4*dmats0[4][8] + coeff0_5*dmats0[5][8] + coeff0_6*dmats0[6][8] + coeff0_7*dmats0[7][8] + coeff0_8*dmats0[8][8] + coeff0_9*dmats0[9][8] + coeff0_10*dmats0[10][8] + coeff0_11*dmats0[11][8] + coeff0_12*dmats0[12][8] + coeff0_13*dmats0[13][8] + coeff0_14*dmats0[14][8] + coeff0_15*dmats0[15][8] + coeff0_16*dmats0[16][8] + coeff0_17*dmats0[17][8] + coeff0_18*dmats0[18][8] + coeff0_19*dmats0[19][8] + coeff0_20*dmats0[20][8] + coeff0_21*dmats0[21][8] + coeff0_22*dmats0[22][8] + coeff0_23*dmats0[23][8] + coeff0_24*dmats0[24][8] + coeff0_25*dmats0[25][8] + coeff0_26*dmats0[26][8] + coeff0_27*dmats0[27][8] + coeff0_28*dmats0[28][8] + coeff0_29*dmats0[29][8] + coeff0_30*dmats0[30][8] + coeff0_31*dmats0[31][8] + coeff0_32*dmats0[32][8] + coeff0_33*dmats0[33][8] + coeff0_34*dmats0[34][8];
          new_coeff0_9 = coeff0_0*dmats0[0][9] + coeff0_1*dmats0[1][9] + coeff0_2*dmats0[2][9] + coeff0_3*dmats0[3][9] + coeff0_4*dmats0[4][9] + coeff0_5*dmats0[5][9] + coeff0_6*dmats0[6][9] + coeff0_7*dmats0[7][9] + coeff0_8*dmats0[8][9] + coeff0_9*dmats0[9][9] + coeff0_10*dmats0[10][9] + coeff0_11*dmats0[11][9] + coeff0_12*dmats0[12][9] + coeff0_13*dmats0[13][9] + coeff0_14*dmats0[14][9] + coeff0_15*dmats0[15][9] + coeff0_16*dmats0[16][9] + coeff0_17*dmats0[17][9] + coeff0_18*dmats0[18][9] + coeff0_19*dmats0[19][9] + coeff0_20*dmats0[20][9] + coeff0_21*dmats0[21][9] + coeff0_22*dmats0[22][9] + coeff0_23*dmats0[23][9] + coeff0_24*dmats0[24][9] + coeff0_25*dmats0[25][9] + coeff0_26*dmats0[26][9] + coeff0_27*dmats0[27][9] + coeff0_28*dmats0[28][9] + coeff0_29*dmats0[29][9] + coeff0_30*dmats0[30][9] + coeff0_31*dmats0[31][9] + coeff0_32*dmats0[32][9] + coeff0_33*dmats0[33][9] + coeff0_34*dmats0[34][9];
          new_coeff0_10 = coeff0_0*dmats0[0][10] + coeff0_1*dmats0[1][10] + coeff0_2*dmats0[2][10] + coeff0_3*dmats0[3][10] + coeff0_4*dmats0[4][10] + coeff0_5*dmats0[5][10] + coeff0_6*dmats0[6][10] + coeff0_7*dmats0[7][10] + coeff0_8*dmats0[8][10] + coeff0_9*dmats0[9][10] + coeff0_10*dmats0[10][10] + coeff0_11*dmats0[11][10] + coeff0_12*dmats0[12][10] + coeff0_13*dmats0[13][10] + coeff0_14*dmats0[14][10] + coeff0_15*dmats0[15][10] + coeff0_16*dmats0[16][10] + coeff0_17*dmats0[17][10] + coeff0_18*dmats0[18][10] + coeff0_19*dmats0[19][10] + coeff0_20*dmats0[20][10] + coeff0_21*dmats0[21][10] + coeff0_22*dmats0[22][10] + coeff0_23*dmats0[23][10] + coeff0_24*dmats0[24][10] + coeff0_25*dmats0[25][10] + coeff0_26*dmats0[26][10] + coeff0_27*dmats0[27][10] + coeff0_28*dmats0[28][10] + coeff0_29*dmats0[29][10] + coeff0_30*dmats0[30][10] + coeff0_31*dmats0[31][10] + coeff0_32*dmats0[32][10] + coeff0_33*dmats0[33][10] + coeff0_34*dmats0[34][10];
          new_coeff0_11 = coeff0_0*dmats0[0][11] + coeff0_1*dmats0[1][11] + coeff0_2*dmats0[2][11] + coeff0_3*dmats0[3][11] + coeff0_4*dmats0[4][11] + coeff0_5*dmats0[5][11] + coeff0_6*dmats0[6][11] + coeff0_7*dmats0[7][11] + coeff0_8*dmats0[8][11] + coeff0_9*dmats0[9][11] + coeff0_10*dmats0[10][11] + coeff0_11*dmats0[11][11] + coeff0_12*dmats0[12][11] + coeff0_13*dmats0[13][11] + coeff0_14*dmats0[14][11] + coeff0_15*dmats0[15][11] + coeff0_16*dmats0[16][11] + coeff0_17*dmats0[17][11] + coeff0_18*dmats0[18][11] + coeff0_19*dmats0[19][11] + coeff0_20*dmats0[20][11] + coeff0_21*dmats0[21][11] + coeff0_22*dmats0[22][11] + coeff0_23*dmats0[23][11] + coeff0_24*dmats0[24][11] + coeff0_25*dmats0[25][11] + coeff0_26*dmats0[26][11] + coeff0_27*dmats0[27][11] + coeff0_28*dmats0[28][11] + coeff0_29*dmats0[29][11] + coeff0_30*dmats0[30][11] + coeff0_31*dmats0[31][11] + coeff0_32*dmats0[32][11] + coeff0_33*dmats0[33][11] + coeff0_34*dmats0[34][11];
          new_coeff0_12 = coeff0_0*dmats0[0][12] + coeff0_1*dmats0[1][12] + coeff0_2*dmats0[2][12] + coeff0_3*dmats0[3][12] + coeff0_4*dmats0[4][12] + coeff0_5*dmats0[5][12] + coeff0_6*dmats0[6][12] + coeff0_7*dmats0[7][12] + coeff0_8*dmats0[8][12] + coeff0_9*dmats0[9][12] + coeff0_10*dmats0[10][12] + coeff0_11*dmats0[11][12] + coeff0_12*dmats0[12][12] + coeff0_13*dmats0[13][12] + coeff0_14*dmats0[14][12] + coeff0_15*dmats0[15][12] + coeff0_16*dmats0[16][12] + coeff0_17*dmats0[17][12] + coeff0_18*dmats0[18][12] + coeff0_19*dmats0[19][12] + coeff0_20*dmats0[20][12] + coeff0_21*dmats0[21][12] + coeff0_22*dmats0[22][12] + coeff0_23*dmats0[23][12] + coeff0_24*dmats0[24][12] + coeff0_25*dmats0[25][12] + coeff0_26*dmats0[26][12] + coeff0_27*dmats0[27][12] + coeff0_28*dmats0[28][12] + coeff0_29*dmats0[29][12] + coeff0_30*dmats0[30][12] + coeff0_31*dmats0[31][12] + coeff0_32*dmats0[32][12] + coeff0_33*dmats0[33][12] + coeff0_34*dmats0[34][12];
          new_coeff0_13 = coeff0_0*dmats0[0][13] + coeff0_1*dmats0[1][13] + coeff0_2*dmats0[2][13] + coeff0_3*dmats0[3][13] + coeff0_4*dmats0[4][13] + coeff0_5*dmats0[5][13] + coeff0_6*dmats0[6][13] + coeff0_7*dmats0[7][13] + coeff0_8*dmats0[8][13] + coeff0_9*dmats0[9][13] + coeff0_10*dmats0[10][13] + coeff0_11*dmats0[11][13] + coeff0_12*dmats0[12][13] + coeff0_13*dmats0[13][13] + coeff0_14*dmats0[14][13] + coeff0_15*dmats0[15][13] + coeff0_16*dmats0[16][13] + coeff0_17*dmats0[17][13] + coeff0_18*dmats0[18][13] + coeff0_19*dmats0[19][13] + coeff0_20*dmats0[20][13] + coeff0_21*dmats0[21][13] + coeff0_22*dmats0[22][13] + coeff0_23*dmats0[23][13] + coeff0_24*dmats0[24][13] + coeff0_25*dmats0[25][13] + coeff0_26*dmats0[26][13] + coeff0_27*dmats0[27][13] + coeff0_28*dmats0[28][13] + coeff0_29*dmats0[29][13] + coeff0_30*dmats0[30][13] + coeff0_31*dmats0[31][13] + coeff0_32*dmats0[32][13] + coeff0_33*dmats0[33][13] + coeff0_34*dmats0[34][13];
          new_coeff0_14 = coeff0_0*dmats0[0][14] + coeff0_1*dmats0[1][14] + coeff0_2*dmats0[2][14] + coeff0_3*dmats0[3][14] + coeff0_4*dmats0[4][14] + coeff0_5*dmats0[5][14] + coeff0_6*dmats0[6][14] + coeff0_7*dmats0[7][14] + coeff0_8*dmats0[8][14] + coeff0_9*dmats0[9][14] + coeff0_10*dmats0[10][14] + coeff0_11*dmats0[11][14] + coeff0_12*dmats0[12][14] + coeff0_13*dmats0[13][14] + coeff0_14*dmats0[14][14] + coeff0_15*dmats0[15][14] + coeff0_16*dmats0[16][14] + coeff0_17*dmats0[17][14] + coeff0_18*dmats0[18][14] + coeff0_19*dmats0[19][14] + coeff0_20*dmats0[20][14] + coeff0_21*dmats0[21][14] + coeff0_22*dmats0[22][14] + coeff0_23*dmats0[23][14] + coeff0_24*dmats0[24][14] + coeff0_25*dmats0[25][14] + coeff0_26*dmats0[26][14] + coeff0_27*dmats0[27][14] + coeff0_28*dmats0[28][14] + coeff0_29*dmats0[29][14] + coeff0_30*dmats0[30][14] + coeff0_31*dmats0[31][14] + coeff0_32*dmats0[32][14] + coeff0_33*dmats0[33][14] + coeff0_34*dmats0[34][14];
          new_coeff0_15 = coeff0_0*dmats0[0][15] + coeff0_1*dmats0[1][15] + coeff0_2*dmats0[2][15] + coeff0_3*dmats0[3][15] + coeff0_4*dmats0[4][15] + coeff0_5*dmats0[5][15] + coeff0_6*dmats0[6][15] + coeff0_7*dmats0[7][15] + coeff0_8*dmats0[8][15] + coeff0_9*dmats0[9][15] + coeff0_10*dmats0[10][15] + coeff0_11*dmats0[11][15] + coeff0_12*dmats0[12][15] + coeff0_13*dmats0[13][15] + coeff0_14*dmats0[14][15] + coeff0_15*dmats0[15][15] + coeff0_16*dmats0[16][15] + coeff0_17*dmats0[17][15] + coeff0_18*dmats0[18][15] + coeff0_19*dmats0[19][15] + coeff0_20*dmats0[20][15] + coeff0_21*dmats0[21][15] + coeff0_22*dmats0[22][15] + coeff0_23*dmats0[23][15] + coeff0_24*dmats0[24][15] + coeff0_25*dmats0[25][15] + coeff0_26*dmats0[26][15] + coeff0_27*dmats0[27][15] + coeff0_28*dmats0[28][15] + coeff0_29*dmats0[29][15] + coeff0_30*dmats0[30][15] + coeff0_31*dmats0[31][15] + coeff0_32*dmats0[32][15] + coeff0_33*dmats0[33][15] + coeff0_34*dmats0[34][15];
          new_coeff0_16 = coeff0_0*dmats0[0][16] + coeff0_1*dmats0[1][16] + coeff0_2*dmats0[2][16] + coeff0_3*dmats0[3][16] + coeff0_4*dmats0[4][16] + coeff0_5*dmats0[5][16] + coeff0_6*dmats0[6][16] + coeff0_7*dmats0[7][16] + coeff0_8*dmats0[8][16] + coeff0_9*dmats0[9][16] + coeff0_10*dmats0[10][16] + coeff0_11*dmats0[11][16] + coeff0_12*dmats0[12][16] + coeff0_13*dmats0[13][16] + coeff0_14*dmats0[14][16] + coeff0_15*dmats0[15][16] + coeff0_16*dmats0[16][16] + coeff0_17*dmats0[17][16] + coeff0_18*dmats0[18][16] + coeff0_19*dmats0[19][16] + coeff0_20*dmats0[20][16] + coeff0_21*dmats0[21][16] + coeff0_22*dmats0[22][16] + coeff0_23*dmats0[23][16] + coeff0_24*dmats0[24][16] + coeff0_25*dmats0[25][16] + coeff0_26*dmats0[26][16] + coeff0_27*dmats0[27][16] + coeff0_28*dmats0[28][16] + coeff0_29*dmats0[29][16] + coeff0_30*dmats0[30][16] + coeff0_31*dmats0[31][16] + coeff0_32*dmats0[32][16] + coeff0_33*dmats0[33][16] + coeff0_34*dmats0[34][16];
          new_coeff0_17 = coeff0_0*dmats0[0][17] + coeff0_1*dmats0[1][17] + coeff0_2*dmats0[2][17] + coeff0_3*dmats0[3][17] + coeff0_4*dmats0[4][17] + coeff0_5*dmats0[5][17] + coeff0_6*dmats0[6][17] + coeff0_7*dmats0[7][17] + coeff0_8*dmats0[8][17] + coeff0_9*dmats0[9][17] + coeff0_10*dmats0[10][17] + coeff0_11*dmats0[11][17] + coeff0_12*dmats0[12][17] + coeff0_13*dmats0[13][17] + coeff0_14*dmats0[14][17] + coeff0_15*dmats0[15][17] + coeff0_16*dmats0[16][17] + coeff0_17*dmats0[17][17] + coeff0_18*dmats0[18][17] + coeff0_19*dmats0[19][17] + coeff0_20*dmats0[20][17] + coeff0_21*dmats0[21][17] + coeff0_22*dmats0[22][17] + coeff0_23*dmats0[23][17] + coeff0_24*dmats0[24][17] + coeff0_25*dmats0[25][17] + coeff0_26*dmats0[26][17] + coeff0_27*dmats0[27][17] + coeff0_28*dmats0[28][17] + coeff0_29*dmats0[29][17] + coeff0_30*dmats0[30][17] + coeff0_31*dmats0[31][17] + coeff0_32*dmats0[32][17] + coeff0_33*dmats0[33][17] + coeff0_34*dmats0[34][17];
          new_coeff0_18 = coeff0_0*dmats0[0][18] + coeff0_1*dmats0[1][18] + coeff0_2*dmats0[2][18] + coeff0_3*dmats0[3][18] + coeff0_4*dmats0[4][18] + coeff0_5*dmats0[5][18] + coeff0_6*dmats0[6][18] + coeff0_7*dmats0[7][18] + coeff0_8*dmats0[8][18] + coeff0_9*dmats0[9][18] + coeff0_10*dmats0[10][18] + coeff0_11*dmats0[11][18] + coeff0_12*dmats0[12][18] + coeff0_13*dmats0[13][18] + coeff0_14*dmats0[14][18] + coeff0_15*dmats0[15][18] + coeff0_16*dmats0[16][18] + coeff0_17*dmats0[17][18] + coeff0_18*dmats0[18][18] + coeff0_19*dmats0[19][18] + coeff0_20*dmats0[20][18] + coeff0_21*dmats0[21][18] + coeff0_22*dmats0[22][18] + coeff0_23*dmats0[23][18] + coeff0_24*dmats0[24][18] + coeff0_25*dmats0[25][18] + coeff0_26*dmats0[26][18] + coeff0_27*dmats0[27][18] + coeff0_28*dmats0[28][18] + coeff0_29*dmats0[29][18] + coeff0_30*dmats0[30][18] + coeff0_31*dmats0[31][18] + coeff0_32*dmats0[32][18] + coeff0_33*dmats0[33][18] + coeff0_34*dmats0[34][18];
          new_coeff0_19 = coeff0_0*dmats0[0][19] + coeff0_1*dmats0[1][19] + coeff0_2*dmats0[2][19] + coeff0_3*dmats0[3][19] + coeff0_4*dmats0[4][19] + coeff0_5*dmats0[5][19] + coeff0_6*dmats0[6][19] + coeff0_7*dmats0[7][19] + coeff0_8*dmats0[8][19] + coeff0_9*dmats0[9][19] + coeff0_10*dmats0[10][19] + coeff0_11*dmats0[11][19] + coeff0_12*dmats0[12][19] + coeff0_13*dmats0[13][19] + coeff0_14*dmats0[14][19] + coeff0_15*dmats0[15][19] + coeff0_16*dmats0[16][19] + coeff0_17*dmats0[17][19] + coeff0_18*dmats0[18][19] + coeff0_19*dmats0[19][19] + coeff0_20*dmats0[20][19] + coeff0_21*dmats0[21][19] + coeff0_22*dmats0[22][19] + coeff0_23*dmats0[23][19] + coeff0_24*dmats0[24][19] + coeff0_25*dmats0[25][19] + coeff0_26*dmats0[26][19] + coeff0_27*dmats0[27][19] + coeff0_28*dmats0[28][19] + coeff0_29*dmats0[29][19] + coeff0_30*dmats0[30][19] + coeff0_31*dmats0[31][19] + coeff0_32*dmats0[32][19] + coeff0_33*dmats0[33][19] + coeff0_34*dmats0[34][19];
          new_coeff0_20 = coeff0_0*dmats0[0][20] + coeff0_1*dmats0[1][20] + coeff0_2*dmats0[2][20] + coeff0_3*dmats0[3][20] + coeff0_4*dmats0[4][20] + coeff0_5*dmats0[5][20] + coeff0_6*dmats0[6][20] + coeff0_7*dmats0[7][20] + coeff0_8*dmats0[8][20] + coeff0_9*dmats0[9][20] + coeff0_10*dmats0[10][20] + coeff0_11*dmats0[11][20] + coeff0_12*dmats0[12][20] + coeff0_13*dmats0[13][20] + coeff0_14*dmats0[14][20] + coeff0_15*dmats0[15][20] + coeff0_16*dmats0[16][20] + coeff0_17*dmats0[17][20] + coeff0_18*dmats0[18][20] + coeff0_19*dmats0[19][20] + coeff0_20*dmats0[20][20] + coeff0_21*dmats0[21][20] + coeff0_22*dmats0[22][20] + coeff0_23*dmats0[23][20] + coeff0_24*dmats0[24][20] + coeff0_25*dmats0[25][20] + coeff0_26*dmats0[26][20] + coeff0_27*dmats0[27][20] + coeff0_28*dmats0[28][20] + coeff0_29*dmats0[29][20] + coeff0_30*dmats0[30][20] + coeff0_31*dmats0[31][20] + coeff0_32*dmats0[32][20] + coeff0_33*dmats0[33][20] + coeff0_34*dmats0[34][20];
          new_coeff0_21 = coeff0_0*dmats0[0][21] + coeff0_1*dmats0[1][21] + coeff0_2*dmats0[2][21] + coeff0_3*dmats0[3][21] + coeff0_4*dmats0[4][21] + coeff0_5*dmats0[5][21] + coeff0_6*dmats0[6][21] + coeff0_7*dmats0[7][21] + coeff0_8*dmats0[8][21] + coeff0_9*dmats0[9][21] + coeff0_10*dmats0[10][21] + coeff0_11*dmats0[11][21] + coeff0_12*dmats0[12][21] + coeff0_13*dmats0[13][21] + coeff0_14*dmats0[14][21] + coeff0_15*dmats0[15][21] + coeff0_16*dmats0[16][21] + coeff0_17*dmats0[17][21] + coeff0_18*dmats0[18][21] + coeff0_19*dmats0[19][21] + coeff0_20*dmats0[20][21] + coeff0_21*dmats0[21][21] + coeff0_22*dmats0[22][21] + coeff0_23*dmats0[23][21] + coeff0_24*dmats0[24][21] + coeff0_25*dmats0[25][21] + coeff0_26*dmats0[26][21] + coeff0_27*dmats0[27][21] + coeff0_28*dmats0[28][21] + coeff0_29*dmats0[29][21] + coeff0_30*dmats0[30][21] + coeff0_31*dmats0[31][21] + coeff0_32*dmats0[32][21] + coeff0_33*dmats0[33][21] + coeff0_34*dmats0[34][21];
          new_coeff0_22 = coeff0_0*dmats0[0][22] + coeff0_1*dmats0[1][22] + coeff0_2*dmats0[2][22] + coeff0_3*dmats0[3][22] + coeff0_4*dmats0[4][22] + coeff0_5*dmats0[5][22] + coeff0_6*dmats0[6][22] + coeff0_7*dmats0[7][22] + coeff0_8*dmats0[8][22] + coeff0_9*dmats0[9][22] + coeff0_10*dmats0[10][22] + coeff0_11*dmats0[11][22] + coeff0_12*dmats0[12][22] + coeff0_13*dmats0[13][22] + coeff0_14*dmats0[14][22] + coeff0_15*dmats0[15][22] + coeff0_16*dmats0[16][22] + coeff0_17*dmats0[17][22] + coeff0_18*dmats0[18][22] + coeff0_19*dmats0[19][22] + coeff0_20*dmats0[20][22] + coeff0_21*dmats0[21][22] + coeff0_22*dmats0[22][22] + coeff0_23*dmats0[23][22] + coeff0_24*dmats0[24][22] + coeff0_25*dmats0[25][22] + coeff0_26*dmats0[26][22] + coeff0_27*dmats0[27][22] + coeff0_28*dmats0[28][22] + coeff0_29*dmats0[29][22] + coeff0_30*dmats0[30][22] + coeff0_31*dmats0[31][22] + coeff0_32*dmats0[32][22] + coeff0_33*dmats0[33][22] + coeff0_34*dmats0[34][22];
          new_coeff0_23 = coeff0_0*dmats0[0][23] + coeff0_1*dmats0[1][23] + coeff0_2*dmats0[2][23] + coeff0_3*dmats0[3][23] + coeff0_4*dmats0[4][23] + coeff0_5*dmats0[5][23] + coeff0_6*dmats0[6][23] + coeff0_7*dmats0[7][23] + coeff0_8*dmats0[8][23] + coeff0_9*dmats0[9][23] + coeff0_10*dmats0[10][23] + coeff0_11*dmats0[11][23] + coeff0_12*dmats0[12][23] + coeff0_13*dmats0[13][23] + coeff0_14*dmats0[14][23] + coeff0_15*dmats0[15][23] + coeff0_16*dmats0[16][23] + coeff0_17*dmats0[17][23] + coeff0_18*dmats0[18][23] + coeff0_19*dmats0[19][23] + coeff0_20*dmats0[20][23] + coeff0_21*dmats0[21][23] + coeff0_22*dmats0[22][23] + coeff0_23*dmats0[23][23] + coeff0_24*dmats0[24][23] + coeff0_25*dmats0[25][23] + coeff0_26*dmats0[26][23] + coeff0_27*dmats0[27][23] + coeff0_28*dmats0[28][23] + coeff0_29*dmats0[29][23] + coeff0_30*dmats0[30][23] + coeff0_31*dmats0[31][23] + coeff0_32*dmats0[32][23] + coeff0_33*dmats0[33][23] + coeff0_34*dmats0[34][23];
          new_coeff0_24 = coeff0_0*dmats0[0][24] + coeff0_1*dmats0[1][24] + coeff0_2*dmats0[2][24] + coeff0_3*dmats0[3][24] + coeff0_4*dmats0[4][24] + coeff0_5*dmats0[5][24] + coeff0_6*dmats0[6][24] + coeff0_7*dmats0[7][24] + coeff0_8*dmats0[8][24] + coeff0_9*dmats0[9][24] + coeff0_10*dmats0[10][24] + coeff0_11*dmats0[11][24] + coeff0_12*dmats0[12][24] + coeff0_13*dmats0[13][24] + coeff0_14*dmats0[14][24] + coeff0_15*dmats0[15][24] + coeff0_16*dmats0[16][24] + coeff0_17*dmats0[17][24] + coeff0_18*dmats0[18][24] + coeff0_19*dmats0[19][24] + coeff0_20*dmats0[20][24] + coeff0_21*dmats0[21][24] + coeff0_22*dmats0[22][24] + coeff0_23*dmats0[23][24] + coeff0_24*dmats0[24][24] + coeff0_25*dmats0[25][24] + coeff0_26*dmats0[26][24] + coeff0_27*dmats0[27][24] + coeff0_28*dmats0[28][24] + coeff0_29*dmats0[29][24] + coeff0_30*dmats0[30][24] + coeff0_31*dmats0[31][24] + coeff0_32*dmats0[32][24] + coeff0_33*dmats0[33][24] + coeff0_34*dmats0[34][24];
          new_coeff0_25 = coeff0_0*dmats0[0][25] + coeff0_1*dmats0[1][25] + coeff0_2*dmats0[2][25] + coeff0_3*dmats0[3][25] + coeff0_4*dmats0[4][25] + coeff0_5*dmats0[5][25] + coeff0_6*dmats0[6][25] + coeff0_7*dmats0[7][25] + coeff0_8*dmats0[8][25] + coeff0_9*dmats0[9][25] + coeff0_10*dmats0[10][25] + coeff0_11*dmats0[11][25] + coeff0_12*dmats0[12][25] + coeff0_13*dmats0[13][25] + coeff0_14*dmats0[14][25] + coeff0_15*dmats0[15][25] + coeff0_16*dmats0[16][25] + coeff0_17*dmats0[17][25] + coeff0_18*dmats0[18][25] + coeff0_19*dmats0[19][25] + coeff0_20*dmats0[20][25] + coeff0_21*dmats0[21][25] + coeff0_22*dmats0[22][25] + coeff0_23*dmats0[23][25] + coeff0_24*dmats0[24][25] + coeff0_25*dmats0[25][25] + coeff0_26*dmats0[26][25] + coeff0_27*dmats0[27][25] + coeff0_28*dmats0[28][25] + coeff0_29*dmats0[29][25] + coeff0_30*dmats0[30][25] + coeff0_31*dmats0[31][25] + coeff0_32*dmats0[32][25] + coeff0_33*dmats0[33][25] + coeff0_34*dmats0[34][25];
          new_coeff0_26 = coeff0_0*dmats0[0][26] + coeff0_1*dmats0[1][26] + coeff0_2*dmats0[2][26] + coeff0_3*dmats0[3][26] + coeff0_4*dmats0[4][26] + coeff0_5*dmats0[5][26] + coeff0_6*dmats0[6][26] + coeff0_7*dmats0[7][26] + coeff0_8*dmats0[8][26] + coeff0_9*dmats0[9][26] + coeff0_10*dmats0[10][26] + coeff0_11*dmats0[11][26] + coeff0_12*dmats0[12][26] + coeff0_13*dmats0[13][26] + coeff0_14*dmats0[14][26] + coeff0_15*dmats0[15][26] + coeff0_16*dmats0[16][26] + coeff0_17*dmats0[17][26] + coeff0_18*dmats0[18][26] + coeff0_19*dmats0[19][26] + coeff0_20*dmats0[20][26] + coeff0_21*dmats0[21][26] + coeff0_22*dmats0[22][26] + coeff0_23*dmats0[23][26] + coeff0_24*dmats0[24][26] + coeff0_25*dmats0[25][26] + coeff0_26*dmats0[26][26] + coeff0_27*dmats0[27][26] + coeff0_28*dmats0[28][26] + coeff0_29*dmats0[29][26] + coeff0_30*dmats0[30][26] + coeff0_31*dmats0[31][26] + coeff0_32*dmats0[32][26] + coeff0_33*dmats0[33][26] + coeff0_34*dmats0[34][26];
          new_coeff0_27 = coeff0_0*dmats0[0][27] + coeff0_1*dmats0[1][27] + coeff0_2*dmats0[2][27] + coeff0_3*dmats0[3][27] + coeff0_4*dmats0[4][27] + coeff0_5*dmats0[5][27] + coeff0_6*dmats0[6][27] + coeff0_7*dmats0[7][27] + coeff0_8*dmats0[8][27] + coeff0_9*dmats0[9][27] + coeff0_10*dmats0[10][27] + coeff0_11*dmats0[11][27] + coeff0_12*dmats0[12][27] + coeff0_13*dmats0[13][27] + coeff0_14*dmats0[14][27] + coeff0_15*dmats0[15][27] + coeff0_16*dmats0[16][27] + coeff0_17*dmats0[17][27] + coeff0_18*dmats0[18][27] + coeff0_19*dmats0[19][27] + coeff0_20*dmats0[20][27] + coeff0_21*dmats0[21][27] + coeff0_22*dmats0[22][27] + coeff0_23*dmats0[23][27] + coeff0_24*dmats0[24][27] + coeff0_25*dmats0[25][27] + coeff0_26*dmats0[26][27] + coeff0_27*dmats0[27][27] + coeff0_28*dmats0[28][27] + coeff0_29*dmats0[29][27] + coeff0_30*dmats0[30][27] + coeff0_31*dmats0[31][27] + coeff0_32*dmats0[32][27] + coeff0_33*dmats0[33][27] + coeff0_34*dmats0[34][27];
          new_coeff0_28 = coeff0_0*dmats0[0][28] + coeff0_1*dmats0[1][28] + coeff0_2*dmats0[2][28] + coeff0_3*dmats0[3][28] + coeff0_4*dmats0[4][28] + coeff0_5*dmats0[5][28] + coeff0_6*dmats0[6][28] + coeff0_7*dmats0[7][28] + coeff0_8*dmats0[8][28] + coeff0_9*dmats0[9][28] + coeff0_10*dmats0[10][28] + coeff0_11*dmats0[11][28] + coeff0_12*dmats0[12][28] + coeff0_13*dmats0[13][28] + coeff0_14*dmats0[14][28] + coeff0_15*dmats0[15][28] + coeff0_16*dmats0[16][28] + coeff0_17*dmats0[17][28] + coeff0_18*dmats0[18][28] + coeff0_19*dmats0[19][28] + coeff0_20*dmats0[20][28] + coeff0_21*dmats0[21][28] + coeff0_22*dmats0[22][28] + coeff0_23*dmats0[23][28] + coeff0_24*dmats0[24][28] + coeff0_25*dmats0[25][28] + coeff0_26*dmats0[26][28] + coeff0_27*dmats0[27][28] + coeff0_28*dmats0[28][28] + coeff0_29*dmats0[29][28] + coeff0_30*dmats0[30][28] + coeff0_31*dmats0[31][28] + coeff0_32*dmats0[32][28] + coeff0_33*dmats0[33][28] + coeff0_34*dmats0[34][28];
          new_coeff0_29 = coeff0_0*dmats0[0][29] + coeff0_1*dmats0[1][29] + coeff0_2*dmats0[2][29] + coeff0_3*dmats0[3][29] + coeff0_4*dmats0[4][29] + coeff0_5*dmats0[5][29] + coeff0_6*dmats0[6][29] + coeff0_7*dmats0[7][29] + coeff0_8*dmats0[8][29] + coeff0_9*dmats0[9][29] + coeff0_10*dmats0[10][29] + coeff0_11*dmats0[11][29] + coeff0_12*dmats0[12][29] + coeff0_13*dmats0[13][29] + coeff0_14*dmats0[14][29] + coeff0_15*dmats0[15][29] + coeff0_16*dmats0[16][29] + coeff0_17*dmats0[17][29] + coeff0_18*dmats0[18][29] + coeff0_19*dmats0[19][29] + coeff0_20*dmats0[20][29] + coeff0_21*dmats0[21][29] + coeff0_22*dmats0[22][29] + coeff0_23*dmats0[23][29] + coeff0_24*dmats0[24][29] + coeff0_25*dmats0[25][29] + coeff0_26*dmats0[26][29] + coeff0_27*dmats0[27][29] + coeff0_28*dmats0[28][29] + coeff0_29*dmats0[29][29] + coeff0_30*dmats0[30][29] + coeff0_31*dmats0[31][29] + coeff0_32*dmats0[32][29] + coeff0_33*dmats0[33][29] + coeff0_34*dmats0[34][29];
          new_coeff0_30 = coeff0_0*dmats0[0][30] + coeff0_1*dmats0[1][30] + coeff0_2*dmats0[2][30] + coeff0_3*dmats0[3][30] + coeff0_4*dmats0[4][30] + coeff0_5*dmats0[5][30] + coeff0_6*dmats0[6][30] + coeff0_7*dmats0[7][30] + coeff0_8*dmats0[8][30] + coeff0_9*dmats0[9][30] + coeff0_10*dmats0[10][30] + coeff0_11*dmats0[11][30] + coeff0_12*dmats0[12][30] + coeff0_13*dmats0[13][30] + coeff0_14*dmats0[14][30] + coeff0_15*dmats0[15][30] + coeff0_16*dmats0[16][30] + coeff0_17*dmats0[17][30] + coeff0_18*dmats0[18][30] + coeff0_19*dmats0[19][30] + coeff0_20*dmats0[20][30] + coeff0_21*dmats0[21][30] + coeff0_22*dmats0[22][30] + coeff0_23*dmats0[23][30] + coeff0_24*dmats0[24][30] + coeff0_25*dmats0[25][30] + coeff0_26*dmats0[26][30] + coeff0_27*dmats0[27][30] + coeff0_28*dmats0[28][30] + coeff0_29*dmats0[29][30] + coeff0_30*dmats0[30][30] + coeff0_31*dmats0[31][30] + coeff0_32*dmats0[32][30] + coeff0_33*dmats0[33][30] + coeff0_34*dmats0[34][30];
          new_coeff0_31 = coeff0_0*dmats0[0][31] + coeff0_1*dmats0[1][31] + coeff0_2*dmats0[2][31] + coeff0_3*dmats0[3][31] + coeff0_4*dmats0[4][31] + coeff0_5*dmats0[5][31] + coeff0_6*dmats0[6][31] + coeff0_7*dmats0[7][31] + coeff0_8*dmats0[8][31] + coeff0_9*dmats0[9][31] + coeff0_10*dmats0[10][31] + coeff0_11*dmats0[11][31] + coeff0_12*dmats0[12][31] + coeff0_13*dmats0[13][31] + coeff0_14*dmats0[14][31] + coeff0_15*dmats0[15][31] + coeff0_16*dmats0[16][31] + coeff0_17*dmats0[17][31] + coeff0_18*dmats0[18][31] + coeff0_19*dmats0[19][31] + coeff0_20*dmats0[20][31] + coeff0_21*dmats0[21][31] + coeff0_22*dmats0[22][31] + coeff0_23*dmats0[23][31] + coeff0_24*dmats0[24][31] + coeff0_25*dmats0[25][31] + coeff0_26*dmats0[26][31] + coeff0_27*dmats0[27][31] + coeff0_28*dmats0[28][31] + coeff0_29*dmats0[29][31] + coeff0_30*dmats0[30][31] + coeff0_31*dmats0[31][31] + coeff0_32*dmats0[32][31] + coeff0_33*dmats0[33][31] + coeff0_34*dmats0[34][31];
          new_coeff0_32 = coeff0_0*dmats0[0][32] + coeff0_1*dmats0[1][32] + coeff0_2*dmats0[2][32] + coeff0_3*dmats0[3][32] + coeff0_4*dmats0[4][32] + coeff0_5*dmats0[5][32] + coeff0_6*dmats0[6][32] + coeff0_7*dmats0[7][32] + coeff0_8*dmats0[8][32] + coeff0_9*dmats0[9][32] + coeff0_10*dmats0[10][32] + coeff0_11*dmats0[11][32] + coeff0_12*dmats0[12][32] + coeff0_13*dmats0[13][32] + coeff0_14*dmats0[14][32] + coeff0_15*dmats0[15][32] + coeff0_16*dmats0[16][32] + coeff0_17*dmats0[17][32] + coeff0_18*dmats0[18][32] + coeff0_19*dmats0[19][32] + coeff0_20*dmats0[20][32] + coeff0_21*dmats0[21][32] + coeff0_22*dmats0[22][32] + coeff0_23*dmats0[23][32] + coeff0_24*dmats0[24][32] + coeff0_25*dmats0[25][32] + coeff0_26*dmats0[26][32] + coeff0_27*dmats0[27][32] + coeff0_28*dmats0[28][32] + coeff0_29*dmats0[29][32] + coeff0_30*dmats0[30][32] + coeff0_31*dmats0[31][32] + coeff0_32*dmats0[32][32] + coeff0_33*dmats0[33][32] + coeff0_34*dmats0[34][32];
          new_coeff0_33 = coeff0_0*dmats0[0][33] + coeff0_1*dmats0[1][33] + coeff0_2*dmats0[2][33] + coeff0_3*dmats0[3][33] + coeff0_4*dmats0[4][33] + coeff0_5*dmats0[5][33] + coeff0_6*dmats0[6][33] + coeff0_7*dmats0[7][33] + coeff0_8*dmats0[8][33] + coeff0_9*dmats0[9][33] + coeff0_10*dmats0[10][33] + coeff0_11*dmats0[11][33] + coeff0_12*dmats0[12][33] + coeff0_13*dmats0[13][33] + coeff0_14*dmats0[14][33] + coeff0_15*dmats0[15][33] + coeff0_16*dmats0[16][33] + coeff0_17*dmats0[17][33] + coeff0_18*dmats0[18][33] + coeff0_19*dmats0[19][33] + coeff0_20*dmats0[20][33] + coeff0_21*dmats0[21][33] + coeff0_22*dmats0[22][33] + coeff0_23*dmats0[23][33] + coeff0_24*dmats0[24][33] + coeff0_25*dmats0[25][33] + coeff0_26*dmats0[26][33] + coeff0_27*dmats0[27][33] + coeff0_28*dmats0[28][33] + coeff0_29*dmats0[29][33] + coeff0_30*dmats0[30][33] + coeff0_31*dmats0[31][33] + coeff0_32*dmats0[32][33] + coeff0_33*dmats0[33][33] + coeff0_34*dmats0[34][33];
          new_coeff0_34 = coeff0_0*dmats0[0][34] + coeff0_1*dmats0[1][34] + coeff0_2*dmats0[2][34] + coeff0_3*dmats0[3][34] + coeff0_4*dmats0[4][34] + coeff0_5*dmats0[5][34] + coeff0_6*dmats0[6][34] + coeff0_7*dmats0[7][34] + coeff0_8*dmats0[8][34] + coeff0_9*dmats0[9][34] + coeff0_10*dmats0[10][34] + coeff0_11*dmats0[11][34] + coeff0_12*dmats0[12][34] + coeff0_13*dmats0[13][34] + coeff0_14*dmats0[14][34] + coeff0_15*dmats0[15][34] + coeff0_16*dmats0[16][34] + coeff0_17*dmats0[17][34] + coeff0_18*dmats0[18][34] + coeff0_19*dmats0[19][34] + coeff0_20*dmats0[20][34] + coeff0_21*dmats0[21][34] + coeff0_22*dmats0[22][34] + coeff0_23*dmats0[23][34] + coeff0_24*dmats0[24][34] + coeff0_25*dmats0[25][34] + coeff0_26*dmats0[26][34] + coeff0_27*dmats0[27][34] + coeff0_28*dmats0[28][34] + coeff0_29*dmats0[29][34] + coeff0_30*dmats0[30][34] + coeff0_31*dmats0[31][34] + coeff0_32*dmats0[32][34] + coeff0_33*dmats0[33][34] + coeff0_34*dmats0[34][34];
        }
        if(combinations[deriv_num][j] == 1)
        {
          new_coeff0_0 = coeff0_0*dmats1[0][0] + coeff0_1*dmats1[1][0] + coeff0_2*dmats1[2][0] + coeff0_3*dmats1[3][0] + coeff0_4*dmats1[4][0] + coeff0_5*dmats1[5][0] + coeff0_6*dmats1[6][0] + coeff0_7*dmats1[7][0] + coeff0_8*dmats1[8][0] + coeff0_9*dmats1[9][0] + coeff0_10*dmats1[10][0] + coeff0_11*dmats1[11][0] + coeff0_12*dmats1[12][0] + coeff0_13*dmats1[13][0] + coeff0_14*dmats1[14][0] + coeff0_15*dmats1[15][0] + coeff0_16*dmats1[16][0] + coeff0_17*dmats1[17][0] + coeff0_18*dmats1[18][0] + coeff0_19*dmats1[19][0] + coeff0_20*dmats1[20][0] + coeff0_21*dmats1[21][0] + coeff0_22*dmats1[22][0] + coeff0_23*dmats1[23][0] + coeff0_24*dmats1[24][0] + coeff0_25*dmats1[25][0] + coeff0_26*dmats1[26][0] + coeff0_27*dmats1[27][0] + coeff0_28*dmats1[28][0] + coeff0_29*dmats1[29][0] + coeff0_30*dmats1[30][0] + coeff0_31*dmats1[31][0] + coeff0_32*dmats1[32][0] + coeff0_33*dmats1[33][0] + coeff0_34*dmats1[34][0];
          new_coeff0_1 = coeff0_0*dmats1[0][1] + coeff0_1*dmats1[1][1] + coeff0_2*dmats1[2][1] + coeff0_3*dmats1[3][1] + coeff0_4*dmats1[4][1] + coeff0_5*dmats1[5][1] + coeff0_6*dmats1[6][1] + coeff0_7*dmats1[7][1] + coeff0_8*dmats1[8][1] + coeff0_9*dmats1[9][1] + coeff0_10*dmats1[10][1] + coeff0_11*dmats1[11][1] + coeff0_12*dmats1[12][1] + coeff0_13*dmats1[13][1] + coeff0_14*dmats1[14][1] + coeff0_15*dmats1[15][1] + coeff0_16*dmats1[16][1] + coeff0_17*dmats1[17][1] + coeff0_18*dmats1[18][1] + coeff0_19*dmats1[19][1] + coeff0_20*dmats1[20][1] + coeff0_21*dmats1[21][1] + coeff0_22*dmats1[22][1] + coeff0_23*dmats1[23][1] + coeff0_24*dmats1[24][1] + coeff0_25*dmats1[25][1] + coeff0_26*dmats1[26][1] + coeff0_27*dmats1[27][1] + coeff0_28*dmats1[28][1] + coeff0_29*dmats1[29][1] + coeff0_30*dmats1[30][1] + coeff0_31*dmats1[31][1] + coeff0_32*dmats1[32][1] + coeff0_33*dmats1[33][1] + coeff0_34*dmats1[34][1];
          new_coeff0_2 = coeff0_0*dmats1[0][2] + coeff0_1*dmats1[1][2] + coeff0_2*dmats1[2][2] + coeff0_3*dmats1[3][2] + coeff0_4*dmats1[4][2] + coeff0_5*dmats1[5][2] + coeff0_6*dmats1[6][2] + coeff0_7*dmats1[7][2] + coeff0_8*dmats1[8][2] + coeff0_9*dmats1[9][2] + coeff0_10*dmats1[10][2] + coeff0_11*dmats1[11][2] + coeff0_12*dmats1[12][2] + coeff0_13*dmats1[13][2] + coeff0_14*dmats1[14][2] + coeff0_15*dmats1[15][2] + coeff0_16*dmats1[16][2] + coeff0_17*dmats1[17][2] + coeff0_18*dmats1[18][2] + coeff0_19*dmats1[19][2] + coeff0_20*dmats1[20][2] + coeff0_21*dmats1[21][2] + coeff0_22*dmats1[22][2] + coeff0_23*dmats1[23][2] + coeff0_24*dmats1[24][2] + coeff0_25*dmats1[25][2] + coeff0_26*dmats1[26][2] + coeff0_27*dmats1[27][2] + coeff0_28*dmats1[28][2] + coeff0_29*dmats1[29][2] + coeff0_30*dmats1[30][2] + coeff0_31*dmats1[31][2] + coeff0_32*dmats1[32][2] + coeff0_33*dmats1[33][2] + coeff0_34*dmats1[34][2];
          new_coeff0_3 = coeff0_0*dmats1[0][3] + coeff0_1*dmats1[1][3] + coeff0_2*dmats1[2][3] + coeff0_3*dmats1[3][3] + coeff0_4*dmats1[4][3] + coeff0_5*dmats1[5][3] + coeff0_6*dmats1[6][3] + coeff0_7*dmats1[7][3] + coeff0_8*dmats1[8][3] + coeff0_9*dmats1[9][3] + coeff0_10*dmats1[10][3] + coeff0_11*dmats1[11][3] + coeff0_12*dmats1[12][3] + coeff0_13*dmats1[13][3] + coeff0_14*dmats1[14][3] + coeff0_15*dmats1[15][3] + coeff0_16*dmats1[16][3] + coeff0_17*dmats1[17][3] + coeff0_18*dmats1[18][3] + coeff0_19*dmats1[19][3] + coeff0_20*dmats1[20][3] + coeff0_21*dmats1[21][3] + coeff0_22*dmats1[22][3] + coeff0_23*dmats1[23][3] + coeff0_24*dmats1[24][3] + coeff0_25*dmats1[25][3] + coeff0_26*dmats1[26][3] + coeff0_27*dmats1[27][3] + coeff0_28*dmats1[28][3] + coeff0_29*dmats1[29][3] + coeff0_30*dmats1[30][3] + coeff0_31*dmats1[31][3] + coeff0_32*dmats1[32][3] + coeff0_33*dmats1[33][3] + coeff0_34*dmats1[34][3];
          new_coeff0_4 = coeff0_0*dmats1[0][4] + coeff0_1*dmats1[1][4] + coeff0_2*dmats1[2][4] + coeff0_3*dmats1[3][4] + coeff0_4*dmats1[4][4] + coeff0_5*dmats1[5][4] + coeff0_6*dmats1[6][4] + coeff0_7*dmats1[7][4] + coeff0_8*dmats1[8][4] + coeff0_9*dmats1[9][4] + coeff0_10*dmats1[10][4] + coeff0_11*dmats1[11][4] + coeff0_12*dmats1[12][4] + coeff0_13*dmats1[13][4] + coeff0_14*dmats1[14][4] + coeff0_15*dmats1[15][4] + coeff0_16*dmats1[16][4] + coeff0_17*dmats1[17][4] + coeff0_18*dmats1[18][4] + coeff0_19*dmats1[19][4] + coeff0_20*dmats1[20][4] + coeff0_21*dmats1[21][4] + coeff0_22*dmats1[22][4] + coeff0_23*dmats1[23][4] + coeff0_24*dmats1[24][4] + coeff0_25*dmats1[25][4] + coeff0_26*dmats1[26][4] + coeff0_27*dmats1[27][4] + coeff0_28*dmats1[28][4] + coeff0_29*dmats1[29][4] + coeff0_30*dmats1[30][4] + coeff0_31*dmats1[31][4] + coeff0_32*dmats1[32][4] + coeff0_33*dmats1[33][4] + coeff0_34*dmats1[34][4];
          new_coeff0_5 = coeff0_0*dmats1[0][5] + coeff0_1*dmats1[1][5] + coeff0_2*dmats1[2][5] + coeff0_3*dmats1[3][5] + coeff0_4*dmats1[4][5] + coeff0_5*dmats1[5][5] + coeff0_6*dmats1[6][5] + coeff0_7*dmats1[7][5] + coeff0_8*dmats1[8][5] + coeff0_9*dmats1[9][5] + coeff0_10*dmats1[10][5] + coeff0_11*dmats1[11][5] + coeff0_12*dmats1[12][5] + coeff0_13*dmats1[13][5] + coeff0_14*dmats1[14][5] + coeff0_15*dmats1[15][5] + coeff0_16*dmats1[16][5] + coeff0_17*dmats1[17][5] + coeff0_18*dmats1[18][5] + coeff0_19*dmats1[19][5] + coeff0_20*dmats1[20][5] + coeff0_21*dmats1[21][5] + coeff0_22*dmats1[22][5] + coeff0_23*dmats1[23][5] + coeff0_24*dmats1[24][5] + coeff0_25*dmats1[25][5] + coeff0_26*dmats1[26][5] + coeff0_27*dmats1[27][5] + coeff0_28*dmats1[28][5] + coeff0_29*dmats1[29][5] + coeff0_30*dmats1[30][5] + coeff0_31*dmats1[31][5] + coeff0_32*dmats1[32][5] + coeff0_33*dmats1[33][5] + coeff0_34*dmats1[34][5];
          new_coeff0_6 = coeff0_0*dmats1[0][6] + coeff0_1*dmats1[1][6] + coeff0_2*dmats1[2][6] + coeff0_3*dmats1[3][6] + coeff0_4*dmats1[4][6] + coeff0_5*dmats1[5][6] + coeff0_6*dmats1[6][6] + coeff0_7*dmats1[7][6] + coeff0_8*dmats1[8][6] + coeff0_9*dmats1[9][6] + coeff0_10*dmats1[10][6] + coeff0_11*dmats1[11][6] + coeff0_12*dmats1[12][6] + coeff0_13*dmats1[13][6] + coeff0_14*dmats1[14][6] + coeff0_15*dmats1[15][6] + coeff0_16*dmats1[16][6] + coeff0_17*dmats1[17][6] + coeff0_18*dmats1[18][6] + coeff0_19*dmats1[19][6] + coeff0_20*dmats1[20][6] + coeff0_21*dmats1[21][6] + coeff0_22*dmats1[22][6] + coeff0_23*dmats1[23][6] + coeff0_24*dmats1[24][6] + coeff0_25*dmats1[25][6] + coeff0_26*dmats1[26][6] + coeff0_27*dmats1[27][6] + coeff0_28*dmats1[28][6] + coeff0_29*dmats1[29][6] + coeff0_30*dmats1[30][6] + coeff0_31*dmats1[31][6] + coeff0_32*dmats1[32][6] + coeff0_33*dmats1[33][6] + coeff0_34*dmats1[34][6];
          new_coeff0_7 = coeff0_0*dmats1[0][7] + coeff0_1*dmats1[1][7] + coeff0_2*dmats1[2][7] + coeff0_3*dmats1[3][7] + coeff0_4*dmats1[4][7] + coeff0_5*dmats1[5][7] + coeff0_6*dmats1[6][7] + coeff0_7*dmats1[7][7] + coeff0_8*dmats1[8][7] + coeff0_9*dmats1[9][7] + coeff0_10*dmats1[10][7] + coeff0_11*dmats1[11][7] + coeff0_12*dmats1[12][7] + coeff0_13*dmats1[13][7] + coeff0_14*dmats1[14][7] + coeff0_15*dmats1[15][7] + coeff0_16*dmats1[16][7] + coeff0_17*dmats1[17][7] + coeff0_18*dmats1[18][7] + coeff0_19*dmats1[19][7] + coeff0_20*dmats1[20][7] + coeff0_21*dmats1[21][7] + coeff0_22*dmats1[22][7] + coeff0_23*dmats1[23][7] + coeff0_24*dmats1[24][7] + coeff0_25*dmats1[25][7] + coeff0_26*dmats1[26][7] + coeff0_27*dmats1[27][7] + coeff0_28*dmats1[28][7] + coeff0_29*dmats1[29][7] + coeff0_30*dmats1[30][7] + coeff0_31*dmats1[31][7] + coeff0_32*dmats1[32][7] + coeff0_33*dmats1[33][7] + coeff0_34*dmats1[34][7];
          new_coeff0_8 = coeff0_0*dmats1[0][8] + coeff0_1*dmats1[1][8] + coeff0_2*dmats1[2][8] + coeff0_3*dmats1[3][8] + coeff0_4*dmats1[4][8] + coeff0_5*dmats1[5][8] + coeff0_6*dmats1[6][8] + coeff0_7*dmats1[7][8] + coeff0_8*dmats1[8][8] + coeff0_9*dmats1[9][8] + coeff0_10*dmats1[10][8] + coeff0_11*dmats1[11][8] + coeff0_12*dmats1[12][8] + coeff0_13*dmats1[13][8] + coeff0_14*dmats1[14][8] + coeff0_15*dmats1[15][8] + coeff0_16*dmats1[16][8] + coeff0_17*dmats1[17][8] + coeff0_18*dmats1[18][8] + coeff0_19*dmats1[19][8] + coeff0_20*dmats1[20][8] + coeff0_21*dmats1[21][8] + coeff0_22*dmats1[22][8] + coeff0_23*dmats1[23][8] + coeff0_24*dmats1[24][8] + coeff0_25*dmats1[25][8] + coeff0_26*dmats1[26][8] + coeff0_27*dmats1[27][8] + coeff0_28*dmats1[28][8] + coeff0_29*dmats1[29][8] + coeff0_30*dmats1[30][8] + coeff0_31*dmats1[31][8] + coeff0_32*dmats1[32][8] + coeff0_33*dmats1[33][8] + coeff0_34*dmats1[34][8];
          new_coeff0_9 = coeff0_0*dmats1[0][9] + coeff0_1*dmats1[1][9] + coeff0_2*dmats1[2][9] + coeff0_3*dmats1[3][9] + coeff0_4*dmats1[4][9] + coeff0_5*dmats1[5][9] + coeff0_6*dmats1[6][9] + coeff0_7*dmats1[7][9] + coeff0_8*dmats1[8][9] + coeff0_9*dmats1[9][9] + coeff0_10*dmats1[10][9] + coeff0_11*dmats1[11][9] + coeff0_12*dmats1[12][9] + coeff0_13*dmats1[13][9] + coeff0_14*dmats1[14][9] + coeff0_15*dmats1[15][9] + coeff0_16*dmats1[16][9] + coeff0_17*dmats1[17][9] + coeff0_18*dmats1[18][9] + coeff0_19*dmats1[19][9] + coeff0_20*dmats1[20][9] + coeff0_21*dmats1[21][9] + coeff0_22*dmats1[22][9] + coeff0_23*dmats1[23][9] + coeff0_24*dmats1[24][9] + coeff0_25*dmats1[25][9] + coeff0_26*dmats1[26][9] + coeff0_27*dmats1[27][9] + coeff0_28*dmats1[28][9] + coeff0_29*dmats1[29][9] + coeff0_30*dmats1[30][9] + coeff0_31*dmats1[31][9] + coeff0_32*dmats1[32][9] + coeff0_33*dmats1[33][9] + coeff0_34*dmats1[34][9];
          new_coeff0_10 = coeff0_0*dmats1[0][10] + coeff0_1*dmats1[1][10] + coeff0_2*dmats1[2][10] + coeff0_3*dmats1[3][10] + coeff0_4*dmats1[4][10] + coeff0_5*dmats1[5][10] + coeff0_6*dmats1[6][10] + coeff0_7*dmats1[7][10] + coeff0_8*dmats1[8][10] + coeff0_9*dmats1[9][10] + coeff0_10*dmats1[10][10] + coeff0_11*dmats1[11][10] + coeff0_12*dmats1[12][10] + coeff0_13*dmats1[13][10] + coeff0_14*dmats1[14][10] + coeff0_15*dmats1[15][10] + coeff0_16*dmats1[16][10] + coeff0_17*dmats1[17][10] + coeff0_18*dmats1[18][10] + coeff0_19*dmats1[19][10] + coeff0_20*dmats1[20][10] + coeff0_21*dmats1[21][10] + coeff0_22*dmats1[22][10] + coeff0_23*dmats1[23][10] + coeff0_24*dmats1[24][10] + coeff0_25*dmats1[25][10] + coeff0_26*dmats1[26][10] + coeff0_27*dmats1[27][10] + coeff0_28*dmats1[28][10] + coeff0_29*dmats1[29][10] + coeff0_30*dmats1[30][10] + coeff0_31*dmats1[31][10] + coeff0_32*dmats1[32][10] + coeff0_33*dmats1[33][10] + coeff0_34*dmats1[34][10];
          new_coeff0_11 = coeff0_0*dmats1[0][11] + coeff0_1*dmats1[1][11] + coeff0_2*dmats1[2][11] + coeff0_3*dmats1[3][11] + coeff0_4*dmats1[4][11] + coeff0_5*dmats1[5][11] + coeff0_6*dmats1[6][11] + coeff0_7*dmats1[7][11] + coeff0_8*dmats1[8][11] + coeff0_9*dmats1[9][11] + coeff0_10*dmats1[10][11] + coeff0_11*dmats1[11][11] + coeff0_12*dmats1[12][11] + coeff0_13*dmats1[13][11] + coeff0_14*dmats1[14][11] + coeff0_15*dmats1[15][11] + coeff0_16*dmats1[16][11] + coeff0_17*dmats1[17][11] + coeff0_18*dmats1[18][11] + coeff0_19*dmats1[19][11] + coeff0_20*dmats1[20][11] + coeff0_21*dmats1[21][11] + coeff0_22*dmats1[22][11] + coeff0_23*dmats1[23][11] + coeff0_24*dmats1[24][11] + coeff0_25*dmats1[25][11] + coeff0_26*dmats1[26][11] + coeff0_27*dmats1[27][11] + coeff0_28*dmats1[28][11] + coeff0_29*dmats1[29][11] + coeff0_30*dmats1[30][11] + coeff0_31*dmats1[31][11] + coeff0_32*dmats1[32][11] + coeff0_33*dmats1[33][11] + coeff0_34*dmats1[34][11];
          new_coeff0_12 = coeff0_0*dmats1[0][12] + coeff0_1*dmats1[1][12] + coeff0_2*dmats1[2][12] + coeff0_3*dmats1[3][12] + coeff0_4*dmats1[4][12] + coeff0_5*dmats1[5][12] + coeff0_6*dmats1[6][12] + coeff0_7*dmats1[7][12] + coeff0_8*dmats1[8][12] + coeff0_9*dmats1[9][12] + coeff0_10*dmats1[10][12] + coeff0_11*dmats1[11][12] + coeff0_12*dmats1[12][12] + coeff0_13*dmats1[13][12] + coeff0_14*dmats1[14][12] + coeff0_15*dmats1[15][12] + coeff0_16*dmats1[16][12] + coeff0_17*dmats1[17][12] + coeff0_18*dmats1[18][12] + coeff0_19*dmats1[19][12] + coeff0_20*dmats1[20][12] + coeff0_21*dmats1[21][12] + coeff0_22*dmats1[22][12] + coeff0_23*dmats1[23][12] + coeff0_24*dmats1[24][12] + coeff0_25*dmats1[25][12] + coeff0_26*dmats1[26][12] + coeff0_27*dmats1[27][12] + coeff0_28*dmats1[28][12] + coeff0_29*dmats1[29][12] + coeff0_30*dmats1[30][12] + coeff0_31*dmats1[31][12] + coeff0_32*dmats1[32][12] + coeff0_33*dmats1[33][12] + coeff0_34*dmats1[34][12];
          new_coeff0_13 = coeff0_0*dmats1[0][13] + coeff0_1*dmats1[1][13] + coeff0_2*dmats1[2][13] + coeff0_3*dmats1[3][13] + coeff0_4*dmats1[4][13] + coeff0_5*dmats1[5][13] + coeff0_6*dmats1[6][13] + coeff0_7*dmats1[7][13] + coeff0_8*dmats1[8][13] + coeff0_9*dmats1[9][13] + coeff0_10*dmats1[10][13] + coeff0_11*dmats1[11][13] + coeff0_12*dmats1[12][13] + coeff0_13*dmats1[13][13] + coeff0_14*dmats1[14][13] + coeff0_15*dmats1[15][13] + coeff0_16*dmats1[16][13] + coeff0_17*dmats1[17][13] + coeff0_18*dmats1[18][13] + coeff0_19*dmats1[19][13] + coeff0_20*dmats1[20][13] + coeff0_21*dmats1[21][13] + coeff0_22*dmats1[22][13] + coeff0_23*dmats1[23][13] + coeff0_24*dmats1[24][13] + coeff0_25*dmats1[25][13] + coeff0_26*dmats1[26][13] + coeff0_27*dmats1[27][13] + coeff0_28*dmats1[28][13] + coeff0_29*dmats1[29][13] + coeff0_30*dmats1[30][13] + coeff0_31*dmats1[31][13] + coeff0_32*dmats1[32][13] + coeff0_33*dmats1[33][13] + coeff0_34*dmats1[34][13];
          new_coeff0_14 = coeff0_0*dmats1[0][14] + coeff0_1*dmats1[1][14] + coeff0_2*dmats1[2][14] + coeff0_3*dmats1[3][14] + coeff0_4*dmats1[4][14] + coeff0_5*dmats1[5][14] + coeff0_6*dmats1[6][14] + coeff0_7*dmats1[7][14] + coeff0_8*dmats1[8][14] + coeff0_9*dmats1[9][14] + coeff0_10*dmats1[10][14] + coeff0_11*dmats1[11][14] + coeff0_12*dmats1[12][14] + coeff0_13*dmats1[13][14] + coeff0_14*dmats1[14][14] + coeff0_15*dmats1[15][14] + coeff0_16*dmats1[16][14] + coeff0_17*dmats1[17][14] + coeff0_18*dmats1[18][14] + coeff0_19*dmats1[19][14] + coeff0_20*dmats1[20][14] + coeff0_21*dmats1[21][14] + coeff0_22*dmats1[22][14] + coeff0_23*dmats1[23][14] + coeff0_24*dmats1[24][14] + coeff0_25*dmats1[25][14] + coeff0_26*dmats1[26][14] + coeff0_27*dmats1[27][14] + coeff0_28*dmats1[28][14] + coeff0_29*dmats1[29][14] + coeff0_30*dmats1[30][14] + coeff0_31*dmats1[31][14] + coeff0_32*dmats1[32][14] + coeff0_33*dmats1[33][14] + coeff0_34*dmats1[34][14];
          new_coeff0_15 = coeff0_0*dmats1[0][15] + coeff0_1*dmats1[1][15] + coeff0_2*dmats1[2][15] + coeff0_3*dmats1[3][15] + coeff0_4*dmats1[4][15] + coeff0_5*dmats1[5][15] + coeff0_6*dmats1[6][15] + coeff0_7*dmats1[7][15] + coeff0_8*dmats1[8][15] + coeff0_9*dmats1[9][15] + coeff0_10*dmats1[10][15] + coeff0_11*dmats1[11][15] + coeff0_12*dmats1[12][15] + coeff0_13*dmats1[13][15] + coeff0_14*dmats1[14][15] + coeff0_15*dmats1[15][15] + coeff0_16*dmats1[16][15] + coeff0_17*dmats1[17][15] + coeff0_18*dmats1[18][15] + coeff0_19*dmats1[19][15] + coeff0_20*dmats1[20][15] + coeff0_21*dmats1[21][15] + coeff0_22*dmats1[22][15] + coeff0_23*dmats1[23][15] + coeff0_24*dmats1[24][15] + coeff0_25*dmats1[25][15] + coeff0_26*dmats1[26][15] + coeff0_27*dmats1[27][15] + coeff0_28*dmats1[28][15] + coeff0_29*dmats1[29][15] + coeff0_30*dmats1[30][15] + coeff0_31*dmats1[31][15] + coeff0_32*dmats1[32][15] + coeff0_33*dmats1[33][15] + coeff0_34*dmats1[34][15];
          new_coeff0_16 = coeff0_0*dmats1[0][16] + coeff0_1*dmats1[1][16] + coeff0_2*dmats1[2][16] + coeff0_3*dmats1[3][16] + coeff0_4*dmats1[4][16] + coeff0_5*dmats1[5][16] + coeff0_6*dmats1[6][16] + coeff0_7*dmats1[7][16] + coeff0_8*dmats1[8][16] + coeff0_9*dmats1[9][16] + coeff0_10*dmats1[10][16] + coeff0_11*dmats1[11][16] + coeff0_12*dmats1[12][16] + coeff0_13*dmats1[13][16] + coeff0_14*dmats1[14][16] + coeff0_15*dmats1[15][16] + coeff0_16*dmats1[16][16] + coeff0_17*dmats1[17][16] + coeff0_18*dmats1[18][16] + coeff0_19*dmats1[19][16] + coeff0_20*dmats1[20][16] + coeff0_21*dmats1[21][16] + coeff0_22*dmats1[22][16] + coeff0_23*dmats1[23][16] + coeff0_24*dmats1[24][16] + coeff0_25*dmats1[25][16] + coeff0_26*dmats1[26][16] + coeff0_27*dmats1[27][16] + coeff0_28*dmats1[28][16] + coeff0_29*dmats1[29][16] + coeff0_30*dmats1[30][16] + coeff0_31*dmats1[31][16] + coeff0_32*dmats1[32][16] + coeff0_33*dmats1[33][16] + coeff0_34*dmats1[34][16];
          new_coeff0_17 = coeff0_0*dmats1[0][17] + coeff0_1*dmats1[1][17] + coeff0_2*dmats1[2][17] + coeff0_3*dmats1[3][17] + coeff0_4*dmats1[4][17] + coeff0_5*dmats1[5][17] + coeff0_6*dmats1[6][17] + coeff0_7*dmats1[7][17] + coeff0_8*dmats1[8][17] + coeff0_9*dmats1[9][17] + coeff0_10*dmats1[10][17] + coeff0_11*dmats1[11][17] + coeff0_12*dmats1[12][17] + coeff0_13*dmats1[13][17] + coeff0_14*dmats1[14][17] + coeff0_15*dmats1[15][17] + coeff0_16*dmats1[16][17] + coeff0_17*dmats1[17][17] + coeff0_18*dmats1[18][17] + coeff0_19*dmats1[19][17] + coeff0_20*dmats1[20][17] + coeff0_21*dmats1[21][17] + coeff0_22*dmats1[22][17] + coeff0_23*dmats1[23][17] + coeff0_24*dmats1[24][17] + coeff0_25*dmats1[25][17] + coeff0_26*dmats1[26][17] + coeff0_27*dmats1[27][17] + coeff0_28*dmats1[28][17] + coeff0_29*dmats1[29][17] + coeff0_30*dmats1[30][17] + coeff0_31*dmats1[31][17] + coeff0_32*dmats1[32][17] + coeff0_33*dmats1[33][17] + coeff0_34*dmats1[34][17];
          new_coeff0_18 = coeff0_0*dmats1[0][18] + coeff0_1*dmats1[1][18] + coeff0_2*dmats1[2][18] + coeff0_3*dmats1[3][18] + coeff0_4*dmats1[4][18] + coeff0_5*dmats1[5][18] + coeff0_6*dmats1[6][18] + coeff0_7*dmats1[7][18] + coeff0_8*dmats1[8][18] + coeff0_9*dmats1[9][18] + coeff0_10*dmats1[10][18] + coeff0_11*dmats1[11][18] + coeff0_12*dmats1[12][18] + coeff0_13*dmats1[13][18] + coeff0_14*dmats1[14][18] + coeff0_15*dmats1[15][18] + coeff0_16*dmats1[16][18] + coeff0_17*dmats1[17][18] + coeff0_18*dmats1[18][18] + coeff0_19*dmats1[19][18] + coeff0_20*dmats1[20][18] + coeff0_21*dmats1[21][18] + coeff0_22*dmats1[22][18] + coeff0_23*dmats1[23][18] + coeff0_24*dmats1[24][18] + coeff0_25*dmats1[25][18] + coeff0_26*dmats1[26][18] + coeff0_27*dmats1[27][18] + coeff0_28*dmats1[28][18] + coeff0_29*dmats1[29][18] + coeff0_30*dmats1[30][18] + coeff0_31*dmats1[31][18] + coeff0_32*dmats1[32][18] + coeff0_33*dmats1[33][18] + coeff0_34*dmats1[34][18];
          new_coeff0_19 = coeff0_0*dmats1[0][19] + coeff0_1*dmats1[1][19] + coeff0_2*dmats1[2][19] + coeff0_3*dmats1[3][19] + coeff0_4*dmats1[4][19] + coeff0_5*dmats1[5][19] + coeff0_6*dmats1[6][19] + coeff0_7*dmats1[7][19] + coeff0_8*dmats1[8][19] + coeff0_9*dmats1[9][19] + coeff0_10*dmats1[10][19] + coeff0_11*dmats1[11][19] + coeff0_12*dmats1[12][19] + coeff0_13*dmats1[13][19] + coeff0_14*dmats1[14][19] + coeff0_15*dmats1[15][19] + coeff0_16*dmats1[16][19] + coeff0_17*dmats1[17][19] + coeff0_18*dmats1[18][19] + coeff0_19*dmats1[19][19] + coeff0_20*dmats1[20][19] + coeff0_21*dmats1[21][19] + coeff0_22*dmats1[22][19] + coeff0_23*dmats1[23][19] + coeff0_24*dmats1[24][19] + coeff0_25*dmats1[25][19] + coeff0_26*dmats1[26][19] + coeff0_27*dmats1[27][19] + coeff0_28*dmats1[28][19] + coeff0_29*dmats1[29][19] + coeff0_30*dmats1[30][19] + coeff0_31*dmats1[31][19] + coeff0_32*dmats1[32][19] + coeff0_33*dmats1[33][19] + coeff0_34*dmats1[34][19];
          new_coeff0_20 = coeff0_0*dmats1[0][20] + coeff0_1*dmats1[1][20] + coeff0_2*dmats1[2][20] + coeff0_3*dmats1[3][20] + coeff0_4*dmats1[4][20] + coeff0_5*dmats1[5][20] + coeff0_6*dmats1[6][20] + coeff0_7*dmats1[7][20] + coeff0_8*dmats1[8][20] + coeff0_9*dmats1[9][20] + coeff0_10*dmats1[10][20] + coeff0_11*dmats1[11][20] + coeff0_12*dmats1[12][20] + coeff0_13*dmats1[13][20] + coeff0_14*dmats1[14][20] + coeff0_15*dmats1[15][20] + coeff0_16*dmats1[16][20] + coeff0_17*dmats1[17][20] + coeff0_18*dmats1[18][20] + coeff0_19*dmats1[19][20] + coeff0_20*dmats1[20][20] + coeff0_21*dmats1[21][20] + coeff0_22*dmats1[22][20] + coeff0_23*dmats1[23][20] + coeff0_24*dmats1[24][20] + coeff0_25*dmats1[25][20] + coeff0_26*dmats1[26][20] + coeff0_27*dmats1[27][20] + coeff0_28*dmats1[28][20] + coeff0_29*dmats1[29][20] + coeff0_30*dmats1[30][20] + coeff0_31*dmats1[31][20] + coeff0_32*dmats1[32][20] + coeff0_33*dmats1[33][20] + coeff0_34*dmats1[34][20];
          new_coeff0_21 = coeff0_0*dmats1[0][21] + coeff0_1*dmats1[1][21] + coeff0_2*dmats1[2][21] + coeff0_3*dmats1[3][21] + coeff0_4*dmats1[4][21] + coeff0_5*dmats1[5][21] + coeff0_6*dmats1[6][21] + coeff0_7*dmats1[7][21] + coeff0_8*dmats1[8][21] + coeff0_9*dmats1[9][21] + coeff0_10*dmats1[10][21] + coeff0_11*dmats1[11][21] + coeff0_12*dmats1[12][21] + coeff0_13*dmats1[13][21] + coeff0_14*dmats1[14][21] + coeff0_15*dmats1[15][21] + coeff0_16*dmats1[16][21] + coeff0_17*dmats1[17][21] + coeff0_18*dmats1[18][21] + coeff0_19*dmats1[19][21] + coeff0_20*dmats1[20][21] + coeff0_21*dmats1[21][21] + coeff0_22*dmats1[22][21] + coeff0_23*dmats1[23][21] + coeff0_24*dmats1[24][21] + coeff0_25*dmats1[25][21] + coeff0_26*dmats1[26][21] + coeff0_27*dmats1[27][21] + coeff0_28*dmats1[28][21] + coeff0_29*dmats1[29][21] + coeff0_30*dmats1[30][21] + coeff0_31*dmats1[31][21] + coeff0_32*dmats1[32][21] + coeff0_33*dmats1[33][21] + coeff0_34*dmats1[34][21];
          new_coeff0_22 = coeff0_0*dmats1[0][22] + coeff0_1*dmats1[1][22] + coeff0_2*dmats1[2][22] + coeff0_3*dmats1[3][22] + coeff0_4*dmats1[4][22] + coeff0_5*dmats1[5][22] + coeff0_6*dmats1[6][22] + coeff0_7*dmats1[7][22] + coeff0_8*dmats1[8][22] + coeff0_9*dmats1[9][22] + coeff0_10*dmats1[10][22] + coeff0_11*dmats1[11][22] + coeff0_12*dmats1[12][22] + coeff0_13*dmats1[13][22] + coeff0_14*dmats1[14][22] + coeff0_15*dmats1[15][22] + coeff0_16*dmats1[16][22] + coeff0_17*dmats1[17][22] + coeff0_18*dmats1[18][22] + coeff0_19*dmats1[19][22] + coeff0_20*dmats1[20][22] + coeff0_21*dmats1[21][22] + coeff0_22*dmats1[22][22] + coeff0_23*dmats1[23][22] + coeff0_24*dmats1[24][22] + coeff0_25*dmats1[25][22] + coeff0_26*dmats1[26][22] + coeff0_27*dmats1[27][22] + coeff0_28*dmats1[28][22] + coeff0_29*dmats1[29][22] + coeff0_30*dmats1[30][22] + coeff0_31*dmats1[31][22] + coeff0_32*dmats1[32][22] + coeff0_33*dmats1[33][22] + coeff0_34*dmats1[34][22];
          new_coeff0_23 = coeff0_0*dmats1[0][23] + coeff0_1*dmats1[1][23] + coeff0_2*dmats1[2][23] + coeff0_3*dmats1[3][23] + coeff0_4*dmats1[4][23] + coeff0_5*dmats1[5][23] + coeff0_6*dmats1[6][23] + coeff0_7*dmats1[7][23] + coeff0_8*dmats1[8][23] + coeff0_9*dmats1[9][23] + coeff0_10*dmats1[10][23] + coeff0_11*dmats1[11][23] + coeff0_12*dmats1[12][23] + coeff0_13*dmats1[13][23] + coeff0_14*dmats1[14][23] + coeff0_15*dmats1[15][23] + coeff0_16*dmats1[16][23] + coeff0_17*dmats1[17][23] + coeff0_18*dmats1[18][23] + coeff0_19*dmats1[19][23] + coeff0_20*dmats1[20][23] + coeff0_21*dmats1[21][23] + coeff0_22*dmats1[22][23] + coeff0_23*dmats1[23][23] + coeff0_24*dmats1[24][23] + coeff0_25*dmats1[25][23] + coeff0_26*dmats1[26][23] + coeff0_27*dmats1[27][23] + coeff0_28*dmats1[28][23] + coeff0_29*dmats1[29][23] + coeff0_30*dmats1[30][23] + coeff0_31*dmats1[31][23] + coeff0_32*dmats1[32][23] + coeff0_33*dmats1[33][23] + coeff0_34*dmats1[34][23];
          new_coeff0_24 = coeff0_0*dmats1[0][24] + coeff0_1*dmats1[1][24] + coeff0_2*dmats1[2][24] + coeff0_3*dmats1[3][24] + coeff0_4*dmats1[4][24] + coeff0_5*dmats1[5][24] + coeff0_6*dmats1[6][24] + coeff0_7*dmats1[7][24] + coeff0_8*dmats1[8][24] + coeff0_9*dmats1[9][24] + coeff0_10*dmats1[10][24] + coeff0_11*dmats1[11][24] + coeff0_12*dmats1[12][24] + coeff0_13*dmats1[13][24] + coeff0_14*dmats1[14][24] + coeff0_15*dmats1[15][24] + coeff0_16*dmats1[16][24] + coeff0_17*dmats1[17][24] + coeff0_18*dmats1[18][24] + coeff0_19*dmats1[19][24] + coeff0_20*dmats1[20][24] + coeff0_21*dmats1[21][24] + coeff0_22*dmats1[22][24] + coeff0_23*dmats1[23][24] + coeff0_24*dmats1[24][24] + coeff0_25*dmats1[25][24] + coeff0_26*dmats1[26][24] + coeff0_27*dmats1[27][24] + coeff0_28*dmats1[28][24] + coeff0_29*dmats1[29][24] + coeff0_30*dmats1[30][24] + coeff0_31*dmats1[31][24] + coeff0_32*dmats1[32][24] + coeff0_33*dmats1[33][24] + coeff0_34*dmats1[34][24];
          new_coeff0_25 = coeff0_0*dmats1[0][25] + coeff0_1*dmats1[1][25] + coeff0_2*dmats1[2][25] + coeff0_3*dmats1[3][25] + coeff0_4*dmats1[4][25] + coeff0_5*dmats1[5][25] + coeff0_6*dmats1[6][25] + coeff0_7*dmats1[7][25] + coeff0_8*dmats1[8][25] + coeff0_9*dmats1[9][25] + coeff0_10*dmats1[10][25] + coeff0_11*dmats1[11][25] + coeff0_12*dmats1[12][25] + coeff0_13*dmats1[13][25] + coeff0_14*dmats1[14][25] + coeff0_15*dmats1[15][25] + coeff0_16*dmats1[16][25] + coeff0_17*dmats1[17][25] + coeff0_18*dmats1[18][25] + coeff0_19*dmats1[19][25] + coeff0_20*dmats1[20][25] + coeff0_21*dmats1[21][25] + coeff0_22*dmats1[22][25] + coeff0_23*dmats1[23][25] + coeff0_24*dmats1[24][25] + coeff0_25*dmats1[25][25] + coeff0_26*dmats1[26][25] + coeff0_27*dmats1[27][25] + coeff0_28*dmats1[28][25] + coeff0_29*dmats1[29][25] + coeff0_30*dmats1[30][25] + coeff0_31*dmats1[31][25] + coeff0_32*dmats1[32][25] + coeff0_33*dmats1[33][25] + coeff0_34*dmats1[34][25];
          new_coeff0_26 = coeff0_0*dmats1[0][26] + coeff0_1*dmats1[1][26] + coeff0_2*dmats1[2][26] + coeff0_3*dmats1[3][26] + coeff0_4*dmats1[4][26] + coeff0_5*dmats1[5][26] + coeff0_6*dmats1[6][26] + coeff0_7*dmats1[7][26] + coeff0_8*dmats1[8][26] + coeff0_9*dmats1[9][26] + coeff0_10*dmats1[10][26] + coeff0_11*dmats1[11][26] + coeff0_12*dmats1[12][26] + coeff0_13*dmats1[13][26] + coeff0_14*dmats1[14][26] + coeff0_15*dmats1[15][26] + coeff0_16*dmats1[16][26] + coeff0_17*dmats1[17][26] + coeff0_18*dmats1[18][26] + coeff0_19*dmats1[19][26] + coeff0_20*dmats1[20][26] + coeff0_21*dmats1[21][26] + coeff0_22*dmats1[22][26] + coeff0_23*dmats1[23][26] + coeff0_24*dmats1[24][26] + coeff0_25*dmats1[25][26] + coeff0_26*dmats1[26][26] + coeff0_27*dmats1[27][26] + coeff0_28*dmats1[28][26] + coeff0_29*dmats1[29][26] + coeff0_30*dmats1[30][26] + coeff0_31*dmats1[31][26] + coeff0_32*dmats1[32][26] + coeff0_33*dmats1[33][26] + coeff0_34*dmats1[34][26];
          new_coeff0_27 = coeff0_0*dmats1[0][27] + coeff0_1*dmats1[1][27] + coeff0_2*dmats1[2][27] + coeff0_3*dmats1[3][27] + coeff0_4*dmats1[4][27] + coeff0_5*dmats1[5][27] + coeff0_6*dmats1[6][27] + coeff0_7*dmats1[7][27] + coeff0_8*dmats1[8][27] + coeff0_9*dmats1[9][27] + coeff0_10*dmats1[10][27] + coeff0_11*dmats1[11][27] + coeff0_12*dmats1[12][27] + coeff0_13*dmats1[13][27] + coeff0_14*dmats1[14][27] + coeff0_15*dmats1[15][27] + coeff0_16*dmats1[16][27] + coeff0_17*dmats1[17][27] + coeff0_18*dmats1[18][27] + coeff0_19*dmats1[19][27] + coeff0_20*dmats1[20][27] + coeff0_21*dmats1[21][27] + coeff0_22*dmats1[22][27] + coeff0_23*dmats1[23][27] + coeff0_24*dmats1[24][27] + coeff0_25*dmats1[25][27] + coeff0_26*dmats1[26][27] + coeff0_27*dmats1[27][27] + coeff0_28*dmats1[28][27] + coeff0_29*dmats1[29][27] + coeff0_30*dmats1[30][27] + coeff0_31*dmats1[31][27] + coeff0_32*dmats1[32][27] + coeff0_33*dmats1[33][27] + coeff0_34*dmats1[34][27];
          new_coeff0_28 = coeff0_0*dmats1[0][28] + coeff0_1*dmats1[1][28] + coeff0_2*dmats1[2][28] + coeff0_3*dmats1[3][28] + coeff0_4*dmats1[4][28] + coeff0_5*dmats1[5][28] + coeff0_6*dmats1[6][28] + coeff0_7*dmats1[7][28] + coeff0_8*dmats1[8][28] + coeff0_9*dmats1[9][28] + coeff0_10*dmats1[10][28] + coeff0_11*dmats1[11][28] + coeff0_12*dmats1[12][28] + coeff0_13*dmats1[13][28] + coeff0_14*dmats1[14][28] + coeff0_15*dmats1[15][28] + coeff0_16*dmats1[16][28] + coeff0_17*dmats1[17][28] + coeff0_18*dmats1[18][28] + coeff0_19*dmats1[19][28] + coeff0_20*dmats1[20][28] + coeff0_21*dmats1[21][28] + coeff0_22*dmats1[22][28] + coeff0_23*dmats1[23][28] + coeff0_24*dmats1[24][28] + coeff0_25*dmats1[25][28] + coeff0_26*dmats1[26][28] + coeff0_27*dmats1[27][28] + coeff0_28*dmats1[28][28] + coeff0_29*dmats1[29][28] + coeff0_30*dmats1[30][28] + coeff0_31*dmats1[31][28] + coeff0_32*dmats1[32][28] + coeff0_33*dmats1[33][28] + coeff0_34*dmats1[34][28];
          new_coeff0_29 = coeff0_0*dmats1[0][29] + coeff0_1*dmats1[1][29] + coeff0_2*dmats1[2][29] + coeff0_3*dmats1[3][29] + coeff0_4*dmats1[4][29] + coeff0_5*dmats1[5][29] + coeff0_6*dmats1[6][29] + coeff0_7*dmats1[7][29] + coeff0_8*dmats1[8][29] + coeff0_9*dmats1[9][29] + coeff0_10*dmats1[10][29] + coeff0_11*dmats1[11][29] + coeff0_12*dmats1[12][29] + coeff0_13*dmats1[13][29] + coeff0_14*dmats1[14][29] + coeff0_15*dmats1[15][29] + coeff0_16*dmats1[16][29] + coeff0_17*dmats1[17][29] + coeff0_18*dmats1[18][29] + coeff0_19*dmats1[19][29] + coeff0_20*dmats1[20][29] + coeff0_21*dmats1[21][29] + coeff0_22*dmats1[22][29] + coeff0_23*dmats1[23][29] + coeff0_24*dmats1[24][29] + coeff0_25*dmats1[25][29] + coeff0_26*dmats1[26][29] + coeff0_27*dmats1[27][29] + coeff0_28*dmats1[28][29] + coeff0_29*dmats1[29][29] + coeff0_30*dmats1[30][29] + coeff0_31*dmats1[31][29] + coeff0_32*dmats1[32][29] + coeff0_33*dmats1[33][29] + coeff0_34*dmats1[34][29];
          new_coeff0_30 = coeff0_0*dmats1[0][30] + coeff0_1*dmats1[1][30] + coeff0_2*dmats1[2][30] + coeff0_3*dmats1[3][30] + coeff0_4*dmats1[4][30] + coeff0_5*dmats1[5][30] + coeff0_6*dmats1[6][30] + coeff0_7*dmats1[7][30] + coeff0_8*dmats1[8][30] + coeff0_9*dmats1[9][30] + coeff0_10*dmats1[10][30] + coeff0_11*dmats1[11][30] + coeff0_12*dmats1[12][30] + coeff0_13*dmats1[13][30] + coeff0_14*dmats1[14][30] + coeff0_15*dmats1[15][30] + coeff0_16*dmats1[16][30] + coeff0_17*dmats1[17][30] + coeff0_18*dmats1[18][30] + coeff0_19*dmats1[19][30] + coeff0_20*dmats1[20][30] + coeff0_21*dmats1[21][30] + coeff0_22*dmats1[22][30] + coeff0_23*dmats1[23][30] + coeff0_24*dmats1[24][30] + coeff0_25*dmats1[25][30] + coeff0_26*dmats1[26][30] + coeff0_27*dmats1[27][30] + coeff0_28*dmats1[28][30] + coeff0_29*dmats1[29][30] + coeff0_30*dmats1[30][30] + coeff0_31*dmats1[31][30] + coeff0_32*dmats1[32][30] + coeff0_33*dmats1[33][30] + coeff0_34*dmats1[34][30];
          new_coeff0_31 = coeff0_0*dmats1[0][31] + coeff0_1*dmats1[1][31] + coeff0_2*dmats1[2][31] + coeff0_3*dmats1[3][31] + coeff0_4*dmats1[4][31] + coeff0_5*dmats1[5][31] + coeff0_6*dmats1[6][31] + coeff0_7*dmats1[7][31] + coeff0_8*dmats1[8][31] + coeff0_9*dmats1[9][31] + coeff0_10*dmats1[10][31] + coeff0_11*dmats1[11][31] + coeff0_12*dmats1[12][31] + coeff0_13*dmats1[13][31] + coeff0_14*dmats1[14][31] + coeff0_15*dmats1[15][31] + coeff0_16*dmats1[16][31] + coeff0_17*dmats1[17][31] + coeff0_18*dmats1[18][31] + coeff0_19*dmats1[19][31] + coeff0_20*dmats1[20][31] + coeff0_21*dmats1[21][31] + coeff0_22*dmats1[22][31] + coeff0_23*dmats1[23][31] + coeff0_24*dmats1[24][31] + coeff0_25*dmats1[25][31] + coeff0_26*dmats1[26][31] + coeff0_27*dmats1[27][31] + coeff0_28*dmats1[28][31] + coeff0_29*dmats1[29][31] + coeff0_30*dmats1[30][31] + coeff0_31*dmats1[31][31] + coeff0_32*dmats1[32][31] + coeff0_33*dmats1[33][31] + coeff0_34*dmats1[34][31];
          new_coeff0_32 = coeff0_0*dmats1[0][32] + coeff0_1*dmats1[1][32] + coeff0_2*dmats1[2][32] + coeff0_3*dmats1[3][32] + coeff0_4*dmats1[4][32] + coeff0_5*dmats1[5][32] + coeff0_6*dmats1[6][32] + coeff0_7*dmats1[7][32] + coeff0_8*dmats1[8][32] + coeff0_9*dmats1[9][32] + coeff0_10*dmats1[10][32] + coeff0_11*dmats1[11][32] + coeff0_12*dmats1[12][32] + coeff0_13*dmats1[13][32] + coeff0_14*dmats1[14][32] + coeff0_15*dmats1[15][32] + coeff0_16*dmats1[16][32] + coeff0_17*dmats1[17][32] + coeff0_18*dmats1[18][32] + coeff0_19*dmats1[19][32] + coeff0_20*dmats1[20][32] + coeff0_21*dmats1[21][32] + coeff0_22*dmats1[22][32] + coeff0_23*dmats1[23][32] + coeff0_24*dmats1[24][32] + coeff0_25*dmats1[25][32] + coeff0_26*dmats1[26][32] + coeff0_27*dmats1[27][32] + coeff0_28*dmats1[28][32] + coeff0_29*dmats1[29][32] + coeff0_30*dmats1[30][32] + coeff0_31*dmats1[31][32] + coeff0_32*dmats1[32][32] + coeff0_33*dmats1[33][32] + coeff0_34*dmats1[34][32];
          new_coeff0_33 = coeff0_0*dmats1[0][33] + coeff0_1*dmats1[1][33] + coeff0_2*dmats1[2][33] + coeff0_3*dmats1[3][33] + coeff0_4*dmats1[4][33] + coeff0_5*dmats1[5][33] + coeff0_6*dmats1[6][33] + coeff0_7*dmats1[7][33] + coeff0_8*dmats1[8][33] + coeff0_9*dmats1[9][33] + coeff0_10*dmats1[10][33] + coeff0_11*dmats1[11][33] + coeff0_12*dmats1[12][33] + coeff0_13*dmats1[13][33] + coeff0_14*dmats1[14][33] + coeff0_15*dmats1[15][33] + coeff0_16*dmats1[16][33] + coeff0_17*dmats1[17][33] + coeff0_18*dmats1[18][33] + coeff0_19*dmats1[19][33] + coeff0_20*dmats1[20][33] + coeff0_21*dmats1[21][33] + coeff0_22*dmats1[22][33] + coeff0_23*dmats1[23][33] + coeff0_24*dmats1[24][33] + coeff0_25*dmats1[25][33] + coeff0_26*dmats1[26][33] + coeff0_27*dmats1[27][33] + coeff0_28*dmats1[28][33] + coeff0_29*dmats1[29][33] + coeff0_30*dmats1[30][33] + coeff0_31*dmats1[31][33] + coeff0_32*dmats1[32][33] + coeff0_33*dmats1[33][33] + coeff0_34*dmats1[34][33];
          new_coeff0_34 = coeff0_0*dmats1[0][34] + coeff0_1*dmats1[1][34] + coeff0_2*dmats1[2][34] + coeff0_3*dmats1[3][34] + coeff0_4*dmats1[4][34] + coeff0_5*dmats1[5][34] + coeff0_6*dmats1[6][34] + coeff0_7*dmats1[7][34] + coeff0_8*dmats1[8][34] + coeff0_9*dmats1[9][34] + coeff0_10*dmats1[10][34] + coeff0_11*dmats1[11][34] + coeff0_12*dmats1[12][34] + coeff0_13*dmats1[13][34] + coeff0_14*dmats1[14][34] + coeff0_15*dmats1[15][34] + coeff0_16*dmats1[16][34] + coeff0_17*dmats1[17][34] + coeff0_18*dmats1[18][34] + coeff0_19*dmats1[19][34] + coeff0_20*dmats1[20][34] + coeff0_21*dmats1[21][34] + coeff0_22*dmats1[22][34] + coeff0_23*dmats1[23][34] + coeff0_24*dmats1[24][34] + coeff0_25*dmats1[25][34] + coeff0_26*dmats1[26][34] + coeff0_27*dmats1[27][34] + coeff0_28*dmats1[28][34] + coeff0_29*dmats1[29][34] + coeff0_30*dmats1[30][34] + coeff0_31*dmats1[31][34] + coeff0_32*dmats1[32][34] + coeff0_33*dmats1[33][34] + coeff0_34*dmats1[34][34];
        }
        if(combinations[deriv_num][j] == 2)
        {
          new_coeff0_0 = coeff0_0*dmats2[0][0] + coeff0_1*dmats2[1][0] + coeff0_2*dmats2[2][0] + coeff0_3*dmats2[3][0] + coeff0_4*dmats2[4][0] + coeff0_5*dmats2[5][0] + coeff0_6*dmats2[6][0] + coeff0_7*dmats2[7][0] + coeff0_8*dmats2[8][0] + coeff0_9*dmats2[9][0] + coeff0_10*dmats2[10][0] + coeff0_11*dmats2[11][0] + coeff0_12*dmats2[12][0] + coeff0_13*dmats2[13][0] + coeff0_14*dmats2[14][0] + coeff0_15*dmats2[15][0] + coeff0_16*dmats2[16][0] + coeff0_17*dmats2[17][0] + coeff0_18*dmats2[18][0] + coeff0_19*dmats2[19][0] + coeff0_20*dmats2[20][0] + coeff0_21*dmats2[21][0] + coeff0_22*dmats2[22][0] + coeff0_23*dmats2[23][0] + coeff0_24*dmats2[24][0] + coeff0_25*dmats2[25][0] + coeff0_26*dmats2[26][0] + coeff0_27*dmats2[27][0] + coeff0_28*dmats2[28][0] + coeff0_29*dmats2[29][0] + coeff0_30*dmats2[30][0] + coeff0_31*dmats2[31][0] + coeff0_32*dmats2[32][0] + coeff0_33*dmats2[33][0] + coeff0_34*dmats2[34][0];
          new_coeff0_1 = coeff0_0*dmats2[0][1] + coeff0_1*dmats2[1][1] + coeff0_2*dmats2[2][1] + coeff0_3*dmats2[3][1] + coeff0_4*dmats2[4][1] + coeff0_5*dmats2[5][1] + coeff0_6*dmats2[6][1] + coeff0_7*dmats2[7][1] + coeff0_8*dmats2[8][1] + coeff0_9*dmats2[9][1] + coeff0_10*dmats2[10][1] + coeff0_11*dmats2[11][1] + coeff0_12*dmats2[12][1] + coeff0_13*dmats2[13][1] + coeff0_14*dmats2[14][1] + coeff0_15*dmats2[15][1] + coeff0_16*dmats2[16][1] + coeff0_17*dmats2[17][1] + coeff0_18*dmats2[18][1] + coeff0_19*dmats2[19][1] + coeff0_20*dmats2[20][1] + coeff0_21*dmats2[21][1] + coeff0_22*dmats2[22][1] + coeff0_23*dmats2[23][1] + coeff0_24*dmats2[24][1] + coeff0_25*dmats2[25][1] + coeff0_26*dmats2[26][1] + coeff0_27*dmats2[27][1] + coeff0_28*dmats2[28][1] + coeff0_29*dmats2[29][1] + coeff0_30*dmats2[30][1] + coeff0_31*dmats2[31][1] + coeff0_32*dmats2[32][1] + coeff0_33*dmats2[33][1] + coeff0_34*dmats2[34][1];
          new_coeff0_2 = coeff0_0*dmats2[0][2] + coeff0_1*dmats2[1][2] + coeff0_2*dmats2[2][2] + coeff0_3*dmats2[3][2] + coeff0_4*dmats2[4][2] + coeff0_5*dmats2[5][2] + coeff0_6*dmats2[6][2] + coeff0_7*dmats2[7][2] + coeff0_8*dmats2[8][2] + coeff0_9*dmats2[9][2] + coeff0_10*dmats2[10][2] + coeff0_11*dmats2[11][2] + coeff0_12*dmats2[12][2] + coeff0_13*dmats2[13][2] + coeff0_14*dmats2[14][2] + coeff0_15*dmats2[15][2] + coeff0_16*dmats2[16][2] + coeff0_17*dmats2[17][2] + coeff0_18*dmats2[18][2] + coeff0_19*dmats2[19][2] + coeff0_20*dmats2[20][2] + coeff0_21*dmats2[21][2] + coeff0_22*dmats2[22][2] + coeff0_23*dmats2[23][2] + coeff0_24*dmats2[24][2] + coeff0_25*dmats2[25][2] + coeff0_26*dmats2[26][2] + coeff0_27*dmats2[27][2] + coeff0_28*dmats2[28][2] + coeff0_29*dmats2[29][2] + coeff0_30*dmats2[30][2] + coeff0_31*dmats2[31][2] + coeff0_32*dmats2[32][2] + coeff0_33*dmats2[33][2] + coeff0_34*dmats2[34][2];
          new_coeff0_3 = coeff0_0*dmats2[0][3] + coeff0_1*dmats2[1][3] + coeff0_2*dmats2[2][3] + coeff0_3*dmats2[3][3] + coeff0_4*dmats2[4][3] + coeff0_5*dmats2[5][3] + coeff0_6*dmats2[6][3] + coeff0_7*dmats2[7][3] + coeff0_8*dmats2[8][3] + coeff0_9*dmats2[9][3] + coeff0_10*dmats2[10][3] + coeff0_11*dmats2[11][3] + coeff0_12*dmats2[12][3] + coeff0_13*dmats2[13][3] + coeff0_14*dmats2[14][3] + coeff0_15*dmats2[15][3] + coeff0_16*dmats2[16][3] + coeff0_17*dmats2[17][3] + coeff0_18*dmats2[18][3] + coeff0_19*dmats2[19][3] + coeff0_20*dmats2[20][3] + coeff0_21*dmats2[21][3] + coeff0_22*dmats2[22][3] + coeff0_23*dmats2[23][3] + coeff0_24*dmats2[24][3] + coeff0_25*dmats2[25][3] + coeff0_26*dmats2[26][3] + coeff0_27*dmats2[27][3] + coeff0_28*dmats2[28][3] + coeff0_29*dmats2[29][3] + coeff0_30*dmats2[30][3] + coeff0_31*dmats2[31][3] + coeff0_32*dmats2[32][3] + coeff0_33*dmats2[33][3] + coeff0_34*dmats2[34][3];
          new_coeff0_4 = coeff0_0*dmats2[0][4] + coeff0_1*dmats2[1][4] + coeff0_2*dmats2[2][4] + coeff0_3*dmats2[3][4] + coeff0_4*dmats2[4][4] + coeff0_5*dmats2[5][4] + coeff0_6*dmats2[6][4] + coeff0_7*dmats2[7][4] + coeff0_8*dmats2[8][4] + coeff0_9*dmats2[9][4] + coeff0_10*dmats2[10][4] + coeff0_11*dmats2[11][4] + coeff0_12*dmats2[12][4] + coeff0_13*dmats2[13][4] + coeff0_14*dmats2[14][4] + coeff0_15*dmats2[15][4] + coeff0_16*dmats2[16][4] + coeff0_17*dmats2[17][4] + coeff0_18*dmats2[18][4] + coeff0_19*dmats2[19][4] + coeff0_20*dmats2[20][4] + coeff0_21*dmats2[21][4] + coeff0_22*dmats2[22][4] + coeff0_23*dmats2[23][4] + coeff0_24*dmats2[24][4] + coeff0_25*dmats2[25][4] + coeff0_26*dmats2[26][4] + coeff0_27*dmats2[27][4] + coeff0_28*dmats2[28][4] + coeff0_29*dmats2[29][4] + coeff0_30*dmats2[30][4] + coeff0_31*dmats2[31][4] + coeff0_32*dmats2[32][4] + coeff0_33*dmats2[33][4] + coeff0_34*dmats2[34][4];
          new_coeff0_5 = coeff0_0*dmats2[0][5] + coeff0_1*dmats2[1][5] + coeff0_2*dmats2[2][5] + coeff0_3*dmats2[3][5] + coeff0_4*dmats2[4][5] + coeff0_5*dmats2[5][5] + coeff0_6*dmats2[6][5] + coeff0_7*dmats2[7][5] + coeff0_8*dmats2[8][5] + coeff0_9*dmats2[9][5] + coeff0_10*dmats2[10][5] + coeff0_11*dmats2[11][5] + coeff0_12*dmats2[12][5] + coeff0_13*dmats2[13][5] + coeff0_14*dmats2[14][5] + coeff0_15*dmats2[15][5] + coeff0_16*dmats2[16][5] + coeff0_17*dmats2[17][5] + coeff0_18*dmats2[18][5] + coeff0_19*dmats2[19][5] + coeff0_20*dmats2[20][5] + coeff0_21*dmats2[21][5] + coeff0_22*dmats2[22][5] + coeff0_23*dmats2[23][5] + coeff0_24*dmats2[24][5] + coeff0_25*dmats2[25][5] + coeff0_26*dmats2[26][5] + coeff0_27*dmats2[27][5] + coeff0_28*dmats2[28][5] + coeff0_29*dmats2[29][5] + coeff0_30*dmats2[30][5] + coeff0_31*dmats2[31][5] + coeff0_32*dmats2[32][5] + coeff0_33*dmats2[33][5] + coeff0_34*dmats2[34][5];
          new_coeff0_6 = coeff0_0*dmats2[0][6] + coeff0_1*dmats2[1][6] + coeff0_2*dmats2[2][6] + coeff0_3*dmats2[3][6] + coeff0_4*dmats2[4][6] + coeff0_5*dmats2[5][6] + coeff0_6*dmats2[6][6] + coeff0_7*dmats2[7][6] + coeff0_8*dmats2[8][6] + coeff0_9*dmats2[9][6] + coeff0_10*dmats2[10][6] + coeff0_11*dmats2[11][6] + coeff0_12*dmats2[12][6] + coeff0_13*dmats2[13][6] + coeff0_14*dmats2[14][6] + coeff0_15*dmats2[15][6] + coeff0_16*dmats2[16][6] + coeff0_17*dmats2[17][6] + coeff0_18*dmats2[18][6] + coeff0_19*dmats2[19][6] + coeff0_20*dmats2[20][6] + coeff0_21*dmats2[21][6] + coeff0_22*dmats2[22][6] + coeff0_23*dmats2[23][6] + coeff0_24*dmats2[24][6] + coeff0_25*dmats2[25][6] + coeff0_26*dmats2[26][6] + coeff0_27*dmats2[27][6] + coeff0_28*dmats2[28][6] + coeff0_29*dmats2[29][6] + coeff0_30*dmats2[30][6] + coeff0_31*dmats2[31][6] + coeff0_32*dmats2[32][6] + coeff0_33*dmats2[33][6] + coeff0_34*dmats2[34][6];
          new_coeff0_7 = coeff0_0*dmats2[0][7] + coeff0_1*dmats2[1][7] + coeff0_2*dmats2[2][7] + coeff0_3*dmats2[3][7] + coeff0_4*dmats2[4][7] + coeff0_5*dmats2[5][7] + coeff0_6*dmats2[6][7] + coeff0_7*dmats2[7][7] + coeff0_8*dmats2[8][7] + coeff0_9*dmats2[9][7] + coeff0_10*dmats2[10][7] + coeff0_11*dmats2[11][7] + coeff0_12*dmats2[12][7] + coeff0_13*dmats2[13][7] + coeff0_14*dmats2[14][7] + coeff0_15*dmats2[15][7] + coeff0_16*dmats2[16][7] + coeff0_17*dmats2[17][7] + coeff0_18*dmats2[18][7] + coeff0_19*dmats2[19][7] + coeff0_20*dmats2[20][7] + coeff0_21*dmats2[21][7] + coeff0_22*dmats2[22][7] + coeff0_23*dmats2[23][7] + coeff0_24*dmats2[24][7] + coeff0_25*dmats2[25][7] + coeff0_26*dmats2[26][7] + coeff0_27*dmats2[27][7] + coeff0_28*dmats2[28][7] + coeff0_29*dmats2[29][7] + coeff0_30*dmats2[30][7] + coeff0_31*dmats2[31][7] + coeff0_32*dmats2[32][7] + coeff0_33*dmats2[33][7] + coeff0_34*dmats2[34][7];
          new_coeff0_8 = coeff0_0*dmats2[0][8] + coeff0_1*dmats2[1][8] + coeff0_2*dmats2[2][8] + coeff0_3*dmats2[3][8] + coeff0_4*dmats2[4][8] + coeff0_5*dmats2[5][8] + coeff0_6*dmats2[6][8] + coeff0_7*dmats2[7][8] + coeff0_8*dmats2[8][8] + coeff0_9*dmats2[9][8] + coeff0_10*dmats2[10][8] + coeff0_11*dmats2[11][8] + coeff0_12*dmats2[12][8] + coeff0_13*dmats2[13][8] + coeff0_14*dmats2[14][8] + coeff0_15*dmats2[15][8] + coeff0_16*dmats2[16][8] + coeff0_17*dmats2[17][8] + coeff0_18*dmats2[18][8] + coeff0_19*dmats2[19][8] + coeff0_20*dmats2[20][8] + coeff0_21*dmats2[21][8] + coeff0_22*dmats2[22][8] + coeff0_23*dmats2[23][8] + coeff0_24*dmats2[24][8] + coeff0_25*dmats2[25][8] + coeff0_26*dmats2[26][8] + coeff0_27*dmats2[27][8] + coeff0_28*dmats2[28][8] + coeff0_29*dmats2[29][8] + coeff0_30*dmats2[30][8] + coeff0_31*dmats2[31][8] + coeff0_32*dmats2[32][8] + coeff0_33*dmats2[33][8] + coeff0_34*dmats2[34][8];
          new_coeff0_9 = coeff0_0*dmats2[0][9] + coeff0_1*dmats2[1][9] + coeff0_2*dmats2[2][9] + coeff0_3*dmats2[3][9] + coeff0_4*dmats2[4][9] + coeff0_5*dmats2[5][9] + coeff0_6*dmats2[6][9] + coeff0_7*dmats2[7][9] + coeff0_8*dmats2[8][9] + coeff0_9*dmats2[9][9] + coeff0_10*dmats2[10][9] + coeff0_11*dmats2[11][9] + coeff0_12*dmats2[12][9] + coeff0_13*dmats2[13][9] + coeff0_14*dmats2[14][9] + coeff0_15*dmats2[15][9] + coeff0_16*dmats2[16][9] + coeff0_17*dmats2[17][9] + coeff0_18*dmats2[18][9] + coeff0_19*dmats2[19][9] + coeff0_20*dmats2[20][9] + coeff0_21*dmats2[21][9] + coeff0_22*dmats2[22][9] + coeff0_23*dmats2[23][9] + coeff0_24*dmats2[24][9] + coeff0_25*dmats2[25][9] + coeff0_26*dmats2[26][9] + coeff0_27*dmats2[27][9] + coeff0_28*dmats2[28][9] + coeff0_29*dmats2[29][9] + coeff0_30*dmats2[30][9] + coeff0_31*dmats2[31][9] + coeff0_32*dmats2[32][9] + coeff0_33*dmats2[33][9] + coeff0_34*dmats2[34][9];
          new_coeff0_10 = coeff0_0*dmats2[0][10] + coeff0_1*dmats2[1][10] + coeff0_2*dmats2[2][10] + coeff0_3*dmats2[3][10] + coeff0_4*dmats2[4][10] + coeff0_5*dmats2[5][10] + coeff0_6*dmats2[6][10] + coeff0_7*dmats2[7][10] + coeff0_8*dmats2[8][10] + coeff0_9*dmats2[9][10] + coeff0_10*dmats2[10][10] + coeff0_11*dmats2[11][10] + coeff0_12*dmats2[12][10] + coeff0_13*dmats2[13][10] + coeff0_14*dmats2[14][10] + coeff0_15*dmats2[15][10] + coeff0_16*dmats2[16][10] + coeff0_17*dmats2[17][10] + coeff0_18*dmats2[18][10] + coeff0_19*dmats2[19][10] + coeff0_20*dmats2[20][10] + coeff0_21*dmats2[21][10] + coeff0_22*dmats2[22][10] + coeff0_23*dmats2[23][10] + coeff0_24*dmats2[24][10] + coeff0_25*dmats2[25][10] + coeff0_26*dmats2[26][10] + coeff0_27*dmats2[27][10] + coeff0_28*dmats2[28][10] + coeff0_29*dmats2[29][10] + coeff0_30*dmats2[30][10] + coeff0_31*dmats2[31][10] + coeff0_32*dmats2[32][10] + coeff0_33*dmats2[33][10] + coeff0_34*dmats2[34][10];
          new_coeff0_11 = coeff0_0*dmats2[0][11] + coeff0_1*dmats2[1][11] + coeff0_2*dmats2[2][11] + coeff0_3*dmats2[3][11] + coeff0_4*dmats2[4][11] + coeff0_5*dmats2[5][11] + coeff0_6*dmats2[6][11] + coeff0_7*dmats2[7][11] + coeff0_8*dmats2[8][11] + coeff0_9*dmats2[9][11] + coeff0_10*dmats2[10][11] + coeff0_11*dmats2[11][11] + coeff0_12*dmats2[12][11] + coeff0_13*dmats2[13][11] + coeff0_14*dmats2[14][11] + coeff0_15*dmats2[15][11] + coeff0_16*dmats2[16][11] + coeff0_17*dmats2[17][11] + coeff0_18*dmats2[18][11] + coeff0_19*dmats2[19][11] + coeff0_20*dmats2[20][11] + coeff0_21*dmats2[21][11] + coeff0_22*dmats2[22][11] + coeff0_23*dmats2[23][11] + coeff0_24*dmats2[24][11] + coeff0_25*dmats2[25][11] + coeff0_26*dmats2[26][11] + coeff0_27*dmats2[27][11] + coeff0_28*dmats2[28][11] + coeff0_29*dmats2[29][11] + coeff0_30*dmats2[30][11] + coeff0_31*dmats2[31][11] + coeff0_32*dmats2[32][11] + coeff0_33*dmats2[33][11] + coeff0_34*dmats2[34][11];
          new_coeff0_12 = coeff0_0*dmats2[0][12] + coeff0_1*dmats2[1][12] + coeff0_2*dmats2[2][12] + coeff0_3*dmats2[3][12] + coeff0_4*dmats2[4][12] + coeff0_5*dmats2[5][12] + coeff0_6*dmats2[6][12] + coeff0_7*dmats2[7][12] + coeff0_8*dmats2[8][12] + coeff0_9*dmats2[9][12] + coeff0_10*dmats2[10][12] + coeff0_11*dmats2[11][12] + coeff0_12*dmats2[12][12] + coeff0_13*dmats2[13][12] + coeff0_14*dmats2[14][12] + coeff0_15*dmats2[15][12] + coeff0_16*dmats2[16][12] + coeff0_17*dmats2[17][12] + coeff0_18*dmats2[18][12] + coeff0_19*dmats2[19][12] + coeff0_20*dmats2[20][12] + coeff0_21*dmats2[21][12] + coeff0_22*dmats2[22][12] + coeff0_23*dmats2[23][12] + coeff0_24*dmats2[24][12] + coeff0_25*dmats2[25][12] + coeff0_26*dmats2[26][12] + coeff0_27*dmats2[27][12] + coeff0_28*dmats2[28][12] + coeff0_29*dmats2[29][12] + coeff0_30*dmats2[30][12] + coeff0_31*dmats2[31][12] + coeff0_32*dmats2[32][12] + coeff0_33*dmats2[33][12] + coeff0_34*dmats2[34][12];
          new_coeff0_13 = coeff0_0*dmats2[0][13] + coeff0_1*dmats2[1][13] + coeff0_2*dmats2[2][13] + coeff0_3*dmats2[3][13] + coeff0_4*dmats2[4][13] + coeff0_5*dmats2[5][13] + coeff0_6*dmats2[6][13] + coeff0_7*dmats2[7][13] + coeff0_8*dmats2[8][13] + coeff0_9*dmats2[9][13] + coeff0_10*dmats2[10][13] + coeff0_11*dmats2[11][13] + coeff0_12*dmats2[12][13] + coeff0_13*dmats2[13][13] + coeff0_14*dmats2[14][13] + coeff0_15*dmats2[15][13] + coeff0_16*dmats2[16][13] + coeff0_17*dmats2[17][13] + coeff0_18*dmats2[18][13] + coeff0_19*dmats2[19][13] + coeff0_20*dmats2[20][13] + coeff0_21*dmats2[21][13] + coeff0_22*dmats2[22][13] + coeff0_23*dmats2[23][13] + coeff0_24*dmats2[24][13] + coeff0_25*dmats2[25][13] + coeff0_26*dmats2[26][13] + coeff0_27*dmats2[27][13] + coeff0_28*dmats2[28][13] + coeff0_29*dmats2[29][13] + coeff0_30*dmats2[30][13] + coeff0_31*dmats2[31][13] + coeff0_32*dmats2[32][13] + coeff0_33*dmats2[33][13] + coeff0_34*dmats2[34][13];
          new_coeff0_14 = coeff0_0*dmats2[0][14] + coeff0_1*dmats2[1][14] + coeff0_2*dmats2[2][14] + coeff0_3*dmats2[3][14] + coeff0_4*dmats2[4][14] + coeff0_5*dmats2[5][14] + coeff0_6*dmats2[6][14] + coeff0_7*dmats2[7][14] + coeff0_8*dmats2[8][14] + coeff0_9*dmats2[9][14] + coeff0_10*dmats2[10][14] + coeff0_11*dmats2[11][14] + coeff0_12*dmats2[12][14] + coeff0_13*dmats2[13][14] + coeff0_14*dmats2[14][14] + coeff0_15*dmats2[15][14] + coeff0_16*dmats2[16][14] + coeff0_17*dmats2[17][14] + coeff0_18*dmats2[18][14] + coeff0_19*dmats2[19][14] + coeff0_20*dmats2[20][14] + coeff0_21*dmats2[21][14] + coeff0_22*dmats2[22][14] + coeff0_23*dmats2[23][14] + coeff0_24*dmats2[24][14] + coeff0_25*dmats2[25][14] + coeff0_26*dmats2[26][14] + coeff0_27*dmats2[27][14] + coeff0_28*dmats2[28][14] + coeff0_29*dmats2[29][14] + coeff0_30*dmats2[30][14] + coeff0_31*dmats2[31][14] + coeff0_32*dmats2[32][14] + coeff0_33*dmats2[33][14] + coeff0_34*dmats2[34][14];
          new_coeff0_15 = coeff0_0*dmats2[0][15] + coeff0_1*dmats2[1][15] + coeff0_2*dmats2[2][15] + coeff0_3*dmats2[3][15] + coeff0_4*dmats2[4][15] + coeff0_5*dmats2[5][15] + coeff0_6*dmats2[6][15] + coeff0_7*dmats2[7][15] + coeff0_8*dmats2[8][15] + coeff0_9*dmats2[9][15] + coeff0_10*dmats2[10][15] + coeff0_11*dmats2[11][15] + coeff0_12*dmats2[12][15] + coeff0_13*dmats2[13][15] + coeff0_14*dmats2[14][15] + coeff0_15*dmats2[15][15] + coeff0_16*dmats2[16][15] + coeff0_17*dmats2[17][15] + coeff0_18*dmats2[18][15] + coeff0_19*dmats2[19][15] + coeff0_20*dmats2[20][15] + coeff0_21*dmats2[21][15] + coeff0_22*dmats2[22][15] + coeff0_23*dmats2[23][15] + coeff0_24*dmats2[24][15] + coeff0_25*dmats2[25][15] + coeff0_26*dmats2[26][15] + coeff0_27*dmats2[27][15] + coeff0_28*dmats2[28][15] + coeff0_29*dmats2[29][15] + coeff0_30*dmats2[30][15] + coeff0_31*dmats2[31][15] + coeff0_32*dmats2[32][15] + coeff0_33*dmats2[33][15] + coeff0_34*dmats2[34][15];
          new_coeff0_16 = coeff0_0*dmats2[0][16] + coeff0_1*dmats2[1][16] + coeff0_2*dmats2[2][16] + coeff0_3*dmats2[3][16] + coeff0_4*dmats2[4][16] + coeff0_5*dmats2[5][16] + coeff0_6*dmats2[6][16] + coeff0_7*dmats2[7][16] + coeff0_8*dmats2[8][16] + coeff0_9*dmats2[9][16] + coeff0_10*dmats2[10][16] + coeff0_11*dmats2[11][16] + coeff0_12*dmats2[12][16] + coeff0_13*dmats2[13][16] + coeff0_14*dmats2[14][16] + coeff0_15*dmats2[15][16] + coeff0_16*dmats2[16][16] + coeff0_17*dmats2[17][16] + coeff0_18*dmats2[18][16] + coeff0_19*dmats2[19][16] + coeff0_20*dmats2[20][16] + coeff0_21*dmats2[21][16] + coeff0_22*dmats2[22][16] + coeff0_23*dmats2[23][16] + coeff0_24*dmats2[24][16] + coeff0_25*dmats2[25][16] + coeff0_26*dmats2[26][16] + coeff0_27*dmats2[27][16] + coeff0_28*dmats2[28][16] + coeff0_29*dmats2[29][16] + coeff0_30*dmats2[30][16] + coeff0_31*dmats2[31][16] + coeff0_32*dmats2[32][16] + coeff0_33*dmats2[33][16] + coeff0_34*dmats2[34][16];
          new_coeff0_17 = coeff0_0*dmats2[0][17] + coeff0_1*dmats2[1][17] + coeff0_2*dmats2[2][17] + coeff0_3*dmats2[3][17] + coeff0_4*dmats2[4][17] + coeff0_5*dmats2[5][17] + coeff0_6*dmats2[6][17] + coeff0_7*dmats2[7][17] + coeff0_8*dmats2[8][17] + coeff0_9*dmats2[9][17] + coeff0_10*dmats2[10][17] + coeff0_11*dmats2[11][17] + coeff0_12*dmats2[12][17] + coeff0_13*dmats2[13][17] + coeff0_14*dmats2[14][17] + coeff0_15*dmats2[15][17] + coeff0_16*dmats2[16][17] + coeff0_17*dmats2[17][17] + coeff0_18*dmats2[18][17] + coeff0_19*dmats2[19][17] + coeff0_20*dmats2[20][17] + coeff0_21*dmats2[21][17] + coeff0_22*dmats2[22][17] + coeff0_23*dmats2[23][17] + coeff0_24*dmats2[24][17] + coeff0_25*dmats2[25][17] + coeff0_26*dmats2[26][17] + coeff0_27*dmats2[27][17] + coeff0_28*dmats2[28][17] + coeff0_29*dmats2[29][17] + coeff0_30*dmats2[30][17] + coeff0_31*dmats2[31][17] + coeff0_32*dmats2[32][17] + coeff0_33*dmats2[33][17] + coeff0_34*dmats2[34][17];
          new_coeff0_18 = coeff0_0*dmats2[0][18] + coeff0_1*dmats2[1][18] + coeff0_2*dmats2[2][18] + coeff0_3*dmats2[3][18] + coeff0_4*dmats2[4][18] + coeff0_5*dmats2[5][18] + coeff0_6*dmats2[6][18] + coeff0_7*dmats2[7][18] + coeff0_8*dmats2[8][18] + coeff0_9*dmats2[9][18] + coeff0_10*dmats2[10][18] + coeff0_11*dmats2[11][18] + coeff0_12*dmats2[12][18] + coeff0_13*dmats2[13][18] + coeff0_14*dmats2[14][18] + coeff0_15*dmats2[15][18] + coeff0_16*dmats2[16][18] + coeff0_17*dmats2[17][18] + coeff0_18*dmats2[18][18] + coeff0_19*dmats2[19][18] + coeff0_20*dmats2[20][18] + coeff0_21*dmats2[21][18] + coeff0_22*dmats2[22][18] + coeff0_23*dmats2[23][18] + coeff0_24*dmats2[24][18] + coeff0_25*dmats2[25][18] + coeff0_26*dmats2[26][18] + coeff0_27*dmats2[27][18] + coeff0_28*dmats2[28][18] + coeff0_29*dmats2[29][18] + coeff0_30*dmats2[30][18] + coeff0_31*dmats2[31][18] + coeff0_32*dmats2[32][18] + coeff0_33*dmats2[33][18] + coeff0_34*dmats2[34][18];
          new_coeff0_19 = coeff0_0*dmats2[0][19] + coeff0_1*dmats2[1][19] + coeff0_2*dmats2[2][19] + coeff0_3*dmats2[3][19] + coeff0_4*dmats2[4][19] + coeff0_5*dmats2[5][19] + coeff0_6*dmats2[6][19] + coeff0_7*dmats2[7][19] + coeff0_8*dmats2[8][19] + coeff0_9*dmats2[9][19] + coeff0_10*dmats2[10][19] + coeff0_11*dmats2[11][19] + coeff0_12*dmats2[12][19] + coeff0_13*dmats2[13][19] + coeff0_14*dmats2[14][19] + coeff0_15*dmats2[15][19] + coeff0_16*dmats2[16][19] + coeff0_17*dmats2[17][19] + coeff0_18*dmats2[18][19] + coeff0_19*dmats2[19][19] + coeff0_20*dmats2[20][19] + coeff0_21*dmats2[21][19] + coeff0_22*dmats2[22][19] + coeff0_23*dmats2[23][19] + coeff0_24*dmats2[24][19] + coeff0_25*dmats2[25][19] + coeff0_26*dmats2[26][19] + coeff0_27*dmats2[27][19] + coeff0_28*dmats2[28][19] + coeff0_29*dmats2[29][19] + coeff0_30*dmats2[30][19] + coeff0_31*dmats2[31][19] + coeff0_32*dmats2[32][19] + coeff0_33*dmats2[33][19] + coeff0_34*dmats2[34][19];
          new_coeff0_20 = coeff0_0*dmats2[0][20] + coeff0_1*dmats2[1][20] + coeff0_2*dmats2[2][20] + coeff0_3*dmats2[3][20] + coeff0_4*dmats2[4][20] + coeff0_5*dmats2[5][20] + coeff0_6*dmats2[6][20] + coeff0_7*dmats2[7][20] + coeff0_8*dmats2[8][20] + coeff0_9*dmats2[9][20] + coeff0_10*dmats2[10][20] + coeff0_11*dmats2[11][20] + coeff0_12*dmats2[12][20] + coeff0_13*dmats2[13][20] + coeff0_14*dmats2[14][20] + coeff0_15*dmats2[15][20] + coeff0_16*dmats2[16][20] + coeff0_17*dmats2[17][20] + coeff0_18*dmats2[18][20] + coeff0_19*dmats2[19][20] + coeff0_20*dmats2[20][20] + coeff0_21*dmats2[21][20] + coeff0_22*dmats2[22][20] + coeff0_23*dmats2[23][20] + coeff0_24*dmats2[24][20] + coeff0_25*dmats2[25][20] + coeff0_26*dmats2[26][20] + coeff0_27*dmats2[27][20] + coeff0_28*dmats2[28][20] + coeff0_29*dmats2[29][20] + coeff0_30*dmats2[30][20] + coeff0_31*dmats2[31][20] + coeff0_32*dmats2[32][20] + coeff0_33*dmats2[33][20] + coeff0_34*dmats2[34][20];
          new_coeff0_21 = coeff0_0*dmats2[0][21] + coeff0_1*dmats2[1][21] + coeff0_2*dmats2[2][21] + coeff0_3*dmats2[3][21] + coeff0_4*dmats2[4][21] + coeff0_5*dmats2[5][21] + coeff0_6*dmats2[6][21] + coeff0_7*dmats2[7][21] + coeff0_8*dmats2[8][21] + coeff0_9*dmats2[9][21] + coeff0_10*dmats2[10][21] + coeff0_11*dmats2[11][21] + coeff0_12*dmats2[12][21] + coeff0_13*dmats2[13][21] + coeff0_14*dmats2[14][21] + coeff0_15*dmats2[15][21] + coeff0_16*dmats2[16][21] + coeff0_17*dmats2[17][21] + coeff0_18*dmats2[18][21] + coeff0_19*dmats2[19][21] + coeff0_20*dmats2[20][21] + coeff0_21*dmats2[21][21] + coeff0_22*dmats2[22][21] + coeff0_23*dmats2[23][21] + coeff0_24*dmats2[24][21] + coeff0_25*dmats2[25][21] + coeff0_26*dmats2[26][21] + coeff0_27*dmats2[27][21] + coeff0_28*dmats2[28][21] + coeff0_29*dmats2[29][21] + coeff0_30*dmats2[30][21] + coeff0_31*dmats2[31][21] + coeff0_32*dmats2[32][21] + coeff0_33*dmats2[33][21] + coeff0_34*dmats2[34][21];
          new_coeff0_22 = coeff0_0*dmats2[0][22] + coeff0_1*dmats2[1][22] + coeff0_2*dmats2[2][22] + coeff0_3*dmats2[3][22] + coeff0_4*dmats2[4][22] + coeff0_5*dmats2[5][22] + coeff0_6*dmats2[6][22] + coeff0_7*dmats2[7][22] + coeff0_8*dmats2[8][22] + coeff0_9*dmats2[9][22] + coeff0_10*dmats2[10][22] + coeff0_11*dmats2[11][22] + coeff0_12*dmats2[12][22] + coeff0_13*dmats2[13][22] + coeff0_14*dmats2[14][22] + coeff0_15*dmats2[15][22] + coeff0_16*dmats2[16][22] + coeff0_17*dmats2[17][22] + coeff0_18*dmats2[18][22] + coeff0_19*dmats2[19][22] + coeff0_20*dmats2[20][22] + coeff0_21*dmats2[21][22] + coeff0_22*dmats2[22][22] + coeff0_23*dmats2[23][22] + coeff0_24*dmats2[24][22] + coeff0_25*dmats2[25][22] + coeff0_26*dmats2[26][22] + coeff0_27*dmats2[27][22] + coeff0_28*dmats2[28][22] + coeff0_29*dmats2[29][22] + coeff0_30*dmats2[30][22] + coeff0_31*dmats2[31][22] + coeff0_32*dmats2[32][22] + coeff0_33*dmats2[33][22] + coeff0_34*dmats2[34][22];
          new_coeff0_23 = coeff0_0*dmats2[0][23] + coeff0_1*dmats2[1][23] + coeff0_2*dmats2[2][23] + coeff0_3*dmats2[3][23] + coeff0_4*dmats2[4][23] + coeff0_5*dmats2[5][23] + coeff0_6*dmats2[6][23] + coeff0_7*dmats2[7][23] + coeff0_8*dmats2[8][23] + coeff0_9*dmats2[9][23] + coeff0_10*dmats2[10][23] + coeff0_11*dmats2[11][23] + coeff0_12*dmats2[12][23] + coeff0_13*dmats2[13][23] + coeff0_14*dmats2[14][23] + coeff0_15*dmats2[15][23] + coeff0_16*dmats2[16][23] + coeff0_17*dmats2[17][23] + coeff0_18*dmats2[18][23] + coeff0_19*dmats2[19][23] + coeff0_20*dmats2[20][23] + coeff0_21*dmats2[21][23] + coeff0_22*dmats2[22][23] + coeff0_23*dmats2[23][23] + coeff0_24*dmats2[24][23] + coeff0_25*dmats2[25][23] + coeff0_26*dmats2[26][23] + coeff0_27*dmats2[27][23] + coeff0_28*dmats2[28][23] + coeff0_29*dmats2[29][23] + coeff0_30*dmats2[30][23] + coeff0_31*dmats2[31][23] + coeff0_32*dmats2[32][23] + coeff0_33*dmats2[33][23] + coeff0_34*dmats2[34][23];
          new_coeff0_24 = coeff0_0*dmats2[0][24] + coeff0_1*dmats2[1][24] + coeff0_2*dmats2[2][24] + coeff0_3*dmats2[3][24] + coeff0_4*dmats2[4][24] + coeff0_5*dmats2[5][24] + coeff0_6*dmats2[6][24] + coeff0_7*dmats2[7][24] + coeff0_8*dmats2[8][24] + coeff0_9*dmats2[9][24] + coeff0_10*dmats2[10][24] + coeff0_11*dmats2[11][24] + coeff0_12*dmats2[12][24] + coeff0_13*dmats2[13][24] + coeff0_14*dmats2[14][24] + coeff0_15*dmats2[15][24] + coeff0_16*dmats2[16][24] + coeff0_17*dmats2[17][24] + coeff0_18*dmats2[18][24] + coeff0_19*dmats2[19][24] + coeff0_20*dmats2[20][24] + coeff0_21*dmats2[21][24] + coeff0_22*dmats2[22][24] + coeff0_23*dmats2[23][24] + coeff0_24*dmats2[24][24] + coeff0_25*dmats2[25][24] + coeff0_26*dmats2[26][24] + coeff0_27*dmats2[27][24] + coeff0_28*dmats2[28][24] + coeff0_29*dmats2[29][24] + coeff0_30*dmats2[30][24] + coeff0_31*dmats2[31][24] + coeff0_32*dmats2[32][24] + coeff0_33*dmats2[33][24] + coeff0_34*dmats2[34][24];
          new_coeff0_25 = coeff0_0*dmats2[0][25] + coeff0_1*dmats2[1][25] + coeff0_2*dmats2[2][25] + coeff0_3*dmats2[3][25] + coeff0_4*dmats2[4][25] + coeff0_5*dmats2[5][25] + coeff0_6*dmats2[6][25] + coeff0_7*dmats2[7][25] + coeff0_8*dmats2[8][25] + coeff0_9*dmats2[9][25] + coeff0_10*dmats2[10][25] + coeff0_11*dmats2[11][25] + coeff0_12*dmats2[12][25] + coeff0_13*dmats2[13][25] + coeff0_14*dmats2[14][25] + coeff0_15*dmats2[15][25] + coeff0_16*dmats2[16][25] + coeff0_17*dmats2[17][25] + coeff0_18*dmats2[18][25] + coeff0_19*dmats2[19][25] + coeff0_20*dmats2[20][25] + coeff0_21*dmats2[21][25] + coeff0_22*dmats2[22][25] + coeff0_23*dmats2[23][25] + coeff0_24*dmats2[24][25] + coeff0_25*dmats2[25][25] + coeff0_26*dmats2[26][25] + coeff0_27*dmats2[27][25] + coeff0_28*dmats2[28][25] + coeff0_29*dmats2[29][25] + coeff0_30*dmats2[30][25] + coeff0_31*dmats2[31][25] + coeff0_32*dmats2[32][25] + coeff0_33*dmats2[33][25] + coeff0_34*dmats2[34][25];
          new_coeff0_26 = coeff0_0*dmats2[0][26] + coeff0_1*dmats2[1][26] + coeff0_2*dmats2[2][26] + coeff0_3*dmats2[3][26] + coeff0_4*dmats2[4][26] + coeff0_5*dmats2[5][26] + coeff0_6*dmats2[6][26] + coeff0_7*dmats2[7][26] + coeff0_8*dmats2[8][26] + coeff0_9*dmats2[9][26] + coeff0_10*dmats2[10][26] + coeff0_11*dmats2[11][26] + coeff0_12*dmats2[12][26] + coeff0_13*dmats2[13][26] + coeff0_14*dmats2[14][26] + coeff0_15*dmats2[15][26] + coeff0_16*dmats2[16][26] + coeff0_17*dmats2[17][26] + coeff0_18*dmats2[18][26] + coeff0_19*dmats2[19][26] + coeff0_20*dmats2[20][26] + coeff0_21*dmats2[21][26] + coeff0_22*dmats2[22][26] + coeff0_23*dmats2[23][26] + coeff0_24*dmats2[24][26] + coeff0_25*dmats2[25][26] + coeff0_26*dmats2[26][26] + coeff0_27*dmats2[27][26] + coeff0_28*dmats2[28][26] + coeff0_29*dmats2[29][26] + coeff0_30*dmats2[30][26] + coeff0_31*dmats2[31][26] + coeff0_32*dmats2[32][26] + coeff0_33*dmats2[33][26] + coeff0_34*dmats2[34][26];
          new_coeff0_27 = coeff0_0*dmats2[0][27] + coeff0_1*dmats2[1][27] + coeff0_2*dmats2[2][27] + coeff0_3*dmats2[3][27] + coeff0_4*dmats2[4][27] + coeff0_5*dmats2[5][27] + coeff0_6*dmats2[6][27] + coeff0_7*dmats2[7][27] + coeff0_8*dmats2[8][27] + coeff0_9*dmats2[9][27] + coeff0_10*dmats2[10][27] + coeff0_11*dmats2[11][27] + coeff0_12*dmats2[12][27] + coeff0_13*dmats2[13][27] + coeff0_14*dmats2[14][27] + coeff0_15*dmats2[15][27] + coeff0_16*dmats2[16][27] + coeff0_17*dmats2[17][27] + coeff0_18*dmats2[18][27] + coeff0_19*dmats2[19][27] + coeff0_20*dmats2[20][27] + coeff0_21*dmats2[21][27] + coeff0_22*dmats2[22][27] + coeff0_23*dmats2[23][27] + coeff0_24*dmats2[24][27] + coeff0_25*dmats2[25][27] + coeff0_26*dmats2[26][27] + coeff0_27*dmats2[27][27] + coeff0_28*dmats2[28][27] + coeff0_29*dmats2[29][27] + coeff0_30*dmats2[30][27] + coeff0_31*dmats2[31][27] + coeff0_32*dmats2[32][27] + coeff0_33*dmats2[33][27] + coeff0_34*dmats2[34][27];
          new_coeff0_28 = coeff0_0*dmats2[0][28] + coeff0_1*dmats2[1][28] + coeff0_2*dmats2[2][28] + coeff0_3*dmats2[3][28] + coeff0_4*dmats2[4][28] + coeff0_5*dmats2[5][28] + coeff0_6*dmats2[6][28] + coeff0_7*dmats2[7][28] + coeff0_8*dmats2[8][28] + coeff0_9*dmats2[9][28] + coeff0_10*dmats2[10][28] + coeff0_11*dmats2[11][28] + coeff0_12*dmats2[12][28] + coeff0_13*dmats2[13][28] + coeff0_14*dmats2[14][28] + coeff0_15*dmats2[15][28] + coeff0_16*dmats2[16][28] + coeff0_17*dmats2[17][28] + coeff0_18*dmats2[18][28] + coeff0_19*dmats2[19][28] + coeff0_20*dmats2[20][28] + coeff0_21*dmats2[21][28] + coeff0_22*dmats2[22][28] + coeff0_23*dmats2[23][28] + coeff0_24*dmats2[24][28] + coeff0_25*dmats2[25][28] + coeff0_26*dmats2[26][28] + coeff0_27*dmats2[27][28] + coeff0_28*dmats2[28][28] + coeff0_29*dmats2[29][28] + coeff0_30*dmats2[30][28] + coeff0_31*dmats2[31][28] + coeff0_32*dmats2[32][28] + coeff0_33*dmats2[33][28] + coeff0_34*dmats2[34][28];
          new_coeff0_29 = coeff0_0*dmats2[0][29] + coeff0_1*dmats2[1][29] + coeff0_2*dmats2[2][29] + coeff0_3*dmats2[3][29] + coeff0_4*dmats2[4][29] + coeff0_5*dmats2[5][29] + coeff0_6*dmats2[6][29] + coeff0_7*dmats2[7][29] + coeff0_8*dmats2[8][29] + coeff0_9*dmats2[9][29] + coeff0_10*dmats2[10][29] + coeff0_11*dmats2[11][29] + coeff0_12*dmats2[12][29] + coeff0_13*dmats2[13][29] + coeff0_14*dmats2[14][29] + coeff0_15*dmats2[15][29] + coeff0_16*dmats2[16][29] + coeff0_17*dmats2[17][29] + coeff0_18*dmats2[18][29] + coeff0_19*dmats2[19][29] + coeff0_20*dmats2[20][29] + coeff0_21*dmats2[21][29] + coeff0_22*dmats2[22][29] + coeff0_23*dmats2[23][29] + coeff0_24*dmats2[24][29] + coeff0_25*dmats2[25][29] + coeff0_26*dmats2[26][29] + coeff0_27*dmats2[27][29] + coeff0_28*dmats2[28][29] + coeff0_29*dmats2[29][29] + coeff0_30*dmats2[30][29] + coeff0_31*dmats2[31][29] + coeff0_32*dmats2[32][29] + coeff0_33*dmats2[33][29] + coeff0_34*dmats2[34][29];
          new_coeff0_30 = coeff0_0*dmats2[0][30] + coeff0_1*dmats2[1][30] + coeff0_2*dmats2[2][30] + coeff0_3*dmats2[3][30] + coeff0_4*dmats2[4][30] + coeff0_5*dmats2[5][30] + coeff0_6*dmats2[6][30] + coeff0_7*dmats2[7][30] + coeff0_8*dmats2[8][30] + coeff0_9*dmats2[9][30] + coeff0_10*dmats2[10][30] + coeff0_11*dmats2[11][30] + coeff0_12*dmats2[12][30] + coeff0_13*dmats2[13][30] + coeff0_14*dmats2[14][30] + coeff0_15*dmats2[15][30] + coeff0_16*dmats2[16][30] + coeff0_17*dmats2[17][30] + coeff0_18*dmats2[18][30] + coeff0_19*dmats2[19][30] + coeff0_20*dmats2[20][30] + coeff0_21*dmats2[21][30] + coeff0_22*dmats2[22][30] + coeff0_23*dmats2[23][30] + coeff0_24*dmats2[24][30] + coeff0_25*dmats2[25][30] + coeff0_26*dmats2[26][30] + coeff0_27*dmats2[27][30] + coeff0_28*dmats2[28][30] + coeff0_29*dmats2[29][30] + coeff0_30*dmats2[30][30] + coeff0_31*dmats2[31][30] + coeff0_32*dmats2[32][30] + coeff0_33*dmats2[33][30] + coeff0_34*dmats2[34][30];
          new_coeff0_31 = coeff0_0*dmats2[0][31] + coeff0_1*dmats2[1][31] + coeff0_2*dmats2[2][31] + coeff0_3*dmats2[3][31] + coeff0_4*dmats2[4][31] + coeff0_5*dmats2[5][31] + coeff0_6*dmats2[6][31] + coeff0_7*dmats2[7][31] + coeff0_8*dmats2[8][31] + coeff0_9*dmats2[9][31] + coeff0_10*dmats2[10][31] + coeff0_11*dmats2[11][31] + coeff0_12*dmats2[12][31] + coeff0_13*dmats2[13][31] + coeff0_14*dmats2[14][31] + coeff0_15*dmats2[15][31] + coeff0_16*dmats2[16][31] + coeff0_17*dmats2[17][31] + coeff0_18*dmats2[18][31] + coeff0_19*dmats2[19][31] + coeff0_20*dmats2[20][31] + coeff0_21*dmats2[21][31] + coeff0_22*dmats2[22][31] + coeff0_23*dmats2[23][31] + coeff0_24*dmats2[24][31] + coeff0_25*dmats2[25][31] + coeff0_26*dmats2[26][31] + coeff0_27*dmats2[27][31] + coeff0_28*dmats2[28][31] + coeff0_29*dmats2[29][31] + coeff0_30*dmats2[30][31] + coeff0_31*dmats2[31][31] + coeff0_32*dmats2[32][31] + coeff0_33*dmats2[33][31] + coeff0_34*dmats2[34][31];
          new_coeff0_32 = coeff0_0*dmats2[0][32] + coeff0_1*dmats2[1][32] + coeff0_2*dmats2[2][32] + coeff0_3*dmats2[3][32] + coeff0_4*dmats2[4][32] + coeff0_5*dmats2[5][32] + coeff0_6*dmats2[6][32] + coeff0_7*dmats2[7][32] + coeff0_8*dmats2[8][32] + coeff0_9*dmats2[9][32] + coeff0_10*dmats2[10][32] + coeff0_11*dmats2[11][32] + coeff0_12*dmats2[12][32] + coeff0_13*dmats2[13][32] + coeff0_14*dmats2[14][32] + coeff0_15*dmats2[15][32] + coeff0_16*dmats2[16][32] + coeff0_17*dmats2[17][32] + coeff0_18*dmats2[18][32] + coeff0_19*dmats2[19][32] + coeff0_20*dmats2[20][32] + coeff0_21*dmats2[21][32] + coeff0_22*dmats2[22][32] + coeff0_23*dmats2[23][32] + coeff0_24*dmats2[24][32] + coeff0_25*dmats2[25][32] + coeff0_26*dmats2[26][32] + coeff0_27*dmats2[27][32] + coeff0_28*dmats2[28][32] + coeff0_29*dmats2[29][32] + coeff0_30*dmats2[30][32] + coeff0_31*dmats2[31][32] + coeff0_32*dmats2[32][32] + coeff0_33*dmats2[33][32] + coeff0_34*dmats2[34][32];
          new_coeff0_33 = coeff0_0*dmats2[0][33] + coeff0_1*dmats2[1][33] + coeff0_2*dmats2[2][33] + coeff0_3*dmats2[3][33] + coeff0_4*dmats2[4][33] + coeff0_5*dmats2[5][33] + coeff0_6*dmats2[6][33] + coeff0_7*dmats2[7][33] + coeff0_8*dmats2[8][33] + coeff0_9*dmats2[9][33] + coeff0_10*dmats2[10][33] + coeff0_11*dmats2[11][33] + coeff0_12*dmats2[12][33] + coeff0_13*dmats2[13][33] + coeff0_14*dmats2[14][33] + coeff0_15*dmats2[15][33] + coeff0_16*dmats2[16][33] + coeff0_17*dmats2[17][33] + coeff0_18*dmats2[18][33] + coeff0_19*dmats2[19][33] + coeff0_20*dmats2[20][33] + coeff0_21*dmats2[21][33] + coeff0_22*dmats2[22][33] + coeff0_23*dmats2[23][33] + coeff0_24*dmats2[24][33] + coeff0_25*dmats2[25][33] + coeff0_26*dmats2[26][33] + coeff0_27*dmats2[27][33] + coeff0_28*dmats2[28][33] + coeff0_29*dmats2[29][33] + coeff0_30*dmats2[30][33] + coeff0_31*dmats2[31][33] + coeff0_32*dmats2[32][33] + coeff0_33*dmats2[33][33] + coeff0_34*dmats2[34][33];
          new_coeff0_34 = coeff0_0*dmats2[0][34] + coeff0_1*dmats2[1][34] + coeff0_2*dmats2[2][34] + coeff0_3*dmats2[3][34] + coeff0_4*dmats2[4][34] + coeff0_5*dmats2[5][34] + coeff0_6*dmats2[6][34] + coeff0_7*dmats2[7][34] + coeff0_8*dmats2[8][34] + coeff0_9*dmats2[9][34] + coeff0_10*dmats2[10][34] + coeff0_11*dmats2[11][34] + coeff0_12*dmats2[12][34] + coeff0_13*dmats2[13][34] + coeff0_14*dmats2[14][34] + coeff0_15*dmats2[15][34] + coeff0_16*dmats2[16][34] + coeff0_17*dmats2[17][34] + coeff0_18*dmats2[18][34] + coeff0_19*dmats2[19][34] + coeff0_20*dmats2[20][34] + coeff0_21*dmats2[21][34] + coeff0_22*dmats2[22][34] + coeff0_23*dmats2[23][34] + coeff0_24*dmats2[24][34] + coeff0_25*dmats2[25][34] + coeff0_26*dmats2[26][34] + coeff0_27*dmats2[27][34] + coeff0_28*dmats2[28][34] + coeff0_29*dmats2[29][34] + coeff0_30*dmats2[30][34] + coeff0_31*dmats2[31][34] + coeff0_32*dmats2[32][34] + coeff0_33*dmats2[33][34] + coeff0_34*dmats2[34][34];
        }
    
      }
      // Compute derivatives on reference element as dot product of coefficients and basisvalues
      derivatives[deriv_num] = new_coeff0_0*basisvalue0 + new_coeff0_1*basisvalue1 + new_coeff0_2*basisvalue2 + new_coeff0_3*basisvalue3 + new_coeff0_4*basisvalue4 + new_coeff0_5*basisvalue5 + new_coeff0_6*basisvalue6 + new_coeff0_7*basisvalue7 + new_coeff0_8*basisvalue8 + new_coeff0_9*basisvalue9 + new_coeff0_10*basisvalue10 + new_coeff0_11*basisvalue11 + new_coeff0_12*basisvalue12 + new_coeff0_13*basisvalue13 + new_coeff0_14*basisvalue14 + new_coeff0_15*basisvalue15 + new_coeff0_16*basisvalue16 + new_coeff0_17*basisvalue17 + new_coeff0_18*basisvalue18 + new_coeff0_19*basisvalue19 + new_coeff0_20*basisvalue20 + new_coeff0_21*basisvalue21 + new_coeff0_22*basisvalue22 + new_coeff0_23*basisvalue23 + new_coeff0_24*basisvalue24 + new_coeff0_25*basisvalue25 + new_coeff0_26*basisvalue26 + new_coeff0_27*basisvalue27 + new_coeff0_28*basisvalue28 + new_coeff0_29*basisvalue29 + new_coeff0_30*basisvalue30 + new_coeff0_31*basisvalue31 + new_coeff0_32*basisvalue32 + new_coeff0_33*basisvalue33 + new_coeff0_34*basisvalue34;
    }
    
    // Transform derivatives back to physical element
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        values[row] += transform[row][col]*derivatives[col];
      }
    }
    // Delete pointer to array of derivatives on FIAT element
    delete [] derivatives;
    
    // Delete pointer to array of combinations of derivatives and transform
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      delete [] combinations[row];
      delete [] transform[row];
    }
    
    delete [] combinations;
    delete [] transform;
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis_derivatives() is not yet implemented.");
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // The reference points, direction and weights:
    const static double X[35][1][3] = {{{0, 0, 0}}, {{1, 0, 0}}, {{0, 1, 0}}, {{0, 0, 1}}, {{0, 0.75, 0.25}}, {{0, 0.5, 0.5}}, {{0, 0.25, 0.75}}, {{0.75, 0, 0.25}}, {{0.5, 0, 0.5}}, {{0.25, 0, 0.75}}, {{0.75, 0.25, 0}}, {{0.5, 0.5, 0}}, {{0.25, 0.75, 0}}, {{0, 0, 0.25}}, {{0, 0, 0.5}}, {{0, 0, 0.75}}, {{0, 0.25, 0}}, {{0, 0.5, 0}}, {{0, 0.75, 0}}, {{0.25, 0, 0}}, {{0.5, 0, 0}}, {{0.75, 0, 0}}, {{0.5, 0.25, 0.25}}, {{0.25, 0.5, 0.25}}, {{0.25, 0.25, 0.5}}, {{0, 0.25, 0.25}}, {{0, 0.5, 0.25}}, {{0, 0.25, 0.5}}, {{0.25, 0, 0.25}}, {{0.5, 0, 0.25}}, {{0.25, 0, 0.5}}, {{0.25, 0.25, 0}}, {{0.5, 0.25, 0}}, {{0.25, 0.5, 0}}, {{0.25, 0.25, 0.25}}};
    const static double W[35][1] = {{1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}};
    const static double D[35][1][1] = {{{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}};
    
    const double * const * x = c.coordinates;
    double result = 0.0;
    // Iterate over the points:
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0][0] - X[i][0][1] - X[i][0][2];
    const double w1 = X[i][0][0];
    const double w2 = X[i][0][1];
    const double w3 = X[i][0][2];
    
    // Compute affine mapping y = F(X)
    double y[3];
    y[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0] + w3*x[3][0];
    y[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1] + w3*x[3][1];
    y[2] = w0*x[0][2] + w1*x[1][2] + w2*x[2][2] + w3*x[3][2];
    
    // Evaluate function at physical points
    double values[1];
    f.evaluate(values, y, c);
    
    // Map function values using appropriate mapping
    // Affine map: Do nothing
    
    // Note that we do not map the weights (yet).
    
    // Take directional components
    for(int k = 0; k < 1; k++)
      result += values[k]*D[i][0][k];
    // Multiply by weights 
    result *= W[i][0];
    
    return result;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate at vertices and use affine mapping
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new UFC_Poisson3D_4BilinearForm_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class UFC_Poisson3D_4BilinearForm_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  UFC_Poisson3D_4BilinearForm_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson3D_4BilinearForm_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', 'tetrahedron', 4)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 35;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_02 = element_coordinates[3][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
    const double J_12 = element_coordinates[3][1] - element_coordinates[0][1];
    const double J_20 = element_coordinates[1][2] - element_coordinates[0][2];
    const double J_21 = element_coordinates[2][2] - element_coordinates[0][2];
    const double J_22 = element_coordinates[3][2] - element_coordinates[0][2];
      
    // Compute sub determinants
    const double d00 = J_11*J_22 - J_12*J_21;
    const double d01 = J_12*J_20 - J_10*J_22;
    const double d02 = J_10*J_21 - J_11*J_20;
    
    const double d10 = J_02*J_21 - J_01*J_22;
    const double d11 = J_00*J_22 - J_02*J_20;
    const double d12 = J_01*J_20 - J_00*J_21;
    
    const double d20 = J_01*J_12 - J_02*J_11;
    const double d21 = J_02*J_10 - J_00*J_12;
    const double d22 = J_00*J_11 - J_01*J_10;
      
    // Compute determinant of Jacobian
    double detJ = J_00*d00 + J_10*d10 + J_20*d20;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = d00*(element_coordinates[0][0] - element_coordinates[2][0] - element_coordinates[3][0]) \
                    + d10*(element_coordinates[0][1] - element_coordinates[2][1] - element_coordinates[3][1]) \
                    + d20*(element_coordinates[0][2] - element_coordinates[2][2] - element_coordinates[3][2]);
    
    const double C1 = d01*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[3][0]) \
                    + d11*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[3][1]) \
                    + d21*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[3][2]);
    
    const double C2 = d02*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[2][0]) \
                    + d12*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[2][1]) \
                    + d22*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[2][2]);
    
    // Get coordinates and map to the UFC reference element
    double x = (C0 + d00*coordinates[0] + d10*coordinates[1] + d20*coordinates[2]) / detJ;
    double y = (C1 + d01*coordinates[0] + d11*coordinates[1] + d21*coordinates[2]) / detJ;
    double z = (C2 + d02*coordinates[0] + d12*coordinates[1] + d22*coordinates[2]) / detJ;
    
    // Map coordinates to the reference cube
    if (std::abs(y + z - 1.0) < 1e-14)
      x = 1.0;
    else
      x = -2.0 * x/(y + z - 1.0) - 1.0;
    if (std::abs(z - 1.0) < 1e-14)
      y = -1.0;
    else
      y = 2.0 * y/(1.0 - z) - 1.0;
    z = 2.0 * z - 1.0;
    
    // Reset values
    *values = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    const double scalings_y_4 = scalings_y_3*(0.5 - 0.5*y);
    const double scalings_z_0 = 1;
    const double scalings_z_1 = scalings_z_0*(0.5 - 0.5*z);
    const double scalings_z_2 = scalings_z_1*(0.5 - 0.5*z);
    const double scalings_z_3 = scalings_z_2*(0.5 - 0.5*z);
    const double scalings_z_4 = scalings_z_3*(0.5 - 0.5*z);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    const double psitilde_a_4 = 1.75*x*psitilde_a_3 - 0.75*psitilde_a_2;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_0_4 = 0.0285714285714286*psitilde_bs_0_3 + 1.8*y*psitilde_bs_0_3 - 0.771428571428571*psitilde_bs_0_2;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_1_3 = 0.285714285714286*psitilde_bs_1_2 + 2*y*psitilde_bs_1_2 - 0.714285714285714*psitilde_bs_1_1;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_2_2 = 1.02040816326531*psitilde_bs_2_1 + 2.57142857142857*y*psitilde_bs_2_1 - 0.551020408163265*psitilde_bs_2_0;
    const double psitilde_bs_3_0 = 1;
    const double psitilde_bs_3_1 = 4.5*y + 3.5;
    const double psitilde_bs_4_0 = 1;
    
    // Compute psitilde_cs
    const double psitilde_cs_00_0 = 1;
    const double psitilde_cs_00_1 = 2*z + 1;
    const double psitilde_cs_00_2 = 0.3125*psitilde_cs_00_1 + 1.875*z*psitilde_cs_00_1 - 0.5625*psitilde_cs_00_0;
    const double psitilde_cs_00_3 = 0.155555555555556*psitilde_cs_00_2 + 1.86666666666667*z*psitilde_cs_00_2 - 0.711111111111111*psitilde_cs_00_1;
    const double psitilde_cs_00_4 = 0.09375*psitilde_cs_00_3 + 1.875*z*psitilde_cs_00_3 - 0.78125*psitilde_cs_00_2;
    const double psitilde_cs_01_0 = 1;
    const double psitilde_cs_01_1 = 3*z + 2;
    const double psitilde_cs_01_2 = 0.777777777777778*psitilde_cs_01_1 + 2.33333333333333*z*psitilde_cs_01_1 - 0.555555555555556*psitilde_cs_01_0;
    const double psitilde_cs_01_3 = 0.428571428571429*psitilde_cs_01_2 + 2.14285714285714*z*psitilde_cs_01_2 - 0.714285714285714*psitilde_cs_01_1;
    const double psitilde_cs_02_0 = 1;
    const double psitilde_cs_02_1 = 4*z + 3;
    const double psitilde_cs_02_2 = 1.265625*psitilde_cs_02_1 + 2.8125*z*psitilde_cs_02_1 - 0.546875*psitilde_cs_02_0;
    const double psitilde_cs_03_0 = 1;
    const double psitilde_cs_03_1 = 5*z + 4;
    const double psitilde_cs_04_0 = 1;
    const double psitilde_cs_10_0 = 1;
    const double psitilde_cs_10_1 = 3*z + 2;
    const double psitilde_cs_10_2 = 0.777777777777778*psitilde_cs_10_1 + 2.33333333333333*z*psitilde_cs_10_1 - 0.555555555555556*psitilde_cs_10_0;
    const double psitilde_cs_10_3 = 0.428571428571429*psitilde_cs_10_2 + 2.14285714285714*z*psitilde_cs_10_2 - 0.714285714285714*psitilde_cs_10_1;
    const double psitilde_cs_11_0 = 1;
    const double psitilde_cs_11_1 = 4*z + 3;
    const double psitilde_cs_11_2 = 1.265625*psitilde_cs_11_1 + 2.8125*z*psitilde_cs_11_1 - 0.546875*psitilde_cs_11_0;
    const double psitilde_cs_12_0 = 1;
    const double psitilde_cs_12_1 = 5*z + 4;
    const double psitilde_cs_13_0 = 1;
    const double psitilde_cs_20_0 = 1;
    const double psitilde_cs_20_1 = 4*z + 3;
    const double psitilde_cs_20_2 = 1.265625*psitilde_cs_20_1 + 2.8125*z*psitilde_cs_20_1 - 0.546875*psitilde_cs_20_0;
    const double psitilde_cs_21_0 = 1;
    const double psitilde_cs_21_1 = 5*z + 4;
    const double psitilde_cs_22_0 = 1;
    const double psitilde_cs_30_0 = 1;
    const double psitilde_cs_30_1 = 5*z + 4;
    const double psitilde_cs_31_0 = 1;
    const double psitilde_cs_40_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.866025403784439*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_0;
    const double basisvalue1 = 2.73861278752583*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_0;
    const double basisvalue2 = 1.58113883008419*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_0;
    const double basisvalue3 = 1.11803398874989*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_1;
    const double basisvalue4 = 5.1234753829798*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_0;
    const double basisvalue5 = 3.96862696659689*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_0;
    const double basisvalue6 = 2.29128784747792*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_0;
    const double basisvalue7 = 3.24037034920393*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_1;
    const double basisvalue8 = 1.87082869338697*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_1;
    const double basisvalue9 = 1.3228756555323*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_2;
    const double basisvalue10 = 7.93725393319377*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_0;
    const double basisvalue11 = 6.70820393249937*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_0;
    const double basisvalue12 = 5.19615242270663*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_0;
    const double basisvalue13 = 3*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_0;
    const double basisvalue14 = 5.80947501931113*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_1;
    const double basisvalue15 = 4.5*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_1;
    const double basisvalue16 = 2.59807621135332*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_1;
    const double basisvalue17 = 3.67423461417477*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_2;
    const double basisvalue18 = 2.12132034355964*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_2;
    const double basisvalue19 = 1.5*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_3;
    const double basisvalue20 = 11.1242977306435*psitilde_a_4*scalings_y_4*psitilde_bs_4_0*scalings_z_4*psitilde_cs_40_0;
    const double basisvalue21 = 9.81070843517429*psitilde_a_3*scalings_y_3*psitilde_bs_3_1*scalings_z_4*psitilde_cs_31_0;
    const double basisvalue22 = 8.2915619758885*psitilde_a_2*scalings_y_2*psitilde_bs_2_2*scalings_z_4*psitilde_cs_22_0;
    const double basisvalue23 = 6.42261628933256*psitilde_a_1*scalings_y_1*psitilde_bs_1_3*scalings_z_4*psitilde_cs_13_0;
    const double basisvalue24 = 3.70809924354783*psitilde_a_0*scalings_y_0*psitilde_bs_0_4*scalings_z_4*psitilde_cs_04_0;
    const double basisvalue25 = 8.77496438739212*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_1;
    const double basisvalue26 = 7.41619848709566*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_1;
    const double basisvalue27 = 5.74456264653803*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_1;
    const double basisvalue28 = 3.3166247903554*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_1;
    const double basisvalue29 = 6.42261628933256*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_2;
    const double basisvalue30 = 4.9749371855331*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_2;
    const double basisvalue31 = 2.87228132326901*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_2;
    const double basisvalue32 = 4.06201920231798*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_3;
    const double basisvalue33 = 2.34520787991171*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_3;
    const double basisvalue34 = 1.6583123951777*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_4;
    
    // Table(s) of coefficients
    const static double coefficients0[35][35] = \
    {{-0.0137464349807051, -0.0144900147488139, -0.00836581391578937, -0.00591552374999941, 0, 0, 0, 0, 0, 0, -0.00671936840905293, -0.00567890279999946, -0.00439885919382571, -0.00253968253968254, -0.00491807409042211, -0.00380952380952381, -0.00219942959691287, -0.00311046316543895, -0.0017958267458706, -0.00126984126984128, 0.0136980289516341, 0.0120805260192622, 0.010209907964538, 0.00790856070259325, 0.00456600965054471, 0.0108051509532101, 0.00913201930108942, 0.00707363173407281, 0.00408396318581522, 0.00790856070259324, 0.00612594477872282, 0.0035368158670364, 0.00500181296677924, 0.00288779806280616, 0.00204198159290761},
    {-0.0137464349807054, 0.0144900147488139, -0.00836581391578934, -0.00591552374999945, 0, 0, 0, 0, 0, 0, 0.00671936840905293, -0.00567890279999946, 0.00439885919382572, -0.00253968253968254, -0.00491807409042213, 0.00380952380952382, -0.00219942959691286, 0.00311046316543897, -0.0017958267458706, -0.00126984126984127, 0.0136980289516341, -0.0120805260192622, 0.010209907964538, -0.00790856070259325, 0.00456600965054471, -0.0108051509532101, 0.00913201930108941, -0.0070736317340728, 0.00408396318581521, 0.00790856070259325, -0.00612594477872282, 0.0035368158670364, -0.00500181296677924, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807053, 0, 0.0167316278315787, -0.00591552374999946, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0101587301587302, 0, 0, -0.00659828879073857, 0, 0.00359165349174119, -0.00126984126984127, 0, 0, 0, 0, 0.0228300482527235, 0, 0, 0, -0.0163358527432608, 0, 0, 0.0106104476011092, 0, -0.0057755961256123, 0.00204198159290761},
    {-0.0137464349807054, 0, 0, 0.0177465712499983, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0126984126984127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0306297238936141},
    {0.0439885919382572, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0, 0.0406349206349206, 0, 0, 0.00439885919382572, 0, -0.0143666139669648, 0.00761904761904763, 0, 0, 0, 0, 0, 0, 0, 0, 0.0367556686723369, 0, 0, -0.0424417904044368, 0, 0.0303218796594646, -0.0122518895574456},
    {-0.0329914439536931, 0, -0.0200779533978945, -0.0141972569999986, 0, 0, -0.00969857289937744, 0, 0.0712696645099798, -0.050395263067897, 0, 0, 0, 0, 0, 0, 0.0461880215351701, 0, 0.0107749604752236, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0495154221385096, 0, -0.0606437593189292, 0.0306297238936141},
    {0.0439885919382573, 0, 0.0267706045305259, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0, 0.0359165349174119, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0505364660991076, -0.0408396318581522},
    {0.0439885919382573, 0.0231840235981023, -0.0133853022652629, 0.0189296759999982, 0.0433733365754904, -0.0335968420452647, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, -0.0227156111999979, 0.0175954367753029, -0.0101587301587302, 0.00327871606028141, -0.00253968253968255, 0.0014662863979419, -0.0124418526617558, 0.00718330698348238, 0.00761904761904763, 0, 0, 0, 0, 0, 0.0243115896447228, -0.0205470434274512, 0.0159156714016638, -0.00918891716808423, -0.031634242810373, 0.0245037791148913, -0.0141472634681456, 0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, -0.0173880176985766, 0.0100389766989472, -0.0141972569999986, -0.00722888942924838, 0.00559947367421081, -0.00323285763312582, 0.0617213399848368, -0.03563483225499, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, -0.0266666666666667, 0.01539600717839, 0.00933138949631686, -0.00538748023761177, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, -0.0285877423007065, 0.0165051407128365, -0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, 0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0.0311046316543895, -0.017958267458706, 0.0253968253968255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754903, -0.0335968420452647, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, 0, -0.0117302911835353, 0.0101587301587302, -0.0229510124219699, 0.00761904761904761, -0.00146628639794191, 0.0165891368823411, -0.0071833069834824, -0.00761904761904763, 0, 0.0241610520385245, -0.0357346778758831, 0.0355885231616696, -0.0228300482527235, -0.00270128773830253, -0.0114150241263618, 0.0159156714016638, -0.0112308987609918, 0.00395428035129663, 0.00306297238936141, -0.0035368158670364, -0.00375135972508443, 0.00072194951570154, 0.00204198159290761},
    {-0.0329914439536929, -0.0173880176985768, -0.0100389766989472, 0.0141972569999986, -0.00722888942924839, 0.0615942104163185, -0.0614242950293904, -0.00685792666498187, -0.00395942580611001, 0.00559947367421077, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042213, -0.0266666666666667, 0.0175954367753029, 0.00933138949631688, 0.00538748023761179, -0.00761904761904761, 0, 0, 0.0357346778758831, -0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108943, 0, 0.00408396318581521, 0.00131809345043221, 0.00714693557517662, -0.00471575448938186, -0.00250090648338962, -0.00144389903140307, 0.00204198159290761},
    {0.0439885919382572, 0.0231840235981022, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0.0293257279588382, 0.0101587301587302, 0, -0.0101587301587302, -0.0219942959691286, 0.00207364211029264, 0.017958267458706, -0.00761904761904762, 0, 0, 0, 0.0395428035129662, -0.0456600965054471, 0, 0, -0.017684079335182, 0.0142938711503532, 0, 0.00612594477872282, 0, -0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.043988591938257, -0.0231840235981023, -0.0133853022652629, 0.0189296759999983, 0.0433733365754903, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484216, -0.0268774736362117, -0.0227156111999979, -0.0175954367753029, -0.0101587301587302, 0.00327871606028139, 0.00253968253968253, 0.0014662863979419, 0.0124418526617558, 0.00718330698348236, 0.00761904761904761, 0, 0, 0, 0, 0, -0.0243115896447228, -0.0205470434274512, -0.0159156714016638, -0.00918891716808424, -0.031634242810373, -0.0245037791148913, -0.0141472634681456, -0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, 0.0173880176985768, 0.0100389766989471, -0.0141972569999987, -0.00722888942924838, -0.00559947367421082, -0.00323285763312581, -0.0617213399848367, -0.03563483225499, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, 0.0266666666666667, 0.01539600717839, -0.00933138949631689, -0.00538748023761178, -0.019047619047619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, 0.0285877423007065, 0.0165051407128365, 0.0525190361511819, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382572, -0.0231840235981023, -0.0133853022652629, 0.0189296759999981, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, -0.0311046316543896, -0.017958267458706, 0.0253968253968255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484216, -0.0268774736362117, 0, 0.0117302911835352, 0.0101587301587302, -0.0229510124219699, -0.00761904761904762, -0.00146628639794191, -0.0165891368823411, -0.00718330698348239, -0.00761904761904763, 0, -0.0241610520385245, -0.0357346778758831, -0.0355885231616696, -0.0228300482527235, 0.00270128773830254, -0.0114150241263618, -0.0159156714016638, -0.0112308987609918, 0.00395428035129662, -0.00306297238936141, -0.0035368158670364, 0.00375135972508443, 0.000721949515701533, 0.00204198159290761},
    {-0.0329914439536929, 0.0173880176985766, -0.0100389766989472, 0.0141972569999987, -0.00722888942924841, -0.0615942104163186, -0.0614242950293904, 0.00685792666498186, -0.00395942580610998, 0.00559947367421075, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042213, 0.0266666666666667, 0.0175954367753029, -0.00933138949631688, 0.00538748023761179, -0.00761904761904763, 0, 0, 0.0357346778758831, 0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108943, 0, 0.0040839631858152, 0.00131809345043222, -0.00714693557517663, -0.00471575448938187, 0.00250090648338962, -0.00144389903140308, 0.00204198159290761},
    {0.0439885919382573, -0.0231840235981022, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, -0.0293257279588382, 0.0101587301587302, 0, 0.0101587301587301, -0.0219942959691286, -0.00207364211029265, 0.017958267458706, -0.00761904761904761, 0, 0, 0, -0.0395428035129663, -0.0456600965054471, 0, 0, 0.017684079335182, 0.0142938711503532, 0, -0.00612594477872281, 0, 0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.0439885919382571, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484215, 0.0134387368181058, -0.0113578055999989, -0.0205280095711867, -0.0152380952380952, -0.00983614818084424, -0.0177777777777778, -0.0131965775814772, -0.0145154947720485, -0.0107749604752236, -0.00761904761904761, -0.0547921158065365, -0.0241610520385245, -0.00510495398226901, 0.00395428035129663, 0.00456600965054471, -0.0216103019064202, -0.00456600965054471, 0.00353681586703639, 0.00408396318581521, -0.00395428035129661, 0.0030629723893614, 0.0035368158670364, 0.00250090648338961, 0.00288779806280615, 0.00204198159290761},
    {-0.0329914439536931, 0, 0.0200779533978945, 0.0141972569999987, -0.0867466731509807, 0, 0.00969857289937743, 0, 0.00791885161221998, 0.00559947367421076, 0, 0.0340734167999968, 0, -0.0152380952380953, 0.0295084445425327, 0, -0.0131965775814772, 0, -0.0107749604752236, -0.00761904761904762, 0.0821881737098047, 0, -0.010209907964538, 0, 0.00456600965054471, 0, -0.00913201930108944, 0, 0.00408396318581521, -0.00790856070259326, 0, 0.0035368158670364, 0, 0.00288779806280615, 0.00204198159290761},
    {0.0439885919382573, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754903, -0.0335968420452646, 0.0193971457987549, -0.0274317066599274, 0.01583770322444, 0.0111989473484215, -0.0134387368181058, -0.0113578055999989, 0.0205280095711867, -0.0152380952380952, -0.00983614818084423, 0.0177777777777778, -0.0131965775814772, 0.0145154947720485, -0.0107749604752236, -0.00761904761904761, -0.0547921158065365, 0.0241610520385245, -0.005104953982269, -0.00395428035129662, 0.00456600965054471, 0.0216103019064202, -0.0045660096505447, -0.0035368158670364, 0.00408396318581521, -0.00395428035129662, -0.00306297238936141, 0.00353681586703641, -0.00250090648338962, 0.00288779806280615, 0.00204198159290761},
    {0.0439885919382573, 0.139104141588614, -0.080311813591578, -0.0567890279999947, 0.0578311154339872, 0.0335968420452646, -0.0420271492306356, 0.0274317066599275, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, -0.0586514559176763, 0.0406349206349207, 0.039344592723377, 0.00253968253968254, -0.0109971479845643, -0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, -0.053052238005546, 0.0367556686723369, -0.0105447476034577, -0.0245037791148913, 0.0235787724469093, 0.0175063453837273, 0, -0.0122518895574457},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0, 0.0783926314389509, 0.0096985728993774, -0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, 0.0586514559176763, -0.0609523809523809, 0, 0.033015873015873, 0.0241937255660415, -0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, 0.053052238005546, -0.0551335030085053, 0, -0.0326717054865217, 0.0141472634681456, 0.00875317269186366, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382571, 0, 0, 0.170367083999984, 0, -0.0111989473484216, 0.00969857289937744, 0.0822951199797824, 0.0475131096733199, -0.0167984210226324, 0, 0, 0, 0, 0, 0.0533333333333333, -0.0461880215351701, 0.0435464843161454, 0.0251415744421883, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.057175484601413, -0.0495154221385096, -0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382571, -0.139104141588614, -0.0803118135915779, -0.0567890279999947, 0.0578311154339871, -0.0335968420452646, -0.0420271492306356, -0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, 0.0586514559176763, 0.0406349206349206, 0.0393445927233769, -0.00253968253968253, -0.0109971479845643, 0.0601356211984865, 0.0179582674587059, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, 0.053052238005546, 0.0367556686723369, -0.0105447476034577, 0.0245037791148913, 0.0235787724469093, -0.0175063453837273, 0, -0.0122518895574457},
    {0.0439885919382571, 0, 0.160623627183156, -0.0567890279999946, 0, -0.0783926314389509, 0.00969857289937745, 0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, -0.0586514559176763, -0.0609523809523809, 0, -0.033015873015873, 0.0241937255660415, 0.0145154947720485, -0.0610581093596003, 0.0393650793650793, 0, 0, 0, 0, 0, 0, 0, -0.053052238005546, -0.0551335030085053, 0, 0.0326717054865217, 0.0141472634681456, -0.00875317269186368, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0, 0.0111989473484215, 0.00969857289937745, -0.0822951199797824, 0.0475131096733199, -0.0167984210226323, 0, 0, 0, 0, 0, -0.0533333333333333, -0.0461880215351701, -0.0435464843161453, 0.0251415744421883, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0571754846014129, -0.0495154221385096, 0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754903, 0.0447957893936862, 0.0484928644968872, -0.0548634133198549, 0, -0.0167984210226323, 0.0806324209086351, 0.0227156111999979, -0.0058651455917676, -0.0101587301587302, -0.00327871606028142, 0.0304761904761905, 0.0271262983619253, 0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, 0.0729347689341683, 0.0205470434274512, -0.00530522380055458, -0.00918891716808423, 0.031634242810373, -0.00816792637163039, -0.0141472634681456, -0.00875317269186365, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382571, 0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754904, -0.0447957893936862, 0.0484928644968873, 0.0548634133198549, 0, -0.0167984210226323, -0.0806324209086351, 0.0227156111999979, 0.0058651455917676, -0.0101587301587302, -0.00327871606028142, -0.0304761904761905, 0.0271262983619253, -0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, -0.0729347689341683, 0.0205470434274512, 0.00530522380055459, -0.00918891716808424, 0.031634242810373, 0.00816792637163042, -0.0141472634681456, 0.00875317269186367, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0.0144577788584968, 0, -0.00323285763312585, 0, -0.0950262193466398, -0.0167984210226323, 0, 0, 0, 0, -0.0688530372659096, 0, 0.01539600717839, 0, -0.0502831488843767, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0738132332242036, 0, 0.0165051407128365, 0, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754903, -0.0447957893936862, -0.00969857289937743, 0.0548634133198549, 0.03167540644888, 0.0391963157194754, 0.0806324209086351, 0, 0.0527863103259086, 0.0609523809523809, 0.0229510124219699, 0.0101587301587302, 0.0168622935763319, -0.0124418526617558, -0.00718330698348239, -0.013968253968254, 0, 0.0724831561155734, 0.0357346778758831, -0.0118628410538899, -0.0228300482527235, -0.00810386321490759, 0.0114150241263618, -0.00530522380055459, -0.0112308987609918, -0.00395428035129662, -0.00102099079645379, -0.0035368158670364, 0.00125045324169481, 0.000721949515701537, 0.00204198159290762},
    {0.0439885919382571, 0.139104141588614, -0.080311813591578, -0.0567890279999947, -0.0433733365754904, 0.0447957893936862, -0.00969857289937742, -0.0548634133198549, 0.0316754064488799, 0.0391963157194754, -0.0806324209086351, 0, -0.0527863103259086, 0.060952380952381, 0.0229510124219699, -0.0101587301587302, 0.0168622935763319, 0.0124418526617558, -0.00718330698348236, -0.013968253968254, 0, -0.0724831561155734, 0.0357346778758831, 0.0118628410538899, -0.0228300482527236, 0.00810386321490761, 0.0114150241263618, 0.00530522380055459, -0.0112308987609918, -0.00395428035129662, 0.00102099079645379, -0.0035368158670364, -0.0012504532416948, 0.000721949515701528, 0.0020419815929076},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0.0144577788584968, 0, -0.0614242950293905, 0, -0.0633508128977598, 0.0391963157194754, 0, -0.0681468335999936, 0, -0.0914285714285715, 0.00983614818084423, 0, 0.0285925847598672, 0, 0.0143666139669647, -0.0139682539682539, 0, 0, -0.0714693557517662, 0, 0.0456600965054471, 0, 0.0182640386021788, 0, 0.0040839631858152, -0.00263618690086443, 0, -0.00471575448938186, 0, -0.00144389903140306, 0.00204198159290759},
    {0.351908735506058, 0, 0, 0, -0.115662230867974, 0, -0.129314305325032, 0, 0, -0.134387368181059, 0, -0.0908624447999914, 0, 0.0406349206349206, -0.0786891854467539, 0, -0.0879771838765144, 0, 0, 0.0711111111111111, 0, 0, 0, 0, 0, 0, -0.0821881737098047, 0, 0.0367556686723369, 0.0210894952069153, 0, 0.0235787724469093, 0, 0, -0.0122518895574456}};
    
    // Extract relevant coefficients
    const double coeff0_0 = coefficients0[dof][0];
    const double coeff0_1 = coefficients0[dof][1];
    const double coeff0_2 = coefficients0[dof][2];
    const double coeff0_3 = coefficients0[dof][3];
    const double coeff0_4 = coefficients0[dof][4];
    const double coeff0_5 = coefficients0[dof][5];
    const double coeff0_6 = coefficients0[dof][6];
    const double coeff0_7 = coefficients0[dof][7];
    const double coeff0_8 = coefficients0[dof][8];
    const double coeff0_9 = coefficients0[dof][9];
    const double coeff0_10 = coefficients0[dof][10];
    const double coeff0_11 = coefficients0[dof][11];
    const double coeff0_12 = coefficients0[dof][12];
    const double coeff0_13 = coefficients0[dof][13];
    const double coeff0_14 = coefficients0[dof][14];
    const double coeff0_15 = coefficients0[dof][15];
    const double coeff0_16 = coefficients0[dof][16];
    const double coeff0_17 = coefficients0[dof][17];
    const double coeff0_18 = coefficients0[dof][18];
    const double coeff0_19 = coefficients0[dof][19];
    const double coeff0_20 = coefficients0[dof][20];
    const double coeff0_21 = coefficients0[dof][21];
    const double coeff0_22 = coefficients0[dof][22];
    const double coeff0_23 = coefficients0[dof][23];
    const double coeff0_24 = coefficients0[dof][24];
    const double coeff0_25 = coefficients0[dof][25];
    const double coeff0_26 = coefficients0[dof][26];
    const double coeff0_27 = coefficients0[dof][27];
    const double coeff0_28 = coefficients0[dof][28];
    const double coeff0_29 = coefficients0[dof][29];
    const double coeff0_30 = coefficients0[dof][30];
    const double coeff0_31 = coefficients0[dof][31];
    const double coeff0_32 = coefficients0[dof][32];
    const double coeff0_33 = coefficients0[dof][33];
    const double coeff0_34 = coefficients0[dof][34];
    
    // Compute value(s)
    *values = coeff0_0*basisvalue0 + coeff0_1*basisvalue1 + coeff0_2*basisvalue2 + coeff0_3*basisvalue3 + coeff0_4*basisvalue4 + coeff0_5*basisvalue5 + coeff0_6*basisvalue6 + coeff0_7*basisvalue7 + coeff0_8*basisvalue8 + coeff0_9*basisvalue9 + coeff0_10*basisvalue10 + coeff0_11*basisvalue11 + coeff0_12*basisvalue12 + coeff0_13*basisvalue13 + coeff0_14*basisvalue14 + coeff0_15*basisvalue15 + coeff0_16*basisvalue16 + coeff0_17*basisvalue17 + coeff0_18*basisvalue18 + coeff0_19*basisvalue19 + coeff0_20*basisvalue20 + coeff0_21*basisvalue21 + coeff0_22*basisvalue22 + coeff0_23*basisvalue23 + coeff0_24*basisvalue24 + coeff0_25*basisvalue25 + coeff0_26*basisvalue26 + coeff0_27*basisvalue27 + coeff0_28*basisvalue28 + coeff0_29*basisvalue29 + coeff0_30*basisvalue30 + coeff0_31*basisvalue31 + coeff0_32*basisvalue32 + coeff0_33*basisvalue33 + coeff0_34*basisvalue34;
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis() is not yet implemented.");
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_02 = element_coordinates[3][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
    const double J_12 = element_coordinates[3][1] - element_coordinates[0][1];
    const double J_20 = element_coordinates[1][2] - element_coordinates[0][2];
    const double J_21 = element_coordinates[2][2] - element_coordinates[0][2];
    const double J_22 = element_coordinates[3][2] - element_coordinates[0][2];
      
    // Compute sub determinants
    const double d00 = J_11*J_22 - J_12*J_21;
    const double d01 = J_12*J_20 - J_10*J_22;
    const double d02 = J_10*J_21 - J_11*J_20;
    
    const double d10 = J_02*J_21 - J_01*J_22;
    const double d11 = J_00*J_22 - J_02*J_20;
    const double d12 = J_01*J_20 - J_00*J_21;
    
    const double d20 = J_01*J_12 - J_02*J_11;
    const double d21 = J_02*J_10 - J_00*J_12;
    const double d22 = J_00*J_11 - J_01*J_10;
      
    // Compute determinant of Jacobian
    double detJ = J_00*d00 + J_10*d10 + J_20*d20;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = d00*(element_coordinates[0][0] - element_coordinates[2][0] - element_coordinates[3][0]) \
                    + d10*(element_coordinates[0][1] - element_coordinates[2][1] - element_coordinates[3][1]) \
                    + d20*(element_coordinates[0][2] - element_coordinates[2][2] - element_coordinates[3][2]);
    
    const double C1 = d01*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[3][0]) \
                    + d11*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[3][1]) \
                    + d21*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[3][2]);
    
    const double C2 = d02*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[2][0]) \
                    + d12*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[2][1]) \
                    + d22*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[2][2]);
    
    // Get coordinates and map to the UFC reference element
    double x = (C0 + d00*coordinates[0] + d10*coordinates[1] + d20*coordinates[2]) / detJ;
    double y = (C1 + d01*coordinates[0] + d11*coordinates[1] + d21*coordinates[2]) / detJ;
    double z = (C2 + d02*coordinates[0] + d12*coordinates[1] + d22*coordinates[2]) / detJ;
    
    // Map coordinates to the reference cube
    if (std::abs(y + z - 1.0) < 1e-14)
      x = 1.0;
    else
      x = -2.0 * x/(y + z - 1.0) - 1.0;
    if (std::abs(z - 1.0) < 1e-14)
      y = -1.0;
    else
      y = 2.0 * y/(1.0 - z) - 1.0;
    z = 2.0 * z - 1.0;
    
    // Compute number of derivatives
    unsigned int num_derivatives = 1;
    
    for (unsigned int j = 0; j < n; j++)
      num_derivatives *= 3;
    
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      combinations[j] = new unsigned int [n];
      for (unsigned int k = 0; k < n; k++)
        combinations[j][k] = 0;
    }
        
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] ={{d00 / detJ, d10 / detJ, d20 / detJ}, {d01 / detJ, d11 / detJ, d21 / detJ}, {d02 / detJ, d12 / detJ, d22 / detJ}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values
    for (unsigned int j = 0; j < 1*num_derivatives; j++)
      values[j] = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    const double scalings_y_4 = scalings_y_3*(0.5 - 0.5*y);
    const double scalings_z_0 = 1;
    const double scalings_z_1 = scalings_z_0*(0.5 - 0.5*z);
    const double scalings_z_2 = scalings_z_1*(0.5 - 0.5*z);
    const double scalings_z_3 = scalings_z_2*(0.5 - 0.5*z);
    const double scalings_z_4 = scalings_z_3*(0.5 - 0.5*z);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    const double psitilde_a_4 = 1.75*x*psitilde_a_3 - 0.75*psitilde_a_2;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_0_4 = 0.0285714285714286*psitilde_bs_0_3 + 1.8*y*psitilde_bs_0_3 - 0.771428571428571*psitilde_bs_0_2;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_1_3 = 0.285714285714286*psitilde_bs_1_2 + 2*y*psitilde_bs_1_2 - 0.714285714285714*psitilde_bs_1_1;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_2_2 = 1.02040816326531*psitilde_bs_2_1 + 2.57142857142857*y*psitilde_bs_2_1 - 0.551020408163265*psitilde_bs_2_0;
    const double psitilde_bs_3_0 = 1;
    const double psitilde_bs_3_1 = 4.5*y + 3.5;
    const double psitilde_bs_4_0 = 1;
    
    // Compute psitilde_cs
    const double psitilde_cs_00_0 = 1;
    const double psitilde_cs_00_1 = 2*z + 1;
    const double psitilde_cs_00_2 = 0.3125*psitilde_cs_00_1 + 1.875*z*psitilde_cs_00_1 - 0.5625*psitilde_cs_00_0;
    const double psitilde_cs_00_3 = 0.155555555555556*psitilde_cs_00_2 + 1.86666666666667*z*psitilde_cs_00_2 - 0.711111111111111*psitilde_cs_00_1;
    const double psitilde_cs_00_4 = 0.09375*psitilde_cs_00_3 + 1.875*z*psitilde_cs_00_3 - 0.78125*psitilde_cs_00_2;
    const double psitilde_cs_01_0 = 1;
    const double psitilde_cs_01_1 = 3*z + 2;
    const double psitilde_cs_01_2 = 0.777777777777778*psitilde_cs_01_1 + 2.33333333333333*z*psitilde_cs_01_1 - 0.555555555555556*psitilde_cs_01_0;
    const double psitilde_cs_01_3 = 0.428571428571429*psitilde_cs_01_2 + 2.14285714285714*z*psitilde_cs_01_2 - 0.714285714285714*psitilde_cs_01_1;
    const double psitilde_cs_02_0 = 1;
    const double psitilde_cs_02_1 = 4*z + 3;
    const double psitilde_cs_02_2 = 1.265625*psitilde_cs_02_1 + 2.8125*z*psitilde_cs_02_1 - 0.546875*psitilde_cs_02_0;
    const double psitilde_cs_03_0 = 1;
    const double psitilde_cs_03_1 = 5*z + 4;
    const double psitilde_cs_04_0 = 1;
    const double psitilde_cs_10_0 = 1;
    const double psitilde_cs_10_1 = 3*z + 2;
    const double psitilde_cs_10_2 = 0.777777777777778*psitilde_cs_10_1 + 2.33333333333333*z*psitilde_cs_10_1 - 0.555555555555556*psitilde_cs_10_0;
    const double psitilde_cs_10_3 = 0.428571428571429*psitilde_cs_10_2 + 2.14285714285714*z*psitilde_cs_10_2 - 0.714285714285714*psitilde_cs_10_1;
    const double psitilde_cs_11_0 = 1;
    const double psitilde_cs_11_1 = 4*z + 3;
    const double psitilde_cs_11_2 = 1.265625*psitilde_cs_11_1 + 2.8125*z*psitilde_cs_11_1 - 0.546875*psitilde_cs_11_0;
    const double psitilde_cs_12_0 = 1;
    const double psitilde_cs_12_1 = 5*z + 4;
    const double psitilde_cs_13_0 = 1;
    const double psitilde_cs_20_0 = 1;
    const double psitilde_cs_20_1 = 4*z + 3;
    const double psitilde_cs_20_2 = 1.265625*psitilde_cs_20_1 + 2.8125*z*psitilde_cs_20_1 - 0.546875*psitilde_cs_20_0;
    const double psitilde_cs_21_0 = 1;
    const double psitilde_cs_21_1 = 5*z + 4;
    const double psitilde_cs_22_0 = 1;
    const double psitilde_cs_30_0 = 1;
    const double psitilde_cs_30_1 = 5*z + 4;
    const double psitilde_cs_31_0 = 1;
    const double psitilde_cs_40_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.866025403784439*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_0;
    const double basisvalue1 = 2.73861278752583*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_0;
    const double basisvalue2 = 1.58113883008419*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_0;
    const double basisvalue3 = 1.11803398874989*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_1;
    const double basisvalue4 = 5.1234753829798*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_0;
    const double basisvalue5 = 3.96862696659689*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_0;
    const double basisvalue6 = 2.29128784747792*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_0;
    const double basisvalue7 = 3.24037034920393*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_1;
    const double basisvalue8 = 1.87082869338697*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_1;
    const double basisvalue9 = 1.3228756555323*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_2;
    const double basisvalue10 = 7.93725393319377*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_0;
    const double basisvalue11 = 6.70820393249937*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_0;
    const double basisvalue12 = 5.19615242270663*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_0;
    const double basisvalue13 = 3*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_0;
    const double basisvalue14 = 5.80947501931113*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_1;
    const double basisvalue15 = 4.5*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_1;
    const double basisvalue16 = 2.59807621135332*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_1;
    const double basisvalue17 = 3.67423461417477*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_2;
    const double basisvalue18 = 2.12132034355964*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_2;
    const double basisvalue19 = 1.5*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_3;
    const double basisvalue20 = 11.1242977306435*psitilde_a_4*scalings_y_4*psitilde_bs_4_0*scalings_z_4*psitilde_cs_40_0;
    const double basisvalue21 = 9.81070843517429*psitilde_a_3*scalings_y_3*psitilde_bs_3_1*scalings_z_4*psitilde_cs_31_0;
    const double basisvalue22 = 8.2915619758885*psitilde_a_2*scalings_y_2*psitilde_bs_2_2*scalings_z_4*psitilde_cs_22_0;
    const double basisvalue23 = 6.42261628933256*psitilde_a_1*scalings_y_1*psitilde_bs_1_3*scalings_z_4*psitilde_cs_13_0;
    const double basisvalue24 = 3.70809924354783*psitilde_a_0*scalings_y_0*psitilde_bs_0_4*scalings_z_4*psitilde_cs_04_0;
    const double basisvalue25 = 8.77496438739212*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_1;
    const double basisvalue26 = 7.41619848709566*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_1;
    const double basisvalue27 = 5.74456264653803*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_1;
    const double basisvalue28 = 3.3166247903554*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_1;
    const double basisvalue29 = 6.42261628933256*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_2;
    const double basisvalue30 = 4.9749371855331*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_2;
    const double basisvalue31 = 2.87228132326901*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_2;
    const double basisvalue32 = 4.06201920231798*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_3;
    const double basisvalue33 = 2.34520787991171*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_3;
    const double basisvalue34 = 1.6583123951777*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_4;
    
    // Table(s) of coefficients
    const static double coefficients0[35][35] = \
    {{-0.0137464349807051, -0.0144900147488139, -0.00836581391578937, -0.00591552374999941, 0, 0, 0, 0, 0, 0, -0.00671936840905293, -0.00567890279999946, -0.00439885919382571, -0.00253968253968254, -0.00491807409042211, -0.00380952380952381, -0.00219942959691287, -0.00311046316543895, -0.0017958267458706, -0.00126984126984128, 0.0136980289516341, 0.0120805260192622, 0.010209907964538, 0.00790856070259325, 0.00456600965054471, 0.0108051509532101, 0.00913201930108942, 0.00707363173407281, 0.00408396318581522, 0.00790856070259324, 0.00612594477872282, 0.0035368158670364, 0.00500181296677924, 0.00288779806280616, 0.00204198159290761},
    {-0.0137464349807054, 0.0144900147488139, -0.00836581391578934, -0.00591552374999945, 0, 0, 0, 0, 0, 0, 0.00671936840905293, -0.00567890279999946, 0.00439885919382572, -0.00253968253968254, -0.00491807409042213, 0.00380952380952382, -0.00219942959691286, 0.00311046316543897, -0.0017958267458706, -0.00126984126984127, 0.0136980289516341, -0.0120805260192622, 0.010209907964538, -0.00790856070259325, 0.00456600965054471, -0.0108051509532101, 0.00913201930108941, -0.0070736317340728, 0.00408396318581521, 0.00790856070259325, -0.00612594477872282, 0.0035368158670364, -0.00500181296677924, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807053, 0, 0.0167316278315787, -0.00591552374999946, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0101587301587302, 0, 0, -0.00659828879073857, 0, 0.00359165349174119, -0.00126984126984127, 0, 0, 0, 0, 0.0228300482527235, 0, 0, 0, -0.0163358527432608, 0, 0, 0.0106104476011092, 0, -0.0057755961256123, 0.00204198159290761},
    {-0.0137464349807054, 0, 0, 0.0177465712499983, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0126984126984127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0306297238936141},
    {0.0439885919382572, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0, 0.0406349206349206, 0, 0, 0.00439885919382572, 0, -0.0143666139669648, 0.00761904761904763, 0, 0, 0, 0, 0, 0, 0, 0, 0.0367556686723369, 0, 0, -0.0424417904044368, 0, 0.0303218796594646, -0.0122518895574456},
    {-0.0329914439536931, 0, -0.0200779533978945, -0.0141972569999986, 0, 0, -0.00969857289937744, 0, 0.0712696645099798, -0.050395263067897, 0, 0, 0, 0, 0, 0, 0.0461880215351701, 0, 0.0107749604752236, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0495154221385096, 0, -0.0606437593189292, 0.0306297238936141},
    {0.0439885919382573, 0, 0.0267706045305259, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0, 0.0359165349174119, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0505364660991076, -0.0408396318581522},
    {0.0439885919382573, 0.0231840235981023, -0.0133853022652629, 0.0189296759999982, 0.0433733365754904, -0.0335968420452647, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, -0.0227156111999979, 0.0175954367753029, -0.0101587301587302, 0.00327871606028141, -0.00253968253968255, 0.0014662863979419, -0.0124418526617558, 0.00718330698348238, 0.00761904761904763, 0, 0, 0, 0, 0, 0.0243115896447228, -0.0205470434274512, 0.0159156714016638, -0.00918891716808423, -0.031634242810373, 0.0245037791148913, -0.0141472634681456, 0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, -0.0173880176985766, 0.0100389766989472, -0.0141972569999986, -0.00722888942924838, 0.00559947367421081, -0.00323285763312582, 0.0617213399848368, -0.03563483225499, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, -0.0266666666666667, 0.01539600717839, 0.00933138949631686, -0.00538748023761177, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, -0.0285877423007065, 0.0165051407128365, -0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, 0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0.0311046316543895, -0.017958267458706, 0.0253968253968255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754903, -0.0335968420452647, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, 0, -0.0117302911835353, 0.0101587301587302, -0.0229510124219699, 0.00761904761904761, -0.00146628639794191, 0.0165891368823411, -0.0071833069834824, -0.00761904761904763, 0, 0.0241610520385245, -0.0357346778758831, 0.0355885231616696, -0.0228300482527235, -0.00270128773830253, -0.0114150241263618, 0.0159156714016638, -0.0112308987609918, 0.00395428035129663, 0.00306297238936141, -0.0035368158670364, -0.00375135972508443, 0.00072194951570154, 0.00204198159290761},
    {-0.0329914439536929, -0.0173880176985768, -0.0100389766989472, 0.0141972569999986, -0.00722888942924839, 0.0615942104163185, -0.0614242950293904, -0.00685792666498187, -0.00395942580611001, 0.00559947367421077, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042213, -0.0266666666666667, 0.0175954367753029, 0.00933138949631688, 0.00538748023761179, -0.00761904761904761, 0, 0, 0.0357346778758831, -0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108943, 0, 0.00408396318581521, 0.00131809345043221, 0.00714693557517662, -0.00471575448938186, -0.00250090648338962, -0.00144389903140307, 0.00204198159290761},
    {0.0439885919382572, 0.0231840235981022, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0.0293257279588382, 0.0101587301587302, 0, -0.0101587301587302, -0.0219942959691286, 0.00207364211029264, 0.017958267458706, -0.00761904761904762, 0, 0, 0, 0.0395428035129662, -0.0456600965054471, 0, 0, -0.017684079335182, 0.0142938711503532, 0, 0.00612594477872282, 0, -0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.043988591938257, -0.0231840235981023, -0.0133853022652629, 0.0189296759999983, 0.0433733365754903, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484216, -0.0268774736362117, -0.0227156111999979, -0.0175954367753029, -0.0101587301587302, 0.00327871606028139, 0.00253968253968253, 0.0014662863979419, 0.0124418526617558, 0.00718330698348236, 0.00761904761904761, 0, 0, 0, 0, 0, -0.0243115896447228, -0.0205470434274512, -0.0159156714016638, -0.00918891716808424, -0.031634242810373, -0.0245037791148913, -0.0141472634681456, -0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, 0.0173880176985768, 0.0100389766989471, -0.0141972569999987, -0.00722888942924838, -0.00559947367421082, -0.00323285763312581, -0.0617213399848367, -0.03563483225499, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, 0.0266666666666667, 0.01539600717839, -0.00933138949631689, -0.00538748023761178, -0.019047619047619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, 0.0285877423007065, 0.0165051407128365, 0.0525190361511819, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382572, -0.0231840235981023, -0.0133853022652629, 0.0189296759999981, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, -0.0311046316543896, -0.017958267458706, 0.0253968253968255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484216, -0.0268774736362117, 0, 0.0117302911835352, 0.0101587301587302, -0.0229510124219699, -0.00761904761904762, -0.00146628639794191, -0.0165891368823411, -0.00718330698348239, -0.00761904761904763, 0, -0.0241610520385245, -0.0357346778758831, -0.0355885231616696, -0.0228300482527235, 0.00270128773830254, -0.0114150241263618, -0.0159156714016638, -0.0112308987609918, 0.00395428035129662, -0.00306297238936141, -0.0035368158670364, 0.00375135972508443, 0.000721949515701533, 0.00204198159290761},
    {-0.0329914439536929, 0.0173880176985766, -0.0100389766989472, 0.0141972569999987, -0.00722888942924841, -0.0615942104163186, -0.0614242950293904, 0.00685792666498186, -0.00395942580610998, 0.00559947367421075, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042213, 0.0266666666666667, 0.0175954367753029, -0.00933138949631688, 0.00538748023761179, -0.00761904761904763, 0, 0, 0.0357346778758831, 0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108943, 0, 0.0040839631858152, 0.00131809345043222, -0.00714693557517663, -0.00471575448938187, 0.00250090648338962, -0.00144389903140308, 0.00204198159290761},
    {0.0439885919382573, -0.0231840235981022, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, -0.0293257279588382, 0.0101587301587302, 0, 0.0101587301587301, -0.0219942959691286, -0.00207364211029265, 0.017958267458706, -0.00761904761904761, 0, 0, 0, -0.0395428035129663, -0.0456600965054471, 0, 0, 0.017684079335182, 0.0142938711503532, 0, -0.00612594477872281, 0, 0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.0439885919382571, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484215, 0.0134387368181058, -0.0113578055999989, -0.0205280095711867, -0.0152380952380952, -0.00983614818084424, -0.0177777777777778, -0.0131965775814772, -0.0145154947720485, -0.0107749604752236, -0.00761904761904761, -0.0547921158065365, -0.0241610520385245, -0.00510495398226901, 0.00395428035129663, 0.00456600965054471, -0.0216103019064202, -0.00456600965054471, 0.00353681586703639, 0.00408396318581521, -0.00395428035129661, 0.0030629723893614, 0.0035368158670364, 0.00250090648338961, 0.00288779806280615, 0.00204198159290761},
    {-0.0329914439536931, 0, 0.0200779533978945, 0.0141972569999987, -0.0867466731509807, 0, 0.00969857289937743, 0, 0.00791885161221998, 0.00559947367421076, 0, 0.0340734167999968, 0, -0.0152380952380953, 0.0295084445425327, 0, -0.0131965775814772, 0, -0.0107749604752236, -0.00761904761904762, 0.0821881737098047, 0, -0.010209907964538, 0, 0.00456600965054471, 0, -0.00913201930108944, 0, 0.00408396318581521, -0.00790856070259326, 0, 0.0035368158670364, 0, 0.00288779806280615, 0.00204198159290761},
    {0.0439885919382573, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754903, -0.0335968420452646, 0.0193971457987549, -0.0274317066599274, 0.01583770322444, 0.0111989473484215, -0.0134387368181058, -0.0113578055999989, 0.0205280095711867, -0.0152380952380952, -0.00983614818084423, 0.0177777777777778, -0.0131965775814772, 0.0145154947720485, -0.0107749604752236, -0.00761904761904761, -0.0547921158065365, 0.0241610520385245, -0.005104953982269, -0.00395428035129662, 0.00456600965054471, 0.0216103019064202, -0.0045660096505447, -0.0035368158670364, 0.00408396318581521, -0.00395428035129662, -0.00306297238936141, 0.00353681586703641, -0.00250090648338962, 0.00288779806280615, 0.00204198159290761},
    {0.0439885919382573, 0.139104141588614, -0.080311813591578, -0.0567890279999947, 0.0578311154339872, 0.0335968420452646, -0.0420271492306356, 0.0274317066599275, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, -0.0586514559176763, 0.0406349206349207, 0.039344592723377, 0.00253968253968254, -0.0109971479845643, -0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, -0.053052238005546, 0.0367556686723369, -0.0105447476034577, -0.0245037791148913, 0.0235787724469093, 0.0175063453837273, 0, -0.0122518895574457},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0, 0.0783926314389509, 0.0096985728993774, -0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, 0.0586514559176763, -0.0609523809523809, 0, 0.033015873015873, 0.0241937255660415, -0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, 0.053052238005546, -0.0551335030085053, 0, -0.0326717054865217, 0.0141472634681456, 0.00875317269186366, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382571, 0, 0, 0.170367083999984, 0, -0.0111989473484216, 0.00969857289937744, 0.0822951199797824, 0.0475131096733199, -0.0167984210226324, 0, 0, 0, 0, 0, 0.0533333333333333, -0.0461880215351701, 0.0435464843161454, 0.0251415744421883, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.057175484601413, -0.0495154221385096, -0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382571, -0.139104141588614, -0.0803118135915779, -0.0567890279999947, 0.0578311154339871, -0.0335968420452646, -0.0420271492306356, -0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, 0.0586514559176763, 0.0406349206349206, 0.0393445927233769, -0.00253968253968253, -0.0109971479845643, 0.0601356211984865, 0.0179582674587059, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, 0.053052238005546, 0.0367556686723369, -0.0105447476034577, 0.0245037791148913, 0.0235787724469093, -0.0175063453837273, 0, -0.0122518895574457},
    {0.0439885919382571, 0, 0.160623627183156, -0.0567890279999946, 0, -0.0783926314389509, 0.00969857289937745, 0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, -0.0586514559176763, -0.0609523809523809, 0, -0.033015873015873, 0.0241937255660415, 0.0145154947720485, -0.0610581093596003, 0.0393650793650793, 0, 0, 0, 0, 0, 0, 0, -0.053052238005546, -0.0551335030085053, 0, 0.0326717054865217, 0.0141472634681456, -0.00875317269186368, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0, 0.0111989473484215, 0.00969857289937745, -0.0822951199797824, 0.0475131096733199, -0.0167984210226323, 0, 0, 0, 0, 0, -0.0533333333333333, -0.0461880215351701, -0.0435464843161453, 0.0251415744421883, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0571754846014129, -0.0495154221385096, 0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754903, 0.0447957893936862, 0.0484928644968872, -0.0548634133198549, 0, -0.0167984210226323, 0.0806324209086351, 0.0227156111999979, -0.0058651455917676, -0.0101587301587302, -0.00327871606028142, 0.0304761904761905, 0.0271262983619253, 0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, 0.0729347689341683, 0.0205470434274512, -0.00530522380055458, -0.00918891716808423, 0.031634242810373, -0.00816792637163039, -0.0141472634681456, -0.00875317269186365, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382571, 0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754904, -0.0447957893936862, 0.0484928644968873, 0.0548634133198549, 0, -0.0167984210226323, -0.0806324209086351, 0.0227156111999979, 0.0058651455917676, -0.0101587301587302, -0.00327871606028142, -0.0304761904761905, 0.0271262983619253, -0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, -0.0729347689341683, 0.0205470434274512, 0.00530522380055459, -0.00918891716808424, 0.031634242810373, 0.00816792637163042, -0.0141472634681456, 0.00875317269186367, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0.0144577788584968, 0, -0.00323285763312585, 0, -0.0950262193466398, -0.0167984210226323, 0, 0, 0, 0, -0.0688530372659096, 0, 0.01539600717839, 0, -0.0502831488843767, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0738132332242036, 0, 0.0165051407128365, 0, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754903, -0.0447957893936862, -0.00969857289937743, 0.0548634133198549, 0.03167540644888, 0.0391963157194754, 0.0806324209086351, 0, 0.0527863103259086, 0.0609523809523809, 0.0229510124219699, 0.0101587301587302, 0.0168622935763319, -0.0124418526617558, -0.00718330698348239, -0.013968253968254, 0, 0.0724831561155734, 0.0357346778758831, -0.0118628410538899, -0.0228300482527235, -0.00810386321490759, 0.0114150241263618, -0.00530522380055459, -0.0112308987609918, -0.00395428035129662, -0.00102099079645379, -0.0035368158670364, 0.00125045324169481, 0.000721949515701537, 0.00204198159290762},
    {0.0439885919382571, 0.139104141588614, -0.080311813591578, -0.0567890279999947, -0.0433733365754904, 0.0447957893936862, -0.00969857289937742, -0.0548634133198549, 0.0316754064488799, 0.0391963157194754, -0.0806324209086351, 0, -0.0527863103259086, 0.060952380952381, 0.0229510124219699, -0.0101587301587302, 0.0168622935763319, 0.0124418526617558, -0.00718330698348236, -0.013968253968254, 0, -0.0724831561155734, 0.0357346778758831, 0.0118628410538899, -0.0228300482527236, 0.00810386321490761, 0.0114150241263618, 0.00530522380055459, -0.0112308987609918, -0.00395428035129662, 0.00102099079645379, -0.0035368158670364, -0.0012504532416948, 0.000721949515701528, 0.0020419815929076},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0.0144577788584968, 0, -0.0614242950293905, 0, -0.0633508128977598, 0.0391963157194754, 0, -0.0681468335999936, 0, -0.0914285714285715, 0.00983614818084423, 0, 0.0285925847598672, 0, 0.0143666139669647, -0.0139682539682539, 0, 0, -0.0714693557517662, 0, 0.0456600965054471, 0, 0.0182640386021788, 0, 0.0040839631858152, -0.00263618690086443, 0, -0.00471575448938186, 0, -0.00144389903140306, 0.00204198159290759},
    {0.351908735506058, 0, 0, 0, -0.115662230867974, 0, -0.129314305325032, 0, 0, -0.134387368181059, 0, -0.0908624447999914, 0, 0.0406349206349206, -0.0786891854467539, 0, -0.0879771838765144, 0, 0, 0.0711111111111111, 0, 0, 0, 0, 0, 0, -0.0821881737098047, 0, 0.0367556686723369, 0.0210894952069153, 0, 0.0235787724469093, 0, 0, -0.0122518895574456}};
    
    // Interesting (new) part
    // Tables of derivatives of the polynomial base (transpose)
    const static double dmats0[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {6.32455532033677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 11.2249721603218, 0, 0, 0, 1.70793006049707e-14, 0, 0, 1.16063842564573e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.58257569495585, 0, 8.36660026534076, -1.18321595661992, 0, 0, 1.04642314135461e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.74165738677394, 0, 0, 8.69482604771366, 0, 0, 0, -1.66625972279159e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.49909083394701, 0, -3.34664010613631, -2.36643191323985, 15.4919333848297, 0, 0.692820323027549, 0, 0.56568542494924, 0.400000000000009, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 4.89897948556635, 0, 0, 0, 14.1985914794391, 0, -0.828078671210828, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.60000000000001, 0, 8.76356092008266, -1.54919333848296, 0, 0, 9.52470471983254, 0, -1.48131215963609, 0.261861468283193, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 4.24264068711929, 0, 0, 0, 0, 0, 14.3427433120127, 2.84156378982381e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.11769145362398, 0, 3.16227766016838, 4.91934955049954, 0, 0, 0, -1.2538531175753e-14, 10.690449676497, -2.41897262725905, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.54558441227157, 0, 0, 7.66811580507232, 0, 0, 0, 0, 0, 10.3691851174526, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 11.6057691494799, 0, 0, 0, -4.20458932936041, 0, -3.43303281162798, 0, 0, 19.6214168703486, 0, 0.611677741841197, 0, 0, 0.529728463363978, 0, 0.432521479156785, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.53137212479103, 0, 3.54562104171167, -2.50713268211203, 4.78713553878169, 0, -5.56626745075493, 0, -1.04880884817015, 0.741619848709563, 0, 18.8034951158403, 0, 1.68183573174416, -0.603122387046455, 0, 0.701283781217662, 0, 0.132137494528683, -0.0934353184302337, 0, 0, 0, 0, -2.04851899834062e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.12802291379194e-14, 2.59512887494071, 0, 0, 0, 10.0285307284481, 1.48509074345102e-14, -0.767649473578742, 0, 0, 0, 0, 16.4130361329658, 0, 0, -1.26347611061158, 0, 0.0967147429123335, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.96647939483827, 0, 8.12403840463597, -1.64130361329658, 0, 0, 11.7728501222091, 0, -2.40312296813959, 0.485504156227609, 0, 0, 0, 10.2761860629321, 0, 0, -1.48323969741914, 0, 0.30276503540975, -0.0611677741841184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.05298244095217, 0, -1.58564993434419, 4.4848952846511, 4.28174419288837, 0, 0.191485421551264, 0, -3.75233260785875, -4.31161222746203, 0, 0, 0, 0, 18.8807171866294, 0, 0.844371341865038, 0, 1.18187368057056, 1.04463861754668, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 2.32115382989598, 0, 0, 0, 3.92428337406973, 0, 5.49285249860476, 1.21484853427001e-14, 0, 0, 0, 0, 0, 0, 17.3044631365565, 0, -1.73008591662714, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.65329983228433, 0, 4.15220619990513, 2.93605316083776, 0, 0, 2.63248931621764, 0, 9.82591326180785, -2.8226127713774, 0, 0, 0, 0, 0, 0, 11.6081867662439, 0, -3.09487177319466, 0.683876505540249, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 2.01017818278148, 0, 0, 0, 0, 0, 8.91928088068602, 1.76356325376492e-14, 0, 0, 0, 0, 0, 0, 0, 0, 16.8558564884489, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.29782505861521, 0, 1.49829835452879, 5.50917601898535, 0, 0, 0, 0, 6.64803945320938, 4.13676892548485, 0, 0, 0, 0, 0, 0, 0, 0, 12.5636136423842, -3.55352656109507, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87616630392938, 0, 0, 6.2283092998577, 0, 0, 0, 0, 0, 11.0541524195338, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11.6057691494799, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    const static double dmats1[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.16227766016838, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.47722557505166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.95803989154981, 5.61248608016091, -1.08012344973464, -0.763762615825977, 0, 1.12766252988532e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.29128784747793, 7.24568837309472, 4.18330013267038, -0.591607978309962, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-2.64575131106459, 0, 9.66091783079296, 0.683130051063976, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87082869338697, 0, 0, 4.34741302385683, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.24037034920392, 0, 0, 7.52994023880667, 0, 0, 0, -1.40420976242894e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.74954541697351, 5.79655069847578, -1.67332005306815, -1.18321595661993, 7.74596669241484, -1.2, 0.346410161513776, -0.979795897113278, 0.282842712474625, 0.200000000000005, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.32379000772444, 2.44948974278317, 2.82842712474619, -0.999999999999997, 9.16515138991168, 7.09929573971955, -2.04939015319192, -0.414039335605417, -0.478091443733761, 0.169030850945703, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.80000000000001, -5.69209978830309, 4.38178046004133, -0.77459666924148, 0, 10.998181667894, 4.76235235991628, 0.962140470884725, -0.740656079818049, 0.130930734141596, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.19615242270664, 0, -3.16227766016837, -2.23606797749979, 0, 0, 13.7477270848675, 0, 0.534522483824846, 0.377964473009225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.01246117974981, 2.12132034355964, -0.408248290463859, 3.17542648054293, 0, 0, 0, 7.17137165600634, -1.3801311186847, -1.56144011671765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.55884572681199, 2.73861278752583, 1.5811388300842, 2.45967477524977, 0, 0, 0, 9.2582009977255, 5.3452248382485, -1.20948631362952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-1.79999999999999, 0, 3.65148371670111, -2.84018778721876, 0, 0, 0, 0, 12.3442679969673, 1.39659449751036, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.27279220613578, 0, 0, 3.83405790253616, 0, 0, 0, 0, 0, 5.18459255872629, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.20454076850485, 0, 0, 6.64078308635359, 0, 0, 0, 0, 0, 8.97997772825746, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.56904651573303, 5.80288457473998, -2.01017818278148, -1.42141062443803, 8.14215222512715, -2.10229466468021, 0.728256234341421, -1.71651640581399, 0.594618725379067, 0.420458932936047, 9.81070843517429, -1.18450885369836, 0.3058388709206, -0.105945692672795, -1.02581475831036, 0.264864231681991, -0.0917516612761804, 0.216260739578394, -0.0749149177264392, -0.0529728463363962, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.26568606239552, 3.07059789431495, 1.77281052085584, -1.25356634105601, 2.39356776939085, 6.30376871403133, -2.78313372537746, -0.908295106229249, -0.524404424085077, 0.370809924354783, 11.1242977306435, 9.40174755792013, -2.42752078113806, 0.840917865872083, -0.301561193523227, -0.794200206656967, 0.350641890608831, 0.114434427054266, 0.0660687472643429, -0.0467176592151151, 0, 0, 0, 1.18413955033316e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.91485421551268, 1.29756443747035, 3.74574588632197, -1.05945692672795, -8.09173593712687, 5.01426536422407, 1.80936716113936, -0.383824736789366, -1.1080065755349, 0.313391585264, 0, 12.7134831207354, 8.2065180664829, -2.84282124887606, 1.01946290306866, -0.631738055305791, -0.227958835180081, 0.0483573714561658, 0.139595707137601, -0.0394836284566112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741914, 7.03562363973515, 4.06201920231798, -0.820651806648292, 0, -6.79705818718658, 5.88642506110457, -2.08116553882674, -1.2015614840698, 0.242752078113806, 0, 0, 14.8323969741913, 5.13809303146605, 0, 0.856348838577678, -0.741619848709567, 0.262202212042541, 0.151382517704874, -0.0305838870920586, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-3.42539535431071, 0, 9.38083151964686, 1.89521416591737, 0, 1.48502651407619e-14, -3.39852909359332, 0, -2.77488738510233, -0.560611910581396, 0, 0, 0, 17.7988763690296, 0, 0, 0.42817441928884, 0, 0.349602949390053, 0.0706304617818605, 0, 0, 0, 0, -1.76908227133537e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.02649122047609, 2.74642624930238, -0.792824967172093, 2.24244764232555, 2.14087209644419, -0.331662479035538, 0.095742710775634, 6.49923072370876, -1.87616630392936, -2.15580611373101, 0, 0, 0, 0, 9.44035859331469, -1.46249406456536, 0.42218567093252, -2.04706526287664, 0.59093684028528, 0.522319308773337, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.71269767715535, 1.16057691494799, 1.34011878852098, 1.89521416591738, 2.53311402559511, 1.96214168703486, -0.566421515598881, 2.74642624930237, 3.17129986868837, -1.82198870938951, 0, 0, 0, 0, 11.1699829238239, 8.65223156827827, -2.49768411251822, -0.865042958313569, -0.998865569685858, 0.441440386136648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.32664991614216, -2.69693703815182, 2.07610309995257, 1.46802658041888, 0, 3.03973683071413, 1.31624465810882, -6.382117875081, 4.91295663090391, -1.4113063856887, 0, 0, 0, 0, 0, 13.4039795085887, 5.80409338312195, 2.01017818278147, -1.54743588659732, 0.341938252770131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.82970843102535, 0, -1.49829835452879, 4.23782770691181, 0, 0, 3.79967103839267, 0, -3.54562104171168, -4.07409060843206, 0, 0, 0, 0, 0, 0, 16.7549743857359, 0, 1.11676565710082, 0.987090711415304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741913, 1.00508909139074, -0.193429485824663, 3.55615782880925, 0, 0, 0, 4.459640440343, -0.858258202906983, 2.67027285925187, 0, 0, 0, 0, 0, 0, 0, 8.42792824422443, -1.62195554683794, -2.29379153190448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.14891252930761, 1.29756443747036, 0.749149177264399, 2.75458800949267, 0, 0, 0, 5.75737105184053, 3.3240197266047, 2.06838446274242, 0, 0, 0, 0, 0, 0, 0, 10.8804085776374, 6.2818068211921, -1.77676328054753, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.02006749648391e-14, 0, 0},
    {-1.32664991614216, 0, 1.73008591662714, -3.18072425757422, 0, 0, 0, 1.15266449376351e-14, 7.67649473578738, -2.38836465270397, 0, 0, 0, 0, 0, 0, 0, 0, 14.5072114368499, 2.05162951662072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.938083151964688, 0, 0, 3.11415464992885, 0, 0, 0, 0, 0, 5.52707620976692, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.80288457473997, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.6248076809272, 0, 0, 5.39387407630363, 0, 0, 0, 0, 0, 9.57317681262152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10.0508909139073, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    const static double dmats2[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.16227766016838, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.82574185835056, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.16397779494323, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.95803989154981, 5.61248608016091, -1.08012344973464, -0.763762615825976, 0, 1.39411605579536e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.29128784747792, 1.44913767461894, 4.18330013267038, -0.591607978309961, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.3228756555323, 0, 3.86436713231718, -0.341565025531985, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87082869338697, 7.09929573971954, 0, 4.34741302385683, 0, 1.2137796469483e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.08012344973464, 0, 7.09929573971954, 2.50998007960223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-3.81881307912987, 0, 0, 8.87411967464942, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.74954541697351, 5.79655069847578, -1.67332005306815, -1.18321595661993, 7.74596669241484, -1.19999999999999, 0.346410161513777, -0.97979589711328, 0.282842712474624, 0.200000000000005, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.32379000772445, 2.44948974278317, 2.82842712474619, -0.999999999999998, 1.30930734141596, 7.09929573971955, -2.04939015319192, -0.414039335605417, -0.478091443733761, 0.169030850945707, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.80000000000001, 0.632455532033672, 4.38178046004133, -0.774596669241482, 0, 3.14233761939829, 4.76235235991627, -0.106904496764972, -0.740656079818045, 0.130930734141597, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.03923048454133, 0, 3.16227766016838, -0.447213595499956, 0, 0, 5.8918830363718, 0, -0.534522483824849, 0.0755928946018436, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.0124611797498, 2.12132034355964, -0.408248290463861, 3.17542648054293, 9.07114735222144, 0, 0, 7.17137165600635, -1.3801311186847, -1.56144011671765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.558845726812, 0.547722557505166, 1.5811388300842, 2.45967477524977, 0, 9.07114735222146, 0, 1.85164019954509, 5.34522483824849, -1.20948631362952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.900000000000005, 0, 1.46059348668045, 1.42009389360939, 0, 0, 9.07114735222146, 0, 4.93770719878694, -0.698297248755174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.27279220613578, -6.26099033699941, 0, 3.83405790253616, 0, -1.33471233241901e-14, 0, 10.5830052442584, 1.61529151756054e-14, 5.18459255872629, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.734846922834955, 0, -6.26099033699941, 2.21359436211787, 0, 0, 0, 0, 10.5830052442584, 2.99332590941916, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.7157676649773, 0, 0, -4.69574275274955, 0, 0, 0, 0, 0, 12.69960629311, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.56904651573303, 5.80288457473998, -2.01017818278148, -1.42141062443803, 8.14215222512715, -2.10229466468021, 0.72825623434142, -1.71651640581399, 0.594618725379067, 0.420458932936046, 9.81070843517429, -1.18450885369836, 0.305838870920599, -0.105945692672794, -1.02581475831036, 0.264864231681991, -0.0917516612761805, 0.216260739578394, -0.0749149177264392, -0.052972846336396, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.26568606239552, 3.07059789431495, 1.77281052085584, -1.25356634105602, 2.39356776939084, 6.30376871403133, -2.78313372537746, -0.908295106229248, -0.524404424085073, 0.370809924354783, 1.23603308118261, 9.40174755792013, -2.42752078113806, 0.840917865872083, -0.301561193523226, -0.794200206656968, 0.350641890608831, 0.114434427054266, 0.0660687472643423, -0.0467176592151165, 0, 0, 0, 1.09746923696279e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.91485421551268, 1.29756443747035, 3.74574588632197, -1.05945692672795, 0.404586796856347, 5.01426536422407, 1.80936716113937, -0.383824736789372, -1.1080065755349, 0.313391585264004, 0, 2.82521847127454, 8.2065180664829, -2.84282124887606, -0.0509731451534344, -0.631738055305788, -0.227958835180082, 0.0483573714561684, 0.139595707137601, -0.039483628456609, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741914, 0.335029697130247, 4.06201920231798, -0.820651806648289, 0, 1.69926454679664, 5.88642506110457, -0.099103120896514, -1.2015614840698, 0.242752078113805, 0, 0, 4.94413232473044, 5.13809303146605, 0, -0.214087209644418, -0.741619848709568, 0.0124858196210747, 0.151382517704876, -0.0305838870920584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.856348838577678, 0, 2.68023757704196, -0.473803541479345, 0, 0, 5.09779364038992, 0, -0.792824967172097, 0.140152977645345, 0, 0, 0, 7.91061171956871, 0, 0, -0.642261628933257, 0, 0.0998865569685871, -0.0176576154454654, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.02649122047609, 2.74642624930238, -0.792824967172095, 2.24244764232555, 2.14087209644419, -0.331662479035546, 0.0957427107756332, 6.49923072370876, -1.87616630392937, -2.15580611373101, 11.0554159678513, 0, 0, 0, 9.44035859331468, -1.46249406456535, 0.42218567093252, -2.04706526287664, 0.59093684028528, 0.522319308773341, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.71269767715534, 1.16057691494799, 1.34011878852098, 1.89521416591737, 0.36187343222787, 1.96214168703486, -0.566421515598891, 2.74642624930238, 3.17129986868838, -1.82198870938951, 0, 11.0554159678513, 0, 0, 1.59571184626056, 8.65223156827827, -2.49768411251822, -0.865042958313572, -0.998865569685858, 0.441440386136647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.32664991614217, 0.299659670905757, 2.07610309995256, 1.46802658041888, 0, 0.868496237346881, 1.31624465810882, 0.709124208342336, 4.91295663090392, -1.4113063856887, 0, 0, 11.0554159678513, 0, 0, 3.82970843102535, 5.80409338312195, -0.223353131420161, -1.54743588659733, 0.341938252770126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.765941686205071, 0, 1.49829835452879, 0.847565541382364, 0, 0, 1.62843044502542, 0, 3.54562104171167, -0.814818121686411, 0, 0, 0, 11.0554159678513, 0, 0, 7.18070330817254, 0, -1.11676565710082, 0.197418142283063, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741914, 1.00508909139074, -0.193429485824663, 3.55615782880926, -8.46157280212812, 0, 0, 4.45964044034301, -0.858258202906987, 2.67027285925186, 0, 0, 0, 0, 12.4373429638327, 0, 0, 8.42792824422443, -1.62195554683794, -2.29379153190448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.1489125293076, 0.259512887494073, 0.749149177264395, 2.75458800949267, 0, -8.46157280212812, 0, 1.15147421036811, 3.32401972660469, 2.06838446274243, 0, 0, 0, 0, 0, 12.4373429638327, 0, 2.17608171552749, 6.2818068211921, -1.77676328054754, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.663324958071074, 0, 0.692034366650849, 1.59036212878711, 0, 0, -8.46157280212813, 0, 3.07059789431495, 1.19418232635198, 0, 0, 0, 0, 0, 0, 12.4373429638327, 0, 5.80288457473997, -1.02581475831036, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.938083151964688, 7.62808987244126, 0, 3.11415464992885, 0, 0, 0, -7.5213980463361, 0, 5.52707620976691, 0, 0, 0, 0, 0, 0, 0, 14.2141062443803, 0, 5.80288457473998, 0, 0, 0, 0, 0, 1.03455020940032e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.541602560309059, 0, 7.62808987244125, 1.79795802543454, 0, 0, 0, 0, -7.52139804633611, 3.1910589375405, 0, 0, 0, 0, 0, 0, 0, 0, 14.2141062443803, 3.35029697130244, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-5.36159180343549, 0, 0, 8.8994381845148, 0, 0, 0, 0, -1.07784467308941e-14, -5.26497863243527, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16.583123951777, 0, 0, 0, 0, 0, 1.2461107758246e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    // Compute reference derivatives
    // Declare pointer to array of derivatives on FIAT element
    double *derivatives = new double [num_derivatives];
    
    // Declare coefficients
    double coeff0_0 = 0;
    double coeff0_1 = 0;
    double coeff0_2 = 0;
    double coeff0_3 = 0;
    double coeff0_4 = 0;
    double coeff0_5 = 0;
    double coeff0_6 = 0;
    double coeff0_7 = 0;
    double coeff0_8 = 0;
    double coeff0_9 = 0;
    double coeff0_10 = 0;
    double coeff0_11 = 0;
    double coeff0_12 = 0;
    double coeff0_13 = 0;
    double coeff0_14 = 0;
    double coeff0_15 = 0;
    double coeff0_16 = 0;
    double coeff0_17 = 0;
    double coeff0_18 = 0;
    double coeff0_19 = 0;
    double coeff0_20 = 0;
    double coeff0_21 = 0;
    double coeff0_22 = 0;
    double coeff0_23 = 0;
    double coeff0_24 = 0;
    double coeff0_25 = 0;
    double coeff0_26 = 0;
    double coeff0_27 = 0;
    double coeff0_28 = 0;
    double coeff0_29 = 0;
    double coeff0_30 = 0;
    double coeff0_31 = 0;
    double coeff0_32 = 0;
    double coeff0_33 = 0;
    double coeff0_34 = 0;
    
    // Declare new coefficients
    double new_coeff0_0 = 0;
    double new_coeff0_1 = 0;
    double new_coeff0_2 = 0;
    double new_coeff0_3 = 0;
    double new_coeff0_4 = 0;
    double new_coeff0_5 = 0;
    double new_coeff0_6 = 0;
    double new_coeff0_7 = 0;
    double new_coeff0_8 = 0;
    double new_coeff0_9 = 0;
    double new_coeff0_10 = 0;
    double new_coeff0_11 = 0;
    double new_coeff0_12 = 0;
    double new_coeff0_13 = 0;
    double new_coeff0_14 = 0;
    double new_coeff0_15 = 0;
    double new_coeff0_16 = 0;
    double new_coeff0_17 = 0;
    double new_coeff0_18 = 0;
    double new_coeff0_19 = 0;
    double new_coeff0_20 = 0;
    double new_coeff0_21 = 0;
    double new_coeff0_22 = 0;
    double new_coeff0_23 = 0;
    double new_coeff0_24 = 0;
    double new_coeff0_25 = 0;
    double new_coeff0_26 = 0;
    double new_coeff0_27 = 0;
    double new_coeff0_28 = 0;
    double new_coeff0_29 = 0;
    double new_coeff0_30 = 0;
    double new_coeff0_31 = 0;
    double new_coeff0_32 = 0;
    double new_coeff0_33 = 0;
    double new_coeff0_34 = 0;
    
    // Loop possible derivatives
    for (unsigned int deriv_num = 0; deriv_num < num_derivatives; deriv_num++)
    {
      // Get values from coefficients array
      new_coeff0_0 = coefficients0[dof][0];
      new_coeff0_1 = coefficients0[dof][1];
      new_coeff0_2 = coefficients0[dof][2];
      new_coeff0_3 = coefficients0[dof][3];
      new_coeff0_4 = coefficients0[dof][4];
      new_coeff0_5 = coefficients0[dof][5];
      new_coeff0_6 = coefficients0[dof][6];
      new_coeff0_7 = coefficients0[dof][7];
      new_coeff0_8 = coefficients0[dof][8];
      new_coeff0_9 = coefficients0[dof][9];
      new_coeff0_10 = coefficients0[dof][10];
      new_coeff0_11 = coefficients0[dof][11];
      new_coeff0_12 = coefficients0[dof][12];
      new_coeff0_13 = coefficients0[dof][13];
      new_coeff0_14 = coefficients0[dof][14];
      new_coeff0_15 = coefficients0[dof][15];
      new_coeff0_16 = coefficients0[dof][16];
      new_coeff0_17 = coefficients0[dof][17];
      new_coeff0_18 = coefficients0[dof][18];
      new_coeff0_19 = coefficients0[dof][19];
      new_coeff0_20 = coefficients0[dof][20];
      new_coeff0_21 = coefficients0[dof][21];
      new_coeff0_22 = coefficients0[dof][22];
      new_coeff0_23 = coefficients0[dof][23];
      new_coeff0_24 = coefficients0[dof][24];
      new_coeff0_25 = coefficients0[dof][25];
      new_coeff0_26 = coefficients0[dof][26];
      new_coeff0_27 = coefficients0[dof][27];
      new_coeff0_28 = coefficients0[dof][28];
      new_coeff0_29 = coefficients0[dof][29];
      new_coeff0_30 = coefficients0[dof][30];
      new_coeff0_31 = coefficients0[dof][31];
      new_coeff0_32 = coefficients0[dof][32];
      new_coeff0_33 = coefficients0[dof][33];
      new_coeff0_34 = coefficients0[dof][34];
    
      // Loop derivative order
      for (unsigned int j = 0; j < n; j++)
      {
        // Update old coefficients
        coeff0_0 = new_coeff0_0;
        coeff0_1 = new_coeff0_1;
        coeff0_2 = new_coeff0_2;
        coeff0_3 = new_coeff0_3;
        coeff0_4 = new_coeff0_4;
        coeff0_5 = new_coeff0_5;
        coeff0_6 = new_coeff0_6;
        coeff0_7 = new_coeff0_7;
        coeff0_8 = new_coeff0_8;
        coeff0_9 = new_coeff0_9;
        coeff0_10 = new_coeff0_10;
        coeff0_11 = new_coeff0_11;
        coeff0_12 = new_coeff0_12;
        coeff0_13 = new_coeff0_13;
        coeff0_14 = new_coeff0_14;
        coeff0_15 = new_coeff0_15;
        coeff0_16 = new_coeff0_16;
        coeff0_17 = new_coeff0_17;
        coeff0_18 = new_coeff0_18;
        coeff0_19 = new_coeff0_19;
        coeff0_20 = new_coeff0_20;
        coeff0_21 = new_coeff0_21;
        coeff0_22 = new_coeff0_22;
        coeff0_23 = new_coeff0_23;
        coeff0_24 = new_coeff0_24;
        coeff0_25 = new_coeff0_25;
        coeff0_26 = new_coeff0_26;
        coeff0_27 = new_coeff0_27;
        coeff0_28 = new_coeff0_28;
        coeff0_29 = new_coeff0_29;
        coeff0_30 = new_coeff0_30;
        coeff0_31 = new_coeff0_31;
        coeff0_32 = new_coeff0_32;
        coeff0_33 = new_coeff0_33;
        coeff0_34 = new_coeff0_34;
    
        if(combinations[deriv_num][j] == 0)
        {
          new_coeff0_0 = coeff0_0*dmats0[0][0] + coeff0_1*dmats0[1][0] + coeff0_2*dmats0[2][0] + coeff0_3*dmats0[3][0] + coeff0_4*dmats0[4][0] + coeff0_5*dmats0[5][0] + coeff0_6*dmats0[6][0] + coeff0_7*dmats0[7][0] + coeff0_8*dmats0[8][0] + coeff0_9*dmats0[9][0] + coeff0_10*dmats0[10][0] + coeff0_11*dmats0[11][0] + coeff0_12*dmats0[12][0] + coeff0_13*dmats0[13][0] + coeff0_14*dmats0[14][0] + coeff0_15*dmats0[15][0] + coeff0_16*dmats0[16][0] + coeff0_17*dmats0[17][0] + coeff0_18*dmats0[18][0] + coeff0_19*dmats0[19][0] + coeff0_20*dmats0[20][0] + coeff0_21*dmats0[21][0] + coeff0_22*dmats0[22][0] + coeff0_23*dmats0[23][0] + coeff0_24*dmats0[24][0] + coeff0_25*dmats0[25][0] + coeff0_26*dmats0[26][0] + coeff0_27*dmats0[27][0] + coeff0_28*dmats0[28][0] + coeff0_29*dmats0[29][0] + coeff0_30*dmats0[30][0] + coeff0_31*dmats0[31][0] + coeff0_32*dmats0[32][0] + coeff0_33*dmats0[33][0] + coeff0_34*dmats0[34][0];
          new_coeff0_1 = coeff0_0*dmats0[0][1] + coeff0_1*dmats0[1][1] + coeff0_2*dmats0[2][1] + coeff0_3*dmats0[3][1] + coeff0_4*dmats0[4][1] + coeff0_5*dmats0[5][1] + coeff0_6*dmats0[6][1] + coeff0_7*dmats0[7][1] + coeff0_8*dmats0[8][1] + coeff0_9*dmats0[9][1] + coeff0_10*dmats0[10][1] + coeff0_11*dmats0[11][1] + coeff0_12*dmats0[12][1] + coeff0_13*dmats0[13][1] + coeff0_14*dmats0[14][1] + coeff0_15*dmats0[15][1] + coeff0_16*dmats0[16][1] + coeff0_17*dmats0[17][1] + coeff0_18*dmats0[18][1] + coeff0_19*dmats0[19][1] + coeff0_20*dmats0[20][1] + coeff0_21*dmats0[21][1] + coeff0_22*dmats0[22][1] + coeff0_23*dmats0[23][1] + coeff0_24*dmats0[24][1] + coeff0_25*dmats0[25][1] + coeff0_26*dmats0[26][1] + coeff0_27*dmats0[27][1] + coeff0_28*dmats0[28][1] + coeff0_29*dmats0[29][1] + coeff0_30*dmats0[30][1] + coeff0_31*dmats0[31][1] + coeff0_32*dmats0[32][1] + coeff0_33*dmats0[33][1] + coeff0_34*dmats0[34][1];
          new_coeff0_2 = coeff0_0*dmats0[0][2] + coeff0_1*dmats0[1][2] + coeff0_2*dmats0[2][2] + coeff0_3*dmats0[3][2] + coeff0_4*dmats0[4][2] + coeff0_5*dmats0[5][2] + coeff0_6*dmats0[6][2] + coeff0_7*dmats0[7][2] + coeff0_8*dmats0[8][2] + coeff0_9*dmats0[9][2] + coeff0_10*dmats0[10][2] + coeff0_11*dmats0[11][2] + coeff0_12*dmats0[12][2] + coeff0_13*dmats0[13][2] + coeff0_14*dmats0[14][2] + coeff0_15*dmats0[15][2] + coeff0_16*dmats0[16][2] + coeff0_17*dmats0[17][2] + coeff0_18*dmats0[18][2] + coeff0_19*dmats0[19][2] + coeff0_20*dmats0[20][2] + coeff0_21*dmats0[21][2] + coeff0_22*dmats0[22][2] + coeff0_23*dmats0[23][2] + coeff0_24*dmats0[24][2] + coeff0_25*dmats0[25][2] + coeff0_26*dmats0[26][2] + coeff0_27*dmats0[27][2] + coeff0_28*dmats0[28][2] + coeff0_29*dmats0[29][2] + coeff0_30*dmats0[30][2] + coeff0_31*dmats0[31][2] + coeff0_32*dmats0[32][2] + coeff0_33*dmats0[33][2] + coeff0_34*dmats0[34][2];
          new_coeff0_3 = coeff0_0*dmats0[0][3] + coeff0_1*dmats0[1][3] + coeff0_2*dmats0[2][3] + coeff0_3*dmats0[3][3] + coeff0_4*dmats0[4][3] + coeff0_5*dmats0[5][3] + coeff0_6*dmats0[6][3] + coeff0_7*dmats0[7][3] + coeff0_8*dmats0[8][3] + coeff0_9*dmats0[9][3] + coeff0_10*dmats0[10][3] + coeff0_11*dmats0[11][3] + coeff0_12*dmats0[12][3] + coeff0_13*dmats0[13][3] + coeff0_14*dmats0[14][3] + coeff0_15*dmats0[15][3] + coeff0_16*dmats0[16][3] + coeff0_17*dmats0[17][3] + coeff0_18*dmats0[18][3] + coeff0_19*dmats0[19][3] + coeff0_20*dmats0[20][3] + coeff0_21*dmats0[21][3] + coeff0_22*dmats0[22][3] + coeff0_23*dmats0[23][3] + coeff0_24*dmats0[24][3] + coeff0_25*dmats0[25][3] + coeff0_26*dmats0[26][3] + coeff0_27*dmats0[27][3] + coeff0_28*dmats0[28][3] + coeff0_29*dmats0[29][3] + coeff0_30*dmats0[30][3] + coeff0_31*dmats0[31][3] + coeff0_32*dmats0[32][3] + coeff0_33*dmats0[33][3] + coeff0_34*dmats0[34][3];
          new_coeff0_4 = coeff0_0*dmats0[0][4] + coeff0_1*dmats0[1][4] + coeff0_2*dmats0[2][4] + coeff0_3*dmats0[3][4] + coeff0_4*dmats0[4][4] + coeff0_5*dmats0[5][4] + coeff0_6*dmats0[6][4] + coeff0_7*dmats0[7][4] + coeff0_8*dmats0[8][4] + coeff0_9*dmats0[9][4] + coeff0_10*dmats0[10][4] + coeff0_11*dmats0[11][4] + coeff0_12*dmats0[12][4] + coeff0_13*dmats0[13][4] + coeff0_14*dmats0[14][4] + coeff0_15*dmats0[15][4] + coeff0_16*dmats0[16][4] + coeff0_17*dmats0[17][4] + coeff0_18*dmats0[18][4] + coeff0_19*dmats0[19][4] + coeff0_20*dmats0[20][4] + coeff0_21*dmats0[21][4] + coeff0_22*dmats0[22][4] + coeff0_23*dmats0[23][4] + coeff0_24*dmats0[24][4] + coeff0_25*dmats0[25][4] + coeff0_26*dmats0[26][4] + coeff0_27*dmats0[27][4] + coeff0_28*dmats0[28][4] + coeff0_29*dmats0[29][4] + coeff0_30*dmats0[30][4] + coeff0_31*dmats0[31][4] + coeff0_32*dmats0[32][4] + coeff0_33*dmats0[33][4] + coeff0_34*dmats0[34][4];
          new_coeff0_5 = coeff0_0*dmats0[0][5] + coeff0_1*dmats0[1][5] + coeff0_2*dmats0[2][5] + coeff0_3*dmats0[3][5] + coeff0_4*dmats0[4][5] + coeff0_5*dmats0[5][5] + coeff0_6*dmats0[6][5] + coeff0_7*dmats0[7][5] + coeff0_8*dmats0[8][5] + coeff0_9*dmats0[9][5] + coeff0_10*dmats0[10][5] + coeff0_11*dmats0[11][5] + coeff0_12*dmats0[12][5] + coeff0_13*dmats0[13][5] + coeff0_14*dmats0[14][5] + coeff0_15*dmats0[15][5] + coeff0_16*dmats0[16][5] + coeff0_17*dmats0[17][5] + coeff0_18*dmats0[18][5] + coeff0_19*dmats0[19][5] + coeff0_20*dmats0[20][5] + coeff0_21*dmats0[21][5] + coeff0_22*dmats0[22][5] + coeff0_23*dmats0[23][5] + coeff0_24*dmats0[24][5] + coeff0_25*dmats0[25][5] + coeff0_26*dmats0[26][5] + coeff0_27*dmats0[27][5] + coeff0_28*dmats0[28][5] + coeff0_29*dmats0[29][5] + coeff0_30*dmats0[30][5] + coeff0_31*dmats0[31][5] + coeff0_32*dmats0[32][5] + coeff0_33*dmats0[33][5] + coeff0_34*dmats0[34][5];
          new_coeff0_6 = coeff0_0*dmats0[0][6] + coeff0_1*dmats0[1][6] + coeff0_2*dmats0[2][6] + coeff0_3*dmats0[3][6] + coeff0_4*dmats0[4][6] + coeff0_5*dmats0[5][6] + coeff0_6*dmats0[6][6] + coeff0_7*dmats0[7][6] + coeff0_8*dmats0[8][6] + coeff0_9*dmats0[9][6] + coeff0_10*dmats0[10][6] + coeff0_11*dmats0[11][6] + coeff0_12*dmats0[12][6] + coeff0_13*dmats0[13][6] + coeff0_14*dmats0[14][6] + coeff0_15*dmats0[15][6] + coeff0_16*dmats0[16][6] + coeff0_17*dmats0[17][6] + coeff0_18*dmats0[18][6] + coeff0_19*dmats0[19][6] + coeff0_20*dmats0[20][6] + coeff0_21*dmats0[21][6] + coeff0_22*dmats0[22][6] + coeff0_23*dmats0[23][6] + coeff0_24*dmats0[24][6] + coeff0_25*dmats0[25][6] + coeff0_26*dmats0[26][6] + coeff0_27*dmats0[27][6] + coeff0_28*dmats0[28][6] + coeff0_29*dmats0[29][6] + coeff0_30*dmats0[30][6] + coeff0_31*dmats0[31][6] + coeff0_32*dmats0[32][6] + coeff0_33*dmats0[33][6] + coeff0_34*dmats0[34][6];
          new_coeff0_7 = coeff0_0*dmats0[0][7] + coeff0_1*dmats0[1][7] + coeff0_2*dmats0[2][7] + coeff0_3*dmats0[3][7] + coeff0_4*dmats0[4][7] + coeff0_5*dmats0[5][7] + coeff0_6*dmats0[6][7] + coeff0_7*dmats0[7][7] + coeff0_8*dmats0[8][7] + coeff0_9*dmats0[9][7] + coeff0_10*dmats0[10][7] + coeff0_11*dmats0[11][7] + coeff0_12*dmats0[12][7] + coeff0_13*dmats0[13][7] + coeff0_14*dmats0[14][7] + coeff0_15*dmats0[15][7] + coeff0_16*dmats0[16][7] + coeff0_17*dmats0[17][7] + coeff0_18*dmats0[18][7] + coeff0_19*dmats0[19][7] + coeff0_20*dmats0[20][7] + coeff0_21*dmats0[21][7] + coeff0_22*dmats0[22][7] + coeff0_23*dmats0[23][7] + coeff0_24*dmats0[24][7] + coeff0_25*dmats0[25][7] + coeff0_26*dmats0[26][7] + coeff0_27*dmats0[27][7] + coeff0_28*dmats0[28][7] + coeff0_29*dmats0[29][7] + coeff0_30*dmats0[30][7] + coeff0_31*dmats0[31][7] + coeff0_32*dmats0[32][7] + coeff0_33*dmats0[33][7] + coeff0_34*dmats0[34][7];
          new_coeff0_8 = coeff0_0*dmats0[0][8] + coeff0_1*dmats0[1][8] + coeff0_2*dmats0[2][8] + coeff0_3*dmats0[3][8] + coeff0_4*dmats0[4][8] + coeff0_5*dmats0[5][8] + coeff0_6*dmats0[6][8] + coeff0_7*dmats0[7][8] + coeff0_8*dmats0[8][8] + coeff0_9*dmats0[9][8] + coeff0_10*dmats0[10][8] + coeff0_11*dmats0[11][8] + coeff0_12*dmats0[12][8] + coeff0_13*dmats0[13][8] + coeff0_14*dmats0[14][8] + coeff0_15*dmats0[15][8] + coeff0_16*dmats0[16][8] + coeff0_17*dmats0[17][8] + coeff0_18*dmats0[18][8] + coeff0_19*dmats0[19][8] + coeff0_20*dmats0[20][8] + coeff0_21*dmats0[21][8] + coeff0_22*dmats0[22][8] + coeff0_23*dmats0[23][8] + coeff0_24*dmats0[24][8] + coeff0_25*dmats0[25][8] + coeff0_26*dmats0[26][8] + coeff0_27*dmats0[27][8] + coeff0_28*dmats0[28][8] + coeff0_29*dmats0[29][8] + coeff0_30*dmats0[30][8] + coeff0_31*dmats0[31][8] + coeff0_32*dmats0[32][8] + coeff0_33*dmats0[33][8] + coeff0_34*dmats0[34][8];
          new_coeff0_9 = coeff0_0*dmats0[0][9] + coeff0_1*dmats0[1][9] + coeff0_2*dmats0[2][9] + coeff0_3*dmats0[3][9] + coeff0_4*dmats0[4][9] + coeff0_5*dmats0[5][9] + coeff0_6*dmats0[6][9] + coeff0_7*dmats0[7][9] + coeff0_8*dmats0[8][9] + coeff0_9*dmats0[9][9] + coeff0_10*dmats0[10][9] + coeff0_11*dmats0[11][9] + coeff0_12*dmats0[12][9] + coeff0_13*dmats0[13][9] + coeff0_14*dmats0[14][9] + coeff0_15*dmats0[15][9] + coeff0_16*dmats0[16][9] + coeff0_17*dmats0[17][9] + coeff0_18*dmats0[18][9] + coeff0_19*dmats0[19][9] + coeff0_20*dmats0[20][9] + coeff0_21*dmats0[21][9] + coeff0_22*dmats0[22][9] + coeff0_23*dmats0[23][9] + coeff0_24*dmats0[24][9] + coeff0_25*dmats0[25][9] + coeff0_26*dmats0[26][9] + coeff0_27*dmats0[27][9] + coeff0_28*dmats0[28][9] + coeff0_29*dmats0[29][9] + coeff0_30*dmats0[30][9] + coeff0_31*dmats0[31][9] + coeff0_32*dmats0[32][9] + coeff0_33*dmats0[33][9] + coeff0_34*dmats0[34][9];
          new_coeff0_10 = coeff0_0*dmats0[0][10] + coeff0_1*dmats0[1][10] + coeff0_2*dmats0[2][10] + coeff0_3*dmats0[3][10] + coeff0_4*dmats0[4][10] + coeff0_5*dmats0[5][10] + coeff0_6*dmats0[6][10] + coeff0_7*dmats0[7][10] + coeff0_8*dmats0[8][10] + coeff0_9*dmats0[9][10] + coeff0_10*dmats0[10][10] + coeff0_11*dmats0[11][10] + coeff0_12*dmats0[12][10] + coeff0_13*dmats0[13][10] + coeff0_14*dmats0[14][10] + coeff0_15*dmats0[15][10] + coeff0_16*dmats0[16][10] + coeff0_17*dmats0[17][10] + coeff0_18*dmats0[18][10] + coeff0_19*dmats0[19][10] + coeff0_20*dmats0[20][10] + coeff0_21*dmats0[21][10] + coeff0_22*dmats0[22][10] + coeff0_23*dmats0[23][10] + coeff0_24*dmats0[24][10] + coeff0_25*dmats0[25][10] + coeff0_26*dmats0[26][10] + coeff0_27*dmats0[27][10] + coeff0_28*dmats0[28][10] + coeff0_29*dmats0[29][10] + coeff0_30*dmats0[30][10] + coeff0_31*dmats0[31][10] + coeff0_32*dmats0[32][10] + coeff0_33*dmats0[33][10] + coeff0_34*dmats0[34][10];
          new_coeff0_11 = coeff0_0*dmats0[0][11] + coeff0_1*dmats0[1][11] + coeff0_2*dmats0[2][11] + coeff0_3*dmats0[3][11] + coeff0_4*dmats0[4][11] + coeff0_5*dmats0[5][11] + coeff0_6*dmats0[6][11] + coeff0_7*dmats0[7][11] + coeff0_8*dmats0[8][11] + coeff0_9*dmats0[9][11] + coeff0_10*dmats0[10][11] + coeff0_11*dmats0[11][11] + coeff0_12*dmats0[12][11] + coeff0_13*dmats0[13][11] + coeff0_14*dmats0[14][11] + coeff0_15*dmats0[15][11] + coeff0_16*dmats0[16][11] + coeff0_17*dmats0[17][11] + coeff0_18*dmats0[18][11] + coeff0_19*dmats0[19][11] + coeff0_20*dmats0[20][11] + coeff0_21*dmats0[21][11] + coeff0_22*dmats0[22][11] + coeff0_23*dmats0[23][11] + coeff0_24*dmats0[24][11] + coeff0_25*dmats0[25][11] + coeff0_26*dmats0[26][11] + coeff0_27*dmats0[27][11] + coeff0_28*dmats0[28][11] + coeff0_29*dmats0[29][11] + coeff0_30*dmats0[30][11] + coeff0_31*dmats0[31][11] + coeff0_32*dmats0[32][11] + coeff0_33*dmats0[33][11] + coeff0_34*dmats0[34][11];
          new_coeff0_12 = coeff0_0*dmats0[0][12] + coeff0_1*dmats0[1][12] + coeff0_2*dmats0[2][12] + coeff0_3*dmats0[3][12] + coeff0_4*dmats0[4][12] + coeff0_5*dmats0[5][12] + coeff0_6*dmats0[6][12] + coeff0_7*dmats0[7][12] + coeff0_8*dmats0[8][12] + coeff0_9*dmats0[9][12] + coeff0_10*dmats0[10][12] + coeff0_11*dmats0[11][12] + coeff0_12*dmats0[12][12] + coeff0_13*dmats0[13][12] + coeff0_14*dmats0[14][12] + coeff0_15*dmats0[15][12] + coeff0_16*dmats0[16][12] + coeff0_17*dmats0[17][12] + coeff0_18*dmats0[18][12] + coeff0_19*dmats0[19][12] + coeff0_20*dmats0[20][12] + coeff0_21*dmats0[21][12] + coeff0_22*dmats0[22][12] + coeff0_23*dmats0[23][12] + coeff0_24*dmats0[24][12] + coeff0_25*dmats0[25][12] + coeff0_26*dmats0[26][12] + coeff0_27*dmats0[27][12] + coeff0_28*dmats0[28][12] + coeff0_29*dmats0[29][12] + coeff0_30*dmats0[30][12] + coeff0_31*dmats0[31][12] + coeff0_32*dmats0[32][12] + coeff0_33*dmats0[33][12] + coeff0_34*dmats0[34][12];
          new_coeff0_13 = coeff0_0*dmats0[0][13] + coeff0_1*dmats0[1][13] + coeff0_2*dmats0[2][13] + coeff0_3*dmats0[3][13] + coeff0_4*dmats0[4][13] + coeff0_5*dmats0[5][13] + coeff0_6*dmats0[6][13] + coeff0_7*dmats0[7][13] + coeff0_8*dmats0[8][13] + coeff0_9*dmats0[9][13] + coeff0_10*dmats0[10][13] + coeff0_11*dmats0[11][13] + coeff0_12*dmats0[12][13] + coeff0_13*dmats0[13][13] + coeff0_14*dmats0[14][13] + coeff0_15*dmats0[15][13] + coeff0_16*dmats0[16][13] + coeff0_17*dmats0[17][13] + coeff0_18*dmats0[18][13] + coeff0_19*dmats0[19][13] + coeff0_20*dmats0[20][13] + coeff0_21*dmats0[21][13] + coeff0_22*dmats0[22][13] + coeff0_23*dmats0[23][13] + coeff0_24*dmats0[24][13] + coeff0_25*dmats0[25][13] + coeff0_26*dmats0[26][13] + coeff0_27*dmats0[27][13] + coeff0_28*dmats0[28][13] + coeff0_29*dmats0[29][13] + coeff0_30*dmats0[30][13] + coeff0_31*dmats0[31][13] + coeff0_32*dmats0[32][13] + coeff0_33*dmats0[33][13] + coeff0_34*dmats0[34][13];
          new_coeff0_14 = coeff0_0*dmats0[0][14] + coeff0_1*dmats0[1][14] + coeff0_2*dmats0[2][14] + coeff0_3*dmats0[3][14] + coeff0_4*dmats0[4][14] + coeff0_5*dmats0[5][14] + coeff0_6*dmats0[6][14] + coeff0_7*dmats0[7][14] + coeff0_8*dmats0[8][14] + coeff0_9*dmats0[9][14] + coeff0_10*dmats0[10][14] + coeff0_11*dmats0[11][14] + coeff0_12*dmats0[12][14] + coeff0_13*dmats0[13][14] + coeff0_14*dmats0[14][14] + coeff0_15*dmats0[15][14] + coeff0_16*dmats0[16][14] + coeff0_17*dmats0[17][14] + coeff0_18*dmats0[18][14] + coeff0_19*dmats0[19][14] + coeff0_20*dmats0[20][14] + coeff0_21*dmats0[21][14] + coeff0_22*dmats0[22][14] + coeff0_23*dmats0[23][14] + coeff0_24*dmats0[24][14] + coeff0_25*dmats0[25][14] + coeff0_26*dmats0[26][14] + coeff0_27*dmats0[27][14] + coeff0_28*dmats0[28][14] + coeff0_29*dmats0[29][14] + coeff0_30*dmats0[30][14] + coeff0_31*dmats0[31][14] + coeff0_32*dmats0[32][14] + coeff0_33*dmats0[33][14] + coeff0_34*dmats0[34][14];
          new_coeff0_15 = coeff0_0*dmats0[0][15] + coeff0_1*dmats0[1][15] + coeff0_2*dmats0[2][15] + coeff0_3*dmats0[3][15] + coeff0_4*dmats0[4][15] + coeff0_5*dmats0[5][15] + coeff0_6*dmats0[6][15] + coeff0_7*dmats0[7][15] + coeff0_8*dmats0[8][15] + coeff0_9*dmats0[9][15] + coeff0_10*dmats0[10][15] + coeff0_11*dmats0[11][15] + coeff0_12*dmats0[12][15] + coeff0_13*dmats0[13][15] + coeff0_14*dmats0[14][15] + coeff0_15*dmats0[15][15] + coeff0_16*dmats0[16][15] + coeff0_17*dmats0[17][15] + coeff0_18*dmats0[18][15] + coeff0_19*dmats0[19][15] + coeff0_20*dmats0[20][15] + coeff0_21*dmats0[21][15] + coeff0_22*dmats0[22][15] + coeff0_23*dmats0[23][15] + coeff0_24*dmats0[24][15] + coeff0_25*dmats0[25][15] + coeff0_26*dmats0[26][15] + coeff0_27*dmats0[27][15] + coeff0_28*dmats0[28][15] + coeff0_29*dmats0[29][15] + coeff0_30*dmats0[30][15] + coeff0_31*dmats0[31][15] + coeff0_32*dmats0[32][15] + coeff0_33*dmats0[33][15] + coeff0_34*dmats0[34][15];
          new_coeff0_16 = coeff0_0*dmats0[0][16] + coeff0_1*dmats0[1][16] + coeff0_2*dmats0[2][16] + coeff0_3*dmats0[3][16] + coeff0_4*dmats0[4][16] + coeff0_5*dmats0[5][16] + coeff0_6*dmats0[6][16] + coeff0_7*dmats0[7][16] + coeff0_8*dmats0[8][16] + coeff0_9*dmats0[9][16] + coeff0_10*dmats0[10][16] + coeff0_11*dmats0[11][16] + coeff0_12*dmats0[12][16] + coeff0_13*dmats0[13][16] + coeff0_14*dmats0[14][16] + coeff0_15*dmats0[15][16] + coeff0_16*dmats0[16][16] + coeff0_17*dmats0[17][16] + coeff0_18*dmats0[18][16] + coeff0_19*dmats0[19][16] + coeff0_20*dmats0[20][16] + coeff0_21*dmats0[21][16] + coeff0_22*dmats0[22][16] + coeff0_23*dmats0[23][16] + coeff0_24*dmats0[24][16] + coeff0_25*dmats0[25][16] + coeff0_26*dmats0[26][16] + coeff0_27*dmats0[27][16] + coeff0_28*dmats0[28][16] + coeff0_29*dmats0[29][16] + coeff0_30*dmats0[30][16] + coeff0_31*dmats0[31][16] + coeff0_32*dmats0[32][16] + coeff0_33*dmats0[33][16] + coeff0_34*dmats0[34][16];
          new_coeff0_17 = coeff0_0*dmats0[0][17] + coeff0_1*dmats0[1][17] + coeff0_2*dmats0[2][17] + coeff0_3*dmats0[3][17] + coeff0_4*dmats0[4][17] + coeff0_5*dmats0[5][17] + coeff0_6*dmats0[6][17] + coeff0_7*dmats0[7][17] + coeff0_8*dmats0[8][17] + coeff0_9*dmats0[9][17] + coeff0_10*dmats0[10][17] + coeff0_11*dmats0[11][17] + coeff0_12*dmats0[12][17] + coeff0_13*dmats0[13][17] + coeff0_14*dmats0[14][17] + coeff0_15*dmats0[15][17] + coeff0_16*dmats0[16][17] + coeff0_17*dmats0[17][17] + coeff0_18*dmats0[18][17] + coeff0_19*dmats0[19][17] + coeff0_20*dmats0[20][17] + coeff0_21*dmats0[21][17] + coeff0_22*dmats0[22][17] + coeff0_23*dmats0[23][17] + coeff0_24*dmats0[24][17] + coeff0_25*dmats0[25][17] + coeff0_26*dmats0[26][17] + coeff0_27*dmats0[27][17] + coeff0_28*dmats0[28][17] + coeff0_29*dmats0[29][17] + coeff0_30*dmats0[30][17] + coeff0_31*dmats0[31][17] + coeff0_32*dmats0[32][17] + coeff0_33*dmats0[33][17] + coeff0_34*dmats0[34][17];
          new_coeff0_18 = coeff0_0*dmats0[0][18] + coeff0_1*dmats0[1][18] + coeff0_2*dmats0[2][18] + coeff0_3*dmats0[3][18] + coeff0_4*dmats0[4][18] + coeff0_5*dmats0[5][18] + coeff0_6*dmats0[6][18] + coeff0_7*dmats0[7][18] + coeff0_8*dmats0[8][18] + coeff0_9*dmats0[9][18] + coeff0_10*dmats0[10][18] + coeff0_11*dmats0[11][18] + coeff0_12*dmats0[12][18] + coeff0_13*dmats0[13][18] + coeff0_14*dmats0[14][18] + coeff0_15*dmats0[15][18] + coeff0_16*dmats0[16][18] + coeff0_17*dmats0[17][18] + coeff0_18*dmats0[18][18] + coeff0_19*dmats0[19][18] + coeff0_20*dmats0[20][18] + coeff0_21*dmats0[21][18] + coeff0_22*dmats0[22][18] + coeff0_23*dmats0[23][18] + coeff0_24*dmats0[24][18] + coeff0_25*dmats0[25][18] + coeff0_26*dmats0[26][18] + coeff0_27*dmats0[27][18] + coeff0_28*dmats0[28][18] + coeff0_29*dmats0[29][18] + coeff0_30*dmats0[30][18] + coeff0_31*dmats0[31][18] + coeff0_32*dmats0[32][18] + coeff0_33*dmats0[33][18] + coeff0_34*dmats0[34][18];
          new_coeff0_19 = coeff0_0*dmats0[0][19] + coeff0_1*dmats0[1][19] + coeff0_2*dmats0[2][19] + coeff0_3*dmats0[3][19] + coeff0_4*dmats0[4][19] + coeff0_5*dmats0[5][19] + coeff0_6*dmats0[6][19] + coeff0_7*dmats0[7][19] + coeff0_8*dmats0[8][19] + coeff0_9*dmats0[9][19] + coeff0_10*dmats0[10][19] + coeff0_11*dmats0[11][19] + coeff0_12*dmats0[12][19] + coeff0_13*dmats0[13][19] + coeff0_14*dmats0[14][19] + coeff0_15*dmats0[15][19] + coeff0_16*dmats0[16][19] + coeff0_17*dmats0[17][19] + coeff0_18*dmats0[18][19] + coeff0_19*dmats0[19][19] + coeff0_20*dmats0[20][19] + coeff0_21*dmats0[21][19] + coeff0_22*dmats0[22][19] + coeff0_23*dmats0[23][19] + coeff0_24*dmats0[24][19] + coeff0_25*dmats0[25][19] + coeff0_26*dmats0[26][19] + coeff0_27*dmats0[27][19] + coeff0_28*dmats0[28][19] + coeff0_29*dmats0[29][19] + coeff0_30*dmats0[30][19] + coeff0_31*dmats0[31][19] + coeff0_32*dmats0[32][19] + coeff0_33*dmats0[33][19] + coeff0_34*dmats0[34][19];
          new_coeff0_20 = coeff0_0*dmats0[0][20] + coeff0_1*dmats0[1][20] + coeff0_2*dmats0[2][20] + coeff0_3*dmats0[3][20] + coeff0_4*dmats0[4][20] + coeff0_5*dmats0[5][20] + coeff0_6*dmats0[6][20] + coeff0_7*dmats0[7][20] + coeff0_8*dmats0[8][20] + coeff0_9*dmats0[9][20] + coeff0_10*dmats0[10][20] + coeff0_11*dmats0[11][20] + coeff0_12*dmats0[12][20] + coeff0_13*dmats0[13][20] + coeff0_14*dmats0[14][20] + coeff0_15*dmats0[15][20] + coeff0_16*dmats0[16][20] + coeff0_17*dmats0[17][20] + coeff0_18*dmats0[18][20] + coeff0_19*dmats0[19][20] + coeff0_20*dmats0[20][20] + coeff0_21*dmats0[21][20] + coeff0_22*dmats0[22][20] + coeff0_23*dmats0[23][20] + coeff0_24*dmats0[24][20] + coeff0_25*dmats0[25][20] + coeff0_26*dmats0[26][20] + coeff0_27*dmats0[27][20] + coeff0_28*dmats0[28][20] + coeff0_29*dmats0[29][20] + coeff0_30*dmats0[30][20] + coeff0_31*dmats0[31][20] + coeff0_32*dmats0[32][20] + coeff0_33*dmats0[33][20] + coeff0_34*dmats0[34][20];
          new_coeff0_21 = coeff0_0*dmats0[0][21] + coeff0_1*dmats0[1][21] + coeff0_2*dmats0[2][21] + coeff0_3*dmats0[3][21] + coeff0_4*dmats0[4][21] + coeff0_5*dmats0[5][21] + coeff0_6*dmats0[6][21] + coeff0_7*dmats0[7][21] + coeff0_8*dmats0[8][21] + coeff0_9*dmats0[9][21] + coeff0_10*dmats0[10][21] + coeff0_11*dmats0[11][21] + coeff0_12*dmats0[12][21] + coeff0_13*dmats0[13][21] + coeff0_14*dmats0[14][21] + coeff0_15*dmats0[15][21] + coeff0_16*dmats0[16][21] + coeff0_17*dmats0[17][21] + coeff0_18*dmats0[18][21] + coeff0_19*dmats0[19][21] + coeff0_20*dmats0[20][21] + coeff0_21*dmats0[21][21] + coeff0_22*dmats0[22][21] + coeff0_23*dmats0[23][21] + coeff0_24*dmats0[24][21] + coeff0_25*dmats0[25][21] + coeff0_26*dmats0[26][21] + coeff0_27*dmats0[27][21] + coeff0_28*dmats0[28][21] + coeff0_29*dmats0[29][21] + coeff0_30*dmats0[30][21] + coeff0_31*dmats0[31][21] + coeff0_32*dmats0[32][21] + coeff0_33*dmats0[33][21] + coeff0_34*dmats0[34][21];
          new_coeff0_22 = coeff0_0*dmats0[0][22] + coeff0_1*dmats0[1][22] + coeff0_2*dmats0[2][22] + coeff0_3*dmats0[3][22] + coeff0_4*dmats0[4][22] + coeff0_5*dmats0[5][22] + coeff0_6*dmats0[6][22] + coeff0_7*dmats0[7][22] + coeff0_8*dmats0[8][22] + coeff0_9*dmats0[9][22] + coeff0_10*dmats0[10][22] + coeff0_11*dmats0[11][22] + coeff0_12*dmats0[12][22] + coeff0_13*dmats0[13][22] + coeff0_14*dmats0[14][22] + coeff0_15*dmats0[15][22] + coeff0_16*dmats0[16][22] + coeff0_17*dmats0[17][22] + coeff0_18*dmats0[18][22] + coeff0_19*dmats0[19][22] + coeff0_20*dmats0[20][22] + coeff0_21*dmats0[21][22] + coeff0_22*dmats0[22][22] + coeff0_23*dmats0[23][22] + coeff0_24*dmats0[24][22] + coeff0_25*dmats0[25][22] + coeff0_26*dmats0[26][22] + coeff0_27*dmats0[27][22] + coeff0_28*dmats0[28][22] + coeff0_29*dmats0[29][22] + coeff0_30*dmats0[30][22] + coeff0_31*dmats0[31][22] + coeff0_32*dmats0[32][22] + coeff0_33*dmats0[33][22] + coeff0_34*dmats0[34][22];
          new_coeff0_23 = coeff0_0*dmats0[0][23] + coeff0_1*dmats0[1][23] + coeff0_2*dmats0[2][23] + coeff0_3*dmats0[3][23] + coeff0_4*dmats0[4][23] + coeff0_5*dmats0[5][23] + coeff0_6*dmats0[6][23] + coeff0_7*dmats0[7][23] + coeff0_8*dmats0[8][23] + coeff0_9*dmats0[9][23] + coeff0_10*dmats0[10][23] + coeff0_11*dmats0[11][23] + coeff0_12*dmats0[12][23] + coeff0_13*dmats0[13][23] + coeff0_14*dmats0[14][23] + coeff0_15*dmats0[15][23] + coeff0_16*dmats0[16][23] + coeff0_17*dmats0[17][23] + coeff0_18*dmats0[18][23] + coeff0_19*dmats0[19][23] + coeff0_20*dmats0[20][23] + coeff0_21*dmats0[21][23] + coeff0_22*dmats0[22][23] + coeff0_23*dmats0[23][23] + coeff0_24*dmats0[24][23] + coeff0_25*dmats0[25][23] + coeff0_26*dmats0[26][23] + coeff0_27*dmats0[27][23] + coeff0_28*dmats0[28][23] + coeff0_29*dmats0[29][23] + coeff0_30*dmats0[30][23] + coeff0_31*dmats0[31][23] + coeff0_32*dmats0[32][23] + coeff0_33*dmats0[33][23] + coeff0_34*dmats0[34][23];
          new_coeff0_24 = coeff0_0*dmats0[0][24] + coeff0_1*dmats0[1][24] + coeff0_2*dmats0[2][24] + coeff0_3*dmats0[3][24] + coeff0_4*dmats0[4][24] + coeff0_5*dmats0[5][24] + coeff0_6*dmats0[6][24] + coeff0_7*dmats0[7][24] + coeff0_8*dmats0[8][24] + coeff0_9*dmats0[9][24] + coeff0_10*dmats0[10][24] + coeff0_11*dmats0[11][24] + coeff0_12*dmats0[12][24] + coeff0_13*dmats0[13][24] + coeff0_14*dmats0[14][24] + coeff0_15*dmats0[15][24] + coeff0_16*dmats0[16][24] + coeff0_17*dmats0[17][24] + coeff0_18*dmats0[18][24] + coeff0_19*dmats0[19][24] + coeff0_20*dmats0[20][24] + coeff0_21*dmats0[21][24] + coeff0_22*dmats0[22][24] + coeff0_23*dmats0[23][24] + coeff0_24*dmats0[24][24] + coeff0_25*dmats0[25][24] + coeff0_26*dmats0[26][24] + coeff0_27*dmats0[27][24] + coeff0_28*dmats0[28][24] + coeff0_29*dmats0[29][24] + coeff0_30*dmats0[30][24] + coeff0_31*dmats0[31][24] + coeff0_32*dmats0[32][24] + coeff0_33*dmats0[33][24] + coeff0_34*dmats0[34][24];
          new_coeff0_25 = coeff0_0*dmats0[0][25] + coeff0_1*dmats0[1][25] + coeff0_2*dmats0[2][25] + coeff0_3*dmats0[3][25] + coeff0_4*dmats0[4][25] + coeff0_5*dmats0[5][25] + coeff0_6*dmats0[6][25] + coeff0_7*dmats0[7][25] + coeff0_8*dmats0[8][25] + coeff0_9*dmats0[9][25] + coeff0_10*dmats0[10][25] + coeff0_11*dmats0[11][25] + coeff0_12*dmats0[12][25] + coeff0_13*dmats0[13][25] + coeff0_14*dmats0[14][25] + coeff0_15*dmats0[15][25] + coeff0_16*dmats0[16][25] + coeff0_17*dmats0[17][25] + coeff0_18*dmats0[18][25] + coeff0_19*dmats0[19][25] + coeff0_20*dmats0[20][25] + coeff0_21*dmats0[21][25] + coeff0_22*dmats0[22][25] + coeff0_23*dmats0[23][25] + coeff0_24*dmats0[24][25] + coeff0_25*dmats0[25][25] + coeff0_26*dmats0[26][25] + coeff0_27*dmats0[27][25] + coeff0_28*dmats0[28][25] + coeff0_29*dmats0[29][25] + coeff0_30*dmats0[30][25] + coeff0_31*dmats0[31][25] + coeff0_32*dmats0[32][25] + coeff0_33*dmats0[33][25] + coeff0_34*dmats0[34][25];
          new_coeff0_26 = coeff0_0*dmats0[0][26] + coeff0_1*dmats0[1][26] + coeff0_2*dmats0[2][26] + coeff0_3*dmats0[3][26] + coeff0_4*dmats0[4][26] + coeff0_5*dmats0[5][26] + coeff0_6*dmats0[6][26] + coeff0_7*dmats0[7][26] + coeff0_8*dmats0[8][26] + coeff0_9*dmats0[9][26] + coeff0_10*dmats0[10][26] + coeff0_11*dmats0[11][26] + coeff0_12*dmats0[12][26] + coeff0_13*dmats0[13][26] + coeff0_14*dmats0[14][26] + coeff0_15*dmats0[15][26] + coeff0_16*dmats0[16][26] + coeff0_17*dmats0[17][26] + coeff0_18*dmats0[18][26] + coeff0_19*dmats0[19][26] + coeff0_20*dmats0[20][26] + coeff0_21*dmats0[21][26] + coeff0_22*dmats0[22][26] + coeff0_23*dmats0[23][26] + coeff0_24*dmats0[24][26] + coeff0_25*dmats0[25][26] + coeff0_26*dmats0[26][26] + coeff0_27*dmats0[27][26] + coeff0_28*dmats0[28][26] + coeff0_29*dmats0[29][26] + coeff0_30*dmats0[30][26] + coeff0_31*dmats0[31][26] + coeff0_32*dmats0[32][26] + coeff0_33*dmats0[33][26] + coeff0_34*dmats0[34][26];
          new_coeff0_27 = coeff0_0*dmats0[0][27] + coeff0_1*dmats0[1][27] + coeff0_2*dmats0[2][27] + coeff0_3*dmats0[3][27] + coeff0_4*dmats0[4][27] + coeff0_5*dmats0[5][27] + coeff0_6*dmats0[6][27] + coeff0_7*dmats0[7][27] + coeff0_8*dmats0[8][27] + coeff0_9*dmats0[9][27] + coeff0_10*dmats0[10][27] + coeff0_11*dmats0[11][27] + coeff0_12*dmats0[12][27] + coeff0_13*dmats0[13][27] + coeff0_14*dmats0[14][27] + coeff0_15*dmats0[15][27] + coeff0_16*dmats0[16][27] + coeff0_17*dmats0[17][27] + coeff0_18*dmats0[18][27] + coeff0_19*dmats0[19][27] + coeff0_20*dmats0[20][27] + coeff0_21*dmats0[21][27] + coeff0_22*dmats0[22][27] + coeff0_23*dmats0[23][27] + coeff0_24*dmats0[24][27] + coeff0_25*dmats0[25][27] + coeff0_26*dmats0[26][27] + coeff0_27*dmats0[27][27] + coeff0_28*dmats0[28][27] + coeff0_29*dmats0[29][27] + coeff0_30*dmats0[30][27] + coeff0_31*dmats0[31][27] + coeff0_32*dmats0[32][27] + coeff0_33*dmats0[33][27] + coeff0_34*dmats0[34][27];
          new_coeff0_28 = coeff0_0*dmats0[0][28] + coeff0_1*dmats0[1][28] + coeff0_2*dmats0[2][28] + coeff0_3*dmats0[3][28] + coeff0_4*dmats0[4][28] + coeff0_5*dmats0[5][28] + coeff0_6*dmats0[6][28] + coeff0_7*dmats0[7][28] + coeff0_8*dmats0[8][28] + coeff0_9*dmats0[9][28] + coeff0_10*dmats0[10][28] + coeff0_11*dmats0[11][28] + coeff0_12*dmats0[12][28] + coeff0_13*dmats0[13][28] + coeff0_14*dmats0[14][28] + coeff0_15*dmats0[15][28] + coeff0_16*dmats0[16][28] + coeff0_17*dmats0[17][28] + coeff0_18*dmats0[18][28] + coeff0_19*dmats0[19][28] + coeff0_20*dmats0[20][28] + coeff0_21*dmats0[21][28] + coeff0_22*dmats0[22][28] + coeff0_23*dmats0[23][28] + coeff0_24*dmats0[24][28] + coeff0_25*dmats0[25][28] + coeff0_26*dmats0[26][28] + coeff0_27*dmats0[27][28] + coeff0_28*dmats0[28][28] + coeff0_29*dmats0[29][28] + coeff0_30*dmats0[30][28] + coeff0_31*dmats0[31][28] + coeff0_32*dmats0[32][28] + coeff0_33*dmats0[33][28] + coeff0_34*dmats0[34][28];
          new_coeff0_29 = coeff0_0*dmats0[0][29] + coeff0_1*dmats0[1][29] + coeff0_2*dmats0[2][29] + coeff0_3*dmats0[3][29] + coeff0_4*dmats0[4][29] + coeff0_5*dmats0[5][29] + coeff0_6*dmats0[6][29] + coeff0_7*dmats0[7][29] + coeff0_8*dmats0[8][29] + coeff0_9*dmats0[9][29] + coeff0_10*dmats0[10][29] + coeff0_11*dmats0[11][29] + coeff0_12*dmats0[12][29] + coeff0_13*dmats0[13][29] + coeff0_14*dmats0[14][29] + coeff0_15*dmats0[15][29] + coeff0_16*dmats0[16][29] + coeff0_17*dmats0[17][29] + coeff0_18*dmats0[18][29] + coeff0_19*dmats0[19][29] + coeff0_20*dmats0[20][29] + coeff0_21*dmats0[21][29] + coeff0_22*dmats0[22][29] + coeff0_23*dmats0[23][29] + coeff0_24*dmats0[24][29] + coeff0_25*dmats0[25][29] + coeff0_26*dmats0[26][29] + coeff0_27*dmats0[27][29] + coeff0_28*dmats0[28][29] + coeff0_29*dmats0[29][29] + coeff0_30*dmats0[30][29] + coeff0_31*dmats0[31][29] + coeff0_32*dmats0[32][29] + coeff0_33*dmats0[33][29] + coeff0_34*dmats0[34][29];
          new_coeff0_30 = coeff0_0*dmats0[0][30] + coeff0_1*dmats0[1][30] + coeff0_2*dmats0[2][30] + coeff0_3*dmats0[3][30] + coeff0_4*dmats0[4][30] + coeff0_5*dmats0[5][30] + coeff0_6*dmats0[6][30] + coeff0_7*dmats0[7][30] + coeff0_8*dmats0[8][30] + coeff0_9*dmats0[9][30] + coeff0_10*dmats0[10][30] + coeff0_11*dmats0[11][30] + coeff0_12*dmats0[12][30] + coeff0_13*dmats0[13][30] + coeff0_14*dmats0[14][30] + coeff0_15*dmats0[15][30] + coeff0_16*dmats0[16][30] + coeff0_17*dmats0[17][30] + coeff0_18*dmats0[18][30] + coeff0_19*dmats0[19][30] + coeff0_20*dmats0[20][30] + coeff0_21*dmats0[21][30] + coeff0_22*dmats0[22][30] + coeff0_23*dmats0[23][30] + coeff0_24*dmats0[24][30] + coeff0_25*dmats0[25][30] + coeff0_26*dmats0[26][30] + coeff0_27*dmats0[27][30] + coeff0_28*dmats0[28][30] + coeff0_29*dmats0[29][30] + coeff0_30*dmats0[30][30] + coeff0_31*dmats0[31][30] + coeff0_32*dmats0[32][30] + coeff0_33*dmats0[33][30] + coeff0_34*dmats0[34][30];
          new_coeff0_31 = coeff0_0*dmats0[0][31] + coeff0_1*dmats0[1][31] + coeff0_2*dmats0[2][31] + coeff0_3*dmats0[3][31] + coeff0_4*dmats0[4][31] + coeff0_5*dmats0[5][31] + coeff0_6*dmats0[6][31] + coeff0_7*dmats0[7][31] + coeff0_8*dmats0[8][31] + coeff0_9*dmats0[9][31] + coeff0_10*dmats0[10][31] + coeff0_11*dmats0[11][31] + coeff0_12*dmats0[12][31] + coeff0_13*dmats0[13][31] + coeff0_14*dmats0[14][31] + coeff0_15*dmats0[15][31] + coeff0_16*dmats0[16][31] + coeff0_17*dmats0[17][31] + coeff0_18*dmats0[18][31] + coeff0_19*dmats0[19][31] + coeff0_20*dmats0[20][31] + coeff0_21*dmats0[21][31] + coeff0_22*dmats0[22][31] + coeff0_23*dmats0[23][31] + coeff0_24*dmats0[24][31] + coeff0_25*dmats0[25][31] + coeff0_26*dmats0[26][31] + coeff0_27*dmats0[27][31] + coeff0_28*dmats0[28][31] + coeff0_29*dmats0[29][31] + coeff0_30*dmats0[30][31] + coeff0_31*dmats0[31][31] + coeff0_32*dmats0[32][31] + coeff0_33*dmats0[33][31] + coeff0_34*dmats0[34][31];
          new_coeff0_32 = coeff0_0*dmats0[0][32] + coeff0_1*dmats0[1][32] + coeff0_2*dmats0[2][32] + coeff0_3*dmats0[3][32] + coeff0_4*dmats0[4][32] + coeff0_5*dmats0[5][32] + coeff0_6*dmats0[6][32] + coeff0_7*dmats0[7][32] + coeff0_8*dmats0[8][32] + coeff0_9*dmats0[9][32] + coeff0_10*dmats0[10][32] + coeff0_11*dmats0[11][32] + coeff0_12*dmats0[12][32] + coeff0_13*dmats0[13][32] + coeff0_14*dmats0[14][32] + coeff0_15*dmats0[15][32] + coeff0_16*dmats0[16][32] + coeff0_17*dmats0[17][32] + coeff0_18*dmats0[18][32] + coeff0_19*dmats0[19][32] + coeff0_20*dmats0[20][32] + coeff0_21*dmats0[21][32] + coeff0_22*dmats0[22][32] + coeff0_23*dmats0[23][32] + coeff0_24*dmats0[24][32] + coeff0_25*dmats0[25][32] + coeff0_26*dmats0[26][32] + coeff0_27*dmats0[27][32] + coeff0_28*dmats0[28][32] + coeff0_29*dmats0[29][32] + coeff0_30*dmats0[30][32] + coeff0_31*dmats0[31][32] + coeff0_32*dmats0[32][32] + coeff0_33*dmats0[33][32] + coeff0_34*dmats0[34][32];
          new_coeff0_33 = coeff0_0*dmats0[0][33] + coeff0_1*dmats0[1][33] + coeff0_2*dmats0[2][33] + coeff0_3*dmats0[3][33] + coeff0_4*dmats0[4][33] + coeff0_5*dmats0[5][33] + coeff0_6*dmats0[6][33] + coeff0_7*dmats0[7][33] + coeff0_8*dmats0[8][33] + coeff0_9*dmats0[9][33] + coeff0_10*dmats0[10][33] + coeff0_11*dmats0[11][33] + coeff0_12*dmats0[12][33] + coeff0_13*dmats0[13][33] + coeff0_14*dmats0[14][33] + coeff0_15*dmats0[15][33] + coeff0_16*dmats0[16][33] + coeff0_17*dmats0[17][33] + coeff0_18*dmats0[18][33] + coeff0_19*dmats0[19][33] + coeff0_20*dmats0[20][33] + coeff0_21*dmats0[21][33] + coeff0_22*dmats0[22][33] + coeff0_23*dmats0[23][33] + coeff0_24*dmats0[24][33] + coeff0_25*dmats0[25][33] + coeff0_26*dmats0[26][33] + coeff0_27*dmats0[27][33] + coeff0_28*dmats0[28][33] + coeff0_29*dmats0[29][33] + coeff0_30*dmats0[30][33] + coeff0_31*dmats0[31][33] + coeff0_32*dmats0[32][33] + coeff0_33*dmats0[33][33] + coeff0_34*dmats0[34][33];
          new_coeff0_34 = coeff0_0*dmats0[0][34] + coeff0_1*dmats0[1][34] + coeff0_2*dmats0[2][34] + coeff0_3*dmats0[3][34] + coeff0_4*dmats0[4][34] + coeff0_5*dmats0[5][34] + coeff0_6*dmats0[6][34] + coeff0_7*dmats0[7][34] + coeff0_8*dmats0[8][34] + coeff0_9*dmats0[9][34] + coeff0_10*dmats0[10][34] + coeff0_11*dmats0[11][34] + coeff0_12*dmats0[12][34] + coeff0_13*dmats0[13][34] + coeff0_14*dmats0[14][34] + coeff0_15*dmats0[15][34] + coeff0_16*dmats0[16][34] + coeff0_17*dmats0[17][34] + coeff0_18*dmats0[18][34] + coeff0_19*dmats0[19][34] + coeff0_20*dmats0[20][34] + coeff0_21*dmats0[21][34] + coeff0_22*dmats0[22][34] + coeff0_23*dmats0[23][34] + coeff0_24*dmats0[24][34] + coeff0_25*dmats0[25][34] + coeff0_26*dmats0[26][34] + coeff0_27*dmats0[27][34] + coeff0_28*dmats0[28][34] + coeff0_29*dmats0[29][34] + coeff0_30*dmats0[30][34] + coeff0_31*dmats0[31][34] + coeff0_32*dmats0[32][34] + coeff0_33*dmats0[33][34] + coeff0_34*dmats0[34][34];
        }
        if(combinations[deriv_num][j] == 1)
        {
          new_coeff0_0 = coeff0_0*dmats1[0][0] + coeff0_1*dmats1[1][0] + coeff0_2*dmats1[2][0] + coeff0_3*dmats1[3][0] + coeff0_4*dmats1[4][0] + coeff0_5*dmats1[5][0] + coeff0_6*dmats1[6][0] + coeff0_7*dmats1[7][0] + coeff0_8*dmats1[8][0] + coeff0_9*dmats1[9][0] + coeff0_10*dmats1[10][0] + coeff0_11*dmats1[11][0] + coeff0_12*dmats1[12][0] + coeff0_13*dmats1[13][0] + coeff0_14*dmats1[14][0] + coeff0_15*dmats1[15][0] + coeff0_16*dmats1[16][0] + coeff0_17*dmats1[17][0] + coeff0_18*dmats1[18][0] + coeff0_19*dmats1[19][0] + coeff0_20*dmats1[20][0] + coeff0_21*dmats1[21][0] + coeff0_22*dmats1[22][0] + coeff0_23*dmats1[23][0] + coeff0_24*dmats1[24][0] + coeff0_25*dmats1[25][0] + coeff0_26*dmats1[26][0] + coeff0_27*dmats1[27][0] + coeff0_28*dmats1[28][0] + coeff0_29*dmats1[29][0] + coeff0_30*dmats1[30][0] + coeff0_31*dmats1[31][0] + coeff0_32*dmats1[32][0] + coeff0_33*dmats1[33][0] + coeff0_34*dmats1[34][0];
          new_coeff0_1 = coeff0_0*dmats1[0][1] + coeff0_1*dmats1[1][1] + coeff0_2*dmats1[2][1] + coeff0_3*dmats1[3][1] + coeff0_4*dmats1[4][1] + coeff0_5*dmats1[5][1] + coeff0_6*dmats1[6][1] + coeff0_7*dmats1[7][1] + coeff0_8*dmats1[8][1] + coeff0_9*dmats1[9][1] + coeff0_10*dmats1[10][1] + coeff0_11*dmats1[11][1] + coeff0_12*dmats1[12][1] + coeff0_13*dmats1[13][1] + coeff0_14*dmats1[14][1] + coeff0_15*dmats1[15][1] + coeff0_16*dmats1[16][1] + coeff0_17*dmats1[17][1] + coeff0_18*dmats1[18][1] + coeff0_19*dmats1[19][1] + coeff0_20*dmats1[20][1] + coeff0_21*dmats1[21][1] + coeff0_22*dmats1[22][1] + coeff0_23*dmats1[23][1] + coeff0_24*dmats1[24][1] + coeff0_25*dmats1[25][1] + coeff0_26*dmats1[26][1] + coeff0_27*dmats1[27][1] + coeff0_28*dmats1[28][1] + coeff0_29*dmats1[29][1] + coeff0_30*dmats1[30][1] + coeff0_31*dmats1[31][1] + coeff0_32*dmats1[32][1] + coeff0_33*dmats1[33][1] + coeff0_34*dmats1[34][1];
          new_coeff0_2 = coeff0_0*dmats1[0][2] + coeff0_1*dmats1[1][2] + coeff0_2*dmats1[2][2] + coeff0_3*dmats1[3][2] + coeff0_4*dmats1[4][2] + coeff0_5*dmats1[5][2] + coeff0_6*dmats1[6][2] + coeff0_7*dmats1[7][2] + coeff0_8*dmats1[8][2] + coeff0_9*dmats1[9][2] + coeff0_10*dmats1[10][2] + coeff0_11*dmats1[11][2] + coeff0_12*dmats1[12][2] + coeff0_13*dmats1[13][2] + coeff0_14*dmats1[14][2] + coeff0_15*dmats1[15][2] + coeff0_16*dmats1[16][2] + coeff0_17*dmats1[17][2] + coeff0_18*dmats1[18][2] + coeff0_19*dmats1[19][2] + coeff0_20*dmats1[20][2] + coeff0_21*dmats1[21][2] + coeff0_22*dmats1[22][2] + coeff0_23*dmats1[23][2] + coeff0_24*dmats1[24][2] + coeff0_25*dmats1[25][2] + coeff0_26*dmats1[26][2] + coeff0_27*dmats1[27][2] + coeff0_28*dmats1[28][2] + coeff0_29*dmats1[29][2] + coeff0_30*dmats1[30][2] + coeff0_31*dmats1[31][2] + coeff0_32*dmats1[32][2] + coeff0_33*dmats1[33][2] + coeff0_34*dmats1[34][2];
          new_coeff0_3 = coeff0_0*dmats1[0][3] + coeff0_1*dmats1[1][3] + coeff0_2*dmats1[2][3] + coeff0_3*dmats1[3][3] + coeff0_4*dmats1[4][3] + coeff0_5*dmats1[5][3] + coeff0_6*dmats1[6][3] + coeff0_7*dmats1[7][3] + coeff0_8*dmats1[8][3] + coeff0_9*dmats1[9][3] + coeff0_10*dmats1[10][3] + coeff0_11*dmats1[11][3] + coeff0_12*dmats1[12][3] + coeff0_13*dmats1[13][3] + coeff0_14*dmats1[14][3] + coeff0_15*dmats1[15][3] + coeff0_16*dmats1[16][3] + coeff0_17*dmats1[17][3] + coeff0_18*dmats1[18][3] + coeff0_19*dmats1[19][3] + coeff0_20*dmats1[20][3] + coeff0_21*dmats1[21][3] + coeff0_22*dmats1[22][3] + coeff0_23*dmats1[23][3] + coeff0_24*dmats1[24][3] + coeff0_25*dmats1[25][3] + coeff0_26*dmats1[26][3] + coeff0_27*dmats1[27][3] + coeff0_28*dmats1[28][3] + coeff0_29*dmats1[29][3] + coeff0_30*dmats1[30][3] + coeff0_31*dmats1[31][3] + coeff0_32*dmats1[32][3] + coeff0_33*dmats1[33][3] + coeff0_34*dmats1[34][3];
          new_coeff0_4 = coeff0_0*dmats1[0][4] + coeff0_1*dmats1[1][4] + coeff0_2*dmats1[2][4] + coeff0_3*dmats1[3][4] + coeff0_4*dmats1[4][4] + coeff0_5*dmats1[5][4] + coeff0_6*dmats1[6][4] + coeff0_7*dmats1[7][4] + coeff0_8*dmats1[8][4] + coeff0_9*dmats1[9][4] + coeff0_10*dmats1[10][4] + coeff0_11*dmats1[11][4] + coeff0_12*dmats1[12][4] + coeff0_13*dmats1[13][4] + coeff0_14*dmats1[14][4] + coeff0_15*dmats1[15][4] + coeff0_16*dmats1[16][4] + coeff0_17*dmats1[17][4] + coeff0_18*dmats1[18][4] + coeff0_19*dmats1[19][4] + coeff0_20*dmats1[20][4] + coeff0_21*dmats1[21][4] + coeff0_22*dmats1[22][4] + coeff0_23*dmats1[23][4] + coeff0_24*dmats1[24][4] + coeff0_25*dmats1[25][4] + coeff0_26*dmats1[26][4] + coeff0_27*dmats1[27][4] + coeff0_28*dmats1[28][4] + coeff0_29*dmats1[29][4] + coeff0_30*dmats1[30][4] + coeff0_31*dmats1[31][4] + coeff0_32*dmats1[32][4] + coeff0_33*dmats1[33][4] + coeff0_34*dmats1[34][4];
          new_coeff0_5 = coeff0_0*dmats1[0][5] + coeff0_1*dmats1[1][5] + coeff0_2*dmats1[2][5] + coeff0_3*dmats1[3][5] + coeff0_4*dmats1[4][5] + coeff0_5*dmats1[5][5] + coeff0_6*dmats1[6][5] + coeff0_7*dmats1[7][5] + coeff0_8*dmats1[8][5] + coeff0_9*dmats1[9][5] + coeff0_10*dmats1[10][5] + coeff0_11*dmats1[11][5] + coeff0_12*dmats1[12][5] + coeff0_13*dmats1[13][5] + coeff0_14*dmats1[14][5] + coeff0_15*dmats1[15][5] + coeff0_16*dmats1[16][5] + coeff0_17*dmats1[17][5] + coeff0_18*dmats1[18][5] + coeff0_19*dmats1[19][5] + coeff0_20*dmats1[20][5] + coeff0_21*dmats1[21][5] + coeff0_22*dmats1[22][5] + coeff0_23*dmats1[23][5] + coeff0_24*dmats1[24][5] + coeff0_25*dmats1[25][5] + coeff0_26*dmats1[26][5] + coeff0_27*dmats1[27][5] + coeff0_28*dmats1[28][5] + coeff0_29*dmats1[29][5] + coeff0_30*dmats1[30][5] + coeff0_31*dmats1[31][5] + coeff0_32*dmats1[32][5] + coeff0_33*dmats1[33][5] + coeff0_34*dmats1[34][5];
          new_coeff0_6 = coeff0_0*dmats1[0][6] + coeff0_1*dmats1[1][6] + coeff0_2*dmats1[2][6] + coeff0_3*dmats1[3][6] + coeff0_4*dmats1[4][6] + coeff0_5*dmats1[5][6] + coeff0_6*dmats1[6][6] + coeff0_7*dmats1[7][6] + coeff0_8*dmats1[8][6] + coeff0_9*dmats1[9][6] + coeff0_10*dmats1[10][6] + coeff0_11*dmats1[11][6] + coeff0_12*dmats1[12][6] + coeff0_13*dmats1[13][6] + coeff0_14*dmats1[14][6] + coeff0_15*dmats1[15][6] + coeff0_16*dmats1[16][6] + coeff0_17*dmats1[17][6] + coeff0_18*dmats1[18][6] + coeff0_19*dmats1[19][6] + coeff0_20*dmats1[20][6] + coeff0_21*dmats1[21][6] + coeff0_22*dmats1[22][6] + coeff0_23*dmats1[23][6] + coeff0_24*dmats1[24][6] + coeff0_25*dmats1[25][6] + coeff0_26*dmats1[26][6] + coeff0_27*dmats1[27][6] + coeff0_28*dmats1[28][6] + coeff0_29*dmats1[29][6] + coeff0_30*dmats1[30][6] + coeff0_31*dmats1[31][6] + coeff0_32*dmats1[32][6] + coeff0_33*dmats1[33][6] + coeff0_34*dmats1[34][6];
          new_coeff0_7 = coeff0_0*dmats1[0][7] + coeff0_1*dmats1[1][7] + coeff0_2*dmats1[2][7] + coeff0_3*dmats1[3][7] + coeff0_4*dmats1[4][7] + coeff0_5*dmats1[5][7] + coeff0_6*dmats1[6][7] + coeff0_7*dmats1[7][7] + coeff0_8*dmats1[8][7] + coeff0_9*dmats1[9][7] + coeff0_10*dmats1[10][7] + coeff0_11*dmats1[11][7] + coeff0_12*dmats1[12][7] + coeff0_13*dmats1[13][7] + coeff0_14*dmats1[14][7] + coeff0_15*dmats1[15][7] + coeff0_16*dmats1[16][7] + coeff0_17*dmats1[17][7] + coeff0_18*dmats1[18][7] + coeff0_19*dmats1[19][7] + coeff0_20*dmats1[20][7] + coeff0_21*dmats1[21][7] + coeff0_22*dmats1[22][7] + coeff0_23*dmats1[23][7] + coeff0_24*dmats1[24][7] + coeff0_25*dmats1[25][7] + coeff0_26*dmats1[26][7] + coeff0_27*dmats1[27][7] + coeff0_28*dmats1[28][7] + coeff0_29*dmats1[29][7] + coeff0_30*dmats1[30][7] + coeff0_31*dmats1[31][7] + coeff0_32*dmats1[32][7] + coeff0_33*dmats1[33][7] + coeff0_34*dmats1[34][7];
          new_coeff0_8 = coeff0_0*dmats1[0][8] + coeff0_1*dmats1[1][8] + coeff0_2*dmats1[2][8] + coeff0_3*dmats1[3][8] + coeff0_4*dmats1[4][8] + coeff0_5*dmats1[5][8] + coeff0_6*dmats1[6][8] + coeff0_7*dmats1[7][8] + coeff0_8*dmats1[8][8] + coeff0_9*dmats1[9][8] + coeff0_10*dmats1[10][8] + coeff0_11*dmats1[11][8] + coeff0_12*dmats1[12][8] + coeff0_13*dmats1[13][8] + coeff0_14*dmats1[14][8] + coeff0_15*dmats1[15][8] + coeff0_16*dmats1[16][8] + coeff0_17*dmats1[17][8] + coeff0_18*dmats1[18][8] + coeff0_19*dmats1[19][8] + coeff0_20*dmats1[20][8] + coeff0_21*dmats1[21][8] + coeff0_22*dmats1[22][8] + coeff0_23*dmats1[23][8] + coeff0_24*dmats1[24][8] + coeff0_25*dmats1[25][8] + coeff0_26*dmats1[26][8] + coeff0_27*dmats1[27][8] + coeff0_28*dmats1[28][8] + coeff0_29*dmats1[29][8] + coeff0_30*dmats1[30][8] + coeff0_31*dmats1[31][8] + coeff0_32*dmats1[32][8] + coeff0_33*dmats1[33][8] + coeff0_34*dmats1[34][8];
          new_coeff0_9 = coeff0_0*dmats1[0][9] + coeff0_1*dmats1[1][9] + coeff0_2*dmats1[2][9] + coeff0_3*dmats1[3][9] + coeff0_4*dmats1[4][9] + coeff0_5*dmats1[5][9] + coeff0_6*dmats1[6][9] + coeff0_7*dmats1[7][9] + coeff0_8*dmats1[8][9] + coeff0_9*dmats1[9][9] + coeff0_10*dmats1[10][9] + coeff0_11*dmats1[11][9] + coeff0_12*dmats1[12][9] + coeff0_13*dmats1[13][9] + coeff0_14*dmats1[14][9] + coeff0_15*dmats1[15][9] + coeff0_16*dmats1[16][9] + coeff0_17*dmats1[17][9] + coeff0_18*dmats1[18][9] + coeff0_19*dmats1[19][9] + coeff0_20*dmats1[20][9] + coeff0_21*dmats1[21][9] + coeff0_22*dmats1[22][9] + coeff0_23*dmats1[23][9] + coeff0_24*dmats1[24][9] + coeff0_25*dmats1[25][9] + coeff0_26*dmats1[26][9] + coeff0_27*dmats1[27][9] + coeff0_28*dmats1[28][9] + coeff0_29*dmats1[29][9] + coeff0_30*dmats1[30][9] + coeff0_31*dmats1[31][9] + coeff0_32*dmats1[32][9] + coeff0_33*dmats1[33][9] + coeff0_34*dmats1[34][9];
          new_coeff0_10 = coeff0_0*dmats1[0][10] + coeff0_1*dmats1[1][10] + coeff0_2*dmats1[2][10] + coeff0_3*dmats1[3][10] + coeff0_4*dmats1[4][10] + coeff0_5*dmats1[5][10] + coeff0_6*dmats1[6][10] + coeff0_7*dmats1[7][10] + coeff0_8*dmats1[8][10] + coeff0_9*dmats1[9][10] + coeff0_10*dmats1[10][10] + coeff0_11*dmats1[11][10] + coeff0_12*dmats1[12][10] + coeff0_13*dmats1[13][10] + coeff0_14*dmats1[14][10] + coeff0_15*dmats1[15][10] + coeff0_16*dmats1[16][10] + coeff0_17*dmats1[17][10] + coeff0_18*dmats1[18][10] + coeff0_19*dmats1[19][10] + coeff0_20*dmats1[20][10] + coeff0_21*dmats1[21][10] + coeff0_22*dmats1[22][10] + coeff0_23*dmats1[23][10] + coeff0_24*dmats1[24][10] + coeff0_25*dmats1[25][10] + coeff0_26*dmats1[26][10] + coeff0_27*dmats1[27][10] + coeff0_28*dmats1[28][10] + coeff0_29*dmats1[29][10] + coeff0_30*dmats1[30][10] + coeff0_31*dmats1[31][10] + coeff0_32*dmats1[32][10] + coeff0_33*dmats1[33][10] + coeff0_34*dmats1[34][10];
          new_coeff0_11 = coeff0_0*dmats1[0][11] + coeff0_1*dmats1[1][11] + coeff0_2*dmats1[2][11] + coeff0_3*dmats1[3][11] + coeff0_4*dmats1[4][11] + coeff0_5*dmats1[5][11] + coeff0_6*dmats1[6][11] + coeff0_7*dmats1[7][11] + coeff0_8*dmats1[8][11] + coeff0_9*dmats1[9][11] + coeff0_10*dmats1[10][11] + coeff0_11*dmats1[11][11] + coeff0_12*dmats1[12][11] + coeff0_13*dmats1[13][11] + coeff0_14*dmats1[14][11] + coeff0_15*dmats1[15][11] + coeff0_16*dmats1[16][11] + coeff0_17*dmats1[17][11] + coeff0_18*dmats1[18][11] + coeff0_19*dmats1[19][11] + coeff0_20*dmats1[20][11] + coeff0_21*dmats1[21][11] + coeff0_22*dmats1[22][11] + coeff0_23*dmats1[23][11] + coeff0_24*dmats1[24][11] + coeff0_25*dmats1[25][11] + coeff0_26*dmats1[26][11] + coeff0_27*dmats1[27][11] + coeff0_28*dmats1[28][11] + coeff0_29*dmats1[29][11] + coeff0_30*dmats1[30][11] + coeff0_31*dmats1[31][11] + coeff0_32*dmats1[32][11] + coeff0_33*dmats1[33][11] + coeff0_34*dmats1[34][11];
          new_coeff0_12 = coeff0_0*dmats1[0][12] + coeff0_1*dmats1[1][12] + coeff0_2*dmats1[2][12] + coeff0_3*dmats1[3][12] + coeff0_4*dmats1[4][12] + coeff0_5*dmats1[5][12] + coeff0_6*dmats1[6][12] + coeff0_7*dmats1[7][12] + coeff0_8*dmats1[8][12] + coeff0_9*dmats1[9][12] + coeff0_10*dmats1[10][12] + coeff0_11*dmats1[11][12] + coeff0_12*dmats1[12][12] + coeff0_13*dmats1[13][12] + coeff0_14*dmats1[14][12] + coeff0_15*dmats1[15][12] + coeff0_16*dmats1[16][12] + coeff0_17*dmats1[17][12] + coeff0_18*dmats1[18][12] + coeff0_19*dmats1[19][12] + coeff0_20*dmats1[20][12] + coeff0_21*dmats1[21][12] + coeff0_22*dmats1[22][12] + coeff0_23*dmats1[23][12] + coeff0_24*dmats1[24][12] + coeff0_25*dmats1[25][12] + coeff0_26*dmats1[26][12] + coeff0_27*dmats1[27][12] + coeff0_28*dmats1[28][12] + coeff0_29*dmats1[29][12] + coeff0_30*dmats1[30][12] + coeff0_31*dmats1[31][12] + coeff0_32*dmats1[32][12] + coeff0_33*dmats1[33][12] + coeff0_34*dmats1[34][12];
          new_coeff0_13 = coeff0_0*dmats1[0][13] + coeff0_1*dmats1[1][13] + coeff0_2*dmats1[2][13] + coeff0_3*dmats1[3][13] + coeff0_4*dmats1[4][13] + coeff0_5*dmats1[5][13] + coeff0_6*dmats1[6][13] + coeff0_7*dmats1[7][13] + coeff0_8*dmats1[8][13] + coeff0_9*dmats1[9][13] + coeff0_10*dmats1[10][13] + coeff0_11*dmats1[11][13] + coeff0_12*dmats1[12][13] + coeff0_13*dmats1[13][13] + coeff0_14*dmats1[14][13] + coeff0_15*dmats1[15][13] + coeff0_16*dmats1[16][13] + coeff0_17*dmats1[17][13] + coeff0_18*dmats1[18][13] + coeff0_19*dmats1[19][13] + coeff0_20*dmats1[20][13] + coeff0_21*dmats1[21][13] + coeff0_22*dmats1[22][13] + coeff0_23*dmats1[23][13] + coeff0_24*dmats1[24][13] + coeff0_25*dmats1[25][13] + coeff0_26*dmats1[26][13] + coeff0_27*dmats1[27][13] + coeff0_28*dmats1[28][13] + coeff0_29*dmats1[29][13] + coeff0_30*dmats1[30][13] + coeff0_31*dmats1[31][13] + coeff0_32*dmats1[32][13] + coeff0_33*dmats1[33][13] + coeff0_34*dmats1[34][13];
          new_coeff0_14 = coeff0_0*dmats1[0][14] + coeff0_1*dmats1[1][14] + coeff0_2*dmats1[2][14] + coeff0_3*dmats1[3][14] + coeff0_4*dmats1[4][14] + coeff0_5*dmats1[5][14] + coeff0_6*dmats1[6][14] + coeff0_7*dmats1[7][14] + coeff0_8*dmats1[8][14] + coeff0_9*dmats1[9][14] + coeff0_10*dmats1[10][14] + coeff0_11*dmats1[11][14] + coeff0_12*dmats1[12][14] + coeff0_13*dmats1[13][14] + coeff0_14*dmats1[14][14] + coeff0_15*dmats1[15][14] + coeff0_16*dmats1[16][14] + coeff0_17*dmats1[17][14] + coeff0_18*dmats1[18][14] + coeff0_19*dmats1[19][14] + coeff0_20*dmats1[20][14] + coeff0_21*dmats1[21][14] + coeff0_22*dmats1[22][14] + coeff0_23*dmats1[23][14] + coeff0_24*dmats1[24][14] + coeff0_25*dmats1[25][14] + coeff0_26*dmats1[26][14] + coeff0_27*dmats1[27][14] + coeff0_28*dmats1[28][14] + coeff0_29*dmats1[29][14] + coeff0_30*dmats1[30][14] + coeff0_31*dmats1[31][14] + coeff0_32*dmats1[32][14] + coeff0_33*dmats1[33][14] + coeff0_34*dmats1[34][14];
          new_coeff0_15 = coeff0_0*dmats1[0][15] + coeff0_1*dmats1[1][15] + coeff0_2*dmats1[2][15] + coeff0_3*dmats1[3][15] + coeff0_4*dmats1[4][15] + coeff0_5*dmats1[5][15] + coeff0_6*dmats1[6][15] + coeff0_7*dmats1[7][15] + coeff0_8*dmats1[8][15] + coeff0_9*dmats1[9][15] + coeff0_10*dmats1[10][15] + coeff0_11*dmats1[11][15] + coeff0_12*dmats1[12][15] + coeff0_13*dmats1[13][15] + coeff0_14*dmats1[14][15] + coeff0_15*dmats1[15][15] + coeff0_16*dmats1[16][15] + coeff0_17*dmats1[17][15] + coeff0_18*dmats1[18][15] + coeff0_19*dmats1[19][15] + coeff0_20*dmats1[20][15] + coeff0_21*dmats1[21][15] + coeff0_22*dmats1[22][15] + coeff0_23*dmats1[23][15] + coeff0_24*dmats1[24][15] + coeff0_25*dmats1[25][15] + coeff0_26*dmats1[26][15] + coeff0_27*dmats1[27][15] + coeff0_28*dmats1[28][15] + coeff0_29*dmats1[29][15] + coeff0_30*dmats1[30][15] + coeff0_31*dmats1[31][15] + coeff0_32*dmats1[32][15] + coeff0_33*dmats1[33][15] + coeff0_34*dmats1[34][15];
          new_coeff0_16 = coeff0_0*dmats1[0][16] + coeff0_1*dmats1[1][16] + coeff0_2*dmats1[2][16] + coeff0_3*dmats1[3][16] + coeff0_4*dmats1[4][16] + coeff0_5*dmats1[5][16] + coeff0_6*dmats1[6][16] + coeff0_7*dmats1[7][16] + coeff0_8*dmats1[8][16] + coeff0_9*dmats1[9][16] + coeff0_10*dmats1[10][16] + coeff0_11*dmats1[11][16] + coeff0_12*dmats1[12][16] + coeff0_13*dmats1[13][16] + coeff0_14*dmats1[14][16] + coeff0_15*dmats1[15][16] + coeff0_16*dmats1[16][16] + coeff0_17*dmats1[17][16] + coeff0_18*dmats1[18][16] + coeff0_19*dmats1[19][16] + coeff0_20*dmats1[20][16] + coeff0_21*dmats1[21][16] + coeff0_22*dmats1[22][16] + coeff0_23*dmats1[23][16] + coeff0_24*dmats1[24][16] + coeff0_25*dmats1[25][16] + coeff0_26*dmats1[26][16] + coeff0_27*dmats1[27][16] + coeff0_28*dmats1[28][16] + coeff0_29*dmats1[29][16] + coeff0_30*dmats1[30][16] + coeff0_31*dmats1[31][16] + coeff0_32*dmats1[32][16] + coeff0_33*dmats1[33][16] + coeff0_34*dmats1[34][16];
          new_coeff0_17 = coeff0_0*dmats1[0][17] + coeff0_1*dmats1[1][17] + coeff0_2*dmats1[2][17] + coeff0_3*dmats1[3][17] + coeff0_4*dmats1[4][17] + coeff0_5*dmats1[5][17] + coeff0_6*dmats1[6][17] + coeff0_7*dmats1[7][17] + coeff0_8*dmats1[8][17] + coeff0_9*dmats1[9][17] + coeff0_10*dmats1[10][17] + coeff0_11*dmats1[11][17] + coeff0_12*dmats1[12][17] + coeff0_13*dmats1[13][17] + coeff0_14*dmats1[14][17] + coeff0_15*dmats1[15][17] + coeff0_16*dmats1[16][17] + coeff0_17*dmats1[17][17] + coeff0_18*dmats1[18][17] + coeff0_19*dmats1[19][17] + coeff0_20*dmats1[20][17] + coeff0_21*dmats1[21][17] + coeff0_22*dmats1[22][17] + coeff0_23*dmats1[23][17] + coeff0_24*dmats1[24][17] + coeff0_25*dmats1[25][17] + coeff0_26*dmats1[26][17] + coeff0_27*dmats1[27][17] + coeff0_28*dmats1[28][17] + coeff0_29*dmats1[29][17] + coeff0_30*dmats1[30][17] + coeff0_31*dmats1[31][17] + coeff0_32*dmats1[32][17] + coeff0_33*dmats1[33][17] + coeff0_34*dmats1[34][17];
          new_coeff0_18 = coeff0_0*dmats1[0][18] + coeff0_1*dmats1[1][18] + coeff0_2*dmats1[2][18] + coeff0_3*dmats1[3][18] + coeff0_4*dmats1[4][18] + coeff0_5*dmats1[5][18] + coeff0_6*dmats1[6][18] + coeff0_7*dmats1[7][18] + coeff0_8*dmats1[8][18] + coeff0_9*dmats1[9][18] + coeff0_10*dmats1[10][18] + coeff0_11*dmats1[11][18] + coeff0_12*dmats1[12][18] + coeff0_13*dmats1[13][18] + coeff0_14*dmats1[14][18] + coeff0_15*dmats1[15][18] + coeff0_16*dmats1[16][18] + coeff0_17*dmats1[17][18] + coeff0_18*dmats1[18][18] + coeff0_19*dmats1[19][18] + coeff0_20*dmats1[20][18] + coeff0_21*dmats1[21][18] + coeff0_22*dmats1[22][18] + coeff0_23*dmats1[23][18] + coeff0_24*dmats1[24][18] + coeff0_25*dmats1[25][18] + coeff0_26*dmats1[26][18] + coeff0_27*dmats1[27][18] + coeff0_28*dmats1[28][18] + coeff0_29*dmats1[29][18] + coeff0_30*dmats1[30][18] + coeff0_31*dmats1[31][18] + coeff0_32*dmats1[32][18] + coeff0_33*dmats1[33][18] + coeff0_34*dmats1[34][18];
          new_coeff0_19 = coeff0_0*dmats1[0][19] + coeff0_1*dmats1[1][19] + coeff0_2*dmats1[2][19] + coeff0_3*dmats1[3][19] + coeff0_4*dmats1[4][19] + coeff0_5*dmats1[5][19] + coeff0_6*dmats1[6][19] + coeff0_7*dmats1[7][19] + coeff0_8*dmats1[8][19] + coeff0_9*dmats1[9][19] + coeff0_10*dmats1[10][19] + coeff0_11*dmats1[11][19] + coeff0_12*dmats1[12][19] + coeff0_13*dmats1[13][19] + coeff0_14*dmats1[14][19] + coeff0_15*dmats1[15][19] + coeff0_16*dmats1[16][19] + coeff0_17*dmats1[17][19] + coeff0_18*dmats1[18][19] + coeff0_19*dmats1[19][19] + coeff0_20*dmats1[20][19] + coeff0_21*dmats1[21][19] + coeff0_22*dmats1[22][19] + coeff0_23*dmats1[23][19] + coeff0_24*dmats1[24][19] + coeff0_25*dmats1[25][19] + coeff0_26*dmats1[26][19] + coeff0_27*dmats1[27][19] + coeff0_28*dmats1[28][19] + coeff0_29*dmats1[29][19] + coeff0_30*dmats1[30][19] + coeff0_31*dmats1[31][19] + coeff0_32*dmats1[32][19] + coeff0_33*dmats1[33][19] + coeff0_34*dmats1[34][19];
          new_coeff0_20 = coeff0_0*dmats1[0][20] + coeff0_1*dmats1[1][20] + coeff0_2*dmats1[2][20] + coeff0_3*dmats1[3][20] + coeff0_4*dmats1[4][20] + coeff0_5*dmats1[5][20] + coeff0_6*dmats1[6][20] + coeff0_7*dmats1[7][20] + coeff0_8*dmats1[8][20] + coeff0_9*dmats1[9][20] + coeff0_10*dmats1[10][20] + coeff0_11*dmats1[11][20] + coeff0_12*dmats1[12][20] + coeff0_13*dmats1[13][20] + coeff0_14*dmats1[14][20] + coeff0_15*dmats1[15][20] + coeff0_16*dmats1[16][20] + coeff0_17*dmats1[17][20] + coeff0_18*dmats1[18][20] + coeff0_19*dmats1[19][20] + coeff0_20*dmats1[20][20] + coeff0_21*dmats1[21][20] + coeff0_22*dmats1[22][20] + coeff0_23*dmats1[23][20] + coeff0_24*dmats1[24][20] + coeff0_25*dmats1[25][20] + coeff0_26*dmats1[26][20] + coeff0_27*dmats1[27][20] + coeff0_28*dmats1[28][20] + coeff0_29*dmats1[29][20] + coeff0_30*dmats1[30][20] + coeff0_31*dmats1[31][20] + coeff0_32*dmats1[32][20] + coeff0_33*dmats1[33][20] + coeff0_34*dmats1[34][20];
          new_coeff0_21 = coeff0_0*dmats1[0][21] + coeff0_1*dmats1[1][21] + coeff0_2*dmats1[2][21] + coeff0_3*dmats1[3][21] + coeff0_4*dmats1[4][21] + coeff0_5*dmats1[5][21] + coeff0_6*dmats1[6][21] + coeff0_7*dmats1[7][21] + coeff0_8*dmats1[8][21] + coeff0_9*dmats1[9][21] + coeff0_10*dmats1[10][21] + coeff0_11*dmats1[11][21] + coeff0_12*dmats1[12][21] + coeff0_13*dmats1[13][21] + coeff0_14*dmats1[14][21] + coeff0_15*dmats1[15][21] + coeff0_16*dmats1[16][21] + coeff0_17*dmats1[17][21] + coeff0_18*dmats1[18][21] + coeff0_19*dmats1[19][21] + coeff0_20*dmats1[20][21] + coeff0_21*dmats1[21][21] + coeff0_22*dmats1[22][21] + coeff0_23*dmats1[23][21] + coeff0_24*dmats1[24][21] + coeff0_25*dmats1[25][21] + coeff0_26*dmats1[26][21] + coeff0_27*dmats1[27][21] + coeff0_28*dmats1[28][21] + coeff0_29*dmats1[29][21] + coeff0_30*dmats1[30][21] + coeff0_31*dmats1[31][21] + coeff0_32*dmats1[32][21] + coeff0_33*dmats1[33][21] + coeff0_34*dmats1[34][21];
          new_coeff0_22 = coeff0_0*dmats1[0][22] + coeff0_1*dmats1[1][22] + coeff0_2*dmats1[2][22] + coeff0_3*dmats1[3][22] + coeff0_4*dmats1[4][22] + coeff0_5*dmats1[5][22] + coeff0_6*dmats1[6][22] + coeff0_7*dmats1[7][22] + coeff0_8*dmats1[8][22] + coeff0_9*dmats1[9][22] + coeff0_10*dmats1[10][22] + coeff0_11*dmats1[11][22] + coeff0_12*dmats1[12][22] + coeff0_13*dmats1[13][22] + coeff0_14*dmats1[14][22] + coeff0_15*dmats1[15][22] + coeff0_16*dmats1[16][22] + coeff0_17*dmats1[17][22] + coeff0_18*dmats1[18][22] + coeff0_19*dmats1[19][22] + coeff0_20*dmats1[20][22] + coeff0_21*dmats1[21][22] + coeff0_22*dmats1[22][22] + coeff0_23*dmats1[23][22] + coeff0_24*dmats1[24][22] + coeff0_25*dmats1[25][22] + coeff0_26*dmats1[26][22] + coeff0_27*dmats1[27][22] + coeff0_28*dmats1[28][22] + coeff0_29*dmats1[29][22] + coeff0_30*dmats1[30][22] + coeff0_31*dmats1[31][22] + coeff0_32*dmats1[32][22] + coeff0_33*dmats1[33][22] + coeff0_34*dmats1[34][22];
          new_coeff0_23 = coeff0_0*dmats1[0][23] + coeff0_1*dmats1[1][23] + coeff0_2*dmats1[2][23] + coeff0_3*dmats1[3][23] + coeff0_4*dmats1[4][23] + coeff0_5*dmats1[5][23] + coeff0_6*dmats1[6][23] + coeff0_7*dmats1[7][23] + coeff0_8*dmats1[8][23] + coeff0_9*dmats1[9][23] + coeff0_10*dmats1[10][23] + coeff0_11*dmats1[11][23] + coeff0_12*dmats1[12][23] + coeff0_13*dmats1[13][23] + coeff0_14*dmats1[14][23] + coeff0_15*dmats1[15][23] + coeff0_16*dmats1[16][23] + coeff0_17*dmats1[17][23] + coeff0_18*dmats1[18][23] + coeff0_19*dmats1[19][23] + coeff0_20*dmats1[20][23] + coeff0_21*dmats1[21][23] + coeff0_22*dmats1[22][23] + coeff0_23*dmats1[23][23] + coeff0_24*dmats1[24][23] + coeff0_25*dmats1[25][23] + coeff0_26*dmats1[26][23] + coeff0_27*dmats1[27][23] + coeff0_28*dmats1[28][23] + coeff0_29*dmats1[29][23] + coeff0_30*dmats1[30][23] + coeff0_31*dmats1[31][23] + coeff0_32*dmats1[32][23] + coeff0_33*dmats1[33][23] + coeff0_34*dmats1[34][23];
          new_coeff0_24 = coeff0_0*dmats1[0][24] + coeff0_1*dmats1[1][24] + coeff0_2*dmats1[2][24] + coeff0_3*dmats1[3][24] + coeff0_4*dmats1[4][24] + coeff0_5*dmats1[5][24] + coeff0_6*dmats1[6][24] + coeff0_7*dmats1[7][24] + coeff0_8*dmats1[8][24] + coeff0_9*dmats1[9][24] + coeff0_10*dmats1[10][24] + coeff0_11*dmats1[11][24] + coeff0_12*dmats1[12][24] + coeff0_13*dmats1[13][24] + coeff0_14*dmats1[14][24] + coeff0_15*dmats1[15][24] + coeff0_16*dmats1[16][24] + coeff0_17*dmats1[17][24] + coeff0_18*dmats1[18][24] + coeff0_19*dmats1[19][24] + coeff0_20*dmats1[20][24] + coeff0_21*dmats1[21][24] + coeff0_22*dmats1[22][24] + coeff0_23*dmats1[23][24] + coeff0_24*dmats1[24][24] + coeff0_25*dmats1[25][24] + coeff0_26*dmats1[26][24] + coeff0_27*dmats1[27][24] + coeff0_28*dmats1[28][24] + coeff0_29*dmats1[29][24] + coeff0_30*dmats1[30][24] + coeff0_31*dmats1[31][24] + coeff0_32*dmats1[32][24] + coeff0_33*dmats1[33][24] + coeff0_34*dmats1[34][24];
          new_coeff0_25 = coeff0_0*dmats1[0][25] + coeff0_1*dmats1[1][25] + coeff0_2*dmats1[2][25] + coeff0_3*dmats1[3][25] + coeff0_4*dmats1[4][25] + coeff0_5*dmats1[5][25] + coeff0_6*dmats1[6][25] + coeff0_7*dmats1[7][25] + coeff0_8*dmats1[8][25] + coeff0_9*dmats1[9][25] + coeff0_10*dmats1[10][25] + coeff0_11*dmats1[11][25] + coeff0_12*dmats1[12][25] + coeff0_13*dmats1[13][25] + coeff0_14*dmats1[14][25] + coeff0_15*dmats1[15][25] + coeff0_16*dmats1[16][25] + coeff0_17*dmats1[17][25] + coeff0_18*dmats1[18][25] + coeff0_19*dmats1[19][25] + coeff0_20*dmats1[20][25] + coeff0_21*dmats1[21][25] + coeff0_22*dmats1[22][25] + coeff0_23*dmats1[23][25] + coeff0_24*dmats1[24][25] + coeff0_25*dmats1[25][25] + coeff0_26*dmats1[26][25] + coeff0_27*dmats1[27][25] + coeff0_28*dmats1[28][25] + coeff0_29*dmats1[29][25] + coeff0_30*dmats1[30][25] + coeff0_31*dmats1[31][25] + coeff0_32*dmats1[32][25] + coeff0_33*dmats1[33][25] + coeff0_34*dmats1[34][25];
          new_coeff0_26 = coeff0_0*dmats1[0][26] + coeff0_1*dmats1[1][26] + coeff0_2*dmats1[2][26] + coeff0_3*dmats1[3][26] + coeff0_4*dmats1[4][26] + coeff0_5*dmats1[5][26] + coeff0_6*dmats1[6][26] + coeff0_7*dmats1[7][26] + coeff0_8*dmats1[8][26] + coeff0_9*dmats1[9][26] + coeff0_10*dmats1[10][26] + coeff0_11*dmats1[11][26] + coeff0_12*dmats1[12][26] + coeff0_13*dmats1[13][26] + coeff0_14*dmats1[14][26] + coeff0_15*dmats1[15][26] + coeff0_16*dmats1[16][26] + coeff0_17*dmats1[17][26] + coeff0_18*dmats1[18][26] + coeff0_19*dmats1[19][26] + coeff0_20*dmats1[20][26] + coeff0_21*dmats1[21][26] + coeff0_22*dmats1[22][26] + coeff0_23*dmats1[23][26] + coeff0_24*dmats1[24][26] + coeff0_25*dmats1[25][26] + coeff0_26*dmats1[26][26] + coeff0_27*dmats1[27][26] + coeff0_28*dmats1[28][26] + coeff0_29*dmats1[29][26] + coeff0_30*dmats1[30][26] + coeff0_31*dmats1[31][26] + coeff0_32*dmats1[32][26] + coeff0_33*dmats1[33][26] + coeff0_34*dmats1[34][26];
          new_coeff0_27 = coeff0_0*dmats1[0][27] + coeff0_1*dmats1[1][27] + coeff0_2*dmats1[2][27] + coeff0_3*dmats1[3][27] + coeff0_4*dmats1[4][27] + coeff0_5*dmats1[5][27] + coeff0_6*dmats1[6][27] + coeff0_7*dmats1[7][27] + coeff0_8*dmats1[8][27] + coeff0_9*dmats1[9][27] + coeff0_10*dmats1[10][27] + coeff0_11*dmats1[11][27] + coeff0_12*dmats1[12][27] + coeff0_13*dmats1[13][27] + coeff0_14*dmats1[14][27] + coeff0_15*dmats1[15][27] + coeff0_16*dmats1[16][27] + coeff0_17*dmats1[17][27] + coeff0_18*dmats1[18][27] + coeff0_19*dmats1[19][27] + coeff0_20*dmats1[20][27] + coeff0_21*dmats1[21][27] + coeff0_22*dmats1[22][27] + coeff0_23*dmats1[23][27] + coeff0_24*dmats1[24][27] + coeff0_25*dmats1[25][27] + coeff0_26*dmats1[26][27] + coeff0_27*dmats1[27][27] + coeff0_28*dmats1[28][27] + coeff0_29*dmats1[29][27] + coeff0_30*dmats1[30][27] + coeff0_31*dmats1[31][27] + coeff0_32*dmats1[32][27] + coeff0_33*dmats1[33][27] + coeff0_34*dmats1[34][27];
          new_coeff0_28 = coeff0_0*dmats1[0][28] + coeff0_1*dmats1[1][28] + coeff0_2*dmats1[2][28] + coeff0_3*dmats1[3][28] + coeff0_4*dmats1[4][28] + coeff0_5*dmats1[5][28] + coeff0_6*dmats1[6][28] + coeff0_7*dmats1[7][28] + coeff0_8*dmats1[8][28] + coeff0_9*dmats1[9][28] + coeff0_10*dmats1[10][28] + coeff0_11*dmats1[11][28] + coeff0_12*dmats1[12][28] + coeff0_13*dmats1[13][28] + coeff0_14*dmats1[14][28] + coeff0_15*dmats1[15][28] + coeff0_16*dmats1[16][28] + coeff0_17*dmats1[17][28] + coeff0_18*dmats1[18][28] + coeff0_19*dmats1[19][28] + coeff0_20*dmats1[20][28] + coeff0_21*dmats1[21][28] + coeff0_22*dmats1[22][28] + coeff0_23*dmats1[23][28] + coeff0_24*dmats1[24][28] + coeff0_25*dmats1[25][28] + coeff0_26*dmats1[26][28] + coeff0_27*dmats1[27][28] + coeff0_28*dmats1[28][28] + coeff0_29*dmats1[29][28] + coeff0_30*dmats1[30][28] + coeff0_31*dmats1[31][28] + coeff0_32*dmats1[32][28] + coeff0_33*dmats1[33][28] + coeff0_34*dmats1[34][28];
          new_coeff0_29 = coeff0_0*dmats1[0][29] + coeff0_1*dmats1[1][29] + coeff0_2*dmats1[2][29] + coeff0_3*dmats1[3][29] + coeff0_4*dmats1[4][29] + coeff0_5*dmats1[5][29] + coeff0_6*dmats1[6][29] + coeff0_7*dmats1[7][29] + coeff0_8*dmats1[8][29] + coeff0_9*dmats1[9][29] + coeff0_10*dmats1[10][29] + coeff0_11*dmats1[11][29] + coeff0_12*dmats1[12][29] + coeff0_13*dmats1[13][29] + coeff0_14*dmats1[14][29] + coeff0_15*dmats1[15][29] + coeff0_16*dmats1[16][29] + coeff0_17*dmats1[17][29] + coeff0_18*dmats1[18][29] + coeff0_19*dmats1[19][29] + coeff0_20*dmats1[20][29] + coeff0_21*dmats1[21][29] + coeff0_22*dmats1[22][29] + coeff0_23*dmats1[23][29] + coeff0_24*dmats1[24][29] + coeff0_25*dmats1[25][29] + coeff0_26*dmats1[26][29] + coeff0_27*dmats1[27][29] + coeff0_28*dmats1[28][29] + coeff0_29*dmats1[29][29] + coeff0_30*dmats1[30][29] + coeff0_31*dmats1[31][29] + coeff0_32*dmats1[32][29] + coeff0_33*dmats1[33][29] + coeff0_34*dmats1[34][29];
          new_coeff0_30 = coeff0_0*dmats1[0][30] + coeff0_1*dmats1[1][30] + coeff0_2*dmats1[2][30] + coeff0_3*dmats1[3][30] + coeff0_4*dmats1[4][30] + coeff0_5*dmats1[5][30] + coeff0_6*dmats1[6][30] + coeff0_7*dmats1[7][30] + coeff0_8*dmats1[8][30] + coeff0_9*dmats1[9][30] + coeff0_10*dmats1[10][30] + coeff0_11*dmats1[11][30] + coeff0_12*dmats1[12][30] + coeff0_13*dmats1[13][30] + coeff0_14*dmats1[14][30] + coeff0_15*dmats1[15][30] + coeff0_16*dmats1[16][30] + coeff0_17*dmats1[17][30] + coeff0_18*dmats1[18][30] + coeff0_19*dmats1[19][30] + coeff0_20*dmats1[20][30] + coeff0_21*dmats1[21][30] + coeff0_22*dmats1[22][30] + coeff0_23*dmats1[23][30] + coeff0_24*dmats1[24][30] + coeff0_25*dmats1[25][30] + coeff0_26*dmats1[26][30] + coeff0_27*dmats1[27][30] + coeff0_28*dmats1[28][30] + coeff0_29*dmats1[29][30] + coeff0_30*dmats1[30][30] + coeff0_31*dmats1[31][30] + coeff0_32*dmats1[32][30] + coeff0_33*dmats1[33][30] + coeff0_34*dmats1[34][30];
          new_coeff0_31 = coeff0_0*dmats1[0][31] + coeff0_1*dmats1[1][31] + coeff0_2*dmats1[2][31] + coeff0_3*dmats1[3][31] + coeff0_4*dmats1[4][31] + coeff0_5*dmats1[5][31] + coeff0_6*dmats1[6][31] + coeff0_7*dmats1[7][31] + coeff0_8*dmats1[8][31] + coeff0_9*dmats1[9][31] + coeff0_10*dmats1[10][31] + coeff0_11*dmats1[11][31] + coeff0_12*dmats1[12][31] + coeff0_13*dmats1[13][31] + coeff0_14*dmats1[14][31] + coeff0_15*dmats1[15][31] + coeff0_16*dmats1[16][31] + coeff0_17*dmats1[17][31] + coeff0_18*dmats1[18][31] + coeff0_19*dmats1[19][31] + coeff0_20*dmats1[20][31] + coeff0_21*dmats1[21][31] + coeff0_22*dmats1[22][31] + coeff0_23*dmats1[23][31] + coeff0_24*dmats1[24][31] + coeff0_25*dmats1[25][31] + coeff0_26*dmats1[26][31] + coeff0_27*dmats1[27][31] + coeff0_28*dmats1[28][31] + coeff0_29*dmats1[29][31] + coeff0_30*dmats1[30][31] + coeff0_31*dmats1[31][31] + coeff0_32*dmats1[32][31] + coeff0_33*dmats1[33][31] + coeff0_34*dmats1[34][31];
          new_coeff0_32 = coeff0_0*dmats1[0][32] + coeff0_1*dmats1[1][32] + coeff0_2*dmats1[2][32] + coeff0_3*dmats1[3][32] + coeff0_4*dmats1[4][32] + coeff0_5*dmats1[5][32] + coeff0_6*dmats1[6][32] + coeff0_7*dmats1[7][32] + coeff0_8*dmats1[8][32] + coeff0_9*dmats1[9][32] + coeff0_10*dmats1[10][32] + coeff0_11*dmats1[11][32] + coeff0_12*dmats1[12][32] + coeff0_13*dmats1[13][32] + coeff0_14*dmats1[14][32] + coeff0_15*dmats1[15][32] + coeff0_16*dmats1[16][32] + coeff0_17*dmats1[17][32] + coeff0_18*dmats1[18][32] + coeff0_19*dmats1[19][32] + coeff0_20*dmats1[20][32] + coeff0_21*dmats1[21][32] + coeff0_22*dmats1[22][32] + coeff0_23*dmats1[23][32] + coeff0_24*dmats1[24][32] + coeff0_25*dmats1[25][32] + coeff0_26*dmats1[26][32] + coeff0_27*dmats1[27][32] + coeff0_28*dmats1[28][32] + coeff0_29*dmats1[29][32] + coeff0_30*dmats1[30][32] + coeff0_31*dmats1[31][32] + coeff0_32*dmats1[32][32] + coeff0_33*dmats1[33][32] + coeff0_34*dmats1[34][32];
          new_coeff0_33 = coeff0_0*dmats1[0][33] + coeff0_1*dmats1[1][33] + coeff0_2*dmats1[2][33] + coeff0_3*dmats1[3][33] + coeff0_4*dmats1[4][33] + coeff0_5*dmats1[5][33] + coeff0_6*dmats1[6][33] + coeff0_7*dmats1[7][33] + coeff0_8*dmats1[8][33] + coeff0_9*dmats1[9][33] + coeff0_10*dmats1[10][33] + coeff0_11*dmats1[11][33] + coeff0_12*dmats1[12][33] + coeff0_13*dmats1[13][33] + coeff0_14*dmats1[14][33] + coeff0_15*dmats1[15][33] + coeff0_16*dmats1[16][33] + coeff0_17*dmats1[17][33] + coeff0_18*dmats1[18][33] + coeff0_19*dmats1[19][33] + coeff0_20*dmats1[20][33] + coeff0_21*dmats1[21][33] + coeff0_22*dmats1[22][33] + coeff0_23*dmats1[23][33] + coeff0_24*dmats1[24][33] + coeff0_25*dmats1[25][33] + coeff0_26*dmats1[26][33] + coeff0_27*dmats1[27][33] + coeff0_28*dmats1[28][33] + coeff0_29*dmats1[29][33] + coeff0_30*dmats1[30][33] + coeff0_31*dmats1[31][33] + coeff0_32*dmats1[32][33] + coeff0_33*dmats1[33][33] + coeff0_34*dmats1[34][33];
          new_coeff0_34 = coeff0_0*dmats1[0][34] + coeff0_1*dmats1[1][34] + coeff0_2*dmats1[2][34] + coeff0_3*dmats1[3][34] + coeff0_4*dmats1[4][34] + coeff0_5*dmats1[5][34] + coeff0_6*dmats1[6][34] + coeff0_7*dmats1[7][34] + coeff0_8*dmats1[8][34] + coeff0_9*dmats1[9][34] + coeff0_10*dmats1[10][34] + coeff0_11*dmats1[11][34] + coeff0_12*dmats1[12][34] + coeff0_13*dmats1[13][34] + coeff0_14*dmats1[14][34] + coeff0_15*dmats1[15][34] + coeff0_16*dmats1[16][34] + coeff0_17*dmats1[17][34] + coeff0_18*dmats1[18][34] + coeff0_19*dmats1[19][34] + coeff0_20*dmats1[20][34] + coeff0_21*dmats1[21][34] + coeff0_22*dmats1[22][34] + coeff0_23*dmats1[23][34] + coeff0_24*dmats1[24][34] + coeff0_25*dmats1[25][34] + coeff0_26*dmats1[26][34] + coeff0_27*dmats1[27][34] + coeff0_28*dmats1[28][34] + coeff0_29*dmats1[29][34] + coeff0_30*dmats1[30][34] + coeff0_31*dmats1[31][34] + coeff0_32*dmats1[32][34] + coeff0_33*dmats1[33][34] + coeff0_34*dmats1[34][34];
        }
        if(combinations[deriv_num][j] == 2)
        {
          new_coeff0_0 = coeff0_0*dmats2[0][0] + coeff0_1*dmats2[1][0] + coeff0_2*dmats2[2][0] + coeff0_3*dmats2[3][0] + coeff0_4*dmats2[4][0] + coeff0_5*dmats2[5][0] + coeff0_6*dmats2[6][0] + coeff0_7*dmats2[7][0] + coeff0_8*dmats2[8][0] + coeff0_9*dmats2[9][0] + coeff0_10*dmats2[10][0] + coeff0_11*dmats2[11][0] + coeff0_12*dmats2[12][0] + coeff0_13*dmats2[13][0] + coeff0_14*dmats2[14][0] + coeff0_15*dmats2[15][0] + coeff0_16*dmats2[16][0] + coeff0_17*dmats2[17][0] + coeff0_18*dmats2[18][0] + coeff0_19*dmats2[19][0] + coeff0_20*dmats2[20][0] + coeff0_21*dmats2[21][0] + coeff0_22*dmats2[22][0] + coeff0_23*dmats2[23][0] + coeff0_24*dmats2[24][0] + coeff0_25*dmats2[25][0] + coeff0_26*dmats2[26][0] + coeff0_27*dmats2[27][0] + coeff0_28*dmats2[28][0] + coeff0_29*dmats2[29][0] + coeff0_30*dmats2[30][0] + coeff0_31*dmats2[31][0] + coeff0_32*dmats2[32][0] + coeff0_33*dmats2[33][0] + coeff0_34*dmats2[34][0];
          new_coeff0_1 = coeff0_0*dmats2[0][1] + coeff0_1*dmats2[1][1] + coeff0_2*dmats2[2][1] + coeff0_3*dmats2[3][1] + coeff0_4*dmats2[4][1] + coeff0_5*dmats2[5][1] + coeff0_6*dmats2[6][1] + coeff0_7*dmats2[7][1] + coeff0_8*dmats2[8][1] + coeff0_9*dmats2[9][1] + coeff0_10*dmats2[10][1] + coeff0_11*dmats2[11][1] + coeff0_12*dmats2[12][1] + coeff0_13*dmats2[13][1] + coeff0_14*dmats2[14][1] + coeff0_15*dmats2[15][1] + coeff0_16*dmats2[16][1] + coeff0_17*dmats2[17][1] + coeff0_18*dmats2[18][1] + coeff0_19*dmats2[19][1] + coeff0_20*dmats2[20][1] + coeff0_21*dmats2[21][1] + coeff0_22*dmats2[22][1] + coeff0_23*dmats2[23][1] + coeff0_24*dmats2[24][1] + coeff0_25*dmats2[25][1] + coeff0_26*dmats2[26][1] + coeff0_27*dmats2[27][1] + coeff0_28*dmats2[28][1] + coeff0_29*dmats2[29][1] + coeff0_30*dmats2[30][1] + coeff0_31*dmats2[31][1] + coeff0_32*dmats2[32][1] + coeff0_33*dmats2[33][1] + coeff0_34*dmats2[34][1];
          new_coeff0_2 = coeff0_0*dmats2[0][2] + coeff0_1*dmats2[1][2] + coeff0_2*dmats2[2][2] + coeff0_3*dmats2[3][2] + coeff0_4*dmats2[4][2] + coeff0_5*dmats2[5][2] + coeff0_6*dmats2[6][2] + coeff0_7*dmats2[7][2] + coeff0_8*dmats2[8][2] + coeff0_9*dmats2[9][2] + coeff0_10*dmats2[10][2] + coeff0_11*dmats2[11][2] + coeff0_12*dmats2[12][2] + coeff0_13*dmats2[13][2] + coeff0_14*dmats2[14][2] + coeff0_15*dmats2[15][2] + coeff0_16*dmats2[16][2] + coeff0_17*dmats2[17][2] + coeff0_18*dmats2[18][2] + coeff0_19*dmats2[19][2] + coeff0_20*dmats2[20][2] + coeff0_21*dmats2[21][2] + coeff0_22*dmats2[22][2] + coeff0_23*dmats2[23][2] + coeff0_24*dmats2[24][2] + coeff0_25*dmats2[25][2] + coeff0_26*dmats2[26][2] + coeff0_27*dmats2[27][2] + coeff0_28*dmats2[28][2] + coeff0_29*dmats2[29][2] + coeff0_30*dmats2[30][2] + coeff0_31*dmats2[31][2] + coeff0_32*dmats2[32][2] + coeff0_33*dmats2[33][2] + coeff0_34*dmats2[34][2];
          new_coeff0_3 = coeff0_0*dmats2[0][3] + coeff0_1*dmats2[1][3] + coeff0_2*dmats2[2][3] + coeff0_3*dmats2[3][3] + coeff0_4*dmats2[4][3] + coeff0_5*dmats2[5][3] + coeff0_6*dmats2[6][3] + coeff0_7*dmats2[7][3] + coeff0_8*dmats2[8][3] + coeff0_9*dmats2[9][3] + coeff0_10*dmats2[10][3] + coeff0_11*dmats2[11][3] + coeff0_12*dmats2[12][3] + coeff0_13*dmats2[13][3] + coeff0_14*dmats2[14][3] + coeff0_15*dmats2[15][3] + coeff0_16*dmats2[16][3] + coeff0_17*dmats2[17][3] + coeff0_18*dmats2[18][3] + coeff0_19*dmats2[19][3] + coeff0_20*dmats2[20][3] + coeff0_21*dmats2[21][3] + coeff0_22*dmats2[22][3] + coeff0_23*dmats2[23][3] + coeff0_24*dmats2[24][3] + coeff0_25*dmats2[25][3] + coeff0_26*dmats2[26][3] + coeff0_27*dmats2[27][3] + coeff0_28*dmats2[28][3] + coeff0_29*dmats2[29][3] + coeff0_30*dmats2[30][3] + coeff0_31*dmats2[31][3] + coeff0_32*dmats2[32][3] + coeff0_33*dmats2[33][3] + coeff0_34*dmats2[34][3];
          new_coeff0_4 = coeff0_0*dmats2[0][4] + coeff0_1*dmats2[1][4] + coeff0_2*dmats2[2][4] + coeff0_3*dmats2[3][4] + coeff0_4*dmats2[4][4] + coeff0_5*dmats2[5][4] + coeff0_6*dmats2[6][4] + coeff0_7*dmats2[7][4] + coeff0_8*dmats2[8][4] + coeff0_9*dmats2[9][4] + coeff0_10*dmats2[10][4] + coeff0_11*dmats2[11][4] + coeff0_12*dmats2[12][4] + coeff0_13*dmats2[13][4] + coeff0_14*dmats2[14][4] + coeff0_15*dmats2[15][4] + coeff0_16*dmats2[16][4] + coeff0_17*dmats2[17][4] + coeff0_18*dmats2[18][4] + coeff0_19*dmats2[19][4] + coeff0_20*dmats2[20][4] + coeff0_21*dmats2[21][4] + coeff0_22*dmats2[22][4] + coeff0_23*dmats2[23][4] + coeff0_24*dmats2[24][4] + coeff0_25*dmats2[25][4] + coeff0_26*dmats2[26][4] + coeff0_27*dmats2[27][4] + coeff0_28*dmats2[28][4] + coeff0_29*dmats2[29][4] + coeff0_30*dmats2[30][4] + coeff0_31*dmats2[31][4] + coeff0_32*dmats2[32][4] + coeff0_33*dmats2[33][4] + coeff0_34*dmats2[34][4];
          new_coeff0_5 = coeff0_0*dmats2[0][5] + coeff0_1*dmats2[1][5] + coeff0_2*dmats2[2][5] + coeff0_3*dmats2[3][5] + coeff0_4*dmats2[4][5] + coeff0_5*dmats2[5][5] + coeff0_6*dmats2[6][5] + coeff0_7*dmats2[7][5] + coeff0_8*dmats2[8][5] + coeff0_9*dmats2[9][5] + coeff0_10*dmats2[10][5] + coeff0_11*dmats2[11][5] + coeff0_12*dmats2[12][5] + coeff0_13*dmats2[13][5] + coeff0_14*dmats2[14][5] + coeff0_15*dmats2[15][5] + coeff0_16*dmats2[16][5] + coeff0_17*dmats2[17][5] + coeff0_18*dmats2[18][5] + coeff0_19*dmats2[19][5] + coeff0_20*dmats2[20][5] + coeff0_21*dmats2[21][5] + coeff0_22*dmats2[22][5] + coeff0_23*dmats2[23][5] + coeff0_24*dmats2[24][5] + coeff0_25*dmats2[25][5] + coeff0_26*dmats2[26][5] + coeff0_27*dmats2[27][5] + coeff0_28*dmats2[28][5] + coeff0_29*dmats2[29][5] + coeff0_30*dmats2[30][5] + coeff0_31*dmats2[31][5] + coeff0_32*dmats2[32][5] + coeff0_33*dmats2[33][5] + coeff0_34*dmats2[34][5];
          new_coeff0_6 = coeff0_0*dmats2[0][6] + coeff0_1*dmats2[1][6] + coeff0_2*dmats2[2][6] + coeff0_3*dmats2[3][6] + coeff0_4*dmats2[4][6] + coeff0_5*dmats2[5][6] + coeff0_6*dmats2[6][6] + coeff0_7*dmats2[7][6] + coeff0_8*dmats2[8][6] + coeff0_9*dmats2[9][6] + coeff0_10*dmats2[10][6] + coeff0_11*dmats2[11][6] + coeff0_12*dmats2[12][6] + coeff0_13*dmats2[13][6] + coeff0_14*dmats2[14][6] + coeff0_15*dmats2[15][6] + coeff0_16*dmats2[16][6] + coeff0_17*dmats2[17][6] + coeff0_18*dmats2[18][6] + coeff0_19*dmats2[19][6] + coeff0_20*dmats2[20][6] + coeff0_21*dmats2[21][6] + coeff0_22*dmats2[22][6] + coeff0_23*dmats2[23][6] + coeff0_24*dmats2[24][6] + coeff0_25*dmats2[25][6] + coeff0_26*dmats2[26][6] + coeff0_27*dmats2[27][6] + coeff0_28*dmats2[28][6] + coeff0_29*dmats2[29][6] + coeff0_30*dmats2[30][6] + coeff0_31*dmats2[31][6] + coeff0_32*dmats2[32][6] + coeff0_33*dmats2[33][6] + coeff0_34*dmats2[34][6];
          new_coeff0_7 = coeff0_0*dmats2[0][7] + coeff0_1*dmats2[1][7] + coeff0_2*dmats2[2][7] + coeff0_3*dmats2[3][7] + coeff0_4*dmats2[4][7] + coeff0_5*dmats2[5][7] + coeff0_6*dmats2[6][7] + coeff0_7*dmats2[7][7] + coeff0_8*dmats2[8][7] + coeff0_9*dmats2[9][7] + coeff0_10*dmats2[10][7] + coeff0_11*dmats2[11][7] + coeff0_12*dmats2[12][7] + coeff0_13*dmats2[13][7] + coeff0_14*dmats2[14][7] + coeff0_15*dmats2[15][7] + coeff0_16*dmats2[16][7] + coeff0_17*dmats2[17][7] + coeff0_18*dmats2[18][7] + coeff0_19*dmats2[19][7] + coeff0_20*dmats2[20][7] + coeff0_21*dmats2[21][7] + coeff0_22*dmats2[22][7] + coeff0_23*dmats2[23][7] + coeff0_24*dmats2[24][7] + coeff0_25*dmats2[25][7] + coeff0_26*dmats2[26][7] + coeff0_27*dmats2[27][7] + coeff0_28*dmats2[28][7] + coeff0_29*dmats2[29][7] + coeff0_30*dmats2[30][7] + coeff0_31*dmats2[31][7] + coeff0_32*dmats2[32][7] + coeff0_33*dmats2[33][7] + coeff0_34*dmats2[34][7];
          new_coeff0_8 = coeff0_0*dmats2[0][8] + coeff0_1*dmats2[1][8] + coeff0_2*dmats2[2][8] + coeff0_3*dmats2[3][8] + coeff0_4*dmats2[4][8] + coeff0_5*dmats2[5][8] + coeff0_6*dmats2[6][8] + coeff0_7*dmats2[7][8] + coeff0_8*dmats2[8][8] + coeff0_9*dmats2[9][8] + coeff0_10*dmats2[10][8] + coeff0_11*dmats2[11][8] + coeff0_12*dmats2[12][8] + coeff0_13*dmats2[13][8] + coeff0_14*dmats2[14][8] + coeff0_15*dmats2[15][8] + coeff0_16*dmats2[16][8] + coeff0_17*dmats2[17][8] + coeff0_18*dmats2[18][8] + coeff0_19*dmats2[19][8] + coeff0_20*dmats2[20][8] + coeff0_21*dmats2[21][8] + coeff0_22*dmats2[22][8] + coeff0_23*dmats2[23][8] + coeff0_24*dmats2[24][8] + coeff0_25*dmats2[25][8] + coeff0_26*dmats2[26][8] + coeff0_27*dmats2[27][8] + coeff0_28*dmats2[28][8] + coeff0_29*dmats2[29][8] + coeff0_30*dmats2[30][8] + coeff0_31*dmats2[31][8] + coeff0_32*dmats2[32][8] + coeff0_33*dmats2[33][8] + coeff0_34*dmats2[34][8];
          new_coeff0_9 = coeff0_0*dmats2[0][9] + coeff0_1*dmats2[1][9] + coeff0_2*dmats2[2][9] + coeff0_3*dmats2[3][9] + coeff0_4*dmats2[4][9] + coeff0_5*dmats2[5][9] + coeff0_6*dmats2[6][9] + coeff0_7*dmats2[7][9] + coeff0_8*dmats2[8][9] + coeff0_9*dmats2[9][9] + coeff0_10*dmats2[10][9] + coeff0_11*dmats2[11][9] + coeff0_12*dmats2[12][9] + coeff0_13*dmats2[13][9] + coeff0_14*dmats2[14][9] + coeff0_15*dmats2[15][9] + coeff0_16*dmats2[16][9] + coeff0_17*dmats2[17][9] + coeff0_18*dmats2[18][9] + coeff0_19*dmats2[19][9] + coeff0_20*dmats2[20][9] + coeff0_21*dmats2[21][9] + coeff0_22*dmats2[22][9] + coeff0_23*dmats2[23][9] + coeff0_24*dmats2[24][9] + coeff0_25*dmats2[25][9] + coeff0_26*dmats2[26][9] + coeff0_27*dmats2[27][9] + coeff0_28*dmats2[28][9] + coeff0_29*dmats2[29][9] + coeff0_30*dmats2[30][9] + coeff0_31*dmats2[31][9] + coeff0_32*dmats2[32][9] + coeff0_33*dmats2[33][9] + coeff0_34*dmats2[34][9];
          new_coeff0_10 = coeff0_0*dmats2[0][10] + coeff0_1*dmats2[1][10] + coeff0_2*dmats2[2][10] + coeff0_3*dmats2[3][10] + coeff0_4*dmats2[4][10] + coeff0_5*dmats2[5][10] + coeff0_6*dmats2[6][10] + coeff0_7*dmats2[7][10] + coeff0_8*dmats2[8][10] + coeff0_9*dmats2[9][10] + coeff0_10*dmats2[10][10] + coeff0_11*dmats2[11][10] + coeff0_12*dmats2[12][10] + coeff0_13*dmats2[13][10] + coeff0_14*dmats2[14][10] + coeff0_15*dmats2[15][10] + coeff0_16*dmats2[16][10] + coeff0_17*dmats2[17][10] + coeff0_18*dmats2[18][10] + coeff0_19*dmats2[19][10] + coeff0_20*dmats2[20][10] + coeff0_21*dmats2[21][10] + coeff0_22*dmats2[22][10] + coeff0_23*dmats2[23][10] + coeff0_24*dmats2[24][10] + coeff0_25*dmats2[25][10] + coeff0_26*dmats2[26][10] + coeff0_27*dmats2[27][10] + coeff0_28*dmats2[28][10] + coeff0_29*dmats2[29][10] + coeff0_30*dmats2[30][10] + coeff0_31*dmats2[31][10] + coeff0_32*dmats2[32][10] + coeff0_33*dmats2[33][10] + coeff0_34*dmats2[34][10];
          new_coeff0_11 = coeff0_0*dmats2[0][11] + coeff0_1*dmats2[1][11] + coeff0_2*dmats2[2][11] + coeff0_3*dmats2[3][11] + coeff0_4*dmats2[4][11] + coeff0_5*dmats2[5][11] + coeff0_6*dmats2[6][11] + coeff0_7*dmats2[7][11] + coeff0_8*dmats2[8][11] + coeff0_9*dmats2[9][11] + coeff0_10*dmats2[10][11] + coeff0_11*dmats2[11][11] + coeff0_12*dmats2[12][11] + coeff0_13*dmats2[13][11] + coeff0_14*dmats2[14][11] + coeff0_15*dmats2[15][11] + coeff0_16*dmats2[16][11] + coeff0_17*dmats2[17][11] + coeff0_18*dmats2[18][11] + coeff0_19*dmats2[19][11] + coeff0_20*dmats2[20][11] + coeff0_21*dmats2[21][11] + coeff0_22*dmats2[22][11] + coeff0_23*dmats2[23][11] + coeff0_24*dmats2[24][11] + coeff0_25*dmats2[25][11] + coeff0_26*dmats2[26][11] + coeff0_27*dmats2[27][11] + coeff0_28*dmats2[28][11] + coeff0_29*dmats2[29][11] + coeff0_30*dmats2[30][11] + coeff0_31*dmats2[31][11] + coeff0_32*dmats2[32][11] + coeff0_33*dmats2[33][11] + coeff0_34*dmats2[34][11];
          new_coeff0_12 = coeff0_0*dmats2[0][12] + coeff0_1*dmats2[1][12] + coeff0_2*dmats2[2][12] + coeff0_3*dmats2[3][12] + coeff0_4*dmats2[4][12] + coeff0_5*dmats2[5][12] + coeff0_6*dmats2[6][12] + coeff0_7*dmats2[7][12] + coeff0_8*dmats2[8][12] + coeff0_9*dmats2[9][12] + coeff0_10*dmats2[10][12] + coeff0_11*dmats2[11][12] + coeff0_12*dmats2[12][12] + coeff0_13*dmats2[13][12] + coeff0_14*dmats2[14][12] + coeff0_15*dmats2[15][12] + coeff0_16*dmats2[16][12] + coeff0_17*dmats2[17][12] + coeff0_18*dmats2[18][12] + coeff0_19*dmats2[19][12] + coeff0_20*dmats2[20][12] + coeff0_21*dmats2[21][12] + coeff0_22*dmats2[22][12] + coeff0_23*dmats2[23][12] + coeff0_24*dmats2[24][12] + coeff0_25*dmats2[25][12] + coeff0_26*dmats2[26][12] + coeff0_27*dmats2[27][12] + coeff0_28*dmats2[28][12] + coeff0_29*dmats2[29][12] + coeff0_30*dmats2[30][12] + coeff0_31*dmats2[31][12] + coeff0_32*dmats2[32][12] + coeff0_33*dmats2[33][12] + coeff0_34*dmats2[34][12];
          new_coeff0_13 = coeff0_0*dmats2[0][13] + coeff0_1*dmats2[1][13] + coeff0_2*dmats2[2][13] + coeff0_3*dmats2[3][13] + coeff0_4*dmats2[4][13] + coeff0_5*dmats2[5][13] + coeff0_6*dmats2[6][13] + coeff0_7*dmats2[7][13] + coeff0_8*dmats2[8][13] + coeff0_9*dmats2[9][13] + coeff0_10*dmats2[10][13] + coeff0_11*dmats2[11][13] + coeff0_12*dmats2[12][13] + coeff0_13*dmats2[13][13] + coeff0_14*dmats2[14][13] + coeff0_15*dmats2[15][13] + coeff0_16*dmats2[16][13] + coeff0_17*dmats2[17][13] + coeff0_18*dmats2[18][13] + coeff0_19*dmats2[19][13] + coeff0_20*dmats2[20][13] + coeff0_21*dmats2[21][13] + coeff0_22*dmats2[22][13] + coeff0_23*dmats2[23][13] + coeff0_24*dmats2[24][13] + coeff0_25*dmats2[25][13] + coeff0_26*dmats2[26][13] + coeff0_27*dmats2[27][13] + coeff0_28*dmats2[28][13] + coeff0_29*dmats2[29][13] + coeff0_30*dmats2[30][13] + coeff0_31*dmats2[31][13] + coeff0_32*dmats2[32][13] + coeff0_33*dmats2[33][13] + coeff0_34*dmats2[34][13];
          new_coeff0_14 = coeff0_0*dmats2[0][14] + coeff0_1*dmats2[1][14] + coeff0_2*dmats2[2][14] + coeff0_3*dmats2[3][14] + coeff0_4*dmats2[4][14] + coeff0_5*dmats2[5][14] + coeff0_6*dmats2[6][14] + coeff0_7*dmats2[7][14] + coeff0_8*dmats2[8][14] + coeff0_9*dmats2[9][14] + coeff0_10*dmats2[10][14] + coeff0_11*dmats2[11][14] + coeff0_12*dmats2[12][14] + coeff0_13*dmats2[13][14] + coeff0_14*dmats2[14][14] + coeff0_15*dmats2[15][14] + coeff0_16*dmats2[16][14] + coeff0_17*dmats2[17][14] + coeff0_18*dmats2[18][14] + coeff0_19*dmats2[19][14] + coeff0_20*dmats2[20][14] + coeff0_21*dmats2[21][14] + coeff0_22*dmats2[22][14] + coeff0_23*dmats2[23][14] + coeff0_24*dmats2[24][14] + coeff0_25*dmats2[25][14] + coeff0_26*dmats2[26][14] + coeff0_27*dmats2[27][14] + coeff0_28*dmats2[28][14] + coeff0_29*dmats2[29][14] + coeff0_30*dmats2[30][14] + coeff0_31*dmats2[31][14] + coeff0_32*dmats2[32][14] + coeff0_33*dmats2[33][14] + coeff0_34*dmats2[34][14];
          new_coeff0_15 = coeff0_0*dmats2[0][15] + coeff0_1*dmats2[1][15] + coeff0_2*dmats2[2][15] + coeff0_3*dmats2[3][15] + coeff0_4*dmats2[4][15] + coeff0_5*dmats2[5][15] + coeff0_6*dmats2[6][15] + coeff0_7*dmats2[7][15] + coeff0_8*dmats2[8][15] + coeff0_9*dmats2[9][15] + coeff0_10*dmats2[10][15] + coeff0_11*dmats2[11][15] + coeff0_12*dmats2[12][15] + coeff0_13*dmats2[13][15] + coeff0_14*dmats2[14][15] + coeff0_15*dmats2[15][15] + coeff0_16*dmats2[16][15] + coeff0_17*dmats2[17][15] + coeff0_18*dmats2[18][15] + coeff0_19*dmats2[19][15] + coeff0_20*dmats2[20][15] + coeff0_21*dmats2[21][15] + coeff0_22*dmats2[22][15] + coeff0_23*dmats2[23][15] + coeff0_24*dmats2[24][15] + coeff0_25*dmats2[25][15] + coeff0_26*dmats2[26][15] + coeff0_27*dmats2[27][15] + coeff0_28*dmats2[28][15] + coeff0_29*dmats2[29][15] + coeff0_30*dmats2[30][15] + coeff0_31*dmats2[31][15] + coeff0_32*dmats2[32][15] + coeff0_33*dmats2[33][15] + coeff0_34*dmats2[34][15];
          new_coeff0_16 = coeff0_0*dmats2[0][16] + coeff0_1*dmats2[1][16] + coeff0_2*dmats2[2][16] + coeff0_3*dmats2[3][16] + coeff0_4*dmats2[4][16] + coeff0_5*dmats2[5][16] + coeff0_6*dmats2[6][16] + coeff0_7*dmats2[7][16] + coeff0_8*dmats2[8][16] + coeff0_9*dmats2[9][16] + coeff0_10*dmats2[10][16] + coeff0_11*dmats2[11][16] + coeff0_12*dmats2[12][16] + coeff0_13*dmats2[13][16] + coeff0_14*dmats2[14][16] + coeff0_15*dmats2[15][16] + coeff0_16*dmats2[16][16] + coeff0_17*dmats2[17][16] + coeff0_18*dmats2[18][16] + coeff0_19*dmats2[19][16] + coeff0_20*dmats2[20][16] + coeff0_21*dmats2[21][16] + coeff0_22*dmats2[22][16] + coeff0_23*dmats2[23][16] + coeff0_24*dmats2[24][16] + coeff0_25*dmats2[25][16] + coeff0_26*dmats2[26][16] + coeff0_27*dmats2[27][16] + coeff0_28*dmats2[28][16] + coeff0_29*dmats2[29][16] + coeff0_30*dmats2[30][16] + coeff0_31*dmats2[31][16] + coeff0_32*dmats2[32][16] + coeff0_33*dmats2[33][16] + coeff0_34*dmats2[34][16];
          new_coeff0_17 = coeff0_0*dmats2[0][17] + coeff0_1*dmats2[1][17] + coeff0_2*dmats2[2][17] + coeff0_3*dmats2[3][17] + coeff0_4*dmats2[4][17] + coeff0_5*dmats2[5][17] + coeff0_6*dmats2[6][17] + coeff0_7*dmats2[7][17] + coeff0_8*dmats2[8][17] + coeff0_9*dmats2[9][17] + coeff0_10*dmats2[10][17] + coeff0_11*dmats2[11][17] + coeff0_12*dmats2[12][17] + coeff0_13*dmats2[13][17] + coeff0_14*dmats2[14][17] + coeff0_15*dmats2[15][17] + coeff0_16*dmats2[16][17] + coeff0_17*dmats2[17][17] + coeff0_18*dmats2[18][17] + coeff0_19*dmats2[19][17] + coeff0_20*dmats2[20][17] + coeff0_21*dmats2[21][17] + coeff0_22*dmats2[22][17] + coeff0_23*dmats2[23][17] + coeff0_24*dmats2[24][17] + coeff0_25*dmats2[25][17] + coeff0_26*dmats2[26][17] + coeff0_27*dmats2[27][17] + coeff0_28*dmats2[28][17] + coeff0_29*dmats2[29][17] + coeff0_30*dmats2[30][17] + coeff0_31*dmats2[31][17] + coeff0_32*dmats2[32][17] + coeff0_33*dmats2[33][17] + coeff0_34*dmats2[34][17];
          new_coeff0_18 = coeff0_0*dmats2[0][18] + coeff0_1*dmats2[1][18] + coeff0_2*dmats2[2][18] + coeff0_3*dmats2[3][18] + coeff0_4*dmats2[4][18] + coeff0_5*dmats2[5][18] + coeff0_6*dmats2[6][18] + coeff0_7*dmats2[7][18] + coeff0_8*dmats2[8][18] + coeff0_9*dmats2[9][18] + coeff0_10*dmats2[10][18] + coeff0_11*dmats2[11][18] + coeff0_12*dmats2[12][18] + coeff0_13*dmats2[13][18] + coeff0_14*dmats2[14][18] + coeff0_15*dmats2[15][18] + coeff0_16*dmats2[16][18] + coeff0_17*dmats2[17][18] + coeff0_18*dmats2[18][18] + coeff0_19*dmats2[19][18] + coeff0_20*dmats2[20][18] + coeff0_21*dmats2[21][18] + coeff0_22*dmats2[22][18] + coeff0_23*dmats2[23][18] + coeff0_24*dmats2[24][18] + coeff0_25*dmats2[25][18] + coeff0_26*dmats2[26][18] + coeff0_27*dmats2[27][18] + coeff0_28*dmats2[28][18] + coeff0_29*dmats2[29][18] + coeff0_30*dmats2[30][18] + coeff0_31*dmats2[31][18] + coeff0_32*dmats2[32][18] + coeff0_33*dmats2[33][18] + coeff0_34*dmats2[34][18];
          new_coeff0_19 = coeff0_0*dmats2[0][19] + coeff0_1*dmats2[1][19] + coeff0_2*dmats2[2][19] + coeff0_3*dmats2[3][19] + coeff0_4*dmats2[4][19] + coeff0_5*dmats2[5][19] + coeff0_6*dmats2[6][19] + coeff0_7*dmats2[7][19] + coeff0_8*dmats2[8][19] + coeff0_9*dmats2[9][19] + coeff0_10*dmats2[10][19] + coeff0_11*dmats2[11][19] + coeff0_12*dmats2[12][19] + coeff0_13*dmats2[13][19] + coeff0_14*dmats2[14][19] + coeff0_15*dmats2[15][19] + coeff0_16*dmats2[16][19] + coeff0_17*dmats2[17][19] + coeff0_18*dmats2[18][19] + coeff0_19*dmats2[19][19] + coeff0_20*dmats2[20][19] + coeff0_21*dmats2[21][19] + coeff0_22*dmats2[22][19] + coeff0_23*dmats2[23][19] + coeff0_24*dmats2[24][19] + coeff0_25*dmats2[25][19] + coeff0_26*dmats2[26][19] + coeff0_27*dmats2[27][19] + coeff0_28*dmats2[28][19] + coeff0_29*dmats2[29][19] + coeff0_30*dmats2[30][19] + coeff0_31*dmats2[31][19] + coeff0_32*dmats2[32][19] + coeff0_33*dmats2[33][19] + coeff0_34*dmats2[34][19];
          new_coeff0_20 = coeff0_0*dmats2[0][20] + coeff0_1*dmats2[1][20] + coeff0_2*dmats2[2][20] + coeff0_3*dmats2[3][20] + coeff0_4*dmats2[4][20] + coeff0_5*dmats2[5][20] + coeff0_6*dmats2[6][20] + coeff0_7*dmats2[7][20] + coeff0_8*dmats2[8][20] + coeff0_9*dmats2[9][20] + coeff0_10*dmats2[10][20] + coeff0_11*dmats2[11][20] + coeff0_12*dmats2[12][20] + coeff0_13*dmats2[13][20] + coeff0_14*dmats2[14][20] + coeff0_15*dmats2[15][20] + coeff0_16*dmats2[16][20] + coeff0_17*dmats2[17][20] + coeff0_18*dmats2[18][20] + coeff0_19*dmats2[19][20] + coeff0_20*dmats2[20][20] + coeff0_21*dmats2[21][20] + coeff0_22*dmats2[22][20] + coeff0_23*dmats2[23][20] + coeff0_24*dmats2[24][20] + coeff0_25*dmats2[25][20] + coeff0_26*dmats2[26][20] + coeff0_27*dmats2[27][20] + coeff0_28*dmats2[28][20] + coeff0_29*dmats2[29][20] + coeff0_30*dmats2[30][20] + coeff0_31*dmats2[31][20] + coeff0_32*dmats2[32][20] + coeff0_33*dmats2[33][20] + coeff0_34*dmats2[34][20];
          new_coeff0_21 = coeff0_0*dmats2[0][21] + coeff0_1*dmats2[1][21] + coeff0_2*dmats2[2][21] + coeff0_3*dmats2[3][21] + coeff0_4*dmats2[4][21] + coeff0_5*dmats2[5][21] + coeff0_6*dmats2[6][21] + coeff0_7*dmats2[7][21] + coeff0_8*dmats2[8][21] + coeff0_9*dmats2[9][21] + coeff0_10*dmats2[10][21] + coeff0_11*dmats2[11][21] + coeff0_12*dmats2[12][21] + coeff0_13*dmats2[13][21] + coeff0_14*dmats2[14][21] + coeff0_15*dmats2[15][21] + coeff0_16*dmats2[16][21] + coeff0_17*dmats2[17][21] + coeff0_18*dmats2[18][21] + coeff0_19*dmats2[19][21] + coeff0_20*dmats2[20][21] + coeff0_21*dmats2[21][21] + coeff0_22*dmats2[22][21] + coeff0_23*dmats2[23][21] + coeff0_24*dmats2[24][21] + coeff0_25*dmats2[25][21] + coeff0_26*dmats2[26][21] + coeff0_27*dmats2[27][21] + coeff0_28*dmats2[28][21] + coeff0_29*dmats2[29][21] + coeff0_30*dmats2[30][21] + coeff0_31*dmats2[31][21] + coeff0_32*dmats2[32][21] + coeff0_33*dmats2[33][21] + coeff0_34*dmats2[34][21];
          new_coeff0_22 = coeff0_0*dmats2[0][22] + coeff0_1*dmats2[1][22] + coeff0_2*dmats2[2][22] + coeff0_3*dmats2[3][22] + coeff0_4*dmats2[4][22] + coeff0_5*dmats2[5][22] + coeff0_6*dmats2[6][22] + coeff0_7*dmats2[7][22] + coeff0_8*dmats2[8][22] + coeff0_9*dmats2[9][22] + coeff0_10*dmats2[10][22] + coeff0_11*dmats2[11][22] + coeff0_12*dmats2[12][22] + coeff0_13*dmats2[13][22] + coeff0_14*dmats2[14][22] + coeff0_15*dmats2[15][22] + coeff0_16*dmats2[16][22] + coeff0_17*dmats2[17][22] + coeff0_18*dmats2[18][22] + coeff0_19*dmats2[19][22] + coeff0_20*dmats2[20][22] + coeff0_21*dmats2[21][22] + coeff0_22*dmats2[22][22] + coeff0_23*dmats2[23][22] + coeff0_24*dmats2[24][22] + coeff0_25*dmats2[25][22] + coeff0_26*dmats2[26][22] + coeff0_27*dmats2[27][22] + coeff0_28*dmats2[28][22] + coeff0_29*dmats2[29][22] + coeff0_30*dmats2[30][22] + coeff0_31*dmats2[31][22] + coeff0_32*dmats2[32][22] + coeff0_33*dmats2[33][22] + coeff0_34*dmats2[34][22];
          new_coeff0_23 = coeff0_0*dmats2[0][23] + coeff0_1*dmats2[1][23] + coeff0_2*dmats2[2][23] + coeff0_3*dmats2[3][23] + coeff0_4*dmats2[4][23] + coeff0_5*dmats2[5][23] + coeff0_6*dmats2[6][23] + coeff0_7*dmats2[7][23] + coeff0_8*dmats2[8][23] + coeff0_9*dmats2[9][23] + coeff0_10*dmats2[10][23] + coeff0_11*dmats2[11][23] + coeff0_12*dmats2[12][23] + coeff0_13*dmats2[13][23] + coeff0_14*dmats2[14][23] + coeff0_15*dmats2[15][23] + coeff0_16*dmats2[16][23] + coeff0_17*dmats2[17][23] + coeff0_18*dmats2[18][23] + coeff0_19*dmats2[19][23] + coeff0_20*dmats2[20][23] + coeff0_21*dmats2[21][23] + coeff0_22*dmats2[22][23] + coeff0_23*dmats2[23][23] + coeff0_24*dmats2[24][23] + coeff0_25*dmats2[25][23] + coeff0_26*dmats2[26][23] + coeff0_27*dmats2[27][23] + coeff0_28*dmats2[28][23] + coeff0_29*dmats2[29][23] + coeff0_30*dmats2[30][23] + coeff0_31*dmats2[31][23] + coeff0_32*dmats2[32][23] + coeff0_33*dmats2[33][23] + coeff0_34*dmats2[34][23];
          new_coeff0_24 = coeff0_0*dmats2[0][24] + coeff0_1*dmats2[1][24] + coeff0_2*dmats2[2][24] + coeff0_3*dmats2[3][24] + coeff0_4*dmats2[4][24] + coeff0_5*dmats2[5][24] + coeff0_6*dmats2[6][24] + coeff0_7*dmats2[7][24] + coeff0_8*dmats2[8][24] + coeff0_9*dmats2[9][24] + coeff0_10*dmats2[10][24] + coeff0_11*dmats2[11][24] + coeff0_12*dmats2[12][24] + coeff0_13*dmats2[13][24] + coeff0_14*dmats2[14][24] + coeff0_15*dmats2[15][24] + coeff0_16*dmats2[16][24] + coeff0_17*dmats2[17][24] + coeff0_18*dmats2[18][24] + coeff0_19*dmats2[19][24] + coeff0_20*dmats2[20][24] + coeff0_21*dmats2[21][24] + coeff0_22*dmats2[22][24] + coeff0_23*dmats2[23][24] + coeff0_24*dmats2[24][24] + coeff0_25*dmats2[25][24] + coeff0_26*dmats2[26][24] + coeff0_27*dmats2[27][24] + coeff0_28*dmats2[28][24] + coeff0_29*dmats2[29][24] + coeff0_30*dmats2[30][24] + coeff0_31*dmats2[31][24] + coeff0_32*dmats2[32][24] + coeff0_33*dmats2[33][24] + coeff0_34*dmats2[34][24];
          new_coeff0_25 = coeff0_0*dmats2[0][25] + coeff0_1*dmats2[1][25] + coeff0_2*dmats2[2][25] + coeff0_3*dmats2[3][25] + coeff0_4*dmats2[4][25] + coeff0_5*dmats2[5][25] + coeff0_6*dmats2[6][25] + coeff0_7*dmats2[7][25] + coeff0_8*dmats2[8][25] + coeff0_9*dmats2[9][25] + coeff0_10*dmats2[10][25] + coeff0_11*dmats2[11][25] + coeff0_12*dmats2[12][25] + coeff0_13*dmats2[13][25] + coeff0_14*dmats2[14][25] + coeff0_15*dmats2[15][25] + coeff0_16*dmats2[16][25] + coeff0_17*dmats2[17][25] + coeff0_18*dmats2[18][25] + coeff0_19*dmats2[19][25] + coeff0_20*dmats2[20][25] + coeff0_21*dmats2[21][25] + coeff0_22*dmats2[22][25] + coeff0_23*dmats2[23][25] + coeff0_24*dmats2[24][25] + coeff0_25*dmats2[25][25] + coeff0_26*dmats2[26][25] + coeff0_27*dmats2[27][25] + coeff0_28*dmats2[28][25] + coeff0_29*dmats2[29][25] + coeff0_30*dmats2[30][25] + coeff0_31*dmats2[31][25] + coeff0_32*dmats2[32][25] + coeff0_33*dmats2[33][25] + coeff0_34*dmats2[34][25];
          new_coeff0_26 = coeff0_0*dmats2[0][26] + coeff0_1*dmats2[1][26] + coeff0_2*dmats2[2][26] + coeff0_3*dmats2[3][26] + coeff0_4*dmats2[4][26] + coeff0_5*dmats2[5][26] + coeff0_6*dmats2[6][26] + coeff0_7*dmats2[7][26] + coeff0_8*dmats2[8][26] + coeff0_9*dmats2[9][26] + coeff0_10*dmats2[10][26] + coeff0_11*dmats2[11][26] + coeff0_12*dmats2[12][26] + coeff0_13*dmats2[13][26] + coeff0_14*dmats2[14][26] + coeff0_15*dmats2[15][26] + coeff0_16*dmats2[16][26] + coeff0_17*dmats2[17][26] + coeff0_18*dmats2[18][26] + coeff0_19*dmats2[19][26] + coeff0_20*dmats2[20][26] + coeff0_21*dmats2[21][26] + coeff0_22*dmats2[22][26] + coeff0_23*dmats2[23][26] + coeff0_24*dmats2[24][26] + coeff0_25*dmats2[25][26] + coeff0_26*dmats2[26][26] + coeff0_27*dmats2[27][26] + coeff0_28*dmats2[28][26] + coeff0_29*dmats2[29][26] + coeff0_30*dmats2[30][26] + coeff0_31*dmats2[31][26] + coeff0_32*dmats2[32][26] + coeff0_33*dmats2[33][26] + coeff0_34*dmats2[34][26];
          new_coeff0_27 = coeff0_0*dmats2[0][27] + coeff0_1*dmats2[1][27] + coeff0_2*dmats2[2][27] + coeff0_3*dmats2[3][27] + coeff0_4*dmats2[4][27] + coeff0_5*dmats2[5][27] + coeff0_6*dmats2[6][27] + coeff0_7*dmats2[7][27] + coeff0_8*dmats2[8][27] + coeff0_9*dmats2[9][27] + coeff0_10*dmats2[10][27] + coeff0_11*dmats2[11][27] + coeff0_12*dmats2[12][27] + coeff0_13*dmats2[13][27] + coeff0_14*dmats2[14][27] + coeff0_15*dmats2[15][27] + coeff0_16*dmats2[16][27] + coeff0_17*dmats2[17][27] + coeff0_18*dmats2[18][27] + coeff0_19*dmats2[19][27] + coeff0_20*dmats2[20][27] + coeff0_21*dmats2[21][27] + coeff0_22*dmats2[22][27] + coeff0_23*dmats2[23][27] + coeff0_24*dmats2[24][27] + coeff0_25*dmats2[25][27] + coeff0_26*dmats2[26][27] + coeff0_27*dmats2[27][27] + coeff0_28*dmats2[28][27] + coeff0_29*dmats2[29][27] + coeff0_30*dmats2[30][27] + coeff0_31*dmats2[31][27] + coeff0_32*dmats2[32][27] + coeff0_33*dmats2[33][27] + coeff0_34*dmats2[34][27];
          new_coeff0_28 = coeff0_0*dmats2[0][28] + coeff0_1*dmats2[1][28] + coeff0_2*dmats2[2][28] + coeff0_3*dmats2[3][28] + coeff0_4*dmats2[4][28] + coeff0_5*dmats2[5][28] + coeff0_6*dmats2[6][28] + coeff0_7*dmats2[7][28] + coeff0_8*dmats2[8][28] + coeff0_9*dmats2[9][28] + coeff0_10*dmats2[10][28] + coeff0_11*dmats2[11][28] + coeff0_12*dmats2[12][28] + coeff0_13*dmats2[13][28] + coeff0_14*dmats2[14][28] + coeff0_15*dmats2[15][28] + coeff0_16*dmats2[16][28] + coeff0_17*dmats2[17][28] + coeff0_18*dmats2[18][28] + coeff0_19*dmats2[19][28] + coeff0_20*dmats2[20][28] + coeff0_21*dmats2[21][28] + coeff0_22*dmats2[22][28] + coeff0_23*dmats2[23][28] + coeff0_24*dmats2[24][28] + coeff0_25*dmats2[25][28] + coeff0_26*dmats2[26][28] + coeff0_27*dmats2[27][28] + coeff0_28*dmats2[28][28] + coeff0_29*dmats2[29][28] + coeff0_30*dmats2[30][28] + coeff0_31*dmats2[31][28] + coeff0_32*dmats2[32][28] + coeff0_33*dmats2[33][28] + coeff0_34*dmats2[34][28];
          new_coeff0_29 = coeff0_0*dmats2[0][29] + coeff0_1*dmats2[1][29] + coeff0_2*dmats2[2][29] + coeff0_3*dmats2[3][29] + coeff0_4*dmats2[4][29] + coeff0_5*dmats2[5][29] + coeff0_6*dmats2[6][29] + coeff0_7*dmats2[7][29] + coeff0_8*dmats2[8][29] + coeff0_9*dmats2[9][29] + coeff0_10*dmats2[10][29] + coeff0_11*dmats2[11][29] + coeff0_12*dmats2[12][29] + coeff0_13*dmats2[13][29] + coeff0_14*dmats2[14][29] + coeff0_15*dmats2[15][29] + coeff0_16*dmats2[16][29] + coeff0_17*dmats2[17][29] + coeff0_18*dmats2[18][29] + coeff0_19*dmats2[19][29] + coeff0_20*dmats2[20][29] + coeff0_21*dmats2[21][29] + coeff0_22*dmats2[22][29] + coeff0_23*dmats2[23][29] + coeff0_24*dmats2[24][29] + coeff0_25*dmats2[25][29] + coeff0_26*dmats2[26][29] + coeff0_27*dmats2[27][29] + coeff0_28*dmats2[28][29] + coeff0_29*dmats2[29][29] + coeff0_30*dmats2[30][29] + coeff0_31*dmats2[31][29] + coeff0_32*dmats2[32][29] + coeff0_33*dmats2[33][29] + coeff0_34*dmats2[34][29];
          new_coeff0_30 = coeff0_0*dmats2[0][30] + coeff0_1*dmats2[1][30] + coeff0_2*dmats2[2][30] + coeff0_3*dmats2[3][30] + coeff0_4*dmats2[4][30] + coeff0_5*dmats2[5][30] + coeff0_6*dmats2[6][30] + coeff0_7*dmats2[7][30] + coeff0_8*dmats2[8][30] + coeff0_9*dmats2[9][30] + coeff0_10*dmats2[10][30] + coeff0_11*dmats2[11][30] + coeff0_12*dmats2[12][30] + coeff0_13*dmats2[13][30] + coeff0_14*dmats2[14][30] + coeff0_15*dmats2[15][30] + coeff0_16*dmats2[16][30] + coeff0_17*dmats2[17][30] + coeff0_18*dmats2[18][30] + coeff0_19*dmats2[19][30] + coeff0_20*dmats2[20][30] + coeff0_21*dmats2[21][30] + coeff0_22*dmats2[22][30] + coeff0_23*dmats2[23][30] + coeff0_24*dmats2[24][30] + coeff0_25*dmats2[25][30] + coeff0_26*dmats2[26][30] + coeff0_27*dmats2[27][30] + coeff0_28*dmats2[28][30] + coeff0_29*dmats2[29][30] + coeff0_30*dmats2[30][30] + coeff0_31*dmats2[31][30] + coeff0_32*dmats2[32][30] + coeff0_33*dmats2[33][30] + coeff0_34*dmats2[34][30];
          new_coeff0_31 = coeff0_0*dmats2[0][31] + coeff0_1*dmats2[1][31] + coeff0_2*dmats2[2][31] + coeff0_3*dmats2[3][31] + coeff0_4*dmats2[4][31] + coeff0_5*dmats2[5][31] + coeff0_6*dmats2[6][31] + coeff0_7*dmats2[7][31] + coeff0_8*dmats2[8][31] + coeff0_9*dmats2[9][31] + coeff0_10*dmats2[10][31] + coeff0_11*dmats2[11][31] + coeff0_12*dmats2[12][31] + coeff0_13*dmats2[13][31] + coeff0_14*dmats2[14][31] + coeff0_15*dmats2[15][31] + coeff0_16*dmats2[16][31] + coeff0_17*dmats2[17][31] + coeff0_18*dmats2[18][31] + coeff0_19*dmats2[19][31] + coeff0_20*dmats2[20][31] + coeff0_21*dmats2[21][31] + coeff0_22*dmats2[22][31] + coeff0_23*dmats2[23][31] + coeff0_24*dmats2[24][31] + coeff0_25*dmats2[25][31] + coeff0_26*dmats2[26][31] + coeff0_27*dmats2[27][31] + coeff0_28*dmats2[28][31] + coeff0_29*dmats2[29][31] + coeff0_30*dmats2[30][31] + coeff0_31*dmats2[31][31] + coeff0_32*dmats2[32][31] + coeff0_33*dmats2[33][31] + coeff0_34*dmats2[34][31];
          new_coeff0_32 = coeff0_0*dmats2[0][32] + coeff0_1*dmats2[1][32] + coeff0_2*dmats2[2][32] + coeff0_3*dmats2[3][32] + coeff0_4*dmats2[4][32] + coeff0_5*dmats2[5][32] + coeff0_6*dmats2[6][32] + coeff0_7*dmats2[7][32] + coeff0_8*dmats2[8][32] + coeff0_9*dmats2[9][32] + coeff0_10*dmats2[10][32] + coeff0_11*dmats2[11][32] + coeff0_12*dmats2[12][32] + coeff0_13*dmats2[13][32] + coeff0_14*dmats2[14][32] + coeff0_15*dmats2[15][32] + coeff0_16*dmats2[16][32] + coeff0_17*dmats2[17][32] + coeff0_18*dmats2[18][32] + coeff0_19*dmats2[19][32] + coeff0_20*dmats2[20][32] + coeff0_21*dmats2[21][32] + coeff0_22*dmats2[22][32] + coeff0_23*dmats2[23][32] + coeff0_24*dmats2[24][32] + coeff0_25*dmats2[25][32] + coeff0_26*dmats2[26][32] + coeff0_27*dmats2[27][32] + coeff0_28*dmats2[28][32] + coeff0_29*dmats2[29][32] + coeff0_30*dmats2[30][32] + coeff0_31*dmats2[31][32] + coeff0_32*dmats2[32][32] + coeff0_33*dmats2[33][32] + coeff0_34*dmats2[34][32];
          new_coeff0_33 = coeff0_0*dmats2[0][33] + coeff0_1*dmats2[1][33] + coeff0_2*dmats2[2][33] + coeff0_3*dmats2[3][33] + coeff0_4*dmats2[4][33] + coeff0_5*dmats2[5][33] + coeff0_6*dmats2[6][33] + coeff0_7*dmats2[7][33] + coeff0_8*dmats2[8][33] + coeff0_9*dmats2[9][33] + coeff0_10*dmats2[10][33] + coeff0_11*dmats2[11][33] + coeff0_12*dmats2[12][33] + coeff0_13*dmats2[13][33] + coeff0_14*dmats2[14][33] + coeff0_15*dmats2[15][33] + coeff0_16*dmats2[16][33] + coeff0_17*dmats2[17][33] + coeff0_18*dmats2[18][33] + coeff0_19*dmats2[19][33] + coeff0_20*dmats2[20][33] + coeff0_21*dmats2[21][33] + coeff0_22*dmats2[22][33] + coeff0_23*dmats2[23][33] + coeff0_24*dmats2[24][33] + coeff0_25*dmats2[25][33] + coeff0_26*dmats2[26][33] + coeff0_27*dmats2[27][33] + coeff0_28*dmats2[28][33] + coeff0_29*dmats2[29][33] + coeff0_30*dmats2[30][33] + coeff0_31*dmats2[31][33] + coeff0_32*dmats2[32][33] + coeff0_33*dmats2[33][33] + coeff0_34*dmats2[34][33];
          new_coeff0_34 = coeff0_0*dmats2[0][34] + coeff0_1*dmats2[1][34] + coeff0_2*dmats2[2][34] + coeff0_3*dmats2[3][34] + coeff0_4*dmats2[4][34] + coeff0_5*dmats2[5][34] + coeff0_6*dmats2[6][34] + coeff0_7*dmats2[7][34] + coeff0_8*dmats2[8][34] + coeff0_9*dmats2[9][34] + coeff0_10*dmats2[10][34] + coeff0_11*dmats2[11][34] + coeff0_12*dmats2[12][34] + coeff0_13*dmats2[13][34] + coeff0_14*dmats2[14][34] + coeff0_15*dmats2[15][34] + coeff0_16*dmats2[16][34] + coeff0_17*dmats2[17][34] + coeff0_18*dmats2[18][34] + coeff0_19*dmats2[19][34] + coeff0_20*dmats2[20][34] + coeff0_21*dmats2[21][34] + coeff0_22*dmats2[22][34] + coeff0_23*dmats2[23][34] + coeff0_24*dmats2[24][34] + coeff0_25*dmats2[25][34] + coeff0_26*dmats2[26][34] + coeff0_27*dmats2[27][34] + coeff0_28*dmats2[28][34] + coeff0_29*dmats2[29][34] + coeff0_30*dmats2[30][34] + coeff0_31*dmats2[31][34] + coeff0_32*dmats2[32][34] + coeff0_33*dmats2[33][34] + coeff0_34*dmats2[34][34];
        }
    
      }
      // Compute derivatives on reference element as dot product of coefficients and basisvalues
      derivatives[deriv_num] = new_coeff0_0*basisvalue0 + new_coeff0_1*basisvalue1 + new_coeff0_2*basisvalue2 + new_coeff0_3*basisvalue3 + new_coeff0_4*basisvalue4 + new_coeff0_5*basisvalue5 + new_coeff0_6*basisvalue6 + new_coeff0_7*basisvalue7 + new_coeff0_8*basisvalue8 + new_coeff0_9*basisvalue9 + new_coeff0_10*basisvalue10 + new_coeff0_11*basisvalue11 + new_coeff0_12*basisvalue12 + new_coeff0_13*basisvalue13 + new_coeff0_14*basisvalue14 + new_coeff0_15*basisvalue15 + new_coeff0_16*basisvalue16 + new_coeff0_17*basisvalue17 + new_coeff0_18*basisvalue18 + new_coeff0_19*basisvalue19 + new_coeff0_20*basisvalue20 + new_coeff0_21*basisvalue21 + new_coeff0_22*basisvalue22 + new_coeff0_23*basisvalue23 + new_coeff0_24*basisvalue24 + new_coeff0_25*basisvalue25 + new_coeff0_26*basisvalue26 + new_coeff0_27*basisvalue27 + new_coeff0_28*basisvalue28 + new_coeff0_29*basisvalue29 + new_coeff0_30*basisvalue30 + new_coeff0_31*basisvalue31 + new_coeff0_32*basisvalue32 + new_coeff0_33*basisvalue33 + new_coeff0_34*basisvalue34;
    }
    
    // Transform derivatives back to physical element
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        values[row] += transform[row][col]*derivatives[col];
      }
    }
    // Delete pointer to array of derivatives on FIAT element
    delete [] derivatives;
    
    // Delete pointer to array of combinations of derivatives and transform
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      delete [] combinations[row];
      delete [] transform[row];
    }
    
    delete [] combinations;
    delete [] transform;
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis_derivatives() is not yet implemented.");
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // The reference points, direction and weights:
    const static double X[35][1][3] = {{{0, 0, 0}}, {{1, 0, 0}}, {{0, 1, 0}}, {{0, 0, 1}}, {{0, 0.75, 0.25}}, {{0, 0.5, 0.5}}, {{0, 0.25, 0.75}}, {{0.75, 0, 0.25}}, {{0.5, 0, 0.5}}, {{0.25, 0, 0.75}}, {{0.75, 0.25, 0}}, {{0.5, 0.5, 0}}, {{0.25, 0.75, 0}}, {{0, 0, 0.25}}, {{0, 0, 0.5}}, {{0, 0, 0.75}}, {{0, 0.25, 0}}, {{0, 0.5, 0}}, {{0, 0.75, 0}}, {{0.25, 0, 0}}, {{0.5, 0, 0}}, {{0.75, 0, 0}}, {{0.5, 0.25, 0.25}}, {{0.25, 0.5, 0.25}}, {{0.25, 0.25, 0.5}}, {{0, 0.25, 0.25}}, {{0, 0.5, 0.25}}, {{0, 0.25, 0.5}}, {{0.25, 0, 0.25}}, {{0.5, 0, 0.25}}, {{0.25, 0, 0.5}}, {{0.25, 0.25, 0}}, {{0.5, 0.25, 0}}, {{0.25, 0.5, 0}}, {{0.25, 0.25, 0.25}}};
    const static double W[35][1] = {{1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}};
    const static double D[35][1][1] = {{{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}};
    
    const double * const * x = c.coordinates;
    double result = 0.0;
    // Iterate over the points:
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0][0] - X[i][0][1] - X[i][0][2];
    const double w1 = X[i][0][0];
    const double w2 = X[i][0][1];
    const double w3 = X[i][0][2];
    
    // Compute affine mapping y = F(X)
    double y[3];
    y[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0] + w3*x[3][0];
    y[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1] + w3*x[3][1];
    y[2] = w0*x[0][2] + w1*x[1][2] + w2*x[2][2] + w3*x[3][2];
    
    // Evaluate function at physical points
    double values[1];
    f.evaluate(values, y, c);
    
    // Map function values using appropriate mapping
    // Affine map: Do nothing
    
    // Note that we do not map the weights (yet).
    
    // Take directional components
    for(int k = 0; k < 1; k++)
      result += values[k]*D[i][0][k];
    // Multiply by weights 
    result *= W[i][0];
    
    return result;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate at vertices and use affine mapping
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new UFC_Poisson3D_4BilinearForm_finite_element_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class UFC_Poisson3D_4BilinearForm_dof_map_0: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  UFC_Poisson3D_4BilinearForm_dof_map_0() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~UFC_Poisson3D_4BilinearForm_dof_map_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for FiniteElement('Lagrange', 'tetrahedron', 4)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return true;
      break;
    case 2:
      return true;
      break;
    case 3:
      return true;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = m.num_entities[0] + 3*m.num_entities[1] + 3*m.num_entities[2] + m.num_entities[3];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space
  virtual unsigned int local_dimension() const
  {
    return 35;
  }

  // Return the geometric dimension of the coordinates this dof map provides
  virtual unsigned int geometric_dimension() const
  {
    return 3;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 15;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    dofs[3] = c.entity_indices[0][3];
    unsigned int offset = m.num_entities[0];
    dofs[4] = offset + 3*c.entity_indices[1][0];
    dofs[5] = offset + 3*c.entity_indices[1][0] + 1;
    dofs[6] = offset + 3*c.entity_indices[1][0] + 2;
    dofs[7] = offset + 3*c.entity_indices[1][1];
    dofs[8] = offset + 3*c.entity_indices[1][1] + 1;
    dofs[9] = offset + 3*c.entity_indices[1][1] + 2;
    dofs[10] = offset + 3*c.entity_indices[1][2];
    dofs[11] = offset + 3*c.entity_indices[1][2] + 1;
    dofs[12] = offset + 3*c.entity_indices[1][2] + 2;
    dofs[13] = offset + 3*c.entity_indices[1][3];
    dofs[14] = offset + 3*c.entity_indices[1][3] + 1;
    dofs[15] = offset + 3*c.entity_indices[1][3] + 2;
    dofs[16] = offset + 3*c.entity_indices[1][4];
    dofs[17] = offset + 3*c.entity_indices[1][4] + 1;
    dofs[18] = offset + 3*c.entity_indices[1][4] + 2;
    dofs[19] = offset + 3*c.entity_indices[1][5];
    dofs[20] = offset + 3*c.entity_indices[1][5] + 1;
    dofs[21] = offset + 3*c.entity_indices[1][5] + 2;
    offset = offset + 3*m.num_entities[1];
    dofs[22] = offset + 3*c.entity_indices[2][0];
    dofs[23] = offset + 3*c.entity_indices[2][0] + 1;
    dofs[24] = offset + 3*c.entity_indices[2][0] + 2;
    dofs[25] = offset + 3*c.entity_indices[2][1];
    dofs[26] = offset + 3*c.entity_indices[2][1] + 1;
    dofs[27] = offset + 3*c.entity_indices[2][1] + 2;
    dofs[28] = offset + 3*c.entity_indices[2][2];
    dofs[29] = offset + 3*c.entity_indices[2][2] + 1;
    dofs[30] = offset + 3*c.entity_indices[2][2] + 2;
    dofs[31] = offset + 3*c.entity_indices[2][3];
    dofs[32] = offset + 3*c.entity_indices[2][3] + 1;
    dofs[33] = offset + 3*c.entity_indices[2][3] + 2;
    offset = offset + 3*m.num_entities[2];
    dofs[34] = offset + c.entity_indices[3][0];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 7;
      dofs[7] = 8;
      dofs[8] = 9;
      dofs[9] = 10;
      dofs[10] = 11;
      dofs[11] = 12;
      dofs[12] = 22;
      dofs[13] = 23;
      dofs[14] = 24;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 13;
      dofs[7] = 14;
      dofs[8] = 15;
      dofs[9] = 16;
      dofs[10] = 17;
      dofs[11] = 18;
      dofs[12] = 25;
      dofs[13] = 26;
      dofs[14] = 27;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 7;
      dofs[4] = 8;
      dofs[5] = 9;
      dofs[6] = 13;
      dofs[7] = 14;
      dofs[8] = 15;
      dofs[9] = 19;
      dofs[10] = 20;
      dofs[11] = 21;
      dofs[12] = 28;
      dofs[13] = 29;
      dofs[14] = 30;
      break;
    case 3:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 10;
      dofs[4] = 11;
      dofs[5] = 12;
      dofs[6] = 16;
      dofs[7] = 17;
      dofs[8] = 18;
      dofs[9] = 19;
      dofs[10] = 20;
      dofs[11] = 21;
      dofs[12] = 31;
      dofs[13] = 32;
      dofs[14] = 33;
      break;
    }
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[0][2] = x[0][2];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[1][2] = x[1][2];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[2][2] = x[2][2];
    coordinates[3][0] = x[3][0];
    coordinates[3][1] = x[3][1];
    coordinates[3][2] = x[3][2];
    coordinates[4][0] = 0.75*x[2][0] + 0.25*x[3][0];
    coordinates[4][1] = 0.75*x[2][1] + 0.25*x[3][1];
    coordinates[4][2] = 0.75*x[2][2] + 0.25*x[3][2];
    coordinates[5][0] = 0.5*x[2][0] + 0.5*x[3][0];
    coordinates[5][1] = 0.5*x[2][1] + 0.5*x[3][1];
    coordinates[5][2] = 0.5*x[2][2] + 0.5*x[3][2];
    coordinates[6][0] = 0.25*x[2][0] + 0.75*x[3][0];
    coordinates[6][1] = 0.25*x[2][1] + 0.75*x[3][1];
    coordinates[6][2] = 0.25*x[2][2] + 0.75*x[3][2];
    coordinates[7][0] = 0.75*x[1][0] + 0.25*x[3][0];
    coordinates[7][1] = 0.75*x[1][1] + 0.25*x[3][1];
    coordinates[7][2] = 0.75*x[1][2] + 0.25*x[3][2];
    coordinates[8][0] = 0.5*x[1][0] + 0.5*x[3][0];
    coordinates[8][1] = 0.5*x[1][1] + 0.5*x[3][1];
    coordinates[8][2] = 0.5*x[1][2] + 0.5*x[3][2];
    coordinates[9][0] = 0.25*x[1][0] + 0.75*x[3][0];
    coordinates[9][1] = 0.25*x[1][1] + 0.75*x[3][1];
    coordinates[9][2] = 0.25*x[1][2] + 0.75*x[3][2];
    coordinates[10][0] = 0.75*x[1][0] + 0.25*x[2][0];
    coordinates[10][1] = 0.75*x[1][1] + 0.25*x[2][1];
    coordinates[10][2] = 0.75*x[1][2] + 0.25*x[2][2];
    coordinates[11][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[11][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[11][2] = 0.5*x[1][2] + 0.5*x[2][2];
    coordinates[12][0] = 0.25*x[1][0] + 0.75*x[2][0];
    coordinates[12][1] = 0.25*x[1][1] + 0.75*x[2][1];
    coordinates[12][2] = 0.25*x[1][2] + 0.75*x[2][2];
    coordinates[13][0] = 0.75*x[0][0] + 0.25*x[3][0];
    coordinates[13][1] = 0.75*x[0][1] + 0.25*x[3][1];
    coordinates[13][2] = 0.75*x[0][2] + 0.25*x[3][2];
    coordinates[14][0] = 0.5*x[0][0] + 0.5*x[3][0];
    coordinates[14][1] = 0.5*x[0][1] + 0.5*x[3][1];
    coordinates[14][2] = 0.5*x[0][2] + 0.5*x[3][2];
    coordinates[15][0] = 0.25*x[0][0] + 0.75*x[3][0];
    coordinates[15][1] = 0.25*x[0][1] + 0.75*x[3][1];
    coordinates[15][2] = 0.25*x[0][2] + 0.75*x[3][2];
    coordinates[16][0] = 0.75*x[0][0] + 0.25*x[2][0];
    coordinates[16][1] = 0.75*x[0][1] + 0.25*x[2][1];
    coordinates[16][2] = 0.75*x[0][2] + 0.25*x[2][2];
    coordinates[17][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[17][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[17][2] = 0.5*x[0][2] + 0.5*x[2][2];
    coordinates[18][0] = 0.25*x[0][0] + 0.75*x[2][0];
    coordinates[18][1] = 0.25*x[0][1] + 0.75*x[2][1];
    coordinates[18][2] = 0.25*x[0][2] + 0.75*x[2][2];
    coordinates[19][0] = 0.75*x[0][0] + 0.25*x[1][0];
    coordinates[19][1] = 0.75*x[0][1] + 0.25*x[1][1];
    coordinates[19][2] = 0.75*x[0][2] + 0.25*x[1][2];
    coordinates[20][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[20][1] = 0.5*x[0][1] + 0.5*x[1][1];
    coordinates[20][2] = 0.5*x[0][2] + 0.5*x[1][2];
    coordinates[21][0] = 0.25*x[0][0] + 0.75*x[1][0];
    coordinates[21][1] = 0.25*x[0][1] + 0.75*x[1][1];
    coordinates[21][2] = 0.25*x[0][2] + 0.75*x[1][2];
    coordinates[22][0] = 0.5*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[22][1] = 0.5*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[22][2] = 0.5*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
    coordinates[23][0] = 0.25*x[1][0] + 0.5*x[2][0] + 0.25*x[3][0];
    coordinates[23][1] = 0.25*x[1][1] + 0.5*x[2][1] + 0.25*x[3][1];
    coordinates[23][2] = 0.25*x[1][2] + 0.5*x[2][2] + 0.25*x[3][2];
    coordinates[24][0] = 0.25*x[1][0] + 0.25*x[2][0] + 0.5*x[3][0];
    coordinates[24][1] = 0.25*x[1][1] + 0.25*x[2][1] + 0.5*x[3][1];
    coordinates[24][2] = 0.25*x[1][2] + 0.25*x[2][2] + 0.5*x[3][2];
    coordinates[25][0] = 0.5*x[0][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[25][1] = 0.5*x[0][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[25][2] = 0.5*x[0][2] + 0.25*x[2][2] + 0.25*x[3][2];
    coordinates[26][0] = 0.25*x[0][0] + 0.5*x[2][0] + 0.25*x[3][0];
    coordinates[26][1] = 0.25*x[0][1] + 0.5*x[2][1] + 0.25*x[3][1];
    coordinates[26][2] = 0.25*x[0][2] + 0.5*x[2][2] + 0.25*x[3][2];
    coordinates[27][0] = 0.25*x[0][0] + 0.25*x[2][0] + 0.5*x[3][0];
    coordinates[27][1] = 0.25*x[0][1] + 0.25*x[2][1] + 0.5*x[3][1];
    coordinates[27][2] = 0.25*x[0][2] + 0.25*x[2][2] + 0.5*x[3][2];
    coordinates[28][0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[3][0];
    coordinates[28][1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[3][1];
    coordinates[28][2] = 0.5*x[0][2] + 0.25*x[1][2] + 0.25*x[3][2];
    coordinates[29][0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[3][0];
    coordinates[29][1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[3][1];
    coordinates[29][2] = 0.25*x[0][2] + 0.5*x[1][2] + 0.25*x[3][2];
    coordinates[30][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[3][0];
    coordinates[30][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[3][1];
    coordinates[30][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.5*x[3][2];
    coordinates[31][0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0];
    coordinates[31][1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1];
    coordinates[31][2] = 0.5*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2];
    coordinates[32][0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[2][0];
    coordinates[32][1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[2][1];
    coordinates[32][2] = 0.25*x[0][2] + 0.5*x[1][2] + 0.25*x[2][2];
    coordinates[33][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[2][0];
    coordinates[33][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[2][1];
    coordinates[33][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.5*x[2][2];
    coordinates[34][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[34][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[34][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new UFC_Poisson3D_4BilinearForm_dof_map_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class UFC_Poisson3D_4BilinearForm_dof_map_1: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  UFC_Poisson3D_4BilinearForm_dof_map_1() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~UFC_Poisson3D_4BilinearForm_dof_map_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for FiniteElement('Lagrange', 'tetrahedron', 4)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return true;
      break;
    case 2:
      return true;
      break;
    case 3:
      return true;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = m.num_entities[0] + 3*m.num_entities[1] + 3*m.num_entities[2] + m.num_entities[3];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space
  virtual unsigned int local_dimension() const
  {
    return 35;
  }

  // Return the geometric dimension of the coordinates this dof map provides
  virtual unsigned int geometric_dimension() const
  {
    return 3;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 15;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    dofs[3] = c.entity_indices[0][3];
    unsigned int offset = m.num_entities[0];
    dofs[4] = offset + 3*c.entity_indices[1][0];
    dofs[5] = offset + 3*c.entity_indices[1][0] + 1;
    dofs[6] = offset + 3*c.entity_indices[1][0] + 2;
    dofs[7] = offset + 3*c.entity_indices[1][1];
    dofs[8] = offset + 3*c.entity_indices[1][1] + 1;
    dofs[9] = offset + 3*c.entity_indices[1][1] + 2;
    dofs[10] = offset + 3*c.entity_indices[1][2];
    dofs[11] = offset + 3*c.entity_indices[1][2] + 1;
    dofs[12] = offset + 3*c.entity_indices[1][2] + 2;
    dofs[13] = offset + 3*c.entity_indices[1][3];
    dofs[14] = offset + 3*c.entity_indices[1][3] + 1;
    dofs[15] = offset + 3*c.entity_indices[1][3] + 2;
    dofs[16] = offset + 3*c.entity_indices[1][4];
    dofs[17] = offset + 3*c.entity_indices[1][4] + 1;
    dofs[18] = offset + 3*c.entity_indices[1][4] + 2;
    dofs[19] = offset + 3*c.entity_indices[1][5];
    dofs[20] = offset + 3*c.entity_indices[1][5] + 1;
    dofs[21] = offset + 3*c.entity_indices[1][5] + 2;
    offset = offset + 3*m.num_entities[1];
    dofs[22] = offset + 3*c.entity_indices[2][0];
    dofs[23] = offset + 3*c.entity_indices[2][0] + 1;
    dofs[24] = offset + 3*c.entity_indices[2][0] + 2;
    dofs[25] = offset + 3*c.entity_indices[2][1];
    dofs[26] = offset + 3*c.entity_indices[2][1] + 1;
    dofs[27] = offset + 3*c.entity_indices[2][1] + 2;
    dofs[28] = offset + 3*c.entity_indices[2][2];
    dofs[29] = offset + 3*c.entity_indices[2][2] + 1;
    dofs[30] = offset + 3*c.entity_indices[2][2] + 2;
    dofs[31] = offset + 3*c.entity_indices[2][3];
    dofs[32] = offset + 3*c.entity_indices[2][3] + 1;
    dofs[33] = offset + 3*c.entity_indices[2][3] + 2;
    offset = offset + 3*m.num_entities[2];
    dofs[34] = offset + c.entity_indices[3][0];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 7;
      dofs[7] = 8;
      dofs[8] = 9;
      dofs[9] = 10;
      dofs[10] = 11;
      dofs[11] = 12;
      dofs[12] = 22;
      dofs[13] = 23;
      dofs[14] = 24;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 13;
      dofs[7] = 14;
      dofs[8] = 15;
      dofs[9] = 16;
      dofs[10] = 17;
      dofs[11] = 18;
      dofs[12] = 25;
      dofs[13] = 26;
      dofs[14] = 27;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 7;
      dofs[4] = 8;
      dofs[5] = 9;
      dofs[6] = 13;
      dofs[7] = 14;
      dofs[8] = 15;
      dofs[9] = 19;
      dofs[10] = 20;
      dofs[11] = 21;
      dofs[12] = 28;
      dofs[13] = 29;
      dofs[14] = 30;
      break;
    case 3:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 10;
      dofs[4] = 11;
      dofs[5] = 12;
      dofs[6] = 16;
      dofs[7] = 17;
      dofs[8] = 18;
      dofs[9] = 19;
      dofs[10] = 20;
      dofs[11] = 21;
      dofs[12] = 31;
      dofs[13] = 32;
      dofs[14] = 33;
      break;
    }
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[0][2] = x[0][2];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[1][2] = x[1][2];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[2][2] = x[2][2];
    coordinates[3][0] = x[3][0];
    coordinates[3][1] = x[3][1];
    coordinates[3][2] = x[3][2];
    coordinates[4][0] = 0.75*x[2][0] + 0.25*x[3][0];
    coordinates[4][1] = 0.75*x[2][1] + 0.25*x[3][1];
    coordinates[4][2] = 0.75*x[2][2] + 0.25*x[3][2];
    coordinates[5][0] = 0.5*x[2][0] + 0.5*x[3][0];
    coordinates[5][1] = 0.5*x[2][1] + 0.5*x[3][1];
    coordinates[5][2] = 0.5*x[2][2] + 0.5*x[3][2];
    coordinates[6][0] = 0.25*x[2][0] + 0.75*x[3][0];
    coordinates[6][1] = 0.25*x[2][1] + 0.75*x[3][1];
    coordinates[6][2] = 0.25*x[2][2] + 0.75*x[3][2];
    coordinates[7][0] = 0.75*x[1][0] + 0.25*x[3][0];
    coordinates[7][1] = 0.75*x[1][1] + 0.25*x[3][1];
    coordinates[7][2] = 0.75*x[1][2] + 0.25*x[3][2];
    coordinates[8][0] = 0.5*x[1][0] + 0.5*x[3][0];
    coordinates[8][1] = 0.5*x[1][1] + 0.5*x[3][1];
    coordinates[8][2] = 0.5*x[1][2] + 0.5*x[3][2];
    coordinates[9][0] = 0.25*x[1][0] + 0.75*x[3][0];
    coordinates[9][1] = 0.25*x[1][1] + 0.75*x[3][1];
    coordinates[9][2] = 0.25*x[1][2] + 0.75*x[3][2];
    coordinates[10][0] = 0.75*x[1][0] + 0.25*x[2][0];
    coordinates[10][1] = 0.75*x[1][1] + 0.25*x[2][1];
    coordinates[10][2] = 0.75*x[1][2] + 0.25*x[2][2];
    coordinates[11][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[11][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[11][2] = 0.5*x[1][2] + 0.5*x[2][2];
    coordinates[12][0] = 0.25*x[1][0] + 0.75*x[2][0];
    coordinates[12][1] = 0.25*x[1][1] + 0.75*x[2][1];
    coordinates[12][2] = 0.25*x[1][2] + 0.75*x[2][2];
    coordinates[13][0] = 0.75*x[0][0] + 0.25*x[3][0];
    coordinates[13][1] = 0.75*x[0][1] + 0.25*x[3][1];
    coordinates[13][2] = 0.75*x[0][2] + 0.25*x[3][2];
    coordinates[14][0] = 0.5*x[0][0] + 0.5*x[3][0];
    coordinates[14][1] = 0.5*x[0][1] + 0.5*x[3][1];
    coordinates[14][2] = 0.5*x[0][2] + 0.5*x[3][2];
    coordinates[15][0] = 0.25*x[0][0] + 0.75*x[3][0];
    coordinates[15][1] = 0.25*x[0][1] + 0.75*x[3][1];
    coordinates[15][2] = 0.25*x[0][2] + 0.75*x[3][2];
    coordinates[16][0] = 0.75*x[0][0] + 0.25*x[2][0];
    coordinates[16][1] = 0.75*x[0][1] + 0.25*x[2][1];
    coordinates[16][2] = 0.75*x[0][2] + 0.25*x[2][2];
    coordinates[17][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[17][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[17][2] = 0.5*x[0][2] + 0.5*x[2][2];
    coordinates[18][0] = 0.25*x[0][0] + 0.75*x[2][0];
    coordinates[18][1] = 0.25*x[0][1] + 0.75*x[2][1];
    coordinates[18][2] = 0.25*x[0][2] + 0.75*x[2][2];
    coordinates[19][0] = 0.75*x[0][0] + 0.25*x[1][0];
    coordinates[19][1] = 0.75*x[0][1] + 0.25*x[1][1];
    coordinates[19][2] = 0.75*x[0][2] + 0.25*x[1][2];
    coordinates[20][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[20][1] = 0.5*x[0][1] + 0.5*x[1][1];
    coordinates[20][2] = 0.5*x[0][2] + 0.5*x[1][2];
    coordinates[21][0] = 0.25*x[0][0] + 0.75*x[1][0];
    coordinates[21][1] = 0.25*x[0][1] + 0.75*x[1][1];
    coordinates[21][2] = 0.25*x[0][2] + 0.75*x[1][2];
    coordinates[22][0] = 0.5*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[22][1] = 0.5*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[22][2] = 0.5*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
    coordinates[23][0] = 0.25*x[1][0] + 0.5*x[2][0] + 0.25*x[3][0];
    coordinates[23][1] = 0.25*x[1][1] + 0.5*x[2][1] + 0.25*x[3][1];
    coordinates[23][2] = 0.25*x[1][2] + 0.5*x[2][2] + 0.25*x[3][2];
    coordinates[24][0] = 0.25*x[1][0] + 0.25*x[2][0] + 0.5*x[3][0];
    coordinates[24][1] = 0.25*x[1][1] + 0.25*x[2][1] + 0.5*x[3][1];
    coordinates[24][2] = 0.25*x[1][2] + 0.25*x[2][2] + 0.5*x[3][2];
    coordinates[25][0] = 0.5*x[0][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[25][1] = 0.5*x[0][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[25][2] = 0.5*x[0][2] + 0.25*x[2][2] + 0.25*x[3][2];
    coordinates[26][0] = 0.25*x[0][0] + 0.5*x[2][0] + 0.25*x[3][0];
    coordinates[26][1] = 0.25*x[0][1] + 0.5*x[2][1] + 0.25*x[3][1];
    coordinates[26][2] = 0.25*x[0][2] + 0.5*x[2][2] + 0.25*x[3][2];
    coordinates[27][0] = 0.25*x[0][0] + 0.25*x[2][0] + 0.5*x[3][0];
    coordinates[27][1] = 0.25*x[0][1] + 0.25*x[2][1] + 0.5*x[3][1];
    coordinates[27][2] = 0.25*x[0][2] + 0.25*x[2][2] + 0.5*x[3][2];
    coordinates[28][0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[3][0];
    coordinates[28][1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[3][1];
    coordinates[28][2] = 0.5*x[0][2] + 0.25*x[1][2] + 0.25*x[3][2];
    coordinates[29][0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[3][0];
    coordinates[29][1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[3][1];
    coordinates[29][2] = 0.25*x[0][2] + 0.5*x[1][2] + 0.25*x[3][2];
    coordinates[30][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[3][0];
    coordinates[30][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[3][1];
    coordinates[30][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.5*x[3][2];
    coordinates[31][0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0];
    coordinates[31][1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1];
    coordinates[31][2] = 0.5*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2];
    coordinates[32][0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[2][0];
    coordinates[32][1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[2][1];
    coordinates[32][2] = 0.25*x[0][2] + 0.5*x[1][2] + 0.25*x[2][2];
    coordinates[33][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[2][0];
    coordinates[33][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[2][1];
    coordinates[33][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.5*x[2][2];
    coordinates[34][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[34][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[34][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new UFC_Poisson3D_4BilinearForm_dof_map_1();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class UFC_Poisson3D_4BilinearForm_cell_integral_0: public ufc::cell_integral
{
public:

  /// Constructor
  UFC_Poisson3D_4BilinearForm_cell_integral_0() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson3D_4BilinearForm_cell_integral_0()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
      
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
      
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
      
    // Compute inverse of Jacobian
    const double Jinv_00 = d_00 / detJ;
    const double Jinv_01 = d_10 / detJ;
    const double Jinv_02 = d_20 / detJ;
    const double Jinv_10 = d_01 / detJ;
    const double Jinv_11 = d_11 / detJ;
    const double Jinv_12 = d_21 / detJ;
    const double Jinv_20 = d_02 / detJ;
    const double Jinv_21 = d_12 / detJ;
    const double Jinv_22 = d_22 / detJ;
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Number of operations to compute element tensor = 12677
    // Compute geometry tensors
    // Number of operations to compute decalrations = 54
    const double G0_0_0 = det*(Jinv_00*Jinv_00 + Jinv_01*Jinv_01 + Jinv_02*Jinv_02);
    const double G0_0_1 = det*(Jinv_00*Jinv_10 + Jinv_01*Jinv_11 + Jinv_02*Jinv_12);
    const double G0_0_2 = det*(Jinv_00*Jinv_20 + Jinv_01*Jinv_21 + Jinv_02*Jinv_22);
    const double G0_1_0 = det*(Jinv_10*Jinv_00 + Jinv_11*Jinv_01 + Jinv_12*Jinv_02);
    const double G0_1_1 = det*(Jinv_10*Jinv_10 + Jinv_11*Jinv_11 + Jinv_12*Jinv_12);
    const double G0_1_2 = det*(Jinv_10*Jinv_20 + Jinv_11*Jinv_21 + Jinv_12*Jinv_22);
    const double G0_2_0 = det*(Jinv_20*Jinv_00 + Jinv_21*Jinv_01 + Jinv_22*Jinv_02);
    const double G0_2_1 = det*(Jinv_20*Jinv_10 + Jinv_21*Jinv_11 + Jinv_22*Jinv_12);
    const double G0_2_2 = det*(Jinv_20*Jinv_20 + Jinv_21*Jinv_21 + Jinv_22*Jinv_22);
    
    // Compute element tensor
    // Number of operations to compute tensor = 12623
    A[0] = 0.0379188712522045*G0_0_0 + 0.0379188712522045*G0_0_1 + 0.0379188712522045*G0_0_2 + 0.0379188712522045*G0_1_0 + 0.0379188712522045*G0_1_1 + 0.0379188712522045*G0_1_2 + 0.0379188712522045*G0_2_0 + 0.0379188712522045*G0_2_1 + 0.0379188712522045*G0_2_2;
    A[1] = 0.00511463844797179*G0_0_0 + 0.00511463844797177*G0_1_0 + 0.00511463844797178*G0_2_0;
    A[2] = 0.00511463844797177*G0_0_1 + 0.00511463844797176*G0_1_1 + 0.00511463844797177*G0_2_1;
    A[3] = 0.00511463844797176*G0_0_2 + 0.00511463844797176*G0_1_2 + 0.00511463844797177*G0_2_2;
    A[4] = 0.00776014109347435*G0_0_1 + 0.00776014109347437*G0_0_2 + 0.00776014109347437*G0_1_1 + 0.00776014109347437*G0_1_2 + 0.00776014109347435*G0_2_1 + 0.00776014109347437*G0_2_2;
    A[5] = 0.00511463844797184*G0_0_1 + 0.00511463844797176*G0_0_2 + 0.00511463844797184*G0_1_1 + 0.00511463844797176*G0_1_2 + 0.00511463844797184*G0_2_1 + 0.00511463844797177*G0_2_2;
    A[6] = 0.00776014109347437*G0_0_1 + 0.00776014109347444*G0_0_2 + 0.00776014109347439*G0_1_1 + 0.00776014109347445*G0_1_2 + 0.00776014109347438*G0_2_1 + 0.00776014109347443*G0_2_2;
    A[7] = 0.00776014109347433*G0_0_0 + 0.00776014109347437*G0_0_2 + 0.00776014109347433*G0_1_0 + 0.00776014109347437*G0_1_2 + 0.00776014109347432*G0_2_0 + 0.00776014109347437*G0_2_2;
    A[8] = 0.00511463844797189*G0_0_0 + 0.00511463844797185*G0_0_2 + 0.00511463844797188*G0_1_0 + 0.00511463844797184*G0_1_2 + 0.0051146384479719*G0_2_0 + 0.00511463844797185*G0_2_2;
    A[9] = 0.00776014109347437*G0_0_0 + 0.00776014109347441*G0_0_2 + 0.00776014109347439*G0_1_0 + 0.00776014109347443*G0_1_2 + 0.00776014109347438*G0_2_0 + 0.00776014109347441*G0_2_2;
    A[10] = 0.0077601410934743*G0_0_0 + 0.00776014109347437*G0_0_1 + 0.0077601410934743*G0_1_0 + 0.00776014109347437*G0_1_1 + 0.0077601410934743*G0_2_0 + 0.00776014109347437*G0_2_1;
    A[11] = 0.00511463844797178*G0_0_0 + 0.0051146384479717*G0_0_1 + 0.0051146384479718*G0_1_0 + 0.00511463844797171*G0_1_1 + 0.00511463844797179*G0_2_0 + 0.0051146384479717*G0_2_1;
    A[12] = 0.00776014109347439*G0_0_0 + 0.00776014109347441*G0_0_1 + 0.0077601410934744*G0_1_0 + 0.00776014109347444*G0_1_1 + 0.00776014109347439*G0_2_0 + 0.00776014109347442*G0_2_1;
    A[13] = -0.0246913580246914*G0_0_0 - 0.0246913580246914*G0_0_1 - 0.0705467372134038*G0_0_2 - 0.0246913580246914*G0_1_0 - 0.0246913580246914*G0_1_1 - 0.0705467372134038*G0_1_2 - 0.0246913580246914*G0_2_0 - 0.0246913580246914*G0_2_1 - 0.0705467372134038*G0_2_2;
    A[14] = 0.0202821869488536*G0_0_0 + 0.0202821869488536*G0_0_1 + 0.0529100529100528*G0_0_2 + 0.0202821869488536*G0_1_0 + 0.0202821869488536*G0_1_1 + 0.0529100529100529*G0_1_2 + 0.0202821869488536*G0_2_0 + 0.0202821869488536*G0_2_1 + 0.0529100529100528*G0_2_2;
    A[15] = -0.00776014109347437*G0_0_0 - 0.00776014109347437*G0_0_1 - 0.0253968253968253*G0_0_2 - 0.00776014109347439*G0_1_0 - 0.00776014109347439*G0_1_1 - 0.0253968253968254*G0_1_2 - 0.00776014109347438*G0_2_0 - 0.00776014109347439*G0_2_1 - 0.0253968253968254*G0_2_2;
    A[16] = -0.0246913580246913*G0_0_0 - 0.0705467372134038*G0_0_1 - 0.0246913580246913*G0_0_2 - 0.0246913580246914*G0_1_0 - 0.0705467372134038*G0_1_1 - 0.0246913580246914*G0_1_2 - 0.0246913580246914*G0_2_0 - 0.0705467372134038*G0_2_1 - 0.0246913580246914*G0_2_2;
    A[17] = 0.0202821869488536*G0_0_0 + 0.0529100529100529*G0_0_1 + 0.0202821869488536*G0_0_2 + 0.0202821869488536*G0_1_0 + 0.0529100529100528*G0_1_1 + 0.0202821869488536*G0_1_2 + 0.0202821869488536*G0_2_0 + 0.0529100529100529*G0_2_1 + 0.0202821869488536*G0_2_2;
    A[18] = -0.0077601410934744*G0_0_0 - 0.0253968253968254*G0_0_1 - 0.0077601410934744*G0_0_2 - 0.0077601410934744*G0_1_0 - 0.0253968253968254*G0_1_1 - 0.00776014109347441*G0_1_2 - 0.0077601410934744*G0_2_0 - 0.0253968253968254*G0_2_1 - 0.0077601410934744*G0_2_2;
    A[19] = -0.0705467372134038*G0_0_0 - 0.0246913580246913*G0_0_1 - 0.0246913580246913*G0_0_2 - 0.0705467372134037*G0_1_0 - 0.0246913580246913*G0_1_1 - 0.0246913580246913*G0_1_2 - 0.0705467372134038*G0_2_0 - 0.0246913580246913*G0_2_1 - 0.0246913580246913*G0_2_2;
    A[20] = 0.0529100529100528*G0_0_0 + 0.0202821869488536*G0_0_1 + 0.0202821869488536*G0_0_2 + 0.0529100529100528*G0_1_0 + 0.0202821869488536*G0_1_1 + 0.0202821869488536*G0_1_2 + 0.0529100529100528*G0_2_0 + 0.0202821869488536*G0_2_1 + 0.0202821869488536*G0_2_2;
    A[21] = -0.0253968253968254*G0_0_0 - 0.00776014109347437*G0_0_1 - 0.00776014109347438*G0_0_2 - 0.0253968253968253*G0_1_0 - 0.00776014109347437*G0_1_1 - 0.00776014109347438*G0_1_2 - 0.0253968253968254*G0_2_0 - 0.00776014109347436*G0_2_1 - 0.00776014109347437*G0_2_2;
    A[22] = 0.0183421516754849*G0_0_0 + 0.0183421516754849*G0_0_1 + 0.0183421516754848*G0_0_2 + 0.0183421516754849*G0_1_0 + 0.0183421516754849*G0_1_1 + 0.0183421516754848*G0_1_2 + 0.0183421516754849*G0_2_0 + 0.0183421516754849*G0_2_1 + 0.0183421516754848*G0_2_2;
    A[23] = 0.0183421516754849*G0_0_0 + 0.0183421516754849*G0_0_1 + 0.0183421516754849*G0_0_2 + 0.0183421516754849*G0_1_0 + 0.0183421516754849*G0_1_1 + 0.018342151675485*G0_1_2 + 0.0183421516754849*G0_2_0 + 0.0183421516754849*G0_2_1 + 0.0183421516754849*G0_2_2;
    A[24] = 0.0183421516754851*G0_0_0 + 0.0183421516754851*G0_0_1 + 0.0183421516754851*G0_0_2 + 0.0183421516754851*G0_1_0 + 0.0183421516754851*G0_1_1 + 0.0183421516754851*G0_1_2 + 0.0183421516754851*G0_2_0 + 0.0183421516754851*G0_2_1 + 0.0183421516754851*G0_2_2;
    A[25] = 0.0493827160493827*G0_0_0 + 0.0423280423280423*G0_0_1 + 0.0423280423280423*G0_0_2 + 0.0493827160493826*G0_1_0 + 0.0423280423280424*G0_1_1 + 0.0423280423280424*G0_1_2 + 0.0493827160493826*G0_2_0 + 0.0423280423280424*G0_2_1 + 0.0423280423280424*G0_2_2;
    A[26] = -0.0183421516754849*G0_0_0 - 0.0253968253968253*G0_0_1 - 0.0253968253968254*G0_0_2 - 0.0183421516754849*G0_1_0 - 0.0253968253968254*G0_1_1 - 0.0253968253968254*G0_1_2 - 0.0183421516754849*G0_2_0 - 0.0253968253968253*G0_2_1 - 0.0253968253968254*G0_2_2;
    A[27] = -0.0183421516754851*G0_0_0 - 0.0253968253968254*G0_0_1 - 0.0253968253968254*G0_0_2 - 0.0183421516754851*G0_1_0 - 0.0253968253968254*G0_1_1 - 0.0253968253968254*G0_1_2 - 0.0183421516754851*G0_2_0 - 0.0253968253968254*G0_2_1 - 0.0253968253968254*G0_2_2;
    A[28] = 0.0423280423280423*G0_0_0 + 0.0493827160493826*G0_0_1 + 0.0423280423280422*G0_0_2 + 0.0423280423280423*G0_1_0 + 0.0493827160493826*G0_1_1 + 0.0423280423280422*G0_1_2 + 0.0423280423280423*G0_2_0 + 0.0493827160493826*G0_2_1 + 0.0423280423280422*G0_2_2;
    A[29] = -0.0253968253968253*G0_0_0 - 0.0183421516754849*G0_0_1 - 0.0253968253968254*G0_0_2 - 0.0253968253968253*G0_1_0 - 0.0183421516754849*G0_1_1 - 0.0253968253968254*G0_1_2 - 0.0253968253968253*G0_2_0 - 0.0183421516754849*G0_2_1 - 0.0253968253968254*G0_2_2;
    A[30] = -0.0253968253968254*G0_0_0 - 0.0183421516754851*G0_0_1 - 0.0253968253968254*G0_0_2 - 0.0253968253968255*G0_1_0 - 0.0183421516754851*G0_1_1 - 0.0253968253968254*G0_1_2 - 0.0253968253968255*G0_2_0 - 0.0183421516754851*G0_2_1 - 0.0253968253968253*G0_2_2;
    A[31] = 0.0423280423280422*G0_0_0 + 0.0423280423280422*G0_0_1 + 0.0493827160493827*G0_0_2 + 0.0423280423280423*G0_1_0 + 0.0423280423280423*G0_1_1 + 0.0493827160493826*G0_1_2 + 0.0423280423280423*G0_2_0 + 0.0423280423280423*G0_2_1 + 0.0493827160493826*G0_2_2;
    A[32] = -0.0253968253968252*G0_0_0 - 0.0253968253968253*G0_0_1 - 0.0183421516754848*G0_0_2 - 0.0253968253968253*G0_1_0 - 0.0253968253968253*G0_1_1 - 0.0183421516754848*G0_1_2 - 0.0253968253968253*G0_2_0 - 0.0253968253968253*G0_2_1 - 0.0183421516754848*G0_2_2;
    A[33] = -0.0253968253968254*G0_0_0 - 0.0253968253968253*G0_0_1 - 0.0183421516754849*G0_0_2 - 0.0253968253968254*G0_1_0 - 0.0253968253968254*G0_1_1 - 0.018342151675485*G0_1_2 - 0.0253968253968254*G0_2_0 - 0.0253968253968254*G0_2_1 - 0.0183421516754849*G0_2_2;
    A[34] = -0.0677248677248676*G0_0_0 - 0.0677248677248675*G0_0_1 - 0.0677248677248677*G0_0_2 - 0.0677248677248675*G0_1_0 - 0.0677248677248675*G0_1_1 - 0.0677248677248677*G0_1_2 - 0.0677248677248675*G0_2_0 - 0.0677248677248675*G0_2_1 - 0.0677248677248678*G0_2_2;
    A[35] = 0.00511463844797179*G0_0_0 + 0.00511463844797177*G0_0_1 + 0.00511463844797178*G0_0_2;
    A[36] = 0.0379188712522045*G0_0_0;
    A[37] = -0.00511463844797177*G0_0_1;
    A[38] = -0.00511463844797178*G0_0_2;
    A[39] = -0.00776014109347435*G0_0_1 - 0.00776014109347434*G0_0_2;
    A[40] = -0.00511463844797179*G0_0_1 - 0.00511463844797181*G0_0_2;
    A[41] = -0.00776014109347437*G0_0_1 - 0.00776014109347435*G0_0_2;
    A[42] = -0.0246913580246912*G0_0_0 + 0.0458553791887125*G0_0_2;
    A[43] = 0.0202821869488536*G0_0_0 - 0.0326278659611993*G0_0_2;
    A[44] = -0.00776014109347435*G0_0_0 + 0.017636684303351*G0_0_2;
    A[45] = -0.0246913580246912*G0_0_0 + 0.0458553791887125*G0_0_1;
    A[46] = 0.0202821869488535*G0_0_0 - 0.0326278659611993*G0_0_1;
    A[47] = -0.00776014109347435*G0_0_0 + 0.017636684303351*G0_0_1;
    A[48] = 0.00776014109347436*G0_0_0 + 0.00776014109347438*G0_0_1;
    A[49] = 0.0051146384479718*G0_0_0 + 0.00511463844797177*G0_0_1;
    A[50] = 0.00776014109347437*G0_0_0 + 0.00776014109347437*G0_0_1;
    A[51] = 0.00776014109347436*G0_0_0 + 0.00776014109347436*G0_0_2;
    A[52] = 0.00511463844797176*G0_0_0 + 0.00511463844797178*G0_0_2;
    A[53] = 0.00776014109347437*G0_0_0 + 0.00776014109347435*G0_0_2;
    A[54] = -0.0253968253968253*G0_0_0 - 0.017636684303351*G0_0_1 - 0.017636684303351*G0_0_2;
    A[55] = 0.0529100529100528*G0_0_0 + 0.0326278659611993*G0_0_1 + 0.0326278659611993*G0_0_2;
    A[56] = -0.0705467372134038*G0_0_0 - 0.0458553791887125*G0_0_1 - 0.0458553791887125*G0_0_2;
    A[57] = 0.0493827160493825*G0_0_0 + 0.00705467372134032*G0_0_1 + 0.0070546737213403*G0_0_2;
    A[58] = -0.0183421516754849*G0_0_0 + 0.00705467372134036*G0_0_1 + 0.00705467372134039*G0_0_2;
    A[59] = -0.0183421516754849*G0_0_0 + 0.00705467372134042*G0_0_1 + 0.00705467372134036*G0_0_2;
    A[60] = 0.0183421516754849*G0_0_0;
    A[61] = 0.0183421516754849*G0_0_0;
    A[62] = 0.0183421516754849*G0_0_0;
    A[63] = -0.0253968253968253*G0_0_0 - 0.00705467372134033*G0_0_1;
    A[64] = 0.0423280423280422*G0_0_0 - 0.00705467372134039*G0_0_1;
    A[65] = -0.0253968253968253*G0_0_0 - 0.0070546737213404*G0_0_1;
    A[66] = -0.0253968253968252*G0_0_0 - 0.0070546737213403*G0_0_2;
    A[67] = 0.0423280423280421*G0_0_0 - 0.00705467372134034*G0_0_2;
    A[68] = -0.0253968253968253*G0_0_0 - 0.00705467372134038*G0_0_2;
    A[69] = -0.0677248677248673*G0_0_0;
    A[70] = 0.00511463844797177*G0_1_0 + 0.00511463844797176*G0_1_1 + 0.00511463844797177*G0_1_2;
    A[71] = -0.00511463844797177*G0_1_0;
    A[72] = 0.0379188712522046*G0_1_1;
    A[73] = -0.0051146384479718*G0_1_2;
    A[74] = -0.0246913580246914*G0_1_1 + 0.0458553791887124*G0_1_2;
    A[75] = 0.0202821869488537*G0_1_1 - 0.0326278659611993*G0_1_2;
    A[76] = -0.00776014109347447*G0_1_1 + 0.017636684303351*G0_1_2;
    A[77] = -0.00776014109347445*G0_1_0 - 0.00776014109347446*G0_1_2;
    A[78] = -0.00511463844797178*G0_1_0 - 0.00511463844797172*G0_1_2;
    A[79] = -0.00776014109347448*G0_1_0 - 0.00776014109347447*G0_1_2;
    A[80] = 0.0176366843033509*G0_1_0 - 0.00776014109347445*G0_1_1;
    A[81] = -0.0326278659611991*G0_1_0 + 0.0202821869488536*G0_1_1;
    A[82] = 0.0458553791887124*G0_1_0 - 0.0246913580246913*G0_1_1;
    A[83] = 0.00776014109347442*G0_1_0 + 0.00776014109347443*G0_1_1;
    A[84] = 0.00511463844797175*G0_1_0 + 0.00511463844797176*G0_1_1;
    A[85] = 0.00776014109347448*G0_1_0 + 0.00776014109347449*G0_1_1;
    A[86] = -0.0176366843033509*G0_1_0 - 0.0253968253968253*G0_1_1 - 0.0176366843033509*G0_1_2;
    A[87] = 0.0326278659611993*G0_1_0 + 0.0529100529100528*G0_1_1 + 0.0326278659611993*G0_1_2;
    A[88] = -0.0458553791887124*G0_1_0 - 0.0705467372134037*G0_1_1 - 0.0458553791887124*G0_1_2;
    A[89] = 0.00776014109347444*G0_1_1 + 0.00776014109347442*G0_1_2;
    A[90] = 0.00511463844797178*G0_1_1 + 0.00511463844797179*G0_1_2;
    A[91] = 0.00776014109347449*G0_1_1 + 0.00776014109347448*G0_1_2;
    A[92] = 0.00705467372134055*G0_1_0 - 0.018342151675485*G0_1_1 + 0.00705467372134044*G0_1_2;
    A[93] = 0.00705467372134026*G0_1_0 + 0.0493827160493828*G0_1_1 + 0.00705467372134044*G0_1_2;
    A[94] = 0.00705467372134038*G0_1_0 - 0.018342151675485*G0_1_1 + 0.00705467372134035*G0_1_2;
    A[95] = -0.00705467372134027*G0_1_0 - 0.0253968253968253*G0_1_1;
    A[96] = -0.00705467372134026*G0_1_0 + 0.0423280423280424*G0_1_1;
    A[97] = -0.00705467372134038*G0_1_0 - 0.0253968253968254*G0_1_1;
    A[98] = 0.0183421516754851*G0_1_1;
    A[99] = 0.018342151675485*G0_1_1;
    A[100] = 0.018342151675485*G0_1_1;
    A[101] = -0.0253968253968253*G0_1_1 - 0.00705467372134027*G0_1_2;
    A[102] = -0.0253968253968255*G0_1_1 - 0.00705467372134044*G0_1_2;
    A[103] = 0.0423280423280423*G0_1_1 - 0.00705467372134043*G0_1_2;
    A[104] = -0.0677248677248679*G0_1_1;
    A[105] = 0.00511463844797176*G0_2_0 + 0.00511463844797176*G0_2_1 + 0.00511463844797177*G0_2_2;
    A[106] = -0.00511463844797178*G0_2_0;
    A[107] = -0.0051146384479718*G0_2_1;
    A[108] = 0.0379188712522046*G0_2_2;
    A[109] = 0.0176366843033511*G0_2_1 - 0.00776014109347443*G0_2_2;
    A[110] = -0.0326278659611993*G0_2_1 + 0.0202821869488537*G0_2_2;
    A[111] = 0.0458553791887125*G0_2_1 - 0.0246913580246914*G0_2_2;
    A[112] = 0.0176366843033509*G0_2_0 - 0.00776014109347444*G0_2_2;
    A[113] = -0.0326278659611992*G0_2_0 + 0.0202821869488536*G0_2_2;
    A[114] = 0.0458553791887125*G0_2_0 - 0.0246913580246914*G0_2_2;
    A[115] = -0.00776014109347441*G0_2_0 - 0.00776014109347442*G0_2_1;
    A[116] = -0.00511463844797178*G0_2_0 - 0.00511463844797176*G0_2_1;
    A[117] = -0.00776014109347441*G0_2_0 - 0.00776014109347438*G0_2_1;
    A[118] = -0.017636684303351*G0_2_0 - 0.017636684303351*G0_2_1 - 0.0253968253968253*G0_2_2;
    A[119] = 0.0326278659611992*G0_2_0 + 0.0326278659611992*G0_2_1 + 0.0529100529100528*G0_2_2;
    A[120] = -0.0458553791887125*G0_2_0 - 0.0458553791887125*G0_2_1 - 0.0705467372134038*G0_2_2;
    A[121] = 0.0077601410934744*G0_2_0 + 0.00776014109347441*G0_2_2;
    A[122] = 0.00511463844797178*G0_2_0 + 0.00511463844797178*G0_2_2;
    A[123] = 0.00776014109347441*G0_2_0 + 0.0077601410934744*G0_2_2;
    A[124] = 0.00776014109347441*G0_2_1 + 0.00776014109347441*G0_2_2;
    A[125] = 0.00511463844797177*G0_2_1 + 0.00511463844797176*G0_2_2;
    A[126] = 0.00776014109347441*G0_2_1 + 0.00776014109347441*G0_2_2;
    A[127] = 0.00705467372134035*G0_2_0 + 0.00705467372134035*G0_2_1 - 0.018342151675485*G0_2_2;
    A[128] = 0.00705467372134047*G0_2_0 + 0.00705467372134036*G0_2_1 - 0.0183421516754849*G0_2_2;
    A[129] = 0.00705467372134031*G0_2_0 + 0.00705467372134038*G0_2_1 + 0.0493827160493827*G0_2_2;
    A[130] = -0.00705467372134038*G0_2_0 - 0.0253968253968254*G0_2_2;
    A[131] = -0.00705467372134048*G0_2_0 - 0.0253968253968254*G0_2_2;
    A[132] = -0.00705467372134032*G0_2_0 + 0.0423280423280424*G0_2_2;
    A[133] = -0.00705467372134043*G0_2_1 - 0.0253968253968254*G0_2_2;
    A[134] = -0.00705467372134034*G0_2_1 - 0.0253968253968253*G0_2_2;
    A[135] = -0.0070546737213404*G0_2_1 + 0.0423280423280423*G0_2_2;
    A[136] = 0.018342151675485*G0_2_2;
    A[137] = 0.018342151675485*G0_2_2;
    A[138] = 0.0183421516754849*G0_2_2;
    A[139] = -0.0677248677248677*G0_2_2;
    A[140] = 0.00776014109347435*G0_1_0 + 0.00776014109347437*G0_1_1 + 0.00776014109347435*G0_1_2 + 0.00776014109347436*G0_2_0 + 0.00776014109347437*G0_2_1 + 0.00776014109347437*G0_2_2;
    A[141] = -0.00776014109347434*G0_1_0 - 0.00776014109347434*G0_2_0;
    A[142] = -0.0246913580246914*G0_1_1 + 0.0458553791887124*G0_2_1;
    A[143] = 0.0176366843033511*G0_1_2 - 0.00776014109347443*G0_2_2;
    A[144] = 0.203174603174603*G0_1_1 + 0.0790123456790123*G0_1_2 + 0.0790123456790123*G0_2_1 + 0.158024691358025*G0_2_2;
    A[145] = -0.118518518518519*G0_1_1 + 0.0423280423280424*G0_1_2 - 0.0310405643738977*G0_2_1 - 0.090299823633157*G0_2_2;
    A[146] = 0.0451499118165786*G0_1_1 - 0.033862433862434*G0_1_2 + 0.0112874779541446*G0_2_1 + 0.0451499118165784*G0_2_2;
    A[147] = 0.0225749559082892*G0_1_0 + 0.0112874779541448*G0_1_2 + 0.0112874779541446*G0_2_0 + 0.0112874779541447*G0_2_2;
    A[148] = 0.0169312169312168*G0_1_0 + 0.0141093474426806*G0_1_2 + 0.00282186948853605*G0_2_0 + 0.00282186948853609*G0_2_2;
    A[149] = 0.0451499118165786*G0_1_0 + 0.0338624338624339*G0_1_2 + 0.0112874779541446*G0_2_0 + 0.0112874779541446*G0_2_2;
    A[150] = 0.0338624338624337*G0_1_0 + 0.0112874779541447*G0_1_1 + 0.0451499118165782*G0_2_0 + 0.0112874779541447*G0_2_1;
    A[151] = -0.0592592592592593*G0_1_0 - 0.0423280423280426*G0_1_1 - 0.0902998236331568*G0_2_0 - 0.031040564373898*G0_2_1;
    A[152] = 0.0790123456790124*G0_1_0 + 0.101587301587302*G0_1_1 + 0.158024691358025*G0_2_0 + 0.0790123456790125*G0_2_1;
    A[153] = -0.0225749559082892*G0_1_0 - 0.0225749559082892*G0_1_1 - 0.0112874779541445*G0_1_2 - 0.0112874779541446*G0_2_0 - 0.0112874779541446*G0_2_1;
    A[154] = -0.016931216931217*G0_1_0 - 0.0169312169312169*G0_1_1 - 0.00282186948853615*G0_1_2 - 0.00282186948853626*G0_2_0 - 0.00282186948853626*G0_2_1;
    A[155] = -0.0451499118165785*G0_1_0 - 0.0451499118165786*G0_1_1 - 0.0112874779541448*G0_1_2 - 0.0112874779541446*G0_2_0 - 0.0112874779541446*G0_2_1;
    A[156] = -0.0338624338624337*G0_1_0 - 0.022574955908289*G0_1_1 - 0.0338624338624337*G0_1_2 - 0.0451499118165783*G0_2_0 - 0.0338624338624336*G0_2_1 - 0.0451499118165783*G0_2_2;
    A[157] = 0.0592592592592593*G0_1_0 + 0.0169312169312168*G0_1_1 + 0.0592592592592593*G0_1_2 + 0.0902998236331569*G0_2_0 + 0.0592592592592589*G0_2_1 + 0.0902998236331569*G0_2_2;
    A[158] = -0.0790123456790124*G0_1_0 + 0.0225749559082892*G0_1_1 - 0.0790123456790124*G0_1_2 - 0.158024691358025*G0_2_0 - 0.0790123456790121*G0_2_1 - 0.158024691358025*G0_2_2;
    A[159] = -0.0112874779541446*G0_1_1 - 0.0112874779541446*G0_1_2 - 0.0112874779541446*G0_2_1 - 0.0112874779541446*G0_2_2;
    A[160] = -0.00282186948853622*G0_1_1 - 0.0028218694885362*G0_1_2 - 0.00282186948853619*G0_2_1 - 0.00282186948853616*G0_2_2;
    A[161] = -0.0112874779541448*G0_1_1 - 0.0112874779541447*G0_1_2 - 0.0112874779541447*G0_2_1 - 0.0112874779541447*G0_2_2;
    A[162] = -0.0677248677248676*G0_1_0 + 0.0225749559082892*G0_1_1 - 0.033862433862434*G0_1_2 - 0.0225749559082891*G0_2_0 + 0.0112874779541446*G0_2_1 - 0.0225749559082893*G0_2_2;
    A[163] = 0.203174603174604*G0_1_0 - 0.0677248677248673*G0_1_1 + 0.101587301587302*G0_1_2 + 0.112874779541446*G0_2_0 + 0.0112874779541449*G0_2_1 + 0.112874779541446*G0_2_2;
    A[164] = -0.0677248677248678*G0_1_0 + 0.0677248677248676*G0_1_1 - 0.0338624338624337*G0_1_2 - 0.0225749559082893*G0_2_0 + 0.0112874779541444*G0_2_1 - 0.0225749559082893*G0_2_2;
    A[165] = 0.0677248677248672*G0_1_0 + 0.0902998236331565*G0_1_1 + 0.0338624338624335*G0_1_2 + 0.0225749559082891*G0_2_0 + 0.0338624338624337*G0_2_1;
    A[166] = -0.203174603174603*G0_1_0 - 0.270899470899471*G0_1_1 - 0.101587301587302*G0_1_2 - 0.112874779541446*G0_2_0 - 0.101587301587302*G0_2_1;
    A[167] = 0.0677248677248677*G0_1_0 + 0.135449735449735*G0_1_1 + 0.0338624338624343*G0_1_2 + 0.0225749559082893*G0_2_0 + 0.0338624338624339*G0_2_1;
    A[168] = -0.0225749559082897*G0_1_1 - 0.0112874779541448*G0_1_2 - 0.0112874779541449*G0_2_1;
    A[169] = -0.0225749559082892*G0_1_1 - 0.0112874779541445*G0_1_2 - 0.0112874779541447*G0_2_1;
    A[170] = -0.0677248677248677*G0_1_1 - 0.0112874779541444*G0_1_2 - 0.0112874779541444*G0_2_1;
    A[171] = 0.0451499118165782*G0_1_1 + 0.0338624338624333*G0_1_2 + 0.0338624338624336*G0_2_1 + 0.022574955908289*G0_2_2;
    A[172] = 0.0451499118165788*G0_1_1 + 0.0338624338624339*G0_1_2 + 0.0338624338624341*G0_2_1 + 0.0225749559082892*G0_2_2;
    A[173] = -0.135449735449735*G0_1_1 - 0.101587301587302*G0_1_2 - 0.101587301587302*G0_2_1 - 0.112874779541446*G0_2_2;
    A[174] = 0.0902998236331573*G0_1_1;
    A[175] = 0.00511463844797184*G0_1_0 + 0.00511463844797184*G0_1_1 + 0.00511463844797184*G0_1_2 + 0.00511463844797176*G0_2_0 + 0.00511463844797176*G0_2_1 + 0.00511463844797177*G0_2_2;
    A[176] = -0.00511463844797179*G0_1_0 - 0.00511463844797181*G0_2_0;
    A[177] = 0.0202821869488537*G0_1_1 - 0.0326278659611993*G0_2_1;
    A[178] = -0.0326278659611994*G0_1_2 + 0.0202821869488537*G0_2_2;
    A[179] = -0.118518518518519*G0_1_1 - 0.0310405643738977*G0_1_2 + 0.0423280423280424*G0_2_1 - 0.090299823633157*G0_2_2;
    A[180] = 0.24973544973545*G0_1_1 + 0.0825396825396823*G0_1_2 + 0.0825396825396823*G0_2_1 + 0.24973544973545*G0_2_2;
    A[181] = -0.090299823633157*G0_1_1 + 0.0423280423280424*G0_1_2 - 0.0310405643738975*G0_2_1 - 0.118518518518519*G0_2_2;
    A[182] = 0.0169312169312167*G0_1_0 + 0.00282186948853597*G0_1_2 + 0.0141093474426805*G0_2_0 + 0.00282186948853595*G0_2_2;
    A[183] = -0.0211640211640208*G0_1_0 - 0.0105820105820104*G0_1_2 - 0.0105820105820102*G0_2_0 - 0.0134038800705465*G0_2_2;
    A[184] = -0.090299823633157*G0_1_0 - 0.0592592592592592*G0_1_2 - 0.0310405643738975*G0_2_0 - 0.0423280423280422*G0_2_2;
    A[185] = 0.0141093474426806*G0_1_0 + 0.00282186948853597*G0_1_1 + 0.0169312169312168*G0_2_0 + 0.00282186948853597*G0_2_1;
    A[186] = -0.0105820105820105*G0_1_0 - 0.0134038800705466*G0_1_1 - 0.0211640211640212*G0_2_0 - 0.0105820105820106*G0_2_1;
    A[187] = -0.0310405643738977*G0_1_0 - 0.0423280423280423*G0_1_1 - 0.090299823633157*G0_2_0 - 0.0592592592592592*G0_2_1;
    A[188] = -0.0169312169312169*G0_1_0 - 0.0169312169312169*G0_1_1 - 0.0141093474426809*G0_1_2 - 0.0141093474426808*G0_2_0 - 0.0141093474426808*G0_2_1 - 0.0112874779541446*G0_2_2;
    A[189] = 0.0211640211640212*G0_1_0 + 0.0211640211640213*G0_1_1 + 0.0105820105820107*G0_1_2 + 0.0105820105820107*G0_2_0 + 0.0105820105820108*G0_2_1 - 0.00282186948853619*G0_2_2;
    A[190] = 0.090299823633157*G0_1_0 + 0.090299823633157*G0_1_1 + 0.0310405643738977*G0_1_2 + 0.0310405643738976*G0_2_0 + 0.0310405643738975*G0_2_1 - 0.0112874779541448*G0_2_2;
    A[191] = -0.0141093474426808*G0_1_0 - 0.0112874779541447*G0_1_1 - 0.0141093474426808*G0_1_2 - 0.0169312169312169*G0_2_0 - 0.0141093474426807*G0_2_1 - 0.0169312169312169*G0_2_2;
    A[192] = 0.0105820105820105*G0_1_0 - 0.00282186948853623*G0_1_1 + 0.0105820105820105*G0_1_2 + 0.0211640211640211*G0_2_0 + 0.0105820105820105*G0_2_1 + 0.021164021164021*G0_2_2;
    A[193] = 0.0310405643738977*G0_1_0 - 0.0112874779541446*G0_1_1 + 0.0310405643738977*G0_1_2 + 0.0902998236331569*G0_2_0 + 0.0310405643738978*G0_2_1 + 0.0902998236331569*G0_2_2;
    A[194] = -0.00282186948853607*G0_1_1 - 0.0028218694885361*G0_1_2 - 0.00282186948853611*G0_2_1 - 0.0028218694885361*G0_2_2;
    A[195] = -0.0091710758377426*G0_1_1 - 0.0091710758377426*G0_1_2 - 0.00917107583774263*G0_2_1 - 0.00917107583774263*G0_2_2;
    A[196] = -0.00282186948853592*G0_1_1 - 0.00282186948853597*G0_1_2 - 0.00282186948853597*G0_2_1 - 0.002821869488536*G0_2_2;
    A[197] = -0.0846560846560843*G0_1_0 - 0.0169312169312168*G0_1_1 - 0.0197530864197531*G0_1_2 - 0.0846560846560845*G0_2_0 - 0.019753086419753*G0_2_1 - 0.0169312169312172*G0_2_2;
    A[198] = 0.0507936507936505*G0_1_0 + 0.118518518518518*G0_1_1 - 0.0423280423280423*G0_1_2 + 0.186243386243386*G0_2_0 + 0.0931216931216929*G0_2_1 - 0.0846560846560846*G0_2_2;
    A[199] = 0.186243386243386*G0_1_0 - 0.0846560846560844*G0_1_1 + 0.0931216931216931*G0_1_2 + 0.0507936507936506*G0_2_0 - 0.0423280423280419*G0_2_1 + 0.118518518518519*G0_2_2;
    A[200] = 0.0846560846560852*G0_1_0 + 0.0677248677248679*G0_1_1 + 0.0649029982363318*G0_1_2 + 0.0846560846560848*G0_2_0 + 0.0649029982363315*G0_2_1 + 0.0677248677248677*G0_2_2;
    A[201] = -0.0507936507936505*G0_1_0 + 0.0677248677248675*G0_1_1 - 0.0931216931216928*G0_1_2 - 0.186243386243386*G0_2_0 - 0.0931216931216932*G0_2_1 - 0.270899470899471*G0_2_2;
    A[202] = -0.186243386243386*G0_1_0 - 0.270899470899471*G0_1_1 - 0.0931216931216934*G0_1_2 - 0.0507936507936506*G0_2_0 - 0.093121693121693*G0_2_1 + 0.0677248677248677*G0_2_2;
    A[203] = 0.0169312169312174*G0_1_1 + 0.0197530864197532*G0_1_2 + 0.0197530864197534*G0_2_1 + 0.0225749559082894*G0_2_2;
    A[204] = 0.0169312169312168*G0_1_1 + 0.0197530864197529*G0_1_2 + 0.0197530864197531*G0_2_1 + 0.0225749559082891*G0_2_2;
    A[205] = 0.0846560846560844*G0_1_1 + 0.0423280423280421*G0_1_2 + 0.0423280423280418*G0_2_1 + 0.0225749559082889*G0_2_2;
    A[206] = 0.0225749559082894*G0_1_1 + 0.0197530864197536*G0_1_2 + 0.0197530864197532*G0_2_1 + 0.0169312169312172*G0_2_2;
    A[207] = 0.0225749559082892*G0_1_1 + 0.0197530864197532*G0_1_2 + 0.0197530864197532*G0_2_1 + 0.0169312169312173*G0_2_2;
    A[208] = 0.022574955908289*G0_1_1 + 0.0423280423280422*G0_1_2 + 0.0423280423280421*G0_2_1 + 0.0846560846560845*G0_2_2;
    A[209] = -0.135449735449736*G0_1_1 - 0.112874779541447*G0_1_2 - 0.112874779541446*G0_2_1 - 0.135449735449736*G0_2_2;
    A[210] = 0.00776014109347437*G0_1_0 + 0.00776014109347439*G0_1_1 + 0.00776014109347438*G0_1_2 + 0.00776014109347444*G0_2_0 + 0.00776014109347445*G0_2_1 + 0.00776014109347443*G0_2_2;
    A[211] = -0.00776014109347437*G0_1_0 - 0.00776014109347436*G0_2_0;
    A[212] = -0.00776014109347447*G0_1_1 + 0.017636684303351*G0_2_1;
    A[213] = 0.0458553791887125*G0_1_2 - 0.0246913580246914*G0_2_2;
    A[214] = 0.0451499118165785*G0_1_1 + 0.0112874779541446*G0_1_2 - 0.033862433862434*G0_2_1 + 0.0451499118165784*G0_2_2;
    A[215] = -0.090299823633157*G0_1_1 - 0.0310405643738975*G0_1_2 + 0.0423280423280424*G0_2_1 - 0.118518518518519*G0_2_2;
    A[216] = 0.158024691358024*G0_1_1 + 0.0790123456790122*G0_1_2 + 0.0790123456790122*G0_2_1 + 0.203174603174603*G0_2_2;
    A[217] = 0.0451499118165784*G0_1_0 + 0.0112874779541447*G0_1_2 + 0.0338624338624339*G0_2_0 + 0.0112874779541447*G0_2_2;
    A[218] = -0.0902998236331568*G0_1_0 - 0.0310405643738977*G0_1_2 - 0.0592592592592593*G0_2_0 - 0.0423280423280424*G0_2_2;
    A[219] = 0.158024691358024*G0_1_0 + 0.0790123456790122*G0_1_2 + 0.0790123456790122*G0_2_0 + 0.101587301587302*G0_2_2;
    A[220] = 0.0112874779541446*G0_1_0 + 0.0112874779541447*G0_1_1 + 0.0225749559082892*G0_2_0 + 0.0112874779541447*G0_2_1;
    A[221] = 0.00282186948853621*G0_1_0 + 0.0028218694885361*G0_1_1 + 0.0169312169312171*G0_2_0 + 0.0141093474426808*G0_2_1;
    A[222] = 0.0112874779541446*G0_1_0 + 0.0112874779541447*G0_1_1 + 0.0451499118165784*G0_2_0 + 0.0338624338624338*G0_2_1;
    A[223] = -0.0451499118165785*G0_1_0 - 0.0451499118165785*G0_1_1 - 0.0338624338624338*G0_1_2 - 0.0338624338624339*G0_2_0 - 0.0338624338624339*G0_2_1 - 0.0225749559082893*G0_2_2;
    A[224] = 0.0902998236331567*G0_1_0 + 0.0902998236331567*G0_1_1 + 0.059259259259259*G0_1_2 + 0.0592592592592593*G0_2_0 + 0.0592592592592592*G0_2_1 + 0.0169312169312169*G0_2_2;
    A[225] = -0.158024691358024*G0_1_0 - 0.158024691358024*G0_1_1 - 0.0790123456790122*G0_1_2 - 0.0790123456790123*G0_2_0 - 0.0790123456790122*G0_2_1 + 0.0225749559082894*G0_2_2;
    A[226] = -0.0112874779541447*G0_1_0 - 0.0112874779541447*G0_1_2 - 0.0225749559082893*G0_2_0 - 0.0112874779541447*G0_2_1 - 0.0225749559082893*G0_2_2;
    A[227] = -0.00282186948853613*G0_1_0 - 0.0028218694885361*G0_1_2 - 0.0169312169312169*G0_2_0 - 0.00282186948853613*G0_2_1 - 0.0169312169312169*G0_2_2;
    A[228] = -0.0112874779541446*G0_1_0 - 0.0112874779541446*G0_1_2 - 0.0451499118165783*G0_2_0 - 0.0112874779541446*G0_2_1 - 0.0451499118165783*G0_2_2;
    A[229] = -0.0112874779541447*G0_1_1 - 0.0112874779541447*G0_1_2 - 0.0112874779541447*G0_2_1 - 0.0112874779541447*G0_2_2;
    A[230] = -0.00282186948853617*G0_1_1 - 0.00282186948853616*G0_1_2 - 0.00282186948853618*G0_2_1 - 0.00282186948853616*G0_2_2;
    A[231] = -0.0112874779541447*G0_1_1 - 0.0112874779541447*G0_1_2 - 0.0112874779541447*G0_2_1 - 0.0112874779541447*G0_2_2;
    A[232] = -0.0225749559082892*G0_1_0 - 0.0225749559082893*G0_1_1 + 0.0112874779541447*G0_1_2 - 0.0677248677248674*G0_2_0 - 0.0338624338624339*G0_2_1 + 0.0225749559082895*G0_2_2;
    A[233] = -0.0225749559082889*G0_1_0 - 0.022574955908289*G0_1_1 + 0.0112874779541448*G0_1_2 - 0.0677248677248678*G0_2_0 - 0.0338624338624336*G0_2_1 + 0.0677248677248676*G0_2_2;
    A[234] = 0.112874779541446*G0_1_0 + 0.112874779541446*G0_1_1 + 0.0112874779541445*G0_1_2 + 0.203174603174603*G0_2_0 + 0.101587301587301*G0_2_1 - 0.0677248677248677*G0_2_2;
    A[235] = 0.0225749559082893*G0_1_0 + 0.0338624338624339*G0_1_2 + 0.0677248677248678*G0_2_0 + 0.0338624338624339*G0_2_1 + 0.0902998236331571*G0_2_2;
    A[236] = 0.0225749559082889*G0_1_0 + 0.0338624338624335*G0_1_2 + 0.0677248677248677*G0_2_0 + 0.0338624338624339*G0_2_1 + 0.135449735449735*G0_2_2;
    A[237] = -0.112874779541446*G0_1_0 - 0.101587301587301*G0_1_2 - 0.203174603174603*G0_2_0 - 0.101587301587302*G0_2_1 - 0.270899470899471*G0_2_2;
    A[238] = 0.0225749559082893*G0_1_1 + 0.033862433862434*G0_1_2 + 0.033862433862434*G0_2_1 + 0.0451499118165787*G0_2_2;
    A[239] = 0.0225749559082893*G0_1_1 + 0.0338624338624341*G0_1_2 + 0.0338624338624338*G0_2_1 + 0.0451499118165786*G0_2_2;
    A[240] = -0.112874779541446*G0_1_1 - 0.101587301587302*G0_1_2 - 0.101587301587301*G0_2_1 - 0.135449735449735*G0_2_2;
    A[241] = -0.0112874779541447*G0_1_2 - 0.0112874779541446*G0_2_1 - 0.0225749559082893*G0_2_2;
    A[242] = -0.0112874779541447*G0_1_2 - 0.0112874779541447*G0_2_1 - 0.0225749559082895*G0_2_2;
    A[243] = -0.0112874779541447*G0_1_2 - 0.0112874779541445*G0_2_1 - 0.0677248677248676*G0_2_2;
    A[244] = 0.090299823633157*G0_2_2;
    A[245] = 0.00776014109347433*G0_0_0 + 0.00776014109347433*G0_0_1 + 0.00776014109347432*G0_0_2 + 0.00776014109347437*G0_2_0 + 0.00776014109347437*G0_2_1 + 0.00776014109347437*G0_2_2;
    A[246] = -0.0246913580246912*G0_0_0 + 0.0458553791887125*G0_2_0;
    A[247] = -0.00776014109347445*G0_0_1 - 0.00776014109347446*G0_2_1;
    A[248] = 0.0176366843033509*G0_0_2 - 0.00776014109347444*G0_2_2;
    A[249] = 0.0225749559082892*G0_0_1 + 0.0112874779541446*G0_0_2 + 0.0112874779541448*G0_2_1 + 0.0112874779541447*G0_2_2;
    A[250] = 0.0169312169312167*G0_0_1 + 0.0141093474426805*G0_0_2 + 0.00282186948853597*G0_2_1 + 0.00282186948853595*G0_2_2;
    A[251] = 0.0451499118165784*G0_0_1 + 0.0338624338624339*G0_0_2 + 0.0112874779541447*G0_2_1 + 0.0112874779541447*G0_2_2;
    A[252] = 0.203174603174603*G0_0_0 + 0.0790123456790121*G0_0_2 + 0.0790123456790121*G0_2_0 + 0.158024691358024*G0_2_2;
    A[253] = -0.118518518518518*G0_0_0 + 0.0423280423280424*G0_0_2 - 0.0310405643738975*G0_2_0 - 0.0902998236331568*G0_2_2;
    A[254] = 0.0451499118165784*G0_0_0 - 0.0338624338624338*G0_0_2 + 0.0112874779541446*G0_2_0 + 0.0451499118165785*G0_2_2;
    A[255] = 0.101587301587301*G0_0_0 + 0.079012345679012*G0_0_1 + 0.0790123456790119*G0_2_0 + 0.158024691358024*G0_2_1;
    A[256] = -0.0423280423280421*G0_0_0 - 0.0592592592592593*G0_0_1 - 0.0310405643738976*G0_2_0 - 0.0902998236331571*G0_2_1;
    A[257] = 0.0112874779541446*G0_0_0 + 0.033862433862434*G0_0_1 + 0.0112874779541447*G0_2_0 + 0.0451499118165786*G0_2_1;
    A[258] = -0.0225749559082892*G0_0_0 - 0.0225749559082893*G0_0_1 - 0.0112874779541445*G0_0_2 - 0.0112874779541447*G0_2_0 - 0.0112874779541447*G0_2_1;
    A[259] = -0.0169312169312168*G0_0_0 - 0.0169312169312168*G0_0_1 - 0.00282186948853617*G0_0_2 - 0.00282186948853604*G0_2_0 - 0.00282186948853606*G0_2_1;
    A[260] = -0.0451499118165784*G0_0_0 - 0.0451499118165785*G0_0_1 - 0.0112874779541446*G0_0_2 - 0.0112874779541447*G0_2_0 - 0.0112874779541447*G0_2_1;
    A[261] = -0.0112874779541446*G0_0_0 - 0.0112874779541447*G0_0_2 - 0.0112874779541447*G0_2_0 - 0.0112874779541447*G0_2_2;
    A[262] = -0.00282186948853607*G0_0_0 - 0.00282186948853609*G0_0_2 - 0.0028218694885361*G0_2_0 - 0.0028218694885361*G0_2_2;
    A[263] = -0.0112874779541447*G0_0_0 - 0.0112874779541446*G0_0_2 - 0.0112874779541447*G0_2_0 - 0.0112874779541447*G0_2_2;
    A[264] = -0.0225749559082891*G0_0_0 - 0.0338624338624338*G0_0_1 - 0.0338624338624338*G0_0_2 - 0.0338624338624337*G0_2_0 - 0.0451499118165784*G0_2_1 - 0.0451499118165784*G0_2_2;
    A[265] = 0.0169312169312168*G0_0_0 + 0.0592592592592591*G0_0_1 + 0.0592592592592591*G0_0_2 + 0.0592592592592591*G0_2_0 + 0.0902998236331567*G0_2_1 + 0.0902998236331568*G0_2_2;
    A[266] = 0.0225749559082892*G0_0_0 - 0.0790123456790122*G0_0_1 - 0.0790123456790121*G0_0_2 - 0.0790123456790122*G0_2_0 - 0.158024691358024*G0_2_1 - 0.158024691358024*G0_2_2;
    A[267] = -0.0677248677248674*G0_0_0 + 0.203174603174603*G0_0_1 + 0.101587301587301*G0_0_2 + 0.0112874779541446*G0_2_0 + 0.112874779541446*G0_2_1 + 0.112874779541445*G0_2_2;
    A[268] = 0.0225749559082891*G0_0_0 - 0.0677248677248676*G0_0_1 - 0.0338624338624336*G0_0_2 + 0.0112874779541449*G0_2_0 - 0.0225749559082891*G0_2_1 - 0.0225749559082889*G0_2_2;
    A[269] = 0.0677248677248676*G0_0_0 - 0.0677248677248674*G0_0_1 - 0.0338624338624337*G0_0_2 + 0.0112874779541446*G0_2_0 - 0.0225749559082889*G0_2_1 - 0.0225749559082891*G0_2_2;
    A[270] = -0.0225749559082893*G0_0_0 - 0.0112874779541446*G0_0_2 - 0.0112874779541448*G0_2_0;
    A[271] = -0.0225749559082893*G0_0_0 - 0.0112874779541446*G0_0_2 - 0.0112874779541449*G0_2_0;
    A[272] = -0.0677248677248676*G0_0_0 - 0.0112874779541447*G0_0_2 - 0.0112874779541446*G0_2_0;
    A[273] = 0.0902998236331566*G0_0_0 + 0.0677248677248673*G0_0_1 + 0.0338624338624339*G0_0_2 + 0.0338624338624337*G0_2_0 + 0.0225749559082891*G0_2_1;
    A[274] = -0.27089947089947*G0_0_0 - 0.203174603174603*G0_0_1 - 0.101587301587301*G0_0_2 - 0.101587301587301*G0_2_0 - 0.112874779541446*G0_2_1;
    A[275] = 0.135449735449735*G0_0_0 + 0.0677248677248673*G0_0_1 + 0.0338624338624337*G0_0_2 + 0.0338624338624334*G0_2_0 + 0.022574955908289*G0_2_1;
    A[276] = 0.0451499118165781*G0_0_0 + 0.0338624338624333*G0_0_2 + 0.0338624338624336*G0_2_0 + 0.0225749559082889*G0_2_2;
    A[277] = -0.135449735449734*G0_0_0 - 0.101587301587301*G0_0_2 - 0.101587301587301*G0_2_0 - 0.112874779541446*G0_2_2;
    A[278] = 0.0451499118165783*G0_0_0 + 0.0338624338624337*G0_0_2 + 0.0338624338624337*G0_2_0 + 0.022574955908289*G0_2_2;
    A[279] = 0.0902998236331567*G0_0_0;
    A[280] = 0.00511463844797189*G0_0_0 + 0.00511463844797188*G0_0_1 + 0.0051146384479719*G0_0_2 + 0.00511463844797185*G0_2_0 + 0.00511463844797184*G0_2_1 + 0.00511463844797185*G0_2_2;
    A[281] = 0.0202821869488536*G0_0_0 - 0.0326278659611993*G0_2_0;
    A[282] = -0.00511463844797178*G0_0_1 - 0.00511463844797172*G0_2_1;
    A[283] = -0.0326278659611992*G0_0_2 + 0.0202821869488536*G0_2_2;
    A[284] = 0.0169312169312168*G0_0_1 + 0.00282186948853605*G0_0_2 + 0.0141093474426806*G0_2_1 + 0.00282186948853609*G0_2_2;
    A[285] = -0.0211640211640208*G0_0_1 - 0.0105820105820102*G0_0_2 - 0.0105820105820104*G0_2_1 - 0.0134038800705465*G0_2_2;
    A[286] = -0.0902998236331568*G0_0_1 - 0.0592592592592593*G0_0_2 - 0.0310405643738977*G0_2_1 - 0.0423280423280424*G0_2_2;
    A[287] = -0.118518518518518*G0_0_0 - 0.0310405643738975*G0_0_2 + 0.0423280423280424*G0_2_0 - 0.0902998236331567*G0_2_2;
    A[288] = 0.249735449735449*G0_0_0 + 0.0825396825396821*G0_0_2 + 0.0825396825396821*G0_2_0 + 0.249735449735449*G0_2_2;
    A[289] = -0.0902998236331567*G0_0_0 + 0.0423280423280422*G0_0_2 - 0.0310405643738977*G0_2_0 - 0.118518518518518*G0_2_2;
    A[290] = -0.0423280423280421*G0_0_0 - 0.0310405643738975*G0_0_1 - 0.059259259259259*G0_2_0 - 0.0902998236331568*G0_2_1;
    A[291] = -0.0134038800705468*G0_0_0 - 0.0105820105820105*G0_0_1 - 0.0105820105820106*G0_2_0 - 0.0211640211640209*G0_2_1;
    A[292] = 0.00282186948853606*G0_0_0 + 0.0141093474426806*G0_0_1 + 0.00282186948853613*G0_2_0 + 0.0169312169312167*G0_2_1;
    A[293] = -0.0169312169312169*G0_0_0 - 0.0169312169312169*G0_0_1 - 0.014109347442681*G0_0_2 - 0.0141093474426808*G0_2_0 - 0.0141093474426808*G0_2_1 - 0.0112874779541447*G0_2_2;
    A[294] = 0.0211640211640212*G0_0_0 + 0.0211640211640212*G0_0_1 + 0.0105820105820109*G0_0_2 + 0.0105820105820105*G0_2_0 + 0.0105820105820105*G0_2_1 - 0.00282186948853589*G0_2_2;
    A[295] = 0.0902998236331568*G0_0_0 + 0.0902998236331568*G0_0_1 + 0.0310405643738974*G0_0_2 + 0.0310405643738977*G0_2_0 + 0.0310405643738977*G0_2_1 - 0.0112874779541449*G0_2_2;
    A[296] = -0.00282186948853601*G0_0_0 - 0.00282186948853599*G0_0_2 - 0.00282186948853615*G0_2_0 - 0.00282186948853613*G0_2_2;
    A[297] = -0.00917107583774251*G0_0_0 - 0.00917107583774253*G0_0_2 - 0.00917107583774246*G0_2_0 - 0.00917107583774248*G0_2_2;
    A[298] = -0.00282186948853602*G0_0_0 - 0.00282186948853604*G0_0_2 - 0.00282186948853608*G0_2_0 - 0.00282186948853612*G0_2_2;
    A[299] = -0.0112874779541448*G0_0_0 - 0.0141093474426806*G0_0_1 - 0.0141093474426806*G0_0_2 - 0.0141093474426808*G0_2_0 - 0.0169312169312168*G0_2_1 - 0.0169312169312168*G0_2_2;
    A[300] = -0.00282186948853607*G0_0_0 + 0.0105820105820105*G0_0_1 + 0.0105820105820104*G0_0_2 + 0.0105820105820105*G0_2_0 + 0.021164021164021*G0_2_1 + 0.021164021164021*G0_2_2;
    A[301] = -0.0112874779541446*G0_0_0 + 0.0310405643738976*G0_0_1 + 0.0310405643738976*G0_0_2 + 0.0310405643738978*G0_2_0 + 0.0902998236331568*G0_2_1 + 0.0902998236331568*G0_2_2;
    A[302] = 0.118518518518518*G0_0_0 + 0.0507936507936506*G0_0_1 - 0.042328042328042*G0_0_2 + 0.0931216931216929*G0_2_0 + 0.186243386243386*G0_2_1 - 0.0846560846560841*G0_2_2;
    A[303] = -0.0169312169312166*G0_0_0 - 0.0846560846560842*G0_0_1 - 0.0197530864197531*G0_0_2 - 0.0197530864197532*G0_2_0 - 0.0846560846560844*G0_2_1 - 0.016931216931217*G0_2_2;
    A[304] = -0.0846560846560846*G0_0_0 + 0.186243386243385*G0_0_1 + 0.0931216931216927*G0_0_2 - 0.0423280423280425*G0_2_0 + 0.0507936507936501*G0_2_1 + 0.118518518518518*G0_2_2;
    A[305] = 0.0169312169312168*G0_0_0 + 0.019753086419753*G0_0_2 + 0.019753086419753*G0_2_0 + 0.0225749559082894*G0_2_2;
    A[306] = 0.0169312169312168*G0_0_0 + 0.0197530864197529*G0_0_2 + 0.0197530864197532*G0_2_0 + 0.0225749559082891*G0_2_2;
    A[307] = 0.0846560846560845*G0_0_0 + 0.0423280423280424*G0_0_2 + 0.0423280423280424*G0_2_0 + 0.0225749559082894*G0_2_2;
    A[308] = 0.0677248677248674*G0_0_0 + 0.0846560846560842*G0_0_1 + 0.0649029982363311*G0_0_2 + 0.0649029982363313*G0_2_0 + 0.0846560846560839*G0_2_1 + 0.0677248677248672*G0_2_2;
    A[309] = 0.0677248677248675*G0_0_0 - 0.0507936507936507*G0_0_1 - 0.0931216931216926*G0_0_2 - 0.0931216931216929*G0_2_0 - 0.186243386243386*G0_2_1 - 0.27089947089947*G0_2_2;
    A[310] = -0.27089947089947*G0_0_0 - 0.186243386243385*G0_0_1 - 0.0931216931216927*G0_0_2 - 0.0931216931216926*G0_2_0 - 0.0507936507936501*G0_2_1 + 0.067724867724868*G0_2_2;
    A[311] = 0.022574955908289*G0_0_0 + 0.019753086419753*G0_0_2 + 0.019753086419753*G0_2_0 + 0.0169312169312167*G0_2_2;
    A[312] = 0.0225749559082891*G0_0_0 + 0.042328042328042*G0_0_2 + 0.0423280423280421*G0_2_0 + 0.0846560846560841*G0_2_2;
    A[313] = 0.0225749559082892*G0_0_0 + 0.019753086419753*G0_0_2 + 0.019753086419753*G0_2_0 + 0.016931216931217*G0_2_2;
    A[314] = -0.135449735449735*G0_0_0 - 0.112874779541446*G0_0_2 - 0.112874779541446*G0_2_0 - 0.135449735449735*G0_2_2;
    A[315] = 0.00776014109347437*G0_0_0 + 0.00776014109347439*G0_0_1 + 0.00776014109347438*G0_0_2 + 0.00776014109347441*G0_2_0 + 0.00776014109347442*G0_2_1 + 0.00776014109347441*G0_2_2;
    A[316] = -0.00776014109347435*G0_0_0 + 0.017636684303351*G0_2_0;
    A[317] = -0.00776014109347448*G0_0_1 - 0.00776014109347447*G0_2_1;
    A[318] = 0.0458553791887125*G0_0_2 - 0.0246913580246914*G0_2_2;
    A[319] = 0.0451499118165786*G0_0_1 + 0.0112874779541446*G0_0_2 + 0.0338624338624339*G0_2_1 + 0.0112874779541446*G0_2_2;
    A[320] = -0.090299823633157*G0_0_1 - 0.0310405643738975*G0_0_2 - 0.0592592592592592*G0_2_1 - 0.0423280423280422*G0_2_2;
    A[321] = 0.158024691358024*G0_0_1 + 0.0790123456790122*G0_0_2 + 0.0790123456790122*G0_2_1 + 0.101587301587302*G0_2_2;
    A[322] = 0.0451499118165783*G0_0_0 + 0.0112874779541446*G0_0_2 - 0.0338624338624338*G0_2_0 + 0.0451499118165785*G0_2_2;
    A[323] = -0.0902998236331568*G0_0_0 - 0.0310405643738977*G0_0_2 + 0.0423280423280422*G0_2_0 - 0.118518518518518*G0_2_2;
    A[324] = 0.158024691358024*G0_0_0 + 0.0790123456790123*G0_0_2 + 0.0790123456790123*G0_2_0 + 0.203174603174603*G0_2_2;
    A[325] = 0.0112874779541446*G0_0_0 + 0.0112874779541447*G0_0_1 + 0.0338624338624338*G0_2_0 + 0.0451499118165785*G0_2_1;
    A[326] = 0.0028218694885362*G0_0_0 + 0.0028218694885361*G0_0_1 + 0.0141093474426808*G0_2_0 + 0.0169312169312168*G0_2_1;
    A[327] = 0.0112874779541446*G0_0_0 + 0.0112874779541447*G0_0_1 + 0.0112874779541446*G0_2_0 + 0.0225749559082893*G0_2_1;
    A[328] = -0.0451499118165785*G0_0_0 - 0.0451499118165785*G0_0_1 - 0.0338624338624338*G0_0_2 - 0.0338624338624339*G0_2_0 - 0.0338624338624339*G0_2_1 - 0.0225749559082893*G0_2_2;
    A[329] = 0.0902998236331567*G0_0_0 + 0.0902998236331568*G0_0_1 + 0.059259259259259*G0_0_2 + 0.0592592592592592*G0_2_0 + 0.0592592592592592*G0_2_1 + 0.0169312169312169*G0_2_2;
    A[330] = -0.158024691358024*G0_0_0 - 0.158024691358024*G0_0_1 - 0.0790123456790121*G0_0_2 - 0.0790123456790123*G0_2_0 - 0.0790123456790122*G0_2_1 + 0.0225749559082893*G0_2_2;
    A[331] = -0.0112874779541447*G0_0_0 - 0.0112874779541447*G0_0_2 - 0.0112874779541446*G0_2_0 - 0.0112874779541446*G0_2_2;
    A[332] = -0.00282186948853611*G0_0_0 - 0.00282186948853608*G0_0_2 - 0.0028218694885361*G0_2_0 - 0.00282186948853608*G0_2_2;
    A[333] = -0.0112874779541446*G0_0_0 - 0.0112874779541446*G0_0_2 - 0.0112874779541446*G0_2_0 - 0.0112874779541445*G0_2_2;
    A[334] = -0.0112874779541447*G0_0_1 - 0.0112874779541447*G0_0_2 - 0.0112874779541446*G0_2_0 - 0.0225749559082893*G0_2_1 - 0.0225749559082892*G0_2_2;
    A[335] = -0.00282186948853618*G0_0_1 - 0.00282186948853617*G0_0_2 - 0.00282186948853619*G0_2_0 - 0.0169312169312171*G0_2_1 - 0.016931216931217*G0_2_2;
    A[336] = -0.0112874779541447*G0_0_1 - 0.0112874779541447*G0_0_2 - 0.0112874779541446*G0_2_0 - 0.0451499118165785*G0_2_1 - 0.0451499118165785*G0_2_2;
    A[337] = -0.0225749559082891*G0_0_0 - 0.0225749559082893*G0_0_1 + 0.0112874779541447*G0_0_2 - 0.0338624338624339*G0_2_0 - 0.0677248677248678*G0_2_1 + 0.0677248677248677*G0_2_2;
    A[338] = -0.0225749559082889*G0_0_0 - 0.022574955908289*G0_0_1 + 0.0112874779541448*G0_0_2 - 0.0338624338624334*G0_2_0 - 0.0677248677248673*G0_2_1 + 0.0225749559082894*G0_2_2;
    A[339] = 0.112874779541446*G0_0_0 + 0.112874779541446*G0_0_1 + 0.0112874779541446*G0_0_2 + 0.101587301587302*G0_2_0 + 0.203174603174603*G0_2_1 - 0.0677248677248677*G0_2_2;
    A[340] = 0.0225749559082893*G0_0_0 + 0.0338624338624339*G0_0_2 + 0.0338624338624338*G0_2_0 + 0.0451499118165784*G0_2_2;
    A[341] = 0.0225749559082888*G0_0_0 + 0.0338624338624335*G0_0_2 + 0.0338624338624334*G0_2_0 + 0.0451499118165781*G0_2_2;
    A[342] = -0.112874779541446*G0_0_0 - 0.101587301587301*G0_0_2 - 0.101587301587302*G0_2_0 - 0.135449735449735*G0_2_2;
    A[343] = 0.0225749559082892*G0_0_1 + 0.033862433862434*G0_0_2 + 0.0338624338624337*G0_2_0 + 0.0677248677248677*G0_2_1 + 0.090299823633157*G0_2_2;
    A[344] = 0.0225749559082893*G0_0_1 + 0.033862433862434*G0_0_2 + 0.0338624338624338*G0_2_0 + 0.0677248677248676*G0_2_1 + 0.135449735449736*G0_2_2;
    A[345] = -0.112874779541446*G0_0_1 - 0.101587301587302*G0_0_2 - 0.101587301587301*G0_2_0 - 0.203174603174603*G0_2_1 - 0.270899470899471*G0_2_2;
    A[346] = -0.0112874779541447*G0_0_2 - 0.0112874779541448*G0_2_0 - 0.0225749559082893*G0_2_2;
    A[347] = -0.0112874779541447*G0_0_2 - 0.0112874779541444*G0_2_0 - 0.0677248677248677*G0_2_2;
    A[348] = -0.0112874779541448*G0_0_2 - 0.0112874779541448*G0_2_0 - 0.0225749559082893*G0_2_2;
    A[349] = 0.0902998236331571*G0_2_2;
    A[350] = 0.0077601410934743*G0_0_0 + 0.0077601410934743*G0_0_1 + 0.00776014109347429*G0_0_2 + 0.00776014109347437*G0_1_0 + 0.00776014109347437*G0_1_1 + 0.00776014109347437*G0_1_2;
    A[351] = -0.0246913580246912*G0_0_0 + 0.0458553791887125*G0_1_0;
    A[352] = 0.0176366843033509*G0_0_1 - 0.00776014109347445*G0_1_1;
    A[353] = -0.00776014109347441*G0_0_2 - 0.00776014109347442*G0_1_2;
    A[354] = 0.0338624338624337*G0_0_1 + 0.0451499118165782*G0_0_2 + 0.0112874779541447*G0_1_1 + 0.0112874779541447*G0_1_2;
    A[355] = 0.0141093474426806*G0_0_1 + 0.0169312169312168*G0_0_2 + 0.00282186948853597*G0_1_1 + 0.00282186948853597*G0_1_2;
    A[356] = 0.0112874779541446*G0_0_1 + 0.0225749559082892*G0_0_2 + 0.0112874779541447*G0_1_1 + 0.0112874779541447*G0_1_2;
    A[357] = 0.101587301587301*G0_0_0 + 0.0790123456790119*G0_0_2 + 0.079012345679012*G0_1_0 + 0.158024691358024*G0_1_2;
    A[358] = -0.0423280423280421*G0_0_0 - 0.059259259259259*G0_0_2 - 0.0310405643738975*G0_1_0 - 0.0902998236331568*G0_1_2;
    A[359] = 0.0112874779541446*G0_0_0 + 0.0338624338624338*G0_0_2 + 0.0112874779541447*G0_1_0 + 0.0451499118165785*G0_1_2;
    A[360] = 0.203174603174602*G0_0_0 + 0.0790123456790119*G0_0_1 + 0.0790123456790119*G0_1_0 + 0.158024691358024*G0_1_1;
    A[361] = -0.118518518518518*G0_0_0 + 0.0423280423280421*G0_0_1 - 0.0310405643738976*G0_1_0 - 0.0902998236331571*G0_1_1;
    A[362] = 0.0451499118165782*G0_0_0 - 0.0338624338624337*G0_0_1 + 0.0112874779541447*G0_1_0 + 0.0451499118165786*G0_1_1;
    A[363] = -0.0112874779541445*G0_0_0 - 0.0112874779541446*G0_0_1 - 0.0112874779541446*G0_1_0 - 0.0112874779541447*G0_1_1;
    A[364] = -0.00282186948853601*G0_0_0 - 0.00282186948853598*G0_0_1 - 0.00282186948853601*G0_1_0 - 0.00282186948853603*G0_1_1;
    A[365] = -0.0112874779541446*G0_0_0 - 0.0112874779541446*G0_0_1 - 0.0112874779541447*G0_1_0 - 0.0112874779541447*G0_1_1;
    A[366] = -0.0225749559082891*G0_0_0 - 0.0112874779541444*G0_0_1 - 0.0225749559082891*G0_0_2 - 0.0112874779541446*G0_1_0 - 0.0112874779541447*G0_1_2;
    A[367] = -0.0169312169312168*G0_0_0 - 0.00282186948853628*G0_0_1 - 0.0169312169312169*G0_0_2 - 0.00282186948853605*G0_1_0 - 0.00282186948853606*G0_1_2;
    A[368] = -0.0451499118165784*G0_0_0 - 0.0112874779541446*G0_0_1 - 0.0451499118165782*G0_0_2 - 0.0112874779541447*G0_1_0 - 0.0112874779541447*G0_1_2;
    A[369] = -0.0225749559082889*G0_0_0 - 0.0338624338624336*G0_0_1 - 0.0338624338624336*G0_0_2 - 0.0338624338624337*G0_1_0 - 0.0451499118165783*G0_1_1 - 0.0451499118165784*G0_1_2;
    A[370] = 0.0169312169312168*G0_0_0 + 0.0592592592592589*G0_0_1 + 0.0592592592592589*G0_0_2 + 0.0592592592592591*G0_1_0 + 0.0902998236331567*G0_1_1 + 0.0902998236331567*G0_1_2;
    A[371] = 0.0225749559082891*G0_0_0 - 0.079012345679012*G0_0_1 - 0.079012345679012*G0_0_2 - 0.0790123456790122*G0_1_0 - 0.158024691358024*G0_1_1 - 0.158024691358024*G0_1_2;
    A[372] = -0.0677248677248674*G0_0_0 + 0.101587301587301*G0_0_1 + 0.203174603174602*G0_0_2 + 0.0112874779541446*G0_1_0 + 0.112874779541446*G0_1_1 + 0.112874779541445*G0_1_2;
    A[373] = 0.0677248677248675*G0_0_0 - 0.0338624338624335*G0_0_1 - 0.0677248677248673*G0_0_2 + 0.0112874779541448*G0_1_0 - 0.0225749559082891*G0_1_1 - 0.022574955908289*G0_1_2;
    A[374] = 0.0225749559082891*G0_0_0 - 0.0338624338624336*G0_0_1 - 0.0677248677248675*G0_0_2 + 0.0112874779541446*G0_1_0 - 0.0225749559082889*G0_1_1 - 0.0225749559082891*G0_1_2;
    A[375] = -0.0225749559082893*G0_0_0 - 0.0112874779541449*G0_0_1 - 0.0112874779541448*G0_1_0;
    A[376] = -0.0677248677248675*G0_0_0 - 0.0112874779541444*G0_0_1 - 0.0112874779541449*G0_1_0;
    A[377] = -0.0225749559082891*G0_0_0 - 0.0112874779541448*G0_0_1 - 0.0112874779541447*G0_1_0;
    A[378] = 0.0451499118165781*G0_0_0 + 0.0338624338624336*G0_0_1 + 0.0338624338624336*G0_1_0 + 0.0225749559082891*G0_1_1;
    A[379] = -0.135449735449735*G0_0_0 - 0.101587301587301*G0_0_1 - 0.101587301587301*G0_1_0 - 0.112874779541446*G0_1_1;
    A[380] = 0.0451499118165779*G0_0_0 + 0.0338624338624336*G0_0_1 + 0.0338624338624334*G0_1_0 + 0.022574955908289*G0_1_1;
    A[381] = 0.0902998236331561*G0_0_0 + 0.0338624338624332*G0_0_1 + 0.067724867724867*G0_0_2 + 0.0338624338624335*G0_1_0 + 0.0225749559082889*G0_1_2;
    A[382] = -0.270899470899469*G0_0_0 - 0.101587301587301*G0_0_1 - 0.203174603174602*G0_0_2 - 0.101587301587301*G0_1_0 - 0.112874779541446*G0_1_2;
    A[383] = 0.135449735449735*G0_0_0 + 0.0338624338624341*G0_0_1 + 0.0677248677248674*G0_0_2 + 0.0338624338624337*G0_1_0 + 0.022574955908289*G0_1_2;
    A[384] = 0.0902998236331567*G0_0_0;
    A[385] = 0.00511463844797178*G0_0_0 + 0.0051146384479718*G0_0_1 + 0.00511463844797179*G0_0_2 + 0.0051146384479717*G0_1_0 + 0.00511463844797171*G0_1_1 + 0.0051146384479717*G0_1_2;
    A[386] = 0.0202821869488535*G0_0_0 - 0.0326278659611993*G0_1_0;
    A[387] = -0.0326278659611991*G0_0_1 + 0.0202821869488536*G0_1_1;
    A[388] = -0.00511463844797178*G0_0_2 - 0.00511463844797176*G0_1_2;
    A[389] = -0.0592592592592593*G0_0_1 - 0.0902998236331567*G0_0_2 - 0.0423280423280426*G0_1_1 - 0.031040564373898*G0_1_2;
    A[390] = -0.0105820105820105*G0_0_1 - 0.0211640211640212*G0_0_2 - 0.0134038800705466*G0_1_1 - 0.0105820105820106*G0_1_2;
    A[391] = 0.00282186948853621*G0_0_1 + 0.0169312169312171*G0_0_2 + 0.0028218694885361*G0_1_1 + 0.0141093474426808*G0_1_2;
    A[392] = -0.0423280423280421*G0_0_0 - 0.0310405643738976*G0_0_2 - 0.0592592592592593*G0_1_0 - 0.0902998236331571*G0_1_2;
    A[393] = -0.0134038800705468*G0_0_0 - 0.0105820105820105*G0_0_2 - 0.0105820105820105*G0_1_0 - 0.0211640211640209*G0_1_2;
    A[394] = 0.0028218694885362*G0_0_0 + 0.0141093474426808*G0_0_2 + 0.0028218694885361*G0_1_0 + 0.0169312169312168*G0_1_2;
    A[395] = -0.118518518518518*G0_0_0 - 0.0310405643738976*G0_0_1 + 0.0423280423280421*G0_1_0 - 0.0902998236331571*G0_1_1;
    A[396] = 0.249735449735449*G0_0_0 + 0.0825396825396827*G0_0_1 + 0.0825396825396827*G0_1_0 + 0.24973544973545*G0_1_1;
    A[397] = -0.0902998236331567*G0_0_0 + 0.0423280423280419*G0_0_1 - 0.0310405643738979*G0_1_0 - 0.118518518518519*G0_1_1;
    A[398] = -0.00282186948853627*G0_0_0 - 0.00282186948853625*G0_0_1 - 0.00282186948853615*G0_1_0 - 0.00282186948853611*G0_1_1;
    A[399] = -0.00917107583774251*G0_0_0 - 0.00917107583774257*G0_0_1 - 0.00917107583774257*G0_1_0 - 0.00917107583774261*G0_1_1;
    A[400] = -0.00282186948853623*G0_0_0 - 0.00282186948853618*G0_0_1 - 0.00282186948853611*G0_1_0 - 0.00282186948853606*G0_1_1;
    A[401] = -0.0169312169312169*G0_0_0 - 0.0141093474426809*G0_0_1 - 0.0169312169312169*G0_0_2 - 0.0141093474426806*G0_1_0 - 0.0112874779541446*G0_1_1 - 0.0141093474426806*G0_1_2;
    A[402] = 0.021164021164021*G0_0_0 + 0.0105820105820108*G0_0_1 + 0.0211640211640212*G0_0_2 + 0.0105820105820106*G0_1_0 - 0.00282186948853601*G0_1_1 + 0.0105820105820106*G0_1_2;
    A[403] = 0.0902998236331568*G0_0_0 + 0.0310405643738975*G0_0_1 + 0.0902998236331567*G0_0_2 + 0.0310405643738979*G0_1_0 - 0.0112874779541447*G0_1_1 + 0.0310405643738978*G0_1_2;
    A[404] = -0.0112874779541446*G0_0_0 - 0.0141093474426809*G0_0_1 - 0.0141093474426808*G0_0_2 - 0.0141093474426805*G0_1_0 - 0.0169312169312167*G0_1_1 - 0.0169312169312166*G0_1_2;
    A[405] = -0.00282186948853623*G0_0_0 + 0.0105820105820107*G0_0_1 + 0.0105820105820107*G0_0_2 + 0.0105820105820103*G0_1_0 + 0.021164021164021*G0_1_1 + 0.021164021164021*G0_1_2;
    A[406] = -0.0112874779541444*G0_0_0 + 0.0310405643738976*G0_0_1 + 0.0310405643738976*G0_0_2 + 0.0310405643738978*G0_1_0 + 0.0902998236331571*G0_1_1 + 0.0902998236331571*G0_1_2;
    A[407] = 0.118518518518518*G0_0_0 - 0.0423280423280419*G0_0_1 + 0.0507936507936513*G0_0_2 + 0.0931216931216934*G0_1_0 - 0.0846560846560845*G0_1_1 + 0.186243386243386*G0_1_2;
    A[408] = -0.0846560846560849*G0_0_0 + 0.0931216931216925*G0_0_1 + 0.186243386243385*G0_0_2 - 0.0423280423280429*G0_1_0 + 0.118518518518518*G0_1_1 + 0.0507936507936505*G0_1_2;
    A[409] = -0.0169312169312167*G0_0_0 - 0.019753086419753*G0_0_1 - 0.0846560846560846*G0_0_2 - 0.0197530864197531*G0_1_0 - 0.016931216931217*G0_1_1 - 0.0846560846560846*G0_1_2;
    A[410] = 0.0169312169312168*G0_0_0 + 0.0197530864197533*G0_0_1 + 0.0197530864197531*G0_1_0 + 0.0225749559082894*G0_1_1;
    A[411] = 0.084656084656085*G0_0_0 + 0.0423280423280424*G0_0_1 + 0.0423280423280429*G0_1_0 + 0.0225749559082895*G0_1_1;
    A[412] = 0.0169312169312167*G0_0_0 + 0.0197530864197531*G0_0_1 + 0.0197530864197531*G0_1_0 + 0.0225749559082893*G0_1_1;
    A[413] = 0.0225749559082894*G0_0_0 + 0.0197530864197531*G0_0_1 + 0.019753086419753*G0_1_0 + 0.0169312169312168*G0_1_1;
    A[414] = 0.0225749559082889*G0_0_0 + 0.042328042328042*G0_0_1 + 0.0423280423280424*G0_1_0 + 0.0846560846560846*G0_1_1;
    A[415] = 0.0225749559082894*G0_0_0 + 0.019753086419753*G0_0_1 + 0.0197530864197532*G0_1_0 + 0.016931216931217*G0_1_1;
    A[416] = 0.067724867724868*G0_0_0 + 0.0649029982363317*G0_0_1 + 0.0846560846560847*G0_0_2 + 0.0649029982363313*G0_1_0 + 0.0677248677248673*G0_1_1 + 0.0846560846560844*G0_1_2;
    A[417] = 0.0677248677248668*G0_0_0 - 0.0931216931216933*G0_0_1 - 0.0507936507936512*G0_0_2 - 0.0931216931216927*G0_1_0 - 0.270899470899471*G0_1_1 - 0.186243386243386*G0_1_2;
    A[418] = -0.27089947089947*G0_0_0 - 0.0931216931216928*G0_0_1 - 0.186243386243385*G0_0_2 - 0.0931216931216932*G0_1_0 + 0.0677248677248681*G0_1_1 - 0.0507936507936506*G0_1_2;
    A[419] = -0.135449735449735*G0_0_0 - 0.112874779541446*G0_0_1 - 0.112874779541446*G0_1_0 - 0.135449735449736*G0_1_1;
    A[420] = 0.00776014109347439*G0_0_0 + 0.0077601410934744*G0_0_1 + 0.00776014109347439*G0_0_2 + 0.00776014109347441*G0_1_0 + 0.00776014109347444*G0_1_1 + 0.00776014109347442*G0_1_2;
    A[421] = -0.00776014109347435*G0_0_0 + 0.017636684303351*G0_1_0;
    A[422] = 0.0458553791887124*G0_0_1 - 0.0246913580246913*G0_1_1;
    A[423] = -0.00776014109347441*G0_0_2 - 0.00776014109347439*G0_1_2;
    A[424] = 0.0790123456790124*G0_0_1 + 0.158024691358025*G0_0_2 + 0.101587301587302*G0_1_1 + 0.0790123456790125*G0_1_2;
    A[425] = -0.0310405643738977*G0_0_1 - 0.090299823633157*G0_0_2 - 0.0423280423280423*G0_1_1 - 0.0592592592592592*G0_1_2;
    A[426] = 0.0112874779541446*G0_0_1 + 0.0451499118165784*G0_0_2 + 0.0112874779541447*G0_1_1 + 0.0338624338624338*G0_1_2;
    A[427] = 0.0112874779541446*G0_0_0 + 0.0112874779541447*G0_0_2 + 0.033862433862434*G0_1_0 + 0.0451499118165786*G0_1_2;
    A[428] = 0.00282186948853606*G0_0_0 + 0.00282186948853613*G0_0_2 + 0.0141093474426806*G0_1_0 + 0.0169312169312167*G0_1_2;
    A[429] = 0.0112874779541446*G0_0_0 + 0.0112874779541446*G0_0_2 + 0.0112874779541447*G0_1_0 + 0.0225749559082893*G0_1_2;
    A[430] = 0.0451499118165782*G0_0_0 + 0.0112874779541447*G0_0_1 - 0.0338624338624337*G0_1_0 + 0.0451499118165786*G0_1_1;
    A[431] = -0.0902998236331567*G0_0_0 - 0.0310405643738979*G0_0_1 + 0.0423280423280419*G0_1_0 - 0.118518518518519*G0_1_1;
    A[432] = 0.158024691358025*G0_0_0 + 0.0790123456790125*G0_0_1 + 0.0790123456790125*G0_1_0 + 0.203174603174603*G0_1_1;
    A[433] = -0.0112874779541447*G0_0_0 - 0.0112874779541446*G0_0_1 - 0.0112874779541447*G0_1_0 - 0.0112874779541447*G0_1_1;
    A[434] = -0.00282186948853624*G0_0_0 - 0.00282186948853623*G0_0_1 - 0.00282186948853613*G0_1_0 - 0.00282186948853612*G0_1_1;
    A[435] = -0.0112874779541446*G0_0_0 - 0.0112874779541446*G0_0_1 - 0.0112874779541447*G0_1_0 - 0.0112874779541447*G0_1_1;
    A[436] = -0.0451499118165784*G0_0_0 - 0.0338624338624337*G0_0_1 - 0.0451499118165784*G0_0_2 - 0.0338624338624338*G0_1_0 - 0.0225749559082892*G0_1_1 - 0.0338624338624339*G0_1_2;
    A[437] = 0.090299823633157*G0_0_0 + 0.059259259259259*G0_0_1 + 0.090299823633157*G0_0_2 + 0.0592592592592593*G0_1_0 + 0.0169312169312168*G0_1_1 + 0.0592592592592593*G0_1_2;
    A[438] = -0.158024691358025*G0_0_0 - 0.0790123456790122*G0_0_1 - 0.158024691358025*G0_0_2 - 0.0790123456790125*G0_1_0 + 0.0225749559082892*G0_1_1 - 0.0790123456790125*G0_1_2;
    A[439] = -0.0112874779541446*G0_0_1 - 0.0112874779541446*G0_0_2 - 0.0112874779541446*G0_1_0 - 0.0225749559082893*G0_1_1 - 0.0225749559082893*G0_1_2;
    A[440] = -0.00282186948853617*G0_0_1 - 0.00282186948853614*G0_0_2 - 0.00282186948853603*G0_1_0 - 0.0169312169312169*G0_1_1 - 0.0169312169312169*G0_1_2;
    A[441] = -0.0112874779541446*G0_0_1 - 0.0112874779541446*G0_0_2 - 0.0112874779541447*G0_1_0 - 0.0451499118165786*G0_1_1 - 0.0451499118165786*G0_1_2;
    A[442] = -0.022574955908289*G0_0_0 + 0.0112874779541446*G0_0_1 - 0.0225749559082893*G0_0_2 - 0.033862433862434*G0_1_0 + 0.0677248677248677*G0_1_1 - 0.0677248677248677*G0_1_2;
    A[443] = 0.112874779541446*G0_0_0 + 0.0112874779541449*G0_0_1 + 0.112874779541446*G0_0_2 + 0.101587301587302*G0_1_0 - 0.0677248677248675*G0_1_1 + 0.203174603174603*G0_1_2;
    A[444] = -0.0225749559082894*G0_0_0 + 0.0112874779541445*G0_0_1 - 0.0225749559082893*G0_0_2 - 0.0338624338624338*G0_1_0 + 0.0225749559082892*G0_1_1 - 0.0677248677248675*G0_1_2;
    A[445] = 0.0225749559082892*G0_0_0 + 0.0338624338624338*G0_0_1 + 0.0338624338624337*G0_1_0 + 0.0451499118165784*G0_1_1;
    A[446] = -0.112874779541446*G0_0_0 - 0.101587301587302*G0_0_1 - 0.101587301587302*G0_1_0 - 0.135449735449736*G0_1_1;
    A[447] = 0.0225749559082893*G0_0_0 + 0.0338624338624339*G0_0_1 + 0.0338624338624337*G0_1_0 + 0.0451499118165783*G0_1_1;
    A[448] = -0.0112874779541448*G0_0_1 - 0.0112874779541447*G0_1_0 - 0.0225749559082896*G0_1_1;
    A[449] = -0.0112874779541447*G0_0_1 - 0.0112874779541445*G0_1_0 - 0.0677248677248678*G0_1_1;
    A[450] = -0.0112874779541445*G0_0_1 - 0.0112874779541446*G0_1_0 - 0.0225749559082892*G0_1_1;
    A[451] = 0.0338624338624337*G0_0_1 + 0.0225749559082891*G0_0_2 + 0.0338624338624336*G0_1_0 + 0.090299823633157*G0_1_1 + 0.0677248677248674*G0_1_2;
    A[452] = 0.033862433862434*G0_0_1 + 0.0225749559082892*G0_0_2 + 0.0338624338624339*G0_1_0 + 0.135449735449736*G0_1_1 + 0.0677248677248676*G0_1_2;
    A[453] = -0.101587301587302*G0_0_1 - 0.112874779541446*G0_0_2 - 0.101587301587301*G0_1_0 - 0.270899470899471*G0_1_1 - 0.203174603174603*G0_1_2;
    A[454] = 0.0902998236331573*G0_1_1;
    A[455] = -0.0246913580246914*G0_0_0 - 0.0246913580246914*G0_0_1 - 0.0246913580246914*G0_0_2 - 0.0246913580246914*G0_1_0 - 0.0246913580246914*G0_1_1 - 0.0246913580246914*G0_1_2 - 0.0705467372134038*G0_2_0 - 0.0705467372134038*G0_2_1 - 0.0705467372134038*G0_2_2;
    A[456] = 0.00776014109347437*G0_0_0 + 0.00776014109347438*G0_1_0;
    A[457] = 0.00776014109347442*G0_0_1 + 0.00776014109347443*G0_1_1;
    A[458] = -0.017636684303351*G0_0_2 - 0.017636684303351*G0_1_2 - 0.0253968253968254*G0_2_2;
    A[459] = -0.0225749559082892*G0_0_1 - 0.0112874779541446*G0_0_2 - 0.0225749559082892*G0_1_1 - 0.0112874779541446*G0_1_2 - 0.0112874779541446*G0_2_1;
    A[460] = -0.0169312169312169*G0_0_1 - 0.0141093474426808*G0_0_2 - 0.0169312169312169*G0_1_1 - 0.0141093474426808*G0_1_2 - 0.0141093474426809*G0_2_1 - 0.0112874779541446*G0_2_2;
    A[461] = -0.0451499118165785*G0_0_1 - 0.0338624338624339*G0_0_2 - 0.0451499118165785*G0_1_1 - 0.0338624338624339*G0_1_2 - 0.0338624338624338*G0_2_1 - 0.0225749559082893*G0_2_2;
    A[462] = -0.0225749559082892*G0_0_0 - 0.0112874779541447*G0_0_2 - 0.0225749559082893*G0_1_0 - 0.0112874779541447*G0_1_2 - 0.0112874779541445*G0_2_0;
    A[463] = -0.0169312169312169*G0_0_0 - 0.0141093474426808*G0_0_2 - 0.0169312169312169*G0_1_0 - 0.0141093474426808*G0_1_2 - 0.014109347442681*G0_2_0 - 0.0112874779541447*G0_2_2;
    A[464] = -0.0451499118165785*G0_0_0 - 0.0338624338624339*G0_0_2 - 0.0451499118165785*G0_1_0 - 0.0338624338624339*G0_1_2 - 0.0338624338624338*G0_2_0 - 0.0225749559082893*G0_2_2;
    A[465] = -0.0112874779541445*G0_0_0 - 0.0112874779541446*G0_0_1 - 0.0112874779541446*G0_1_0 - 0.0112874779541447*G0_1_1;
    A[466] = -0.00282186948853627*G0_0_0 - 0.00282186948853614*G0_0_1 - 0.00282186948853625*G0_1_0 - 0.00282186948853611*G0_1_1;
    A[467] = -0.0112874779541447*G0_0_0 - 0.0112874779541447*G0_0_1 - 0.0112874779541446*G0_1_0 - 0.0112874779541447*G0_1_1;
    A[468] = 0.203174603174603*G0_0_0 + 0.203174603174603*G0_0_1 + 0.124162257495591*G0_0_2 + 0.203174603174603*G0_1_0 + 0.203174603174603*G0_1_1 + 0.124162257495591*G0_1_2 + 0.124162257495591*G0_2_0 + 0.124162257495591*G0_2_1 + 0.203174603174603*G0_2_2;
    A[469] = -0.118518518518518*G0_0_0 - 0.118518518518519*G0_0_1 - 0.160846560846561*G0_0_2 - 0.118518518518518*G0_1_0 - 0.118518518518519*G0_1_1 - 0.160846560846561*G0_1_2 - 0.0874779541446208*G0_2_0 - 0.0874779541446208*G0_2_1 - 0.22010582010582*G0_2_2;
    A[470] = 0.0451499118165785*G0_0_0 + 0.0451499118165785*G0_0_1 + 0.0790123456790123*G0_0_2 + 0.0451499118165785*G0_1_0 + 0.0451499118165785*G0_1_1 + 0.0790123456790124*G0_1_2 + 0.0338624338624338*G0_2_0 + 0.0338624338624338*G0_2_1 + 0.112874779541446*G0_2_2;
    A[471] = 0.101587301587301*G0_0_0 + 0.0225749559082893*G0_0_1 + 0.101587301587301*G0_0_2 + 0.101587301587301*G0_1_0 + 0.0225749559082893*G0_1_1 + 0.101587301587301*G0_1_2 + 0.0225749559082894*G0_2_0 + 0.101587301587301*G0_2_1 + 0.0225749559082894*G0_2_2;
    A[472] = -0.0423280423280424*G0_0_0 + 0.0169312169312169*G0_0_1 - 0.0423280423280424*G0_0_2 - 0.0423280423280423*G0_1_0 + 0.0169312169312169*G0_1_1 - 0.0423280423280423*G0_1_2 - 0.0112874779541447*G0_2_0 - 0.0423280423280423*G0_2_1 - 0.0112874779541447*G0_2_2;
    A[473] = 0.0112874779541447*G0_0_0 - 0.0225749559082892*G0_0_1 + 0.0112874779541447*G0_0_2 + 0.0112874779541446*G0_1_0 - 0.0225749559082892*G0_1_1 + 0.0112874779541446*G0_1_2 + 0.0112874779541447*G0_2_1;
    A[474] = 0.0225749559082892*G0_0_0 + 0.101587301587302*G0_0_1 + 0.101587301587302*G0_0_2 + 0.0225749559082893*G0_1_0 + 0.101587301587302*G0_1_1 + 0.101587301587302*G0_1_2 + 0.101587301587301*G0_2_0 + 0.0225749559082893*G0_2_1 + 0.0225749559082893*G0_2_2;
    A[475] = 0.016931216931217*G0_0_0 - 0.0423280423280422*G0_0_1 - 0.0423280423280422*G0_0_2 + 0.016931216931217*G0_1_0 - 0.0423280423280422*G0_1_1 - 0.0423280423280422*G0_1_2 - 0.0423280423280422*G0_2_0 - 0.0112874779541447*G0_2_1 - 0.0112874779541447*G0_2_2;
    A[476] = -0.0225749559082892*G0_0_0 + 0.0112874779541446*G0_0_1 + 0.0112874779541446*G0_0_2 - 0.0225749559082892*G0_1_0 + 0.0112874779541447*G0_1_1 + 0.0112874779541447*G0_1_2 + 0.0112874779541446*G0_2_0;
    A[477] = -0.0225749559082896*G0_0_0 - 0.0225749559082894*G0_0_1 - 0.0112874779541449*G0_0_2 - 0.0225749559082895*G0_1_0 - 0.0225749559082894*G0_1_1 - 0.0112874779541449*G0_1_2 - 0.0112874779541445*G0_2_0 - 0.0112874779541447*G0_2_1;
    A[478] = -0.0225749559082895*G0_0_0 - 0.0225749559082895*G0_0_1 - 0.0112874779541448*G0_0_2 - 0.0225749559082894*G0_1_0 - 0.0225749559082894*G0_1_1 - 0.0112874779541448*G0_1_2 - 0.0112874779541445*G0_2_0 - 0.0112874779541444*G0_2_1;
    A[479] = -0.0677248677248677*G0_0_0 - 0.0677248677248675*G0_0_1 - 0.0564373897707231*G0_0_2 - 0.0677248677248676*G0_1_0 - 0.0677248677248675*G0_1_1 - 0.056437389770723*G0_1_2 - 0.0564373897707233*G0_2_0 - 0.0564373897707234*G0_2_1 - 0.0451499118165787*G0_2_2;
    A[480] = -0.0677248677248681*G0_0_0 - 0.270899470899471*G0_0_1 - 0.169312169312169*G0_0_2 - 0.067724867724868*G0_1_0 - 0.270899470899471*G0_1_1 - 0.169312169312169*G0_1_2 - 0.0790123456790122*G0_2_0 - 0.169312169312169*G0_2_1 - 0.0677248677248679*G0_2_2;
    A[481] = 0.0225749559082894*G0_0_0 + 0.0902998236331572*G0_0_1 + 0.0564373897707231*G0_0_2 + 0.0225749559082894*G0_1_0 + 0.0902998236331571*G0_1_1 + 0.0564373897707231*G0_1_2 + 0.0112874779541445*G0_2_0 + 0.056437389770723*G0_2_1 + 0.0225749559082892*G0_2_2;
    A[482] = 0.0677248677248677*G0_0_0 + 0.135449735449735*G0_0_1 + 0.101587301587302*G0_0_2 + 0.0677248677248677*G0_1_0 + 0.135449735449735*G0_1_1 + 0.101587301587302*G0_1_2 + 0.0564373897707234*G0_2_0 + 0.101587301587302*G0_2_1 + 0.0677248677248678*G0_2_2;
    A[483] = -0.270899470899471*G0_0_0 - 0.0677248677248677*G0_0_1 - 0.169312169312169*G0_0_2 - 0.270899470899471*G0_1_0 - 0.0677248677248679*G0_1_1 - 0.169312169312169*G0_1_2 - 0.169312169312169*G0_2_0 - 0.0790123456790123*G0_2_1 - 0.0677248677248677*G0_2_2;
    A[484] = 0.0902998236331568*G0_0_0 + 0.0225749559082895*G0_0_1 + 0.056437389770723*G0_0_2 + 0.090299823633157*G0_1_0 + 0.0225749559082895*G0_1_1 + 0.056437389770723*G0_1_2 + 0.056437389770723*G0_2_0 + 0.0112874779541447*G0_2_1 + 0.0225749559082894*G0_2_2;
    A[485] = 0.135449735449735*G0_0_0 + 0.0677248677248676*G0_0_1 + 0.101587301587302*G0_0_2 + 0.135449735449735*G0_1_0 + 0.0677248677248675*G0_1_1 + 0.101587301587302*G0_1_2 + 0.101587301587302*G0_2_0 + 0.0564373897707234*G0_2_1 + 0.0677248677248677*G0_2_2;
    A[486] = -0.135449735449735*G0_0_0 - 0.135449735449735*G0_0_1 - 0.0338624338624339*G0_0_2 - 0.135449735449735*G0_1_0 - 0.135449735449735*G0_1_1 - 0.0338624338624339*G0_1_2 - 0.0338624338624341*G0_2_0 - 0.0338624338624339*G0_2_1 - 0.0451499118165786*G0_2_2;
    A[487] = 0.045149911816578*G0_0_0 + 0.0451499118165783*G0_0_1 + 0.0112874779541448*G0_0_2 + 0.0451499118165782*G0_1_0 + 0.0451499118165783*G0_1_1 + 0.0112874779541448*G0_1_2 + 0.0112874779541447*G0_2_0 + 0.0112874779541447*G0_2_1;
    A[488] = 0.0451499118165787*G0_0_0 + 0.0451499118165785*G0_0_1 + 0.0112874779541448*G0_0_2 + 0.0451499118165786*G0_1_0 + 0.0451499118165784*G0_1_1 + 0.0112874779541448*G0_1_2 + 0.0112874779541446*G0_2_0 + 0.0112874779541446*G0_2_1;
    A[489] = 0.0902998236331577*G0_0_0 + 0.0902998236331572*G0_0_1 + 0.090299823633157*G0_0_2 + 0.0902998236331575*G0_1_0 + 0.0902998236331572*G0_1_1 + 0.0902998236331569*G0_1_2 + 0.0902998236331568*G0_2_0 + 0.0902998236331567*G0_2_1 + 0.0902998236331572*G0_2_2;
    A[490] = 0.0202821869488536*G0_0_0 + 0.0202821869488536*G0_0_1 + 0.0202821869488536*G0_0_2 + 0.0202821869488536*G0_1_0 + 0.0202821869488536*G0_1_1 + 0.0202821869488536*G0_1_2 + 0.0529100529100528*G0_2_0 + 0.0529100529100529*G0_2_1 + 0.0529100529100528*G0_2_2;
    A[491] = 0.0051146384479718*G0_0_0 + 0.00511463844797177*G0_1_0;
    A[492] = 0.00511463844797175*G0_0_1 + 0.00511463844797176*G0_1_1;
    A[493] = 0.0326278659611992*G0_0_2 + 0.0326278659611992*G0_1_2 + 0.0529100529100528*G0_2_2;
    A[494] = -0.016931216931217*G0_0_1 - 0.00282186948853626*G0_0_2 - 0.0169312169312169*G0_1_1 - 0.00282186948853626*G0_1_2 - 0.00282186948853615*G0_2_1;
    A[495] = 0.0211640211640212*G0_0_1 + 0.0105820105820107*G0_0_2 + 0.0211640211640213*G0_1_1 + 0.0105820105820108*G0_1_2 + 0.0105820105820107*G0_2_1 - 0.00282186948853619*G0_2_2;
    A[496] = 0.0902998236331567*G0_0_1 + 0.0592592592592593*G0_0_2 + 0.0902998236331567*G0_1_1 + 0.0592592592592592*G0_1_2 + 0.059259259259259*G0_2_1 + 0.0169312169312169*G0_2_2;
    A[497] = -0.0169312169312168*G0_0_0 - 0.00282186948853604*G0_0_2 - 0.0169312169312168*G0_1_0 - 0.00282186948853606*G0_1_2 - 0.00282186948853617*G0_2_0;
    A[498] = 0.0211640211640212*G0_0_0 + 0.0105820105820105*G0_0_2 + 0.0211640211640212*G0_1_0 + 0.0105820105820106*G0_1_2 + 0.0105820105820109*G0_2_0 - 0.00282186948853589*G0_2_2;
    A[499] = 0.0902998236331568*G0_0_0 + 0.0592592592592592*G0_0_2 + 0.0902998236331568*G0_1_0 + 0.0592592592592592*G0_1_2 + 0.059259259259259*G0_2_0 + 0.0169312169312169*G0_2_2;
    A[500] = -0.00282186948853601*G0_0_0 - 0.00282186948853601*G0_0_1 - 0.00282186948853598*G0_1_0 - 0.00282186948853603*G0_1_1;
    A[501] = -0.00917107583774251*G0_0_0 - 0.00917107583774257*G0_0_1 - 0.00917107583774257*G0_1_0 - 0.00917107583774261*G0_1_1;
    A[502] = -0.00282186948853624*G0_0_0 - 0.00282186948853613*G0_0_1 - 0.00282186948853623*G0_1_0 - 0.00282186948853612*G0_1_1;
    A[503] = -0.118518518518518*G0_0_0 - 0.118518518518518*G0_0_1 - 0.0874779541446208*G0_0_2 - 0.118518518518519*G0_1_0 - 0.118518518518519*G0_1_1 - 0.0874779541446208*G0_1_2 - 0.160846560846561*G0_2_0 - 0.160846560846561*G0_2_1 - 0.22010582010582*G0_2_2;
    A[504] = 0.249735449735449*G0_0_0 + 0.24973544973545*G0_0_1 + 0.167195767195767*G0_0_2 + 0.24973544973545*G0_1_0 + 0.24973544973545*G0_1_1 + 0.167195767195767*G0_1_2 + 0.167195767195767*G0_2_0 + 0.167195767195767*G0_2_1 + 0.334391534391534*G0_2_2;
    A[505] = -0.0902998236331567*G0_0_0 - 0.0902998236331568*G0_0_1 - 0.132627865961199*G0_0_2 - 0.0902998236331568*G0_1_0 - 0.0902998236331567*G0_1_1 - 0.132627865961199*G0_1_2 - 0.059259259259259*G0_2_0 - 0.059259259259259*G0_2_1 - 0.22010582010582*G0_2_2;
    A[506] = -0.0423280423280423*G0_0_0 - 0.0112874779541446*G0_0_1 - 0.0423280423280423*G0_0_2 - 0.0423280423280424*G0_1_0 - 0.0112874779541446*G0_1_1 - 0.0423280423280424*G0_1_2 + 0.0169312169312168*G0_2_0 - 0.0423280423280423*G0_2_1 + 0.0169312169312168*G0_2_2;
    A[507] = -0.0134038800705468*G0_0_0 - 0.00282186948853633*G0_0_1 - 0.0134038800705468*G0_0_2 - 0.0134038800705468*G0_1_0 - 0.00282186948853631*G0_1_1 - 0.0134038800705468*G0_1_2 - 0.00282186948853619*G0_2_0 - 0.0134038800705468*G0_2_1 - 0.00282186948853617*G0_2_2;
    A[508] = 0.00282186948853625*G0_0_0 - 0.0112874779541445*G0_0_1 + 0.00282186948853625*G0_0_2 + 0.00282186948853624*G0_1_0 - 0.0112874779541445*G0_1_1 + 0.00282186948853624*G0_1_2 + 0.00282186948853617*G0_2_1;
    A[509] = -0.0112874779541446*G0_0_0 - 0.0423280423280423*G0_0_1 - 0.0423280423280424*G0_0_2 - 0.0112874779541445*G0_1_0 - 0.0423280423280423*G0_1_1 - 0.0423280423280423*G0_1_2 - 0.0423280423280423*G0_2_0 + 0.0169312169312168*G0_2_1 + 0.0169312169312168*G0_2_2;
    A[510] = -0.00282186948853631*G0_0_0 - 0.0134038800705468*G0_0_1 - 0.0134038800705468*G0_0_2 - 0.00282186948853635*G0_1_0 - 0.0134038800705469*G0_1_1 - 0.0134038800705468*G0_1_2 - 0.0134038800705468*G0_2_0 - 0.00282186948853605*G0_2_1 - 0.00282186948853604*G0_2_2;
    A[511] = -0.0112874779541445*G0_0_0 + 0.00282186948853605*G0_0_1 + 0.00282186948853602*G0_0_2 - 0.0112874779541445*G0_1_0 + 0.00282186948853607*G0_1_1 + 0.00282186948853604*G0_1_2 + 0.00282186948853621*G0_2_0;
    A[512] = 0.0169312169312169*G0_0_0 + 0.016931216931217*G0_0_1 - 0.00282186948853588*G0_0_2 + 0.0169312169312166*G0_1_0 + 0.0169312169312169*G0_1_1 - 0.00282186948853602*G0_1_2 - 0.00282186948853615*G0_2_0 - 0.00282186948853586*G0_2_1;
    A[513] = 0.016931216931217*G0_0_0 + 0.0169312169312169*G0_0_1 - 0.00282186948853633*G0_0_2 + 0.0169312169312171*G0_1_0 + 0.0169312169312169*G0_1_1 - 0.00282186948853631*G0_1_2 - 0.00282186948853624*G0_2_0 - 0.00282186948853649*G0_2_1;
    A[514] = 0.0846560846560846*G0_0_0 + 0.0846560846560843*G0_0_1 + 0.0423280423280422*G0_0_2 + 0.0846560846560845*G0_1_0 + 0.0846560846560842*G0_1_1 + 0.042328042328042*G0_1_2 + 0.0423280423280423*G0_2_0 + 0.0423280423280424*G0_2_1 + 0.0225749559082893*G0_2_2;
    A[515] = 0.118518518518519*G0_0_0 + 0.0677248677248679*G0_0_1 + 0.160846560846561*G0_0_2 + 0.118518518518519*G0_1_0 + 0.0677248677248679*G0_1_1 + 0.160846560846561*G0_1_2 + 0.0253968253968253*G0_2_0 + 0.160846560846561*G0_2_1 - 0.0169312169312166*G0_2_2;
    A[516] = -0.016931216931217*G0_0_0 + 0.0677248677248675*G0_0_1 + 0.00282186948853603*G0_0_2 - 0.0169312169312171*G0_1_0 + 0.0677248677248675*G0_1_1 + 0.002821869488536*G0_1_2 + 0.00282186948853624*G0_2_0 + 0.00282186948853604*G0_2_1 + 0.0056437389770724*G0_2_2;
    A[517] = -0.0846560846560846*G0_0_0 - 0.270899470899471*G0_0_1 - 0.177777777777778*G0_0_2 - 0.0846560846560845*G0_1_0 - 0.270899470899471*G0_1_1 - 0.177777777777778*G0_1_2 - 0.0423280423280423*G0_2_0 - 0.177777777777778*G0_2_1 - 0.0169312169312171*G0_2_2;
    A[518] = 0.0677248677248677*G0_0_0 + 0.118518518518519*G0_0_1 + 0.160846560846561*G0_0_2 + 0.0677248677248678*G0_1_0 + 0.118518518518519*G0_1_1 + 0.160846560846561*G0_1_2 + 0.160846560846561*G0_2_0 + 0.0253968253968254*G0_2_1 - 0.0169312169312168*G0_2_2;
    A[519] = 0.0677248677248676*G0_0_0 - 0.016931216931217*G0_0_1 + 0.00282186948853642*G0_0_2 + 0.0677248677248675*G0_1_0 - 0.016931216931217*G0_1_1 + 0.0028218694885364*G0_1_2 + 0.00282186948853601*G0_2_0 + 0.00282186948853582*G0_2_1 + 0.00564373897707204*G0_2_2;
    A[520] = -0.270899470899471*G0_0_0 - 0.0846560846560843*G0_0_1 - 0.177777777777778*G0_0_2 - 0.270899470899471*G0_1_0 - 0.0846560846560841*G0_1_1 - 0.177777777777778*G0_1_2 - 0.177777777777778*G0_2_0 - 0.0423280423280425*G0_2_1 - 0.016931216931217*G0_2_2;
    A[521] = 0.0225749559082892*G0_0_0 + 0.0225749559082893*G0_0_1 - 0.019753086419753*G0_0_2 + 0.0225749559082893*G0_1_0 + 0.0225749559082893*G0_1_1 - 0.0197530864197531*G0_1_2 - 0.0197530864197529*G0_2_0 - 0.019753086419753*G0_2_1 + 0.0225749559082893*G0_2_2;
    A[522] = 0.0225749559082891*G0_0_0 + 0.0225749559082893*G0_0_1 + 0.00282186948853588*G0_0_2 + 0.0225749559082891*G0_1_0 + 0.0225749559082894*G0_1_1 + 0.00282186948853602*G0_1_2 + 0.002821869488536*G0_2_0 + 0.00282186948853604*G0_2_1;
    A[523] = 0.0225749559082892*G0_0_0 + 0.0225749559082892*G0_0_1 + 0.00282186948853629*G0_0_2 + 0.0225749559082893*G0_1_0 + 0.0225749559082892*G0_1_1 + 0.00282186948853627*G0_1_2 + 0.00282186948853627*G0_2_0 + 0.00282186948853621*G0_2_1;
    A[524] = -0.135449735449735*G0_0_0 - 0.135449735449736*G0_0_1 - 0.0225749559082892*G0_0_2 - 0.135449735449735*G0_1_0 - 0.135449735449736*G0_1_1 - 0.022574955908289*G0_1_2 - 0.0225749559082892*G0_2_0 - 0.0225749559082889*G0_2_1 - 0.0451499118165785*G0_2_2;
    A[525] = -0.00776014109347437*G0_0_0 - 0.00776014109347439*G0_0_1 - 0.00776014109347438*G0_0_2 - 0.00776014109347437*G0_1_0 - 0.00776014109347439*G0_1_1 - 0.00776014109347439*G0_1_2 - 0.0253968253968253*G0_2_0 - 0.0253968253968254*G0_2_1 - 0.0253968253968254*G0_2_2;
    A[526] = 0.00776014109347437*G0_0_0 + 0.00776014109347437*G0_1_0;
    A[527] = 0.00776014109347448*G0_0_1 + 0.00776014109347449*G0_1_1;
    A[528] = -0.0458553791887125*G0_0_2 - 0.0458553791887125*G0_1_2 - 0.0705467372134038*G0_2_2;
    A[529] = -0.0451499118165785*G0_0_1 - 0.0112874779541446*G0_0_2 - 0.0451499118165786*G0_1_1 - 0.0112874779541446*G0_1_2 - 0.0112874779541448*G0_2_1;
    A[530] = 0.090299823633157*G0_0_1 + 0.0310405643738976*G0_0_2 + 0.090299823633157*G0_1_1 + 0.0310405643738975*G0_1_2 + 0.0310405643738977*G0_2_1 - 0.0112874779541448*G0_2_2;
    A[531] = -0.158024691358024*G0_0_1 - 0.0790123456790123*G0_0_2 - 0.158024691358024*G0_1_1 - 0.0790123456790122*G0_1_2 - 0.0790123456790122*G0_2_1 + 0.0225749559082894*G0_2_2;
    A[532] = -0.0451499118165784*G0_0_0 - 0.0112874779541447*G0_0_2 - 0.0451499118165785*G0_1_0 - 0.0112874779541447*G0_1_2 - 0.0112874779541446*G0_2_0;
    A[533] = 0.0902998236331568*G0_0_0 + 0.0310405643738977*G0_0_2 + 0.0902998236331568*G0_1_0 + 0.0310405643738977*G0_1_2 + 0.0310405643738974*G0_2_0 - 0.0112874779541449*G0_2_2;
    A[534] = -0.158024691358024*G0_0_0 - 0.0790123456790123*G0_0_2 - 0.158024691358024*G0_1_0 - 0.0790123456790122*G0_1_2 - 0.0790123456790121*G0_2_0 + 0.0225749559082893*G0_2_2;
    A[535] = -0.0112874779541446*G0_0_0 - 0.0112874779541447*G0_0_1 - 0.0112874779541446*G0_1_0 - 0.0112874779541447*G0_1_1;
    A[536] = -0.00282186948853623*G0_0_0 - 0.00282186948853611*G0_0_1 - 0.00282186948853618*G0_1_0 - 0.00282186948853607*G0_1_1;
    A[537] = -0.0112874779541446*G0_0_0 - 0.0112874779541447*G0_0_1 - 0.0112874779541446*G0_1_0 - 0.0112874779541447*G0_1_1;
    A[538] = 0.0451499118165785*G0_0_0 + 0.0451499118165785*G0_0_1 + 0.0338624338624338*G0_0_2 + 0.0451499118165785*G0_1_0 + 0.0451499118165785*G0_1_1 + 0.0338624338624338*G0_1_2 + 0.0790123456790123*G0_2_0 + 0.0790123456790124*G0_2_1 + 0.112874779541446*G0_2_2;
    A[539] = -0.0902998236331568*G0_0_0 - 0.0902998236331568*G0_0_1 - 0.059259259259259*G0_0_2 - 0.0902998236331568*G0_1_0 - 0.0902998236331567*G0_1_1 - 0.059259259259259*G0_1_2 - 0.132627865961199*G0_2_0 - 0.132627865961199*G0_2_1 - 0.22010582010582*G0_2_2;
    A[540] = 0.158024691358025*G0_0_0 + 0.158024691358024*G0_0_1 + 0.0790123456790121*G0_0_2 + 0.158024691358024*G0_1_0 + 0.158024691358024*G0_1_1 + 0.0790123456790121*G0_1_2 + 0.0790123456790121*G0_2_0 + 0.0790123456790121*G0_2_1 + 0.203174603174603*G0_2_2;
    A[541] = 0.0112874779541447*G0_0_0 + 0.0112874779541447*G0_0_2 + 0.0112874779541447*G0_1_0 + 0.0112874779541447*G0_1_2 - 0.0225749559082891*G0_2_0 + 0.0112874779541446*G0_2_1 - 0.0225749559082891*G0_2_2;
    A[542] = 0.00282186948853612*G0_0_0 + 0.00282186948853609*G0_0_2 + 0.00282186948853613*G0_1_0 + 0.0028218694885361*G0_1_2 - 0.0112874779541446*G0_2_0 + 0.00282186948853623*G0_2_1 - 0.0112874779541446*G0_2_2;
    A[543] = 0.0112874779541446*G0_0_0 + 0.0112874779541446*G0_0_2 + 0.0112874779541446*G0_1_0 + 0.0112874779541446*G0_1_2 + 0.0112874779541445*G0_2_1;
    A[544] = 0.0112874779541447*G0_0_1 + 0.0112874779541447*G0_0_2 + 0.0112874779541447*G0_1_1 + 0.0112874779541447*G0_1_2 + 0.0112874779541446*G0_2_0 - 0.0225749559082891*G0_2_1 - 0.0225749559082891*G0_2_2;
    A[545] = 0.00282186948853617*G0_0_1 + 0.00282186948853615*G0_0_2 + 0.00282186948853615*G0_1_1 + 0.00282186948853614*G0_1_2 + 0.00282186948853622*G0_2_0 - 0.0112874779541447*G0_2_1 - 0.0112874779541447*G0_2_2;
    A[546] = 0.0112874779541447*G0_0_1 + 0.0112874779541447*G0_0_2 + 0.0112874779541448*G0_1_1 + 0.0112874779541447*G0_1_2 + 0.0112874779541446*G0_2_0;
    A[547] = 0.0225749559082891*G0_0_0 + 0.0225749559082893*G0_0_1 - 0.0112874779541447*G0_0_2 + 0.0225749559082892*G0_1_0 + 0.0225749559082892*G0_1_1 - 0.0112874779541447*G0_1_2 - 0.0112874779541447*G0_2_0 - 0.0112874779541448*G0_2_1;
    A[548] = 0.022574955908289*G0_0_0 + 0.022574955908289*G0_0_1 - 0.0112874779541447*G0_0_2 + 0.0225749559082889*G0_1_0 + 0.0225749559082891*G0_1_1 - 0.0112874779541447*G0_1_2 - 0.0112874779541447*G0_2_0 - 0.0112874779541444*G0_2_1;
    A[549] = -0.112874779541446*G0_0_0 - 0.112874779541446*G0_0_1 - 0.0112874779541446*G0_0_2 - 0.112874779541446*G0_1_0 - 0.112874779541446*G0_1_1 - 0.0112874779541445*G0_1_2 - 0.0112874779541446*G0_2_0 - 0.0112874779541448*G0_2_1 - 0.0451499118165786*G0_2_2;
    A[550] = -0.0225749559082894*G0_0_0 - 0.0338624338624339*G0_0_2 - 0.0225749559082893*G0_1_0 - 0.0338624338624339*G0_1_2 + 0.0112874779541445*G0_2_0 - 0.0338624338624341*G0_2_1 + 0.0677248677248675*G0_2_2;
    A[551] = -0.0225749559082889*G0_0_0 - 0.0338624338624336*G0_0_2 - 0.0225749559082889*G0_1_0 - 0.0338624338624335*G0_1_2 + 0.0112874779541447*G0_2_0 - 0.0338624338624336*G0_2_1 + 0.0225749559082893*G0_2_2;
    A[552] = 0.112874779541446*G0_0_0 + 0.101587301587302*G0_0_2 + 0.112874779541446*G0_1_0 + 0.101587301587301*G0_1_2 + 0.0112874779541446*G0_2_0 + 0.101587301587301*G0_2_1 - 0.0677248677248677*G0_2_2;
    A[553] = -0.0225749559082893*G0_0_1 - 0.033862433862434*G0_0_2 - 0.0225749559082893*G0_1_1 - 0.033862433862434*G0_1_2 - 0.0338624338624341*G0_2_0 + 0.0112874779541445*G0_2_1 + 0.0677248677248675*G0_2_2;
    A[554] = -0.0225749559082893*G0_0_1 - 0.033862433862434*G0_0_2 - 0.0225749559082892*G0_1_1 - 0.033862433862434*G0_1_2 - 0.0338624338624337*G0_2_0 + 0.0112874779541448*G0_2_1 + 0.0225749559082894*G0_2_2;
    A[555] = 0.112874779541446*G0_0_1 + 0.101587301587302*G0_0_2 + 0.112874779541446*G0_1_1 + 0.101587301587302*G0_1_2 + 0.101587301587302*G0_2_0 + 0.0112874779541448*G0_2_1 - 0.0677248677248676*G0_2_2;
    A[556] = 0.0112874779541447*G0_0_2 + 0.0112874779541447*G0_1_2 + 0.0112874779541444*G0_2_0 + 0.0112874779541445*G0_2_1 - 0.0451499118165785*G0_2_2;
    A[557] = 0.0112874779541448*G0_0_2 + 0.0112874779541447*G0_1_2 + 0.0112874779541447*G0_2_0 + 0.0112874779541447*G0_2_1;
    A[558] = 0.0112874779541447*G0_0_2 + 0.0112874779541447*G0_1_2 + 0.0112874779541446*G0_2_0 + 0.0112874779541446*G0_2_1;
    A[559] = 0.090299823633157*G0_2_2;
    A[560] = -0.0246913580246913*G0_0_0 - 0.0246913580246914*G0_0_1 - 0.0246913580246914*G0_0_2 - 0.0705467372134038*G0_1_0 - 0.0705467372134038*G0_1_1 - 0.0705467372134038*G0_1_2 - 0.0246913580246913*G0_2_0 - 0.0246913580246914*G0_2_1 - 0.0246913580246914*G0_2_2;
    A[561] = 0.00776014109347436*G0_0_0 + 0.00776014109347436*G0_2_0;
    A[562] = -0.0176366843033509*G0_0_1 - 0.0253968253968253*G0_1_1 - 0.0176366843033509*G0_2_1;
    A[563] = 0.0077601410934744*G0_0_2 + 0.00776014109347441*G0_2_2;
    A[564] = -0.0338624338624337*G0_0_1 - 0.0451499118165783*G0_0_2 - 0.022574955908289*G0_1_1 - 0.0338624338624336*G0_1_2 - 0.0338624338624337*G0_2_1 - 0.0451499118165783*G0_2_2;
    A[565] = -0.0141093474426808*G0_0_1 - 0.0169312169312169*G0_0_2 - 0.0112874779541447*G0_1_1 - 0.0141093474426807*G0_1_2 - 0.0141093474426808*G0_2_1 - 0.0169312169312169*G0_2_2;
    A[566] = -0.0112874779541447*G0_0_1 - 0.0225749559082893*G0_0_2 - 0.0112874779541447*G0_1_2 - 0.0112874779541447*G0_2_1 - 0.0225749559082893*G0_2_2;
    A[567] = -0.0112874779541447*G0_0_0 - 0.0112874779541447*G0_0_2 - 0.0112874779541447*G0_2_0 - 0.0112874779541447*G0_2_2;
    A[568] = -0.00282186948853602*G0_0_0 - 0.00282186948853615*G0_0_2 - 0.00282186948853599*G0_2_0 - 0.00282186948853613*G0_2_2;
    A[569] = -0.0112874779541447*G0_0_0 - 0.0112874779541446*G0_0_2 - 0.0112874779541447*G0_2_0 - 0.0112874779541446*G0_2_2;
    A[570] = -0.0225749559082891*G0_0_0 - 0.0112874779541446*G0_0_1 - 0.0112874779541444*G0_1_0 - 0.0225749559082891*G0_2_0 - 0.0112874779541447*G0_2_1;
    A[571] = -0.0169312169312169*G0_0_0 - 0.0141093474426806*G0_0_1 - 0.0141093474426809*G0_1_0 - 0.0112874779541446*G0_1_1 - 0.0169312169312169*G0_2_0 - 0.0141093474426806*G0_2_1;
    A[572] = -0.0451499118165784*G0_0_0 - 0.0338624338624339*G0_0_1 - 0.0338624338624337*G0_1_0 - 0.0225749559082892*G0_1_1 - 0.0451499118165784*G0_2_0 - 0.0338624338624339*G0_2_1;
    A[573] = 0.101587301587301*G0_0_0 + 0.101587301587301*G0_0_1 + 0.0225749559082894*G0_0_2 + 0.0225749559082893*G0_1_0 + 0.0225749559082893*G0_1_1 + 0.101587301587301*G0_1_2 + 0.101587301587302*G0_2_0 + 0.101587301587301*G0_2_1 + 0.0225749559082894*G0_2_2;
    A[574] = -0.0423280423280423*G0_0_0 - 0.0423280423280424*G0_0_1 + 0.0169312169312168*G0_0_2 - 0.0112874779541446*G0_1_0 - 0.0112874779541446*G0_1_1 - 0.0423280423280423*G0_1_2 - 0.0423280423280423*G0_2_0 - 0.0423280423280424*G0_2_1 + 0.0169312169312168*G0_2_2;
    A[575] = 0.0112874779541447*G0_0_0 + 0.0112874779541447*G0_0_1 - 0.0225749559082891*G0_0_2 + 0.0112874779541446*G0_1_2 + 0.0112874779541447*G0_2_0 + 0.0112874779541447*G0_2_1 - 0.0225749559082891*G0_2_2;
    A[576] = 0.203174603174603*G0_0_0 + 0.124162257495591*G0_0_1 + 0.203174603174603*G0_0_2 + 0.124162257495591*G0_1_0 + 0.203174603174603*G0_1_1 + 0.124162257495591*G0_1_2 + 0.203174603174603*G0_2_0 + 0.124162257495591*G0_2_1 + 0.203174603174603*G0_2_2;
    A[577] = -0.118518518518518*G0_0_0 - 0.160846560846561*G0_0_1 - 0.118518518518518*G0_0_2 - 0.0874779541446207*G0_1_0 - 0.22010582010582*G0_1_1 - 0.0874779541446206*G0_1_2 - 0.118518518518518*G0_2_0 - 0.160846560846561*G0_2_1 - 0.118518518518518*G0_2_2;
    A[578] = 0.0451499118165784*G0_0_0 + 0.0790123456790122*G0_0_1 + 0.0451499118165784*G0_0_2 + 0.0338624338624337*G0_1_0 + 0.112874779541446*G0_1_1 + 0.0338624338624337*G0_1_2 + 0.0451499118165784*G0_2_0 + 0.0790123456790122*G0_2_1 + 0.0451499118165784*G0_2_2;
    A[579] = 0.0225749559082892*G0_0_0 + 0.101587301587301*G0_0_1 + 0.101587301587301*G0_0_2 + 0.101587301587301*G0_1_0 + 0.0225749559082891*G0_1_1 + 0.0225749559082892*G0_1_2 + 0.0225749559082892*G0_2_0 + 0.101587301587301*G0_2_1 + 0.101587301587301*G0_2_2;
    A[580] = 0.0169312169312169*G0_0_0 - 0.0423280423280421*G0_0_1 - 0.0423280423280421*G0_0_2 - 0.0423280423280422*G0_1_0 - 0.0112874779541447*G0_1_1 - 0.0112874779541447*G0_1_2 + 0.016931216931217*G0_2_0 - 0.0423280423280421*G0_2_1 - 0.0423280423280421*G0_2_2;
    A[581] = -0.0225749559082892*G0_0_0 + 0.0112874779541446*G0_0_1 + 0.0112874779541446*G0_0_2 + 0.0112874779541446*G0_1_0 - 0.0225749559082892*G0_2_0 + 0.0112874779541447*G0_2_1 + 0.0112874779541447*G0_2_2;
    A[582] = -0.0225749559082894*G0_0_0 - 0.0112874779541447*G0_0_1 - 0.0225749559082894*G0_0_2 - 0.0112874779541446*G0_1_0 - 0.0112874779541445*G0_1_2 - 0.0225749559082894*G0_2_0 - 0.0112874779541447*G0_2_1 - 0.0225749559082893*G0_2_2;
    A[583] = -0.0677248677248677*G0_0_0 - 0.0564373897707232*G0_0_1 - 0.0677248677248676*G0_0_2 - 0.0564373897707228*G0_1_0 - 0.0451499118165784*G0_1_1 - 0.056437389770723*G0_1_2 - 0.0677248677248677*G0_2_0 - 0.0564373897707232*G0_2_1 - 0.0677248677248677*G0_2_2;
    A[584] = -0.0225749559082892*G0_0_0 - 0.0112874779541444*G0_0_1 - 0.0225749559082891*G0_0_2 - 0.0112874779541448*G0_1_0 - 0.0112874779541447*G0_1_2 - 0.0225749559082891*G0_2_0 - 0.0112874779541443*G0_2_1 - 0.022574955908289*G0_2_2;
    A[585] = -0.0677248677248679*G0_0_0 - 0.169312169312169*G0_0_1 - 0.27089947089947*G0_0_2 - 0.0790123456790122*G0_1_0 - 0.0677248677248677*G0_1_1 - 0.169312169312169*G0_1_2 - 0.0677248677248679*G0_2_0 - 0.169312169312169*G0_2_1 - 0.270899470899471*G0_2_2;
    A[586] = 0.0677248677248676*G0_0_0 + 0.101587301587301*G0_0_1 + 0.135449735449735*G0_0_2 + 0.0564373897707227*G0_1_0 + 0.0677248677248674*G0_1_1 + 0.101587301587301*G0_1_2 + 0.0677248677248677*G0_2_0 + 0.101587301587301*G0_2_1 + 0.135449735449735*G0_2_2;
    A[587] = 0.0225749559082893*G0_0_0 + 0.0564373897707231*G0_0_1 + 0.090299823633157*G0_0_2 + 0.0112874779541448*G0_1_0 + 0.0225749559082893*G0_1_1 + 0.0564373897707232*G0_1_2 + 0.0225749559082892*G0_2_0 + 0.0564373897707232*G0_2_1 + 0.090299823633157*G0_2_2;
    A[588] = -0.135449735449735*G0_0_0 - 0.0338624338624339*G0_0_1 - 0.135449735449735*G0_0_2 - 0.0338624338624339*G0_1_0 - 0.0451499118165785*G0_1_1 - 0.0338624338624337*G0_1_2 - 0.135449735449735*G0_2_0 - 0.0338624338624339*G0_2_1 - 0.135449735449735*G0_2_2;
    A[589] = 0.0451499118165784*G0_0_0 + 0.0112874779541448*G0_0_1 + 0.0451499118165784*G0_0_2 + 0.0112874779541445*G0_1_0 + 0.0112874779541448*G0_1_2 + 0.0451499118165784*G0_2_0 + 0.0112874779541448*G0_2_1 + 0.0451499118165783*G0_2_2;
    A[590] = 0.0451499118165783*G0_0_0 + 0.0112874779541445*G0_0_1 + 0.0451499118165784*G0_0_2 + 0.0112874779541447*G0_1_0 + 0.0112874779541446*G0_1_2 + 0.0451499118165783*G0_2_0 + 0.0112874779541444*G0_2_1 + 0.0451499118165785*G0_2_2;
    A[591] = -0.27089947089947*G0_0_0 - 0.169312169312169*G0_0_1 - 0.0677248677248675*G0_0_2 - 0.169312169312169*G0_1_0 - 0.0677248677248675*G0_1_1 - 0.0790123456790123*G0_1_2 - 0.27089947089947*G0_2_0 - 0.169312169312169*G0_2_1 - 0.0677248677248675*G0_2_2;
    A[592] = 0.0902998236331564*G0_0_0 + 0.0564373897707228*G0_0_1 + 0.0225749559082893*G0_0_2 + 0.0564373897707229*G0_1_0 + 0.0225749559082893*G0_1_1 + 0.0112874779541445*G0_1_2 + 0.0902998236331564*G0_2_0 + 0.0564373897707227*G0_2_1 + 0.0225749559082893*G0_2_2;
    A[593] = 0.135449735449735*G0_0_0 + 0.101587301587301*G0_0_1 + 0.0677248677248675*G0_0_2 + 0.101587301587302*G0_1_0 + 0.0677248677248675*G0_1_1 + 0.0564373897707229*G0_1_2 + 0.135449735449735*G0_2_0 + 0.101587301587301*G0_2_1 + 0.0677248677248675*G0_2_2;
    A[594] = 0.0902998236331573*G0_0_0 + 0.0902998236331569*G0_0_1 + 0.0902998236331567*G0_0_2 + 0.0902998236331569*G0_1_0 + 0.0902998236331568*G0_1_1 + 0.0902998236331571*G0_1_2 + 0.0902998236331573*G0_2_0 + 0.090299823633157*G0_2_1 + 0.0902998236331566*G0_2_2;
    A[595] = 0.0202821869488536*G0_0_0 + 0.0202821869488536*G0_0_1 + 0.0202821869488536*G0_0_2 + 0.0529100529100528*G0_1_0 + 0.0529100529100528*G0_1_1 + 0.0529100529100529*G0_1_2 + 0.0202821869488536*G0_2_0 + 0.0202821869488536*G0_2_1 + 0.0202821869488536*G0_2_2;
    A[596] = 0.00511463844797176*G0_0_0 + 0.00511463844797179*G0_2_0;
    A[597] = 0.0326278659611993*G0_0_1 + 0.0529100529100528*G0_1_1 + 0.0326278659611993*G0_2_1;
    A[598] = 0.00511463844797178*G0_0_2 + 0.00511463844797179*G0_2_2;
    A[599] = 0.0592592592592593*G0_0_1 + 0.0902998236331569*G0_0_2 + 0.0169312169312168*G0_1_1 + 0.0592592592592589*G0_1_2 + 0.0592592592592593*G0_2_1 + 0.0902998236331569*G0_2_2;
    A[600] = 0.0105820105820105*G0_0_1 + 0.0211640211640211*G0_0_2 - 0.00282186948853623*G0_1_1 + 0.0105820105820105*G0_1_2 + 0.0105820105820105*G0_2_1 + 0.021164021164021*G0_2_2;
    A[601] = -0.00282186948853613*G0_0_1 - 0.0169312169312169*G0_0_2 - 0.00282186948853614*G0_1_2 - 0.0028218694885361*G0_2_1 - 0.0169312169312169*G0_2_2;
    A[602] = -0.00282186948853607*G0_0_0 - 0.0028218694885361*G0_0_2 - 0.00282186948853609*G0_2_0 - 0.0028218694885361*G0_2_2;
    A[603] = -0.00917107583774251*G0_0_0 - 0.00917107583774246*G0_0_2 - 0.00917107583774253*G0_2_0 - 0.00917107583774248*G0_2_2;
    A[604] = -0.00282186948853611*G0_0_0 - 0.0028218694885361*G0_0_2 - 0.00282186948853608*G0_2_0 - 0.00282186948853608*G0_2_2;
    A[605] = -0.0169312169312168*G0_0_0 - 0.00282186948853605*G0_0_1 - 0.00282186948853628*G0_1_0 - 0.0169312169312169*G0_2_0 - 0.00282186948853606*G0_2_1;
    A[606] = 0.021164021164021*G0_0_0 + 0.0105820105820106*G0_0_1 + 0.0105820105820108*G0_1_0 - 0.00282186948853601*G0_1_1 + 0.0211640211640212*G0_2_0 + 0.0105820105820106*G0_2_1;
    A[607] = 0.090299823633157*G0_0_0 + 0.0592592592592593*G0_0_1 + 0.059259259259259*G0_1_0 + 0.0169312169312168*G0_1_1 + 0.090299823633157*G0_2_0 + 0.0592592592592594*G0_2_1;
    A[608] = -0.0423280423280424*G0_0_0 - 0.0423280423280423*G0_0_1 - 0.0112874779541447*G0_0_2 + 0.0169312169312169*G0_1_0 + 0.0169312169312169*G0_1_1 - 0.0423280423280423*G0_1_2 - 0.0423280423280424*G0_2_0 - 0.0423280423280423*G0_2_1 - 0.0112874779541447*G0_2_2;
    A[609] = -0.0134038800705468*G0_0_0 - 0.0134038800705468*G0_0_1 - 0.00282186948853619*G0_0_2 - 0.00282186948853633*G0_1_0 - 0.00282186948853631*G0_1_1 - 0.0134038800705467*G0_1_2 - 0.0134038800705468*G0_2_0 - 0.0134038800705468*G0_2_1 - 0.00282186948853617*G0_2_2;
    A[610] = 0.00282186948853612*G0_0_0 + 0.00282186948853613*G0_0_1 - 0.0112874779541446*G0_0_2 + 0.00282186948853623*G0_1_2 + 0.00282186948853609*G0_2_0 + 0.0028218694885361*G0_2_1 - 0.0112874779541446*G0_2_2;
    A[611] = -0.118518518518518*G0_0_0 - 0.0874779541446207*G0_0_1 - 0.118518518518518*G0_0_2 - 0.160846560846561*G0_1_0 - 0.22010582010582*G0_1_1 - 0.160846560846561*G0_1_2 - 0.118518518518518*G0_2_0 - 0.0874779541446206*G0_2_1 - 0.118518518518518*G0_2_2;
    A[612] = 0.249735449735449*G0_0_0 + 0.167195767195767*G0_0_1 + 0.24973544973545*G0_0_2 + 0.167195767195767*G0_1_0 + 0.334391534391534*G0_1_1 + 0.167195767195767*G0_1_2 + 0.24973544973545*G0_2_0 + 0.167195767195767*G0_2_1 + 0.24973544973545*G0_2_2;
    A[613] = -0.090299823633157*G0_0_0 - 0.132627865961199*G0_0_1 - 0.0902998236331571*G0_0_2 - 0.059259259259259*G0_1_0 - 0.22010582010582*G0_1_1 - 0.0592592592592591*G0_1_2 - 0.090299823633157*G0_2_0 - 0.132627865961199*G0_2_1 - 0.090299823633157*G0_2_2;
    A[614] = -0.0112874779541445*G0_0_0 - 0.0423280423280423*G0_0_1 - 0.0423280423280423*G0_0_2 - 0.0423280423280423*G0_1_0 + 0.0169312169312169*G0_1_1 + 0.0169312169312169*G0_1_2 - 0.0112874779541445*G0_2_0 - 0.0423280423280423*G0_2_1 - 0.0423280423280423*G0_2_2;
    A[615] = -0.00282186948853629*G0_0_0 - 0.0134038800705467*G0_0_1 - 0.0134038800705467*G0_0_2 - 0.0134038800705466*G0_1_0 - 0.00282186948853595*G0_1_1 - 0.00282186948853593*G0_1_2 - 0.00282186948853631*G0_2_0 - 0.0134038800705467*G0_2_1 - 0.0134038800705467*G0_2_2;
    A[616] = -0.0112874779541446*G0_0_0 + 0.00282186948853612*G0_0_1 + 0.0028218694885361*G0_0_2 + 0.00282186948853612*G0_1_0 - 0.0112874779541446*G0_2_0 + 0.00282186948853612*G0_2_1 + 0.0028218694885361*G0_2_2;
    A[617] = 0.0169312169312172*G0_0_0 - 0.00282186948853592*G0_0_1 + 0.0169312169312173*G0_0_2 - 0.00282186948853588*G0_1_0 - 0.002821869488536*G0_1_2 + 0.0169312169312174*G0_2_0 - 0.00282186948853589*G0_2_1 + 0.0169312169312174*G0_2_2;
    A[618] = 0.0846560846560849*G0_0_0 + 0.0423280423280426*G0_0_1 + 0.0846560846560849*G0_0_2 + 0.0423280423280419*G0_1_0 + 0.0225749559082892*G0_1_1 + 0.0423280423280424*G0_1_2 + 0.0846560846560849*G0_2_0 + 0.0423280423280427*G0_2_1 + 0.0846560846560851*G0_2_2;
    A[619] = 0.0169312169312168*G0_0_0 - 0.00282186948853629*G0_0_1 + 0.0169312169312167*G0_0_2 - 0.00282186948853627*G0_1_0 - 0.00282186948853631*G0_1_2 + 0.0169312169312168*G0_2_0 - 0.00282186948853626*G0_2_1 + 0.0169312169312167*G0_2_2;
    A[620] = 0.118518518518519*G0_0_0 + 0.160846560846561*G0_0_1 + 0.0677248677248676*G0_0_2 + 0.0253968253968254*G0_1_0 - 0.0169312169312169*G0_1_1 + 0.160846560846561*G0_1_2 + 0.118518518518519*G0_2_0 + 0.160846560846561*G0_2_1 + 0.0677248677248675*G0_2_2;
    A[621] = -0.0846560846560848*G0_0_0 - 0.177777777777778*G0_0_1 - 0.27089947089947*G0_0_2 - 0.0423280423280419*G0_1_0 - 0.0169312169312167*G0_1_1 - 0.177777777777777*G0_1_2 - 0.0846560846560848*G0_2_0 - 0.177777777777778*G0_2_1 - 0.27089947089947*G0_2_2;
    A[622] = -0.0169312169312168*G0_0_0 + 0.00282186948853631*G0_0_1 + 0.0677248677248677*G0_0_2 + 0.00282186948853626*G0_1_0 + 0.00564373897707252*G0_1_1 + 0.00282186948853616*G0_1_2 - 0.0169312169312169*G0_2_0 + 0.00282186948853633*G0_2_1 + 0.0677248677248677*G0_2_2;
    A[623] = 0.0225749559082894*G0_0_0 - 0.0197530864197529*G0_0_1 + 0.022574955908289*G0_0_2 - 0.0197530864197529*G0_1_0 + 0.0225749559082894*G0_1_1 - 0.0197530864197532*G0_1_2 + 0.0225749559082893*G0_2_0 - 0.0197530864197529*G0_2_1 + 0.0225749559082889*G0_2_2;
    A[624] = 0.022574955908289*G0_0_0 + 0.00282186948853588*G0_0_1 + 0.0225749559082891*G0_0_2 + 0.0028218694885361*G0_1_0 + 0.00282186948853573*G0_1_2 + 0.0225749559082891*G0_2_0 + 0.00282186948853585*G0_2_1 + 0.0225749559082891*G0_2_2;
    A[625] = 0.0225749559082893*G0_0_0 + 0.00282186948853622*G0_0_1 + 0.0225749559082894*G0_0_2 + 0.00282186948853622*G0_1_0 + 0.00282186948853635*G0_1_2 + 0.0225749559082894*G0_2_0 + 0.00282186948853618*G0_2_1 + 0.0225749559082894*G0_2_2;
    A[626] = 0.0677248677248676*G0_0_0 + 0.160846560846561*G0_0_1 + 0.118518518518519*G0_0_2 + 0.160846560846561*G0_1_0 - 0.0169312169312168*G0_1_1 + 0.0253968253968256*G0_1_2 + 0.0677248677248675*G0_2_0 + 0.160846560846561*G0_2_1 + 0.118518518518519*G0_2_2;
    A[627] = 0.0677248677248675*G0_0_0 + 0.00282186948853603*G0_0_1 - 0.0169312169312172*G0_0_2 + 0.002821869488536*G0_1_0 + 0.00564373897707182*G0_1_1 + 0.00282186948853607*G0_1_2 + 0.0677248677248677*G0_2_0 + 0.00282186948853599*G0_2_1 - 0.0169312169312173*G0_2_2;
    A[628] = -0.270899470899471*G0_0_0 - 0.177777777777778*G0_0_1 - 0.0846560846560847*G0_0_2 - 0.177777777777778*G0_1_0 - 0.0169312169312168*G0_1_1 - 0.0423280423280422*G0_1_2 - 0.270899470899471*G0_2_0 - 0.177777777777778*G0_2_1 - 0.0846560846560849*G0_2_2;
    A[629] = -0.135449735449736*G0_0_0 - 0.0225749559082895*G0_0_1 - 0.135449735449735*G0_0_2 - 0.0225749559082895*G0_1_0 - 0.0451499118165785*G0_1_1 - 0.0225749559082894*G0_1_2 - 0.135449735449736*G0_2_0 - 0.0225749559082896*G0_2_1 - 0.135449735449735*G0_2_2;
    A[630] = -0.0077601410934744*G0_0_0 - 0.00776014109347441*G0_0_1 - 0.0077601410934744*G0_0_2 - 0.0253968253968254*G0_1_0 - 0.0253968253968254*G0_1_1 - 0.0253968253968254*G0_1_2 - 0.0077601410934744*G0_2_0 - 0.00776014109347441*G0_2_1 - 0.0077601410934744*G0_2_2;
    A[631] = 0.00776014109347437*G0_0_0 + 0.00776014109347435*G0_2_0;
    A[632] = -0.0458553791887124*G0_0_1 - 0.0705467372134037*G0_1_1 - 0.0458553791887124*G0_2_1;
    A[633] = 0.00776014109347441*G0_0_2 + 0.0077601410934744*G0_2_2;
    A[634] = -0.0790123456790124*G0_0_1 - 0.158024691358025*G0_0_2 + 0.0225749559082892*G0_1_1 - 0.0790123456790121*G0_1_2 - 0.0790123456790124*G0_2_1 - 0.158024691358025*G0_2_2;
    A[635] = 0.0310405643738977*G0_0_1 + 0.0902998236331569*G0_0_2 - 0.0112874779541446*G0_1_1 + 0.0310405643738977*G0_1_2 + 0.0310405643738977*G0_2_1 + 0.0902998236331569*G0_2_2;
    A[636] = -0.0112874779541446*G0_0_1 - 0.0451499118165783*G0_0_2 - 0.0112874779541446*G0_1_2 - 0.0112874779541446*G0_2_1 - 0.0451499118165783*G0_2_2;
    A[637] = -0.0112874779541447*G0_0_0 - 0.0112874779541448*G0_0_2 - 0.0112874779541446*G0_2_0 - 0.0112874779541447*G0_2_2;
    A[638] = -0.00282186948853602*G0_0_0 - 0.00282186948853608*G0_0_2 - 0.00282186948853604*G0_2_0 - 0.00282186948853612*G0_2_2;
    A[639] = -0.0112874779541446*G0_0_0 - 0.0112874779541446*G0_0_2 - 0.0112874779541446*G0_2_0 - 0.0112874779541445*G0_2_2;
    A[640] = -0.0451499118165784*G0_0_0 - 0.0112874779541447*G0_0_1 - 0.0112874779541446*G0_1_0 - 0.0451499118165782*G0_2_0 - 0.0112874779541447*G0_2_1;
    A[641] = 0.0902998236331568*G0_0_0 + 0.0310405643738979*G0_0_1 + 0.0310405643738975*G0_1_0 - 0.0112874779541448*G0_1_1 + 0.0902998236331567*G0_2_0 + 0.0310405643738978*G0_2_1;
    A[642] = -0.158024691358025*G0_0_0 - 0.0790123456790125*G0_0_1 - 0.0790123456790122*G0_1_0 + 0.0225749559082892*G0_1_1 - 0.158024691358025*G0_2_0 - 0.0790123456790125*G0_2_1;
    A[643] = 0.0112874779541447*G0_0_0 + 0.0112874779541446*G0_0_1 - 0.0225749559082892*G0_1_0 - 0.0225749559082892*G0_1_1 + 0.0112874779541447*G0_1_2 + 0.0112874779541447*G0_2_0 + 0.0112874779541446*G0_2_1;
    A[644] = 0.00282186948853625*G0_0_0 + 0.00282186948853624*G0_0_1 - 0.0112874779541444*G0_1_0 - 0.0112874779541445*G0_1_1 + 0.00282186948853617*G0_1_2 + 0.00282186948853625*G0_2_0 + 0.00282186948853624*G0_2_1;
    A[645] = 0.0112874779541446*G0_0_0 + 0.0112874779541446*G0_0_1 + 0.0112874779541445*G0_1_2 + 0.0112874779541446*G0_2_0 + 0.0112874779541446*G0_2_1;
    A[646] = 0.0451499118165784*G0_0_0 + 0.0338624338624337*G0_0_1 + 0.0451499118165784*G0_0_2 + 0.0790123456790122*G0_1_0 + 0.112874779541446*G0_1_1 + 0.0790123456790122*G0_1_2 + 0.0451499118165784*G0_2_0 + 0.0338624338624337*G0_2_1 + 0.0451499118165784*G0_2_2;
    A[647] = -0.090299823633157*G0_0_0 - 0.059259259259259*G0_0_1 - 0.090299823633157*G0_0_2 - 0.132627865961199*G0_1_0 - 0.22010582010582*G0_1_1 - 0.132627865961199*G0_1_2 - 0.0902998236331571*G0_2_0 - 0.0592592592592591*G0_2_1 - 0.090299823633157*G0_2_2;
    A[648] = 0.158024691358025*G0_0_0 + 0.0790123456790122*G0_0_1 + 0.158024691358025*G0_0_2 + 0.0790123456790122*G0_1_0 + 0.203174603174603*G0_1_1 + 0.0790123456790122*G0_1_2 + 0.158024691358025*G0_2_0 + 0.0790123456790122*G0_2_1 + 0.158024691358025*G0_2_2;
    A[649] = 0.0112874779541446*G0_0_1 + 0.0112874779541447*G0_0_2 + 0.0112874779541447*G0_1_0 - 0.0225749559082892*G0_1_1 - 0.0225749559082892*G0_1_2 + 0.0112874779541446*G0_2_1 + 0.0112874779541447*G0_2_2;
    A[650] = 0.00282186948853612*G0_0_1 + 0.00282186948853609*G0_0_2 + 0.00282186948853612*G0_1_0 - 0.0112874779541448*G0_1_1 - 0.0112874779541448*G0_1_2 + 0.00282186948853614*G0_2_1 + 0.00282186948853611*G0_2_2;
    A[651] = 0.0112874779541447*G0_0_1 + 0.0112874779541447*G0_0_2 + 0.0112874779541446*G0_1_0 + 0.0112874779541447*G0_2_1 + 0.0112874779541447*G0_2_2;
    A[652] = 0.0225749559082891*G0_0_0 - 0.0112874779541447*G0_0_1 + 0.0225749559082891*G0_0_2 - 0.0112874779541449*G0_1_0 - 0.0112874779541449*G0_1_2 + 0.0225749559082889*G0_2_0 - 0.0112874779541447*G0_2_1 + 0.0225749559082892*G0_2_2;
    A[653] = -0.112874779541447*G0_0_0 - 0.0112874779541449*G0_0_1 - 0.112874779541446*G0_0_2 - 0.0112874779541444*G0_1_0 - 0.0451499118165786*G0_1_1 - 0.0112874779541448*G0_1_2 - 0.112874779541446*G0_2_0 - 0.0112874779541451*G0_2_1 - 0.112874779541446*G0_2_2;
    A[654] = 0.0225749559082894*G0_0_0 - 0.0112874779541444*G0_0_1 + 0.0225749559082893*G0_0_2 - 0.0112874779541444*G0_1_0 - 0.0112874779541443*G0_1_2 + 0.0225749559082894*G0_2_0 - 0.0112874779541444*G0_2_1 + 0.0225749559082892*G0_2_2;
    A[655] = -0.0225749559082892*G0_0_0 - 0.0338624338624338*G0_0_1 + 0.0112874779541443*G0_1_0 + 0.0677248677248675*G0_1_1 - 0.0338624338624338*G0_1_2 - 0.0225749559082892*G0_2_0 - 0.0338624338624339*G0_2_1;
    A[656] = 0.112874779541447*G0_0_0 + 0.101587301587302*G0_0_1 + 0.0112874779541445*G0_1_0 - 0.0677248677248675*G0_1_1 + 0.101587301587301*G0_1_2 + 0.112874779541446*G0_2_0 + 0.101587301587302*G0_2_1;
    A[657] = -0.0225749559082893*G0_0_0 - 0.0338624338624339*G0_0_1 + 0.0112874779541444*G0_1_0 + 0.0225749559082891*G0_1_1 - 0.0338624338624337*G0_1_2 - 0.0225749559082893*G0_2_0 - 0.0338624338624339*G0_2_1;
    A[658] = 0.0112874779541448*G0_0_1 + 0.0112874779541444*G0_1_0 - 0.0451499118165787*G0_1_1 + 0.0112874779541448*G0_1_2 + 0.0112874779541448*G0_2_1;
    A[659] = 0.0112874779541448*G0_0_1 + 0.0112874779541448*G0_1_0 + 0.0112874779541449*G0_1_2 + 0.0112874779541447*G0_2_1;
    A[660] = 0.0112874779541444*G0_0_1 + 0.0112874779541445*G0_1_0 + 0.0112874779541444*G0_1_2 + 0.0112874779541444*G0_2_1;
    A[661] = -0.0338624338624338*G0_0_1 - 0.0225749559082891*G0_0_2 - 0.0338624338624339*G0_1_0 + 0.0677248677248676*G0_1_1 + 0.0112874779541443*G0_1_2 - 0.0338624338624337*G0_2_1 - 0.0225749559082891*G0_2_2;
    A[662] = -0.0338624338624339*G0_0_1 - 0.022574955908289*G0_0_2 - 0.0338624338624336*G0_1_0 + 0.0225749559082897*G0_1_1 + 0.0112874779541449*G0_1_2 - 0.0338624338624339*G0_2_1 - 0.0225749559082891*G0_2_2;
    A[663] = 0.101587301587302*G0_0_1 + 0.112874779541446*G0_0_2 + 0.101587301587302*G0_1_0 - 0.0677248677248677*G0_1_1 + 0.0112874779541447*G0_1_2 + 0.101587301587302*G0_2_1 + 0.112874779541446*G0_2_2;
    A[664] = 0.0902998236331573*G0_1_1;
    A[665] = -0.0705467372134038*G0_0_0 - 0.0705467372134037*G0_0_1 - 0.0705467372134037*G0_0_2 - 0.0246913580246913*G0_1_0 - 0.0246913580246913*G0_1_1 - 0.0246913580246913*G0_1_2 - 0.0246913580246913*G0_2_0 - 0.0246913580246913*G0_2_1 - 0.0246913580246913*G0_2_2;
    A[666] = -0.0253968253968253*G0_0_0 - 0.017636684303351*G0_1_0 - 0.017636684303351*G0_2_0;
    A[667] = 0.00776014109347444*G0_1_1 + 0.00776014109347442*G0_2_1;
    A[668] = 0.00776014109347442*G0_1_2 + 0.00776014109347442*G0_2_2;
    A[669] = -0.0112874779541446*G0_1_1 - 0.0112874779541446*G0_1_2 - 0.0112874779541446*G0_2_1 - 0.0112874779541446*G0_2_2;
    A[670] = -0.00282186948853607*G0_1_1 - 0.00282186948853611*G0_1_2 - 0.0028218694885361*G0_2_1 - 0.0028218694885361*G0_2_2;
    A[671] = -0.0112874779541447*G0_1_1 - 0.0112874779541447*G0_1_2 - 0.0112874779541447*G0_2_1 - 0.0112874779541447*G0_2_2;
    A[672] = -0.0225749559082891*G0_0_0 - 0.0338624338624337*G0_0_2 - 0.0338624338624338*G0_1_0 - 0.0451499118165784*G0_1_2 - 0.0338624338624338*G0_2_0 - 0.0451499118165784*G0_2_2;
    A[673] = -0.0112874779541448*G0_0_0 - 0.0141093474426808*G0_0_2 - 0.0141093474426806*G0_1_0 - 0.0169312169312168*G0_1_2 - 0.0141093474426806*G0_2_0 - 0.0169312169312168*G0_2_2;
    A[674] = -0.0112874779541446*G0_0_2 - 0.0112874779541447*G0_1_0 - 0.0225749559082893*G0_1_2 - 0.0112874779541447*G0_2_0 - 0.0225749559082892*G0_2_2;
    A[675] = -0.0225749559082889*G0_0_0 - 0.0338624338624337*G0_0_1 - 0.0338624338624336*G0_1_0 - 0.0451499118165783*G0_1_1 - 0.0338624338624336*G0_2_0 - 0.0451499118165784*G0_2_1;
    A[676] = -0.0112874779541446*G0_0_0 - 0.0141093474426805*G0_0_1 - 0.0141093474426809*G0_1_0 - 0.0169312169312167*G0_1_1 - 0.0141093474426808*G0_2_0 - 0.0169312169312166*G0_2_1;
    A[677] = -0.0112874779541446*G0_0_1 - 0.0112874779541446*G0_1_0 - 0.0225749559082893*G0_1_1 - 0.0112874779541446*G0_2_0 - 0.0225749559082894*G0_2_1;
    A[678] = 0.0225749559082892*G0_0_0 + 0.0225749559082893*G0_0_1 + 0.101587301587301*G0_0_2 + 0.101587301587302*G0_1_0 + 0.101587301587302*G0_1_1 + 0.0225749559082893*G0_1_2 + 0.101587301587302*G0_2_0 + 0.101587301587302*G0_2_1 + 0.0225749559082893*G0_2_2;
    A[679] = -0.0112874779541446*G0_0_0 - 0.0112874779541445*G0_0_1 - 0.0423280423280423*G0_0_2 - 0.0423280423280423*G0_1_0 - 0.0423280423280423*G0_1_1 + 0.0169312169312168*G0_1_2 - 0.0423280423280424*G0_2_0 - 0.0423280423280423*G0_2_1 + 0.0169312169312168*G0_2_2;
    A[680] = 0.0112874779541446*G0_0_2 + 0.0112874779541447*G0_1_0 + 0.0112874779541447*G0_1_1 - 0.0225749559082891*G0_1_2 + 0.0112874779541447*G0_2_0 + 0.0112874779541447*G0_2_1 - 0.0225749559082891*G0_2_2;
    A[681] = 0.0225749559082892*G0_0_0 + 0.101587301587301*G0_0_1 + 0.0225749559082892*G0_0_2 + 0.101587301587301*G0_1_0 + 0.0225749559082891*G0_1_1 + 0.101587301587301*G0_1_2 + 0.101587301587301*G0_2_0 + 0.0225749559082892*G0_2_1 + 0.101587301587301*G0_2_2;
    A[682] = -0.0112874779541445*G0_0_0 - 0.0423280423280424*G0_0_1 - 0.0112874779541445*G0_0_2 - 0.0423280423280423*G0_1_0 + 0.0169312169312169*G0_1_1 - 0.0423280423280423*G0_1_2 - 0.0423280423280423*G0_2_0 + 0.0169312169312169*G0_2_1 - 0.0423280423280423*G0_2_2;
    A[683] = 0.0112874779541446*G0_0_1 + 0.0112874779541446*G0_1_0 - 0.0225749559082892*G0_1_1 + 0.0112874779541446*G0_1_2 + 0.0112874779541447*G0_2_0 - 0.0225749559082892*G0_2_1 + 0.0112874779541447*G0_2_2;
    A[684] = 0.203174603174603*G0_0_0 + 0.12416225749559*G0_0_1 + 0.12416225749559*G0_0_2 + 0.12416225749559*G0_1_0 + 0.203174603174603*G0_1_1 + 0.203174603174603*G0_1_2 + 0.12416225749559*G0_2_0 + 0.203174603174603*G0_2_1 + 0.203174603174603*G0_2_2;
    A[685] = -0.22010582010582*G0_0_0 - 0.0874779541446206*G0_0_1 - 0.0874779541446207*G0_0_2 - 0.16084656084656*G0_1_0 - 0.118518518518518*G0_1_1 - 0.118518518518518*G0_1_2 - 0.16084656084656*G0_2_0 - 0.118518518518518*G0_2_1 - 0.118518518518518*G0_2_2;
    A[686] = 0.112874779541446*G0_0_0 + 0.0338624338624337*G0_0_1 + 0.0338624338624337*G0_0_2 + 0.0790123456790122*G0_1_0 + 0.0451499118165784*G0_1_1 + 0.0451499118165784*G0_1_2 + 0.0790123456790122*G0_2_0 + 0.0451499118165784*G0_2_1 + 0.0451499118165784*G0_2_2;
    A[687] = -0.0451499118165781*G0_0_0 - 0.0564373897707227*G0_0_1 - 0.0564373897707224*G0_0_2 - 0.0564373897707231*G0_1_0 - 0.0677248677248675*G0_1_1 - 0.0677248677248674*G0_1_2 - 0.056437389770723*G0_2_0 - 0.0677248677248675*G0_2_1 - 0.0677248677248674*G0_2_2;
    A[688] = -0.0112874779541444*G0_0_1 - 0.0112874779541445*G0_0_2 - 0.0112874779541447*G0_1_0 - 0.0225749559082893*G0_1_1 - 0.0225749559082893*G0_1_2 - 0.0112874779541448*G0_2_0 - 0.0225749559082893*G0_2_1 - 0.0225749559082893*G0_2_2;
    A[689] = -0.0112874779541449*G0_0_1 - 0.0112874779541448*G0_0_2 - 0.0112874779541445*G0_1_0 - 0.0225749559082891*G0_1_1 - 0.0225749559082891*G0_1_2 - 0.0112874779541446*G0_2_0 - 0.0225749559082891*G0_2_1 - 0.0225749559082891*G0_2_2;
    A[690] = -0.0451499118165781*G0_0_0 - 0.0338624338624337*G0_0_1 - 0.0338624338624338*G0_0_2 - 0.0338624338624339*G0_1_0 - 0.135449735449735*G0_1_1 - 0.135449735449735*G0_1_2 - 0.0338624338624339*G0_2_0 - 0.135449735449735*G0_2_1 - 0.135449735449735*G0_2_2;
    A[691] = 0.0112874779541444*G0_0_1 + 0.0112874779541444*G0_0_2 + 0.0112874779541447*G0_1_0 + 0.0451499118165785*G0_1_1 + 0.0451499118165784*G0_1_2 + 0.0112874779541447*G0_2_0 + 0.0451499118165785*G0_2_1 + 0.0451499118165784*G0_2_2;
    A[692] = 0.0112874779541446*G0_0_1 + 0.0112874779541447*G0_0_2 + 0.0112874779541446*G0_1_0 + 0.0451499118165784*G0_1_1 + 0.0451499118165785*G0_1_2 + 0.0112874779541447*G0_2_0 + 0.0451499118165785*G0_2_1 + 0.0451499118165786*G0_2_2;
    A[693] = -0.0677248677248676*G0_0_0 - 0.0790123456790121*G0_0_1 - 0.169312169312169*G0_0_2 - 0.169312169312169*G0_1_0 - 0.0677248677248675*G0_1_1 - 0.27089947089947*G0_1_2 - 0.169312169312169*G0_2_0 - 0.0677248677248676*G0_2_1 - 0.27089947089947*G0_2_2;
    A[694] = 0.0677248677248675*G0_0_0 + 0.0564373897707227*G0_0_1 + 0.101587301587301*G0_0_2 + 0.101587301587301*G0_1_0 + 0.0677248677248676*G0_1_1 + 0.135449735449735*G0_1_2 + 0.101587301587301*G0_2_0 + 0.0677248677248676*G0_2_1 + 0.135449735449735*G0_2_2;
    A[695] = 0.0225749559082893*G0_0_0 + 0.0112874779541449*G0_0_1 + 0.056437389770723*G0_0_2 + 0.056437389770723*G0_1_0 + 0.0225749559082891*G0_1_1 + 0.0902998236331569*G0_1_2 + 0.056437389770723*G0_2_0 + 0.0225749559082891*G0_2_1 + 0.0902998236331569*G0_2_2;
    A[696] = -0.0677248677248676*G0_0_0 - 0.169312169312169*G0_0_1 - 0.0790123456790121*G0_0_2 - 0.169312169312169*G0_1_0 - 0.27089947089947*G0_1_1 - 0.0677248677248674*G0_1_2 - 0.169312169312169*G0_2_0 - 0.27089947089947*G0_2_1 - 0.0677248677248674*G0_2_2;
    A[697] = 0.0677248677248674*G0_0_0 + 0.101587301587301*G0_0_1 + 0.0564373897707224*G0_0_2 + 0.101587301587301*G0_1_0 + 0.135449735449735*G0_1_1 + 0.0677248677248674*G0_1_2 + 0.101587301587301*G0_2_0 + 0.135449735449735*G0_2_1 + 0.0677248677248673*G0_2_2;
    A[698] = 0.0225749559082891*G0_0_0 + 0.056437389770723*G0_0_1 + 0.0112874779541445*G0_0_2 + 0.0564373897707232*G0_1_0 + 0.0902998236331568*G0_1_1 + 0.0225749559082892*G0_1_2 + 0.0564373897707231*G0_2_0 + 0.0902998236331568*G0_2_1 + 0.0225749559082892*G0_2_2;
    A[699] = 0.0902998236331563*G0_0_0 + 0.0902998236331565*G0_0_1 + 0.0902998236331569*G0_0_2 + 0.090299823633157*G0_1_0 + 0.0902998236331568*G0_1_1 + 0.0902998236331566*G0_1_2 + 0.090299823633157*G0_2_0 + 0.0902998236331568*G0_2_1 + 0.0902998236331566*G0_2_2;
    A[700] = 0.0529100529100528*G0_0_0 + 0.0529100529100528*G0_0_1 + 0.0529100529100528*G0_0_2 + 0.0202821869488536*G0_1_0 + 0.0202821869488536*G0_1_1 + 0.0202821869488536*G0_1_2 + 0.0202821869488536*G0_2_0 + 0.0202821869488536*G0_2_1 + 0.0202821869488536*G0_2_2;
    A[701] = 0.0529100529100528*G0_0_0 + 0.0326278659611993*G0_1_0 + 0.0326278659611993*G0_2_0;
    A[702] = 0.00511463844797178*G0_1_1 + 0.00511463844797179*G0_2_1;
    A[703] = 0.00511463844797177*G0_1_2 + 0.00511463844797176*G0_2_2;
    A[704] = -0.00282186948853623*G0_1_1 - 0.00282186948853619*G0_1_2 - 0.0028218694885362*G0_2_1 - 0.00282186948853616*G0_2_2;
    A[705] = -0.0091710758377426*G0_1_1 - 0.00917107583774263*G0_1_2 - 0.0091710758377426*G0_2_1 - 0.00917107583774263*G0_2_2;
    A[706] = -0.00282186948853617*G0_1_1 - 0.00282186948853619*G0_1_2 - 0.00282186948853616*G0_2_1 - 0.00282186948853616*G0_2_2;
    A[707] = 0.0169312169312168*G0_0_0 + 0.0592592592592591*G0_0_2 + 0.0592592592592591*G0_1_0 + 0.0902998236331567*G0_1_2 + 0.0592592592592591*G0_2_0 + 0.0902998236331568*G0_2_2;
    A[708] = -0.00282186948853607*G0_0_0 + 0.0105820105820105*G0_0_2 + 0.0105820105820105*G0_1_0 + 0.021164021164021*G0_1_2 + 0.0105820105820104*G0_2_0 + 0.021164021164021*G0_2_2;
    A[709] = -0.00282186948853619*G0_0_2 - 0.00282186948853619*G0_1_0 - 0.0169312169312171*G0_1_2 - 0.00282186948853617*G0_2_0 - 0.016931216931217*G0_2_2;
    A[710] = 0.0169312169312168*G0_0_0 + 0.0592592592592591*G0_0_1 + 0.0592592592592589*G0_1_0 + 0.0902998236331567*G0_1_1 + 0.0592592592592589*G0_2_0 + 0.0902998236331567*G0_2_1;
    A[711] = -0.00282186948853623*G0_0_0 + 0.0105820105820103*G0_0_1 + 0.0105820105820107*G0_1_0 + 0.0211640211640211*G0_1_1 + 0.0105820105820107*G0_2_0 + 0.0211640211640211*G0_2_1;
    A[712] = -0.00282186948853602*G0_0_1 - 0.00282186948853617*G0_1_0 - 0.0169312169312169*G0_1_1 - 0.00282186948853614*G0_2_0 - 0.0169312169312169*G0_2_1;
    A[713] = 0.016931216931217*G0_0_0 + 0.016931216931217*G0_0_1 - 0.0423280423280422*G0_0_2 - 0.0423280423280422*G0_1_0 - 0.0423280423280422*G0_1_1 - 0.0112874779541447*G0_1_2 - 0.0423280423280422*G0_2_0 - 0.0423280423280422*G0_2_1 - 0.0112874779541447*G0_2_2;
    A[714] = -0.00282186948853632*G0_0_0 - 0.00282186948853635*G0_0_1 - 0.0134038800705468*G0_0_2 - 0.0134038800705469*G0_1_0 - 0.0134038800705469*G0_1_1 - 0.00282186948853605*G0_1_2 - 0.0134038800705468*G0_2_0 - 0.0134038800705468*G0_2_1 - 0.00282186948853604*G0_2_2;
    A[715] = 0.00282186948853622*G0_0_2 + 0.00282186948853617*G0_1_0 + 0.00282186948853615*G0_1_1 - 0.0112874779541447*G0_1_2 + 0.00282186948853615*G0_2_0 + 0.00282186948853614*G0_2_1 - 0.0112874779541447*G0_2_2;
    A[716] = 0.0169312169312169*G0_0_0 - 0.0423280423280422*G0_0_1 + 0.016931216931217*G0_0_2 - 0.0423280423280421*G0_1_0 - 0.0112874779541447*G0_1_1 - 0.0423280423280421*G0_1_2 - 0.0423280423280421*G0_2_0 - 0.0112874779541447*G0_2_1 - 0.0423280423280421*G0_2_2;
    A[717] = -0.00282186948853629*G0_0_0 - 0.0134038800705466*G0_0_1 - 0.00282186948853631*G0_0_2 - 0.0134038800705467*G0_1_0 - 0.00282186948853596*G0_1_1 - 0.0134038800705467*G0_1_2 - 0.0134038800705467*G0_2_0 - 0.00282186948853593*G0_2_1 - 0.0134038800705467*G0_2_2;
    A[718] = 0.00282186948853613*G0_0_1 + 0.00282186948853612*G0_1_0 - 0.0112874779541448*G0_1_1 + 0.00282186948853614*G0_1_2 + 0.00282186948853609*G0_2_0 - 0.0112874779541448*G0_2_1 + 0.00282186948853611*G0_2_2;
    A[719] = -0.22010582010582*G0_0_0 - 0.16084656084656*G0_0_1 - 0.16084656084656*G0_0_2 - 0.0874779541446206*G0_1_0 - 0.118518518518518*G0_1_1 - 0.118518518518518*G0_1_2 - 0.0874779541446207*G0_2_0 - 0.118518518518518*G0_2_1 - 0.118518518518518*G0_2_2;
    A[720] = 0.334391534391534*G0_0_0 + 0.167195767195767*G0_0_1 + 0.167195767195767*G0_0_2 + 0.167195767195767*G0_1_0 + 0.249735449735449*G0_1_1 + 0.249735449735449*G0_1_2 + 0.167195767195767*G0_2_0 + 0.249735449735449*G0_2_1 + 0.249735449735449*G0_2_2;
    A[721] = -0.22010582010582*G0_0_0 - 0.0592592592592591*G0_0_1 - 0.0592592592592591*G0_0_2 - 0.132627865961199*G0_1_0 - 0.0902998236331568*G0_1_1 - 0.0902998236331568*G0_1_2 - 0.132627865961199*G0_2_0 - 0.0902998236331568*G0_2_1 - 0.0902998236331568*G0_2_2;
    A[722] = 0.0225749559082887*G0_0_0 + 0.0423280423280419*G0_0_1 + 0.0423280423280416*G0_0_2 + 0.0423280423280422*G0_1_0 + 0.0846560846560843*G0_1_1 + 0.0846560846560842*G0_1_2 + 0.0423280423280421*G0_2_0 + 0.0846560846560843*G0_2_1 + 0.0846560846560843*G0_2_2;
    A[723] = -0.00282186948853655*G0_0_1 - 0.00282186948853627*G0_0_2 - 0.00282186948853641*G0_1_0 + 0.0169312169312168*G0_1_1 + 0.0169312169312168*G0_1_2 - 0.00282186948853633*G0_2_0 + 0.0169312169312168*G0_2_1 + 0.0169312169312169*G0_2_2;
    A[724] = -0.00282186948853601*G0_0_1 - 0.0028218694885362*G0_0_2 - 0.00282186948853642*G0_1_0 + 0.0169312169312167*G0_1_1 + 0.0169312169312167*G0_1_2 - 0.00282186948853641*G0_2_0 + 0.0169312169312166*G0_2_1 + 0.0169312169312166*G0_2_2;
    A[725] = 0.0225749559082888*G0_0_0 - 0.0197530864197533*G0_0_1 - 0.0197530864197532*G0_0_2 - 0.0197530864197534*G0_1_0 + 0.0225749559082891*G0_1_1 + 0.0225749559082889*G0_1_2 - 0.0197530864197534*G0_2_0 + 0.0225749559082891*G0_2_1 + 0.0225749559082889*G0_2_2;
    A[726] = 0.00282186948853624*G0_0_1 + 0.00282186948853644*G0_0_2 + 0.00282186948853641*G0_1_0 + 0.0225749559082893*G0_1_1 + 0.0225749559082894*G0_1_2 + 0.00282186948853633*G0_2_0 + 0.0225749559082893*G0_2_1 + 0.0225749559082894*G0_2_2;
    A[727] = 0.0028218694885364*G0_0_1 + 0.00282186948853619*G0_0_2 + 0.00282186948853636*G0_1_0 + 0.0225749559082894*G0_1_1 + 0.0225749559082893*G0_1_2 + 0.00282186948853635*G0_2_0 + 0.0225749559082894*G0_2_1 + 0.0225749559082893*G0_2_2;
    A[728] = -0.016931216931217*G0_0_0 + 0.0253968253968252*G0_0_1 + 0.16084656084656*G0_0_2 + 0.16084656084656*G0_1_0 + 0.118518518518518*G0_1_1 + 0.0677248677248674*G0_1_2 + 0.16084656084656*G0_2_0 + 0.118518518518518*G0_2_1 + 0.0677248677248674*G0_2_2;
    A[729] = -0.0169312169312169*G0_0_0 - 0.042328042328042*G0_0_1 - 0.177777777777777*G0_0_2 - 0.177777777777777*G0_1_0 - 0.0846560846560845*G0_1_1 - 0.27089947089947*G0_1_2 - 0.177777777777777*G0_2_0 - 0.0846560846560845*G0_2_1 - 0.27089947089947*G0_2_2;
    A[730] = 0.00564373897707238*G0_0_0 + 0.00282186948853601*G0_0_1 + 0.00282186948853617*G0_0_2 + 0.00282186948853631*G0_1_0 - 0.0169312169312167*G0_1_1 + 0.0677248677248678*G0_1_2 + 0.00282186948853631*G0_2_0 - 0.0169312169312167*G0_2_1 + 0.0677248677248678*G0_2_2;
    A[731] = -0.0169312169312168*G0_0_0 + 0.16084656084656*G0_0_1 + 0.0253968253968252*G0_0_2 + 0.16084656084656*G0_1_0 + 0.0677248677248671*G0_1_1 + 0.118518518518518*G0_1_2 + 0.16084656084656*G0_2_0 + 0.0677248677248671*G0_2_1 + 0.118518518518518*G0_2_2;
    A[732] = -0.0169312169312169*G0_0_0 - 0.177777777777777*G0_0_1 - 0.0423280423280416*G0_0_2 - 0.177777777777777*G0_1_0 - 0.27089947089947*G0_1_1 - 0.0846560846560842*G0_1_2 - 0.177777777777777*G0_2_0 - 0.27089947089947*G0_2_1 - 0.0846560846560842*G0_2_2;
    A[733] = 0.00564373897707253*G0_0_0 + 0.00282186948853607*G0_0_1 + 0.00282186948853626*G0_0_2 + 0.00282186948853607*G0_1_0 + 0.0677248677248678*G0_1_1 - 0.0169312169312169*G0_1_2 + 0.0028218694885361*G0_2_0 + 0.0677248677248678*G0_2_1 - 0.016931216931217*G0_2_2;
    A[734] = -0.0451499118165775*G0_0_0 - 0.0225749559082886*G0_0_1 - 0.022574955908289*G0_0_2 - 0.0225749559082888*G0_1_0 - 0.135449735449735*G0_1_1 - 0.135449735449735*G0_1_2 - 0.0225749559082888*G0_2_0 - 0.135449735449735*G0_2_1 - 0.135449735449734*G0_2_2;
    A[735] = -0.0253968253968254*G0_0_0 - 0.0253968253968253*G0_0_1 - 0.0253968253968254*G0_0_2 - 0.00776014109347437*G0_1_0 - 0.00776014109347437*G0_1_1 - 0.00776014109347436*G0_1_2 - 0.00776014109347438*G0_2_0 - 0.00776014109347438*G0_2_1 - 0.00776014109347437*G0_2_2;
    A[736] = -0.0705467372134038*G0_0_0 - 0.0458553791887125*G0_1_0 - 0.0458553791887125*G0_2_0;
    A[737] = 0.00776014109347449*G0_1_1 + 0.00776014109347448*G0_2_1;
    A[738] = 0.00776014109347441*G0_1_2 + 0.00776014109347441*G0_2_2;
    A[739] = -0.0112874779541448*G0_1_1 - 0.0112874779541447*G0_1_2 - 0.0112874779541447*G0_2_1 - 0.0112874779541447*G0_2_2;
    A[740] = -0.00282186948853592*G0_1_1 - 0.00282186948853597*G0_1_2 - 0.00282186948853597*G0_2_1 - 0.002821869488536*G0_2_2;
    A[741] = -0.0112874779541447*G0_1_1 - 0.0112874779541447*G0_1_2 - 0.0112874779541447*G0_2_1 - 0.0112874779541447*G0_2_2;
    A[742] = 0.0225749559082892*G0_0_0 - 0.0790123456790122*G0_0_2 - 0.0790123456790122*G0_1_0 - 0.158024691358024*G0_1_2 - 0.0790123456790121*G0_2_0 - 0.158024691358024*G0_2_2;
    A[743] = -0.0112874779541446*G0_0_0 + 0.0310405643738977*G0_0_2 + 0.0310405643738976*G0_1_0 + 0.0902998236331568*G0_1_2 + 0.0310405643738976*G0_2_0 + 0.0902998236331568*G0_2_2;
    A[744] = -0.0112874779541446*G0_0_2 - 0.0112874779541447*G0_1_0 - 0.0451499118165785*G0_1_2 - 0.0112874779541447*G0_2_0 - 0.0451499118165785*G0_2_2;
    A[745] = 0.0225749559082891*G0_0_0 - 0.0790123456790122*G0_0_1 - 0.079012345679012*G0_1_0 - 0.158024691358024*G0_1_1 - 0.079012345679012*G0_2_0 - 0.158024691358024*G0_2_1;
    A[746] = -0.0112874779541444*G0_0_0 + 0.0310405643738978*G0_0_1 + 0.0310405643738976*G0_1_0 + 0.0902998236331571*G0_1_1 + 0.0310405643738976*G0_2_0 + 0.0902998236331571*G0_2_1;
    A[747] = -0.0112874779541447*G0_0_1 - 0.0112874779541446*G0_1_0 - 0.0451499118165786*G0_1_1 - 0.0112874779541446*G0_2_0 - 0.0451499118165786*G0_2_1;
    A[748] = -0.0225749559082892*G0_0_0 - 0.0225749559082892*G0_0_1 + 0.0112874779541446*G0_0_2 + 0.0112874779541446*G0_1_0 + 0.0112874779541447*G0_1_1 + 0.0112874779541446*G0_2_0 + 0.0112874779541447*G0_2_1;
    A[749] = -0.0112874779541445*G0_0_0 - 0.0112874779541445*G0_0_1 + 0.00282186948853621*G0_0_2 + 0.00282186948853605*G0_1_0 + 0.00282186948853607*G0_1_1 + 0.00282186948853601*G0_2_0 + 0.00282186948853604*G0_2_1;
    A[750] = 0.0112874779541446*G0_0_2 + 0.0112874779541447*G0_1_0 + 0.0112874779541448*G0_1_1 + 0.0112874779541447*G0_2_0 + 0.0112874779541447*G0_2_1;
    A[751] = -0.0225749559082892*G0_0_0 + 0.0112874779541446*G0_0_1 - 0.0225749559082892*G0_0_2 + 0.0112874779541446*G0_1_0 + 0.0112874779541447*G0_1_2 + 0.0112874779541446*G0_2_0 + 0.0112874779541447*G0_2_2;
    A[752] = -0.0112874779541446*G0_0_0 + 0.00282186948853612*G0_0_1 - 0.0112874779541446*G0_0_2 + 0.00282186948853612*G0_1_0 + 0.00282186948853612*G0_1_2 + 0.0028218694885361*G0_2_0 + 0.0028218694885361*G0_2_2;
    A[753] = 0.0112874779541446*G0_0_1 + 0.0112874779541447*G0_1_0 + 0.0112874779541447*G0_1_2 + 0.0112874779541447*G0_2_0 + 0.0112874779541447*G0_2_2;
    A[754] = 0.112874779541446*G0_0_0 + 0.0790123456790122*G0_0_1 + 0.0790123456790122*G0_0_2 + 0.0338624338624337*G0_1_0 + 0.0451499118165784*G0_1_1 + 0.0451499118165784*G0_1_2 + 0.0338624338624337*G0_2_0 + 0.0451499118165784*G0_2_1 + 0.0451499118165784*G0_2_2;
    A[755] = -0.22010582010582*G0_0_0 - 0.132627865961199*G0_0_1 - 0.132627865961199*G0_0_2 - 0.0592592592592591*G0_1_0 - 0.0902998236331568*G0_1_1 - 0.0902998236331568*G0_1_2 - 0.0592592592592591*G0_2_0 - 0.0902998236331568*G0_2_1 - 0.0902998236331568*G0_2_2;
    A[756] = 0.203174603174603*G0_0_0 + 0.0790123456790122*G0_0_1 + 0.0790123456790122*G0_0_2 + 0.0790123456790122*G0_1_0 + 0.158024691358025*G0_1_1 + 0.158024691358025*G0_1_2 + 0.0790123456790123*G0_2_0 + 0.158024691358025*G0_2_1 + 0.158024691358025*G0_2_2;
    A[757] = -0.0451499118165781*G0_0_0 - 0.0112874779541445*G0_0_1 - 0.0112874779541443*G0_0_2 - 0.0112874779541446*G0_1_0 - 0.112874779541446*G0_1_1 - 0.112874779541446*G0_1_2 - 0.0112874779541446*G0_2_0 - 0.112874779541446*G0_2_1 - 0.112874779541446*G0_2_2;
    A[758] = -0.0112874779541444*G0_0_1 - 0.0112874779541446*G0_0_2 - 0.0112874779541448*G0_1_0 + 0.0225749559082891*G0_1_1 + 0.022574955908289*G0_1_2 - 0.0112874779541449*G0_2_0 + 0.0225749559082891*G0_2_1 + 0.022574955908289*G0_2_2;
    A[759] = -0.0112874779541447*G0_0_1 - 0.0112874779541445*G0_0_2 - 0.0112874779541446*G0_1_0 + 0.0225749559082889*G0_1_1 + 0.0225749559082891*G0_1_2 - 0.0112874779541447*G0_2_0 + 0.0225749559082889*G0_2_1 + 0.022574955908289*G0_2_2;
    A[760] = -0.0451499118165783*G0_0_0 + 0.0112874779541446*G0_0_1 + 0.0112874779541447*G0_0_2 + 0.0112874779541448*G0_1_0 + 0.0112874779541448*G0_2_0;
    A[761] = 0.0112874779541448*G0_0_1 + 0.0112874779541445*G0_0_2 + 0.0112874779541449*G0_1_0 + 0.0112874779541449*G0_2_0;
    A[762] = 0.0112874779541444*G0_0_1 + 0.0112874779541446*G0_0_2 + 0.0112874779541447*G0_1_0 + 0.0112874779541447*G0_2_0;
    A[763] = 0.0677248677248677*G0_0_0 + 0.0112874779541448*G0_0_1 - 0.0338624338624337*G0_0_2 - 0.0338624338624337*G0_1_0 - 0.0225749559082892*G0_1_1 - 0.0338624338624337*G0_2_0 - 0.0225749559082892*G0_2_1;
    A[764] = -0.0677248677248676*G0_0_0 + 0.0112874779541445*G0_0_1 + 0.101587301587301*G0_0_2 + 0.101587301587301*G0_1_0 + 0.112874779541446*G0_1_1 + 0.101587301587301*G0_2_0 + 0.112874779541446*G0_2_1;
    A[765] = 0.0225749559082891*G0_0_0 + 0.0112874779541447*G0_0_1 - 0.0338624338624338*G0_0_2 - 0.0338624338624336*G0_1_0 - 0.022574955908289*G0_1_1 - 0.0338624338624335*G0_2_0 - 0.022574955908289*G0_2_1;
    A[766] = 0.0677248677248676*G0_0_0 - 0.0338624338624338*G0_0_1 + 0.0112874779541447*G0_0_2 - 0.0338624338624336*G0_1_0 - 0.0225749559082889*G0_1_2 - 0.0338624338624336*G0_2_0 - 0.022574955908289*G0_2_2;
    A[767] = -0.0677248677248676*G0_0_0 + 0.101587301587301*G0_0_1 + 0.0112874779541443*G0_0_2 + 0.101587301587301*G0_1_0 + 0.112874779541446*G0_1_2 + 0.101587301587301*G0_2_0 + 0.112874779541446*G0_2_2;
    A[768] = 0.022574955908289*G0_0_0 - 0.0338624338624336*G0_0_1 + 0.0112874779541446*G0_0_2 - 0.0338624338624338*G0_1_0 - 0.0225749559082891*G0_1_2 - 0.0338624338624337*G0_2_0 - 0.0225749559082891*G0_2_2;
    A[769] = 0.0902998236331563*G0_0_0;
    A[770] = 0.0183421516754849*G0_0_0 + 0.0183421516754849*G0_0_1 + 0.0183421516754849*G0_0_2 + 0.0183421516754849*G0_1_0 + 0.0183421516754849*G0_1_1 + 0.0183421516754849*G0_1_2 + 0.0183421516754848*G0_2_0 + 0.0183421516754848*G0_2_1 + 0.0183421516754848*G0_2_2;
    A[771] = 0.0493827160493824*G0_0_0 + 0.00705467372134032*G0_1_0 + 0.0070546737213403*G0_2_0;
    A[772] = 0.00705467372134054*G0_0_1 - 0.018342151675485*G0_1_1 + 0.00705467372134044*G0_2_1;
    A[773] = 0.00705467372134035*G0_0_2 + 0.00705467372134035*G0_1_2 - 0.018342151675485*G0_2_2;
    A[774] = -0.0677248677248676*G0_0_1 - 0.0225749559082891*G0_0_2 + 0.0225749559082892*G0_1_1 + 0.0112874779541446*G0_1_2 - 0.033862433862434*G0_2_1 - 0.0225749559082893*G0_2_2;
    A[775] = -0.0846560846560843*G0_0_1 - 0.0846560846560845*G0_0_2 - 0.0169312169312168*G0_1_1 - 0.019753086419753*G0_1_2 - 0.0197530864197531*G0_2_1 - 0.0169312169312172*G0_2_2;
    A[776] = -0.0225749559082892*G0_0_1 - 0.0677248677248675*G0_0_2 - 0.0225749559082893*G0_1_1 - 0.0338624338624339*G0_1_2 + 0.0112874779541447*G0_2_1 + 0.0225749559082895*G0_2_2;
    A[777] = -0.0677248677248674*G0_0_0 + 0.0112874779541446*G0_0_2 + 0.203174603174603*G0_1_0 + 0.112874779541446*G0_1_2 + 0.101587301587301*G0_2_0 + 0.112874779541445*G0_2_2;
    A[778] = 0.118518518518518*G0_0_0 + 0.0931216931216929*G0_0_2 + 0.0507936507936506*G0_1_0 + 0.186243386243386*G0_1_2 - 0.042328042328042*G0_2_0 - 0.0846560846560841*G0_2_2;
    A[779] = -0.0225749559082891*G0_0_0 - 0.0338624338624339*G0_0_2 - 0.0225749559082893*G0_1_0 - 0.0677248677248678*G0_1_2 + 0.0112874779541447*G0_2_0 + 0.0677248677248677*G0_2_2;
    A[780] = -0.0677248677248674*G0_0_0 + 0.0112874779541446*G0_0_1 + 0.101587301587301*G0_1_0 + 0.112874779541446*G0_1_1 + 0.203174603174602*G0_2_0 + 0.112874779541445*G0_2_1;
    A[781] = 0.118518518518518*G0_0_0 + 0.0931216931216934*G0_0_1 - 0.0423280423280419*G0_1_0 - 0.0846560846560845*G0_1_1 + 0.0507936507936513*G0_2_0 + 0.186243386243386*G0_2_1;
    A[782] = -0.022574955908289*G0_0_0 - 0.033862433862434*G0_0_1 + 0.0112874779541446*G0_1_0 + 0.0677248677248677*G0_1_1 - 0.0225749559082893*G0_2_0 - 0.0677248677248677*G0_2_1;
    A[783] = -0.0225749559082896*G0_0_0 - 0.0225749559082894*G0_0_1 - 0.0112874779541445*G0_0_2 - 0.0225749559082894*G0_1_0 - 0.0225749559082894*G0_1_1 - 0.0112874779541447*G0_1_2 - 0.0112874779541449*G0_2_0 - 0.0112874779541449*G0_2_1;
    A[784] = 0.0169312169312169*G0_0_0 + 0.0169312169312166*G0_0_1 - 0.00282186948853615*G0_0_2 + 0.016931216931217*G0_1_0 + 0.0169312169312169*G0_1_1 - 0.00282186948853586*G0_1_2 - 0.00282186948853588*G0_2_0 - 0.00282186948853602*G0_2_1;
    A[785] = 0.0225749559082891*G0_0_0 + 0.0225749559082892*G0_0_1 - 0.0112874779541447*G0_0_2 + 0.0225749559082893*G0_1_0 + 0.0225749559082892*G0_1_1 - 0.0112874779541448*G0_1_2 - 0.0112874779541447*G0_2_0 - 0.0112874779541447*G0_2_1;
    A[786] = -0.0225749559082894*G0_0_0 - 0.0112874779541446*G0_0_1 - 0.0225749559082894*G0_0_2 - 0.0112874779541447*G0_1_0 - 0.0112874779541447*G0_1_2 - 0.0225749559082894*G0_2_0 - 0.0112874779541445*G0_2_1 - 0.0225749559082893*G0_2_2;
    A[787] = 0.0169312169312172*G0_0_0 - 0.00282186948853588*G0_0_1 + 0.0169312169312174*G0_0_2 - 0.00282186948853592*G0_1_0 - 0.00282186948853589*G0_1_2 + 0.0169312169312173*G0_2_0 - 0.002821869488536*G0_2_1 + 0.0169312169312174*G0_2_2;
    A[788] = 0.0225749559082891*G0_0_0 - 0.0112874779541449*G0_0_1 + 0.0225749559082889*G0_0_2 - 0.0112874779541447*G0_1_0 - 0.0112874779541447*G0_1_2 + 0.0225749559082891*G0_2_0 - 0.0112874779541449*G0_2_1 + 0.0225749559082892*G0_2_2;
    A[789] = -0.0451499118165781*G0_0_0 - 0.0564373897707231*G0_0_1 - 0.056437389770723*G0_0_2 - 0.0564373897707227*G0_1_0 - 0.0677248677248675*G0_1_1 - 0.0677248677248675*G0_1_2 - 0.0564373897707224*G0_2_0 - 0.0677248677248674*G0_2_1 - 0.0677248677248674*G0_2_2;
    A[790] = 0.0225749559082887*G0_0_0 + 0.0423280423280422*G0_0_1 + 0.0423280423280421*G0_0_2 + 0.0423280423280419*G0_1_0 + 0.0846560846560843*G0_1_1 + 0.0846560846560843*G0_1_2 + 0.0423280423280416*G0_2_0 + 0.0846560846560842*G0_2_1 + 0.0846560846560842*G0_2_2;
    A[791] = -0.0451499118165781*G0_0_0 - 0.0112874779541446*G0_0_1 - 0.0112874779541446*G0_0_2 - 0.0112874779541445*G0_1_0 - 0.112874779541446*G0_1_1 - 0.112874779541446*G0_1_2 - 0.0112874779541443*G0_2_0 - 0.112874779541446*G0_2_1 - 0.112874779541446*G0_2_2;
    A[792] = 0.632098765432098*G0_0_0 + 0.270899470899471*G0_0_1 + 0.270899470899471*G0_0_2 + 0.270899470899471*G0_1_0 + 0.54179894179894*G0_1_1 + 0.27089947089947*G0_1_2 + 0.270899470899471*G0_2_0 + 0.27089947089947*G0_2_1 + 0.541798941798941*G0_2_2;
    A[793] = -0.135449735449735*G0_0_0 + 0.225749559082893*G0_0_1 + 0.0677248677248681*G0_0_2 - 0.045149911816578*G0_1_0 - 0.135449735449735*G0_1_1 - 0.067724867724867*G0_1_2 - 0.0677248677248676*G0_2_0 + 0.0677248677248684*G0_2_1;
    A[794] = -0.135449735449735*G0_0_0 + 0.0677248677248667*G0_0_1 + 0.225749559082892*G0_0_2 - 0.067724867724868*G0_1_0 + 0.0677248677248673*G0_1_2 - 0.0451499118165783*G0_2_0 - 0.0677248677248674*G0_2_1 - 0.135449735449735*G0_2_2;
    A[795] = 0.0902998236331565*G0_0_0 + 0.0451499118165788*G0_0_1 + 0.0451499118165783*G0_0_2 + 0.045149911816578*G0_1_0 + 0.0225749559082892*G0_1_2 + 0.0451499118165782*G0_2_0 + 0.0225749559082891*G0_2_1;
    A[796] = 0.135449735449735*G0_0_0 + 0.0451499118165782*G0_0_1 + 0.0677248677248672*G0_0_2 + 0.045149911816578*G0_1_0 + 0.0225749559082889*G0_1_2 + 0.0677248677248678*G0_2_0 + 0.0225749559082894*G0_2_1;
    A[797] = 0.135449735449735*G0_0_0 + 0.0677248677248676*G0_0_1 + 0.0451499118165784*G0_0_2 + 0.0677248677248678*G0_1_0 + 0.0225749559082892*G0_1_2 + 0.0451499118165781*G0_2_0 + 0.022574955908289*G0_2_1;
    A[798] = 0.0451499118165783*G0_0_0 + 0.0902998236331563*G0_0_1 + 0.0451499118165779*G0_0_2 + 0.0902998236331563*G0_1_0 + 0.135449735449734*G0_1_1 + 0.0677248677248672*G0_1_2 + 0.0451499118165783*G0_2_0 + 0.0677248677248674*G0_2_1;
    A[799] = 0.0451499118165784*G0_0_0 - 0.270899470899471*G0_0_1 - 0.135449735449735*G0_0_2 - 0.27089947089947*G0_1_0 - 0.541798941798941*G0_1_1 - 0.27089947089947*G0_1_2 - 0.135449735449735*G0_2_0 - 0.27089947089947*G0_2_1;
    A[800] = -0.135449735449734*G0_0_0 - 0.0677248677248669*G0_0_1 + 0.0451499118165788*G0_0_2 - 0.0677248677248677*G0_1_0 + 0.067724867724868*G0_1_2 + 0.045149911816578*G0_2_0 + 0.0677248677248673*G0_2_1;
    A[801] = 0.0451499118165781*G0_0_0 + 0.0451499118165784*G0_0_1 + 0.0902998236331566*G0_0_2 + 0.0451499118165779*G0_1_0 + 0.0677248677248669*G0_1_2 + 0.0902998236331563*G0_2_0 + 0.0677248677248671*G0_2_1 + 0.135449735449735*G0_2_2;
    A[802] = 0.0451499118165785*G0_0_0 - 0.135449735449735*G0_0_1 - 0.270899470899471*G0_0_2 - 0.135449735449734*G0_1_0 - 0.27089947089947*G0_1_2 - 0.270899470899469*G0_2_0 - 0.27089947089947*G0_2_1 - 0.541798941798941*G0_2_2;
    A[803] = -0.135449735449736*G0_0_0 + 0.0451499118165785*G0_0_1 - 0.0677248677248682*G0_0_2 + 0.0451499118165778*G0_1_0 + 0.0677248677248671*G0_1_2 - 0.0677248677248685*G0_2_0 + 0.0677248677248681*G0_2_1;
    A[804] = -0.722398589065254*G0_0_0 - 0.316049382716049*G0_0_1 - 0.316049382716048*G0_0_2 - 0.316049382716048*G0_1_0 - 0.135449735449734*G0_1_2 - 0.316049382716049*G0_2_0 - 0.135449735449735*G0_2_1;
    A[805] = 0.0183421516754849*G0_0_0 + 0.0183421516754849*G0_0_1 + 0.0183421516754849*G0_0_2 + 0.0183421516754849*G0_1_0 + 0.0183421516754849*G0_1_1 + 0.0183421516754849*G0_1_2 + 0.0183421516754849*G0_2_0 + 0.018342151675485*G0_2_1 + 0.0183421516754849*G0_2_2;
    A[806] = -0.0183421516754849*G0_0_0 + 0.00705467372134036*G0_1_0 + 0.00705467372134039*G0_2_0;
    A[807] = 0.00705467372134026*G0_0_1 + 0.0493827160493828*G0_1_1 + 0.00705467372134044*G0_2_1;
    A[808] = 0.00705467372134047*G0_0_2 + 0.00705467372134035*G0_1_2 - 0.0183421516754849*G0_2_2;
    A[809] = 0.203174603174604*G0_0_1 + 0.112874779541446*G0_0_2 - 0.0677248677248673*G0_1_1 + 0.0112874779541449*G0_1_2 + 0.101587301587302*G0_2_1 + 0.112874779541446*G0_2_2;
    A[810] = 0.0507936507936505*G0_0_1 + 0.186243386243386*G0_0_2 + 0.118518518518518*G0_1_1 + 0.0931216931216929*G0_1_2 - 0.0423280423280423*G0_2_1 - 0.0846560846560846*G0_2_2;
    A[811] = -0.0225749559082889*G0_0_1 - 0.0677248677248678*G0_0_2 - 0.022574955908289*G0_1_1 - 0.0338624338624336*G0_1_2 + 0.0112874779541448*G0_2_1 + 0.0677248677248676*G0_2_2;
    A[812] = 0.0225749559082891*G0_0_0 + 0.0112874779541449*G0_0_2 - 0.0677248677248676*G0_1_0 - 0.0225749559082891*G0_1_2 - 0.0338624338624336*G0_2_0 - 0.0225749559082889*G0_2_2;
    A[813] = -0.0169312169312166*G0_0_0 - 0.0197530864197532*G0_0_2 - 0.0846560846560842*G0_1_0 - 0.0846560846560844*G0_1_2 - 0.0197530864197531*G0_2_0 - 0.016931216931217*G0_2_2;
    A[814] = -0.0225749559082889*G0_0_0 - 0.0338624338624334*G0_0_2 - 0.022574955908289*G0_1_0 - 0.0677248677248673*G0_1_2 + 0.0112874779541448*G0_2_0 + 0.0225749559082894*G0_2_2;
    A[815] = 0.0677248677248675*G0_0_0 + 0.0112874779541448*G0_0_1 - 0.0338624338624335*G0_1_0 - 0.0225749559082891*G0_1_1 - 0.0677248677248673*G0_2_0 - 0.022574955908289*G0_2_1;
    A[816] = -0.0846560846560849*G0_0_0 - 0.0423280423280429*G0_0_1 + 0.0931216931216925*G0_1_0 + 0.118518518518518*G0_1_1 + 0.186243386243385*G0_2_0 + 0.0507936507936505*G0_2_1;
    A[817] = 0.112874779541446*G0_0_0 + 0.101587301587302*G0_0_1 + 0.0112874779541449*G0_1_0 - 0.0677248677248675*G0_1_1 + 0.112874779541446*G0_2_0 + 0.203174603174603*G0_2_1;
    A[818] = -0.0225749559082895*G0_0_0 - 0.0225749559082894*G0_0_1 - 0.0112874779541445*G0_0_2 - 0.0225749559082895*G0_1_0 - 0.0225749559082894*G0_1_1 - 0.0112874779541444*G0_1_2 - 0.0112874779541448*G0_2_0 - 0.0112874779541448*G0_2_1;
    A[819] = 0.016931216931217*G0_0_0 + 0.0169312169312171*G0_0_1 - 0.00282186948853624*G0_0_2 + 0.0169312169312169*G0_1_0 + 0.0169312169312169*G0_1_1 - 0.00282186948853649*G0_1_2 - 0.00282186948853633*G0_2_0 - 0.00282186948853631*G0_2_1;
    A[820] = 0.022574955908289*G0_0_0 + 0.0225749559082889*G0_0_1 - 0.0112874779541447*G0_0_2 + 0.022574955908289*G0_1_0 + 0.0225749559082891*G0_1_1 - 0.0112874779541444*G0_1_2 - 0.0112874779541447*G0_2_0 - 0.0112874779541447*G0_2_1;
    A[821] = -0.0677248677248677*G0_0_0 - 0.0564373897707228*G0_0_1 - 0.0677248677248677*G0_0_2 - 0.0564373897707232*G0_1_0 - 0.0451499118165784*G0_1_1 - 0.0564373897707232*G0_1_2 - 0.0677248677248676*G0_2_0 - 0.056437389770723*G0_2_1 - 0.0677248677248677*G0_2_2;
    A[822] = 0.0846560846560849*G0_0_0 + 0.0423280423280419*G0_0_1 + 0.0846560846560849*G0_0_2 + 0.0423280423280426*G0_1_0 + 0.0225749559082892*G0_1_1 + 0.0423280423280427*G0_1_2 + 0.0846560846560849*G0_2_0 + 0.0423280423280424*G0_2_1 + 0.0846560846560851*G0_2_2;
    A[823] = -0.112874779541447*G0_0_0 - 0.0112874779541445*G0_0_1 - 0.112874779541446*G0_0_2 - 0.0112874779541449*G0_1_0 - 0.0451499118165786*G0_1_1 - 0.0112874779541451*G0_1_2 - 0.112874779541446*G0_2_0 - 0.0112874779541448*G0_2_1 - 0.112874779541446*G0_2_2;
    A[824] = -0.0112874779541447*G0_0_1 - 0.0112874779541448*G0_0_2 - 0.0112874779541444*G0_1_0 - 0.0225749559082893*G0_1_1 - 0.0225749559082893*G0_1_2 - 0.0112874779541445*G0_2_0 - 0.0225749559082893*G0_2_1 - 0.0225749559082893*G0_2_2;
    A[825] = -0.00282186948853641*G0_0_1 - 0.00282186948853633*G0_0_2 - 0.00282186948853654*G0_1_0 + 0.0169312169312168*G0_1_1 + 0.0169312169312168*G0_1_2 - 0.00282186948853627*G0_2_0 + 0.0169312169312168*G0_2_1 + 0.0169312169312169*G0_2_2;
    A[826] = -0.0112874779541448*G0_0_1 - 0.0112874779541449*G0_0_2 - 0.0112874779541444*G0_1_0 + 0.0225749559082891*G0_1_1 + 0.0225749559082891*G0_1_2 - 0.0112874779541446*G0_2_0 + 0.022574955908289*G0_2_1 + 0.022574955908289*G0_2_2;
    A[827] = -0.135449735449735*G0_0_0 - 0.045149911816578*G0_0_1 - 0.0677248677248676*G0_0_2 + 0.225749559082893*G0_1_0 - 0.135449735449735*G0_1_1 + 0.0677248677248684*G0_1_2 + 0.0677248677248681*G0_2_0 - 0.067724867724867*G0_2_1;
    A[828] = 0.541798941798942*G0_0_0 + 0.270899470899471*G0_0_1 + 0.270899470899471*G0_0_2 + 0.270899470899471*G0_1_0 + 0.632098765432098*G0_1_1 + 0.27089947089947*G0_1_2 + 0.270899470899471*G0_2_0 + 0.27089947089947*G0_2_1 + 0.541798941798941*G0_2_2;
    A[829] = -0.0677248677248671*G0_0_1 + 0.0677248677248683*G0_0_2 + 0.0677248677248677*G0_1_0 - 0.135449735449735*G0_1_1 + 0.225749559082892*G0_1_2 - 0.0677248677248675*G0_2_0 - 0.0451499118165782*G0_2_1 - 0.135449735449735*G0_2_2;
    A[830] = 0.135449735449736*G0_0_0 + 0.0902998236331572*G0_0_1 + 0.0677248677248677*G0_0_2 + 0.0902998236331577*G0_1_0 + 0.0451499118165791*G0_1_1 + 0.0451499118165786*G0_1_2 + 0.0677248677248677*G0_2_0 + 0.0451499118165788*G0_2_1;
    A[831] = -0.541798941798942*G0_0_0 - 0.270899470899471*G0_0_1 - 0.270899470899471*G0_0_2 - 0.270899470899471*G0_1_0 + 0.0451499118165778*G0_1_1 - 0.135449735449735*G0_1_2 - 0.270899470899471*G0_2_0 - 0.135449735449736*G0_2_1;
    A[832] = -0.0677248677248677*G0_0_1 + 0.0677248677248678*G0_0_2 - 0.067724867724868*G0_1_0 - 0.135449735449735*G0_1_1 + 0.0451499118165782*G0_1_2 + 0.0677248677248672*G0_2_0 + 0.0451499118165786*G0_2_1;
    A[833] = 0.0451499118165783*G0_0_1 + 0.0225749559082893*G0_0_2 + 0.0451499118165786*G0_1_0 + 0.0902998236331573*G0_1_1 + 0.0451499118165786*G0_1_2 + 0.0225749559082891*G0_2_0 + 0.045149911816578*G0_2_1;
    A[834] = 0.045149911816578*G0_0_1 + 0.0225749559082892*G0_0_2 + 0.0451499118165782*G0_1_0 + 0.135449735449735*G0_1_1 + 0.0677248677248676*G0_1_2 + 0.0225749559082892*G0_2_0 + 0.067724867724867*G0_2_1;
    A[835] = 0.0677248677248669*G0_0_1 + 0.0225749559082889*G0_0_2 + 0.0677248677248675*G0_1_0 + 0.135449735449735*G0_1_1 + 0.045149911816578*G0_1_2 + 0.0225749559082894*G0_2_0 + 0.045149911816578*G0_2_1;
    A[836] = 0.0451499118165786*G0_0_1 + 0.0677248677248675*G0_0_2 + 0.0451499118165784*G0_1_0 + 0.0451499118165788*G0_1_1 + 0.0902998236331574*G0_1_2 + 0.0677248677248673*G0_2_0 + 0.090299823633157*G0_2_1 + 0.135449735449735*G0_2_2;
    A[837] = 0.0451499118165791*G0_0_1 + 0.0677248677248676*G0_0_2 + 0.0451499118165783*G0_1_0 - 0.135449735449735*G0_1_1 - 0.0677248677248683*G0_1_2 + 0.0677248677248676*G0_2_0 - 0.0677248677248675*G0_2_1;
    A[838] = -0.135449735449736*G0_0_1 - 0.270899470899471*G0_0_2 - 0.135449735449735*G0_1_0 + 0.0451499118165781*G0_1_1 - 0.270899470899471*G0_1_2 - 0.270899470899471*G0_2_0 - 0.270899470899471*G0_2_1 - 0.541798941798941*G0_2_2;
    A[839] = -0.316049382716049*G0_0_1 - 0.135449735449736*G0_0_2 - 0.31604938271605*G0_1_0 - 0.722398589065255*G0_1_1 - 0.31604938271605*G0_1_2 - 0.135449735449736*G0_2_0 - 0.316049382716048*G0_2_1;
    A[840] = 0.0183421516754851*G0_0_0 + 0.0183421516754851*G0_0_1 + 0.0183421516754851*G0_0_2 + 0.0183421516754851*G0_1_0 + 0.0183421516754851*G0_1_1 + 0.0183421516754851*G0_1_2 + 0.0183421516754851*G0_2_0 + 0.0183421516754851*G0_2_1 + 0.0183421516754851*G0_2_2;
    A[841] = -0.0183421516754849*G0_0_0 + 0.00705467372134042*G0_1_0 + 0.00705467372134037*G0_2_0;
    A[842] = 0.00705467372134038*G0_0_1 - 0.018342151675485*G0_1_1 + 0.00705467372134035*G0_2_1;
    A[843] = 0.00705467372134031*G0_0_2 + 0.00705467372134038*G0_1_2 + 0.0493827160493827*G0_2_2;
    A[844] = -0.0677248677248678*G0_0_1 - 0.0225749559082893*G0_0_2 + 0.0677248677248676*G0_1_1 + 0.0112874779541444*G0_1_2 - 0.0338624338624337*G0_2_1 - 0.0225749559082893*G0_2_2;
    A[845] = 0.186243386243386*G0_0_1 + 0.0507936507936506*G0_0_2 - 0.0846560846560844*G0_1_1 - 0.0423280423280419*G0_1_2 + 0.0931216931216931*G0_2_1 + 0.118518518518519*G0_2_2;
    A[846] = 0.112874779541446*G0_0_1 + 0.203174603174603*G0_0_2 + 0.112874779541446*G0_1_1 + 0.101587301587301*G0_1_2 + 0.0112874779541445*G0_2_1 - 0.0677248677248677*G0_2_2;
    A[847] = 0.0677248677248676*G0_0_0 + 0.0112874779541446*G0_0_2 - 0.0677248677248674*G0_1_0 - 0.0225749559082889*G0_1_2 - 0.0338624338624337*G0_2_0 - 0.0225749559082891*G0_2_2;
    A[848] = -0.0846560846560846*G0_0_0 - 0.0423280423280425*G0_0_2 + 0.186243386243385*G0_1_0 + 0.0507936507936501*G0_1_2 + 0.0931216931216927*G0_2_0 + 0.118518518518518*G0_2_2;
    A[849] = 0.112874779541446*G0_0_0 + 0.101587301587302*G0_0_2 + 0.112874779541446*G0_1_0 + 0.203174603174603*G0_1_2 + 0.0112874779541446*G0_2_0 - 0.0677248677248677*G0_2_2;
    A[850] = 0.0225749559082891*G0_0_0 + 0.0112874779541446*G0_0_1 - 0.0338624338624336*G0_1_0 - 0.0225749559082889*G0_1_1 - 0.0677248677248675*G0_2_0 - 0.0225749559082891*G0_2_1;
    A[851] = -0.0169312169312167*G0_0_0 - 0.0197530864197531*G0_0_1 - 0.019753086419753*G0_1_0 - 0.016931216931217*G0_1_1 - 0.0846560846560846*G0_2_0 - 0.0846560846560846*G0_2_1;
    A[852] = -0.0225749559082894*G0_0_0 - 0.0338624338624337*G0_0_1 + 0.0112874779541445*G0_1_0 + 0.0225749559082892*G0_1_1 - 0.0225749559082893*G0_2_0 - 0.0677248677248675*G0_2_1;
    A[853] = -0.0677248677248676*G0_0_0 - 0.0677248677248676*G0_0_1 - 0.0564373897707233*G0_0_2 - 0.0677248677248675*G0_1_0 - 0.0677248677248675*G0_1_1 - 0.0564373897707234*G0_1_2 - 0.0564373897707231*G0_2_0 - 0.056437389770723*G0_2_1 - 0.0451499118165787*G0_2_2;
    A[854] = 0.0846560846560846*G0_0_0 + 0.0846560846560845*G0_0_1 + 0.0423280423280423*G0_0_2 + 0.0846560846560843*G0_1_0 + 0.0846560846560842*G0_1_1 + 0.0423280423280424*G0_1_2 + 0.0423280423280422*G0_2_0 + 0.042328042328042*G0_2_1 + 0.0225749559082893*G0_2_2;
    A[855] = -0.112874779541446*G0_0_0 - 0.112874779541446*G0_0_1 - 0.0112874779541446*G0_0_2 - 0.112874779541446*G0_1_0 - 0.112874779541446*G0_1_1 - 0.0112874779541448*G0_1_2 - 0.0112874779541446*G0_2_0 - 0.0112874779541445*G0_2_1 - 0.0451499118165786*G0_2_2;
    A[856] = -0.0225749559082892*G0_0_0 - 0.0112874779541448*G0_0_1 - 0.0225749559082891*G0_0_2 - 0.0112874779541444*G0_1_0 - 0.0112874779541443*G0_1_2 - 0.0225749559082891*G0_2_0 - 0.0112874779541447*G0_2_1 - 0.022574955908289*G0_2_2;
    A[857] = 0.0169312169312168*G0_0_0 - 0.00282186948853627*G0_0_1 + 0.0169312169312168*G0_0_2 - 0.00282186948853629*G0_1_0 - 0.00282186948853626*G0_1_2 + 0.0169312169312167*G0_2_0 - 0.00282186948853631*G0_2_1 + 0.0169312169312167*G0_2_2;
    A[858] = 0.0225749559082894*G0_0_0 - 0.0112874779541444*G0_0_1 + 0.0225749559082894*G0_0_2 - 0.0112874779541444*G0_1_0 - 0.0112874779541444*G0_1_2 + 0.0225749559082893*G0_2_0 - 0.0112874779541443*G0_2_1 + 0.0225749559082892*G0_2_2;
    A[859] = -0.0112874779541445*G0_0_1 - 0.0112874779541446*G0_0_2 - 0.0112874779541449*G0_1_0 - 0.0225749559082891*G0_1_1 - 0.022574955908289*G0_1_2 - 0.0112874779541448*G0_2_0 - 0.0225749559082891*G0_2_1 - 0.0225749559082891*G0_2_2;
    A[860] = -0.00282186948853642*G0_0_1 - 0.00282186948853641*G0_0_2 - 0.00282186948853601*G0_1_0 + 0.0169312169312167*G0_1_1 + 0.0169312169312166*G0_1_2 - 0.00282186948853621*G0_2_0 + 0.0169312169312167*G0_2_1 + 0.0169312169312166*G0_2_2;
    A[861] = -0.0112874779541446*G0_0_1 - 0.0112874779541447*G0_0_2 - 0.0112874779541447*G0_1_0 + 0.0225749559082889*G0_1_1 + 0.0225749559082889*G0_1_2 - 0.0112874779541445*G0_2_0 + 0.0225749559082891*G0_2_1 + 0.022574955908289*G0_2_2;
    A[862] = -0.135449735449735*G0_0_0 - 0.067724867724868*G0_0_1 - 0.0451499118165783*G0_0_2 + 0.0677248677248667*G0_1_0 - 0.0677248677248674*G0_1_2 + 0.225749559082892*G0_2_0 + 0.0677248677248673*G0_2_1 - 0.135449735449735*G0_2_2;
    A[863] = 0.0677248677248677*G0_0_1 - 0.0677248677248675*G0_0_2 - 0.0677248677248671*G0_1_0 - 0.135449735449735*G0_1_1 - 0.0451499118165782*G0_1_2 + 0.0677248677248683*G0_2_0 + 0.225749559082892*G0_2_1 - 0.135449735449735*G0_2_2;
    A[864] = 0.541798941798941*G0_0_0 + 0.27089947089947*G0_0_1 + 0.27089947089947*G0_0_2 + 0.27089947089947*G0_1_0 + 0.54179894179894*G0_1_1 + 0.270899470899469*G0_1_2 + 0.27089947089947*G0_2_0 + 0.270899470899469*G0_2_1 + 0.632098765432097*G0_2_2;
    A[865] = 0.135449735449736*G0_0_0 + 0.0677248677248678*G0_0_1 + 0.0902998236331571*G0_0_2 + 0.0677248677248674*G0_1_0 + 0.0451499118165781*G0_1_2 + 0.0902998236331572*G0_2_0 + 0.0451499118165787*G0_2_1 + 0.0451499118165783*G0_2_2;
    A[866] = 0.0677248677248674*G0_0_1 - 0.0677248677248676*G0_0_2 + 0.0677248677248671*G0_1_0 + 0.045149911816578*G0_1_2 - 0.0677248677248682*G0_2_0 + 0.0451499118165779*G0_2_1 - 0.135449735449735*G0_2_2;
    A[867] = -0.541798941798941*G0_0_0 - 0.270899470899471*G0_0_1 - 0.270899470899471*G0_0_2 - 0.27089947089947*G0_1_0 - 0.135449735449735*G0_1_2 - 0.27089947089947*G0_2_0 - 0.135449735449735*G0_2_1 + 0.0451499118165785*G0_2_2;
    A[868] = 0.067724867724868*G0_0_1 + 0.0451499118165787*G0_0_2 + 0.0677248677248672*G0_1_0 + 0.135449735449735*G0_1_1 + 0.0902998236331565*G0_1_2 + 0.0451499118165783*G0_2_0 + 0.0902998236331568*G0_2_1 + 0.0451499118165783*G0_2_2;
    A[869] = 0.0677248677248678*G0_0_1 + 0.0451499118165789*G0_0_2 + 0.0677248677248674*G0_1_0 - 0.0677248677248666*G0_1_2 + 0.0451499118165781*G0_2_0 - 0.0677248677248674*G0_2_1 - 0.135449735449735*G0_2_2;
    A[870] = -0.27089947089947*G0_0_1 - 0.135449735449736*G0_0_2 - 0.270899470899469*G0_1_0 - 0.54179894179894*G0_1_1 - 0.27089947089947*G0_1_2 - 0.135449735449734*G0_2_0 - 0.27089947089947*G0_2_1 + 0.0451499118165785*G0_2_2;
    A[871] = 0.0225749559082893*G0_0_1 + 0.0451499118165786*G0_0_2 + 0.0225749559082886*G0_1_0 + 0.045149911816578*G0_1_2 + 0.045149911816578*G0_2_0 + 0.0451499118165785*G0_2_1 + 0.0902998236331569*G0_2_2;
    A[872] = 0.0225749559082893*G0_0_1 + 0.0451499118165783*G0_0_2 + 0.0225749559082892*G0_1_0 + 0.0677248677248673*G0_1_2 + 0.0451499118165783*G0_2_0 + 0.0677248677248679*G0_2_1 + 0.135449735449735*G0_2_2;
    A[873] = 0.022574955908289*G0_0_1 + 0.0677248677248674*G0_0_2 + 0.0225749559082891*G0_1_0 + 0.0451499118165781*G0_1_2 + 0.0677248677248676*G0_2_0 + 0.045149911816578*G0_2_1 + 0.135449735449735*G0_2_2;
    A[874] = -0.135449735449735*G0_0_1 - 0.316049382716048*G0_0_2 - 0.135449735449734*G0_1_0 - 0.316049382716048*G0_1_2 - 0.316049382716048*G0_2_0 - 0.316049382716049*G0_2_1 - 0.722398589065254*G0_2_2;
    A[875] = 0.0493827160493827*G0_0_0 + 0.0493827160493826*G0_0_1 + 0.0493827160493826*G0_0_2 + 0.0423280423280423*G0_1_0 + 0.0423280423280424*G0_1_1 + 0.0423280423280424*G0_1_2 + 0.0423280423280423*G0_2_0 + 0.0423280423280424*G0_2_1 + 0.0423280423280424*G0_2_2;
    A[876] = 0.0183421516754849*G0_0_0;
    A[877] = -0.00705467372134027*G0_0_1 - 0.0253968253968253*G0_1_1;
    A[878] = -0.00705467372134037*G0_0_2 - 0.0253968253968254*G0_2_2;
    A[879] = 0.0677248677248673*G0_0_1 + 0.0225749559082891*G0_0_2 + 0.0902998236331565*G0_1_1 + 0.0338624338624337*G0_1_2 + 0.0338624338624335*G0_2_1;
    A[880] = 0.0846560846560852*G0_0_1 + 0.0846560846560848*G0_0_2 + 0.0677248677248679*G0_1_1 + 0.0649029982363315*G0_1_2 + 0.0649029982363318*G0_2_1 + 0.0677248677248677*G0_2_2;
    A[881] = 0.0225749559082893*G0_0_1 + 0.0677248677248678*G0_0_2 + 0.0338624338624339*G0_1_2 + 0.0338624338624339*G0_2_1 + 0.0902998236331571*G0_2_2;
    A[882] = -0.0225749559082893*G0_0_0 - 0.0112874779541448*G0_0_2 - 0.0112874779541446*G0_2_0;
    A[883] = 0.0169312169312168*G0_0_0 + 0.019753086419753*G0_0_2 + 0.019753086419753*G0_2_0 + 0.0225749559082894*G0_2_2;
    A[884] = 0.0225749559082893*G0_0_0 + 0.0338624338624338*G0_0_2 + 0.0338624338624339*G0_2_0 + 0.0451499118165784*G0_2_2;
    A[885] = -0.0225749559082893*G0_0_0 - 0.0112874779541448*G0_0_1 - 0.0112874779541449*G0_1_0;
    A[886] = 0.0169312169312168*G0_0_0 + 0.0197530864197531*G0_0_1 + 0.0197530864197533*G0_1_0 + 0.0225749559082894*G0_1_1;
    A[887] = 0.0225749559082892*G0_0_0 + 0.0338624338624337*G0_0_1 + 0.0338624338624338*G0_1_0 + 0.0451499118165784*G0_1_1;
    A[888] = -0.0677248677248681*G0_0_0 - 0.067724867724868*G0_0_1 - 0.0790123456790122*G0_0_2 - 0.270899470899471*G0_1_0 - 0.270899470899471*G0_1_1 - 0.169312169312169*G0_1_2 - 0.169312169312169*G0_2_0 - 0.169312169312169*G0_2_1 - 0.0677248677248679*G0_2_2;
    A[889] = 0.118518518518519*G0_0_0 + 0.118518518518519*G0_0_1 + 0.0253968253968253*G0_0_2 + 0.0677248677248679*G0_1_0 + 0.0677248677248679*G0_1_1 + 0.160846560846561*G0_1_2 + 0.160846560846561*G0_2_0 + 0.160846560846561*G0_2_1 - 0.0169312169312166*G0_2_2;
    A[890] = -0.0225749559082894*G0_0_0 - 0.0225749559082893*G0_0_1 + 0.0112874779541445*G0_0_2 - 0.0338624338624342*G0_1_2 - 0.0338624338624339*G0_2_0 - 0.0338624338624339*G0_2_1 + 0.0677248677248675*G0_2_2;
    A[891] = -0.0677248677248679*G0_0_0 - 0.0790123456790122*G0_0_1 - 0.0677248677248679*G0_0_2 - 0.169312169312169*G0_1_0 - 0.0677248677248677*G0_1_1 - 0.169312169312169*G0_1_2 - 0.27089947089947*G0_2_0 - 0.169312169312169*G0_2_1 - 0.270899470899471*G0_2_2;
    A[892] = 0.118518518518519*G0_0_0 + 0.0253968253968254*G0_0_1 + 0.118518518518519*G0_0_2 + 0.160846560846561*G0_1_0 - 0.0169312169312169*G0_1_1 + 0.160846560846561*G0_1_2 + 0.0677248677248676*G0_2_0 + 0.160846560846561*G0_2_1 + 0.0677248677248675*G0_2_2;
    A[893] = -0.0225749559082892*G0_0_0 + 0.0112874779541443*G0_0_1 - 0.0225749559082892*G0_0_2 - 0.0338624338624338*G0_1_0 + 0.0677248677248675*G0_1_1 - 0.0338624338624339*G0_1_2 - 0.0338624338624338*G0_2_1;
    A[894] = -0.0451499118165781*G0_0_0 - 0.0338624338624339*G0_0_1 - 0.0338624338624339*G0_0_2 - 0.0338624338624337*G0_1_0 - 0.135449735449735*G0_1_1 - 0.135449735449735*G0_1_2 - 0.0338624338624338*G0_2_0 - 0.135449735449735*G0_2_1 - 0.135449735449735*G0_2_2;
    A[895] = 0.0225749559082888*G0_0_0 - 0.0197530864197534*G0_0_1 - 0.0197530864197534*G0_0_2 - 0.0197530864197533*G0_1_0 + 0.0225749559082891*G0_1_1 + 0.0225749559082891*G0_1_2 - 0.0197530864197532*G0_2_0 + 0.0225749559082889*G0_2_1 + 0.0225749559082889*G0_2_2;
    A[896] = -0.0451499118165783*G0_0_0 + 0.0112874779541448*G0_0_1 + 0.0112874779541448*G0_0_2 + 0.0112874779541446*G0_1_0 + 0.0112874779541447*G0_2_0;
    A[897] = 0.0902998236331565*G0_0_0 + 0.045149911816578*G0_0_1 + 0.0451499118165782*G0_0_2 + 0.0451499118165788*G0_1_0 + 0.0225749559082892*G0_1_2 + 0.0451499118165783*G0_2_0 + 0.0225749559082892*G0_2_1;
    A[898] = 0.135449735449736*G0_0_0 + 0.0902998236331577*G0_0_1 + 0.0677248677248677*G0_0_2 + 0.0902998236331572*G0_1_0 + 0.0451499118165791*G0_1_1 + 0.0451499118165788*G0_1_2 + 0.0677248677248677*G0_2_0 + 0.0451499118165786*G0_2_1;
    A[899] = 0.135449735449736*G0_0_0 + 0.0677248677248674*G0_0_1 + 0.0902998236331572*G0_0_2 + 0.0677248677248678*G0_1_0 + 0.0451499118165787*G0_1_2 + 0.0902998236331571*G0_2_0 + 0.0451499118165781*G0_2_1 + 0.0451499118165783*G0_2_2;
    A[900] = 0.632098765432098*G0_0_0 + 0.361199294532628*G0_0_1 + 0.361199294532628*G0_0_2 + 0.361199294532627*G0_1_0 + 0.632098765432098*G0_1_1 + 0.361199294532627*G0_1_2 + 0.361199294532628*G0_2_0 + 0.361199294532627*G0_2_1 + 0.632098765432098*G0_2_2;
    A[901] = -0.135449735449736*G0_0_0 - 0.361199294532627*G0_0_1 - 0.203174603174604*G0_0_2 - 0.090299823633157*G0_1_0 - 0.451499118165784*G0_1_1 - 0.225749559082892*G0_1_2 - 0.0677248677248675*G0_2_0 - 0.225749559082892*G0_2_1 - 0.135449735449735*G0_2_2;
    A[902] = -0.135449735449736*G0_0_0 - 0.203174603174604*G0_0_1 - 0.361199294532628*G0_0_2 - 0.0677248677248679*G0_1_0 - 0.135449735449736*G0_1_1 - 0.225749559082892*G0_1_2 - 0.0902998236331571*G0_2_0 - 0.225749559082893*G0_2_1 - 0.451499118165785*G0_2_2;
    A[903] = 0.0451499118165783*G0_0_0 + 0.316049382716049*G0_0_1 + 0.180599647266314*G0_0_2 + 0.316049382716049*G0_1_0 + 0.0451499118165785*G0_1_1 + 0.180599647266313*G0_1_2 + 0.180599647266314*G0_2_0 + 0.180599647266314*G0_2_1 + 0.316049382716049*G0_2_2;
    A[904] = 0.0451499118165788*G0_0_0 - 0.0451499118165779*G0_0_1 - 0.0451499118165781*G0_1_0 - 0.0225749559082895*G0_1_2 - 0.0225749559082891*G0_2_1 - 0.0451499118165784*G0_2_2;
    A[905] = -0.135449735449735*G0_0_0 - 0.0677248677248677*G0_0_1 - 0.180599647266314*G0_0_2 - 0.0677248677248679*G0_1_0 - 0.0451499118165782*G0_1_2 - 0.180599647266314*G0_2_0 - 0.0451499118165783*G0_2_1 - 0.225749559082892*G0_2_2;
    A[906] = 0.0451499118165784*G0_0_0 + 0.180599647266314*G0_0_1 + 0.316049382716049*G0_0_2 + 0.180599647266313*G0_1_0 + 0.316049382716049*G0_1_1 + 0.180599647266314*G0_1_2 + 0.316049382716049*G0_2_0 + 0.180599647266313*G0_2_1 + 0.0451499118165783*G0_2_2;
    A[907] = 0.0451499118165789*G0_0_0 - 0.0451499118165781*G0_0_2 - 0.0451499118165784*G0_1_1 - 0.022574955908289*G0_1_2 - 0.0451499118165779*G0_2_0 - 0.0225749559082888*G0_2_1;
    A[908] = -0.135449735449736*G0_0_0 - 0.180599647266314*G0_0_1 - 0.0677248677248677*G0_0_2 - 0.180599647266314*G0_1_0 - 0.225749559082892*G0_1_1 - 0.0451499118165787*G0_1_2 - 0.0677248677248677*G0_2_0 - 0.0451499118165783*G0_2_1;
    A[909] = -0.722398589065254*G0_0_0 - 0.406349206349206*G0_0_1 - 0.406349206349206*G0_0_2 - 0.406349206349206*G0_1_0 - 0.0902998236331573*G0_1_1 - 0.225749559082893*G0_1_2 - 0.406349206349206*G0_2_0 - 0.225749559082892*G0_2_1 - 0.0902998236331569*G0_2_2;
    A[910] = -0.0183421516754849*G0_0_0 - 0.0183421516754849*G0_0_1 - 0.0183421516754849*G0_0_2 - 0.0253968253968253*G0_1_0 - 0.0253968253968254*G0_1_1 - 0.0253968253968253*G0_1_2 - 0.0253968253968254*G0_2_0 - 0.0253968253968254*G0_2_1 - 0.0253968253968254*G0_2_2;
    A[911] = 0.0183421516754849*G0_0_0;
    A[912] = -0.00705467372134026*G0_0_1 + 0.0423280423280424*G0_1_1;
    A[913] = -0.00705467372134048*G0_0_2 - 0.0253968253968254*G0_2_2;
    A[914] = -0.203174603174603*G0_0_1 - 0.112874779541446*G0_0_2 - 0.270899470899471*G0_1_1 - 0.101587301587302*G0_1_2 - 0.101587301587302*G0_2_1;
    A[915] = -0.0507936507936505*G0_0_1 - 0.186243386243386*G0_0_2 + 0.0677248677248675*G0_1_1 - 0.0931216931216932*G0_1_2 - 0.0931216931216928*G0_2_1 - 0.270899470899471*G0_2_2;
    A[916] = 0.0225749559082889*G0_0_1 + 0.0677248677248677*G0_0_2 + 0.0338624338624339*G0_1_2 + 0.0338624338624335*G0_2_1 + 0.135449735449735*G0_2_2;
    A[917] = -0.0225749559082893*G0_0_0 - 0.0112874779541449*G0_0_2 - 0.0112874779541446*G0_2_0;
    A[918] = 0.0169312169312168*G0_0_0 + 0.0197530864197532*G0_0_2 + 0.0197530864197529*G0_2_0 + 0.0225749559082891*G0_2_2;
    A[919] = 0.0225749559082888*G0_0_0 + 0.0338624338624334*G0_0_2 + 0.0338624338624335*G0_2_0 + 0.0451499118165781*G0_2_2;
    A[920] = -0.0677248677248675*G0_0_0 - 0.0112874779541449*G0_0_1 - 0.0112874779541444*G0_1_0;
    A[921] = 0.084656084656085*G0_0_0 + 0.0423280423280429*G0_0_1 + 0.0423280423280424*G0_1_0 + 0.0225749559082895*G0_1_1;
    A[922] = -0.112874779541446*G0_0_0 - 0.101587301587302*G0_0_1 - 0.101587301587302*G0_1_0 - 0.135449735449736*G0_1_1;
    A[923] = 0.0225749559082894*G0_0_0 + 0.0225749559082894*G0_0_1 + 0.0112874779541445*G0_0_2 + 0.0902998236331572*G0_1_0 + 0.0902998236331572*G0_1_1 + 0.056437389770723*G0_1_2 + 0.0564373897707231*G0_2_0 + 0.0564373897707231*G0_2_1 + 0.0225749559082892*G0_2_2;
    A[924] = -0.016931216931217*G0_0_0 - 0.0169312169312171*G0_0_1 + 0.00282186948853624*G0_0_2 + 0.0677248677248675*G0_1_0 + 0.0677248677248675*G0_1_1 + 0.00282186948853603*G0_1_2 + 0.00282186948853603*G0_2_0 + 0.00282186948853601*G0_2_1 + 0.0056437389770724*G0_2_2;
    A[925] = -0.0225749559082889*G0_0_0 - 0.0225749559082889*G0_0_1 + 0.0112874779541447*G0_0_2 - 0.0338624338624336*G0_1_2 - 0.0338624338624336*G0_2_0 - 0.0338624338624336*G0_2_1 + 0.0225749559082893*G0_2_2;
    A[926] = 0.0677248677248676*G0_0_0 + 0.0564373897707227*G0_0_1 + 0.0677248677248677*G0_0_2 + 0.101587301587301*G0_1_0 + 0.0677248677248674*G0_1_1 + 0.101587301587301*G0_1_2 + 0.135449735449735*G0_2_0 + 0.101587301587301*G0_2_1 + 0.135449735449735*G0_2_2;
    A[927] = -0.0846560846560848*G0_0_0 - 0.0423280423280419*G0_0_1 - 0.0846560846560848*G0_0_2 - 0.177777777777778*G0_1_0 - 0.0169312169312168*G0_1_1 - 0.177777777777778*G0_1_2 - 0.27089947089947*G0_2_0 - 0.177777777777777*G0_2_1 - 0.270899470899471*G0_2_2;
    A[928] = 0.112874779541447*G0_0_0 + 0.0112874779541445*G0_0_1 + 0.112874779541446*G0_0_2 + 0.101587301587302*G0_1_0 - 0.0677248677248675*G0_1_1 + 0.101587301587302*G0_1_2 + 0.101587301587301*G0_2_1;
    A[929] = 0.0112874779541447*G0_0_1 + 0.0112874779541447*G0_0_2 + 0.0112874779541444*G0_1_0 + 0.0451499118165785*G0_1_1 + 0.0451499118165785*G0_1_2 + 0.0112874779541444*G0_2_0 + 0.0451499118165784*G0_2_1 + 0.0451499118165784*G0_2_2;
    A[930] = 0.00282186948853641*G0_0_1 + 0.00282186948853633*G0_0_2 + 0.00282186948853626*G0_1_0 + 0.0225749559082893*G0_1_1 + 0.0225749559082893*G0_1_2 + 0.00282186948853644*G0_2_0 + 0.0225749559082894*G0_2_1 + 0.0225749559082894*G0_2_2;
    A[931] = 0.0112874779541449*G0_0_1 + 0.0112874779541449*G0_0_2 + 0.0112874779541448*G0_1_0 + 0.0112874779541445*G0_2_0;
    A[932] = 0.135449735449735*G0_0_0 + 0.045149911816578*G0_0_1 + 0.0677248677248678*G0_0_2 + 0.0451499118165782*G0_1_0 + 0.0225749559082894*G0_1_2 + 0.0677248677248672*G0_2_0 + 0.0225749559082889*G0_2_1;
    A[933] = -0.541798941798942*G0_0_0 - 0.270899470899471*G0_0_1 - 0.270899470899471*G0_0_2 - 0.270899470899471*G0_1_0 + 0.0451499118165778*G0_1_1 - 0.135449735449736*G0_1_2 - 0.270899470899471*G0_2_0 - 0.135449735449735*G0_2_1;
    A[934] = 0.0677248677248671*G0_0_1 - 0.0677248677248682*G0_0_2 + 0.0677248677248674*G0_1_0 + 0.0451499118165779*G0_1_2 - 0.0677248677248676*G0_2_0 + 0.045149911816578*G0_2_1 - 0.135449735449735*G0_2_2;
    A[935] = -0.135449735449736*G0_0_0 - 0.090299823633157*G0_0_1 - 0.0677248677248675*G0_0_2 - 0.361199294532627*G0_1_0 - 0.451499118165784*G0_1_1 - 0.225749559082892*G0_1_2 - 0.203174603174604*G0_2_0 - 0.225749559082892*G0_2_1 - 0.135449735449735*G0_2_2;
    A[936] = 0.541798941798942*G0_0_0 + 0.270899470899471*G0_0_1 + 0.270899470899471*G0_0_2 + 0.270899470899471*G0_1_0 + 0.632098765432098*G0_1_1 + 0.270899470899471*G0_1_2 + 0.270899470899471*G0_2_0 + 0.270899470899471*G0_2_1 + 0.541798941798941*G0_2_2;
    A[937] = 0.0677248677248676*G0_0_1 - 0.0677248677248678*G0_0_2 - 0.0677248677248673*G0_1_0 - 0.135449735449735*G0_1_1 + 0.0902998236331566*G0_1_2 + 0.0677248677248677*G0_2_0 + 0.0902998236331568*G0_2_1 - 0.135449735449735*G0_2_2;
    A[938] = -0.0451499118165782*G0_0_1 - 0.0225749559082893*G0_0_2 - 0.0451499118165783*G0_1_0 + 0.0451499118165789*G0_1_1 - 0.0225749559082893*G0_2_0 - 0.0451499118165784*G0_2_2;
    A[939] = -0.0451499118165781*G0_0_1 - 0.0225749559082893*G0_0_2 - 0.0451499118165788*G0_1_0 - 0.022574955908289*G0_1_2 - 0.0225749559082892*G0_2_0 - 0.0225749559082889*G0_2_1 - 0.0451499118165784*G0_2_2;
    A[940] = -0.0677248677248669*G0_0_1 - 0.022574955908289*G0_0_2 - 0.0677248677248674*G0_1_0 - 0.0451499118165787*G0_1_2 - 0.0225749559082889*G0_2_0 - 0.0451499118165779*G0_2_1 - 0.045149911816578*G0_2_2;
    A[941] = -0.0451499118165785*G0_0_1 - 0.0677248677248675*G0_0_2 - 0.0451499118165779*G0_1_0 - 0.225749559082892*G0_1_1 - 0.180599647266313*G0_1_2 - 0.0677248677248674*G0_2_0 - 0.180599647266314*G0_2_1 - 0.135449735449736*G0_2_2;
    A[942] = -0.0451499118165792*G0_0_1 - 0.0677248677248677*G0_0_2 - 0.0451499118165792*G0_1_0 - 0.0451499118165789*G0_1_1 - 0.0225749559082894*G0_1_2 - 0.0677248677248678*G0_2_0 - 0.0225749559082894*G0_2_1;
    A[943] = 0.135449735449736*G0_0_1 + 0.270899470899471*G0_0_2 + 0.135449735449735*G0_1_0 + 0.316049382716049*G0_1_1 + 0.135449735449735*G0_1_2 + 0.27089947089947*G0_2_0 + 0.135449735449736*G0_2_1;
    A[944] = 0.316049382716049*G0_0_1 + 0.135449735449736*G0_0_2 + 0.316049382716049*G0_1_0 - 0.0902998236331571*G0_1_1 + 0.135449735449735*G0_1_2 + 0.135449735449736*G0_2_0 + 0.135449735449736*G0_2_1 + 0.270899470899471*G0_2_2;
    A[945] = -0.0183421516754851*G0_0_0 - 0.0183421516754851*G0_0_1 - 0.0183421516754851*G0_0_2 - 0.0253968253968254*G0_1_0 - 0.0253968253968254*G0_1_1 - 0.0253968253968254*G0_1_2 - 0.0253968253968254*G0_2_0 - 0.0253968253968254*G0_2_1 - 0.0253968253968254*G0_2_2;
    A[946] = 0.0183421516754849*G0_0_0;
    A[947] = -0.00705467372134038*G0_0_1 - 0.0253968253968254*G0_1_1;
    A[948] = -0.00705467372134032*G0_0_2 + 0.0423280423280424*G0_2_2;
    A[949] = 0.0677248677248677*G0_0_1 + 0.0225749559082893*G0_0_2 + 0.135449735449735*G0_1_1 + 0.0338624338624339*G0_1_2 + 0.0338624338624343*G0_2_1;
    A[950] = -0.186243386243386*G0_0_1 - 0.0507936507936506*G0_0_2 - 0.270899470899471*G0_1_1 - 0.093121693121693*G0_1_2 - 0.0931216931216934*G0_2_1 + 0.0677248677248677*G0_2_2;
    A[951] = -0.112874779541446*G0_0_1 - 0.203174603174603*G0_0_2 - 0.101587301587302*G0_1_2 - 0.101587301587301*G0_2_1 - 0.270899470899471*G0_2_2;
    A[952] = -0.0677248677248676*G0_0_0 - 0.0112874779541446*G0_0_2 - 0.0112874779541447*G0_2_0;
    A[953] = 0.0846560846560845*G0_0_0 + 0.0423280423280424*G0_0_2 + 0.0423280423280424*G0_2_0 + 0.0225749559082894*G0_2_2;
    A[954] = -0.112874779541446*G0_0_0 - 0.101587301587302*G0_0_2 - 0.101587301587301*G0_2_0 - 0.135449735449735*G0_2_2;
    A[955] = -0.0225749559082891*G0_0_0 - 0.0112874779541447*G0_0_1 - 0.0112874779541448*G0_1_0;
    A[956] = 0.0169312169312167*G0_0_0 + 0.0197530864197531*G0_0_1 + 0.0197530864197531*G0_1_0 + 0.0225749559082893*G0_1_1;
    A[957] = 0.0225749559082893*G0_0_0 + 0.0338624338624337*G0_0_1 + 0.0338624338624339*G0_1_0 + 0.0451499118165783*G0_1_1;
    A[958] = 0.0677248677248677*G0_0_0 + 0.0677248677248677*G0_0_1 + 0.0564373897707234*G0_0_2 + 0.135449735449735*G0_1_0 + 0.135449735449735*G0_1_1 + 0.101587301587302*G0_1_2 + 0.101587301587302*G0_2_0 + 0.101587301587302*G0_2_1 + 0.0677248677248678*G0_2_2;
    A[959] = -0.0846560846560846*G0_0_0 - 0.0846560846560845*G0_0_1 - 0.0423280423280423*G0_0_2 - 0.270899470899471*G0_1_0 - 0.270899470899471*G0_1_1 - 0.177777777777778*G0_1_2 - 0.177777777777778*G0_2_0 - 0.177777777777778*G0_2_1 - 0.0169312169312171*G0_2_2;
    A[960] = 0.112874779541446*G0_0_0 + 0.112874779541446*G0_0_1 + 0.0112874779541446*G0_0_2 + 0.101587301587301*G0_1_2 + 0.101587301587302*G0_2_0 + 0.101587301587301*G0_2_1 - 0.0677248677248677*G0_2_2;
    A[961] = 0.0225749559082893*G0_0_0 + 0.0112874779541448*G0_0_1 + 0.0225749559082892*G0_0_2 + 0.0564373897707231*G0_1_0 + 0.0225749559082893*G0_1_1 + 0.0564373897707232*G0_1_2 + 0.090299823633157*G0_2_0 + 0.0564373897707232*G0_2_1 + 0.090299823633157*G0_2_2;
    A[962] = -0.0169312169312168*G0_0_0 + 0.00282186948853626*G0_0_1 - 0.0169312169312169*G0_0_2 + 0.00282186948853631*G0_1_0 + 0.00564373897707252*G0_1_1 + 0.00282186948853633*G0_1_2 + 0.0677248677248677*G0_2_0 + 0.00282186948853616*G0_2_1 + 0.0677248677248677*G0_2_2;
    A[963] = -0.0225749559082893*G0_0_0 + 0.0112874779541444*G0_0_1 - 0.0225749559082893*G0_0_2 - 0.0338624338624339*G0_1_0 + 0.0225749559082891*G0_1_1 - 0.0338624338624339*G0_1_2 - 0.0338624338624337*G0_2_1;
    A[964] = 0.0112874779541446*G0_0_1 + 0.0112874779541447*G0_0_2 + 0.0112874779541446*G0_1_0 + 0.0451499118165784*G0_1_1 + 0.0451499118165785*G0_1_2 + 0.0112874779541447*G0_2_0 + 0.0451499118165785*G0_2_1 + 0.0451499118165786*G0_2_2;
    A[965] = 0.00282186948853636*G0_0_1 + 0.00282186948853635*G0_0_2 + 0.0028218694885364*G0_1_0 + 0.0225749559082894*G0_1_1 + 0.0225749559082894*G0_1_2 + 0.00282186948853618*G0_2_0 + 0.0225749559082893*G0_2_1 + 0.0225749559082893*G0_2_2;
    A[966] = 0.0112874779541447*G0_0_1 + 0.0112874779541447*G0_0_2 + 0.0112874779541444*G0_1_0 + 0.0112874779541446*G0_2_0;
    A[967] = 0.135449735449735*G0_0_0 + 0.0677248677248678*G0_0_1 + 0.0451499118165781*G0_0_2 + 0.0677248677248676*G0_1_0 + 0.022574955908289*G0_1_2 + 0.0451499118165784*G0_2_0 + 0.0225749559082892*G0_2_1;
    A[968] = -0.067724867724868*G0_0_1 + 0.0677248677248673*G0_0_2 - 0.0677248677248677*G0_1_0 - 0.135449735449735*G0_1_1 + 0.0451499118165786*G0_1_2 + 0.0677248677248678*G0_2_0 + 0.0451499118165781*G0_2_1;
    A[969] = -0.541798941798941*G0_0_0 - 0.27089947089947*G0_0_1 - 0.27089947089947*G0_0_2 - 0.270899470899471*G0_1_0 - 0.135449735449735*G0_1_2 - 0.270899470899471*G0_2_0 - 0.135449735449735*G0_2_1 + 0.0451499118165785*G0_2_2;
    A[970] = -0.135449735449736*G0_0_0 - 0.0677248677248679*G0_0_1 - 0.0902998236331571*G0_0_2 - 0.203174603174603*G0_1_0 - 0.135449735449736*G0_1_1 - 0.225749559082893*G0_1_2 - 0.361199294532628*G0_2_0 - 0.225749559082892*G0_2_1 - 0.451499118165785*G0_2_2;
    A[971] = -0.0677248677248673*G0_0_1 + 0.0677248677248677*G0_0_2 + 0.0677248677248676*G0_1_0 - 0.135449735449735*G0_1_1 + 0.0902998236331568*G0_1_2 - 0.0677248677248678*G0_2_0 + 0.0902998236331566*G0_2_1 - 0.135449735449735*G0_2_2;
    A[972] = 0.541798941798941*G0_0_0 + 0.270899470899471*G0_0_1 + 0.270899470899471*G0_0_2 + 0.270899470899471*G0_1_0 + 0.541798941798942*G0_1_1 + 0.270899470899471*G0_1_2 + 0.270899470899471*G0_2_0 + 0.270899470899471*G0_2_1 + 0.632098765432098*G0_2_2;
    A[973] = -0.0677248677248681*G0_0_1 - 0.0451499118165787*G0_0_2 - 0.0677248677248679*G0_1_0 - 0.135449735449736*G0_1_1 - 0.180599647266314*G0_1_2 - 0.0451499118165784*G0_2_0 - 0.180599647266314*G0_2_1 - 0.225749559082892*G0_2_2;
    A[974] = -0.0677248677248676*G0_0_1 - 0.0451499118165788*G0_0_2 - 0.0677248677248674*G0_1_0 - 0.0225749559082892*G0_1_2 - 0.0451499118165785*G0_2_0 - 0.0225749559082893*G0_2_1 - 0.0451499118165787*G0_2_2;
    A[975] = 0.27089947089947*G0_0_1 + 0.135449735449736*G0_0_2 + 0.270899470899471*G0_1_0 + 0.135449735449736*G0_1_2 + 0.135449735449735*G0_2_0 + 0.135449735449735*G0_2_1 + 0.316049382716049*G0_2_2;
    A[976] = -0.0225749559082894*G0_0_1 - 0.0451499118165787*G0_0_2 - 0.0225749559082895*G0_1_0 - 0.0451499118165786*G0_1_1 - 0.0451499118165785*G0_2_0 + 0.0451499118165785*G0_2_2;
    A[977] = -0.0225749559082892*G0_0_1 - 0.0451499118165782*G0_0_2 - 0.0225749559082889*G0_1_0 - 0.0451499118165785*G0_1_1 - 0.022574955908289*G0_1_2 - 0.0451499118165784*G0_2_0 - 0.0225749559082892*G0_2_1;
    A[978] = -0.0225749559082889*G0_0_1 - 0.0677248677248671*G0_0_2 - 0.0225749559082893*G0_1_0 - 0.0451499118165782*G0_1_1 - 0.0451499118165785*G0_1_2 - 0.0677248677248675*G0_2_0 - 0.0451499118165786*G0_2_1;
    A[979] = 0.135449735449736*G0_0_1 + 0.316049382716049*G0_0_2 + 0.135449735449736*G0_1_0 + 0.270899470899471*G0_1_1 + 0.135449735449736*G0_1_2 + 0.316049382716049*G0_2_0 + 0.135449735449736*G0_2_1 - 0.0902998236331567*G0_2_2;
    A[980] = 0.0423280423280423*G0_0_0 + 0.0423280423280424*G0_0_1 + 0.0423280423280423*G0_0_2 + 0.0493827160493827*G0_1_0 + 0.0493827160493826*G0_1_1 + 0.0493827160493826*G0_1_2 + 0.0423280423280422*G0_2_0 + 0.0423280423280422*G0_2_1 + 0.0423280423280422*G0_2_2;
    A[981] = -0.0253968253968253*G0_0_0 - 0.00705467372134032*G0_1_0;
    A[982] = 0.0183421516754851*G0_1_1;
    A[983] = -0.00705467372134043*G0_1_2 - 0.0253968253968254*G0_2_2;
    A[984] = -0.0225749559082897*G0_1_1 - 0.0112874779541449*G0_1_2 - 0.0112874779541448*G0_2_1;
    A[985] = 0.0169312169312174*G0_1_1 + 0.0197530864197534*G0_1_2 + 0.0197530864197532*G0_2_1 + 0.0225749559082894*G0_2_2;
    A[986] = 0.0225749559082893*G0_1_1 + 0.033862433862434*G0_1_2 + 0.033862433862434*G0_2_1 + 0.0451499118165787*G0_2_2;
    A[987] = 0.0902998236331566*G0_0_0 + 0.0338624338624337*G0_0_2 + 0.0677248677248673*G0_1_0 + 0.0225749559082891*G0_1_2 + 0.0338624338624339*G0_2_0;
    A[988] = 0.0677248677248674*G0_0_0 + 0.0649029982363313*G0_0_2 + 0.0846560846560842*G0_1_0 + 0.0846560846560839*G0_1_2 + 0.0649029982363311*G0_2_0 + 0.0677248677248672*G0_2_2;
    A[989] = 0.0338624338624337*G0_0_2 + 0.0225749559082892*G0_1_0 + 0.0677248677248677*G0_1_2 + 0.033862433862434*G0_2_0 + 0.090299823633157*G0_2_2;
    A[990] = 0.0451499118165781*G0_0_0 + 0.0338624338624336*G0_0_1 + 0.0338624338624336*G0_1_0 + 0.0225749559082891*G0_1_1;
    A[991] = 0.0225749559082894*G0_0_0 + 0.019753086419753*G0_0_1 + 0.0197530864197531*G0_1_0 + 0.0169312169312168*G0_1_1;
    A[992] = -0.0112874779541447*G0_0_1 - 0.0112874779541448*G0_1_0 - 0.0225749559082896*G0_1_1;
    A[993] = -0.270899470899471*G0_0_0 - 0.270899470899471*G0_0_1 - 0.169312169312169*G0_0_2 - 0.0677248677248677*G0_1_0 - 0.0677248677248679*G0_1_1 - 0.0790123456790123*G0_1_2 - 0.169312169312169*G0_2_0 - 0.169312169312169*G0_2_1 - 0.0677248677248677*G0_2_2;
    A[994] = 0.0677248677248677*G0_0_0 + 0.0677248677248678*G0_0_1 + 0.160846560846561*G0_0_2 + 0.118518518518519*G0_1_0 + 0.118518518518519*G0_1_1 + 0.0253968253968254*G0_1_2 + 0.160846560846561*G0_2_0 + 0.160846560846561*G0_2_1 - 0.0169312169312168*G0_2_2;
    A[995] = -0.0338624338624341*G0_0_2 - 0.0225749559082893*G0_1_0 - 0.0225749559082893*G0_1_1 + 0.0112874779541445*G0_1_2 - 0.033862433862434*G0_2_0 - 0.033862433862434*G0_2_1 + 0.0677248677248675*G0_2_2;
    A[996] = -0.135449735449735*G0_0_0 - 0.0338624338624339*G0_0_1 - 0.135449735449735*G0_0_2 - 0.0338624338624339*G0_1_0 - 0.0451499118165785*G0_1_1 - 0.0338624338624339*G0_1_2 - 0.135449735449735*G0_2_0 - 0.0338624338624337*G0_2_1 - 0.135449735449735*G0_2_2;
    A[997] = 0.0225749559082894*G0_0_0 - 0.0197530864197529*G0_0_1 + 0.0225749559082893*G0_0_2 - 0.0197530864197529*G0_1_0 + 0.0225749559082894*G0_1_1 - 0.0197530864197529*G0_1_2 + 0.022574955908289*G0_2_0 - 0.0197530864197532*G0_2_1 + 0.0225749559082889*G0_2_2;
    A[998] = 0.0112874779541444*G0_0_1 + 0.0112874779541448*G0_1_0 - 0.0451499118165787*G0_1_1 + 0.0112874779541448*G0_1_2 + 0.0112874779541448*G0_2_1;
    A[999] = -0.0677248677248676*G0_0_0 - 0.169312169312169*G0_0_1 - 0.169312169312169*G0_0_2 - 0.0790123456790121*G0_1_0 - 0.0677248677248675*G0_1_1 - 0.0677248677248676*G0_1_2 - 0.169312169312169*G0_2_0 - 0.27089947089947*G0_2_1 - 0.27089947089947*G0_2_2;
    A[1000] = -0.016931216931217*G0_0_0 + 0.16084656084656*G0_0_1 + 0.16084656084656*G0_0_2 + 0.0253968253968252*G0_1_0 + 0.118518518518518*G0_1_1 + 0.118518518518518*G0_1_2 + 0.16084656084656*G0_2_0 + 0.0677248677248674*G0_2_1 + 0.0677248677248674*G0_2_2;
    A[1001] = 0.0677248677248677*G0_0_0 - 0.0338624338624337*G0_0_1 - 0.0338624338624337*G0_0_2 + 0.0112874779541448*G0_1_0 - 0.0225749559082892*G0_1_1 - 0.0225749559082892*G0_1_2 - 0.0338624338624337*G0_2_0;
    A[1002] = 0.0451499118165783*G0_0_0 + 0.0902998236331563*G0_0_1 + 0.0451499118165783*G0_0_2 + 0.0902998236331563*G0_1_0 + 0.135449735449734*G0_1_1 + 0.0677248677248674*G0_1_2 + 0.0451499118165779*G0_2_0 + 0.0677248677248672*G0_2_1;
    A[1003] = 0.0451499118165786*G0_0_1 + 0.0225749559082891*G0_0_2 + 0.0451499118165783*G0_1_0 + 0.0902998236331573*G0_1_1 + 0.0451499118165779*G0_1_2 + 0.0225749559082894*G0_2_0 + 0.0451499118165786*G0_2_1;
    A[1004] = 0.0677248677248672*G0_0_1 + 0.0451499118165783*G0_0_2 + 0.067724867724868*G0_1_0 + 0.135449735449735*G0_1_1 + 0.0902998236331568*G0_1_2 + 0.0451499118165787*G0_2_0 + 0.0902998236331565*G0_2_1 + 0.0451499118165783*G0_2_2;
    A[1005] = 0.0451499118165783*G0_0_0 + 0.316049382716049*G0_0_1 + 0.180599647266314*G0_0_2 + 0.316049382716049*G0_1_0 + 0.0451499118165785*G0_1_1 + 0.180599647266314*G0_1_2 + 0.180599647266314*G0_2_0 + 0.180599647266313*G0_2_1 + 0.316049382716049*G0_2_2;
    A[1006] = -0.0451499118165783*G0_0_1 - 0.0225749559082893*G0_0_2 - 0.0451499118165782*G0_1_0 + 0.0451499118165789*G0_1_1 - 0.0225749559082893*G0_2_0 - 0.0451499118165784*G0_2_2;
    A[1007] = -0.0677248677248679*G0_0_1 - 0.0451499118165784*G0_0_2 - 0.0677248677248681*G0_1_0 - 0.135449735449736*G0_1_1 - 0.180599647266314*G0_1_2 - 0.0451499118165787*G0_2_0 - 0.180599647266314*G0_2_1 - 0.225749559082892*G0_2_2;
    A[1008] = 0.632098765432098*G0_0_0 + 0.361199294532627*G0_0_1 + 0.361199294532627*G0_0_2 + 0.361199294532627*G0_1_0 + 0.632098765432097*G0_1_1 + 0.361199294532627*G0_1_2 + 0.361199294532627*G0_2_0 + 0.361199294532627*G0_2_1 + 0.632098765432098*G0_2_2;
    A[1009] = -0.451499118165784*G0_0_0 - 0.0902998236331565*G0_0_1 - 0.225749559082892*G0_0_2 - 0.361199294532627*G0_1_0 - 0.135449735449734*G0_1_1 - 0.203174603174602*G0_1_2 - 0.225749559082892*G0_2_0 - 0.0677248677248672*G0_2_1 - 0.135449735449735*G0_2_2;
    A[1010] = -0.135449735449735*G0_0_0 - 0.0677248677248673*G0_0_1 - 0.225749559082892*G0_0_2 - 0.203174603174603*G0_1_0 - 0.135449735449735*G0_1_1 - 0.361199294532627*G0_1_2 - 0.225749559082892*G0_2_0 - 0.0902998236331565*G0_2_1 - 0.451499118165784*G0_2_2;
    A[1011] = 0.316049382716048*G0_0_0 + 0.180599647266313*G0_0_1 + 0.180599647266313*G0_0_2 + 0.180599647266313*G0_1_0 + 0.0451499118165783*G0_1_1 + 0.316049382716048*G0_1_2 + 0.180599647266314*G0_2_0 + 0.316049382716048*G0_2_1 + 0.0451499118165781*G0_2_2;
    A[1012] = -0.225749559082891*G0_0_0 - 0.180599647266313*G0_0_1 - 0.0451499118165781*G0_0_2 - 0.180599647266313*G0_1_0 - 0.135449735449735*G0_1_1 - 0.0677248677248672*G0_1_2 - 0.0451499118165781*G0_2_0 - 0.0677248677248669*G0_2_1;
    A[1013] = -0.0451499118165786*G0_0_0 - 0.0225749559082892*G0_0_2 + 0.0451499118165787*G0_1_1 - 0.0451499118165782*G0_1_2 - 0.022574955908289*G0_2_0 - 0.0451499118165783*G0_2_1;
    A[1014] = -0.0902998236331568*G0_0_0 - 0.406349206349205*G0_0_1 - 0.225749559082892*G0_0_2 - 0.406349206349205*G0_1_0 - 0.722398589065255*G0_1_1 - 0.406349206349205*G0_1_2 - 0.225749559082892*G0_2_0 - 0.406349206349206*G0_2_1 - 0.0902998236331566*G0_2_2;
    A[1015] = -0.0253968253968253*G0_0_0 - 0.0253968253968253*G0_0_1 - 0.0253968253968253*G0_0_2 - 0.0183421516754849*G0_1_0 - 0.0183421516754849*G0_1_1 - 0.0183421516754849*G0_1_2 - 0.0253968253968254*G0_2_0 - 0.0253968253968254*G0_2_1 - 0.0253968253968254*G0_2_2;
    A[1016] = 0.0423280423280422*G0_0_0 - 0.00705467372134039*G0_1_0;
    A[1017] = 0.018342151675485*G0_1_1;
    A[1018] = -0.00705467372134034*G0_1_2 - 0.0253968253968253*G0_2_2;
    A[1019] = -0.0225749559082892*G0_1_1 - 0.0112874779541447*G0_1_2 - 0.0112874779541445*G0_2_1;
    A[1020] = 0.0169312169312168*G0_1_1 + 0.0197530864197531*G0_1_2 + 0.0197530864197529*G0_2_1 + 0.0225749559082891*G0_2_2;
    A[1021] = 0.0225749559082893*G0_1_1 + 0.0338624338624338*G0_1_2 + 0.0338624338624341*G0_2_1 + 0.0451499118165786*G0_2_2;
    A[1022] = -0.27089947089947*G0_0_0 - 0.101587301587301*G0_0_2 - 0.203174603174603*G0_1_0 - 0.112874779541446*G0_1_2 - 0.101587301587301*G0_2_0;
    A[1023] = 0.0677248677248675*G0_0_0 - 0.0931216931216929*G0_0_2 - 0.0507936507936507*G0_1_0 - 0.186243386243386*G0_1_2 - 0.0931216931216926*G0_2_0 - 0.27089947089947*G0_2_2;
    A[1024] = 0.0338624338624338*G0_0_2 + 0.0225749559082893*G0_1_0 + 0.0677248677248676*G0_1_2 + 0.033862433862434*G0_2_0 + 0.135449735449736*G0_2_2;
    A[1025] = -0.135449735449735*G0_0_0 - 0.101587301587301*G0_0_1 - 0.101587301587301*G0_1_0 - 0.112874779541446*G0_1_1;
    A[1026] = 0.0225749559082889*G0_0_0 + 0.0423280423280424*G0_0_1 + 0.042328042328042*G0_1_0 + 0.0846560846560846*G0_1_1;
    A[1027] = -0.0112874779541445*G0_0_1 - 0.0112874779541447*G0_1_0 - 0.0677248677248678*G0_1_1;
    A[1028] = 0.0902998236331568*G0_0_0 + 0.090299823633157*G0_0_1 + 0.056437389770723*G0_0_2 + 0.0225749559082895*G0_1_0 + 0.0225749559082895*G0_1_1 + 0.0112874779541447*G0_1_2 + 0.056437389770723*G0_2_0 + 0.056437389770723*G0_2_1 + 0.0225749559082894*G0_2_2;
    A[1029] = 0.0677248677248676*G0_0_0 + 0.0677248677248675*G0_0_1 + 0.002821869488536*G0_0_2 - 0.016931216931217*G0_1_0 - 0.016931216931217*G0_1_1 + 0.00282186948853582*G0_1_2 + 0.00282186948853642*G0_2_0 + 0.0028218694885364*G0_2_1 + 0.00564373897707204*G0_2_2;
    A[1030] = -0.0338624338624337*G0_0_2 - 0.0225749559082893*G0_1_0 - 0.0225749559082892*G0_1_1 + 0.0112874779541448*G0_1_2 - 0.033862433862434*G0_2_0 - 0.033862433862434*G0_2_1 + 0.0225749559082894*G0_2_2;
    A[1031] = 0.0451499118165784*G0_0_0 + 0.0112874779541445*G0_0_1 + 0.0451499118165784*G0_0_2 + 0.0112874779541448*G0_1_0 + 0.0112874779541448*G0_1_2 + 0.0451499118165784*G0_2_0 + 0.0112874779541448*G0_2_1 + 0.0451499118165783*G0_2_2;
    A[1032] = 0.022574955908289*G0_0_0 + 0.0028218694885361*G0_0_1 + 0.0225749559082891*G0_0_2 + 0.00282186948853588*G0_1_0 + 0.00282186948853585*G0_1_2 + 0.0225749559082891*G0_2_0 + 0.00282186948853573*G0_2_1 + 0.0225749559082891*G0_2_2;
    A[1033] = 0.0112874779541448*G0_0_1 + 0.0112874779541448*G0_1_0 + 0.0112874779541447*G0_1_2 + 0.0112874779541449*G0_2_1;
    A[1034] = 0.0677248677248675*G0_0_0 + 0.101587301587301*G0_0_1 + 0.101587301587301*G0_0_2 + 0.0564373897707228*G0_1_0 + 0.0677248677248675*G0_1_1 + 0.0677248677248676*G0_1_2 + 0.101587301587301*G0_2_0 + 0.135449735449735*G0_2_1 + 0.135449735449735*G0_2_2;
    A[1035] = -0.0169312169312169*G0_0_0 - 0.177777777777777*G0_0_1 - 0.177777777777777*G0_0_2 - 0.042328042328042*G0_1_0 - 0.0846560846560845*G0_1_1 - 0.0846560846560845*G0_1_2 - 0.177777777777777*G0_2_0 - 0.27089947089947*G0_2_1 - 0.27089947089947*G0_2_2;
    A[1036] = -0.0677248677248676*G0_0_0 + 0.101587301587301*G0_0_1 + 0.101587301587301*G0_0_2 + 0.0112874779541445*G0_1_0 + 0.112874779541446*G0_1_1 + 0.112874779541446*G0_1_2 + 0.101587301587301*G0_2_0;
    A[1037] = 0.0451499118165784*G0_0_0 - 0.27089947089947*G0_0_1 - 0.135449735449735*G0_0_2 - 0.270899470899471*G0_1_0 - 0.541798941798941*G0_1_1 - 0.27089947089947*G0_1_2 - 0.135449735449735*G0_2_0 - 0.27089947089947*G0_2_1;
    A[1038] = 0.0451499118165782*G0_0_1 + 0.0225749559082892*G0_0_2 + 0.045149911816578*G0_1_0 + 0.135449735449735*G0_1_1 + 0.067724867724867*G0_1_2 + 0.0225749559082892*G0_2_0 + 0.0677248677248676*G0_2_1;
    A[1039] = 0.0677248677248674*G0_0_1 + 0.0451499118165781*G0_0_2 + 0.0677248677248678*G0_1_0 - 0.0677248677248675*G0_1_2 + 0.0451499118165789*G0_2_0 - 0.0677248677248666*G0_2_1 - 0.135449735449735*G0_2_2;
    A[1040] = 0.0451499118165788*G0_0_0 - 0.0451499118165781*G0_0_1 - 0.0451499118165779*G0_1_0 - 0.0225749559082891*G0_1_2 - 0.0225749559082895*G0_2_1 - 0.0451499118165784*G0_2_2;
    A[1041] = -0.0451499118165788*G0_0_1 - 0.0225749559082892*G0_0_2 - 0.0451499118165781*G0_1_0 - 0.0225749559082889*G0_1_2 - 0.0225749559082893*G0_2_0 - 0.022574955908289*G0_2_1 - 0.0451499118165784*G0_2_2;
    A[1042] = -0.0677248677248674*G0_0_1 - 0.0451499118165785*G0_0_2 - 0.0677248677248676*G0_1_0 - 0.0225749559082893*G0_1_2 - 0.0451499118165788*G0_2_0 - 0.0225749559082892*G0_2_1 - 0.0451499118165787*G0_2_2;
    A[1043] = -0.451499118165784*G0_0_0 - 0.361199294532627*G0_0_1 - 0.225749559082892*G0_0_2 - 0.0902998236331565*G0_1_0 - 0.135449735449734*G0_1_1 - 0.0677248677248672*G0_1_2 - 0.225749559082892*G0_2_0 - 0.203174603174602*G0_2_1 - 0.135449735449735*G0_2_2;
    A[1044] = 0.632098765432097*G0_0_0 + 0.27089947089947*G0_0_1 + 0.27089947089947*G0_0_2 + 0.27089947089947*G0_1_0 + 0.541798941798941*G0_1_1 + 0.27089947089947*G0_1_2 + 0.27089947089947*G0_2_0 + 0.27089947089947*G0_2_1 + 0.54179894179894*G0_2_2;
    A[1045] = -0.135449735449735*G0_0_0 - 0.0677248677248673*G0_0_1 + 0.0902998236331568*G0_0_2 + 0.0677248677248677*G0_1_0 - 0.067724867724868*G0_1_2 + 0.0902998236331563*G0_2_0 + 0.0677248677248667*G0_2_1 - 0.135449735449736*G0_2_2;
    A[1046] = -0.225749559082891*G0_0_0 - 0.0451499118165779*G0_0_1 - 0.180599647266313*G0_0_2 - 0.0451499118165779*G0_1_0 - 0.0677248677248669*G0_1_2 - 0.180599647266313*G0_2_0 - 0.0677248677248671*G0_2_1 - 0.135449735449735*G0_2_2;
    A[1047] = 0.316049382716048*G0_0_0 + 0.135449735449734*G0_0_1 + 0.135449735449734*G0_0_2 + 0.135449735449734*G0_1_0 + 0.27089947089947*G0_1_2 + 0.135449735449735*G0_2_0 + 0.27089947089947*G0_2_1;
    A[1048] = -0.0451499118165782*G0_0_0 - 0.0451499118165787*G0_0_1 - 0.0225749559082891*G0_0_2 - 0.0451499118165779*G0_1_0 - 0.0677248677248672*G0_1_2 - 0.0225749559082891*G0_2_0 - 0.0677248677248677*G0_2_1;
    A[1049] = -0.0902998236331569*G0_0_0 + 0.316049382716048*G0_0_1 + 0.135449735449735*G0_0_2 + 0.316049382716049*G0_1_0 + 0.135449735449734*G0_1_2 + 0.135449735449735*G0_2_0 + 0.135449735449734*G0_2_1 + 0.270899470899469*G0_2_2;
    A[1050] = -0.0253968253968254*G0_0_0 - 0.0253968253968255*G0_0_1 - 0.0253968253968255*G0_0_2 - 0.0183421516754851*G0_1_0 - 0.0183421516754851*G0_1_1 - 0.0183421516754851*G0_1_2 - 0.0253968253968254*G0_2_0 - 0.0253968253968254*G0_2_1 - 0.0253968253968253*G0_2_2;
    A[1051] = -0.0253968253968253*G0_0_0 - 0.0070546737213404*G0_1_0;
    A[1052] = 0.018342151675485*G0_1_1;
    A[1053] = -0.0070546737213404*G0_1_2 + 0.0423280423280423*G0_2_2;
    A[1054] = -0.0677248677248677*G0_1_1 - 0.0112874779541444*G0_1_2 - 0.0112874779541444*G0_2_1;
    A[1055] = 0.0846560846560844*G0_1_1 + 0.0423280423280418*G0_1_2 + 0.0423280423280421*G0_2_1 + 0.0225749559082889*G0_2_2;
    A[1056] = -0.112874779541446*G0_1_1 - 0.101587301587301*G0_1_2 - 0.101587301587302*G0_2_1 - 0.135449735449735*G0_2_2;
    A[1057] = 0.135449735449735*G0_0_0 + 0.0338624338624334*G0_0_2 + 0.0677248677248673*G0_1_0 + 0.022574955908289*G0_1_2 + 0.0338624338624337*G0_2_0;
    A[1058] = -0.27089947089947*G0_0_0 - 0.0931216931216926*G0_0_2 - 0.186243386243385*G0_1_0 - 0.0507936507936501*G0_1_2 - 0.0931216931216926*G0_2_0 + 0.067724867724868*G0_2_2;
    A[1059] = -0.101587301587301*G0_0_2 - 0.112874779541446*G0_1_0 - 0.203174603174603*G0_1_2 - 0.101587301587302*G0_2_0 - 0.270899470899471*G0_2_2;
    A[1060] = 0.0451499118165779*G0_0_0 + 0.0338624338624334*G0_0_1 + 0.0338624338624336*G0_1_0 + 0.022574955908289*G0_1_1;
    A[1061] = 0.0225749559082894*G0_0_0 + 0.0197530864197532*G0_0_1 + 0.019753086419753*G0_1_0 + 0.016931216931217*G0_1_1;
    A[1062] = -0.0112874779541446*G0_0_1 - 0.0112874779541445*G0_1_0 - 0.0225749559082892*G0_1_1;
    A[1063] = 0.135449735449735*G0_0_0 + 0.135449735449735*G0_0_1 + 0.101587301587302*G0_0_2 + 0.0677248677248676*G0_1_0 + 0.0677248677248675*G0_1_1 + 0.0564373897707234*G0_1_2 + 0.101587301587302*G0_2_0 + 0.101587301587302*G0_2_1 + 0.0677248677248677*G0_2_2;
    A[1064] = -0.270899470899471*G0_0_0 - 0.270899470899471*G0_0_1 - 0.177777777777778*G0_0_2 - 0.0846560846560843*G0_1_0 - 0.0846560846560842*G0_1_1 - 0.0423280423280424*G0_1_2 - 0.177777777777778*G0_2_0 - 0.177777777777778*G0_2_1 - 0.016931216931217*G0_2_2;
    A[1065] = 0.101587301587302*G0_0_2 + 0.112874779541446*G0_1_0 + 0.112874779541446*G0_1_1 + 0.0112874779541448*G0_1_2 + 0.101587301587302*G0_2_0 + 0.101587301587302*G0_2_1 - 0.0677248677248676*G0_2_2;
    A[1066] = 0.0451499118165783*G0_0_0 + 0.0112874779541447*G0_0_1 + 0.0451499118165783*G0_0_2 + 0.0112874779541445*G0_1_0 + 0.0112874779541444*G0_1_2 + 0.0451499118165784*G0_2_0 + 0.0112874779541446*G0_2_1 + 0.0451499118165785*G0_2_2;
    A[1067] = 0.0225749559082893*G0_0_0 + 0.00282186948853622*G0_0_1 + 0.0225749559082894*G0_0_2 + 0.00282186948853621*G0_1_0 + 0.00282186948853618*G0_1_2 + 0.0225749559082894*G0_2_0 + 0.00282186948853635*G0_2_1 + 0.0225749559082894*G0_2_2;
    A[1068] = 0.0112874779541445*G0_0_1 + 0.0112874779541444*G0_1_0 + 0.0112874779541444*G0_1_2 + 0.0112874779541444*G0_2_1;
    A[1069] = 0.0225749559082893*G0_0_0 + 0.056437389770723*G0_0_1 + 0.056437389770723*G0_0_2 + 0.0112874779541449*G0_1_0 + 0.0225749559082891*G0_1_1 + 0.0225749559082891*G0_1_2 + 0.056437389770723*G0_2_0 + 0.0902998236331569*G0_2_1 + 0.0902998236331569*G0_2_2;
    A[1070] = 0.00564373897707238*G0_0_0 + 0.0028218694885363*G0_0_1 + 0.00282186948853631*G0_0_2 + 0.00282186948853601*G0_1_0 - 0.0169312169312167*G0_1_1 - 0.0169312169312167*G0_1_2 + 0.00282186948853616*G0_2_0 + 0.0677248677248678*G0_2_1 + 0.0677248677248678*G0_2_2;
    A[1071] = 0.0225749559082891*G0_0_0 - 0.0338624338624336*G0_0_1 - 0.0338624338624335*G0_0_2 + 0.0112874779541447*G0_1_0 - 0.022574955908289*G0_1_1 - 0.022574955908289*G0_1_2 - 0.0338624338624338*G0_2_0;
    A[1072] = -0.135449735449734*G0_0_0 - 0.0677248677248677*G0_0_1 + 0.045149911816578*G0_0_2 - 0.0677248677248669*G0_1_0 + 0.0677248677248673*G0_1_2 + 0.0451499118165788*G0_2_0 + 0.067724867724868*G0_2_1;
    A[1073] = 0.0677248677248675*G0_0_1 + 0.0225749559082894*G0_0_2 + 0.0677248677248669*G0_1_0 + 0.135449735449735*G0_1_1 + 0.045149911816578*G0_1_2 + 0.0225749559082889*G0_2_0 + 0.045149911816578*G0_2_1;
    A[1074] = -0.270899470899469*G0_0_1 - 0.135449735449734*G0_0_2 - 0.27089947089947*G0_1_0 - 0.54179894179894*G0_1_1 - 0.27089947089947*G0_1_2 - 0.135449735449736*G0_2_0 - 0.27089947089947*G0_2_1 + 0.0451499118165785*G0_2_2;
    A[1075] = -0.135449735449735*G0_0_0 - 0.067724867724868*G0_0_1 - 0.180599647266314*G0_0_2 - 0.0677248677248677*G0_1_0 - 0.0451499118165783*G0_1_2 - 0.180599647266314*G0_2_0 - 0.0451499118165782*G0_2_1 - 0.225749559082892*G0_2_2;
    A[1076] = -0.0677248677248674*G0_0_1 - 0.0225749559082889*G0_0_2 - 0.0677248677248669*G0_1_0 - 0.0451499118165779*G0_1_2 - 0.022574955908289*G0_2_0 - 0.0451499118165787*G0_2_1 - 0.045149911816578*G0_2_2;
    A[1077] = 0.270899470899471*G0_0_1 + 0.135449735449735*G0_0_2 + 0.27089947089947*G0_1_0 + 0.135449735449735*G0_1_2 + 0.135449735449736*G0_2_0 + 0.135449735449736*G0_2_1 + 0.316049382716049*G0_2_2;
    A[1078] = -0.135449735449735*G0_0_0 - 0.203174603174603*G0_0_1 - 0.225749559082892*G0_0_2 - 0.0677248677248673*G0_1_0 - 0.135449735449735*G0_1_1 - 0.0902998236331565*G0_1_2 - 0.225749559082892*G0_2_0 - 0.361199294532627*G0_2_1 - 0.451499118165784*G0_2_2;
    A[1079] = -0.135449735449735*G0_0_0 + 0.0677248677248677*G0_0_1 + 0.0902998236331563*G0_0_2 - 0.0677248677248673*G0_1_0 + 0.0677248677248667*G0_1_2 + 0.0902998236331568*G0_2_0 - 0.067724867724868*G0_2_1 - 0.135449735449736*G0_2_2;
    A[1080] = 0.541798941798941*G0_0_0 + 0.270899470899469*G0_0_1 + 0.27089947089947*G0_0_2 + 0.270899470899469*G0_1_0 + 0.541798941798939*G0_1_1 + 0.27089947089947*G0_1_2 + 0.27089947089947*G0_2_0 + 0.27089947089947*G0_2_1 + 0.632098765432098*G0_2_2;
    A[1081] = -0.0451499118165783*G0_0_0 - 0.0225749559082892*G0_0_1 - 0.0225749559082887*G0_1_0 - 0.0451499118165782*G0_1_2 - 0.0451499118165785*G0_2_1 + 0.0451499118165786*G0_2_2;
    A[1082] = -0.045149911816578*G0_0_0 - 0.0225749559082894*G0_0_1 - 0.045149911816578*G0_0_2 - 0.0225749559082892*G0_1_0 - 0.0677248677248673*G0_1_2 - 0.0451499118165784*G0_2_0 - 0.0677248677248678*G0_2_1;
    A[1083] = -0.0451499118165785*G0_0_0 - 0.0225749559082892*G0_0_1 - 0.0225749559082893*G0_0_2 - 0.0225749559082889*G0_1_0 - 0.045149911816578*G0_1_2 - 0.0225749559082894*G0_2_0 - 0.0451499118165786*G0_2_1;
    A[1084] = 0.27089947089947*G0_0_0 + 0.135449735449736*G0_0_1 + 0.135449735449734*G0_0_2 + 0.135449735449735*G0_1_0 + 0.316049382716048*G0_1_2 + 0.135449735449735*G0_2_0 + 0.316049382716049*G0_2_1 - 0.0902998236331568*G0_2_2;
    A[1085] = 0.0423280423280422*G0_0_0 + 0.0423280423280423*G0_0_1 + 0.0423280423280423*G0_0_2 + 0.0423280423280422*G0_1_0 + 0.0423280423280423*G0_1_1 + 0.0423280423280423*G0_1_2 + 0.0493827160493827*G0_2_0 + 0.0493827160493826*G0_2_1 + 0.0493827160493826*G0_2_2;
    A[1086] = -0.0253968253968252*G0_0_0 - 0.0070546737213403*G0_2_0;
    A[1087] = -0.0253968253968253*G0_1_1 - 0.00705467372134026*G0_2_1;
    A[1088] = 0.018342151675485*G0_2_2;
    A[1089] = 0.0451499118165782*G0_1_1 + 0.0338624338624337*G0_1_2 + 0.0338624338624333*G0_2_1 + 0.022574955908289*G0_2_2;
    A[1090] = 0.0225749559082894*G0_1_1 + 0.0197530864197532*G0_1_2 + 0.0197530864197536*G0_2_1 + 0.0169312169312172*G0_2_2;
    A[1091] = -0.0112874779541446*G0_1_2 - 0.0112874779541447*G0_2_1 - 0.0225749559082893*G0_2_2;
    A[1092] = 0.0451499118165781*G0_0_0 + 0.0338624338624336*G0_0_2 + 0.0338624338624333*G0_2_0 + 0.0225749559082889*G0_2_2;
    A[1093] = 0.022574955908289*G0_0_0 + 0.019753086419753*G0_0_2 + 0.019753086419753*G0_2_0 + 0.0169312169312167*G0_2_2;
    A[1094] = -0.0112874779541448*G0_0_2 - 0.0112874779541447*G0_2_0 - 0.0225749559082893*G0_2_2;
    A[1095] = 0.0902998236331561*G0_0_0 + 0.0338624338624335*G0_0_1 + 0.0338624338624332*G0_1_0 + 0.067724867724867*G0_2_0 + 0.0225749559082889*G0_2_1;
    A[1096] = 0.067724867724868*G0_0_0 + 0.0649029982363313*G0_0_1 + 0.0649029982363317*G0_1_0 + 0.0677248677248673*G0_1_1 + 0.0846560846560847*G0_2_0 + 0.0846560846560844*G0_2_1;
    A[1097] = 0.0338624338624336*G0_0_1 + 0.0338624338624337*G0_1_0 + 0.090299823633157*G0_1_1 + 0.0225749559082891*G0_2_0 + 0.0677248677248674*G0_2_1;
    A[1098] = -0.135449735449735*G0_0_0 - 0.135449735449735*G0_0_1 - 0.0338624338624341*G0_0_2 - 0.135449735449735*G0_1_0 - 0.135449735449735*G0_1_1 - 0.0338624338624339*G0_1_2 - 0.0338624338624339*G0_2_0 - 0.0338624338624339*G0_2_1 - 0.0451499118165785*G0_2_2;
    A[1099] = 0.0225749559082892*G0_0_0 + 0.0225749559082893*G0_0_1 - 0.0197530864197529*G0_0_2 + 0.0225749559082893*G0_1_0 + 0.0225749559082893*G0_1_1 - 0.019753086419753*G0_1_2 - 0.019753086419753*G0_2_0 - 0.0197530864197531*G0_2_1 + 0.0225749559082893*G0_2_2;
    A[1100] = 0.0112874779541445*G0_0_2 + 0.0112874779541445*G0_1_2 + 0.0112874779541447*G0_2_0 + 0.0112874779541447*G0_2_1 - 0.0451499118165785*G0_2_2;
    A[1101] = -0.27089947089947*G0_0_0 - 0.169312169312169*G0_0_1 - 0.27089947089947*G0_0_2 - 0.169312169312169*G0_1_0 - 0.0677248677248675*G0_1_1 - 0.169312169312169*G0_1_2 - 0.0677248677248675*G0_2_0 - 0.0790123456790123*G0_2_1 - 0.0677248677248675*G0_2_2;
    A[1102] = 0.0677248677248676*G0_0_0 + 0.160846560846561*G0_0_1 + 0.0677248677248675*G0_0_2 + 0.160846560846561*G0_1_0 - 0.0169312169312168*G0_1_1 + 0.160846560846561*G0_1_2 + 0.118518518518519*G0_2_0 + 0.0253968253968257*G0_2_1 + 0.118518518518519*G0_2_2;
    A[1103] = -0.0338624338624339*G0_0_1 - 0.0338624338624337*G0_1_0 + 0.0677248677248676*G0_1_1 - 0.0338624338624337*G0_1_2 - 0.0225749559082891*G0_2_0 + 0.0112874779541443*G0_2_1 - 0.0225749559082891*G0_2_2;
    A[1104] = -0.0677248677248676*G0_0_0 - 0.169312169312169*G0_0_1 - 0.169312169312169*G0_0_2 - 0.169312169312169*G0_1_0 - 0.27089947089947*G0_1_1 - 0.27089947089947*G0_1_2 - 0.0790123456790121*G0_2_0 - 0.0677248677248674*G0_2_1 - 0.0677248677248674*G0_2_2;
    A[1105] = -0.0169312169312168*G0_0_0 + 0.16084656084656*G0_0_1 + 0.16084656084656*G0_0_2 + 0.16084656084656*G0_1_0 + 0.0677248677248671*G0_1_1 + 0.0677248677248671*G0_1_2 + 0.0253968253968252*G0_2_0 + 0.118518518518518*G0_2_1 + 0.118518518518518*G0_2_2;
    A[1106] = 0.0677248677248676*G0_0_0 - 0.0338624338624336*G0_0_1 - 0.0338624338624336*G0_0_2 - 0.0338624338624338*G0_1_0 + 0.0112874779541447*G0_2_0 - 0.0225749559082889*G0_2_1 - 0.022574955908289*G0_2_2;
    A[1107] = 0.0451499118165782*G0_0_0 + 0.0451499118165779*G0_0_1 + 0.0902998236331563*G0_0_2 + 0.0451499118165784*G0_1_0 + 0.0677248677248671*G0_1_2 + 0.0902998236331566*G0_2_0 + 0.0677248677248669*G0_2_1 + 0.135449735449735*G0_2_2;
    A[1108] = 0.0451499118165784*G0_0_1 + 0.0677248677248673*G0_0_2 + 0.0451499118165786*G0_1_0 + 0.0451499118165788*G0_1_1 + 0.090299823633157*G0_1_2 + 0.0677248677248675*G0_2_0 + 0.0902998236331574*G0_2_1 + 0.135449735449735*G0_2_2;
    A[1109] = 0.0225749559082886*G0_0_1 + 0.045149911816578*G0_0_2 + 0.0225749559082893*G0_1_0 + 0.0451499118165785*G0_1_2 + 0.0451499118165786*G0_2_0 + 0.045149911816578*G0_2_1 + 0.090299823633157*G0_2_2;
    A[1110] = 0.0451499118165784*G0_0_0 + 0.180599647266313*G0_0_1 + 0.316049382716049*G0_0_2 + 0.180599647266314*G0_1_0 + 0.316049382716049*G0_1_1 + 0.180599647266314*G0_1_2 + 0.316049382716049*G0_2_0 + 0.180599647266314*G0_2_1 + 0.0451499118165783*G0_2_2;
    A[1111] = -0.0451499118165779*G0_0_1 - 0.0677248677248674*G0_0_2 - 0.0451499118165785*G0_1_0 - 0.225749559082892*G0_1_1 - 0.180599647266314*G0_1_2 - 0.0677248677248674*G0_2_0 - 0.180599647266313*G0_2_1 - 0.135449735449736*G0_2_2;
    A[1112] = -0.0225749559082895*G0_0_1 - 0.0451499118165785*G0_0_2 - 0.0225749559082894*G0_1_0 - 0.0451499118165786*G0_1_1 - 0.0451499118165787*G0_2_0 + 0.0451499118165785*G0_2_2;
    A[1113] = 0.316049382716048*G0_0_0 + 0.180599647266313*G0_0_1 + 0.180599647266314*G0_0_2 + 0.180599647266313*G0_1_0 + 0.0451499118165783*G0_1_1 + 0.316049382716048*G0_1_2 + 0.180599647266313*G0_2_0 + 0.316049382716048*G0_2_1 + 0.0451499118165781*G0_2_2;
    A[1114] = -0.225749559082891*G0_0_0 - 0.0451499118165779*G0_0_1 - 0.180599647266313*G0_0_2 - 0.0451499118165779*G0_1_0 - 0.0677248677248671*G0_1_2 - 0.180599647266313*G0_2_0 - 0.0677248677248669*G0_2_1 - 0.135449735449735*G0_2_2;
    A[1115] = -0.0451499118165783*G0_0_0 - 0.0225749559082887*G0_0_1 - 0.0225749559082892*G0_1_0 - 0.0451499118165785*G0_1_2 - 0.0451499118165782*G0_2_1 + 0.0451499118165785*G0_2_2;
    A[1116] = 0.632098765432097*G0_0_0 + 0.361199294532627*G0_0_1 + 0.361199294532627*G0_0_2 + 0.361199294532627*G0_1_0 + 0.632098765432097*G0_1_1 + 0.361199294532627*G0_1_2 + 0.361199294532626*G0_2_0 + 0.361199294532627*G0_2_1 + 0.632098765432097*G0_2_2;
    A[1117] = -0.451499118165783*G0_0_0 - 0.225749559082891*G0_0_1 - 0.0902998236331561*G0_0_2 - 0.225749559082891*G0_1_0 - 0.135449735449734*G0_1_1 - 0.067724867724867*G0_1_2 - 0.361199294532626*G0_2_0 - 0.203174603174602*G0_2_1 - 0.135449735449735*G0_2_2;
    A[1118] = -0.135449735449736*G0_0_0 - 0.225749559082892*G0_0_1 - 0.0677248677248673*G0_0_2 - 0.225749559082892*G0_1_0 - 0.451499118165784*G0_1_1 - 0.0902998236331569*G0_1_2 - 0.203174603174603*G0_2_0 - 0.361199294532627*G0_2_1 - 0.135449735449735*G0_2_2;
    A[1119] = -0.0902998236331568*G0_0_0 - 0.225749559082892*G0_0_1 - 0.406349206349205*G0_0_2 - 0.225749559082892*G0_1_0 - 0.0902998236331571*G0_1_1 - 0.406349206349206*G0_1_2 - 0.406349206349206*G0_2_0 - 0.406349206349206*G0_2_1 - 0.722398589065254*G0_2_2;
    A[1120] = -0.0253968253968252*G0_0_0 - 0.0253968253968253*G0_0_1 - 0.0253968253968253*G0_0_2 - 0.0253968253968253*G0_1_0 - 0.0253968253968253*G0_1_1 - 0.0253968253968253*G0_1_2 - 0.0183421516754848*G0_2_0 - 0.0183421516754848*G0_2_1 - 0.0183421516754848*G0_2_2;
    A[1121] = 0.0423280423280421*G0_0_0 - 0.00705467372134034*G0_2_0;
    A[1122] = -0.0253968253968255*G0_1_1 - 0.00705467372134044*G0_2_1;
    A[1123] = 0.018342151675485*G0_2_2;
    A[1124] = 0.0451499118165788*G0_1_1 + 0.0338624338624341*G0_1_2 + 0.0338624338624339*G0_2_1 + 0.0225749559082892*G0_2_2;
    A[1125] = 0.0225749559082892*G0_1_1 + 0.0197530864197532*G0_1_2 + 0.0197530864197532*G0_2_1 + 0.0169312169312173*G0_2_2;
    A[1126] = -0.0112874779541447*G0_1_2 - 0.0112874779541447*G0_2_1 - 0.0225749559082895*G0_2_2;
    A[1127] = -0.135449735449734*G0_0_0 - 0.101587301587301*G0_0_2 - 0.101587301587301*G0_2_0 - 0.112874779541446*G0_2_2;
    A[1128] = 0.0225749559082891*G0_0_0 + 0.0423280423280421*G0_0_2 + 0.042328042328042*G0_2_0 + 0.0846560846560841*G0_2_2;
    A[1129] = -0.0112874779541444*G0_0_2 - 0.0112874779541447*G0_2_0 - 0.0677248677248677*G0_2_2;
    A[1130] = -0.270899470899469*G0_0_0 - 0.101587301587301*G0_0_1 - 0.101587301587301*G0_1_0 - 0.203174603174602*G0_2_0 - 0.112874779541446*G0_2_1;
    A[1131] = 0.0677248677248667*G0_0_0 - 0.0931216931216927*G0_0_1 - 0.0931216931216933*G0_1_0 - 0.270899470899471*G0_1_1 - 0.0507936507936512*G0_2_0 - 0.186243386243386*G0_2_1;
    A[1132] = 0.0338624338624339*G0_0_1 + 0.033862433862434*G0_1_0 + 0.135449735449736*G0_1_1 + 0.0225749559082892*G0_2_0 + 0.0677248677248676*G0_2_1;
    A[1133] = 0.045149911816578*G0_0_0 + 0.0451499118165781*G0_0_1 + 0.0112874779541447*G0_0_2 + 0.0451499118165783*G0_1_0 + 0.0451499118165783*G0_1_1 + 0.0112874779541447*G0_1_2 + 0.0112874779541448*G0_2_0 + 0.0112874779541448*G0_2_1;
    A[1134] = 0.0225749559082891*G0_0_0 + 0.0225749559082891*G0_0_1 + 0.002821869488536*G0_0_2 + 0.0225749559082893*G0_1_0 + 0.0225749559082894*G0_1_1 + 0.00282186948853604*G0_1_2 + 0.00282186948853588*G0_2_0 + 0.00282186948853602*G0_2_1;
    A[1135] = 0.0112874779541447*G0_0_2 + 0.0112874779541447*G0_1_2 + 0.0112874779541448*G0_2_0 + 0.0112874779541447*G0_2_1;
    A[1136] = 0.0902998236331564*G0_0_0 + 0.0564373897707229*G0_0_1 + 0.0902998236331564*G0_0_2 + 0.0564373897707228*G0_1_0 + 0.0225749559082893*G0_1_1 + 0.0564373897707227*G0_1_2 + 0.0225749559082893*G0_2_0 + 0.0112874779541445*G0_2_1 + 0.0225749559082893*G0_2_2;
    A[1137] = 0.0677248677248675*G0_0_0 + 0.00282186948853601*G0_0_1 + 0.0677248677248677*G0_0_2 + 0.00282186948853603*G0_1_0 + 0.00564373897707182*G0_1_1 + 0.00282186948853599*G0_1_2 - 0.0169312169312172*G0_2_0 + 0.00282186948853607*G0_2_1 - 0.0169312169312173*G0_2_2;
    A[1138] = -0.0338624338624336*G0_0_1 - 0.0338624338624339*G0_1_0 + 0.0225749559082897*G0_1_1 - 0.0338624338624339*G0_1_2 - 0.022574955908289*G0_2_0 + 0.0112874779541449*G0_2_1 - 0.0225749559082891*G0_2_2;
    A[1139] = 0.0677248677248674*G0_0_0 + 0.101587301587301*G0_0_1 + 0.101587301587301*G0_0_2 + 0.101587301587301*G0_1_0 + 0.135449735449735*G0_1_1 + 0.135449735449735*G0_1_2 + 0.0564373897707224*G0_2_0 + 0.0677248677248674*G0_2_1 + 0.0677248677248673*G0_2_2;
    A[1140] = -0.0169312169312169*G0_0_0 - 0.177777777777777*G0_0_1 - 0.177777777777777*G0_0_2 - 0.177777777777777*G0_1_0 - 0.27089947089947*G0_1_1 - 0.27089947089947*G0_1_2 - 0.0423280423280416*G0_2_0 - 0.0846560846560842*G0_2_1 - 0.0846560846560842*G0_2_2;
    A[1141] = -0.0677248677248676*G0_0_0 + 0.101587301587301*G0_0_1 + 0.101587301587301*G0_0_2 + 0.101587301587301*G0_1_0 + 0.0112874779541443*G0_2_0 + 0.112874779541446*G0_2_1 + 0.112874779541446*G0_2_2;
    A[1142] = 0.0451499118165785*G0_0_0 - 0.135449735449734*G0_0_1 - 0.270899470899469*G0_0_2 - 0.135449735449735*G0_1_0 - 0.27089947089947*G0_1_2 - 0.270899470899471*G0_2_0 - 0.27089947089947*G0_2_1 - 0.541798941798941*G0_2_2;
    A[1143] = 0.0451499118165783*G0_0_1 + 0.0677248677248676*G0_0_2 + 0.0451499118165791*G0_1_0 - 0.135449735449735*G0_1_1 - 0.0677248677248675*G0_1_2 + 0.0677248677248676*G0_2_0 - 0.0677248677248683*G0_2_1;
    A[1144] = 0.0225749559082892*G0_0_1 + 0.0451499118165783*G0_0_2 + 0.0225749559082893*G0_1_0 + 0.0677248677248678*G0_1_2 + 0.0451499118165783*G0_2_0 + 0.0677248677248673*G0_2_1 + 0.135449735449735*G0_2_2;
    A[1145] = 0.0451499118165789*G0_0_0 - 0.0451499118165779*G0_0_2 - 0.0451499118165784*G0_1_1 - 0.0225749559082887*G0_1_2 - 0.0451499118165781*G0_2_0 - 0.022574955908289*G0_2_1;
    A[1146] = -0.0451499118165792*G0_0_1 - 0.0677248677248677*G0_0_2 - 0.0451499118165792*G0_1_0 - 0.0451499118165789*G0_1_1 - 0.0225749559082894*G0_1_2 - 0.0677248677248677*G0_2_0 - 0.0225749559082894*G0_2_1;
    A[1147] = -0.0225749559082889*G0_0_1 - 0.0451499118165784*G0_0_2 - 0.0225749559082892*G0_1_0 - 0.0451499118165785*G0_1_1 - 0.0225749559082892*G0_1_2 - 0.0451499118165782*G0_2_0 - 0.022574955908289*G0_2_1;
    A[1148] = -0.225749559082891*G0_0_0 - 0.180599647266313*G0_0_1 - 0.0451499118165781*G0_0_2 - 0.180599647266313*G0_1_0 - 0.135449735449735*G0_1_1 - 0.0677248677248669*G0_1_2 - 0.0451499118165781*G0_2_0 - 0.0677248677248672*G0_2_1;
    A[1149] = 0.316049382716048*G0_0_0 + 0.135449735449734*G0_0_1 + 0.135449735449735*G0_0_2 + 0.135449735449734*G0_1_0 + 0.27089947089947*G0_1_2 + 0.135449735449734*G0_2_0 + 0.27089947089947*G0_2_1;
    A[1150] = -0.045149911816578*G0_0_0 - 0.0225749559082892*G0_0_1 - 0.0451499118165784*G0_0_2 - 0.0225749559082894*G0_1_0 - 0.0677248677248678*G0_1_2 - 0.045149911816578*G0_2_0 - 0.0677248677248673*G0_2_1;
    A[1151] = -0.451499118165783*G0_0_0 - 0.225749559082891*G0_0_1 - 0.361199294532626*G0_0_2 - 0.225749559082891*G0_1_0 - 0.135449735449734*G0_1_1 - 0.203174603174602*G0_1_2 - 0.0902998236331561*G0_2_0 - 0.0677248677248669*G0_2_1 - 0.135449735449735*G0_2_2;
    A[1152] = 0.632098765432096*G0_0_0 + 0.270899470899469*G0_0_1 + 0.270899470899469*G0_0_2 + 0.270899470899469*G0_1_0 + 0.541798941798941*G0_1_1 + 0.27089947089947*G0_1_2 + 0.270899470899469*G0_2_0 + 0.27089947089947*G0_2_1 + 0.541798941798941*G0_2_2;
    A[1153] = -0.135449735449735*G0_0_0 + 0.0902998236331562*G0_0_1 - 0.0677248677248675*G0_0_2 + 0.0902998236331572*G0_1_0 - 0.135449735449736*G0_1_1 + 0.0677248677248677*G0_1_2 + 0.0677248677248683*G0_2_0 - 0.067724867724868*G0_2_1;
    A[1154] = -0.0902998236331573*G0_0_0 + 0.135449735449734*G0_0_1 + 0.316049382716048*G0_0_2 + 0.135449735449735*G0_1_0 + 0.27089947089947*G0_1_1 + 0.135449735449734*G0_1_2 + 0.316049382716049*G0_2_0 + 0.135449735449735*G0_2_1;
    A[1155] = -0.0253968253968254*G0_0_0 - 0.0253968253968254*G0_0_1 - 0.0253968253968254*G0_0_2 - 0.0253968253968253*G0_1_0 - 0.0253968253968254*G0_1_1 - 0.0253968253968254*G0_1_2 - 0.0183421516754849*G0_2_0 - 0.018342151675485*G0_2_1 - 0.0183421516754849*G0_2_2;
    A[1156] = -0.0253968253968253*G0_0_0 - 0.00705467372134038*G0_2_0;
    A[1157] = 0.0423280423280423*G0_1_1 - 0.00705467372134043*G0_2_1;
    A[1158] = 0.0183421516754849*G0_2_2;
    A[1159] = -0.135449735449735*G0_1_1 - 0.101587301587302*G0_1_2 - 0.101587301587302*G0_2_1 - 0.112874779541446*G0_2_2;
    A[1160] = 0.022574955908289*G0_1_1 + 0.0423280423280421*G0_1_2 + 0.0423280423280422*G0_2_1 + 0.0846560846560845*G0_2_2;
    A[1161] = -0.0112874779541445*G0_1_2 - 0.0112874779541447*G0_2_1 - 0.0677248677248676*G0_2_2;
    A[1162] = 0.0451499118165783*G0_0_0 + 0.0338624338624337*G0_0_2 + 0.0338624338624337*G0_2_0 + 0.022574955908289*G0_2_2;
    A[1163] = 0.0225749559082892*G0_0_0 + 0.019753086419753*G0_0_2 + 0.019753086419753*G0_2_0 + 0.016931216931217*G0_2_2;
    A[1164] = -0.0112874779541448*G0_0_2 - 0.0112874779541448*G0_2_0 - 0.0225749559082893*G0_2_2;
    A[1165] = 0.135449735449735*G0_0_0 + 0.0338624338624337*G0_0_1 + 0.0338624338624341*G0_1_0 + 0.0677248677248674*G0_2_0 + 0.0225749559082891*G0_2_1;
    A[1166] = -0.27089947089947*G0_0_0 - 0.0931216931216932*G0_0_1 - 0.0931216931216928*G0_1_0 + 0.0677248677248681*G0_1_1 - 0.186243386243385*G0_2_0 - 0.0507936507936506*G0_2_1;
    A[1167] = -0.101587301587301*G0_0_1 - 0.101587301587302*G0_1_0 - 0.270899470899471*G0_1_1 - 0.112874779541446*G0_2_0 - 0.203174603174603*G0_2_1;
    A[1168] = 0.0451499118165787*G0_0_0 + 0.0451499118165786*G0_0_1 + 0.0112874779541447*G0_0_2 + 0.0451499118165785*G0_1_0 + 0.0451499118165784*G0_1_1 + 0.0112874779541446*G0_1_2 + 0.0112874779541448*G0_2_0 + 0.0112874779541448*G0_2_1;
    A[1169] = 0.0225749559082892*G0_0_0 + 0.0225749559082893*G0_0_1 + 0.00282186948853627*G0_0_2 + 0.0225749559082892*G0_1_0 + 0.0225749559082892*G0_1_1 + 0.00282186948853621*G0_1_2 + 0.00282186948853628*G0_2_0 + 0.00282186948853627*G0_2_1;
    A[1170] = 0.0112874779541446*G0_0_2 + 0.0112874779541446*G0_1_2 + 0.0112874779541447*G0_2_0 + 0.0112874779541447*G0_2_1;
    A[1171] = 0.135449735449735*G0_0_0 + 0.101587301587302*G0_0_1 + 0.135449735449735*G0_0_2 + 0.101587301587301*G0_1_0 + 0.0677248677248675*G0_1_1 + 0.101587301587301*G0_1_2 + 0.0677248677248675*G0_2_0 + 0.0564373897707229*G0_2_1 + 0.0677248677248675*G0_2_2;
    A[1172] = -0.270899470899471*G0_0_0 - 0.177777777777778*G0_0_1 - 0.270899470899471*G0_0_2 - 0.177777777777778*G0_1_0 - 0.0169312169312168*G0_1_1 - 0.177777777777778*G0_1_2 - 0.0846560846560847*G0_2_0 - 0.0423280423280422*G0_2_1 - 0.0846560846560849*G0_2_2;
    A[1173] = 0.101587301587302*G0_0_1 + 0.101587301587302*G0_1_0 - 0.0677248677248677*G0_1_1 + 0.101587301587302*G0_1_2 + 0.112874779541446*G0_2_0 + 0.0112874779541447*G0_2_1 + 0.112874779541446*G0_2_2;
    A[1174] = 0.0225749559082891*G0_0_0 + 0.0564373897707232*G0_0_1 + 0.0564373897707231*G0_0_2 + 0.056437389770723*G0_1_0 + 0.0902998236331568*G0_1_1 + 0.0902998236331568*G0_1_2 + 0.0112874779541445*G0_2_0 + 0.0225749559082892*G0_2_1 + 0.0225749559082892*G0_2_2;
    A[1175] = 0.00564373897707253*G0_0_0 + 0.00282186948853607*G0_0_1 + 0.0028218694885361*G0_0_2 + 0.00282186948853607*G0_1_0 + 0.0677248677248678*G0_1_1 + 0.0677248677248678*G0_1_2 + 0.00282186948853625*G0_2_0 - 0.0169312169312169*G0_2_1 - 0.016931216931217*G0_2_2;
    A[1176] = 0.022574955908289*G0_0_0 - 0.0338624338624338*G0_0_1 - 0.0338624338624337*G0_0_2 - 0.0338624338624336*G0_1_0 + 0.0112874779541446*G0_2_0 - 0.022574955908289*G0_2_1 - 0.0225749559082891*G0_2_2;
    A[1177] = -0.135449735449736*G0_0_0 + 0.0451499118165779*G0_0_1 - 0.0677248677248685*G0_0_2 + 0.0451499118165785*G0_1_0 + 0.0677248677248681*G0_1_2 - 0.0677248677248682*G0_2_0 + 0.0677248677248671*G0_2_1;
    A[1178] = -0.135449735449735*G0_0_1 - 0.270899470899471*G0_0_2 - 0.135449735449736*G0_1_0 + 0.0451499118165781*G0_1_1 - 0.270899470899471*G0_1_2 - 0.270899470899471*G0_2_0 - 0.270899470899471*G0_2_1 - 0.541798941798941*G0_2_2;
    A[1179] = 0.0225749559082891*G0_0_1 + 0.0677248677248676*G0_0_2 + 0.022574955908289*G0_1_0 + 0.045149911816578*G0_1_2 + 0.0677248677248674*G0_2_0 + 0.0451499118165781*G0_2_1 + 0.135449735449735*G0_2_2;
    A[1180] = -0.135449735449736*G0_0_0 - 0.180599647266314*G0_0_1 - 0.0677248677248676*G0_0_2 - 0.180599647266314*G0_1_0 - 0.225749559082892*G0_1_1 - 0.0451499118165783*G0_1_2 - 0.0677248677248677*G0_2_0 - 0.0451499118165787*G0_2_1;
    A[1181] = 0.135449735449735*G0_0_1 + 0.27089947089947*G0_0_2 + 0.135449735449736*G0_1_0 + 0.316049382716049*G0_1_1 + 0.135449735449736*G0_1_2 + 0.270899470899471*G0_2_0 + 0.135449735449735*G0_2_1;
    A[1182] = -0.0225749559082893*G0_0_1 - 0.0677248677248675*G0_0_2 - 0.0225749559082889*G0_1_0 - 0.0451499118165782*G0_1_1 - 0.0451499118165786*G0_1_2 - 0.0677248677248671*G0_2_0 - 0.0451499118165785*G0_2_1;
    A[1183] = -0.0451499118165787*G0_0_0 - 0.022574955908289*G0_0_2 + 0.0451499118165787*G0_1_1 - 0.0451499118165783*G0_1_2 - 0.0225749559082892*G0_2_0 - 0.0451499118165782*G0_2_1;
    A[1184] = -0.0451499118165782*G0_0_0 - 0.0451499118165779*G0_0_1 - 0.0225749559082891*G0_0_2 - 0.0451499118165787*G0_1_0 - 0.0677248677248676*G0_1_2 - 0.0225749559082891*G0_2_0 - 0.0677248677248672*G0_2_1;
    A[1185] = -0.0451499118165785*G0_0_0 - 0.0225749559082889*G0_0_1 - 0.0225749559082894*G0_0_2 - 0.0225749559082892*G0_1_0 - 0.0451499118165786*G0_1_2 - 0.0225749559082893*G0_2_0 - 0.045149911816578*G0_2_1;
    A[1186] = -0.135449735449736*G0_0_0 - 0.225749559082892*G0_0_1 - 0.203174603174603*G0_0_2 - 0.225749559082892*G0_1_0 - 0.451499118165784*G0_1_1 - 0.361199294532627*G0_1_2 - 0.0677248677248673*G0_2_0 - 0.0902998236331569*G0_2_1 - 0.135449735449735*G0_2_2;
    A[1187] = -0.135449735449735*G0_0_0 + 0.0902998236331572*G0_0_1 + 0.0677248677248683*G0_0_2 + 0.0902998236331562*G0_1_0 - 0.135449735449736*G0_1_1 - 0.067724867724868*G0_1_2 - 0.0677248677248675*G0_2_0 + 0.0677248677248677*G0_2_1;
    A[1188] = 0.541798941798941*G0_0_0 + 0.27089947089947*G0_0_1 + 0.270899470899471*G0_0_2 + 0.27089947089947*G0_1_0 + 0.632098765432098*G0_1_1 + 0.27089947089947*G0_1_2 + 0.27089947089947*G0_2_0 + 0.27089947089947*G0_2_1 + 0.541798941798941*G0_2_2;
    A[1189] = 0.270899470899471*G0_0_0 + 0.135449735449736*G0_0_1 + 0.135449735449736*G0_0_2 + 0.135449735449735*G0_1_0 - 0.090299823633157*G0_1_1 + 0.316049382716049*G0_1_2 + 0.135449735449736*G0_2_0 + 0.316049382716049*G0_2_1;
    A[1190] = -0.0677248677248676*G0_0_0 - 0.0677248677248675*G0_0_1 - 0.0677248677248675*G0_0_2 - 0.0677248677248675*G0_1_0 - 0.0677248677248675*G0_1_1 - 0.0677248677248675*G0_1_2 - 0.0677248677248677*G0_2_0 - 0.0677248677248677*G0_2_1 - 0.0677248677248678*G0_2_2;
    A[1191] = -0.0677248677248673*G0_0_0;
    A[1192] = -0.0677248677248679*G0_1_1;
    A[1193] = -0.0677248677248677*G0_2_2;
    A[1194] = 0.0902998236331573*G0_1_1;
    A[1195] = -0.135449735449736*G0_1_1 - 0.112874779541446*G0_1_2 - 0.112874779541447*G0_2_1 - 0.135449735449736*G0_2_2;
    A[1196] = 0.090299823633157*G0_2_2;
    A[1197] = 0.0902998236331567*G0_0_0;
    A[1198] = -0.135449735449735*G0_0_0 - 0.112874779541446*G0_0_2 - 0.112874779541446*G0_2_0 - 0.135449735449735*G0_2_2;
    A[1199] = 0.0902998236331571*G0_2_2;
    A[1200] = 0.0902998236331567*G0_0_0;
    A[1201] = -0.135449735449735*G0_0_0 - 0.112874779541446*G0_0_1 - 0.112874779541446*G0_1_0 - 0.135449735449735*G0_1_1;
    A[1202] = 0.0902998236331573*G0_1_1;
    A[1203] = 0.0902998236331577*G0_0_0 + 0.0902998236331575*G0_0_1 + 0.0902998236331568*G0_0_2 + 0.0902998236331572*G0_1_0 + 0.0902998236331572*G0_1_1 + 0.0902998236331567*G0_1_2 + 0.090299823633157*G0_2_0 + 0.0902998236331569*G0_2_1 + 0.0902998236331572*G0_2_2;
    A[1204] = -0.135449735449735*G0_0_0 - 0.135449735449735*G0_0_1 - 0.0225749559082892*G0_0_2 - 0.135449735449736*G0_1_0 - 0.135449735449736*G0_1_1 - 0.0225749559082889*G0_1_2 - 0.0225749559082892*G0_2_0 - 0.022574955908289*G0_2_1 - 0.0451499118165785*G0_2_2;
    A[1205] = 0.090299823633157*G0_2_2;
    A[1206] = 0.0902998236331573*G0_0_0 + 0.0902998236331569*G0_0_1 + 0.0902998236331573*G0_0_2 + 0.0902998236331569*G0_1_0 + 0.0902998236331568*G0_1_1 + 0.090299823633157*G0_1_2 + 0.0902998236331567*G0_2_0 + 0.0902998236331571*G0_2_1 + 0.0902998236331566*G0_2_2;
    A[1207] = -0.135449735449736*G0_0_0 - 0.0225749559082895*G0_0_1 - 0.135449735449736*G0_0_2 - 0.0225749559082895*G0_1_0 - 0.0451499118165785*G0_1_1 - 0.0225749559082896*G0_1_2 - 0.135449735449735*G0_2_0 - 0.0225749559082894*G0_2_1 - 0.135449735449735*G0_2_2;
    A[1208] = 0.0902998236331572*G0_1_1;
    A[1209] = 0.0902998236331562*G0_0_0 + 0.090299823633157*G0_0_1 + 0.090299823633157*G0_0_2 + 0.0902998236331565*G0_1_0 + 0.0902998236331568*G0_1_1 + 0.0902998236331568*G0_1_2 + 0.0902998236331569*G0_2_0 + 0.0902998236331566*G0_2_1 + 0.0902998236331566*G0_2_2;
    A[1210] = -0.0451499118165776*G0_0_0 - 0.0225749559082888*G0_0_1 - 0.0225749559082888*G0_0_2 - 0.0225749559082887*G0_1_0 - 0.135449735449734*G0_1_1 - 0.135449735449735*G0_1_2 - 0.022574955908289*G0_2_0 - 0.135449735449734*G0_2_1 - 0.135449735449734*G0_2_2;
    A[1211] = 0.0902998236331563*G0_0_0;
    A[1212] = -0.722398589065254*G0_0_0 - 0.316049382716048*G0_0_1 - 0.316049382716049*G0_0_2 - 0.316049382716049*G0_1_0 - 0.135449735449735*G0_1_2 - 0.316049382716048*G0_2_0 - 0.135449735449734*G0_2_1;
    A[1213] = -0.31604938271605*G0_0_1 - 0.135449735449736*G0_0_2 - 0.316049382716049*G0_1_0 - 0.722398589065255*G0_1_1 - 0.316049382716048*G0_1_2 - 0.135449735449736*G0_2_0 - 0.31604938271605*G0_2_1;
    A[1214] = -0.135449735449734*G0_0_1 - 0.316049382716049*G0_0_2 - 0.135449735449735*G0_1_0 - 0.316049382716049*G0_1_2 - 0.316049382716048*G0_2_0 - 0.316049382716048*G0_2_1 - 0.722398589065254*G0_2_2;
    A[1215] = -0.722398589065254*G0_0_0 - 0.406349206349206*G0_0_1 - 0.406349206349206*G0_0_2 - 0.406349206349206*G0_1_0 - 0.0902998236331573*G0_1_1 - 0.225749559082892*G0_1_2 - 0.406349206349206*G0_2_0 - 0.225749559082893*G0_2_1 - 0.0902998236331569*G0_2_2;
    A[1216] = 0.316049382716049*G0_0_1 + 0.135449735449736*G0_0_2 + 0.316049382716049*G0_1_0 - 0.0902998236331572*G0_1_1 + 0.135449735449736*G0_1_2 + 0.135449735449736*G0_2_0 + 0.135449735449735*G0_2_1 + 0.270899470899471*G0_2_2;
    A[1217] = 0.135449735449736*G0_0_1 + 0.316049382716049*G0_0_2 + 0.135449735449736*G0_1_0 + 0.270899470899471*G0_1_1 + 0.135449735449736*G0_1_2 + 0.316049382716049*G0_2_0 + 0.135449735449736*G0_2_1 - 0.0902998236331567*G0_2_2;
    A[1218] = -0.0902998236331568*G0_0_0 - 0.406349206349205*G0_0_1 - 0.225749559082892*G0_0_2 - 0.406349206349205*G0_1_0 - 0.722398589065255*G0_1_1 - 0.406349206349206*G0_1_2 - 0.225749559082892*G0_2_0 - 0.406349206349205*G0_2_1 - 0.0902998236331567*G0_2_2;
    A[1219] = -0.0902998236331569*G0_0_0 + 0.316049382716049*G0_0_1 + 0.135449735449735*G0_0_2 + 0.316049382716048*G0_1_0 + 0.135449735449734*G0_1_2 + 0.135449735449735*G0_2_0 + 0.135449735449734*G0_2_1 + 0.270899470899469*G0_2_2;
    A[1220] = 0.27089947089947*G0_0_0 + 0.135449735449735*G0_0_1 + 0.135449735449735*G0_0_2 + 0.135449735449736*G0_1_0 + 0.316049382716049*G0_1_2 + 0.135449735449734*G0_2_0 + 0.316049382716048*G0_2_1 - 0.0902998236331569*G0_2_2;
    A[1221] = -0.0902998236331568*G0_0_0 - 0.225749559082892*G0_0_1 - 0.406349206349205*G0_0_2 - 0.225749559082892*G0_1_0 - 0.0902998236331572*G0_1_1 - 0.406349206349206*G0_1_2 - 0.406349206349205*G0_2_0 - 0.406349206349206*G0_2_1 - 0.722398589065254*G0_2_2;
    A[1222] = -0.0902998236331573*G0_0_0 + 0.135449735449735*G0_0_1 + 0.316049382716049*G0_0_2 + 0.135449735449734*G0_1_0 + 0.27089947089947*G0_1_1 + 0.135449735449735*G0_1_2 + 0.316049382716048*G0_2_0 + 0.135449735449734*G0_2_1;
    A[1223] = 0.270899470899471*G0_0_0 + 0.135449735449735*G0_0_1 + 0.135449735449736*G0_0_2 + 0.135449735449736*G0_1_0 - 0.090299823633157*G0_1_1 + 0.316049382716049*G0_1_2 + 0.135449735449736*G0_2_0 + 0.316049382716049*G0_2_1;
    A[1224] = 1.44479717813051*G0_0_0 + 0.722398589065255*G0_0_1 + 0.722398589065254*G0_0_2 + 0.722398589065255*G0_1_0 + 1.44479717813051*G0_1_1 + 0.722398589065255*G0_1_2 + 0.722398589065254*G0_2_0 + 0.722398589065255*G0_2_1 + 1.44479717813051*G0_2_2;
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class UFC_Poisson3D_4BilinearForm: public ufc::form
{
public:

  /// Constructor
  UFC_Poisson3D_4BilinearForm() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson3D_4BilinearForm()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "(dXa0[0, 1, 2]/dxb0[0, 1, 2])(dXa1[0, 1, 2]/dxb0[0, 1, 2]) | ((d/dXa0[0, 1, 2])vi0[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34])*((d/dXa1[0, 1, 2])vi1[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34])*dX(0)";
  }

  /// Return the rank of the global tensor (r)
  virtual unsigned int rank() const
  {
    return 2;
  }

  /// Return the number of coefficients (n)
  virtual unsigned int num_coefficients() const
  {
    return 0;
  }

  /// Return the number of cell integrals
  virtual unsigned int num_cell_integrals() const
  {
    return 1;
  }
  
  /// Return the number of exterior facet integrals
  virtual unsigned int num_exterior_facet_integrals() const
  {
    return 0;
  }
  
  /// Return the number of interior facet integrals
  virtual unsigned int num_interior_facet_integrals() const
  {
    return 0;
  }
    
  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new UFC_Poisson3D_4BilinearForm_finite_element_0();
      break;
    case 1:
      return new UFC_Poisson3D_4BilinearForm_finite_element_1();
      break;
    }
    return 0;
  }
  
  /// Create a new dof map for argument function i
  virtual ufc::dof_map* create_dof_map(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new UFC_Poisson3D_4BilinearForm_dof_map_0();
      break;
    case 1:
      return new UFC_Poisson3D_4BilinearForm_dof_map_1();
      break;
    }
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(unsigned int i) const
  {
    return new UFC_Poisson3D_4BilinearForm_cell_integral_0();
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(unsigned int i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(unsigned int i) const
  {
    return 0;
  }

};

/// This class defines the interface for a finite element.

class UFC_Poisson3D_4LinearForm_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  UFC_Poisson3D_4LinearForm_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson3D_4LinearForm_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', 'tetrahedron', 4)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 35;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_02 = element_coordinates[3][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
    const double J_12 = element_coordinates[3][1] - element_coordinates[0][1];
    const double J_20 = element_coordinates[1][2] - element_coordinates[0][2];
    const double J_21 = element_coordinates[2][2] - element_coordinates[0][2];
    const double J_22 = element_coordinates[3][2] - element_coordinates[0][2];
      
    // Compute sub determinants
    const double d00 = J_11*J_22 - J_12*J_21;
    const double d01 = J_12*J_20 - J_10*J_22;
    const double d02 = J_10*J_21 - J_11*J_20;
    
    const double d10 = J_02*J_21 - J_01*J_22;
    const double d11 = J_00*J_22 - J_02*J_20;
    const double d12 = J_01*J_20 - J_00*J_21;
    
    const double d20 = J_01*J_12 - J_02*J_11;
    const double d21 = J_02*J_10 - J_00*J_12;
    const double d22 = J_00*J_11 - J_01*J_10;
      
    // Compute determinant of Jacobian
    double detJ = J_00*d00 + J_10*d10 + J_20*d20;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = d00*(element_coordinates[0][0] - element_coordinates[2][0] - element_coordinates[3][0]) \
                    + d10*(element_coordinates[0][1] - element_coordinates[2][1] - element_coordinates[3][1]) \
                    + d20*(element_coordinates[0][2] - element_coordinates[2][2] - element_coordinates[3][2]);
    
    const double C1 = d01*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[3][0]) \
                    + d11*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[3][1]) \
                    + d21*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[3][2]);
    
    const double C2 = d02*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[2][0]) \
                    + d12*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[2][1]) \
                    + d22*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[2][2]);
    
    // Get coordinates and map to the UFC reference element
    double x = (C0 + d00*coordinates[0] + d10*coordinates[1] + d20*coordinates[2]) / detJ;
    double y = (C1 + d01*coordinates[0] + d11*coordinates[1] + d21*coordinates[2]) / detJ;
    double z = (C2 + d02*coordinates[0] + d12*coordinates[1] + d22*coordinates[2]) / detJ;
    
    // Map coordinates to the reference cube
    if (std::abs(y + z - 1.0) < 1e-14)
      x = 1.0;
    else
      x = -2.0 * x/(y + z - 1.0) - 1.0;
    if (std::abs(z - 1.0) < 1e-14)
      y = -1.0;
    else
      y = 2.0 * y/(1.0 - z) - 1.0;
    z = 2.0 * z - 1.0;
    
    // Reset values
    *values = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    const double scalings_y_4 = scalings_y_3*(0.5 - 0.5*y);
    const double scalings_z_0 = 1;
    const double scalings_z_1 = scalings_z_0*(0.5 - 0.5*z);
    const double scalings_z_2 = scalings_z_1*(0.5 - 0.5*z);
    const double scalings_z_3 = scalings_z_2*(0.5 - 0.5*z);
    const double scalings_z_4 = scalings_z_3*(0.5 - 0.5*z);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    const double psitilde_a_4 = 1.75*x*psitilde_a_3 - 0.75*psitilde_a_2;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_0_4 = 0.0285714285714286*psitilde_bs_0_3 + 1.8*y*psitilde_bs_0_3 - 0.771428571428571*psitilde_bs_0_2;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_1_3 = 0.285714285714286*psitilde_bs_1_2 + 2*y*psitilde_bs_1_2 - 0.714285714285714*psitilde_bs_1_1;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_2_2 = 1.02040816326531*psitilde_bs_2_1 + 2.57142857142857*y*psitilde_bs_2_1 - 0.551020408163265*psitilde_bs_2_0;
    const double psitilde_bs_3_0 = 1;
    const double psitilde_bs_3_1 = 4.5*y + 3.5;
    const double psitilde_bs_4_0 = 1;
    
    // Compute psitilde_cs
    const double psitilde_cs_00_0 = 1;
    const double psitilde_cs_00_1 = 2*z + 1;
    const double psitilde_cs_00_2 = 0.3125*psitilde_cs_00_1 + 1.875*z*psitilde_cs_00_1 - 0.5625*psitilde_cs_00_0;
    const double psitilde_cs_00_3 = 0.155555555555556*psitilde_cs_00_2 + 1.86666666666667*z*psitilde_cs_00_2 - 0.711111111111111*psitilde_cs_00_1;
    const double psitilde_cs_00_4 = 0.09375*psitilde_cs_00_3 + 1.875*z*psitilde_cs_00_3 - 0.78125*psitilde_cs_00_2;
    const double psitilde_cs_01_0 = 1;
    const double psitilde_cs_01_1 = 3*z + 2;
    const double psitilde_cs_01_2 = 0.777777777777778*psitilde_cs_01_1 + 2.33333333333333*z*psitilde_cs_01_1 - 0.555555555555556*psitilde_cs_01_0;
    const double psitilde_cs_01_3 = 0.428571428571429*psitilde_cs_01_2 + 2.14285714285714*z*psitilde_cs_01_2 - 0.714285714285714*psitilde_cs_01_1;
    const double psitilde_cs_02_0 = 1;
    const double psitilde_cs_02_1 = 4*z + 3;
    const double psitilde_cs_02_2 = 1.265625*psitilde_cs_02_1 + 2.8125*z*psitilde_cs_02_1 - 0.546875*psitilde_cs_02_0;
    const double psitilde_cs_03_0 = 1;
    const double psitilde_cs_03_1 = 5*z + 4;
    const double psitilde_cs_04_0 = 1;
    const double psitilde_cs_10_0 = 1;
    const double psitilde_cs_10_1 = 3*z + 2;
    const double psitilde_cs_10_2 = 0.777777777777778*psitilde_cs_10_1 + 2.33333333333333*z*psitilde_cs_10_1 - 0.555555555555556*psitilde_cs_10_0;
    const double psitilde_cs_10_3 = 0.428571428571429*psitilde_cs_10_2 + 2.14285714285714*z*psitilde_cs_10_2 - 0.714285714285714*psitilde_cs_10_1;
    const double psitilde_cs_11_0 = 1;
    const double psitilde_cs_11_1 = 4*z + 3;
    const double psitilde_cs_11_2 = 1.265625*psitilde_cs_11_1 + 2.8125*z*psitilde_cs_11_1 - 0.546875*psitilde_cs_11_0;
    const double psitilde_cs_12_0 = 1;
    const double psitilde_cs_12_1 = 5*z + 4;
    const double psitilde_cs_13_0 = 1;
    const double psitilde_cs_20_0 = 1;
    const double psitilde_cs_20_1 = 4*z + 3;
    const double psitilde_cs_20_2 = 1.265625*psitilde_cs_20_1 + 2.8125*z*psitilde_cs_20_1 - 0.546875*psitilde_cs_20_0;
    const double psitilde_cs_21_0 = 1;
    const double psitilde_cs_21_1 = 5*z + 4;
    const double psitilde_cs_22_0 = 1;
    const double psitilde_cs_30_0 = 1;
    const double psitilde_cs_30_1 = 5*z + 4;
    const double psitilde_cs_31_0 = 1;
    const double psitilde_cs_40_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.866025403784439*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_0;
    const double basisvalue1 = 2.73861278752583*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_0;
    const double basisvalue2 = 1.58113883008419*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_0;
    const double basisvalue3 = 1.11803398874989*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_1;
    const double basisvalue4 = 5.1234753829798*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_0;
    const double basisvalue5 = 3.96862696659689*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_0;
    const double basisvalue6 = 2.29128784747792*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_0;
    const double basisvalue7 = 3.24037034920393*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_1;
    const double basisvalue8 = 1.87082869338697*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_1;
    const double basisvalue9 = 1.3228756555323*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_2;
    const double basisvalue10 = 7.93725393319377*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_0;
    const double basisvalue11 = 6.70820393249937*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_0;
    const double basisvalue12 = 5.19615242270663*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_0;
    const double basisvalue13 = 3*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_0;
    const double basisvalue14 = 5.80947501931113*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_1;
    const double basisvalue15 = 4.5*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_1;
    const double basisvalue16 = 2.59807621135332*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_1;
    const double basisvalue17 = 3.67423461417477*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_2;
    const double basisvalue18 = 2.12132034355964*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_2;
    const double basisvalue19 = 1.5*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_3;
    const double basisvalue20 = 11.1242977306435*psitilde_a_4*scalings_y_4*psitilde_bs_4_0*scalings_z_4*psitilde_cs_40_0;
    const double basisvalue21 = 9.81070843517429*psitilde_a_3*scalings_y_3*psitilde_bs_3_1*scalings_z_4*psitilde_cs_31_0;
    const double basisvalue22 = 8.2915619758885*psitilde_a_2*scalings_y_2*psitilde_bs_2_2*scalings_z_4*psitilde_cs_22_0;
    const double basisvalue23 = 6.42261628933256*psitilde_a_1*scalings_y_1*psitilde_bs_1_3*scalings_z_4*psitilde_cs_13_0;
    const double basisvalue24 = 3.70809924354783*psitilde_a_0*scalings_y_0*psitilde_bs_0_4*scalings_z_4*psitilde_cs_04_0;
    const double basisvalue25 = 8.77496438739212*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_1;
    const double basisvalue26 = 7.41619848709566*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_1;
    const double basisvalue27 = 5.74456264653803*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_1;
    const double basisvalue28 = 3.3166247903554*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_1;
    const double basisvalue29 = 6.42261628933256*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_2;
    const double basisvalue30 = 4.9749371855331*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_2;
    const double basisvalue31 = 2.87228132326901*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_2;
    const double basisvalue32 = 4.06201920231798*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_3;
    const double basisvalue33 = 2.34520787991171*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_3;
    const double basisvalue34 = 1.6583123951777*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_4;
    
    // Table(s) of coefficients
    const static double coefficients0[35][35] = \
    {{-0.0137464349807051, -0.0144900147488139, -0.00836581391578937, -0.00591552374999941, 0, 0, 0, 0, 0, 0, -0.00671936840905293, -0.00567890279999946, -0.00439885919382571, -0.00253968253968254, -0.00491807409042211, -0.00380952380952381, -0.00219942959691287, -0.00311046316543895, -0.0017958267458706, -0.00126984126984128, 0.0136980289516341, 0.0120805260192622, 0.010209907964538, 0.00790856070259325, 0.00456600965054471, 0.0108051509532101, 0.00913201930108942, 0.00707363173407281, 0.00408396318581522, 0.00790856070259324, 0.00612594477872282, 0.0035368158670364, 0.00500181296677924, 0.00288779806280616, 0.00204198159290761},
    {-0.0137464349807054, 0.0144900147488139, -0.00836581391578934, -0.00591552374999945, 0, 0, 0, 0, 0, 0, 0.00671936840905293, -0.00567890279999946, 0.00439885919382572, -0.00253968253968254, -0.00491807409042213, 0.00380952380952382, -0.00219942959691286, 0.00311046316543897, -0.0017958267458706, -0.00126984126984127, 0.0136980289516341, -0.0120805260192622, 0.010209907964538, -0.00790856070259325, 0.00456600965054471, -0.0108051509532101, 0.00913201930108941, -0.0070736317340728, 0.00408396318581521, 0.00790856070259325, -0.00612594477872282, 0.0035368158670364, -0.00500181296677924, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807053, 0, 0.0167316278315787, -0.00591552374999946, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0101587301587302, 0, 0, -0.00659828879073857, 0, 0.00359165349174119, -0.00126984126984127, 0, 0, 0, 0, 0.0228300482527235, 0, 0, 0, -0.0163358527432608, 0, 0, 0.0106104476011092, 0, -0.0057755961256123, 0.00204198159290761},
    {-0.0137464349807054, 0, 0, 0.0177465712499983, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0126984126984127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0306297238936141},
    {0.0439885919382572, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0, 0.0406349206349206, 0, 0, 0.00439885919382572, 0, -0.0143666139669648, 0.00761904761904763, 0, 0, 0, 0, 0, 0, 0, 0, 0.0367556686723369, 0, 0, -0.0424417904044368, 0, 0.0303218796594646, -0.0122518895574456},
    {-0.0329914439536931, 0, -0.0200779533978945, -0.0141972569999986, 0, 0, -0.00969857289937744, 0, 0.0712696645099798, -0.050395263067897, 0, 0, 0, 0, 0, 0, 0.0461880215351701, 0, 0.0107749604752236, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0495154221385096, 0, -0.0606437593189292, 0.0306297238936141},
    {0.0439885919382573, 0, 0.0267706045305259, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0, 0.0359165349174119, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0505364660991076, -0.0408396318581522},
    {0.0439885919382573, 0.0231840235981023, -0.0133853022652629, 0.0189296759999982, 0.0433733365754904, -0.0335968420452647, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, -0.0227156111999979, 0.0175954367753029, -0.0101587301587302, 0.00327871606028141, -0.00253968253968255, 0.0014662863979419, -0.0124418526617558, 0.00718330698348238, 0.00761904761904763, 0, 0, 0, 0, 0, 0.0243115896447228, -0.0205470434274512, 0.0159156714016638, -0.00918891716808423, -0.031634242810373, 0.0245037791148913, -0.0141472634681456, 0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, -0.0173880176985766, 0.0100389766989472, -0.0141972569999986, -0.00722888942924838, 0.00559947367421081, -0.00323285763312582, 0.0617213399848368, -0.03563483225499, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, -0.0266666666666667, 0.01539600717839, 0.00933138949631686, -0.00538748023761177, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, -0.0285877423007065, 0.0165051407128365, -0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, 0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0.0311046316543895, -0.017958267458706, 0.0253968253968255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754903, -0.0335968420452647, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, 0, -0.0117302911835353, 0.0101587301587302, -0.0229510124219699, 0.00761904761904761, -0.00146628639794191, 0.0165891368823411, -0.0071833069834824, -0.00761904761904763, 0, 0.0241610520385245, -0.0357346778758831, 0.0355885231616696, -0.0228300482527235, -0.00270128773830253, -0.0114150241263618, 0.0159156714016638, -0.0112308987609918, 0.00395428035129663, 0.00306297238936141, -0.0035368158670364, -0.00375135972508443, 0.00072194951570154, 0.00204198159290761},
    {-0.0329914439536929, -0.0173880176985768, -0.0100389766989472, 0.0141972569999986, -0.00722888942924839, 0.0615942104163185, -0.0614242950293904, -0.00685792666498187, -0.00395942580611001, 0.00559947367421077, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042213, -0.0266666666666667, 0.0175954367753029, 0.00933138949631688, 0.00538748023761179, -0.00761904761904761, 0, 0, 0.0357346778758831, -0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108943, 0, 0.00408396318581521, 0.00131809345043221, 0.00714693557517662, -0.00471575448938186, -0.00250090648338962, -0.00144389903140307, 0.00204198159290761},
    {0.0439885919382572, 0.0231840235981022, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0.0293257279588382, 0.0101587301587302, 0, -0.0101587301587302, -0.0219942959691286, 0.00207364211029264, 0.017958267458706, -0.00761904761904762, 0, 0, 0, 0.0395428035129662, -0.0456600965054471, 0, 0, -0.017684079335182, 0.0142938711503532, 0, 0.00612594477872282, 0, -0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.043988591938257, -0.0231840235981023, -0.0133853022652629, 0.0189296759999983, 0.0433733365754903, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484216, -0.0268774736362117, -0.0227156111999979, -0.0175954367753029, -0.0101587301587302, 0.00327871606028139, 0.00253968253968253, 0.0014662863979419, 0.0124418526617558, 0.00718330698348236, 0.00761904761904761, 0, 0, 0, 0, 0, -0.0243115896447228, -0.0205470434274512, -0.0159156714016638, -0.00918891716808424, -0.031634242810373, -0.0245037791148913, -0.0141472634681456, -0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, 0.0173880176985768, 0.0100389766989471, -0.0141972569999987, -0.00722888942924838, -0.00559947367421082, -0.00323285763312581, -0.0617213399848367, -0.03563483225499, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, 0.0266666666666667, 0.01539600717839, -0.00933138949631689, -0.00538748023761178, -0.019047619047619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, 0.0285877423007065, 0.0165051407128365, 0.0525190361511819, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382572, -0.0231840235981023, -0.0133853022652629, 0.0189296759999981, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, -0.0311046316543896, -0.017958267458706, 0.0253968253968255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484216, -0.0268774736362117, 0, 0.0117302911835352, 0.0101587301587302, -0.0229510124219699, -0.00761904761904762, -0.00146628639794191, -0.0165891368823411, -0.00718330698348239, -0.00761904761904763, 0, -0.0241610520385245, -0.0357346778758831, -0.0355885231616696, -0.0228300482527235, 0.00270128773830254, -0.0114150241263618, -0.0159156714016638, -0.0112308987609918, 0.00395428035129662, -0.00306297238936141, -0.0035368158670364, 0.00375135972508443, 0.000721949515701533, 0.00204198159290761},
    {-0.0329914439536929, 0.0173880176985766, -0.0100389766989472, 0.0141972569999987, -0.00722888942924841, -0.0615942104163186, -0.0614242950293904, 0.00685792666498186, -0.00395942580610998, 0.00559947367421075, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042213, 0.0266666666666667, 0.0175954367753029, -0.00933138949631688, 0.00538748023761179, -0.00761904761904763, 0, 0, 0.0357346778758831, 0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108943, 0, 0.0040839631858152, 0.00131809345043222, -0.00714693557517663, -0.00471575448938187, 0.00250090648338962, -0.00144389903140308, 0.00204198159290761},
    {0.0439885919382573, -0.0231840235981022, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, -0.0293257279588382, 0.0101587301587302, 0, 0.0101587301587301, -0.0219942959691286, -0.00207364211029265, 0.017958267458706, -0.00761904761904761, 0, 0, 0, -0.0395428035129663, -0.0456600965054471, 0, 0, 0.017684079335182, 0.0142938711503532, 0, -0.00612594477872281, 0, 0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.0439885919382571, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484215, 0.0134387368181058, -0.0113578055999989, -0.0205280095711867, -0.0152380952380952, -0.00983614818084424, -0.0177777777777778, -0.0131965775814772, -0.0145154947720485, -0.0107749604752236, -0.00761904761904761, -0.0547921158065365, -0.0241610520385245, -0.00510495398226901, 0.00395428035129663, 0.00456600965054471, -0.0216103019064202, -0.00456600965054471, 0.00353681586703639, 0.00408396318581521, -0.00395428035129661, 0.0030629723893614, 0.0035368158670364, 0.00250090648338961, 0.00288779806280615, 0.00204198159290761},
    {-0.0329914439536931, 0, 0.0200779533978945, 0.0141972569999987, -0.0867466731509807, 0, 0.00969857289937743, 0, 0.00791885161221998, 0.00559947367421076, 0, 0.0340734167999968, 0, -0.0152380952380953, 0.0295084445425327, 0, -0.0131965775814772, 0, -0.0107749604752236, -0.00761904761904762, 0.0821881737098047, 0, -0.010209907964538, 0, 0.00456600965054471, 0, -0.00913201930108944, 0, 0.00408396318581521, -0.00790856070259326, 0, 0.0035368158670364, 0, 0.00288779806280615, 0.00204198159290761},
    {0.0439885919382573, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754903, -0.0335968420452646, 0.0193971457987549, -0.0274317066599274, 0.01583770322444, 0.0111989473484215, -0.0134387368181058, -0.0113578055999989, 0.0205280095711867, -0.0152380952380952, -0.00983614818084423, 0.0177777777777778, -0.0131965775814772, 0.0145154947720485, -0.0107749604752236, -0.00761904761904761, -0.0547921158065365, 0.0241610520385245, -0.005104953982269, -0.00395428035129662, 0.00456600965054471, 0.0216103019064202, -0.0045660096505447, -0.0035368158670364, 0.00408396318581521, -0.00395428035129662, -0.00306297238936141, 0.00353681586703641, -0.00250090648338962, 0.00288779806280615, 0.00204198159290761},
    {0.0439885919382573, 0.139104141588614, -0.080311813591578, -0.0567890279999947, 0.0578311154339872, 0.0335968420452646, -0.0420271492306356, 0.0274317066599275, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, -0.0586514559176763, 0.0406349206349207, 0.039344592723377, 0.00253968253968254, -0.0109971479845643, -0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, -0.053052238005546, 0.0367556686723369, -0.0105447476034577, -0.0245037791148913, 0.0235787724469093, 0.0175063453837273, 0, -0.0122518895574457},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0, 0.0783926314389509, 0.0096985728993774, -0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, 0.0586514559176763, -0.0609523809523809, 0, 0.033015873015873, 0.0241937255660415, -0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, 0.053052238005546, -0.0551335030085053, 0, -0.0326717054865217, 0.0141472634681456, 0.00875317269186366, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382571, 0, 0, 0.170367083999984, 0, -0.0111989473484216, 0.00969857289937744, 0.0822951199797824, 0.0475131096733199, -0.0167984210226324, 0, 0, 0, 0, 0, 0.0533333333333333, -0.0461880215351701, 0.0435464843161454, 0.0251415744421883, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.057175484601413, -0.0495154221385096, -0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382571, -0.139104141588614, -0.0803118135915779, -0.0567890279999947, 0.0578311154339871, -0.0335968420452646, -0.0420271492306356, -0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, 0.0586514559176763, 0.0406349206349206, 0.0393445927233769, -0.00253968253968253, -0.0109971479845643, 0.0601356211984865, 0.0179582674587059, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, 0.053052238005546, 0.0367556686723369, -0.0105447476034577, 0.0245037791148913, 0.0235787724469093, -0.0175063453837273, 0, -0.0122518895574457},
    {0.0439885919382571, 0, 0.160623627183156, -0.0567890279999946, 0, -0.0783926314389509, 0.00969857289937745, 0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, -0.0586514559176763, -0.0609523809523809, 0, -0.033015873015873, 0.0241937255660415, 0.0145154947720485, -0.0610581093596003, 0.0393650793650793, 0, 0, 0, 0, 0, 0, 0, -0.053052238005546, -0.0551335030085053, 0, 0.0326717054865217, 0.0141472634681456, -0.00875317269186368, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0, 0.0111989473484215, 0.00969857289937745, -0.0822951199797824, 0.0475131096733199, -0.0167984210226323, 0, 0, 0, 0, 0, -0.0533333333333333, -0.0461880215351701, -0.0435464843161453, 0.0251415744421883, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0571754846014129, -0.0495154221385096, 0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754903, 0.0447957893936862, 0.0484928644968872, -0.0548634133198549, 0, -0.0167984210226323, 0.0806324209086351, 0.0227156111999979, -0.0058651455917676, -0.0101587301587302, -0.00327871606028142, 0.0304761904761905, 0.0271262983619253, 0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, 0.0729347689341683, 0.0205470434274512, -0.00530522380055458, -0.00918891716808423, 0.031634242810373, -0.00816792637163039, -0.0141472634681456, -0.00875317269186365, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382571, 0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754904, -0.0447957893936862, 0.0484928644968873, 0.0548634133198549, 0, -0.0167984210226323, -0.0806324209086351, 0.0227156111999979, 0.0058651455917676, -0.0101587301587302, -0.00327871606028142, -0.0304761904761905, 0.0271262983619253, -0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, -0.0729347689341683, 0.0205470434274512, 0.00530522380055459, -0.00918891716808424, 0.031634242810373, 0.00816792637163042, -0.0141472634681456, 0.00875317269186367, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0.0144577788584968, 0, -0.00323285763312585, 0, -0.0950262193466398, -0.0167984210226323, 0, 0, 0, 0, -0.0688530372659096, 0, 0.01539600717839, 0, -0.0502831488843767, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0738132332242036, 0, 0.0165051407128365, 0, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754903, -0.0447957893936862, -0.00969857289937743, 0.0548634133198549, 0.03167540644888, 0.0391963157194754, 0.0806324209086351, 0, 0.0527863103259086, 0.0609523809523809, 0.0229510124219699, 0.0101587301587302, 0.0168622935763319, -0.0124418526617558, -0.00718330698348239, -0.013968253968254, 0, 0.0724831561155734, 0.0357346778758831, -0.0118628410538899, -0.0228300482527235, -0.00810386321490759, 0.0114150241263618, -0.00530522380055459, -0.0112308987609918, -0.00395428035129662, -0.00102099079645379, -0.0035368158670364, 0.00125045324169481, 0.000721949515701537, 0.00204198159290762},
    {0.0439885919382571, 0.139104141588614, -0.080311813591578, -0.0567890279999947, -0.0433733365754904, 0.0447957893936862, -0.00969857289937742, -0.0548634133198549, 0.0316754064488799, 0.0391963157194754, -0.0806324209086351, 0, -0.0527863103259086, 0.060952380952381, 0.0229510124219699, -0.0101587301587302, 0.0168622935763319, 0.0124418526617558, -0.00718330698348236, -0.013968253968254, 0, -0.0724831561155734, 0.0357346778758831, 0.0118628410538899, -0.0228300482527236, 0.00810386321490761, 0.0114150241263618, 0.00530522380055459, -0.0112308987609918, -0.00395428035129662, 0.00102099079645379, -0.0035368158670364, -0.0012504532416948, 0.000721949515701528, 0.0020419815929076},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0.0144577788584968, 0, -0.0614242950293905, 0, -0.0633508128977598, 0.0391963157194754, 0, -0.0681468335999936, 0, -0.0914285714285715, 0.00983614818084423, 0, 0.0285925847598672, 0, 0.0143666139669647, -0.0139682539682539, 0, 0, -0.0714693557517662, 0, 0.0456600965054471, 0, 0.0182640386021788, 0, 0.0040839631858152, -0.00263618690086443, 0, -0.00471575448938186, 0, -0.00144389903140306, 0.00204198159290759},
    {0.351908735506058, 0, 0, 0, -0.115662230867974, 0, -0.129314305325032, 0, 0, -0.134387368181059, 0, -0.0908624447999914, 0, 0.0406349206349206, -0.0786891854467539, 0, -0.0879771838765144, 0, 0, 0.0711111111111111, 0, 0, 0, 0, 0, 0, -0.0821881737098047, 0, 0.0367556686723369, 0.0210894952069153, 0, 0.0235787724469093, 0, 0, -0.0122518895574456}};
    
    // Extract relevant coefficients
    const double coeff0_0 = coefficients0[dof][0];
    const double coeff0_1 = coefficients0[dof][1];
    const double coeff0_2 = coefficients0[dof][2];
    const double coeff0_3 = coefficients0[dof][3];
    const double coeff0_4 = coefficients0[dof][4];
    const double coeff0_5 = coefficients0[dof][5];
    const double coeff0_6 = coefficients0[dof][6];
    const double coeff0_7 = coefficients0[dof][7];
    const double coeff0_8 = coefficients0[dof][8];
    const double coeff0_9 = coefficients0[dof][9];
    const double coeff0_10 = coefficients0[dof][10];
    const double coeff0_11 = coefficients0[dof][11];
    const double coeff0_12 = coefficients0[dof][12];
    const double coeff0_13 = coefficients0[dof][13];
    const double coeff0_14 = coefficients0[dof][14];
    const double coeff0_15 = coefficients0[dof][15];
    const double coeff0_16 = coefficients0[dof][16];
    const double coeff0_17 = coefficients0[dof][17];
    const double coeff0_18 = coefficients0[dof][18];
    const double coeff0_19 = coefficients0[dof][19];
    const double coeff0_20 = coefficients0[dof][20];
    const double coeff0_21 = coefficients0[dof][21];
    const double coeff0_22 = coefficients0[dof][22];
    const double coeff0_23 = coefficients0[dof][23];
    const double coeff0_24 = coefficients0[dof][24];
    const double coeff0_25 = coefficients0[dof][25];
    const double coeff0_26 = coefficients0[dof][26];
    const double coeff0_27 = coefficients0[dof][27];
    const double coeff0_28 = coefficients0[dof][28];
    const double coeff0_29 = coefficients0[dof][29];
    const double coeff0_30 = coefficients0[dof][30];
    const double coeff0_31 = coefficients0[dof][31];
    const double coeff0_32 = coefficients0[dof][32];
    const double coeff0_33 = coefficients0[dof][33];
    const double coeff0_34 = coefficients0[dof][34];
    
    // Compute value(s)
    *values = coeff0_0*basisvalue0 + coeff0_1*basisvalue1 + coeff0_2*basisvalue2 + coeff0_3*basisvalue3 + coeff0_4*basisvalue4 + coeff0_5*basisvalue5 + coeff0_6*basisvalue6 + coeff0_7*basisvalue7 + coeff0_8*basisvalue8 + coeff0_9*basisvalue9 + coeff0_10*basisvalue10 + coeff0_11*basisvalue11 + coeff0_12*basisvalue12 + coeff0_13*basisvalue13 + coeff0_14*basisvalue14 + coeff0_15*basisvalue15 + coeff0_16*basisvalue16 + coeff0_17*basisvalue17 + coeff0_18*basisvalue18 + coeff0_19*basisvalue19 + coeff0_20*basisvalue20 + coeff0_21*basisvalue21 + coeff0_22*basisvalue22 + coeff0_23*basisvalue23 + coeff0_24*basisvalue24 + coeff0_25*basisvalue25 + coeff0_26*basisvalue26 + coeff0_27*basisvalue27 + coeff0_28*basisvalue28 + coeff0_29*basisvalue29 + coeff0_30*basisvalue30 + coeff0_31*basisvalue31 + coeff0_32*basisvalue32 + coeff0_33*basisvalue33 + coeff0_34*basisvalue34;
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis() is not yet implemented.");
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_02 = element_coordinates[3][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
    const double J_12 = element_coordinates[3][1] - element_coordinates[0][1];
    const double J_20 = element_coordinates[1][2] - element_coordinates[0][2];
    const double J_21 = element_coordinates[2][2] - element_coordinates[0][2];
    const double J_22 = element_coordinates[3][2] - element_coordinates[0][2];
      
    // Compute sub determinants
    const double d00 = J_11*J_22 - J_12*J_21;
    const double d01 = J_12*J_20 - J_10*J_22;
    const double d02 = J_10*J_21 - J_11*J_20;
    
    const double d10 = J_02*J_21 - J_01*J_22;
    const double d11 = J_00*J_22 - J_02*J_20;
    const double d12 = J_01*J_20 - J_00*J_21;
    
    const double d20 = J_01*J_12 - J_02*J_11;
    const double d21 = J_02*J_10 - J_00*J_12;
    const double d22 = J_00*J_11 - J_01*J_10;
      
    // Compute determinant of Jacobian
    double detJ = J_00*d00 + J_10*d10 + J_20*d20;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = d00*(element_coordinates[0][0] - element_coordinates[2][0] - element_coordinates[3][0]) \
                    + d10*(element_coordinates[0][1] - element_coordinates[2][1] - element_coordinates[3][1]) \
                    + d20*(element_coordinates[0][2] - element_coordinates[2][2] - element_coordinates[3][2]);
    
    const double C1 = d01*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[3][0]) \
                    + d11*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[3][1]) \
                    + d21*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[3][2]);
    
    const double C2 = d02*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[2][0]) \
                    + d12*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[2][1]) \
                    + d22*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[2][2]);
    
    // Get coordinates and map to the UFC reference element
    double x = (C0 + d00*coordinates[0] + d10*coordinates[1] + d20*coordinates[2]) / detJ;
    double y = (C1 + d01*coordinates[0] + d11*coordinates[1] + d21*coordinates[2]) / detJ;
    double z = (C2 + d02*coordinates[0] + d12*coordinates[1] + d22*coordinates[2]) / detJ;
    
    // Map coordinates to the reference cube
    if (std::abs(y + z - 1.0) < 1e-14)
      x = 1.0;
    else
      x = -2.0 * x/(y + z - 1.0) - 1.0;
    if (std::abs(z - 1.0) < 1e-14)
      y = -1.0;
    else
      y = 2.0 * y/(1.0 - z) - 1.0;
    z = 2.0 * z - 1.0;
    
    // Compute number of derivatives
    unsigned int num_derivatives = 1;
    
    for (unsigned int j = 0; j < n; j++)
      num_derivatives *= 3;
    
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      combinations[j] = new unsigned int [n];
      for (unsigned int k = 0; k < n; k++)
        combinations[j][k] = 0;
    }
        
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] ={{d00 / detJ, d10 / detJ, d20 / detJ}, {d01 / detJ, d11 / detJ, d21 / detJ}, {d02 / detJ, d12 / detJ, d22 / detJ}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values
    for (unsigned int j = 0; j < 1*num_derivatives; j++)
      values[j] = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    const double scalings_y_4 = scalings_y_3*(0.5 - 0.5*y);
    const double scalings_z_0 = 1;
    const double scalings_z_1 = scalings_z_0*(0.5 - 0.5*z);
    const double scalings_z_2 = scalings_z_1*(0.5 - 0.5*z);
    const double scalings_z_3 = scalings_z_2*(0.5 - 0.5*z);
    const double scalings_z_4 = scalings_z_3*(0.5 - 0.5*z);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    const double psitilde_a_4 = 1.75*x*psitilde_a_3 - 0.75*psitilde_a_2;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_0_4 = 0.0285714285714286*psitilde_bs_0_3 + 1.8*y*psitilde_bs_0_3 - 0.771428571428571*psitilde_bs_0_2;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_1_3 = 0.285714285714286*psitilde_bs_1_2 + 2*y*psitilde_bs_1_2 - 0.714285714285714*psitilde_bs_1_1;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_2_2 = 1.02040816326531*psitilde_bs_2_1 + 2.57142857142857*y*psitilde_bs_2_1 - 0.551020408163265*psitilde_bs_2_0;
    const double psitilde_bs_3_0 = 1;
    const double psitilde_bs_3_1 = 4.5*y + 3.5;
    const double psitilde_bs_4_0 = 1;
    
    // Compute psitilde_cs
    const double psitilde_cs_00_0 = 1;
    const double psitilde_cs_00_1 = 2*z + 1;
    const double psitilde_cs_00_2 = 0.3125*psitilde_cs_00_1 + 1.875*z*psitilde_cs_00_1 - 0.5625*psitilde_cs_00_0;
    const double psitilde_cs_00_3 = 0.155555555555556*psitilde_cs_00_2 + 1.86666666666667*z*psitilde_cs_00_2 - 0.711111111111111*psitilde_cs_00_1;
    const double psitilde_cs_00_4 = 0.09375*psitilde_cs_00_3 + 1.875*z*psitilde_cs_00_3 - 0.78125*psitilde_cs_00_2;
    const double psitilde_cs_01_0 = 1;
    const double psitilde_cs_01_1 = 3*z + 2;
    const double psitilde_cs_01_2 = 0.777777777777778*psitilde_cs_01_1 + 2.33333333333333*z*psitilde_cs_01_1 - 0.555555555555556*psitilde_cs_01_0;
    const double psitilde_cs_01_3 = 0.428571428571429*psitilde_cs_01_2 + 2.14285714285714*z*psitilde_cs_01_2 - 0.714285714285714*psitilde_cs_01_1;
    const double psitilde_cs_02_0 = 1;
    const double psitilde_cs_02_1 = 4*z + 3;
    const double psitilde_cs_02_2 = 1.265625*psitilde_cs_02_1 + 2.8125*z*psitilde_cs_02_1 - 0.546875*psitilde_cs_02_0;
    const double psitilde_cs_03_0 = 1;
    const double psitilde_cs_03_1 = 5*z + 4;
    const double psitilde_cs_04_0 = 1;
    const double psitilde_cs_10_0 = 1;
    const double psitilde_cs_10_1 = 3*z + 2;
    const double psitilde_cs_10_2 = 0.777777777777778*psitilde_cs_10_1 + 2.33333333333333*z*psitilde_cs_10_1 - 0.555555555555556*psitilde_cs_10_0;
    const double psitilde_cs_10_3 = 0.428571428571429*psitilde_cs_10_2 + 2.14285714285714*z*psitilde_cs_10_2 - 0.714285714285714*psitilde_cs_10_1;
    const double psitilde_cs_11_0 = 1;
    const double psitilde_cs_11_1 = 4*z + 3;
    const double psitilde_cs_11_2 = 1.265625*psitilde_cs_11_1 + 2.8125*z*psitilde_cs_11_1 - 0.546875*psitilde_cs_11_0;
    const double psitilde_cs_12_0 = 1;
    const double psitilde_cs_12_1 = 5*z + 4;
    const double psitilde_cs_13_0 = 1;
    const double psitilde_cs_20_0 = 1;
    const double psitilde_cs_20_1 = 4*z + 3;
    const double psitilde_cs_20_2 = 1.265625*psitilde_cs_20_1 + 2.8125*z*psitilde_cs_20_1 - 0.546875*psitilde_cs_20_0;
    const double psitilde_cs_21_0 = 1;
    const double psitilde_cs_21_1 = 5*z + 4;
    const double psitilde_cs_22_0 = 1;
    const double psitilde_cs_30_0 = 1;
    const double psitilde_cs_30_1 = 5*z + 4;
    const double psitilde_cs_31_0 = 1;
    const double psitilde_cs_40_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.866025403784439*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_0;
    const double basisvalue1 = 2.73861278752583*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_0;
    const double basisvalue2 = 1.58113883008419*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_0;
    const double basisvalue3 = 1.11803398874989*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_1;
    const double basisvalue4 = 5.1234753829798*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_0;
    const double basisvalue5 = 3.96862696659689*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_0;
    const double basisvalue6 = 2.29128784747792*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_0;
    const double basisvalue7 = 3.24037034920393*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_1;
    const double basisvalue8 = 1.87082869338697*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_1;
    const double basisvalue9 = 1.3228756555323*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_2;
    const double basisvalue10 = 7.93725393319377*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_0;
    const double basisvalue11 = 6.70820393249937*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_0;
    const double basisvalue12 = 5.19615242270663*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_0;
    const double basisvalue13 = 3*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_0;
    const double basisvalue14 = 5.80947501931113*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_1;
    const double basisvalue15 = 4.5*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_1;
    const double basisvalue16 = 2.59807621135332*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_1;
    const double basisvalue17 = 3.67423461417477*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_2;
    const double basisvalue18 = 2.12132034355964*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_2;
    const double basisvalue19 = 1.5*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_3;
    const double basisvalue20 = 11.1242977306435*psitilde_a_4*scalings_y_4*psitilde_bs_4_0*scalings_z_4*psitilde_cs_40_0;
    const double basisvalue21 = 9.81070843517429*psitilde_a_3*scalings_y_3*psitilde_bs_3_1*scalings_z_4*psitilde_cs_31_0;
    const double basisvalue22 = 8.2915619758885*psitilde_a_2*scalings_y_2*psitilde_bs_2_2*scalings_z_4*psitilde_cs_22_0;
    const double basisvalue23 = 6.42261628933256*psitilde_a_1*scalings_y_1*psitilde_bs_1_3*scalings_z_4*psitilde_cs_13_0;
    const double basisvalue24 = 3.70809924354783*psitilde_a_0*scalings_y_0*psitilde_bs_0_4*scalings_z_4*psitilde_cs_04_0;
    const double basisvalue25 = 8.77496438739212*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_1;
    const double basisvalue26 = 7.41619848709566*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_1;
    const double basisvalue27 = 5.74456264653803*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_1;
    const double basisvalue28 = 3.3166247903554*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_1;
    const double basisvalue29 = 6.42261628933256*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_2;
    const double basisvalue30 = 4.9749371855331*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_2;
    const double basisvalue31 = 2.87228132326901*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_2;
    const double basisvalue32 = 4.06201920231798*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_3;
    const double basisvalue33 = 2.34520787991171*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_3;
    const double basisvalue34 = 1.6583123951777*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_4;
    
    // Table(s) of coefficients
    const static double coefficients0[35][35] = \
    {{-0.0137464349807051, -0.0144900147488139, -0.00836581391578937, -0.00591552374999941, 0, 0, 0, 0, 0, 0, -0.00671936840905293, -0.00567890279999946, -0.00439885919382571, -0.00253968253968254, -0.00491807409042211, -0.00380952380952381, -0.00219942959691287, -0.00311046316543895, -0.0017958267458706, -0.00126984126984128, 0.0136980289516341, 0.0120805260192622, 0.010209907964538, 0.00790856070259325, 0.00456600965054471, 0.0108051509532101, 0.00913201930108942, 0.00707363173407281, 0.00408396318581522, 0.00790856070259324, 0.00612594477872282, 0.0035368158670364, 0.00500181296677924, 0.00288779806280616, 0.00204198159290761},
    {-0.0137464349807054, 0.0144900147488139, -0.00836581391578934, -0.00591552374999945, 0, 0, 0, 0, 0, 0, 0.00671936840905293, -0.00567890279999946, 0.00439885919382572, -0.00253968253968254, -0.00491807409042213, 0.00380952380952382, -0.00219942959691286, 0.00311046316543897, -0.0017958267458706, -0.00126984126984127, 0.0136980289516341, -0.0120805260192622, 0.010209907964538, -0.00790856070259325, 0.00456600965054471, -0.0108051509532101, 0.00913201930108941, -0.0070736317340728, 0.00408396318581521, 0.00790856070259325, -0.00612594477872282, 0.0035368158670364, -0.00500181296677924, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807053, 0, 0.0167316278315787, -0.00591552374999946, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0101587301587302, 0, 0, -0.00659828879073857, 0, 0.00359165349174119, -0.00126984126984127, 0, 0, 0, 0, 0.0228300482527235, 0, 0, 0, -0.0163358527432608, 0, 0, 0.0106104476011092, 0, -0.0057755961256123, 0.00204198159290761},
    {-0.0137464349807054, 0, 0, 0.0177465712499983, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0126984126984127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0306297238936141},
    {0.0439885919382572, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0, 0.0406349206349206, 0, 0, 0.00439885919382572, 0, -0.0143666139669648, 0.00761904761904763, 0, 0, 0, 0, 0, 0, 0, 0, 0.0367556686723369, 0, 0, -0.0424417904044368, 0, 0.0303218796594646, -0.0122518895574456},
    {-0.0329914439536931, 0, -0.0200779533978945, -0.0141972569999986, 0, 0, -0.00969857289937744, 0, 0.0712696645099798, -0.050395263067897, 0, 0, 0, 0, 0, 0, 0.0461880215351701, 0, 0.0107749604752236, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0495154221385096, 0, -0.0606437593189292, 0.0306297238936141},
    {0.0439885919382573, 0, 0.0267706045305259, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0, 0.0359165349174119, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0505364660991076, -0.0408396318581522},
    {0.0439885919382573, 0.0231840235981023, -0.0133853022652629, 0.0189296759999982, 0.0433733365754904, -0.0335968420452647, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, -0.0227156111999979, 0.0175954367753029, -0.0101587301587302, 0.00327871606028141, -0.00253968253968255, 0.0014662863979419, -0.0124418526617558, 0.00718330698348238, 0.00761904761904763, 0, 0, 0, 0, 0, 0.0243115896447228, -0.0205470434274512, 0.0159156714016638, -0.00918891716808423, -0.031634242810373, 0.0245037791148913, -0.0141472634681456, 0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, -0.0173880176985766, 0.0100389766989472, -0.0141972569999986, -0.00722888942924838, 0.00559947367421081, -0.00323285763312582, 0.0617213399848368, -0.03563483225499, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, -0.0266666666666667, 0.01539600717839, 0.00933138949631686, -0.00538748023761177, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, -0.0285877423007065, 0.0165051407128365, -0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, 0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0.0311046316543895, -0.017958267458706, 0.0253968253968255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754903, -0.0335968420452647, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, 0, -0.0117302911835353, 0.0101587301587302, -0.0229510124219699, 0.00761904761904761, -0.00146628639794191, 0.0165891368823411, -0.0071833069834824, -0.00761904761904763, 0, 0.0241610520385245, -0.0357346778758831, 0.0355885231616696, -0.0228300482527235, -0.00270128773830253, -0.0114150241263618, 0.0159156714016638, -0.0112308987609918, 0.00395428035129663, 0.00306297238936141, -0.0035368158670364, -0.00375135972508443, 0.00072194951570154, 0.00204198159290761},
    {-0.0329914439536929, -0.0173880176985768, -0.0100389766989472, 0.0141972569999986, -0.00722888942924839, 0.0615942104163185, -0.0614242950293904, -0.00685792666498187, -0.00395942580611001, 0.00559947367421077, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042213, -0.0266666666666667, 0.0175954367753029, 0.00933138949631688, 0.00538748023761179, -0.00761904761904761, 0, 0, 0.0357346778758831, -0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108943, 0, 0.00408396318581521, 0.00131809345043221, 0.00714693557517662, -0.00471575448938186, -0.00250090648338962, -0.00144389903140307, 0.00204198159290761},
    {0.0439885919382572, 0.0231840235981022, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0.0293257279588382, 0.0101587301587302, 0, -0.0101587301587302, -0.0219942959691286, 0.00207364211029264, 0.017958267458706, -0.00761904761904762, 0, 0, 0, 0.0395428035129662, -0.0456600965054471, 0, 0, -0.017684079335182, 0.0142938711503532, 0, 0.00612594477872282, 0, -0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.043988591938257, -0.0231840235981023, -0.0133853022652629, 0.0189296759999983, 0.0433733365754903, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484216, -0.0268774736362117, -0.0227156111999979, -0.0175954367753029, -0.0101587301587302, 0.00327871606028139, 0.00253968253968253, 0.0014662863979419, 0.0124418526617558, 0.00718330698348236, 0.00761904761904761, 0, 0, 0, 0, 0, -0.0243115896447228, -0.0205470434274512, -0.0159156714016638, -0.00918891716808424, -0.031634242810373, -0.0245037791148913, -0.0141472634681456, -0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, 0.0173880176985768, 0.0100389766989471, -0.0141972569999987, -0.00722888942924838, -0.00559947367421082, -0.00323285763312581, -0.0617213399848367, -0.03563483225499, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, 0.0266666666666667, 0.01539600717839, -0.00933138949631689, -0.00538748023761178, -0.019047619047619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, 0.0285877423007065, 0.0165051407128365, 0.0525190361511819, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382572, -0.0231840235981023, -0.0133853022652629, 0.0189296759999981, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, -0.0311046316543896, -0.017958267458706, 0.0253968253968255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484216, -0.0268774736362117, 0, 0.0117302911835352, 0.0101587301587302, -0.0229510124219699, -0.00761904761904762, -0.00146628639794191, -0.0165891368823411, -0.00718330698348239, -0.00761904761904763, 0, -0.0241610520385245, -0.0357346778758831, -0.0355885231616696, -0.0228300482527235, 0.00270128773830254, -0.0114150241263618, -0.0159156714016638, -0.0112308987609918, 0.00395428035129662, -0.00306297238936141, -0.0035368158670364, 0.00375135972508443, 0.000721949515701533, 0.00204198159290761},
    {-0.0329914439536929, 0.0173880176985766, -0.0100389766989472, 0.0141972569999987, -0.00722888942924841, -0.0615942104163186, -0.0614242950293904, 0.00685792666498186, -0.00395942580610998, 0.00559947367421075, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042213, 0.0266666666666667, 0.0175954367753029, -0.00933138949631688, 0.00538748023761179, -0.00761904761904763, 0, 0, 0.0357346778758831, 0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108943, 0, 0.0040839631858152, 0.00131809345043222, -0.00714693557517663, -0.00471575448938187, 0.00250090648338962, -0.00144389903140308, 0.00204198159290761},
    {0.0439885919382573, -0.0231840235981022, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, -0.0293257279588382, 0.0101587301587302, 0, 0.0101587301587301, -0.0219942959691286, -0.00207364211029265, 0.017958267458706, -0.00761904761904761, 0, 0, 0, -0.0395428035129663, -0.0456600965054471, 0, 0, 0.017684079335182, 0.0142938711503532, 0, -0.00612594477872281, 0, 0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.0439885919382571, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484215, 0.0134387368181058, -0.0113578055999989, -0.0205280095711867, -0.0152380952380952, -0.00983614818084424, -0.0177777777777778, -0.0131965775814772, -0.0145154947720485, -0.0107749604752236, -0.00761904761904761, -0.0547921158065365, -0.0241610520385245, -0.00510495398226901, 0.00395428035129663, 0.00456600965054471, -0.0216103019064202, -0.00456600965054471, 0.00353681586703639, 0.00408396318581521, -0.00395428035129661, 0.0030629723893614, 0.0035368158670364, 0.00250090648338961, 0.00288779806280615, 0.00204198159290761},
    {-0.0329914439536931, 0, 0.0200779533978945, 0.0141972569999987, -0.0867466731509807, 0, 0.00969857289937743, 0, 0.00791885161221998, 0.00559947367421076, 0, 0.0340734167999968, 0, -0.0152380952380953, 0.0295084445425327, 0, -0.0131965775814772, 0, -0.0107749604752236, -0.00761904761904762, 0.0821881737098047, 0, -0.010209907964538, 0, 0.00456600965054471, 0, -0.00913201930108944, 0, 0.00408396318581521, -0.00790856070259326, 0, 0.0035368158670364, 0, 0.00288779806280615, 0.00204198159290761},
    {0.0439885919382573, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754903, -0.0335968420452646, 0.0193971457987549, -0.0274317066599274, 0.01583770322444, 0.0111989473484215, -0.0134387368181058, -0.0113578055999989, 0.0205280095711867, -0.0152380952380952, -0.00983614818084423, 0.0177777777777778, -0.0131965775814772, 0.0145154947720485, -0.0107749604752236, -0.00761904761904761, -0.0547921158065365, 0.0241610520385245, -0.005104953982269, -0.00395428035129662, 0.00456600965054471, 0.0216103019064202, -0.0045660096505447, -0.0035368158670364, 0.00408396318581521, -0.00395428035129662, -0.00306297238936141, 0.00353681586703641, -0.00250090648338962, 0.00288779806280615, 0.00204198159290761},
    {0.0439885919382573, 0.139104141588614, -0.080311813591578, -0.0567890279999947, 0.0578311154339872, 0.0335968420452646, -0.0420271492306356, 0.0274317066599275, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, -0.0586514559176763, 0.0406349206349207, 0.039344592723377, 0.00253968253968254, -0.0109971479845643, -0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, -0.053052238005546, 0.0367556686723369, -0.0105447476034577, -0.0245037791148913, 0.0235787724469093, 0.0175063453837273, 0, -0.0122518895574457},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0, 0.0783926314389509, 0.0096985728993774, -0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, 0.0586514559176763, -0.0609523809523809, 0, 0.033015873015873, 0.0241937255660415, -0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, 0.053052238005546, -0.0551335030085053, 0, -0.0326717054865217, 0.0141472634681456, 0.00875317269186366, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382571, 0, 0, 0.170367083999984, 0, -0.0111989473484216, 0.00969857289937744, 0.0822951199797824, 0.0475131096733199, -0.0167984210226324, 0, 0, 0, 0, 0, 0.0533333333333333, -0.0461880215351701, 0.0435464843161454, 0.0251415744421883, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.057175484601413, -0.0495154221385096, -0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382571, -0.139104141588614, -0.0803118135915779, -0.0567890279999947, 0.0578311154339871, -0.0335968420452646, -0.0420271492306356, -0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, 0.0586514559176763, 0.0406349206349206, 0.0393445927233769, -0.00253968253968253, -0.0109971479845643, 0.0601356211984865, 0.0179582674587059, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, 0.053052238005546, 0.0367556686723369, -0.0105447476034577, 0.0245037791148913, 0.0235787724469093, -0.0175063453837273, 0, -0.0122518895574457},
    {0.0439885919382571, 0, 0.160623627183156, -0.0567890279999946, 0, -0.0783926314389509, 0.00969857289937745, 0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, -0.0586514559176763, -0.0609523809523809, 0, -0.033015873015873, 0.0241937255660415, 0.0145154947720485, -0.0610581093596003, 0.0393650793650793, 0, 0, 0, 0, 0, 0, 0, -0.053052238005546, -0.0551335030085053, 0, 0.0326717054865217, 0.0141472634681456, -0.00875317269186368, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0, 0.0111989473484215, 0.00969857289937745, -0.0822951199797824, 0.0475131096733199, -0.0167984210226323, 0, 0, 0, 0, 0, -0.0533333333333333, -0.0461880215351701, -0.0435464843161453, 0.0251415744421883, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0571754846014129, -0.0495154221385096, 0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754903, 0.0447957893936862, 0.0484928644968872, -0.0548634133198549, 0, -0.0167984210226323, 0.0806324209086351, 0.0227156111999979, -0.0058651455917676, -0.0101587301587302, -0.00327871606028142, 0.0304761904761905, 0.0271262983619253, 0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, 0.0729347689341683, 0.0205470434274512, -0.00530522380055458, -0.00918891716808423, 0.031634242810373, -0.00816792637163039, -0.0141472634681456, -0.00875317269186365, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382571, 0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754904, -0.0447957893936862, 0.0484928644968873, 0.0548634133198549, 0, -0.0167984210226323, -0.0806324209086351, 0.0227156111999979, 0.0058651455917676, -0.0101587301587302, -0.00327871606028142, -0.0304761904761905, 0.0271262983619253, -0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, -0.0729347689341683, 0.0205470434274512, 0.00530522380055459, -0.00918891716808424, 0.031634242810373, 0.00816792637163042, -0.0141472634681456, 0.00875317269186367, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0.0144577788584968, 0, -0.00323285763312585, 0, -0.0950262193466398, -0.0167984210226323, 0, 0, 0, 0, -0.0688530372659096, 0, 0.01539600717839, 0, -0.0502831488843767, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0738132332242036, 0, 0.0165051407128365, 0, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754903, -0.0447957893936862, -0.00969857289937743, 0.0548634133198549, 0.03167540644888, 0.0391963157194754, 0.0806324209086351, 0, 0.0527863103259086, 0.0609523809523809, 0.0229510124219699, 0.0101587301587302, 0.0168622935763319, -0.0124418526617558, -0.00718330698348239, -0.013968253968254, 0, 0.0724831561155734, 0.0357346778758831, -0.0118628410538899, -0.0228300482527235, -0.00810386321490759, 0.0114150241263618, -0.00530522380055459, -0.0112308987609918, -0.00395428035129662, -0.00102099079645379, -0.0035368158670364, 0.00125045324169481, 0.000721949515701537, 0.00204198159290762},
    {0.0439885919382571, 0.139104141588614, -0.080311813591578, -0.0567890279999947, -0.0433733365754904, 0.0447957893936862, -0.00969857289937742, -0.0548634133198549, 0.0316754064488799, 0.0391963157194754, -0.0806324209086351, 0, -0.0527863103259086, 0.060952380952381, 0.0229510124219699, -0.0101587301587302, 0.0168622935763319, 0.0124418526617558, -0.00718330698348236, -0.013968253968254, 0, -0.0724831561155734, 0.0357346778758831, 0.0118628410538899, -0.0228300482527236, 0.00810386321490761, 0.0114150241263618, 0.00530522380055459, -0.0112308987609918, -0.00395428035129662, 0.00102099079645379, -0.0035368158670364, -0.0012504532416948, 0.000721949515701528, 0.0020419815929076},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0.0144577788584968, 0, -0.0614242950293905, 0, -0.0633508128977598, 0.0391963157194754, 0, -0.0681468335999936, 0, -0.0914285714285715, 0.00983614818084423, 0, 0.0285925847598672, 0, 0.0143666139669647, -0.0139682539682539, 0, 0, -0.0714693557517662, 0, 0.0456600965054471, 0, 0.0182640386021788, 0, 0.0040839631858152, -0.00263618690086443, 0, -0.00471575448938186, 0, -0.00144389903140306, 0.00204198159290759},
    {0.351908735506058, 0, 0, 0, -0.115662230867974, 0, -0.129314305325032, 0, 0, -0.134387368181059, 0, -0.0908624447999914, 0, 0.0406349206349206, -0.0786891854467539, 0, -0.0879771838765144, 0, 0, 0.0711111111111111, 0, 0, 0, 0, 0, 0, -0.0821881737098047, 0, 0.0367556686723369, 0.0210894952069153, 0, 0.0235787724469093, 0, 0, -0.0122518895574456}};
    
    // Interesting (new) part
    // Tables of derivatives of the polynomial base (transpose)
    const static double dmats0[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {6.32455532033677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 11.2249721603218, 0, 0, 0, 1.70793006049707e-14, 0, 0, 1.16063842564573e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.58257569495585, 0, 8.36660026534076, -1.18321595661992, 0, 0, 1.04642314135461e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.74165738677394, 0, 0, 8.69482604771366, 0, 0, 0, -1.66625972279159e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.49909083394701, 0, -3.34664010613631, -2.36643191323985, 15.4919333848297, 0, 0.692820323027549, 0, 0.56568542494924, 0.400000000000009, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 4.89897948556635, 0, 0, 0, 14.1985914794391, 0, -0.828078671210828, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.60000000000001, 0, 8.76356092008266, -1.54919333848296, 0, 0, 9.52470471983254, 0, -1.48131215963609, 0.261861468283193, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 4.24264068711929, 0, 0, 0, 0, 0, 14.3427433120127, 2.84156378982381e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.11769145362398, 0, 3.16227766016838, 4.91934955049954, 0, 0, 0, -1.2538531175753e-14, 10.690449676497, -2.41897262725905, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.54558441227157, 0, 0, 7.66811580507232, 0, 0, 0, 0, 0, 10.3691851174526, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 11.6057691494799, 0, 0, 0, -4.20458932936041, 0, -3.43303281162798, 0, 0, 19.6214168703486, 0, 0.611677741841197, 0, 0, 0.529728463363978, 0, 0.432521479156785, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.53137212479103, 0, 3.54562104171167, -2.50713268211203, 4.78713553878169, 0, -5.56626745075493, 0, -1.04880884817015, 0.741619848709563, 0, 18.8034951158403, 0, 1.68183573174416, -0.603122387046455, 0, 0.701283781217662, 0, 0.132137494528683, -0.0934353184302337, 0, 0, 0, 0, -2.04851899834062e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.12802291379194e-14, 2.59512887494071, 0, 0, 0, 10.0285307284481, 1.48509074345102e-14, -0.767649473578742, 0, 0, 0, 0, 16.4130361329658, 0, 0, -1.26347611061158, 0, 0.0967147429123335, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.96647939483827, 0, 8.12403840463597, -1.64130361329658, 0, 0, 11.7728501222091, 0, -2.40312296813959, 0.485504156227609, 0, 0, 0, 10.2761860629321, 0, 0, -1.48323969741914, 0, 0.30276503540975, -0.0611677741841184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.05298244095217, 0, -1.58564993434419, 4.4848952846511, 4.28174419288837, 0, 0.191485421551264, 0, -3.75233260785875, -4.31161222746203, 0, 0, 0, 0, 18.8807171866294, 0, 0.844371341865038, 0, 1.18187368057056, 1.04463861754668, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 2.32115382989598, 0, 0, 0, 3.92428337406973, 0, 5.49285249860476, 1.21484853427001e-14, 0, 0, 0, 0, 0, 0, 17.3044631365565, 0, -1.73008591662714, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.65329983228433, 0, 4.15220619990513, 2.93605316083776, 0, 0, 2.63248931621764, 0, 9.82591326180785, -2.8226127713774, 0, 0, 0, 0, 0, 0, 11.6081867662439, 0, -3.09487177319466, 0.683876505540249, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 2.01017818278148, 0, 0, 0, 0, 0, 8.91928088068602, 1.76356325376492e-14, 0, 0, 0, 0, 0, 0, 0, 0, 16.8558564884489, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.29782505861521, 0, 1.49829835452879, 5.50917601898535, 0, 0, 0, 0, 6.64803945320938, 4.13676892548485, 0, 0, 0, 0, 0, 0, 0, 0, 12.5636136423842, -3.55352656109507, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87616630392938, 0, 0, 6.2283092998577, 0, 0, 0, 0, 0, 11.0541524195338, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11.6057691494799, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    const static double dmats1[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.16227766016838, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.47722557505166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.95803989154981, 5.61248608016091, -1.08012344973464, -0.763762615825977, 0, 1.12766252988532e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.29128784747793, 7.24568837309472, 4.18330013267038, -0.591607978309962, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-2.64575131106459, 0, 9.66091783079296, 0.683130051063976, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87082869338697, 0, 0, 4.34741302385683, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.24037034920392, 0, 0, 7.52994023880667, 0, 0, 0, -1.40420976242894e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.74954541697351, 5.79655069847578, -1.67332005306815, -1.18321595661993, 7.74596669241484, -1.2, 0.346410161513776, -0.979795897113278, 0.282842712474625, 0.200000000000005, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.32379000772444, 2.44948974278317, 2.82842712474619, -0.999999999999997, 9.16515138991168, 7.09929573971955, -2.04939015319192, -0.414039335605417, -0.478091443733761, 0.169030850945703, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.80000000000001, -5.69209978830309, 4.38178046004133, -0.77459666924148, 0, 10.998181667894, 4.76235235991628, 0.962140470884725, -0.740656079818049, 0.130930734141596, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.19615242270664, 0, -3.16227766016837, -2.23606797749979, 0, 0, 13.7477270848675, 0, 0.534522483824846, 0.377964473009225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.01246117974981, 2.12132034355964, -0.408248290463859, 3.17542648054293, 0, 0, 0, 7.17137165600634, -1.3801311186847, -1.56144011671765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.55884572681199, 2.73861278752583, 1.5811388300842, 2.45967477524977, 0, 0, 0, 9.2582009977255, 5.3452248382485, -1.20948631362952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-1.79999999999999, 0, 3.65148371670111, -2.84018778721876, 0, 0, 0, 0, 12.3442679969673, 1.39659449751036, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.27279220613578, 0, 0, 3.83405790253616, 0, 0, 0, 0, 0, 5.18459255872629, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.20454076850485, 0, 0, 6.64078308635359, 0, 0, 0, 0, 0, 8.97997772825746, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.56904651573303, 5.80288457473998, -2.01017818278148, -1.42141062443803, 8.14215222512715, -2.10229466468021, 0.728256234341421, -1.71651640581399, 0.594618725379067, 0.420458932936047, 9.81070843517429, -1.18450885369836, 0.3058388709206, -0.105945692672795, -1.02581475831036, 0.264864231681991, -0.0917516612761804, 0.216260739578394, -0.0749149177264392, -0.0529728463363962, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.26568606239552, 3.07059789431495, 1.77281052085584, -1.25356634105601, 2.39356776939085, 6.30376871403133, -2.78313372537746, -0.908295106229249, -0.524404424085077, 0.370809924354783, 11.1242977306435, 9.40174755792013, -2.42752078113806, 0.840917865872083, -0.301561193523227, -0.794200206656967, 0.350641890608831, 0.114434427054266, 0.0660687472643429, -0.0467176592151151, 0, 0, 0, 1.18413955033316e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.91485421551268, 1.29756443747035, 3.74574588632197, -1.05945692672795, -8.09173593712687, 5.01426536422407, 1.80936716113936, -0.383824736789366, -1.1080065755349, 0.313391585264, 0, 12.7134831207354, 8.2065180664829, -2.84282124887606, 1.01946290306866, -0.631738055305791, -0.227958835180081, 0.0483573714561658, 0.139595707137601, -0.0394836284566112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741914, 7.03562363973515, 4.06201920231798, -0.820651806648292, 0, -6.79705818718658, 5.88642506110457, -2.08116553882674, -1.2015614840698, 0.242752078113806, 0, 0, 14.8323969741913, 5.13809303146605, 0, 0.856348838577678, -0.741619848709567, 0.262202212042541, 0.151382517704874, -0.0305838870920586, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-3.42539535431071, 0, 9.38083151964686, 1.89521416591737, 0, 1.48502651407619e-14, -3.39852909359332, 0, -2.77488738510233, -0.560611910581396, 0, 0, 0, 17.7988763690296, 0, 0, 0.42817441928884, 0, 0.349602949390053, 0.0706304617818605, 0, 0, 0, 0, -1.76908227133537e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.02649122047609, 2.74642624930238, -0.792824967172093, 2.24244764232555, 2.14087209644419, -0.331662479035538, 0.095742710775634, 6.49923072370876, -1.87616630392936, -2.15580611373101, 0, 0, 0, 0, 9.44035859331469, -1.46249406456536, 0.42218567093252, -2.04706526287664, 0.59093684028528, 0.522319308773337, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.71269767715535, 1.16057691494799, 1.34011878852098, 1.89521416591738, 2.53311402559511, 1.96214168703486, -0.566421515598881, 2.74642624930237, 3.17129986868837, -1.82198870938951, 0, 0, 0, 0, 11.1699829238239, 8.65223156827827, -2.49768411251822, -0.865042958313569, -0.998865569685858, 0.441440386136648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.32664991614216, -2.69693703815182, 2.07610309995257, 1.46802658041888, 0, 3.03973683071413, 1.31624465810882, -6.382117875081, 4.91295663090391, -1.4113063856887, 0, 0, 0, 0, 0, 13.4039795085887, 5.80409338312195, 2.01017818278147, -1.54743588659732, 0.341938252770131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.82970843102535, 0, -1.49829835452879, 4.23782770691181, 0, 0, 3.79967103839267, 0, -3.54562104171168, -4.07409060843206, 0, 0, 0, 0, 0, 0, 16.7549743857359, 0, 1.11676565710082, 0.987090711415304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741913, 1.00508909139074, -0.193429485824663, 3.55615782880925, 0, 0, 0, 4.459640440343, -0.858258202906983, 2.67027285925187, 0, 0, 0, 0, 0, 0, 0, 8.42792824422443, -1.62195554683794, -2.29379153190448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.14891252930761, 1.29756443747036, 0.749149177264399, 2.75458800949267, 0, 0, 0, 5.75737105184053, 3.3240197266047, 2.06838446274242, 0, 0, 0, 0, 0, 0, 0, 10.8804085776374, 6.2818068211921, -1.77676328054753, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.02006749648391e-14, 0, 0},
    {-1.32664991614216, 0, 1.73008591662714, -3.18072425757422, 0, 0, 0, 1.15266449376351e-14, 7.67649473578738, -2.38836465270397, 0, 0, 0, 0, 0, 0, 0, 0, 14.5072114368499, 2.05162951662072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.938083151964688, 0, 0, 3.11415464992885, 0, 0, 0, 0, 0, 5.52707620976692, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.80288457473997, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.6248076809272, 0, 0, 5.39387407630363, 0, 0, 0, 0, 0, 9.57317681262152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10.0508909139073, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    const static double dmats2[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.16227766016838, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.82574185835056, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.16397779494323, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.95803989154981, 5.61248608016091, -1.08012344973464, -0.763762615825976, 0, 1.39411605579536e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.29128784747792, 1.44913767461894, 4.18330013267038, -0.591607978309961, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.3228756555323, 0, 3.86436713231718, -0.341565025531985, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87082869338697, 7.09929573971954, 0, 4.34741302385683, 0, 1.2137796469483e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.08012344973464, 0, 7.09929573971954, 2.50998007960223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-3.81881307912987, 0, 0, 8.87411967464942, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.74954541697351, 5.79655069847578, -1.67332005306815, -1.18321595661993, 7.74596669241484, -1.19999999999999, 0.346410161513777, -0.97979589711328, 0.282842712474624, 0.200000000000005, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.32379000772445, 2.44948974278317, 2.82842712474619, -0.999999999999998, 1.30930734141596, 7.09929573971955, -2.04939015319192, -0.414039335605417, -0.478091443733761, 0.169030850945707, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.80000000000001, 0.632455532033672, 4.38178046004133, -0.774596669241482, 0, 3.14233761939829, 4.76235235991627, -0.106904496764972, -0.740656079818045, 0.130930734141597, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.03923048454133, 0, 3.16227766016838, -0.447213595499956, 0, 0, 5.8918830363718, 0, -0.534522483824849, 0.0755928946018436, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.0124611797498, 2.12132034355964, -0.408248290463861, 3.17542648054293, 9.07114735222144, 0, 0, 7.17137165600635, -1.3801311186847, -1.56144011671765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.558845726812, 0.547722557505166, 1.5811388300842, 2.45967477524977, 0, 9.07114735222146, 0, 1.85164019954509, 5.34522483824849, -1.20948631362952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.900000000000005, 0, 1.46059348668045, 1.42009389360939, 0, 0, 9.07114735222146, 0, 4.93770719878694, -0.698297248755174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.27279220613578, -6.26099033699941, 0, 3.83405790253616, 0, -1.33471233241901e-14, 0, 10.5830052442584, 1.61529151756054e-14, 5.18459255872629, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.734846922834955, 0, -6.26099033699941, 2.21359436211787, 0, 0, 0, 0, 10.5830052442584, 2.99332590941916, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.7157676649773, 0, 0, -4.69574275274955, 0, 0, 0, 0, 0, 12.69960629311, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.56904651573303, 5.80288457473998, -2.01017818278148, -1.42141062443803, 8.14215222512715, -2.10229466468021, 0.72825623434142, -1.71651640581399, 0.594618725379067, 0.420458932936046, 9.81070843517429, -1.18450885369836, 0.305838870920599, -0.105945692672794, -1.02581475831036, 0.264864231681991, -0.0917516612761805, 0.216260739578394, -0.0749149177264392, -0.052972846336396, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.26568606239552, 3.07059789431495, 1.77281052085584, -1.25356634105602, 2.39356776939084, 6.30376871403133, -2.78313372537746, -0.908295106229248, -0.524404424085073, 0.370809924354783, 1.23603308118261, 9.40174755792013, -2.42752078113806, 0.840917865872083, -0.301561193523226, -0.794200206656968, 0.350641890608831, 0.114434427054266, 0.0660687472643423, -0.0467176592151165, 0, 0, 0, 1.09746923696279e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.91485421551268, 1.29756443747035, 3.74574588632197, -1.05945692672795, 0.404586796856347, 5.01426536422407, 1.80936716113937, -0.383824736789372, -1.1080065755349, 0.313391585264004, 0, 2.82521847127454, 8.2065180664829, -2.84282124887606, -0.0509731451534344, -0.631738055305788, -0.227958835180082, 0.0483573714561684, 0.139595707137601, -0.039483628456609, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741914, 0.335029697130247, 4.06201920231798, -0.820651806648289, 0, 1.69926454679664, 5.88642506110457, -0.099103120896514, -1.2015614840698, 0.242752078113805, 0, 0, 4.94413232473044, 5.13809303146605, 0, -0.214087209644418, -0.741619848709568, 0.0124858196210747, 0.151382517704876, -0.0305838870920584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.856348838577678, 0, 2.68023757704196, -0.473803541479345, 0, 0, 5.09779364038992, 0, -0.792824967172097, 0.140152977645345, 0, 0, 0, 7.91061171956871, 0, 0, -0.642261628933257, 0, 0.0998865569685871, -0.0176576154454654, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.02649122047609, 2.74642624930238, -0.792824967172095, 2.24244764232555, 2.14087209644419, -0.331662479035546, 0.0957427107756332, 6.49923072370876, -1.87616630392937, -2.15580611373101, 11.0554159678513, 0, 0, 0, 9.44035859331468, -1.46249406456535, 0.42218567093252, -2.04706526287664, 0.59093684028528, 0.522319308773341, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.71269767715534, 1.16057691494799, 1.34011878852098, 1.89521416591737, 0.36187343222787, 1.96214168703486, -0.566421515598891, 2.74642624930238, 3.17129986868838, -1.82198870938951, 0, 11.0554159678513, 0, 0, 1.59571184626056, 8.65223156827827, -2.49768411251822, -0.865042958313572, -0.998865569685858, 0.441440386136647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.32664991614217, 0.299659670905757, 2.07610309995256, 1.46802658041888, 0, 0.868496237346881, 1.31624465810882, 0.709124208342336, 4.91295663090392, -1.4113063856887, 0, 0, 11.0554159678513, 0, 0, 3.82970843102535, 5.80409338312195, -0.223353131420161, -1.54743588659733, 0.341938252770126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.765941686205071, 0, 1.49829835452879, 0.847565541382364, 0, 0, 1.62843044502542, 0, 3.54562104171167, -0.814818121686411, 0, 0, 0, 11.0554159678513, 0, 0, 7.18070330817254, 0, -1.11676565710082, 0.197418142283063, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741914, 1.00508909139074, -0.193429485824663, 3.55615782880926, -8.46157280212812, 0, 0, 4.45964044034301, -0.858258202906987, 2.67027285925186, 0, 0, 0, 0, 12.4373429638327, 0, 0, 8.42792824422443, -1.62195554683794, -2.29379153190448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.1489125293076, 0.259512887494073, 0.749149177264395, 2.75458800949267, 0, -8.46157280212812, 0, 1.15147421036811, 3.32401972660469, 2.06838446274243, 0, 0, 0, 0, 0, 12.4373429638327, 0, 2.17608171552749, 6.2818068211921, -1.77676328054754, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.663324958071074, 0, 0.692034366650849, 1.59036212878711, 0, 0, -8.46157280212813, 0, 3.07059789431495, 1.19418232635198, 0, 0, 0, 0, 0, 0, 12.4373429638327, 0, 5.80288457473997, -1.02581475831036, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.938083151964688, 7.62808987244126, 0, 3.11415464992885, 0, 0, 0, -7.5213980463361, 0, 5.52707620976691, 0, 0, 0, 0, 0, 0, 0, 14.2141062443803, 0, 5.80288457473998, 0, 0, 0, 0, 0, 1.03455020940032e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.541602560309059, 0, 7.62808987244125, 1.79795802543454, 0, 0, 0, 0, -7.52139804633611, 3.1910589375405, 0, 0, 0, 0, 0, 0, 0, 0, 14.2141062443803, 3.35029697130244, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-5.36159180343549, 0, 0, 8.8994381845148, 0, 0, 0, 0, -1.07784467308941e-14, -5.26497863243527, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16.583123951777, 0, 0, 0, 0, 0, 1.2461107758246e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    // Compute reference derivatives
    // Declare pointer to array of derivatives on FIAT element
    double *derivatives = new double [num_derivatives];
    
    // Declare coefficients
    double coeff0_0 = 0;
    double coeff0_1 = 0;
    double coeff0_2 = 0;
    double coeff0_3 = 0;
    double coeff0_4 = 0;
    double coeff0_5 = 0;
    double coeff0_6 = 0;
    double coeff0_7 = 0;
    double coeff0_8 = 0;
    double coeff0_9 = 0;
    double coeff0_10 = 0;
    double coeff0_11 = 0;
    double coeff0_12 = 0;
    double coeff0_13 = 0;
    double coeff0_14 = 0;
    double coeff0_15 = 0;
    double coeff0_16 = 0;
    double coeff0_17 = 0;
    double coeff0_18 = 0;
    double coeff0_19 = 0;
    double coeff0_20 = 0;
    double coeff0_21 = 0;
    double coeff0_22 = 0;
    double coeff0_23 = 0;
    double coeff0_24 = 0;
    double coeff0_25 = 0;
    double coeff0_26 = 0;
    double coeff0_27 = 0;
    double coeff0_28 = 0;
    double coeff0_29 = 0;
    double coeff0_30 = 0;
    double coeff0_31 = 0;
    double coeff0_32 = 0;
    double coeff0_33 = 0;
    double coeff0_34 = 0;
    
    // Declare new coefficients
    double new_coeff0_0 = 0;
    double new_coeff0_1 = 0;
    double new_coeff0_2 = 0;
    double new_coeff0_3 = 0;
    double new_coeff0_4 = 0;
    double new_coeff0_5 = 0;
    double new_coeff0_6 = 0;
    double new_coeff0_7 = 0;
    double new_coeff0_8 = 0;
    double new_coeff0_9 = 0;
    double new_coeff0_10 = 0;
    double new_coeff0_11 = 0;
    double new_coeff0_12 = 0;
    double new_coeff0_13 = 0;
    double new_coeff0_14 = 0;
    double new_coeff0_15 = 0;
    double new_coeff0_16 = 0;
    double new_coeff0_17 = 0;
    double new_coeff0_18 = 0;
    double new_coeff0_19 = 0;
    double new_coeff0_20 = 0;
    double new_coeff0_21 = 0;
    double new_coeff0_22 = 0;
    double new_coeff0_23 = 0;
    double new_coeff0_24 = 0;
    double new_coeff0_25 = 0;
    double new_coeff0_26 = 0;
    double new_coeff0_27 = 0;
    double new_coeff0_28 = 0;
    double new_coeff0_29 = 0;
    double new_coeff0_30 = 0;
    double new_coeff0_31 = 0;
    double new_coeff0_32 = 0;
    double new_coeff0_33 = 0;
    double new_coeff0_34 = 0;
    
    // Loop possible derivatives
    for (unsigned int deriv_num = 0; deriv_num < num_derivatives; deriv_num++)
    {
      // Get values from coefficients array
      new_coeff0_0 = coefficients0[dof][0];
      new_coeff0_1 = coefficients0[dof][1];
      new_coeff0_2 = coefficients0[dof][2];
      new_coeff0_3 = coefficients0[dof][3];
      new_coeff0_4 = coefficients0[dof][4];
      new_coeff0_5 = coefficients0[dof][5];
      new_coeff0_6 = coefficients0[dof][6];
      new_coeff0_7 = coefficients0[dof][7];
      new_coeff0_8 = coefficients0[dof][8];
      new_coeff0_9 = coefficients0[dof][9];
      new_coeff0_10 = coefficients0[dof][10];
      new_coeff0_11 = coefficients0[dof][11];
      new_coeff0_12 = coefficients0[dof][12];
      new_coeff0_13 = coefficients0[dof][13];
      new_coeff0_14 = coefficients0[dof][14];
      new_coeff0_15 = coefficients0[dof][15];
      new_coeff0_16 = coefficients0[dof][16];
      new_coeff0_17 = coefficients0[dof][17];
      new_coeff0_18 = coefficients0[dof][18];
      new_coeff0_19 = coefficients0[dof][19];
      new_coeff0_20 = coefficients0[dof][20];
      new_coeff0_21 = coefficients0[dof][21];
      new_coeff0_22 = coefficients0[dof][22];
      new_coeff0_23 = coefficients0[dof][23];
      new_coeff0_24 = coefficients0[dof][24];
      new_coeff0_25 = coefficients0[dof][25];
      new_coeff0_26 = coefficients0[dof][26];
      new_coeff0_27 = coefficients0[dof][27];
      new_coeff0_28 = coefficients0[dof][28];
      new_coeff0_29 = coefficients0[dof][29];
      new_coeff0_30 = coefficients0[dof][30];
      new_coeff0_31 = coefficients0[dof][31];
      new_coeff0_32 = coefficients0[dof][32];
      new_coeff0_33 = coefficients0[dof][33];
      new_coeff0_34 = coefficients0[dof][34];
    
      // Loop derivative order
      for (unsigned int j = 0; j < n; j++)
      {
        // Update old coefficients
        coeff0_0 = new_coeff0_0;
        coeff0_1 = new_coeff0_1;
        coeff0_2 = new_coeff0_2;
        coeff0_3 = new_coeff0_3;
        coeff0_4 = new_coeff0_4;
        coeff0_5 = new_coeff0_5;
        coeff0_6 = new_coeff0_6;
        coeff0_7 = new_coeff0_7;
        coeff0_8 = new_coeff0_8;
        coeff0_9 = new_coeff0_9;
        coeff0_10 = new_coeff0_10;
        coeff0_11 = new_coeff0_11;
        coeff0_12 = new_coeff0_12;
        coeff0_13 = new_coeff0_13;
        coeff0_14 = new_coeff0_14;
        coeff0_15 = new_coeff0_15;
        coeff0_16 = new_coeff0_16;
        coeff0_17 = new_coeff0_17;
        coeff0_18 = new_coeff0_18;
        coeff0_19 = new_coeff0_19;
        coeff0_20 = new_coeff0_20;
        coeff0_21 = new_coeff0_21;
        coeff0_22 = new_coeff0_22;
        coeff0_23 = new_coeff0_23;
        coeff0_24 = new_coeff0_24;
        coeff0_25 = new_coeff0_25;
        coeff0_26 = new_coeff0_26;
        coeff0_27 = new_coeff0_27;
        coeff0_28 = new_coeff0_28;
        coeff0_29 = new_coeff0_29;
        coeff0_30 = new_coeff0_30;
        coeff0_31 = new_coeff0_31;
        coeff0_32 = new_coeff0_32;
        coeff0_33 = new_coeff0_33;
        coeff0_34 = new_coeff0_34;
    
        if(combinations[deriv_num][j] == 0)
        {
          new_coeff0_0 = coeff0_0*dmats0[0][0] + coeff0_1*dmats0[1][0] + coeff0_2*dmats0[2][0] + coeff0_3*dmats0[3][0] + coeff0_4*dmats0[4][0] + coeff0_5*dmats0[5][0] + coeff0_6*dmats0[6][0] + coeff0_7*dmats0[7][0] + coeff0_8*dmats0[8][0] + coeff0_9*dmats0[9][0] + coeff0_10*dmats0[10][0] + coeff0_11*dmats0[11][0] + coeff0_12*dmats0[12][0] + coeff0_13*dmats0[13][0] + coeff0_14*dmats0[14][0] + coeff0_15*dmats0[15][0] + coeff0_16*dmats0[16][0] + coeff0_17*dmats0[17][0] + coeff0_18*dmats0[18][0] + coeff0_19*dmats0[19][0] + coeff0_20*dmats0[20][0] + coeff0_21*dmats0[21][0] + coeff0_22*dmats0[22][0] + coeff0_23*dmats0[23][0] + coeff0_24*dmats0[24][0] + coeff0_25*dmats0[25][0] + coeff0_26*dmats0[26][0] + coeff0_27*dmats0[27][0] + coeff0_28*dmats0[28][0] + coeff0_29*dmats0[29][0] + coeff0_30*dmats0[30][0] + coeff0_31*dmats0[31][0] + coeff0_32*dmats0[32][0] + coeff0_33*dmats0[33][0] + coeff0_34*dmats0[34][0];
          new_coeff0_1 = coeff0_0*dmats0[0][1] + coeff0_1*dmats0[1][1] + coeff0_2*dmats0[2][1] + coeff0_3*dmats0[3][1] + coeff0_4*dmats0[4][1] + coeff0_5*dmats0[5][1] + coeff0_6*dmats0[6][1] + coeff0_7*dmats0[7][1] + coeff0_8*dmats0[8][1] + coeff0_9*dmats0[9][1] + coeff0_10*dmats0[10][1] + coeff0_11*dmats0[11][1] + coeff0_12*dmats0[12][1] + coeff0_13*dmats0[13][1] + coeff0_14*dmats0[14][1] + coeff0_15*dmats0[15][1] + coeff0_16*dmats0[16][1] + coeff0_17*dmats0[17][1] + coeff0_18*dmats0[18][1] + coeff0_19*dmats0[19][1] + coeff0_20*dmats0[20][1] + coeff0_21*dmats0[21][1] + coeff0_22*dmats0[22][1] + coeff0_23*dmats0[23][1] + coeff0_24*dmats0[24][1] + coeff0_25*dmats0[25][1] + coeff0_26*dmats0[26][1] + coeff0_27*dmats0[27][1] + coeff0_28*dmats0[28][1] + coeff0_29*dmats0[29][1] + coeff0_30*dmats0[30][1] + coeff0_31*dmats0[31][1] + coeff0_32*dmats0[32][1] + coeff0_33*dmats0[33][1] + coeff0_34*dmats0[34][1];
          new_coeff0_2 = coeff0_0*dmats0[0][2] + coeff0_1*dmats0[1][2] + coeff0_2*dmats0[2][2] + coeff0_3*dmats0[3][2] + coeff0_4*dmats0[4][2] + coeff0_5*dmats0[5][2] + coeff0_6*dmats0[6][2] + coeff0_7*dmats0[7][2] + coeff0_8*dmats0[8][2] + coeff0_9*dmats0[9][2] + coeff0_10*dmats0[10][2] + coeff0_11*dmats0[11][2] + coeff0_12*dmats0[12][2] + coeff0_13*dmats0[13][2] + coeff0_14*dmats0[14][2] + coeff0_15*dmats0[15][2] + coeff0_16*dmats0[16][2] + coeff0_17*dmats0[17][2] + coeff0_18*dmats0[18][2] + coeff0_19*dmats0[19][2] + coeff0_20*dmats0[20][2] + coeff0_21*dmats0[21][2] + coeff0_22*dmats0[22][2] + coeff0_23*dmats0[23][2] + coeff0_24*dmats0[24][2] + coeff0_25*dmats0[25][2] + coeff0_26*dmats0[26][2] + coeff0_27*dmats0[27][2] + coeff0_28*dmats0[28][2] + coeff0_29*dmats0[29][2] + coeff0_30*dmats0[30][2] + coeff0_31*dmats0[31][2] + coeff0_32*dmats0[32][2] + coeff0_33*dmats0[33][2] + coeff0_34*dmats0[34][2];
          new_coeff0_3 = coeff0_0*dmats0[0][3] + coeff0_1*dmats0[1][3] + coeff0_2*dmats0[2][3] + coeff0_3*dmats0[3][3] + coeff0_4*dmats0[4][3] + coeff0_5*dmats0[5][3] + coeff0_6*dmats0[6][3] + coeff0_7*dmats0[7][3] + coeff0_8*dmats0[8][3] + coeff0_9*dmats0[9][3] + coeff0_10*dmats0[10][3] + coeff0_11*dmats0[11][3] + coeff0_12*dmats0[12][3] + coeff0_13*dmats0[13][3] + coeff0_14*dmats0[14][3] + coeff0_15*dmats0[15][3] + coeff0_16*dmats0[16][3] + coeff0_17*dmats0[17][3] + coeff0_18*dmats0[18][3] + coeff0_19*dmats0[19][3] + coeff0_20*dmats0[20][3] + coeff0_21*dmats0[21][3] + coeff0_22*dmats0[22][3] + coeff0_23*dmats0[23][3] + coeff0_24*dmats0[24][3] + coeff0_25*dmats0[25][3] + coeff0_26*dmats0[26][3] + coeff0_27*dmats0[27][3] + coeff0_28*dmats0[28][3] + coeff0_29*dmats0[29][3] + coeff0_30*dmats0[30][3] + coeff0_31*dmats0[31][3] + coeff0_32*dmats0[32][3] + coeff0_33*dmats0[33][3] + coeff0_34*dmats0[34][3];
          new_coeff0_4 = coeff0_0*dmats0[0][4] + coeff0_1*dmats0[1][4] + coeff0_2*dmats0[2][4] + coeff0_3*dmats0[3][4] + coeff0_4*dmats0[4][4] + coeff0_5*dmats0[5][4] + coeff0_6*dmats0[6][4] + coeff0_7*dmats0[7][4] + coeff0_8*dmats0[8][4] + coeff0_9*dmats0[9][4] + coeff0_10*dmats0[10][4] + coeff0_11*dmats0[11][4] + coeff0_12*dmats0[12][4] + coeff0_13*dmats0[13][4] + coeff0_14*dmats0[14][4] + coeff0_15*dmats0[15][4] + coeff0_16*dmats0[16][4] + coeff0_17*dmats0[17][4] + coeff0_18*dmats0[18][4] + coeff0_19*dmats0[19][4] + coeff0_20*dmats0[20][4] + coeff0_21*dmats0[21][4] + coeff0_22*dmats0[22][4] + coeff0_23*dmats0[23][4] + coeff0_24*dmats0[24][4] + coeff0_25*dmats0[25][4] + coeff0_26*dmats0[26][4] + coeff0_27*dmats0[27][4] + coeff0_28*dmats0[28][4] + coeff0_29*dmats0[29][4] + coeff0_30*dmats0[30][4] + coeff0_31*dmats0[31][4] + coeff0_32*dmats0[32][4] + coeff0_33*dmats0[33][4] + coeff0_34*dmats0[34][4];
          new_coeff0_5 = coeff0_0*dmats0[0][5] + coeff0_1*dmats0[1][5] + coeff0_2*dmats0[2][5] + coeff0_3*dmats0[3][5] + coeff0_4*dmats0[4][5] + coeff0_5*dmats0[5][5] + coeff0_6*dmats0[6][5] + coeff0_7*dmats0[7][5] + coeff0_8*dmats0[8][5] + coeff0_9*dmats0[9][5] + coeff0_10*dmats0[10][5] + coeff0_11*dmats0[11][5] + coeff0_12*dmats0[12][5] + coeff0_13*dmats0[13][5] + coeff0_14*dmats0[14][5] + coeff0_15*dmats0[15][5] + coeff0_16*dmats0[16][5] + coeff0_17*dmats0[17][5] + coeff0_18*dmats0[18][5] + coeff0_19*dmats0[19][5] + coeff0_20*dmats0[20][5] + coeff0_21*dmats0[21][5] + coeff0_22*dmats0[22][5] + coeff0_23*dmats0[23][5] + coeff0_24*dmats0[24][5] + coeff0_25*dmats0[25][5] + coeff0_26*dmats0[26][5] + coeff0_27*dmats0[27][5] + coeff0_28*dmats0[28][5] + coeff0_29*dmats0[29][5] + coeff0_30*dmats0[30][5] + coeff0_31*dmats0[31][5] + coeff0_32*dmats0[32][5] + coeff0_33*dmats0[33][5] + coeff0_34*dmats0[34][5];
          new_coeff0_6 = coeff0_0*dmats0[0][6] + coeff0_1*dmats0[1][6] + coeff0_2*dmats0[2][6] + coeff0_3*dmats0[3][6] + coeff0_4*dmats0[4][6] + coeff0_5*dmats0[5][6] + coeff0_6*dmats0[6][6] + coeff0_7*dmats0[7][6] + coeff0_8*dmats0[8][6] + coeff0_9*dmats0[9][6] + coeff0_10*dmats0[10][6] + coeff0_11*dmats0[11][6] + coeff0_12*dmats0[12][6] + coeff0_13*dmats0[13][6] + coeff0_14*dmats0[14][6] + coeff0_15*dmats0[15][6] + coeff0_16*dmats0[16][6] + coeff0_17*dmats0[17][6] + coeff0_18*dmats0[18][6] + coeff0_19*dmats0[19][6] + coeff0_20*dmats0[20][6] + coeff0_21*dmats0[21][6] + coeff0_22*dmats0[22][6] + coeff0_23*dmats0[23][6] + coeff0_24*dmats0[24][6] + coeff0_25*dmats0[25][6] + coeff0_26*dmats0[26][6] + coeff0_27*dmats0[27][6] + coeff0_28*dmats0[28][6] + coeff0_29*dmats0[29][6] + coeff0_30*dmats0[30][6] + coeff0_31*dmats0[31][6] + coeff0_32*dmats0[32][6] + coeff0_33*dmats0[33][6] + coeff0_34*dmats0[34][6];
          new_coeff0_7 = coeff0_0*dmats0[0][7] + coeff0_1*dmats0[1][7] + coeff0_2*dmats0[2][7] + coeff0_3*dmats0[3][7] + coeff0_4*dmats0[4][7] + coeff0_5*dmats0[5][7] + coeff0_6*dmats0[6][7] + coeff0_7*dmats0[7][7] + coeff0_8*dmats0[8][7] + coeff0_9*dmats0[9][7] + coeff0_10*dmats0[10][7] + coeff0_11*dmats0[11][7] + coeff0_12*dmats0[12][7] + coeff0_13*dmats0[13][7] + coeff0_14*dmats0[14][7] + coeff0_15*dmats0[15][7] + coeff0_16*dmats0[16][7] + coeff0_17*dmats0[17][7] + coeff0_18*dmats0[18][7] + coeff0_19*dmats0[19][7] + coeff0_20*dmats0[20][7] + coeff0_21*dmats0[21][7] + coeff0_22*dmats0[22][7] + coeff0_23*dmats0[23][7] + coeff0_24*dmats0[24][7] + coeff0_25*dmats0[25][7] + coeff0_26*dmats0[26][7] + coeff0_27*dmats0[27][7] + coeff0_28*dmats0[28][7] + coeff0_29*dmats0[29][7] + coeff0_30*dmats0[30][7] + coeff0_31*dmats0[31][7] + coeff0_32*dmats0[32][7] + coeff0_33*dmats0[33][7] + coeff0_34*dmats0[34][7];
          new_coeff0_8 = coeff0_0*dmats0[0][8] + coeff0_1*dmats0[1][8] + coeff0_2*dmats0[2][8] + coeff0_3*dmats0[3][8] + coeff0_4*dmats0[4][8] + coeff0_5*dmats0[5][8] + coeff0_6*dmats0[6][8] + coeff0_7*dmats0[7][8] + coeff0_8*dmats0[8][8] + coeff0_9*dmats0[9][8] + coeff0_10*dmats0[10][8] + coeff0_11*dmats0[11][8] + coeff0_12*dmats0[12][8] + coeff0_13*dmats0[13][8] + coeff0_14*dmats0[14][8] + coeff0_15*dmats0[15][8] + coeff0_16*dmats0[16][8] + coeff0_17*dmats0[17][8] + coeff0_18*dmats0[18][8] + coeff0_19*dmats0[19][8] + coeff0_20*dmats0[20][8] + coeff0_21*dmats0[21][8] + coeff0_22*dmats0[22][8] + coeff0_23*dmats0[23][8] + coeff0_24*dmats0[24][8] + coeff0_25*dmats0[25][8] + coeff0_26*dmats0[26][8] + coeff0_27*dmats0[27][8] + coeff0_28*dmats0[28][8] + coeff0_29*dmats0[29][8] + coeff0_30*dmats0[30][8] + coeff0_31*dmats0[31][8] + coeff0_32*dmats0[32][8] + coeff0_33*dmats0[33][8] + coeff0_34*dmats0[34][8];
          new_coeff0_9 = coeff0_0*dmats0[0][9] + coeff0_1*dmats0[1][9] + coeff0_2*dmats0[2][9] + coeff0_3*dmats0[3][9] + coeff0_4*dmats0[4][9] + coeff0_5*dmats0[5][9] + coeff0_6*dmats0[6][9] + coeff0_7*dmats0[7][9] + coeff0_8*dmats0[8][9] + coeff0_9*dmats0[9][9] + coeff0_10*dmats0[10][9] + coeff0_11*dmats0[11][9] + coeff0_12*dmats0[12][9] + coeff0_13*dmats0[13][9] + coeff0_14*dmats0[14][9] + coeff0_15*dmats0[15][9] + coeff0_16*dmats0[16][9] + coeff0_17*dmats0[17][9] + coeff0_18*dmats0[18][9] + coeff0_19*dmats0[19][9] + coeff0_20*dmats0[20][9] + coeff0_21*dmats0[21][9] + coeff0_22*dmats0[22][9] + coeff0_23*dmats0[23][9] + coeff0_24*dmats0[24][9] + coeff0_25*dmats0[25][9] + coeff0_26*dmats0[26][9] + coeff0_27*dmats0[27][9] + coeff0_28*dmats0[28][9] + coeff0_29*dmats0[29][9] + coeff0_30*dmats0[30][9] + coeff0_31*dmats0[31][9] + coeff0_32*dmats0[32][9] + coeff0_33*dmats0[33][9] + coeff0_34*dmats0[34][9];
          new_coeff0_10 = coeff0_0*dmats0[0][10] + coeff0_1*dmats0[1][10] + coeff0_2*dmats0[2][10] + coeff0_3*dmats0[3][10] + coeff0_4*dmats0[4][10] + coeff0_5*dmats0[5][10] + coeff0_6*dmats0[6][10] + coeff0_7*dmats0[7][10] + coeff0_8*dmats0[8][10] + coeff0_9*dmats0[9][10] + coeff0_10*dmats0[10][10] + coeff0_11*dmats0[11][10] + coeff0_12*dmats0[12][10] + coeff0_13*dmats0[13][10] + coeff0_14*dmats0[14][10] + coeff0_15*dmats0[15][10] + coeff0_16*dmats0[16][10] + coeff0_17*dmats0[17][10] + coeff0_18*dmats0[18][10] + coeff0_19*dmats0[19][10] + coeff0_20*dmats0[20][10] + coeff0_21*dmats0[21][10] + coeff0_22*dmats0[22][10] + coeff0_23*dmats0[23][10] + coeff0_24*dmats0[24][10] + coeff0_25*dmats0[25][10] + coeff0_26*dmats0[26][10] + coeff0_27*dmats0[27][10] + coeff0_28*dmats0[28][10] + coeff0_29*dmats0[29][10] + coeff0_30*dmats0[30][10] + coeff0_31*dmats0[31][10] + coeff0_32*dmats0[32][10] + coeff0_33*dmats0[33][10] + coeff0_34*dmats0[34][10];
          new_coeff0_11 = coeff0_0*dmats0[0][11] + coeff0_1*dmats0[1][11] + coeff0_2*dmats0[2][11] + coeff0_3*dmats0[3][11] + coeff0_4*dmats0[4][11] + coeff0_5*dmats0[5][11] + coeff0_6*dmats0[6][11] + coeff0_7*dmats0[7][11] + coeff0_8*dmats0[8][11] + coeff0_9*dmats0[9][11] + coeff0_10*dmats0[10][11] + coeff0_11*dmats0[11][11] + coeff0_12*dmats0[12][11] + coeff0_13*dmats0[13][11] + coeff0_14*dmats0[14][11] + coeff0_15*dmats0[15][11] + coeff0_16*dmats0[16][11] + coeff0_17*dmats0[17][11] + coeff0_18*dmats0[18][11] + coeff0_19*dmats0[19][11] + coeff0_20*dmats0[20][11] + coeff0_21*dmats0[21][11] + coeff0_22*dmats0[22][11] + coeff0_23*dmats0[23][11] + coeff0_24*dmats0[24][11] + coeff0_25*dmats0[25][11] + coeff0_26*dmats0[26][11] + coeff0_27*dmats0[27][11] + coeff0_28*dmats0[28][11] + coeff0_29*dmats0[29][11] + coeff0_30*dmats0[30][11] + coeff0_31*dmats0[31][11] + coeff0_32*dmats0[32][11] + coeff0_33*dmats0[33][11] + coeff0_34*dmats0[34][11];
          new_coeff0_12 = coeff0_0*dmats0[0][12] + coeff0_1*dmats0[1][12] + coeff0_2*dmats0[2][12] + coeff0_3*dmats0[3][12] + coeff0_4*dmats0[4][12] + coeff0_5*dmats0[5][12] + coeff0_6*dmats0[6][12] + coeff0_7*dmats0[7][12] + coeff0_8*dmats0[8][12] + coeff0_9*dmats0[9][12] + coeff0_10*dmats0[10][12] + coeff0_11*dmats0[11][12] + coeff0_12*dmats0[12][12] + coeff0_13*dmats0[13][12] + coeff0_14*dmats0[14][12] + coeff0_15*dmats0[15][12] + coeff0_16*dmats0[16][12] + coeff0_17*dmats0[17][12] + coeff0_18*dmats0[18][12] + coeff0_19*dmats0[19][12] + coeff0_20*dmats0[20][12] + coeff0_21*dmats0[21][12] + coeff0_22*dmats0[22][12] + coeff0_23*dmats0[23][12] + coeff0_24*dmats0[24][12] + coeff0_25*dmats0[25][12] + coeff0_26*dmats0[26][12] + coeff0_27*dmats0[27][12] + coeff0_28*dmats0[28][12] + coeff0_29*dmats0[29][12] + coeff0_30*dmats0[30][12] + coeff0_31*dmats0[31][12] + coeff0_32*dmats0[32][12] + coeff0_33*dmats0[33][12] + coeff0_34*dmats0[34][12];
          new_coeff0_13 = coeff0_0*dmats0[0][13] + coeff0_1*dmats0[1][13] + coeff0_2*dmats0[2][13] + coeff0_3*dmats0[3][13] + coeff0_4*dmats0[4][13] + coeff0_5*dmats0[5][13] + coeff0_6*dmats0[6][13] + coeff0_7*dmats0[7][13] + coeff0_8*dmats0[8][13] + coeff0_9*dmats0[9][13] + coeff0_10*dmats0[10][13] + coeff0_11*dmats0[11][13] + coeff0_12*dmats0[12][13] + coeff0_13*dmats0[13][13] + coeff0_14*dmats0[14][13] + coeff0_15*dmats0[15][13] + coeff0_16*dmats0[16][13] + coeff0_17*dmats0[17][13] + coeff0_18*dmats0[18][13] + coeff0_19*dmats0[19][13] + coeff0_20*dmats0[20][13] + coeff0_21*dmats0[21][13] + coeff0_22*dmats0[22][13] + coeff0_23*dmats0[23][13] + coeff0_24*dmats0[24][13] + coeff0_25*dmats0[25][13] + coeff0_26*dmats0[26][13] + coeff0_27*dmats0[27][13] + coeff0_28*dmats0[28][13] + coeff0_29*dmats0[29][13] + coeff0_30*dmats0[30][13] + coeff0_31*dmats0[31][13] + coeff0_32*dmats0[32][13] + coeff0_33*dmats0[33][13] + coeff0_34*dmats0[34][13];
          new_coeff0_14 = coeff0_0*dmats0[0][14] + coeff0_1*dmats0[1][14] + coeff0_2*dmats0[2][14] + coeff0_3*dmats0[3][14] + coeff0_4*dmats0[4][14] + coeff0_5*dmats0[5][14] + coeff0_6*dmats0[6][14] + coeff0_7*dmats0[7][14] + coeff0_8*dmats0[8][14] + coeff0_9*dmats0[9][14] + coeff0_10*dmats0[10][14] + coeff0_11*dmats0[11][14] + coeff0_12*dmats0[12][14] + coeff0_13*dmats0[13][14] + coeff0_14*dmats0[14][14] + coeff0_15*dmats0[15][14] + coeff0_16*dmats0[16][14] + coeff0_17*dmats0[17][14] + coeff0_18*dmats0[18][14] + coeff0_19*dmats0[19][14] + coeff0_20*dmats0[20][14] + coeff0_21*dmats0[21][14] + coeff0_22*dmats0[22][14] + coeff0_23*dmats0[23][14] + coeff0_24*dmats0[24][14] + coeff0_25*dmats0[25][14] + coeff0_26*dmats0[26][14] + coeff0_27*dmats0[27][14] + coeff0_28*dmats0[28][14] + coeff0_29*dmats0[29][14] + coeff0_30*dmats0[30][14] + coeff0_31*dmats0[31][14] + coeff0_32*dmats0[32][14] + coeff0_33*dmats0[33][14] + coeff0_34*dmats0[34][14];
          new_coeff0_15 = coeff0_0*dmats0[0][15] + coeff0_1*dmats0[1][15] + coeff0_2*dmats0[2][15] + coeff0_3*dmats0[3][15] + coeff0_4*dmats0[4][15] + coeff0_5*dmats0[5][15] + coeff0_6*dmats0[6][15] + coeff0_7*dmats0[7][15] + coeff0_8*dmats0[8][15] + coeff0_9*dmats0[9][15] + coeff0_10*dmats0[10][15] + coeff0_11*dmats0[11][15] + coeff0_12*dmats0[12][15] + coeff0_13*dmats0[13][15] + coeff0_14*dmats0[14][15] + coeff0_15*dmats0[15][15] + coeff0_16*dmats0[16][15] + coeff0_17*dmats0[17][15] + coeff0_18*dmats0[18][15] + coeff0_19*dmats0[19][15] + coeff0_20*dmats0[20][15] + coeff0_21*dmats0[21][15] + coeff0_22*dmats0[22][15] + coeff0_23*dmats0[23][15] + coeff0_24*dmats0[24][15] + coeff0_25*dmats0[25][15] + coeff0_26*dmats0[26][15] + coeff0_27*dmats0[27][15] + coeff0_28*dmats0[28][15] + coeff0_29*dmats0[29][15] + coeff0_30*dmats0[30][15] + coeff0_31*dmats0[31][15] + coeff0_32*dmats0[32][15] + coeff0_33*dmats0[33][15] + coeff0_34*dmats0[34][15];
          new_coeff0_16 = coeff0_0*dmats0[0][16] + coeff0_1*dmats0[1][16] + coeff0_2*dmats0[2][16] + coeff0_3*dmats0[3][16] + coeff0_4*dmats0[4][16] + coeff0_5*dmats0[5][16] + coeff0_6*dmats0[6][16] + coeff0_7*dmats0[7][16] + coeff0_8*dmats0[8][16] + coeff0_9*dmats0[9][16] + coeff0_10*dmats0[10][16] + coeff0_11*dmats0[11][16] + coeff0_12*dmats0[12][16] + coeff0_13*dmats0[13][16] + coeff0_14*dmats0[14][16] + coeff0_15*dmats0[15][16] + coeff0_16*dmats0[16][16] + coeff0_17*dmats0[17][16] + coeff0_18*dmats0[18][16] + coeff0_19*dmats0[19][16] + coeff0_20*dmats0[20][16] + coeff0_21*dmats0[21][16] + coeff0_22*dmats0[22][16] + coeff0_23*dmats0[23][16] + coeff0_24*dmats0[24][16] + coeff0_25*dmats0[25][16] + coeff0_26*dmats0[26][16] + coeff0_27*dmats0[27][16] + coeff0_28*dmats0[28][16] + coeff0_29*dmats0[29][16] + coeff0_30*dmats0[30][16] + coeff0_31*dmats0[31][16] + coeff0_32*dmats0[32][16] + coeff0_33*dmats0[33][16] + coeff0_34*dmats0[34][16];
          new_coeff0_17 = coeff0_0*dmats0[0][17] + coeff0_1*dmats0[1][17] + coeff0_2*dmats0[2][17] + coeff0_3*dmats0[3][17] + coeff0_4*dmats0[4][17] + coeff0_5*dmats0[5][17] + coeff0_6*dmats0[6][17] + coeff0_7*dmats0[7][17] + coeff0_8*dmats0[8][17] + coeff0_9*dmats0[9][17] + coeff0_10*dmats0[10][17] + coeff0_11*dmats0[11][17] + coeff0_12*dmats0[12][17] + coeff0_13*dmats0[13][17] + coeff0_14*dmats0[14][17] + coeff0_15*dmats0[15][17] + coeff0_16*dmats0[16][17] + coeff0_17*dmats0[17][17] + coeff0_18*dmats0[18][17] + coeff0_19*dmats0[19][17] + coeff0_20*dmats0[20][17] + coeff0_21*dmats0[21][17] + coeff0_22*dmats0[22][17] + coeff0_23*dmats0[23][17] + coeff0_24*dmats0[24][17] + coeff0_25*dmats0[25][17] + coeff0_26*dmats0[26][17] + coeff0_27*dmats0[27][17] + coeff0_28*dmats0[28][17] + coeff0_29*dmats0[29][17] + coeff0_30*dmats0[30][17] + coeff0_31*dmats0[31][17] + coeff0_32*dmats0[32][17] + coeff0_33*dmats0[33][17] + coeff0_34*dmats0[34][17];
          new_coeff0_18 = coeff0_0*dmats0[0][18] + coeff0_1*dmats0[1][18] + coeff0_2*dmats0[2][18] + coeff0_3*dmats0[3][18] + coeff0_4*dmats0[4][18] + coeff0_5*dmats0[5][18] + coeff0_6*dmats0[6][18] + coeff0_7*dmats0[7][18] + coeff0_8*dmats0[8][18] + coeff0_9*dmats0[9][18] + coeff0_10*dmats0[10][18] + coeff0_11*dmats0[11][18] + coeff0_12*dmats0[12][18] + coeff0_13*dmats0[13][18] + coeff0_14*dmats0[14][18] + coeff0_15*dmats0[15][18] + coeff0_16*dmats0[16][18] + coeff0_17*dmats0[17][18] + coeff0_18*dmats0[18][18] + coeff0_19*dmats0[19][18] + coeff0_20*dmats0[20][18] + coeff0_21*dmats0[21][18] + coeff0_22*dmats0[22][18] + coeff0_23*dmats0[23][18] + coeff0_24*dmats0[24][18] + coeff0_25*dmats0[25][18] + coeff0_26*dmats0[26][18] + coeff0_27*dmats0[27][18] + coeff0_28*dmats0[28][18] + coeff0_29*dmats0[29][18] + coeff0_30*dmats0[30][18] + coeff0_31*dmats0[31][18] + coeff0_32*dmats0[32][18] + coeff0_33*dmats0[33][18] + coeff0_34*dmats0[34][18];
          new_coeff0_19 = coeff0_0*dmats0[0][19] + coeff0_1*dmats0[1][19] + coeff0_2*dmats0[2][19] + coeff0_3*dmats0[3][19] + coeff0_4*dmats0[4][19] + coeff0_5*dmats0[5][19] + coeff0_6*dmats0[6][19] + coeff0_7*dmats0[7][19] + coeff0_8*dmats0[8][19] + coeff0_9*dmats0[9][19] + coeff0_10*dmats0[10][19] + coeff0_11*dmats0[11][19] + coeff0_12*dmats0[12][19] + coeff0_13*dmats0[13][19] + coeff0_14*dmats0[14][19] + coeff0_15*dmats0[15][19] + coeff0_16*dmats0[16][19] + coeff0_17*dmats0[17][19] + coeff0_18*dmats0[18][19] + coeff0_19*dmats0[19][19] + coeff0_20*dmats0[20][19] + coeff0_21*dmats0[21][19] + coeff0_22*dmats0[22][19] + coeff0_23*dmats0[23][19] + coeff0_24*dmats0[24][19] + coeff0_25*dmats0[25][19] + coeff0_26*dmats0[26][19] + coeff0_27*dmats0[27][19] + coeff0_28*dmats0[28][19] + coeff0_29*dmats0[29][19] + coeff0_30*dmats0[30][19] + coeff0_31*dmats0[31][19] + coeff0_32*dmats0[32][19] + coeff0_33*dmats0[33][19] + coeff0_34*dmats0[34][19];
          new_coeff0_20 = coeff0_0*dmats0[0][20] + coeff0_1*dmats0[1][20] + coeff0_2*dmats0[2][20] + coeff0_3*dmats0[3][20] + coeff0_4*dmats0[4][20] + coeff0_5*dmats0[5][20] + coeff0_6*dmats0[6][20] + coeff0_7*dmats0[7][20] + coeff0_8*dmats0[8][20] + coeff0_9*dmats0[9][20] + coeff0_10*dmats0[10][20] + coeff0_11*dmats0[11][20] + coeff0_12*dmats0[12][20] + coeff0_13*dmats0[13][20] + coeff0_14*dmats0[14][20] + coeff0_15*dmats0[15][20] + coeff0_16*dmats0[16][20] + coeff0_17*dmats0[17][20] + coeff0_18*dmats0[18][20] + coeff0_19*dmats0[19][20] + coeff0_20*dmats0[20][20] + coeff0_21*dmats0[21][20] + coeff0_22*dmats0[22][20] + coeff0_23*dmats0[23][20] + coeff0_24*dmats0[24][20] + coeff0_25*dmats0[25][20] + coeff0_26*dmats0[26][20] + coeff0_27*dmats0[27][20] + coeff0_28*dmats0[28][20] + coeff0_29*dmats0[29][20] + coeff0_30*dmats0[30][20] + coeff0_31*dmats0[31][20] + coeff0_32*dmats0[32][20] + coeff0_33*dmats0[33][20] + coeff0_34*dmats0[34][20];
          new_coeff0_21 = coeff0_0*dmats0[0][21] + coeff0_1*dmats0[1][21] + coeff0_2*dmats0[2][21] + coeff0_3*dmats0[3][21] + coeff0_4*dmats0[4][21] + coeff0_5*dmats0[5][21] + coeff0_6*dmats0[6][21] + coeff0_7*dmats0[7][21] + coeff0_8*dmats0[8][21] + coeff0_9*dmats0[9][21] + coeff0_10*dmats0[10][21] + coeff0_11*dmats0[11][21] + coeff0_12*dmats0[12][21] + coeff0_13*dmats0[13][21] + coeff0_14*dmats0[14][21] + coeff0_15*dmats0[15][21] + coeff0_16*dmats0[16][21] + coeff0_17*dmats0[17][21] + coeff0_18*dmats0[18][21] + coeff0_19*dmats0[19][21] + coeff0_20*dmats0[20][21] + coeff0_21*dmats0[21][21] + coeff0_22*dmats0[22][21] + coeff0_23*dmats0[23][21] + coeff0_24*dmats0[24][21] + coeff0_25*dmats0[25][21] + coeff0_26*dmats0[26][21] + coeff0_27*dmats0[27][21] + coeff0_28*dmats0[28][21] + coeff0_29*dmats0[29][21] + coeff0_30*dmats0[30][21] + coeff0_31*dmats0[31][21] + coeff0_32*dmats0[32][21] + coeff0_33*dmats0[33][21] + coeff0_34*dmats0[34][21];
          new_coeff0_22 = coeff0_0*dmats0[0][22] + coeff0_1*dmats0[1][22] + coeff0_2*dmats0[2][22] + coeff0_3*dmats0[3][22] + coeff0_4*dmats0[4][22] + coeff0_5*dmats0[5][22] + coeff0_6*dmats0[6][22] + coeff0_7*dmats0[7][22] + coeff0_8*dmats0[8][22] + coeff0_9*dmats0[9][22] + coeff0_10*dmats0[10][22] + coeff0_11*dmats0[11][22] + coeff0_12*dmats0[12][22] + coeff0_13*dmats0[13][22] + coeff0_14*dmats0[14][22] + coeff0_15*dmats0[15][22] + coeff0_16*dmats0[16][22] + coeff0_17*dmats0[17][22] + coeff0_18*dmats0[18][22] + coeff0_19*dmats0[19][22] + coeff0_20*dmats0[20][22] + coeff0_21*dmats0[21][22] + coeff0_22*dmats0[22][22] + coeff0_23*dmats0[23][22] + coeff0_24*dmats0[24][22] + coeff0_25*dmats0[25][22] + coeff0_26*dmats0[26][22] + coeff0_27*dmats0[27][22] + coeff0_28*dmats0[28][22] + coeff0_29*dmats0[29][22] + coeff0_30*dmats0[30][22] + coeff0_31*dmats0[31][22] + coeff0_32*dmats0[32][22] + coeff0_33*dmats0[33][22] + coeff0_34*dmats0[34][22];
          new_coeff0_23 = coeff0_0*dmats0[0][23] + coeff0_1*dmats0[1][23] + coeff0_2*dmats0[2][23] + coeff0_3*dmats0[3][23] + coeff0_4*dmats0[4][23] + coeff0_5*dmats0[5][23] + coeff0_6*dmats0[6][23] + coeff0_7*dmats0[7][23] + coeff0_8*dmats0[8][23] + coeff0_9*dmats0[9][23] + coeff0_10*dmats0[10][23] + coeff0_11*dmats0[11][23] + coeff0_12*dmats0[12][23] + coeff0_13*dmats0[13][23] + coeff0_14*dmats0[14][23] + coeff0_15*dmats0[15][23] + coeff0_16*dmats0[16][23] + coeff0_17*dmats0[17][23] + coeff0_18*dmats0[18][23] + coeff0_19*dmats0[19][23] + coeff0_20*dmats0[20][23] + coeff0_21*dmats0[21][23] + coeff0_22*dmats0[22][23] + coeff0_23*dmats0[23][23] + coeff0_24*dmats0[24][23] + coeff0_25*dmats0[25][23] + coeff0_26*dmats0[26][23] + coeff0_27*dmats0[27][23] + coeff0_28*dmats0[28][23] + coeff0_29*dmats0[29][23] + coeff0_30*dmats0[30][23] + coeff0_31*dmats0[31][23] + coeff0_32*dmats0[32][23] + coeff0_33*dmats0[33][23] + coeff0_34*dmats0[34][23];
          new_coeff0_24 = coeff0_0*dmats0[0][24] + coeff0_1*dmats0[1][24] + coeff0_2*dmats0[2][24] + coeff0_3*dmats0[3][24] + coeff0_4*dmats0[4][24] + coeff0_5*dmats0[5][24] + coeff0_6*dmats0[6][24] + coeff0_7*dmats0[7][24] + coeff0_8*dmats0[8][24] + coeff0_9*dmats0[9][24] + coeff0_10*dmats0[10][24] + coeff0_11*dmats0[11][24] + coeff0_12*dmats0[12][24] + coeff0_13*dmats0[13][24] + coeff0_14*dmats0[14][24] + coeff0_15*dmats0[15][24] + coeff0_16*dmats0[16][24] + coeff0_17*dmats0[17][24] + coeff0_18*dmats0[18][24] + coeff0_19*dmats0[19][24] + coeff0_20*dmats0[20][24] + coeff0_21*dmats0[21][24] + coeff0_22*dmats0[22][24] + coeff0_23*dmats0[23][24] + coeff0_24*dmats0[24][24] + coeff0_25*dmats0[25][24] + coeff0_26*dmats0[26][24] + coeff0_27*dmats0[27][24] + coeff0_28*dmats0[28][24] + coeff0_29*dmats0[29][24] + coeff0_30*dmats0[30][24] + coeff0_31*dmats0[31][24] + coeff0_32*dmats0[32][24] + coeff0_33*dmats0[33][24] + coeff0_34*dmats0[34][24];
          new_coeff0_25 = coeff0_0*dmats0[0][25] + coeff0_1*dmats0[1][25] + coeff0_2*dmats0[2][25] + coeff0_3*dmats0[3][25] + coeff0_4*dmats0[4][25] + coeff0_5*dmats0[5][25] + coeff0_6*dmats0[6][25] + coeff0_7*dmats0[7][25] + coeff0_8*dmats0[8][25] + coeff0_9*dmats0[9][25] + coeff0_10*dmats0[10][25] + coeff0_11*dmats0[11][25] + coeff0_12*dmats0[12][25] + coeff0_13*dmats0[13][25] + coeff0_14*dmats0[14][25] + coeff0_15*dmats0[15][25] + coeff0_16*dmats0[16][25] + coeff0_17*dmats0[17][25] + coeff0_18*dmats0[18][25] + coeff0_19*dmats0[19][25] + coeff0_20*dmats0[20][25] + coeff0_21*dmats0[21][25] + coeff0_22*dmats0[22][25] + coeff0_23*dmats0[23][25] + coeff0_24*dmats0[24][25] + coeff0_25*dmats0[25][25] + coeff0_26*dmats0[26][25] + coeff0_27*dmats0[27][25] + coeff0_28*dmats0[28][25] + coeff0_29*dmats0[29][25] + coeff0_30*dmats0[30][25] + coeff0_31*dmats0[31][25] + coeff0_32*dmats0[32][25] + coeff0_33*dmats0[33][25] + coeff0_34*dmats0[34][25];
          new_coeff0_26 = coeff0_0*dmats0[0][26] + coeff0_1*dmats0[1][26] + coeff0_2*dmats0[2][26] + coeff0_3*dmats0[3][26] + coeff0_4*dmats0[4][26] + coeff0_5*dmats0[5][26] + coeff0_6*dmats0[6][26] + coeff0_7*dmats0[7][26] + coeff0_8*dmats0[8][26] + coeff0_9*dmats0[9][26] + coeff0_10*dmats0[10][26] + coeff0_11*dmats0[11][26] + coeff0_12*dmats0[12][26] + coeff0_13*dmats0[13][26] + coeff0_14*dmats0[14][26] + coeff0_15*dmats0[15][26] + coeff0_16*dmats0[16][26] + coeff0_17*dmats0[17][26] + coeff0_18*dmats0[18][26] + coeff0_19*dmats0[19][26] + coeff0_20*dmats0[20][26] + coeff0_21*dmats0[21][26] + coeff0_22*dmats0[22][26] + coeff0_23*dmats0[23][26] + coeff0_24*dmats0[24][26] + coeff0_25*dmats0[25][26] + coeff0_26*dmats0[26][26] + coeff0_27*dmats0[27][26] + coeff0_28*dmats0[28][26] + coeff0_29*dmats0[29][26] + coeff0_30*dmats0[30][26] + coeff0_31*dmats0[31][26] + coeff0_32*dmats0[32][26] + coeff0_33*dmats0[33][26] + coeff0_34*dmats0[34][26];
          new_coeff0_27 = coeff0_0*dmats0[0][27] + coeff0_1*dmats0[1][27] + coeff0_2*dmats0[2][27] + coeff0_3*dmats0[3][27] + coeff0_4*dmats0[4][27] + coeff0_5*dmats0[5][27] + coeff0_6*dmats0[6][27] + coeff0_7*dmats0[7][27] + coeff0_8*dmats0[8][27] + coeff0_9*dmats0[9][27] + coeff0_10*dmats0[10][27] + coeff0_11*dmats0[11][27] + coeff0_12*dmats0[12][27] + coeff0_13*dmats0[13][27] + coeff0_14*dmats0[14][27] + coeff0_15*dmats0[15][27] + coeff0_16*dmats0[16][27] + coeff0_17*dmats0[17][27] + coeff0_18*dmats0[18][27] + coeff0_19*dmats0[19][27] + coeff0_20*dmats0[20][27] + coeff0_21*dmats0[21][27] + coeff0_22*dmats0[22][27] + coeff0_23*dmats0[23][27] + coeff0_24*dmats0[24][27] + coeff0_25*dmats0[25][27] + coeff0_26*dmats0[26][27] + coeff0_27*dmats0[27][27] + coeff0_28*dmats0[28][27] + coeff0_29*dmats0[29][27] + coeff0_30*dmats0[30][27] + coeff0_31*dmats0[31][27] + coeff0_32*dmats0[32][27] + coeff0_33*dmats0[33][27] + coeff0_34*dmats0[34][27];
          new_coeff0_28 = coeff0_0*dmats0[0][28] + coeff0_1*dmats0[1][28] + coeff0_2*dmats0[2][28] + coeff0_3*dmats0[3][28] + coeff0_4*dmats0[4][28] + coeff0_5*dmats0[5][28] + coeff0_6*dmats0[6][28] + coeff0_7*dmats0[7][28] + coeff0_8*dmats0[8][28] + coeff0_9*dmats0[9][28] + coeff0_10*dmats0[10][28] + coeff0_11*dmats0[11][28] + coeff0_12*dmats0[12][28] + coeff0_13*dmats0[13][28] + coeff0_14*dmats0[14][28] + coeff0_15*dmats0[15][28] + coeff0_16*dmats0[16][28] + coeff0_17*dmats0[17][28] + coeff0_18*dmats0[18][28] + coeff0_19*dmats0[19][28] + coeff0_20*dmats0[20][28] + coeff0_21*dmats0[21][28] + coeff0_22*dmats0[22][28] + coeff0_23*dmats0[23][28] + coeff0_24*dmats0[24][28] + coeff0_25*dmats0[25][28] + coeff0_26*dmats0[26][28] + coeff0_27*dmats0[27][28] + coeff0_28*dmats0[28][28] + coeff0_29*dmats0[29][28] + coeff0_30*dmats0[30][28] + coeff0_31*dmats0[31][28] + coeff0_32*dmats0[32][28] + coeff0_33*dmats0[33][28] + coeff0_34*dmats0[34][28];
          new_coeff0_29 = coeff0_0*dmats0[0][29] + coeff0_1*dmats0[1][29] + coeff0_2*dmats0[2][29] + coeff0_3*dmats0[3][29] + coeff0_4*dmats0[4][29] + coeff0_5*dmats0[5][29] + coeff0_6*dmats0[6][29] + coeff0_7*dmats0[7][29] + coeff0_8*dmats0[8][29] + coeff0_9*dmats0[9][29] + coeff0_10*dmats0[10][29] + coeff0_11*dmats0[11][29] + coeff0_12*dmats0[12][29] + coeff0_13*dmats0[13][29] + coeff0_14*dmats0[14][29] + coeff0_15*dmats0[15][29] + coeff0_16*dmats0[16][29] + coeff0_17*dmats0[17][29] + coeff0_18*dmats0[18][29] + coeff0_19*dmats0[19][29] + coeff0_20*dmats0[20][29] + coeff0_21*dmats0[21][29] + coeff0_22*dmats0[22][29] + coeff0_23*dmats0[23][29] + coeff0_24*dmats0[24][29] + coeff0_25*dmats0[25][29] + coeff0_26*dmats0[26][29] + coeff0_27*dmats0[27][29] + coeff0_28*dmats0[28][29] + coeff0_29*dmats0[29][29] + coeff0_30*dmats0[30][29] + coeff0_31*dmats0[31][29] + coeff0_32*dmats0[32][29] + coeff0_33*dmats0[33][29] + coeff0_34*dmats0[34][29];
          new_coeff0_30 = coeff0_0*dmats0[0][30] + coeff0_1*dmats0[1][30] + coeff0_2*dmats0[2][30] + coeff0_3*dmats0[3][30] + coeff0_4*dmats0[4][30] + coeff0_5*dmats0[5][30] + coeff0_6*dmats0[6][30] + coeff0_7*dmats0[7][30] + coeff0_8*dmats0[8][30] + coeff0_9*dmats0[9][30] + coeff0_10*dmats0[10][30] + coeff0_11*dmats0[11][30] + coeff0_12*dmats0[12][30] + coeff0_13*dmats0[13][30] + coeff0_14*dmats0[14][30] + coeff0_15*dmats0[15][30] + coeff0_16*dmats0[16][30] + coeff0_17*dmats0[17][30] + coeff0_18*dmats0[18][30] + coeff0_19*dmats0[19][30] + coeff0_20*dmats0[20][30] + coeff0_21*dmats0[21][30] + coeff0_22*dmats0[22][30] + coeff0_23*dmats0[23][30] + coeff0_24*dmats0[24][30] + coeff0_25*dmats0[25][30] + coeff0_26*dmats0[26][30] + coeff0_27*dmats0[27][30] + coeff0_28*dmats0[28][30] + coeff0_29*dmats0[29][30] + coeff0_30*dmats0[30][30] + coeff0_31*dmats0[31][30] + coeff0_32*dmats0[32][30] + coeff0_33*dmats0[33][30] + coeff0_34*dmats0[34][30];
          new_coeff0_31 = coeff0_0*dmats0[0][31] + coeff0_1*dmats0[1][31] + coeff0_2*dmats0[2][31] + coeff0_3*dmats0[3][31] + coeff0_4*dmats0[4][31] + coeff0_5*dmats0[5][31] + coeff0_6*dmats0[6][31] + coeff0_7*dmats0[7][31] + coeff0_8*dmats0[8][31] + coeff0_9*dmats0[9][31] + coeff0_10*dmats0[10][31] + coeff0_11*dmats0[11][31] + coeff0_12*dmats0[12][31] + coeff0_13*dmats0[13][31] + coeff0_14*dmats0[14][31] + coeff0_15*dmats0[15][31] + coeff0_16*dmats0[16][31] + coeff0_17*dmats0[17][31] + coeff0_18*dmats0[18][31] + coeff0_19*dmats0[19][31] + coeff0_20*dmats0[20][31] + coeff0_21*dmats0[21][31] + coeff0_22*dmats0[22][31] + coeff0_23*dmats0[23][31] + coeff0_24*dmats0[24][31] + coeff0_25*dmats0[25][31] + coeff0_26*dmats0[26][31] + coeff0_27*dmats0[27][31] + coeff0_28*dmats0[28][31] + coeff0_29*dmats0[29][31] + coeff0_30*dmats0[30][31] + coeff0_31*dmats0[31][31] + coeff0_32*dmats0[32][31] + coeff0_33*dmats0[33][31] + coeff0_34*dmats0[34][31];
          new_coeff0_32 = coeff0_0*dmats0[0][32] + coeff0_1*dmats0[1][32] + coeff0_2*dmats0[2][32] + coeff0_3*dmats0[3][32] + coeff0_4*dmats0[4][32] + coeff0_5*dmats0[5][32] + coeff0_6*dmats0[6][32] + coeff0_7*dmats0[7][32] + coeff0_8*dmats0[8][32] + coeff0_9*dmats0[9][32] + coeff0_10*dmats0[10][32] + coeff0_11*dmats0[11][32] + coeff0_12*dmats0[12][32] + coeff0_13*dmats0[13][32] + coeff0_14*dmats0[14][32] + coeff0_15*dmats0[15][32] + coeff0_16*dmats0[16][32] + coeff0_17*dmats0[17][32] + coeff0_18*dmats0[18][32] + coeff0_19*dmats0[19][32] + coeff0_20*dmats0[20][32] + coeff0_21*dmats0[21][32] + coeff0_22*dmats0[22][32] + coeff0_23*dmats0[23][32] + coeff0_24*dmats0[24][32] + coeff0_25*dmats0[25][32] + coeff0_26*dmats0[26][32] + coeff0_27*dmats0[27][32] + coeff0_28*dmats0[28][32] + coeff0_29*dmats0[29][32] + coeff0_30*dmats0[30][32] + coeff0_31*dmats0[31][32] + coeff0_32*dmats0[32][32] + coeff0_33*dmats0[33][32] + coeff0_34*dmats0[34][32];
          new_coeff0_33 = coeff0_0*dmats0[0][33] + coeff0_1*dmats0[1][33] + coeff0_2*dmats0[2][33] + coeff0_3*dmats0[3][33] + coeff0_4*dmats0[4][33] + coeff0_5*dmats0[5][33] + coeff0_6*dmats0[6][33] + coeff0_7*dmats0[7][33] + coeff0_8*dmats0[8][33] + coeff0_9*dmats0[9][33] + coeff0_10*dmats0[10][33] + coeff0_11*dmats0[11][33] + coeff0_12*dmats0[12][33] + coeff0_13*dmats0[13][33] + coeff0_14*dmats0[14][33] + coeff0_15*dmats0[15][33] + coeff0_16*dmats0[16][33] + coeff0_17*dmats0[17][33] + coeff0_18*dmats0[18][33] + coeff0_19*dmats0[19][33] + coeff0_20*dmats0[20][33] + coeff0_21*dmats0[21][33] + coeff0_22*dmats0[22][33] + coeff0_23*dmats0[23][33] + coeff0_24*dmats0[24][33] + coeff0_25*dmats0[25][33] + coeff0_26*dmats0[26][33] + coeff0_27*dmats0[27][33] + coeff0_28*dmats0[28][33] + coeff0_29*dmats0[29][33] + coeff0_30*dmats0[30][33] + coeff0_31*dmats0[31][33] + coeff0_32*dmats0[32][33] + coeff0_33*dmats0[33][33] + coeff0_34*dmats0[34][33];
          new_coeff0_34 = coeff0_0*dmats0[0][34] + coeff0_1*dmats0[1][34] + coeff0_2*dmats0[2][34] + coeff0_3*dmats0[3][34] + coeff0_4*dmats0[4][34] + coeff0_5*dmats0[5][34] + coeff0_6*dmats0[6][34] + coeff0_7*dmats0[7][34] + coeff0_8*dmats0[8][34] + coeff0_9*dmats0[9][34] + coeff0_10*dmats0[10][34] + coeff0_11*dmats0[11][34] + coeff0_12*dmats0[12][34] + coeff0_13*dmats0[13][34] + coeff0_14*dmats0[14][34] + coeff0_15*dmats0[15][34] + coeff0_16*dmats0[16][34] + coeff0_17*dmats0[17][34] + coeff0_18*dmats0[18][34] + coeff0_19*dmats0[19][34] + coeff0_20*dmats0[20][34] + coeff0_21*dmats0[21][34] + coeff0_22*dmats0[22][34] + coeff0_23*dmats0[23][34] + coeff0_24*dmats0[24][34] + coeff0_25*dmats0[25][34] + coeff0_26*dmats0[26][34] + coeff0_27*dmats0[27][34] + coeff0_28*dmats0[28][34] + coeff0_29*dmats0[29][34] + coeff0_30*dmats0[30][34] + coeff0_31*dmats0[31][34] + coeff0_32*dmats0[32][34] + coeff0_33*dmats0[33][34] + coeff0_34*dmats0[34][34];
        }
        if(combinations[deriv_num][j] == 1)
        {
          new_coeff0_0 = coeff0_0*dmats1[0][0] + coeff0_1*dmats1[1][0] + coeff0_2*dmats1[2][0] + coeff0_3*dmats1[3][0] + coeff0_4*dmats1[4][0] + coeff0_5*dmats1[5][0] + coeff0_6*dmats1[6][0] + coeff0_7*dmats1[7][0] + coeff0_8*dmats1[8][0] + coeff0_9*dmats1[9][0] + coeff0_10*dmats1[10][0] + coeff0_11*dmats1[11][0] + coeff0_12*dmats1[12][0] + coeff0_13*dmats1[13][0] + coeff0_14*dmats1[14][0] + coeff0_15*dmats1[15][0] + coeff0_16*dmats1[16][0] + coeff0_17*dmats1[17][0] + coeff0_18*dmats1[18][0] + coeff0_19*dmats1[19][0] + coeff0_20*dmats1[20][0] + coeff0_21*dmats1[21][0] + coeff0_22*dmats1[22][0] + coeff0_23*dmats1[23][0] + coeff0_24*dmats1[24][0] + coeff0_25*dmats1[25][0] + coeff0_26*dmats1[26][0] + coeff0_27*dmats1[27][0] + coeff0_28*dmats1[28][0] + coeff0_29*dmats1[29][0] + coeff0_30*dmats1[30][0] + coeff0_31*dmats1[31][0] + coeff0_32*dmats1[32][0] + coeff0_33*dmats1[33][0] + coeff0_34*dmats1[34][0];
          new_coeff0_1 = coeff0_0*dmats1[0][1] + coeff0_1*dmats1[1][1] + coeff0_2*dmats1[2][1] + coeff0_3*dmats1[3][1] + coeff0_4*dmats1[4][1] + coeff0_5*dmats1[5][1] + coeff0_6*dmats1[6][1] + coeff0_7*dmats1[7][1] + coeff0_8*dmats1[8][1] + coeff0_9*dmats1[9][1] + coeff0_10*dmats1[10][1] + coeff0_11*dmats1[11][1] + coeff0_12*dmats1[12][1] + coeff0_13*dmats1[13][1] + coeff0_14*dmats1[14][1] + coeff0_15*dmats1[15][1] + coeff0_16*dmats1[16][1] + coeff0_17*dmats1[17][1] + coeff0_18*dmats1[18][1] + coeff0_19*dmats1[19][1] + coeff0_20*dmats1[20][1] + coeff0_21*dmats1[21][1] + coeff0_22*dmats1[22][1] + coeff0_23*dmats1[23][1] + coeff0_24*dmats1[24][1] + coeff0_25*dmats1[25][1] + coeff0_26*dmats1[26][1] + coeff0_27*dmats1[27][1] + coeff0_28*dmats1[28][1] + coeff0_29*dmats1[29][1] + coeff0_30*dmats1[30][1] + coeff0_31*dmats1[31][1] + coeff0_32*dmats1[32][1] + coeff0_33*dmats1[33][1] + coeff0_34*dmats1[34][1];
          new_coeff0_2 = coeff0_0*dmats1[0][2] + coeff0_1*dmats1[1][2] + coeff0_2*dmats1[2][2] + coeff0_3*dmats1[3][2] + coeff0_4*dmats1[4][2] + coeff0_5*dmats1[5][2] + coeff0_6*dmats1[6][2] + coeff0_7*dmats1[7][2] + coeff0_8*dmats1[8][2] + coeff0_9*dmats1[9][2] + coeff0_10*dmats1[10][2] + coeff0_11*dmats1[11][2] + coeff0_12*dmats1[12][2] + coeff0_13*dmats1[13][2] + coeff0_14*dmats1[14][2] + coeff0_15*dmats1[15][2] + coeff0_16*dmats1[16][2] + coeff0_17*dmats1[17][2] + coeff0_18*dmats1[18][2] + coeff0_19*dmats1[19][2] + coeff0_20*dmats1[20][2] + coeff0_21*dmats1[21][2] + coeff0_22*dmats1[22][2] + coeff0_23*dmats1[23][2] + coeff0_24*dmats1[24][2] + coeff0_25*dmats1[25][2] + coeff0_26*dmats1[26][2] + coeff0_27*dmats1[27][2] + coeff0_28*dmats1[28][2] + coeff0_29*dmats1[29][2] + coeff0_30*dmats1[30][2] + coeff0_31*dmats1[31][2] + coeff0_32*dmats1[32][2] + coeff0_33*dmats1[33][2] + coeff0_34*dmats1[34][2];
          new_coeff0_3 = coeff0_0*dmats1[0][3] + coeff0_1*dmats1[1][3] + coeff0_2*dmats1[2][3] + coeff0_3*dmats1[3][3] + coeff0_4*dmats1[4][3] + coeff0_5*dmats1[5][3] + coeff0_6*dmats1[6][3] + coeff0_7*dmats1[7][3] + coeff0_8*dmats1[8][3] + coeff0_9*dmats1[9][3] + coeff0_10*dmats1[10][3] + coeff0_11*dmats1[11][3] + coeff0_12*dmats1[12][3] + coeff0_13*dmats1[13][3] + coeff0_14*dmats1[14][3] + coeff0_15*dmats1[15][3] + coeff0_16*dmats1[16][3] + coeff0_17*dmats1[17][3] + coeff0_18*dmats1[18][3] + coeff0_19*dmats1[19][3] + coeff0_20*dmats1[20][3] + coeff0_21*dmats1[21][3] + coeff0_22*dmats1[22][3] + coeff0_23*dmats1[23][3] + coeff0_24*dmats1[24][3] + coeff0_25*dmats1[25][3] + coeff0_26*dmats1[26][3] + coeff0_27*dmats1[27][3] + coeff0_28*dmats1[28][3] + coeff0_29*dmats1[29][3] + coeff0_30*dmats1[30][3] + coeff0_31*dmats1[31][3] + coeff0_32*dmats1[32][3] + coeff0_33*dmats1[33][3] + coeff0_34*dmats1[34][3];
          new_coeff0_4 = coeff0_0*dmats1[0][4] + coeff0_1*dmats1[1][4] + coeff0_2*dmats1[2][4] + coeff0_3*dmats1[3][4] + coeff0_4*dmats1[4][4] + coeff0_5*dmats1[5][4] + coeff0_6*dmats1[6][4] + coeff0_7*dmats1[7][4] + coeff0_8*dmats1[8][4] + coeff0_9*dmats1[9][4] + coeff0_10*dmats1[10][4] + coeff0_11*dmats1[11][4] + coeff0_12*dmats1[12][4] + coeff0_13*dmats1[13][4] + coeff0_14*dmats1[14][4] + coeff0_15*dmats1[15][4] + coeff0_16*dmats1[16][4] + coeff0_17*dmats1[17][4] + coeff0_18*dmats1[18][4] + coeff0_19*dmats1[19][4] + coeff0_20*dmats1[20][4] + coeff0_21*dmats1[21][4] + coeff0_22*dmats1[22][4] + coeff0_23*dmats1[23][4] + coeff0_24*dmats1[24][4] + coeff0_25*dmats1[25][4] + coeff0_26*dmats1[26][4] + coeff0_27*dmats1[27][4] + coeff0_28*dmats1[28][4] + coeff0_29*dmats1[29][4] + coeff0_30*dmats1[30][4] + coeff0_31*dmats1[31][4] + coeff0_32*dmats1[32][4] + coeff0_33*dmats1[33][4] + coeff0_34*dmats1[34][4];
          new_coeff0_5 = coeff0_0*dmats1[0][5] + coeff0_1*dmats1[1][5] + coeff0_2*dmats1[2][5] + coeff0_3*dmats1[3][5] + coeff0_4*dmats1[4][5] + coeff0_5*dmats1[5][5] + coeff0_6*dmats1[6][5] + coeff0_7*dmats1[7][5] + coeff0_8*dmats1[8][5] + coeff0_9*dmats1[9][5] + coeff0_10*dmats1[10][5] + coeff0_11*dmats1[11][5] + coeff0_12*dmats1[12][5] + coeff0_13*dmats1[13][5] + coeff0_14*dmats1[14][5] + coeff0_15*dmats1[15][5] + coeff0_16*dmats1[16][5] + coeff0_17*dmats1[17][5] + coeff0_18*dmats1[18][5] + coeff0_19*dmats1[19][5] + coeff0_20*dmats1[20][5] + coeff0_21*dmats1[21][5] + coeff0_22*dmats1[22][5] + coeff0_23*dmats1[23][5] + coeff0_24*dmats1[24][5] + coeff0_25*dmats1[25][5] + coeff0_26*dmats1[26][5] + coeff0_27*dmats1[27][5] + coeff0_28*dmats1[28][5] + coeff0_29*dmats1[29][5] + coeff0_30*dmats1[30][5] + coeff0_31*dmats1[31][5] + coeff0_32*dmats1[32][5] + coeff0_33*dmats1[33][5] + coeff0_34*dmats1[34][5];
          new_coeff0_6 = coeff0_0*dmats1[0][6] + coeff0_1*dmats1[1][6] + coeff0_2*dmats1[2][6] + coeff0_3*dmats1[3][6] + coeff0_4*dmats1[4][6] + coeff0_5*dmats1[5][6] + coeff0_6*dmats1[6][6] + coeff0_7*dmats1[7][6] + coeff0_8*dmats1[8][6] + coeff0_9*dmats1[9][6] + coeff0_10*dmats1[10][6] + coeff0_11*dmats1[11][6] + coeff0_12*dmats1[12][6] + coeff0_13*dmats1[13][6] + coeff0_14*dmats1[14][6] + coeff0_15*dmats1[15][6] + coeff0_16*dmats1[16][6] + coeff0_17*dmats1[17][6] + coeff0_18*dmats1[18][6] + coeff0_19*dmats1[19][6] + coeff0_20*dmats1[20][6] + coeff0_21*dmats1[21][6] + coeff0_22*dmats1[22][6] + coeff0_23*dmats1[23][6] + coeff0_24*dmats1[24][6] + coeff0_25*dmats1[25][6] + coeff0_26*dmats1[26][6] + coeff0_27*dmats1[27][6] + coeff0_28*dmats1[28][6] + coeff0_29*dmats1[29][6] + coeff0_30*dmats1[30][6] + coeff0_31*dmats1[31][6] + coeff0_32*dmats1[32][6] + coeff0_33*dmats1[33][6] + coeff0_34*dmats1[34][6];
          new_coeff0_7 = coeff0_0*dmats1[0][7] + coeff0_1*dmats1[1][7] + coeff0_2*dmats1[2][7] + coeff0_3*dmats1[3][7] + coeff0_4*dmats1[4][7] + coeff0_5*dmats1[5][7] + coeff0_6*dmats1[6][7] + coeff0_7*dmats1[7][7] + coeff0_8*dmats1[8][7] + coeff0_9*dmats1[9][7] + coeff0_10*dmats1[10][7] + coeff0_11*dmats1[11][7] + coeff0_12*dmats1[12][7] + coeff0_13*dmats1[13][7] + coeff0_14*dmats1[14][7] + coeff0_15*dmats1[15][7] + coeff0_16*dmats1[16][7] + coeff0_17*dmats1[17][7] + coeff0_18*dmats1[18][7] + coeff0_19*dmats1[19][7] + coeff0_20*dmats1[20][7] + coeff0_21*dmats1[21][7] + coeff0_22*dmats1[22][7] + coeff0_23*dmats1[23][7] + coeff0_24*dmats1[24][7] + coeff0_25*dmats1[25][7] + coeff0_26*dmats1[26][7] + coeff0_27*dmats1[27][7] + coeff0_28*dmats1[28][7] + coeff0_29*dmats1[29][7] + coeff0_30*dmats1[30][7] + coeff0_31*dmats1[31][7] + coeff0_32*dmats1[32][7] + coeff0_33*dmats1[33][7] + coeff0_34*dmats1[34][7];
          new_coeff0_8 = coeff0_0*dmats1[0][8] + coeff0_1*dmats1[1][8] + coeff0_2*dmats1[2][8] + coeff0_3*dmats1[3][8] + coeff0_4*dmats1[4][8] + coeff0_5*dmats1[5][8] + coeff0_6*dmats1[6][8] + coeff0_7*dmats1[7][8] + coeff0_8*dmats1[8][8] + coeff0_9*dmats1[9][8] + coeff0_10*dmats1[10][8] + coeff0_11*dmats1[11][8] + coeff0_12*dmats1[12][8] + coeff0_13*dmats1[13][8] + coeff0_14*dmats1[14][8] + coeff0_15*dmats1[15][8] + coeff0_16*dmats1[16][8] + coeff0_17*dmats1[17][8] + coeff0_18*dmats1[18][8] + coeff0_19*dmats1[19][8] + coeff0_20*dmats1[20][8] + coeff0_21*dmats1[21][8] + coeff0_22*dmats1[22][8] + coeff0_23*dmats1[23][8] + coeff0_24*dmats1[24][8] + coeff0_25*dmats1[25][8] + coeff0_26*dmats1[26][8] + coeff0_27*dmats1[27][8] + coeff0_28*dmats1[28][8] + coeff0_29*dmats1[29][8] + coeff0_30*dmats1[30][8] + coeff0_31*dmats1[31][8] + coeff0_32*dmats1[32][8] + coeff0_33*dmats1[33][8] + coeff0_34*dmats1[34][8];
          new_coeff0_9 = coeff0_0*dmats1[0][9] + coeff0_1*dmats1[1][9] + coeff0_2*dmats1[2][9] + coeff0_3*dmats1[3][9] + coeff0_4*dmats1[4][9] + coeff0_5*dmats1[5][9] + coeff0_6*dmats1[6][9] + coeff0_7*dmats1[7][9] + coeff0_8*dmats1[8][9] + coeff0_9*dmats1[9][9] + coeff0_10*dmats1[10][9] + coeff0_11*dmats1[11][9] + coeff0_12*dmats1[12][9] + coeff0_13*dmats1[13][9] + coeff0_14*dmats1[14][9] + coeff0_15*dmats1[15][9] + coeff0_16*dmats1[16][9] + coeff0_17*dmats1[17][9] + coeff0_18*dmats1[18][9] + coeff0_19*dmats1[19][9] + coeff0_20*dmats1[20][9] + coeff0_21*dmats1[21][9] + coeff0_22*dmats1[22][9] + coeff0_23*dmats1[23][9] + coeff0_24*dmats1[24][9] + coeff0_25*dmats1[25][9] + coeff0_26*dmats1[26][9] + coeff0_27*dmats1[27][9] + coeff0_28*dmats1[28][9] + coeff0_29*dmats1[29][9] + coeff0_30*dmats1[30][9] + coeff0_31*dmats1[31][9] + coeff0_32*dmats1[32][9] + coeff0_33*dmats1[33][9] + coeff0_34*dmats1[34][9];
          new_coeff0_10 = coeff0_0*dmats1[0][10] + coeff0_1*dmats1[1][10] + coeff0_2*dmats1[2][10] + coeff0_3*dmats1[3][10] + coeff0_4*dmats1[4][10] + coeff0_5*dmats1[5][10] + coeff0_6*dmats1[6][10] + coeff0_7*dmats1[7][10] + coeff0_8*dmats1[8][10] + coeff0_9*dmats1[9][10] + coeff0_10*dmats1[10][10] + coeff0_11*dmats1[11][10] + coeff0_12*dmats1[12][10] + coeff0_13*dmats1[13][10] + coeff0_14*dmats1[14][10] + coeff0_15*dmats1[15][10] + coeff0_16*dmats1[16][10] + coeff0_17*dmats1[17][10] + coeff0_18*dmats1[18][10] + coeff0_19*dmats1[19][10] + coeff0_20*dmats1[20][10] + coeff0_21*dmats1[21][10] + coeff0_22*dmats1[22][10] + coeff0_23*dmats1[23][10] + coeff0_24*dmats1[24][10] + coeff0_25*dmats1[25][10] + coeff0_26*dmats1[26][10] + coeff0_27*dmats1[27][10] + coeff0_28*dmats1[28][10] + coeff0_29*dmats1[29][10] + coeff0_30*dmats1[30][10] + coeff0_31*dmats1[31][10] + coeff0_32*dmats1[32][10] + coeff0_33*dmats1[33][10] + coeff0_34*dmats1[34][10];
          new_coeff0_11 = coeff0_0*dmats1[0][11] + coeff0_1*dmats1[1][11] + coeff0_2*dmats1[2][11] + coeff0_3*dmats1[3][11] + coeff0_4*dmats1[4][11] + coeff0_5*dmats1[5][11] + coeff0_6*dmats1[6][11] + coeff0_7*dmats1[7][11] + coeff0_8*dmats1[8][11] + coeff0_9*dmats1[9][11] + coeff0_10*dmats1[10][11] + coeff0_11*dmats1[11][11] + coeff0_12*dmats1[12][11] + coeff0_13*dmats1[13][11] + coeff0_14*dmats1[14][11] + coeff0_15*dmats1[15][11] + coeff0_16*dmats1[16][11] + coeff0_17*dmats1[17][11] + coeff0_18*dmats1[18][11] + coeff0_19*dmats1[19][11] + coeff0_20*dmats1[20][11] + coeff0_21*dmats1[21][11] + coeff0_22*dmats1[22][11] + coeff0_23*dmats1[23][11] + coeff0_24*dmats1[24][11] + coeff0_25*dmats1[25][11] + coeff0_26*dmats1[26][11] + coeff0_27*dmats1[27][11] + coeff0_28*dmats1[28][11] + coeff0_29*dmats1[29][11] + coeff0_30*dmats1[30][11] + coeff0_31*dmats1[31][11] + coeff0_32*dmats1[32][11] + coeff0_33*dmats1[33][11] + coeff0_34*dmats1[34][11];
          new_coeff0_12 = coeff0_0*dmats1[0][12] + coeff0_1*dmats1[1][12] + coeff0_2*dmats1[2][12] + coeff0_3*dmats1[3][12] + coeff0_4*dmats1[4][12] + coeff0_5*dmats1[5][12] + coeff0_6*dmats1[6][12] + coeff0_7*dmats1[7][12] + coeff0_8*dmats1[8][12] + coeff0_9*dmats1[9][12] + coeff0_10*dmats1[10][12] + coeff0_11*dmats1[11][12] + coeff0_12*dmats1[12][12] + coeff0_13*dmats1[13][12] + coeff0_14*dmats1[14][12] + coeff0_15*dmats1[15][12] + coeff0_16*dmats1[16][12] + coeff0_17*dmats1[17][12] + coeff0_18*dmats1[18][12] + coeff0_19*dmats1[19][12] + coeff0_20*dmats1[20][12] + coeff0_21*dmats1[21][12] + coeff0_22*dmats1[22][12] + coeff0_23*dmats1[23][12] + coeff0_24*dmats1[24][12] + coeff0_25*dmats1[25][12] + coeff0_26*dmats1[26][12] + coeff0_27*dmats1[27][12] + coeff0_28*dmats1[28][12] + coeff0_29*dmats1[29][12] + coeff0_30*dmats1[30][12] + coeff0_31*dmats1[31][12] + coeff0_32*dmats1[32][12] + coeff0_33*dmats1[33][12] + coeff0_34*dmats1[34][12];
          new_coeff0_13 = coeff0_0*dmats1[0][13] + coeff0_1*dmats1[1][13] + coeff0_2*dmats1[2][13] + coeff0_3*dmats1[3][13] + coeff0_4*dmats1[4][13] + coeff0_5*dmats1[5][13] + coeff0_6*dmats1[6][13] + coeff0_7*dmats1[7][13] + coeff0_8*dmats1[8][13] + coeff0_9*dmats1[9][13] + coeff0_10*dmats1[10][13] + coeff0_11*dmats1[11][13] + coeff0_12*dmats1[12][13] + coeff0_13*dmats1[13][13] + coeff0_14*dmats1[14][13] + coeff0_15*dmats1[15][13] + coeff0_16*dmats1[16][13] + coeff0_17*dmats1[17][13] + coeff0_18*dmats1[18][13] + coeff0_19*dmats1[19][13] + coeff0_20*dmats1[20][13] + coeff0_21*dmats1[21][13] + coeff0_22*dmats1[22][13] + coeff0_23*dmats1[23][13] + coeff0_24*dmats1[24][13] + coeff0_25*dmats1[25][13] + coeff0_26*dmats1[26][13] + coeff0_27*dmats1[27][13] + coeff0_28*dmats1[28][13] + coeff0_29*dmats1[29][13] + coeff0_30*dmats1[30][13] + coeff0_31*dmats1[31][13] + coeff0_32*dmats1[32][13] + coeff0_33*dmats1[33][13] + coeff0_34*dmats1[34][13];
          new_coeff0_14 = coeff0_0*dmats1[0][14] + coeff0_1*dmats1[1][14] + coeff0_2*dmats1[2][14] + coeff0_3*dmats1[3][14] + coeff0_4*dmats1[4][14] + coeff0_5*dmats1[5][14] + coeff0_6*dmats1[6][14] + coeff0_7*dmats1[7][14] + coeff0_8*dmats1[8][14] + coeff0_9*dmats1[9][14] + coeff0_10*dmats1[10][14] + coeff0_11*dmats1[11][14] + coeff0_12*dmats1[12][14] + coeff0_13*dmats1[13][14] + coeff0_14*dmats1[14][14] + coeff0_15*dmats1[15][14] + coeff0_16*dmats1[16][14] + coeff0_17*dmats1[17][14] + coeff0_18*dmats1[18][14] + coeff0_19*dmats1[19][14] + coeff0_20*dmats1[20][14] + coeff0_21*dmats1[21][14] + coeff0_22*dmats1[22][14] + coeff0_23*dmats1[23][14] + coeff0_24*dmats1[24][14] + coeff0_25*dmats1[25][14] + coeff0_26*dmats1[26][14] + coeff0_27*dmats1[27][14] + coeff0_28*dmats1[28][14] + coeff0_29*dmats1[29][14] + coeff0_30*dmats1[30][14] + coeff0_31*dmats1[31][14] + coeff0_32*dmats1[32][14] + coeff0_33*dmats1[33][14] + coeff0_34*dmats1[34][14];
          new_coeff0_15 = coeff0_0*dmats1[0][15] + coeff0_1*dmats1[1][15] + coeff0_2*dmats1[2][15] + coeff0_3*dmats1[3][15] + coeff0_4*dmats1[4][15] + coeff0_5*dmats1[5][15] + coeff0_6*dmats1[6][15] + coeff0_7*dmats1[7][15] + coeff0_8*dmats1[8][15] + coeff0_9*dmats1[9][15] + coeff0_10*dmats1[10][15] + coeff0_11*dmats1[11][15] + coeff0_12*dmats1[12][15] + coeff0_13*dmats1[13][15] + coeff0_14*dmats1[14][15] + coeff0_15*dmats1[15][15] + coeff0_16*dmats1[16][15] + coeff0_17*dmats1[17][15] + coeff0_18*dmats1[18][15] + coeff0_19*dmats1[19][15] + coeff0_20*dmats1[20][15] + coeff0_21*dmats1[21][15] + coeff0_22*dmats1[22][15] + coeff0_23*dmats1[23][15] + coeff0_24*dmats1[24][15] + coeff0_25*dmats1[25][15] + coeff0_26*dmats1[26][15] + coeff0_27*dmats1[27][15] + coeff0_28*dmats1[28][15] + coeff0_29*dmats1[29][15] + coeff0_30*dmats1[30][15] + coeff0_31*dmats1[31][15] + coeff0_32*dmats1[32][15] + coeff0_33*dmats1[33][15] + coeff0_34*dmats1[34][15];
          new_coeff0_16 = coeff0_0*dmats1[0][16] + coeff0_1*dmats1[1][16] + coeff0_2*dmats1[2][16] + coeff0_3*dmats1[3][16] + coeff0_4*dmats1[4][16] + coeff0_5*dmats1[5][16] + coeff0_6*dmats1[6][16] + coeff0_7*dmats1[7][16] + coeff0_8*dmats1[8][16] + coeff0_9*dmats1[9][16] + coeff0_10*dmats1[10][16] + coeff0_11*dmats1[11][16] + coeff0_12*dmats1[12][16] + coeff0_13*dmats1[13][16] + coeff0_14*dmats1[14][16] + coeff0_15*dmats1[15][16] + coeff0_16*dmats1[16][16] + coeff0_17*dmats1[17][16] + coeff0_18*dmats1[18][16] + coeff0_19*dmats1[19][16] + coeff0_20*dmats1[20][16] + coeff0_21*dmats1[21][16] + coeff0_22*dmats1[22][16] + coeff0_23*dmats1[23][16] + coeff0_24*dmats1[24][16] + coeff0_25*dmats1[25][16] + coeff0_26*dmats1[26][16] + coeff0_27*dmats1[27][16] + coeff0_28*dmats1[28][16] + coeff0_29*dmats1[29][16] + coeff0_30*dmats1[30][16] + coeff0_31*dmats1[31][16] + coeff0_32*dmats1[32][16] + coeff0_33*dmats1[33][16] + coeff0_34*dmats1[34][16];
          new_coeff0_17 = coeff0_0*dmats1[0][17] + coeff0_1*dmats1[1][17] + coeff0_2*dmats1[2][17] + coeff0_3*dmats1[3][17] + coeff0_4*dmats1[4][17] + coeff0_5*dmats1[5][17] + coeff0_6*dmats1[6][17] + coeff0_7*dmats1[7][17] + coeff0_8*dmats1[8][17] + coeff0_9*dmats1[9][17] + coeff0_10*dmats1[10][17] + coeff0_11*dmats1[11][17] + coeff0_12*dmats1[12][17] + coeff0_13*dmats1[13][17] + coeff0_14*dmats1[14][17] + coeff0_15*dmats1[15][17] + coeff0_16*dmats1[16][17] + coeff0_17*dmats1[17][17] + coeff0_18*dmats1[18][17] + coeff0_19*dmats1[19][17] + coeff0_20*dmats1[20][17] + coeff0_21*dmats1[21][17] + coeff0_22*dmats1[22][17] + coeff0_23*dmats1[23][17] + coeff0_24*dmats1[24][17] + coeff0_25*dmats1[25][17] + coeff0_26*dmats1[26][17] + coeff0_27*dmats1[27][17] + coeff0_28*dmats1[28][17] + coeff0_29*dmats1[29][17] + coeff0_30*dmats1[30][17] + coeff0_31*dmats1[31][17] + coeff0_32*dmats1[32][17] + coeff0_33*dmats1[33][17] + coeff0_34*dmats1[34][17];
          new_coeff0_18 = coeff0_0*dmats1[0][18] + coeff0_1*dmats1[1][18] + coeff0_2*dmats1[2][18] + coeff0_3*dmats1[3][18] + coeff0_4*dmats1[4][18] + coeff0_5*dmats1[5][18] + coeff0_6*dmats1[6][18] + coeff0_7*dmats1[7][18] + coeff0_8*dmats1[8][18] + coeff0_9*dmats1[9][18] + coeff0_10*dmats1[10][18] + coeff0_11*dmats1[11][18] + coeff0_12*dmats1[12][18] + coeff0_13*dmats1[13][18] + coeff0_14*dmats1[14][18] + coeff0_15*dmats1[15][18] + coeff0_16*dmats1[16][18] + coeff0_17*dmats1[17][18] + coeff0_18*dmats1[18][18] + coeff0_19*dmats1[19][18] + coeff0_20*dmats1[20][18] + coeff0_21*dmats1[21][18] + coeff0_22*dmats1[22][18] + coeff0_23*dmats1[23][18] + coeff0_24*dmats1[24][18] + coeff0_25*dmats1[25][18] + coeff0_26*dmats1[26][18] + coeff0_27*dmats1[27][18] + coeff0_28*dmats1[28][18] + coeff0_29*dmats1[29][18] + coeff0_30*dmats1[30][18] + coeff0_31*dmats1[31][18] + coeff0_32*dmats1[32][18] + coeff0_33*dmats1[33][18] + coeff0_34*dmats1[34][18];
          new_coeff0_19 = coeff0_0*dmats1[0][19] + coeff0_1*dmats1[1][19] + coeff0_2*dmats1[2][19] + coeff0_3*dmats1[3][19] + coeff0_4*dmats1[4][19] + coeff0_5*dmats1[5][19] + coeff0_6*dmats1[6][19] + coeff0_7*dmats1[7][19] + coeff0_8*dmats1[8][19] + coeff0_9*dmats1[9][19] + coeff0_10*dmats1[10][19] + coeff0_11*dmats1[11][19] + coeff0_12*dmats1[12][19] + coeff0_13*dmats1[13][19] + coeff0_14*dmats1[14][19] + coeff0_15*dmats1[15][19] + coeff0_16*dmats1[16][19] + coeff0_17*dmats1[17][19] + coeff0_18*dmats1[18][19] + coeff0_19*dmats1[19][19] + coeff0_20*dmats1[20][19] + coeff0_21*dmats1[21][19] + coeff0_22*dmats1[22][19] + coeff0_23*dmats1[23][19] + coeff0_24*dmats1[24][19] + coeff0_25*dmats1[25][19] + coeff0_26*dmats1[26][19] + coeff0_27*dmats1[27][19] + coeff0_28*dmats1[28][19] + coeff0_29*dmats1[29][19] + coeff0_30*dmats1[30][19] + coeff0_31*dmats1[31][19] + coeff0_32*dmats1[32][19] + coeff0_33*dmats1[33][19] + coeff0_34*dmats1[34][19];
          new_coeff0_20 = coeff0_0*dmats1[0][20] + coeff0_1*dmats1[1][20] + coeff0_2*dmats1[2][20] + coeff0_3*dmats1[3][20] + coeff0_4*dmats1[4][20] + coeff0_5*dmats1[5][20] + coeff0_6*dmats1[6][20] + coeff0_7*dmats1[7][20] + coeff0_8*dmats1[8][20] + coeff0_9*dmats1[9][20] + coeff0_10*dmats1[10][20] + coeff0_11*dmats1[11][20] + coeff0_12*dmats1[12][20] + coeff0_13*dmats1[13][20] + coeff0_14*dmats1[14][20] + coeff0_15*dmats1[15][20] + coeff0_16*dmats1[16][20] + coeff0_17*dmats1[17][20] + coeff0_18*dmats1[18][20] + coeff0_19*dmats1[19][20] + coeff0_20*dmats1[20][20] + coeff0_21*dmats1[21][20] + coeff0_22*dmats1[22][20] + coeff0_23*dmats1[23][20] + coeff0_24*dmats1[24][20] + coeff0_25*dmats1[25][20] + coeff0_26*dmats1[26][20] + coeff0_27*dmats1[27][20] + coeff0_28*dmats1[28][20] + coeff0_29*dmats1[29][20] + coeff0_30*dmats1[30][20] + coeff0_31*dmats1[31][20] + coeff0_32*dmats1[32][20] + coeff0_33*dmats1[33][20] + coeff0_34*dmats1[34][20];
          new_coeff0_21 = coeff0_0*dmats1[0][21] + coeff0_1*dmats1[1][21] + coeff0_2*dmats1[2][21] + coeff0_3*dmats1[3][21] + coeff0_4*dmats1[4][21] + coeff0_5*dmats1[5][21] + coeff0_6*dmats1[6][21] + coeff0_7*dmats1[7][21] + coeff0_8*dmats1[8][21] + coeff0_9*dmats1[9][21] + coeff0_10*dmats1[10][21] + coeff0_11*dmats1[11][21] + coeff0_12*dmats1[12][21] + coeff0_13*dmats1[13][21] + coeff0_14*dmats1[14][21] + coeff0_15*dmats1[15][21] + coeff0_16*dmats1[16][21] + coeff0_17*dmats1[17][21] + coeff0_18*dmats1[18][21] + coeff0_19*dmats1[19][21] + coeff0_20*dmats1[20][21] + coeff0_21*dmats1[21][21] + coeff0_22*dmats1[22][21] + coeff0_23*dmats1[23][21] + coeff0_24*dmats1[24][21] + coeff0_25*dmats1[25][21] + coeff0_26*dmats1[26][21] + coeff0_27*dmats1[27][21] + coeff0_28*dmats1[28][21] + coeff0_29*dmats1[29][21] + coeff0_30*dmats1[30][21] + coeff0_31*dmats1[31][21] + coeff0_32*dmats1[32][21] + coeff0_33*dmats1[33][21] + coeff0_34*dmats1[34][21];
          new_coeff0_22 = coeff0_0*dmats1[0][22] + coeff0_1*dmats1[1][22] + coeff0_2*dmats1[2][22] + coeff0_3*dmats1[3][22] + coeff0_4*dmats1[4][22] + coeff0_5*dmats1[5][22] + coeff0_6*dmats1[6][22] + coeff0_7*dmats1[7][22] + coeff0_8*dmats1[8][22] + coeff0_9*dmats1[9][22] + coeff0_10*dmats1[10][22] + coeff0_11*dmats1[11][22] + coeff0_12*dmats1[12][22] + coeff0_13*dmats1[13][22] + coeff0_14*dmats1[14][22] + coeff0_15*dmats1[15][22] + coeff0_16*dmats1[16][22] + coeff0_17*dmats1[17][22] + coeff0_18*dmats1[18][22] + coeff0_19*dmats1[19][22] + coeff0_20*dmats1[20][22] + coeff0_21*dmats1[21][22] + coeff0_22*dmats1[22][22] + coeff0_23*dmats1[23][22] + coeff0_24*dmats1[24][22] + coeff0_25*dmats1[25][22] + coeff0_26*dmats1[26][22] + coeff0_27*dmats1[27][22] + coeff0_28*dmats1[28][22] + coeff0_29*dmats1[29][22] + coeff0_30*dmats1[30][22] + coeff0_31*dmats1[31][22] + coeff0_32*dmats1[32][22] + coeff0_33*dmats1[33][22] + coeff0_34*dmats1[34][22];
          new_coeff0_23 = coeff0_0*dmats1[0][23] + coeff0_1*dmats1[1][23] + coeff0_2*dmats1[2][23] + coeff0_3*dmats1[3][23] + coeff0_4*dmats1[4][23] + coeff0_5*dmats1[5][23] + coeff0_6*dmats1[6][23] + coeff0_7*dmats1[7][23] + coeff0_8*dmats1[8][23] + coeff0_9*dmats1[9][23] + coeff0_10*dmats1[10][23] + coeff0_11*dmats1[11][23] + coeff0_12*dmats1[12][23] + coeff0_13*dmats1[13][23] + coeff0_14*dmats1[14][23] + coeff0_15*dmats1[15][23] + coeff0_16*dmats1[16][23] + coeff0_17*dmats1[17][23] + coeff0_18*dmats1[18][23] + coeff0_19*dmats1[19][23] + coeff0_20*dmats1[20][23] + coeff0_21*dmats1[21][23] + coeff0_22*dmats1[22][23] + coeff0_23*dmats1[23][23] + coeff0_24*dmats1[24][23] + coeff0_25*dmats1[25][23] + coeff0_26*dmats1[26][23] + coeff0_27*dmats1[27][23] + coeff0_28*dmats1[28][23] + coeff0_29*dmats1[29][23] + coeff0_30*dmats1[30][23] + coeff0_31*dmats1[31][23] + coeff0_32*dmats1[32][23] + coeff0_33*dmats1[33][23] + coeff0_34*dmats1[34][23];
          new_coeff0_24 = coeff0_0*dmats1[0][24] + coeff0_1*dmats1[1][24] + coeff0_2*dmats1[2][24] + coeff0_3*dmats1[3][24] + coeff0_4*dmats1[4][24] + coeff0_5*dmats1[5][24] + coeff0_6*dmats1[6][24] + coeff0_7*dmats1[7][24] + coeff0_8*dmats1[8][24] + coeff0_9*dmats1[9][24] + coeff0_10*dmats1[10][24] + coeff0_11*dmats1[11][24] + coeff0_12*dmats1[12][24] + coeff0_13*dmats1[13][24] + coeff0_14*dmats1[14][24] + coeff0_15*dmats1[15][24] + coeff0_16*dmats1[16][24] + coeff0_17*dmats1[17][24] + coeff0_18*dmats1[18][24] + coeff0_19*dmats1[19][24] + coeff0_20*dmats1[20][24] + coeff0_21*dmats1[21][24] + coeff0_22*dmats1[22][24] + coeff0_23*dmats1[23][24] + coeff0_24*dmats1[24][24] + coeff0_25*dmats1[25][24] + coeff0_26*dmats1[26][24] + coeff0_27*dmats1[27][24] + coeff0_28*dmats1[28][24] + coeff0_29*dmats1[29][24] + coeff0_30*dmats1[30][24] + coeff0_31*dmats1[31][24] + coeff0_32*dmats1[32][24] + coeff0_33*dmats1[33][24] + coeff0_34*dmats1[34][24];
          new_coeff0_25 = coeff0_0*dmats1[0][25] + coeff0_1*dmats1[1][25] + coeff0_2*dmats1[2][25] + coeff0_3*dmats1[3][25] + coeff0_4*dmats1[4][25] + coeff0_5*dmats1[5][25] + coeff0_6*dmats1[6][25] + coeff0_7*dmats1[7][25] + coeff0_8*dmats1[8][25] + coeff0_9*dmats1[9][25] + coeff0_10*dmats1[10][25] + coeff0_11*dmats1[11][25] + coeff0_12*dmats1[12][25] + coeff0_13*dmats1[13][25] + coeff0_14*dmats1[14][25] + coeff0_15*dmats1[15][25] + coeff0_16*dmats1[16][25] + coeff0_17*dmats1[17][25] + coeff0_18*dmats1[18][25] + coeff0_19*dmats1[19][25] + coeff0_20*dmats1[20][25] + coeff0_21*dmats1[21][25] + coeff0_22*dmats1[22][25] + coeff0_23*dmats1[23][25] + coeff0_24*dmats1[24][25] + coeff0_25*dmats1[25][25] + coeff0_26*dmats1[26][25] + coeff0_27*dmats1[27][25] + coeff0_28*dmats1[28][25] + coeff0_29*dmats1[29][25] + coeff0_30*dmats1[30][25] + coeff0_31*dmats1[31][25] + coeff0_32*dmats1[32][25] + coeff0_33*dmats1[33][25] + coeff0_34*dmats1[34][25];
          new_coeff0_26 = coeff0_0*dmats1[0][26] + coeff0_1*dmats1[1][26] + coeff0_2*dmats1[2][26] + coeff0_3*dmats1[3][26] + coeff0_4*dmats1[4][26] + coeff0_5*dmats1[5][26] + coeff0_6*dmats1[6][26] + coeff0_7*dmats1[7][26] + coeff0_8*dmats1[8][26] + coeff0_9*dmats1[9][26] + coeff0_10*dmats1[10][26] + coeff0_11*dmats1[11][26] + coeff0_12*dmats1[12][26] + coeff0_13*dmats1[13][26] + coeff0_14*dmats1[14][26] + coeff0_15*dmats1[15][26] + coeff0_16*dmats1[16][26] + coeff0_17*dmats1[17][26] + coeff0_18*dmats1[18][26] + coeff0_19*dmats1[19][26] + coeff0_20*dmats1[20][26] + coeff0_21*dmats1[21][26] + coeff0_22*dmats1[22][26] + coeff0_23*dmats1[23][26] + coeff0_24*dmats1[24][26] + coeff0_25*dmats1[25][26] + coeff0_26*dmats1[26][26] + coeff0_27*dmats1[27][26] + coeff0_28*dmats1[28][26] + coeff0_29*dmats1[29][26] + coeff0_30*dmats1[30][26] + coeff0_31*dmats1[31][26] + coeff0_32*dmats1[32][26] + coeff0_33*dmats1[33][26] + coeff0_34*dmats1[34][26];
          new_coeff0_27 = coeff0_0*dmats1[0][27] + coeff0_1*dmats1[1][27] + coeff0_2*dmats1[2][27] + coeff0_3*dmats1[3][27] + coeff0_4*dmats1[4][27] + coeff0_5*dmats1[5][27] + coeff0_6*dmats1[6][27] + coeff0_7*dmats1[7][27] + coeff0_8*dmats1[8][27] + coeff0_9*dmats1[9][27] + coeff0_10*dmats1[10][27] + coeff0_11*dmats1[11][27] + coeff0_12*dmats1[12][27] + coeff0_13*dmats1[13][27] + coeff0_14*dmats1[14][27] + coeff0_15*dmats1[15][27] + coeff0_16*dmats1[16][27] + coeff0_17*dmats1[17][27] + coeff0_18*dmats1[18][27] + coeff0_19*dmats1[19][27] + coeff0_20*dmats1[20][27] + coeff0_21*dmats1[21][27] + coeff0_22*dmats1[22][27] + coeff0_23*dmats1[23][27] + coeff0_24*dmats1[24][27] + coeff0_25*dmats1[25][27] + coeff0_26*dmats1[26][27] + coeff0_27*dmats1[27][27] + coeff0_28*dmats1[28][27] + coeff0_29*dmats1[29][27] + coeff0_30*dmats1[30][27] + coeff0_31*dmats1[31][27] + coeff0_32*dmats1[32][27] + coeff0_33*dmats1[33][27] + coeff0_34*dmats1[34][27];
          new_coeff0_28 = coeff0_0*dmats1[0][28] + coeff0_1*dmats1[1][28] + coeff0_2*dmats1[2][28] + coeff0_3*dmats1[3][28] + coeff0_4*dmats1[4][28] + coeff0_5*dmats1[5][28] + coeff0_6*dmats1[6][28] + coeff0_7*dmats1[7][28] + coeff0_8*dmats1[8][28] + coeff0_9*dmats1[9][28] + coeff0_10*dmats1[10][28] + coeff0_11*dmats1[11][28] + coeff0_12*dmats1[12][28] + coeff0_13*dmats1[13][28] + coeff0_14*dmats1[14][28] + coeff0_15*dmats1[15][28] + coeff0_16*dmats1[16][28] + coeff0_17*dmats1[17][28] + coeff0_18*dmats1[18][28] + coeff0_19*dmats1[19][28] + coeff0_20*dmats1[20][28] + coeff0_21*dmats1[21][28] + coeff0_22*dmats1[22][28] + coeff0_23*dmats1[23][28] + coeff0_24*dmats1[24][28] + coeff0_25*dmats1[25][28] + coeff0_26*dmats1[26][28] + coeff0_27*dmats1[27][28] + coeff0_28*dmats1[28][28] + coeff0_29*dmats1[29][28] + coeff0_30*dmats1[30][28] + coeff0_31*dmats1[31][28] + coeff0_32*dmats1[32][28] + coeff0_33*dmats1[33][28] + coeff0_34*dmats1[34][28];
          new_coeff0_29 = coeff0_0*dmats1[0][29] + coeff0_1*dmats1[1][29] + coeff0_2*dmats1[2][29] + coeff0_3*dmats1[3][29] + coeff0_4*dmats1[4][29] + coeff0_5*dmats1[5][29] + coeff0_6*dmats1[6][29] + coeff0_7*dmats1[7][29] + coeff0_8*dmats1[8][29] + coeff0_9*dmats1[9][29] + coeff0_10*dmats1[10][29] + coeff0_11*dmats1[11][29] + coeff0_12*dmats1[12][29] + coeff0_13*dmats1[13][29] + coeff0_14*dmats1[14][29] + coeff0_15*dmats1[15][29] + coeff0_16*dmats1[16][29] + coeff0_17*dmats1[17][29] + coeff0_18*dmats1[18][29] + coeff0_19*dmats1[19][29] + coeff0_20*dmats1[20][29] + coeff0_21*dmats1[21][29] + coeff0_22*dmats1[22][29] + coeff0_23*dmats1[23][29] + coeff0_24*dmats1[24][29] + coeff0_25*dmats1[25][29] + coeff0_26*dmats1[26][29] + coeff0_27*dmats1[27][29] + coeff0_28*dmats1[28][29] + coeff0_29*dmats1[29][29] + coeff0_30*dmats1[30][29] + coeff0_31*dmats1[31][29] + coeff0_32*dmats1[32][29] + coeff0_33*dmats1[33][29] + coeff0_34*dmats1[34][29];
          new_coeff0_30 = coeff0_0*dmats1[0][30] + coeff0_1*dmats1[1][30] + coeff0_2*dmats1[2][30] + coeff0_3*dmats1[3][30] + coeff0_4*dmats1[4][30] + coeff0_5*dmats1[5][30] + coeff0_6*dmats1[6][30] + coeff0_7*dmats1[7][30] + coeff0_8*dmats1[8][30] + coeff0_9*dmats1[9][30] + coeff0_10*dmats1[10][30] + coeff0_11*dmats1[11][30] + coeff0_12*dmats1[12][30] + coeff0_13*dmats1[13][30] + coeff0_14*dmats1[14][30] + coeff0_15*dmats1[15][30] + coeff0_16*dmats1[16][30] + coeff0_17*dmats1[17][30] + coeff0_18*dmats1[18][30] + coeff0_19*dmats1[19][30] + coeff0_20*dmats1[20][30] + coeff0_21*dmats1[21][30] + coeff0_22*dmats1[22][30] + coeff0_23*dmats1[23][30] + coeff0_24*dmats1[24][30] + coeff0_25*dmats1[25][30] + coeff0_26*dmats1[26][30] + coeff0_27*dmats1[27][30] + coeff0_28*dmats1[28][30] + coeff0_29*dmats1[29][30] + coeff0_30*dmats1[30][30] + coeff0_31*dmats1[31][30] + coeff0_32*dmats1[32][30] + coeff0_33*dmats1[33][30] + coeff0_34*dmats1[34][30];
          new_coeff0_31 = coeff0_0*dmats1[0][31] + coeff0_1*dmats1[1][31] + coeff0_2*dmats1[2][31] + coeff0_3*dmats1[3][31] + coeff0_4*dmats1[4][31] + coeff0_5*dmats1[5][31] + coeff0_6*dmats1[6][31] + coeff0_7*dmats1[7][31] + coeff0_8*dmats1[8][31] + coeff0_9*dmats1[9][31] + coeff0_10*dmats1[10][31] + coeff0_11*dmats1[11][31] + coeff0_12*dmats1[12][31] + coeff0_13*dmats1[13][31] + coeff0_14*dmats1[14][31] + coeff0_15*dmats1[15][31] + coeff0_16*dmats1[16][31] + coeff0_17*dmats1[17][31] + coeff0_18*dmats1[18][31] + coeff0_19*dmats1[19][31] + coeff0_20*dmats1[20][31] + coeff0_21*dmats1[21][31] + coeff0_22*dmats1[22][31] + coeff0_23*dmats1[23][31] + coeff0_24*dmats1[24][31] + coeff0_25*dmats1[25][31] + coeff0_26*dmats1[26][31] + coeff0_27*dmats1[27][31] + coeff0_28*dmats1[28][31] + coeff0_29*dmats1[29][31] + coeff0_30*dmats1[30][31] + coeff0_31*dmats1[31][31] + coeff0_32*dmats1[32][31] + coeff0_33*dmats1[33][31] + coeff0_34*dmats1[34][31];
          new_coeff0_32 = coeff0_0*dmats1[0][32] + coeff0_1*dmats1[1][32] + coeff0_2*dmats1[2][32] + coeff0_3*dmats1[3][32] + coeff0_4*dmats1[4][32] + coeff0_5*dmats1[5][32] + coeff0_6*dmats1[6][32] + coeff0_7*dmats1[7][32] + coeff0_8*dmats1[8][32] + coeff0_9*dmats1[9][32] + coeff0_10*dmats1[10][32] + coeff0_11*dmats1[11][32] + coeff0_12*dmats1[12][32] + coeff0_13*dmats1[13][32] + coeff0_14*dmats1[14][32] + coeff0_15*dmats1[15][32] + coeff0_16*dmats1[16][32] + coeff0_17*dmats1[17][32] + coeff0_18*dmats1[18][32] + coeff0_19*dmats1[19][32] + coeff0_20*dmats1[20][32] + coeff0_21*dmats1[21][32] + coeff0_22*dmats1[22][32] + coeff0_23*dmats1[23][32] + coeff0_24*dmats1[24][32] + coeff0_25*dmats1[25][32] + coeff0_26*dmats1[26][32] + coeff0_27*dmats1[27][32] + coeff0_28*dmats1[28][32] + coeff0_29*dmats1[29][32] + coeff0_30*dmats1[30][32] + coeff0_31*dmats1[31][32] + coeff0_32*dmats1[32][32] + coeff0_33*dmats1[33][32] + coeff0_34*dmats1[34][32];
          new_coeff0_33 = coeff0_0*dmats1[0][33] + coeff0_1*dmats1[1][33] + coeff0_2*dmats1[2][33] + coeff0_3*dmats1[3][33] + coeff0_4*dmats1[4][33] + coeff0_5*dmats1[5][33] + coeff0_6*dmats1[6][33] + coeff0_7*dmats1[7][33] + coeff0_8*dmats1[8][33] + coeff0_9*dmats1[9][33] + coeff0_10*dmats1[10][33] + coeff0_11*dmats1[11][33] + coeff0_12*dmats1[12][33] + coeff0_13*dmats1[13][33] + coeff0_14*dmats1[14][33] + coeff0_15*dmats1[15][33] + coeff0_16*dmats1[16][33] + coeff0_17*dmats1[17][33] + coeff0_18*dmats1[18][33] + coeff0_19*dmats1[19][33] + coeff0_20*dmats1[20][33] + coeff0_21*dmats1[21][33] + coeff0_22*dmats1[22][33] + coeff0_23*dmats1[23][33] + coeff0_24*dmats1[24][33] + coeff0_25*dmats1[25][33] + coeff0_26*dmats1[26][33] + coeff0_27*dmats1[27][33] + coeff0_28*dmats1[28][33] + coeff0_29*dmats1[29][33] + coeff0_30*dmats1[30][33] + coeff0_31*dmats1[31][33] + coeff0_32*dmats1[32][33] + coeff0_33*dmats1[33][33] + coeff0_34*dmats1[34][33];
          new_coeff0_34 = coeff0_0*dmats1[0][34] + coeff0_1*dmats1[1][34] + coeff0_2*dmats1[2][34] + coeff0_3*dmats1[3][34] + coeff0_4*dmats1[4][34] + coeff0_5*dmats1[5][34] + coeff0_6*dmats1[6][34] + coeff0_7*dmats1[7][34] + coeff0_8*dmats1[8][34] + coeff0_9*dmats1[9][34] + coeff0_10*dmats1[10][34] + coeff0_11*dmats1[11][34] + coeff0_12*dmats1[12][34] + coeff0_13*dmats1[13][34] + coeff0_14*dmats1[14][34] + coeff0_15*dmats1[15][34] + coeff0_16*dmats1[16][34] + coeff0_17*dmats1[17][34] + coeff0_18*dmats1[18][34] + coeff0_19*dmats1[19][34] + coeff0_20*dmats1[20][34] + coeff0_21*dmats1[21][34] + coeff0_22*dmats1[22][34] + coeff0_23*dmats1[23][34] + coeff0_24*dmats1[24][34] + coeff0_25*dmats1[25][34] + coeff0_26*dmats1[26][34] + coeff0_27*dmats1[27][34] + coeff0_28*dmats1[28][34] + coeff0_29*dmats1[29][34] + coeff0_30*dmats1[30][34] + coeff0_31*dmats1[31][34] + coeff0_32*dmats1[32][34] + coeff0_33*dmats1[33][34] + coeff0_34*dmats1[34][34];
        }
        if(combinations[deriv_num][j] == 2)
        {
          new_coeff0_0 = coeff0_0*dmats2[0][0] + coeff0_1*dmats2[1][0] + coeff0_2*dmats2[2][0] + coeff0_3*dmats2[3][0] + coeff0_4*dmats2[4][0] + coeff0_5*dmats2[5][0] + coeff0_6*dmats2[6][0] + coeff0_7*dmats2[7][0] + coeff0_8*dmats2[8][0] + coeff0_9*dmats2[9][0] + coeff0_10*dmats2[10][0] + coeff0_11*dmats2[11][0] + coeff0_12*dmats2[12][0] + coeff0_13*dmats2[13][0] + coeff0_14*dmats2[14][0] + coeff0_15*dmats2[15][0] + coeff0_16*dmats2[16][0] + coeff0_17*dmats2[17][0] + coeff0_18*dmats2[18][0] + coeff0_19*dmats2[19][0] + coeff0_20*dmats2[20][0] + coeff0_21*dmats2[21][0] + coeff0_22*dmats2[22][0] + coeff0_23*dmats2[23][0] + coeff0_24*dmats2[24][0] + coeff0_25*dmats2[25][0] + coeff0_26*dmats2[26][0] + coeff0_27*dmats2[27][0] + coeff0_28*dmats2[28][0] + coeff0_29*dmats2[29][0] + coeff0_30*dmats2[30][0] + coeff0_31*dmats2[31][0] + coeff0_32*dmats2[32][0] + coeff0_33*dmats2[33][0] + coeff0_34*dmats2[34][0];
          new_coeff0_1 = coeff0_0*dmats2[0][1] + coeff0_1*dmats2[1][1] + coeff0_2*dmats2[2][1] + coeff0_3*dmats2[3][1] + coeff0_4*dmats2[4][1] + coeff0_5*dmats2[5][1] + coeff0_6*dmats2[6][1] + coeff0_7*dmats2[7][1] + coeff0_8*dmats2[8][1] + coeff0_9*dmats2[9][1] + coeff0_10*dmats2[10][1] + coeff0_11*dmats2[11][1] + coeff0_12*dmats2[12][1] + coeff0_13*dmats2[13][1] + coeff0_14*dmats2[14][1] + coeff0_15*dmats2[15][1] + coeff0_16*dmats2[16][1] + coeff0_17*dmats2[17][1] + coeff0_18*dmats2[18][1] + coeff0_19*dmats2[19][1] + coeff0_20*dmats2[20][1] + coeff0_21*dmats2[21][1] + coeff0_22*dmats2[22][1] + coeff0_23*dmats2[23][1] + coeff0_24*dmats2[24][1] + coeff0_25*dmats2[25][1] + coeff0_26*dmats2[26][1] + coeff0_27*dmats2[27][1] + coeff0_28*dmats2[28][1] + coeff0_29*dmats2[29][1] + coeff0_30*dmats2[30][1] + coeff0_31*dmats2[31][1] + coeff0_32*dmats2[32][1] + coeff0_33*dmats2[33][1] + coeff0_34*dmats2[34][1];
          new_coeff0_2 = coeff0_0*dmats2[0][2] + coeff0_1*dmats2[1][2] + coeff0_2*dmats2[2][2] + coeff0_3*dmats2[3][2] + coeff0_4*dmats2[4][2] + coeff0_5*dmats2[5][2] + coeff0_6*dmats2[6][2] + coeff0_7*dmats2[7][2] + coeff0_8*dmats2[8][2] + coeff0_9*dmats2[9][2] + coeff0_10*dmats2[10][2] + coeff0_11*dmats2[11][2] + coeff0_12*dmats2[12][2] + coeff0_13*dmats2[13][2] + coeff0_14*dmats2[14][2] + coeff0_15*dmats2[15][2] + coeff0_16*dmats2[16][2] + coeff0_17*dmats2[17][2] + coeff0_18*dmats2[18][2] + coeff0_19*dmats2[19][2] + coeff0_20*dmats2[20][2] + coeff0_21*dmats2[21][2] + coeff0_22*dmats2[22][2] + coeff0_23*dmats2[23][2] + coeff0_24*dmats2[24][2] + coeff0_25*dmats2[25][2] + coeff0_26*dmats2[26][2] + coeff0_27*dmats2[27][2] + coeff0_28*dmats2[28][2] + coeff0_29*dmats2[29][2] + coeff0_30*dmats2[30][2] + coeff0_31*dmats2[31][2] + coeff0_32*dmats2[32][2] + coeff0_33*dmats2[33][2] + coeff0_34*dmats2[34][2];
          new_coeff0_3 = coeff0_0*dmats2[0][3] + coeff0_1*dmats2[1][3] + coeff0_2*dmats2[2][3] + coeff0_3*dmats2[3][3] + coeff0_4*dmats2[4][3] + coeff0_5*dmats2[5][3] + coeff0_6*dmats2[6][3] + coeff0_7*dmats2[7][3] + coeff0_8*dmats2[8][3] + coeff0_9*dmats2[9][3] + coeff0_10*dmats2[10][3] + coeff0_11*dmats2[11][3] + coeff0_12*dmats2[12][3] + coeff0_13*dmats2[13][3] + coeff0_14*dmats2[14][3] + coeff0_15*dmats2[15][3] + coeff0_16*dmats2[16][3] + coeff0_17*dmats2[17][3] + coeff0_18*dmats2[18][3] + coeff0_19*dmats2[19][3] + coeff0_20*dmats2[20][3] + coeff0_21*dmats2[21][3] + coeff0_22*dmats2[22][3] + coeff0_23*dmats2[23][3] + coeff0_24*dmats2[24][3] + coeff0_25*dmats2[25][3] + coeff0_26*dmats2[26][3] + coeff0_27*dmats2[27][3] + coeff0_28*dmats2[28][3] + coeff0_29*dmats2[29][3] + coeff0_30*dmats2[30][3] + coeff0_31*dmats2[31][3] + coeff0_32*dmats2[32][3] + coeff0_33*dmats2[33][3] + coeff0_34*dmats2[34][3];
          new_coeff0_4 = coeff0_0*dmats2[0][4] + coeff0_1*dmats2[1][4] + coeff0_2*dmats2[2][4] + coeff0_3*dmats2[3][4] + coeff0_4*dmats2[4][4] + coeff0_5*dmats2[5][4] + coeff0_6*dmats2[6][4] + coeff0_7*dmats2[7][4] + coeff0_8*dmats2[8][4] + coeff0_9*dmats2[9][4] + coeff0_10*dmats2[10][4] + coeff0_11*dmats2[11][4] + coeff0_12*dmats2[12][4] + coeff0_13*dmats2[13][4] + coeff0_14*dmats2[14][4] + coeff0_15*dmats2[15][4] + coeff0_16*dmats2[16][4] + coeff0_17*dmats2[17][4] + coeff0_18*dmats2[18][4] + coeff0_19*dmats2[19][4] + coeff0_20*dmats2[20][4] + coeff0_21*dmats2[21][4] + coeff0_22*dmats2[22][4] + coeff0_23*dmats2[23][4] + coeff0_24*dmats2[24][4] + coeff0_25*dmats2[25][4] + coeff0_26*dmats2[26][4] + coeff0_27*dmats2[27][4] + coeff0_28*dmats2[28][4] + coeff0_29*dmats2[29][4] + coeff0_30*dmats2[30][4] + coeff0_31*dmats2[31][4] + coeff0_32*dmats2[32][4] + coeff0_33*dmats2[33][4] + coeff0_34*dmats2[34][4];
          new_coeff0_5 = coeff0_0*dmats2[0][5] + coeff0_1*dmats2[1][5] + coeff0_2*dmats2[2][5] + coeff0_3*dmats2[3][5] + coeff0_4*dmats2[4][5] + coeff0_5*dmats2[5][5] + coeff0_6*dmats2[6][5] + coeff0_7*dmats2[7][5] + coeff0_8*dmats2[8][5] + coeff0_9*dmats2[9][5] + coeff0_10*dmats2[10][5] + coeff0_11*dmats2[11][5] + coeff0_12*dmats2[12][5] + coeff0_13*dmats2[13][5] + coeff0_14*dmats2[14][5] + coeff0_15*dmats2[15][5] + coeff0_16*dmats2[16][5] + coeff0_17*dmats2[17][5] + coeff0_18*dmats2[18][5] + coeff0_19*dmats2[19][5] + coeff0_20*dmats2[20][5] + coeff0_21*dmats2[21][5] + coeff0_22*dmats2[22][5] + coeff0_23*dmats2[23][5] + coeff0_24*dmats2[24][5] + coeff0_25*dmats2[25][5] + coeff0_26*dmats2[26][5] + coeff0_27*dmats2[27][5] + coeff0_28*dmats2[28][5] + coeff0_29*dmats2[29][5] + coeff0_30*dmats2[30][5] + coeff0_31*dmats2[31][5] + coeff0_32*dmats2[32][5] + coeff0_33*dmats2[33][5] + coeff0_34*dmats2[34][5];
          new_coeff0_6 = coeff0_0*dmats2[0][6] + coeff0_1*dmats2[1][6] + coeff0_2*dmats2[2][6] + coeff0_3*dmats2[3][6] + coeff0_4*dmats2[4][6] + coeff0_5*dmats2[5][6] + coeff0_6*dmats2[6][6] + coeff0_7*dmats2[7][6] + coeff0_8*dmats2[8][6] + coeff0_9*dmats2[9][6] + coeff0_10*dmats2[10][6] + coeff0_11*dmats2[11][6] + coeff0_12*dmats2[12][6] + coeff0_13*dmats2[13][6] + coeff0_14*dmats2[14][6] + coeff0_15*dmats2[15][6] + coeff0_16*dmats2[16][6] + coeff0_17*dmats2[17][6] + coeff0_18*dmats2[18][6] + coeff0_19*dmats2[19][6] + coeff0_20*dmats2[20][6] + coeff0_21*dmats2[21][6] + coeff0_22*dmats2[22][6] + coeff0_23*dmats2[23][6] + coeff0_24*dmats2[24][6] + coeff0_25*dmats2[25][6] + coeff0_26*dmats2[26][6] + coeff0_27*dmats2[27][6] + coeff0_28*dmats2[28][6] + coeff0_29*dmats2[29][6] + coeff0_30*dmats2[30][6] + coeff0_31*dmats2[31][6] + coeff0_32*dmats2[32][6] + coeff0_33*dmats2[33][6] + coeff0_34*dmats2[34][6];
          new_coeff0_7 = coeff0_0*dmats2[0][7] + coeff0_1*dmats2[1][7] + coeff0_2*dmats2[2][7] + coeff0_3*dmats2[3][7] + coeff0_4*dmats2[4][7] + coeff0_5*dmats2[5][7] + coeff0_6*dmats2[6][7] + coeff0_7*dmats2[7][7] + coeff0_8*dmats2[8][7] + coeff0_9*dmats2[9][7] + coeff0_10*dmats2[10][7] + coeff0_11*dmats2[11][7] + coeff0_12*dmats2[12][7] + coeff0_13*dmats2[13][7] + coeff0_14*dmats2[14][7] + coeff0_15*dmats2[15][7] + coeff0_16*dmats2[16][7] + coeff0_17*dmats2[17][7] + coeff0_18*dmats2[18][7] + coeff0_19*dmats2[19][7] + coeff0_20*dmats2[20][7] + coeff0_21*dmats2[21][7] + coeff0_22*dmats2[22][7] + coeff0_23*dmats2[23][7] + coeff0_24*dmats2[24][7] + coeff0_25*dmats2[25][7] + coeff0_26*dmats2[26][7] + coeff0_27*dmats2[27][7] + coeff0_28*dmats2[28][7] + coeff0_29*dmats2[29][7] + coeff0_30*dmats2[30][7] + coeff0_31*dmats2[31][7] + coeff0_32*dmats2[32][7] + coeff0_33*dmats2[33][7] + coeff0_34*dmats2[34][7];
          new_coeff0_8 = coeff0_0*dmats2[0][8] + coeff0_1*dmats2[1][8] + coeff0_2*dmats2[2][8] + coeff0_3*dmats2[3][8] + coeff0_4*dmats2[4][8] + coeff0_5*dmats2[5][8] + coeff0_6*dmats2[6][8] + coeff0_7*dmats2[7][8] + coeff0_8*dmats2[8][8] + coeff0_9*dmats2[9][8] + coeff0_10*dmats2[10][8] + coeff0_11*dmats2[11][8] + coeff0_12*dmats2[12][8] + coeff0_13*dmats2[13][8] + coeff0_14*dmats2[14][8] + coeff0_15*dmats2[15][8] + coeff0_16*dmats2[16][8] + coeff0_17*dmats2[17][8] + coeff0_18*dmats2[18][8] + coeff0_19*dmats2[19][8] + coeff0_20*dmats2[20][8] + coeff0_21*dmats2[21][8] + coeff0_22*dmats2[22][8] + coeff0_23*dmats2[23][8] + coeff0_24*dmats2[24][8] + coeff0_25*dmats2[25][8] + coeff0_26*dmats2[26][8] + coeff0_27*dmats2[27][8] + coeff0_28*dmats2[28][8] + coeff0_29*dmats2[29][8] + coeff0_30*dmats2[30][8] + coeff0_31*dmats2[31][8] + coeff0_32*dmats2[32][8] + coeff0_33*dmats2[33][8] + coeff0_34*dmats2[34][8];
          new_coeff0_9 = coeff0_0*dmats2[0][9] + coeff0_1*dmats2[1][9] + coeff0_2*dmats2[2][9] + coeff0_3*dmats2[3][9] + coeff0_4*dmats2[4][9] + coeff0_5*dmats2[5][9] + coeff0_6*dmats2[6][9] + coeff0_7*dmats2[7][9] + coeff0_8*dmats2[8][9] + coeff0_9*dmats2[9][9] + coeff0_10*dmats2[10][9] + coeff0_11*dmats2[11][9] + coeff0_12*dmats2[12][9] + coeff0_13*dmats2[13][9] + coeff0_14*dmats2[14][9] + coeff0_15*dmats2[15][9] + coeff0_16*dmats2[16][9] + coeff0_17*dmats2[17][9] + coeff0_18*dmats2[18][9] + coeff0_19*dmats2[19][9] + coeff0_20*dmats2[20][9] + coeff0_21*dmats2[21][9] + coeff0_22*dmats2[22][9] + coeff0_23*dmats2[23][9] + coeff0_24*dmats2[24][9] + coeff0_25*dmats2[25][9] + coeff0_26*dmats2[26][9] + coeff0_27*dmats2[27][9] + coeff0_28*dmats2[28][9] + coeff0_29*dmats2[29][9] + coeff0_30*dmats2[30][9] + coeff0_31*dmats2[31][9] + coeff0_32*dmats2[32][9] + coeff0_33*dmats2[33][9] + coeff0_34*dmats2[34][9];
          new_coeff0_10 = coeff0_0*dmats2[0][10] + coeff0_1*dmats2[1][10] + coeff0_2*dmats2[2][10] + coeff0_3*dmats2[3][10] + coeff0_4*dmats2[4][10] + coeff0_5*dmats2[5][10] + coeff0_6*dmats2[6][10] + coeff0_7*dmats2[7][10] + coeff0_8*dmats2[8][10] + coeff0_9*dmats2[9][10] + coeff0_10*dmats2[10][10] + coeff0_11*dmats2[11][10] + coeff0_12*dmats2[12][10] + coeff0_13*dmats2[13][10] + coeff0_14*dmats2[14][10] + coeff0_15*dmats2[15][10] + coeff0_16*dmats2[16][10] + coeff0_17*dmats2[17][10] + coeff0_18*dmats2[18][10] + coeff0_19*dmats2[19][10] + coeff0_20*dmats2[20][10] + coeff0_21*dmats2[21][10] + coeff0_22*dmats2[22][10] + coeff0_23*dmats2[23][10] + coeff0_24*dmats2[24][10] + coeff0_25*dmats2[25][10] + coeff0_26*dmats2[26][10] + coeff0_27*dmats2[27][10] + coeff0_28*dmats2[28][10] + coeff0_29*dmats2[29][10] + coeff0_30*dmats2[30][10] + coeff0_31*dmats2[31][10] + coeff0_32*dmats2[32][10] + coeff0_33*dmats2[33][10] + coeff0_34*dmats2[34][10];
          new_coeff0_11 = coeff0_0*dmats2[0][11] + coeff0_1*dmats2[1][11] + coeff0_2*dmats2[2][11] + coeff0_3*dmats2[3][11] + coeff0_4*dmats2[4][11] + coeff0_5*dmats2[5][11] + coeff0_6*dmats2[6][11] + coeff0_7*dmats2[7][11] + coeff0_8*dmats2[8][11] + coeff0_9*dmats2[9][11] + coeff0_10*dmats2[10][11] + coeff0_11*dmats2[11][11] + coeff0_12*dmats2[12][11] + coeff0_13*dmats2[13][11] + coeff0_14*dmats2[14][11] + coeff0_15*dmats2[15][11] + coeff0_16*dmats2[16][11] + coeff0_17*dmats2[17][11] + coeff0_18*dmats2[18][11] + coeff0_19*dmats2[19][11] + coeff0_20*dmats2[20][11] + coeff0_21*dmats2[21][11] + coeff0_22*dmats2[22][11] + coeff0_23*dmats2[23][11] + coeff0_24*dmats2[24][11] + coeff0_25*dmats2[25][11] + coeff0_26*dmats2[26][11] + coeff0_27*dmats2[27][11] + coeff0_28*dmats2[28][11] + coeff0_29*dmats2[29][11] + coeff0_30*dmats2[30][11] + coeff0_31*dmats2[31][11] + coeff0_32*dmats2[32][11] + coeff0_33*dmats2[33][11] + coeff0_34*dmats2[34][11];
          new_coeff0_12 = coeff0_0*dmats2[0][12] + coeff0_1*dmats2[1][12] + coeff0_2*dmats2[2][12] + coeff0_3*dmats2[3][12] + coeff0_4*dmats2[4][12] + coeff0_5*dmats2[5][12] + coeff0_6*dmats2[6][12] + coeff0_7*dmats2[7][12] + coeff0_8*dmats2[8][12] + coeff0_9*dmats2[9][12] + coeff0_10*dmats2[10][12] + coeff0_11*dmats2[11][12] + coeff0_12*dmats2[12][12] + coeff0_13*dmats2[13][12] + coeff0_14*dmats2[14][12] + coeff0_15*dmats2[15][12] + coeff0_16*dmats2[16][12] + coeff0_17*dmats2[17][12] + coeff0_18*dmats2[18][12] + coeff0_19*dmats2[19][12] + coeff0_20*dmats2[20][12] + coeff0_21*dmats2[21][12] + coeff0_22*dmats2[22][12] + coeff0_23*dmats2[23][12] + coeff0_24*dmats2[24][12] + coeff0_25*dmats2[25][12] + coeff0_26*dmats2[26][12] + coeff0_27*dmats2[27][12] + coeff0_28*dmats2[28][12] + coeff0_29*dmats2[29][12] + coeff0_30*dmats2[30][12] + coeff0_31*dmats2[31][12] + coeff0_32*dmats2[32][12] + coeff0_33*dmats2[33][12] + coeff0_34*dmats2[34][12];
          new_coeff0_13 = coeff0_0*dmats2[0][13] + coeff0_1*dmats2[1][13] + coeff0_2*dmats2[2][13] + coeff0_3*dmats2[3][13] + coeff0_4*dmats2[4][13] + coeff0_5*dmats2[5][13] + coeff0_6*dmats2[6][13] + coeff0_7*dmats2[7][13] + coeff0_8*dmats2[8][13] + coeff0_9*dmats2[9][13] + coeff0_10*dmats2[10][13] + coeff0_11*dmats2[11][13] + coeff0_12*dmats2[12][13] + coeff0_13*dmats2[13][13] + coeff0_14*dmats2[14][13] + coeff0_15*dmats2[15][13] + coeff0_16*dmats2[16][13] + coeff0_17*dmats2[17][13] + coeff0_18*dmats2[18][13] + coeff0_19*dmats2[19][13] + coeff0_20*dmats2[20][13] + coeff0_21*dmats2[21][13] + coeff0_22*dmats2[22][13] + coeff0_23*dmats2[23][13] + coeff0_24*dmats2[24][13] + coeff0_25*dmats2[25][13] + coeff0_26*dmats2[26][13] + coeff0_27*dmats2[27][13] + coeff0_28*dmats2[28][13] + coeff0_29*dmats2[29][13] + coeff0_30*dmats2[30][13] + coeff0_31*dmats2[31][13] + coeff0_32*dmats2[32][13] + coeff0_33*dmats2[33][13] + coeff0_34*dmats2[34][13];
          new_coeff0_14 = coeff0_0*dmats2[0][14] + coeff0_1*dmats2[1][14] + coeff0_2*dmats2[2][14] + coeff0_3*dmats2[3][14] + coeff0_4*dmats2[4][14] + coeff0_5*dmats2[5][14] + coeff0_6*dmats2[6][14] + coeff0_7*dmats2[7][14] + coeff0_8*dmats2[8][14] + coeff0_9*dmats2[9][14] + coeff0_10*dmats2[10][14] + coeff0_11*dmats2[11][14] + coeff0_12*dmats2[12][14] + coeff0_13*dmats2[13][14] + coeff0_14*dmats2[14][14] + coeff0_15*dmats2[15][14] + coeff0_16*dmats2[16][14] + coeff0_17*dmats2[17][14] + coeff0_18*dmats2[18][14] + coeff0_19*dmats2[19][14] + coeff0_20*dmats2[20][14] + coeff0_21*dmats2[21][14] + coeff0_22*dmats2[22][14] + coeff0_23*dmats2[23][14] + coeff0_24*dmats2[24][14] + coeff0_25*dmats2[25][14] + coeff0_26*dmats2[26][14] + coeff0_27*dmats2[27][14] + coeff0_28*dmats2[28][14] + coeff0_29*dmats2[29][14] + coeff0_30*dmats2[30][14] + coeff0_31*dmats2[31][14] + coeff0_32*dmats2[32][14] + coeff0_33*dmats2[33][14] + coeff0_34*dmats2[34][14];
          new_coeff0_15 = coeff0_0*dmats2[0][15] + coeff0_1*dmats2[1][15] + coeff0_2*dmats2[2][15] + coeff0_3*dmats2[3][15] + coeff0_4*dmats2[4][15] + coeff0_5*dmats2[5][15] + coeff0_6*dmats2[6][15] + coeff0_7*dmats2[7][15] + coeff0_8*dmats2[8][15] + coeff0_9*dmats2[9][15] + coeff0_10*dmats2[10][15] + coeff0_11*dmats2[11][15] + coeff0_12*dmats2[12][15] + coeff0_13*dmats2[13][15] + coeff0_14*dmats2[14][15] + coeff0_15*dmats2[15][15] + coeff0_16*dmats2[16][15] + coeff0_17*dmats2[17][15] + coeff0_18*dmats2[18][15] + coeff0_19*dmats2[19][15] + coeff0_20*dmats2[20][15] + coeff0_21*dmats2[21][15] + coeff0_22*dmats2[22][15] + coeff0_23*dmats2[23][15] + coeff0_24*dmats2[24][15] + coeff0_25*dmats2[25][15] + coeff0_26*dmats2[26][15] + coeff0_27*dmats2[27][15] + coeff0_28*dmats2[28][15] + coeff0_29*dmats2[29][15] + coeff0_30*dmats2[30][15] + coeff0_31*dmats2[31][15] + coeff0_32*dmats2[32][15] + coeff0_33*dmats2[33][15] + coeff0_34*dmats2[34][15];
          new_coeff0_16 = coeff0_0*dmats2[0][16] + coeff0_1*dmats2[1][16] + coeff0_2*dmats2[2][16] + coeff0_3*dmats2[3][16] + coeff0_4*dmats2[4][16] + coeff0_5*dmats2[5][16] + coeff0_6*dmats2[6][16] + coeff0_7*dmats2[7][16] + coeff0_8*dmats2[8][16] + coeff0_9*dmats2[9][16] + coeff0_10*dmats2[10][16] + coeff0_11*dmats2[11][16] + coeff0_12*dmats2[12][16] + coeff0_13*dmats2[13][16] + coeff0_14*dmats2[14][16] + coeff0_15*dmats2[15][16] + coeff0_16*dmats2[16][16] + coeff0_17*dmats2[17][16] + coeff0_18*dmats2[18][16] + coeff0_19*dmats2[19][16] + coeff0_20*dmats2[20][16] + coeff0_21*dmats2[21][16] + coeff0_22*dmats2[22][16] + coeff0_23*dmats2[23][16] + coeff0_24*dmats2[24][16] + coeff0_25*dmats2[25][16] + coeff0_26*dmats2[26][16] + coeff0_27*dmats2[27][16] + coeff0_28*dmats2[28][16] + coeff0_29*dmats2[29][16] + coeff0_30*dmats2[30][16] + coeff0_31*dmats2[31][16] + coeff0_32*dmats2[32][16] + coeff0_33*dmats2[33][16] + coeff0_34*dmats2[34][16];
          new_coeff0_17 = coeff0_0*dmats2[0][17] + coeff0_1*dmats2[1][17] + coeff0_2*dmats2[2][17] + coeff0_3*dmats2[3][17] + coeff0_4*dmats2[4][17] + coeff0_5*dmats2[5][17] + coeff0_6*dmats2[6][17] + coeff0_7*dmats2[7][17] + coeff0_8*dmats2[8][17] + coeff0_9*dmats2[9][17] + coeff0_10*dmats2[10][17] + coeff0_11*dmats2[11][17] + coeff0_12*dmats2[12][17] + coeff0_13*dmats2[13][17] + coeff0_14*dmats2[14][17] + coeff0_15*dmats2[15][17] + coeff0_16*dmats2[16][17] + coeff0_17*dmats2[17][17] + coeff0_18*dmats2[18][17] + coeff0_19*dmats2[19][17] + coeff0_20*dmats2[20][17] + coeff0_21*dmats2[21][17] + coeff0_22*dmats2[22][17] + coeff0_23*dmats2[23][17] + coeff0_24*dmats2[24][17] + coeff0_25*dmats2[25][17] + coeff0_26*dmats2[26][17] + coeff0_27*dmats2[27][17] + coeff0_28*dmats2[28][17] + coeff0_29*dmats2[29][17] + coeff0_30*dmats2[30][17] + coeff0_31*dmats2[31][17] + coeff0_32*dmats2[32][17] + coeff0_33*dmats2[33][17] + coeff0_34*dmats2[34][17];
          new_coeff0_18 = coeff0_0*dmats2[0][18] + coeff0_1*dmats2[1][18] + coeff0_2*dmats2[2][18] + coeff0_3*dmats2[3][18] + coeff0_4*dmats2[4][18] + coeff0_5*dmats2[5][18] + coeff0_6*dmats2[6][18] + coeff0_7*dmats2[7][18] + coeff0_8*dmats2[8][18] + coeff0_9*dmats2[9][18] + coeff0_10*dmats2[10][18] + coeff0_11*dmats2[11][18] + coeff0_12*dmats2[12][18] + coeff0_13*dmats2[13][18] + coeff0_14*dmats2[14][18] + coeff0_15*dmats2[15][18] + coeff0_16*dmats2[16][18] + coeff0_17*dmats2[17][18] + coeff0_18*dmats2[18][18] + coeff0_19*dmats2[19][18] + coeff0_20*dmats2[20][18] + coeff0_21*dmats2[21][18] + coeff0_22*dmats2[22][18] + coeff0_23*dmats2[23][18] + coeff0_24*dmats2[24][18] + coeff0_25*dmats2[25][18] + coeff0_26*dmats2[26][18] + coeff0_27*dmats2[27][18] + coeff0_28*dmats2[28][18] + coeff0_29*dmats2[29][18] + coeff0_30*dmats2[30][18] + coeff0_31*dmats2[31][18] + coeff0_32*dmats2[32][18] + coeff0_33*dmats2[33][18] + coeff0_34*dmats2[34][18];
          new_coeff0_19 = coeff0_0*dmats2[0][19] + coeff0_1*dmats2[1][19] + coeff0_2*dmats2[2][19] + coeff0_3*dmats2[3][19] + coeff0_4*dmats2[4][19] + coeff0_5*dmats2[5][19] + coeff0_6*dmats2[6][19] + coeff0_7*dmats2[7][19] + coeff0_8*dmats2[8][19] + coeff0_9*dmats2[9][19] + coeff0_10*dmats2[10][19] + coeff0_11*dmats2[11][19] + coeff0_12*dmats2[12][19] + coeff0_13*dmats2[13][19] + coeff0_14*dmats2[14][19] + coeff0_15*dmats2[15][19] + coeff0_16*dmats2[16][19] + coeff0_17*dmats2[17][19] + coeff0_18*dmats2[18][19] + coeff0_19*dmats2[19][19] + coeff0_20*dmats2[20][19] + coeff0_21*dmats2[21][19] + coeff0_22*dmats2[22][19] + coeff0_23*dmats2[23][19] + coeff0_24*dmats2[24][19] + coeff0_25*dmats2[25][19] + coeff0_26*dmats2[26][19] + coeff0_27*dmats2[27][19] + coeff0_28*dmats2[28][19] + coeff0_29*dmats2[29][19] + coeff0_30*dmats2[30][19] + coeff0_31*dmats2[31][19] + coeff0_32*dmats2[32][19] + coeff0_33*dmats2[33][19] + coeff0_34*dmats2[34][19];
          new_coeff0_20 = coeff0_0*dmats2[0][20] + coeff0_1*dmats2[1][20] + coeff0_2*dmats2[2][20] + coeff0_3*dmats2[3][20] + coeff0_4*dmats2[4][20] + coeff0_5*dmats2[5][20] + coeff0_6*dmats2[6][20] + coeff0_7*dmats2[7][20] + coeff0_8*dmats2[8][20] + coeff0_9*dmats2[9][20] + coeff0_10*dmats2[10][20] + coeff0_11*dmats2[11][20] + coeff0_12*dmats2[12][20] + coeff0_13*dmats2[13][20] + coeff0_14*dmats2[14][20] + coeff0_15*dmats2[15][20] + coeff0_16*dmats2[16][20] + coeff0_17*dmats2[17][20] + coeff0_18*dmats2[18][20] + coeff0_19*dmats2[19][20] + coeff0_20*dmats2[20][20] + coeff0_21*dmats2[21][20] + coeff0_22*dmats2[22][20] + coeff0_23*dmats2[23][20] + coeff0_24*dmats2[24][20] + coeff0_25*dmats2[25][20] + coeff0_26*dmats2[26][20] + coeff0_27*dmats2[27][20] + coeff0_28*dmats2[28][20] + coeff0_29*dmats2[29][20] + coeff0_30*dmats2[30][20] + coeff0_31*dmats2[31][20] + coeff0_32*dmats2[32][20] + coeff0_33*dmats2[33][20] + coeff0_34*dmats2[34][20];
          new_coeff0_21 = coeff0_0*dmats2[0][21] + coeff0_1*dmats2[1][21] + coeff0_2*dmats2[2][21] + coeff0_3*dmats2[3][21] + coeff0_4*dmats2[4][21] + coeff0_5*dmats2[5][21] + coeff0_6*dmats2[6][21] + coeff0_7*dmats2[7][21] + coeff0_8*dmats2[8][21] + coeff0_9*dmats2[9][21] + coeff0_10*dmats2[10][21] + coeff0_11*dmats2[11][21] + coeff0_12*dmats2[12][21] + coeff0_13*dmats2[13][21] + coeff0_14*dmats2[14][21] + coeff0_15*dmats2[15][21] + coeff0_16*dmats2[16][21] + coeff0_17*dmats2[17][21] + coeff0_18*dmats2[18][21] + coeff0_19*dmats2[19][21] + coeff0_20*dmats2[20][21] + coeff0_21*dmats2[21][21] + coeff0_22*dmats2[22][21] + coeff0_23*dmats2[23][21] + coeff0_24*dmats2[24][21] + coeff0_25*dmats2[25][21] + coeff0_26*dmats2[26][21] + coeff0_27*dmats2[27][21] + coeff0_28*dmats2[28][21] + coeff0_29*dmats2[29][21] + coeff0_30*dmats2[30][21] + coeff0_31*dmats2[31][21] + coeff0_32*dmats2[32][21] + coeff0_33*dmats2[33][21] + coeff0_34*dmats2[34][21];
          new_coeff0_22 = coeff0_0*dmats2[0][22] + coeff0_1*dmats2[1][22] + coeff0_2*dmats2[2][22] + coeff0_3*dmats2[3][22] + coeff0_4*dmats2[4][22] + coeff0_5*dmats2[5][22] + coeff0_6*dmats2[6][22] + coeff0_7*dmats2[7][22] + coeff0_8*dmats2[8][22] + coeff0_9*dmats2[9][22] + coeff0_10*dmats2[10][22] + coeff0_11*dmats2[11][22] + coeff0_12*dmats2[12][22] + coeff0_13*dmats2[13][22] + coeff0_14*dmats2[14][22] + coeff0_15*dmats2[15][22] + coeff0_16*dmats2[16][22] + coeff0_17*dmats2[17][22] + coeff0_18*dmats2[18][22] + coeff0_19*dmats2[19][22] + coeff0_20*dmats2[20][22] + coeff0_21*dmats2[21][22] + coeff0_22*dmats2[22][22] + coeff0_23*dmats2[23][22] + coeff0_24*dmats2[24][22] + coeff0_25*dmats2[25][22] + coeff0_26*dmats2[26][22] + coeff0_27*dmats2[27][22] + coeff0_28*dmats2[28][22] + coeff0_29*dmats2[29][22] + coeff0_30*dmats2[30][22] + coeff0_31*dmats2[31][22] + coeff0_32*dmats2[32][22] + coeff0_33*dmats2[33][22] + coeff0_34*dmats2[34][22];
          new_coeff0_23 = coeff0_0*dmats2[0][23] + coeff0_1*dmats2[1][23] + coeff0_2*dmats2[2][23] + coeff0_3*dmats2[3][23] + coeff0_4*dmats2[4][23] + coeff0_5*dmats2[5][23] + coeff0_6*dmats2[6][23] + coeff0_7*dmats2[7][23] + coeff0_8*dmats2[8][23] + coeff0_9*dmats2[9][23] + coeff0_10*dmats2[10][23] + coeff0_11*dmats2[11][23] + coeff0_12*dmats2[12][23] + coeff0_13*dmats2[13][23] + coeff0_14*dmats2[14][23] + coeff0_15*dmats2[15][23] + coeff0_16*dmats2[16][23] + coeff0_17*dmats2[17][23] + coeff0_18*dmats2[18][23] + coeff0_19*dmats2[19][23] + coeff0_20*dmats2[20][23] + coeff0_21*dmats2[21][23] + coeff0_22*dmats2[22][23] + coeff0_23*dmats2[23][23] + coeff0_24*dmats2[24][23] + coeff0_25*dmats2[25][23] + coeff0_26*dmats2[26][23] + coeff0_27*dmats2[27][23] + coeff0_28*dmats2[28][23] + coeff0_29*dmats2[29][23] + coeff0_30*dmats2[30][23] + coeff0_31*dmats2[31][23] + coeff0_32*dmats2[32][23] + coeff0_33*dmats2[33][23] + coeff0_34*dmats2[34][23];
          new_coeff0_24 = coeff0_0*dmats2[0][24] + coeff0_1*dmats2[1][24] + coeff0_2*dmats2[2][24] + coeff0_3*dmats2[3][24] + coeff0_4*dmats2[4][24] + coeff0_5*dmats2[5][24] + coeff0_6*dmats2[6][24] + coeff0_7*dmats2[7][24] + coeff0_8*dmats2[8][24] + coeff0_9*dmats2[9][24] + coeff0_10*dmats2[10][24] + coeff0_11*dmats2[11][24] + coeff0_12*dmats2[12][24] + coeff0_13*dmats2[13][24] + coeff0_14*dmats2[14][24] + coeff0_15*dmats2[15][24] + coeff0_16*dmats2[16][24] + coeff0_17*dmats2[17][24] + coeff0_18*dmats2[18][24] + coeff0_19*dmats2[19][24] + coeff0_20*dmats2[20][24] + coeff0_21*dmats2[21][24] + coeff0_22*dmats2[22][24] + coeff0_23*dmats2[23][24] + coeff0_24*dmats2[24][24] + coeff0_25*dmats2[25][24] + coeff0_26*dmats2[26][24] + coeff0_27*dmats2[27][24] + coeff0_28*dmats2[28][24] + coeff0_29*dmats2[29][24] + coeff0_30*dmats2[30][24] + coeff0_31*dmats2[31][24] + coeff0_32*dmats2[32][24] + coeff0_33*dmats2[33][24] + coeff0_34*dmats2[34][24];
          new_coeff0_25 = coeff0_0*dmats2[0][25] + coeff0_1*dmats2[1][25] + coeff0_2*dmats2[2][25] + coeff0_3*dmats2[3][25] + coeff0_4*dmats2[4][25] + coeff0_5*dmats2[5][25] + coeff0_6*dmats2[6][25] + coeff0_7*dmats2[7][25] + coeff0_8*dmats2[8][25] + coeff0_9*dmats2[9][25] + coeff0_10*dmats2[10][25] + coeff0_11*dmats2[11][25] + coeff0_12*dmats2[12][25] + coeff0_13*dmats2[13][25] + coeff0_14*dmats2[14][25] + coeff0_15*dmats2[15][25] + coeff0_16*dmats2[16][25] + coeff0_17*dmats2[17][25] + coeff0_18*dmats2[18][25] + coeff0_19*dmats2[19][25] + coeff0_20*dmats2[20][25] + coeff0_21*dmats2[21][25] + coeff0_22*dmats2[22][25] + coeff0_23*dmats2[23][25] + coeff0_24*dmats2[24][25] + coeff0_25*dmats2[25][25] + coeff0_26*dmats2[26][25] + coeff0_27*dmats2[27][25] + coeff0_28*dmats2[28][25] + coeff0_29*dmats2[29][25] + coeff0_30*dmats2[30][25] + coeff0_31*dmats2[31][25] + coeff0_32*dmats2[32][25] + coeff0_33*dmats2[33][25] + coeff0_34*dmats2[34][25];
          new_coeff0_26 = coeff0_0*dmats2[0][26] + coeff0_1*dmats2[1][26] + coeff0_2*dmats2[2][26] + coeff0_3*dmats2[3][26] + coeff0_4*dmats2[4][26] + coeff0_5*dmats2[5][26] + coeff0_6*dmats2[6][26] + coeff0_7*dmats2[7][26] + coeff0_8*dmats2[8][26] + coeff0_9*dmats2[9][26] + coeff0_10*dmats2[10][26] + coeff0_11*dmats2[11][26] + coeff0_12*dmats2[12][26] + coeff0_13*dmats2[13][26] + coeff0_14*dmats2[14][26] + coeff0_15*dmats2[15][26] + coeff0_16*dmats2[16][26] + coeff0_17*dmats2[17][26] + coeff0_18*dmats2[18][26] + coeff0_19*dmats2[19][26] + coeff0_20*dmats2[20][26] + coeff0_21*dmats2[21][26] + coeff0_22*dmats2[22][26] + coeff0_23*dmats2[23][26] + coeff0_24*dmats2[24][26] + coeff0_25*dmats2[25][26] + coeff0_26*dmats2[26][26] + coeff0_27*dmats2[27][26] + coeff0_28*dmats2[28][26] + coeff0_29*dmats2[29][26] + coeff0_30*dmats2[30][26] + coeff0_31*dmats2[31][26] + coeff0_32*dmats2[32][26] + coeff0_33*dmats2[33][26] + coeff0_34*dmats2[34][26];
          new_coeff0_27 = coeff0_0*dmats2[0][27] + coeff0_1*dmats2[1][27] + coeff0_2*dmats2[2][27] + coeff0_3*dmats2[3][27] + coeff0_4*dmats2[4][27] + coeff0_5*dmats2[5][27] + coeff0_6*dmats2[6][27] + coeff0_7*dmats2[7][27] + coeff0_8*dmats2[8][27] + coeff0_9*dmats2[9][27] + coeff0_10*dmats2[10][27] + coeff0_11*dmats2[11][27] + coeff0_12*dmats2[12][27] + coeff0_13*dmats2[13][27] + coeff0_14*dmats2[14][27] + coeff0_15*dmats2[15][27] + coeff0_16*dmats2[16][27] + coeff0_17*dmats2[17][27] + coeff0_18*dmats2[18][27] + coeff0_19*dmats2[19][27] + coeff0_20*dmats2[20][27] + coeff0_21*dmats2[21][27] + coeff0_22*dmats2[22][27] + coeff0_23*dmats2[23][27] + coeff0_24*dmats2[24][27] + coeff0_25*dmats2[25][27] + coeff0_26*dmats2[26][27] + coeff0_27*dmats2[27][27] + coeff0_28*dmats2[28][27] + coeff0_29*dmats2[29][27] + coeff0_30*dmats2[30][27] + coeff0_31*dmats2[31][27] + coeff0_32*dmats2[32][27] + coeff0_33*dmats2[33][27] + coeff0_34*dmats2[34][27];
          new_coeff0_28 = coeff0_0*dmats2[0][28] + coeff0_1*dmats2[1][28] + coeff0_2*dmats2[2][28] + coeff0_3*dmats2[3][28] + coeff0_4*dmats2[4][28] + coeff0_5*dmats2[5][28] + coeff0_6*dmats2[6][28] + coeff0_7*dmats2[7][28] + coeff0_8*dmats2[8][28] + coeff0_9*dmats2[9][28] + coeff0_10*dmats2[10][28] + coeff0_11*dmats2[11][28] + coeff0_12*dmats2[12][28] + coeff0_13*dmats2[13][28] + coeff0_14*dmats2[14][28] + coeff0_15*dmats2[15][28] + coeff0_16*dmats2[16][28] + coeff0_17*dmats2[17][28] + coeff0_18*dmats2[18][28] + coeff0_19*dmats2[19][28] + coeff0_20*dmats2[20][28] + coeff0_21*dmats2[21][28] + coeff0_22*dmats2[22][28] + coeff0_23*dmats2[23][28] + coeff0_24*dmats2[24][28] + coeff0_25*dmats2[25][28] + coeff0_26*dmats2[26][28] + coeff0_27*dmats2[27][28] + coeff0_28*dmats2[28][28] + coeff0_29*dmats2[29][28] + coeff0_30*dmats2[30][28] + coeff0_31*dmats2[31][28] + coeff0_32*dmats2[32][28] + coeff0_33*dmats2[33][28] + coeff0_34*dmats2[34][28];
          new_coeff0_29 = coeff0_0*dmats2[0][29] + coeff0_1*dmats2[1][29] + coeff0_2*dmats2[2][29] + coeff0_3*dmats2[3][29] + coeff0_4*dmats2[4][29] + coeff0_5*dmats2[5][29] + coeff0_6*dmats2[6][29] + coeff0_7*dmats2[7][29] + coeff0_8*dmats2[8][29] + coeff0_9*dmats2[9][29] + coeff0_10*dmats2[10][29] + coeff0_11*dmats2[11][29] + coeff0_12*dmats2[12][29] + coeff0_13*dmats2[13][29] + coeff0_14*dmats2[14][29] + coeff0_15*dmats2[15][29] + coeff0_16*dmats2[16][29] + coeff0_17*dmats2[17][29] + coeff0_18*dmats2[18][29] + coeff0_19*dmats2[19][29] + coeff0_20*dmats2[20][29] + coeff0_21*dmats2[21][29] + coeff0_22*dmats2[22][29] + coeff0_23*dmats2[23][29] + coeff0_24*dmats2[24][29] + coeff0_25*dmats2[25][29] + coeff0_26*dmats2[26][29] + coeff0_27*dmats2[27][29] + coeff0_28*dmats2[28][29] + coeff0_29*dmats2[29][29] + coeff0_30*dmats2[30][29] + coeff0_31*dmats2[31][29] + coeff0_32*dmats2[32][29] + coeff0_33*dmats2[33][29] + coeff0_34*dmats2[34][29];
          new_coeff0_30 = coeff0_0*dmats2[0][30] + coeff0_1*dmats2[1][30] + coeff0_2*dmats2[2][30] + coeff0_3*dmats2[3][30] + coeff0_4*dmats2[4][30] + coeff0_5*dmats2[5][30] + coeff0_6*dmats2[6][30] + coeff0_7*dmats2[7][30] + coeff0_8*dmats2[8][30] + coeff0_9*dmats2[9][30] + coeff0_10*dmats2[10][30] + coeff0_11*dmats2[11][30] + coeff0_12*dmats2[12][30] + coeff0_13*dmats2[13][30] + coeff0_14*dmats2[14][30] + coeff0_15*dmats2[15][30] + coeff0_16*dmats2[16][30] + coeff0_17*dmats2[17][30] + coeff0_18*dmats2[18][30] + coeff0_19*dmats2[19][30] + coeff0_20*dmats2[20][30] + coeff0_21*dmats2[21][30] + coeff0_22*dmats2[22][30] + coeff0_23*dmats2[23][30] + coeff0_24*dmats2[24][30] + coeff0_25*dmats2[25][30] + coeff0_26*dmats2[26][30] + coeff0_27*dmats2[27][30] + coeff0_28*dmats2[28][30] + coeff0_29*dmats2[29][30] + coeff0_30*dmats2[30][30] + coeff0_31*dmats2[31][30] + coeff0_32*dmats2[32][30] + coeff0_33*dmats2[33][30] + coeff0_34*dmats2[34][30];
          new_coeff0_31 = coeff0_0*dmats2[0][31] + coeff0_1*dmats2[1][31] + coeff0_2*dmats2[2][31] + coeff0_3*dmats2[3][31] + coeff0_4*dmats2[4][31] + coeff0_5*dmats2[5][31] + coeff0_6*dmats2[6][31] + coeff0_7*dmats2[7][31] + coeff0_8*dmats2[8][31] + coeff0_9*dmats2[9][31] + coeff0_10*dmats2[10][31] + coeff0_11*dmats2[11][31] + coeff0_12*dmats2[12][31] + coeff0_13*dmats2[13][31] + coeff0_14*dmats2[14][31] + coeff0_15*dmats2[15][31] + coeff0_16*dmats2[16][31] + coeff0_17*dmats2[17][31] + coeff0_18*dmats2[18][31] + coeff0_19*dmats2[19][31] + coeff0_20*dmats2[20][31] + coeff0_21*dmats2[21][31] + coeff0_22*dmats2[22][31] + coeff0_23*dmats2[23][31] + coeff0_24*dmats2[24][31] + coeff0_25*dmats2[25][31] + coeff0_26*dmats2[26][31] + coeff0_27*dmats2[27][31] + coeff0_28*dmats2[28][31] + coeff0_29*dmats2[29][31] + coeff0_30*dmats2[30][31] + coeff0_31*dmats2[31][31] + coeff0_32*dmats2[32][31] + coeff0_33*dmats2[33][31] + coeff0_34*dmats2[34][31];
          new_coeff0_32 = coeff0_0*dmats2[0][32] + coeff0_1*dmats2[1][32] + coeff0_2*dmats2[2][32] + coeff0_3*dmats2[3][32] + coeff0_4*dmats2[4][32] + coeff0_5*dmats2[5][32] + coeff0_6*dmats2[6][32] + coeff0_7*dmats2[7][32] + coeff0_8*dmats2[8][32] + coeff0_9*dmats2[9][32] + coeff0_10*dmats2[10][32] + coeff0_11*dmats2[11][32] + coeff0_12*dmats2[12][32] + coeff0_13*dmats2[13][32] + coeff0_14*dmats2[14][32] + coeff0_15*dmats2[15][32] + coeff0_16*dmats2[16][32] + coeff0_17*dmats2[17][32] + coeff0_18*dmats2[18][32] + coeff0_19*dmats2[19][32] + coeff0_20*dmats2[20][32] + coeff0_21*dmats2[21][32] + coeff0_22*dmats2[22][32] + coeff0_23*dmats2[23][32] + coeff0_24*dmats2[24][32] + coeff0_25*dmats2[25][32] + coeff0_26*dmats2[26][32] + coeff0_27*dmats2[27][32] + coeff0_28*dmats2[28][32] + coeff0_29*dmats2[29][32] + coeff0_30*dmats2[30][32] + coeff0_31*dmats2[31][32] + coeff0_32*dmats2[32][32] + coeff0_33*dmats2[33][32] + coeff0_34*dmats2[34][32];
          new_coeff0_33 = coeff0_0*dmats2[0][33] + coeff0_1*dmats2[1][33] + coeff0_2*dmats2[2][33] + coeff0_3*dmats2[3][33] + coeff0_4*dmats2[4][33] + coeff0_5*dmats2[5][33] + coeff0_6*dmats2[6][33] + coeff0_7*dmats2[7][33] + coeff0_8*dmats2[8][33] + coeff0_9*dmats2[9][33] + coeff0_10*dmats2[10][33] + coeff0_11*dmats2[11][33] + coeff0_12*dmats2[12][33] + coeff0_13*dmats2[13][33] + coeff0_14*dmats2[14][33] + coeff0_15*dmats2[15][33] + coeff0_16*dmats2[16][33] + coeff0_17*dmats2[17][33] + coeff0_18*dmats2[18][33] + coeff0_19*dmats2[19][33] + coeff0_20*dmats2[20][33] + coeff0_21*dmats2[21][33] + coeff0_22*dmats2[22][33] + coeff0_23*dmats2[23][33] + coeff0_24*dmats2[24][33] + coeff0_25*dmats2[25][33] + coeff0_26*dmats2[26][33] + coeff0_27*dmats2[27][33] + coeff0_28*dmats2[28][33] + coeff0_29*dmats2[29][33] + coeff0_30*dmats2[30][33] + coeff0_31*dmats2[31][33] + coeff0_32*dmats2[32][33] + coeff0_33*dmats2[33][33] + coeff0_34*dmats2[34][33];
          new_coeff0_34 = coeff0_0*dmats2[0][34] + coeff0_1*dmats2[1][34] + coeff0_2*dmats2[2][34] + coeff0_3*dmats2[3][34] + coeff0_4*dmats2[4][34] + coeff0_5*dmats2[5][34] + coeff0_6*dmats2[6][34] + coeff0_7*dmats2[7][34] + coeff0_8*dmats2[8][34] + coeff0_9*dmats2[9][34] + coeff0_10*dmats2[10][34] + coeff0_11*dmats2[11][34] + coeff0_12*dmats2[12][34] + coeff0_13*dmats2[13][34] + coeff0_14*dmats2[14][34] + coeff0_15*dmats2[15][34] + coeff0_16*dmats2[16][34] + coeff0_17*dmats2[17][34] + coeff0_18*dmats2[18][34] + coeff0_19*dmats2[19][34] + coeff0_20*dmats2[20][34] + coeff0_21*dmats2[21][34] + coeff0_22*dmats2[22][34] + coeff0_23*dmats2[23][34] + coeff0_24*dmats2[24][34] + coeff0_25*dmats2[25][34] + coeff0_26*dmats2[26][34] + coeff0_27*dmats2[27][34] + coeff0_28*dmats2[28][34] + coeff0_29*dmats2[29][34] + coeff0_30*dmats2[30][34] + coeff0_31*dmats2[31][34] + coeff0_32*dmats2[32][34] + coeff0_33*dmats2[33][34] + coeff0_34*dmats2[34][34];
        }
    
      }
      // Compute derivatives on reference element as dot product of coefficients and basisvalues
      derivatives[deriv_num] = new_coeff0_0*basisvalue0 + new_coeff0_1*basisvalue1 + new_coeff0_2*basisvalue2 + new_coeff0_3*basisvalue3 + new_coeff0_4*basisvalue4 + new_coeff0_5*basisvalue5 + new_coeff0_6*basisvalue6 + new_coeff0_7*basisvalue7 + new_coeff0_8*basisvalue8 + new_coeff0_9*basisvalue9 + new_coeff0_10*basisvalue10 + new_coeff0_11*basisvalue11 + new_coeff0_12*basisvalue12 + new_coeff0_13*basisvalue13 + new_coeff0_14*basisvalue14 + new_coeff0_15*basisvalue15 + new_coeff0_16*basisvalue16 + new_coeff0_17*basisvalue17 + new_coeff0_18*basisvalue18 + new_coeff0_19*basisvalue19 + new_coeff0_20*basisvalue20 + new_coeff0_21*basisvalue21 + new_coeff0_22*basisvalue22 + new_coeff0_23*basisvalue23 + new_coeff0_24*basisvalue24 + new_coeff0_25*basisvalue25 + new_coeff0_26*basisvalue26 + new_coeff0_27*basisvalue27 + new_coeff0_28*basisvalue28 + new_coeff0_29*basisvalue29 + new_coeff0_30*basisvalue30 + new_coeff0_31*basisvalue31 + new_coeff0_32*basisvalue32 + new_coeff0_33*basisvalue33 + new_coeff0_34*basisvalue34;
    }
    
    // Transform derivatives back to physical element
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        values[row] += transform[row][col]*derivatives[col];
      }
    }
    // Delete pointer to array of derivatives on FIAT element
    delete [] derivatives;
    
    // Delete pointer to array of combinations of derivatives and transform
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      delete [] combinations[row];
      delete [] transform[row];
    }
    
    delete [] combinations;
    delete [] transform;
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis_derivatives() is not yet implemented.");
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // The reference points, direction and weights:
    const static double X[35][1][3] = {{{0, 0, 0}}, {{1, 0, 0}}, {{0, 1, 0}}, {{0, 0, 1}}, {{0, 0.75, 0.25}}, {{0, 0.5, 0.5}}, {{0, 0.25, 0.75}}, {{0.75, 0, 0.25}}, {{0.5, 0, 0.5}}, {{0.25, 0, 0.75}}, {{0.75, 0.25, 0}}, {{0.5, 0.5, 0}}, {{0.25, 0.75, 0}}, {{0, 0, 0.25}}, {{0, 0, 0.5}}, {{0, 0, 0.75}}, {{0, 0.25, 0}}, {{0, 0.5, 0}}, {{0, 0.75, 0}}, {{0.25, 0, 0}}, {{0.5, 0, 0}}, {{0.75, 0, 0}}, {{0.5, 0.25, 0.25}}, {{0.25, 0.5, 0.25}}, {{0.25, 0.25, 0.5}}, {{0, 0.25, 0.25}}, {{0, 0.5, 0.25}}, {{0, 0.25, 0.5}}, {{0.25, 0, 0.25}}, {{0.5, 0, 0.25}}, {{0.25, 0, 0.5}}, {{0.25, 0.25, 0}}, {{0.5, 0.25, 0}}, {{0.25, 0.5, 0}}, {{0.25, 0.25, 0.25}}};
    const static double W[35][1] = {{1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}};
    const static double D[35][1][1] = {{{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}};
    
    const double * const * x = c.coordinates;
    double result = 0.0;
    // Iterate over the points:
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0][0] - X[i][0][1] - X[i][0][2];
    const double w1 = X[i][0][0];
    const double w2 = X[i][0][1];
    const double w3 = X[i][0][2];
    
    // Compute affine mapping y = F(X)
    double y[3];
    y[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0] + w3*x[3][0];
    y[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1] + w3*x[3][1];
    y[2] = w0*x[0][2] + w1*x[1][2] + w2*x[2][2] + w3*x[3][2];
    
    // Evaluate function at physical points
    double values[1];
    f.evaluate(values, y, c);
    
    // Map function values using appropriate mapping
    // Affine map: Do nothing
    
    // Note that we do not map the weights (yet).
    
    // Take directional components
    for(int k = 0; k < 1; k++)
      result += values[k]*D[i][0][k];
    // Multiply by weights 
    result *= W[i][0];
    
    return result;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate at vertices and use affine mapping
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new UFC_Poisson3D_4LinearForm_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class UFC_Poisson3D_4LinearForm_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  UFC_Poisson3D_4LinearForm_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson3D_4LinearForm_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', 'tetrahedron', 4)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 35;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_02 = element_coordinates[3][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
    const double J_12 = element_coordinates[3][1] - element_coordinates[0][1];
    const double J_20 = element_coordinates[1][2] - element_coordinates[0][2];
    const double J_21 = element_coordinates[2][2] - element_coordinates[0][2];
    const double J_22 = element_coordinates[3][2] - element_coordinates[0][2];
      
    // Compute sub determinants
    const double d00 = J_11*J_22 - J_12*J_21;
    const double d01 = J_12*J_20 - J_10*J_22;
    const double d02 = J_10*J_21 - J_11*J_20;
    
    const double d10 = J_02*J_21 - J_01*J_22;
    const double d11 = J_00*J_22 - J_02*J_20;
    const double d12 = J_01*J_20 - J_00*J_21;
    
    const double d20 = J_01*J_12 - J_02*J_11;
    const double d21 = J_02*J_10 - J_00*J_12;
    const double d22 = J_00*J_11 - J_01*J_10;
      
    // Compute determinant of Jacobian
    double detJ = J_00*d00 + J_10*d10 + J_20*d20;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = d00*(element_coordinates[0][0] - element_coordinates[2][0] - element_coordinates[3][0]) \
                    + d10*(element_coordinates[0][1] - element_coordinates[2][1] - element_coordinates[3][1]) \
                    + d20*(element_coordinates[0][2] - element_coordinates[2][2] - element_coordinates[3][2]);
    
    const double C1 = d01*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[3][0]) \
                    + d11*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[3][1]) \
                    + d21*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[3][2]);
    
    const double C2 = d02*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[2][0]) \
                    + d12*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[2][1]) \
                    + d22*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[2][2]);
    
    // Get coordinates and map to the UFC reference element
    double x = (C0 + d00*coordinates[0] + d10*coordinates[1] + d20*coordinates[2]) / detJ;
    double y = (C1 + d01*coordinates[0] + d11*coordinates[1] + d21*coordinates[2]) / detJ;
    double z = (C2 + d02*coordinates[0] + d12*coordinates[1] + d22*coordinates[2]) / detJ;
    
    // Map coordinates to the reference cube
    if (std::abs(y + z - 1.0) < 1e-14)
      x = 1.0;
    else
      x = -2.0 * x/(y + z - 1.0) - 1.0;
    if (std::abs(z - 1.0) < 1e-14)
      y = -1.0;
    else
      y = 2.0 * y/(1.0 - z) - 1.0;
    z = 2.0 * z - 1.0;
    
    // Reset values
    *values = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    const double scalings_y_4 = scalings_y_3*(0.5 - 0.5*y);
    const double scalings_z_0 = 1;
    const double scalings_z_1 = scalings_z_0*(0.5 - 0.5*z);
    const double scalings_z_2 = scalings_z_1*(0.5 - 0.5*z);
    const double scalings_z_3 = scalings_z_2*(0.5 - 0.5*z);
    const double scalings_z_4 = scalings_z_3*(0.5 - 0.5*z);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    const double psitilde_a_4 = 1.75*x*psitilde_a_3 - 0.75*psitilde_a_2;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_0_4 = 0.0285714285714286*psitilde_bs_0_3 + 1.8*y*psitilde_bs_0_3 - 0.771428571428571*psitilde_bs_0_2;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_1_3 = 0.285714285714286*psitilde_bs_1_2 + 2*y*psitilde_bs_1_2 - 0.714285714285714*psitilde_bs_1_1;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_2_2 = 1.02040816326531*psitilde_bs_2_1 + 2.57142857142857*y*psitilde_bs_2_1 - 0.551020408163265*psitilde_bs_2_0;
    const double psitilde_bs_3_0 = 1;
    const double psitilde_bs_3_1 = 4.5*y + 3.5;
    const double psitilde_bs_4_0 = 1;
    
    // Compute psitilde_cs
    const double psitilde_cs_00_0 = 1;
    const double psitilde_cs_00_1 = 2*z + 1;
    const double psitilde_cs_00_2 = 0.3125*psitilde_cs_00_1 + 1.875*z*psitilde_cs_00_1 - 0.5625*psitilde_cs_00_0;
    const double psitilde_cs_00_3 = 0.155555555555556*psitilde_cs_00_2 + 1.86666666666667*z*psitilde_cs_00_2 - 0.711111111111111*psitilde_cs_00_1;
    const double psitilde_cs_00_4 = 0.09375*psitilde_cs_00_3 + 1.875*z*psitilde_cs_00_3 - 0.78125*psitilde_cs_00_2;
    const double psitilde_cs_01_0 = 1;
    const double psitilde_cs_01_1 = 3*z + 2;
    const double psitilde_cs_01_2 = 0.777777777777778*psitilde_cs_01_1 + 2.33333333333333*z*psitilde_cs_01_1 - 0.555555555555556*psitilde_cs_01_0;
    const double psitilde_cs_01_3 = 0.428571428571429*psitilde_cs_01_2 + 2.14285714285714*z*psitilde_cs_01_2 - 0.714285714285714*psitilde_cs_01_1;
    const double psitilde_cs_02_0 = 1;
    const double psitilde_cs_02_1 = 4*z + 3;
    const double psitilde_cs_02_2 = 1.265625*psitilde_cs_02_1 + 2.8125*z*psitilde_cs_02_1 - 0.546875*psitilde_cs_02_0;
    const double psitilde_cs_03_0 = 1;
    const double psitilde_cs_03_1 = 5*z + 4;
    const double psitilde_cs_04_0 = 1;
    const double psitilde_cs_10_0 = 1;
    const double psitilde_cs_10_1 = 3*z + 2;
    const double psitilde_cs_10_2 = 0.777777777777778*psitilde_cs_10_1 + 2.33333333333333*z*psitilde_cs_10_1 - 0.555555555555556*psitilde_cs_10_0;
    const double psitilde_cs_10_3 = 0.428571428571429*psitilde_cs_10_2 + 2.14285714285714*z*psitilde_cs_10_2 - 0.714285714285714*psitilde_cs_10_1;
    const double psitilde_cs_11_0 = 1;
    const double psitilde_cs_11_1 = 4*z + 3;
    const double psitilde_cs_11_2 = 1.265625*psitilde_cs_11_1 + 2.8125*z*psitilde_cs_11_1 - 0.546875*psitilde_cs_11_0;
    const double psitilde_cs_12_0 = 1;
    const double psitilde_cs_12_1 = 5*z + 4;
    const double psitilde_cs_13_0 = 1;
    const double psitilde_cs_20_0 = 1;
    const double psitilde_cs_20_1 = 4*z + 3;
    const double psitilde_cs_20_2 = 1.265625*psitilde_cs_20_1 + 2.8125*z*psitilde_cs_20_1 - 0.546875*psitilde_cs_20_0;
    const double psitilde_cs_21_0 = 1;
    const double psitilde_cs_21_1 = 5*z + 4;
    const double psitilde_cs_22_0 = 1;
    const double psitilde_cs_30_0 = 1;
    const double psitilde_cs_30_1 = 5*z + 4;
    const double psitilde_cs_31_0 = 1;
    const double psitilde_cs_40_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.866025403784439*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_0;
    const double basisvalue1 = 2.73861278752583*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_0;
    const double basisvalue2 = 1.58113883008419*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_0;
    const double basisvalue3 = 1.11803398874989*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_1;
    const double basisvalue4 = 5.1234753829798*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_0;
    const double basisvalue5 = 3.96862696659689*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_0;
    const double basisvalue6 = 2.29128784747792*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_0;
    const double basisvalue7 = 3.24037034920393*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_1;
    const double basisvalue8 = 1.87082869338697*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_1;
    const double basisvalue9 = 1.3228756555323*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_2;
    const double basisvalue10 = 7.93725393319377*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_0;
    const double basisvalue11 = 6.70820393249937*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_0;
    const double basisvalue12 = 5.19615242270663*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_0;
    const double basisvalue13 = 3*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_0;
    const double basisvalue14 = 5.80947501931113*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_1;
    const double basisvalue15 = 4.5*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_1;
    const double basisvalue16 = 2.59807621135332*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_1;
    const double basisvalue17 = 3.67423461417477*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_2;
    const double basisvalue18 = 2.12132034355964*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_2;
    const double basisvalue19 = 1.5*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_3;
    const double basisvalue20 = 11.1242977306435*psitilde_a_4*scalings_y_4*psitilde_bs_4_0*scalings_z_4*psitilde_cs_40_0;
    const double basisvalue21 = 9.81070843517429*psitilde_a_3*scalings_y_3*psitilde_bs_3_1*scalings_z_4*psitilde_cs_31_0;
    const double basisvalue22 = 8.2915619758885*psitilde_a_2*scalings_y_2*psitilde_bs_2_2*scalings_z_4*psitilde_cs_22_0;
    const double basisvalue23 = 6.42261628933256*psitilde_a_1*scalings_y_1*psitilde_bs_1_3*scalings_z_4*psitilde_cs_13_0;
    const double basisvalue24 = 3.70809924354783*psitilde_a_0*scalings_y_0*psitilde_bs_0_4*scalings_z_4*psitilde_cs_04_0;
    const double basisvalue25 = 8.77496438739212*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_1;
    const double basisvalue26 = 7.41619848709566*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_1;
    const double basisvalue27 = 5.74456264653803*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_1;
    const double basisvalue28 = 3.3166247903554*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_1;
    const double basisvalue29 = 6.42261628933256*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_2;
    const double basisvalue30 = 4.9749371855331*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_2;
    const double basisvalue31 = 2.87228132326901*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_2;
    const double basisvalue32 = 4.06201920231798*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_3;
    const double basisvalue33 = 2.34520787991171*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_3;
    const double basisvalue34 = 1.6583123951777*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_4;
    
    // Table(s) of coefficients
    const static double coefficients0[35][35] = \
    {{-0.0137464349807051, -0.0144900147488139, -0.00836581391578937, -0.00591552374999941, 0, 0, 0, 0, 0, 0, -0.00671936840905293, -0.00567890279999946, -0.00439885919382571, -0.00253968253968254, -0.00491807409042211, -0.00380952380952381, -0.00219942959691287, -0.00311046316543895, -0.0017958267458706, -0.00126984126984128, 0.0136980289516341, 0.0120805260192622, 0.010209907964538, 0.00790856070259325, 0.00456600965054471, 0.0108051509532101, 0.00913201930108942, 0.00707363173407281, 0.00408396318581522, 0.00790856070259324, 0.00612594477872282, 0.0035368158670364, 0.00500181296677924, 0.00288779806280616, 0.00204198159290761},
    {-0.0137464349807054, 0.0144900147488139, -0.00836581391578934, -0.00591552374999945, 0, 0, 0, 0, 0, 0, 0.00671936840905293, -0.00567890279999946, 0.00439885919382572, -0.00253968253968254, -0.00491807409042213, 0.00380952380952382, -0.00219942959691286, 0.00311046316543897, -0.0017958267458706, -0.00126984126984127, 0.0136980289516341, -0.0120805260192622, 0.010209907964538, -0.00790856070259325, 0.00456600965054471, -0.0108051509532101, 0.00913201930108941, -0.0070736317340728, 0.00408396318581521, 0.00790856070259325, -0.00612594477872282, 0.0035368158670364, -0.00500181296677924, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807053, 0, 0.0167316278315787, -0.00591552374999946, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0101587301587302, 0, 0, -0.00659828879073857, 0, 0.00359165349174119, -0.00126984126984127, 0, 0, 0, 0, 0.0228300482527235, 0, 0, 0, -0.0163358527432608, 0, 0, 0.0106104476011092, 0, -0.0057755961256123, 0.00204198159290761},
    {-0.0137464349807054, 0, 0, 0.0177465712499983, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0126984126984127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0306297238936141},
    {0.0439885919382572, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0, 0.0406349206349206, 0, 0, 0.00439885919382572, 0, -0.0143666139669648, 0.00761904761904763, 0, 0, 0, 0, 0, 0, 0, 0, 0.0367556686723369, 0, 0, -0.0424417904044368, 0, 0.0303218796594646, -0.0122518895574456},
    {-0.0329914439536931, 0, -0.0200779533978945, -0.0141972569999986, 0, 0, -0.00969857289937744, 0, 0.0712696645099798, -0.050395263067897, 0, 0, 0, 0, 0, 0, 0.0461880215351701, 0, 0.0107749604752236, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0495154221385096, 0, -0.0606437593189292, 0.0306297238936141},
    {0.0439885919382573, 0, 0.0267706045305259, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0, 0.0359165349174119, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0505364660991076, -0.0408396318581522},
    {0.0439885919382573, 0.0231840235981023, -0.0133853022652629, 0.0189296759999982, 0.0433733365754904, -0.0335968420452647, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, -0.0227156111999979, 0.0175954367753029, -0.0101587301587302, 0.00327871606028141, -0.00253968253968255, 0.0014662863979419, -0.0124418526617558, 0.00718330698348238, 0.00761904761904763, 0, 0, 0, 0, 0, 0.0243115896447228, -0.0205470434274512, 0.0159156714016638, -0.00918891716808423, -0.031634242810373, 0.0245037791148913, -0.0141472634681456, 0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, -0.0173880176985766, 0.0100389766989472, -0.0141972569999986, -0.00722888942924838, 0.00559947367421081, -0.00323285763312582, 0.0617213399848368, -0.03563483225499, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, -0.0266666666666667, 0.01539600717839, 0.00933138949631686, -0.00538748023761177, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, -0.0285877423007065, 0.0165051407128365, -0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, 0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0.0311046316543895, -0.017958267458706, 0.0253968253968255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754903, -0.0335968420452647, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, 0, -0.0117302911835353, 0.0101587301587302, -0.0229510124219699, 0.00761904761904761, -0.00146628639794191, 0.0165891368823411, -0.0071833069834824, -0.00761904761904763, 0, 0.0241610520385245, -0.0357346778758831, 0.0355885231616696, -0.0228300482527235, -0.00270128773830253, -0.0114150241263618, 0.0159156714016638, -0.0112308987609918, 0.00395428035129663, 0.00306297238936141, -0.0035368158670364, -0.00375135972508443, 0.00072194951570154, 0.00204198159290761},
    {-0.0329914439536929, -0.0173880176985768, -0.0100389766989472, 0.0141972569999986, -0.00722888942924839, 0.0615942104163185, -0.0614242950293904, -0.00685792666498187, -0.00395942580611001, 0.00559947367421077, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042213, -0.0266666666666667, 0.0175954367753029, 0.00933138949631688, 0.00538748023761179, -0.00761904761904761, 0, 0, 0.0357346778758831, -0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108943, 0, 0.00408396318581521, 0.00131809345043221, 0.00714693557517662, -0.00471575448938186, -0.00250090648338962, -0.00144389903140307, 0.00204198159290761},
    {0.0439885919382572, 0.0231840235981022, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0.0293257279588382, 0.0101587301587302, 0, -0.0101587301587302, -0.0219942959691286, 0.00207364211029264, 0.017958267458706, -0.00761904761904762, 0, 0, 0, 0.0395428035129662, -0.0456600965054471, 0, 0, -0.017684079335182, 0.0142938711503532, 0, 0.00612594477872282, 0, -0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.043988591938257, -0.0231840235981023, -0.0133853022652629, 0.0189296759999983, 0.0433733365754903, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484216, -0.0268774736362117, -0.0227156111999979, -0.0175954367753029, -0.0101587301587302, 0.00327871606028139, 0.00253968253968253, 0.0014662863979419, 0.0124418526617558, 0.00718330698348236, 0.00761904761904761, 0, 0, 0, 0, 0, -0.0243115896447228, -0.0205470434274512, -0.0159156714016638, -0.00918891716808424, -0.031634242810373, -0.0245037791148913, -0.0141472634681456, -0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, 0.0173880176985768, 0.0100389766989471, -0.0141972569999987, -0.00722888942924838, -0.00559947367421082, -0.00323285763312581, -0.0617213399848367, -0.03563483225499, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, 0.0266666666666667, 0.01539600717839, -0.00933138949631689, -0.00538748023761178, -0.019047619047619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, 0.0285877423007065, 0.0165051407128365, 0.0525190361511819, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382572, -0.0231840235981023, -0.0133853022652629, 0.0189296759999981, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, -0.0311046316543896, -0.017958267458706, 0.0253968253968255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484216, -0.0268774736362117, 0, 0.0117302911835352, 0.0101587301587302, -0.0229510124219699, -0.00761904761904762, -0.00146628639794191, -0.0165891368823411, -0.00718330698348239, -0.00761904761904763, 0, -0.0241610520385245, -0.0357346778758831, -0.0355885231616696, -0.0228300482527235, 0.00270128773830254, -0.0114150241263618, -0.0159156714016638, -0.0112308987609918, 0.00395428035129662, -0.00306297238936141, -0.0035368158670364, 0.00375135972508443, 0.000721949515701533, 0.00204198159290761},
    {-0.0329914439536929, 0.0173880176985766, -0.0100389766989472, 0.0141972569999987, -0.00722888942924841, -0.0615942104163186, -0.0614242950293904, 0.00685792666498186, -0.00395942580610998, 0.00559947367421075, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042213, 0.0266666666666667, 0.0175954367753029, -0.00933138949631688, 0.00538748023761179, -0.00761904761904763, 0, 0, 0.0357346778758831, 0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108943, 0, 0.0040839631858152, 0.00131809345043222, -0.00714693557517663, -0.00471575448938187, 0.00250090648338962, -0.00144389903140308, 0.00204198159290761},
    {0.0439885919382573, -0.0231840235981022, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, -0.0293257279588382, 0.0101587301587302, 0, 0.0101587301587301, -0.0219942959691286, -0.00207364211029265, 0.017958267458706, -0.00761904761904761, 0, 0, 0, -0.0395428035129663, -0.0456600965054471, 0, 0, 0.017684079335182, 0.0142938711503532, 0, -0.00612594477872281, 0, 0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.0439885919382571, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484215, 0.0134387368181058, -0.0113578055999989, -0.0205280095711867, -0.0152380952380952, -0.00983614818084424, -0.0177777777777778, -0.0131965775814772, -0.0145154947720485, -0.0107749604752236, -0.00761904761904761, -0.0547921158065365, -0.0241610520385245, -0.00510495398226901, 0.00395428035129663, 0.00456600965054471, -0.0216103019064202, -0.00456600965054471, 0.00353681586703639, 0.00408396318581521, -0.00395428035129661, 0.0030629723893614, 0.0035368158670364, 0.00250090648338961, 0.00288779806280615, 0.00204198159290761},
    {-0.0329914439536931, 0, 0.0200779533978945, 0.0141972569999987, -0.0867466731509807, 0, 0.00969857289937743, 0, 0.00791885161221998, 0.00559947367421076, 0, 0.0340734167999968, 0, -0.0152380952380953, 0.0295084445425327, 0, -0.0131965775814772, 0, -0.0107749604752236, -0.00761904761904762, 0.0821881737098047, 0, -0.010209907964538, 0, 0.00456600965054471, 0, -0.00913201930108944, 0, 0.00408396318581521, -0.00790856070259326, 0, 0.0035368158670364, 0, 0.00288779806280615, 0.00204198159290761},
    {0.0439885919382573, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754903, -0.0335968420452646, 0.0193971457987549, -0.0274317066599274, 0.01583770322444, 0.0111989473484215, -0.0134387368181058, -0.0113578055999989, 0.0205280095711867, -0.0152380952380952, -0.00983614818084423, 0.0177777777777778, -0.0131965775814772, 0.0145154947720485, -0.0107749604752236, -0.00761904761904761, -0.0547921158065365, 0.0241610520385245, -0.005104953982269, -0.00395428035129662, 0.00456600965054471, 0.0216103019064202, -0.0045660096505447, -0.0035368158670364, 0.00408396318581521, -0.00395428035129662, -0.00306297238936141, 0.00353681586703641, -0.00250090648338962, 0.00288779806280615, 0.00204198159290761},
    {0.0439885919382573, 0.139104141588614, -0.080311813591578, -0.0567890279999947, 0.0578311154339872, 0.0335968420452646, -0.0420271492306356, 0.0274317066599275, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, -0.0586514559176763, 0.0406349206349207, 0.039344592723377, 0.00253968253968254, -0.0109971479845643, -0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, -0.053052238005546, 0.0367556686723369, -0.0105447476034577, -0.0245037791148913, 0.0235787724469093, 0.0175063453837273, 0, -0.0122518895574457},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0, 0.0783926314389509, 0.0096985728993774, -0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, 0.0586514559176763, -0.0609523809523809, 0, 0.033015873015873, 0.0241937255660415, -0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, 0.053052238005546, -0.0551335030085053, 0, -0.0326717054865217, 0.0141472634681456, 0.00875317269186366, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382571, 0, 0, 0.170367083999984, 0, -0.0111989473484216, 0.00969857289937744, 0.0822951199797824, 0.0475131096733199, -0.0167984210226324, 0, 0, 0, 0, 0, 0.0533333333333333, -0.0461880215351701, 0.0435464843161454, 0.0251415744421883, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.057175484601413, -0.0495154221385096, -0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382571, -0.139104141588614, -0.0803118135915779, -0.0567890279999947, 0.0578311154339871, -0.0335968420452646, -0.0420271492306356, -0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, 0.0586514559176763, 0.0406349206349206, 0.0393445927233769, -0.00253968253968253, -0.0109971479845643, 0.0601356211984865, 0.0179582674587059, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, 0.053052238005546, 0.0367556686723369, -0.0105447476034577, 0.0245037791148913, 0.0235787724469093, -0.0175063453837273, 0, -0.0122518895574457},
    {0.0439885919382571, 0, 0.160623627183156, -0.0567890279999946, 0, -0.0783926314389509, 0.00969857289937745, 0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, -0.0586514559176763, -0.0609523809523809, 0, -0.033015873015873, 0.0241937255660415, 0.0145154947720485, -0.0610581093596003, 0.0393650793650793, 0, 0, 0, 0, 0, 0, 0, -0.053052238005546, -0.0551335030085053, 0, 0.0326717054865217, 0.0141472634681456, -0.00875317269186368, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0, 0.0111989473484215, 0.00969857289937745, -0.0822951199797824, 0.0475131096733199, -0.0167984210226323, 0, 0, 0, 0, 0, -0.0533333333333333, -0.0461880215351701, -0.0435464843161453, 0.0251415744421883, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0571754846014129, -0.0495154221385096, 0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754903, 0.0447957893936862, 0.0484928644968872, -0.0548634133198549, 0, -0.0167984210226323, 0.0806324209086351, 0.0227156111999979, -0.0058651455917676, -0.0101587301587302, -0.00327871606028142, 0.0304761904761905, 0.0271262983619253, 0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, 0.0729347689341683, 0.0205470434274512, -0.00530522380055458, -0.00918891716808423, 0.031634242810373, -0.00816792637163039, -0.0141472634681456, -0.00875317269186365, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382571, 0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754904, -0.0447957893936862, 0.0484928644968873, 0.0548634133198549, 0, -0.0167984210226323, -0.0806324209086351, 0.0227156111999979, 0.0058651455917676, -0.0101587301587302, -0.00327871606028142, -0.0304761904761905, 0.0271262983619253, -0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, -0.0729347689341683, 0.0205470434274512, 0.00530522380055459, -0.00918891716808424, 0.031634242810373, 0.00816792637163042, -0.0141472634681456, 0.00875317269186367, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0.0144577788584968, 0, -0.00323285763312585, 0, -0.0950262193466398, -0.0167984210226323, 0, 0, 0, 0, -0.0688530372659096, 0, 0.01539600717839, 0, -0.0502831488843767, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0738132332242036, 0, 0.0165051407128365, 0, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754903, -0.0447957893936862, -0.00969857289937743, 0.0548634133198549, 0.03167540644888, 0.0391963157194754, 0.0806324209086351, 0, 0.0527863103259086, 0.0609523809523809, 0.0229510124219699, 0.0101587301587302, 0.0168622935763319, -0.0124418526617558, -0.00718330698348239, -0.013968253968254, 0, 0.0724831561155734, 0.0357346778758831, -0.0118628410538899, -0.0228300482527235, -0.00810386321490759, 0.0114150241263618, -0.00530522380055459, -0.0112308987609918, -0.00395428035129662, -0.00102099079645379, -0.0035368158670364, 0.00125045324169481, 0.000721949515701537, 0.00204198159290762},
    {0.0439885919382571, 0.139104141588614, -0.080311813591578, -0.0567890279999947, -0.0433733365754904, 0.0447957893936862, -0.00969857289937742, -0.0548634133198549, 0.0316754064488799, 0.0391963157194754, -0.0806324209086351, 0, -0.0527863103259086, 0.060952380952381, 0.0229510124219699, -0.0101587301587302, 0.0168622935763319, 0.0124418526617558, -0.00718330698348236, -0.013968253968254, 0, -0.0724831561155734, 0.0357346778758831, 0.0118628410538899, -0.0228300482527236, 0.00810386321490761, 0.0114150241263618, 0.00530522380055459, -0.0112308987609918, -0.00395428035129662, 0.00102099079645379, -0.0035368158670364, -0.0012504532416948, 0.000721949515701528, 0.0020419815929076},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0.0144577788584968, 0, -0.0614242950293905, 0, -0.0633508128977598, 0.0391963157194754, 0, -0.0681468335999936, 0, -0.0914285714285715, 0.00983614818084423, 0, 0.0285925847598672, 0, 0.0143666139669647, -0.0139682539682539, 0, 0, -0.0714693557517662, 0, 0.0456600965054471, 0, 0.0182640386021788, 0, 0.0040839631858152, -0.00263618690086443, 0, -0.00471575448938186, 0, -0.00144389903140306, 0.00204198159290759},
    {0.351908735506058, 0, 0, 0, -0.115662230867974, 0, -0.129314305325032, 0, 0, -0.134387368181059, 0, -0.0908624447999914, 0, 0.0406349206349206, -0.0786891854467539, 0, -0.0879771838765144, 0, 0, 0.0711111111111111, 0, 0, 0, 0, 0, 0, -0.0821881737098047, 0, 0.0367556686723369, 0.0210894952069153, 0, 0.0235787724469093, 0, 0, -0.0122518895574456}};
    
    // Extract relevant coefficients
    const double coeff0_0 = coefficients0[dof][0];
    const double coeff0_1 = coefficients0[dof][1];
    const double coeff0_2 = coefficients0[dof][2];
    const double coeff0_3 = coefficients0[dof][3];
    const double coeff0_4 = coefficients0[dof][4];
    const double coeff0_5 = coefficients0[dof][5];
    const double coeff0_6 = coefficients0[dof][6];
    const double coeff0_7 = coefficients0[dof][7];
    const double coeff0_8 = coefficients0[dof][8];
    const double coeff0_9 = coefficients0[dof][9];
    const double coeff0_10 = coefficients0[dof][10];
    const double coeff0_11 = coefficients0[dof][11];
    const double coeff0_12 = coefficients0[dof][12];
    const double coeff0_13 = coefficients0[dof][13];
    const double coeff0_14 = coefficients0[dof][14];
    const double coeff0_15 = coefficients0[dof][15];
    const double coeff0_16 = coefficients0[dof][16];
    const double coeff0_17 = coefficients0[dof][17];
    const double coeff0_18 = coefficients0[dof][18];
    const double coeff0_19 = coefficients0[dof][19];
    const double coeff0_20 = coefficients0[dof][20];
    const double coeff0_21 = coefficients0[dof][21];
    const double coeff0_22 = coefficients0[dof][22];
    const double coeff0_23 = coefficients0[dof][23];
    const double coeff0_24 = coefficients0[dof][24];
    const double coeff0_25 = coefficients0[dof][25];
    const double coeff0_26 = coefficients0[dof][26];
    const double coeff0_27 = coefficients0[dof][27];
    const double coeff0_28 = coefficients0[dof][28];
    const double coeff0_29 = coefficients0[dof][29];
    const double coeff0_30 = coefficients0[dof][30];
    const double coeff0_31 = coefficients0[dof][31];
    const double coeff0_32 = coefficients0[dof][32];
    const double coeff0_33 = coefficients0[dof][33];
    const double coeff0_34 = coefficients0[dof][34];
    
    // Compute value(s)
    *values = coeff0_0*basisvalue0 + coeff0_1*basisvalue1 + coeff0_2*basisvalue2 + coeff0_3*basisvalue3 + coeff0_4*basisvalue4 + coeff0_5*basisvalue5 + coeff0_6*basisvalue6 + coeff0_7*basisvalue7 + coeff0_8*basisvalue8 + coeff0_9*basisvalue9 + coeff0_10*basisvalue10 + coeff0_11*basisvalue11 + coeff0_12*basisvalue12 + coeff0_13*basisvalue13 + coeff0_14*basisvalue14 + coeff0_15*basisvalue15 + coeff0_16*basisvalue16 + coeff0_17*basisvalue17 + coeff0_18*basisvalue18 + coeff0_19*basisvalue19 + coeff0_20*basisvalue20 + coeff0_21*basisvalue21 + coeff0_22*basisvalue22 + coeff0_23*basisvalue23 + coeff0_24*basisvalue24 + coeff0_25*basisvalue25 + coeff0_26*basisvalue26 + coeff0_27*basisvalue27 + coeff0_28*basisvalue28 + coeff0_29*basisvalue29 + coeff0_30*basisvalue30 + coeff0_31*basisvalue31 + coeff0_32*basisvalue32 + coeff0_33*basisvalue33 + coeff0_34*basisvalue34;
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis() is not yet implemented.");
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_02 = element_coordinates[3][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
    const double J_12 = element_coordinates[3][1] - element_coordinates[0][1];
    const double J_20 = element_coordinates[1][2] - element_coordinates[0][2];
    const double J_21 = element_coordinates[2][2] - element_coordinates[0][2];
    const double J_22 = element_coordinates[3][2] - element_coordinates[0][2];
      
    // Compute sub determinants
    const double d00 = J_11*J_22 - J_12*J_21;
    const double d01 = J_12*J_20 - J_10*J_22;
    const double d02 = J_10*J_21 - J_11*J_20;
    
    const double d10 = J_02*J_21 - J_01*J_22;
    const double d11 = J_00*J_22 - J_02*J_20;
    const double d12 = J_01*J_20 - J_00*J_21;
    
    const double d20 = J_01*J_12 - J_02*J_11;
    const double d21 = J_02*J_10 - J_00*J_12;
    const double d22 = J_00*J_11 - J_01*J_10;
      
    // Compute determinant of Jacobian
    double detJ = J_00*d00 + J_10*d10 + J_20*d20;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = d00*(element_coordinates[0][0] - element_coordinates[2][0] - element_coordinates[3][0]) \
                    + d10*(element_coordinates[0][1] - element_coordinates[2][1] - element_coordinates[3][1]) \
                    + d20*(element_coordinates[0][2] - element_coordinates[2][2] - element_coordinates[3][2]);
    
    const double C1 = d01*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[3][0]) \
                    + d11*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[3][1]) \
                    + d21*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[3][2]);
    
    const double C2 = d02*(element_coordinates[0][0] - element_coordinates[1][0] - element_coordinates[2][0]) \
                    + d12*(element_coordinates[0][1] - element_coordinates[1][1] - element_coordinates[2][1]) \
                    + d22*(element_coordinates[0][2] - element_coordinates[1][2] - element_coordinates[2][2]);
    
    // Get coordinates and map to the UFC reference element
    double x = (C0 + d00*coordinates[0] + d10*coordinates[1] + d20*coordinates[2]) / detJ;
    double y = (C1 + d01*coordinates[0] + d11*coordinates[1] + d21*coordinates[2]) / detJ;
    double z = (C2 + d02*coordinates[0] + d12*coordinates[1] + d22*coordinates[2]) / detJ;
    
    // Map coordinates to the reference cube
    if (std::abs(y + z - 1.0) < 1e-14)
      x = 1.0;
    else
      x = -2.0 * x/(y + z - 1.0) - 1.0;
    if (std::abs(z - 1.0) < 1e-14)
      y = -1.0;
    else
      y = 2.0 * y/(1.0 - z) - 1.0;
    z = 2.0 * z - 1.0;
    
    // Compute number of derivatives
    unsigned int num_derivatives = 1;
    
    for (unsigned int j = 0; j < n; j++)
      num_derivatives *= 3;
    
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      combinations[j] = new unsigned int [n];
      for (unsigned int k = 0; k < n; k++)
        combinations[j][k] = 0;
    }
        
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] ={{d00 / detJ, d10 / detJ, d20 / detJ}, {d01 / detJ, d11 / detJ, d21 / detJ}, {d02 / detJ, d12 / detJ, d22 / detJ}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
        
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values
    for (unsigned int j = 0; j < 1*num_derivatives; j++)
      values[j] = 0;
    
    // Map degree of freedom to element degree of freedom
    const unsigned int dof = i;
    
    // Generate scalings
    const double scalings_y_0 = 1;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5*y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5*y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5*y);
    const double scalings_y_4 = scalings_y_3*(0.5 - 0.5*y);
    const double scalings_z_0 = 1;
    const double scalings_z_1 = scalings_z_0*(0.5 - 0.5*z);
    const double scalings_z_2 = scalings_z_1*(0.5 - 0.5*z);
    const double scalings_z_3 = scalings_z_2*(0.5 - 0.5*z);
    const double scalings_z_4 = scalings_z_3*(0.5 - 0.5*z);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1;
    const double psitilde_a_1 = x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1 - 0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.66666666666667*x*psitilde_a_2 - 0.666666666666667*psitilde_a_1;
    const double psitilde_a_4 = 1.75*x*psitilde_a_3 - 0.75*psitilde_a_2;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1;
    const double psitilde_bs_0_1 = 1.5*y + 0.5;
    const double psitilde_bs_0_2 = 0.111111111111111*psitilde_bs_0_1 + 1.66666666666667*y*psitilde_bs_0_1 - 0.555555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2 - 0.7*psitilde_bs_0_1;
    const double psitilde_bs_0_4 = 0.0285714285714286*psitilde_bs_0_3 + 1.8*y*psitilde_bs_0_3 - 0.771428571428571*psitilde_bs_0_2;
    const double psitilde_bs_1_0 = 1;
    const double psitilde_bs_1_1 = 2.5*y + 1.5;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1 - 0.56*psitilde_bs_1_0;
    const double psitilde_bs_1_3 = 0.285714285714286*psitilde_bs_1_2 + 2*y*psitilde_bs_1_2 - 0.714285714285714*psitilde_bs_1_1;
    const double psitilde_bs_2_0 = 1;
    const double psitilde_bs_2_1 = 3.5*y + 2.5;
    const double psitilde_bs_2_2 = 1.02040816326531*psitilde_bs_2_1 + 2.57142857142857*y*psitilde_bs_2_1 - 0.551020408163265*psitilde_bs_2_0;
    const double psitilde_bs_3_0 = 1;
    const double psitilde_bs_3_1 = 4.5*y + 3.5;
    const double psitilde_bs_4_0 = 1;
    
    // Compute psitilde_cs
    const double psitilde_cs_00_0 = 1;
    const double psitilde_cs_00_1 = 2*z + 1;
    const double psitilde_cs_00_2 = 0.3125*psitilde_cs_00_1 + 1.875*z*psitilde_cs_00_1 - 0.5625*psitilde_cs_00_0;
    const double psitilde_cs_00_3 = 0.155555555555556*psitilde_cs_00_2 + 1.86666666666667*z*psitilde_cs_00_2 - 0.711111111111111*psitilde_cs_00_1;
    const double psitilde_cs_00_4 = 0.09375*psitilde_cs_00_3 + 1.875*z*psitilde_cs_00_3 - 0.78125*psitilde_cs_00_2;
    const double psitilde_cs_01_0 = 1;
    const double psitilde_cs_01_1 = 3*z + 2;
    const double psitilde_cs_01_2 = 0.777777777777778*psitilde_cs_01_1 + 2.33333333333333*z*psitilde_cs_01_1 - 0.555555555555556*psitilde_cs_01_0;
    const double psitilde_cs_01_3 = 0.428571428571429*psitilde_cs_01_2 + 2.14285714285714*z*psitilde_cs_01_2 - 0.714285714285714*psitilde_cs_01_1;
    const double psitilde_cs_02_0 = 1;
    const double psitilde_cs_02_1 = 4*z + 3;
    const double psitilde_cs_02_2 = 1.265625*psitilde_cs_02_1 + 2.8125*z*psitilde_cs_02_1 - 0.546875*psitilde_cs_02_0;
    const double psitilde_cs_03_0 = 1;
    const double psitilde_cs_03_1 = 5*z + 4;
    const double psitilde_cs_04_0 = 1;
    const double psitilde_cs_10_0 = 1;
    const double psitilde_cs_10_1 = 3*z + 2;
    const double psitilde_cs_10_2 = 0.777777777777778*psitilde_cs_10_1 + 2.33333333333333*z*psitilde_cs_10_1 - 0.555555555555556*psitilde_cs_10_0;
    const double psitilde_cs_10_3 = 0.428571428571429*psitilde_cs_10_2 + 2.14285714285714*z*psitilde_cs_10_2 - 0.714285714285714*psitilde_cs_10_1;
    const double psitilde_cs_11_0 = 1;
    const double psitilde_cs_11_1 = 4*z + 3;
    const double psitilde_cs_11_2 = 1.265625*psitilde_cs_11_1 + 2.8125*z*psitilde_cs_11_1 - 0.546875*psitilde_cs_11_0;
    const double psitilde_cs_12_0 = 1;
    const double psitilde_cs_12_1 = 5*z + 4;
    const double psitilde_cs_13_0 = 1;
    const double psitilde_cs_20_0 = 1;
    const double psitilde_cs_20_1 = 4*z + 3;
    const double psitilde_cs_20_2 = 1.265625*psitilde_cs_20_1 + 2.8125*z*psitilde_cs_20_1 - 0.546875*psitilde_cs_20_0;
    const double psitilde_cs_21_0 = 1;
    const double psitilde_cs_21_1 = 5*z + 4;
    const double psitilde_cs_22_0 = 1;
    const double psitilde_cs_30_0 = 1;
    const double psitilde_cs_30_1 = 5*z + 4;
    const double psitilde_cs_31_0 = 1;
    const double psitilde_cs_40_0 = 1;
    
    // Compute basisvalues
    const double basisvalue0 = 0.866025403784439*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_0;
    const double basisvalue1 = 2.73861278752583*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_0;
    const double basisvalue2 = 1.58113883008419*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_0;
    const double basisvalue3 = 1.11803398874989*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_1;
    const double basisvalue4 = 5.1234753829798*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_0;
    const double basisvalue5 = 3.96862696659689*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_0;
    const double basisvalue6 = 2.29128784747792*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_0;
    const double basisvalue7 = 3.24037034920393*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_1;
    const double basisvalue8 = 1.87082869338697*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_1;
    const double basisvalue9 = 1.3228756555323*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_2;
    const double basisvalue10 = 7.93725393319377*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_0;
    const double basisvalue11 = 6.70820393249937*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_0;
    const double basisvalue12 = 5.19615242270663*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_0;
    const double basisvalue13 = 3*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_0;
    const double basisvalue14 = 5.80947501931113*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_1;
    const double basisvalue15 = 4.5*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_1;
    const double basisvalue16 = 2.59807621135332*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_1;
    const double basisvalue17 = 3.67423461417477*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_2;
    const double basisvalue18 = 2.12132034355964*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_2;
    const double basisvalue19 = 1.5*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_3;
    const double basisvalue20 = 11.1242977306435*psitilde_a_4*scalings_y_4*psitilde_bs_4_0*scalings_z_4*psitilde_cs_40_0;
    const double basisvalue21 = 9.81070843517429*psitilde_a_3*scalings_y_3*psitilde_bs_3_1*scalings_z_4*psitilde_cs_31_0;
    const double basisvalue22 = 8.2915619758885*psitilde_a_2*scalings_y_2*psitilde_bs_2_2*scalings_z_4*psitilde_cs_22_0;
    const double basisvalue23 = 6.42261628933256*psitilde_a_1*scalings_y_1*psitilde_bs_1_3*scalings_z_4*psitilde_cs_13_0;
    const double basisvalue24 = 3.70809924354783*psitilde_a_0*scalings_y_0*psitilde_bs_0_4*scalings_z_4*psitilde_cs_04_0;
    const double basisvalue25 = 8.77496438739212*psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_1;
    const double basisvalue26 = 7.41619848709566*psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_1;
    const double basisvalue27 = 5.74456264653803*psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_1;
    const double basisvalue28 = 3.3166247903554*psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_1;
    const double basisvalue29 = 6.42261628933256*psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_2;
    const double basisvalue30 = 4.9749371855331*psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_2;
    const double basisvalue31 = 2.87228132326901*psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_2;
    const double basisvalue32 = 4.06201920231798*psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_3;
    const double basisvalue33 = 2.34520787991171*psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_3;
    const double basisvalue34 = 1.6583123951777*psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_4;
    
    // Table(s) of coefficients
    const static double coefficients0[35][35] = \
    {{-0.0137464349807051, -0.0144900147488139, -0.00836581391578937, -0.00591552374999941, 0, 0, 0, 0, 0, 0, -0.00671936840905293, -0.00567890279999946, -0.00439885919382571, -0.00253968253968254, -0.00491807409042211, -0.00380952380952381, -0.00219942959691287, -0.00311046316543895, -0.0017958267458706, -0.00126984126984128, 0.0136980289516341, 0.0120805260192622, 0.010209907964538, 0.00790856070259325, 0.00456600965054471, 0.0108051509532101, 0.00913201930108942, 0.00707363173407281, 0.00408396318581522, 0.00790856070259324, 0.00612594477872282, 0.0035368158670364, 0.00500181296677924, 0.00288779806280616, 0.00204198159290761},
    {-0.0137464349807054, 0.0144900147488139, -0.00836581391578934, -0.00591552374999945, 0, 0, 0, 0, 0, 0, 0.00671936840905293, -0.00567890279999946, 0.00439885919382572, -0.00253968253968254, -0.00491807409042213, 0.00380952380952382, -0.00219942959691286, 0.00311046316543897, -0.0017958267458706, -0.00126984126984127, 0.0136980289516341, -0.0120805260192622, 0.010209907964538, -0.00790856070259325, 0.00456600965054471, -0.0108051509532101, 0.00913201930108941, -0.0070736317340728, 0.00408396318581521, 0.00790856070259325, -0.00612594477872282, 0.0035368158670364, -0.00500181296677924, 0.00288779806280615, 0.00204198159290761},
    {-0.0137464349807053, 0, 0.0167316278315787, -0.00591552374999946, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0101587301587302, 0, 0, -0.00659828879073857, 0, 0.00359165349174119, -0.00126984126984127, 0, 0, 0, 0, 0.0228300482527235, 0, 0, 0, -0.0163358527432608, 0, 0, 0.0106104476011092, 0, -0.0057755961256123, 0.00204198159290761},
    {-0.0137464349807054, 0, 0, 0.0177465712499983, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0126984126984127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0306297238936141},
    {0.0439885919382572, 0, 0.026770604530526, 0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0, 0.0406349206349206, 0, 0, 0.00439885919382572, 0, -0.0143666139669648, 0.00761904761904763, 0, 0, 0, 0, 0, 0, 0, 0, 0.0367556686723369, 0, 0, -0.0424417904044368, 0, 0.0303218796594646, -0.0122518895574456},
    {-0.0329914439536931, 0, -0.0200779533978945, -0.0141972569999986, 0, 0, -0.00969857289937744, 0, 0.0712696645099798, -0.050395263067897, 0, 0, 0, 0, 0, 0, 0.0461880215351701, 0, 0.0107749604752236, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0495154221385096, 0, -0.0606437593189292, 0.0306297238936141},
    {0.0439885919382573, 0, 0.0267706045305259, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0, 0.0359165349174119, 0.0253968253968254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0505364660991076, -0.0408396318581522},
    {0.0439885919382573, 0.0231840235981023, -0.0133853022652629, 0.0189296759999982, 0.0433733365754904, -0.0335968420452647, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, -0.0227156111999979, 0.0175954367753029, -0.0101587301587302, 0.00327871606028141, -0.00253968253968255, 0.0014662863979419, -0.0124418526617558, 0.00718330698348238, 0.00761904761904763, 0, 0, 0, 0, 0, 0.0243115896447228, -0.0205470434274512, 0.0159156714016638, -0.00918891716808423, -0.031634242810373, 0.0245037791148913, -0.0141472634681456, 0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, -0.0173880176985766, 0.0100389766989472, -0.0141972569999986, -0.00722888942924838, 0.00559947367421081, -0.00323285763312582, 0.0617213399848368, -0.03563483225499, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, -0.0266666666666667, 0.01539600717839, 0.00933138949631686, -0.00538748023761177, -0.0190476190476191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, -0.0285877423007065, 0.0165051407128365, -0.052519036151182, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, 0.0231840235981023, -0.013385302265263, 0.0189296759999982, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, 0.0311046316543895, -0.017958267458706, 0.0253968253968255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, 0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754903, -0.0335968420452647, 0.0193971457987549, -0.0274317066599275, 0.01583770322444, 0.0111989473484215, 0.0268774736362117, 0, -0.0117302911835353, 0.0101587301587302, -0.0229510124219699, 0.00761904761904761, -0.00146628639794191, 0.0165891368823411, -0.0071833069834824, -0.00761904761904763, 0, 0.0241610520385245, -0.0357346778758831, 0.0355885231616696, -0.0228300482527235, -0.00270128773830253, -0.0114150241263618, 0.0159156714016638, -0.0112308987609918, 0.00395428035129663, 0.00306297238936141, -0.0035368158670364, -0.00375135972508443, 0.00072194951570154, 0.00204198159290761},
    {-0.0329914439536929, -0.0173880176985768, -0.0100389766989472, 0.0141972569999986, -0.00722888942924839, 0.0615942104163185, -0.0614242950293904, -0.00685792666498187, -0.00395942580611001, 0.00559947367421077, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042213, -0.0266666666666667, 0.0175954367753029, 0.00933138949631688, 0.00538748023761179, -0.00761904761904761, 0, 0, 0.0357346778758831, -0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108943, 0, 0.00408396318581521, 0.00131809345043221, 0.00714693557517662, -0.00471575448938186, -0.00250090648338962, -0.00144389903140307, 0.00204198159290761},
    {0.0439885919382572, 0.0231840235981022, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, 0.0293257279588382, 0.0101587301587302, 0, -0.0101587301587302, -0.0219942959691286, 0.00207364211029264, 0.017958267458706, -0.00761904761904762, 0, 0, 0, 0.0395428035129662, -0.0456600965054471, 0, 0, -0.017684079335182, 0.0142938711503532, 0, 0.00612594477872282, 0, -0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.043988591938257, -0.0231840235981023, -0.0133853022652629, 0.0189296759999983, 0.0433733365754903, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484216, -0.0268774736362117, -0.0227156111999979, -0.0175954367753029, -0.0101587301587302, 0.00327871606028139, 0.00253968253968253, 0.0014662863979419, 0.0124418526617558, 0.00718330698348236, 0.00761904761904761, 0, 0, 0, 0, 0, -0.0243115896447228, -0.0205470434274512, -0.0159156714016638, -0.00918891716808424, -0.031634242810373, -0.0245037791148913, -0.0141472634681456, -0.026259518075591, -0.0151609398297323, -0.0122518895574456},
    {-0.0329914439536929, 0.0173880176985768, 0.0100389766989471, -0.0141972569999987, -0.00722888942924838, -0.00559947367421082, -0.00323285763312581, -0.0617213399848367, -0.03563483225499, -0.050395263067897, 0, 0, 0, 0, 0.0344265186329548, 0.0266666666666667, 0.01539600717839, -0.00933138949631689, -0.00538748023761178, -0.019047619047619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0369066166121018, 0.0285877423007065, 0.0165051407128365, 0.0525190361511819, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382572, -0.0231840235981023, -0.0133853022652629, 0.0189296759999981, 0, 0, 0, 0, 0, 0.0671936840905293, 0, 0, 0, 0, 0, 0, 0, -0.0311046316543896, -0.017958267458706, 0.0253968253968255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0437658634593183, -0.0252682330495538, -0.0408396318581521},
    {0.0439885919382572, -0.0231840235981023, 0.013385302265263, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484216, -0.0268774736362117, 0, 0.0117302911835352, 0.0101587301587302, -0.0229510124219699, -0.00761904761904762, -0.00146628639794191, -0.0165891368823411, -0.00718330698348239, -0.00761904761904763, 0, -0.0241610520385245, -0.0357346778758831, -0.0355885231616696, -0.0228300482527235, 0.00270128773830254, -0.0114150241263618, -0.0159156714016638, -0.0112308987609918, 0.00395428035129662, -0.00306297238936141, -0.0035368158670364, 0.00375135972508443, 0.000721949515701533, 0.00204198159290761},
    {-0.0329914439536929, 0.0173880176985766, -0.0100389766989472, 0.0141972569999987, -0.00722888942924841, -0.0615942104163186, -0.0614242950293904, 0.00685792666498186, -0.00395942580610998, 0.00559947367421075, 0, 0.0340734167999968, 0, -0.0152380952380952, -0.00491807409042213, 0.0266666666666667, 0.0175954367753029, -0.00933138949631688, 0.00538748023761179, -0.00761904761904763, 0, 0, 0.0357346778758831, 0.0593142052694494, 0.0456600965054471, 0, -0.00913201930108943, 0, 0.0040839631858152, 0.00131809345043222, -0.00714693557517663, -0.00471575448938187, 0.00250090648338962, -0.00144389903140308, 0.00204198159290761},
    {0.0439885919382573, -0.0231840235981022, 0.013385302265263, -0.0189296759999982, 0, 0, 0.0581914373962646, 0, -0.0316754064488799, 0.0111989473484216, 0, 0, -0.0293257279588382, 0.0101587301587302, 0, 0.0101587301587301, -0.0219942959691286, -0.00207364211029265, 0.017958267458706, -0.00761904761904761, 0, 0, 0, -0.0395428035129663, -0.0456600965054471, 0, 0, 0.017684079335182, 0.0142938711503532, 0, -0.00612594477872281, 0, 0.00125045324169481, -0.00360974757850769, 0.0020419815929076},
    {0.0439885919382571, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754904, 0.0335968420452646, 0.0193971457987549, 0.0274317066599274, 0.01583770322444, 0.0111989473484215, 0.0134387368181058, -0.0113578055999989, -0.0205280095711867, -0.0152380952380952, -0.00983614818084424, -0.0177777777777778, -0.0131965775814772, -0.0145154947720485, -0.0107749604752236, -0.00761904761904761, -0.0547921158065365, -0.0241610520385245, -0.00510495398226901, 0.00395428035129663, 0.00456600965054471, -0.0216103019064202, -0.00456600965054471, 0.00353681586703639, 0.00408396318581521, -0.00395428035129661, 0.0030629723893614, 0.0035368158670364, 0.00250090648338961, 0.00288779806280615, 0.00204198159290761},
    {-0.0329914439536931, 0, 0.0200779533978945, 0.0141972569999987, -0.0867466731509807, 0, 0.00969857289937743, 0, 0.00791885161221998, 0.00559947367421076, 0, 0.0340734167999968, 0, -0.0152380952380953, 0.0295084445425327, 0, -0.0131965775814772, 0, -0.0107749604752236, -0.00761904761904762, 0.0821881737098047, 0, -0.010209907964538, 0, 0.00456600965054471, 0, -0.00913201930108944, 0, 0.00408396318581521, -0.00790856070259326, 0, 0.0035368158670364, 0, 0.00288779806280615, 0.00204198159290761},
    {0.0439885919382573, 0, -0.026770604530526, -0.0189296759999982, 0.0433733365754903, -0.0335968420452646, 0.0193971457987549, -0.0274317066599274, 0.01583770322444, 0.0111989473484215, -0.0134387368181058, -0.0113578055999989, 0.0205280095711867, -0.0152380952380952, -0.00983614818084423, 0.0177777777777778, -0.0131965775814772, 0.0145154947720485, -0.0107749604752236, -0.00761904761904761, -0.0547921158065365, 0.0241610520385245, -0.005104953982269, -0.00395428035129662, 0.00456600965054471, 0.0216103019064202, -0.0045660096505447, -0.0035368158670364, 0.00408396318581521, -0.00395428035129662, -0.00306297238936141, 0.00353681586703641, -0.00250090648338962, 0.00288779806280615, 0.00204198159290761},
    {0.0439885919382573, 0.139104141588614, -0.080311813591578, -0.0567890279999947, 0.0578311154339872, 0.0335968420452646, -0.0420271492306356, 0.0274317066599275, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, -0.0586514559176763, 0.0406349206349207, 0.039344592723377, 0.00253968253968254, -0.0109971479845643, -0.0601356211984865, 0.017958267458706, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, -0.053052238005546, 0.0367556686723369, -0.0105447476034577, -0.0245037791148913, 0.0235787724469093, 0.0175063453837273, 0, -0.0122518895574457},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0, 0.0783926314389509, 0.0096985728993774, -0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, 0.0586514559176763, -0.0609523809523809, 0, 0.033015873015873, 0.0241937255660415, -0.0145154947720485, -0.0610581093596003, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0, 0.053052238005546, -0.0551335030085053, 0, -0.0326717054865217, 0.0141472634681456, 0.00875317269186366, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382571, 0, 0, 0.170367083999984, 0, -0.0111989473484216, 0.00969857289937744, 0.0822951199797824, 0.0475131096733199, -0.0167984210226324, 0, 0, 0, 0, 0, 0.0533333333333333, -0.0461880215351701, 0.0435464843161454, 0.0251415744421883, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.057175484601413, -0.0495154221385096, -0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382571, -0.139104141588614, -0.0803118135915779, -0.0567890279999947, 0.0578311154339871, -0.0335968420452646, -0.0420271492306356, -0.0274317066599274, -0.0475131096733199, -0.0167984210226323, 0, 0.0454312223999957, 0.0586514559176763, 0.0406349206349206, 0.0393445927233769, -0.00253968253968253, -0.0109971479845643, 0.0601356211984865, 0.0179582674587059, 0.0393650793650794, 0, 0, 0, 0, 0, 0, 0.0410940868549024, 0.053052238005546, 0.0367556686723369, -0.0105447476034577, 0.0245037791148913, 0.0235787724469093, -0.0175063453837273, 0, -0.0122518895574457},
    {0.0439885919382571, 0, 0.160623627183156, -0.0567890279999946, 0, -0.0783926314389509, 0.00969857289937745, 0.0274317066599275, 0.0475131096733199, -0.0167984210226323, 0, 0, -0.0586514559176763, -0.0609523809523809, 0, -0.033015873015873, 0.0241937255660415, 0.0145154947720485, -0.0610581093596003, 0.0393650793650793, 0, 0, 0, 0, 0, 0, 0, -0.053052238005546, -0.0551335030085053, 0, 0.0326717054865217, 0.0141472634681456, -0.00875317269186368, 0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0, 0.0111989473484215, 0.00969857289937745, -0.0822951199797824, 0.0475131096733199, -0.0167984210226323, 0, 0, 0, 0, 0, -0.0533333333333333, -0.0461880215351701, -0.0435464843161453, 0.0251415744421883, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0571754846014129, -0.0495154221385096, 0.026259518075591, -0.0151609398297323, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999946, -0.0433733365754903, 0.0447957893936862, 0.0484928644968872, -0.0548634133198549, 0, -0.0167984210226323, 0.0806324209086351, 0.0227156111999979, -0.0058651455917676, -0.0101587301587302, -0.00327871606028142, 0.0304761904761905, 0.0271262983619253, 0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, 0.0729347689341683, 0.0205470434274512, -0.00530522380055458, -0.00918891716808423, 0.031634242810373, -0.00816792637163039, -0.0141472634681456, -0.00875317269186365, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382571, 0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754904, -0.0447957893936862, 0.0484928644968873, 0.0548634133198549, 0, -0.0167984210226323, -0.0806324209086351, 0.0227156111999979, 0.0058651455917676, -0.0101587301587302, -0.00327871606028142, -0.0304761904761905, 0.0271262983619253, -0.045620126426438, 0.0430998419008943, 0.0393650793650794, 0, 0, 0, 0, 0, -0.0729347689341683, 0.0205470434274512, 0.00530522380055459, -0.00918891716808424, 0.031634242810373, 0.00816792637163042, -0.0141472634681456, 0.00875317269186367, -0.0151609398297323, -0.0122518895574456},
    {0.0439885919382572, 0, 0, 0.170367083999984, 0.0144577788584968, 0, -0.00323285763312585, 0, -0.0950262193466398, -0.0167984210226323, 0, 0, 0, 0, -0.0688530372659096, 0, 0.01539600717839, 0, -0.0502831488843767, -0.0825396825396826, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0738132332242036, 0, 0.0165051407128365, 0, 0.0303218796594646, 0.0306297238936141},
    {0.0439885919382573, -0.139104141588614, -0.0803118135915779, -0.0567890279999947, -0.0433733365754903, -0.0447957893936862, -0.00969857289937743, 0.0548634133198549, 0.03167540644888, 0.0391963157194754, 0.0806324209086351, 0, 0.0527863103259086, 0.0609523809523809, 0.0229510124219699, 0.0101587301587302, 0.0168622935763319, -0.0124418526617558, -0.00718330698348239, -0.013968253968254, 0, 0.0724831561155734, 0.0357346778758831, -0.0118628410538899, -0.0228300482527235, -0.00810386321490759, 0.0114150241263618, -0.00530522380055459, -0.0112308987609918, -0.00395428035129662, -0.00102099079645379, -0.0035368158670364, 0.00125045324169481, 0.000721949515701537, 0.00204198159290762},
    {0.0439885919382571, 0.139104141588614, -0.080311813591578, -0.0567890279999947, -0.0433733365754904, 0.0447957893936862, -0.00969857289937742, -0.0548634133198549, 0.0316754064488799, 0.0391963157194754, -0.0806324209086351, 0, -0.0527863103259086, 0.060952380952381, 0.0229510124219699, -0.0101587301587302, 0.0168622935763319, 0.0124418526617558, -0.00718330698348236, -0.013968253968254, 0, -0.0724831561155734, 0.0357346778758831, 0.0118628410538899, -0.0228300482527236, 0.00810386321490761, 0.0114150241263618, 0.00530522380055459, -0.0112308987609918, -0.00395428035129662, 0.00102099079645379, -0.0035368158670364, -0.0012504532416948, 0.000721949515701528, 0.0020419815929076},
    {0.0439885919382572, 0, 0.160623627183156, -0.0567890279999947, 0.0144577788584968, 0, -0.0614242950293905, 0, -0.0633508128977598, 0.0391963157194754, 0, -0.0681468335999936, 0, -0.0914285714285715, 0.00983614818084423, 0, 0.0285925847598672, 0, 0.0143666139669647, -0.0139682539682539, 0, 0, -0.0714693557517662, 0, 0.0456600965054471, 0, 0.0182640386021788, 0, 0.0040839631858152, -0.00263618690086443, 0, -0.00471575448938186, 0, -0.00144389903140306, 0.00204198159290759},
    {0.351908735506058, 0, 0, 0, -0.115662230867974, 0, -0.129314305325032, 0, 0, -0.134387368181059, 0, -0.0908624447999914, 0, 0.0406349206349206, -0.0786891854467539, 0, -0.0879771838765144, 0, 0, 0.0711111111111111, 0, 0, 0, 0, 0, 0, -0.0821881737098047, 0, 0.0367556686723369, 0.0210894952069153, 0, 0.0235787724469093, 0, 0, -0.0122518895574456}};
    
    // Interesting (new) part
    // Tables of derivatives of the polynomial base (transpose)
    const static double dmats0[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {6.32455532033677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 11.2249721603218, 0, 0, 0, 1.70793006049707e-14, 0, 0, 1.16063842564573e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.58257569495585, 0, 8.36660026534076, -1.18321595661992, 0, 0, 1.04642314135461e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.74165738677394, 0, 0, 8.69482604771366, 0, 0, 0, -1.66625972279159e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.49909083394701, 0, -3.34664010613631, -2.36643191323985, 15.4919333848297, 0, 0.692820323027549, 0, 0.56568542494924, 0.400000000000009, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 4.89897948556635, 0, 0, 0, 14.1985914794391, 0, -0.828078671210828, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.60000000000001, 0, 8.76356092008266, -1.54919333848296, 0, 0, 9.52470471983254, 0, -1.48131215963609, 0.261861468283193, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 4.24264068711929, 0, 0, 0, 0, 0, 14.3427433120127, 2.84156378982381e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.11769145362398, 0, 3.16227766016838, 4.91934955049954, 0, 0, 0, -1.2538531175753e-14, 10.690449676497, -2.41897262725905, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.54558441227157, 0, 0, 7.66811580507232, 0, 0, 0, 0, 0, 10.3691851174526, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 11.6057691494799, 0, 0, 0, -4.20458932936041, 0, -3.43303281162798, 0, 0, 19.6214168703486, 0, 0.611677741841197, 0, 0, 0.529728463363978, 0, 0.432521479156785, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.53137212479103, 0, 3.54562104171167, -2.50713268211203, 4.78713553878169, 0, -5.56626745075493, 0, -1.04880884817015, 0.741619848709563, 0, 18.8034951158403, 0, 1.68183573174416, -0.603122387046455, 0, 0.701283781217662, 0, 0.132137494528683, -0.0934353184302337, 0, 0, 0, 0, -2.04851899834062e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.12802291379194e-14, 2.59512887494071, 0, 0, 0, 10.0285307284481, 1.48509074345102e-14, -0.767649473578742, 0, 0, 0, 0, 16.4130361329658, 0, 0, -1.26347611061158, 0, 0.0967147429123335, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.96647939483827, 0, 8.12403840463597, -1.64130361329658, 0, 0, 11.7728501222091, 0, -2.40312296813959, 0.485504156227609, 0, 0, 0, 10.2761860629321, 0, 0, -1.48323969741914, 0, 0.30276503540975, -0.0611677741841184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {4.05298244095217, 0, -1.58564993434419, 4.4848952846511, 4.28174419288837, 0, 0.191485421551264, 0, -3.75233260785875, -4.31161222746203, 0, 0, 0, 0, 18.8807171866294, 0, 0.844371341865038, 0, 1.18187368057056, 1.04463861754668, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 2.32115382989598, 0, 0, 0, 3.92428337406973, 0, 5.49285249860476, 1.21484853427001e-14, 0, 0, 0, 0, 0, 0, 17.3044631365565, 0, -1.73008591662714, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.65329983228433, 0, 4.15220619990513, 2.93605316083776, 0, 0, 2.63248931621764, 0, 9.82591326180785, -2.8226127713774, 0, 0, 0, 0, 0, 0, 11.6081867662439, 0, -3.09487177319466, 0.683876505540249, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 2.01017818278148, 0, 0, 0, 0, 0, 8.91928088068602, 1.76356325376492e-14, 0, 0, 0, 0, 0, 0, 0, 0, 16.8558564884489, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.29782505861521, 0, 1.49829835452879, 5.50917601898535, 0, 0, 0, 0, 6.64803945320938, 4.13676892548485, 0, 0, 0, 0, 0, 0, 0, 0, 12.5636136423842, -3.55352656109507, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87616630392938, 0, 0, 6.2283092998577, 0, 0, 0, 0, 0, 11.0541524195338, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11.6057691494799, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    const static double dmats1[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.16227766016838, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.47722557505166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.95803989154981, 5.61248608016091, -1.08012344973464, -0.763762615825977, 0, 1.12766252988532e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.29128784747793, 7.24568837309472, 4.18330013267038, -0.591607978309962, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-2.64575131106459, 0, 9.66091783079296, 0.683130051063976, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87082869338697, 0, 0, 4.34741302385683, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.24037034920392, 0, 0, 7.52994023880667, 0, 0, 0, -1.40420976242894e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.74954541697351, 5.79655069847578, -1.67332005306815, -1.18321595661993, 7.74596669241484, -1.2, 0.346410161513776, -0.979795897113278, 0.282842712474625, 0.200000000000005, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.32379000772444, 2.44948974278317, 2.82842712474619, -0.999999999999997, 9.16515138991168, 7.09929573971955, -2.04939015319192, -0.414039335605417, -0.478091443733761, 0.169030850945703, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.80000000000001, -5.69209978830309, 4.38178046004133, -0.77459666924148, 0, 10.998181667894, 4.76235235991628, 0.962140470884725, -0.740656079818049, 0.130930734141596, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.19615242270664, 0, -3.16227766016837, -2.23606797749979, 0, 0, 13.7477270848675, 0, 0.534522483824846, 0.377964473009225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.01246117974981, 2.12132034355964, -0.408248290463859, 3.17542648054293, 0, 0, 0, 7.17137165600634, -1.3801311186847, -1.56144011671765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.55884572681199, 2.73861278752583, 1.5811388300842, 2.45967477524977, 0, 0, 0, 9.2582009977255, 5.3452248382485, -1.20948631362952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-1.79999999999999, 0, 3.65148371670111, -2.84018778721876, 0, 0, 0, 0, 12.3442679969673, 1.39659449751036, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.27279220613578, 0, 0, 3.83405790253616, 0, 0, 0, 0, 0, 5.18459255872629, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.20454076850485, 0, 0, 6.64078308635359, 0, 0, 0, 0, 0, 8.97997772825746, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.56904651573303, 5.80288457473998, -2.01017818278148, -1.42141062443803, 8.14215222512715, -2.10229466468021, 0.728256234341421, -1.71651640581399, 0.594618725379067, 0.420458932936047, 9.81070843517429, -1.18450885369836, 0.3058388709206, -0.105945692672795, -1.02581475831036, 0.264864231681991, -0.0917516612761804, 0.216260739578394, -0.0749149177264392, -0.0529728463363962, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.26568606239552, 3.07059789431495, 1.77281052085584, -1.25356634105601, 2.39356776939085, 6.30376871403133, -2.78313372537746, -0.908295106229249, -0.524404424085077, 0.370809924354783, 11.1242977306435, 9.40174755792013, -2.42752078113806, 0.840917865872083, -0.301561193523227, -0.794200206656967, 0.350641890608831, 0.114434427054266, 0.0660687472643429, -0.0467176592151151, 0, 0, 0, 1.18413955033316e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.91485421551268, 1.29756443747035, 3.74574588632197, -1.05945692672795, -8.09173593712687, 5.01426536422407, 1.80936716113936, -0.383824736789366, -1.1080065755349, 0.313391585264, 0, 12.7134831207354, 8.2065180664829, -2.84282124887606, 1.01946290306866, -0.631738055305791, -0.227958835180081, 0.0483573714561658, 0.139595707137601, -0.0394836284566112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741914, 7.03562363973515, 4.06201920231798, -0.820651806648292, 0, -6.79705818718658, 5.88642506110457, -2.08116553882674, -1.2015614840698, 0.242752078113806, 0, 0, 14.8323969741913, 5.13809303146605, 0, 0.856348838577678, -0.741619848709567, 0.262202212042541, 0.151382517704874, -0.0305838870920586, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-3.42539535431071, 0, 9.38083151964686, 1.89521416591737, 0, 1.48502651407619e-14, -3.39852909359332, 0, -2.77488738510233, -0.560611910581396, 0, 0, 0, 17.7988763690296, 0, 0, 0.42817441928884, 0, 0.349602949390053, 0.0706304617818605, 0, 0, 0, 0, -1.76908227133537e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.02649122047609, 2.74642624930238, -0.792824967172093, 2.24244764232555, 2.14087209644419, -0.331662479035538, 0.095742710775634, 6.49923072370876, -1.87616630392936, -2.15580611373101, 0, 0, 0, 0, 9.44035859331469, -1.46249406456536, 0.42218567093252, -2.04706526287664, 0.59093684028528, 0.522319308773337, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.71269767715535, 1.16057691494799, 1.34011878852098, 1.89521416591738, 2.53311402559511, 1.96214168703486, -0.566421515598881, 2.74642624930237, 3.17129986868837, -1.82198870938951, 0, 0, 0, 0, 11.1699829238239, 8.65223156827827, -2.49768411251822, -0.865042958313569, -0.998865569685858, 0.441440386136648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.32664991614216, -2.69693703815182, 2.07610309995257, 1.46802658041888, 0, 3.03973683071413, 1.31624465810882, -6.382117875081, 4.91295663090391, -1.4113063856887, 0, 0, 0, 0, 0, 13.4039795085887, 5.80409338312195, 2.01017818278147, -1.54743588659732, 0.341938252770131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.82970843102535, 0, -1.49829835452879, 4.23782770691181, 0, 0, 3.79967103839267, 0, -3.54562104171168, -4.07409060843206, 0, 0, 0, 0, 0, 0, 16.7549743857359, 0, 1.11676565710082, 0.987090711415304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741913, 1.00508909139074, -0.193429485824663, 3.55615782880925, 0, 0, 0, 4.459640440343, -0.858258202906983, 2.67027285925187, 0, 0, 0, 0, 0, 0, 0, 8.42792824422443, -1.62195554683794, -2.29379153190448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.14891252930761, 1.29756443747036, 0.749149177264399, 2.75458800949267, 0, 0, 0, 5.75737105184053, 3.3240197266047, 2.06838446274242, 0, 0, 0, 0, 0, 0, 0, 10.8804085776374, 6.2818068211921, -1.77676328054753, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.02006749648391e-14, 0, 0},
    {-1.32664991614216, 0, 1.73008591662714, -3.18072425757422, 0, 0, 0, 1.15266449376351e-14, 7.67649473578738, -2.38836465270397, 0, 0, 0, 0, 0, 0, 0, 0, 14.5072114368499, 2.05162951662072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.938083151964688, 0, 0, 3.11415464992885, 0, 0, 0, 0, 0, 5.52707620976692, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.80288457473997, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.6248076809272, 0, 0, 5.39387407630363, 0, 0, 0, 0, 0, 9.57317681262152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10.0508909139073, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    const static double dmats2[35][35] = \
    {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3.16227766016838, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.82574185835056, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.16397779494323, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.95803989154981, 5.61248608016091, -1.08012344973464, -0.763762615825976, 0, 1.39411605579536e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.29128784747792, 1.44913767461894, 4.18330013267038, -0.591607978309961, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.3228756555323, 0, 3.86436713231718, -0.341565025531985, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.87082869338697, 7.09929573971954, 0, 4.34741302385683, 0, 1.2137796469483e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.08012344973464, 0, 7.09929573971954, 2.50998007960223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-3.81881307912987, 0, 0, 8.87411967464942, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.74954541697351, 5.79655069847578, -1.67332005306815, -1.18321595661993, 7.74596669241484, -1.19999999999999, 0.346410161513777, -0.97979589711328, 0.282842712474624, 0.200000000000005, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.32379000772445, 2.44948974278317, 2.82842712474619, -0.999999999999998, 1.30930734141596, 7.09929573971955, -2.04939015319192, -0.414039335605417, -0.478091443733761, 0.169030850945707, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.80000000000001, 0.632455532033672, 4.38178046004133, -0.774596669241482, 0, 3.14233761939829, 4.76235235991627, -0.106904496764972, -0.740656079818045, 0.130930734141597, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.03923048454133, 0, 3.16227766016838, -0.447213595499956, 0, 0, 5.8918830363718, 0, -0.534522483824849, 0.0755928946018436, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.0124611797498, 2.12132034355964, -0.408248290463861, 3.17542648054293, 9.07114735222144, 0, 0, 7.17137165600635, -1.3801311186847, -1.56144011671765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.558845726812, 0.547722557505166, 1.5811388300842, 2.45967477524977, 0, 9.07114735222146, 0, 1.85164019954509, 5.34522483824849, -1.20948631362952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.900000000000005, 0, 1.46059348668045, 1.42009389360939, 0, 0, 9.07114735222146, 0, 4.93770719878694, -0.698297248755174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.27279220613578, -6.26099033699941, 0, 3.83405790253616, 0, -1.33471233241901e-14, 0, 10.5830052442584, 1.61529151756054e-14, 5.18459255872629, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.734846922834955, 0, -6.26099033699941, 2.21359436211787, 0, 0, 0, 0, 10.5830052442584, 2.99332590941916, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {5.7157676649773, 0, 0, -4.69574275274955, 0, 0, 0, 0, 0, 12.69960629311, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.56904651573303, 5.80288457473998, -2.01017818278148, -1.42141062443803, 8.14215222512715, -2.10229466468021, 0.72825623434142, -1.71651640581399, 0.594618725379067, 0.420458932936046, 9.81070843517429, -1.18450885369836, 0.305838870920599, -0.105945692672794, -1.02581475831036, 0.264864231681991, -0.0917516612761805, 0.216260739578394, -0.0749149177264392, -0.052972846336396, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.26568606239552, 3.07059789431495, 1.77281052085584, -1.25356634105602, 2.39356776939084, 6.30376871403133, -2.78313372537746, -0.908295106229248, -0.524404424085073, 0.370809924354783, 1.23603308118261, 9.40174755792013, -2.42752078113806, 0.840917865872083, -0.301561193523226, -0.794200206656968, 0.350641890608831, 0.114434427054266, 0.0660687472643423, -0.0467176592151165, 0, 0, 0, 1.09746923696279e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.91485421551268, 1.29756443747035, 3.74574588632197, -1.05945692672795, 0.404586796856347, 5.01426536422407, 1.80936716113937, -0.383824736789372, -1.1080065755349, 0.313391585264004, 0, 2.82521847127454, 8.2065180664829, -2.84282124887606, -0.0509731451534344, -0.631738055305788, -0.227958835180082, 0.0483573714561684, 0.139595707137601, -0.039483628456609, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741914, 0.335029697130247, 4.06201920231798, -0.820651806648289, 0, 1.69926454679664, 5.88642506110457, -0.099103120896514, -1.2015614840698, 0.242752078113805, 0, 0, 4.94413232473044, 5.13809303146605, 0, -0.214087209644418, -0.741619848709568, 0.0124858196210747, 0.151382517704876, -0.0305838870920584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.856348838577678, 0, 2.68023757704196, -0.473803541479345, 0, 0, 5.09779364038992, 0, -0.792824967172097, 0.140152977645345, 0, 0, 0, 7.91061171956871, 0, 0, -0.642261628933257, 0, 0.0998865569685871, -0.0176576154454654, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2.02649122047609, 2.74642624930238, -0.792824967172095, 2.24244764232555, 2.14087209644419, -0.331662479035546, 0.0957427107756332, 6.49923072370876, -1.87616630392937, -2.15580611373101, 11.0554159678513, 0, 0, 0, 9.44035859331468, -1.46249406456535, 0.42218567093252, -2.04706526287664, 0.59093684028528, 0.522319308773341, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.71269767715534, 1.16057691494799, 1.34011878852098, 1.89521416591737, 0.36187343222787, 1.96214168703486, -0.566421515598891, 2.74642624930238, 3.17129986868838, -1.82198870938951, 0, 11.0554159678513, 0, 0, 1.59571184626056, 8.65223156827827, -2.49768411251822, -0.865042958313572, -0.998865569685858, 0.441440386136647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.32664991614217, 0.299659670905757, 2.07610309995256, 1.46802658041888, 0, 0.868496237346881, 1.31624465810882, 0.709124208342336, 4.91295663090392, -1.4113063856887, 0, 0, 11.0554159678513, 0, 0, 3.82970843102535, 5.80409338312195, -0.223353131420161, -1.54743588659733, 0.341938252770126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.765941686205071, 0, 1.49829835452879, 0.847565541382364, 0, 0, 1.62843044502542, 0, 3.54562104171167, -0.814818121686411, 0, 0, 0, 11.0554159678513, 0, 0, 7.18070330817254, 0, -1.11676565710082, 0.197418142283063, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.48323969741914, 1.00508909139074, -0.193429485824663, 3.55615782880926, -8.46157280212812, 0, 0, 4.45964044034301, -0.858258202906987, 2.67027285925186, 0, 0, 0, 0, 12.4373429638327, 0, 0, 8.42792824422443, -1.62195554683794, -2.29379153190448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1.1489125293076, 0.259512887494073, 0.749149177264395, 2.75458800949267, 0, -8.46157280212812, 0, 1.15147421036811, 3.32401972660469, 2.06838446274243, 0, 0, 0, 0, 0, 12.4373429638327, 0, 2.17608171552749, 6.2818068211921, -1.77676328054754, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.663324958071074, 0, 0.692034366650849, 1.59036212878711, 0, 0, -8.46157280212813, 0, 3.07059789431495, 1.19418232635198, 0, 0, 0, 0, 0, 0, 12.4373429638327, 0, 5.80288457473997, -1.02581475831036, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.938083151964688, 7.62808987244126, 0, 3.11415464992885, 0, 0, 0, -7.5213980463361, 0, 5.52707620976691, 0, 0, 0, 0, 0, 0, 0, 14.2141062443803, 0, 5.80288457473998, 0, 0, 0, 0, 0, 1.03455020940032e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0.541602560309059, 0, 7.62808987244125, 1.79795802543454, 0, 0, 0, 0, -7.52139804633611, 3.1910589375405, 0, 0, 0, 0, 0, 0, 0, 0, 14.2141062443803, 3.35029697130244, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-5.36159180343549, 0, 0, 8.8994381845148, 0, 0, 0, 0, -1.07784467308941e-14, -5.26497863243527, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16.583123951777, 0, 0, 0, 0, 0, 1.2461107758246e-14, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    
    // Compute reference derivatives
    // Declare pointer to array of derivatives on FIAT element
    double *derivatives = new double [num_derivatives];
    
    // Declare coefficients
    double coeff0_0 = 0;
    double coeff0_1 = 0;
    double coeff0_2 = 0;
    double coeff0_3 = 0;
    double coeff0_4 = 0;
    double coeff0_5 = 0;
    double coeff0_6 = 0;
    double coeff0_7 = 0;
    double coeff0_8 = 0;
    double coeff0_9 = 0;
    double coeff0_10 = 0;
    double coeff0_11 = 0;
    double coeff0_12 = 0;
    double coeff0_13 = 0;
    double coeff0_14 = 0;
    double coeff0_15 = 0;
    double coeff0_16 = 0;
    double coeff0_17 = 0;
    double coeff0_18 = 0;
    double coeff0_19 = 0;
    double coeff0_20 = 0;
    double coeff0_21 = 0;
    double coeff0_22 = 0;
    double coeff0_23 = 0;
    double coeff0_24 = 0;
    double coeff0_25 = 0;
    double coeff0_26 = 0;
    double coeff0_27 = 0;
    double coeff0_28 = 0;
    double coeff0_29 = 0;
    double coeff0_30 = 0;
    double coeff0_31 = 0;
    double coeff0_32 = 0;
    double coeff0_33 = 0;
    double coeff0_34 = 0;
    
    // Declare new coefficients
    double new_coeff0_0 = 0;
    double new_coeff0_1 = 0;
    double new_coeff0_2 = 0;
    double new_coeff0_3 = 0;
    double new_coeff0_4 = 0;
    double new_coeff0_5 = 0;
    double new_coeff0_6 = 0;
    double new_coeff0_7 = 0;
    double new_coeff0_8 = 0;
    double new_coeff0_9 = 0;
    double new_coeff0_10 = 0;
    double new_coeff0_11 = 0;
    double new_coeff0_12 = 0;
    double new_coeff0_13 = 0;
    double new_coeff0_14 = 0;
    double new_coeff0_15 = 0;
    double new_coeff0_16 = 0;
    double new_coeff0_17 = 0;
    double new_coeff0_18 = 0;
    double new_coeff0_19 = 0;
    double new_coeff0_20 = 0;
    double new_coeff0_21 = 0;
    double new_coeff0_22 = 0;
    double new_coeff0_23 = 0;
    double new_coeff0_24 = 0;
    double new_coeff0_25 = 0;
    double new_coeff0_26 = 0;
    double new_coeff0_27 = 0;
    double new_coeff0_28 = 0;
    double new_coeff0_29 = 0;
    double new_coeff0_30 = 0;
    double new_coeff0_31 = 0;
    double new_coeff0_32 = 0;
    double new_coeff0_33 = 0;
    double new_coeff0_34 = 0;
    
    // Loop possible derivatives
    for (unsigned int deriv_num = 0; deriv_num < num_derivatives; deriv_num++)
    {
      // Get values from coefficients array
      new_coeff0_0 = coefficients0[dof][0];
      new_coeff0_1 = coefficients0[dof][1];
      new_coeff0_2 = coefficients0[dof][2];
      new_coeff0_3 = coefficients0[dof][3];
      new_coeff0_4 = coefficients0[dof][4];
      new_coeff0_5 = coefficients0[dof][5];
      new_coeff0_6 = coefficients0[dof][6];
      new_coeff0_7 = coefficients0[dof][7];
      new_coeff0_8 = coefficients0[dof][8];
      new_coeff0_9 = coefficients0[dof][9];
      new_coeff0_10 = coefficients0[dof][10];
      new_coeff0_11 = coefficients0[dof][11];
      new_coeff0_12 = coefficients0[dof][12];
      new_coeff0_13 = coefficients0[dof][13];
      new_coeff0_14 = coefficients0[dof][14];
      new_coeff0_15 = coefficients0[dof][15];
      new_coeff0_16 = coefficients0[dof][16];
      new_coeff0_17 = coefficients0[dof][17];
      new_coeff0_18 = coefficients0[dof][18];
      new_coeff0_19 = coefficients0[dof][19];
      new_coeff0_20 = coefficients0[dof][20];
      new_coeff0_21 = coefficients0[dof][21];
      new_coeff0_22 = coefficients0[dof][22];
      new_coeff0_23 = coefficients0[dof][23];
      new_coeff0_24 = coefficients0[dof][24];
      new_coeff0_25 = coefficients0[dof][25];
      new_coeff0_26 = coefficients0[dof][26];
      new_coeff0_27 = coefficients0[dof][27];
      new_coeff0_28 = coefficients0[dof][28];
      new_coeff0_29 = coefficients0[dof][29];
      new_coeff0_30 = coefficients0[dof][30];
      new_coeff0_31 = coefficients0[dof][31];
      new_coeff0_32 = coefficients0[dof][32];
      new_coeff0_33 = coefficients0[dof][33];
      new_coeff0_34 = coefficients0[dof][34];
    
      // Loop derivative order
      for (unsigned int j = 0; j < n; j++)
      {
        // Update old coefficients
        coeff0_0 = new_coeff0_0;
        coeff0_1 = new_coeff0_1;
        coeff0_2 = new_coeff0_2;
        coeff0_3 = new_coeff0_3;
        coeff0_4 = new_coeff0_4;
        coeff0_5 = new_coeff0_5;
        coeff0_6 = new_coeff0_6;
        coeff0_7 = new_coeff0_7;
        coeff0_8 = new_coeff0_8;
        coeff0_9 = new_coeff0_9;
        coeff0_10 = new_coeff0_10;
        coeff0_11 = new_coeff0_11;
        coeff0_12 = new_coeff0_12;
        coeff0_13 = new_coeff0_13;
        coeff0_14 = new_coeff0_14;
        coeff0_15 = new_coeff0_15;
        coeff0_16 = new_coeff0_16;
        coeff0_17 = new_coeff0_17;
        coeff0_18 = new_coeff0_18;
        coeff0_19 = new_coeff0_19;
        coeff0_20 = new_coeff0_20;
        coeff0_21 = new_coeff0_21;
        coeff0_22 = new_coeff0_22;
        coeff0_23 = new_coeff0_23;
        coeff0_24 = new_coeff0_24;
        coeff0_25 = new_coeff0_25;
        coeff0_26 = new_coeff0_26;
        coeff0_27 = new_coeff0_27;
        coeff0_28 = new_coeff0_28;
        coeff0_29 = new_coeff0_29;
        coeff0_30 = new_coeff0_30;
        coeff0_31 = new_coeff0_31;
        coeff0_32 = new_coeff0_32;
        coeff0_33 = new_coeff0_33;
        coeff0_34 = new_coeff0_34;
    
        if(combinations[deriv_num][j] == 0)
        {
          new_coeff0_0 = coeff0_0*dmats0[0][0] + coeff0_1*dmats0[1][0] + coeff0_2*dmats0[2][0] + coeff0_3*dmats0[3][0] + coeff0_4*dmats0[4][0] + coeff0_5*dmats0[5][0] + coeff0_6*dmats0[6][0] + coeff0_7*dmats0[7][0] + coeff0_8*dmats0[8][0] + coeff0_9*dmats0[9][0] + coeff0_10*dmats0[10][0] + coeff0_11*dmats0[11][0] + coeff0_12*dmats0[12][0] + coeff0_13*dmats0[13][0] + coeff0_14*dmats0[14][0] + coeff0_15*dmats0[15][0] + coeff0_16*dmats0[16][0] + coeff0_17*dmats0[17][0] + coeff0_18*dmats0[18][0] + coeff0_19*dmats0[19][0] + coeff0_20*dmats0[20][0] + coeff0_21*dmats0[21][0] + coeff0_22*dmats0[22][0] + coeff0_23*dmats0[23][0] + coeff0_24*dmats0[24][0] + coeff0_25*dmats0[25][0] + coeff0_26*dmats0[26][0] + coeff0_27*dmats0[27][0] + coeff0_28*dmats0[28][0] + coeff0_29*dmats0[29][0] + coeff0_30*dmats0[30][0] + coeff0_31*dmats0[31][0] + coeff0_32*dmats0[32][0] + coeff0_33*dmats0[33][0] + coeff0_34*dmats0[34][0];
          new_coeff0_1 = coeff0_0*dmats0[0][1] + coeff0_1*dmats0[1][1] + coeff0_2*dmats0[2][1] + coeff0_3*dmats0[3][1] + coeff0_4*dmats0[4][1] + coeff0_5*dmats0[5][1] + coeff0_6*dmats0[6][1] + coeff0_7*dmats0[7][1] + coeff0_8*dmats0[8][1] + coeff0_9*dmats0[9][1] + coeff0_10*dmats0[10][1] + coeff0_11*dmats0[11][1] + coeff0_12*dmats0[12][1] + coeff0_13*dmats0[13][1] + coeff0_14*dmats0[14][1] + coeff0_15*dmats0[15][1] + coeff0_16*dmats0[16][1] + coeff0_17*dmats0[17][1] + coeff0_18*dmats0[18][1] + coeff0_19*dmats0[19][1] + coeff0_20*dmats0[20][1] + coeff0_21*dmats0[21][1] + coeff0_22*dmats0[22][1] + coeff0_23*dmats0[23][1] + coeff0_24*dmats0[24][1] + coeff0_25*dmats0[25][1] + coeff0_26*dmats0[26][1] + coeff0_27*dmats0[27][1] + coeff0_28*dmats0[28][1] + coeff0_29*dmats0[29][1] + coeff0_30*dmats0[30][1] + coeff0_31*dmats0[31][1] + coeff0_32*dmats0[32][1] + coeff0_33*dmats0[33][1] + coeff0_34*dmats0[34][1];
          new_coeff0_2 = coeff0_0*dmats0[0][2] + coeff0_1*dmats0[1][2] + coeff0_2*dmats0[2][2] + coeff0_3*dmats0[3][2] + coeff0_4*dmats0[4][2] + coeff0_5*dmats0[5][2] + coeff0_6*dmats0[6][2] + coeff0_7*dmats0[7][2] + coeff0_8*dmats0[8][2] + coeff0_9*dmats0[9][2] + coeff0_10*dmats0[10][2] + coeff0_11*dmats0[11][2] + coeff0_12*dmats0[12][2] + coeff0_13*dmats0[13][2] + coeff0_14*dmats0[14][2] + coeff0_15*dmats0[15][2] + coeff0_16*dmats0[16][2] + coeff0_17*dmats0[17][2] + coeff0_18*dmats0[18][2] + coeff0_19*dmats0[19][2] + coeff0_20*dmats0[20][2] + coeff0_21*dmats0[21][2] + coeff0_22*dmats0[22][2] + coeff0_23*dmats0[23][2] + coeff0_24*dmats0[24][2] + coeff0_25*dmats0[25][2] + coeff0_26*dmats0[26][2] + coeff0_27*dmats0[27][2] + coeff0_28*dmats0[28][2] + coeff0_29*dmats0[29][2] + coeff0_30*dmats0[30][2] + coeff0_31*dmats0[31][2] + coeff0_32*dmats0[32][2] + coeff0_33*dmats0[33][2] + coeff0_34*dmats0[34][2];
          new_coeff0_3 = coeff0_0*dmats0[0][3] + coeff0_1*dmats0[1][3] + coeff0_2*dmats0[2][3] + coeff0_3*dmats0[3][3] + coeff0_4*dmats0[4][3] + coeff0_5*dmats0[5][3] + coeff0_6*dmats0[6][3] + coeff0_7*dmats0[7][3] + coeff0_8*dmats0[8][3] + coeff0_9*dmats0[9][3] + coeff0_10*dmats0[10][3] + coeff0_11*dmats0[11][3] + coeff0_12*dmats0[12][3] + coeff0_13*dmats0[13][3] + coeff0_14*dmats0[14][3] + coeff0_15*dmats0[15][3] + coeff0_16*dmats0[16][3] + coeff0_17*dmats0[17][3] + coeff0_18*dmats0[18][3] + coeff0_19*dmats0[19][3] + coeff0_20*dmats0[20][3] + coeff0_21*dmats0[21][3] + coeff0_22*dmats0[22][3] + coeff0_23*dmats0[23][3] + coeff0_24*dmats0[24][3] + coeff0_25*dmats0[25][3] + coeff0_26*dmats0[26][3] + coeff0_27*dmats0[27][3] + coeff0_28*dmats0[28][3] + coeff0_29*dmats0[29][3] + coeff0_30*dmats0[30][3] + coeff0_31*dmats0[31][3] + coeff0_32*dmats0[32][3] + coeff0_33*dmats0[33][3] + coeff0_34*dmats0[34][3];
          new_coeff0_4 = coeff0_0*dmats0[0][4] + coeff0_1*dmats0[1][4] + coeff0_2*dmats0[2][4] + coeff0_3*dmats0[3][4] + coeff0_4*dmats0[4][4] + coeff0_5*dmats0[5][4] + coeff0_6*dmats0[6][4] + coeff0_7*dmats0[7][4] + coeff0_8*dmats0[8][4] + coeff0_9*dmats0[9][4] + coeff0_10*dmats0[10][4] + coeff0_11*dmats0[11][4] + coeff0_12*dmats0[12][4] + coeff0_13*dmats0[13][4] + coeff0_14*dmats0[14][4] + coeff0_15*dmats0[15][4] + coeff0_16*dmats0[16][4] + coeff0_17*dmats0[17][4] + coeff0_18*dmats0[18][4] + coeff0_19*dmats0[19][4] + coeff0_20*dmats0[20][4] + coeff0_21*dmats0[21][4] + coeff0_22*dmats0[22][4] + coeff0_23*dmats0[23][4] + coeff0_24*dmats0[24][4] + coeff0_25*dmats0[25][4] + coeff0_26*dmats0[26][4] + coeff0_27*dmats0[27][4] + coeff0_28*dmats0[28][4] + coeff0_29*dmats0[29][4] + coeff0_30*dmats0[30][4] + coeff0_31*dmats0[31][4] + coeff0_32*dmats0[32][4] + coeff0_33*dmats0[33][4] + coeff0_34*dmats0[34][4];
          new_coeff0_5 = coeff0_0*dmats0[0][5] + coeff0_1*dmats0[1][5] + coeff0_2*dmats0[2][5] + coeff0_3*dmats0[3][5] + coeff0_4*dmats0[4][5] + coeff0_5*dmats0[5][5] + coeff0_6*dmats0[6][5] + coeff0_7*dmats0[7][5] + coeff0_8*dmats0[8][5] + coeff0_9*dmats0[9][5] + coeff0_10*dmats0[10][5] + coeff0_11*dmats0[11][5] + coeff0_12*dmats0[12][5] + coeff0_13*dmats0[13][5] + coeff0_14*dmats0[14][5] + coeff0_15*dmats0[15][5] + coeff0_16*dmats0[16][5] + coeff0_17*dmats0[17][5] + coeff0_18*dmats0[18][5] + coeff0_19*dmats0[19][5] + coeff0_20*dmats0[20][5] + coeff0_21*dmats0[21][5] + coeff0_22*dmats0[22][5] + coeff0_23*dmats0[23][5] + coeff0_24*dmats0[24][5] + coeff0_25*dmats0[25][5] + coeff0_26*dmats0[26][5] + coeff0_27*dmats0[27][5] + coeff0_28*dmats0[28][5] + coeff0_29*dmats0[29][5] + coeff0_30*dmats0[30][5] + coeff0_31*dmats0[31][5] + coeff0_32*dmats0[32][5] + coeff0_33*dmats0[33][5] + coeff0_34*dmats0[34][5];
          new_coeff0_6 = coeff0_0*dmats0[0][6] + coeff0_1*dmats0[1][6] + coeff0_2*dmats0[2][6] + coeff0_3*dmats0[3][6] + coeff0_4*dmats0[4][6] + coeff0_5*dmats0[5][6] + coeff0_6*dmats0[6][6] + coeff0_7*dmats0[7][6] + coeff0_8*dmats0[8][6] + coeff0_9*dmats0[9][6] + coeff0_10*dmats0[10][6] + coeff0_11*dmats0[11][6] + coeff0_12*dmats0[12][6] + coeff0_13*dmats0[13][6] + coeff0_14*dmats0[14][6] + coeff0_15*dmats0[15][6] + coeff0_16*dmats0[16][6] + coeff0_17*dmats0[17][6] + coeff0_18*dmats0[18][6] + coeff0_19*dmats0[19][6] + coeff0_20*dmats0[20][6] + coeff0_21*dmats0[21][6] + coeff0_22*dmats0[22][6] + coeff0_23*dmats0[23][6] + coeff0_24*dmats0[24][6] + coeff0_25*dmats0[25][6] + coeff0_26*dmats0[26][6] + coeff0_27*dmats0[27][6] + coeff0_28*dmats0[28][6] + coeff0_29*dmats0[29][6] + coeff0_30*dmats0[30][6] + coeff0_31*dmats0[31][6] + coeff0_32*dmats0[32][6] + coeff0_33*dmats0[33][6] + coeff0_34*dmats0[34][6];
          new_coeff0_7 = coeff0_0*dmats0[0][7] + coeff0_1*dmats0[1][7] + coeff0_2*dmats0[2][7] + coeff0_3*dmats0[3][7] + coeff0_4*dmats0[4][7] + coeff0_5*dmats0[5][7] + coeff0_6*dmats0[6][7] + coeff0_7*dmats0[7][7] + coeff0_8*dmats0[8][7] + coeff0_9*dmats0[9][7] + coeff0_10*dmats0[10][7] + coeff0_11*dmats0[11][7] + coeff0_12*dmats0[12][7] + coeff0_13*dmats0[13][7] + coeff0_14*dmats0[14][7] + coeff0_15*dmats0[15][7] + coeff0_16*dmats0[16][7] + coeff0_17*dmats0[17][7] + coeff0_18*dmats0[18][7] + coeff0_19*dmats0[19][7] + coeff0_20*dmats0[20][7] + coeff0_21*dmats0[21][7] + coeff0_22*dmats0[22][7] + coeff0_23*dmats0[23][7] + coeff0_24*dmats0[24][7] + coeff0_25*dmats0[25][7] + coeff0_26*dmats0[26][7] + coeff0_27*dmats0[27][7] + coeff0_28*dmats0[28][7] + coeff0_29*dmats0[29][7] + coeff0_30*dmats0[30][7] + coeff0_31*dmats0[31][7] + coeff0_32*dmats0[32][7] + coeff0_33*dmats0[33][7] + coeff0_34*dmats0[34][7];
          new_coeff0_8 = coeff0_0*dmats0[0][8] + coeff0_1*dmats0[1][8] + coeff0_2*dmats0[2][8] + coeff0_3*dmats0[3][8] + coeff0_4*dmats0[4][8] + coeff0_5*dmats0[5][8] + coeff0_6*dmats0[6][8] + coeff0_7*dmats0[7][8] + coeff0_8*dmats0[8][8] + coeff0_9*dmats0[9][8] + coeff0_10*dmats0[10][8] + coeff0_11*dmats0[11][8] + coeff0_12*dmats0[12][8] + coeff0_13*dmats0[13][8] + coeff0_14*dmats0[14][8] + coeff0_15*dmats0[15][8] + coeff0_16*dmats0[16][8] + coeff0_17*dmats0[17][8] + coeff0_18*dmats0[18][8] + coeff0_19*dmats0[19][8] + coeff0_20*dmats0[20][8] + coeff0_21*dmats0[21][8] + coeff0_22*dmats0[22][8] + coeff0_23*dmats0[23][8] + coeff0_24*dmats0[24][8] + coeff0_25*dmats0[25][8] + coeff0_26*dmats0[26][8] + coeff0_27*dmats0[27][8] + coeff0_28*dmats0[28][8] + coeff0_29*dmats0[29][8] + coeff0_30*dmats0[30][8] + coeff0_31*dmats0[31][8] + coeff0_32*dmats0[32][8] + coeff0_33*dmats0[33][8] + coeff0_34*dmats0[34][8];
          new_coeff0_9 = coeff0_0*dmats0[0][9] + coeff0_1*dmats0[1][9] + coeff0_2*dmats0[2][9] + coeff0_3*dmats0[3][9] + coeff0_4*dmats0[4][9] + coeff0_5*dmats0[5][9] + coeff0_6*dmats0[6][9] + coeff0_7*dmats0[7][9] + coeff0_8*dmats0[8][9] + coeff0_9*dmats0[9][9] + coeff0_10*dmats0[10][9] + coeff0_11*dmats0[11][9] + coeff0_12*dmats0[12][9] + coeff0_13*dmats0[13][9] + coeff0_14*dmats0[14][9] + coeff0_15*dmats0[15][9] + coeff0_16*dmats0[16][9] + coeff0_17*dmats0[17][9] + coeff0_18*dmats0[18][9] + coeff0_19*dmats0[19][9] + coeff0_20*dmats0[20][9] + coeff0_21*dmats0[21][9] + coeff0_22*dmats0[22][9] + coeff0_23*dmats0[23][9] + coeff0_24*dmats0[24][9] + coeff0_25*dmats0[25][9] + coeff0_26*dmats0[26][9] + coeff0_27*dmats0[27][9] + coeff0_28*dmats0[28][9] + coeff0_29*dmats0[29][9] + coeff0_30*dmats0[30][9] + coeff0_31*dmats0[31][9] + coeff0_32*dmats0[32][9] + coeff0_33*dmats0[33][9] + coeff0_34*dmats0[34][9];
          new_coeff0_10 = coeff0_0*dmats0[0][10] + coeff0_1*dmats0[1][10] + coeff0_2*dmats0[2][10] + coeff0_3*dmats0[3][10] + coeff0_4*dmats0[4][10] + coeff0_5*dmats0[5][10] + coeff0_6*dmats0[6][10] + coeff0_7*dmats0[7][10] + coeff0_8*dmats0[8][10] + coeff0_9*dmats0[9][10] + coeff0_10*dmats0[10][10] + coeff0_11*dmats0[11][10] + coeff0_12*dmats0[12][10] + coeff0_13*dmats0[13][10] + coeff0_14*dmats0[14][10] + coeff0_15*dmats0[15][10] + coeff0_16*dmats0[16][10] + coeff0_17*dmats0[17][10] + coeff0_18*dmats0[18][10] + coeff0_19*dmats0[19][10] + coeff0_20*dmats0[20][10] + coeff0_21*dmats0[21][10] + coeff0_22*dmats0[22][10] + coeff0_23*dmats0[23][10] + coeff0_24*dmats0[24][10] + coeff0_25*dmats0[25][10] + coeff0_26*dmats0[26][10] + coeff0_27*dmats0[27][10] + coeff0_28*dmats0[28][10] + coeff0_29*dmats0[29][10] + coeff0_30*dmats0[30][10] + coeff0_31*dmats0[31][10] + coeff0_32*dmats0[32][10] + coeff0_33*dmats0[33][10] + coeff0_34*dmats0[34][10];
          new_coeff0_11 = coeff0_0*dmats0[0][11] + coeff0_1*dmats0[1][11] + coeff0_2*dmats0[2][11] + coeff0_3*dmats0[3][11] + coeff0_4*dmats0[4][11] + coeff0_5*dmats0[5][11] + coeff0_6*dmats0[6][11] + coeff0_7*dmats0[7][11] + coeff0_8*dmats0[8][11] + coeff0_9*dmats0[9][11] + coeff0_10*dmats0[10][11] + coeff0_11*dmats0[11][11] + coeff0_12*dmats0[12][11] + coeff0_13*dmats0[13][11] + coeff0_14*dmats0[14][11] + coeff0_15*dmats0[15][11] + coeff0_16*dmats0[16][11] + coeff0_17*dmats0[17][11] + coeff0_18*dmats0[18][11] + coeff0_19*dmats0[19][11] + coeff0_20*dmats0[20][11] + coeff0_21*dmats0[21][11] + coeff0_22*dmats0[22][11] + coeff0_23*dmats0[23][11] + coeff0_24*dmats0[24][11] + coeff0_25*dmats0[25][11] + coeff0_26*dmats0[26][11] + coeff0_27*dmats0[27][11] + coeff0_28*dmats0[28][11] + coeff0_29*dmats0[29][11] + coeff0_30*dmats0[30][11] + coeff0_31*dmats0[31][11] + coeff0_32*dmats0[32][11] + coeff0_33*dmats0[33][11] + coeff0_34*dmats0[34][11];
          new_coeff0_12 = coeff0_0*dmats0[0][12] + coeff0_1*dmats0[1][12] + coeff0_2*dmats0[2][12] + coeff0_3*dmats0[3][12] + coeff0_4*dmats0[4][12] + coeff0_5*dmats0[5][12] + coeff0_6*dmats0[6][12] + coeff0_7*dmats0[7][12] + coeff0_8*dmats0[8][12] + coeff0_9*dmats0[9][12] + coeff0_10*dmats0[10][12] + coeff0_11*dmats0[11][12] + coeff0_12*dmats0[12][12] + coeff0_13*dmats0[13][12] + coeff0_14*dmats0[14][12] + coeff0_15*dmats0[15][12] + coeff0_16*dmats0[16][12] + coeff0_17*dmats0[17][12] + coeff0_18*dmats0[18][12] + coeff0_19*dmats0[19][12] + coeff0_20*dmats0[20][12] + coeff0_21*dmats0[21][12] + coeff0_22*dmats0[22][12] + coeff0_23*dmats0[23][12] + coeff0_24*dmats0[24][12] + coeff0_25*dmats0[25][12] + coeff0_26*dmats0[26][12] + coeff0_27*dmats0[27][12] + coeff0_28*dmats0[28][12] + coeff0_29*dmats0[29][12] + coeff0_30*dmats0[30][12] + coeff0_31*dmats0[31][12] + coeff0_32*dmats0[32][12] + coeff0_33*dmats0[33][12] + coeff0_34*dmats0[34][12];
          new_coeff0_13 = coeff0_0*dmats0[0][13] + coeff0_1*dmats0[1][13] + coeff0_2*dmats0[2][13] + coeff0_3*dmats0[3][13] + coeff0_4*dmats0[4][13] + coeff0_5*dmats0[5][13] + coeff0_6*dmats0[6][13] + coeff0_7*dmats0[7][13] + coeff0_8*dmats0[8][13] + coeff0_9*dmats0[9][13] + coeff0_10*dmats0[10][13] + coeff0_11*dmats0[11][13] + coeff0_12*dmats0[12][13] + coeff0_13*dmats0[13][13] + coeff0_14*dmats0[14][13] + coeff0_15*dmats0[15][13] + coeff0_16*dmats0[16][13] + coeff0_17*dmats0[17][13] + coeff0_18*dmats0[18][13] + coeff0_19*dmats0[19][13] + coeff0_20*dmats0[20][13] + coeff0_21*dmats0[21][13] + coeff0_22*dmats0[22][13] + coeff0_23*dmats0[23][13] + coeff0_24*dmats0[24][13] + coeff0_25*dmats0[25][13] + coeff0_26*dmats0[26][13] + coeff0_27*dmats0[27][13] + coeff0_28*dmats0[28][13] + coeff0_29*dmats0[29][13] + coeff0_30*dmats0[30][13] + coeff0_31*dmats0[31][13] + coeff0_32*dmats0[32][13] + coeff0_33*dmats0[33][13] + coeff0_34*dmats0[34][13];
          new_coeff0_14 = coeff0_0*dmats0[0][14] + coeff0_1*dmats0[1][14] + coeff0_2*dmats0[2][14] + coeff0_3*dmats0[3][14] + coeff0_4*dmats0[4][14] + coeff0_5*dmats0[5][14] + coeff0_6*dmats0[6][14] + coeff0_7*dmats0[7][14] + coeff0_8*dmats0[8][14] + coeff0_9*dmats0[9][14] + coeff0_10*dmats0[10][14] + coeff0_11*dmats0[11][14] + coeff0_12*dmats0[12][14] + coeff0_13*dmats0[13][14] + coeff0_14*dmats0[14][14] + coeff0_15*dmats0[15][14] + coeff0_16*dmats0[16][14] + coeff0_17*dmats0[17][14] + coeff0_18*dmats0[18][14] + coeff0_19*dmats0[19][14] + coeff0_20*dmats0[20][14] + coeff0_21*dmats0[21][14] + coeff0_22*dmats0[22][14] + coeff0_23*dmats0[23][14] + coeff0_24*dmats0[24][14] + coeff0_25*dmats0[25][14] + coeff0_26*dmats0[26][14] + coeff0_27*dmats0[27][14] + coeff0_28*dmats0[28][14] + coeff0_29*dmats0[29][14] + coeff0_30*dmats0[30][14] + coeff0_31*dmats0[31][14] + coeff0_32*dmats0[32][14] + coeff0_33*dmats0[33][14] + coeff0_34*dmats0[34][14];
          new_coeff0_15 = coeff0_0*dmats0[0][15] + coeff0_1*dmats0[1][15] + coeff0_2*dmats0[2][15] + coeff0_3*dmats0[3][15] + coeff0_4*dmats0[4][15] + coeff0_5*dmats0[5][15] + coeff0_6*dmats0[6][15] + coeff0_7*dmats0[7][15] + coeff0_8*dmats0[8][15] + coeff0_9*dmats0[9][15] + coeff0_10*dmats0[10][15] + coeff0_11*dmats0[11][15] + coeff0_12*dmats0[12][15] + coeff0_13*dmats0[13][15] + coeff0_14*dmats0[14][15] + coeff0_15*dmats0[15][15] + coeff0_16*dmats0[16][15] + coeff0_17*dmats0[17][15] + coeff0_18*dmats0[18][15] + coeff0_19*dmats0[19][15] + coeff0_20*dmats0[20][15] + coeff0_21*dmats0[21][15] + coeff0_22*dmats0[22][15] + coeff0_23*dmats0[23][15] + coeff0_24*dmats0[24][15] + coeff0_25*dmats0[25][15] + coeff0_26*dmats0[26][15] + coeff0_27*dmats0[27][15] + coeff0_28*dmats0[28][15] + coeff0_29*dmats0[29][15] + coeff0_30*dmats0[30][15] + coeff0_31*dmats0[31][15] + coeff0_32*dmats0[32][15] + coeff0_33*dmats0[33][15] + coeff0_34*dmats0[34][15];
          new_coeff0_16 = coeff0_0*dmats0[0][16] + coeff0_1*dmats0[1][16] + coeff0_2*dmats0[2][16] + coeff0_3*dmats0[3][16] + coeff0_4*dmats0[4][16] + coeff0_5*dmats0[5][16] + coeff0_6*dmats0[6][16] + coeff0_7*dmats0[7][16] + coeff0_8*dmats0[8][16] + coeff0_9*dmats0[9][16] + coeff0_10*dmats0[10][16] + coeff0_11*dmats0[11][16] + coeff0_12*dmats0[12][16] + coeff0_13*dmats0[13][16] + coeff0_14*dmats0[14][16] + coeff0_15*dmats0[15][16] + coeff0_16*dmats0[16][16] + coeff0_17*dmats0[17][16] + coeff0_18*dmats0[18][16] + coeff0_19*dmats0[19][16] + coeff0_20*dmats0[20][16] + coeff0_21*dmats0[21][16] + coeff0_22*dmats0[22][16] + coeff0_23*dmats0[23][16] + coeff0_24*dmats0[24][16] + coeff0_25*dmats0[25][16] + coeff0_26*dmats0[26][16] + coeff0_27*dmats0[27][16] + coeff0_28*dmats0[28][16] + coeff0_29*dmats0[29][16] + coeff0_30*dmats0[30][16] + coeff0_31*dmats0[31][16] + coeff0_32*dmats0[32][16] + coeff0_33*dmats0[33][16] + coeff0_34*dmats0[34][16];
          new_coeff0_17 = coeff0_0*dmats0[0][17] + coeff0_1*dmats0[1][17] + coeff0_2*dmats0[2][17] + coeff0_3*dmats0[3][17] + coeff0_4*dmats0[4][17] + coeff0_5*dmats0[5][17] + coeff0_6*dmats0[6][17] + coeff0_7*dmats0[7][17] + coeff0_8*dmats0[8][17] + coeff0_9*dmats0[9][17] + coeff0_10*dmats0[10][17] + coeff0_11*dmats0[11][17] + coeff0_12*dmats0[12][17] + coeff0_13*dmats0[13][17] + coeff0_14*dmats0[14][17] + coeff0_15*dmats0[15][17] + coeff0_16*dmats0[16][17] + coeff0_17*dmats0[17][17] + coeff0_18*dmats0[18][17] + coeff0_19*dmats0[19][17] + coeff0_20*dmats0[20][17] + coeff0_21*dmats0[21][17] + coeff0_22*dmats0[22][17] + coeff0_23*dmats0[23][17] + coeff0_24*dmats0[24][17] + coeff0_25*dmats0[25][17] + coeff0_26*dmats0[26][17] + coeff0_27*dmats0[27][17] + coeff0_28*dmats0[28][17] + coeff0_29*dmats0[29][17] + coeff0_30*dmats0[30][17] + coeff0_31*dmats0[31][17] + coeff0_32*dmats0[32][17] + coeff0_33*dmats0[33][17] + coeff0_34*dmats0[34][17];
          new_coeff0_18 = coeff0_0*dmats0[0][18] + coeff0_1*dmats0[1][18] + coeff0_2*dmats0[2][18] + coeff0_3*dmats0[3][18] + coeff0_4*dmats0[4][18] + coeff0_5*dmats0[5][18] + coeff0_6*dmats0[6][18] + coeff0_7*dmats0[7][18] + coeff0_8*dmats0[8][18] + coeff0_9*dmats0[9][18] + coeff0_10*dmats0[10][18] + coeff0_11*dmats0[11][18] + coeff0_12*dmats0[12][18] + coeff0_13*dmats0[13][18] + coeff0_14*dmats0[14][18] + coeff0_15*dmats0[15][18] + coeff0_16*dmats0[16][18] + coeff0_17*dmats0[17][18] + coeff0_18*dmats0[18][18] + coeff0_19*dmats0[19][18] + coeff0_20*dmats0[20][18] + coeff0_21*dmats0[21][18] + coeff0_22*dmats0[22][18] + coeff0_23*dmats0[23][18] + coeff0_24*dmats0[24][18] + coeff0_25*dmats0[25][18] + coeff0_26*dmats0[26][18] + coeff0_27*dmats0[27][18] + coeff0_28*dmats0[28][18] + coeff0_29*dmats0[29][18] + coeff0_30*dmats0[30][18] + coeff0_31*dmats0[31][18] + coeff0_32*dmats0[32][18] + coeff0_33*dmats0[33][18] + coeff0_34*dmats0[34][18];
          new_coeff0_19 = coeff0_0*dmats0[0][19] + coeff0_1*dmats0[1][19] + coeff0_2*dmats0[2][19] + coeff0_3*dmats0[3][19] + coeff0_4*dmats0[4][19] + coeff0_5*dmats0[5][19] + coeff0_6*dmats0[6][19] + coeff0_7*dmats0[7][19] + coeff0_8*dmats0[8][19] + coeff0_9*dmats0[9][19] + coeff0_10*dmats0[10][19] + coeff0_11*dmats0[11][19] + coeff0_12*dmats0[12][19] + coeff0_13*dmats0[13][19] + coeff0_14*dmats0[14][19] + coeff0_15*dmats0[15][19] + coeff0_16*dmats0[16][19] + coeff0_17*dmats0[17][19] + coeff0_18*dmats0[18][19] + coeff0_19*dmats0[19][19] + coeff0_20*dmats0[20][19] + coeff0_21*dmats0[21][19] + coeff0_22*dmats0[22][19] + coeff0_23*dmats0[23][19] + coeff0_24*dmats0[24][19] + coeff0_25*dmats0[25][19] + coeff0_26*dmats0[26][19] + coeff0_27*dmats0[27][19] + coeff0_28*dmats0[28][19] + coeff0_29*dmats0[29][19] + coeff0_30*dmats0[30][19] + coeff0_31*dmats0[31][19] + coeff0_32*dmats0[32][19] + coeff0_33*dmats0[33][19] + coeff0_34*dmats0[34][19];
          new_coeff0_20 = coeff0_0*dmats0[0][20] + coeff0_1*dmats0[1][20] + coeff0_2*dmats0[2][20] + coeff0_3*dmats0[3][20] + coeff0_4*dmats0[4][20] + coeff0_5*dmats0[5][20] + coeff0_6*dmats0[6][20] + coeff0_7*dmats0[7][20] + coeff0_8*dmats0[8][20] + coeff0_9*dmats0[9][20] + coeff0_10*dmats0[10][20] + coeff0_11*dmats0[11][20] + coeff0_12*dmats0[12][20] + coeff0_13*dmats0[13][20] + coeff0_14*dmats0[14][20] + coeff0_15*dmats0[15][20] + coeff0_16*dmats0[16][20] + coeff0_17*dmats0[17][20] + coeff0_18*dmats0[18][20] + coeff0_19*dmats0[19][20] + coeff0_20*dmats0[20][20] + coeff0_21*dmats0[21][20] + coeff0_22*dmats0[22][20] + coeff0_23*dmats0[23][20] + coeff0_24*dmats0[24][20] + coeff0_25*dmats0[25][20] + coeff0_26*dmats0[26][20] + coeff0_27*dmats0[27][20] + coeff0_28*dmats0[28][20] + coeff0_29*dmats0[29][20] + coeff0_30*dmats0[30][20] + coeff0_31*dmats0[31][20] + coeff0_32*dmats0[32][20] + coeff0_33*dmats0[33][20] + coeff0_34*dmats0[34][20];
          new_coeff0_21 = coeff0_0*dmats0[0][21] + coeff0_1*dmats0[1][21] + coeff0_2*dmats0[2][21] + coeff0_3*dmats0[3][21] + coeff0_4*dmats0[4][21] + coeff0_5*dmats0[5][21] + coeff0_6*dmats0[6][21] + coeff0_7*dmats0[7][21] + coeff0_8*dmats0[8][21] + coeff0_9*dmats0[9][21] + coeff0_10*dmats0[10][21] + coeff0_11*dmats0[11][21] + coeff0_12*dmats0[12][21] + coeff0_13*dmats0[13][21] + coeff0_14*dmats0[14][21] + coeff0_15*dmats0[15][21] + coeff0_16*dmats0[16][21] + coeff0_17*dmats0[17][21] + coeff0_18*dmats0[18][21] + coeff0_19*dmats0[19][21] + coeff0_20*dmats0[20][21] + coeff0_21*dmats0[21][21] + coeff0_22*dmats0[22][21] + coeff0_23*dmats0[23][21] + coeff0_24*dmats0[24][21] + coeff0_25*dmats0[25][21] + coeff0_26*dmats0[26][21] + coeff0_27*dmats0[27][21] + coeff0_28*dmats0[28][21] + coeff0_29*dmats0[29][21] + coeff0_30*dmats0[30][21] + coeff0_31*dmats0[31][21] + coeff0_32*dmats0[32][21] + coeff0_33*dmats0[33][21] + coeff0_34*dmats0[34][21];
          new_coeff0_22 = coeff0_0*dmats0[0][22] + coeff0_1*dmats0[1][22] + coeff0_2*dmats0[2][22] + coeff0_3*dmats0[3][22] + coeff0_4*dmats0[4][22] + coeff0_5*dmats0[5][22] + coeff0_6*dmats0[6][22] + coeff0_7*dmats0[7][22] + coeff0_8*dmats0[8][22] + coeff0_9*dmats0[9][22] + coeff0_10*dmats0[10][22] + coeff0_11*dmats0[11][22] + coeff0_12*dmats0[12][22] + coeff0_13*dmats0[13][22] + coeff0_14*dmats0[14][22] + coeff0_15*dmats0[15][22] + coeff0_16*dmats0[16][22] + coeff0_17*dmats0[17][22] + coeff0_18*dmats0[18][22] + coeff0_19*dmats0[19][22] + coeff0_20*dmats0[20][22] + coeff0_21*dmats0[21][22] + coeff0_22*dmats0[22][22] + coeff0_23*dmats0[23][22] + coeff0_24*dmats0[24][22] + coeff0_25*dmats0[25][22] + coeff0_26*dmats0[26][22] + coeff0_27*dmats0[27][22] + coeff0_28*dmats0[28][22] + coeff0_29*dmats0[29][22] + coeff0_30*dmats0[30][22] + coeff0_31*dmats0[31][22] + coeff0_32*dmats0[32][22] + coeff0_33*dmats0[33][22] + coeff0_34*dmats0[34][22];
          new_coeff0_23 = coeff0_0*dmats0[0][23] + coeff0_1*dmats0[1][23] + coeff0_2*dmats0[2][23] + coeff0_3*dmats0[3][23] + coeff0_4*dmats0[4][23] + coeff0_5*dmats0[5][23] + coeff0_6*dmats0[6][23] + coeff0_7*dmats0[7][23] + coeff0_8*dmats0[8][23] + coeff0_9*dmats0[9][23] + coeff0_10*dmats0[10][23] + coeff0_11*dmats0[11][23] + coeff0_12*dmats0[12][23] + coeff0_13*dmats0[13][23] + coeff0_14*dmats0[14][23] + coeff0_15*dmats0[15][23] + coeff0_16*dmats0[16][23] + coeff0_17*dmats0[17][23] + coeff0_18*dmats0[18][23] + coeff0_19*dmats0[19][23] + coeff0_20*dmats0[20][23] + coeff0_21*dmats0[21][23] + coeff0_22*dmats0[22][23] + coeff0_23*dmats0[23][23] + coeff0_24*dmats0[24][23] + coeff0_25*dmats0[25][23] + coeff0_26*dmats0[26][23] + coeff0_27*dmats0[27][23] + coeff0_28*dmats0[28][23] + coeff0_29*dmats0[29][23] + coeff0_30*dmats0[30][23] + coeff0_31*dmats0[31][23] + coeff0_32*dmats0[32][23] + coeff0_33*dmats0[33][23] + coeff0_34*dmats0[34][23];
          new_coeff0_24 = coeff0_0*dmats0[0][24] + coeff0_1*dmats0[1][24] + coeff0_2*dmats0[2][24] + coeff0_3*dmats0[3][24] + coeff0_4*dmats0[4][24] + coeff0_5*dmats0[5][24] + coeff0_6*dmats0[6][24] + coeff0_7*dmats0[7][24] + coeff0_8*dmats0[8][24] + coeff0_9*dmats0[9][24] + coeff0_10*dmats0[10][24] + coeff0_11*dmats0[11][24] + coeff0_12*dmats0[12][24] + coeff0_13*dmats0[13][24] + coeff0_14*dmats0[14][24] + coeff0_15*dmats0[15][24] + coeff0_16*dmats0[16][24] + coeff0_17*dmats0[17][24] + coeff0_18*dmats0[18][24] + coeff0_19*dmats0[19][24] + coeff0_20*dmats0[20][24] + coeff0_21*dmats0[21][24] + coeff0_22*dmats0[22][24] + coeff0_23*dmats0[23][24] + coeff0_24*dmats0[24][24] + coeff0_25*dmats0[25][24] + coeff0_26*dmats0[26][24] + coeff0_27*dmats0[27][24] + coeff0_28*dmats0[28][24] + coeff0_29*dmats0[29][24] + coeff0_30*dmats0[30][24] + coeff0_31*dmats0[31][24] + coeff0_32*dmats0[32][24] + coeff0_33*dmats0[33][24] + coeff0_34*dmats0[34][24];
          new_coeff0_25 = coeff0_0*dmats0[0][25] + coeff0_1*dmats0[1][25] + coeff0_2*dmats0[2][25] + coeff0_3*dmats0[3][25] + coeff0_4*dmats0[4][25] + coeff0_5*dmats0[5][25] + coeff0_6*dmats0[6][25] + coeff0_7*dmats0[7][25] + coeff0_8*dmats0[8][25] + coeff0_9*dmats0[9][25] + coeff0_10*dmats0[10][25] + coeff0_11*dmats0[11][25] + coeff0_12*dmats0[12][25] + coeff0_13*dmats0[13][25] + coeff0_14*dmats0[14][25] + coeff0_15*dmats0[15][25] + coeff0_16*dmats0[16][25] + coeff0_17*dmats0[17][25] + coeff0_18*dmats0[18][25] + coeff0_19*dmats0[19][25] + coeff0_20*dmats0[20][25] + coeff0_21*dmats0[21][25] + coeff0_22*dmats0[22][25] + coeff0_23*dmats0[23][25] + coeff0_24*dmats0[24][25] + coeff0_25*dmats0[25][25] + coeff0_26*dmats0[26][25] + coeff0_27*dmats0[27][25] + coeff0_28*dmats0[28][25] + coeff0_29*dmats0[29][25] + coeff0_30*dmats0[30][25] + coeff0_31*dmats0[31][25] + coeff0_32*dmats0[32][25] + coeff0_33*dmats0[33][25] + coeff0_34*dmats0[34][25];
          new_coeff0_26 = coeff0_0*dmats0[0][26] + coeff0_1*dmats0[1][26] + coeff0_2*dmats0[2][26] + coeff0_3*dmats0[3][26] + coeff0_4*dmats0[4][26] + coeff0_5*dmats0[5][26] + coeff0_6*dmats0[6][26] + coeff0_7*dmats0[7][26] + coeff0_8*dmats0[8][26] + coeff0_9*dmats0[9][26] + coeff0_10*dmats0[10][26] + coeff0_11*dmats0[11][26] + coeff0_12*dmats0[12][26] + coeff0_13*dmats0[13][26] + coeff0_14*dmats0[14][26] + coeff0_15*dmats0[15][26] + coeff0_16*dmats0[16][26] + coeff0_17*dmats0[17][26] + coeff0_18*dmats0[18][26] + coeff0_19*dmats0[19][26] + coeff0_20*dmats0[20][26] + coeff0_21*dmats0[21][26] + coeff0_22*dmats0[22][26] + coeff0_23*dmats0[23][26] + coeff0_24*dmats0[24][26] + coeff0_25*dmats0[25][26] + coeff0_26*dmats0[26][26] + coeff0_27*dmats0[27][26] + coeff0_28*dmats0[28][26] + coeff0_29*dmats0[29][26] + coeff0_30*dmats0[30][26] + coeff0_31*dmats0[31][26] + coeff0_32*dmats0[32][26] + coeff0_33*dmats0[33][26] + coeff0_34*dmats0[34][26];
          new_coeff0_27 = coeff0_0*dmats0[0][27] + coeff0_1*dmats0[1][27] + coeff0_2*dmats0[2][27] + coeff0_3*dmats0[3][27] + coeff0_4*dmats0[4][27] + coeff0_5*dmats0[5][27] + coeff0_6*dmats0[6][27] + coeff0_7*dmats0[7][27] + coeff0_8*dmats0[8][27] + coeff0_9*dmats0[9][27] + coeff0_10*dmats0[10][27] + coeff0_11*dmats0[11][27] + coeff0_12*dmats0[12][27] + coeff0_13*dmats0[13][27] + coeff0_14*dmats0[14][27] + coeff0_15*dmats0[15][27] + coeff0_16*dmats0[16][27] + coeff0_17*dmats0[17][27] + coeff0_18*dmats0[18][27] + coeff0_19*dmats0[19][27] + coeff0_20*dmats0[20][27] + coeff0_21*dmats0[21][27] + coeff0_22*dmats0[22][27] + coeff0_23*dmats0[23][27] + coeff0_24*dmats0[24][27] + coeff0_25*dmats0[25][27] + coeff0_26*dmats0[26][27] + coeff0_27*dmats0[27][27] + coeff0_28*dmats0[28][27] + coeff0_29*dmats0[29][27] + coeff0_30*dmats0[30][27] + coeff0_31*dmats0[31][27] + coeff0_32*dmats0[32][27] + coeff0_33*dmats0[33][27] + coeff0_34*dmats0[34][27];
          new_coeff0_28 = coeff0_0*dmats0[0][28] + coeff0_1*dmats0[1][28] + coeff0_2*dmats0[2][28] + coeff0_3*dmats0[3][28] + coeff0_4*dmats0[4][28] + coeff0_5*dmats0[5][28] + coeff0_6*dmats0[6][28] + coeff0_7*dmats0[7][28] + coeff0_8*dmats0[8][28] + coeff0_9*dmats0[9][28] + coeff0_10*dmats0[10][28] + coeff0_11*dmats0[11][28] + coeff0_12*dmats0[12][28] + coeff0_13*dmats0[13][28] + coeff0_14*dmats0[14][28] + coeff0_15*dmats0[15][28] + coeff0_16*dmats0[16][28] + coeff0_17*dmats0[17][28] + coeff0_18*dmats0[18][28] + coeff0_19*dmats0[19][28] + coeff0_20*dmats0[20][28] + coeff0_21*dmats0[21][28] + coeff0_22*dmats0[22][28] + coeff0_23*dmats0[23][28] + coeff0_24*dmats0[24][28] + coeff0_25*dmats0[25][28] + coeff0_26*dmats0[26][28] + coeff0_27*dmats0[27][28] + coeff0_28*dmats0[28][28] + coeff0_29*dmats0[29][28] + coeff0_30*dmats0[30][28] + coeff0_31*dmats0[31][28] + coeff0_32*dmats0[32][28] + coeff0_33*dmats0[33][28] + coeff0_34*dmats0[34][28];
          new_coeff0_29 = coeff0_0*dmats0[0][29] + coeff0_1*dmats0[1][29] + coeff0_2*dmats0[2][29] + coeff0_3*dmats0[3][29] + coeff0_4*dmats0[4][29] + coeff0_5*dmats0[5][29] + coeff0_6*dmats0[6][29] + coeff0_7*dmats0[7][29] + coeff0_8*dmats0[8][29] + coeff0_9*dmats0[9][29] + coeff0_10*dmats0[10][29] + coeff0_11*dmats0[11][29] + coeff0_12*dmats0[12][29] + coeff0_13*dmats0[13][29] + coeff0_14*dmats0[14][29] + coeff0_15*dmats0[15][29] + coeff0_16*dmats0[16][29] + coeff0_17*dmats0[17][29] + coeff0_18*dmats0[18][29] + coeff0_19*dmats0[19][29] + coeff0_20*dmats0[20][29] + coeff0_21*dmats0[21][29] + coeff0_22*dmats0[22][29] + coeff0_23*dmats0[23][29] + coeff0_24*dmats0[24][29] + coeff0_25*dmats0[25][29] + coeff0_26*dmats0[26][29] + coeff0_27*dmats0[27][29] + coeff0_28*dmats0[28][29] + coeff0_29*dmats0[29][29] + coeff0_30*dmats0[30][29] + coeff0_31*dmats0[31][29] + coeff0_32*dmats0[32][29] + coeff0_33*dmats0[33][29] + coeff0_34*dmats0[34][29];
          new_coeff0_30 = coeff0_0*dmats0[0][30] + coeff0_1*dmats0[1][30] + coeff0_2*dmats0[2][30] + coeff0_3*dmats0[3][30] + coeff0_4*dmats0[4][30] + coeff0_5*dmats0[5][30] + coeff0_6*dmats0[6][30] + coeff0_7*dmats0[7][30] + coeff0_8*dmats0[8][30] + coeff0_9*dmats0[9][30] + coeff0_10*dmats0[10][30] + coeff0_11*dmats0[11][30] + coeff0_12*dmats0[12][30] + coeff0_13*dmats0[13][30] + coeff0_14*dmats0[14][30] + coeff0_15*dmats0[15][30] + coeff0_16*dmats0[16][30] + coeff0_17*dmats0[17][30] + coeff0_18*dmats0[18][30] + coeff0_19*dmats0[19][30] + coeff0_20*dmats0[20][30] + coeff0_21*dmats0[21][30] + coeff0_22*dmats0[22][30] + coeff0_23*dmats0[23][30] + coeff0_24*dmats0[24][30] + coeff0_25*dmats0[25][30] + coeff0_26*dmats0[26][30] + coeff0_27*dmats0[27][30] + coeff0_28*dmats0[28][30] + coeff0_29*dmats0[29][30] + coeff0_30*dmats0[30][30] + coeff0_31*dmats0[31][30] + coeff0_32*dmats0[32][30] + coeff0_33*dmats0[33][30] + coeff0_34*dmats0[34][30];
          new_coeff0_31 = coeff0_0*dmats0[0][31] + coeff0_1*dmats0[1][31] + coeff0_2*dmats0[2][31] + coeff0_3*dmats0[3][31] + coeff0_4*dmats0[4][31] + coeff0_5*dmats0[5][31] + coeff0_6*dmats0[6][31] + coeff0_7*dmats0[7][31] + coeff0_8*dmats0[8][31] + coeff0_9*dmats0[9][31] + coeff0_10*dmats0[10][31] + coeff0_11*dmats0[11][31] + coeff0_12*dmats0[12][31] + coeff0_13*dmats0[13][31] + coeff0_14*dmats0[14][31] + coeff0_15*dmats0[15][31] + coeff0_16*dmats0[16][31] + coeff0_17*dmats0[17][31] + coeff0_18*dmats0[18][31] + coeff0_19*dmats0[19][31] + coeff0_20*dmats0[20][31] + coeff0_21*dmats0[21][31] + coeff0_22*dmats0[22][31] + coeff0_23*dmats0[23][31] + coeff0_24*dmats0[24][31] + coeff0_25*dmats0[25][31] + coeff0_26*dmats0[26][31] + coeff0_27*dmats0[27][31] + coeff0_28*dmats0[28][31] + coeff0_29*dmats0[29][31] + coeff0_30*dmats0[30][31] + coeff0_31*dmats0[31][31] + coeff0_32*dmats0[32][31] + coeff0_33*dmats0[33][31] + coeff0_34*dmats0[34][31];
          new_coeff0_32 = coeff0_0*dmats0[0][32] + coeff0_1*dmats0[1][32] + coeff0_2*dmats0[2][32] + coeff0_3*dmats0[3][32] + coeff0_4*dmats0[4][32] + coeff0_5*dmats0[5][32] + coeff0_6*dmats0[6][32] + coeff0_7*dmats0[7][32] + coeff0_8*dmats0[8][32] + coeff0_9*dmats0[9][32] + coeff0_10*dmats0[10][32] + coeff0_11*dmats0[11][32] + coeff0_12*dmats0[12][32] + coeff0_13*dmats0[13][32] + coeff0_14*dmats0[14][32] + coeff0_15*dmats0[15][32] + coeff0_16*dmats0[16][32] + coeff0_17*dmats0[17][32] + coeff0_18*dmats0[18][32] + coeff0_19*dmats0[19][32] + coeff0_20*dmats0[20][32] + coeff0_21*dmats0[21][32] + coeff0_22*dmats0[22][32] + coeff0_23*dmats0[23][32] + coeff0_24*dmats0[24][32] + coeff0_25*dmats0[25][32] + coeff0_26*dmats0[26][32] + coeff0_27*dmats0[27][32] + coeff0_28*dmats0[28][32] + coeff0_29*dmats0[29][32] + coeff0_30*dmats0[30][32] + coeff0_31*dmats0[31][32] + coeff0_32*dmats0[32][32] + coeff0_33*dmats0[33][32] + coeff0_34*dmats0[34][32];
          new_coeff0_33 = coeff0_0*dmats0[0][33] + coeff0_1*dmats0[1][33] + coeff0_2*dmats0[2][33] + coeff0_3*dmats0[3][33] + coeff0_4*dmats0[4][33] + coeff0_5*dmats0[5][33] + coeff0_6*dmats0[6][33] + coeff0_7*dmats0[7][33] + coeff0_8*dmats0[8][33] + coeff0_9*dmats0[9][33] + coeff0_10*dmats0[10][33] + coeff0_11*dmats0[11][33] + coeff0_12*dmats0[12][33] + coeff0_13*dmats0[13][33] + coeff0_14*dmats0[14][33] + coeff0_15*dmats0[15][33] + coeff0_16*dmats0[16][33] + coeff0_17*dmats0[17][33] + coeff0_18*dmats0[18][33] + coeff0_19*dmats0[19][33] + coeff0_20*dmats0[20][33] + coeff0_21*dmats0[21][33] + coeff0_22*dmats0[22][33] + coeff0_23*dmats0[23][33] + coeff0_24*dmats0[24][33] + coeff0_25*dmats0[25][33] + coeff0_26*dmats0[26][33] + coeff0_27*dmats0[27][33] + coeff0_28*dmats0[28][33] + coeff0_29*dmats0[29][33] + coeff0_30*dmats0[30][33] + coeff0_31*dmats0[31][33] + coeff0_32*dmats0[32][33] + coeff0_33*dmats0[33][33] + coeff0_34*dmats0[34][33];
          new_coeff0_34 = coeff0_0*dmats0[0][34] + coeff0_1*dmats0[1][34] + coeff0_2*dmats0[2][34] + coeff0_3*dmats0[3][34] + coeff0_4*dmats0[4][34] + coeff0_5*dmats0[5][34] + coeff0_6*dmats0[6][34] + coeff0_7*dmats0[7][34] + coeff0_8*dmats0[8][34] + coeff0_9*dmats0[9][34] + coeff0_10*dmats0[10][34] + coeff0_11*dmats0[11][34] + coeff0_12*dmats0[12][34] + coeff0_13*dmats0[13][34] + coeff0_14*dmats0[14][34] + coeff0_15*dmats0[15][34] + coeff0_16*dmats0[16][34] + coeff0_17*dmats0[17][34] + coeff0_18*dmats0[18][34] + coeff0_19*dmats0[19][34] + coeff0_20*dmats0[20][34] + coeff0_21*dmats0[21][34] + coeff0_22*dmats0[22][34] + coeff0_23*dmats0[23][34] + coeff0_24*dmats0[24][34] + coeff0_25*dmats0[25][34] + coeff0_26*dmats0[26][34] + coeff0_27*dmats0[27][34] + coeff0_28*dmats0[28][34] + coeff0_29*dmats0[29][34] + coeff0_30*dmats0[30][34] + coeff0_31*dmats0[31][34] + coeff0_32*dmats0[32][34] + coeff0_33*dmats0[33][34] + coeff0_34*dmats0[34][34];
        }
        if(combinations[deriv_num][j] == 1)
        {
          new_coeff0_0 = coeff0_0*dmats1[0][0] + coeff0_1*dmats1[1][0] + coeff0_2*dmats1[2][0] + coeff0_3*dmats1[3][0] + coeff0_4*dmats1[4][0] + coeff0_5*dmats1[5][0] + coeff0_6*dmats1[6][0] + coeff0_7*dmats1[7][0] + coeff0_8*dmats1[8][0] + coeff0_9*dmats1[9][0] + coeff0_10*dmats1[10][0] + coeff0_11*dmats1[11][0] + coeff0_12*dmats1[12][0] + coeff0_13*dmats1[13][0] + coeff0_14*dmats1[14][0] + coeff0_15*dmats1[15][0] + coeff0_16*dmats1[16][0] + coeff0_17*dmats1[17][0] + coeff0_18*dmats1[18][0] + coeff0_19*dmats1[19][0] + coeff0_20*dmats1[20][0] + coeff0_21*dmats1[21][0] + coeff0_22*dmats1[22][0] + coeff0_23*dmats1[23][0] + coeff0_24*dmats1[24][0] + coeff0_25*dmats1[25][0] + coeff0_26*dmats1[26][0] + coeff0_27*dmats1[27][0] + coeff0_28*dmats1[28][0] + coeff0_29*dmats1[29][0] + coeff0_30*dmats1[30][0] + coeff0_31*dmats1[31][0] + coeff0_32*dmats1[32][0] + coeff0_33*dmats1[33][0] + coeff0_34*dmats1[34][0];
          new_coeff0_1 = coeff0_0*dmats1[0][1] + coeff0_1*dmats1[1][1] + coeff0_2*dmats1[2][1] + coeff0_3*dmats1[3][1] + coeff0_4*dmats1[4][1] + coeff0_5*dmats1[5][1] + coeff0_6*dmats1[6][1] + coeff0_7*dmats1[7][1] + coeff0_8*dmats1[8][1] + coeff0_9*dmats1[9][1] + coeff0_10*dmats1[10][1] + coeff0_11*dmats1[11][1] + coeff0_12*dmats1[12][1] + coeff0_13*dmats1[13][1] + coeff0_14*dmats1[14][1] + coeff0_15*dmats1[15][1] + coeff0_16*dmats1[16][1] + coeff0_17*dmats1[17][1] + coeff0_18*dmats1[18][1] + coeff0_19*dmats1[19][1] + coeff0_20*dmats1[20][1] + coeff0_21*dmats1[21][1] + coeff0_22*dmats1[22][1] + coeff0_23*dmats1[23][1] + coeff0_24*dmats1[24][1] + coeff0_25*dmats1[25][1] + coeff0_26*dmats1[26][1] + coeff0_27*dmats1[27][1] + coeff0_28*dmats1[28][1] + coeff0_29*dmats1[29][1] + coeff0_30*dmats1[30][1] + coeff0_31*dmats1[31][1] + coeff0_32*dmats1[32][1] + coeff0_33*dmats1[33][1] + coeff0_34*dmats1[34][1];
          new_coeff0_2 = coeff0_0*dmats1[0][2] + coeff0_1*dmats1[1][2] + coeff0_2*dmats1[2][2] + coeff0_3*dmats1[3][2] + coeff0_4*dmats1[4][2] + coeff0_5*dmats1[5][2] + coeff0_6*dmats1[6][2] + coeff0_7*dmats1[7][2] + coeff0_8*dmats1[8][2] + coeff0_9*dmats1[9][2] + coeff0_10*dmats1[10][2] + coeff0_11*dmats1[11][2] + coeff0_12*dmats1[12][2] + coeff0_13*dmats1[13][2] + coeff0_14*dmats1[14][2] + coeff0_15*dmats1[15][2] + coeff0_16*dmats1[16][2] + coeff0_17*dmats1[17][2] + coeff0_18*dmats1[18][2] + coeff0_19*dmats1[19][2] + coeff0_20*dmats1[20][2] + coeff0_21*dmats1[21][2] + coeff0_22*dmats1[22][2] + coeff0_23*dmats1[23][2] + coeff0_24*dmats1[24][2] + coeff0_25*dmats1[25][2] + coeff0_26*dmats1[26][2] + coeff0_27*dmats1[27][2] + coeff0_28*dmats1[28][2] + coeff0_29*dmats1[29][2] + coeff0_30*dmats1[30][2] + coeff0_31*dmats1[31][2] + coeff0_32*dmats1[32][2] + coeff0_33*dmats1[33][2] + coeff0_34*dmats1[34][2];
          new_coeff0_3 = coeff0_0*dmats1[0][3] + coeff0_1*dmats1[1][3] + coeff0_2*dmats1[2][3] + coeff0_3*dmats1[3][3] + coeff0_4*dmats1[4][3] + coeff0_5*dmats1[5][3] + coeff0_6*dmats1[6][3] + coeff0_7*dmats1[7][3] + coeff0_8*dmats1[8][3] + coeff0_9*dmats1[9][3] + coeff0_10*dmats1[10][3] + coeff0_11*dmats1[11][3] + coeff0_12*dmats1[12][3] + coeff0_13*dmats1[13][3] + coeff0_14*dmats1[14][3] + coeff0_15*dmats1[15][3] + coeff0_16*dmats1[16][3] + coeff0_17*dmats1[17][3] + coeff0_18*dmats1[18][3] + coeff0_19*dmats1[19][3] + coeff0_20*dmats1[20][3] + coeff0_21*dmats1[21][3] + coeff0_22*dmats1[22][3] + coeff0_23*dmats1[23][3] + coeff0_24*dmats1[24][3] + coeff0_25*dmats1[25][3] + coeff0_26*dmats1[26][3] + coeff0_27*dmats1[27][3] + coeff0_28*dmats1[28][3] + coeff0_29*dmats1[29][3] + coeff0_30*dmats1[30][3] + coeff0_31*dmats1[31][3] + coeff0_32*dmats1[32][3] + coeff0_33*dmats1[33][3] + coeff0_34*dmats1[34][3];
          new_coeff0_4 = coeff0_0*dmats1[0][4] + coeff0_1*dmats1[1][4] + coeff0_2*dmats1[2][4] + coeff0_3*dmats1[3][4] + coeff0_4*dmats1[4][4] + coeff0_5*dmats1[5][4] + coeff0_6*dmats1[6][4] + coeff0_7*dmats1[7][4] + coeff0_8*dmats1[8][4] + coeff0_9*dmats1[9][4] + coeff0_10*dmats1[10][4] + coeff0_11*dmats1[11][4] + coeff0_12*dmats1[12][4] + coeff0_13*dmats1[13][4] + coeff0_14*dmats1[14][4] + coeff0_15*dmats1[15][4] + coeff0_16*dmats1[16][4] + coeff0_17*dmats1[17][4] + coeff0_18*dmats1[18][4] + coeff0_19*dmats1[19][4] + coeff0_20*dmats1[20][4] + coeff0_21*dmats1[21][4] + coeff0_22*dmats1[22][4] + coeff0_23*dmats1[23][4] + coeff0_24*dmats1[24][4] + coeff0_25*dmats1[25][4] + coeff0_26*dmats1[26][4] + coeff0_27*dmats1[27][4] + coeff0_28*dmats1[28][4] + coeff0_29*dmats1[29][4] + coeff0_30*dmats1[30][4] + coeff0_31*dmats1[31][4] + coeff0_32*dmats1[32][4] + coeff0_33*dmats1[33][4] + coeff0_34*dmats1[34][4];
          new_coeff0_5 = coeff0_0*dmats1[0][5] + coeff0_1*dmats1[1][5] + coeff0_2*dmats1[2][5] + coeff0_3*dmats1[3][5] + coeff0_4*dmats1[4][5] + coeff0_5*dmats1[5][5] + coeff0_6*dmats1[6][5] + coeff0_7*dmats1[7][5] + coeff0_8*dmats1[8][5] + coeff0_9*dmats1[9][5] + coeff0_10*dmats1[10][5] + coeff0_11*dmats1[11][5] + coeff0_12*dmats1[12][5] + coeff0_13*dmats1[13][5] + coeff0_14*dmats1[14][5] + coeff0_15*dmats1[15][5] + coeff0_16*dmats1[16][5] + coeff0_17*dmats1[17][5] + coeff0_18*dmats1[18][5] + coeff0_19*dmats1[19][5] + coeff0_20*dmats1[20][5] + coeff0_21*dmats1[21][5] + coeff0_22*dmats1[22][5] + coeff0_23*dmats1[23][5] + coeff0_24*dmats1[24][5] + coeff0_25*dmats1[25][5] + coeff0_26*dmats1[26][5] + coeff0_27*dmats1[27][5] + coeff0_28*dmats1[28][5] + coeff0_29*dmats1[29][5] + coeff0_30*dmats1[30][5] + coeff0_31*dmats1[31][5] + coeff0_32*dmats1[32][5] + coeff0_33*dmats1[33][5] + coeff0_34*dmats1[34][5];
          new_coeff0_6 = coeff0_0*dmats1[0][6] + coeff0_1*dmats1[1][6] + coeff0_2*dmats1[2][6] + coeff0_3*dmats1[3][6] + coeff0_4*dmats1[4][6] + coeff0_5*dmats1[5][6] + coeff0_6*dmats1[6][6] + coeff0_7*dmats1[7][6] + coeff0_8*dmats1[8][6] + coeff0_9*dmats1[9][6] + coeff0_10*dmats1[10][6] + coeff0_11*dmats1[11][6] + coeff0_12*dmats1[12][6] + coeff0_13*dmats1[13][6] + coeff0_14*dmats1[14][6] + coeff0_15*dmats1[15][6] + coeff0_16*dmats1[16][6] + coeff0_17*dmats1[17][6] + coeff0_18*dmats1[18][6] + coeff0_19*dmats1[19][6] + coeff0_20*dmats1[20][6] + coeff0_21*dmats1[21][6] + coeff0_22*dmats1[22][6] + coeff0_23*dmats1[23][6] + coeff0_24*dmats1[24][6] + coeff0_25*dmats1[25][6] + coeff0_26*dmats1[26][6] + coeff0_27*dmats1[27][6] + coeff0_28*dmats1[28][6] + coeff0_29*dmats1[29][6] + coeff0_30*dmats1[30][6] + coeff0_31*dmats1[31][6] + coeff0_32*dmats1[32][6] + coeff0_33*dmats1[33][6] + coeff0_34*dmats1[34][6];
          new_coeff0_7 = coeff0_0*dmats1[0][7] + coeff0_1*dmats1[1][7] + coeff0_2*dmats1[2][7] + coeff0_3*dmats1[3][7] + coeff0_4*dmats1[4][7] + coeff0_5*dmats1[5][7] + coeff0_6*dmats1[6][7] + coeff0_7*dmats1[7][7] + coeff0_8*dmats1[8][7] + coeff0_9*dmats1[9][7] + coeff0_10*dmats1[10][7] + coeff0_11*dmats1[11][7] + coeff0_12*dmats1[12][7] + coeff0_13*dmats1[13][7] + coeff0_14*dmats1[14][7] + coeff0_15*dmats1[15][7] + coeff0_16*dmats1[16][7] + coeff0_17*dmats1[17][7] + coeff0_18*dmats1[18][7] + coeff0_19*dmats1[19][7] + coeff0_20*dmats1[20][7] + coeff0_21*dmats1[21][7] + coeff0_22*dmats1[22][7] + coeff0_23*dmats1[23][7] + coeff0_24*dmats1[24][7] + coeff0_25*dmats1[25][7] + coeff0_26*dmats1[26][7] + coeff0_27*dmats1[27][7] + coeff0_28*dmats1[28][7] + coeff0_29*dmats1[29][7] + coeff0_30*dmats1[30][7] + coeff0_31*dmats1[31][7] + coeff0_32*dmats1[32][7] + coeff0_33*dmats1[33][7] + coeff0_34*dmats1[34][7];
          new_coeff0_8 = coeff0_0*dmats1[0][8] + coeff0_1*dmats1[1][8] + coeff0_2*dmats1[2][8] + coeff0_3*dmats1[3][8] + coeff0_4*dmats1[4][8] + coeff0_5*dmats1[5][8] + coeff0_6*dmats1[6][8] + coeff0_7*dmats1[7][8] + coeff0_8*dmats1[8][8] + coeff0_9*dmats1[9][8] + coeff0_10*dmats1[10][8] + coeff0_11*dmats1[11][8] + coeff0_12*dmats1[12][8] + coeff0_13*dmats1[13][8] + coeff0_14*dmats1[14][8] + coeff0_15*dmats1[15][8] + coeff0_16*dmats1[16][8] + coeff0_17*dmats1[17][8] + coeff0_18*dmats1[18][8] + coeff0_19*dmats1[19][8] + coeff0_20*dmats1[20][8] + coeff0_21*dmats1[21][8] + coeff0_22*dmats1[22][8] + coeff0_23*dmats1[23][8] + coeff0_24*dmats1[24][8] + coeff0_25*dmats1[25][8] + coeff0_26*dmats1[26][8] + coeff0_27*dmats1[27][8] + coeff0_28*dmats1[28][8] + coeff0_29*dmats1[29][8] + coeff0_30*dmats1[30][8] + coeff0_31*dmats1[31][8] + coeff0_32*dmats1[32][8] + coeff0_33*dmats1[33][8] + coeff0_34*dmats1[34][8];
          new_coeff0_9 = coeff0_0*dmats1[0][9] + coeff0_1*dmats1[1][9] + coeff0_2*dmats1[2][9] + coeff0_3*dmats1[3][9] + coeff0_4*dmats1[4][9] + coeff0_5*dmats1[5][9] + coeff0_6*dmats1[6][9] + coeff0_7*dmats1[7][9] + coeff0_8*dmats1[8][9] + coeff0_9*dmats1[9][9] + coeff0_10*dmats1[10][9] + coeff0_11*dmats1[11][9] + coeff0_12*dmats1[12][9] + coeff0_13*dmats1[13][9] + coeff0_14*dmats1[14][9] + coeff0_15*dmats1[15][9] + coeff0_16*dmats1[16][9] + coeff0_17*dmats1[17][9] + coeff0_18*dmats1[18][9] + coeff0_19*dmats1[19][9] + coeff0_20*dmats1[20][9] + coeff0_21*dmats1[21][9] + coeff0_22*dmats1[22][9] + coeff0_23*dmats1[23][9] + coeff0_24*dmats1[24][9] + coeff0_25*dmats1[25][9] + coeff0_26*dmats1[26][9] + coeff0_27*dmats1[27][9] + coeff0_28*dmats1[28][9] + coeff0_29*dmats1[29][9] + coeff0_30*dmats1[30][9] + coeff0_31*dmats1[31][9] + coeff0_32*dmats1[32][9] + coeff0_33*dmats1[33][9] + coeff0_34*dmats1[34][9];
          new_coeff0_10 = coeff0_0*dmats1[0][10] + coeff0_1*dmats1[1][10] + coeff0_2*dmats1[2][10] + coeff0_3*dmats1[3][10] + coeff0_4*dmats1[4][10] + coeff0_5*dmats1[5][10] + coeff0_6*dmats1[6][10] + coeff0_7*dmats1[7][10] + coeff0_8*dmats1[8][10] + coeff0_9*dmats1[9][10] + coeff0_10*dmats1[10][10] + coeff0_11*dmats1[11][10] + coeff0_12*dmats1[12][10] + coeff0_13*dmats1[13][10] + coeff0_14*dmats1[14][10] + coeff0_15*dmats1[15][10] + coeff0_16*dmats1[16][10] + coeff0_17*dmats1[17][10] + coeff0_18*dmats1[18][10] + coeff0_19*dmats1[19][10] + coeff0_20*dmats1[20][10] + coeff0_21*dmats1[21][10] + coeff0_22*dmats1[22][10] + coeff0_23*dmats1[23][10] + coeff0_24*dmats1[24][10] + coeff0_25*dmats1[25][10] + coeff0_26*dmats1[26][10] + coeff0_27*dmats1[27][10] + coeff0_28*dmats1[28][10] + coeff0_29*dmats1[29][10] + coeff0_30*dmats1[30][10] + coeff0_31*dmats1[31][10] + coeff0_32*dmats1[32][10] + coeff0_33*dmats1[33][10] + coeff0_34*dmats1[34][10];
          new_coeff0_11 = coeff0_0*dmats1[0][11] + coeff0_1*dmats1[1][11] + coeff0_2*dmats1[2][11] + coeff0_3*dmats1[3][11] + coeff0_4*dmats1[4][11] + coeff0_5*dmats1[5][11] + coeff0_6*dmats1[6][11] + coeff0_7*dmats1[7][11] + coeff0_8*dmats1[8][11] + coeff0_9*dmats1[9][11] + coeff0_10*dmats1[10][11] + coeff0_11*dmats1[11][11] + coeff0_12*dmats1[12][11] + coeff0_13*dmats1[13][11] + coeff0_14*dmats1[14][11] + coeff0_15*dmats1[15][11] + coeff0_16*dmats1[16][11] + coeff0_17*dmats1[17][11] + coeff0_18*dmats1[18][11] + coeff0_19*dmats1[19][11] + coeff0_20*dmats1[20][11] + coeff0_21*dmats1[21][11] + coeff0_22*dmats1[22][11] + coeff0_23*dmats1[23][11] + coeff0_24*dmats1[24][11] + coeff0_25*dmats1[25][11] + coeff0_26*dmats1[26][11] + coeff0_27*dmats1[27][11] + coeff0_28*dmats1[28][11] + coeff0_29*dmats1[29][11] + coeff0_30*dmats1[30][11] + coeff0_31*dmats1[31][11] + coeff0_32*dmats1[32][11] + coeff0_33*dmats1[33][11] + coeff0_34*dmats1[34][11];
          new_coeff0_12 = coeff0_0*dmats1[0][12] + coeff0_1*dmats1[1][12] + coeff0_2*dmats1[2][12] + coeff0_3*dmats1[3][12] + coeff0_4*dmats1[4][12] + coeff0_5*dmats1[5][12] + coeff0_6*dmats1[6][12] + coeff0_7*dmats1[7][12] + coeff0_8*dmats1[8][12] + coeff0_9*dmats1[9][12] + coeff0_10*dmats1[10][12] + coeff0_11*dmats1[11][12] + coeff0_12*dmats1[12][12] + coeff0_13*dmats1[13][12] + coeff0_14*dmats1[14][12] + coeff0_15*dmats1[15][12] + coeff0_16*dmats1[16][12] + coeff0_17*dmats1[17][12] + coeff0_18*dmats1[18][12] + coeff0_19*dmats1[19][12] + coeff0_20*dmats1[20][12] + coeff0_21*dmats1[21][12] + coeff0_22*dmats1[22][12] + coeff0_23*dmats1[23][12] + coeff0_24*dmats1[24][12] + coeff0_25*dmats1[25][12] + coeff0_26*dmats1[26][12] + coeff0_27*dmats1[27][12] + coeff0_28*dmats1[28][12] + coeff0_29*dmats1[29][12] + coeff0_30*dmats1[30][12] + coeff0_31*dmats1[31][12] + coeff0_32*dmats1[32][12] + coeff0_33*dmats1[33][12] + coeff0_34*dmats1[34][12];
          new_coeff0_13 = coeff0_0*dmats1[0][13] + coeff0_1*dmats1[1][13] + coeff0_2*dmats1[2][13] + coeff0_3*dmats1[3][13] + coeff0_4*dmats1[4][13] + coeff0_5*dmats1[5][13] + coeff0_6*dmats1[6][13] + coeff0_7*dmats1[7][13] + coeff0_8*dmats1[8][13] + coeff0_9*dmats1[9][13] + coeff0_10*dmats1[10][13] + coeff0_11*dmats1[11][13] + coeff0_12*dmats1[12][13] + coeff0_13*dmats1[13][13] + coeff0_14*dmats1[14][13] + coeff0_15*dmats1[15][13] + coeff0_16*dmats1[16][13] + coeff0_17*dmats1[17][13] + coeff0_18*dmats1[18][13] + coeff0_19*dmats1[19][13] + coeff0_20*dmats1[20][13] + coeff0_21*dmats1[21][13] + coeff0_22*dmats1[22][13] + coeff0_23*dmats1[23][13] + coeff0_24*dmats1[24][13] + coeff0_25*dmats1[25][13] + coeff0_26*dmats1[26][13] + coeff0_27*dmats1[27][13] + coeff0_28*dmats1[28][13] + coeff0_29*dmats1[29][13] + coeff0_30*dmats1[30][13] + coeff0_31*dmats1[31][13] + coeff0_32*dmats1[32][13] + coeff0_33*dmats1[33][13] + coeff0_34*dmats1[34][13];
          new_coeff0_14 = coeff0_0*dmats1[0][14] + coeff0_1*dmats1[1][14] + coeff0_2*dmats1[2][14] + coeff0_3*dmats1[3][14] + coeff0_4*dmats1[4][14] + coeff0_5*dmats1[5][14] + coeff0_6*dmats1[6][14] + coeff0_7*dmats1[7][14] + coeff0_8*dmats1[8][14] + coeff0_9*dmats1[9][14] + coeff0_10*dmats1[10][14] + coeff0_11*dmats1[11][14] + coeff0_12*dmats1[12][14] + coeff0_13*dmats1[13][14] + coeff0_14*dmats1[14][14] + coeff0_15*dmats1[15][14] + coeff0_16*dmats1[16][14] + coeff0_17*dmats1[17][14] + coeff0_18*dmats1[18][14] + coeff0_19*dmats1[19][14] + coeff0_20*dmats1[20][14] + coeff0_21*dmats1[21][14] + coeff0_22*dmats1[22][14] + coeff0_23*dmats1[23][14] + coeff0_24*dmats1[24][14] + coeff0_25*dmats1[25][14] + coeff0_26*dmats1[26][14] + coeff0_27*dmats1[27][14] + coeff0_28*dmats1[28][14] + coeff0_29*dmats1[29][14] + coeff0_30*dmats1[30][14] + coeff0_31*dmats1[31][14] + coeff0_32*dmats1[32][14] + coeff0_33*dmats1[33][14] + coeff0_34*dmats1[34][14];
          new_coeff0_15 = coeff0_0*dmats1[0][15] + coeff0_1*dmats1[1][15] + coeff0_2*dmats1[2][15] + coeff0_3*dmats1[3][15] + coeff0_4*dmats1[4][15] + coeff0_5*dmats1[5][15] + coeff0_6*dmats1[6][15] + coeff0_7*dmats1[7][15] + coeff0_8*dmats1[8][15] + coeff0_9*dmats1[9][15] + coeff0_10*dmats1[10][15] + coeff0_11*dmats1[11][15] + coeff0_12*dmats1[12][15] + coeff0_13*dmats1[13][15] + coeff0_14*dmats1[14][15] + coeff0_15*dmats1[15][15] + coeff0_16*dmats1[16][15] + coeff0_17*dmats1[17][15] + coeff0_18*dmats1[18][15] + coeff0_19*dmats1[19][15] + coeff0_20*dmats1[20][15] + coeff0_21*dmats1[21][15] + coeff0_22*dmats1[22][15] + coeff0_23*dmats1[23][15] + coeff0_24*dmats1[24][15] + coeff0_25*dmats1[25][15] + coeff0_26*dmats1[26][15] + coeff0_27*dmats1[27][15] + coeff0_28*dmats1[28][15] + coeff0_29*dmats1[29][15] + coeff0_30*dmats1[30][15] + coeff0_31*dmats1[31][15] + coeff0_32*dmats1[32][15] + coeff0_33*dmats1[33][15] + coeff0_34*dmats1[34][15];
          new_coeff0_16 = coeff0_0*dmats1[0][16] + coeff0_1*dmats1[1][16] + coeff0_2*dmats1[2][16] + coeff0_3*dmats1[3][16] + coeff0_4*dmats1[4][16] + coeff0_5*dmats1[5][16] + coeff0_6*dmats1[6][16] + coeff0_7*dmats1[7][16] + coeff0_8*dmats1[8][16] + coeff0_9*dmats1[9][16] + coeff0_10*dmats1[10][16] + coeff0_11*dmats1[11][16] + coeff0_12*dmats1[12][16] + coeff0_13*dmats1[13][16] + coeff0_14*dmats1[14][16] + coeff0_15*dmats1[15][16] + coeff0_16*dmats1[16][16] + coeff0_17*dmats1[17][16] + coeff0_18*dmats1[18][16] + coeff0_19*dmats1[19][16] + coeff0_20*dmats1[20][16] + coeff0_21*dmats1[21][16] + coeff0_22*dmats1[22][16] + coeff0_23*dmats1[23][16] + coeff0_24*dmats1[24][16] + coeff0_25*dmats1[25][16] + coeff0_26*dmats1[26][16] + coeff0_27*dmats1[27][16] + coeff0_28*dmats1[28][16] + coeff0_29*dmats1[29][16] + coeff0_30*dmats1[30][16] + coeff0_31*dmats1[31][16] + coeff0_32*dmats1[32][16] + coeff0_33*dmats1[33][16] + coeff0_34*dmats1[34][16];
          new_coeff0_17 = coeff0_0*dmats1[0][17] + coeff0_1*dmats1[1][17] + coeff0_2*dmats1[2][17] + coeff0_3*dmats1[3][17] + coeff0_4*dmats1[4][17] + coeff0_5*dmats1[5][17] + coeff0_6*dmats1[6][17] + coeff0_7*dmats1[7][17] + coeff0_8*dmats1[8][17] + coeff0_9*dmats1[9][17] + coeff0_10*dmats1[10][17] + coeff0_11*dmats1[11][17] + coeff0_12*dmats1[12][17] + coeff0_13*dmats1[13][17] + coeff0_14*dmats1[14][17] + coeff0_15*dmats1[15][17] + coeff0_16*dmats1[16][17] + coeff0_17*dmats1[17][17] + coeff0_18*dmats1[18][17] + coeff0_19*dmats1[19][17] + coeff0_20*dmats1[20][17] + coeff0_21*dmats1[21][17] + coeff0_22*dmats1[22][17] + coeff0_23*dmats1[23][17] + coeff0_24*dmats1[24][17] + coeff0_25*dmats1[25][17] + coeff0_26*dmats1[26][17] + coeff0_27*dmats1[27][17] + coeff0_28*dmats1[28][17] + coeff0_29*dmats1[29][17] + coeff0_30*dmats1[30][17] + coeff0_31*dmats1[31][17] + coeff0_32*dmats1[32][17] + coeff0_33*dmats1[33][17] + coeff0_34*dmats1[34][17];
          new_coeff0_18 = coeff0_0*dmats1[0][18] + coeff0_1*dmats1[1][18] + coeff0_2*dmats1[2][18] + coeff0_3*dmats1[3][18] + coeff0_4*dmats1[4][18] + coeff0_5*dmats1[5][18] + coeff0_6*dmats1[6][18] + coeff0_7*dmats1[7][18] + coeff0_8*dmats1[8][18] + coeff0_9*dmats1[9][18] + coeff0_10*dmats1[10][18] + coeff0_11*dmats1[11][18] + coeff0_12*dmats1[12][18] + coeff0_13*dmats1[13][18] + coeff0_14*dmats1[14][18] + coeff0_15*dmats1[15][18] + coeff0_16*dmats1[16][18] + coeff0_17*dmats1[17][18] + coeff0_18*dmats1[18][18] + coeff0_19*dmats1[19][18] + coeff0_20*dmats1[20][18] + coeff0_21*dmats1[21][18] + coeff0_22*dmats1[22][18] + coeff0_23*dmats1[23][18] + coeff0_24*dmats1[24][18] + coeff0_25*dmats1[25][18] + coeff0_26*dmats1[26][18] + coeff0_27*dmats1[27][18] + coeff0_28*dmats1[28][18] + coeff0_29*dmats1[29][18] + coeff0_30*dmats1[30][18] + coeff0_31*dmats1[31][18] + coeff0_32*dmats1[32][18] + coeff0_33*dmats1[33][18] + coeff0_34*dmats1[34][18];
          new_coeff0_19 = coeff0_0*dmats1[0][19] + coeff0_1*dmats1[1][19] + coeff0_2*dmats1[2][19] + coeff0_3*dmats1[3][19] + coeff0_4*dmats1[4][19] + coeff0_5*dmats1[5][19] + coeff0_6*dmats1[6][19] + coeff0_7*dmats1[7][19] + coeff0_8*dmats1[8][19] + coeff0_9*dmats1[9][19] + coeff0_10*dmats1[10][19] + coeff0_11*dmats1[11][19] + coeff0_12*dmats1[12][19] + coeff0_13*dmats1[13][19] + coeff0_14*dmats1[14][19] + coeff0_15*dmats1[15][19] + coeff0_16*dmats1[16][19] + coeff0_17*dmats1[17][19] + coeff0_18*dmats1[18][19] + coeff0_19*dmats1[19][19] + coeff0_20*dmats1[20][19] + coeff0_21*dmats1[21][19] + coeff0_22*dmats1[22][19] + coeff0_23*dmats1[23][19] + coeff0_24*dmats1[24][19] + coeff0_25*dmats1[25][19] + coeff0_26*dmats1[26][19] + coeff0_27*dmats1[27][19] + coeff0_28*dmats1[28][19] + coeff0_29*dmats1[29][19] + coeff0_30*dmats1[30][19] + coeff0_31*dmats1[31][19] + coeff0_32*dmats1[32][19] + coeff0_33*dmats1[33][19] + coeff0_34*dmats1[34][19];
          new_coeff0_20 = coeff0_0*dmats1[0][20] + coeff0_1*dmats1[1][20] + coeff0_2*dmats1[2][20] + coeff0_3*dmats1[3][20] + coeff0_4*dmats1[4][20] + coeff0_5*dmats1[5][20] + coeff0_6*dmats1[6][20] + coeff0_7*dmats1[7][20] + coeff0_8*dmats1[8][20] + coeff0_9*dmats1[9][20] + coeff0_10*dmats1[10][20] + coeff0_11*dmats1[11][20] + coeff0_12*dmats1[12][20] + coeff0_13*dmats1[13][20] + coeff0_14*dmats1[14][20] + coeff0_15*dmats1[15][20] + coeff0_16*dmats1[16][20] + coeff0_17*dmats1[17][20] + coeff0_18*dmats1[18][20] + coeff0_19*dmats1[19][20] + coeff0_20*dmats1[20][20] + coeff0_21*dmats1[21][20] + coeff0_22*dmats1[22][20] + coeff0_23*dmats1[23][20] + coeff0_24*dmats1[24][20] + coeff0_25*dmats1[25][20] + coeff0_26*dmats1[26][20] + coeff0_27*dmats1[27][20] + coeff0_28*dmats1[28][20] + coeff0_29*dmats1[29][20] + coeff0_30*dmats1[30][20] + coeff0_31*dmats1[31][20] + coeff0_32*dmats1[32][20] + coeff0_33*dmats1[33][20] + coeff0_34*dmats1[34][20];
          new_coeff0_21 = coeff0_0*dmats1[0][21] + coeff0_1*dmats1[1][21] + coeff0_2*dmats1[2][21] + coeff0_3*dmats1[3][21] + coeff0_4*dmats1[4][21] + coeff0_5*dmats1[5][21] + coeff0_6*dmats1[6][21] + coeff0_7*dmats1[7][21] + coeff0_8*dmats1[8][21] + coeff0_9*dmats1[9][21] + coeff0_10*dmats1[10][21] + coeff0_11*dmats1[11][21] + coeff0_12*dmats1[12][21] + coeff0_13*dmats1[13][21] + coeff0_14*dmats1[14][21] + coeff0_15*dmats1[15][21] + coeff0_16*dmats1[16][21] + coeff0_17*dmats1[17][21] + coeff0_18*dmats1[18][21] + coeff0_19*dmats1[19][21] + coeff0_20*dmats1[20][21] + coeff0_21*dmats1[21][21] + coeff0_22*dmats1[22][21] + coeff0_23*dmats1[23][21] + coeff0_24*dmats1[24][21] + coeff0_25*dmats1[25][21] + coeff0_26*dmats1[26][21] + coeff0_27*dmats1[27][21] + coeff0_28*dmats1[28][21] + coeff0_29*dmats1[29][21] + coeff0_30*dmats1[30][21] + coeff0_31*dmats1[31][21] + coeff0_32*dmats1[32][21] + coeff0_33*dmats1[33][21] + coeff0_34*dmats1[34][21];
          new_coeff0_22 = coeff0_0*dmats1[0][22] + coeff0_1*dmats1[1][22] + coeff0_2*dmats1[2][22] + coeff0_3*dmats1[3][22] + coeff0_4*dmats1[4][22] + coeff0_5*dmats1[5][22] + coeff0_6*dmats1[6][22] + coeff0_7*dmats1[7][22] + coeff0_8*dmats1[8][22] + coeff0_9*dmats1[9][22] + coeff0_10*dmats1[10][22] + coeff0_11*dmats1[11][22] + coeff0_12*dmats1[12][22] + coeff0_13*dmats1[13][22] + coeff0_14*dmats1[14][22] + coeff0_15*dmats1[15][22] + coeff0_16*dmats1[16][22] + coeff0_17*dmats1[17][22] + coeff0_18*dmats1[18][22] + coeff0_19*dmats1[19][22] + coeff0_20*dmats1[20][22] + coeff0_21*dmats1[21][22] + coeff0_22*dmats1[22][22] + coeff0_23*dmats1[23][22] + coeff0_24*dmats1[24][22] + coeff0_25*dmats1[25][22] + coeff0_26*dmats1[26][22] + coeff0_27*dmats1[27][22] + coeff0_28*dmats1[28][22] + coeff0_29*dmats1[29][22] + coeff0_30*dmats1[30][22] + coeff0_31*dmats1[31][22] + coeff0_32*dmats1[32][22] + coeff0_33*dmats1[33][22] + coeff0_34*dmats1[34][22];
          new_coeff0_23 = coeff0_0*dmats1[0][23] + coeff0_1*dmats1[1][23] + coeff0_2*dmats1[2][23] + coeff0_3*dmats1[3][23] + coeff0_4*dmats1[4][23] + coeff0_5*dmats1[5][23] + coeff0_6*dmats1[6][23] + coeff0_7*dmats1[7][23] + coeff0_8*dmats1[8][23] + coeff0_9*dmats1[9][23] + coeff0_10*dmats1[10][23] + coeff0_11*dmats1[11][23] + coeff0_12*dmats1[12][23] + coeff0_13*dmats1[13][23] + coeff0_14*dmats1[14][23] + coeff0_15*dmats1[15][23] + coeff0_16*dmats1[16][23] + coeff0_17*dmats1[17][23] + coeff0_18*dmats1[18][23] + coeff0_19*dmats1[19][23] + coeff0_20*dmats1[20][23] + coeff0_21*dmats1[21][23] + coeff0_22*dmats1[22][23] + coeff0_23*dmats1[23][23] + coeff0_24*dmats1[24][23] + coeff0_25*dmats1[25][23] + coeff0_26*dmats1[26][23] + coeff0_27*dmats1[27][23] + coeff0_28*dmats1[28][23] + coeff0_29*dmats1[29][23] + coeff0_30*dmats1[30][23] + coeff0_31*dmats1[31][23] + coeff0_32*dmats1[32][23] + coeff0_33*dmats1[33][23] + coeff0_34*dmats1[34][23];
          new_coeff0_24 = coeff0_0*dmats1[0][24] + coeff0_1*dmats1[1][24] + coeff0_2*dmats1[2][24] + coeff0_3*dmats1[3][24] + coeff0_4*dmats1[4][24] + coeff0_5*dmats1[5][24] + coeff0_6*dmats1[6][24] + coeff0_7*dmats1[7][24] + coeff0_8*dmats1[8][24] + coeff0_9*dmats1[9][24] + coeff0_10*dmats1[10][24] + coeff0_11*dmats1[11][24] + coeff0_12*dmats1[12][24] + coeff0_13*dmats1[13][24] + coeff0_14*dmats1[14][24] + coeff0_15*dmats1[15][24] + coeff0_16*dmats1[16][24] + coeff0_17*dmats1[17][24] + coeff0_18*dmats1[18][24] + coeff0_19*dmats1[19][24] + coeff0_20*dmats1[20][24] + coeff0_21*dmats1[21][24] + coeff0_22*dmats1[22][24] + coeff0_23*dmats1[23][24] + coeff0_24*dmats1[24][24] + coeff0_25*dmats1[25][24] + coeff0_26*dmats1[26][24] + coeff0_27*dmats1[27][24] + coeff0_28*dmats1[28][24] + coeff0_29*dmats1[29][24] + coeff0_30*dmats1[30][24] + coeff0_31*dmats1[31][24] + coeff0_32*dmats1[32][24] + coeff0_33*dmats1[33][24] + coeff0_34*dmats1[34][24];
          new_coeff0_25 = coeff0_0*dmats1[0][25] + coeff0_1*dmats1[1][25] + coeff0_2*dmats1[2][25] + coeff0_3*dmats1[3][25] + coeff0_4*dmats1[4][25] + coeff0_5*dmats1[5][25] + coeff0_6*dmats1[6][25] + coeff0_7*dmats1[7][25] + coeff0_8*dmats1[8][25] + coeff0_9*dmats1[9][25] + coeff0_10*dmats1[10][25] + coeff0_11*dmats1[11][25] + coeff0_12*dmats1[12][25] + coeff0_13*dmats1[13][25] + coeff0_14*dmats1[14][25] + coeff0_15*dmats1[15][25] + coeff0_16*dmats1[16][25] + coeff0_17*dmats1[17][25] + coeff0_18*dmats1[18][25] + coeff0_19*dmats1[19][25] + coeff0_20*dmats1[20][25] + coeff0_21*dmats1[21][25] + coeff0_22*dmats1[22][25] + coeff0_23*dmats1[23][25] + coeff0_24*dmats1[24][25] + coeff0_25*dmats1[25][25] + coeff0_26*dmats1[26][25] + coeff0_27*dmats1[27][25] + coeff0_28*dmats1[28][25] + coeff0_29*dmats1[29][25] + coeff0_30*dmats1[30][25] + coeff0_31*dmats1[31][25] + coeff0_32*dmats1[32][25] + coeff0_33*dmats1[33][25] + coeff0_34*dmats1[34][25];
          new_coeff0_26 = coeff0_0*dmats1[0][26] + coeff0_1*dmats1[1][26] + coeff0_2*dmats1[2][26] + coeff0_3*dmats1[3][26] + coeff0_4*dmats1[4][26] + coeff0_5*dmats1[5][26] + coeff0_6*dmats1[6][26] + coeff0_7*dmats1[7][26] + coeff0_8*dmats1[8][26] + coeff0_9*dmats1[9][26] + coeff0_10*dmats1[10][26] + coeff0_11*dmats1[11][26] + coeff0_12*dmats1[12][26] + coeff0_13*dmats1[13][26] + coeff0_14*dmats1[14][26] + coeff0_15*dmats1[15][26] + coeff0_16*dmats1[16][26] + coeff0_17*dmats1[17][26] + coeff0_18*dmats1[18][26] + coeff0_19*dmats1[19][26] + coeff0_20*dmats1[20][26] + coeff0_21*dmats1[21][26] + coeff0_22*dmats1[22][26] + coeff0_23*dmats1[23][26] + coeff0_24*dmats1[24][26] + coeff0_25*dmats1[25][26] + coeff0_26*dmats1[26][26] + coeff0_27*dmats1[27][26] + coeff0_28*dmats1[28][26] + coeff0_29*dmats1[29][26] + coeff0_30*dmats1[30][26] + coeff0_31*dmats1[31][26] + coeff0_32*dmats1[32][26] + coeff0_33*dmats1[33][26] + coeff0_34*dmats1[34][26];
          new_coeff0_27 = coeff0_0*dmats1[0][27] + coeff0_1*dmats1[1][27] + coeff0_2*dmats1[2][27] + coeff0_3*dmats1[3][27] + coeff0_4*dmats1[4][27] + coeff0_5*dmats1[5][27] + coeff0_6*dmats1[6][27] + coeff0_7*dmats1[7][27] + coeff0_8*dmats1[8][27] + coeff0_9*dmats1[9][27] + coeff0_10*dmats1[10][27] + coeff0_11*dmats1[11][27] + coeff0_12*dmats1[12][27] + coeff0_13*dmats1[13][27] + coeff0_14*dmats1[14][27] + coeff0_15*dmats1[15][27] + coeff0_16*dmats1[16][27] + coeff0_17*dmats1[17][27] + coeff0_18*dmats1[18][27] + coeff0_19*dmats1[19][27] + coeff0_20*dmats1[20][27] + coeff0_21*dmats1[21][27] + coeff0_22*dmats1[22][27] + coeff0_23*dmats1[23][27] + coeff0_24*dmats1[24][27] + coeff0_25*dmats1[25][27] + coeff0_26*dmats1[26][27] + coeff0_27*dmats1[27][27] + coeff0_28*dmats1[28][27] + coeff0_29*dmats1[29][27] + coeff0_30*dmats1[30][27] + coeff0_31*dmats1[31][27] + coeff0_32*dmats1[32][27] + coeff0_33*dmats1[33][27] + coeff0_34*dmats1[34][27];
          new_coeff0_28 = coeff0_0*dmats1[0][28] + coeff0_1*dmats1[1][28] + coeff0_2*dmats1[2][28] + coeff0_3*dmats1[3][28] + coeff0_4*dmats1[4][28] + coeff0_5*dmats1[5][28] + coeff0_6*dmats1[6][28] + coeff0_7*dmats1[7][28] + coeff0_8*dmats1[8][28] + coeff0_9*dmats1[9][28] + coeff0_10*dmats1[10][28] + coeff0_11*dmats1[11][28] + coeff0_12*dmats1[12][28] + coeff0_13*dmats1[13][28] + coeff0_14*dmats1[14][28] + coeff0_15*dmats1[15][28] + coeff0_16*dmats1[16][28] + coeff0_17*dmats1[17][28] + coeff0_18*dmats1[18][28] + coeff0_19*dmats1[19][28] + coeff0_20*dmats1[20][28] + coeff0_21*dmats1[21][28] + coeff0_22*dmats1[22][28] + coeff0_23*dmats1[23][28] + coeff0_24*dmats1[24][28] + coeff0_25*dmats1[25][28] + coeff0_26*dmats1[26][28] + coeff0_27*dmats1[27][28] + coeff0_28*dmats1[28][28] + coeff0_29*dmats1[29][28] + coeff0_30*dmats1[30][28] + coeff0_31*dmats1[31][28] + coeff0_32*dmats1[32][28] + coeff0_33*dmats1[33][28] + coeff0_34*dmats1[34][28];
          new_coeff0_29 = coeff0_0*dmats1[0][29] + coeff0_1*dmats1[1][29] + coeff0_2*dmats1[2][29] + coeff0_3*dmats1[3][29] + coeff0_4*dmats1[4][29] + coeff0_5*dmats1[5][29] + coeff0_6*dmats1[6][29] + coeff0_7*dmats1[7][29] + coeff0_8*dmats1[8][29] + coeff0_9*dmats1[9][29] + coeff0_10*dmats1[10][29] + coeff0_11*dmats1[11][29] + coeff0_12*dmats1[12][29] + coeff0_13*dmats1[13][29] + coeff0_14*dmats1[14][29] + coeff0_15*dmats1[15][29] + coeff0_16*dmats1[16][29] + coeff0_17*dmats1[17][29] + coeff0_18*dmats1[18][29] + coeff0_19*dmats1[19][29] + coeff0_20*dmats1[20][29] + coeff0_21*dmats1[21][29] + coeff0_22*dmats1[22][29] + coeff0_23*dmats1[23][29] + coeff0_24*dmats1[24][29] + coeff0_25*dmats1[25][29] + coeff0_26*dmats1[26][29] + coeff0_27*dmats1[27][29] + coeff0_28*dmats1[28][29] + coeff0_29*dmats1[29][29] + coeff0_30*dmats1[30][29] + coeff0_31*dmats1[31][29] + coeff0_32*dmats1[32][29] + coeff0_33*dmats1[33][29] + coeff0_34*dmats1[34][29];
          new_coeff0_30 = coeff0_0*dmats1[0][30] + coeff0_1*dmats1[1][30] + coeff0_2*dmats1[2][30] + coeff0_3*dmats1[3][30] + coeff0_4*dmats1[4][30] + coeff0_5*dmats1[5][30] + coeff0_6*dmats1[6][30] + coeff0_7*dmats1[7][30] + coeff0_8*dmats1[8][30] + coeff0_9*dmats1[9][30] + coeff0_10*dmats1[10][30] + coeff0_11*dmats1[11][30] + coeff0_12*dmats1[12][30] + coeff0_13*dmats1[13][30] + coeff0_14*dmats1[14][30] + coeff0_15*dmats1[15][30] + coeff0_16*dmats1[16][30] + coeff0_17*dmats1[17][30] + coeff0_18*dmats1[18][30] + coeff0_19*dmats1[19][30] + coeff0_20*dmats1[20][30] + coeff0_21*dmats1[21][30] + coeff0_22*dmats1[22][30] + coeff0_23*dmats1[23][30] + coeff0_24*dmats1[24][30] + coeff0_25*dmats1[25][30] + coeff0_26*dmats1[26][30] + coeff0_27*dmats1[27][30] + coeff0_28*dmats1[28][30] + coeff0_29*dmats1[29][30] + coeff0_30*dmats1[30][30] + coeff0_31*dmats1[31][30] + coeff0_32*dmats1[32][30] + coeff0_33*dmats1[33][30] + coeff0_34*dmats1[34][30];
          new_coeff0_31 = coeff0_0*dmats1[0][31] + coeff0_1*dmats1[1][31] + coeff0_2*dmats1[2][31] + coeff0_3*dmats1[3][31] + coeff0_4*dmats1[4][31] + coeff0_5*dmats1[5][31] + coeff0_6*dmats1[6][31] + coeff0_7*dmats1[7][31] + coeff0_8*dmats1[8][31] + coeff0_9*dmats1[9][31] + coeff0_10*dmats1[10][31] + coeff0_11*dmats1[11][31] + coeff0_12*dmats1[12][31] + coeff0_13*dmats1[13][31] + coeff0_14*dmats1[14][31] + coeff0_15*dmats1[15][31] + coeff0_16*dmats1[16][31] + coeff0_17*dmats1[17][31] + coeff0_18*dmats1[18][31] + coeff0_19*dmats1[19][31] + coeff0_20*dmats1[20][31] + coeff0_21*dmats1[21][31] + coeff0_22*dmats1[22][31] + coeff0_23*dmats1[23][31] + coeff0_24*dmats1[24][31] + coeff0_25*dmats1[25][31] + coeff0_26*dmats1[26][31] + coeff0_27*dmats1[27][31] + coeff0_28*dmats1[28][31] + coeff0_29*dmats1[29][31] + coeff0_30*dmats1[30][31] + coeff0_31*dmats1[31][31] + coeff0_32*dmats1[32][31] + coeff0_33*dmats1[33][31] + coeff0_34*dmats1[34][31];
          new_coeff0_32 = coeff0_0*dmats1[0][32] + coeff0_1*dmats1[1][32] + coeff0_2*dmats1[2][32] + coeff0_3*dmats1[3][32] + coeff0_4*dmats1[4][32] + coeff0_5*dmats1[5][32] + coeff0_6*dmats1[6][32] + coeff0_7*dmats1[7][32] + coeff0_8*dmats1[8][32] + coeff0_9*dmats1[9][32] + coeff0_10*dmats1[10][32] + coeff0_11*dmats1[11][32] + coeff0_12*dmats1[12][32] + coeff0_13*dmats1[13][32] + coeff0_14*dmats1[14][32] + coeff0_15*dmats1[15][32] + coeff0_16*dmats1[16][32] + coeff0_17*dmats1[17][32] + coeff0_18*dmats1[18][32] + coeff0_19*dmats1[19][32] + coeff0_20*dmats1[20][32] + coeff0_21*dmats1[21][32] + coeff0_22*dmats1[22][32] + coeff0_23*dmats1[23][32] + coeff0_24*dmats1[24][32] + coeff0_25*dmats1[25][32] + coeff0_26*dmats1[26][32] + coeff0_27*dmats1[27][32] + coeff0_28*dmats1[28][32] + coeff0_29*dmats1[29][32] + coeff0_30*dmats1[30][32] + coeff0_31*dmats1[31][32] + coeff0_32*dmats1[32][32] + coeff0_33*dmats1[33][32] + coeff0_34*dmats1[34][32];
          new_coeff0_33 = coeff0_0*dmats1[0][33] + coeff0_1*dmats1[1][33] + coeff0_2*dmats1[2][33] + coeff0_3*dmats1[3][33] + coeff0_4*dmats1[4][33] + coeff0_5*dmats1[5][33] + coeff0_6*dmats1[6][33] + coeff0_7*dmats1[7][33] + coeff0_8*dmats1[8][33] + coeff0_9*dmats1[9][33] + coeff0_10*dmats1[10][33] + coeff0_11*dmats1[11][33] + coeff0_12*dmats1[12][33] + coeff0_13*dmats1[13][33] + coeff0_14*dmats1[14][33] + coeff0_15*dmats1[15][33] + coeff0_16*dmats1[16][33] + coeff0_17*dmats1[17][33] + coeff0_18*dmats1[18][33] + coeff0_19*dmats1[19][33] + coeff0_20*dmats1[20][33] + coeff0_21*dmats1[21][33] + coeff0_22*dmats1[22][33] + coeff0_23*dmats1[23][33] + coeff0_24*dmats1[24][33] + coeff0_25*dmats1[25][33] + coeff0_26*dmats1[26][33] + coeff0_27*dmats1[27][33] + coeff0_28*dmats1[28][33] + coeff0_29*dmats1[29][33] + coeff0_30*dmats1[30][33] + coeff0_31*dmats1[31][33] + coeff0_32*dmats1[32][33] + coeff0_33*dmats1[33][33] + coeff0_34*dmats1[34][33];
          new_coeff0_34 = coeff0_0*dmats1[0][34] + coeff0_1*dmats1[1][34] + coeff0_2*dmats1[2][34] + coeff0_3*dmats1[3][34] + coeff0_4*dmats1[4][34] + coeff0_5*dmats1[5][34] + coeff0_6*dmats1[6][34] + coeff0_7*dmats1[7][34] + coeff0_8*dmats1[8][34] + coeff0_9*dmats1[9][34] + coeff0_10*dmats1[10][34] + coeff0_11*dmats1[11][34] + coeff0_12*dmats1[12][34] + coeff0_13*dmats1[13][34] + coeff0_14*dmats1[14][34] + coeff0_15*dmats1[15][34] + coeff0_16*dmats1[16][34] + coeff0_17*dmats1[17][34] + coeff0_18*dmats1[18][34] + coeff0_19*dmats1[19][34] + coeff0_20*dmats1[20][34] + coeff0_21*dmats1[21][34] + coeff0_22*dmats1[22][34] + coeff0_23*dmats1[23][34] + coeff0_24*dmats1[24][34] + coeff0_25*dmats1[25][34] + coeff0_26*dmats1[26][34] + coeff0_27*dmats1[27][34] + coeff0_28*dmats1[28][34] + coeff0_29*dmats1[29][34] + coeff0_30*dmats1[30][34] + coeff0_31*dmats1[31][34] + coeff0_32*dmats1[32][34] + coeff0_33*dmats1[33][34] + coeff0_34*dmats1[34][34];
        }
        if(combinations[deriv_num][j] == 2)
        {
          new_coeff0_0 = coeff0_0*dmats2[0][0] + coeff0_1*dmats2[1][0] + coeff0_2*dmats2[2][0] + coeff0_3*dmats2[3][0] + coeff0_4*dmats2[4][0] + coeff0_5*dmats2[5][0] + coeff0_6*dmats2[6][0] + coeff0_7*dmats2[7][0] + coeff0_8*dmats2[8][0] + coeff0_9*dmats2[9][0] + coeff0_10*dmats2[10][0] + coeff0_11*dmats2[11][0] + coeff0_12*dmats2[12][0] + coeff0_13*dmats2[13][0] + coeff0_14*dmats2[14][0] + coeff0_15*dmats2[15][0] + coeff0_16*dmats2[16][0] + coeff0_17*dmats2[17][0] + coeff0_18*dmats2[18][0] + coeff0_19*dmats2[19][0] + coeff0_20*dmats2[20][0] + coeff0_21*dmats2[21][0] + coeff0_22*dmats2[22][0] + coeff0_23*dmats2[23][0] + coeff0_24*dmats2[24][0] + coeff0_25*dmats2[25][0] + coeff0_26*dmats2[26][0] + coeff0_27*dmats2[27][0] + coeff0_28*dmats2[28][0] + coeff0_29*dmats2[29][0] + coeff0_30*dmats2[30][0] + coeff0_31*dmats2[31][0] + coeff0_32*dmats2[32][0] + coeff0_33*dmats2[33][0] + coeff0_34*dmats2[34][0];
          new_coeff0_1 = coeff0_0*dmats2[0][1] + coeff0_1*dmats2[1][1] + coeff0_2*dmats2[2][1] + coeff0_3*dmats2[3][1] + coeff0_4*dmats2[4][1] + coeff0_5*dmats2[5][1] + coeff0_6*dmats2[6][1] + coeff0_7*dmats2[7][1] + coeff0_8*dmats2[8][1] + coeff0_9*dmats2[9][1] + coeff0_10*dmats2[10][1] + coeff0_11*dmats2[11][1] + coeff0_12*dmats2[12][1] + coeff0_13*dmats2[13][1] + coeff0_14*dmats2[14][1] + coeff0_15*dmats2[15][1] + coeff0_16*dmats2[16][1] + coeff0_17*dmats2[17][1] + coeff0_18*dmats2[18][1] + coeff0_19*dmats2[19][1] + coeff0_20*dmats2[20][1] + coeff0_21*dmats2[21][1] + coeff0_22*dmats2[22][1] + coeff0_23*dmats2[23][1] + coeff0_24*dmats2[24][1] + coeff0_25*dmats2[25][1] + coeff0_26*dmats2[26][1] + coeff0_27*dmats2[27][1] + coeff0_28*dmats2[28][1] + coeff0_29*dmats2[29][1] + coeff0_30*dmats2[30][1] + coeff0_31*dmats2[31][1] + coeff0_32*dmats2[32][1] + coeff0_33*dmats2[33][1] + coeff0_34*dmats2[34][1];
          new_coeff0_2 = coeff0_0*dmats2[0][2] + coeff0_1*dmats2[1][2] + coeff0_2*dmats2[2][2] + coeff0_3*dmats2[3][2] + coeff0_4*dmats2[4][2] + coeff0_5*dmats2[5][2] + coeff0_6*dmats2[6][2] + coeff0_7*dmats2[7][2] + coeff0_8*dmats2[8][2] + coeff0_9*dmats2[9][2] + coeff0_10*dmats2[10][2] + coeff0_11*dmats2[11][2] + coeff0_12*dmats2[12][2] + coeff0_13*dmats2[13][2] + coeff0_14*dmats2[14][2] + coeff0_15*dmats2[15][2] + coeff0_16*dmats2[16][2] + coeff0_17*dmats2[17][2] + coeff0_18*dmats2[18][2] + coeff0_19*dmats2[19][2] + coeff0_20*dmats2[20][2] + coeff0_21*dmats2[21][2] + coeff0_22*dmats2[22][2] + coeff0_23*dmats2[23][2] + coeff0_24*dmats2[24][2] + coeff0_25*dmats2[25][2] + coeff0_26*dmats2[26][2] + coeff0_27*dmats2[27][2] + coeff0_28*dmats2[28][2] + coeff0_29*dmats2[29][2] + coeff0_30*dmats2[30][2] + coeff0_31*dmats2[31][2] + coeff0_32*dmats2[32][2] + coeff0_33*dmats2[33][2] + coeff0_34*dmats2[34][2];
          new_coeff0_3 = coeff0_0*dmats2[0][3] + coeff0_1*dmats2[1][3] + coeff0_2*dmats2[2][3] + coeff0_3*dmats2[3][3] + coeff0_4*dmats2[4][3] + coeff0_5*dmats2[5][3] + coeff0_6*dmats2[6][3] + coeff0_7*dmats2[7][3] + coeff0_8*dmats2[8][3] + coeff0_9*dmats2[9][3] + coeff0_10*dmats2[10][3] + coeff0_11*dmats2[11][3] + coeff0_12*dmats2[12][3] + coeff0_13*dmats2[13][3] + coeff0_14*dmats2[14][3] + coeff0_15*dmats2[15][3] + coeff0_16*dmats2[16][3] + coeff0_17*dmats2[17][3] + coeff0_18*dmats2[18][3] + coeff0_19*dmats2[19][3] + coeff0_20*dmats2[20][3] + coeff0_21*dmats2[21][3] + coeff0_22*dmats2[22][3] + coeff0_23*dmats2[23][3] + coeff0_24*dmats2[24][3] + coeff0_25*dmats2[25][3] + coeff0_26*dmats2[26][3] + coeff0_27*dmats2[27][3] + coeff0_28*dmats2[28][3] + coeff0_29*dmats2[29][3] + coeff0_30*dmats2[30][3] + coeff0_31*dmats2[31][3] + coeff0_32*dmats2[32][3] + coeff0_33*dmats2[33][3] + coeff0_34*dmats2[34][3];
          new_coeff0_4 = coeff0_0*dmats2[0][4] + coeff0_1*dmats2[1][4] + coeff0_2*dmats2[2][4] + coeff0_3*dmats2[3][4] + coeff0_4*dmats2[4][4] + coeff0_5*dmats2[5][4] + coeff0_6*dmats2[6][4] + coeff0_7*dmats2[7][4] + coeff0_8*dmats2[8][4] + coeff0_9*dmats2[9][4] + coeff0_10*dmats2[10][4] + coeff0_11*dmats2[11][4] + coeff0_12*dmats2[12][4] + coeff0_13*dmats2[13][4] + coeff0_14*dmats2[14][4] + coeff0_15*dmats2[15][4] + coeff0_16*dmats2[16][4] + coeff0_17*dmats2[17][4] + coeff0_18*dmats2[18][4] + coeff0_19*dmats2[19][4] + coeff0_20*dmats2[20][4] + coeff0_21*dmats2[21][4] + coeff0_22*dmats2[22][4] + coeff0_23*dmats2[23][4] + coeff0_24*dmats2[24][4] + coeff0_25*dmats2[25][4] + coeff0_26*dmats2[26][4] + coeff0_27*dmats2[27][4] + coeff0_28*dmats2[28][4] + coeff0_29*dmats2[29][4] + coeff0_30*dmats2[30][4] + coeff0_31*dmats2[31][4] + coeff0_32*dmats2[32][4] + coeff0_33*dmats2[33][4] + coeff0_34*dmats2[34][4];
          new_coeff0_5 = coeff0_0*dmats2[0][5] + coeff0_1*dmats2[1][5] + coeff0_2*dmats2[2][5] + coeff0_3*dmats2[3][5] + coeff0_4*dmats2[4][5] + coeff0_5*dmats2[5][5] + coeff0_6*dmats2[6][5] + coeff0_7*dmats2[7][5] + coeff0_8*dmats2[8][5] + coeff0_9*dmats2[9][5] + coeff0_10*dmats2[10][5] + coeff0_11*dmats2[11][5] + coeff0_12*dmats2[12][5] + coeff0_13*dmats2[13][5] + coeff0_14*dmats2[14][5] + coeff0_15*dmats2[15][5] + coeff0_16*dmats2[16][5] + coeff0_17*dmats2[17][5] + coeff0_18*dmats2[18][5] + coeff0_19*dmats2[19][5] + coeff0_20*dmats2[20][5] + coeff0_21*dmats2[21][5] + coeff0_22*dmats2[22][5] + coeff0_23*dmats2[23][5] + coeff0_24*dmats2[24][5] + coeff0_25*dmats2[25][5] + coeff0_26*dmats2[26][5] + coeff0_27*dmats2[27][5] + coeff0_28*dmats2[28][5] + coeff0_29*dmats2[29][5] + coeff0_30*dmats2[30][5] + coeff0_31*dmats2[31][5] + coeff0_32*dmats2[32][5] + coeff0_33*dmats2[33][5] + coeff0_34*dmats2[34][5];
          new_coeff0_6 = coeff0_0*dmats2[0][6] + coeff0_1*dmats2[1][6] + coeff0_2*dmats2[2][6] + coeff0_3*dmats2[3][6] + coeff0_4*dmats2[4][6] + coeff0_5*dmats2[5][6] + coeff0_6*dmats2[6][6] + coeff0_7*dmats2[7][6] + coeff0_8*dmats2[8][6] + coeff0_9*dmats2[9][6] + coeff0_10*dmats2[10][6] + coeff0_11*dmats2[11][6] + coeff0_12*dmats2[12][6] + coeff0_13*dmats2[13][6] + coeff0_14*dmats2[14][6] + coeff0_15*dmats2[15][6] + coeff0_16*dmats2[16][6] + coeff0_17*dmats2[17][6] + coeff0_18*dmats2[18][6] + coeff0_19*dmats2[19][6] + coeff0_20*dmats2[20][6] + coeff0_21*dmats2[21][6] + coeff0_22*dmats2[22][6] + coeff0_23*dmats2[23][6] + coeff0_24*dmats2[24][6] + coeff0_25*dmats2[25][6] + coeff0_26*dmats2[26][6] + coeff0_27*dmats2[27][6] + coeff0_28*dmats2[28][6] + coeff0_29*dmats2[29][6] + coeff0_30*dmats2[30][6] + coeff0_31*dmats2[31][6] + coeff0_32*dmats2[32][6] + coeff0_33*dmats2[33][6] + coeff0_34*dmats2[34][6];
          new_coeff0_7 = coeff0_0*dmats2[0][7] + coeff0_1*dmats2[1][7] + coeff0_2*dmats2[2][7] + coeff0_3*dmats2[3][7] + coeff0_4*dmats2[4][7] + coeff0_5*dmats2[5][7] + coeff0_6*dmats2[6][7] + coeff0_7*dmats2[7][7] + coeff0_8*dmats2[8][7] + coeff0_9*dmats2[9][7] + coeff0_10*dmats2[10][7] + coeff0_11*dmats2[11][7] + coeff0_12*dmats2[12][7] + coeff0_13*dmats2[13][7] + coeff0_14*dmats2[14][7] + coeff0_15*dmats2[15][7] + coeff0_16*dmats2[16][7] + coeff0_17*dmats2[17][7] + coeff0_18*dmats2[18][7] + coeff0_19*dmats2[19][7] + coeff0_20*dmats2[20][7] + coeff0_21*dmats2[21][7] + coeff0_22*dmats2[22][7] + coeff0_23*dmats2[23][7] + coeff0_24*dmats2[24][7] + coeff0_25*dmats2[25][7] + coeff0_26*dmats2[26][7] + coeff0_27*dmats2[27][7] + coeff0_28*dmats2[28][7] + coeff0_29*dmats2[29][7] + coeff0_30*dmats2[30][7] + coeff0_31*dmats2[31][7] + coeff0_32*dmats2[32][7] + coeff0_33*dmats2[33][7] + coeff0_34*dmats2[34][7];
          new_coeff0_8 = coeff0_0*dmats2[0][8] + coeff0_1*dmats2[1][8] + coeff0_2*dmats2[2][8] + coeff0_3*dmats2[3][8] + coeff0_4*dmats2[4][8] + coeff0_5*dmats2[5][8] + coeff0_6*dmats2[6][8] + coeff0_7*dmats2[7][8] + coeff0_8*dmats2[8][8] + coeff0_9*dmats2[9][8] + coeff0_10*dmats2[10][8] + coeff0_11*dmats2[11][8] + coeff0_12*dmats2[12][8] + coeff0_13*dmats2[13][8] + coeff0_14*dmats2[14][8] + coeff0_15*dmats2[15][8] + coeff0_16*dmats2[16][8] + coeff0_17*dmats2[17][8] + coeff0_18*dmats2[18][8] + coeff0_19*dmats2[19][8] + coeff0_20*dmats2[20][8] + coeff0_21*dmats2[21][8] + coeff0_22*dmats2[22][8] + coeff0_23*dmats2[23][8] + coeff0_24*dmats2[24][8] + coeff0_25*dmats2[25][8] + coeff0_26*dmats2[26][8] + coeff0_27*dmats2[27][8] + coeff0_28*dmats2[28][8] + coeff0_29*dmats2[29][8] + coeff0_30*dmats2[30][8] + coeff0_31*dmats2[31][8] + coeff0_32*dmats2[32][8] + coeff0_33*dmats2[33][8] + coeff0_34*dmats2[34][8];
          new_coeff0_9 = coeff0_0*dmats2[0][9] + coeff0_1*dmats2[1][9] + coeff0_2*dmats2[2][9] + coeff0_3*dmats2[3][9] + coeff0_4*dmats2[4][9] + coeff0_5*dmats2[5][9] + coeff0_6*dmats2[6][9] + coeff0_7*dmats2[7][9] + coeff0_8*dmats2[8][9] + coeff0_9*dmats2[9][9] + coeff0_10*dmats2[10][9] + coeff0_11*dmats2[11][9] + coeff0_12*dmats2[12][9] + coeff0_13*dmats2[13][9] + coeff0_14*dmats2[14][9] + coeff0_15*dmats2[15][9] + coeff0_16*dmats2[16][9] + coeff0_17*dmats2[17][9] + coeff0_18*dmats2[18][9] + coeff0_19*dmats2[19][9] + coeff0_20*dmats2[20][9] + coeff0_21*dmats2[21][9] + coeff0_22*dmats2[22][9] + coeff0_23*dmats2[23][9] + coeff0_24*dmats2[24][9] + coeff0_25*dmats2[25][9] + coeff0_26*dmats2[26][9] + coeff0_27*dmats2[27][9] + coeff0_28*dmats2[28][9] + coeff0_29*dmats2[29][9] + coeff0_30*dmats2[30][9] + coeff0_31*dmats2[31][9] + coeff0_32*dmats2[32][9] + coeff0_33*dmats2[33][9] + coeff0_34*dmats2[34][9];
          new_coeff0_10 = coeff0_0*dmats2[0][10] + coeff0_1*dmats2[1][10] + coeff0_2*dmats2[2][10] + coeff0_3*dmats2[3][10] + coeff0_4*dmats2[4][10] + coeff0_5*dmats2[5][10] + coeff0_6*dmats2[6][10] + coeff0_7*dmats2[7][10] + coeff0_8*dmats2[8][10] + coeff0_9*dmats2[9][10] + coeff0_10*dmats2[10][10] + coeff0_11*dmats2[11][10] + coeff0_12*dmats2[12][10] + coeff0_13*dmats2[13][10] + coeff0_14*dmats2[14][10] + coeff0_15*dmats2[15][10] + coeff0_16*dmats2[16][10] + coeff0_17*dmats2[17][10] + coeff0_18*dmats2[18][10] + coeff0_19*dmats2[19][10] + coeff0_20*dmats2[20][10] + coeff0_21*dmats2[21][10] + coeff0_22*dmats2[22][10] + coeff0_23*dmats2[23][10] + coeff0_24*dmats2[24][10] + coeff0_25*dmats2[25][10] + coeff0_26*dmats2[26][10] + coeff0_27*dmats2[27][10] + coeff0_28*dmats2[28][10] + coeff0_29*dmats2[29][10] + coeff0_30*dmats2[30][10] + coeff0_31*dmats2[31][10] + coeff0_32*dmats2[32][10] + coeff0_33*dmats2[33][10] + coeff0_34*dmats2[34][10];
          new_coeff0_11 = coeff0_0*dmats2[0][11] + coeff0_1*dmats2[1][11] + coeff0_2*dmats2[2][11] + coeff0_3*dmats2[3][11] + coeff0_4*dmats2[4][11] + coeff0_5*dmats2[5][11] + coeff0_6*dmats2[6][11] + coeff0_7*dmats2[7][11] + coeff0_8*dmats2[8][11] + coeff0_9*dmats2[9][11] + coeff0_10*dmats2[10][11] + coeff0_11*dmats2[11][11] + coeff0_12*dmats2[12][11] + coeff0_13*dmats2[13][11] + coeff0_14*dmats2[14][11] + coeff0_15*dmats2[15][11] + coeff0_16*dmats2[16][11] + coeff0_17*dmats2[17][11] + coeff0_18*dmats2[18][11] + coeff0_19*dmats2[19][11] + coeff0_20*dmats2[20][11] + coeff0_21*dmats2[21][11] + coeff0_22*dmats2[22][11] + coeff0_23*dmats2[23][11] + coeff0_24*dmats2[24][11] + coeff0_25*dmats2[25][11] + coeff0_26*dmats2[26][11] + coeff0_27*dmats2[27][11] + coeff0_28*dmats2[28][11] + coeff0_29*dmats2[29][11] + coeff0_30*dmats2[30][11] + coeff0_31*dmats2[31][11] + coeff0_32*dmats2[32][11] + coeff0_33*dmats2[33][11] + coeff0_34*dmats2[34][11];
          new_coeff0_12 = coeff0_0*dmats2[0][12] + coeff0_1*dmats2[1][12] + coeff0_2*dmats2[2][12] + coeff0_3*dmats2[3][12] + coeff0_4*dmats2[4][12] + coeff0_5*dmats2[5][12] + coeff0_6*dmats2[6][12] + coeff0_7*dmats2[7][12] + coeff0_8*dmats2[8][12] + coeff0_9*dmats2[9][12] + coeff0_10*dmats2[10][12] + coeff0_11*dmats2[11][12] + coeff0_12*dmats2[12][12] + coeff0_13*dmats2[13][12] + coeff0_14*dmats2[14][12] + coeff0_15*dmats2[15][12] + coeff0_16*dmats2[16][12] + coeff0_17*dmats2[17][12] + coeff0_18*dmats2[18][12] + coeff0_19*dmats2[19][12] + coeff0_20*dmats2[20][12] + coeff0_21*dmats2[21][12] + coeff0_22*dmats2[22][12] + coeff0_23*dmats2[23][12] + coeff0_24*dmats2[24][12] + coeff0_25*dmats2[25][12] + coeff0_26*dmats2[26][12] + coeff0_27*dmats2[27][12] + coeff0_28*dmats2[28][12] + coeff0_29*dmats2[29][12] + coeff0_30*dmats2[30][12] + coeff0_31*dmats2[31][12] + coeff0_32*dmats2[32][12] + coeff0_33*dmats2[33][12] + coeff0_34*dmats2[34][12];
          new_coeff0_13 = coeff0_0*dmats2[0][13] + coeff0_1*dmats2[1][13] + coeff0_2*dmats2[2][13] + coeff0_3*dmats2[3][13] + coeff0_4*dmats2[4][13] + coeff0_5*dmats2[5][13] + coeff0_6*dmats2[6][13] + coeff0_7*dmats2[7][13] + coeff0_8*dmats2[8][13] + coeff0_9*dmats2[9][13] + coeff0_10*dmats2[10][13] + coeff0_11*dmats2[11][13] + coeff0_12*dmats2[12][13] + coeff0_13*dmats2[13][13] + coeff0_14*dmats2[14][13] + coeff0_15*dmats2[15][13] + coeff0_16*dmats2[16][13] + coeff0_17*dmats2[17][13] + coeff0_18*dmats2[18][13] + coeff0_19*dmats2[19][13] + coeff0_20*dmats2[20][13] + coeff0_21*dmats2[21][13] + coeff0_22*dmats2[22][13] + coeff0_23*dmats2[23][13] + coeff0_24*dmats2[24][13] + coeff0_25*dmats2[25][13] + coeff0_26*dmats2[26][13] + coeff0_27*dmats2[27][13] + coeff0_28*dmats2[28][13] + coeff0_29*dmats2[29][13] + coeff0_30*dmats2[30][13] + coeff0_31*dmats2[31][13] + coeff0_32*dmats2[32][13] + coeff0_33*dmats2[33][13] + coeff0_34*dmats2[34][13];
          new_coeff0_14 = coeff0_0*dmats2[0][14] + coeff0_1*dmats2[1][14] + coeff0_2*dmats2[2][14] + coeff0_3*dmats2[3][14] + coeff0_4*dmats2[4][14] + coeff0_5*dmats2[5][14] + coeff0_6*dmats2[6][14] + coeff0_7*dmats2[7][14] + coeff0_8*dmats2[8][14] + coeff0_9*dmats2[9][14] + coeff0_10*dmats2[10][14] + coeff0_11*dmats2[11][14] + coeff0_12*dmats2[12][14] + coeff0_13*dmats2[13][14] + coeff0_14*dmats2[14][14] + coeff0_15*dmats2[15][14] + coeff0_16*dmats2[16][14] + coeff0_17*dmats2[17][14] + coeff0_18*dmats2[18][14] + coeff0_19*dmats2[19][14] + coeff0_20*dmats2[20][14] + coeff0_21*dmats2[21][14] + coeff0_22*dmats2[22][14] + coeff0_23*dmats2[23][14] + coeff0_24*dmats2[24][14] + coeff0_25*dmats2[25][14] + coeff0_26*dmats2[26][14] + coeff0_27*dmats2[27][14] + coeff0_28*dmats2[28][14] + coeff0_29*dmats2[29][14] + coeff0_30*dmats2[30][14] + coeff0_31*dmats2[31][14] + coeff0_32*dmats2[32][14] + coeff0_33*dmats2[33][14] + coeff0_34*dmats2[34][14];
          new_coeff0_15 = coeff0_0*dmats2[0][15] + coeff0_1*dmats2[1][15] + coeff0_2*dmats2[2][15] + coeff0_3*dmats2[3][15] + coeff0_4*dmats2[4][15] + coeff0_5*dmats2[5][15] + coeff0_6*dmats2[6][15] + coeff0_7*dmats2[7][15] + coeff0_8*dmats2[8][15] + coeff0_9*dmats2[9][15] + coeff0_10*dmats2[10][15] + coeff0_11*dmats2[11][15] + coeff0_12*dmats2[12][15] + coeff0_13*dmats2[13][15] + coeff0_14*dmats2[14][15] + coeff0_15*dmats2[15][15] + coeff0_16*dmats2[16][15] + coeff0_17*dmats2[17][15] + coeff0_18*dmats2[18][15] + coeff0_19*dmats2[19][15] + coeff0_20*dmats2[20][15] + coeff0_21*dmats2[21][15] + coeff0_22*dmats2[22][15] + coeff0_23*dmats2[23][15] + coeff0_24*dmats2[24][15] + coeff0_25*dmats2[25][15] + coeff0_26*dmats2[26][15] + coeff0_27*dmats2[27][15] + coeff0_28*dmats2[28][15] + coeff0_29*dmats2[29][15] + coeff0_30*dmats2[30][15] + coeff0_31*dmats2[31][15] + coeff0_32*dmats2[32][15] + coeff0_33*dmats2[33][15] + coeff0_34*dmats2[34][15];
          new_coeff0_16 = coeff0_0*dmats2[0][16] + coeff0_1*dmats2[1][16] + coeff0_2*dmats2[2][16] + coeff0_3*dmats2[3][16] + coeff0_4*dmats2[4][16] + coeff0_5*dmats2[5][16] + coeff0_6*dmats2[6][16] + coeff0_7*dmats2[7][16] + coeff0_8*dmats2[8][16] + coeff0_9*dmats2[9][16] + coeff0_10*dmats2[10][16] + coeff0_11*dmats2[11][16] + coeff0_12*dmats2[12][16] + coeff0_13*dmats2[13][16] + coeff0_14*dmats2[14][16] + coeff0_15*dmats2[15][16] + coeff0_16*dmats2[16][16] + coeff0_17*dmats2[17][16] + coeff0_18*dmats2[18][16] + coeff0_19*dmats2[19][16] + coeff0_20*dmats2[20][16] + coeff0_21*dmats2[21][16] + coeff0_22*dmats2[22][16] + coeff0_23*dmats2[23][16] + coeff0_24*dmats2[24][16] + coeff0_25*dmats2[25][16] + coeff0_26*dmats2[26][16] + coeff0_27*dmats2[27][16] + coeff0_28*dmats2[28][16] + coeff0_29*dmats2[29][16] + coeff0_30*dmats2[30][16] + coeff0_31*dmats2[31][16] + coeff0_32*dmats2[32][16] + coeff0_33*dmats2[33][16] + coeff0_34*dmats2[34][16];
          new_coeff0_17 = coeff0_0*dmats2[0][17] + coeff0_1*dmats2[1][17] + coeff0_2*dmats2[2][17] + coeff0_3*dmats2[3][17] + coeff0_4*dmats2[4][17] + coeff0_5*dmats2[5][17] + coeff0_6*dmats2[6][17] + coeff0_7*dmats2[7][17] + coeff0_8*dmats2[8][17] + coeff0_9*dmats2[9][17] + coeff0_10*dmats2[10][17] + coeff0_11*dmats2[11][17] + coeff0_12*dmats2[12][17] + coeff0_13*dmats2[13][17] + coeff0_14*dmats2[14][17] + coeff0_15*dmats2[15][17] + coeff0_16*dmats2[16][17] + coeff0_17*dmats2[17][17] + coeff0_18*dmats2[18][17] + coeff0_19*dmats2[19][17] + coeff0_20*dmats2[20][17] + coeff0_21*dmats2[21][17] + coeff0_22*dmats2[22][17] + coeff0_23*dmats2[23][17] + coeff0_24*dmats2[24][17] + coeff0_25*dmats2[25][17] + coeff0_26*dmats2[26][17] + coeff0_27*dmats2[27][17] + coeff0_28*dmats2[28][17] + coeff0_29*dmats2[29][17] + coeff0_30*dmats2[30][17] + coeff0_31*dmats2[31][17] + coeff0_32*dmats2[32][17] + coeff0_33*dmats2[33][17] + coeff0_34*dmats2[34][17];
          new_coeff0_18 = coeff0_0*dmats2[0][18] + coeff0_1*dmats2[1][18] + coeff0_2*dmats2[2][18] + coeff0_3*dmats2[3][18] + coeff0_4*dmats2[4][18] + coeff0_5*dmats2[5][18] + coeff0_6*dmats2[6][18] + coeff0_7*dmats2[7][18] + coeff0_8*dmats2[8][18] + coeff0_9*dmats2[9][18] + coeff0_10*dmats2[10][18] + coeff0_11*dmats2[11][18] + coeff0_12*dmats2[12][18] + coeff0_13*dmats2[13][18] + coeff0_14*dmats2[14][18] + coeff0_15*dmats2[15][18] + coeff0_16*dmats2[16][18] + coeff0_17*dmats2[17][18] + coeff0_18*dmats2[18][18] + coeff0_19*dmats2[19][18] + coeff0_20*dmats2[20][18] + coeff0_21*dmats2[21][18] + coeff0_22*dmats2[22][18] + coeff0_23*dmats2[23][18] + coeff0_24*dmats2[24][18] + coeff0_25*dmats2[25][18] + coeff0_26*dmats2[26][18] + coeff0_27*dmats2[27][18] + coeff0_28*dmats2[28][18] + coeff0_29*dmats2[29][18] + coeff0_30*dmats2[30][18] + coeff0_31*dmats2[31][18] + coeff0_32*dmats2[32][18] + coeff0_33*dmats2[33][18] + coeff0_34*dmats2[34][18];
          new_coeff0_19 = coeff0_0*dmats2[0][19] + coeff0_1*dmats2[1][19] + coeff0_2*dmats2[2][19] + coeff0_3*dmats2[3][19] + coeff0_4*dmats2[4][19] + coeff0_5*dmats2[5][19] + coeff0_6*dmats2[6][19] + coeff0_7*dmats2[7][19] + coeff0_8*dmats2[8][19] + coeff0_9*dmats2[9][19] + coeff0_10*dmats2[10][19] + coeff0_11*dmats2[11][19] + coeff0_12*dmats2[12][19] + coeff0_13*dmats2[13][19] + coeff0_14*dmats2[14][19] + coeff0_15*dmats2[15][19] + coeff0_16*dmats2[16][19] + coeff0_17*dmats2[17][19] + coeff0_18*dmats2[18][19] + coeff0_19*dmats2[19][19] + coeff0_20*dmats2[20][19] + coeff0_21*dmats2[21][19] + coeff0_22*dmats2[22][19] + coeff0_23*dmats2[23][19] + coeff0_24*dmats2[24][19] + coeff0_25*dmats2[25][19] + coeff0_26*dmats2[26][19] + coeff0_27*dmats2[27][19] + coeff0_28*dmats2[28][19] + coeff0_29*dmats2[29][19] + coeff0_30*dmats2[30][19] + coeff0_31*dmats2[31][19] + coeff0_32*dmats2[32][19] + coeff0_33*dmats2[33][19] + coeff0_34*dmats2[34][19];
          new_coeff0_20 = coeff0_0*dmats2[0][20] + coeff0_1*dmats2[1][20] + coeff0_2*dmats2[2][20] + coeff0_3*dmats2[3][20] + coeff0_4*dmats2[4][20] + coeff0_5*dmats2[5][20] + coeff0_6*dmats2[6][20] + coeff0_7*dmats2[7][20] + coeff0_8*dmats2[8][20] + coeff0_9*dmats2[9][20] + coeff0_10*dmats2[10][20] + coeff0_11*dmats2[11][20] + coeff0_12*dmats2[12][20] + coeff0_13*dmats2[13][20] + coeff0_14*dmats2[14][20] + coeff0_15*dmats2[15][20] + coeff0_16*dmats2[16][20] + coeff0_17*dmats2[17][20] + coeff0_18*dmats2[18][20] + coeff0_19*dmats2[19][20] + coeff0_20*dmats2[20][20] + coeff0_21*dmats2[21][20] + coeff0_22*dmats2[22][20] + coeff0_23*dmats2[23][20] + coeff0_24*dmats2[24][20] + coeff0_25*dmats2[25][20] + coeff0_26*dmats2[26][20] + coeff0_27*dmats2[27][20] + coeff0_28*dmats2[28][20] + coeff0_29*dmats2[29][20] + coeff0_30*dmats2[30][20] + coeff0_31*dmats2[31][20] + coeff0_32*dmats2[32][20] + coeff0_33*dmats2[33][20] + coeff0_34*dmats2[34][20];
          new_coeff0_21 = coeff0_0*dmats2[0][21] + coeff0_1*dmats2[1][21] + coeff0_2*dmats2[2][21] + coeff0_3*dmats2[3][21] + coeff0_4*dmats2[4][21] + coeff0_5*dmats2[5][21] + coeff0_6*dmats2[6][21] + coeff0_7*dmats2[7][21] + coeff0_8*dmats2[8][21] + coeff0_9*dmats2[9][21] + coeff0_10*dmats2[10][21] + coeff0_11*dmats2[11][21] + coeff0_12*dmats2[12][21] + coeff0_13*dmats2[13][21] + coeff0_14*dmats2[14][21] + coeff0_15*dmats2[15][21] + coeff0_16*dmats2[16][21] + coeff0_17*dmats2[17][21] + coeff0_18*dmats2[18][21] + coeff0_19*dmats2[19][21] + coeff0_20*dmats2[20][21] + coeff0_21*dmats2[21][21] + coeff0_22*dmats2[22][21] + coeff0_23*dmats2[23][21] + coeff0_24*dmats2[24][21] + coeff0_25*dmats2[25][21] + coeff0_26*dmats2[26][21] + coeff0_27*dmats2[27][21] + coeff0_28*dmats2[28][21] + coeff0_29*dmats2[29][21] + coeff0_30*dmats2[30][21] + coeff0_31*dmats2[31][21] + coeff0_32*dmats2[32][21] + coeff0_33*dmats2[33][21] + coeff0_34*dmats2[34][21];
          new_coeff0_22 = coeff0_0*dmats2[0][22] + coeff0_1*dmats2[1][22] + coeff0_2*dmats2[2][22] + coeff0_3*dmats2[3][22] + coeff0_4*dmats2[4][22] + coeff0_5*dmats2[5][22] + coeff0_6*dmats2[6][22] + coeff0_7*dmats2[7][22] + coeff0_8*dmats2[8][22] + coeff0_9*dmats2[9][22] + coeff0_10*dmats2[10][22] + coeff0_11*dmats2[11][22] + coeff0_12*dmats2[12][22] + coeff0_13*dmats2[13][22] + coeff0_14*dmats2[14][22] + coeff0_15*dmats2[15][22] + coeff0_16*dmats2[16][22] + coeff0_17*dmats2[17][22] + coeff0_18*dmats2[18][22] + coeff0_19*dmats2[19][22] + coeff0_20*dmats2[20][22] + coeff0_21*dmats2[21][22] + coeff0_22*dmats2[22][22] + coeff0_23*dmats2[23][22] + coeff0_24*dmats2[24][22] + coeff0_25*dmats2[25][22] + coeff0_26*dmats2[26][22] + coeff0_27*dmats2[27][22] + coeff0_28*dmats2[28][22] + coeff0_29*dmats2[29][22] + coeff0_30*dmats2[30][22] + coeff0_31*dmats2[31][22] + coeff0_32*dmats2[32][22] + coeff0_33*dmats2[33][22] + coeff0_34*dmats2[34][22];
          new_coeff0_23 = coeff0_0*dmats2[0][23] + coeff0_1*dmats2[1][23] + coeff0_2*dmats2[2][23] + coeff0_3*dmats2[3][23] + coeff0_4*dmats2[4][23] + coeff0_5*dmats2[5][23] + coeff0_6*dmats2[6][23] + coeff0_7*dmats2[7][23] + coeff0_8*dmats2[8][23] + coeff0_9*dmats2[9][23] + coeff0_10*dmats2[10][23] + coeff0_11*dmats2[11][23] + coeff0_12*dmats2[12][23] + coeff0_13*dmats2[13][23] + coeff0_14*dmats2[14][23] + coeff0_15*dmats2[15][23] + coeff0_16*dmats2[16][23] + coeff0_17*dmats2[17][23] + coeff0_18*dmats2[18][23] + coeff0_19*dmats2[19][23] + coeff0_20*dmats2[20][23] + coeff0_21*dmats2[21][23] + coeff0_22*dmats2[22][23] + coeff0_23*dmats2[23][23] + coeff0_24*dmats2[24][23] + coeff0_25*dmats2[25][23] + coeff0_26*dmats2[26][23] + coeff0_27*dmats2[27][23] + coeff0_28*dmats2[28][23] + coeff0_29*dmats2[29][23] + coeff0_30*dmats2[30][23] + coeff0_31*dmats2[31][23] + coeff0_32*dmats2[32][23] + coeff0_33*dmats2[33][23] + coeff0_34*dmats2[34][23];
          new_coeff0_24 = coeff0_0*dmats2[0][24] + coeff0_1*dmats2[1][24] + coeff0_2*dmats2[2][24] + coeff0_3*dmats2[3][24] + coeff0_4*dmats2[4][24] + coeff0_5*dmats2[5][24] + coeff0_6*dmats2[6][24] + coeff0_7*dmats2[7][24] + coeff0_8*dmats2[8][24] + coeff0_9*dmats2[9][24] + coeff0_10*dmats2[10][24] + coeff0_11*dmats2[11][24] + coeff0_12*dmats2[12][24] + coeff0_13*dmats2[13][24] + coeff0_14*dmats2[14][24] + coeff0_15*dmats2[15][24] + coeff0_16*dmats2[16][24] + coeff0_17*dmats2[17][24] + coeff0_18*dmats2[18][24] + coeff0_19*dmats2[19][24] + coeff0_20*dmats2[20][24] + coeff0_21*dmats2[21][24] + coeff0_22*dmats2[22][24] + coeff0_23*dmats2[23][24] + coeff0_24*dmats2[24][24] + coeff0_25*dmats2[25][24] + coeff0_26*dmats2[26][24] + coeff0_27*dmats2[27][24] + coeff0_28*dmats2[28][24] + coeff0_29*dmats2[29][24] + coeff0_30*dmats2[30][24] + coeff0_31*dmats2[31][24] + coeff0_32*dmats2[32][24] + coeff0_33*dmats2[33][24] + coeff0_34*dmats2[34][24];
          new_coeff0_25 = coeff0_0*dmats2[0][25] + coeff0_1*dmats2[1][25] + coeff0_2*dmats2[2][25] + coeff0_3*dmats2[3][25] + coeff0_4*dmats2[4][25] + coeff0_5*dmats2[5][25] + coeff0_6*dmats2[6][25] + coeff0_7*dmats2[7][25] + coeff0_8*dmats2[8][25] + coeff0_9*dmats2[9][25] + coeff0_10*dmats2[10][25] + coeff0_11*dmats2[11][25] + coeff0_12*dmats2[12][25] + coeff0_13*dmats2[13][25] + coeff0_14*dmats2[14][25] + coeff0_15*dmats2[15][25] + coeff0_16*dmats2[16][25] + coeff0_17*dmats2[17][25] + coeff0_18*dmats2[18][25] + coeff0_19*dmats2[19][25] + coeff0_20*dmats2[20][25] + coeff0_21*dmats2[21][25] + coeff0_22*dmats2[22][25] + coeff0_23*dmats2[23][25] + coeff0_24*dmats2[24][25] + coeff0_25*dmats2[25][25] + coeff0_26*dmats2[26][25] + coeff0_27*dmats2[27][25] + coeff0_28*dmats2[28][25] + coeff0_29*dmats2[29][25] + coeff0_30*dmats2[30][25] + coeff0_31*dmats2[31][25] + coeff0_32*dmats2[32][25] + coeff0_33*dmats2[33][25] + coeff0_34*dmats2[34][25];
          new_coeff0_26 = coeff0_0*dmats2[0][26] + coeff0_1*dmats2[1][26] + coeff0_2*dmats2[2][26] + coeff0_3*dmats2[3][26] + coeff0_4*dmats2[4][26] + coeff0_5*dmats2[5][26] + coeff0_6*dmats2[6][26] + coeff0_7*dmats2[7][26] + coeff0_8*dmats2[8][26] + coeff0_9*dmats2[9][26] + coeff0_10*dmats2[10][26] + coeff0_11*dmats2[11][26] + coeff0_12*dmats2[12][26] + coeff0_13*dmats2[13][26] + coeff0_14*dmats2[14][26] + coeff0_15*dmats2[15][26] + coeff0_16*dmats2[16][26] + coeff0_17*dmats2[17][26] + coeff0_18*dmats2[18][26] + coeff0_19*dmats2[19][26] + coeff0_20*dmats2[20][26] + coeff0_21*dmats2[21][26] + coeff0_22*dmats2[22][26] + coeff0_23*dmats2[23][26] + coeff0_24*dmats2[24][26] + coeff0_25*dmats2[25][26] + coeff0_26*dmats2[26][26] + coeff0_27*dmats2[27][26] + coeff0_28*dmats2[28][26] + coeff0_29*dmats2[29][26] + coeff0_30*dmats2[30][26] + coeff0_31*dmats2[31][26] + coeff0_32*dmats2[32][26] + coeff0_33*dmats2[33][26] + coeff0_34*dmats2[34][26];
          new_coeff0_27 = coeff0_0*dmats2[0][27] + coeff0_1*dmats2[1][27] + coeff0_2*dmats2[2][27] + coeff0_3*dmats2[3][27] + coeff0_4*dmats2[4][27] + coeff0_5*dmats2[5][27] + coeff0_6*dmats2[6][27] + coeff0_7*dmats2[7][27] + coeff0_8*dmats2[8][27] + coeff0_9*dmats2[9][27] + coeff0_10*dmats2[10][27] + coeff0_11*dmats2[11][27] + coeff0_12*dmats2[12][27] + coeff0_13*dmats2[13][27] + coeff0_14*dmats2[14][27] + coeff0_15*dmats2[15][27] + coeff0_16*dmats2[16][27] + coeff0_17*dmats2[17][27] + coeff0_18*dmats2[18][27] + coeff0_19*dmats2[19][27] + coeff0_20*dmats2[20][27] + coeff0_21*dmats2[21][27] + coeff0_22*dmats2[22][27] + coeff0_23*dmats2[23][27] + coeff0_24*dmats2[24][27] + coeff0_25*dmats2[25][27] + coeff0_26*dmats2[26][27] + coeff0_27*dmats2[27][27] + coeff0_28*dmats2[28][27] + coeff0_29*dmats2[29][27] + coeff0_30*dmats2[30][27] + coeff0_31*dmats2[31][27] + coeff0_32*dmats2[32][27] + coeff0_33*dmats2[33][27] + coeff0_34*dmats2[34][27];
          new_coeff0_28 = coeff0_0*dmats2[0][28] + coeff0_1*dmats2[1][28] + coeff0_2*dmats2[2][28] + coeff0_3*dmats2[3][28] + coeff0_4*dmats2[4][28] + coeff0_5*dmats2[5][28] + coeff0_6*dmats2[6][28] + coeff0_7*dmats2[7][28] + coeff0_8*dmats2[8][28] + coeff0_9*dmats2[9][28] + coeff0_10*dmats2[10][28] + coeff0_11*dmats2[11][28] + coeff0_12*dmats2[12][28] + coeff0_13*dmats2[13][28] + coeff0_14*dmats2[14][28] + coeff0_15*dmats2[15][28] + coeff0_16*dmats2[16][28] + coeff0_17*dmats2[17][28] + coeff0_18*dmats2[18][28] + coeff0_19*dmats2[19][28] + coeff0_20*dmats2[20][28] + coeff0_21*dmats2[21][28] + coeff0_22*dmats2[22][28] + coeff0_23*dmats2[23][28] + coeff0_24*dmats2[24][28] + coeff0_25*dmats2[25][28] + coeff0_26*dmats2[26][28] + coeff0_27*dmats2[27][28] + coeff0_28*dmats2[28][28] + coeff0_29*dmats2[29][28] + coeff0_30*dmats2[30][28] + coeff0_31*dmats2[31][28] + coeff0_32*dmats2[32][28] + coeff0_33*dmats2[33][28] + coeff0_34*dmats2[34][28];
          new_coeff0_29 = coeff0_0*dmats2[0][29] + coeff0_1*dmats2[1][29] + coeff0_2*dmats2[2][29] + coeff0_3*dmats2[3][29] + coeff0_4*dmats2[4][29] + coeff0_5*dmats2[5][29] + coeff0_6*dmats2[6][29] + coeff0_7*dmats2[7][29] + coeff0_8*dmats2[8][29] + coeff0_9*dmats2[9][29] + coeff0_10*dmats2[10][29] + coeff0_11*dmats2[11][29] + coeff0_12*dmats2[12][29] + coeff0_13*dmats2[13][29] + coeff0_14*dmats2[14][29] + coeff0_15*dmats2[15][29] + coeff0_16*dmats2[16][29] + coeff0_17*dmats2[17][29] + coeff0_18*dmats2[18][29] + coeff0_19*dmats2[19][29] + coeff0_20*dmats2[20][29] + coeff0_21*dmats2[21][29] + coeff0_22*dmats2[22][29] + coeff0_23*dmats2[23][29] + coeff0_24*dmats2[24][29] + coeff0_25*dmats2[25][29] + coeff0_26*dmats2[26][29] + coeff0_27*dmats2[27][29] + coeff0_28*dmats2[28][29] + coeff0_29*dmats2[29][29] + coeff0_30*dmats2[30][29] + coeff0_31*dmats2[31][29] + coeff0_32*dmats2[32][29] + coeff0_33*dmats2[33][29] + coeff0_34*dmats2[34][29];
          new_coeff0_30 = coeff0_0*dmats2[0][30] + coeff0_1*dmats2[1][30] + coeff0_2*dmats2[2][30] + coeff0_3*dmats2[3][30] + coeff0_4*dmats2[4][30] + coeff0_5*dmats2[5][30] + coeff0_6*dmats2[6][30] + coeff0_7*dmats2[7][30] + coeff0_8*dmats2[8][30] + coeff0_9*dmats2[9][30] + coeff0_10*dmats2[10][30] + coeff0_11*dmats2[11][30] + coeff0_12*dmats2[12][30] + coeff0_13*dmats2[13][30] + coeff0_14*dmats2[14][30] + coeff0_15*dmats2[15][30] + coeff0_16*dmats2[16][30] + coeff0_17*dmats2[17][30] + coeff0_18*dmats2[18][30] + coeff0_19*dmats2[19][30] + coeff0_20*dmats2[20][30] + coeff0_21*dmats2[21][30] + coeff0_22*dmats2[22][30] + coeff0_23*dmats2[23][30] + coeff0_24*dmats2[24][30] + coeff0_25*dmats2[25][30] + coeff0_26*dmats2[26][30] + coeff0_27*dmats2[27][30] + coeff0_28*dmats2[28][30] + coeff0_29*dmats2[29][30] + coeff0_30*dmats2[30][30] + coeff0_31*dmats2[31][30] + coeff0_32*dmats2[32][30] + coeff0_33*dmats2[33][30] + coeff0_34*dmats2[34][30];
          new_coeff0_31 = coeff0_0*dmats2[0][31] + coeff0_1*dmats2[1][31] + coeff0_2*dmats2[2][31] + coeff0_3*dmats2[3][31] + coeff0_4*dmats2[4][31] + coeff0_5*dmats2[5][31] + coeff0_6*dmats2[6][31] + coeff0_7*dmats2[7][31] + coeff0_8*dmats2[8][31] + coeff0_9*dmats2[9][31] + coeff0_10*dmats2[10][31] + coeff0_11*dmats2[11][31] + coeff0_12*dmats2[12][31] + coeff0_13*dmats2[13][31] + coeff0_14*dmats2[14][31] + coeff0_15*dmats2[15][31] + coeff0_16*dmats2[16][31] + coeff0_17*dmats2[17][31] + coeff0_18*dmats2[18][31] + coeff0_19*dmats2[19][31] + coeff0_20*dmats2[20][31] + coeff0_21*dmats2[21][31] + coeff0_22*dmats2[22][31] + coeff0_23*dmats2[23][31] + coeff0_24*dmats2[24][31] + coeff0_25*dmats2[25][31] + coeff0_26*dmats2[26][31] + coeff0_27*dmats2[27][31] + coeff0_28*dmats2[28][31] + coeff0_29*dmats2[29][31] + coeff0_30*dmats2[30][31] + coeff0_31*dmats2[31][31] + coeff0_32*dmats2[32][31] + coeff0_33*dmats2[33][31] + coeff0_34*dmats2[34][31];
          new_coeff0_32 = coeff0_0*dmats2[0][32] + coeff0_1*dmats2[1][32] + coeff0_2*dmats2[2][32] + coeff0_3*dmats2[3][32] + coeff0_4*dmats2[4][32] + coeff0_5*dmats2[5][32] + coeff0_6*dmats2[6][32] + coeff0_7*dmats2[7][32] + coeff0_8*dmats2[8][32] + coeff0_9*dmats2[9][32] + coeff0_10*dmats2[10][32] + coeff0_11*dmats2[11][32] + coeff0_12*dmats2[12][32] + coeff0_13*dmats2[13][32] + coeff0_14*dmats2[14][32] + coeff0_15*dmats2[15][32] + coeff0_16*dmats2[16][32] + coeff0_17*dmats2[17][32] + coeff0_18*dmats2[18][32] + coeff0_19*dmats2[19][32] + coeff0_20*dmats2[20][32] + coeff0_21*dmats2[21][32] + coeff0_22*dmats2[22][32] + coeff0_23*dmats2[23][32] + coeff0_24*dmats2[24][32] + coeff0_25*dmats2[25][32] + coeff0_26*dmats2[26][32] + coeff0_27*dmats2[27][32] + coeff0_28*dmats2[28][32] + coeff0_29*dmats2[29][32] + coeff0_30*dmats2[30][32] + coeff0_31*dmats2[31][32] + coeff0_32*dmats2[32][32] + coeff0_33*dmats2[33][32] + coeff0_34*dmats2[34][32];
          new_coeff0_33 = coeff0_0*dmats2[0][33] + coeff0_1*dmats2[1][33] + coeff0_2*dmats2[2][33] + coeff0_3*dmats2[3][33] + coeff0_4*dmats2[4][33] + coeff0_5*dmats2[5][33] + coeff0_6*dmats2[6][33] + coeff0_7*dmats2[7][33] + coeff0_8*dmats2[8][33] + coeff0_9*dmats2[9][33] + coeff0_10*dmats2[10][33] + coeff0_11*dmats2[11][33] + coeff0_12*dmats2[12][33] + coeff0_13*dmats2[13][33] + coeff0_14*dmats2[14][33] + coeff0_15*dmats2[15][33] + coeff0_16*dmats2[16][33] + coeff0_17*dmats2[17][33] + coeff0_18*dmats2[18][33] + coeff0_19*dmats2[19][33] + coeff0_20*dmats2[20][33] + coeff0_21*dmats2[21][33] + coeff0_22*dmats2[22][33] + coeff0_23*dmats2[23][33] + coeff0_24*dmats2[24][33] + coeff0_25*dmats2[25][33] + coeff0_26*dmats2[26][33] + coeff0_27*dmats2[27][33] + coeff0_28*dmats2[28][33] + coeff0_29*dmats2[29][33] + coeff0_30*dmats2[30][33] + coeff0_31*dmats2[31][33] + coeff0_32*dmats2[32][33] + coeff0_33*dmats2[33][33] + coeff0_34*dmats2[34][33];
          new_coeff0_34 = coeff0_0*dmats2[0][34] + coeff0_1*dmats2[1][34] + coeff0_2*dmats2[2][34] + coeff0_3*dmats2[3][34] + coeff0_4*dmats2[4][34] + coeff0_5*dmats2[5][34] + coeff0_6*dmats2[6][34] + coeff0_7*dmats2[7][34] + coeff0_8*dmats2[8][34] + coeff0_9*dmats2[9][34] + coeff0_10*dmats2[10][34] + coeff0_11*dmats2[11][34] + coeff0_12*dmats2[12][34] + coeff0_13*dmats2[13][34] + coeff0_14*dmats2[14][34] + coeff0_15*dmats2[15][34] + coeff0_16*dmats2[16][34] + coeff0_17*dmats2[17][34] + coeff0_18*dmats2[18][34] + coeff0_19*dmats2[19][34] + coeff0_20*dmats2[20][34] + coeff0_21*dmats2[21][34] + coeff0_22*dmats2[22][34] + coeff0_23*dmats2[23][34] + coeff0_24*dmats2[24][34] + coeff0_25*dmats2[25][34] + coeff0_26*dmats2[26][34] + coeff0_27*dmats2[27][34] + coeff0_28*dmats2[28][34] + coeff0_29*dmats2[29][34] + coeff0_30*dmats2[30][34] + coeff0_31*dmats2[31][34] + coeff0_32*dmats2[32][34] + coeff0_33*dmats2[33][34] + coeff0_34*dmats2[34][34];
        }
    
      }
      // Compute derivatives on reference element as dot product of coefficients and basisvalues
      derivatives[deriv_num] = new_coeff0_0*basisvalue0 + new_coeff0_1*basisvalue1 + new_coeff0_2*basisvalue2 + new_coeff0_3*basisvalue3 + new_coeff0_4*basisvalue4 + new_coeff0_5*basisvalue5 + new_coeff0_6*basisvalue6 + new_coeff0_7*basisvalue7 + new_coeff0_8*basisvalue8 + new_coeff0_9*basisvalue9 + new_coeff0_10*basisvalue10 + new_coeff0_11*basisvalue11 + new_coeff0_12*basisvalue12 + new_coeff0_13*basisvalue13 + new_coeff0_14*basisvalue14 + new_coeff0_15*basisvalue15 + new_coeff0_16*basisvalue16 + new_coeff0_17*basisvalue17 + new_coeff0_18*basisvalue18 + new_coeff0_19*basisvalue19 + new_coeff0_20*basisvalue20 + new_coeff0_21*basisvalue21 + new_coeff0_22*basisvalue22 + new_coeff0_23*basisvalue23 + new_coeff0_24*basisvalue24 + new_coeff0_25*basisvalue25 + new_coeff0_26*basisvalue26 + new_coeff0_27*basisvalue27 + new_coeff0_28*basisvalue28 + new_coeff0_29*basisvalue29 + new_coeff0_30*basisvalue30 + new_coeff0_31*basisvalue31 + new_coeff0_32*basisvalue32 + new_coeff0_33*basisvalue33 + new_coeff0_34*basisvalue34;
    }
    
    // Transform derivatives back to physical element
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        values[row] += transform[row][col]*derivatives[col];
      }
    }
    // Delete pointer to array of derivatives on FIAT element
    delete [] derivatives;
    
    // Delete pointer to array of combinations of derivatives and transform
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      delete [] combinations[row];
      delete [] transform[row];
    }
    
    delete [] combinations;
    delete [] transform;
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    throw std::runtime_error("The vectorised version of evaluate_basis_derivatives() is not yet implemented.");
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // The reference points, direction and weights:
    const static double X[35][1][3] = {{{0, 0, 0}}, {{1, 0, 0}}, {{0, 1, 0}}, {{0, 0, 1}}, {{0, 0.75, 0.25}}, {{0, 0.5, 0.5}}, {{0, 0.25, 0.75}}, {{0.75, 0, 0.25}}, {{0.5, 0, 0.5}}, {{0.25, 0, 0.75}}, {{0.75, 0.25, 0}}, {{0.5, 0.5, 0}}, {{0.25, 0.75, 0}}, {{0, 0, 0.25}}, {{0, 0, 0.5}}, {{0, 0, 0.75}}, {{0, 0.25, 0}}, {{0, 0.5, 0}}, {{0, 0.75, 0}}, {{0.25, 0, 0}}, {{0.5, 0, 0}}, {{0.75, 0, 0}}, {{0.5, 0.25, 0.25}}, {{0.25, 0.5, 0.25}}, {{0.25, 0.25, 0.5}}, {{0, 0.25, 0.25}}, {{0, 0.5, 0.25}}, {{0, 0.25, 0.5}}, {{0.25, 0, 0.25}}, {{0.5, 0, 0.25}}, {{0.25, 0, 0.5}}, {{0.25, 0.25, 0}}, {{0.5, 0.25, 0}}, {{0.25, 0.5, 0}}, {{0.25, 0.25, 0.25}}};
    const static double W[35][1] = {{1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}};
    const static double D[35][1][1] = {{{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}, {{1}}};
    
    const double * const * x = c.coordinates;
    double result = 0.0;
    // Iterate over the points:
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0][0] - X[i][0][1] - X[i][0][2];
    const double w1 = X[i][0][0];
    const double w2 = X[i][0][1];
    const double w3 = X[i][0][2];
    
    // Compute affine mapping y = F(X)
    double y[3];
    y[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0] + w3*x[3][0];
    y[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1] + w3*x[3][1];
    y[2] = w0*x[0][2] + w1*x[1][2] + w2*x[2][2] + w3*x[3][2];
    
    // Evaluate function at physical points
    double values[1];
    f.evaluate(values, y, c);
    
    // Map function values using appropriate mapping
    // Affine map: Do nothing
    
    // Note that we do not map the weights (yet).
    
    // Take directional components
    for(int k = 0; k < 1; k++)
      result += values[k]*D[i][0][k];
    // Multiply by weights 
    result *= W[i][0];
    
    return result;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate at vertices and use affine mapping
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new UFC_Poisson3D_4LinearForm_finite_element_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class UFC_Poisson3D_4LinearForm_dof_map_0: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  UFC_Poisson3D_4LinearForm_dof_map_0() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~UFC_Poisson3D_4LinearForm_dof_map_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for FiniteElement('Lagrange', 'tetrahedron', 4)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return true;
      break;
    case 2:
      return true;
      break;
    case 3:
      return true;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = m.num_entities[0] + 3*m.num_entities[1] + 3*m.num_entities[2] + m.num_entities[3];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space
  virtual unsigned int local_dimension() const
  {
    return 35;
  }

  // Return the geometric dimension of the coordinates this dof map provides
  virtual unsigned int geometric_dimension() const
  {
    return 3;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 15;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    dofs[3] = c.entity_indices[0][3];
    unsigned int offset = m.num_entities[0];
    dofs[4] = offset + 3*c.entity_indices[1][0];
    dofs[5] = offset + 3*c.entity_indices[1][0] + 1;
    dofs[6] = offset + 3*c.entity_indices[1][0] + 2;
    dofs[7] = offset + 3*c.entity_indices[1][1];
    dofs[8] = offset + 3*c.entity_indices[1][1] + 1;
    dofs[9] = offset + 3*c.entity_indices[1][1] + 2;
    dofs[10] = offset + 3*c.entity_indices[1][2];
    dofs[11] = offset + 3*c.entity_indices[1][2] + 1;
    dofs[12] = offset + 3*c.entity_indices[1][2] + 2;
    dofs[13] = offset + 3*c.entity_indices[1][3];
    dofs[14] = offset + 3*c.entity_indices[1][3] + 1;
    dofs[15] = offset + 3*c.entity_indices[1][3] + 2;
    dofs[16] = offset + 3*c.entity_indices[1][4];
    dofs[17] = offset + 3*c.entity_indices[1][4] + 1;
    dofs[18] = offset + 3*c.entity_indices[1][4] + 2;
    dofs[19] = offset + 3*c.entity_indices[1][5];
    dofs[20] = offset + 3*c.entity_indices[1][5] + 1;
    dofs[21] = offset + 3*c.entity_indices[1][5] + 2;
    offset = offset + 3*m.num_entities[1];
    dofs[22] = offset + 3*c.entity_indices[2][0];
    dofs[23] = offset + 3*c.entity_indices[2][0] + 1;
    dofs[24] = offset + 3*c.entity_indices[2][0] + 2;
    dofs[25] = offset + 3*c.entity_indices[2][1];
    dofs[26] = offset + 3*c.entity_indices[2][1] + 1;
    dofs[27] = offset + 3*c.entity_indices[2][1] + 2;
    dofs[28] = offset + 3*c.entity_indices[2][2];
    dofs[29] = offset + 3*c.entity_indices[2][2] + 1;
    dofs[30] = offset + 3*c.entity_indices[2][2] + 2;
    dofs[31] = offset + 3*c.entity_indices[2][3];
    dofs[32] = offset + 3*c.entity_indices[2][3] + 1;
    dofs[33] = offset + 3*c.entity_indices[2][3] + 2;
    offset = offset + 3*m.num_entities[2];
    dofs[34] = offset + c.entity_indices[3][0];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 7;
      dofs[7] = 8;
      dofs[8] = 9;
      dofs[9] = 10;
      dofs[10] = 11;
      dofs[11] = 12;
      dofs[12] = 22;
      dofs[13] = 23;
      dofs[14] = 24;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 13;
      dofs[7] = 14;
      dofs[8] = 15;
      dofs[9] = 16;
      dofs[10] = 17;
      dofs[11] = 18;
      dofs[12] = 25;
      dofs[13] = 26;
      dofs[14] = 27;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 7;
      dofs[4] = 8;
      dofs[5] = 9;
      dofs[6] = 13;
      dofs[7] = 14;
      dofs[8] = 15;
      dofs[9] = 19;
      dofs[10] = 20;
      dofs[11] = 21;
      dofs[12] = 28;
      dofs[13] = 29;
      dofs[14] = 30;
      break;
    case 3:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 10;
      dofs[4] = 11;
      dofs[5] = 12;
      dofs[6] = 16;
      dofs[7] = 17;
      dofs[8] = 18;
      dofs[9] = 19;
      dofs[10] = 20;
      dofs[11] = 21;
      dofs[12] = 31;
      dofs[13] = 32;
      dofs[14] = 33;
      break;
    }
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[0][2] = x[0][2];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[1][2] = x[1][2];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[2][2] = x[2][2];
    coordinates[3][0] = x[3][0];
    coordinates[3][1] = x[3][1];
    coordinates[3][2] = x[3][2];
    coordinates[4][0] = 0.75*x[2][0] + 0.25*x[3][0];
    coordinates[4][1] = 0.75*x[2][1] + 0.25*x[3][1];
    coordinates[4][2] = 0.75*x[2][2] + 0.25*x[3][2];
    coordinates[5][0] = 0.5*x[2][0] + 0.5*x[3][0];
    coordinates[5][1] = 0.5*x[2][1] + 0.5*x[3][1];
    coordinates[5][2] = 0.5*x[2][2] + 0.5*x[3][2];
    coordinates[6][0] = 0.25*x[2][0] + 0.75*x[3][0];
    coordinates[6][1] = 0.25*x[2][1] + 0.75*x[3][1];
    coordinates[6][2] = 0.25*x[2][2] + 0.75*x[3][2];
    coordinates[7][0] = 0.75*x[1][0] + 0.25*x[3][0];
    coordinates[7][1] = 0.75*x[1][1] + 0.25*x[3][1];
    coordinates[7][2] = 0.75*x[1][2] + 0.25*x[3][2];
    coordinates[8][0] = 0.5*x[1][0] + 0.5*x[3][0];
    coordinates[8][1] = 0.5*x[1][1] + 0.5*x[3][1];
    coordinates[8][2] = 0.5*x[1][2] + 0.5*x[3][2];
    coordinates[9][0] = 0.25*x[1][0] + 0.75*x[3][0];
    coordinates[9][1] = 0.25*x[1][1] + 0.75*x[3][1];
    coordinates[9][2] = 0.25*x[1][2] + 0.75*x[3][2];
    coordinates[10][0] = 0.75*x[1][0] + 0.25*x[2][0];
    coordinates[10][1] = 0.75*x[1][1] + 0.25*x[2][1];
    coordinates[10][2] = 0.75*x[1][2] + 0.25*x[2][2];
    coordinates[11][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[11][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[11][2] = 0.5*x[1][2] + 0.5*x[2][2];
    coordinates[12][0] = 0.25*x[1][0] + 0.75*x[2][0];
    coordinates[12][1] = 0.25*x[1][1] + 0.75*x[2][1];
    coordinates[12][2] = 0.25*x[1][2] + 0.75*x[2][2];
    coordinates[13][0] = 0.75*x[0][0] + 0.25*x[3][0];
    coordinates[13][1] = 0.75*x[0][1] + 0.25*x[3][1];
    coordinates[13][2] = 0.75*x[0][2] + 0.25*x[3][2];
    coordinates[14][0] = 0.5*x[0][0] + 0.5*x[3][0];
    coordinates[14][1] = 0.5*x[0][1] + 0.5*x[3][1];
    coordinates[14][2] = 0.5*x[0][2] + 0.5*x[3][2];
    coordinates[15][0] = 0.25*x[0][0] + 0.75*x[3][0];
    coordinates[15][1] = 0.25*x[0][1] + 0.75*x[3][1];
    coordinates[15][2] = 0.25*x[0][2] + 0.75*x[3][2];
    coordinates[16][0] = 0.75*x[0][0] + 0.25*x[2][0];
    coordinates[16][1] = 0.75*x[0][1] + 0.25*x[2][1];
    coordinates[16][2] = 0.75*x[0][2] + 0.25*x[2][2];
    coordinates[17][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[17][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[17][2] = 0.5*x[0][2] + 0.5*x[2][2];
    coordinates[18][0] = 0.25*x[0][0] + 0.75*x[2][0];
    coordinates[18][1] = 0.25*x[0][1] + 0.75*x[2][1];
    coordinates[18][2] = 0.25*x[0][2] + 0.75*x[2][2];
    coordinates[19][0] = 0.75*x[0][0] + 0.25*x[1][0];
    coordinates[19][1] = 0.75*x[0][1] + 0.25*x[1][1];
    coordinates[19][2] = 0.75*x[0][2] + 0.25*x[1][2];
    coordinates[20][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[20][1] = 0.5*x[0][1] + 0.5*x[1][1];
    coordinates[20][2] = 0.5*x[0][2] + 0.5*x[1][2];
    coordinates[21][0] = 0.25*x[0][0] + 0.75*x[1][0];
    coordinates[21][1] = 0.25*x[0][1] + 0.75*x[1][1];
    coordinates[21][2] = 0.25*x[0][2] + 0.75*x[1][2];
    coordinates[22][0] = 0.5*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[22][1] = 0.5*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[22][2] = 0.5*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
    coordinates[23][0] = 0.25*x[1][0] + 0.5*x[2][0] + 0.25*x[3][0];
    coordinates[23][1] = 0.25*x[1][1] + 0.5*x[2][1] + 0.25*x[3][1];
    coordinates[23][2] = 0.25*x[1][2] + 0.5*x[2][2] + 0.25*x[3][2];
    coordinates[24][0] = 0.25*x[1][0] + 0.25*x[2][0] + 0.5*x[3][0];
    coordinates[24][1] = 0.25*x[1][1] + 0.25*x[2][1] + 0.5*x[3][1];
    coordinates[24][2] = 0.25*x[1][2] + 0.25*x[2][2] + 0.5*x[3][2];
    coordinates[25][0] = 0.5*x[0][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[25][1] = 0.5*x[0][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[25][2] = 0.5*x[0][2] + 0.25*x[2][2] + 0.25*x[3][2];
    coordinates[26][0] = 0.25*x[0][0] + 0.5*x[2][0] + 0.25*x[3][0];
    coordinates[26][1] = 0.25*x[0][1] + 0.5*x[2][1] + 0.25*x[3][1];
    coordinates[26][2] = 0.25*x[0][2] + 0.5*x[2][2] + 0.25*x[3][2];
    coordinates[27][0] = 0.25*x[0][0] + 0.25*x[2][0] + 0.5*x[3][0];
    coordinates[27][1] = 0.25*x[0][1] + 0.25*x[2][1] + 0.5*x[3][1];
    coordinates[27][2] = 0.25*x[0][2] + 0.25*x[2][2] + 0.5*x[3][2];
    coordinates[28][0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[3][0];
    coordinates[28][1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[3][1];
    coordinates[28][2] = 0.5*x[0][2] + 0.25*x[1][2] + 0.25*x[3][2];
    coordinates[29][0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[3][0];
    coordinates[29][1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[3][1];
    coordinates[29][2] = 0.25*x[0][2] + 0.5*x[1][2] + 0.25*x[3][2];
    coordinates[30][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[3][0];
    coordinates[30][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[3][1];
    coordinates[30][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.5*x[3][2];
    coordinates[31][0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0];
    coordinates[31][1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1];
    coordinates[31][2] = 0.5*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2];
    coordinates[32][0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[2][0];
    coordinates[32][1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[2][1];
    coordinates[32][2] = 0.25*x[0][2] + 0.5*x[1][2] + 0.25*x[2][2];
    coordinates[33][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[2][0];
    coordinates[33][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[2][1];
    coordinates[33][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.5*x[2][2];
    coordinates[34][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[34][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[34][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new UFC_Poisson3D_4LinearForm_dof_map_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class UFC_Poisson3D_4LinearForm_dof_map_1: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  UFC_Poisson3D_4LinearForm_dof_map_1() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~UFC_Poisson3D_4LinearForm_dof_map_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for FiniteElement('Lagrange', 'tetrahedron', 4)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return true;
      break;
    case 2:
      return true;
      break;
    case 3:
      return true;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = m.num_entities[0] + 3*m.num_entities[1] + 3*m.num_entities[2] + m.num_entities[3];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space
  virtual unsigned int local_dimension() const
  {
    return 35;
  }

  // Return the geometric dimension of the coordinates this dof map provides
  virtual unsigned int geometric_dimension() const
  {
    return 3;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 15;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    dofs[3] = c.entity_indices[0][3];
    unsigned int offset = m.num_entities[0];
    dofs[4] = offset + 3*c.entity_indices[1][0];
    dofs[5] = offset + 3*c.entity_indices[1][0] + 1;
    dofs[6] = offset + 3*c.entity_indices[1][0] + 2;
    dofs[7] = offset + 3*c.entity_indices[1][1];
    dofs[8] = offset + 3*c.entity_indices[1][1] + 1;
    dofs[9] = offset + 3*c.entity_indices[1][1] + 2;
    dofs[10] = offset + 3*c.entity_indices[1][2];
    dofs[11] = offset + 3*c.entity_indices[1][2] + 1;
    dofs[12] = offset + 3*c.entity_indices[1][2] + 2;
    dofs[13] = offset + 3*c.entity_indices[1][3];
    dofs[14] = offset + 3*c.entity_indices[1][3] + 1;
    dofs[15] = offset + 3*c.entity_indices[1][3] + 2;
    dofs[16] = offset + 3*c.entity_indices[1][4];
    dofs[17] = offset + 3*c.entity_indices[1][4] + 1;
    dofs[18] = offset + 3*c.entity_indices[1][4] + 2;
    dofs[19] = offset + 3*c.entity_indices[1][5];
    dofs[20] = offset + 3*c.entity_indices[1][5] + 1;
    dofs[21] = offset + 3*c.entity_indices[1][5] + 2;
    offset = offset + 3*m.num_entities[1];
    dofs[22] = offset + 3*c.entity_indices[2][0];
    dofs[23] = offset + 3*c.entity_indices[2][0] + 1;
    dofs[24] = offset + 3*c.entity_indices[2][0] + 2;
    dofs[25] = offset + 3*c.entity_indices[2][1];
    dofs[26] = offset + 3*c.entity_indices[2][1] + 1;
    dofs[27] = offset + 3*c.entity_indices[2][1] + 2;
    dofs[28] = offset + 3*c.entity_indices[2][2];
    dofs[29] = offset + 3*c.entity_indices[2][2] + 1;
    dofs[30] = offset + 3*c.entity_indices[2][2] + 2;
    dofs[31] = offset + 3*c.entity_indices[2][3];
    dofs[32] = offset + 3*c.entity_indices[2][3] + 1;
    dofs[33] = offset + 3*c.entity_indices[2][3] + 2;
    offset = offset + 3*m.num_entities[2];
    dofs[34] = offset + c.entity_indices[3][0];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 7;
      dofs[7] = 8;
      dofs[8] = 9;
      dofs[9] = 10;
      dofs[10] = 11;
      dofs[11] = 12;
      dofs[12] = 22;
      dofs[13] = 23;
      dofs[14] = 24;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 13;
      dofs[7] = 14;
      dofs[8] = 15;
      dofs[9] = 16;
      dofs[10] = 17;
      dofs[11] = 18;
      dofs[12] = 25;
      dofs[13] = 26;
      dofs[14] = 27;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 7;
      dofs[4] = 8;
      dofs[5] = 9;
      dofs[6] = 13;
      dofs[7] = 14;
      dofs[8] = 15;
      dofs[9] = 19;
      dofs[10] = 20;
      dofs[11] = 21;
      dofs[12] = 28;
      dofs[13] = 29;
      dofs[14] = 30;
      break;
    case 3:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 10;
      dofs[4] = 11;
      dofs[5] = 12;
      dofs[6] = 16;
      dofs[7] = 17;
      dofs[8] = 18;
      dofs[9] = 19;
      dofs[10] = 20;
      dofs[11] = 21;
      dofs[12] = 31;
      dofs[13] = 32;
      dofs[14] = 33;
      break;
    }
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    throw std::runtime_error("Not implemented (introduced in UFC v1.1).");
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[0][2] = x[0][2];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[1][2] = x[1][2];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[2][2] = x[2][2];
    coordinates[3][0] = x[3][0];
    coordinates[3][1] = x[3][1];
    coordinates[3][2] = x[3][2];
    coordinates[4][0] = 0.75*x[2][0] + 0.25*x[3][0];
    coordinates[4][1] = 0.75*x[2][1] + 0.25*x[3][1];
    coordinates[4][2] = 0.75*x[2][2] + 0.25*x[3][2];
    coordinates[5][0] = 0.5*x[2][0] + 0.5*x[3][0];
    coordinates[5][1] = 0.5*x[2][1] + 0.5*x[3][1];
    coordinates[5][2] = 0.5*x[2][2] + 0.5*x[3][2];
    coordinates[6][0] = 0.25*x[2][0] + 0.75*x[3][0];
    coordinates[6][1] = 0.25*x[2][1] + 0.75*x[3][1];
    coordinates[6][2] = 0.25*x[2][2] + 0.75*x[3][2];
    coordinates[7][0] = 0.75*x[1][0] + 0.25*x[3][0];
    coordinates[7][1] = 0.75*x[1][1] + 0.25*x[3][1];
    coordinates[7][2] = 0.75*x[1][2] + 0.25*x[3][2];
    coordinates[8][0] = 0.5*x[1][0] + 0.5*x[3][0];
    coordinates[8][1] = 0.5*x[1][1] + 0.5*x[3][1];
    coordinates[8][2] = 0.5*x[1][2] + 0.5*x[3][2];
    coordinates[9][0] = 0.25*x[1][0] + 0.75*x[3][0];
    coordinates[9][1] = 0.25*x[1][1] + 0.75*x[3][1];
    coordinates[9][2] = 0.25*x[1][2] + 0.75*x[3][2];
    coordinates[10][0] = 0.75*x[1][0] + 0.25*x[2][0];
    coordinates[10][1] = 0.75*x[1][1] + 0.25*x[2][1];
    coordinates[10][2] = 0.75*x[1][2] + 0.25*x[2][2];
    coordinates[11][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[11][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[11][2] = 0.5*x[1][2] + 0.5*x[2][2];
    coordinates[12][0] = 0.25*x[1][0] + 0.75*x[2][0];
    coordinates[12][1] = 0.25*x[1][1] + 0.75*x[2][1];
    coordinates[12][2] = 0.25*x[1][2] + 0.75*x[2][2];
    coordinates[13][0] = 0.75*x[0][0] + 0.25*x[3][0];
    coordinates[13][1] = 0.75*x[0][1] + 0.25*x[3][1];
    coordinates[13][2] = 0.75*x[0][2] + 0.25*x[3][2];
    coordinates[14][0] = 0.5*x[0][0] + 0.5*x[3][0];
    coordinates[14][1] = 0.5*x[0][1] + 0.5*x[3][1];
    coordinates[14][2] = 0.5*x[0][2] + 0.5*x[3][2];
    coordinates[15][0] = 0.25*x[0][0] + 0.75*x[3][0];
    coordinates[15][1] = 0.25*x[0][1] + 0.75*x[3][1];
    coordinates[15][2] = 0.25*x[0][2] + 0.75*x[3][2];
    coordinates[16][0] = 0.75*x[0][0] + 0.25*x[2][0];
    coordinates[16][1] = 0.75*x[0][1] + 0.25*x[2][1];
    coordinates[16][2] = 0.75*x[0][2] + 0.25*x[2][2];
    coordinates[17][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[17][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[17][2] = 0.5*x[0][2] + 0.5*x[2][2];
    coordinates[18][0] = 0.25*x[0][0] + 0.75*x[2][0];
    coordinates[18][1] = 0.25*x[0][1] + 0.75*x[2][1];
    coordinates[18][2] = 0.25*x[0][2] + 0.75*x[2][2];
    coordinates[19][0] = 0.75*x[0][0] + 0.25*x[1][0];
    coordinates[19][1] = 0.75*x[0][1] + 0.25*x[1][1];
    coordinates[19][2] = 0.75*x[0][2] + 0.25*x[1][2];
    coordinates[20][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[20][1] = 0.5*x[0][1] + 0.5*x[1][1];
    coordinates[20][2] = 0.5*x[0][2] + 0.5*x[1][2];
    coordinates[21][0] = 0.25*x[0][0] + 0.75*x[1][0];
    coordinates[21][1] = 0.25*x[0][1] + 0.75*x[1][1];
    coordinates[21][2] = 0.25*x[0][2] + 0.75*x[1][2];
    coordinates[22][0] = 0.5*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[22][1] = 0.5*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[22][2] = 0.5*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
    coordinates[23][0] = 0.25*x[1][0] + 0.5*x[2][0] + 0.25*x[3][0];
    coordinates[23][1] = 0.25*x[1][1] + 0.5*x[2][1] + 0.25*x[3][1];
    coordinates[23][2] = 0.25*x[1][2] + 0.5*x[2][2] + 0.25*x[3][2];
    coordinates[24][0] = 0.25*x[1][0] + 0.25*x[2][0] + 0.5*x[3][0];
    coordinates[24][1] = 0.25*x[1][1] + 0.25*x[2][1] + 0.5*x[3][1];
    coordinates[24][2] = 0.25*x[1][2] + 0.25*x[2][2] + 0.5*x[3][2];
    coordinates[25][0] = 0.5*x[0][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[25][1] = 0.5*x[0][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[25][2] = 0.5*x[0][2] + 0.25*x[2][2] + 0.25*x[3][2];
    coordinates[26][0] = 0.25*x[0][0] + 0.5*x[2][0] + 0.25*x[3][0];
    coordinates[26][1] = 0.25*x[0][1] + 0.5*x[2][1] + 0.25*x[3][1];
    coordinates[26][2] = 0.25*x[0][2] + 0.5*x[2][2] + 0.25*x[3][2];
    coordinates[27][0] = 0.25*x[0][0] + 0.25*x[2][0] + 0.5*x[3][0];
    coordinates[27][1] = 0.25*x[0][1] + 0.25*x[2][1] + 0.5*x[3][1];
    coordinates[27][2] = 0.25*x[0][2] + 0.25*x[2][2] + 0.5*x[3][2];
    coordinates[28][0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[3][0];
    coordinates[28][1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[3][1];
    coordinates[28][2] = 0.5*x[0][2] + 0.25*x[1][2] + 0.25*x[3][2];
    coordinates[29][0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[3][0];
    coordinates[29][1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[3][1];
    coordinates[29][2] = 0.25*x[0][2] + 0.5*x[1][2] + 0.25*x[3][2];
    coordinates[30][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[3][0];
    coordinates[30][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[3][1];
    coordinates[30][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.5*x[3][2];
    coordinates[31][0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0];
    coordinates[31][1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1];
    coordinates[31][2] = 0.5*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2];
    coordinates[32][0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[2][0];
    coordinates[32][1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[2][1];
    coordinates[32][2] = 0.25*x[0][2] + 0.5*x[1][2] + 0.25*x[2][2];
    coordinates[33][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[2][0];
    coordinates[33][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[2][1];
    coordinates[33][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.5*x[2][2];
    coordinates[34][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[34][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[34][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new UFC_Poisson3D_4LinearForm_dof_map_1();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class UFC_Poisson3D_4LinearForm_cell_integral_0: public ufc::cell_integral
{
public:

  /// Constructor
  UFC_Poisson3D_4LinearForm_cell_integral_0() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson3D_4LinearForm_cell_integral_0()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
      
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    
    const double d_10 = J_02*J_21 - J_01*J_22;
    
    const double d_20 = J_01*J_12 - J_02*J_11;
      
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
      
    // Compute inverse of Jacobian
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Number of operations to compute element tensor = 2450
    // Compute coefficients
    const double c0_0_0_0 = w[0][0];
    const double c0_0_0_1 = w[0][1];
    const double c0_0_0_2 = w[0][2];
    const double c0_0_0_3 = w[0][3];
    const double c0_0_0_4 = w[0][4];
    const double c0_0_0_5 = w[0][5];
    const double c0_0_0_6 = w[0][6];
    const double c0_0_0_7 = w[0][7];
    const double c0_0_0_8 = w[0][8];
    const double c0_0_0_9 = w[0][9];
    const double c0_0_0_10 = w[0][10];
    const double c0_0_0_11 = w[0][11];
    const double c0_0_0_12 = w[0][12];
    const double c0_0_0_13 = w[0][13];
    const double c0_0_0_14 = w[0][14];
    const double c0_0_0_15 = w[0][15];
    const double c0_0_0_16 = w[0][16];
    const double c0_0_0_17 = w[0][17];
    const double c0_0_0_18 = w[0][18];
    const double c0_0_0_19 = w[0][19];
    const double c0_0_0_20 = w[0][20];
    const double c0_0_0_21 = w[0][21];
    const double c0_0_0_22 = w[0][22];
    const double c0_0_0_23 = w[0][23];
    const double c0_0_0_24 = w[0][24];
    const double c0_0_0_25 = w[0][25];
    const double c0_0_0_26 = w[0][26];
    const double c0_0_0_27 = w[0][27];
    const double c0_0_0_28 = w[0][28];
    const double c0_0_0_29 = w[0][29];
    const double c0_0_0_30 = w[0][30];
    const double c0_0_0_31 = w[0][31];
    const double c0_0_0_32 = w[0][32];
    const double c0_0_0_33 = w[0][33];
    const double c0_0_0_34 = w[0][34];
    
    // Compute geometry tensors
    // Number of operations to compute decalrations = 35
    const double G0_0 = det*c0_0_0_0;
    const double G0_1 = det*c0_0_0_1;
    const double G0_2 = det*c0_0_0_2;
    const double G0_3 = det*c0_0_0_3;
    const double G0_4 = det*c0_0_0_4;
    const double G0_5 = det*c0_0_0_5;
    const double G0_6 = det*c0_0_0_6;
    const double G0_7 = det*c0_0_0_7;
    const double G0_8 = det*c0_0_0_8;
    const double G0_9 = det*c0_0_0_9;
    const double G0_10 = det*c0_0_0_10;
    const double G0_11 = det*c0_0_0_11;
    const double G0_12 = det*c0_0_0_12;
    const double G0_13 = det*c0_0_0_13;
    const double G0_14 = det*c0_0_0_14;
    const double G0_15 = det*c0_0_0_15;
    const double G0_16 = det*c0_0_0_16;
    const double G0_17 = det*c0_0_0_17;
    const double G0_18 = det*c0_0_0_18;
    const double G0_19 = det*c0_0_0_19;
    const double G0_20 = det*c0_0_0_20;
    const double G0_21 = det*c0_0_0_21;
    const double G0_22 = det*c0_0_0_22;
    const double G0_23 = det*c0_0_0_23;
    const double G0_24 = det*c0_0_0_24;
    const double G0_25 = det*c0_0_0_25;
    const double G0_26 = det*c0_0_0_26;
    const double G0_27 = det*c0_0_0_27;
    const double G0_28 = det*c0_0_0_28;
    const double G0_29 = det*c0_0_0_29;
    const double G0_30 = det*c0_0_0_30;
    const double G0_31 = det*c0_0_0_31;
    const double G0_32 = det*c0_0_0_32;
    const double G0_33 = det*c0_0_0_33;
    const double G0_34 = det*c0_0_0_34;
    
    // Compute element tensor
    // Number of operations to compute tensor = 2415
    A[0] = 0.000200416867083531*G0_0 + 1.63005718561268e-05*G0_1 + 1.63005718561267e-05*G0_2 + 1.63005718561269e-05*G0_3 - 0.000121853455186786*G0_4 + 8.39078616856378e-05*G0_5 - 0.000121853455186786*G0_6 - 0.000121853455186786*G0_7 + 8.39078616856373e-05*G0_8 - 0.000121853455186786*G0_9 - 0.000121853455186786*G0_10 + 8.39078616856376e-05*G0_11 - 0.000121853455186786*G0_12 - 0.000149644594089036*G0_13 + 0.000112233445566777*G0_14 - 6.84089572978442e-05*G0_15 - 0.000149644594089036*G0_16 + 0.000112233445566777*G0_17 - 6.84089572978441e-05*G0_18 - 0.000149644594089035*G0_19 + 0.000112233445566777*G0_20 - 6.84089572978439e-05*G0_21 - 0.000215915771471324*G0_22 - 0.000215915771471324*G0_23 - 0.000215915771471323*G0_24 + 0.000288600288600288*G0_25 - 0.000185986852653517*G0_26 - 0.000185986852653516*G0_27 + 0.000288600288600288*G0_28 - 0.000185986852653516*G0_29 - 0.000185986852653516*G0_30 + 0.000288600288600288*G0_31 - 0.000185986852653516*G0_32 - 0.000185986852653516*G0_33 - 0.000538720538720522*G0_34;
    A[1] = 1.63005718561268e-05*G0_0 + 0.000200416867083532*G0_1 + 1.63005718561274e-05*G0_2 + 1.63005718561274e-05*G0_3 - 0.000121853455186788*G0_4 + 8.39078616856393e-05*G0_5 - 0.000121853455186788*G0_6 - 0.000149644594089039*G0_7 + 0.000112233445566779*G0_8 - 6.84089572978464e-05*G0_9 - 0.000149644594089038*G0_10 + 0.000112233445566778*G0_11 - 6.84089572978458e-05*G0_12 - 0.000121853455186788*G0_13 + 8.3907861685639e-05*G0_14 - 0.000121853455186788*G0_15 - 0.000121853455186787*G0_16 + 8.39078616856385e-05*G0_17 - 0.000121853455186788*G0_18 - 6.84089572978454e-05*G0_19 + 0.000112233445566778*G0_20 - 0.000149644594089038*G0_21 + 0.000288600288600286*G0_22 - 0.000185986852653518*G0_23 - 0.000185986852653518*G0_24 - 0.000215915771471325*G0_25 - 0.000215915771471325*G0_26 - 0.000215915771471326*G0_27 - 0.000185986852653518*G0_28 + 0.000288600288600286*G0_29 - 0.000185986852653518*G0_30 - 0.000185986852653517*G0_31 + 0.000288600288600286*G0_32 - 0.000185986852653517*G0_33 - 0.000538720538720536*G0_34;
    A[2] = 1.63005718561267e-05*G0_0 + 1.63005718561274e-05*G0_1 + 0.000200416867083532*G0_2 + 1.63005718561273e-05*G0_3 - 0.000149644594089038*G0_4 + 0.000112233445566779*G0_5 - 6.84089572978462e-05*G0_6 - 0.000121853455186787*G0_7 + 8.39078616856385e-05*G0_8 - 0.000121853455186788*G0_9 - 6.84089572978452e-05*G0_10 + 0.000112233445566778*G0_11 - 0.000149644594089037*G0_12 - 0.000121853455186787*G0_13 + 8.39078616856383e-05*G0_14 - 0.000121853455186787*G0_15 - 6.84089572978453e-05*G0_16 + 0.000112233445566778*G0_17 - 0.000149644594089037*G0_18 - 0.000121853455186787*G0_19 + 8.39078616856391e-05*G0_20 - 0.000121853455186787*G0_21 - 0.000185986852653518*G0_22 + 0.000288600288600287*G0_23 - 0.000185986852653518*G0_24 - 0.000185986852653517*G0_25 + 0.000288600288600287*G0_26 - 0.000185986852653518*G0_27 - 0.000215915771471325*G0_28 - 0.000215915771471325*G0_29 - 0.000215915771471326*G0_30 - 0.000185986852653518*G0_31 - 0.000185986852653517*G0_32 + 0.000288600288600287*G0_33 - 0.000538720538720534*G0_34;
    A[3] = 1.63005718561269e-05*G0_0 + 1.63005718561274e-05*G0_1 + 1.63005718561273e-05*G0_2 + 0.000200416867083533*G0_3 - 6.84089572978458e-05*G0_4 + 0.000112233445566778*G0_5 - 0.000149644594089038*G0_6 - 6.84089572978458e-05*G0_7 + 0.000112233445566778*G0_8 - 0.000149644594089038*G0_9 - 0.000121853455186787*G0_10 + 8.39078616856389e-05*G0_11 - 0.000121853455186787*G0_12 - 6.84089572978454e-05*G0_13 + 0.000112233445566778*G0_14 - 0.000149644594089038*G0_15 - 0.000121853455186787*G0_16 + 8.39078616856389e-05*G0_17 - 0.000121853455186788*G0_18 - 0.000121853455186787*G0_19 + 8.39078616856394e-05*G0_20 - 0.000121853455186788*G0_21 - 0.000185986852653518*G0_22 - 0.000185986852653518*G0_23 + 0.000288600288600286*G0_24 - 0.000185986852653518*G0_25 - 0.000185986852653518*G0_26 + 0.000288600288600286*G0_27 - 0.000185986852653518*G0_28 - 0.000185986852653518*G0_29 + 0.000288600288600286*G0_30 - 0.000215915771471325*G0_31 - 0.000215915771471325*G0_32 - 0.000215915771471325*G0_33 - 0.000538720538720538*G0_34;
    A[4] = -0.000121853455186786*G0_0 - 0.000121853455186788*G0_1 - 0.000149644594089038*G0_2 - 6.84089572978458e-05*G0_3 + 0.00171022393244614*G0_4 - 0.00125701459034792*G0_5 + 0.000684089572978458*G0_6 + 0.000273635829191383*G0_7 - 0.000153920153920153*G0_8 + 0.000359147025813691*G0_9 + 0.000359147025813689*G0_10 - 0.000654160654160648*G0_11 + 0.000855111966223069*G0_12 + 0.000273635829191382*G0_13 - 0.000153920153920153*G0_14 + 0.000359147025813691*G0_15 + 0.000359147025813689*G0_16 - 0.000654160654160648*G0_17 + 0.00085511196622307*G0_18 + 0.000136817914595691*G0_19 - 9.83378761156541e-05*G0_20 + 0.000136817914595692*G0_21 - 3.42044786489224e-05*G0_22 + 0.000102613435946768*G0_23 + 0.000513067179733843*G0_24 - 3.42044786489238e-05*G0_25 + 0.000102613435946769*G0_26 + 0.000513067179733843*G0_27 + 8.55111966223069e-05*G0_28 + 8.5511196622306e-05*G0_29 + 0.000974827641494302*G0_30 - 1.71022393244613e-05*G0_31 - 1.71022393244626e-05*G0_32 + 5.13067179733842e-05*G0_33 + 0.00109454331676553*G0_34;
    A[5] = 8.39078616856378e-05*G0_0 + 8.39078616856393e-05*G0_1 + 0.000112233445566779*G0_2 + 0.000112233445566778*G0_3 - 0.00125701459034792*G0_4 + 0.00238576238576237*G0_5 - 0.00125701459034792*G0_6 - 0.000153920153920155*G0_7 + 0.000256533589866924*G0_8 - 0.000654160654160653*G0_9 - 0.000153920153920153*G0_10 + 0.000256533589866922*G0_11 - 0.000654160654160649*G0_12 - 0.000153920153920154*G0_13 + 0.000256533589866923*G0_14 - 0.000654160654160652*G0_15 - 0.000153920153920153*G0_16 + 0.000256533589866921*G0_17 - 0.000654160654160649*G0_18 - 9.83378761156537e-05*G0_19 + 1.92400192400205e-05*G0_20 - 9.83378761156545e-05*G0_21 - 0.000179573512906847*G0_22 - 7.69600769600773e-05*G0_23 - 7.69600769600775e-05*G0_24 - 0.000179573512906846*G0_25 - 7.69600769600767e-05*G0_26 - 7.69600769600764e-05*G0_27 + 0.000269360269360266*G0_28 + 0.000269360269360267*G0_29 - 0.00101330767997434*G0_30 + 0.000269360269360266*G0_31 + 0.000269360269360267*G0_32 - 0.00101330767997434*G0_33 - 0.00102613435946769*G0_34;
    A[6] = -0.000121853455186786*G0_0 - 0.000121853455186788*G0_1 - 6.84089572978462e-05*G0_2 - 0.000149644594089038*G0_3 + 0.000684089572978458*G0_4 - 0.00125701459034792*G0_5 + 0.00171022393244615*G0_6 + 0.000359147025813692*G0_7 - 0.000654160654160652*G0_8 + 0.000855111966223075*G0_9 + 0.000273635829191383*G0_10 - 0.000153920153920153*G0_11 + 0.000359147025813689*G0_12 + 0.000359147025813691*G0_13 - 0.000654160654160652*G0_14 + 0.000855111966223074*G0_15 + 0.000273635829191383*G0_16 - 0.000153920153920153*G0_17 + 0.00035914702581369*G0_18 + 0.000136817914595691*G0_19 - 9.83378761156546e-05*G0_20 + 0.000136817914595692*G0_21 - 3.42044786489217e-05*G0_22 + 0.000513067179733841*G0_23 + 0.000102613435946769*G0_24 - 3.42044786489222e-05*G0_25 + 0.000513067179733841*G0_26 + 0.000102613435946769*G0_27 - 1.71022393244599e-05*G0_28 - 1.71022393244613e-05*G0_29 + 5.13067179733844e-05*G0_30 + 8.55111966223083e-05*G0_31 + 8.5511196622307e-05*G0_32 + 0.000974827641494299*G0_33 + 0.00109454331676554*G0_34;
    A[7] = -0.000121853455186786*G0_0 - 0.000149644594089039*G0_1 - 0.000121853455186787*G0_2 - 6.84089572978458e-05*G0_3 + 0.000273635829191383*G0_4 - 0.000153920153920155*G0_5 + 0.000359147025813692*G0_6 + 0.00171022393244614*G0_7 - 0.00125701459034791*G0_8 + 0.000684089572978457*G0_9 + 0.000855111966223069*G0_10 - 0.000654160654160648*G0_11 + 0.000359147025813689*G0_12 + 0.000273635829191382*G0_13 - 0.000153920153920153*G0_14 + 0.000359147025813691*G0_15 + 0.000136817914595692*G0_16 - 9.83378761156537e-05*G0_17 + 0.000136817914595692*G0_18 + 0.000359147025813688*G0_19 - 0.000654160654160648*G0_20 + 0.00085511196622307*G0_21 + 0.000102613435946765*G0_22 - 3.42044786489196e-05*G0_23 + 0.000513067179733844*G0_24 + 8.55111966223067e-05*G0_25 + 8.55111966223095e-05*G0_26 + 0.000974827641494303*G0_27 - 3.42044786489216e-05*G0_28 + 0.000102613435946766*G0_29 + 0.000513067179733844*G0_30 - 1.71022393244602e-05*G0_31 + 5.13067179733814e-05*G0_32 - 1.71022393244591e-05*G0_33 + 0.00109454331676554*G0_34;
    A[8] = 8.39078616856373e-05*G0_0 + 0.000112233445566779*G0_1 + 8.39078616856385e-05*G0_2 + 0.000112233445566778*G0_3 - 0.000153920153920153*G0_4 + 0.000256533589866924*G0_5 - 0.000654160654160652*G0_6 - 0.00125701459034791*G0_7 + 0.00238576238576237*G0_8 - 0.00125701459034792*G0_9 - 0.000654160654160647*G0_10 + 0.00025653358986692*G0_11 - 0.000153920153920151*G0_12 - 0.000153920153920153*G0_13 + 0.000256533589866923*G0_14 - 0.000654160654160652*G0_15 - 9.83378761156536e-05*G0_16 + 1.92400192400197e-05*G0_17 - 9.83378761156538e-05*G0_18 - 0.000153920153920151*G0_19 + 0.00025653358986692*G0_20 - 0.000654160654160647*G0_21 - 7.69600769600706e-05*G0_22 - 0.000179573512906847*G0_23 - 7.69600769600768e-05*G0_24 + 0.000269360269360267*G0_25 + 0.000269360269360266*G0_26 - 0.00101330767997434*G0_27 - 0.000179573512906847*G0_28 - 7.69600769600718e-05*G0_29 - 7.69600769600759e-05*G0_30 + 0.000269360269360265*G0_31 - 0.00101330767997433*G0_32 + 0.000269360269360265*G0_33 - 0.00102613435946769*G0_34;
    A[9] = -0.000121853455186786*G0_0 - 6.84089572978464e-05*G0_1 - 0.000121853455186788*G0_2 - 0.000149644594089038*G0_3 + 0.000359147025813691*G0_4 - 0.000654160654160653*G0_5 + 0.000855111966223075*G0_6 + 0.000684089572978457*G0_7 - 0.00125701459034791*G0_8 + 0.00171022393244614*G0_9 + 0.000359147025813689*G0_10 - 0.000153920153920153*G0_11 + 0.000273635829191383*G0_12 + 0.00035914702581369*G0_13 - 0.000654160654160651*G0_14 + 0.000855111966223073*G0_15 + 0.000136817914595692*G0_16 - 9.83378761156539e-05*G0_17 + 0.000136817914595692*G0_18 + 0.000273635829191382*G0_19 - 0.000153920153920154*G0_20 + 0.00035914702581369*G0_21 + 0.000513067179733844*G0_22 - 3.42044786489223e-05*G0_23 + 0.000102613435946769*G0_24 - 1.7102239324461e-05*G0_25 - 1.71022393244608e-05*G0_26 + 5.13067179733836e-05*G0_27 - 3.42044786489218e-05*G0_28 + 0.000513067179733843*G0_29 + 0.000102613435946768*G0_30 + 8.55111966223076e-05*G0_31 + 0.000974827641494299*G0_32 + 8.5511196622308e-05*G0_33 + 0.00109454331676554*G0_34;
    A[10] = -0.000121853455186786*G0_0 - 0.000149644594089038*G0_1 - 6.84089572978452e-05*G0_2 - 0.000121853455186787*G0_3 + 0.000359147025813689*G0_4 - 0.000153920153920153*G0_5 + 0.000273635829191383*G0_6 + 0.000855111966223069*G0_7 - 0.000654160654160647*G0_8 + 0.000359147025813689*G0_9 + 0.00171022393244614*G0_10 - 0.00125701459034791*G0_11 + 0.000684089572978454*G0_12 + 0.00013681791459569*G0_13 - 9.83378761156531e-05*G0_14 + 0.000136817914595691*G0_15 + 0.000273635829191382*G0_16 - 0.000153920153920152*G0_17 + 0.000359147025813689*G0_18 + 0.000359147025813688*G0_19 - 0.000654160654160648*G0_20 + 0.000855111966223069*G0_21 + 0.000102613435946765*G0_22 + 0.000513067179733844*G0_23 - 3.42044786489211e-05*G0_24 + 8.55111966223058e-05*G0_25 + 0.000974827641494302*G0_26 + 8.55111966223087e-05*G0_27 - 1.71022393244608e-05*G0_28 + 5.13067179733822e-05*G0_29 - 1.71022393244607e-05*G0_30 - 3.42044786489231e-05*G0_31 + 0.000102613435946768*G0_32 + 0.000513067179733843*G0_33 + 0.00109454331676553*G0_34;
    A[11] = 8.39078616856376e-05*G0_0 + 0.000112233445566778*G0_1 + 0.000112233445566778*G0_2 + 8.39078616856389e-05*G0_3 - 0.000654160654160648*G0_4 + 0.000256533589866921*G0_5 - 0.000153920153920153*G0_6 - 0.000654160654160648*G0_7 + 0.00025653358986692*G0_8 - 0.000153920153920153*G0_9 - 0.00125701459034791*G0_10 + 0.00238576238576236*G0_11 - 0.00125701459034791*G0_12 - 9.83378761156525e-05*G0_13 + 1.92400192400186e-05*G0_14 - 9.83378761156534e-05*G0_15 - 0.000153920153920152*G0_16 + 0.00025653358986692*G0_17 - 0.000654160654160648*G0_18 - 0.000153920153920152*G0_19 + 0.000256533589866921*G0_20 - 0.000654160654160648*G0_21 - 7.69600769600798e-05*G0_22 - 7.6960076960078e-05*G0_23 - 0.000179573512906845*G0_24 + 0.000269360269360269*G0_25 - 0.00101330767997434*G0_26 + 0.000269360269360266*G0_27 + 0.000269360269360268*G0_28 - 0.00101330767997434*G0_29 + 0.000269360269360267*G0_30 - 0.000179573512906844*G0_31 - 7.69600769600769e-05*G0_32 - 7.69600769600759e-05*G0_33 - 0.00102613435946769*G0_34;
    A[12] = -0.000121853455186786*G0_0 - 6.84089572978458e-05*G0_1 - 0.000149644594089037*G0_2 - 0.000121853455186787*G0_3 + 0.000855111966223069*G0_4 - 0.000654160654160649*G0_5 + 0.000359147025813689*G0_6 + 0.000359147025813689*G0_7 - 0.000153920153920151*G0_8 + 0.000273635829191383*G0_9 + 0.000684089572978454*G0_10 - 0.00125701459034791*G0_11 + 0.00171022393244614*G0_12 + 0.00013681791459569*G0_13 - 9.83378761156528e-05*G0_14 + 0.000136817914595692*G0_15 + 0.000359147025813689*G0_16 - 0.000654160654160648*G0_17 + 0.00085511196622307*G0_18 + 0.000273635829191381*G0_19 - 0.000153920153920154*G0_20 + 0.000359147025813689*G0_21 + 0.000513067179733843*G0_22 + 0.000102613435946765*G0_23 - 3.42044786489214e-05*G0_24 - 1.71022393244608e-05*G0_25 + 5.1306717973383e-05*G0_26 - 1.71022393244606e-05*G0_27 + 8.55111966223078e-05*G0_28 + 0.000974827641494299*G0_29 + 8.55111966223084e-05*G0_30 - 3.42044786489221e-05*G0_31 + 0.000513067179733841*G0_32 + 0.000102613435946768*G0_33 + 0.00109454331676553*G0_34;
    A[13] = -0.000149644594089036*G0_0 - 0.000121853455186788*G0_1 - 0.000121853455186787*G0_2 - 6.84089572978454e-05*G0_3 + 0.000273635829191382*G0_4 - 0.000153920153920154*G0_5 + 0.000359147025813691*G0_6 + 0.000273635829191382*G0_7 - 0.000153920153920153*G0_8 + 0.00035914702581369*G0_9 + 0.00013681791459569*G0_10 - 9.83378761156525e-05*G0_11 + 0.00013681791459569*G0_12 + 0.00171022393244614*G0_13 - 0.00125701459034791*G0_14 + 0.000684089572978456*G0_15 + 0.000855111966223069*G0_16 - 0.000654160654160647*G0_17 + 0.000359147025813688*G0_18 + 0.000855111966223067*G0_19 - 0.000654160654160647*G0_20 + 0.000359147025813688*G0_21 + 8.55111966223033e-05*G0_22 + 8.55111966223085e-05*G0_23 + 0.000974827641494302*G0_24 + 0.000102613435946764*G0_25 - 3.42044786489215e-05*G0_26 + 0.000513067179733844*G0_27 + 0.000102613435946765*G0_28 - 3.42044786489269e-05*G0_29 + 0.000513067179733843*G0_30 + 5.13067179733822e-05*G0_31 - 1.71022393244647e-05*G0_32 - 1.71022393244607e-05*G0_33 + 0.00109454331676553*G0_34;
    A[14] = 0.000112233445566777*G0_0 + 8.3907861685639e-05*G0_1 + 8.39078616856383e-05*G0_2 + 0.000112233445566778*G0_3 - 0.000153920153920153*G0_4 + 0.000256533589866923*G0_5 - 0.000654160654160652*G0_6 - 0.000153920153920153*G0_7 + 0.000256533589866923*G0_8 - 0.000654160654160651*G0_9 - 9.83378761156531e-05*G0_10 + 1.92400192400186e-05*G0_11 - 9.83378761156528e-05*G0_12 - 0.00125701459034791*G0_13 + 0.00238576238576237*G0_14 - 0.00125701459034792*G0_15 - 0.000654160654160648*G0_16 + 0.00025653358986692*G0_17 - 0.000153920153920152*G0_18 - 0.000654160654160646*G0_19 + 0.00025653358986692*G0_20 - 0.000153920153920152*G0_21 + 0.00026936026936027*G0_22 + 0.000269360269360265*G0_23 - 0.00101330767997434*G0_24 - 7.69600769600724e-05*G0_25 - 0.000179573512906847*G0_26 - 7.69600769600781e-05*G0_27 - 7.69600769600746e-05*G0_28 - 0.000179573512906841*G0_29 - 7.69600769600772e-05*G0_30 - 0.00101330767997434*G0_31 + 0.000269360269360268*G0_32 + 0.000269360269360265*G0_33 - 0.00102613435946768*G0_34;
    A[15] = -6.84089572978442e-05*G0_0 - 0.000121853455186788*G0_1 - 0.000121853455186787*G0_2 - 0.000149644594089038*G0_3 + 0.000359147025813691*G0_4 - 0.000654160654160652*G0_5 + 0.000855111966223074*G0_6 + 0.000359147025813691*G0_7 - 0.000654160654160652*G0_8 + 0.000855111966223073*G0_9 + 0.000136817914595691*G0_10 - 9.83378761156534e-05*G0_11 + 0.000136817914595692*G0_12 + 0.000684089572978456*G0_13 - 0.00125701459034792*G0_14 + 0.00171022393244614*G0_15 + 0.000359147025813689*G0_16 - 0.000153920153920153*G0_17 + 0.000273635829191383*G0_18 + 0.000359147025813688*G0_19 - 0.000153920153920154*G0_20 + 0.000273635829191383*G0_21 - 1.71022393244597e-05*G0_22 - 1.71022393244591e-05*G0_23 + 5.13067179733815e-05*G0_24 + 0.000513067179733842*G0_25 - 3.42044786489216e-05*G0_26 + 0.000102613435946767*G0_27 + 0.000513067179733842*G0_28 - 3.42044786489229e-05*G0_29 + 0.000102613435946767*G0_30 + 0.000974827641494299*G0_31 + 8.55111966223067e-05*G0_32 + 8.55111966223087e-05*G0_33 + 0.00109454331676553*G0_34;
    A[16] = -0.000149644594089036*G0_0 - 0.000121853455186787*G0_1 - 6.84089572978454e-05*G0_2 - 0.000121853455186787*G0_3 + 0.000359147025813689*G0_4 - 0.000153920153920153*G0_5 + 0.000273635829191383*G0_6 + 0.000136817914595692*G0_7 - 9.83378761156536e-05*G0_8 + 0.000136817914595692*G0_9 + 0.000273635829191382*G0_10 - 0.000153920153920152*G0_11 + 0.000359147025813689*G0_12 + 0.000855111966223069*G0_13 - 0.000654160654160648*G0_14 + 0.000359147025813689*G0_15 + 0.00171022393244614*G0_16 - 0.00125701459034791*G0_17 + 0.000684089572978455*G0_18 + 0.000855111966223069*G0_19 - 0.000654160654160649*G0_20 + 0.000359147025813689*G0_21 + 8.55111966223067e-05*G0_22 + 0.000974827641494301*G0_23 + 8.55111966223081e-05*G0_24 + 0.000102613435946766*G0_25 + 0.000513067179733843*G0_26 - 3.42044786489208e-05*G0_27 + 5.13067179733837e-05*G0_28 - 1.71022393244634e-05*G0_29 - 1.71022393244603e-05*G0_30 + 0.000102613435946768*G0_31 - 3.42044786489249e-05*G0_32 + 0.000513067179733842*G0_33 + 0.00109454331676553*G0_34;
    A[17] = 0.000112233445566777*G0_0 + 8.39078616856385e-05*G0_1 + 0.000112233445566778*G0_2 + 8.39078616856389e-05*G0_3 - 0.000654160654160648*G0_4 + 0.000256533589866921*G0_5 - 0.000153920153920153*G0_6 - 9.83378761156537e-05*G0_7 + 1.92400192400197e-05*G0_8 - 9.83378761156539e-05*G0_9 - 0.000153920153920152*G0_10 + 0.00025653358986692*G0_11 - 0.000654160654160648*G0_12 - 0.000654160654160647*G0_13 + 0.00025653358986692*G0_14 - 0.000153920153920153*G0_15 - 0.00125701459034791*G0_16 + 0.00238576238576236*G0_17 - 0.00125701459034791*G0_18 - 0.000654160654160647*G0_19 + 0.000256533589866922*G0_20 - 0.000153920153920153*G0_21 + 0.000269360269360264*G0_22 - 0.00101330767997434*G0_23 + 0.000269360269360268*G0_24 - 7.69600769600767e-05*G0_25 - 7.69600769600756e-05*G0_26 - 0.000179573512906844*G0_27 - 0.00101330767997434*G0_28 + 0.000269360269360266*G0_29 + 0.000269360269360267*G0_30 - 7.69600769600756e-05*G0_31 - 0.000179573512906847*G0_32 - 7.69600769600766e-05*G0_33 - 0.00102613435946769*G0_34;
    A[18] = -6.84089572978441e-05*G0_0 - 0.000121853455186788*G0_1 - 0.000149644594089037*G0_2 - 0.000121853455186788*G0_3 + 0.00085511196622307*G0_4 - 0.000654160654160649*G0_5 + 0.00035914702581369*G0_6 + 0.000136817914595692*G0_7 - 9.83378761156538e-05*G0_8 + 0.000136817914595692*G0_9 + 0.000359147025813689*G0_10 - 0.000654160654160648*G0_11 + 0.00085511196622307*G0_12 + 0.000359147025813689*G0_13 - 0.000153920153920152*G0_14 + 0.000273635829191383*G0_15 + 0.000684089572978455*G0_16 - 0.00125701459034791*G0_17 + 0.00171022393244614*G0_18 + 0.000359147025813689*G0_19 - 0.000153920153920155*G0_20 + 0.000273635829191383*G0_21 - 1.71022393244585e-05*G0_22 + 5.13067179733843e-05*G0_23 - 1.71022393244613e-05*G0_24 + 0.000513067179733842*G0_25 + 0.000102613435946767*G0_26 - 3.42044786489213e-05*G0_27 + 0.000974827641494299*G0_28 + 8.55111966223075e-05*G0_29 + 8.55111966223083e-05*G0_30 + 0.000513067179733842*G0_31 - 3.42044786489218e-05*G0_32 + 0.00010261343594677*G0_33 + 0.00109454331676554*G0_34;
    A[19] = -0.000149644594089035*G0_0 - 6.84089572978454e-05*G0_1 - 0.000121853455186787*G0_2 - 0.000121853455186787*G0_3 + 0.000136817914595691*G0_4 - 9.83378761156537e-05*G0_5 + 0.000136817914595691*G0_6 + 0.000359147025813688*G0_7 - 0.000153920153920151*G0_8 + 0.000273635829191382*G0_9 + 0.000359147025813688*G0_10 - 0.000153920153920152*G0_11 + 0.000273635829191381*G0_12 + 0.000855111966223067*G0_13 - 0.000654160654160646*G0_14 + 0.000359147025813688*G0_15 + 0.000855111966223069*G0_16 - 0.000654160654160647*G0_17 + 0.000359147025813689*G0_18 + 0.00171022393244614*G0_19 - 0.00125701459034791*G0_20 + 0.000684089572978454*G0_21 + 0.000974827641494302*G0_22 + 8.55111966223067e-05*G0_23 + 8.55111966223066e-05*G0_24 + 5.1306717973382e-05*G0_25 - 1.7102239324462e-05*G0_26 - 1.71022393244616e-05*G0_27 + 0.000102613435946765*G0_28 + 0.000513067179733842*G0_29 - 3.42044786489223e-05*G0_30 + 0.000102613435946767*G0_31 + 0.000513067179733842*G0_32 - 3.42044786489233e-05*G0_33 + 0.00109454331676553*G0_34;
    A[20] = 0.000112233445566777*G0_0 + 0.000112233445566778*G0_1 + 8.39078616856391e-05*G0_2 + 8.39078616856394e-05*G0_3 - 9.83378761156541e-05*G0_4 + 1.92400192400205e-05*G0_5 - 9.83378761156546e-05*G0_6 - 0.000654160654160648*G0_7 + 0.00025653358986692*G0_8 - 0.000153920153920154*G0_9 - 0.000654160654160648*G0_10 + 0.000256533589866921*G0_11 - 0.000153920153920154*G0_12 - 0.000654160654160647*G0_13 + 0.00025653358986692*G0_14 - 0.000153920153920154*G0_15 - 0.000654160654160649*G0_16 + 0.000256533589866922*G0_17 - 0.000153920153920155*G0_18 - 0.00125701459034791*G0_19 + 0.00238576238576236*G0_20 - 0.00125701459034791*G0_21 - 0.00101330767997434*G0_22 + 0.000269360269360267*G0_23 + 0.000269360269360268*G0_24 - 0.00101330767997434*G0_25 + 0.000269360269360268*G0_26 + 0.000269360269360267*G0_27 - 7.69600769600811e-05*G0_28 - 7.69600769600793e-05*G0_29 - 0.000179573512906843*G0_30 - 7.69600769600807e-05*G0_31 - 7.69600769600793e-05*G0_32 - 0.000179573512906844*G0_33 - 0.0010261343594677*G0_34;
    A[21] = -6.84089572978439e-05*G0_0 - 0.000149644594089038*G0_1 - 0.000121853455186787*G0_2 - 0.000121853455186788*G0_3 + 0.000136817914595692*G0_4 - 9.83378761156544e-05*G0_5 + 0.000136817914595692*G0_6 + 0.00085511196622307*G0_7 - 0.000654160654160647*G0_8 + 0.00035914702581369*G0_9 + 0.000855111966223069*G0_10 - 0.000654160654160648*G0_11 + 0.000359147025813689*G0_12 + 0.000359147025813688*G0_13 - 0.000153920153920152*G0_14 + 0.000273635829191383*G0_15 + 0.000359147025813689*G0_16 - 0.000153920153920153*G0_17 + 0.000273635829191383*G0_18 + 0.000684089572978454*G0_19 - 0.00125701459034791*G0_20 + 0.00171022393244614*G0_21 + 5.13067179733847e-05*G0_22 - 1.71022393244605e-05*G0_23 - 1.71022393244604e-05*G0_24 + 0.000974827641494301*G0_25 + 8.55111966223068e-05*G0_26 + 8.55111966223085e-05*G0_27 + 0.000513067179733846*G0_28 + 0.000102613435946766*G0_29 - 3.42044786489214e-05*G0_30 + 0.000513067179733844*G0_31 + 0.000102613435946768*G0_32 - 3.42044786489227e-05*G0_33 + 0.00109454331676554*G0_34;
    A[22] = -0.000215915771471324*G0_0 + 0.000288600288600286*G0_1 - 0.000185986852653518*G0_2 - 0.000185986852653518*G0_3 - 3.42044786489224e-05*G0_4 - 0.000179573512906847*G0_5 - 3.42044786489217e-05*G0_6 + 0.000102613435946765*G0_7 - 7.69600769600705e-05*G0_8 + 0.000513067179733844*G0_9 + 0.000102613435946765*G0_10 - 7.696007696008e-05*G0_11 + 0.000513067179733843*G0_12 + 8.55111966223033e-05*G0_13 + 0.00026936026936027*G0_14 - 1.71022393244597e-05*G0_15 + 8.55111966223068e-05*G0_16 + 0.000269360269360264*G0_17 - 1.71022393244584e-05*G0_18 + 0.000974827641494302*G0_19 - 0.00101330767997434*G0_20 + 5.13067179733847e-05*G0_21 + 0.00779862113195441*G0_22 - 0.00205226871893537*G0_23 - 0.00205226871893537*G0_24 - 0.000205226871893535*G0_25 - 0.00143658810325476*G0_26 - 0.00143658810325476*G0_27 - 0.00143658810325476*G0_28 + 0.00389931056597721*G0_29 - 0.00102613435946769*G0_30 - 0.00143658810325476*G0_31 + 0.0038993105659772*G0_32 - 0.00102613435946769*G0_33 + 0.0016418149751483*G0_34;
    A[23] = -0.000215915771471324*G0_0 - 0.000185986852653518*G0_1 + 0.000288600288600287*G0_2 - 0.000185986852653518*G0_3 + 0.000102613435946768*G0_4 - 7.69600769600773e-05*G0_5 + 0.000513067179733842*G0_6 - 3.42044786489196e-05*G0_7 - 0.000179573512906847*G0_8 - 3.42044786489223e-05*G0_9 + 0.000513067179733844*G0_10 - 7.69600769600779e-05*G0_11 + 0.000102613435946765*G0_12 + 8.55111966223085e-05*G0_13 + 0.000269360269360265*G0_14 - 1.71022393244591e-05*G0_15 + 0.000974827641494301*G0_16 - 0.00101330767997434*G0_17 + 5.13067179733843e-05*G0_18 + 8.55111966223067e-05*G0_19 + 0.000269360269360267*G0_20 - 1.71022393244605e-05*G0_21 - 0.00205226871893537*G0_22 + 0.0077986211319544*G0_23 - 0.00205226871893537*G0_24 - 0.00143658810325476*G0_25 + 0.00389931056597721*G0_26 - 0.00102613435946769*G0_27 - 0.000205226871893533*G0_28 - 0.00143658810325476*G0_29 - 0.00143658810325476*G0_30 - 0.00143658810325476*G0_31 - 0.00102613435946769*G0_32 + 0.0038993105659772*G0_33 + 0.0016418149751483*G0_34;
    A[24] = -0.000215915771471323*G0_0 - 0.000185986852653518*G0_1 - 0.000185986852653518*G0_2 + 0.000288600288600286*G0_3 + 0.000513067179733843*G0_4 - 7.69600769600774e-05*G0_5 + 0.000102613435946769*G0_6 + 0.000513067179733844*G0_7 - 7.69600769600767e-05*G0_8 + 0.000102613435946769*G0_9 - 3.42044786489211e-05*G0_10 - 0.000179573512906845*G0_11 - 3.42044786489215e-05*G0_12 + 0.000974827641494302*G0_13 - 0.00101330767997434*G0_14 + 5.13067179733814e-05*G0_15 + 8.55111966223081e-05*G0_16 + 0.000269360269360268*G0_17 - 1.71022393244613e-05*G0_18 + 8.55111966223066e-05*G0_19 + 0.000269360269360268*G0_20 - 1.71022393244604e-05*G0_21 - 0.00205226871893537*G0_22 - 0.00205226871893537*G0_23 + 0.00779862113195442*G0_24 - 0.00143658810325476*G0_25 - 0.00102613435946769*G0_26 + 0.00389931056597721*G0_27 - 0.00143658810325476*G0_28 - 0.00102613435946769*G0_29 + 0.00389931056597721*G0_30 - 0.000205226871893539*G0_31 - 0.00143658810325476*G0_32 - 0.00143658810325476*G0_33 + 0.0016418149751483*G0_34;
    A[25] = 0.000288600288600288*G0_0 - 0.000215915771471325*G0_1 - 0.000185986852653517*G0_2 - 0.000185986852653518*G0_3 - 3.42044786489237e-05*G0_4 - 0.000179573512906846*G0_5 - 3.42044786489223e-05*G0_6 + 8.55111966223068e-05*G0_7 + 0.000269360269360267*G0_8 - 1.7102239324461e-05*G0_9 + 8.55111966223059e-05*G0_10 + 0.000269360269360269*G0_11 - 1.71022393244608e-05*G0_12 + 0.000102613435946764*G0_13 - 7.69600769600725e-05*G0_14 + 0.000513067179733842*G0_15 + 0.000102613435946766*G0_16 - 7.69600769600769e-05*G0_17 + 0.000513067179733842*G0_18 + 5.1306717973382e-05*G0_19 - 0.00101330767997434*G0_20 + 0.000974827641494301*G0_21 - 0.000205226871893535*G0_22 - 0.00143658810325476*G0_23 - 0.00143658810325476*G0_24 + 0.00779862113195441*G0_25 - 0.00205226871893537*G0_26 - 0.00205226871893537*G0_27 + 0.00389931056597721*G0_28 - 0.00143658810325476*G0_29 - 0.00102613435946769*G0_30 + 0.0038993105659772*G0_31 - 0.00143658810325476*G0_32 - 0.00102613435946769*G0_33 + 0.00164181497514829*G0_34;
    A[26] = -0.000185986852653517*G0_0 - 0.000215915771471325*G0_1 + 0.000288600288600287*G0_2 - 0.000185986852653518*G0_3 + 0.000102613435946769*G0_4 - 7.69600769600767e-05*G0_5 + 0.000513067179733841*G0_6 + 8.55111966223095e-05*G0_7 + 0.000269360269360265*G0_8 - 1.71022393244608e-05*G0_9 + 0.000974827641494302*G0_10 - 0.00101330767997434*G0_11 + 5.1306717973383e-05*G0_12 - 3.42044786489215e-05*G0_13 - 0.000179573512906847*G0_14 - 3.42044786489216e-05*G0_15 + 0.000513067179733842*G0_16 - 7.69600769600755e-05*G0_17 + 0.000102613435946767*G0_18 - 1.7102239324462e-05*G0_19 + 0.000269360269360268*G0_20 + 8.55111966223068e-05*G0_21 - 0.00143658810325476*G0_22 + 0.00389931056597721*G0_23 - 0.00102613435946769*G0_24 - 0.00205226871893537*G0_25 + 0.00779862113195441*G0_26 - 0.00205226871893537*G0_27 - 0.00143658810325476*G0_28 - 0.000205226871893539*G0_29 - 0.00143658810325476*G0_30 - 0.00102613435946769*G0_31 - 0.00143658810325476*G0_32 + 0.00389931056597721*G0_33 + 0.0016418149751483*G0_34;
    A[27] = -0.000185986852653516*G0_0 - 0.000215915771471326*G0_1 - 0.000185986852653518*G0_2 + 0.000288600288600286*G0_3 + 0.000513067179733843*G0_4 - 7.69600769600763e-05*G0_5 + 0.000102613435946769*G0_6 + 0.000974827641494303*G0_7 - 0.00101330767997434*G0_8 + 5.13067179733836e-05*G0_9 + 8.55111966223087e-05*G0_10 + 0.000269360269360266*G0_11 - 1.71022393244606e-05*G0_12 + 0.000513067179733844*G0_13 - 7.69600769600781e-05*G0_14 + 0.000102613435946767*G0_15 - 3.42044786489207e-05*G0_16 - 0.000179573512906844*G0_17 - 3.42044786489213e-05*G0_18 - 1.71022393244616e-05*G0_19 + 0.000269360269360267*G0_20 + 8.55111966223086e-05*G0_21 - 0.00143658810325476*G0_22 - 0.00102613435946769*G0_23 + 0.00389931056597721*G0_24 - 0.00205226871893537*G0_25 - 0.00205226871893537*G0_26 + 0.00779862113195441*G0_27 - 0.00102613435946768*G0_28 - 0.00143658810325476*G0_29 + 0.00389931056597721*G0_30 - 0.00143658810325476*G0_31 - 0.00020522687189354*G0_32 - 0.00143658810325476*G0_33 + 0.0016418149751483*G0_34;
    A[28] = 0.000288600288600288*G0_0 - 0.000185986852653518*G0_1 - 0.000215915771471325*G0_2 - 0.000185986852653518*G0_3 + 8.55111966223069e-05*G0_4 + 0.000269360269360266*G0_5 - 1.71022393244599e-05*G0_6 - 3.42044786489216e-05*G0_7 - 0.000179573512906847*G0_8 - 3.42044786489219e-05*G0_9 - 1.71022393244608e-05*G0_10 + 0.000269360269360268*G0_11 + 8.55111966223078e-05*G0_12 + 0.000102613435946765*G0_13 - 7.69600769600747e-05*G0_14 + 0.000513067179733842*G0_15 + 5.13067179733837e-05*G0_16 - 0.00101330767997434*G0_17 + 0.000974827641494299*G0_18 + 0.000102613435946765*G0_19 - 7.69600769600811e-05*G0_20 + 0.000513067179733846*G0_21 - 0.00143658810325476*G0_22 - 0.000205226871893533*G0_23 - 0.00143658810325476*G0_24 + 0.00389931056597721*G0_25 - 0.00143658810325476*G0_26 - 0.00102613435946768*G0_27 + 0.00779862113195441*G0_28 - 0.00205226871893537*G0_29 - 0.00205226871893537*G0_30 + 0.0038993105659772*G0_31 - 0.00102613435946768*G0_32 - 0.00143658810325476*G0_33 + 0.0016418149751483*G0_34;
    A[29] = -0.000185986852653516*G0_0 + 0.000288600288600286*G0_1 - 0.000215915771471325*G0_2 - 0.000185986852653518*G0_3 + 8.5511196622306e-05*G0_4 + 0.000269360269360267*G0_5 - 1.71022393244613e-05*G0_6 + 0.000102613435946766*G0_7 - 7.69600769600719e-05*G0_8 + 0.000513067179733843*G0_9 + 5.13067179733822e-05*G0_10 - 0.00101330767997434*G0_11 + 0.000974827641494299*G0_12 - 3.42044786489269e-05*G0_13 - 0.000179573512906841*G0_14 - 3.42044786489229e-05*G0_15 - 1.71022393244635e-05*G0_16 + 0.000269360269360266*G0_17 + 8.55111966223075e-05*G0_18 + 0.000513067179733842*G0_19 - 7.69600769600794e-05*G0_20 + 0.000102613435946766*G0_21 + 0.00389931056597721*G0_22 - 0.00143658810325476*G0_23 - 0.00102613435946769*G0_24 - 0.00143658810325476*G0_25 - 0.000205226871893539*G0_26 - 0.00143658810325476*G0_27 - 0.00205226871893537*G0_28 + 0.00779862113195441*G0_29 - 0.00205226871893537*G0_30 - 0.00102613435946768*G0_31 + 0.0038993105659772*G0_32 - 0.00143658810325476*G0_33 + 0.00164181497514829*G0_34;
    A[30] = -0.000185986852653516*G0_0 - 0.000185986852653518*G0_1 - 0.000215915771471326*G0_2 + 0.000288600288600286*G0_3 + 0.000974827641494302*G0_4 - 0.00101330767997434*G0_5 + 5.13067179733843e-05*G0_6 + 0.000513067179733844*G0_7 - 7.69600769600757e-05*G0_8 + 0.000102613435946768*G0_9 - 1.71022393244607e-05*G0_10 + 0.000269360269360267*G0_11 + 8.55111966223084e-05*G0_12 + 0.000513067179733843*G0_13 - 7.69600769600771e-05*G0_14 + 0.000102613435946767*G0_15 - 1.71022393244603e-05*G0_16 + 0.000269360269360267*G0_17 + 8.55111966223083e-05*G0_18 - 3.42044786489223e-05*G0_19 - 0.000179573512906843*G0_20 - 3.42044786489213e-05*G0_21 - 0.00102613435946769*G0_22 - 0.00143658810325476*G0_23 + 0.00389931056597721*G0_24 - 0.00102613435946769*G0_25 - 0.00143658810325476*G0_26 + 0.00389931056597721*G0_27 - 0.00205226871893537*G0_28 - 0.00205226871893537*G0_29 + 0.00779862113195441*G0_30 - 0.00143658810325476*G0_31 - 0.00143658810325476*G0_32 - 0.000205226871893541*G0_33 + 0.0016418149751483*G0_34;
    A[31] = 0.000288600288600288*G0_0 - 0.000185986852653518*G0_1 - 0.000185986852653518*G0_2 - 0.000215915771471325*G0_3 - 1.71022393244613e-05*G0_4 + 0.000269360269360266*G0_5 + 8.55111966223082e-05*G0_6 - 1.71022393244602e-05*G0_7 + 0.000269360269360265*G0_8 + 8.55111966223077e-05*G0_9 - 3.42044786489231e-05*G0_10 - 0.000179573512906844*G0_11 - 3.42044786489222e-05*G0_12 + 5.1306717973382e-05*G0_13 - 0.00101330767997434*G0_14 + 0.000974827641494299*G0_15 + 0.000102613435946769*G0_16 - 7.69600769600756e-05*G0_17 + 0.000513067179733842*G0_18 + 0.000102613435946767*G0_19 - 7.69600769600807e-05*G0_20 + 0.000513067179733844*G0_21 - 0.00143658810325476*G0_22 - 0.00143658810325476*G0_23 - 0.000205226871893539*G0_24 + 0.0038993105659772*G0_25 - 0.00102613435946769*G0_26 - 0.00143658810325476*G0_27 + 0.0038993105659772*G0_28 - 0.00102613435946768*G0_29 - 0.00143658810325476*G0_30 + 0.0077986211319544*G0_31 - 0.00205226871893536*G0_32 - 0.00205226871893537*G0_33 + 0.0016418149751483*G0_34;
    A[32] = -0.000185986852653516*G0_0 + 0.000288600288600286*G0_1 - 0.000185986852653517*G0_2 - 0.000215915771471325*G0_3 - 1.71022393244626e-05*G0_4 + 0.000269360269360267*G0_5 + 8.5511196622307e-05*G0_6 + 5.13067179733814e-05*G0_7 - 0.00101330767997433*G0_8 + 0.000974827641494299*G0_9 + 0.000102613435946767*G0_10 - 7.69600769600769e-05*G0_11 + 0.000513067179733841*G0_12 - 1.71022393244646e-05*G0_13 + 0.000269360269360268*G0_14 + 8.55111966223068e-05*G0_15 - 3.4204478648925e-05*G0_16 - 0.000179573512906847*G0_17 - 3.42044786489218e-05*G0_18 + 0.000513067179733841*G0_19 - 7.69600769600793e-05*G0_20 + 0.000102613435946768*G0_21 + 0.0038993105659772*G0_22 - 0.00102613435946769*G0_23 - 0.00143658810325476*G0_24 - 0.00143658810325476*G0_25 - 0.00143658810325476*G0_26 - 0.00020522687189354*G0_27 - 0.00102613435946768*G0_28 + 0.0038993105659772*G0_29 - 0.00143658810325476*G0_30 - 0.00205226871893536*G0_31 + 0.0077986211319544*G0_32 - 0.00205226871893537*G0_33 + 0.00164181497514829*G0_34;
    A[33] = -0.000185986852653516*G0_0 - 0.000185986852653517*G0_1 + 0.000288600288600287*G0_2 - 0.000215915771471325*G0_3 + 5.13067179733842e-05*G0_4 - 0.00101330767997434*G0_5 + 0.000974827641494299*G0_6 - 1.71022393244591e-05*G0_7 + 0.000269360269360265*G0_8 + 8.5511196622308e-05*G0_9 + 0.000513067179733843*G0_10 - 7.69600769600759e-05*G0_11 + 0.000102613435946768*G0_12 - 1.71022393244607e-05*G0_13 + 0.000269360269360265*G0_14 + 8.55111966223087e-05*G0_15 + 0.000513067179733842*G0_16 - 7.69600769600766e-05*G0_17 + 0.00010261343594677*G0_18 - 3.42044786489233e-05*G0_19 - 0.000179573512906844*G0_20 - 3.42044786489227e-05*G0_21 - 0.00102613435946769*G0_22 + 0.0038993105659772*G0_23 - 0.00143658810325476*G0_24 - 0.00102613435946769*G0_25 + 0.00389931056597721*G0_26 - 0.00143658810325476*G0_27 - 0.00143658810325476*G0_28 - 0.00143658810325476*G0_29 - 0.000205226871893541*G0_30 - 0.00205226871893537*G0_31 - 0.00205226871893537*G0_32 + 0.0077986211319544*G0_33 + 0.00164181497514829*G0_34;
    A[34] = -0.000538720538720522*G0_0 - 0.000538720538720536*G0_1 - 0.000538720538720534*G0_2 - 0.000538720538720538*G0_3 + 0.00109454331676553*G0_4 - 0.00102613435946769*G0_5 + 0.00109454331676554*G0_6 + 0.00109454331676554*G0_7 - 0.00102613435946769*G0_8 + 0.00109454331676554*G0_9 + 0.00109454331676553*G0_10 - 0.00102613435946769*G0_11 + 0.00109454331676553*G0_12 + 0.00109454331676553*G0_13 - 0.00102613435946768*G0_14 + 0.00109454331676553*G0_15 + 0.00109454331676553*G0_16 - 0.00102613435946769*G0_17 + 0.00109454331676554*G0_18 + 0.00109454331676553*G0_19 - 0.0010261343594677*G0_20 + 0.00109454331676554*G0_21 + 0.0016418149751483*G0_22 + 0.0016418149751483*G0_23 + 0.0016418149751483*G0_24 + 0.00164181497514829*G0_25 + 0.0016418149751483*G0_26 + 0.0016418149751483*G0_27 + 0.0016418149751483*G0_28 + 0.00164181497514829*G0_29 + 0.0016418149751483*G0_30 + 0.0016418149751483*G0_31 + 0.00164181497514829*G0_32 + 0.00164181497514829*G0_33 + 0.0262690396023728*G0_34;
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class UFC_Poisson3D_4LinearForm: public ufc::form
{
public:

  /// Constructor
  UFC_Poisson3D_4LinearForm() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson3D_4LinearForm()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "w0_a0[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34] | vi0[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]*va0[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]*dX(0)";
  }

  /// Return the rank of the global tensor (r)
  virtual unsigned int rank() const
  {
    return 1;
  }

  /// Return the number of coefficients (n)
  virtual unsigned int num_coefficients() const
  {
    return 1;
  }

  /// Return the number of cell integrals
  virtual unsigned int num_cell_integrals() const
  {
    return 1;
  }
  
  /// Return the number of exterior facet integrals
  virtual unsigned int num_exterior_facet_integrals() const
  {
    return 0;
  }
  
  /// Return the number of interior facet integrals
  virtual unsigned int num_interior_facet_integrals() const
  {
    return 0;
  }
    
  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new UFC_Poisson3D_4LinearForm_finite_element_0();
      break;
    case 1:
      return new UFC_Poisson3D_4LinearForm_finite_element_1();
      break;
    }
    return 0;
  }
  
  /// Create a new dof map for argument function i
  virtual ufc::dof_map* create_dof_map(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new UFC_Poisson3D_4LinearForm_dof_map_0();
      break;
    case 1:
      return new UFC_Poisson3D_4LinearForm_dof_map_1();
      break;
    }
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(unsigned int i) const
  {
    return new UFC_Poisson3D_4LinearForm_cell_integral_0();
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(unsigned int i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(unsigned int i) const
  {
    return 0;
  }

};

// DOLFIN wrappers

#include <dolfin/fem/Form.h>
#include <dolfin/fem/FiniteElement.h>
#include <dolfin/fem/DofMap.h>
#include <dolfin/function/Coefficient.h>
#include <dolfin/function/Function.h>
#include <dolfin/function/FunctionSpace.h>

class Poisson3D_4BilinearFormFunctionSpace0 : public dolfin::FunctionSpace
{
public:

  Poisson3D_4BilinearFormFunctionSpace0(const dolfin::Mesh& mesh)
    : dolfin::FunctionSpace(std::tr1::shared_ptr<const dolfin::Mesh>(&mesh, dolfin::NoDeleter<const dolfin::Mesh>()),
                            std::tr1::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::tr1::shared_ptr<ufc::finite_element>(new UFC_Poisson3D_4LinearForm_finite_element_1()))),
                            std::tr1::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::tr1::shared_ptr<ufc::dof_map>(new UFC_Poisson3D_4LinearForm_dof_map_1()), mesh)))
  {
    // Do nothing
  }

};

class Poisson3D_4BilinearFormFunctionSpace1 : public dolfin::FunctionSpace
{
public:

  Poisson3D_4BilinearFormFunctionSpace1(const dolfin::Mesh& mesh)
    : dolfin::FunctionSpace(std::tr1::shared_ptr<const dolfin::Mesh>(&mesh, dolfin::NoDeleter<const dolfin::Mesh>()),
                            std::tr1::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::tr1::shared_ptr<ufc::finite_element>(new UFC_Poisson3D_4LinearForm_finite_element_1()))),
                            std::tr1::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::tr1::shared_ptr<ufc::dof_map>(new UFC_Poisson3D_4LinearForm_dof_map_1()), mesh)))
  {
    // Do nothing
  }

};

class Poisson3D_4LinearFormFunctionSpace0 : public dolfin::FunctionSpace
{
public:

  Poisson3D_4LinearFormFunctionSpace0(const dolfin::Mesh& mesh)
    : dolfin::FunctionSpace(std::tr1::shared_ptr<const dolfin::Mesh>(&mesh, dolfin::NoDeleter<const dolfin::Mesh>()),
                            std::tr1::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::tr1::shared_ptr<ufc::finite_element>(new UFC_Poisson3D_4LinearForm_finite_element_1()))),
                            std::tr1::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::tr1::shared_ptr<ufc::dof_map>(new UFC_Poisson3D_4LinearForm_dof_map_1()), mesh)))
  {
    // Do nothing
  }

};

class Poisson3D_4LinearFormCoefficientSpace0 : public dolfin::FunctionSpace
{
public:

  Poisson3D_4LinearFormCoefficientSpace0(const dolfin::Mesh& mesh)
    : dolfin::FunctionSpace(std::tr1::shared_ptr<const dolfin::Mesh>(&mesh, dolfin::NoDeleter<const dolfin::Mesh>()),
                            std::tr1::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::tr1::shared_ptr<ufc::finite_element>(new UFC_Poisson3D_4LinearForm_finite_element_1()))),
                            std::tr1::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::tr1::shared_ptr<ufc::dof_map>(new UFC_Poisson3D_4LinearForm_dof_map_1()), mesh)))
  {
    // Do nothing
  }

};

class Poisson3D_4TestSpace : public dolfin::FunctionSpace
{
public:

  Poisson3D_4TestSpace(const dolfin::Mesh& mesh)
    : dolfin::FunctionSpace(std::tr1::shared_ptr<const dolfin::Mesh>(&mesh, dolfin::NoDeleter<const dolfin::Mesh>()),
                            std::tr1::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::tr1::shared_ptr<ufc::finite_element>(new UFC_Poisson3D_4LinearForm_finite_element_1()))),
                            std::tr1::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::tr1::shared_ptr<ufc::dof_map>(new UFC_Poisson3D_4LinearForm_dof_map_1()), mesh)))
  {
    // Do nothing
  }

};

class Poisson3D_4TrialSpace : public dolfin::FunctionSpace
{
public:

  Poisson3D_4TrialSpace(const dolfin::Mesh& mesh)
    : dolfin::FunctionSpace(std::tr1::shared_ptr<const dolfin::Mesh>(&mesh, dolfin::NoDeleter<const dolfin::Mesh>()),
                            std::tr1::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::tr1::shared_ptr<ufc::finite_element>(new UFC_Poisson3D_4LinearForm_finite_element_1()))),
                            std::tr1::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::tr1::shared_ptr<ufc::dof_map>(new UFC_Poisson3D_4LinearForm_dof_map_1()), mesh)))
  {
    // Do nothing
  }

};

class Poisson3D_4CoefficientSpace : public dolfin::FunctionSpace
{
public:

  Poisson3D_4CoefficientSpace(const dolfin::Mesh& mesh)
    : dolfin::FunctionSpace(std::tr1::shared_ptr<const dolfin::Mesh>(&mesh, dolfin::NoDeleter<const dolfin::Mesh>()),
                            std::tr1::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::tr1::shared_ptr<ufc::finite_element>(new UFC_Poisson3D_4LinearForm_finite_element_1()))),
                            std::tr1::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::tr1::shared_ptr<ufc::dof_map>(new UFC_Poisson3D_4LinearForm_dof_map_1()), mesh)))
  {
    // Do nothing
  }

};

class Poisson3D_4FunctionSpace : public dolfin::FunctionSpace
{
public:

  Poisson3D_4FunctionSpace(const dolfin::Mesh& mesh)
    : dolfin::FunctionSpace(std::tr1::shared_ptr<const dolfin::Mesh>(&mesh, dolfin::NoDeleter<const dolfin::Mesh>()),
                            std::tr1::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::tr1::shared_ptr<ufc::finite_element>(new UFC_Poisson3D_4LinearForm_finite_element_1()))),
                            std::tr1::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::tr1::shared_ptr<ufc::dof_map>(new UFC_Poisson3D_4LinearForm_dof_map_1()), mesh)))
  {
    // Do nothing
  }

};

class Poisson3D_4BilinearForm : public dolfin::Form
{
public:

  // Create form on given function space(s)
  Poisson3D_4BilinearForm(const dolfin::FunctionSpace& V0, const dolfin::FunctionSpace& V1) : dolfin::Form()
  {
    std::tr1::shared_ptr<const dolfin::FunctionSpace> _V0(&V0, dolfin::NoDeleter<const dolfin::FunctionSpace>());
    _function_spaces.push_back(_V0);
    std::tr1::shared_ptr<const dolfin::FunctionSpace> _V1(&V1, dolfin::NoDeleter<const dolfin::FunctionSpace>());
    _function_spaces.push_back(_V1);

    _ufc_form = std::tr1::shared_ptr<const ufc::form>(new UFC_Poisson3D_4BilinearForm());
  }

  // Create form on given function space(s) (shared data)
  Poisson3D_4BilinearForm(std::tr1::shared_ptr<const dolfin::FunctionSpace> V0, std::tr1::shared_ptr<const dolfin::FunctionSpace> V1) : dolfin::Form()
  {
    _function_spaces.push_back(V0);
    _function_spaces.push_back(V1);

    _ufc_form = std::tr1::shared_ptr<const ufc::form>(new UFC_Poisson3D_4BilinearForm());
  }

  // Destructor
  ~Poisson3D_4BilinearForm() {}

};

class Poisson3D_4LinearFormCoefficient0 : public dolfin::Coefficient
{
public:

  // Constructor
  Poisson3D_4LinearFormCoefficient0(dolfin::Form& form) : dolfin::Coefficient(form) {}

  // Destructor  
  ~Poisson3D_4LinearFormCoefficient0() {}

  // Attach function to coefficient
  const Poisson3D_4LinearFormCoefficient0& operator= (dolfin::Function& v)
  {
    attach(v);
    return *this;
  }

  /// Create function space for coefficient
  const dolfin::FunctionSpace* create_function_space() const
  {
    return new Poisson3D_4LinearFormCoefficientSpace0(form.mesh());
  }
  
  /// Return coefficient number
  dolfin::uint number() const
  {
    return 0;
  }
  
  /// Return coefficient name
  virtual std::string name() const
  {
    return "f";
  }
  
};
class Poisson3D_4LinearForm : public dolfin::Form
{
public:

  // Create form on given function space(s)
  Poisson3D_4LinearForm(const dolfin::FunctionSpace& V0) : dolfin::Form(), f(*this)
  {
    std::tr1::shared_ptr<const dolfin::FunctionSpace> _V0(&V0, dolfin::NoDeleter<const dolfin::FunctionSpace>());
    _function_spaces.push_back(_V0);

    _coefficients.push_back(std::tr1::shared_ptr<const dolfin::Function>(static_cast<const dolfin::Function*>(0)));

    _ufc_form = std::tr1::shared_ptr<const ufc::form>(new UFC_Poisson3D_4LinearForm());
  }

  // Create form on given function space(s) (shared data)
  Poisson3D_4LinearForm(std::tr1::shared_ptr<const dolfin::FunctionSpace> V0) : dolfin::Form(), f(*this)
  {
    _function_spaces.push_back(V0);

    _coefficients.push_back(std::tr1::shared_ptr<const dolfin::Function>(static_cast<const dolfin::Function*>(0)));

    _ufc_form = std::tr1::shared_ptr<const ufc::form>(new UFC_Poisson3D_4LinearForm());
  }

  // Create form on given function space(s) with given coefficient(s)
  Poisson3D_4LinearForm(const dolfin::FunctionSpace& V0, dolfin::Function& w0) : dolfin::Form(), f(*this)
  {
    std::tr1::shared_ptr<const dolfin::FunctionSpace> _V0(&V0, dolfin::NoDeleter<const dolfin::FunctionSpace>());
    _function_spaces.push_back(_V0);

    _coefficients.push_back(std::tr1::shared_ptr<const dolfin::Function>(static_cast<const dolfin::Function*>(0)));

    this->f = w0;

    _ufc_form = std::tr1::shared_ptr<const ufc::form>(new UFC_Poisson3D_4LinearForm());
  }

  // Create form on given function space(s) with given coefficient(s) (shared data)
  Poisson3D_4LinearForm(std::tr1::shared_ptr<const dolfin::FunctionSpace> V0, dolfin::Function& w0) : dolfin::Form(), f(*this)
  {
    _function_spaces.push_back(V0);

    _coefficients.push_back(std::tr1::shared_ptr<const dolfin::Function>(static_cast<const dolfin::Function*>(0)));

    this->f = w0;

    _ufc_form = std::tr1::shared_ptr<const ufc::form>(new UFC_Poisson3D_4LinearForm());
  }

  // Destructor
  ~Poisson3D_4LinearForm() {}

  // Coefficients
  Poisson3D_4LinearFormCoefficient0 f;

};

#endif
