// Automatically generated by FFC, the FEniCS Form Compiler, version 0.1.9.
// For further information, go to http://www/fenics.org/ffc/.
// Licensed under the GNU GPL Version 2.

#ifndef __ELASTICITY_H
#define __ELASTICITY_H

#include <dolfin/FiniteElement.h>
#include <dolfin/LinearForm.h>
#include <dolfin/BilinearForm.h>

namespace dolfin { namespace Elasticity {

/// This class contains the form to be evaluated, including
/// contributions from the interior and boundary of the domain.

class BilinearForm : public dolfin::BilinearForm
{
public:
    
  class TestElement : public dolfin::FiniteElement
  {
  public:

    TestElement() : dolfin::FiniteElement(), tensordims(0)
    {
      tensordims = new unsigned int [1];
      tensordims[0] = 3;
    }

    ~TestElement()
    {
      if ( tensordims ) delete [] tensordims;
    }

    inline unsigned int spacedim() const
    {
      return 12;
    }

    inline unsigned int shapedim() const
    {
      return 3;
    }

    inline unsigned int tensordim(unsigned int i) const
    {
      dolfin_assert(i < 1);
      return tensordims[i];
    }

    inline unsigned int rank() const
    {
      return 1;
    }

    void dofmap(int dofs[], const Cell& cell, const Mesh& mesh) const
    {
      dofs[0] = cell.nodeID(0);
      dofs[1] = cell.nodeID(1);
      dofs[2] = cell.nodeID(2);
      dofs[3] = cell.nodeID(3);
      int offset = mesh.noNodes();
      dofs[4] = offset + cell.nodeID(0);
      dofs[5] = offset + cell.nodeID(1);
      dofs[6] = offset + cell.nodeID(2);
      dofs[7] = offset + cell.nodeID(3);
      offset = offset + mesh.noNodes();
      dofs[8] = offset + cell.nodeID(0);
      dofs[9] = offset + cell.nodeID(1);
      dofs[10] = offset + cell.nodeID(2);
      dofs[11] = offset + cell.nodeID(3);
    }

    void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
    {
      points[0] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
      points[1] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
      points[2] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
      points[3] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
      points[4] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
      points[5] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
      points[6] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
      points[7] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
      points[8] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
      points[9] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
      points[10] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
      points[11] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
      components[0] = 0;
      components[1] = 0;
      components[2] = 0;
      components[3] = 0;
      components[4] = 1;
      components[5] = 1;
      components[6] = 1;
      components[7] = 1;
      components[8] = 2;
      components[9] = 2;
      components[10] = 2;
      components[11] = 2;
    }

  private:

    unsigned int* tensordims;

  };
    
  class TrialElement : public dolfin::FiniteElement
  {
  public:

    TrialElement() : dolfin::FiniteElement(), tensordims(0)
    {
      tensordims = new unsigned int [1];
      tensordims[0] = 3;
    }

    ~TrialElement()
    {
      if ( tensordims ) delete [] tensordims;
    }

    inline unsigned int spacedim() const
    {
      return 12;
    }

    inline unsigned int shapedim() const
    {
      return 3;
    }

    inline unsigned int tensordim(unsigned int i) const
    {
      dolfin_assert(i < 1);
      return tensordims[i];
    }

    inline unsigned int rank() const
    {
      return 1;
    }

    void dofmap(int dofs[], const Cell& cell, const Mesh& mesh) const
    {
      dofs[0] = cell.nodeID(0);
      dofs[1] = cell.nodeID(1);
      dofs[2] = cell.nodeID(2);
      dofs[3] = cell.nodeID(3);
      int offset = mesh.noNodes();
      dofs[4] = offset + cell.nodeID(0);
      dofs[5] = offset + cell.nodeID(1);
      dofs[6] = offset + cell.nodeID(2);
      dofs[7] = offset + cell.nodeID(3);
      offset = offset + mesh.noNodes();
      dofs[8] = offset + cell.nodeID(0);
      dofs[9] = offset + cell.nodeID(1);
      dofs[10] = offset + cell.nodeID(2);
      dofs[11] = offset + cell.nodeID(3);
    }

    void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
    {
      points[0] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
      points[1] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
      points[2] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
      points[3] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
      points[4] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
      points[5] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
      points[6] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
      points[7] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
      points[8] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
      points[9] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
      points[10] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
      points[11] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
      components[0] = 0;
      components[1] = 0;
      components[2] = 0;
      components[3] = 0;
      components[4] = 1;
      components[5] = 1;
      components[6] = 1;
      components[7] = 1;
      components[8] = 2;
      components[9] = 2;
      components[10] = 2;
      components[11] = 2;
    }

  private:

    unsigned int* tensordims;

  };

  BilinearForm(const real& c0, const real& c1) : dolfin::BilinearForm(0), c0(c0), c1(c1)
  {
    // Create finite element for test space
    _test = new TestElement();

    // Create finite element for trial space
    _trial = new TrialElement();
  }

  void eval(real block[], const AffineMap& map) const
  {
    // Compute geometry tensors
    real G0_0_0_0_0 = map.det*c0*map.g00*map.g00;
    real G0_0_0_0_1 = map.det*c0*map.g00*map.g10;
    real G0_0_0_0_2 = map.det*c0*map.g00*map.g20;
    real G0_0_0_1_0 = map.det*c0*map.g10*map.g00;
    real G0_0_0_1_1 = map.det*c0*map.g10*map.g10;
    real G0_0_0_1_2 = map.det*c0*map.g10*map.g20;
    real G0_0_0_2_0 = map.det*c0*map.g20*map.g00;
    real G0_0_0_2_1 = map.det*c0*map.g20*map.g10;
    real G0_0_0_2_2 = map.det*c0*map.g20*map.g20;
    real G0_0_1_0_0 = map.det*c0*map.g00*map.g01;
    real G0_0_1_0_1 = map.det*c0*map.g00*map.g11;
    real G0_0_1_0_2 = map.det*c0*map.g00*map.g21;
    real G0_0_1_1_0 = map.det*c0*map.g10*map.g01;
    real G0_0_1_1_1 = map.det*c0*map.g10*map.g11;
    real G0_0_1_1_2 = map.det*c0*map.g10*map.g21;
    real G0_0_1_2_0 = map.det*c0*map.g20*map.g01;
    real G0_0_1_2_1 = map.det*c0*map.g20*map.g11;
    real G0_0_1_2_2 = map.det*c0*map.g20*map.g21;
    real G0_0_2_0_0 = map.det*c0*map.g00*map.g02;
    real G0_0_2_0_1 = map.det*c0*map.g00*map.g12;
    real G0_0_2_0_2 = map.det*c0*map.g00*map.g22;
    real G0_0_2_1_0 = map.det*c0*map.g10*map.g02;
    real G0_0_2_1_1 = map.det*c0*map.g10*map.g12;
    real G0_0_2_1_2 = map.det*c0*map.g10*map.g22;
    real G0_0_2_2_0 = map.det*c0*map.g20*map.g02;
    real G0_0_2_2_1 = map.det*c0*map.g20*map.g12;
    real G0_0_2_2_2 = map.det*c0*map.g20*map.g22;
    real G0_1_0_0_0 = map.det*c0*map.g01*map.g00;
    real G0_1_0_0_1 = map.det*c0*map.g01*map.g10;
    real G0_1_0_0_2 = map.det*c0*map.g01*map.g20;
    real G0_1_0_1_0 = map.det*c0*map.g11*map.g00;
    real G0_1_0_1_1 = map.det*c0*map.g11*map.g10;
    real G0_1_0_1_2 = map.det*c0*map.g11*map.g20;
    real G0_1_0_2_0 = map.det*c0*map.g21*map.g00;
    real G0_1_0_2_1 = map.det*c0*map.g21*map.g10;
    real G0_1_0_2_2 = map.det*c0*map.g21*map.g20;
    real G0_1_1_0_0 = map.det*c0*map.g01*map.g01;
    real G0_1_1_0_1 = map.det*c0*map.g01*map.g11;
    real G0_1_1_0_2 = map.det*c0*map.g01*map.g21;
    real G0_1_1_1_0 = map.det*c0*map.g11*map.g01;
    real G0_1_1_1_1 = map.det*c0*map.g11*map.g11;
    real G0_1_1_1_2 = map.det*c0*map.g11*map.g21;
    real G0_1_1_2_0 = map.det*c0*map.g21*map.g01;
    real G0_1_1_2_1 = map.det*c0*map.g21*map.g11;
    real G0_1_1_2_2 = map.det*c0*map.g21*map.g21;
    real G0_1_2_0_0 = map.det*c0*map.g01*map.g02;
    real G0_1_2_0_1 = map.det*c0*map.g01*map.g12;
    real G0_1_2_0_2 = map.det*c0*map.g01*map.g22;
    real G0_1_2_1_0 = map.det*c0*map.g11*map.g02;
    real G0_1_2_1_1 = map.det*c0*map.g11*map.g12;
    real G0_1_2_1_2 = map.det*c0*map.g11*map.g22;
    real G0_1_2_2_0 = map.det*c0*map.g21*map.g02;
    real G0_1_2_2_1 = map.det*c0*map.g21*map.g12;
    real G0_1_2_2_2 = map.det*c0*map.g21*map.g22;
    real G0_2_0_0_0 = map.det*c0*map.g02*map.g00;
    real G0_2_0_0_1 = map.det*c0*map.g02*map.g10;
    real G0_2_0_0_2 = map.det*c0*map.g02*map.g20;
    real G0_2_0_1_0 = map.det*c0*map.g12*map.g00;
    real G0_2_0_1_1 = map.det*c0*map.g12*map.g10;
    real G0_2_0_1_2 = map.det*c0*map.g12*map.g20;
    real G0_2_0_2_0 = map.det*c0*map.g22*map.g00;
    real G0_2_0_2_1 = map.det*c0*map.g22*map.g10;
    real G0_2_0_2_2 = map.det*c0*map.g22*map.g20;
    real G0_2_1_0_0 = map.det*c0*map.g02*map.g01;
    real G0_2_1_0_1 = map.det*c0*map.g02*map.g11;
    real G0_2_1_0_2 = map.det*c0*map.g02*map.g21;
    real G0_2_1_1_0 = map.det*c0*map.g12*map.g01;
    real G0_2_1_1_1 = map.det*c0*map.g12*map.g11;
    real G0_2_1_1_2 = map.det*c0*map.g12*map.g21;
    real G0_2_1_2_0 = map.det*c0*map.g22*map.g01;
    real G0_2_1_2_1 = map.det*c0*map.g22*map.g11;
    real G0_2_1_2_2 = map.det*c0*map.g22*map.g21;
    real G0_2_2_0_0 = map.det*c0*map.g02*map.g02;
    real G0_2_2_0_1 = map.det*c0*map.g02*map.g12;
    real G0_2_2_0_2 = map.det*c0*map.g02*map.g22;
    real G0_2_2_1_0 = map.det*c0*map.g12*map.g02;
    real G0_2_2_1_1 = map.det*c0*map.g12*map.g12;
    real G0_2_2_1_2 = map.det*c0*map.g12*map.g22;
    real G0_2_2_2_0 = map.det*c0*map.g22*map.g02;
    real G0_2_2_2_1 = map.det*c0*map.g22*map.g12;
    real G0_2_2_2_2 = map.det*c0*map.g22*map.g22;
    real G1_0_0 = map.det*c1*(map.g00*map.g00 + map.g01*map.g01 + map.g02*map.g02);
    real G1_0_1 = map.det*c1*(map.g00*map.g10 + map.g01*map.g11 + map.g02*map.g12);
    real G1_0_2 = map.det*c1*(map.g00*map.g20 + map.g01*map.g21 + map.g02*map.g22);
    real G1_1_0 = map.det*c1*(map.g10*map.g00 + map.g11*map.g01 + map.g12*map.g02);
    real G1_1_1 = map.det*c1*(map.g10*map.g10 + map.g11*map.g11 + map.g12*map.g12);
    real G1_1_2 = map.det*c1*(map.g10*map.g20 + map.g11*map.g21 + map.g12*map.g22);
    real G1_2_0 = map.det*c1*(map.g20*map.g00 + map.g21*map.g01 + map.g22*map.g02);
    real G1_2_1 = map.det*c1*(map.g20*map.g10 + map.g21*map.g11 + map.g22*map.g12);
    real G1_2_2 = map.det*c1*(map.g20*map.g20 + map.g21*map.g21 + map.g22*map.g22);
    real G2_0_0_0_0 = map.det*c1*map.g00*map.g00;
    real G2_0_0_0_1 = map.det*c1*map.g00*map.g10;
    real G2_0_0_0_2 = map.det*c1*map.g00*map.g20;
    real G2_0_0_1_0 = map.det*c1*map.g10*map.g00;
    real G2_0_0_1_1 = map.det*c1*map.g10*map.g10;
    real G2_0_0_1_2 = map.det*c1*map.g10*map.g20;
    real G2_0_0_2_0 = map.det*c1*map.g20*map.g00;
    real G2_0_0_2_1 = map.det*c1*map.g20*map.g10;
    real G2_0_0_2_2 = map.det*c1*map.g20*map.g20;
    real G2_0_1_0_0 = map.det*c1*map.g00*map.g01;
    real G2_0_1_0_1 = map.det*c1*map.g00*map.g11;
    real G2_0_1_0_2 = map.det*c1*map.g00*map.g21;
    real G2_0_1_1_0 = map.det*c1*map.g10*map.g01;
    real G2_0_1_1_1 = map.det*c1*map.g10*map.g11;
    real G2_0_1_1_2 = map.det*c1*map.g10*map.g21;
    real G2_0_1_2_0 = map.det*c1*map.g20*map.g01;
    real G2_0_1_2_1 = map.det*c1*map.g20*map.g11;
    real G2_0_1_2_2 = map.det*c1*map.g20*map.g21;
    real G2_0_2_0_0 = map.det*c1*map.g00*map.g02;
    real G2_0_2_0_1 = map.det*c1*map.g00*map.g12;
    real G2_0_2_0_2 = map.det*c1*map.g00*map.g22;
    real G2_0_2_1_0 = map.det*c1*map.g10*map.g02;
    real G2_0_2_1_1 = map.det*c1*map.g10*map.g12;
    real G2_0_2_1_2 = map.det*c1*map.g10*map.g22;
    real G2_0_2_2_0 = map.det*c1*map.g20*map.g02;
    real G2_0_2_2_1 = map.det*c1*map.g20*map.g12;
    real G2_0_2_2_2 = map.det*c1*map.g20*map.g22;
    real G2_1_0_0_0 = map.det*c1*map.g01*map.g00;
    real G2_1_0_0_1 = map.det*c1*map.g01*map.g10;
    real G2_1_0_0_2 = map.det*c1*map.g01*map.g20;
    real G2_1_0_1_0 = map.det*c1*map.g11*map.g00;
    real G2_1_0_1_1 = map.det*c1*map.g11*map.g10;
    real G2_1_0_1_2 = map.det*c1*map.g11*map.g20;
    real G2_1_0_2_0 = map.det*c1*map.g21*map.g00;
    real G2_1_0_2_1 = map.det*c1*map.g21*map.g10;
    real G2_1_0_2_2 = map.det*c1*map.g21*map.g20;
    real G2_1_1_0_0 = map.det*c1*map.g01*map.g01;
    real G2_1_1_0_1 = map.det*c1*map.g01*map.g11;
    real G2_1_1_0_2 = map.det*c1*map.g01*map.g21;
    real G2_1_1_1_0 = map.det*c1*map.g11*map.g01;
    real G2_1_1_1_1 = map.det*c1*map.g11*map.g11;
    real G2_1_1_1_2 = map.det*c1*map.g11*map.g21;
    real G2_1_1_2_0 = map.det*c1*map.g21*map.g01;
    real G2_1_1_2_1 = map.det*c1*map.g21*map.g11;
    real G2_1_1_2_2 = map.det*c1*map.g21*map.g21;
    real G2_1_2_0_0 = map.det*c1*map.g01*map.g02;
    real G2_1_2_0_1 = map.det*c1*map.g01*map.g12;
    real G2_1_2_0_2 = map.det*c1*map.g01*map.g22;
    real G2_1_2_1_0 = map.det*c1*map.g11*map.g02;
    real G2_1_2_1_1 = map.det*c1*map.g11*map.g12;
    real G2_1_2_1_2 = map.det*c1*map.g11*map.g22;
    real G2_1_2_2_0 = map.det*c1*map.g21*map.g02;
    real G2_1_2_2_1 = map.det*c1*map.g21*map.g12;
    real G2_1_2_2_2 = map.det*c1*map.g21*map.g22;
    real G2_2_0_0_0 = map.det*c1*map.g02*map.g00;
    real G2_2_0_0_1 = map.det*c1*map.g02*map.g10;
    real G2_2_0_0_2 = map.det*c1*map.g02*map.g20;
    real G2_2_0_1_0 = map.det*c1*map.g12*map.g00;
    real G2_2_0_1_1 = map.det*c1*map.g12*map.g10;
    real G2_2_0_1_2 = map.det*c1*map.g12*map.g20;
    real G2_2_0_2_0 = map.det*c1*map.g22*map.g00;
    real G2_2_0_2_1 = map.det*c1*map.g22*map.g10;
    real G2_2_0_2_2 = map.det*c1*map.g22*map.g20;
    real G2_2_1_0_0 = map.det*c1*map.g02*map.g01;
    real G2_2_1_0_1 = map.det*c1*map.g02*map.g11;
    real G2_2_1_0_2 = map.det*c1*map.g02*map.g21;
    real G2_2_1_1_0 = map.det*c1*map.g12*map.g01;
    real G2_2_1_1_1 = map.det*c1*map.g12*map.g11;
    real G2_2_1_1_2 = map.det*c1*map.g12*map.g21;
    real G2_2_1_2_0 = map.det*c1*map.g22*map.g01;
    real G2_2_1_2_1 = map.det*c1*map.g22*map.g11;
    real G2_2_1_2_2 = map.det*c1*map.g22*map.g21;
    real G2_2_2_0_0 = map.det*c1*map.g02*map.g02;
    real G2_2_2_0_1 = map.det*c1*map.g02*map.g12;
    real G2_2_2_0_2 = map.det*c1*map.g02*map.g22;
    real G2_2_2_1_0 = map.det*c1*map.g12*map.g02;
    real G2_2_2_1_1 = map.det*c1*map.g12*map.g12;
    real G2_2_2_1_2 = map.det*c1*map.g12*map.g22;
    real G2_2_2_2_0 = map.det*c1*map.g22*map.g02;
    real G2_2_2_2_1 = map.det*c1*map.g22*map.g12;
    real G2_2_2_2_2 = map.det*c1*map.g22*map.g22;

    // Compute element tensor
    block[0] = 1.666666666666665e-01*G0_0_0_0_0 + 1.666666666666665e-01*G0_0_0_0_1 + 1.666666666666664e-01*G0_0_0_0_2 + 1.666666666666665e-01*G0_0_0_1_0 + 1.666666666666665e-01*G0_0_0_1_1 + 1.666666666666664e-01*G0_0_0_1_2 + 1.666666666666664e-01*G0_0_0_2_0 + 1.666666666666664e-01*G0_0_0_2_1 + 1.666666666666664e-01*G0_0_0_2_2 + 1.666666666666665e-01*G1_0_0 + 1.666666666666665e-01*G1_0_1 + 1.666666666666664e-01*G1_0_2 + 1.666666666666665e-01*G1_1_0 + 1.666666666666665e-01*G1_1_1 + 1.666666666666664e-01*G1_1_2 + 1.666666666666664e-01*G1_2_0 + 1.666666666666664e-01*G1_2_1 + 1.666666666666664e-01*G1_2_2 + 1.666666666666665e-01*G2_0_0_0_0 + 1.666666666666665e-01*G2_0_0_0_1 + 1.666666666666664e-01*G2_0_0_0_2 + 1.666666666666665e-01*G2_0_0_1_0 + 1.666666666666665e-01*G2_0_0_1_1 + 1.666666666666664e-01*G2_0_0_1_2 + 1.666666666666664e-01*G2_0_0_2_0 + 1.666666666666664e-01*G2_0_0_2_1 + 1.666666666666664e-01*G2_0_0_2_2;
    block[1] = -1.666666666666665e-01*G0_0_0_0_0 - 1.666666666666665e-01*G0_0_0_0_1 - 1.666666666666664e-01*G0_0_0_0_2 - 1.666666666666665e-01*G1_0_0 - 1.666666666666665e-01*G1_0_1 - 1.666666666666664e-01*G1_0_2 - 1.666666666666665e-01*G2_0_0_0_0 - 1.666666666666665e-01*G2_0_0_0_1 - 1.666666666666664e-01*G2_0_0_0_2;
    block[2] = -1.666666666666665e-01*G0_0_0_1_0 - 1.666666666666665e-01*G0_0_0_1_1 - 1.666666666666664e-01*G0_0_0_1_2 - 1.666666666666665e-01*G1_1_0 - 1.666666666666665e-01*G1_1_1 - 1.666666666666664e-01*G1_1_2 - 1.666666666666665e-01*G2_0_0_1_0 - 1.666666666666665e-01*G2_0_0_1_1 - 1.666666666666664e-01*G2_0_0_1_2;
    block[3] = -1.666666666666665e-01*G0_0_0_2_0 - 1.666666666666665e-01*G0_0_0_2_1 - 1.666666666666664e-01*G0_0_0_2_2 - 1.666666666666665e-01*G1_2_0 - 1.666666666666665e-01*G1_2_1 - 1.666666666666664e-01*G1_2_2 - 1.666666666666665e-01*G2_0_0_2_0 - 1.666666666666665e-01*G2_0_0_2_1 - 1.666666666666664e-01*G2_0_0_2_2;
    block[4] = 1.666666666666665e-01*G0_1_0_0_0 + 1.666666666666665e-01*G0_1_0_0_1 + 1.666666666666664e-01*G0_1_0_0_2 + 1.666666666666665e-01*G0_1_0_1_0 + 1.666666666666665e-01*G0_1_0_1_1 + 1.666666666666664e-01*G0_1_0_1_2 + 1.666666666666665e-01*G0_1_0_2_0 + 1.666666666666665e-01*G0_1_0_2_1 + 1.666666666666664e-01*G0_1_0_2_2 + 1.666666666666665e-01*G2_0_1_0_0 + 1.666666666666665e-01*G2_0_1_0_1 + 1.666666666666664e-01*G2_0_1_0_2 + 1.666666666666665e-01*G2_0_1_1_0 + 1.666666666666665e-01*G2_0_1_1_1 + 1.666666666666664e-01*G2_0_1_1_2 + 1.666666666666665e-01*G2_0_1_2_0 + 1.666666666666665e-01*G2_0_1_2_1 + 1.666666666666664e-01*G2_0_1_2_2;
    block[5] = -1.666666666666665e-01*G0_1_0_0_0 - 1.666666666666665e-01*G0_1_0_0_1 - 1.666666666666664e-01*G0_1_0_0_2 - 1.666666666666665e-01*G2_0_1_0_0 - 1.666666666666665e-01*G2_0_1_0_1 - 1.666666666666664e-01*G2_0_1_0_2;
    block[6] = -1.666666666666665e-01*G0_1_0_1_0 - 1.666666666666665e-01*G0_1_0_1_1 - 1.666666666666664e-01*G0_1_0_1_2 - 1.666666666666665e-01*G2_0_1_1_0 - 1.666666666666665e-01*G2_0_1_1_1 - 1.666666666666664e-01*G2_0_1_1_2;
    block[7] = -1.666666666666665e-01*G0_1_0_2_0 - 1.666666666666665e-01*G0_1_0_2_1 - 1.666666666666664e-01*G0_1_0_2_2 - 1.666666666666665e-01*G2_0_1_2_0 - 1.666666666666665e-01*G2_0_1_2_1 - 1.666666666666664e-01*G2_0_1_2_2;
    block[8] = 1.666666666666665e-01*G0_2_0_0_0 + 1.666666666666665e-01*G0_2_0_0_1 + 1.666666666666664e-01*G0_2_0_0_2 + 1.666666666666665e-01*G0_2_0_1_0 + 1.666666666666665e-01*G0_2_0_1_1 + 1.666666666666664e-01*G0_2_0_1_2 + 1.666666666666665e-01*G0_2_0_2_0 + 1.666666666666665e-01*G0_2_0_2_1 + 1.666666666666664e-01*G0_2_0_2_2 + 1.666666666666665e-01*G2_0_2_0_0 + 1.666666666666665e-01*G2_0_2_0_1 + 1.666666666666664e-01*G2_0_2_0_2 + 1.666666666666665e-01*G2_0_2_1_0 + 1.666666666666665e-01*G2_0_2_1_1 + 1.666666666666664e-01*G2_0_2_1_2 + 1.666666666666665e-01*G2_0_2_2_0 + 1.666666666666665e-01*G2_0_2_2_1 + 1.666666666666664e-01*G2_0_2_2_2;
    block[9] = -1.666666666666665e-01*G0_2_0_0_0 - 1.666666666666665e-01*G0_2_0_0_1 - 1.666666666666664e-01*G0_2_0_0_2 - 1.666666666666665e-01*G2_0_2_0_0 - 1.666666666666665e-01*G2_0_2_0_1 - 1.666666666666664e-01*G2_0_2_0_2;
    block[10] = -1.666666666666665e-01*G0_2_0_1_0 - 1.666666666666665e-01*G0_2_0_1_1 - 1.666666666666664e-01*G0_2_0_1_2 - 1.666666666666665e-01*G2_0_2_1_0 - 1.666666666666665e-01*G2_0_2_1_1 - 1.666666666666664e-01*G2_0_2_1_2;
    block[11] = -1.666666666666665e-01*G0_2_0_2_0 - 1.666666666666665e-01*G0_2_0_2_1 - 1.666666666666664e-01*G0_2_0_2_2 - 1.666666666666665e-01*G2_0_2_2_0 - 1.666666666666665e-01*G2_0_2_2_1 - 1.666666666666664e-01*G2_0_2_2_2;
    block[12] = -1.666666666666665e-01*G0_0_0_0_0 - 1.666666666666665e-01*G0_0_0_1_0 - 1.666666666666664e-01*G0_0_0_2_0 - 1.666666666666665e-01*G1_0_0 - 1.666666666666665e-01*G1_1_0 - 1.666666666666664e-01*G1_2_0 - 1.666666666666665e-01*G2_0_0_0_0 - 1.666666666666665e-01*G2_0_0_1_0 - 1.666666666666664e-01*G2_0_0_2_0;
    block[13] = 1.666666666666665e-01*G0_0_0_0_0 + 1.666666666666665e-01*G1_0_0 + 1.666666666666665e-01*G2_0_0_0_0;
    block[14] = 1.666666666666665e-01*G0_0_0_1_0 + 1.666666666666665e-01*G1_1_0 + 1.666666666666665e-01*G2_0_0_1_0;
    block[15] = 1.666666666666665e-01*G0_0_0_2_0 + 1.666666666666665e-01*G1_2_0 + 1.666666666666665e-01*G2_0_0_2_0;
    block[16] = -1.666666666666665e-01*G0_1_0_0_0 - 1.666666666666665e-01*G0_1_0_1_0 - 1.666666666666665e-01*G0_1_0_2_0 - 1.666666666666665e-01*G2_0_1_0_0 - 1.666666666666665e-01*G2_0_1_1_0 - 1.666666666666665e-01*G2_0_1_2_0;
    block[17] = 1.666666666666665e-01*G0_1_0_0_0 + 1.666666666666665e-01*G2_0_1_0_0;
    block[18] = 1.666666666666665e-01*G0_1_0_1_0 + 1.666666666666665e-01*G2_0_1_1_0;
    block[19] = 1.666666666666665e-01*G0_1_0_2_0 + 1.666666666666665e-01*G2_0_1_2_0;
    block[20] = -1.666666666666665e-01*G0_2_0_0_0 - 1.666666666666665e-01*G0_2_0_1_0 - 1.666666666666665e-01*G0_2_0_2_0 - 1.666666666666665e-01*G2_0_2_0_0 - 1.666666666666665e-01*G2_0_2_1_0 - 1.666666666666665e-01*G2_0_2_2_0;
    block[21] = 1.666666666666665e-01*G0_2_0_0_0 + 1.666666666666665e-01*G2_0_2_0_0;
    block[22] = 1.666666666666665e-01*G0_2_0_1_0 + 1.666666666666665e-01*G2_0_2_1_0;
    block[23] = 1.666666666666665e-01*G0_2_0_2_0 + 1.666666666666665e-01*G2_0_2_2_0;
    block[24] = -1.666666666666665e-01*G0_0_0_0_1 - 1.666666666666665e-01*G0_0_0_1_1 - 1.666666666666664e-01*G0_0_0_2_1 - 1.666666666666665e-01*G1_0_1 - 1.666666666666665e-01*G1_1_1 - 1.666666666666664e-01*G1_2_1 - 1.666666666666665e-01*G2_0_0_0_1 - 1.666666666666665e-01*G2_0_0_1_1 - 1.666666666666664e-01*G2_0_0_2_1;
    block[25] = 1.666666666666665e-01*G0_0_0_0_1 + 1.666666666666665e-01*G1_0_1 + 1.666666666666665e-01*G2_0_0_0_1;
    block[26] = 1.666666666666665e-01*G0_0_0_1_1 + 1.666666666666665e-01*G1_1_1 + 1.666666666666665e-01*G2_0_0_1_1;
    block[27] = 1.666666666666665e-01*G0_0_0_2_1 + 1.666666666666665e-01*G1_2_1 + 1.666666666666665e-01*G2_0_0_2_1;
    block[28] = -1.666666666666665e-01*G0_1_0_0_1 - 1.666666666666665e-01*G0_1_0_1_1 - 1.666666666666665e-01*G0_1_0_2_1 - 1.666666666666665e-01*G2_0_1_0_1 - 1.666666666666665e-01*G2_0_1_1_1 - 1.666666666666665e-01*G2_0_1_2_1;
    block[29] = 1.666666666666665e-01*G0_1_0_0_1 + 1.666666666666665e-01*G2_0_1_0_1;
    block[30] = 1.666666666666665e-01*G0_1_0_1_1 + 1.666666666666665e-01*G2_0_1_1_1;
    block[31] = 1.666666666666665e-01*G0_1_0_2_1 + 1.666666666666665e-01*G2_0_1_2_1;
    block[32] = -1.666666666666665e-01*G0_2_0_0_1 - 1.666666666666665e-01*G0_2_0_1_1 - 1.666666666666665e-01*G0_2_0_2_1 - 1.666666666666665e-01*G2_0_2_0_1 - 1.666666666666665e-01*G2_0_2_1_1 - 1.666666666666665e-01*G2_0_2_2_1;
    block[33] = 1.666666666666665e-01*G0_2_0_0_1 + 1.666666666666665e-01*G2_0_2_0_1;
    block[34] = 1.666666666666665e-01*G0_2_0_1_1 + 1.666666666666665e-01*G2_0_2_1_1;
    block[35] = 1.666666666666665e-01*G0_2_0_2_1 + 1.666666666666665e-01*G2_0_2_2_1;
    block[36] = -1.666666666666665e-01*G0_0_0_0_2 - 1.666666666666665e-01*G0_0_0_1_2 - 1.666666666666664e-01*G0_0_0_2_2 - 1.666666666666665e-01*G1_0_2 - 1.666666666666665e-01*G1_1_2 - 1.666666666666664e-01*G1_2_2 - 1.666666666666665e-01*G2_0_0_0_2 - 1.666666666666665e-01*G2_0_0_1_2 - 1.666666666666664e-01*G2_0_0_2_2;
    block[37] = 1.666666666666665e-01*G0_0_0_0_2 + 1.666666666666665e-01*G1_0_2 + 1.666666666666665e-01*G2_0_0_0_2;
    block[38] = 1.666666666666665e-01*G0_0_0_1_2 + 1.666666666666665e-01*G1_1_2 + 1.666666666666665e-01*G2_0_0_1_2;
    block[39] = 1.666666666666665e-01*G0_0_0_2_2 + 1.666666666666665e-01*G1_2_2 + 1.666666666666665e-01*G2_0_0_2_2;
    block[40] = -1.666666666666665e-01*G0_1_0_0_2 - 1.666666666666665e-01*G0_1_0_1_2 - 1.666666666666665e-01*G0_1_0_2_2 - 1.666666666666665e-01*G2_0_1_0_2 - 1.666666666666665e-01*G2_0_1_1_2 - 1.666666666666665e-01*G2_0_1_2_2;
    block[41] = 1.666666666666665e-01*G0_1_0_0_2 + 1.666666666666665e-01*G2_0_1_0_2;
    block[42] = 1.666666666666665e-01*G0_1_0_1_2 + 1.666666666666665e-01*G2_0_1_1_2;
    block[43] = 1.666666666666665e-01*G0_1_0_2_2 + 1.666666666666665e-01*G2_0_1_2_2;
    block[44] = -1.666666666666665e-01*G0_2_0_0_2 - 1.666666666666665e-01*G0_2_0_1_2 - 1.666666666666665e-01*G0_2_0_2_2 - 1.666666666666665e-01*G2_0_2_0_2 - 1.666666666666665e-01*G2_0_2_1_2 - 1.666666666666665e-01*G2_0_2_2_2;
    block[45] = 1.666666666666665e-01*G0_2_0_0_2 + 1.666666666666665e-01*G2_0_2_0_2;
    block[46] = 1.666666666666665e-01*G0_2_0_1_2 + 1.666666666666665e-01*G2_0_2_1_2;
    block[47] = 1.666666666666665e-01*G0_2_0_2_2 + 1.666666666666665e-01*G2_0_2_2_2;
    block[48] = 1.666666666666665e-01*G0_0_1_0_0 + 1.666666666666665e-01*G0_0_1_0_1 + 1.666666666666665e-01*G0_0_1_0_2 + 1.666666666666665e-01*G0_0_1_1_0 + 1.666666666666665e-01*G0_0_1_1_1 + 1.666666666666665e-01*G0_0_1_1_2 + 1.666666666666664e-01*G0_0_1_2_0 + 1.666666666666664e-01*G0_0_1_2_1 + 1.666666666666664e-01*G0_0_1_2_2 + 1.666666666666665e-01*G2_1_0_0_0 + 1.666666666666665e-01*G2_1_0_0_1 + 1.666666666666665e-01*G2_1_0_0_2 + 1.666666666666665e-01*G2_1_0_1_0 + 1.666666666666665e-01*G2_1_0_1_1 + 1.666666666666665e-01*G2_1_0_1_2 + 1.666666666666664e-01*G2_1_0_2_0 + 1.666666666666664e-01*G2_1_0_2_1 + 1.666666666666664e-01*G2_1_0_2_2;
    block[49] = -1.666666666666665e-01*G0_0_1_0_0 - 1.666666666666665e-01*G0_0_1_0_1 - 1.666666666666665e-01*G0_0_1_0_2 - 1.666666666666665e-01*G2_1_0_0_0 - 1.666666666666665e-01*G2_1_0_0_1 - 1.666666666666665e-01*G2_1_0_0_2;
    block[50] = -1.666666666666665e-01*G0_0_1_1_0 - 1.666666666666665e-01*G0_0_1_1_1 - 1.666666666666665e-01*G0_0_1_1_2 - 1.666666666666665e-01*G2_1_0_1_0 - 1.666666666666665e-01*G2_1_0_1_1 - 1.666666666666665e-01*G2_1_0_1_2;
    block[51] = -1.666666666666665e-01*G0_0_1_2_0 - 1.666666666666665e-01*G0_0_1_2_1 - 1.666666666666665e-01*G0_0_1_2_2 - 1.666666666666665e-01*G2_1_0_2_0 - 1.666666666666665e-01*G2_1_0_2_1 - 1.666666666666665e-01*G2_1_0_2_2;
    block[52] = 1.666666666666665e-01*G0_1_1_0_0 + 1.666666666666665e-01*G0_1_1_0_1 + 1.666666666666665e-01*G0_1_1_0_2 + 1.666666666666665e-01*G0_1_1_1_0 + 1.666666666666665e-01*G0_1_1_1_1 + 1.666666666666665e-01*G0_1_1_1_2 + 1.666666666666665e-01*G0_1_1_2_0 + 1.666666666666665e-01*G0_1_1_2_1 + 1.666666666666665e-01*G0_1_1_2_2 + 1.666666666666665e-01*G1_0_0 + 1.666666666666665e-01*G1_0_1 + 1.666666666666665e-01*G1_0_2 + 1.666666666666665e-01*G1_1_0 + 1.666666666666665e-01*G1_1_1 + 1.666666666666665e-01*G1_1_2 + 1.666666666666665e-01*G1_2_0 + 1.666666666666665e-01*G1_2_1 + 1.666666666666665e-01*G1_2_2 + 1.666666666666665e-01*G2_1_1_0_0 + 1.666666666666665e-01*G2_1_1_0_1 + 1.666666666666665e-01*G2_1_1_0_2 + 1.666666666666665e-01*G2_1_1_1_0 + 1.666666666666665e-01*G2_1_1_1_1 + 1.666666666666665e-01*G2_1_1_1_2 + 1.666666666666665e-01*G2_1_1_2_0 + 1.666666666666665e-01*G2_1_1_2_1 + 1.666666666666665e-01*G2_1_1_2_2;
    block[53] = -1.666666666666665e-01*G0_1_1_0_0 - 1.666666666666665e-01*G0_1_1_0_1 - 1.666666666666665e-01*G0_1_1_0_2 - 1.666666666666665e-01*G1_0_0 - 1.666666666666665e-01*G1_0_1 - 1.666666666666665e-01*G1_0_2 - 1.666666666666665e-01*G2_1_1_0_0 - 1.666666666666665e-01*G2_1_1_0_1 - 1.666666666666665e-01*G2_1_1_0_2;
    block[54] = -1.666666666666665e-01*G0_1_1_1_0 - 1.666666666666665e-01*G0_1_1_1_1 - 1.666666666666665e-01*G0_1_1_1_2 - 1.666666666666665e-01*G1_1_0 - 1.666666666666665e-01*G1_1_1 - 1.666666666666665e-01*G1_1_2 - 1.666666666666665e-01*G2_1_1_1_0 - 1.666666666666665e-01*G2_1_1_1_1 - 1.666666666666665e-01*G2_1_1_1_2;
    block[55] = -1.666666666666665e-01*G0_1_1_2_0 - 1.666666666666665e-01*G0_1_1_2_1 - 1.666666666666665e-01*G0_1_1_2_2 - 1.666666666666665e-01*G1_2_0 - 1.666666666666665e-01*G1_2_1 - 1.666666666666665e-01*G1_2_2 - 1.666666666666665e-01*G2_1_1_2_0 - 1.666666666666665e-01*G2_1_1_2_1 - 1.666666666666665e-01*G2_1_1_2_2;
    block[56] = 1.666666666666665e-01*G0_2_1_0_0 + 1.666666666666665e-01*G0_2_1_0_1 + 1.666666666666665e-01*G0_2_1_0_2 + 1.666666666666665e-01*G0_2_1_1_0 + 1.666666666666665e-01*G0_2_1_1_1 + 1.666666666666665e-01*G0_2_1_1_2 + 1.666666666666665e-01*G0_2_1_2_0 + 1.666666666666665e-01*G0_2_1_2_1 + 1.666666666666665e-01*G0_2_1_2_2 + 1.666666666666665e-01*G2_1_2_0_0 + 1.666666666666665e-01*G2_1_2_0_1 + 1.666666666666665e-01*G2_1_2_0_2 + 1.666666666666665e-01*G2_1_2_1_0 + 1.666666666666665e-01*G2_1_2_1_1 + 1.666666666666665e-01*G2_1_2_1_2 + 1.666666666666665e-01*G2_1_2_2_0 + 1.666666666666665e-01*G2_1_2_2_1 + 1.666666666666665e-01*G2_1_2_2_2;
    block[57] = -1.666666666666665e-01*G0_2_1_0_0 - 1.666666666666665e-01*G0_2_1_0_1 - 1.666666666666665e-01*G0_2_1_0_2 - 1.666666666666665e-01*G2_1_2_0_0 - 1.666666666666665e-01*G2_1_2_0_1 - 1.666666666666665e-01*G2_1_2_0_2;
    block[58] = -1.666666666666665e-01*G0_2_1_1_0 - 1.666666666666665e-01*G0_2_1_1_1 - 1.666666666666665e-01*G0_2_1_1_2 - 1.666666666666665e-01*G2_1_2_1_0 - 1.666666666666665e-01*G2_1_2_1_1 - 1.666666666666665e-01*G2_1_2_1_2;
    block[59] = -1.666666666666665e-01*G0_2_1_2_0 - 1.666666666666665e-01*G0_2_1_2_1 - 1.666666666666665e-01*G0_2_1_2_2 - 1.666666666666665e-01*G2_1_2_2_0 - 1.666666666666665e-01*G2_1_2_2_1 - 1.666666666666665e-01*G2_1_2_2_2;
    block[60] = -1.666666666666665e-01*G0_0_1_0_0 - 1.666666666666665e-01*G0_0_1_1_0 - 1.666666666666664e-01*G0_0_1_2_0 - 1.666666666666665e-01*G2_1_0_0_0 - 1.666666666666665e-01*G2_1_0_1_0 - 1.666666666666664e-01*G2_1_0_2_0;
    block[61] = 1.666666666666665e-01*G0_0_1_0_0 + 1.666666666666665e-01*G2_1_0_0_0;
    block[62] = 1.666666666666665e-01*G0_0_1_1_0 + 1.666666666666665e-01*G2_1_0_1_0;
    block[63] = 1.666666666666665e-01*G0_0_1_2_0 + 1.666666666666665e-01*G2_1_0_2_0;
    block[64] = -1.666666666666665e-01*G0_1_1_0_0 - 1.666666666666665e-01*G0_1_1_1_0 - 1.666666666666665e-01*G0_1_1_2_0 - 1.666666666666665e-01*G1_0_0 - 1.666666666666665e-01*G1_1_0 - 1.666666666666665e-01*G1_2_0 - 1.666666666666665e-01*G2_1_1_0_0 - 1.666666666666665e-01*G2_1_1_1_0 - 1.666666666666665e-01*G2_1_1_2_0;
    block[65] = 1.666666666666665e-01*G0_1_1_0_0 + 1.666666666666665e-01*G1_0_0 + 1.666666666666665e-01*G2_1_1_0_0;
    block[66] = 1.666666666666665e-01*G0_1_1_1_0 + 1.666666666666665e-01*G1_1_0 + 1.666666666666665e-01*G2_1_1_1_0;
    block[67] = 1.666666666666665e-01*G0_1_1_2_0 + 1.666666666666665e-01*G1_2_0 + 1.666666666666665e-01*G2_1_1_2_0;
    block[68] = -1.666666666666665e-01*G0_2_1_0_0 - 1.666666666666665e-01*G0_2_1_1_0 - 1.666666666666665e-01*G0_2_1_2_0 - 1.666666666666665e-01*G2_1_2_0_0 - 1.666666666666665e-01*G2_1_2_1_0 - 1.666666666666665e-01*G2_1_2_2_0;
    block[69] = 1.666666666666665e-01*G0_2_1_0_0 + 1.666666666666665e-01*G2_1_2_0_0;
    block[70] = 1.666666666666665e-01*G0_2_1_1_0 + 1.666666666666665e-01*G2_1_2_1_0;
    block[71] = 1.666666666666665e-01*G0_2_1_2_0 + 1.666666666666665e-01*G2_1_2_2_0;
    block[72] = -1.666666666666665e-01*G0_0_1_0_1 - 1.666666666666665e-01*G0_0_1_1_1 - 1.666666666666664e-01*G0_0_1_2_1 - 1.666666666666665e-01*G2_1_0_0_1 - 1.666666666666665e-01*G2_1_0_1_1 - 1.666666666666664e-01*G2_1_0_2_1;
    block[73] = 1.666666666666665e-01*G0_0_1_0_1 + 1.666666666666665e-01*G2_1_0_0_1;
    block[74] = 1.666666666666665e-01*G0_0_1_1_1 + 1.666666666666665e-01*G2_1_0_1_1;
    block[75] = 1.666666666666665e-01*G0_0_1_2_1 + 1.666666666666665e-01*G2_1_0_2_1;
    block[76] = -1.666666666666665e-01*G0_1_1_0_1 - 1.666666666666665e-01*G0_1_1_1_1 - 1.666666666666665e-01*G0_1_1_2_1 - 1.666666666666665e-01*G1_0_1 - 1.666666666666665e-01*G1_1_1 - 1.666666666666665e-01*G1_2_1 - 1.666666666666665e-01*G2_1_1_0_1 - 1.666666666666665e-01*G2_1_1_1_1 - 1.666666666666665e-01*G2_1_1_2_1;
    block[77] = 1.666666666666665e-01*G0_1_1_0_1 + 1.666666666666665e-01*G1_0_1 + 1.666666666666665e-01*G2_1_1_0_1;
    block[78] = 1.666666666666665e-01*G0_1_1_1_1 + 1.666666666666665e-01*G1_1_1 + 1.666666666666665e-01*G2_1_1_1_1;
    block[79] = 1.666666666666665e-01*G0_1_1_2_1 + 1.666666666666665e-01*G1_2_1 + 1.666666666666665e-01*G2_1_1_2_1;
    block[80] = -1.666666666666665e-01*G0_2_1_0_1 - 1.666666666666665e-01*G0_2_1_1_1 - 1.666666666666665e-01*G0_2_1_2_1 - 1.666666666666665e-01*G2_1_2_0_1 - 1.666666666666665e-01*G2_1_2_1_1 - 1.666666666666665e-01*G2_1_2_2_1;
    block[81] = 1.666666666666665e-01*G0_2_1_0_1 + 1.666666666666665e-01*G2_1_2_0_1;
    block[82] = 1.666666666666665e-01*G0_2_1_1_1 + 1.666666666666665e-01*G2_1_2_1_1;
    block[83] = 1.666666666666665e-01*G0_2_1_2_1 + 1.666666666666665e-01*G2_1_2_2_1;
    block[84] = -1.666666666666665e-01*G0_0_1_0_2 - 1.666666666666665e-01*G0_0_1_1_2 - 1.666666666666664e-01*G0_0_1_2_2 - 1.666666666666665e-01*G2_1_0_0_2 - 1.666666666666665e-01*G2_1_0_1_2 - 1.666666666666664e-01*G2_1_0_2_2;
    block[85] = 1.666666666666665e-01*G0_0_1_0_2 + 1.666666666666665e-01*G2_1_0_0_2;
    block[86] = 1.666666666666665e-01*G0_0_1_1_2 + 1.666666666666665e-01*G2_1_0_1_2;
    block[87] = 1.666666666666665e-01*G0_0_1_2_2 + 1.666666666666665e-01*G2_1_0_2_2;
    block[88] = -1.666666666666665e-01*G0_1_1_0_2 - 1.666666666666665e-01*G0_1_1_1_2 - 1.666666666666665e-01*G0_1_1_2_2 - 1.666666666666665e-01*G1_0_2 - 1.666666666666665e-01*G1_1_2 - 1.666666666666665e-01*G1_2_2 - 1.666666666666665e-01*G2_1_1_0_2 - 1.666666666666665e-01*G2_1_1_1_2 - 1.666666666666665e-01*G2_1_1_2_2;
    block[89] = 1.666666666666665e-01*G0_1_1_0_2 + 1.666666666666665e-01*G1_0_2 + 1.666666666666665e-01*G2_1_1_0_2;
    block[90] = 1.666666666666665e-01*G0_1_1_1_2 + 1.666666666666665e-01*G1_1_2 + 1.666666666666665e-01*G2_1_1_1_2;
    block[91] = 1.666666666666665e-01*G0_1_1_2_2 + 1.666666666666665e-01*G1_2_2 + 1.666666666666665e-01*G2_1_1_2_2;
    block[92] = -1.666666666666665e-01*G0_2_1_0_2 - 1.666666666666665e-01*G0_2_1_1_2 - 1.666666666666665e-01*G0_2_1_2_2 - 1.666666666666665e-01*G2_1_2_0_2 - 1.666666666666665e-01*G2_1_2_1_2 - 1.666666666666665e-01*G2_1_2_2_2;
    block[93] = 1.666666666666665e-01*G0_2_1_0_2 + 1.666666666666665e-01*G2_1_2_0_2;
    block[94] = 1.666666666666665e-01*G0_2_1_1_2 + 1.666666666666665e-01*G2_1_2_1_2;
    block[95] = 1.666666666666665e-01*G0_2_1_2_2 + 1.666666666666665e-01*G2_1_2_2_2;
    block[96] = 1.666666666666665e-01*G0_0_2_0_0 + 1.666666666666665e-01*G0_0_2_0_1 + 1.666666666666665e-01*G0_0_2_0_2 + 1.666666666666665e-01*G0_0_2_1_0 + 1.666666666666665e-01*G0_0_2_1_1 + 1.666666666666665e-01*G0_0_2_1_2 + 1.666666666666664e-01*G0_0_2_2_0 + 1.666666666666664e-01*G0_0_2_2_1 + 1.666666666666664e-01*G0_0_2_2_2 + 1.666666666666665e-01*G2_2_0_0_0 + 1.666666666666665e-01*G2_2_0_0_1 + 1.666666666666665e-01*G2_2_0_0_2 + 1.666666666666665e-01*G2_2_0_1_0 + 1.666666666666665e-01*G2_2_0_1_1 + 1.666666666666665e-01*G2_2_0_1_2 + 1.666666666666664e-01*G2_2_0_2_0 + 1.666666666666664e-01*G2_2_0_2_1 + 1.666666666666664e-01*G2_2_0_2_2;
    block[97] = -1.666666666666665e-01*G0_0_2_0_0 - 1.666666666666665e-01*G0_0_2_0_1 - 1.666666666666665e-01*G0_0_2_0_2 - 1.666666666666665e-01*G2_2_0_0_0 - 1.666666666666665e-01*G2_2_0_0_1 - 1.666666666666665e-01*G2_2_0_0_2;
    block[98] = -1.666666666666665e-01*G0_0_2_1_0 - 1.666666666666665e-01*G0_0_2_1_1 - 1.666666666666665e-01*G0_0_2_1_2 - 1.666666666666665e-01*G2_2_0_1_0 - 1.666666666666665e-01*G2_2_0_1_1 - 1.666666666666665e-01*G2_2_0_1_2;
    block[99] = -1.666666666666665e-01*G0_0_2_2_0 - 1.666666666666665e-01*G0_0_2_2_1 - 1.666666666666665e-01*G0_0_2_2_2 - 1.666666666666665e-01*G2_2_0_2_0 - 1.666666666666665e-01*G2_2_0_2_1 - 1.666666666666665e-01*G2_2_0_2_2;
    block[100] = 1.666666666666665e-01*G0_1_2_0_0 + 1.666666666666665e-01*G0_1_2_0_1 + 1.666666666666665e-01*G0_1_2_0_2 + 1.666666666666665e-01*G0_1_2_1_0 + 1.666666666666665e-01*G0_1_2_1_1 + 1.666666666666665e-01*G0_1_2_1_2 + 1.666666666666665e-01*G0_1_2_2_0 + 1.666666666666665e-01*G0_1_2_2_1 + 1.666666666666665e-01*G0_1_2_2_2 + 1.666666666666665e-01*G2_2_1_0_0 + 1.666666666666665e-01*G2_2_1_0_1 + 1.666666666666665e-01*G2_2_1_0_2 + 1.666666666666665e-01*G2_2_1_1_0 + 1.666666666666665e-01*G2_2_1_1_1 + 1.666666666666665e-01*G2_2_1_1_2 + 1.666666666666665e-01*G2_2_1_2_0 + 1.666666666666665e-01*G2_2_1_2_1 + 1.666666666666665e-01*G2_2_1_2_2;
    block[101] = -1.666666666666665e-01*G0_1_2_0_0 - 1.666666666666665e-01*G0_1_2_0_1 - 1.666666666666665e-01*G0_1_2_0_2 - 1.666666666666665e-01*G2_2_1_0_0 - 1.666666666666665e-01*G2_2_1_0_1 - 1.666666666666665e-01*G2_2_1_0_2;
    block[102] = -1.666666666666665e-01*G0_1_2_1_0 - 1.666666666666665e-01*G0_1_2_1_1 - 1.666666666666665e-01*G0_1_2_1_2 - 1.666666666666665e-01*G2_2_1_1_0 - 1.666666666666665e-01*G2_2_1_1_1 - 1.666666666666665e-01*G2_2_1_1_2;
    block[103] = -1.666666666666665e-01*G0_1_2_2_0 - 1.666666666666665e-01*G0_1_2_2_1 - 1.666666666666665e-01*G0_1_2_2_2 - 1.666666666666665e-01*G2_2_1_2_0 - 1.666666666666665e-01*G2_2_1_2_1 - 1.666666666666665e-01*G2_2_1_2_2;
    block[104] = 1.666666666666665e-01*G0_2_2_0_0 + 1.666666666666665e-01*G0_2_2_0_1 + 1.666666666666665e-01*G0_2_2_0_2 + 1.666666666666665e-01*G0_2_2_1_0 + 1.666666666666665e-01*G0_2_2_1_1 + 1.666666666666665e-01*G0_2_2_1_2 + 1.666666666666665e-01*G0_2_2_2_0 + 1.666666666666665e-01*G0_2_2_2_1 + 1.666666666666665e-01*G0_2_2_2_2 + 1.666666666666665e-01*G1_0_0 + 1.666666666666665e-01*G1_0_1 + 1.666666666666665e-01*G1_0_2 + 1.666666666666665e-01*G1_1_0 + 1.666666666666665e-01*G1_1_1 + 1.666666666666665e-01*G1_1_2 + 1.666666666666665e-01*G1_2_0 + 1.666666666666665e-01*G1_2_1 + 1.666666666666665e-01*G1_2_2 + 1.666666666666665e-01*G2_2_2_0_0 + 1.666666666666665e-01*G2_2_2_0_1 + 1.666666666666665e-01*G2_2_2_0_2 + 1.666666666666665e-01*G2_2_2_1_0 + 1.666666666666665e-01*G2_2_2_1_1 + 1.666666666666665e-01*G2_2_2_1_2 + 1.666666666666665e-01*G2_2_2_2_0 + 1.666666666666665e-01*G2_2_2_2_1 + 1.666666666666665e-01*G2_2_2_2_2;
    block[105] = -1.666666666666665e-01*G0_2_2_0_0 - 1.666666666666665e-01*G0_2_2_0_1 - 1.666666666666665e-01*G0_2_2_0_2 - 1.666666666666665e-01*G1_0_0 - 1.666666666666665e-01*G1_0_1 - 1.666666666666665e-01*G1_0_2 - 1.666666666666665e-01*G2_2_2_0_0 - 1.666666666666665e-01*G2_2_2_0_1 - 1.666666666666665e-01*G2_2_2_0_2;
    block[106] = -1.666666666666665e-01*G0_2_2_1_0 - 1.666666666666665e-01*G0_2_2_1_1 - 1.666666666666665e-01*G0_2_2_1_2 - 1.666666666666665e-01*G1_1_0 - 1.666666666666665e-01*G1_1_1 - 1.666666666666665e-01*G1_1_2 - 1.666666666666665e-01*G2_2_2_1_0 - 1.666666666666665e-01*G2_2_2_1_1 - 1.666666666666665e-01*G2_2_2_1_2;
    block[107] = -1.666666666666665e-01*G0_2_2_2_0 - 1.666666666666665e-01*G0_2_2_2_1 - 1.666666666666665e-01*G0_2_2_2_2 - 1.666666666666665e-01*G1_2_0 - 1.666666666666665e-01*G1_2_1 - 1.666666666666665e-01*G1_2_2 - 1.666666666666665e-01*G2_2_2_2_0 - 1.666666666666665e-01*G2_2_2_2_1 - 1.666666666666665e-01*G2_2_2_2_2;
    block[108] = -1.666666666666665e-01*G0_0_2_0_0 - 1.666666666666665e-01*G0_0_2_1_0 - 1.666666666666664e-01*G0_0_2_2_0 - 1.666666666666665e-01*G2_2_0_0_0 - 1.666666666666665e-01*G2_2_0_1_0 - 1.666666666666664e-01*G2_2_0_2_0;
    block[109] = 1.666666666666665e-01*G0_0_2_0_0 + 1.666666666666665e-01*G2_2_0_0_0;
    block[110] = 1.666666666666665e-01*G0_0_2_1_0 + 1.666666666666665e-01*G2_2_0_1_0;
    block[111] = 1.666666666666665e-01*G0_0_2_2_0 + 1.666666666666665e-01*G2_2_0_2_0;
    block[112] = -1.666666666666665e-01*G0_1_2_0_0 - 1.666666666666665e-01*G0_1_2_1_0 - 1.666666666666665e-01*G0_1_2_2_0 - 1.666666666666665e-01*G2_2_1_0_0 - 1.666666666666665e-01*G2_2_1_1_0 - 1.666666666666665e-01*G2_2_1_2_0;
    block[113] = 1.666666666666665e-01*G0_1_2_0_0 + 1.666666666666665e-01*G2_2_1_0_0;
    block[114] = 1.666666666666665e-01*G0_1_2_1_0 + 1.666666666666665e-01*G2_2_1_1_0;
    block[115] = 1.666666666666665e-01*G0_1_2_2_0 + 1.666666666666665e-01*G2_2_1_2_0;
    block[116] = -1.666666666666665e-01*G0_2_2_0_0 - 1.666666666666665e-01*G0_2_2_1_0 - 1.666666666666665e-01*G0_2_2_2_0 - 1.666666666666665e-01*G1_0_0 - 1.666666666666665e-01*G1_1_0 - 1.666666666666665e-01*G1_2_0 - 1.666666666666665e-01*G2_2_2_0_0 - 1.666666666666665e-01*G2_2_2_1_0 - 1.666666666666665e-01*G2_2_2_2_0;
    block[117] = 1.666666666666665e-01*G0_2_2_0_0 + 1.666666666666665e-01*G1_0_0 + 1.666666666666665e-01*G2_2_2_0_0;
    block[118] = 1.666666666666665e-01*G0_2_2_1_0 + 1.666666666666665e-01*G1_1_0 + 1.666666666666665e-01*G2_2_2_1_0;
    block[119] = 1.666666666666665e-01*G0_2_2_2_0 + 1.666666666666665e-01*G1_2_0 + 1.666666666666665e-01*G2_2_2_2_0;
    block[120] = -1.666666666666665e-01*G0_0_2_0_1 - 1.666666666666665e-01*G0_0_2_1_1 - 1.666666666666664e-01*G0_0_2_2_1 - 1.666666666666665e-01*G2_2_0_0_1 - 1.666666666666665e-01*G2_2_0_1_1 - 1.666666666666664e-01*G2_2_0_2_1;
    block[121] = 1.666666666666665e-01*G0_0_2_0_1 + 1.666666666666665e-01*G2_2_0_0_1;
    block[122] = 1.666666666666665e-01*G0_0_2_1_1 + 1.666666666666665e-01*G2_2_0_1_1;
    block[123] = 1.666666666666665e-01*G0_0_2_2_1 + 1.666666666666665e-01*G2_2_0_2_1;
    block[124] = -1.666666666666665e-01*G0_1_2_0_1 - 1.666666666666665e-01*G0_1_2_1_1 - 1.666666666666665e-01*G0_1_2_2_1 - 1.666666666666665e-01*G2_2_1_0_1 - 1.666666666666665e-01*G2_2_1_1_1 - 1.666666666666665e-01*G2_2_1_2_1;
    block[125] = 1.666666666666665e-01*G0_1_2_0_1 + 1.666666666666665e-01*G2_2_1_0_1;
    block[126] = 1.666666666666665e-01*G0_1_2_1_1 + 1.666666666666665e-01*G2_2_1_1_1;
    block[127] = 1.666666666666665e-01*G0_1_2_2_1 + 1.666666666666665e-01*G2_2_1_2_1;
    block[128] = -1.666666666666665e-01*G0_2_2_0_1 - 1.666666666666665e-01*G0_2_2_1_1 - 1.666666666666665e-01*G0_2_2_2_1 - 1.666666666666665e-01*G1_0_1 - 1.666666666666665e-01*G1_1_1 - 1.666666666666665e-01*G1_2_1 - 1.666666666666665e-01*G2_2_2_0_1 - 1.666666666666665e-01*G2_2_2_1_1 - 1.666666666666665e-01*G2_2_2_2_1;
    block[129] = 1.666666666666665e-01*G0_2_2_0_1 + 1.666666666666665e-01*G1_0_1 + 1.666666666666665e-01*G2_2_2_0_1;
    block[130] = 1.666666666666665e-01*G0_2_2_1_1 + 1.666666666666665e-01*G1_1_1 + 1.666666666666665e-01*G2_2_2_1_1;
    block[131] = 1.666666666666665e-01*G0_2_2_2_1 + 1.666666666666665e-01*G1_2_1 + 1.666666666666665e-01*G2_2_2_2_1;
    block[132] = -1.666666666666665e-01*G0_0_2_0_2 - 1.666666666666665e-01*G0_0_2_1_2 - 1.666666666666664e-01*G0_0_2_2_2 - 1.666666666666665e-01*G2_2_0_0_2 - 1.666666666666665e-01*G2_2_0_1_2 - 1.666666666666664e-01*G2_2_0_2_2;
    block[133] = 1.666666666666665e-01*G0_0_2_0_2 + 1.666666666666665e-01*G2_2_0_0_2;
    block[134] = 1.666666666666665e-01*G0_0_2_1_2 + 1.666666666666665e-01*G2_2_0_1_2;
    block[135] = 1.666666666666665e-01*G0_0_2_2_2 + 1.666666666666665e-01*G2_2_0_2_2;
    block[136] = -1.666666666666665e-01*G0_1_2_0_2 - 1.666666666666665e-01*G0_1_2_1_2 - 1.666666666666665e-01*G0_1_2_2_2 - 1.666666666666665e-01*G2_2_1_0_2 - 1.666666666666665e-01*G2_2_1_1_2 - 1.666666666666665e-01*G2_2_1_2_2;
    block[137] = 1.666666666666665e-01*G0_1_2_0_2 + 1.666666666666665e-01*G2_2_1_0_2;
    block[138] = 1.666666666666665e-01*G0_1_2_1_2 + 1.666666666666665e-01*G2_2_1_1_2;
    block[139] = 1.666666666666665e-01*G0_1_2_2_2 + 1.666666666666665e-01*G2_2_1_2_2;
    block[140] = -1.666666666666665e-01*G0_2_2_0_2 - 1.666666666666665e-01*G0_2_2_1_2 - 1.666666666666665e-01*G0_2_2_2_2 - 1.666666666666665e-01*G1_0_2 - 1.666666666666665e-01*G1_1_2 - 1.666666666666665e-01*G1_2_2 - 1.666666666666665e-01*G2_2_2_0_2 - 1.666666666666665e-01*G2_2_2_1_2 - 1.666666666666665e-01*G2_2_2_2_2;
    block[141] = 1.666666666666665e-01*G0_2_2_0_2 + 1.666666666666665e-01*G1_0_2 + 1.666666666666665e-01*G2_2_2_0_2;
    block[142] = 1.666666666666665e-01*G0_2_2_1_2 + 1.666666666666665e-01*G1_1_2 + 1.666666666666665e-01*G2_2_2_1_2;
    block[143] = 1.666666666666665e-01*G0_2_2_2_2 + 1.666666666666665e-01*G1_2_2 + 1.666666666666665e-01*G2_2_2_2_2;
  }
        
private:

  const real& c0;  const real& c1;

};

/// This class contains the form to be evaluated, including
/// contributions from the interior and boundary of the domain.

class LinearForm : public dolfin::LinearForm
{
public:
    
  class TestElement : public dolfin::FiniteElement
  {
  public:

    TestElement() : dolfin::FiniteElement(), tensordims(0)
    {
      tensordims = new unsigned int [1];
      tensordims[0] = 3;
    }

    ~TestElement()
    {
      if ( tensordims ) delete [] tensordims;
    }

    inline unsigned int spacedim() const
    {
      return 12;
    }

    inline unsigned int shapedim() const
    {
      return 3;
    }

    inline unsigned int tensordim(unsigned int i) const
    {
      dolfin_assert(i < 1);
      return tensordims[i];
    }

    inline unsigned int rank() const
    {
      return 1;
    }

    void dofmap(int dofs[], const Cell& cell, const Mesh& mesh) const
    {
      dofs[0] = cell.nodeID(0);
      dofs[1] = cell.nodeID(1);
      dofs[2] = cell.nodeID(2);
      dofs[3] = cell.nodeID(3);
      int offset = mesh.noNodes();
      dofs[4] = offset + cell.nodeID(0);
      dofs[5] = offset + cell.nodeID(1);
      dofs[6] = offset + cell.nodeID(2);
      dofs[7] = offset + cell.nodeID(3);
      offset = offset + mesh.noNodes();
      dofs[8] = offset + cell.nodeID(0);
      dofs[9] = offset + cell.nodeID(1);
      dofs[10] = offset + cell.nodeID(2);
      dofs[11] = offset + cell.nodeID(3);
    }

    void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
    {
      points[0] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
      points[1] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
      points[2] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
      points[3] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
      points[4] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
      points[5] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
      points[6] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
      points[7] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
      points[8] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
      points[9] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
      points[10] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
      points[11] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
      components[0] = 0;
      components[1] = 0;
      components[2] = 0;
      components[3] = 0;
      components[4] = 1;
      components[5] = 1;
      components[6] = 1;
      components[7] = 1;
      components[8] = 2;
      components[9] = 2;
      components[10] = 2;
      components[11] = 2;
    }

  private:

    unsigned int* tensordims;

  };
    
  class FunctionElement_0 : public dolfin::FiniteElement
  {
  public:

    FunctionElement_0() : dolfin::FiniteElement(), tensordims(0)
    {
      tensordims = new unsigned int [1];
      tensordims[0] = 3;
    }

    ~FunctionElement_0()
    {
      if ( tensordims ) delete [] tensordims;
    }

    inline unsigned int spacedim() const
    {
      return 12;
    }

    inline unsigned int shapedim() const
    {
      return 3;
    }

    inline unsigned int tensordim(unsigned int i) const
    {
      dolfin_assert(i < 1);
      return tensordims[i];
    }

    inline unsigned int rank() const
    {
      return 1;
    }

    void dofmap(int dofs[], const Cell& cell, const Mesh& mesh) const
    {
      dofs[0] = cell.nodeID(0);
      dofs[1] = cell.nodeID(1);
      dofs[2] = cell.nodeID(2);
      dofs[3] = cell.nodeID(3);
      int offset = mesh.noNodes();
      dofs[4] = offset + cell.nodeID(0);
      dofs[5] = offset + cell.nodeID(1);
      dofs[6] = offset + cell.nodeID(2);
      dofs[7] = offset + cell.nodeID(3);
      offset = offset + mesh.noNodes();
      dofs[8] = offset + cell.nodeID(0);
      dofs[9] = offset + cell.nodeID(1);
      dofs[10] = offset + cell.nodeID(2);
      dofs[11] = offset + cell.nodeID(3);
    }

    void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
    {
      points[0] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
      points[1] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
      points[2] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
      points[3] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
      points[4] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
      points[5] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
      points[6] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
      points[7] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
      points[8] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
      points[9] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
      points[10] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
      points[11] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
      components[0] = 0;
      components[1] = 0;
      components[2] = 0;
      components[3] = 0;
      components[4] = 1;
      components[5] = 1;
      components[6] = 1;
      components[7] = 1;
      components[8] = 2;
      components[9] = 2;
      components[10] = 2;
      components[11] = 2;
    }

  private:

    unsigned int* tensordims;

  };

  LinearForm(Function& w0) : dolfin::LinearForm(1)
  {
    // Create finite element for test space
    _test = new TestElement();
        
    // Add functions
    add(w0, new FunctionElement_0());
  }

  void eval(real block[], const AffineMap& map) const
  {
    // Compute geometry tensors
    real G0_0 = map.det*c[0][0];
    real G0_1 = map.det*c[0][1];
    real G0_2 = map.det*c[0][2];
    real G0_3 = map.det*c[0][3];
    real G0_4 = map.det*c[0][4];
    real G0_5 = map.det*c[0][5];
    real G0_6 = map.det*c[0][6];
    real G0_7 = map.det*c[0][7];
    real G0_8 = map.det*c[0][8];
    real G0_9 = map.det*c[0][9];
    real G0_10 = map.det*c[0][10];
    real G0_11 = map.det*c[0][11];

    // Compute element tensor
    block[0] = 1.666666666666662e-02*G0_0 + 8.333333333333309e-03*G0_1 + 8.333333333333309e-03*G0_2 + 8.333333333333312e-03*G0_3;
    block[1] = 8.333333333333309e-03*G0_0 + 1.666666666666661e-02*G0_1 + 8.333333333333309e-03*G0_2 + 8.333333333333311e-03*G0_3;
    block[2] = 8.333333333333309e-03*G0_0 + 8.333333333333309e-03*G0_1 + 1.666666666666662e-02*G0_2 + 8.333333333333311e-03*G0_3;
    block[3] = 8.333333333333312e-03*G0_0 + 8.333333333333311e-03*G0_1 + 8.333333333333312e-03*G0_2 + 1.666666666666662e-02*G0_3;
    block[4] = 1.666666666666662e-02*G0_4 + 8.333333333333309e-03*G0_5 + 8.333333333333307e-03*G0_6 + 8.333333333333312e-03*G0_7;
    block[5] = 8.333333333333309e-03*G0_4 + 1.666666666666662e-02*G0_5 + 8.333333333333311e-03*G0_6 + 8.333333333333312e-03*G0_7;
    block[6] = 8.333333333333311e-03*G0_4 + 8.333333333333312e-03*G0_5 + 1.666666666666662e-02*G0_6 + 8.333333333333314e-03*G0_7;
    block[7] = 8.333333333333312e-03*G0_4 + 8.333333333333312e-03*G0_5 + 8.333333333333314e-03*G0_6 + 1.666666666666662e-02*G0_7;
    block[8] = 1.666666666666662e-02*G0_8 + 8.333333333333309e-03*G0_9 + 8.333333333333307e-03*G0_10 + 8.333333333333312e-03*G0_11;
    block[9] = 8.333333333333309e-03*G0_8 + 1.666666666666662e-02*G0_9 + 8.333333333333311e-03*G0_10 + 8.333333333333312e-03*G0_11;
    block[10] = 8.333333333333311e-03*G0_8 + 8.333333333333312e-03*G0_9 + 1.666666666666662e-02*G0_10 + 8.333333333333314e-03*G0_11;
    block[11] = 8.333333333333312e-03*G0_8 + 8.333333333333312e-03*G0_9 + 8.333333333333314e-03*G0_10 + 1.666666666666662e-02*G0_11;
  }

};

} }

#endif
