// Automatically generated by FFC, the FEniCS Form Compiler, version 0.3.4.
// For further information, go to http://www/fenics.org/ffc/.
// Licensed under the GNU GPL Version 2.

#ifndef __STOKES2D_H
#define __STOKES2D_H

#include <dolfin/Mesh.h>
#include <dolfin/Cell.h>
#include <dolfin/Point.h>
#include <dolfin/AffineMap.h>
#include <dolfin/FiniteElement.h>
#include <dolfin/FiniteElementSpec.h>
#include <dolfin/BilinearForm.h>
#include <dolfin/LinearForm.h>
#include <dolfin/Functional.h>
#include <dolfin/FEM.h>

namespace dolfin { namespace Stokes2D {

/// This class contains the form to be evaluated, including
/// contributions from the interior and boundary of the domain.

class BilinearForm : public dolfin::BilinearForm
{
public:

  class TestElement;

  class TrialElement;

  BilinearForm();
  

  bool interior_contribution() const;

  void eval(real block[], const AffineMap& map) const;

  bool boundary_contribution() const;

  void eval(real block[], const AffineMap& map, unsigned int facet) const;

};

class BilinearForm::TestElement : public dolfin::FiniteElement
{
public:

  TestElement() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 3;

    subelements = new FiniteElement* [2];
    subelements[0] = new SubElement_0();
    subelements[1] = new SubElement_1();
  }

  ~TestElement()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 15;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 2;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    int offset = mesh.topology().size(0);
    nodes[3] = offset + cell.entities(1)[0];
    nodes[4] = offset + cell.entities(1)[1];
    nodes[5] = offset + cell.entities(1)[2];
    offset = offset + mesh.topology().size(1);
    nodes[6] = offset + cell.entities(0)[0];
    nodes[7] = offset + cell.entities(0)[1];
    nodes[8] = offset + cell.entities(0)[2];
    offset = offset + mesh.topology().size(0);
    nodes[9] = offset + cell.entities(1)[0];
    nodes[10] = offset + cell.entities(1)[1];
    nodes[11] = offset + cell.entities(1)[2];
    offset = offset + mesh.topology().size(1);
    nodes[12] = offset + cell.entities(0)[0];
    nodes[13] = offset + cell.entities(0)[1];
    nodes[14] = offset + cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[3] = map(5.000000000000000e-01, 5.000000000000000e-01);
    points[4] = map(0.000000000000000e+00, 5.000000000000000e-01);
    points[5] = map(5.000000000000000e-01, 0.000000000000000e+00);
    points[6] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[7] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[8] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[9] = map(5.000000000000000e-01, 5.000000000000000e-01);
    points[10] = map(0.000000000000000e+00, 5.000000000000000e-01);
    points[11] = map(5.000000000000000e-01, 0.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 0;
    components[4] = 0;
    components[5] = 0;
    components[6] = 1;
    components[7] = 1;
    components[8] = 1;
    components[9] = 1;
    components[10] = 1;
    components[11] = 1;
    points[12] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[13] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[14] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[12] = 2;
    components[13] = 2;
    components[14] = 2;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0) + mesh.topology().size(1);
    vertex_nodes[1] = offset + vertex;
    offset = offset + mesh.topology().size(0) + mesh.topology().size(1);
    vertex_nodes[2] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *subelements[i];
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *subelements[i];
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("mixed");
    return s;
  }
  
private:

class SubElement_0 : public dolfin::FiniteElement
{
public:

  SubElement_0() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 2;

    // Element is simple, don't need to initialize subelements
  }

  ~SubElement_0()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 12;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    int offset = mesh.topology().size(0);
    nodes[3] = offset + cell.entities(1)[0];
    nodes[4] = offset + cell.entities(1)[1];
    nodes[5] = offset + cell.entities(1)[2];
    offset = offset + mesh.topology().size(1);
    nodes[6] = offset + cell.entities(0)[0];
    nodes[7] = offset + cell.entities(0)[1];
    nodes[8] = offset + cell.entities(0)[2];
    offset = offset + mesh.topology().size(0);
    nodes[9] = offset + cell.entities(1)[0];
    nodes[10] = offset + cell.entities(1)[1];
    nodes[11] = offset + cell.entities(1)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[3] = map(5.000000000000000e-01, 5.000000000000000e-01);
    points[4] = map(0.000000000000000e+00, 5.000000000000000e-01);
    points[5] = map(5.000000000000000e-01, 0.000000000000000e+00);
    points[6] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[7] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[8] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[9] = map(5.000000000000000e-01, 5.000000000000000e-01);
    points[10] = map(0.000000000000000e+00, 5.000000000000000e-01);
    points[11] = map(5.000000000000000e-01, 0.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 0;
    components[4] = 0;
    components[5] = 0;
    components[6] = 1;
    components[7] = 1;
    components[8] = 1;
    components[9] = 1;
    components[10] = 1;
    components[11] = 1;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0) + mesh.topology().size(1);
    vertex_nodes[1] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Vector Lagrange", "triangle", 2, 2);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class SubElement_1 : public dolfin::FiniteElement
{
public:

  SubElement_1() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~SubElement_1()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 3;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "triangle", 1);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class BilinearForm::TrialElement : public dolfin::FiniteElement
{
public:

  TrialElement() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 3;

    subelements = new FiniteElement* [2];
    subelements[0] = new SubElement_0();
    subelements[1] = new SubElement_1();
  }

  ~TrialElement()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 15;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 2;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    int offset = mesh.topology().size(0);
    nodes[3] = offset + cell.entities(1)[0];
    nodes[4] = offset + cell.entities(1)[1];
    nodes[5] = offset + cell.entities(1)[2];
    offset = offset + mesh.topology().size(1);
    nodes[6] = offset + cell.entities(0)[0];
    nodes[7] = offset + cell.entities(0)[1];
    nodes[8] = offset + cell.entities(0)[2];
    offset = offset + mesh.topology().size(0);
    nodes[9] = offset + cell.entities(1)[0];
    nodes[10] = offset + cell.entities(1)[1];
    nodes[11] = offset + cell.entities(1)[2];
    offset = offset + mesh.topology().size(1);
    nodes[12] = offset + cell.entities(0)[0];
    nodes[13] = offset + cell.entities(0)[1];
    nodes[14] = offset + cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[3] = map(5.000000000000000e-01, 5.000000000000000e-01);
    points[4] = map(0.000000000000000e+00, 5.000000000000000e-01);
    points[5] = map(5.000000000000000e-01, 0.000000000000000e+00);
    points[6] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[7] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[8] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[9] = map(5.000000000000000e-01, 5.000000000000000e-01);
    points[10] = map(0.000000000000000e+00, 5.000000000000000e-01);
    points[11] = map(5.000000000000000e-01, 0.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 0;
    components[4] = 0;
    components[5] = 0;
    components[6] = 1;
    components[7] = 1;
    components[8] = 1;
    components[9] = 1;
    components[10] = 1;
    components[11] = 1;
    points[12] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[13] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[14] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[12] = 2;
    components[13] = 2;
    components[14] = 2;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0) + mesh.topology().size(1);
    vertex_nodes[1] = offset + vertex;
    offset = offset + mesh.topology().size(0) + mesh.topology().size(1);
    vertex_nodes[2] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *subelements[i];
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *subelements[i];
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("mixed");
    return s;
  }
  
private:

class SubElement_0 : public dolfin::FiniteElement
{
public:

  SubElement_0() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 2;

    // Element is simple, don't need to initialize subelements
  }

  ~SubElement_0()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 12;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    int offset = mesh.topology().size(0);
    nodes[3] = offset + cell.entities(1)[0];
    nodes[4] = offset + cell.entities(1)[1];
    nodes[5] = offset + cell.entities(1)[2];
    offset = offset + mesh.topology().size(1);
    nodes[6] = offset + cell.entities(0)[0];
    nodes[7] = offset + cell.entities(0)[1];
    nodes[8] = offset + cell.entities(0)[2];
    offset = offset + mesh.topology().size(0);
    nodes[9] = offset + cell.entities(1)[0];
    nodes[10] = offset + cell.entities(1)[1];
    nodes[11] = offset + cell.entities(1)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[3] = map(5.000000000000000e-01, 5.000000000000000e-01);
    points[4] = map(0.000000000000000e+00, 5.000000000000000e-01);
    points[5] = map(5.000000000000000e-01, 0.000000000000000e+00);
    points[6] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[7] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[8] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[9] = map(5.000000000000000e-01, 5.000000000000000e-01);
    points[10] = map(0.000000000000000e+00, 5.000000000000000e-01);
    points[11] = map(5.000000000000000e-01, 0.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 0;
    components[4] = 0;
    components[5] = 0;
    components[6] = 1;
    components[7] = 1;
    components[8] = 1;
    components[9] = 1;
    components[10] = 1;
    components[11] = 1;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0) + mesh.topology().size(1);
    vertex_nodes[1] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Vector Lagrange", "triangle", 2, 2);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class SubElement_1 : public dolfin::FiniteElement
{
public:

  SubElement_1() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~SubElement_1()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 3;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "triangle", 1);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

  unsigned int* tensordims;
  FiniteElement** subelements;

};

BilinearForm::BilinearForm() : dolfin::BilinearForm(0)
{
  // Create finite element for test space
  _test = new TestElement();

  // Create finite element for trial space
  _trial = new TrialElement();
}

// Contribution from the interior
bool BilinearForm::interior_contribution() const { return true; }

void BilinearForm::eval(real block[], const AffineMap& map) const
{
  // Compute geometry tensors
  const real G0_0_0 = map.det*map.g00*map.g00 + map.det*map.g01*map.g01;
  const real G0_0_1 = map.det*map.g00*map.g10 + map.det*map.g01*map.g11;
  const real G0_1_0 = map.det*map.g10*map.g00 + map.det*map.g11*map.g01;
  const real G0_1_1 = map.det*map.g10*map.g10 + map.det*map.g11*map.g11;
  const real G1_0_0 = map.det*map.g00*map.g00 + map.det*map.g01*map.g01;
  const real G1_0_1 = map.det*map.g00*map.g10 + map.det*map.g01*map.g11;
  const real G1_1_0 = map.det*map.g10*map.g00 + map.det*map.g11*map.g01;
  const real G1_1_1 = map.det*map.g10*map.g10 + map.det*map.g11*map.g11;
  const real G2_0 = map.det*map.g00;
  const real G2_1 = map.det*map.g10;
  const real G3_0 = map.det*map.g01;
  const real G3_1 = map.det*map.g11;
  const real G4_0 = map.det*map.g00;
  const real G4_1 = map.det*map.g10;
  const real G5_0 = map.det*map.g01;
  const real G5_1 = map.det*map.g11;

  // Compute element tensor
  block[0] = 4.999999999999992e-01*G0_0_0 + 4.999999999999991e-01*G0_0_1 + 4.999999999999991e-01*G0_1_0 + 4.999999999999991e-01*G0_1_1;
  block[1] = 1.666666666666663e-01*G0_0_0 + 1.666666666666664e-01*G0_1_0;
  block[2] = 1.666666666666665e-01*G0_0_1 + 1.666666666666665e-01*G0_1_1;
  block[3] = 0.000000000000000e+00;
  block[4] = -6.666666666666657e-01*G0_0_1 - 6.666666666666656e-01*G0_1_1;
  block[5] = -6.666666666666655e-01*G0_0_0 - 6.666666666666655e-01*G0_1_0;
  block[6] = 0.000000000000000e+00;
  block[7] = 0.000000000000000e+00;
  block[8] = 0.000000000000000e+00;
  block[9] = 0.000000000000000e+00;
  block[10] = 0.000000000000000e+00;
  block[11] = 0.000000000000000e+00;
  block[12] = 1.666666666666664e-01*G2_0 + 1.666666666666663e-01*G2_1;
  block[13] = 0.000000000000000e+00;
  block[14] = 0.000000000000000e+00;
  block[15] = 1.666666666666663e-01*G0_0_0 + 1.666666666666664e-01*G0_0_1;
  block[16] = 4.999999999999992e-01*G0_0_0;
  block[17] = -1.666666666666664e-01*G0_0_1;
  block[18] = 6.666666666666654e-01*G0_0_1;
  block[19] = 0.000000000000000e+00;
  block[20] = -6.666666666666654e-01*G0_0_0 - 6.666666666666656e-01*G0_0_1;
  block[21] = 0.000000000000000e+00;
  block[22] = 0.000000000000000e+00;
  block[23] = 0.000000000000000e+00;
  block[24] = 0.000000000000000e+00;
  block[25] = 0.000000000000000e+00;
  block[26] = 0.000000000000000e+00;
  block[27] = 0.000000000000000e+00;
  block[28] = -1.666666666666664e-01*G2_0;
  block[29] = 0.000000000000000e+00;
  block[30] = 1.666666666666665e-01*G0_1_0 + 1.666666666666665e-01*G0_1_1;
  block[31] = -1.666666666666664e-01*G0_1_0;
  block[32] = 4.999999999999991e-01*G0_1_1;
  block[33] = 6.666666666666653e-01*G0_1_0;
  block[34] = -6.666666666666654e-01*G0_1_0 - 6.666666666666656e-01*G0_1_1;
  block[35] = 0.000000000000000e+00;
  block[36] = 0.000000000000000e+00;
  block[37] = 0.000000000000000e+00;
  block[38] = 0.000000000000000e+00;
  block[39] = 0.000000000000000e+00;
  block[40] = 0.000000000000000e+00;
  block[41] = 0.000000000000000e+00;
  block[42] = 0.000000000000000e+00;
  block[43] = 0.000000000000000e+00;
  block[44] = -1.666666666666664e-01*G2_1;
  block[45] = 0.000000000000000e+00;
  block[46] = 6.666666666666654e-01*G0_1_0;
  block[47] = 6.666666666666653e-01*G0_0_1;
  block[48] = 1.333333333333330e+00*G0_0_0 + 6.666666666666652e-01*G0_0_1 + 6.666666666666652e-01*G0_1_0 + 1.333333333333330e+00*G0_1_1;
  block[49] = -1.333333333333331e+00*G0_0_0 - 6.666666666666656e-01*G0_0_1 - 6.666666666666653e-01*G0_1_0;
  block[50] = -6.666666666666652e-01*G0_0_1 - 6.666666666666653e-01*G0_1_0 - 1.333333333333331e+00*G0_1_1;
  block[51] = 0.000000000000000e+00;
  block[52] = 0.000000000000000e+00;
  block[53] = 0.000000000000000e+00;
  block[54] = 0.000000000000000e+00;
  block[55] = 0.000000000000000e+00;
  block[56] = 0.000000000000000e+00;
  block[57] = -1.666666666666663e-01*G2_0 - 1.666666666666664e-01*G2_1;
  block[58] = -1.666666666666663e-01*G2_0 - 3.333333333333327e-01*G2_1;
  block[59] = -3.333333333333326e-01*G2_0 - 1.666666666666663e-01*G2_1;
  block[60] = -6.666666666666656e-01*G0_1_0 - 6.666666666666656e-01*G0_1_1;
  block[61] = 0.000000000000000e+00;
  block[62] = -6.666666666666654e-01*G0_0_1 - 6.666666666666659e-01*G0_1_1;
  block[63] = -1.333333333333331e+00*G0_0_0 - 6.666666666666653e-01*G0_0_1 - 6.666666666666656e-01*G0_1_0;
  block[64] = 1.333333333333331e+00*G0_0_0 + 6.666666666666656e-01*G0_0_1 + 6.666666666666657e-01*G0_1_0 + 1.333333333333331e+00*G0_1_1;
  block[65] = 6.666666666666654e-01*G0_0_1 + 6.666666666666655e-01*G0_1_0;
  block[66] = 0.000000000000000e+00;
  block[67] = 0.000000000000000e+00;
  block[68] = 0.000000000000000e+00;
  block[69] = 0.000000000000000e+00;
  block[70] = 0.000000000000000e+00;
  block[71] = 0.000000000000000e+00;
  block[72] = 1.666666666666663e-01*G2_0 - 1.666666666666664e-01*G2_1;
  block[73] = 1.666666666666664e-01*G2_0;
  block[74] = 3.333333333333327e-01*G2_0 + 1.666666666666664e-01*G2_1;
  block[75] = -6.666666666666655e-01*G0_0_0 - 6.666666666666656e-01*G0_0_1;
  block[76] = -6.666666666666654e-01*G0_0_0 - 6.666666666666656e-01*G0_1_0;
  block[77] = 0.000000000000000e+00;
  block[78] = -6.666666666666652e-01*G0_0_1 - 6.666666666666653e-01*G0_1_0 - 1.333333333333331e+00*G0_1_1;
  block[79] = 6.666666666666657e-01*G0_0_1 + 6.666666666666654e-01*G0_1_0;
  block[80] = 1.333333333333331e+00*G0_0_0 + 6.666666666666656e-01*G0_0_1 + 6.666666666666656e-01*G0_1_0 + 1.333333333333331e+00*G0_1_1;
  block[81] = 0.000000000000000e+00;
  block[82] = 0.000000000000000e+00;
  block[83] = 0.000000000000000e+00;
  block[84] = 0.000000000000000e+00;
  block[85] = 0.000000000000000e+00;
  block[86] = 0.000000000000000e+00;
  block[87] = -1.666666666666664e-01*G2_0 + 1.666666666666664e-01*G2_1;
  block[88] = 1.666666666666664e-01*G2_0 + 3.333333333333328e-01*G2_1;
  block[89] = 1.666666666666664e-01*G2_1;
  block[90] = 0.000000000000000e+00;
  block[91] = 0.000000000000000e+00;
  block[92] = 0.000000000000000e+00;
  block[93] = 0.000000000000000e+00;
  block[94] = 0.000000000000000e+00;
  block[95] = 0.000000000000000e+00;
  block[96] = 4.999999999999991e-01*G1_0_0 + 4.999999999999991e-01*G1_0_1 + 4.999999999999991e-01*G1_1_0 + 4.999999999999991e-01*G1_1_1;
  block[97] = 1.666666666666664e-01*G1_0_0 + 1.666666666666664e-01*G1_1_0;
  block[98] = 1.666666666666666e-01*G1_0_1 + 1.666666666666665e-01*G1_1_1;
  block[99] = 0.000000000000000e+00;
  block[100] = -6.666666666666656e-01*G1_0_1 - 6.666666666666656e-01*G1_1_1;
  block[101] = -6.666666666666655e-01*G1_0_0 - 6.666666666666655e-01*G1_1_0;
  block[102] = 1.666666666666663e-01*G3_0 + 1.666666666666663e-01*G3_1;
  block[103] = 0.000000000000000e+00;
  block[104] = 0.000000000000000e+00;
  block[105] = 0.000000000000000e+00;
  block[106] = 0.000000000000000e+00;
  block[107] = 0.000000000000000e+00;
  block[108] = 0.000000000000000e+00;
  block[109] = 0.000000000000000e+00;
  block[110] = 0.000000000000000e+00;
  block[111] = 1.666666666666663e-01*G1_0_0 + 1.666666666666664e-01*G1_0_1;
  block[112] = 4.999999999999992e-01*G1_0_0;
  block[113] = -1.666666666666664e-01*G1_0_1;
  block[114] = 6.666666666666654e-01*G1_0_1;
  block[115] = 0.000000000000000e+00;
  block[116] = -6.666666666666654e-01*G1_0_0 - 6.666666666666656e-01*G1_0_1;
  block[117] = 0.000000000000000e+00;
  block[118] = -1.666666666666664e-01*G3_0;
  block[119] = 0.000000000000000e+00;
  block[120] = 0.000000000000000e+00;
  block[121] = 0.000000000000000e+00;
  block[122] = 0.000000000000000e+00;
  block[123] = 0.000000000000000e+00;
  block[124] = 0.000000000000000e+00;
  block[125] = 0.000000000000000e+00;
  block[126] = 1.666666666666666e-01*G1_1_0 + 1.666666666666665e-01*G1_1_1;
  block[127] = -1.666666666666664e-01*G1_1_0;
  block[128] = 4.999999999999991e-01*G1_1_1;
  block[129] = 6.666666666666653e-01*G1_1_0;
  block[130] = -6.666666666666654e-01*G1_1_0 - 6.666666666666656e-01*G1_1_1;
  block[131] = 0.000000000000000e+00;
  block[132] = 0.000000000000000e+00;
  block[133] = 0.000000000000000e+00;
  block[134] = -1.666666666666664e-01*G3_1;
  block[135] = 0.000000000000000e+00;
  block[136] = 0.000000000000000e+00;
  block[137] = 0.000000000000000e+00;
  block[138] = 0.000000000000000e+00;
  block[139] = 0.000000000000000e+00;
  block[140] = 0.000000000000000e+00;
  block[141] = 0.000000000000000e+00;
  block[142] = 6.666666666666654e-01*G1_1_0;
  block[143] = 6.666666666666653e-01*G1_0_1;
  block[144] = 1.333333333333330e+00*G1_0_0 + 6.666666666666652e-01*G1_0_1 + 6.666666666666652e-01*G1_1_0 + 1.333333333333330e+00*G1_1_1;
  block[145] = -1.333333333333331e+00*G1_0_0 - 6.666666666666656e-01*G1_0_1 - 6.666666666666653e-01*G1_1_0;
  block[146] = -6.666666666666652e-01*G1_0_1 - 6.666666666666653e-01*G1_1_0 - 1.333333333333331e+00*G1_1_1;
  block[147] = -1.666666666666663e-01*G3_0 - 1.666666666666664e-01*G3_1;
  block[148] = -1.666666666666663e-01*G3_0 - 3.333333333333327e-01*G3_1;
  block[149] = -3.333333333333326e-01*G3_0 - 1.666666666666663e-01*G3_1;
  block[150] = 0.000000000000000e+00;
  block[151] = 0.000000000000000e+00;
  block[152] = 0.000000000000000e+00;
  block[153] = 0.000000000000000e+00;
  block[154] = 0.000000000000000e+00;
  block[155] = 0.000000000000000e+00;
  block[156] = -6.666666666666656e-01*G1_1_0 - 6.666666666666656e-01*G1_1_1;
  block[157] = 0.000000000000000e+00;
  block[158] = -6.666666666666654e-01*G1_0_1 - 6.666666666666659e-01*G1_1_1;
  block[159] = -1.333333333333331e+00*G1_0_0 - 6.666666666666653e-01*G1_0_1 - 6.666666666666656e-01*G1_1_0;
  block[160] = 1.333333333333331e+00*G1_0_0 + 6.666666666666656e-01*G1_0_1 + 6.666666666666657e-01*G1_1_0 + 1.333333333333331e+00*G1_1_1;
  block[161] = 6.666666666666654e-01*G1_0_1 + 6.666666666666655e-01*G1_1_0;
  block[162] = 1.666666666666663e-01*G3_0 - 1.666666666666664e-01*G3_1;
  block[163] = 1.666666666666664e-01*G3_0;
  block[164] = 3.333333333333327e-01*G3_0 + 1.666666666666664e-01*G3_1;
  block[165] = 0.000000000000000e+00;
  block[166] = 0.000000000000000e+00;
  block[167] = 0.000000000000000e+00;
  block[168] = 0.000000000000000e+00;
  block[169] = 0.000000000000000e+00;
  block[170] = 0.000000000000000e+00;
  block[171] = -6.666666666666656e-01*G1_0_0 - 6.666666666666656e-01*G1_0_1;
  block[172] = -6.666666666666654e-01*G1_0_0 - 6.666666666666656e-01*G1_1_0;
  block[173] = 0.000000000000000e+00;
  block[174] = -6.666666666666652e-01*G1_0_1 - 6.666666666666653e-01*G1_1_0 - 1.333333333333331e+00*G1_1_1;
  block[175] = 6.666666666666657e-01*G1_0_1 + 6.666666666666654e-01*G1_1_0;
  block[176] = 1.333333333333331e+00*G1_0_0 + 6.666666666666656e-01*G1_0_1 + 6.666666666666656e-01*G1_1_0 + 1.333333333333331e+00*G1_1_1;
  block[177] = -1.666666666666664e-01*G3_0 + 1.666666666666664e-01*G3_1;
  block[178] = 1.666666666666664e-01*G3_0 + 3.333333333333328e-01*G3_1;
  block[179] = 1.666666666666664e-01*G3_1;
  block[180] = -1.666666666666664e-01*G4_0 - 1.666666666666663e-01*G4_1;
  block[181] = 0.000000000000000e+00;
  block[182] = 0.000000000000000e+00;
  block[183] = 1.666666666666663e-01*G4_0 + 1.666666666666664e-01*G4_1;
  block[184] = -1.666666666666663e-01*G4_0 + 1.666666666666664e-01*G4_1;
  block[185] = 1.666666666666664e-01*G4_0 - 1.666666666666664e-01*G4_1;
  block[186] = -1.666666666666663e-01*G5_0 - 1.666666666666663e-01*G5_1;
  block[187] = 0.000000000000000e+00;
  block[188] = 0.000000000000000e+00;
  block[189] = 1.666666666666663e-01*G5_0 + 1.666666666666664e-01*G5_1;
  block[190] = -1.666666666666663e-01*G5_0 + 1.666666666666664e-01*G5_1;
  block[191] = 1.666666666666664e-01*G5_0 - 1.666666666666664e-01*G5_1;
  block[192] = 0.000000000000000e+00;
  block[193] = 0.000000000000000e+00;
  block[194] = 0.000000000000000e+00;
  block[195] = 0.000000000000000e+00;
  block[196] = 1.666666666666664e-01*G4_0;
  block[197] = 0.000000000000000e+00;
  block[198] = 1.666666666666663e-01*G4_0 + 3.333333333333326e-01*G4_1;
  block[199] = -1.666666666666664e-01*G4_0;
  block[200] = -1.666666666666664e-01*G4_0 - 3.333333333333328e-01*G4_1;
  block[201] = 0.000000000000000e+00;
  block[202] = 1.666666666666664e-01*G5_0;
  block[203] = 0.000000000000000e+00;
  block[204] = 1.666666666666663e-01*G5_0 + 3.333333333333326e-01*G5_1;
  block[205] = -1.666666666666664e-01*G5_0;
  block[206] = -1.666666666666664e-01*G5_0 - 3.333333333333328e-01*G5_1;
  block[207] = 0.000000000000000e+00;
  block[208] = 0.000000000000000e+00;
  block[209] = 0.000000000000000e+00;
  block[210] = 0.000000000000000e+00;
  block[211] = 0.000000000000000e+00;
  block[212] = 1.666666666666663e-01*G4_1;
  block[213] = 3.333333333333326e-01*G4_0 + 1.666666666666663e-01*G4_1;
  block[214] = -3.333333333333327e-01*G4_0 - 1.666666666666664e-01*G4_1;
  block[215] = -1.666666666666664e-01*G4_1;
  block[216] = 0.000000000000000e+00;
  block[217] = 0.000000000000000e+00;
  block[218] = 1.666666666666663e-01*G5_1;
  block[219] = 3.333333333333326e-01*G5_0 + 1.666666666666663e-01*G5_1;
  block[220] = -3.333333333333327e-01*G5_0 - 1.666666666666664e-01*G5_1;
  block[221] = -1.666666666666664e-01*G5_1;
  block[222] = 0.000000000000000e+00;
  block[223] = 0.000000000000000e+00;
  block[224] = 0.000000000000000e+00;
}

// No contribution from the boundary
bool BilinearForm::boundary_contribution() const { return false; }

void BilinearForm::eval(real block[], const AffineMap& map, unsigned int facet) const {}

/// This class contains the form to be evaluated, including
/// contributions from the interior and boundary of the domain.

class LinearForm : public dolfin::LinearForm
{
public:

  class TestElement;

  class FunctionElement_0;

  LinearForm(Function& w0);
  

  bool interior_contribution() const;

  void eval(real block[], const AffineMap& map) const;

  bool boundary_contribution() const;

  void eval(real block[], const AffineMap& map, unsigned int facet) const;

};

class LinearForm::TestElement : public dolfin::FiniteElement
{
public:

  TestElement() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 3;

    subelements = new FiniteElement* [2];
    subelements[0] = new SubElement_0();
    subelements[1] = new SubElement_1();
  }

  ~TestElement()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 15;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 2;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    int offset = mesh.topology().size(0);
    nodes[3] = offset + cell.entities(1)[0];
    nodes[4] = offset + cell.entities(1)[1];
    nodes[5] = offset + cell.entities(1)[2];
    offset = offset + mesh.topology().size(1);
    nodes[6] = offset + cell.entities(0)[0];
    nodes[7] = offset + cell.entities(0)[1];
    nodes[8] = offset + cell.entities(0)[2];
    offset = offset + mesh.topology().size(0);
    nodes[9] = offset + cell.entities(1)[0];
    nodes[10] = offset + cell.entities(1)[1];
    nodes[11] = offset + cell.entities(1)[2];
    offset = offset + mesh.topology().size(1);
    nodes[12] = offset + cell.entities(0)[0];
    nodes[13] = offset + cell.entities(0)[1];
    nodes[14] = offset + cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[3] = map(5.000000000000000e-01, 5.000000000000000e-01);
    points[4] = map(0.000000000000000e+00, 5.000000000000000e-01);
    points[5] = map(5.000000000000000e-01, 0.000000000000000e+00);
    points[6] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[7] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[8] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[9] = map(5.000000000000000e-01, 5.000000000000000e-01);
    points[10] = map(0.000000000000000e+00, 5.000000000000000e-01);
    points[11] = map(5.000000000000000e-01, 0.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 0;
    components[4] = 0;
    components[5] = 0;
    components[6] = 1;
    components[7] = 1;
    components[8] = 1;
    components[9] = 1;
    components[10] = 1;
    components[11] = 1;
    points[12] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[13] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[14] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[12] = 2;
    components[13] = 2;
    components[14] = 2;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0) + mesh.topology().size(1);
    vertex_nodes[1] = offset + vertex;
    offset = offset + mesh.topology().size(0) + mesh.topology().size(1);
    vertex_nodes[2] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *subelements[i];
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *subelements[i];
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("mixed");
    return s;
  }
  
private:

class SubElement_0 : public dolfin::FiniteElement
{
public:

  SubElement_0() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 2;

    // Element is simple, don't need to initialize subelements
  }

  ~SubElement_0()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 12;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    int offset = mesh.topology().size(0);
    nodes[3] = offset + cell.entities(1)[0];
    nodes[4] = offset + cell.entities(1)[1];
    nodes[5] = offset + cell.entities(1)[2];
    offset = offset + mesh.topology().size(1);
    nodes[6] = offset + cell.entities(0)[0];
    nodes[7] = offset + cell.entities(0)[1];
    nodes[8] = offset + cell.entities(0)[2];
    offset = offset + mesh.topology().size(0);
    nodes[9] = offset + cell.entities(1)[0];
    nodes[10] = offset + cell.entities(1)[1];
    nodes[11] = offset + cell.entities(1)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[3] = map(5.000000000000000e-01, 5.000000000000000e-01);
    points[4] = map(0.000000000000000e+00, 5.000000000000000e-01);
    points[5] = map(5.000000000000000e-01, 0.000000000000000e+00);
    points[6] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[7] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[8] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[9] = map(5.000000000000000e-01, 5.000000000000000e-01);
    points[10] = map(0.000000000000000e+00, 5.000000000000000e-01);
    points[11] = map(5.000000000000000e-01, 0.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 0;
    components[4] = 0;
    components[5] = 0;
    components[6] = 1;
    components[7] = 1;
    components[8] = 1;
    components[9] = 1;
    components[10] = 1;
    components[11] = 1;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0) + mesh.topology().size(1);
    vertex_nodes[1] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Vector Lagrange", "triangle", 2, 2);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class SubElement_1 : public dolfin::FiniteElement
{
public:

  SubElement_1() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~SubElement_1()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 3;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "triangle", 1);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class LinearForm::FunctionElement_0 : public dolfin::FiniteElement
{
public:

  FunctionElement_0() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 2;

    // Element is simple, don't need to initialize subelements
  }

  ~FunctionElement_0()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 12;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    int offset = mesh.topology().size(0);
    nodes[3] = offset + cell.entities(1)[0];
    nodes[4] = offset + cell.entities(1)[1];
    nodes[5] = offset + cell.entities(1)[2];
    offset = offset + mesh.topology().size(1);
    nodes[6] = offset + cell.entities(0)[0];
    nodes[7] = offset + cell.entities(0)[1];
    nodes[8] = offset + cell.entities(0)[2];
    offset = offset + mesh.topology().size(0);
    nodes[9] = offset + cell.entities(1)[0];
    nodes[10] = offset + cell.entities(1)[1];
    nodes[11] = offset + cell.entities(1)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[3] = map(5.000000000000000e-01, 5.000000000000000e-01);
    points[4] = map(0.000000000000000e+00, 5.000000000000000e-01);
    points[5] = map(5.000000000000000e-01, 0.000000000000000e+00);
    points[6] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[7] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[8] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[9] = map(5.000000000000000e-01, 5.000000000000000e-01);
    points[10] = map(0.000000000000000e+00, 5.000000000000000e-01);
    points[11] = map(5.000000000000000e-01, 0.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 0;
    components[4] = 0;
    components[5] = 0;
    components[6] = 1;
    components[7] = 1;
    components[8] = 1;
    components[9] = 1;
    components[10] = 1;
    components[11] = 1;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0) + mesh.topology().size(1);
    vertex_nodes[1] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Vector Lagrange", "triangle", 2, 2);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

LinearForm::LinearForm(Function& w0) : dolfin::LinearForm(1)
{
  // Create finite element for test space
  _test = new TestElement();

  // Add functions
  initFunction(0, w0, new FunctionElement_0());
}

// Contribution from the interior
bool LinearForm::interior_contribution() const { return true; }

void LinearForm::eval(real block[], const AffineMap& map) const
{
  // Compute coefficients
  const real c0_0 = c[0][0];
  const real c0_1 = c[0][1];
  const real c0_2 = c[0][2];
  const real c0_3 = c[0][3];
  const real c0_4 = c[0][4];
  const real c0_5 = c[0][5];
  const real c0_6 = c[0][6];
  const real c0_7 = c[0][7];
  const real c0_8 = c[0][8];
  const real c0_9 = c[0][9];
  const real c0_10 = c[0][10];
  const real c0_11 = c[0][11];

  // Compute geometry tensors
  const real G0_0 = map.det*c0_0;
  const real G0_1 = map.det*c0_1;
  const real G0_2 = map.det*c0_2;
  const real G0_3 = map.det*c0_3;
  const real G0_4 = map.det*c0_4;
  const real G0_5 = map.det*c0_5;
  const real G1_6 = map.det*c0_6;
  const real G1_7 = map.det*c0_7;
  const real G1_8 = map.det*c0_8;
  const real G1_9 = map.det*c0_9;
  const real G1_10 = map.det*c0_10;
  const real G1_11 = map.det*c0_11;

  // Compute element tensor
  block[0] = 1.666666666666665e-02*G0_0 - 2.777777777777774e-03*G0_1 - 2.777777777777775e-03*G0_2 - 1.111111111111110e-02*G0_3;
  block[1] = -2.777777777777774e-03*G0_0 + 1.666666666666665e-02*G0_1 - 2.777777777777776e-03*G0_2 - 1.111111111111111e-02*G0_4;
  block[2] = -2.777777777777775e-03*G0_0 - 2.777777777777776e-03*G0_1 + 1.666666666666666e-02*G0_2 - 1.111111111111111e-02*G0_5;
  block[3] = -1.111111111111110e-02*G0_0 + 8.888888888888882e-02*G0_3 + 4.444444444444443e-02*G0_4 + 4.444444444444443e-02*G0_5;
  block[4] = -1.111111111111111e-02*G0_1 + 4.444444444444443e-02*G0_3 + 8.888888888888884e-02*G0_4 + 4.444444444444442e-02*G0_5;
  block[5] = -1.111111111111111e-02*G0_2 + 4.444444444444443e-02*G0_3 + 4.444444444444443e-02*G0_4 + 8.888888888888882e-02*G0_5;
  block[6] = 1.666666666666665e-02*G1_6 - 2.777777777777774e-03*G1_7 - 2.777777777777774e-03*G1_8 - 1.111111111111109e-02*G1_9;
  block[7] = -2.777777777777774e-03*G1_6 + 1.666666666666665e-02*G1_7 - 2.777777777777775e-03*G1_8 - 1.111111111111111e-02*G1_10;
  block[8] = -2.777777777777774e-03*G1_6 - 2.777777777777775e-03*G1_7 + 1.666666666666666e-02*G1_8 - 1.111111111111111e-02*G1_11;
  block[9] = -1.111111111111109e-02*G1_6 + 8.888888888888882e-02*G1_9 + 4.444444444444443e-02*G1_10 + 4.444444444444443e-02*G1_11;
  block[10] = -1.111111111111111e-02*G1_7 + 4.444444444444443e-02*G1_9 + 8.888888888888884e-02*G1_10 + 4.444444444444442e-02*G1_11;
  block[11] = -1.111111111111111e-02*G1_8 + 4.444444444444443e-02*G1_9 + 4.444444444444443e-02*G1_10 + 8.888888888888882e-02*G1_11;
  block[12] = 0.000000000000000e+00;
  block[13] = 0.000000000000000e+00;
  block[14] = 0.000000000000000e+00;
}

// No contribution from the boundary
bool LinearForm::boundary_contribution() const { return false; }

void LinearForm::eval(real block[], const AffineMap& map, unsigned int facet) const {}

} }

#endif
