// Automatically generated by FFC, the FEniCS Form Compiler, version 0.2.1.
// For further information, go to http://www/fenics.org/ffc/.
// Licensed under the GNU GPL Version 2.

#ifndef __HEAT_H
#define __HEAT_H

#include <dolfin/Mesh.h>
#include <dolfin/Cell.h>
#include <dolfin/Point.h>
#include <dolfin/Vector.h>
#include <dolfin/AffineMap.h>
#include <dolfin/FiniteElement.h>
#include <dolfin/LinearForm.h>
#include <dolfin/BilinearForm.h>

namespace dolfin { namespace Heat {

/// This class contains the form to be evaluated, including
/// contributions from the interior and boundary of the domain.

class LinearForm : public dolfin::LinearForm
{
public:
    
  class TestElement : public dolfin::FiniteElement
  {
  public:

    TestElement() : dolfin::FiniteElement(), tensordims(0)
    {
      // Do nothing
    }

    ~TestElement()
    {
      if ( tensordims ) delete [] tensordims;
    }

    inline unsigned int spacedim() const
    {
      return 3;
    }

    inline unsigned int shapedim() const
    {
      return 2;
    }

    inline unsigned int tensordim(unsigned int i) const
    {
      dolfin_error("Element is scalar.");
      return 0;
    }

    inline unsigned int rank() const
    {
      return 0;
    }

    void dofmap(int dofs[], const Cell& cell, const Mesh& mesh) const
    {
      dofs[0] = cell.nodeID(0);
      dofs[1] = cell.nodeID(1);
      dofs[2] = cell.nodeID(2);
    }

    void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
    {
      points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
      points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
      points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
      components[0] = 0;
      components[1] = 0;
      components[2] = 0;
    }

    void vertexeval(real values[], unsigned int vertex, const Vector& x, const Mesh& mesh) const
    {
      // FIXME: Temporary fix for Lagrange elements
      values[0] = x(vertex);
    }

  private:

    unsigned int* tensordims;

  };
    
  class FunctionElement_0 : public dolfin::FiniteElement
  {
  public:

    FunctionElement_0() : dolfin::FiniteElement(), tensordims(0)
    {
      // Do nothing
    }

    ~FunctionElement_0()
    {
      if ( tensordims ) delete [] tensordims;
    }

    inline unsigned int spacedim() const
    {
      return 3;
    }

    inline unsigned int shapedim() const
    {
      return 2;
    }

    inline unsigned int tensordim(unsigned int i) const
    {
      dolfin_error("Element is scalar.");
      return 0;
    }

    inline unsigned int rank() const
    {
      return 0;
    }

    void dofmap(int dofs[], const Cell& cell, const Mesh& mesh) const
    {
      dofs[0] = cell.nodeID(0);
      dofs[1] = cell.nodeID(1);
      dofs[2] = cell.nodeID(2);
    }

    void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
    {
      points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
      points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
      points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
      components[0] = 0;
      components[1] = 0;
      components[2] = 0;
    }

    void vertexeval(real values[], unsigned int vertex, const Vector& x, const Mesh& mesh) const
    {
      // FIXME: Temporary fix for Lagrange elements
      values[0] = x(vertex);
    }

  private:

    unsigned int* tensordims;

  };
    
  class FunctionElement_1 : public dolfin::FiniteElement
  {
  public:

    FunctionElement_1() : dolfin::FiniteElement(), tensordims(0)
    {
      // Do nothing
    }

    ~FunctionElement_1()
    {
      if ( tensordims ) delete [] tensordims;
    }

    inline unsigned int spacedim() const
    {
      return 3;
    }

    inline unsigned int shapedim() const
    {
      return 2;
    }

    inline unsigned int tensordim(unsigned int i) const
    {
      dolfin_error("Element is scalar.");
      return 0;
    }

    inline unsigned int rank() const
    {
      return 0;
    }

    void dofmap(int dofs[], const Cell& cell, const Mesh& mesh) const
    {
      dofs[0] = cell.nodeID(0);
      dofs[1] = cell.nodeID(1);
      dofs[2] = cell.nodeID(2);
    }

    void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
    {
      points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
      points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
      points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
      components[0] = 0;
      components[1] = 0;
      components[2] = 0;
    }

    void vertexeval(real values[], unsigned int vertex, const Vector& x, const Mesh& mesh) const
    {
      // FIXME: Temporary fix for Lagrange elements
      values[0] = x(vertex);
    }

  private:

    unsigned int* tensordims;

  };

  LinearForm(Function& w0, Function& w1) : dolfin::LinearForm(2)
  {
    // Create finite element for test space
    _test = new TestElement();

    // Add functions
    add(w0, new FunctionElement_0());
    add(w1, new FunctionElement_1());
  }

  void eval(real block[], const AffineMap& map) const
  {
    // Compute geometry tensors
    real G0_0_0_0 = map.det*c[0][0]*map.g00*map.g00 + map.det*c[0][0]*map.g01*map.g01;
    real G0_0_0_1 = map.det*c[0][0]*map.g00*map.g10 + map.det*c[0][0]*map.g01*map.g11;
    real G0_0_1_0 = map.det*c[0][0]*map.g10*map.g00 + map.det*c[0][0]*map.g11*map.g01;
    real G0_0_1_1 = map.det*c[0][0]*map.g10*map.g10 + map.det*c[0][0]*map.g11*map.g11;
    real G0_1_0_0 = map.det*c[0][1]*map.g00*map.g00 + map.det*c[0][1]*map.g01*map.g01;
    real G0_1_0_1 = map.det*c[0][1]*map.g00*map.g10 + map.det*c[0][1]*map.g01*map.g11;
    real G0_2_1_0 = map.det*c[0][2]*map.g10*map.g00 + map.det*c[0][2]*map.g11*map.g01;
    real G0_2_1_1 = map.det*c[0][2]*map.g10*map.g10 + map.det*c[0][2]*map.g11*map.g11;
    real G1_0 = map.det*c[1][0];
    real G1_1 = map.det*c[1][1];
    real G1_2 = map.det*c[1][2];

    // Compute element tensor
    block[0] = -4.999999999999998e-01*G0_0_0_0 - 4.999999999999997e-01*G0_0_0_1 - 4.999999999999997e-01*G0_0_1_0 - 4.999999999999996e-01*G0_0_1_1 + 4.999999999999998e-01*G0_1_0_0 + 4.999999999999997e-01*G0_1_0_1 + 4.999999999999997e-01*G0_2_1_0 + 4.999999999999996e-01*G0_2_1_1 + 8.333333333333319e-02*G1_0 + 4.166666666666659e-02*G1_1 + 4.166666666666659e-02*G1_2;
    block[1] = 4.999999999999998e-01*G0_0_0_0 + 4.999999999999997e-01*G0_0_1_0 - 4.999999999999998e-01*G0_1_0_0 - 4.999999999999997e-01*G0_2_1_0 + 4.166666666666659e-02*G1_0 + 8.333333333333319e-02*G1_1 + 4.166666666666660e-02*G1_2;
    block[2] = 4.999999999999997e-01*G0_0_0_1 + 4.999999999999996e-01*G0_0_1_1 - 4.999999999999997e-01*G0_1_0_1 - 4.999999999999996e-01*G0_2_1_1 + 4.166666666666659e-02*G1_0 + 4.166666666666660e-02*G1_1 + 8.333333333333318e-02*G1_2;
  }

};

} }

#endif
