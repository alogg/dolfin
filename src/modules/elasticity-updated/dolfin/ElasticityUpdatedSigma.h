// Automatically generated by FFC, the FEniCS Form Compiler, version 0.2.3.
// For further information, go to http://www/fenics.org/ffc/.
// Licensed under the GNU GPL Version 2.

#ifndef __ELASTICITYUPDATEDSIGMA_H
#define __ELASTICITYUPDATEDSIGMA_H

#include <dolfin/Mesh.h>
#include <dolfin/Cell.h>
#include <dolfin/Point.h>
#include <dolfin/Vector.h>
#include <dolfin/AffineMap.h>
#include <dolfin/FiniteElement.h>
#include <dolfin/LinearForm.h>
#include <dolfin/BilinearForm.h>

namespace dolfin { namespace ElasticityUpdatedSigma {

/// This class contains the form to be evaluated, including
/// contributions from the interior and boundary of the domain.

class LinearForm : public dolfin::LinearForm
{
public:
  
  class TestElement : public dolfin::FiniteElement
  {
  public:
  
    TestElement() : dolfin::FiniteElement(), tensordims(0), subelements(0)
    {
      tensordims = new unsigned int [1];
      tensordims[0] = 9;
  
      // Element is simple, don't need to initialize subelements
    }
  
    ~TestElement()
    {
      if ( tensordims ) delete [] tensordims;
      if ( subelements )
      {
        for (unsigned int i = 0; i < elementdim(); i++)
          delete subelements[i];
        delete [] subelements;
      }
    }
  
    inline unsigned int spacedim() const
    {
      return 9;
    }
  
    inline unsigned int shapedim() const
    {
      return 3;
    }
  
    inline unsigned int tensordim(unsigned int i) const
    {
      dolfin_assert(i < 1);
      return tensordims[i];
    }
  
    inline unsigned int elementdim() const
    {
      return 1;
    }
  
    inline unsigned int rank() const
    {
      return 1;
    }
  
    void dofmap(int dofs[], const Cell& cell, const Mesh& mesh) const
    {
      dofs[0] = cell.id();
      int offset = mesh.noCells();
      dofs[1] = offset + cell.id();
      offset = offset + mesh.noCells();
      dofs[2] = offset + cell.id();
      offset = offset + mesh.noCells();
      dofs[3] = offset + cell.id();
      offset = offset + mesh.noCells();
      dofs[4] = offset + cell.id();
      offset = offset + mesh.noCells();
      dofs[5] = offset + cell.id();
      offset = offset + mesh.noCells();
      dofs[6] = offset + cell.id();
      offset = offset + mesh.noCells();
      dofs[7] = offset + cell.id();
      offset = offset + mesh.noCells();
      dofs[8] = offset + cell.id();
    }
  
    void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
    {
      points[0] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
      points[1] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
      points[2] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
      points[3] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
      points[4] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
      points[5] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
      points[6] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
      points[7] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
      points[8] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
      components[0] = 0;
      components[1] = 1;
      components[2] = 2;
      components[3] = 3;
      components[4] = 4;
      components[5] = 5;
      components[6] = 6;
      components[7] = 7;
      components[8] = 8;
    }
  
    void vertexeval(real values[], unsigned int vertex, const real x[], const Mesh& mesh) const
    {
      // FIXME: Temporary fix for Lagrange elements
      values[0] = x[vertex];
      int offset = mesh.noCells();
      values[1] = x[offset + vertex];
      offset = offset + mesh.noCells();
      values[2] = x[offset + vertex];
      offset = offset + mesh.noCells();
      values[3] = x[offset + vertex];
      offset = offset + mesh.noCells();
      values[4] = x[offset + vertex];
      offset = offset + mesh.noCells();
      values[5] = x[offset + vertex];
      offset = offset + mesh.noCells();
      values[6] = x[offset + vertex];
      offset = offset + mesh.noCells();
      values[7] = x[offset + vertex];
      offset = offset + mesh.noCells();
      values[8] = x[offset + vertex];
    }
  
    const FiniteElement& operator[] (unsigned int i) const
    {
      return *this;
    }
  
    FiniteElement& operator[] (unsigned int i)
    {
      return *this;
    }
    
  private:
  
    unsigned int* tensordims;
    FiniteElement** subelements;
  
  };
    
  class FunctionElement_0 : public dolfin::FiniteElement
  {
  public:
  
    FunctionElement_0() : dolfin::FiniteElement(), tensordims(0), subelements(0)
    {
      tensordims = new unsigned int [1];
      tensordims[0] = 3;
  
      // Element is simple, don't need to initialize subelements
    }
  
    ~FunctionElement_0()
    {
      if ( tensordims ) delete [] tensordims;
      if ( subelements )
      {
        for (unsigned int i = 0; i < elementdim(); i++)
          delete subelements[i];
        delete [] subelements;
      }
    }
  
    inline unsigned int spacedim() const
    {
      return 12;
    }
  
    inline unsigned int shapedim() const
    {
      return 3;
    }
  
    inline unsigned int tensordim(unsigned int i) const
    {
      dolfin_assert(i < 1);
      return tensordims[i];
    }
  
    inline unsigned int elementdim() const
    {
      return 1;
    }
  
    inline unsigned int rank() const
    {
      return 1;
    }
  
    void dofmap(int dofs[], const Cell& cell, const Mesh& mesh) const
    {
      dofs[0] = cell.nodeID(0);
      dofs[1] = cell.nodeID(1);
      dofs[2] = cell.nodeID(2);
      dofs[3] = cell.nodeID(3);
      int offset = mesh.noNodes();
      dofs[4] = offset + cell.nodeID(0);
      dofs[5] = offset + cell.nodeID(1);
      dofs[6] = offset + cell.nodeID(2);
      dofs[7] = offset + cell.nodeID(3);
      offset = offset + mesh.noNodes();
      dofs[8] = offset + cell.nodeID(0);
      dofs[9] = offset + cell.nodeID(1);
      dofs[10] = offset + cell.nodeID(2);
      dofs[11] = offset + cell.nodeID(3);
    }
  
    void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
    {
      points[0] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
      points[1] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
      points[2] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
      points[3] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
      points[4] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
      points[5] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
      points[6] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
      points[7] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
      points[8] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
      points[9] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
      points[10] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
      points[11] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
      components[0] = 0;
      components[1] = 0;
      components[2] = 0;
      components[3] = 0;
      components[4] = 1;
      components[5] = 1;
      components[6] = 1;
      components[7] = 1;
      components[8] = 2;
      components[9] = 2;
      components[10] = 2;
      components[11] = 2;
    }
  
    void vertexeval(real values[], unsigned int vertex, const real x[], const Mesh& mesh) const
    {
      // FIXME: Temporary fix for Lagrange elements
      values[0] = x[vertex];
      int offset = mesh.noNodes();
      values[1] = x[offset + vertex];
      offset = offset + mesh.noNodes();
      values[2] = x[offset + vertex];
    }
  
    const FiniteElement& operator[] (unsigned int i) const
    {
      return *this;
    }
  
    FiniteElement& operator[] (unsigned int i)
    {
      return *this;
    }
    
  private:
  
    unsigned int* tensordims;
    FiniteElement** subelements;
  
  };
    
  class FunctionElement_1 : public dolfin::FiniteElement
  {
  public:
  
    FunctionElement_1() : dolfin::FiniteElement(), tensordims(0), subelements(0)
    {
      tensordims = new unsigned int [1];
      tensordims[0] = 9;
  
      // Element is simple, don't need to initialize subelements
    }
  
    ~FunctionElement_1()
    {
      if ( tensordims ) delete [] tensordims;
      if ( subelements )
      {
        for (unsigned int i = 0; i < elementdim(); i++)
          delete subelements[i];
        delete [] subelements;
      }
    }
  
    inline unsigned int spacedim() const
    {
      return 9;
    }
  
    inline unsigned int shapedim() const
    {
      return 3;
    }
  
    inline unsigned int tensordim(unsigned int i) const
    {
      dolfin_assert(i < 1);
      return tensordims[i];
    }
  
    inline unsigned int elementdim() const
    {
      return 1;
    }
  
    inline unsigned int rank() const
    {
      return 1;
    }
  
    void dofmap(int dofs[], const Cell& cell, const Mesh& mesh) const
    {
      dofs[0] = cell.id();
      int offset = mesh.noCells();
      dofs[1] = offset + cell.id();
      offset = offset + mesh.noCells();
      dofs[2] = offset + cell.id();
      offset = offset + mesh.noCells();
      dofs[3] = offset + cell.id();
      offset = offset + mesh.noCells();
      dofs[4] = offset + cell.id();
      offset = offset + mesh.noCells();
      dofs[5] = offset + cell.id();
      offset = offset + mesh.noCells();
      dofs[6] = offset + cell.id();
      offset = offset + mesh.noCells();
      dofs[7] = offset + cell.id();
      offset = offset + mesh.noCells();
      dofs[8] = offset + cell.id();
    }
  
    void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
    {
      points[0] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
      points[1] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
      points[2] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
      points[3] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
      points[4] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
      points[5] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
      points[6] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
      points[7] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
      points[8] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
      components[0] = 0;
      components[1] = 1;
      components[2] = 2;
      components[3] = 3;
      components[4] = 4;
      components[5] = 5;
      components[6] = 6;
      components[7] = 7;
      components[8] = 8;
    }
  
    void vertexeval(real values[], unsigned int vertex, const real x[], const Mesh& mesh) const
    {
      // FIXME: Temporary fix for Lagrange elements
      values[0] = x[vertex];
      int offset = mesh.noCells();
      values[1] = x[offset + vertex];
      offset = offset + mesh.noCells();
      values[2] = x[offset + vertex];
      offset = offset + mesh.noCells();
      values[3] = x[offset + vertex];
      offset = offset + mesh.noCells();
      values[4] = x[offset + vertex];
      offset = offset + mesh.noCells();
      values[5] = x[offset + vertex];
      offset = offset + mesh.noCells();
      values[6] = x[offset + vertex];
      offset = offset + mesh.noCells();
      values[7] = x[offset + vertex];
      offset = offset + mesh.noCells();
      values[8] = x[offset + vertex];
    }
  
    const FiniteElement& operator[] (unsigned int i) const
    {
      return *this;
    }
  
    FiniteElement& operator[] (unsigned int i)
    {
      return *this;
    }
    
  private:
  
    unsigned int* tensordims;
    FiniteElement** subelements;
  
  };
    
  class FunctionElement_2 : public dolfin::FiniteElement
  {
  public:
  
    FunctionElement_2() : dolfin::FiniteElement(), tensordims(0), subelements(0)
    {
      tensordims = new unsigned int [1];
      tensordims[0] = 1;
  
      // Element is simple, don't need to initialize subelements
    }
  
    ~FunctionElement_2()
    {
      if ( tensordims ) delete [] tensordims;
      if ( subelements )
      {
        for (unsigned int i = 0; i < elementdim(); i++)
          delete subelements[i];
        delete [] subelements;
      }
    }
  
    inline unsigned int spacedim() const
    {
      return 1;
    }
  
    inline unsigned int shapedim() const
    {
      return 3;
    }
  
    inline unsigned int tensordim(unsigned int i) const
    {
      dolfin_assert(i < 1);
      return tensordims[i];
    }
  
    inline unsigned int elementdim() const
    {
      return 1;
    }
  
    inline unsigned int rank() const
    {
      return 1;
    }
  
    void dofmap(int dofs[], const Cell& cell, const Mesh& mesh) const
    {
      dofs[0] = cell.id();
    }
  
    void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
    {
      points[0] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
      components[0] = 0;
    }
  
    void vertexeval(real values[], unsigned int vertex, const real x[], const Mesh& mesh) const
    {
      // FIXME: Temporary fix for Lagrange elements
      values[0] = x[vertex];
    }
  
    const FiniteElement& operator[] (unsigned int i) const
    {
      return *this;
    }
  
    FiniteElement& operator[] (unsigned int i)
    {
      return *this;
    }
    
  private:
  
    unsigned int* tensordims;
    FiniteElement** subelements;
  
  };
  
  LinearForm(Function& w0, Function& w1, Function& w2, const real& c0, const real& c1, const real& c2) : dolfin::LinearForm(3), c0(c0), c1(c1), c2(c2)
  {
    // Create finite element for test space
    _test = new TestElement();

    // Add functions
    add(w0, new FunctionElement_0());
    add(w1, new FunctionElement_1());
    add(w2, new FunctionElement_2());
  }

  void eval(real block[], const AffineMap& map) const
  {
    // Compute coefficients
    const real c0_0 = c[0][0];
    const real c0_1 = c[0][1];
    const real c0_2 = c[0][2];
    const real c0_3 = c[0][3];
    const real c0_4 = c[0][4];
    const real c0_5 = c[0][5];
    const real c0_6 = c[0][6];
    const real c0_7 = c[0][7];
    const real c0_8 = c[0][8];
    const real c0_9 = c[0][9];
    const real c0_10 = c[0][10];
    const real c0_11 = c[0][11];
    const real c1_0 = c[1][0];
    const real c1_1 = c[1][1];
    const real c1_2 = c[1][2];
    const real c1_3 = c[1][3];
    const real c1_4 = c[1][4];
    const real c1_5 = c[1][5];
    const real c1_6 = c[1][6];
    const real c1_7 = c[1][7];
    const real c1_8 = c[1][8];

    // Compute geometry tensors
    const real G0_0_0 = map.det*c1*c0_0*map.g00 + map.det*c1*c0_0*map.g00;
    const real G0_0_1 = map.det*c1*c0_0*map.g10 + map.det*c1*c0_0*map.g10;
    const real G0_0_2 = map.det*c1*c0_0*map.g20 + map.det*c1*c0_0*map.g20;
    const real G0_1_0 = map.det*c1*c0_1*map.g00 + map.det*c1*c0_1*map.g00;
    const real G0_2_1 = map.det*c1*c0_2*map.g10 + map.det*c1*c0_2*map.g10;
    const real G0_3_2 = map.det*c1*c0_3*map.g20 + map.det*c1*c0_3*map.g20;
    const real G1_0_0 = map.det*c0*c0_0*map.g00 + map.det*c0*c0_0*map.g00;
    const real G1_0_1 = map.det*c0*c0_0*map.g10 + map.det*c0*c0_0*map.g10;
    const real G1_0_2 = map.det*c0*c0_0*map.g20 + map.det*c0*c0_0*map.g20;
    const real G1_1_0 = map.det*c0*c0_1*map.g00 + map.det*c0*c0_1*map.g00;
    const real G1_2_1 = map.det*c0*c0_2*map.g10 + map.det*c0*c0_2*map.g10;
    const real G1_3_2 = map.det*c0*c0_3*map.g20 + map.det*c0*c0_3*map.g20;
    const real G2_4_0 = map.det*c0*c0_4*map.g01 + map.det*c0*c0_4*map.g01;
    const real G2_4_1 = map.det*c0*c0_4*map.g11 + map.det*c0*c0_4*map.g11;
    const real G2_4_2 = map.det*c0*c0_4*map.g21 + map.det*c0*c0_4*map.g21;
    const real G2_5_0 = map.det*c0*c0_5*map.g01 + map.det*c0*c0_5*map.g01;
    const real G2_6_1 = map.det*c0*c0_6*map.g11 + map.det*c0*c0_6*map.g11;
    const real G2_7_2 = map.det*c0*c0_7*map.g21 + map.det*c0*c0_7*map.g21;
    const real G3_8_0 = map.det*c0*c0_8*map.g02 + map.det*c0*c0_8*map.g02;
    const real G3_8_1 = map.det*c0*c0_8*map.g12 + map.det*c0*c0_8*map.g12;
    const real G3_8_2 = map.det*c0*c0_8*map.g22 + map.det*c0*c0_8*map.g22;
    const real G3_9_0 = map.det*c0*c0_9*map.g02 + map.det*c0*c0_9*map.g02;
    const real G3_10_1 = map.det*c0*c0_10*map.g12 + map.det*c0*c0_10*map.g12;
    const real G3_11_2 = map.det*c0*c0_11*map.g22 + map.det*c0*c0_11*map.g22;
    const real G4_0_0 = map.det*c1*c0_0*map.g01;
    const real G4_0_1 = map.det*c1*c0_0*map.g11;
    const real G4_0_2 = map.det*c1*c0_0*map.g21;
    const real G4_1_0 = map.det*c1*c0_1*map.g01;
    const real G4_2_1 = map.det*c1*c0_2*map.g11;
    const real G4_3_2 = map.det*c1*c0_3*map.g21;
    const real G5_4_0 = map.det*c1*c0_4*map.g00;
    const real G5_4_1 = map.det*c1*c0_4*map.g10;
    const real G5_4_2 = map.det*c1*c0_4*map.g20;
    const real G5_5_0 = map.det*c1*c0_5*map.g00;
    const real G5_6_1 = map.det*c1*c0_6*map.g10;
    const real G5_7_2 = map.det*c1*c0_7*map.g20;
    const real G9_0_0 = map.det*c1*c0_0*map.g02;
    const real G9_0_1 = map.det*c1*c0_0*map.g12;
    const real G9_0_2 = map.det*c1*c0_0*map.g22;
    const real G9_1_0 = map.det*c1*c0_1*map.g02;
    const real G9_2_1 = map.det*c1*c0_2*map.g12;
    const real G9_3_2 = map.det*c1*c0_3*map.g22;
    const real G10_8_0 = map.det*c1*c0_8*map.g00;
    const real G10_8_1 = map.det*c1*c0_8*map.g10;
    const real G10_8_2 = map.det*c1*c0_8*map.g20;
    const real G10_9_0 = map.det*c1*c0_9*map.g00;
    const real G10_10_1 = map.det*c1*c0_10*map.g10;
    const real G10_11_2 = map.det*c1*c0_11*map.g20;
    const real G14_4_0 = map.det*c1*c0_4*map.g00;
    const real G14_4_1 = map.det*c1*c0_4*map.g10;
    const real G14_4_2 = map.det*c1*c0_4*map.g20;
    const real G14_5_0 = map.det*c1*c0_5*map.g00;
    const real G14_6_1 = map.det*c1*c0_6*map.g10;
    const real G14_7_2 = map.det*c1*c0_7*map.g20;
    const real G15_0_0 = map.det*c1*c0_0*map.g01;
    const real G15_0_1 = map.det*c1*c0_0*map.g11;
    const real G15_0_2 = map.det*c1*c0_0*map.g21;
    const real G15_1_0 = map.det*c1*c0_1*map.g01;
    const real G15_2_1 = map.det*c1*c0_2*map.g11;
    const real G15_3_2 = map.det*c1*c0_3*map.g21;
    const real G19_4_0 = map.det*c1*c0_4*map.g01 + map.det*c1*c0_4*map.g01;
    const real G19_4_1 = map.det*c1*c0_4*map.g11 + map.det*c1*c0_4*map.g11;
    const real G19_4_2 = map.det*c1*c0_4*map.g21 + map.det*c1*c0_4*map.g21;
    const real G19_5_0 = map.det*c1*c0_5*map.g01 + map.det*c1*c0_5*map.g01;
    const real G19_6_1 = map.det*c1*c0_6*map.g11 + map.det*c1*c0_6*map.g11;
    const real G19_7_2 = map.det*c1*c0_7*map.g21 + map.det*c1*c0_7*map.g21;
    const real G20_0_0 = map.det*c0*c0_0*map.g00 + map.det*c0*c0_0*map.g00;
    const real G20_0_1 = map.det*c0*c0_0*map.g10 + map.det*c0*c0_0*map.g10;
    const real G20_0_2 = map.det*c0*c0_0*map.g20 + map.det*c0*c0_0*map.g20;
    const real G20_1_0 = map.det*c0*c0_1*map.g00 + map.det*c0*c0_1*map.g00;
    const real G20_2_1 = map.det*c0*c0_2*map.g10 + map.det*c0*c0_2*map.g10;
    const real G20_3_2 = map.det*c0*c0_3*map.g20 + map.det*c0*c0_3*map.g20;
    const real G21_4_0 = map.det*c0*c0_4*map.g01 + map.det*c0*c0_4*map.g01;
    const real G21_4_1 = map.det*c0*c0_4*map.g11 + map.det*c0*c0_4*map.g11;
    const real G21_4_2 = map.det*c0*c0_4*map.g21 + map.det*c0*c0_4*map.g21;
    const real G21_5_0 = map.det*c0*c0_5*map.g01 + map.det*c0*c0_5*map.g01;
    const real G21_6_1 = map.det*c0*c0_6*map.g11 + map.det*c0*c0_6*map.g11;
    const real G21_7_2 = map.det*c0*c0_7*map.g21 + map.det*c0*c0_7*map.g21;
    const real G22_8_0 = map.det*c0*c0_8*map.g02 + map.det*c0*c0_8*map.g02;
    const real G22_8_1 = map.det*c0*c0_8*map.g12 + map.det*c0*c0_8*map.g12;
    const real G22_8_2 = map.det*c0*c0_8*map.g22 + map.det*c0*c0_8*map.g22;
    const real G22_9_0 = map.det*c0*c0_9*map.g02 + map.det*c0*c0_9*map.g02;
    const real G22_10_1 = map.det*c0*c0_10*map.g12 + map.det*c0*c0_10*map.g12;
    const real G22_11_2 = map.det*c0*c0_11*map.g22 + map.det*c0*c0_11*map.g22;
    const real G23_4_0 = map.det*c1*c0_4*map.g02;
    const real G23_4_1 = map.det*c1*c0_4*map.g12;
    const real G23_4_2 = map.det*c1*c0_4*map.g22;
    const real G23_5_0 = map.det*c1*c0_5*map.g02;
    const real G23_6_1 = map.det*c1*c0_6*map.g12;
    const real G23_7_2 = map.det*c1*c0_7*map.g22;
    const real G24_8_0 = map.det*c1*c0_8*map.g01;
    const real G24_8_1 = map.det*c1*c0_8*map.g11;
    const real G24_8_2 = map.det*c1*c0_8*map.g21;
    const real G24_9_0 = map.det*c1*c0_9*map.g01;
    const real G24_10_1 = map.det*c1*c0_10*map.g11;
    const real G24_11_2 = map.det*c1*c0_11*map.g21;
    const real G28_8_0 = map.det*c1*c0_8*map.g00;
    const real G28_8_1 = map.det*c1*c0_8*map.g10;
    const real G28_8_2 = map.det*c1*c0_8*map.g20;
    const real G28_9_0 = map.det*c1*c0_9*map.g00;
    const real G28_10_1 = map.det*c1*c0_10*map.g10;
    const real G28_11_2 = map.det*c1*c0_11*map.g20;
    const real G29_0_0 = map.det*c1*c0_0*map.g02;
    const real G29_0_1 = map.det*c1*c0_0*map.g12;
    const real G29_0_2 = map.det*c1*c0_0*map.g22;
    const real G29_1_0 = map.det*c1*c0_1*map.g02;
    const real G29_2_1 = map.det*c1*c0_2*map.g12;
    const real G29_3_2 = map.det*c1*c0_3*map.g22;
    const real G33_8_0 = map.det*c1*c0_8*map.g01;
    const real G33_8_1 = map.det*c1*c0_8*map.g11;
    const real G33_8_2 = map.det*c1*c0_8*map.g21;
    const real G33_9_0 = map.det*c1*c0_9*map.g01;
    const real G33_10_1 = map.det*c1*c0_10*map.g11;
    const real G33_11_2 = map.det*c1*c0_11*map.g21;
    const real G34_4_0 = map.det*c1*c0_4*map.g02;
    const real G34_4_1 = map.det*c1*c0_4*map.g12;
    const real G34_4_2 = map.det*c1*c0_4*map.g22;
    const real G34_5_0 = map.det*c1*c0_5*map.g02;
    const real G34_6_1 = map.det*c1*c0_6*map.g12;
    const real G34_7_2 = map.det*c1*c0_7*map.g22;
    const real G38_8_0 = map.det*c1*c0_8*map.g02 + map.det*c1*c0_8*map.g02;
    const real G38_8_1 = map.det*c1*c0_8*map.g12 + map.det*c1*c0_8*map.g12;
    const real G38_8_2 = map.det*c1*c0_8*map.g22 + map.det*c1*c0_8*map.g22;
    const real G38_9_0 = map.det*c1*c0_9*map.g02 + map.det*c1*c0_9*map.g02;
    const real G38_10_1 = map.det*c1*c0_10*map.g12 + map.det*c1*c0_10*map.g12;
    const real G38_11_2 = map.det*c1*c0_11*map.g22 + map.det*c1*c0_11*map.g22;
    const real G39_0_0 = map.det*c0*c0_0*map.g00 + map.det*c0*c0_0*map.g00;
    const real G39_0_1 = map.det*c0*c0_0*map.g10 + map.det*c0*c0_0*map.g10;
    const real G39_0_2 = map.det*c0*c0_0*map.g20 + map.det*c0*c0_0*map.g20;
    const real G39_1_0 = map.det*c0*c0_1*map.g00 + map.det*c0*c0_1*map.g00;
    const real G39_2_1 = map.det*c0*c0_2*map.g10 + map.det*c0*c0_2*map.g10;
    const real G39_3_2 = map.det*c0*c0_3*map.g20 + map.det*c0*c0_3*map.g20;
    const real G40_4_0 = map.det*c0*c0_4*map.g01 + map.det*c0*c0_4*map.g01;
    const real G40_4_1 = map.det*c0*c0_4*map.g11 + map.det*c0*c0_4*map.g11;
    const real G40_4_2 = map.det*c0*c0_4*map.g21 + map.det*c0*c0_4*map.g21;
    const real G40_5_0 = map.det*c0*c0_5*map.g01 + map.det*c0*c0_5*map.g01;
    const real G40_6_1 = map.det*c0*c0_6*map.g11 + map.det*c0*c0_6*map.g11;
    const real G40_7_2 = map.det*c0*c0_7*map.g21 + map.det*c0*c0_7*map.g21;
    const real G41_8_0 = map.det*c0*c0_8*map.g02 + map.det*c0*c0_8*map.g02;
    const real G41_8_1 = map.det*c0*c0_8*map.g12 + map.det*c0*c0_8*map.g12;
    const real G41_8_2 = map.det*c0*c0_8*map.g22 + map.det*c0*c0_8*map.g22;
    const real G41_9_0 = map.det*c0*c0_9*map.g02 + map.det*c0*c0_9*map.g02;
    const real G41_10_1 = map.det*c0*c0_10*map.g12 + map.det*c0*c0_10*map.g12;
    const real G41_11_2 = map.det*c0*c0_11*map.g22 + map.det*c0*c0_11*map.g22;
    const real G42_0_0_0 = map.det*c0_0*c1_0*map.g00 + map.det*c1_0*c0_0*map.g00;
    const real G42_0_0_1 = map.det*c0_0*c1_0*map.g10 + map.det*c1_0*c0_0*map.g10;
    const real G42_0_0_2 = map.det*c0_0*c1_0*map.g20 + map.det*c1_0*c0_0*map.g20;
    const real G42_1_0_0 = map.det*c0_1*c1_0*map.g00 + map.det*c1_0*c0_1*map.g00;
    const real G42_2_0_1 = map.det*c0_2*c1_0*map.g10 + map.det*c1_0*c0_2*map.g10;
    const real G42_3_0_2 = map.det*c0_3*c1_0*map.g20 + map.det*c1_0*c0_3*map.g20;
    const real G43_0_0_0 = map.det*c0_0*c1_0*map.g00 + map.det*c1_0*c0_0*map.g00;
    const real G43_0_0_1 = map.det*c0_0*c1_0*map.g10 + map.det*c1_0*c0_0*map.g10;
    const real G43_0_0_2 = map.det*c0_0*c1_0*map.g20 + map.det*c1_0*c0_0*map.g20;
    const real G43_1_0_0 = map.det*c0_1*c1_0*map.g00 + map.det*c1_0*c0_1*map.g00;
    const real G43_2_0_1 = map.det*c0_2*c1_0*map.g10 + map.det*c1_0*c0_2*map.g10;
    const real G43_3_0_2 = map.det*c0_3*c1_0*map.g20 + map.det*c1_0*c0_3*map.g20;
    const real G44_0_1_0 = map.det*c0_0*c1_1*map.g01;
    const real G44_0_1_1 = map.det*c0_0*c1_1*map.g11;
    const real G44_0_1_2 = map.det*c0_0*c1_1*map.g21;
    const real G44_1_1_0 = map.det*c0_1*c1_1*map.g01;
    const real G44_2_1_1 = map.det*c0_2*c1_1*map.g11;
    const real G44_3_1_2 = map.det*c0_3*c1_1*map.g21;
    const real G45_4_1_0 = map.det*c0_4*c1_1*map.g00;
    const real G45_4_1_1 = map.det*c0_4*c1_1*map.g10;
    const real G45_4_1_2 = map.det*c0_4*c1_1*map.g20;
    const real G45_5_1_0 = map.det*c0_5*c1_1*map.g00;
    const real G45_6_1_1 = map.det*c0_6*c1_1*map.g10;
    const real G45_7_1_2 = map.det*c0_7*c1_1*map.g20;
    const real G46_0_2_0 = map.det*c0_0*c1_2*map.g02;
    const real G46_0_2_1 = map.det*c0_0*c1_2*map.g12;
    const real G46_0_2_2 = map.det*c0_0*c1_2*map.g22;
    const real G46_1_2_0 = map.det*c0_1*c1_2*map.g02;
    const real G46_2_2_1 = map.det*c0_2*c1_2*map.g12;
    const real G46_3_2_2 = map.det*c0_3*c1_2*map.g22;
    const real G47_8_2_0 = map.det*c0_8*c1_2*map.g00;
    const real G47_8_2_1 = map.det*c0_8*c1_2*map.g10;
    const real G47_8_2_2 = map.det*c0_8*c1_2*map.g20;
    const real G47_9_2_0 = map.det*c0_9*c1_2*map.g00;
    const real G47_10_2_1 = map.det*c0_10*c1_2*map.g10;
    const real G47_11_2_2 = map.det*c0_11*c1_2*map.g20;
    const real G48_3_4_0 = map.det*c1_3*c0_4*map.g00;
    const real G48_3_4_1 = map.det*c1_3*c0_4*map.g10;
    const real G48_3_4_2 = map.det*c1_3*c0_4*map.g20;
    const real G48_3_5_0 = map.det*c1_3*c0_5*map.g00;
    const real G48_3_6_1 = map.det*c1_3*c0_6*map.g10;
    const real G48_3_7_2 = map.det*c1_3*c0_7*map.g20;
    const real G49_3_0_0 = map.det*c1_3*c0_0*map.g01;
    const real G49_3_0_1 = map.det*c1_3*c0_0*map.g11;
    const real G49_3_0_2 = map.det*c1_3*c0_0*map.g21;
    const real G49_3_1_0 = map.det*c1_3*c0_1*map.g01;
    const real G49_3_2_1 = map.det*c1_3*c0_2*map.g11;
    const real G49_3_3_2 = map.det*c1_3*c0_3*map.g21;
    const real G50_6_8_0 = map.det*c1_6*c0_8*map.g00;
    const real G50_6_8_1 = map.det*c1_6*c0_8*map.g10;
    const real G50_6_8_2 = map.det*c1_6*c0_8*map.g20;
    const real G50_6_9_0 = map.det*c1_6*c0_9*map.g00;
    const real G50_6_10_1 = map.det*c1_6*c0_10*map.g10;
    const real G50_6_11_2 = map.det*c1_6*c0_11*map.g20;
    const real G51_6_0_0 = map.det*c1_6*c0_0*map.g02;
    const real G51_6_0_1 = map.det*c1_6*c0_0*map.g12;
    const real G51_6_0_2 = map.det*c1_6*c0_0*map.g22;
    const real G51_6_1_0 = map.det*c1_6*c0_1*map.g02;
    const real G51_6_2_1 = map.det*c1_6*c0_2*map.g12;
    const real G51_6_3_2 = map.det*c1_6*c0_3*map.g22;
    const real G52_0_3_0 = map.det*c0_0*c1_3*map.g00;
    const real G52_0_3_1 = map.det*c0_0*c1_3*map.g10;
    const real G52_0_3_2 = map.det*c0_0*c1_3*map.g20;
    const real G52_1_3_0 = map.det*c0_1*c1_3*map.g00;
    const real G52_2_3_1 = map.det*c0_2*c1_3*map.g10;
    const real G52_3_3_2 = map.det*c0_3*c1_3*map.g20;
    const real G53_0_3_0 = map.det*c0_0*c1_3*map.g00;
    const real G53_0_3_1 = map.det*c0_0*c1_3*map.g10;
    const real G53_0_3_2 = map.det*c0_0*c1_3*map.g20;
    const real G53_1_3_0 = map.det*c0_1*c1_3*map.g00;
    const real G53_2_3_1 = map.det*c0_2*c1_3*map.g10;
    const real G53_3_3_2 = map.det*c0_3*c1_3*map.g20;
    const real G54_0_4_0 = map.det*c0_0*c1_4*map.g01;
    const real G54_0_4_1 = map.det*c0_0*c1_4*map.g11;
    const real G54_0_4_2 = map.det*c0_0*c1_4*map.g21;
    const real G54_1_4_0 = map.det*c0_1*c1_4*map.g01;
    const real G54_2_4_1 = map.det*c0_2*c1_4*map.g11;
    const real G54_3_4_2 = map.det*c0_3*c1_4*map.g21;
    const real G55_4_4_0 = map.det*c0_4*c1_4*map.g00;
    const real G55_4_4_1 = map.det*c0_4*c1_4*map.g10;
    const real G55_4_4_2 = map.det*c0_4*c1_4*map.g20;
    const real G55_5_4_0 = map.det*c0_5*c1_4*map.g00;
    const real G55_6_4_1 = map.det*c0_6*c1_4*map.g10;
    const real G55_7_4_2 = map.det*c0_7*c1_4*map.g20;
    const real G56_0_5_0 = map.det*c0_0*c1_5*map.g02;
    const real G56_0_5_1 = map.det*c0_0*c1_5*map.g12;
    const real G56_0_5_2 = map.det*c0_0*c1_5*map.g22;
    const real G56_1_5_0 = map.det*c0_1*c1_5*map.g02;
    const real G56_2_5_1 = map.det*c0_2*c1_5*map.g12;
    const real G56_3_5_2 = map.det*c0_3*c1_5*map.g22;
    const real G57_8_5_0 = map.det*c0_8*c1_5*map.g00;
    const real G57_8_5_1 = map.det*c0_8*c1_5*map.g10;
    const real G57_8_5_2 = map.det*c0_8*c1_5*map.g20;
    const real G57_9_5_0 = map.det*c0_9*c1_5*map.g00;
    const real G57_10_5_1 = map.det*c0_10*c1_5*map.g10;
    const real G57_11_5_2 = map.det*c0_11*c1_5*map.g20;
    const real G58_0_0_0 = map.det*c1_0*c0_0*map.g01;
    const real G58_0_0_1 = map.det*c1_0*c0_0*map.g11;
    const real G58_0_0_2 = map.det*c1_0*c0_0*map.g21;
    const real G58_0_1_0 = map.det*c1_0*c0_1*map.g01;
    const real G58_0_2_1 = map.det*c1_0*c0_2*map.g11;
    const real G58_0_3_2 = map.det*c1_0*c0_3*map.g21;
    const real G59_0_4_0 = map.det*c1_0*c0_4*map.g00;
    const real G59_0_4_1 = map.det*c1_0*c0_4*map.g10;
    const real G59_0_4_2 = map.det*c1_0*c0_4*map.g20;
    const real G59_0_5_0 = map.det*c1_0*c0_5*map.g00;
    const real G59_0_6_1 = map.det*c1_0*c0_6*map.g10;
    const real G59_0_7_2 = map.det*c1_0*c0_7*map.g20;
    const real G60_3_4_0 = map.det*c1_3*c0_4*map.g01;
    const real G60_3_4_1 = map.det*c1_3*c0_4*map.g11;
    const real G60_3_4_2 = map.det*c1_3*c0_4*map.g21;
    const real G60_3_5_0 = map.det*c1_3*c0_5*map.g01;
    const real G60_3_6_1 = map.det*c1_3*c0_6*map.g11;
    const real G60_3_7_2 = map.det*c1_3*c0_7*map.g21;
    const real G61_3_4_0 = map.det*c1_3*c0_4*map.g01;
    const real G61_3_4_1 = map.det*c1_3*c0_4*map.g11;
    const real G61_3_4_2 = map.det*c1_3*c0_4*map.g21;
    const real G61_3_5_0 = map.det*c1_3*c0_5*map.g01;
    const real G61_3_6_1 = map.det*c1_3*c0_6*map.g11;
    const real G61_3_7_2 = map.det*c1_3*c0_7*map.g21;
    const real G62_6_8_0 = map.det*c1_6*c0_8*map.g01;
    const real G62_6_8_1 = map.det*c1_6*c0_8*map.g11;
    const real G62_6_8_2 = map.det*c1_6*c0_8*map.g21;
    const real G62_6_9_0 = map.det*c1_6*c0_9*map.g01;
    const real G62_6_10_1 = map.det*c1_6*c0_10*map.g11;
    const real G62_6_11_2 = map.det*c1_6*c0_11*map.g21;
    const real G63_6_4_0 = map.det*c1_6*c0_4*map.g02;
    const real G63_6_4_1 = map.det*c1_6*c0_4*map.g12;
    const real G63_6_4_2 = map.det*c1_6*c0_4*map.g22;
    const real G63_6_5_0 = map.det*c1_6*c0_5*map.g02;
    const real G63_6_6_1 = map.det*c1_6*c0_6*map.g12;
    const real G63_6_7_2 = map.det*c1_6*c0_7*map.g22;
    const real G64_0_6_0 = map.det*c0_0*c1_6*map.g00;
    const real G64_0_6_1 = map.det*c0_0*c1_6*map.g10;
    const real G64_0_6_2 = map.det*c0_0*c1_6*map.g20;
    const real G64_1_6_0 = map.det*c0_1*c1_6*map.g00;
    const real G64_2_6_1 = map.det*c0_2*c1_6*map.g10;
    const real G64_3_6_2 = map.det*c0_3*c1_6*map.g20;
    const real G65_0_6_0 = map.det*c0_0*c1_6*map.g00;
    const real G65_0_6_1 = map.det*c0_0*c1_6*map.g10;
    const real G65_0_6_2 = map.det*c0_0*c1_6*map.g20;
    const real G65_1_6_0 = map.det*c0_1*c1_6*map.g00;
    const real G65_2_6_1 = map.det*c0_2*c1_6*map.g10;
    const real G65_3_6_2 = map.det*c0_3*c1_6*map.g20;
    const real G66_0_7_0 = map.det*c0_0*c1_7*map.g01;
    const real G66_0_7_1 = map.det*c0_0*c1_7*map.g11;
    const real G66_0_7_2 = map.det*c0_0*c1_7*map.g21;
    const real G66_1_7_0 = map.det*c0_1*c1_7*map.g01;
    const real G66_2_7_1 = map.det*c0_2*c1_7*map.g11;
    const real G66_3_7_2 = map.det*c0_3*c1_7*map.g21;
    const real G67_4_7_0 = map.det*c0_4*c1_7*map.g00;
    const real G67_4_7_1 = map.det*c0_4*c1_7*map.g10;
    const real G67_4_7_2 = map.det*c0_4*c1_7*map.g20;
    const real G67_5_7_0 = map.det*c0_5*c1_7*map.g00;
    const real G67_6_7_1 = map.det*c0_6*c1_7*map.g10;
    const real G67_7_7_2 = map.det*c0_7*c1_7*map.g20;
    const real G68_0_8_0 = map.det*c0_0*c1_8*map.g02;
    const real G68_0_8_1 = map.det*c0_0*c1_8*map.g12;
    const real G68_0_8_2 = map.det*c0_0*c1_8*map.g22;
    const real G68_1_8_0 = map.det*c0_1*c1_8*map.g02;
    const real G68_2_8_1 = map.det*c0_2*c1_8*map.g12;
    const real G68_3_8_2 = map.det*c0_3*c1_8*map.g22;
    const real G69_8_8_0 = map.det*c0_8*c1_8*map.g00;
    const real G69_8_8_1 = map.det*c0_8*c1_8*map.g10;
    const real G69_8_8_2 = map.det*c0_8*c1_8*map.g20;
    const real G69_9_8_0 = map.det*c0_9*c1_8*map.g00;
    const real G69_10_8_1 = map.det*c0_10*c1_8*map.g10;
    const real G69_11_8_2 = map.det*c0_11*c1_8*map.g20;
    const real G70_0_0_0 = map.det*c1_0*c0_0*map.g02;
    const real G70_0_0_1 = map.det*c1_0*c0_0*map.g12;
    const real G70_0_0_2 = map.det*c1_0*c0_0*map.g22;
    const real G70_0_1_0 = map.det*c1_0*c0_1*map.g02;
    const real G70_0_2_1 = map.det*c1_0*c0_2*map.g12;
    const real G70_0_3_2 = map.det*c1_0*c0_3*map.g22;
    const real G71_0_8_0 = map.det*c1_0*c0_8*map.g00;
    const real G71_0_8_1 = map.det*c1_0*c0_8*map.g10;
    const real G71_0_8_2 = map.det*c1_0*c0_8*map.g20;
    const real G71_0_9_0 = map.det*c1_0*c0_9*map.g00;
    const real G71_0_10_1 = map.det*c1_0*c0_10*map.g10;
    const real G71_0_11_2 = map.det*c1_0*c0_11*map.g20;
    const real G72_3_4_0 = map.det*c1_3*c0_4*map.g02;
    const real G72_3_4_1 = map.det*c1_3*c0_4*map.g12;
    const real G72_3_4_2 = map.det*c1_3*c0_4*map.g22;
    const real G72_3_5_0 = map.det*c1_3*c0_5*map.g02;
    const real G72_3_6_1 = map.det*c1_3*c0_6*map.g12;
    const real G72_3_7_2 = map.det*c1_3*c0_7*map.g22;
    const real G73_3_8_0 = map.det*c1_3*c0_8*map.g01;
    const real G73_3_8_1 = map.det*c1_3*c0_8*map.g11;
    const real G73_3_8_2 = map.det*c1_3*c0_8*map.g21;
    const real G73_3_9_0 = map.det*c1_3*c0_9*map.g01;
    const real G73_3_10_1 = map.det*c1_3*c0_10*map.g11;
    const real G73_3_11_2 = map.det*c1_3*c0_11*map.g21;
    const real G74_6_8_0 = map.det*c1_6*c0_8*map.g02;
    const real G74_6_8_1 = map.det*c1_6*c0_8*map.g12;
    const real G74_6_8_2 = map.det*c1_6*c0_8*map.g22;
    const real G74_6_9_0 = map.det*c1_6*c0_9*map.g02;
    const real G74_6_10_1 = map.det*c1_6*c0_10*map.g12;
    const real G74_6_11_2 = map.det*c1_6*c0_11*map.g22;
    const real G75_6_8_0 = map.det*c1_6*c0_8*map.g02;
    const real G75_6_8_1 = map.det*c1_6*c0_8*map.g12;
    const real G75_6_8_2 = map.det*c1_6*c0_8*map.g22;
    const real G75_6_9_0 = map.det*c1_6*c0_9*map.g02;
    const real G75_6_10_1 = map.det*c1_6*c0_10*map.g12;
    const real G75_6_11_2 = map.det*c1_6*c0_11*map.g22;
    const real G76_4_0_0 = map.det*c0_4*c1_0*map.g00;
    const real G76_4_0_1 = map.det*c0_4*c1_0*map.g10;
    const real G76_4_0_2 = map.det*c0_4*c1_0*map.g20;
    const real G76_5_0_0 = map.det*c0_5*c1_0*map.g00;
    const real G76_6_0_1 = map.det*c0_6*c1_0*map.g10;
    const real G76_7_0_2 = map.det*c0_7*c1_0*map.g20;
    const real G77_0_0_0 = map.det*c0_0*c1_0*map.g01;
    const real G77_0_0_1 = map.det*c0_0*c1_0*map.g11;
    const real G77_0_0_2 = map.det*c0_0*c1_0*map.g21;
    const real G77_1_0_0 = map.det*c0_1*c1_0*map.g01;
    const real G77_2_0_1 = map.det*c0_2*c1_0*map.g11;
    const real G77_3_0_2 = map.det*c0_3*c1_0*map.g21;
    const real G78_4_1_0 = map.det*c0_4*c1_1*map.g01;
    const real G78_4_1_1 = map.det*c0_4*c1_1*map.g11;
    const real G78_4_1_2 = map.det*c0_4*c1_1*map.g21;
    const real G78_5_1_0 = map.det*c0_5*c1_1*map.g01;
    const real G78_6_1_1 = map.det*c0_6*c1_1*map.g11;
    const real G78_7_1_2 = map.det*c0_7*c1_1*map.g21;
    const real G79_4_1_0 = map.det*c0_4*c1_1*map.g01;
    const real G79_4_1_1 = map.det*c0_4*c1_1*map.g11;
    const real G79_4_1_2 = map.det*c0_4*c1_1*map.g21;
    const real G79_5_1_0 = map.det*c0_5*c1_1*map.g01;
    const real G79_6_1_1 = map.det*c0_6*c1_1*map.g11;
    const real G79_7_1_2 = map.det*c0_7*c1_1*map.g21;
    const real G80_4_2_0 = map.det*c0_4*c1_2*map.g02;
    const real G80_4_2_1 = map.det*c0_4*c1_2*map.g12;
    const real G80_4_2_2 = map.det*c0_4*c1_2*map.g22;
    const real G80_5_2_0 = map.det*c0_5*c1_2*map.g02;
    const real G80_6_2_1 = map.det*c0_6*c1_2*map.g12;
    const real G80_7_2_2 = map.det*c0_7*c1_2*map.g22;
    const real G81_8_2_0 = map.det*c0_8*c1_2*map.g01;
    const real G81_8_2_1 = map.det*c0_8*c1_2*map.g11;
    const real G81_8_2_2 = map.det*c0_8*c1_2*map.g21;
    const real G81_9_2_0 = map.det*c0_9*c1_2*map.g01;
    const real G81_10_2_1 = map.det*c0_10*c1_2*map.g11;
    const real G81_11_2_2 = map.det*c0_11*c1_2*map.g21;
    const real G82_1_0_0 = map.det*c1_1*c0_0*map.g00;
    const real G82_1_0_1 = map.det*c1_1*c0_0*map.g10;
    const real G82_1_0_2 = map.det*c1_1*c0_0*map.g20;
    const real G82_1_1_0 = map.det*c1_1*c0_1*map.g00;
    const real G82_1_2_1 = map.det*c1_1*c0_2*map.g10;
    const real G82_1_3_2 = map.det*c1_1*c0_3*map.g20;
    const real G83_1_0_0 = map.det*c1_1*c0_0*map.g00;
    const real G83_1_0_1 = map.det*c1_1*c0_0*map.g10;
    const real G83_1_0_2 = map.det*c1_1*c0_0*map.g20;
    const real G83_1_1_0 = map.det*c1_1*c0_1*map.g00;
    const real G83_1_2_1 = map.det*c1_1*c0_2*map.g10;
    const real G83_1_3_2 = map.det*c1_1*c0_3*map.g20;
    const real G84_4_4_0 = map.det*c1_4*c0_4*map.g00;
    const real G84_4_4_1 = map.det*c1_4*c0_4*map.g10;
    const real G84_4_4_2 = map.det*c1_4*c0_4*map.g20;
    const real G84_4_5_0 = map.det*c1_4*c0_5*map.g00;
    const real G84_4_6_1 = map.det*c1_4*c0_6*map.g10;
    const real G84_4_7_2 = map.det*c1_4*c0_7*map.g20;
    const real G85_4_0_0 = map.det*c1_4*c0_0*map.g01;
    const real G85_4_0_1 = map.det*c1_4*c0_0*map.g11;
    const real G85_4_0_2 = map.det*c1_4*c0_0*map.g21;
    const real G85_4_1_0 = map.det*c1_4*c0_1*map.g01;
    const real G85_4_2_1 = map.det*c1_4*c0_2*map.g11;
    const real G85_4_3_2 = map.det*c1_4*c0_3*map.g21;
    const real G86_7_8_0 = map.det*c1_7*c0_8*map.g00;
    const real G86_7_8_1 = map.det*c1_7*c0_8*map.g10;
    const real G86_7_8_2 = map.det*c1_7*c0_8*map.g20;
    const real G86_7_9_0 = map.det*c1_7*c0_9*map.g00;
    const real G86_7_10_1 = map.det*c1_7*c0_10*map.g10;
    const real G86_7_11_2 = map.det*c1_7*c0_11*map.g20;
    const real G87_7_0_0 = map.det*c1_7*c0_0*map.g02;
    const real G87_7_0_1 = map.det*c1_7*c0_0*map.g12;
    const real G87_7_0_2 = map.det*c1_7*c0_0*map.g22;
    const real G87_7_1_0 = map.det*c1_7*c0_1*map.g02;
    const real G87_7_2_1 = map.det*c1_7*c0_2*map.g12;
    const real G87_7_3_2 = map.det*c1_7*c0_3*map.g22;
    const real G88_4_3_0 = map.det*c0_4*c1_3*map.g00;
    const real G88_4_3_1 = map.det*c0_4*c1_3*map.g10;
    const real G88_4_3_2 = map.det*c0_4*c1_3*map.g20;
    const real G88_5_3_0 = map.det*c0_5*c1_3*map.g00;
    const real G88_6_3_1 = map.det*c0_6*c1_3*map.g10;
    const real G88_7_3_2 = map.det*c0_7*c1_3*map.g20;
    const real G89_0_3_0 = map.det*c0_0*c1_3*map.g01;
    const real G89_0_3_1 = map.det*c0_0*c1_3*map.g11;
    const real G89_0_3_2 = map.det*c0_0*c1_3*map.g21;
    const real G89_1_3_0 = map.det*c0_1*c1_3*map.g01;
    const real G89_2_3_1 = map.det*c0_2*c1_3*map.g11;
    const real G89_3_3_2 = map.det*c0_3*c1_3*map.g21;
    const real G90_4_4_0 = map.det*c0_4*c1_4*map.g01 + map.det*c1_4*c0_4*map.g01;
    const real G90_4_4_1 = map.det*c0_4*c1_4*map.g11 + map.det*c1_4*c0_4*map.g11;
    const real G90_4_4_2 = map.det*c0_4*c1_4*map.g21 + map.det*c1_4*c0_4*map.g21;
    const real G90_5_4_0 = map.det*c0_5*c1_4*map.g01 + map.det*c1_4*c0_5*map.g01;
    const real G90_6_4_1 = map.det*c0_6*c1_4*map.g11 + map.det*c1_4*c0_6*map.g11;
    const real G90_7_4_2 = map.det*c0_7*c1_4*map.g21 + map.det*c1_4*c0_7*map.g21;
    const real G91_4_4_0 = map.det*c0_4*c1_4*map.g01 + map.det*c1_4*c0_4*map.g01;
    const real G91_4_4_1 = map.det*c0_4*c1_4*map.g11 + map.det*c1_4*c0_4*map.g11;
    const real G91_4_4_2 = map.det*c0_4*c1_4*map.g21 + map.det*c1_4*c0_4*map.g21;
    const real G91_5_4_0 = map.det*c0_5*c1_4*map.g01 + map.det*c1_4*c0_5*map.g01;
    const real G91_6_4_1 = map.det*c0_6*c1_4*map.g11 + map.det*c1_4*c0_6*map.g11;
    const real G91_7_4_2 = map.det*c0_7*c1_4*map.g21 + map.det*c1_4*c0_7*map.g21;
    const real G92_4_5_0 = map.det*c0_4*c1_5*map.g02;
    const real G92_4_5_1 = map.det*c0_4*c1_5*map.g12;
    const real G92_4_5_2 = map.det*c0_4*c1_5*map.g22;
    const real G92_5_5_0 = map.det*c0_5*c1_5*map.g02;
    const real G92_6_5_1 = map.det*c0_6*c1_5*map.g12;
    const real G92_7_5_2 = map.det*c0_7*c1_5*map.g22;
    const real G93_8_5_0 = map.det*c0_8*c1_5*map.g01;
    const real G93_8_5_1 = map.det*c0_8*c1_5*map.g11;
    const real G93_8_5_2 = map.det*c0_8*c1_5*map.g21;
    const real G93_9_5_0 = map.det*c0_9*c1_5*map.g01;
    const real G93_10_5_1 = map.det*c0_10*c1_5*map.g11;
    const real G93_11_5_2 = map.det*c0_11*c1_5*map.g21;
    const real G94_1_0_0 = map.det*c1_1*c0_0*map.g01;
    const real G94_1_0_1 = map.det*c1_1*c0_0*map.g11;
    const real G94_1_0_2 = map.det*c1_1*c0_0*map.g21;
    const real G94_1_1_0 = map.det*c1_1*c0_1*map.g01;
    const real G94_1_2_1 = map.det*c1_1*c0_2*map.g11;
    const real G94_1_3_2 = map.det*c1_1*c0_3*map.g21;
    const real G95_1_4_0 = map.det*c1_1*c0_4*map.g00;
    const real G95_1_4_1 = map.det*c1_1*c0_4*map.g10;
    const real G95_1_4_2 = map.det*c1_1*c0_4*map.g20;
    const real G95_1_5_0 = map.det*c1_1*c0_5*map.g00;
    const real G95_1_6_1 = map.det*c1_1*c0_6*map.g10;
    const real G95_1_7_2 = map.det*c1_1*c0_7*map.g20;
    const real G96_7_8_0 = map.det*c1_7*c0_8*map.g01;
    const real G96_7_8_1 = map.det*c1_7*c0_8*map.g11;
    const real G96_7_8_2 = map.det*c1_7*c0_8*map.g21;
    const real G96_7_9_0 = map.det*c1_7*c0_9*map.g01;
    const real G96_7_10_1 = map.det*c1_7*c0_10*map.g11;
    const real G96_7_11_2 = map.det*c1_7*c0_11*map.g21;
    const real G97_7_4_0 = map.det*c1_7*c0_4*map.g02;
    const real G97_7_4_1 = map.det*c1_7*c0_4*map.g12;
    const real G97_7_4_2 = map.det*c1_7*c0_4*map.g22;
    const real G97_7_5_0 = map.det*c1_7*c0_5*map.g02;
    const real G97_7_6_1 = map.det*c1_7*c0_6*map.g12;
    const real G97_7_7_2 = map.det*c1_7*c0_7*map.g22;
    const real G98_4_6_0 = map.det*c0_4*c1_6*map.g00;
    const real G98_4_6_1 = map.det*c0_4*c1_6*map.g10;
    const real G98_4_6_2 = map.det*c0_4*c1_6*map.g20;
    const real G98_5_6_0 = map.det*c0_5*c1_6*map.g00;
    const real G98_6_6_1 = map.det*c0_6*c1_6*map.g10;
    const real G98_7_6_2 = map.det*c0_7*c1_6*map.g20;
    const real G99_0_6_0 = map.det*c0_0*c1_6*map.g01;
    const real G99_0_6_1 = map.det*c0_0*c1_6*map.g11;
    const real G99_0_6_2 = map.det*c0_0*c1_6*map.g21;
    const real G99_1_6_0 = map.det*c0_1*c1_6*map.g01;
    const real G99_2_6_1 = map.det*c0_2*c1_6*map.g11;
    const real G99_3_6_2 = map.det*c0_3*c1_6*map.g21;
    const real G100_4_7_0 = map.det*c0_4*c1_7*map.g01;
    const real G100_4_7_1 = map.det*c0_4*c1_7*map.g11;
    const real G100_4_7_2 = map.det*c0_4*c1_7*map.g21;
    const real G100_5_7_0 = map.det*c0_5*c1_7*map.g01;
    const real G100_6_7_1 = map.det*c0_6*c1_7*map.g11;
    const real G100_7_7_2 = map.det*c0_7*c1_7*map.g21;
    const real G101_4_7_0 = map.det*c0_4*c1_7*map.g01;
    const real G101_4_7_1 = map.det*c0_4*c1_7*map.g11;
    const real G101_4_7_2 = map.det*c0_4*c1_7*map.g21;
    const real G101_5_7_0 = map.det*c0_5*c1_7*map.g01;
    const real G101_6_7_1 = map.det*c0_6*c1_7*map.g11;
    const real G101_7_7_2 = map.det*c0_7*c1_7*map.g21;
    const real G102_4_8_0 = map.det*c0_4*c1_8*map.g02;
    const real G102_4_8_1 = map.det*c0_4*c1_8*map.g12;
    const real G102_4_8_2 = map.det*c0_4*c1_8*map.g22;
    const real G102_5_8_0 = map.det*c0_5*c1_8*map.g02;
    const real G102_6_8_1 = map.det*c0_6*c1_8*map.g12;
    const real G102_7_8_2 = map.det*c0_7*c1_8*map.g22;
    const real G103_8_8_0 = map.det*c0_8*c1_8*map.g01;
    const real G103_8_8_1 = map.det*c0_8*c1_8*map.g11;
    const real G103_8_8_2 = map.det*c0_8*c1_8*map.g21;
    const real G103_9_8_0 = map.det*c0_9*c1_8*map.g01;
    const real G103_10_8_1 = map.det*c0_10*c1_8*map.g11;
    const real G103_11_8_2 = map.det*c0_11*c1_8*map.g21;
    const real G104_1_0_0 = map.det*c1_1*c0_0*map.g02;
    const real G104_1_0_1 = map.det*c1_1*c0_0*map.g12;
    const real G104_1_0_2 = map.det*c1_1*c0_0*map.g22;
    const real G104_1_1_0 = map.det*c1_1*c0_1*map.g02;
    const real G104_1_2_1 = map.det*c1_1*c0_2*map.g12;
    const real G104_1_3_2 = map.det*c1_1*c0_3*map.g22;
    const real G105_1_8_0 = map.det*c1_1*c0_8*map.g00;
    const real G105_1_8_1 = map.det*c1_1*c0_8*map.g10;
    const real G105_1_8_2 = map.det*c1_1*c0_8*map.g20;
    const real G105_1_9_0 = map.det*c1_1*c0_9*map.g00;
    const real G105_1_10_1 = map.det*c1_1*c0_10*map.g10;
    const real G105_1_11_2 = map.det*c1_1*c0_11*map.g20;
    const real G106_4_4_0 = map.det*c1_4*c0_4*map.g02;
    const real G106_4_4_1 = map.det*c1_4*c0_4*map.g12;
    const real G106_4_4_2 = map.det*c1_4*c0_4*map.g22;
    const real G106_4_5_0 = map.det*c1_4*c0_5*map.g02;
    const real G106_4_6_1 = map.det*c1_4*c0_6*map.g12;
    const real G106_4_7_2 = map.det*c1_4*c0_7*map.g22;
    const real G107_4_8_0 = map.det*c1_4*c0_8*map.g01;
    const real G107_4_8_1 = map.det*c1_4*c0_8*map.g11;
    const real G107_4_8_2 = map.det*c1_4*c0_8*map.g21;
    const real G107_4_9_0 = map.det*c1_4*c0_9*map.g01;
    const real G107_4_10_1 = map.det*c1_4*c0_10*map.g11;
    const real G107_4_11_2 = map.det*c1_4*c0_11*map.g21;
    const real G108_7_8_0 = map.det*c1_7*c0_8*map.g02;
    const real G108_7_8_1 = map.det*c1_7*c0_8*map.g12;
    const real G108_7_8_2 = map.det*c1_7*c0_8*map.g22;
    const real G108_7_9_0 = map.det*c1_7*c0_9*map.g02;
    const real G108_7_10_1 = map.det*c1_7*c0_10*map.g12;
    const real G108_7_11_2 = map.det*c1_7*c0_11*map.g22;
    const real G109_7_8_0 = map.det*c1_7*c0_8*map.g02;
    const real G109_7_8_1 = map.det*c1_7*c0_8*map.g12;
    const real G109_7_8_2 = map.det*c1_7*c0_8*map.g22;
    const real G109_7_9_0 = map.det*c1_7*c0_9*map.g02;
    const real G109_7_10_1 = map.det*c1_7*c0_10*map.g12;
    const real G109_7_11_2 = map.det*c1_7*c0_11*map.g22;
    const real G110_8_0_0 = map.det*c0_8*c1_0*map.g00;
    const real G110_8_0_1 = map.det*c0_8*c1_0*map.g10;
    const real G110_8_0_2 = map.det*c0_8*c1_0*map.g20;
    const real G110_9_0_0 = map.det*c0_9*c1_0*map.g00;
    const real G110_10_0_1 = map.det*c0_10*c1_0*map.g10;
    const real G110_11_0_2 = map.det*c0_11*c1_0*map.g20;
    const real G111_0_0_0 = map.det*c0_0*c1_0*map.g02;
    const real G111_0_0_1 = map.det*c0_0*c1_0*map.g12;
    const real G111_0_0_2 = map.det*c0_0*c1_0*map.g22;
    const real G111_1_0_0 = map.det*c0_1*c1_0*map.g02;
    const real G111_2_0_1 = map.det*c0_2*c1_0*map.g12;
    const real G111_3_0_2 = map.det*c0_3*c1_0*map.g22;
    const real G112_8_1_0 = map.det*c0_8*c1_1*map.g01;
    const real G112_8_1_1 = map.det*c0_8*c1_1*map.g11;
    const real G112_8_1_2 = map.det*c0_8*c1_1*map.g21;
    const real G112_9_1_0 = map.det*c0_9*c1_1*map.g01;
    const real G112_10_1_1 = map.det*c0_10*c1_1*map.g11;
    const real G112_11_1_2 = map.det*c0_11*c1_1*map.g21;
    const real G113_4_1_0 = map.det*c0_4*c1_1*map.g02;
    const real G113_4_1_1 = map.det*c0_4*c1_1*map.g12;
    const real G113_4_1_2 = map.det*c0_4*c1_1*map.g22;
    const real G113_5_1_0 = map.det*c0_5*c1_1*map.g02;
    const real G113_6_1_1 = map.det*c0_6*c1_1*map.g12;
    const real G113_7_1_2 = map.det*c0_7*c1_1*map.g22;
    const real G114_8_2_0 = map.det*c0_8*c1_2*map.g02;
    const real G114_8_2_1 = map.det*c0_8*c1_2*map.g12;
    const real G114_8_2_2 = map.det*c0_8*c1_2*map.g22;
    const real G114_9_2_0 = map.det*c0_9*c1_2*map.g02;
    const real G114_10_2_1 = map.det*c0_10*c1_2*map.g12;
    const real G114_11_2_2 = map.det*c0_11*c1_2*map.g22;
    const real G115_8_2_0 = map.det*c0_8*c1_2*map.g02;
    const real G115_8_2_1 = map.det*c0_8*c1_2*map.g12;
    const real G115_8_2_2 = map.det*c0_8*c1_2*map.g22;
    const real G115_9_2_0 = map.det*c0_9*c1_2*map.g02;
    const real G115_10_2_1 = map.det*c0_10*c1_2*map.g12;
    const real G115_11_2_2 = map.det*c0_11*c1_2*map.g22;
    const real G116_2_0_0 = map.det*c1_2*c0_0*map.g00;
    const real G116_2_0_1 = map.det*c1_2*c0_0*map.g10;
    const real G116_2_0_2 = map.det*c1_2*c0_0*map.g20;
    const real G116_2_1_0 = map.det*c1_2*c0_1*map.g00;
    const real G116_2_2_1 = map.det*c1_2*c0_2*map.g10;
    const real G116_2_3_2 = map.det*c1_2*c0_3*map.g20;
    const real G117_2_0_0 = map.det*c1_2*c0_0*map.g00;
    const real G117_2_0_1 = map.det*c1_2*c0_0*map.g10;
    const real G117_2_0_2 = map.det*c1_2*c0_0*map.g20;
    const real G117_2_1_0 = map.det*c1_2*c0_1*map.g00;
    const real G117_2_2_1 = map.det*c1_2*c0_2*map.g10;
    const real G117_2_3_2 = map.det*c1_2*c0_3*map.g20;
    const real G118_5_4_0 = map.det*c1_5*c0_4*map.g00;
    const real G118_5_4_1 = map.det*c1_5*c0_4*map.g10;
    const real G118_5_4_2 = map.det*c1_5*c0_4*map.g20;
    const real G118_5_5_0 = map.det*c1_5*c0_5*map.g00;
    const real G118_5_6_1 = map.det*c1_5*c0_6*map.g10;
    const real G118_5_7_2 = map.det*c1_5*c0_7*map.g20;
    const real G119_5_0_0 = map.det*c1_5*c0_0*map.g01;
    const real G119_5_0_1 = map.det*c1_5*c0_0*map.g11;
    const real G119_5_0_2 = map.det*c1_5*c0_0*map.g21;
    const real G119_5_1_0 = map.det*c1_5*c0_1*map.g01;
    const real G119_5_2_1 = map.det*c1_5*c0_2*map.g11;
    const real G119_5_3_2 = map.det*c1_5*c0_3*map.g21;
    const real G120_8_8_0 = map.det*c1_8*c0_8*map.g00;
    const real G120_8_8_1 = map.det*c1_8*c0_8*map.g10;
    const real G120_8_8_2 = map.det*c1_8*c0_8*map.g20;
    const real G120_8_9_0 = map.det*c1_8*c0_9*map.g00;
    const real G120_8_10_1 = map.det*c1_8*c0_10*map.g10;
    const real G120_8_11_2 = map.det*c1_8*c0_11*map.g20;
    const real G121_8_0_0 = map.det*c1_8*c0_0*map.g02;
    const real G121_8_0_1 = map.det*c1_8*c0_0*map.g12;
    const real G121_8_0_2 = map.det*c1_8*c0_0*map.g22;
    const real G121_8_1_0 = map.det*c1_8*c0_1*map.g02;
    const real G121_8_2_1 = map.det*c1_8*c0_2*map.g12;
    const real G121_8_3_2 = map.det*c1_8*c0_3*map.g22;
    const real G122_8_3_0 = map.det*c0_8*c1_3*map.g00;
    const real G122_8_3_1 = map.det*c0_8*c1_3*map.g10;
    const real G122_8_3_2 = map.det*c0_8*c1_3*map.g20;
    const real G122_9_3_0 = map.det*c0_9*c1_3*map.g00;
    const real G122_10_3_1 = map.det*c0_10*c1_3*map.g10;
    const real G122_11_3_2 = map.det*c0_11*c1_3*map.g20;
    const real G123_0_3_0 = map.det*c0_0*c1_3*map.g02;
    const real G123_0_3_1 = map.det*c0_0*c1_3*map.g12;
    const real G123_0_3_2 = map.det*c0_0*c1_3*map.g22;
    const real G123_1_3_0 = map.det*c0_1*c1_3*map.g02;
    const real G123_2_3_1 = map.det*c0_2*c1_3*map.g12;
    const real G123_3_3_2 = map.det*c0_3*c1_3*map.g22;
    const real G124_8_4_0 = map.det*c0_8*c1_4*map.g01;
    const real G124_8_4_1 = map.det*c0_8*c1_4*map.g11;
    const real G124_8_4_2 = map.det*c0_8*c1_4*map.g21;
    const real G124_9_4_0 = map.det*c0_9*c1_4*map.g01;
    const real G124_10_4_1 = map.det*c0_10*c1_4*map.g11;
    const real G124_11_4_2 = map.det*c0_11*c1_4*map.g21;
    const real G125_4_4_0 = map.det*c0_4*c1_4*map.g02;
    const real G125_4_4_1 = map.det*c0_4*c1_4*map.g12;
    const real G125_4_4_2 = map.det*c0_4*c1_4*map.g22;
    const real G125_5_4_0 = map.det*c0_5*c1_4*map.g02;
    const real G125_6_4_1 = map.det*c0_6*c1_4*map.g12;
    const real G125_7_4_2 = map.det*c0_7*c1_4*map.g22;
    const real G126_8_5_0 = map.det*c0_8*c1_5*map.g02;
    const real G126_8_5_1 = map.det*c0_8*c1_5*map.g12;
    const real G126_8_5_2 = map.det*c0_8*c1_5*map.g22;
    const real G126_9_5_0 = map.det*c0_9*c1_5*map.g02;
    const real G126_10_5_1 = map.det*c0_10*c1_5*map.g12;
    const real G126_11_5_2 = map.det*c0_11*c1_5*map.g22;
    const real G127_8_5_0 = map.det*c0_8*c1_5*map.g02;
    const real G127_8_5_1 = map.det*c0_8*c1_5*map.g12;
    const real G127_8_5_2 = map.det*c0_8*c1_5*map.g22;
    const real G127_9_5_0 = map.det*c0_9*c1_5*map.g02;
    const real G127_10_5_1 = map.det*c0_10*c1_5*map.g12;
    const real G127_11_5_2 = map.det*c0_11*c1_5*map.g22;
    const real G128_2_0_0 = map.det*c1_2*c0_0*map.g01;
    const real G128_2_0_1 = map.det*c1_2*c0_0*map.g11;
    const real G128_2_0_2 = map.det*c1_2*c0_0*map.g21;
    const real G128_2_1_0 = map.det*c1_2*c0_1*map.g01;
    const real G128_2_2_1 = map.det*c1_2*c0_2*map.g11;
    const real G128_2_3_2 = map.det*c1_2*c0_3*map.g21;
    const real G129_2_4_0 = map.det*c1_2*c0_4*map.g00;
    const real G129_2_4_1 = map.det*c1_2*c0_4*map.g10;
    const real G129_2_4_2 = map.det*c1_2*c0_4*map.g20;
    const real G129_2_5_0 = map.det*c1_2*c0_5*map.g00;
    const real G129_2_6_1 = map.det*c1_2*c0_6*map.g10;
    const real G129_2_7_2 = map.det*c1_2*c0_7*map.g20;
    const real G130_5_4_0 = map.det*c1_5*c0_4*map.g01;
    const real G130_5_4_1 = map.det*c1_5*c0_4*map.g11;
    const real G130_5_4_2 = map.det*c1_5*c0_4*map.g21;
    const real G130_5_5_0 = map.det*c1_5*c0_5*map.g01;
    const real G130_5_6_1 = map.det*c1_5*c0_6*map.g11;
    const real G130_5_7_2 = map.det*c1_5*c0_7*map.g21;
    const real G131_5_4_0 = map.det*c1_5*c0_4*map.g01;
    const real G131_5_4_1 = map.det*c1_5*c0_4*map.g11;
    const real G131_5_4_2 = map.det*c1_5*c0_4*map.g21;
    const real G131_5_5_0 = map.det*c1_5*c0_5*map.g01;
    const real G131_5_6_1 = map.det*c1_5*c0_6*map.g11;
    const real G131_5_7_2 = map.det*c1_5*c0_7*map.g21;
    const real G132_8_8_0 = map.det*c1_8*c0_8*map.g01;
    const real G132_8_8_1 = map.det*c1_8*c0_8*map.g11;
    const real G132_8_8_2 = map.det*c1_8*c0_8*map.g21;
    const real G132_8_9_0 = map.det*c1_8*c0_9*map.g01;
    const real G132_8_10_1 = map.det*c1_8*c0_10*map.g11;
    const real G132_8_11_2 = map.det*c1_8*c0_11*map.g21;
    const real G133_8_4_0 = map.det*c1_8*c0_4*map.g02;
    const real G133_8_4_1 = map.det*c1_8*c0_4*map.g12;
    const real G133_8_4_2 = map.det*c1_8*c0_4*map.g22;
    const real G133_8_5_0 = map.det*c1_8*c0_5*map.g02;
    const real G133_8_6_1 = map.det*c1_8*c0_6*map.g12;
    const real G133_8_7_2 = map.det*c1_8*c0_7*map.g22;
    const real G134_8_6_0 = map.det*c0_8*c1_6*map.g00;
    const real G134_8_6_1 = map.det*c0_8*c1_6*map.g10;
    const real G134_8_6_2 = map.det*c0_8*c1_6*map.g20;
    const real G134_9_6_0 = map.det*c0_9*c1_6*map.g00;
    const real G134_10_6_1 = map.det*c0_10*c1_6*map.g10;
    const real G134_11_6_2 = map.det*c0_11*c1_6*map.g20;
    const real G135_0_6_0 = map.det*c0_0*c1_6*map.g02;
    const real G135_0_6_1 = map.det*c0_0*c1_6*map.g12;
    const real G135_0_6_2 = map.det*c0_0*c1_6*map.g22;
    const real G135_1_6_0 = map.det*c0_1*c1_6*map.g02;
    const real G135_2_6_1 = map.det*c0_2*c1_6*map.g12;
    const real G135_3_6_2 = map.det*c0_3*c1_6*map.g22;
    const real G136_8_7_0 = map.det*c0_8*c1_7*map.g01;
    const real G136_8_7_1 = map.det*c0_8*c1_7*map.g11;
    const real G136_8_7_2 = map.det*c0_8*c1_7*map.g21;
    const real G136_9_7_0 = map.det*c0_9*c1_7*map.g01;
    const real G136_10_7_1 = map.det*c0_10*c1_7*map.g11;
    const real G136_11_7_2 = map.det*c0_11*c1_7*map.g21;
    const real G137_4_7_0 = map.det*c0_4*c1_7*map.g02;
    const real G137_4_7_1 = map.det*c0_4*c1_7*map.g12;
    const real G137_4_7_2 = map.det*c0_4*c1_7*map.g22;
    const real G137_5_7_0 = map.det*c0_5*c1_7*map.g02;
    const real G137_6_7_1 = map.det*c0_6*c1_7*map.g12;
    const real G137_7_7_2 = map.det*c0_7*c1_7*map.g22;
    const real G138_8_8_0 = map.det*c0_8*c1_8*map.g02 + map.det*c1_8*c0_8*map.g02;
    const real G138_8_8_1 = map.det*c0_8*c1_8*map.g12 + map.det*c1_8*c0_8*map.g12;
    const real G138_8_8_2 = map.det*c0_8*c1_8*map.g22 + map.det*c1_8*c0_8*map.g22;
    const real G138_9_8_0 = map.det*c0_9*c1_8*map.g02 + map.det*c1_8*c0_9*map.g02;
    const real G138_10_8_1 = map.det*c0_10*c1_8*map.g12 + map.det*c1_8*c0_10*map.g12;
    const real G138_11_8_2 = map.det*c0_11*c1_8*map.g22 + map.det*c1_8*c0_11*map.g22;
    const real G139_8_8_0 = map.det*c0_8*c1_8*map.g02 + map.det*c1_8*c0_8*map.g02;
    const real G139_8_8_1 = map.det*c0_8*c1_8*map.g12 + map.det*c1_8*c0_8*map.g12;
    const real G139_8_8_2 = map.det*c0_8*c1_8*map.g22 + map.det*c1_8*c0_8*map.g22;
    const real G139_9_8_0 = map.det*c0_9*c1_8*map.g02 + map.det*c1_8*c0_9*map.g02;
    const real G139_10_8_1 = map.det*c0_10*c1_8*map.g12 + map.det*c1_8*c0_10*map.g12;
    const real G139_11_8_2 = map.det*c0_11*c1_8*map.g22 + map.det*c1_8*c0_11*map.g22;
    const real G140_2_0_0 = map.det*c1_2*c0_0*map.g02;
    const real G140_2_0_1 = map.det*c1_2*c0_0*map.g12;
    const real G140_2_0_2 = map.det*c1_2*c0_0*map.g22;
    const real G140_2_1_0 = map.det*c1_2*c0_1*map.g02;
    const real G140_2_2_1 = map.det*c1_2*c0_2*map.g12;
    const real G140_2_3_2 = map.det*c1_2*c0_3*map.g22;
    const real G141_2_8_0 = map.det*c1_2*c0_8*map.g00;
    const real G141_2_8_1 = map.det*c1_2*c0_8*map.g10;
    const real G141_2_8_2 = map.det*c1_2*c0_8*map.g20;
    const real G141_2_9_0 = map.det*c1_2*c0_9*map.g00;
    const real G141_2_10_1 = map.det*c1_2*c0_10*map.g10;
    const real G141_2_11_2 = map.det*c1_2*c0_11*map.g20;
    const real G142_5_4_0 = map.det*c1_5*c0_4*map.g02;
    const real G142_5_4_1 = map.det*c1_5*c0_4*map.g12;
    const real G142_5_4_2 = map.det*c1_5*c0_4*map.g22;
    const real G142_5_5_0 = map.det*c1_5*c0_5*map.g02;
    const real G142_5_6_1 = map.det*c1_5*c0_6*map.g12;
    const real G142_5_7_2 = map.det*c1_5*c0_7*map.g22;
    const real G143_5_8_0 = map.det*c1_5*c0_8*map.g01;
    const real G143_5_8_1 = map.det*c1_5*c0_8*map.g11;
    const real G143_5_8_2 = map.det*c1_5*c0_8*map.g21;
    const real G143_5_9_0 = map.det*c1_5*c0_9*map.g01;
    const real G143_5_10_1 = map.det*c1_5*c0_10*map.g11;
    const real G143_5_11_2 = map.det*c1_5*c0_11*map.g21;

    // Compute element tensor
    block[0] = -1.666666666666664e-01*G0_0_0 - 1.666666666666665e-01*G0_0_1 - 1.666666666666664e-01*G0_0_2 + 1.666666666666664e-01*G0_1_0 + 1.666666666666665e-01*G0_2_1 + 1.666666666666665e-01*G0_3_2 - 8.333333333333322e-02*G1_0_0 - 8.333333333333323e-02*G1_0_1 - 8.333333333333322e-02*G1_0_2 + 8.333333333333322e-02*G1_1_0 + 8.333333333333323e-02*G1_2_1 + 8.333333333333323e-02*G1_3_2 - 8.333333333333322e-02*G2_4_0 - 8.333333333333323e-02*G2_4_1 - 8.333333333333323e-02*G2_4_2 + 8.333333333333322e-02*G2_5_0 + 8.333333333333323e-02*G2_6_1 + 8.333333333333323e-02*G2_7_2 - 8.333333333333322e-02*G3_8_0 - 8.333333333333323e-02*G3_8_1 - 8.333333333333323e-02*G3_8_2 + 8.333333333333322e-02*G3_9_0 + 8.333333333333323e-02*G3_10_1 + 8.333333333333323e-02*G3_11_2 - 8.333333333333322e-02*G42_0_0_0 - 8.333333333333323e-02*G42_0_0_1 - 8.333333333333322e-02*G42_0_0_2 + 8.333333333333322e-02*G42_1_0_0 + 8.333333333333323e-02*G42_2_0_1 + 8.333333333333323e-02*G42_3_0_2 + 8.333333333333322e-02*G43_0_0_0 + 8.333333333333323e-02*G43_0_0_1 + 8.333333333333322e-02*G43_0_0_2 - 8.333333333333322e-02*G43_1_0_0 - 8.333333333333323e-02*G43_2_0_1 - 8.333333333333323e-02*G43_3_0_2 - 8.333333333333322e-02*G44_0_1_0 - 8.333333333333323e-02*G44_0_1_1 - 8.333333333333322e-02*G44_0_1_2 + 8.333333333333322e-02*G44_1_1_0 + 8.333333333333323e-02*G44_2_1_1 + 8.333333333333323e-02*G44_3_1_2 + 8.333333333333322e-02*G45_4_1_0 + 8.333333333333323e-02*G45_4_1_1 + 8.333333333333323e-02*G45_4_1_2 - 8.333333333333322e-02*G45_5_1_0 - 8.333333333333323e-02*G45_6_1_1 - 8.333333333333323e-02*G45_7_1_2 - 8.333333333333322e-02*G46_0_2_0 - 8.333333333333323e-02*G46_0_2_1 - 8.333333333333322e-02*G46_0_2_2 + 8.333333333333322e-02*G46_1_2_0 + 8.333333333333323e-02*G46_2_2_1 + 8.333333333333323e-02*G46_3_2_2 + 8.333333333333322e-02*G47_8_2_0 + 8.333333333333323e-02*G47_8_2_1 + 8.333333333333323e-02*G47_8_2_2 - 8.333333333333322e-02*G47_9_2_0 - 8.333333333333323e-02*G47_10_2_1 - 8.333333333333323e-02*G47_11_2_2 + 8.333333333333322e-02*G48_3_4_0 + 8.333333333333323e-02*G48_3_4_1 + 8.333333333333323e-02*G48_3_4_2 - 8.333333333333322e-02*G48_3_5_0 - 8.333333333333323e-02*G48_3_6_1 - 8.333333333333323e-02*G48_3_7_2 - 8.333333333333322e-02*G49_3_0_0 - 8.333333333333323e-02*G49_3_0_1 - 8.333333333333322e-02*G49_3_0_2 + 8.333333333333322e-02*G49_3_1_0 + 8.333333333333323e-02*G49_3_2_1 + 8.333333333333323e-02*G49_3_3_2 + 8.333333333333322e-02*G50_6_8_0 + 8.333333333333323e-02*G50_6_8_1 + 8.333333333333323e-02*G50_6_8_2 - 8.333333333333322e-02*G50_6_9_0 - 8.333333333333323e-02*G50_6_10_1 - 8.333333333333323e-02*G50_6_11_2 - 8.333333333333322e-02*G51_6_0_0 - 8.333333333333323e-02*G51_6_0_1 - 8.333333333333322e-02*G51_6_0_2 + 8.333333333333322e-02*G51_6_1_0 + 8.333333333333323e-02*G51_6_2_1 + 8.333333333333323e-02*G51_6_3_2;
    block[1] = -1.666666666666664e-01*G14_4_0 - 1.666666666666665e-01*G14_4_1 - 1.666666666666665e-01*G14_4_2 + 1.666666666666664e-01*G14_5_0 + 1.666666666666665e-01*G14_6_1 + 1.666666666666665e-01*G14_7_2 - 1.666666666666664e-01*G15_0_0 - 1.666666666666665e-01*G15_0_1 - 1.666666666666664e-01*G15_0_2 + 1.666666666666664e-01*G15_1_0 + 1.666666666666665e-01*G15_2_1 + 1.666666666666665e-01*G15_3_2 - 8.333333333333322e-02*G76_4_0_0 - 8.333333333333323e-02*G76_4_0_1 - 8.333333333333323e-02*G76_4_0_2 + 8.333333333333322e-02*G76_5_0_0 + 8.333333333333323e-02*G76_6_0_1 + 8.333333333333323e-02*G76_7_0_2 + 8.333333333333322e-02*G77_0_0_0 + 8.333333333333323e-02*G77_0_0_1 + 8.333333333333322e-02*G77_0_0_2 - 8.333333333333322e-02*G77_1_0_0 - 8.333333333333323e-02*G77_2_0_1 - 8.333333333333323e-02*G77_3_0_2 - 8.333333333333322e-02*G78_4_1_0 - 8.333333333333323e-02*G78_4_1_1 - 8.333333333333323e-02*G78_4_1_2 + 8.333333333333322e-02*G78_5_1_0 + 8.333333333333323e-02*G78_6_1_1 + 8.333333333333323e-02*G78_7_1_2 + 8.333333333333322e-02*G79_4_1_0 + 8.333333333333323e-02*G79_4_1_1 + 8.333333333333323e-02*G79_4_1_2 - 8.333333333333322e-02*G79_5_1_0 - 8.333333333333323e-02*G79_6_1_1 - 8.333333333333323e-02*G79_7_1_2 - 8.333333333333322e-02*G80_4_2_0 - 8.333333333333323e-02*G80_4_2_1 - 8.333333333333323e-02*G80_4_2_2 + 8.333333333333322e-02*G80_5_2_0 + 8.333333333333323e-02*G80_6_2_1 + 8.333333333333323e-02*G80_7_2_2 + 8.333333333333322e-02*G81_8_2_0 + 8.333333333333323e-02*G81_8_2_1 + 8.333333333333323e-02*G81_8_2_2 - 8.333333333333322e-02*G81_9_2_0 - 8.333333333333323e-02*G81_10_2_1 - 8.333333333333323e-02*G81_11_2_2 + 8.333333333333322e-02*G82_1_0_0 + 8.333333333333323e-02*G82_1_0_1 + 8.333333333333322e-02*G82_1_0_2 - 8.333333333333322e-02*G82_1_1_0 - 8.333333333333323e-02*G82_1_2_1 - 8.333333333333323e-02*G82_1_3_2 - 8.333333333333322e-02*G83_1_0_0 - 8.333333333333323e-02*G83_1_0_1 - 8.333333333333322e-02*G83_1_0_2 + 8.333333333333322e-02*G83_1_1_0 + 8.333333333333323e-02*G83_1_2_1 + 8.333333333333323e-02*G83_1_3_2 + 8.333333333333322e-02*G84_4_4_0 + 8.333333333333323e-02*G84_4_4_1 + 8.333333333333323e-02*G84_4_4_2 - 8.333333333333322e-02*G84_4_5_0 - 8.333333333333323e-02*G84_4_6_1 - 8.333333333333323e-02*G84_4_7_2 - 8.333333333333322e-02*G85_4_0_0 - 8.333333333333323e-02*G85_4_0_1 - 8.333333333333322e-02*G85_4_0_2 + 8.333333333333322e-02*G85_4_1_0 + 8.333333333333323e-02*G85_4_2_1 + 8.333333333333323e-02*G85_4_3_2 + 8.333333333333322e-02*G86_7_8_0 + 8.333333333333323e-02*G86_7_8_1 + 8.333333333333323e-02*G86_7_8_2 - 8.333333333333322e-02*G86_7_9_0 - 8.333333333333323e-02*G86_7_10_1 - 8.333333333333323e-02*G86_7_11_2 - 8.333333333333322e-02*G87_7_0_0 - 8.333333333333323e-02*G87_7_0_1 - 8.333333333333322e-02*G87_7_0_2 + 8.333333333333322e-02*G87_7_1_0 + 8.333333333333323e-02*G87_7_2_1 + 8.333333333333323e-02*G87_7_3_2;
    block[2] = -1.666666666666664e-01*G28_8_0 - 1.666666666666665e-01*G28_8_1 - 1.666666666666665e-01*G28_8_2 + 1.666666666666664e-01*G28_9_0 + 1.666666666666665e-01*G28_10_1 + 1.666666666666665e-01*G28_11_2 - 1.666666666666664e-01*G29_0_0 - 1.666666666666665e-01*G29_0_1 - 1.666666666666664e-01*G29_0_2 + 1.666666666666664e-01*G29_1_0 + 1.666666666666665e-01*G29_2_1 + 1.666666666666665e-01*G29_3_2 - 8.333333333333322e-02*G110_8_0_0 - 8.333333333333323e-02*G110_8_0_1 - 8.333333333333323e-02*G110_8_0_2 + 8.333333333333322e-02*G110_9_0_0 + 8.333333333333323e-02*G110_10_0_1 + 8.333333333333323e-02*G110_11_0_2 + 8.333333333333322e-02*G111_0_0_0 + 8.333333333333323e-02*G111_0_0_1 + 8.333333333333322e-02*G111_0_0_2 - 8.333333333333322e-02*G111_1_0_0 - 8.333333333333323e-02*G111_2_0_1 - 8.333333333333323e-02*G111_3_0_2 - 8.333333333333322e-02*G112_8_1_0 - 8.333333333333323e-02*G112_8_1_1 - 8.333333333333323e-02*G112_8_1_2 + 8.333333333333322e-02*G112_9_1_0 + 8.333333333333323e-02*G112_10_1_1 + 8.333333333333323e-02*G112_11_1_2 + 8.333333333333322e-02*G113_4_1_0 + 8.333333333333323e-02*G113_4_1_1 + 8.333333333333323e-02*G113_4_1_2 - 8.333333333333322e-02*G113_5_1_0 - 8.333333333333323e-02*G113_6_1_1 - 8.333333333333323e-02*G113_7_1_2 - 8.333333333333322e-02*G114_8_2_0 - 8.333333333333323e-02*G114_8_2_1 - 8.333333333333323e-02*G114_8_2_2 + 8.333333333333322e-02*G114_9_2_0 + 8.333333333333323e-02*G114_10_2_1 + 8.333333333333323e-02*G114_11_2_2 + 8.333333333333322e-02*G115_8_2_0 + 8.333333333333323e-02*G115_8_2_1 + 8.333333333333323e-02*G115_8_2_2 - 8.333333333333322e-02*G115_9_2_0 - 8.333333333333323e-02*G115_10_2_1 - 8.333333333333323e-02*G115_11_2_2 + 8.333333333333322e-02*G116_2_0_0 + 8.333333333333323e-02*G116_2_0_1 + 8.333333333333322e-02*G116_2_0_2 - 8.333333333333322e-02*G116_2_1_0 - 8.333333333333323e-02*G116_2_2_1 - 8.333333333333323e-02*G116_2_3_2 - 8.333333333333322e-02*G117_2_0_0 - 8.333333333333323e-02*G117_2_0_1 - 8.333333333333322e-02*G117_2_0_2 + 8.333333333333322e-02*G117_2_1_0 + 8.333333333333323e-02*G117_2_2_1 + 8.333333333333323e-02*G117_2_3_2 + 8.333333333333322e-02*G118_5_4_0 + 8.333333333333323e-02*G118_5_4_1 + 8.333333333333323e-02*G118_5_4_2 - 8.333333333333322e-02*G118_5_5_0 - 8.333333333333323e-02*G118_5_6_1 - 8.333333333333323e-02*G118_5_7_2 - 8.333333333333322e-02*G119_5_0_0 - 8.333333333333323e-02*G119_5_0_1 - 8.333333333333322e-02*G119_5_0_2 + 8.333333333333322e-02*G119_5_1_0 + 8.333333333333323e-02*G119_5_2_1 + 8.333333333333323e-02*G119_5_3_2 + 8.333333333333322e-02*G120_8_8_0 + 8.333333333333323e-02*G120_8_8_1 + 8.333333333333323e-02*G120_8_8_2 - 8.333333333333322e-02*G120_8_9_0 - 8.333333333333323e-02*G120_8_10_1 - 8.333333333333323e-02*G120_8_11_2 - 8.333333333333322e-02*G121_8_0_0 - 8.333333333333323e-02*G121_8_0_1 - 8.333333333333322e-02*G121_8_0_2 + 8.333333333333322e-02*G121_8_1_0 + 8.333333333333323e-02*G121_8_2_1 + 8.333333333333323e-02*G121_8_3_2;
    block[3] = -1.666666666666664e-01*G4_0_0 - 1.666666666666665e-01*G4_0_1 - 1.666666666666664e-01*G4_0_2 + 1.666666666666664e-01*G4_1_0 + 1.666666666666665e-01*G4_2_1 + 1.666666666666665e-01*G4_3_2 - 1.666666666666664e-01*G5_4_0 - 1.666666666666665e-01*G5_4_1 - 1.666666666666665e-01*G5_4_2 + 1.666666666666664e-01*G5_5_0 + 1.666666666666665e-01*G5_6_1 + 1.666666666666665e-01*G5_7_2 - 8.333333333333322e-02*G52_0_3_0 - 8.333333333333323e-02*G52_0_3_1 - 8.333333333333322e-02*G52_0_3_2 + 8.333333333333322e-02*G52_1_3_0 + 8.333333333333323e-02*G52_2_3_1 + 8.333333333333323e-02*G52_3_3_2 + 8.333333333333322e-02*G53_0_3_0 + 8.333333333333323e-02*G53_0_3_1 + 8.333333333333322e-02*G53_0_3_2 - 8.333333333333322e-02*G53_1_3_0 - 8.333333333333323e-02*G53_2_3_1 - 8.333333333333323e-02*G53_3_3_2 - 8.333333333333322e-02*G54_0_4_0 - 8.333333333333323e-02*G54_0_4_1 - 8.333333333333322e-02*G54_0_4_2 + 8.333333333333322e-02*G54_1_4_0 + 8.333333333333323e-02*G54_2_4_1 + 8.333333333333323e-02*G54_3_4_2 + 8.333333333333322e-02*G55_4_4_0 + 8.333333333333323e-02*G55_4_4_1 + 8.333333333333323e-02*G55_4_4_2 - 8.333333333333322e-02*G55_5_4_0 - 8.333333333333323e-02*G55_6_4_1 - 8.333333333333323e-02*G55_7_4_2 - 8.333333333333322e-02*G56_0_5_0 - 8.333333333333323e-02*G56_0_5_1 - 8.333333333333322e-02*G56_0_5_2 + 8.333333333333322e-02*G56_1_5_0 + 8.333333333333323e-02*G56_2_5_1 + 8.333333333333323e-02*G56_3_5_2 + 8.333333333333322e-02*G57_8_5_0 + 8.333333333333323e-02*G57_8_5_1 + 8.333333333333323e-02*G57_8_5_2 - 8.333333333333322e-02*G57_9_5_0 - 8.333333333333323e-02*G57_10_5_1 - 8.333333333333323e-02*G57_11_5_2 + 8.333333333333322e-02*G58_0_0_0 + 8.333333333333323e-02*G58_0_0_1 + 8.333333333333322e-02*G58_0_0_2 - 8.333333333333322e-02*G58_0_1_0 - 8.333333333333323e-02*G58_0_2_1 - 8.333333333333323e-02*G58_0_3_2 - 8.333333333333322e-02*G59_0_4_0 - 8.333333333333323e-02*G59_0_4_1 - 8.333333333333323e-02*G59_0_4_2 + 8.333333333333322e-02*G59_0_5_0 + 8.333333333333323e-02*G59_0_6_1 + 8.333333333333323e-02*G59_0_7_2 + 8.333333333333322e-02*G60_3_4_0 + 8.333333333333323e-02*G60_3_4_1 + 8.333333333333323e-02*G60_3_4_2 - 8.333333333333322e-02*G60_3_5_0 - 8.333333333333323e-02*G60_3_6_1 - 8.333333333333323e-02*G60_3_7_2 - 8.333333333333322e-02*G61_3_4_0 - 8.333333333333323e-02*G61_3_4_1 - 8.333333333333323e-02*G61_3_4_2 + 8.333333333333322e-02*G61_3_5_0 + 8.333333333333323e-02*G61_3_6_1 + 8.333333333333323e-02*G61_3_7_2 + 8.333333333333322e-02*G62_6_8_0 + 8.333333333333323e-02*G62_6_8_1 + 8.333333333333323e-02*G62_6_8_2 - 8.333333333333322e-02*G62_6_9_0 - 8.333333333333323e-02*G62_6_10_1 - 8.333333333333323e-02*G62_6_11_2 - 8.333333333333322e-02*G63_6_4_0 - 8.333333333333323e-02*G63_6_4_1 - 8.333333333333323e-02*G63_6_4_2 + 8.333333333333322e-02*G63_6_5_0 + 8.333333333333323e-02*G63_6_6_1 + 8.333333333333323e-02*G63_6_7_2;
    block[4] = -1.666666666666664e-01*G19_4_0 - 1.666666666666665e-01*G19_4_1 - 1.666666666666665e-01*G19_4_2 + 1.666666666666664e-01*G19_5_0 + 1.666666666666665e-01*G19_6_1 + 1.666666666666665e-01*G19_7_2 - 8.333333333333322e-02*G20_0_0 - 8.333333333333323e-02*G20_0_1 - 8.333333333333322e-02*G20_0_2 + 8.333333333333322e-02*G20_1_0 + 8.333333333333323e-02*G20_2_1 + 8.333333333333323e-02*G20_3_2 - 8.333333333333322e-02*G21_4_0 - 8.333333333333323e-02*G21_4_1 - 8.333333333333323e-02*G21_4_2 + 8.333333333333322e-02*G21_5_0 + 8.333333333333323e-02*G21_6_1 + 8.333333333333323e-02*G21_7_2 - 8.333333333333322e-02*G22_8_0 - 8.333333333333323e-02*G22_8_1 - 8.333333333333323e-02*G22_8_2 + 8.333333333333322e-02*G22_9_0 + 8.333333333333323e-02*G22_10_1 + 8.333333333333323e-02*G22_11_2 - 8.333333333333322e-02*G88_4_3_0 - 8.333333333333323e-02*G88_4_3_1 - 8.333333333333323e-02*G88_4_3_2 + 8.333333333333322e-02*G88_5_3_0 + 8.333333333333323e-02*G88_6_3_1 + 8.333333333333323e-02*G88_7_3_2 + 8.333333333333322e-02*G89_0_3_0 + 8.333333333333323e-02*G89_0_3_1 + 8.333333333333322e-02*G89_0_3_2 - 8.333333333333322e-02*G89_1_3_0 - 8.333333333333323e-02*G89_2_3_1 - 8.333333333333323e-02*G89_3_3_2 - 8.333333333333322e-02*G90_4_4_0 - 8.333333333333323e-02*G90_4_4_1 - 8.333333333333323e-02*G90_4_4_2 + 8.333333333333322e-02*G90_5_4_0 + 8.333333333333323e-02*G90_6_4_1 + 8.333333333333323e-02*G90_7_4_2 + 8.333333333333322e-02*G91_4_4_0 + 8.333333333333323e-02*G91_4_4_1 + 8.333333333333323e-02*G91_4_4_2 - 8.333333333333322e-02*G91_5_4_0 - 8.333333333333323e-02*G91_6_4_1 - 8.333333333333323e-02*G91_7_4_2 - 8.333333333333322e-02*G92_4_5_0 - 8.333333333333323e-02*G92_4_5_1 - 8.333333333333323e-02*G92_4_5_2 + 8.333333333333322e-02*G92_5_5_0 + 8.333333333333323e-02*G92_6_5_1 + 8.333333333333323e-02*G92_7_5_2 + 8.333333333333322e-02*G93_8_5_0 + 8.333333333333323e-02*G93_8_5_1 + 8.333333333333323e-02*G93_8_5_2 - 8.333333333333322e-02*G93_9_5_0 - 8.333333333333323e-02*G93_10_5_1 - 8.333333333333323e-02*G93_11_5_2 + 8.333333333333322e-02*G94_1_0_0 + 8.333333333333323e-02*G94_1_0_1 + 8.333333333333322e-02*G94_1_0_2 - 8.333333333333322e-02*G94_1_1_0 - 8.333333333333323e-02*G94_1_2_1 - 8.333333333333323e-02*G94_1_3_2 - 8.333333333333322e-02*G95_1_4_0 - 8.333333333333323e-02*G95_1_4_1 - 8.333333333333323e-02*G95_1_4_2 + 8.333333333333322e-02*G95_1_5_0 + 8.333333333333323e-02*G95_1_6_1 + 8.333333333333323e-02*G95_1_7_2 + 8.333333333333322e-02*G96_7_8_0 + 8.333333333333323e-02*G96_7_8_1 + 8.333333333333323e-02*G96_7_8_2 - 8.333333333333322e-02*G96_7_9_0 - 8.333333333333323e-02*G96_7_10_1 - 8.333333333333323e-02*G96_7_11_2 - 8.333333333333322e-02*G97_7_4_0 - 8.333333333333323e-02*G97_7_4_1 - 8.333333333333323e-02*G97_7_4_2 + 8.333333333333322e-02*G97_7_5_0 + 8.333333333333323e-02*G97_7_6_1 + 8.333333333333323e-02*G97_7_7_2;
    block[5] = -1.666666666666664e-01*G33_8_0 - 1.666666666666665e-01*G33_8_1 - 1.666666666666665e-01*G33_8_2 + 1.666666666666664e-01*G33_9_0 + 1.666666666666665e-01*G33_10_1 + 1.666666666666665e-01*G33_11_2 - 1.666666666666664e-01*G34_4_0 - 1.666666666666665e-01*G34_4_1 - 1.666666666666665e-01*G34_4_2 + 1.666666666666664e-01*G34_5_0 + 1.666666666666665e-01*G34_6_1 + 1.666666666666665e-01*G34_7_2 - 8.333333333333322e-02*G122_8_3_0 - 8.333333333333323e-02*G122_8_3_1 - 8.333333333333323e-02*G122_8_3_2 + 8.333333333333322e-02*G122_9_3_0 + 8.333333333333323e-02*G122_10_3_1 + 8.333333333333323e-02*G122_11_3_2 + 8.333333333333322e-02*G123_0_3_0 + 8.333333333333323e-02*G123_0_3_1 + 8.333333333333322e-02*G123_0_3_2 - 8.333333333333322e-02*G123_1_3_0 - 8.333333333333323e-02*G123_2_3_1 - 8.333333333333323e-02*G123_3_3_2 - 8.333333333333322e-02*G124_8_4_0 - 8.333333333333323e-02*G124_8_4_1 - 8.333333333333323e-02*G124_8_4_2 + 8.333333333333322e-02*G124_9_4_0 + 8.333333333333323e-02*G124_10_4_1 + 8.333333333333323e-02*G124_11_4_2 + 8.333333333333322e-02*G125_4_4_0 + 8.333333333333323e-02*G125_4_4_1 + 8.333333333333323e-02*G125_4_4_2 - 8.333333333333322e-02*G125_5_4_0 - 8.333333333333323e-02*G125_6_4_1 - 8.333333333333323e-02*G125_7_4_2 - 8.333333333333322e-02*G126_8_5_0 - 8.333333333333323e-02*G126_8_5_1 - 8.333333333333323e-02*G126_8_5_2 + 8.333333333333322e-02*G126_9_5_0 + 8.333333333333323e-02*G126_10_5_1 + 8.333333333333323e-02*G126_11_5_2 + 8.333333333333322e-02*G127_8_5_0 + 8.333333333333323e-02*G127_8_5_1 + 8.333333333333323e-02*G127_8_5_2 - 8.333333333333322e-02*G127_9_5_0 - 8.333333333333323e-02*G127_10_5_1 - 8.333333333333323e-02*G127_11_5_2 + 8.333333333333322e-02*G128_2_0_0 + 8.333333333333323e-02*G128_2_0_1 + 8.333333333333322e-02*G128_2_0_2 - 8.333333333333322e-02*G128_2_1_0 - 8.333333333333323e-02*G128_2_2_1 - 8.333333333333323e-02*G128_2_3_2 - 8.333333333333322e-02*G129_2_4_0 - 8.333333333333323e-02*G129_2_4_1 - 8.333333333333323e-02*G129_2_4_2 + 8.333333333333322e-02*G129_2_5_0 + 8.333333333333323e-02*G129_2_6_1 + 8.333333333333323e-02*G129_2_7_2 + 8.333333333333322e-02*G130_5_4_0 + 8.333333333333323e-02*G130_5_4_1 + 8.333333333333323e-02*G130_5_4_2 - 8.333333333333322e-02*G130_5_5_0 - 8.333333333333323e-02*G130_5_6_1 - 8.333333333333323e-02*G130_5_7_2 - 8.333333333333322e-02*G131_5_4_0 - 8.333333333333323e-02*G131_5_4_1 - 8.333333333333323e-02*G131_5_4_2 + 8.333333333333322e-02*G131_5_5_0 + 8.333333333333323e-02*G131_5_6_1 + 8.333333333333323e-02*G131_5_7_2 + 8.333333333333322e-02*G132_8_8_0 + 8.333333333333323e-02*G132_8_8_1 + 8.333333333333323e-02*G132_8_8_2 - 8.333333333333322e-02*G132_8_9_0 - 8.333333333333323e-02*G132_8_10_1 - 8.333333333333323e-02*G132_8_11_2 - 8.333333333333322e-02*G133_8_4_0 - 8.333333333333323e-02*G133_8_4_1 - 8.333333333333323e-02*G133_8_4_2 + 8.333333333333322e-02*G133_8_5_0 + 8.333333333333323e-02*G133_8_6_1 + 8.333333333333323e-02*G133_8_7_2;
    block[6] = -1.666666666666664e-01*G9_0_0 - 1.666666666666665e-01*G9_0_1 - 1.666666666666664e-01*G9_0_2 + 1.666666666666664e-01*G9_1_0 + 1.666666666666665e-01*G9_2_1 + 1.666666666666665e-01*G9_3_2 - 1.666666666666664e-01*G10_8_0 - 1.666666666666665e-01*G10_8_1 - 1.666666666666665e-01*G10_8_2 + 1.666666666666664e-01*G10_9_0 + 1.666666666666665e-01*G10_10_1 + 1.666666666666665e-01*G10_11_2 - 8.333333333333322e-02*G64_0_6_0 - 8.333333333333323e-02*G64_0_6_1 - 8.333333333333322e-02*G64_0_6_2 + 8.333333333333322e-02*G64_1_6_0 + 8.333333333333323e-02*G64_2_6_1 + 8.333333333333323e-02*G64_3_6_2 + 8.333333333333322e-02*G65_0_6_0 + 8.333333333333323e-02*G65_0_6_1 + 8.333333333333322e-02*G65_0_6_2 - 8.333333333333322e-02*G65_1_6_0 - 8.333333333333323e-02*G65_2_6_1 - 8.333333333333323e-02*G65_3_6_2 - 8.333333333333322e-02*G66_0_7_0 - 8.333333333333323e-02*G66_0_7_1 - 8.333333333333322e-02*G66_0_7_2 + 8.333333333333322e-02*G66_1_7_0 + 8.333333333333323e-02*G66_2_7_1 + 8.333333333333323e-02*G66_3_7_2 + 8.333333333333322e-02*G67_4_7_0 + 8.333333333333323e-02*G67_4_7_1 + 8.333333333333323e-02*G67_4_7_2 - 8.333333333333322e-02*G67_5_7_0 - 8.333333333333323e-02*G67_6_7_1 - 8.333333333333323e-02*G67_7_7_2 - 8.333333333333322e-02*G68_0_8_0 - 8.333333333333323e-02*G68_0_8_1 - 8.333333333333322e-02*G68_0_8_2 + 8.333333333333322e-02*G68_1_8_0 + 8.333333333333323e-02*G68_2_8_1 + 8.333333333333323e-02*G68_3_8_2 + 8.333333333333322e-02*G69_8_8_0 + 8.333333333333323e-02*G69_8_8_1 + 8.333333333333323e-02*G69_8_8_2 - 8.333333333333322e-02*G69_9_8_0 - 8.333333333333323e-02*G69_10_8_1 - 8.333333333333323e-02*G69_11_8_2 + 8.333333333333322e-02*G70_0_0_0 + 8.333333333333323e-02*G70_0_0_1 + 8.333333333333322e-02*G70_0_0_2 - 8.333333333333322e-02*G70_0_1_0 - 8.333333333333323e-02*G70_0_2_1 - 8.333333333333323e-02*G70_0_3_2 - 8.333333333333322e-02*G71_0_8_0 - 8.333333333333323e-02*G71_0_8_1 - 8.333333333333323e-02*G71_0_8_2 + 8.333333333333322e-02*G71_0_9_0 + 8.333333333333323e-02*G71_0_10_1 + 8.333333333333323e-02*G71_0_11_2 + 8.333333333333322e-02*G72_3_4_0 + 8.333333333333323e-02*G72_3_4_1 + 8.333333333333323e-02*G72_3_4_2 - 8.333333333333322e-02*G72_3_5_0 - 8.333333333333323e-02*G72_3_6_1 - 8.333333333333323e-02*G72_3_7_2 - 8.333333333333322e-02*G73_3_8_0 - 8.333333333333323e-02*G73_3_8_1 - 8.333333333333323e-02*G73_3_8_2 + 8.333333333333322e-02*G73_3_9_0 + 8.333333333333323e-02*G73_3_10_1 + 8.333333333333323e-02*G73_3_11_2 + 8.333333333333322e-02*G74_6_8_0 + 8.333333333333323e-02*G74_6_8_1 + 8.333333333333323e-02*G74_6_8_2 - 8.333333333333322e-02*G74_6_9_0 - 8.333333333333323e-02*G74_6_10_1 - 8.333333333333323e-02*G74_6_11_2 - 8.333333333333322e-02*G75_6_8_0 - 8.333333333333323e-02*G75_6_8_1 - 8.333333333333323e-02*G75_6_8_2 + 8.333333333333322e-02*G75_6_9_0 + 8.333333333333323e-02*G75_6_10_1 + 8.333333333333323e-02*G75_6_11_2;
    block[7] = -1.666666666666664e-01*G23_4_0 - 1.666666666666665e-01*G23_4_1 - 1.666666666666665e-01*G23_4_2 + 1.666666666666664e-01*G23_5_0 + 1.666666666666665e-01*G23_6_1 + 1.666666666666665e-01*G23_7_2 - 1.666666666666664e-01*G24_8_0 - 1.666666666666665e-01*G24_8_1 - 1.666666666666665e-01*G24_8_2 + 1.666666666666664e-01*G24_9_0 + 1.666666666666665e-01*G24_10_1 + 1.666666666666665e-01*G24_11_2 - 8.333333333333322e-02*G98_4_6_0 - 8.333333333333323e-02*G98_4_6_1 - 8.333333333333323e-02*G98_4_6_2 + 8.333333333333322e-02*G98_5_6_0 + 8.333333333333323e-02*G98_6_6_1 + 8.333333333333323e-02*G98_7_6_2 + 8.333333333333322e-02*G99_0_6_0 + 8.333333333333323e-02*G99_0_6_1 + 8.333333333333322e-02*G99_0_6_2 - 8.333333333333322e-02*G99_1_6_0 - 8.333333333333323e-02*G99_2_6_1 - 8.333333333333323e-02*G99_3_6_2 - 8.333333333333322e-02*G100_4_7_0 - 8.333333333333323e-02*G100_4_7_1 - 8.333333333333323e-02*G100_4_7_2 + 8.333333333333322e-02*G100_5_7_0 + 8.333333333333323e-02*G100_6_7_1 + 8.333333333333323e-02*G100_7_7_2 + 8.333333333333322e-02*G101_4_7_0 + 8.333333333333323e-02*G101_4_7_1 + 8.333333333333323e-02*G101_4_7_2 - 8.333333333333322e-02*G101_5_7_0 - 8.333333333333323e-02*G101_6_7_1 - 8.333333333333323e-02*G101_7_7_2 - 8.333333333333322e-02*G102_4_8_0 - 8.333333333333323e-02*G102_4_8_1 - 8.333333333333323e-02*G102_4_8_2 + 8.333333333333322e-02*G102_5_8_0 + 8.333333333333323e-02*G102_6_8_1 + 8.333333333333323e-02*G102_7_8_2 + 8.333333333333322e-02*G103_8_8_0 + 8.333333333333323e-02*G103_8_8_1 + 8.333333333333323e-02*G103_8_8_2 - 8.333333333333322e-02*G103_9_8_0 - 8.333333333333323e-02*G103_10_8_1 - 8.333333333333323e-02*G103_11_8_2 + 8.333333333333322e-02*G104_1_0_0 + 8.333333333333323e-02*G104_1_0_1 + 8.333333333333322e-02*G104_1_0_2 - 8.333333333333322e-02*G104_1_1_0 - 8.333333333333323e-02*G104_1_2_1 - 8.333333333333323e-02*G104_1_3_2 - 8.333333333333322e-02*G105_1_8_0 - 8.333333333333323e-02*G105_1_8_1 - 8.333333333333323e-02*G105_1_8_2 + 8.333333333333322e-02*G105_1_9_0 + 8.333333333333323e-02*G105_1_10_1 + 8.333333333333323e-02*G105_1_11_2 + 8.333333333333322e-02*G106_4_4_0 + 8.333333333333323e-02*G106_4_4_1 + 8.333333333333323e-02*G106_4_4_2 - 8.333333333333322e-02*G106_4_5_0 - 8.333333333333323e-02*G106_4_6_1 - 8.333333333333323e-02*G106_4_7_2 - 8.333333333333322e-02*G107_4_8_0 - 8.333333333333323e-02*G107_4_8_1 - 8.333333333333323e-02*G107_4_8_2 + 8.333333333333322e-02*G107_4_9_0 + 8.333333333333323e-02*G107_4_10_1 + 8.333333333333323e-02*G107_4_11_2 + 8.333333333333322e-02*G108_7_8_0 + 8.333333333333323e-02*G108_7_8_1 + 8.333333333333323e-02*G108_7_8_2 - 8.333333333333322e-02*G108_7_9_0 - 8.333333333333323e-02*G108_7_10_1 - 8.333333333333323e-02*G108_7_11_2 - 8.333333333333322e-02*G109_7_8_0 - 8.333333333333323e-02*G109_7_8_1 - 8.333333333333323e-02*G109_7_8_2 + 8.333333333333322e-02*G109_7_9_0 + 8.333333333333323e-02*G109_7_10_1 + 8.333333333333323e-02*G109_7_11_2;
    block[8] = -1.666666666666664e-01*G38_8_0 - 1.666666666666665e-01*G38_8_1 - 1.666666666666665e-01*G38_8_2 + 1.666666666666664e-01*G38_9_0 + 1.666666666666665e-01*G38_10_1 + 1.666666666666665e-01*G38_11_2 - 8.333333333333322e-02*G39_0_0 - 8.333333333333323e-02*G39_0_1 - 8.333333333333322e-02*G39_0_2 + 8.333333333333322e-02*G39_1_0 + 8.333333333333323e-02*G39_2_1 + 8.333333333333323e-02*G39_3_2 - 8.333333333333322e-02*G40_4_0 - 8.333333333333323e-02*G40_4_1 - 8.333333333333323e-02*G40_4_2 + 8.333333333333322e-02*G40_5_0 + 8.333333333333323e-02*G40_6_1 + 8.333333333333323e-02*G40_7_2 - 8.333333333333322e-02*G41_8_0 - 8.333333333333323e-02*G41_8_1 - 8.333333333333323e-02*G41_8_2 + 8.333333333333322e-02*G41_9_0 + 8.333333333333323e-02*G41_10_1 + 8.333333333333323e-02*G41_11_2 - 8.333333333333322e-02*G134_8_6_0 - 8.333333333333323e-02*G134_8_6_1 - 8.333333333333323e-02*G134_8_6_2 + 8.333333333333322e-02*G134_9_6_0 + 8.333333333333323e-02*G134_10_6_1 + 8.333333333333323e-02*G134_11_6_2 + 8.333333333333322e-02*G135_0_6_0 + 8.333333333333323e-02*G135_0_6_1 + 8.333333333333322e-02*G135_0_6_2 - 8.333333333333322e-02*G135_1_6_0 - 8.333333333333323e-02*G135_2_6_1 - 8.333333333333323e-02*G135_3_6_2 - 8.333333333333322e-02*G136_8_7_0 - 8.333333333333323e-02*G136_8_7_1 - 8.333333333333323e-02*G136_8_7_2 + 8.333333333333322e-02*G136_9_7_0 + 8.333333333333323e-02*G136_10_7_1 + 8.333333333333323e-02*G136_11_7_2 + 8.333333333333322e-02*G137_4_7_0 + 8.333333333333323e-02*G137_4_7_1 + 8.333333333333323e-02*G137_4_7_2 - 8.333333333333322e-02*G137_5_7_0 - 8.333333333333323e-02*G137_6_7_1 - 8.333333333333323e-02*G137_7_7_2 - 8.333333333333322e-02*G138_8_8_0 - 8.333333333333323e-02*G138_8_8_1 - 8.333333333333323e-02*G138_8_8_2 + 8.333333333333322e-02*G138_9_8_0 + 8.333333333333323e-02*G138_10_8_1 + 8.333333333333323e-02*G138_11_8_2 + 8.333333333333322e-02*G139_8_8_0 + 8.333333333333323e-02*G139_8_8_1 + 8.333333333333323e-02*G139_8_8_2 - 8.333333333333322e-02*G139_9_8_0 - 8.333333333333323e-02*G139_10_8_1 - 8.333333333333323e-02*G139_11_8_2 + 8.333333333333322e-02*G140_2_0_0 + 8.333333333333323e-02*G140_2_0_1 + 8.333333333333322e-02*G140_2_0_2 - 8.333333333333322e-02*G140_2_1_0 - 8.333333333333323e-02*G140_2_2_1 - 8.333333333333323e-02*G140_2_3_2 - 8.333333333333322e-02*G141_2_8_0 - 8.333333333333323e-02*G141_2_8_1 - 8.333333333333323e-02*G141_2_8_2 + 8.333333333333322e-02*G141_2_9_0 + 8.333333333333323e-02*G141_2_10_1 + 8.333333333333323e-02*G141_2_11_2 + 8.333333333333322e-02*G142_5_4_0 + 8.333333333333323e-02*G142_5_4_1 + 8.333333333333323e-02*G142_5_4_2 - 8.333333333333322e-02*G142_5_5_0 - 8.333333333333323e-02*G142_5_6_1 - 8.333333333333323e-02*G142_5_7_2 - 8.333333333333322e-02*G143_5_8_0 - 8.333333333333323e-02*G143_5_8_1 - 8.333333333333323e-02*G143_5_8_2 + 8.333333333333322e-02*G143_5_9_0 + 8.333333333333323e-02*G143_5_10_1 + 8.333333333333323e-02*G143_5_11_2;
  }

private:

  const real& c0;  const real& c1;  const real& c2;

};

} }

#endif
