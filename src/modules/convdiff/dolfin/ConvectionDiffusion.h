// This file was automatically generated by FFC, the FEniCS Form Compiler.
// Licensed under the GNU GPL Version 2.

#ifndef __CONVECTIONDIFFUSION_H
#define __CONVECTIONDIFFUSION_H

#include <dolfin/NewFiniteElement.h>
#include <dolfin/LinearForm.h>
#include <dolfin/BilinearForm.h>

namespace dolfin { namespace ConvectionDiffusion {

/// This class contains the form to be evaluated, including
/// contributions from the interior and boundary of the domain.

class BilinearForm : public dolfin::BilinearForm
{
public:

  class TestElement : public dolfin::NewFiniteElement
  {
  public:

    TestElement() : dolfin::NewFiniteElement(), tensordims(0)
    {
      // Do nothing
    }

    ~TestElement()
    {
      if ( tensordims ) delete [] tensordims;
    }

    inline unsigned int spacedim() const
    {
      return 3;
    }

    inline unsigned int shapedim() const
    {
      return 2;
    }

    inline unsigned int tensordim(unsigned int i) const
    {
      dolfin_error("Element is scalar.");
      return 0;
    }

    inline unsigned int rank() const
    {
      return 0;
    }

    // FIXME: Only works for nodal basis
    inline unsigned int dof(unsigned int i, const Cell& cell, const Mesh& mesh) const
    {
      return cell.nodeID(i);
    }

    // FIXME: Only works for nodal basis
    inline const Point coord(unsigned int i, const Cell& cell, const Mesh& mesh) const
    {
      return cell.node(i).coord();
    }

  private:

    unsigned int* tensordims;

  };

  class TrialElement : public dolfin::NewFiniteElement
  {
  public:

    TrialElement() : dolfin::NewFiniteElement(), tensordims(0)
    {
      // Do nothing
    }

    ~TrialElement()
    {
      if ( tensordims ) delete [] tensordims;
    }

    inline unsigned int spacedim() const
    {
      return 3;
    }

    inline unsigned int shapedim() const
    {
      return 2;
    }

    inline unsigned int tensordim(unsigned int i) const
    {
      dolfin_error("Element is scalar.");
      return 0;
    }

    inline unsigned int rank() const
    {
      return 0;
    }

    // FIXME: Only works for nodal basis
    inline unsigned int dof(unsigned int i, const Cell& cell, const Mesh& mesh) const
    {
      return cell.nodeID(i);
    }

    // FIXME: Only works for nodal basis
    inline const Point coord(unsigned int i, const Cell& cell, const Mesh& mesh) const
    {
      return cell.node(i).coord();
    }

  private:

    unsigned int* tensordims;

  };

  class FunctionElement_0 : public dolfin::NewFiniteElement
  {
  public:

    FunctionElement_0() : dolfin::NewFiniteElement(), tensordims(0)
    {
      tensordims = new unsigned int [1];
      tensordims[0] = 2;
    }

    ~FunctionElement_0()
    {
      if ( tensordims ) delete [] tensordims;
    }

    inline unsigned int spacedim() const
    {
      return 6;
    }

    inline unsigned int shapedim() const
    {
      return 2;
    }

    inline unsigned int tensordim(unsigned int i) const
    {
      dolfin_assert(i < 1);
      return tensordims[i];
    }

    inline unsigned int rank() const
    {
      return 1;
    }

    // FIXME: Only works for nodal basis
    inline unsigned int dof(unsigned int i, const Cell& cell, const Mesh& mesh) const
    {
      return (i/3) * mesh.noNodes() + cell.nodeID(i % 3);
    }

    // FIXME: Only works for nodal basis
    inline const Point coord(unsigned int i, const Cell& cell, const Mesh& mesh) const
    {
      return cell.node(i % 3).coord();
    }

  private:

    unsigned int* tensordims;

  };

  BilinearForm(NewFunction& w0, const real& c0, const real& c1) : dolfin::BilinearForm(1), c0(c0), c1(c1)
  {
    // Create finite element for test space
    _test = new TestElement();

    // Create finite element for trial space
    _trial = new TrialElement();
        
    // Add functions
    add(w0, new FunctionElement_0());
  }

  bool interior(real* block) const
  {
    // Compute geometry tensors
    real G0_ = det;
    real G1_0_0_0 = det*c0*w[0][0]*g00;
    real G1_0_0_1 = det*c0*w[0][0]*g10;
    real G1_0_1_0 = det*c0*w[0][1]*g00;
    real G1_0_1_1 = det*c0*w[0][1]*g10;
    real G1_0_2_0 = det*c0*w[0][2]*g00;
    real G1_0_2_1 = det*c0*w[0][2]*g10;
    real G1_1_3_0 = det*c0*w[0][3]*g01;
    real G1_1_3_1 = det*c0*w[0][3]*g11;
    real G1_1_4_0 = det*c0*w[0][4]*g01;
    real G1_1_4_1 = det*c0*w[0][4]*g11;
    real G1_1_5_0 = det*c0*w[0][5]*g01;
    real G1_1_5_1 = det*c0*w[0][5]*g11;
    real G2_0_0 = det*c0*c1*(g00*g00 + g01*g01);
    real G2_0_1 = det*c0*c1*(g00*g10 + g01*g11);
    real G2_1_0 = det*c0*c1*(g10*g00 + g11*g01);
    real G2_1_1 = det*c0*c1*(g10*g10 + g11*g11);

    // Compute element tensor
    block[0] = 8.333333333333316e-02*G0_ - 4.166666666666659e-02*G1_0_0_0 - 4.166666666666658e-02*G1_0_0_1 - 2.083333333333329e-02*G1_0_1_0 - 2.083333333333329e-02*G1_0_1_1 - 2.083333333333329e-02*G1_0_2_0 - 2.083333333333329e-02*G1_0_2_1 - 4.166666666666659e-02*G1_1_3_0 - 4.166666666666658e-02*G1_1_3_1 - 2.083333333333329e-02*G1_1_4_0 - 2.083333333333329e-02*G1_1_4_1 - 2.083333333333329e-02*G1_1_5_0 - 2.083333333333329e-02*G1_1_5_1 + 2.499999999999999e-01*G2_0_0 + 2.499999999999998e-01*G2_0_1 + 2.499999999999998e-01*G2_1_0 + 2.499999999999998e-01*G2_1_1;
    block[1] = 4.166666666666658e-02*G0_ + 4.166666666666659e-02*G1_0_0_0 + 2.083333333333329e-02*G1_0_1_0 + 2.083333333333329e-02*G1_0_2_0 + 4.166666666666659e-02*G1_1_3_0 + 2.083333333333329e-02*G1_1_4_0 + 2.083333333333329e-02*G1_1_5_0 - 2.499999999999999e-01*G2_0_0 - 2.499999999999998e-01*G2_1_0;
    block[2] = 4.166666666666657e-02*G0_ + 4.166666666666658e-02*G1_0_0_1 + 2.083333333333329e-02*G1_0_1_1 + 2.083333333333329e-02*G1_0_2_1 + 4.166666666666658e-02*G1_1_3_1 + 2.083333333333329e-02*G1_1_4_1 + 2.083333333333329e-02*G1_1_5_1 - 2.499999999999998e-01*G2_0_1 - 2.499999999999998e-01*G2_1_1;
    block[3] = 4.166666666666658e-02*G0_ - 2.083333333333329e-02*G1_0_0_0 - 2.083333333333329e-02*G1_0_0_1 - 4.166666666666659e-02*G1_0_1_0 - 4.166666666666659e-02*G1_0_1_1 - 2.083333333333330e-02*G1_0_2_0 - 2.083333333333330e-02*G1_0_2_1 - 2.083333333333329e-02*G1_1_3_0 - 2.083333333333329e-02*G1_1_3_1 - 4.166666666666659e-02*G1_1_4_0 - 4.166666666666659e-02*G1_1_4_1 - 2.083333333333330e-02*G1_1_5_0 - 2.083333333333330e-02*G1_1_5_1 - 2.499999999999999e-01*G2_0_0 - 2.499999999999998e-01*G2_0_1;
    block[4] = 8.333333333333318e-02*G0_ + 2.083333333333329e-02*G1_0_0_0 + 4.166666666666659e-02*G1_0_1_0 + 2.083333333333330e-02*G1_0_2_0 + 2.083333333333329e-02*G1_1_3_0 + 4.166666666666659e-02*G1_1_4_0 + 2.083333333333330e-02*G1_1_5_0 + 2.499999999999999e-01*G2_0_0;
    block[5] = 4.166666666666659e-02*G0_ + 2.083333333333329e-02*G1_0_0_1 + 4.166666666666659e-02*G1_0_1_1 + 2.083333333333330e-02*G1_0_2_1 + 2.083333333333329e-02*G1_1_3_1 + 4.166666666666659e-02*G1_1_4_1 + 2.083333333333330e-02*G1_1_5_1 + 2.499999999999998e-01*G2_0_1;
    block[6] = 4.166666666666657e-02*G0_ - 2.083333333333329e-02*G1_0_0_0 - 2.083333333333329e-02*G1_0_0_1 - 2.083333333333330e-02*G1_0_1_0 - 2.083333333333330e-02*G1_0_1_1 - 4.166666666666660e-02*G1_0_2_0 - 4.166666666666658e-02*G1_0_2_1 - 2.083333333333329e-02*G1_1_3_0 - 2.083333333333329e-02*G1_1_3_1 - 2.083333333333330e-02*G1_1_4_0 - 2.083333333333330e-02*G1_1_4_1 - 4.166666666666660e-02*G1_1_5_0 - 4.166666666666658e-02*G1_1_5_1 - 2.499999999999998e-01*G2_1_0 - 2.499999999999998e-01*G2_1_1;
    block[7] = 4.166666666666659e-02*G0_ + 2.083333333333329e-02*G1_0_0_0 + 2.083333333333330e-02*G1_0_1_0 + 4.166666666666660e-02*G1_0_2_0 + 2.083333333333329e-02*G1_1_3_0 + 2.083333333333330e-02*G1_1_4_0 + 4.166666666666660e-02*G1_1_5_0 + 2.499999999999998e-01*G2_1_0;
    block[8] = 8.333333333333316e-02*G0_ + 2.083333333333329e-02*G1_0_0_1 + 2.083333333333330e-02*G1_0_1_1 + 4.166666666666658e-02*G1_0_2_1 + 2.083333333333329e-02*G1_1_3_1 + 2.083333333333330e-02*G1_1_4_1 + 4.166666666666658e-02*G1_1_5_1 + 2.499999999999998e-01*G2_1_1;

    return true;
  }
        
private:

  const real& c0;  const real& c1;

};

/// This class contains the form to be evaluated, including
/// contributions from the interior and boundary of the domain.

class LinearForm : public dolfin::LinearForm
{
public:

  class TestElement : public dolfin::NewFiniteElement
  {
  public:

    TestElement() : dolfin::NewFiniteElement(), tensordims(0)
    {
      // Do nothing
    }

    ~TestElement()
    {
      if ( tensordims ) delete [] tensordims;
    }

    inline unsigned int spacedim() const
    {
      return 3;
    }

    inline unsigned int shapedim() const
    {
      return 2;
    }

    inline unsigned int tensordim(unsigned int i) const
    {
      dolfin_error("Element is scalar.");
      return 0;
    }

    inline unsigned int rank() const
    {
      return 0;
    }

    // FIXME: Only works for nodal basis
    inline unsigned int dof(unsigned int i, const Cell& cell, const Mesh& mesh) const
    {
      return cell.nodeID(i);
    }

    // FIXME: Only works for nodal basis
    inline const Point coord(unsigned int i, const Cell& cell, const Mesh& mesh) const
    {
      return cell.node(i).coord();
    }

  private:

    unsigned int* tensordims;

  };

  class FunctionElement_0 : public dolfin::NewFiniteElement
  {
  public:

    FunctionElement_0() : dolfin::NewFiniteElement(), tensordims(0)
    {
      // Do nothing
    }

    ~FunctionElement_0()
    {
      if ( tensordims ) delete [] tensordims;
    }

    inline unsigned int spacedim() const
    {
      return 3;
    }

    inline unsigned int shapedim() const
    {
      return 2;
    }

    inline unsigned int tensordim(unsigned int i) const
    {
      dolfin_error("Element is scalar.");
      return 0;
    }

    inline unsigned int rank() const
    {
      return 0;
    }

    // FIXME: Only works for nodal basis
    inline unsigned int dof(unsigned int i, const Cell& cell, const Mesh& mesh) const
    {
      return cell.nodeID(i);
    }

    // FIXME: Only works for nodal basis
    inline const Point coord(unsigned int i, const Cell& cell, const Mesh& mesh) const
    {
      return cell.node(i).coord();
    }

  private:

    unsigned int* tensordims;

  };

  class FunctionElement_1 : public dolfin::NewFiniteElement
  {
  public:

    FunctionElement_1() : dolfin::NewFiniteElement(), tensordims(0)
    {
      tensordims = new unsigned int [1];
      tensordims[0] = 2;
    }

    ~FunctionElement_1()
    {
      if ( tensordims ) delete [] tensordims;
    }

    inline unsigned int spacedim() const
    {
      return 6;
    }

    inline unsigned int shapedim() const
    {
      return 2;
    }

    inline unsigned int tensordim(unsigned int i) const
    {
      dolfin_assert(i < 1);
      return tensordims[i];
    }

    inline unsigned int rank() const
    {
      return 1;
    }

    // FIXME: Only works for nodal basis
    inline unsigned int dof(unsigned int i, const Cell& cell, const Mesh& mesh) const
    {
      return (i/3) * mesh.noNodes() + cell.nodeID(i % 3);
    }

    // FIXME: Only works for nodal basis
    inline const Point coord(unsigned int i, const Cell& cell, const Mesh& mesh) const
    {
      return cell.node(i % 3).coord();
    }

  private:

    unsigned int* tensordims;

  };

  class FunctionElement_2 : public dolfin::NewFiniteElement
  {
  public:

    FunctionElement_2() : dolfin::NewFiniteElement(), tensordims(0)
    {
      // Do nothing
    }

    ~FunctionElement_2()
    {
      if ( tensordims ) delete [] tensordims;
    }

    inline unsigned int spacedim() const
    {
      return 3;
    }

    inline unsigned int shapedim() const
    {
      return 2;
    }

    inline unsigned int tensordim(unsigned int i) const
    {
      dolfin_error("Element is scalar.");
      return 0;
    }

    inline unsigned int rank() const
    {
      return 0;
    }

    // FIXME: Only works for nodal basis
    inline unsigned int dof(unsigned int i, const Cell& cell, const Mesh& mesh) const
    {
      return cell.nodeID(i);
    }

    // FIXME: Only works for nodal basis
    inline const Point coord(unsigned int i, const Cell& cell, const Mesh& mesh) const
    {
      return cell.node(i).coord();
    }

  private:

    unsigned int* tensordims;

  };

  LinearForm(NewFunction& w0, NewFunction& w1, NewFunction& w2, const real& c0, const real& c1) : dolfin::LinearForm(3), c0(c0), c1(c1)
  {
    // Create finite element for test space
    _test = new TestElement();
        
    // Add functions
    add(w0, new FunctionElement_0());
    add(w1, new FunctionElement_1());
    add(w2, new FunctionElement_2());
  }

  bool interior(real* block) const
  {
    // Compute geometry tensors
    real G0_0 = det*w[0][0];
    real G0_1 = det*w[0][1];
    real G0_2 = det*w[0][2];
    real G1_0_0_0_0 = det*c0*w[1][0]*w[0][0]*g00;
    real G1_0_0_0_1 = det*c0*w[1][0]*w[0][0]*g10;
    real G1_0_0_1_0 = det*c0*w[1][0]*w[0][1]*g00;
    real G1_0_0_2_1 = det*c0*w[1][0]*w[0][2]*g10;
    real G1_0_1_0_0 = det*c0*w[1][1]*w[0][0]*g00;
    real G1_0_1_0_1 = det*c0*w[1][1]*w[0][0]*g10;
    real G1_0_1_1_0 = det*c0*w[1][1]*w[0][1]*g00;
    real G1_0_1_2_1 = det*c0*w[1][1]*w[0][2]*g10;
    real G1_0_2_0_0 = det*c0*w[1][2]*w[0][0]*g00;
    real G1_0_2_0_1 = det*c0*w[1][2]*w[0][0]*g10;
    real G1_0_2_1_0 = det*c0*w[1][2]*w[0][1]*g00;
    real G1_0_2_2_1 = det*c0*w[1][2]*w[0][2]*g10;
    real G1_1_3_0_0 = det*c0*w[1][3]*w[0][0]*g01;
    real G1_1_3_0_1 = det*c0*w[1][3]*w[0][0]*g11;
    real G1_1_3_1_0 = det*c0*w[1][3]*w[0][1]*g01;
    real G1_1_3_2_1 = det*c0*w[1][3]*w[0][2]*g11;
    real G1_1_4_0_0 = det*c0*w[1][4]*w[0][0]*g01;
    real G1_1_4_0_1 = det*c0*w[1][4]*w[0][0]*g11;
    real G1_1_4_1_0 = det*c0*w[1][4]*w[0][1]*g01;
    real G1_1_4_2_1 = det*c0*w[1][4]*w[0][2]*g11;
    real G1_1_5_0_0 = det*c0*w[1][5]*w[0][0]*g01;
    real G1_1_5_0_1 = det*c0*w[1][5]*w[0][0]*g11;
    real G1_1_5_1_0 = det*c0*w[1][5]*w[0][1]*g01;
    real G1_1_5_2_1 = det*c0*w[1][5]*w[0][2]*g11;
    real G2_0_0_0 = det*c0*c1*w[0][0]*(g00*g00 + g01*g01);
    real G2_0_0_1 = det*c0*c1*w[0][0]*(g00*g10 + g01*g11);
    real G2_0_1_0 = det*c0*c1*w[0][1]*(g00*g00 + g01*g01);
    real G2_0_2_1 = det*c0*c1*w[0][2]*(g00*g10 + g01*g11);
    real G2_1_0_0 = det*c0*c1*w[0][0]*(g10*g00 + g11*g01);
    real G2_1_0_1 = det*c0*c1*w[0][0]*(g10*g10 + g11*g11);
    real G2_1_1_0 = det*c0*c1*w[0][1]*(g10*g00 + g11*g01);
    real G2_1_2_1 = det*c0*c1*w[0][2]*(g10*g10 + g11*g11);
    real G3_0 = det*w[2][0];
    real G3_1 = det*w[2][1];
    real G3_2 = det*w[2][2];

    // Compute element tensor
    block[0] = 8.333333333333316e-02*G0_0 + 4.166666666666658e-02*G0_1 + 4.166666666666657e-02*G0_2 + 4.166666666666659e-02*G1_0_0_0_0 + 4.166666666666658e-02*G1_0_0_0_1 - 4.166666666666659e-02*G1_0_0_1_0 - 4.166666666666658e-02*G1_0_0_2_1 + 2.083333333333329e-02*G1_0_1_0_0 + 2.083333333333329e-02*G1_0_1_0_1 - 2.083333333333329e-02*G1_0_1_1_0 - 2.083333333333329e-02*G1_0_1_2_1 + 2.083333333333329e-02*G1_0_2_0_0 + 2.083333333333329e-02*G1_0_2_0_1 - 2.083333333333329e-02*G1_0_2_1_0 - 2.083333333333329e-02*G1_0_2_2_1 + 4.166666666666659e-02*G1_1_3_0_0 + 4.166666666666658e-02*G1_1_3_0_1 - 4.166666666666659e-02*G1_1_3_1_0 - 4.166666666666658e-02*G1_1_3_2_1 + 2.083333333333329e-02*G1_1_4_0_0 + 2.083333333333329e-02*G1_1_4_0_1 - 2.083333333333329e-02*G1_1_4_1_0 - 2.083333333333329e-02*G1_1_4_2_1 + 2.083333333333329e-02*G1_1_5_0_0 + 2.083333333333329e-02*G1_1_5_0_1 - 2.083333333333329e-02*G1_1_5_1_0 - 2.083333333333329e-02*G1_1_5_2_1 - 2.499999999999999e-01*G2_0_0_0 - 2.499999999999998e-01*G2_0_0_1 + 2.499999999999999e-01*G2_0_1_0 + 2.499999999999998e-01*G2_0_2_1 - 2.499999999999998e-01*G2_1_0_0 - 2.499999999999998e-01*G2_1_0_1 + 2.499999999999998e-01*G2_1_1_0 + 2.499999999999998e-01*G2_1_2_1 + 8.333333333333316e-02*G3_0 + 4.166666666666658e-02*G3_1 + 4.166666666666657e-02*G3_2;
    block[1] = 4.166666666666658e-02*G0_0 + 8.333333333333318e-02*G0_1 + 4.166666666666659e-02*G0_2 + 2.083333333333329e-02*G1_0_0_0_0 + 2.083333333333329e-02*G1_0_0_0_1 - 2.083333333333329e-02*G1_0_0_1_0 - 2.083333333333329e-02*G1_0_0_2_1 + 4.166666666666659e-02*G1_0_1_0_0 + 4.166666666666659e-02*G1_0_1_0_1 - 4.166666666666659e-02*G1_0_1_1_0 - 4.166666666666659e-02*G1_0_1_2_1 + 2.083333333333330e-02*G1_0_2_0_0 + 2.083333333333330e-02*G1_0_2_0_1 - 2.083333333333330e-02*G1_0_2_1_0 - 2.083333333333330e-02*G1_0_2_2_1 + 2.083333333333329e-02*G1_1_3_0_0 + 2.083333333333329e-02*G1_1_3_0_1 - 2.083333333333329e-02*G1_1_3_1_0 - 2.083333333333329e-02*G1_1_3_2_1 + 4.166666666666659e-02*G1_1_4_0_0 + 4.166666666666659e-02*G1_1_4_0_1 - 4.166666666666659e-02*G1_1_4_1_0 - 4.166666666666659e-02*G1_1_4_2_1 + 2.083333333333330e-02*G1_1_5_0_0 + 2.083333333333330e-02*G1_1_5_0_1 - 2.083333333333330e-02*G1_1_5_1_0 - 2.083333333333330e-02*G1_1_5_2_1 + 2.499999999999999e-01*G2_0_0_0 + 2.499999999999998e-01*G2_0_0_1 - 2.499999999999999e-01*G2_0_1_0 - 2.499999999999998e-01*G2_0_2_1 + 4.166666666666658e-02*G3_0 + 8.333333333333318e-02*G3_1 + 4.166666666666659e-02*G3_2;
    block[2] = 4.166666666666657e-02*G0_0 + 4.166666666666659e-02*G0_1 + 8.333333333333316e-02*G0_2 + 2.083333333333329e-02*G1_0_0_0_0 + 2.083333333333329e-02*G1_0_0_0_1 - 2.083333333333329e-02*G1_0_0_1_0 - 2.083333333333329e-02*G1_0_0_2_1 + 2.083333333333330e-02*G1_0_1_0_0 + 2.083333333333330e-02*G1_0_1_0_1 - 2.083333333333330e-02*G1_0_1_1_0 - 2.083333333333330e-02*G1_0_1_2_1 + 4.166666666666660e-02*G1_0_2_0_0 + 4.166666666666658e-02*G1_0_2_0_1 - 4.166666666666660e-02*G1_0_2_1_0 - 4.166666666666658e-02*G1_0_2_2_1 + 2.083333333333329e-02*G1_1_3_0_0 + 2.083333333333329e-02*G1_1_3_0_1 - 2.083333333333329e-02*G1_1_3_1_0 - 2.083333333333329e-02*G1_1_3_2_1 + 2.083333333333330e-02*G1_1_4_0_0 + 2.083333333333330e-02*G1_1_4_0_1 - 2.083333333333330e-02*G1_1_4_1_0 - 2.083333333333330e-02*G1_1_4_2_1 + 4.166666666666660e-02*G1_1_5_0_0 + 4.166666666666658e-02*G1_1_5_0_1 - 4.166666666666660e-02*G1_1_5_1_0 - 4.166666666666658e-02*G1_1_5_2_1 + 2.499999999999998e-01*G2_1_0_0 + 2.499999999999998e-01*G2_1_0_1 - 2.499999999999998e-01*G2_1_1_0 - 2.499999999999998e-01*G2_1_2_1 + 4.166666666666657e-02*G3_0 + 4.166666666666659e-02*G3_1 + 8.333333333333316e-02*G3_2;

    return true;
  }
        
private:

  const real& c0;  const real& c1;

};

} }

#endif
