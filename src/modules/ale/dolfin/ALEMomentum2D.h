// Automatically generated by FFC, the FEniCS Form Compiler, version 0.3.4.
// For further information, go to http://www/fenics.org/ffc/.
// Licensed under the GNU GPL Version 2.

#ifndef __ALEMOMENTUM2D_H
#define __ALEMOMENTUM2D_H

#include <dolfin/Mesh.h>
#include <dolfin/Cell.h>
#include <dolfin/Point.h>
#include <dolfin/AffineMap.h>
#include <dolfin/FiniteElement.h>
#include <dolfin/FiniteElementSpec.h>
#include <dolfin/BilinearForm.h>
#include <dolfin/LinearForm.h>
#include <dolfin/Functional.h>
#include <dolfin/FEM.h>

namespace dolfin { namespace ALEMomentum2D {

/// This class contains the form to be evaluated, including
/// contributions from the interior and boundary of the domain.

class BilinearForm : public dolfin::BilinearForm
{
public:

  class TestElement;

  class TrialElement;

  class FunctionElement_0;

  class FunctionElement_1;

  class FunctionElement_2;

  class FunctionElement_3;

  BilinearForm(Function& w0, Function& w1, Function& w2, Function& w3, const real& c0, const real& c1);
  

  bool interior_contribution() const;

  void eval(real block[], const AffineMap& map) const;

  bool boundary_contribution() const;

  void eval(real block[], const AffineMap& map, unsigned int facet) const;

private:

  const real& c0;  const real& c1;

};

class BilinearForm::TestElement : public dolfin::FiniteElement
{
public:

  TestElement() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 2;

    // Element is simple, don't need to initialize subelements
  }

  ~TestElement()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 6;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    int offset = mesh.topology().size(0);
    nodes[3] = offset + cell.entities(0)[0];
    nodes[4] = offset + cell.entities(0)[1];
    nodes[5] = offset + cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[4] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 1;
    components[4] = 1;
    components[5] = 1;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0);
    vertex_nodes[1] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Vector Lagrange", "triangle", 1, 2);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class BilinearForm::TrialElement : public dolfin::FiniteElement
{
public:

  TrialElement() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 2;

    // Element is simple, don't need to initialize subelements
  }

  ~TrialElement()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 6;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    int offset = mesh.topology().size(0);
    nodes[3] = offset + cell.entities(0)[0];
    nodes[4] = offset + cell.entities(0)[1];
    nodes[5] = offset + cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[4] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 1;
    components[4] = 1;
    components[5] = 1;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0);
    vertex_nodes[1] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Vector Lagrange", "triangle", 1, 2);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class BilinearForm::FunctionElement_0 : public dolfin::FiniteElement
{
public:

  FunctionElement_0() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 2;

    // Element is simple, don't need to initialize subelements
  }

  ~FunctionElement_0()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 6;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    int offset = mesh.topology().size(0);
    nodes[3] = offset + cell.entities(0)[0];
    nodes[4] = offset + cell.entities(0)[1];
    nodes[5] = offset + cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[4] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 1;
    components[4] = 1;
    components[5] = 1;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0);
    vertex_nodes[1] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Vector Lagrange", "triangle", 1, 2);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class BilinearForm::FunctionElement_1 : public dolfin::FiniteElement
{
public:

  FunctionElement_1() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~FunctionElement_1()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 1;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.index();
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(3.333333333333334e-01, 3.333333333333334e-01);
    components[0] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Discontinuous Lagrange", "triangle", 0);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class BilinearForm::FunctionElement_2 : public dolfin::FiniteElement
{
public:

  FunctionElement_2() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~FunctionElement_2()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 1;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.index();
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(3.333333333333334e-01, 3.333333333333334e-01);
    components[0] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Discontinuous Lagrange", "triangle", 0);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class BilinearForm::FunctionElement_3 : public dolfin::FiniteElement
{
public:

  FunctionElement_3() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 2;

    // Element is simple, don't need to initialize subelements
  }

  ~FunctionElement_3()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 6;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    int offset = mesh.topology().size(0);
    nodes[3] = offset + cell.entities(0)[0];
    nodes[4] = offset + cell.entities(0)[1];
    nodes[5] = offset + cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[4] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 1;
    components[4] = 1;
    components[5] = 1;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0);
    vertex_nodes[1] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Vector Lagrange", "triangle", 1, 2);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

BilinearForm::BilinearForm(Function& w0, Function& w1, Function& w2, Function& w3, const real& c0, const real& c1) : dolfin::BilinearForm(4), c0(c0), c1(c1)
{
  // Create finite element for test space
  _test = new TestElement();

  // Create finite element for trial space
  _trial = new TrialElement();

  // Add functions
  initFunction(0, w0, new FunctionElement_0());
  initFunction(1, w1, new FunctionElement_1());
  initFunction(2, w2, new FunctionElement_2());
  initFunction(3, w3, new FunctionElement_3());
}

// Contribution from the interior
bool BilinearForm::interior_contribution() const { return true; }

void BilinearForm::eval(real block[], const AffineMap& map) const
{
  // Compute coefficients
  const real c0_0 = c[0][0];
  const real c0_1 = c[0][1];
  const real c0_2 = c[0][2];
  const real c0_3 = c[0][3];
  const real c0_4 = c[0][4];
  const real c0_5 = c[0][5];
  const real c1_0 = c[1][0];
  const real c2_0 = c[2][0];
  const real c3_0 = c[3][0];
  const real c3_1 = c[3][1];
  const real c3_2 = c[3][2];
  const real c3_3 = c[3][3];
  const real c3_4 = c[3][4];
  const real c3_5 = c[3][5];
  const real c4_0 = 3.333333333333333e-01*c[0][0] + 3.333333333333334e-01*c[0][1] + 3.333333333333333e-01*c[0][2];
  const real c4_1 = 3.333333333333333e-01*c[0][3] + 3.333333333333334e-01*c[0][4] + 3.333333333333333e-01*c[0][5];
  const real c5_0 = 3.333333333333333e-01*c[3][0] + 3.333333333333334e-01*c[3][1] + 3.333333333333333e-01*c[3][2];
  const real c5_1 = 3.333333333333333e-01*c[3][3] + 3.333333333333334e-01*c[3][4] + 3.333333333333333e-01*c[3][5];

  // Compute geometry tensors
  const real G0_ = map.det;
  const real G1_0_0 = map.det*c0*c1*(map.g00*map.g00 + map.g01*map.g01);
  const real G1_0_1 = map.det*c0*c1*(map.g00*map.g10 + map.g01*map.g11);
  const real G1_1_0 = map.det*c0*c1*(map.g10*map.g00 + map.g11*map.g01);
  const real G1_1_1 = map.det*c0*c1*(map.g10*map.g10 + map.g11*map.g11);
  const real G2_0_0_0 = map.det*c0*c0_0*map.g00;
  const real G2_0_0_1 = map.det*c0*c0_0*map.g10;
  const real G2_0_1_0 = map.det*c0*c0_1*map.g00;
  const real G2_0_1_1 = map.det*c0*c0_1*map.g10;
  const real G2_0_2_0 = map.det*c0*c0_2*map.g00;
  const real G2_0_2_1 = map.det*c0*c0_2*map.g10;
  const real G2_1_3_0 = map.det*c0*c0_3*map.g01;
  const real G2_1_3_1 = map.det*c0*c0_3*map.g11;
  const real G2_1_4_0 = map.det*c0*c0_4*map.g01;
  const real G2_1_4_1 = map.det*c0*c0_4*map.g11;
  const real G2_1_5_0 = map.det*c0*c0_5*map.g01;
  const real G2_1_5_1 = map.det*c0*c0_5*map.g11;
  const real G3_0_0_0 = map.det*c0*c3_0*map.g00;
  const real G3_0_0_1 = map.det*c0*c3_0*map.g10;
  const real G3_0_1_0 = map.det*c0*c3_1*map.g00;
  const real G3_0_1_1 = map.det*c0*c3_1*map.g10;
  const real G3_0_2_0 = map.det*c0*c3_2*map.g00;
  const real G3_0_2_1 = map.det*c0*c3_2*map.g10;
  const real G3_1_3_0 = map.det*c0*c3_3*map.g01;
  const real G3_1_3_1 = map.det*c0*c3_3*map.g11;
  const real G3_1_4_0 = map.det*c0*c3_4*map.g01;
  const real G3_1_4_1 = map.det*c0*c3_4*map.g11;
  const real G3_1_5_0 = map.det*c0*c3_5*map.g01;
  const real G3_1_5_1 = map.det*c0*c3_5*map.g11;
  const real G4_0_0_0_0_0_0_0 = map.det*c0*c1_0*c4_0*c4_0*map.g00*map.g00 + map.det*c0*c1_0*c5_0*c5_0*map.g00*map.g00;
  const real G4_0_0_0_0_0_0_1 = map.det*c0*c1_0*c4_0*c4_0*map.g00*map.g10 + map.det*c0*c1_0*c5_0*c5_0*map.g00*map.g10;
  const real G4_0_0_0_0_1_0_0 = map.det*c0*c1_0*c4_0*c4_0*map.g10*map.g00 + map.det*c0*c1_0*c5_0*c5_0*map.g10*map.g00;
  const real G4_0_0_0_0_1_0_1 = map.det*c0*c1_0*c4_0*c4_0*map.g10*map.g10 + map.det*c0*c1_0*c5_0*c5_0*map.g10*map.g10;
  const real G4_0_0_1_0_0_1_0 = map.det*c0*c1_0*c4_1*c4_0*map.g01*map.g00 + map.det*c0*c1_0*c5_1*c5_0*map.g01*map.g00;
  const real G4_0_0_1_0_0_1_1 = map.det*c0*c1_0*c4_1*c4_0*map.g01*map.g10 + map.det*c0*c1_0*c5_1*c5_0*map.g01*map.g10;
  const real G4_0_0_1_0_1_1_0 = map.det*c0*c1_0*c4_1*c4_0*map.g11*map.g00 + map.det*c0*c1_0*c5_1*c5_0*map.g11*map.g00;
  const real G4_0_0_1_0_1_1_1 = map.det*c0*c1_0*c4_1*c4_0*map.g11*map.g10 + map.det*c0*c1_0*c5_1*c5_0*map.g11*map.g10;
  const real G4_1_0_0_1_0_0_0 = map.det*c0*c1_0*c4_0*c4_1*map.g00*map.g01 + map.det*c0*c1_0*c5_0*c5_1*map.g00*map.g01;
  const real G4_1_0_0_1_0_0_1 = map.det*c0*c1_0*c4_0*c4_1*map.g00*map.g11 + map.det*c0*c1_0*c5_0*c5_1*map.g00*map.g11;
  const real G4_1_0_0_1_1_0_0 = map.det*c0*c1_0*c4_0*c4_1*map.g10*map.g01 + map.det*c0*c1_0*c5_0*c5_1*map.g10*map.g01;
  const real G4_1_0_0_1_1_0_1 = map.det*c0*c1_0*c4_0*c4_1*map.g10*map.g11 + map.det*c0*c1_0*c5_0*c5_1*map.g10*map.g11;
  const real G4_1_0_1_1_0_1_0 = map.det*c0*c1_0*c4_1*c4_1*map.g01*map.g01 + map.det*c0*c1_0*c5_1*c5_1*map.g01*map.g01;
  const real G4_1_0_1_1_0_1_1 = map.det*c0*c1_0*c4_1*c4_1*map.g01*map.g11 + map.det*c0*c1_0*c5_1*c5_1*map.g01*map.g11;
  const real G4_1_0_1_1_1_1_0 = map.det*c0*c1_0*c4_1*c4_1*map.g11*map.g01 + map.det*c0*c1_0*c5_1*c5_1*map.g11*map.g01;
  const real G4_1_0_1_1_1_1_1 = map.det*c0*c1_0*c4_1*c4_1*map.g11*map.g11 + map.det*c0*c1_0*c5_1*c5_1*map.g11*map.g11;
  const real G5_0_0_0_0_0_0_0 = map.det*c0*c1_0*c4_0*c5_0*map.g00*map.g00 + map.det*c0*c1_0*c5_0*c4_0*map.g00*map.g00;
  const real G5_0_0_0_0_0_0_1 = map.det*c0*c1_0*c4_0*c5_0*map.g00*map.g10 + map.det*c0*c1_0*c5_0*c4_0*map.g00*map.g10;
  const real G5_0_0_0_0_1_0_0 = map.det*c0*c1_0*c4_0*c5_0*map.g10*map.g00 + map.det*c0*c1_0*c5_0*c4_0*map.g10*map.g00;
  const real G5_0_0_0_0_1_0_1 = map.det*c0*c1_0*c4_0*c5_0*map.g10*map.g10 + map.det*c0*c1_0*c5_0*c4_0*map.g10*map.g10;
  const real G5_0_0_1_0_0_1_0 = map.det*c0*c1_0*c4_1*c5_0*map.g01*map.g00 + map.det*c0*c1_0*c5_1*c4_0*map.g01*map.g00;
  const real G5_0_0_1_0_0_1_1 = map.det*c0*c1_0*c4_1*c5_0*map.g01*map.g10 + map.det*c0*c1_0*c5_1*c4_0*map.g01*map.g10;
  const real G5_0_0_1_0_1_1_0 = map.det*c0*c1_0*c4_1*c5_0*map.g11*map.g00 + map.det*c0*c1_0*c5_1*c4_0*map.g11*map.g00;
  const real G5_0_0_1_0_1_1_1 = map.det*c0*c1_0*c4_1*c5_0*map.g11*map.g10 + map.det*c0*c1_0*c5_1*c4_0*map.g11*map.g10;
  const real G5_1_0_0_1_0_0_0 = map.det*c0*c1_0*c4_0*c5_1*map.g00*map.g01 + map.det*c0*c1_0*c5_0*c4_1*map.g00*map.g01;
  const real G5_1_0_0_1_0_0_1 = map.det*c0*c1_0*c4_0*c5_1*map.g00*map.g11 + map.det*c0*c1_0*c5_0*c4_1*map.g00*map.g11;
  const real G5_1_0_0_1_1_0_0 = map.det*c0*c1_0*c4_0*c5_1*map.g10*map.g01 + map.det*c0*c1_0*c5_0*c4_1*map.g10*map.g01;
  const real G5_1_0_0_1_1_0_1 = map.det*c0*c1_0*c4_0*c5_1*map.g10*map.g11 + map.det*c0*c1_0*c5_0*c4_1*map.g10*map.g11;
  const real G5_1_0_1_1_0_1_0 = map.det*c0*c1_0*c4_1*c5_1*map.g01*map.g01 + map.det*c0*c1_0*c5_1*c4_1*map.g01*map.g01;
  const real G5_1_0_1_1_0_1_1 = map.det*c0*c1_0*c4_1*c5_1*map.g01*map.g11 + map.det*c0*c1_0*c5_1*c4_1*map.g01*map.g11;
  const real G5_1_0_1_1_1_1_0 = map.det*c0*c1_0*c4_1*c5_1*map.g11*map.g01 + map.det*c0*c1_0*c5_1*c4_1*map.g11*map.g01;
  const real G5_1_0_1_1_1_1_1 = map.det*c0*c1_0*c4_1*c5_1*map.g11*map.g11 + map.det*c0*c1_0*c5_1*c4_1*map.g11*map.g11;
  const real G6_0_0_0_0_0 = map.det*c0*c2_0*map.g00*map.g00;
  const real G6_0_0_0_0_1 = map.det*c0*c2_0*map.g00*map.g01;
  const real G6_0_0_0_1_0 = map.det*c0*c2_0*map.g00*map.g10;
  const real G6_0_0_0_1_1 = map.det*c0*c2_0*map.g00*map.g11;
  const real G6_0_0_1_0_0 = map.det*c0*c2_0*map.g01*map.g00;
  const real G6_0_0_1_0_1 = map.det*c0*c2_0*map.g01*map.g01;
  const real G6_0_0_1_1_0 = map.det*c0*c2_0*map.g01*map.g10;
  const real G6_0_0_1_1_1 = map.det*c0*c2_0*map.g01*map.g11;
  const real G6_0_1_0_0_0 = map.det*c0*c2_0*map.g10*map.g00;
  const real G6_0_1_0_0_1 = map.det*c0*c2_0*map.g10*map.g01;
  const real G6_0_1_0_1_0 = map.det*c0*c2_0*map.g10*map.g10;
  const real G6_0_1_0_1_1 = map.det*c0*c2_0*map.g10*map.g11;
  const real G6_0_1_1_0_0 = map.det*c0*c2_0*map.g11*map.g00;
  const real G6_0_1_1_0_1 = map.det*c0*c2_0*map.g11*map.g01;
  const real G6_0_1_1_1_0 = map.det*c0*c2_0*map.g11*map.g10;
  const real G6_0_1_1_1_1 = map.det*c0*c2_0*map.g11*map.g11;

  // Compute element tensor
  block[0] = 8.333333333333318e-02*G0_ + 2.499999999999999e-01*G1_0_0 + 2.499999999999998e-01*G1_0_1 + 2.499999999999998e-01*G1_1_0 + 2.499999999999998e-01*G1_1_1 - 4.166666666666659e-02*G2_0_0_0 - 4.166666666666659e-02*G2_0_0_1 - 2.083333333333329e-02*G2_0_1_0 - 2.083333333333329e-02*G2_0_1_1 - 2.083333333333329e-02*G2_0_2_0 - 2.083333333333329e-02*G2_0_2_1 - 4.166666666666659e-02*G2_1_3_0 - 4.166666666666659e-02*G2_1_3_1 - 2.083333333333329e-02*G2_1_4_0 - 2.083333333333329e-02*G2_1_4_1 - 2.083333333333329e-02*G2_1_5_0 - 2.083333333333329e-02*G2_1_5_1 + 4.166666666666659e-02*G3_0_0_0 + 4.166666666666659e-02*G3_0_0_1 + 2.083333333333329e-02*G3_0_1_0 + 2.083333333333329e-02*G3_0_1_1 + 2.083333333333329e-02*G3_0_2_0 + 2.083333333333329e-02*G3_0_2_1 + 4.166666666666659e-02*G3_1_3_0 + 4.166666666666659e-02*G3_1_3_1 + 2.083333333333329e-02*G3_1_4_0 + 2.083333333333329e-02*G3_1_4_1 + 2.083333333333329e-02*G3_1_5_0 + 2.083333333333329e-02*G3_1_5_1 + 2.499999999999999e-01*G4_0_0_0_0_0_0_0 + 2.499999999999998e-01*G4_0_0_0_0_0_0_1 + 2.499999999999998e-01*G4_0_0_0_0_1_0_0 + 2.499999999999998e-01*G4_0_0_0_0_1_0_1 + 2.499999999999999e-01*G4_0_0_1_0_0_1_0 + 2.499999999999998e-01*G4_0_0_1_0_0_1_1 + 2.499999999999998e-01*G4_0_0_1_0_1_1_0 + 2.499999999999998e-01*G4_0_0_1_0_1_1_1 + 2.499999999999999e-01*G4_1_0_0_1_0_0_0 + 2.499999999999998e-01*G4_1_0_0_1_0_0_1 + 2.499999999999998e-01*G4_1_0_0_1_1_0_0 + 2.499999999999998e-01*G4_1_0_0_1_1_0_1 + 2.499999999999999e-01*G4_1_0_1_1_0_1_0 + 2.499999999999998e-01*G4_1_0_1_1_0_1_1 + 2.499999999999998e-01*G4_1_0_1_1_1_1_0 + 2.499999999999998e-01*G4_1_0_1_1_1_1_1 - 2.499999999999999e-01*G5_0_0_0_0_0_0_0 - 2.499999999999998e-01*G5_0_0_0_0_0_0_1 - 2.499999999999998e-01*G5_0_0_0_0_1_0_0 - 2.499999999999998e-01*G5_0_0_0_0_1_0_1 - 2.499999999999999e-01*G5_0_0_1_0_0_1_0 - 2.499999999999998e-01*G5_0_0_1_0_0_1_1 - 2.499999999999998e-01*G5_0_0_1_0_1_1_0 - 2.499999999999998e-01*G5_0_0_1_0_1_1_1 - 2.499999999999999e-01*G5_1_0_0_1_0_0_0 - 2.499999999999998e-01*G5_1_0_0_1_0_0_1 - 2.499999999999998e-01*G5_1_0_0_1_1_0_0 - 2.499999999999998e-01*G5_1_0_0_1_1_0_1 - 2.499999999999999e-01*G5_1_0_1_1_0_1_0 - 2.499999999999998e-01*G5_1_0_1_1_0_1_1 - 2.499999999999998e-01*G5_1_0_1_1_1_1_0 - 2.499999999999998e-01*G5_1_0_1_1_1_1_1 + 2.499999999999999e-01*G6_0_0_0_0_0 + 2.499999999999998e-01*G6_0_0_0_1_0 + 2.499999999999998e-01*G6_0_1_0_0_0 + 2.499999999999998e-01*G6_0_1_0_1_0;
  block[1] = 4.166666666666659e-02*G0_ - 2.499999999999999e-01*G1_0_0 - 2.499999999999998e-01*G1_1_0 + 4.166666666666659e-02*G2_0_0_0 + 2.083333333333329e-02*G2_0_1_0 + 2.083333333333329e-02*G2_0_2_0 + 4.166666666666659e-02*G2_1_3_0 + 2.083333333333329e-02*G2_1_4_0 + 2.083333333333329e-02*G2_1_5_0 - 4.166666666666659e-02*G3_0_0_0 - 2.083333333333329e-02*G3_0_1_0 - 2.083333333333329e-02*G3_0_2_0 - 4.166666666666659e-02*G3_1_3_0 - 2.083333333333329e-02*G3_1_4_0 - 2.083333333333329e-02*G3_1_5_0 - 2.499999999999999e-01*G4_0_0_0_0_0_0_0 - 2.499999999999998e-01*G4_0_0_0_0_1_0_0 - 2.499999999999999e-01*G4_0_0_1_0_0_1_0 - 2.499999999999998e-01*G4_0_0_1_0_1_1_0 - 2.499999999999999e-01*G4_1_0_0_1_0_0_0 - 2.499999999999998e-01*G4_1_0_0_1_1_0_0 - 2.499999999999999e-01*G4_1_0_1_1_0_1_0 - 2.499999999999998e-01*G4_1_0_1_1_1_1_0 + 2.499999999999999e-01*G5_0_0_0_0_0_0_0 + 2.499999999999998e-01*G5_0_0_0_0_1_0_0 + 2.499999999999999e-01*G5_0_0_1_0_0_1_0 + 2.499999999999998e-01*G5_0_0_1_0_1_1_0 + 2.499999999999999e-01*G5_1_0_0_1_0_0_0 + 2.499999999999998e-01*G5_1_0_0_1_1_0_0 + 2.499999999999999e-01*G5_1_0_1_1_0_1_0 + 2.499999999999998e-01*G5_1_0_1_1_1_1_0 - 2.499999999999999e-01*G6_0_0_0_0_0 - 2.499999999999998e-01*G6_0_1_0_0_0;
  block[2] = 4.166666666666657e-02*G0_ - 2.499999999999998e-01*G1_0_1 - 2.499999999999998e-01*G1_1_1 + 4.166666666666659e-02*G2_0_0_1 + 2.083333333333329e-02*G2_0_1_1 + 2.083333333333329e-02*G2_0_2_1 + 4.166666666666659e-02*G2_1_3_1 + 2.083333333333329e-02*G2_1_4_1 + 2.083333333333329e-02*G2_1_5_1 - 4.166666666666659e-02*G3_0_0_1 - 2.083333333333329e-02*G3_0_1_1 - 2.083333333333329e-02*G3_0_2_1 - 4.166666666666659e-02*G3_1_3_1 - 2.083333333333329e-02*G3_1_4_1 - 2.083333333333329e-02*G3_1_5_1 - 2.499999999999998e-01*G4_0_0_0_0_0_0_1 - 2.499999999999998e-01*G4_0_0_0_0_1_0_1 - 2.499999999999998e-01*G4_0_0_1_0_0_1_1 - 2.499999999999998e-01*G4_0_0_1_0_1_1_1 - 2.499999999999998e-01*G4_1_0_0_1_0_0_1 - 2.499999999999998e-01*G4_1_0_0_1_1_0_1 - 2.499999999999998e-01*G4_1_0_1_1_0_1_1 - 2.499999999999998e-01*G4_1_0_1_1_1_1_1 + 2.499999999999998e-01*G5_0_0_0_0_0_0_1 + 2.499999999999998e-01*G5_0_0_0_0_1_0_1 + 2.499999999999998e-01*G5_0_0_1_0_0_1_1 + 2.499999999999998e-01*G5_0_0_1_0_1_1_1 + 2.499999999999998e-01*G5_1_0_0_1_0_0_1 + 2.499999999999998e-01*G5_1_0_0_1_1_0_1 + 2.499999999999998e-01*G5_1_0_1_1_0_1_1 + 2.499999999999998e-01*G5_1_0_1_1_1_1_1 - 2.499999999999998e-01*G6_0_0_0_1_0 - 2.499999999999998e-01*G6_0_1_0_1_0;
  block[3] = 2.499999999999999e-01*G6_0_0_0_0_1 + 2.499999999999998e-01*G6_0_0_0_1_1 + 2.499999999999998e-01*G6_0_1_0_0_1 + 2.499999999999998e-01*G6_0_1_0_1_1;
  block[4] = -2.499999999999999e-01*G6_0_0_0_0_1 - 2.499999999999998e-01*G6_0_1_0_0_1;
  block[5] = -2.499999999999998e-01*G6_0_0_0_1_1 - 2.499999999999998e-01*G6_0_1_0_1_1;
  block[6] = 4.166666666666659e-02*G0_ - 2.499999999999999e-01*G1_0_0 - 2.499999999999998e-01*G1_0_1 - 2.083333333333329e-02*G2_0_0_0 - 2.083333333333329e-02*G2_0_0_1 - 4.166666666666659e-02*G2_0_1_0 - 4.166666666666659e-02*G2_0_1_1 - 2.083333333333330e-02*G2_0_2_0 - 2.083333333333329e-02*G2_0_2_1 - 2.083333333333329e-02*G2_1_3_0 - 2.083333333333329e-02*G2_1_3_1 - 4.166666666666659e-02*G2_1_4_0 - 4.166666666666659e-02*G2_1_4_1 - 2.083333333333330e-02*G2_1_5_0 - 2.083333333333329e-02*G2_1_5_1 + 2.083333333333329e-02*G3_0_0_0 + 2.083333333333329e-02*G3_0_0_1 + 4.166666666666659e-02*G3_0_1_0 + 4.166666666666659e-02*G3_0_1_1 + 2.083333333333330e-02*G3_0_2_0 + 2.083333333333329e-02*G3_0_2_1 + 2.083333333333329e-02*G3_1_3_0 + 2.083333333333329e-02*G3_1_3_1 + 4.166666666666659e-02*G3_1_4_0 + 4.166666666666659e-02*G3_1_4_1 + 2.083333333333330e-02*G3_1_5_0 + 2.083333333333329e-02*G3_1_5_1 - 2.499999999999999e-01*G4_0_0_0_0_0_0_0 - 2.499999999999998e-01*G4_0_0_0_0_0_0_1 - 2.499999999999999e-01*G4_0_0_1_0_0_1_0 - 2.499999999999998e-01*G4_0_0_1_0_0_1_1 - 2.499999999999999e-01*G4_1_0_0_1_0_0_0 - 2.499999999999998e-01*G4_1_0_0_1_0_0_1 - 2.499999999999999e-01*G4_1_0_1_1_0_1_0 - 2.499999999999998e-01*G4_1_0_1_1_0_1_1 + 2.499999999999999e-01*G5_0_0_0_0_0_0_0 + 2.499999999999998e-01*G5_0_0_0_0_0_0_1 + 2.499999999999999e-01*G5_0_0_1_0_0_1_0 + 2.499999999999998e-01*G5_0_0_1_0_0_1_1 + 2.499999999999999e-01*G5_1_0_0_1_0_0_0 + 2.499999999999998e-01*G5_1_0_0_1_0_0_1 + 2.499999999999999e-01*G5_1_0_1_1_0_1_0 + 2.499999999999998e-01*G5_1_0_1_1_0_1_1 - 2.499999999999999e-01*G6_0_0_0_0_0 - 2.499999999999998e-01*G6_0_0_0_1_0;
  block[7] = 8.333333333333318e-02*G0_ + 2.499999999999999e-01*G1_0_0 + 2.083333333333329e-02*G2_0_0_0 + 4.166666666666659e-02*G2_0_1_0 + 2.083333333333330e-02*G2_0_2_0 + 2.083333333333329e-02*G2_1_3_0 + 4.166666666666659e-02*G2_1_4_0 + 2.083333333333330e-02*G2_1_5_0 - 2.083333333333329e-02*G3_0_0_0 - 4.166666666666659e-02*G3_0_1_0 - 2.083333333333330e-02*G3_0_2_0 - 2.083333333333329e-02*G3_1_3_0 - 4.166666666666659e-02*G3_1_4_0 - 2.083333333333330e-02*G3_1_5_0 + 2.499999999999999e-01*G4_0_0_0_0_0_0_0 + 2.499999999999999e-01*G4_0_0_1_0_0_1_0 + 2.499999999999999e-01*G4_1_0_0_1_0_0_0 + 2.499999999999999e-01*G4_1_0_1_1_0_1_0 - 2.499999999999999e-01*G5_0_0_0_0_0_0_0 - 2.499999999999999e-01*G5_0_0_1_0_0_1_0 - 2.499999999999999e-01*G5_1_0_0_1_0_0_0 - 2.499999999999999e-01*G5_1_0_1_1_0_1_0 + 2.499999999999999e-01*G6_0_0_0_0_0;
  block[8] = 4.166666666666659e-02*G0_ + 2.499999999999998e-01*G1_0_1 + 2.083333333333329e-02*G2_0_0_1 + 4.166666666666658e-02*G2_0_1_1 + 2.083333333333329e-02*G2_0_2_1 + 2.083333333333329e-02*G2_1_3_1 + 4.166666666666658e-02*G2_1_4_1 + 2.083333333333329e-02*G2_1_5_1 - 2.083333333333329e-02*G3_0_0_1 - 4.166666666666658e-02*G3_0_1_1 - 2.083333333333329e-02*G3_0_2_1 - 2.083333333333329e-02*G3_1_3_1 - 4.166666666666658e-02*G3_1_4_1 - 2.083333333333329e-02*G3_1_5_1 + 2.499999999999998e-01*G4_0_0_0_0_0_0_1 + 2.499999999999998e-01*G4_0_0_1_0_0_1_1 + 2.499999999999998e-01*G4_1_0_0_1_0_0_1 + 2.499999999999998e-01*G4_1_0_1_1_0_1_1 - 2.499999999999998e-01*G5_0_0_0_0_0_0_1 - 2.499999999999998e-01*G5_0_0_1_0_0_1_1 - 2.499999999999998e-01*G5_1_0_0_1_0_0_1 - 2.499999999999998e-01*G5_1_0_1_1_0_1_1 + 2.499999999999998e-01*G6_0_0_0_1_0;
  block[9] = -2.499999999999999e-01*G6_0_0_0_0_1 - 2.499999999999998e-01*G6_0_0_0_1_1;
  block[10] = 2.499999999999999e-01*G6_0_0_0_0_1;
  block[11] = 2.499999999999998e-01*G6_0_0_0_1_1;
  block[12] = 4.166666666666657e-02*G0_ - 2.499999999999998e-01*G1_1_0 - 2.499999999999998e-01*G1_1_1 - 2.083333333333329e-02*G2_0_0_0 - 2.083333333333329e-02*G2_0_0_1 - 2.083333333333330e-02*G2_0_1_0 - 2.083333333333329e-02*G2_0_1_1 - 4.166666666666659e-02*G2_0_2_0 - 4.166666666666657e-02*G2_0_2_1 - 2.083333333333329e-02*G2_1_3_0 - 2.083333333333329e-02*G2_1_3_1 - 2.083333333333330e-02*G2_1_4_0 - 2.083333333333329e-02*G2_1_4_1 - 4.166666666666659e-02*G2_1_5_0 - 4.166666666666657e-02*G2_1_5_1 + 2.083333333333329e-02*G3_0_0_0 + 2.083333333333329e-02*G3_0_0_1 + 2.083333333333330e-02*G3_0_1_0 + 2.083333333333329e-02*G3_0_1_1 + 4.166666666666659e-02*G3_0_2_0 + 4.166666666666657e-02*G3_0_2_1 + 2.083333333333329e-02*G3_1_3_0 + 2.083333333333329e-02*G3_1_3_1 + 2.083333333333330e-02*G3_1_4_0 + 2.083333333333329e-02*G3_1_4_1 + 4.166666666666659e-02*G3_1_5_0 + 4.166666666666657e-02*G3_1_5_1 - 2.499999999999998e-01*G4_0_0_0_0_1_0_0 - 2.499999999999998e-01*G4_0_0_0_0_1_0_1 - 2.499999999999998e-01*G4_0_0_1_0_1_1_0 - 2.499999999999998e-01*G4_0_0_1_0_1_1_1 - 2.499999999999998e-01*G4_1_0_0_1_1_0_0 - 2.499999999999998e-01*G4_1_0_0_1_1_0_1 - 2.499999999999998e-01*G4_1_0_1_1_1_1_0 - 2.499999999999998e-01*G4_1_0_1_1_1_1_1 + 2.499999999999998e-01*G5_0_0_0_0_1_0_0 + 2.499999999999998e-01*G5_0_0_0_0_1_0_1 + 2.499999999999998e-01*G5_0_0_1_0_1_1_0 + 2.499999999999998e-01*G5_0_0_1_0_1_1_1 + 2.499999999999998e-01*G5_1_0_0_1_1_0_0 + 2.499999999999998e-01*G5_1_0_0_1_1_0_1 + 2.499999999999998e-01*G5_1_0_1_1_1_1_0 + 2.499999999999998e-01*G5_1_0_1_1_1_1_1 - 2.499999999999998e-01*G6_0_1_0_0_0 - 2.499999999999998e-01*G6_0_1_0_1_0;
  block[13] = 4.166666666666659e-02*G0_ + 2.499999999999998e-01*G1_1_0 + 2.083333333333329e-02*G2_0_0_0 + 2.083333333333330e-02*G2_0_1_0 + 4.166666666666659e-02*G2_0_2_0 + 2.083333333333329e-02*G2_1_3_0 + 2.083333333333330e-02*G2_1_4_0 + 4.166666666666659e-02*G2_1_5_0 - 2.083333333333329e-02*G3_0_0_0 - 2.083333333333330e-02*G3_0_1_0 - 4.166666666666659e-02*G3_0_2_0 - 2.083333333333329e-02*G3_1_3_0 - 2.083333333333330e-02*G3_1_4_0 - 4.166666666666659e-02*G3_1_5_0 + 2.499999999999998e-01*G4_0_0_0_0_1_0_0 + 2.499999999999998e-01*G4_0_0_1_0_1_1_0 + 2.499999999999998e-01*G4_1_0_0_1_1_0_0 + 2.499999999999998e-01*G4_1_0_1_1_1_1_0 - 2.499999999999998e-01*G5_0_0_0_0_1_0_0 - 2.499999999999998e-01*G5_0_0_1_0_1_1_0 - 2.499999999999998e-01*G5_1_0_0_1_1_0_0 - 2.499999999999998e-01*G5_1_0_1_1_1_1_0 + 2.499999999999998e-01*G6_0_1_0_0_0;
  block[14] = 8.333333333333316e-02*G0_ + 2.499999999999998e-01*G1_1_1 + 2.083333333333329e-02*G2_0_0_1 + 2.083333333333329e-02*G2_0_1_1 + 4.166666666666657e-02*G2_0_2_1 + 2.083333333333329e-02*G2_1_3_1 + 2.083333333333329e-02*G2_1_4_1 + 4.166666666666657e-02*G2_1_5_1 - 2.083333333333329e-02*G3_0_0_1 - 2.083333333333329e-02*G3_0_1_1 - 4.166666666666657e-02*G3_0_2_1 - 2.083333333333329e-02*G3_1_3_1 - 2.083333333333329e-02*G3_1_4_1 - 4.166666666666657e-02*G3_1_5_1 + 2.499999999999998e-01*G4_0_0_0_0_1_0_1 + 2.499999999999998e-01*G4_0_0_1_0_1_1_1 + 2.499999999999998e-01*G4_1_0_0_1_1_0_1 + 2.499999999999998e-01*G4_1_0_1_1_1_1_1 - 2.499999999999998e-01*G5_0_0_0_0_1_0_1 - 2.499999999999998e-01*G5_0_0_1_0_1_1_1 - 2.499999999999998e-01*G5_1_0_0_1_1_0_1 - 2.499999999999998e-01*G5_1_0_1_1_1_1_1 + 2.499999999999998e-01*G6_0_1_0_1_0;
  block[15] = -2.499999999999998e-01*G6_0_1_0_0_1 - 2.499999999999998e-01*G6_0_1_0_1_1;
  block[16] = 2.499999999999998e-01*G6_0_1_0_0_1;
  block[17] = 2.499999999999998e-01*G6_0_1_0_1_1;
  block[18] = 2.499999999999999e-01*G6_0_0_1_0_0 + 2.499999999999998e-01*G6_0_0_1_1_0 + 2.499999999999998e-01*G6_0_1_1_0_0 + 2.499999999999998e-01*G6_0_1_1_1_0;
  block[19] = -2.499999999999999e-01*G6_0_0_1_0_0 - 2.499999999999998e-01*G6_0_1_1_0_0;
  block[20] = -2.499999999999998e-01*G6_0_0_1_1_0 - 2.499999999999998e-01*G6_0_1_1_1_0;
  block[21] = 8.333333333333318e-02*G0_ + 2.499999999999999e-01*G1_0_0 + 2.499999999999998e-01*G1_0_1 + 2.499999999999998e-01*G1_1_0 + 2.499999999999998e-01*G1_1_1 - 4.166666666666659e-02*G2_0_0_0 - 4.166666666666659e-02*G2_0_0_1 - 2.083333333333329e-02*G2_0_1_0 - 2.083333333333329e-02*G2_0_1_1 - 2.083333333333329e-02*G2_0_2_0 - 2.083333333333329e-02*G2_0_2_1 - 4.166666666666659e-02*G2_1_3_0 - 4.166666666666659e-02*G2_1_3_1 - 2.083333333333329e-02*G2_1_4_0 - 2.083333333333329e-02*G2_1_4_1 - 2.083333333333329e-02*G2_1_5_0 - 2.083333333333329e-02*G2_1_5_1 + 4.166666666666659e-02*G3_0_0_0 + 4.166666666666659e-02*G3_0_0_1 + 2.083333333333329e-02*G3_0_1_0 + 2.083333333333329e-02*G3_0_1_1 + 2.083333333333329e-02*G3_0_2_0 + 2.083333333333329e-02*G3_0_2_1 + 4.166666666666659e-02*G3_1_3_0 + 4.166666666666659e-02*G3_1_3_1 + 2.083333333333329e-02*G3_1_4_0 + 2.083333333333329e-02*G3_1_4_1 + 2.083333333333329e-02*G3_1_5_0 + 2.083333333333329e-02*G3_1_5_1 + 2.499999999999999e-01*G4_0_0_0_0_0_0_0 + 2.499999999999998e-01*G4_0_0_0_0_0_0_1 + 2.499999999999998e-01*G4_0_0_0_0_1_0_0 + 2.499999999999998e-01*G4_0_0_0_0_1_0_1 + 2.499999999999999e-01*G4_0_0_1_0_0_1_0 + 2.499999999999998e-01*G4_0_0_1_0_0_1_1 + 2.499999999999998e-01*G4_0_0_1_0_1_1_0 + 2.499999999999998e-01*G4_0_0_1_0_1_1_1 + 2.499999999999999e-01*G4_1_0_0_1_0_0_0 + 2.499999999999998e-01*G4_1_0_0_1_0_0_1 + 2.499999999999998e-01*G4_1_0_0_1_1_0_0 + 2.499999999999998e-01*G4_1_0_0_1_1_0_1 + 2.499999999999999e-01*G4_1_0_1_1_0_1_0 + 2.499999999999998e-01*G4_1_0_1_1_0_1_1 + 2.499999999999998e-01*G4_1_0_1_1_1_1_0 + 2.499999999999998e-01*G4_1_0_1_1_1_1_1 - 2.499999999999999e-01*G5_0_0_0_0_0_0_0 - 2.499999999999998e-01*G5_0_0_0_0_0_0_1 - 2.499999999999998e-01*G5_0_0_0_0_1_0_0 - 2.499999999999998e-01*G5_0_0_0_0_1_0_1 - 2.499999999999999e-01*G5_0_0_1_0_0_1_0 - 2.499999999999998e-01*G5_0_0_1_0_0_1_1 - 2.499999999999998e-01*G5_0_0_1_0_1_1_0 - 2.499999999999998e-01*G5_0_0_1_0_1_1_1 - 2.499999999999999e-01*G5_1_0_0_1_0_0_0 - 2.499999999999998e-01*G5_1_0_0_1_0_0_1 - 2.499999999999998e-01*G5_1_0_0_1_1_0_0 - 2.499999999999998e-01*G5_1_0_0_1_1_0_1 - 2.499999999999999e-01*G5_1_0_1_1_0_1_0 - 2.499999999999998e-01*G5_1_0_1_1_0_1_1 - 2.499999999999998e-01*G5_1_0_1_1_1_1_0 - 2.499999999999998e-01*G5_1_0_1_1_1_1_1 + 2.499999999999999e-01*G6_0_0_1_0_1 + 2.499999999999998e-01*G6_0_0_1_1_1 + 2.499999999999998e-01*G6_0_1_1_0_1 + 2.499999999999998e-01*G6_0_1_1_1_1;
  block[22] = 4.166666666666659e-02*G0_ - 2.499999999999999e-01*G1_0_0 - 2.499999999999998e-01*G1_1_0 + 4.166666666666659e-02*G2_0_0_0 + 2.083333333333329e-02*G2_0_1_0 + 2.083333333333329e-02*G2_0_2_0 + 4.166666666666659e-02*G2_1_3_0 + 2.083333333333329e-02*G2_1_4_0 + 2.083333333333329e-02*G2_1_5_0 - 4.166666666666659e-02*G3_0_0_0 - 2.083333333333329e-02*G3_0_1_0 - 2.083333333333329e-02*G3_0_2_0 - 4.166666666666659e-02*G3_1_3_0 - 2.083333333333329e-02*G3_1_4_0 - 2.083333333333329e-02*G3_1_5_0 - 2.499999999999999e-01*G4_0_0_0_0_0_0_0 - 2.499999999999998e-01*G4_0_0_0_0_1_0_0 - 2.499999999999999e-01*G4_0_0_1_0_0_1_0 - 2.499999999999998e-01*G4_0_0_1_0_1_1_0 - 2.499999999999999e-01*G4_1_0_0_1_0_0_0 - 2.499999999999998e-01*G4_1_0_0_1_1_0_0 - 2.499999999999999e-01*G4_1_0_1_1_0_1_0 - 2.499999999999998e-01*G4_1_0_1_1_1_1_0 + 2.499999999999999e-01*G5_0_0_0_0_0_0_0 + 2.499999999999998e-01*G5_0_0_0_0_1_0_0 + 2.499999999999999e-01*G5_0_0_1_0_0_1_0 + 2.499999999999998e-01*G5_0_0_1_0_1_1_0 + 2.499999999999999e-01*G5_1_0_0_1_0_0_0 + 2.499999999999998e-01*G5_1_0_0_1_1_0_0 + 2.499999999999999e-01*G5_1_0_1_1_0_1_0 + 2.499999999999998e-01*G5_1_0_1_1_1_1_0 - 2.499999999999999e-01*G6_0_0_1_0_1 - 2.499999999999998e-01*G6_0_1_1_0_1;
  block[23] = 4.166666666666657e-02*G0_ - 2.499999999999998e-01*G1_0_1 - 2.499999999999998e-01*G1_1_1 + 4.166666666666659e-02*G2_0_0_1 + 2.083333333333329e-02*G2_0_1_1 + 2.083333333333329e-02*G2_0_2_1 + 4.166666666666659e-02*G2_1_3_1 + 2.083333333333329e-02*G2_1_4_1 + 2.083333333333329e-02*G2_1_5_1 - 4.166666666666659e-02*G3_0_0_1 - 2.083333333333329e-02*G3_0_1_1 - 2.083333333333329e-02*G3_0_2_1 - 4.166666666666659e-02*G3_1_3_1 - 2.083333333333329e-02*G3_1_4_1 - 2.083333333333329e-02*G3_1_5_1 - 2.499999999999998e-01*G4_0_0_0_0_0_0_1 - 2.499999999999998e-01*G4_0_0_0_0_1_0_1 - 2.499999999999998e-01*G4_0_0_1_0_0_1_1 - 2.499999999999998e-01*G4_0_0_1_0_1_1_1 - 2.499999999999998e-01*G4_1_0_0_1_0_0_1 - 2.499999999999998e-01*G4_1_0_0_1_1_0_1 - 2.499999999999998e-01*G4_1_0_1_1_0_1_1 - 2.499999999999998e-01*G4_1_0_1_1_1_1_1 + 2.499999999999998e-01*G5_0_0_0_0_0_0_1 + 2.499999999999998e-01*G5_0_0_0_0_1_0_1 + 2.499999999999998e-01*G5_0_0_1_0_0_1_1 + 2.499999999999998e-01*G5_0_0_1_0_1_1_1 + 2.499999999999998e-01*G5_1_0_0_1_0_0_1 + 2.499999999999998e-01*G5_1_0_0_1_1_0_1 + 2.499999999999998e-01*G5_1_0_1_1_0_1_1 + 2.499999999999998e-01*G5_1_0_1_1_1_1_1 - 2.499999999999998e-01*G6_0_0_1_1_1 - 2.499999999999998e-01*G6_0_1_1_1_1;
  block[24] = -2.499999999999999e-01*G6_0_0_1_0_0 - 2.499999999999998e-01*G6_0_0_1_1_0;
  block[25] = 2.499999999999999e-01*G6_0_0_1_0_0;
  block[26] = 2.499999999999998e-01*G6_0_0_1_1_0;
  block[27] = 4.166666666666659e-02*G0_ - 2.499999999999999e-01*G1_0_0 - 2.499999999999998e-01*G1_0_1 - 2.083333333333329e-02*G2_0_0_0 - 2.083333333333329e-02*G2_0_0_1 - 4.166666666666659e-02*G2_0_1_0 - 4.166666666666659e-02*G2_0_1_1 - 2.083333333333330e-02*G2_0_2_0 - 2.083333333333329e-02*G2_0_2_1 - 2.083333333333329e-02*G2_1_3_0 - 2.083333333333329e-02*G2_1_3_1 - 4.166666666666659e-02*G2_1_4_0 - 4.166666666666659e-02*G2_1_4_1 - 2.083333333333330e-02*G2_1_5_0 - 2.083333333333329e-02*G2_1_5_1 + 2.083333333333329e-02*G3_0_0_0 + 2.083333333333329e-02*G3_0_0_1 + 4.166666666666659e-02*G3_0_1_0 + 4.166666666666659e-02*G3_0_1_1 + 2.083333333333330e-02*G3_0_2_0 + 2.083333333333329e-02*G3_0_2_1 + 2.083333333333329e-02*G3_1_3_0 + 2.083333333333329e-02*G3_1_3_1 + 4.166666666666659e-02*G3_1_4_0 + 4.166666666666659e-02*G3_1_4_1 + 2.083333333333330e-02*G3_1_5_0 + 2.083333333333329e-02*G3_1_5_1 - 2.499999999999999e-01*G4_0_0_0_0_0_0_0 - 2.499999999999998e-01*G4_0_0_0_0_0_0_1 - 2.499999999999999e-01*G4_0_0_1_0_0_1_0 - 2.499999999999998e-01*G4_0_0_1_0_0_1_1 - 2.499999999999999e-01*G4_1_0_0_1_0_0_0 - 2.499999999999998e-01*G4_1_0_0_1_0_0_1 - 2.499999999999999e-01*G4_1_0_1_1_0_1_0 - 2.499999999999998e-01*G4_1_0_1_1_0_1_1 + 2.499999999999999e-01*G5_0_0_0_0_0_0_0 + 2.499999999999998e-01*G5_0_0_0_0_0_0_1 + 2.499999999999999e-01*G5_0_0_1_0_0_1_0 + 2.499999999999998e-01*G5_0_0_1_0_0_1_1 + 2.499999999999999e-01*G5_1_0_0_1_0_0_0 + 2.499999999999998e-01*G5_1_0_0_1_0_0_1 + 2.499999999999999e-01*G5_1_0_1_1_0_1_0 + 2.499999999999998e-01*G5_1_0_1_1_0_1_1 - 2.499999999999999e-01*G6_0_0_1_0_1 - 2.499999999999998e-01*G6_0_0_1_1_1;
  block[28] = 8.333333333333318e-02*G0_ + 2.499999999999999e-01*G1_0_0 + 2.083333333333329e-02*G2_0_0_0 + 4.166666666666659e-02*G2_0_1_0 + 2.083333333333330e-02*G2_0_2_0 + 2.083333333333329e-02*G2_1_3_0 + 4.166666666666659e-02*G2_1_4_0 + 2.083333333333330e-02*G2_1_5_0 - 2.083333333333329e-02*G3_0_0_0 - 4.166666666666659e-02*G3_0_1_0 - 2.083333333333330e-02*G3_0_2_0 - 2.083333333333329e-02*G3_1_3_0 - 4.166666666666659e-02*G3_1_4_0 - 2.083333333333330e-02*G3_1_5_0 + 2.499999999999999e-01*G4_0_0_0_0_0_0_0 + 2.499999999999999e-01*G4_0_0_1_0_0_1_0 + 2.499999999999999e-01*G4_1_0_0_1_0_0_0 + 2.499999999999999e-01*G4_1_0_1_1_0_1_0 - 2.499999999999999e-01*G5_0_0_0_0_0_0_0 - 2.499999999999999e-01*G5_0_0_1_0_0_1_0 - 2.499999999999999e-01*G5_1_0_0_1_0_0_0 - 2.499999999999999e-01*G5_1_0_1_1_0_1_0 + 2.499999999999999e-01*G6_0_0_1_0_1;
  block[29] = 4.166666666666659e-02*G0_ + 2.499999999999998e-01*G1_0_1 + 2.083333333333329e-02*G2_0_0_1 + 4.166666666666658e-02*G2_0_1_1 + 2.083333333333329e-02*G2_0_2_1 + 2.083333333333329e-02*G2_1_3_1 + 4.166666666666658e-02*G2_1_4_1 + 2.083333333333329e-02*G2_1_5_1 - 2.083333333333329e-02*G3_0_0_1 - 4.166666666666658e-02*G3_0_1_1 - 2.083333333333329e-02*G3_0_2_1 - 2.083333333333329e-02*G3_1_3_1 - 4.166666666666658e-02*G3_1_4_1 - 2.083333333333329e-02*G3_1_5_1 + 2.499999999999998e-01*G4_0_0_0_0_0_0_1 + 2.499999999999998e-01*G4_0_0_1_0_0_1_1 + 2.499999999999998e-01*G4_1_0_0_1_0_0_1 + 2.499999999999998e-01*G4_1_0_1_1_0_1_1 - 2.499999999999998e-01*G5_0_0_0_0_0_0_1 - 2.499999999999998e-01*G5_0_0_1_0_0_1_1 - 2.499999999999998e-01*G5_1_0_0_1_0_0_1 - 2.499999999999998e-01*G5_1_0_1_1_0_1_1 + 2.499999999999998e-01*G6_0_0_1_1_1;
  block[30] = -2.499999999999998e-01*G6_0_1_1_0_0 - 2.499999999999998e-01*G6_0_1_1_1_0;
  block[31] = 2.499999999999998e-01*G6_0_1_1_0_0;
  block[32] = 2.499999999999998e-01*G6_0_1_1_1_0;
  block[33] = 4.166666666666657e-02*G0_ - 2.499999999999998e-01*G1_1_0 - 2.499999999999998e-01*G1_1_1 - 2.083333333333329e-02*G2_0_0_0 - 2.083333333333329e-02*G2_0_0_1 - 2.083333333333330e-02*G2_0_1_0 - 2.083333333333329e-02*G2_0_1_1 - 4.166666666666659e-02*G2_0_2_0 - 4.166666666666657e-02*G2_0_2_1 - 2.083333333333329e-02*G2_1_3_0 - 2.083333333333329e-02*G2_1_3_1 - 2.083333333333330e-02*G2_1_4_0 - 2.083333333333329e-02*G2_1_4_1 - 4.166666666666659e-02*G2_1_5_0 - 4.166666666666657e-02*G2_1_5_1 + 2.083333333333329e-02*G3_0_0_0 + 2.083333333333329e-02*G3_0_0_1 + 2.083333333333330e-02*G3_0_1_0 + 2.083333333333329e-02*G3_0_1_1 + 4.166666666666659e-02*G3_0_2_0 + 4.166666666666657e-02*G3_0_2_1 + 2.083333333333329e-02*G3_1_3_0 + 2.083333333333329e-02*G3_1_3_1 + 2.083333333333330e-02*G3_1_4_0 + 2.083333333333329e-02*G3_1_4_1 + 4.166666666666659e-02*G3_1_5_0 + 4.166666666666657e-02*G3_1_5_1 - 2.499999999999998e-01*G4_0_0_0_0_1_0_0 - 2.499999999999998e-01*G4_0_0_0_0_1_0_1 - 2.499999999999998e-01*G4_0_0_1_0_1_1_0 - 2.499999999999998e-01*G4_0_0_1_0_1_1_1 - 2.499999999999998e-01*G4_1_0_0_1_1_0_0 - 2.499999999999998e-01*G4_1_0_0_1_1_0_1 - 2.499999999999998e-01*G4_1_0_1_1_1_1_0 - 2.499999999999998e-01*G4_1_0_1_1_1_1_1 + 2.499999999999998e-01*G5_0_0_0_0_1_0_0 + 2.499999999999998e-01*G5_0_0_0_0_1_0_1 + 2.499999999999998e-01*G5_0_0_1_0_1_1_0 + 2.499999999999998e-01*G5_0_0_1_0_1_1_1 + 2.499999999999998e-01*G5_1_0_0_1_1_0_0 + 2.499999999999998e-01*G5_1_0_0_1_1_0_1 + 2.499999999999998e-01*G5_1_0_1_1_1_1_0 + 2.499999999999998e-01*G5_1_0_1_1_1_1_1 - 2.499999999999998e-01*G6_0_1_1_0_1 - 2.499999999999998e-01*G6_0_1_1_1_1;
  block[34] = 4.166666666666659e-02*G0_ + 2.499999999999998e-01*G1_1_0 + 2.083333333333329e-02*G2_0_0_0 + 2.083333333333330e-02*G2_0_1_0 + 4.166666666666659e-02*G2_0_2_0 + 2.083333333333329e-02*G2_1_3_0 + 2.083333333333330e-02*G2_1_4_0 + 4.166666666666659e-02*G2_1_5_0 - 2.083333333333329e-02*G3_0_0_0 - 2.083333333333330e-02*G3_0_1_0 - 4.166666666666659e-02*G3_0_2_0 - 2.083333333333329e-02*G3_1_3_0 - 2.083333333333330e-02*G3_1_4_0 - 4.166666666666659e-02*G3_1_5_0 + 2.499999999999998e-01*G4_0_0_0_0_1_0_0 + 2.499999999999998e-01*G4_0_0_1_0_1_1_0 + 2.499999999999998e-01*G4_1_0_0_1_1_0_0 + 2.499999999999998e-01*G4_1_0_1_1_1_1_0 - 2.499999999999998e-01*G5_0_0_0_0_1_0_0 - 2.499999999999998e-01*G5_0_0_1_0_1_1_0 - 2.499999999999998e-01*G5_1_0_0_1_1_0_0 - 2.499999999999998e-01*G5_1_0_1_1_1_1_0 + 2.499999999999998e-01*G6_0_1_1_0_1;
  block[35] = 8.333333333333316e-02*G0_ + 2.499999999999998e-01*G1_1_1 + 2.083333333333329e-02*G2_0_0_1 + 2.083333333333329e-02*G2_0_1_1 + 4.166666666666657e-02*G2_0_2_1 + 2.083333333333329e-02*G2_1_3_1 + 2.083333333333329e-02*G2_1_4_1 + 4.166666666666657e-02*G2_1_5_1 - 2.083333333333329e-02*G3_0_0_1 - 2.083333333333329e-02*G3_0_1_1 - 4.166666666666657e-02*G3_0_2_1 - 2.083333333333329e-02*G3_1_3_1 - 2.083333333333329e-02*G3_1_4_1 - 4.166666666666657e-02*G3_1_5_1 + 2.499999999999998e-01*G4_0_0_0_0_1_0_1 + 2.499999999999998e-01*G4_0_0_1_0_1_1_1 + 2.499999999999998e-01*G4_1_0_0_1_1_0_1 + 2.499999999999998e-01*G4_1_0_1_1_1_1_1 - 2.499999999999998e-01*G5_0_0_0_0_1_0_1 - 2.499999999999998e-01*G5_0_0_1_0_1_1_1 - 2.499999999999998e-01*G5_1_0_0_1_1_0_1 - 2.499999999999998e-01*G5_1_0_1_1_1_1_1 + 2.499999999999998e-01*G6_0_1_1_1_1;
}

// No contribution from the boundary
bool BilinearForm::boundary_contribution() const { return false; }

void BilinearForm::eval(real block[], const AffineMap& map, unsigned int facet) const {}

/// This class contains the form to be evaluated, including
/// contributions from the interior and boundary of the domain.

class LinearForm : public dolfin::LinearForm
{
public:

  class TestElement;

  class FunctionElement_0;

  class FunctionElement_1;

  class FunctionElement_2;

  class FunctionElement_3;

  class FunctionElement_4;

  class FunctionElement_5;

  class FunctionElement_6;

  LinearForm(Function& w0, Function& w1, Function& w2, Function& w3, Function& w4, Function& w5, Function& w6, const real& c0, const real& c1);
  

  bool interior_contribution() const;

  void eval(real block[], const AffineMap& map) const;

  bool boundary_contribution() const;

  void eval(real block[], const AffineMap& map, unsigned int facet) const;

private:

  const real& c0;  const real& c1;

};

class LinearForm::TestElement : public dolfin::FiniteElement
{
public:

  TestElement() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 2;

    // Element is simple, don't need to initialize subelements
  }

  ~TestElement()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 6;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    int offset = mesh.topology().size(0);
    nodes[3] = offset + cell.entities(0)[0];
    nodes[4] = offset + cell.entities(0)[1];
    nodes[5] = offset + cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[4] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 1;
    components[4] = 1;
    components[5] = 1;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0);
    vertex_nodes[1] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Vector Lagrange", "triangle", 1, 2);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class LinearForm::FunctionElement_0 : public dolfin::FiniteElement
{
public:

  FunctionElement_0() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 2;

    // Element is simple, don't need to initialize subelements
  }

  ~FunctionElement_0()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 6;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    int offset = mesh.topology().size(0);
    nodes[3] = offset + cell.entities(0)[0];
    nodes[4] = offset + cell.entities(0)[1];
    nodes[5] = offset + cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[4] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 1;
    components[4] = 1;
    components[5] = 1;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0);
    vertex_nodes[1] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Vector Lagrange", "triangle", 1, 2);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class LinearForm::FunctionElement_1 : public dolfin::FiniteElement
{
public:

  FunctionElement_1() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 2;

    // Element is simple, don't need to initialize subelements
  }

  ~FunctionElement_1()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 6;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    int offset = mesh.topology().size(0);
    nodes[3] = offset + cell.entities(0)[0];
    nodes[4] = offset + cell.entities(0)[1];
    nodes[5] = offset + cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[4] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 1;
    components[4] = 1;
    components[5] = 1;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0);
    vertex_nodes[1] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Vector Lagrange", "triangle", 1, 2);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class LinearForm::FunctionElement_2 : public dolfin::FiniteElement
{
public:

  FunctionElement_2() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 2;

    // Element is simple, don't need to initialize subelements
  }

  ~FunctionElement_2()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 6;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    int offset = mesh.topology().size(0);
    nodes[3] = offset + cell.entities(0)[0];
    nodes[4] = offset + cell.entities(0)[1];
    nodes[5] = offset + cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[4] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 1;
    components[4] = 1;
    components[5] = 1;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0);
    vertex_nodes[1] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Vector Lagrange", "triangle", 1, 2);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class LinearForm::FunctionElement_3 : public dolfin::FiniteElement
{
public:

  FunctionElement_3() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~FunctionElement_3()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 3;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "triangle", 1);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class LinearForm::FunctionElement_4 : public dolfin::FiniteElement
{
public:

  FunctionElement_4() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~FunctionElement_4()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 1;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.index();
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(3.333333333333334e-01, 3.333333333333334e-01);
    components[0] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Discontinuous Lagrange", "triangle", 0);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class LinearForm::FunctionElement_5 : public dolfin::FiniteElement
{
public:

  FunctionElement_5() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~FunctionElement_5()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 1;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.index();
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(3.333333333333334e-01, 3.333333333333334e-01);
    components[0] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Discontinuous Lagrange", "triangle", 0);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class LinearForm::FunctionElement_6 : public dolfin::FiniteElement
{
public:

  FunctionElement_6() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 2;

    // Element is simple, don't need to initialize subelements
  }

  ~FunctionElement_6()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 6;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    int offset = mesh.topology().size(0);
    nodes[3] = offset + cell.entities(0)[0];
    nodes[4] = offset + cell.entities(0)[1];
    nodes[5] = offset + cell.entities(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[4] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 1;
    components[4] = 1;
    components[5] = 1;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0);
    vertex_nodes[1] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Vector Lagrange", "triangle", 1, 2);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

LinearForm::LinearForm(Function& w0, Function& w1, Function& w2, Function& w3, Function& w4, Function& w5, Function& w6, const real& c0, const real& c1) : dolfin::LinearForm(7), c0(c0), c1(c1)
{
  // Create finite element for test space
  _test = new TestElement();

  // Add functions
  initFunction(0, w0, new FunctionElement_0());
  initFunction(1, w1, new FunctionElement_1());
  initFunction(2, w2, new FunctionElement_2());
  initFunction(3, w3, new FunctionElement_3());
  initFunction(4, w4, new FunctionElement_4());
  initFunction(5, w5, new FunctionElement_5());
  initFunction(6, w6, new FunctionElement_6());
}

// Contribution from the interior
bool LinearForm::interior_contribution() const { return true; }

void LinearForm::eval(real block[], const AffineMap& map) const
{
  // Compute coefficients
  const real c0_0 = c[0][0];
  const real c0_1 = c[0][1];
  const real c0_2 = c[0][2];
  const real c0_3 = c[0][3];
  const real c0_4 = c[0][4];
  const real c0_5 = c[0][5];
  const real c1_0 = c[1][0];
  const real c1_1 = c[1][1];
  const real c1_2 = c[1][2];
  const real c1_3 = c[1][3];
  const real c1_4 = c[1][4];
  const real c1_5 = c[1][5];
  const real c2_0 = c[2][0];
  const real c2_1 = c[2][1];
  const real c2_2 = c[2][2];
  const real c2_3 = c[2][3];
  const real c2_4 = c[2][4];
  const real c2_5 = c[2][5];
  const real c3_0 = c[3][0];
  const real c3_1 = c[3][1];
  const real c3_2 = c[3][2];
  const real c4_0 = c[4][0];
  const real c5_0 = c[5][0];
  const real c6_0 = c[6][0];
  const real c6_1 = c[6][1];
  const real c6_2 = c[6][2];
  const real c6_3 = c[6][3];
  const real c6_4 = c[6][4];
  const real c6_5 = c[6][5];
  const real c7_0 = 3.333333333333333e-01*c[0][0] + 3.333333333333334e-01*c[0][1] + 3.333333333333333e-01*c[0][2];
  const real c7_1 = 3.333333333333333e-01*c[0][3] + 3.333333333333334e-01*c[0][4] + 3.333333333333333e-01*c[0][5];
  const real c8_0 = 3.333333333333333e-01*c[6][0] + 3.333333333333334e-01*c[6][1] + 3.333333333333333e-01*c[6][2];
  const real c8_1 = 3.333333333333333e-01*c[6][3] + 3.333333333333334e-01*c[6][4] + 3.333333333333333e-01*c[6][5];

  // Compute geometry tensors
  const real G0_0 = map.det*c1_0 + map.det*c0*c2_0;
  const real G0_1 = map.det*c1_1 + map.det*c0*c2_1;
  const real G0_2 = map.det*c1_2 + map.det*c0*c2_2;
  const real G0_3 = map.det*c1_3 + map.det*c0*c2_3;
  const real G0_4 = map.det*c1_4 + map.det*c0*c2_4;
  const real G0_5 = map.det*c1_5 + map.det*c0*c2_5;
  const real G1_0_0_0 = map.det*c0*c3_0*map.g00;
  const real G1_0_0_1 = map.det*c0*c3_1*map.g00;
  const real G1_0_0_2 = map.det*c0*c3_2*map.g00;
  const real G1_0_1_0 = map.det*c0*c3_0*map.g01;
  const real G1_0_1_1 = map.det*c0*c3_1*map.g01;
  const real G1_0_1_2 = map.det*c0*c3_2*map.g01;
  const real G1_1_0_0 = map.det*c0*c3_0*map.g10;
  const real G1_1_0_1 = map.det*c0*c3_1*map.g10;
  const real G1_1_0_2 = map.det*c0*c3_2*map.g10;
  const real G1_1_1_0 = map.det*c0*c3_0*map.g11;
  const real G1_1_1_1 = map.det*c0*c3_1*map.g11;
  const real G1_1_1_2 = map.det*c0*c3_2*map.g11;
  const real G2_0_0_0 = map.det*c0*c1*c1_0*(map.g00*map.g00 + map.g01*map.g01);
  const real G2_0_0_1 = map.det*c0*c1*c1_0*(map.g00*map.g10 + map.g01*map.g11);
  const real G2_0_1_0 = map.det*c0*c1*c1_1*(map.g00*map.g00 + map.g01*map.g01);
  const real G2_0_2_1 = map.det*c0*c1*c1_2*(map.g00*map.g10 + map.g01*map.g11);
  const real G2_0_3_0 = map.det*c0*c1*c1_3*(map.g00*map.g00 + map.g01*map.g01);
  const real G2_0_3_1 = map.det*c0*c1*c1_3*(map.g00*map.g10 + map.g01*map.g11);
  const real G2_0_4_0 = map.det*c0*c1*c1_4*(map.g00*map.g00 + map.g01*map.g01);
  const real G2_0_5_1 = map.det*c0*c1*c1_5*(map.g00*map.g10 + map.g01*map.g11);
  const real G2_1_0_0 = map.det*c0*c1*c1_0*(map.g10*map.g00 + map.g11*map.g01);
  const real G2_1_0_1 = map.det*c0*c1*c1_0*(map.g10*map.g10 + map.g11*map.g11);
  const real G2_1_1_0 = map.det*c0*c1*c1_1*(map.g10*map.g00 + map.g11*map.g01);
  const real G2_1_2_1 = map.det*c0*c1*c1_2*(map.g10*map.g10 + map.g11*map.g11);
  const real G2_1_3_0 = map.det*c0*c1*c1_3*(map.g10*map.g00 + map.g11*map.g01);
  const real G2_1_3_1 = map.det*c0*c1*c1_3*(map.g10*map.g10 + map.g11*map.g11);
  const real G2_1_4_0 = map.det*c0*c1*c1_4*(map.g10*map.g00 + map.g11*map.g01);
  const real G2_1_5_1 = map.det*c0*c1*c1_5*(map.g10*map.g10 + map.g11*map.g11);
  const real G3_0_0_0_0 = map.det*c0*c0_0*c1_0*map.g00;
  const real G3_0_0_0_1 = map.det*c0*c0_0*c1_0*map.g10;
  const real G3_0_0_1_0 = map.det*c0*c0_0*c1_1*map.g00;
  const real G3_0_0_2_1 = map.det*c0*c0_0*c1_2*map.g10;
  const real G3_0_0_3_0 = map.det*c0*c0_0*c1_3*map.g00;
  const real G3_0_0_3_1 = map.det*c0*c0_0*c1_3*map.g10;
  const real G3_0_0_4_0 = map.det*c0*c0_0*c1_4*map.g00;
  const real G3_0_0_5_1 = map.det*c0*c0_0*c1_5*map.g10;
  const real G3_0_1_0_0 = map.det*c0*c0_1*c1_0*map.g00;
  const real G3_0_1_0_1 = map.det*c0*c0_1*c1_0*map.g10;
  const real G3_0_1_1_0 = map.det*c0*c0_1*c1_1*map.g00;
  const real G3_0_1_2_1 = map.det*c0*c0_1*c1_2*map.g10;
  const real G3_0_1_3_0 = map.det*c0*c0_1*c1_3*map.g00;
  const real G3_0_1_3_1 = map.det*c0*c0_1*c1_3*map.g10;
  const real G3_0_1_4_0 = map.det*c0*c0_1*c1_4*map.g00;
  const real G3_0_1_5_1 = map.det*c0*c0_1*c1_5*map.g10;
  const real G3_0_2_0_0 = map.det*c0*c0_2*c1_0*map.g00;
  const real G3_0_2_0_1 = map.det*c0*c0_2*c1_0*map.g10;
  const real G3_0_2_1_0 = map.det*c0*c0_2*c1_1*map.g00;
  const real G3_0_2_2_1 = map.det*c0*c0_2*c1_2*map.g10;
  const real G3_0_2_3_0 = map.det*c0*c0_2*c1_3*map.g00;
  const real G3_0_2_3_1 = map.det*c0*c0_2*c1_3*map.g10;
  const real G3_0_2_4_0 = map.det*c0*c0_2*c1_4*map.g00;
  const real G3_0_2_5_1 = map.det*c0*c0_2*c1_5*map.g10;
  const real G3_1_3_0_0 = map.det*c0*c0_3*c1_0*map.g01;
  const real G3_1_3_0_1 = map.det*c0*c0_3*c1_0*map.g11;
  const real G3_1_3_1_0 = map.det*c0*c0_3*c1_1*map.g01;
  const real G3_1_3_2_1 = map.det*c0*c0_3*c1_2*map.g11;
  const real G3_1_3_3_0 = map.det*c0*c0_3*c1_3*map.g01;
  const real G3_1_3_3_1 = map.det*c0*c0_3*c1_3*map.g11;
  const real G3_1_3_4_0 = map.det*c0*c0_3*c1_4*map.g01;
  const real G3_1_3_5_1 = map.det*c0*c0_3*c1_5*map.g11;
  const real G3_1_4_0_0 = map.det*c0*c0_4*c1_0*map.g01;
  const real G3_1_4_0_1 = map.det*c0*c0_4*c1_0*map.g11;
  const real G3_1_4_1_0 = map.det*c0*c0_4*c1_1*map.g01;
  const real G3_1_4_2_1 = map.det*c0*c0_4*c1_2*map.g11;
  const real G3_1_4_3_0 = map.det*c0*c0_4*c1_3*map.g01;
  const real G3_1_4_3_1 = map.det*c0*c0_4*c1_3*map.g11;
  const real G3_1_4_4_0 = map.det*c0*c0_4*c1_4*map.g01;
  const real G3_1_4_5_1 = map.det*c0*c0_4*c1_5*map.g11;
  const real G3_1_5_0_0 = map.det*c0*c0_5*c1_0*map.g01;
  const real G3_1_5_0_1 = map.det*c0*c0_5*c1_0*map.g11;
  const real G3_1_5_1_0 = map.det*c0*c0_5*c1_1*map.g01;
  const real G3_1_5_2_1 = map.det*c0*c0_5*c1_2*map.g11;
  const real G3_1_5_3_0 = map.det*c0*c0_5*c1_3*map.g01;
  const real G3_1_5_3_1 = map.det*c0*c0_5*c1_3*map.g11;
  const real G3_1_5_4_0 = map.det*c0*c0_5*c1_4*map.g01;
  const real G3_1_5_5_1 = map.det*c0*c0_5*c1_5*map.g11;
  const real G4_0_0_0_0 = map.det*c0*c6_0*c1_0*map.g00;
  const real G4_0_0_0_1 = map.det*c0*c6_0*c1_0*map.g10;
  const real G4_0_0_1_0 = map.det*c0*c6_0*c1_1*map.g00;
  const real G4_0_0_2_1 = map.det*c0*c6_0*c1_2*map.g10;
  const real G4_0_0_3_0 = map.det*c0*c6_0*c1_3*map.g00;
  const real G4_0_0_3_1 = map.det*c0*c6_0*c1_3*map.g10;
  const real G4_0_0_4_0 = map.det*c0*c6_0*c1_4*map.g00;
  const real G4_0_0_5_1 = map.det*c0*c6_0*c1_5*map.g10;
  const real G4_0_1_0_0 = map.det*c0*c6_1*c1_0*map.g00;
  const real G4_0_1_0_1 = map.det*c0*c6_1*c1_0*map.g10;
  const real G4_0_1_1_0 = map.det*c0*c6_1*c1_1*map.g00;
  const real G4_0_1_2_1 = map.det*c0*c6_1*c1_2*map.g10;
  const real G4_0_1_3_0 = map.det*c0*c6_1*c1_3*map.g00;
  const real G4_0_1_3_1 = map.det*c0*c6_1*c1_3*map.g10;
  const real G4_0_1_4_0 = map.det*c0*c6_1*c1_4*map.g00;
  const real G4_0_1_5_1 = map.det*c0*c6_1*c1_5*map.g10;
  const real G4_0_2_0_0 = map.det*c0*c6_2*c1_0*map.g00;
  const real G4_0_2_0_1 = map.det*c0*c6_2*c1_0*map.g10;
  const real G4_0_2_1_0 = map.det*c0*c6_2*c1_1*map.g00;
  const real G4_0_2_2_1 = map.det*c0*c6_2*c1_2*map.g10;
  const real G4_0_2_3_0 = map.det*c0*c6_2*c1_3*map.g00;
  const real G4_0_2_3_1 = map.det*c0*c6_2*c1_3*map.g10;
  const real G4_0_2_4_0 = map.det*c0*c6_2*c1_4*map.g00;
  const real G4_0_2_5_1 = map.det*c0*c6_2*c1_5*map.g10;
  const real G4_1_3_0_0 = map.det*c0*c6_3*c1_0*map.g01;
  const real G4_1_3_0_1 = map.det*c0*c6_3*c1_0*map.g11;
  const real G4_1_3_1_0 = map.det*c0*c6_3*c1_1*map.g01;
  const real G4_1_3_2_1 = map.det*c0*c6_3*c1_2*map.g11;
  const real G4_1_3_3_0 = map.det*c0*c6_3*c1_3*map.g01;
  const real G4_1_3_3_1 = map.det*c0*c6_3*c1_3*map.g11;
  const real G4_1_3_4_0 = map.det*c0*c6_3*c1_4*map.g01;
  const real G4_1_3_5_1 = map.det*c0*c6_3*c1_5*map.g11;
  const real G4_1_4_0_0 = map.det*c0*c6_4*c1_0*map.g01;
  const real G4_1_4_0_1 = map.det*c0*c6_4*c1_0*map.g11;
  const real G4_1_4_1_0 = map.det*c0*c6_4*c1_1*map.g01;
  const real G4_1_4_2_1 = map.det*c0*c6_4*c1_2*map.g11;
  const real G4_1_4_3_0 = map.det*c0*c6_4*c1_3*map.g01;
  const real G4_1_4_3_1 = map.det*c0*c6_4*c1_3*map.g11;
  const real G4_1_4_4_0 = map.det*c0*c6_4*c1_4*map.g01;
  const real G4_1_4_5_1 = map.det*c0*c6_4*c1_5*map.g11;
  const real G4_1_5_0_0 = map.det*c0*c6_5*c1_0*map.g01;
  const real G4_1_5_0_1 = map.det*c0*c6_5*c1_0*map.g11;
  const real G4_1_5_1_0 = map.det*c0*c6_5*c1_1*map.g01;
  const real G4_1_5_2_1 = map.det*c0*c6_5*c1_2*map.g11;
  const real G4_1_5_3_0 = map.det*c0*c6_5*c1_3*map.g01;
  const real G4_1_5_3_1 = map.det*c0*c6_5*c1_3*map.g11;
  const real G4_1_5_4_0 = map.det*c0*c6_5*c1_4*map.g01;
  const real G4_1_5_5_1 = map.det*c0*c6_5*c1_5*map.g11;
  const real G5_0_0_0_0_0 = map.det*c0*c4_0*c7_0*c2_0*map.g00;
  const real G5_0_0_0_0_1 = map.det*c0*c4_0*c7_0*c2_1*map.g00;
  const real G5_0_0_0_0_2 = map.det*c0*c4_0*c7_0*c2_2*map.g00;
  const real G5_0_0_0_0_3 = map.det*c0*c4_0*c7_0*c2_3*map.g00;
  const real G5_0_0_0_0_4 = map.det*c0*c4_0*c7_0*c2_4*map.g00;
  const real G5_0_0_0_0_5 = map.det*c0*c4_0*c7_0*c2_5*map.g00;
  const real G5_0_0_1_0_0 = map.det*c0*c4_0*c7_0*c2_0*map.g10;
  const real G5_0_0_1_0_1 = map.det*c0*c4_0*c7_0*c2_1*map.g10;
  const real G5_0_0_1_0_2 = map.det*c0*c4_0*c7_0*c2_2*map.g10;
  const real G5_0_0_1_0_3 = map.det*c0*c4_0*c7_0*c2_3*map.g10;
  const real G5_0_0_1_0_4 = map.det*c0*c4_0*c7_0*c2_4*map.g10;
  const real G5_0_0_1_0_5 = map.det*c0*c4_0*c7_0*c2_5*map.g10;
  const real G5_0_1_0_1_0 = map.det*c0*c4_0*c7_1*c2_0*map.g01;
  const real G5_0_1_0_1_1 = map.det*c0*c4_0*c7_1*c2_1*map.g01;
  const real G5_0_1_0_1_2 = map.det*c0*c4_0*c7_1*c2_2*map.g01;
  const real G5_0_1_0_1_3 = map.det*c0*c4_0*c7_1*c2_3*map.g01;
  const real G5_0_1_0_1_4 = map.det*c0*c4_0*c7_1*c2_4*map.g01;
  const real G5_0_1_0_1_5 = map.det*c0*c4_0*c7_1*c2_5*map.g01;
  const real G5_0_1_1_1_0 = map.det*c0*c4_0*c7_1*c2_0*map.g11;
  const real G5_0_1_1_1_1 = map.det*c0*c4_0*c7_1*c2_1*map.g11;
  const real G5_0_1_1_1_2 = map.det*c0*c4_0*c7_1*c2_2*map.g11;
  const real G5_0_1_1_1_3 = map.det*c0*c4_0*c7_1*c2_3*map.g11;
  const real G5_0_1_1_1_4 = map.det*c0*c4_0*c7_1*c2_4*map.g11;
  const real G5_0_1_1_1_5 = map.det*c0*c4_0*c7_1*c2_5*map.g11;
  const real G6_0_0_0_0_0 = map.det*c0*c4_0*c8_0*c2_0*map.g00;
  const real G6_0_0_0_0_1 = map.det*c0*c4_0*c8_0*c2_1*map.g00;
  const real G6_0_0_0_0_2 = map.det*c0*c4_0*c8_0*c2_2*map.g00;
  const real G6_0_0_0_0_3 = map.det*c0*c4_0*c8_0*c2_3*map.g00;
  const real G6_0_0_0_0_4 = map.det*c0*c4_0*c8_0*c2_4*map.g00;
  const real G6_0_0_0_0_5 = map.det*c0*c4_0*c8_0*c2_5*map.g00;
  const real G6_0_0_1_0_0 = map.det*c0*c4_0*c8_0*c2_0*map.g10;
  const real G6_0_0_1_0_1 = map.det*c0*c4_0*c8_0*c2_1*map.g10;
  const real G6_0_0_1_0_2 = map.det*c0*c4_0*c8_0*c2_2*map.g10;
  const real G6_0_0_1_0_3 = map.det*c0*c4_0*c8_0*c2_3*map.g10;
  const real G6_0_0_1_0_4 = map.det*c0*c4_0*c8_0*c2_4*map.g10;
  const real G6_0_0_1_0_5 = map.det*c0*c4_0*c8_0*c2_5*map.g10;
  const real G6_0_1_0_1_0 = map.det*c0*c4_0*c8_1*c2_0*map.g01;
  const real G6_0_1_0_1_1 = map.det*c0*c4_0*c8_1*c2_1*map.g01;
  const real G6_0_1_0_1_2 = map.det*c0*c4_0*c8_1*c2_2*map.g01;
  const real G6_0_1_0_1_3 = map.det*c0*c4_0*c8_1*c2_3*map.g01;
  const real G6_0_1_0_1_4 = map.det*c0*c4_0*c8_1*c2_4*map.g01;
  const real G6_0_1_0_1_5 = map.det*c0*c4_0*c8_1*c2_5*map.g01;
  const real G6_0_1_1_1_0 = map.det*c0*c4_0*c8_1*c2_0*map.g11;
  const real G6_0_1_1_1_1 = map.det*c0*c4_0*c8_1*c2_1*map.g11;
  const real G6_0_1_1_1_2 = map.det*c0*c4_0*c8_1*c2_2*map.g11;
  const real G6_0_1_1_1_3 = map.det*c0*c4_0*c8_1*c2_3*map.g11;
  const real G6_0_1_1_1_4 = map.det*c0*c4_0*c8_1*c2_4*map.g11;
  const real G6_0_1_1_1_5 = map.det*c0*c4_0*c8_1*c2_5*map.g11;
  const real G7_0_0_0_0_0_0_0_0 = map.det*c0*c4_0*c7_0*c7_0*c1_0*map.g00*map.g00 + map.det*c0*c4_0*c8_0*c8_0*c1_0*map.g00*map.g00;
  const real G7_0_0_0_0_0_0_0_1 = map.det*c0*c4_0*c7_0*c7_0*c1_0*map.g00*map.g10 + map.det*c0*c4_0*c8_0*c8_0*c1_0*map.g00*map.g10;
  const real G7_0_0_0_0_0_0_1_0 = map.det*c0*c4_0*c7_0*c7_0*c1_1*map.g00*map.g00 + map.det*c0*c4_0*c8_0*c8_0*c1_1*map.g00*map.g00;
  const real G7_0_0_0_0_0_0_2_1 = map.det*c0*c4_0*c7_0*c7_0*c1_2*map.g00*map.g10 + map.det*c0*c4_0*c8_0*c8_0*c1_2*map.g00*map.g10;
  const real G7_0_0_0_0_0_0_3_0 = map.det*c0*c4_0*c7_0*c7_0*c1_3*map.g00*map.g00 + map.det*c0*c4_0*c8_0*c8_0*c1_3*map.g00*map.g00;
  const real G7_0_0_0_0_0_0_3_1 = map.det*c0*c4_0*c7_0*c7_0*c1_3*map.g00*map.g10 + map.det*c0*c4_0*c8_0*c8_0*c1_3*map.g00*map.g10;
  const real G7_0_0_0_0_0_0_4_0 = map.det*c0*c4_0*c7_0*c7_0*c1_4*map.g00*map.g00 + map.det*c0*c4_0*c8_0*c8_0*c1_4*map.g00*map.g00;
  const real G7_0_0_0_0_0_0_5_1 = map.det*c0*c4_0*c7_0*c7_0*c1_5*map.g00*map.g10 + map.det*c0*c4_0*c8_0*c8_0*c1_5*map.g00*map.g10;
  const real G7_0_0_0_0_1_0_0_0 = map.det*c0*c4_0*c7_0*c7_0*c1_0*map.g10*map.g00 + map.det*c0*c4_0*c8_0*c8_0*c1_0*map.g10*map.g00;
  const real G7_0_0_0_0_1_0_0_1 = map.det*c0*c4_0*c7_0*c7_0*c1_0*map.g10*map.g10 + map.det*c0*c4_0*c8_0*c8_0*c1_0*map.g10*map.g10;
  const real G7_0_0_0_0_1_0_1_0 = map.det*c0*c4_0*c7_0*c7_0*c1_1*map.g10*map.g00 + map.det*c0*c4_0*c8_0*c8_0*c1_1*map.g10*map.g00;
  const real G7_0_0_0_0_1_0_2_1 = map.det*c0*c4_0*c7_0*c7_0*c1_2*map.g10*map.g10 + map.det*c0*c4_0*c8_0*c8_0*c1_2*map.g10*map.g10;
  const real G7_0_0_0_0_1_0_3_0 = map.det*c0*c4_0*c7_0*c7_0*c1_3*map.g10*map.g00 + map.det*c0*c4_0*c8_0*c8_0*c1_3*map.g10*map.g00;
  const real G7_0_0_0_0_1_0_3_1 = map.det*c0*c4_0*c7_0*c7_0*c1_3*map.g10*map.g10 + map.det*c0*c4_0*c8_0*c8_0*c1_3*map.g10*map.g10;
  const real G7_0_0_0_0_1_0_4_0 = map.det*c0*c4_0*c7_0*c7_0*c1_4*map.g10*map.g00 + map.det*c0*c4_0*c8_0*c8_0*c1_4*map.g10*map.g00;
  const real G7_0_0_0_0_1_0_5_1 = map.det*c0*c4_0*c7_0*c7_0*c1_5*map.g10*map.g10 + map.det*c0*c4_0*c8_0*c8_0*c1_5*map.g10*map.g10;
  const real G7_0_0_1_0_0_1_0_0 = map.det*c0*c4_0*c7_1*c7_0*c1_0*map.g01*map.g00 + map.det*c0*c4_0*c8_1*c8_0*c1_0*map.g01*map.g00;
  const real G7_0_0_1_0_0_1_0_1 = map.det*c0*c4_0*c7_1*c7_0*c1_0*map.g01*map.g10 + map.det*c0*c4_0*c8_1*c8_0*c1_0*map.g01*map.g10;
  const real G7_0_0_1_0_0_1_1_0 = map.det*c0*c4_0*c7_1*c7_0*c1_1*map.g01*map.g00 + map.det*c0*c4_0*c8_1*c8_0*c1_1*map.g01*map.g00;
  const real G7_0_0_1_0_0_1_2_1 = map.det*c0*c4_0*c7_1*c7_0*c1_2*map.g01*map.g10 + map.det*c0*c4_0*c8_1*c8_0*c1_2*map.g01*map.g10;
  const real G7_0_0_1_0_0_1_3_0 = map.det*c0*c4_0*c7_1*c7_0*c1_3*map.g01*map.g00 + map.det*c0*c4_0*c8_1*c8_0*c1_3*map.g01*map.g00;
  const real G7_0_0_1_0_0_1_3_1 = map.det*c0*c4_0*c7_1*c7_0*c1_3*map.g01*map.g10 + map.det*c0*c4_0*c8_1*c8_0*c1_3*map.g01*map.g10;
  const real G7_0_0_1_0_0_1_4_0 = map.det*c0*c4_0*c7_1*c7_0*c1_4*map.g01*map.g00 + map.det*c0*c4_0*c8_1*c8_0*c1_4*map.g01*map.g00;
  const real G7_0_0_1_0_0_1_5_1 = map.det*c0*c4_0*c7_1*c7_0*c1_5*map.g01*map.g10 + map.det*c0*c4_0*c8_1*c8_0*c1_5*map.g01*map.g10;
  const real G7_0_0_1_0_1_1_0_0 = map.det*c0*c4_0*c7_1*c7_0*c1_0*map.g11*map.g00 + map.det*c0*c4_0*c8_1*c8_0*c1_0*map.g11*map.g00;
  const real G7_0_0_1_0_1_1_0_1 = map.det*c0*c4_0*c7_1*c7_0*c1_0*map.g11*map.g10 + map.det*c0*c4_0*c8_1*c8_0*c1_0*map.g11*map.g10;
  const real G7_0_0_1_0_1_1_1_0 = map.det*c0*c4_0*c7_1*c7_0*c1_1*map.g11*map.g00 + map.det*c0*c4_0*c8_1*c8_0*c1_1*map.g11*map.g00;
  const real G7_0_0_1_0_1_1_2_1 = map.det*c0*c4_0*c7_1*c7_0*c1_2*map.g11*map.g10 + map.det*c0*c4_0*c8_1*c8_0*c1_2*map.g11*map.g10;
  const real G7_0_0_1_0_1_1_3_0 = map.det*c0*c4_0*c7_1*c7_0*c1_3*map.g11*map.g00 + map.det*c0*c4_0*c8_1*c8_0*c1_3*map.g11*map.g00;
  const real G7_0_0_1_0_1_1_3_1 = map.det*c0*c4_0*c7_1*c7_0*c1_3*map.g11*map.g10 + map.det*c0*c4_0*c8_1*c8_0*c1_3*map.g11*map.g10;
  const real G7_0_0_1_0_1_1_4_0 = map.det*c0*c4_0*c7_1*c7_0*c1_4*map.g11*map.g00 + map.det*c0*c4_0*c8_1*c8_0*c1_4*map.g11*map.g00;
  const real G7_0_0_1_0_1_1_5_1 = map.det*c0*c4_0*c7_1*c7_0*c1_5*map.g11*map.g10 + map.det*c0*c4_0*c8_1*c8_0*c1_5*map.g11*map.g10;
  const real G7_1_0_0_1_0_0_0_0 = map.det*c0*c4_0*c7_0*c7_1*c1_0*map.g00*map.g01 + map.det*c0*c4_0*c8_0*c8_1*c1_0*map.g00*map.g01;
  const real G7_1_0_0_1_0_0_0_1 = map.det*c0*c4_0*c7_0*c7_1*c1_0*map.g00*map.g11 + map.det*c0*c4_0*c8_0*c8_1*c1_0*map.g00*map.g11;
  const real G7_1_0_0_1_0_0_1_0 = map.det*c0*c4_0*c7_0*c7_1*c1_1*map.g00*map.g01 + map.det*c0*c4_0*c8_0*c8_1*c1_1*map.g00*map.g01;
  const real G7_1_0_0_1_0_0_2_1 = map.det*c0*c4_0*c7_0*c7_1*c1_2*map.g00*map.g11 + map.det*c0*c4_0*c8_0*c8_1*c1_2*map.g00*map.g11;
  const real G7_1_0_0_1_0_0_3_0 = map.det*c0*c4_0*c7_0*c7_1*c1_3*map.g00*map.g01 + map.det*c0*c4_0*c8_0*c8_1*c1_3*map.g00*map.g01;
  const real G7_1_0_0_1_0_0_3_1 = map.det*c0*c4_0*c7_0*c7_1*c1_3*map.g00*map.g11 + map.det*c0*c4_0*c8_0*c8_1*c1_3*map.g00*map.g11;
  const real G7_1_0_0_1_0_0_4_0 = map.det*c0*c4_0*c7_0*c7_1*c1_4*map.g00*map.g01 + map.det*c0*c4_0*c8_0*c8_1*c1_4*map.g00*map.g01;
  const real G7_1_0_0_1_0_0_5_1 = map.det*c0*c4_0*c7_0*c7_1*c1_5*map.g00*map.g11 + map.det*c0*c4_0*c8_0*c8_1*c1_5*map.g00*map.g11;
  const real G7_1_0_0_1_1_0_0_0 = map.det*c0*c4_0*c7_0*c7_1*c1_0*map.g10*map.g01 + map.det*c0*c4_0*c8_0*c8_1*c1_0*map.g10*map.g01;
  const real G7_1_0_0_1_1_0_0_1 = map.det*c0*c4_0*c7_0*c7_1*c1_0*map.g10*map.g11 + map.det*c0*c4_0*c8_0*c8_1*c1_0*map.g10*map.g11;
  const real G7_1_0_0_1_1_0_1_0 = map.det*c0*c4_0*c7_0*c7_1*c1_1*map.g10*map.g01 + map.det*c0*c4_0*c8_0*c8_1*c1_1*map.g10*map.g01;
  const real G7_1_0_0_1_1_0_2_1 = map.det*c0*c4_0*c7_0*c7_1*c1_2*map.g10*map.g11 + map.det*c0*c4_0*c8_0*c8_1*c1_2*map.g10*map.g11;
  const real G7_1_0_0_1_1_0_3_0 = map.det*c0*c4_0*c7_0*c7_1*c1_3*map.g10*map.g01 + map.det*c0*c4_0*c8_0*c8_1*c1_3*map.g10*map.g01;
  const real G7_1_0_0_1_1_0_3_1 = map.det*c0*c4_0*c7_0*c7_1*c1_3*map.g10*map.g11 + map.det*c0*c4_0*c8_0*c8_1*c1_3*map.g10*map.g11;
  const real G7_1_0_0_1_1_0_4_0 = map.det*c0*c4_0*c7_0*c7_1*c1_4*map.g10*map.g01 + map.det*c0*c4_0*c8_0*c8_1*c1_4*map.g10*map.g01;
  const real G7_1_0_0_1_1_0_5_1 = map.det*c0*c4_0*c7_0*c7_1*c1_5*map.g10*map.g11 + map.det*c0*c4_0*c8_0*c8_1*c1_5*map.g10*map.g11;
  const real G7_1_0_1_1_0_1_0_0 = map.det*c0*c4_0*c7_1*c7_1*c1_0*map.g01*map.g01 + map.det*c0*c4_0*c8_1*c8_1*c1_0*map.g01*map.g01;
  const real G7_1_0_1_1_0_1_0_1 = map.det*c0*c4_0*c7_1*c7_1*c1_0*map.g01*map.g11 + map.det*c0*c4_0*c8_1*c8_1*c1_0*map.g01*map.g11;
  const real G7_1_0_1_1_0_1_1_0 = map.det*c0*c4_0*c7_1*c7_1*c1_1*map.g01*map.g01 + map.det*c0*c4_0*c8_1*c8_1*c1_1*map.g01*map.g01;
  const real G7_1_0_1_1_0_1_2_1 = map.det*c0*c4_0*c7_1*c7_1*c1_2*map.g01*map.g11 + map.det*c0*c4_0*c8_1*c8_1*c1_2*map.g01*map.g11;
  const real G7_1_0_1_1_0_1_3_0 = map.det*c0*c4_0*c7_1*c7_1*c1_3*map.g01*map.g01 + map.det*c0*c4_0*c8_1*c8_1*c1_3*map.g01*map.g01;
  const real G7_1_0_1_1_0_1_3_1 = map.det*c0*c4_0*c7_1*c7_1*c1_3*map.g01*map.g11 + map.det*c0*c4_0*c8_1*c8_1*c1_3*map.g01*map.g11;
  const real G7_1_0_1_1_0_1_4_0 = map.det*c0*c4_0*c7_1*c7_1*c1_4*map.g01*map.g01 + map.det*c0*c4_0*c8_1*c8_1*c1_4*map.g01*map.g01;
  const real G7_1_0_1_1_0_1_5_1 = map.det*c0*c4_0*c7_1*c7_1*c1_5*map.g01*map.g11 + map.det*c0*c4_0*c8_1*c8_1*c1_5*map.g01*map.g11;
  const real G7_1_0_1_1_1_1_0_0 = map.det*c0*c4_0*c7_1*c7_1*c1_0*map.g11*map.g01 + map.det*c0*c4_0*c8_1*c8_1*c1_0*map.g11*map.g01;
  const real G7_1_0_1_1_1_1_0_1 = map.det*c0*c4_0*c7_1*c7_1*c1_0*map.g11*map.g11 + map.det*c0*c4_0*c8_1*c8_1*c1_0*map.g11*map.g11;
  const real G7_1_0_1_1_1_1_1_0 = map.det*c0*c4_0*c7_1*c7_1*c1_1*map.g11*map.g01 + map.det*c0*c4_0*c8_1*c8_1*c1_1*map.g11*map.g01;
  const real G7_1_0_1_1_1_1_2_1 = map.det*c0*c4_0*c7_1*c7_1*c1_2*map.g11*map.g11 + map.det*c0*c4_0*c8_1*c8_1*c1_2*map.g11*map.g11;
  const real G7_1_0_1_1_1_1_3_0 = map.det*c0*c4_0*c7_1*c7_1*c1_3*map.g11*map.g01 + map.det*c0*c4_0*c8_1*c8_1*c1_3*map.g11*map.g01;
  const real G7_1_0_1_1_1_1_3_1 = map.det*c0*c4_0*c7_1*c7_1*c1_3*map.g11*map.g11 + map.det*c0*c4_0*c8_1*c8_1*c1_3*map.g11*map.g11;
  const real G7_1_0_1_1_1_1_4_0 = map.det*c0*c4_0*c7_1*c7_1*c1_4*map.g11*map.g01 + map.det*c0*c4_0*c8_1*c8_1*c1_4*map.g11*map.g01;
  const real G7_1_0_1_1_1_1_5_1 = map.det*c0*c4_0*c7_1*c7_1*c1_5*map.g11*map.g11 + map.det*c0*c4_0*c8_1*c8_1*c1_5*map.g11*map.g11;
  const real G8_0_0_0_0_0_0_0_0 = map.det*c0*c4_0*c7_0*c8_0*c1_0*map.g00*map.g00 + map.det*c0*c4_0*c8_0*c7_0*c1_0*map.g00*map.g00;
  const real G8_0_0_0_0_0_0_0_1 = map.det*c0*c4_0*c7_0*c8_0*c1_0*map.g00*map.g10 + map.det*c0*c4_0*c8_0*c7_0*c1_0*map.g00*map.g10;
  const real G8_0_0_0_0_0_0_1_0 = map.det*c0*c4_0*c7_0*c8_0*c1_1*map.g00*map.g00 + map.det*c0*c4_0*c8_0*c7_0*c1_1*map.g00*map.g00;
  const real G8_0_0_0_0_0_0_2_1 = map.det*c0*c4_0*c7_0*c8_0*c1_2*map.g00*map.g10 + map.det*c0*c4_0*c8_0*c7_0*c1_2*map.g00*map.g10;
  const real G8_0_0_0_0_0_0_3_0 = map.det*c0*c4_0*c7_0*c8_0*c1_3*map.g00*map.g00 + map.det*c0*c4_0*c8_0*c7_0*c1_3*map.g00*map.g00;
  const real G8_0_0_0_0_0_0_3_1 = map.det*c0*c4_0*c7_0*c8_0*c1_3*map.g00*map.g10 + map.det*c0*c4_0*c8_0*c7_0*c1_3*map.g00*map.g10;
  const real G8_0_0_0_0_0_0_4_0 = map.det*c0*c4_0*c7_0*c8_0*c1_4*map.g00*map.g00 + map.det*c0*c4_0*c8_0*c7_0*c1_4*map.g00*map.g00;
  const real G8_0_0_0_0_0_0_5_1 = map.det*c0*c4_0*c7_0*c8_0*c1_5*map.g00*map.g10 + map.det*c0*c4_0*c8_0*c7_0*c1_5*map.g00*map.g10;
  const real G8_0_0_0_0_1_0_0_0 = map.det*c0*c4_0*c7_0*c8_0*c1_0*map.g10*map.g00 + map.det*c0*c4_0*c8_0*c7_0*c1_0*map.g10*map.g00;
  const real G8_0_0_0_0_1_0_0_1 = map.det*c0*c4_0*c7_0*c8_0*c1_0*map.g10*map.g10 + map.det*c0*c4_0*c8_0*c7_0*c1_0*map.g10*map.g10;
  const real G8_0_0_0_0_1_0_1_0 = map.det*c0*c4_0*c7_0*c8_0*c1_1*map.g10*map.g00 + map.det*c0*c4_0*c8_0*c7_0*c1_1*map.g10*map.g00;
  const real G8_0_0_0_0_1_0_2_1 = map.det*c0*c4_0*c7_0*c8_0*c1_2*map.g10*map.g10 + map.det*c0*c4_0*c8_0*c7_0*c1_2*map.g10*map.g10;
  const real G8_0_0_0_0_1_0_3_0 = map.det*c0*c4_0*c7_0*c8_0*c1_3*map.g10*map.g00 + map.det*c0*c4_0*c8_0*c7_0*c1_3*map.g10*map.g00;
  const real G8_0_0_0_0_1_0_3_1 = map.det*c0*c4_0*c7_0*c8_0*c1_3*map.g10*map.g10 + map.det*c0*c4_0*c8_0*c7_0*c1_3*map.g10*map.g10;
  const real G8_0_0_0_0_1_0_4_0 = map.det*c0*c4_0*c7_0*c8_0*c1_4*map.g10*map.g00 + map.det*c0*c4_0*c8_0*c7_0*c1_4*map.g10*map.g00;
  const real G8_0_0_0_0_1_0_5_1 = map.det*c0*c4_0*c7_0*c8_0*c1_5*map.g10*map.g10 + map.det*c0*c4_0*c8_0*c7_0*c1_5*map.g10*map.g10;
  const real G8_0_0_1_0_0_1_0_0 = map.det*c0*c4_0*c7_1*c8_0*c1_0*map.g01*map.g00 + map.det*c0*c4_0*c8_1*c7_0*c1_0*map.g01*map.g00;
  const real G8_0_0_1_0_0_1_0_1 = map.det*c0*c4_0*c7_1*c8_0*c1_0*map.g01*map.g10 + map.det*c0*c4_0*c8_1*c7_0*c1_0*map.g01*map.g10;
  const real G8_0_0_1_0_0_1_1_0 = map.det*c0*c4_0*c7_1*c8_0*c1_1*map.g01*map.g00 + map.det*c0*c4_0*c8_1*c7_0*c1_1*map.g01*map.g00;
  const real G8_0_0_1_0_0_1_2_1 = map.det*c0*c4_0*c7_1*c8_0*c1_2*map.g01*map.g10 + map.det*c0*c4_0*c8_1*c7_0*c1_2*map.g01*map.g10;
  const real G8_0_0_1_0_0_1_3_0 = map.det*c0*c4_0*c7_1*c8_0*c1_3*map.g01*map.g00 + map.det*c0*c4_0*c8_1*c7_0*c1_3*map.g01*map.g00;
  const real G8_0_0_1_0_0_1_3_1 = map.det*c0*c4_0*c7_1*c8_0*c1_3*map.g01*map.g10 + map.det*c0*c4_0*c8_1*c7_0*c1_3*map.g01*map.g10;
  const real G8_0_0_1_0_0_1_4_0 = map.det*c0*c4_0*c7_1*c8_0*c1_4*map.g01*map.g00 + map.det*c0*c4_0*c8_1*c7_0*c1_4*map.g01*map.g00;
  const real G8_0_0_1_0_0_1_5_1 = map.det*c0*c4_0*c7_1*c8_0*c1_5*map.g01*map.g10 + map.det*c0*c4_0*c8_1*c7_0*c1_5*map.g01*map.g10;
  const real G8_0_0_1_0_1_1_0_0 = map.det*c0*c4_0*c7_1*c8_0*c1_0*map.g11*map.g00 + map.det*c0*c4_0*c8_1*c7_0*c1_0*map.g11*map.g00;
  const real G8_0_0_1_0_1_1_0_1 = map.det*c0*c4_0*c7_1*c8_0*c1_0*map.g11*map.g10 + map.det*c0*c4_0*c8_1*c7_0*c1_0*map.g11*map.g10;
  const real G8_0_0_1_0_1_1_1_0 = map.det*c0*c4_0*c7_1*c8_0*c1_1*map.g11*map.g00 + map.det*c0*c4_0*c8_1*c7_0*c1_1*map.g11*map.g00;
  const real G8_0_0_1_0_1_1_2_1 = map.det*c0*c4_0*c7_1*c8_0*c1_2*map.g11*map.g10 + map.det*c0*c4_0*c8_1*c7_0*c1_2*map.g11*map.g10;
  const real G8_0_0_1_0_1_1_3_0 = map.det*c0*c4_0*c7_1*c8_0*c1_3*map.g11*map.g00 + map.det*c0*c4_0*c8_1*c7_0*c1_3*map.g11*map.g00;
  const real G8_0_0_1_0_1_1_3_1 = map.det*c0*c4_0*c7_1*c8_0*c1_3*map.g11*map.g10 + map.det*c0*c4_0*c8_1*c7_0*c1_3*map.g11*map.g10;
  const real G8_0_0_1_0_1_1_4_0 = map.det*c0*c4_0*c7_1*c8_0*c1_4*map.g11*map.g00 + map.det*c0*c4_0*c8_1*c7_0*c1_4*map.g11*map.g00;
  const real G8_0_0_1_0_1_1_5_1 = map.det*c0*c4_0*c7_1*c8_0*c1_5*map.g11*map.g10 + map.det*c0*c4_0*c8_1*c7_0*c1_5*map.g11*map.g10;
  const real G8_1_0_0_1_0_0_0_0 = map.det*c0*c4_0*c7_0*c8_1*c1_0*map.g00*map.g01 + map.det*c0*c4_0*c8_0*c7_1*c1_0*map.g00*map.g01;
  const real G8_1_0_0_1_0_0_0_1 = map.det*c0*c4_0*c7_0*c8_1*c1_0*map.g00*map.g11 + map.det*c0*c4_0*c8_0*c7_1*c1_0*map.g00*map.g11;
  const real G8_1_0_0_1_0_0_1_0 = map.det*c0*c4_0*c7_0*c8_1*c1_1*map.g00*map.g01 + map.det*c0*c4_0*c8_0*c7_1*c1_1*map.g00*map.g01;
  const real G8_1_0_0_1_0_0_2_1 = map.det*c0*c4_0*c7_0*c8_1*c1_2*map.g00*map.g11 + map.det*c0*c4_0*c8_0*c7_1*c1_2*map.g00*map.g11;
  const real G8_1_0_0_1_0_0_3_0 = map.det*c0*c4_0*c7_0*c8_1*c1_3*map.g00*map.g01 + map.det*c0*c4_0*c8_0*c7_1*c1_3*map.g00*map.g01;
  const real G8_1_0_0_1_0_0_3_1 = map.det*c0*c4_0*c7_0*c8_1*c1_3*map.g00*map.g11 + map.det*c0*c4_0*c8_0*c7_1*c1_3*map.g00*map.g11;
  const real G8_1_0_0_1_0_0_4_0 = map.det*c0*c4_0*c7_0*c8_1*c1_4*map.g00*map.g01 + map.det*c0*c4_0*c8_0*c7_1*c1_4*map.g00*map.g01;
  const real G8_1_0_0_1_0_0_5_1 = map.det*c0*c4_0*c7_0*c8_1*c1_5*map.g00*map.g11 + map.det*c0*c4_0*c8_0*c7_1*c1_5*map.g00*map.g11;
  const real G8_1_0_0_1_1_0_0_0 = map.det*c0*c4_0*c7_0*c8_1*c1_0*map.g10*map.g01 + map.det*c0*c4_0*c8_0*c7_1*c1_0*map.g10*map.g01;
  const real G8_1_0_0_1_1_0_0_1 = map.det*c0*c4_0*c7_0*c8_1*c1_0*map.g10*map.g11 + map.det*c0*c4_0*c8_0*c7_1*c1_0*map.g10*map.g11;
  const real G8_1_0_0_1_1_0_1_0 = map.det*c0*c4_0*c7_0*c8_1*c1_1*map.g10*map.g01 + map.det*c0*c4_0*c8_0*c7_1*c1_1*map.g10*map.g01;
  const real G8_1_0_0_1_1_0_2_1 = map.det*c0*c4_0*c7_0*c8_1*c1_2*map.g10*map.g11 + map.det*c0*c4_0*c8_0*c7_1*c1_2*map.g10*map.g11;
  const real G8_1_0_0_1_1_0_3_0 = map.det*c0*c4_0*c7_0*c8_1*c1_3*map.g10*map.g01 + map.det*c0*c4_0*c8_0*c7_1*c1_3*map.g10*map.g01;
  const real G8_1_0_0_1_1_0_3_1 = map.det*c0*c4_0*c7_0*c8_1*c1_3*map.g10*map.g11 + map.det*c0*c4_0*c8_0*c7_1*c1_3*map.g10*map.g11;
  const real G8_1_0_0_1_1_0_4_0 = map.det*c0*c4_0*c7_0*c8_1*c1_4*map.g10*map.g01 + map.det*c0*c4_0*c8_0*c7_1*c1_4*map.g10*map.g01;
  const real G8_1_0_0_1_1_0_5_1 = map.det*c0*c4_0*c7_0*c8_1*c1_5*map.g10*map.g11 + map.det*c0*c4_0*c8_0*c7_1*c1_5*map.g10*map.g11;
  const real G8_1_0_1_1_0_1_0_0 = map.det*c0*c4_0*c7_1*c8_1*c1_0*map.g01*map.g01 + map.det*c0*c4_0*c8_1*c7_1*c1_0*map.g01*map.g01;
  const real G8_1_0_1_1_0_1_0_1 = map.det*c0*c4_0*c7_1*c8_1*c1_0*map.g01*map.g11 + map.det*c0*c4_0*c8_1*c7_1*c1_0*map.g01*map.g11;
  const real G8_1_0_1_1_0_1_1_0 = map.det*c0*c4_0*c7_1*c8_1*c1_1*map.g01*map.g01 + map.det*c0*c4_0*c8_1*c7_1*c1_1*map.g01*map.g01;
  const real G8_1_0_1_1_0_1_2_1 = map.det*c0*c4_0*c7_1*c8_1*c1_2*map.g01*map.g11 + map.det*c0*c4_0*c8_1*c7_1*c1_2*map.g01*map.g11;
  const real G8_1_0_1_1_0_1_3_0 = map.det*c0*c4_0*c7_1*c8_1*c1_3*map.g01*map.g01 + map.det*c0*c4_0*c8_1*c7_1*c1_3*map.g01*map.g01;
  const real G8_1_0_1_1_0_1_3_1 = map.det*c0*c4_0*c7_1*c8_1*c1_3*map.g01*map.g11 + map.det*c0*c4_0*c8_1*c7_1*c1_3*map.g01*map.g11;
  const real G8_1_0_1_1_0_1_4_0 = map.det*c0*c4_0*c7_1*c8_1*c1_4*map.g01*map.g01 + map.det*c0*c4_0*c8_1*c7_1*c1_4*map.g01*map.g01;
  const real G8_1_0_1_1_0_1_5_1 = map.det*c0*c4_0*c7_1*c8_1*c1_5*map.g01*map.g11 + map.det*c0*c4_0*c8_1*c7_1*c1_5*map.g01*map.g11;
  const real G8_1_0_1_1_1_1_0_0 = map.det*c0*c4_0*c7_1*c8_1*c1_0*map.g11*map.g01 + map.det*c0*c4_0*c8_1*c7_1*c1_0*map.g11*map.g01;
  const real G8_1_0_1_1_1_1_0_1 = map.det*c0*c4_0*c7_1*c8_1*c1_0*map.g11*map.g11 + map.det*c0*c4_0*c8_1*c7_1*c1_0*map.g11*map.g11;
  const real G8_1_0_1_1_1_1_1_0 = map.det*c0*c4_0*c7_1*c8_1*c1_1*map.g11*map.g01 + map.det*c0*c4_0*c8_1*c7_1*c1_1*map.g11*map.g01;
  const real G8_1_0_1_1_1_1_2_1 = map.det*c0*c4_0*c7_1*c8_1*c1_2*map.g11*map.g11 + map.det*c0*c4_0*c8_1*c7_1*c1_2*map.g11*map.g11;
  const real G8_1_0_1_1_1_1_3_0 = map.det*c0*c4_0*c7_1*c8_1*c1_3*map.g11*map.g01 + map.det*c0*c4_0*c8_1*c7_1*c1_3*map.g11*map.g01;
  const real G8_1_0_1_1_1_1_3_1 = map.det*c0*c4_0*c7_1*c8_1*c1_3*map.g11*map.g11 + map.det*c0*c4_0*c8_1*c7_1*c1_3*map.g11*map.g11;
  const real G8_1_0_1_1_1_1_4_0 = map.det*c0*c4_0*c7_1*c8_1*c1_4*map.g11*map.g01 + map.det*c0*c4_0*c8_1*c7_1*c1_4*map.g11*map.g01;
  const real G8_1_0_1_1_1_1_5_1 = map.det*c0*c4_0*c7_1*c8_1*c1_5*map.g11*map.g11 + map.det*c0*c4_0*c8_1*c7_1*c1_5*map.g11*map.g11;
  const real G9_0_0_0_0_0_0_0 = map.det*c0*c4_0*c7_0*c3_0*map.g00*map.g00;
  const real G9_0_0_0_0_0_0_1 = map.det*c0*c4_0*c7_0*c3_0*map.g00*map.g10;
  const real G9_0_0_0_0_0_1_0 = map.det*c0*c4_0*c7_0*c3_1*map.g00*map.g00;
  const real G9_0_0_0_0_0_2_1 = map.det*c0*c4_0*c7_0*c3_2*map.g00*map.g10;
  const real G9_0_0_0_1_0_0_0 = map.det*c0*c4_0*c7_0*c3_0*map.g10*map.g00;
  const real G9_0_0_0_1_0_0_1 = map.det*c0*c4_0*c7_0*c3_0*map.g10*map.g10;
  const real G9_0_0_0_1_0_1_0 = map.det*c0*c4_0*c7_0*c3_1*map.g10*map.g00;
  const real G9_0_0_0_1_0_2_1 = map.det*c0*c4_0*c7_0*c3_2*map.g10*map.g10;
  const real G9_0_0_1_0_1_0_0 = map.det*c0*c4_0*c7_1*c3_0*map.g01*map.g00;
  const real G9_0_0_1_0_1_0_1 = map.det*c0*c4_0*c7_1*c3_0*map.g01*map.g10;
  const real G9_0_0_1_0_1_1_0 = map.det*c0*c4_0*c7_1*c3_1*map.g01*map.g00;
  const real G9_0_0_1_0_1_2_1 = map.det*c0*c4_0*c7_1*c3_2*map.g01*map.g10;
  const real G9_0_0_1_1_1_0_0 = map.det*c0*c4_0*c7_1*c3_0*map.g11*map.g00;
  const real G9_0_0_1_1_1_0_1 = map.det*c0*c4_0*c7_1*c3_0*map.g11*map.g10;
  const real G9_0_0_1_1_1_1_0 = map.det*c0*c4_0*c7_1*c3_1*map.g11*map.g00;
  const real G9_0_0_1_1_1_2_1 = map.det*c0*c4_0*c7_1*c3_2*map.g11*map.g10;
  const real G9_1_0_0_0_0_0_0 = map.det*c0*c4_0*c7_0*c3_0*map.g00*map.g01;
  const real G9_1_0_0_0_0_0_1 = map.det*c0*c4_0*c7_0*c3_0*map.g00*map.g11;
  const real G9_1_0_0_0_0_1_0 = map.det*c0*c4_0*c7_0*c3_1*map.g00*map.g01;
  const real G9_1_0_0_0_0_2_1 = map.det*c0*c4_0*c7_0*c3_2*map.g00*map.g11;
  const real G9_1_0_0_1_0_0_0 = map.det*c0*c4_0*c7_0*c3_0*map.g10*map.g01;
  const real G9_1_0_0_1_0_0_1 = map.det*c0*c4_0*c7_0*c3_0*map.g10*map.g11;
  const real G9_1_0_0_1_0_1_0 = map.det*c0*c4_0*c7_0*c3_1*map.g10*map.g01;
  const real G9_1_0_0_1_0_2_1 = map.det*c0*c4_0*c7_0*c3_2*map.g10*map.g11;
  const real G9_1_0_1_0_1_0_0 = map.det*c0*c4_0*c7_1*c3_0*map.g01*map.g01;
  const real G9_1_0_1_0_1_0_1 = map.det*c0*c4_0*c7_1*c3_0*map.g01*map.g11;
  const real G9_1_0_1_0_1_1_0 = map.det*c0*c4_0*c7_1*c3_1*map.g01*map.g01;
  const real G9_1_0_1_0_1_2_1 = map.det*c0*c4_0*c7_1*c3_2*map.g01*map.g11;
  const real G9_1_0_1_1_1_0_0 = map.det*c0*c4_0*c7_1*c3_0*map.g11*map.g01;
  const real G9_1_0_1_1_1_0_1 = map.det*c0*c4_0*c7_1*c3_0*map.g11*map.g11;
  const real G9_1_0_1_1_1_1_0 = map.det*c0*c4_0*c7_1*c3_1*map.g11*map.g01;
  const real G9_1_0_1_1_1_2_1 = map.det*c0*c4_0*c7_1*c3_2*map.g11*map.g11;
  const real G10_0_0_0_0_0_0_0 = map.det*c0*c4_0*c8_0*c3_0*map.g00*map.g00;
  const real G10_0_0_0_0_0_0_1 = map.det*c0*c4_0*c8_0*c3_0*map.g00*map.g10;
  const real G10_0_0_0_0_0_1_0 = map.det*c0*c4_0*c8_0*c3_1*map.g00*map.g00;
  const real G10_0_0_0_0_0_2_1 = map.det*c0*c4_0*c8_0*c3_2*map.g00*map.g10;
  const real G10_0_0_0_1_0_0_0 = map.det*c0*c4_0*c8_0*c3_0*map.g10*map.g00;
  const real G10_0_0_0_1_0_0_1 = map.det*c0*c4_0*c8_0*c3_0*map.g10*map.g10;
  const real G10_0_0_0_1_0_1_0 = map.det*c0*c4_0*c8_0*c3_1*map.g10*map.g00;
  const real G10_0_0_0_1_0_2_1 = map.det*c0*c4_0*c8_0*c3_2*map.g10*map.g10;
  const real G10_0_0_1_0_1_0_0 = map.det*c0*c4_0*c8_1*c3_0*map.g01*map.g00;
  const real G10_0_0_1_0_1_0_1 = map.det*c0*c4_0*c8_1*c3_0*map.g01*map.g10;
  const real G10_0_0_1_0_1_1_0 = map.det*c0*c4_0*c8_1*c3_1*map.g01*map.g00;
  const real G10_0_0_1_0_1_2_1 = map.det*c0*c4_0*c8_1*c3_2*map.g01*map.g10;
  const real G10_0_0_1_1_1_0_0 = map.det*c0*c4_0*c8_1*c3_0*map.g11*map.g00;
  const real G10_0_0_1_1_1_0_1 = map.det*c0*c4_0*c8_1*c3_0*map.g11*map.g10;
  const real G10_0_0_1_1_1_1_0 = map.det*c0*c4_0*c8_1*c3_1*map.g11*map.g00;
  const real G10_0_0_1_1_1_2_1 = map.det*c0*c4_0*c8_1*c3_2*map.g11*map.g10;
  const real G10_1_0_0_0_0_0_0 = map.det*c0*c4_0*c8_0*c3_0*map.g00*map.g01;
  const real G10_1_0_0_0_0_0_1 = map.det*c0*c4_0*c8_0*c3_0*map.g00*map.g11;
  const real G10_1_0_0_0_0_1_0 = map.det*c0*c4_0*c8_0*c3_1*map.g00*map.g01;
  const real G10_1_0_0_0_0_2_1 = map.det*c0*c4_0*c8_0*c3_2*map.g00*map.g11;
  const real G10_1_0_0_1_0_0_0 = map.det*c0*c4_0*c8_0*c3_0*map.g10*map.g01;
  const real G10_1_0_0_1_0_0_1 = map.det*c0*c4_0*c8_0*c3_0*map.g10*map.g11;
  const real G10_1_0_0_1_0_1_0 = map.det*c0*c4_0*c8_0*c3_1*map.g10*map.g01;
  const real G10_1_0_0_1_0_2_1 = map.det*c0*c4_0*c8_0*c3_2*map.g10*map.g11;
  const real G10_1_0_1_0_1_0_0 = map.det*c0*c4_0*c8_1*c3_0*map.g01*map.g01;
  const real G10_1_0_1_0_1_0_1 = map.det*c0*c4_0*c8_1*c3_0*map.g01*map.g11;
  const real G10_1_0_1_0_1_1_0 = map.det*c0*c4_0*c8_1*c3_1*map.g01*map.g01;
  const real G10_1_0_1_0_1_2_1 = map.det*c0*c4_0*c8_1*c3_2*map.g01*map.g11;
  const real G10_1_0_1_1_1_0_0 = map.det*c0*c4_0*c8_1*c3_0*map.g11*map.g01;
  const real G10_1_0_1_1_1_0_1 = map.det*c0*c4_0*c8_1*c3_0*map.g11*map.g11;
  const real G10_1_0_1_1_1_1_0 = map.det*c0*c4_0*c8_1*c3_1*map.g11*map.g01;
  const real G10_1_0_1_1_1_2_1 = map.det*c0*c4_0*c8_1*c3_2*map.g11*map.g11;
  const real G11_0_0_0_0_0_0 = map.det*c0*c5_0*c1_0*map.g00*map.g00;
  const real G11_0_0_0_0_1_0 = map.det*c0*c5_0*c1_0*map.g00*map.g10;
  const real G11_0_0_0_1_0_0 = map.det*c0*c5_0*c1_1*map.g00*map.g00;
  const real G11_0_0_0_2_1_0 = map.det*c0*c5_0*c1_2*map.g00*map.g10;
  const real G11_0_0_0_3_0_1 = map.det*c0*c5_0*c1_3*map.g00*map.g01;
  const real G11_0_0_0_3_1_1 = map.det*c0*c5_0*c1_3*map.g00*map.g11;
  const real G11_0_0_0_4_0_1 = map.det*c0*c5_0*c1_4*map.g00*map.g01;
  const real G11_0_0_0_5_1_1 = map.det*c0*c5_0*c1_5*map.g00*map.g11;
  const real G11_0_0_1_0_0_0 = map.det*c0*c5_0*c1_0*map.g01*map.g00;
  const real G11_0_0_1_0_1_0 = map.det*c0*c5_0*c1_0*map.g01*map.g10;
  const real G11_0_0_1_1_0_0 = map.det*c0*c5_0*c1_1*map.g01*map.g00;
  const real G11_0_0_1_2_1_0 = map.det*c0*c5_0*c1_2*map.g01*map.g10;
  const real G11_0_0_1_3_0_1 = map.det*c0*c5_0*c1_3*map.g01*map.g01;
  const real G11_0_0_1_3_1_1 = map.det*c0*c5_0*c1_3*map.g01*map.g11;
  const real G11_0_0_1_4_0_1 = map.det*c0*c5_0*c1_4*map.g01*map.g01;
  const real G11_0_0_1_5_1_1 = map.det*c0*c5_0*c1_5*map.g01*map.g11;
  const real G11_0_1_0_0_0_0 = map.det*c0*c5_0*c1_0*map.g10*map.g00;
  const real G11_0_1_0_0_1_0 = map.det*c0*c5_0*c1_0*map.g10*map.g10;
  const real G11_0_1_0_1_0_0 = map.det*c0*c5_0*c1_1*map.g10*map.g00;
  const real G11_0_1_0_2_1_0 = map.det*c0*c5_0*c1_2*map.g10*map.g10;
  const real G11_0_1_0_3_0_1 = map.det*c0*c5_0*c1_3*map.g10*map.g01;
  const real G11_0_1_0_3_1_1 = map.det*c0*c5_0*c1_3*map.g10*map.g11;
  const real G11_0_1_0_4_0_1 = map.det*c0*c5_0*c1_4*map.g10*map.g01;
  const real G11_0_1_0_5_1_1 = map.det*c0*c5_0*c1_5*map.g10*map.g11;
  const real G11_0_1_1_0_0_0 = map.det*c0*c5_0*c1_0*map.g11*map.g00;
  const real G11_0_1_1_0_1_0 = map.det*c0*c5_0*c1_0*map.g11*map.g10;
  const real G11_0_1_1_1_0_0 = map.det*c0*c5_0*c1_1*map.g11*map.g00;
  const real G11_0_1_1_2_1_0 = map.det*c0*c5_0*c1_2*map.g11*map.g10;
  const real G11_0_1_1_3_0_1 = map.det*c0*c5_0*c1_3*map.g11*map.g01;
  const real G11_0_1_1_3_1_1 = map.det*c0*c5_0*c1_3*map.g11*map.g11;
  const real G11_0_1_1_4_0_1 = map.det*c0*c5_0*c1_4*map.g11*map.g01;
  const real G11_0_1_1_5_1_1 = map.det*c0*c5_0*c1_5*map.g11*map.g11;

  // Compute element tensor
  block[0] = 8.333333333333318e-02*G0_0 + 4.166666666666659e-02*G0_1 + 4.166666666666657e-02*G0_2 - 1.666666666666665e-01*G1_0_0_0 - 1.666666666666666e-01*G1_0_0_1 - 1.666666666666665e-01*G1_0_0_2 - 1.666666666666665e-01*G1_1_0_0 - 1.666666666666665e-01*G1_1_0_1 - 1.666666666666665e-01*G1_1_0_2 - 2.499999999999999e-01*G2_0_0_0 - 2.499999999999998e-01*G2_0_0_1 + 2.499999999999999e-01*G2_0_1_0 + 2.499999999999998e-01*G2_0_2_1 - 2.499999999999998e-01*G2_1_0_0 - 2.499999999999998e-01*G2_1_0_1 + 2.499999999999998e-01*G2_1_1_0 + 2.499999999999998e-01*G2_1_2_1 + 4.166666666666659e-02*G3_0_0_0_0 + 4.166666666666659e-02*G3_0_0_0_1 - 4.166666666666659e-02*G3_0_0_1_0 - 4.166666666666659e-02*G3_0_0_2_1 + 2.083333333333329e-02*G3_0_1_0_0 + 2.083333333333329e-02*G3_0_1_0_1 - 2.083333333333329e-02*G3_0_1_1_0 - 2.083333333333329e-02*G3_0_1_2_1 + 2.083333333333329e-02*G3_0_2_0_0 + 2.083333333333329e-02*G3_0_2_0_1 - 2.083333333333329e-02*G3_0_2_1_0 - 2.083333333333329e-02*G3_0_2_2_1 + 4.166666666666659e-02*G3_1_3_0_0 + 4.166666666666659e-02*G3_1_3_0_1 - 4.166666666666659e-02*G3_1_3_1_0 - 4.166666666666659e-02*G3_1_3_2_1 + 2.083333333333329e-02*G3_1_4_0_0 + 2.083333333333329e-02*G3_1_4_0_1 - 2.083333333333329e-02*G3_1_4_1_0 - 2.083333333333329e-02*G3_1_4_2_1 + 2.083333333333329e-02*G3_1_5_0_0 + 2.083333333333329e-02*G3_1_5_0_1 - 2.083333333333329e-02*G3_1_5_1_0 - 2.083333333333329e-02*G3_1_5_2_1 - 4.166666666666659e-02*G4_0_0_0_0 - 4.166666666666659e-02*G4_0_0_0_1 + 4.166666666666659e-02*G4_0_0_1_0 + 4.166666666666659e-02*G4_0_0_2_1 - 2.083333333333329e-02*G4_0_1_0_0 - 2.083333333333329e-02*G4_0_1_0_1 + 2.083333333333329e-02*G4_0_1_1_0 + 2.083333333333329e-02*G4_0_1_2_1 - 2.083333333333329e-02*G4_0_2_0_0 - 2.083333333333329e-02*G4_0_2_0_1 + 2.083333333333329e-02*G4_0_2_1_0 + 2.083333333333329e-02*G4_0_2_2_1 - 4.166666666666659e-02*G4_1_3_0_0 - 4.166666666666659e-02*G4_1_3_0_1 + 4.166666666666659e-02*G4_1_3_1_0 + 4.166666666666659e-02*G4_1_3_2_1 - 2.083333333333329e-02*G4_1_4_0_0 - 2.083333333333329e-02*G4_1_4_0_1 + 2.083333333333329e-02*G4_1_4_1_0 + 2.083333333333329e-02*G4_1_4_2_1 - 2.083333333333329e-02*G4_1_5_0_0 - 2.083333333333329e-02*G4_1_5_0_1 + 2.083333333333329e-02*G4_1_5_1_0 + 2.083333333333329e-02*G4_1_5_2_1 - 1.666666666666665e-01*G5_0_0_0_0_0 - 1.666666666666666e-01*G5_0_0_0_0_1 - 1.666666666666665e-01*G5_0_0_0_0_2 - 1.666666666666665e-01*G5_0_0_1_0_0 - 1.666666666666665e-01*G5_0_0_1_0_1 - 1.666666666666665e-01*G5_0_0_1_0_2 - 1.666666666666665e-01*G5_0_1_0_1_0 - 1.666666666666666e-01*G5_0_1_0_1_1 - 1.666666666666665e-01*G5_0_1_0_1_2 - 1.666666666666665e-01*G5_0_1_1_1_0 - 1.666666666666665e-01*G5_0_1_1_1_1 - 1.666666666666665e-01*G5_0_1_1_1_2 + 1.666666666666665e-01*G6_0_0_0_0_0 + 1.666666666666666e-01*G6_0_0_0_0_1 + 1.666666666666665e-01*G6_0_0_0_0_2 + 1.666666666666665e-01*G6_0_0_1_0_0 + 1.666666666666665e-01*G6_0_0_1_0_1 + 1.666666666666665e-01*G6_0_0_1_0_2 + 1.666666666666665e-01*G6_0_1_0_1_0 + 1.666666666666666e-01*G6_0_1_0_1_1 + 1.666666666666665e-01*G6_0_1_0_1_2 + 1.666666666666665e-01*G6_0_1_1_1_0 + 1.666666666666665e-01*G6_0_1_1_1_1 + 1.666666666666665e-01*G6_0_1_1_1_2 - 2.499999999999999e-01*G7_0_0_0_0_0_0_0_0 - 2.499999999999998e-01*G7_0_0_0_0_0_0_0_1 + 2.499999999999999e-01*G7_0_0_0_0_0_0_1_0 + 2.499999999999998e-01*G7_0_0_0_0_0_0_2_1 - 2.499999999999998e-01*G7_0_0_0_0_1_0_0_0 - 2.499999999999998e-01*G7_0_0_0_0_1_0_0_1 + 2.499999999999998e-01*G7_0_0_0_0_1_0_1_0 + 2.499999999999998e-01*G7_0_0_0_0_1_0_2_1 - 2.499999999999999e-01*G7_0_0_1_0_0_1_0_0 - 2.499999999999998e-01*G7_0_0_1_0_0_1_0_1 + 2.499999999999999e-01*G7_0_0_1_0_0_1_1_0 + 2.499999999999998e-01*G7_0_0_1_0_0_1_2_1 - 2.499999999999998e-01*G7_0_0_1_0_1_1_0_0 - 2.499999999999998e-01*G7_0_0_1_0_1_1_0_1 + 2.499999999999998e-01*G7_0_0_1_0_1_1_1_0 + 2.499999999999998e-01*G7_0_0_1_0_1_1_2_1 - 2.499999999999999e-01*G7_1_0_0_1_0_0_0_0 - 2.499999999999998e-01*G7_1_0_0_1_0_0_0_1 + 2.499999999999999e-01*G7_1_0_0_1_0_0_1_0 + 2.499999999999998e-01*G7_1_0_0_1_0_0_2_1 - 2.499999999999998e-01*G7_1_0_0_1_1_0_0_0 - 2.499999999999998e-01*G7_1_0_0_1_1_0_0_1 + 2.499999999999998e-01*G7_1_0_0_1_1_0_1_0 + 2.499999999999998e-01*G7_1_0_0_1_1_0_2_1 - 2.499999999999999e-01*G7_1_0_1_1_0_1_0_0 - 2.499999999999998e-01*G7_1_0_1_1_0_1_0_1 + 2.499999999999999e-01*G7_1_0_1_1_0_1_1_0 + 2.499999999999998e-01*G7_1_0_1_1_0_1_2_1 - 2.499999999999998e-01*G7_1_0_1_1_1_1_0_0 - 2.499999999999998e-01*G7_1_0_1_1_1_1_0_1 + 2.499999999999998e-01*G7_1_0_1_1_1_1_1_0 + 2.499999999999998e-01*G7_1_0_1_1_1_1_2_1 + 2.499999999999999e-01*G8_0_0_0_0_0_0_0_0 + 2.499999999999998e-01*G8_0_0_0_0_0_0_0_1 - 2.499999999999999e-01*G8_0_0_0_0_0_0_1_0 - 2.499999999999998e-01*G8_0_0_0_0_0_0_2_1 + 2.499999999999998e-01*G8_0_0_0_0_1_0_0_0 + 2.499999999999998e-01*G8_0_0_0_0_1_0_0_1 - 2.499999999999998e-01*G8_0_0_0_0_1_0_1_0 - 2.499999999999998e-01*G8_0_0_0_0_1_0_2_1 + 2.499999999999999e-01*G8_0_0_1_0_0_1_0_0 + 2.499999999999998e-01*G8_0_0_1_0_0_1_0_1 - 2.499999999999999e-01*G8_0_0_1_0_0_1_1_0 - 2.499999999999998e-01*G8_0_0_1_0_0_1_2_1 + 2.499999999999998e-01*G8_0_0_1_0_1_1_0_0 + 2.499999999999998e-01*G8_0_0_1_0_1_1_0_1 - 2.499999999999998e-01*G8_0_0_1_0_1_1_1_0 - 2.499999999999998e-01*G8_0_0_1_0_1_1_2_1 + 2.499999999999999e-01*G8_1_0_0_1_0_0_0_0 + 2.499999999999998e-01*G8_1_0_0_1_0_0_0_1 - 2.499999999999999e-01*G8_1_0_0_1_0_0_1_0 - 2.499999999999998e-01*G8_1_0_0_1_0_0_2_1 + 2.499999999999998e-01*G8_1_0_0_1_1_0_0_0 + 2.499999999999998e-01*G8_1_0_0_1_1_0_0_1 - 2.499999999999998e-01*G8_1_0_0_1_1_0_1_0 - 2.499999999999998e-01*G8_1_0_0_1_1_0_2_1 + 2.499999999999999e-01*G8_1_0_1_1_0_1_0_0 + 2.499999999999998e-01*G8_1_0_1_1_0_1_0_1 - 2.499999999999999e-01*G8_1_0_1_1_0_1_1_0 - 2.499999999999998e-01*G8_1_0_1_1_0_1_2_1 + 2.499999999999998e-01*G8_1_0_1_1_1_1_0_0 + 2.499999999999998e-01*G8_1_0_1_1_1_1_0_1 - 2.499999999999998e-01*G8_1_0_1_1_1_1_1_0 - 2.499999999999998e-01*G8_1_0_1_1_1_1_2_1 - 4.999999999999998e-01*G9_0_0_0_0_0_0_0 - 4.999999999999997e-01*G9_0_0_0_0_0_0_1 + 4.999999999999998e-01*G9_0_0_0_0_0_1_0 + 4.999999999999997e-01*G9_0_0_0_0_0_2_1 - 4.999999999999997e-01*G9_0_0_0_1_0_0_0 - 4.999999999999996e-01*G9_0_0_0_1_0_0_1 + 4.999999999999997e-01*G9_0_0_0_1_0_1_0 + 4.999999999999996e-01*G9_0_0_0_1_0_2_1 - 4.999999999999998e-01*G9_0_0_1_0_1_0_0 - 4.999999999999997e-01*G9_0_0_1_0_1_0_1 + 4.999999999999998e-01*G9_0_0_1_0_1_1_0 + 4.999999999999997e-01*G9_0_0_1_0_1_2_1 - 4.999999999999997e-01*G9_0_0_1_1_1_0_0 - 4.999999999999996e-01*G9_0_0_1_1_1_0_1 + 4.999999999999997e-01*G9_0_0_1_1_1_1_0 + 4.999999999999996e-01*G9_0_0_1_1_1_2_1 + 4.999999999999998e-01*G10_0_0_0_0_0_0_0 + 4.999999999999997e-01*G10_0_0_0_0_0_0_1 - 4.999999999999998e-01*G10_0_0_0_0_0_1_0 - 4.999999999999997e-01*G10_0_0_0_0_0_2_1 + 4.999999999999997e-01*G10_0_0_0_1_0_0_0 + 4.999999999999996e-01*G10_0_0_0_1_0_0_1 - 4.999999999999997e-01*G10_0_0_0_1_0_1_0 - 4.999999999999996e-01*G10_0_0_0_1_0_2_1 + 4.999999999999998e-01*G10_0_0_1_0_1_0_0 + 4.999999999999997e-01*G10_0_0_1_0_1_0_1 - 4.999999999999998e-01*G10_0_0_1_0_1_1_0 - 4.999999999999997e-01*G10_0_0_1_0_1_2_1 + 4.999999999999997e-01*G10_0_0_1_1_1_0_0 + 4.999999999999996e-01*G10_0_0_1_1_1_0_1 - 4.999999999999997e-01*G10_0_0_1_1_1_1_0 - 4.999999999999996e-01*G10_0_0_1_1_1_2_1 - 2.499999999999999e-01*G11_0_0_0_0_0_0 - 2.499999999999998e-01*G11_0_0_0_0_1_0 + 2.499999999999999e-01*G11_0_0_0_1_0_0 + 2.499999999999998e-01*G11_0_0_0_2_1_0 - 2.499999999999999e-01*G11_0_0_0_3_0_1 - 2.499999999999998e-01*G11_0_0_0_3_1_1 + 2.499999999999999e-01*G11_0_0_0_4_0_1 + 2.499999999999998e-01*G11_0_0_0_5_1_1 - 2.499999999999998e-01*G11_0_1_0_0_0_0 - 2.499999999999998e-01*G11_0_1_0_0_1_0 + 2.499999999999998e-01*G11_0_1_0_1_0_0 + 2.499999999999998e-01*G11_0_1_0_2_1_0 - 2.499999999999998e-01*G11_0_1_0_3_0_1 - 2.499999999999998e-01*G11_0_1_0_3_1_1 + 2.499999999999998e-01*G11_0_1_0_4_0_1 + 2.499999999999998e-01*G11_0_1_0_5_1_1;
  block[1] = 4.166666666666659e-02*G0_0 + 8.333333333333318e-02*G0_1 + 4.166666666666659e-02*G0_2 + 1.666666666666665e-01*G1_0_0_0 + 1.666666666666666e-01*G1_0_0_1 + 1.666666666666665e-01*G1_0_0_2 + 2.499999999999999e-01*G2_0_0_0 + 2.499999999999998e-01*G2_0_0_1 - 2.499999999999999e-01*G2_0_1_0 - 2.499999999999998e-01*G2_0_2_1 + 2.083333333333329e-02*G3_0_0_0_0 + 2.083333333333329e-02*G3_0_0_0_1 - 2.083333333333329e-02*G3_0_0_1_0 - 2.083333333333329e-02*G3_0_0_2_1 + 4.166666666666659e-02*G3_0_1_0_0 + 4.166666666666659e-02*G3_0_1_0_1 - 4.166666666666659e-02*G3_0_1_1_0 - 4.166666666666658e-02*G3_0_1_2_1 + 2.083333333333330e-02*G3_0_2_0_0 + 2.083333333333329e-02*G3_0_2_0_1 - 2.083333333333330e-02*G3_0_2_1_0 - 2.083333333333329e-02*G3_0_2_2_1 + 2.083333333333329e-02*G3_1_3_0_0 + 2.083333333333329e-02*G3_1_3_0_1 - 2.083333333333329e-02*G3_1_3_1_0 - 2.083333333333329e-02*G3_1_3_2_1 + 4.166666666666659e-02*G3_1_4_0_0 + 4.166666666666659e-02*G3_1_4_0_1 - 4.166666666666659e-02*G3_1_4_1_0 - 4.166666666666658e-02*G3_1_4_2_1 + 2.083333333333330e-02*G3_1_5_0_0 + 2.083333333333329e-02*G3_1_5_0_1 - 2.083333333333330e-02*G3_1_5_1_0 - 2.083333333333329e-02*G3_1_5_2_1 - 2.083333333333329e-02*G4_0_0_0_0 - 2.083333333333329e-02*G4_0_0_0_1 + 2.083333333333329e-02*G4_0_0_1_0 + 2.083333333333329e-02*G4_0_0_2_1 - 4.166666666666659e-02*G4_0_1_0_0 - 4.166666666666659e-02*G4_0_1_0_1 + 4.166666666666659e-02*G4_0_1_1_0 + 4.166666666666658e-02*G4_0_1_2_1 - 2.083333333333330e-02*G4_0_2_0_0 - 2.083333333333329e-02*G4_0_2_0_1 + 2.083333333333330e-02*G4_0_2_1_0 + 2.083333333333329e-02*G4_0_2_2_1 - 2.083333333333329e-02*G4_1_3_0_0 - 2.083333333333329e-02*G4_1_3_0_1 + 2.083333333333329e-02*G4_1_3_1_0 + 2.083333333333329e-02*G4_1_3_2_1 - 4.166666666666659e-02*G4_1_4_0_0 - 4.166666666666659e-02*G4_1_4_0_1 + 4.166666666666659e-02*G4_1_4_1_0 + 4.166666666666658e-02*G4_1_4_2_1 - 2.083333333333330e-02*G4_1_5_0_0 - 2.083333333333329e-02*G4_1_5_0_1 + 2.083333333333330e-02*G4_1_5_1_0 + 2.083333333333329e-02*G4_1_5_2_1 + 1.666666666666665e-01*G5_0_0_0_0_0 + 1.666666666666666e-01*G5_0_0_0_0_1 + 1.666666666666665e-01*G5_0_0_0_0_2 + 1.666666666666665e-01*G5_0_1_0_1_0 + 1.666666666666666e-01*G5_0_1_0_1_1 + 1.666666666666665e-01*G5_0_1_0_1_2 - 1.666666666666665e-01*G6_0_0_0_0_0 - 1.666666666666666e-01*G6_0_0_0_0_1 - 1.666666666666665e-01*G6_0_0_0_0_2 - 1.666666666666665e-01*G6_0_1_0_1_0 - 1.666666666666666e-01*G6_0_1_0_1_1 - 1.666666666666665e-01*G6_0_1_0_1_2 + 2.499999999999999e-01*G7_0_0_0_0_0_0_0_0 + 2.499999999999998e-01*G7_0_0_0_0_0_0_0_1 - 2.499999999999999e-01*G7_0_0_0_0_0_0_1_0 - 2.499999999999998e-01*G7_0_0_0_0_0_0_2_1 + 2.499999999999999e-01*G7_0_0_1_0_0_1_0_0 + 2.499999999999998e-01*G7_0_0_1_0_0_1_0_1 - 2.499999999999999e-01*G7_0_0_1_0_0_1_1_0 - 2.499999999999998e-01*G7_0_0_1_0_0_1_2_1 + 2.499999999999999e-01*G7_1_0_0_1_0_0_0_0 + 2.499999999999998e-01*G7_1_0_0_1_0_0_0_1 - 2.499999999999999e-01*G7_1_0_0_1_0_0_1_0 - 2.499999999999998e-01*G7_1_0_0_1_0_0_2_1 + 2.499999999999999e-01*G7_1_0_1_1_0_1_0_0 + 2.499999999999998e-01*G7_1_0_1_1_0_1_0_1 - 2.499999999999999e-01*G7_1_0_1_1_0_1_1_0 - 2.499999999999998e-01*G7_1_0_1_1_0_1_2_1 - 2.499999999999999e-01*G8_0_0_0_0_0_0_0_0 - 2.499999999999998e-01*G8_0_0_0_0_0_0_0_1 + 2.499999999999999e-01*G8_0_0_0_0_0_0_1_0 + 2.499999999999998e-01*G8_0_0_0_0_0_0_2_1 - 2.499999999999999e-01*G8_0_0_1_0_0_1_0_0 - 2.499999999999998e-01*G8_0_0_1_0_0_1_0_1 + 2.499999999999999e-01*G8_0_0_1_0_0_1_1_0 + 2.499999999999998e-01*G8_0_0_1_0_0_1_2_1 - 2.499999999999999e-01*G8_1_0_0_1_0_0_0_0 - 2.499999999999998e-01*G8_1_0_0_1_0_0_0_1 + 2.499999999999999e-01*G8_1_0_0_1_0_0_1_0 + 2.499999999999998e-01*G8_1_0_0_1_0_0_2_1 - 2.499999999999999e-01*G8_1_0_1_1_0_1_0_0 - 2.499999999999998e-01*G8_1_0_1_1_0_1_0_1 + 2.499999999999999e-01*G8_1_0_1_1_0_1_1_0 + 2.499999999999998e-01*G8_1_0_1_1_0_1_2_1 + 4.999999999999998e-01*G9_0_0_0_0_0_0_0 + 4.999999999999997e-01*G9_0_0_0_0_0_0_1 - 4.999999999999998e-01*G9_0_0_0_0_0_1_0 - 4.999999999999997e-01*G9_0_0_0_0_0_2_1 + 4.999999999999998e-01*G9_0_0_1_0_1_0_0 + 4.999999999999997e-01*G9_0_0_1_0_1_0_1 - 4.999999999999998e-01*G9_0_0_1_0_1_1_0 - 4.999999999999997e-01*G9_0_0_1_0_1_2_1 - 4.999999999999998e-01*G10_0_0_0_0_0_0_0 - 4.999999999999997e-01*G10_0_0_0_0_0_0_1 + 4.999999999999998e-01*G10_0_0_0_0_0_1_0 + 4.999999999999997e-01*G10_0_0_0_0_0_2_1 - 4.999999999999998e-01*G10_0_0_1_0_1_0_0 - 4.999999999999997e-01*G10_0_0_1_0_1_0_1 + 4.999999999999998e-01*G10_0_0_1_0_1_1_0 + 4.999999999999997e-01*G10_0_0_1_0_1_2_1 + 2.499999999999999e-01*G11_0_0_0_0_0_0 + 2.499999999999998e-01*G11_0_0_0_0_1_0 - 2.499999999999999e-01*G11_0_0_0_1_0_0 - 2.499999999999998e-01*G11_0_0_0_2_1_0 + 2.499999999999999e-01*G11_0_0_0_3_0_1 + 2.499999999999998e-01*G11_0_0_0_3_1_1 - 2.499999999999999e-01*G11_0_0_0_4_0_1 - 2.499999999999998e-01*G11_0_0_0_5_1_1;
  block[2] = 4.166666666666657e-02*G0_0 + 4.166666666666659e-02*G0_1 + 8.333333333333316e-02*G0_2 + 1.666666666666665e-01*G1_1_0_0 + 1.666666666666665e-01*G1_1_0_1 + 1.666666666666665e-01*G1_1_0_2 + 2.499999999999998e-01*G2_1_0_0 + 2.499999999999998e-01*G2_1_0_1 - 2.499999999999998e-01*G2_1_1_0 - 2.499999999999998e-01*G2_1_2_1 + 2.083333333333329e-02*G3_0_0_0_0 + 2.083333333333329e-02*G3_0_0_0_1 - 2.083333333333329e-02*G3_0_0_1_0 - 2.083333333333329e-02*G3_0_0_2_1 + 2.083333333333330e-02*G3_0_1_0_0 + 2.083333333333329e-02*G3_0_1_0_1 - 2.083333333333330e-02*G3_0_1_1_0 - 2.083333333333329e-02*G3_0_1_2_1 + 4.166666666666659e-02*G3_0_2_0_0 + 4.166666666666657e-02*G3_0_2_0_1 - 4.166666666666659e-02*G3_0_2_1_0 - 4.166666666666657e-02*G3_0_2_2_1 + 2.083333333333329e-02*G3_1_3_0_0 + 2.083333333333329e-02*G3_1_3_0_1 - 2.083333333333329e-02*G3_1_3_1_0 - 2.083333333333329e-02*G3_1_3_2_1 + 2.083333333333330e-02*G3_1_4_0_0 + 2.083333333333329e-02*G3_1_4_0_1 - 2.083333333333330e-02*G3_1_4_1_0 - 2.083333333333329e-02*G3_1_4_2_1 + 4.166666666666659e-02*G3_1_5_0_0 + 4.166666666666657e-02*G3_1_5_0_1 - 4.166666666666659e-02*G3_1_5_1_0 - 4.166666666666657e-02*G3_1_5_2_1 - 2.083333333333329e-02*G4_0_0_0_0 - 2.083333333333329e-02*G4_0_0_0_1 + 2.083333333333329e-02*G4_0_0_1_0 + 2.083333333333329e-02*G4_0_0_2_1 - 2.083333333333330e-02*G4_0_1_0_0 - 2.083333333333329e-02*G4_0_1_0_1 + 2.083333333333330e-02*G4_0_1_1_0 + 2.083333333333329e-02*G4_0_1_2_1 - 4.166666666666659e-02*G4_0_2_0_0 - 4.166666666666657e-02*G4_0_2_0_1 + 4.166666666666659e-02*G4_0_2_1_0 + 4.166666666666657e-02*G4_0_2_2_1 - 2.083333333333329e-02*G4_1_3_0_0 - 2.083333333333329e-02*G4_1_3_0_1 + 2.083333333333329e-02*G4_1_3_1_0 + 2.083333333333329e-02*G4_1_3_2_1 - 2.083333333333330e-02*G4_1_4_0_0 - 2.083333333333329e-02*G4_1_4_0_1 + 2.083333333333330e-02*G4_1_4_1_0 + 2.083333333333329e-02*G4_1_4_2_1 - 4.166666666666659e-02*G4_1_5_0_0 - 4.166666666666657e-02*G4_1_5_0_1 + 4.166666666666659e-02*G4_1_5_1_0 + 4.166666666666657e-02*G4_1_5_2_1 + 1.666666666666665e-01*G5_0_0_1_0_0 + 1.666666666666665e-01*G5_0_0_1_0_1 + 1.666666666666665e-01*G5_0_0_1_0_2 + 1.666666666666665e-01*G5_0_1_1_1_0 + 1.666666666666665e-01*G5_0_1_1_1_1 + 1.666666666666665e-01*G5_0_1_1_1_2 - 1.666666666666665e-01*G6_0_0_1_0_0 - 1.666666666666665e-01*G6_0_0_1_0_1 - 1.666666666666665e-01*G6_0_0_1_0_2 - 1.666666666666665e-01*G6_0_1_1_1_0 - 1.666666666666665e-01*G6_0_1_1_1_1 - 1.666666666666665e-01*G6_0_1_1_1_2 + 2.499999999999998e-01*G7_0_0_0_0_1_0_0_0 + 2.499999999999998e-01*G7_0_0_0_0_1_0_0_1 - 2.499999999999998e-01*G7_0_0_0_0_1_0_1_0 - 2.499999999999998e-01*G7_0_0_0_0_1_0_2_1 + 2.499999999999998e-01*G7_0_0_1_0_1_1_0_0 + 2.499999999999998e-01*G7_0_0_1_0_1_1_0_1 - 2.499999999999998e-01*G7_0_0_1_0_1_1_1_0 - 2.499999999999998e-01*G7_0_0_1_0_1_1_2_1 + 2.499999999999998e-01*G7_1_0_0_1_1_0_0_0 + 2.499999999999998e-01*G7_1_0_0_1_1_0_0_1 - 2.499999999999998e-01*G7_1_0_0_1_1_0_1_0 - 2.499999999999998e-01*G7_1_0_0_1_1_0_2_1 + 2.499999999999998e-01*G7_1_0_1_1_1_1_0_0 + 2.499999999999998e-01*G7_1_0_1_1_1_1_0_1 - 2.499999999999998e-01*G7_1_0_1_1_1_1_1_0 - 2.499999999999998e-01*G7_1_0_1_1_1_1_2_1 - 2.499999999999998e-01*G8_0_0_0_0_1_0_0_0 - 2.499999999999998e-01*G8_0_0_0_0_1_0_0_1 + 2.499999999999998e-01*G8_0_0_0_0_1_0_1_0 + 2.499999999999998e-01*G8_0_0_0_0_1_0_2_1 - 2.499999999999998e-01*G8_0_0_1_0_1_1_0_0 - 2.499999999999998e-01*G8_0_0_1_0_1_1_0_1 + 2.499999999999998e-01*G8_0_0_1_0_1_1_1_0 + 2.499999999999998e-01*G8_0_0_1_0_1_1_2_1 - 2.499999999999998e-01*G8_1_0_0_1_1_0_0_0 - 2.499999999999998e-01*G8_1_0_0_1_1_0_0_1 + 2.499999999999998e-01*G8_1_0_0_1_1_0_1_0 + 2.499999999999998e-01*G8_1_0_0_1_1_0_2_1 - 2.499999999999998e-01*G8_1_0_1_1_1_1_0_0 - 2.499999999999998e-01*G8_1_0_1_1_1_1_0_1 + 2.499999999999998e-01*G8_1_0_1_1_1_1_1_0 + 2.499999999999998e-01*G8_1_0_1_1_1_1_2_1 + 4.999999999999997e-01*G9_0_0_0_1_0_0_0 + 4.999999999999996e-01*G9_0_0_0_1_0_0_1 - 4.999999999999997e-01*G9_0_0_0_1_0_1_0 - 4.999999999999996e-01*G9_0_0_0_1_0_2_1 + 4.999999999999997e-01*G9_0_0_1_1_1_0_0 + 4.999999999999996e-01*G9_0_0_1_1_1_0_1 - 4.999999999999997e-01*G9_0_0_1_1_1_1_0 - 4.999999999999996e-01*G9_0_0_1_1_1_2_1 - 4.999999999999997e-01*G10_0_0_0_1_0_0_0 - 4.999999999999996e-01*G10_0_0_0_1_0_0_1 + 4.999999999999997e-01*G10_0_0_0_1_0_1_0 + 4.999999999999996e-01*G10_0_0_0_1_0_2_1 - 4.999999999999997e-01*G10_0_0_1_1_1_0_0 - 4.999999999999996e-01*G10_0_0_1_1_1_0_1 + 4.999999999999997e-01*G10_0_0_1_1_1_1_0 + 4.999999999999996e-01*G10_0_0_1_1_1_2_1 + 2.499999999999998e-01*G11_0_1_0_0_0_0 + 2.499999999999998e-01*G11_0_1_0_0_1_0 - 2.499999999999998e-01*G11_0_1_0_1_0_0 - 2.499999999999998e-01*G11_0_1_0_2_1_0 + 2.499999999999998e-01*G11_0_1_0_3_0_1 + 2.499999999999998e-01*G11_0_1_0_3_1_1 - 2.499999999999998e-01*G11_0_1_0_4_0_1 - 2.499999999999998e-01*G11_0_1_0_5_1_1;
  block[3] = 8.333333333333318e-02*G0_3 + 4.166666666666659e-02*G0_4 + 4.166666666666657e-02*G0_5 - 1.666666666666665e-01*G1_0_1_0 - 1.666666666666666e-01*G1_0_1_1 - 1.666666666666665e-01*G1_0_1_2 - 1.666666666666665e-01*G1_1_1_0 - 1.666666666666665e-01*G1_1_1_1 - 1.666666666666665e-01*G1_1_1_2 - 2.499999999999999e-01*G2_0_3_0 - 2.499999999999998e-01*G2_0_3_1 + 2.499999999999999e-01*G2_0_4_0 + 2.499999999999998e-01*G2_0_5_1 - 2.499999999999998e-01*G2_1_3_0 - 2.499999999999998e-01*G2_1_3_1 + 2.499999999999998e-01*G2_1_4_0 + 2.499999999999998e-01*G2_1_5_1 + 4.166666666666659e-02*G3_0_0_3_0 + 4.166666666666659e-02*G3_0_0_3_1 - 4.166666666666659e-02*G3_0_0_4_0 - 4.166666666666659e-02*G3_0_0_5_1 + 2.083333333333329e-02*G3_0_1_3_0 + 2.083333333333329e-02*G3_0_1_3_1 - 2.083333333333329e-02*G3_0_1_4_0 - 2.083333333333329e-02*G3_0_1_5_1 + 2.083333333333329e-02*G3_0_2_3_0 + 2.083333333333329e-02*G3_0_2_3_1 - 2.083333333333329e-02*G3_0_2_4_0 - 2.083333333333329e-02*G3_0_2_5_1 + 4.166666666666659e-02*G3_1_3_3_0 + 4.166666666666659e-02*G3_1_3_3_1 - 4.166666666666659e-02*G3_1_3_4_0 - 4.166666666666659e-02*G3_1_3_5_1 + 2.083333333333329e-02*G3_1_4_3_0 + 2.083333333333329e-02*G3_1_4_3_1 - 2.083333333333329e-02*G3_1_4_4_0 - 2.083333333333329e-02*G3_1_4_5_1 + 2.083333333333329e-02*G3_1_5_3_0 + 2.083333333333329e-02*G3_1_5_3_1 - 2.083333333333329e-02*G3_1_5_4_0 - 2.083333333333329e-02*G3_1_5_5_1 - 4.166666666666659e-02*G4_0_0_3_0 - 4.166666666666659e-02*G4_0_0_3_1 + 4.166666666666659e-02*G4_0_0_4_0 + 4.166666666666659e-02*G4_0_0_5_1 - 2.083333333333329e-02*G4_0_1_3_0 - 2.083333333333329e-02*G4_0_1_3_1 + 2.083333333333329e-02*G4_0_1_4_0 + 2.083333333333329e-02*G4_0_1_5_1 - 2.083333333333329e-02*G4_0_2_3_0 - 2.083333333333329e-02*G4_0_2_3_1 + 2.083333333333329e-02*G4_0_2_4_0 + 2.083333333333329e-02*G4_0_2_5_1 - 4.166666666666659e-02*G4_1_3_3_0 - 4.166666666666659e-02*G4_1_3_3_1 + 4.166666666666659e-02*G4_1_3_4_0 + 4.166666666666659e-02*G4_1_3_5_1 - 2.083333333333329e-02*G4_1_4_3_0 - 2.083333333333329e-02*G4_1_4_3_1 + 2.083333333333329e-02*G4_1_4_4_0 + 2.083333333333329e-02*G4_1_4_5_1 - 2.083333333333329e-02*G4_1_5_3_0 - 2.083333333333329e-02*G4_1_5_3_1 + 2.083333333333329e-02*G4_1_5_4_0 + 2.083333333333329e-02*G4_1_5_5_1 - 1.666666666666665e-01*G5_0_0_0_0_3 - 1.666666666666666e-01*G5_0_0_0_0_4 - 1.666666666666665e-01*G5_0_0_0_0_5 - 1.666666666666665e-01*G5_0_0_1_0_3 - 1.666666666666665e-01*G5_0_0_1_0_4 - 1.666666666666665e-01*G5_0_0_1_0_5 - 1.666666666666665e-01*G5_0_1_0_1_3 - 1.666666666666666e-01*G5_0_1_0_1_4 - 1.666666666666665e-01*G5_0_1_0_1_5 - 1.666666666666665e-01*G5_0_1_1_1_3 - 1.666666666666665e-01*G5_0_1_1_1_4 - 1.666666666666665e-01*G5_0_1_1_1_5 + 1.666666666666665e-01*G6_0_0_0_0_3 + 1.666666666666666e-01*G6_0_0_0_0_4 + 1.666666666666665e-01*G6_0_0_0_0_5 + 1.666666666666665e-01*G6_0_0_1_0_3 + 1.666666666666665e-01*G6_0_0_1_0_4 + 1.666666666666665e-01*G6_0_0_1_0_5 + 1.666666666666665e-01*G6_0_1_0_1_3 + 1.666666666666666e-01*G6_0_1_0_1_4 + 1.666666666666665e-01*G6_0_1_0_1_5 + 1.666666666666665e-01*G6_0_1_1_1_3 + 1.666666666666665e-01*G6_0_1_1_1_4 + 1.666666666666665e-01*G6_0_1_1_1_5 - 2.499999999999999e-01*G7_0_0_0_0_0_0_3_0 - 2.499999999999998e-01*G7_0_0_0_0_0_0_3_1 + 2.499999999999999e-01*G7_0_0_0_0_0_0_4_0 + 2.499999999999998e-01*G7_0_0_0_0_0_0_5_1 - 2.499999999999998e-01*G7_0_0_0_0_1_0_3_0 - 2.499999999999998e-01*G7_0_0_0_0_1_0_3_1 + 2.499999999999998e-01*G7_0_0_0_0_1_0_4_0 + 2.499999999999998e-01*G7_0_0_0_0_1_0_5_1 - 2.499999999999999e-01*G7_0_0_1_0_0_1_3_0 - 2.499999999999998e-01*G7_0_0_1_0_0_1_3_1 + 2.499999999999999e-01*G7_0_0_1_0_0_1_4_0 + 2.499999999999998e-01*G7_0_0_1_0_0_1_5_1 - 2.499999999999998e-01*G7_0_0_1_0_1_1_3_0 - 2.499999999999998e-01*G7_0_0_1_0_1_1_3_1 + 2.499999999999998e-01*G7_0_0_1_0_1_1_4_0 + 2.499999999999998e-01*G7_0_0_1_0_1_1_5_1 - 2.499999999999999e-01*G7_1_0_0_1_0_0_3_0 - 2.499999999999998e-01*G7_1_0_0_1_0_0_3_1 + 2.499999999999999e-01*G7_1_0_0_1_0_0_4_0 + 2.499999999999998e-01*G7_1_0_0_1_0_0_5_1 - 2.499999999999998e-01*G7_1_0_0_1_1_0_3_0 - 2.499999999999998e-01*G7_1_0_0_1_1_0_3_1 + 2.499999999999998e-01*G7_1_0_0_1_1_0_4_0 + 2.499999999999998e-01*G7_1_0_0_1_1_0_5_1 - 2.499999999999999e-01*G7_1_0_1_1_0_1_3_0 - 2.499999999999998e-01*G7_1_0_1_1_0_1_3_1 + 2.499999999999999e-01*G7_1_0_1_1_0_1_4_0 + 2.499999999999998e-01*G7_1_0_1_1_0_1_5_1 - 2.499999999999998e-01*G7_1_0_1_1_1_1_3_0 - 2.499999999999998e-01*G7_1_0_1_1_1_1_3_1 + 2.499999999999998e-01*G7_1_0_1_1_1_1_4_0 + 2.499999999999998e-01*G7_1_0_1_1_1_1_5_1 + 2.499999999999999e-01*G8_0_0_0_0_0_0_3_0 + 2.499999999999998e-01*G8_0_0_0_0_0_0_3_1 - 2.499999999999999e-01*G8_0_0_0_0_0_0_4_0 - 2.499999999999998e-01*G8_0_0_0_0_0_0_5_1 + 2.499999999999998e-01*G8_0_0_0_0_1_0_3_0 + 2.499999999999998e-01*G8_0_0_0_0_1_0_3_1 - 2.499999999999998e-01*G8_0_0_0_0_1_0_4_0 - 2.499999999999998e-01*G8_0_0_0_0_1_0_5_1 + 2.499999999999999e-01*G8_0_0_1_0_0_1_3_0 + 2.499999999999998e-01*G8_0_0_1_0_0_1_3_1 - 2.499999999999999e-01*G8_0_0_1_0_0_1_4_0 - 2.499999999999998e-01*G8_0_0_1_0_0_1_5_1 + 2.499999999999998e-01*G8_0_0_1_0_1_1_3_0 + 2.499999999999998e-01*G8_0_0_1_0_1_1_3_1 - 2.499999999999998e-01*G8_0_0_1_0_1_1_4_0 - 2.499999999999998e-01*G8_0_0_1_0_1_1_5_1 + 2.499999999999999e-01*G8_1_0_0_1_0_0_3_0 + 2.499999999999998e-01*G8_1_0_0_1_0_0_3_1 - 2.499999999999999e-01*G8_1_0_0_1_0_0_4_0 - 2.499999999999998e-01*G8_1_0_0_1_0_0_5_1 + 2.499999999999998e-01*G8_1_0_0_1_1_0_3_0 + 2.499999999999998e-01*G8_1_0_0_1_1_0_3_1 - 2.499999999999998e-01*G8_1_0_0_1_1_0_4_0 - 2.499999999999998e-01*G8_1_0_0_1_1_0_5_1 + 2.499999999999999e-01*G8_1_0_1_1_0_1_3_0 + 2.499999999999998e-01*G8_1_0_1_1_0_1_3_1 - 2.499999999999999e-01*G8_1_0_1_1_0_1_4_0 - 2.499999999999998e-01*G8_1_0_1_1_0_1_5_1 + 2.499999999999998e-01*G8_1_0_1_1_1_1_3_0 + 2.499999999999998e-01*G8_1_0_1_1_1_1_3_1 - 2.499999999999998e-01*G8_1_0_1_1_1_1_4_0 - 2.499999999999998e-01*G8_1_0_1_1_1_1_5_1 - 4.999999999999998e-01*G9_1_0_0_0_0_0_0 - 4.999999999999997e-01*G9_1_0_0_0_0_0_1 + 4.999999999999998e-01*G9_1_0_0_0_0_1_0 + 4.999999999999997e-01*G9_1_0_0_0_0_2_1 - 4.999999999999997e-01*G9_1_0_0_1_0_0_0 - 4.999999999999996e-01*G9_1_0_0_1_0_0_1 + 4.999999999999997e-01*G9_1_0_0_1_0_1_0 + 4.999999999999996e-01*G9_1_0_0_1_0_2_1 - 4.999999999999998e-01*G9_1_0_1_0_1_0_0 - 4.999999999999997e-01*G9_1_0_1_0_1_0_1 + 4.999999999999998e-01*G9_1_0_1_0_1_1_0 + 4.999999999999997e-01*G9_1_0_1_0_1_2_1 - 4.999999999999997e-01*G9_1_0_1_1_1_0_0 - 4.999999999999996e-01*G9_1_0_1_1_1_0_1 + 4.999999999999997e-01*G9_1_0_1_1_1_1_0 + 4.999999999999996e-01*G9_1_0_1_1_1_2_1 + 4.999999999999998e-01*G10_1_0_0_0_0_0_0 + 4.999999999999997e-01*G10_1_0_0_0_0_0_1 - 4.999999999999998e-01*G10_1_0_0_0_0_1_0 - 4.999999999999997e-01*G10_1_0_0_0_0_2_1 + 4.999999999999997e-01*G10_1_0_0_1_0_0_0 + 4.999999999999996e-01*G10_1_0_0_1_0_0_1 - 4.999999999999997e-01*G10_1_0_0_1_0_1_0 - 4.999999999999996e-01*G10_1_0_0_1_0_2_1 + 4.999999999999998e-01*G10_1_0_1_0_1_0_0 + 4.999999999999997e-01*G10_1_0_1_0_1_0_1 - 4.999999999999998e-01*G10_1_0_1_0_1_1_0 - 4.999999999999997e-01*G10_1_0_1_0_1_2_1 + 4.999999999999997e-01*G10_1_0_1_1_1_0_0 + 4.999999999999996e-01*G10_1_0_1_1_1_0_1 - 4.999999999999997e-01*G10_1_0_1_1_1_1_0 - 4.999999999999996e-01*G10_1_0_1_1_1_2_1 - 2.499999999999999e-01*G11_0_0_1_0_0_0 - 2.499999999999998e-01*G11_0_0_1_0_1_0 + 2.499999999999999e-01*G11_0_0_1_1_0_0 + 2.499999999999998e-01*G11_0_0_1_2_1_0 - 2.499999999999999e-01*G11_0_0_1_3_0_1 - 2.499999999999998e-01*G11_0_0_1_3_1_1 + 2.499999999999999e-01*G11_0_0_1_4_0_1 + 2.499999999999998e-01*G11_0_0_1_5_1_1 - 2.499999999999998e-01*G11_0_1_1_0_0_0 - 2.499999999999998e-01*G11_0_1_1_0_1_0 + 2.499999999999998e-01*G11_0_1_1_1_0_0 + 2.499999999999998e-01*G11_0_1_1_2_1_0 - 2.499999999999998e-01*G11_0_1_1_3_0_1 - 2.499999999999998e-01*G11_0_1_1_3_1_1 + 2.499999999999998e-01*G11_0_1_1_4_0_1 + 2.499999999999998e-01*G11_0_1_1_5_1_1;
  block[4] = 4.166666666666659e-02*G0_3 + 8.333333333333318e-02*G0_4 + 4.166666666666659e-02*G0_5 + 1.666666666666665e-01*G1_0_1_0 + 1.666666666666666e-01*G1_0_1_1 + 1.666666666666665e-01*G1_0_1_2 + 2.499999999999999e-01*G2_0_3_0 + 2.499999999999998e-01*G2_0_3_1 - 2.499999999999999e-01*G2_0_4_0 - 2.499999999999998e-01*G2_0_5_1 + 2.083333333333329e-02*G3_0_0_3_0 + 2.083333333333329e-02*G3_0_0_3_1 - 2.083333333333329e-02*G3_0_0_4_0 - 2.083333333333329e-02*G3_0_0_5_1 + 4.166666666666659e-02*G3_0_1_3_0 + 4.166666666666659e-02*G3_0_1_3_1 - 4.166666666666659e-02*G3_0_1_4_0 - 4.166666666666658e-02*G3_0_1_5_1 + 2.083333333333330e-02*G3_0_2_3_0 + 2.083333333333329e-02*G3_0_2_3_1 - 2.083333333333330e-02*G3_0_2_4_0 - 2.083333333333329e-02*G3_0_2_5_1 + 2.083333333333329e-02*G3_1_3_3_0 + 2.083333333333329e-02*G3_1_3_3_1 - 2.083333333333329e-02*G3_1_3_4_0 - 2.083333333333329e-02*G3_1_3_5_1 + 4.166666666666659e-02*G3_1_4_3_0 + 4.166666666666659e-02*G3_1_4_3_1 - 4.166666666666659e-02*G3_1_4_4_0 - 4.166666666666658e-02*G3_1_4_5_1 + 2.083333333333330e-02*G3_1_5_3_0 + 2.083333333333329e-02*G3_1_5_3_1 - 2.083333333333330e-02*G3_1_5_4_0 - 2.083333333333329e-02*G3_1_5_5_1 - 2.083333333333329e-02*G4_0_0_3_0 - 2.083333333333329e-02*G4_0_0_3_1 + 2.083333333333329e-02*G4_0_0_4_0 + 2.083333333333329e-02*G4_0_0_5_1 - 4.166666666666659e-02*G4_0_1_3_0 - 4.166666666666659e-02*G4_0_1_3_1 + 4.166666666666659e-02*G4_0_1_4_0 + 4.166666666666658e-02*G4_0_1_5_1 - 2.083333333333330e-02*G4_0_2_3_0 - 2.083333333333329e-02*G4_0_2_3_1 + 2.083333333333330e-02*G4_0_2_4_0 + 2.083333333333329e-02*G4_0_2_5_1 - 2.083333333333329e-02*G4_1_3_3_0 - 2.083333333333329e-02*G4_1_3_3_1 + 2.083333333333329e-02*G4_1_3_4_0 + 2.083333333333329e-02*G4_1_3_5_1 - 4.166666666666659e-02*G4_1_4_3_0 - 4.166666666666659e-02*G4_1_4_3_1 + 4.166666666666659e-02*G4_1_4_4_0 + 4.166666666666658e-02*G4_1_4_5_1 - 2.083333333333330e-02*G4_1_5_3_0 - 2.083333333333329e-02*G4_1_5_3_1 + 2.083333333333330e-02*G4_1_5_4_0 + 2.083333333333329e-02*G4_1_5_5_1 + 1.666666666666665e-01*G5_0_0_0_0_3 + 1.666666666666666e-01*G5_0_0_0_0_4 + 1.666666666666665e-01*G5_0_0_0_0_5 + 1.666666666666665e-01*G5_0_1_0_1_3 + 1.666666666666666e-01*G5_0_1_0_1_4 + 1.666666666666665e-01*G5_0_1_0_1_5 - 1.666666666666665e-01*G6_0_0_0_0_3 - 1.666666666666666e-01*G6_0_0_0_0_4 - 1.666666666666665e-01*G6_0_0_0_0_5 - 1.666666666666665e-01*G6_0_1_0_1_3 - 1.666666666666666e-01*G6_0_1_0_1_4 - 1.666666666666665e-01*G6_0_1_0_1_5 + 2.499999999999999e-01*G7_0_0_0_0_0_0_3_0 + 2.499999999999998e-01*G7_0_0_0_0_0_0_3_1 - 2.499999999999999e-01*G7_0_0_0_0_0_0_4_0 - 2.499999999999998e-01*G7_0_0_0_0_0_0_5_1 + 2.499999999999999e-01*G7_0_0_1_0_0_1_3_0 + 2.499999999999998e-01*G7_0_0_1_0_0_1_3_1 - 2.499999999999999e-01*G7_0_0_1_0_0_1_4_0 - 2.499999999999998e-01*G7_0_0_1_0_0_1_5_1 + 2.499999999999999e-01*G7_1_0_0_1_0_0_3_0 + 2.499999999999998e-01*G7_1_0_0_1_0_0_3_1 - 2.499999999999999e-01*G7_1_0_0_1_0_0_4_0 - 2.499999999999998e-01*G7_1_0_0_1_0_0_5_1 + 2.499999999999999e-01*G7_1_0_1_1_0_1_3_0 + 2.499999999999998e-01*G7_1_0_1_1_0_1_3_1 - 2.499999999999999e-01*G7_1_0_1_1_0_1_4_0 - 2.499999999999998e-01*G7_1_0_1_1_0_1_5_1 - 2.499999999999999e-01*G8_0_0_0_0_0_0_3_0 - 2.499999999999998e-01*G8_0_0_0_0_0_0_3_1 + 2.499999999999999e-01*G8_0_0_0_0_0_0_4_0 + 2.499999999999998e-01*G8_0_0_0_0_0_0_5_1 - 2.499999999999999e-01*G8_0_0_1_0_0_1_3_0 - 2.499999999999998e-01*G8_0_0_1_0_0_1_3_1 + 2.499999999999999e-01*G8_0_0_1_0_0_1_4_0 + 2.499999999999998e-01*G8_0_0_1_0_0_1_5_1 - 2.499999999999999e-01*G8_1_0_0_1_0_0_3_0 - 2.499999999999998e-01*G8_1_0_0_1_0_0_3_1 + 2.499999999999999e-01*G8_1_0_0_1_0_0_4_0 + 2.499999999999998e-01*G8_1_0_0_1_0_0_5_1 - 2.499999999999999e-01*G8_1_0_1_1_0_1_3_0 - 2.499999999999998e-01*G8_1_0_1_1_0_1_3_1 + 2.499999999999999e-01*G8_1_0_1_1_0_1_4_0 + 2.499999999999998e-01*G8_1_0_1_1_0_1_5_1 + 4.999999999999998e-01*G9_1_0_0_0_0_0_0 + 4.999999999999997e-01*G9_1_0_0_0_0_0_1 - 4.999999999999998e-01*G9_1_0_0_0_0_1_0 - 4.999999999999997e-01*G9_1_0_0_0_0_2_1 + 4.999999999999998e-01*G9_1_0_1_0_1_0_0 + 4.999999999999997e-01*G9_1_0_1_0_1_0_1 - 4.999999999999998e-01*G9_1_0_1_0_1_1_0 - 4.999999999999997e-01*G9_1_0_1_0_1_2_1 - 4.999999999999998e-01*G10_1_0_0_0_0_0_0 - 4.999999999999997e-01*G10_1_0_0_0_0_0_1 + 4.999999999999998e-01*G10_1_0_0_0_0_1_0 + 4.999999999999997e-01*G10_1_0_0_0_0_2_1 - 4.999999999999998e-01*G10_1_0_1_0_1_0_0 - 4.999999999999997e-01*G10_1_0_1_0_1_0_1 + 4.999999999999998e-01*G10_1_0_1_0_1_1_0 + 4.999999999999997e-01*G10_1_0_1_0_1_2_1 + 2.499999999999999e-01*G11_0_0_1_0_0_0 + 2.499999999999998e-01*G11_0_0_1_0_1_0 - 2.499999999999999e-01*G11_0_0_1_1_0_0 - 2.499999999999998e-01*G11_0_0_1_2_1_0 + 2.499999999999999e-01*G11_0_0_1_3_0_1 + 2.499999999999998e-01*G11_0_0_1_3_1_1 - 2.499999999999999e-01*G11_0_0_1_4_0_1 - 2.499999999999998e-01*G11_0_0_1_5_1_1;
  block[5] = 4.166666666666657e-02*G0_3 + 4.166666666666659e-02*G0_4 + 8.333333333333316e-02*G0_5 + 1.666666666666665e-01*G1_1_1_0 + 1.666666666666665e-01*G1_1_1_1 + 1.666666666666665e-01*G1_1_1_2 + 2.499999999999998e-01*G2_1_3_0 + 2.499999999999998e-01*G2_1_3_1 - 2.499999999999998e-01*G2_1_4_0 - 2.499999999999998e-01*G2_1_5_1 + 2.083333333333329e-02*G3_0_0_3_0 + 2.083333333333329e-02*G3_0_0_3_1 - 2.083333333333329e-02*G3_0_0_4_0 - 2.083333333333329e-02*G3_0_0_5_1 + 2.083333333333330e-02*G3_0_1_3_0 + 2.083333333333329e-02*G3_0_1_3_1 - 2.083333333333330e-02*G3_0_1_4_0 - 2.083333333333329e-02*G3_0_1_5_1 + 4.166666666666659e-02*G3_0_2_3_0 + 4.166666666666657e-02*G3_0_2_3_1 - 4.166666666666659e-02*G3_0_2_4_0 - 4.166666666666657e-02*G3_0_2_5_1 + 2.083333333333329e-02*G3_1_3_3_0 + 2.083333333333329e-02*G3_1_3_3_1 - 2.083333333333329e-02*G3_1_3_4_0 - 2.083333333333329e-02*G3_1_3_5_1 + 2.083333333333330e-02*G3_1_4_3_0 + 2.083333333333329e-02*G3_1_4_3_1 - 2.083333333333330e-02*G3_1_4_4_0 - 2.083333333333329e-02*G3_1_4_5_1 + 4.166666666666659e-02*G3_1_5_3_0 + 4.166666666666657e-02*G3_1_5_3_1 - 4.166666666666659e-02*G3_1_5_4_0 - 4.166666666666657e-02*G3_1_5_5_1 - 2.083333333333329e-02*G4_0_0_3_0 - 2.083333333333329e-02*G4_0_0_3_1 + 2.083333333333329e-02*G4_0_0_4_0 + 2.083333333333329e-02*G4_0_0_5_1 - 2.083333333333330e-02*G4_0_1_3_0 - 2.083333333333329e-02*G4_0_1_3_1 + 2.083333333333330e-02*G4_0_1_4_0 + 2.083333333333329e-02*G4_0_1_5_1 - 4.166666666666659e-02*G4_0_2_3_0 - 4.166666666666657e-02*G4_0_2_3_1 + 4.166666666666659e-02*G4_0_2_4_0 + 4.166666666666657e-02*G4_0_2_5_1 - 2.083333333333329e-02*G4_1_3_3_0 - 2.083333333333329e-02*G4_1_3_3_1 + 2.083333333333329e-02*G4_1_3_4_0 + 2.083333333333329e-02*G4_1_3_5_1 - 2.083333333333330e-02*G4_1_4_3_0 - 2.083333333333329e-02*G4_1_4_3_1 + 2.083333333333330e-02*G4_1_4_4_0 + 2.083333333333329e-02*G4_1_4_5_1 - 4.166666666666659e-02*G4_1_5_3_0 - 4.166666666666657e-02*G4_1_5_3_1 + 4.166666666666659e-02*G4_1_5_4_0 + 4.166666666666657e-02*G4_1_5_5_1 + 1.666666666666665e-01*G5_0_0_1_0_3 + 1.666666666666665e-01*G5_0_0_1_0_4 + 1.666666666666665e-01*G5_0_0_1_0_5 + 1.666666666666665e-01*G5_0_1_1_1_3 + 1.666666666666665e-01*G5_0_1_1_1_4 + 1.666666666666665e-01*G5_0_1_1_1_5 - 1.666666666666665e-01*G6_0_0_1_0_3 - 1.666666666666665e-01*G6_0_0_1_0_4 - 1.666666666666665e-01*G6_0_0_1_0_5 - 1.666666666666665e-01*G6_0_1_1_1_3 - 1.666666666666665e-01*G6_0_1_1_1_4 - 1.666666666666665e-01*G6_0_1_1_1_5 + 2.499999999999998e-01*G7_0_0_0_0_1_0_3_0 + 2.499999999999998e-01*G7_0_0_0_0_1_0_3_1 - 2.499999999999998e-01*G7_0_0_0_0_1_0_4_0 - 2.499999999999998e-01*G7_0_0_0_0_1_0_5_1 + 2.499999999999998e-01*G7_0_0_1_0_1_1_3_0 + 2.499999999999998e-01*G7_0_0_1_0_1_1_3_1 - 2.499999999999998e-01*G7_0_0_1_0_1_1_4_0 - 2.499999999999998e-01*G7_0_0_1_0_1_1_5_1 + 2.499999999999998e-01*G7_1_0_0_1_1_0_3_0 + 2.499999999999998e-01*G7_1_0_0_1_1_0_3_1 - 2.499999999999998e-01*G7_1_0_0_1_1_0_4_0 - 2.499999999999998e-01*G7_1_0_0_1_1_0_5_1 + 2.499999999999998e-01*G7_1_0_1_1_1_1_3_0 + 2.499999999999998e-01*G7_1_0_1_1_1_1_3_1 - 2.499999999999998e-01*G7_1_0_1_1_1_1_4_0 - 2.499999999999998e-01*G7_1_0_1_1_1_1_5_1 - 2.499999999999998e-01*G8_0_0_0_0_1_0_3_0 - 2.499999999999998e-01*G8_0_0_0_0_1_0_3_1 + 2.499999999999998e-01*G8_0_0_0_0_1_0_4_0 + 2.499999999999998e-01*G8_0_0_0_0_1_0_5_1 - 2.499999999999998e-01*G8_0_0_1_0_1_1_3_0 - 2.499999999999998e-01*G8_0_0_1_0_1_1_3_1 + 2.499999999999998e-01*G8_0_0_1_0_1_1_4_0 + 2.499999999999998e-01*G8_0_0_1_0_1_1_5_1 - 2.499999999999998e-01*G8_1_0_0_1_1_0_3_0 - 2.499999999999998e-01*G8_1_0_0_1_1_0_3_1 + 2.499999999999998e-01*G8_1_0_0_1_1_0_4_0 + 2.499999999999998e-01*G8_1_0_0_1_1_0_5_1 - 2.499999999999998e-01*G8_1_0_1_1_1_1_3_0 - 2.499999999999998e-01*G8_1_0_1_1_1_1_3_1 + 2.499999999999998e-01*G8_1_0_1_1_1_1_4_0 + 2.499999999999998e-01*G8_1_0_1_1_1_1_5_1 + 4.999999999999997e-01*G9_1_0_0_1_0_0_0 + 4.999999999999996e-01*G9_1_0_0_1_0_0_1 - 4.999999999999997e-01*G9_1_0_0_1_0_1_0 - 4.999999999999996e-01*G9_1_0_0_1_0_2_1 + 4.999999999999997e-01*G9_1_0_1_1_1_0_0 + 4.999999999999996e-01*G9_1_0_1_1_1_0_1 - 4.999999999999997e-01*G9_1_0_1_1_1_1_0 - 4.999999999999996e-01*G9_1_0_1_1_1_2_1 - 4.999999999999997e-01*G10_1_0_0_1_0_0_0 - 4.999999999999996e-01*G10_1_0_0_1_0_0_1 + 4.999999999999997e-01*G10_1_0_0_1_0_1_0 + 4.999999999999996e-01*G10_1_0_0_1_0_2_1 - 4.999999999999997e-01*G10_1_0_1_1_1_0_0 - 4.999999999999996e-01*G10_1_0_1_1_1_0_1 + 4.999999999999997e-01*G10_1_0_1_1_1_1_0 + 4.999999999999996e-01*G10_1_0_1_1_1_2_1 + 2.499999999999998e-01*G11_0_1_1_0_0_0 + 2.499999999999998e-01*G11_0_1_1_0_1_0 - 2.499999999999998e-01*G11_0_1_1_1_0_0 - 2.499999999999998e-01*G11_0_1_1_2_1_0 + 2.499999999999998e-01*G11_0_1_1_3_0_1 + 2.499999999999998e-01*G11_0_1_1_3_1_1 - 2.499999999999998e-01*G11_0_1_1_4_0_1 - 2.499999999999998e-01*G11_0_1_1_5_1_1;
}

// No contribution from the boundary
bool LinearForm::boundary_contribution() const { return false; }

void LinearForm::eval(real block[], const AffineMap& map, unsigned int facet) const {}

} }

#endif
