// Automatically generated by FFC, the FEniCS Form Compiler, version 0.3.3-dev.
// For further information, go to http://www/fenics.org/ffc/.
// Licensed under the GNU GPL Version 2.

#ifndef __NSECONTINUITY2D_H
#define __NSECONTINUITY2D_H

#include <dolfin/Mesh.h>
#include <dolfin/Cell.h>
#include <dolfin/Point.h>
#include <dolfin/AffineMap.h>
#include <dolfin/FiniteElement.h>
#include <dolfin/FiniteElementSpec.h>
#include <dolfin/BilinearForm.h>
#include <dolfin/LinearForm.h>
#include <dolfin/Functional.h>
#include <dolfin/FEM.h>

namespace dolfin { namespace NSEContinuity2D {

/// This class contains the form to be evaluated, including
/// contributions from the interior and boundary of the domain.

class BilinearForm : public dolfin::BilinearForm
{
public:

  class TestElement;

  class TrialElement;

  class FunctionElement_0;

  BilinearForm(Function& w0);
  

  bool interior_contribution() const;

  void eval(real block[], const AffineMap& map) const;

  bool boundary_contribution() const;

  void eval(real block[], const AffineMap& map, unsigned int facet) const;

};

class BilinearForm::TestElement : public dolfin::FiniteElement
{
public:

  TestElement() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~TestElement()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 3;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.connections(0)[0];
    nodes[1] = cell.connections(0)[1];
    nodes[2] = cell.connections(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "triangle", 1);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class BilinearForm::TrialElement : public dolfin::FiniteElement
{
public:

  TrialElement() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~TrialElement()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 3;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.connections(0)[0];
    nodes[1] = cell.connections(0)[1];
    nodes[2] = cell.connections(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "triangle", 1);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class BilinearForm::FunctionElement_0 : public dolfin::FiniteElement
{
public:

  FunctionElement_0() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~FunctionElement_0()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 1;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.index();
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(3.333333333333334e-01, 3.333333333333334e-01);
    components[0] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Discontinuous Lagrange", "triangle", 0);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

BilinearForm::BilinearForm(Function& w0) : dolfin::BilinearForm(1)
{
  // Create finite element for test space
  _test = new TestElement();

  // Create finite element for trial space
  _trial = new TrialElement();

  // Add functions
  initFunction(0, w0, new FunctionElement_0());
}

// Contribution from the interior
bool BilinearForm::interior_contribution() const { return true; }

void BilinearForm::eval(real block[], const AffineMap& map) const
{
  // Compute coefficients
  const real c0_0 = c[0][0];

  // Compute geometry tensors
  const real G0_0_0_0 = map.det*c0_0*map.g00*map.g00 + map.det*c0_0*map.g01*map.g01;
  const real G0_0_0_1 = map.det*c0_0*map.g00*map.g10 + map.det*c0_0*map.g01*map.g11;
  const real G0_0_1_0 = map.det*c0_0*map.g10*map.g00 + map.det*c0_0*map.g11*map.g01;
  const real G0_0_1_1 = map.det*c0_0*map.g10*map.g10 + map.det*c0_0*map.g11*map.g11;

  // Compute element tensor
  block[0] = 4.999999999999998e-01*G0_0_0_0 + 4.999999999999997e-01*G0_0_0_1 + 4.999999999999997e-01*G0_0_1_0 + 4.999999999999996e-01*G0_0_1_1;
  block[1] = -4.999999999999998e-01*G0_0_0_0 - 4.999999999999997e-01*G0_0_1_0;
  block[2] = -4.999999999999997e-01*G0_0_0_1 - 4.999999999999996e-01*G0_0_1_1;
  block[3] = -4.999999999999998e-01*G0_0_0_0 - 4.999999999999997e-01*G0_0_0_1;
  block[4] = 4.999999999999998e-01*G0_0_0_0;
  block[5] = 4.999999999999997e-01*G0_0_0_1;
  block[6] = -4.999999999999997e-01*G0_0_1_0 - 4.999999999999996e-01*G0_0_1_1;
  block[7] = 4.999999999999997e-01*G0_0_1_0;
  block[8] = 4.999999999999996e-01*G0_0_1_1;
}

// No contribution from the boundary
bool BilinearForm::boundary_contribution() const { return false; }

void BilinearForm::eval(real block[], const AffineMap& map, unsigned int facet) const {}

/// This class contains the form to be evaluated, including
/// contributions from the interior and boundary of the domain.

class LinearForm : public dolfin::LinearForm
{
public:

  class TestElement;

  class FunctionElement_0;

  class FunctionElement_1;

  class FunctionElement_2;

  LinearForm(Function& w0, Function& w1, Function& w2);
  

  bool interior_contribution() const;

  void eval(real block[], const AffineMap& map) const;

  bool boundary_contribution() const;

  void eval(real block[], const AffineMap& map, unsigned int facet) const;

};

class LinearForm::TestElement : public dolfin::FiniteElement
{
public:

  TestElement() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~TestElement()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 3;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.connections(0)[0];
    nodes[1] = cell.connections(0)[1];
    nodes[2] = cell.connections(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "triangle", 1);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class LinearForm::FunctionElement_0 : public dolfin::FiniteElement
{
public:

  FunctionElement_0() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 2;

    // Element is simple, don't need to initialize subelements
  }

  ~FunctionElement_0()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 6;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.connections(0)[0];
    nodes[1] = cell.connections(0)[1];
    nodes[2] = cell.connections(0)[2];
    int offset = mesh.numVertices();
    nodes[3] = offset + cell.connections(0)[0];
    nodes[4] = offset + cell.connections(0)[1];
    nodes[5] = offset + cell.connections(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[4] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 1;
    components[4] = 1;
    components[5] = 1;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.numVertices();
    vertex_nodes[1] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Vector Lagrange", "triangle", 1, 2);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class LinearForm::FunctionElement_1 : public dolfin::FiniteElement
{
public:

  FunctionElement_1() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 2;

    // Element is simple, don't need to initialize subelements
  }

  ~FunctionElement_1()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 6;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.connections(0)[0];
    nodes[1] = cell.connections(0)[1];
    nodes[2] = cell.connections(0)[2];
    int offset = mesh.numVertices();
    nodes[3] = offset + cell.connections(0)[0];
    nodes[4] = offset + cell.connections(0)[1];
    nodes[5] = offset + cell.connections(0)[2];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[4] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 1;
    components[4] = 1;
    components[5] = 1;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.numVertices();
    vertex_nodes[1] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Vector Lagrange", "triangle", 1, 2);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class LinearForm::FunctionElement_2 : public dolfin::FiniteElement
{
public:

  FunctionElement_2() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~FunctionElement_2()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 1;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.index();
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(3.333333333333334e-01, 3.333333333333334e-01);
    components[0] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Discontinuous Lagrange", "triangle", 0);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

LinearForm::LinearForm(Function& w0, Function& w1, Function& w2) : dolfin::LinearForm(3)
{
  // Create finite element for test space
  _test = new TestElement();

  // Add functions
  initFunction(0, w0, new FunctionElement_0());
  initFunction(1, w1, new FunctionElement_1());
  initFunction(2, w2, new FunctionElement_2());
}

// Contribution from the interior
bool LinearForm::interior_contribution() const { return true; }

void LinearForm::eval(real block[], const AffineMap& map) const
{
  // Compute coefficients
  const real c0_0 = c[0][0];
  const real c0_1 = c[0][1];
  const real c0_2 = c[0][2];
  const real c0_3 = c[0][3];
  const real c0_4 = c[0][4];
  const real c0_5 = c[0][5];
  const real c1_0 = c[1][0];
  const real c1_1 = c[1][1];
  const real c1_2 = c[1][2];
  const real c1_3 = c[1][3];
  const real c1_4 = c[1][4];
  const real c1_5 = c[1][5];
  const real c2_0 = c[2][0];
  const real c3_0 = 3.333333333333333e-01*c[0][0] + 3.333333333333334e-01*c[0][1] + 3.333333333333333e-01*c[0][2];
  const real c3_1 = 3.333333333333333e-01*c[0][3] + 3.333333333333334e-01*c[0][4] + 3.333333333333333e-01*c[0][5];

  // Compute geometry tensors
  const real G0_0_0_0 = map.det*c2_0*c1_0*map.g00;
  const real G0_0_0_1 = map.det*c2_0*c1_0*map.g10;
  const real G0_0_1_0 = map.det*c2_0*c1_1*map.g00;
  const real G0_0_1_1 = map.det*c2_0*c1_1*map.g10;
  const real G0_0_2_0 = map.det*c2_0*c1_2*map.g00;
  const real G0_0_2_1 = map.det*c2_0*c1_2*map.g10;
  const real G1_0_3_0 = map.det*c2_0*c1_3*map.g01;
  const real G1_0_3_1 = map.det*c2_0*c1_3*map.g11;
  const real G1_0_4_0 = map.det*c2_0*c1_4*map.g01;
  const real G1_0_4_1 = map.det*c2_0*c1_4*map.g11;
  const real G1_0_5_0 = map.det*c2_0*c1_5*map.g01;
  const real G1_0_5_1 = map.det*c2_0*c1_5*map.g11;
  const real G2_0_0_0 = map.det*c0_0*map.g00;
  const real G2_0_1_0 = map.det*c0_0*map.g10;
  const real G2_1_0_0 = map.det*c0_1*map.g00;
  const real G2_2_1_0 = map.det*c0_2*map.g10;
  const real G2_3_0_1 = map.det*c0_3*map.g01;
  const real G2_3_1_1 = map.det*c0_3*map.g11;
  const real G2_4_0_1 = map.det*c0_4*map.g01;
  const real G2_5_1_1 = map.det*c0_5*map.g11;
  const real G3_0_0_0_0_0_0_0 = map.det*c2_0*c3_0*c0_0*map.g00*map.g00;
  const real G3_0_0_0_0_0_0_1 = map.det*c2_0*c3_0*c0_0*map.g00*map.g10;
  const real G3_0_0_0_0_0_1_0 = map.det*c2_0*c3_0*c0_1*map.g00*map.g00;
  const real G3_0_0_0_0_0_2_1 = map.det*c2_0*c3_0*c0_2*map.g00*map.g10;
  const real G3_0_0_0_0_1_0_0 = map.det*c2_0*c3_0*c0_0*map.g10*map.g00;
  const real G3_0_0_0_0_1_0_1 = map.det*c2_0*c3_0*c0_0*map.g10*map.g10;
  const real G3_0_0_0_0_1_1_0 = map.det*c2_0*c3_0*c0_1*map.g10*map.g00;
  const real G3_0_0_0_0_1_2_1 = map.det*c2_0*c3_0*c0_2*map.g10*map.g10;
  const real G3_0_1_0_1_0_0_0 = map.det*c2_0*c3_1*c0_0*map.g00*map.g01;
  const real G3_0_1_0_1_0_0_1 = map.det*c2_0*c3_1*c0_0*map.g00*map.g11;
  const real G3_0_1_0_1_0_1_0 = map.det*c2_0*c3_1*c0_1*map.g00*map.g01;
  const real G3_0_1_0_1_0_2_1 = map.det*c2_0*c3_1*c0_2*map.g00*map.g11;
  const real G3_0_1_0_1_1_0_0 = map.det*c2_0*c3_1*c0_0*map.g10*map.g01;
  const real G3_0_1_0_1_1_0_1 = map.det*c2_0*c3_1*c0_0*map.g10*map.g11;
  const real G3_0_1_0_1_1_1_0 = map.det*c2_0*c3_1*c0_1*map.g10*map.g01;
  const real G3_0_1_0_1_1_2_1 = map.det*c2_0*c3_1*c0_2*map.g10*map.g11;
  const real G3_1_0_0_0_0_3_0 = map.det*c2_0*c3_0*c0_3*map.g01*map.g00;
  const real G3_1_0_0_0_0_3_1 = map.det*c2_0*c3_0*c0_3*map.g01*map.g10;
  const real G3_1_0_0_0_0_4_0 = map.det*c2_0*c3_0*c0_4*map.g01*map.g00;
  const real G3_1_0_0_0_0_5_1 = map.det*c2_0*c3_0*c0_5*map.g01*map.g10;
  const real G3_1_0_0_0_1_3_0 = map.det*c2_0*c3_0*c0_3*map.g11*map.g00;
  const real G3_1_0_0_0_1_3_1 = map.det*c2_0*c3_0*c0_3*map.g11*map.g10;
  const real G3_1_0_0_0_1_4_0 = map.det*c2_0*c3_0*c0_4*map.g11*map.g00;
  const real G3_1_0_0_0_1_5_1 = map.det*c2_0*c3_0*c0_5*map.g11*map.g10;
  const real G3_1_1_0_1_0_3_0 = map.det*c2_0*c3_1*c0_3*map.g01*map.g01;
  const real G3_1_1_0_1_0_3_1 = map.det*c2_0*c3_1*c0_3*map.g01*map.g11;
  const real G3_1_1_0_1_0_4_0 = map.det*c2_0*c3_1*c0_4*map.g01*map.g01;
  const real G3_1_1_0_1_0_5_1 = map.det*c2_0*c3_1*c0_5*map.g01*map.g11;
  const real G3_1_1_0_1_1_3_0 = map.det*c2_0*c3_1*c0_3*map.g11*map.g01;
  const real G3_1_1_0_1_1_3_1 = map.det*c2_0*c3_1*c0_3*map.g11*map.g11;
  const real G3_1_1_0_1_1_4_0 = map.det*c2_0*c3_1*c0_4*map.g11*map.g01;
  const real G3_1_1_0_1_1_5_1 = map.det*c2_0*c3_1*c0_5*map.g11*map.g11;

  // Compute element tensor
  block[0] = -1.666666666666665e-01*G0_0_0_0 - 1.666666666666665e-01*G0_0_0_1 - 1.666666666666666e-01*G0_0_1_0 - 1.666666666666665e-01*G0_0_1_1 - 1.666666666666665e-01*G0_0_2_0 - 1.666666666666665e-01*G0_0_2_1 - 1.666666666666665e-01*G1_0_3_0 - 1.666666666666665e-01*G1_0_3_1 - 1.666666666666666e-01*G1_0_4_0 - 1.666666666666665e-01*G1_0_4_1 - 1.666666666666665e-01*G1_0_5_0 - 1.666666666666665e-01*G1_0_5_1 + 1.666666666666665e-01*G2_0_0_0 + 1.666666666666665e-01*G2_0_1_0 - 1.666666666666665e-01*G2_1_0_0 - 1.666666666666665e-01*G2_2_1_0 + 1.666666666666665e-01*G2_3_0_1 + 1.666666666666665e-01*G2_3_1_1 - 1.666666666666665e-01*G2_4_0_1 - 1.666666666666665e-01*G2_5_1_1 - 4.999999999999998e-01*G3_0_0_0_0_0_0_0 - 4.999999999999997e-01*G3_0_0_0_0_0_0_1 + 4.999999999999998e-01*G3_0_0_0_0_0_1_0 + 4.999999999999997e-01*G3_0_0_0_0_0_2_1 - 4.999999999999997e-01*G3_0_0_0_0_1_0_0 - 4.999999999999996e-01*G3_0_0_0_0_1_0_1 + 4.999999999999997e-01*G3_0_0_0_0_1_1_0 + 4.999999999999996e-01*G3_0_0_0_0_1_2_1 - 4.999999999999998e-01*G3_0_1_0_1_0_0_0 - 4.999999999999997e-01*G3_0_1_0_1_0_0_1 + 4.999999999999998e-01*G3_0_1_0_1_0_1_0 + 4.999999999999997e-01*G3_0_1_0_1_0_2_1 - 4.999999999999997e-01*G3_0_1_0_1_1_0_0 - 4.999999999999996e-01*G3_0_1_0_1_1_0_1 + 4.999999999999997e-01*G3_0_1_0_1_1_1_0 + 4.999999999999996e-01*G3_0_1_0_1_1_2_1 - 4.999999999999998e-01*G3_1_0_0_0_0_3_0 - 4.999999999999997e-01*G3_1_0_0_0_0_3_1 + 4.999999999999998e-01*G3_1_0_0_0_0_4_0 + 4.999999999999997e-01*G3_1_0_0_0_0_5_1 - 4.999999999999997e-01*G3_1_0_0_0_1_3_0 - 4.999999999999996e-01*G3_1_0_0_0_1_3_1 + 4.999999999999997e-01*G3_1_0_0_0_1_4_0 + 4.999999999999996e-01*G3_1_0_0_0_1_5_1 - 4.999999999999998e-01*G3_1_1_0_1_0_3_0 - 4.999999999999997e-01*G3_1_1_0_1_0_3_1 + 4.999999999999998e-01*G3_1_1_0_1_0_4_0 + 4.999999999999997e-01*G3_1_1_0_1_0_5_1 - 4.999999999999997e-01*G3_1_1_0_1_1_3_0 - 4.999999999999996e-01*G3_1_1_0_1_1_3_1 + 4.999999999999997e-01*G3_1_1_0_1_1_4_0 + 4.999999999999996e-01*G3_1_1_0_1_1_5_1;
  block[1] = 1.666666666666665e-01*G0_0_0_0 + 1.666666666666666e-01*G0_0_1_0 + 1.666666666666665e-01*G0_0_2_0 + 1.666666666666665e-01*G1_0_3_0 + 1.666666666666666e-01*G1_0_4_0 + 1.666666666666665e-01*G1_0_5_0 + 1.666666666666666e-01*G2_0_0_0 + 1.666666666666665e-01*G2_0_1_0 - 1.666666666666666e-01*G2_1_0_0 - 1.666666666666665e-01*G2_2_1_0 + 1.666666666666666e-01*G2_3_0_1 + 1.666666666666665e-01*G2_3_1_1 - 1.666666666666666e-01*G2_4_0_1 - 1.666666666666665e-01*G2_5_1_1 + 4.999999999999998e-01*G3_0_0_0_0_0_0_0 + 4.999999999999997e-01*G3_0_0_0_0_0_0_1 - 4.999999999999998e-01*G3_0_0_0_0_0_1_0 - 4.999999999999997e-01*G3_0_0_0_0_0_2_1 + 4.999999999999998e-01*G3_0_1_0_1_0_0_0 + 4.999999999999997e-01*G3_0_1_0_1_0_0_1 - 4.999999999999998e-01*G3_0_1_0_1_0_1_0 - 4.999999999999997e-01*G3_0_1_0_1_0_2_1 + 4.999999999999998e-01*G3_1_0_0_0_0_3_0 + 4.999999999999997e-01*G3_1_0_0_0_0_3_1 - 4.999999999999998e-01*G3_1_0_0_0_0_4_0 - 4.999999999999997e-01*G3_1_0_0_0_0_5_1 + 4.999999999999998e-01*G3_1_1_0_1_0_3_0 + 4.999999999999997e-01*G3_1_1_0_1_0_3_1 - 4.999999999999998e-01*G3_1_1_0_1_0_4_0 - 4.999999999999997e-01*G3_1_1_0_1_0_5_1;
  block[2] = 1.666666666666665e-01*G0_0_0_1 + 1.666666666666665e-01*G0_0_1_1 + 1.666666666666665e-01*G0_0_2_1 + 1.666666666666665e-01*G1_0_3_1 + 1.666666666666665e-01*G1_0_4_1 + 1.666666666666665e-01*G1_0_5_1 + 1.666666666666665e-01*G2_0_0_0 + 1.666666666666665e-01*G2_0_1_0 - 1.666666666666665e-01*G2_1_0_0 - 1.666666666666665e-01*G2_2_1_0 + 1.666666666666665e-01*G2_3_0_1 + 1.666666666666665e-01*G2_3_1_1 - 1.666666666666665e-01*G2_4_0_1 - 1.666666666666665e-01*G2_5_1_1 + 4.999999999999997e-01*G3_0_0_0_0_1_0_0 + 4.999999999999996e-01*G3_0_0_0_0_1_0_1 - 4.999999999999997e-01*G3_0_0_0_0_1_1_0 - 4.999999999999996e-01*G3_0_0_0_0_1_2_1 + 4.999999999999997e-01*G3_0_1_0_1_1_0_0 + 4.999999999999996e-01*G3_0_1_0_1_1_0_1 - 4.999999999999997e-01*G3_0_1_0_1_1_1_0 - 4.999999999999996e-01*G3_0_1_0_1_1_2_1 + 4.999999999999997e-01*G3_1_0_0_0_1_3_0 + 4.999999999999996e-01*G3_1_0_0_0_1_3_1 - 4.999999999999997e-01*G3_1_0_0_0_1_4_0 - 4.999999999999996e-01*G3_1_0_0_0_1_5_1 + 4.999999999999997e-01*G3_1_1_0_1_1_3_0 + 4.999999999999996e-01*G3_1_1_0_1_1_3_1 - 4.999999999999997e-01*G3_1_1_0_1_1_4_0 - 4.999999999999996e-01*G3_1_1_0_1_1_5_1;
}

// No contribution from the boundary
bool LinearForm::boundary_contribution() const { return false; }

void LinearForm::eval(real block[], const AffineMap& map, unsigned int facet) const {}

} }

#endif
