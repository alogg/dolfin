// Automatically generated by FFC, the FEniCS Form Compiler, version 0.3.5.
// For further information, go to http://www/fenics.org/ffc/.
// Licensed under the GNU GPL Version 2.

#ifndef __TANGENT3D_H
#define __TANGENT3D_H

#include <dolfin/Mesh.h>
#include <dolfin/Cell.h>
#include <dolfin/Point.h>
#include <dolfin/AffineMap.h>
#include <dolfin/FiniteElement.h>
#include <dolfin/FiniteElementSpec.h>
#include <dolfin/BilinearForm.h>
#include <dolfin/LinearForm.h>
#include <dolfin/Functional.h>
#include <dolfin/FEM.h>

namespace dolfin { namespace Tangent3D {

/// This class contains the form to be evaluated, including
/// contributions from the interior and boundary of the domain.

class BilinearForm : public dolfin::BilinearForm
{
public:

  class TestElement;

  class TrialElement;

  BilinearForm();
  

  bool interior_contribution() const;

  void eval(real block[], const AffineMap& map) const;

  bool boundary_contribution() const;

  void eval(real block[], const AffineMap& map, unsigned int facet) const;

  bool interior_boundary_contribution() const;

  void eval(real block[], const AffineMap& map0, const AffineMap& map1, unsigned int facet0, unsigned int facet1, unsigned int alignment) const;

};

class BilinearForm::TestElement : public dolfin::FiniteElement
{
public:

  TestElement() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 36;

    // Element is simple, don't need to initialize subelements
  }

  ~TestElement()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 36;
  }

  inline unsigned int shapedim() const
  {
    return 3;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.index();
    int offset = mesh.topology().size(3);
    nodes[1] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[2] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[3] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[4] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[5] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[6] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[7] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[8] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[9] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[10] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[11] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[12] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[13] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[14] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[15] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[16] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[17] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[18] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[19] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[20] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[21] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[22] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[23] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[24] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[25] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[26] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[27] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[28] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[29] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[30] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[31] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[32] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[33] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[34] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[35] = offset + cell.index();
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[1] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[2] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[3] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[4] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[5] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[6] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[7] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[8] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[9] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[10] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[11] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[12] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[13] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[14] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[15] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[16] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[17] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[18] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[19] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[20] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[21] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[22] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[23] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[24] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[25] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[26] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[27] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[28] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[29] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[30] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[31] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[32] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[33] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[34] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[35] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    components[0] = 0;
    components[1] = 1;
    components[2] = 2;
    components[3] = 3;
    components[4] = 4;
    components[5] = 5;
    components[6] = 6;
    components[7] = 7;
    components[8] = 8;
    components[9] = 9;
    components[10] = 10;
    components[11] = 11;
    components[12] = 12;
    components[13] = 13;
    components[14] = 14;
    components[15] = 15;
    components[16] = 16;
    components[17] = 17;
    components[18] = 18;
    components[19] = 19;
    components[20] = 20;
    components[21] = 21;
    components[22] = 22;
    components[23] = 23;
    components[24] = 24;
    components[25] = 25;
    components[26] = 26;
    components[27] = 27;
    components[28] = 28;
    components[29] = 29;
    components[30] = 30;
    components[31] = 31;
    components[32] = 32;
    components[33] = 33;
    components[34] = 34;
    components[35] = 35;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(3);
    vertex_nodes[1] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[2] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[3] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[4] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[5] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[6] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[7] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[8] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[9] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[10] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[11] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[12] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[13] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[14] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[15] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[16] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[17] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[18] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[19] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[20] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[21] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[22] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[23] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[24] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[25] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[26] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[27] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[28] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[29] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[30] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[31] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[32] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[33] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[34] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[35] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Discontinuous vector Lagrange", "tetrahedron", 0, 36);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class BilinearForm::TrialElement : public dolfin::FiniteElement
{
public:

  TrialElement() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 36;

    // Element is simple, don't need to initialize subelements
  }

  ~TrialElement()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 36;
  }

  inline unsigned int shapedim() const
  {
    return 3;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.index();
    int offset = mesh.topology().size(3);
    nodes[1] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[2] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[3] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[4] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[5] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[6] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[7] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[8] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[9] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[10] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[11] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[12] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[13] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[14] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[15] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[16] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[17] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[18] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[19] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[20] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[21] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[22] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[23] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[24] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[25] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[26] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[27] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[28] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[29] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[30] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[31] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[32] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[33] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[34] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[35] = offset + cell.index();
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[1] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[2] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[3] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[4] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[5] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[6] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[7] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[8] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[9] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[10] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[11] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[12] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[13] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[14] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[15] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[16] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[17] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[18] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[19] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[20] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[21] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[22] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[23] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[24] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[25] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[26] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[27] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[28] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[29] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[30] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[31] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[32] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[33] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[34] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[35] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    components[0] = 0;
    components[1] = 1;
    components[2] = 2;
    components[3] = 3;
    components[4] = 4;
    components[5] = 5;
    components[6] = 6;
    components[7] = 7;
    components[8] = 8;
    components[9] = 9;
    components[10] = 10;
    components[11] = 11;
    components[12] = 12;
    components[13] = 13;
    components[14] = 14;
    components[15] = 15;
    components[16] = 16;
    components[17] = 17;
    components[18] = 18;
    components[19] = 19;
    components[20] = 20;
    components[21] = 21;
    components[22] = 22;
    components[23] = 23;
    components[24] = 24;
    components[25] = 25;
    components[26] = 26;
    components[27] = 27;
    components[28] = 28;
    components[29] = 29;
    components[30] = 30;
    components[31] = 31;
    components[32] = 32;
    components[33] = 33;
    components[34] = 34;
    components[35] = 35;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(3);
    vertex_nodes[1] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[2] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[3] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[4] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[5] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[6] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[7] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[8] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[9] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[10] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[11] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[12] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[13] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[14] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[15] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[16] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[17] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[18] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[19] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[20] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[21] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[22] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[23] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[24] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[25] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[26] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[27] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[28] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[29] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[30] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[31] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[32] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[33] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[34] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[35] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Discontinuous vector Lagrange", "tetrahedron", 0, 36);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

BilinearForm::BilinearForm() : dolfin::BilinearForm(0)
{
  // Create finite element for test space
  _test = new TestElement();

  // Create finite element for trial space
  _trial = new TrialElement();
}

// Contribution from the interior
bool BilinearForm::interior_contribution() const { return true; }

void BilinearForm::eval(real block[], const AffineMap& map) const
{
  // Compute geometry tensors
  const real G0_ = map.det;

  // Compute element tensor
  block[0] = 1.666666666666665e-01*G0_;
  block[1] = 0.000000000000000e+00;
  block[2] = 0.000000000000000e+00;
  block[3] = 0.000000000000000e+00;
  block[4] = 0.000000000000000e+00;
  block[5] = 0.000000000000000e+00;
  block[6] = 0.000000000000000e+00;
  block[7] = 0.000000000000000e+00;
  block[8] = 0.000000000000000e+00;
  block[9] = 0.000000000000000e+00;
  block[10] = 0.000000000000000e+00;
  block[11] = 0.000000000000000e+00;
  block[12] = 0.000000000000000e+00;
  block[13] = 0.000000000000000e+00;
  block[14] = 0.000000000000000e+00;
  block[15] = 0.000000000000000e+00;
  block[16] = 0.000000000000000e+00;
  block[17] = 0.000000000000000e+00;
  block[18] = 0.000000000000000e+00;
  block[19] = 0.000000000000000e+00;
  block[20] = 0.000000000000000e+00;
  block[21] = 0.000000000000000e+00;
  block[22] = 0.000000000000000e+00;
  block[23] = 0.000000000000000e+00;
  block[24] = 0.000000000000000e+00;
  block[25] = 0.000000000000000e+00;
  block[26] = 0.000000000000000e+00;
  block[27] = 0.000000000000000e+00;
  block[28] = 0.000000000000000e+00;
  block[29] = 0.000000000000000e+00;
  block[30] = 0.000000000000000e+00;
  block[31] = 0.000000000000000e+00;
  block[32] = 0.000000000000000e+00;
  block[33] = 0.000000000000000e+00;
  block[34] = 0.000000000000000e+00;
  block[35] = 0.000000000000000e+00;
  block[36] = 0.000000000000000e+00;
  block[37] = 1.666666666666665e-01*G0_;
  block[38] = 0.000000000000000e+00;
  block[39] = 0.000000000000000e+00;
  block[40] = 0.000000000000000e+00;
  block[41] = 0.000000000000000e+00;
  block[42] = 0.000000000000000e+00;
  block[43] = 0.000000000000000e+00;
  block[44] = 0.000000000000000e+00;
  block[45] = 0.000000000000000e+00;
  block[46] = 0.000000000000000e+00;
  block[47] = 0.000000000000000e+00;
  block[48] = 0.000000000000000e+00;
  block[49] = 0.000000000000000e+00;
  block[50] = 0.000000000000000e+00;
  block[51] = 0.000000000000000e+00;
  block[52] = 0.000000000000000e+00;
  block[53] = 0.000000000000000e+00;
  block[54] = 0.000000000000000e+00;
  block[55] = 0.000000000000000e+00;
  block[56] = 0.000000000000000e+00;
  block[57] = 0.000000000000000e+00;
  block[58] = 0.000000000000000e+00;
  block[59] = 0.000000000000000e+00;
  block[60] = 0.000000000000000e+00;
  block[61] = 0.000000000000000e+00;
  block[62] = 0.000000000000000e+00;
  block[63] = 0.000000000000000e+00;
  block[64] = 0.000000000000000e+00;
  block[65] = 0.000000000000000e+00;
  block[66] = 0.000000000000000e+00;
  block[67] = 0.000000000000000e+00;
  block[68] = 0.000000000000000e+00;
  block[69] = 0.000000000000000e+00;
  block[70] = 0.000000000000000e+00;
  block[71] = 0.000000000000000e+00;
  block[72] = 0.000000000000000e+00;
  block[73] = 0.000000000000000e+00;
  block[74] = 1.666666666666665e-01*G0_;
  block[75] = 0.000000000000000e+00;
  block[76] = 0.000000000000000e+00;
  block[77] = 0.000000000000000e+00;
  block[78] = 0.000000000000000e+00;
  block[79] = 0.000000000000000e+00;
  block[80] = 0.000000000000000e+00;
  block[81] = 0.000000000000000e+00;
  block[82] = 0.000000000000000e+00;
  block[83] = 0.000000000000000e+00;
  block[84] = 0.000000000000000e+00;
  block[85] = 0.000000000000000e+00;
  block[86] = 0.000000000000000e+00;
  block[87] = 0.000000000000000e+00;
  block[88] = 0.000000000000000e+00;
  block[89] = 0.000000000000000e+00;
  block[90] = 0.000000000000000e+00;
  block[91] = 0.000000000000000e+00;
  block[92] = 0.000000000000000e+00;
  block[93] = 0.000000000000000e+00;
  block[94] = 0.000000000000000e+00;
  block[95] = 0.000000000000000e+00;
  block[96] = 0.000000000000000e+00;
  block[97] = 0.000000000000000e+00;
  block[98] = 0.000000000000000e+00;
  block[99] = 0.000000000000000e+00;
  block[100] = 0.000000000000000e+00;
  block[101] = 0.000000000000000e+00;
  block[102] = 0.000000000000000e+00;
  block[103] = 0.000000000000000e+00;
  block[104] = 0.000000000000000e+00;
  block[105] = 0.000000000000000e+00;
  block[106] = 0.000000000000000e+00;
  block[107] = 0.000000000000000e+00;
  block[108] = 0.000000000000000e+00;
  block[109] = 0.000000000000000e+00;
  block[110] = 0.000000000000000e+00;
  block[111] = 1.666666666666665e-01*G0_;
  block[112] = 0.000000000000000e+00;
  block[113] = 0.000000000000000e+00;
  block[114] = 0.000000000000000e+00;
  block[115] = 0.000000000000000e+00;
  block[116] = 0.000000000000000e+00;
  block[117] = 0.000000000000000e+00;
  block[118] = 0.000000000000000e+00;
  block[119] = 0.000000000000000e+00;
  block[120] = 0.000000000000000e+00;
  block[121] = 0.000000000000000e+00;
  block[122] = 0.000000000000000e+00;
  block[123] = 0.000000000000000e+00;
  block[124] = 0.000000000000000e+00;
  block[125] = 0.000000000000000e+00;
  block[126] = 0.000000000000000e+00;
  block[127] = 0.000000000000000e+00;
  block[128] = 0.000000000000000e+00;
  block[129] = 0.000000000000000e+00;
  block[130] = 0.000000000000000e+00;
  block[131] = 0.000000000000000e+00;
  block[132] = 0.000000000000000e+00;
  block[133] = 0.000000000000000e+00;
  block[134] = 0.000000000000000e+00;
  block[135] = 0.000000000000000e+00;
  block[136] = 0.000000000000000e+00;
  block[137] = 0.000000000000000e+00;
  block[138] = 0.000000000000000e+00;
  block[139] = 0.000000000000000e+00;
  block[140] = 0.000000000000000e+00;
  block[141] = 0.000000000000000e+00;
  block[142] = 0.000000000000000e+00;
  block[143] = 0.000000000000000e+00;
  block[144] = 0.000000000000000e+00;
  block[145] = 0.000000000000000e+00;
  block[146] = 0.000000000000000e+00;
  block[147] = 0.000000000000000e+00;
  block[148] = 1.666666666666665e-01*G0_;
  block[149] = 0.000000000000000e+00;
  block[150] = 0.000000000000000e+00;
  block[151] = 0.000000000000000e+00;
  block[152] = 0.000000000000000e+00;
  block[153] = 0.000000000000000e+00;
  block[154] = 0.000000000000000e+00;
  block[155] = 0.000000000000000e+00;
  block[156] = 0.000000000000000e+00;
  block[157] = 0.000000000000000e+00;
  block[158] = 0.000000000000000e+00;
  block[159] = 0.000000000000000e+00;
  block[160] = 0.000000000000000e+00;
  block[161] = 0.000000000000000e+00;
  block[162] = 0.000000000000000e+00;
  block[163] = 0.000000000000000e+00;
  block[164] = 0.000000000000000e+00;
  block[165] = 0.000000000000000e+00;
  block[166] = 0.000000000000000e+00;
  block[167] = 0.000000000000000e+00;
  block[168] = 0.000000000000000e+00;
  block[169] = 0.000000000000000e+00;
  block[170] = 0.000000000000000e+00;
  block[171] = 0.000000000000000e+00;
  block[172] = 0.000000000000000e+00;
  block[173] = 0.000000000000000e+00;
  block[174] = 0.000000000000000e+00;
  block[175] = 0.000000000000000e+00;
  block[176] = 0.000000000000000e+00;
  block[177] = 0.000000000000000e+00;
  block[178] = 0.000000000000000e+00;
  block[179] = 0.000000000000000e+00;
  block[180] = 0.000000000000000e+00;
  block[181] = 0.000000000000000e+00;
  block[182] = 0.000000000000000e+00;
  block[183] = 0.000000000000000e+00;
  block[184] = 0.000000000000000e+00;
  block[185] = 1.666666666666665e-01*G0_;
  block[186] = 0.000000000000000e+00;
  block[187] = 0.000000000000000e+00;
  block[188] = 0.000000000000000e+00;
  block[189] = 0.000000000000000e+00;
  block[190] = 0.000000000000000e+00;
  block[191] = 0.000000000000000e+00;
  block[192] = 0.000000000000000e+00;
  block[193] = 0.000000000000000e+00;
  block[194] = 0.000000000000000e+00;
  block[195] = 0.000000000000000e+00;
  block[196] = 0.000000000000000e+00;
  block[197] = 0.000000000000000e+00;
  block[198] = 0.000000000000000e+00;
  block[199] = 0.000000000000000e+00;
  block[200] = 0.000000000000000e+00;
  block[201] = 0.000000000000000e+00;
  block[202] = 0.000000000000000e+00;
  block[203] = 0.000000000000000e+00;
  block[204] = 0.000000000000000e+00;
  block[205] = 0.000000000000000e+00;
  block[206] = 0.000000000000000e+00;
  block[207] = 0.000000000000000e+00;
  block[208] = 0.000000000000000e+00;
  block[209] = 0.000000000000000e+00;
  block[210] = 0.000000000000000e+00;
  block[211] = 0.000000000000000e+00;
  block[212] = 0.000000000000000e+00;
  block[213] = 0.000000000000000e+00;
  block[214] = 0.000000000000000e+00;
  block[215] = 0.000000000000000e+00;
  block[216] = 0.000000000000000e+00;
  block[217] = 0.000000000000000e+00;
  block[218] = 0.000000000000000e+00;
  block[219] = 0.000000000000000e+00;
  block[220] = 0.000000000000000e+00;
  block[221] = 0.000000000000000e+00;
  block[222] = 1.666666666666665e-01*G0_;
  block[223] = 0.000000000000000e+00;
  block[224] = 0.000000000000000e+00;
  block[225] = 0.000000000000000e+00;
  block[226] = 0.000000000000000e+00;
  block[227] = 0.000000000000000e+00;
  block[228] = 0.000000000000000e+00;
  block[229] = 0.000000000000000e+00;
  block[230] = 0.000000000000000e+00;
  block[231] = 0.000000000000000e+00;
  block[232] = 0.000000000000000e+00;
  block[233] = 0.000000000000000e+00;
  block[234] = 0.000000000000000e+00;
  block[235] = 0.000000000000000e+00;
  block[236] = 0.000000000000000e+00;
  block[237] = 0.000000000000000e+00;
  block[238] = 0.000000000000000e+00;
  block[239] = 0.000000000000000e+00;
  block[240] = 0.000000000000000e+00;
  block[241] = 0.000000000000000e+00;
  block[242] = 0.000000000000000e+00;
  block[243] = 0.000000000000000e+00;
  block[244] = 0.000000000000000e+00;
  block[245] = 0.000000000000000e+00;
  block[246] = 0.000000000000000e+00;
  block[247] = 0.000000000000000e+00;
  block[248] = 0.000000000000000e+00;
  block[249] = 0.000000000000000e+00;
  block[250] = 0.000000000000000e+00;
  block[251] = 0.000000000000000e+00;
  block[252] = 0.000000000000000e+00;
  block[253] = 0.000000000000000e+00;
  block[254] = 0.000000000000000e+00;
  block[255] = 0.000000000000000e+00;
  block[256] = 0.000000000000000e+00;
  block[257] = 0.000000000000000e+00;
  block[258] = 0.000000000000000e+00;
  block[259] = 1.666666666666665e-01*G0_;
  block[260] = 0.000000000000000e+00;
  block[261] = 0.000000000000000e+00;
  block[262] = 0.000000000000000e+00;
  block[263] = 0.000000000000000e+00;
  block[264] = 0.000000000000000e+00;
  block[265] = 0.000000000000000e+00;
  block[266] = 0.000000000000000e+00;
  block[267] = 0.000000000000000e+00;
  block[268] = 0.000000000000000e+00;
  block[269] = 0.000000000000000e+00;
  block[270] = 0.000000000000000e+00;
  block[271] = 0.000000000000000e+00;
  block[272] = 0.000000000000000e+00;
  block[273] = 0.000000000000000e+00;
  block[274] = 0.000000000000000e+00;
  block[275] = 0.000000000000000e+00;
  block[276] = 0.000000000000000e+00;
  block[277] = 0.000000000000000e+00;
  block[278] = 0.000000000000000e+00;
  block[279] = 0.000000000000000e+00;
  block[280] = 0.000000000000000e+00;
  block[281] = 0.000000000000000e+00;
  block[282] = 0.000000000000000e+00;
  block[283] = 0.000000000000000e+00;
  block[284] = 0.000000000000000e+00;
  block[285] = 0.000000000000000e+00;
  block[286] = 0.000000000000000e+00;
  block[287] = 0.000000000000000e+00;
  block[288] = 0.000000000000000e+00;
  block[289] = 0.000000000000000e+00;
  block[290] = 0.000000000000000e+00;
  block[291] = 0.000000000000000e+00;
  block[292] = 0.000000000000000e+00;
  block[293] = 0.000000000000000e+00;
  block[294] = 0.000000000000000e+00;
  block[295] = 0.000000000000000e+00;
  block[296] = 1.666666666666665e-01*G0_;
  block[297] = 0.000000000000000e+00;
  block[298] = 0.000000000000000e+00;
  block[299] = 0.000000000000000e+00;
  block[300] = 0.000000000000000e+00;
  block[301] = 0.000000000000000e+00;
  block[302] = 0.000000000000000e+00;
  block[303] = 0.000000000000000e+00;
  block[304] = 0.000000000000000e+00;
  block[305] = 0.000000000000000e+00;
  block[306] = 0.000000000000000e+00;
  block[307] = 0.000000000000000e+00;
  block[308] = 0.000000000000000e+00;
  block[309] = 0.000000000000000e+00;
  block[310] = 0.000000000000000e+00;
  block[311] = 0.000000000000000e+00;
  block[312] = 0.000000000000000e+00;
  block[313] = 0.000000000000000e+00;
  block[314] = 0.000000000000000e+00;
  block[315] = 0.000000000000000e+00;
  block[316] = 0.000000000000000e+00;
  block[317] = 0.000000000000000e+00;
  block[318] = 0.000000000000000e+00;
  block[319] = 0.000000000000000e+00;
  block[320] = 0.000000000000000e+00;
  block[321] = 0.000000000000000e+00;
  block[322] = 0.000000000000000e+00;
  block[323] = 0.000000000000000e+00;
  block[324] = 0.000000000000000e+00;
  block[325] = 0.000000000000000e+00;
  block[326] = 0.000000000000000e+00;
  block[327] = 0.000000000000000e+00;
  block[328] = 0.000000000000000e+00;
  block[329] = 0.000000000000000e+00;
  block[330] = 0.000000000000000e+00;
  block[331] = 0.000000000000000e+00;
  block[332] = 0.000000000000000e+00;
  block[333] = 1.666666666666665e-01*G0_;
  block[334] = 0.000000000000000e+00;
  block[335] = 0.000000000000000e+00;
  block[336] = 0.000000000000000e+00;
  block[337] = 0.000000000000000e+00;
  block[338] = 0.000000000000000e+00;
  block[339] = 0.000000000000000e+00;
  block[340] = 0.000000000000000e+00;
  block[341] = 0.000000000000000e+00;
  block[342] = 0.000000000000000e+00;
  block[343] = 0.000000000000000e+00;
  block[344] = 0.000000000000000e+00;
  block[345] = 0.000000000000000e+00;
  block[346] = 0.000000000000000e+00;
  block[347] = 0.000000000000000e+00;
  block[348] = 0.000000000000000e+00;
  block[349] = 0.000000000000000e+00;
  block[350] = 0.000000000000000e+00;
  block[351] = 0.000000000000000e+00;
  block[352] = 0.000000000000000e+00;
  block[353] = 0.000000000000000e+00;
  block[354] = 0.000000000000000e+00;
  block[355] = 0.000000000000000e+00;
  block[356] = 0.000000000000000e+00;
  block[357] = 0.000000000000000e+00;
  block[358] = 0.000000000000000e+00;
  block[359] = 0.000000000000000e+00;
  block[360] = 0.000000000000000e+00;
  block[361] = 0.000000000000000e+00;
  block[362] = 0.000000000000000e+00;
  block[363] = 0.000000000000000e+00;
  block[364] = 0.000000000000000e+00;
  block[365] = 0.000000000000000e+00;
  block[366] = 0.000000000000000e+00;
  block[367] = 0.000000000000000e+00;
  block[368] = 0.000000000000000e+00;
  block[369] = 0.000000000000000e+00;
  block[370] = 1.666666666666665e-01*G0_;
  block[371] = 0.000000000000000e+00;
  block[372] = 0.000000000000000e+00;
  block[373] = 0.000000000000000e+00;
  block[374] = 0.000000000000000e+00;
  block[375] = 0.000000000000000e+00;
  block[376] = 0.000000000000000e+00;
  block[377] = 0.000000000000000e+00;
  block[378] = 0.000000000000000e+00;
  block[379] = 0.000000000000000e+00;
  block[380] = 0.000000000000000e+00;
  block[381] = 0.000000000000000e+00;
  block[382] = 0.000000000000000e+00;
  block[383] = 0.000000000000000e+00;
  block[384] = 0.000000000000000e+00;
  block[385] = 0.000000000000000e+00;
  block[386] = 0.000000000000000e+00;
  block[387] = 0.000000000000000e+00;
  block[388] = 0.000000000000000e+00;
  block[389] = 0.000000000000000e+00;
  block[390] = 0.000000000000000e+00;
  block[391] = 0.000000000000000e+00;
  block[392] = 0.000000000000000e+00;
  block[393] = 0.000000000000000e+00;
  block[394] = 0.000000000000000e+00;
  block[395] = 0.000000000000000e+00;
  block[396] = 0.000000000000000e+00;
  block[397] = 0.000000000000000e+00;
  block[398] = 0.000000000000000e+00;
  block[399] = 0.000000000000000e+00;
  block[400] = 0.000000000000000e+00;
  block[401] = 0.000000000000000e+00;
  block[402] = 0.000000000000000e+00;
  block[403] = 0.000000000000000e+00;
  block[404] = 0.000000000000000e+00;
  block[405] = 0.000000000000000e+00;
  block[406] = 0.000000000000000e+00;
  block[407] = 1.666666666666665e-01*G0_;
  block[408] = 0.000000000000000e+00;
  block[409] = 0.000000000000000e+00;
  block[410] = 0.000000000000000e+00;
  block[411] = 0.000000000000000e+00;
  block[412] = 0.000000000000000e+00;
  block[413] = 0.000000000000000e+00;
  block[414] = 0.000000000000000e+00;
  block[415] = 0.000000000000000e+00;
  block[416] = 0.000000000000000e+00;
  block[417] = 0.000000000000000e+00;
  block[418] = 0.000000000000000e+00;
  block[419] = 0.000000000000000e+00;
  block[420] = 0.000000000000000e+00;
  block[421] = 0.000000000000000e+00;
  block[422] = 0.000000000000000e+00;
  block[423] = 0.000000000000000e+00;
  block[424] = 0.000000000000000e+00;
  block[425] = 0.000000000000000e+00;
  block[426] = 0.000000000000000e+00;
  block[427] = 0.000000000000000e+00;
  block[428] = 0.000000000000000e+00;
  block[429] = 0.000000000000000e+00;
  block[430] = 0.000000000000000e+00;
  block[431] = 0.000000000000000e+00;
  block[432] = 0.000000000000000e+00;
  block[433] = 0.000000000000000e+00;
  block[434] = 0.000000000000000e+00;
  block[435] = 0.000000000000000e+00;
  block[436] = 0.000000000000000e+00;
  block[437] = 0.000000000000000e+00;
  block[438] = 0.000000000000000e+00;
  block[439] = 0.000000000000000e+00;
  block[440] = 0.000000000000000e+00;
  block[441] = 0.000000000000000e+00;
  block[442] = 0.000000000000000e+00;
  block[443] = 0.000000000000000e+00;
  block[444] = 1.666666666666665e-01*G0_;
  block[445] = 0.000000000000000e+00;
  block[446] = 0.000000000000000e+00;
  block[447] = 0.000000000000000e+00;
  block[448] = 0.000000000000000e+00;
  block[449] = 0.000000000000000e+00;
  block[450] = 0.000000000000000e+00;
  block[451] = 0.000000000000000e+00;
  block[452] = 0.000000000000000e+00;
  block[453] = 0.000000000000000e+00;
  block[454] = 0.000000000000000e+00;
  block[455] = 0.000000000000000e+00;
  block[456] = 0.000000000000000e+00;
  block[457] = 0.000000000000000e+00;
  block[458] = 0.000000000000000e+00;
  block[459] = 0.000000000000000e+00;
  block[460] = 0.000000000000000e+00;
  block[461] = 0.000000000000000e+00;
  block[462] = 0.000000000000000e+00;
  block[463] = 0.000000000000000e+00;
  block[464] = 0.000000000000000e+00;
  block[465] = 0.000000000000000e+00;
  block[466] = 0.000000000000000e+00;
  block[467] = 0.000000000000000e+00;
  block[468] = 0.000000000000000e+00;
  block[469] = 0.000000000000000e+00;
  block[470] = 0.000000000000000e+00;
  block[471] = 0.000000000000000e+00;
  block[472] = 0.000000000000000e+00;
  block[473] = 0.000000000000000e+00;
  block[474] = 0.000000000000000e+00;
  block[475] = 0.000000000000000e+00;
  block[476] = 0.000000000000000e+00;
  block[477] = 0.000000000000000e+00;
  block[478] = 0.000000000000000e+00;
  block[479] = 0.000000000000000e+00;
  block[480] = 0.000000000000000e+00;
  block[481] = 1.666666666666665e-01*G0_;
  block[482] = 0.000000000000000e+00;
  block[483] = 0.000000000000000e+00;
  block[484] = 0.000000000000000e+00;
  block[485] = 0.000000000000000e+00;
  block[486] = 0.000000000000000e+00;
  block[487] = 0.000000000000000e+00;
  block[488] = 0.000000000000000e+00;
  block[489] = 0.000000000000000e+00;
  block[490] = 0.000000000000000e+00;
  block[491] = 0.000000000000000e+00;
  block[492] = 0.000000000000000e+00;
  block[493] = 0.000000000000000e+00;
  block[494] = 0.000000000000000e+00;
  block[495] = 0.000000000000000e+00;
  block[496] = 0.000000000000000e+00;
  block[497] = 0.000000000000000e+00;
  block[498] = 0.000000000000000e+00;
  block[499] = 0.000000000000000e+00;
  block[500] = 0.000000000000000e+00;
  block[501] = 0.000000000000000e+00;
  block[502] = 0.000000000000000e+00;
  block[503] = 0.000000000000000e+00;
  block[504] = 0.000000000000000e+00;
  block[505] = 0.000000000000000e+00;
  block[506] = 0.000000000000000e+00;
  block[507] = 0.000000000000000e+00;
  block[508] = 0.000000000000000e+00;
  block[509] = 0.000000000000000e+00;
  block[510] = 0.000000000000000e+00;
  block[511] = 0.000000000000000e+00;
  block[512] = 0.000000000000000e+00;
  block[513] = 0.000000000000000e+00;
  block[514] = 0.000000000000000e+00;
  block[515] = 0.000000000000000e+00;
  block[516] = 0.000000000000000e+00;
  block[517] = 0.000000000000000e+00;
  block[518] = 1.666666666666665e-01*G0_;
  block[519] = 0.000000000000000e+00;
  block[520] = 0.000000000000000e+00;
  block[521] = 0.000000000000000e+00;
  block[522] = 0.000000000000000e+00;
  block[523] = 0.000000000000000e+00;
  block[524] = 0.000000000000000e+00;
  block[525] = 0.000000000000000e+00;
  block[526] = 0.000000000000000e+00;
  block[527] = 0.000000000000000e+00;
  block[528] = 0.000000000000000e+00;
  block[529] = 0.000000000000000e+00;
  block[530] = 0.000000000000000e+00;
  block[531] = 0.000000000000000e+00;
  block[532] = 0.000000000000000e+00;
  block[533] = 0.000000000000000e+00;
  block[534] = 0.000000000000000e+00;
  block[535] = 0.000000000000000e+00;
  block[536] = 0.000000000000000e+00;
  block[537] = 0.000000000000000e+00;
  block[538] = 0.000000000000000e+00;
  block[539] = 0.000000000000000e+00;
  block[540] = 0.000000000000000e+00;
  block[541] = 0.000000000000000e+00;
  block[542] = 0.000000000000000e+00;
  block[543] = 0.000000000000000e+00;
  block[544] = 0.000000000000000e+00;
  block[545] = 0.000000000000000e+00;
  block[546] = 0.000000000000000e+00;
  block[547] = 0.000000000000000e+00;
  block[548] = 0.000000000000000e+00;
  block[549] = 0.000000000000000e+00;
  block[550] = 0.000000000000000e+00;
  block[551] = 0.000000000000000e+00;
  block[552] = 0.000000000000000e+00;
  block[553] = 0.000000000000000e+00;
  block[554] = 0.000000000000000e+00;
  block[555] = 1.666666666666665e-01*G0_;
  block[556] = 0.000000000000000e+00;
  block[557] = 0.000000000000000e+00;
  block[558] = 0.000000000000000e+00;
  block[559] = 0.000000000000000e+00;
  block[560] = 0.000000000000000e+00;
  block[561] = 0.000000000000000e+00;
  block[562] = 0.000000000000000e+00;
  block[563] = 0.000000000000000e+00;
  block[564] = 0.000000000000000e+00;
  block[565] = 0.000000000000000e+00;
  block[566] = 0.000000000000000e+00;
  block[567] = 0.000000000000000e+00;
  block[568] = 0.000000000000000e+00;
  block[569] = 0.000000000000000e+00;
  block[570] = 0.000000000000000e+00;
  block[571] = 0.000000000000000e+00;
  block[572] = 0.000000000000000e+00;
  block[573] = 0.000000000000000e+00;
  block[574] = 0.000000000000000e+00;
  block[575] = 0.000000000000000e+00;
  block[576] = 0.000000000000000e+00;
  block[577] = 0.000000000000000e+00;
  block[578] = 0.000000000000000e+00;
  block[579] = 0.000000000000000e+00;
  block[580] = 0.000000000000000e+00;
  block[581] = 0.000000000000000e+00;
  block[582] = 0.000000000000000e+00;
  block[583] = 0.000000000000000e+00;
  block[584] = 0.000000000000000e+00;
  block[585] = 0.000000000000000e+00;
  block[586] = 0.000000000000000e+00;
  block[587] = 0.000000000000000e+00;
  block[588] = 0.000000000000000e+00;
  block[589] = 0.000000000000000e+00;
  block[590] = 0.000000000000000e+00;
  block[591] = 0.000000000000000e+00;
  block[592] = 1.666666666666665e-01*G0_;
  block[593] = 0.000000000000000e+00;
  block[594] = 0.000000000000000e+00;
  block[595] = 0.000000000000000e+00;
  block[596] = 0.000000000000000e+00;
  block[597] = 0.000000000000000e+00;
  block[598] = 0.000000000000000e+00;
  block[599] = 0.000000000000000e+00;
  block[600] = 0.000000000000000e+00;
  block[601] = 0.000000000000000e+00;
  block[602] = 0.000000000000000e+00;
  block[603] = 0.000000000000000e+00;
  block[604] = 0.000000000000000e+00;
  block[605] = 0.000000000000000e+00;
  block[606] = 0.000000000000000e+00;
  block[607] = 0.000000000000000e+00;
  block[608] = 0.000000000000000e+00;
  block[609] = 0.000000000000000e+00;
  block[610] = 0.000000000000000e+00;
  block[611] = 0.000000000000000e+00;
  block[612] = 0.000000000000000e+00;
  block[613] = 0.000000000000000e+00;
  block[614] = 0.000000000000000e+00;
  block[615] = 0.000000000000000e+00;
  block[616] = 0.000000000000000e+00;
  block[617] = 0.000000000000000e+00;
  block[618] = 0.000000000000000e+00;
  block[619] = 0.000000000000000e+00;
  block[620] = 0.000000000000000e+00;
  block[621] = 0.000000000000000e+00;
  block[622] = 0.000000000000000e+00;
  block[623] = 0.000000000000000e+00;
  block[624] = 0.000000000000000e+00;
  block[625] = 0.000000000000000e+00;
  block[626] = 0.000000000000000e+00;
  block[627] = 0.000000000000000e+00;
  block[628] = 0.000000000000000e+00;
  block[629] = 1.666666666666665e-01*G0_;
  block[630] = 0.000000000000000e+00;
  block[631] = 0.000000000000000e+00;
  block[632] = 0.000000000000000e+00;
  block[633] = 0.000000000000000e+00;
  block[634] = 0.000000000000000e+00;
  block[635] = 0.000000000000000e+00;
  block[636] = 0.000000000000000e+00;
  block[637] = 0.000000000000000e+00;
  block[638] = 0.000000000000000e+00;
  block[639] = 0.000000000000000e+00;
  block[640] = 0.000000000000000e+00;
  block[641] = 0.000000000000000e+00;
  block[642] = 0.000000000000000e+00;
  block[643] = 0.000000000000000e+00;
  block[644] = 0.000000000000000e+00;
  block[645] = 0.000000000000000e+00;
  block[646] = 0.000000000000000e+00;
  block[647] = 0.000000000000000e+00;
  block[648] = 0.000000000000000e+00;
  block[649] = 0.000000000000000e+00;
  block[650] = 0.000000000000000e+00;
  block[651] = 0.000000000000000e+00;
  block[652] = 0.000000000000000e+00;
  block[653] = 0.000000000000000e+00;
  block[654] = 0.000000000000000e+00;
  block[655] = 0.000000000000000e+00;
  block[656] = 0.000000000000000e+00;
  block[657] = 0.000000000000000e+00;
  block[658] = 0.000000000000000e+00;
  block[659] = 0.000000000000000e+00;
  block[660] = 0.000000000000000e+00;
  block[661] = 0.000000000000000e+00;
  block[662] = 0.000000000000000e+00;
  block[663] = 0.000000000000000e+00;
  block[664] = 0.000000000000000e+00;
  block[665] = 0.000000000000000e+00;
  block[666] = 1.666666666666665e-01*G0_;
  block[667] = 0.000000000000000e+00;
  block[668] = 0.000000000000000e+00;
  block[669] = 0.000000000000000e+00;
  block[670] = 0.000000000000000e+00;
  block[671] = 0.000000000000000e+00;
  block[672] = 0.000000000000000e+00;
  block[673] = 0.000000000000000e+00;
  block[674] = 0.000000000000000e+00;
  block[675] = 0.000000000000000e+00;
  block[676] = 0.000000000000000e+00;
  block[677] = 0.000000000000000e+00;
  block[678] = 0.000000000000000e+00;
  block[679] = 0.000000000000000e+00;
  block[680] = 0.000000000000000e+00;
  block[681] = 0.000000000000000e+00;
  block[682] = 0.000000000000000e+00;
  block[683] = 0.000000000000000e+00;
  block[684] = 0.000000000000000e+00;
  block[685] = 0.000000000000000e+00;
  block[686] = 0.000000000000000e+00;
  block[687] = 0.000000000000000e+00;
  block[688] = 0.000000000000000e+00;
  block[689] = 0.000000000000000e+00;
  block[690] = 0.000000000000000e+00;
  block[691] = 0.000000000000000e+00;
  block[692] = 0.000000000000000e+00;
  block[693] = 0.000000000000000e+00;
  block[694] = 0.000000000000000e+00;
  block[695] = 0.000000000000000e+00;
  block[696] = 0.000000000000000e+00;
  block[697] = 0.000000000000000e+00;
  block[698] = 0.000000000000000e+00;
  block[699] = 0.000000000000000e+00;
  block[700] = 0.000000000000000e+00;
  block[701] = 0.000000000000000e+00;
  block[702] = 0.000000000000000e+00;
  block[703] = 1.666666666666665e-01*G0_;
  block[704] = 0.000000000000000e+00;
  block[705] = 0.000000000000000e+00;
  block[706] = 0.000000000000000e+00;
  block[707] = 0.000000000000000e+00;
  block[708] = 0.000000000000000e+00;
  block[709] = 0.000000000000000e+00;
  block[710] = 0.000000000000000e+00;
  block[711] = 0.000000000000000e+00;
  block[712] = 0.000000000000000e+00;
  block[713] = 0.000000000000000e+00;
  block[714] = 0.000000000000000e+00;
  block[715] = 0.000000000000000e+00;
  block[716] = 0.000000000000000e+00;
  block[717] = 0.000000000000000e+00;
  block[718] = 0.000000000000000e+00;
  block[719] = 0.000000000000000e+00;
  block[720] = 0.000000000000000e+00;
  block[721] = 0.000000000000000e+00;
  block[722] = 0.000000000000000e+00;
  block[723] = 0.000000000000000e+00;
  block[724] = 0.000000000000000e+00;
  block[725] = 0.000000000000000e+00;
  block[726] = 0.000000000000000e+00;
  block[727] = 0.000000000000000e+00;
  block[728] = 0.000000000000000e+00;
  block[729] = 0.000000000000000e+00;
  block[730] = 0.000000000000000e+00;
  block[731] = 0.000000000000000e+00;
  block[732] = 0.000000000000000e+00;
  block[733] = 0.000000000000000e+00;
  block[734] = 0.000000000000000e+00;
  block[735] = 0.000000000000000e+00;
  block[736] = 0.000000000000000e+00;
  block[737] = 0.000000000000000e+00;
  block[738] = 0.000000000000000e+00;
  block[739] = 0.000000000000000e+00;
  block[740] = 1.666666666666665e-01*G0_;
  block[741] = 0.000000000000000e+00;
  block[742] = 0.000000000000000e+00;
  block[743] = 0.000000000000000e+00;
  block[744] = 0.000000000000000e+00;
  block[745] = 0.000000000000000e+00;
  block[746] = 0.000000000000000e+00;
  block[747] = 0.000000000000000e+00;
  block[748] = 0.000000000000000e+00;
  block[749] = 0.000000000000000e+00;
  block[750] = 0.000000000000000e+00;
  block[751] = 0.000000000000000e+00;
  block[752] = 0.000000000000000e+00;
  block[753] = 0.000000000000000e+00;
  block[754] = 0.000000000000000e+00;
  block[755] = 0.000000000000000e+00;
  block[756] = 0.000000000000000e+00;
  block[757] = 0.000000000000000e+00;
  block[758] = 0.000000000000000e+00;
  block[759] = 0.000000000000000e+00;
  block[760] = 0.000000000000000e+00;
  block[761] = 0.000000000000000e+00;
  block[762] = 0.000000000000000e+00;
  block[763] = 0.000000000000000e+00;
  block[764] = 0.000000000000000e+00;
  block[765] = 0.000000000000000e+00;
  block[766] = 0.000000000000000e+00;
  block[767] = 0.000000000000000e+00;
  block[768] = 0.000000000000000e+00;
  block[769] = 0.000000000000000e+00;
  block[770] = 0.000000000000000e+00;
  block[771] = 0.000000000000000e+00;
  block[772] = 0.000000000000000e+00;
  block[773] = 0.000000000000000e+00;
  block[774] = 0.000000000000000e+00;
  block[775] = 0.000000000000000e+00;
  block[776] = 0.000000000000000e+00;
  block[777] = 1.666666666666665e-01*G0_;
  block[778] = 0.000000000000000e+00;
  block[779] = 0.000000000000000e+00;
  block[780] = 0.000000000000000e+00;
  block[781] = 0.000000000000000e+00;
  block[782] = 0.000000000000000e+00;
  block[783] = 0.000000000000000e+00;
  block[784] = 0.000000000000000e+00;
  block[785] = 0.000000000000000e+00;
  block[786] = 0.000000000000000e+00;
  block[787] = 0.000000000000000e+00;
  block[788] = 0.000000000000000e+00;
  block[789] = 0.000000000000000e+00;
  block[790] = 0.000000000000000e+00;
  block[791] = 0.000000000000000e+00;
  block[792] = 0.000000000000000e+00;
  block[793] = 0.000000000000000e+00;
  block[794] = 0.000000000000000e+00;
  block[795] = 0.000000000000000e+00;
  block[796] = 0.000000000000000e+00;
  block[797] = 0.000000000000000e+00;
  block[798] = 0.000000000000000e+00;
  block[799] = 0.000000000000000e+00;
  block[800] = 0.000000000000000e+00;
  block[801] = 0.000000000000000e+00;
  block[802] = 0.000000000000000e+00;
  block[803] = 0.000000000000000e+00;
  block[804] = 0.000000000000000e+00;
  block[805] = 0.000000000000000e+00;
  block[806] = 0.000000000000000e+00;
  block[807] = 0.000000000000000e+00;
  block[808] = 0.000000000000000e+00;
  block[809] = 0.000000000000000e+00;
  block[810] = 0.000000000000000e+00;
  block[811] = 0.000000000000000e+00;
  block[812] = 0.000000000000000e+00;
  block[813] = 0.000000000000000e+00;
  block[814] = 1.666666666666665e-01*G0_;
  block[815] = 0.000000000000000e+00;
  block[816] = 0.000000000000000e+00;
  block[817] = 0.000000000000000e+00;
  block[818] = 0.000000000000000e+00;
  block[819] = 0.000000000000000e+00;
  block[820] = 0.000000000000000e+00;
  block[821] = 0.000000000000000e+00;
  block[822] = 0.000000000000000e+00;
  block[823] = 0.000000000000000e+00;
  block[824] = 0.000000000000000e+00;
  block[825] = 0.000000000000000e+00;
  block[826] = 0.000000000000000e+00;
  block[827] = 0.000000000000000e+00;
  block[828] = 0.000000000000000e+00;
  block[829] = 0.000000000000000e+00;
  block[830] = 0.000000000000000e+00;
  block[831] = 0.000000000000000e+00;
  block[832] = 0.000000000000000e+00;
  block[833] = 0.000000000000000e+00;
  block[834] = 0.000000000000000e+00;
  block[835] = 0.000000000000000e+00;
  block[836] = 0.000000000000000e+00;
  block[837] = 0.000000000000000e+00;
  block[838] = 0.000000000000000e+00;
  block[839] = 0.000000000000000e+00;
  block[840] = 0.000000000000000e+00;
  block[841] = 0.000000000000000e+00;
  block[842] = 0.000000000000000e+00;
  block[843] = 0.000000000000000e+00;
  block[844] = 0.000000000000000e+00;
  block[845] = 0.000000000000000e+00;
  block[846] = 0.000000000000000e+00;
  block[847] = 0.000000000000000e+00;
  block[848] = 0.000000000000000e+00;
  block[849] = 0.000000000000000e+00;
  block[850] = 0.000000000000000e+00;
  block[851] = 1.666666666666665e-01*G0_;
  block[852] = 0.000000000000000e+00;
  block[853] = 0.000000000000000e+00;
  block[854] = 0.000000000000000e+00;
  block[855] = 0.000000000000000e+00;
  block[856] = 0.000000000000000e+00;
  block[857] = 0.000000000000000e+00;
  block[858] = 0.000000000000000e+00;
  block[859] = 0.000000000000000e+00;
  block[860] = 0.000000000000000e+00;
  block[861] = 0.000000000000000e+00;
  block[862] = 0.000000000000000e+00;
  block[863] = 0.000000000000000e+00;
  block[864] = 0.000000000000000e+00;
  block[865] = 0.000000000000000e+00;
  block[866] = 0.000000000000000e+00;
  block[867] = 0.000000000000000e+00;
  block[868] = 0.000000000000000e+00;
  block[869] = 0.000000000000000e+00;
  block[870] = 0.000000000000000e+00;
  block[871] = 0.000000000000000e+00;
  block[872] = 0.000000000000000e+00;
  block[873] = 0.000000000000000e+00;
  block[874] = 0.000000000000000e+00;
  block[875] = 0.000000000000000e+00;
  block[876] = 0.000000000000000e+00;
  block[877] = 0.000000000000000e+00;
  block[878] = 0.000000000000000e+00;
  block[879] = 0.000000000000000e+00;
  block[880] = 0.000000000000000e+00;
  block[881] = 0.000000000000000e+00;
  block[882] = 0.000000000000000e+00;
  block[883] = 0.000000000000000e+00;
  block[884] = 0.000000000000000e+00;
  block[885] = 0.000000000000000e+00;
  block[886] = 0.000000000000000e+00;
  block[887] = 0.000000000000000e+00;
  block[888] = 1.666666666666665e-01*G0_;
  block[889] = 0.000000000000000e+00;
  block[890] = 0.000000000000000e+00;
  block[891] = 0.000000000000000e+00;
  block[892] = 0.000000000000000e+00;
  block[893] = 0.000000000000000e+00;
  block[894] = 0.000000000000000e+00;
  block[895] = 0.000000000000000e+00;
  block[896] = 0.000000000000000e+00;
  block[897] = 0.000000000000000e+00;
  block[898] = 0.000000000000000e+00;
  block[899] = 0.000000000000000e+00;
  block[900] = 0.000000000000000e+00;
  block[901] = 0.000000000000000e+00;
  block[902] = 0.000000000000000e+00;
  block[903] = 0.000000000000000e+00;
  block[904] = 0.000000000000000e+00;
  block[905] = 0.000000000000000e+00;
  block[906] = 0.000000000000000e+00;
  block[907] = 0.000000000000000e+00;
  block[908] = 0.000000000000000e+00;
  block[909] = 0.000000000000000e+00;
  block[910] = 0.000000000000000e+00;
  block[911] = 0.000000000000000e+00;
  block[912] = 0.000000000000000e+00;
  block[913] = 0.000000000000000e+00;
  block[914] = 0.000000000000000e+00;
  block[915] = 0.000000000000000e+00;
  block[916] = 0.000000000000000e+00;
  block[917] = 0.000000000000000e+00;
  block[918] = 0.000000000000000e+00;
  block[919] = 0.000000000000000e+00;
  block[920] = 0.000000000000000e+00;
  block[921] = 0.000000000000000e+00;
  block[922] = 0.000000000000000e+00;
  block[923] = 0.000000000000000e+00;
  block[924] = 0.000000000000000e+00;
  block[925] = 1.666666666666665e-01*G0_;
  block[926] = 0.000000000000000e+00;
  block[927] = 0.000000000000000e+00;
  block[928] = 0.000000000000000e+00;
  block[929] = 0.000000000000000e+00;
  block[930] = 0.000000000000000e+00;
  block[931] = 0.000000000000000e+00;
  block[932] = 0.000000000000000e+00;
  block[933] = 0.000000000000000e+00;
  block[934] = 0.000000000000000e+00;
  block[935] = 0.000000000000000e+00;
  block[936] = 0.000000000000000e+00;
  block[937] = 0.000000000000000e+00;
  block[938] = 0.000000000000000e+00;
  block[939] = 0.000000000000000e+00;
  block[940] = 0.000000000000000e+00;
  block[941] = 0.000000000000000e+00;
  block[942] = 0.000000000000000e+00;
  block[943] = 0.000000000000000e+00;
  block[944] = 0.000000000000000e+00;
  block[945] = 0.000000000000000e+00;
  block[946] = 0.000000000000000e+00;
  block[947] = 0.000000000000000e+00;
  block[948] = 0.000000000000000e+00;
  block[949] = 0.000000000000000e+00;
  block[950] = 0.000000000000000e+00;
  block[951] = 0.000000000000000e+00;
  block[952] = 0.000000000000000e+00;
  block[953] = 0.000000000000000e+00;
  block[954] = 0.000000000000000e+00;
  block[955] = 0.000000000000000e+00;
  block[956] = 0.000000000000000e+00;
  block[957] = 0.000000000000000e+00;
  block[958] = 0.000000000000000e+00;
  block[959] = 0.000000000000000e+00;
  block[960] = 0.000000000000000e+00;
  block[961] = 0.000000000000000e+00;
  block[962] = 1.666666666666665e-01*G0_;
  block[963] = 0.000000000000000e+00;
  block[964] = 0.000000000000000e+00;
  block[965] = 0.000000000000000e+00;
  block[966] = 0.000000000000000e+00;
  block[967] = 0.000000000000000e+00;
  block[968] = 0.000000000000000e+00;
  block[969] = 0.000000000000000e+00;
  block[970] = 0.000000000000000e+00;
  block[971] = 0.000000000000000e+00;
  block[972] = 0.000000000000000e+00;
  block[973] = 0.000000000000000e+00;
  block[974] = 0.000000000000000e+00;
  block[975] = 0.000000000000000e+00;
  block[976] = 0.000000000000000e+00;
  block[977] = 0.000000000000000e+00;
  block[978] = 0.000000000000000e+00;
  block[979] = 0.000000000000000e+00;
  block[980] = 0.000000000000000e+00;
  block[981] = 0.000000000000000e+00;
  block[982] = 0.000000000000000e+00;
  block[983] = 0.000000000000000e+00;
  block[984] = 0.000000000000000e+00;
  block[985] = 0.000000000000000e+00;
  block[986] = 0.000000000000000e+00;
  block[987] = 0.000000000000000e+00;
  block[988] = 0.000000000000000e+00;
  block[989] = 0.000000000000000e+00;
  block[990] = 0.000000000000000e+00;
  block[991] = 0.000000000000000e+00;
  block[992] = 0.000000000000000e+00;
  block[993] = 0.000000000000000e+00;
  block[994] = 0.000000000000000e+00;
  block[995] = 0.000000000000000e+00;
  block[996] = 0.000000000000000e+00;
  block[997] = 0.000000000000000e+00;
  block[998] = 0.000000000000000e+00;
  block[999] = 1.666666666666665e-01*G0_;
  block[1000] = 0.000000000000000e+00;
  block[1001] = 0.000000000000000e+00;
  block[1002] = 0.000000000000000e+00;
  block[1003] = 0.000000000000000e+00;
  block[1004] = 0.000000000000000e+00;
  block[1005] = 0.000000000000000e+00;
  block[1006] = 0.000000000000000e+00;
  block[1007] = 0.000000000000000e+00;
  block[1008] = 0.000000000000000e+00;
  block[1009] = 0.000000000000000e+00;
  block[1010] = 0.000000000000000e+00;
  block[1011] = 0.000000000000000e+00;
  block[1012] = 0.000000000000000e+00;
  block[1013] = 0.000000000000000e+00;
  block[1014] = 0.000000000000000e+00;
  block[1015] = 0.000000000000000e+00;
  block[1016] = 0.000000000000000e+00;
  block[1017] = 0.000000000000000e+00;
  block[1018] = 0.000000000000000e+00;
  block[1019] = 0.000000000000000e+00;
  block[1020] = 0.000000000000000e+00;
  block[1021] = 0.000000000000000e+00;
  block[1022] = 0.000000000000000e+00;
  block[1023] = 0.000000000000000e+00;
  block[1024] = 0.000000000000000e+00;
  block[1025] = 0.000000000000000e+00;
  block[1026] = 0.000000000000000e+00;
  block[1027] = 0.000000000000000e+00;
  block[1028] = 0.000000000000000e+00;
  block[1029] = 0.000000000000000e+00;
  block[1030] = 0.000000000000000e+00;
  block[1031] = 0.000000000000000e+00;
  block[1032] = 0.000000000000000e+00;
  block[1033] = 0.000000000000000e+00;
  block[1034] = 0.000000000000000e+00;
  block[1035] = 0.000000000000000e+00;
  block[1036] = 1.666666666666665e-01*G0_;
  block[1037] = 0.000000000000000e+00;
  block[1038] = 0.000000000000000e+00;
  block[1039] = 0.000000000000000e+00;
  block[1040] = 0.000000000000000e+00;
  block[1041] = 0.000000000000000e+00;
  block[1042] = 0.000000000000000e+00;
  block[1043] = 0.000000000000000e+00;
  block[1044] = 0.000000000000000e+00;
  block[1045] = 0.000000000000000e+00;
  block[1046] = 0.000000000000000e+00;
  block[1047] = 0.000000000000000e+00;
  block[1048] = 0.000000000000000e+00;
  block[1049] = 0.000000000000000e+00;
  block[1050] = 0.000000000000000e+00;
  block[1051] = 0.000000000000000e+00;
  block[1052] = 0.000000000000000e+00;
  block[1053] = 0.000000000000000e+00;
  block[1054] = 0.000000000000000e+00;
  block[1055] = 0.000000000000000e+00;
  block[1056] = 0.000000000000000e+00;
  block[1057] = 0.000000000000000e+00;
  block[1058] = 0.000000000000000e+00;
  block[1059] = 0.000000000000000e+00;
  block[1060] = 0.000000000000000e+00;
  block[1061] = 0.000000000000000e+00;
  block[1062] = 0.000000000000000e+00;
  block[1063] = 0.000000000000000e+00;
  block[1064] = 0.000000000000000e+00;
  block[1065] = 0.000000000000000e+00;
  block[1066] = 0.000000000000000e+00;
  block[1067] = 0.000000000000000e+00;
  block[1068] = 0.000000000000000e+00;
  block[1069] = 0.000000000000000e+00;
  block[1070] = 0.000000000000000e+00;
  block[1071] = 0.000000000000000e+00;
  block[1072] = 0.000000000000000e+00;
  block[1073] = 1.666666666666665e-01*G0_;
  block[1074] = 0.000000000000000e+00;
  block[1075] = 0.000000000000000e+00;
  block[1076] = 0.000000000000000e+00;
  block[1077] = 0.000000000000000e+00;
  block[1078] = 0.000000000000000e+00;
  block[1079] = 0.000000000000000e+00;
  block[1080] = 0.000000000000000e+00;
  block[1081] = 0.000000000000000e+00;
  block[1082] = 0.000000000000000e+00;
  block[1083] = 0.000000000000000e+00;
  block[1084] = 0.000000000000000e+00;
  block[1085] = 0.000000000000000e+00;
  block[1086] = 0.000000000000000e+00;
  block[1087] = 0.000000000000000e+00;
  block[1088] = 0.000000000000000e+00;
  block[1089] = 0.000000000000000e+00;
  block[1090] = 0.000000000000000e+00;
  block[1091] = 0.000000000000000e+00;
  block[1092] = 0.000000000000000e+00;
  block[1093] = 0.000000000000000e+00;
  block[1094] = 0.000000000000000e+00;
  block[1095] = 0.000000000000000e+00;
  block[1096] = 0.000000000000000e+00;
  block[1097] = 0.000000000000000e+00;
  block[1098] = 0.000000000000000e+00;
  block[1099] = 0.000000000000000e+00;
  block[1100] = 0.000000000000000e+00;
  block[1101] = 0.000000000000000e+00;
  block[1102] = 0.000000000000000e+00;
  block[1103] = 0.000000000000000e+00;
  block[1104] = 0.000000000000000e+00;
  block[1105] = 0.000000000000000e+00;
  block[1106] = 0.000000000000000e+00;
  block[1107] = 0.000000000000000e+00;
  block[1108] = 0.000000000000000e+00;
  block[1109] = 0.000000000000000e+00;
  block[1110] = 1.666666666666665e-01*G0_;
  block[1111] = 0.000000000000000e+00;
  block[1112] = 0.000000000000000e+00;
  block[1113] = 0.000000000000000e+00;
  block[1114] = 0.000000000000000e+00;
  block[1115] = 0.000000000000000e+00;
  block[1116] = 0.000000000000000e+00;
  block[1117] = 0.000000000000000e+00;
  block[1118] = 0.000000000000000e+00;
  block[1119] = 0.000000000000000e+00;
  block[1120] = 0.000000000000000e+00;
  block[1121] = 0.000000000000000e+00;
  block[1122] = 0.000000000000000e+00;
  block[1123] = 0.000000000000000e+00;
  block[1124] = 0.000000000000000e+00;
  block[1125] = 0.000000000000000e+00;
  block[1126] = 0.000000000000000e+00;
  block[1127] = 0.000000000000000e+00;
  block[1128] = 0.000000000000000e+00;
  block[1129] = 0.000000000000000e+00;
  block[1130] = 0.000000000000000e+00;
  block[1131] = 0.000000000000000e+00;
  block[1132] = 0.000000000000000e+00;
  block[1133] = 0.000000000000000e+00;
  block[1134] = 0.000000000000000e+00;
  block[1135] = 0.000000000000000e+00;
  block[1136] = 0.000000000000000e+00;
  block[1137] = 0.000000000000000e+00;
  block[1138] = 0.000000000000000e+00;
  block[1139] = 0.000000000000000e+00;
  block[1140] = 0.000000000000000e+00;
  block[1141] = 0.000000000000000e+00;
  block[1142] = 0.000000000000000e+00;
  block[1143] = 0.000000000000000e+00;
  block[1144] = 0.000000000000000e+00;
  block[1145] = 0.000000000000000e+00;
  block[1146] = 0.000000000000000e+00;
  block[1147] = 1.666666666666665e-01*G0_;
  block[1148] = 0.000000000000000e+00;
  block[1149] = 0.000000000000000e+00;
  block[1150] = 0.000000000000000e+00;
  block[1151] = 0.000000000000000e+00;
  block[1152] = 0.000000000000000e+00;
  block[1153] = 0.000000000000000e+00;
  block[1154] = 0.000000000000000e+00;
  block[1155] = 0.000000000000000e+00;
  block[1156] = 0.000000000000000e+00;
  block[1157] = 0.000000000000000e+00;
  block[1158] = 0.000000000000000e+00;
  block[1159] = 0.000000000000000e+00;
  block[1160] = 0.000000000000000e+00;
  block[1161] = 0.000000000000000e+00;
  block[1162] = 0.000000000000000e+00;
  block[1163] = 0.000000000000000e+00;
  block[1164] = 0.000000000000000e+00;
  block[1165] = 0.000000000000000e+00;
  block[1166] = 0.000000000000000e+00;
  block[1167] = 0.000000000000000e+00;
  block[1168] = 0.000000000000000e+00;
  block[1169] = 0.000000000000000e+00;
  block[1170] = 0.000000000000000e+00;
  block[1171] = 0.000000000000000e+00;
  block[1172] = 0.000000000000000e+00;
  block[1173] = 0.000000000000000e+00;
  block[1174] = 0.000000000000000e+00;
  block[1175] = 0.000000000000000e+00;
  block[1176] = 0.000000000000000e+00;
  block[1177] = 0.000000000000000e+00;
  block[1178] = 0.000000000000000e+00;
  block[1179] = 0.000000000000000e+00;
  block[1180] = 0.000000000000000e+00;
  block[1181] = 0.000000000000000e+00;
  block[1182] = 0.000000000000000e+00;
  block[1183] = 0.000000000000000e+00;
  block[1184] = 1.666666666666665e-01*G0_;
  block[1185] = 0.000000000000000e+00;
  block[1186] = 0.000000000000000e+00;
  block[1187] = 0.000000000000000e+00;
  block[1188] = 0.000000000000000e+00;
  block[1189] = 0.000000000000000e+00;
  block[1190] = 0.000000000000000e+00;
  block[1191] = 0.000000000000000e+00;
  block[1192] = 0.000000000000000e+00;
  block[1193] = 0.000000000000000e+00;
  block[1194] = 0.000000000000000e+00;
  block[1195] = 0.000000000000000e+00;
  block[1196] = 0.000000000000000e+00;
  block[1197] = 0.000000000000000e+00;
  block[1198] = 0.000000000000000e+00;
  block[1199] = 0.000000000000000e+00;
  block[1200] = 0.000000000000000e+00;
  block[1201] = 0.000000000000000e+00;
  block[1202] = 0.000000000000000e+00;
  block[1203] = 0.000000000000000e+00;
  block[1204] = 0.000000000000000e+00;
  block[1205] = 0.000000000000000e+00;
  block[1206] = 0.000000000000000e+00;
  block[1207] = 0.000000000000000e+00;
  block[1208] = 0.000000000000000e+00;
  block[1209] = 0.000000000000000e+00;
  block[1210] = 0.000000000000000e+00;
  block[1211] = 0.000000000000000e+00;
  block[1212] = 0.000000000000000e+00;
  block[1213] = 0.000000000000000e+00;
  block[1214] = 0.000000000000000e+00;
  block[1215] = 0.000000000000000e+00;
  block[1216] = 0.000000000000000e+00;
  block[1217] = 0.000000000000000e+00;
  block[1218] = 0.000000000000000e+00;
  block[1219] = 0.000000000000000e+00;
  block[1220] = 0.000000000000000e+00;
  block[1221] = 1.666666666666665e-01*G0_;
  block[1222] = 0.000000000000000e+00;
  block[1223] = 0.000000000000000e+00;
  block[1224] = 0.000000000000000e+00;
  block[1225] = 0.000000000000000e+00;
  block[1226] = 0.000000000000000e+00;
  block[1227] = 0.000000000000000e+00;
  block[1228] = 0.000000000000000e+00;
  block[1229] = 0.000000000000000e+00;
  block[1230] = 0.000000000000000e+00;
  block[1231] = 0.000000000000000e+00;
  block[1232] = 0.000000000000000e+00;
  block[1233] = 0.000000000000000e+00;
  block[1234] = 0.000000000000000e+00;
  block[1235] = 0.000000000000000e+00;
  block[1236] = 0.000000000000000e+00;
  block[1237] = 0.000000000000000e+00;
  block[1238] = 0.000000000000000e+00;
  block[1239] = 0.000000000000000e+00;
  block[1240] = 0.000000000000000e+00;
  block[1241] = 0.000000000000000e+00;
  block[1242] = 0.000000000000000e+00;
  block[1243] = 0.000000000000000e+00;
  block[1244] = 0.000000000000000e+00;
  block[1245] = 0.000000000000000e+00;
  block[1246] = 0.000000000000000e+00;
  block[1247] = 0.000000000000000e+00;
  block[1248] = 0.000000000000000e+00;
  block[1249] = 0.000000000000000e+00;
  block[1250] = 0.000000000000000e+00;
  block[1251] = 0.000000000000000e+00;
  block[1252] = 0.000000000000000e+00;
  block[1253] = 0.000000000000000e+00;
  block[1254] = 0.000000000000000e+00;
  block[1255] = 0.000000000000000e+00;
  block[1256] = 0.000000000000000e+00;
  block[1257] = 0.000000000000000e+00;
  block[1258] = 1.666666666666665e-01*G0_;
  block[1259] = 0.000000000000000e+00;
  block[1260] = 0.000000000000000e+00;
  block[1261] = 0.000000000000000e+00;
  block[1262] = 0.000000000000000e+00;
  block[1263] = 0.000000000000000e+00;
  block[1264] = 0.000000000000000e+00;
  block[1265] = 0.000000000000000e+00;
  block[1266] = 0.000000000000000e+00;
  block[1267] = 0.000000000000000e+00;
  block[1268] = 0.000000000000000e+00;
  block[1269] = 0.000000000000000e+00;
  block[1270] = 0.000000000000000e+00;
  block[1271] = 0.000000000000000e+00;
  block[1272] = 0.000000000000000e+00;
  block[1273] = 0.000000000000000e+00;
  block[1274] = 0.000000000000000e+00;
  block[1275] = 0.000000000000000e+00;
  block[1276] = 0.000000000000000e+00;
  block[1277] = 0.000000000000000e+00;
  block[1278] = 0.000000000000000e+00;
  block[1279] = 0.000000000000000e+00;
  block[1280] = 0.000000000000000e+00;
  block[1281] = 0.000000000000000e+00;
  block[1282] = 0.000000000000000e+00;
  block[1283] = 0.000000000000000e+00;
  block[1284] = 0.000000000000000e+00;
  block[1285] = 0.000000000000000e+00;
  block[1286] = 0.000000000000000e+00;
  block[1287] = 0.000000000000000e+00;
  block[1288] = 0.000000000000000e+00;
  block[1289] = 0.000000000000000e+00;
  block[1290] = 0.000000000000000e+00;
  block[1291] = 0.000000000000000e+00;
  block[1292] = 0.000000000000000e+00;
  block[1293] = 0.000000000000000e+00;
  block[1294] = 0.000000000000000e+00;
  block[1295] = 1.666666666666665e-01*G0_;
}

// No contribution from the boundary
bool BilinearForm::boundary_contribution() const { return false; }

void BilinearForm::eval(real block[], const AffineMap& map, unsigned int facet) const {}

// No contribution from interior boundaries
bool BilinearForm::interior_boundary_contribution() const { return false; }

void BilinearForm::eval(real block[], const AffineMap& map0, const AffineMap& map1, unsigned int facet0, unsigned int facet1, unsigned int alignment) const {}

} }

#endif
