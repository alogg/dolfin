// Automatically generated by FFC, the FEniCS Form Compiler, version 0.3.4.
// For further information, go to http://www/fenics.org/ffc/.
// Licensed under the GNU GPL Version 2.

#ifndef __PLAS3D_H
#define __PLAS3D_H

#include <dolfin/Mesh.h>
#include <dolfin/Cell.h>
#include <dolfin/Point.h>
#include <dolfin/AffineMap.h>
#include <dolfin/FiniteElement.h>
#include <dolfin/FiniteElementSpec.h>
#include <dolfin/BilinearForm.h>
#include <dolfin/LinearForm.h>
#include <dolfin/Functional.h>
#include <dolfin/FEM.h>

namespace dolfin { namespace Plas3D {

/// This class contains the form to be evaluated, including
/// contributions from the interior and boundary of the domain.

class BilinearForm : public dolfin::BilinearForm
{
public:

  class TestElement;

  class TrialElement;

  class FunctionElement_0;

  BilinearForm(Function& w0);
  

  bool interior_contribution() const;

  void eval(real block[], const AffineMap& map) const;

  bool boundary_contribution() const;

  void eval(real block[], const AffineMap& map, unsigned int facet) const;

};

class BilinearForm::TestElement : public dolfin::FiniteElement
{
public:

  TestElement() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 3;

    // Element is simple, don't need to initialize subelements
  }

  ~TestElement()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 12;
  }

  inline unsigned int shapedim() const
  {
    return 3;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    nodes[3] = cell.entities(0)[3];
    int offset = mesh.topology().size(0);
    nodes[4] = offset + cell.entities(0)[0];
    nodes[5] = offset + cell.entities(0)[1];
    nodes[6] = offset + cell.entities(0)[2];
    nodes[7] = offset + cell.entities(0)[3];
    offset = offset + mesh.topology().size(0);
    nodes[8] = offset + cell.entities(0)[0];
    nodes[9] = offset + cell.entities(0)[1];
    nodes[10] = offset + cell.entities(0)[2];
    nodes[11] = offset + cell.entities(0)[3];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    points[4] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[6] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[7] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    points[8] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[9] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[10] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[11] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 0;
    components[4] = 1;
    components[5] = 1;
    components[6] = 1;
    components[7] = 1;
    components[8] = 2;
    components[9] = 2;
    components[10] = 2;
    components[11] = 2;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0);
    vertex_nodes[1] = offset + vertex;
    offset = offset + mesh.topology().size(0);
    vertex_nodes[2] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Vector Lagrange", "tetrahedron", 1, 3);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class BilinearForm::TrialElement : public dolfin::FiniteElement
{
public:

  TrialElement() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 3;

    // Element is simple, don't need to initialize subelements
  }

  ~TrialElement()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 12;
  }

  inline unsigned int shapedim() const
  {
    return 3;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    nodes[3] = cell.entities(0)[3];
    int offset = mesh.topology().size(0);
    nodes[4] = offset + cell.entities(0)[0];
    nodes[5] = offset + cell.entities(0)[1];
    nodes[6] = offset + cell.entities(0)[2];
    nodes[7] = offset + cell.entities(0)[3];
    offset = offset + mesh.topology().size(0);
    nodes[8] = offset + cell.entities(0)[0];
    nodes[9] = offset + cell.entities(0)[1];
    nodes[10] = offset + cell.entities(0)[2];
    nodes[11] = offset + cell.entities(0)[3];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    points[4] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[6] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[7] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    points[8] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[9] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[10] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[11] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 0;
    components[4] = 1;
    components[5] = 1;
    components[6] = 1;
    components[7] = 1;
    components[8] = 2;
    components[9] = 2;
    components[10] = 2;
    components[11] = 2;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0);
    vertex_nodes[1] = offset + vertex;
    offset = offset + mesh.topology().size(0);
    vertex_nodes[2] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Vector Lagrange", "tetrahedron", 1, 3);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class BilinearForm::FunctionElement_0 : public dolfin::FiniteElement
{
public:

  FunctionElement_0() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 36;

    // Element is simple, don't need to initialize subelements
  }

  ~FunctionElement_0()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 36;
  }

  inline unsigned int shapedim() const
  {
    return 3;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.index();
    int offset = mesh.topology().size(3);
    nodes[1] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[2] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[3] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[4] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[5] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[6] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[7] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[8] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[9] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[10] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[11] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[12] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[13] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[14] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[15] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[16] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[17] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[18] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[19] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[20] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[21] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[22] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[23] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[24] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[25] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[26] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[27] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[28] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[29] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[30] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[31] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[32] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[33] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[34] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[35] = offset + cell.index();
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[1] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[2] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[3] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[4] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[5] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[6] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[7] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[8] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[9] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[10] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[11] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[12] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[13] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[14] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[15] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[16] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[17] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[18] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[19] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[20] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[21] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[22] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[23] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[24] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[25] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[26] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[27] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[28] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[29] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[30] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[31] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[32] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[33] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[34] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[35] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    components[0] = 0;
    components[1] = 1;
    components[2] = 2;
    components[3] = 3;
    components[4] = 4;
    components[5] = 5;
    components[6] = 6;
    components[7] = 7;
    components[8] = 8;
    components[9] = 9;
    components[10] = 10;
    components[11] = 11;
    components[12] = 12;
    components[13] = 13;
    components[14] = 14;
    components[15] = 15;
    components[16] = 16;
    components[17] = 17;
    components[18] = 18;
    components[19] = 19;
    components[20] = 20;
    components[21] = 21;
    components[22] = 22;
    components[23] = 23;
    components[24] = 24;
    components[25] = 25;
    components[26] = 26;
    components[27] = 27;
    components[28] = 28;
    components[29] = 29;
    components[30] = 30;
    components[31] = 31;
    components[32] = 32;
    components[33] = 33;
    components[34] = 34;
    components[35] = 35;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(3);
    vertex_nodes[1] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[2] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[3] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[4] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[5] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[6] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[7] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[8] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[9] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[10] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[11] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[12] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[13] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[14] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[15] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[16] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[17] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[18] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[19] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[20] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[21] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[22] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[23] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[24] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[25] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[26] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[27] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[28] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[29] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[30] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[31] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[32] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[33] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[34] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[35] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Discontinuous vector Lagrange", "tetrahedron", 0, 36);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

BilinearForm::BilinearForm(Function& w0) : dolfin::BilinearForm(1)
{
  // Create finite element for test space
  _test = new TestElement();

  // Create finite element for trial space
  _trial = new TrialElement();

  // Add functions
  initFunction(0, w0, new FunctionElement_0());
}

// Contribution from the interior
bool BilinearForm::interior_contribution() const { return true; }

void BilinearForm::eval(real block[], const AffineMap& map) const
{
  // Compute coefficients
  const real c0_0 = c[0][0];
  const real c0_1 = c[0][1];
  const real c0_2 = c[0][2];
  const real c0_3 = c[0][3];
  const real c0_4 = c[0][4];
  const real c0_5 = c[0][5];
  const real c0_6 = c[0][6];
  const real c0_7 = c[0][7];
  const real c0_8 = c[0][8];
  const real c0_9 = c[0][9];
  const real c0_10 = c[0][10];
  const real c0_11 = c[0][11];
  const real c0_12 = c[0][12];
  const real c0_13 = c[0][13];
  const real c0_14 = c[0][14];
  const real c0_15 = c[0][15];
  const real c0_16 = c[0][16];
  const real c0_17 = c[0][17];
  const real c0_18 = c[0][18];
  const real c0_19 = c[0][19];
  const real c0_20 = c[0][20];
  const real c0_21 = c[0][21];
  const real c0_22 = c[0][22];
  const real c0_23 = c[0][23];
  const real c0_24 = c[0][24];
  const real c0_25 = c[0][25];
  const real c0_26 = c[0][26];
  const real c0_27 = c[0][27];
  const real c0_28 = c[0][28];
  const real c0_29 = c[0][29];
  const real c0_30 = c[0][30];
  const real c0_31 = c[0][31];
  const real c0_32 = c[0][32];
  const real c0_33 = c[0][33];
  const real c0_34 = c[0][34];
  const real c0_35 = c[0][35];

  // Compute geometry tensors
  const real G0_0_0_0 = map.det*c0_0*map.g00*map.g00;
  const real G0_0_0_1 = map.det*c0_0*map.g00*map.g10;
  const real G0_0_0_2 = map.det*c0_0*map.g00*map.g20;
  const real G0_1_0_0 = map.det*c0_0*map.g10*map.g00;
  const real G0_1_0_1 = map.det*c0_0*map.g10*map.g10;
  const real G0_1_0_2 = map.det*c0_0*map.g10*map.g20;
  const real G0_2_0_0 = map.det*c0_0*map.g20*map.g00;
  const real G0_2_0_1 = map.det*c0_0*map.g20*map.g10;
  const real G0_2_0_2 = map.det*c0_0*map.g20*map.g20;
  const real G1_0_1_0 = map.det*c0_1*map.g00*map.g01;
  const real G1_0_1_1 = map.det*c0_1*map.g00*map.g11;
  const real G1_0_1_2 = map.det*c0_1*map.g00*map.g21;
  const real G1_1_1_0 = map.det*c0_1*map.g10*map.g01;
  const real G1_1_1_1 = map.det*c0_1*map.g10*map.g11;
  const real G1_1_1_2 = map.det*c0_1*map.g10*map.g21;
  const real G1_2_1_0 = map.det*c0_1*map.g20*map.g01;
  const real G1_2_1_1 = map.det*c0_1*map.g20*map.g11;
  const real G1_2_1_2 = map.det*c0_1*map.g20*map.g21;
  const real G2_0_2_0 = map.det*c0_2*map.g00*map.g02;
  const real G2_0_2_1 = map.det*c0_2*map.g00*map.g12;
  const real G2_0_2_2 = map.det*c0_2*map.g00*map.g22;
  const real G2_1_2_0 = map.det*c0_2*map.g10*map.g02;
  const real G2_1_2_1 = map.det*c0_2*map.g10*map.g12;
  const real G2_1_2_2 = map.det*c0_2*map.g10*map.g22;
  const real G2_2_2_0 = map.det*c0_2*map.g20*map.g02;
  const real G2_2_2_1 = map.det*c0_2*map.g20*map.g12;
  const real G2_2_2_2 = map.det*c0_2*map.g20*map.g22;
  const real G3_0_3_0 = map.det*c0_3*map.g00*map.g01;
  const real G3_0_3_1 = map.det*c0_3*map.g00*map.g11;
  const real G3_0_3_2 = map.det*c0_3*map.g00*map.g21;
  const real G3_1_3_0 = map.det*c0_3*map.g10*map.g01;
  const real G3_1_3_1 = map.det*c0_3*map.g10*map.g11;
  const real G3_1_3_2 = map.det*c0_3*map.g10*map.g21;
  const real G3_2_3_0 = map.det*c0_3*map.g20*map.g01;
  const real G3_2_3_1 = map.det*c0_3*map.g20*map.g11;
  const real G3_2_3_2 = map.det*c0_3*map.g20*map.g21;
  const real G4_0_3_0 = map.det*c0_3*map.g00*map.g00;
  const real G4_0_3_1 = map.det*c0_3*map.g00*map.g10;
  const real G4_0_3_2 = map.det*c0_3*map.g00*map.g20;
  const real G4_1_3_0 = map.det*c0_3*map.g10*map.g00;
  const real G4_1_3_1 = map.det*c0_3*map.g10*map.g10;
  const real G4_1_3_2 = map.det*c0_3*map.g10*map.g20;
  const real G4_2_3_0 = map.det*c0_3*map.g20*map.g00;
  const real G4_2_3_1 = map.det*c0_3*map.g20*map.g10;
  const real G4_2_3_2 = map.det*c0_3*map.g20*map.g20;
  const real G5_0_4_0 = map.det*c0_4*map.g00*map.g02;
  const real G5_0_4_1 = map.det*c0_4*map.g00*map.g12;
  const real G5_0_4_2 = map.det*c0_4*map.g00*map.g22;
  const real G5_1_4_0 = map.det*c0_4*map.g10*map.g02;
  const real G5_1_4_1 = map.det*c0_4*map.g10*map.g12;
  const real G5_1_4_2 = map.det*c0_4*map.g10*map.g22;
  const real G5_2_4_0 = map.det*c0_4*map.g20*map.g02;
  const real G5_2_4_1 = map.det*c0_4*map.g20*map.g12;
  const real G5_2_4_2 = map.det*c0_4*map.g20*map.g22;
  const real G6_0_4_0 = map.det*c0_4*map.g00*map.g00;
  const real G6_0_4_1 = map.det*c0_4*map.g00*map.g10;
  const real G6_0_4_2 = map.det*c0_4*map.g00*map.g20;
  const real G6_1_4_0 = map.det*c0_4*map.g10*map.g00;
  const real G6_1_4_1 = map.det*c0_4*map.g10*map.g10;
  const real G6_1_4_2 = map.det*c0_4*map.g10*map.g20;
  const real G6_2_4_0 = map.det*c0_4*map.g20*map.g00;
  const real G6_2_4_1 = map.det*c0_4*map.g20*map.g10;
  const real G6_2_4_2 = map.det*c0_4*map.g20*map.g20;
  const real G7_0_5_0 = map.det*c0_5*map.g00*map.g02;
  const real G7_0_5_1 = map.det*c0_5*map.g00*map.g12;
  const real G7_0_5_2 = map.det*c0_5*map.g00*map.g22;
  const real G7_1_5_0 = map.det*c0_5*map.g10*map.g02;
  const real G7_1_5_1 = map.det*c0_5*map.g10*map.g12;
  const real G7_1_5_2 = map.det*c0_5*map.g10*map.g22;
  const real G7_2_5_0 = map.det*c0_5*map.g20*map.g02;
  const real G7_2_5_1 = map.det*c0_5*map.g20*map.g12;
  const real G7_2_5_2 = map.det*c0_5*map.g20*map.g22;
  const real G8_0_5_0 = map.det*c0_5*map.g00*map.g01;
  const real G8_0_5_1 = map.det*c0_5*map.g00*map.g11;
  const real G8_0_5_2 = map.det*c0_5*map.g00*map.g21;
  const real G8_1_5_0 = map.det*c0_5*map.g10*map.g01;
  const real G8_1_5_1 = map.det*c0_5*map.g10*map.g11;
  const real G8_1_5_2 = map.det*c0_5*map.g10*map.g21;
  const real G8_2_5_0 = map.det*c0_5*map.g20*map.g01;
  const real G8_2_5_1 = map.det*c0_5*map.g20*map.g11;
  const real G8_2_5_2 = map.det*c0_5*map.g20*map.g21;
  const real G9_0_18_0 = map.det*c0_18*map.g01*map.g00;
  const real G9_0_18_1 = map.det*c0_18*map.g01*map.g10;
  const real G9_0_18_2 = map.det*c0_18*map.g01*map.g20;
  const real G9_1_18_0 = map.det*c0_18*map.g11*map.g00;
  const real G9_1_18_1 = map.det*c0_18*map.g11*map.g10;
  const real G9_1_18_2 = map.det*c0_18*map.g11*map.g20;
  const real G9_2_18_0 = map.det*c0_18*map.g21*map.g00;
  const real G9_2_18_1 = map.det*c0_18*map.g21*map.g10;
  const real G9_2_18_2 = map.det*c0_18*map.g21*map.g20;
  const real G10_0_19_0 = map.det*c0_19*map.g01*map.g01;
  const real G10_0_19_1 = map.det*c0_19*map.g01*map.g11;
  const real G10_0_19_2 = map.det*c0_19*map.g01*map.g21;
  const real G10_1_19_0 = map.det*c0_19*map.g11*map.g01;
  const real G10_1_19_1 = map.det*c0_19*map.g11*map.g11;
  const real G10_1_19_2 = map.det*c0_19*map.g11*map.g21;
  const real G10_2_19_0 = map.det*c0_19*map.g21*map.g01;
  const real G10_2_19_1 = map.det*c0_19*map.g21*map.g11;
  const real G10_2_19_2 = map.det*c0_19*map.g21*map.g21;
  const real G11_0_20_0 = map.det*c0_20*map.g01*map.g02;
  const real G11_0_20_1 = map.det*c0_20*map.g01*map.g12;
  const real G11_0_20_2 = map.det*c0_20*map.g01*map.g22;
  const real G11_1_20_0 = map.det*c0_20*map.g11*map.g02;
  const real G11_1_20_1 = map.det*c0_20*map.g11*map.g12;
  const real G11_1_20_2 = map.det*c0_20*map.g11*map.g22;
  const real G11_2_20_0 = map.det*c0_20*map.g21*map.g02;
  const real G11_2_20_1 = map.det*c0_20*map.g21*map.g12;
  const real G11_2_20_2 = map.det*c0_20*map.g21*map.g22;
  const real G12_0_21_0 = map.det*c0_21*map.g01*map.g01;
  const real G12_0_21_1 = map.det*c0_21*map.g01*map.g11;
  const real G12_0_21_2 = map.det*c0_21*map.g01*map.g21;
  const real G12_1_21_0 = map.det*c0_21*map.g11*map.g01;
  const real G12_1_21_1 = map.det*c0_21*map.g11*map.g11;
  const real G12_1_21_2 = map.det*c0_21*map.g11*map.g21;
  const real G12_2_21_0 = map.det*c0_21*map.g21*map.g01;
  const real G12_2_21_1 = map.det*c0_21*map.g21*map.g11;
  const real G12_2_21_2 = map.det*c0_21*map.g21*map.g21;
  const real G13_0_21_0 = map.det*c0_21*map.g01*map.g00;
  const real G13_0_21_1 = map.det*c0_21*map.g01*map.g10;
  const real G13_0_21_2 = map.det*c0_21*map.g01*map.g20;
  const real G13_1_21_0 = map.det*c0_21*map.g11*map.g00;
  const real G13_1_21_1 = map.det*c0_21*map.g11*map.g10;
  const real G13_1_21_2 = map.det*c0_21*map.g11*map.g20;
  const real G13_2_21_0 = map.det*c0_21*map.g21*map.g00;
  const real G13_2_21_1 = map.det*c0_21*map.g21*map.g10;
  const real G13_2_21_2 = map.det*c0_21*map.g21*map.g20;
  const real G14_0_22_0 = map.det*c0_22*map.g01*map.g02;
  const real G14_0_22_1 = map.det*c0_22*map.g01*map.g12;
  const real G14_0_22_2 = map.det*c0_22*map.g01*map.g22;
  const real G14_1_22_0 = map.det*c0_22*map.g11*map.g02;
  const real G14_1_22_1 = map.det*c0_22*map.g11*map.g12;
  const real G14_1_22_2 = map.det*c0_22*map.g11*map.g22;
  const real G14_2_22_0 = map.det*c0_22*map.g21*map.g02;
  const real G14_2_22_1 = map.det*c0_22*map.g21*map.g12;
  const real G14_2_22_2 = map.det*c0_22*map.g21*map.g22;
  const real G15_0_22_0 = map.det*c0_22*map.g01*map.g00;
  const real G15_0_22_1 = map.det*c0_22*map.g01*map.g10;
  const real G15_0_22_2 = map.det*c0_22*map.g01*map.g20;
  const real G15_1_22_0 = map.det*c0_22*map.g11*map.g00;
  const real G15_1_22_1 = map.det*c0_22*map.g11*map.g10;
  const real G15_1_22_2 = map.det*c0_22*map.g11*map.g20;
  const real G15_2_22_0 = map.det*c0_22*map.g21*map.g00;
  const real G15_2_22_1 = map.det*c0_22*map.g21*map.g10;
  const real G15_2_22_2 = map.det*c0_22*map.g21*map.g20;
  const real G16_0_23_0 = map.det*c0_23*map.g01*map.g02;
  const real G16_0_23_1 = map.det*c0_23*map.g01*map.g12;
  const real G16_0_23_2 = map.det*c0_23*map.g01*map.g22;
  const real G16_1_23_0 = map.det*c0_23*map.g11*map.g02;
  const real G16_1_23_1 = map.det*c0_23*map.g11*map.g12;
  const real G16_1_23_2 = map.det*c0_23*map.g11*map.g22;
  const real G16_2_23_0 = map.det*c0_23*map.g21*map.g02;
  const real G16_2_23_1 = map.det*c0_23*map.g21*map.g12;
  const real G16_2_23_2 = map.det*c0_23*map.g21*map.g22;
  const real G17_0_23_0 = map.det*c0_23*map.g01*map.g01;
  const real G17_0_23_1 = map.det*c0_23*map.g01*map.g11;
  const real G17_0_23_2 = map.det*c0_23*map.g01*map.g21;
  const real G17_1_23_0 = map.det*c0_23*map.g11*map.g01;
  const real G17_1_23_1 = map.det*c0_23*map.g11*map.g11;
  const real G17_1_23_2 = map.det*c0_23*map.g11*map.g21;
  const real G17_2_23_0 = map.det*c0_23*map.g21*map.g01;
  const real G17_2_23_1 = map.det*c0_23*map.g21*map.g11;
  const real G17_2_23_2 = map.det*c0_23*map.g21*map.g21;
  const real G18_0_24_0 = map.det*c0_24*map.g02*map.g00;
  const real G18_0_24_1 = map.det*c0_24*map.g02*map.g10;
  const real G18_0_24_2 = map.det*c0_24*map.g02*map.g20;
  const real G18_1_24_0 = map.det*c0_24*map.g12*map.g00;
  const real G18_1_24_1 = map.det*c0_24*map.g12*map.g10;
  const real G18_1_24_2 = map.det*c0_24*map.g12*map.g20;
  const real G18_2_24_0 = map.det*c0_24*map.g22*map.g00;
  const real G18_2_24_1 = map.det*c0_24*map.g22*map.g10;
  const real G18_2_24_2 = map.det*c0_24*map.g22*map.g20;
  const real G19_0_25_0 = map.det*c0_25*map.g02*map.g01;
  const real G19_0_25_1 = map.det*c0_25*map.g02*map.g11;
  const real G19_0_25_2 = map.det*c0_25*map.g02*map.g21;
  const real G19_1_25_0 = map.det*c0_25*map.g12*map.g01;
  const real G19_1_25_1 = map.det*c0_25*map.g12*map.g11;
  const real G19_1_25_2 = map.det*c0_25*map.g12*map.g21;
  const real G19_2_25_0 = map.det*c0_25*map.g22*map.g01;
  const real G19_2_25_1 = map.det*c0_25*map.g22*map.g11;
  const real G19_2_25_2 = map.det*c0_25*map.g22*map.g21;
  const real G20_0_26_0 = map.det*c0_26*map.g02*map.g02;
  const real G20_0_26_1 = map.det*c0_26*map.g02*map.g12;
  const real G20_0_26_2 = map.det*c0_26*map.g02*map.g22;
  const real G20_1_26_0 = map.det*c0_26*map.g12*map.g02;
  const real G20_1_26_1 = map.det*c0_26*map.g12*map.g12;
  const real G20_1_26_2 = map.det*c0_26*map.g12*map.g22;
  const real G20_2_26_0 = map.det*c0_26*map.g22*map.g02;
  const real G20_2_26_1 = map.det*c0_26*map.g22*map.g12;
  const real G20_2_26_2 = map.det*c0_26*map.g22*map.g22;
  const real G21_0_27_0 = map.det*c0_27*map.g02*map.g01;
  const real G21_0_27_1 = map.det*c0_27*map.g02*map.g11;
  const real G21_0_27_2 = map.det*c0_27*map.g02*map.g21;
  const real G21_1_27_0 = map.det*c0_27*map.g12*map.g01;
  const real G21_1_27_1 = map.det*c0_27*map.g12*map.g11;
  const real G21_1_27_2 = map.det*c0_27*map.g12*map.g21;
  const real G21_2_27_0 = map.det*c0_27*map.g22*map.g01;
  const real G21_2_27_1 = map.det*c0_27*map.g22*map.g11;
  const real G21_2_27_2 = map.det*c0_27*map.g22*map.g21;
  const real G22_0_27_0 = map.det*c0_27*map.g02*map.g00;
  const real G22_0_27_1 = map.det*c0_27*map.g02*map.g10;
  const real G22_0_27_2 = map.det*c0_27*map.g02*map.g20;
  const real G22_1_27_0 = map.det*c0_27*map.g12*map.g00;
  const real G22_1_27_1 = map.det*c0_27*map.g12*map.g10;
  const real G22_1_27_2 = map.det*c0_27*map.g12*map.g20;
  const real G22_2_27_0 = map.det*c0_27*map.g22*map.g00;
  const real G22_2_27_1 = map.det*c0_27*map.g22*map.g10;
  const real G22_2_27_2 = map.det*c0_27*map.g22*map.g20;
  const real G23_0_28_0 = map.det*c0_28*map.g02*map.g02;
  const real G23_0_28_1 = map.det*c0_28*map.g02*map.g12;
  const real G23_0_28_2 = map.det*c0_28*map.g02*map.g22;
  const real G23_1_28_0 = map.det*c0_28*map.g12*map.g02;
  const real G23_1_28_1 = map.det*c0_28*map.g12*map.g12;
  const real G23_1_28_2 = map.det*c0_28*map.g12*map.g22;
  const real G23_2_28_0 = map.det*c0_28*map.g22*map.g02;
  const real G23_2_28_1 = map.det*c0_28*map.g22*map.g12;
  const real G23_2_28_2 = map.det*c0_28*map.g22*map.g22;
  const real G24_0_28_0 = map.det*c0_28*map.g02*map.g00;
  const real G24_0_28_1 = map.det*c0_28*map.g02*map.g10;
  const real G24_0_28_2 = map.det*c0_28*map.g02*map.g20;
  const real G24_1_28_0 = map.det*c0_28*map.g12*map.g00;
  const real G24_1_28_1 = map.det*c0_28*map.g12*map.g10;
  const real G24_1_28_2 = map.det*c0_28*map.g12*map.g20;
  const real G24_2_28_0 = map.det*c0_28*map.g22*map.g00;
  const real G24_2_28_1 = map.det*c0_28*map.g22*map.g10;
  const real G24_2_28_2 = map.det*c0_28*map.g22*map.g20;
  const real G25_0_29_0 = map.det*c0_29*map.g02*map.g02;
  const real G25_0_29_1 = map.det*c0_29*map.g02*map.g12;
  const real G25_0_29_2 = map.det*c0_29*map.g02*map.g22;
  const real G25_1_29_0 = map.det*c0_29*map.g12*map.g02;
  const real G25_1_29_1 = map.det*c0_29*map.g12*map.g12;
  const real G25_1_29_2 = map.det*c0_29*map.g12*map.g22;
  const real G25_2_29_0 = map.det*c0_29*map.g22*map.g02;
  const real G25_2_29_1 = map.det*c0_29*map.g22*map.g12;
  const real G25_2_29_2 = map.det*c0_29*map.g22*map.g22;
  const real G26_0_29_0 = map.det*c0_29*map.g02*map.g01;
  const real G26_0_29_1 = map.det*c0_29*map.g02*map.g11;
  const real G26_0_29_2 = map.det*c0_29*map.g02*map.g21;
  const real G26_1_29_0 = map.det*c0_29*map.g12*map.g01;
  const real G26_1_29_1 = map.det*c0_29*map.g12*map.g11;
  const real G26_1_29_2 = map.det*c0_29*map.g12*map.g21;
  const real G26_2_29_0 = map.det*c0_29*map.g22*map.g01;
  const real G26_2_29_1 = map.det*c0_29*map.g22*map.g11;
  const real G26_2_29_2 = map.det*c0_29*map.g22*map.g21;
  const real G27_0_18_0 = map.det*c0_18*map.g00*map.g00;
  const real G27_0_18_1 = map.det*c0_18*map.g00*map.g10;
  const real G27_0_18_2 = map.det*c0_18*map.g00*map.g20;
  const real G27_1_18_0 = map.det*c0_18*map.g10*map.g00;
  const real G27_1_18_1 = map.det*c0_18*map.g10*map.g10;
  const real G27_1_18_2 = map.det*c0_18*map.g10*map.g20;
  const real G27_2_18_0 = map.det*c0_18*map.g20*map.g00;
  const real G27_2_18_1 = map.det*c0_18*map.g20*map.g10;
  const real G27_2_18_2 = map.det*c0_18*map.g20*map.g20;
  const real G28_0_19_0 = map.det*c0_19*map.g00*map.g01;
  const real G28_0_19_1 = map.det*c0_19*map.g00*map.g11;
  const real G28_0_19_2 = map.det*c0_19*map.g00*map.g21;
  const real G28_1_19_0 = map.det*c0_19*map.g10*map.g01;
  const real G28_1_19_1 = map.det*c0_19*map.g10*map.g11;
  const real G28_1_19_2 = map.det*c0_19*map.g10*map.g21;
  const real G28_2_19_0 = map.det*c0_19*map.g20*map.g01;
  const real G28_2_19_1 = map.det*c0_19*map.g20*map.g11;
  const real G28_2_19_2 = map.det*c0_19*map.g20*map.g21;
  const real G29_0_20_0 = map.det*c0_20*map.g00*map.g02;
  const real G29_0_20_1 = map.det*c0_20*map.g00*map.g12;
  const real G29_0_20_2 = map.det*c0_20*map.g00*map.g22;
  const real G29_1_20_0 = map.det*c0_20*map.g10*map.g02;
  const real G29_1_20_1 = map.det*c0_20*map.g10*map.g12;
  const real G29_1_20_2 = map.det*c0_20*map.g10*map.g22;
  const real G29_2_20_0 = map.det*c0_20*map.g20*map.g02;
  const real G29_2_20_1 = map.det*c0_20*map.g20*map.g12;
  const real G29_2_20_2 = map.det*c0_20*map.g20*map.g22;
  const real G30_0_21_0 = map.det*c0_21*map.g00*map.g01;
  const real G30_0_21_1 = map.det*c0_21*map.g00*map.g11;
  const real G30_0_21_2 = map.det*c0_21*map.g00*map.g21;
  const real G30_1_21_0 = map.det*c0_21*map.g10*map.g01;
  const real G30_1_21_1 = map.det*c0_21*map.g10*map.g11;
  const real G30_1_21_2 = map.det*c0_21*map.g10*map.g21;
  const real G30_2_21_0 = map.det*c0_21*map.g20*map.g01;
  const real G30_2_21_1 = map.det*c0_21*map.g20*map.g11;
  const real G30_2_21_2 = map.det*c0_21*map.g20*map.g21;
  const real G31_0_21_0 = map.det*c0_21*map.g00*map.g00;
  const real G31_0_21_1 = map.det*c0_21*map.g00*map.g10;
  const real G31_0_21_2 = map.det*c0_21*map.g00*map.g20;
  const real G31_1_21_0 = map.det*c0_21*map.g10*map.g00;
  const real G31_1_21_1 = map.det*c0_21*map.g10*map.g10;
  const real G31_1_21_2 = map.det*c0_21*map.g10*map.g20;
  const real G31_2_21_0 = map.det*c0_21*map.g20*map.g00;
  const real G31_2_21_1 = map.det*c0_21*map.g20*map.g10;
  const real G31_2_21_2 = map.det*c0_21*map.g20*map.g20;
  const real G32_0_22_0 = map.det*c0_22*map.g00*map.g02;
  const real G32_0_22_1 = map.det*c0_22*map.g00*map.g12;
  const real G32_0_22_2 = map.det*c0_22*map.g00*map.g22;
  const real G32_1_22_0 = map.det*c0_22*map.g10*map.g02;
  const real G32_1_22_1 = map.det*c0_22*map.g10*map.g12;
  const real G32_1_22_2 = map.det*c0_22*map.g10*map.g22;
  const real G32_2_22_0 = map.det*c0_22*map.g20*map.g02;
  const real G32_2_22_1 = map.det*c0_22*map.g20*map.g12;
  const real G32_2_22_2 = map.det*c0_22*map.g20*map.g22;
  const real G33_0_22_0 = map.det*c0_22*map.g00*map.g00;
  const real G33_0_22_1 = map.det*c0_22*map.g00*map.g10;
  const real G33_0_22_2 = map.det*c0_22*map.g00*map.g20;
  const real G33_1_22_0 = map.det*c0_22*map.g10*map.g00;
  const real G33_1_22_1 = map.det*c0_22*map.g10*map.g10;
  const real G33_1_22_2 = map.det*c0_22*map.g10*map.g20;
  const real G33_2_22_0 = map.det*c0_22*map.g20*map.g00;
  const real G33_2_22_1 = map.det*c0_22*map.g20*map.g10;
  const real G33_2_22_2 = map.det*c0_22*map.g20*map.g20;
  const real G34_0_23_0 = map.det*c0_23*map.g00*map.g02;
  const real G34_0_23_1 = map.det*c0_23*map.g00*map.g12;
  const real G34_0_23_2 = map.det*c0_23*map.g00*map.g22;
  const real G34_1_23_0 = map.det*c0_23*map.g10*map.g02;
  const real G34_1_23_1 = map.det*c0_23*map.g10*map.g12;
  const real G34_1_23_2 = map.det*c0_23*map.g10*map.g22;
  const real G34_2_23_0 = map.det*c0_23*map.g20*map.g02;
  const real G34_2_23_1 = map.det*c0_23*map.g20*map.g12;
  const real G34_2_23_2 = map.det*c0_23*map.g20*map.g22;
  const real G35_0_23_0 = map.det*c0_23*map.g00*map.g01;
  const real G35_0_23_1 = map.det*c0_23*map.g00*map.g11;
  const real G35_0_23_2 = map.det*c0_23*map.g00*map.g21;
  const real G35_1_23_0 = map.det*c0_23*map.g10*map.g01;
  const real G35_1_23_1 = map.det*c0_23*map.g10*map.g11;
  const real G35_1_23_2 = map.det*c0_23*map.g10*map.g21;
  const real G35_2_23_0 = map.det*c0_23*map.g20*map.g01;
  const real G35_2_23_1 = map.det*c0_23*map.g20*map.g11;
  const real G35_2_23_2 = map.det*c0_23*map.g20*map.g21;
  const real G36_0_6_0 = map.det*c0_6*map.g01*map.g00;
  const real G36_0_6_1 = map.det*c0_6*map.g01*map.g10;
  const real G36_0_6_2 = map.det*c0_6*map.g01*map.g20;
  const real G36_1_6_0 = map.det*c0_6*map.g11*map.g00;
  const real G36_1_6_1 = map.det*c0_6*map.g11*map.g10;
  const real G36_1_6_2 = map.det*c0_6*map.g11*map.g20;
  const real G36_2_6_0 = map.det*c0_6*map.g21*map.g00;
  const real G36_2_6_1 = map.det*c0_6*map.g21*map.g10;
  const real G36_2_6_2 = map.det*c0_6*map.g21*map.g20;
  const real G37_0_7_0 = map.det*c0_7*map.g01*map.g01;
  const real G37_0_7_1 = map.det*c0_7*map.g01*map.g11;
  const real G37_0_7_2 = map.det*c0_7*map.g01*map.g21;
  const real G37_1_7_0 = map.det*c0_7*map.g11*map.g01;
  const real G37_1_7_1 = map.det*c0_7*map.g11*map.g11;
  const real G37_1_7_2 = map.det*c0_7*map.g11*map.g21;
  const real G37_2_7_0 = map.det*c0_7*map.g21*map.g01;
  const real G37_2_7_1 = map.det*c0_7*map.g21*map.g11;
  const real G37_2_7_2 = map.det*c0_7*map.g21*map.g21;
  const real G38_0_8_0 = map.det*c0_8*map.g01*map.g02;
  const real G38_0_8_1 = map.det*c0_8*map.g01*map.g12;
  const real G38_0_8_2 = map.det*c0_8*map.g01*map.g22;
  const real G38_1_8_0 = map.det*c0_8*map.g11*map.g02;
  const real G38_1_8_1 = map.det*c0_8*map.g11*map.g12;
  const real G38_1_8_2 = map.det*c0_8*map.g11*map.g22;
  const real G38_2_8_0 = map.det*c0_8*map.g21*map.g02;
  const real G38_2_8_1 = map.det*c0_8*map.g21*map.g12;
  const real G38_2_8_2 = map.det*c0_8*map.g21*map.g22;
  const real G39_0_9_0 = map.det*c0_9*map.g01*map.g01;
  const real G39_0_9_1 = map.det*c0_9*map.g01*map.g11;
  const real G39_0_9_2 = map.det*c0_9*map.g01*map.g21;
  const real G39_1_9_0 = map.det*c0_9*map.g11*map.g01;
  const real G39_1_9_1 = map.det*c0_9*map.g11*map.g11;
  const real G39_1_9_2 = map.det*c0_9*map.g11*map.g21;
  const real G39_2_9_0 = map.det*c0_9*map.g21*map.g01;
  const real G39_2_9_1 = map.det*c0_9*map.g21*map.g11;
  const real G39_2_9_2 = map.det*c0_9*map.g21*map.g21;
  const real G40_0_9_0 = map.det*c0_9*map.g01*map.g00;
  const real G40_0_9_1 = map.det*c0_9*map.g01*map.g10;
  const real G40_0_9_2 = map.det*c0_9*map.g01*map.g20;
  const real G40_1_9_0 = map.det*c0_9*map.g11*map.g00;
  const real G40_1_9_1 = map.det*c0_9*map.g11*map.g10;
  const real G40_1_9_2 = map.det*c0_9*map.g11*map.g20;
  const real G40_2_9_0 = map.det*c0_9*map.g21*map.g00;
  const real G40_2_9_1 = map.det*c0_9*map.g21*map.g10;
  const real G40_2_9_2 = map.det*c0_9*map.g21*map.g20;
  const real G41_0_10_0 = map.det*c0_10*map.g01*map.g02;
  const real G41_0_10_1 = map.det*c0_10*map.g01*map.g12;
  const real G41_0_10_2 = map.det*c0_10*map.g01*map.g22;
  const real G41_1_10_0 = map.det*c0_10*map.g11*map.g02;
  const real G41_1_10_1 = map.det*c0_10*map.g11*map.g12;
  const real G41_1_10_2 = map.det*c0_10*map.g11*map.g22;
  const real G41_2_10_0 = map.det*c0_10*map.g21*map.g02;
  const real G41_2_10_1 = map.det*c0_10*map.g21*map.g12;
  const real G41_2_10_2 = map.det*c0_10*map.g21*map.g22;
  const real G42_0_10_0 = map.det*c0_10*map.g01*map.g00;
  const real G42_0_10_1 = map.det*c0_10*map.g01*map.g10;
  const real G42_0_10_2 = map.det*c0_10*map.g01*map.g20;
  const real G42_1_10_0 = map.det*c0_10*map.g11*map.g00;
  const real G42_1_10_1 = map.det*c0_10*map.g11*map.g10;
  const real G42_1_10_2 = map.det*c0_10*map.g11*map.g20;
  const real G42_2_10_0 = map.det*c0_10*map.g21*map.g00;
  const real G42_2_10_1 = map.det*c0_10*map.g21*map.g10;
  const real G42_2_10_2 = map.det*c0_10*map.g21*map.g20;
  const real G43_0_11_0 = map.det*c0_11*map.g01*map.g02;
  const real G43_0_11_1 = map.det*c0_11*map.g01*map.g12;
  const real G43_0_11_2 = map.det*c0_11*map.g01*map.g22;
  const real G43_1_11_0 = map.det*c0_11*map.g11*map.g02;
  const real G43_1_11_1 = map.det*c0_11*map.g11*map.g12;
  const real G43_1_11_2 = map.det*c0_11*map.g11*map.g22;
  const real G43_2_11_0 = map.det*c0_11*map.g21*map.g02;
  const real G43_2_11_1 = map.det*c0_11*map.g21*map.g12;
  const real G43_2_11_2 = map.det*c0_11*map.g21*map.g22;
  const real G44_0_11_0 = map.det*c0_11*map.g01*map.g01;
  const real G44_0_11_1 = map.det*c0_11*map.g01*map.g11;
  const real G44_0_11_2 = map.det*c0_11*map.g01*map.g21;
  const real G44_1_11_0 = map.det*c0_11*map.g11*map.g01;
  const real G44_1_11_1 = map.det*c0_11*map.g11*map.g11;
  const real G44_1_11_2 = map.det*c0_11*map.g11*map.g21;
  const real G44_2_11_0 = map.det*c0_11*map.g21*map.g01;
  const real G44_2_11_1 = map.det*c0_11*map.g21*map.g11;
  const real G44_2_11_2 = map.det*c0_11*map.g21*map.g21;
  const real G45_0_30_0 = map.det*c0_30*map.g02*map.g00;
  const real G45_0_30_1 = map.det*c0_30*map.g02*map.g10;
  const real G45_0_30_2 = map.det*c0_30*map.g02*map.g20;
  const real G45_1_30_0 = map.det*c0_30*map.g12*map.g00;
  const real G45_1_30_1 = map.det*c0_30*map.g12*map.g10;
  const real G45_1_30_2 = map.det*c0_30*map.g12*map.g20;
  const real G45_2_30_0 = map.det*c0_30*map.g22*map.g00;
  const real G45_2_30_1 = map.det*c0_30*map.g22*map.g10;
  const real G45_2_30_2 = map.det*c0_30*map.g22*map.g20;
  const real G46_0_31_0 = map.det*c0_31*map.g02*map.g01;
  const real G46_0_31_1 = map.det*c0_31*map.g02*map.g11;
  const real G46_0_31_2 = map.det*c0_31*map.g02*map.g21;
  const real G46_1_31_0 = map.det*c0_31*map.g12*map.g01;
  const real G46_1_31_1 = map.det*c0_31*map.g12*map.g11;
  const real G46_1_31_2 = map.det*c0_31*map.g12*map.g21;
  const real G46_2_31_0 = map.det*c0_31*map.g22*map.g01;
  const real G46_2_31_1 = map.det*c0_31*map.g22*map.g11;
  const real G46_2_31_2 = map.det*c0_31*map.g22*map.g21;
  const real G47_0_32_0 = map.det*c0_32*map.g02*map.g02;
  const real G47_0_32_1 = map.det*c0_32*map.g02*map.g12;
  const real G47_0_32_2 = map.det*c0_32*map.g02*map.g22;
  const real G47_1_32_0 = map.det*c0_32*map.g12*map.g02;
  const real G47_1_32_1 = map.det*c0_32*map.g12*map.g12;
  const real G47_1_32_2 = map.det*c0_32*map.g12*map.g22;
  const real G47_2_32_0 = map.det*c0_32*map.g22*map.g02;
  const real G47_2_32_1 = map.det*c0_32*map.g22*map.g12;
  const real G47_2_32_2 = map.det*c0_32*map.g22*map.g22;
  const real G48_0_33_0 = map.det*c0_33*map.g02*map.g01;
  const real G48_0_33_1 = map.det*c0_33*map.g02*map.g11;
  const real G48_0_33_2 = map.det*c0_33*map.g02*map.g21;
  const real G48_1_33_0 = map.det*c0_33*map.g12*map.g01;
  const real G48_1_33_1 = map.det*c0_33*map.g12*map.g11;
  const real G48_1_33_2 = map.det*c0_33*map.g12*map.g21;
  const real G48_2_33_0 = map.det*c0_33*map.g22*map.g01;
  const real G48_2_33_1 = map.det*c0_33*map.g22*map.g11;
  const real G48_2_33_2 = map.det*c0_33*map.g22*map.g21;
  const real G49_0_33_0 = map.det*c0_33*map.g02*map.g00;
  const real G49_0_33_1 = map.det*c0_33*map.g02*map.g10;
  const real G49_0_33_2 = map.det*c0_33*map.g02*map.g20;
  const real G49_1_33_0 = map.det*c0_33*map.g12*map.g00;
  const real G49_1_33_1 = map.det*c0_33*map.g12*map.g10;
  const real G49_1_33_2 = map.det*c0_33*map.g12*map.g20;
  const real G49_2_33_0 = map.det*c0_33*map.g22*map.g00;
  const real G49_2_33_1 = map.det*c0_33*map.g22*map.g10;
  const real G49_2_33_2 = map.det*c0_33*map.g22*map.g20;
  const real G50_0_34_0 = map.det*c0_34*map.g02*map.g02;
  const real G50_0_34_1 = map.det*c0_34*map.g02*map.g12;
  const real G50_0_34_2 = map.det*c0_34*map.g02*map.g22;
  const real G50_1_34_0 = map.det*c0_34*map.g12*map.g02;
  const real G50_1_34_1 = map.det*c0_34*map.g12*map.g12;
  const real G50_1_34_2 = map.det*c0_34*map.g12*map.g22;
  const real G50_2_34_0 = map.det*c0_34*map.g22*map.g02;
  const real G50_2_34_1 = map.det*c0_34*map.g22*map.g12;
  const real G50_2_34_2 = map.det*c0_34*map.g22*map.g22;
  const real G51_0_34_0 = map.det*c0_34*map.g02*map.g00;
  const real G51_0_34_1 = map.det*c0_34*map.g02*map.g10;
  const real G51_0_34_2 = map.det*c0_34*map.g02*map.g20;
  const real G51_1_34_0 = map.det*c0_34*map.g12*map.g00;
  const real G51_1_34_1 = map.det*c0_34*map.g12*map.g10;
  const real G51_1_34_2 = map.det*c0_34*map.g12*map.g20;
  const real G51_2_34_0 = map.det*c0_34*map.g22*map.g00;
  const real G51_2_34_1 = map.det*c0_34*map.g22*map.g10;
  const real G51_2_34_2 = map.det*c0_34*map.g22*map.g20;
  const real G52_0_35_0 = map.det*c0_35*map.g02*map.g02;
  const real G52_0_35_1 = map.det*c0_35*map.g02*map.g12;
  const real G52_0_35_2 = map.det*c0_35*map.g02*map.g22;
  const real G52_1_35_0 = map.det*c0_35*map.g12*map.g02;
  const real G52_1_35_1 = map.det*c0_35*map.g12*map.g12;
  const real G52_1_35_2 = map.det*c0_35*map.g12*map.g22;
  const real G52_2_35_0 = map.det*c0_35*map.g22*map.g02;
  const real G52_2_35_1 = map.det*c0_35*map.g22*map.g12;
  const real G52_2_35_2 = map.det*c0_35*map.g22*map.g22;
  const real G53_0_35_0 = map.det*c0_35*map.g02*map.g01;
  const real G53_0_35_1 = map.det*c0_35*map.g02*map.g11;
  const real G53_0_35_2 = map.det*c0_35*map.g02*map.g21;
  const real G53_1_35_0 = map.det*c0_35*map.g12*map.g01;
  const real G53_1_35_1 = map.det*c0_35*map.g12*map.g11;
  const real G53_1_35_2 = map.det*c0_35*map.g12*map.g21;
  const real G53_2_35_0 = map.det*c0_35*map.g22*map.g01;
  const real G53_2_35_1 = map.det*c0_35*map.g22*map.g11;
  const real G53_2_35_2 = map.det*c0_35*map.g22*map.g21;
  const real G54_0_24_0 = map.det*c0_24*map.g00*map.g00;
  const real G54_0_24_1 = map.det*c0_24*map.g00*map.g10;
  const real G54_0_24_2 = map.det*c0_24*map.g00*map.g20;
  const real G54_1_24_0 = map.det*c0_24*map.g10*map.g00;
  const real G54_1_24_1 = map.det*c0_24*map.g10*map.g10;
  const real G54_1_24_2 = map.det*c0_24*map.g10*map.g20;
  const real G54_2_24_0 = map.det*c0_24*map.g20*map.g00;
  const real G54_2_24_1 = map.det*c0_24*map.g20*map.g10;
  const real G54_2_24_2 = map.det*c0_24*map.g20*map.g20;
  const real G55_0_25_0 = map.det*c0_25*map.g00*map.g01;
  const real G55_0_25_1 = map.det*c0_25*map.g00*map.g11;
  const real G55_0_25_2 = map.det*c0_25*map.g00*map.g21;
  const real G55_1_25_0 = map.det*c0_25*map.g10*map.g01;
  const real G55_1_25_1 = map.det*c0_25*map.g10*map.g11;
  const real G55_1_25_2 = map.det*c0_25*map.g10*map.g21;
  const real G55_2_25_0 = map.det*c0_25*map.g20*map.g01;
  const real G55_2_25_1 = map.det*c0_25*map.g20*map.g11;
  const real G55_2_25_2 = map.det*c0_25*map.g20*map.g21;
  const real G56_0_26_0 = map.det*c0_26*map.g00*map.g02;
  const real G56_0_26_1 = map.det*c0_26*map.g00*map.g12;
  const real G56_0_26_2 = map.det*c0_26*map.g00*map.g22;
  const real G56_1_26_0 = map.det*c0_26*map.g10*map.g02;
  const real G56_1_26_1 = map.det*c0_26*map.g10*map.g12;
  const real G56_1_26_2 = map.det*c0_26*map.g10*map.g22;
  const real G56_2_26_0 = map.det*c0_26*map.g20*map.g02;
  const real G56_2_26_1 = map.det*c0_26*map.g20*map.g12;
  const real G56_2_26_2 = map.det*c0_26*map.g20*map.g22;
  const real G57_0_27_0 = map.det*c0_27*map.g00*map.g01;
  const real G57_0_27_1 = map.det*c0_27*map.g00*map.g11;
  const real G57_0_27_2 = map.det*c0_27*map.g00*map.g21;
  const real G57_1_27_0 = map.det*c0_27*map.g10*map.g01;
  const real G57_1_27_1 = map.det*c0_27*map.g10*map.g11;
  const real G57_1_27_2 = map.det*c0_27*map.g10*map.g21;
  const real G57_2_27_0 = map.det*c0_27*map.g20*map.g01;
  const real G57_2_27_1 = map.det*c0_27*map.g20*map.g11;
  const real G57_2_27_2 = map.det*c0_27*map.g20*map.g21;
  const real G58_0_27_0 = map.det*c0_27*map.g00*map.g00;
  const real G58_0_27_1 = map.det*c0_27*map.g00*map.g10;
  const real G58_0_27_2 = map.det*c0_27*map.g00*map.g20;
  const real G58_1_27_0 = map.det*c0_27*map.g10*map.g00;
  const real G58_1_27_1 = map.det*c0_27*map.g10*map.g10;
  const real G58_1_27_2 = map.det*c0_27*map.g10*map.g20;
  const real G58_2_27_0 = map.det*c0_27*map.g20*map.g00;
  const real G58_2_27_1 = map.det*c0_27*map.g20*map.g10;
  const real G58_2_27_2 = map.det*c0_27*map.g20*map.g20;
  const real G59_0_28_0 = map.det*c0_28*map.g00*map.g02;
  const real G59_0_28_1 = map.det*c0_28*map.g00*map.g12;
  const real G59_0_28_2 = map.det*c0_28*map.g00*map.g22;
  const real G59_1_28_0 = map.det*c0_28*map.g10*map.g02;
  const real G59_1_28_1 = map.det*c0_28*map.g10*map.g12;
  const real G59_1_28_2 = map.det*c0_28*map.g10*map.g22;
  const real G59_2_28_0 = map.det*c0_28*map.g20*map.g02;
  const real G59_2_28_1 = map.det*c0_28*map.g20*map.g12;
  const real G59_2_28_2 = map.det*c0_28*map.g20*map.g22;
  const real G60_0_28_0 = map.det*c0_28*map.g00*map.g00;
  const real G60_0_28_1 = map.det*c0_28*map.g00*map.g10;
  const real G60_0_28_2 = map.det*c0_28*map.g00*map.g20;
  const real G60_1_28_0 = map.det*c0_28*map.g10*map.g00;
  const real G60_1_28_1 = map.det*c0_28*map.g10*map.g10;
  const real G60_1_28_2 = map.det*c0_28*map.g10*map.g20;
  const real G60_2_28_0 = map.det*c0_28*map.g20*map.g00;
  const real G60_2_28_1 = map.det*c0_28*map.g20*map.g10;
  const real G60_2_28_2 = map.det*c0_28*map.g20*map.g20;
  const real G61_0_29_0 = map.det*c0_29*map.g00*map.g02;
  const real G61_0_29_1 = map.det*c0_29*map.g00*map.g12;
  const real G61_0_29_2 = map.det*c0_29*map.g00*map.g22;
  const real G61_1_29_0 = map.det*c0_29*map.g10*map.g02;
  const real G61_1_29_1 = map.det*c0_29*map.g10*map.g12;
  const real G61_1_29_2 = map.det*c0_29*map.g10*map.g22;
  const real G61_2_29_0 = map.det*c0_29*map.g20*map.g02;
  const real G61_2_29_1 = map.det*c0_29*map.g20*map.g12;
  const real G61_2_29_2 = map.det*c0_29*map.g20*map.g22;
  const real G62_0_29_0 = map.det*c0_29*map.g00*map.g01;
  const real G62_0_29_1 = map.det*c0_29*map.g00*map.g11;
  const real G62_0_29_2 = map.det*c0_29*map.g00*map.g21;
  const real G62_1_29_0 = map.det*c0_29*map.g10*map.g01;
  const real G62_1_29_1 = map.det*c0_29*map.g10*map.g11;
  const real G62_1_29_2 = map.det*c0_29*map.g10*map.g21;
  const real G62_2_29_0 = map.det*c0_29*map.g20*map.g01;
  const real G62_2_29_1 = map.det*c0_29*map.g20*map.g11;
  const real G62_2_29_2 = map.det*c0_29*map.g20*map.g21;
  const real G63_0_30_0 = map.det*c0_30*map.g01*map.g00;
  const real G63_0_30_1 = map.det*c0_30*map.g01*map.g10;
  const real G63_0_30_2 = map.det*c0_30*map.g01*map.g20;
  const real G63_1_30_0 = map.det*c0_30*map.g11*map.g00;
  const real G63_1_30_1 = map.det*c0_30*map.g11*map.g10;
  const real G63_1_30_2 = map.det*c0_30*map.g11*map.g20;
  const real G63_2_30_0 = map.det*c0_30*map.g21*map.g00;
  const real G63_2_30_1 = map.det*c0_30*map.g21*map.g10;
  const real G63_2_30_2 = map.det*c0_30*map.g21*map.g20;
  const real G64_0_31_0 = map.det*c0_31*map.g01*map.g01;
  const real G64_0_31_1 = map.det*c0_31*map.g01*map.g11;
  const real G64_0_31_2 = map.det*c0_31*map.g01*map.g21;
  const real G64_1_31_0 = map.det*c0_31*map.g11*map.g01;
  const real G64_1_31_1 = map.det*c0_31*map.g11*map.g11;
  const real G64_1_31_2 = map.det*c0_31*map.g11*map.g21;
  const real G64_2_31_0 = map.det*c0_31*map.g21*map.g01;
  const real G64_2_31_1 = map.det*c0_31*map.g21*map.g11;
  const real G64_2_31_2 = map.det*c0_31*map.g21*map.g21;
  const real G65_0_32_0 = map.det*c0_32*map.g01*map.g02;
  const real G65_0_32_1 = map.det*c0_32*map.g01*map.g12;
  const real G65_0_32_2 = map.det*c0_32*map.g01*map.g22;
  const real G65_1_32_0 = map.det*c0_32*map.g11*map.g02;
  const real G65_1_32_1 = map.det*c0_32*map.g11*map.g12;
  const real G65_1_32_2 = map.det*c0_32*map.g11*map.g22;
  const real G65_2_32_0 = map.det*c0_32*map.g21*map.g02;
  const real G65_2_32_1 = map.det*c0_32*map.g21*map.g12;
  const real G65_2_32_2 = map.det*c0_32*map.g21*map.g22;
  const real G66_0_33_0 = map.det*c0_33*map.g01*map.g01;
  const real G66_0_33_1 = map.det*c0_33*map.g01*map.g11;
  const real G66_0_33_2 = map.det*c0_33*map.g01*map.g21;
  const real G66_1_33_0 = map.det*c0_33*map.g11*map.g01;
  const real G66_1_33_1 = map.det*c0_33*map.g11*map.g11;
  const real G66_1_33_2 = map.det*c0_33*map.g11*map.g21;
  const real G66_2_33_0 = map.det*c0_33*map.g21*map.g01;
  const real G66_2_33_1 = map.det*c0_33*map.g21*map.g11;
  const real G66_2_33_2 = map.det*c0_33*map.g21*map.g21;
  const real G67_0_33_0 = map.det*c0_33*map.g01*map.g00;
  const real G67_0_33_1 = map.det*c0_33*map.g01*map.g10;
  const real G67_0_33_2 = map.det*c0_33*map.g01*map.g20;
  const real G67_1_33_0 = map.det*c0_33*map.g11*map.g00;
  const real G67_1_33_1 = map.det*c0_33*map.g11*map.g10;
  const real G67_1_33_2 = map.det*c0_33*map.g11*map.g20;
  const real G67_2_33_0 = map.det*c0_33*map.g21*map.g00;
  const real G67_2_33_1 = map.det*c0_33*map.g21*map.g10;
  const real G67_2_33_2 = map.det*c0_33*map.g21*map.g20;
  const real G68_0_34_0 = map.det*c0_34*map.g01*map.g02;
  const real G68_0_34_1 = map.det*c0_34*map.g01*map.g12;
  const real G68_0_34_2 = map.det*c0_34*map.g01*map.g22;
  const real G68_1_34_0 = map.det*c0_34*map.g11*map.g02;
  const real G68_1_34_1 = map.det*c0_34*map.g11*map.g12;
  const real G68_1_34_2 = map.det*c0_34*map.g11*map.g22;
  const real G68_2_34_0 = map.det*c0_34*map.g21*map.g02;
  const real G68_2_34_1 = map.det*c0_34*map.g21*map.g12;
  const real G68_2_34_2 = map.det*c0_34*map.g21*map.g22;
  const real G69_0_34_0 = map.det*c0_34*map.g01*map.g00;
  const real G69_0_34_1 = map.det*c0_34*map.g01*map.g10;
  const real G69_0_34_2 = map.det*c0_34*map.g01*map.g20;
  const real G69_1_34_0 = map.det*c0_34*map.g11*map.g00;
  const real G69_1_34_1 = map.det*c0_34*map.g11*map.g10;
  const real G69_1_34_2 = map.det*c0_34*map.g11*map.g20;
  const real G69_2_34_0 = map.det*c0_34*map.g21*map.g00;
  const real G69_2_34_1 = map.det*c0_34*map.g21*map.g10;
  const real G69_2_34_2 = map.det*c0_34*map.g21*map.g20;
  const real G70_0_35_0 = map.det*c0_35*map.g01*map.g02;
  const real G70_0_35_1 = map.det*c0_35*map.g01*map.g12;
  const real G70_0_35_2 = map.det*c0_35*map.g01*map.g22;
  const real G70_1_35_0 = map.det*c0_35*map.g11*map.g02;
  const real G70_1_35_1 = map.det*c0_35*map.g11*map.g12;
  const real G70_1_35_2 = map.det*c0_35*map.g11*map.g22;
  const real G70_2_35_0 = map.det*c0_35*map.g21*map.g02;
  const real G70_2_35_1 = map.det*c0_35*map.g21*map.g12;
  const real G70_2_35_2 = map.det*c0_35*map.g21*map.g22;
  const real G71_0_35_0 = map.det*c0_35*map.g01*map.g01;
  const real G71_0_35_1 = map.det*c0_35*map.g01*map.g11;
  const real G71_0_35_2 = map.det*c0_35*map.g01*map.g21;
  const real G71_1_35_0 = map.det*c0_35*map.g11*map.g01;
  const real G71_1_35_1 = map.det*c0_35*map.g11*map.g11;
  const real G71_1_35_2 = map.det*c0_35*map.g11*map.g21;
  const real G71_2_35_0 = map.det*c0_35*map.g21*map.g01;
  const real G71_2_35_1 = map.det*c0_35*map.g21*map.g11;
  const real G71_2_35_2 = map.det*c0_35*map.g21*map.g21;
  const real G72_0_12_0 = map.det*c0_12*map.g02*map.g00;
  const real G72_0_12_1 = map.det*c0_12*map.g02*map.g10;
  const real G72_0_12_2 = map.det*c0_12*map.g02*map.g20;
  const real G72_1_12_0 = map.det*c0_12*map.g12*map.g00;
  const real G72_1_12_1 = map.det*c0_12*map.g12*map.g10;
  const real G72_1_12_2 = map.det*c0_12*map.g12*map.g20;
  const real G72_2_12_0 = map.det*c0_12*map.g22*map.g00;
  const real G72_2_12_1 = map.det*c0_12*map.g22*map.g10;
  const real G72_2_12_2 = map.det*c0_12*map.g22*map.g20;
  const real G73_0_13_0 = map.det*c0_13*map.g02*map.g01;
  const real G73_0_13_1 = map.det*c0_13*map.g02*map.g11;
  const real G73_0_13_2 = map.det*c0_13*map.g02*map.g21;
  const real G73_1_13_0 = map.det*c0_13*map.g12*map.g01;
  const real G73_1_13_1 = map.det*c0_13*map.g12*map.g11;
  const real G73_1_13_2 = map.det*c0_13*map.g12*map.g21;
  const real G73_2_13_0 = map.det*c0_13*map.g22*map.g01;
  const real G73_2_13_1 = map.det*c0_13*map.g22*map.g11;
  const real G73_2_13_2 = map.det*c0_13*map.g22*map.g21;
  const real G74_0_14_0 = map.det*c0_14*map.g02*map.g02;
  const real G74_0_14_1 = map.det*c0_14*map.g02*map.g12;
  const real G74_0_14_2 = map.det*c0_14*map.g02*map.g22;
  const real G74_1_14_0 = map.det*c0_14*map.g12*map.g02;
  const real G74_1_14_1 = map.det*c0_14*map.g12*map.g12;
  const real G74_1_14_2 = map.det*c0_14*map.g12*map.g22;
  const real G74_2_14_0 = map.det*c0_14*map.g22*map.g02;
  const real G74_2_14_1 = map.det*c0_14*map.g22*map.g12;
  const real G74_2_14_2 = map.det*c0_14*map.g22*map.g22;
  const real G75_0_15_0 = map.det*c0_15*map.g02*map.g01;
  const real G75_0_15_1 = map.det*c0_15*map.g02*map.g11;
  const real G75_0_15_2 = map.det*c0_15*map.g02*map.g21;
  const real G75_1_15_0 = map.det*c0_15*map.g12*map.g01;
  const real G75_1_15_1 = map.det*c0_15*map.g12*map.g11;
  const real G75_1_15_2 = map.det*c0_15*map.g12*map.g21;
  const real G75_2_15_0 = map.det*c0_15*map.g22*map.g01;
  const real G75_2_15_1 = map.det*c0_15*map.g22*map.g11;
  const real G75_2_15_2 = map.det*c0_15*map.g22*map.g21;
  const real G76_0_15_0 = map.det*c0_15*map.g02*map.g00;
  const real G76_0_15_1 = map.det*c0_15*map.g02*map.g10;
  const real G76_0_15_2 = map.det*c0_15*map.g02*map.g20;
  const real G76_1_15_0 = map.det*c0_15*map.g12*map.g00;
  const real G76_1_15_1 = map.det*c0_15*map.g12*map.g10;
  const real G76_1_15_2 = map.det*c0_15*map.g12*map.g20;
  const real G76_2_15_0 = map.det*c0_15*map.g22*map.g00;
  const real G76_2_15_1 = map.det*c0_15*map.g22*map.g10;
  const real G76_2_15_2 = map.det*c0_15*map.g22*map.g20;
  const real G77_0_16_0 = map.det*c0_16*map.g02*map.g02;
  const real G77_0_16_1 = map.det*c0_16*map.g02*map.g12;
  const real G77_0_16_2 = map.det*c0_16*map.g02*map.g22;
  const real G77_1_16_0 = map.det*c0_16*map.g12*map.g02;
  const real G77_1_16_1 = map.det*c0_16*map.g12*map.g12;
  const real G77_1_16_2 = map.det*c0_16*map.g12*map.g22;
  const real G77_2_16_0 = map.det*c0_16*map.g22*map.g02;
  const real G77_2_16_1 = map.det*c0_16*map.g22*map.g12;
  const real G77_2_16_2 = map.det*c0_16*map.g22*map.g22;
  const real G78_0_16_0 = map.det*c0_16*map.g02*map.g00;
  const real G78_0_16_1 = map.det*c0_16*map.g02*map.g10;
  const real G78_0_16_2 = map.det*c0_16*map.g02*map.g20;
  const real G78_1_16_0 = map.det*c0_16*map.g12*map.g00;
  const real G78_1_16_1 = map.det*c0_16*map.g12*map.g10;
  const real G78_1_16_2 = map.det*c0_16*map.g12*map.g20;
  const real G78_2_16_0 = map.det*c0_16*map.g22*map.g00;
  const real G78_2_16_1 = map.det*c0_16*map.g22*map.g10;
  const real G78_2_16_2 = map.det*c0_16*map.g22*map.g20;
  const real G79_0_17_0 = map.det*c0_17*map.g02*map.g02;
  const real G79_0_17_1 = map.det*c0_17*map.g02*map.g12;
  const real G79_0_17_2 = map.det*c0_17*map.g02*map.g22;
  const real G79_1_17_0 = map.det*c0_17*map.g12*map.g02;
  const real G79_1_17_1 = map.det*c0_17*map.g12*map.g12;
  const real G79_1_17_2 = map.det*c0_17*map.g12*map.g22;
  const real G79_2_17_0 = map.det*c0_17*map.g22*map.g02;
  const real G79_2_17_1 = map.det*c0_17*map.g22*map.g12;
  const real G79_2_17_2 = map.det*c0_17*map.g22*map.g22;
  const real G80_0_17_0 = map.det*c0_17*map.g02*map.g01;
  const real G80_0_17_1 = map.det*c0_17*map.g02*map.g11;
  const real G80_0_17_2 = map.det*c0_17*map.g02*map.g21;
  const real G80_1_17_0 = map.det*c0_17*map.g12*map.g01;
  const real G80_1_17_1 = map.det*c0_17*map.g12*map.g11;
  const real G80_1_17_2 = map.det*c0_17*map.g12*map.g21;
  const real G80_2_17_0 = map.det*c0_17*map.g22*map.g01;
  const real G80_2_17_1 = map.det*c0_17*map.g22*map.g11;
  const real G80_2_17_2 = map.det*c0_17*map.g22*map.g21;

  // Compute element tensor
  block[0] = 1.666666666666664e-01*G0_0_0_0 + 1.666666666666664e-01*G0_0_0_1 + 1.666666666666664e-01*G0_0_0_2 + 1.666666666666664e-01*G0_1_0_0 + 1.666666666666664e-01*G0_1_0_1 + 1.666666666666664e-01*G0_1_0_2 + 1.666666666666664e-01*G0_2_0_0 + 1.666666666666664e-01*G0_2_0_1 + 1.666666666666664e-01*G0_2_0_2 + 1.666666666666664e-01*G3_0_3_0 + 1.666666666666664e-01*G3_0_3_1 + 1.666666666666664e-01*G3_0_3_2 + 1.666666666666664e-01*G3_1_3_0 + 1.666666666666664e-01*G3_1_3_1 + 1.666666666666664e-01*G3_1_3_2 + 1.666666666666664e-01*G3_2_3_0 + 1.666666666666664e-01*G3_2_3_1 + 1.666666666666664e-01*G3_2_3_2 + 1.666666666666664e-01*G5_0_4_0 + 1.666666666666664e-01*G5_0_4_1 + 1.666666666666664e-01*G5_0_4_2 + 1.666666666666664e-01*G5_1_4_0 + 1.666666666666664e-01*G5_1_4_1 + 1.666666666666664e-01*G5_1_4_2 + 1.666666666666664e-01*G5_2_4_0 + 1.666666666666664e-01*G5_2_4_1 + 1.666666666666664e-01*G5_2_4_2 + 1.666666666666664e-01*G9_0_18_0 + 1.666666666666664e-01*G9_0_18_1 + 1.666666666666664e-01*G9_0_18_2 + 1.666666666666664e-01*G9_1_18_0 + 1.666666666666664e-01*G9_1_18_1 + 1.666666666666664e-01*G9_1_18_2 + 1.666666666666664e-01*G9_2_18_0 + 1.666666666666664e-01*G9_2_18_1 + 1.666666666666664e-01*G9_2_18_2 + 1.666666666666664e-01*G12_0_21_0 + 1.666666666666664e-01*G12_0_21_1 + 1.666666666666664e-01*G12_0_21_2 + 1.666666666666664e-01*G12_1_21_0 + 1.666666666666664e-01*G12_1_21_1 + 1.666666666666664e-01*G12_1_21_2 + 1.666666666666664e-01*G12_2_21_0 + 1.666666666666664e-01*G12_2_21_1 + 1.666666666666664e-01*G12_2_21_2 + 1.666666666666664e-01*G14_0_22_0 + 1.666666666666664e-01*G14_0_22_1 + 1.666666666666664e-01*G14_0_22_2 + 1.666666666666664e-01*G14_1_22_0 + 1.666666666666664e-01*G14_1_22_1 + 1.666666666666664e-01*G14_1_22_2 + 1.666666666666664e-01*G14_2_22_0 + 1.666666666666664e-01*G14_2_22_1 + 1.666666666666664e-01*G14_2_22_2 + 1.666666666666664e-01*G18_0_24_0 + 1.666666666666664e-01*G18_0_24_1 + 1.666666666666664e-01*G18_0_24_2 + 1.666666666666664e-01*G18_1_24_0 + 1.666666666666664e-01*G18_1_24_1 + 1.666666666666664e-01*G18_1_24_2 + 1.666666666666664e-01*G18_2_24_0 + 1.666666666666664e-01*G18_2_24_1 + 1.666666666666664e-01*G18_2_24_2 + 1.666666666666664e-01*G21_0_27_0 + 1.666666666666664e-01*G21_0_27_1 + 1.666666666666664e-01*G21_0_27_2 + 1.666666666666664e-01*G21_1_27_0 + 1.666666666666664e-01*G21_1_27_1 + 1.666666666666664e-01*G21_1_27_2 + 1.666666666666664e-01*G21_2_27_0 + 1.666666666666664e-01*G21_2_27_1 + 1.666666666666664e-01*G21_2_27_2 + 1.666666666666664e-01*G23_0_28_0 + 1.666666666666664e-01*G23_0_28_1 + 1.666666666666664e-01*G23_0_28_2 + 1.666666666666664e-01*G23_1_28_0 + 1.666666666666664e-01*G23_1_28_1 + 1.666666666666664e-01*G23_1_28_2 + 1.666666666666664e-01*G23_2_28_0 + 1.666666666666664e-01*G23_2_28_1 + 1.666666666666664e-01*G23_2_28_2;
  block[1] = -1.666666666666664e-01*G0_0_0_0 - 1.666666666666664e-01*G0_1_0_0 - 1.666666666666664e-01*G0_2_0_0 - 1.666666666666664e-01*G3_0_3_0 - 1.666666666666664e-01*G3_1_3_0 - 1.666666666666664e-01*G3_2_3_0 - 1.666666666666664e-01*G5_0_4_0 - 1.666666666666664e-01*G5_1_4_0 - 1.666666666666664e-01*G5_2_4_0 - 1.666666666666664e-01*G9_0_18_0 - 1.666666666666664e-01*G9_1_18_0 - 1.666666666666664e-01*G9_2_18_0 - 1.666666666666664e-01*G12_0_21_0 - 1.666666666666664e-01*G12_1_21_0 - 1.666666666666664e-01*G12_2_21_0 - 1.666666666666664e-01*G14_0_22_0 - 1.666666666666664e-01*G14_1_22_0 - 1.666666666666664e-01*G14_2_22_0 - 1.666666666666664e-01*G18_0_24_0 - 1.666666666666664e-01*G18_1_24_0 - 1.666666666666664e-01*G18_2_24_0 - 1.666666666666664e-01*G21_0_27_0 - 1.666666666666664e-01*G21_1_27_0 - 1.666666666666664e-01*G21_2_27_0 - 1.666666666666664e-01*G23_0_28_0 - 1.666666666666664e-01*G23_1_28_0 - 1.666666666666664e-01*G23_2_28_0;
  block[2] = -1.666666666666664e-01*G0_0_0_1 - 1.666666666666664e-01*G0_1_0_1 - 1.666666666666664e-01*G0_2_0_1 - 1.666666666666664e-01*G3_0_3_1 - 1.666666666666664e-01*G3_1_3_1 - 1.666666666666664e-01*G3_2_3_1 - 1.666666666666664e-01*G5_0_4_1 - 1.666666666666664e-01*G5_1_4_1 - 1.666666666666664e-01*G5_2_4_1 - 1.666666666666664e-01*G9_0_18_1 - 1.666666666666664e-01*G9_1_18_1 - 1.666666666666664e-01*G9_2_18_1 - 1.666666666666664e-01*G12_0_21_1 - 1.666666666666664e-01*G12_1_21_1 - 1.666666666666664e-01*G12_2_21_1 - 1.666666666666664e-01*G14_0_22_1 - 1.666666666666664e-01*G14_1_22_1 - 1.666666666666664e-01*G14_2_22_1 - 1.666666666666664e-01*G18_0_24_1 - 1.666666666666664e-01*G18_1_24_1 - 1.666666666666664e-01*G18_2_24_1 - 1.666666666666664e-01*G21_0_27_1 - 1.666666666666664e-01*G21_1_27_1 - 1.666666666666664e-01*G21_2_27_1 - 1.666666666666664e-01*G23_0_28_1 - 1.666666666666664e-01*G23_1_28_1 - 1.666666666666664e-01*G23_2_28_1;
  block[3] = -1.666666666666664e-01*G0_0_0_2 - 1.666666666666664e-01*G0_1_0_2 - 1.666666666666664e-01*G0_2_0_2 - 1.666666666666664e-01*G3_0_3_2 - 1.666666666666664e-01*G3_1_3_2 - 1.666666666666664e-01*G3_2_3_2 - 1.666666666666664e-01*G5_0_4_2 - 1.666666666666664e-01*G5_1_4_2 - 1.666666666666664e-01*G5_2_4_2 - 1.666666666666664e-01*G9_0_18_2 - 1.666666666666664e-01*G9_1_18_2 - 1.666666666666664e-01*G9_2_18_2 - 1.666666666666664e-01*G12_0_21_2 - 1.666666666666664e-01*G12_1_21_2 - 1.666666666666664e-01*G12_2_21_2 - 1.666666666666664e-01*G14_0_22_2 - 1.666666666666664e-01*G14_1_22_2 - 1.666666666666664e-01*G14_2_22_2 - 1.666666666666664e-01*G18_0_24_2 - 1.666666666666664e-01*G18_1_24_2 - 1.666666666666664e-01*G18_2_24_2 - 1.666666666666664e-01*G21_0_27_2 - 1.666666666666664e-01*G21_1_27_2 - 1.666666666666664e-01*G21_2_27_2 - 1.666666666666664e-01*G23_0_28_2 - 1.666666666666664e-01*G23_1_28_2 - 1.666666666666664e-01*G23_2_28_2;
  block[4] = 1.666666666666664e-01*G1_0_1_0 + 1.666666666666664e-01*G1_0_1_1 + 1.666666666666664e-01*G1_0_1_2 + 1.666666666666664e-01*G1_1_1_0 + 1.666666666666664e-01*G1_1_1_1 + 1.666666666666664e-01*G1_1_1_2 + 1.666666666666664e-01*G1_2_1_0 + 1.666666666666664e-01*G1_2_1_1 + 1.666666666666664e-01*G1_2_1_2 + 1.666666666666664e-01*G4_0_3_0 + 1.666666666666664e-01*G4_0_3_1 + 1.666666666666664e-01*G4_0_3_2 + 1.666666666666664e-01*G4_1_3_0 + 1.666666666666664e-01*G4_1_3_1 + 1.666666666666664e-01*G4_1_3_2 + 1.666666666666664e-01*G4_2_3_0 + 1.666666666666664e-01*G4_2_3_1 + 1.666666666666664e-01*G4_2_3_2 + 1.666666666666664e-01*G7_0_5_0 + 1.666666666666664e-01*G7_0_5_1 + 1.666666666666664e-01*G7_0_5_2 + 1.666666666666664e-01*G7_1_5_0 + 1.666666666666664e-01*G7_1_5_1 + 1.666666666666664e-01*G7_1_5_2 + 1.666666666666664e-01*G7_2_5_0 + 1.666666666666664e-01*G7_2_5_1 + 1.666666666666664e-01*G7_2_5_2 + 1.666666666666664e-01*G10_0_19_0 + 1.666666666666664e-01*G10_0_19_1 + 1.666666666666664e-01*G10_0_19_2 + 1.666666666666664e-01*G10_1_19_0 + 1.666666666666664e-01*G10_1_19_1 + 1.666666666666664e-01*G10_1_19_2 + 1.666666666666664e-01*G10_2_19_0 + 1.666666666666664e-01*G10_2_19_1 + 1.666666666666664e-01*G10_2_19_2 + 1.666666666666664e-01*G13_0_21_0 + 1.666666666666664e-01*G13_0_21_1 + 1.666666666666664e-01*G13_0_21_2 + 1.666666666666664e-01*G13_1_21_0 + 1.666666666666664e-01*G13_1_21_1 + 1.666666666666664e-01*G13_1_21_2 + 1.666666666666664e-01*G13_2_21_0 + 1.666666666666664e-01*G13_2_21_1 + 1.666666666666664e-01*G13_2_21_2 + 1.666666666666664e-01*G16_0_23_0 + 1.666666666666664e-01*G16_0_23_1 + 1.666666666666664e-01*G16_0_23_2 + 1.666666666666664e-01*G16_1_23_0 + 1.666666666666664e-01*G16_1_23_1 + 1.666666666666664e-01*G16_1_23_2 + 1.666666666666664e-01*G16_2_23_0 + 1.666666666666664e-01*G16_2_23_1 + 1.666666666666664e-01*G16_2_23_2 + 1.666666666666664e-01*G19_0_25_0 + 1.666666666666664e-01*G19_0_25_1 + 1.666666666666664e-01*G19_0_25_2 + 1.666666666666664e-01*G19_1_25_0 + 1.666666666666664e-01*G19_1_25_1 + 1.666666666666664e-01*G19_1_25_2 + 1.666666666666664e-01*G19_2_25_0 + 1.666666666666664e-01*G19_2_25_1 + 1.666666666666664e-01*G19_2_25_2 + 1.666666666666664e-01*G22_0_27_0 + 1.666666666666664e-01*G22_0_27_1 + 1.666666666666664e-01*G22_0_27_2 + 1.666666666666664e-01*G22_1_27_0 + 1.666666666666664e-01*G22_1_27_1 + 1.666666666666664e-01*G22_1_27_2 + 1.666666666666664e-01*G22_2_27_0 + 1.666666666666664e-01*G22_2_27_1 + 1.666666666666664e-01*G22_2_27_2 + 1.666666666666664e-01*G25_0_29_0 + 1.666666666666664e-01*G25_0_29_1 + 1.666666666666664e-01*G25_0_29_2 + 1.666666666666664e-01*G25_1_29_0 + 1.666666666666664e-01*G25_1_29_1 + 1.666666666666664e-01*G25_1_29_2 + 1.666666666666664e-01*G25_2_29_0 + 1.666666666666664e-01*G25_2_29_1 + 1.666666666666664e-01*G25_2_29_2;
  block[5] = -1.666666666666664e-01*G1_0_1_0 - 1.666666666666664e-01*G1_1_1_0 - 1.666666666666664e-01*G1_2_1_0 - 1.666666666666664e-01*G4_0_3_0 - 1.666666666666664e-01*G4_1_3_0 - 1.666666666666664e-01*G4_2_3_0 - 1.666666666666664e-01*G7_0_5_0 - 1.666666666666664e-01*G7_1_5_0 - 1.666666666666664e-01*G7_2_5_0 - 1.666666666666664e-01*G10_0_19_0 - 1.666666666666664e-01*G10_1_19_0 - 1.666666666666664e-01*G10_2_19_0 - 1.666666666666664e-01*G13_0_21_0 - 1.666666666666664e-01*G13_1_21_0 - 1.666666666666664e-01*G13_2_21_0 - 1.666666666666664e-01*G16_0_23_0 - 1.666666666666664e-01*G16_1_23_0 - 1.666666666666664e-01*G16_2_23_0 - 1.666666666666664e-01*G19_0_25_0 - 1.666666666666664e-01*G19_1_25_0 - 1.666666666666664e-01*G19_2_25_0 - 1.666666666666664e-01*G22_0_27_0 - 1.666666666666664e-01*G22_1_27_0 - 1.666666666666664e-01*G22_2_27_0 - 1.666666666666664e-01*G25_0_29_0 - 1.666666666666664e-01*G25_1_29_0 - 1.666666666666664e-01*G25_2_29_0;
  block[6] = -1.666666666666664e-01*G1_0_1_1 - 1.666666666666664e-01*G1_1_1_1 - 1.666666666666664e-01*G1_2_1_1 - 1.666666666666664e-01*G4_0_3_1 - 1.666666666666664e-01*G4_1_3_1 - 1.666666666666664e-01*G4_2_3_1 - 1.666666666666664e-01*G7_0_5_1 - 1.666666666666664e-01*G7_1_5_1 - 1.666666666666664e-01*G7_2_5_1 - 1.666666666666664e-01*G10_0_19_1 - 1.666666666666664e-01*G10_1_19_1 - 1.666666666666664e-01*G10_2_19_1 - 1.666666666666664e-01*G13_0_21_1 - 1.666666666666664e-01*G13_1_21_1 - 1.666666666666664e-01*G13_2_21_1 - 1.666666666666664e-01*G16_0_23_1 - 1.666666666666664e-01*G16_1_23_1 - 1.666666666666664e-01*G16_2_23_1 - 1.666666666666664e-01*G19_0_25_1 - 1.666666666666664e-01*G19_1_25_1 - 1.666666666666664e-01*G19_2_25_1 - 1.666666666666664e-01*G22_0_27_1 - 1.666666666666664e-01*G22_1_27_1 - 1.666666666666664e-01*G22_2_27_1 - 1.666666666666664e-01*G25_0_29_1 - 1.666666666666664e-01*G25_1_29_1 - 1.666666666666664e-01*G25_2_29_1;
  block[7] = -1.666666666666664e-01*G1_0_1_2 - 1.666666666666664e-01*G1_1_1_2 - 1.666666666666664e-01*G1_2_1_2 - 1.666666666666664e-01*G4_0_3_2 - 1.666666666666664e-01*G4_1_3_2 - 1.666666666666664e-01*G4_2_3_2 - 1.666666666666664e-01*G7_0_5_2 - 1.666666666666664e-01*G7_1_5_2 - 1.666666666666664e-01*G7_2_5_2 - 1.666666666666664e-01*G10_0_19_2 - 1.666666666666664e-01*G10_1_19_2 - 1.666666666666664e-01*G10_2_19_2 - 1.666666666666664e-01*G13_0_21_2 - 1.666666666666664e-01*G13_1_21_2 - 1.666666666666664e-01*G13_2_21_2 - 1.666666666666664e-01*G16_0_23_2 - 1.666666666666664e-01*G16_1_23_2 - 1.666666666666664e-01*G16_2_23_2 - 1.666666666666664e-01*G19_0_25_2 - 1.666666666666664e-01*G19_1_25_2 - 1.666666666666664e-01*G19_2_25_2 - 1.666666666666664e-01*G22_0_27_2 - 1.666666666666664e-01*G22_1_27_2 - 1.666666666666664e-01*G22_2_27_2 - 1.666666666666664e-01*G25_0_29_2 - 1.666666666666664e-01*G25_1_29_2 - 1.666666666666664e-01*G25_2_29_2;
  block[8] = 1.666666666666664e-01*G2_0_2_0 + 1.666666666666664e-01*G2_0_2_1 + 1.666666666666664e-01*G2_0_2_2 + 1.666666666666664e-01*G2_1_2_0 + 1.666666666666664e-01*G2_1_2_1 + 1.666666666666664e-01*G2_1_2_2 + 1.666666666666664e-01*G2_2_2_0 + 1.666666666666664e-01*G2_2_2_1 + 1.666666666666664e-01*G2_2_2_2 + 1.666666666666664e-01*G6_0_4_0 + 1.666666666666664e-01*G6_0_4_1 + 1.666666666666664e-01*G6_0_4_2 + 1.666666666666664e-01*G6_1_4_0 + 1.666666666666664e-01*G6_1_4_1 + 1.666666666666664e-01*G6_1_4_2 + 1.666666666666664e-01*G6_2_4_0 + 1.666666666666664e-01*G6_2_4_1 + 1.666666666666664e-01*G6_2_4_2 + 1.666666666666664e-01*G8_0_5_0 + 1.666666666666664e-01*G8_0_5_1 + 1.666666666666664e-01*G8_0_5_2 + 1.666666666666664e-01*G8_1_5_0 + 1.666666666666664e-01*G8_1_5_1 + 1.666666666666664e-01*G8_1_5_2 + 1.666666666666664e-01*G8_2_5_0 + 1.666666666666664e-01*G8_2_5_1 + 1.666666666666664e-01*G8_2_5_2 + 1.666666666666664e-01*G11_0_20_0 + 1.666666666666664e-01*G11_0_20_1 + 1.666666666666664e-01*G11_0_20_2 + 1.666666666666664e-01*G11_1_20_0 + 1.666666666666664e-01*G11_1_20_1 + 1.666666666666664e-01*G11_1_20_2 + 1.666666666666664e-01*G11_2_20_0 + 1.666666666666664e-01*G11_2_20_1 + 1.666666666666664e-01*G11_2_20_2 + 1.666666666666664e-01*G15_0_22_0 + 1.666666666666664e-01*G15_0_22_1 + 1.666666666666664e-01*G15_0_22_2 + 1.666666666666664e-01*G15_1_22_0 + 1.666666666666664e-01*G15_1_22_1 + 1.666666666666664e-01*G15_1_22_2 + 1.666666666666664e-01*G15_2_22_0 + 1.666666666666664e-01*G15_2_22_1 + 1.666666666666664e-01*G15_2_22_2 + 1.666666666666664e-01*G17_0_23_0 + 1.666666666666664e-01*G17_0_23_1 + 1.666666666666664e-01*G17_0_23_2 + 1.666666666666664e-01*G17_1_23_0 + 1.666666666666664e-01*G17_1_23_1 + 1.666666666666664e-01*G17_1_23_2 + 1.666666666666664e-01*G17_2_23_0 + 1.666666666666664e-01*G17_2_23_1 + 1.666666666666664e-01*G17_2_23_2 + 1.666666666666664e-01*G20_0_26_0 + 1.666666666666664e-01*G20_0_26_1 + 1.666666666666664e-01*G20_0_26_2 + 1.666666666666664e-01*G20_1_26_0 + 1.666666666666664e-01*G20_1_26_1 + 1.666666666666664e-01*G20_1_26_2 + 1.666666666666664e-01*G20_2_26_0 + 1.666666666666664e-01*G20_2_26_1 + 1.666666666666664e-01*G20_2_26_2 + 1.666666666666664e-01*G24_0_28_0 + 1.666666666666664e-01*G24_0_28_1 + 1.666666666666664e-01*G24_0_28_2 + 1.666666666666664e-01*G24_1_28_0 + 1.666666666666664e-01*G24_1_28_1 + 1.666666666666664e-01*G24_1_28_2 + 1.666666666666664e-01*G24_2_28_0 + 1.666666666666664e-01*G24_2_28_1 + 1.666666666666664e-01*G24_2_28_2 + 1.666666666666664e-01*G26_0_29_0 + 1.666666666666664e-01*G26_0_29_1 + 1.666666666666664e-01*G26_0_29_2 + 1.666666666666664e-01*G26_1_29_0 + 1.666666666666664e-01*G26_1_29_1 + 1.666666666666664e-01*G26_1_29_2 + 1.666666666666664e-01*G26_2_29_0 + 1.666666666666664e-01*G26_2_29_1 + 1.666666666666664e-01*G26_2_29_2;
  block[9] = -1.666666666666664e-01*G2_0_2_0 - 1.666666666666664e-01*G2_1_2_0 - 1.666666666666664e-01*G2_2_2_0 - 1.666666666666664e-01*G6_0_4_0 - 1.666666666666664e-01*G6_1_4_0 - 1.666666666666664e-01*G6_2_4_0 - 1.666666666666664e-01*G8_0_5_0 - 1.666666666666664e-01*G8_1_5_0 - 1.666666666666664e-01*G8_2_5_0 - 1.666666666666664e-01*G11_0_20_0 - 1.666666666666664e-01*G11_1_20_0 - 1.666666666666664e-01*G11_2_20_0 - 1.666666666666664e-01*G15_0_22_0 - 1.666666666666664e-01*G15_1_22_0 - 1.666666666666664e-01*G15_2_22_0 - 1.666666666666664e-01*G17_0_23_0 - 1.666666666666664e-01*G17_1_23_0 - 1.666666666666664e-01*G17_2_23_0 - 1.666666666666664e-01*G20_0_26_0 - 1.666666666666664e-01*G20_1_26_0 - 1.666666666666664e-01*G20_2_26_0 - 1.666666666666664e-01*G24_0_28_0 - 1.666666666666664e-01*G24_1_28_0 - 1.666666666666664e-01*G24_2_28_0 - 1.666666666666664e-01*G26_0_29_0 - 1.666666666666664e-01*G26_1_29_0 - 1.666666666666664e-01*G26_2_29_0;
  block[10] = -1.666666666666664e-01*G2_0_2_1 - 1.666666666666664e-01*G2_1_2_1 - 1.666666666666664e-01*G2_2_2_1 - 1.666666666666664e-01*G6_0_4_1 - 1.666666666666664e-01*G6_1_4_1 - 1.666666666666664e-01*G6_2_4_1 - 1.666666666666664e-01*G8_0_5_1 - 1.666666666666664e-01*G8_1_5_1 - 1.666666666666664e-01*G8_2_5_1 - 1.666666666666664e-01*G11_0_20_1 - 1.666666666666664e-01*G11_1_20_1 - 1.666666666666664e-01*G11_2_20_1 - 1.666666666666664e-01*G15_0_22_1 - 1.666666666666664e-01*G15_1_22_1 - 1.666666666666664e-01*G15_2_22_1 - 1.666666666666664e-01*G17_0_23_1 - 1.666666666666664e-01*G17_1_23_1 - 1.666666666666664e-01*G17_2_23_1 - 1.666666666666664e-01*G20_0_26_1 - 1.666666666666664e-01*G20_1_26_1 - 1.666666666666664e-01*G20_2_26_1 - 1.666666666666664e-01*G24_0_28_1 - 1.666666666666664e-01*G24_1_28_1 - 1.666666666666664e-01*G24_2_28_1 - 1.666666666666664e-01*G26_0_29_1 - 1.666666666666664e-01*G26_1_29_1 - 1.666666666666664e-01*G26_2_29_1;
  block[11] = -1.666666666666664e-01*G2_0_2_2 - 1.666666666666664e-01*G2_1_2_2 - 1.666666666666664e-01*G2_2_2_2 - 1.666666666666664e-01*G6_0_4_2 - 1.666666666666664e-01*G6_1_4_2 - 1.666666666666664e-01*G6_2_4_2 - 1.666666666666664e-01*G8_0_5_2 - 1.666666666666664e-01*G8_1_5_2 - 1.666666666666664e-01*G8_2_5_2 - 1.666666666666664e-01*G11_0_20_2 - 1.666666666666664e-01*G11_1_20_2 - 1.666666666666664e-01*G11_2_20_2 - 1.666666666666664e-01*G15_0_22_2 - 1.666666666666664e-01*G15_1_22_2 - 1.666666666666664e-01*G15_2_22_2 - 1.666666666666664e-01*G17_0_23_2 - 1.666666666666664e-01*G17_1_23_2 - 1.666666666666664e-01*G17_2_23_2 - 1.666666666666664e-01*G20_0_26_2 - 1.666666666666664e-01*G20_1_26_2 - 1.666666666666664e-01*G20_2_26_2 - 1.666666666666664e-01*G24_0_28_2 - 1.666666666666664e-01*G24_1_28_2 - 1.666666666666664e-01*G24_2_28_2 - 1.666666666666664e-01*G26_0_29_2 - 1.666666666666664e-01*G26_1_29_2 - 1.666666666666664e-01*G26_2_29_2;
  block[12] = -1.666666666666664e-01*G0_0_0_0 - 1.666666666666664e-01*G0_0_0_1 - 1.666666666666664e-01*G0_0_0_2 - 1.666666666666664e-01*G3_0_3_0 - 1.666666666666664e-01*G3_0_3_1 - 1.666666666666664e-01*G3_0_3_2 - 1.666666666666664e-01*G5_0_4_0 - 1.666666666666664e-01*G5_0_4_1 - 1.666666666666664e-01*G5_0_4_2 - 1.666666666666664e-01*G9_0_18_0 - 1.666666666666664e-01*G9_0_18_1 - 1.666666666666664e-01*G9_0_18_2 - 1.666666666666664e-01*G12_0_21_0 - 1.666666666666664e-01*G12_0_21_1 - 1.666666666666664e-01*G12_0_21_2 - 1.666666666666664e-01*G14_0_22_0 - 1.666666666666664e-01*G14_0_22_1 - 1.666666666666664e-01*G14_0_22_2 - 1.666666666666664e-01*G18_0_24_0 - 1.666666666666664e-01*G18_0_24_1 - 1.666666666666664e-01*G18_0_24_2 - 1.666666666666664e-01*G21_0_27_0 - 1.666666666666664e-01*G21_0_27_1 - 1.666666666666664e-01*G21_0_27_2 - 1.666666666666664e-01*G23_0_28_0 - 1.666666666666664e-01*G23_0_28_1 - 1.666666666666664e-01*G23_0_28_2;
  block[13] = 1.666666666666664e-01*G0_0_0_0 + 1.666666666666664e-01*G3_0_3_0 + 1.666666666666664e-01*G5_0_4_0 + 1.666666666666664e-01*G9_0_18_0 + 1.666666666666664e-01*G12_0_21_0 + 1.666666666666664e-01*G14_0_22_0 + 1.666666666666664e-01*G18_0_24_0 + 1.666666666666664e-01*G21_0_27_0 + 1.666666666666664e-01*G23_0_28_0;
  block[14] = 1.666666666666664e-01*G0_0_0_1 + 1.666666666666664e-01*G3_0_3_1 + 1.666666666666664e-01*G5_0_4_1 + 1.666666666666664e-01*G9_0_18_1 + 1.666666666666664e-01*G12_0_21_1 + 1.666666666666664e-01*G14_0_22_1 + 1.666666666666664e-01*G18_0_24_1 + 1.666666666666664e-01*G21_0_27_1 + 1.666666666666664e-01*G23_0_28_1;
  block[15] = 1.666666666666664e-01*G0_0_0_2 + 1.666666666666664e-01*G3_0_3_2 + 1.666666666666664e-01*G5_0_4_2 + 1.666666666666664e-01*G9_0_18_2 + 1.666666666666664e-01*G12_0_21_2 + 1.666666666666664e-01*G14_0_22_2 + 1.666666666666664e-01*G18_0_24_2 + 1.666666666666664e-01*G21_0_27_2 + 1.666666666666664e-01*G23_0_28_2;
  block[16] = -1.666666666666664e-01*G1_0_1_0 - 1.666666666666664e-01*G1_0_1_1 - 1.666666666666664e-01*G1_0_1_2 - 1.666666666666664e-01*G4_0_3_0 - 1.666666666666664e-01*G4_0_3_1 - 1.666666666666664e-01*G4_0_3_2 - 1.666666666666664e-01*G7_0_5_0 - 1.666666666666664e-01*G7_0_5_1 - 1.666666666666664e-01*G7_0_5_2 - 1.666666666666664e-01*G10_0_19_0 - 1.666666666666664e-01*G10_0_19_1 - 1.666666666666664e-01*G10_0_19_2 - 1.666666666666664e-01*G13_0_21_0 - 1.666666666666664e-01*G13_0_21_1 - 1.666666666666664e-01*G13_0_21_2 - 1.666666666666664e-01*G16_0_23_0 - 1.666666666666664e-01*G16_0_23_1 - 1.666666666666664e-01*G16_0_23_2 - 1.666666666666664e-01*G19_0_25_0 - 1.666666666666664e-01*G19_0_25_1 - 1.666666666666664e-01*G19_0_25_2 - 1.666666666666664e-01*G22_0_27_0 - 1.666666666666664e-01*G22_0_27_1 - 1.666666666666664e-01*G22_0_27_2 - 1.666666666666664e-01*G25_0_29_0 - 1.666666666666664e-01*G25_0_29_1 - 1.666666666666664e-01*G25_0_29_2;
  block[17] = 1.666666666666664e-01*G1_0_1_0 + 1.666666666666664e-01*G4_0_3_0 + 1.666666666666664e-01*G7_0_5_0 + 1.666666666666664e-01*G10_0_19_0 + 1.666666666666664e-01*G13_0_21_0 + 1.666666666666664e-01*G16_0_23_0 + 1.666666666666664e-01*G19_0_25_0 + 1.666666666666664e-01*G22_0_27_0 + 1.666666666666664e-01*G25_0_29_0;
  block[18] = 1.666666666666664e-01*G1_0_1_1 + 1.666666666666664e-01*G4_0_3_1 + 1.666666666666664e-01*G7_0_5_1 + 1.666666666666664e-01*G10_0_19_1 + 1.666666666666664e-01*G13_0_21_1 + 1.666666666666664e-01*G16_0_23_1 + 1.666666666666664e-01*G19_0_25_1 + 1.666666666666664e-01*G22_0_27_1 + 1.666666666666664e-01*G25_0_29_1;
  block[19] = 1.666666666666664e-01*G1_0_1_2 + 1.666666666666664e-01*G4_0_3_2 + 1.666666666666664e-01*G7_0_5_2 + 1.666666666666664e-01*G10_0_19_2 + 1.666666666666664e-01*G13_0_21_2 + 1.666666666666664e-01*G16_0_23_2 + 1.666666666666664e-01*G19_0_25_2 + 1.666666666666664e-01*G22_0_27_2 + 1.666666666666664e-01*G25_0_29_2;
  block[20] = -1.666666666666664e-01*G2_0_2_0 - 1.666666666666664e-01*G2_0_2_1 - 1.666666666666664e-01*G2_0_2_2 - 1.666666666666664e-01*G6_0_4_0 - 1.666666666666664e-01*G6_0_4_1 - 1.666666666666664e-01*G6_0_4_2 - 1.666666666666664e-01*G8_0_5_0 - 1.666666666666664e-01*G8_0_5_1 - 1.666666666666664e-01*G8_0_5_2 - 1.666666666666664e-01*G11_0_20_0 - 1.666666666666664e-01*G11_0_20_1 - 1.666666666666664e-01*G11_0_20_2 - 1.666666666666664e-01*G15_0_22_0 - 1.666666666666664e-01*G15_0_22_1 - 1.666666666666664e-01*G15_0_22_2 - 1.666666666666664e-01*G17_0_23_0 - 1.666666666666664e-01*G17_0_23_1 - 1.666666666666664e-01*G17_0_23_2 - 1.666666666666664e-01*G20_0_26_0 - 1.666666666666664e-01*G20_0_26_1 - 1.666666666666664e-01*G20_0_26_2 - 1.666666666666664e-01*G24_0_28_0 - 1.666666666666664e-01*G24_0_28_1 - 1.666666666666664e-01*G24_0_28_2 - 1.666666666666664e-01*G26_0_29_0 - 1.666666666666664e-01*G26_0_29_1 - 1.666666666666664e-01*G26_0_29_2;
  block[21] = 1.666666666666664e-01*G2_0_2_0 + 1.666666666666664e-01*G6_0_4_0 + 1.666666666666664e-01*G8_0_5_0 + 1.666666666666664e-01*G11_0_20_0 + 1.666666666666664e-01*G15_0_22_0 + 1.666666666666664e-01*G17_0_23_0 + 1.666666666666664e-01*G20_0_26_0 + 1.666666666666664e-01*G24_0_28_0 + 1.666666666666664e-01*G26_0_29_0;
  block[22] = 1.666666666666664e-01*G2_0_2_1 + 1.666666666666664e-01*G6_0_4_1 + 1.666666666666664e-01*G8_0_5_1 + 1.666666666666664e-01*G11_0_20_1 + 1.666666666666664e-01*G15_0_22_1 + 1.666666666666664e-01*G17_0_23_1 + 1.666666666666664e-01*G20_0_26_1 + 1.666666666666664e-01*G24_0_28_1 + 1.666666666666664e-01*G26_0_29_1;
  block[23] = 1.666666666666664e-01*G2_0_2_2 + 1.666666666666664e-01*G6_0_4_2 + 1.666666666666664e-01*G8_0_5_2 + 1.666666666666664e-01*G11_0_20_2 + 1.666666666666664e-01*G15_0_22_2 + 1.666666666666664e-01*G17_0_23_2 + 1.666666666666664e-01*G20_0_26_2 + 1.666666666666664e-01*G24_0_28_2 + 1.666666666666664e-01*G26_0_29_2;
  block[24] = -1.666666666666664e-01*G0_1_0_0 - 1.666666666666664e-01*G0_1_0_1 - 1.666666666666664e-01*G0_1_0_2 - 1.666666666666664e-01*G3_1_3_0 - 1.666666666666664e-01*G3_1_3_1 - 1.666666666666664e-01*G3_1_3_2 - 1.666666666666664e-01*G5_1_4_0 - 1.666666666666664e-01*G5_1_4_1 - 1.666666666666664e-01*G5_1_4_2 - 1.666666666666664e-01*G9_1_18_0 - 1.666666666666664e-01*G9_1_18_1 - 1.666666666666664e-01*G9_1_18_2 - 1.666666666666664e-01*G12_1_21_0 - 1.666666666666664e-01*G12_1_21_1 - 1.666666666666664e-01*G12_1_21_2 - 1.666666666666664e-01*G14_1_22_0 - 1.666666666666664e-01*G14_1_22_1 - 1.666666666666664e-01*G14_1_22_2 - 1.666666666666664e-01*G18_1_24_0 - 1.666666666666664e-01*G18_1_24_1 - 1.666666666666664e-01*G18_1_24_2 - 1.666666666666664e-01*G21_1_27_0 - 1.666666666666664e-01*G21_1_27_1 - 1.666666666666664e-01*G21_1_27_2 - 1.666666666666664e-01*G23_1_28_0 - 1.666666666666664e-01*G23_1_28_1 - 1.666666666666664e-01*G23_1_28_2;
  block[25] = 1.666666666666664e-01*G0_1_0_0 + 1.666666666666664e-01*G3_1_3_0 + 1.666666666666664e-01*G5_1_4_0 + 1.666666666666664e-01*G9_1_18_0 + 1.666666666666664e-01*G12_1_21_0 + 1.666666666666664e-01*G14_1_22_0 + 1.666666666666664e-01*G18_1_24_0 + 1.666666666666664e-01*G21_1_27_0 + 1.666666666666664e-01*G23_1_28_0;
  block[26] = 1.666666666666665e-01*G0_1_0_1 + 1.666666666666665e-01*G3_1_3_1 + 1.666666666666665e-01*G5_1_4_1 + 1.666666666666665e-01*G9_1_18_1 + 1.666666666666665e-01*G12_1_21_1 + 1.666666666666665e-01*G14_1_22_1 + 1.666666666666665e-01*G18_1_24_1 + 1.666666666666665e-01*G21_1_27_1 + 1.666666666666665e-01*G23_1_28_1;
  block[27] = 1.666666666666665e-01*G0_1_0_2 + 1.666666666666665e-01*G3_1_3_2 + 1.666666666666665e-01*G5_1_4_2 + 1.666666666666665e-01*G9_1_18_2 + 1.666666666666665e-01*G12_1_21_2 + 1.666666666666665e-01*G14_1_22_2 + 1.666666666666665e-01*G18_1_24_2 + 1.666666666666665e-01*G21_1_27_2 + 1.666666666666665e-01*G23_1_28_2;
  block[28] = -1.666666666666664e-01*G1_1_1_0 - 1.666666666666664e-01*G1_1_1_1 - 1.666666666666665e-01*G1_1_1_2 - 1.666666666666664e-01*G4_1_3_0 - 1.666666666666664e-01*G4_1_3_1 - 1.666666666666665e-01*G4_1_3_2 - 1.666666666666664e-01*G7_1_5_0 - 1.666666666666664e-01*G7_1_5_1 - 1.666666666666665e-01*G7_1_5_2 - 1.666666666666664e-01*G10_1_19_0 - 1.666666666666664e-01*G10_1_19_1 - 1.666666666666665e-01*G10_1_19_2 - 1.666666666666664e-01*G13_1_21_0 - 1.666666666666664e-01*G13_1_21_1 - 1.666666666666665e-01*G13_1_21_2 - 1.666666666666664e-01*G16_1_23_0 - 1.666666666666664e-01*G16_1_23_1 - 1.666666666666665e-01*G16_1_23_2 - 1.666666666666664e-01*G19_1_25_0 - 1.666666666666664e-01*G19_1_25_1 - 1.666666666666665e-01*G19_1_25_2 - 1.666666666666664e-01*G22_1_27_0 - 1.666666666666664e-01*G22_1_27_1 - 1.666666666666665e-01*G22_1_27_2 - 1.666666666666664e-01*G25_1_29_0 - 1.666666666666664e-01*G25_1_29_1 - 1.666666666666665e-01*G25_1_29_2;
  block[29] = 1.666666666666664e-01*G1_1_1_0 + 1.666666666666664e-01*G4_1_3_0 + 1.666666666666664e-01*G7_1_5_0 + 1.666666666666664e-01*G10_1_19_0 + 1.666666666666664e-01*G13_1_21_0 + 1.666666666666664e-01*G16_1_23_0 + 1.666666666666664e-01*G19_1_25_0 + 1.666666666666664e-01*G22_1_27_0 + 1.666666666666664e-01*G25_1_29_0;
  block[30] = 1.666666666666665e-01*G1_1_1_1 + 1.666666666666665e-01*G4_1_3_1 + 1.666666666666665e-01*G7_1_5_1 + 1.666666666666665e-01*G10_1_19_1 + 1.666666666666665e-01*G13_1_21_1 + 1.666666666666665e-01*G16_1_23_1 + 1.666666666666665e-01*G19_1_25_1 + 1.666666666666665e-01*G22_1_27_1 + 1.666666666666665e-01*G25_1_29_1;
  block[31] = 1.666666666666665e-01*G1_1_1_2 + 1.666666666666665e-01*G4_1_3_2 + 1.666666666666665e-01*G7_1_5_2 + 1.666666666666665e-01*G10_1_19_2 + 1.666666666666665e-01*G13_1_21_2 + 1.666666666666665e-01*G16_1_23_2 + 1.666666666666665e-01*G19_1_25_2 + 1.666666666666665e-01*G22_1_27_2 + 1.666666666666665e-01*G25_1_29_2;
  block[32] = -1.666666666666664e-01*G2_1_2_0 - 1.666666666666664e-01*G2_1_2_1 - 1.666666666666665e-01*G2_1_2_2 - 1.666666666666664e-01*G6_1_4_0 - 1.666666666666664e-01*G6_1_4_1 - 1.666666666666665e-01*G6_1_4_2 - 1.666666666666664e-01*G8_1_5_0 - 1.666666666666664e-01*G8_1_5_1 - 1.666666666666665e-01*G8_1_5_2 - 1.666666666666664e-01*G11_1_20_0 - 1.666666666666664e-01*G11_1_20_1 - 1.666666666666665e-01*G11_1_20_2 - 1.666666666666664e-01*G15_1_22_0 - 1.666666666666664e-01*G15_1_22_1 - 1.666666666666665e-01*G15_1_22_2 - 1.666666666666664e-01*G17_1_23_0 - 1.666666666666664e-01*G17_1_23_1 - 1.666666666666665e-01*G17_1_23_2 - 1.666666666666664e-01*G20_1_26_0 - 1.666666666666664e-01*G20_1_26_1 - 1.666666666666665e-01*G20_1_26_2 - 1.666666666666664e-01*G24_1_28_0 - 1.666666666666664e-01*G24_1_28_1 - 1.666666666666665e-01*G24_1_28_2 - 1.666666666666664e-01*G26_1_29_0 - 1.666666666666664e-01*G26_1_29_1 - 1.666666666666665e-01*G26_1_29_2;
  block[33] = 1.666666666666664e-01*G2_1_2_0 + 1.666666666666664e-01*G6_1_4_0 + 1.666666666666664e-01*G8_1_5_0 + 1.666666666666664e-01*G11_1_20_0 + 1.666666666666664e-01*G15_1_22_0 + 1.666666666666664e-01*G17_1_23_0 + 1.666666666666664e-01*G20_1_26_0 + 1.666666666666664e-01*G24_1_28_0 + 1.666666666666664e-01*G26_1_29_0;
  block[34] = 1.666666666666665e-01*G2_1_2_1 + 1.666666666666665e-01*G6_1_4_1 + 1.666666666666665e-01*G8_1_5_1 + 1.666666666666665e-01*G11_1_20_1 + 1.666666666666665e-01*G15_1_22_1 + 1.666666666666665e-01*G17_1_23_1 + 1.666666666666665e-01*G20_1_26_1 + 1.666666666666665e-01*G24_1_28_1 + 1.666666666666665e-01*G26_1_29_1;
  block[35] = 1.666666666666665e-01*G2_1_2_2 + 1.666666666666665e-01*G6_1_4_2 + 1.666666666666665e-01*G8_1_5_2 + 1.666666666666665e-01*G11_1_20_2 + 1.666666666666665e-01*G15_1_22_2 + 1.666666666666665e-01*G17_1_23_2 + 1.666666666666665e-01*G20_1_26_2 + 1.666666666666665e-01*G24_1_28_2 + 1.666666666666665e-01*G26_1_29_2;
  block[36] = -1.666666666666664e-01*G0_2_0_0 - 1.666666666666664e-01*G0_2_0_1 - 1.666666666666664e-01*G0_2_0_2 - 1.666666666666664e-01*G3_2_3_0 - 1.666666666666664e-01*G3_2_3_1 - 1.666666666666664e-01*G3_2_3_2 - 1.666666666666664e-01*G5_2_4_0 - 1.666666666666664e-01*G5_2_4_1 - 1.666666666666664e-01*G5_2_4_2 - 1.666666666666664e-01*G9_2_18_0 - 1.666666666666664e-01*G9_2_18_1 - 1.666666666666664e-01*G9_2_18_2 - 1.666666666666664e-01*G12_2_21_0 - 1.666666666666664e-01*G12_2_21_1 - 1.666666666666664e-01*G12_2_21_2 - 1.666666666666664e-01*G14_2_22_0 - 1.666666666666664e-01*G14_2_22_1 - 1.666666666666664e-01*G14_2_22_2 - 1.666666666666664e-01*G18_2_24_0 - 1.666666666666664e-01*G18_2_24_1 - 1.666666666666664e-01*G18_2_24_2 - 1.666666666666664e-01*G21_2_27_0 - 1.666666666666664e-01*G21_2_27_1 - 1.666666666666664e-01*G21_2_27_2 - 1.666666666666664e-01*G23_2_28_0 - 1.666666666666664e-01*G23_2_28_1 - 1.666666666666664e-01*G23_2_28_2;
  block[37] = 1.666666666666664e-01*G0_2_0_0 + 1.666666666666664e-01*G3_2_3_0 + 1.666666666666664e-01*G5_2_4_0 + 1.666666666666664e-01*G9_2_18_0 + 1.666666666666664e-01*G12_2_21_0 + 1.666666666666664e-01*G14_2_22_0 + 1.666666666666664e-01*G18_2_24_0 + 1.666666666666664e-01*G21_2_27_0 + 1.666666666666664e-01*G23_2_28_0;
  block[38] = 1.666666666666665e-01*G0_2_0_1 + 1.666666666666665e-01*G3_2_3_1 + 1.666666666666665e-01*G5_2_4_1 + 1.666666666666665e-01*G9_2_18_1 + 1.666666666666665e-01*G12_2_21_1 + 1.666666666666665e-01*G14_2_22_1 + 1.666666666666665e-01*G18_2_24_1 + 1.666666666666665e-01*G21_2_27_1 + 1.666666666666665e-01*G23_2_28_1;
  block[39] = 1.666666666666665e-01*G0_2_0_2 + 1.666666666666665e-01*G3_2_3_2 + 1.666666666666665e-01*G5_2_4_2 + 1.666666666666665e-01*G9_2_18_2 + 1.666666666666665e-01*G12_2_21_2 + 1.666666666666665e-01*G14_2_22_2 + 1.666666666666665e-01*G18_2_24_2 + 1.666666666666665e-01*G21_2_27_2 + 1.666666666666665e-01*G23_2_28_2;
  block[40] = -1.666666666666664e-01*G1_2_1_0 - 1.666666666666664e-01*G1_2_1_1 - 1.666666666666665e-01*G1_2_1_2 - 1.666666666666664e-01*G4_2_3_0 - 1.666666666666664e-01*G4_2_3_1 - 1.666666666666665e-01*G4_2_3_2 - 1.666666666666664e-01*G7_2_5_0 - 1.666666666666664e-01*G7_2_5_1 - 1.666666666666665e-01*G7_2_5_2 - 1.666666666666664e-01*G10_2_19_0 - 1.666666666666664e-01*G10_2_19_1 - 1.666666666666665e-01*G10_2_19_2 - 1.666666666666664e-01*G13_2_21_0 - 1.666666666666664e-01*G13_2_21_1 - 1.666666666666665e-01*G13_2_21_2 - 1.666666666666664e-01*G16_2_23_0 - 1.666666666666664e-01*G16_2_23_1 - 1.666666666666665e-01*G16_2_23_2 - 1.666666666666664e-01*G19_2_25_0 - 1.666666666666664e-01*G19_2_25_1 - 1.666666666666665e-01*G19_2_25_2 - 1.666666666666664e-01*G22_2_27_0 - 1.666666666666664e-01*G22_2_27_1 - 1.666666666666665e-01*G22_2_27_2 - 1.666666666666664e-01*G25_2_29_0 - 1.666666666666664e-01*G25_2_29_1 - 1.666666666666665e-01*G25_2_29_2;
  block[41] = 1.666666666666664e-01*G1_2_1_0 + 1.666666666666664e-01*G4_2_3_0 + 1.666666666666664e-01*G7_2_5_0 + 1.666666666666664e-01*G10_2_19_0 + 1.666666666666664e-01*G13_2_21_0 + 1.666666666666664e-01*G16_2_23_0 + 1.666666666666664e-01*G19_2_25_0 + 1.666666666666664e-01*G22_2_27_0 + 1.666666666666664e-01*G25_2_29_0;
  block[42] = 1.666666666666665e-01*G1_2_1_1 + 1.666666666666665e-01*G4_2_3_1 + 1.666666666666665e-01*G7_2_5_1 + 1.666666666666665e-01*G10_2_19_1 + 1.666666666666665e-01*G13_2_21_1 + 1.666666666666665e-01*G16_2_23_1 + 1.666666666666665e-01*G19_2_25_1 + 1.666666666666665e-01*G22_2_27_1 + 1.666666666666665e-01*G25_2_29_1;
  block[43] = 1.666666666666665e-01*G1_2_1_2 + 1.666666666666665e-01*G4_2_3_2 + 1.666666666666665e-01*G7_2_5_2 + 1.666666666666665e-01*G10_2_19_2 + 1.666666666666665e-01*G13_2_21_2 + 1.666666666666665e-01*G16_2_23_2 + 1.666666666666665e-01*G19_2_25_2 + 1.666666666666665e-01*G22_2_27_2 + 1.666666666666665e-01*G25_2_29_2;
  block[44] = -1.666666666666664e-01*G2_2_2_0 - 1.666666666666664e-01*G2_2_2_1 - 1.666666666666665e-01*G2_2_2_2 - 1.666666666666664e-01*G6_2_4_0 - 1.666666666666664e-01*G6_2_4_1 - 1.666666666666665e-01*G6_2_4_2 - 1.666666666666664e-01*G8_2_5_0 - 1.666666666666664e-01*G8_2_5_1 - 1.666666666666665e-01*G8_2_5_2 - 1.666666666666664e-01*G11_2_20_0 - 1.666666666666664e-01*G11_2_20_1 - 1.666666666666665e-01*G11_2_20_2 - 1.666666666666664e-01*G15_2_22_0 - 1.666666666666664e-01*G15_2_22_1 - 1.666666666666665e-01*G15_2_22_2 - 1.666666666666664e-01*G17_2_23_0 - 1.666666666666664e-01*G17_2_23_1 - 1.666666666666665e-01*G17_2_23_2 - 1.666666666666664e-01*G20_2_26_0 - 1.666666666666664e-01*G20_2_26_1 - 1.666666666666665e-01*G20_2_26_2 - 1.666666666666664e-01*G24_2_28_0 - 1.666666666666664e-01*G24_2_28_1 - 1.666666666666665e-01*G24_2_28_2 - 1.666666666666664e-01*G26_2_29_0 - 1.666666666666664e-01*G26_2_29_1 - 1.666666666666665e-01*G26_2_29_2;
  block[45] = 1.666666666666664e-01*G2_2_2_0 + 1.666666666666664e-01*G6_2_4_0 + 1.666666666666664e-01*G8_2_5_0 + 1.666666666666664e-01*G11_2_20_0 + 1.666666666666664e-01*G15_2_22_0 + 1.666666666666664e-01*G17_2_23_0 + 1.666666666666664e-01*G20_2_26_0 + 1.666666666666664e-01*G24_2_28_0 + 1.666666666666664e-01*G26_2_29_0;
  block[46] = 1.666666666666665e-01*G2_2_2_1 + 1.666666666666665e-01*G6_2_4_1 + 1.666666666666665e-01*G8_2_5_1 + 1.666666666666665e-01*G11_2_20_1 + 1.666666666666665e-01*G15_2_22_1 + 1.666666666666665e-01*G17_2_23_1 + 1.666666666666665e-01*G20_2_26_1 + 1.666666666666665e-01*G24_2_28_1 + 1.666666666666665e-01*G26_2_29_1;
  block[47] = 1.666666666666665e-01*G2_2_2_2 + 1.666666666666665e-01*G6_2_4_2 + 1.666666666666665e-01*G8_2_5_2 + 1.666666666666665e-01*G11_2_20_2 + 1.666666666666665e-01*G15_2_22_2 + 1.666666666666665e-01*G17_2_23_2 + 1.666666666666665e-01*G20_2_26_2 + 1.666666666666665e-01*G24_2_28_2 + 1.666666666666665e-01*G26_2_29_2;
  block[48] = 1.666666666666664e-01*G27_0_18_0 + 1.666666666666664e-01*G27_0_18_1 + 1.666666666666664e-01*G27_0_18_2 + 1.666666666666664e-01*G27_1_18_0 + 1.666666666666664e-01*G27_1_18_1 + 1.666666666666664e-01*G27_1_18_2 + 1.666666666666664e-01*G27_2_18_0 + 1.666666666666664e-01*G27_2_18_1 + 1.666666666666664e-01*G27_2_18_2 + 1.666666666666664e-01*G30_0_21_0 + 1.666666666666664e-01*G30_0_21_1 + 1.666666666666664e-01*G30_0_21_2 + 1.666666666666664e-01*G30_1_21_0 + 1.666666666666664e-01*G30_1_21_1 + 1.666666666666664e-01*G30_1_21_2 + 1.666666666666664e-01*G30_2_21_0 + 1.666666666666664e-01*G30_2_21_1 + 1.666666666666664e-01*G30_2_21_2 + 1.666666666666664e-01*G32_0_22_0 + 1.666666666666664e-01*G32_0_22_1 + 1.666666666666664e-01*G32_0_22_2 + 1.666666666666664e-01*G32_1_22_0 + 1.666666666666664e-01*G32_1_22_1 + 1.666666666666664e-01*G32_1_22_2 + 1.666666666666664e-01*G32_2_22_0 + 1.666666666666664e-01*G32_2_22_1 + 1.666666666666664e-01*G32_2_22_2 + 1.666666666666664e-01*G36_0_6_0 + 1.666666666666664e-01*G36_0_6_1 + 1.666666666666664e-01*G36_0_6_2 + 1.666666666666664e-01*G36_1_6_0 + 1.666666666666664e-01*G36_1_6_1 + 1.666666666666664e-01*G36_1_6_2 + 1.666666666666664e-01*G36_2_6_0 + 1.666666666666664e-01*G36_2_6_1 + 1.666666666666664e-01*G36_2_6_2 + 1.666666666666664e-01*G39_0_9_0 + 1.666666666666664e-01*G39_0_9_1 + 1.666666666666664e-01*G39_0_9_2 + 1.666666666666664e-01*G39_1_9_0 + 1.666666666666664e-01*G39_1_9_1 + 1.666666666666664e-01*G39_1_9_2 + 1.666666666666664e-01*G39_2_9_0 + 1.666666666666664e-01*G39_2_9_1 + 1.666666666666664e-01*G39_2_9_2 + 1.666666666666664e-01*G41_0_10_0 + 1.666666666666664e-01*G41_0_10_1 + 1.666666666666664e-01*G41_0_10_2 + 1.666666666666664e-01*G41_1_10_0 + 1.666666666666664e-01*G41_1_10_1 + 1.666666666666664e-01*G41_1_10_2 + 1.666666666666664e-01*G41_2_10_0 + 1.666666666666664e-01*G41_2_10_1 + 1.666666666666664e-01*G41_2_10_2 + 1.666666666666664e-01*G45_0_30_0 + 1.666666666666664e-01*G45_0_30_1 + 1.666666666666664e-01*G45_0_30_2 + 1.666666666666664e-01*G45_1_30_0 + 1.666666666666664e-01*G45_1_30_1 + 1.666666666666664e-01*G45_1_30_2 + 1.666666666666664e-01*G45_2_30_0 + 1.666666666666664e-01*G45_2_30_1 + 1.666666666666664e-01*G45_2_30_2 + 1.666666666666664e-01*G48_0_33_0 + 1.666666666666664e-01*G48_0_33_1 + 1.666666666666664e-01*G48_0_33_2 + 1.666666666666664e-01*G48_1_33_0 + 1.666666666666664e-01*G48_1_33_1 + 1.666666666666664e-01*G48_1_33_2 + 1.666666666666664e-01*G48_2_33_0 + 1.666666666666664e-01*G48_2_33_1 + 1.666666666666664e-01*G48_2_33_2 + 1.666666666666664e-01*G50_0_34_0 + 1.666666666666664e-01*G50_0_34_1 + 1.666666666666664e-01*G50_0_34_2 + 1.666666666666664e-01*G50_1_34_0 + 1.666666666666664e-01*G50_1_34_1 + 1.666666666666664e-01*G50_1_34_2 + 1.666666666666664e-01*G50_2_34_0 + 1.666666666666664e-01*G50_2_34_1 + 1.666666666666664e-01*G50_2_34_2;
  block[49] = -1.666666666666664e-01*G27_0_18_0 - 1.666666666666664e-01*G27_1_18_0 - 1.666666666666664e-01*G27_2_18_0 - 1.666666666666664e-01*G30_0_21_0 - 1.666666666666664e-01*G30_1_21_0 - 1.666666666666664e-01*G30_2_21_0 - 1.666666666666664e-01*G32_0_22_0 - 1.666666666666664e-01*G32_1_22_0 - 1.666666666666664e-01*G32_2_22_0 - 1.666666666666664e-01*G36_0_6_0 - 1.666666666666664e-01*G36_1_6_0 - 1.666666666666664e-01*G36_2_6_0 - 1.666666666666664e-01*G39_0_9_0 - 1.666666666666664e-01*G39_1_9_0 - 1.666666666666664e-01*G39_2_9_0 - 1.666666666666664e-01*G41_0_10_0 - 1.666666666666664e-01*G41_1_10_0 - 1.666666666666664e-01*G41_2_10_0 - 1.666666666666664e-01*G45_0_30_0 - 1.666666666666664e-01*G45_1_30_0 - 1.666666666666664e-01*G45_2_30_0 - 1.666666666666664e-01*G48_0_33_0 - 1.666666666666664e-01*G48_1_33_0 - 1.666666666666664e-01*G48_2_33_0 - 1.666666666666664e-01*G50_0_34_0 - 1.666666666666664e-01*G50_1_34_0 - 1.666666666666664e-01*G50_2_34_0;
  block[50] = -1.666666666666664e-01*G27_0_18_1 - 1.666666666666664e-01*G27_1_18_1 - 1.666666666666665e-01*G27_2_18_1 - 1.666666666666664e-01*G30_0_21_1 - 1.666666666666664e-01*G30_1_21_1 - 1.666666666666665e-01*G30_2_21_1 - 1.666666666666664e-01*G32_0_22_1 - 1.666666666666664e-01*G32_1_22_1 - 1.666666666666665e-01*G32_2_22_1 - 1.666666666666664e-01*G36_0_6_1 - 1.666666666666664e-01*G36_1_6_1 - 1.666666666666665e-01*G36_2_6_1 - 1.666666666666664e-01*G39_0_9_1 - 1.666666666666664e-01*G39_1_9_1 - 1.666666666666665e-01*G39_2_9_1 - 1.666666666666664e-01*G41_0_10_1 - 1.666666666666664e-01*G41_1_10_1 - 1.666666666666665e-01*G41_2_10_1 - 1.666666666666664e-01*G45_0_30_1 - 1.666666666666664e-01*G45_1_30_1 - 1.666666666666665e-01*G45_2_30_1 - 1.666666666666664e-01*G48_0_33_1 - 1.666666666666664e-01*G48_1_33_1 - 1.666666666666665e-01*G48_2_33_1 - 1.666666666666664e-01*G50_0_34_1 - 1.666666666666664e-01*G50_1_34_1 - 1.666666666666665e-01*G50_2_34_1;
  block[51] = -1.666666666666664e-01*G27_0_18_2 - 1.666666666666664e-01*G27_1_18_2 - 1.666666666666665e-01*G27_2_18_2 - 1.666666666666664e-01*G30_0_21_2 - 1.666666666666664e-01*G30_1_21_2 - 1.666666666666665e-01*G30_2_21_2 - 1.666666666666664e-01*G32_0_22_2 - 1.666666666666664e-01*G32_1_22_2 - 1.666666666666665e-01*G32_2_22_2 - 1.666666666666664e-01*G36_0_6_2 - 1.666666666666664e-01*G36_1_6_2 - 1.666666666666665e-01*G36_2_6_2 - 1.666666666666664e-01*G39_0_9_2 - 1.666666666666664e-01*G39_1_9_2 - 1.666666666666665e-01*G39_2_9_2 - 1.666666666666664e-01*G41_0_10_2 - 1.666666666666664e-01*G41_1_10_2 - 1.666666666666665e-01*G41_2_10_2 - 1.666666666666664e-01*G45_0_30_2 - 1.666666666666664e-01*G45_1_30_2 - 1.666666666666665e-01*G45_2_30_2 - 1.666666666666664e-01*G48_0_33_2 - 1.666666666666664e-01*G48_1_33_2 - 1.666666666666665e-01*G48_2_33_2 - 1.666666666666664e-01*G50_0_34_2 - 1.666666666666664e-01*G50_1_34_2 - 1.666666666666665e-01*G50_2_34_2;
  block[52] = 1.666666666666664e-01*G28_0_19_0 + 1.666666666666664e-01*G28_0_19_1 + 1.666666666666664e-01*G28_0_19_2 + 1.666666666666664e-01*G28_1_19_0 + 1.666666666666664e-01*G28_1_19_1 + 1.666666666666664e-01*G28_1_19_2 + 1.666666666666664e-01*G28_2_19_0 + 1.666666666666664e-01*G28_2_19_1 + 1.666666666666665e-01*G28_2_19_2 + 1.666666666666664e-01*G31_0_21_0 + 1.666666666666664e-01*G31_0_21_1 + 1.666666666666664e-01*G31_0_21_2 + 1.666666666666664e-01*G31_1_21_0 + 1.666666666666664e-01*G31_1_21_1 + 1.666666666666664e-01*G31_1_21_2 + 1.666666666666664e-01*G31_2_21_0 + 1.666666666666664e-01*G31_2_21_1 + 1.666666666666665e-01*G31_2_21_2 + 1.666666666666664e-01*G34_0_23_0 + 1.666666666666664e-01*G34_0_23_1 + 1.666666666666664e-01*G34_0_23_2 + 1.666666666666664e-01*G34_1_23_0 + 1.666666666666664e-01*G34_1_23_1 + 1.666666666666664e-01*G34_1_23_2 + 1.666666666666664e-01*G34_2_23_0 + 1.666666666666664e-01*G34_2_23_1 + 1.666666666666665e-01*G34_2_23_2 + 1.666666666666664e-01*G37_0_7_0 + 1.666666666666664e-01*G37_0_7_1 + 1.666666666666664e-01*G37_0_7_2 + 1.666666666666664e-01*G37_1_7_0 + 1.666666666666664e-01*G37_1_7_1 + 1.666666666666664e-01*G37_1_7_2 + 1.666666666666664e-01*G37_2_7_0 + 1.666666666666664e-01*G37_2_7_1 + 1.666666666666665e-01*G37_2_7_2 + 1.666666666666664e-01*G40_0_9_0 + 1.666666666666664e-01*G40_0_9_1 + 1.666666666666664e-01*G40_0_9_2 + 1.666666666666664e-01*G40_1_9_0 + 1.666666666666664e-01*G40_1_9_1 + 1.666666666666664e-01*G40_1_9_2 + 1.666666666666664e-01*G40_2_9_0 + 1.666666666666664e-01*G40_2_9_1 + 1.666666666666665e-01*G40_2_9_2 + 1.666666666666664e-01*G43_0_11_0 + 1.666666666666664e-01*G43_0_11_1 + 1.666666666666664e-01*G43_0_11_2 + 1.666666666666664e-01*G43_1_11_0 + 1.666666666666664e-01*G43_1_11_1 + 1.666666666666664e-01*G43_1_11_2 + 1.666666666666664e-01*G43_2_11_0 + 1.666666666666664e-01*G43_2_11_1 + 1.666666666666665e-01*G43_2_11_2 + 1.666666666666664e-01*G46_0_31_0 + 1.666666666666664e-01*G46_0_31_1 + 1.666666666666664e-01*G46_0_31_2 + 1.666666666666664e-01*G46_1_31_0 + 1.666666666666664e-01*G46_1_31_1 + 1.666666666666664e-01*G46_1_31_2 + 1.666666666666664e-01*G46_2_31_0 + 1.666666666666664e-01*G46_2_31_1 + 1.666666666666665e-01*G46_2_31_2 + 1.666666666666664e-01*G49_0_33_0 + 1.666666666666664e-01*G49_0_33_1 + 1.666666666666664e-01*G49_0_33_2 + 1.666666666666664e-01*G49_1_33_0 + 1.666666666666664e-01*G49_1_33_1 + 1.666666666666664e-01*G49_1_33_2 + 1.666666666666664e-01*G49_2_33_0 + 1.666666666666664e-01*G49_2_33_1 + 1.666666666666665e-01*G49_2_33_2 + 1.666666666666664e-01*G52_0_35_0 + 1.666666666666664e-01*G52_0_35_1 + 1.666666666666664e-01*G52_0_35_2 + 1.666666666666664e-01*G52_1_35_0 + 1.666666666666664e-01*G52_1_35_1 + 1.666666666666664e-01*G52_1_35_2 + 1.666666666666664e-01*G52_2_35_0 + 1.666666666666664e-01*G52_2_35_1 + 1.666666666666665e-01*G52_2_35_2;
  block[53] = -1.666666666666664e-01*G28_0_19_0 - 1.666666666666664e-01*G28_1_19_0 - 1.666666666666664e-01*G28_2_19_0 - 1.666666666666664e-01*G31_0_21_0 - 1.666666666666664e-01*G31_1_21_0 - 1.666666666666664e-01*G31_2_21_0 - 1.666666666666664e-01*G34_0_23_0 - 1.666666666666664e-01*G34_1_23_0 - 1.666666666666664e-01*G34_2_23_0 - 1.666666666666664e-01*G37_0_7_0 - 1.666666666666664e-01*G37_1_7_0 - 1.666666666666664e-01*G37_2_7_0 - 1.666666666666664e-01*G40_0_9_0 - 1.666666666666664e-01*G40_1_9_0 - 1.666666666666664e-01*G40_2_9_0 - 1.666666666666664e-01*G43_0_11_0 - 1.666666666666664e-01*G43_1_11_0 - 1.666666666666664e-01*G43_2_11_0 - 1.666666666666664e-01*G46_0_31_0 - 1.666666666666664e-01*G46_1_31_0 - 1.666666666666664e-01*G46_2_31_0 - 1.666666666666664e-01*G49_0_33_0 - 1.666666666666664e-01*G49_1_33_0 - 1.666666666666664e-01*G49_2_33_0 - 1.666666666666664e-01*G52_0_35_0 - 1.666666666666664e-01*G52_1_35_0 - 1.666666666666664e-01*G52_2_35_0;
  block[54] = -1.666666666666664e-01*G28_0_19_1 - 1.666666666666664e-01*G28_1_19_1 - 1.666666666666665e-01*G28_2_19_1 - 1.666666666666664e-01*G31_0_21_1 - 1.666666666666664e-01*G31_1_21_1 - 1.666666666666665e-01*G31_2_21_1 - 1.666666666666664e-01*G34_0_23_1 - 1.666666666666664e-01*G34_1_23_1 - 1.666666666666665e-01*G34_2_23_1 - 1.666666666666664e-01*G37_0_7_1 - 1.666666666666664e-01*G37_1_7_1 - 1.666666666666665e-01*G37_2_7_1 - 1.666666666666664e-01*G40_0_9_1 - 1.666666666666664e-01*G40_1_9_1 - 1.666666666666665e-01*G40_2_9_1 - 1.666666666666664e-01*G43_0_11_1 - 1.666666666666664e-01*G43_1_11_1 - 1.666666666666665e-01*G43_2_11_1 - 1.666666666666664e-01*G46_0_31_1 - 1.666666666666664e-01*G46_1_31_1 - 1.666666666666665e-01*G46_2_31_1 - 1.666666666666664e-01*G49_0_33_1 - 1.666666666666664e-01*G49_1_33_1 - 1.666666666666665e-01*G49_2_33_1 - 1.666666666666664e-01*G52_0_35_1 - 1.666666666666664e-01*G52_1_35_1 - 1.666666666666665e-01*G52_2_35_1;
  block[55] = -1.666666666666664e-01*G28_0_19_2 - 1.666666666666664e-01*G28_1_19_2 - 1.666666666666665e-01*G28_2_19_2 - 1.666666666666664e-01*G31_0_21_2 - 1.666666666666664e-01*G31_1_21_2 - 1.666666666666665e-01*G31_2_21_2 - 1.666666666666664e-01*G34_0_23_2 - 1.666666666666664e-01*G34_1_23_2 - 1.666666666666665e-01*G34_2_23_2 - 1.666666666666664e-01*G37_0_7_2 - 1.666666666666664e-01*G37_1_7_2 - 1.666666666666665e-01*G37_2_7_2 - 1.666666666666664e-01*G40_0_9_2 - 1.666666666666664e-01*G40_1_9_2 - 1.666666666666665e-01*G40_2_9_2 - 1.666666666666664e-01*G43_0_11_2 - 1.666666666666664e-01*G43_1_11_2 - 1.666666666666665e-01*G43_2_11_2 - 1.666666666666664e-01*G46_0_31_2 - 1.666666666666664e-01*G46_1_31_2 - 1.666666666666665e-01*G46_2_31_2 - 1.666666666666664e-01*G49_0_33_2 - 1.666666666666664e-01*G49_1_33_2 - 1.666666666666665e-01*G49_2_33_2 - 1.666666666666664e-01*G52_0_35_2 - 1.666666666666664e-01*G52_1_35_2 - 1.666666666666665e-01*G52_2_35_2;
  block[56] = 1.666666666666664e-01*G29_0_20_0 + 1.666666666666664e-01*G29_0_20_1 + 1.666666666666664e-01*G29_0_20_2 + 1.666666666666664e-01*G29_1_20_0 + 1.666666666666664e-01*G29_1_20_1 + 1.666666666666664e-01*G29_1_20_2 + 1.666666666666664e-01*G29_2_20_0 + 1.666666666666664e-01*G29_2_20_1 + 1.666666666666665e-01*G29_2_20_2 + 1.666666666666664e-01*G33_0_22_0 + 1.666666666666664e-01*G33_0_22_1 + 1.666666666666664e-01*G33_0_22_2 + 1.666666666666664e-01*G33_1_22_0 + 1.666666666666664e-01*G33_1_22_1 + 1.666666666666664e-01*G33_1_22_2 + 1.666666666666664e-01*G33_2_22_0 + 1.666666666666664e-01*G33_2_22_1 + 1.666666666666665e-01*G33_2_22_2 + 1.666666666666664e-01*G35_0_23_0 + 1.666666666666664e-01*G35_0_23_1 + 1.666666666666664e-01*G35_0_23_2 + 1.666666666666664e-01*G35_1_23_0 + 1.666666666666664e-01*G35_1_23_1 + 1.666666666666664e-01*G35_1_23_2 + 1.666666666666664e-01*G35_2_23_0 + 1.666666666666664e-01*G35_2_23_1 + 1.666666666666665e-01*G35_2_23_2 + 1.666666666666664e-01*G38_0_8_0 + 1.666666666666664e-01*G38_0_8_1 + 1.666666666666664e-01*G38_0_8_2 + 1.666666666666664e-01*G38_1_8_0 + 1.666666666666664e-01*G38_1_8_1 + 1.666666666666664e-01*G38_1_8_2 + 1.666666666666664e-01*G38_2_8_0 + 1.666666666666664e-01*G38_2_8_1 + 1.666666666666665e-01*G38_2_8_2 + 1.666666666666664e-01*G42_0_10_0 + 1.666666666666664e-01*G42_0_10_1 + 1.666666666666664e-01*G42_0_10_2 + 1.666666666666664e-01*G42_1_10_0 + 1.666666666666664e-01*G42_1_10_1 + 1.666666666666664e-01*G42_1_10_2 + 1.666666666666664e-01*G42_2_10_0 + 1.666666666666664e-01*G42_2_10_1 + 1.666666666666665e-01*G42_2_10_2 + 1.666666666666664e-01*G44_0_11_0 + 1.666666666666664e-01*G44_0_11_1 + 1.666666666666664e-01*G44_0_11_2 + 1.666666666666664e-01*G44_1_11_0 + 1.666666666666664e-01*G44_1_11_1 + 1.666666666666664e-01*G44_1_11_2 + 1.666666666666664e-01*G44_2_11_0 + 1.666666666666664e-01*G44_2_11_1 + 1.666666666666665e-01*G44_2_11_2 + 1.666666666666664e-01*G47_0_32_0 + 1.666666666666664e-01*G47_0_32_1 + 1.666666666666664e-01*G47_0_32_2 + 1.666666666666664e-01*G47_1_32_0 + 1.666666666666664e-01*G47_1_32_1 + 1.666666666666664e-01*G47_1_32_2 + 1.666666666666664e-01*G47_2_32_0 + 1.666666666666664e-01*G47_2_32_1 + 1.666666666666665e-01*G47_2_32_2 + 1.666666666666664e-01*G51_0_34_0 + 1.666666666666664e-01*G51_0_34_1 + 1.666666666666664e-01*G51_0_34_2 + 1.666666666666664e-01*G51_1_34_0 + 1.666666666666664e-01*G51_1_34_1 + 1.666666666666664e-01*G51_1_34_2 + 1.666666666666664e-01*G51_2_34_0 + 1.666666666666664e-01*G51_2_34_1 + 1.666666666666665e-01*G51_2_34_2 + 1.666666666666664e-01*G53_0_35_0 + 1.666666666666664e-01*G53_0_35_1 + 1.666666666666664e-01*G53_0_35_2 + 1.666666666666664e-01*G53_1_35_0 + 1.666666666666664e-01*G53_1_35_1 + 1.666666666666664e-01*G53_1_35_2 + 1.666666666666664e-01*G53_2_35_0 + 1.666666666666664e-01*G53_2_35_1 + 1.666666666666665e-01*G53_2_35_2;
  block[57] = -1.666666666666664e-01*G29_0_20_0 - 1.666666666666664e-01*G29_1_20_0 - 1.666666666666664e-01*G29_2_20_0 - 1.666666666666664e-01*G33_0_22_0 - 1.666666666666664e-01*G33_1_22_0 - 1.666666666666664e-01*G33_2_22_0 - 1.666666666666664e-01*G35_0_23_0 - 1.666666666666664e-01*G35_1_23_0 - 1.666666666666664e-01*G35_2_23_0 - 1.666666666666664e-01*G38_0_8_0 - 1.666666666666664e-01*G38_1_8_0 - 1.666666666666664e-01*G38_2_8_0 - 1.666666666666664e-01*G42_0_10_0 - 1.666666666666664e-01*G42_1_10_0 - 1.666666666666664e-01*G42_2_10_0 - 1.666666666666664e-01*G44_0_11_0 - 1.666666666666664e-01*G44_1_11_0 - 1.666666666666664e-01*G44_2_11_0 - 1.666666666666664e-01*G47_0_32_0 - 1.666666666666664e-01*G47_1_32_0 - 1.666666666666664e-01*G47_2_32_0 - 1.666666666666664e-01*G51_0_34_0 - 1.666666666666664e-01*G51_1_34_0 - 1.666666666666664e-01*G51_2_34_0 - 1.666666666666664e-01*G53_0_35_0 - 1.666666666666664e-01*G53_1_35_0 - 1.666666666666664e-01*G53_2_35_0;
  block[58] = -1.666666666666664e-01*G29_0_20_1 - 1.666666666666664e-01*G29_1_20_1 - 1.666666666666665e-01*G29_2_20_1 - 1.666666666666664e-01*G33_0_22_1 - 1.666666666666664e-01*G33_1_22_1 - 1.666666666666665e-01*G33_2_22_1 - 1.666666666666664e-01*G35_0_23_1 - 1.666666666666664e-01*G35_1_23_1 - 1.666666666666665e-01*G35_2_23_1 - 1.666666666666664e-01*G38_0_8_1 - 1.666666666666664e-01*G38_1_8_1 - 1.666666666666665e-01*G38_2_8_1 - 1.666666666666664e-01*G42_0_10_1 - 1.666666666666664e-01*G42_1_10_1 - 1.666666666666665e-01*G42_2_10_1 - 1.666666666666664e-01*G44_0_11_1 - 1.666666666666664e-01*G44_1_11_1 - 1.666666666666665e-01*G44_2_11_1 - 1.666666666666664e-01*G47_0_32_1 - 1.666666666666664e-01*G47_1_32_1 - 1.666666666666665e-01*G47_2_32_1 - 1.666666666666664e-01*G51_0_34_1 - 1.666666666666664e-01*G51_1_34_1 - 1.666666666666665e-01*G51_2_34_1 - 1.666666666666664e-01*G53_0_35_1 - 1.666666666666664e-01*G53_1_35_1 - 1.666666666666665e-01*G53_2_35_1;
  block[59] = -1.666666666666664e-01*G29_0_20_2 - 1.666666666666664e-01*G29_1_20_2 - 1.666666666666665e-01*G29_2_20_2 - 1.666666666666664e-01*G33_0_22_2 - 1.666666666666664e-01*G33_1_22_2 - 1.666666666666665e-01*G33_2_22_2 - 1.666666666666664e-01*G35_0_23_2 - 1.666666666666664e-01*G35_1_23_2 - 1.666666666666665e-01*G35_2_23_2 - 1.666666666666664e-01*G38_0_8_2 - 1.666666666666664e-01*G38_1_8_2 - 1.666666666666665e-01*G38_2_8_2 - 1.666666666666664e-01*G42_0_10_2 - 1.666666666666664e-01*G42_1_10_2 - 1.666666666666665e-01*G42_2_10_2 - 1.666666666666664e-01*G44_0_11_2 - 1.666666666666664e-01*G44_1_11_2 - 1.666666666666665e-01*G44_2_11_2 - 1.666666666666664e-01*G47_0_32_2 - 1.666666666666664e-01*G47_1_32_2 - 1.666666666666665e-01*G47_2_32_2 - 1.666666666666664e-01*G51_0_34_2 - 1.666666666666664e-01*G51_1_34_2 - 1.666666666666665e-01*G51_2_34_2 - 1.666666666666664e-01*G53_0_35_2 - 1.666666666666664e-01*G53_1_35_2 - 1.666666666666665e-01*G53_2_35_2;
  block[60] = -1.666666666666664e-01*G27_0_18_0 - 1.666666666666664e-01*G27_0_18_1 - 1.666666666666664e-01*G27_0_18_2 - 1.666666666666664e-01*G30_0_21_0 - 1.666666666666664e-01*G30_0_21_1 - 1.666666666666664e-01*G30_0_21_2 - 1.666666666666664e-01*G32_0_22_0 - 1.666666666666664e-01*G32_0_22_1 - 1.666666666666664e-01*G32_0_22_2 - 1.666666666666664e-01*G36_0_6_0 - 1.666666666666664e-01*G36_0_6_1 - 1.666666666666664e-01*G36_0_6_2 - 1.666666666666664e-01*G39_0_9_0 - 1.666666666666664e-01*G39_0_9_1 - 1.666666666666664e-01*G39_0_9_2 - 1.666666666666664e-01*G41_0_10_0 - 1.666666666666664e-01*G41_0_10_1 - 1.666666666666664e-01*G41_0_10_2 - 1.666666666666664e-01*G45_0_30_0 - 1.666666666666664e-01*G45_0_30_1 - 1.666666666666664e-01*G45_0_30_2 - 1.666666666666664e-01*G48_0_33_0 - 1.666666666666664e-01*G48_0_33_1 - 1.666666666666664e-01*G48_0_33_2 - 1.666666666666664e-01*G50_0_34_0 - 1.666666666666664e-01*G50_0_34_1 - 1.666666666666664e-01*G50_0_34_2;
  block[61] = 1.666666666666664e-01*G27_0_18_0 + 1.666666666666664e-01*G30_0_21_0 + 1.666666666666664e-01*G32_0_22_0 + 1.666666666666664e-01*G36_0_6_0 + 1.666666666666664e-01*G39_0_9_0 + 1.666666666666664e-01*G41_0_10_0 + 1.666666666666664e-01*G45_0_30_0 + 1.666666666666664e-01*G48_0_33_0 + 1.666666666666664e-01*G50_0_34_0;
  block[62] = 1.666666666666664e-01*G27_0_18_1 + 1.666666666666664e-01*G30_0_21_1 + 1.666666666666664e-01*G32_0_22_1 + 1.666666666666664e-01*G36_0_6_1 + 1.666666666666664e-01*G39_0_9_1 + 1.666666666666664e-01*G41_0_10_1 + 1.666666666666664e-01*G45_0_30_1 + 1.666666666666664e-01*G48_0_33_1 + 1.666666666666664e-01*G50_0_34_1;
  block[63] = 1.666666666666664e-01*G27_0_18_2 + 1.666666666666664e-01*G30_0_21_2 + 1.666666666666664e-01*G32_0_22_2 + 1.666666666666664e-01*G36_0_6_2 + 1.666666666666664e-01*G39_0_9_2 + 1.666666666666664e-01*G41_0_10_2 + 1.666666666666664e-01*G45_0_30_2 + 1.666666666666664e-01*G48_0_33_2 + 1.666666666666664e-01*G50_0_34_2;
  block[64] = -1.666666666666664e-01*G28_0_19_0 - 1.666666666666664e-01*G28_0_19_1 - 1.666666666666664e-01*G28_0_19_2 - 1.666666666666664e-01*G31_0_21_0 - 1.666666666666664e-01*G31_0_21_1 - 1.666666666666664e-01*G31_0_21_2 - 1.666666666666664e-01*G34_0_23_0 - 1.666666666666664e-01*G34_0_23_1 - 1.666666666666664e-01*G34_0_23_2 - 1.666666666666664e-01*G37_0_7_0 - 1.666666666666664e-01*G37_0_7_1 - 1.666666666666664e-01*G37_0_7_2 - 1.666666666666664e-01*G40_0_9_0 - 1.666666666666664e-01*G40_0_9_1 - 1.666666666666664e-01*G40_0_9_2 - 1.666666666666664e-01*G43_0_11_0 - 1.666666666666664e-01*G43_0_11_1 - 1.666666666666664e-01*G43_0_11_2 - 1.666666666666664e-01*G46_0_31_0 - 1.666666666666664e-01*G46_0_31_1 - 1.666666666666664e-01*G46_0_31_2 - 1.666666666666664e-01*G49_0_33_0 - 1.666666666666664e-01*G49_0_33_1 - 1.666666666666664e-01*G49_0_33_2 - 1.666666666666664e-01*G52_0_35_0 - 1.666666666666664e-01*G52_0_35_1 - 1.666666666666664e-01*G52_0_35_2;
  block[65] = 1.666666666666664e-01*G28_0_19_0 + 1.666666666666664e-01*G31_0_21_0 + 1.666666666666664e-01*G34_0_23_0 + 1.666666666666664e-01*G37_0_7_0 + 1.666666666666664e-01*G40_0_9_0 + 1.666666666666664e-01*G43_0_11_0 + 1.666666666666664e-01*G46_0_31_0 + 1.666666666666664e-01*G49_0_33_0 + 1.666666666666664e-01*G52_0_35_0;
  block[66] = 1.666666666666664e-01*G28_0_19_1 + 1.666666666666664e-01*G31_0_21_1 + 1.666666666666664e-01*G34_0_23_1 + 1.666666666666664e-01*G37_0_7_1 + 1.666666666666664e-01*G40_0_9_1 + 1.666666666666664e-01*G43_0_11_1 + 1.666666666666664e-01*G46_0_31_1 + 1.666666666666664e-01*G49_0_33_1 + 1.666666666666664e-01*G52_0_35_1;
  block[67] = 1.666666666666664e-01*G28_0_19_2 + 1.666666666666664e-01*G31_0_21_2 + 1.666666666666664e-01*G34_0_23_2 + 1.666666666666664e-01*G37_0_7_2 + 1.666666666666664e-01*G40_0_9_2 + 1.666666666666664e-01*G43_0_11_2 + 1.666666666666664e-01*G46_0_31_2 + 1.666666666666664e-01*G49_0_33_2 + 1.666666666666664e-01*G52_0_35_2;
  block[68] = -1.666666666666664e-01*G29_0_20_0 - 1.666666666666664e-01*G29_0_20_1 - 1.666666666666664e-01*G29_0_20_2 - 1.666666666666664e-01*G33_0_22_0 - 1.666666666666664e-01*G33_0_22_1 - 1.666666666666664e-01*G33_0_22_2 - 1.666666666666664e-01*G35_0_23_0 - 1.666666666666664e-01*G35_0_23_1 - 1.666666666666664e-01*G35_0_23_2 - 1.666666666666664e-01*G38_0_8_0 - 1.666666666666664e-01*G38_0_8_1 - 1.666666666666664e-01*G38_0_8_2 - 1.666666666666664e-01*G42_0_10_0 - 1.666666666666664e-01*G42_0_10_1 - 1.666666666666664e-01*G42_0_10_2 - 1.666666666666664e-01*G44_0_11_0 - 1.666666666666664e-01*G44_0_11_1 - 1.666666666666664e-01*G44_0_11_2 - 1.666666666666664e-01*G47_0_32_0 - 1.666666666666664e-01*G47_0_32_1 - 1.666666666666664e-01*G47_0_32_2 - 1.666666666666664e-01*G51_0_34_0 - 1.666666666666664e-01*G51_0_34_1 - 1.666666666666664e-01*G51_0_34_2 - 1.666666666666664e-01*G53_0_35_0 - 1.666666666666664e-01*G53_0_35_1 - 1.666666666666664e-01*G53_0_35_2;
  block[69] = 1.666666666666664e-01*G29_0_20_0 + 1.666666666666664e-01*G33_0_22_0 + 1.666666666666664e-01*G35_0_23_0 + 1.666666666666664e-01*G38_0_8_0 + 1.666666666666664e-01*G42_0_10_0 + 1.666666666666664e-01*G44_0_11_0 + 1.666666666666664e-01*G47_0_32_0 + 1.666666666666664e-01*G51_0_34_0 + 1.666666666666664e-01*G53_0_35_0;
  block[70] = 1.666666666666664e-01*G29_0_20_1 + 1.666666666666664e-01*G33_0_22_1 + 1.666666666666664e-01*G35_0_23_1 + 1.666666666666664e-01*G38_0_8_1 + 1.666666666666664e-01*G42_0_10_1 + 1.666666666666664e-01*G44_0_11_1 + 1.666666666666664e-01*G47_0_32_1 + 1.666666666666664e-01*G51_0_34_1 + 1.666666666666664e-01*G53_0_35_1;
  block[71] = 1.666666666666664e-01*G29_0_20_2 + 1.666666666666664e-01*G33_0_22_2 + 1.666666666666664e-01*G35_0_23_2 + 1.666666666666664e-01*G38_0_8_2 + 1.666666666666664e-01*G42_0_10_2 + 1.666666666666664e-01*G44_0_11_2 + 1.666666666666664e-01*G47_0_32_2 + 1.666666666666664e-01*G51_0_34_2 + 1.666666666666664e-01*G53_0_35_2;
  block[72] = -1.666666666666664e-01*G27_1_18_0 - 1.666666666666664e-01*G27_1_18_1 - 1.666666666666664e-01*G27_1_18_2 - 1.666666666666664e-01*G30_1_21_0 - 1.666666666666664e-01*G30_1_21_1 - 1.666666666666664e-01*G30_1_21_2 - 1.666666666666664e-01*G32_1_22_0 - 1.666666666666664e-01*G32_1_22_1 - 1.666666666666664e-01*G32_1_22_2 - 1.666666666666664e-01*G36_1_6_0 - 1.666666666666664e-01*G36_1_6_1 - 1.666666666666664e-01*G36_1_6_2 - 1.666666666666664e-01*G39_1_9_0 - 1.666666666666664e-01*G39_1_9_1 - 1.666666666666664e-01*G39_1_9_2 - 1.666666666666664e-01*G41_1_10_0 - 1.666666666666664e-01*G41_1_10_1 - 1.666666666666664e-01*G41_1_10_2 - 1.666666666666664e-01*G45_1_30_0 - 1.666666666666664e-01*G45_1_30_1 - 1.666666666666664e-01*G45_1_30_2 - 1.666666666666664e-01*G48_1_33_0 - 1.666666666666664e-01*G48_1_33_1 - 1.666666666666664e-01*G48_1_33_2 - 1.666666666666664e-01*G50_1_34_0 - 1.666666666666664e-01*G50_1_34_1 - 1.666666666666664e-01*G50_1_34_2;
  block[73] = 1.666666666666664e-01*G27_1_18_0 + 1.666666666666664e-01*G30_1_21_0 + 1.666666666666664e-01*G32_1_22_0 + 1.666666666666664e-01*G36_1_6_0 + 1.666666666666664e-01*G39_1_9_0 + 1.666666666666664e-01*G41_1_10_0 + 1.666666666666664e-01*G45_1_30_0 + 1.666666666666664e-01*G48_1_33_0 + 1.666666666666664e-01*G50_1_34_0;
  block[74] = 1.666666666666665e-01*G27_1_18_1 + 1.666666666666665e-01*G30_1_21_1 + 1.666666666666665e-01*G32_1_22_1 + 1.666666666666665e-01*G36_1_6_1 + 1.666666666666665e-01*G39_1_9_1 + 1.666666666666665e-01*G41_1_10_1 + 1.666666666666665e-01*G45_1_30_1 + 1.666666666666665e-01*G48_1_33_1 + 1.666666666666665e-01*G50_1_34_1;
  block[75] = 1.666666666666665e-01*G27_1_18_2 + 1.666666666666665e-01*G30_1_21_2 + 1.666666666666665e-01*G32_1_22_2 + 1.666666666666665e-01*G36_1_6_2 + 1.666666666666665e-01*G39_1_9_2 + 1.666666666666665e-01*G41_1_10_2 + 1.666666666666665e-01*G45_1_30_2 + 1.666666666666665e-01*G48_1_33_2 + 1.666666666666665e-01*G50_1_34_2;
  block[76] = -1.666666666666664e-01*G28_1_19_0 - 1.666666666666664e-01*G28_1_19_1 - 1.666666666666665e-01*G28_1_19_2 - 1.666666666666664e-01*G31_1_21_0 - 1.666666666666664e-01*G31_1_21_1 - 1.666666666666665e-01*G31_1_21_2 - 1.666666666666664e-01*G34_1_23_0 - 1.666666666666664e-01*G34_1_23_1 - 1.666666666666665e-01*G34_1_23_2 - 1.666666666666664e-01*G37_1_7_0 - 1.666666666666664e-01*G37_1_7_1 - 1.666666666666665e-01*G37_1_7_2 - 1.666666666666664e-01*G40_1_9_0 - 1.666666666666664e-01*G40_1_9_1 - 1.666666666666665e-01*G40_1_9_2 - 1.666666666666664e-01*G43_1_11_0 - 1.666666666666664e-01*G43_1_11_1 - 1.666666666666665e-01*G43_1_11_2 - 1.666666666666664e-01*G46_1_31_0 - 1.666666666666664e-01*G46_1_31_1 - 1.666666666666665e-01*G46_1_31_2 - 1.666666666666664e-01*G49_1_33_0 - 1.666666666666664e-01*G49_1_33_1 - 1.666666666666665e-01*G49_1_33_2 - 1.666666666666664e-01*G52_1_35_0 - 1.666666666666664e-01*G52_1_35_1 - 1.666666666666665e-01*G52_1_35_2;
  block[77] = 1.666666666666664e-01*G28_1_19_0 + 1.666666666666664e-01*G31_1_21_0 + 1.666666666666664e-01*G34_1_23_0 + 1.666666666666664e-01*G37_1_7_0 + 1.666666666666664e-01*G40_1_9_0 + 1.666666666666664e-01*G43_1_11_0 + 1.666666666666664e-01*G46_1_31_0 + 1.666666666666664e-01*G49_1_33_0 + 1.666666666666664e-01*G52_1_35_0;
  block[78] = 1.666666666666665e-01*G28_1_19_1 + 1.666666666666665e-01*G31_1_21_1 + 1.666666666666665e-01*G34_1_23_1 + 1.666666666666665e-01*G37_1_7_1 + 1.666666666666665e-01*G40_1_9_1 + 1.666666666666665e-01*G43_1_11_1 + 1.666666666666665e-01*G46_1_31_1 + 1.666666666666665e-01*G49_1_33_1 + 1.666666666666665e-01*G52_1_35_1;
  block[79] = 1.666666666666665e-01*G28_1_19_2 + 1.666666666666665e-01*G31_1_21_2 + 1.666666666666665e-01*G34_1_23_2 + 1.666666666666665e-01*G37_1_7_2 + 1.666666666666665e-01*G40_1_9_2 + 1.666666666666665e-01*G43_1_11_2 + 1.666666666666665e-01*G46_1_31_2 + 1.666666666666665e-01*G49_1_33_2 + 1.666666666666665e-01*G52_1_35_2;
  block[80] = -1.666666666666664e-01*G29_1_20_0 - 1.666666666666664e-01*G29_1_20_1 - 1.666666666666665e-01*G29_1_20_2 - 1.666666666666664e-01*G33_1_22_0 - 1.666666666666664e-01*G33_1_22_1 - 1.666666666666665e-01*G33_1_22_2 - 1.666666666666664e-01*G35_1_23_0 - 1.666666666666664e-01*G35_1_23_1 - 1.666666666666665e-01*G35_1_23_2 - 1.666666666666664e-01*G38_1_8_0 - 1.666666666666664e-01*G38_1_8_1 - 1.666666666666665e-01*G38_1_8_2 - 1.666666666666664e-01*G42_1_10_0 - 1.666666666666664e-01*G42_1_10_1 - 1.666666666666665e-01*G42_1_10_2 - 1.666666666666664e-01*G44_1_11_0 - 1.666666666666664e-01*G44_1_11_1 - 1.666666666666665e-01*G44_1_11_2 - 1.666666666666664e-01*G47_1_32_0 - 1.666666666666664e-01*G47_1_32_1 - 1.666666666666665e-01*G47_1_32_2 - 1.666666666666664e-01*G51_1_34_0 - 1.666666666666664e-01*G51_1_34_1 - 1.666666666666665e-01*G51_1_34_2 - 1.666666666666664e-01*G53_1_35_0 - 1.666666666666664e-01*G53_1_35_1 - 1.666666666666665e-01*G53_1_35_2;
  block[81] = 1.666666666666664e-01*G29_1_20_0 + 1.666666666666664e-01*G33_1_22_0 + 1.666666666666664e-01*G35_1_23_0 + 1.666666666666664e-01*G38_1_8_0 + 1.666666666666664e-01*G42_1_10_0 + 1.666666666666664e-01*G44_1_11_0 + 1.666666666666664e-01*G47_1_32_0 + 1.666666666666664e-01*G51_1_34_0 + 1.666666666666664e-01*G53_1_35_0;
  block[82] = 1.666666666666665e-01*G29_1_20_1 + 1.666666666666665e-01*G33_1_22_1 + 1.666666666666665e-01*G35_1_23_1 + 1.666666666666665e-01*G38_1_8_1 + 1.666666666666665e-01*G42_1_10_1 + 1.666666666666665e-01*G44_1_11_1 + 1.666666666666665e-01*G47_1_32_1 + 1.666666666666665e-01*G51_1_34_1 + 1.666666666666665e-01*G53_1_35_1;
  block[83] = 1.666666666666665e-01*G29_1_20_2 + 1.666666666666665e-01*G33_1_22_2 + 1.666666666666665e-01*G35_1_23_2 + 1.666666666666665e-01*G38_1_8_2 + 1.666666666666665e-01*G42_1_10_2 + 1.666666666666665e-01*G44_1_11_2 + 1.666666666666665e-01*G47_1_32_2 + 1.666666666666665e-01*G51_1_34_2 + 1.666666666666665e-01*G53_1_35_2;
  block[84] = -1.666666666666664e-01*G27_2_18_0 - 1.666666666666664e-01*G27_2_18_1 - 1.666666666666664e-01*G27_2_18_2 - 1.666666666666664e-01*G30_2_21_0 - 1.666666666666664e-01*G30_2_21_1 - 1.666666666666664e-01*G30_2_21_2 - 1.666666666666664e-01*G32_2_22_0 - 1.666666666666664e-01*G32_2_22_1 - 1.666666666666664e-01*G32_2_22_2 - 1.666666666666664e-01*G36_2_6_0 - 1.666666666666664e-01*G36_2_6_1 - 1.666666666666664e-01*G36_2_6_2 - 1.666666666666664e-01*G39_2_9_0 - 1.666666666666664e-01*G39_2_9_1 - 1.666666666666664e-01*G39_2_9_2 - 1.666666666666664e-01*G41_2_10_0 - 1.666666666666664e-01*G41_2_10_1 - 1.666666666666664e-01*G41_2_10_2 - 1.666666666666664e-01*G45_2_30_0 - 1.666666666666664e-01*G45_2_30_1 - 1.666666666666664e-01*G45_2_30_2 - 1.666666666666664e-01*G48_2_33_0 - 1.666666666666664e-01*G48_2_33_1 - 1.666666666666664e-01*G48_2_33_2 - 1.666666666666664e-01*G50_2_34_0 - 1.666666666666664e-01*G50_2_34_1 - 1.666666666666664e-01*G50_2_34_2;
  block[85] = 1.666666666666664e-01*G27_2_18_0 + 1.666666666666664e-01*G30_2_21_0 + 1.666666666666664e-01*G32_2_22_0 + 1.666666666666664e-01*G36_2_6_0 + 1.666666666666664e-01*G39_2_9_0 + 1.666666666666664e-01*G41_2_10_0 + 1.666666666666664e-01*G45_2_30_0 + 1.666666666666664e-01*G48_2_33_0 + 1.666666666666664e-01*G50_2_34_0;
  block[86] = 1.666666666666665e-01*G27_2_18_1 + 1.666666666666665e-01*G30_2_21_1 + 1.666666666666665e-01*G32_2_22_1 + 1.666666666666665e-01*G36_2_6_1 + 1.666666666666665e-01*G39_2_9_1 + 1.666666666666665e-01*G41_2_10_1 + 1.666666666666665e-01*G45_2_30_1 + 1.666666666666665e-01*G48_2_33_1 + 1.666666666666665e-01*G50_2_34_1;
  block[87] = 1.666666666666665e-01*G27_2_18_2 + 1.666666666666665e-01*G30_2_21_2 + 1.666666666666665e-01*G32_2_22_2 + 1.666666666666665e-01*G36_2_6_2 + 1.666666666666665e-01*G39_2_9_2 + 1.666666666666665e-01*G41_2_10_2 + 1.666666666666665e-01*G45_2_30_2 + 1.666666666666665e-01*G48_2_33_2 + 1.666666666666665e-01*G50_2_34_2;
  block[88] = -1.666666666666664e-01*G28_2_19_0 - 1.666666666666664e-01*G28_2_19_1 - 1.666666666666665e-01*G28_2_19_2 - 1.666666666666664e-01*G31_2_21_0 - 1.666666666666664e-01*G31_2_21_1 - 1.666666666666665e-01*G31_2_21_2 - 1.666666666666664e-01*G34_2_23_0 - 1.666666666666664e-01*G34_2_23_1 - 1.666666666666665e-01*G34_2_23_2 - 1.666666666666664e-01*G37_2_7_0 - 1.666666666666664e-01*G37_2_7_1 - 1.666666666666665e-01*G37_2_7_2 - 1.666666666666664e-01*G40_2_9_0 - 1.666666666666664e-01*G40_2_9_1 - 1.666666666666665e-01*G40_2_9_2 - 1.666666666666664e-01*G43_2_11_0 - 1.666666666666664e-01*G43_2_11_1 - 1.666666666666665e-01*G43_2_11_2 - 1.666666666666664e-01*G46_2_31_0 - 1.666666666666664e-01*G46_2_31_1 - 1.666666666666665e-01*G46_2_31_2 - 1.666666666666664e-01*G49_2_33_0 - 1.666666666666664e-01*G49_2_33_1 - 1.666666666666665e-01*G49_2_33_2 - 1.666666666666664e-01*G52_2_35_0 - 1.666666666666664e-01*G52_2_35_1 - 1.666666666666665e-01*G52_2_35_2;
  block[89] = 1.666666666666664e-01*G28_2_19_0 + 1.666666666666664e-01*G31_2_21_0 + 1.666666666666664e-01*G34_2_23_0 + 1.666666666666664e-01*G37_2_7_0 + 1.666666666666664e-01*G40_2_9_0 + 1.666666666666664e-01*G43_2_11_0 + 1.666666666666664e-01*G46_2_31_0 + 1.666666666666664e-01*G49_2_33_0 + 1.666666666666664e-01*G52_2_35_0;
  block[90] = 1.666666666666665e-01*G28_2_19_1 + 1.666666666666665e-01*G31_2_21_1 + 1.666666666666665e-01*G34_2_23_1 + 1.666666666666665e-01*G37_2_7_1 + 1.666666666666665e-01*G40_2_9_1 + 1.666666666666665e-01*G43_2_11_1 + 1.666666666666665e-01*G46_2_31_1 + 1.666666666666665e-01*G49_2_33_1 + 1.666666666666665e-01*G52_2_35_1;
  block[91] = 1.666666666666665e-01*G28_2_19_2 + 1.666666666666665e-01*G31_2_21_2 + 1.666666666666665e-01*G34_2_23_2 + 1.666666666666665e-01*G37_2_7_2 + 1.666666666666665e-01*G40_2_9_2 + 1.666666666666665e-01*G43_2_11_2 + 1.666666666666665e-01*G46_2_31_2 + 1.666666666666665e-01*G49_2_33_2 + 1.666666666666665e-01*G52_2_35_2;
  block[92] = -1.666666666666664e-01*G29_2_20_0 - 1.666666666666664e-01*G29_2_20_1 - 1.666666666666665e-01*G29_2_20_2 - 1.666666666666664e-01*G33_2_22_0 - 1.666666666666664e-01*G33_2_22_1 - 1.666666666666665e-01*G33_2_22_2 - 1.666666666666664e-01*G35_2_23_0 - 1.666666666666664e-01*G35_2_23_1 - 1.666666666666665e-01*G35_2_23_2 - 1.666666666666664e-01*G38_2_8_0 - 1.666666666666664e-01*G38_2_8_1 - 1.666666666666665e-01*G38_2_8_2 - 1.666666666666664e-01*G42_2_10_0 - 1.666666666666664e-01*G42_2_10_1 - 1.666666666666665e-01*G42_2_10_2 - 1.666666666666664e-01*G44_2_11_0 - 1.666666666666664e-01*G44_2_11_1 - 1.666666666666665e-01*G44_2_11_2 - 1.666666666666664e-01*G47_2_32_0 - 1.666666666666664e-01*G47_2_32_1 - 1.666666666666665e-01*G47_2_32_2 - 1.666666666666664e-01*G51_2_34_0 - 1.666666666666664e-01*G51_2_34_1 - 1.666666666666665e-01*G51_2_34_2 - 1.666666666666664e-01*G53_2_35_0 - 1.666666666666664e-01*G53_2_35_1 - 1.666666666666665e-01*G53_2_35_2;
  block[93] = 1.666666666666664e-01*G29_2_20_0 + 1.666666666666664e-01*G33_2_22_0 + 1.666666666666664e-01*G35_2_23_0 + 1.666666666666664e-01*G38_2_8_0 + 1.666666666666664e-01*G42_2_10_0 + 1.666666666666664e-01*G44_2_11_0 + 1.666666666666664e-01*G47_2_32_0 + 1.666666666666664e-01*G51_2_34_0 + 1.666666666666664e-01*G53_2_35_0;
  block[94] = 1.666666666666665e-01*G29_2_20_1 + 1.666666666666665e-01*G33_2_22_1 + 1.666666666666665e-01*G35_2_23_1 + 1.666666666666665e-01*G38_2_8_1 + 1.666666666666665e-01*G42_2_10_1 + 1.666666666666665e-01*G44_2_11_1 + 1.666666666666665e-01*G47_2_32_1 + 1.666666666666665e-01*G51_2_34_1 + 1.666666666666665e-01*G53_2_35_1;
  block[95] = 1.666666666666665e-01*G29_2_20_2 + 1.666666666666665e-01*G33_2_22_2 + 1.666666666666665e-01*G35_2_23_2 + 1.666666666666665e-01*G38_2_8_2 + 1.666666666666665e-01*G42_2_10_2 + 1.666666666666665e-01*G44_2_11_2 + 1.666666666666665e-01*G47_2_32_2 + 1.666666666666665e-01*G51_2_34_2 + 1.666666666666665e-01*G53_2_35_2;
  block[96] = 1.666666666666664e-01*G54_0_24_0 + 1.666666666666664e-01*G54_0_24_1 + 1.666666666666664e-01*G54_0_24_2 + 1.666666666666664e-01*G54_1_24_0 + 1.666666666666664e-01*G54_1_24_1 + 1.666666666666664e-01*G54_1_24_2 + 1.666666666666664e-01*G54_2_24_0 + 1.666666666666664e-01*G54_2_24_1 + 1.666666666666664e-01*G54_2_24_2 + 1.666666666666664e-01*G57_0_27_0 + 1.666666666666664e-01*G57_0_27_1 + 1.666666666666664e-01*G57_0_27_2 + 1.666666666666664e-01*G57_1_27_0 + 1.666666666666664e-01*G57_1_27_1 + 1.666666666666664e-01*G57_1_27_2 + 1.666666666666664e-01*G57_2_27_0 + 1.666666666666664e-01*G57_2_27_1 + 1.666666666666664e-01*G57_2_27_2 + 1.666666666666664e-01*G59_0_28_0 + 1.666666666666664e-01*G59_0_28_1 + 1.666666666666664e-01*G59_0_28_2 + 1.666666666666664e-01*G59_1_28_0 + 1.666666666666664e-01*G59_1_28_1 + 1.666666666666664e-01*G59_1_28_2 + 1.666666666666664e-01*G59_2_28_0 + 1.666666666666664e-01*G59_2_28_1 + 1.666666666666664e-01*G59_2_28_2 + 1.666666666666664e-01*G63_0_30_0 + 1.666666666666664e-01*G63_0_30_1 + 1.666666666666664e-01*G63_0_30_2 + 1.666666666666664e-01*G63_1_30_0 + 1.666666666666664e-01*G63_1_30_1 + 1.666666666666664e-01*G63_1_30_2 + 1.666666666666664e-01*G63_2_30_0 + 1.666666666666664e-01*G63_2_30_1 + 1.666666666666664e-01*G63_2_30_2 + 1.666666666666664e-01*G66_0_33_0 + 1.666666666666664e-01*G66_0_33_1 + 1.666666666666664e-01*G66_0_33_2 + 1.666666666666664e-01*G66_1_33_0 + 1.666666666666664e-01*G66_1_33_1 + 1.666666666666664e-01*G66_1_33_2 + 1.666666666666664e-01*G66_2_33_0 + 1.666666666666664e-01*G66_2_33_1 + 1.666666666666664e-01*G66_2_33_2 + 1.666666666666664e-01*G68_0_34_0 + 1.666666666666664e-01*G68_0_34_1 + 1.666666666666664e-01*G68_0_34_2 + 1.666666666666664e-01*G68_1_34_0 + 1.666666666666664e-01*G68_1_34_1 + 1.666666666666664e-01*G68_1_34_2 + 1.666666666666664e-01*G68_2_34_0 + 1.666666666666664e-01*G68_2_34_1 + 1.666666666666664e-01*G68_2_34_2 + 1.666666666666664e-01*G72_0_12_0 + 1.666666666666664e-01*G72_0_12_1 + 1.666666666666664e-01*G72_0_12_2 + 1.666666666666664e-01*G72_1_12_0 + 1.666666666666664e-01*G72_1_12_1 + 1.666666666666664e-01*G72_1_12_2 + 1.666666666666664e-01*G72_2_12_0 + 1.666666666666664e-01*G72_2_12_1 + 1.666666666666664e-01*G72_2_12_2 + 1.666666666666664e-01*G75_0_15_0 + 1.666666666666664e-01*G75_0_15_1 + 1.666666666666664e-01*G75_0_15_2 + 1.666666666666664e-01*G75_1_15_0 + 1.666666666666664e-01*G75_1_15_1 + 1.666666666666664e-01*G75_1_15_2 + 1.666666666666664e-01*G75_2_15_0 + 1.666666666666664e-01*G75_2_15_1 + 1.666666666666664e-01*G75_2_15_2 + 1.666666666666664e-01*G77_0_16_0 + 1.666666666666664e-01*G77_0_16_1 + 1.666666666666664e-01*G77_0_16_2 + 1.666666666666664e-01*G77_1_16_0 + 1.666666666666664e-01*G77_1_16_1 + 1.666666666666664e-01*G77_1_16_2 + 1.666666666666664e-01*G77_2_16_0 + 1.666666666666664e-01*G77_2_16_1 + 1.666666666666664e-01*G77_2_16_2;
  block[97] = -1.666666666666664e-01*G54_0_24_0 - 1.666666666666664e-01*G54_1_24_0 - 1.666666666666664e-01*G54_2_24_0 - 1.666666666666664e-01*G57_0_27_0 - 1.666666666666664e-01*G57_1_27_0 - 1.666666666666664e-01*G57_2_27_0 - 1.666666666666664e-01*G59_0_28_0 - 1.666666666666664e-01*G59_1_28_0 - 1.666666666666664e-01*G59_2_28_0 - 1.666666666666664e-01*G63_0_30_0 - 1.666666666666664e-01*G63_1_30_0 - 1.666666666666664e-01*G63_2_30_0 - 1.666666666666664e-01*G66_0_33_0 - 1.666666666666664e-01*G66_1_33_0 - 1.666666666666664e-01*G66_2_33_0 - 1.666666666666664e-01*G68_0_34_0 - 1.666666666666664e-01*G68_1_34_0 - 1.666666666666664e-01*G68_2_34_0 - 1.666666666666664e-01*G72_0_12_0 - 1.666666666666664e-01*G72_1_12_0 - 1.666666666666664e-01*G72_2_12_0 - 1.666666666666664e-01*G75_0_15_0 - 1.666666666666664e-01*G75_1_15_0 - 1.666666666666664e-01*G75_2_15_0 - 1.666666666666664e-01*G77_0_16_0 - 1.666666666666664e-01*G77_1_16_0 - 1.666666666666664e-01*G77_2_16_0;
  block[98] = -1.666666666666664e-01*G54_0_24_1 - 1.666666666666664e-01*G54_1_24_1 - 1.666666666666665e-01*G54_2_24_1 - 1.666666666666664e-01*G57_0_27_1 - 1.666666666666664e-01*G57_1_27_1 - 1.666666666666665e-01*G57_2_27_1 - 1.666666666666664e-01*G59_0_28_1 - 1.666666666666664e-01*G59_1_28_1 - 1.666666666666665e-01*G59_2_28_1 - 1.666666666666664e-01*G63_0_30_1 - 1.666666666666664e-01*G63_1_30_1 - 1.666666666666665e-01*G63_2_30_1 - 1.666666666666664e-01*G66_0_33_1 - 1.666666666666664e-01*G66_1_33_1 - 1.666666666666665e-01*G66_2_33_1 - 1.666666666666664e-01*G68_0_34_1 - 1.666666666666664e-01*G68_1_34_1 - 1.666666666666665e-01*G68_2_34_1 - 1.666666666666664e-01*G72_0_12_1 - 1.666666666666664e-01*G72_1_12_1 - 1.666666666666665e-01*G72_2_12_1 - 1.666666666666664e-01*G75_0_15_1 - 1.666666666666664e-01*G75_1_15_1 - 1.666666666666665e-01*G75_2_15_1 - 1.666666666666664e-01*G77_0_16_1 - 1.666666666666664e-01*G77_1_16_1 - 1.666666666666665e-01*G77_2_16_1;
  block[99] = -1.666666666666664e-01*G54_0_24_2 - 1.666666666666664e-01*G54_1_24_2 - 1.666666666666665e-01*G54_2_24_2 - 1.666666666666664e-01*G57_0_27_2 - 1.666666666666664e-01*G57_1_27_2 - 1.666666666666665e-01*G57_2_27_2 - 1.666666666666664e-01*G59_0_28_2 - 1.666666666666664e-01*G59_1_28_2 - 1.666666666666665e-01*G59_2_28_2 - 1.666666666666664e-01*G63_0_30_2 - 1.666666666666664e-01*G63_1_30_2 - 1.666666666666665e-01*G63_2_30_2 - 1.666666666666664e-01*G66_0_33_2 - 1.666666666666664e-01*G66_1_33_2 - 1.666666666666665e-01*G66_2_33_2 - 1.666666666666664e-01*G68_0_34_2 - 1.666666666666664e-01*G68_1_34_2 - 1.666666666666665e-01*G68_2_34_2 - 1.666666666666664e-01*G72_0_12_2 - 1.666666666666664e-01*G72_1_12_2 - 1.666666666666665e-01*G72_2_12_2 - 1.666666666666664e-01*G75_0_15_2 - 1.666666666666664e-01*G75_1_15_2 - 1.666666666666665e-01*G75_2_15_2 - 1.666666666666664e-01*G77_0_16_2 - 1.666666666666664e-01*G77_1_16_2 - 1.666666666666665e-01*G77_2_16_2;
  block[100] = 1.666666666666664e-01*G55_0_25_0 + 1.666666666666664e-01*G55_0_25_1 + 1.666666666666664e-01*G55_0_25_2 + 1.666666666666664e-01*G55_1_25_0 + 1.666666666666664e-01*G55_1_25_1 + 1.666666666666664e-01*G55_1_25_2 + 1.666666666666664e-01*G55_2_25_0 + 1.666666666666664e-01*G55_2_25_1 + 1.666666666666665e-01*G55_2_25_2 + 1.666666666666664e-01*G58_0_27_0 + 1.666666666666664e-01*G58_0_27_1 + 1.666666666666664e-01*G58_0_27_2 + 1.666666666666664e-01*G58_1_27_0 + 1.666666666666664e-01*G58_1_27_1 + 1.666666666666664e-01*G58_1_27_2 + 1.666666666666664e-01*G58_2_27_0 + 1.666666666666664e-01*G58_2_27_1 + 1.666666666666665e-01*G58_2_27_2 + 1.666666666666664e-01*G61_0_29_0 + 1.666666666666664e-01*G61_0_29_1 + 1.666666666666664e-01*G61_0_29_2 + 1.666666666666664e-01*G61_1_29_0 + 1.666666666666664e-01*G61_1_29_1 + 1.666666666666664e-01*G61_1_29_2 + 1.666666666666664e-01*G61_2_29_0 + 1.666666666666664e-01*G61_2_29_1 + 1.666666666666665e-01*G61_2_29_2 + 1.666666666666664e-01*G64_0_31_0 + 1.666666666666664e-01*G64_0_31_1 + 1.666666666666664e-01*G64_0_31_2 + 1.666666666666664e-01*G64_1_31_0 + 1.666666666666664e-01*G64_1_31_1 + 1.666666666666664e-01*G64_1_31_2 + 1.666666666666664e-01*G64_2_31_0 + 1.666666666666664e-01*G64_2_31_1 + 1.666666666666665e-01*G64_2_31_2 + 1.666666666666664e-01*G67_0_33_0 + 1.666666666666664e-01*G67_0_33_1 + 1.666666666666664e-01*G67_0_33_2 + 1.666666666666664e-01*G67_1_33_0 + 1.666666666666664e-01*G67_1_33_1 + 1.666666666666664e-01*G67_1_33_2 + 1.666666666666664e-01*G67_2_33_0 + 1.666666666666664e-01*G67_2_33_1 + 1.666666666666665e-01*G67_2_33_2 + 1.666666666666664e-01*G70_0_35_0 + 1.666666666666664e-01*G70_0_35_1 + 1.666666666666664e-01*G70_0_35_2 + 1.666666666666664e-01*G70_1_35_0 + 1.666666666666664e-01*G70_1_35_1 + 1.666666666666664e-01*G70_1_35_2 + 1.666666666666664e-01*G70_2_35_0 + 1.666666666666664e-01*G70_2_35_1 + 1.666666666666665e-01*G70_2_35_2 + 1.666666666666664e-01*G73_0_13_0 + 1.666666666666664e-01*G73_0_13_1 + 1.666666666666664e-01*G73_0_13_2 + 1.666666666666664e-01*G73_1_13_0 + 1.666666666666664e-01*G73_1_13_1 + 1.666666666666664e-01*G73_1_13_2 + 1.666666666666664e-01*G73_2_13_0 + 1.666666666666664e-01*G73_2_13_1 + 1.666666666666665e-01*G73_2_13_2 + 1.666666666666664e-01*G76_0_15_0 + 1.666666666666664e-01*G76_0_15_1 + 1.666666666666664e-01*G76_0_15_2 + 1.666666666666664e-01*G76_1_15_0 + 1.666666666666664e-01*G76_1_15_1 + 1.666666666666664e-01*G76_1_15_2 + 1.666666666666664e-01*G76_2_15_0 + 1.666666666666664e-01*G76_2_15_1 + 1.666666666666665e-01*G76_2_15_2 + 1.666666666666664e-01*G79_0_17_0 + 1.666666666666664e-01*G79_0_17_1 + 1.666666666666664e-01*G79_0_17_2 + 1.666666666666664e-01*G79_1_17_0 + 1.666666666666664e-01*G79_1_17_1 + 1.666666666666664e-01*G79_1_17_2 + 1.666666666666664e-01*G79_2_17_0 + 1.666666666666664e-01*G79_2_17_1 + 1.666666666666665e-01*G79_2_17_2;
  block[101] = -1.666666666666664e-01*G55_0_25_0 - 1.666666666666664e-01*G55_1_25_0 - 1.666666666666664e-01*G55_2_25_0 - 1.666666666666664e-01*G58_0_27_0 - 1.666666666666664e-01*G58_1_27_0 - 1.666666666666664e-01*G58_2_27_0 - 1.666666666666664e-01*G61_0_29_0 - 1.666666666666664e-01*G61_1_29_0 - 1.666666666666664e-01*G61_2_29_0 - 1.666666666666664e-01*G64_0_31_0 - 1.666666666666664e-01*G64_1_31_0 - 1.666666666666664e-01*G64_2_31_0 - 1.666666666666664e-01*G67_0_33_0 - 1.666666666666664e-01*G67_1_33_0 - 1.666666666666664e-01*G67_2_33_0 - 1.666666666666664e-01*G70_0_35_0 - 1.666666666666664e-01*G70_1_35_0 - 1.666666666666664e-01*G70_2_35_0 - 1.666666666666664e-01*G73_0_13_0 - 1.666666666666664e-01*G73_1_13_0 - 1.666666666666664e-01*G73_2_13_0 - 1.666666666666664e-01*G76_0_15_0 - 1.666666666666664e-01*G76_1_15_0 - 1.666666666666664e-01*G76_2_15_0 - 1.666666666666664e-01*G79_0_17_0 - 1.666666666666664e-01*G79_1_17_0 - 1.666666666666664e-01*G79_2_17_0;
  block[102] = -1.666666666666664e-01*G55_0_25_1 - 1.666666666666664e-01*G55_1_25_1 - 1.666666666666665e-01*G55_2_25_1 - 1.666666666666664e-01*G58_0_27_1 - 1.666666666666664e-01*G58_1_27_1 - 1.666666666666665e-01*G58_2_27_1 - 1.666666666666664e-01*G61_0_29_1 - 1.666666666666664e-01*G61_1_29_1 - 1.666666666666665e-01*G61_2_29_1 - 1.666666666666664e-01*G64_0_31_1 - 1.666666666666664e-01*G64_1_31_1 - 1.666666666666665e-01*G64_2_31_1 - 1.666666666666664e-01*G67_0_33_1 - 1.666666666666664e-01*G67_1_33_1 - 1.666666666666665e-01*G67_2_33_1 - 1.666666666666664e-01*G70_0_35_1 - 1.666666666666664e-01*G70_1_35_1 - 1.666666666666665e-01*G70_2_35_1 - 1.666666666666664e-01*G73_0_13_1 - 1.666666666666664e-01*G73_1_13_1 - 1.666666666666665e-01*G73_2_13_1 - 1.666666666666664e-01*G76_0_15_1 - 1.666666666666664e-01*G76_1_15_1 - 1.666666666666665e-01*G76_2_15_1 - 1.666666666666664e-01*G79_0_17_1 - 1.666666666666664e-01*G79_1_17_1 - 1.666666666666665e-01*G79_2_17_1;
  block[103] = -1.666666666666664e-01*G55_0_25_2 - 1.666666666666664e-01*G55_1_25_2 - 1.666666666666665e-01*G55_2_25_2 - 1.666666666666664e-01*G58_0_27_2 - 1.666666666666664e-01*G58_1_27_2 - 1.666666666666665e-01*G58_2_27_2 - 1.666666666666664e-01*G61_0_29_2 - 1.666666666666664e-01*G61_1_29_2 - 1.666666666666665e-01*G61_2_29_2 - 1.666666666666664e-01*G64_0_31_2 - 1.666666666666664e-01*G64_1_31_2 - 1.666666666666665e-01*G64_2_31_2 - 1.666666666666664e-01*G67_0_33_2 - 1.666666666666664e-01*G67_1_33_2 - 1.666666666666665e-01*G67_2_33_2 - 1.666666666666664e-01*G70_0_35_2 - 1.666666666666664e-01*G70_1_35_2 - 1.666666666666665e-01*G70_2_35_2 - 1.666666666666664e-01*G73_0_13_2 - 1.666666666666664e-01*G73_1_13_2 - 1.666666666666665e-01*G73_2_13_2 - 1.666666666666664e-01*G76_0_15_2 - 1.666666666666664e-01*G76_1_15_2 - 1.666666666666665e-01*G76_2_15_2 - 1.666666666666664e-01*G79_0_17_2 - 1.666666666666664e-01*G79_1_17_2 - 1.666666666666665e-01*G79_2_17_2;
  block[104] = 1.666666666666664e-01*G56_0_26_0 + 1.666666666666664e-01*G56_0_26_1 + 1.666666666666664e-01*G56_0_26_2 + 1.666666666666664e-01*G56_1_26_0 + 1.666666666666664e-01*G56_1_26_1 + 1.666666666666664e-01*G56_1_26_2 + 1.666666666666664e-01*G56_2_26_0 + 1.666666666666664e-01*G56_2_26_1 + 1.666666666666665e-01*G56_2_26_2 + 1.666666666666664e-01*G60_0_28_0 + 1.666666666666664e-01*G60_0_28_1 + 1.666666666666664e-01*G60_0_28_2 + 1.666666666666664e-01*G60_1_28_0 + 1.666666666666664e-01*G60_1_28_1 + 1.666666666666664e-01*G60_1_28_2 + 1.666666666666664e-01*G60_2_28_0 + 1.666666666666664e-01*G60_2_28_1 + 1.666666666666665e-01*G60_2_28_2 + 1.666666666666664e-01*G62_0_29_0 + 1.666666666666664e-01*G62_0_29_1 + 1.666666666666664e-01*G62_0_29_2 + 1.666666666666664e-01*G62_1_29_0 + 1.666666666666664e-01*G62_1_29_1 + 1.666666666666664e-01*G62_1_29_2 + 1.666666666666664e-01*G62_2_29_0 + 1.666666666666664e-01*G62_2_29_1 + 1.666666666666665e-01*G62_2_29_2 + 1.666666666666664e-01*G65_0_32_0 + 1.666666666666664e-01*G65_0_32_1 + 1.666666666666664e-01*G65_0_32_2 + 1.666666666666664e-01*G65_1_32_0 + 1.666666666666664e-01*G65_1_32_1 + 1.666666666666664e-01*G65_1_32_2 + 1.666666666666664e-01*G65_2_32_0 + 1.666666666666664e-01*G65_2_32_1 + 1.666666666666665e-01*G65_2_32_2 + 1.666666666666664e-01*G69_0_34_0 + 1.666666666666664e-01*G69_0_34_1 + 1.666666666666664e-01*G69_0_34_2 + 1.666666666666664e-01*G69_1_34_0 + 1.666666666666664e-01*G69_1_34_1 + 1.666666666666664e-01*G69_1_34_2 + 1.666666666666664e-01*G69_2_34_0 + 1.666666666666664e-01*G69_2_34_1 + 1.666666666666665e-01*G69_2_34_2 + 1.666666666666664e-01*G71_0_35_0 + 1.666666666666664e-01*G71_0_35_1 + 1.666666666666664e-01*G71_0_35_2 + 1.666666666666664e-01*G71_1_35_0 + 1.666666666666664e-01*G71_1_35_1 + 1.666666666666664e-01*G71_1_35_2 + 1.666666666666664e-01*G71_2_35_0 + 1.666666666666664e-01*G71_2_35_1 + 1.666666666666665e-01*G71_2_35_2 + 1.666666666666664e-01*G74_0_14_0 + 1.666666666666664e-01*G74_0_14_1 + 1.666666666666664e-01*G74_0_14_2 + 1.666666666666664e-01*G74_1_14_0 + 1.666666666666664e-01*G74_1_14_1 + 1.666666666666664e-01*G74_1_14_2 + 1.666666666666664e-01*G74_2_14_0 + 1.666666666666664e-01*G74_2_14_1 + 1.666666666666665e-01*G74_2_14_2 + 1.666666666666664e-01*G78_0_16_0 + 1.666666666666664e-01*G78_0_16_1 + 1.666666666666664e-01*G78_0_16_2 + 1.666666666666664e-01*G78_1_16_0 + 1.666666666666664e-01*G78_1_16_1 + 1.666666666666664e-01*G78_1_16_2 + 1.666666666666664e-01*G78_2_16_0 + 1.666666666666664e-01*G78_2_16_1 + 1.666666666666665e-01*G78_2_16_2 + 1.666666666666664e-01*G80_0_17_0 + 1.666666666666664e-01*G80_0_17_1 + 1.666666666666664e-01*G80_0_17_2 + 1.666666666666664e-01*G80_1_17_0 + 1.666666666666664e-01*G80_1_17_1 + 1.666666666666664e-01*G80_1_17_2 + 1.666666666666664e-01*G80_2_17_0 + 1.666666666666664e-01*G80_2_17_1 + 1.666666666666665e-01*G80_2_17_2;
  block[105] = -1.666666666666664e-01*G56_0_26_0 - 1.666666666666664e-01*G56_1_26_0 - 1.666666666666664e-01*G56_2_26_0 - 1.666666666666664e-01*G60_0_28_0 - 1.666666666666664e-01*G60_1_28_0 - 1.666666666666664e-01*G60_2_28_0 - 1.666666666666664e-01*G62_0_29_0 - 1.666666666666664e-01*G62_1_29_0 - 1.666666666666664e-01*G62_2_29_0 - 1.666666666666664e-01*G65_0_32_0 - 1.666666666666664e-01*G65_1_32_0 - 1.666666666666664e-01*G65_2_32_0 - 1.666666666666664e-01*G69_0_34_0 - 1.666666666666664e-01*G69_1_34_0 - 1.666666666666664e-01*G69_2_34_0 - 1.666666666666664e-01*G71_0_35_0 - 1.666666666666664e-01*G71_1_35_0 - 1.666666666666664e-01*G71_2_35_0 - 1.666666666666664e-01*G74_0_14_0 - 1.666666666666664e-01*G74_1_14_0 - 1.666666666666664e-01*G74_2_14_0 - 1.666666666666664e-01*G78_0_16_0 - 1.666666666666664e-01*G78_1_16_0 - 1.666666666666664e-01*G78_2_16_0 - 1.666666666666664e-01*G80_0_17_0 - 1.666666666666664e-01*G80_1_17_0 - 1.666666666666664e-01*G80_2_17_0;
  block[106] = -1.666666666666664e-01*G56_0_26_1 - 1.666666666666664e-01*G56_1_26_1 - 1.666666666666665e-01*G56_2_26_1 - 1.666666666666664e-01*G60_0_28_1 - 1.666666666666664e-01*G60_1_28_1 - 1.666666666666665e-01*G60_2_28_1 - 1.666666666666664e-01*G62_0_29_1 - 1.666666666666664e-01*G62_1_29_1 - 1.666666666666665e-01*G62_2_29_1 - 1.666666666666664e-01*G65_0_32_1 - 1.666666666666664e-01*G65_1_32_1 - 1.666666666666665e-01*G65_2_32_1 - 1.666666666666664e-01*G69_0_34_1 - 1.666666666666664e-01*G69_1_34_1 - 1.666666666666665e-01*G69_2_34_1 - 1.666666666666664e-01*G71_0_35_1 - 1.666666666666664e-01*G71_1_35_1 - 1.666666666666665e-01*G71_2_35_1 - 1.666666666666664e-01*G74_0_14_1 - 1.666666666666664e-01*G74_1_14_1 - 1.666666666666665e-01*G74_2_14_1 - 1.666666666666664e-01*G78_0_16_1 - 1.666666666666664e-01*G78_1_16_1 - 1.666666666666665e-01*G78_2_16_1 - 1.666666666666664e-01*G80_0_17_1 - 1.666666666666664e-01*G80_1_17_1 - 1.666666666666665e-01*G80_2_17_1;
  block[107] = -1.666666666666664e-01*G56_0_26_2 - 1.666666666666664e-01*G56_1_26_2 - 1.666666666666665e-01*G56_2_26_2 - 1.666666666666664e-01*G60_0_28_2 - 1.666666666666664e-01*G60_1_28_2 - 1.666666666666665e-01*G60_2_28_2 - 1.666666666666664e-01*G62_0_29_2 - 1.666666666666664e-01*G62_1_29_2 - 1.666666666666665e-01*G62_2_29_2 - 1.666666666666664e-01*G65_0_32_2 - 1.666666666666664e-01*G65_1_32_2 - 1.666666666666665e-01*G65_2_32_2 - 1.666666666666664e-01*G69_0_34_2 - 1.666666666666664e-01*G69_1_34_2 - 1.666666666666665e-01*G69_2_34_2 - 1.666666666666664e-01*G71_0_35_2 - 1.666666666666664e-01*G71_1_35_2 - 1.666666666666665e-01*G71_2_35_2 - 1.666666666666664e-01*G74_0_14_2 - 1.666666666666664e-01*G74_1_14_2 - 1.666666666666665e-01*G74_2_14_2 - 1.666666666666664e-01*G78_0_16_2 - 1.666666666666664e-01*G78_1_16_2 - 1.666666666666665e-01*G78_2_16_2 - 1.666666666666664e-01*G80_0_17_2 - 1.666666666666664e-01*G80_1_17_2 - 1.666666666666665e-01*G80_2_17_2;
  block[108] = -1.666666666666664e-01*G54_0_24_0 - 1.666666666666664e-01*G54_0_24_1 - 1.666666666666664e-01*G54_0_24_2 - 1.666666666666664e-01*G57_0_27_0 - 1.666666666666664e-01*G57_0_27_1 - 1.666666666666664e-01*G57_0_27_2 - 1.666666666666664e-01*G59_0_28_0 - 1.666666666666664e-01*G59_0_28_1 - 1.666666666666664e-01*G59_0_28_2 - 1.666666666666664e-01*G63_0_30_0 - 1.666666666666664e-01*G63_0_30_1 - 1.666666666666664e-01*G63_0_30_2 - 1.666666666666664e-01*G66_0_33_0 - 1.666666666666664e-01*G66_0_33_1 - 1.666666666666664e-01*G66_0_33_2 - 1.666666666666664e-01*G68_0_34_0 - 1.666666666666664e-01*G68_0_34_1 - 1.666666666666664e-01*G68_0_34_2 - 1.666666666666664e-01*G72_0_12_0 - 1.666666666666664e-01*G72_0_12_1 - 1.666666666666664e-01*G72_0_12_2 - 1.666666666666664e-01*G75_0_15_0 - 1.666666666666664e-01*G75_0_15_1 - 1.666666666666664e-01*G75_0_15_2 - 1.666666666666664e-01*G77_0_16_0 - 1.666666666666664e-01*G77_0_16_1 - 1.666666666666664e-01*G77_0_16_2;
  block[109] = 1.666666666666664e-01*G54_0_24_0 + 1.666666666666664e-01*G57_0_27_0 + 1.666666666666664e-01*G59_0_28_0 + 1.666666666666664e-01*G63_0_30_0 + 1.666666666666664e-01*G66_0_33_0 + 1.666666666666664e-01*G68_0_34_0 + 1.666666666666664e-01*G72_0_12_0 + 1.666666666666664e-01*G75_0_15_0 + 1.666666666666664e-01*G77_0_16_0;
  block[110] = 1.666666666666664e-01*G54_0_24_1 + 1.666666666666664e-01*G57_0_27_1 + 1.666666666666664e-01*G59_0_28_1 + 1.666666666666664e-01*G63_0_30_1 + 1.666666666666664e-01*G66_0_33_1 + 1.666666666666664e-01*G68_0_34_1 + 1.666666666666664e-01*G72_0_12_1 + 1.666666666666664e-01*G75_0_15_1 + 1.666666666666664e-01*G77_0_16_1;
  block[111] = 1.666666666666664e-01*G54_0_24_2 + 1.666666666666664e-01*G57_0_27_2 + 1.666666666666664e-01*G59_0_28_2 + 1.666666666666664e-01*G63_0_30_2 + 1.666666666666664e-01*G66_0_33_2 + 1.666666666666664e-01*G68_0_34_2 + 1.666666666666664e-01*G72_0_12_2 + 1.666666666666664e-01*G75_0_15_2 + 1.666666666666664e-01*G77_0_16_2;
  block[112] = -1.666666666666664e-01*G55_0_25_0 - 1.666666666666664e-01*G55_0_25_1 - 1.666666666666664e-01*G55_0_25_2 - 1.666666666666664e-01*G58_0_27_0 - 1.666666666666664e-01*G58_0_27_1 - 1.666666666666664e-01*G58_0_27_2 - 1.666666666666664e-01*G61_0_29_0 - 1.666666666666664e-01*G61_0_29_1 - 1.666666666666664e-01*G61_0_29_2 - 1.666666666666664e-01*G64_0_31_0 - 1.666666666666664e-01*G64_0_31_1 - 1.666666666666664e-01*G64_0_31_2 - 1.666666666666664e-01*G67_0_33_0 - 1.666666666666664e-01*G67_0_33_1 - 1.666666666666664e-01*G67_0_33_2 - 1.666666666666664e-01*G70_0_35_0 - 1.666666666666664e-01*G70_0_35_1 - 1.666666666666664e-01*G70_0_35_2 - 1.666666666666664e-01*G73_0_13_0 - 1.666666666666664e-01*G73_0_13_1 - 1.666666666666664e-01*G73_0_13_2 - 1.666666666666664e-01*G76_0_15_0 - 1.666666666666664e-01*G76_0_15_1 - 1.666666666666664e-01*G76_0_15_2 - 1.666666666666664e-01*G79_0_17_0 - 1.666666666666664e-01*G79_0_17_1 - 1.666666666666664e-01*G79_0_17_2;
  block[113] = 1.666666666666664e-01*G55_0_25_0 + 1.666666666666664e-01*G58_0_27_0 + 1.666666666666664e-01*G61_0_29_0 + 1.666666666666664e-01*G64_0_31_0 + 1.666666666666664e-01*G67_0_33_0 + 1.666666666666664e-01*G70_0_35_0 + 1.666666666666664e-01*G73_0_13_0 + 1.666666666666664e-01*G76_0_15_0 + 1.666666666666664e-01*G79_0_17_0;
  block[114] = 1.666666666666664e-01*G55_0_25_1 + 1.666666666666664e-01*G58_0_27_1 + 1.666666666666664e-01*G61_0_29_1 + 1.666666666666664e-01*G64_0_31_1 + 1.666666666666664e-01*G67_0_33_1 + 1.666666666666664e-01*G70_0_35_1 + 1.666666666666664e-01*G73_0_13_1 + 1.666666666666664e-01*G76_0_15_1 + 1.666666666666664e-01*G79_0_17_1;
  block[115] = 1.666666666666664e-01*G55_0_25_2 + 1.666666666666664e-01*G58_0_27_2 + 1.666666666666664e-01*G61_0_29_2 + 1.666666666666664e-01*G64_0_31_2 + 1.666666666666664e-01*G67_0_33_2 + 1.666666666666664e-01*G70_0_35_2 + 1.666666666666664e-01*G73_0_13_2 + 1.666666666666664e-01*G76_0_15_2 + 1.666666666666664e-01*G79_0_17_2;
  block[116] = -1.666666666666664e-01*G56_0_26_0 - 1.666666666666664e-01*G56_0_26_1 - 1.666666666666664e-01*G56_0_26_2 - 1.666666666666664e-01*G60_0_28_0 - 1.666666666666664e-01*G60_0_28_1 - 1.666666666666664e-01*G60_0_28_2 - 1.666666666666664e-01*G62_0_29_0 - 1.666666666666664e-01*G62_0_29_1 - 1.666666666666664e-01*G62_0_29_2 - 1.666666666666664e-01*G65_0_32_0 - 1.666666666666664e-01*G65_0_32_1 - 1.666666666666664e-01*G65_0_32_2 - 1.666666666666664e-01*G69_0_34_0 - 1.666666666666664e-01*G69_0_34_1 - 1.666666666666664e-01*G69_0_34_2 - 1.666666666666664e-01*G71_0_35_0 - 1.666666666666664e-01*G71_0_35_1 - 1.666666666666664e-01*G71_0_35_2 - 1.666666666666664e-01*G74_0_14_0 - 1.666666666666664e-01*G74_0_14_1 - 1.666666666666664e-01*G74_0_14_2 - 1.666666666666664e-01*G78_0_16_0 - 1.666666666666664e-01*G78_0_16_1 - 1.666666666666664e-01*G78_0_16_2 - 1.666666666666664e-01*G80_0_17_0 - 1.666666666666664e-01*G80_0_17_1 - 1.666666666666664e-01*G80_0_17_2;
  block[117] = 1.666666666666664e-01*G56_0_26_0 + 1.666666666666664e-01*G60_0_28_0 + 1.666666666666664e-01*G62_0_29_0 + 1.666666666666664e-01*G65_0_32_0 + 1.666666666666664e-01*G69_0_34_0 + 1.666666666666664e-01*G71_0_35_0 + 1.666666666666664e-01*G74_0_14_0 + 1.666666666666664e-01*G78_0_16_0 + 1.666666666666664e-01*G80_0_17_0;
  block[118] = 1.666666666666664e-01*G56_0_26_1 + 1.666666666666664e-01*G60_0_28_1 + 1.666666666666664e-01*G62_0_29_1 + 1.666666666666664e-01*G65_0_32_1 + 1.666666666666664e-01*G69_0_34_1 + 1.666666666666664e-01*G71_0_35_1 + 1.666666666666664e-01*G74_0_14_1 + 1.666666666666664e-01*G78_0_16_1 + 1.666666666666664e-01*G80_0_17_1;
  block[119] = 1.666666666666664e-01*G56_0_26_2 + 1.666666666666664e-01*G60_0_28_2 + 1.666666666666664e-01*G62_0_29_2 + 1.666666666666664e-01*G65_0_32_2 + 1.666666666666664e-01*G69_0_34_2 + 1.666666666666664e-01*G71_0_35_2 + 1.666666666666664e-01*G74_0_14_2 + 1.666666666666664e-01*G78_0_16_2 + 1.666666666666664e-01*G80_0_17_2;
  block[120] = -1.666666666666664e-01*G54_1_24_0 - 1.666666666666664e-01*G54_1_24_1 - 1.666666666666664e-01*G54_1_24_2 - 1.666666666666664e-01*G57_1_27_0 - 1.666666666666664e-01*G57_1_27_1 - 1.666666666666664e-01*G57_1_27_2 - 1.666666666666664e-01*G59_1_28_0 - 1.666666666666664e-01*G59_1_28_1 - 1.666666666666664e-01*G59_1_28_2 - 1.666666666666664e-01*G63_1_30_0 - 1.666666666666664e-01*G63_1_30_1 - 1.666666666666664e-01*G63_1_30_2 - 1.666666666666664e-01*G66_1_33_0 - 1.666666666666664e-01*G66_1_33_1 - 1.666666666666664e-01*G66_1_33_2 - 1.666666666666664e-01*G68_1_34_0 - 1.666666666666664e-01*G68_1_34_1 - 1.666666666666664e-01*G68_1_34_2 - 1.666666666666664e-01*G72_1_12_0 - 1.666666666666664e-01*G72_1_12_1 - 1.666666666666664e-01*G72_1_12_2 - 1.666666666666664e-01*G75_1_15_0 - 1.666666666666664e-01*G75_1_15_1 - 1.666666666666664e-01*G75_1_15_2 - 1.666666666666664e-01*G77_1_16_0 - 1.666666666666664e-01*G77_1_16_1 - 1.666666666666664e-01*G77_1_16_2;
  block[121] = 1.666666666666664e-01*G54_1_24_0 + 1.666666666666664e-01*G57_1_27_0 + 1.666666666666664e-01*G59_1_28_0 + 1.666666666666664e-01*G63_1_30_0 + 1.666666666666664e-01*G66_1_33_0 + 1.666666666666664e-01*G68_1_34_0 + 1.666666666666664e-01*G72_1_12_0 + 1.666666666666664e-01*G75_1_15_0 + 1.666666666666664e-01*G77_1_16_0;
  block[122] = 1.666666666666665e-01*G54_1_24_1 + 1.666666666666665e-01*G57_1_27_1 + 1.666666666666665e-01*G59_1_28_1 + 1.666666666666665e-01*G63_1_30_1 + 1.666666666666665e-01*G66_1_33_1 + 1.666666666666665e-01*G68_1_34_1 + 1.666666666666665e-01*G72_1_12_1 + 1.666666666666665e-01*G75_1_15_1 + 1.666666666666665e-01*G77_1_16_1;
  block[123] = 1.666666666666665e-01*G54_1_24_2 + 1.666666666666665e-01*G57_1_27_2 + 1.666666666666665e-01*G59_1_28_2 + 1.666666666666665e-01*G63_1_30_2 + 1.666666666666665e-01*G66_1_33_2 + 1.666666666666665e-01*G68_1_34_2 + 1.666666666666665e-01*G72_1_12_2 + 1.666666666666665e-01*G75_1_15_2 + 1.666666666666665e-01*G77_1_16_2;
  block[124] = -1.666666666666664e-01*G55_1_25_0 - 1.666666666666664e-01*G55_1_25_1 - 1.666666666666665e-01*G55_1_25_2 - 1.666666666666664e-01*G58_1_27_0 - 1.666666666666664e-01*G58_1_27_1 - 1.666666666666665e-01*G58_1_27_2 - 1.666666666666664e-01*G61_1_29_0 - 1.666666666666664e-01*G61_1_29_1 - 1.666666666666665e-01*G61_1_29_2 - 1.666666666666664e-01*G64_1_31_0 - 1.666666666666664e-01*G64_1_31_1 - 1.666666666666665e-01*G64_1_31_2 - 1.666666666666664e-01*G67_1_33_0 - 1.666666666666664e-01*G67_1_33_1 - 1.666666666666665e-01*G67_1_33_2 - 1.666666666666664e-01*G70_1_35_0 - 1.666666666666664e-01*G70_1_35_1 - 1.666666666666665e-01*G70_1_35_2 - 1.666666666666664e-01*G73_1_13_0 - 1.666666666666664e-01*G73_1_13_1 - 1.666666666666665e-01*G73_1_13_2 - 1.666666666666664e-01*G76_1_15_0 - 1.666666666666664e-01*G76_1_15_1 - 1.666666666666665e-01*G76_1_15_2 - 1.666666666666664e-01*G79_1_17_0 - 1.666666666666664e-01*G79_1_17_1 - 1.666666666666665e-01*G79_1_17_2;
  block[125] = 1.666666666666664e-01*G55_1_25_0 + 1.666666666666664e-01*G58_1_27_0 + 1.666666666666664e-01*G61_1_29_0 + 1.666666666666664e-01*G64_1_31_0 + 1.666666666666664e-01*G67_1_33_0 + 1.666666666666664e-01*G70_1_35_0 + 1.666666666666664e-01*G73_1_13_0 + 1.666666666666664e-01*G76_1_15_0 + 1.666666666666664e-01*G79_1_17_0;
  block[126] = 1.666666666666665e-01*G55_1_25_1 + 1.666666666666665e-01*G58_1_27_1 + 1.666666666666665e-01*G61_1_29_1 + 1.666666666666665e-01*G64_1_31_1 + 1.666666666666665e-01*G67_1_33_1 + 1.666666666666665e-01*G70_1_35_1 + 1.666666666666665e-01*G73_1_13_1 + 1.666666666666665e-01*G76_1_15_1 + 1.666666666666665e-01*G79_1_17_1;
  block[127] = 1.666666666666665e-01*G55_1_25_2 + 1.666666666666665e-01*G58_1_27_2 + 1.666666666666665e-01*G61_1_29_2 + 1.666666666666665e-01*G64_1_31_2 + 1.666666666666665e-01*G67_1_33_2 + 1.666666666666665e-01*G70_1_35_2 + 1.666666666666665e-01*G73_1_13_2 + 1.666666666666665e-01*G76_1_15_2 + 1.666666666666665e-01*G79_1_17_2;
  block[128] = -1.666666666666664e-01*G56_1_26_0 - 1.666666666666664e-01*G56_1_26_1 - 1.666666666666665e-01*G56_1_26_2 - 1.666666666666664e-01*G60_1_28_0 - 1.666666666666664e-01*G60_1_28_1 - 1.666666666666665e-01*G60_1_28_2 - 1.666666666666664e-01*G62_1_29_0 - 1.666666666666664e-01*G62_1_29_1 - 1.666666666666665e-01*G62_1_29_2 - 1.666666666666664e-01*G65_1_32_0 - 1.666666666666664e-01*G65_1_32_1 - 1.666666666666665e-01*G65_1_32_2 - 1.666666666666664e-01*G69_1_34_0 - 1.666666666666664e-01*G69_1_34_1 - 1.666666666666665e-01*G69_1_34_2 - 1.666666666666664e-01*G71_1_35_0 - 1.666666666666664e-01*G71_1_35_1 - 1.666666666666665e-01*G71_1_35_2 - 1.666666666666664e-01*G74_1_14_0 - 1.666666666666664e-01*G74_1_14_1 - 1.666666666666665e-01*G74_1_14_2 - 1.666666666666664e-01*G78_1_16_0 - 1.666666666666664e-01*G78_1_16_1 - 1.666666666666665e-01*G78_1_16_2 - 1.666666666666664e-01*G80_1_17_0 - 1.666666666666664e-01*G80_1_17_1 - 1.666666666666665e-01*G80_1_17_2;
  block[129] = 1.666666666666664e-01*G56_1_26_0 + 1.666666666666664e-01*G60_1_28_0 + 1.666666666666664e-01*G62_1_29_0 + 1.666666666666664e-01*G65_1_32_0 + 1.666666666666664e-01*G69_1_34_0 + 1.666666666666664e-01*G71_1_35_0 + 1.666666666666664e-01*G74_1_14_0 + 1.666666666666664e-01*G78_1_16_0 + 1.666666666666664e-01*G80_1_17_0;
  block[130] = 1.666666666666665e-01*G56_1_26_1 + 1.666666666666665e-01*G60_1_28_1 + 1.666666666666665e-01*G62_1_29_1 + 1.666666666666665e-01*G65_1_32_1 + 1.666666666666665e-01*G69_1_34_1 + 1.666666666666665e-01*G71_1_35_1 + 1.666666666666665e-01*G74_1_14_1 + 1.666666666666665e-01*G78_1_16_1 + 1.666666666666665e-01*G80_1_17_1;
  block[131] = 1.666666666666665e-01*G56_1_26_2 + 1.666666666666665e-01*G60_1_28_2 + 1.666666666666665e-01*G62_1_29_2 + 1.666666666666665e-01*G65_1_32_2 + 1.666666666666665e-01*G69_1_34_2 + 1.666666666666665e-01*G71_1_35_2 + 1.666666666666665e-01*G74_1_14_2 + 1.666666666666665e-01*G78_1_16_2 + 1.666666666666665e-01*G80_1_17_2;
  block[132] = -1.666666666666664e-01*G54_2_24_0 - 1.666666666666664e-01*G54_2_24_1 - 1.666666666666664e-01*G54_2_24_2 - 1.666666666666664e-01*G57_2_27_0 - 1.666666666666664e-01*G57_2_27_1 - 1.666666666666664e-01*G57_2_27_2 - 1.666666666666664e-01*G59_2_28_0 - 1.666666666666664e-01*G59_2_28_1 - 1.666666666666664e-01*G59_2_28_2 - 1.666666666666664e-01*G63_2_30_0 - 1.666666666666664e-01*G63_2_30_1 - 1.666666666666664e-01*G63_2_30_2 - 1.666666666666664e-01*G66_2_33_0 - 1.666666666666664e-01*G66_2_33_1 - 1.666666666666664e-01*G66_2_33_2 - 1.666666666666664e-01*G68_2_34_0 - 1.666666666666664e-01*G68_2_34_1 - 1.666666666666664e-01*G68_2_34_2 - 1.666666666666664e-01*G72_2_12_0 - 1.666666666666664e-01*G72_2_12_1 - 1.666666666666664e-01*G72_2_12_2 - 1.666666666666664e-01*G75_2_15_0 - 1.666666666666664e-01*G75_2_15_1 - 1.666666666666664e-01*G75_2_15_2 - 1.666666666666664e-01*G77_2_16_0 - 1.666666666666664e-01*G77_2_16_1 - 1.666666666666664e-01*G77_2_16_2;
  block[133] = 1.666666666666664e-01*G54_2_24_0 + 1.666666666666664e-01*G57_2_27_0 + 1.666666666666664e-01*G59_2_28_0 + 1.666666666666664e-01*G63_2_30_0 + 1.666666666666664e-01*G66_2_33_0 + 1.666666666666664e-01*G68_2_34_0 + 1.666666666666664e-01*G72_2_12_0 + 1.666666666666664e-01*G75_2_15_0 + 1.666666666666664e-01*G77_2_16_0;
  block[134] = 1.666666666666665e-01*G54_2_24_1 + 1.666666666666665e-01*G57_2_27_1 + 1.666666666666665e-01*G59_2_28_1 + 1.666666666666665e-01*G63_2_30_1 + 1.666666666666665e-01*G66_2_33_1 + 1.666666666666665e-01*G68_2_34_1 + 1.666666666666665e-01*G72_2_12_1 + 1.666666666666665e-01*G75_2_15_1 + 1.666666666666665e-01*G77_2_16_1;
  block[135] = 1.666666666666665e-01*G54_2_24_2 + 1.666666666666665e-01*G57_2_27_2 + 1.666666666666665e-01*G59_2_28_2 + 1.666666666666665e-01*G63_2_30_2 + 1.666666666666665e-01*G66_2_33_2 + 1.666666666666665e-01*G68_2_34_2 + 1.666666666666665e-01*G72_2_12_2 + 1.666666666666665e-01*G75_2_15_2 + 1.666666666666665e-01*G77_2_16_2;
  block[136] = -1.666666666666664e-01*G55_2_25_0 - 1.666666666666664e-01*G55_2_25_1 - 1.666666666666665e-01*G55_2_25_2 - 1.666666666666664e-01*G58_2_27_0 - 1.666666666666664e-01*G58_2_27_1 - 1.666666666666665e-01*G58_2_27_2 - 1.666666666666664e-01*G61_2_29_0 - 1.666666666666664e-01*G61_2_29_1 - 1.666666666666665e-01*G61_2_29_2 - 1.666666666666664e-01*G64_2_31_0 - 1.666666666666664e-01*G64_2_31_1 - 1.666666666666665e-01*G64_2_31_2 - 1.666666666666664e-01*G67_2_33_0 - 1.666666666666664e-01*G67_2_33_1 - 1.666666666666665e-01*G67_2_33_2 - 1.666666666666664e-01*G70_2_35_0 - 1.666666666666664e-01*G70_2_35_1 - 1.666666666666665e-01*G70_2_35_2 - 1.666666666666664e-01*G73_2_13_0 - 1.666666666666664e-01*G73_2_13_1 - 1.666666666666665e-01*G73_2_13_2 - 1.666666666666664e-01*G76_2_15_0 - 1.666666666666664e-01*G76_2_15_1 - 1.666666666666665e-01*G76_2_15_2 - 1.666666666666664e-01*G79_2_17_0 - 1.666666666666664e-01*G79_2_17_1 - 1.666666666666665e-01*G79_2_17_2;
  block[137] = 1.666666666666664e-01*G55_2_25_0 + 1.666666666666664e-01*G58_2_27_0 + 1.666666666666664e-01*G61_2_29_0 + 1.666666666666664e-01*G64_2_31_0 + 1.666666666666664e-01*G67_2_33_0 + 1.666666666666664e-01*G70_2_35_0 + 1.666666666666664e-01*G73_2_13_0 + 1.666666666666664e-01*G76_2_15_0 + 1.666666666666664e-01*G79_2_17_0;
  block[138] = 1.666666666666665e-01*G55_2_25_1 + 1.666666666666665e-01*G58_2_27_1 + 1.666666666666665e-01*G61_2_29_1 + 1.666666666666665e-01*G64_2_31_1 + 1.666666666666665e-01*G67_2_33_1 + 1.666666666666665e-01*G70_2_35_1 + 1.666666666666665e-01*G73_2_13_1 + 1.666666666666665e-01*G76_2_15_1 + 1.666666666666665e-01*G79_2_17_1;
  block[139] = 1.666666666666665e-01*G55_2_25_2 + 1.666666666666665e-01*G58_2_27_2 + 1.666666666666665e-01*G61_2_29_2 + 1.666666666666665e-01*G64_2_31_2 + 1.666666666666665e-01*G67_2_33_2 + 1.666666666666665e-01*G70_2_35_2 + 1.666666666666665e-01*G73_2_13_2 + 1.666666666666665e-01*G76_2_15_2 + 1.666666666666665e-01*G79_2_17_2;
  block[140] = -1.666666666666664e-01*G56_2_26_0 - 1.666666666666664e-01*G56_2_26_1 - 1.666666666666665e-01*G56_2_26_2 - 1.666666666666664e-01*G60_2_28_0 - 1.666666666666664e-01*G60_2_28_1 - 1.666666666666665e-01*G60_2_28_2 - 1.666666666666664e-01*G62_2_29_0 - 1.666666666666664e-01*G62_2_29_1 - 1.666666666666665e-01*G62_2_29_2 - 1.666666666666664e-01*G65_2_32_0 - 1.666666666666664e-01*G65_2_32_1 - 1.666666666666665e-01*G65_2_32_2 - 1.666666666666664e-01*G69_2_34_0 - 1.666666666666664e-01*G69_2_34_1 - 1.666666666666665e-01*G69_2_34_2 - 1.666666666666664e-01*G71_2_35_0 - 1.666666666666664e-01*G71_2_35_1 - 1.666666666666665e-01*G71_2_35_2 - 1.666666666666664e-01*G74_2_14_0 - 1.666666666666664e-01*G74_2_14_1 - 1.666666666666665e-01*G74_2_14_2 - 1.666666666666664e-01*G78_2_16_0 - 1.666666666666664e-01*G78_2_16_1 - 1.666666666666665e-01*G78_2_16_2 - 1.666666666666664e-01*G80_2_17_0 - 1.666666666666664e-01*G80_2_17_1 - 1.666666666666665e-01*G80_2_17_2;
  block[141] = 1.666666666666664e-01*G56_2_26_0 + 1.666666666666664e-01*G60_2_28_0 + 1.666666666666664e-01*G62_2_29_0 + 1.666666666666664e-01*G65_2_32_0 + 1.666666666666664e-01*G69_2_34_0 + 1.666666666666664e-01*G71_2_35_0 + 1.666666666666664e-01*G74_2_14_0 + 1.666666666666664e-01*G78_2_16_0 + 1.666666666666664e-01*G80_2_17_0;
  block[142] = 1.666666666666665e-01*G56_2_26_1 + 1.666666666666665e-01*G60_2_28_1 + 1.666666666666665e-01*G62_2_29_1 + 1.666666666666665e-01*G65_2_32_1 + 1.666666666666665e-01*G69_2_34_1 + 1.666666666666665e-01*G71_2_35_1 + 1.666666666666665e-01*G74_2_14_1 + 1.666666666666665e-01*G78_2_16_1 + 1.666666666666665e-01*G80_2_17_1;
  block[143] = 1.666666666666665e-01*G56_2_26_2 + 1.666666666666665e-01*G60_2_28_2 + 1.666666666666665e-01*G62_2_29_2 + 1.666666666666665e-01*G65_2_32_2 + 1.666666666666665e-01*G69_2_34_2 + 1.666666666666665e-01*G71_2_35_2 + 1.666666666666665e-01*G74_2_14_2 + 1.666666666666665e-01*G78_2_16_2 + 1.666666666666665e-01*G80_2_17_2;
}

// No contribution from the boundary
bool BilinearForm::boundary_contribution() const { return false; }

void BilinearForm::eval(real block[], const AffineMap& map, unsigned int facet) const {}

/// This class contains the form to be evaluated, including
/// contributions from the interior and boundary of the domain.

class LinearForm : public dolfin::LinearForm
{
public:

  class TestElement;

  class FunctionElement_0;

  class FunctionElement_1;

  LinearForm(Function& w0, Function& w1);
  

  bool interior_contribution() const;

  void eval(real block[], const AffineMap& map) const;

  bool boundary_contribution() const;

  void eval(real block[], const AffineMap& map, unsigned int facet) const;

};

class LinearForm::TestElement : public dolfin::FiniteElement
{
public:

  TestElement() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 3;

    // Element is simple, don't need to initialize subelements
  }

  ~TestElement()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 12;
  }

  inline unsigned int shapedim() const
  {
    return 3;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    nodes[3] = cell.entities(0)[3];
    int offset = mesh.topology().size(0);
    nodes[4] = offset + cell.entities(0)[0];
    nodes[5] = offset + cell.entities(0)[1];
    nodes[6] = offset + cell.entities(0)[2];
    nodes[7] = offset + cell.entities(0)[3];
    offset = offset + mesh.topology().size(0);
    nodes[8] = offset + cell.entities(0)[0];
    nodes[9] = offset + cell.entities(0)[1];
    nodes[10] = offset + cell.entities(0)[2];
    nodes[11] = offset + cell.entities(0)[3];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    points[4] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[6] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[7] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    points[8] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[9] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[10] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[11] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 0;
    components[4] = 1;
    components[5] = 1;
    components[6] = 1;
    components[7] = 1;
    components[8] = 2;
    components[9] = 2;
    components[10] = 2;
    components[11] = 2;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0);
    vertex_nodes[1] = offset + vertex;
    offset = offset + mesh.topology().size(0);
    vertex_nodes[2] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Vector Lagrange", "tetrahedron", 1, 3);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class LinearForm::FunctionElement_0 : public dolfin::FiniteElement
{
public:

  FunctionElement_0() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 3;

    // Element is simple, don't need to initialize subelements
  }

  ~FunctionElement_0()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 12;
  }

  inline unsigned int shapedim() const
  {
    return 3;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    nodes[3] = cell.entities(0)[3];
    int offset = mesh.topology().size(0);
    nodes[4] = offset + cell.entities(0)[0];
    nodes[5] = offset + cell.entities(0)[1];
    nodes[6] = offset + cell.entities(0)[2];
    nodes[7] = offset + cell.entities(0)[3];
    offset = offset + mesh.topology().size(0);
    nodes[8] = offset + cell.entities(0)[0];
    nodes[9] = offset + cell.entities(0)[1];
    nodes[10] = offset + cell.entities(0)[2];
    nodes[11] = offset + cell.entities(0)[3];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    points[4] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[5] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[6] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[7] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    points[8] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[9] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[10] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[11] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 0;
    components[4] = 1;
    components[5] = 1;
    components[6] = 1;
    components[7] = 1;
    components[8] = 2;
    components[9] = 2;
    components[10] = 2;
    components[11] = 2;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(0);
    vertex_nodes[1] = offset + vertex;
    offset = offset + mesh.topology().size(0);
    vertex_nodes[2] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Vector Lagrange", "tetrahedron", 1, 3);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class LinearForm::FunctionElement_1 : public dolfin::FiniteElement
{
public:

  FunctionElement_1() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 6;

    // Element is simple, don't need to initialize subelements
  }

  ~FunctionElement_1()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 6;
  }

  inline unsigned int shapedim() const
  {
    return 3;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.index();
    int offset = mesh.topology().size(3);
    nodes[1] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[2] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[3] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[4] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[5] = offset + cell.index();
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[1] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[2] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[3] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[4] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[5] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    components[0] = 0;
    components[1] = 1;
    components[2] = 2;
    components[3] = 3;
    components[4] = 4;
    components[5] = 5;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(3);
    vertex_nodes[1] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[2] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[3] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[4] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[5] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Discontinuous vector Lagrange", "tetrahedron", 0, 6);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

LinearForm::LinearForm(Function& w0, Function& w1) : dolfin::LinearForm(2)
{
  // Create finite element for test space
  _test = new TestElement();

  // Add functions
  initFunction(0, w0, new FunctionElement_0());
  initFunction(1, w1, new FunctionElement_1());
}

// Contribution from the interior
bool LinearForm::interior_contribution() const { return true; }

void LinearForm::eval(real block[], const AffineMap& map) const
{
  // Compute coefficients
  const real c0_0 = c[0][0];
  const real c0_1 = c[0][1];
  const real c0_2 = c[0][2];
  const real c0_3 = c[0][3];
  const real c0_4 = c[0][4];
  const real c0_5 = c[0][5];
  const real c0_6 = c[0][6];
  const real c0_7 = c[0][7];
  const real c0_8 = c[0][8];
  const real c0_9 = c[0][9];
  const real c0_10 = c[0][10];
  const real c0_11 = c[0][11];
  const real c1_0 = c[1][0];
  const real c1_1 = c[1][1];
  const real c1_2 = c[1][2];
  const real c1_3 = c[1][3];
  const real c1_4 = c[1][4];
  const real c1_5 = c[1][5];

  // Compute geometry tensors
  const real G0_0 = map.det*c0_0;
  const real G0_1 = map.det*c0_1;
  const real G0_2 = map.det*c0_2;
  const real G0_3 = map.det*c0_3;
  const real G0_4 = map.det*c0_4;
  const real G0_5 = map.det*c0_5;
  const real G0_6 = map.det*c0_6;
  const real G0_7 = map.det*c0_7;
  const real G0_8 = map.det*c0_8;
  const real G0_9 = map.det*c0_9;
  const real G0_10 = map.det*c0_10;
  const real G0_11 = map.det*c0_11;
  const real G1_0_0 = map.det*c1_0*map.g00;
  const real G1_1_0 = map.det*c1_0*map.g10;
  const real G1_2_0 = map.det*c1_0*map.g20;
  const real G2_0_3 = map.det*c1_3*map.g01;
  const real G2_1_3 = map.det*c1_3*map.g11;
  const real G2_2_3 = map.det*c1_3*map.g21;
  const real G3_0_4 = map.det*c1_4*map.g02;
  const real G3_1_4 = map.det*c1_4*map.g12;
  const real G3_2_4 = map.det*c1_4*map.g22;
  const real G4_0_3 = map.det*c1_3*map.g00;
  const real G4_1_3 = map.det*c1_3*map.g10;
  const real G4_2_3 = map.det*c1_3*map.g20;
  const real G5_0_1 = map.det*c1_1*map.g01;
  const real G5_1_1 = map.det*c1_1*map.g11;
  const real G5_2_1 = map.det*c1_1*map.g21;
  const real G6_0_5 = map.det*c1_5*map.g02;
  const real G6_1_5 = map.det*c1_5*map.g12;
  const real G6_2_5 = map.det*c1_5*map.g22;
  const real G7_0_4 = map.det*c1_4*map.g00;
  const real G7_1_4 = map.det*c1_4*map.g10;
  const real G7_2_4 = map.det*c1_4*map.g20;
  const real G8_0_5 = map.det*c1_5*map.g01;
  const real G8_1_5 = map.det*c1_5*map.g11;
  const real G8_2_5 = map.det*c1_5*map.g21;
  const real G9_0_2 = map.det*c1_2*map.g02;
  const real G9_1_2 = map.det*c1_2*map.g12;
  const real G9_2_2 = map.det*c1_2*map.g22;

  // Compute element tensor
  block[0] = 1.666666666666662e-02*G0_0 + 8.333333333333309e-03*G0_1 + 8.333333333333309e-03*G0_2 + 8.333333333333311e-03*G0_3 + 1.666666666666664e-01*G1_0_0 + 1.666666666666664e-01*G1_1_0 + 1.666666666666664e-01*G1_2_0 + 1.666666666666664e-01*G2_0_3 + 1.666666666666664e-01*G2_1_3 + 1.666666666666664e-01*G2_2_3 + 1.666666666666664e-01*G3_0_4 + 1.666666666666664e-01*G3_1_4 + 1.666666666666664e-01*G3_2_4;
  block[1] = 8.333333333333309e-03*G0_0 + 1.666666666666661e-02*G0_1 + 8.333333333333309e-03*G0_2 + 8.333333333333309e-03*G0_3 - 1.666666666666664e-01*G1_0_0 - 1.666666666666664e-01*G2_0_3 - 1.666666666666664e-01*G3_0_4;
  block[2] = 8.333333333333307e-03*G0_0 + 8.333333333333309e-03*G0_1 + 1.666666666666662e-02*G0_2 + 8.333333333333309e-03*G0_3 - 1.666666666666665e-01*G1_1_0 - 1.666666666666665e-01*G2_1_3 - 1.666666666666665e-01*G3_1_4;
  block[3] = 8.333333333333312e-03*G0_0 + 8.333333333333309e-03*G0_1 + 8.333333333333309e-03*G0_2 + 1.666666666666662e-02*G0_3 - 1.666666666666665e-01*G1_2_0 - 1.666666666666665e-01*G2_2_3 - 1.666666666666665e-01*G3_2_4;
  block[4] = 1.666666666666662e-02*G0_4 + 8.333333333333307e-03*G0_5 + 8.333333333333309e-03*G0_6 + 8.333333333333309e-03*G0_7 + 1.666666666666664e-01*G4_0_3 + 1.666666666666664e-01*G4_1_3 + 1.666666666666665e-01*G4_2_3 + 1.666666666666664e-01*G5_0_1 + 1.666666666666664e-01*G5_1_1 + 1.666666666666665e-01*G5_2_1 + 1.666666666666664e-01*G6_0_5 + 1.666666666666664e-01*G6_1_5 + 1.666666666666665e-01*G6_2_5;
  block[5] = 8.333333333333307e-03*G0_4 + 1.666666666666662e-02*G0_5 + 8.333333333333312e-03*G0_6 + 8.333333333333312e-03*G0_7 - 1.666666666666664e-01*G4_0_3 - 1.666666666666664e-01*G5_0_1 - 1.666666666666664e-01*G6_0_5;
  block[6] = 8.333333333333307e-03*G0_4 + 8.333333333333312e-03*G0_5 + 1.666666666666662e-02*G0_6 + 8.333333333333312e-03*G0_7 - 1.666666666666665e-01*G4_1_3 - 1.666666666666665e-01*G5_1_1 - 1.666666666666665e-01*G6_1_5;
  block[7] = 8.333333333333309e-03*G0_4 + 8.333333333333312e-03*G0_5 + 8.333333333333312e-03*G0_6 + 1.666666666666662e-02*G0_7 - 1.666666666666665e-01*G4_2_3 - 1.666666666666665e-01*G5_2_1 - 1.666666666666665e-01*G6_2_5;
  block[8] = 1.666666666666662e-02*G0_8 + 8.333333333333307e-03*G0_9 + 8.333333333333307e-03*G0_10 + 8.333333333333309e-03*G0_11 + 1.666666666666664e-01*G7_0_4 + 1.666666666666664e-01*G7_1_4 + 1.666666666666665e-01*G7_2_4 + 1.666666666666664e-01*G8_0_5 + 1.666666666666664e-01*G8_1_5 + 1.666666666666665e-01*G8_2_5 + 1.666666666666664e-01*G9_0_2 + 1.666666666666664e-01*G9_1_2 + 1.666666666666665e-01*G9_2_2;
  block[9] = 8.333333333333307e-03*G0_8 + 1.666666666666662e-02*G0_9 + 8.333333333333309e-03*G0_10 + 8.333333333333312e-03*G0_11 - 1.666666666666664e-01*G7_0_4 - 1.666666666666664e-01*G8_0_5 - 1.666666666666664e-01*G9_0_2;
  block[10] = 8.333333333333305e-03*G0_8 + 8.333333333333309e-03*G0_9 + 1.666666666666662e-02*G0_10 + 8.333333333333309e-03*G0_11 - 1.666666666666665e-01*G7_1_4 - 1.666666666666665e-01*G8_1_5 - 1.666666666666665e-01*G9_1_2;
  block[11] = 8.333333333333309e-03*G0_8 + 8.333333333333312e-03*G0_9 + 8.333333333333309e-03*G0_10 + 1.666666666666662e-02*G0_11 - 1.666666666666665e-01*G7_2_4 - 1.666666666666665e-01*G8_2_5 - 1.666666666666665e-01*G9_2_2;
}

// No contribution from the boundary
bool LinearForm::boundary_contribution() const { return false; }

void LinearForm::eval(real block[], const AffineMap& map, unsigned int facet) const {}

} }

#endif
