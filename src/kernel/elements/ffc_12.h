// This code conforms with the UFC specification version 1.0
// and was automatically generated by FFC version 0.3.5.

#ifndef __FFC_12_H
#define __FFC_12_H

#include <cmath>
#include <ufc.h>

/// This class defines the interface for a finite element.

class ffc_12_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  ffc_12_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_12_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "Discontinuous Lagrange finite element of degree 3 on a tetrahedron";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 20;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_02 = element_coordinates[3][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
    const double J_12 = element_coordinates[3][1] - element_coordinates[0][1];
    const double J_20 = element_coordinates[1][2] - element_coordinates[0][2];
    const double J_21 = element_coordinates[2][2] - element_coordinates[0][2];
    const double J_22 = element_coordinates[3][2] - element_coordinates[0][2];
      
    // Compute sub determinants
    const double d00 = J_11*J_22 - J_12*J_21;
    const double d01 = J_12*J_20 - J_10*J_22;
    const double d02 = J_10*J_21 - J_11*J_20;
    
    const double d10 = J_02*J_21 - J_01*J_22;
    const double d11 = J_00*J_22 - J_02*J_20;
    const double d12 = J_01*J_20 - J_00*J_21;
    
    const double d20 = J_01*J_12 - J_02*J_11;
    const double d21 = J_02*J_10 - J_00*J_12;
    const double d22 = J_00*J_11 - J_01*J_10;
      
    // Compute determinant of Jacobian
    double detJ = J_00*d00 + J_10*d10 + J_20*d20;
    
    // Compute constants
    const double C0 = element_coordinates[3][0] + element_coordinates[2][0] \
                    + element_coordinates[1][0] - element_coordinates[0][0];
    const double C1 = element_coordinates[3][1] + element_coordinates[2][1] \
                    + element_coordinates[1][1] - element_coordinates[0][1];
    const double C2 = element_coordinates[3][2] + element_coordinates[2][2] \
                    + element_coordinates[1][2] - element_coordinates[0][2];
    
    // Get coordinates and map to the reference (FIAT) element
    double x = coordinates[0];
    double y = coordinates[1];
    double z = coordinates[2];
    
    x = (2.0*d00*x + 2.0*d10*y + 2.0*d20*z - d00*C0 - d10*C1 - d20*C2) / detJ;
    y = (2.0*d01*x + 2.0*d11*y + 2.0*d21*z - d01*C0 - d11*C1 - d21*C2) / detJ;
    z = (2.0*d02*x + 2.0*d12*y + 2.0*d22*z - d02*C0 - d12*C1 - d22*C2) / detJ;
    
    // Map coordinates to the reference cube
    if (std::abs(y + z) < 1e-14)
      x = 1.0;
    else
      x = -2.0 * (1.0 + x)/(y + z) - 1.0;
    if (std::abs(z - 1.0) < 1e-14)
      y = -1.0;
    else
      y = 2.0 * (1.0 + y)/(1.0 - z) - 1.0;
    
    const static unsigned int dof = i;
    
    // Table(s) of coefficients
    const static double coefficients0[20][20] = \
    {{0.02886751345948, 0.01304101327393, 0.00752923252421, 0.005323971375, 0.01829812636778, 0.01417366773785, 0.00818317088385, 0.01157275124716, 0.006681531047811, 0.004724555912615, -0.02834733547569, -0.0239578711875, -0.01855768722395, -0.01071428571429, -0.02074812506897, -0.01607142857143, -0.009278843611976, -0.0131222664792, -0.007576144084142, -0.005357142857143},
    {-4.518876242894e-17, -0.1173691194654, -0.04517539514526, -0.03194382825, -0.01829812636778, 0.04252100321354, 0.04091585441925, 0.03471825374147, 0.03340765523905, 0.02362277956308, 0.08504200642708, 0.0239578711875, -0.006185895741317, -0.01071428571429, 0.02074812506897, -0.005357142857143, -0.009278843611976, -0.004374088826399, -0.007576144084142, -0.005357142857143},
    {7.715402656692e-17, 0.1173691194654, -0.04517539514526, -0.03194382825, -0.01829812636779, -0.04252100321354, 0.04091585441925, -0.03471825374147, 0.03340765523905, 0.02362277956308, -0.08504200642708, 0.0239578711875, 0.006185895741317, -0.01071428571429, 0.02074812506897, 0.005357142857143, -0.009278843611976, 0.004374088826399, -0.007576144084142, -0.005357142857143},
    {0.02886751345948, -0.01304101327393, 0.00752923252421, 0.005323971374999, 0.01829812636779, -0.01417366773785, 0.00818317088385, -0.01157275124716, 0.006681531047811, 0.004724555912615, 0.02834733547569, -0.0239578711875, 0.01855768722395, -0.01071428571429, -0.02074812506897, 0.01607142857143, -0.009278843611976, 0.0131222664792, -0.007576144084142, -0.005357142857143},
    {-2.824273200074e-17, -0.09780759955449, -0.07905694150421, -0.03194382825, 0.05489437910336, -0.01417366773785, -0.02454951265155, 0.04629100498863, 0.01336306209562, 0.02362277956308, 2.275128986352e-18, 0.047915742375, 0.06185895741317, 0.04285714285714, -0.006916041689656, 0.01607142857143, 0.01546473935329, -0.008748177652797, -3.95777085019e-18, -0.005357142857143},
    {0.2598076211353, -1.225641293394e-16, -4.097310381188e-17, -0.143747227125, -0.1097887582067, -5.746996043767e-17, -0.1227475632577, 2.889228530624e-17, -3.079887348353e-18, 0.04252100321354, 7.835786177535e-19, -0.09583148474999, 3.639115087891e-17, 0.04285714285714, 0.01383208337931, 5.457503060128e-18, 0.01546473935329, -5.081774365502e-18, 1.084950549826e-17, -0.005357142857143},
    {1.046612503787e-16, 0.09780759955449, -0.07905694150421, -0.03194382825, 0.05489437910336, 0.01417366773785, -0.02454951265155, -0.04629100498863, 0.01336306209562, 0.02362277956308, -3.058707604105e-18, 0.047915742375, -0.06185895741317, 0.04285714285714, -0.006916041689656, -0.01607142857143, 0.01546473935329, 0.008748177652797, 7.257132501642e-18, -0.005357142857143},
    {-4.006172263299e-17, 0.0195615199109, 0.1242323366495, -0.03194382825, -1.393674423138e-17, -0.05669467095138, 0.02454951265155, 0.01157275124716, -0.04677071733467, 0.02362277956308, -1.021863087349e-18, -1.289553795503e-17, -0.06185895741317, -0.06428571428571, 3.549741741614e-18, 0.02142857142857, 0.009278843611976, -0.004374088826399, 0.007576144084142, -0.005357142857143},
    {1.111478066409e-17, -0.0195615199109, 0.1242323366495, -0.03194382825, -1.537912347895e-17, 0.05669467095138, 0.02454951265155, -0.01157275124716, -0.04677071733467, 0.02362277956308, 1.021863087349e-18, -1.166751809041e-17, 0.06185895741317, -0.06428571428571, -1.0409328449e-18, -0.02142857142857, 0.009278843611976, 0.004374088826399, 0.007576144084142, -0.005357142857143},
    {0.02886751345948, -1.212723283565e-17, -0.01505846504842, 0.005323971374999, 7.279855702048e-18, 1.877173722467e-18, 0.02454951265155, -1.934229615065e-18, -0.01336306209562, 0.004724555912615, 6.126782385402e-34, 6.681233075121e-18, 8.519514711086e-18, 0.04285714285714, -1.294594172861e-18, -3.922692475971e-18, -0.02783653083593, 2.116739086103e-18, 0.01515228816828, -0.005357142857143},
    {-4.715859420098e-17, -0.09780759955449, -0.05646924393158, -0.06388765649999, 0.05489437910336, 0.04252100321354, 0.02454951265155, -0.02314550249431, -0.01336306209562, -0.02362277956308, 4.552619888295e-18, -5.431942796401e-18, -5.359645772994e-18, -2.630797930699e-18, 0.04841229182759, 0.0375, 0.02165063509461, 0.05248906591678, 0.03030457633657, 0.02678571428571},
    {0.2598076211353, -7.65165565854e-17, -0.1355261854358, 0.047915742375, -0.1097887582067, 1.959477613608e-17, 0.02454951265155, -6.175419165908e-17, -0.08017837257373, -0.09921567416492, -5.485050324274e-18, -2.326208721105e-18, -2.438302269938e-18, -2.132261431754e-18, -0.09682458365519, 2.124344027565e-17, 0.02165063509461, 1.301432189212e-17, 0.03030457633657, 0.02678571428571},
    {-1.288704241729e-17, 0.09780759955449, -0.05646924393158, -0.06388765649999, 0.05489437910336, -0.04252100321354, 0.02454951265155, 0.02314550249431, -0.01336306209562, -0.02362277956308, 9.324304359796e-19, 1.022449004855e-17, 4.670759106162e-18, 3.211349511113e-19, 0.04841229182759, -0.0375, 0.02165063509461, -0.05248906591678, 0.03030457633657, 0.02678571428571},
    {0.2598076211353, -0.1173691194654, 0.06776309271789, 0.047915742375, 7.254994153092e-18, -0.08504200642708, -0.07364853795465, -0.06943650748294, 0.04008918628686, -0.09921567416492, 6.441573754824e-18, 3.550795744686e-18, 1.160478921158e-17, 1.290704808819e-17, -5.632235591773e-18, -0.075, -0.06495190528383, 0.02624453295839, -0.01515228816828, 0.02678571428571},
    {0.2598076211353, 0.1173691194654, 0.06776309271789, 0.047915742375, -1.493621847052e-17, 0.08504200642708, -0.07364853795465, 0.06943650748294, 0.04008918628686, -0.09921567416492, -6.441573754824e-18, -8.483472806773e-18, -5.350411338036e-18, -1.45032211828e-18, 4.553797348212e-18, 0.075, -0.06495190528383, -0.02624453295839, -0.01515228816828, 0.02678571428571},
    {5.408332555454e-17, 2.764913340935e-17, 0.1129384878632, -0.06388765649999, -9.634202667367e-21, 1.362417039541e-17, 0.07364853795465, 5.646240919711e-18, 0.02672612419124, -0.02362277956308, -1.790925960944e-34, 2.466338531044e-18, -3.12718893677e-18, -7.014801558573e-18, -2.856378997734e-18, 1.074860168886e-17, 0.06495190528383, -9.654926694772e-18, -0.06060915267313, 0.02678571428571},
    {-9.389466242107e-19, 0.0195615199109, 0.01129384878632, 0.127775313, 4.743500644299e-18, -4.216461247218e-18, 3.057081386927e-19, -0.05786375623578, -0.03340765523905, 0.04724555912615, -1.038020779274e-18, 5.386949989641e-20, 5.108014325937e-19, 5.831592728598e-19, 6.4848485022e-18, 3.276246242507e-19, -1.271770108631e-18, -0.06561133239598, -0.03788072042071, -0.05357142857143},
    {2.84970300448e-17, -0.0195615199109, 0.01129384878632, 0.127775313, -2.268127050835e-18, 1.368993962938e-18, -9.31093810031e-18, 0.05786375623578, -0.03340765523905, 0.04724555912615, 1.038020779274e-18, -5.386949989641e-20, -5.108014325937e-19, 1.79456202893e-19, -4.301774192106e-18, -2.838854724449e-18, -6.353713339367e-18, 0.06561133239598, -0.03788072042071, -0.05357142857143},
    {2.569583928257e-17, -3.958143675112e-18, -0.02258769757263, 0.127775313, 3.853845587344e-18, -3.334725636217e-18, -8.512900497753e-18, 3.660129801822e-18, 0.06681531047811, 0.04724555912615, 5.462281362157e-34, -2.046613735166e-34, 9.925519533834e-34, -7.626154757529e-19, 3.398772338452e-18, -2.940951574688e-18, -7.824055428762e-18, 6.178157181366e-18, 0.07576144084142, -0.05357142857143},
    {0.02886751345948, -3.28230490621e-18, -6.454343248199e-18, -0.015971914125, -4.738280089043e-19, 5.151827433748e-19, -5.454394097546e-18, -5.726231351963e-18, -1.707242370808e-18, 0.02834733547569, 2.651952136169e-35, -5.119626828456e-34, 2.192404630121e-34, 5.101340901778e-34, -4.178770252592e-19, 4.543484729072e-19, -4.810323444882e-18, -2.603575737916e-18, 3.305137170739e-18, 0.05357142857143}};
    
    // Generate scalings
    const double scalings_y_0 = 1.0;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5 * y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5 * y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5 * y);
    const double scalings_z_0 = 1.0;
    const double scalings_z_1 = scalings_z_0*(0.5 - 0.5 * z);
    const double scalings_z_2 = scalings_z_1*(0.5 - 0.5 * z);
    const double scalings_z_3 = scalings_z_2*(0.5 - 0.5 * z);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1.0;
    const double psitilde_a_1 = 1*x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1-0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.666666666667*x*psitilde_a_2-0.6666666666667*psitilde_a_1;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1.0;
    const double psitilde_bs_0_1 = 0.5 + 1.5*y;
    const double psitilde_bs_0_2 = 0.1111111111111*psitilde_bs_0_1 + 1.666666666667*y*psitilde_bs_0_1-0.5555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2-0.7*psitilde_bs_0_1;
    const double psitilde_bs_1_0 = 1.0;
    const double psitilde_bs_1_1 = 1.5 + 2.5*y;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1-0.56*psitilde_bs_1_0;
    const double psitilde_bs_2_0 = 1.0;
    const double psitilde_bs_2_1 = 2.5 + 3.5*y;
    const double psitilde_bs_3_0 = 1.0;
    
    // Compute psitilde_cs
    const double psitilde_cs_00_0 = 1.0;
    const double psitilde_cs_00_1 = 1 + 2*z;
    const double psitilde_cs_00_2 = 0.3125*psitilde_cs_00_1 + 1.875*z*psitilde_cs_00_1-0.5625*psitilde_cs_00_0;
    const double psitilde_cs_00_3 = 0.1555555555556*psitilde_cs_00_2 + 1.866666666667*z*psitilde_cs_00_2-0.7111111111111*psitilde_cs_00_1;
    const double psitilde_cs_01_0 = 1.0;
    const double psitilde_cs_01_1 = 2 + 3*z;
    const double psitilde_cs_01_2 = 0.7777777777778*psitilde_cs_01_1 + 2.333333333333*z*psitilde_cs_01_1-0.5555555555556*psitilde_cs_01_0;
    const double psitilde_cs_02_0 = 1.0;
    const double psitilde_cs_02_1 = 3 + 4*z;
    const double psitilde_cs_03_0 = 1.0;
    const double psitilde_cs_10_0 = 1.0;
    const double psitilde_cs_10_1 = 2 + 3*z;
    const double psitilde_cs_10_2 = 0.7777777777778*psitilde_cs_10_1 + 2.333333333333*z*psitilde_cs_10_1-0.5555555555556*psitilde_cs_10_0;
    const double psitilde_cs_11_0 = 1.0;
    const double psitilde_cs_11_1 = 3 + 4*z;
    const double psitilde_cs_12_0 = 1.0;
    const double psitilde_cs_20_0 = 1.0;
    const double psitilde_cs_20_1 = 3 + 4*z;
    const double psitilde_cs_21_0 = 1.0;
    const double psitilde_cs_30_0 = 1.0;
    
    // Compute basisvalues
    const double basisvalues[20] = \
    {psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_0*0.8660254037844,\
     psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_0*2.738612787526,\
     psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_0*1.581138830084,\
     psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_1*1.11803398875,\
     psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_0*5.12347538298,\
     psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_0*3.968626966597,\
     psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_0*2.291287847478,\
     psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_1*3.240370349204,\
     psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_1*1.870828693387,\
     psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_2*1.322875655532,\
     psitilde_a_3*scalings_y_3*psitilde_bs_3_0*scalings_z_3*psitilde_cs_30_0*7.937253933194,\
     psitilde_a_2*scalings_y_2*psitilde_bs_2_1*scalings_z_3*psitilde_cs_21_0*6.708203932499,\
     psitilde_a_1*scalings_y_1*psitilde_bs_1_2*scalings_z_3*psitilde_cs_12_0*5.196152422707,\
     psitilde_a_0*scalings_y_0*psitilde_bs_0_3*scalings_z_3*psitilde_cs_03_0*3,\
     psitilde_a_2*scalings_y_2*psitilde_bs_2_0*scalings_z_2*psitilde_cs_20_1*5.809475019311,\
     psitilde_a_1*scalings_y_1*psitilde_bs_1_1*scalings_z_2*psitilde_cs_11_1*4.5,\
     psitilde_a_0*scalings_y_0*psitilde_bs_0_2*scalings_z_2*psitilde_cs_02_1*2.598076211353,\
     psitilde_a_1*scalings_y_1*psitilde_bs_1_0*scalings_z_1*psitilde_cs_10_2*3.674234614175,\
     psitilde_a_0*scalings_y_0*psitilde_bs_0_1*scalings_z_1*psitilde_cs_01_2*2.12132034356,\
     psitilde_a_0*scalings_y_0*psitilde_bs_0_0*scalings_z_0*psitilde_cs_00_3*1.5};
    
    // Compute value(s)
    *values = 0.0;
    for (unsigned int j = 0; j < 20; j++)
      *values += coefficients0[dof][j]*basisvalues[j];
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // Not implemented (only for Lagrange elements
    return 0;
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[3];
    vertex_values[2] = dof_values[9];
    vertex_values[3] = dof_values[19];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new ffc_12_finite_element_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_12_dof_map_0: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  ffc_12_dof_map_0() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~ffc_12_dof_map_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for Discontinuous Lagrange finite element of degree 3 on a tetrahedron";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return false;
      break;
    case 1:
      return false;
      break;
    case 2:
      return false;
      break;
    case 3:
      return true;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = 20*m.num_entities[3];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space
  virtual unsigned int local_dimension() const
  {
    return 20;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = 20*c.entity_indices[3][0];
    dofs[1] = 20*c.entity_indices[3][0] + 1;
    dofs[2] = 20*c.entity_indices[3][0] + 2;
    dofs[3] = 20*c.entity_indices[3][0] + 3;
    dofs[4] = 20*c.entity_indices[3][0] + 4;
    dofs[5] = 20*c.entity_indices[3][0] + 5;
    dofs[6] = 20*c.entity_indices[3][0] + 6;
    dofs[7] = 20*c.entity_indices[3][0] + 7;
    dofs[8] = 20*c.entity_indices[3][0] + 8;
    dofs[9] = 20*c.entity_indices[3][0] + 9;
    dofs[10] = 20*c.entity_indices[3][0] + 10;
    dofs[11] = 20*c.entity_indices[3][0] + 11;
    dofs[12] = 20*c.entity_indices[3][0] + 12;
    dofs[13] = 20*c.entity_indices[3][0] + 13;
    dofs[14] = 20*c.entity_indices[3][0] + 14;
    dofs[15] = 20*c.entity_indices[3][0] + 15;
    dofs[16] = 20*c.entity_indices[3][0] + 16;
    dofs[17] = 20*c.entity_indices[3][0] + 17;
    dofs[18] = 20*c.entity_indices[3][0] + 18;
    dofs[19] = 20*c.entity_indices[3][0] + 19;
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   const ufc::mesh& m,
                                   const ufc::cell& c,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      
      break;
    case 1:
      
      break;
    case 2:
      
      break;
    case 3:
      
      break;
    }
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double **coordinates,
                                    const ufc::mesh& m,
                                    const ufc::cell& c) const
  {
    // Not implemented
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    // Not implemented
    return 0;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    // Not implemented
    return 0;
  }

};

#endif
