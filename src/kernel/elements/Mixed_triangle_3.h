// This code conforms with the UFC specification version 1.0
// and was automatically generated by FFC version 0.3.5.

#ifndef __MIXED_TRIANGLE_3_H
#define __MIXED_TRIANGLE_3_H

#include <cmath>
#include <ufc.h>

/// This class defines the interface for a finite element.

class Mixed_triangle_3_finite_element_0_0: public ufc::finite_element
{
public:

  /// Constructor
  Mixed_triangle_3_finite_element_0_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~Mixed_triangle_3_finite_element_0_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "Lagrange finite element of degree 3 on a triangle";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 10;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
      
    // Compute determinant of Jacobian
    const double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute constants
    const double C0 = element_coordinates[1][0] + element_coordinates[2][0];
    const double C1 = element_coordinates[1][1] + element_coordinates[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double x = (J_01*C1 - J_11*C0 + 2.0*J_11*coordinates[0] - 2.0*J_01*coordinates[1]) / detJ;
    double y = (J_10*C0 - J_00*C1 - 2.0*J_10*coordinates[0] + 2.0*J_00*coordinates[1]) / detJ;
    
    // Map coordinates to the reference square
    if (std::abs(y - 1.0) < 1e-14)
      x = -1.0;
    else
      x = 2.0 * (1.0 + x)/(1.0 - y) - 1.0;
    
    const static unsigned int dof = i;
    
    // Table(s) of coefficients
    const static double coefficients0[10][10] = \
    {{0.0471404520791, -0.02886751345948, -0.01666666666667, 0.0782460796436, 0.06060915267313, 0.03499271061119, -0.0601337794303, -0.05082231953842, -0.03936679943759, -0.02272843225242},
    {0.0471404520791, 0.02886751345948, -0.01666666666667, 0.0782460796436, -0.06060915267313, 0.03499271061119, 0.0601337794303, -0.05082231953842, 0.03936679943759, -0.02272843225242},
    {0.0471404520791, -2.251158065353e-17, 0.03333333333333, 1.211843117768e-17, 6.434082499758e-18, 0.1049781318336, -1.840940600869e-33, 1.049486925388e-17, 2.149017023018e-17, 0.0909137290097},
    {0.106066017178, 0.2598076211353, -0.15, 0.1173691194654, 0.06060915267313, -0.07873359887517, -8.19662140348e-19, 0.1016446390768, -0.131222664792, 0.0909137290097},
    {0.106066017178, -1.197156945869e-17, 0.3, 1.044614927946e-17, 0.1515228816828, 0.02624453295839, -1.752974215868e-18, 8.51375538866e-18, 0.131222664792, -0.1363705935145},
    {0.106066017178, 1.197156945869e-17, 0.3, -1.078280545087e-17, -0.1515228816828, 0.02624453295839, 1.752974215868e-18, -8.805308185446e-18, -0.131222664792, -0.1363705935145},
    {0.106066017178, -0.2598076211353, -0.15, 0.1173691194654, -0.06060915267313, -0.07873359887517, -1.634147010078e-17, 0.1016446390768, 0.131222664792, 0.0909137290097},
    {0.106066017178, -0.2598076211353, -0.15, -0.0782460796436, 0.0909137290097, 0.09622995418077, 0.1804013382909, 0.05082231953842, -0.0131222664792, -0.02272843225242},
    {0.106066017178, 0.2598076211353, -0.15, -0.0782460796436, -0.0909137290097, 0.09622995418077, -0.1804013382909, 0.05082231953842, 0.0131222664792, -0.02272843225242},
    {0.6363961030679, -1.170236410171e-17, -8.624828282122e-17, -0.2347382389308, 2.449292486894e-17, -0.2624453295839, 1.716113224113e-17, -0.2032892781537, 3.272253659676e-18, 0.0909137290097}};
    
    // Generate scalings
    const double scalings_y_0 = 1.0;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5 * y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5 * y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5 * y);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1.0;
    const double psitilde_a_1 = 1*x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1-0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.666666666667*x*psitilde_a_2-0.6666666666667*psitilde_a_1;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1.0;
    const double psitilde_bs_0_1 = 0.5 + 1.5*y;
    const double psitilde_bs_0_2 = 0.1111111111111*psitilde_bs_0_1 + 1.666666666667*y*psitilde_bs_0_1-0.5555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2-0.7*psitilde_bs_0_1;
    const double psitilde_bs_1_0 = 1.0;
    const double psitilde_bs_1_1 = 1.5 + 2.5*y;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1-0.56*psitilde_bs_1_0;
    const double psitilde_bs_2_0 = 1.0;
    const double psitilde_bs_2_1 = 2.5 + 3.5*y;
    const double psitilde_bs_3_0 = 1.0;
    
    // Compute basisvalues
    const double basisvalues[10] = \
    {psitilde_a_0*scalings_y_0*psitilde_bs_0_0*0.7071067811865,
    psitilde_a_1*scalings_y_1*psitilde_bs_1_0*1.732050807569,
    psitilde_a_0*scalings_y_0*psitilde_bs_0_1*1,
    psitilde_a_2*scalings_y_2*psitilde_bs_2_0*2.738612787526,
    psitilde_a_1*scalings_y_1*psitilde_bs_1_1*2.12132034356,
    psitilde_a_0*scalings_y_0*psitilde_bs_0_2*1.224744871392,
    psitilde_a_3*scalings_y_3*psitilde_bs_3_0*3.741657386774,
    psitilde_a_2*scalings_y_2*psitilde_bs_2_1*3.162277660168,
    psitilde_a_1*scalings_y_1*psitilde_bs_1_2*2.449489742783,
    psitilde_a_0*scalings_y_0*psitilde_bs_0_3*1.414213562373};
    
    // Compute value(s)
    *values = 0.0;
    for (unsigned int j = 0; j < 10; j++)
      *values += coefficients0[dof][j]*basisvalues[j];
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    double values[1];
    double coordinates[2];
    
    // Nodal coordinates on reference cell
    static double X[10][2] = {{0, 0}, {1, 0}, {0, 1}, {0.6666666666667, 0.3333333333333}, {0.3333333333333, 0.6666666666667}, {0, 0.6666666666667}, {0, 0.3333333333333}, {0.3333333333333, 0}, {0.6666666666667, 0}, {0.3333333333333, 0.3333333333333}};
    
    // Components for each dof
    static unsigned int components[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0] - X[i][1];
    const double w1 = X[i][0];
    const double w2 = X[i][1];
    
    // Compute affine mapping x = F(X)
    coordinates[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0];
    coordinates[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1];
    
    // Evaluate function at coordinates
    f.evaluate(values, coordinates, c);
    
    // Pick component for evaluation
    return values[components[i]];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new Mixed_triangle_3_finite_element_0_0();
  }

};

/// This class defines the interface for a finite element.

class Mixed_triangle_3_finite_element_0_1: public ufc::finite_element
{
public:

  /// Constructor
  Mixed_triangle_3_finite_element_0_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~Mixed_triangle_3_finite_element_0_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "Lagrange finite element of degree 3 on a triangle";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 10;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
      
    // Compute determinant of Jacobian
    const double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute constants
    const double C0 = element_coordinates[1][0] + element_coordinates[2][0];
    const double C1 = element_coordinates[1][1] + element_coordinates[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double x = (J_01*C1 - J_11*C0 + 2.0*J_11*coordinates[0] - 2.0*J_01*coordinates[1]) / detJ;
    double y = (J_10*C0 - J_00*C1 - 2.0*J_10*coordinates[0] + 2.0*J_00*coordinates[1]) / detJ;
    
    // Map coordinates to the reference square
    if (std::abs(y - 1.0) < 1e-14)
      x = -1.0;
    else
      x = 2.0 * (1.0 + x)/(1.0 - y) - 1.0;
    
    const static unsigned int dof = i;
    
    // Table(s) of coefficients
    const static double coefficients0[10][10] = \
    {{0.0471404520791, -0.02886751345948, -0.01666666666667, 0.0782460796436, 0.06060915267313, 0.03499271061119, -0.0601337794303, -0.05082231953842, -0.03936679943759, -0.02272843225242},
    {0.0471404520791, 0.02886751345948, -0.01666666666667, 0.0782460796436, -0.06060915267313, 0.03499271061119, 0.0601337794303, -0.05082231953842, 0.03936679943759, -0.02272843225242},
    {0.0471404520791, -2.251158065353e-17, 0.03333333333333, 1.211843117768e-17, 6.434082499758e-18, 0.1049781318336, -1.840940600869e-33, 1.049486925388e-17, 2.149017023018e-17, 0.0909137290097},
    {0.106066017178, 0.2598076211353, -0.15, 0.1173691194654, 0.06060915267313, -0.07873359887517, -8.19662140348e-19, 0.1016446390768, -0.131222664792, 0.0909137290097},
    {0.106066017178, -1.197156945869e-17, 0.3, 1.044614927946e-17, 0.1515228816828, 0.02624453295839, -1.752974215868e-18, 8.51375538866e-18, 0.131222664792, -0.1363705935145},
    {0.106066017178, 1.197156945869e-17, 0.3, -1.078280545087e-17, -0.1515228816828, 0.02624453295839, 1.752974215868e-18, -8.805308185446e-18, -0.131222664792, -0.1363705935145},
    {0.106066017178, -0.2598076211353, -0.15, 0.1173691194654, -0.06060915267313, -0.07873359887517, -1.634147010078e-17, 0.1016446390768, 0.131222664792, 0.0909137290097},
    {0.106066017178, -0.2598076211353, -0.15, -0.0782460796436, 0.0909137290097, 0.09622995418077, 0.1804013382909, 0.05082231953842, -0.0131222664792, -0.02272843225242},
    {0.106066017178, 0.2598076211353, -0.15, -0.0782460796436, -0.0909137290097, 0.09622995418077, -0.1804013382909, 0.05082231953842, 0.0131222664792, -0.02272843225242},
    {0.6363961030679, -1.170236410171e-17, -8.624828282122e-17, -0.2347382389308, 2.449292486894e-17, -0.2624453295839, 1.716113224113e-17, -0.2032892781537, 3.272253659676e-18, 0.0909137290097}};
    
    // Generate scalings
    const double scalings_y_0 = 1.0;
    const double scalings_y_1 = scalings_y_0*(0.5 - 0.5 * y);
    const double scalings_y_2 = scalings_y_1*(0.5 - 0.5 * y);
    const double scalings_y_3 = scalings_y_2*(0.5 - 0.5 * y);
    
    // Compute psitilde_a
    const double psitilde_a_0 = 1.0;
    const double psitilde_a_1 = 1*x;
    const double psitilde_a_2 = 1.5*x*psitilde_a_1-0.5*psitilde_a_0;
    const double psitilde_a_3 = 1.666666666667*x*psitilde_a_2-0.6666666666667*psitilde_a_1;
    
    // Compute psitilde_bs
    const double psitilde_bs_0_0 = 1.0;
    const double psitilde_bs_0_1 = 0.5 + 1.5*y;
    const double psitilde_bs_0_2 = 0.1111111111111*psitilde_bs_0_1 + 1.666666666667*y*psitilde_bs_0_1-0.5555555555556*psitilde_bs_0_0;
    const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2-0.7*psitilde_bs_0_1;
    const double psitilde_bs_1_0 = 1.0;
    const double psitilde_bs_1_1 = 1.5 + 2.5*y;
    const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1-0.56*psitilde_bs_1_0;
    const double psitilde_bs_2_0 = 1.0;
    const double psitilde_bs_2_1 = 2.5 + 3.5*y;
    const double psitilde_bs_3_0 = 1.0;
    
    // Compute basisvalues
    const double basisvalues[10] = \
    {psitilde_a_0*scalings_y_0*psitilde_bs_0_0*0.7071067811865,
    psitilde_a_1*scalings_y_1*psitilde_bs_1_0*1.732050807569,
    psitilde_a_0*scalings_y_0*psitilde_bs_0_1*1,
    psitilde_a_2*scalings_y_2*psitilde_bs_2_0*2.738612787526,
    psitilde_a_1*scalings_y_1*psitilde_bs_1_1*2.12132034356,
    psitilde_a_0*scalings_y_0*psitilde_bs_0_2*1.224744871392,
    psitilde_a_3*scalings_y_3*psitilde_bs_3_0*3.741657386774,
    psitilde_a_2*scalings_y_2*psitilde_bs_2_1*3.162277660168,
    psitilde_a_1*scalings_y_1*psitilde_bs_1_2*2.449489742783,
    psitilde_a_0*scalings_y_0*psitilde_bs_0_3*1.414213562373};
    
    // Compute value(s)
    *values = 0.0;
    for (unsigned int j = 0; j < 10; j++)
      *values += coefficients0[dof][j]*basisvalues[j];
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    double values[1];
    double coordinates[2];
    
    // Nodal coordinates on reference cell
    static double X[10][2] = {{0, 0}, {1, 0}, {0, 1}, {0.6666666666667, 0.3333333333333}, {0.3333333333333, 0.6666666666667}, {0, 0.6666666666667}, {0, 0.3333333333333}, {0.3333333333333, 0}, {0.6666666666667, 0}, {0.3333333333333, 0.3333333333333}};
    
    // Components for each dof
    static unsigned int components[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0] - X[i][1];
    const double w1 = X[i][0];
    const double w2 = X[i][1];
    
    // Compute affine mapping x = F(X)
    coordinates[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0];
    coordinates[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1];
    
    // Evaluate function at coordinates
    f.evaluate(values, coordinates, c);
    
    // Pick component for evaluation
    return values[components[i]];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new Mixed_triangle_3_finite_element_0_1();
  }

};

/// This class defines the interface for a finite element.

class Mixed_triangle_3_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  Mixed_triangle_3_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~Mixed_triangle_3_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "Mixed finite element: [Lagrange finite element of degree 3 on a triangle, Lagrange finite element of degree 3 on a triangle]";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 20;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 2;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * element_coordinates = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = element_coordinates[1][0] - element_coordinates[0][0];
    const double J_01 = element_coordinates[2][0] - element_coordinates[0][0];
    const double J_10 = element_coordinates[1][1] - element_coordinates[0][1];
    const double J_11 = element_coordinates[2][1] - element_coordinates[0][1];
      
    // Compute determinant of Jacobian
    const double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute constants
    const double C0 = element_coordinates[1][0] + element_coordinates[2][0];
    const double C1 = element_coordinates[1][1] + element_coordinates[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double x = (J_01*C1 - J_11*C0 + 2.0*J_11*coordinates[0] - 2.0*J_01*coordinates[1]) / detJ;
    double y = (J_10*C0 - J_00*C1 - 2.0*J_10*coordinates[0] + 2.0*J_00*coordinates[1]) / detJ;
    
    // Map coordinates to the reference square
    if (std::abs(y - 1.0) < 1e-14)
      x = -1.0;
    else
      x = 2.0 * (1.0 + x)/(1.0 - y) - 1.0;
    
    for (unsigned int element = 0; element < 2; element++)
    // Switch for each of the basis elements
    {
      switch ( element )
      {
        case 0:
        {
          if (0 <= i and i <= 9)
          {
            // Compute local degree of freedom
            const static unsigned int dof = i;
    
            // Table(s) of coefficients
            const static double coefficients0[10][10] =         \
            {{0.0471404520791, -0.02886751345948, -0.01666666666667, 0.0782460796436, 0.06060915267313, 0.03499271061119, -0.0601337794303, -0.05082231953842, -0.03936679943759, -0.02272843225242},
            {0.0471404520791, 0.02886751345948, -0.01666666666667, 0.0782460796436, -0.06060915267313, 0.03499271061119, 0.0601337794303, -0.05082231953842, 0.03936679943759, -0.02272843225242},
            {0.0471404520791, -2.251158065353e-17, 0.03333333333333, 1.211843117768e-17, 6.434082499758e-18, 0.1049781318336, -1.840940600869e-33, 1.049486925388e-17, 2.149017023018e-17, 0.0909137290097},
            {0.106066017178, 0.2598076211353, -0.15, 0.1173691194654, 0.06060915267313, -0.07873359887517, -8.19662140348e-19, 0.1016446390768, -0.131222664792, 0.0909137290097},
            {0.106066017178, -1.197156945869e-17, 0.3, 1.044614927946e-17, 0.1515228816828, 0.02624453295839, -1.752974215868e-18, 8.51375538866e-18, 0.131222664792, -0.1363705935145},
            {0.106066017178, 1.197156945869e-17, 0.3, -1.078280545087e-17, -0.1515228816828, 0.02624453295839, 1.752974215868e-18, -8.805308185446e-18, -0.131222664792, -0.1363705935145},
            {0.106066017178, -0.2598076211353, -0.15, 0.1173691194654, -0.06060915267313, -0.07873359887517, -1.634147010078e-17, 0.1016446390768, 0.131222664792, 0.0909137290097},
            {0.106066017178, -0.2598076211353, -0.15, -0.0782460796436, 0.0909137290097, 0.09622995418077, 0.1804013382909, 0.05082231953842, -0.0131222664792, -0.02272843225242},
            {0.106066017178, 0.2598076211353, -0.15, -0.0782460796436, -0.0909137290097, 0.09622995418077, -0.1804013382909, 0.05082231953842, 0.0131222664792, -0.02272843225242},
            {0.6363961030679, -1.170236410171e-17, -8.624828282122e-17, -0.2347382389308, 2.449292486894e-17, -0.2624453295839, 1.716113224113e-17, -0.2032892781537, 3.272253659676e-18, 0.0909137290097}};
    
            // Generate scalings
            const double scalings_y_0 = 1.0;
            const double scalings_y_1 = scalings_y_0*(0.5 - 0.5 * y);
            const double scalings_y_2 = scalings_y_1*(0.5 - 0.5 * y);
            const double scalings_y_3 = scalings_y_2*(0.5 - 0.5 * y);
    
            // Compute psitilde_a
            const double psitilde_a_0 = 1.0;
            const double psitilde_a_1 = 1*x;
            const double psitilde_a_2 = 1.5*x*psitilde_a_1-0.5*psitilde_a_0;
            const double psitilde_a_3 = 1.666666666667*x*psitilde_a_2-0.6666666666667*psitilde_a_1;
    
            // Compute psitilde_bs
            const double psitilde_bs_0_0 = 1.0;
            const double psitilde_bs_0_1 = 0.5 + 1.5*y;
            const double psitilde_bs_0_2 = 0.1111111111111*psitilde_bs_0_1 + 1.666666666667*y*psitilde_bs_0_1-0.5555555555556*psitilde_bs_0_0;
            const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2-0.7*psitilde_bs_0_1;
            const double psitilde_bs_1_0 = 1.0;
            const double psitilde_bs_1_1 = 1.5 + 2.5*y;
            const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1-0.56*psitilde_bs_1_0;
            const double psitilde_bs_2_0 = 1.0;
            const double psitilde_bs_2_1 = 2.5 + 3.5*y;
            const double psitilde_bs_3_0 = 1.0;
    
            // Compute basisvalues
            const double basisvalues[10] =         \
            {psitilde_a_0*scalings_y_0*psitilde_bs_0_0*0.7071067811865,
            psitilde_a_1*scalings_y_1*psitilde_bs_1_0*1.732050807569,
            psitilde_a_0*scalings_y_0*psitilde_bs_0_1*1,
            psitilde_a_2*scalings_y_2*psitilde_bs_2_0*2.738612787526,
            psitilde_a_1*scalings_y_1*psitilde_bs_1_1*2.12132034356,
            psitilde_a_0*scalings_y_0*psitilde_bs_0_2*1.224744871392,
            psitilde_a_3*scalings_y_3*psitilde_bs_3_0*3.741657386774,
            psitilde_a_2*scalings_y_2*psitilde_bs_2_1*3.162277660168,
            psitilde_a_1*scalings_y_1*psitilde_bs_1_2*2.449489742783,
            psitilde_a_0*scalings_y_0*psitilde_bs_0_3*1.414213562373};
    
            // Compute value(s)
            values[0] = 0.0;
            for (unsigned int j = 0; j < 10; j++)
            {
              values[0] += coefficients0[dof][j]*basisvalues[j];
            }
          }
          else
          {
            values[0] = 0.0;
          }
          break;
        }
        case 1:
        {
          if (10 <= i and i <= 19)
          {
            // Compute local degree of freedom
            const static unsigned int dof = i - 10;
    
            // Table(s) of coefficients
            const static double coefficients0[10][10] =         \
            {{0.0471404520791, -0.02886751345948, -0.01666666666667, 0.0782460796436, 0.06060915267313, 0.03499271061119, -0.0601337794303, -0.05082231953842, -0.03936679943759, -0.02272843225242},
            {0.0471404520791, 0.02886751345948, -0.01666666666667, 0.0782460796436, -0.06060915267313, 0.03499271061119, 0.0601337794303, -0.05082231953842, 0.03936679943759, -0.02272843225242},
            {0.0471404520791, -2.251158065353e-17, 0.03333333333333, 1.211843117768e-17, 6.434082499758e-18, 0.1049781318336, -1.840940600869e-33, 1.049486925388e-17, 2.149017023018e-17, 0.0909137290097},
            {0.106066017178, 0.2598076211353, -0.15, 0.1173691194654, 0.06060915267313, -0.07873359887517, -8.19662140348e-19, 0.1016446390768, -0.131222664792, 0.0909137290097},
            {0.106066017178, -1.197156945869e-17, 0.3, 1.044614927946e-17, 0.1515228816828, 0.02624453295839, -1.752974215868e-18, 8.51375538866e-18, 0.131222664792, -0.1363705935145},
            {0.106066017178, 1.197156945869e-17, 0.3, -1.078280545087e-17, -0.1515228816828, 0.02624453295839, 1.752974215868e-18, -8.805308185446e-18, -0.131222664792, -0.1363705935145},
            {0.106066017178, -0.2598076211353, -0.15, 0.1173691194654, -0.06060915267313, -0.07873359887517, -1.634147010078e-17, 0.1016446390768, 0.131222664792, 0.0909137290097},
            {0.106066017178, -0.2598076211353, -0.15, -0.0782460796436, 0.0909137290097, 0.09622995418077, 0.1804013382909, 0.05082231953842, -0.0131222664792, -0.02272843225242},
            {0.106066017178, 0.2598076211353, -0.15, -0.0782460796436, -0.0909137290097, 0.09622995418077, -0.1804013382909, 0.05082231953842, 0.0131222664792, -0.02272843225242},
            {0.6363961030679, -1.170236410171e-17, -8.624828282122e-17, -0.2347382389308, 2.449292486894e-17, -0.2624453295839, 1.716113224113e-17, -0.2032892781537, 3.272253659676e-18, 0.0909137290097}};
    
            // Generate scalings
            const double scalings_y_0 = 1.0;
            const double scalings_y_1 = scalings_y_0*(0.5 - 0.5 * y);
            const double scalings_y_2 = scalings_y_1*(0.5 - 0.5 * y);
            const double scalings_y_3 = scalings_y_2*(0.5 - 0.5 * y);
    
            // Compute psitilde_a
            const double psitilde_a_0 = 1.0;
            const double psitilde_a_1 = 1*x;
            const double psitilde_a_2 = 1.5*x*psitilde_a_1-0.5*psitilde_a_0;
            const double psitilde_a_3 = 1.666666666667*x*psitilde_a_2-0.6666666666667*psitilde_a_1;
    
            // Compute psitilde_bs
            const double psitilde_bs_0_0 = 1.0;
            const double psitilde_bs_0_1 = 0.5 + 1.5*y;
            const double psitilde_bs_0_2 = 0.1111111111111*psitilde_bs_0_1 + 1.666666666667*y*psitilde_bs_0_1-0.5555555555556*psitilde_bs_0_0;
            const double psitilde_bs_0_3 = 0.05*psitilde_bs_0_2 + 1.75*y*psitilde_bs_0_2-0.7*psitilde_bs_0_1;
            const double psitilde_bs_1_0 = 1.0;
            const double psitilde_bs_1_1 = 1.5 + 2.5*y;
            const double psitilde_bs_1_2 = 0.54*psitilde_bs_1_1 + 2.1*y*psitilde_bs_1_1-0.56*psitilde_bs_1_0;
            const double psitilde_bs_2_0 = 1.0;
            const double psitilde_bs_2_1 = 2.5 + 3.5*y;
            const double psitilde_bs_3_0 = 1.0;
    
            // Compute basisvalues
            const double basisvalues[10] =         \
            {psitilde_a_0*scalings_y_0*psitilde_bs_0_0*0.7071067811865,
            psitilde_a_1*scalings_y_1*psitilde_bs_1_0*1.732050807569,
            psitilde_a_0*scalings_y_0*psitilde_bs_0_1*1,
            psitilde_a_2*scalings_y_2*psitilde_bs_2_0*2.738612787526,
            psitilde_a_1*scalings_y_1*psitilde_bs_1_1*2.12132034356,
            psitilde_a_0*scalings_y_0*psitilde_bs_0_2*1.224744871392,
            psitilde_a_3*scalings_y_3*psitilde_bs_3_0*3.741657386774,
            psitilde_a_2*scalings_y_2*psitilde_bs_2_1*3.162277660168,
            psitilde_a_1*scalings_y_1*psitilde_bs_1_2*2.449489742783,
            psitilde_a_0*scalings_y_0*psitilde_bs_0_3*1.414213562373};
    
            // Compute value(s)
            values[1] = 0.0;
            for (unsigned int j = 0; j < 10; j++)
            {
              values[1] += coefficients0[dof][j]*basisvalues[j];
            }
          }
          else
          {
            values[1] = 0.0;
          }
          break;
        }
      }
    }
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    double values[2];
    double coordinates[2];
    
    // Nodal coordinates on reference cell
    static double X[20][2] = {{0, 0}, {1, 0}, {0, 1}, {0.6666666666667, 0.3333333333333}, {0.3333333333333, 0.6666666666667}, {0, 0.6666666666667}, {0, 0.3333333333333}, {0.3333333333333, 0}, {0.6666666666667, 0}, {0.3333333333333, 0.3333333333333}, {0, 0}, {1, 0}, {0, 1}, {0.6666666666667, 0.3333333333333}, {0.3333333333333, 0.6666666666667}, {0, 0.6666666666667}, {0, 0.3333333333333}, {0.3333333333333, 0}, {0.6666666666667, 0}, {0.3333333333333, 0.3333333333333}};
    
    // Components for each dof
    static unsigned int components[20] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0] - X[i][1];
    const double w1 = X[i][0];
    const double w2 = X[i][1];
    
    // Compute affine mapping x = F(X)
    coordinates[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0];
    coordinates[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1];
    
    // Evaluate function at coordinates
    f.evaluate(values, coordinates, c);
    
    // Pick component for evaluation
    return values[components[i]];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[10];
    vertex_values[4] = dof_values[11];
    vertex_values[5] = dof_values[12];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 2;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new Mixed_triangle_3_finite_element_0_0();
      break;
    case 1:
      return new Mixed_triangle_3_finite_element_0_1();
      break;
    }
    return 0;
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class Mixed_triangle_3_dof_map_0_0: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  Mixed_triangle_3_dof_map_0_0() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~Mixed_triangle_3_dof_map_0_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for Lagrange finite element of degree 3 on a triangle";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return true;
      break;
    case 2:
      return true;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = m.num_entities[0] + 2*m.num_entities[1] + m.num_entities[2];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space
  virtual unsigned int local_dimension() const
  {
    return 10;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 4;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    unsigned int offset = m.num_entities[0];
    dofs[3] = offset + 2*c.entity_indices[1][0];
    dofs[4] = offset + 2*c.entity_indices[1][0] + 1;
    dofs[5] = offset + 2*c.entity_indices[1][1];
    dofs[6] = offset + 2*c.entity_indices[1][1] + 1;
    dofs[7] = offset + 2*c.entity_indices[1][2];
    dofs[8] = offset + 2*c.entity_indices[1][2] + 1;
    offset = offset + 2*m.num_entities[1];
    dofs[9] = offset + c.entity_indices[2][0];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   const ufc::mesh& m,
                                   const ufc::cell& c,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      break;
    }
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double **coordinates,
                                    const ufc::mesh& m,
                                    const ufc::cell& c) const
  {
    // Not implemented
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    // Not implemented
    return 0;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    // Not implemented
    return 0;
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class Mixed_triangle_3_dof_map_0_1: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  Mixed_triangle_3_dof_map_0_1() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~Mixed_triangle_3_dof_map_0_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for Lagrange finite element of degree 3 on a triangle";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return true;
      break;
    case 2:
      return true;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = m.num_entities[0] + 2*m.num_entities[1] + m.num_entities[2];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space
  virtual unsigned int local_dimension() const
  {
    return 10;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 4;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    unsigned int offset = m.num_entities[0];
    dofs[3] = offset + 2*c.entity_indices[1][0];
    dofs[4] = offset + 2*c.entity_indices[1][0] + 1;
    dofs[5] = offset + 2*c.entity_indices[1][1];
    dofs[6] = offset + 2*c.entity_indices[1][1] + 1;
    dofs[7] = offset + 2*c.entity_indices[1][2];
    dofs[8] = offset + 2*c.entity_indices[1][2] + 1;
    offset = offset + 2*m.num_entities[1];
    dofs[9] = offset + c.entity_indices[2][0];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   const ufc::mesh& m,
                                   const ufc::cell& c,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      break;
    }
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double **coordinates,
                                    const ufc::mesh& m,
                                    const ufc::cell& c) const
  {
    // Not implemented
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    // Not implemented
    return 0;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    // Not implemented
    return 0;
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class Mixed_triangle_3_dof_map_0: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  Mixed_triangle_3_dof_map_0() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~Mixed_triangle_3_dof_map_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for Mixed finite element: [Lagrange finite element of degree 3 on a triangle, Lagrange finite element of degree 3 on a triangle]";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return true;
      break;
    case 2:
      return true;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = 2*m.num_entities[0] + 4*m.num_entities[1] + 2*m.num_entities[2];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space
  virtual unsigned int local_dimension() const
  {
    return 20;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 8;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    unsigned int offset = m.num_entities[0];
    dofs[3] = offset + 2*c.entity_indices[1][0];
    dofs[4] = offset + 2*c.entity_indices[1][0] + 1;
    dofs[5] = offset + 2*c.entity_indices[1][1];
    dofs[6] = offset + 2*c.entity_indices[1][1] + 1;
    dofs[7] = offset + 2*c.entity_indices[1][2];
    dofs[8] = offset + 2*c.entity_indices[1][2] + 1;
    offset = offset + 2*m.num_entities[1];
    dofs[9] = offset + c.entity_indices[2][0];
    offset = offset + m.num_entities[2];
    dofs[10] = offset + c.entity_indices[0][0];
    dofs[11] = offset + c.entity_indices[0][1];
    dofs[12] = offset + c.entity_indices[0][2];
    offset = offset + m.num_entities[0];
    dofs[13] = offset + 2*c.entity_indices[1][0];
    dofs[14] = offset + 2*c.entity_indices[1][0] + 1;
    dofs[15] = offset + 2*c.entity_indices[1][1];
    dofs[16] = offset + 2*c.entity_indices[1][1] + 1;
    dofs[17] = offset + 2*c.entity_indices[1][2];
    dofs[18] = offset + 2*c.entity_indices[1][2] + 1;
    offset = offset + 2*m.num_entities[1];
    dofs[19] = offset + c.entity_indices[2][0];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   const ufc::mesh& m,
                                   const ufc::cell& c,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 11;
      dofs[3] = 12;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 10;
      dofs[3] = 12;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 10;
      dofs[3] = 11;
      break;
    }
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double **coordinates,
                                    const ufc::mesh& m,
                                    const ufc::cell& c) const
  {
    // Not implemented
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    // Not implemented
    return 0;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    // Not implemented
    return 0;
  }

};

#endif
