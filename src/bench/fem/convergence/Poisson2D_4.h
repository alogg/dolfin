// This code conforms with the UFC specification version 1.0
// and was automatically generated by FFC version 0.3.5.
//
// Warning: This code was generated with the option '-l dolfin'
// and contains DOLFIN-specific wrappers that depend on DOLFIN.

#ifndef __POISSON2D_4_H
#define __POISSON2D_4_H

#include <cmath>
#include <stdexcept>
#include <ufc.h>

/// This class defines the interface for a finite element.

class UFC_Poisson2D_4BilinearForm_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  UFC_Poisson2D_4BilinearForm_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson2D_4BilinearForm_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "Lagrange finite element of degree 4 on a triangle";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 15;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Not generated (compiled with -fno-evaluate_basis)
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Not generated (compiled with -fno-evaluate_basis_derivatives)
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    double values[1];
    double coordinates[2];
    
    // Nodal coordinates on reference cell
    static double X[15][2] = {{0, 0}, {1, 0}, {0, 1}, {0.75, 0.25}, {0.5, 0.5}, {0.25, 0.75}, {0, 0.75}, {0, 0.5}, {0, 0.25}, {0.25, 0}, {0.5, 0}, {0.75, 0}, {0.25, 0.25}, {0.5, 0.25}, {0.25, 0.5}};
    
    // Components for each dof
    static unsigned int components[15] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0] - X[i][1];
    const double w1 = X[i][0];
    const double w2 = X[i][1];
    
    // Compute affine mapping x = F(X)
    coordinates[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0];
    coordinates[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1];
    
    // Evaluate function at coordinates
    f.evaluate(values, coordinates, c);
    
    // Pick component for evaluation
    return values[components[i]];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate at vertices and use affine mapping
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new UFC_Poisson2D_4BilinearForm_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class UFC_Poisson2D_4BilinearForm_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  UFC_Poisson2D_4BilinearForm_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson2D_4BilinearForm_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "Lagrange finite element of degree 4 on a triangle";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 15;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Not generated (compiled with -fno-evaluate_basis)
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Not generated (compiled with -fno-evaluate_basis_derivatives)
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    double values[1];
    double coordinates[2];
    
    // Nodal coordinates on reference cell
    static double X[15][2] = {{0, 0}, {1, 0}, {0, 1}, {0.75, 0.25}, {0.5, 0.5}, {0.25, 0.75}, {0, 0.75}, {0, 0.5}, {0, 0.25}, {0.25, 0}, {0.5, 0}, {0.75, 0}, {0.25, 0.25}, {0.5, 0.25}, {0.25, 0.5}};
    
    // Components for each dof
    static unsigned int components[15] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0] - X[i][1];
    const double w1 = X[i][0];
    const double w2 = X[i][1];
    
    // Compute affine mapping x = F(X)
    coordinates[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0];
    coordinates[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1];
    
    // Evaluate function at coordinates
    f.evaluate(values, coordinates, c);
    
    // Pick component for evaluation
    return values[components[i]];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate at vertices and use affine mapping
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new UFC_Poisson2D_4BilinearForm_finite_element_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class UFC_Poisson2D_4BilinearForm_dof_map_0: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  UFC_Poisson2D_4BilinearForm_dof_map_0() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~UFC_Poisson2D_4BilinearForm_dof_map_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for Lagrange finite element of degree 4 on a triangle";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return true;
      break;
    case 2:
      return true;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = m.num_entities[0] + 3*m.num_entities[1] + 3*m.num_entities[2];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space
  virtual unsigned int local_dimension() const
  {
    return 15;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 5;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    unsigned int offset = m.num_entities[0];
    dofs[3] = offset + 3*c.entity_indices[1][0];
    dofs[4] = offset + 3*c.entity_indices[1][0] + 1;
    dofs[5] = offset + 3*c.entity_indices[1][0] + 2;
    dofs[6] = offset + 3*c.entity_indices[1][1];
    dofs[7] = offset + 3*c.entity_indices[1][1] + 1;
    dofs[8] = offset + 3*c.entity_indices[1][1] + 2;
    dofs[9] = offset + 3*c.entity_indices[1][2];
    dofs[10] = offset + 3*c.entity_indices[1][2] + 1;
    dofs[11] = offset + 3*c.entity_indices[1][2] + 2;
    offset = offset + 3*m.num_entities[1];
    dofs[12] = offset + 3*c.entity_indices[2][0];
    dofs[13] = offset + 3*c.entity_indices[2][0] + 1;
    dofs[14] = offset + 3*c.entity_indices[2][0] + 2;
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   const ufc::mesh& m,
                                   const ufc::cell& c,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 6;
      dofs[3] = 7;
      dofs[4] = 8;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 9;
      dofs[3] = 10;
      dofs[4] = 11;
      break;
    }
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double **coordinates,
                                    const ufc::cell& c) const
  {
    // This function is implemented assuming affine mapping!!
    // Get cell vertices
    const double * const * x = c.coordinates;
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[3][0] = 0.75*x[1][0] + 0.25*x[2][0];
    coordinates[3][1] = 0.75*x[1][1] + 0.25*x[2][1];
    coordinates[4][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[4][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[5][0] = 0.25*x[1][0] + 0.75*x[2][0];
    coordinates[5][1] = 0.25*x[1][1] + 0.75*x[2][1];
    coordinates[6][0] = 0.25*x[0][0] + 0.75*x[2][0];
    coordinates[6][1] = 0.25*x[0][1] + 0.75*x[2][1];
    coordinates[7][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[7][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[8][0] = 0.75*x[0][0] + 0.25*x[2][0];
    coordinates[8][1] = 0.75*x[0][1] + 0.25*x[2][1];
    coordinates[9][0] = 0.75*x[0][0] + 0.25*x[1][0];
    coordinates[9][1] = 0.75*x[0][1] + 0.25*x[1][1];
    coordinates[10][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[10][1] = 0.5*x[0][1] + 0.5*x[1][1];
    coordinates[11][0] = 0.25*x[0][0] + 0.75*x[1][0];
    coordinates[11][1] = 0.25*x[0][1] + 0.75*x[1][1];
    coordinates[12][0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0];
    coordinates[12][1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1];
    coordinates[13][0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[2][0];
    coordinates[13][1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[2][1];
    coordinates[14][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[2][0];
    coordinates[14][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[2][1];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new UFC_Poisson2D_4BilinearForm_dof_map_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class UFC_Poisson2D_4BilinearForm_dof_map_1: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  UFC_Poisson2D_4BilinearForm_dof_map_1() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~UFC_Poisson2D_4BilinearForm_dof_map_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for Lagrange finite element of degree 4 on a triangle";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return true;
      break;
    case 2:
      return true;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = m.num_entities[0] + 3*m.num_entities[1] + 3*m.num_entities[2];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space
  virtual unsigned int local_dimension() const
  {
    return 15;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 5;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    unsigned int offset = m.num_entities[0];
    dofs[3] = offset + 3*c.entity_indices[1][0];
    dofs[4] = offset + 3*c.entity_indices[1][0] + 1;
    dofs[5] = offset + 3*c.entity_indices[1][0] + 2;
    dofs[6] = offset + 3*c.entity_indices[1][1];
    dofs[7] = offset + 3*c.entity_indices[1][1] + 1;
    dofs[8] = offset + 3*c.entity_indices[1][1] + 2;
    dofs[9] = offset + 3*c.entity_indices[1][2];
    dofs[10] = offset + 3*c.entity_indices[1][2] + 1;
    dofs[11] = offset + 3*c.entity_indices[1][2] + 2;
    offset = offset + 3*m.num_entities[1];
    dofs[12] = offset + 3*c.entity_indices[2][0];
    dofs[13] = offset + 3*c.entity_indices[2][0] + 1;
    dofs[14] = offset + 3*c.entity_indices[2][0] + 2;
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   const ufc::mesh& m,
                                   const ufc::cell& c,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 6;
      dofs[3] = 7;
      dofs[4] = 8;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 9;
      dofs[3] = 10;
      dofs[4] = 11;
      break;
    }
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double **coordinates,
                                    const ufc::cell& c) const
  {
    // This function is implemented assuming affine mapping!!
    // Get cell vertices
    const double * const * x = c.coordinates;
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[3][0] = 0.75*x[1][0] + 0.25*x[2][0];
    coordinates[3][1] = 0.75*x[1][1] + 0.25*x[2][1];
    coordinates[4][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[4][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[5][0] = 0.25*x[1][0] + 0.75*x[2][0];
    coordinates[5][1] = 0.25*x[1][1] + 0.75*x[2][1];
    coordinates[6][0] = 0.25*x[0][0] + 0.75*x[2][0];
    coordinates[6][1] = 0.25*x[0][1] + 0.75*x[2][1];
    coordinates[7][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[7][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[8][0] = 0.75*x[0][0] + 0.25*x[2][0];
    coordinates[8][1] = 0.75*x[0][1] + 0.25*x[2][1];
    coordinates[9][0] = 0.75*x[0][0] + 0.25*x[1][0];
    coordinates[9][1] = 0.75*x[0][1] + 0.25*x[1][1];
    coordinates[10][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[10][1] = 0.5*x[0][1] + 0.5*x[1][1];
    coordinates[11][0] = 0.25*x[0][0] + 0.75*x[1][0];
    coordinates[11][1] = 0.25*x[0][1] + 0.75*x[1][1];
    coordinates[12][0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0];
    coordinates[12][1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1];
    coordinates[13][0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[2][0];
    coordinates[13][1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[2][1];
    coordinates[14][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[2][0];
    coordinates[14][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[2][1];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new UFC_Poisson2D_4BilinearForm_dof_map_1();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class UFC_Poisson2D_4BilinearForm_cell_integral_0: public ufc::cell_integral
{
public:

  /// Constructor
  UFC_Poisson2D_4BilinearForm_cell_integral_0() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson2D_4BilinearForm_cell_integral_0()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
      
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
      
    // Compute inverse of Jacobian
    const double Jinv_00 =  J_11 / detJ;
    const double Jinv_01 = -J_01 / detJ;
    const double Jinv_10 = -J_10 / detJ;
    const double Jinv_11 =  J_00 / detJ;
    
    // Take absolute value of determinant
    detJ = std::abs(detJ);
    
    // Set scale factor
    const double det = detJ;
    
    // Compute geometry tensors
    const double G0_0_0 = det*(Jinv_00*Jinv_00 + Jinv_01*Jinv_01);
    const double G0_0_1 = det*(Jinv_00*Jinv_10 + Jinv_01*Jinv_11);
    const double G0_1_0 = det*(Jinv_10*Jinv_00 + Jinv_11*Jinv_01);
    const double G0_1_1 = det*(Jinv_10*Jinv_10 + Jinv_11*Jinv_11);
    
    // Compute element tensor
    A[0] = 0.373015873015873*G0_0_0 + 0.373015873015873*G0_0_1 + 0.373015873015873*G0_1_0 + 0.373015873015872*G0_1_1;
    A[1] = 0.0566137566137564*G0_0_0 + 0.0566137566137565*G0_1_0;
    A[2] = 0.0566137566137566*G0_0_1 + 0.0566137566137566*G0_1_1;
    A[3] = 0.0423280423280421*G0_0_0 + 0.042328042328042*G0_0_1 + 0.0423280423280422*G0_1_0 + 0.0423280423280423*G0_1_1;
    A[4] = 0.0423280423280422*G0_0_0 + 0.0423280423280426*G0_0_1 + 0.0423280423280421*G0_1_0 + 0.0423280423280425*G0_1_1;
    A[5] = 0.0423280423280422*G0_0_0 + 0.0423280423280422*G0_0_1 + 0.0423280423280425*G0_1_0 + 0.0423280423280424*G0_1_1;
    A[6] = -0.0423280423280422*G0_0_0 - 0.245502645502645*G0_0_1 - 0.0423280423280425*G0_1_0 - 0.245502645502645*G0_1_1;
    A[7] = 0.042328042328042*G0_0_0 + 0.467724867724867*G0_0_1 + 0.0423280423280422*G0_1_0 + 0.467724867724867*G0_1_1;
    A[8] = 0.126984126984127*G0_0_0 - 0.651851851851851*G0_0_1 + 0.126984126984127*G0_1_0 - 0.651851851851851*G0_1_1;
    A[9] = -0.651851851851851*G0_0_0 + 0.126984126984127*G0_0_1 - 0.651851851851851*G0_1_0 + 0.126984126984127*G0_1_1;
    A[10] = 0.467724867724868*G0_0_0 + 0.0423280423280423*G0_0_1 + 0.467724867724867*G0_1_0 + 0.0423280423280424*G0_1_1;
    A[11] = -0.245502645502645*G0_0_0 - 0.0423280423280419*G0_0_1 - 0.245502645502645*G0_1_0 - 0.0423280423280421*G0_1_1;
    A[12] = -0.0846560846560848*G0_0_0 - 0.0846560846560854*G0_0_1 - 0.0846560846560846*G0_1_0 - 0.0846560846560851*G0_1_1;
    A[13] = -0.0846560846560844*G0_0_0 - 0.0846560846560849*G0_0_1 - 0.0846560846560845*G0_1_0 - 0.0846560846560849*G0_1_1;
    A[14] = -0.0846560846560841*G0_0_0 - 0.0846560846560842*G0_0_1 - 0.0846560846560843*G0_1_0 - 0.0846560846560844*G0_1_1;
    A[15] = 0.0566137566137564*G0_0_0 + 0.0566137566137565*G0_0_1;
    A[16] = 0.373015873015872*G0_0_0;
    A[17] = -0.0566137566137566*G0_0_1;
    A[18] = 0.126984126984126*G0_0_0 + 0.778835978835977*G0_0_1;
    A[19] = 0.0423280423280424*G0_0_0 - 0.425396825396825*G0_0_1;
    A[20] = -0.0423280423280419*G0_0_0 + 0.203174603174604*G0_0_1;
    A[21] = 0.0423280423280419*G0_0_0;
    A[22] = 0.0423280423280417*G0_0_0;
    A[23] = 0.0423280423280431*G0_0_0;
    A[24] = -0.245502645502645*G0_0_0 - 0.203174603174602*G0_0_1;
    A[25] = 0.467724867724867*G0_0_0 + 0.425396825396824*G0_0_1;
    A[26] = -0.651851851851851*G0_0_0 - 0.778835978835977*G0_0_1;
    A[27] = -0.0846560846560856*G0_0_0;
    A[28] = -0.084656084656084*G0_0_0;
    A[29] = -0.0846560846560842*G0_0_0;
    A[30] = 0.0566137566137566*G0_1_0 + 0.0566137566137566*G0_1_1;
    A[31] = -0.0566137566137566*G0_1_0;
    A[32] = 0.373015873015873*G0_1_1;
    A[33] = 0.203174603174602*G0_1_0 - 0.0423280423280426*G0_1_1;
    A[34] = -0.425396825396825*G0_1_0 + 0.0423280423280419*G0_1_1;
    A[35] = 0.778835978835978*G0_1_0 + 0.126984126984127*G0_1_1;
    A[36] = -0.778835978835978*G0_1_0 - 0.651851851851851*G0_1_1;
    A[37] = 0.425396825396824*G0_1_0 + 0.467724867724867*G0_1_1;
    A[38] = -0.203174603174603*G0_1_0 - 0.245502645502645*G0_1_1;
    A[39] = 0.0423280423280429*G0_1_1;
    A[40] = 0.0423280423280427*G0_1_1;
    A[41] = 0.0423280423280427*G0_1_1;
    A[42] = -0.0846560846560858*G0_1_1;
    A[43] = -0.0846560846560848*G0_1_1;
    A[44] = -0.0846560846560837*G0_1_1;
    A[45] = 0.0423280423280421*G0_0_0 + 0.0423280423280422*G0_0_1 + 0.042328042328042*G0_1_0 + 0.0423280423280423*G0_1_1;
    A[46] = 0.126984126984126*G0_0_0 + 0.778835978835977*G0_1_0;
    A[47] = 0.203174603174602*G0_0_1 - 0.0423280423280427*G0_1_1;
    A[48] = 1.82857142857142*G0_0_0 + 1.04973544973545*G0_0_1 + 1.04973544973545*G0_1_0 + 2.0994708994709*G0_1_1;
    A[49] = -0.660317460317457*G0_0_0 + 0.82116402116402*G0_0_1 - 0.296296296296295*G0_1_0 - 0.761904761904763*G0_1_1;
    A[50] = 0.338624338624336*G0_0_0 - 0.44021164021164*G0_0_1 + 0.101587301587302*G0_1_0 + 0.33862433862434*G0_1_1;
    A[51] = -0.338624338624337*G0_0_0 - 0.1015873015873*G0_0_1 - 0.101587301587302*G0_1_0;
    A[52] = -0.152380952380954*G0_0_0 - 0.0423280423280437*G0_0_1 - 0.0423280423280434*G0_1_0;
    A[53] = -0.203174603174602*G0_0_0 - 0.101587301587301*G0_0_1 - 0.101587301587299*G0_1_0;
    A[54] = -0.135449735449734*G0_0_0 - 0.237037037037035*G0_0_1 - 0.237037037037036*G0_1_0 - 0.338624338624336*G0_1_1;
    A[55] = 0.1015873015873*G0_0_0 + 0.465608465608464*G0_0_1 + 0.465608465608464*G0_1_0 + 0.761904761904759*G0_1_1;
    A[56] = -0.135449735449734*G0_0_0 - 1.04973544973545*G0_0_1 - 1.04973544973545*G0_1_0 - 2.09947089947089*G0_1_1;
    A[57] = 0.81269841269841*G0_0_0 + 0.338624338624336*G0_0_1 + 0.338624338624336*G0_1_0;
    A[58] = -2.43809523809523*G0_0_0 - 1.28677248677248*G0_0_1 - 1.28677248677248*G0_1_0;
    A[59] = 0.812698412698411*G0_0_0 + 0.338624338624339*G0_0_1 + 0.338624338624338*G0_1_0;
    A[60] = 0.0423280423280422*G0_0_0 + 0.0423280423280421*G0_0_1 + 0.0423280423280426*G0_1_0 + 0.0423280423280425*G0_1_1;
    A[61] = 0.0423280423280424*G0_0_0 - 0.425396825396825*G0_1_0;
    A[62] = -0.425396825396825*G0_0_1 + 0.0423280423280419*G0_1_1;
    A[63] = -0.660317460317457*G0_0_0 - 0.296296296296295*G0_0_1 + 0.82116402116402*G0_1_0 - 0.761904761904762*G0_1_1;
    A[64] = 2.45079365079365*G0_0_0 + 0.97142857142857*G0_0_1 + 0.97142857142857*G0_1_0 + 2.45079365079365*G0_1_1;
    A[65] = -0.76190476190476*G0_0_0 + 0.82116402116402*G0_0_1 - 0.296296296296299*G0_1_0 - 0.660317460317462*G0_1_1;
    A[66] = 0.761904761904761*G0_0_0 + 0.296296296296296*G0_0_1 + 0.296296296296299*G0_1_0 - 0.067724867724868*G0_1_1;
    A[67] = 0.393650793650793*G0_0_0 + 0.196825396825398*G0_0_1 + 0.196825396825396*G0_1_0 + 0.0507936507936526*G0_1_1;
    A[68] = -0.152380952380953*G0_0_0 - 0.11005291005291*G0_0_1 - 0.11005291005291*G0_1_0 - 0.0677248677248684*G0_1_1;
    A[69] = -0.0677248677248681*G0_0_0 - 0.110052910052911*G0_0_1 - 0.11005291005291*G0_1_0 - 0.152380952380952*G0_1_1;
    A[70] = 0.0507936507936508*G0_0_0 + 0.196825396825396*G0_0_1 + 0.196825396825396*G0_1_0 + 0.393650793650793*G0_1_1;
    A[71] = -0.0677248677248675*G0_0_0 + 0.296296296296295*G0_0_1 + 0.296296296296297*G0_1_0 + 0.761904761904762*G0_1_1;
    A[72] = 0.406349206349208*G0_0_0 + 0.457142857142859*G0_0_1 + 0.457142857142857*G0_1_0 + 0.406349206349205*G0_1_1;
    A[73] = 0.406349206349203*G0_0_0 - 1.16825396825397*G0_0_1 - 1.16825396825397*G0_1_0 - 2.84444444444444*G0_1_1;
    A[74] = -2.84444444444444*G0_0_0 - 1.16825396825397*G0_0_1 - 1.16825396825397*G0_1_0 + 0.406349206349208*G0_1_1;
    A[75] = 0.0423280423280422*G0_0_0 + 0.0423280423280425*G0_0_1 + 0.0423280423280422*G0_1_0 + 0.0423280423280424*G0_1_1;
    A[76] = -0.0423280423280419*G0_0_0 + 0.203174603174604*G0_1_0;
    A[77] = 0.778835978835978*G0_0_1 + 0.126984126984127*G0_1_1;
    A[78] = 0.338624338624336*G0_0_0 + 0.101587301587302*G0_0_1 - 0.44021164021164*G0_1_0 + 0.33862433862434*G0_1_1;
    A[79] = -0.76190476190476*G0_0_0 - 0.296296296296299*G0_0_1 + 0.82116402116402*G0_1_0 - 0.660317460317462*G0_1_1;
    A[80] = 2.0994708994709*G0_0_0 + 1.04973544973545*G0_0_1 + 1.04973544973545*G0_1_0 + 1.82857142857143*G0_1_1;
    A[81] = -2.0994708994709*G0_0_0 - 1.04973544973545*G0_0_1 - 1.04973544973545*G0_1_0 - 0.135449735449735*G0_1_1;
    A[82] = 0.761904761904761*G0_0_0 + 0.465608465608464*G0_0_1 + 0.465608465608465*G0_1_0 + 0.101587301587301*G0_1_1;
    A[83] = -0.338624338624338*G0_0_0 - 0.237037037037037*G0_0_1 - 0.237037037037036*G0_1_0 - 0.135449735449735*G0_1_1;
    A[84] = -0.101587301587301*G0_0_1 - 0.101587301587302*G0_1_0 - 0.203174603174604*G0_1_1;
    A[85] = -0.0423280423280416*G0_0_1 - 0.0423280423280418*G0_1_0 - 0.152380952380952*G0_1_1;
    A[86] = -0.101587301587302*G0_0_1 - 0.101587301587302*G0_1_0 - 0.33862433862434*G0_1_1;
    A[87] = 0.338624338624337*G0_0_1 + 0.338624338624338*G0_1_0 + 0.812698412698413*G0_1_1;
    A[88] = 0.338624338624339*G0_0_1 + 0.338624338624338*G0_1_0 + 0.812698412698414*G0_1_1;
    A[89] = -1.28677248677249*G0_0_1 - 1.28677248677248*G0_1_0 - 2.43809523809524*G0_1_1;
    A[90] = -0.0423280423280422*G0_0_0 - 0.0423280423280425*G0_0_1 - 0.245502645502645*G0_1_0 - 0.245502645502645*G0_1_1;
    A[91] = 0.0423280423280419*G0_0_0;
    A[92] = -0.778835978835978*G0_0_1 - 0.651851851851851*G0_1_1;
    A[93] = -0.338624338624337*G0_0_0 - 0.101587301587302*G0_0_1 - 0.1015873015873*G0_1_0;
    A[94] = 0.761904761904761*G0_0_0 + 0.296296296296299*G0_0_1 + 0.296296296296296*G0_1_0 - 0.067724867724868*G0_1_1;
    A[95] = -2.0994708994709*G0_0_0 - 1.04973544973545*G0_0_1 - 1.04973544973545*G0_1_0 - 0.135449735449735*G0_1_1;
    A[96] = 2.0994708994709*G0_0_0 + 1.04973544973545*G0_0_1 + 1.04973544973545*G0_1_0 + 1.82857142857143*G0_1_1;
    A[97] = -0.76190476190476*G0_0_0 - 0.465608465608464*G0_0_1 - 1.58306878306878*G0_1_0 - 1.94708994708994*G0_1_1;
    A[98] = 0.338624338624337*G0_0_0 + 0.237037037037037*G0_0_1 + 0.778835978835977*G0_1_0 + 1.01587301587301*G0_1_1;
    A[99] = 0.101587301587301*G0_0_1 + 0.101587301587301*G0_1_0 - 0.135449735449736*G0_1_1;
    A[100] = 0.0423280423280416*G0_0_1 + 0.0423280423280421*G0_1_0 - 0.0677248677248684*G0_1_1;
    A[101] = 0.101587301587302*G0_0_1 + 0.101587301587301*G0_1_0;
    A[102] = -0.338624338624337*G0_0_1 - 0.338624338624337*G0_1_0 + 0.135449735449738*G0_1_1;
    A[103] = -0.338624338624339*G0_0_1 - 0.33862433862434*G0_1_0 + 0.135449735449737*G0_1_1;
    A[104] = 1.28677248677249*G0_0_1 + 1.28677248677249*G0_1_0 + 0.135449735449733*G0_1_1;
    A[105] = 0.042328042328042*G0_0_0 + 0.0423280423280422*G0_0_1 + 0.467724867724867*G0_1_0 + 0.467724867724867*G0_1_1;
    A[106] = 0.0423280423280417*G0_0_0;
    A[107] = 0.425396825396824*G0_0_1 + 0.467724867724867*G0_1_1;
    A[108] = -0.152380952380954*G0_0_0 - 0.0423280423280434*G0_0_1 - 0.0423280423280437*G0_1_0;
    A[109] = 0.393650793650793*G0_0_0 + 0.196825396825396*G0_0_1 + 0.196825396825398*G0_1_0 + 0.0507936507936526*G0_1_1;
    A[110] = 0.761904761904761*G0_0_0 + 0.465608465608465*G0_0_1 + 0.465608465608464*G0_1_0 + 0.101587301587301*G0_1_1;
    A[111] = -0.76190476190476*G0_0_0 - 1.58306878306878*G0_0_1 - 0.465608465608463*G0_1_0 - 1.94708994708994*G0_1_1;
    A[112] = 2.45079365079365*G0_0_0 + 1.47936507936508*G0_0_1 + 1.47936507936508*G0_1_0 + 2.95873015873015*G0_1_1;
    A[113] = -0.660317460317459*G0_0_0 - 0.364021164021163*G0_0_1 - 1.48148148148148*G0_1_0 - 1.94708994708994*G0_1_1;
    A[114] = -0.0677248677248671*G0_0_0 - 0.364021164021164*G0_0_1 - 0.364021164021163*G0_1_0 + 0.101587301587302*G0_1_1;
    A[115] = 0.0507936507936511*G0_0_0 - 0.146031746031745*G0_0_1 - 0.146031746031746*G0_1_0 + 0.0507936507936515*G0_1_1;
    A[116] = -0.0677248677248677*G0_0_0 + 0.0423280423280436*G0_0_1 + 0.0423280423280431*G0_1_0;
    A[117] = 0.406349206349205*G0_0_0 + 1.57460317460317*G0_0_1 + 1.57460317460317*G0_1_0 - 0.101587301587303*G0_1_1;
    A[118] = 0.406349206349207*G0_0_0 - 0.0507936507936517*G0_0_1 - 0.05079365079365*G0_1_0 - 0.101587301587304*G0_1_1;
    A[119] = -2.84444444444444*G0_0_0 - 1.67619047619047*G0_0_1 - 1.67619047619047*G0_1_0 - 0.1015873015873*G0_1_1;
    A[120] = 0.126984126984127*G0_0_0 + 0.126984126984127*G0_0_1 - 0.651851851851851*G0_1_0 - 0.651851851851851*G0_1_1;
    A[121] = 0.0423280423280431*G0_0_0;
    A[122] = -0.203174603174603*G0_0_1 - 0.245502645502645*G0_1_1;
    A[123] = -0.203174603174602*G0_0_0 - 0.101587301587299*G0_0_1 - 0.101587301587301*G0_1_0;
    A[124] = -0.152380952380953*G0_0_0 - 0.11005291005291*G0_0_1 - 0.11005291005291*G0_1_0 - 0.0677248677248684*G0_1_1;
    A[125] = -0.338624338624338*G0_0_0 - 0.237037037037036*G0_0_1 - 0.237037037037037*G0_1_0 - 0.135449735449735*G0_1_1;
    A[126] = 0.338624338624337*G0_0_0 + 0.778835978835977*G0_0_1 + 0.237037037037037*G0_1_0 + 1.01587301587301*G0_1_1;
    A[127] = -0.660317460317459*G0_0_0 - 1.48148148148148*G0_0_1 - 0.364021164021163*G0_1_0 - 1.94708994708994*G0_1_1;
    A[128] = 1.82857142857143*G0_0_0 + 0.778835978835978*G0_0_1 + 0.778835978835978*G0_1_0 + 1.82857142857143*G0_1_1;
    A[129] = -0.135449735449736*G0_0_0 + 0.914285714285713*G0_0_1 + 0.914285714285713*G0_1_0 - 0.135449735449736*G0_1_1;
    A[130] = 0.101587301587302*G0_0_0 - 0.364021164021164*G0_0_1 - 0.364021164021164*G0_1_0 - 0.0677248677248683*G0_1_1;
    A[131] = -0.135449735449736*G0_0_0 + 0.101587301587299*G0_0_1 + 0.101587301587301*G0_1_0;
    A[132] = -2.43809523809523*G0_0_0 - 1.15132275132275*G0_0_1 - 1.15132275132275*G0_1_0 + 0.135449735449737*G0_1_1;
    A[133] = 0.812698412698411*G0_0_0 + 0.474074074074074*G0_0_1 + 0.474074074074074*G0_1_0 + 0.135449735449737*G0_1_1;
    A[134] = 0.812698412698412*G0_0_0 + 0.474074074074073*G0_0_1 + 0.474074074074073*G0_1_0 + 0.135449735449735*G0_1_1;
    A[135] = -0.651851851851851*G0_0_0 - 0.651851851851851*G0_0_1 + 0.126984126984127*G0_1_0 + 0.126984126984127*G0_1_1;
    A[136] = -0.245502645502645*G0_0_0 - 0.203174603174602*G0_1_0;
    A[137] = 0.0423280423280429*G0_1_1;
    A[138] = -0.135449735449734*G0_0_0 - 0.237037037037036*G0_0_1 - 0.237037037037035*G0_1_0 - 0.338624338624336*G0_1_1;
    A[139] = -0.0677248677248681*G0_0_0 - 0.11005291005291*G0_0_1 - 0.110052910052911*G0_1_0 - 0.152380952380952*G0_1_1;
    A[140] = -0.101587301587302*G0_0_1 - 0.101587301587301*G0_1_0 - 0.203174603174604*G0_1_1;
    A[141] = 0.101587301587301*G0_0_1 + 0.101587301587301*G0_1_0 - 0.135449735449736*G0_1_1;
    A[142] = -0.0677248677248671*G0_0_0 - 0.364021164021163*G0_0_1 - 0.364021164021164*G0_1_0 + 0.101587301587302*G0_1_1;
    A[143] = -0.135449735449736*G0_0_0 + 0.914285714285713*G0_0_1 + 0.914285714285713*G0_1_0 - 0.135449735449736*G0_1_1;
    A[144] = 1.82857142857143*G0_0_0 + 0.778835978835977*G0_0_1 + 0.778835978835977*G0_1_0 + 1.82857142857143*G0_1_1;
    A[145] = -1.94708994708995*G0_0_0 - 0.364021164021163*G0_0_1 - 1.48148148148148*G0_1_0 - 0.660317460317459*G0_1_1;
    A[146] = 1.01587301587301*G0_0_0 + 0.237037037037035*G0_0_1 + 0.778835978835977*G0_1_0 + 0.338624338624336*G0_1_1;
    A[147] = 0.135449735449736*G0_0_0 - 1.15132275132275*G0_0_1 - 1.15132275132275*G0_1_0 - 2.43809523809524*G0_1_1;
    A[148] = 0.135449735449734*G0_0_0 + 0.474074074074073*G0_0_1 + 0.474074074074071*G0_1_0 + 0.81269841269841*G0_1_1;
    A[149] = 0.135449735449735*G0_0_0 + 0.474074074074073*G0_0_1 + 0.474074074074075*G0_1_0 + 0.812698412698413*G0_1_1;
    A[150] = 0.467724867724868*G0_0_0 + 0.467724867724867*G0_0_1 + 0.0423280423280422*G0_1_0 + 0.0423280423280423*G0_1_1;
    A[151] = 0.467724867724867*G0_0_0 + 0.425396825396824*G0_1_0;
    A[152] = 0.0423280423280427*G0_1_1;
    A[153] = 0.1015873015873*G0_0_0 + 0.465608465608464*G0_0_1 + 0.465608465608464*G0_1_0 + 0.761904761904759*G0_1_1;
    A[154] = 0.0507936507936508*G0_0_0 + 0.196825396825396*G0_0_1 + 0.196825396825396*G0_1_0 + 0.393650793650793*G0_1_1;
    A[155] = -0.0423280423280418*G0_0_1 - 0.0423280423280416*G0_1_0 - 0.152380952380952*G0_1_1;
    A[156] = 0.0423280423280421*G0_0_1 + 0.0423280423280416*G0_1_0 - 0.0677248677248684*G0_1_1;
    A[157] = 0.0507936507936511*G0_0_0 - 0.146031746031746*G0_0_1 - 0.146031746031745*G0_1_0 + 0.0507936507936515*G0_1_1;
    A[158] = 0.101587301587302*G0_0_0 - 0.364021164021164*G0_0_1 - 0.364021164021164*G0_1_0 - 0.0677248677248682*G0_1_1;
    A[159] = -1.94708994708995*G0_0_0 - 1.48148148148148*G0_0_1 - 0.364021164021163*G0_1_0 - 0.660317460317459*G0_1_1;
    A[160] = 2.95873015873016*G0_0_0 + 1.47936507936508*G0_0_1 + 1.47936507936508*G0_1_0 + 2.45079365079365*G0_1_1;
    A[161] = -1.94708994708994*G0_0_0 - 0.465608465608463*G0_0_1 - 1.58306878306878*G0_1_0 - 0.761904761904759*G0_1_1;
    A[162] = -0.101587301587303*G0_0_0 + 1.57460317460317*G0_0_1 + 1.57460317460317*G0_1_0 + 0.406349206349206*G0_1_1;
    A[163] = -0.101587301587299*G0_0_0 - 1.67619047619047*G0_0_1 - 1.67619047619047*G0_1_0 - 2.84444444444444*G0_1_1;
    A[164] = -0.101587301587302*G0_0_0 - 0.0507936507936515*G0_0_1 - 0.0507936507936512*G0_1_0 + 0.406349206349204*G0_1_1;
    A[165] = -0.245502645502645*G0_0_0 - 0.245502645502645*G0_0_1 - 0.0423280423280419*G0_1_0 - 0.0423280423280421*G0_1_1;
    A[166] = -0.651851851851851*G0_0_0 - 0.778835978835977*G0_1_0;
    A[167] = 0.0423280423280427*G0_1_1;
    A[168] = -0.135449735449734*G0_0_0 - 1.04973544973545*G0_0_1 - 1.04973544973545*G0_1_0 - 2.09947089947089*G0_1_1;
    A[169] = -0.0677248677248675*G0_0_0 + 0.296296296296297*G0_0_1 + 0.296296296296295*G0_1_0 + 0.761904761904762*G0_1_1;
    A[170] = -0.101587301587302*G0_0_1 - 0.101587301587302*G0_1_0 - 0.33862433862434*G0_1_1;
    A[171] = 0.101587301587301*G0_0_1 + 0.101587301587302*G0_1_0;
    A[172] = -0.0677248677248677*G0_0_0 + 0.0423280423280431*G0_0_1 + 0.0423280423280436*G0_1_0;
    A[173] = -0.135449735449736*G0_0_0 + 0.101587301587301*G0_0_1 + 0.101587301587299*G0_1_0;
    A[174] = 1.01587301587301*G0_0_0 + 0.778835978835977*G0_0_1 + 0.237037037037035*G0_1_0 + 0.338624338624336*G0_1_1;
    A[175] = -1.94708994708994*G0_0_0 - 1.58306878306878*G0_0_1 - 0.465608465608463*G0_1_0 - 0.761904761904759*G0_1_1;
    A[176] = 1.82857142857143*G0_0_0 + 1.04973544973545*G0_0_1 + 1.04973544973545*G0_1_0 + 2.09947089947089*G0_1_1;
    A[177] = 0.135449735449737*G0_0_0 - 0.338624338624338*G0_0_1 - 0.338624338624336*G0_1_0;
    A[178] = 0.135449735449734*G0_0_0 + 1.28677248677248*G0_0_1 + 1.28677248677248*G0_1_0;
    A[179] = 0.135449735449735*G0_0_0 - 0.338624338624337*G0_0_1 - 0.338624338624338*G0_1_0;
    A[180] = -0.0846560846560848*G0_0_0 - 0.0846560846560846*G0_0_1 - 0.0846560846560855*G0_1_0 - 0.0846560846560851*G0_1_1;
    A[181] = -0.0846560846560855*G0_0_0;
    A[182] = -0.0846560846560858*G0_1_1;
    A[183] = 0.81269841269841*G0_0_0 + 0.338624338624336*G0_0_1 + 0.338624338624336*G0_1_0;
    A[184] = 0.406349206349208*G0_0_0 + 0.457142857142857*G0_0_1 + 0.457142857142859*G0_1_0 + 0.406349206349205*G0_1_1;
    A[185] = 0.338624338624338*G0_0_1 + 0.338624338624337*G0_1_0 + 0.812698412698413*G0_1_1;
    A[186] = -0.338624338624337*G0_0_1 - 0.338624338624337*G0_1_0 + 0.135449735449738*G0_1_1;
    A[187] = 0.406349206349205*G0_0_0 + 1.57460317460317*G0_0_1 + 1.57460317460317*G0_1_0 - 0.101587301587303*G0_1_1;
    A[188] = -2.43809523809523*G0_0_0 - 1.15132275132275*G0_0_1 - 1.15132275132275*G0_1_0 + 0.135449735449737*G0_1_1;
    A[189] = 0.135449735449736*G0_0_0 - 1.15132275132275*G0_0_1 - 1.15132275132275*G0_1_0 - 2.43809523809524*G0_1_1;
    A[190] = -0.101587301587303*G0_0_0 + 1.57460317460317*G0_0_1 + 1.57460317460317*G0_1_0 + 0.406349206349206*G0_1_1;
    A[191] = 0.135449735449737*G0_0_0 - 0.338624338624336*G0_0_1 - 0.338624338624338*G0_1_0;
    A[192] = 5.68888888888888*G0_0_0 + 2.84444444444444*G0_0_1 + 2.84444444444444*G0_1_0 + 5.68888888888889*G0_1_1;
    A[193] = -4.06349206349206*G0_0_0 - 2.03174603174603*G0_0_1 - 2.03174603174603*G0_1_0 - 0.812698412698412*G0_1_1;
    A[194] = -0.812698412698412*G0_0_0 - 2.03174603174603*G0_0_1 - 2.03174603174603*G0_1_0 - 4.06349206349206*G0_1_1;
    A[195] = -0.0846560846560844*G0_0_0 - 0.0846560846560844*G0_0_1 - 0.0846560846560849*G0_1_0 - 0.0846560846560849*G0_1_1;
    A[196] = -0.084656084656084*G0_0_0;
    A[197] = -0.0846560846560848*G0_1_1;
    A[198] = -2.43809523809523*G0_0_0 - 1.28677248677248*G0_0_1 - 1.28677248677248*G0_1_0;
    A[199] = 0.406349206349203*G0_0_0 - 1.16825396825397*G0_0_1 - 1.16825396825397*G0_1_0 - 2.84444444444444*G0_1_1;
    A[200] = 0.338624338624338*G0_0_1 + 0.338624338624339*G0_1_0 + 0.812698412698414*G0_1_1;
    A[201] = -0.33862433862434*G0_0_1 - 0.338624338624339*G0_1_0 + 0.135449735449737*G0_1_1;
    A[202] = 0.406349206349207*G0_0_0 - 0.0507936507936501*G0_0_1 - 0.0507936507936517*G0_1_0 - 0.101587301587304*G0_1_1;
    A[203] = 0.812698412698411*G0_0_0 + 0.474074074074074*G0_0_1 + 0.474074074074074*G0_1_0 + 0.135449735449737*G0_1_1;
    A[204] = 0.135449735449734*G0_0_0 + 0.474074074074071*G0_0_1 + 0.474074074074073*G0_1_0 + 0.81269841269841*G0_1_1;
    A[205] = -0.101587301587299*G0_0_0 - 1.67619047619047*G0_0_1 - 1.67619047619047*G0_1_0 - 2.84444444444444*G0_1_1;
    A[206] = 0.135449735449733*G0_0_0 + 1.28677248677248*G0_0_1 + 1.28677248677248*G0_1_0;
    A[207] = -4.06349206349206*G0_0_0 - 2.03174603174603*G0_0_1 - 2.03174603174603*G0_1_0 - 0.812698412698412*G0_1_1;
    A[208] = 5.68888888888888*G0_0_0 + 2.84444444444444*G0_0_1 + 2.84444444444444*G0_1_0 + 5.68888888888888*G0_1_1;
    A[209] = -0.812698412698411*G0_0_0 + 1.21904761904762*G0_0_1 + 1.21904761904762*G0_1_0 - 0.812698412698412*G0_1_1;
    A[210] = -0.0846560846560841*G0_0_0 - 0.0846560846560843*G0_0_1 - 0.0846560846560842*G0_1_0 - 0.0846560846560845*G0_1_1;
    A[211] = -0.0846560846560842*G0_0_0;
    A[212] = -0.0846560846560837*G0_1_1;
    A[213] = 0.812698412698411*G0_0_0 + 0.338624338624338*G0_0_1 + 0.338624338624339*G0_1_0;
    A[214] = -2.84444444444444*G0_0_0 - 1.16825396825397*G0_0_1 - 1.16825396825397*G0_1_0 + 0.406349206349208*G0_1_1;
    A[215] = -1.28677248677248*G0_0_1 - 1.28677248677249*G0_1_0 - 2.43809523809524*G0_1_1;
    A[216] = 1.28677248677248*G0_0_1 + 1.28677248677249*G0_1_0 + 0.135449735449733*G0_1_1;
    A[217] = -2.84444444444444*G0_0_0 - 1.67619047619047*G0_0_1 - 1.67619047619047*G0_1_0 - 0.1015873015873*G0_1_1;
    A[218] = 0.812698412698412*G0_0_0 + 0.474074074074073*G0_0_1 + 0.474074074074073*G0_1_0 + 0.135449735449735*G0_1_1;
    A[219] = 0.135449735449735*G0_0_0 + 0.474074074074075*G0_0_1 + 0.474074074074073*G0_1_0 + 0.812698412698413*G0_1_1;
    A[220] = -0.101587301587302*G0_0_0 - 0.0507936507936512*G0_0_1 - 0.0507936507936516*G0_1_0 + 0.406349206349204*G0_1_1;
    A[221] = 0.135449735449735*G0_0_0 - 0.338624338624338*G0_0_1 - 0.338624338624337*G0_1_0;
    A[222] = -0.812698412698412*G0_0_0 - 2.03174603174603*G0_0_1 - 2.03174603174603*G0_1_0 - 4.06349206349206*G0_1_1;
    A[223] = -0.81269841269841*G0_0_0 + 1.21904761904762*G0_0_1 + 1.21904761904762*G0_1_0 - 0.812698412698412*G0_1_1;
    A[224] = 5.68888888888888*G0_0_0 + 2.84444444444444*G0_0_1 + 2.84444444444444*G0_1_0 + 5.68888888888889*G0_1_1;
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class UFC_Poisson2D_4BilinearForm: public ufc::form
{
public:

  /// Constructor
  UFC_Poisson2D_4BilinearForm() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson2D_4BilinearForm()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "(dXa0/dxb0)(dXa1/dxb0) | ((d/dXa0)vi0)*((d/dXa1)vi1)*dX(0)";
  }

  /// Return the rank of the global tensor (r)
  virtual unsigned int rank() const
  {
    return 2;
  }

  /// Return the number of coefficients (n)
  virtual unsigned int num_coefficients() const
  {
    return 0;
  }

  /// Return the number of cell integrals
  virtual unsigned int num_cell_integrals() const
  {
    return 1;
  }
  
  /// Return the number of exterior facet integrals
  virtual unsigned int num_exterior_facet_integrals() const
  {
    return 0;
  }
  
  /// Return the number of interior facet integrals
  virtual unsigned int num_interior_facet_integrals() const
  {
    return 0;
  }
    
  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new UFC_Poisson2D_4BilinearForm_finite_element_0();
      break;
    case 1:
      return new UFC_Poisson2D_4BilinearForm_finite_element_1();
      break;
    }
    return 0;
  }
  
  /// Create a new dof map for argument function i
  virtual ufc::dof_map* create_dof_map(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new UFC_Poisson2D_4BilinearForm_dof_map_0();
      break;
    case 1:
      return new UFC_Poisson2D_4BilinearForm_dof_map_1();
      break;
    }
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(unsigned int i) const
  {
    return new UFC_Poisson2D_4BilinearForm_cell_integral_0();
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(unsigned int i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(unsigned int i) const
  {
    return 0;
  }

};

/// This class defines the interface for a finite element.

class UFC_Poisson2D_4LinearForm_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  UFC_Poisson2D_4LinearForm_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson2D_4LinearForm_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "Lagrange finite element of degree 4 on a triangle";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 15;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Not generated (compiled with -fno-evaluate_basis)
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Not generated (compiled with -fno-evaluate_basis_derivatives)
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    double values[1];
    double coordinates[2];
    
    // Nodal coordinates on reference cell
    static double X[15][2] = {{0, 0}, {1, 0}, {0, 1}, {0.75, 0.25}, {0.5, 0.5}, {0.25, 0.75}, {0, 0.75}, {0, 0.5}, {0, 0.25}, {0.25, 0}, {0.5, 0}, {0.75, 0}, {0.25, 0.25}, {0.5, 0.25}, {0.25, 0.5}};
    
    // Components for each dof
    static unsigned int components[15] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0] - X[i][1];
    const double w1 = X[i][0];
    const double w2 = X[i][1];
    
    // Compute affine mapping x = F(X)
    coordinates[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0];
    coordinates[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1];
    
    // Evaluate function at coordinates
    f.evaluate(values, coordinates, c);
    
    // Pick component for evaluation
    return values[components[i]];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate at vertices and use affine mapping
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new UFC_Poisson2D_4LinearForm_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class UFC_Poisson2D_4LinearForm_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  UFC_Poisson2D_4LinearForm_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson2D_4LinearForm_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "Lagrange finite element of degree 4 on a triangle";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 15;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Not generated (compiled with -fno-evaluate_basis)
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Not generated (compiled with -fno-evaluate_basis_derivatives)
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    double values[1];
    double coordinates[2];
    
    // Nodal coordinates on reference cell
    static double X[15][2] = {{0, 0}, {1, 0}, {0, 1}, {0.75, 0.25}, {0.5, 0.5}, {0.25, 0.75}, {0, 0.75}, {0, 0.5}, {0, 0.25}, {0.25, 0}, {0.5, 0}, {0.75, 0}, {0.25, 0.25}, {0.5, 0.25}, {0.25, 0.5}};
    
    // Components for each dof
    static unsigned int components[15] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0] - X[i][1];
    const double w1 = X[i][0];
    const double w2 = X[i][1];
    
    // Compute affine mapping x = F(X)
    coordinates[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0];
    coordinates[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1];
    
    // Evaluate function at coordinates
    f.evaluate(values, coordinates, c);
    
    // Pick component for evaluation
    return values[components[i]];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate at vertices and use affine mapping
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new UFC_Poisson2D_4LinearForm_finite_element_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class UFC_Poisson2D_4LinearForm_dof_map_0: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  UFC_Poisson2D_4LinearForm_dof_map_0() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~UFC_Poisson2D_4LinearForm_dof_map_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for Lagrange finite element of degree 4 on a triangle";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return true;
      break;
    case 2:
      return true;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = m.num_entities[0] + 3*m.num_entities[1] + 3*m.num_entities[2];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space
  virtual unsigned int local_dimension() const
  {
    return 15;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 5;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    unsigned int offset = m.num_entities[0];
    dofs[3] = offset + 3*c.entity_indices[1][0];
    dofs[4] = offset + 3*c.entity_indices[1][0] + 1;
    dofs[5] = offset + 3*c.entity_indices[1][0] + 2;
    dofs[6] = offset + 3*c.entity_indices[1][1];
    dofs[7] = offset + 3*c.entity_indices[1][1] + 1;
    dofs[8] = offset + 3*c.entity_indices[1][1] + 2;
    dofs[9] = offset + 3*c.entity_indices[1][2];
    dofs[10] = offset + 3*c.entity_indices[1][2] + 1;
    dofs[11] = offset + 3*c.entity_indices[1][2] + 2;
    offset = offset + 3*m.num_entities[1];
    dofs[12] = offset + 3*c.entity_indices[2][0];
    dofs[13] = offset + 3*c.entity_indices[2][0] + 1;
    dofs[14] = offset + 3*c.entity_indices[2][0] + 2;
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   const ufc::mesh& m,
                                   const ufc::cell& c,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 6;
      dofs[3] = 7;
      dofs[4] = 8;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 9;
      dofs[3] = 10;
      dofs[4] = 11;
      break;
    }
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double **coordinates,
                                    const ufc::cell& c) const
  {
    // This function is implemented assuming affine mapping!!
    // Get cell vertices
    const double * const * x = c.coordinates;
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[3][0] = 0.75*x[1][0] + 0.25*x[2][0];
    coordinates[3][1] = 0.75*x[1][1] + 0.25*x[2][1];
    coordinates[4][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[4][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[5][0] = 0.25*x[1][0] + 0.75*x[2][0];
    coordinates[5][1] = 0.25*x[1][1] + 0.75*x[2][1];
    coordinates[6][0] = 0.25*x[0][0] + 0.75*x[2][0];
    coordinates[6][1] = 0.25*x[0][1] + 0.75*x[2][1];
    coordinates[7][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[7][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[8][0] = 0.75*x[0][0] + 0.25*x[2][0];
    coordinates[8][1] = 0.75*x[0][1] + 0.25*x[2][1];
    coordinates[9][0] = 0.75*x[0][0] + 0.25*x[1][0];
    coordinates[9][1] = 0.75*x[0][1] + 0.25*x[1][1];
    coordinates[10][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[10][1] = 0.5*x[0][1] + 0.5*x[1][1];
    coordinates[11][0] = 0.25*x[0][0] + 0.75*x[1][0];
    coordinates[11][1] = 0.25*x[0][1] + 0.75*x[1][1];
    coordinates[12][0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0];
    coordinates[12][1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1];
    coordinates[13][0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[2][0];
    coordinates[13][1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[2][1];
    coordinates[14][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[2][0];
    coordinates[14][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[2][1];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new UFC_Poisson2D_4LinearForm_dof_map_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class UFC_Poisson2D_4LinearForm_dof_map_1: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  UFC_Poisson2D_4LinearForm_dof_map_1() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~UFC_Poisson2D_4LinearForm_dof_map_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for Lagrange finite element of degree 4 on a triangle";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return true;
      break;
    case 2:
      return true;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = m.num_entities[0] + 3*m.num_entities[1] + 3*m.num_entities[2];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space
  virtual unsigned int local_dimension() const
  {
    return 15;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 5;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    unsigned int offset = m.num_entities[0];
    dofs[3] = offset + 3*c.entity_indices[1][0];
    dofs[4] = offset + 3*c.entity_indices[1][0] + 1;
    dofs[5] = offset + 3*c.entity_indices[1][0] + 2;
    dofs[6] = offset + 3*c.entity_indices[1][1];
    dofs[7] = offset + 3*c.entity_indices[1][1] + 1;
    dofs[8] = offset + 3*c.entity_indices[1][1] + 2;
    dofs[9] = offset + 3*c.entity_indices[1][2];
    dofs[10] = offset + 3*c.entity_indices[1][2] + 1;
    dofs[11] = offset + 3*c.entity_indices[1][2] + 2;
    offset = offset + 3*m.num_entities[1];
    dofs[12] = offset + 3*c.entity_indices[2][0];
    dofs[13] = offset + 3*c.entity_indices[2][0] + 1;
    dofs[14] = offset + 3*c.entity_indices[2][0] + 2;
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   const ufc::mesh& m,
                                   const ufc::cell& c,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 6;
      dofs[3] = 7;
      dofs[4] = 8;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 9;
      dofs[3] = 10;
      dofs[4] = 11;
      break;
    }
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double **coordinates,
                                    const ufc::cell& c) const
  {
    // This function is implemented assuming affine mapping!!
    // Get cell vertices
    const double * const * x = c.coordinates;
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[3][0] = 0.75*x[1][0] + 0.25*x[2][0];
    coordinates[3][1] = 0.75*x[1][1] + 0.25*x[2][1];
    coordinates[4][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[4][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[5][0] = 0.25*x[1][0] + 0.75*x[2][0];
    coordinates[5][1] = 0.25*x[1][1] + 0.75*x[2][1];
    coordinates[6][0] = 0.25*x[0][0] + 0.75*x[2][0];
    coordinates[6][1] = 0.25*x[0][1] + 0.75*x[2][1];
    coordinates[7][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[7][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[8][0] = 0.75*x[0][0] + 0.25*x[2][0];
    coordinates[8][1] = 0.75*x[0][1] + 0.25*x[2][1];
    coordinates[9][0] = 0.75*x[0][0] + 0.25*x[1][0];
    coordinates[9][1] = 0.75*x[0][1] + 0.25*x[1][1];
    coordinates[10][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[10][1] = 0.5*x[0][1] + 0.5*x[1][1];
    coordinates[11][0] = 0.25*x[0][0] + 0.75*x[1][0];
    coordinates[11][1] = 0.25*x[0][1] + 0.75*x[1][1];
    coordinates[12][0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0];
    coordinates[12][1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1];
    coordinates[13][0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[2][0];
    coordinates[13][1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[2][1];
    coordinates[14][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[2][0];
    coordinates[14][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[2][1];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new UFC_Poisson2D_4LinearForm_dof_map_1();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class UFC_Poisson2D_4LinearForm_cell_integral_0: public ufc::cell_integral
{
public:

  /// Constructor
  UFC_Poisson2D_4LinearForm_cell_integral_0() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson2D_4LinearForm_cell_integral_0()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
      
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
      
    // Compute inverse of Jacobian
    
    // Take absolute value of determinant
    detJ = std::abs(detJ);
    
    // Set scale factor
    const double det = detJ;
    
    // Compute coefficients
    const double c0_0_0_0 = w[0][0];
    const double c0_0_0_1 = w[0][1];
    const double c0_0_0_2 = w[0][2];
    const double c0_0_0_3 = w[0][3];
    const double c0_0_0_4 = w[0][4];
    const double c0_0_0_5 = w[0][5];
    const double c0_0_0_6 = w[0][6];
    const double c0_0_0_7 = w[0][7];
    const double c0_0_0_8 = w[0][8];
    const double c0_0_0_9 = w[0][9];
    const double c0_0_0_10 = w[0][10];
    const double c0_0_0_11 = w[0][11];
    const double c0_0_0_12 = w[0][12];
    const double c0_0_0_13 = w[0][13];
    const double c0_0_0_14 = w[0][14];
    
    // Compute geometry tensors
    const double G0_0 = det*c0_0_0_0;
    const double G0_1 = det*c0_0_0_1;
    const double G0_2 = det*c0_0_0_2;
    const double G0_3 = det*c0_0_0_3;
    const double G0_4 = det*c0_0_0_4;
    const double G0_5 = det*c0_0_0_5;
    const double G0_6 = det*c0_0_0_6;
    const double G0_7 = det*c0_0_0_7;
    const double G0_8 = det*c0_0_0_8;
    const double G0_9 = det*c0_0_0_9;
    const double G0_10 = det*c0_0_0_10;
    const double G0_11 = det*c0_0_0_11;
    const double G0_12 = det*c0_0_0_12;
    const double G0_13 = det*c0_0_0_13;
    const double G0_14 = det*c0_0_0_14;
    
    // Compute element tensor
    A[0] = 0.00255731922398588*G0_0 - 0.000238095238095237*G0_1 - 0.000238095238095237*G0_2 - 0.000987654320987651*G0_3 - 0.000105820105820106*G0_4 - 0.00098765432098765*G0_5 - 0.000705467372134032*G0_7 + 0.00141093474426807*G0_8 + 0.00141093474426807*G0_9 - 0.000705467372134035*G0_10 + 0.00141093474426807*G0_12 - 0.00141093474426807*G0_13 - 0.00141093474426807*G0_14;
    A[1] = -0.000238095238095237*G0_0 + 0.00255731922398588*G0_1 - 0.000238095238095236*G0_2 + 0.00141093474426807*G0_3 - 0.000705467372134031*G0_4 - 0.000987654320987649*G0_6 - 0.000105820105820108*G0_7 - 0.000987654320987649*G0_8 - 0.000705467372134035*G0_10 + 0.00141093474426807*G0_11 - 0.00141093474426808*G0_12 + 0.00141093474426807*G0_13 - 0.00141093474426807*G0_14;
    A[2] = -0.000238095238095237*G0_0 - 0.000238095238095236*G0_1 + 0.00255731922398588*G0_2 - 0.000705467372134034*G0_4 + 0.00141093474426807*G0_5 + 0.00141093474426807*G0_6 - 0.000705467372134033*G0_7 - 0.000987654320987648*G0_9 - 0.000105820105820105*G0_10 - 0.000987654320987648*G0_11 - 0.00141093474426807*G0_12 - 0.00141093474426807*G0_13 + 0.00141093474426807*G0_14;
    A[3] = -0.000987654320987651*G0_0 + 0.00141093474426807*G0_1 + 0.0225749559082891*G0_3 - 0.0112874779541446*G0_4 + 0.00677248677248673*G0_5 + 0.00451499118165782*G0_6 + 0.000564373897707233*G0_7 + 0.00225749559082891*G0_8 + 0.00451499118165782*G0_9 - 0.00846560846560842*G0_10 + 0.0112874779541446*G0_11 - 0.00225749559082891*G0_12 + 0.0112874779541446*G0_13 + 0.00225749559082892*G0_14;
    A[4] = -0.000105820105820106*G0_0 - 0.00070546737213403*G0_1 - 0.000705467372134034*G0_2 - 0.0112874779541446*G0_3 + 0.0279365079365078*G0_4 - 0.0112874779541446*G0_5 - 0.00846560846560842*G0_6 + 0.00042328042328041*G0_7 + 0.000564373897707238*G0_8 + 0.000564373897707239*G0_9 + 0.000423280423280415*G0_10 - 0.00846560846560841*G0_11 - 0.00677248677248674*G0_12 + 0.00338624338624339*G0_13 + 0.00338624338624337*G0_14;
    A[5] = -0.00098765432098765*G0_0 + 0.00141093474426807*G0_2 + 0.00677248677248674*G0_3 - 0.0112874779541446*G0_4 + 0.0225749559082891*G0_5 + 0.0112874779541446*G0_6 - 0.00846560846560842*G0_7 + 0.00451499118165782*G0_8 + 0.00225749559082891*G0_9 + 0.00056437389770723*G0_10 + 0.00451499118165782*G0_11 - 0.00225749559082893*G0_12 + 0.00225749559082891*G0_13 + 0.0112874779541446*G0_14;
    A[6] = -0.000987654320987649*G0_1 + 0.00141093474426807*G0_2 + 0.00451499118165782*G0_3 - 0.00846560846560842*G0_4 + 0.0112874779541446*G0_5 + 0.0225749559082891*G0_6 - 0.0112874779541446*G0_7 + 0.00677248677248674*G0_8 + 0.00451499118165782*G0_9 + 0.000564373897707227*G0_10 + 0.00225749559082891*G0_11 + 0.00225749559082891*G0_12 - 0.00225749559082891*G0_13 + 0.0112874779541446*G0_14;
    A[7] = -0.000705467372134032*G0_0 - 0.000105820105820108*G0_1 - 0.000705467372134033*G0_2 + 0.000564373897707233*G0_3 + 0.00042328042328041*G0_4 - 0.00846560846560842*G0_5 - 0.0112874779541446*G0_6 + 0.0279365079365078*G0_7 - 0.0112874779541446*G0_8 - 0.00846560846560842*G0_9 + 0.000423280423280422*G0_10 + 0.000564373897707233*G0_11 + 0.0033862433862434*G0_12 - 0.00677248677248675*G0_13 + 0.00338624338624336*G0_14;
    A[8] = 0.00141093474426807*G0_0 - 0.000987654320987649*G0_1 + 0.00225749559082891*G0_3 + 0.000564373897707238*G0_4 + 0.00451499118165782*G0_5 + 0.00677248677248674*G0_6 - 0.0112874779541446*G0_7 + 0.0225749559082891*G0_8 + 0.0112874779541446*G0_9 - 0.00846560846560843*G0_10 + 0.00451499118165783*G0_11 + 0.0112874779541446*G0_12 - 0.00225749559082892*G0_13 + 0.00225749559082892*G0_14;
    A[9] = 0.00141093474426807*G0_0 - 0.000987654320987648*G0_2 + 0.00451499118165782*G0_3 + 0.000564373897707239*G0_4 + 0.00225749559082891*G0_5 + 0.00451499118165782*G0_6 - 0.00846560846560842*G0_7 + 0.0112874779541446*G0_8 + 0.0225749559082891*G0_9 - 0.0112874779541446*G0_10 + 0.00677248677248674*G0_11 + 0.0112874779541446*G0_12 + 0.00225749559082891*G0_13 - 0.0022574955908289*G0_14;
    A[10] = -0.000705467372134035*G0_0 - 0.000705467372134035*G0_1 - 0.000105820105820105*G0_2 - 0.00846560846560842*G0_3 + 0.000423280423280415*G0_4 + 0.00056437389770723*G0_5 + 0.000564373897707227*G0_6 + 0.000423280423280421*G0_7 - 0.00846560846560843*G0_8 - 0.0112874779541446*G0_9 + 0.0279365079365078*G0_10 - 0.0112874779541446*G0_11 + 0.00338624338624336*G0_12 + 0.00338624338624338*G0_13 - 0.00677248677248674*G0_14;
    A[11] = 0.00141093474426807*G0_1 - 0.000987654320987648*G0_2 + 0.0112874779541446*G0_3 - 0.00846560846560841*G0_4 + 0.00451499118165782*G0_5 + 0.00225749559082891*G0_6 + 0.000564373897707233*G0_7 + 0.00451499118165783*G0_8 + 0.00677248677248674*G0_9 - 0.0112874779541446*G0_10 + 0.0225749559082891*G0_11 + 0.00225749559082892*G0_12 + 0.0112874779541446*G0_13 - 0.0022574955908289*G0_14;
    A[12] = 0.00141093474426807*G0_0 - 0.00141093474426808*G0_1 - 0.00141093474426807*G0_2 - 0.00225749559082891*G0_3 - 0.00677248677248674*G0_4 - 0.00225749559082893*G0_5 + 0.00225749559082891*G0_6 + 0.0033862433862434*G0_7 + 0.0112874779541446*G0_8 + 0.0112874779541446*G0_9 + 0.00338624338624336*G0_10 + 0.00225749559082892*G0_11 + 0.0948148148148145*G0_12 - 0.0135449735449735*G0_13 - 0.0135449735449735*G0_14;
    A[13] = -0.00141093474426807*G0_0 + 0.00141093474426807*G0_1 - 0.00141093474426807*G0_2 + 0.0112874779541446*G0_3 + 0.00338624338624338*G0_4 + 0.00225749559082891*G0_5 - 0.00225749559082891*G0_6 - 0.00677248677248675*G0_7 - 0.00225749559082892*G0_8 + 0.00225749559082891*G0_9 + 0.00338624338624338*G0_10 + 0.0112874779541446*G0_11 - 0.0135449735449735*G0_12 + 0.0948148148148145*G0_13 - 0.0135449735449735*G0_14;
    A[14] = -0.00141093474426807*G0_0 - 0.00141093474426807*G0_1 + 0.00141093474426807*G0_2 + 0.00225749559082892*G0_3 + 0.00338624338624337*G0_4 + 0.0112874779541446*G0_5 + 0.0112874779541446*G0_6 + 0.00338624338624336*G0_7 + 0.00225749559082892*G0_8 - 0.0022574955908289*G0_9 - 0.00677248677248674*G0_10 - 0.0022574955908289*G0_11 - 0.0135449735449735*G0_12 - 0.0135449735449735*G0_13 + 0.0948148148148144*G0_14;
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class UFC_Poisson2D_4LinearForm: public ufc::form
{
public:

  /// Constructor
  UFC_Poisson2D_4LinearForm() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson2D_4LinearForm()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "w0_a0 | vi0*va0*dX(0)";
  }

  /// Return the rank of the global tensor (r)
  virtual unsigned int rank() const
  {
    return 1;
  }

  /// Return the number of coefficients (n)
  virtual unsigned int num_coefficients() const
  {
    return 1;
  }

  /// Return the number of cell integrals
  virtual unsigned int num_cell_integrals() const
  {
    return 1;
  }
  
  /// Return the number of exterior facet integrals
  virtual unsigned int num_exterior_facet_integrals() const
  {
    return 0;
  }
  
  /// Return the number of interior facet integrals
  virtual unsigned int num_interior_facet_integrals() const
  {
    return 0;
  }
    
  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new UFC_Poisson2D_4LinearForm_finite_element_0();
      break;
    case 1:
      return new UFC_Poisson2D_4LinearForm_finite_element_1();
      break;
    }
    return 0;
  }
  
  /// Create a new dof map for argument function i
  virtual ufc::dof_map* create_dof_map(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new UFC_Poisson2D_4LinearForm_dof_map_0();
      break;
    case 1:
      return new UFC_Poisson2D_4LinearForm_dof_map_1();
      break;
    }
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(unsigned int i) const
  {
    return new UFC_Poisson2D_4LinearForm_cell_integral_0();
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(unsigned int i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(unsigned int i) const
  {
    return 0;
  }

};

// DOLFIN wrappers

#include <dolfin/Form.h>

class Poisson2D_4BilinearForm : public dolfin::Form
{
public:

  Poisson2D_4BilinearForm() : dolfin::Form()
  {
    // Do nothing
  }

  /// Return UFC form
  virtual const ufc::form& form() const
  {
    return __form;
  }
  
  /// Return array of coefficients
  virtual const dolfin::Array<dolfin::Function*>& coefficients() const
  {
    return __coefficients;
  }

private:

  // UFC form
  UFC_Poisson2D_4BilinearForm __form;

  /// Array of coefficients
  dolfin::Array<dolfin::Function*> __coefficients;

};

class Poisson2D_4LinearForm : public dolfin::Form
{
public:

  Poisson2D_4LinearForm(dolfin::Function& w0) : dolfin::Form()
  {
    __coefficients.push_back(&w0);
  }

  /// Return UFC form
  virtual const ufc::form& form() const
  {
    return __form;
  }
  
  /// Return array of coefficients
  virtual const dolfin::Array<dolfin::Function*>& coefficients() const
  {
    return __coefficients;
  }

private:

  // UFC form
  UFC_Poisson2D_4LinearForm __form;

  /// Array of coefficients
  dolfin::Array<dolfin::Function*> __coefficients;

};

#endif
