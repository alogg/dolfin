// Automatically generated by FFC, the FEniCS Form Compiler, version 0.3.3-dev.
// For further information, go to http://www/fenics.org/ffc/.
// Licensed under the GNU GPL Version 2.

#ifndef __POISSON2D_4_H
#define __POISSON2D_4_H

#include <dolfin/Mesh.h>
#include <dolfin/Cell.h>
#include <dolfin/Point.h>
#include <dolfin/AffineMap.h>
#include <dolfin/FiniteElement.h>
#include <dolfin/FiniteElementSpec.h>
#include <dolfin/BilinearForm.h>
#include <dolfin/LinearForm.h>
#include <dolfin/Functional.h>
#include <dolfin/FEM.h>

namespace dolfin { namespace Poisson2D_4 {

/// This class contains the form to be evaluated, including
/// contributions from the interior and boundary of the domain.

class BilinearForm : public dolfin::BilinearForm
{
public:

  class TestElement;

  class TrialElement;

  BilinearForm();
  

  bool interior_contribution() const;

  void eval(real block[], const AffineMap& map) const;

  bool boundary_contribution() const;

  void eval(real block[], const AffineMap& map, unsigned int facet) const;

};

class BilinearForm::TestElement : public dolfin::FiniteElement
{
public:

  TestElement() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~TestElement()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 15;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    static unsigned int edge_reordering_0[2][3] = {{0, 1, 2}, {2, 1, 0}};
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    int alignment = cell.alignment(1, 0);
    int offset = mesh.topology().size(0);
    nodes[3] = offset + 3*cell.entities(1)[0] + edge_reordering_0[alignment][0];
    nodes[4] = offset + 3*cell.entities(1)[0] + edge_reordering_0[alignment][1];
    nodes[5] = offset + 3*cell.entities(1)[0] + edge_reordering_0[alignment][2];
    alignment = cell.alignment(1, 1);
    nodes[6] = offset + 3*cell.entities(1)[1] + edge_reordering_0[alignment][0];
    nodes[7] = offset + 3*cell.entities(1)[1] + edge_reordering_0[alignment][1];
    nodes[8] = offset + 3*cell.entities(1)[1] + edge_reordering_0[alignment][2];
    alignment = cell.alignment(1, 2);
    nodes[9] = offset + 3*cell.entities(1)[2] + edge_reordering_0[alignment][0];
    nodes[10] = offset + 3*cell.entities(1)[2] + edge_reordering_0[alignment][1];
    nodes[11] = offset + 3*cell.entities(1)[2] + edge_reordering_0[alignment][2];
    offset = offset + 3*mesh.topology().size(1);
    nodes[12] = offset + 3*cell.index() + 0;
    nodes[13] = offset + 3*cell.index() + 1;
    nodes[14] = offset + 3*cell.index() + 2;
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[3] = map(7.500000000000000e-01, 2.500000000000000e-01);
    points[4] = map(5.000000000000000e-01, 5.000000000000000e-01);
    points[5] = map(2.500000000000000e-01, 7.500000000000000e-01);
    points[6] = map(0.000000000000000e+00, 7.500000000000000e-01);
    points[7] = map(0.000000000000000e+00, 5.000000000000000e-01);
    points[8] = map(0.000000000000000e+00, 2.500000000000000e-01);
    points[9] = map(2.500000000000000e-01, 0.000000000000000e+00);
    points[10] = map(5.000000000000000e-01, 0.000000000000000e+00);
    points[11] = map(7.500000000000000e-01, 0.000000000000000e+00);
    points[12] = map(2.500000000000000e-01, 2.500000000000000e-01);
    points[13] = map(5.000000000000000e-01, 2.500000000000000e-01);
    points[14] = map(2.500000000000000e-01, 5.000000000000000e-01);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 0;
    components[4] = 0;
    components[5] = 0;
    components[6] = 0;
    components[7] = 0;
    components[8] = 0;
    components[9] = 0;
    components[10] = 0;
    components[11] = 0;
    components[12] = 0;
    components[13] = 0;
    components[14] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "triangle", 4);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class BilinearForm::TrialElement : public dolfin::FiniteElement
{
public:

  TrialElement() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~TrialElement()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 15;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    static unsigned int edge_reordering_0[2][3] = {{0, 1, 2}, {2, 1, 0}};
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    int alignment = cell.alignment(1, 0);
    int offset = mesh.topology().size(0);
    nodes[3] = offset + 3*cell.entities(1)[0] + edge_reordering_0[alignment][0];
    nodes[4] = offset + 3*cell.entities(1)[0] + edge_reordering_0[alignment][1];
    nodes[5] = offset + 3*cell.entities(1)[0] + edge_reordering_0[alignment][2];
    alignment = cell.alignment(1, 1);
    nodes[6] = offset + 3*cell.entities(1)[1] + edge_reordering_0[alignment][0];
    nodes[7] = offset + 3*cell.entities(1)[1] + edge_reordering_0[alignment][1];
    nodes[8] = offset + 3*cell.entities(1)[1] + edge_reordering_0[alignment][2];
    alignment = cell.alignment(1, 2);
    nodes[9] = offset + 3*cell.entities(1)[2] + edge_reordering_0[alignment][0];
    nodes[10] = offset + 3*cell.entities(1)[2] + edge_reordering_0[alignment][1];
    nodes[11] = offset + 3*cell.entities(1)[2] + edge_reordering_0[alignment][2];
    offset = offset + 3*mesh.topology().size(1);
    nodes[12] = offset + 3*cell.index() + 0;
    nodes[13] = offset + 3*cell.index() + 1;
    nodes[14] = offset + 3*cell.index() + 2;
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[3] = map(7.500000000000000e-01, 2.500000000000000e-01);
    points[4] = map(5.000000000000000e-01, 5.000000000000000e-01);
    points[5] = map(2.500000000000000e-01, 7.500000000000000e-01);
    points[6] = map(0.000000000000000e+00, 7.500000000000000e-01);
    points[7] = map(0.000000000000000e+00, 5.000000000000000e-01);
    points[8] = map(0.000000000000000e+00, 2.500000000000000e-01);
    points[9] = map(2.500000000000000e-01, 0.000000000000000e+00);
    points[10] = map(5.000000000000000e-01, 0.000000000000000e+00);
    points[11] = map(7.500000000000000e-01, 0.000000000000000e+00);
    points[12] = map(2.500000000000000e-01, 2.500000000000000e-01);
    points[13] = map(5.000000000000000e-01, 2.500000000000000e-01);
    points[14] = map(2.500000000000000e-01, 5.000000000000000e-01);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 0;
    components[4] = 0;
    components[5] = 0;
    components[6] = 0;
    components[7] = 0;
    components[8] = 0;
    components[9] = 0;
    components[10] = 0;
    components[11] = 0;
    components[12] = 0;
    components[13] = 0;
    components[14] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "triangle", 4);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

BilinearForm::BilinearForm() : dolfin::BilinearForm(0)
{
  // Create finite element for test space
  _test = new TestElement();

  // Create finite element for trial space
  _trial = new TrialElement();
}

// Contribution from the interior
bool BilinearForm::interior_contribution() const { return true; }

void BilinearForm::eval(real block[], const AffineMap& map) const
{
  // Compute geometry tensors
  const real G0_0_0 = map.det*(map.g00*map.g00 + map.g01*map.g01);
  const real G0_0_1 = map.det*(map.g00*map.g10 + map.g01*map.g11);
  const real G0_1_0 = map.det*(map.g10*map.g00 + map.g11*map.g01);
  const real G0_1_1 = map.det*(map.g10*map.g10 + map.g11*map.g11);

  // Compute element tensor
  block[0] = 3.730158730158727e-01*G0_0_0 + 3.730158730158726e-01*G0_0_1 + 3.730158730158726e-01*G0_1_0 + 3.730158730158724e-01*G0_1_1;
  block[1] = 5.661375661375651e-02*G0_0_0 + 5.661375661375660e-02*G0_1_0;
  block[2] = 5.661375661375660e-02*G0_0_1 + 5.661375661375667e-02*G0_1_1;
  block[3] = 4.232804232804196e-02*G0_0_0 + 4.232804232804209e-02*G0_0_1 + 4.232804232804222e-02*G0_1_0 + 4.232804232804246e-02*G0_1_1;
  block[4] = 4.232804232804215e-02*G0_0_0 + 4.232804232804235e-02*G0_0_1 + 4.232804232804202e-02*G0_1_0 + 4.232804232804217e-02*G0_1_1;
  block[5] = 4.232804232804234e-02*G0_0_0 + 4.232804232804228e-02*G0_0_1 + 4.232804232804254e-02*G0_1_0 + 4.232804232804241e-02*G0_1_1;
  block[6] = -4.232804232804232e-02*G0_0_0 - 2.455026455026451e-01*G0_0_1 - 4.232804232804253e-02*G0_1_0 - 2.455026455026453e-01*G0_1_1;
  block[7] = 4.232804232804183e-02*G0_0_0 + 4.677248677248668e-01*G0_0_1 + 4.232804232804192e-02*G0_1_0 + 4.677248677248670e-01*G0_1_1;
  block[8] = 1.269841269841270e-01*G0_0_0 - 6.518518518518511e-01*G0_0_1 + 1.269841269841264e-01*G0_1_0 - 6.518518518518511e-01*G0_1_1;
  block[9] = -6.518518518518513e-01*G0_0_0 + 1.269841269841275e-01*G0_0_1 - 6.518518518518509e-01*G0_1_0 + 1.269841269841272e-01*G0_1_1;
  block[10] = 4.677248677248676e-01*G0_0_0 + 4.232804232804227e-02*G0_0_1 + 4.677248677248674e-01*G0_1_0 + 4.232804232804253e-02*G0_1_1;
  block[11] = -2.455026455026455e-01*G0_0_0 - 4.232804232804192e-02*G0_0_1 - 2.455026455026455e-01*G0_1_0 - 4.232804232804228e-02*G0_1_1;
  block[12] = -8.465608465608507e-02*G0_0_0 - 8.465608465608580e-02*G0_0_1 - 8.465608465608424e-02*G0_1_0 - 8.465608465608557e-02*G0_1_1;
  block[13] = -8.465608465608386e-02*G0_0_0 - 8.465608465608485e-02*G0_0_1 - 8.465608465608443e-02*G0_1_0 - 8.465608465608496e-02*G0_1_1;
  block[14] = -8.465608465608399e-02*G0_0_0 - 8.465608465608365e-02*G0_0_1 - 8.465608465608396e-02*G0_1_0 - 8.465608465608379e-02*G0_1_1;
  block[15] = 5.661375661375651e-02*G0_0_0 + 5.661375661375659e-02*G0_0_1;
  block[16] = 3.730158730158725e-01*G0_0_0;
  block[17] = -5.661375661375655e-02*G0_0_1;
  block[18] = 1.269841269841267e-01*G0_0_0 + 7.788359788359775e-01*G0_0_1;
  block[19] = 4.232804232804236e-02*G0_0_0 - 4.253968253968249e-01*G0_0_1;
  block[20] = -4.232804232804221e-02*G0_0_0 + 2.031746031746030e-01*G0_0_1;
  block[21] = 4.232804232804223e-02*G0_0_0;
  block[22] = 4.232804232804232e-02*G0_0_0;
  block[23] = 4.232804232804251e-02*G0_0_0;
  block[24] = -2.455026455026452e-01*G0_0_0 - 2.031746031746026e-01*G0_0_1;
  block[25] = 4.677248677248670e-01*G0_0_0 + 4.253968253968240e-01*G0_0_1;
  block[26] = -6.518518518518509e-01*G0_0_0 - 7.788359788359775e-01*G0_0_1;
  block[27] = -8.465608465608528e-02*G0_0_0;
  block[28] = -8.465608465608380e-02*G0_0_0;
  block[29] = -8.465608465608467e-02*G0_0_0;
  block[30] = 5.661375661375660e-02*G0_1_0 + 5.661375661375667e-02*G0_1_1;
  block[31] = -5.661375661375655e-02*G0_1_0;
  block[32] = 3.730158730158727e-01*G0_1_1;
  block[33] = 2.031746031746023e-01*G0_1_0 - 4.232804232804276e-02*G0_1_1;
  block[34] = -4.253968253968250e-01*G0_1_0 + 4.232804232804201e-02*G0_1_1;
  block[35] = 7.788359788359783e-01*G0_1_0 + 1.269841269841268e-01*G0_1_1;
  block[36] = -7.788359788359781e-01*G0_1_0 - 6.518518518518512e-01*G0_1_1;
  block[37] = 4.253968253968243e-01*G0_1_0 + 4.677248677248667e-01*G0_1_1;
  block[38] = -2.031746031746025e-01*G0_1_0 - 2.455026455026452e-01*G0_1_1;
  block[39] = 4.232804232804281e-02*G0_1_1;
  block[40] = 4.232804232804256e-02*G0_1_1;
  block[41] = 4.232804232804263e-02*G0_1_1;
  block[42] = -8.465608465608571e-02*G0_1_1;
  block[43] = -8.465608465608472e-02*G0_1_1;
  block[44] = -8.465608465608364e-02*G0_1_1;
  block[45] = 4.232804232804199e-02*G0_0_0 + 4.232804232804222e-02*G0_0_1 + 4.232804232804209e-02*G0_1_0 + 4.232804232804245e-02*G0_1_1;
  block[46] = 1.269841269841266e-01*G0_0_0 + 7.788359788359775e-01*G0_1_0;
  block[47] = 2.031746031746023e-01*G0_0_1 - 4.232804232804276e-02*G0_1_1;
  block[48] = 1.828571428571425e+00*G0_0_0 + 1.049735449735448e+00*G0_0_1 + 1.049735449735447e+00*G0_1_0 + 2.099470899470896e+00*G0_1_1;
  block[49] = -6.603174603174592e-01*G0_0_0 + 8.211640211640183e-01*G0_0_1 - 2.962962962962954e-01*G0_1_0 - 7.619047619047618e-01*G0_1_1;
  block[50] = 3.386243386243369e-01*G0_0_0 - 4.402116402116398e-01*G0_0_1 + 1.015873015873006e-01*G0_1_0 + 3.386243386243382e-01*G0_1_1;
  block[51] = -3.386243386243370e-01*G0_0_0 - 1.015873015873005e-01*G0_0_1 - 1.015873015873006e-01*G0_1_0;
  block[52] = -1.523809523809537e-01*G0_0_0 - 4.232804232804296e-02*G0_0_1 - 4.232804232804306e-02*G0_1_0;
  block[53] = -2.031746031746022e-01*G0_0_0 - 1.015873015873016e-01*G0_0_1 - 1.015873015873008e-01*G0_1_0;
  block[54] = -1.354497354497341e-01*G0_0_0 - 2.370370370370349e-01*G0_0_1 - 2.370370370370361e-01*G0_1_0 - 3.386243386243368e-01*G0_1_1;
  block[55] = 1.015873015872998e-01*G0_0_0 + 4.656084656084633e-01*G0_0_1 + 4.656084656084635e-01*G0_1_0 + 7.619047619047578e-01*G0_1_1;
  block[56] = -1.354497354497343e-01*G0_0_0 - 1.049735449735448e+00*G0_0_1 - 1.049735449735447e+00*G0_1_0 - 2.099470899470896e+00*G0_1_1;
  block[57] = 8.126984126984103e-01*G0_0_0 + 3.386243386243353e-01*G0_0_1 + 3.386243386243362e-01*G0_1_0;
  block[58] = -2.438095238095233e+00*G0_0_0 - 1.286772486772482e+00*G0_0_1 - 1.286772486772483e+00*G0_1_0;
  block[59] = 8.126984126984136e-01*G0_0_0 + 3.386243386243404e-01*G0_0_1 + 3.386243386243388e-01*G0_1_0;
  block[60] = 4.232804232804215e-02*G0_0_0 + 4.232804232804201e-02*G0_0_1 + 4.232804232804235e-02*G0_1_0 + 4.232804232804218e-02*G0_1_1;
  block[61] = 4.232804232804236e-02*G0_0_0 - 4.253968253968249e-01*G0_1_0;
  block[62] = -4.253968253968249e-01*G0_0_1 + 4.232804232804201e-02*G0_1_1;
  block[63] = -6.603174603174592e-01*G0_0_0 - 2.962962962962954e-01*G0_0_1 + 8.211640211640183e-01*G0_1_0 - 7.619047619047618e-01*G0_1_1;
  block[64] = 2.450793650793647e+00*G0_0_0 + 9.714285714285698e-01*G0_0_1 + 9.714285714285698e-01*G0_1_0 + 2.450793650793646e+00*G0_1_1;
  block[65] = -7.619047619047601e-01*G0_0_0 + 8.211640211640211e-01*G0_0_1 - 2.962962962962964e-01*G0_1_0 - 6.603174603174594e-01*G0_1_1;
  block[66] = 7.619047619047602e-01*G0_0_0 + 2.962962962962966e-01*G0_0_1 + 2.962962962962966e-01*G0_1_0 - 6.772486772486688e-02*G0_1_1;
  block[67] = 3.936507936507926e-01*G0_0_0 + 1.968253968253962e-01*G0_0_1 + 1.968253968253956e-01*G0_1_0 + 5.079365079365063e-02*G0_1_1;
  block[68] = -1.523809523809527e-01*G0_0_0 - 1.100529100529096e-01*G0_0_1 - 1.100529100529097e-01*G0_1_0 - 6.772486772486741e-02*G0_1_1;
  block[69] = -6.772486772486769e-02*G0_0_0 - 1.100529100529111e-01*G0_0_1 - 1.100529100529095e-01*G0_1_0 - 1.523809523809514e-01*G0_1_1;
  block[70] = 5.079365079365075e-02*G0_0_0 + 1.968253968253969e-01*G0_0_1 + 1.968253968253962e-01*G0_1_0 + 3.936507936507937e-01*G0_1_1;
  block[71] = -6.772486772486780e-02*G0_0_0 + 2.962962962962954e-01*G0_0_1 + 2.962962962962959e-01*G0_1_0 + 7.619047619047618e-01*G0_1_1;
  block[72] = 4.063492063492080e-01*G0_0_0 + 4.571428571428590e-01*G0_0_1 + 4.571428571428566e-01*G0_1_0 + 4.063492063492045e-01*G0_1_1;
  block[73] = 4.063492063492046e-01*G0_0_0 - 1.168253968253967e+00*G0_0_1 - 1.168253968253965e+00*G0_1_0 - 2.844444444444441e+00*G0_1_1;
  block[74] = -2.844444444444440e+00*G0_0_0 - 1.168253968253969e+00*G0_0_1 - 1.168253968253965e+00*G0_1_0 + 4.063492063492065e-01*G0_1_1;
  block[75] = 4.232804232804234e-02*G0_0_0 + 4.232804232804254e-02*G0_0_1 + 4.232804232804227e-02*G0_1_0 + 4.232804232804241e-02*G0_1_1;
  block[76] = -4.232804232804221e-02*G0_0_0 + 2.031746031746030e-01*G0_1_0;
  block[77] = 7.788359788359783e-01*G0_0_1 + 1.269841269841268e-01*G0_1_1;
  block[78] = 3.386243386243369e-01*G0_0_0 + 1.015873015873006e-01*G0_0_1 - 4.402116402116398e-01*G0_1_0 + 3.386243386243382e-01*G0_1_1;
  block[79] = -7.619047619047600e-01*G0_0_0 - 2.962962962962964e-01*G0_0_1 + 8.211640211640211e-01*G0_1_0 - 6.603174603174593e-01*G0_1_1;
  block[80] = 2.099470899470898e+00*G0_0_0 + 1.049735449735449e+00*G0_0_1 + 1.049735449735449e+00*G0_1_0 + 1.828571428571428e+00*G0_1_1;
  block[81] = -2.099470899470898e+00*G0_0_0 - 1.049735449735449e+00*G0_0_1 - 1.049735449735449e+00*G0_1_0 - 1.354497354497352e-01*G0_1_1;
  block[82] = 7.619047619047604e-01*G0_0_0 + 4.656084656084638e-01*G0_0_1 + 4.656084656084646e-01*G0_1_0 + 1.015873015873004e-01*G0_1_1;
  block[83] = -3.386243386243372e-01*G0_0_0 - 2.370370370370367e-01*G0_0_1 - 2.370370370370362e-01*G0_1_0 - 1.354497354497353e-01*G0_1_1;
  block[84] = -1.015873015873008e-01*G0_0_1 - 1.015873015873015e-01*G0_1_0 - 2.031746031746032e-01*G0_1_1;
  block[85] = -4.232804232804228e-02*G0_0_1 - 4.232804232804237e-02*G0_1_0 - 1.523809523809526e-01*G0_1_1;
  block[86] = -1.015873015873010e-01*G0_0_1 - 1.015873015873014e-01*G0_1_0 - 3.386243386243384e-01*G0_1_1;
  block[87] = 3.386243386243374e-01*G0_0_1 + 3.386243386243384e-01*G0_1_0 + 8.126984126984135e-01*G0_1_1;
  block[88] = 3.386243386243383e-01*G0_0_1 + 3.386243386243374e-01*G0_1_0 + 8.126984126984118e-01*G0_1_1;
  block[89] = -1.286772486772485e+00*G0_0_1 - 1.286772486772486e+00*G0_1_0 - 2.438095238095237e+00*G0_1_1;
  block[90] = -4.232804232804232e-02*G0_0_0 - 4.232804232804253e-02*G0_0_1 - 2.455026455026451e-01*G0_1_0 - 2.455026455026453e-01*G0_1_1;
  block[91] = 4.232804232804223e-02*G0_0_0;
  block[92] = -7.788359788359781e-01*G0_0_1 - 6.518518518518512e-01*G0_1_1;
  block[93] = -3.386243386243370e-01*G0_0_0 - 1.015873015873006e-01*G0_0_1 - 1.015873015873004e-01*G0_1_0;
  block[94] = 7.619047619047602e-01*G0_0_0 + 2.962962962962966e-01*G0_0_1 + 2.962962962962966e-01*G0_1_0 - 6.772486772486688e-02*G0_1_1;
  block[95] = -2.099470899470898e+00*G0_0_0 - 1.049735449735449e+00*G0_0_1 - 1.049735449735449e+00*G0_1_0 - 1.354497354497351e-01*G0_1_1;
  block[96] = 2.099470899470897e+00*G0_0_0 + 1.049735449735449e+00*G0_0_1 + 1.049735449735449e+00*G0_1_0 + 1.828571428571426e+00*G0_1_1;
  block[97] = -7.619047619047601e-01*G0_0_0 - 4.656084656084636e-01*G0_0_1 - 1.583068783068780e+00*G0_1_0 - 1.947089947089943e+00*G0_1_1;
  block[98] = 3.386243386243371e-01*G0_0_0 + 2.370370370370366e-01*G0_0_1 + 7.788359788359775e-01*G0_1_0 + 1.015873015873015e+00*G0_1_1;
  block[99] = 1.015873015873008e-01*G0_0_1 + 1.015873015873011e-01*G0_1_0 - 1.354497354497358e-01*G0_1_1;
  block[100] = 4.232804232804220e-02*G0_0_1 + 4.232804232804199e-02*G0_1_0 - 6.772486772486846e-02*G0_1_1;
  block[101] = 1.015873015873010e-01*G0_0_1 + 1.015873015873019e-01*G0_1_0;
  block[102] = -3.386243386243374e-01*G0_0_1 - 3.386243386243373e-01*G0_1_0 + 1.354497354497372e-01*G0_1_1;
  block[103] = -3.386243386243385e-01*G0_0_1 - 3.386243386243397e-01*G0_1_0 + 1.354497354497357e-01*G0_1_1;
  block[104] = 1.286772486772485e+00*G0_0_1 + 1.286772486772484e+00*G0_1_0 + 1.354497354497330e-01*G0_1_1;
  block[105] = 4.232804232804181e-02*G0_0_0 + 4.232804232804191e-02*G0_0_1 + 4.677248677248668e-01*G0_1_0 + 4.677248677248670e-01*G0_1_1;
  block[106] = 4.232804232804231e-02*G0_0_0;
  block[107] = 4.253968253968243e-01*G0_0_1 + 4.677248677248668e-01*G0_1_1;
  block[108] = -1.523809523809537e-01*G0_0_0 - 4.232804232804306e-02*G0_0_1 - 4.232804232804296e-02*G0_1_0;
  block[109] = 3.936507936507926e-01*G0_0_0 + 1.968253968253956e-01*G0_0_1 + 1.968253968253962e-01*G0_1_0 + 5.079365079365063e-02*G0_1_1;
  block[110] = 7.619047619047604e-01*G0_0_0 + 4.656084656084646e-01*G0_0_1 + 4.656084656084639e-01*G0_1_0 + 1.015873015873006e-01*G0_1_1;
  block[111] = -7.619047619047601e-01*G0_0_0 - 1.583068783068780e+00*G0_0_1 - 4.656084656084637e-01*G0_1_0 - 1.947089947089943e+00*G0_1_1;
  block[112] = 2.450793650793646e+00*G0_0_0 + 1.479365079365075e+00*G0_0_1 + 1.479365079365075e+00*G0_1_0 + 2.958730158730153e+00*G0_1_1;
  block[113] = -6.603174603174583e-01*G0_0_0 - 3.640211640211620e-01*G0_0_1 - 1.481481481481479e+00*G0_1_0 - 1.947089947089944e+00*G0_1_1;
  block[114] = -6.772486772486699e-02*G0_0_0 - 3.640211640211640e-01*G0_0_1 - 3.640211640211630e-01*G0_1_0 + 1.015873015873020e-01*G0_1_1;
  block[115] = 5.079365079365073e-02*G0_0_0 - 1.460317460317452e-01*G0_0_1 - 1.460317460317455e-01*G0_1_0 + 5.079365079365204e-02*G0_1_1;
  block[116] = -6.772486772486788e-02*G0_0_0 + 4.232804232804266e-02*G0_0_1 + 4.232804232804179e-02*G0_1_0;
  block[117] = 4.063492063492051e-01*G0_0_0 + 1.574603174603173e+00*G0_0_1 + 1.574603174603173e+00*G0_1_0 - 1.015873015873044e-01*G0_1_1;
  block[118] = 4.063492063492071e-01*G0_0_0 - 5.079365079365050e-02*G0_0_1 - 5.079365079365056e-02*G0_1_0 - 1.015873015873032e-01*G0_1_1;
  block[119] = -2.844444444444440e+00*G0_0_0 - 1.676190476190473e+00*G0_0_1 - 1.676190476190471e+00*G0_1_0 - 1.015873015872977e-01*G0_1_1;
  block[120] = 1.269841269841270e-01*G0_0_0 + 1.269841269841264e-01*G0_0_1 - 6.518518518518511e-01*G0_1_0 - 6.518518518518511e-01*G0_1_1;
  block[121] = 4.232804232804249e-02*G0_0_0;
  block[122] = -2.031746031746025e-01*G0_0_1 - 2.455026455026452e-01*G0_1_1;
  block[123] = -2.031746031746022e-01*G0_0_0 - 1.015873015873008e-01*G0_0_1 - 1.015873015873016e-01*G0_1_0;
  block[124] = -1.523809523809527e-01*G0_0_0 - 1.100529100529097e-01*G0_0_1 - 1.100529100529096e-01*G0_1_0 - 6.772486772486744e-02*G0_1_1;
  block[125] = -3.386243386243372e-01*G0_0_0 - 2.370370370370361e-01*G0_0_1 - 2.370370370370367e-01*G0_1_0 - 1.354497354497354e-01*G0_1_1;
  block[126] = 3.386243386243371e-01*G0_0_0 + 7.788359788359775e-01*G0_0_1 + 2.370370370370366e-01*G0_1_0 + 1.015873015873015e+00*G0_1_1;
  block[127] = -6.603174603174582e-01*G0_0_0 - 1.481481481481479e+00*G0_0_1 - 3.640211640211620e-01*G0_1_0 - 1.947089947089944e+00*G0_1_1;
  block[128] = 1.828571428571426e+00*G0_0_0 + 7.788359788359783e-01*G0_0_1 + 7.788359788359783e-01*G0_1_0 + 1.828571428571427e+00*G0_1_1;
  block[129] = -1.354497354497355e-01*G0_0_0 + 9.142857142857125e-01*G0_0_1 + 9.142857142857131e-01*G0_1_0 - 1.354497354497360e-01*G0_1_1;
  block[130] = 1.015873015873020e-01*G0_0_0 - 3.640211640211634e-01*G0_0_1 - 3.640211640211643e-01*G0_1_0 - 6.772486772486881e-02*G0_1_1;
  block[131] = -1.354497354497357e-01*G0_0_0 + 1.015873015873009e-01*G0_0_1 + 1.015873015873024e-01*G0_1_0;
  block[132] = -2.438095238095234e+00*G0_0_0 - 1.151322751322749e+00*G0_0_1 - 1.151322751322751e+00*G0_1_0 + 1.354497354497375e-01*G0_1_1;
  block[133] = 8.126984126984114e-01*G0_0_0 + 4.740740740740734e-01*G0_0_1 + 4.740740740740744e-01*G0_1_0 + 1.354497354497369e-01*G0_1_1;
  block[134] = 8.126984126984108e-01*G0_0_0 + 4.740740740740719e-01*G0_0_1 + 4.740740740740716e-01*G0_1_0 + 1.354497354497332e-01*G0_1_1;
  block[135] = -6.518518518518515e-01*G0_0_0 - 6.518518518518509e-01*G0_0_1 + 1.269841269841275e-01*G0_1_0 + 1.269841269841272e-01*G0_1_1;
  block[136] = -2.455026455026452e-01*G0_0_0 - 2.031746031746026e-01*G0_1_0;
  block[137] = 4.232804232804283e-02*G0_1_1;
  block[138] = -1.354497354497341e-01*G0_0_0 - 2.370370370370361e-01*G0_0_1 - 2.370370370370348e-01*G0_1_0 - 3.386243386243368e-01*G0_1_1;
  block[139] = -6.772486772486774e-02*G0_0_0 - 1.100529100529095e-01*G0_0_1 - 1.100529100529111e-01*G0_1_0 - 1.523809523809514e-01*G0_1_1;
  block[140] = -1.015873015873015e-01*G0_0_1 - 1.015873015873008e-01*G0_1_0 - 2.031746031746032e-01*G0_1_1;
  block[141] = 1.015873015873011e-01*G0_0_1 + 1.015873015873008e-01*G0_1_0 - 1.354497354497359e-01*G0_1_1;
  block[142] = -6.772486772486694e-02*G0_0_0 - 3.640211640211630e-01*G0_0_1 - 3.640211640211640e-01*G0_1_0 + 1.015873015873020e-01*G0_1_1;
  block[143] = -1.354497354497355e-01*G0_0_0 + 9.142857142857131e-01*G0_0_1 + 9.142857142857126e-01*G0_1_0 - 1.354497354497360e-01*G0_1_1;
  block[144] = 1.828571428571427e+00*G0_0_0 + 7.788359788359770e-01*G0_0_1 + 7.788359788359771e-01*G0_1_0 + 1.828571428571427e+00*G0_1_1;
  block[145] = -1.947089947089946e+00*G0_0_0 - 3.640211640211631e-01*G0_0_1 - 1.481481481481479e+00*G0_1_0 - 6.603174603174581e-01*G0_1_1;
  block[146] = 1.015873015873015e+00*G0_0_0 + 2.370370370370358e-01*G0_0_1 + 7.788359788359770e-01*G0_1_0 + 3.386243386243369e-01*G0_1_1;
  block[147] = 1.354497354497360e-01*G0_0_0 - 1.151322751322749e+00*G0_0_1 - 1.151322751322749e+00*G0_1_0 - 2.438095238095237e+00*G0_1_1;
  block[148] = 1.354497354497338e-01*G0_0_0 + 4.740740740740731e-01*G0_0_1 + 4.740740740740713e-01*G0_1_0 + 8.126984126984095e-01*G0_1_1;
  block[149] = 1.354497354497347e-01*G0_0_0 + 4.740740740740728e-01*G0_0_1 + 4.740740740740749e-01*G0_1_0 + 8.126984126984129e-01*G0_1_1;
  block[150] = 4.677248677248677e-01*G0_0_0 + 4.677248677248674e-01*G0_0_1 + 4.232804232804225e-02*G0_1_0 + 4.232804232804251e-02*G0_1_1;
  block[151] = 4.677248677248670e-01*G0_0_0 + 4.253968253968240e-01*G0_1_0;
  block[152] = 4.232804232804256e-02*G0_1_1;
  block[153] = 1.015873015872999e-01*G0_0_0 + 4.656084656084635e-01*G0_0_1 + 4.656084656084634e-01*G0_1_0 + 7.619047619047579e-01*G0_1_1;
  block[154] = 5.079365079365075e-02*G0_0_0 + 1.968253968253962e-01*G0_0_1 + 1.968253968253969e-01*G0_1_0 + 3.936507936507936e-01*G0_1_1;
  block[155] = -4.232804232804235e-02*G0_0_1 - 4.232804232804228e-02*G0_1_0 - 1.523809523809526e-01*G0_1_1;
  block[156] = 4.232804232804197e-02*G0_0_1 + 4.232804232804220e-02*G0_1_0 - 6.772486772486844e-02*G0_1_1;
  block[157] = 5.079365079365070e-02*G0_0_0 - 1.460317460317455e-01*G0_0_1 - 1.460317460317452e-01*G0_1_0 + 5.079365079365205e-02*G0_1_1;
  block[158] = 1.015873015873020e-01*G0_0_0 - 3.640211640211643e-01*G0_0_1 - 3.640211640211634e-01*G0_1_0 - 6.772486772486883e-02*G0_1_1;
  block[159] = -1.947089947089946e+00*G0_0_0 - 1.481481481481479e+00*G0_0_1 - 3.640211640211631e-01*G0_1_0 - 6.603174603174582e-01*G0_1_1;
  block[160] = 2.958730158730156e+00*G0_0_0 + 1.479365079365076e+00*G0_0_1 + 1.479365079365077e+00*G0_1_0 + 2.450793650793647e+00*G0_1_1;
  block[161] = -1.947089947089945e+00*G0_0_0 - 4.656084656084635e-01*G0_0_1 - 1.583068783068780e+00*G0_1_0 - 7.619047619047580e-01*G0_1_1;
  block[162] = -1.015873015873031e-01*G0_0_0 + 1.574603174603172e+00*G0_0_1 + 1.574603174603171e+00*G0_1_0 + 4.063492063492044e-01*G0_1_1;
  block[163] = -1.015873015872986e-01*G0_0_0 - 1.676190476190472e+00*G0_0_1 - 1.676190476190471e+00*G0_1_0 - 2.844444444444440e+00*G0_1_1;
  block[164] = -1.015873015873014e-01*G0_0_0 - 5.079365079365048e-02*G0_0_1 - 5.079365079365135e-02*G0_1_0 + 4.063492063492063e-01*G0_1_1;
  block[165] = -2.455026455026455e-01*G0_0_0 - 2.455026455026456e-01*G0_0_1 - 4.232804232804192e-02*G0_1_0 - 4.232804232804228e-02*G0_1_1;
  block[166] = -6.518518518518509e-01*G0_0_0 - 7.788359788359775e-01*G0_1_0;
  block[167] = 4.232804232804263e-02*G0_1_1;
  block[168] = -1.354497354497343e-01*G0_0_0 - 1.049735449735447e+00*G0_0_1 - 1.049735449735447e+00*G0_1_0 - 2.099470899470896e+00*G0_1_1;
  block[169] = -6.772486772486778e-02*G0_0_0 + 2.962962962962959e-01*G0_0_1 + 2.962962962962954e-01*G0_1_0 + 7.619047619047618e-01*G0_1_1;
  block[170] = -1.015873015873014e-01*G0_0_1 - 1.015873015873010e-01*G0_1_0 - 3.386243386243384e-01*G0_1_1;
  block[171] = 1.015873015873019e-01*G0_0_1 + 1.015873015873010e-01*G0_1_0;
  block[172] = -6.772486772486790e-02*G0_0_0 + 4.232804232804178e-02*G0_0_1 + 4.232804232804264e-02*G0_1_0;
  block[173] = -1.354497354497357e-01*G0_0_0 + 1.015873015873024e-01*G0_0_1 + 1.015873015873009e-01*G0_1_0;
  block[174] = 1.015873015873015e+00*G0_0_0 + 7.788359788359770e-01*G0_0_1 + 2.370370370370357e-01*G0_1_0 + 3.386243386243369e-01*G0_1_1;
  block[175] = -1.947089947089945e+00*G0_0_0 - 1.583068783068780e+00*G0_0_1 - 4.656084656084634e-01*G0_1_0 - 7.619047619047578e-01*G0_1_1;
  block[176] = 1.828571428571426e+00*G0_0_0 + 1.049735449735447e+00*G0_0_1 + 1.049735449735447e+00*G0_1_0 + 2.099470899470896e+00*G0_1_1;
  block[177] = 1.354497354497374e-01*G0_0_0 - 3.386243386243371e-01*G0_0_1 - 3.386243386243362e-01*G0_1_0;
  block[178] = 1.354497354497329e-01*G0_0_0 + 1.286772486772484e+00*G0_0_1 + 1.286772486772483e+00*G0_1_0;
  block[179] = 1.354497354497357e-01*G0_0_0 - 3.386243386243386e-01*G0_0_1 - 3.386243386243384e-01*G0_1_0;
  block[180] = -8.465608465608507e-02*G0_0_0 - 8.465608465608429e-02*G0_0_1 - 8.465608465608573e-02*G0_1_0 - 8.465608465608558e-02*G0_1_1;
  block[181] = -8.465608465608533e-02*G0_0_0;
  block[182] = -8.465608465608566e-02*G0_1_1;
  block[183] = 8.126984126984103e-01*G0_0_0 + 3.386243386243362e-01*G0_0_1 + 3.386243386243353e-01*G0_1_0;
  block[184] = 4.063492063492080e-01*G0_0_0 + 4.571428571428564e-01*G0_0_1 + 4.571428571428591e-01*G0_1_0 + 4.063492063492046e-01*G0_1_1;
  block[185] = 3.386243386243384e-01*G0_0_1 + 3.386243386243374e-01*G0_1_0 + 8.126984126984135e-01*G0_1_1;
  block[186] = -3.386243386243373e-01*G0_0_1 - 3.386243386243374e-01*G0_1_0 + 1.354497354497372e-01*G0_1_1;
  block[187] = 4.063492063492049e-01*G0_0_0 + 1.574603174603173e+00*G0_0_1 + 1.574603174603173e+00*G0_1_0 - 1.015873015873044e-01*G0_1_1;
  block[188] = -2.438095238095234e+00*G0_0_0 - 1.151322751322751e+00*G0_0_1 - 1.151322751322749e+00*G0_1_0 + 1.354497354497376e-01*G0_1_1;
  block[189] = 1.354497354497360e-01*G0_0_0 - 1.151322751322749e+00*G0_0_1 - 1.151322751322749e+00*G0_1_0 - 2.438095238095237e+00*G0_1_1;
  block[190] = -1.015873015873032e-01*G0_0_0 + 1.574603174603171e+00*G0_0_1 + 1.574603174603172e+00*G0_1_0 + 4.063492063492043e-01*G0_1_1;
  block[191] = 1.354497354497372e-01*G0_0_0 - 3.386243386243362e-01*G0_0_1 - 3.386243386243371e-01*G0_1_0;
  block[192] = 5.688888888888883e+00*G0_0_0 + 2.844444444444441e+00*G0_0_1 + 2.844444444444441e+00*G0_1_0 + 5.688888888888887e+00*G0_1_1;
  block[193] = -4.063492063492058e+00*G0_0_0 - 2.031746031746028e+00*G0_0_1 - 2.031746031746027e+00*G0_1_0 - 8.126984126984091e-01*G0_1_1;
  block[194] = -8.126984126984119e-01*G0_0_0 - 2.031746031746029e+00*G0_0_1 - 2.031746031746032e+00*G0_1_0 - 4.063492063492063e+00*G0_1_1;
  block[195] = -8.465608465608386e-02*G0_0_0 - 8.465608465608440e-02*G0_0_1 - 8.465608465608486e-02*G0_1_0 - 8.465608465608496e-02*G0_1_1;
  block[196] = -8.465608465608386e-02*G0_0_0;
  block[197] = -8.465608465608472e-02*G0_1_1;
  block[198] = -2.438095238095233e+00*G0_0_0 - 1.286772486772483e+00*G0_0_1 - 1.286772486772482e+00*G0_1_0;
  block[199] = 4.063492063492046e-01*G0_0_0 - 1.168253968253965e+00*G0_0_1 - 1.168253968253967e+00*G0_1_0 - 2.844444444444441e+00*G0_1_1;
  block[200] = 3.386243386243373e-01*G0_0_1 + 3.386243386243383e-01*G0_1_0 + 8.126984126984118e-01*G0_1_1;
  block[201] = -3.386243386243396e-01*G0_0_1 - 3.386243386243385e-01*G0_1_0 + 1.354497354497356e-01*G0_1_1;
  block[202] = 4.063492063492072e-01*G0_0_0 - 5.079365079365056e-02*G0_0_1 - 5.079365079365050e-02*G0_1_0 - 1.015873015873032e-01*G0_1_1;
  block[203] = 8.126984126984114e-01*G0_0_0 + 4.740740740740743e-01*G0_0_1 + 4.740740740740734e-01*G0_1_0 + 1.354497354497369e-01*G0_1_1;
  block[204] = 1.354497354497338e-01*G0_0_0 + 4.740740740740713e-01*G0_0_1 + 4.740740740740732e-01*G0_1_0 + 8.126984126984095e-01*G0_1_1;
  block[205] = -1.015873015872986e-01*G0_0_0 - 1.676190476190471e+00*G0_0_1 - 1.676190476190472e+00*G0_1_0 - 2.844444444444440e+00*G0_1_1;
  block[206] = 1.354497354497329e-01*G0_0_0 + 1.286772486772483e+00*G0_0_1 + 1.286772486772484e+00*G0_1_0;
  block[207] = -4.063492063492058e+00*G0_0_0 - 2.031746031746027e+00*G0_0_1 - 2.031746031746028e+00*G0_1_0 - 8.126984126984091e-01*G0_1_1;
  block[208] = 5.688888888888879e+00*G0_0_0 + 2.844444444444437e+00*G0_0_1 + 2.844444444444437e+00*G0_1_0 + 5.688888888888880e+00*G0_1_1;
  block[209] = -8.126984126984127e-01*G0_0_0 + 1.219047619047617e+00*G0_0_1 + 1.219047619047617e+00*G0_1_0 - 8.126984126984121e-01*G0_1_1;
  block[210] = -8.465608465608399e-02*G0_0_0 - 8.465608465608396e-02*G0_0_1 - 8.465608465608364e-02*G0_1_0 - 8.465608465608379e-02*G0_1_1;
  block[211] = -8.465608465608467e-02*G0_0_0;
  block[212] = -8.465608465608369e-02*G0_1_1;
  block[213] = 8.126984126984134e-01*G0_0_0 + 3.386243386243388e-01*G0_0_1 + 3.386243386243404e-01*G0_1_0;
  block[214] = -2.844444444444440e+00*G0_0_0 - 1.168253968253966e+00*G0_0_1 - 1.168253968253969e+00*G0_1_0 + 4.063492063492065e-01*G0_1_1;
  block[215] = -1.286772486772486e+00*G0_0_1 - 1.286772486772485e+00*G0_1_0 - 2.438095238095237e+00*G0_1_1;
  block[216] = 1.286772486772484e+00*G0_0_1 + 1.286772486772485e+00*G0_1_0 + 1.354497354497330e-01*G0_1_1;
  block[217] = -2.844444444444440e+00*G0_0_0 - 1.676190476190471e+00*G0_0_1 - 1.676190476190473e+00*G0_1_0 - 1.015873015872977e-01*G0_1_1;
  block[218] = 8.126984126984108e-01*G0_0_0 + 4.740740740740715e-01*G0_0_1 + 4.740740740740719e-01*G0_1_0 + 1.354497354497332e-01*G0_1_1;
  block[219] = 1.354497354497347e-01*G0_0_0 + 4.740740740740749e-01*G0_0_1 + 4.740740740740728e-01*G0_1_0 + 8.126984126984129e-01*G0_1_1;
  block[220] = -1.015873015873015e-01*G0_0_0 - 5.079365079365142e-02*G0_0_1 - 5.079365079365037e-02*G0_1_0 + 4.063492063492063e-01*G0_1_1;
  block[221] = 1.354497354497356e-01*G0_0_0 - 3.386243386243384e-01*G0_0_1 - 3.386243386243387e-01*G0_1_0;
  block[222] = -8.126984126984119e-01*G0_0_0 - 2.031746031746032e+00*G0_0_1 - 2.031746031746029e+00*G0_1_0 - 4.063492063492063e+00*G0_1_1;
  block[223] = -8.126984126984128e-01*G0_0_0 + 1.219047619047617e+00*G0_0_1 + 1.219047619047617e+00*G0_1_0 - 8.126984126984124e-01*G0_1_1;
  block[224] = 5.688888888888880e+00*G0_0_0 + 2.844444444444443e+00*G0_0_1 + 2.844444444444443e+00*G0_1_0 + 5.688888888888886e+00*G0_1_1;
}

// No contribution from the boundary
bool BilinearForm::boundary_contribution() const { return false; }

void BilinearForm::eval(real block[], const AffineMap& map, unsigned int facet) const {}

/// This class contains the form to be evaluated, including
/// contributions from the interior and boundary of the domain.

class LinearForm : public dolfin::LinearForm
{
public:

  class TestElement;

  class FunctionElement_0;

  LinearForm(Function& w0);
  

  bool interior_contribution() const;

  void eval(real block[], const AffineMap& map) const;

  bool boundary_contribution() const;

  void eval(real block[], const AffineMap& map, unsigned int facet) const;

};

class LinearForm::TestElement : public dolfin::FiniteElement
{
public:

  TestElement() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~TestElement()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 15;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    static unsigned int edge_reordering_0[2][3] = {{0, 1, 2}, {2, 1, 0}};
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    int alignment = cell.alignment(1, 0);
    int offset = mesh.topology().size(0);
    nodes[3] = offset + 3*cell.entities(1)[0] + edge_reordering_0[alignment][0];
    nodes[4] = offset + 3*cell.entities(1)[0] + edge_reordering_0[alignment][1];
    nodes[5] = offset + 3*cell.entities(1)[0] + edge_reordering_0[alignment][2];
    alignment = cell.alignment(1, 1);
    nodes[6] = offset + 3*cell.entities(1)[1] + edge_reordering_0[alignment][0];
    nodes[7] = offset + 3*cell.entities(1)[1] + edge_reordering_0[alignment][1];
    nodes[8] = offset + 3*cell.entities(1)[1] + edge_reordering_0[alignment][2];
    alignment = cell.alignment(1, 2);
    nodes[9] = offset + 3*cell.entities(1)[2] + edge_reordering_0[alignment][0];
    nodes[10] = offset + 3*cell.entities(1)[2] + edge_reordering_0[alignment][1];
    nodes[11] = offset + 3*cell.entities(1)[2] + edge_reordering_0[alignment][2];
    offset = offset + 3*mesh.topology().size(1);
    nodes[12] = offset + 3*cell.index() + 0;
    nodes[13] = offset + 3*cell.index() + 1;
    nodes[14] = offset + 3*cell.index() + 2;
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[3] = map(7.500000000000000e-01, 2.500000000000000e-01);
    points[4] = map(5.000000000000000e-01, 5.000000000000000e-01);
    points[5] = map(2.500000000000000e-01, 7.500000000000000e-01);
    points[6] = map(0.000000000000000e+00, 7.500000000000000e-01);
    points[7] = map(0.000000000000000e+00, 5.000000000000000e-01);
    points[8] = map(0.000000000000000e+00, 2.500000000000000e-01);
    points[9] = map(2.500000000000000e-01, 0.000000000000000e+00);
    points[10] = map(5.000000000000000e-01, 0.000000000000000e+00);
    points[11] = map(7.500000000000000e-01, 0.000000000000000e+00);
    points[12] = map(2.500000000000000e-01, 2.500000000000000e-01);
    points[13] = map(5.000000000000000e-01, 2.500000000000000e-01);
    points[14] = map(2.500000000000000e-01, 5.000000000000000e-01);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 0;
    components[4] = 0;
    components[5] = 0;
    components[6] = 0;
    components[7] = 0;
    components[8] = 0;
    components[9] = 0;
    components[10] = 0;
    components[11] = 0;
    components[12] = 0;
    components[13] = 0;
    components[14] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "triangle", 4);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class LinearForm::FunctionElement_0 : public dolfin::FiniteElement
{
public:

  FunctionElement_0() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~FunctionElement_0()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 15;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    static unsigned int edge_reordering_0[2][3] = {{0, 1, 2}, {2, 1, 0}};
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    int alignment = cell.alignment(1, 0);
    int offset = mesh.topology().size(0);
    nodes[3] = offset + 3*cell.entities(1)[0] + edge_reordering_0[alignment][0];
    nodes[4] = offset + 3*cell.entities(1)[0] + edge_reordering_0[alignment][1];
    nodes[5] = offset + 3*cell.entities(1)[0] + edge_reordering_0[alignment][2];
    alignment = cell.alignment(1, 1);
    nodes[6] = offset + 3*cell.entities(1)[1] + edge_reordering_0[alignment][0];
    nodes[7] = offset + 3*cell.entities(1)[1] + edge_reordering_0[alignment][1];
    nodes[8] = offset + 3*cell.entities(1)[1] + edge_reordering_0[alignment][2];
    alignment = cell.alignment(1, 2);
    nodes[9] = offset + 3*cell.entities(1)[2] + edge_reordering_0[alignment][0];
    nodes[10] = offset + 3*cell.entities(1)[2] + edge_reordering_0[alignment][1];
    nodes[11] = offset + 3*cell.entities(1)[2] + edge_reordering_0[alignment][2];
    offset = offset + 3*mesh.topology().size(1);
    nodes[12] = offset + 3*cell.index() + 0;
    nodes[13] = offset + 3*cell.index() + 1;
    nodes[14] = offset + 3*cell.index() + 2;
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[3] = map(7.500000000000000e-01, 2.500000000000000e-01);
    points[4] = map(5.000000000000000e-01, 5.000000000000000e-01);
    points[5] = map(2.500000000000000e-01, 7.500000000000000e-01);
    points[6] = map(0.000000000000000e+00, 7.500000000000000e-01);
    points[7] = map(0.000000000000000e+00, 5.000000000000000e-01);
    points[8] = map(0.000000000000000e+00, 2.500000000000000e-01);
    points[9] = map(2.500000000000000e-01, 0.000000000000000e+00);
    points[10] = map(5.000000000000000e-01, 0.000000000000000e+00);
    points[11] = map(7.500000000000000e-01, 0.000000000000000e+00);
    points[12] = map(2.500000000000000e-01, 2.500000000000000e-01);
    points[13] = map(5.000000000000000e-01, 2.500000000000000e-01);
    points[14] = map(2.500000000000000e-01, 5.000000000000000e-01);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 0;
    components[4] = 0;
    components[5] = 0;
    components[6] = 0;
    components[7] = 0;
    components[8] = 0;
    components[9] = 0;
    components[10] = 0;
    components[11] = 0;
    components[12] = 0;
    components[13] = 0;
    components[14] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "triangle", 4);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

LinearForm::LinearForm(Function& w0) : dolfin::LinearForm(1)
{
  // Create finite element for test space
  _test = new TestElement();

  // Add functions
  initFunction(0, w0, new FunctionElement_0());
}

// Contribution from the interior
bool LinearForm::interior_contribution() const { return true; }

void LinearForm::eval(real block[], const AffineMap& map) const
{
  // Compute coefficients
  const real c0_0 = c[0][0];
  const real c0_1 = c[0][1];
  const real c0_2 = c[0][2];
  const real c0_3 = c[0][3];
  const real c0_4 = c[0][4];
  const real c0_5 = c[0][5];
  const real c0_6 = c[0][6];
  const real c0_7 = c[0][7];
  const real c0_8 = c[0][8];
  const real c0_9 = c[0][9];
  const real c0_10 = c[0][10];
  const real c0_11 = c[0][11];
  const real c0_12 = c[0][12];
  const real c0_13 = c[0][13];
  const real c0_14 = c[0][14];

  // Compute geometry tensors
  const real G0_0 = map.det*c0_0;
  const real G0_1 = map.det*c0_1;
  const real G0_2 = map.det*c0_2;
  const real G0_3 = map.det*c0_3;
  const real G0_4 = map.det*c0_4;
  const real G0_5 = map.det*c0_5;
  const real G0_6 = map.det*c0_6;
  const real G0_7 = map.det*c0_7;
  const real G0_8 = map.det*c0_8;
  const real G0_9 = map.det*c0_9;
  const real G0_10 = map.det*c0_10;
  const real G0_11 = map.det*c0_11;
  const real G0_12 = map.det*c0_12;
  const real G0_13 = map.det*c0_13;
  const real G0_14 = map.det*c0_14;

  // Compute element tensor
  block[0] = 2.557319223985879e-03*G0_0 - 2.380952380952367e-04*G0_1 - 2.380952380952367e-04*G0_2 - 9.876543209876513e-04*G0_3 - 1.058201058201041e-04*G0_4 - 9.876543209876513e-04*G0_5 - 7.054673721340329e-04*G0_7 + 1.410934744268066e-03*G0_8 + 1.410934744268068e-03*G0_9 - 7.054673721340345e-04*G0_10 + 1.410934744268062e-03*G0_12 - 1.410934744268069e-03*G0_13 - 1.410934744268073e-03*G0_14;
  block[1] = -2.380952380952367e-04*G0_0 + 2.557319223985876e-03*G0_1 - 2.380952380952364e-04*G0_2 + 1.410934744268064e-03*G0_3 - 7.054673721340293e-04*G0_4 - 9.876543209876507e-04*G0_6 - 1.058201058201054e-04*G0_7 - 9.876543209876511e-04*G0_8 - 7.054673721340340e-04*G0_10 + 1.410934744268066e-03*G0_11 - 1.410934744268076e-03*G0_12 + 1.410934744268066e-03*G0_13 - 1.410934744268072e-03*G0_14;
  block[2] = -2.380952380952366e-04*G0_0 - 2.380952380952364e-04*G0_1 + 2.557319223985878e-03*G0_2 - 7.054673721340343e-04*G0_4 + 1.410934744268068e-03*G0_5 + 1.410934744268068e-03*G0_6 - 7.054673721340334e-04*G0_7 - 9.876543209876483e-04*G0_9 - 1.058201058201056e-04*G0_10 - 9.876543209876487e-04*G0_11 - 1.410934744268071e-03*G0_12 - 1.410934744268071e-03*G0_13 + 1.410934744268068e-03*G0_14;
  block[3] = -9.876543209876513e-04*G0_0 + 1.410934744268064e-03*G0_1 + 2.257495590828913e-02*G0_3 - 1.128747795414456e-02*G0_4 + 6.772486772486739e-03*G0_5 + 4.514991181657825e-03*G0_6 + 5.643738977072474e-04*G0_7 + 2.257495590828912e-03*G0_8 + 4.514991181657824e-03*G0_9 - 8.465608465608426e-03*G0_10 + 1.128747795414456e-02*G0_11 - 2.257495590828916e-03*G0_12 + 1.128747795414457e-02*G0_13 + 2.257495590828919e-03*G0_14;
  block[4] = -1.058201058201042e-04*G0_0 - 7.054673721340295e-04*G0_1 - 7.054673721340343e-04*G0_2 - 1.128747795414456e-02*G0_3 + 2.793650793650778e-02*G0_4 - 1.128747795414456e-02*G0_5 - 8.465608465608418e-03*G0_6 + 4.232804232804068e-04*G0_7 + 5.643738977072389e-04*G0_8 + 5.643738977072396e-04*G0_9 + 4.232804232804163e-04*G0_10 - 8.465608465608414e-03*G0_11 - 6.772486772486735e-03*G0_12 + 3.386243386243383e-03*G0_13 + 3.386243386243379e-03*G0_14;
  block[5] = -9.876543209876513e-04*G0_0 + 1.410934744268068e-03*G0_2 + 6.772486772486738e-03*G0_3 - 1.128747795414456e-02*G0_4 + 2.257495590828913e-02*G0_5 + 1.128747795414456e-02*G0_6 - 8.465608465608409e-03*G0_7 + 4.514991181657822e-03*G0_8 + 2.257495590828906e-03*G0_9 + 5.643738977072293e-04*G0_10 + 4.514991181657822e-03*G0_11 - 2.257495590828928e-03*G0_12 + 2.257495590828915e-03*G0_13 + 1.128747795414457e-02*G0_14;
  block[6] = -9.876543209876507e-04*G0_1 + 1.410934744268068e-03*G0_2 + 4.514991181657825e-03*G0_3 - 8.465608465608418e-03*G0_4 + 1.128747795414456e-02*G0_5 + 2.257495590828913e-02*G0_6 - 1.128747795414455e-02*G0_7 + 6.772486772486734e-03*G0_8 + 4.514991181657822e-03*G0_9 + 5.643738977072281e-04*G0_10 + 2.257495590828909e-03*G0_11 + 2.257495590828898e-03*G0_12 - 2.257495590828906e-03*G0_13 + 1.128747795414457e-02*G0_14;
  block[7] = -7.054673721340328e-04*G0_0 - 1.058201058201054e-04*G0_1 - 7.054673721340334e-04*G0_2 + 5.643738977072475e-04*G0_3 + 4.232804232804062e-04*G0_4 - 8.465608465608407e-03*G0_5 - 1.128747795414455e-02*G0_6 + 2.793650793650779e-02*G0_7 - 1.128747795414455e-02*G0_8 - 8.465608465608402e-03*G0_9 + 4.232804232804167e-04*G0_10 + 5.643738977072468e-04*G0_11 + 3.386243386243405e-03*G0_12 - 6.772486772486716e-03*G0_13 + 3.386243386243392e-03*G0_14;
  block[8] = 1.410934744268066e-03*G0_0 - 9.876543209876511e-04*G0_1 + 2.257495590828912e-03*G0_3 + 5.643738977072390e-04*G0_4 + 4.514991181657822e-03*G0_5 + 6.772486772486733e-03*G0_6 - 1.128747795414455e-02*G0_7 + 2.257495590828915e-02*G0_8 + 1.128747795414457e-02*G0_9 - 8.465608465608431e-03*G0_10 + 4.514991181657830e-03*G0_11 + 1.128747795414459e-02*G0_12 - 2.257495590828913e-03*G0_13 + 2.257495590828918e-03*G0_14;
  block[9] = 1.410934744268068e-03*G0_0 - 9.876543209876483e-04*G0_2 + 4.514991181657824e-03*G0_3 + 5.643738977072393e-04*G0_4 + 2.257495590828906e-03*G0_5 + 4.514991181657822e-03*G0_6 - 8.465608465608404e-03*G0_7 + 1.128747795414457e-02*G0_8 + 2.257495590828913e-02*G0_9 - 1.128747795414457e-02*G0_10 + 6.772486772486735e-03*G0_11 + 1.128747795414456e-02*G0_12 + 2.257495590828901e-03*G0_13 - 2.257495590828900e-03*G0_14;
  block[10] = -7.054673721340341e-04*G0_0 - 7.054673721340338e-04*G0_1 - 1.058201058201056e-04*G0_2 - 8.465608465608425e-03*G0_3 + 4.232804232804158e-04*G0_4 + 5.643738977072296e-04*G0_5 + 5.643738977072278e-04*G0_6 + 4.232804232804172e-04*G0_7 - 8.465608465608431e-03*G0_8 - 1.128747795414457e-02*G0_9 + 2.793650793650780e-02*G0_10 - 1.128747795414457e-02*G0_11 + 3.386243386243356e-03*G0_12 + 3.386243386243373e-03*G0_13 - 6.772486772486737e-03*G0_14;
  block[11] = 1.410934744268066e-03*G0_1 - 9.876543209876485e-04*G0_2 + 1.128747795414456e-02*G0_3 - 8.465608465608416e-03*G0_4 + 4.514991181657822e-03*G0_5 + 2.257495590828908e-03*G0_6 + 5.643738977072467e-04*G0_7 + 4.514991181657830e-03*G0_8 + 6.772486772486735e-03*G0_9 - 1.128747795414457e-02*G0_10 + 2.257495590828913e-02*G0_11 + 2.257495590828924e-03*G0_12 + 1.128747795414456e-02*G0_13 - 2.257495590828904e-03*G0_14;
  block[12] = 1.410934744268062e-03*G0_0 - 1.410934744268077e-03*G0_1 - 1.410934744268071e-03*G0_2 - 2.257495590828917e-03*G0_3 - 6.772486772486736e-03*G0_4 - 2.257495590828927e-03*G0_5 + 2.257495590828899e-03*G0_6 + 3.386243386243405e-03*G0_7 + 1.128747795414459e-02*G0_8 + 1.128747795414456e-02*G0_9 + 3.386243386243354e-03*G0_10 + 2.257495590828924e-03*G0_11 + 9.481481481481445e-02*G0_12 - 1.354497354497349e-02*G0_13 - 1.354497354497348e-02*G0_14;
  block[13] = -1.410934744268069e-03*G0_0 + 1.410934744268066e-03*G0_1 - 1.410934744268071e-03*G0_2 + 1.128747795414457e-02*G0_3 + 3.386243386243381e-03*G0_4 + 2.257495590828915e-03*G0_5 - 2.257495590828906e-03*G0_6 - 6.772486772486716e-03*G0_7 - 2.257495590828914e-03*G0_8 + 2.257495590828901e-03*G0_9 + 3.386243386243373e-03*G0_10 + 1.128747795414456e-02*G0_11 - 1.354497354497350e-02*G0_12 + 9.481481481481449e-02*G0_13 - 1.354497354497348e-02*G0_14;
  block[14] = -1.410934744268073e-03*G0_0 - 1.410934744268072e-03*G0_1 + 1.410934744268068e-03*G0_2 + 2.257495590828918e-03*G0_3 + 3.386243386243379e-03*G0_4 + 1.128747795414457e-02*G0_5 + 1.128747795414457e-02*G0_6 + 3.386243386243391e-03*G0_7 + 2.257495590828918e-03*G0_8 - 2.257495590828900e-03*G0_9 - 6.772486772486737e-03*G0_10 - 2.257495590828903e-03*G0_11 - 1.354497354497348e-02*G0_12 - 1.354497354497348e-02*G0_13 + 9.481481481481437e-02*G0_14;
}

// No contribution from the boundary
bool LinearForm::boundary_contribution() const { return false; }

void LinearForm::eval(real block[], const AffineMap& map, unsigned int facet) const {}

} }

#endif
