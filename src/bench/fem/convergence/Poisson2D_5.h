// Automatically generated by FFC, the FEniCS Form Compiler, version 0.3.4.
// For further information, go to http://www/fenics.org/ffc/.
// Licensed under the GNU GPL Version 2.

#ifndef __POISSON2D_5_H
#define __POISSON2D_5_H

#include <dolfin/Mesh.h>
#include <dolfin/Cell.h>
#include <dolfin/Point.h>
#include <dolfin/AffineMap.h>
#include <dolfin/FiniteElement.h>
#include <dolfin/FiniteElementSpec.h>
#include <dolfin/BilinearForm.h>
#include <dolfin/LinearForm.h>
#include <dolfin/Functional.h>
#include <dolfin/FEM.h>

namespace dolfin { namespace Poisson2D_5 {

/// This class contains the form to be evaluated, including
/// contributions from the interior and boundary of the domain.

class BilinearForm : public dolfin::BilinearForm
{
public:

  class TestElement;

  class TrialElement;

  BilinearForm();
  

  bool interior_contribution() const;

  void eval(real block[], const AffineMap& map) const;

  bool boundary_contribution() const;

  void eval(real block[], const AffineMap& map, unsigned int facet) const;

};

class BilinearForm::TestElement : public dolfin::FiniteElement
{
public:

  TestElement() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~TestElement()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 21;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    static unsigned int edge_reordering_0[2][4] = {{0, 1, 2, 3}, {3, 2, 1, 0}};
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    int alignment = cell.alignment(1, 0);
    int offset = mesh.topology().size(0);
    nodes[3] = offset + 4*cell.entities(1)[0] + edge_reordering_0[alignment][0];
    nodes[4] = offset + 4*cell.entities(1)[0] + edge_reordering_0[alignment][1];
    nodes[5] = offset + 4*cell.entities(1)[0] + edge_reordering_0[alignment][2];
    nodes[6] = offset + 4*cell.entities(1)[0] + edge_reordering_0[alignment][3];
    alignment = cell.alignment(1, 1);
    nodes[7] = offset + 4*cell.entities(1)[1] + edge_reordering_0[alignment][0];
    nodes[8] = offset + 4*cell.entities(1)[1] + edge_reordering_0[alignment][1];
    nodes[9] = offset + 4*cell.entities(1)[1] + edge_reordering_0[alignment][2];
    nodes[10] = offset + 4*cell.entities(1)[1] + edge_reordering_0[alignment][3];
    alignment = cell.alignment(1, 2);
    nodes[11] = offset + 4*cell.entities(1)[2] + edge_reordering_0[alignment][0];
    nodes[12] = offset + 4*cell.entities(1)[2] + edge_reordering_0[alignment][1];
    nodes[13] = offset + 4*cell.entities(1)[2] + edge_reordering_0[alignment][2];
    nodes[14] = offset + 4*cell.entities(1)[2] + edge_reordering_0[alignment][3];
    offset = offset + 4*mesh.topology().size(1);
    nodes[15] = offset + 6*cell.index() + 0;
    nodes[16] = offset + 6*cell.index() + 1;
    nodes[17] = offset + 6*cell.index() + 2;
    nodes[18] = offset + 6*cell.index() + 3;
    nodes[19] = offset + 6*cell.index() + 4;
    nodes[20] = offset + 6*cell.index() + 5;
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[3] = map(8.000000000000000e-01, 2.000000000000000e-01);
    points[4] = map(6.000000000000000e-01, 4.000000000000000e-01);
    points[5] = map(4.000000000000000e-01, 6.000000000000000e-01);
    points[6] = map(2.000000000000000e-01, 8.000000000000000e-01);
    points[7] = map(0.000000000000000e+00, 8.000000000000000e-01);
    points[8] = map(0.000000000000000e+00, 6.000000000000000e-01);
    points[9] = map(0.000000000000000e+00, 4.000000000000000e-01);
    points[10] = map(0.000000000000000e+00, 2.000000000000000e-01);
    points[11] = map(2.000000000000000e-01, 0.000000000000000e+00);
    points[12] = map(4.000000000000000e-01, 0.000000000000000e+00);
    points[13] = map(6.000000000000000e-01, 0.000000000000000e+00);
    points[14] = map(8.000000000000000e-01, 0.000000000000000e+00);
    points[15] = map(2.000000000000000e-01, 2.000000000000000e-01);
    points[16] = map(4.000000000000000e-01, 2.000000000000000e-01);
    points[17] = map(6.000000000000000e-01, 2.000000000000000e-01);
    points[18] = map(2.000000000000000e-01, 4.000000000000000e-01);
    points[19] = map(4.000000000000000e-01, 4.000000000000000e-01);
    points[20] = map(2.000000000000000e-01, 6.000000000000000e-01);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 0;
    components[4] = 0;
    components[5] = 0;
    components[6] = 0;
    components[7] = 0;
    components[8] = 0;
    components[9] = 0;
    components[10] = 0;
    components[11] = 0;
    components[12] = 0;
    components[13] = 0;
    components[14] = 0;
    components[15] = 0;
    components[16] = 0;
    components[17] = 0;
    components[18] = 0;
    components[19] = 0;
    components[20] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "triangle", 5);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class BilinearForm::TrialElement : public dolfin::FiniteElement
{
public:

  TrialElement() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~TrialElement()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 21;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    static unsigned int edge_reordering_0[2][4] = {{0, 1, 2, 3}, {3, 2, 1, 0}};
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    int alignment = cell.alignment(1, 0);
    int offset = mesh.topology().size(0);
    nodes[3] = offset + 4*cell.entities(1)[0] + edge_reordering_0[alignment][0];
    nodes[4] = offset + 4*cell.entities(1)[0] + edge_reordering_0[alignment][1];
    nodes[5] = offset + 4*cell.entities(1)[0] + edge_reordering_0[alignment][2];
    nodes[6] = offset + 4*cell.entities(1)[0] + edge_reordering_0[alignment][3];
    alignment = cell.alignment(1, 1);
    nodes[7] = offset + 4*cell.entities(1)[1] + edge_reordering_0[alignment][0];
    nodes[8] = offset + 4*cell.entities(1)[1] + edge_reordering_0[alignment][1];
    nodes[9] = offset + 4*cell.entities(1)[1] + edge_reordering_0[alignment][2];
    nodes[10] = offset + 4*cell.entities(1)[1] + edge_reordering_0[alignment][3];
    alignment = cell.alignment(1, 2);
    nodes[11] = offset + 4*cell.entities(1)[2] + edge_reordering_0[alignment][0];
    nodes[12] = offset + 4*cell.entities(1)[2] + edge_reordering_0[alignment][1];
    nodes[13] = offset + 4*cell.entities(1)[2] + edge_reordering_0[alignment][2];
    nodes[14] = offset + 4*cell.entities(1)[2] + edge_reordering_0[alignment][3];
    offset = offset + 4*mesh.topology().size(1);
    nodes[15] = offset + 6*cell.index() + 0;
    nodes[16] = offset + 6*cell.index() + 1;
    nodes[17] = offset + 6*cell.index() + 2;
    nodes[18] = offset + 6*cell.index() + 3;
    nodes[19] = offset + 6*cell.index() + 4;
    nodes[20] = offset + 6*cell.index() + 5;
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[3] = map(8.000000000000000e-01, 2.000000000000000e-01);
    points[4] = map(6.000000000000000e-01, 4.000000000000000e-01);
    points[5] = map(4.000000000000000e-01, 6.000000000000000e-01);
    points[6] = map(2.000000000000000e-01, 8.000000000000000e-01);
    points[7] = map(0.000000000000000e+00, 8.000000000000000e-01);
    points[8] = map(0.000000000000000e+00, 6.000000000000000e-01);
    points[9] = map(0.000000000000000e+00, 4.000000000000000e-01);
    points[10] = map(0.000000000000000e+00, 2.000000000000000e-01);
    points[11] = map(2.000000000000000e-01, 0.000000000000000e+00);
    points[12] = map(4.000000000000000e-01, 0.000000000000000e+00);
    points[13] = map(6.000000000000000e-01, 0.000000000000000e+00);
    points[14] = map(8.000000000000000e-01, 0.000000000000000e+00);
    points[15] = map(2.000000000000000e-01, 2.000000000000000e-01);
    points[16] = map(4.000000000000000e-01, 2.000000000000000e-01);
    points[17] = map(6.000000000000000e-01, 2.000000000000000e-01);
    points[18] = map(2.000000000000000e-01, 4.000000000000000e-01);
    points[19] = map(4.000000000000000e-01, 4.000000000000000e-01);
    points[20] = map(2.000000000000000e-01, 6.000000000000000e-01);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 0;
    components[4] = 0;
    components[5] = 0;
    components[6] = 0;
    components[7] = 0;
    components[8] = 0;
    components[9] = 0;
    components[10] = 0;
    components[11] = 0;
    components[12] = 0;
    components[13] = 0;
    components[14] = 0;
    components[15] = 0;
    components[16] = 0;
    components[17] = 0;
    components[18] = 0;
    components[19] = 0;
    components[20] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "triangle", 5);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

BilinearForm::BilinearForm() : dolfin::BilinearForm(0)
{
  // Create finite element for test space
  _test = new TestElement();

  // Create finite element for trial space
  _trial = new TrialElement();
}

// Contribution from the interior
bool BilinearForm::interior_contribution() const { return true; }

void BilinearForm::eval(real block[], const AffineMap& map) const
{
  // Compute geometry tensors
  const real G0_0_0 = map.det*(map.g00*map.g00 + map.g01*map.g01);
  const real G0_0_1 = map.det*(map.g00*map.g10 + map.g01*map.g11);
  const real G0_1_0 = map.det*(map.g10*map.g00 + map.g11*map.g01);
  const real G0_1_1 = map.det*(map.g10*map.g10 + map.g11*map.g11);

  // Compute element tensor
  block[0] = 3.424065806878294e-01*G0_0_0 + 3.424065806878294e-01*G0_0_1 + 3.424065806878294e-01*G0_1_0 + 3.424065806878294e-01*G0_1_1;
  block[1] = -4.099840167548510e-02*G0_0_0 - 4.099840167548514e-02*G0_1_0;
  block[2] = -4.099840167548442e-02*G0_0_1 - 4.099840167548449e-02*G0_1_1;
  block[3] = -4.081927910052928e-02*G0_0_0 - 4.081927910052932e-02*G0_0_1 - 4.081927910052932e-02*G0_1_0 - 4.081927910052943e-02*G0_1_1;
  block[4] = -3.797743055555530e-02*G0_0_0 - 3.797743055555559e-02*G0_0_1 - 3.797743055555534e-02*G0_1_0 - 3.797743055555560e-02*G0_1_1;
  block[5] = -3.797743055555588e-02*G0_0_0 - 3.797743055555578e-02*G0_0_1 - 3.797743055555559e-02*G0_1_0 - 3.797743055555558e-02*G0_1_1;
  block[6] = -4.081927910052761e-02*G0_0_0 - 4.081927910052811e-02*G0_0_1 - 4.081927910052784e-02*G0_1_0 - 4.081927910052819e-02*G0_1_1;
  block[7] = 4.081927910052761e-02*G0_0_0 + 2.023740630511444e-01*G0_0_1 + 4.081927910052785e-02*G0_1_0 + 2.023740630511446e-01*G0_1_1;
  block[8] = -6.966834766313748e-02*G0_0_0 - 4.499593529541420e-01*G0_0_1 - 6.966834766313774e-02*G0_1_0 - 4.499593529541420e-01*G0_1_1;
  block[9] = -1.584545855379309e-02*G0_0_0 + 5.942046957671926e-01*G0_0_1 - 1.584545855379317e-02*G0_1_0 + 5.942046957671928e-01*G0_1_1;
  block[10] = 2.022879464285708e-01*G0_0_0 - 6.480275848765406e-01*G0_0_1 + 2.022879464285708e-01*G0_1_0 - 6.480275848765407e-01*G0_1_1;
  block[11] = -6.480275848765410e-01*G0_0_0 + 2.022879464285704e-01*G0_0_1 - 6.480275848765411e-01*G0_1_0 + 2.022879464285705e-01*G0_1_1;
  block[12] = 5.942046957671946e-01*G0_0_0 - 1.584545855379198e-02*G0_0_1 + 5.942046957671945e-01*G0_1_0 - 1.584545855379196e-02*G0_1_1;
  block[13] = -4.499593529541437e-01*G0_0_0 - 6.966834766313923e-02*G0_0_1 - 4.499593529541438e-01*G0_1_0 - 6.966834766313960e-02*G0_1_1;
  block[14] = 2.023740630511461e-01*G0_0_0 + 4.081927910052970e-02*G0_0_1 + 2.023740630511462e-01*G0_1_0 + 4.081927910052981e-02*G0_1_1;
  block[15] = -2.152915564373898e-01*G0_0_0 - 2.152915564373904e-01*G0_0_1 - 2.152915564373897e-01*G0_1_0 - 2.152915564373905e-01*G0_1_1;
  block[16] = -5.382288910934621e-02*G0_0_0 - 5.382288910934593e-02*G0_0_1 - 5.382288910934646e-02*G0_1_0 - 5.382288910934549e-02*G0_1_1;
  block[17] = 1.076457782186942e-01*G0_0_0 + 1.076457782186942e-01*G0_0_1 + 1.076457782186944e-01*G0_1_0 + 1.076457782186946e-01*G0_1_1;
  block[18] = -5.382288910934559e-02*G0_0_0 - 5.382288910934446e-02*G0_0_1 - 5.382288910934517e-02*G0_1_0 - 5.382288910934469e-02*G0_1_1;
  block[19] = 1.076457782186941e-01*G0_0_0 + 1.076457782186936e-01*G0_0_1 + 1.076457782186937e-01*G0_1_0 + 1.076457782186930e-01*G0_1_1;
  block[20] = 1.076457782186933e-01*G0_0_0 + 1.076457782186927e-01*G0_0_1 + 1.076457782186933e-01*G0_1_0 + 1.076457782186930e-01*G0_1_1;
  block[21] = -4.099840167548510e-02*G0_0_0 - 4.099840167548514e-02*G0_0_1;
  block[22] = 3.424065806878293e-01*G0_0_0;
  block[23] = 4.099840167548464e-02*G0_0_1;
  block[24] = 2.022879464285701e-01*G0_0_0 + 8.503155313051106e-01*G0_0_1;
  block[25] = -1.584545855379236e-02*G0_0_0 - 6.100501543209861e-01*G0_0_1;
  block[26] = -6.966834766313856e-02*G0_0_0 + 3.802910052910043e-01*G0_0_1;
  block[27] = 4.081927910052838e-02*G0_0_0 - 1.615547839506168e-01*G0_0_1;
  block[28] = -4.081927910052838e-02*G0_0_0;
  block[29] = -3.797743055555548e-02*G0_0_0;
  block[30] = -3.797743055555505e-02*G0_0_0;
  block[31] = -4.081927910052916e-02*G0_0_0;
  block[32] = 2.023740630511462e-01*G0_0_0 + 1.615547839506161e-01*G0_0_1;
  block[33] = -4.499593529541442e-01*G0_0_0 - 3.802910052910038e-01*G0_0_1;
  block[34] = 5.942046957671948e-01*G0_0_0 + 6.100501543209853e-01*G0_0_1;
  block[35] = -6.480275848765410e-01*G0_0_0 - 8.503155313051106e-01*G0_0_1;
  block[36] = 1.076457782186942e-01*G0_0_0;
  block[37] = -5.382288910934681e-02*G0_0_0;
  block[38] = -2.152915564373881e-01*G0_0_0;
  block[39] = 1.076457782186937e-01*G0_0_0;
  block[40] = -5.382288910934630e-02*G0_0_0;
  block[41] = 1.076457782186940e-01*G0_0_0;
  block[42] = -4.099840167548442e-02*G0_1_0 - 4.099840167548449e-02*G0_1_1;
  block[43] = 4.099840167548464e-02*G0_1_0;
  block[44] = 3.424065806878295e-01*G0_1_1;
  block[45] = -1.615547839506164e-01*G0_1_0 + 4.081927910052879e-02*G0_1_1;
  block[46] = 3.802910052910037e-01*G0_1_0 - 6.966834766313909e-02*G0_1_1;
  block[47] = -6.100501543209855e-01*G0_1_0 - 1.584545855379187e-02*G0_1_1;
  block[48] = 8.503155313051117e-01*G0_1_0 + 2.022879464285705e-01*G0_1_1;
  block[49] = -8.503155313051118e-01*G0_1_0 - 6.480275848765416e-01*G0_1_1;
  block[50] = 6.100501543209857e-01*G0_1_0 + 5.942046957671938e-01*G0_1_1;
  block[51] = -3.802910052910044e-01*G0_1_0 - 4.499593529541426e-01*G0_1_1;
  block[52] = 1.615547839506167e-01*G0_1_0 + 2.023740630511447e-01*G0_1_1;
  block[53] = -4.081927910052822e-02*G0_1_1;
  block[54] = -3.797743055555537e-02*G0_1_1;
  block[55] = -3.797743055555496e-02*G0_1_1;
  block[56] = -4.081927910052845e-02*G0_1_1;
  block[57] = 1.076457782186936e-01*G0_1_1;
  block[58] = 1.076457782186944e-01*G0_1_1;
  block[59] = 1.076457782186937e-01*G0_1_1;
  block[60] = -5.382288910934897e-02*G0_1_1;
  block[61] = -5.382288910934706e-02*G0_1_1;
  block[62] = -2.152915564373862e-01*G0_1_1;
  block[63] = -4.081927910052928e-02*G0_0_0 - 4.081927910052931e-02*G0_0_1 - 4.081927910052931e-02*G0_1_0 - 4.081927910052943e-02*G0_1_1;
  block[64] = 2.022879464285701e-01*G0_0_0 + 8.503155313051106e-01*G0_1_0;
  block[65] = -1.615547839506164e-01*G0_0_1 + 4.081927910052878e-02*G0_1_1;
  block[66] = 1.989293981481470e+00*G0_0_0 + 1.280984760802461e+00*G0_0_1 + 1.280984760802461e+00*G0_1_0 + 2.561969521604925e+00*G0_1_1;
  block[67] = -9.063774526014068e-01*G0_0_0 + 7.965787588183384e-01*G0_0_1 - 5.296172288359777e-01*G0_1_0 - 1.395089285714281e+00*G0_1_1;
  block[68] = 8.181079144620758e-01*G0_0_0 - 4.822530864197517e-01*G0_0_1 + 2.325148809523802e-01*G0_1_0 + 8.956128747795380e-01*G0_1_1;
  block[69] = -3.401606591710732e-01*G0_0_0 + 3.293960813492054e-01*G0_0_1 - 7.104621362433831e-02*G0_1_0 - 3.401606591710741e-01*G0_1_1;
  block[70] = 3.401606591710734e-01*G0_0_0 + 7.104621362433876e-02*G0_0_1 + 7.104621362433841e-02*G0_1_0;
  block[71] = 1.722332451499123e-01*G0_0_0 + 3.014081790123308e-02*G0_0_1 + 3.014081790123655e-02*G0_1_0;
  block[72] = 1.313278494268078e-01*G0_0_0 + 3.014081790123642e-02*G0_0_1 + 3.014081790123481e-02*G0_1_0;
  block[73] = 1.420924272486762e-01*G0_0_0 + 7.104621362433802e-02*G0_0_1 + 7.104621362433858e-02*G0_1_0;
  block[74] = 1.980682319224000e-01*G0_0_0 + 2.691144455467361e-01*G0_0_1 + 2.691144455467382e-01*G0_1_0 + 3.401606591710739e-01*G0_1_1;
  block[75] = -3.595368992504430e-01*G0_0_0 - 6.630979938271576e-01*G0_0_1 - 6.630979938271624e-01*G0_1_0 - 8.956128747795379e-01*G0_1_1;
  block[76] = 2.863377700617296e-01*G0_0_0 + 8.654720568783028e-01*G0_0_1 + 8.654720568783072e-01*G0_1_0 + 1.395089285714280e+00*G0_1_1;
  block[77] = -2.863377700617276e-01*G0_0_0 - 1.280984760802461e+00*G0_0_1 - 1.280984760802464e+00*G0_1_0 - 2.561969521604925e+00*G0_1_1;
  block[78] = -6.674038249559070e-01*G0_0_0 - 2.626556988536181e-01*G0_0_1 - 2.626556988536175e-01*G0_1_0;
  block[79] = 1.356336805555554e+00*G0_0_0 + 5.726755401234583e-01*G0_0_1 + 5.726755401234587e-01*G0_1_0;
  block[80] = -2.820319389329794e+00*G0_0_0 - 1.662050815696643e+00*G0_0_1 - 1.662050815696641e+00*G0_1_0;
  block[81] = -4.198185350529081e-01*G0_0_0 - 7.319912918870700e-02*G0_0_1 - 7.319912918871382e-02*G0_1_0;
  block[82] = 1.194868138227507e+00*G0_0_0 + 5.726755401234542e-01*G0_0_1 + 5.726755401234569e-01*G0_1_0;
  block[83] = -9.903411596119880e-01*G0_0_0 - 2.626556988536183e-01*G0_0_1 - 2.626556988536167e-01*G0_1_0;
  block[84] = -3.797743055555530e-02*G0_0_0 - 3.797743055555534e-02*G0_0_1 - 3.797743055555560e-02*G0_1_0 - 3.797743055555561e-02*G0_1_1;
  block[85] = -1.584545855379242e-02*G0_0_0 - 6.100501543209861e-01*G0_1_0;
  block[86] = 3.802910052910037e-01*G0_0_1 - 6.966834766313909e-02*G0_1_1;
  block[87] = -9.063774526014068e-01*G0_0_0 - 5.296172288359778e-01*G0_0_1 + 7.965787588183387e-01*G0_1_0 - 1.395089285714281e+00*G0_1_1;
  block[88] = 3.074363425925914e+00*G0_0_0 + 1.175491898148145e+00*G0_0_1 + 1.175491898148145e+00*G0_1_0 + 3.694403108465597e+00*G0_1_1;
  block[89] = -1.804143242945322e+00*G0_0_0 + 6.996975584215112e-01*G0_0_1 - 3.509252369929463e-01*G0_1_0 - 1.804143242945322e+00*G0_1_1;
  block[90] = 8.956128747795364e-01*G0_0_0 - 4.822530864197541e-01*G0_0_1 + 2.325148809523795e-01*G0_1_0 + 8.181079144620759e-01*G0_1_1;
  block[91] = -8.956128747795369e-01*G0_0_0 - 2.325148809523806e-01*G0_0_1 - 2.325148809523795e-01*G0_1_0 + 7.104621362433690e-02*G0_1_1;
  block[92] = -2.195973875661418e-01*G0_0_0 - 6.243455136684190e-02*G0_0_1 - 6.243455136684688e-02*G0_1_0 - 1.722332451498953e-02*G0_1_1;
  block[93] = -2.971023478835950e-01*G0_0_0 - 1.485511739417999e-01*G0_0_1 - 1.485511739417965e-01*G0_1_0 - 1.722332451499370e-02*G0_1_1;
  block[94] = 1.313278494268056e-01*G0_0_0 + 1.011870315255731e-01*G0_0_1 + 1.011870315255709e-01*G0_1_0 + 7.104621362433992e-02*G0_1_1;
  block[95] = 1.119516093474384e-01*G0_0_0 + 1.420924272486730e-01*G0_0_1 + 1.420924272486744e-01*G0_1_0 + 1.722332451499085e-01*G0_1_1;
  block[96] = -1.119516093474373e-01*G0_0_0 - 1.571628361992927e-01*G0_0_1 - 1.571628361992894e-01*G0_1_0 - 2.195973875661361e-01*G0_1_1;
  block[97] = 1.033399470899443e-01*G0_0_0 + 1.334807649911793e-01*G0_0_1 + 1.334807649911773e-01*G0_1_0 + 2.669615299823603e-01*G0_1_1;
  block[98] = -4.951705798059815e-02*G0_0_0 + 5.296172288359779e-01*G0_0_1 + 5.296172288359789e-01*G0_1_0 + 1.395089285714281e+00*G0_1_1;
  block[99] = -3.444664902998164e-01*G0_0_0 - 4.478064373897592e-01*G0_0_1 - 4.478064373897647e-01*G0_1_0 - 5.166997354497265e-01*G0_1_1;
  block[100] = 3.875248015872912e-01*G0_0_0 + 8.590133101851793e-01*G0_0_1 + 8.590133101851785e-01*G0_1_0 + 1.011870315255731e+00*G0_1_1;
  block[101] = 7.319912918871273e-01*G0_0_0 - 1.308972663139324e+00*G0_0_1 - 1.308972663139323e+00*G0_1_0 - 3.961364638447959e+00*G0_1_1;
  block[102] = 1.033399470899461e+00*G0_0_0 + 3.746073082010426e-01*G0_0_1 + 3.746073082010547e-01*G0_1_0 + 4.305831128746875e-02*G0_1_1;
  block[103] = -3.810660548941781e+00*G0_0_0 - 1.401548032407397e+00*G0_0_1 - 1.401548032407403e+00*G0_1_0 + 1.011870315255731e+00*G0_1_1;
  block[104] = 2.023740630511464e+00*G0_0_0 + 4.133597883597986e-01*G0_0_1 + 4.133597883597934e-01*G0_1_0 - 5.166997354497267e-01*G0_1_1;
  block[105] = -3.797743055555586e-02*G0_0_0 - 3.797743055555559e-02*G0_0_1 - 3.797743055555577e-02*G0_1_0 - 3.797743055555557e-02*G0_1_1;
  block[106] = -6.966834766313856e-02*G0_0_0 + 3.802910052910043e-01*G0_1_0;
  block[107] = -6.100501543209855e-01*G0_0_1 - 1.584545855379186e-02*G0_1_1;
  block[108] = 8.181079144620758e-01*G0_0_0 + 2.325148809523802e-01*G0_0_1 - 4.822530864197518e-01*G0_1_0 + 8.956128747795380e-01*G0_1_1;
  block[109] = -1.804143242945322e+00*G0_0_0 - 3.509252369929463e-01*G0_0_1 + 6.996975584215114e-01*G0_1_0 - 1.804143242945322e+00*G0_1_1;
  block[110] = 3.694403108465593e+00*G0_0_0 + 1.175491898148140e+00*G0_0_1 + 1.175491898148140e+00*G0_1_0 + 3.074363425925910e+00*G0_1_1;
  block[111] = -1.395089285714280e+00*G0_0_0 + 7.965787588183401e-01*G0_0_1 - 5.296172288359767e-01*G0_1_0 - 9.063774526014069e-01*G0_1_1;
  block[112] = 1.395089285714281e+00*G0_0_0 + 5.296172288359798e-01*G0_0_1 + 5.296172288359768e-01*G0_1_0 - 4.951705798059615e-02*G0_1_1;
  block[113] = 2.669615299823609e-01*G0_0_0 + 1.334807649911773e-01*G0_0_1 + 1.334807649911783e-01*G0_1_0 + 1.033399470899425e-01*G0_1_1;
  block[114] = -2.195973875661341e-01*G0_0_0 - 1.571628361992907e-01*G0_0_1 - 1.571628361992910e-01*G0_1_0 - 1.119516093474388e-01*G0_1_1;
  block[115] = 1.722332451499111e-01*G0_0_0 + 1.420924272486757e-01*G0_0_1 + 1.420924272486761e-01*G0_1_0 + 1.119516093474408e-01*G0_1_1;
  block[116] = 7.104621362434074e-02*G0_0_0 + 1.011870315255730e-01*G0_0_1 + 1.011870315255736e-01*G0_1_0 + 1.313278494268054e-01*G0_1_1;
  block[117] = -1.722332451499343e-02*G0_0_0 - 1.485511739417995e-01*G0_0_1 - 1.485511739418000e-01*G0_1_0 - 2.971023478835967e-01*G0_1_1;
  block[118] = -1.722332451499096e-02*G0_0_0 - 6.243455136684438e-02*G0_0_1 - 6.243455136684076e-02*G0_1_0 - 2.195973875661371e-01*G0_1_1;
  block[119] = 7.104621362433786e-02*G0_0_0 - 2.325148809523803e-01*G0_0_1 - 2.325148809523816e-01*G0_1_0 - 8.956128747795380e-01*G0_1_1;
  block[120] = -5.166997354497376e-01*G0_0_0 - 4.478064373897719e-01*G0_0_1 - 4.478064373897694e-01*G0_1_0 - 3.444664902998201e-01*G0_1_1;
  block[121] = 4.305831128748390e-02*G0_0_0 + 3.746073082010611e-01*G0_0_1 + 3.746073082010576e-01*G0_1_0 + 1.033399470899465e+00*G0_1_1;
  block[122] = -5.166997354497342e-01*G0_0_0 + 4.133597883597921e-01*G0_0_1 + 4.133597883597875e-01*G0_1_0 + 2.023740630511460e+00*G0_1_1;
  block[123] = 1.011870315255733e+00*G0_0_0 + 8.590133101851912e-01*G0_0_1 + 8.590133101851805e-01*G0_1_0 + 3.875248015873005e-01*G0_1_1;
  block[124] = 1.011870315255724e+00*G0_0_0 - 1.401548032407403e+00*G0_0_1 - 1.401548032407400e+00*G0_1_0 - 3.810660548941780e+00*G0_1_1;
  block[125] = -3.961364638447954e+00*G0_0_0 - 1.308972663139334e+00*G0_0_1 - 1.308972663139319e+00*G0_1_0 + 7.319912918871205e-01*G0_1_1;
  block[126] = -4.081927910052761e-02*G0_0_0 - 4.081927910052784e-02*G0_0_1 - 4.081927910052811e-02*G0_1_0 - 4.081927910052819e-02*G0_1_1;
  block[127] = 4.081927910052839e-02*G0_0_0 - 1.615547839506168e-01*G0_1_0;
  block[128] = 8.503155313051117e-01*G0_0_1 + 2.022879464285705e-01*G0_1_1;
  block[129] = -3.401606591710732e-01*G0_0_0 - 7.104621362433831e-02*G0_0_1 + 3.293960813492054e-01*G0_1_0 - 3.401606591710741e-01*G0_1_1;
  block[130] = 8.956128747795363e-01*G0_0_0 + 2.325148809523795e-01*G0_0_1 - 4.822530864197541e-01*G0_1_0 + 8.181079144620759e-01*G0_1_1;
  block[131] = -1.395089285714280e+00*G0_0_0 - 5.296172288359767e-01*G0_0_1 + 7.965787588183402e-01*G0_1_0 - 9.063774526014069e-01*G0_1_1;
  block[132] = 2.561969521604930e+00*G0_0_0 + 1.280984760802464e+00*G0_0_1 + 1.280984760802464e+00*G0_1_0 + 1.989293981481473e+00*G0_1_1;
  block[133] = -2.561969521604930e+00*G0_0_0 - 1.280984760802468e+00*G0_0_1 - 1.280984760802464e+00*G0_1_0 - 2.863377700617299e-01*G0_1_1;
  block[134] = 1.395089285714283e+00*G0_0_0 + 8.654720568783056e-01*G0_0_1 + 8.654720568783055e-01*G0_1_0 + 2.863377700617292e-01*G0_1_1;
  block[135] = -8.956128747795409e-01*G0_0_0 - 6.630979938271579e-01*G0_0_1 - 6.630979938271597e-01*G0_1_0 - 3.595368992504396e-01*G0_1_1;
  block[136] = 3.401606591710749e-01*G0_0_0 + 2.691144455467342e-01*G0_0_1 + 2.691144455467367e-01*G0_1_0 + 1.980682319223968e-01*G0_1_1;
  block[137] = 7.104621362434094e-02*G0_0_1 + 7.104621362433730e-02*G0_1_0 + 1.420924272486791e-01*G0_1_1;
  block[138] = 3.014081790123427e-02*G0_0_1 + 3.014081790123494e-02*G0_1_0 + 1.313278494268061e-01*G0_1_1;
  block[139] = 3.014081790123545e-02*G0_0_1 + 3.014081790123334e-02*G0_1_0 + 1.722332451499105e-01*G0_1_1;
  block[140] = 7.104621362433929e-02*G0_0_1 + 7.104621362433956e-02*G0_1_0 + 3.401606591710745e-01*G0_1_1;
  block[141] = -2.626556988536184e-01*G0_0_1 - 2.626556988536152e-01*G0_1_0 - 6.674038249559097e-01*G0_1_1;
  block[142] = -7.319912918871213e-02*G0_0_1 - 7.319912918871170e-02*G0_1_0 - 4.198185350529047e-01*G0_1_1;
  block[143] = -2.626556988536163e-01*G0_0_1 - 2.626556988536149e-01*G0_1_0 - 9.903411596119872e-01*G0_1_1;
  block[144] = 5.726755401234521e-01*G0_0_1 + 5.726755401234569e-01*G0_1_0 + 1.356336805555552e+00*G0_1_1;
  block[145] = 5.726755401234552e-01*G0_0_1 + 5.726755401234562e-01*G0_1_0 + 1.194868138227506e+00*G0_1_1;
  block[146] = -1.662050815696636e+00*G0_0_1 - 1.662050815696645e+00*G0_1_0 - 2.820319389329793e+00*G0_1_1;
  block[147] = 4.081927910052761e-02*G0_0_0 + 4.081927910052785e-02*G0_0_1 + 2.023740630511444e-01*G0_1_0 + 2.023740630511446e-01*G0_1_1;
  block[148] = -4.081927910052838e-02*G0_0_0;
  block[149] = -8.503155313051118e-01*G0_0_1 - 6.480275848765416e-01*G0_1_1;
  block[150] = 3.401606591710734e-01*G0_0_0 + 7.104621362433841e-02*G0_0_1 + 7.104621362433874e-02*G0_1_0;
  block[151] = -8.956128747795369e-01*G0_0_0 - 2.325148809523795e-01*G0_0_1 - 2.325148809523805e-01*G0_1_0 + 7.104621362433690e-02*G0_1_1;
  block[152] = 1.395089285714281e+00*G0_0_0 + 5.296172288359768e-01*G0_0_1 + 5.296172288359797e-01*G0_1_0 - 4.951705798059615e-02*G0_1_1;
  block[153] = -2.561969521604930e+00*G0_0_0 - 1.280984760802464e+00*G0_0_1 - 1.280984760802468e+00*G0_1_0 - 2.863377700617299e-01*G0_1_1;
  block[154] = 2.561969521604931e+00*G0_0_0 + 1.280984760802468e+00*G0_0_1 + 1.280984760802468e+00*G0_1_0 + 1.989293981481474e+00*G0_1_1;
  block[155] = -1.395089285714283e+00*G0_0_0 - 8.654720568783052e-01*G0_0_1 - 2.191668044532621e+00*G0_1_0 - 2.568428268298047e+00*G0_1_1;
  block[156] = 8.956128747795404e-01*G0_0_0 + 6.630979938271579e-01*G0_0_1 + 1.377865961199290e+00*G0_1_0 + 1.963458994708984e+00*G0_1_1;
  block[157] = -3.401606591710749e-01*G0_0_0 - 2.691144455467342e-01*G0_0_1 - 6.695567405202795e-01*G0_1_0 - 9.386711860670125e-01*G0_1_1;
  block[158] = -7.104621362434094e-02*G0_0_1 - 7.104621362433763e-02*G0_1_0 + 1.980682319223951e-01*G0_1_1;
  block[159] = -3.014081790123422e-02*G0_0_1 - 3.014081790123319e-02*G0_1_0 + 1.119516093474421e-01*G0_1_1;
  block[160] = -3.014081790123559e-02*G0_0_1 - 3.014081790123559e-02*G0_1_0 + 7.104621362433672e-02*G0_1_1;
  block[161] = -7.104621362433941e-02*G0_0_1 - 7.104621362433862e-02*G0_1_0;
  block[162] = 2.626556988536181e-01*G0_0_1 + 2.626556988536142e-01*G0_1_0 - 4.650297619047548e-01*G0_1_1;
  block[163] = 7.319912918871180e-02*G0_0_1 + 7.319912918871026e-02*G0_1_0 - 2.734202766754837e-01*G0_1_1;
  block[164] = 2.626556988536164e-01*G0_0_1 + 2.626556988536162e-01*G0_1_0 - 1.420924272486730e-01*G0_1_1;
  block[165] = -5.726755401234519e-01*G0_0_1 - 5.726755401234522e-01*G0_1_0 + 4.951705798059833e-02*G0_1_1;
  block[166] = -5.726755401234551e-01*G0_0_1 - 5.726755401234574e-01*G0_1_0 + 2.109857253086375e-01*G0_1_1;
  block[167] = 1.662050815696636e+00*G0_0_1 + 1.662050815696641e+00*G0_1_0 + 5.037822420634902e-01*G0_1_1;
  block[168] = -6.966834766313748e-02*G0_0_0 - 6.966834766313774e-02*G0_0_1 - 4.499593529541420e-01*G0_1_0 - 4.499593529541421e-01*G0_1_1;
  block[169] = -3.797743055555546e-02*G0_0_0;
  block[170] = 6.100501543209857e-01*G0_0_1 + 5.942046957671937e-01*G0_1_1;
  block[171] = 1.722332451499123e-01*G0_0_0 + 3.014081790123655e-02*G0_0_1 + 3.014081790123305e-02*G0_1_0;
  block[172] = -2.195973875661417e-01*G0_0_0 - 6.243455136684685e-02*G0_0_1 - 6.243455136684196e-02*G0_1_0 - 1.722332451498953e-02*G0_1_1;
  block[173] = 2.669615299823608e-01*G0_0_0 + 1.334807649911782e-01*G0_0_1 + 1.334807649911774e-01*G0_1_0 + 1.033399470899425e-01*G0_1_1;
  block[174] = 1.395089285714283e+00*G0_0_0 + 8.654720568783054e-01*G0_0_1 + 8.654720568783056e-01*G0_1_0 + 2.863377700617292e-01*G0_1_1;
  block[175] = -1.395089285714283e+00*G0_0_0 - 2.191668044532620e+00*G0_0_1 - 8.654720568783052e-01*G0_1_0 - 2.568428268298047e+00*G0_1_1;
  block[176] = 3.694403108465597e+00*G0_0_0 + 2.518911210317449e+00*G0_0_1 + 2.518911210317449e+00*G0_1_0 + 4.417782738095217e+00*G0_1_1;
  block[177] = -1.804143242945321e+00*G0_0_0 - 1.453218005952372e+00*G0_0_1 - 2.503840801366830e+00*G0_1_0 - 3.957058807319203e+00*G0_1_1;
  block[178] = 8.181079144620776e-01*G0_0_0 + 5.855930335096939e-01*G0_0_1 + 1.300361000881829e+00*G0_1_0 + 1.963458994708984e+00*G0_1_1;
  block[179] = 7.104621362433730e-02*G0_0_0 + 3.035610945767224e-01*G0_0_1 + 3.035610945767185e-01*G0_1_0 - 3.595368992504368e-01*G0_1_1;
  block[180] = -1.722332451499296e-02*G0_0_0 + 4.521122685184978e-02*G0_0_1 + 4.521122685184936e-02*G0_1_0 - 1.119516093474420e-01*G0_1_1;
  block[181] = -1.722332451499024e-02*G0_0_0 + 1.313278494268085e-01*G0_0_1 + 1.313278494268088e-01*G0_1_0 - 1.722332451498940e-02*G0_1_1;
  block[182] = 7.104621362433851e-02*G0_0_0 - 3.014081790123532e-02*G0_0_1 - 3.014081790123463e-02*G0_1_0;
  block[183] = -5.166997354497347e-01*G0_0_0 - 9.300595238095298e-01*G0_0_1 - 9.300595238095206e-01*G0_1_0 + 6.803213183421459e-01*G0_1_1;
  block[184] = 4.305831128748243e-02*G0_0_0 - 3.315489969135758e-01*G0_0_1 - 3.315489969135764e-01*G0_1_0 + 3.272431657848303e-01*G0_1_1;
  block[185] = -5.166997354497377e-01*G0_0_0 - 6.889329805996310e-02*G0_0_1 - 6.889329805996550e-02*G0_1_0 + 3.444664902997908e-02*G0_1_1;
  block[186] = 1.011870315255727e+00*G0_0_0 + 2.413418347663137e+00*G0_0_1 + 2.413418347663125e+00*G0_1_0 + 4.305831128746773e-03*G0_1_1;
  block[187] = 1.011870315255736e+00*G0_0_0 + 1.528570050705478e-01*G0_0_1 + 1.528570050705484e-01*G0_1_0 - 3.186315035273306e-01*G0_1_1;
  block[188] = -3.961364638447957e+00*G0_0_0 - 2.652391975308632e+00*G0_0_1 - 2.652391975308627e+00*G0_1_0 - 6.114280202821840e-01*G0_1_1;
  block[189] = -1.584545855379309e-02*G0_0_0 - 1.584545855379312e-02*G0_0_1 + 5.942046957671926e-01*G0_1_0 + 5.942046957671928e-01*G0_1_1;
  block[190] = -3.797743055555507e-02*G0_0_0;
  block[191] = -3.802910052910044e-01*G0_0_1 - 4.499593529541426e-01*G0_1_1;
  block[192] = 1.313278494268078e-01*G0_0_0 + 3.014081790123481e-02*G0_0_1 + 3.014081790123641e-02*G0_1_0;
  block[193] = -2.971023478835950e-01*G0_0_0 - 1.485511739417965e-01*G0_0_1 - 1.485511739417999e-01*G0_1_0 - 1.722332451499368e-02*G0_1_1;
  block[194] = -2.195973875661342e-01*G0_0_0 - 1.571628361992910e-01*G0_0_1 - 1.571628361992907e-01*G0_1_0 - 1.119516093474388e-01*G0_1_1;
  block[195] = -8.956128747795409e-01*G0_0_0 - 6.630979938271597e-01*G0_0_1 - 6.630979938271579e-01*G0_1_0 - 3.595368992504397e-01*G0_1_1;
  block[196] = 8.956128747795404e-01*G0_0_0 + 1.377865961199290e+00*G0_0_1 + 6.630979938271577e-01*G0_1_0 + 1.963458994708984e+00*G0_1_1;
  block[197] = -1.804143242945321e+00*G0_0_0 - 2.503840801366830e+00*G0_0_1 - 1.453218005952372e+00*G0_1_0 - 3.957058807319203e+00*G0_1_1;
  block[198] = 3.074363425925913e+00*G0_0_0 + 1.898871527777765e+00*G0_0_1 + 1.898871527777765e+00*G0_1_0 + 4.417782738095217e+00*G0_1_1;
  block[199] = -9.063774526014060e-01*G0_0_0 - 3.767602237654264e-01*G0_0_1 - 1.702956211419746e+00*G0_1_0 - 2.568428268298046e+00*G0_1_1;
  block[200] = -4.951705798059665e-02*G0_0_0 - 5.791342868165775e-01*G0_0_1 - 5.791342868165762e-01*G0_1_0 + 2.863377700617260e-01*G0_1_1;
  block[201] = 1.033399470899447e-01*G0_0_0 - 3.014081790123464e-02*G0_0_1 - 3.014081790123245e-02*G0_1_0 + 1.033399470899459e-01*G0_1_1;
  block[202] = -1.119516093474405e-01*G0_0_0 + 4.521122685185214e-02*G0_0_1 + 4.521122685185033e-02*G0_1_0 - 1.722332451499165e-02*G0_1_1;
  block[203] = 1.119516093474412e-01*G0_0_0 - 3.014081790123529e-02*G0_0_1 - 3.014081790123463e-02*G0_1_0;
  block[204] = 7.319912918871206e-01*G0_0_0 + 2.040963955026450e+00*G0_0_1 + 2.040963955026447e+00*G0_1_0 - 6.114280202821852e-01*G0_1_1;
  block[205] = 3.875248015872998e-01*G0_0_0 - 4.714885085978819e-01*G0_0_1 - 4.714885085978818e-01*G0_1_0 - 3.186315035273338e-01*G0_1_1;
  block[206] = -3.444664902998221e-01*G0_0_0 + 1.033399470899445e-01*G0_0_1 + 1.033399470899451e-01*G0_1_0 + 3.444664902998452e-02*G0_1_1;
  block[207] = -3.810660548941781e+00*G0_0_0 - 2.409112516534385e+00*G0_0_1 - 2.409112516534376e+00*G0_1_0 + 4.305831128752935e-03*G0_1_1;
  block[208] = 1.033399470899462e+00*G0_0_0 + 6.587921626984078e-01*G0_0_1 + 6.587921626984095e-01*G0_1_0 + 3.272431657848266e-01*G0_1_1;
  block[209] = 2.023740630511456e+00*G0_0_0 + 1.610380842151671e+00*G0_0_1 + 1.610380842151663e+00*G0_1_0 + 6.803213183421454e-01*G0_1_1;
  block[210] = 2.022879464285708e-01*G0_0_0 + 2.022879464285708e-01*G0_0_1 - 6.480275848765404e-01*G0_1_0 - 6.480275848765406e-01*G0_1_1;
  block[211] = -4.081927910052915e-02*G0_0_0;
  block[212] = 1.615547839506167e-01*G0_0_1 + 2.023740630511447e-01*G0_1_1;
  block[213] = 1.420924272486762e-01*G0_0_0 + 7.104621362433858e-02*G0_0_1 + 7.104621362433805e-02*G0_1_0;
  block[214] = 1.313278494268056e-01*G0_0_0 + 1.011870315255708e-01*G0_0_1 + 1.011870315255731e-01*G0_1_0 + 7.104621362433992e-02*G0_1_1;
  block[215] = 1.722332451499111e-01*G0_0_0 + 1.420924272486761e-01*G0_0_1 + 1.420924272486757e-01*G0_1_0 + 1.119516093474408e-01*G0_1_1;
  block[216] = 3.401606591710749e-01*G0_0_0 + 2.691144455467367e-01*G0_0_1 + 2.691144455467342e-01*G0_1_0 + 1.980682319223968e-01*G0_1_1;
  block[217] = -3.401606591710749e-01*G0_0_0 - 6.695567405202795e-01*G0_0_1 - 2.691144455467342e-01*G0_1_0 - 9.386711860670125e-01*G0_1_1;
  block[218] = 8.181079144620776e-01*G0_0_0 + 1.300361000881829e+00*G0_0_1 + 5.855930335096939e-01*G0_1_0 + 1.963458994708984e+00*G0_1_1;
  block[219] = -9.063774526014060e-01*G0_0_0 - 1.702956211419746e+00*G0_0_1 - 3.767602237654264e-01*G0_1_0 - 2.568428268298046e+00*G0_1_1;
  block[220] = 1.989293981481474e+00*G0_0_0 + 7.083092206790089e-01*G0_0_1 + 7.083092206790089e-01*G0_1_0 + 1.989293981481472e+00*G0_1_1;
  block[221] = -2.863377700617283e-01*G0_0_0 + 9.946469907407360e-01*G0_0_1 + 9.946469907407375e-01*G0_1_0 - 2.863377700617266e-01*G0_1_1;
  block[222] = 2.863377700617284e-01*G0_0_0 - 5.791342868165772e-01*G0_0_1 - 5.791342868165783e-01*G0_1_0 - 4.951705798059923e-02*G0_1_1;
  block[223] = -3.595368992504402e-01*G0_0_0 + 3.035610945767189e-01*G0_0_1 + 3.035610945767202e-01*G0_1_0 + 7.104621362433927e-02*G0_1_1;
  block[224] = 1.980682319223984e-01*G0_0_0 - 7.104621362433770e-02*G0_0_1 - 7.104621362433902e-02*G0_1_0;
  block[225] = -2.820319389329799e+00*G0_0_0 - 1.158268573633153e+00*G0_0_1 - 1.158268573633152e+00*G0_1_0 + 5.037822420634921e-01*G0_1_1;
  block[226] = 1.356336805555554e+00*G0_0_0 + 7.836612654320987e-01*G0_0_1 + 7.836612654320945e-01*G0_1_0 + 2.109857253086382e-01*G0_1_1;
  block[227] = -6.674038249559072e-01*G0_0_0 - 4.047481261022906e-01*G0_0_1 - 4.047481261022903e-01*G0_1_0 - 1.420924272486782e-01*G0_1_1;
  block[228] = 1.194868138227508e+00*G0_0_0 + 6.221925981040550e-01*G0_0_1 + 6.221925981040483e-01*G0_1_0 + 4.951705798059319e-02*G0_1_1;
  block[229] = -4.198185350529070e-01*G0_0_0 - 3.466194058641971e-01*G0_0_1 - 3.466194058641950e-01*G0_1_0 - 2.734202766754797e-01*G0_1_1;
  block[230] = -9.903411596119888e-01*G0_0_0 - 7.276854607583744e-01*G0_0_1 - 7.276854607583696e-01*G0_1_0 - 4.650297619047563e-01*G0_1_1;
  block[231] = -6.480275848765410e-01*G0_0_0 - 6.480275848765411e-01*G0_0_1 + 2.022879464285704e-01*G0_1_0 + 2.022879464285704e-01*G0_1_1;
  block[232] = 2.023740630511462e-01*G0_0_0 + 1.615547839506162e-01*G0_1_0;
  block[233] = -4.081927910052822e-02*G0_1_1;
  block[234] = 1.980682319224000e-01*G0_0_0 + 2.691144455467383e-01*G0_0_1 + 2.691144455467361e-01*G0_1_0 + 3.401606591710739e-01*G0_1_1;
  block[235] = 1.119516093474384e-01*G0_0_0 + 1.420924272486743e-01*G0_0_1 + 1.420924272486730e-01*G0_1_0 + 1.722332451499085e-01*G0_1_1;
  block[236] = 7.104621362434073e-02*G0_0_0 + 1.011870315255736e-01*G0_0_1 + 1.011870315255730e-01*G0_1_0 + 1.313278494268054e-01*G0_1_1;
  block[237] = 7.104621362433729e-02*G0_0_1 + 7.104621362434095e-02*G0_1_0 + 1.420924272486791e-01*G0_1_1;
  block[238] = -7.104621362433763e-02*G0_0_1 - 7.104621362434094e-02*G0_1_0 + 1.980682319223950e-01*G0_1_1;
  block[239] = 7.104621362433731e-02*G0_0_0 + 3.035610945767184e-01*G0_0_1 + 3.035610945767224e-01*G0_1_0 - 3.595368992504367e-01*G0_1_1;
  block[240] = -4.951705798059661e-02*G0_0_0 - 5.791342868165762e-01*G0_0_1 - 5.791342868165775e-01*G0_1_0 + 2.863377700617260e-01*G0_1_1;
  block[241] = -2.863377700617283e-01*G0_0_0 + 9.946469907407375e-01*G0_0_1 + 9.946469907407363e-01*G0_1_0 - 2.863377700617264e-01*G0_1_1;
  block[242] = 1.989293981481474e+00*G0_0_0 + 7.083092206790083e-01*G0_0_1 + 7.083092206790080e-01*G0_1_0 + 1.989293981481471e+00*G0_1_1;
  block[243] = -2.568428268298050e+00*G0_0_0 - 3.767602237654297e-01*G0_0_1 - 1.702956211419744e+00*G0_1_0 - 9.063774526014065e-01*G0_1_1;
  block[244] = 1.963458994708988e+00*G0_0_0 + 5.855930335096986e-01*G0_0_1 + 1.300361000881827e+00*G0_1_0 + 8.181079144620775e-01*G0_1_1;
  block[245] = -9.386711860670164e-01*G0_0_0 - 2.691144455467389e-01*G0_0_1 - 6.695567405202785e-01*G0_1_0 - 3.401606591710733e-01*G0_1_1;
  block[246] = 5.037822420634925e-01*G0_0_0 - 1.158268573633148e+00*G0_0_1 - 1.158268573633152e+00*G0_1_0 - 2.820319389329796e+00*G0_1_1;
  block[247] = 4.951705798059835e-02*G0_0_0 + 6.221925981040491e-01*G0_0_1 + 6.221925981040548e-01*G0_1_0 + 1.194868138227508e+00*G0_1_1;
  block[248] = -4.650297619047620e-01*G0_0_0 - 7.276854607583723e-01*G0_0_1 - 7.276854607583754e-01*G0_1_0 - 9.903411596119871e-01*G0_1_1;
  block[249] = 2.109857253086354e-01*G0_0_0 + 7.836612654320906e-01*G0_0_1 + 7.836612654320957e-01*G0_1_0 + 1.356336805555554e+00*G0_1_1;
  block[250] = -2.734202766754771e-01*G0_0_0 - 3.466194058641930e-01*G0_0_1 - 3.466194058641907e-01*G0_1_0 - 4.198185350529061e-01*G0_1_1;
  block[251] = -1.420924272486780e-01*G0_0_0 - 4.047481261022892e-01*G0_0_1 - 4.047481261022955e-01*G0_1_0 - 6.674038249559103e-01*G0_1_1;
  block[252] = 5.942046957671944e-01*G0_0_0 + 5.942046957671944e-01*G0_0_1 - 1.584545855379196e-02*G0_1_0 - 1.584545855379196e-02*G0_1_1;
  block[253] = -4.499593529541441e-01*G0_0_0 - 3.802910052910038e-01*G0_1_0;
  block[254] = -3.797743055555537e-02*G0_1_1;
  block[255] = -3.595368992504430e-01*G0_0_0 - 6.630979938271624e-01*G0_0_1 - 6.630979938271577e-01*G0_1_0 - 8.956128747795379e-01*G0_1_1;
  block[256] = -1.119516093474374e-01*G0_0_0 - 1.571628361992893e-01*G0_0_1 - 1.571628361992927e-01*G0_1_0 - 2.195973875661361e-01*G0_1_1;
  block[257] = -1.722332451499342e-02*G0_0_0 - 1.485511739418001e-01*G0_0_1 - 1.485511739417995e-01*G0_1_0 - 2.971023478835967e-01*G0_1_1;
  block[258] = 3.014081790123488e-02*G0_0_1 + 3.014081790123426e-02*G0_1_0 + 1.313278494268061e-01*G0_1_1;
  block[259] = -3.014081790123318e-02*G0_0_1 - 3.014081790123421e-02*G0_1_0 + 1.119516093474421e-01*G0_1_1;
  block[260] = -1.722332451499296e-02*G0_0_0 + 4.521122685184938e-02*G0_0_1 + 4.521122685184978e-02*G0_1_0 - 1.119516093474419e-01*G0_1_1;
  block[261] = 1.033399470899447e-01*G0_0_0 - 3.014081790123245e-02*G0_0_1 - 3.014081790123462e-02*G0_1_0 + 1.033399470899460e-01*G0_1_1;
  block[262] = 2.863377700617284e-01*G0_0_0 - 5.791342868165784e-01*G0_0_1 - 5.791342868165772e-01*G0_1_0 - 4.951705798059917e-02*G0_1_1;
  block[263] = -2.568428268298050e+00*G0_0_0 - 1.702956211419744e+00*G0_0_1 - 3.767602237654298e-01*G0_1_0 - 9.063774526014065e-01*G0_1_1;
  block[264] = 4.417782738095221e+00*G0_0_0 + 1.898871527777769e+00*G0_0_1 + 1.898871527777769e+00*G0_1_0 + 3.074363425925913e+00*G0_1_1;
  block[265] = -3.957058807319208e+00*G0_0_0 - 1.453218005952378e+00*G0_0_1 - 2.503840801366832e+00*G0_1_0 - 1.804143242945321e+00*G0_1_1;
  block[266] = 1.963458994708988e+00*G0_0_0 + 6.630979938271629e-01*G0_0_1 + 1.377865961199289e+00*G0_1_0 + 8.956128747795379e-01*G0_1_1;
  block[267] = -6.114280202821862e-01*G0_0_0 + 2.040963955026443e+00*G0_0_1 + 2.040963955026451e+00*G0_1_0 + 7.319912918871244e-01*G0_1_1;
  block[268] = 4.305831128745818e-03*G0_0_0 - 2.409112516534377e+00*G0_0_1 - 2.409112516534385e+00*G0_1_0 - 3.810660548941783e+00*G0_1_1;
  block[269] = 6.803213183421540e-01*G0_0_0 + 1.610380842151667e+00*G0_0_1 + 1.610380842151670e+00*G0_1_0 + 2.023740630511459e+00*G0_1_1;
  block[270] = -3.186315035273289e-01*G0_0_0 - 4.714885085978784e-01*G0_0_1 - 4.714885085978804e-01*G0_1_0 + 3.875248015872974e-01*G0_1_1;
  block[271] = 3.272431657848213e-01*G0_0_0 + 6.587921626984062e-01*G0_0_1 + 6.587921626984082e-01*G0_1_0 + 1.033399470899465e+00*G0_1_1;
  block[272] = 3.444664902998642e-02*G0_0_0 + 1.033399470899472e-01*G0_0_1 + 1.033399470899494e-01*G0_1_0 - 3.444664902998185e-01*G0_1_1;
  block[273] = -4.499593529541437e-01*G0_0_0 - 4.499593529541438e-01*G0_0_1 - 6.966834766313926e-02*G0_1_0 - 6.966834766313962e-02*G0_1_1;
  block[274] = 5.942046957671948e-01*G0_0_0 + 6.100501543209853e-01*G0_1_0;
  block[275] = -3.797743055555496e-02*G0_1_1;
  block[276] = 2.863377700617296e-01*G0_0_0 + 8.654720568783073e-01*G0_0_1 + 8.654720568783029e-01*G0_1_0 + 1.395089285714280e+00*G0_1_1;
  block[277] = 1.033399470899443e-01*G0_0_0 + 1.334807649911771e-01*G0_0_1 + 1.334807649911793e-01*G0_1_0 + 2.669615299823603e-01*G0_1_1;
  block[278] = -1.722332451499094e-02*G0_0_0 - 6.243455136684092e-02*G0_0_1 - 6.243455136684435e-02*G0_1_0 - 2.195973875661373e-01*G0_1_1;
  block[279] = 3.014081790123333e-02*G0_0_1 + 3.014081790123544e-02*G0_1_0 + 1.722332451499105e-01*G0_1_1;
  block[280] = -3.014081790123555e-02*G0_0_1 - 3.014081790123559e-02*G0_1_0 + 7.104621362433670e-02*G0_1_1;
  block[281] = -1.722332451499028e-02*G0_0_0 + 1.313278494268088e-01*G0_0_1 + 1.313278494268085e-01*G0_1_0 - 1.722332451498940e-02*G0_1_1;
  block[282] = -1.119516093474406e-01*G0_0_0 + 4.521122685185038e-02*G0_0_1 + 4.521122685185214e-02*G0_1_0 - 1.722332451499166e-02*G0_1_1;
  block[283] = -3.595368992504404e-01*G0_0_0 + 3.035610945767203e-01*G0_0_1 + 3.035610945767189e-01*G0_1_0 + 7.104621362433926e-02*G0_1_1;
  block[284] = 1.963458994708988e+00*G0_0_0 + 1.300361000881827e+00*G0_0_1 + 5.855930335096986e-01*G0_1_0 + 8.181079144620775e-01*G0_1_1;
  block[285] = -3.957058807319208e+00*G0_0_0 - 2.503840801366832e+00*G0_0_1 - 1.453218005952378e+00*G0_1_0 - 1.804143242945321e+00*G0_1_1;
  block[286] = 4.417782738095220e+00*G0_0_0 + 2.518911210317453e+00*G0_0_1 + 2.518911210317453e+00*G0_1_0 + 3.694403108465596e+00*G0_1_1;
  block[287] = -2.568428268298051e+00*G0_0_0 - 8.654720568783081e-01*G0_0_1 - 2.191668044532620e+00*G0_1_0 - 1.395089285714280e+00*G0_1_1;
  block[288] = 6.803213183421499e-01*G0_0_0 - 9.300595238095178e-01*G0_0_1 - 9.300595238095223e-01*G0_1_0 - 5.166997354497356e-01*G0_1_1;
  block[289] = 4.305831128749452e-03*G0_0_0 + 2.413418347663126e+00*G0_0_1 + 2.413418347663133e+00*G0_1_0 + 1.011870315255732e+00*G0_1_1;
  block[290] = -6.114280202821882e-01*G0_0_0 - 2.652391975308631e+00*G0_0_1 - 2.652391975308633e+00*G0_1_0 - 3.961364638447961e+00*G0_1_1;
  block[291] = 3.272431657848243e-01*G0_0_0 - 3.315489969135820e-01*G0_0_1 - 3.315489969135849e-01*G0_1_0 + 4.305831128747693e-02*G0_1_1;
  block[292] = -3.186315035273278e-01*G0_0_0 + 1.528570050705494e-01*G0_0_1 + 1.528570050705533e-01*G0_1_0 + 1.011870315255732e+00*G0_1_1;
  block[293] = 3.444664902998112e-02*G0_0_0 - 6.889329805996350e-02*G0_0_1 - 6.889329805996401e-02*G0_1_0 - 5.166997354497324e-01*G0_1_1;
  block[294] = 2.023740630511461e-01*G0_0_0 + 2.023740630511462e-01*G0_0_1 + 4.081927910052969e-02*G0_1_0 + 4.081927910052981e-02*G0_1_1;
  block[295] = -6.480275848765410e-01*G0_0_0 - 8.503155313051106e-01*G0_1_0;
  block[296] = -4.081927910052845e-02*G0_1_1;
  block[297] = -2.863377700617275e-01*G0_0_0 - 1.280984760802465e+00*G0_0_1 - 1.280984760802461e+00*G0_1_0 - 2.561969521604925e+00*G0_1_1;
  block[298] = -4.951705798059815e-02*G0_0_0 + 5.296172288359791e-01*G0_0_1 + 5.296172288359778e-01*G0_1_0 + 1.395089285714281e+00*G0_1_1;
  block[299] = 7.104621362433786e-02*G0_0_0 - 2.325148809523816e-01*G0_0_1 - 2.325148809523803e-01*G0_1_0 - 8.956128747795380e-01*G0_1_1;
  block[300] = 7.104621362433954e-02*G0_0_1 + 7.104621362433929e-02*G0_1_0 + 3.401606591710745e-01*G0_1_1;
  block[301] = -7.104621362433862e-02*G0_0_1 - 7.104621362433940e-02*G0_1_0;
  block[302] = 7.104621362433856e-02*G0_0_0 - 3.014081790123464e-02*G0_0_1 - 3.014081790123532e-02*G0_1_0;
  block[303] = 1.119516093474413e-01*G0_0_0 - 3.014081790123463e-02*G0_0_1 - 3.014081790123529e-02*G0_1_0;
  block[304] = 1.980682319223984e-01*G0_0_0 - 7.104621362433904e-02*G0_0_1 - 7.104621362433770e-02*G0_1_0;
  block[305] = -9.386711860670164e-01*G0_0_0 - 6.695567405202784e-01*G0_0_1 - 2.691144455467389e-01*G0_1_0 - 3.401606591710733e-01*G0_1_1;
  block[306] = 1.963458994708988e+00*G0_0_0 + 1.377865961199289e+00*G0_0_1 + 6.630979938271628e-01*G0_1_0 + 8.956128747795378e-01*G0_1_1;
  block[307] = -2.568428268298051e+00*G0_0_0 - 2.191668044532620e+00*G0_0_1 - 8.654720568783079e-01*G0_1_0 - 1.395089285714280e+00*G0_1_1;
  block[308] = 1.989293981481474e+00*G0_0_0 + 1.280984760802465e+00*G0_0_1 + 1.280984760802465e+00*G0_1_0 + 2.561969521604925e+00*G0_1_1;
  block[309] = -4.650297619047601e-01*G0_0_0 + 2.626556988536146e-01*G0_0_1 + 2.626556988536164e-01*G0_1_0;
  block[310] = 4.951705798059845e-02*G0_0_0 - 5.726755401234548e-01*G0_0_1 - 5.726755401234578e-01*G0_1_0;
  block[311] = 5.037822420634902e-01*G0_0_0 + 1.662050815696643e+00*G0_0_1 + 1.662050815696640e+00*G0_1_0;
  block[312] = -2.734202766754807e-01*G0_0_0 + 7.319912918871295e-02*G0_0_1 + 7.319912918871330e-02*G0_1_0;
  block[313] = 2.109857253086375e-01*G0_0_0 - 5.726755401234549e-01*G0_0_1 - 5.726755401234560e-01*G0_1_0;
  block[314] = -1.420924272486763e-01*G0_0_0 + 2.626556988536135e-01*G0_0_1 + 2.626556988536156e-01*G0_1_0;
  block[315] = -2.152915564373897e-01*G0_0_0 - 2.152915564373897e-01*G0_0_1 - 2.152915564373903e-01*G0_1_0 - 2.152915564373904e-01*G0_1_1;
  block[316] = 1.076457782186941e-01*G0_0_0;
  block[317] = 1.076457782186937e-01*G0_1_1;
  block[318] = -6.674038249559070e-01*G0_0_0 - 2.626556988536175e-01*G0_0_1 - 2.626556988536180e-01*G0_1_0;
  block[319] = -3.444664902998165e-01*G0_0_0 - 4.478064373897647e-01*G0_0_1 - 4.478064373897594e-01*G0_1_0 - 5.166997354497265e-01*G0_1_1;
  block[320] = -5.166997354497376e-01*G0_0_0 - 4.478064373897693e-01*G0_0_1 - 4.478064373897720e-01*G0_1_0 - 3.444664902998201e-01*G0_1_1;
  block[321] = -2.626556988536152e-01*G0_0_1 - 2.626556988536184e-01*G0_1_0 - 6.674038249559097e-01*G0_1_1;
  block[322] = 2.626556988536143e-01*G0_0_1 + 2.626556988536181e-01*G0_1_0 - 4.650297619047549e-01*G0_1_1;
  block[323] = -5.166997354497347e-01*G0_0_0 - 9.300595238095206e-01*G0_0_1 - 9.300595238095298e-01*G0_1_0 + 6.803213183421455e-01*G0_1_1;
  block[324] = 7.319912918871205e-01*G0_0_0 + 2.040963955026447e+00*G0_0_1 + 2.040963955026450e+00*G0_1_0 - 6.114280202821852e-01*G0_1_1;
  block[325] = -2.820319389329799e+00*G0_0_0 - 1.158268573633152e+00*G0_0_1 - 1.158268573633153e+00*G0_1_0 + 5.037822420634921e-01*G0_1_1;
  block[326] = 5.037822420634925e-01*G0_0_0 - 1.158268573633152e+00*G0_0_1 - 1.158268573633148e+00*G0_1_0 - 2.820319389329796e+00*G0_1_1;
  block[327] = -6.114280202821862e-01*G0_0_0 + 2.040963955026451e+00*G0_0_1 + 2.040963955026443e+00*G0_1_0 + 7.319912918871242e-01*G0_1_1;
  block[328] = 6.803213183421499e-01*G0_0_0 - 9.300595238095223e-01*G0_0_1 - 9.300595238095181e-01*G0_1_0 - 5.166997354497356e-01*G0_1_1;
  block[329] = -4.650297619047601e-01*G0_0_0 + 2.626556988536164e-01*G0_0_1 + 2.626556988536146e-01*G0_1_0;
  block[330] = 7.061563051146370e+00*G0_0_0 + 3.100198412698402e+00*G0_0_1 + 3.100198412698402e+00*G0_1_0 + 7.061563051146360e+00*G0_1_1;
  block[331] = -6.329571759259244e+00*G0_0_0 - 3.057140101410927e+00*G0_0_1 - 3.057140101410924e+00*G0_1_0 - 1.808449074074065e+00*G0_1_1;
  block[332] = 2.755731922398583e+00*G0_0_0 + 1.377865961199288e+00*G0_0_1 + 1.377865961199295e+00*G0_1_0 + 1.033399470899463e+00*G0_1_1;
  block[333] = -1.808449074074066e+00*G0_0_0 - 3.057140101410925e+00*G0_0_1 - 3.057140101410922e+00*G0_1_0 - 6.329571759259242e+00*G0_1_1;
  block[334] = 1.420924272486761e+00*G0_0_0 + 1.463982583774246e+00*G0_0_1 + 1.463982583774231e+00*G0_1_0 + 1.420924272486762e+00*G0_1_1;
  block[335] = 1.033399470899472e+00*G0_0_0 + 1.377865961199292e+00*G0_0_1 + 1.377865961199302e+00*G0_1_0 + 2.755731922398589e+00*G0_1_1;
  block[336] = -5.382288910934620e-02*G0_0_0 - 5.382288910934645e-02*G0_0_1 - 5.382288910934595e-02*G0_1_0 - 5.382288910934548e-02*G0_1_1;
  block[337] = -5.382288910934686e-02*G0_0_0;
  block[338] = 1.076457782186944e-01*G0_1_1;
  block[339] = 1.356336805555554e+00*G0_0_0 + 5.726755401234586e-01*G0_0_1 + 5.726755401234582e-01*G0_1_0;
  block[340] = 3.875248015872914e-01*G0_0_0 + 8.590133101851785e-01*G0_0_1 + 8.590133101851796e-01*G0_1_0 + 1.011870315255731e+00*G0_1_1;
  block[341] = 4.305831128748393e-02*G0_0_0 + 3.746073082010572e-01*G0_0_1 + 3.746073082010611e-01*G0_1_0 + 1.033399470899465e+00*G0_1_1;
  block[342] = -7.319912918871163e-02*G0_0_1 - 7.319912918871213e-02*G0_1_0 - 4.198185350529047e-01*G0_1_1;
  block[343] = 7.319912918871030e-02*G0_0_1 + 7.319912918871177e-02*G0_1_0 - 2.734202766754837e-01*G0_1_1;
  block[344] = 4.305831128748244e-02*G0_0_0 - 3.315489969135764e-01*G0_0_1 - 3.315489969135758e-01*G0_1_0 + 3.272431657848303e-01*G0_1_1;
  block[345] = 3.875248015872998e-01*G0_0_0 - 4.714885085978818e-01*G0_0_1 - 4.714885085978819e-01*G0_1_0 - 3.186315035273338e-01*G0_1_1;
  block[346] = 1.356336805555554e+00*G0_0_0 + 7.836612654320945e-01*G0_0_1 + 7.836612654320987e-01*G0_1_0 + 2.109857253086381e-01*G0_1_1;
  block[347] = 4.951705798059854e-02*G0_0_0 + 6.221925981040549e-01*G0_0_1 + 6.221925981040491e-01*G0_1_0 + 1.194868138227508e+00*G0_1_1;
  block[348] = 4.305831128745430e-03*G0_0_0 - 2.409112516534385e+00*G0_0_1 - 2.409112516534377e+00*G0_1_0 - 3.810660548941783e+00*G0_1_1;
  block[349] = 4.305831128750119e-03*G0_0_0 + 2.413418347663133e+00*G0_0_1 + 2.413418347663126e+00*G0_1_0 + 1.011870315255732e+00*G0_1_1;
  block[350] = 4.951705798059849e-02*G0_0_0 - 5.726755401234578e-01*G0_0_1 - 5.726755401234548e-01*G0_1_0;
  block[351] = -6.329571759259244e+00*G0_0_0 - 3.057140101410924e+00*G0_0_1 - 3.057140101410927e+00*G0_1_0 - 1.808449074074065e+00*G0_1_1;
  block[352] = 9.946469907407376e+00*G0_0_0 + 4.973234953703690e+00*G0_0_1 + 4.973234953703690e+00*G0_1_0 + 8.654720568783038e+00*G0_1_1;
  block[353] = -6.329571759259245e+00*G0_0_0 - 3.272431657848314e+00*G0_0_1 - 3.272431657848320e+00*G0_1_0 - 2.023740630511461e+00*G0_1_1;
  block[354] = -3.875248015873046e-01*G0_0_0 + 2.551204943783056e+00*G0_0_1 + 2.551204943783062e+00*G0_1_0 - 3.875248015873028e-01*G0_1_1;
  block[355] = -3.875248015872873e-01*G0_0_0 - 2.938729745370359e+00*G0_0_1 - 2.938729745370359e+00*G0_1_0 - 5.877459490740717e+00*G0_1_1;
  block[356] = -8.611662257496508e-02*G0_0_0 - 4.305831128747865e-02*G0_0_1 - 4.305831128748482e-02*G0_1_0 + 1.420924272486761e+00*G0_1_1;
  block[357] = 1.076457782186942e-01*G0_0_0 + 1.076457782186944e-01*G0_0_1 + 1.076457782186943e-01*G0_1_0 + 1.076457782186947e-01*G0_1_1;
  block[358] = -2.152915564373881e-01*G0_0_0;
  block[359] = 1.076457782186937e-01*G0_1_1;
  block[360] = -2.820319389329794e+00*G0_0_0 - 1.662050815696641e+00*G0_0_1 - 1.662050815696643e+00*G0_1_0;
  block[361] = 7.319912918871273e-01*G0_0_0 - 1.308972663139323e+00*G0_0_1 - 1.308972663139324e+00*G0_1_0 - 3.961364638447959e+00*G0_1_1;
  block[362] = -5.166997354497342e-01*G0_0_0 + 4.133597883597875e-01*G0_0_1 + 4.133597883597921e-01*G0_1_0 + 2.023740630511460e+00*G0_1_1;
  block[363] = -2.626556988536149e-01*G0_0_1 - 2.626556988536163e-01*G0_1_0 - 9.903411596119874e-01*G0_1_1;
  block[364] = 2.626556988536163e-01*G0_0_1 + 2.626556988536164e-01*G0_1_0 - 1.420924272486730e-01*G0_1_1;
  block[365] = -5.166997354497378e-01*G0_0_0 - 6.889329805996544e-02*G0_0_1 - 6.889329805996308e-02*G0_1_0 + 3.444664902997908e-02*G0_1_1;
  block[366] = -3.444664902998221e-01*G0_0_0 + 1.033399470899451e-01*G0_0_1 + 1.033399470899445e-01*G0_1_0 + 3.444664902998455e-02*G0_1_1;
  block[367] = -6.674038249559072e-01*G0_0_0 - 4.047481261022904e-01*G0_0_1 - 4.047481261022906e-01*G0_1_0 - 1.420924272486781e-01*G0_1_1;
  block[368] = -4.650297619047621e-01*G0_0_0 - 7.276854607583754e-01*G0_0_1 - 7.276854607583721e-01*G0_1_0 - 9.903411596119871e-01*G0_1_1;
  block[369] = 6.803213183421540e-01*G0_0_0 + 1.610380842151670e+00*G0_0_1 + 1.610380842151667e+00*G0_1_0 + 2.023740630511458e+00*G0_1_1;
  block[370] = -6.114280202821882e-01*G0_0_0 - 2.652391975308633e+00*G0_0_1 - 2.652391975308631e+00*G0_1_0 - 3.961364638447961e+00*G0_1_1;
  block[371] = 5.037822420634900e-01*G0_0_0 + 1.662050815696640e+00*G0_0_1 + 1.662050815696643e+00*G0_1_0;
  block[372] = 2.755731922398583e+00*G0_0_0 + 1.377865961199295e+00*G0_0_1 + 1.377865961199288e+00*G0_1_0 + 1.033399470899463e+00*G0_1_1;
  block[373] = -6.329571759259245e+00*G0_0_0 - 3.272431657848321e+00*G0_0_1 - 3.272431657848314e+00*G0_1_0 - 2.023740630511461e+00*G0_1_1;
  block[374] = 7.061563051146368e+00*G0_0_0 + 3.961364638447960e+00*G0_0_1 + 3.961364638447960e+00*G0_1_0 + 7.922729276895923e+00*G0_1_1;
  block[375] = 1.420924272486771e+00*G0_0_0 - 4.305831128748025e-02*G0_0_1 - 4.305831128746765e-02*G0_1_0 - 8.611662257494530e-02*G0_1_1;
  block[376] = -1.808449074074076e+00*G0_0_0 + 1.248691027336857e+00*G0_0_1 + 1.248691027336848e+00*G0_1_0 - 2.023740630511466e+00*G0_1_1;
  block[377] = 1.033399470899471e+00*G0_0_0 - 3.444664902998207e-01*G0_0_1 - 3.444664902998293e-01*G0_1_0 + 1.033399470899460e+00*G0_1_1;
  block[378] = -5.382288910934563e-02*G0_0_0 - 5.382288910934518e-02*G0_0_1 - 5.382288910934444e-02*G0_1_0 - 5.382288910934466e-02*G0_1_1;
  block[379] = 1.076457782186937e-01*G0_0_0;
  block[380] = -5.382288910934904e-02*G0_1_1;
  block[381] = -4.198185350529080e-01*G0_0_0 - 7.319912918871382e-02*G0_0_1 - 7.319912918870705e-02*G0_1_0;
  block[382] = 1.033399470899461e+00*G0_0_0 + 3.746073082010547e-01*G0_0_1 + 3.746073082010427e-01*G0_1_0 + 4.305831128746869e-02*G0_1_1;
  block[383] = 1.011870315255733e+00*G0_0_0 + 8.590133101851803e-01*G0_0_1 + 8.590133101851912e-01*G0_1_0 + 3.875248015873003e-01*G0_1_1;
  block[384] = 5.726755401234568e-01*G0_0_1 + 5.726755401234521e-01*G0_1_0 + 1.356336805555552e+00*G0_1_1;
  block[385] = -5.726755401234522e-01*G0_0_1 - 5.726755401234518e-01*G0_1_0 + 4.951705798059838e-02*G0_1_1;
  block[386] = 1.011870315255727e+00*G0_0_0 + 2.413418347663125e+00*G0_0_1 + 2.413418347663137e+00*G0_1_0 + 4.305831128746662e-03*G0_1_1;
  block[387] = -3.810660548941781e+00*G0_0_0 - 2.409112516534376e+00*G0_0_1 - 2.409112516534385e+00*G0_1_0 + 4.305831128752935e-03*G0_1_1;
  block[388] = 1.194868138227508e+00*G0_0_0 + 6.221925981040484e-01*G0_0_1 + 6.221925981040551e-01*G0_1_0 + 4.951705798059325e-02*G0_1_1;
  block[389] = 2.109857253086354e-01*G0_0_0 + 7.836612654320956e-01*G0_0_1 + 7.836612654320906e-01*G0_1_0 + 1.356336805555554e+00*G0_1_1;
  block[390] = -3.186315035273289e-01*G0_0_0 - 4.714885085978804e-01*G0_0_1 - 4.714885085978787e-01*G0_1_0 + 3.875248015872976e-01*G0_1_1;
  block[391] = 3.272431657848243e-01*G0_0_0 - 3.315489969135849e-01*G0_0_1 - 3.315489969135820e-01*G0_1_0 + 4.305831128747693e-02*G0_1_1;
  block[392] = -2.734202766754806e-01*G0_0_0 + 7.319912918871330e-02*G0_0_1 + 7.319912918871292e-02*G0_1_0;
  block[393] = -1.808449074074066e+00*G0_0_0 - 3.057140101410922e+00*G0_0_1 - 3.057140101410926e+00*G0_1_0 - 6.329571759259242e+00*G0_1_1;
  block[394] = -3.875248015873045e-01*G0_0_0 + 2.551204943783062e+00*G0_0_1 + 2.551204943783056e+00*G0_1_0 - 3.875248015873030e-01*G0_1_1;
  block[395] = 1.420924272486771e+00*G0_0_0 - 4.305831128746777e-02*G0_0_1 - 4.305831128748010e-02*G0_1_0 - 8.611662257494537e-02*G0_1_1;
  block[396] = 8.654720568783034e+00*G0_0_0 + 4.973234953703684e+00*G0_0_1 + 4.973234953703684e+00*G0_1_0 + 9.946469907407380e+00*G0_1_1;
  block[397] = -5.877459490740715e+00*G0_0_0 - 2.938729745370362e+00*G0_0_1 - 2.938729745370342e+00*G0_1_0 - 3.875248015872976e-01*G0_1_1;
  block[398] = -2.023740630511462e+00*G0_0_0 - 3.272431657848315e+00*G0_0_1 - 3.272431657848328e+00*G0_1_0 - 6.329571759259244e+00*G0_1_1;
  block[399] = 1.076457782186940e-01*G0_0_0 + 1.076457782186937e-01*G0_0_1 + 1.076457782186936e-01*G0_1_0 + 1.076457782186930e-01*G0_1_1;
  block[400] = -5.382288910934627e-02*G0_0_0;
  block[401] = -5.382288910934706e-02*G0_1_1;
  block[402] = 1.194868138227507e+00*G0_0_0 + 5.726755401234569e-01*G0_0_1 + 5.726755401234541e-01*G0_1_0;
  block[403] = -3.810660548941781e+00*G0_0_0 - 1.401548032407403e+00*G0_0_1 - 1.401548032407397e+00*G0_1_0 + 1.011870315255730e+00*G0_1_1;
  block[404] = 1.011870315255724e+00*G0_0_0 - 1.401548032407400e+00*G0_0_1 - 1.401548032407403e+00*G0_1_0 - 3.810660548941780e+00*G0_1_1;
  block[405] = 5.726755401234561e-01*G0_0_1 + 5.726755401234553e-01*G0_1_0 + 1.194868138227506e+00*G0_1_1;
  block[406] = -5.726755401234574e-01*G0_0_1 - 5.726755401234551e-01*G0_1_0 + 2.109857253086376e-01*G0_1_1;
  block[407] = 1.011870315255736e+00*G0_0_0 + 1.528570050705483e-01*G0_0_1 + 1.528570050705477e-01*G0_1_0 - 3.186315035273307e-01*G0_1_1;
  block[408] = 1.033399470899463e+00*G0_0_0 + 6.587921626984095e-01*G0_0_1 + 6.587921626984078e-01*G0_1_0 + 3.272431657848266e-01*G0_1_1;
  block[409] = -4.198185350529071e-01*G0_0_0 - 3.466194058641949e-01*G0_0_1 - 3.466194058641973e-01*G0_1_0 - 2.734202766754797e-01*G0_1_1;
  block[410] = -2.734202766754771e-01*G0_0_0 - 3.466194058641907e-01*G0_0_1 - 3.466194058641930e-01*G0_1_0 - 4.198185350529062e-01*G0_1_1;
  block[411] = 3.272431657848213e-01*G0_0_0 + 6.587921626984080e-01*G0_0_1 + 6.587921626984062e-01*G0_1_0 + 1.033399470899465e+00*G0_1_1;
  block[412] = -3.186315035273279e-01*G0_0_0 + 1.528570050705533e-01*G0_0_1 + 1.528570050705495e-01*G0_1_0 + 1.011870315255732e+00*G0_1_1;
  block[413] = 2.109857253086375e-01*G0_0_0 - 5.726755401234560e-01*G0_0_1 - 5.726755401234549e-01*G0_1_0;
  block[414] = 1.420924272486761e+00*G0_0_0 + 1.463982583774231e+00*G0_0_1 + 1.463982583774245e+00*G0_1_0 + 1.420924272486762e+00*G0_1_1;
  block[415] = -3.875248015872873e-01*G0_0_0 - 2.938729745370359e+00*G0_0_1 - 2.938729745370359e+00*G0_1_0 - 5.877459490740717e+00*G0_1_1;
  block[416] = -1.808449074074076e+00*G0_0_0 + 1.248691027336848e+00*G0_0_1 + 1.248691027336857e+00*G0_1_0 - 2.023740630511466e+00*G0_1_1;
  block[417] = -5.877459490740716e+00*G0_0_0 - 2.938729745370342e+00*G0_0_1 - 2.938729745370362e+00*G0_1_0 - 3.875248015872980e-01*G0_1_1;
  block[418] = 8.654720568783032e+00*G0_0_0 + 3.681485615079350e+00*G0_0_1 + 3.681485615079350e+00*G0_1_0 + 8.654720568783036e+00*G0_1_1;
  block[419] = -2.023740630511460e+00*G0_0_0 + 1.248691027336846e+00*G0_0_1 + 1.248691027336855e+00*G0_1_0 - 1.808449074074063e+00*G0_1_1;
  block[420] = 1.076457782186933e-01*G0_0_0 + 1.076457782186933e-01*G0_0_1 + 1.076457782186927e-01*G0_1_0 + 1.076457782186930e-01*G0_1_1;
  block[421] = 1.076457782186940e-01*G0_0_0;
  block[422] = -2.152915564373862e-01*G0_1_1;
  block[423] = -9.903411596119880e-01*G0_0_0 - 2.626556988536167e-01*G0_0_1 - 2.626556988536183e-01*G0_1_0;
  block[424] = 2.023740630511464e+00*G0_0_0 + 4.133597883597934e-01*G0_0_1 + 4.133597883597986e-01*G0_1_0 - 5.166997354497267e-01*G0_1_1;
  block[425] = -3.961364638447955e+00*G0_0_0 - 1.308972663139319e+00*G0_0_1 - 1.308972663139333e+00*G0_1_0 + 7.319912918871205e-01*G0_1_1;
  block[426] = -1.662050815696645e+00*G0_0_1 - 1.662050815696636e+00*G0_1_0 - 2.820319389329793e+00*G0_1_1;
  block[427] = 1.662050815696641e+00*G0_0_1 + 1.662050815696636e+00*G0_1_0 + 5.037822420634901e-01*G0_1_1;
  block[428] = -3.961364638447957e+00*G0_0_0 - 2.652391975308627e+00*G0_0_1 - 2.652391975308633e+00*G0_1_0 - 6.114280202821838e-01*G0_1_1;
  block[429] = 2.023740630511456e+00*G0_0_0 + 1.610380842151663e+00*G0_0_1 + 1.610380842151671e+00*G0_1_0 + 6.803213183421453e-01*G0_1_1;
  block[430] = -9.903411596119888e-01*G0_0_0 - 7.276854607583696e-01*G0_0_1 - 7.276854607583744e-01*G0_1_0 - 4.650297619047563e-01*G0_1_1;
  block[431] = -1.420924272486780e-01*G0_0_0 - 4.047481261022955e-01*G0_0_1 - 4.047481261022893e-01*G0_1_0 - 6.674038249559106e-01*G0_1_1;
  block[432] = 3.444664902998644e-02*G0_0_0 + 1.033399470899494e-01*G0_0_1 + 1.033399470899473e-01*G0_1_0 - 3.444664902998185e-01*G0_1_1;
  block[433] = 3.444664902998111e-02*G0_0_0 - 6.889329805996401e-02*G0_0_1 - 6.889329805996351e-02*G0_1_0 - 5.166997354497324e-01*G0_1_1;
  block[434] = -1.420924272486763e-01*G0_0_0 + 2.626556988536156e-01*G0_0_1 + 2.626556988536135e-01*G0_1_0;
  block[435] = 1.033399470899472e+00*G0_0_0 + 1.377865961199302e+00*G0_0_1 + 1.377865961199292e+00*G0_1_0 + 2.755731922398589e+00*G0_1_1;
  block[436] = -8.611662257496502e-02*G0_0_0 - 4.305831128748491e-02*G0_0_1 - 4.305831128747886e-02*G0_1_0 + 1.420924272486761e+00*G0_1_1;
  block[437] = 1.033399470899471e+00*G0_0_0 - 3.444664902998293e-01*G0_0_1 - 3.444664902998205e-01*G0_1_0 + 1.033399470899460e+00*G0_1_1;
  block[438] = -2.023740630511462e+00*G0_0_0 - 3.272431657848328e+00*G0_0_1 - 3.272431657848315e+00*G0_1_0 - 6.329571759259244e+00*G0_1_1;
  block[439] = -2.023740630511460e+00*G0_0_0 + 1.248691027336855e+00*G0_0_1 + 1.248691027336846e+00*G0_1_0 - 1.808449074074064e+00*G0_1_1;
  block[440] = 7.922729276895913e+00*G0_0_0 + 3.961364638447966e+00*G0_0_1 + 3.961364638447966e+00*G0_1_0 + 7.061563051146356e+00*G0_1_1;
}

// No contribution from the boundary
bool BilinearForm::boundary_contribution() const { return false; }

void BilinearForm::eval(real block[], const AffineMap& map, unsigned int facet) const {}

/// This class contains the form to be evaluated, including
/// contributions from the interior and boundary of the domain.

class LinearForm : public dolfin::LinearForm
{
public:

  class TestElement;

  class FunctionElement_0;

  LinearForm(Function& w0);
  

  bool interior_contribution() const;

  void eval(real block[], const AffineMap& map) const;

  bool boundary_contribution() const;

  void eval(real block[], const AffineMap& map, unsigned int facet) const;

};

class LinearForm::TestElement : public dolfin::FiniteElement
{
public:

  TestElement() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~TestElement()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 21;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    static unsigned int edge_reordering_0[2][4] = {{0, 1, 2, 3}, {3, 2, 1, 0}};
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    int alignment = cell.alignment(1, 0);
    int offset = mesh.topology().size(0);
    nodes[3] = offset + 4*cell.entities(1)[0] + edge_reordering_0[alignment][0];
    nodes[4] = offset + 4*cell.entities(1)[0] + edge_reordering_0[alignment][1];
    nodes[5] = offset + 4*cell.entities(1)[0] + edge_reordering_0[alignment][2];
    nodes[6] = offset + 4*cell.entities(1)[0] + edge_reordering_0[alignment][3];
    alignment = cell.alignment(1, 1);
    nodes[7] = offset + 4*cell.entities(1)[1] + edge_reordering_0[alignment][0];
    nodes[8] = offset + 4*cell.entities(1)[1] + edge_reordering_0[alignment][1];
    nodes[9] = offset + 4*cell.entities(1)[1] + edge_reordering_0[alignment][2];
    nodes[10] = offset + 4*cell.entities(1)[1] + edge_reordering_0[alignment][3];
    alignment = cell.alignment(1, 2);
    nodes[11] = offset + 4*cell.entities(1)[2] + edge_reordering_0[alignment][0];
    nodes[12] = offset + 4*cell.entities(1)[2] + edge_reordering_0[alignment][1];
    nodes[13] = offset + 4*cell.entities(1)[2] + edge_reordering_0[alignment][2];
    nodes[14] = offset + 4*cell.entities(1)[2] + edge_reordering_0[alignment][3];
    offset = offset + 4*mesh.topology().size(1);
    nodes[15] = offset + 6*cell.index() + 0;
    nodes[16] = offset + 6*cell.index() + 1;
    nodes[17] = offset + 6*cell.index() + 2;
    nodes[18] = offset + 6*cell.index() + 3;
    nodes[19] = offset + 6*cell.index() + 4;
    nodes[20] = offset + 6*cell.index() + 5;
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[3] = map(8.000000000000000e-01, 2.000000000000000e-01);
    points[4] = map(6.000000000000000e-01, 4.000000000000000e-01);
    points[5] = map(4.000000000000000e-01, 6.000000000000000e-01);
    points[6] = map(2.000000000000000e-01, 8.000000000000000e-01);
    points[7] = map(0.000000000000000e+00, 8.000000000000000e-01);
    points[8] = map(0.000000000000000e+00, 6.000000000000000e-01);
    points[9] = map(0.000000000000000e+00, 4.000000000000000e-01);
    points[10] = map(0.000000000000000e+00, 2.000000000000000e-01);
    points[11] = map(2.000000000000000e-01, 0.000000000000000e+00);
    points[12] = map(4.000000000000000e-01, 0.000000000000000e+00);
    points[13] = map(6.000000000000000e-01, 0.000000000000000e+00);
    points[14] = map(8.000000000000000e-01, 0.000000000000000e+00);
    points[15] = map(2.000000000000000e-01, 2.000000000000000e-01);
    points[16] = map(4.000000000000000e-01, 2.000000000000000e-01);
    points[17] = map(6.000000000000000e-01, 2.000000000000000e-01);
    points[18] = map(2.000000000000000e-01, 4.000000000000000e-01);
    points[19] = map(4.000000000000000e-01, 4.000000000000000e-01);
    points[20] = map(2.000000000000000e-01, 6.000000000000000e-01);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 0;
    components[4] = 0;
    components[5] = 0;
    components[6] = 0;
    components[7] = 0;
    components[8] = 0;
    components[9] = 0;
    components[10] = 0;
    components[11] = 0;
    components[12] = 0;
    components[13] = 0;
    components[14] = 0;
    components[15] = 0;
    components[16] = 0;
    components[17] = 0;
    components[18] = 0;
    components[19] = 0;
    components[20] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "triangle", 5);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class LinearForm::FunctionElement_0 : public dolfin::FiniteElement
{
public:

  FunctionElement_0() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~FunctionElement_0()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 21;
  }

  inline unsigned int shapedim() const
  {
    return 2;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    static unsigned int edge_reordering_0[2][4] = {{0, 1, 2, 3}, {3, 2, 1, 0}};
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    int alignment = cell.alignment(1, 0);
    int offset = mesh.topology().size(0);
    nodes[3] = offset + 4*cell.entities(1)[0] + edge_reordering_0[alignment][0];
    nodes[4] = offset + 4*cell.entities(1)[0] + edge_reordering_0[alignment][1];
    nodes[5] = offset + 4*cell.entities(1)[0] + edge_reordering_0[alignment][2];
    nodes[6] = offset + 4*cell.entities(1)[0] + edge_reordering_0[alignment][3];
    alignment = cell.alignment(1, 1);
    nodes[7] = offset + 4*cell.entities(1)[1] + edge_reordering_0[alignment][0];
    nodes[8] = offset + 4*cell.entities(1)[1] + edge_reordering_0[alignment][1];
    nodes[9] = offset + 4*cell.entities(1)[1] + edge_reordering_0[alignment][2];
    nodes[10] = offset + 4*cell.entities(1)[1] + edge_reordering_0[alignment][3];
    alignment = cell.alignment(1, 2);
    nodes[11] = offset + 4*cell.entities(1)[2] + edge_reordering_0[alignment][0];
    nodes[12] = offset + 4*cell.entities(1)[2] + edge_reordering_0[alignment][1];
    nodes[13] = offset + 4*cell.entities(1)[2] + edge_reordering_0[alignment][2];
    nodes[14] = offset + 4*cell.entities(1)[2] + edge_reordering_0[alignment][3];
    offset = offset + 4*mesh.topology().size(1);
    nodes[15] = offset + 6*cell.index() + 0;
    nodes[16] = offset + 6*cell.index() + 1;
    nodes[17] = offset + 6*cell.index() + 2;
    nodes[18] = offset + 6*cell.index() + 3;
    nodes[19] = offset + 6*cell.index() + 4;
    nodes[20] = offset + 6*cell.index() + 5;
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00);
    points[3] = map(8.000000000000000e-01, 2.000000000000000e-01);
    points[4] = map(6.000000000000000e-01, 4.000000000000000e-01);
    points[5] = map(4.000000000000000e-01, 6.000000000000000e-01);
    points[6] = map(2.000000000000000e-01, 8.000000000000000e-01);
    points[7] = map(0.000000000000000e+00, 8.000000000000000e-01);
    points[8] = map(0.000000000000000e+00, 6.000000000000000e-01);
    points[9] = map(0.000000000000000e+00, 4.000000000000000e-01);
    points[10] = map(0.000000000000000e+00, 2.000000000000000e-01);
    points[11] = map(2.000000000000000e-01, 0.000000000000000e+00);
    points[12] = map(4.000000000000000e-01, 0.000000000000000e+00);
    points[13] = map(6.000000000000000e-01, 0.000000000000000e+00);
    points[14] = map(8.000000000000000e-01, 0.000000000000000e+00);
    points[15] = map(2.000000000000000e-01, 2.000000000000000e-01);
    points[16] = map(4.000000000000000e-01, 2.000000000000000e-01);
    points[17] = map(6.000000000000000e-01, 2.000000000000000e-01);
    points[18] = map(2.000000000000000e-01, 4.000000000000000e-01);
    points[19] = map(4.000000000000000e-01, 4.000000000000000e-01);
    points[20] = map(2.000000000000000e-01, 6.000000000000000e-01);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 0;
    components[4] = 0;
    components[5] = 0;
    components[6] = 0;
    components[7] = 0;
    components[8] = 0;
    components[9] = 0;
    components[10] = 0;
    components[11] = 0;
    components[12] = 0;
    components[13] = 0;
    components[14] = 0;
    components[15] = 0;
    components[16] = 0;
    components[17] = 0;
    components[18] = 0;
    components[19] = 0;
    components[20] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "triangle", 5);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

LinearForm::LinearForm(Function& w0) : dolfin::LinearForm(1)
{
  // Create finite element for test space
  _test = new TestElement();

  // Add functions
  initFunction(0, w0, new FunctionElement_0());
}

// Contribution from the interior
bool LinearForm::interior_contribution() const { return true; }

void LinearForm::eval(real block[], const AffineMap& map) const
{
  // Compute coefficients
  const real c0_0 = c[0][0];
  const real c0_1 = c[0][1];
  const real c0_2 = c[0][2];
  const real c0_3 = c[0][3];
  const real c0_4 = c[0][4];
  const real c0_5 = c[0][5];
  const real c0_6 = c[0][6];
  const real c0_7 = c[0][7];
  const real c0_8 = c[0][8];
  const real c0_9 = c[0][9];
  const real c0_10 = c[0][10];
  const real c0_11 = c[0][11];
  const real c0_12 = c[0][12];
  const real c0_13 = c[0][13];
  const real c0_14 = c[0][14];
  const real c0_15 = c[0][15];
  const real c0_16 = c[0][16];
  const real c0_17 = c[0][17];
  const real c0_18 = c[0][18];
  const real c0_19 = c[0][19];
  const real c0_20 = c[0][20];

  // Compute geometry tensors
  const real G0_0 = map.det*c0_0;
  const real G0_1 = map.det*c0_1;
  const real G0_2 = map.det*c0_2;
  const real G0_3 = map.det*c0_3;
  const real G0_4 = map.det*c0_4;
  const real G0_5 = map.det*c0_5;
  const real G0_6 = map.det*c0_6;
  const real G0_7 = map.det*c0_7;
  const real G0_8 = map.det*c0_8;
  const real G0_9 = map.det*c0_9;
  const real G0_10 = map.det*c0_10;
  const real G0_11 = map.det*c0_11;
  const real G0_12 = map.det*c0_12;
  const real G0_13 = map.det*c0_13;
  const real G0_14 = map.det*c0_14;
  const real G0_15 = map.det*c0_15;
  const real G0_16 = map.det*c0_16;
  const real G0_17 = map.det*c0_17;
  const real G0_18 = map.det*c0_18;
  const real G0_19 = map.det*c0_19;
  const real G0_20 = map.det*c0_20;

  // Compute element tensor
  block[0] = 1.389452561327610e-03*G0_0 + 1.238774567767666e-04*G0_1 + 1.238774567767667e-04*G0_2 + 3.636470107824420e-04*G0_3 + 2.072018131045970e-04*G0_4 + 2.072018131045992e-04*G0_5 + 3.636470107824400e-04*G0_6 - 2.296443268665478e-05*G0_7 + 4.626811267436415e-04*G0_8 - 9.582431457431771e-04*G0_9 + 1.181363486051024e-03*G0_10 + 1.181363486051025e-03*G0_11 - 9.582431457431756e-04*G0_12 + 4.626811267436406e-04*G0_13 - 2.296443268665224e-05*G0_14 + 8.924813612313922e-04*G0_15 - 9.746835918711264e-04*G0_16 + 8.794333881139765e-04*G0_17 - 9.746835918711270e-04*G0_18 + 6.497890612474163e-04*G0_19 + 8.794333881139744e-04*G0_20;
  block[1] = 1.238774567767666e-04*G0_0 + 1.389452561327609e-03*G0_1 + 1.238774567767667e-04*G0_2 + 1.181363486051026e-03*G0_3 - 9.582431457431799e-04*G0_4 + 4.626811267436434e-04*G0_5 - 2.296443268665542e-05*G0_6 + 3.636470107824404e-04*G0_7 + 2.072018131045974e-04*G0_8 + 2.072018131045983e-04*G0_9 + 3.636470107824388e-04*G0_10 - 2.296443268665684e-05*G0_11 + 4.626811267436472e-04*G0_12 - 9.582431457431842e-04*G0_13 + 1.181363486051034e-03*G0_14 + 8.794333881139730e-04*G0_15 - 9.746835918711250e-04*G0_16 + 8.924813612313922e-04*G0_17 + 6.497890612474157e-04*G0_18 - 9.746835918711266e-04*G0_19 + 8.794333881139752e-04*G0_20;
  block[2] = 1.238774567767667e-04*G0_0 + 1.238774567767667e-04*G0_1 + 1.389452561327609e-03*G0_2 - 2.296443268665537e-05*G0_3 + 4.626811267436424e-04*G0_4 - 9.582431457431783e-04*G0_5 + 1.181363486051027e-03*G0_6 + 1.181363486051027e-03*G0_7 - 9.582431457431778e-04*G0_8 + 4.626811267436424e-04*G0_9 - 2.296443268665557e-05*G0_10 + 3.636470107824401e-04*G0_11 + 2.072018131045994e-04*G0_12 + 2.072018131045976e-04*G0_13 + 3.636470107824414e-04*G0_14 + 8.794333881139760e-04*G0_15 + 6.497890612474167e-04*G0_16 + 8.794333881139755e-04*G0_17 - 9.746835918711263e-04*G0_18 - 9.746835918711278e-04*G0_19 + 8.924813612313930e-04*G0_20;
  block[3] = 3.636470107824420e-04*G0_0 + 1.181363486051026e-03*G0_1 - 2.296443268665534e-05*G0_2 + 1.470506570333010e-02*G0_3 - 9.583736254743529e-03*G0_4 + 7.704828125835336e-03*G0_5 - 3.969845820974423e-03*G0_6 - 2.482376885588769e-03*G0_7 - 4.566790591096413e-05*G0_8 - 1.448325016033393e-03*G0_9 - 4.110111531986678e-04*G0_10 - 2.482376885588782e-03*G0_11 + 5.760680131340069e-03*G0_12 - 7.352532851665068e-03*G0_13 + 7.352532851665068e-03*G0_14 + 7.828783870450945e-04*G0_15 - 3.816532136844793e-03*G0_16 + 1.024265889717319e-02*G0_17 - 1.370037177328897e-03*G0_18 + 9.785979838061916e-05*G0_19 - 2.805314220244864e-03*G0_20;
  block[4] = 2.072018131045969e-04*G0_0 - 9.582431457431799e-04*G0_1 + 4.626811267436425e-04*G0_2 - 9.583736254743529e-03*G0_3 + 2.207717051467130e-02*G0_4 - 1.347855623029281e-02*G0_5 + 7.704828125835334e-03*G0_6 + 5.760680131340045e-03*G0_7 - 1.356989204211468e-03*G0_8 + 2.818362193362282e-03*G0_9 - 1.448325016033392e-03*G0_10 - 4.566790591095912e-05*G0_11 - 1.356989204211485e-03*G0_12 + 2.948841924536488e-03*G0_13 - 7.352532851665064e-03*G0_14 + 3.131513548180323e-03*G0_15 - 5.480148709315564e-03*G0_16 - 1.435277042915999e-03*G0_17 - 5.871587902838010e-04*G0_18 + 5.284429112554306e-03*G0_19 + 5.088709515793023e-03*G0_20;
  block[5] = 2.072018131045993e-04*G0_0 + 4.626811267436432e-04*G0_1 - 9.582431457431784e-04*G0_2 + 7.704828125835336e-03*G0_3 - 1.347855623029281e-02*G0_4 + 2.207717051467127e-02*G0_5 - 9.583736254743522e-03*G0_6 - 7.352532851665035e-03*G0_7 + 2.948841924536461e-03*G0_8 - 1.356989204211462e-03*G0_9 - 4.566790591096897e-05*G0_10 - 1.448325016033403e-03*G0_11 + 2.818362193362298e-03*G0_12 - 1.356989204211484e-03*G0_13 + 5.760680131340064e-03*G0_14 + 3.131513548180326e-03*G0_15 - 5.871587902838108e-04*G0_16 + 5.088709515793034e-03*G0_17 - 5.480148709315570e-03*G0_18 + 5.284429112554286e-03*G0_19 - 1.435277042915976e-03*G0_20;
  block[6] = 3.636470107824400e-04*G0_0 - 2.296443268665542e-05*G0_1 + 1.181363486051026e-03*G0_2 - 3.969845820974424e-03*G0_3 + 7.704828125835335e-03*G0_4 - 9.583736254743520e-03*G0_5 + 1.470506570333010e-02*G0_6 + 7.352532851665039e-03*G0_7 - 7.352532851665042e-03*G0_8 + 5.760680131340045e-03*G0_9 - 2.482376885588775e-03*G0_10 - 4.110111531986672e-04*G0_11 - 1.448325016033400e-03*G0_12 - 4.566790591095923e-05*G0_13 - 2.482376885588775e-03*G0_14 + 7.828783870450752e-04*G0_15 - 1.370037177328889e-03*G0_16 - 2.805314220244870e-03*G0_17 - 3.816532136844772e-03*G0_18 + 9.785979838063721e-05*G0_19 + 1.024265889717315e-02*G0_20;
  block[7] = -2.296443268665490e-05*G0_0 + 3.636470107824404e-04*G0_1 + 1.181363486051027e-03*G0_2 - 2.482376885588769e-03*G0_3 + 5.760680131340045e-03*G0_4 - 7.352532851665035e-03*G0_5 + 7.352532851665038e-03*G0_6 + 1.470506570333008e-02*G0_7 - 9.583736254743517e-03*G0_8 + 7.704828125835326e-03*G0_9 - 3.969845820974422e-03*G0_10 - 2.482376885588773e-03*G0_11 - 4.566790591096282e-05*G0_12 - 1.448325016033397e-03*G0_13 - 4.110111531986644e-04*G0_14 - 2.805314220244868e-03*G0_15 - 1.370037177328898e-03*G0_16 + 7.828783870450883e-04*G0_17 + 9.785979838063686e-05*G0_18 - 3.816532136844762e-03*G0_19 + 1.024265889717314e-02*G0_20;
  block[8] = 4.626811267436415e-04*G0_0 + 2.072018131045974e-04*G0_1 - 9.582431457431778e-04*G0_2 - 4.566790591096413e-05*G0_3 - 1.356989204211468e-03*G0_4 + 2.948841924536460e-03*G0_5 - 7.352532851665042e-03*G0_6 - 9.583736254743513e-03*G0_7 + 2.207717051467125e-02*G0_8 - 1.347855623029279e-02*G0_9 + 7.704828125835322e-03*G0_10 + 5.760680131340044e-03*G0_11 - 1.356989204211466e-03*G0_12 + 2.818362193362284e-03*G0_13 - 1.448325016033398e-03*G0_14 + 5.088709515793019e-03*G0_15 - 5.871587902838033e-04*G0_16 + 3.131513548180315e-03*G0_17 + 5.284429112554291e-03*G0_18 - 5.480148709315555e-03*G0_19 - 1.435277042915978e-03*G0_20;
  block[9] = -9.582431457431771e-04*G0_0 + 2.072018131045983e-04*G0_1 + 4.626811267436424e-04*G0_2 - 1.448325016033393e-03*G0_3 + 2.818362193362282e-03*G0_4 - 1.356989204211462e-03*G0_5 + 5.760680131340045e-03*G0_6 + 7.704828125835325e-03*G0_7 - 1.347855623029279e-02*G0_8 + 2.207717051467125e-02*G0_9 - 9.583736254743506e-03*G0_10 - 7.352532851665040e-03*G0_11 + 2.948841924536464e-03*G0_12 - 1.356989204211470e-03*G0_13 - 4.566790591096343e-05*G0_14 - 1.435277042915975e-03*G0_15 - 5.480148709315573e-03*G0_16 + 3.131513548180324e-03*G0_17 + 5.284429112554291e-03*G0_18 - 5.871587902838057e-04*G0_19 + 5.088709515793022e-03*G0_20;
  block[10] = 1.181363486051025e-03*G0_0 + 3.636470107824389e-04*G0_1 - 2.296443268665557e-05*G0_2 - 4.110111531986678e-04*G0_3 - 1.448325016033392e-03*G0_4 - 4.566790591096897e-05*G0_5 - 2.482376885588775e-03*G0_6 - 3.969845820974421e-03*G0_7 + 7.704828125835322e-03*G0_8 - 9.583736254743506e-03*G0_9 + 1.470506570333007e-02*G0_10 + 7.352532851665036e-03*G0_11 - 7.352532851665038e-03*G0_12 + 5.760680131340044e-03*G0_13 - 2.482376885588774e-03*G0_14 + 1.024265889717312e-02*G0_15 - 3.816532136844756e-03*G0_16 + 7.828783870450700e-04*G0_17 + 9.785979838063560e-05*G0_18 - 1.370037177328880e-03*G0_19 - 2.805314220244872e-03*G0_20;
  block[11] = 1.181363486051026e-03*G0_0 - 2.296443268665684e-05*G0_1 + 3.636470107824401e-04*G0_2 - 2.482376885588782e-03*G0_3 - 4.566790591095912e-05*G0_4 - 1.448325016033403e-03*G0_5 - 4.110111531986669e-04*G0_6 - 2.482376885588773e-03*G0_7 + 5.760680131340044e-03*G0_8 - 7.352532851665040e-03*G0_9 + 7.352532851665036e-03*G0_10 + 1.470506570333010e-02*G0_11 - 9.583736254743527e-03*G0_12 + 7.704828125835340e-03*G0_13 - 3.969845820974436e-03*G0_14 + 1.024265889717313e-02*G0_15 + 9.785979838065079e-05*G0_16 - 2.805314220244900e-03*G0_17 - 3.816532136844778e-03*G0_18 - 1.370037177328874e-03*G0_19 + 7.828783870450762e-04*G0_20;
  block[12] = -9.582431457431756e-04*G0_0 + 4.626811267436470e-04*G0_1 + 2.072018131045994e-04*G0_2 + 5.760680131340069e-03*G0_3 - 1.356989204211484e-03*G0_4 + 2.818362193362298e-03*G0_5 - 1.448325016033400e-03*G0_6 - 4.566790591096281e-05*G0_7 - 1.356989204211466e-03*G0_8 + 2.948841924536464e-03*G0_9 - 7.352532851665038e-03*G0_10 - 9.583736254743526e-03*G0_11 + 2.207717051467130e-02*G0_12 - 1.347855623029283e-02*G0_13 + 7.704828125835363e-03*G0_14 - 1.435277042915960e-03*G0_15 + 5.284429112554269e-03*G0_16 + 5.088709515793076e-03*G0_17 - 5.480148709315569e-03*G0_18 - 5.871587902838379e-04*G0_19 + 3.131513548180339e-03*G0_20;
  block[13] = 4.626811267436406e-04*G0_0 - 9.582431457431842e-04*G0_1 + 2.072018131045974e-04*G0_2 - 7.352532851665068e-03*G0_3 + 2.948841924536487e-03*G0_4 - 1.356989204211484e-03*G0_5 - 4.566790591095933e-05*G0_6 - 1.448325016033397e-03*G0_7 + 2.818362193362284e-03*G0_8 - 1.356989204211469e-03*G0_9 + 5.760680131340044e-03*G0_10 + 7.704828125835340e-03*G0_11 - 1.347855623029283e-02*G0_12 + 2.207717051467131e-02*G0_13 - 9.583736254743560e-03*G0_14 + 5.088709515793014e-03*G0_15 + 5.284429112554314e-03*G0_16 - 1.435277042916029e-03*G0_17 - 5.871587902838134e-04*G0_18 - 5.480148709315539e-03*G0_19 + 3.131513548180316e-03*G0_20;
  block[14] = -2.296443268665224e-05*G0_0 + 1.181363486051034e-03*G0_1 + 3.636470107824414e-04*G0_2 + 7.352532851665068e-03*G0_3 - 7.352532851665062e-03*G0_4 + 5.760680131340064e-03*G0_5 - 2.482376885588776e-03*G0_6 - 4.110111531986643e-04*G0_7 - 1.448325016033398e-03*G0_8 - 4.566790591096343e-05*G0_9 - 2.482376885588773e-03*G0_10 - 3.969845820974436e-03*G0_11 + 7.704828125835363e-03*G0_12 - 9.583736254743560e-03*G0_13 + 1.470506570333014e-02*G0_14 - 2.805314220244859e-03*G0_15 + 9.785979838061529e-05*G0_16 + 1.024265889717319e-02*G0_17 - 1.370037177328902e-03*G0_18 - 3.816532136844776e-03*G0_19 + 7.828783870450957e-04*G0_20;
  block[15] = 8.924813612313922e-04*G0_0 + 8.794333881139732e-04*G0_1 + 8.794333881139762e-04*G0_2 + 7.828783870450944e-04*G0_3 + 3.131513548180323e-03*G0_4 + 3.131513548180325e-03*G0_5 + 7.828783870450752e-04*G0_6 - 2.805314220244868e-03*G0_7 + 5.088709515793018e-03*G0_8 - 1.435277042915976e-03*G0_9 + 1.024265889717312e-02*G0_10 + 1.024265889717313e-02*G0_11 - 1.435277042915960e-03*G0_12 + 5.088709515793014e-03*G0_13 - 2.805314220244860e-03*G0_14 + 7.045905483405727e-02*G0_15 - 1.565756774090159e-02*G0_16 + 1.174317580567622e-02*G0_17 - 1.565756774090159e-02*G0_18 + 3.914391935225399e-03*G0_19 + 1.174317580567622e-02*G0_20;
  block[16] = -9.746835918711262e-04*G0_0 - 9.746835918711254e-04*G0_1 + 6.497890612474167e-04*G0_2 - 3.816532136844793e-03*G0_3 - 5.480148709315565e-03*G0_4 - 5.871587902838106e-04*G0_5 - 1.370037177328889e-03*G0_6 - 1.370037177328898e-03*G0_7 - 5.871587902838031e-04*G0_8 - 5.480148709315574e-03*G0_9 - 3.816532136844756e-03*G0_10 + 9.785979838065149e-05*G0_11 + 5.284429112554269e-03*G0_12 + 5.284429112554316e-03*G0_13 + 9.785979838061508e-05*G0_14 - 1.565756774090159e-02*G0_15 + 7.633064273689537e-02*G0_16 - 1.565756774090167e-02*G0_17 - 1.174317580567623e-02*G0_18 - 1.174317580567617e-02*G0_19 + 3.914391935225394e-03*G0_20;
  block[17] = 8.794333881139763e-04*G0_0 + 8.924813612313922e-04*G0_1 + 8.794333881139755e-04*G0_2 + 1.024265889717318e-02*G0_3 - 1.435277042915999e-03*G0_4 + 5.088709515793034e-03*G0_5 - 2.805314220244871e-03*G0_6 + 7.828783870450886e-04*G0_7 + 3.131513548180315e-03*G0_8 + 3.131513548180324e-03*G0_9 + 7.828783870450703e-04*G0_10 - 2.805314220244900e-03*G0_11 + 5.088709515793076e-03*G0_12 - 1.435277042916030e-03*G0_13 + 1.024265889717319e-02*G0_14 + 1.174317580567622e-02*G0_15 - 1.565756774090167e-02*G0_16 + 7.045905483405733e-02*G0_17 + 3.914391935225403e-03*G0_18 - 1.565756774090165e-02*G0_19 + 1.174317580567622e-02*G0_20;
  block[18] = -9.746835918711270e-04*G0_0 + 6.497890612474157e-04*G0_1 - 9.746835918711263e-04*G0_2 - 1.370037177328898e-03*G0_3 - 5.871587902838011e-04*G0_4 - 5.480148709315568e-03*G0_5 - 3.816532136844773e-03*G0_6 + 9.785979838063572e-05*G0_7 + 5.284429112554291e-03*G0_8 + 5.284429112554289e-03*G0_9 + 9.785979838063560e-05*G0_10 - 3.816532136844777e-03*G0_11 - 5.480148709315569e-03*G0_12 - 5.871587902838138e-04*G0_13 - 1.370037177328902e-03*G0_14 - 1.565756774090160e-02*G0_15 - 1.174317580567623e-02*G0_16 + 3.914391935225405e-03*G0_17 + 7.633064273689540e-02*G0_18 - 1.174317580567617e-02*G0_19 - 1.565756774090163e-02*G0_20;
  block[19] = 6.497890612474161e-04*G0_0 - 9.746835918711264e-04*G0_1 - 9.746835918711278e-04*G0_2 + 9.785979838061943e-05*G0_3 + 5.284429112554306e-03*G0_4 + 5.284429112554286e-03*G0_5 + 9.785979838063724e-05*G0_6 - 3.816532136844764e-03*G0_7 - 5.480148709315553e-03*G0_8 - 5.871587902838061e-04*G0_9 - 1.370037177328880e-03*G0_10 - 1.370037177328873e-03*G0_11 - 5.871587902838381e-04*G0_12 - 5.480148709315538e-03*G0_13 - 3.816532136844777e-03*G0_14 + 3.914391935225399e-03*G0_15 - 1.174317580567618e-02*G0_16 - 1.565756774090165e-02*G0_17 - 1.174317580567617e-02*G0_18 + 7.633064273689530e-02*G0_19 - 1.565756774090161e-02*G0_20;
  block[20] = 8.794333881139745e-04*G0_0 + 8.794333881139752e-04*G0_1 + 8.924813612313931e-04*G0_2 - 2.805314220244864e-03*G0_3 + 5.088709515793023e-03*G0_4 - 1.435277042915975e-03*G0_5 + 1.024265889717315e-02*G0_6 + 1.024265889717314e-02*G0_7 - 1.435277042915977e-03*G0_8 + 5.088709515793021e-03*G0_9 - 2.805314220244872e-03*G0_10 + 7.828783870450753e-04*G0_11 + 3.131513548180339e-03*G0_12 + 3.131513548180316e-03*G0_13 + 7.828783870450957e-04*G0_14 + 1.174317580567622e-02*G0_15 + 3.914391935225392e-03*G0_16 + 1.174317580567622e-02*G0_17 - 1.565756774090164e-02*G0_18 - 1.565756774090161e-02*G0_19 + 7.045905483405727e-02*G0_20;
}

// No contribution from the boundary
bool LinearForm::boundary_contribution() const { return false; }

void LinearForm::eval(real block[], const AffineMap& map, unsigned int facet) const {}

} }

#endif
