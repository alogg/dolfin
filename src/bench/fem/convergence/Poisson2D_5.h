// This code conforms with the UFC specification version 1.0
// and was automatically generated by FFC version 0.3.5.
//
// Warning: This code was generated with the option '-l dolfin'
// and contains DOLFIN-specific wrappers that depend on DOLFIN.

#ifndef __POISSON2D_5_H
#define __POISSON2D_5_H

#include <cmath>
#include <stdexcept>
#include <ufc.h>

/// This class defines the interface for a finite element.

class UFC_Poisson2D_5BilinearForm_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  UFC_Poisson2D_5BilinearForm_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson2D_5BilinearForm_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "Lagrange finite element of degree 5 on a triangle";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 21;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Not generated (compiled with -fno-evaluate_basis)
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Not generated (compiled with -fno-evaluate_basis_derivatives)
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    double values[1];
    double coordinates[2];
    
    // Nodal coordinates on reference cell
    static double X[21][2] = {{0, 0}, {1, 0}, {0, 1}, {0.8, 0.2}, {0.6, 0.4}, {0.4, 0.6}, {0.2, 0.8}, {0, 0.8}, {0, 0.6}, {0, 0.4}, {0, 0.2}, {0.2, 0}, {0.4, 0}, {0.6, 0}, {0.8, 0}, {0.2, 0.2}, {0.4, 0.2}, {0.6, 0.2}, {0.2, 0.4}, {0.4, 0.4}, {0.2, 0.6}};
    
    // Components for each dof
    static unsigned int components[21] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0] - X[i][1];
    const double w1 = X[i][0];
    const double w2 = X[i][1];
    
    // Compute affine mapping x = F(X)
    coordinates[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0];
    coordinates[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1];
    
    // Evaluate function at coordinates
    f.evaluate(values, coordinates, c);
    
    // Pick component for evaluation
    return values[components[i]];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate at vertices and use affine mapping
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new UFC_Poisson2D_5BilinearForm_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class UFC_Poisson2D_5BilinearForm_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  UFC_Poisson2D_5BilinearForm_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson2D_5BilinearForm_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "Lagrange finite element of degree 5 on a triangle";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 21;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Not generated (compiled with -fno-evaluate_basis)
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Not generated (compiled with -fno-evaluate_basis_derivatives)
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    double values[1];
    double coordinates[2];
    
    // Nodal coordinates on reference cell
    static double X[21][2] = {{0, 0}, {1, 0}, {0, 1}, {0.8, 0.2}, {0.6, 0.4}, {0.4, 0.6}, {0.2, 0.8}, {0, 0.8}, {0, 0.6}, {0, 0.4}, {0, 0.2}, {0.2, 0}, {0.4, 0}, {0.6, 0}, {0.8, 0}, {0.2, 0.2}, {0.4, 0.2}, {0.6, 0.2}, {0.2, 0.4}, {0.4, 0.4}, {0.2, 0.6}};
    
    // Components for each dof
    static unsigned int components[21] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0] - X[i][1];
    const double w1 = X[i][0];
    const double w2 = X[i][1];
    
    // Compute affine mapping x = F(X)
    coordinates[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0];
    coordinates[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1];
    
    // Evaluate function at coordinates
    f.evaluate(values, coordinates, c);
    
    // Pick component for evaluation
    return values[components[i]];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate at vertices and use affine mapping
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new UFC_Poisson2D_5BilinearForm_finite_element_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class UFC_Poisson2D_5BilinearForm_dof_map_0: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  UFC_Poisson2D_5BilinearForm_dof_map_0() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~UFC_Poisson2D_5BilinearForm_dof_map_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for Lagrange finite element of degree 5 on a triangle";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return true;
      break;
    case 2:
      return true;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = m.num_entities[0] + 4*m.num_entities[1] + 6*m.num_entities[2];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space
  virtual unsigned int local_dimension() const
  {
    return 21;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 6;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    unsigned int offset = m.num_entities[0];
    dofs[3] = offset + 4*c.entity_indices[1][0];
    dofs[4] = offset + 4*c.entity_indices[1][0] + 1;
    dofs[5] = offset + 4*c.entity_indices[1][0] + 2;
    dofs[6] = offset + 4*c.entity_indices[1][0] + 3;
    dofs[7] = offset + 4*c.entity_indices[1][1];
    dofs[8] = offset + 4*c.entity_indices[1][1] + 1;
    dofs[9] = offset + 4*c.entity_indices[1][1] + 2;
    dofs[10] = offset + 4*c.entity_indices[1][1] + 3;
    dofs[11] = offset + 4*c.entity_indices[1][2];
    dofs[12] = offset + 4*c.entity_indices[1][2] + 1;
    dofs[13] = offset + 4*c.entity_indices[1][2] + 2;
    dofs[14] = offset + 4*c.entity_indices[1][2] + 3;
    offset = offset + 4*m.num_entities[1];
    dofs[15] = offset + 6*c.entity_indices[2][0];
    dofs[16] = offset + 6*c.entity_indices[2][0] + 1;
    dofs[17] = offset + 6*c.entity_indices[2][0] + 2;
    dofs[18] = offset + 6*c.entity_indices[2][0] + 3;
    dofs[19] = offset + 6*c.entity_indices[2][0] + 4;
    dofs[20] = offset + 6*c.entity_indices[2][0] + 5;
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   const ufc::mesh& m,
                                   const ufc::cell& c,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 7;
      dofs[3] = 8;
      dofs[4] = 9;
      dofs[5] = 10;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 11;
      dofs[3] = 12;
      dofs[4] = 13;
      dofs[5] = 14;
      break;
    }
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double **coordinates,
                                    const ufc::cell& c) const
  {
    // This function is implemented assuming affine mapping!!
    // Get cell vertices
    const double * const * x = c.coordinates;
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[3][0] = 0.8*x[1][0] + 0.2*x[2][0];
    coordinates[3][1] = 0.8*x[1][1] + 0.2*x[2][1];
    coordinates[4][0] = 0.6*x[1][0] + 0.4*x[2][0];
    coordinates[4][1] = 0.6*x[1][1] + 0.4*x[2][1];
    coordinates[5][0] = 0.4*x[1][0] + 0.6*x[2][0];
    coordinates[5][1] = 0.4*x[1][1] + 0.6*x[2][1];
    coordinates[6][0] = 0.2*x[1][0] + 0.8*x[2][0];
    coordinates[6][1] = 0.2*x[1][1] + 0.8*x[2][1];
    coordinates[7][0] = 0.2*x[0][0] + 0.8*x[2][0];
    coordinates[7][1] = 0.2*x[0][1] + 0.8*x[2][1];
    coordinates[8][0] = 0.4*x[0][0] + 0.6*x[2][0];
    coordinates[8][1] = 0.4*x[0][1] + 0.6*x[2][1];
    coordinates[9][0] = 0.6*x[0][0] + 0.4*x[2][0];
    coordinates[9][1] = 0.6*x[0][1] + 0.4*x[2][1];
    coordinates[10][0] = 0.8*x[0][0] + 0.2*x[2][0];
    coordinates[10][1] = 0.8*x[0][1] + 0.2*x[2][1];
    coordinates[11][0] = 0.8*x[0][0] + 0.2*x[1][0];
    coordinates[11][1] = 0.8*x[0][1] + 0.2*x[1][1];
    coordinates[12][0] = 0.6*x[0][0] + 0.4*x[1][0];
    coordinates[12][1] = 0.6*x[0][1] + 0.4*x[1][1];
    coordinates[13][0] = 0.4*x[0][0] + 0.6*x[1][0];
    coordinates[13][1] = 0.4*x[0][1] + 0.6*x[1][1];
    coordinates[14][0] = 0.2*x[0][0] + 0.8*x[1][0];
    coordinates[14][1] = 0.2*x[0][1] + 0.8*x[1][1];
    coordinates[15][0] = 0.6*x[0][0] + 0.2*x[1][0] + 0.2*x[2][0];
    coordinates[15][1] = 0.6*x[0][1] + 0.2*x[1][1] + 0.2*x[2][1];
    coordinates[16][0] = 0.4*x[0][0] + 0.4*x[1][0] + 0.2*x[2][0];
    coordinates[16][1] = 0.4*x[0][1] + 0.4*x[1][1] + 0.2*x[2][1];
    coordinates[17][0] = 0.2*x[0][0] + 0.6*x[1][0] + 0.2*x[2][0];
    coordinates[17][1] = 0.2*x[0][1] + 0.6*x[1][1] + 0.2*x[2][1];
    coordinates[18][0] = 0.4*x[0][0] + 0.2*x[1][0] + 0.4*x[2][0];
    coordinates[18][1] = 0.4*x[0][1] + 0.2*x[1][1] + 0.4*x[2][1];
    coordinates[19][0] = 0.2*x[0][0] + 0.4*x[1][0] + 0.4*x[2][0];
    coordinates[19][1] = 0.2*x[0][1] + 0.4*x[1][1] + 0.4*x[2][1];
    coordinates[20][0] = 0.2*x[0][0] + 0.2*x[1][0] + 0.6*x[2][0];
    coordinates[20][1] = 0.2*x[0][1] + 0.2*x[1][1] + 0.6*x[2][1];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new UFC_Poisson2D_5BilinearForm_dof_map_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class UFC_Poisson2D_5BilinearForm_dof_map_1: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  UFC_Poisson2D_5BilinearForm_dof_map_1() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~UFC_Poisson2D_5BilinearForm_dof_map_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for Lagrange finite element of degree 5 on a triangle";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return true;
      break;
    case 2:
      return true;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = m.num_entities[0] + 4*m.num_entities[1] + 6*m.num_entities[2];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space
  virtual unsigned int local_dimension() const
  {
    return 21;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 6;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    unsigned int offset = m.num_entities[0];
    dofs[3] = offset + 4*c.entity_indices[1][0];
    dofs[4] = offset + 4*c.entity_indices[1][0] + 1;
    dofs[5] = offset + 4*c.entity_indices[1][0] + 2;
    dofs[6] = offset + 4*c.entity_indices[1][0] + 3;
    dofs[7] = offset + 4*c.entity_indices[1][1];
    dofs[8] = offset + 4*c.entity_indices[1][1] + 1;
    dofs[9] = offset + 4*c.entity_indices[1][1] + 2;
    dofs[10] = offset + 4*c.entity_indices[1][1] + 3;
    dofs[11] = offset + 4*c.entity_indices[1][2];
    dofs[12] = offset + 4*c.entity_indices[1][2] + 1;
    dofs[13] = offset + 4*c.entity_indices[1][2] + 2;
    dofs[14] = offset + 4*c.entity_indices[1][2] + 3;
    offset = offset + 4*m.num_entities[1];
    dofs[15] = offset + 6*c.entity_indices[2][0];
    dofs[16] = offset + 6*c.entity_indices[2][0] + 1;
    dofs[17] = offset + 6*c.entity_indices[2][0] + 2;
    dofs[18] = offset + 6*c.entity_indices[2][0] + 3;
    dofs[19] = offset + 6*c.entity_indices[2][0] + 4;
    dofs[20] = offset + 6*c.entity_indices[2][0] + 5;
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   const ufc::mesh& m,
                                   const ufc::cell& c,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 7;
      dofs[3] = 8;
      dofs[4] = 9;
      dofs[5] = 10;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 11;
      dofs[3] = 12;
      dofs[4] = 13;
      dofs[5] = 14;
      break;
    }
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double **coordinates,
                                    const ufc::cell& c) const
  {
    // This function is implemented assuming affine mapping!!
    // Get cell vertices
    const double * const * x = c.coordinates;
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[3][0] = 0.8*x[1][0] + 0.2*x[2][0];
    coordinates[3][1] = 0.8*x[1][1] + 0.2*x[2][1];
    coordinates[4][0] = 0.6*x[1][0] + 0.4*x[2][0];
    coordinates[4][1] = 0.6*x[1][1] + 0.4*x[2][1];
    coordinates[5][0] = 0.4*x[1][0] + 0.6*x[2][0];
    coordinates[5][1] = 0.4*x[1][1] + 0.6*x[2][1];
    coordinates[6][0] = 0.2*x[1][0] + 0.8*x[2][0];
    coordinates[6][1] = 0.2*x[1][1] + 0.8*x[2][1];
    coordinates[7][0] = 0.2*x[0][0] + 0.8*x[2][0];
    coordinates[7][1] = 0.2*x[0][1] + 0.8*x[2][1];
    coordinates[8][0] = 0.4*x[0][0] + 0.6*x[2][0];
    coordinates[8][1] = 0.4*x[0][1] + 0.6*x[2][1];
    coordinates[9][0] = 0.6*x[0][0] + 0.4*x[2][0];
    coordinates[9][1] = 0.6*x[0][1] + 0.4*x[2][1];
    coordinates[10][0] = 0.8*x[0][0] + 0.2*x[2][0];
    coordinates[10][1] = 0.8*x[0][1] + 0.2*x[2][1];
    coordinates[11][0] = 0.8*x[0][0] + 0.2*x[1][0];
    coordinates[11][1] = 0.8*x[0][1] + 0.2*x[1][1];
    coordinates[12][0] = 0.6*x[0][0] + 0.4*x[1][0];
    coordinates[12][1] = 0.6*x[0][1] + 0.4*x[1][1];
    coordinates[13][0] = 0.4*x[0][0] + 0.6*x[1][0];
    coordinates[13][1] = 0.4*x[0][1] + 0.6*x[1][1];
    coordinates[14][0] = 0.2*x[0][0] + 0.8*x[1][0];
    coordinates[14][1] = 0.2*x[0][1] + 0.8*x[1][1];
    coordinates[15][0] = 0.6*x[0][0] + 0.2*x[1][0] + 0.2*x[2][0];
    coordinates[15][1] = 0.6*x[0][1] + 0.2*x[1][1] + 0.2*x[2][1];
    coordinates[16][0] = 0.4*x[0][0] + 0.4*x[1][0] + 0.2*x[2][0];
    coordinates[16][1] = 0.4*x[0][1] + 0.4*x[1][1] + 0.2*x[2][1];
    coordinates[17][0] = 0.2*x[0][0] + 0.6*x[1][0] + 0.2*x[2][0];
    coordinates[17][1] = 0.2*x[0][1] + 0.6*x[1][1] + 0.2*x[2][1];
    coordinates[18][0] = 0.4*x[0][0] + 0.2*x[1][0] + 0.4*x[2][0];
    coordinates[18][1] = 0.4*x[0][1] + 0.2*x[1][1] + 0.4*x[2][1];
    coordinates[19][0] = 0.2*x[0][0] + 0.4*x[1][0] + 0.4*x[2][0];
    coordinates[19][1] = 0.2*x[0][1] + 0.4*x[1][1] + 0.4*x[2][1];
    coordinates[20][0] = 0.2*x[0][0] + 0.2*x[1][0] + 0.6*x[2][0];
    coordinates[20][1] = 0.2*x[0][1] + 0.2*x[1][1] + 0.6*x[2][1];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new UFC_Poisson2D_5BilinearForm_dof_map_1();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class UFC_Poisson2D_5BilinearForm_cell_integral_0: public ufc::cell_integral
{
public:

  /// Constructor
  UFC_Poisson2D_5BilinearForm_cell_integral_0() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson2D_5BilinearForm_cell_integral_0()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
      
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
      
    // Compute inverse of Jacobian
    const double Jinv_00 =  J_11 / detJ;
    const double Jinv_01 = -J_01 / detJ;
    const double Jinv_10 = -J_10 / detJ;
    const double Jinv_11 =  J_00 / detJ;
    
    // Take absolute value of determinant
    detJ = std::abs(detJ);
    
    // Set scale factor
    const double det = detJ;
    
    // Compute geometry tensors
    const double G0_0_0 = det*(Jinv_00*Jinv_00 + Jinv_01*Jinv_01);
    const double G0_0_1 = det*(Jinv_00*Jinv_10 + Jinv_01*Jinv_11);
    const double G0_1_0 = det*(Jinv_10*Jinv_00 + Jinv_11*Jinv_01);
    const double G0_1_1 = det*(Jinv_10*Jinv_10 + Jinv_11*Jinv_11);
    
    // Compute element tensor
    A[0] = 0.342406580687829*G0_0_0 + 0.342406580687829*G0_0_1 + 0.342406580687829*G0_1_0 + 0.342406580687829*G0_1_1;
    A[1] = -0.0409984016754851*G0_0_0 - 0.0409984016754851*G0_1_0;
    A[2] = -0.0409984016754844*G0_0_1 - 0.0409984016754845*G0_1_1;
    A[3] = -0.0408192791005293*G0_0_0 - 0.0408192791005293*G0_0_1 - 0.0408192791005293*G0_1_0 - 0.0408192791005294*G0_1_1;
    A[4] = -0.0379774305555553*G0_0_0 - 0.0379774305555556*G0_0_1 - 0.0379774305555553*G0_1_0 - 0.0379774305555556*G0_1_1;
    A[5] = -0.0379774305555559*G0_0_0 - 0.0379774305555558*G0_0_1 - 0.0379774305555556*G0_1_0 - 0.0379774305555556*G0_1_1;
    A[6] = -0.0408192791005276*G0_0_0 - 0.0408192791005281*G0_0_1 - 0.0408192791005278*G0_1_0 - 0.0408192791005282*G0_1_1;
    A[7] = 0.0408192791005276*G0_0_0 + 0.202374063051144*G0_0_1 + 0.0408192791005278*G0_1_0 + 0.202374063051145*G0_1_1;
    A[8] = -0.0696683476631375*G0_0_0 - 0.449959352954142*G0_0_1 - 0.0696683476631377*G0_1_0 - 0.449959352954142*G0_1_1;
    A[9] = -0.0158454585537931*G0_0_0 + 0.594204695767193*G0_0_1 - 0.0158454585537932*G0_1_0 + 0.594204695767193*G0_1_1;
    A[10] = 0.202287946428571*G0_0_0 - 0.648027584876541*G0_0_1 + 0.202287946428571*G0_1_0 - 0.648027584876541*G0_1_1;
    A[11] = -0.648027584876541*G0_0_0 + 0.20228794642857*G0_0_1 - 0.648027584876541*G0_1_0 + 0.20228794642857*G0_1_1;
    A[12] = 0.594204695767195*G0_0_0 - 0.015845458553792*G0_0_1 + 0.594204695767194*G0_1_0 - 0.015845458553792*G0_1_1;
    A[13] = -0.449959352954144*G0_0_0 - 0.0696683476631392*G0_0_1 - 0.449959352954144*G0_1_0 - 0.0696683476631396*G0_1_1;
    A[14] = 0.202374063051146*G0_0_0 + 0.0408192791005297*G0_0_1 + 0.202374063051146*G0_1_0 + 0.0408192791005298*G0_1_1;
    A[15] = -0.21529155643739*G0_0_0 - 0.21529155643739*G0_0_1 - 0.21529155643739*G0_1_0 - 0.21529155643739*G0_1_1;
    A[16] = -0.0538228891093462*G0_0_0 - 0.0538228891093459*G0_0_1 - 0.0538228891093465*G0_1_0 - 0.0538228891093455*G0_1_1;
    A[17] = 0.107645778218694*G0_0_0 + 0.107645778218694*G0_0_1 + 0.107645778218694*G0_1_0 + 0.107645778218695*G0_1_1;
    A[18] = -0.0538228891093456*G0_0_0 - 0.0538228891093445*G0_0_1 - 0.0538228891093452*G0_1_0 - 0.0538228891093447*G0_1_1;
    A[19] = 0.107645778218694*G0_0_0 + 0.107645778218694*G0_0_1 + 0.107645778218694*G0_1_0 + 0.107645778218693*G0_1_1;
    A[20] = 0.107645778218693*G0_0_0 + 0.107645778218693*G0_0_1 + 0.107645778218693*G0_1_0 + 0.107645778218693*G0_1_1;
    A[21] = -0.0409984016754851*G0_0_0 - 0.0409984016754851*G0_0_1;
    A[22] = 0.342406580687829*G0_0_0;
    A[23] = 0.0409984016754846*G0_0_1;
    A[24] = 0.20228794642857*G0_0_0 + 0.850315531305111*G0_0_1;
    A[25] = -0.0158454585537924*G0_0_0 - 0.610050154320986*G0_0_1;
    A[26] = -0.0696683476631386*G0_0_0 + 0.380291005291004*G0_0_1;
    A[27] = 0.0408192791005284*G0_0_0 - 0.161554783950617*G0_0_1;
    A[28] = -0.0408192791005284*G0_0_0;
    A[29] = -0.0379774305555555*G0_0_0;
    A[30] = -0.0379774305555551*G0_0_0;
    A[31] = -0.0408192791005292*G0_0_0;
    A[32] = 0.202374063051146*G0_0_0 + 0.161554783950616*G0_0_1;
    A[33] = -0.449959352954144*G0_0_0 - 0.380291005291004*G0_0_1;
    A[34] = 0.594204695767195*G0_0_0 + 0.610050154320985*G0_0_1;
    A[35] = -0.648027584876541*G0_0_0 - 0.850315531305111*G0_0_1;
    A[36] = 0.107645778218694*G0_0_0;
    A[37] = -0.0538228891093468*G0_0_0;
    A[38] = -0.215291556437388*G0_0_0;
    A[39] = 0.107645778218694*G0_0_0;
    A[40] = -0.0538228891093463*G0_0_0;
    A[41] = 0.107645778218694*G0_0_0;
    A[42] = -0.0409984016754844*G0_1_0 - 0.0409984016754845*G0_1_1;
    A[43] = 0.0409984016754846*G0_1_0;
    A[44] = 0.342406580687829*G0_1_1;
    A[45] = -0.161554783950616*G0_1_0 + 0.0408192791005288*G0_1_1;
    A[46] = 0.380291005291004*G0_1_0 - 0.0696683476631391*G0_1_1;
    A[47] = -0.610050154320986*G0_1_0 - 0.0158454585537919*G0_1_1;
    A[48] = 0.850315531305112*G0_1_0 + 0.202287946428571*G0_1_1;
    A[49] = -0.850315531305112*G0_1_0 - 0.648027584876542*G0_1_1;
    A[50] = 0.610050154320986*G0_1_0 + 0.594204695767194*G0_1_1;
    A[51] = -0.380291005291004*G0_1_0 - 0.449959352954143*G0_1_1;
    A[52] = 0.161554783950617*G0_1_0 + 0.202374063051145*G0_1_1;
    A[53] = -0.0408192791005282*G0_1_1;
    A[54] = -0.0379774305555554*G0_1_1;
    A[55] = -0.037977430555555*G0_1_1;
    A[56] = -0.0408192791005285*G0_1_1;
    A[57] = 0.107645778218694*G0_1_1;
    A[58] = 0.107645778218694*G0_1_1;
    A[59] = 0.107645778218694*G0_1_1;
    A[60] = -0.053822889109349*G0_1_1;
    A[61] = -0.0538228891093471*G0_1_1;
    A[62] = -0.215291556437386*G0_1_1;
    A[63] = -0.0408192791005293*G0_0_0 - 0.0408192791005293*G0_0_1 - 0.0408192791005293*G0_1_0 - 0.0408192791005294*G0_1_1;
    A[64] = 0.20228794642857*G0_0_0 + 0.850315531305111*G0_1_0;
    A[65] = -0.161554783950616*G0_0_1 + 0.0408192791005288*G0_1_1;
    A[66] = 1.98929398148147*G0_0_0 + 1.28098476080246*G0_0_1 + 1.28098476080246*G0_1_0 + 2.56196952160492*G0_1_1;
    A[67] = -0.906377452601407*G0_0_0 + 0.796578758818338*G0_0_1 - 0.529617228835978*G0_1_0 - 1.39508928571428*G0_1_1;
    A[68] = 0.818107914462076*G0_0_0 - 0.482253086419752*G0_0_1 + 0.23251488095238*G0_1_0 + 0.895612874779538*G0_1_1;
    A[69] = -0.340160659171073*G0_0_0 + 0.329396081349205*G0_0_1 - 0.0710462136243383*G0_1_0 - 0.340160659171074*G0_1_1;
    A[70] = 0.340160659171073*G0_0_0 + 0.0710462136243388*G0_0_1 + 0.0710462136243384*G0_1_0;
    A[71] = 0.172233245149912*G0_0_0 + 0.0301408179012331*G0_0_1 + 0.0301408179012366*G0_1_0;
    A[72] = 0.131327849426808*G0_0_0 + 0.0301408179012364*G0_0_1 + 0.0301408179012348*G0_1_0;
    A[73] = 0.142092427248676*G0_0_0 + 0.071046213624338*G0_0_1 + 0.0710462136243386*G0_1_0;
    A[74] = 0.1980682319224*G0_0_0 + 0.269114445546736*G0_0_1 + 0.269114445546738*G0_1_0 + 0.340160659171074*G0_1_1;
    A[75] = -0.359536899250443*G0_0_0 - 0.663097993827158*G0_0_1 - 0.663097993827162*G0_1_0 - 0.895612874779538*G0_1_1;
    A[76] = 0.28633777006173*G0_0_0 + 0.865472056878303*G0_0_1 + 0.865472056878307*G0_1_0 + 1.39508928571428*G0_1_1;
    A[77] = -0.286337770061728*G0_0_0 - 1.28098476080246*G0_0_1 - 1.28098476080246*G0_1_0 - 2.56196952160492*G0_1_1;
    A[78] = -0.667403824955907*G0_0_0 - 0.262655698853618*G0_0_1 - 0.262655698853618*G0_1_0;
    A[79] = 1.35633680555555*G0_0_0 + 0.572675540123458*G0_0_1 + 0.572675540123459*G0_1_0;
    A[80] = -2.82031938932979*G0_0_0 - 1.66205081569664*G0_0_1 - 1.66205081569664*G0_1_0;
    A[81] = -0.419818535052908*G0_0_0 - 0.073199129188707*G0_0_1 - 0.0731991291887138*G0_1_0;
    A[82] = 1.19486813822751*G0_0_0 + 0.572675540123454*G0_0_1 + 0.572675540123457*G0_1_0;
    A[83] = -0.990341159611988*G0_0_0 - 0.262655698853618*G0_0_1 - 0.262655698853617*G0_1_0;
    A[84] = -0.0379774305555553*G0_0_0 - 0.0379774305555553*G0_0_1 - 0.0379774305555556*G0_1_0 - 0.0379774305555556*G0_1_1;
    A[85] = -0.0158454585537924*G0_0_0 - 0.610050154320986*G0_1_0;
    A[86] = 0.380291005291004*G0_0_1 - 0.0696683476631391*G0_1_1;
    A[87] = -0.906377452601407*G0_0_0 - 0.529617228835978*G0_0_1 + 0.796578758818339*G0_1_0 - 1.39508928571428*G0_1_1;
    A[88] = 3.07436342592591*G0_0_0 + 1.17549189814814*G0_0_1 + 1.17549189814814*G0_1_0 + 3.6944031084656*G0_1_1;
    A[89] = -1.80414324294532*G0_0_0 + 0.699697558421511*G0_0_1 - 0.350925236992946*G0_1_0 - 1.80414324294532*G0_1_1;
    A[90] = 0.895612874779536*G0_0_0 - 0.482253086419754*G0_0_1 + 0.232514880952379*G0_1_0 + 0.818107914462076*G0_1_1;
    A[91] = -0.895612874779537*G0_0_0 - 0.232514880952381*G0_0_1 - 0.232514880952379*G0_1_0 + 0.0710462136243369*G0_1_1;
    A[92] = -0.219597387566142*G0_0_0 - 0.0624345513668419*G0_0_1 - 0.0624345513668469*G0_1_0 - 0.0172233245149895*G0_1_1;
    A[93] = -0.297102347883595*G0_0_0 - 0.1485511739418*G0_0_1 - 0.148551173941797*G0_1_0 - 0.0172233245149937*G0_1_1;
    A[94] = 0.131327849426806*G0_0_0 + 0.101187031525573*G0_0_1 + 0.101187031525571*G0_1_0 + 0.0710462136243399*G0_1_1;
    A[95] = 0.111951609347438*G0_0_0 + 0.142092427248673*G0_0_1 + 0.142092427248674*G0_1_0 + 0.172233245149909*G0_1_1;
    A[96] = -0.111951609347437*G0_0_0 - 0.157162836199293*G0_0_1 - 0.157162836199289*G0_1_0 - 0.219597387566136*G0_1_1;
    A[97] = 0.103339947089944*G0_0_0 + 0.133480764991179*G0_0_1 + 0.133480764991177*G0_1_0 + 0.26696152998236*G0_1_1;
    A[98] = -0.0495170579805982*G0_0_0 + 0.529617228835978*G0_0_1 + 0.529617228835979*G0_1_0 + 1.39508928571428*G0_1_1;
    A[99] = -0.344466490299816*G0_0_0 - 0.447806437389759*G0_0_1 - 0.447806437389765*G0_1_0 - 0.516699735449726*G0_1_1;
    A[100] = 0.387524801587291*G0_0_0 + 0.859013310185179*G0_0_1 + 0.859013310185178*G0_1_0 + 1.01187031525573*G0_1_1;
    A[101] = 0.731991291887127*G0_0_0 - 1.30897266313932*G0_0_1 - 1.30897266313932*G0_1_0 - 3.96136463844796*G0_1_1;
    A[102] = 1.03339947089946*G0_0_0 + 0.374607308201043*G0_0_1 + 0.374607308201055*G0_1_0 + 0.0430583112874687*G0_1_1;
    A[103] = -3.81066054894178*G0_0_0 - 1.4015480324074*G0_0_1 - 1.4015480324074*G0_1_0 + 1.01187031525573*G0_1_1;
    A[104] = 2.02374063051146*G0_0_0 + 0.413359788359799*G0_0_1 + 0.413359788359793*G0_1_0 - 0.516699735449727*G0_1_1;
    A[105] = -0.0379774305555559*G0_0_0 - 0.0379774305555556*G0_0_1 - 0.0379774305555558*G0_1_0 - 0.0379774305555556*G0_1_1;
    A[106] = -0.0696683476631386*G0_0_0 + 0.380291005291004*G0_1_0;
    A[107] = -0.610050154320986*G0_0_1 - 0.0158454585537919*G0_1_1;
    A[108] = 0.818107914462076*G0_0_0 + 0.23251488095238*G0_0_1 - 0.482253086419752*G0_1_0 + 0.895612874779538*G0_1_1;
    A[109] = -1.80414324294532*G0_0_0 - 0.350925236992946*G0_0_1 + 0.699697558421511*G0_1_0 - 1.80414324294532*G0_1_1;
    A[110] = 3.69440310846559*G0_0_0 + 1.17549189814814*G0_0_1 + 1.17549189814814*G0_1_0 + 3.07436342592591*G0_1_1;
    A[111] = -1.39508928571428*G0_0_0 + 0.79657875881834*G0_0_1 - 0.529617228835977*G0_1_0 - 0.906377452601407*G0_1_1;
    A[112] = 1.39508928571428*G0_0_0 + 0.52961722883598*G0_0_1 + 0.529617228835977*G0_1_0 - 0.0495170579805961*G0_1_1;
    A[113] = 0.266961529982361*G0_0_0 + 0.133480764991177*G0_0_1 + 0.133480764991178*G0_1_0 + 0.103339947089942*G0_1_1;
    A[114] = -0.219597387566134*G0_0_0 - 0.157162836199291*G0_0_1 - 0.157162836199291*G0_1_0 - 0.111951609347439*G0_1_1;
    A[115] = 0.172233245149911*G0_0_0 + 0.142092427248676*G0_0_1 + 0.142092427248676*G0_1_0 + 0.111951609347441*G0_1_1;
    A[116] = 0.0710462136243407*G0_0_0 + 0.101187031525573*G0_0_1 + 0.101187031525574*G0_1_0 + 0.131327849426805*G0_1_1;
    A[117] = -0.0172233245149934*G0_0_0 - 0.148551173941799*G0_0_1 - 0.1485511739418*G0_1_0 - 0.297102347883597*G0_1_1;
    A[118] = -0.017223324514991*G0_0_0 - 0.0624345513668444*G0_0_1 - 0.0624345513668408*G0_1_0 - 0.219597387566137*G0_1_1;
    A[119] = 0.0710462136243379*G0_0_0 - 0.23251488095238*G0_0_1 - 0.232514880952382*G0_1_0 - 0.895612874779538*G0_1_1;
    A[120] = -0.516699735449738*G0_0_0 - 0.447806437389772*G0_0_1 - 0.447806437389769*G0_1_0 - 0.34446649029982*G0_1_1;
    A[121] = 0.0430583112874839*G0_0_0 + 0.374607308201061*G0_0_1 + 0.374607308201058*G0_1_0 + 1.03339947089947*G0_1_1;
    A[122] = -0.516699735449734*G0_0_0 + 0.413359788359792*G0_0_1 + 0.413359788359788*G0_1_0 + 2.02374063051146*G0_1_1;
    A[123] = 1.01187031525573*G0_0_0 + 0.859013310185191*G0_0_1 + 0.85901331018518*G0_1_0 + 0.3875248015873*G0_1_1;
    A[124] = 1.01187031525572*G0_0_0 - 1.4015480324074*G0_0_1 - 1.4015480324074*G0_1_0 - 3.81066054894178*G0_1_1;
    A[125] = -3.96136463844795*G0_0_0 - 1.30897266313933*G0_0_1 - 1.30897266313932*G0_1_0 + 0.731991291887121*G0_1_1;
    A[126] = -0.0408192791005276*G0_0_0 - 0.0408192791005278*G0_0_1 - 0.0408192791005281*G0_1_0 - 0.0408192791005282*G0_1_1;
    A[127] = 0.0408192791005284*G0_0_0 - 0.161554783950617*G0_1_0;
    A[128] = 0.850315531305112*G0_0_1 + 0.202287946428571*G0_1_1;
    A[129] = -0.340160659171073*G0_0_0 - 0.0710462136243383*G0_0_1 + 0.329396081349205*G0_1_0 - 0.340160659171074*G0_1_1;
    A[130] = 0.895612874779536*G0_0_0 + 0.232514880952379*G0_0_1 - 0.482253086419754*G0_1_0 + 0.818107914462076*G0_1_1;
    A[131] = -1.39508928571428*G0_0_0 - 0.529617228835977*G0_0_1 + 0.79657875881834*G0_1_0 - 0.906377452601407*G0_1_1;
    A[132] = 2.56196952160493*G0_0_0 + 1.28098476080246*G0_0_1 + 1.28098476080246*G0_1_0 + 1.98929398148147*G0_1_1;
    A[133] = -2.56196952160493*G0_0_0 - 1.28098476080247*G0_0_1 - 1.28098476080246*G0_1_0 - 0.28633777006173*G0_1_1;
    A[134] = 1.39508928571428*G0_0_0 + 0.865472056878306*G0_0_1 + 0.865472056878306*G0_1_0 + 0.286337770061729*G0_1_1;
    A[135] = -0.895612874779541*G0_0_0 - 0.663097993827158*G0_0_1 - 0.66309799382716*G0_1_0 - 0.35953689925044*G0_1_1;
    A[136] = 0.340160659171075*G0_0_0 + 0.269114445546734*G0_0_1 + 0.269114445546737*G0_1_0 + 0.198068231922397*G0_1_1;
    A[137] = 0.0710462136243409*G0_0_1 + 0.0710462136243373*G0_1_0 + 0.142092427248679*G0_1_1;
    A[138] = 0.0301408179012343*G0_0_1 + 0.0301408179012349*G0_1_0 + 0.131327849426806*G0_1_1;
    A[139] = 0.0301408179012354*G0_0_1 + 0.0301408179012333*G0_1_0 + 0.172233245149911*G0_1_1;
    A[140] = 0.0710462136243393*G0_0_1 + 0.0710462136243396*G0_1_0 + 0.340160659171074*G0_1_1;
    A[141] = -0.262655698853618*G0_0_1 - 0.262655698853615*G0_1_0 - 0.66740382495591*G0_1_1;
    A[142] = -0.0731991291887121*G0_0_1 - 0.0731991291887117*G0_1_0 - 0.419818535052905*G0_1_1;
    A[143] = -0.262655698853616*G0_0_1 - 0.262655698853615*G0_1_0 - 0.990341159611987*G0_1_1;
    A[144] = 0.572675540123452*G0_0_1 + 0.572675540123457*G0_1_0 + 1.35633680555555*G0_1_1;
    A[145] = 0.572675540123455*G0_0_1 + 0.572675540123456*G0_1_0 + 1.19486813822751*G0_1_1;
    A[146] = -1.66205081569664*G0_0_1 - 1.66205081569664*G0_1_0 - 2.82031938932979*G0_1_1;
    A[147] = 0.0408192791005276*G0_0_0 + 0.0408192791005278*G0_0_1 + 0.202374063051144*G0_1_0 + 0.202374063051145*G0_1_1;
    A[148] = -0.0408192791005284*G0_0_0;
    A[149] = -0.850315531305112*G0_0_1 - 0.648027584876542*G0_1_1;
    A[150] = 0.340160659171073*G0_0_0 + 0.0710462136243384*G0_0_1 + 0.0710462136243387*G0_1_0;
    A[151] = -0.895612874779537*G0_0_0 - 0.232514880952379*G0_0_1 - 0.232514880952381*G0_1_0 + 0.0710462136243369*G0_1_1;
    A[152] = 1.39508928571428*G0_0_0 + 0.529617228835977*G0_0_1 + 0.52961722883598*G0_1_0 - 0.0495170579805961*G0_1_1;
    A[153] = -2.56196952160493*G0_0_0 - 1.28098476080246*G0_0_1 - 1.28098476080247*G0_1_0 - 0.28633777006173*G0_1_1;
    A[154] = 2.56196952160493*G0_0_0 + 1.28098476080247*G0_0_1 + 1.28098476080247*G0_1_0 + 1.98929398148147*G0_1_1;
    A[155] = -1.39508928571428*G0_0_0 - 0.865472056878305*G0_0_1 - 2.19166804453262*G0_1_0 - 2.56842826829805*G0_1_1;
    A[156] = 0.89561287477954*G0_0_0 + 0.663097993827158*G0_0_1 + 1.37786596119929*G0_1_0 + 1.96345899470898*G0_1_1;
    A[157] = -0.340160659171075*G0_0_0 - 0.269114445546734*G0_0_1 - 0.669556740520279*G0_1_0 - 0.938671186067012*G0_1_1;
    A[158] = -0.0710462136243409*G0_0_1 - 0.0710462136243376*G0_1_0 + 0.198068231922395*G0_1_1;
    A[159] = -0.0301408179012342*G0_0_1 - 0.0301408179012332*G0_1_0 + 0.111951609347442*G0_1_1;
    A[160] = -0.0301408179012356*G0_0_1 - 0.0301408179012356*G0_1_0 + 0.0710462136243367*G0_1_1;
    A[161] = -0.0710462136243394*G0_0_1 - 0.0710462136243386*G0_1_0;
    A[162] = 0.262655698853618*G0_0_1 + 0.262655698853614*G0_1_0 - 0.465029761904755*G0_1_1;
    A[163] = 0.0731991291887118*G0_0_1 + 0.0731991291887103*G0_1_0 - 0.273420276675484*G0_1_1;
    A[164] = 0.262655698853616*G0_0_1 + 0.262655698853616*G0_1_0 - 0.142092427248673*G0_1_1;
    A[165] = -0.572675540123452*G0_0_1 - 0.572675540123452*G0_1_0 + 0.0495170579805983*G0_1_1;
    A[166] = -0.572675540123455*G0_0_1 - 0.572675540123457*G0_1_0 + 0.210985725308638*G0_1_1;
    A[167] = 1.66205081569664*G0_0_1 + 1.66205081569664*G0_1_0 + 0.50378224206349*G0_1_1;
    A[168] = -0.0696683476631375*G0_0_0 - 0.0696683476631377*G0_0_1 - 0.449959352954142*G0_1_0 - 0.449959352954142*G0_1_1;
    A[169] = -0.0379774305555555*G0_0_0;
    A[170] = 0.610050154320986*G0_0_1 + 0.594204695767194*G0_1_1;
    A[171] = 0.172233245149912*G0_0_0 + 0.0301408179012365*G0_0_1 + 0.030140817901233*G0_1_0;
    A[172] = -0.219597387566142*G0_0_0 - 0.0624345513668468*G0_0_1 - 0.062434551366842*G0_1_0 - 0.0172233245149895*G0_1_1;
    A[173] = 0.266961529982361*G0_0_0 + 0.133480764991178*G0_0_1 + 0.133480764991177*G0_1_0 + 0.103339947089943*G0_1_1;
    A[174] = 1.39508928571428*G0_0_0 + 0.865472056878305*G0_0_1 + 0.865472056878306*G0_1_0 + 0.286337770061729*G0_1_1;
    A[175] = -1.39508928571428*G0_0_0 - 2.19166804453262*G0_0_1 - 0.865472056878305*G0_1_0 - 2.56842826829805*G0_1_1;
    A[176] = 3.6944031084656*G0_0_0 + 2.51891121031745*G0_0_1 + 2.51891121031745*G0_1_0 + 4.41778273809522*G0_1_1;
    A[177] = -1.80414324294532*G0_0_0 - 1.45321800595237*G0_0_1 - 2.50384080136683*G0_1_0 - 3.9570588073192*G0_1_1;
    A[178] = 0.818107914462078*G0_0_0 + 0.585593033509694*G0_0_1 + 1.30036100088183*G0_1_0 + 1.96345899470898*G0_1_1;
    A[179] = 0.0710462136243373*G0_0_0 + 0.303561094576722*G0_0_1 + 0.303561094576719*G0_1_0 - 0.359536899250437*G0_1_1;
    A[180] = -0.017223324514993*G0_0_0 + 0.0452112268518498*G0_0_1 + 0.0452112268518494*G0_1_0 - 0.111951609347442*G0_1_1;
    A[181] = -0.0172233245149902*G0_0_0 + 0.131327849426809*G0_0_1 + 0.131327849426809*G0_1_0 - 0.0172233245149894*G0_1_1;
    A[182] = 0.0710462136243385*G0_0_0 - 0.0301408179012353*G0_0_1 - 0.0301408179012346*G0_1_0;
    A[183] = -0.516699735449735*G0_0_0 - 0.93005952380953*G0_0_1 - 0.930059523809521*G0_1_0 + 0.680321318342146*G0_1_1;
    A[184] = 0.0430583112874824*G0_0_0 - 0.331548996913576*G0_0_1 - 0.331548996913576*G0_1_0 + 0.32724316578483*G0_1_1;
    A[185] = -0.516699735449738*G0_0_0 - 0.0688932980599631*G0_0_1 - 0.0688932980599655*G0_1_0 + 0.0344466490299791*G0_1_1;
    A[186] = 1.01187031525573*G0_0_0 + 2.41341834766314*G0_0_1 + 2.41341834766313*G0_1_0 + 0.00430583112874677*G0_1_1;
    A[187] = 1.01187031525574*G0_0_0 + 0.152857005070548*G0_0_1 + 0.152857005070548*G0_1_0 - 0.318631503527331*G0_1_1;
    A[188] = -3.96136463844796*G0_0_0 - 2.65239197530863*G0_0_1 - 2.65239197530863*G0_1_0 - 0.611428020282184*G0_1_1;
    A[189] = -0.0158454585537931*G0_0_0 - 0.0158454585537931*G0_0_1 + 0.594204695767193*G0_1_0 + 0.594204695767193*G0_1_1;
    A[190] = -0.0379774305555551*G0_0_0;
    A[191] = -0.380291005291004*G0_0_1 - 0.449959352954143*G0_1_1;
    A[192] = 0.131327849426808*G0_0_0 + 0.0301408179012348*G0_0_1 + 0.0301408179012364*G0_1_0;
    A[193] = -0.297102347883595*G0_0_0 - 0.148551173941796*G0_0_1 - 0.1485511739418*G0_1_0 - 0.0172233245149937*G0_1_1;
    A[194] = -0.219597387566134*G0_0_0 - 0.157162836199291*G0_0_1 - 0.157162836199291*G0_1_0 - 0.111951609347439*G0_1_1;
    A[195] = -0.895612874779541*G0_0_0 - 0.66309799382716*G0_0_1 - 0.663097993827158*G0_1_0 - 0.35953689925044*G0_1_1;
    A[196] = 0.89561287477954*G0_0_0 + 1.37786596119929*G0_0_1 + 0.663097993827158*G0_1_0 + 1.96345899470898*G0_1_1;
    A[197] = -1.80414324294532*G0_0_0 - 2.50384080136683*G0_0_1 - 1.45321800595237*G0_1_0 - 3.9570588073192*G0_1_1;
    A[198] = 3.07436342592591*G0_0_0 + 1.89887152777777*G0_0_1 + 1.89887152777777*G0_1_0 + 4.41778273809522*G0_1_1;
    A[199] = -0.906377452601406*G0_0_0 - 0.376760223765426*G0_0_1 - 1.70295621141975*G0_1_0 - 2.56842826829805*G0_1_1;
    A[200] = -0.0495170579805966*G0_0_0 - 0.579134286816578*G0_0_1 - 0.579134286816576*G0_1_0 + 0.286337770061726*G0_1_1;
    A[201] = 0.103339947089945*G0_0_0 - 0.0301408179012346*G0_0_1 - 0.0301408179012325*G0_1_0 + 0.103339947089946*G0_1_1;
    A[202] = -0.111951609347441*G0_0_0 + 0.0452112268518521*G0_0_1 + 0.0452112268518503*G0_1_0 - 0.0172233245149917*G0_1_1;
    A[203] = 0.111951609347441*G0_0_0 - 0.0301408179012353*G0_0_1 - 0.0301408179012346*G0_1_0;
    A[204] = 0.731991291887121*G0_0_0 + 2.04096395502645*G0_0_1 + 2.04096395502645*G0_1_0 - 0.611428020282185*G0_1_1;
    A[205] = 0.3875248015873*G0_0_0 - 0.471488508597882*G0_0_1 - 0.471488508597882*G0_1_0 - 0.318631503527334*G0_1_1;
    A[206] = -0.344466490299822*G0_0_0 + 0.103339947089945*G0_0_1 + 0.103339947089945*G0_1_0 + 0.0344466490299845*G0_1_1;
    A[207] = -3.81066054894178*G0_0_0 - 2.40911251653438*G0_0_1 - 2.40911251653438*G0_1_0 + 0.00430583112875293*G0_1_1;
    A[208] = 1.03339947089946*G0_0_0 + 0.658792162698408*G0_0_1 + 0.658792162698409*G0_1_0 + 0.327243165784827*G0_1_1;
    A[209] = 2.02374063051146*G0_0_0 + 1.61038084215167*G0_0_1 + 1.61038084215166*G0_1_0 + 0.680321318342145*G0_1_1;
    A[210] = 0.202287946428571*G0_0_0 + 0.202287946428571*G0_0_1 - 0.64802758487654*G0_1_0 - 0.648027584876541*G0_1_1;
    A[211] = -0.0408192791005291*G0_0_0;
    A[212] = 0.161554783950617*G0_0_1 + 0.202374063051145*G0_1_1;
    A[213] = 0.142092427248676*G0_0_0 + 0.0710462136243386*G0_0_1 + 0.0710462136243381*G0_1_0;
    A[214] = 0.131327849426806*G0_0_0 + 0.101187031525571*G0_0_1 + 0.101187031525573*G0_1_0 + 0.0710462136243399*G0_1_1;
    A[215] = 0.172233245149911*G0_0_0 + 0.142092427248676*G0_0_1 + 0.142092427248676*G0_1_0 + 0.111951609347441*G0_1_1;
    A[216] = 0.340160659171075*G0_0_0 + 0.269114445546737*G0_0_1 + 0.269114445546734*G0_1_0 + 0.198068231922397*G0_1_1;
    A[217] = -0.340160659171075*G0_0_0 - 0.669556740520279*G0_0_1 - 0.269114445546734*G0_1_0 - 0.938671186067012*G0_1_1;
    A[218] = 0.818107914462078*G0_0_0 + 1.30036100088183*G0_0_1 + 0.585593033509694*G0_1_0 + 1.96345899470898*G0_1_1;
    A[219] = -0.906377452601406*G0_0_0 - 1.70295621141975*G0_0_1 - 0.376760223765426*G0_1_0 - 2.56842826829805*G0_1_1;
    A[220] = 1.98929398148147*G0_0_0 + 0.708309220679009*G0_0_1 + 0.708309220679009*G0_1_0 + 1.98929398148147*G0_1_1;
    A[221] = -0.286337770061728*G0_0_0 + 0.994646990740736*G0_0_1 + 0.994646990740737*G0_1_0 - 0.286337770061727*G0_1_1;
    A[222] = 0.286337770061728*G0_0_0 - 0.579134286816577*G0_0_1 - 0.579134286816578*G0_1_0 - 0.0495170579805992*G0_1_1;
    A[223] = -0.35953689925044*G0_0_0 + 0.303561094576719*G0_0_1 + 0.30356109457672*G0_1_0 + 0.0710462136243393*G0_1_1;
    A[224] = 0.198068231922398*G0_0_0 - 0.0710462136243377*G0_0_1 - 0.071046213624339*G0_1_0;
    A[225] = -2.8203193893298*G0_0_0 - 1.15826857363315*G0_0_1 - 1.15826857363315*G0_1_0 + 0.503782242063492*G0_1_1;
    A[226] = 1.35633680555555*G0_0_0 + 0.783661265432099*G0_0_1 + 0.783661265432094*G0_1_0 + 0.210985725308638*G0_1_1;
    A[227] = -0.667403824955907*G0_0_0 - 0.404748126102291*G0_0_1 - 0.40474812610229*G0_1_0 - 0.142092427248678*G0_1_1;
    A[228] = 1.19486813822751*G0_0_0 + 0.622192598104055*G0_0_1 + 0.622192598104048*G0_1_0 + 0.0495170579805932*G0_1_1;
    A[229] = -0.419818535052907*G0_0_0 - 0.346619405864197*G0_0_1 - 0.346619405864195*G0_1_0 - 0.27342027667548*G0_1_1;
    A[230] = -0.990341159611989*G0_0_0 - 0.727685460758374*G0_0_1 - 0.72768546075837*G0_1_0 - 0.465029761904756*G0_1_1;
    A[231] = -0.648027584876541*G0_0_0 - 0.648027584876541*G0_0_1 + 0.20228794642857*G0_1_0 + 0.20228794642857*G0_1_1;
    A[232] = 0.202374063051146*G0_0_0 + 0.161554783950616*G0_1_0;
    A[233] = -0.0408192791005282*G0_1_1;
    A[234] = 0.1980682319224*G0_0_0 + 0.269114445546738*G0_0_1 + 0.269114445546736*G0_1_0 + 0.340160659171074*G0_1_1;
    A[235] = 0.111951609347438*G0_0_0 + 0.142092427248674*G0_0_1 + 0.142092427248673*G0_1_0 + 0.172233245149908*G0_1_1;
    A[236] = 0.0710462136243407*G0_0_0 + 0.101187031525574*G0_0_1 + 0.101187031525573*G0_1_0 + 0.131327849426805*G0_1_1;
    A[237] = 0.0710462136243373*G0_0_1 + 0.071046213624341*G0_1_0 + 0.142092427248679*G0_1_1;
    A[238] = -0.0710462136243376*G0_0_1 - 0.0710462136243409*G0_1_0 + 0.198068231922395*G0_1_1;
    A[239] = 0.0710462136243373*G0_0_0 + 0.303561094576718*G0_0_1 + 0.303561094576722*G0_1_0 - 0.359536899250437*G0_1_1;
    A[240] = -0.0495170579805966*G0_0_0 - 0.579134286816576*G0_0_1 - 0.579134286816578*G0_1_0 + 0.286337770061726*G0_1_1;
    A[241] = -0.286337770061728*G0_0_0 + 0.994646990740737*G0_0_1 + 0.994646990740736*G0_1_0 - 0.286337770061726*G0_1_1;
    A[242] = 1.98929398148147*G0_0_0 + 0.708309220679008*G0_0_1 + 0.708309220679008*G0_1_0 + 1.98929398148147*G0_1_1;
    A[243] = -2.56842826829805*G0_0_0 - 0.37676022376543*G0_0_1 - 1.70295621141974*G0_1_0 - 0.906377452601406*G0_1_1;
    A[244] = 1.96345899470899*G0_0_0 + 0.585593033509699*G0_0_1 + 1.30036100088183*G0_1_0 + 0.818107914462078*G0_1_1;
    A[245] = -0.938671186067016*G0_0_0 - 0.269114445546739*G0_0_1 - 0.669556740520278*G0_1_0 - 0.340160659171073*G0_1_1;
    A[246] = 0.503782242063493*G0_0_0 - 1.15826857363315*G0_0_1 - 1.15826857363315*G0_1_0 - 2.8203193893298*G0_1_1;
    A[247] = 0.0495170579805983*G0_0_0 + 0.622192598104049*G0_0_1 + 0.622192598104055*G0_1_0 + 1.19486813822751*G0_1_1;
    A[248] = -0.465029761904762*G0_0_0 - 0.727685460758372*G0_0_1 - 0.727685460758375*G0_1_0 - 0.990341159611987*G0_1_1;
    A[249] = 0.210985725308635*G0_0_0 + 0.783661265432091*G0_0_1 + 0.783661265432096*G0_1_0 + 1.35633680555555*G0_1_1;
    A[250] = -0.273420276675477*G0_0_0 - 0.346619405864193*G0_0_1 - 0.346619405864191*G0_1_0 - 0.419818535052906*G0_1_1;
    A[251] = -0.142092427248678*G0_0_0 - 0.404748126102289*G0_0_1 - 0.404748126102296*G0_1_0 - 0.66740382495591*G0_1_1;
    A[252] = 0.594204695767194*G0_0_0 + 0.594204695767194*G0_0_1 - 0.015845458553792*G0_1_0 - 0.015845458553792*G0_1_1;
    A[253] = -0.449959352954144*G0_0_0 - 0.380291005291004*G0_1_0;
    A[254] = -0.0379774305555554*G0_1_1;
    A[255] = -0.359536899250443*G0_0_0 - 0.663097993827162*G0_0_1 - 0.663097993827158*G0_1_0 - 0.895612874779538*G0_1_1;
    A[256] = -0.111951609347437*G0_0_0 - 0.157162836199289*G0_0_1 - 0.157162836199293*G0_1_0 - 0.219597387566136*G0_1_1;
    A[257] = -0.0172233245149934*G0_0_0 - 0.1485511739418*G0_0_1 - 0.1485511739418*G0_1_0 - 0.297102347883597*G0_1_1;
    A[258] = 0.0301408179012349*G0_0_1 + 0.0301408179012343*G0_1_0 + 0.131327849426806*G0_1_1;
    A[259] = -0.0301408179012332*G0_0_1 - 0.0301408179012342*G0_1_0 + 0.111951609347442*G0_1_1;
    A[260] = -0.017223324514993*G0_0_0 + 0.0452112268518494*G0_0_1 + 0.0452112268518498*G0_1_0 - 0.111951609347442*G0_1_1;
    A[261] = 0.103339947089945*G0_0_0 - 0.0301408179012325*G0_0_1 - 0.0301408179012346*G0_1_0 + 0.103339947089946*G0_1_1;
    A[262] = 0.286337770061728*G0_0_0 - 0.579134286816578*G0_0_1 - 0.579134286816577*G0_1_0 - 0.0495170579805992*G0_1_1;
    A[263] = -2.56842826829805*G0_0_0 - 1.70295621141974*G0_0_1 - 0.37676022376543*G0_1_0 - 0.906377452601406*G0_1_1;
    A[264] = 4.41778273809522*G0_0_0 + 1.89887152777777*G0_0_1 + 1.89887152777777*G0_1_0 + 3.07436342592591*G0_1_1;
    A[265] = -3.95705880731921*G0_0_0 - 1.45321800595238*G0_0_1 - 2.50384080136683*G0_1_0 - 1.80414324294532*G0_1_1;
    A[266] = 1.96345899470899*G0_0_0 + 0.663097993827163*G0_0_1 + 1.37786596119929*G0_1_0 + 0.895612874779538*G0_1_1;
    A[267] = -0.611428020282186*G0_0_0 + 2.04096395502644*G0_0_1 + 2.04096395502645*G0_1_0 + 0.731991291887124*G0_1_1;
    A[268] = 0.00430583112874582*G0_0_0 - 2.40911251653438*G0_0_1 - 2.40911251653438*G0_1_0 - 3.81066054894178*G0_1_1;
    A[269] = 0.680321318342154*G0_0_0 + 1.61038084215167*G0_0_1 + 1.61038084215167*G0_1_0 + 2.02374063051146*G0_1_1;
    A[270] = -0.318631503527329*G0_0_0 - 0.471488508597878*G0_0_1 - 0.47148850859788*G0_1_0 + 0.387524801587297*G0_1_1;
    A[271] = 0.327243165784821*G0_0_0 + 0.658792162698406*G0_0_1 + 0.658792162698408*G0_1_0 + 1.03339947089946*G0_1_1;
    A[272] = 0.0344466490299864*G0_0_0 + 0.103339947089947*G0_0_1 + 0.103339947089949*G0_1_0 - 0.344466490299819*G0_1_1;
    A[273] = -0.449959352954144*G0_0_0 - 0.449959352954144*G0_0_1 - 0.0696683476631393*G0_1_0 - 0.0696683476631396*G0_1_1;
    A[274] = 0.594204695767195*G0_0_0 + 0.610050154320985*G0_1_0;
    A[275] = -0.037977430555555*G0_1_1;
    A[276] = 0.28633777006173*G0_0_0 + 0.865472056878307*G0_0_1 + 0.865472056878303*G0_1_0 + 1.39508928571428*G0_1_1;
    A[277] = 0.103339947089944*G0_0_0 + 0.133480764991177*G0_0_1 + 0.133480764991179*G0_1_0 + 0.26696152998236*G0_1_1;
    A[278] = -0.0172233245149909*G0_0_0 - 0.0624345513668409*G0_0_1 - 0.0624345513668444*G0_1_0 - 0.219597387566137*G0_1_1;
    A[279] = 0.0301408179012333*G0_0_1 + 0.0301408179012354*G0_1_0 + 0.172233245149911*G0_1_1;
    A[280] = -0.0301408179012355*G0_0_1 - 0.0301408179012356*G0_1_0 + 0.0710462136243367*G0_1_1;
    A[281] = -0.0172233245149903*G0_0_0 + 0.131327849426809*G0_0_1 + 0.131327849426809*G0_1_0 - 0.0172233245149894*G0_1_1;
    A[282] = -0.111951609347441*G0_0_0 + 0.0452112268518504*G0_0_1 + 0.0452112268518521*G0_1_0 - 0.0172233245149917*G0_1_1;
    A[283] = -0.35953689925044*G0_0_0 + 0.30356109457672*G0_0_1 + 0.303561094576719*G0_1_0 + 0.0710462136243393*G0_1_1;
    A[284] = 1.96345899470899*G0_0_0 + 1.30036100088183*G0_0_1 + 0.585593033509699*G0_1_0 + 0.818107914462078*G0_1_1;
    A[285] = -3.95705880731921*G0_0_0 - 2.50384080136683*G0_0_1 - 1.45321800595238*G0_1_0 - 1.80414324294532*G0_1_1;
    A[286] = 4.41778273809522*G0_0_0 + 2.51891121031745*G0_0_1 + 2.51891121031745*G0_1_0 + 3.6944031084656*G0_1_1;
    A[287] = -2.56842826829805*G0_0_0 - 0.865472056878308*G0_0_1 - 2.19166804453262*G0_1_0 - 1.39508928571428*G0_1_1;
    A[288] = 0.68032131834215*G0_0_0 - 0.930059523809518*G0_0_1 - 0.930059523809522*G0_1_0 - 0.516699735449736*G0_1_1;
    A[289] = 0.00430583112874945*G0_0_0 + 2.41341834766313*G0_0_1 + 2.41341834766313*G0_1_0 + 1.01187031525573*G0_1_1;
    A[290] = -0.611428020282188*G0_0_0 - 2.65239197530863*G0_0_1 - 2.65239197530863*G0_1_0 - 3.96136463844796*G0_1_1;
    A[291] = 0.327243165784824*G0_0_0 - 0.331548996913582*G0_0_1 - 0.331548996913585*G0_1_0 + 0.0430583112874769*G0_1_1;
    A[292] = -0.318631503527328*G0_0_0 + 0.152857005070549*G0_0_1 + 0.152857005070553*G0_1_0 + 1.01187031525573*G0_1_1;
    A[293] = 0.0344466490299811*G0_0_0 - 0.0688932980599635*G0_0_1 - 0.068893298059964*G0_1_0 - 0.516699735449732*G0_1_1;
    A[294] = 0.202374063051146*G0_0_0 + 0.202374063051146*G0_0_1 + 0.0408192791005297*G0_1_0 + 0.0408192791005298*G0_1_1;
    A[295] = -0.648027584876541*G0_0_0 - 0.850315531305111*G0_1_0;
    A[296] = -0.0408192791005284*G0_1_1;
    A[297] = -0.286337770061728*G0_0_0 - 1.28098476080246*G0_0_1 - 1.28098476080246*G0_1_0 - 2.56196952160492*G0_1_1;
    A[298] = -0.0495170579805982*G0_0_0 + 0.529617228835979*G0_0_1 + 0.529617228835978*G0_1_0 + 1.39508928571428*G0_1_1;
    A[299] = 0.0710462136243379*G0_0_0 - 0.232514880952382*G0_0_1 - 0.23251488095238*G0_1_0 - 0.895612874779538*G0_1_1;
    A[300] = 0.0710462136243395*G0_0_1 + 0.0710462136243393*G0_1_0 + 0.340160659171074*G0_1_1;
    A[301] = -0.0710462136243386*G0_0_1 - 0.0710462136243394*G0_1_0;
    A[302] = 0.0710462136243386*G0_0_0 - 0.0301408179012346*G0_0_1 - 0.0301408179012353*G0_1_0;
    A[303] = 0.111951609347441*G0_0_0 - 0.0301408179012346*G0_0_1 - 0.0301408179012353*G0_1_0;
    A[304] = 0.198068231922398*G0_0_0 - 0.071046213624339*G0_0_1 - 0.0710462136243377*G0_1_0;
    A[305] = -0.938671186067016*G0_0_0 - 0.669556740520278*G0_0_1 - 0.269114445546739*G0_1_0 - 0.340160659171073*G0_1_1;
    A[306] = 1.96345899470899*G0_0_0 + 1.37786596119929*G0_0_1 + 0.663097993827163*G0_1_0 + 0.895612874779538*G0_1_1;
    A[307] = -2.56842826829805*G0_0_0 - 2.19166804453262*G0_0_1 - 0.865472056878308*G0_1_0 - 1.39508928571428*G0_1_1;
    A[308] = 1.98929398148147*G0_0_0 + 1.28098476080247*G0_0_1 + 1.28098476080246*G0_1_0 + 2.56196952160492*G0_1_1;
    A[309] = -0.46502976190476*G0_0_0 + 0.262655698853615*G0_0_1 + 0.262655698853616*G0_1_0;
    A[310] = 0.0495170579805984*G0_0_0 - 0.572675540123455*G0_0_1 - 0.572675540123458*G0_1_0;
    A[311] = 0.50378224206349*G0_0_0 + 1.66205081569664*G0_0_1 + 1.66205081569664*G0_1_0;
    A[312] = -0.273420276675481*G0_0_0 + 0.0731991291887129*G0_0_1 + 0.0731991291887133*G0_1_0;
    A[313] = 0.210985725308638*G0_0_0 - 0.572675540123455*G0_0_1 - 0.572675540123456*G0_1_0;
    A[314] = -0.142092427248676*G0_0_0 + 0.262655698853614*G0_0_1 + 0.262655698853616*G0_1_0;
    A[315] = -0.21529155643739*G0_0_0 - 0.21529155643739*G0_0_1 - 0.21529155643739*G0_1_0 - 0.21529155643739*G0_1_1;
    A[316] = 0.107645778218694*G0_0_0;
    A[317] = 0.107645778218694*G0_1_1;
    A[318] = -0.667403824955907*G0_0_0 - 0.262655698853618*G0_0_1 - 0.262655698853618*G0_1_0;
    A[319] = -0.344466490299817*G0_0_0 - 0.447806437389765*G0_0_1 - 0.447806437389759*G0_1_0 - 0.516699735449726*G0_1_1;
    A[320] = -0.516699735449738*G0_0_0 - 0.447806437389769*G0_0_1 - 0.447806437389772*G0_1_0 - 0.34446649029982*G0_1_1;
    A[321] = -0.262655698853615*G0_0_1 - 0.262655698853618*G0_1_0 - 0.66740382495591*G0_1_1;
    A[322] = 0.262655698853614*G0_0_1 + 0.262655698853618*G0_1_0 - 0.465029761904755*G0_1_1;
    A[323] = -0.516699735449735*G0_0_0 - 0.930059523809521*G0_0_1 - 0.93005952380953*G0_1_0 + 0.680321318342145*G0_1_1;
    A[324] = 0.731991291887121*G0_0_0 + 2.04096395502645*G0_0_1 + 2.04096395502645*G0_1_0 - 0.611428020282185*G0_1_1;
    A[325] = -2.8203193893298*G0_0_0 - 1.15826857363315*G0_0_1 - 1.15826857363315*G0_1_0 + 0.503782242063492*G0_1_1;
    A[326] = 0.503782242063493*G0_0_0 - 1.15826857363315*G0_0_1 - 1.15826857363315*G0_1_0 - 2.8203193893298*G0_1_1;
    A[327] = -0.611428020282186*G0_0_0 + 2.04096395502645*G0_0_1 + 2.04096395502644*G0_1_0 + 0.731991291887124*G0_1_1;
    A[328] = 0.68032131834215*G0_0_0 - 0.930059523809522*G0_0_1 - 0.930059523809518*G0_1_0 - 0.516699735449736*G0_1_1;
    A[329] = -0.46502976190476*G0_0_0 + 0.262655698853616*G0_0_1 + 0.262655698853615*G0_1_0;
    A[330] = 7.06156305114637*G0_0_0 + 3.1001984126984*G0_0_1 + 3.1001984126984*G0_1_0 + 7.06156305114636*G0_1_1;
    A[331] = -6.32957175925924*G0_0_0 - 3.05714010141093*G0_0_1 - 3.05714010141092*G0_1_0 - 1.80844907407407*G0_1_1;
    A[332] = 2.75573192239858*G0_0_0 + 1.37786596119929*G0_0_1 + 1.3778659611993*G0_1_0 + 1.03339947089946*G0_1_1;
    A[333] = -1.80844907407407*G0_0_0 - 3.05714010141093*G0_0_1 - 3.05714010141092*G0_1_0 - 6.32957175925924*G0_1_1;
    A[334] = 1.42092427248676*G0_0_0 + 1.46398258377425*G0_0_1 + 1.46398258377423*G0_1_0 + 1.42092427248676*G0_1_1;
    A[335] = 1.03339947089947*G0_0_0 + 1.37786596119929*G0_0_1 + 1.3778659611993*G0_1_0 + 2.75573192239859*G0_1_1;
    A[336] = -0.0538228891093462*G0_0_0 - 0.0538228891093464*G0_0_1 - 0.0538228891093459*G0_1_0 - 0.0538228891093455*G0_1_1;
    A[337] = -0.0538228891093469*G0_0_0;
    A[338] = 0.107645778218694*G0_1_1;
    A[339] = 1.35633680555555*G0_0_0 + 0.572675540123459*G0_0_1 + 0.572675540123458*G0_1_0;
    A[340] = 0.387524801587291*G0_0_0 + 0.859013310185178*G0_0_1 + 0.85901331018518*G0_1_0 + 1.01187031525573*G0_1_1;
    A[341] = 0.0430583112874839*G0_0_0 + 0.374607308201057*G0_0_1 + 0.374607308201061*G0_1_0 + 1.03339947089947*G0_1_1;
    A[342] = -0.0731991291887116*G0_0_1 - 0.0731991291887121*G0_1_0 - 0.419818535052905*G0_1_1;
    A[343] = 0.0731991291887103*G0_0_1 + 0.0731991291887118*G0_1_0 - 0.273420276675484*G0_1_1;
    A[344] = 0.0430583112874824*G0_0_0 - 0.331548996913576*G0_0_1 - 0.331548996913576*G0_1_0 + 0.32724316578483*G0_1_1;
    A[345] = 0.3875248015873*G0_0_0 - 0.471488508597882*G0_0_1 - 0.471488508597882*G0_1_0 - 0.318631503527334*G0_1_1;
    A[346] = 1.35633680555555*G0_0_0 + 0.783661265432094*G0_0_1 + 0.783661265432099*G0_1_0 + 0.210985725308638*G0_1_1;
    A[347] = 0.0495170579805985*G0_0_0 + 0.622192598104055*G0_0_1 + 0.622192598104049*G0_1_0 + 1.19486813822751*G0_1_1;
    A[348] = 0.00430583112874543*G0_0_0 - 2.40911251653439*G0_0_1 - 2.40911251653438*G0_1_0 - 3.81066054894178*G0_1_1;
    A[349] = 0.00430583112875012*G0_0_0 + 2.41341834766313*G0_0_1 + 2.41341834766313*G0_1_0 + 1.01187031525573*G0_1_1;
    A[350] = 0.0495170579805985*G0_0_0 - 0.572675540123458*G0_0_1 - 0.572675540123455*G0_1_0;
    A[351] = -6.32957175925924*G0_0_0 - 3.05714010141092*G0_0_1 - 3.05714010141093*G0_1_0 - 1.80844907407407*G0_1_1;
    A[352] = 9.94646990740738*G0_0_0 + 4.97323495370369*G0_0_1 + 4.97323495370369*G0_1_0 + 8.65472056878304*G0_1_1;
    A[353] = -6.32957175925925*G0_0_0 - 3.27243165784831*G0_0_1 - 3.27243165784832*G0_1_0 - 2.02374063051146*G0_1_1;
    A[354] = -0.387524801587305*G0_0_0 + 2.55120494378306*G0_0_1 + 2.55120494378306*G0_1_0 - 0.387524801587303*G0_1_1;
    A[355] = -0.387524801587287*G0_0_0 - 2.93872974537036*G0_0_1 - 2.93872974537036*G0_1_0 - 5.87745949074072*G0_1_1;
    A[356] = -0.0861166225749651*G0_0_0 - 0.0430583112874787*G0_0_1 - 0.0430583112874848*G0_1_0 + 1.42092427248676*G0_1_1;
    A[357] = 0.107645778218694*G0_0_0 + 0.107645778218694*G0_0_1 + 0.107645778218694*G0_1_0 + 0.107645778218695*G0_1_1;
    A[358] = -0.215291556437388*G0_0_0;
    A[359] = 0.107645778218694*G0_1_1;
    A[360] = -2.82031938932979*G0_0_0 - 1.66205081569664*G0_0_1 - 1.66205081569664*G0_1_0;
    A[361] = 0.731991291887127*G0_0_0 - 1.30897266313932*G0_0_1 - 1.30897266313932*G0_1_0 - 3.96136463844796*G0_1_1;
    A[362] = -0.516699735449734*G0_0_0 + 0.413359788359788*G0_0_1 + 0.413359788359792*G0_1_0 + 2.02374063051146*G0_1_1;
    A[363] = -0.262655698853615*G0_0_1 - 0.262655698853616*G0_1_0 - 0.990341159611987*G0_1_1;
    A[364] = 0.262655698853616*G0_0_1 + 0.262655698853616*G0_1_0 - 0.142092427248673*G0_1_1;
    A[365] = -0.516699735449738*G0_0_0 - 0.0688932980599654*G0_0_1 - 0.0688932980599631*G0_1_0 + 0.0344466490299791*G0_1_1;
    A[366] = -0.344466490299822*G0_0_0 + 0.103339947089945*G0_0_1 + 0.103339947089945*G0_1_0 + 0.0344466490299846*G0_1_1;
    A[367] = -0.667403824955907*G0_0_0 - 0.40474812610229*G0_0_1 - 0.404748126102291*G0_1_0 - 0.142092427248678*G0_1_1;
    A[368] = -0.465029761904762*G0_0_0 - 0.727685460758375*G0_0_1 - 0.727685460758372*G0_1_0 - 0.990341159611987*G0_1_1;
    A[369] = 0.680321318342154*G0_0_0 + 1.61038084215167*G0_0_1 + 1.61038084215167*G0_1_0 + 2.02374063051146*G0_1_1;
    A[370] = -0.611428020282188*G0_0_0 - 2.65239197530863*G0_0_1 - 2.65239197530863*G0_1_0 - 3.96136463844796*G0_1_1;
    A[371] = 0.50378224206349*G0_0_0 + 1.66205081569664*G0_0_1 + 1.66205081569664*G0_1_0;
    A[372] = 2.75573192239858*G0_0_0 + 1.3778659611993*G0_0_1 + 1.37786596119929*G0_1_0 + 1.03339947089946*G0_1_1;
    A[373] = -6.32957175925925*G0_0_0 - 3.27243165784832*G0_0_1 - 3.27243165784831*G0_1_0 - 2.02374063051146*G0_1_1;
    A[374] = 7.06156305114637*G0_0_0 + 3.96136463844796*G0_0_1 + 3.96136463844796*G0_1_0 + 7.92272927689592*G0_1_1;
    A[375] = 1.42092427248677*G0_0_0 - 0.0430583112874802*G0_0_1 - 0.0430583112874676*G0_1_0 - 0.0861166225749453*G0_1_1;
    A[376] = -1.80844907407408*G0_0_0 + 1.24869102733686*G0_0_1 + 1.24869102733685*G0_1_0 - 2.02374063051147*G0_1_1;
    A[377] = 1.03339947089947*G0_0_0 - 0.344466490299821*G0_0_1 - 0.344466490299829*G0_1_0 + 1.03339947089946*G0_1_1;
    A[378] = -0.0538228891093456*G0_0_0 - 0.0538228891093452*G0_0_1 - 0.0538228891093444*G0_1_0 - 0.0538228891093447*G0_1_1;
    A[379] = 0.107645778218694*G0_0_0;
    A[380] = -0.053822889109349*G0_1_1;
    A[381] = -0.419818535052908*G0_0_0 - 0.0731991291887138*G0_0_1 - 0.0731991291887071*G0_1_0;
    A[382] = 1.03339947089946*G0_0_0 + 0.374607308201055*G0_0_1 + 0.374607308201043*G0_1_0 + 0.0430583112874687*G0_1_1;
    A[383] = 1.01187031525573*G0_0_0 + 0.85901331018518*G0_0_1 + 0.859013310185191*G0_1_0 + 0.3875248015873*G0_1_1;
    A[384] = 0.572675540123457*G0_0_1 + 0.572675540123452*G0_1_0 + 1.35633680555555*G0_1_1;
    A[385] = -0.572675540123452*G0_0_1 - 0.572675540123452*G0_1_0 + 0.0495170579805984*G0_1_1;
    A[386] = 1.01187031525573*G0_0_0 + 2.41341834766313*G0_0_1 + 2.41341834766314*G0_1_0 + 0.00430583112874666*G0_1_1;
    A[387] = -3.81066054894178*G0_0_0 - 2.40911251653438*G0_0_1 - 2.40911251653438*G0_1_0 + 0.00430583112875293*G0_1_1;
    A[388] = 1.19486813822751*G0_0_0 + 0.622192598104048*G0_0_1 + 0.622192598104055*G0_1_0 + 0.0495170579805932*G0_1_1;
    A[389] = 0.210985725308635*G0_0_0 + 0.783661265432096*G0_0_1 + 0.783661265432091*G0_1_0 + 1.35633680555555*G0_1_1;
    A[390] = -0.318631503527329*G0_0_0 - 0.47148850859788*G0_0_1 - 0.471488508597879*G0_1_0 + 0.387524801587298*G0_1_1;
    A[391] = 0.327243165784824*G0_0_0 - 0.331548996913585*G0_0_1 - 0.331548996913582*G0_1_0 + 0.0430583112874769*G0_1_1;
    A[392] = -0.273420276675481*G0_0_0 + 0.0731991291887133*G0_0_1 + 0.0731991291887129*G0_1_0;
    A[393] = -1.80844907407407*G0_0_0 - 3.05714010141092*G0_0_1 - 3.05714010141093*G0_1_0 - 6.32957175925924*G0_1_1;
    A[394] = -0.387524801587305*G0_0_0 + 2.55120494378306*G0_0_1 + 2.55120494378306*G0_1_0 - 0.387524801587303*G0_1_1;
    A[395] = 1.42092427248677*G0_0_0 - 0.0430583112874678*G0_0_1 - 0.0430583112874801*G0_1_0 - 0.0861166225749454*G0_1_1;
    A[396] = 8.65472056878303*G0_0_0 + 4.97323495370368*G0_0_1 + 4.97323495370368*G0_1_0 + 9.94646990740738*G0_1_1;
    A[397] = -5.87745949074071*G0_0_0 - 2.93872974537036*G0_0_1 - 2.93872974537034*G0_1_0 - 0.387524801587298*G0_1_1;
    A[398] = -2.02374063051146*G0_0_0 - 3.27243165784831*G0_0_1 - 3.27243165784833*G0_1_0 - 6.32957175925924*G0_1_1;
    A[399] = 0.107645778218694*G0_0_0 + 0.107645778218694*G0_0_1 + 0.107645778218694*G0_1_0 + 0.107645778218693*G0_1_1;
    A[400] = -0.0538228891093463*G0_0_0;
    A[401] = -0.0538228891093471*G0_1_1;
    A[402] = 1.19486813822751*G0_0_0 + 0.572675540123457*G0_0_1 + 0.572675540123454*G0_1_0;
    A[403] = -3.81066054894178*G0_0_0 - 1.4015480324074*G0_0_1 - 1.4015480324074*G0_1_0 + 1.01187031525573*G0_1_1;
    A[404] = 1.01187031525572*G0_0_0 - 1.4015480324074*G0_0_1 - 1.4015480324074*G0_1_0 - 3.81066054894178*G0_1_1;
    A[405] = 0.572675540123456*G0_0_1 + 0.572675540123455*G0_1_0 + 1.19486813822751*G0_1_1;
    A[406] = -0.572675540123457*G0_0_1 - 0.572675540123455*G0_1_0 + 0.210985725308638*G0_1_1;
    A[407] = 1.01187031525574*G0_0_0 + 0.152857005070548*G0_0_1 + 0.152857005070548*G0_1_0 - 0.318631503527331*G0_1_1;
    A[408] = 1.03339947089946*G0_0_0 + 0.658792162698409*G0_0_1 + 0.658792162698408*G0_1_0 + 0.327243165784827*G0_1_1;
    A[409] = -0.419818535052907*G0_0_0 - 0.346619405864195*G0_0_1 - 0.346619405864197*G0_1_0 - 0.27342027667548*G0_1_1;
    A[410] = -0.273420276675477*G0_0_0 - 0.346619405864191*G0_0_1 - 0.346619405864193*G0_1_0 - 0.419818535052906*G0_1_1;
    A[411] = 0.327243165784821*G0_0_0 + 0.658792162698408*G0_0_1 + 0.658792162698406*G0_1_0 + 1.03339947089946*G0_1_1;
    A[412] = -0.318631503527328*G0_0_0 + 0.152857005070553*G0_0_1 + 0.15285700507055*G0_1_0 + 1.01187031525573*G0_1_1;
    A[413] = 0.210985725308638*G0_0_0 - 0.572675540123456*G0_0_1 - 0.572675540123455*G0_1_0;
    A[414] = 1.42092427248676*G0_0_0 + 1.46398258377423*G0_0_1 + 1.46398258377425*G0_1_0 + 1.42092427248676*G0_1_1;
    A[415] = -0.387524801587287*G0_0_0 - 2.93872974537036*G0_0_1 - 2.93872974537036*G0_1_0 - 5.87745949074072*G0_1_1;
    A[416] = -1.80844907407408*G0_0_0 + 1.24869102733685*G0_0_1 + 1.24869102733686*G0_1_0 - 2.02374063051147*G0_1_1;
    A[417] = -5.87745949074072*G0_0_0 - 2.93872974537034*G0_0_1 - 2.93872974537036*G0_1_0 - 0.387524801587298*G0_1_1;
    A[418] = 8.65472056878303*G0_0_0 + 3.68148561507935*G0_0_1 + 3.68148561507935*G0_1_0 + 8.65472056878304*G0_1_1;
    A[419] = -2.02374063051146*G0_0_0 + 1.24869102733685*G0_0_1 + 1.24869102733686*G0_1_0 - 1.80844907407406*G0_1_1;
    A[420] = 0.107645778218693*G0_0_0 + 0.107645778218693*G0_0_1 + 0.107645778218693*G0_1_0 + 0.107645778218693*G0_1_1;
    A[421] = 0.107645778218694*G0_0_0;
    A[422] = -0.215291556437386*G0_1_1;
    A[423] = -0.990341159611988*G0_0_0 - 0.262655698853617*G0_0_1 - 0.262655698853618*G0_1_0;
    A[424] = 2.02374063051146*G0_0_0 + 0.413359788359793*G0_0_1 + 0.413359788359799*G0_1_0 - 0.516699735449727*G0_1_1;
    A[425] = -3.96136463844795*G0_0_0 - 1.30897266313932*G0_0_1 - 1.30897266313933*G0_1_0 + 0.731991291887121*G0_1_1;
    A[426] = -1.66205081569664*G0_0_1 - 1.66205081569664*G0_1_0 - 2.82031938932979*G0_1_1;
    A[427] = 1.66205081569664*G0_0_1 + 1.66205081569664*G0_1_0 + 0.50378224206349*G0_1_1;
    A[428] = -3.96136463844796*G0_0_0 - 2.65239197530863*G0_0_1 - 2.65239197530863*G0_1_0 - 0.611428020282184*G0_1_1;
    A[429] = 2.02374063051146*G0_0_0 + 1.61038084215166*G0_0_1 + 1.61038084215167*G0_1_0 + 0.680321318342145*G0_1_1;
    A[430] = -0.990341159611989*G0_0_0 - 0.72768546075837*G0_0_1 - 0.727685460758374*G0_1_0 - 0.465029761904756*G0_1_1;
    A[431] = -0.142092427248678*G0_0_0 - 0.404748126102296*G0_0_1 - 0.404748126102289*G0_1_0 - 0.667403824955911*G0_1_1;
    A[432] = 0.0344466490299864*G0_0_0 + 0.103339947089949*G0_0_1 + 0.103339947089947*G0_1_0 - 0.344466490299818*G0_1_1;
    A[433] = 0.0344466490299811*G0_0_0 - 0.068893298059964*G0_0_1 - 0.0688932980599635*G0_1_0 - 0.516699735449732*G0_1_1;
    A[434] = -0.142092427248676*G0_0_0 + 0.262655698853616*G0_0_1 + 0.262655698853614*G0_1_0;
    A[435] = 1.03339947089947*G0_0_0 + 1.3778659611993*G0_0_1 + 1.37786596119929*G0_1_0 + 2.75573192239859*G0_1_1;
    A[436] = -0.086116622574965*G0_0_0 - 0.0430583112874849*G0_0_1 - 0.0430583112874789*G0_1_0 + 1.42092427248676*G0_1_1;
    A[437] = 1.03339947089947*G0_0_0 - 0.344466490299829*G0_0_1 - 0.344466490299821*G0_1_0 + 1.03339947089946*G0_1_1;
    A[438] = -2.02374063051146*G0_0_0 - 3.27243165784833*G0_0_1 - 3.27243165784831*G0_1_0 - 6.32957175925924*G0_1_1;
    A[439] = -2.02374063051146*G0_0_0 + 1.24869102733686*G0_0_1 + 1.24869102733685*G0_1_0 - 1.80844907407406*G0_1_1;
    A[440] = 7.92272927689591*G0_0_0 + 3.96136463844797*G0_0_1 + 3.96136463844797*G0_1_0 + 7.06156305114636*G0_1_1;
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class UFC_Poisson2D_5BilinearForm: public ufc::form
{
public:

  /// Constructor
  UFC_Poisson2D_5BilinearForm() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson2D_5BilinearForm()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "(dXa0/dxb0)(dXa1/dxb0) | ((d/dXa0)vi0)*((d/dXa1)vi1)*dX(0)";
  }

  /// Return the rank of the global tensor (r)
  virtual unsigned int rank() const
  {
    return 2;
  }

  /// Return the number of coefficients (n)
  virtual unsigned int num_coefficients() const
  {
    return 0;
  }

  /// Return the number of cell integrals
  virtual unsigned int num_cell_integrals() const
  {
    return 1;
  }
  
  /// Return the number of exterior facet integrals
  virtual unsigned int num_exterior_facet_integrals() const
  {
    return 0;
  }
  
  /// Return the number of interior facet integrals
  virtual unsigned int num_interior_facet_integrals() const
  {
    return 0;
  }
    
  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new UFC_Poisson2D_5BilinearForm_finite_element_0();
      break;
    case 1:
      return new UFC_Poisson2D_5BilinearForm_finite_element_1();
      break;
    }
    return 0;
  }
  
  /// Create a new dof map for argument function i
  virtual ufc::dof_map* create_dof_map(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new UFC_Poisson2D_5BilinearForm_dof_map_0();
      break;
    case 1:
      return new UFC_Poisson2D_5BilinearForm_dof_map_1();
      break;
    }
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(unsigned int i) const
  {
    return new UFC_Poisson2D_5BilinearForm_cell_integral_0();
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(unsigned int i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(unsigned int i) const
  {
    return 0;
  }

};

/// This class defines the interface for a finite element.

class UFC_Poisson2D_5LinearForm_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  UFC_Poisson2D_5LinearForm_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson2D_5LinearForm_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "Lagrange finite element of degree 5 on a triangle";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 21;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Not generated (compiled with -fno-evaluate_basis)
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Not generated (compiled with -fno-evaluate_basis_derivatives)
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    double values[1];
    double coordinates[2];
    
    // Nodal coordinates on reference cell
    static double X[21][2] = {{0, 0}, {1, 0}, {0, 1}, {0.8, 0.2}, {0.6, 0.4}, {0.4, 0.6}, {0.2, 0.8}, {0, 0.8}, {0, 0.6}, {0, 0.4}, {0, 0.2}, {0.2, 0}, {0.4, 0}, {0.6, 0}, {0.8, 0}, {0.2, 0.2}, {0.4, 0.2}, {0.6, 0.2}, {0.2, 0.4}, {0.4, 0.4}, {0.2, 0.6}};
    
    // Components for each dof
    static unsigned int components[21] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0] - X[i][1];
    const double w1 = X[i][0];
    const double w2 = X[i][1];
    
    // Compute affine mapping x = F(X)
    coordinates[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0];
    coordinates[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1];
    
    // Evaluate function at coordinates
    f.evaluate(values, coordinates, c);
    
    // Pick component for evaluation
    return values[components[i]];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate at vertices and use affine mapping
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new UFC_Poisson2D_5LinearForm_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class UFC_Poisson2D_5LinearForm_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  UFC_Poisson2D_5LinearForm_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson2D_5LinearForm_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "Lagrange finite element of degree 5 on a triangle";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 21;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Not generated (compiled with -fno-evaluate_basis)
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Not generated (compiled with -fno-evaluate_basis_derivatives)
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    double values[1];
    double coordinates[2];
    
    // Nodal coordinates on reference cell
    static double X[21][2] = {{0, 0}, {1, 0}, {0, 1}, {0.8, 0.2}, {0.6, 0.4}, {0.4, 0.6}, {0.2, 0.8}, {0, 0.8}, {0, 0.6}, {0, 0.4}, {0, 0.2}, {0.2, 0}, {0.4, 0}, {0.6, 0}, {0.8, 0}, {0.2, 0.2}, {0.4, 0.2}, {0.6, 0.2}, {0.2, 0.4}, {0.4, 0.4}, {0.2, 0.6}};
    
    // Components for each dof
    static unsigned int components[21] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0] - X[i][1];
    const double w1 = X[i][0];
    const double w2 = X[i][1];
    
    // Compute affine mapping x = F(X)
    coordinates[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0];
    coordinates[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1];
    
    // Evaluate function at coordinates
    f.evaluate(values, coordinates, c);
    
    // Pick component for evaluation
    return values[components[i]];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate at vertices and use affine mapping
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new UFC_Poisson2D_5LinearForm_finite_element_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class UFC_Poisson2D_5LinearForm_dof_map_0: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  UFC_Poisson2D_5LinearForm_dof_map_0() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~UFC_Poisson2D_5LinearForm_dof_map_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for Lagrange finite element of degree 5 on a triangle";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return true;
      break;
    case 2:
      return true;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = m.num_entities[0] + 4*m.num_entities[1] + 6*m.num_entities[2];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space
  virtual unsigned int local_dimension() const
  {
    return 21;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 6;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    unsigned int offset = m.num_entities[0];
    dofs[3] = offset + 4*c.entity_indices[1][0];
    dofs[4] = offset + 4*c.entity_indices[1][0] + 1;
    dofs[5] = offset + 4*c.entity_indices[1][0] + 2;
    dofs[6] = offset + 4*c.entity_indices[1][0] + 3;
    dofs[7] = offset + 4*c.entity_indices[1][1];
    dofs[8] = offset + 4*c.entity_indices[1][1] + 1;
    dofs[9] = offset + 4*c.entity_indices[1][1] + 2;
    dofs[10] = offset + 4*c.entity_indices[1][1] + 3;
    dofs[11] = offset + 4*c.entity_indices[1][2];
    dofs[12] = offset + 4*c.entity_indices[1][2] + 1;
    dofs[13] = offset + 4*c.entity_indices[1][2] + 2;
    dofs[14] = offset + 4*c.entity_indices[1][2] + 3;
    offset = offset + 4*m.num_entities[1];
    dofs[15] = offset + 6*c.entity_indices[2][0];
    dofs[16] = offset + 6*c.entity_indices[2][0] + 1;
    dofs[17] = offset + 6*c.entity_indices[2][0] + 2;
    dofs[18] = offset + 6*c.entity_indices[2][0] + 3;
    dofs[19] = offset + 6*c.entity_indices[2][0] + 4;
    dofs[20] = offset + 6*c.entity_indices[2][0] + 5;
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   const ufc::mesh& m,
                                   const ufc::cell& c,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 7;
      dofs[3] = 8;
      dofs[4] = 9;
      dofs[5] = 10;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 11;
      dofs[3] = 12;
      dofs[4] = 13;
      dofs[5] = 14;
      break;
    }
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double **coordinates,
                                    const ufc::cell& c) const
  {
    // This function is implemented assuming affine mapping!!
    // Get cell vertices
    const double * const * x = c.coordinates;
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[3][0] = 0.8*x[1][0] + 0.2*x[2][0];
    coordinates[3][1] = 0.8*x[1][1] + 0.2*x[2][1];
    coordinates[4][0] = 0.6*x[1][0] + 0.4*x[2][0];
    coordinates[4][1] = 0.6*x[1][1] + 0.4*x[2][1];
    coordinates[5][0] = 0.4*x[1][0] + 0.6*x[2][0];
    coordinates[5][1] = 0.4*x[1][1] + 0.6*x[2][1];
    coordinates[6][0] = 0.2*x[1][0] + 0.8*x[2][0];
    coordinates[6][1] = 0.2*x[1][1] + 0.8*x[2][1];
    coordinates[7][0] = 0.2*x[0][0] + 0.8*x[2][0];
    coordinates[7][1] = 0.2*x[0][1] + 0.8*x[2][1];
    coordinates[8][0] = 0.4*x[0][0] + 0.6*x[2][0];
    coordinates[8][1] = 0.4*x[0][1] + 0.6*x[2][1];
    coordinates[9][0] = 0.6*x[0][0] + 0.4*x[2][0];
    coordinates[9][1] = 0.6*x[0][1] + 0.4*x[2][1];
    coordinates[10][0] = 0.8*x[0][0] + 0.2*x[2][0];
    coordinates[10][1] = 0.8*x[0][1] + 0.2*x[2][1];
    coordinates[11][0] = 0.8*x[0][0] + 0.2*x[1][0];
    coordinates[11][1] = 0.8*x[0][1] + 0.2*x[1][1];
    coordinates[12][0] = 0.6*x[0][0] + 0.4*x[1][0];
    coordinates[12][1] = 0.6*x[0][1] + 0.4*x[1][1];
    coordinates[13][0] = 0.4*x[0][0] + 0.6*x[1][0];
    coordinates[13][1] = 0.4*x[0][1] + 0.6*x[1][1];
    coordinates[14][0] = 0.2*x[0][0] + 0.8*x[1][0];
    coordinates[14][1] = 0.2*x[0][1] + 0.8*x[1][1];
    coordinates[15][0] = 0.6*x[0][0] + 0.2*x[1][0] + 0.2*x[2][0];
    coordinates[15][1] = 0.6*x[0][1] + 0.2*x[1][1] + 0.2*x[2][1];
    coordinates[16][0] = 0.4*x[0][0] + 0.4*x[1][0] + 0.2*x[2][0];
    coordinates[16][1] = 0.4*x[0][1] + 0.4*x[1][1] + 0.2*x[2][1];
    coordinates[17][0] = 0.2*x[0][0] + 0.6*x[1][0] + 0.2*x[2][0];
    coordinates[17][1] = 0.2*x[0][1] + 0.6*x[1][1] + 0.2*x[2][1];
    coordinates[18][0] = 0.4*x[0][0] + 0.2*x[1][0] + 0.4*x[2][0];
    coordinates[18][1] = 0.4*x[0][1] + 0.2*x[1][1] + 0.4*x[2][1];
    coordinates[19][0] = 0.2*x[0][0] + 0.4*x[1][0] + 0.4*x[2][0];
    coordinates[19][1] = 0.2*x[0][1] + 0.4*x[1][1] + 0.4*x[2][1];
    coordinates[20][0] = 0.2*x[0][0] + 0.2*x[1][0] + 0.6*x[2][0];
    coordinates[20][1] = 0.2*x[0][1] + 0.2*x[1][1] + 0.6*x[2][1];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new UFC_Poisson2D_5LinearForm_dof_map_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class UFC_Poisson2D_5LinearForm_dof_map_1: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  UFC_Poisson2D_5LinearForm_dof_map_1() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~UFC_Poisson2D_5LinearForm_dof_map_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for Lagrange finite element of degree 5 on a triangle";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return true;
      break;
    case 2:
      return true;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = m.num_entities[0] + 4*m.num_entities[1] + 6*m.num_entities[2];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space
  virtual unsigned int local_dimension() const
  {
    return 21;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 6;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    unsigned int offset = m.num_entities[0];
    dofs[3] = offset + 4*c.entity_indices[1][0];
    dofs[4] = offset + 4*c.entity_indices[1][0] + 1;
    dofs[5] = offset + 4*c.entity_indices[1][0] + 2;
    dofs[6] = offset + 4*c.entity_indices[1][0] + 3;
    dofs[7] = offset + 4*c.entity_indices[1][1];
    dofs[8] = offset + 4*c.entity_indices[1][1] + 1;
    dofs[9] = offset + 4*c.entity_indices[1][1] + 2;
    dofs[10] = offset + 4*c.entity_indices[1][1] + 3;
    dofs[11] = offset + 4*c.entity_indices[1][2];
    dofs[12] = offset + 4*c.entity_indices[1][2] + 1;
    dofs[13] = offset + 4*c.entity_indices[1][2] + 2;
    dofs[14] = offset + 4*c.entity_indices[1][2] + 3;
    offset = offset + 4*m.num_entities[1];
    dofs[15] = offset + 6*c.entity_indices[2][0];
    dofs[16] = offset + 6*c.entity_indices[2][0] + 1;
    dofs[17] = offset + 6*c.entity_indices[2][0] + 2;
    dofs[18] = offset + 6*c.entity_indices[2][0] + 3;
    dofs[19] = offset + 6*c.entity_indices[2][0] + 4;
    dofs[20] = offset + 6*c.entity_indices[2][0] + 5;
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   const ufc::mesh& m,
                                   const ufc::cell& c,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 7;
      dofs[3] = 8;
      dofs[4] = 9;
      dofs[5] = 10;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 11;
      dofs[3] = 12;
      dofs[4] = 13;
      dofs[5] = 14;
      break;
    }
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double **coordinates,
                                    const ufc::cell& c) const
  {
    // This function is implemented assuming affine mapping!!
    // Get cell vertices
    const double * const * x = c.coordinates;
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[3][0] = 0.8*x[1][0] + 0.2*x[2][0];
    coordinates[3][1] = 0.8*x[1][1] + 0.2*x[2][1];
    coordinates[4][0] = 0.6*x[1][0] + 0.4*x[2][0];
    coordinates[4][1] = 0.6*x[1][1] + 0.4*x[2][1];
    coordinates[5][0] = 0.4*x[1][0] + 0.6*x[2][0];
    coordinates[5][1] = 0.4*x[1][1] + 0.6*x[2][1];
    coordinates[6][0] = 0.2*x[1][0] + 0.8*x[2][0];
    coordinates[6][1] = 0.2*x[1][1] + 0.8*x[2][1];
    coordinates[7][0] = 0.2*x[0][0] + 0.8*x[2][0];
    coordinates[7][1] = 0.2*x[0][1] + 0.8*x[2][1];
    coordinates[8][0] = 0.4*x[0][0] + 0.6*x[2][0];
    coordinates[8][1] = 0.4*x[0][1] + 0.6*x[2][1];
    coordinates[9][0] = 0.6*x[0][0] + 0.4*x[2][0];
    coordinates[9][1] = 0.6*x[0][1] + 0.4*x[2][1];
    coordinates[10][0] = 0.8*x[0][0] + 0.2*x[2][0];
    coordinates[10][1] = 0.8*x[0][1] + 0.2*x[2][1];
    coordinates[11][0] = 0.8*x[0][0] + 0.2*x[1][0];
    coordinates[11][1] = 0.8*x[0][1] + 0.2*x[1][1];
    coordinates[12][0] = 0.6*x[0][0] + 0.4*x[1][0];
    coordinates[12][1] = 0.6*x[0][1] + 0.4*x[1][1];
    coordinates[13][0] = 0.4*x[0][0] + 0.6*x[1][0];
    coordinates[13][1] = 0.4*x[0][1] + 0.6*x[1][1];
    coordinates[14][0] = 0.2*x[0][0] + 0.8*x[1][0];
    coordinates[14][1] = 0.2*x[0][1] + 0.8*x[1][1];
    coordinates[15][0] = 0.6*x[0][0] + 0.2*x[1][0] + 0.2*x[2][0];
    coordinates[15][1] = 0.6*x[0][1] + 0.2*x[1][1] + 0.2*x[2][1];
    coordinates[16][0] = 0.4*x[0][0] + 0.4*x[1][0] + 0.2*x[2][0];
    coordinates[16][1] = 0.4*x[0][1] + 0.4*x[1][1] + 0.2*x[2][1];
    coordinates[17][0] = 0.2*x[0][0] + 0.6*x[1][0] + 0.2*x[2][0];
    coordinates[17][1] = 0.2*x[0][1] + 0.6*x[1][1] + 0.2*x[2][1];
    coordinates[18][0] = 0.4*x[0][0] + 0.2*x[1][0] + 0.4*x[2][0];
    coordinates[18][1] = 0.4*x[0][1] + 0.2*x[1][1] + 0.4*x[2][1];
    coordinates[19][0] = 0.2*x[0][0] + 0.4*x[1][0] + 0.4*x[2][0];
    coordinates[19][1] = 0.2*x[0][1] + 0.4*x[1][1] + 0.4*x[2][1];
    coordinates[20][0] = 0.2*x[0][0] + 0.2*x[1][0] + 0.6*x[2][0];
    coordinates[20][1] = 0.2*x[0][1] + 0.2*x[1][1] + 0.6*x[2][1];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new UFC_Poisson2D_5LinearForm_dof_map_1();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class UFC_Poisson2D_5LinearForm_cell_integral_0: public ufc::cell_integral
{
public:

  /// Constructor
  UFC_Poisson2D_5LinearForm_cell_integral_0() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson2D_5LinearForm_cell_integral_0()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
      
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
      
    // Compute inverse of Jacobian
    
    // Take absolute value of determinant
    detJ = std::abs(detJ);
    
    // Set scale factor
    const double det = detJ;
    
    // Compute coefficients
    const double c0_0_0_0 = w[0][0];
    const double c0_0_0_1 = w[0][1];
    const double c0_0_0_2 = w[0][2];
    const double c0_0_0_3 = w[0][3];
    const double c0_0_0_4 = w[0][4];
    const double c0_0_0_5 = w[0][5];
    const double c0_0_0_6 = w[0][6];
    const double c0_0_0_7 = w[0][7];
    const double c0_0_0_8 = w[0][8];
    const double c0_0_0_9 = w[0][9];
    const double c0_0_0_10 = w[0][10];
    const double c0_0_0_11 = w[0][11];
    const double c0_0_0_12 = w[0][12];
    const double c0_0_0_13 = w[0][13];
    const double c0_0_0_14 = w[0][14];
    const double c0_0_0_15 = w[0][15];
    const double c0_0_0_16 = w[0][16];
    const double c0_0_0_17 = w[0][17];
    const double c0_0_0_18 = w[0][18];
    const double c0_0_0_19 = w[0][19];
    const double c0_0_0_20 = w[0][20];
    
    // Compute geometry tensors
    const double G0_0 = det*c0_0_0_0;
    const double G0_1 = det*c0_0_0_1;
    const double G0_2 = det*c0_0_0_2;
    const double G0_3 = det*c0_0_0_3;
    const double G0_4 = det*c0_0_0_4;
    const double G0_5 = det*c0_0_0_5;
    const double G0_6 = det*c0_0_0_6;
    const double G0_7 = det*c0_0_0_7;
    const double G0_8 = det*c0_0_0_8;
    const double G0_9 = det*c0_0_0_9;
    const double G0_10 = det*c0_0_0_10;
    const double G0_11 = det*c0_0_0_11;
    const double G0_12 = det*c0_0_0_12;
    const double G0_13 = det*c0_0_0_13;
    const double G0_14 = det*c0_0_0_14;
    const double G0_15 = det*c0_0_0_15;
    const double G0_16 = det*c0_0_0_16;
    const double G0_17 = det*c0_0_0_17;
    const double G0_18 = det*c0_0_0_18;
    const double G0_19 = det*c0_0_0_19;
    const double G0_20 = det*c0_0_0_20;
    
    // Compute element tensor
    A[0] = 0.00138945256132761*G0_0 + 0.000123877456776767*G0_1 + 0.000123877456776767*G0_2 + 0.000363647010782442*G0_3 + 0.000207201813104597*G0_4 + 0.000207201813104599*G0_5 + 0.00036364701078244*G0_6 - 2.2964432686655e-05*G0_7 + 0.000462681126743642*G0_8 - 0.000958243145743177*G0_9 + 0.00118136348605102*G0_10 + 0.00118136348605103*G0_11 - 0.000958243145743176*G0_12 + 0.000462681126743641*G0_13 - 2.29644326866522e-05*G0_14 + 0.000892481361231392*G0_15 - 0.000974683591871127*G0_16 + 0.000879433388113976*G0_17 - 0.000974683591871127*G0_18 + 0.000649789061247417*G0_19 + 0.000879433388113974*G0_20;
    A[1] = 0.000123877456776767*G0_0 + 0.00138945256132761*G0_1 + 0.000123877456776767*G0_2 + 0.00118136348605103*G0_3 - 0.00095824314574318*G0_4 + 0.000462681126743643*G0_5 - 2.29644326866554e-05*G0_6 + 0.00036364701078244*G0_7 + 0.000207201813104598*G0_8 + 0.000207201813104598*G0_9 + 0.000363647010782439*G0_10 - 2.29644326866568e-05*G0_11 + 0.000462681126743647*G0_12 - 0.000958243145743184*G0_13 + 0.00118136348605103*G0_14 + 0.000879433388113973*G0_15 - 0.000974683591871125*G0_16 + 0.000892481361231393*G0_17 + 0.000649789061247416*G0_18 - 0.000974683591871127*G0_19 + 0.000879433388113975*G0_20;
    A[2] = 0.000123877456776767*G0_0 + 0.000123877456776767*G0_1 + 0.00138945256132761*G0_2 - 2.29644326866545e-05*G0_3 + 0.000462681126743642*G0_4 - 0.000958243145743178*G0_5 + 0.00118136348605103*G0_6 + 0.00118136348605103*G0_7 - 0.000958243145743178*G0_8 + 0.000462681126743642*G0_9 - 2.29644326866555e-05*G0_10 + 0.00036364701078244*G0_11 + 0.0002072018131046*G0_12 + 0.000207201813104597*G0_13 + 0.000363647010782442*G0_14 + 0.000879433388113975*G0_15 + 0.000649789061247417*G0_16 + 0.000879433388113975*G0_17 - 0.000974683591871127*G0_18 - 0.000974683591871126*G0_19 + 0.000892481361231393*G0_20;
    A[3] = 0.000363647010782442*G0_0 + 0.00118136348605103*G0_1 - 2.29644326866545e-05*G0_2 + 0.0147050657033301*G0_3 - 0.00958373625474353*G0_4 + 0.00770482812583534*G0_5 - 0.00396984582097442*G0_6 - 0.00248237688558877*G0_7 - 4.56679059109653e-05*G0_8 - 0.00144832501603339*G0_9 - 0.000411011153198668*G0_10 - 0.00248237688558878*G0_11 + 0.00576068013134007*G0_12 - 0.00735253285166507*G0_13 + 0.00735253285166507*G0_14 + 0.000782878387045095*G0_15 - 0.00381653213684479*G0_16 + 0.0102426588971732*G0_17 - 0.0013700371773289*G0_18 + 9.78597983806189e-05*G0_19 - 0.00280531422024486*G0_20;
    A[4] = 0.000207201813104597*G0_0 - 0.00095824314574318*G0_1 + 0.000462681126743642*G0_2 - 0.00958373625474353*G0_3 + 0.0220771705146713*G0_4 - 0.0134785562302928*G0_5 + 0.00770482812583534*G0_6 + 0.00576068013134004*G0_7 - 0.00135698920421147*G0_8 + 0.00281836219336228*G0_9 - 0.00144832501603339*G0_10 - 4.56679059109587e-05*G0_11 - 0.00135698920421149*G0_12 + 0.00294884192453649*G0_13 - 0.00735253285166506*G0_14 + 0.00313151354818032*G0_15 - 0.00548014870931557*G0_16 - 0.001435277042916*G0_17 - 0.0005871587902838*G0_18 + 0.0052844291125543*G0_19 + 0.00508870951579302*G0_20;
    A[5] = 0.000207201813104599*G0_0 + 0.000462681126743643*G0_1 - 0.000958243145743178*G0_2 + 0.00770482812583534*G0_3 - 0.0134785562302928*G0_4 + 0.0220771705146713*G0_5 - 0.00958373625474352*G0_6 - 0.00735253285166504*G0_7 + 0.00294884192453646*G0_8 - 0.00135698920421146*G0_9 - 4.56679059109686e-05*G0_10 - 0.0014483250160334*G0_11 + 0.0028183621933623*G0_12 - 0.00135698920421149*G0_13 + 0.00576068013134007*G0_14 + 0.00313151354818033*G0_15 - 0.000587158790283813*G0_16 + 0.00508870951579304*G0_17 - 0.00548014870931557*G0_18 + 0.00528442911255429*G0_19 - 0.00143527704291598*G0_20;
    A[6] = 0.00036364701078244*G0_0 - 2.29644326866554e-05*G0_1 + 0.00118136348605103*G0_2 - 0.00396984582097442*G0_3 + 0.00770482812583534*G0_4 - 0.00958373625474352*G0_5 + 0.0147050657033301*G0_6 + 0.00735253285166504*G0_7 - 0.00735253285166504*G0_8 + 0.00576068013134005*G0_9 - 0.00248237688558878*G0_10 - 0.000411011153198667*G0_11 - 0.0014483250160334*G0_12 - 4.56679059109586e-05*G0_13 - 0.00248237688558878*G0_14 + 0.000782878387045076*G0_15 - 0.00137003717732889*G0_16 - 0.00280531422024487*G0_17 - 0.00381653213684477*G0_18 + 9.78597983806374e-05*G0_19 + 0.0102426588971731*G0_20;
    A[7] = -2.2964432686655e-05*G0_0 + 0.00036364701078244*G0_1 + 0.00118136348605103*G0_2 - 0.00248237688558877*G0_3 + 0.00576068013134004*G0_4 - 0.00735253285166504*G0_5 + 0.00735253285166504*G0_6 + 0.0147050657033301*G0_7 - 0.00958373625474352*G0_8 + 0.00770482812583532*G0_9 - 0.00396984582097442*G0_10 - 0.00248237688558877*G0_11 - 4.56679059109618e-05*G0_12 - 0.0014483250160334*G0_13 - 0.000411011153198665*G0_14 - 0.00280531422024487*G0_15 - 0.00137003717732889*G0_16 + 0.000782878387045086*G0_17 + 9.78597983806357e-05*G0_18 - 0.00381653213684476*G0_19 + 0.0102426588971731*G0_20;
    A[8] = 0.000462681126743642*G0_0 + 0.000207201813104598*G0_1 - 0.000958243145743178*G0_2 - 4.56679059109653e-05*G0_3 - 0.00135698920421147*G0_4 + 0.00294884192453646*G0_5 - 0.00735253285166504*G0_6 - 0.00958373625474352*G0_7 + 0.0220771705146713*G0_8 - 0.0134785562302928*G0_9 + 0.00770482812583532*G0_10 + 0.00576068013134004*G0_11 - 0.00135698920421147*G0_12 + 0.00281836219336228*G0_13 - 0.0014483250160334*G0_14 + 0.00508870951579302*G0_15 - 0.000587158790283804*G0_16 + 0.00313151354818032*G0_17 + 0.00528442911255429*G0_18 - 0.00548014870931556*G0_19 - 0.00143527704291597*G0_20;
    A[9] = -0.000958243145743177*G0_0 + 0.000207201813104598*G0_1 + 0.000462681126743642*G0_2 - 0.00144832501603339*G0_3 + 0.00281836219336228*G0_4 - 0.00135698920421146*G0_5 + 0.00576068013134005*G0_6 + 0.00770482812583532*G0_7 - 0.0134785562302928*G0_8 + 0.0220771705146713*G0_9 - 0.00958373625474351*G0_10 - 0.00735253285166504*G0_11 + 0.00294884192453646*G0_12 - 0.00135698920421147*G0_13 - 4.56679059109634e-05*G0_14 - 0.00143527704291597*G0_15 - 0.00548014870931557*G0_16 + 0.00313151354818032*G0_17 + 0.00528442911255429*G0_18 - 0.000587158790283805*G0_19 + 0.00508870951579302*G0_20;
    A[10] = 0.00118136348605102*G0_0 + 0.000363647010782439*G0_1 - 2.29644326866555e-05*G0_2 - 0.000411011153198668*G0_3 - 0.00144832501603339*G0_4 - 4.56679059109684e-05*G0_5 - 0.00248237688558878*G0_6 - 0.00396984582097442*G0_7 + 0.00770482812583532*G0_8 - 0.00958373625474351*G0_9 + 0.0147050657033301*G0_10 + 0.00735253285166504*G0_11 - 0.00735253285166504*G0_12 + 0.00576068013134005*G0_13 - 0.00248237688558877*G0_14 + 0.0102426588971731*G0_15 - 0.00381653213684476*G0_16 + 0.00078287838704507*G0_17 + 9.78597983806375e-05*G0_18 - 0.00137003717732888*G0_19 - 0.00280531422024487*G0_20;
    A[11] = 0.00118136348605103*G0_0 - 2.29644326866568e-05*G0_1 + 0.00036364701078244*G0_2 - 0.00248237688558878*G0_3 - 4.56679059109589e-05*G0_4 - 0.0014483250160334*G0_5 - 0.000411011153198667*G0_6 - 0.00248237688558877*G0_7 + 0.00576068013134004*G0_8 - 0.00735253285166504*G0_9 + 0.00735253285166504*G0_10 + 0.0147050657033301*G0_11 - 0.00958373625474353*G0_12 + 0.00770482812583534*G0_13 - 0.00396984582097444*G0_14 + 0.0102426588971731*G0_15 + 9.78597983806439e-05*G0_16 - 0.0028053142202449*G0_17 - 0.00381653213684478*G0_18 - 0.00137003717732887*G0_19 + 0.000782878387045076*G0_20;
    A[12] = -0.000958243145743176*G0_0 + 0.000462681126743647*G0_1 + 0.0002072018131046*G0_2 + 0.00576068013134007*G0_3 - 0.00135698920421148*G0_4 + 0.0028183621933623*G0_5 - 0.0014483250160334*G0_6 - 4.56679059109617e-05*G0_7 - 0.00135698920421147*G0_8 + 0.00294884192453646*G0_9 - 0.00735253285166504*G0_10 - 0.00958373625474353*G0_11 + 0.0220771705146713*G0_12 - 0.0134785562302928*G0_13 + 0.00770482812583536*G0_14 - 0.00143527704291596*G0_15 + 0.00528442911255427*G0_16 + 0.00508870951579308*G0_17 - 0.00548014870931557*G0_18 - 0.000587158790283838*G0_19 + 0.00313151354818034*G0_20;
    A[13] = 0.000462681126743641*G0_0 - 0.000958243145743184*G0_1 + 0.000207201813104597*G0_2 - 0.00735253285166507*G0_3 + 0.00294884192453649*G0_4 - 0.00135698920421149*G0_5 - 4.56679059109585e-05*G0_6 - 0.0014483250160334*G0_7 + 0.00281836219336228*G0_8 - 0.00135698920421147*G0_9 + 0.00576068013134004*G0_10 + 0.00770482812583534*G0_11 - 0.0134785562302928*G0_12 + 0.0220771705146713*G0_13 - 0.00958373625474356*G0_14 + 0.00508870951579302*G0_15 + 0.00528442911255431*G0_16 - 0.00143527704291603*G0_17 - 0.000587158790283811*G0_18 - 0.00548014870931554*G0_19 + 0.00313151354818032*G0_20;
    A[14] = -2.29644326866522e-05*G0_0 + 0.00118136348605103*G0_1 + 0.000363647010782442*G0_2 + 0.00735253285166507*G0_3 - 0.00735253285166506*G0_4 + 0.00576068013134006*G0_5 - 0.00248237688558878*G0_6 - 0.000411011153198665*G0_7 - 0.0014483250160334*G0_8 - 4.56679059109637e-05*G0_9 - 0.00248237688558877*G0_10 - 0.00396984582097444*G0_11 + 0.00770482812583536*G0_12 - 0.00958373625474356*G0_13 + 0.0147050657033301*G0_14 - 0.00280531422024486*G0_15 + 9.78597983806241e-05*G0_16 + 0.0102426588971732*G0_17 - 0.0013700371773289*G0_18 - 0.00381653213684478*G0_19 + 0.000782878387045095*G0_20;
    A[15] = 0.000892481361231392*G0_0 + 0.000879433388113973*G0_1 + 0.000879433388113975*G0_2 + 0.000782878387045095*G0_3 + 0.00313151354818032*G0_4 + 0.00313151354818033*G0_5 + 0.000782878387045076*G0_6 - 0.00280531422024487*G0_7 + 0.00508870951579302*G0_8 - 0.00143527704291597*G0_9 + 0.0102426588971731*G0_10 + 0.0102426588971731*G0_11 - 0.00143527704291596*G0_12 + 0.00508870951579301*G0_13 - 0.00280531422024486*G0_14 + 0.0704590548340573*G0_15 - 0.0156575677409016*G0_16 + 0.0117431758056762*G0_17 - 0.0156575677409016*G0_18 + 0.0039143919352254*G0_19 + 0.0117431758056762*G0_20;
    A[16] = -0.000974683591871127*G0_0 - 0.000974683591871125*G0_1 + 0.000649789061247417*G0_2 - 0.00381653213684479*G0_3 - 0.00548014870931557*G0_4 - 0.000587158790283813*G0_5 - 0.00137003717732889*G0_6 - 0.00137003717732889*G0_7 - 0.000587158790283804*G0_8 - 0.00548014870931557*G0_9 - 0.00381653213684476*G0_10 + 9.78597983806446e-05*G0_11 + 0.00528442911255427*G0_12 + 0.00528442911255431*G0_13 + 9.78597983806239e-05*G0_14 - 0.0156575677409016*G0_15 + 0.0763306427368954*G0_16 - 0.0156575677409016*G0_17 - 0.0117431758056762*G0_18 - 0.0117431758056762*G0_19 + 0.00391439193522539*G0_20;
    A[17] = 0.000879433388113976*G0_0 + 0.000892481361231393*G0_1 + 0.000879433388113975*G0_2 + 0.0102426588971732*G0_3 - 0.001435277042916*G0_4 + 0.00508870951579304*G0_5 - 0.00280531422024487*G0_6 + 0.000782878387045086*G0_7 + 0.00313151354818032*G0_8 + 0.00313151354818032*G0_9 + 0.00078287838704507*G0_10 - 0.0028053142202449*G0_11 + 0.00508870951579308*G0_12 - 0.00143527704291603*G0_13 + 0.0102426588971732*G0_14 + 0.0117431758056762*G0_15 - 0.0156575677409016*G0_16 + 0.0704590548340573*G0_17 + 0.00391439193522541*G0_18 - 0.0156575677409016*G0_19 + 0.0117431758056762*G0_20;
    A[18] = -0.000974683591871127*G0_0 + 0.000649789061247416*G0_1 - 0.000974683591871127*G0_2 - 0.0013700371773289*G0_3 - 0.0005871587902838*G0_4 - 0.00548014870931557*G0_5 - 0.00381653213684477*G0_6 + 9.78597983806348e-05*G0_7 + 0.00528442911255429*G0_8 + 0.00528442911255429*G0_9 + 9.78597983806375e-05*G0_10 - 0.00381653213684478*G0_11 - 0.00548014870931557*G0_12 - 0.000587158790283811*G0_13 - 0.0013700371773289*G0_14 - 0.0156575677409016*G0_15 - 0.0117431758056762*G0_16 + 0.00391439193522541*G0_17 + 0.0763306427368954*G0_18 - 0.0117431758056762*G0_19 - 0.0156575677409016*G0_20;
    A[19] = 0.000649789061247416*G0_0 - 0.000974683591871127*G0_1 - 0.000974683591871126*G0_2 + 9.78597983806184e-05*G0_3 + 0.0052844291125543*G0_4 + 0.00528442911255429*G0_5 + 9.78597983806372e-05*G0_6 - 0.00381653213684476*G0_7 - 0.00548014870931556*G0_8 - 0.000587158790283806*G0_9 - 0.00137003717732888*G0_10 - 0.00137003717732887*G0_11 - 0.000587158790283838*G0_12 - 0.00548014870931554*G0_13 - 0.00381653213684478*G0_14 + 0.0039143919352254*G0_15 - 0.0117431758056762*G0_16 - 0.0156575677409016*G0_17 - 0.0117431758056762*G0_18 + 0.0763306427368953*G0_19 - 0.0156575677409016*G0_20;
    A[20] = 0.000879433388113974*G0_0 + 0.000879433388113975*G0_1 + 0.000892481361231393*G0_2 - 0.00280531422024486*G0_3 + 0.00508870951579302*G0_4 - 0.00143527704291598*G0_5 + 0.0102426588971731*G0_6 + 0.0102426588971731*G0_7 - 0.00143527704291598*G0_8 + 0.00508870951579302*G0_9 - 0.00280531422024487*G0_10 + 0.000782878387045076*G0_11 + 0.00313151354818034*G0_12 + 0.00313151354818032*G0_13 + 0.000782878387045095*G0_14 + 0.0117431758056762*G0_15 + 0.00391439193522539*G0_16 + 0.0117431758056762*G0_17 - 0.0156575677409016*G0_18 - 0.0156575677409016*G0_19 + 0.0704590548340573*G0_20;
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class UFC_Poisson2D_5LinearForm: public ufc::form
{
public:

  /// Constructor
  UFC_Poisson2D_5LinearForm() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson2D_5LinearForm()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "w0_a0 | vi0*va0*dX(0)";
  }

  /// Return the rank of the global tensor (r)
  virtual unsigned int rank() const
  {
    return 1;
  }

  /// Return the number of coefficients (n)
  virtual unsigned int num_coefficients() const
  {
    return 1;
  }

  /// Return the number of cell integrals
  virtual unsigned int num_cell_integrals() const
  {
    return 1;
  }
  
  /// Return the number of exterior facet integrals
  virtual unsigned int num_exterior_facet_integrals() const
  {
    return 0;
  }
  
  /// Return the number of interior facet integrals
  virtual unsigned int num_interior_facet_integrals() const
  {
    return 0;
  }
    
  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new UFC_Poisson2D_5LinearForm_finite_element_0();
      break;
    case 1:
      return new UFC_Poisson2D_5LinearForm_finite_element_1();
      break;
    }
    return 0;
  }
  
  /// Create a new dof map for argument function i
  virtual ufc::dof_map* create_dof_map(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new UFC_Poisson2D_5LinearForm_dof_map_0();
      break;
    case 1:
      return new UFC_Poisson2D_5LinearForm_dof_map_1();
      break;
    }
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(unsigned int i) const
  {
    return new UFC_Poisson2D_5LinearForm_cell_integral_0();
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(unsigned int i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(unsigned int i) const
  {
    return 0;
  }

};

// DOLFIN wrappers

#include <dolfin/Form.h>

class Poisson2D_5BilinearForm : public dolfin::Form
{
public:

  Poisson2D_5BilinearForm() : dolfin::Form()
  {
    // Do nothing
  }

  /// Return UFC form
  virtual const ufc::form& form() const
  {
    return __form;
  }
  
  /// Return array of coefficients
  virtual const dolfin::Array<dolfin::Function*>& coefficients() const
  {
    return __coefficients;
  }

private:

  // UFC form
  UFC_Poisson2D_5BilinearForm __form;

  /// Array of coefficients
  dolfin::Array<dolfin::Function*> __coefficients;

};

class Poisson2D_5LinearForm : public dolfin::Form
{
public:

  Poisson2D_5LinearForm(dolfin::Function& w0) : dolfin::Form()
  {
    __coefficients.push_back(&w0);
  }

  /// Return UFC form
  virtual const ufc::form& form() const
  {
    return __form;
  }
  
  /// Return array of coefficients
  virtual const dolfin::Array<dolfin::Function*>& coefficients() const
  {
    return __coefficients;
  }

private:

  // UFC form
  UFC_Poisson2D_5LinearForm __form;

  /// Array of coefficients
  dolfin::Array<dolfin::Function*> __coefficients;

};

#endif
