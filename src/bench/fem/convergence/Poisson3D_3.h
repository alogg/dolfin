// This code conforms with the UFC specification version 1.0
// and was automatically generated by FFC version 0.3.5.
//
// Warning: This code was generated with the option '-l dolfin'
// and contains DOLFIN-specific wrappers that depend on DOLFIN.

#ifndef __POISSON3D_3_H
#define __POISSON3D_3_H

#include <cmath>
#include <stdexcept>
#include <ufc.h>

/// This class defines the interface for a finite element.

class UFC_Poisson3D_3BilinearForm_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  UFC_Poisson3D_3BilinearForm_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson3D_3BilinearForm_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "Lagrange finite element of degree 3 on a tetrahedron";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 20;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Not generated (compiled with -fno-evaluate_basis)
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Not generated (compiled with -fno-evaluate_basis_derivatives)
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    double values[1];
    double coordinates[3];
    
    // Nodal coordinates on reference cell
    static double X[20][3] = {{0, 0, 0}, {1, 0, 0}, {0, 1, 0}, {0, 0, 1}, {0.666666666666667, 0.333333333333333, 0}, {0.333333333333333, 0.666666666666667, 0}, {0, 0.666666666666667, 0}, {0, 0.333333333333333, 0}, {0.333333333333333, 0, 0}, {0.666666666666667, 0, 0}, {0, 0, 0.333333333333333}, {0, 0, 0.666666666666667}, {0.666666666666667, 0, 0.333333333333333}, {0.333333333333333, 0, 0.666666666666667}, {0, 0.666666666666667, 0.333333333333333}, {0, 0.333333333333333, 0.666666666666667}, {0.333333333333333, 0.333333333333333, 0.333333333333333}, {0, 0.333333333333333, 0.333333333333333}, {0.333333333333333, 0, 0.333333333333333}, {0.333333333333333, 0.333333333333333, 0}};
    
    // Components for each dof
    static unsigned int components[20] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0] - X[i][1] - X[i][2];
    const double w1 = X[i][0];
    const double w2 = X[i][1];
    const double w3 = X[i][2];
    
    // Compute affine mapping x = F(X)
    coordinates[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0] + w3*x[3][0];
    coordinates[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1] + w3*x[3][1];
    coordinates[2] = w0*x[0][2] + w1*x[1][2] + w2*x[2][2] + w3*x[3][2];
    
    // Evaluate function at coordinates
    f.evaluate(values, coordinates, c);
    
    // Pick component for evaluation
    return values[components[i]];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate at vertices and use affine mapping
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new UFC_Poisson3D_3BilinearForm_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class UFC_Poisson3D_3BilinearForm_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  UFC_Poisson3D_3BilinearForm_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson3D_3BilinearForm_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "Lagrange finite element of degree 3 on a tetrahedron";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 20;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Not generated (compiled with -fno-evaluate_basis)
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Not generated (compiled with -fno-evaluate_basis_derivatives)
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    double values[1];
    double coordinates[3];
    
    // Nodal coordinates on reference cell
    static double X[20][3] = {{0, 0, 0}, {1, 0, 0}, {0, 1, 0}, {0, 0, 1}, {0.666666666666667, 0.333333333333333, 0}, {0.333333333333333, 0.666666666666667, 0}, {0, 0.666666666666667, 0}, {0, 0.333333333333333, 0}, {0.333333333333333, 0, 0}, {0.666666666666667, 0, 0}, {0, 0, 0.333333333333333}, {0, 0, 0.666666666666667}, {0.666666666666667, 0, 0.333333333333333}, {0.333333333333333, 0, 0.666666666666667}, {0, 0.666666666666667, 0.333333333333333}, {0, 0.333333333333333, 0.666666666666667}, {0.333333333333333, 0.333333333333333, 0.333333333333333}, {0, 0.333333333333333, 0.333333333333333}, {0.333333333333333, 0, 0.333333333333333}, {0.333333333333333, 0.333333333333333, 0}};
    
    // Components for each dof
    static unsigned int components[20] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0] - X[i][1] - X[i][2];
    const double w1 = X[i][0];
    const double w2 = X[i][1];
    const double w3 = X[i][2];
    
    // Compute affine mapping x = F(X)
    coordinates[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0] + w3*x[3][0];
    coordinates[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1] + w3*x[3][1];
    coordinates[2] = w0*x[0][2] + w1*x[1][2] + w2*x[2][2] + w3*x[3][2];
    
    // Evaluate function at coordinates
    f.evaluate(values, coordinates, c);
    
    // Pick component for evaluation
    return values[components[i]];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate at vertices and use affine mapping
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new UFC_Poisson3D_3BilinearForm_finite_element_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class UFC_Poisson3D_3BilinearForm_dof_map_0: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  UFC_Poisson3D_3BilinearForm_dof_map_0() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~UFC_Poisson3D_3BilinearForm_dof_map_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for Lagrange finite element of degree 3 on a tetrahedron";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return true;
      break;
    case 2:
      return true;
      break;
    case 3:
      return false;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = m.num_entities[0] + 2*m.num_entities[1] + m.num_entities[2];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space
  virtual unsigned int local_dimension() const
  {
    return 20;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 10;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    dofs[3] = c.entity_indices[0][3];
    unsigned int offset = m.num_entities[0];
    dofs[4] = offset + 2*c.entity_indices[1][0];
    dofs[5] = offset + 2*c.entity_indices[1][0] + 1;
    dofs[6] = offset + 2*c.entity_indices[1][1];
    dofs[7] = offset + 2*c.entity_indices[1][1] + 1;
    dofs[8] = offset + 2*c.entity_indices[1][2];
    dofs[9] = offset + 2*c.entity_indices[1][2] + 1;
    dofs[10] = offset + 2*c.entity_indices[1][3];
    dofs[11] = offset + 2*c.entity_indices[1][3] + 1;
    dofs[12] = offset + 2*c.entity_indices[1][4];
    dofs[13] = offset + 2*c.entity_indices[1][4] + 1;
    dofs[14] = offset + 2*c.entity_indices[1][5];
    dofs[15] = offset + 2*c.entity_indices[1][5] + 1;
    offset = offset + 2*m.num_entities[1];
    dofs[16] = offset + c.entity_indices[2][0];
    dofs[17] = offset + c.entity_indices[2][1];
    dofs[18] = offset + c.entity_indices[2][2];
    dofs[19] = offset + c.entity_indices[2][3];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   const ufc::mesh& m,
                                   const ufc::cell& c,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 7;
      dofs[7] = 8;
      dofs[8] = 9;
      dofs[9] = 16;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 10;
      dofs[6] = 11;
      dofs[7] = 12;
      dofs[8] = 13;
      dofs[9] = 17;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 6;
      dofs[4] = 7;
      dofs[5] = 10;
      dofs[6] = 11;
      dofs[7] = 14;
      dofs[8] = 15;
      dofs[9] = 18;
      break;
    case 3:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 8;
      dofs[4] = 9;
      dofs[5] = 12;
      dofs[6] = 13;
      dofs[7] = 14;
      dofs[8] = 15;
      dofs[9] = 19;
      break;
    }
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double **coordinates,
                                    const ufc::cell& c) const
  {
    // This function is implemented assuming affine mapping!!
    // Get cell vertices
    const double * const * x = c.coordinates;
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[0][2] = x[0][2];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[1][2] = x[1][2];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[2][2] = x[2][2];
    coordinates[3][0] = x[3][0];
    coordinates[3][1] = x[3][1];
    coordinates[3][2] = x[3][2];
    coordinates[4][0] = 0.666666666666667*x[1][0] + 0.333333333333333*x[2][0];
    coordinates[4][1] = 0.666666666666667*x[1][1] + 0.333333333333333*x[2][1];
    coordinates[4][2] = 0.666666666666667*x[1][2] + 0.333333333333333*x[2][2];
    coordinates[5][0] = 0.333333333333333*x[1][0] + 0.666666666666667*x[2][0];
    coordinates[5][1] = 0.333333333333333*x[1][1] + 0.666666666666667*x[2][1];
    coordinates[5][2] = 0.333333333333333*x[1][2] + 0.666666666666667*x[2][2];
    coordinates[6][0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[2][0];
    coordinates[6][1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[2][1];
    coordinates[6][2] = 0.333333333333333*x[0][2] + 0.666666666666667*x[2][2];
    coordinates[7][0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[2][0];
    coordinates[7][1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[2][1];
    coordinates[7][2] = 0.666666666666667*x[0][2] + 0.333333333333333*x[2][2];
    coordinates[8][0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[1][0];
    coordinates[8][1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[1][1];
    coordinates[8][2] = 0.666666666666667*x[0][2] + 0.333333333333333*x[1][2];
    coordinates[9][0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[1][0];
    coordinates[9][1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[1][1];
    coordinates[9][2] = 0.333333333333333*x[0][2] + 0.666666666666667*x[1][2];
    coordinates[10][0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[3][0];
    coordinates[10][1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[3][1];
    coordinates[10][2] = 0.666666666666667*x[0][2] + 0.333333333333333*x[3][2];
    coordinates[11][0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[3][0];
    coordinates[11][1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[3][1];
    coordinates[11][2] = 0.333333333333333*x[0][2] + 0.666666666666667*x[3][2];
    coordinates[12][0] = 0.666666666666667*x[1][0] + 0.333333333333333*x[3][0];
    coordinates[12][1] = 0.666666666666667*x[1][1] + 0.333333333333333*x[3][1];
    coordinates[12][2] = 0.666666666666667*x[1][2] + 0.333333333333333*x[3][2];
    coordinates[13][0] = 0.333333333333333*x[1][0] + 0.666666666666667*x[3][0];
    coordinates[13][1] = 0.333333333333333*x[1][1] + 0.666666666666667*x[3][1];
    coordinates[13][2] = 0.333333333333333*x[1][2] + 0.666666666666667*x[3][2];
    coordinates[14][0] = 0.666666666666667*x[2][0] + 0.333333333333333*x[3][0];
    coordinates[14][1] = 0.666666666666667*x[2][1] + 0.333333333333333*x[3][1];
    coordinates[14][2] = 0.666666666666667*x[2][2] + 0.333333333333333*x[3][2];
    coordinates[15][0] = 0.333333333333333*x[2][0] + 0.666666666666667*x[3][0];
    coordinates[15][1] = 0.333333333333333*x[2][1] + 0.666666666666667*x[3][1];
    coordinates[15][2] = 0.333333333333333*x[2][2] + 0.666666666666667*x[3][2];
    coordinates[16][0] = 0.333333333333333*x[1][0] + 0.333333333333333*x[2][0] + 0.333333333333333*x[3][0];
    coordinates[16][1] = 0.333333333333333*x[1][1] + 0.333333333333333*x[2][1] + 0.333333333333333*x[3][1];
    coordinates[16][2] = 0.333333333333333*x[1][2] + 0.333333333333333*x[2][2] + 0.333333333333333*x[3][2];
    coordinates[17][0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[2][0] + 0.333333333333333*x[3][0];
    coordinates[17][1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[2][1] + 0.333333333333333*x[3][1];
    coordinates[17][2] = 0.333333333333333*x[0][2] + 0.333333333333333*x[2][2] + 0.333333333333333*x[3][2];
    coordinates[18][0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[1][0] + 0.333333333333333*x[3][0];
    coordinates[18][1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[1][1] + 0.333333333333333*x[3][1];
    coordinates[18][2] = 0.333333333333333*x[0][2] + 0.333333333333333*x[1][2] + 0.333333333333333*x[3][2];
    coordinates[19][0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[1][0] + 0.333333333333333*x[2][0];
    coordinates[19][1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[1][1] + 0.333333333333333*x[2][1];
    coordinates[19][2] = 0.333333333333333*x[0][2] + 0.333333333333333*x[1][2] + 0.333333333333333*x[2][2];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new UFC_Poisson3D_3BilinearForm_dof_map_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class UFC_Poisson3D_3BilinearForm_dof_map_1: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  UFC_Poisson3D_3BilinearForm_dof_map_1() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~UFC_Poisson3D_3BilinearForm_dof_map_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for Lagrange finite element of degree 3 on a tetrahedron";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return true;
      break;
    case 2:
      return true;
      break;
    case 3:
      return false;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = m.num_entities[0] + 2*m.num_entities[1] + m.num_entities[2];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space
  virtual unsigned int local_dimension() const
  {
    return 20;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 10;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    dofs[3] = c.entity_indices[0][3];
    unsigned int offset = m.num_entities[0];
    dofs[4] = offset + 2*c.entity_indices[1][0];
    dofs[5] = offset + 2*c.entity_indices[1][0] + 1;
    dofs[6] = offset + 2*c.entity_indices[1][1];
    dofs[7] = offset + 2*c.entity_indices[1][1] + 1;
    dofs[8] = offset + 2*c.entity_indices[1][2];
    dofs[9] = offset + 2*c.entity_indices[1][2] + 1;
    dofs[10] = offset + 2*c.entity_indices[1][3];
    dofs[11] = offset + 2*c.entity_indices[1][3] + 1;
    dofs[12] = offset + 2*c.entity_indices[1][4];
    dofs[13] = offset + 2*c.entity_indices[1][4] + 1;
    dofs[14] = offset + 2*c.entity_indices[1][5];
    dofs[15] = offset + 2*c.entity_indices[1][5] + 1;
    offset = offset + 2*m.num_entities[1];
    dofs[16] = offset + c.entity_indices[2][0];
    dofs[17] = offset + c.entity_indices[2][1];
    dofs[18] = offset + c.entity_indices[2][2];
    dofs[19] = offset + c.entity_indices[2][3];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   const ufc::mesh& m,
                                   const ufc::cell& c,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 7;
      dofs[7] = 8;
      dofs[8] = 9;
      dofs[9] = 16;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 10;
      dofs[6] = 11;
      dofs[7] = 12;
      dofs[8] = 13;
      dofs[9] = 17;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 6;
      dofs[4] = 7;
      dofs[5] = 10;
      dofs[6] = 11;
      dofs[7] = 14;
      dofs[8] = 15;
      dofs[9] = 18;
      break;
    case 3:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 8;
      dofs[4] = 9;
      dofs[5] = 12;
      dofs[6] = 13;
      dofs[7] = 14;
      dofs[8] = 15;
      dofs[9] = 19;
      break;
    }
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double **coordinates,
                                    const ufc::cell& c) const
  {
    // This function is implemented assuming affine mapping!!
    // Get cell vertices
    const double * const * x = c.coordinates;
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[0][2] = x[0][2];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[1][2] = x[1][2];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[2][2] = x[2][2];
    coordinates[3][0] = x[3][0];
    coordinates[3][1] = x[3][1];
    coordinates[3][2] = x[3][2];
    coordinates[4][0] = 0.666666666666667*x[1][0] + 0.333333333333333*x[2][0];
    coordinates[4][1] = 0.666666666666667*x[1][1] + 0.333333333333333*x[2][1];
    coordinates[4][2] = 0.666666666666667*x[1][2] + 0.333333333333333*x[2][2];
    coordinates[5][0] = 0.333333333333333*x[1][0] + 0.666666666666667*x[2][0];
    coordinates[5][1] = 0.333333333333333*x[1][1] + 0.666666666666667*x[2][1];
    coordinates[5][2] = 0.333333333333333*x[1][2] + 0.666666666666667*x[2][2];
    coordinates[6][0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[2][0];
    coordinates[6][1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[2][1];
    coordinates[6][2] = 0.333333333333333*x[0][2] + 0.666666666666667*x[2][2];
    coordinates[7][0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[2][0];
    coordinates[7][1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[2][1];
    coordinates[7][2] = 0.666666666666667*x[0][2] + 0.333333333333333*x[2][2];
    coordinates[8][0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[1][0];
    coordinates[8][1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[1][1];
    coordinates[8][2] = 0.666666666666667*x[0][2] + 0.333333333333333*x[1][2];
    coordinates[9][0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[1][0];
    coordinates[9][1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[1][1];
    coordinates[9][2] = 0.333333333333333*x[0][2] + 0.666666666666667*x[1][2];
    coordinates[10][0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[3][0];
    coordinates[10][1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[3][1];
    coordinates[10][2] = 0.666666666666667*x[0][2] + 0.333333333333333*x[3][2];
    coordinates[11][0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[3][0];
    coordinates[11][1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[3][1];
    coordinates[11][2] = 0.333333333333333*x[0][2] + 0.666666666666667*x[3][2];
    coordinates[12][0] = 0.666666666666667*x[1][0] + 0.333333333333333*x[3][0];
    coordinates[12][1] = 0.666666666666667*x[1][1] + 0.333333333333333*x[3][1];
    coordinates[12][2] = 0.666666666666667*x[1][2] + 0.333333333333333*x[3][2];
    coordinates[13][0] = 0.333333333333333*x[1][0] + 0.666666666666667*x[3][0];
    coordinates[13][1] = 0.333333333333333*x[1][1] + 0.666666666666667*x[3][1];
    coordinates[13][2] = 0.333333333333333*x[1][2] + 0.666666666666667*x[3][2];
    coordinates[14][0] = 0.666666666666667*x[2][0] + 0.333333333333333*x[3][0];
    coordinates[14][1] = 0.666666666666667*x[2][1] + 0.333333333333333*x[3][1];
    coordinates[14][2] = 0.666666666666667*x[2][2] + 0.333333333333333*x[3][2];
    coordinates[15][0] = 0.333333333333333*x[2][0] + 0.666666666666667*x[3][0];
    coordinates[15][1] = 0.333333333333333*x[2][1] + 0.666666666666667*x[3][1];
    coordinates[15][2] = 0.333333333333333*x[2][2] + 0.666666666666667*x[3][2];
    coordinates[16][0] = 0.333333333333333*x[1][0] + 0.333333333333333*x[2][0] + 0.333333333333333*x[3][0];
    coordinates[16][1] = 0.333333333333333*x[1][1] + 0.333333333333333*x[2][1] + 0.333333333333333*x[3][1];
    coordinates[16][2] = 0.333333333333333*x[1][2] + 0.333333333333333*x[2][2] + 0.333333333333333*x[3][2];
    coordinates[17][0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[2][0] + 0.333333333333333*x[3][0];
    coordinates[17][1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[2][1] + 0.333333333333333*x[3][1];
    coordinates[17][2] = 0.333333333333333*x[0][2] + 0.333333333333333*x[2][2] + 0.333333333333333*x[3][2];
    coordinates[18][0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[1][0] + 0.333333333333333*x[3][0];
    coordinates[18][1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[1][1] + 0.333333333333333*x[3][1];
    coordinates[18][2] = 0.333333333333333*x[0][2] + 0.333333333333333*x[1][2] + 0.333333333333333*x[3][2];
    coordinates[19][0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[1][0] + 0.333333333333333*x[2][0];
    coordinates[19][1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[1][1] + 0.333333333333333*x[2][1];
    coordinates[19][2] = 0.333333333333333*x[0][2] + 0.333333333333333*x[1][2] + 0.333333333333333*x[2][2];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new UFC_Poisson3D_3BilinearForm_dof_map_1();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class UFC_Poisson3D_3BilinearForm_cell_integral_0: public ufc::cell_integral
{
public:

  /// Constructor
  UFC_Poisson3D_3BilinearForm_cell_integral_0() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson3D_3BilinearForm_cell_integral_0()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
      
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
      
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
      
    // Compute inverse of Jacobian
    const double Jinv_00 = d_00 / detJ;
    const double Jinv_01 = d_10 / detJ;
    const double Jinv_02 = d_20 / detJ;
    const double Jinv_10 = d_01 / detJ;
    const double Jinv_11 = d_11 / detJ;
    const double Jinv_12 = d_21 / detJ;
    const double Jinv_20 = d_02 / detJ;
    const double Jinv_21 = d_12 / detJ;
    const double Jinv_22 = d_22 / detJ;
    
    // Take absolute value of determinant
    detJ = std::abs(detJ);
    
    // Set scale factor
    const double det = detJ;
    
    // Compute geometry tensors
    const double G0_0_0 = det*(Jinv_00*Jinv_00 + Jinv_01*Jinv_01 + Jinv_02*Jinv_02);
    const double G0_0_1 = det*(Jinv_00*Jinv_10 + Jinv_01*Jinv_11 + Jinv_02*Jinv_12);
    const double G0_0_2 = det*(Jinv_00*Jinv_20 + Jinv_01*Jinv_21 + Jinv_02*Jinv_22);
    const double G0_1_0 = det*(Jinv_10*Jinv_00 + Jinv_11*Jinv_01 + Jinv_12*Jinv_02);
    const double G0_1_1 = det*(Jinv_10*Jinv_10 + Jinv_11*Jinv_11 + Jinv_12*Jinv_12);
    const double G0_1_2 = det*(Jinv_10*Jinv_20 + Jinv_11*Jinv_21 + Jinv_12*Jinv_22);
    const double G0_2_0 = det*(Jinv_20*Jinv_00 + Jinv_21*Jinv_01 + Jinv_22*Jinv_02);
    const double G0_2_1 = det*(Jinv_20*Jinv_10 + Jinv_21*Jinv_11 + Jinv_22*Jinv_12);
    const double G0_2_2 = det*(Jinv_20*Jinv_20 + Jinv_21*Jinv_21 + Jinv_22*Jinv_22);
    
    // Compute element tensor
    A[0] = 0.0595238095238094*G0_0_0 + 0.0595238095238094*G0_0_1 + 0.0595238095238094*G0_0_2 + 0.0595238095238094*G0_1_0 + 0.0595238095238094*G0_1_1 + 0.0595238095238094*G0_1_2 + 0.0595238095238094*G0_2_0 + 0.0595238095238094*G0_2_1 + 0.0595238095238095*G0_2_2;
    A[1] = -0.0113095238095238*G0_0_0 - 0.0113095238095238*G0_1_0 - 0.0113095238095238*G0_2_0;
    A[2] = -0.0113095238095238*G0_0_1 - 0.0113095238095238*G0_1_1 - 0.0113095238095238*G0_2_1;
    A[3] = -0.0113095238095238*G0_0_2 - 0.0113095238095238*G0_1_2 - 0.0113095238095238*G0_2_2;
    A[4] = -0.0133928571428571*G0_0_0 - 0.0133928571428571*G0_0_1 - 0.0133928571428572*G0_1_0 - 0.0133928571428572*G0_1_1 - 0.0133928571428571*G0_2_0 - 0.0133928571428571*G0_2_1;
    A[5] = -0.0133928571428571*G0_0_0 - 0.0133928571428572*G0_0_1 - 0.0133928571428571*G0_1_0 - 0.0133928571428572*G0_1_1 - 0.0133928571428571*G0_2_0 - 0.0133928571428572*G0_2_1;
    A[6] = 0.0133928571428571*G0_0_0 + 0.0482142857142856*G0_0_1 + 0.0133928571428571*G0_0_2 + 0.0133928571428571*G0_1_0 + 0.0482142857142856*G0_1_1 + 0.0133928571428571*G0_1_2 + 0.0133928571428571*G0_2_0 + 0.0482142857142856*G0_2_1 + 0.0133928571428571*G0_2_2;
    A[7] = -0.0348214285714286*G0_0_0 - 0.0964285714285713*G0_0_1 - 0.0348214285714286*G0_0_2 - 0.0348214285714286*G0_1_0 - 0.0964285714285712*G0_1_1 - 0.0348214285714286*G0_1_2 - 0.0348214285714286*G0_2_0 - 0.0964285714285712*G0_2_1 - 0.0348214285714286*G0_2_2;
    A[8] = -0.0964285714285714*G0_0_0 - 0.0348214285714286*G0_0_1 - 0.0348214285714286*G0_0_2 - 0.0964285714285713*G0_1_0 - 0.0348214285714286*G0_1_1 - 0.0348214285714286*G0_1_2 - 0.0964285714285713*G0_2_0 - 0.0348214285714286*G0_2_1 - 0.0348214285714286*G0_2_2;
    A[9] = 0.0482142857142857*G0_0_0 + 0.0133928571428572*G0_0_1 + 0.0133928571428572*G0_0_2 + 0.0482142857142857*G0_1_0 + 0.0133928571428572*G0_1_1 + 0.0133928571428572*G0_1_2 + 0.0482142857142857*G0_2_0 + 0.0133928571428572*G0_2_1 + 0.0133928571428572*G0_2_2;
    A[10] = -0.0348214285714285*G0_0_0 - 0.0348214285714285*G0_0_1 - 0.0964285714285713*G0_0_2 - 0.0348214285714286*G0_1_0 - 0.0348214285714286*G0_1_1 - 0.0964285714285713*G0_1_2 - 0.0348214285714286*G0_2_0 - 0.0348214285714286*G0_2_1 - 0.0964285714285713*G0_2_2;
    A[11] = 0.0133928571428571*G0_0_0 + 0.0133928571428571*G0_0_1 + 0.0482142857142856*G0_0_2 + 0.0133928571428571*G0_1_0 + 0.0133928571428571*G0_1_1 + 0.0482142857142856*G0_1_2 + 0.0133928571428571*G0_2_0 + 0.0133928571428571*G0_2_1 + 0.0482142857142856*G0_2_2;
    A[12] = -0.0133928571428571*G0_0_0 - 0.0133928571428572*G0_0_2 - 0.0133928571428571*G0_1_0 - 0.0133928571428572*G0_1_2 - 0.0133928571428572*G0_2_0 - 0.0133928571428572*G0_2_2;
    A[13] = -0.0133928571428571*G0_0_0 - 0.0133928571428571*G0_0_2 - 0.0133928571428571*G0_1_0 - 0.0133928571428571*G0_1_2 - 0.0133928571428571*G0_2_0 - 0.0133928571428571*G0_2_2;
    A[14] = -0.0133928571428572*G0_0_1 - 0.0133928571428571*G0_0_2 - 0.0133928571428572*G0_1_1 - 0.0133928571428571*G0_1_2 - 0.0133928571428572*G0_2_1 - 0.0133928571428571*G0_2_2;
    A[15] = -0.0133928571428571*G0_0_1 - 0.0133928571428572*G0_0_2 - 0.0133928571428571*G0_1_1 - 0.0133928571428572*G0_1_2 - 0.0133928571428571*G0_2_1 - 0.0133928571428572*G0_2_2;
    A[16] = -0.0321428571428572*G0_0_0 - 0.0321428571428572*G0_0_1 - 0.0321428571428572*G0_0_2 - 0.0321428571428572*G0_1_0 - 0.0321428571428572*G0_1_1 - 0.0321428571428572*G0_1_2 - 0.0321428571428572*G0_2_0 - 0.0321428571428572*G0_2_1 - 0.0321428571428572*G0_2_2;
    A[17] = 0.0321428571428572*G0_0_0 + 0.0482142857142857*G0_0_1 + 0.0482142857142857*G0_0_2 + 0.0321428571428572*G0_1_0 + 0.0482142857142857*G0_1_1 + 0.0482142857142857*G0_1_2 + 0.0321428571428572*G0_2_0 + 0.0482142857142857*G0_2_1 + 0.0482142857142857*G0_2_2;
    A[18] = 0.0482142857142857*G0_0_0 + 0.0321428571428572*G0_0_1 + 0.0482142857142858*G0_0_2 + 0.0482142857142857*G0_1_0 + 0.0321428571428572*G0_1_1 + 0.0482142857142858*G0_1_2 + 0.0482142857142858*G0_2_0 + 0.0321428571428572*G0_2_1 + 0.0482142857142858*G0_2_2;
    A[19] = 0.0482142857142857*G0_0_0 + 0.0482142857142857*G0_0_1 + 0.0321428571428572*G0_0_2 + 0.0482142857142857*G0_1_0 + 0.0482142857142858*G0_1_1 + 0.0321428571428572*G0_1_2 + 0.0482142857142857*G0_2_0 + 0.0482142857142858*G0_2_1 + 0.0321428571428572*G0_2_2;
    A[20] = -0.0113095238095238*G0_0_0 - 0.0113095238095238*G0_0_1 - 0.0113095238095238*G0_0_2;
    A[21] = 0.0595238095238094*G0_0_0;
    A[22] = 0.0113095238095238*G0_0_1;
    A[23] = 0.0113095238095238*G0_0_2;
    A[24] = -0.0348214285714285*G0_0_0 + 0.0616071428571428*G0_0_1;
    A[25] = 0.0133928571428571*G0_0_0 - 0.0348214285714285*G0_0_1;
    A[26] = -0.0133928571428571*G0_0_0 - 0.0133928571428571*G0_0_2;
    A[27] = -0.0133928571428571*G0_0_0 - 0.0133928571428571*G0_0_2;
    A[28] = 0.0482142857142857*G0_0_0 + 0.0348214285714286*G0_0_1 + 0.0348214285714286*G0_0_2;
    A[29] = -0.0964285714285713*G0_0_0 - 0.0616071428571428*G0_0_1 - 0.0616071428571428*G0_0_2;
    A[30] = -0.0133928571428571*G0_0_0 - 0.0133928571428571*G0_0_1;
    A[31] = -0.0133928571428571*G0_0_0 - 0.0133928571428571*G0_0_1;
    A[32] = -0.0348214285714285*G0_0_0 + 0.0616071428571428*G0_0_2;
    A[33] = 0.0133928571428571*G0_0_0 - 0.0348214285714285*G0_0_2;
    A[34] = 0.0133928571428571*G0_0_1 + 0.0133928571428571*G0_0_2;
    A[35] = 0.0133928571428571*G0_0_1 + 0.0133928571428571*G0_0_2;
    A[36] = 0.0321428571428571*G0_0_0 - 0.0160714285714285*G0_0_1 - 0.0160714285714285*G0_0_2;
    A[37] = -0.0321428571428571*G0_0_0;
    A[38] = 0.0482142857142856*G0_0_0 + 0.0160714285714285*G0_0_1;
    A[39] = 0.0482142857142856*G0_0_0 + 0.0160714285714285*G0_0_2;
    A[40] = -0.0113095238095238*G0_1_0 - 0.0113095238095238*G0_1_1 - 0.0113095238095238*G0_1_2;
    A[41] = 0.0113095238095238*G0_1_0;
    A[42] = 0.0595238095238094*G0_1_1;
    A[43] = 0.0113095238095238*G0_1_2;
    A[44] = -0.0348214285714286*G0_1_0 + 0.0133928571428571*G0_1_1;
    A[45] = 0.0616071428571428*G0_1_0 - 0.0348214285714285*G0_1_1;
    A[46] = -0.0616071428571428*G0_1_0 - 0.0964285714285713*G0_1_1 - 0.0616071428571428*G0_1_2;
    A[47] = 0.0348214285714285*G0_1_0 + 0.0482142857142856*G0_1_1 + 0.0348214285714285*G0_1_2;
    A[48] = -0.0133928571428571*G0_1_1 - 0.0133928571428571*G0_1_2;
    A[49] = -0.0133928571428571*G0_1_1 - 0.0133928571428571*G0_1_2;
    A[50] = -0.0133928571428571*G0_1_0 - 0.0133928571428571*G0_1_1;
    A[51] = -0.0133928571428572*G0_1_0 - 0.0133928571428572*G0_1_1;
    A[52] = 0.0133928571428571*G0_1_0 + 0.0133928571428571*G0_1_2;
    A[53] = 0.0133928571428572*G0_1_0 + 0.0133928571428571*G0_1_2;
    A[54] = -0.0348214285714285*G0_1_1 + 0.0616071428571428*G0_1_2;
    A[55] = 0.0133928571428572*G0_1_1 - 0.0348214285714285*G0_1_2;
    A[56] = -0.0160714285714285*G0_1_0 + 0.032142857142857*G0_1_1 - 0.0160714285714286*G0_1_2;
    A[57] = 0.0160714285714286*G0_1_0 + 0.0482142857142856*G0_1_1;
    A[58] = -0.032142857142857*G0_1_1;
    A[59] = 0.0482142857142856*G0_1_1 + 0.0160714285714286*G0_1_2;
    A[60] = -0.0113095238095238*G0_2_0 - 0.0113095238095238*G0_2_1 - 0.0113095238095238*G0_2_2;
    A[61] = 0.0113095238095238*G0_2_0;
    A[62] = 0.0113095238095238*G0_2_1;
    A[63] = 0.0595238095238094*G0_2_2;
    A[64] = 0.0133928571428571*G0_2_0 + 0.0133928571428571*G0_2_1;
    A[65] = 0.0133928571428571*G0_2_0 + 0.013392857142857*G0_2_1;
    A[66] = -0.0133928571428571*G0_2_0 - 0.0133928571428571*G0_2_2;
    A[67] = -0.0133928571428571*G0_2_0 - 0.0133928571428571*G0_2_2;
    A[68] = -0.0133928571428571*G0_2_1 - 0.0133928571428571*G0_2_2;
    A[69] = -0.0133928571428571*G0_2_1 - 0.0133928571428571*G0_2_2;
    A[70] = 0.0348214285714285*G0_2_0 + 0.0348214285714285*G0_2_1 + 0.0482142857142856*G0_2_2;
    A[71] = -0.0616071428571428*G0_2_0 - 0.0616071428571428*G0_2_1 - 0.0964285714285713*G0_2_2;
    A[72] = -0.0348214285714285*G0_2_0 + 0.0133928571428571*G0_2_2;
    A[73] = 0.0616071428571428*G0_2_0 - 0.0348214285714285*G0_2_2;
    A[74] = -0.0348214285714286*G0_2_1 + 0.0133928571428571*G0_2_2;
    A[75] = 0.0616071428571428*G0_2_1 - 0.0348214285714285*G0_2_2;
    A[76] = -0.0160714285714286*G0_2_0 - 0.0160714285714286*G0_2_1 + 0.032142857142857*G0_2_2;
    A[77] = 0.0160714285714286*G0_2_0 + 0.0482142857142856*G0_2_2;
    A[78] = 0.0160714285714285*G0_2_1 + 0.0482142857142856*G0_2_2;
    A[79] = -0.032142857142857*G0_2_2;
    A[80] = -0.0133928571428571*G0_0_0 - 0.0133928571428571*G0_0_1 - 0.0133928571428572*G0_0_2 - 0.0133928571428571*G0_1_0 - 0.0133928571428572*G0_1_1 - 0.0133928571428571*G0_1_2;
    A[81] = -0.0348214285714285*G0_0_0 + 0.0616071428571428*G0_1_0;
    A[82] = -0.0348214285714286*G0_0_1 + 0.0133928571428571*G0_1_1;
    A[83] = 0.0133928571428571*G0_0_2 + 0.0133928571428571*G0_1_2;
    A[84] = 0.241071428571428*G0_0_0 + 0.0964285714285714*G0_0_1 + 0.0964285714285714*G0_1_0 + 0.192857142857143*G0_1_1;
    A[85] = -0.0723214285714285*G0_0_0 + 0.0723214285714285*G0_0_1 - 0.0241071428571429*G0_1_0 - 0.0723214285714284*G0_1_1;
    A[86] = 0.0723214285714286*G0_0_0 + 0.0241071428571429*G0_0_1 + 0.0723214285714286*G0_0_2 + 0.0241071428571429*G0_1_0 + 0.0241071428571429*G0_1_2;
    A[87] = 0.0482142857142857*G0_0_0 + 0.0241071428571429*G0_0_1 + 0.0482142857142857*G0_0_2 + 0.0241071428571429*G0_1_0 + 0.0241071428571429*G0_1_2;
    A[88] = 0.024107142857143*G0_0_0 + 0.0482142857142858*G0_0_1 + 0.0482142857142858*G0_0_2 + 0.0482142857142858*G0_1_0 + 0.0723214285714286*G0_1_1 + 0.0723214285714286*G0_1_2;
    A[89] = 0.0241071428571427*G0_0_0 - 0.0964285714285715*G0_0_1 - 0.0964285714285715*G0_0_2 - 0.0964285714285714*G0_1_0 - 0.192857142857143*G0_1_1 - 0.192857142857143*G0_1_2;
    A[90] = 0.0241071428571428*G0_0_0 + 0.0241071428571428*G0_0_1 + 0.0241071428571429*G0_1_0 + 0.0241071428571429*G0_1_1;
    A[91] = 0.0241071428571429*G0_0_0 + 0.0241071428571428*G0_0_1 + 0.0241071428571429*G0_1_0 + 0.0241071428571429*G0_1_1;
    A[92] = 0.120535714285714*G0_0_0 + 0.0964285714285714*G0_0_2 + 0.0964285714285714*G0_1_0 + 0.192857142857143*G0_1_2;
    A[93] = -0.0241071428571428*G0_0_0 - 0.0482142857142856*G0_0_2 - 0.0241071428571428*G0_1_0 - 0.0723214285714284*G0_1_2;
    A[94] = -0.0482142857142856*G0_0_1 - 0.0723214285714285*G0_0_2 - 0.0241071428571428*G0_1_1 - 0.0241071428571429*G0_1_2;
    A[95] = -0.0241071428571428*G0_0_1 - 0.0482142857142856*G0_0_2 - 0.0241071428571429*G0_1_1 - 0.0241071428571428*G0_1_2;
    A[96] = -0.0482142857142856*G0_0_0 + 0.120535714285714*G0_0_1 + 0.241071428571428*G0_0_2 - 0.0241071428571428*G0_1_0 + 0.0964285714285715*G0_1_1 + 0.0964285714285714*G0_1_2;
    A[97] = 0.0482142857142856*G0_0_0 + 0.0241071428571429*G0_0_1 + 0.0241071428571428*G0_1_0;
    A[98] = -0.144642857142857*G0_0_0 - 0.120535714285714*G0_0_1 - 0.120535714285714*G0_1_0 - 0.0964285714285715*G0_1_1;
    A[99] = -0.289285714285714*G0_0_0 - 0.120535714285714*G0_0_1 - 0.241071428571428*G0_0_2 - 0.120535714285714*G0_1_0 - 0.0964285714285715*G0_1_2;
    A[100] = -0.0133928571428571*G0_0_0 - 0.0133928571428571*G0_0_1 - 0.0133928571428571*G0_0_2 - 0.0133928571428572*G0_1_0 - 0.0133928571428572*G0_1_1 - 0.0133928571428572*G0_1_2;
    A[101] = 0.0133928571428571*G0_0_0 - 0.0348214285714285*G0_1_0;
    A[102] = 0.0616071428571428*G0_0_1 - 0.0348214285714285*G0_1_1;
    A[103] = 0.0133928571428571*G0_0_2 + 0.013392857142857*G0_1_2;
    A[104] = -0.0723214285714285*G0_0_0 - 0.0241071428571429*G0_0_1 + 0.0723214285714285*G0_1_0 - 0.0723214285714284*G0_1_1;
    A[105] = 0.192857142857143*G0_0_0 + 0.0964285714285714*G0_0_1 + 0.0964285714285714*G0_1_0 + 0.241071428571428*G0_1_1;
    A[106] = -0.192857142857143*G0_0_0 - 0.0964285714285714*G0_0_1 - 0.192857142857143*G0_0_2 - 0.0964285714285713*G0_1_0 + 0.0241071428571427*G0_1_1 - 0.0964285714285714*G0_1_2;
    A[107] = 0.0723214285714286*G0_0_0 + 0.0482142857142857*G0_0_1 + 0.0723214285714287*G0_0_2 + 0.0482142857142859*G0_1_0 + 0.024107142857143*G0_1_1 + 0.0482142857142859*G0_1_2;
    A[108] = 0.0241071428571429*G0_0_1 + 0.0241071428571429*G0_0_2 + 0.0241071428571429*G0_1_0 + 0.0482142857142858*G0_1_1 + 0.0482142857142858*G0_1_2;
    A[109] = 0.0241071428571428*G0_0_1 + 0.0241071428571428*G0_0_2 + 0.0241071428571427*G0_1_0 + 0.0723214285714283*G0_1_1 + 0.0723214285714283*G0_1_2;
    A[110] = 0.0241071428571429*G0_0_0 + 0.0241071428571429*G0_0_1 + 0.0241071428571429*G0_1_0 + 0.0241071428571429*G0_1_1;
    A[111] = 0.0241071428571428*G0_0_0 + 0.0241071428571429*G0_0_1 + 0.0241071428571429*G0_1_0 + 0.0241071428571429*G0_1_1;
    A[112] = -0.0241071428571428*G0_0_0 - 0.0241071428571428*G0_0_2 - 0.0482142857142855*G0_1_0 - 0.0723214285714283*G0_1_2;
    A[113] = -0.0241071428571428*G0_0_0 - 0.0241071428571428*G0_0_2 - 0.0241071428571429*G0_1_0 - 0.0482142857142856*G0_1_2;
    A[114] = 0.0964285714285714*G0_0_1 + 0.192857142857143*G0_0_2 + 0.120535714285714*G0_1_1 + 0.0964285714285714*G0_1_2;
    A[115] = -0.0241071428571429*G0_0_1 - 0.0723214285714284*G0_0_2 - 0.0241071428571429*G0_1_1 - 0.0482142857142856*G0_1_2;
    A[116] = 0.0964285714285714*G0_0_0 - 0.0241071428571428*G0_0_1 + 0.0964285714285714*G0_0_2 + 0.120535714285714*G0_1_0 - 0.0482142857142855*G0_1_1 + 0.241071428571428*G0_1_2;
    A[117] = -0.0964285714285714*G0_0_0 - 0.120535714285714*G0_0_1 - 0.120535714285714*G0_1_0 - 0.144642857142857*G0_1_1;
    A[118] = 0.0241071428571428*G0_0_1 + 0.0241071428571427*G0_1_0 + 0.0482142857142855*G0_1_1;
    A[119] = -0.120535714285714*G0_0_1 - 0.0964285714285714*G0_0_2 - 0.120535714285714*G0_1_0 - 0.289285714285714*G0_1_1 - 0.241071428571428*G0_1_2;
    A[120] = 0.0133928571428571*G0_0_0 + 0.0133928571428571*G0_0_1 + 0.0133928571428571*G0_0_2 + 0.0482142857142856*G0_1_0 + 0.0482142857142856*G0_1_1 + 0.0482142857142856*G0_1_2 + 0.0133928571428571*G0_2_0 + 0.0133928571428571*G0_2_1 + 0.0133928571428571*G0_2_2;
    A[121] = -0.0133928571428571*G0_0_0 - 0.0133928571428571*G0_2_0;
    A[122] = -0.0616071428571428*G0_0_1 - 0.0964285714285713*G0_1_1 - 0.0616071428571428*G0_2_1;
    A[123] = -0.0133928571428571*G0_0_2 - 0.0133928571428571*G0_2_2;
    A[124] = 0.0723214285714286*G0_0_0 + 0.0241071428571429*G0_0_1 + 0.0241071428571429*G0_1_0 + 0.0723214285714286*G0_2_0 + 0.0241071428571429*G0_2_1;
    A[125] = -0.192857142857143*G0_0_0 - 0.0964285714285713*G0_0_1 - 0.0964285714285714*G0_1_0 + 0.0241071428571427*G0_1_1 - 0.192857142857143*G0_2_0 - 0.0964285714285714*G0_2_1;
    A[126] = 0.192857142857143*G0_0_0 + 0.0964285714285714*G0_0_1 + 0.192857142857143*G0_0_2 + 0.0964285714285714*G0_1_0 + 0.241071428571428*G0_1_1 + 0.0964285714285714*G0_1_2 + 0.192857142857143*G0_2_0 + 0.0964285714285714*G0_2_1 + 0.192857142857143*G0_2_2;
    A[127] = -0.0723214285714286*G0_0_0 - 0.0482142857142857*G0_0_1 - 0.0723214285714287*G0_0_2 - 0.144642857142857*G0_1_0 - 0.192857142857143*G0_1_1 - 0.144642857142857*G0_1_2 - 0.0723214285714286*G0_2_0 - 0.0482142857142858*G0_2_1 - 0.0723214285714287*G0_2_2;
    A[128] = -0.0241071428571429*G0_0_1 - 0.0241071428571429*G0_0_2 - 0.0241071428571428*G0_1_0 + 0.0241071428571428*G0_1_1 + 0.0241071428571428*G0_1_2 - 0.0241071428571429*G0_2_1 - 0.0241071428571429*G0_2_2;
    A[129] = -0.0241071428571429*G0_0_1 - 0.0241071428571429*G0_0_2 - 0.0241071428571428*G0_1_0 - 0.0241071428571429*G0_2_1 - 0.0241071428571429*G0_2_2;
    A[130] = -0.0241071428571429*G0_0_0 - 0.0241071428571429*G0_0_1 + 0.0241071428571428*G0_1_0 + 0.0241071428571428*G0_1_1 - 0.0241071428571428*G0_1_2 - 0.0241071428571429*G0_2_0 - 0.0241071428571429*G0_2_1;
    A[131] = -0.0241071428571428*G0_0_0 - 0.0241071428571428*G0_0_1 - 0.0241071428571428*G0_1_2 - 0.0241071428571429*G0_2_0 - 0.0241071428571429*G0_2_1;
    A[132] = 0.0241071428571429*G0_0_0 + 0.0241071428571429*G0_0_2 + 0.0241071428571428*G0_2_0 + 0.0241071428571429*G0_2_2;
    A[133] = 0.0241071428571428*G0_0_0 + 0.0241071428571428*G0_0_2 + 0.0241071428571429*G0_2_0 + 0.0241071428571428*G0_2_2;
    A[134] = -0.0964285714285714*G0_0_1 - 0.192857142857143*G0_0_2 + 0.0241071428571427*G0_1_1 - 0.0964285714285713*G0_1_2 - 0.0964285714285714*G0_2_1 - 0.192857142857143*G0_2_2;
    A[135] = 0.0241071428571428*G0_0_1 + 0.0723214285714284*G0_0_2 + 0.0241071428571429*G0_1_2 + 0.0241071428571429*G0_2_1 + 0.0723214285714284*G0_2_2;
    A[136] = -0.0964285714285713*G0_0_0 + 0.024107142857143*G0_0_1 - 0.0964285714285712*G0_0_2 + 0.0241071428571427*G0_1_0 + 0.0241071428571428*G0_1_2 - 0.0964285714285713*G0_2_0 + 0.0241071428571429*G0_2_1 - 0.0964285714285713*G0_2_2;
    A[137] = 0.0964285714285713*G0_0_0 + 0.120535714285714*G0_0_1 - 0.0241071428571427*G0_1_0 - 0.0482142857142855*G0_1_1 + 0.120535714285714*G0_1_2 + 0.0964285714285713*G0_2_0 + 0.120535714285714*G0_2_1;
    A[138] = -0.024107142857143*G0_0_1 - 0.0241071428571429*G0_1_0 - 0.0241071428571429*G0_1_2 - 0.0241071428571429*G0_2_1;
    A[139] = 0.120535714285714*G0_0_1 + 0.0964285714285711*G0_0_2 + 0.120535714285714*G0_1_0 - 0.0482142857142856*G0_1_1 - 0.0241071428571428*G0_1_2 + 0.120535714285714*G0_2_1 + 0.0964285714285713*G0_2_2;
    A[140] = -0.0348214285714286*G0_0_0 - 0.0348214285714286*G0_0_1 - 0.0348214285714286*G0_0_2 - 0.0964285714285713*G0_1_0 - 0.0964285714285712*G0_1_1 - 0.0964285714285712*G0_1_2 - 0.0348214285714286*G0_2_0 - 0.0348214285714286*G0_2_1 - 0.0348214285714286*G0_2_2;
    A[141] = -0.0133928571428571*G0_0_0 - 0.0133928571428571*G0_2_0;
    A[142] = 0.0348214285714285*G0_0_1 + 0.0482142857142856*G0_1_1 + 0.0348214285714285*G0_2_1;
    A[143] = -0.0133928571428571*G0_0_2 - 0.0133928571428571*G0_2_2;
    A[144] = 0.0482142857142857*G0_0_0 + 0.0241071428571429*G0_0_1 + 0.0241071428571429*G0_1_0 + 0.0482142857142857*G0_2_0 + 0.0241071428571429*G0_2_1;
    A[145] = 0.0723214285714286*G0_0_0 + 0.0482142857142859*G0_0_1 + 0.0482142857142857*G0_1_0 + 0.024107142857143*G0_1_1 + 0.0723214285714286*G0_2_0 + 0.0482142857142859*G0_2_1;
    A[146] = -0.0723214285714286*G0_0_0 - 0.144642857142857*G0_0_1 - 0.0723214285714286*G0_0_2 - 0.0482142857142857*G0_1_0 - 0.192857142857143*G0_1_1 - 0.0482142857142857*G0_1_2 - 0.0723214285714287*G0_2_0 - 0.144642857142857*G0_2_1 - 0.0723214285714287*G0_2_2;
    A[147] = 0.241071428571428*G0_0_0 + 0.144642857142857*G0_0_1 + 0.241071428571428*G0_0_2 + 0.144642857142857*G0_1_0 + 0.241071428571428*G0_1_1 + 0.144642857142857*G0_1_2 + 0.241071428571428*G0_2_0 + 0.144642857142857*G0_2_1 + 0.241071428571428*G0_2_2;
    A[148] = 0.0241071428571429*G0_0_0 + 0.120535714285714*G0_0_1 + 0.120535714285714*G0_0_2 + 0.120535714285714*G0_1_0 + 0.0241071428571429*G0_1_1 + 0.024107142857143*G0_1_2 + 0.0241071428571429*G0_2_0 + 0.120535714285714*G0_2_1 + 0.120535714285714*G0_2_2;
    A[149] = 0.0241071428571427*G0_0_0 - 0.024107142857143*G0_0_1 - 0.024107142857143*G0_0_2 - 0.0241071428571429*G0_1_0 + 0.0241071428571427*G0_2_0 - 0.024107142857143*G0_2_1 - 0.024107142857143*G0_2_2;
    A[150] = 0.120535714285714*G0_0_0 + 0.120535714285714*G0_0_1 + 0.0241071428571429*G0_0_2 + 0.0241071428571429*G0_1_0 + 0.0241071428571429*G0_1_1 + 0.120535714285714*G0_1_2 + 0.120535714285714*G0_2_0 + 0.120535714285714*G0_2_1 + 0.0241071428571429*G0_2_2;
    A[151] = -0.0241071428571428*G0_0_0 - 0.0241071428571429*G0_0_1 + 0.0241071428571428*G0_0_2 - 0.0241071428571428*G0_1_2 - 0.0241071428571428*G0_2_0 - 0.0241071428571429*G0_2_1 + 0.0241071428571428*G0_2_2;
    A[152] = 0.0241071428571429*G0_0_0 + 0.0241071428571429*G0_0_2 + 0.0241071428571429*G0_2_0 + 0.0241071428571429*G0_2_2;
    A[153] = 0.0241071428571428*G0_0_0 + 0.0241071428571429*G0_0_2 + 0.0241071428571429*G0_2_0 + 0.0241071428571429*G0_2_2;
    A[154] = 0.0482142857142858*G0_0_1 + 0.0723214285714286*G0_0_2 + 0.0241071428571429*G0_1_1 + 0.0482142857142857*G0_1_2 + 0.0482142857142858*G0_2_1 + 0.0723214285714286*G0_2_2;
    A[155] = 0.0241071428571428*G0_0_1 + 0.0482142857142857*G0_0_2 + 0.0241071428571428*G0_1_2 + 0.0241071428571429*G0_2_1 + 0.0482142857142857*G0_2_2;
    A[156] = 0.0482142857142859*G0_0_0 + 0.0241071428571431*G0_0_1 + 0.048214285714286*G0_0_2 + 0.024107142857143*G0_1_0 + 0.0241071428571431*G0_1_2 + 0.048214285714286*G0_2_0 + 0.0241071428571431*G0_2_1 + 0.0482142857142861*G0_2_2;
    A[157] = -0.0482142857142859*G0_0_0 - 0.16875*G0_0_1 - 0.289285714285714*G0_0_2 - 0.024107142857143*G0_1_0 - 0.0482142857142858*G0_1_1 - 0.16875*G0_1_2 - 0.048214285714286*G0_2_0 - 0.16875*G0_2_1 - 0.289285714285714*G0_2_2;
    A[158] = -0.144642857142857*G0_0_0 - 0.0241071428571431*G0_0_1 - 0.144642857142857*G0_0_2 - 0.0241071428571429*G0_1_0 - 0.0241071428571429*G0_1_2 - 0.144642857142857*G0_2_0 - 0.0241071428571431*G0_2_1 - 0.144642857142857*G0_2_2;
    A[159] = -0.289285714285714*G0_0_0 - 0.16875*G0_0_1 - 0.048214285714286*G0_0_2 - 0.16875*G0_1_0 - 0.0482142857142859*G0_1_1 - 0.0241071428571431*G0_1_2 - 0.289285714285714*G0_2_0 - 0.16875*G0_2_1 - 0.0482142857142861*G0_2_2;
    A[160] = -0.0964285714285714*G0_0_0 - 0.0964285714285713*G0_0_1 - 0.0964285714285713*G0_0_2 - 0.0348214285714286*G0_1_0 - 0.0348214285714286*G0_1_1 - 0.0348214285714286*G0_1_2 - 0.0348214285714286*G0_2_0 - 0.0348214285714286*G0_2_1 - 0.0348214285714286*G0_2_2;
    A[161] = 0.0482142857142857*G0_0_0 + 0.0348214285714286*G0_1_0 + 0.0348214285714286*G0_2_0;
    A[162] = -0.0133928571428571*G0_1_1 - 0.0133928571428571*G0_2_1;
    A[163] = -0.0133928571428571*G0_1_2 - 0.0133928571428571*G0_2_2;
    A[164] = 0.024107142857143*G0_0_0 + 0.0482142857142858*G0_0_1 + 0.0482142857142858*G0_1_0 + 0.0723214285714286*G0_1_1 + 0.0482142857142858*G0_2_0 + 0.0723214285714286*G0_2_1;
    A[165] = 0.0241071428571429*G0_0_1 + 0.0241071428571429*G0_1_0 + 0.0482142857142858*G0_1_1 + 0.0241071428571429*G0_2_0 + 0.0482142857142858*G0_2_1;
    A[166] = -0.0241071428571428*G0_0_1 - 0.0241071428571429*G0_1_0 + 0.0241071428571428*G0_1_1 - 0.0241071428571429*G0_1_2 - 0.0241071428571429*G0_2_0 + 0.0241071428571428*G0_2_1 - 0.0241071428571429*G0_2_2;
    A[167] = 0.0241071428571429*G0_0_0 + 0.120535714285714*G0_0_1 + 0.0241071428571429*G0_0_2 + 0.120535714285714*G0_1_0 + 0.0241071428571429*G0_1_1 + 0.120535714285714*G0_1_2 + 0.120535714285714*G0_2_0 + 0.024107142857143*G0_2_1 + 0.120535714285714*G0_2_2;
    A[168] = 0.241071428571428*G0_0_0 + 0.144642857142857*G0_0_1 + 0.144642857142857*G0_0_2 + 0.144642857142857*G0_1_0 + 0.241071428571429*G0_1_1 + 0.241071428571429*G0_1_2 + 0.144642857142857*G0_2_0 + 0.241071428571429*G0_2_1 + 0.241071428571428*G0_2_2;
    A[169] = -0.192857142857143*G0_0_0 - 0.0482142857142859*G0_0_1 - 0.0482142857142858*G0_0_2 - 0.144642857142857*G0_1_0 - 0.0723214285714287*G0_1_1 - 0.0723214285714287*G0_1_2 - 0.144642857142857*G0_2_0 - 0.0723214285714287*G0_2_1 - 0.0723214285714287*G0_2_2;
    A[170] = 0.0241071428571429*G0_0_0 + 0.0241071428571429*G0_0_1 + 0.120535714285714*G0_0_2 + 0.120535714285714*G0_1_0 + 0.120535714285714*G0_1_1 + 0.024107142857143*G0_1_2 + 0.120535714285714*G0_2_0 + 0.120535714285714*G0_2_1 + 0.024107142857143*G0_2_2;
    A[171] = -0.0241071428571428*G0_0_2 - 0.0241071428571428*G0_1_0 - 0.0241071428571428*G0_1_1 + 0.0241071428571428*G0_1_2 - 0.0241071428571428*G0_2_0 - 0.0241071428571429*G0_2_1 + 0.0241071428571428*G0_2_2;
    A[172] = 0.0241071428571429*G0_0_0 + 0.0482142857142858*G0_0_2 + 0.0482142857142858*G0_1_0 + 0.0723214285714287*G0_1_2 + 0.0482142857142858*G0_2_0 + 0.0723214285714287*G0_2_2;
    A[173] = 0.0241071428571428*G0_0_2 + 0.0241071428571429*G0_1_0 + 0.0482142857142857*G0_1_2 + 0.0241071428571429*G0_2_0 + 0.0482142857142857*G0_2_2;
    A[174] = 0.0241071428571429*G0_1_1 + 0.0241071428571429*G0_1_2 + 0.0241071428571429*G0_2_1 + 0.0241071428571429*G0_2_2;
    A[175] = 0.0241071428571428*G0_1_1 + 0.0241071428571429*G0_1_2 + 0.0241071428571429*G0_2_1 + 0.0241071428571429*G0_2_2;
    A[176] = 0.0241071428571429*G0_0_1 + 0.0241071428571431*G0_0_2 + 0.024107142857143*G0_1_0 + 0.0482142857142859*G0_1_1 + 0.048214285714286*G0_1_2 + 0.0241071428571431*G0_2_0 + 0.048214285714286*G0_2_1 + 0.048214285714286*G0_2_2;
    A[177] = -0.0241071428571429*G0_0_1 - 0.0241071428571429*G0_0_2 - 0.024107142857143*G0_1_0 - 0.144642857142857*G0_1_1 - 0.144642857142857*G0_1_2 - 0.0241071428571431*G0_2_0 - 0.144642857142857*G0_2_1 - 0.144642857142857*G0_2_2;
    A[178] = -0.0482142857142858*G0_0_0 - 0.024107142857143*G0_0_1 - 0.16875*G0_0_2 - 0.16875*G0_1_0 - 0.0482142857142859*G0_1_1 - 0.289285714285714*G0_1_2 - 0.16875*G0_2_0 - 0.048214285714286*G0_2_1 - 0.289285714285714*G0_2_2;
    A[179] = -0.0482142857142859*G0_0_0 - 0.16875*G0_0_1 - 0.0241071428571431*G0_0_2 - 0.16875*G0_1_0 - 0.289285714285714*G0_1_1 - 0.048214285714286*G0_1_2 - 0.16875*G0_2_0 - 0.289285714285714*G0_2_1 - 0.048214285714286*G0_2_2;
    A[180] = 0.0482142857142857*G0_0_0 + 0.0482142857142857*G0_0_1 + 0.0482142857142857*G0_0_2 + 0.0133928571428572*G0_1_0 + 0.0133928571428572*G0_1_1 + 0.0133928571428572*G0_1_2 + 0.0133928571428572*G0_2_0 + 0.0133928571428572*G0_2_1 + 0.0133928571428572*G0_2_2;
    A[181] = -0.0964285714285713*G0_0_0 - 0.0616071428571428*G0_1_0 - 0.0616071428571428*G0_2_0;
    A[182] = -0.0133928571428571*G0_1_1 - 0.0133928571428571*G0_2_1;
    A[183] = -0.0133928571428571*G0_1_2 - 0.0133928571428571*G0_2_2;
    A[184] = 0.0241071428571427*G0_0_0 - 0.0964285714285713*G0_0_1 - 0.0964285714285715*G0_1_0 - 0.192857142857143*G0_1_1 - 0.0964285714285715*G0_2_0 - 0.192857142857143*G0_2_1;
    A[185] = 0.0241071428571427*G0_0_1 + 0.0241071428571428*G0_1_0 + 0.0723214285714283*G0_1_1 + 0.0241071428571428*G0_2_0 + 0.0723214285714283*G0_2_1;
    A[186] = -0.0241071428571428*G0_0_1 - 0.0241071428571429*G0_1_0 - 0.0241071428571429*G0_1_2 - 0.0241071428571429*G0_2_0 - 0.0241071428571429*G0_2_2;
    A[187] = 0.0241071428571427*G0_0_0 - 0.0241071428571429*G0_0_1 + 0.0241071428571427*G0_0_2 - 0.024107142857143*G0_1_0 - 0.024107142857143*G0_1_2 - 0.024107142857143*G0_2_0 - 0.024107142857143*G0_2_2;
    A[188] = -0.192857142857143*G0_0_0 - 0.144642857142857*G0_0_1 - 0.144642857142857*G0_0_2 - 0.0482142857142859*G0_1_0 - 0.0723214285714287*G0_1_1 - 0.0723214285714287*G0_1_2 - 0.0482142857142858*G0_2_0 - 0.0723214285714287*G0_2_1 - 0.0723214285714287*G0_2_2;
    A[189] = 0.241071428571428*G0_0_0 + 0.0964285714285714*G0_0_1 + 0.0964285714285714*G0_0_2 + 0.0964285714285714*G0_1_0 + 0.192857142857143*G0_1_1 + 0.192857142857143*G0_1_2 + 0.0964285714285714*G0_2_0 + 0.192857142857143*G0_2_1 + 0.192857142857143*G0_2_2;
    A[190] = 0.0241071428571427*G0_0_0 + 0.0241071428571427*G0_0_1 - 0.0241071428571429*G0_0_2 - 0.0241071428571429*G0_1_0 - 0.0241071428571429*G0_1_1 - 0.0241071428571429*G0_2_0 - 0.0241071428571429*G0_2_1;
    A[191] = -0.0241071428571428*G0_0_2 - 0.0241071428571428*G0_1_0 - 0.0241071428571428*G0_1_1 - 0.0241071428571428*G0_2_0 - 0.0241071428571428*G0_2_1;
    A[192] = 0.0241071428571428*G0_0_0 - 0.0964285714285714*G0_0_2 - 0.0964285714285714*G0_1_0 - 0.192857142857143*G0_1_2 - 0.0964285714285714*G0_2_0 - 0.192857142857143*G0_2_2;
    A[193] = 0.0241071428571428*G0_0_2 + 0.0241071428571428*G0_1_0 + 0.0723214285714283*G0_1_2 + 0.0241071428571428*G0_2_0 + 0.0723214285714283*G0_2_2;
    A[194] = 0.0241071428571428*G0_1_1 + 0.0241071428571428*G0_1_2 + 0.0241071428571428*G0_2_1 + 0.0241071428571428*G0_2_2;
    A[195] = 0.0241071428571428*G0_1_1 + 0.0241071428571428*G0_1_2 + 0.0241071428571428*G0_2_1 + 0.0241071428571427*G0_2_2;
    A[196] = 0.0241071428571427*G0_0_1 + 0.0241071428571427*G0_0_2 + 0.0241071428571427*G0_1_0 - 0.0964285714285716*G0_1_1 - 0.0964285714285716*G0_1_2 + 0.0241071428571427*G0_2_0 - 0.0964285714285716*G0_2_1 - 0.0964285714285716*G0_2_2;
    A[197] = -0.0241071428571427*G0_0_1 - 0.0241071428571427*G0_0_2 - 0.0241071428571427*G0_1_0 - 0.0241071428571426*G0_2_0;
    A[198] = -0.0482142857142855*G0_0_0 - 0.0241071428571427*G0_0_1 + 0.120535714285714*G0_0_2 + 0.120535714285714*G0_1_0 + 0.0964285714285716*G0_1_1 + 0.120535714285714*G0_2_0 + 0.0964285714285716*G0_2_1;
    A[199] = -0.0482142857142855*G0_0_0 + 0.120535714285714*G0_0_1 - 0.0241071428571427*G0_0_2 + 0.120535714285714*G0_1_0 + 0.0964285714285717*G0_1_2 + 0.120535714285714*G0_2_0 + 0.0964285714285717*G0_2_2;
    A[200] = -0.0348214285714285*G0_0_0 - 0.0348214285714286*G0_0_1 - 0.0348214285714286*G0_0_2 - 0.0348214285714285*G0_1_0 - 0.0348214285714286*G0_1_1 - 0.0348214285714286*G0_1_2 - 0.0964285714285713*G0_2_0 - 0.0964285714285713*G0_2_1 - 0.0964285714285713*G0_2_2;
    A[201] = -0.0133928571428571*G0_0_0 - 0.0133928571428571*G0_1_0;
    A[202] = -0.0133928571428571*G0_0_1 - 0.0133928571428571*G0_1_1;
    A[203] = 0.0348214285714285*G0_0_2 + 0.0348214285714285*G0_1_2 + 0.0482142857142856*G0_2_2;
    A[204] = 0.0241071428571428*G0_0_0 + 0.0241071428571429*G0_0_1 + 0.0241071428571428*G0_1_0 + 0.0241071428571429*G0_1_1;
    A[205] = 0.0241071428571429*G0_0_0 + 0.0241071428571429*G0_0_1 + 0.0241071428571429*G0_1_0 + 0.0241071428571429*G0_1_1;
    A[206] = -0.0241071428571429*G0_0_0 + 0.0241071428571428*G0_0_1 - 0.0241071428571429*G0_0_2 - 0.0241071428571429*G0_1_0 + 0.0241071428571428*G0_1_1 - 0.0241071428571429*G0_1_2 - 0.0241071428571428*G0_2_1;
    A[207] = 0.120535714285714*G0_0_0 + 0.0241071428571429*G0_0_1 + 0.120535714285714*G0_0_2 + 0.120535714285714*G0_1_0 + 0.0241071428571429*G0_1_1 + 0.120535714285714*G0_1_2 + 0.0241071428571429*G0_2_0 + 0.120535714285714*G0_2_1 + 0.0241071428571429*G0_2_2;
    A[208] = 0.0241071428571429*G0_0_0 + 0.120535714285714*G0_0_1 + 0.120535714285714*G0_0_2 + 0.0241071428571429*G0_1_0 + 0.120535714285714*G0_1_1 + 0.120535714285714*G0_1_2 + 0.120535714285714*G0_2_0 + 0.024107142857143*G0_2_1 + 0.024107142857143*G0_2_2;
    A[209] = 0.0241071428571427*G0_0_0 - 0.0241071428571429*G0_0_1 - 0.0241071428571429*G0_0_2 + 0.0241071428571427*G0_1_0 - 0.0241071428571429*G0_1_1 - 0.0241071428571429*G0_1_2 - 0.0241071428571429*G0_2_0;
    A[210] = 0.241071428571428*G0_0_0 + 0.241071428571428*G0_0_1 + 0.144642857142857*G0_0_2 + 0.241071428571428*G0_1_0 + 0.241071428571428*G0_1_1 + 0.144642857142857*G0_1_2 + 0.144642857142857*G0_2_0 + 0.144642857142857*G0_2_1 + 0.241071428571428*G0_2_2;
    A[211] = -0.0723214285714285*G0_0_0 - 0.0723214285714286*G0_0_1 - 0.144642857142857*G0_0_2 - 0.0723214285714285*G0_1_0 - 0.0723214285714286*G0_1_1 - 0.144642857142857*G0_1_2 - 0.0482142857142857*G0_2_0 - 0.0482142857142857*G0_2_1 - 0.192857142857143*G0_2_2;
    A[212] = 0.0482142857142857*G0_0_0 + 0.0241071428571429*G0_0_2 + 0.0482142857142857*G0_1_0 + 0.0241071428571429*G0_1_2 + 0.0241071428571428*G0_2_0;
    A[213] = 0.0723214285714286*G0_0_0 + 0.0482142857142858*G0_0_2 + 0.0723214285714286*G0_1_0 + 0.0482142857142858*G0_1_2 + 0.0482142857142857*G0_2_0 + 0.0241071428571429*G0_2_2;
    A[214] = 0.0482142857142857*G0_0_1 + 0.0241071428571428*G0_0_2 + 0.0482142857142857*G0_1_1 + 0.0241071428571428*G0_1_2 + 0.0241071428571428*G0_2_1;
    A[215] = 0.0723214285714286*G0_0_1 + 0.0482142857142858*G0_0_2 + 0.0723214285714286*G0_1_1 + 0.0482142857142858*G0_1_2 + 0.0482142857142857*G0_2_1 + 0.0241071428571429*G0_2_2;
    A[216] = 0.0482142857142858*G0_0_0 + 0.0482142857142859*G0_0_1 + 0.0241071428571429*G0_0_2 + 0.0482142857142859*G0_1_0 + 0.0482142857142859*G0_1_1 + 0.0241071428571429*G0_1_2 + 0.0241071428571429*G0_2_0 + 0.024107142857143*G0_2_1;
    A[217] = -0.0482142857142858*G0_0_0 - 0.289285714285714*G0_0_1 - 0.16875*G0_0_2 - 0.0482142857142859*G0_1_0 - 0.289285714285714*G0_1_1 - 0.16875*G0_1_2 - 0.0241071428571429*G0_2_0 - 0.16875*G0_2_1 - 0.0482142857142858*G0_2_2;
    A[218] = -0.289285714285714*G0_0_0 - 0.0482142857142859*G0_0_1 - 0.16875*G0_0_2 - 0.289285714285714*G0_1_0 - 0.0482142857142859*G0_1_1 - 0.16875*G0_1_2 - 0.16875*G0_2_0 - 0.024107142857143*G0_2_1 - 0.0482142857142859*G0_2_2;
    A[219] = -0.144642857142857*G0_0_0 - 0.144642857142857*G0_0_1 - 0.0241071428571429*G0_0_2 - 0.144642857142857*G0_1_0 - 0.144642857142857*G0_1_1 - 0.0241071428571429*G0_1_2 - 0.0241071428571429*G0_2_0 - 0.0241071428571429*G0_2_1;
    A[220] = 0.0133928571428571*G0_0_0 + 0.0133928571428571*G0_0_1 + 0.0133928571428571*G0_0_2 + 0.0133928571428571*G0_1_0 + 0.0133928571428571*G0_1_1 + 0.0133928571428571*G0_1_2 + 0.0482142857142856*G0_2_0 + 0.0482142857142856*G0_2_1 + 0.0482142857142856*G0_2_2;
    A[221] = -0.0133928571428571*G0_0_0 - 0.0133928571428571*G0_1_0;
    A[222] = -0.0133928571428572*G0_0_1 - 0.0133928571428572*G0_1_1;
    A[223] = -0.0616071428571428*G0_0_2 - 0.0616071428571428*G0_1_2 - 0.0964285714285713*G0_2_2;
    A[224] = 0.0241071428571429*G0_0_0 + 0.0241071428571429*G0_0_1 + 0.0241071428571428*G0_1_0 + 0.0241071428571429*G0_1_1;
    A[225] = 0.0241071428571428*G0_0_0 + 0.0241071428571429*G0_0_1 + 0.0241071428571429*G0_1_0 + 0.0241071428571429*G0_1_1;
    A[226] = -0.0241071428571428*G0_0_0 - 0.0241071428571429*G0_0_2 - 0.0241071428571428*G0_1_0 - 0.0241071428571429*G0_1_2 - 0.0241071428571428*G0_2_1;
    A[227] = -0.0241071428571428*G0_0_0 - 0.0241071428571428*G0_0_2 - 0.0241071428571429*G0_1_0 - 0.0241071428571429*G0_1_2 + 0.0241071428571428*G0_2_0 - 0.0241071428571428*G0_2_1 + 0.0241071428571428*G0_2_2;
    A[228] = -0.0241071428571428*G0_0_1 - 0.0241071428571428*G0_0_2 - 0.0241071428571429*G0_1_1 - 0.0241071428571429*G0_1_2 - 0.0241071428571428*G0_2_0 + 0.0241071428571428*G0_2_1 + 0.0241071428571428*G0_2_2;
    A[229] = -0.0241071428571428*G0_0_1 - 0.0241071428571428*G0_0_2 - 0.0241071428571428*G0_1_1 - 0.0241071428571428*G0_1_2 - 0.0241071428571428*G0_2_0;
    A[230] = -0.0723214285714285*G0_0_0 - 0.0723214285714285*G0_0_1 - 0.0482142857142857*G0_0_2 - 0.0723214285714286*G0_1_0 - 0.0723214285714286*G0_1_1 - 0.0482142857142857*G0_1_2 - 0.144642857142857*G0_2_0 - 0.144642857142857*G0_2_1 - 0.192857142857143*G0_2_2;
    A[231] = 0.192857142857143*G0_0_0 + 0.192857142857143*G0_0_1 + 0.0964285714285713*G0_0_2 + 0.192857142857143*G0_1_0 + 0.192857142857143*G0_1_1 + 0.0964285714285714*G0_1_2 + 0.0964285714285714*G0_2_0 + 0.0964285714285714*G0_2_1 + 0.241071428571428*G0_2_2;
    A[232] = 0.0723214285714285*G0_0_0 + 0.0241071428571428*G0_0_2 + 0.0723214285714285*G0_1_0 + 0.0241071428571428*G0_1_2 + 0.0241071428571428*G0_2_0;
    A[233] = -0.192857142857143*G0_0_0 - 0.0964285714285714*G0_0_2 - 0.192857142857143*G0_1_0 - 0.0964285714285714*G0_1_2 - 0.0964285714285713*G0_2_0 + 0.0241071428571427*G0_2_2;
    A[234] = 0.0723214285714286*G0_0_1 + 0.0241071428571429*G0_0_2 + 0.0723214285714286*G0_1_1 + 0.0241071428571429*G0_1_2 + 0.0241071428571429*G0_2_1;
    A[235] = -0.192857142857143*G0_0_1 - 0.0964285714285714*G0_0_2 - 0.192857142857143*G0_1_1 - 0.0964285714285714*G0_1_2 - 0.0964285714285714*G0_2_1 + 0.0241071428571427*G0_2_2;
    A[236] = -0.0964285714285714*G0_0_0 - 0.0964285714285715*G0_0_1 + 0.0241071428571428*G0_0_2 - 0.0964285714285714*G0_1_0 - 0.0964285714285715*G0_1_1 + 0.0241071428571428*G0_1_2 + 0.0241071428571428*G0_2_0 + 0.0241071428571427*G0_2_1;
    A[237] = 0.0964285714285713*G0_0_0 + 0.120535714285714*G0_0_2 + 0.0964285714285713*G0_1_0 + 0.120535714285714*G0_1_2 - 0.0241071428571428*G0_2_0 + 0.120535714285714*G0_2_1 - 0.0482142857142856*G0_2_2;
    A[238] = 0.0964285714285714*G0_0_1 + 0.120535714285714*G0_0_2 + 0.0964285714285714*G0_1_1 + 0.120535714285714*G0_1_2 + 0.120535714285714*G0_2_0 - 0.0241071428571427*G0_2_1 - 0.0482142857142854*G0_2_2;
    A[239] = -0.0241071428571428*G0_0_2 - 0.0241071428571429*G0_1_2 - 0.0241071428571429*G0_2_0 - 0.0241071428571429*G0_2_1;
    A[240] = -0.0133928571428571*G0_0_0 - 0.0133928571428571*G0_0_1 - 0.0133928571428571*G0_0_2 - 0.0133928571428572*G0_2_0 - 0.0133928571428572*G0_2_1 - 0.0133928571428572*G0_2_2;
    A[241] = -0.0348214285714285*G0_0_0 + 0.0616071428571428*G0_2_0;
    A[242] = 0.0133928571428571*G0_0_1 + 0.0133928571428571*G0_2_1;
    A[243] = -0.0348214285714285*G0_0_2 + 0.0133928571428571*G0_2_2;
    A[244] = 0.120535714285714*G0_0_0 + 0.0964285714285714*G0_0_1 + 0.0964285714285714*G0_2_0 + 0.192857142857143*G0_2_1;
    A[245] = -0.0241071428571428*G0_0_0 - 0.0482142857142855*G0_0_1 - 0.0241071428571428*G0_2_0 - 0.0723214285714283*G0_2_1;
    A[246] = 0.0241071428571429*G0_0_0 + 0.0241071428571428*G0_0_2 + 0.0241071428571429*G0_2_0 + 0.0241071428571429*G0_2_2;
    A[247] = 0.0241071428571429*G0_0_0 + 0.0241071428571429*G0_0_2 + 0.0241071428571429*G0_2_0 + 0.0241071428571429*G0_2_2;
    A[248] = 0.0241071428571429*G0_0_0 + 0.0482142857142858*G0_0_1 + 0.0482142857142858*G0_0_2 + 0.0482142857142858*G0_2_0 + 0.0723214285714287*G0_2_1 + 0.0723214285714287*G0_2_2;
    A[249] = 0.0241071428571428*G0_0_0 - 0.0964285714285714*G0_0_1 - 0.0964285714285714*G0_0_2 - 0.0964285714285714*G0_2_0 - 0.192857142857143*G0_2_1 - 0.192857142857143*G0_2_2;
    A[250] = 0.0482142857142857*G0_0_0 + 0.0482142857142857*G0_0_1 + 0.0241071428571428*G0_0_2 + 0.0241071428571429*G0_2_0 + 0.0241071428571429*G0_2_1;
    A[251] = 0.0723214285714285*G0_0_0 + 0.0723214285714285*G0_0_1 + 0.0241071428571428*G0_0_2 + 0.0241071428571428*G0_2_0 + 0.0241071428571428*G0_2_1;
    A[252] = 0.241071428571428*G0_0_0 + 0.0964285714285714*G0_0_2 + 0.0964285714285714*G0_2_0 + 0.192857142857143*G0_2_2;
    A[253] = -0.0723214285714283*G0_0_0 + 0.0723214285714286*G0_0_2 - 0.0241071428571428*G0_2_0 - 0.0723214285714284*G0_2_2;
    A[254] = -0.0482142857142855*G0_0_1 - 0.0241071428571428*G0_0_2 - 0.0241071428571428*G0_2_1 - 0.0241071428571428*G0_2_2;
    A[255] = -0.0723214285714284*G0_0_1 - 0.0482142857142855*G0_0_2 - 0.0241071428571428*G0_2_1 - 0.0241071428571428*G0_2_2;
    A[256] = -0.0482142857142855*G0_0_0 + 0.241071428571428*G0_0_1 + 0.120535714285714*G0_0_2 - 0.0241071428571428*G0_2_0 + 0.0964285714285714*G0_2_1 + 0.0964285714285715*G0_2_2;
    A[257] = 0.0482142857142854*G0_0_0 + 0.0241071428571427*G0_0_2 + 0.0241071428571427*G0_2_0;
    A[258] = -0.289285714285714*G0_0_0 - 0.241071428571428*G0_0_1 - 0.120535714285714*G0_0_2 - 0.120535714285714*G0_2_0 - 0.0964285714285714*G0_2_1;
    A[259] = -0.144642857142857*G0_0_0 - 0.120535714285714*G0_0_2 - 0.120535714285714*G0_2_0 - 0.0964285714285716*G0_2_2;
    A[260] = -0.0133928571428571*G0_0_0 - 0.0133928571428571*G0_0_1 - 0.0133928571428571*G0_0_2 - 0.0133928571428571*G0_2_0 - 0.0133928571428571*G0_2_1 - 0.0133928571428571*G0_2_2;
    A[261] = 0.0133928571428571*G0_0_0 - 0.0348214285714285*G0_2_0;
    A[262] = 0.0133928571428572*G0_0_1 + 0.0133928571428571*G0_2_1;
    A[263] = 0.0616071428571428*G0_0_2 - 0.0348214285714285*G0_2_2;
    A[264] = -0.0241071428571428*G0_0_0 - 0.0241071428571428*G0_0_1 - 0.0482142857142856*G0_2_0 - 0.0723214285714284*G0_2_1;
    A[265] = -0.0241071428571428*G0_0_0 - 0.0241071428571429*G0_0_1 - 0.0241071428571428*G0_2_0 - 0.0482142857142856*G0_2_1;
    A[266] = 0.0241071428571428*G0_0_0 + 0.0241071428571429*G0_0_2 + 0.0241071428571428*G0_2_0 + 0.0241071428571428*G0_2_2;
    A[267] = 0.0241071428571428*G0_0_0 + 0.0241071428571429*G0_0_2 + 0.0241071428571429*G0_2_0 + 0.0241071428571429*G0_2_2;
    A[268] = 0.0241071428571429*G0_0_1 + 0.0241071428571429*G0_0_2 + 0.0241071428571428*G0_2_0 + 0.0482142857142857*G0_2_1 + 0.0482142857142857*G0_2_2;
    A[269] = 0.0241071428571428*G0_0_1 + 0.0241071428571428*G0_0_2 + 0.0241071428571428*G0_2_0 + 0.0723214285714283*G0_2_1 + 0.0723214285714283*G0_2_2;
    A[270] = 0.0723214285714286*G0_0_0 + 0.0723214285714286*G0_0_1 + 0.0482142857142857*G0_0_2 + 0.0482142857142858*G0_2_0 + 0.0482142857142858*G0_2_1 + 0.0241071428571429*G0_2_2;
    A[271] = -0.192857142857143*G0_0_0 - 0.192857142857143*G0_0_1 - 0.0964285714285713*G0_0_2 - 0.0964285714285714*G0_2_0 - 0.0964285714285714*G0_2_1 + 0.0241071428571427*G0_2_2;
    A[272] = -0.0723214285714283*G0_0_0 - 0.0241071428571428*G0_0_2 + 0.0723214285714286*G0_2_0 - 0.0723214285714284*G0_2_2;
    A[273] = 0.192857142857143*G0_0_0 + 0.0964285714285714*G0_0_2 + 0.0964285714285714*G0_2_0 + 0.241071428571428*G0_2_2;
    A[274] = -0.0723214285714286*G0_0_1 - 0.0241071428571429*G0_0_2 - 0.0482142857142856*G0_2_1 - 0.0241071428571428*G0_2_2;
    A[275] = 0.192857142857143*G0_0_1 + 0.0964285714285714*G0_0_2 + 0.0964285714285714*G0_2_1 + 0.120535714285714*G0_2_2;
    A[276] = 0.0964285714285713*G0_0_0 + 0.0964285714285715*G0_0_1 - 0.0241071428571428*G0_0_2 + 0.120535714285714*G0_2_0 + 0.241071428571429*G0_2_1 - 0.0482142857142854*G0_2_2;
    A[277] = -0.0964285714285713*G0_0_0 - 0.120535714285714*G0_0_2 - 0.120535714285714*G0_2_0 - 0.144642857142857*G0_2_2;
    A[278] = -0.0964285714285715*G0_0_1 - 0.120535714285714*G0_0_2 - 0.120535714285714*G0_2_0 - 0.241071428571429*G0_2_1 - 0.289285714285714*G0_2_2;
    A[279] = 0.0241071428571428*G0_0_2 + 0.0241071428571427*G0_2_0 + 0.0482142857142855*G0_2_2;
    A[280] = -0.0133928571428572*G0_1_0 - 0.0133928571428572*G0_1_1 - 0.0133928571428572*G0_1_2 - 0.0133928571428571*G0_2_0 - 0.0133928571428571*G0_2_1 - 0.0133928571428571*G0_2_2;
    A[281] = 0.0133928571428571*G0_1_0 + 0.0133928571428571*G0_2_0;
    A[282] = -0.0348214285714285*G0_1_1 + 0.0616071428571428*G0_2_1;
    A[283] = -0.0348214285714286*G0_1_2 + 0.0133928571428571*G0_2_2;
    A[284] = -0.0482142857142856*G0_1_0 - 0.0241071428571428*G0_1_1 - 0.0723214285714285*G0_2_0 - 0.0241071428571429*G0_2_1;
    A[285] = 0.0964285714285714*G0_1_0 + 0.120535714285714*G0_1_1 + 0.192857142857143*G0_2_0 + 0.0964285714285714*G0_2_1;
    A[286] = -0.0964285714285714*G0_1_0 + 0.0241071428571427*G0_1_1 - 0.0964285714285714*G0_1_2 - 0.192857142857143*G0_2_0 - 0.0964285714285713*G0_2_1 - 0.192857142857143*G0_2_2;
    A[287] = 0.0482142857142858*G0_1_0 + 0.0241071428571429*G0_1_1 + 0.0482142857142858*G0_1_2 + 0.0723214285714285*G0_2_0 + 0.0482142857142857*G0_2_1 + 0.0723214285714286*G0_2_2;
    A[288] = 0.0241071428571429*G0_1_1 + 0.0241071428571429*G0_1_2 + 0.0241071428571429*G0_2_1 + 0.0241071428571429*G0_2_2;
    A[289] = 0.0241071428571428*G0_1_1 + 0.0241071428571428*G0_1_2 + 0.0241071428571428*G0_2_1 + 0.0241071428571428*G0_2_2;
    A[290] = 0.0482142857142857*G0_1_0 + 0.0482142857142857*G0_1_1 + 0.0241071428571428*G0_1_2 + 0.0241071428571428*G0_2_0 + 0.0241071428571428*G0_2_1;
    A[291] = 0.0723214285714286*G0_1_0 + 0.0723214285714286*G0_1_1 + 0.0241071428571429*G0_1_2 + 0.0241071428571429*G0_2_0 + 0.0241071428571429*G0_2_1;
    A[292] = -0.0482142857142855*G0_1_0 - 0.0241071428571428*G0_1_2 - 0.0241071428571428*G0_2_0 - 0.0241071428571428*G0_2_2;
    A[293] = -0.0723214285714286*G0_1_0 - 0.0482142857142856*G0_1_2 - 0.0241071428571429*G0_2_0 - 0.0241071428571428*G0_2_2;
    A[294] = 0.241071428571428*G0_1_1 + 0.0964285714285714*G0_1_2 + 0.0964285714285714*G0_2_1 + 0.192857142857143*G0_2_2;
    A[295] = -0.0723214285714286*G0_1_1 + 0.0723214285714285*G0_1_2 - 0.0241071428571429*G0_2_1 - 0.0723214285714284*G0_2_2;
    A[296] = 0.241071428571428*G0_1_0 - 0.0482142857142855*G0_1_1 + 0.120535714285714*G0_1_2 + 0.0964285714285713*G0_2_0 - 0.0241071428571429*G0_2_1 + 0.0964285714285713*G0_2_2;
    A[297] = -0.241071428571428*G0_1_0 - 0.289285714285714*G0_1_1 - 0.120535714285714*G0_1_2 - 0.0964285714285713*G0_2_0 - 0.120535714285714*G0_2_1;
    A[298] = 0.0482142857142855*G0_1_1 + 0.0241071428571427*G0_1_2 + 0.0241071428571429*G0_2_1;
    A[299] = -0.144642857142857*G0_1_1 - 0.120535714285714*G0_1_2 - 0.120535714285714*G0_2_1 - 0.0964285714285713*G0_2_2;
    A[300] = -0.0133928571428571*G0_1_0 - 0.0133928571428571*G0_1_1 - 0.0133928571428571*G0_1_2 - 0.0133928571428572*G0_2_0 - 0.0133928571428572*G0_2_1 - 0.0133928571428572*G0_2_2;
    A[301] = 0.0133928571428571*G0_1_0 + 0.0133928571428571*G0_2_0;
    A[302] = 0.0133928571428572*G0_1_1 - 0.0348214285714285*G0_2_1;
    A[303] = 0.0616071428571428*G0_1_2 - 0.0348214285714285*G0_2_2;
    A[304] = -0.0241071428571428*G0_1_0 - 0.0241071428571429*G0_1_1 - 0.0482142857142856*G0_2_0 - 0.0241071428571428*G0_2_1;
    A[305] = -0.0241071428571429*G0_1_0 - 0.0241071428571429*G0_1_1 - 0.0723214285714284*G0_2_0 - 0.0482142857142856*G0_2_1;
    A[306] = 0.0241071428571428*G0_1_0 + 0.0241071428571429*G0_1_2 + 0.0723214285714284*G0_2_0 + 0.0241071428571429*G0_2_1 + 0.0723214285714284*G0_2_2;
    A[307] = 0.0241071428571428*G0_1_0 + 0.0241071428571429*G0_1_2 + 0.0482142857142857*G0_2_0 + 0.0241071428571428*G0_2_1 + 0.0482142857142857*G0_2_2;
    A[308] = 0.0241071428571428*G0_1_1 + 0.0241071428571429*G0_1_2 + 0.0241071428571429*G0_2_1 + 0.0241071428571429*G0_2_2;
    A[309] = 0.0241071428571428*G0_1_1 + 0.0241071428571428*G0_1_2 + 0.0241071428571428*G0_2_1 + 0.0241071428571427*G0_2_2;
    A[310] = 0.0723214285714286*G0_1_0 + 0.0723214285714286*G0_1_1 + 0.0482142857142857*G0_1_2 + 0.0482142857142858*G0_2_0 + 0.0482142857142858*G0_2_1 + 0.0241071428571429*G0_2_2;
    A[311] = -0.192857142857143*G0_1_0 - 0.192857142857143*G0_1_1 - 0.0964285714285714*G0_1_2 - 0.0964285714285714*G0_2_0 - 0.0964285714285714*G0_2_1 + 0.0241071428571427*G0_2_2;
    A[312] = -0.0723214285714284*G0_1_0 - 0.0241071428571428*G0_1_2 - 0.0482142857142855*G0_2_0 - 0.0241071428571428*G0_2_2;
    A[313] = 0.192857142857143*G0_1_0 + 0.0964285714285714*G0_1_2 + 0.0964285714285714*G0_2_0 + 0.120535714285714*G0_2_2;
    A[314] = -0.0723214285714286*G0_1_1 - 0.0241071428571429*G0_1_2 + 0.0723214285714285*G0_2_1 - 0.0723214285714284*G0_2_2;
    A[315] = 0.192857142857143*G0_1_1 + 0.0964285714285714*G0_1_2 + 0.0964285714285714*G0_2_1 + 0.241071428571428*G0_2_2;
    A[316] = 0.0964285714285714*G0_1_0 + 0.0964285714285715*G0_1_1 - 0.0241071428571428*G0_1_2 + 0.241071428571429*G0_2_0 + 0.120535714285715*G0_2_1 - 0.0482142857142853*G0_2_2;
    A[317] = -0.0964285714285713*G0_1_0 - 0.120535714285714*G0_1_2 - 0.241071428571428*G0_2_0 - 0.120535714285714*G0_2_1 - 0.289285714285714*G0_2_2;
    A[318] = -0.0964285714285715*G0_1_1 - 0.120535714285714*G0_1_2 - 0.120535714285714*G0_2_1 - 0.144642857142857*G0_2_2;
    A[319] = 0.0241071428571429*G0_1_2 + 0.0241071428571427*G0_2_1 + 0.0482142857142854*G0_2_2;
    A[320] = -0.0321428571428572*G0_0_0 - 0.0321428571428572*G0_0_1 - 0.0321428571428572*G0_0_2 - 0.0321428571428572*G0_1_0 - 0.0321428571428572*G0_1_1 - 0.0321428571428572*G0_1_2 - 0.0321428571428572*G0_2_0 - 0.0321428571428572*G0_2_1 - 0.0321428571428572*G0_2_2;
    A[321] = 0.0321428571428571*G0_0_0 - 0.0160714285714285*G0_1_0 - 0.0160714285714285*G0_2_0;
    A[322] = -0.0160714285714285*G0_0_1 + 0.032142857142857*G0_1_1 - 0.0160714285714286*G0_2_1;
    A[323] = -0.0160714285714286*G0_0_2 - 0.0160714285714286*G0_1_2 + 0.032142857142857*G0_2_2;
    A[324] = -0.0482142857142856*G0_0_0 - 0.0241071428571428*G0_0_1 + 0.120535714285714*G0_1_0 + 0.0964285714285714*G0_1_1 + 0.241071428571428*G0_2_0 + 0.0964285714285714*G0_2_1;
    A[325] = 0.0964285714285714*G0_0_0 + 0.120535714285714*G0_0_1 - 0.0241071428571428*G0_1_0 - 0.0482142857142855*G0_1_1 + 0.0964285714285714*G0_2_0 + 0.241071428571428*G0_2_1;
    A[326] = -0.0964285714285713*G0_0_0 + 0.0241071428571427*G0_0_1 - 0.0964285714285713*G0_0_2 + 0.024107142857143*G0_1_0 + 0.0241071428571429*G0_1_2 - 0.0964285714285712*G0_2_0 + 0.0241071428571428*G0_2_1 - 0.0964285714285713*G0_2_2;
    A[327] = 0.0482142857142859*G0_0_0 + 0.024107142857143*G0_0_1 + 0.048214285714286*G0_0_2 + 0.0241071428571431*G0_1_0 + 0.0241071428571431*G0_1_2 + 0.048214285714286*G0_2_0 + 0.0241071428571431*G0_2_1 + 0.0482142857142861*G0_2_2;
    A[328] = 0.024107142857143*G0_0_1 + 0.0241071428571431*G0_0_2 + 0.0241071428571429*G0_1_0 + 0.0482142857142859*G0_1_1 + 0.048214285714286*G0_1_2 + 0.0241071428571431*G0_2_0 + 0.048214285714286*G0_2_1 + 0.048214285714286*G0_2_2;
    A[329] = 0.0241071428571427*G0_0_1 + 0.0241071428571427*G0_0_2 + 0.0241071428571428*G0_1_0 - 0.0964285714285715*G0_1_1 - 0.0964285714285716*G0_1_2 + 0.0241071428571427*G0_2_0 - 0.0964285714285716*G0_2_1 - 0.0964285714285716*G0_2_2;
    A[330] = 0.0482142857142859*G0_0_0 + 0.0482142857142859*G0_0_1 + 0.0241071428571429*G0_0_2 + 0.0482142857142859*G0_1_0 + 0.0482142857142859*G0_1_1 + 0.024107142857143*G0_1_2 + 0.0241071428571429*G0_2_0 + 0.0241071428571429*G0_2_1;
    A[331] = -0.0964285714285714*G0_0_0 - 0.0964285714285714*G0_0_1 + 0.0241071428571428*G0_0_2 - 0.0964285714285715*G0_1_0 - 0.0964285714285715*G0_1_1 + 0.0241071428571427*G0_1_2 + 0.0241071428571428*G0_2_0 + 0.0241071428571428*G0_2_1;
    A[332] = -0.0482142857142855*G0_0_0 - 0.0241071428571428*G0_0_2 + 0.241071428571428*G0_1_0 + 0.0964285714285714*G0_1_2 + 0.120535714285714*G0_2_0 + 0.0964285714285715*G0_2_2;
    A[333] = 0.0964285714285713*G0_0_0 + 0.120535714285714*G0_0_2 + 0.0964285714285715*G0_1_0 + 0.241071428571429*G0_1_2 - 0.0241071428571428*G0_2_0 - 0.0482142857142854*G0_2_2;
    A[334] = 0.241071428571428*G0_0_1 + 0.0964285714285713*G0_0_2 - 0.0482142857142855*G0_1_1 - 0.0241071428571429*G0_1_2 + 0.120535714285714*G0_2_1 + 0.0964285714285713*G0_2_2;
    A[335] = 0.0964285714285714*G0_0_1 + 0.241071428571429*G0_0_2 + 0.0964285714285715*G0_1_1 + 0.120535714285715*G0_1_2 - 0.0241071428571428*G0_2_1 - 0.0482142857142853*G0_2_2;
    A[336] = 0.578571428571428*G0_0_0 + 0.289285714285714*G0_0_1 + 0.289285714285714*G0_0_2 + 0.289285714285714*G0_1_0 + 0.578571428571429*G0_1_1 + 0.289285714285714*G0_1_2 + 0.289285714285714*G0_2_0 + 0.289285714285714*G0_2_1 + 0.578571428571428*G0_2_2;
    A[337] = -0.578571428571428*G0_0_0 - 0.289285714285714*G0_0_1 - 0.289285714285714*G0_0_2 - 0.289285714285714*G0_1_0 - 0.144642857142857*G0_1_2 - 0.289285714285714*G0_2_0 - 0.144642857142857*G0_2_1;
    A[338] = -0.289285714285714*G0_0_1 - 0.144642857142857*G0_0_2 - 0.289285714285715*G0_1_0 - 0.578571428571429*G0_1_1 - 0.289285714285715*G0_1_2 - 0.144642857142857*G0_2_0 - 0.289285714285714*G0_2_1;
    A[339] = -0.144642857142857*G0_0_1 - 0.289285714285714*G0_0_2 - 0.144642857142857*G0_1_0 - 0.289285714285714*G0_1_2 - 0.289285714285714*G0_2_0 - 0.289285714285714*G0_2_1 - 0.578571428571428*G0_2_2;
    A[340] = 0.0321428571428572*G0_0_0 + 0.0321428571428572*G0_0_1 + 0.0321428571428572*G0_0_2 + 0.0482142857142857*G0_1_0 + 0.0482142857142857*G0_1_1 + 0.0482142857142857*G0_1_2 + 0.0482142857142857*G0_2_0 + 0.0482142857142857*G0_2_1 + 0.0482142857142857*G0_2_2;
    A[341] = -0.0321428571428571*G0_0_0;
    A[342] = 0.0160714285714285*G0_0_1 + 0.0482142857142856*G0_1_1;
    A[343] = 0.0160714285714287*G0_0_2 + 0.0482142857142856*G0_2_2;
    A[344] = 0.0482142857142856*G0_0_0 + 0.0241071428571428*G0_0_1 + 0.0241071428571429*G0_1_0;
    A[345] = -0.0964285714285714*G0_0_0 - 0.120535714285714*G0_0_1 - 0.120535714285714*G0_1_0 - 0.144642857142857*G0_1_1;
    A[346] = 0.0964285714285713*G0_0_0 - 0.0241071428571427*G0_0_1 + 0.0964285714285713*G0_0_2 + 0.120535714285714*G0_1_0 - 0.0482142857142856*G0_1_1 + 0.120535714285714*G0_1_2 + 0.120535714285714*G0_2_1;
    A[347] = -0.0482142857142859*G0_0_0 - 0.024107142857143*G0_0_1 - 0.048214285714286*G0_0_2 - 0.16875*G0_1_0 - 0.0482142857142858*G0_1_1 - 0.16875*G0_1_2 - 0.289285714285714*G0_2_0 - 0.16875*G0_2_1 - 0.289285714285714*G0_2_2;
    A[348] = -0.024107142857143*G0_0_1 - 0.0241071428571431*G0_0_2 - 0.0241071428571429*G0_1_0 - 0.144642857142857*G0_1_1 - 0.144642857142857*G0_1_2 - 0.0241071428571429*G0_2_0 - 0.144642857142857*G0_2_1 - 0.144642857142857*G0_2_2;
    A[349] = -0.0241071428571427*G0_0_1 - 0.0241071428571427*G0_0_2 - 0.0241071428571428*G0_1_0 - 0.0241071428571427*G0_2_0;
    A[350] = -0.0482142857142859*G0_0_0 - 0.0482142857142859*G0_0_1 - 0.0241071428571429*G0_0_2 - 0.289285714285714*G0_1_0 - 0.289285714285714*G0_1_1 - 0.16875*G0_1_2 - 0.16875*G0_2_0 - 0.16875*G0_2_1 - 0.0482142857142858*G0_2_2;
    A[351] = 0.0964285714285713*G0_0_0 + 0.0964285714285713*G0_0_1 - 0.0241071428571429*G0_0_2 + 0.120535714285714*G0_1_2 + 0.120535714285714*G0_2_0 + 0.120535714285714*G0_2_1 - 0.0482142857142856*G0_2_2;
    A[352] = 0.0482142857142854*G0_0_0 + 0.0241071428571427*G0_0_2 + 0.0241071428571427*G0_2_0;
    A[353] = -0.0964285714285713*G0_0_0 - 0.120535714285714*G0_0_2 - 0.120535714285714*G0_2_0 - 0.144642857142857*G0_2_2;
    A[354] = -0.241071428571428*G0_0_1 - 0.0964285714285713*G0_0_2 - 0.289285714285714*G0_1_1 - 0.120535714285714*G0_1_2 - 0.120535714285714*G0_2_1;
    A[355] = -0.0964285714285713*G0_0_1 - 0.241071428571429*G0_0_2 - 0.120535714285714*G0_1_2 - 0.120535714285714*G0_2_1 - 0.289285714285714*G0_2_2;
    A[356] = -0.578571428571428*G0_0_0 - 0.289285714285714*G0_0_1 - 0.289285714285714*G0_0_2 - 0.289285714285714*G0_1_0 - 0.144642857142857*G0_1_2 - 0.289285714285714*G0_2_0 - 0.144642857142857*G0_2_1;
    A[357] = 0.578571428571428*G0_0_0 + 0.289285714285714*G0_0_1 + 0.289285714285714*G0_0_2 + 0.289285714285714*G0_1_0 + 0.578571428571428*G0_1_1 + 0.289285714285714*G0_1_2 + 0.289285714285714*G0_2_0 + 0.289285714285714*G0_2_1 + 0.578571428571428*G0_2_2;
    A[358] = 0.289285714285714*G0_0_1 + 0.144642857142857*G0_0_2 + 0.289285714285714*G0_1_0 + 0.144642857142857*G0_1_2 + 0.144642857142857*G0_2_0 + 0.144642857142857*G0_2_1 + 0.289285714285714*G0_2_2;
    A[359] = 0.144642857142857*G0_0_1 + 0.289285714285714*G0_0_2 + 0.144642857142857*G0_1_0 + 0.289285714285714*G0_1_1 + 0.144642857142857*G0_1_2 + 0.289285714285714*G0_2_0 + 0.144642857142857*G0_2_1;
    A[360] = 0.0482142857142857*G0_0_0 + 0.0482142857142857*G0_0_1 + 0.0482142857142858*G0_0_2 + 0.0321428571428572*G0_1_0 + 0.0321428571428572*G0_1_1 + 0.0321428571428572*G0_1_2 + 0.0482142857142858*G0_2_0 + 0.0482142857142858*G0_2_1 + 0.0482142857142858*G0_2_2;
    A[361] = 0.0482142857142856*G0_0_0 + 0.0160714285714285*G0_1_0;
    A[362] = -0.032142857142857*G0_1_1;
    A[363] = 0.0160714285714285*G0_1_2 + 0.0482142857142856*G0_2_2;
    A[364] = -0.144642857142857*G0_0_0 - 0.120535714285714*G0_0_1 - 0.120535714285714*G0_1_0 - 0.0964285714285715*G0_1_1;
    A[365] = 0.0241071428571427*G0_0_1 + 0.0241071428571428*G0_1_0 + 0.0482142857142855*G0_1_1;
    A[366] = -0.0241071428571429*G0_0_1 - 0.024107142857143*G0_1_0 - 0.0241071428571429*G0_1_2 - 0.0241071428571429*G0_2_1;
    A[367] = -0.144642857142857*G0_0_0 - 0.0241071428571429*G0_0_1 - 0.144642857142857*G0_0_2 - 0.0241071428571431*G0_1_0 - 0.0241071428571431*G0_1_2 - 0.144642857142857*G0_2_0 - 0.0241071428571429*G0_2_1 - 0.144642857142857*G0_2_2;
    A[368] = -0.0482142857142859*G0_0_0 - 0.16875*G0_0_1 - 0.16875*G0_0_2 - 0.024107142857143*G0_1_0 - 0.0482142857142859*G0_1_1 - 0.048214285714286*G0_1_2 - 0.16875*G0_2_0 - 0.289285714285714*G0_2_1 - 0.289285714285714*G0_2_2;
    A[369] = -0.0482142857142855*G0_0_0 + 0.120535714285714*G0_0_1 + 0.120535714285714*G0_0_2 - 0.0241071428571427*G0_1_0 + 0.0964285714285716*G0_1_1 + 0.0964285714285716*G0_1_2 + 0.120535714285714*G0_2_0;
    A[370] = -0.289285714285714*G0_0_0 - 0.289285714285714*G0_0_1 - 0.16875*G0_0_2 - 0.0482142857142859*G0_1_0 - 0.0482142857142859*G0_1_1 - 0.024107142857143*G0_1_2 - 0.16875*G0_2_0 - 0.16875*G0_2_1 - 0.0482142857142859*G0_2_2;
    A[371] = 0.120535714285714*G0_0_2 + 0.0964285714285715*G0_1_0 + 0.0964285714285715*G0_1_1 - 0.0241071428571427*G0_1_2 + 0.120535714285714*G0_2_0 + 0.120535714285714*G0_2_1 - 0.0482142857142854*G0_2_2;
    A[372] = -0.289285714285714*G0_0_0 - 0.120535714285714*G0_0_2 - 0.241071428571428*G0_1_0 - 0.0964285714285714*G0_1_2 - 0.120535714285714*G0_2_0;
    A[373] = -0.120535714285714*G0_0_2 - 0.0964285714285715*G0_1_0 - 0.241071428571429*G0_1_2 - 0.120535714285714*G0_2_0 - 0.289285714285714*G0_2_2;
    A[374] = 0.0482142857142855*G0_1_1 + 0.0241071428571429*G0_1_2 + 0.0241071428571427*G0_2_1;
    A[375] = -0.0964285714285715*G0_1_1 - 0.120535714285714*G0_1_2 - 0.120535714285714*G0_2_1 - 0.144642857142857*G0_2_2;
    A[376] = -0.289285714285715*G0_0_1 - 0.144642857142857*G0_0_2 - 0.289285714285714*G0_1_0 - 0.578571428571429*G0_1_1 - 0.289285714285714*G0_1_2 - 0.144642857142857*G0_2_0 - 0.289285714285715*G0_2_1;
    A[377] = 0.289285714285714*G0_0_1 + 0.144642857142857*G0_0_2 + 0.289285714285714*G0_1_0 + 0.144642857142857*G0_1_2 + 0.144642857142857*G0_2_0 + 0.144642857142857*G0_2_1 + 0.289285714285714*G0_2_2;
    A[378] = 0.578571428571428*G0_0_0 + 0.289285714285715*G0_0_1 + 0.289285714285715*G0_0_2 + 0.289285714285715*G0_1_0 + 0.578571428571428*G0_1_1 + 0.289285714285715*G0_1_2 + 0.289285714285715*G0_2_0 + 0.289285714285715*G0_2_1 + 0.578571428571428*G0_2_2;
    A[379] = 0.289285714285714*G0_0_0 + 0.144642857142857*G0_0_1 + 0.144642857142857*G0_0_2 + 0.144642857142857*G0_1_0 + 0.289285714285714*G0_1_2 + 0.144642857142857*G0_2_0 + 0.289285714285714*G0_2_1;
    A[380] = 0.0482142857142857*G0_0_0 + 0.0482142857142857*G0_0_1 + 0.0482142857142857*G0_0_2 + 0.0482142857142857*G0_1_0 + 0.0482142857142857*G0_1_1 + 0.0482142857142858*G0_1_2 + 0.0321428571428572*G0_2_0 + 0.0321428571428572*G0_2_1 + 0.0321428571428572*G0_2_2;
    A[381] = 0.0482142857142856*G0_0_0 + 0.0160714285714285*G0_2_0;
    A[382] = 0.0482142857142856*G0_1_1 + 0.0160714285714286*G0_2_1;
    A[383] = -0.032142857142857*G0_2_2;
    A[384] = -0.289285714285714*G0_0_0 - 0.120535714285714*G0_0_1 - 0.120535714285714*G0_1_0 - 0.241071428571428*G0_2_0 - 0.0964285714285715*G0_2_1;
    A[385] = -0.120535714285714*G0_0_1 - 0.120535714285714*G0_1_0 - 0.289285714285714*G0_1_1 - 0.0964285714285714*G0_2_0 - 0.241071428571428*G0_2_1;
    A[386] = 0.120535714285714*G0_0_1 + 0.120535714285714*G0_1_0 - 0.0482142857142856*G0_1_1 + 0.120535714285714*G0_1_2 + 0.0964285714285711*G0_2_0 - 0.0241071428571428*G0_2_1 + 0.0964285714285713*G0_2_2;
    A[387] = -0.289285714285714*G0_0_0 - 0.16875*G0_0_1 - 0.289285714285714*G0_0_2 - 0.16875*G0_1_0 - 0.0482142857142858*G0_1_1 - 0.16875*G0_1_2 - 0.048214285714286*G0_2_0 - 0.0241071428571431*G0_2_1 - 0.0482142857142861*G0_2_2;
    A[388] = -0.0482142857142859*G0_0_0 - 0.16875*G0_0_1 - 0.16875*G0_0_2 - 0.16875*G0_1_0 - 0.289285714285714*G0_1_1 - 0.289285714285714*G0_1_2 - 0.0241071428571431*G0_2_0 - 0.048214285714286*G0_2_1 - 0.048214285714286*G0_2_2;
    A[389] = -0.0482142857142855*G0_0_0 + 0.120535714285714*G0_0_1 + 0.120535714285714*G0_0_2 + 0.120535714285714*G0_1_0 - 0.0241071428571427*G0_2_0 + 0.0964285714285717*G0_2_1 + 0.0964285714285717*G0_2_2;
    A[390] = -0.144642857142857*G0_0_0 - 0.144642857142857*G0_0_1 - 0.0241071428571429*G0_0_2 - 0.144642857142857*G0_1_0 - 0.144642857142857*G0_1_1 - 0.0241071428571429*G0_1_2 - 0.0241071428571429*G0_2_0 - 0.0241071428571429*G0_2_1;
    A[391] = -0.0241071428571429*G0_0_2 - 0.0241071428571429*G0_1_2 - 0.0241071428571428*G0_2_0 - 0.0241071428571429*G0_2_1;
    A[392] = -0.144642857142857*G0_0_0 - 0.120535714285714*G0_0_2 - 0.120535714285714*G0_2_0 - 0.0964285714285716*G0_2_2;
    A[393] = 0.0241071428571427*G0_0_2 + 0.0241071428571428*G0_2_0 + 0.0482142857142855*G0_2_2;
    A[394] = -0.144642857142857*G0_1_1 - 0.120535714285714*G0_1_2 - 0.120535714285714*G0_2_1 - 0.0964285714285713*G0_2_2;
    A[395] = 0.0241071428571427*G0_1_2 + 0.0241071428571429*G0_2_1 + 0.0482142857142854*G0_2_2;
    A[396] = -0.144642857142857*G0_0_1 - 0.289285714285714*G0_0_2 - 0.144642857142857*G0_1_0 - 0.289285714285714*G0_1_2 - 0.289285714285714*G0_2_0 - 0.289285714285714*G0_2_1 - 0.578571428571428*G0_2_2;
    A[397] = 0.144642857142857*G0_0_1 + 0.289285714285714*G0_0_2 + 0.144642857142857*G0_1_0 + 0.289285714285714*G0_1_1 + 0.144642857142857*G0_1_2 + 0.289285714285714*G0_2_0 + 0.144642857142857*G0_2_1;
    A[398] = 0.289285714285714*G0_0_0 + 0.144642857142857*G0_0_1 + 0.144642857142857*G0_0_2 + 0.144642857142857*G0_1_0 + 0.289285714285714*G0_1_2 + 0.144642857142857*G0_2_0 + 0.289285714285714*G0_2_1;
    A[399] = 0.578571428571428*G0_0_0 + 0.289285714285714*G0_0_1 + 0.289285714285715*G0_0_2 + 0.289285714285714*G0_1_0 + 0.578571428571428*G0_1_1 + 0.289285714285714*G0_1_2 + 0.289285714285715*G0_2_0 + 0.289285714285714*G0_2_1 + 0.578571428571428*G0_2_2;
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class UFC_Poisson3D_3BilinearForm: public ufc::form
{
public:

  /// Constructor
  UFC_Poisson3D_3BilinearForm() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson3D_3BilinearForm()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "(dXa0/dxb0)(dXa1/dxb0) | ((d/dXa0)vi0)*((d/dXa1)vi1)*dX(0)";
  }

  /// Return the rank of the global tensor (r)
  virtual unsigned int rank() const
  {
    return 2;
  }

  /// Return the number of coefficients (n)
  virtual unsigned int num_coefficients() const
  {
    return 0;
  }

  /// Return the number of cell integrals
  virtual unsigned int num_cell_integrals() const
  {
    return 1;
  }
  
  /// Return the number of exterior facet integrals
  virtual unsigned int num_exterior_facet_integrals() const
  {
    return 0;
  }
  
  /// Return the number of interior facet integrals
  virtual unsigned int num_interior_facet_integrals() const
  {
    return 0;
  }
    
  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new UFC_Poisson3D_3BilinearForm_finite_element_0();
      break;
    case 1:
      return new UFC_Poisson3D_3BilinearForm_finite_element_1();
      break;
    }
    return 0;
  }
  
  /// Create a new dof map for argument function i
  virtual ufc::dof_map* create_dof_map(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new UFC_Poisson3D_3BilinearForm_dof_map_0();
      break;
    case 1:
      return new UFC_Poisson3D_3BilinearForm_dof_map_1();
      break;
    }
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(unsigned int i) const
  {
    return new UFC_Poisson3D_3BilinearForm_cell_integral_0();
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(unsigned int i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(unsigned int i) const
  {
    return 0;
  }

};

/// This class defines the interface for a finite element.

class UFC_Poisson3D_3LinearForm_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  UFC_Poisson3D_3LinearForm_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson3D_3LinearForm_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "Lagrange finite element of degree 3 on a tetrahedron";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 20;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Not generated (compiled with -fno-evaluate_basis)
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Not generated (compiled with -fno-evaluate_basis_derivatives)
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    double values[1];
    double coordinates[3];
    
    // Nodal coordinates on reference cell
    static double X[20][3] = {{0, 0, 0}, {1, 0, 0}, {0, 1, 0}, {0, 0, 1}, {0.666666666666667, 0.333333333333333, 0}, {0.333333333333333, 0.666666666666667, 0}, {0, 0.666666666666667, 0}, {0, 0.333333333333333, 0}, {0.333333333333333, 0, 0}, {0.666666666666667, 0, 0}, {0, 0, 0.333333333333333}, {0, 0, 0.666666666666667}, {0.666666666666667, 0, 0.333333333333333}, {0.333333333333333, 0, 0.666666666666667}, {0, 0.666666666666667, 0.333333333333333}, {0, 0.333333333333333, 0.666666666666667}, {0.333333333333333, 0.333333333333333, 0.333333333333333}, {0, 0.333333333333333, 0.333333333333333}, {0.333333333333333, 0, 0.333333333333333}, {0.333333333333333, 0.333333333333333, 0}};
    
    // Components for each dof
    static unsigned int components[20] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0] - X[i][1] - X[i][2];
    const double w1 = X[i][0];
    const double w2 = X[i][1];
    const double w3 = X[i][2];
    
    // Compute affine mapping x = F(X)
    coordinates[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0] + w3*x[3][0];
    coordinates[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1] + w3*x[3][1];
    coordinates[2] = w0*x[0][2] + w1*x[1][2] + w2*x[2][2] + w3*x[3][2];
    
    // Evaluate function at coordinates
    f.evaluate(values, coordinates, c);
    
    // Pick component for evaluation
    return values[components[i]];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate at vertices and use affine mapping
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new UFC_Poisson3D_3LinearForm_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class UFC_Poisson3D_3LinearForm_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  UFC_Poisson3D_3LinearForm_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson3D_3LinearForm_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "Lagrange finite element of degree 3 on a tetrahedron";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 20;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Not generated (compiled with -fno-evaluate_basis)
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Not generated (compiled with -fno-evaluate_basis_derivatives)
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    double values[1];
    double coordinates[3];
    
    // Nodal coordinates on reference cell
    static double X[20][3] = {{0, 0, 0}, {1, 0, 0}, {0, 1, 0}, {0, 0, 1}, {0.666666666666667, 0.333333333333333, 0}, {0.333333333333333, 0.666666666666667, 0}, {0, 0.666666666666667, 0}, {0, 0.333333333333333, 0}, {0.333333333333333, 0, 0}, {0.666666666666667, 0, 0}, {0, 0, 0.333333333333333}, {0, 0, 0.666666666666667}, {0.666666666666667, 0, 0.333333333333333}, {0.333333333333333, 0, 0.666666666666667}, {0, 0.666666666666667, 0.333333333333333}, {0, 0.333333333333333, 0.666666666666667}, {0.333333333333333, 0.333333333333333, 0.333333333333333}, {0, 0.333333333333333, 0.333333333333333}, {0.333333333333333, 0, 0.333333333333333}, {0.333333333333333, 0.333333333333333, 0}};
    
    // Components for each dof
    static unsigned int components[20] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0] - X[i][1] - X[i][2];
    const double w1 = X[i][0];
    const double w2 = X[i][1];
    const double w3 = X[i][2];
    
    // Compute affine mapping x = F(X)
    coordinates[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0] + w3*x[3][0];
    coordinates[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1] + w3*x[3][1];
    coordinates[2] = w0*x[0][2] + w1*x[1][2] + w2*x[2][2] + w3*x[3][2];
    
    // Evaluate function at coordinates
    f.evaluate(values, coordinates, c);
    
    // Pick component for evaluation
    return values[components[i]];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate at vertices and use affine mapping
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new UFC_Poisson3D_3LinearForm_finite_element_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class UFC_Poisson3D_3LinearForm_dof_map_0: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  UFC_Poisson3D_3LinearForm_dof_map_0() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~UFC_Poisson3D_3LinearForm_dof_map_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for Lagrange finite element of degree 3 on a tetrahedron";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return true;
      break;
    case 2:
      return true;
      break;
    case 3:
      return false;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = m.num_entities[0] + 2*m.num_entities[1] + m.num_entities[2];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space
  virtual unsigned int local_dimension() const
  {
    return 20;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 10;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    dofs[3] = c.entity_indices[0][3];
    unsigned int offset = m.num_entities[0];
    dofs[4] = offset + 2*c.entity_indices[1][0];
    dofs[5] = offset + 2*c.entity_indices[1][0] + 1;
    dofs[6] = offset + 2*c.entity_indices[1][1];
    dofs[7] = offset + 2*c.entity_indices[1][1] + 1;
    dofs[8] = offset + 2*c.entity_indices[1][2];
    dofs[9] = offset + 2*c.entity_indices[1][2] + 1;
    dofs[10] = offset + 2*c.entity_indices[1][3];
    dofs[11] = offset + 2*c.entity_indices[1][3] + 1;
    dofs[12] = offset + 2*c.entity_indices[1][4];
    dofs[13] = offset + 2*c.entity_indices[1][4] + 1;
    dofs[14] = offset + 2*c.entity_indices[1][5];
    dofs[15] = offset + 2*c.entity_indices[1][5] + 1;
    offset = offset + 2*m.num_entities[1];
    dofs[16] = offset + c.entity_indices[2][0];
    dofs[17] = offset + c.entity_indices[2][1];
    dofs[18] = offset + c.entity_indices[2][2];
    dofs[19] = offset + c.entity_indices[2][3];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   const ufc::mesh& m,
                                   const ufc::cell& c,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 7;
      dofs[7] = 8;
      dofs[8] = 9;
      dofs[9] = 16;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 10;
      dofs[6] = 11;
      dofs[7] = 12;
      dofs[8] = 13;
      dofs[9] = 17;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 6;
      dofs[4] = 7;
      dofs[5] = 10;
      dofs[6] = 11;
      dofs[7] = 14;
      dofs[8] = 15;
      dofs[9] = 18;
      break;
    case 3:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 8;
      dofs[4] = 9;
      dofs[5] = 12;
      dofs[6] = 13;
      dofs[7] = 14;
      dofs[8] = 15;
      dofs[9] = 19;
      break;
    }
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double **coordinates,
                                    const ufc::cell& c) const
  {
    // This function is implemented assuming affine mapping!!
    // Get cell vertices
    const double * const * x = c.coordinates;
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[0][2] = x[0][2];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[1][2] = x[1][2];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[2][2] = x[2][2];
    coordinates[3][0] = x[3][0];
    coordinates[3][1] = x[3][1];
    coordinates[3][2] = x[3][2];
    coordinates[4][0] = 0.666666666666667*x[1][0] + 0.333333333333333*x[2][0];
    coordinates[4][1] = 0.666666666666667*x[1][1] + 0.333333333333333*x[2][1];
    coordinates[4][2] = 0.666666666666667*x[1][2] + 0.333333333333333*x[2][2];
    coordinates[5][0] = 0.333333333333333*x[1][0] + 0.666666666666667*x[2][0];
    coordinates[5][1] = 0.333333333333333*x[1][1] + 0.666666666666667*x[2][1];
    coordinates[5][2] = 0.333333333333333*x[1][2] + 0.666666666666667*x[2][2];
    coordinates[6][0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[2][0];
    coordinates[6][1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[2][1];
    coordinates[6][2] = 0.333333333333333*x[0][2] + 0.666666666666667*x[2][2];
    coordinates[7][0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[2][0];
    coordinates[7][1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[2][1];
    coordinates[7][2] = 0.666666666666667*x[0][2] + 0.333333333333333*x[2][2];
    coordinates[8][0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[1][0];
    coordinates[8][1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[1][1];
    coordinates[8][2] = 0.666666666666667*x[0][2] + 0.333333333333333*x[1][2];
    coordinates[9][0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[1][0];
    coordinates[9][1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[1][1];
    coordinates[9][2] = 0.333333333333333*x[0][2] + 0.666666666666667*x[1][2];
    coordinates[10][0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[3][0];
    coordinates[10][1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[3][1];
    coordinates[10][2] = 0.666666666666667*x[0][2] + 0.333333333333333*x[3][2];
    coordinates[11][0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[3][0];
    coordinates[11][1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[3][1];
    coordinates[11][2] = 0.333333333333333*x[0][2] + 0.666666666666667*x[3][2];
    coordinates[12][0] = 0.666666666666667*x[1][0] + 0.333333333333333*x[3][0];
    coordinates[12][1] = 0.666666666666667*x[1][1] + 0.333333333333333*x[3][1];
    coordinates[12][2] = 0.666666666666667*x[1][2] + 0.333333333333333*x[3][2];
    coordinates[13][0] = 0.333333333333333*x[1][0] + 0.666666666666667*x[3][0];
    coordinates[13][1] = 0.333333333333333*x[1][1] + 0.666666666666667*x[3][1];
    coordinates[13][2] = 0.333333333333333*x[1][2] + 0.666666666666667*x[3][2];
    coordinates[14][0] = 0.666666666666667*x[2][0] + 0.333333333333333*x[3][0];
    coordinates[14][1] = 0.666666666666667*x[2][1] + 0.333333333333333*x[3][1];
    coordinates[14][2] = 0.666666666666667*x[2][2] + 0.333333333333333*x[3][2];
    coordinates[15][0] = 0.333333333333333*x[2][0] + 0.666666666666667*x[3][0];
    coordinates[15][1] = 0.333333333333333*x[2][1] + 0.666666666666667*x[3][1];
    coordinates[15][2] = 0.333333333333333*x[2][2] + 0.666666666666667*x[3][2];
    coordinates[16][0] = 0.333333333333333*x[1][0] + 0.333333333333333*x[2][0] + 0.333333333333333*x[3][0];
    coordinates[16][1] = 0.333333333333333*x[1][1] + 0.333333333333333*x[2][1] + 0.333333333333333*x[3][1];
    coordinates[16][2] = 0.333333333333333*x[1][2] + 0.333333333333333*x[2][2] + 0.333333333333333*x[3][2];
    coordinates[17][0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[2][0] + 0.333333333333333*x[3][0];
    coordinates[17][1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[2][1] + 0.333333333333333*x[3][1];
    coordinates[17][2] = 0.333333333333333*x[0][2] + 0.333333333333333*x[2][2] + 0.333333333333333*x[3][2];
    coordinates[18][0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[1][0] + 0.333333333333333*x[3][0];
    coordinates[18][1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[1][1] + 0.333333333333333*x[3][1];
    coordinates[18][2] = 0.333333333333333*x[0][2] + 0.333333333333333*x[1][2] + 0.333333333333333*x[3][2];
    coordinates[19][0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[1][0] + 0.333333333333333*x[2][0];
    coordinates[19][1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[1][1] + 0.333333333333333*x[2][1];
    coordinates[19][2] = 0.333333333333333*x[0][2] + 0.333333333333333*x[1][2] + 0.333333333333333*x[2][2];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new UFC_Poisson3D_3LinearForm_dof_map_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class UFC_Poisson3D_3LinearForm_dof_map_1: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  UFC_Poisson3D_3LinearForm_dof_map_1() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~UFC_Poisson3D_3LinearForm_dof_map_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for Lagrange finite element of degree 3 on a tetrahedron";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return true;
      break;
    case 2:
      return true;
      break;
    case 3:
      return false;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = m.num_entities[0] + 2*m.num_entities[1] + m.num_entities[2];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space
  virtual unsigned int local_dimension() const
  {
    return 20;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 10;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    dofs[3] = c.entity_indices[0][3];
    unsigned int offset = m.num_entities[0];
    dofs[4] = offset + 2*c.entity_indices[1][0];
    dofs[5] = offset + 2*c.entity_indices[1][0] + 1;
    dofs[6] = offset + 2*c.entity_indices[1][1];
    dofs[7] = offset + 2*c.entity_indices[1][1] + 1;
    dofs[8] = offset + 2*c.entity_indices[1][2];
    dofs[9] = offset + 2*c.entity_indices[1][2] + 1;
    dofs[10] = offset + 2*c.entity_indices[1][3];
    dofs[11] = offset + 2*c.entity_indices[1][3] + 1;
    dofs[12] = offset + 2*c.entity_indices[1][4];
    dofs[13] = offset + 2*c.entity_indices[1][4] + 1;
    dofs[14] = offset + 2*c.entity_indices[1][5];
    dofs[15] = offset + 2*c.entity_indices[1][5] + 1;
    offset = offset + 2*m.num_entities[1];
    dofs[16] = offset + c.entity_indices[2][0];
    dofs[17] = offset + c.entity_indices[2][1];
    dofs[18] = offset + c.entity_indices[2][2];
    dofs[19] = offset + c.entity_indices[2][3];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   const ufc::mesh& m,
                                   const ufc::cell& c,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 7;
      dofs[7] = 8;
      dofs[8] = 9;
      dofs[9] = 16;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 10;
      dofs[6] = 11;
      dofs[7] = 12;
      dofs[8] = 13;
      dofs[9] = 17;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 6;
      dofs[4] = 7;
      dofs[5] = 10;
      dofs[6] = 11;
      dofs[7] = 14;
      dofs[8] = 15;
      dofs[9] = 18;
      break;
    case 3:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 8;
      dofs[4] = 9;
      dofs[5] = 12;
      dofs[6] = 13;
      dofs[7] = 14;
      dofs[8] = 15;
      dofs[9] = 19;
      break;
    }
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double **coordinates,
                                    const ufc::cell& c) const
  {
    // This function is implemented assuming affine mapping!!
    // Get cell vertices
    const double * const * x = c.coordinates;
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[0][2] = x[0][2];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[1][2] = x[1][2];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[2][2] = x[2][2];
    coordinates[3][0] = x[3][0];
    coordinates[3][1] = x[3][1];
    coordinates[3][2] = x[3][2];
    coordinates[4][0] = 0.666666666666667*x[1][0] + 0.333333333333333*x[2][0];
    coordinates[4][1] = 0.666666666666667*x[1][1] + 0.333333333333333*x[2][1];
    coordinates[4][2] = 0.666666666666667*x[1][2] + 0.333333333333333*x[2][2];
    coordinates[5][0] = 0.333333333333333*x[1][0] + 0.666666666666667*x[2][0];
    coordinates[5][1] = 0.333333333333333*x[1][1] + 0.666666666666667*x[2][1];
    coordinates[5][2] = 0.333333333333333*x[1][2] + 0.666666666666667*x[2][2];
    coordinates[6][0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[2][0];
    coordinates[6][1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[2][1];
    coordinates[6][2] = 0.333333333333333*x[0][2] + 0.666666666666667*x[2][2];
    coordinates[7][0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[2][0];
    coordinates[7][1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[2][1];
    coordinates[7][2] = 0.666666666666667*x[0][2] + 0.333333333333333*x[2][2];
    coordinates[8][0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[1][0];
    coordinates[8][1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[1][1];
    coordinates[8][2] = 0.666666666666667*x[0][2] + 0.333333333333333*x[1][2];
    coordinates[9][0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[1][0];
    coordinates[9][1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[1][1];
    coordinates[9][2] = 0.333333333333333*x[0][2] + 0.666666666666667*x[1][2];
    coordinates[10][0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[3][0];
    coordinates[10][1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[3][1];
    coordinates[10][2] = 0.666666666666667*x[0][2] + 0.333333333333333*x[3][2];
    coordinates[11][0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[3][0];
    coordinates[11][1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[3][1];
    coordinates[11][2] = 0.333333333333333*x[0][2] + 0.666666666666667*x[3][2];
    coordinates[12][0] = 0.666666666666667*x[1][0] + 0.333333333333333*x[3][0];
    coordinates[12][1] = 0.666666666666667*x[1][1] + 0.333333333333333*x[3][1];
    coordinates[12][2] = 0.666666666666667*x[1][2] + 0.333333333333333*x[3][2];
    coordinates[13][0] = 0.333333333333333*x[1][0] + 0.666666666666667*x[3][0];
    coordinates[13][1] = 0.333333333333333*x[1][1] + 0.666666666666667*x[3][1];
    coordinates[13][2] = 0.333333333333333*x[1][2] + 0.666666666666667*x[3][2];
    coordinates[14][0] = 0.666666666666667*x[2][0] + 0.333333333333333*x[3][0];
    coordinates[14][1] = 0.666666666666667*x[2][1] + 0.333333333333333*x[3][1];
    coordinates[14][2] = 0.666666666666667*x[2][2] + 0.333333333333333*x[3][2];
    coordinates[15][0] = 0.333333333333333*x[2][0] + 0.666666666666667*x[3][0];
    coordinates[15][1] = 0.333333333333333*x[2][1] + 0.666666666666667*x[3][1];
    coordinates[15][2] = 0.333333333333333*x[2][2] + 0.666666666666667*x[3][2];
    coordinates[16][0] = 0.333333333333333*x[1][0] + 0.333333333333333*x[2][0] + 0.333333333333333*x[3][0];
    coordinates[16][1] = 0.333333333333333*x[1][1] + 0.333333333333333*x[2][1] + 0.333333333333333*x[3][1];
    coordinates[16][2] = 0.333333333333333*x[1][2] + 0.333333333333333*x[2][2] + 0.333333333333333*x[3][2];
    coordinates[17][0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[2][0] + 0.333333333333333*x[3][0];
    coordinates[17][1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[2][1] + 0.333333333333333*x[3][1];
    coordinates[17][2] = 0.333333333333333*x[0][2] + 0.333333333333333*x[2][2] + 0.333333333333333*x[3][2];
    coordinates[18][0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[1][0] + 0.333333333333333*x[3][0];
    coordinates[18][1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[1][1] + 0.333333333333333*x[3][1];
    coordinates[18][2] = 0.333333333333333*x[0][2] + 0.333333333333333*x[1][2] + 0.333333333333333*x[3][2];
    coordinates[19][0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[1][0] + 0.333333333333333*x[2][0];
    coordinates[19][1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[1][1] + 0.333333333333333*x[2][1];
    coordinates[19][2] = 0.333333333333333*x[0][2] + 0.333333333333333*x[1][2] + 0.333333333333333*x[2][2];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new UFC_Poisson3D_3LinearForm_dof_map_1();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class UFC_Poisson3D_3LinearForm_cell_integral_0: public ufc::cell_integral
{
public:

  /// Constructor
  UFC_Poisson3D_3LinearForm_cell_integral_0() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson3D_3LinearForm_cell_integral_0()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
      
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    
    const double d_10 = J_02*J_21 - J_01*J_22;
    
    const double d_20 = J_01*J_12 - J_02*J_11;
      
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
      
    // Compute inverse of Jacobian
    
    // Take absolute value of determinant
    detJ = std::abs(detJ);
    
    // Set scale factor
    const double det = detJ;
    
    // Compute coefficients
    const double c0_0_0_0 = w[0][0];
    const double c0_0_0_1 = w[0][1];
    const double c0_0_0_2 = w[0][2];
    const double c0_0_0_3 = w[0][3];
    const double c0_0_0_4 = w[0][4];
    const double c0_0_0_5 = w[0][5];
    const double c0_0_0_6 = w[0][6];
    const double c0_0_0_7 = w[0][7];
    const double c0_0_0_8 = w[0][8];
    const double c0_0_0_9 = w[0][9];
    const double c0_0_0_10 = w[0][10];
    const double c0_0_0_11 = w[0][11];
    const double c0_0_0_12 = w[0][12];
    const double c0_0_0_13 = w[0][13];
    const double c0_0_0_14 = w[0][14];
    const double c0_0_0_15 = w[0][15];
    const double c0_0_0_16 = w[0][16];
    const double c0_0_0_17 = w[0][17];
    const double c0_0_0_18 = w[0][18];
    const double c0_0_0_19 = w[0][19];
    
    // Compute geometry tensors
    const double G0_0 = det*c0_0_0_0;
    const double G0_1 = det*c0_0_0_1;
    const double G0_2 = det*c0_0_0_2;
    const double G0_3 = det*c0_0_0_3;
    const double G0_4 = det*c0_0_0_4;
    const double G0_5 = det*c0_0_0_5;
    const double G0_6 = det*c0_0_0_6;
    const double G0_7 = det*c0_0_0_7;
    const double G0_8 = det*c0_0_0_8;
    const double G0_9 = det*c0_0_0_9;
    const double G0_10 = det*c0_0_0_10;
    const double G0_11 = det*c0_0_0_11;
    const double G0_12 = det*c0_0_0_12;
    const double G0_13 = det*c0_0_0_13;
    const double G0_14 = det*c0_0_0_14;
    const double G0_15 = det*c0_0_0_15;
    const double G0_16 = det*c0_0_0_16;
    const double G0_17 = det*c0_0_0_17;
    const double G0_18 = det*c0_0_0_18;
    const double G0_19 = det*c0_0_0_19;
    
    // Compute element tensor
    A[0] = 0.000595238095238094*G0_0 + 7.44047619047618e-05*G0_1 + 7.44047619047618e-05*G0_2 + 7.44047619047617e-05*G0_3 + 0.000111607142857143*G0_4 + 0.000111607142857142*G0_5 + 0.000223214285714285*G0_6 - 0.000446428571428571*G0_7 - 0.000446428571428571*G0_8 + 0.000223214285714286*G0_9 - 0.000446428571428571*G0_10 + 0.000223214285714286*G0_11 + 0.000111607142857143*G0_12 + 0.000111607142857143*G0_13 + 0.000111607142857143*G0_14 + 0.000111607142857143*G0_15 + 0.00133928571428571*G0_16 + 0.000669642857142857*G0_17 + 0.000669642857142857*G0_18 + 0.000669642857142856*G0_19;
    A[1] = 7.44047619047618e-05*G0_0 + 0.000595238095238094*G0_1 + 7.44047619047617e-05*G0_2 + 7.44047619047617e-05*G0_3 - 0.000446428571428572*G0_4 + 0.000223214285714286*G0_5 + 0.000111607142857142*G0_6 + 0.000111607142857142*G0_7 + 0.000223214285714286*G0_8 - 0.000446428571428571*G0_9 + 0.000111607142857142*G0_10 + 0.000111607142857143*G0_11 - 0.000446428571428571*G0_12 + 0.000223214285714286*G0_13 + 0.000111607142857143*G0_14 + 0.000111607142857143*G0_15 + 0.000669642857142858*G0_16 + 0.00133928571428571*G0_17 + 0.000669642857142857*G0_18 + 0.000669642857142856*G0_19;
    A[2] = 7.44047619047618e-05*G0_0 + 7.44047619047617e-05*G0_1 + 0.000595238095238095*G0_2 + 7.44047619047617e-05*G0_3 + 0.000223214285714285*G0_4 - 0.000446428571428571*G0_5 - 0.000446428571428571*G0_6 + 0.000223214285714285*G0_7 + 0.000111607142857142*G0_8 + 0.000111607142857143*G0_9 + 0.000111607142857143*G0_10 + 0.000111607142857143*G0_11 + 0.000111607142857142*G0_12 + 0.000111607142857143*G0_13 - 0.000446428571428571*G0_14 + 0.000223214285714286*G0_15 + 0.000669642857142857*G0_16 + 0.000669642857142856*G0_17 + 0.00133928571428571*G0_18 + 0.000669642857142857*G0_19;
    A[3] = 7.44047619047617e-05*G0_0 + 7.44047619047617e-05*G0_1 + 7.44047619047617e-05*G0_2 + 0.000595238095238095*G0_3 + 0.000111607142857142*G0_4 + 0.000111607142857143*G0_5 + 0.000111607142857143*G0_6 + 0.000111607142857143*G0_7 + 0.000111607142857143*G0_8 + 0.000111607142857143*G0_9 + 0.000223214285714285*G0_10 - 0.00044642857142857*G0_11 + 0.000223214285714285*G0_12 - 0.00044642857142857*G0_13 + 0.000223214285714285*G0_14 - 0.00044642857142857*G0_15 + 0.000669642857142855*G0_16 + 0.000669642857142855*G0_17 + 0.000669642857142856*G0_18 + 0.00133928571428571*G0_19;
    A[4] = 0.000111607142857143*G0_0 - 0.000446428571428572*G0_1 + 0.000223214285714285*G0_2 + 0.000111607142857142*G0_3 + 0.00401785714285713*G0_4 - 0.00200892857142857*G0_5 - 0.00100446428571428*G0_6 - 0.00100446428571428*G0_8 + 0.00200892857142857*G0_9 + 0.00200892857142857*G0_12 - 0.00100446428571428*G0_13 - 0.00100446428571428*G0_14 - 0.00200892857142857*G0_17;
    A[5] = 0.000111607142857142*G0_0 + 0.000223214285714286*G0_1 - 0.000446428571428571*G0_2 + 0.000111607142857143*G0_3 - 0.00200892857142857*G0_4 + 0.00401785714285714*G0_5 + 0.00200892857142857*G0_6 - 0.00100446428571428*G0_7 - 0.00100446428571428*G0_9 - 0.00100446428571428*G0_12 + 0.00200892857142857*G0_14 - 0.00100446428571428*G0_15 - 0.00200892857142857*G0_18;
    A[6] = 0.000223214285714285*G0_0 + 0.000111607142857142*G0_1 - 0.000446428571428571*G0_2 + 0.000111607142857143*G0_3 - 0.00100446428571428*G0_4 + 0.00200892857142857*G0_5 + 0.00401785714285713*G0_6 - 0.00200892857142857*G0_7 - 0.00100446428571428*G0_8 - 0.00100446428571428*G0_10 + 0.00200892857142857*G0_14 - 0.00100446428571428*G0_15 - 0.00200892857142857*G0_18;
    A[7] = -0.000446428571428571*G0_0 + 0.000111607142857142*G0_1 + 0.000223214285714285*G0_2 + 0.000111607142857143*G0_3 - 0.00100446428571428*G0_5 - 0.00200892857142857*G0_6 + 0.00401785714285713*G0_7 + 0.00200892857142857*G0_8 - 0.00100446428571428*G0_9 + 0.00200892857142857*G0_10 - 0.00100446428571428*G0_11 - 0.00100446428571428*G0_14 - 0.00200892857142857*G0_16;
    A[8] = -0.000446428571428571*G0_0 + 0.000223214285714286*G0_1 + 0.000111607142857142*G0_2 + 0.000111607142857143*G0_3 - 0.00100446428571428*G0_4 - 0.00100446428571428*G0_6 + 0.00200892857142857*G0_7 + 0.00401785714285713*G0_8 - 0.00200892857142857*G0_9 + 0.00200892857142857*G0_10 - 0.00100446428571428*G0_11 - 0.00100446428571428*G0_12 - 0.00200892857142857*G0_16;
    A[9] = 0.000223214285714286*G0_0 - 0.000446428571428571*G0_1 + 0.000111607142857143*G0_2 + 0.000111607142857143*G0_3 + 0.00200892857142857*G0_4 - 0.00100446428571428*G0_5 - 0.00100446428571428*G0_7 - 0.00200892857142857*G0_8 + 0.00401785714285714*G0_9 - 0.00100446428571428*G0_10 + 0.00200892857142857*G0_12 - 0.00100446428571428*G0_13 - 0.00200892857142857*G0_17;
    A[10] = -0.000446428571428571*G0_0 + 0.000111607142857142*G0_1 + 0.000111607142857143*G0_2 + 0.000223214285714285*G0_3 - 0.00100446428571428*G0_6 + 0.00200892857142857*G0_7 + 0.00200892857142857*G0_8 - 0.00100446428571428*G0_9 + 0.00401785714285714*G0_10 - 0.00200892857142857*G0_11 - 0.00100446428571429*G0_13 - 0.00100446428571428*G0_15 - 0.00200892857142857*G0_16;
    A[11] = 0.000223214285714286*G0_0 + 0.000111607142857143*G0_1 + 0.000111607142857143*G0_2 - 0.00044642857142857*G0_3 - 0.00100446428571428*G0_7 - 0.00100446428571428*G0_8 - 0.00200892857142857*G0_10 + 0.00401785714285714*G0_11 - 0.00100446428571429*G0_12 + 0.00200892857142857*G0_13 - 0.00100446428571428*G0_14 + 0.00200892857142857*G0_15 - 0.00200892857142857*G0_19;
    A[12] = 0.000111607142857143*G0_0 - 0.000446428571428571*G0_1 + 0.000111607142857142*G0_2 + 0.000223214285714285*G0_3 + 0.00200892857142856*G0_4 - 0.00100446428571428*G0_5 - 0.00100446428571428*G0_8 + 0.00200892857142857*G0_9 - 0.00100446428571429*G0_11 + 0.00401785714285713*G0_12 - 0.00200892857142857*G0_13 - 0.00100446428571429*G0_15 - 0.00200892857142857*G0_17;
    A[13] = 0.000111607142857143*G0_0 + 0.000223214285714286*G0_1 + 0.000111607142857143*G0_2 - 0.00044642857142857*G0_3 - 0.00100446428571428*G0_4 - 0.00100446428571428*G0_9 - 0.00100446428571429*G0_10 + 0.00200892857142857*G0_11 - 0.00200892857142857*G0_12 + 0.00401785714285714*G0_13 - 0.00100446428571428*G0_14 + 0.00200892857142857*G0_15 - 0.00200892857142857*G0_19;
    A[14] = 0.000111607142857143*G0_0 + 0.000111607142857143*G0_1 - 0.000446428571428571*G0_2 + 0.000223214285714285*G0_3 - 0.00100446428571428*G0_4 + 0.00200892857142857*G0_5 + 0.00200892857142857*G0_6 - 0.00100446428571428*G0_7 - 0.00100446428571428*G0_11 - 0.00100446428571428*G0_13 + 0.00401785714285714*G0_14 - 0.00200892857142857*G0_15 - 0.00200892857142857*G0_18;
    A[15] = 0.000111607142857143*G0_0 + 0.000111607142857143*G0_1 + 0.000223214285714286*G0_2 - 0.00044642857142857*G0_3 - 0.00100446428571428*G0_5 - 0.00100446428571428*G0_6 - 0.00100446428571428*G0_10 + 0.00200892857142857*G0_11 - 0.00100446428571429*G0_12 + 0.00200892857142857*G0_13 - 0.00200892857142857*G0_14 + 0.00401785714285714*G0_15 - 0.00200892857142857*G0_19;
    A[16] = 0.00133928571428571*G0_0 + 0.000669642857142857*G0_1 + 0.000669642857142857*G0_2 + 0.000669642857142855*G0_3 - 0.00200892857142857*G0_7 - 0.00200892857142857*G0_8 - 0.00200892857142857*G0_10 + 0.0160714285714286*G0_16 + 0.00803571428571429*G0_17 + 0.00803571428571429*G0_18 + 0.00803571428571428*G0_19;
    A[17] = 0.000669642857142857*G0_0 + 0.00133928571428571*G0_1 + 0.000669642857142856*G0_2 + 0.000669642857142855*G0_3 - 0.00200892857142857*G0_4 - 0.00200892857142857*G0_9 - 0.00200892857142857*G0_12 + 0.00803571428571429*G0_16 + 0.0160714285714286*G0_17 + 0.00803571428571429*G0_18 + 0.00803571428571427*G0_19;
    A[18] = 0.000669642857142857*G0_0 + 0.000669642857142857*G0_1 + 0.00133928571428571*G0_2 + 0.000669642857142855*G0_3 - 0.00200892857142857*G0_5 - 0.00200892857142857*G0_6 - 0.00200892857142857*G0_14 + 0.00803571428571429*G0_16 + 0.00803571428571429*G0_17 + 0.0160714285714286*G0_18 + 0.00803571428571428*G0_19;
    A[19] = 0.000669642857142856*G0_0 + 0.000669642857142856*G0_1 + 0.000669642857142856*G0_2 + 0.00133928571428571*G0_3 - 0.00200892857142857*G0_11 - 0.00200892857142857*G0_13 - 0.00200892857142857*G0_15 + 0.00803571428571428*G0_16 + 0.00803571428571427*G0_17 + 0.00803571428571428*G0_18 + 0.0160714285714285*G0_19;
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class UFC_Poisson3D_3LinearForm: public ufc::form
{
public:

  /// Constructor
  UFC_Poisson3D_3LinearForm() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson3D_3LinearForm()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "w0_a0 | vi0*va0*dX(0)";
  }

  /// Return the rank of the global tensor (r)
  virtual unsigned int rank() const
  {
    return 1;
  }

  /// Return the number of coefficients (n)
  virtual unsigned int num_coefficients() const
  {
    return 1;
  }

  /// Return the number of cell integrals
  virtual unsigned int num_cell_integrals() const
  {
    return 1;
  }
  
  /// Return the number of exterior facet integrals
  virtual unsigned int num_exterior_facet_integrals() const
  {
    return 0;
  }
  
  /// Return the number of interior facet integrals
  virtual unsigned int num_interior_facet_integrals() const
  {
    return 0;
  }
    
  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new UFC_Poisson3D_3LinearForm_finite_element_0();
      break;
    case 1:
      return new UFC_Poisson3D_3LinearForm_finite_element_1();
      break;
    }
    return 0;
  }
  
  /// Create a new dof map for argument function i
  virtual ufc::dof_map* create_dof_map(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new UFC_Poisson3D_3LinearForm_dof_map_0();
      break;
    case 1:
      return new UFC_Poisson3D_3LinearForm_dof_map_1();
      break;
    }
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(unsigned int i) const
  {
    return new UFC_Poisson3D_3LinearForm_cell_integral_0();
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(unsigned int i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(unsigned int i) const
  {
    return 0;
  }

};

// DOLFIN wrappers

#include <dolfin/Form.h>

class Poisson3D_3BilinearForm : public dolfin::Form
{
public:

  Poisson3D_3BilinearForm() : dolfin::Form()
  {
    // Do nothing
  }

  /// Return UFC form
  virtual const ufc::form& form() const
  {
    return __form;
  }
  
  /// Return array of coefficients
  virtual const dolfin::Array<dolfin::Function*>& coefficients() const
  {
    return __coefficients;
  }

private:

  // UFC form
  UFC_Poisson3D_3BilinearForm __form;

  /// Array of coefficients
  dolfin::Array<dolfin::Function*> __coefficients;

};

class Poisson3D_3LinearForm : public dolfin::Form
{
public:

  Poisson3D_3LinearForm(dolfin::Function& w0) : dolfin::Form()
  {
    __coefficients.push_back(&w0);
  }

  /// Return UFC form
  virtual const ufc::form& form() const
  {
    return __form;
  }
  
  /// Return array of coefficients
  virtual const dolfin::Array<dolfin::Function*>& coefficients() const
  {
    return __coefficients;
  }

private:

  // UFC form
  UFC_Poisson3D_3LinearForm __form;

  /// Array of coefficients
  dolfin::Array<dolfin::Function*> __coefficients;

};

#endif
