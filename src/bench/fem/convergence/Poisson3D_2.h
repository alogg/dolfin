// This code conforms with the UFC specification version 1.0
// and was automatically generated by FFC version 0.3.5.
//
// Warning: This code was generated with the option '-l dolfin'
// and contains DOLFIN-specific wrappers that depend on DOLFIN.

#ifndef __POISSON3D_2_H
#define __POISSON3D_2_H

#include <cmath>
#include <stdexcept>
#include <ufc.h>

/// This class defines the interface for a finite element.

class UFC_Poisson3D_2BilinearForm_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  UFC_Poisson3D_2BilinearForm_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson3D_2BilinearForm_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "Lagrange finite element of degree 2 on a tetrahedron";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 10;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Not generated (compiled with -fno-evaluate_basis)
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Not generated (compiled with -fno-evaluate_basis_derivatives)
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    double values[1];
    double coordinates[3];
    
    // Nodal coordinates on reference cell
    static double X[10][3] = {{0, 0, 0}, {1, 0, 0}, {0, 1, 0}, {0, 0, 1}, {0.5, 0.5, 0}, {0, 0.5, 0}, {0.5, 0, 0}, {0, 0, 0.5}, {0.5, 0, 0.5}, {0, 0.5, 0.5}};
    
    // Components for each dof
    static unsigned int components[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0] - X[i][1] - X[i][2];
    const double w1 = X[i][0];
    const double w2 = X[i][1];
    const double w3 = X[i][2];
    
    // Compute affine mapping x = F(X)
    coordinates[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0] + w3*x[3][0];
    coordinates[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1] + w3*x[3][1];
    coordinates[2] = w0*x[0][2] + w1*x[1][2] + w2*x[2][2] + w3*x[3][2];
    
    // Evaluate function at coordinates
    f.evaluate(values, coordinates, c);
    
    // Pick component for evaluation
    return values[components[i]];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate at vertices and use affine mapping
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new UFC_Poisson3D_2BilinearForm_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class UFC_Poisson3D_2BilinearForm_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  UFC_Poisson3D_2BilinearForm_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson3D_2BilinearForm_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "Lagrange finite element of degree 2 on a tetrahedron";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 10;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Not generated (compiled with -fno-evaluate_basis)
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Not generated (compiled with -fno-evaluate_basis_derivatives)
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    double values[1];
    double coordinates[3];
    
    // Nodal coordinates on reference cell
    static double X[10][3] = {{0, 0, 0}, {1, 0, 0}, {0, 1, 0}, {0, 0, 1}, {0.5, 0.5, 0}, {0, 0.5, 0}, {0.5, 0, 0}, {0, 0, 0.5}, {0.5, 0, 0.5}, {0, 0.5, 0.5}};
    
    // Components for each dof
    static unsigned int components[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0] - X[i][1] - X[i][2];
    const double w1 = X[i][0];
    const double w2 = X[i][1];
    const double w3 = X[i][2];
    
    // Compute affine mapping x = F(X)
    coordinates[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0] + w3*x[3][0];
    coordinates[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1] + w3*x[3][1];
    coordinates[2] = w0*x[0][2] + w1*x[1][2] + w2*x[2][2] + w3*x[3][2];
    
    // Evaluate function at coordinates
    f.evaluate(values, coordinates, c);
    
    // Pick component for evaluation
    return values[components[i]];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate at vertices and use affine mapping
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new UFC_Poisson3D_2BilinearForm_finite_element_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class UFC_Poisson3D_2BilinearForm_dof_map_0: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  UFC_Poisson3D_2BilinearForm_dof_map_0() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~UFC_Poisson3D_2BilinearForm_dof_map_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for Lagrange finite element of degree 2 on a tetrahedron";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return true;
      break;
    case 2:
      return false;
      break;
    case 3:
      return false;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = m.num_entities[0] + m.num_entities[1];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space
  virtual unsigned int local_dimension() const
  {
    return 10;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 6;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    dofs[3] = c.entity_indices[0][3];
    unsigned int offset = m.num_entities[0];
    dofs[4] = offset + c.entity_indices[1][0];
    dofs[5] = offset + c.entity_indices[1][1];
    dofs[6] = offset + c.entity_indices[1][2];
    dofs[7] = offset + c.entity_indices[1][3];
    dofs[8] = offset + c.entity_indices[1][4];
    dofs[9] = offset + c.entity_indices[1][5];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   const ufc::mesh& m,
                                   const ufc::cell& c,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 7;
      dofs[5] = 8;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 5;
      dofs[4] = 7;
      dofs[5] = 9;
      break;
    case 3:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 6;
      dofs[4] = 8;
      dofs[5] = 9;
      break;
    }
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double **coordinates,
                                    const ufc::cell& c) const
  {
    // This function is implemented assuming affine mapping!!
    // Get cell vertices
    const double * const * x = c.coordinates;
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[0][2] = x[0][2];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[1][2] = x[1][2];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[2][2] = x[2][2];
    coordinates[3][0] = x[3][0];
    coordinates[3][1] = x[3][1];
    coordinates[3][2] = x[3][2];
    coordinates[4][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[4][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[4][2] = 0.5*x[1][2] + 0.5*x[2][2];
    coordinates[5][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[5][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[5][2] = 0.5*x[0][2] + 0.5*x[2][2];
    coordinates[6][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[6][1] = 0.5*x[0][1] + 0.5*x[1][1];
    coordinates[6][2] = 0.5*x[0][2] + 0.5*x[1][2];
    coordinates[7][0] = 0.5*x[0][0] + 0.5*x[3][0];
    coordinates[7][1] = 0.5*x[0][1] + 0.5*x[3][1];
    coordinates[7][2] = 0.5*x[0][2] + 0.5*x[3][2];
    coordinates[8][0] = 0.5*x[1][0] + 0.5*x[3][0];
    coordinates[8][1] = 0.5*x[1][1] + 0.5*x[3][1];
    coordinates[8][2] = 0.5*x[1][2] + 0.5*x[3][2];
    coordinates[9][0] = 0.5*x[2][0] + 0.5*x[3][0];
    coordinates[9][1] = 0.5*x[2][1] + 0.5*x[3][1];
    coordinates[9][2] = 0.5*x[2][2] + 0.5*x[3][2];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new UFC_Poisson3D_2BilinearForm_dof_map_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class UFC_Poisson3D_2BilinearForm_dof_map_1: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  UFC_Poisson3D_2BilinearForm_dof_map_1() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~UFC_Poisson3D_2BilinearForm_dof_map_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for Lagrange finite element of degree 2 on a tetrahedron";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return true;
      break;
    case 2:
      return false;
      break;
    case 3:
      return false;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = m.num_entities[0] + m.num_entities[1];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space
  virtual unsigned int local_dimension() const
  {
    return 10;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 6;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    dofs[3] = c.entity_indices[0][3];
    unsigned int offset = m.num_entities[0];
    dofs[4] = offset + c.entity_indices[1][0];
    dofs[5] = offset + c.entity_indices[1][1];
    dofs[6] = offset + c.entity_indices[1][2];
    dofs[7] = offset + c.entity_indices[1][3];
    dofs[8] = offset + c.entity_indices[1][4];
    dofs[9] = offset + c.entity_indices[1][5];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   const ufc::mesh& m,
                                   const ufc::cell& c,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 7;
      dofs[5] = 8;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 5;
      dofs[4] = 7;
      dofs[5] = 9;
      break;
    case 3:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 6;
      dofs[4] = 8;
      dofs[5] = 9;
      break;
    }
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double **coordinates,
                                    const ufc::cell& c) const
  {
    // This function is implemented assuming affine mapping!!
    // Get cell vertices
    const double * const * x = c.coordinates;
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[0][2] = x[0][2];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[1][2] = x[1][2];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[2][2] = x[2][2];
    coordinates[3][0] = x[3][0];
    coordinates[3][1] = x[3][1];
    coordinates[3][2] = x[3][2];
    coordinates[4][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[4][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[4][2] = 0.5*x[1][2] + 0.5*x[2][2];
    coordinates[5][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[5][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[5][2] = 0.5*x[0][2] + 0.5*x[2][2];
    coordinates[6][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[6][1] = 0.5*x[0][1] + 0.5*x[1][1];
    coordinates[6][2] = 0.5*x[0][2] + 0.5*x[1][2];
    coordinates[7][0] = 0.5*x[0][0] + 0.5*x[3][0];
    coordinates[7][1] = 0.5*x[0][1] + 0.5*x[3][1];
    coordinates[7][2] = 0.5*x[0][2] + 0.5*x[3][2];
    coordinates[8][0] = 0.5*x[1][0] + 0.5*x[3][0];
    coordinates[8][1] = 0.5*x[1][1] + 0.5*x[3][1];
    coordinates[8][2] = 0.5*x[1][2] + 0.5*x[3][2];
    coordinates[9][0] = 0.5*x[2][0] + 0.5*x[3][0];
    coordinates[9][1] = 0.5*x[2][1] + 0.5*x[3][1];
    coordinates[9][2] = 0.5*x[2][2] + 0.5*x[3][2];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new UFC_Poisson3D_2BilinearForm_dof_map_1();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class UFC_Poisson3D_2BilinearForm_cell_integral_0: public ufc::cell_integral
{
public:

  /// Constructor
  UFC_Poisson3D_2BilinearForm_cell_integral_0() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson3D_2BilinearForm_cell_integral_0()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
      
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
      
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
      
    // Compute inverse of Jacobian
    const double Jinv_00 = d_00 / detJ;
    const double Jinv_01 = d_10 / detJ;
    const double Jinv_02 = d_20 / detJ;
    const double Jinv_10 = d_01 / detJ;
    const double Jinv_11 = d_11 / detJ;
    const double Jinv_12 = d_21 / detJ;
    const double Jinv_20 = d_02 / detJ;
    const double Jinv_21 = d_12 / detJ;
    const double Jinv_22 = d_22 / detJ;
    
    // Take absolute value of determinant
    detJ = std::abs(detJ);
    
    // Set scale factor
    const double det = detJ;
    
    // Compute geometry tensors
    const double G0_0_0 = det*(Jinv_00*Jinv_00 + Jinv_01*Jinv_01 + Jinv_02*Jinv_02);
    const double G0_0_1 = det*(Jinv_00*Jinv_10 + Jinv_01*Jinv_11 + Jinv_02*Jinv_12);
    const double G0_0_2 = det*(Jinv_00*Jinv_20 + Jinv_01*Jinv_21 + Jinv_02*Jinv_22);
    const double G0_1_0 = det*(Jinv_10*Jinv_00 + Jinv_11*Jinv_01 + Jinv_12*Jinv_02);
    const double G0_1_1 = det*(Jinv_10*Jinv_10 + Jinv_11*Jinv_11 + Jinv_12*Jinv_12);
    const double G0_1_2 = det*(Jinv_10*Jinv_20 + Jinv_11*Jinv_21 + Jinv_12*Jinv_22);
    const double G0_2_0 = det*(Jinv_20*Jinv_00 + Jinv_21*Jinv_01 + Jinv_22*Jinv_02);
    const double G0_2_1 = det*(Jinv_20*Jinv_10 + Jinv_21*Jinv_11 + Jinv_22*Jinv_12);
    const double G0_2_2 = det*(Jinv_20*Jinv_20 + Jinv_21*Jinv_21 + Jinv_22*Jinv_22);
    
    // Compute element tensor
    A[0] = 0.0999999999999998*G0_0_0 + 0.0999999999999998*G0_0_1 + 0.0999999999999998*G0_0_2 + 0.0999999999999998*G0_1_0 + 0.0999999999999997*G0_1_1 + 0.0999999999999998*G0_1_2 + 0.0999999999999998*G0_2_0 + 0.0999999999999997*G0_2_1 + 0.0999999999999998*G0_2_2;
    A[1] = 0.0333333333333333*G0_0_0 + 0.0333333333333333*G0_1_0 + 0.0333333333333333*G0_2_0;
    A[2] = 0.0333333333333332*G0_0_1 + 0.0333333333333332*G0_1_1 + 0.0333333333333332*G0_2_1;
    A[3] = 0.0333333333333332*G0_0_2 + 0.0333333333333332*G0_1_2 + 0.0333333333333332*G0_2_2;
    A[4] = 0.0333333333333333*G0_0_0 + 0.0333333333333333*G0_0_1 + 0.0333333333333332*G0_1_0 + 0.0333333333333333*G0_1_1 + 0.0333333333333332*G0_2_0 + 0.0333333333333333*G0_2_1;
    A[5] = -0.0333333333333333*G0_0_0 - 0.133333333333333*G0_0_1 - 0.0333333333333333*G0_0_2 - 0.0333333333333333*G0_1_0 - 0.133333333333333*G0_1_1 - 0.0333333333333333*G0_1_2 - 0.0333333333333333*G0_2_0 - 0.133333333333333*G0_2_1 - 0.0333333333333333*G0_2_2;
    A[6] = -0.133333333333333*G0_0_0 - 0.0333333333333333*G0_0_1 - 0.0333333333333333*G0_0_2 - 0.133333333333333*G0_1_0 - 0.0333333333333332*G0_1_1 - 0.0333333333333333*G0_1_2 - 0.133333333333333*G0_2_0 - 0.0333333333333333*G0_2_1 - 0.0333333333333333*G0_2_2;
    A[7] = -0.0333333333333333*G0_0_0 - 0.0333333333333333*G0_0_1 - 0.133333333333333*G0_0_2 - 0.0333333333333332*G0_1_0 - 0.0333333333333332*G0_1_1 - 0.133333333333333*G0_1_2 - 0.0333333333333332*G0_2_0 - 0.0333333333333332*G0_2_1 - 0.133333333333333*G0_2_2;
    A[8] = 0.0333333333333332*G0_0_0 + 0.0333333333333333*G0_0_2 + 0.0333333333333332*G0_1_0 + 0.0333333333333333*G0_1_2 + 0.0333333333333332*G0_2_0 + 0.0333333333333333*G0_2_2;
    A[9] = 0.0333333333333332*G0_0_1 + 0.0333333333333333*G0_0_2 + 0.0333333333333332*G0_1_1 + 0.0333333333333333*G0_1_2 + 0.0333333333333332*G0_2_1 + 0.0333333333333333*G0_2_2;
    A[10] = 0.0333333333333333*G0_0_0 + 0.0333333333333333*G0_0_1 + 0.0333333333333333*G0_0_2;
    A[11] = 0.0999999999999998*G0_0_0;
    A[12] = -0.0333333333333332*G0_0_1;
    A[13] = -0.0333333333333332*G0_0_2;
    A[14] = -0.0333333333333332*G0_0_0 + 0.0999999999999997*G0_0_1;
    A[15] = 0.0333333333333332*G0_0_0 + 0.0333333333333332*G0_0_2;
    A[16] = -0.133333333333333*G0_0_0 - 0.0999999999999997*G0_0_1 - 0.0999999999999997*G0_0_2;
    A[17] = 0.0333333333333333*G0_0_0 + 0.0333333333333333*G0_0_1;
    A[18] = -0.0333333333333333*G0_0_0 + 0.0999999999999998*G0_0_2;
    A[19] = -0.0333333333333333*G0_0_1 - 0.0333333333333332*G0_0_2;
    A[20] = 0.0333333333333332*G0_1_0 + 0.0333333333333332*G0_1_1 + 0.0333333333333332*G0_1_2;
    A[21] = -0.0333333333333332*G0_1_0;
    A[22] = 0.0999999999999997*G0_1_1;
    A[23] = -0.0333333333333332*G0_1_2;
    A[24] = 0.0999999999999997*G0_1_0 - 0.0333333333333332*G0_1_1;
    A[25] = -0.0999999999999997*G0_1_0 - 0.133333333333333*G0_1_1 - 0.0999999999999997*G0_1_2;
    A[26] = 0.0333333333333332*G0_1_1 + 0.0333333333333332*G0_1_2;
    A[27] = 0.0333333333333332*G0_1_0 + 0.0333333333333332*G0_1_1;
    A[28] = -0.0333333333333332*G0_1_0 - 0.0333333333333332*G0_1_2;
    A[29] = -0.0333333333333332*G0_1_1 + 0.0999999999999997*G0_1_2;
    A[30] = 0.0333333333333332*G0_2_0 + 0.0333333333333332*G0_2_1 + 0.0333333333333332*G0_2_2;
    A[31] = -0.0333333333333332*G0_2_0;
    A[32] = -0.0333333333333332*G0_2_1;
    A[33] = 0.0999999999999997*G0_2_2;
    A[34] = -0.0333333333333332*G0_2_0 - 0.0333333333333332*G0_2_1;
    A[35] = 0.0333333333333332*G0_2_0 + 0.0333333333333332*G0_2_2;
    A[36] = 0.0333333333333332*G0_2_1 + 0.0333333333333332*G0_2_2;
    A[37] = -0.0999999999999998*G0_2_0 - 0.0999999999999998*G0_2_1 - 0.133333333333333*G0_2_2;
    A[38] = 0.0999999999999998*G0_2_0 - 0.0333333333333332*G0_2_2;
    A[39] = 0.0999999999999998*G0_2_1 - 0.0333333333333332*G0_2_2;
    A[40] = 0.0333333333333333*G0_0_0 + 0.0333333333333332*G0_0_1 + 0.0333333333333332*G0_0_2 + 0.0333333333333333*G0_1_0 + 0.0333333333333333*G0_1_1 + 0.0333333333333333*G0_1_2;
    A[41] = -0.0333333333333332*G0_0_0 + 0.0999999999999997*G0_1_0;
    A[42] = 0.0999999999999997*G0_0_1 - 0.0333333333333332*G0_1_1;
    A[43] = -0.0333333333333332*G0_0_2 - 0.0333333333333332*G0_1_2;
    A[44] = 0.266666666666666*G0_0_0 + 0.133333333333333*G0_0_1 + 0.133333333333333*G0_1_0 + 0.266666666666666*G0_1_1;
    A[45] = -0.266666666666666*G0_0_0 - 0.133333333333333*G0_0_1 - 0.266666666666666*G0_0_2 - 0.133333333333333*G0_1_0 - 0.133333333333333*G0_1_2;
    A[46] = -0.133333333333333*G0_0_1 - 0.133333333333333*G0_0_2 - 0.133333333333333*G0_1_0 - 0.266666666666666*G0_1_1 - 0.266666666666666*G0_1_2;
    A[47] = -0.133333333333333*G0_0_0 - 0.133333333333333*G0_0_1 - 0.133333333333333*G0_1_0 - 0.133333333333333*G0_1_1;
    A[48] = 0.133333333333333*G0_0_0 + 0.133333333333333*G0_0_2 + 0.133333333333333*G0_1_0 + 0.266666666666666*G0_1_2;
    A[49] = 0.133333333333333*G0_0_1 + 0.266666666666666*G0_0_2 + 0.133333333333333*G0_1_1 + 0.133333333333333*G0_1_2;
    A[50] = -0.0333333333333333*G0_0_0 - 0.0333333333333333*G0_0_1 - 0.0333333333333333*G0_0_2 - 0.133333333333333*G0_1_0 - 0.133333333333333*G0_1_1 - 0.133333333333333*G0_1_2 - 0.0333333333333333*G0_2_0 - 0.0333333333333333*G0_2_1 - 0.0333333333333333*G0_2_2;
    A[51] = 0.0333333333333332*G0_0_0 + 0.0333333333333332*G0_2_0;
    A[52] = -0.0999999999999997*G0_0_1 - 0.133333333333333*G0_1_1 - 0.0999999999999997*G0_2_1;
    A[53] = 0.0333333333333332*G0_0_2 + 0.0333333333333332*G0_2_2;
    A[54] = -0.266666666666666*G0_0_0 - 0.133333333333333*G0_0_1 - 0.133333333333333*G0_1_0 - 0.266666666666666*G0_2_0 - 0.133333333333333*G0_2_1;
    A[55] = 0.266666666666666*G0_0_0 + 0.133333333333333*G0_0_1 + 0.266666666666666*G0_0_2 + 0.133333333333333*G0_1_0 + 0.266666666666666*G0_1_1 + 0.133333333333333*G0_1_2 + 0.266666666666666*G0_2_0 + 0.133333333333333*G0_2_1 + 0.266666666666666*G0_2_2;
    A[56] = 0.133333333333333*G0_0_1 + 0.133333333333333*G0_0_2 + 0.133333333333333*G0_1_0 + 0.133333333333333*G0_2_1 + 0.133333333333333*G0_2_2;
    A[57] = 0.133333333333333*G0_0_0 + 0.133333333333333*G0_0_1 + 0.133333333333333*G0_1_2 + 0.133333333333333*G0_2_0 + 0.133333333333333*G0_2_1;
    A[58] = -0.133333333333333*G0_0_0 - 0.133333333333333*G0_0_2 - 0.133333333333333*G0_2_0 - 0.133333333333333*G0_2_2;
    A[59] = -0.133333333333333*G0_0_1 - 0.266666666666666*G0_0_2 - 0.133333333333333*G0_1_2 - 0.133333333333333*G0_2_1 - 0.266666666666666*G0_2_2;
    A[60] = -0.133333333333333*G0_0_0 - 0.133333333333333*G0_0_1 - 0.133333333333333*G0_0_2 - 0.0333333333333333*G0_1_0 - 0.0333333333333332*G0_1_1 - 0.0333333333333333*G0_1_2 - 0.0333333333333333*G0_2_0 - 0.0333333333333333*G0_2_1 - 0.0333333333333333*G0_2_2;
    A[61] = -0.133333333333333*G0_0_0 - 0.0999999999999997*G0_1_0 - 0.0999999999999997*G0_2_0;
    A[62] = 0.0333333333333332*G0_1_1 + 0.0333333333333332*G0_2_1;
    A[63] = 0.0333333333333332*G0_1_2 + 0.0333333333333332*G0_2_2;
    A[64] = -0.133333333333333*G0_0_1 - 0.133333333333333*G0_1_0 - 0.266666666666666*G0_1_1 - 0.133333333333333*G0_2_0 - 0.266666666666666*G0_2_1;
    A[65] = 0.133333333333333*G0_0_1 + 0.133333333333333*G0_1_0 + 0.133333333333333*G0_1_2 + 0.133333333333333*G0_2_0 + 0.133333333333333*G0_2_2;
    A[66] = 0.266666666666666*G0_0_0 + 0.133333333333333*G0_0_1 + 0.133333333333333*G0_0_2 + 0.133333333333333*G0_1_0 + 0.266666666666666*G0_1_1 + 0.266666666666666*G0_1_2 + 0.133333333333333*G0_2_0 + 0.266666666666666*G0_2_1 + 0.266666666666666*G0_2_2;
    A[67] = 0.133333333333333*G0_0_2 + 0.133333333333333*G0_1_0 + 0.133333333333333*G0_1_1 + 0.133333333333333*G0_2_0 + 0.133333333333333*G0_2_1;
    A[68] = -0.133333333333333*G0_0_2 - 0.133333333333333*G0_1_0 - 0.266666666666666*G0_1_2 - 0.133333333333333*G0_2_0 - 0.266666666666666*G0_2_2;
    A[69] = -0.133333333333333*G0_1_1 - 0.133333333333333*G0_1_2 - 0.133333333333333*G0_2_1 - 0.133333333333333*G0_2_2;
    A[70] = -0.0333333333333333*G0_0_0 - 0.0333333333333332*G0_0_1 - 0.0333333333333332*G0_0_2 - 0.0333333333333332*G0_1_0 - 0.0333333333333332*G0_1_1 - 0.0333333333333332*G0_1_2 - 0.133333333333333*G0_2_0 - 0.133333333333333*G0_2_1 - 0.133333333333333*G0_2_2;
    A[71] = 0.0333333333333333*G0_0_0 + 0.0333333333333333*G0_1_0;
    A[72] = 0.0333333333333332*G0_0_1 + 0.0333333333333332*G0_1_1;
    A[73] = -0.0999999999999998*G0_0_2 - 0.0999999999999998*G0_1_2 - 0.133333333333333*G0_2_2;
    A[74] = -0.133333333333333*G0_0_0 - 0.133333333333333*G0_0_1 - 0.133333333333333*G0_1_0 - 0.133333333333333*G0_1_1;
    A[75] = 0.133333333333333*G0_0_0 + 0.133333333333333*G0_0_2 + 0.133333333333333*G0_1_0 + 0.133333333333333*G0_1_2 + 0.133333333333333*G0_2_1;
    A[76] = 0.133333333333333*G0_0_1 + 0.133333333333333*G0_0_2 + 0.133333333333333*G0_1_1 + 0.133333333333333*G0_1_2 + 0.133333333333333*G0_2_0;
    A[77] = 0.266666666666666*G0_0_0 + 0.266666666666666*G0_0_1 + 0.133333333333333*G0_0_2 + 0.266666666666666*G0_1_0 + 0.266666666666666*G0_1_1 + 0.133333333333333*G0_1_2 + 0.133333333333333*G0_2_0 + 0.133333333333333*G0_2_1 + 0.266666666666666*G0_2_2;
    A[78] = -0.266666666666666*G0_0_0 - 0.133333333333333*G0_0_2 - 0.266666666666666*G0_1_0 - 0.133333333333333*G0_1_2 - 0.133333333333333*G0_2_0;
    A[79] = -0.266666666666666*G0_0_1 - 0.133333333333333*G0_0_2 - 0.266666666666666*G0_1_1 - 0.133333333333333*G0_1_2 - 0.133333333333333*G0_2_1;
    A[80] = 0.0333333333333332*G0_0_0 + 0.0333333333333332*G0_0_1 + 0.0333333333333332*G0_0_2 + 0.0333333333333333*G0_2_0 + 0.0333333333333333*G0_2_1 + 0.0333333333333333*G0_2_2;
    A[81] = -0.0333333333333333*G0_0_0 + 0.0999999999999998*G0_2_0;
    A[82] = -0.0333333333333332*G0_0_1 - 0.0333333333333332*G0_2_1;
    A[83] = 0.0999999999999998*G0_0_2 - 0.0333333333333332*G0_2_2;
    A[84] = 0.133333333333333*G0_0_0 + 0.133333333333333*G0_0_1 + 0.133333333333333*G0_2_0 + 0.266666666666666*G0_2_1;
    A[85] = -0.133333333333333*G0_0_0 - 0.133333333333333*G0_0_2 - 0.133333333333333*G0_2_0 - 0.133333333333333*G0_2_2;
    A[86] = -0.133333333333333*G0_0_1 - 0.133333333333333*G0_0_2 - 0.133333333333333*G0_2_0 - 0.266666666666666*G0_2_1 - 0.266666666666666*G0_2_2;
    A[87] = -0.266666666666666*G0_0_0 - 0.266666666666666*G0_0_1 - 0.133333333333333*G0_0_2 - 0.133333333333333*G0_2_0 - 0.133333333333333*G0_2_1;
    A[88] = 0.266666666666666*G0_0_0 + 0.133333333333333*G0_0_2 + 0.133333333333333*G0_2_0 + 0.266666666666666*G0_2_2;
    A[89] = 0.266666666666666*G0_0_1 + 0.133333333333333*G0_0_2 + 0.133333333333333*G0_2_1 + 0.133333333333333*G0_2_2;
    A[90] = 0.0333333333333332*G0_1_0 + 0.0333333333333332*G0_1_1 + 0.0333333333333332*G0_1_2 + 0.0333333333333333*G0_2_0 + 0.0333333333333333*G0_2_1 + 0.0333333333333333*G0_2_2;
    A[91] = -0.0333333333333333*G0_1_0 - 0.0333333333333332*G0_2_0;
    A[92] = -0.0333333333333332*G0_1_1 + 0.0999999999999997*G0_2_1;
    A[93] = 0.0999999999999997*G0_1_2 - 0.0333333333333332*G0_2_2;
    A[94] = 0.133333333333333*G0_1_0 + 0.133333333333333*G0_1_1 + 0.266666666666666*G0_2_0 + 0.133333333333333*G0_2_1;
    A[95] = -0.133333333333333*G0_1_0 - 0.133333333333333*G0_1_2 - 0.266666666666666*G0_2_0 - 0.133333333333333*G0_2_1 - 0.266666666666666*G0_2_2;
    A[96] = -0.133333333333333*G0_1_1 - 0.133333333333333*G0_1_2 - 0.133333333333333*G0_2_1 - 0.133333333333333*G0_2_2;
    A[97] = -0.266666666666666*G0_1_0 - 0.266666666666666*G0_1_1 - 0.133333333333333*G0_1_2 - 0.133333333333333*G0_2_0 - 0.133333333333333*G0_2_1;
    A[98] = 0.266666666666666*G0_1_0 + 0.133333333333333*G0_1_2 + 0.133333333333333*G0_2_0 + 0.133333333333333*G0_2_2;
    A[99] = 0.266666666666666*G0_1_1 + 0.133333333333333*G0_1_2 + 0.133333333333333*G0_2_1 + 0.266666666666666*G0_2_2;
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class UFC_Poisson3D_2BilinearForm: public ufc::form
{
public:

  /// Constructor
  UFC_Poisson3D_2BilinearForm() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson3D_2BilinearForm()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "(dXa0/dxb0)(dXa1/dxb0) | ((d/dXa0)vi0)*((d/dXa1)vi1)*dX(0)";
  }

  /// Return the rank of the global tensor (r)
  virtual unsigned int rank() const
  {
    return 2;
  }

  /// Return the number of coefficients (n)
  virtual unsigned int num_coefficients() const
  {
    return 0;
  }

  /// Return the number of cell integrals
  virtual unsigned int num_cell_integrals() const
  {
    return 1;
  }
  
  /// Return the number of exterior facet integrals
  virtual unsigned int num_exterior_facet_integrals() const
  {
    return 0;
  }
  
  /// Return the number of interior facet integrals
  virtual unsigned int num_interior_facet_integrals() const
  {
    return 0;
  }
    
  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new UFC_Poisson3D_2BilinearForm_finite_element_0();
      break;
    case 1:
      return new UFC_Poisson3D_2BilinearForm_finite_element_1();
      break;
    }
    return 0;
  }
  
  /// Create a new dof map for argument function i
  virtual ufc::dof_map* create_dof_map(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new UFC_Poisson3D_2BilinearForm_dof_map_0();
      break;
    case 1:
      return new UFC_Poisson3D_2BilinearForm_dof_map_1();
      break;
    }
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(unsigned int i) const
  {
    return new UFC_Poisson3D_2BilinearForm_cell_integral_0();
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(unsigned int i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(unsigned int i) const
  {
    return 0;
  }

};

/// This class defines the interface for a finite element.

class UFC_Poisson3D_2LinearForm_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  UFC_Poisson3D_2LinearForm_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson3D_2LinearForm_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "Lagrange finite element of degree 2 on a tetrahedron";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 10;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Not generated (compiled with -fno-evaluate_basis)
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Not generated (compiled with -fno-evaluate_basis_derivatives)
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    double values[1];
    double coordinates[3];
    
    // Nodal coordinates on reference cell
    static double X[10][3] = {{0, 0, 0}, {1, 0, 0}, {0, 1, 0}, {0, 0, 1}, {0.5, 0.5, 0}, {0, 0.5, 0}, {0.5, 0, 0}, {0, 0, 0.5}, {0.5, 0, 0.5}, {0, 0.5, 0.5}};
    
    // Components for each dof
    static unsigned int components[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0] - X[i][1] - X[i][2];
    const double w1 = X[i][0];
    const double w2 = X[i][1];
    const double w3 = X[i][2];
    
    // Compute affine mapping x = F(X)
    coordinates[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0] + w3*x[3][0];
    coordinates[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1] + w3*x[3][1];
    coordinates[2] = w0*x[0][2] + w1*x[1][2] + w2*x[2][2] + w3*x[3][2];
    
    // Evaluate function at coordinates
    f.evaluate(values, coordinates, c);
    
    // Pick component for evaluation
    return values[components[i]];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate at vertices and use affine mapping
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new UFC_Poisson3D_2LinearForm_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class UFC_Poisson3D_2LinearForm_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  UFC_Poisson3D_2LinearForm_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson3D_2LinearForm_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "Lagrange finite element of degree 2 on a tetrahedron";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 10;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Not generated (compiled with -fno-evaluate_basis)
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Not generated (compiled with -fno-evaluate_basis_derivatives)
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    double values[1];
    double coordinates[3];
    
    // Nodal coordinates on reference cell
    static double X[10][3] = {{0, 0, 0}, {1, 0, 0}, {0, 1, 0}, {0, 0, 1}, {0.5, 0.5, 0}, {0, 0.5, 0}, {0.5, 0, 0}, {0, 0, 0.5}, {0.5, 0, 0.5}, {0, 0.5, 0.5}};
    
    // Components for each dof
    static unsigned int components[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Evaluate basis functions for affine mapping
    const double w0 = 1.0 - X[i][0] - X[i][1] - X[i][2];
    const double w1 = X[i][0];
    const double w2 = X[i][1];
    const double w3 = X[i][2];
    
    // Compute affine mapping x = F(X)
    coordinates[0] = w0*x[0][0] + w1*x[1][0] + w2*x[2][0] + w3*x[3][0];
    coordinates[1] = w0*x[0][1] + w1*x[1][1] + w2*x[2][1] + w3*x[3][1];
    coordinates[2] = w0*x[0][2] + w1*x[1][2] + w2*x[2][2] + w3*x[3][2];
    
    // Evaluate function at coordinates
    f.evaluate(values, coordinates, c);
    
    // Pick component for evaluation
    return values[components[i]];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate at vertices and use affine mapping
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 1;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return new UFC_Poisson3D_2LinearForm_finite_element_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class UFC_Poisson3D_2LinearForm_dof_map_0: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  UFC_Poisson3D_2LinearForm_dof_map_0() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~UFC_Poisson3D_2LinearForm_dof_map_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for Lagrange finite element of degree 2 on a tetrahedron";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return true;
      break;
    case 2:
      return false;
      break;
    case 3:
      return false;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = m.num_entities[0] + m.num_entities[1];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space
  virtual unsigned int local_dimension() const
  {
    return 10;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 6;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    dofs[3] = c.entity_indices[0][3];
    unsigned int offset = m.num_entities[0];
    dofs[4] = offset + c.entity_indices[1][0];
    dofs[5] = offset + c.entity_indices[1][1];
    dofs[6] = offset + c.entity_indices[1][2];
    dofs[7] = offset + c.entity_indices[1][3];
    dofs[8] = offset + c.entity_indices[1][4];
    dofs[9] = offset + c.entity_indices[1][5];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   const ufc::mesh& m,
                                   const ufc::cell& c,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 7;
      dofs[5] = 8;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 5;
      dofs[4] = 7;
      dofs[5] = 9;
      break;
    case 3:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 6;
      dofs[4] = 8;
      dofs[5] = 9;
      break;
    }
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double **coordinates,
                                    const ufc::cell& c) const
  {
    // This function is implemented assuming affine mapping!!
    // Get cell vertices
    const double * const * x = c.coordinates;
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[0][2] = x[0][2];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[1][2] = x[1][2];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[2][2] = x[2][2];
    coordinates[3][0] = x[3][0];
    coordinates[3][1] = x[3][1];
    coordinates[3][2] = x[3][2];
    coordinates[4][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[4][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[4][2] = 0.5*x[1][2] + 0.5*x[2][2];
    coordinates[5][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[5][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[5][2] = 0.5*x[0][2] + 0.5*x[2][2];
    coordinates[6][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[6][1] = 0.5*x[0][1] + 0.5*x[1][1];
    coordinates[6][2] = 0.5*x[0][2] + 0.5*x[1][2];
    coordinates[7][0] = 0.5*x[0][0] + 0.5*x[3][0];
    coordinates[7][1] = 0.5*x[0][1] + 0.5*x[3][1];
    coordinates[7][2] = 0.5*x[0][2] + 0.5*x[3][2];
    coordinates[8][0] = 0.5*x[1][0] + 0.5*x[3][0];
    coordinates[8][1] = 0.5*x[1][1] + 0.5*x[3][1];
    coordinates[8][2] = 0.5*x[1][2] + 0.5*x[3][2];
    coordinates[9][0] = 0.5*x[2][0] + 0.5*x[3][0];
    coordinates[9][1] = 0.5*x[2][1] + 0.5*x[3][1];
    coordinates[9][2] = 0.5*x[2][2] + 0.5*x[3][2];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new UFC_Poisson3D_2LinearForm_dof_map_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class UFC_Poisson3D_2LinearForm_dof_map_1: public ufc::dof_map
{
private:

  unsigned int __global_dimension;

public:

  /// Constructor
  UFC_Poisson3D_2LinearForm_dof_map_1() : ufc::dof_map()
  {
    __global_dimension = 0;
  }

  /// Destructor
  virtual ~UFC_Poisson3D_2LinearForm_dof_map_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dof map
  virtual const char* signature() const
  {
    return "FFC dof map for Lagrange finite element of degree 2 on a tetrahedron";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch ( d )
    {
    case 0:
      return true;
      break;
    case 1:
      return true;
      break;
    case 2:
      return false;
      break;
    case 3:
      return false;
      break;
    }
    return false;
  }

  /// Initialize dof map for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    __global_dimension = m.num_entities[0] + m.num_entities[1];
    return false;
  }

  /// Initialize dof map for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dof map for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return __global_dimension;
  }

  /// Return the dimension of the local finite element function space
  virtual unsigned int local_dimension() const
  {
    return 10;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 6;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    dofs[3] = c.entity_indices[0][3];
    unsigned int offset = m.num_entities[0];
    dofs[4] = offset + c.entity_indices[1][0];
    dofs[5] = offset + c.entity_indices[1][1];
    dofs[6] = offset + c.entity_indices[1][2];
    dofs[7] = offset + c.entity_indices[1][3];
    dofs[8] = offset + c.entity_indices[1][4];
    dofs[9] = offset + c.entity_indices[1][5];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   const ufc::mesh& m,
                                   const ufc::cell& c,
                                   unsigned int facet) const
  {
    switch ( facet )
    {
    case 0:
      dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      break;
    case 1:
      dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 7;
      dofs[5] = 8;
      break;
    case 2:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 5;
      dofs[4] = 7;
      dofs[5] = 9;
      break;
    case 3:
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 6;
      dofs[4] = 8;
      dofs[5] = 9;
      break;
    }
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double **coordinates,
                                    const ufc::cell& c) const
  {
    // This function is implemented assuming affine mapping!!
    // Get cell vertices
    const double * const * x = c.coordinates;
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[0][2] = x[0][2];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[1][2] = x[1][2];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[2][2] = x[2][2];
    coordinates[3][0] = x[3][0];
    coordinates[3][1] = x[3][1];
    coordinates[3][2] = x[3][2];
    coordinates[4][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[4][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[4][2] = 0.5*x[1][2] + 0.5*x[2][2];
    coordinates[5][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[5][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[5][2] = 0.5*x[0][2] + 0.5*x[2][2];
    coordinates[6][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[6][1] = 0.5*x[0][1] + 0.5*x[1][1];
    coordinates[6][2] = 0.5*x[0][2] + 0.5*x[1][2];
    coordinates[7][0] = 0.5*x[0][0] + 0.5*x[3][0];
    coordinates[7][1] = 0.5*x[0][1] + 0.5*x[3][1];
    coordinates[7][2] = 0.5*x[0][2] + 0.5*x[3][2];
    coordinates[8][0] = 0.5*x[1][0] + 0.5*x[3][0];
    coordinates[8][1] = 0.5*x[1][1] + 0.5*x[3][1];
    coordinates[8][2] = 0.5*x[1][2] + 0.5*x[3][2];
    coordinates[9][0] = 0.5*x[2][0] + 0.5*x[3][0];
    coordinates[9][1] = 0.5*x[2][1] + 0.5*x[3][1];
    coordinates[9][2] = 0.5*x[2][2] + 0.5*x[3][2];
  }

  /// Return the number of sub dof maps (for a mixed element)
  virtual unsigned int num_sub_dof_maps() const
  {
    return 1;
  }

  /// Create a new dof_map for sub dof map i (for a mixed element)
  virtual ufc::dof_map* create_sub_dof_map(unsigned int i) const
  {
    return new UFC_Poisson3D_2LinearForm_dof_map_1();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class UFC_Poisson3D_2LinearForm_cell_integral_0: public ufc::cell_integral
{
public:

  /// Constructor
  UFC_Poisson3D_2LinearForm_cell_integral_0() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson3D_2LinearForm_cell_integral_0()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
      
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    
    const double d_10 = J_02*J_21 - J_01*J_22;
    
    const double d_20 = J_01*J_12 - J_02*J_11;
      
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
      
    // Compute inverse of Jacobian
    
    // Take absolute value of determinant
    detJ = std::abs(detJ);
    
    // Set scale factor
    const double det = detJ;
    
    // Compute coefficients
    const double c0_0_0_0 = w[0][0];
    const double c0_0_0_1 = w[0][1];
    const double c0_0_0_2 = w[0][2];
    const double c0_0_0_3 = w[0][3];
    const double c0_0_0_4 = w[0][4];
    const double c0_0_0_5 = w[0][5];
    const double c0_0_0_6 = w[0][6];
    const double c0_0_0_7 = w[0][7];
    const double c0_0_0_8 = w[0][8];
    const double c0_0_0_9 = w[0][9];
    
    // Compute geometry tensors
    const double G0_0 = det*c0_0_0_0;
    const double G0_1 = det*c0_0_0_1;
    const double G0_2 = det*c0_0_0_2;
    const double G0_3 = det*c0_0_0_3;
    const double G0_4 = det*c0_0_0_4;
    const double G0_5 = det*c0_0_0_5;
    const double G0_6 = det*c0_0_0_6;
    const double G0_7 = det*c0_0_0_7;
    const double G0_8 = det*c0_0_0_8;
    const double G0_9 = det*c0_0_0_9;
    
    // Compute element tensor
    A[0] = 0.00238095238095238*G0_0 + 0.000396825396825396*G0_1 + 0.000396825396825397*G0_2 + 0.000396825396825397*G0_3 - 0.00238095238095238*G0_4 - 0.00158730158730159*G0_5 - 0.00158730158730159*G0_6 - 0.00158730158730159*G0_7 - 0.00238095238095238*G0_8 - 0.00238095238095238*G0_9;
    A[1] = 0.000396825396825397*G0_0 + 0.00238095238095238*G0_1 + 0.000396825396825396*G0_2 + 0.000396825396825396*G0_3 - 0.00158730158730158*G0_4 - 0.00238095238095238*G0_5 - 0.00158730158730159*G0_6 - 0.00238095238095238*G0_7 - 0.00158730158730158*G0_8 - 0.00238095238095238*G0_9;
    A[2] = 0.000396825396825397*G0_0 + 0.000396825396825396*G0_1 + 0.00238095238095238*G0_2 + 0.000396825396825397*G0_3 - 0.00158730158730159*G0_4 - 0.00158730158730158*G0_5 - 0.00238095238095238*G0_6 - 0.00238095238095238*G0_7 - 0.00238095238095238*G0_8 - 0.00158730158730159*G0_9;
    A[3] = 0.000396825396825397*G0_0 + 0.000396825396825396*G0_1 + 0.000396825396825397*G0_2 + 0.00238095238095238*G0_3 - 0.00238095238095238*G0_4 - 0.00238095238095238*G0_5 - 0.00238095238095238*G0_6 - 0.00158730158730159*G0_7 - 0.00158730158730159*G0_8 - 0.00158730158730159*G0_9;
    A[4] = -0.00238095238095238*G0_0 - 0.00158730158730158*G0_1 - 0.00158730158730159*G0_2 - 0.00238095238095238*G0_3 + 0.0126984126984127*G0_4 + 0.00634920634920634*G0_5 + 0.00634920634920634*G0_6 + 0.00317460317460317*G0_7 + 0.00634920634920635*G0_8 + 0.00634920634920635*G0_9;
    A[5] = -0.00158730158730159*G0_0 - 0.00238095238095238*G0_1 - 0.00158730158730159*G0_2 - 0.00238095238095238*G0_3 + 0.00634920634920634*G0_4 + 0.0126984126984127*G0_5 + 0.00634920634920635*G0_6 + 0.00634920634920634*G0_7 + 0.00317460317460317*G0_8 + 0.00634920634920634*G0_9;
    A[6] = -0.00158730158730159*G0_0 - 0.00158730158730159*G0_1 - 0.00238095238095238*G0_2 - 0.00238095238095238*G0_3 + 0.00634920634920634*G0_4 + 0.00634920634920635*G0_5 + 0.0126984126984127*G0_6 + 0.00634920634920634*G0_7 + 0.00634920634920634*G0_8 + 0.00317460317460318*G0_9;
    A[7] = -0.00158730158730159*G0_0 - 0.00238095238095238*G0_1 - 0.00238095238095238*G0_2 - 0.00158730158730159*G0_3 + 0.00317460317460317*G0_4 + 0.00634920634920634*G0_5 + 0.00634920634920634*G0_6 + 0.0126984126984127*G0_7 + 0.00634920634920634*G0_8 + 0.00634920634920634*G0_9;
    A[8] = -0.00238095238095238*G0_0 - 0.00158730158730158*G0_1 - 0.00238095238095238*G0_2 - 0.00158730158730159*G0_3 + 0.00634920634920635*G0_4 + 0.00317460317460317*G0_5 + 0.00634920634920634*G0_6 + 0.00634920634920634*G0_7 + 0.0126984126984127*G0_8 + 0.00634920634920635*G0_9;
    A[9] = -0.00238095238095238*G0_0 - 0.00238095238095238*G0_1 - 0.00158730158730159*G0_2 - 0.00158730158730159*G0_3 + 0.00634920634920635*G0_4 + 0.00634920634920634*G0_5 + 0.00317460317460317*G0_6 + 0.00634920634920634*G0_7 + 0.00634920634920635*G0_8 + 0.0126984126984127*G0_9;
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class UFC_Poisson3D_2LinearForm: public ufc::form
{
public:

  /// Constructor
  UFC_Poisson3D_2LinearForm() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~UFC_Poisson3D_2LinearForm()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "w0_a0 | vi0*va0*dX(0)";
  }

  /// Return the rank of the global tensor (r)
  virtual unsigned int rank() const
  {
    return 1;
  }

  /// Return the number of coefficients (n)
  virtual unsigned int num_coefficients() const
  {
    return 1;
  }

  /// Return the number of cell integrals
  virtual unsigned int num_cell_integrals() const
  {
    return 1;
  }
  
  /// Return the number of exterior facet integrals
  virtual unsigned int num_exterior_facet_integrals() const
  {
    return 0;
  }
  
  /// Return the number of interior facet integrals
  virtual unsigned int num_interior_facet_integrals() const
  {
    return 0;
  }
    
  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new UFC_Poisson3D_2LinearForm_finite_element_0();
      break;
    case 1:
      return new UFC_Poisson3D_2LinearForm_finite_element_1();
      break;
    }
    return 0;
  }
  
  /// Create a new dof map for argument function i
  virtual ufc::dof_map* create_dof_map(unsigned int i) const
  {
    switch ( i )
    {
    case 0:
      return new UFC_Poisson3D_2LinearForm_dof_map_0();
      break;
    case 1:
      return new UFC_Poisson3D_2LinearForm_dof_map_1();
      break;
    }
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(unsigned int i) const
  {
    return new UFC_Poisson3D_2LinearForm_cell_integral_0();
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(unsigned int i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(unsigned int i) const
  {
    return 0;
  }

};

// DOLFIN wrappers

#include <dolfin/Form.h>

class Poisson3D_2BilinearForm : public dolfin::Form
{
public:

  Poisson3D_2BilinearForm() : dolfin::Form()
  {
    // Do nothing
  }

  /// Return UFC form
  virtual const ufc::form& form() const
  {
    return __form;
  }
  
  /// Return array of coefficients
  virtual const dolfin::Array<dolfin::Function*>& coefficients() const
  {
    return __coefficients;
  }

private:

  // UFC form
  UFC_Poisson3D_2BilinearForm __form;

  /// Array of coefficients
  dolfin::Array<dolfin::Function*> __coefficients;

};

class Poisson3D_2LinearForm : public dolfin::Form
{
public:

  Poisson3D_2LinearForm(dolfin::Function& w0) : dolfin::Form()
  {
    __coefficients.push_back(&w0);
  }

  /// Return UFC form
  virtual const ufc::form& form() const
  {
    return __form;
  }
  
  /// Return array of coefficients
  virtual const dolfin::Array<dolfin::Function*>& coefficients() const
  {
    return __coefficients;
  }

private:

  // UFC form
  UFC_Poisson3D_2LinearForm __form;

  /// Array of coefficients
  dolfin::Array<dolfin::Function*> __coefficients;

};

#endif
