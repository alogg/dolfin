// Automatically generated by FFC, the FEniCS Form Compiler, version 0.3.5.
// For further information, go to http://www/fenics.org/ffc/.
// Licensed under the GNU LGPL Version 2.1.

#ifndef __ADVECTIONOPERATOR_3D_3_FER_H
#define __ADVECTIONOPERATOR_3D_3_FER_H

#include <dolfin/Mesh.h>
#include <dolfin/Cell.h>
#include <dolfin/Point.h>
#include <dolfin/AffineMap.h>
#include <dolfin/FiniteElement.h>
#include <dolfin/FiniteElementSpec.h>
#include <dolfin/BilinearForm.h>
#include <dolfin/LinearForm.h>
#include <dolfin/Functional.h>
#include <dolfin/FEM.h>

namespace dolfin { namespace AdvectionOperator_3D_3_FER {

/// This class contains the form to be evaluated, including
/// contributions from the interior and boundary of the domain.

class BilinearForm : public dolfin::BilinearForm
{
public:

  class TestElement;

  class TrialElement;

  class FunctionElement_0;

  BilinearForm(Function& w0);
  

  bool interior_contribution() const;

  void eval(real block[], const AffineMap& map, real det) const;

  bool boundary_contribution() const;

  void eval(real block[], const AffineMap& map, real det, unsigned int facet) const;

  bool interior_boundary_contribution() const;

  void eval(real block[], const AffineMap& map0, const AffineMap& map1, real det, unsigned int facet0, unsigned int facet1, unsigned int alignment) const;

};

class BilinearForm::TestElement : public dolfin::FiniteElement
{
public:

  TestElement() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~TestElement()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 20;
  }

  inline unsigned int shapedim() const
  {
    return 3;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    static unsigned int edge_reordering_0[2][2] = {{0, 1}, {1, 0}};
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    nodes[3] = cell.entities(0)[3];
    int alignment = cell.alignment(1, 0);
    int offset = mesh.topology().size(0);
    nodes[4] = offset + 2*cell.entities(1)[0] + edge_reordering_0[alignment][0];
    nodes[5] = offset + 2*cell.entities(1)[0] + edge_reordering_0[alignment][1];
    alignment = cell.alignment(1, 1);
    nodes[6] = offset + 2*cell.entities(1)[1] + edge_reordering_0[alignment][0];
    nodes[7] = offset + 2*cell.entities(1)[1] + edge_reordering_0[alignment][1];
    alignment = cell.alignment(1, 2);
    nodes[8] = offset + 2*cell.entities(1)[2] + edge_reordering_0[alignment][0];
    nodes[9] = offset + 2*cell.entities(1)[2] + edge_reordering_0[alignment][1];
    alignment = cell.alignment(1, 3);
    nodes[10] = offset + 2*cell.entities(1)[3] + edge_reordering_0[alignment][0];
    nodes[11] = offset + 2*cell.entities(1)[3] + edge_reordering_0[alignment][1];
    alignment = cell.alignment(1, 4);
    nodes[12] = offset + 2*cell.entities(1)[4] + edge_reordering_0[alignment][0];
    nodes[13] = offset + 2*cell.entities(1)[4] + edge_reordering_0[alignment][1];
    alignment = cell.alignment(1, 5);
    nodes[14] = offset + 2*cell.entities(1)[5] + edge_reordering_0[alignment][0];
    nodes[15] = offset + 2*cell.entities(1)[5] + edge_reordering_0[alignment][1];
    offset = offset + 2*mesh.topology().size(1);
    nodes[16] = offset + cell.entities(2)[0];
    nodes[17] = offset + cell.entities(2)[1];
    nodes[18] = offset + cell.entities(2)[2];
    nodes[19] = offset + cell.entities(2)[3];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    points[4] = map(6.666666666666667e-01, 3.333333333333333e-01, 0.000000000000000e+00);
    points[5] = map(3.333333333333334e-01, 6.666666666666666e-01, 0.000000000000000e+00);
    points[6] = map(0.000000000000000e+00, 6.666666666666667e-01, 0.000000000000000e+00);
    points[7] = map(0.000000000000000e+00, 3.333333333333334e-01, 0.000000000000000e+00);
    points[8] = map(3.333333333333333e-01, 0.000000000000000e+00, 0.000000000000000e+00);
    points[9] = map(6.666666666666666e-01, 0.000000000000000e+00, 0.000000000000000e+00);
    points[10] = map(0.000000000000000e+00, 0.000000000000000e+00, 3.333333333333333e-01);
    points[11] = map(0.000000000000000e+00, 0.000000000000000e+00, 6.666666666666666e-01);
    points[12] = map(6.666666666666667e-01, 0.000000000000000e+00, 3.333333333333333e-01);
    points[13] = map(3.333333333333334e-01, 0.000000000000000e+00, 6.666666666666666e-01);
    points[14] = map(0.000000000000000e+00, 6.666666666666667e-01, 3.333333333333333e-01);
    points[15] = map(0.000000000000000e+00, 3.333333333333334e-01, 6.666666666666666e-01);
    points[16] = map(3.333333333333334e-01, 3.333333333333333e-01, 3.333333333333333e-01);
    points[17] = map(0.000000000000000e+00, 3.333333333333334e-01, 3.333333333333333e-01);
    points[18] = map(3.333333333333333e-01, 0.000000000000000e+00, 3.333333333333334e-01);
    points[19] = map(3.333333333333333e-01, 3.333333333333333e-01, 0.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 0;
    components[4] = 0;
    components[5] = 0;
    components[6] = 0;
    components[7] = 0;
    components[8] = 0;
    components[9] = 0;
    components[10] = 0;
    components[11] = 0;
    components[12] = 0;
    components[13] = 0;
    components[14] = 0;
    components[15] = 0;
    components[16] = 0;
    components[17] = 0;
    components[18] = 0;
    components[19] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "tetrahedron", 3);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class BilinearForm::TrialElement : public dolfin::FiniteElement
{
public:

  TrialElement() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~TrialElement()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 20;
  }

  inline unsigned int shapedim() const
  {
    return 3;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    static unsigned int edge_reordering_0[2][2] = {{0, 1}, {1, 0}};
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    nodes[3] = cell.entities(0)[3];
    int alignment = cell.alignment(1, 0);
    int offset = mesh.topology().size(0);
    nodes[4] = offset + 2*cell.entities(1)[0] + edge_reordering_0[alignment][0];
    nodes[5] = offset + 2*cell.entities(1)[0] + edge_reordering_0[alignment][1];
    alignment = cell.alignment(1, 1);
    nodes[6] = offset + 2*cell.entities(1)[1] + edge_reordering_0[alignment][0];
    nodes[7] = offset + 2*cell.entities(1)[1] + edge_reordering_0[alignment][1];
    alignment = cell.alignment(1, 2);
    nodes[8] = offset + 2*cell.entities(1)[2] + edge_reordering_0[alignment][0];
    nodes[9] = offset + 2*cell.entities(1)[2] + edge_reordering_0[alignment][1];
    alignment = cell.alignment(1, 3);
    nodes[10] = offset + 2*cell.entities(1)[3] + edge_reordering_0[alignment][0];
    nodes[11] = offset + 2*cell.entities(1)[3] + edge_reordering_0[alignment][1];
    alignment = cell.alignment(1, 4);
    nodes[12] = offset + 2*cell.entities(1)[4] + edge_reordering_0[alignment][0];
    nodes[13] = offset + 2*cell.entities(1)[4] + edge_reordering_0[alignment][1];
    alignment = cell.alignment(1, 5);
    nodes[14] = offset + 2*cell.entities(1)[5] + edge_reordering_0[alignment][0];
    nodes[15] = offset + 2*cell.entities(1)[5] + edge_reordering_0[alignment][1];
    offset = offset + 2*mesh.topology().size(1);
    nodes[16] = offset + cell.entities(2)[0];
    nodes[17] = offset + cell.entities(2)[1];
    nodes[18] = offset + cell.entities(2)[2];
    nodes[19] = offset + cell.entities(2)[3];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    points[4] = map(6.666666666666667e-01, 3.333333333333333e-01, 0.000000000000000e+00);
    points[5] = map(3.333333333333334e-01, 6.666666666666666e-01, 0.000000000000000e+00);
    points[6] = map(0.000000000000000e+00, 6.666666666666667e-01, 0.000000000000000e+00);
    points[7] = map(0.000000000000000e+00, 3.333333333333334e-01, 0.000000000000000e+00);
    points[8] = map(3.333333333333333e-01, 0.000000000000000e+00, 0.000000000000000e+00);
    points[9] = map(6.666666666666666e-01, 0.000000000000000e+00, 0.000000000000000e+00);
    points[10] = map(0.000000000000000e+00, 0.000000000000000e+00, 3.333333333333333e-01);
    points[11] = map(0.000000000000000e+00, 0.000000000000000e+00, 6.666666666666666e-01);
    points[12] = map(6.666666666666667e-01, 0.000000000000000e+00, 3.333333333333333e-01);
    points[13] = map(3.333333333333334e-01, 0.000000000000000e+00, 6.666666666666666e-01);
    points[14] = map(0.000000000000000e+00, 6.666666666666667e-01, 3.333333333333333e-01);
    points[15] = map(0.000000000000000e+00, 3.333333333333334e-01, 6.666666666666666e-01);
    points[16] = map(3.333333333333334e-01, 3.333333333333333e-01, 3.333333333333333e-01);
    points[17] = map(0.000000000000000e+00, 3.333333333333334e-01, 3.333333333333333e-01);
    points[18] = map(3.333333333333333e-01, 0.000000000000000e+00, 3.333333333333334e-01);
    points[19] = map(3.333333333333333e-01, 3.333333333333333e-01, 0.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 0;
    components[4] = 0;
    components[5] = 0;
    components[6] = 0;
    components[7] = 0;
    components[8] = 0;
    components[9] = 0;
    components[10] = 0;
    components[11] = 0;
    components[12] = 0;
    components[13] = 0;
    components[14] = 0;
    components[15] = 0;
    components[16] = 0;
    components[17] = 0;
    components[18] = 0;
    components[19] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "tetrahedron", 3);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

class BilinearForm::FunctionElement_0 : public dolfin::FiniteElement
{
public:

  FunctionElement_0() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    tensordims = new unsigned int [1];
    tensordims[0] = 3;

    // Element is simple, don't need to initialize subelements
  }

  ~FunctionElement_0()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 3;
  }

  inline unsigned int shapedim() const
  {
    return 3;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_assert(i < 1);
    return tensordims[i];
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 1;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    nodes[0] = cell.index();
    int offset = mesh.topology().size(3);
    nodes[1] = offset + cell.index();
    offset = offset + mesh.topology().size(3);
    nodes[2] = offset + cell.index();
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[1] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    points[2] = map(2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01);
    components[0] = 0;
    components[1] = 1;
    components[2] = 2;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
    int offset = mesh.topology().size(3);
    vertex_nodes[1] = offset + vertex;
    offset = offset + mesh.topology().size(3);
    vertex_nodes[2] = offset + vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Discontinuous vector Lagrange", "tetrahedron", 0, 3);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

BilinearForm::BilinearForm(Function& w0) : dolfin::BilinearForm(1)
{
  // Create finite element for test space
  _test = new TestElement();

  // Create finite element for trial space
  _trial = new TrialElement();

  // Add functions
  initFunction(0, w0, new FunctionElement_0());
}

// Contribution from the interior
bool BilinearForm::interior_contribution() const { return true; }

void BilinearForm::eval(real block[], const AffineMap& map, real det) const
{
  // Compute coefficients
  const real c0_0 = c[0][0];
  const real c0_1 = c[0][1];
  const real c0_2 = c[0][2];

  // Compute geometry tensors
  const real G0_0_0_0 = det*c0_0*map.g00;
  const real G0_0_0_1 = det*c0_0*map.g10;
  const real G0_0_0_2 = det*c0_0*map.g20;
  const real G0_1_1_0 = det*c0_1*map.g01;
  const real G0_1_1_1 = det*c0_1*map.g11;
  const real G0_1_1_2 = det*c0_1*map.g21;
  const real G0_2_2_0 = det*c0_2*map.g02;
  const real G0_2_2_1 = det*c0_2*map.g12;
  const real G0_2_2_2 = det*c0_2*map.g22;

  // Compute element tensor
  block[143] = 2.008928571428574e-03*G0_0_0_2 + 2.008928571428574e-03*G0_1_1_2 + 2.008928571428574e-03*G0_2_2_2;
  block[379] = 3.616071428571423e-02*G0_0_0_1 + -3.616071428571427e-02*G0_0_0_2 + 3.616071428571423e-02*G0_1_1_1 + -3.616071428571427e-02*G0_1_1_2 + 3.616071428571423e-02*G0_2_2_1 + -3.616071428571427e-02*G0_2_2_2;
  block[281] = 2.008928571428573e-03*G0_0_0_0 + 2.008928571428573e-03*G0_1_1_0 + 2.008928571428573e-03*G0_2_2_0;
  block[165] = -block[281] + -4.017857142857149e-03*G0_0_0_1 + -4.017857142857149e-03*G0_1_1_1 + -4.017857142857149e-03*G0_2_2_1;
  block[85] = block[165] + -8.035714285714278e-03*G0_0_0_0 + -8.035714285714278e-03*G0_1_1_0 + -8.035714285714278e-03*G0_2_2_0;
  block[214] = -block[143] + -4.017857142857133e-03*G0_0_0_1 + -4.017857142857133e-03*G0_1_1_1 + -4.017857142857133e-03*G0_2_2_1;
  block[235] = -5.000000000000005e+00*block[214];
  block[189] = -block[235] + -1.004464285714284e-02*G0_0_0_2 + -1.004464285714284e-02*G0_1_1_2 + -1.004464285714284e-02*G0_2_2_2;
  block[288] = -1.000000000000002e-01*block[189];
  block[180] = block[288] + 2.008928571428573e-03*G0_0_0_0 + 2.008928571428573e-03*G0_1_1_0 + 2.008928571428573e-03*G0_2_2_0;
  block[320] = -3.666666666666671e+00*block[180];
  block[14] = block[288];
  block[35] = block[288];
  block[52] = block[143] + 2.008928571428570e-03*G0_0_0_0 + 2.008928571428570e-03*G0_1_1_0 + 2.008928571428570e-03*G0_2_2_0;
  block[273] = 9.999999999999984e+00*block[52];
  block[313] = block[273] + -1.004464285714284e-02*G0_0_0_2 + -1.004464285714284e-02*G0_1_1_2 + -1.004464285714284e-02*G0_2_2_2;
  block[257] = 5.999999999999999e-01*block[313];
  block[172] = -block[313] + 1.205357142857139e-02*G0_0_0_0 + 1.205357142857139e-02*G0_1_1_0 + 1.205357142857139e-02*G0_2_2_0;
  block[248] = -block[172] + 1.004464285714286e-02*G0_0_0_1 + 1.004464285714286e-02*G0_1_1_1 + 1.004464285714286e-02*G0_2_2_1;
  block[92] = block[273] + -1.004464285714282e-02*G0_0_0_0 + -1.004464285714282e-02*G0_1_1_0 + -1.004464285714282e-02*G0_2_2_0;
  block[393] = -5.999999999999990e-01*block[92];
  block[353] = -block[393];
  block[101] = -block[281];
  block[134] = -block[189] + -1.004464285714283e-02*G0_0_0_1 + -1.004464285714283e-02*G0_1_1_1 + -1.004464285714283e-02*G0_2_2_1;
  block[398] = -block[379];
  block[155] = -1.999999999999995e-01*block[134];
  block[365] = 2.999999999999990e+00*block[165];
  block[209] = block[288] + -8.035714285714273e-03*G0_0_0_0 + -8.035714285714273e-03*G0_1_1_0 + -8.035714285714273e-03*G0_2_2_0;
  block[224] = -block[180] + 2.008928571428572e-03*G0_0_0_2 + 2.008928571428572e-03*G0_1_1_2 + 2.008928571428572e-03*G0_2_2_2;
  block[299] = 3.000000000000005e+00*block[214];
  block[247] = block[52];
  block[219] = -block[299] + 1.205357142857142e-02*G0_0_0_0 + 1.205357142857142e-02*G0_1_1_0 + 1.205357142857142e-02*G0_2_2_0;
  block[266] = block[52];
  block[5] = -block[224];
  block[20] = -4.074074074074078e-01*block[180];
  block[91] = -block[224];
  block[47] = 2.008928571428567e-03*G0_0_0_1 + 2.008928571428567e-03*G0_1_1_1 + 2.008928571428567e-03*G0_2_2_1;
  block[62] = 4.074074074074084e-01*block[47];
  block[58] = -3.666666666666672e+00*block[47];
  block[110] = -block[224];
  block[121] = block[281];
  block[381] = -2.333333333333329e+00*block[281];
  block[357] = -3.599999999999994e+01*block[281];
  block[160] = -1.999999999999997e+00*block[180];
  block[319] = 5.999999999999994e-01*block[134];
  block[377] = -3.616071428571428e-02*G0_0_0_0 + 3.616071428571423e-02*G0_0_0_1 + -3.616071428571428e-02*G0_1_1_0 + 3.616071428571423e-02*G0_1_1_1 + -3.616071428571428e-02*G0_2_2_0 + 3.616071428571423e-02*G0_2_2_1;
  block[186] = block[180] + -4.017857142857129e-03*G0_0_0_1 + -4.017857142857129e-03*G0_1_1_1 + -4.017857142857129e-03*G0_2_2_1;
  block[207] = -5.000000000000009e+00*block[186];
  block[138] = -3.000000000000012e+00*block[186];
  block[329] = -block[138] + -1.205357142857148e-02*G0_0_0_2 + -1.205357142857148e-02*G0_1_1_2 + -1.205357142857148e-02*G0_2_2_2;
  block[199] = block[138] + -1.205357142857139e-02*G0_0_0_0 + -1.205357142857139e-02*G0_1_1_0 + -1.205357142857139e-02*G0_2_2_0;
  block[346] = block[138] + 1.205357142857141e-02*G0_0_0_1 + 1.205357142857141e-02*G0_1_1_1 + 1.205357142857141e-02*G0_2_2_1;
  block[239] = -block[138] + -1.205357142857144e-02*G0_0_0_0 + -1.205357142857144e-02*G0_1_1_0 + -1.205357142857144e-02*G0_2_2_0;
  block[331] = block[239];
  block[386] = block[346];
  block[167] = block[207];
  block[205] = block[224];
  block[287] = -block[207] + 1.808035714285712e-02*G0_0_0_1 + 1.808035714285712e-02*G0_1_1_1 + 1.808035714285712e-02*G0_2_2_1;
  block[259] = -block[257];
  block[38] = -block[381] + -2.678571428571423e-03*G0_0_0_1 + -2.678571428571423e-03*G0_1_1_1 + -2.678571428571423e-03*G0_2_2_1;
  block[306] = -block[207] + 1.205357142857141e-02*G0_0_0_1 + 1.205357142857141e-02*G0_1_1_1 + 1.205357142857141e-02*G0_2_2_1;
  block[278] = block[365] + -2.410714285714284e-02*G0_0_0_2 + -2.410714285714284e-02*G0_1_1_2 + -2.410714285714284e-02*G0_2_2_2;
  block[178] = -block[278] + 1.205357142857142e-02*G0_0_0_0 + 1.205357142857142e-02*G0_1_1_0 + 1.205357142857142e-02*G0_2_2_0;
  block[9] = -block[180];
  block[64] = -block[224];
  block[322] = -2.333333333333336e+00*block[47];
  block[395] = -block[319];
  block[343] = -2.333333333333333e+00*block[143];
  block[77] = -block[343] + -2.678571428571423e-03*G0_0_0_0 + -2.678571428571423e-03*G0_1_1_0 + -2.678571428571423e-03*G0_2_2_0;
  block[368] = -block[178] + -1.205357142857143e-02*G0_0_0_1 + -1.205357142857143e-02*G0_1_1_1 + -1.205357142857143e-02*G0_2_2_1;
  block[174] = -block[288];
  block[195] = -block[288];
  block[212] = -2.000000000000003e-01*block[313];
  block[221] = block[281];
  block[197] = block[329];
  block[294] = -block[189];
  block[250] = 3.333333333333331e-01*block[219];
  block[315] = -block[189];
  block[271] = -1.666666666666666e+00*block[219];
  block[56] = -block[320] + -4.687500000000015e-03*G0_0_0_0 + -4.687500000000016e-03*G0_0_0_2 + -4.687500000000015e-03*G0_1_1_0 + -4.687500000000016e-03*G0_1_1_2 + -4.687500000000015e-03*G0_2_2_0 + -4.687500000000016e-03*G0_2_2_2;
  block[0] = -1.407407407407403e+00*block[180];
  block[33] = block[281];
  block[94] = -block[235] + 1.205357142857141e-02*G0_0_0_1 + 1.205357142857141e-02*G0_1_1_1 + 1.205357142857141e-02*G0_2_2_1;
  block[50] = block[224];
  block[115] = -block[235] + 1.808035714285712e-02*G0_0_0_1 + 1.808035714285712e-02*G0_1_1_1 + 1.808035714285712e-02*G0_2_2_1;
  block[79] = -3.666666666666655e+00*block[143];
  block[132] = -block[52];
  block[149] = block[209];
  block[363] = block[343];
  block[226] = block[186];
  block[297] = -block[257] + -2.410714285714284e-02*G0_0_0_1 + -2.410714285714284e-02*G0_1_1_1 + -2.410714285714284e-02*G0_2_2_1;
  block[241] = 1.999999999999999e+00*block[281];
  block[304] = -block[241] + -2.008928571428567e-03*G0_0_0_1 + -2.008928571428567e-03*G0_1_1_1 + -2.008928571428567e-03*G0_2_2_1;
  block[97] = -3.000000000000008e+00*block[304];
  block[384] = block[97] + 1.205357142857141e-02*G0_0_0_0 + 1.205357142857141e-02*G0_1_1_0 + 1.205357142857141e-02*G0_2_2_0;
  block[327] = block[97] + 1.205357142857145e-02*G0_0_0_2 + 1.205357142857145e-02*G0_1_1_2 + 1.205357142857145e-02*G0_2_2_2;
  block[144] = block[304];
  block[87] = 3.333333333333328e-01*block[327];
  block[106] = -1.666666666666663e+00*block[327];
  block[156] = -block[327];
  block[344] = -block[97];
  block[217] = -block[297] + 1.205357142857142e-02*G0_0_0_2 + 1.205357142857142e-02*G0_1_1_2 + 1.205357142857142e-02*G0_2_2_2;
  block[370] = -block[217] + -1.205357142857140e-02*G0_0_0_0 + -1.205357142857140e-02*G0_1_1_0 + -1.205357142857140e-02*G0_2_2_0;
  block[350] = block[370];
  block[7] = block[56] + -3.348214285714294e-03*G0_0_0_1 + -3.348214285714294e-03*G0_1_1_1 + -3.348214285714294e-03*G0_2_2_1;
  block[26] = -block[52];
  block[45] = block[38] + -3.348214285714291e-03*G0_0_0_0 + -3.348214285714291e-03*G0_1_1_0 + -3.348214285714291e-03*G0_2_2_0;
  block[108] = -block[160] + -2.008928571428563e-03*G0_0_0_0 + -2.008928571428563e-03*G0_1_1_0 + -2.008928571428563e-03*G0_2_2_0;
  block[127] = -block[160] + -1.004464285714282e-02*G0_0_0_1 + -1.004464285714282e-02*G0_1_1_1 + -1.004464285714282e-02*G0_2_2_1;
  block[99] = -block[384] + -1.205357142857147e-02*G0_0_0_2 + -1.205357142857147e-02*G0_1_1_2 + -1.205357142857147e-02*G0_2_2_2;
  block[146] = -block[207] + 1.607142857142854e-02*G0_0_0_1 + 1.607142857142854e-02*G0_1_1_1 + 1.607142857142854e-02*G0_2_2_1;
  block[118] = -block[365];
  block[383] = -block[79];
  block[162] = block[47];
  block[183] = block[143];
  block[282] = 2.000000000000003e+00*block[47];
  block[61] = 4.074074074074073e-01*block[281];
  block[333] = -block[393] + 1.205357142857146e-02*G0_0_0_2 + 1.205357142857146e-02*G0_1_1_2 + 1.205357142857146e-02*G0_2_2_2;
  block[136] = -block[138];
  block[388] = block[368];
  block[348] = -2.999999999999992e+00*block[108];
  block[375] = block[319];
  block[169] = block[248] + -2.008928571428602e-03*G0_0_0_0 + -2.008928571428602e-03*G0_1_1_0 + -2.008928571428602e-03*G0_2_2_0;
  block[184] = -4.999999999999983e+00*block[165];
  block[203] = -block[143];
  block[230] = -block[160] + -1.004464285714283e-02*G0_0_0_2 + -1.004464285714283e-02*G0_1_1_2 + -1.004464285714283e-02*G0_2_2_2;
  block[285] = -5.000000000000018e+00*block[304];
  block[264] = -block[285] + 1.205357142857143e-02*G0_0_0_0 + 1.205357142857143e-02*G0_1_1_0 + 1.205357142857143e-02*G0_2_2_0;
  block[36] = -block[320] + -4.687500000000008e-03*G0_0_0_1 + -4.687500000000009e-03*G0_0_0_2 + -4.687500000000008e-03*G0_1_1_1 + -4.687500000000009e-03*G0_1_1_2 + -4.687500000000008e-03*G0_2_2_1 + -4.687500000000009e-03*G0_2_2_2;
  block[300] = -block[180];
  block[276] = -block[365] + -1.205357142857141e-02*G0_0_0_2 + -1.205357142857141e-02*G0_1_1_2 + -1.205357142857141e-02*G0_2_2_2;
  block[11] = -block[180];
  block[66] = -block[52];
  block[30] = block[224];
  block[81] = block[241];
  block[104] = -block[241] + -1.004464285714286e-02*G0_0_0_1 + -1.004464285714286e-02*G0_1_1_1 + -1.004464285714286e-02*G0_2_2_1;
  block[324] = block[384];
  block[131] = -3.333333333333331e-01*block[239];
  block[397] = -3.616071428571422e-02*G0_0_0_0 + 3.616071428571423e-02*G0_0_0_2 + -3.616071428571422e-02*G0_1_1_0 + 3.616071428571423e-02*G0_1_1_2 + -3.616071428571422e-02*G0_2_2_0 + 3.616071428571423e-02*G0_2_2_2;
  block[341] = 3.666666666666659e+00*block[281];
  block[158] = block[327];
  block[366] = -block[138];
  block[193] = -block[52] + -8.035714285714257e-03*G0_0_0_2 + -8.035714285714257e-03*G0_1_1_2 + -8.035714285714257e-03*G0_2_2_2;
  block[210] = 9.999999999999995e+00*block[224];
  block[223] = 1.999999999999998e+00*block[143];
  block[71] = -block[223] + -1.339285714285718e-03*G0_0_0_0 + -1.339285714285716e-03*G0_0_0_1 + -1.339285714285718e-03*G0_1_1_0 + -1.339285714285716e-03*G0_1_1_1 + -1.339285714285718e-03*G0_2_2_0 + -1.339285714285716e-03*G0_2_2_1;
  block[253] = -block[223] + -1.004464285714285e-02*G0_0_0_0 + -1.004464285714285e-02*G0_1_1_0 + -1.004464285714285e-02*G0_2_2_0;
  block[292] = block[212];
  block[244] = block[184];
  block[309] = block[288];
  block[269] = block[248] + -6.026785714285717e-03*G0_0_0_0 + -6.026785714285717e-03*G0_1_1_0 + -6.026785714285717e-03*G0_2_2_0;
  block[2] = block[62];
  block[23] = 4.074074074074063e-01*block[143];
  block[88] = block[248];
  block[48] = -block[288];
  block[113] = -2.000000000000001e-01*block[92];
  block[122] = block[282];
  block[151] = block[180] + -1.004464285714285e-02*G0_0_0_2 + -1.004464285714285e-02*G0_1_1_2 + -1.004464285714285e-02*G0_2_2_2;
  block[228] = -block[151] + 1.004464285714284e-02*G0_0_0_1 + 1.004464285714284e-02*G0_1_1_1 + 1.004464285714284e-02*G0_2_2_1;
  block[361] = block[381];
  block[243] = -block[143];
  block[262] = block[47];
  block[43] = block[23];
  block[125] = block[285];
  block[140] = block[160];
  block[116] = -block[393] + -1.205357142857142e-02*G0_0_0_1 + -1.205357142857142e-02*G0_1_1_1 + -1.205357142857142e-02*G0_2_2_1;
  block[328] = -block[348];
  block[385] = -block[365] + 1.205357142857140e-02*G0_0_0_1 + 1.205357142857140e-02*G0_1_1_1 + 1.205357142857140e-02*G0_2_2_1;
  block[378] = -3.600000000000004e+01*block[47];
  block[164] = block[264];
  block[181] = block[241];
  block[206] = block[180] + -1.004464285714284e-02*G0_0_0_1 + -1.004464285714284e-02*G0_1_1_1 + -1.004464285714284e-02*G0_2_2_1;
  block[16] = -block[320];
  block[280] = -block[180];
  block[256] = -block[299] + -1.205357142857142e-02*G0_0_0_0 + -1.205357142857142e-02*G0_1_1_0 + -1.205357142857142e-02*G0_2_2_0;
  block[305] = -block[184] + 1.205357142857140e-02*G0_0_0_1 + 1.205357142857140e-02*G0_1_1_1 + 1.205357142857140e-02*G0_2_2_1;
  block[63] = 1.407407407407404e+00*block[143];
  block[84] = -block[210];
  block[335] = block[319] + 1.205357142857146e-02*G0_0_0_2 + 1.205357142857146e-02*G0_1_1_2 + 1.205357142857146e-02*G0_2_2_2;
  block[390] = -block[219];
  block[354] = -block[299] + 1.205357142857141e-02*G0_0_0_1 + 1.205357142857141e-02*G0_1_1_1 + 1.205357142857141e-02*G0_2_2_1;
  block[373] = block[333];
  block[171] = block[151];
  block[190] = -block[209] + 1.004464285714286e-02*G0_0_0_1 + 1.004464285714286e-02*G0_1_1_1 + 1.004464285714286e-02*G0_2_2_1;
  block[201] = block[281];
  block[177] = -block[348];
  block[232] = -block[143] + -1.004464285714284e-02*G0_0_0_0 + -1.004464285714284e-02*G0_1_1_0 + -1.004464285714284e-02*G0_2_2_0;
  block[255] = -block[134] + 1.205357142857141e-02*G0_0_0_2 + 1.205357142857141e-02*G0_1_1_2 + 1.205357142857141e-02*G0_2_2_2;
  block[302] = -block[47];
  block[274] = -block[143] + -1.004464285714284e-02*G0_0_0_1 + -1.004464285714284e-02*G0_1_1_1 + -1.004464285714284e-02*G0_2_2_1;
  block[13] = block[52];
  block[68] = -block[288];
  block[28] = block[281];
  block[83] = block[143];
  block[55] = block[47];
  block[102] = block[282];
  block[326] = block[138];
  block[129] = -3.333333333333341e-01*block[329];
  block[399] = -3.599999999999991e+01*block[143];
  block[152] = -block[52];
  block[364] = block[97];
  block[208] = 1.666666666666667e+00*block[329];
  block[225] = block[224];
  block[298] = -block[299];
  block[246] = block[52];
  block[218] = -block[370] + -1.205357142857140e-02*G0_0_0_1 + -1.205357142857140e-02*G0_1_1_1 + -1.205357142857140e-02*G0_2_2_1;
  block[311] = block[271];
  block[267] = block[52];
  block[4] = -block[224];
  block[21] = 1.407407407407405e+00*block[281];
  block[90] = -block[224];
  block[46] = block[214] + -1.339285714285703e-03*G0_0_0_0 + 6.696428571428667e-04*G0_0_0_2 + -1.339285714285703e-03*G0_1_1_0 + 6.696428571428667e-04*G0_1_1_2 + -1.339285714285703e-03*G0_2_2_0 + 6.696428571428667e-04*G0_2_2_2;
  block[111] = -block[224];
  block[120] = block[180];
  block[96] = block[327] + -2.410714285714288e-02*G0_0_0_0 + -2.410714285714288e-02*G0_1_1_0 + -2.410714285714288e-02*G0_2_2_0;
  block[145] = block[305];
  block[339] = block[399] + -3.616071428571430e-02*G0_0_0_0 + -3.616071428571432e-02*G0_0_0_1 + -3.616071428571430e-02*G0_1_1_0 + -3.616071428571432e-02*G0_1_1_1 + -3.616071428571430e-02*G0_2_2_0 + -3.616071428571432e-02*G0_2_2_1;
  block[358] = -block[377];
  block[316] = block[97] + -1.205357142857141e-02*G0_0_0_2 + -1.205357142857141e-02*G0_1_1_2 + -1.205357142857141e-02*G0_2_2_2;
  block[260] = -block[180];
  block[236] = -block[239];
  block[41] = block[61];
  block[142] = -block[47];
  block[330] = block[219];
  block[351] = block[239] + 1.205357142857142e-02*G0_0_0_2 + 1.205357142857142e-02*G0_1_1_2 + 1.205357142857142e-02*G0_2_2_2;
  block[166] = block[206];
  block[187] = -block[209] + 1.004464285714286e-02*G0_0_0_2 + 1.004464285714286e-02*G0_1_1_2 + 1.004464285714286e-02*G0_2_2_2;
  block[204] = block[224];
  block[229] = block[129];
  block[286] = block[106];
  block[258] = block[299] + -2.410714285714284e-02*G0_0_0_0 + -2.410714285714284e-02*G0_1_1_0 + -2.410714285714284e-02*G0_2_2_0;
  block[39] = -block[381] + -2.678571428571420e-03*G0_0_0_2 + -2.678571428571420e-03*G0_1_1_2 + -2.678571428571420e-03*G0_2_2_2;
  block[73] = block[39] + -3.348214285714273e-03*G0_0_0_0 + -3.348214285714273e-03*G0_1_1_0 + -3.348214285714273e-03*G0_2_2_0;
  block[307] = block[87];
  block[279] = -block[393];
  block[8] = block[36] + -3.348214285714289e-03*G0_0_0_0 + -3.348214285714289e-03*G0_1_1_0 + -3.348214285714289e-03*G0_2_2_0;
  block[65] = -block[224];
  block[86] = block[306];
  block[107] = block[287];
  block[321] = block[381];
  block[392] = block[257];
  block[352] = -block[257];
  block[371] = block[351];
  block[173] = block[113];
  block[188] = -block[160] + -1.004464285714285e-02*G0_0_0_0 + -1.004464285714285e-02*G0_1_1_0 + -1.004464285714285e-02*G0_2_2_0;
  block[215] = block[255];
  block[179] = -block[368] + -1.205357142857142e-02*G0_0_0_2 + -1.205357142857142e-02*G0_1_1_2 + -1.205357142857142e-02*G0_2_2_2;
  block[234] = block[274];
  block[198] = -block[138] + -2.410714285714286e-02*G0_0_0_0 + -2.410714285714286e-02*G0_1_1_0 + -2.410714285714286e-02*G0_2_2_0;
  block[289] = block[288];
  block[249] = -4.999999999999994e+00*block[108];
  block[312] = block[232];
  block[272] = -block[241] + -1.004464285714284e-02*G0_0_0_2 + -1.004464285714284e-02*G0_1_1_2 + -1.004464285714284e-02*G0_2_2_2;
  block[59] = -block[322] + -2.678571428571425e-03*G0_0_0_2 + -2.678571428571425e-03*G0_1_1_2 + -2.678571428571425e-03*G0_2_2_2;
  block[75] = block[59] + -3.348214285714289e-03*G0_0_0_1 + -3.348214285714289e-03*G0_1_1_1 + -3.348214285714289e-03*G0_2_2_1;
  block[15] = block[288];
  block[70] = block[143];
  block[34] = block[288];
  block[93] = block[193];
  block[53] = block[52];
  block[100] = -block[180];
  block[76] = -block[79] + 2.678571428571413e-03*G0_0_0_0 + 2.678571428571423e-03*G0_0_0_1 + 2.678571428571413e-03*G0_1_1_0 + 2.678571428571423e-03*G0_1_1_1 + 2.678571428571413e-03*G0_2_2_0 + 2.678571428571423e-03*G0_2_2_1;
  block[135] = block[115];
  block[345] = -block[365];
  block[154] = block[94];
  block[362] = -block[58];
  block[227] = block[187];
  block[296] = block[257] + -1.205357142857141e-02*G0_0_0_1 + -1.205357142857141e-02*G0_1_1_1 + -1.205357142857141e-02*G0_2_2_1;
  block[240] = -block[180];
  block[216] = -block[219];
  block[265] = block[165];
  block[6] = -block[180];
  block[27] = -block[52];
  block[44] = block[47];
  block[109] = block[269];
  block[126] = -block[273];
  block[98] = -block[97];
  block[147] = -block[273];
  block[119] = block[393] + -2.410714285714284e-02*G0_0_0_1 + -2.410714285714284e-02*G0_1_1_1 + -2.410714285714284e-02*G0_2_2_1;
  block[380] = 2.333333333333328e+00*block[180];
  block[17] = -block[380] + -2.678571428571429e-03*G0_0_0_0 + -2.678571428571429e-03*G0_1_1_0 + -2.678571428571429e-03*G0_2_2_0;
  block[19] = -block[380] + -2.678571428571427e-03*G0_0_0_2 + -2.678571428571427e-03*G0_1_1_2 + -2.678571428571427e-03*G0_2_2_2;
  block[18] = -block[380] + -2.678571428571430e-03*G0_0_0_1 + -2.678571428571430e-03*G0_1_1_1 + -2.678571428571430e-03*G0_2_2_1;
  block[161] = -block[281];
  block[318] = -block[319];
  block[238] = -block[138] + -2.410714285714285e-02*G0_0_0_2 + -2.410714285714285e-02*G0_1_1_2 + -2.410714285714285e-02*G0_2_2_2;
  block[332] = block[257] + 1.205357142857146e-02*G0_0_0_0 + 1.205357142857146e-02*G0_1_1_0 + 1.205357142857146e-02*G0_2_2_0;
  block[139] = block[329] + -1.205357142857138e-02*G0_0_0_1 + -1.205357142857138e-02*G0_1_1_1 + -1.205357142857138e-02*G0_2_2_1;
  block[389] = block[329] + 1.205357142857144e-02*G0_0_0_0 + 1.205357142857144e-02*G0_1_1_0 + 1.205357142857144e-02*G0_2_2_0;
  block[349] = -block[329];
  block[374] = block[299];
  block[168] = block[189];
  block[185] = -block[281] + -1.004464285714282e-02*G0_0_0_1 + -1.004464285714282e-02*G0_1_1_1 + -1.004464285714282e-02*G0_2_2_1;
  block[202] = block[47];
  block[231] = block[210];
  block[284] = -block[184] + 1.808035714285711e-02*G0_0_0_1 + 1.808035714285711e-02*G0_1_1_1 + 1.808035714285711e-02*G0_2_2_1;
  block[252] = block[273];
  block[37] = -block[341];
  block[301] = block[281];
  block[277] = block[393];
  block[10] = block[76] + -3.348214285714286e-03*G0_0_0_2 + -3.348214285714286e-03*G0_1_1_2 + -3.348214285714286e-03*G0_2_2_2;
  block[67] = -block[52];
  block[31] = block[224];
  block[80] = -block[180];
  block[105] = -block[210];
  block[323] = block[343];
  block[130] = block[190];
  block[394] = -block[299];
  block[342] = block[322];
  block[159] = -block[99] + 1.205357142857140e-02*G0_0_0_1 + 1.205357142857140e-02*G0_1_1_1 + 1.205357142857140e-02*G0_2_2_1;
  block[347] = -block[159] + -1.205357142857139e-02*G0_0_0_2 + -1.205357142857139e-02*G0_1_1_2 + -1.205357142857139e-02*G0_2_2_2;
  block[387] = block[347];
  block[157] = -block[347] + -1.205357142857141e-02*G0_0_0_0 + -1.205357142857141e-02*G0_1_1_0 + -1.205357142857141e-02*G0_2_2_0;
  block[369] = block[389];
  block[175] = -block[288];
  block[194] = -block[288];
  block[213] = -block[92] + 1.205357142857143e-02*G0_0_0_2 + 1.205357142857143e-02*G0_1_1_2 + 1.205357142857143e-02*G0_2_2_2;
  block[220] = block[180];
  block[196] = -block[329];
  block[295] = -block[223] + -1.004464285714285e-02*G0_0_0_1 + -1.004464285714285e-02*G0_1_1_1 + -1.004464285714285e-02*G0_2_2_1;
  block[314] = block[214] + -8.035714285714278e-03*G0_0_0_2 + -8.035714285714278e-03*G0_1_1_2 + -8.035714285714278e-03*G0_2_2_2;
  block[57] = -block[322] + -2.678571428571426e-03*G0_0_0_0 + -2.678571428571426e-03*G0_1_1_0 + -2.678571428571426e-03*G0_2_2_0;
  block[24] = block[57] + -3.348214285714292e-03*G0_0_0_1 + -3.348214285714292e-03*G0_1_1_1 + -3.348214285714292e-03*G0_2_2_1;
  block[1] = block[61];
  block[72] = block[143];
  block[32] = block[77] + -3.348214285714284e-03*G0_0_0_2 + -3.348214285714284e-03*G0_1_1_2 + -3.348214285714284e-03*G0_2_2_2;
  block[95] = block[155];
  block[51] = block[224];
  block[114] = block[134];
  block[78] = -block[343] + -2.678571428571427e-03*G0_0_0_1 + -2.678571428571427e-03*G0_1_1_1 + -2.678571428571427e-03*G0_2_2_1;
  block[133] = -block[52];
  block[148] = block[208];
  block[360] = block[380];
  block[336] = 3.599999999999998e+01*block[180];
  block[337] = -block[336] + 3.616071428571432e-02*G0_0_0_1 + 3.616071428571428e-02*G0_0_0_2 + 3.616071428571432e-02*G0_1_1_1 + 3.616071428571428e-02*G0_1_1_2 + 3.616071428571432e-02*G0_2_2_1 + 3.616071428571428e-02*G0_2_2_2;
  block[376] = block[336] + -3.616071428571425e-02*G0_0_0_0 + -3.616071428571428e-02*G0_0_0_2 + -3.616071428571425e-02*G0_1_1_0 + -3.616071428571428e-02*G0_1_1_2 + -3.616071428571425e-02*G0_2_2_0 + -3.616071428571428e-02*G0_2_2_2;
  block[356] = -block[337];
  block[242] = block[47];
  block[263] = block[223];
  block[25] = block[281];
  block[42] = 1.407407407407408e+00*block[47];
  block[124] = block[284];
  block[141] = block[281];
  block[117] = block[365];
  block[382] = block[322];
  block[163] = block[143];
  block[182] = block[47];
  block[283] = -block[143];
  block[60] = block[20];
  block[334] = block[354];
  block[137] = -block[329] + -2.410714285714288e-02*G0_0_0_1 + -2.410714285714288e-02*G0_1_1_1 + -2.410714285714288e-02*G0_2_2_1;
  block[391] = -block[239];
  block[355] = block[335];
  block[372] = block[332];
  block[170] = 1.666666666666665e+00*block[239];
  block[310] = -block[170] + 1.808035714285712e-02*G0_0_0_2 + 1.808035714285712e-02*G0_1_1_2 + 1.808035714285712e-02*G0_2_2_2;
  block[291] = -block[170] + 1.205357142857140e-02*G0_0_0_2 + 1.205357142857140e-02*G0_1_1_2 + 1.205357142857140e-02*G0_2_2_2;
  block[251] = block[291];
  block[270] = block[310];
  block[191] = block[131];
  block[200] = block[160];
  block[176] = block[348];
  block[233] = block[313];
  block[290] = block[250];
  block[254] = block[214];
  block[303] = block[223];
  block[275] = block[235];
  block[12] = block[52];
  block[69] = -block[288];
  block[29] = block[160] + 2.678571428571422e-03*G0_0_0_1 + 2.678571428571423e-03*G0_0_0_2 + 2.678571428571422e-03*G0_1_1_1 + 2.678571428571423e-03*G0_1_1_2 + 2.678571428571422e-03*G0_2_2_1 + 2.678571428571423e-03*G0_2_2_2;
  block[82] = -block[47];
  block[54] = block[78] + -3.348214285714286e-03*G0_0_0_2 + -3.348214285714286e-03*G0_1_1_2 + -3.348214285714286e-03*G0_2_2_2;
  block[103] = block[143];
  block[325] = block[385];
  block[128] = block[228];
  block[396] = -block[339];
  block[340] = block[380];
  block[153] = -block[52];
  block[367] = -block[327];
  block[192] = block[92];
  block[211] = -block[170] + 1.607142857142853e-02*G0_0_0_2 + 1.607142857142853e-02*G0_1_1_2 + 1.607142857142853e-02*G0_2_2_2;
  block[222] = block[47];
  block[293] = block[213];
  block[245] = block[185];
  block[308] = block[288];
  block[268] = block[108];
  block[3] = block[23];
  block[74] = block[143];
  block[22] = block[62];
  block[89] = block[249];
  block[49] = -block[288];
  block[112] = block[172];
  block[123] = block[143];
  block[150] = block[170];
  block[338] = -block[376];
  block[359] = -block[397];
  block[317] = -block[97] + -2.410714285714283e-02*G0_0_0_2 + -2.410714285714283e-02*G0_1_1_2 + -2.410714285714283e-02*G0_2_2_2;
  block[261] = -block[281];
  block[237] = block[138] + -1.205357142857139e-02*G0_0_0_2 + -1.205357142857139e-02*G0_1_1_2 + -1.205357142857139e-02*G0_2_2_2;
  block[40] = block[20];
}

// No contribution from the boundary
bool BilinearForm::boundary_contribution() const { return false; }

void BilinearForm::eval(real block[], const AffineMap& map, real det, unsigned int facet) const {}

// No contribution from interior boundaries
bool BilinearForm::interior_boundary_contribution() const { return false; }

void BilinearForm::eval(real block[], const AffineMap& map0, const AffineMap& map1, real det, unsigned int facet0, unsigned int facet1, unsigned int alignment) const {}

} }

#endif
