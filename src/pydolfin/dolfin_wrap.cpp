/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.28
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_DIRECTORS
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/***********************************************************************
 *
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 *
 ************************************************************************/

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC)
#   if (__SUNPRO_CC <= 0x560)
#     define SWIGTEMPLATEDISAMBIGUATOR template
#   else
#     define SWIGTEMPLATEDISAMBIGUATOR 
#   endif
# else
#   define SWIGTEMPLATEDISAMBIGUATOR 
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods for Windows DLLs */
#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   define SWIGEXPORT
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif


/* Python.h has to appear first */
#include <Python.h>

/***********************************************************************
 * swigrun.swg
 *
 *     This file contains generic CAPI SWIG runtime support for pointer
 *     type checking.
 *
 ************************************************************************/

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "2"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The swig conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old swig versions, you usually write code as:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit as:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   that seems to be the same, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   requires also to SWIG_ConvertPtr to return new result values, as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   swig errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()


 */
#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))


/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif




#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store inforomation on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (int)(*f1 - *f2);
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



/* Python.h has to appear first */
#include <Python.h>

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#   define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
#define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

/* Add PyObject_Del for old Pythons */
#if PY_VERSION_HEX < 0x01060000
#define PyObject_Del(op) PyMem_DEL((op))
#endif
#ifndef PyObject_DEL
#define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
#define PyExc_StopIteration PyExc_RuntimeError
#define PyObject_GenericGetAttr 0
#define Py_NotImplemented PyExc_RuntimeError
#endif


/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
#define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
#endif

#if PY_VERSION_HEX < 0x02000000
#define PySequence_Size PySequence_Length
#endif


/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);
    PyErr_Format(type, "%s %s", PyString_AsString(old_str), mesg);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_Format(PyExc_RuntimeError, mesg);
  }
}



#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;

#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif


/***********************************************************************
 * pyrun.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(ptr, type, flags)
#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule()
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         PySwigClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, (char *) msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, (char*) name, obj);
  Py_DECREF(obj);                            
}

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN int
SWIG_Python_UnpackTuple(PyObject *args, const char *name, int min, int max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    register int l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), min, l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), max, l);
      return 0;
    } else {
      register int i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue("");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}


/* PySwigClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
} PySwigClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  PySwigClientData *data = (PySwigClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  PySwigClientData *data = desc ? (PySwigClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME PySwigClientData * 
PySwigClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    PySwigClientData *data = (PySwigClientData *)malloc(sizeof(PySwigClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(obj);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
#else
      data->newraw = PyObject_GetAttrString((PyObject*)&PyBaseObject_Type, (char *)"__new__");
      Py_INCREF(data->newraw);
      data->newargs = PyTuple_New(1);
      PyTuple_SetItem(data->newargs, 0, obj);
      Py_INCREF(data->newargs);
#endif
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    return data;
  }
}

SWIGRUNTIME void 
PySwigClientData_Del(PySwigClientData* data)
{
  Py_XDECREF(data->klass);
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== PySwigObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
} PySwigObject;

SWIGRUNTIME PyObject *
PySwigObject_long(PySwigObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
PySwigObject_format(const char* fmt, PySwigObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, PySwigObject_long(v)) == 0) {
      PyObject *ofmt = PyString_FromString(fmt);
      if (ofmt) {
	res = PyString_Format(ofmt,args);
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
PySwigObject_oct(PySwigObject *v)
{
  return PySwigObject_format("%o",v);
}

SWIGRUNTIME PyObject *
PySwigObject_hex(PySwigObject *v)
{
  return PySwigObject_format("%x",v);
}

SWIGRUNTIME PyObject *
PySwigObject_repr(PySwigObject *v)
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *hex = PySwigObject_hex(v);    
  PyObject *repr = PyString_FromFormat("<Swig Object of type '%s' at 0x%s>", name, PyString_AsString(hex));
  Py_DECREF(hex);
  if (v->next) {
    PyObject *nrep = PySwigObject_repr((PySwigObject *)v->next);
    PyString_ConcatAndDel(&repr,nrep);
  }
  return repr;  
}

SWIGRUNTIME int
PySwigObject_print(PySwigObject *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  PyObject *repr = PySwigObject_repr(v);
  if (repr) {
    fputs(PyString_AsString(repr), fp);
    Py_DECREF(repr);
    return 0; 
  } else {
    return 1; 
  }
}

SWIGRUNTIME PyObject *
PySwigObject_str(PySwigObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->ty->name, sizeof(result)) ?
    PyString_FromString(result) : 0;
}

SWIGRUNTIME int
PySwigObject_compare(PySwigObject *v, PySwigObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

SWIGRUNTIME PyTypeObject* _PySwigObject_type(void);

SWIGRUNTIME PyTypeObject*
PySwigObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = _PySwigObject_type();
  return type;
}

SWIGRUNTIMEINLINE int
PySwigObject_Check(PyObject *op) {
  return ((op)->ob_type == PySwigObject_type())
    || (strcmp((op)->ob_type->tp_name,"PySwigObject") == 0);
}

SWIGRUNTIME PyObject *
PySwigObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
PySwigObject_dealloc(PyObject *v)
{
  PySwigObject *sobj = (PySwigObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own) {
    swig_type_info *ty = sobj->ty;
    PySwigClientData *data = ty ? (PySwigClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;
      if (data->delargs) {
	/* we need to create a temporal object to carry the destroy operation */
	PyObject *tmp = PySwigObject_New(sobj->ptr, ty, 0);
	res = SWIG_Python_CallFunctor(destroy, tmp);
	Py_DECREF(tmp);
      } else {
	PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
	PyObject *mself = PyCFunction_GET_SELF(destroy);
	res = ((*meth)(mself, v));
      }
      Py_XDECREF(res);
    } else {
      const char *name = SWIG_TypePrettyName(ty);
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", name);
#endif
    }
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
PySwigObject_append(PyObject* v, PyObject* next)
{
  PySwigObject *sobj = (PySwigObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!PySwigObject_Check(next)) {
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
PySwigObject_next(PyObject* v)
#else
PySwigObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  PySwigObject *sobj = (PySwigObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
PySwigObject_disown(PyObject *v)
#else
PySwigObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  PySwigObject *sobj = (PySwigObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
PySwigObject_acquire(PyObject *v)
#else
PySwigObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  PySwigObject *sobj = (PySwigObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
PySwigObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#else
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      PySwigObject *sobj = (PySwigObject *)v;
      PyObject *obj = sobj->own ? Py_True : Py_False;
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  PySwigObject_acquire(v);
	} else {
	  PySwigObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  PySwigObject_acquire(v,args);
	} else {
	  PySwigObject_disown(v,args);
	}
#endif
      } 
      Py_INCREF(obj);
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)PySwigObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)PySwigObject_acquire, METH_NOARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)PySwigObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)PySwigObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)PySwigObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)PySwigObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)PySwigObject_acquire, METH_VARARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)PySwigObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)PySwigObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)PySwigObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
PySwigObject_getattr(PySwigObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
_PySwigObject_type(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";
  
  static PyNumberMethods PySwigObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    (binaryfunc)0, /*nb_divide*/
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
    (coercion)0,   /*nb_coerce*/
    (unaryfunc)PySwigObject_long, /*nb_int*/
    (unaryfunc)PySwigObject_long, /*nb_long*/
    (unaryfunc)0,                 /*nb_float*/
    (unaryfunc)PySwigObject_oct,  /*nb_oct*/
    (unaryfunc)PySwigObject_hex,  /*nb_hex*/
#if PY_VERSION_HEX >= 0x02020000
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */ 
#elif PY_VERSION_HEX >= 0x02000000
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject pyswigobject_type;  
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp
      = {
	PyObject_HEAD_INIT(NULL)
	0,				    /* ob_size */
	(char *)"PySwigObject",		    /* tp_name */
	sizeof(PySwigObject),		    /* tp_basicsize */
	0,			            /* tp_itemsize */
	(destructor)PySwigObject_dealloc,   /* tp_dealloc */
	(printfunc)PySwigObject_print,	    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
	(getattrfunc)PySwigObject_getattr,  /* tp_getattr */ 
#else
	(getattrfunc)0,			    /* tp_getattr */ 
#endif
	(setattrfunc)0,			    /* tp_setattr */ 
	(cmpfunc)PySwigObject_compare,	    /* tp_compare */ 
	(reprfunc)PySwigObject_repr,	    /* tp_repr */    
	&PySwigObject_as_number,	    /* tp_as_number */
	0,				    /* tp_as_sequence */
	0,				    /* tp_as_mapping */
	(hashfunc)0,			    /* tp_hash */
	(ternaryfunc)0,			    /* tp_call */
	(reprfunc)PySwigObject_str,	    /* tp_str */
	PyObject_GenericGetAttr,            /* tp_getattro */
	0,				    /* tp_setattro */
	0,		                    /* tp_as_buffer */
	Py_TPFLAGS_DEFAULT,	            /* tp_flags */
	swigobject_doc, 	            /* tp_doc */        
	0,                                  /* tp_traverse */
	0,                                  /* tp_clear */
	0,                                  /* tp_richcompare */
	0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
	0,                                  /* tp_iter */
	0,                                  /* tp_iternext */
	swigobject_methods,		    /* tp_methods */ 
	0,			            /* tp_members */
	0,				    /* tp_getset */	    	
	0,			            /* tp_base */	        
	0,				    /* tp_dict */	    	
	0,				    /* tp_descr_get */  	
	0,				    /* tp_descr_set */  	
	0,				    /* tp_dictoffset */ 	
	0,				    /* tp_init */	    	
	0,				    /* tp_alloc */	    	
	0,			            /* tp_new */	    	
	0,	                            /* tp_free */	   
        0,                                  /* tp_is_gc */  
	0,				    /* tp_bases */   
	0,				    /* tp_mro */
	0,				    /* tp_cache */   
 	0,				    /* tp_subclasses */
	0,				    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
	0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
	0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
    pyswigobject_type = tmp;
    pyswigobject_type.ob_type = &PyType_Type;
    type_init = 1;
  }
  return &pyswigobject_type;
}

SWIGRUNTIME PyObject *
PySwigObject_New(void *ptr, swig_type_info *ty, int own)
{
  PySwigObject *sobj = PyObject_NEW(PySwigObject, PySwigObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} PySwigPacked;

SWIGRUNTIME int
PySwigPacked_print(PySwigPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
PySwigPacked_repr(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return PyString_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return PyString_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
PySwigPacked_str(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return PyString_FromFormat("%s%s", result, v->ty->name);
  } else {
    return PyString_FromString(v->ty->name);
  }  
}

SWIGRUNTIME int
PySwigPacked_compare(PySwigPacked *v, PySwigPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* _PySwigPacked_type(void);

SWIGRUNTIME PyTypeObject*
PySwigPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = _PySwigPacked_type();
  return type;
}

SWIGRUNTIMEINLINE int
PySwigPacked_Check(PyObject *op) {
  return ((op)->ob_type == _PySwigPacked_type()) 
    || (strcmp((op)->ob_type->tp_name,"PySwigPacked") == 0);
}

SWIGRUNTIME void
PySwigPacked_dealloc(PyObject *v)
{
  if (PySwigPacked_Check(v)) {
    PySwigPacked *sobj = (PySwigPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
_PySwigPacked_type(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject pyswigpacked_type;
  static int type_init = 0;  
  if (!type_init) {
    const PyTypeObject tmp
      = {
	PyObject_HEAD_INIT(NULL)
	0,				    /* ob_size */	
	(char *)"PySwigPacked",		    /* tp_name */	
	sizeof(PySwigPacked),		    /* tp_basicsize */	
	0,				    /* tp_itemsize */	
	(destructor)PySwigPacked_dealloc,   /* tp_dealloc */	
	(printfunc)PySwigPacked_print,	    /* tp_print */   	
	(getattrfunc)0,			    /* tp_getattr */ 	
	(setattrfunc)0,			    /* tp_setattr */ 	
	(cmpfunc)PySwigPacked_compare,	    /* tp_compare */ 	
	(reprfunc)PySwigPacked_repr,	    /* tp_repr */    	
	0,	                            /* tp_as_number */	
	0,				    /* tp_as_sequence */
	0,				    /* tp_as_mapping */	
	(hashfunc)0,			    /* tp_hash */	
	(ternaryfunc)0,			    /* tp_call */	
	(reprfunc)PySwigPacked_str,	    /* tp_str */	
	PyObject_GenericGetAttr,            /* tp_getattro */
	0,				    /* tp_setattro */
	0,		                    /* tp_as_buffer */
	Py_TPFLAGS_DEFAULT,	            /* tp_flags */
	swigpacked_doc, 	            /* tp_doc */
	0,                                  /* tp_traverse */
	0,                                  /* tp_clear */
	0,                                  /* tp_richcompare */
	0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
	0,                                  /* tp_iter */
	0,                                  /* tp_iternext */
	0,		                    /* tp_methods */ 
	0,			            /* tp_members */
	0,				    /* tp_getset */	    	
	0,			            /* tp_base */	        
	0,				    /* tp_dict */	    	
	0,				    /* tp_descr_get */  	
	0,				    /* tp_descr_set */  	
	0,				    /* tp_dictoffset */ 	
	0,				    /* tp_init */	    	
	0,				    /* tp_alloc */	    	
	0,			            /* tp_new */	    	
	0, 	                            /* tp_free */	   
        0,                                  /* tp_is_gc */  
	0,				    /* tp_bases */   
	0,				    /* tp_mro */
	0,				    /* tp_cache */   
 	0,				    /* tp_subclasses */
	0,				    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
	0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
	0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
    pyswigpacked_type = tmp;
    pyswigpacked_type.ob_type = &PyType_Type;
    type_init = 1;
  }
  return &pyswigpacked_type;
}

SWIGRUNTIME PyObject *
PySwigPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  PySwigPacked *sobj = PyObject_NEW(PySwigPacked, PySwigPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
PySwigPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (PySwigPacked_Check(obj)) {
    PySwigPacked *sobj = (PySwigPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
  return PyString_FromString("this");
}

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  static PyObject *SWIG_STATIC_POINTER(swig_this) = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

SWIGRUNTIME PySwigObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  if (PySwigObject_Check(pyobj)) {
    return (PySwigObject *) pyobj;
  } else {
    PyObject *obj = 0;
#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
    if (PyInstance_Check(pyobj)) {
      obj = _PyInstance_Lookup(pyobj, SWIG_This());      
    } else {
      PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
      }      
#ifdef PyWeakref_CheckProxy
      else if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      if (!obj) {
	obj = PyObject_GetAttr(pyobj,SWIG_This());
	if (obj) {
	  Py_DECREF(obj);
	} else {
	  if (PyErr_Occurred()) PyErr_Clear();
	  return 0;
	}
      }
    }
#else
    obj = PyObject_GetAttr(pyobj,SWIG_This());
    if (obj) {
      Py_DECREF(obj);
    } else {
      if (PyErr_Occurred()) PyErr_Clear();
      return 0;
    }
#endif
    if (obj && !PySwigObject_Check(obj)) {
      /* a PyObject is called 'this', try to get the 'real this'
	 PySwigObject from it */ 
      return SWIG_Python_GetSwigThis(obj);
    }
    return (PySwigObject *)obj;
  }
}


/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own) {
    PySwigObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  if (!obj) return SWIG_ERROR;
  if (obj == Py_None) {
    if (ptr) *ptr = 0;
    return SWIG_OK;
  } else {
    PySwigObject *sobj = SWIG_Python_GetSwigThis(obj);
    while (sobj) {
      void *vptr = sobj->ptr;
      if (ty) {
	swig_type_info *to = sobj->ty;
	if (to == ty) {
	  /* no type cast needed */
	  if (ptr) *ptr = vptr;
	  break;
	} else {
	  swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
	  if (!tc) {
	    sobj = (PySwigObject *)sobj->next;
	  } else {
	    if (ptr) *ptr = SWIG_TypeCast(tc,vptr);
	    break;
	  }
	}
      } else {
	if (ptr) *ptr = vptr;
	break;
      }
    }
    if (sobj) {
      if (own) *own = sobj->own;
      if (flags & SWIG_POINTER_DISOWN) {
	sobj->own = 0;
      }
      return SWIG_OK;
    } else {
      int res = SWIG_ERROR;
      if (flags & SWIG_POINTER_IMPLICIT_CONV) {
	PySwigClientData *data = ty ? (PySwigClientData *) ty->clientdata : 0;
	if (data && !data->implicitconv) {
	  PyObject *klass = data->klass;
	  if (klass) {
	    PyObject *impconv;
	    data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
	    impconv = SWIG_Python_CallFunctor(klass, obj);
	    data->implicitconv = 0;
	    if (PyErr_Occurred()) {
	      PyErr_Clear();
	      impconv = 0;
	    }
	    if (impconv) {
	      PySwigObject *iobj = SWIG_Python_GetSwigThis(impconv);
	      if (iobj) {
		void *vptr;
		res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
		if (SWIG_IsOK(res)) {
		  if (ptr) {
		    *ptr = vptr;
		    /* transfer the ownership to 'ptr' */
		    iobj->own = 0;
		    res = SWIG_AddCast(res);
		    res = SWIG_AddNewMask(res);
		  } else {
		    res = SWIG_AddCast(res);		    
		  }
		}
	      }
	      Py_DECREF(impconv);
	    }
	  }
	}
      }
      return res;
    }
  }
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc) {
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
      if (!desc) return SWIG_ERROR;
    }
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (!tc) return SWIG_ERROR;
      *ptr = SWIG_TypeCast(tc,vptr);
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = PySwigPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, whitout calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(PySwigClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
    PyObject *dict = PyDict_New();
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
  }
  return inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  if (!ptr) {
    return SWIG_Py_Void();
  } else {
    int own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
    PyObject *robj = PySwigObject_New(ptr, type, own);
    PySwigClientData *clientdata = type ? (PySwigClientData *)(type->clientdata) : 0;
    if (clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
      PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
      if (inst) {
	Py_DECREF(robj);
	robj = inst;
      }
    }
    return robj;
  }
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? PySwigPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
SWIG_Python_DestroyModule(void *vptr)
{
  swig_module_info *swig_module = (swig_module_info *) vptr;
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      PySwigClientData *data = (PySwigClientData *) ty->clientdata;
      if (data) PySwigClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} };/* Sentinel */

  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				   swig_empty_runtime_method_table);
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
}


/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, PyString_AsString(old_str));
      } else {
	PyErr_Format(type, "%s %s", PyString_AsString(old_str), mesg);
      }
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
PySwigObject_GetDesc(PyObject *self)
{
  PySwigObject *v = (PySwigObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : (char*)"";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && PySwigObject_Check(obj)) {
      const char *otype = (const char *) PySwigObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'PySwigObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? PyString_AsString(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
    if (flags & SWIG_POINTER_EXCEPTION) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
  }
  return result;
}


#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Boundary swig_types[0]
#define SWIGTYPE_p_DenseMatrix swig_types[1]
#define SWIGTYPE_p_DenseVector swig_types[2]
#define SWIGTYPE_p_Edge swig_types[3]
#define SWIGTYPE_p_Face swig_types[4]
#define SWIGTYPE_p_FunctionPointer swig_types[5]
#define SWIGTYPE_p_IS swig_types[6]
#define SWIGTYPE_p_Index swig_types[7]
#define SWIGTYPE_p_KSP swig_types[8]
#define SWIGTYPE_p_Mat swig_types[9]
#define SWIGTYPE_p_Preconditioner swig_types[10]
#define SWIGTYPE_p_Preconditioner__Type swig_types[11]
#define SWIGTYPE_p_Vec swig_types[12]
#define SWIGTYPE_p_VecScatter swig_types[13]
#define SWIGTYPE_p_char swig_types[14]
#define SWIGTYPE_p_dolfin__AffineMap swig_types[15]
#define SWIGTYPE_p_dolfin__ArrayTstd__complexTdouble_t_p_t swig_types[16]
#define SWIGTYPE_p_dolfin__BLASFormData swig_types[17]
#define SWIGTYPE_p_dolfin__BilinearForm swig_types[18]
#define SWIGTYPE_p_dolfin__Boundary swig_types[19]
#define SWIGTYPE_p_dolfin__BoundaryCondition swig_types[20]
#define SWIGTYPE_p_dolfin__BoundaryValue swig_types[21]
#define SWIGTYPE_p_dolfin__Cell swig_types[22]
#define SWIGTYPE_p_dolfin__CellIterator swig_types[23]
#define SWIGTYPE_p_dolfin__ComplexODE swig_types[24]
#define SWIGTYPE_p_dolfin__Dependencies swig_types[25]
#define SWIGTYPE_p_dolfin__Edge swig_types[26]
#define SWIGTYPE_p_dolfin__EdgeIterator swig_types[27]
#define SWIGTYPE_p_dolfin__EigenvalueSolver swig_types[28]
#define SWIGTYPE_p_dolfin__ElasticityUpdatedODE swig_types[29]
#define SWIGTYPE_p_dolfin__ElasticityUpdatedSolver swig_types[30]
#define SWIGTYPE_p_dolfin__FEM swig_types[31]
#define SWIGTYPE_p_dolfin__Face swig_types[32]
#define SWIGTYPE_p_dolfin__FaceIterator swig_types[33]
#define SWIGTYPE_p_dolfin__File swig_types[34]
#define SWIGTYPE_p_dolfin__FiniteElement swig_types[35]
#define SWIGTYPE_p_dolfin__FiniteElementSpec swig_types[36]
#define SWIGTYPE_p_dolfin__Form swig_types[37]
#define SWIGTYPE_p_dolfin__Function swig_types[38]
#define SWIGTYPE_p_dolfin__GMRES swig_types[39]
#define SWIGTYPE_p_dolfin__Homotopy swig_types[40]
#define SWIGTYPE_p_dolfin__HomotopyJacobian swig_types[41]
#define SWIGTYPE_p_dolfin__HomotopyODE swig_types[42]
#define SWIGTYPE_p_dolfin__KrylovSolver swig_types[43]
#define SWIGTYPE_p_dolfin__LU swig_types[44]
#define SWIGTYPE_p_dolfin__LinearForm swig_types[45]
#define SWIGTYPE_p_dolfin__LinearSolver swig_types[46]
#define SWIGTYPE_p_dolfin__Matrix swig_types[47]
#define SWIGTYPE_p_dolfin__MatrixElement swig_types[48]
#define SWIGTYPE_p_dolfin__Mesh swig_types[49]
#define SWIGTYPE_p_dolfin__MeshHierarchy swig_types[50]
#define SWIGTYPE_p_dolfin__MeshIterator swig_types[51]
#define SWIGTYPE_p_dolfin__Method swig_types[52]
#define SWIGTYPE_p_dolfin__MonoAdaptiveFixedPointSolver swig_types[53]
#define SWIGTYPE_p_dolfin__MonoAdaptiveJacobian swig_types[54]
#define SWIGTYPE_p_dolfin__MonoAdaptiveNewtonSolver swig_types[55]
#define SWIGTYPE_p_dolfin__MonoAdaptiveTimeSlab swig_types[56]
#define SWIGTYPE_p_dolfin__MonoAdaptivity swig_types[57]
#define SWIGTYPE_p_dolfin__MultiAdaptiveFixedPointSolver swig_types[58]
#define SWIGTYPE_p_dolfin__MultiAdaptiveNewtonSolver swig_types[59]
#define SWIGTYPE_p_dolfin__MultiAdaptivePreconditioner swig_types[60]
#define SWIGTYPE_p_dolfin__MultiAdaptiveTimeSlab swig_types[61]
#define SWIGTYPE_p_dolfin__MultiAdaptivity swig_types[62]
#define SWIGTYPE_p_dolfin__ODE swig_types[63]
#define SWIGTYPE_p_dolfin__ODESolver swig_types[64]
#define SWIGTYPE_p_dolfin__PETScManager swig_types[65]
#define SWIGTYPE_p_dolfin__Parameter swig_types[66]
#define SWIGTYPE_p_dolfin__ParameterList swig_types[67]
#define SWIGTYPE_p_dolfin__ParticleSystem swig_types[68]
#define SWIGTYPE_p_dolfin__Partition swig_types[69]
#define SWIGTYPE_p_dolfin__Point swig_types[70]
#define SWIGTYPE_p_dolfin__Preconditioner swig_types[71]
#define SWIGTYPE_p_dolfin__ReducedModel swig_types[72]
#define SWIGTYPE_p_dolfin__Sample swig_types[73]
#define SWIGTYPE_p_dolfin__Tetrahedron swig_types[74]
#define SWIGTYPE_p_dolfin__TimeDependent swig_types[75]
#define SWIGTYPE_p_dolfin__TimeSlab swig_types[76]
#define SWIGTYPE_p_dolfin__TimeSlabJacobian swig_types[77]
#define SWIGTYPE_p_dolfin__TimeStepper swig_types[78]
#define SWIGTYPE_p_dolfin__Triangle swig_types[79]
#define SWIGTYPE_p_dolfin__UnitCube swig_types[80]
#define SWIGTYPE_p_dolfin__UnitSquare swig_types[81]
#define SWIGTYPE_p_dolfin__UtilBC swig_types[82]
#define SWIGTYPE_p_dolfin__Variable swig_types[83]
#define SWIGTYPE_p_dolfin__Vector swig_types[84]
#define SWIGTYPE_p_dolfin__VectorElement swig_types[85]
#define SWIGTYPE_p_dolfin__Vertex swig_types[86]
#define SWIGTYPE_p_dolfin__VertexIterator swig_types[87]
#define SWIGTYPE_p_dolfin__VirtualMatrix swig_types[88]
#define SWIGTYPE_p_dolfin__cGqMethod swig_types[89]
#define SWIGTYPE_p_dolfin__dGqMethod swig_types[90]
#define SWIGTYPE_p_double swig_types[91]
#define SWIGTYPE_p_int swig_types[92]
#define SWIGTYPE_p_p_char swig_types[93]
#define SWIGTYPE_p_std__complexTdouble_t swig_types[94]
#define SWIGTYPE_p_std__setTint_t swig_types[95]
#define SWIGTYPE_p_unsigned_int swig_types[96]
static swig_type_info *swig_types[98];
static swig_module_info swig_module = {swig_types, 97, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  warning "This python version probably requires to use swig with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _dolfin.so
  ------------------------------------------------*/
#define SWIG_init    init_dolfin

#define SWIG_name    "_dolfin"

#define SWIGVERSION 0x010328 


#define SWIG_as_voidptr(a) const_cast<void * >(static_cast<const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast<void** >(a)) 


#include <stdexcept>


namespace swig {
  class PyObject_ptr {
  protected:
    PyObject *_obj;

  public:
    PyObject_ptr() :_obj(0)
    {
    }

    PyObject_ptr(const PyObject_ptr& item) : _obj(item._obj)
    {
      Py_XINCREF(_obj);      
    }
    
    PyObject_ptr(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) Py_XINCREF(_obj);
    }
    
    PyObject_ptr & operator=(const PyObject_ptr& item) 
    {
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      return *this;      
    }
    
    ~PyObject_ptr() 
    {
      Py_XDECREF(_obj);
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct PyObject_var : PyObject_ptr {
    PyObject_var(PyObject* obj = 0) : PyObject_ptr(obj, false) { }
    
    PyObject_var & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include <dolfin.h>

#include "SettingsGlue.h"
#include "FEMGlue.h"

#include <string>
  
using namespace dolfin;


#include <string>


  static dolfin::real *new_realArray(size_t nelements) { 
    return (new dolfin::real[nelements]);
  }

  static void delete_realArray(dolfin::real *ary) {
    delete[] ary;
  }

  static dolfin::real realArray_getitem(dolfin::real *ary, size_t index) {
    return ary[index];
  }
  static void realArray_setitem(dolfin::real *ary, size_t index, dolfin::real value) {
    ary[index] = value;
  }


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast<size_t >(v);
  return res;
}


  #define SWIG_From_double   PyFloat_FromDouble 


  static int *new_intArray(size_t nelements) { 
    return (new int[nelements]);
  }

  static void delete_intArray(int *ary) {
    delete[] ary;
  }

  static int intArray_getitem(int *ary, size_t index) {
    return ary[index];
  }
  static void intArray_setitem(int *ary, size_t index, int value) {
    ary[index] = value;
  }


  #define SWIG_From_long   PyInt_FromLong 


SWIGINTERNINLINE PyObject *
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


#include <limits.h>
#ifndef LLONG_MIN
# define LLONG_MIN	LONG_LONG_MIN
#endif
#ifndef LLONG_MAX
# define LLONG_MAX	LONG_LONG_MAX
#endif
#ifndef ULLONG_MAX
# define ULLONG_MAX	ULONG_LONG_MAX
#endif


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast<int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast<unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor()
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
  if (PyString_Check(obj)) {
    char *cstr; int len;
    PyString_AsStringAndSize(obj, &cstr, &len);
    if (cptr)  {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	  {
	    *cptr = reinterpret_cast<char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
	    *alloc = SWIG_NEWOBJ;
	  }
	else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
	*cptr = PyString_AsString(obj);
      }
    }
    if (psize) *psize = len + 1;
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      char* vptr = 0;
      if (SWIG_ConvertPtr(obj, (void**)&vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = vptr;
	if (psize) *psize = vptr ? (strlen(vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_NewPointerObj(const_cast<char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
      return PyString_FromStringAndSize(carray, static_cast<int >(size));
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}





SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  PyObject *obj = value ? Py_True : Py_False;
  Py_INCREF(obj);
  return obj;
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  if (obj == Py_True) {
    if (val) *val = true;
    return SWIG_OK;
  } else if (obj == Py_False) {
    if (val) *val = false;
    return SWIG_OK;
  } else {
    long v = 0;
    int res = SWIG_AddCast(SWIG_AsVal_long (obj, val ? &v : 0));
    if (SWIG_IsOK(res) && val) *val = v ? true : false;
    return res;
  }
}


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast<long >(value)); 
}


SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "dolfin_wrap.h"

/***********************************************************************
 * director.swg
 *
 *     This file contains support for director classes that proxy
 *     method calls from C++ to Python extensions.
 *
 * Author : Mark Rose (mrose@stm.lbl.gov)
 ************************************************************************/

#ifdef __cplusplus

namespace Swig {

  GCItem::~GCItem()
  {
  }
  
  /* simple thread abstraction for pthreads on win32 */
  Director::~Director() {
    swig_decref(); 
  }

  /* wrap a python object, optionally taking ownership */
  Director::Director(PyObject* self) : swig_self(self), swig_disown_flag(false) {
    swig_incref();
  }



  bool Director::swig_up = false;

#ifdef __PTHREAD__
  pthread_mutex_t SWIG_MUTEX_INIT(Director::swig_mutex_up);
  pthread_mutex_t SWIG_MUTEX_INIT(Director::swig_mutex_own);
  pthread_t Director::swig_mutex_thread;
  bool Director::swig_mutex_active = false;
#endif


  void UnknownExceptionHandler::handler()  {
    try {
      throw;
    } catch (DirectorException& e) {
      std::cerr << "Swig Director exception caught:" << std::endl
                << e.getMessage() << std::endl;
    } catch (std::exception& e) {
      std::cerr << "std::exception caught: "<< e.what() << std::endl;
    } catch (...) {
      std::cerr << "Unknown exception caught." << std::endl;
    }

    std::cerr << std::endl
    	      << "Python interpreter traceback:" << std::endl;
    PyErr_Print();
    std::cerr << std::endl;

    std::cerr << "This exception was caught by the SWIG unexpected exception handler." << std::endl
              << "Try using %feature(\"director:except\") to avoid reaching this point." << std::endl
	      << std::endl
              << "Exception is being re-thrown, program will like abort/terminate." << std::endl;
    throw;
  }

}

#endif /* __cplusplus */

SwigDirector_Function::SwigDirector_Function(PyObject *self, dolfin::real value): dolfin::Function(value), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((dolfin::Function *)this, this); 
}




SwigDirector_Function::SwigDirector_Function(PyObject *self, dolfin::uint vectordim): dolfin::Function(vectordim), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((dolfin::Function *)this, this); 
}




SwigDirector_Function::SwigDirector_Function(PyObject *self, FunctionPointer fp, dolfin::uint vectordim): dolfin::Function(fp, vectordim), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((dolfin::Function *)this, this); 
}




SwigDirector_Function::SwigDirector_Function(PyObject *self, dolfin::Vector &x): dolfin::Function(x), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((dolfin::Function *)this, this); 
}




SwigDirector_Function::SwigDirector_Function(PyObject *self, dolfin::Vector &x, dolfin::Mesh &mesh): dolfin::Function(x, mesh), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((dolfin::Function *)this, this); 
}




SwigDirector_Function::SwigDirector_Function(PyObject *self, dolfin::Vector &x, dolfin::Mesh &mesh, dolfin::FiniteElement &element): dolfin::Function(x, mesh, element), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((dolfin::Function *)this, this); 
}




SwigDirector_Function::SwigDirector_Function(PyObject *self, dolfin::Mesh &mesh, dolfin::FiniteElement &element): dolfin::Function(mesh, element), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((dolfin::Function *)this, this); 
}




SwigDirector_Function::SwigDirector_Function(PyObject *self, dolfin::Function const &f): dolfin::Function(f), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((dolfin::Function *)this, this); 
}




dolfin::real SwigDirector_Function::eval(dolfin::Point const &p, dolfin::uint i) {
  if (swig_get_up()) {
    return dolfin::Function::eval(p,i);
  }
  dolfin::real swig_c_result;
  swig::PyObject_var obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&p), SWIGTYPE_p_dolfin__Point,  0 );
  swig::PyObject_var obj1;
  obj1 = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(i));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' unitialized, maybe you forgot to call Function.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char * const swig_method_name = "eval";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#else
  swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"eval", (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#endif
  if (result == NULL) {
    PyObject *error = PyErr_Occurred();
    if (error != NULL) {
      Swig::DirectorMethodException::raise("Error detected when calling 'Function.eval'");
    }
  }
  double val;
  int res = SWIG_AsVal_double(result, &val);
  if (!SWIG_IsOK(res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(res)), "in output value of type '""dolfin::real""'");
  }
  swig_c_result = static_cast<dolfin::real >(val);
  return (dolfin::real) swig_c_result;
}


SwigDirector_Function::~SwigDirector_Function() {
}

SwigDirector_BoundaryCondition::SwigDirector_BoundaryCondition(PyObject *self): dolfin::BoundaryCondition(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((dolfin::BoundaryCondition *)this, this); 
}




SwigDirector_BoundaryCondition::~SwigDirector_BoundaryCondition() {
}

void SwigDirector_BoundaryCondition::eval(dolfin::BoundaryValue &value, dolfin::Point const &p, dolfin::uint i) {
  if (swig_get_up()) {
    Swig::DirectorPureVirtualException::raise("dolfin::BoundaryCondition::eval(value,p,i).");
  }
  swig::PyObject_var obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&value), SWIGTYPE_p_dolfin__BoundaryValue,  0 );
  swig::PyObject_var obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(&p), SWIGTYPE_p_dolfin__Point,  0 );
  swig::PyObject_var obj2;
  obj2 = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(i));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' unitialized, maybe you forgot to call BoundaryCondition.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char * const swig_method_name = "eval";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(OOO)" ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2);
#else
  swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"eval", (char *)"(OOO)" ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2);
#endif
  if (result == NULL) {
    PyObject *error = PyErr_Occurred();
    if (error != NULL) {
      Swig::DirectorMethodException::raise("Error detected when calling 'BoundaryCondition.eval'");
    }
  }
}


SwigDirector_ODE::SwigDirector_ODE(PyObject *self, dolfin::uint N, dolfin::real T): dolfin::ODE(N, T), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((dolfin::ODE *)this, this); 
}




dolfin::real SwigDirector_ODE::u0(dolfin::uint i) {
  if (swig_get_up()) {
    Swig::DirectorPureVirtualException::raise("dolfin::ODE::u0(i).");
  }
  dolfin::real swig_c_result;
  swig::PyObject_var obj0;
  obj0 = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(i));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' unitialized, maybe you forgot to call ODE.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char * const swig_method_name = "u0";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"u0", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (result == NULL) {
    PyObject *error = PyErr_Occurred();
    if (error != NULL) {
      Swig::DirectorMethodException::raise("Error detected when calling 'ODE.u0'");
    }
  }
  double val;
  int res = SWIG_AsVal_double(result, &val);
  if (!SWIG_IsOK(res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(res)), "in output value of type '""dolfin::real""'");
  }
  swig_c_result = static_cast<dolfin::real >(val);
  return (dolfin::real) swig_c_result;
}


dolfin::real SwigDirector_ODE::f(dolfin::real const u[], dolfin::real t, dolfin::uint i) {
  if (swig_get_up()) {
    return dolfin::ODE::f(u,t,i);
  }
  dolfin::real swig_c_result;
  swig::PyObject_var obj0;
  {
    {
      // Custom typemap
      obj0 = SWIG_NewPointerObj((void *) u, SWIGTYPE_p_double, 0);
    }
  }
  swig::PyObject_var obj1;
  obj1 = SWIG_From_double(static_cast<double >(t));
  swig::PyObject_var obj2;
  obj2 = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(i));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' unitialized, maybe you forgot to call ODE.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 1;
  const char * const swig_method_name = "fmulti";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(OOO)" ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2);
#else
  swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"fmulti", (char *)"(OOO)" ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2);
#endif
  if (result == NULL) {
    PyObject *error = PyErr_Occurred();
    if (error != NULL) {
      Swig::DirectorMethodException::raise("Error detected when calling 'ODE.fmulti'");
    }
  }
  double val;
  int res = SWIG_AsVal_double(result, &val);
  if (!SWIG_IsOK(res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(res)), "in output value of type '""dolfin::real""'");
  }
  swig_c_result = static_cast<dolfin::real >(val);
  return (dolfin::real) swig_c_result;
}


void SwigDirector_ODE::save(dolfin::Sample &sample) {
  if (swig_get_up()) {
    dolfin::ODE::save(sample);
    return;
  }
  swig::PyObject_var obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&sample), SWIGTYPE_p_dolfin__Sample,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' unitialized, maybe you forgot to call ODE.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 2;
  const char * const swig_method_name = "save";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"save", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (result == NULL) {
    PyObject *error = PyErr_Occurred();
    if (error != NULL) {
      Swig::DirectorMethodException::raise("Error detected when calling 'ODE.save'");
    }
  }
}


SwigDirector_ODE::~SwigDirector_ODE() {
}

void SwigDirector_ODE::f(dolfin::real const u[], dolfin::real t, dolfin::real y[]) {
  if (swig_get_up()) {
    dolfin::ODE::f(u,t,y);
    return;
  }
  swig::PyObject_var obj0;
  {
    {
      // Custom typemap
      obj0 = SWIG_NewPointerObj((void *) u, SWIGTYPE_p_double, 0);
    }
  }
  swig::PyObject_var obj1;
  obj1 = SWIG_From_double(static_cast<double >(t));
  swig::PyObject_var obj2;
  {
    {
      // Custom typemap
      obj2 = SWIG_NewPointerObj((void *) y, SWIGTYPE_p_double, 0);
    }
  }
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' unitialized, maybe you forgot to call ODE.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 3;
  const char * const swig_method_name = "fmono";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(OOO)" ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2);
#else
  swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"fmono", (char *)"(OOO)" ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2);
#endif
  if (result == NULL) {
    PyObject *error = PyErr_Occurred();
    if (error != NULL) {
      Swig::DirectorMethodException::raise("Error detected when calling 'ODE.fmono'");
    }
  }
}


dolfin::real SwigDirector_ODE::dfdu(dolfin::real const u[], dolfin::real t, dolfin::uint i, dolfin::uint j) {
  if (swig_get_up()) {
    return dolfin::ODE::dfdu(u,t,i,j);
  }
  dolfin::real swig_c_result;
  swig::PyObject_var obj0;
  {
    {
      // Custom typemap
      obj0 = SWIG_NewPointerObj((void *) u, SWIGTYPE_p_double, 0);
    }
  }
  swig::PyObject_var obj1;
  obj1 = SWIG_From_double(static_cast<double >(t));
  swig::PyObject_var obj2;
  obj2 = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(i));
  swig::PyObject_var obj3;
  obj3 = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(j));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' unitialized, maybe you forgot to call ODE.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 4;
  const char * const swig_method_name = "dfdu";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(OOOO)" ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3);
#else
  swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"dfdu", (char *)"(OOOO)" ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3);
#endif
  if (result == NULL) {
    PyObject *error = PyErr_Occurred();
    if (error != NULL) {
      Swig::DirectorMethodException::raise("Error detected when calling 'ODE.dfdu'");
    }
  }
  double val;
  int res = SWIG_AsVal_double(result, &val);
  if (!SWIG_IsOK(res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(res)), "in output value of type '""dolfin::real""'");
  }
  swig_c_result = static_cast<dolfin::real >(val);
  return (dolfin::real) swig_c_result;
}


dolfin::real SwigDirector_ODE::timestep(dolfin::real t, dolfin::real k0) const {
  if (swig_get_up()) {
    return dolfin::ODE::timestep(t,k0);
  }
  dolfin::real swig_c_result;
  swig::PyObject_var obj0;
  obj0 = SWIG_From_double(static_cast<double >(t));
  swig::PyObject_var obj1;
  obj1 = SWIG_From_double(static_cast<double >(k0));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' unitialized, maybe you forgot to call ODE.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 5;
  const char * const swig_method_name = "timestep";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#else
  swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"timestep", (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#endif
  if (result == NULL) {
    PyObject *error = PyErr_Occurred();
    if (error != NULL) {
      Swig::DirectorMethodException::raise("Error detected when calling 'ODE.timestep'");
    }
  }
  double val;
  int res = SWIG_AsVal_double(result, &val);
  if (!SWIG_IsOK(res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(res)), "in output value of type '""dolfin::real""'");
  }
  swig_c_result = static_cast<dolfin::real >(val);
  return (dolfin::real) swig_c_result;
}


dolfin::real SwigDirector_ODE::timestep(dolfin::real t, dolfin::uint i, dolfin::real k0) const {
  if (swig_get_up()) {
    return dolfin::ODE::timestep(t,i,k0);
  }
  dolfin::real swig_c_result;
  swig::PyObject_var obj0;
  obj0 = SWIG_From_double(static_cast<double >(t));
  swig::PyObject_var obj1;
  obj1 = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(i));
  swig::PyObject_var obj2;
  obj2 = SWIG_From_double(static_cast<double >(k0));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' unitialized, maybe you forgot to call ODE.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 6;
  const char * const swig_method_name = "timestep";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(OOO)" ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2);
#else
  swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"timestep", (char *)"(OOO)" ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2);
#endif
  if (result == NULL) {
    PyObject *error = PyErr_Occurred();
    if (error != NULL) {
      Swig::DirectorMethodException::raise("Error detected when calling 'ODE.timestep'");
    }
  }
  double val;
  int res = SWIG_AsVal_double(result, &val);
  if (!SWIG_IsOK(res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(res)), "in output value of type '""dolfin::real""'");
  }
  swig_c_result = static_cast<dolfin::real >(val);
  return (dolfin::real) swig_c_result;
}


void SwigDirector_ODE::M(dolfin::real const x[], dolfin::real y[], dolfin::real const u[], dolfin::real t) {
  if (swig_get_up()) {
    dolfin::ODE::M(x,y,u,t);
    return;
  }
  swig::PyObject_var obj0;
  {
    {
      // Custom typemap
      obj0 = SWIG_NewPointerObj((void *) x, SWIGTYPE_p_double, 0);
    }
  }
  swig::PyObject_var obj1;
  {
    {
      // Custom typemap
      obj1 = SWIG_NewPointerObj((void *) y, SWIGTYPE_p_double, 0);
    }
  }
  swig::PyObject_var obj2;
  {
    {
      // Custom typemap
      obj2 = SWIG_NewPointerObj((void *) u, SWIGTYPE_p_double, 0);
    }
  }
  swig::PyObject_var obj3;
  obj3 = SWIG_From_double(static_cast<double >(t));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' unitialized, maybe you forgot to call ODE.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 7;
  const char * const swig_method_name = "M";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(OOOO)" ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3);
#else
  swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"M", (char *)"(OOOO)" ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3);
#endif
  if (result == NULL) {
    PyObject *error = PyErr_Occurred();
    if (error != NULL) {
      Swig::DirectorMethodException::raise("Error detected when calling 'ODE.M'");
    }
  }
}


void SwigDirector_ODE::J(dolfin::real const x[], dolfin::real y[], dolfin::real const u[], dolfin::real t) {
  if (swig_get_up()) {
    dolfin::ODE::J(x,y,u,t);
    return;
  }
  swig::PyObject_var obj0;
  {
    {
      // Custom typemap
      obj0 = SWIG_NewPointerObj((void *) x, SWIGTYPE_p_double, 0);
    }
  }
  swig::PyObject_var obj1;
  {
    {
      // Custom typemap
      obj1 = SWIG_NewPointerObj((void *) y, SWIGTYPE_p_double, 0);
    }
  }
  swig::PyObject_var obj2;
  {
    {
      // Custom typemap
      obj2 = SWIG_NewPointerObj((void *) u, SWIGTYPE_p_double, 0);
    }
  }
  swig::PyObject_var obj3;
  obj3 = SWIG_From_double(static_cast<double >(t));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' unitialized, maybe you forgot to call ODE.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 8;
  const char * const swig_method_name = "J";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(OOOO)" ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3);
#else
  swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"J", (char *)"(OOOO)" ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3);
#endif
  if (result == NULL) {
    PyObject *error = PyErr_Occurred();
    if (error != NULL) {
      Swig::DirectorMethodException::raise("Error detected when calling 'ODE.J'");
    }
  }
}


bool SwigDirector_ODE::update(dolfin::real const u[], dolfin::real t, bool end) {
  if (swig_get_up()) {
    return dolfin::ODE::update(u,t,end);
  }
  bool swig_c_result;
  swig::PyObject_var obj0;
  {
    {
      // Custom typemap
      obj0 = SWIG_NewPointerObj((void *) u, SWIGTYPE_p_double, 0);
    }
  }
  swig::PyObject_var obj1;
  obj1 = SWIG_From_double(static_cast<double >(t));
  swig::PyObject_var obj2;
  obj2 = SWIG_From_bool(static_cast<bool >(end));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' unitialized, maybe you forgot to call ODE.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 9;
  const char * const swig_method_name = "update";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(OOO)" ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2);
#else
  swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"update", (char *)"(OOO)" ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2);
#endif
  if (result == NULL) {
    PyObject *error = PyErr_Occurred();
    if (error != NULL) {
      Swig::DirectorMethodException::raise("Error detected when calling 'ODE.update'");
    }
  }
  bool val;
  int res = SWIG_AsVal_bool(result, &val);
  if (!SWIG_IsOK(res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(res)), "in output value of type '""bool""'");
  }
  swig_c_result = static_cast<bool >(val);
  return (bool) swig_c_result;
}


#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_new_realArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  dolfin::real *result = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_realArray",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_realArray" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast<size_t >(val1);
  result = (dolfin::real *)new_realArray(arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_realArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::real *arg1 = (dolfin::real *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_realArray",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_realArray" "', argument " "1"" of type '" "dolfin::real *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::real * >(argp1);
  delete_realArray(arg1);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_realArray_getitem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::real *arg1 = (dolfin::real *) 0 ;
  size_t arg2 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:realArray_getitem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "realArray_getitem" "', argument " "1"" of type '" "dolfin::real *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::real * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "realArray_getitem" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast<size_t >(val2);
  result = (dolfin::real)realArray_getitem(arg1,arg2);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_realArray_setitem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::real *arg1 = (dolfin::real *) 0 ;
  size_t arg2 ;
  dolfin::real arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:realArray_setitem",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "realArray_setitem" "', argument " "1"" of type '" "dolfin::real *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::real * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "realArray_setitem" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast<size_t >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "realArray_setitem" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  realArray_setitem(arg1,arg2,arg3);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_intArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  int *result = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_intArray",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_intArray" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast<size_t >(val1);
  result = (int *)new_intArray(arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_intArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_intArray",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_intArray" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast<int * >(argp1);
  delete_intArray(arg1);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intArray_getitem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) 0 ;
  size_t arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:intArray_getitem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intArray_getitem" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast<int * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "intArray_getitem" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast<size_t >(val2);
  result = (int)intArray_getitem(arg1,arg2);
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intArray_setitem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) 0 ;
  size_t arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:intArray_setitem",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intArray_setitem" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast<int * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "intArray_setitem" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast<size_t >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "intArray_setitem" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast<int >(val3);
  intArray_setitem(arg1,arg2,arg3);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dolfin_init(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  char **arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dolfin_init",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "dolfin_init" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast<int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dolfin_init" "', argument " "2"" of type '" "char *[]""'"); 
  } 
  arg2 = reinterpret_cast<char ** >(argp2);
  dolfin::dolfin_init(arg1,arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sqr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::real arg1 ;
  dolfin::real result;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:sqr",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "sqr" "', argument " "1"" of type '" "dolfin::real""'");
  } 
  arg1 = static_cast<dolfin::real >(val1);
  result = (dolfin::real)dolfin::sqr(arg1);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::real result;
  
  if (!PyArg_ParseTuple(args,(char *)":rand")) SWIG_fail;
  result = (dolfin::real)dolfin::rand();
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_seed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:seed",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "seed" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast<unsigned int >(val1);
  dolfin::seed(arg1);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TimeDependent__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::TimeDependent *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TimeDependent")) SWIG_fail;
  result = (dolfin::TimeDependent *)new dolfin::TimeDependent();
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__TimeDependent, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TimeDependent__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::real *arg1 = 0 ;
  dolfin::TimeDependent *result = 0 ;
  dolfin::real temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TimeDependent",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TimeDependent" "', argument " "1"" of type '" "dolfin::real""'");
  } 
  temp1 = static_cast<dolfin::real >(val1);
  arg1 = &temp1;
  result = (dolfin::TimeDependent *)new dolfin::TimeDependent((double const &)*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__TimeDependent, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TimeDependent(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_TimeDependent__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_TimeDependent__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_TimeDependent'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TimeDependent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::TimeDependent *arg1 = (dolfin::TimeDependent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TimeDependent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__TimeDependent, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TimeDependent" "', argument " "1"" of type '" "dolfin::TimeDependent *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::TimeDependent * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeDependent_sync(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::TimeDependent *arg1 = (dolfin::TimeDependent *) 0 ;
  dolfin::real *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  dolfin::real temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TimeDependent_sync",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__TimeDependent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeDependent_sync" "', argument " "1"" of type '" "dolfin::TimeDependent *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::TimeDependent * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimeDependent_sync" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  temp2 = static_cast<dolfin::real >(val2);
  arg2 = &temp2;
  (arg1)->sync((double const &)*arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeDependent_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::TimeDependent *arg1 = (dolfin::TimeDependent *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeDependent_time",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__TimeDependent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeDependent_time" "', argument " "1"" of type '" "dolfin::TimeDependent const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::TimeDependent * >(argp1);
  result = (dolfin::real)((dolfin::TimeDependent const *)arg1)->time();
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TimeDependent_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__TimeDependent, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Variable__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Variable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Variable")) SWIG_fail;
  result = (dolfin::Variable *)new dolfin::Variable();
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Variable, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Variable__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  dolfin::Variable *result = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Variable",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Variable" "', argument " "1"" of type '" "std::string const""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Variable" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (dolfin::Variable *)new dolfin::Variable(arg1,arg2);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Variable, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Variable__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Variable *arg1 = 0 ;
  dolfin::Variable *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Variable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Variable,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Variable" "', argument " "1"" of type '" "dolfin::Variable const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Variable" "', argument " "1"" of type '" "dolfin::Variable const &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Variable * >(argp1);
  result = (dolfin::Variable *)new dolfin::Variable((dolfin::Variable const &)*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Variable, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Variable(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Variable__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_dolfin__Variable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Variable__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Variable__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_Variable'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variable_rename(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Variable *arg1 = (dolfin::Variable *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Variable_rename",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Variable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variable_rename" "', argument " "1"" of type '" "dolfin::Variable *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Variable * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Variable_rename" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Variable_rename" "', argument " "3"" of type '" "std::string const""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  (arg1)->rename(arg2,arg3);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variable_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Variable *arg1 = (dolfin::Variable *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variable_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Variable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variable_name" "', argument " "1"" of type '" "dolfin::Variable const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Variable * >(argp1);
  {
    std::string const &_result_ref = ((dolfin::Variable const *)arg1)->name();
    result = (std::string *) &_result_ref;
  }
  
  resultobj = SWIG_From_std_string(static_cast<std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variable_label(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Variable *arg1 = (dolfin::Variable *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variable_label",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Variable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variable_label" "', argument " "1"" of type '" "dolfin::Variable const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Variable * >(argp1);
  {
    std::string const &_result_ref = ((dolfin::Variable const *)arg1)->label();
    result = (std::string *) &_result_ref;
  }
  
  resultobj = SWIG_From_std_string(static_cast<std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Variable_number(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Variable *arg1 = (dolfin::Variable *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Variable_number",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Variable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Variable_number" "', argument " "1"" of type '" "dolfin::Variable const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Variable * >(argp1);
  result = (int)((dolfin::Variable const *)arg1)->number();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Variable_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__Variable, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_suffix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:suffix",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "suffix" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "suffix" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  result = (bool)dolfin::suffix((char const *)arg1,(char const *)arg2);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_remove_newline(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:remove_newline",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "remove_newline" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = buf1;
  dolfin::remove_newline(arg1);
  
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_length(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:length",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "length" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  result = (int)dolfin::length((char const *)arg1);
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_date(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)":date")) SWIG_fail;
  result = dolfin::date();
  
  resultobj = SWIG_From_std_string(static_cast<std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::real arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delay",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "delay" "', argument " "1"" of type '" "dolfin::real""'");
  } 
  arg1 = static_cast<dolfin::real >(val1);
  dolfin::delay(arg1);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":tic")) SWIG_fail;
  dolfin::tic();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_toc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::real result;
  
  if (!PyArg_ParseTuple(args,(char *)":toc")) SWIG_fail;
  result = (dolfin::real)dolfin::toc();
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tocd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::real result;
  
  if (!PyArg_ParseTuple(args,(char *)":tocd")) SWIG_fail;
  result = (dolfin::real)dolfin::tocd();
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dolfin_update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":dolfin_update")) SWIG_fail;
  dolfin::dolfin_update();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dolfin_quit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":dolfin_quit")) SWIG_fail;
  dolfin::dolfin_quit();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dolfin_finished(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)":dolfin_finished")) SWIG_fail;
  result = (bool)dolfin::dolfin_finished();
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dolfin_segfault(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":dolfin_segfault")) SWIG_fail;
  dolfin::dolfin_segfault();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dolfin_begin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":dolfin_begin")) SWIG_fail;
  dolfin::dolfin_begin();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dolfin_begin__SWIG_1__varargs__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *varargs) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dolfin_begin",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dolfin_begin" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  dolfin::dolfin_begin((char const *)arg1,arg2);
  
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_dolfin_begin__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj;
  PyObject *varargs;
  PyObject *newargs;
  
  newargs = PyTuple_GetSlice(args,0,1);
  varargs = PyTuple_GetSlice(args,1,PyTuple_Size(args)+1);
  resultobj = _wrap_dolfin_begin__SWIG_1__varargs__(self,newargs,varargs);
  Py_XDECREF(newargs);
  Py_XDECREF(varargs);
  return resultobj;
}


SWIGINTERN PyObject *_wrap_dolfin_begin(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_dolfin_begin__SWIG_0(self, args);
  }
  if (argc >= 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      if (argc <= 1) {
        return _wrap_dolfin_begin__SWIG_1(self, args);
      }
      return _wrap_dolfin_begin__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'dolfin_begin'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_dolfin_end__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":dolfin_end")) SWIG_fail;
  dolfin::dolfin_end();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dolfin_end__SWIG_1__varargs__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *varargs) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dolfin_end",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dolfin_end" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  dolfin::dolfin_end((char const *)arg1,arg2);
  
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_dolfin_end__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj;
  PyObject *varargs;
  PyObject *newargs;
  
  newargs = PyTuple_GetSlice(args,0,1);
  varargs = PyTuple_GetSlice(args,1,PyTuple_Size(args)+1);
  resultobj = _wrap_dolfin_end__SWIG_1__varargs__(self,newargs,varargs);
  Py_XDECREF(newargs);
  Py_XDECREF(varargs);
  return resultobj;
}


SWIGINTERN PyObject *_wrap_dolfin_end(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_dolfin_end__SWIG_0(self, args);
  }
  if (argc >= 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      if (argc <= 1) {
        return _wrap_dolfin_end__SWIG_1(self, args);
      }
      return _wrap_dolfin_end__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'dolfin_end'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_dolfin_output(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dolfin_output",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dolfin_output" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  dolfin::dolfin_output((char const *)arg1);
  
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_dolfin_log(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dolfin_log",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "dolfin_log" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast<bool >(val1);
  dolfin::dolfin_log(arg1);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Parameter__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  dolfin::Parameter *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Parameter",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Parameter" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast<int >(val1);
  result = (dolfin::Parameter *)new dolfin::Parameter(arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Parameter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Parameter__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::uint arg1 ;
  dolfin::Parameter *result = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Parameter",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Parameter" "', argument " "1"" of type '" "dolfin::uint""'");
  } 
  arg1 = static_cast<dolfin::uint >(val1);
  result = (dolfin::Parameter *)new dolfin::Parameter(arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Parameter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Parameter__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::real arg1 ;
  dolfin::Parameter *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Parameter",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Parameter" "', argument " "1"" of type '" "dolfin::real""'");
  } 
  arg1 = static_cast<dolfin::real >(val1);
  result = (dolfin::Parameter *)new dolfin::Parameter(arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Parameter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Parameter__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  dolfin::Parameter *result = 0 ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Parameter",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Parameter" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast<bool >(val1);
  result = (dolfin::Parameter *)new dolfin::Parameter(arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Parameter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Parameter__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  dolfin::Parameter *result = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Parameter",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Parameter" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (dolfin::Parameter *)new dolfin::Parameter(arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Parameter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Parameter__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  dolfin::Parameter *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Parameter",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Parameter" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  result = (dolfin::Parameter *)new dolfin::Parameter((char const *)arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Parameter, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Parameter__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Parameter *arg1 = 0 ;
  dolfin::Parameter *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Parameter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Parameter,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Parameter" "', argument " "1"" of type '" "dolfin::Parameter const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Parameter" "', argument " "1"" of type '" "dolfin::Parameter const &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Parameter * >(argp1);
  result = (dolfin::Parameter *)new dolfin::Parameter((dolfin::Parameter const &)*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Parameter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Parameter(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_dolfin__Parameter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Parameter__SWIG_6(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Parameter__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Parameter__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Parameter__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Parameter__SWIG_4(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Parameter__SWIG_5(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Parameter__SWIG_3(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_Parameter'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Parameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Parameter *arg1 = (dolfin::Parameter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Parameter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Parameter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Parameter" "', argument " "1"" of type '" "dolfin::Parameter *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Parameter * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Parameter_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Parameter *arg1 = (dolfin::Parameter *) 0 ;
  dolfin::Parameter::Type result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Parameter_type",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Parameter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Parameter_type" "', argument " "1"" of type '" "dolfin::Parameter const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Parameter * >(argp1);
  result = (dolfin::Parameter::Type)((dolfin::Parameter const *)arg1)->type();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Parameter_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__Parameter, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_File__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  dolfin::File *result = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_File",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_File" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_File" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (dolfin::File *)new dolfin::File((std::string const &)*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__File, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_File__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  dolfin::File::Type arg2 ;
  dolfin::File *result = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_File",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_File" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_File" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_File" "', argument " "2"" of type '" "dolfin::File::Type""'");
  } 
  arg2 = static_cast<dolfin::File::Type >(val2);
  result = (dolfin::File *)new dolfin::File((std::string const &)*arg1,arg2);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__File, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_File(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_File__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_File__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_File'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_File(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::File *arg1 = (dolfin::File *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_File",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__File, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_File" "', argument " "1"" of type '" "dolfin::File *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::File * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_File___rshift____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::File *arg1 = (dolfin::File *) 0 ;
  dolfin::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:File___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "File___rshift__" "', argument " "1"" of type '" "dolfin::File *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::File * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "File___rshift__" "', argument " "2"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "File___rshift__" "', argument " "2"" of type '" "dolfin::Vector &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  (arg1)->operator >>(*arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_File___rshift____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::File *arg1 = (dolfin::File *) 0 ;
  dolfin::Matrix *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:File___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "File___rshift__" "', argument " "1"" of type '" "dolfin::File *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::File * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Matrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "File___rshift__" "', argument " "2"" of type '" "dolfin::Matrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "File___rshift__" "', argument " "2"" of type '" "dolfin::Matrix &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Matrix * >(argp2);
  (arg1)->operator >>(*arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_File___rshift____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::File *arg1 = (dolfin::File *) 0 ;
  dolfin::Mesh *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:File___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "File___rshift__" "', argument " "1"" of type '" "dolfin::File *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::File * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Mesh,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "File___rshift__" "', argument " "2"" of type '" "dolfin::Mesh &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "File___rshift__" "', argument " "2"" of type '" "dolfin::Mesh &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Mesh * >(argp2);
  (arg1)->operator >>(*arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_File___rshift____SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::File *arg1 = (dolfin::File *) 0 ;
  dolfin::Function *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:File___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "File___rshift__" "', argument " "1"" of type '" "dolfin::File *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::File * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Function,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "File___rshift__" "', argument " "2"" of type '" "dolfin::Function &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "File___rshift__" "', argument " "2"" of type '" "dolfin::Function &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Function * >(argp2);
  (arg1)->operator >>(*arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_File___rshift____SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::File *arg1 = (dolfin::File *) 0 ;
  dolfin::Sample *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:File___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "File___rshift__" "', argument " "1"" of type '" "dolfin::File *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::File * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Sample,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "File___rshift__" "', argument " "2"" of type '" "dolfin::Sample &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "File___rshift__" "', argument " "2"" of type '" "dolfin::Sample &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Sample * >(argp2);
  (arg1)->operator >>(*arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_File___rshift____SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::File *arg1 = (dolfin::File *) 0 ;
  dolfin::FiniteElementSpec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:File___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "File___rshift__" "', argument " "1"" of type '" "dolfin::File *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::File * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__FiniteElementSpec,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "File___rshift__" "', argument " "2"" of type '" "dolfin::FiniteElementSpec &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "File___rshift__" "', argument " "2"" of type '" "dolfin::FiniteElementSpec &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::FiniteElementSpec * >(argp2);
  (arg1)->operator >>(*arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_File___rshift____SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::File *arg1 = (dolfin::File *) 0 ;
  dolfin::ParameterList *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:File___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "File___rshift__" "', argument " "1"" of type '" "dolfin::File *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::File * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__ParameterList,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "File___rshift__" "', argument " "2"" of type '" "dolfin::ParameterList &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "File___rshift__" "', argument " "2"" of type '" "dolfin::ParameterList &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::ParameterList * >(argp2);
  (arg1)->operator >>(*arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_File___rshift____SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::File *arg1 = (dolfin::File *) 0 ;
  dolfin::BLASFormData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:File___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "File___rshift__" "', argument " "1"" of type '" "dolfin::File *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::File * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__BLASFormData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "File___rshift__" "', argument " "2"" of type '" "dolfin::BLASFormData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "File___rshift__" "', argument " "2"" of type '" "dolfin::BLASFormData &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::BLASFormData * >(argp2);
  (arg1)->operator >>(*arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_File___rshift__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dolfin__Vector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_File___rshift____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dolfin__Matrix, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_File___rshift____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dolfin__Mesh, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_File___rshift____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dolfin__Function, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_File___rshift____SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dolfin__Sample, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_File___rshift____SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dolfin__FiniteElementSpec, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_File___rshift____SWIG_5(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dolfin__ParameterList, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_File___rshift____SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dolfin__BLASFormData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_File___rshift____SWIG_7(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_File___lshift____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::File *arg1 = (dolfin::File *) 0 ;
  dolfin::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:File___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "File___lshift__" "', argument " "1"" of type '" "dolfin::File *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::File * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "File___lshift__" "', argument " "2"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "File___lshift__" "', argument " "2"" of type '" "dolfin::Vector &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  (arg1)->operator <<(*arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_File___lshift____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::File *arg1 = (dolfin::File *) 0 ;
  dolfin::Matrix *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:File___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "File___lshift__" "', argument " "1"" of type '" "dolfin::File *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::File * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Matrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "File___lshift__" "', argument " "2"" of type '" "dolfin::Matrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "File___lshift__" "', argument " "2"" of type '" "dolfin::Matrix &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Matrix * >(argp2);
  (arg1)->operator <<(*arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_File___lshift____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::File *arg1 = (dolfin::File *) 0 ;
  dolfin::Mesh *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:File___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "File___lshift__" "', argument " "1"" of type '" "dolfin::File *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::File * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Mesh,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "File___lshift__" "', argument " "2"" of type '" "dolfin::Mesh &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "File___lshift__" "', argument " "2"" of type '" "dolfin::Mesh &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Mesh * >(argp2);
  (arg1)->operator <<(*arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_File___lshift____SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::File *arg1 = (dolfin::File *) 0 ;
  dolfin::Function *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:File___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "File___lshift__" "', argument " "1"" of type '" "dolfin::File *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::File * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Function,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "File___lshift__" "', argument " "2"" of type '" "dolfin::Function &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "File___lshift__" "', argument " "2"" of type '" "dolfin::Function &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Function * >(argp2);
  (arg1)->operator <<(*arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_File___lshift____SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::File *arg1 = (dolfin::File *) 0 ;
  dolfin::Sample *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:File___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "File___lshift__" "', argument " "1"" of type '" "dolfin::File *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::File * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Sample,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "File___lshift__" "', argument " "2"" of type '" "dolfin::Sample &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "File___lshift__" "', argument " "2"" of type '" "dolfin::Sample &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Sample * >(argp2);
  (arg1)->operator <<(*arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_File___lshift____SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::File *arg1 = (dolfin::File *) 0 ;
  dolfin::FiniteElementSpec *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:File___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "File___lshift__" "', argument " "1"" of type '" "dolfin::File *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::File * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__FiniteElementSpec,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "File___lshift__" "', argument " "2"" of type '" "dolfin::FiniteElementSpec &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "File___lshift__" "', argument " "2"" of type '" "dolfin::FiniteElementSpec &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::FiniteElementSpec * >(argp2);
  (arg1)->operator <<(*arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_File___lshift____SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::File *arg1 = (dolfin::File *) 0 ;
  dolfin::ParameterList *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:File___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "File___lshift__" "', argument " "1"" of type '" "dolfin::File *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::File * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__ParameterList,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "File___lshift__" "', argument " "2"" of type '" "dolfin::ParameterList &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "File___lshift__" "', argument " "2"" of type '" "dolfin::ParameterList &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::ParameterList * >(argp2);
  (arg1)->operator <<(*arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_File___lshift____SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::File *arg1 = (dolfin::File *) 0 ;
  dolfin::BLASFormData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:File___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__File, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "File___lshift__" "', argument " "1"" of type '" "dolfin::File *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::File * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__BLASFormData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "File___lshift__" "', argument " "2"" of type '" "dolfin::BLASFormData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "File___lshift__" "', argument " "2"" of type '" "dolfin::BLASFormData &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::BLASFormData * >(argp2);
  (arg1)->operator <<(*arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_File___lshift__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dolfin__Vector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_File___lshift____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dolfin__Matrix, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_File___lshift____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dolfin__Mesh, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_File___lshift____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dolfin__Function, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_File___lshift____SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dolfin__Sample, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_File___lshift____SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dolfin__FiniteElementSpec, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_File___lshift____SWIG_5(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dolfin__ParameterList, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_File___lshift____SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__File, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dolfin__BLASFormData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_File___lshift____SWIG_7(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *File_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__File, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Vector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Vector")) SWIG_fail;
  result = (dolfin::Vector *)new dolfin::Vector();
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::uint arg1 ;
  dolfin::Vector *result = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Vector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Vector" "', argument " "1"" of type '" "dolfin::uint""'");
  } 
  arg1 = static_cast<dolfin::uint >(val1);
  result = (dolfin::Vector *)new dolfin::Vector(arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Vec arg1 ;
  dolfin::Vector *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Vector",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Vec,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Vector" "', argument " "1"" of type '" "Vec""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Vector" "', argument " "1"" of type '" "Vec""'");
    } else {
      Vec * temp = reinterpret_cast<Vec * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (dolfin::Vector *)new dolfin::Vector(arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = 0 ;
  dolfin::Vector *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Vector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Vector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Vector" "', argument " "1"" of type '" "dolfin::Vector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Vector" "', argument " "1"" of type '" "dolfin::Vector const &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  result = (dolfin::Vector *)new dolfin::Vector((dolfin::Vector const &)*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Vector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Vec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Vector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_dolfin__Vector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Vector__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Vector__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_Vector'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Vector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Vector" "', argument " "1"" of type '" "dolfin::Vector *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_init(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
  dolfin::uint arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector_init",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_init" "', argument " "1"" of type '" "dolfin::Vector *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_init" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  (arg1)->init(arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_clear" "', argument " "1"" of type '" "dolfin::Vector *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  (arg1)->clear();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
  dolfin::uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_size" "', argument " "1"" of type '" "dolfin::Vector const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  result = (dolfin::uint)((dolfin::Vector const *)arg1)->size();
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_vec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
  Vec result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_vec",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_vec" "', argument " "1"" of type '" "dolfin::Vector const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  result = ((dolfin::Vector const *)arg1)->vec();
  
  resultobj = SWIG_NewPointerObj((new Vec(static_cast<const Vec& >(result))), SWIGTYPE_p_Vec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_array__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
  dolfin::real *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_array",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_array" "', argument " "1"" of type '" "dolfin::Vector *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  result = (dolfin::real *)(arg1)->array();
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_array__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
  dolfin::real *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_array",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_array" "', argument " "1"" of type '" "dolfin::Vector const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  result = (dolfin::real *)((dolfin::Vector const *)arg1)->array();
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_array(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Vector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Vector_array__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Vector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Vector_array__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Vector_array'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_restore__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
  dolfin::real *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector_restore",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_restore" "', argument " "1"" of type '" "dolfin::Vector *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vector_restore" "', argument " "2"" of type '" "dolfin::real []""'"); 
  } 
  arg2 = reinterpret_cast<dolfin::real * >(argp2);
  (arg1)->restore(arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_restore__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
  dolfin::real *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector_restore",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_restore" "', argument " "1"" of type '" "dolfin::Vector const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vector_restore" "', argument " "2"" of type '" "dolfin::real const []""'"); 
  } 
  arg2 = reinterpret_cast<dolfin::real * >(argp2);
  ((dolfin::Vector const *)arg1)->restore((double const (*))arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_restore(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Vector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector_restore__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Vector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector_restore__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Vector_restore'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_axpy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
  dolfin::real arg2 ;
  dolfin::Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Vector_axpy",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_axpy" "', argument " "1"" of type '" "dolfin::Vector const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_axpy" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Vector,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Vector_axpy" "', argument " "3"" of type '" "dolfin::Vector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vector_axpy" "', argument " "3"" of type '" "dolfin::Vector const &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Vector * >(argp3);
  ((dolfin::Vector const *)arg1)->axpy(arg2,(dolfin::Vector const &)*arg3);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_div(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
  dolfin::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector_div",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_div" "', argument " "1"" of type '" "dolfin::Vector *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vector_div" "', argument " "2"" of type '" "dolfin::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vector_div" "', argument " "2"" of type '" "dolfin::Vector const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  (arg1)->div((dolfin::Vector const &)*arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_mult(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
  dolfin::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector_mult",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_mult" "', argument " "1"" of type '" "dolfin::Vector *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vector_mult" "', argument " "2"" of type '" "dolfin::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vector_mult" "', argument " "2"" of type '" "dolfin::Vector const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  (arg1)->mult((dolfin::Vector const &)*arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
  dolfin::real *arg2 ;
  int *arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Vector_add",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_add" "', argument " "1"" of type '" "dolfin::Vector *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vector_add" "', argument " "2"" of type '" "dolfin::real const []""'"); 
  } 
  arg2 = reinterpret_cast<dolfin::real * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Vector_add" "', argument " "3"" of type '" "int const []""'"); 
  } 
  arg3 = reinterpret_cast<int * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Vector_add" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast<int >(val4);
  (arg1)->add((double const (*))arg2,(int const (*))arg3,arg4);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
  dolfin::real *arg2 ;
  int *arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Vector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_insert" "', argument " "1"" of type '" "dolfin::Vector *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vector_insert" "', argument " "2"" of type '" "dolfin::real const []""'"); 
  } 
  arg2 = reinterpret_cast<dolfin::real * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Vector_insert" "', argument " "3"" of type '" "int const []""'"); 
  } 
  arg3 = reinterpret_cast<int * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Vector_insert" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast<int >(val4);
  (arg1)->insert((double const (*))arg2,(int const (*))arg3,arg4);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
  dolfin::real *arg2 ;
  int *arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Vector_get",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_get" "', argument " "1"" of type '" "dolfin::Vector const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vector_get" "', argument " "2"" of type '" "dolfin::real []""'"); 
  } 
  arg2 = reinterpret_cast<dolfin::real * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Vector_get" "', argument " "3"" of type '" "int const []""'"); 
  } 
  arg3 = reinterpret_cast<int * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Vector_get" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast<int >(val4);
  ((dolfin::Vector const *)arg1)->get(arg2,(int const (*))arg3,arg4);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_apply(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_apply",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_apply" "', argument " "1"" of type '" "dolfin::Vector *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  (arg1)->apply();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector___call____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
  dolfin::uint arg2 ;
  SwigValueWrapper<dolfin::VectorElement > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector___call__" "', argument " "1"" of type '" "dolfin::Vector *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector___call__" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  result = (arg1)->operator ()(arg2);
  
  resultobj = SWIG_NewPointerObj((new dolfin::VectorElement(static_cast<const dolfin::VectorElement& >(result))), SWIGTYPE_p_dolfin__VectorElement, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector___call____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
  dolfin::uint arg2 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector___call__" "', argument " "1"" of type '" "dolfin::Vector const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector___call__" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  result = (dolfin::real)((dolfin::Vector const *)arg1)->operator ()(arg2);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector___call__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Vector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector___call____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Vector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector___call____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Vector___call__'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_copy__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
  dolfin::Vector *arg2 = 0 ;
  dolfin::Vector *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector_copy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_copy" "', argument " "1"" of type '" "dolfin::Vector *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vector_copy" "', argument " "2"" of type '" "dolfin::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vector_copy" "', argument " "2"" of type '" "dolfin::Vector const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  {
    dolfin::Vector const &_result_ref = (arg1)->operator =((dolfin::Vector const &)*arg2);
    result = (dolfin::Vector *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_copy__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
  dolfin::real arg2 ;
  dolfin::Vector *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector_copy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_copy" "', argument " "1"" of type '" "dolfin::Vector *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_copy" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  {
    dolfin::Vector const &_result_ref = (arg1)->operator =(arg2);
    result = (dolfin::Vector *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_copy(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Vector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__Vector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector_copy__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Vector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector_copy__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Vector_copy'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
  dolfin::Vector *arg2 = 0 ;
  dolfin::Vector *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector___iadd__" "', argument " "1"" of type '" "dolfin::Vector *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vector___iadd__" "', argument " "2"" of type '" "dolfin::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vector___iadd__" "', argument " "2"" of type '" "dolfin::Vector const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  {
    dolfin::Vector const &_result_ref = (arg1)->operator +=((dolfin::Vector const &)*arg2);
    result = (dolfin::Vector *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
  dolfin::Vector *arg2 = 0 ;
  dolfin::Vector *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector___isub__" "', argument " "1"" of type '" "dolfin::Vector *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vector___isub__" "', argument " "2"" of type '" "dolfin::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vector___isub__" "', argument " "2"" of type '" "dolfin::Vector const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  {
    dolfin::Vector const &_result_ref = (arg1)->operator -=((dolfin::Vector const &)*arg2);
    result = (dolfin::Vector *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
  dolfin::real arg2 ;
  dolfin::Vector *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector___imul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector___imul__" "', argument " "1"" of type '" "dolfin::Vector *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector___imul__" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  {
    dolfin::Vector const &_result_ref = (arg1)->operator *=(arg2);
    result = (dolfin::Vector *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector___idiv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
  dolfin::real arg2 ;
  dolfin::Vector *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector___idiv__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector___idiv__" "', argument " "1"" of type '" "dolfin::Vector *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector___idiv__" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  {
    dolfin::Vector const &_result_ref = (arg1)->operator /=(arg2);
    result = (dolfin::Vector *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector___mul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
  dolfin::Vector *arg2 = 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector___mul__" "', argument " "1"" of type '" "dolfin::Vector *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vector___mul__" "', argument " "2"" of type '" "dolfin::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vector___mul__" "', argument " "2"" of type '" "dolfin::Vector const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  result = (dolfin::real)(arg1)->operator *((dolfin::Vector const &)*arg2);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_norm__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
  dolfin::Vector::NormType arg2 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector_norm",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_norm" "', argument " "1"" of type '" "dolfin::Vector const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_norm" "', argument " "2"" of type '" "dolfin::Vector::NormType""'");
  } 
  arg2 = static_cast<dolfin::Vector::NormType >(val2);
  result = (dolfin::real)((dolfin::Vector const *)arg1)->norm(arg2);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_norm__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_norm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_norm" "', argument " "1"" of type '" "dolfin::Vector const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  result = (dolfin::real)((dolfin::Vector const *)arg1)->norm();
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_norm(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Vector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Vector_norm__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Vector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector_norm__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Vector_norm'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_sum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_sum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_sum" "', argument " "1"" of type '" "dolfin::Vector const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  result = (dolfin::real)((dolfin::Vector const *)arg1)->sum();
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_max(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_max",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_max" "', argument " "1"" of type '" "dolfin::Vector const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  result = (dolfin::real)((dolfin::Vector const *)arg1)->max();
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_min(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_min",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_min" "', argument " "1"" of type '" "dolfin::Vector const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  result = (dolfin::real)((dolfin::Vector const *)arg1)->min();
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_disp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vector_disp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_disp" "', argument " "1"" of type '" "dolfin::Vector const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  ((dolfin::Vector const *)arg1)->disp();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
  dolfin::uint arg2 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector___getitem__" "', argument " "1"" of type '" "dolfin::Vector const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector___getitem__" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  result = (dolfin::real)((dolfin::Vector const *)arg1)->getval(arg2);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
  dolfin::uint arg2 ;
  dolfin::real arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Vector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector___setitem__" "', argument " "1"" of type '" "dolfin::Vector *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector___setitem__" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vector___setitem__" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  (arg1)->setval(arg2,arg3);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vector_addval(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
  dolfin::uint arg2 ;
  dolfin::real arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Vector_addval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector_addval" "', argument " "1"" of type '" "dolfin::Vector *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector_addval" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vector_addval" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  (arg1)->addval(arg2,arg3);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Vector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__Vector, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_VectorElement__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::uint arg1 ;
  dolfin::Vector *arg2 = 0 ;
  dolfin::VectorElement *result = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_VectorElement",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorElement" "', argument " "1"" of type '" "dolfin::uint""'");
  } 
  arg1 = static_cast<dolfin::uint >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VectorElement" "', argument " "2"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorElement" "', argument " "2"" of type '" "dolfin::Vector &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  result = (dolfin::VectorElement *)new dolfin::VectorElement(arg1,*arg2);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__VectorElement, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorElement__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VectorElement *arg1 = 0 ;
  dolfin::VectorElement *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorElement",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__VectorElement,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorElement" "', argument " "1"" of type '" "dolfin::VectorElement const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorElement" "', argument " "1"" of type '" "dolfin::VectorElement const &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VectorElement * >(argp1);
  result = (dolfin::VectorElement *)new dolfin::VectorElement((dolfin::VectorElement const &)*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__VectorElement, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorElement(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_dolfin__VectorElement, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorElement__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dolfin__Vector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VectorElement__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_VectorElement'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorElement___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VectorElement *arg1 = (dolfin::VectorElement *) 0 ;
  dolfin::real arg2 ;
  dolfin::VectorElement *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorElement___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VectorElement, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorElement___iadd__" "', argument " "1"" of type '" "dolfin::VectorElement *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VectorElement * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorElement___iadd__" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  {
    dolfin::VectorElement const &_result_ref = (arg1)->operator +=(arg2);
    result = (dolfin::VectorElement *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__VectorElement, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorElement___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VectorElement *arg1 = (dolfin::VectorElement *) 0 ;
  dolfin::real arg2 ;
  dolfin::VectorElement *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorElement___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VectorElement, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorElement___isub__" "', argument " "1"" of type '" "dolfin::VectorElement *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VectorElement * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorElement___isub__" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  {
    dolfin::VectorElement const &_result_ref = (arg1)->operator -=(arg2);
    result = (dolfin::VectorElement *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__VectorElement, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorElement___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VectorElement *arg1 = (dolfin::VectorElement *) 0 ;
  dolfin::real arg2 ;
  dolfin::VectorElement *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorElement___imul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VectorElement, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorElement___imul__" "', argument " "1"" of type '" "dolfin::VectorElement *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VectorElement * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorElement___imul__" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  {
    dolfin::VectorElement const &_result_ref = (arg1)->operator *=(arg2);
    result = (dolfin::VectorElement *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__VectorElement, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VectorElement_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__VectorElement, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Matrix__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Matrix *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Matrix")) SWIG_fail;
  result = (dolfin::Matrix *)new dolfin::Matrix();
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Matrix__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Matrix::Type arg1 ;
  dolfin::Matrix *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Matrix",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Matrix" "', argument " "1"" of type '" "dolfin::Matrix::Type""'");
  } 
  arg1 = static_cast<dolfin::Matrix::Type >(val1);
  result = (dolfin::Matrix *)new dolfin::Matrix(arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Matrix__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Mat arg1 ;
  dolfin::Matrix *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Matrix",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Mat,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Matrix" "', argument " "1"" of type '" "Mat""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Matrix" "', argument " "1"" of type '" "Mat""'");
    } else {
      Mat * temp = reinterpret_cast<Mat * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (dolfin::Matrix *)new dolfin::Matrix(arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Matrix__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::uint arg1 ;
  dolfin::uint arg2 ;
  dolfin::Matrix *result = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Matrix",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Matrix" "', argument " "1"" of type '" "dolfin::uint""'");
  } 
  arg1 = static_cast<dolfin::uint >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Matrix" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  result = (dolfin::Matrix *)new dolfin::Matrix(arg1,arg2);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Matrix__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::uint arg1 ;
  dolfin::uint arg2 ;
  dolfin::Matrix::Type arg3 ;
  dolfin::Matrix *result = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Matrix",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Matrix" "', argument " "1"" of type '" "dolfin::uint""'");
  } 
  arg1 = static_cast<dolfin::uint >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Matrix" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Matrix" "', argument " "3"" of type '" "dolfin::Matrix::Type""'");
  } 
  arg3 = static_cast<dolfin::Matrix::Type >(val3);
  result = (dolfin::Matrix *)new dolfin::Matrix(arg1,arg2,arg3);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Matrix__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Matrix *arg1 = 0 ;
  dolfin::Matrix *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Matrix",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Matrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Matrix" "', argument " "1"" of type '" "dolfin::Matrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Matrix" "', argument " "1"" of type '" "dolfin::Matrix const &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Matrix * >(argp1);
  result = (dolfin::Matrix *)new dolfin::Matrix((dolfin::Matrix const &)*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Matrix(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Matrix__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Mat, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Matrix__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_dolfin__Matrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Matrix__SWIG_5(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Matrix__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Matrix__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Matrix__SWIG_4(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_Matrix'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Matrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Matrix",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Matrix" "', argument " "1"" of type '" "dolfin::Matrix *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Matrix * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_init__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
  dolfin::uint arg2 ;
  dolfin::uint arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Matrix_init",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_init" "', argument " "1"" of type '" "dolfin::Matrix *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Matrix * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix_init" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix_init" "', argument " "3"" of type '" "dolfin::uint""'");
  } 
  arg3 = static_cast<dolfin::uint >(val3);
  (arg1)->init(arg2,arg3);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_init__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
  dolfin::uint arg2 ;
  dolfin::uint arg3 ;
  dolfin::uint arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Matrix_init",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_init" "', argument " "1"" of type '" "dolfin::Matrix *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Matrix * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix_init" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix_init" "', argument " "3"" of type '" "dolfin::uint""'");
  } 
  arg3 = static_cast<dolfin::uint >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Matrix_init" "', argument " "4"" of type '" "dolfin::uint""'");
  } 
  arg4 = static_cast<dolfin::uint >(val4);
  (arg1)->init(arg2,arg3,arg4);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_init__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
  dolfin::uint arg2 ;
  dolfin::uint arg3 ;
  dolfin::uint arg4 ;
  dolfin::uint arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Matrix_init",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_init" "', argument " "1"" of type '" "dolfin::Matrix *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Matrix * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix_init" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix_init" "', argument " "3"" of type '" "dolfin::uint""'");
  } 
  arg3 = static_cast<dolfin::uint >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Matrix_init" "', argument " "4"" of type '" "dolfin::uint""'");
  } 
  arg4 = static_cast<dolfin::uint >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Matrix_init" "', argument " "5"" of type '" "dolfin::uint""'");
  } 
  arg5 = static_cast<dolfin::uint >(val5);
  (arg1)->init(arg2,arg3,arg4,arg5);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_init(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Matrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Matrix_init__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Matrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Matrix_init__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Matrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Matrix_init__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Matrix_init'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
  dolfin::uint arg2 ;
  dolfin::uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Matrix_size",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_size" "', argument " "1"" of type '" "dolfin::Matrix const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Matrix * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix_size" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  result = (dolfin::uint)((dolfin::Matrix const *)arg1)->size(arg2);
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_nz(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
  dolfin::uint arg2 ;
  dolfin::uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Matrix_nz",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_nz" "', argument " "1"" of type '" "dolfin::Matrix const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Matrix * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix_nz" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  result = (dolfin::uint)((dolfin::Matrix const *)arg1)->nz(arg2);
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_nzsum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
  dolfin::uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Matrix_nzsum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_nzsum" "', argument " "1"" of type '" "dolfin::Matrix const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Matrix * >(argp1);
  result = (dolfin::uint)((dolfin::Matrix const *)arg1)->nzsum();
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_nzmax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
  dolfin::uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Matrix_nzmax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_nzmax" "', argument " "1"" of type '" "dolfin::Matrix const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Matrix * >(argp1);
  result = (dolfin::uint)((dolfin::Matrix const *)arg1)->nzmax();
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
  dolfin::real *arg2 ;
  int *arg3 ;
  int arg4 ;
  int *arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Matrix_add",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_add" "', argument " "1"" of type '" "dolfin::Matrix *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Matrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matrix_add" "', argument " "2"" of type '" "dolfin::real const []""'"); 
  } 
  arg2 = reinterpret_cast<dolfin::real * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Matrix_add" "', argument " "3"" of type '" "int const []""'"); 
  } 
  arg3 = reinterpret_cast<int * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Matrix_add" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast<int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Matrix_add" "', argument " "5"" of type '" "int const []""'"); 
  } 
  arg5 = reinterpret_cast<int * >(argp5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Matrix_add" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast<int >(val6);
  (arg1)->add((double const (*))arg2,(int const (*))arg3,arg4,(int const (*))arg5,arg6);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_ident(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
  int *arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Matrix_ident",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_ident" "', argument " "1"" of type '" "dolfin::Matrix *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Matrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matrix_ident" "', argument " "2"" of type '" "int const []""'"); 
  } 
  arg2 = reinterpret_cast<int * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix_ident" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast<int >(val3);
  (arg1)->ident((int const (*))arg2,arg3);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_mult__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
  dolfin::Vector *arg2 = 0 ;
  dolfin::Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Matrix_mult",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_mult" "', argument " "1"" of type '" "dolfin::Matrix const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Matrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matrix_mult" "', argument " "2"" of type '" "dolfin::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matrix_mult" "', argument " "2"" of type '" "dolfin::Vector const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Matrix_mult" "', argument " "3"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matrix_mult" "', argument " "3"" of type '" "dolfin::Vector &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Vector * >(argp3);
  ((dolfin::Matrix const *)arg1)->mult((dolfin::Vector const &)*arg2,*arg3);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_mult__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
  dolfin::Vector *arg2 = 0 ;
  dolfin::uint arg3 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Matrix_mult",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_mult" "', argument " "1"" of type '" "dolfin::Matrix const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Matrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matrix_mult" "', argument " "2"" of type '" "dolfin::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Matrix_mult" "', argument " "2"" of type '" "dolfin::Vector const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix_mult" "', argument " "3"" of type '" "dolfin::uint""'");
  } 
  arg3 = static_cast<dolfin::uint >(val3);
  result = (dolfin::real)((dolfin::Matrix const *)arg1)->mult((dolfin::Vector const &)*arg2,arg3);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_mult__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
  dolfin::real *arg2 ;
  dolfin::uint arg3 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Matrix_mult",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_mult" "', argument " "1"" of type '" "dolfin::Matrix const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Matrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Matrix_mult" "', argument " "2"" of type '" "dolfin::real const []""'"); 
  } 
  arg2 = reinterpret_cast<dolfin::real * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix_mult" "', argument " "3"" of type '" "dolfin::uint""'");
  } 
  arg3 = static_cast<dolfin::uint >(val3);
  result = (dolfin::real)((dolfin::Matrix const *)arg1)->mult((double const (*))arg2,arg3);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_mult(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Matrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__Vector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_dolfin__Vector, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Matrix_mult__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Matrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__Vector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Matrix_mult__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Matrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Matrix_mult__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Matrix_mult'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_norm__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
  dolfin::Matrix::Norm arg2 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Matrix_norm",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_norm" "', argument " "1"" of type '" "dolfin::Matrix const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Matrix * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix_norm" "', argument " "2"" of type '" "dolfin::Matrix::Norm""'");
  } 
  arg2 = static_cast<dolfin::Matrix::Norm >(val2);
  result = (dolfin::real)((dolfin::Matrix const *)arg1)->norm(arg2);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_norm__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Matrix_norm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_norm" "', argument " "1"" of type '" "dolfin::Matrix const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Matrix * >(argp1);
  result = (dolfin::real)((dolfin::Matrix const *)arg1)->norm();
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_norm(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Matrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Matrix_norm__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Matrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Matrix_norm__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Matrix_norm'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_apply(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Matrix_apply",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_apply" "', argument " "1"" of type '" "dolfin::Matrix *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Matrix * >(argp1);
  (arg1)->apply();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_getMatrixType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
  dolfin::Matrix::Type result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Matrix_getMatrixType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_getMatrixType" "', argument " "1"" of type '" "dolfin::Matrix const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Matrix * >(argp1);
  result = (dolfin::Matrix::Type)((dolfin::Matrix const *)arg1)->getMatrixType();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_mat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
  Mat result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Matrix_mat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_mat" "', argument " "1"" of type '" "dolfin::Matrix const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Matrix * >(argp1);
  result = ((dolfin::Matrix const *)arg1)->mat();
  
  resultobj = SWIG_NewPointerObj((new Mat(static_cast<const Mat& >(result))), SWIGTYPE_p_Mat, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_disp__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
  bool arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Matrix_disp",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_disp" "', argument " "1"" of type '" "dolfin::Matrix const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Matrix * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix_disp" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast<bool >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix_disp" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast<int >(val3);
  ((dolfin::Matrix const *)arg1)->disp(arg2,arg3);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_disp__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Matrix_disp",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_disp" "', argument " "1"" of type '" "dolfin::Matrix const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Matrix * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix_disp" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast<bool >(val2);
  ((dolfin::Matrix const *)arg1)->disp(arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_disp__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Matrix_disp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_disp" "', argument " "1"" of type '" "dolfin::Matrix const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Matrix * >(argp1);
  ((dolfin::Matrix const *)arg1)->disp();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_disp(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Matrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Matrix_disp__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Matrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Matrix_disp__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Matrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Matrix_disp__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Matrix_disp'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix___call____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
  dolfin::uint arg2 ;
  dolfin::uint arg3 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Matrix___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix___call__" "', argument " "1"" of type '" "dolfin::Matrix const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Matrix * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix___call__" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix___call__" "', argument " "3"" of type '" "dolfin::uint""'");
  } 
  arg3 = static_cast<dolfin::uint >(val3);
  result = (dolfin::real)((dolfin::Matrix const *)arg1)->operator ()(arg2,arg3);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix___call____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
  dolfin::uint arg2 ;
  dolfin::uint arg3 ;
  SwigValueWrapper<dolfin::MatrixElement > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Matrix___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix___call__" "', argument " "1"" of type '" "dolfin::Matrix *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Matrix * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix___call__" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix___call__" "', argument " "3"" of type '" "dolfin::uint""'");
  } 
  arg3 = static_cast<dolfin::uint >(val3);
  result = (arg1)->operator ()(arg2,arg3);
  
  resultobj = SWIG_NewPointerObj((new dolfin::MatrixElement(static_cast<const dolfin::MatrixElement& >(result))), SWIGTYPE_p_dolfin__MatrixElement, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix___call__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Matrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Matrix___call____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Matrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Matrix___call____SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Matrix___call__'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_getval(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
  dolfin::uint arg2 ;
  dolfin::uint arg3 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Matrix_getval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_getval" "', argument " "1"" of type '" "dolfin::Matrix const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Matrix * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix_getval" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix_getval" "', argument " "3"" of type '" "dolfin::uint""'");
  } 
  arg3 = static_cast<dolfin::uint >(val3);
  result = (dolfin::real)((dolfin::Matrix const *)arg1)->getval(arg2,arg3);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_setval(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
  dolfin::uint arg2 ;
  dolfin::uint arg3 ;
  dolfin::real arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Matrix_setval",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_setval" "', argument " "1"" of type '" "dolfin::Matrix *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Matrix * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix_setval" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix_setval" "', argument " "3"" of type '" "dolfin::uint""'");
  } 
  arg3 = static_cast<dolfin::uint >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Matrix_setval" "', argument " "4"" of type '" "dolfin::real""'");
  } 
  arg4 = static_cast<dolfin::real >(val4);
  (arg1)->setval(arg2,arg3,arg4);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix_addval(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
  dolfin::uint arg2 ;
  dolfin::uint arg3 ;
  dolfin::real arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Matrix_addval",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Matrix_addval" "', argument " "1"" of type '" "dolfin::Matrix *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Matrix * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Matrix_addval" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Matrix_addval" "', argument " "3"" of type '" "dolfin::uint""'");
  } 
  arg3 = static_cast<dolfin::uint >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Matrix_addval" "', argument " "4"" of type '" "dolfin::real""'");
  } 
  arg4 = static_cast<dolfin::real >(val4);
  (arg1)->addval(arg2,arg3,arg4);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Matrix_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__Matrix, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MatrixElement__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::uint arg1 ;
  dolfin::uint arg2 ;
  dolfin::Matrix *arg3 = 0 ;
  dolfin::MatrixElement *result = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_MatrixElement",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MatrixElement" "', argument " "1"" of type '" "dolfin::uint""'");
  } 
  arg1 = static_cast<dolfin::uint >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MatrixElement" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Matrix,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_MatrixElement" "', argument " "3"" of type '" "dolfin::Matrix &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MatrixElement" "', argument " "3"" of type '" "dolfin::Matrix &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Matrix * >(argp3);
  result = (dolfin::MatrixElement *)new dolfin::MatrixElement(arg1,arg2,*arg3);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__MatrixElement, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MatrixElement__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MatrixElement *arg1 = 0 ;
  dolfin::MatrixElement *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MatrixElement",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__MatrixElement,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MatrixElement" "', argument " "1"" of type '" "dolfin::MatrixElement const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MatrixElement" "', argument " "1"" of type '" "dolfin::MatrixElement const &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MatrixElement * >(argp1);
  result = (dolfin::MatrixElement *)new dolfin::MatrixElement((dolfin::MatrixElement const &)*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__MatrixElement, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MatrixElement(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_dolfin__MatrixElement, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MatrixElement__SWIG_1(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_dolfin__Matrix, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_MatrixElement__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_MatrixElement'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixElement___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MatrixElement *arg1 = (dolfin::MatrixElement *) 0 ;
  dolfin::real arg2 ;
  dolfin::MatrixElement *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatrixElement___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MatrixElement, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixElement___iadd__" "', argument " "1"" of type '" "dolfin::MatrixElement *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MatrixElement * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatrixElement___iadd__" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  {
    dolfin::MatrixElement const &_result_ref = (arg1)->operator +=(arg2);
    result = (dolfin::MatrixElement *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__MatrixElement, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixElement___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MatrixElement *arg1 = (dolfin::MatrixElement *) 0 ;
  dolfin::real arg2 ;
  dolfin::MatrixElement *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatrixElement___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MatrixElement, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixElement___isub__" "', argument " "1"" of type '" "dolfin::MatrixElement *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MatrixElement * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatrixElement___isub__" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  {
    dolfin::MatrixElement const &_result_ref = (arg1)->operator -=(arg2);
    result = (dolfin::MatrixElement *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__MatrixElement, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixElement___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MatrixElement *arg1 = (dolfin::MatrixElement *) 0 ;
  dolfin::real arg2 ;
  dolfin::MatrixElement *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatrixElement___imul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MatrixElement, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixElement___imul__" "', argument " "1"" of type '" "dolfin::MatrixElement *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MatrixElement * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatrixElement___imul__" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  {
    dolfin::MatrixElement const &_result_ref = (arg1)->operator *=(arg2);
    result = (dolfin::MatrixElement *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__MatrixElement, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MatrixElement_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__MatrixElement, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_VirtualMatrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VirtualMatrix *arg1 = (dolfin::VirtualMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VirtualMatrix",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VirtualMatrix, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VirtualMatrix" "', argument " "1"" of type '" "dolfin::VirtualMatrix *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VirtualMatrix * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VirtualMatrix_init__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VirtualMatrix *arg1 = (dolfin::VirtualMatrix *) 0 ;
  dolfin::Vector *arg2 = 0 ;
  dolfin::Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VirtualMatrix_init",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VirtualMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VirtualMatrix_init" "', argument " "1"" of type '" "dolfin::VirtualMatrix *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VirtualMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VirtualMatrix_init" "', argument " "2"" of type '" "dolfin::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VirtualMatrix_init" "', argument " "2"" of type '" "dolfin::Vector const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Vector,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VirtualMatrix_init" "', argument " "3"" of type '" "dolfin::Vector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VirtualMatrix_init" "', argument " "3"" of type '" "dolfin::Vector const &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Vector * >(argp3);
  (arg1)->init((dolfin::Vector const &)*arg2,(dolfin::Vector const &)*arg3);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VirtualMatrix_init__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VirtualMatrix *arg1 = (dolfin::VirtualMatrix *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VirtualMatrix_init",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VirtualMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VirtualMatrix_init" "', argument " "1"" of type '" "dolfin::VirtualMatrix *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VirtualMatrix * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VirtualMatrix_init" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VirtualMatrix_init" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast<int >(val3);
  (arg1)->init(arg2,arg3);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VirtualMatrix_init(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__VirtualMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__Vector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_dolfin__Vector, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VirtualMatrix_init__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__VirtualMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VirtualMatrix_init__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'VirtualMatrix_init'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_VirtualMatrix_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VirtualMatrix *arg1 = (dolfin::VirtualMatrix *) 0 ;
  dolfin::uint arg2 ;
  dolfin::uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VirtualMatrix_size",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VirtualMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VirtualMatrix_size" "', argument " "1"" of type '" "dolfin::VirtualMatrix const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VirtualMatrix * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VirtualMatrix_size" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  result = (dolfin::uint)((dolfin::VirtualMatrix const *)arg1)->size(arg2);
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VirtualMatrix_mat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VirtualMatrix *arg1 = (dolfin::VirtualMatrix *) 0 ;
  Mat result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VirtualMatrix_mat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VirtualMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VirtualMatrix_mat" "', argument " "1"" of type '" "dolfin::VirtualMatrix const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VirtualMatrix * >(argp1);
  result = ((dolfin::VirtualMatrix const *)arg1)->mat();
  
  resultobj = SWIG_NewPointerObj((new Mat(static_cast<const Mat& >(result))), SWIGTYPE_p_Mat, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VirtualMatrix_mult(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VirtualMatrix *arg1 = (dolfin::VirtualMatrix *) 0 ;
  dolfin::Vector *arg2 = 0 ;
  dolfin::Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VirtualMatrix_mult",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VirtualMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VirtualMatrix_mult" "', argument " "1"" of type '" "dolfin::VirtualMatrix const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VirtualMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VirtualMatrix_mult" "', argument " "2"" of type '" "dolfin::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VirtualMatrix_mult" "', argument " "2"" of type '" "dolfin::Vector const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VirtualMatrix_mult" "', argument " "3"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VirtualMatrix_mult" "', argument " "3"" of type '" "dolfin::Vector &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Vector * >(argp3);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    ((dolfin::VirtualMatrix const *)arg1)->mult((dolfin::Vector const &)*arg2,*arg3);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VirtualMatrix_disp__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VirtualMatrix *arg1 = (dolfin::VirtualMatrix *) 0 ;
  bool arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VirtualMatrix_disp",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VirtualMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VirtualMatrix_disp" "', argument " "1"" of type '" "dolfin::VirtualMatrix const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VirtualMatrix * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VirtualMatrix_disp" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast<bool >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VirtualMatrix_disp" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast<int >(val3);
  ((dolfin::VirtualMatrix const *)arg1)->disp(arg2,arg3);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VirtualMatrix_disp__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VirtualMatrix *arg1 = (dolfin::VirtualMatrix *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VirtualMatrix_disp",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VirtualMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VirtualMatrix_disp" "', argument " "1"" of type '" "dolfin::VirtualMatrix const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VirtualMatrix * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VirtualMatrix_disp" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast<bool >(val2);
  ((dolfin::VirtualMatrix const *)arg1)->disp(arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VirtualMatrix_disp__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VirtualMatrix *arg1 = (dolfin::VirtualMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VirtualMatrix_disp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VirtualMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VirtualMatrix_disp" "', argument " "1"" of type '" "dolfin::VirtualMatrix const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VirtualMatrix * >(argp1);
  ((dolfin::VirtualMatrix const *)arg1)->disp();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VirtualMatrix_disp(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__VirtualMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_VirtualMatrix_disp__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__VirtualMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VirtualMatrix_disp__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__VirtualMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VirtualMatrix_disp__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'VirtualMatrix_disp'");
  return NULL;
}


SWIGINTERN PyObject *VirtualMatrix_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__VirtualMatrix, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_GMRES__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::GMRES *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_GMRES")) SWIG_fail;
  result = (dolfin::GMRES *)new dolfin::GMRES();
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__GMRES, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GMRES__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Preconditioner::Type arg1 ;
  dolfin::GMRES *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GMRES",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Preconditioner__Type,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GMRES" "', argument " "1"" of type '" "Preconditioner::Type""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GMRES" "', argument " "1"" of type '" "Preconditioner::Type""'");
    } else {
      Preconditioner::Type * temp = reinterpret_cast<Preconditioner::Type * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (dolfin::GMRES *)new dolfin::GMRES(arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__GMRES, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GMRES__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Preconditioner *arg1 = 0 ;
  dolfin::GMRES *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GMRES",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Preconditioner,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GMRES" "', argument " "1"" of type '" "Preconditioner &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GMRES" "', argument " "1"" of type '" "Preconditioner &""'"); 
  }
  arg1 = reinterpret_cast<Preconditioner * >(argp1);
  result = (dolfin::GMRES *)new dolfin::GMRES(*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__GMRES, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GMRES(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_GMRES__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Preconditioner__Type, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GMRES__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Preconditioner, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GMRES__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_GMRES'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GMRES(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::GMRES *arg1 = (dolfin::GMRES *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GMRES",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__GMRES, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GMRES" "', argument " "1"" of type '" "dolfin::GMRES *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::GMRES * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GMRES_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__GMRES, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_LinearSolver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::LinearSolver *arg1 = (dolfin::LinearSolver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LinearSolver",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__LinearSolver, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LinearSolver" "', argument " "1"" of type '" "dolfin::LinearSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::LinearSolver * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearSolver_solve__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::LinearSolver *arg1 = (dolfin::LinearSolver *) 0 ;
  dolfin::Matrix *arg2 = 0 ;
  dolfin::Vector *arg3 = 0 ;
  dolfin::Vector *arg4 = 0 ;
  dolfin::uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:LinearSolver_solve",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__LinearSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearSolver_solve" "', argument " "1"" of type '" "dolfin::LinearSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::LinearSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Matrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinearSolver_solve" "', argument " "2"" of type '" "dolfin::Matrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinearSolver_solve" "', argument " "2"" of type '" "dolfin::Matrix const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Matrix * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LinearSolver_solve" "', argument " "3"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinearSolver_solve" "', argument " "3"" of type '" "dolfin::Vector &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Vector * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_dolfin__Vector,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "LinearSolver_solve" "', argument " "4"" of type '" "dolfin::Vector const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinearSolver_solve" "', argument " "4"" of type '" "dolfin::Vector const &""'"); 
  }
  arg4 = reinterpret_cast<dolfin::Vector * >(argp4);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::uint)(arg1)->solve((dolfin::Matrix const &)*arg2,*arg3,(dolfin::Vector const &)*arg4);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearSolver_solve__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::LinearSolver *arg1 = (dolfin::LinearSolver *) 0 ;
  dolfin::VirtualMatrix *arg2 = 0 ;
  dolfin::Vector *arg3 = 0 ;
  dolfin::Vector *arg4 = 0 ;
  dolfin::uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:LinearSolver_solve",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__LinearSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearSolver_solve" "', argument " "1"" of type '" "dolfin::LinearSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::LinearSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__VirtualMatrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinearSolver_solve" "', argument " "2"" of type '" "dolfin::VirtualMatrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinearSolver_solve" "', argument " "2"" of type '" "dolfin::VirtualMatrix const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::VirtualMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LinearSolver_solve" "', argument " "3"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinearSolver_solve" "', argument " "3"" of type '" "dolfin::Vector &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Vector * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_dolfin__Vector,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "LinearSolver_solve" "', argument " "4"" of type '" "dolfin::Vector const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinearSolver_solve" "', argument " "4"" of type '" "dolfin::Vector const &""'"); 
  }
  arg4 = reinterpret_cast<dolfin::Vector * >(argp4);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::uint)(arg1)->solve((dolfin::VirtualMatrix const &)*arg2,*arg3,(dolfin::Vector const &)*arg4);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearSolver_solve(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__LinearSolver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__Matrix, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_dolfin__Vector, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_dolfin__Vector, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_LinearSolver_solve__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__LinearSolver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__VirtualMatrix, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_dolfin__Vector, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_dolfin__Vector, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_LinearSolver_solve__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'LinearSolver_solve'");
  return NULL;
}


SWIGINTERN PyObject *LinearSolver_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__LinearSolver, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LU(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::LU *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_LU")) SWIG_fail;
  result = (dolfin::LU *)new dolfin::LU();
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__LU, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LU(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::LU *arg1 = (dolfin::LU *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LU",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__LU, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LU" "', argument " "1"" of type '" "dolfin::LU *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::LU * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LU_solve__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::LU *arg1 = (dolfin::LU *) 0 ;
  dolfin::Matrix *arg2 = 0 ;
  dolfin::Vector *arg3 = 0 ;
  dolfin::Vector *arg4 = 0 ;
  dolfin::uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:LU_solve",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__LU, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LU_solve" "', argument " "1"" of type '" "dolfin::LU *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::LU * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Matrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LU_solve" "', argument " "2"" of type '" "dolfin::Matrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LU_solve" "', argument " "2"" of type '" "dolfin::Matrix const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Matrix * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LU_solve" "', argument " "3"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LU_solve" "', argument " "3"" of type '" "dolfin::Vector &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Vector * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_dolfin__Vector,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "LU_solve" "', argument " "4"" of type '" "dolfin::Vector const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LU_solve" "', argument " "4"" of type '" "dolfin::Vector const &""'"); 
  }
  arg4 = reinterpret_cast<dolfin::Vector * >(argp4);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::uint)(arg1)->solve((dolfin::Matrix const &)*arg2,*arg3,(dolfin::Vector const &)*arg4);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LU_solve__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::LU *arg1 = (dolfin::LU *) 0 ;
  dolfin::VirtualMatrix *arg2 = 0 ;
  dolfin::Vector *arg3 = 0 ;
  dolfin::Vector *arg4 = 0 ;
  dolfin::uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:LU_solve",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__LU, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LU_solve" "', argument " "1"" of type '" "dolfin::LU *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::LU * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__VirtualMatrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LU_solve" "', argument " "2"" of type '" "dolfin::VirtualMatrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LU_solve" "', argument " "2"" of type '" "dolfin::VirtualMatrix const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::VirtualMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LU_solve" "', argument " "3"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LU_solve" "', argument " "3"" of type '" "dolfin::Vector &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Vector * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_dolfin__Vector,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "LU_solve" "', argument " "4"" of type '" "dolfin::Vector const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LU_solve" "', argument " "4"" of type '" "dolfin::Vector const &""'"); 
  }
  arg4 = reinterpret_cast<dolfin::Vector * >(argp4);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::uint)(arg1)->solve((dolfin::VirtualMatrix const &)*arg2,*arg3,(dolfin::Vector const &)*arg4);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LU_solve(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__LU, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__Matrix, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_dolfin__Vector, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_dolfin__Vector, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_LU_solve__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__LU, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__VirtualMatrix, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_dolfin__Vector, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_dolfin__Vector, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_LU_solve__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'LU_solve'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_LU_disp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::LU *arg1 = (dolfin::LU *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LU_disp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__LU, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LU_disp" "', argument " "1"" of type '" "dolfin::LU const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::LU * >(argp1);
  ((dolfin::LU const *)arg1)->disp();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LU_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__LU, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_KrylovSolver__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::KrylovSolver *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_KrylovSolver")) SWIG_fail;
  result = (dolfin::KrylovSolver *)new dolfin::KrylovSolver();
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__KrylovSolver, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KrylovSolver__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::KrylovSolver::Type arg1 ;
  dolfin::KrylovSolver *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_KrylovSolver",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_KrylovSolver" "', argument " "1"" of type '" "dolfin::KrylovSolver::Type""'");
  } 
  arg1 = static_cast<dolfin::KrylovSolver::Type >(val1);
  result = (dolfin::KrylovSolver *)new dolfin::KrylovSolver(arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__KrylovSolver, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KrylovSolver__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Preconditioner::Type arg1 ;
  dolfin::KrylovSolver *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_KrylovSolver",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Preconditioner__Type,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_KrylovSolver" "', argument " "1"" of type '" "Preconditioner::Type""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KrylovSolver" "', argument " "1"" of type '" "Preconditioner::Type""'");
    } else {
      Preconditioner::Type * temp = reinterpret_cast<Preconditioner::Type * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (dolfin::KrylovSolver *)new dolfin::KrylovSolver(arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__KrylovSolver, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KrylovSolver__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Preconditioner *arg1 = 0 ;
  dolfin::KrylovSolver *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_KrylovSolver",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Preconditioner,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_KrylovSolver" "', argument " "1"" of type '" "Preconditioner &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KrylovSolver" "', argument " "1"" of type '" "Preconditioner &""'"); 
  }
  arg1 = reinterpret_cast<Preconditioner * >(argp1);
  result = (dolfin::KrylovSolver *)new dolfin::KrylovSolver(*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__KrylovSolver, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KrylovSolver__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::KrylovSolver::Type arg1 ;
  Preconditioner::Type arg2 ;
  dolfin::KrylovSolver *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_KrylovSolver",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_KrylovSolver" "', argument " "1"" of type '" "dolfin::KrylovSolver::Type""'");
  } 
  arg1 = static_cast<dolfin::KrylovSolver::Type >(val1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Preconditioner__Type,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_KrylovSolver" "', argument " "2"" of type '" "Preconditioner::Type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KrylovSolver" "', argument " "2"" of type '" "Preconditioner::Type""'");
    } else {
      Preconditioner::Type * temp = reinterpret_cast<Preconditioner::Type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (dolfin::KrylovSolver *)new dolfin::KrylovSolver(arg1,arg2);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__KrylovSolver, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KrylovSolver__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::KrylovSolver::Type arg1 ;
  Preconditioner *arg2 = 0 ;
  dolfin::KrylovSolver *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_KrylovSolver",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_KrylovSolver" "', argument " "1"" of type '" "dolfin::KrylovSolver::Type""'");
  } 
  arg1 = static_cast<dolfin::KrylovSolver::Type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Preconditioner,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_KrylovSolver" "', argument " "2"" of type '" "Preconditioner &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KrylovSolver" "', argument " "2"" of type '" "Preconditioner &""'"); 
  }
  arg2 = reinterpret_cast<Preconditioner * >(argp2);
  result = (dolfin::KrylovSolver *)new dolfin::KrylovSolver(arg1,*arg2);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__KrylovSolver, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KrylovSolver(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_KrylovSolver__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Preconditioner__Type, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_KrylovSolver__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Preconditioner, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_KrylovSolver__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_KrylovSolver__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Preconditioner__Type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_KrylovSolver__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Preconditioner, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_KrylovSolver__SWIG_5(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_KrylovSolver'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_KrylovSolver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::KrylovSolver *arg1 = (dolfin::KrylovSolver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_KrylovSolver",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__KrylovSolver, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_KrylovSolver" "', argument " "1"" of type '" "dolfin::KrylovSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::KrylovSolver * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KrylovSolver_solve__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::KrylovSolver *arg1 = (dolfin::KrylovSolver *) 0 ;
  dolfin::Matrix *arg2 = 0 ;
  dolfin::Vector *arg3 = 0 ;
  dolfin::Vector *arg4 = 0 ;
  dolfin::uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:KrylovSolver_solve",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__KrylovSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KrylovSolver_solve" "', argument " "1"" of type '" "dolfin::KrylovSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::KrylovSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Matrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KrylovSolver_solve" "', argument " "2"" of type '" "dolfin::Matrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KrylovSolver_solve" "', argument " "2"" of type '" "dolfin::Matrix const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Matrix * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "KrylovSolver_solve" "', argument " "3"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KrylovSolver_solve" "', argument " "3"" of type '" "dolfin::Vector &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Vector * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_dolfin__Vector,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "KrylovSolver_solve" "', argument " "4"" of type '" "dolfin::Vector const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KrylovSolver_solve" "', argument " "4"" of type '" "dolfin::Vector const &""'"); 
  }
  arg4 = reinterpret_cast<dolfin::Vector * >(argp4);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::uint)(arg1)->solve((dolfin::Matrix const &)*arg2,*arg3,(dolfin::Vector const &)*arg4);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KrylovSolver_solve__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::KrylovSolver *arg1 = (dolfin::KrylovSolver *) 0 ;
  dolfin::VirtualMatrix *arg2 = 0 ;
  dolfin::Vector *arg3 = 0 ;
  dolfin::Vector *arg4 = 0 ;
  dolfin::uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:KrylovSolver_solve",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__KrylovSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KrylovSolver_solve" "', argument " "1"" of type '" "dolfin::KrylovSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::KrylovSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__VirtualMatrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KrylovSolver_solve" "', argument " "2"" of type '" "dolfin::VirtualMatrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KrylovSolver_solve" "', argument " "2"" of type '" "dolfin::VirtualMatrix const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::VirtualMatrix * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "KrylovSolver_solve" "', argument " "3"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KrylovSolver_solve" "', argument " "3"" of type '" "dolfin::Vector &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Vector * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_dolfin__Vector,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "KrylovSolver_solve" "', argument " "4"" of type '" "dolfin::Vector const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KrylovSolver_solve" "', argument " "4"" of type '" "dolfin::Vector const &""'"); 
  }
  arg4 = reinterpret_cast<dolfin::Vector * >(argp4);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::uint)(arg1)->solve((dolfin::VirtualMatrix const &)*arg2,*arg3,(dolfin::Vector const &)*arg4);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KrylovSolver_solve(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__KrylovSolver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__Matrix, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_dolfin__Vector, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_dolfin__Vector, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_KrylovSolver_solve__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__KrylovSolver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__VirtualMatrix, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_dolfin__Vector, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_dolfin__Vector, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_KrylovSolver_solve__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'KrylovSolver_solve'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_KrylovSolver_disp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::KrylovSolver *arg1 = (dolfin::KrylovSolver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KrylovSolver_disp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__KrylovSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KrylovSolver_disp" "', argument " "1"" of type '" "dolfin::KrylovSolver const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::KrylovSolver * >(argp1);
  ((dolfin::KrylovSolver const *)arg1)->disp();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *KrylovSolver_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__KrylovSolver, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_EigenvalueSolver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::EigenvalueSolver *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_EigenvalueSolver")) SWIG_fail;
  result = (dolfin::EigenvalueSolver *)new dolfin::EigenvalueSolver();
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__EigenvalueSolver, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_EigenvalueSolver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::EigenvalueSolver *arg1 = (dolfin::EigenvalueSolver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_EigenvalueSolver",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__EigenvalueSolver, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EigenvalueSolver" "', argument " "1"" of type '" "dolfin::EigenvalueSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::EigenvalueSolver * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EigenvalueSolver_eigen(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::EigenvalueSolver *arg1 = (dolfin::EigenvalueSolver *) 0 ;
  dolfin::Matrix *arg2 = 0 ;
  dolfin::Vector *arg3 = 0 ;
  dolfin::Vector *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:EigenvalueSolver_eigen",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__EigenvalueSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EigenvalueSolver_eigen" "', argument " "1"" of type '" "dolfin::EigenvalueSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::EigenvalueSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Matrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EigenvalueSolver_eigen" "', argument " "2"" of type '" "dolfin::Matrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EigenvalueSolver_eigen" "', argument " "2"" of type '" "dolfin::Matrix const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Matrix * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "EigenvalueSolver_eigen" "', argument " "3"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EigenvalueSolver_eigen" "', argument " "3"" of type '" "dolfin::Vector &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Vector * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "EigenvalueSolver_eigen" "', argument " "4"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EigenvalueSolver_eigen" "', argument " "4"" of type '" "dolfin::Vector &""'"); 
  }
  arg4 = reinterpret_cast<dolfin::Vector * >(argp4);
  (arg1)->eigen((dolfin::Matrix const &)*arg2,*arg3,*arg4);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *EigenvalueSolver_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__EigenvalueSolver, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_Preconditioner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Preconditioner *arg1 = (dolfin::Preconditioner *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Preconditioner",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Preconditioner, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Preconditioner" "', argument " "1"" of type '" "dolfin::Preconditioner *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Preconditioner * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Preconditioner_setup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  KSP arg1 ;
  dolfin::Preconditioner *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Preconditioner_setup",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_KSP,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Preconditioner_setup" "', argument " "1"" of type '" "KSP const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Preconditioner_setup" "', argument " "1"" of type '" "KSP const""'");
    } else {
      KSP * temp = reinterpret_cast<KSP * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Preconditioner,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Preconditioner_setup" "', argument " "2"" of type '" "dolfin::Preconditioner &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Preconditioner_setup" "', argument " "2"" of type '" "dolfin::Preconditioner &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Preconditioner * >(argp2);
  dolfin::Preconditioner::setup(arg1,*arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Preconditioner_solve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Preconditioner *arg1 = (dolfin::Preconditioner *) 0 ;
  dolfin::Vector *arg2 = 0 ;
  dolfin::Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Preconditioner_solve",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Preconditioner, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Preconditioner_solve" "', argument " "1"" of type '" "dolfin::Preconditioner *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Preconditioner * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Preconditioner_solve" "', argument " "2"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Preconditioner_solve" "', argument " "2"" of type '" "dolfin::Vector &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Vector,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Preconditioner_solve" "', argument " "3"" of type '" "dolfin::Vector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Preconditioner_solve" "', argument " "3"" of type '" "dolfin::Vector const &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Vector * >(argp3);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->solve(*arg2,(dolfin::Vector const &)*arg3);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Preconditioner_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__Preconditioner, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_PETScManager_init__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PETScManager_init")) SWIG_fail;
  dolfin::PETScManager::init();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PETScManager_init__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  char **arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PETScManager_init",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PETScManager_init" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast<int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PETScManager_init" "', argument " "2"" of type '" "char *[]""'"); 
  } 
  arg2 = reinterpret_cast<char ** >(argp2);
  dolfin::PETScManager::init(arg1,arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PETScManager_init(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_PETScManager_init__SWIG_0(self, args);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_p_char, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PETScManager_init__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'PETScManager_init'");
  return NULL;
}


SWIGINTERN PyObject *PETScManager_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__PETScManager, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Function__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  dolfin::real arg2 ;
  dolfin::Function *result = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Function",&obj0,&obj1)) SWIG_fail;
  arg1 = obj0;
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Function" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  if ( arg1 != Py_None ) {
    /* subclassed */
    result = (dolfin::Function *)new SwigDirector_Function(arg1,arg2);
    
  } else {
    result = (dolfin::Function *)new dolfin::Function(arg2);
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Function, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Function__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  dolfin::uint arg2 ;
  dolfin::Function *result = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Function",&obj0,&obj1)) SWIG_fail;
  arg1 = obj0;
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Function" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  if ( arg1 != Py_None ) {
    /* subclassed */
    result = (dolfin::Function *)new SwigDirector_Function(arg1,arg2);
    
  } else {
    result = (dolfin::Function *)new dolfin::Function(arg2);
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Function, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Function__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  dolfin::Function *result = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Function",&obj0)) SWIG_fail;
  arg1 = obj0;
  if ( arg1 != Py_None ) {
    /* subclassed */
    result = (dolfin::Function *)new SwigDirector_Function(arg1);
    
  } else {
    result = (dolfin::Function *)new dolfin::Function();
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Function, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Function__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  FunctionPointer arg2 ;
  dolfin::uint arg3 ;
  dolfin::Function *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Function",&obj0,&obj1,&obj2)) SWIG_fail;
  arg1 = obj0;
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FunctionPointer,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Function" "', argument " "2"" of type '" "FunctionPointer""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Function" "', argument " "2"" of type '" "FunctionPointer""'");
    } else {
      FunctionPointer * temp = reinterpret_cast<FunctionPointer * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Function" "', argument " "3"" of type '" "dolfin::uint""'");
  } 
  arg3 = static_cast<dolfin::uint >(val3);
  if ( arg1 != Py_None ) {
    /* subclassed */
    result = (dolfin::Function *)new SwigDirector_Function(arg1,arg2,arg3);
    
  } else {
    result = (dolfin::Function *)new dolfin::Function(arg2,arg3);
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Function, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Function__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  FunctionPointer arg2 ;
  dolfin::Function *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Function",&obj0,&obj1)) SWIG_fail;
  arg1 = obj0;
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FunctionPointer,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Function" "', argument " "2"" of type '" "FunctionPointer""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Function" "', argument " "2"" of type '" "FunctionPointer""'");
    } else {
      FunctionPointer * temp = reinterpret_cast<FunctionPointer * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if ( arg1 != Py_None ) {
    /* subclassed */
    result = (dolfin::Function *)new SwigDirector_Function(arg1,arg2);
    
  } else {
    result = (dolfin::Function *)new dolfin::Function(arg2);
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Function, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Function__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  dolfin::Vector *arg2 = 0 ;
  dolfin::Function *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Function",&obj0,&obj1)) SWIG_fail;
  arg1 = obj0;
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Function" "', argument " "2"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Function" "', argument " "2"" of type '" "dolfin::Vector &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  if ( arg1 != Py_None ) {
    /* subclassed */
    result = (dolfin::Function *)new SwigDirector_Function(arg1,*arg2);
    
  } else {
    result = (dolfin::Function *)new dolfin::Function(*arg2);
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Function, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Function__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  dolfin::Vector *arg2 = 0 ;
  dolfin::Mesh *arg3 = 0 ;
  dolfin::Function *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Function",&obj0,&obj1,&obj2)) SWIG_fail;
  arg1 = obj0;
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Function" "', argument " "2"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Function" "', argument " "2"" of type '" "dolfin::Vector &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Mesh,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Function" "', argument " "3"" of type '" "dolfin::Mesh &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Function" "', argument " "3"" of type '" "dolfin::Mesh &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Mesh * >(argp3);
  if ( arg1 != Py_None ) {
    /* subclassed */
    result = (dolfin::Function *)new SwigDirector_Function(arg1,*arg2,*arg3);
    
  } else {
    result = (dolfin::Function *)new dolfin::Function(*arg2,*arg3);
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Function, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Function__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  dolfin::Vector *arg2 = 0 ;
  dolfin::Mesh *arg3 = 0 ;
  dolfin::FiniteElement *arg4 = 0 ;
  dolfin::Function *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_Function",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  arg1 = obj0;
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Function" "', argument " "2"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Function" "', argument " "2"" of type '" "dolfin::Vector &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Mesh,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Function" "', argument " "3"" of type '" "dolfin::Mesh &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Function" "', argument " "3"" of type '" "dolfin::Mesh &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Mesh * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_dolfin__FiniteElement,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_Function" "', argument " "4"" of type '" "dolfin::FiniteElement &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Function" "', argument " "4"" of type '" "dolfin::FiniteElement &""'"); 
  }
  arg4 = reinterpret_cast<dolfin::FiniteElement * >(argp4);
  if ( arg1 != Py_None ) {
    /* subclassed */
    result = (dolfin::Function *)new SwigDirector_Function(arg1,*arg2,*arg3,*arg4);
    
  } else {
    result = (dolfin::Function *)new dolfin::Function(*arg2,*arg3,*arg4);
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Function, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Function__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  dolfin::Mesh *arg2 = 0 ;
  dolfin::FiniteElement *arg3 = 0 ;
  dolfin::Function *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Function",&obj0,&obj1,&obj2)) SWIG_fail;
  arg1 = obj0;
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Mesh,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Function" "', argument " "2"" of type '" "dolfin::Mesh &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Function" "', argument " "2"" of type '" "dolfin::Mesh &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Mesh * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__FiniteElement,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Function" "', argument " "3"" of type '" "dolfin::FiniteElement &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Function" "', argument " "3"" of type '" "dolfin::FiniteElement &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::FiniteElement * >(argp3);
  if ( arg1 != Py_None ) {
    /* subclassed */
    result = (dolfin::Function *)new SwigDirector_Function(arg1,*arg2,*arg3);
    
  } else {
    result = (dolfin::Function *)new dolfin::Function(*arg2,*arg3);
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Function, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Function__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  dolfin::Function *arg2 = 0 ;
  dolfin::Function *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Function",&obj0,&obj1)) SWIG_fail;
  arg1 = obj0;
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Function,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Function" "', argument " "2"" of type '" "dolfin::Function const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Function" "', argument " "2"" of type '" "dolfin::Function const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Function * >(argp2);
  if ( arg1 != Py_None ) {
    /* subclassed */
    result = (dolfin::Function *)new SwigDirector_Function(arg1,(dolfin::Function const &)*arg2);
    
  } else {
    result = (dolfin::Function *)new dolfin::Function((dolfin::Function const &)*arg2);
    
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Function, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Function(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    _v = (argv[0] != 0);
    if (_v) {
      return _wrap_new_Function__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    _v = (argv[0] != 0);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FunctionPointer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Function__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = (argv[0] != 0);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dolfin__Vector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Function__SWIG_5(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = (argv[0] != 0);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__Function, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Function__SWIG_9(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = (argv[0] != 0);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Function__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = (argv[0] != 0);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Function__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    _v = (argv[0] != 0);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dolfin__Vector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_dolfin__Mesh, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_Function__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    _v = (argv[0] != 0);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dolfin__Mesh, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_dolfin__FiniteElement, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_Function__SWIG_8(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    _v = (argv[0] != 0);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FunctionPointer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Function__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    _v = (argv[0] != 0);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dolfin__Vector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_dolfin__Mesh, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_dolfin__FiniteElement, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_Function__SWIG_7(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_Function'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Function(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Function *arg1 = (dolfin::Function *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Function",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Function, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Function" "', argument " "1"" of type '" "dolfin::Function *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Function * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Function_eval__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Function *arg1 = (dolfin::Function *) 0 ;
  dolfin::Point *arg2 = 0 ;
  dolfin::uint arg3 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Function_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_eval" "', argument " "1"" of type '" "dolfin::Function *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Function * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Point,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Function_eval" "', argument " "2"" of type '" "dolfin::Point const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Function_eval" "', argument " "2"" of type '" "dolfin::Point const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Point * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Function_eval" "', argument " "3"" of type '" "dolfin::uint""'");
  } 
  arg3 = static_cast<dolfin::uint >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::real)(arg1)->eval((dolfin::Point const &)*arg2,arg3);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Function_eval__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Function *arg1 = (dolfin::Function *) 0 ;
  dolfin::Point *arg2 = 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Function_eval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_eval" "', argument " "1"" of type '" "dolfin::Function *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Function * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Point,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Function_eval" "', argument " "2"" of type '" "dolfin::Point const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Function_eval" "', argument " "2"" of type '" "dolfin::Point const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Point * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::real)(arg1)->eval((dolfin::Point const &)*arg2);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Function_eval(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Function_eval__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Function_eval__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Function_eval'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Function___call____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Function *arg1 = (dolfin::Function *) 0 ;
  dolfin::Point *arg2 = 0 ;
  dolfin::uint arg3 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Function___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function___call__" "', argument " "1"" of type '" "dolfin::Function *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Function * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Point,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Function___call__" "', argument " "2"" of type '" "dolfin::Point const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Function___call__" "', argument " "2"" of type '" "dolfin::Point const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Point * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Function___call__" "', argument " "3"" of type '" "dolfin::uint""'");
  } 
  arg3 = static_cast<dolfin::uint >(val3);
  result = (dolfin::real)(arg1)->operator ()((dolfin::Point const &)*arg2,arg3);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Function___call____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Function *arg1 = (dolfin::Function *) 0 ;
  dolfin::Point *arg2 = 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Function___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function___call__" "', argument " "1"" of type '" "dolfin::Function *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Function * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Point,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Function___call__" "', argument " "2"" of type '" "dolfin::Point const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Function___call__" "', argument " "2"" of type '" "dolfin::Point const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Point * >(argp2);
  result = (dolfin::real)(arg1)->operator ()((dolfin::Point const &)*arg2);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Function___call____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Function *arg1 = (dolfin::Function *) 0 ;
  dolfin::Vertex *arg2 = 0 ;
  dolfin::uint arg3 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Function___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function___call__" "', argument " "1"" of type '" "dolfin::Function *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Function * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vertex,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Function___call__" "', argument " "2"" of type '" "dolfin::Vertex const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Function___call__" "', argument " "2"" of type '" "dolfin::Vertex const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vertex * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Function___call__" "', argument " "3"" of type '" "dolfin::uint""'");
  } 
  arg3 = static_cast<dolfin::uint >(val3);
  result = (dolfin::real)(arg1)->operator ()((dolfin::Vertex const &)*arg2,arg3);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Function___call____SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Function *arg1 = (dolfin::Function *) 0 ;
  dolfin::Vertex *arg2 = 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Function___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function___call__" "', argument " "1"" of type '" "dolfin::Function *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Function * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vertex,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Function___call__" "', argument " "2"" of type '" "dolfin::Vertex const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Function___call__" "', argument " "2"" of type '" "dolfin::Vertex const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vertex * >(argp2);
  result = (dolfin::real)(arg1)->operator ()((dolfin::Vertex const &)*arg2);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Function___call__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Function___call____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__Vertex, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Function___call____SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__Vertex, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Function___call____SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Function___call____SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Function___call__'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Function___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Function *arg1 = (dolfin::Function *) 0 ;
  dolfin::uint arg2 ;
  dolfin::Function result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Function___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function___getitem__" "', argument " "1"" of type '" "dolfin::Function *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Function * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Function___getitem__" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  result = (arg1)->operator [](arg2);
  
  resultobj = SWIG_NewPointerObj((new dolfin::Function(static_cast<const dolfin::Function& >(result))), SWIGTYPE_p_dolfin__Function, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Function_interpolate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Function *arg1 = (dolfin::Function *) 0 ;
  dolfin::real *arg2 ;
  dolfin::AffineMap *arg3 = 0 ;
  dolfin::FiniteElement *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Function_interpolate",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_interpolate" "', argument " "1"" of type '" "dolfin::Function *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Function * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Function_interpolate" "', argument " "2"" of type '" "dolfin::real []""'"); 
  } 
  arg2 = reinterpret_cast<dolfin::real * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__AffineMap,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Function_interpolate" "', argument " "3"" of type '" "dolfin::AffineMap &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Function_interpolate" "', argument " "3"" of type '" "dolfin::AffineMap &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::AffineMap * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_dolfin__FiniteElement,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Function_interpolate" "', argument " "4"" of type '" "dolfin::FiniteElement &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Function_interpolate" "', argument " "4"" of type '" "dolfin::FiniteElement &""'"); 
  }
  arg4 = reinterpret_cast<dolfin::FiniteElement * >(argp4);
  (arg1)->interpolate(arg2,*arg3,*arg4);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Function_vectordim(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Function *arg1 = (dolfin::Function *) 0 ;
  dolfin::uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Function_vectordim",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_vectordim" "', argument " "1"" of type '" "dolfin::Function const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Function * >(argp1);
  result = (dolfin::uint)((dolfin::Function const *)arg1)->vectordim();
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Function_vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Function *arg1 = (dolfin::Function *) 0 ;
  dolfin::Vector *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Function_vector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_vector" "', argument " "1"" of type '" "dolfin::Function *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Function * >(argp1);
  {
    dolfin::Vector &_result_ref = (arg1)->vector();
    result = (dolfin::Vector *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Function_mesh(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Function *arg1 = (dolfin::Function *) 0 ;
  dolfin::Mesh *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Function_mesh",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_mesh" "', argument " "1"" of type '" "dolfin::Function *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Function * >(argp1);
  {
    dolfin::Mesh &_result_ref = (arg1)->mesh();
    result = (dolfin::Mesh *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Function_element(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Function *arg1 = (dolfin::Function *) 0 ;
  dolfin::FiniteElement *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Function_element",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_element" "', argument " "1"" of type '" "dolfin::Function *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Function * >(argp1);
  {
    dolfin::FiniteElement &_result_ref = (arg1)->element();
    result = (dolfin::FiniteElement *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Function_attach__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Function *arg1 = (dolfin::Function *) 0 ;
  dolfin::Vector *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Function_attach",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_attach" "', argument " "1"" of type '" "dolfin::Function *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Function * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Function_attach" "', argument " "2"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Function_attach" "', argument " "2"" of type '" "dolfin::Vector &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Function_attach" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast<bool >(val3);
  (arg1)->attach(*arg2,arg3);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Function_attach__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Function *arg1 = (dolfin::Function *) 0 ;
  dolfin::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Function_attach",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_attach" "', argument " "1"" of type '" "dolfin::Function *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Function * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Function_attach" "', argument " "2"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Function_attach" "', argument " "2"" of type '" "dolfin::Vector &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  (arg1)->attach(*arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Function_attach__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Function *arg1 = (dolfin::Function *) 0 ;
  dolfin::Mesh *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Function_attach",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_attach" "', argument " "1"" of type '" "dolfin::Function *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Function * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Mesh,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Function_attach" "', argument " "2"" of type '" "dolfin::Mesh &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Function_attach" "', argument " "2"" of type '" "dolfin::Mesh &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Mesh * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Function_attach" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast<bool >(val3);
  (arg1)->attach(*arg2,arg3);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Function_attach__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Function *arg1 = (dolfin::Function *) 0 ;
  dolfin::Mesh *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Function_attach",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_attach" "', argument " "1"" of type '" "dolfin::Function *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Function * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Mesh,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Function_attach" "', argument " "2"" of type '" "dolfin::Mesh &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Function_attach" "', argument " "2"" of type '" "dolfin::Mesh &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Mesh * >(argp2);
  (arg1)->attach(*arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Function_attach__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Function *arg1 = (dolfin::Function *) 0 ;
  dolfin::FiniteElement *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Function_attach",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_attach" "', argument " "1"" of type '" "dolfin::Function *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Function * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__FiniteElement,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Function_attach" "', argument " "2"" of type '" "dolfin::FiniteElement &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Function_attach" "', argument " "2"" of type '" "dolfin::FiniteElement &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::FiniteElement * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Function_attach" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast<bool >(val3);
  (arg1)->attach(*arg2,arg3);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Function_attach__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Function *arg1 = (dolfin::Function *) 0 ;
  dolfin::FiniteElement *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Function_attach",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_attach" "', argument " "1"" of type '" "dolfin::Function *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Function * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__FiniteElement,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Function_attach" "', argument " "2"" of type '" "dolfin::FiniteElement &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Function_attach" "', argument " "2"" of type '" "dolfin::FiniteElement &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::FiniteElement * >(argp2);
  (arg1)->attach(*arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Function_attach(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dolfin__Vector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Function_attach__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dolfin__Mesh, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Function_attach__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dolfin__FiniteElement, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Function_attach__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dolfin__Vector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Function_attach__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dolfin__FiniteElement, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Function_attach__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Function, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dolfin__Mesh, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Function_attach__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Function_attach'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Function_init(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Function *arg1 = (dolfin::Function *) 0 ;
  dolfin::Mesh *arg2 = 0 ;
  dolfin::FiniteElement *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Function_init",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_init" "', argument " "1"" of type '" "dolfin::Function *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Function * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Mesh,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Function_init" "', argument " "2"" of type '" "dolfin::Mesh &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Function_init" "', argument " "2"" of type '" "dolfin::Mesh &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Mesh * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__FiniteElement,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Function_init" "', argument " "3"" of type '" "dolfin::FiniteElement &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Function_init" "', argument " "3"" of type '" "dolfin::FiniteElement &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::FiniteElement * >(argp3);
  (arg1)->init(*arg2,*arg3);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Function_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Function *arg1 = (dolfin::Function *) 0 ;
  dolfin::Function::Type result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Function_type",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Function_type" "', argument " "1"" of type '" "dolfin::Function const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Function * >(argp1);
  result = (dolfin::Function::Type)((dolfin::Function const *)arg1)->type();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_Function(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Function *arg1 = (dolfin::Function *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:disown_Function",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Function, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_Function" "', argument " "1"" of type '" "dolfin::Function *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Function * >(argp1);
  {
    Swig::Director *director = dynamic_cast<Swig::Director *>(arg1);
    if (director) director->swig_disown();
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Function_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__Function, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_FEM_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = 0 ;
  dolfin::FiniteElement *arg2 = 0 ;
  dolfin::uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEM_size",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Mesh,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEM_size" "', argument " "1"" of type '" "dolfin::Mesh const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FEM_size" "', argument " "1"" of type '" "dolfin::Mesh const &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__FiniteElement,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEM_size" "', argument " "2"" of type '" "dolfin::FiniteElement const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FEM_size" "', argument " "2"" of type '" "dolfin::FiniteElement const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::FiniteElement * >(argp2);
  result = (dolfin::uint)dolfin::FEM::size((dolfin::Mesh const &)*arg1,(dolfin::FiniteElement const &)*arg2);
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEM_lump__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Matrix *arg1 = 0 ;
  dolfin::Vector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEM_lump",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Matrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEM_lump" "', argument " "1"" of type '" "dolfin::Matrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FEM_lump" "', argument " "1"" of type '" "dolfin::Matrix const &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Matrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEM_lump" "', argument " "2"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FEM_lump" "', argument " "2"" of type '" "dolfin::Vector &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  dolfin::FEM::lump((dolfin::Matrix const &)*arg1,*arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEM_lump__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DenseMatrix *arg1 = 0 ;
  DenseVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEM_lump",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_DenseMatrix,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEM_lump" "', argument " "1"" of type '" "DenseMatrix const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FEM_lump" "', argument " "1"" of type '" "DenseMatrix const &""'"); 
  }
  arg1 = reinterpret_cast<DenseMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DenseVector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEM_lump" "', argument " "2"" of type '" "DenseVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FEM_lump" "', argument " "2"" of type '" "DenseVector &""'"); 
  }
  arg2 = reinterpret_cast<DenseVector * >(argp2);
  dolfin::FEM::lump((DenseMatrix const &)*arg1,*arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEM_lump(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_dolfin__Matrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dolfin__Vector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FEM_lump__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_DenseMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_DenseVector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FEM_lump__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'FEM_lump'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_FEM_disp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = 0 ;
  dolfin::FiniteElement *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FEM_disp",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Mesh,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FEM_disp" "', argument " "1"" of type '" "dolfin::Mesh const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FEM_disp" "', argument " "1"" of type '" "dolfin::Mesh const &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__FiniteElement,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FEM_disp" "', argument " "2"" of type '" "dolfin::FiniteElement const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FEM_disp" "', argument " "2"" of type '" "dolfin::FiniteElement const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::FiniteElement * >(argp2);
  dolfin::FEM::disp((dolfin::Mesh const &)*arg1,(dolfin::FiniteElement const &)*arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FEM_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__FEM, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_FiniteElement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::FiniteElement *arg1 = (dolfin::FiniteElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FiniteElement",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__FiniteElement, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FiniteElement" "', argument " "1"" of type '" "dolfin::FiniteElement *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::FiniteElement * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteElement_spacedim(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::FiniteElement *arg1 = (dolfin::FiniteElement *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FiniteElement_spacedim",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__FiniteElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteElement_spacedim" "', argument " "1"" of type '" "dolfin::FiniteElement const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::FiniteElement * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (unsigned int)((dolfin::FiniteElement const *)arg1)->spacedim();
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteElement_shapedim(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::FiniteElement *arg1 = (dolfin::FiniteElement *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FiniteElement_shapedim",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__FiniteElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteElement_shapedim" "', argument " "1"" of type '" "dolfin::FiniteElement const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::FiniteElement * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (unsigned int)((dolfin::FiniteElement const *)arg1)->shapedim();
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteElement_tensordim(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::FiniteElement *arg1 = (dolfin::FiniteElement *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FiniteElement_tensordim",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__FiniteElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteElement_tensordim" "', argument " "1"" of type '" "dolfin::FiniteElement const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::FiniteElement * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FiniteElement_tensordim" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast<unsigned int >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (unsigned int)((dolfin::FiniteElement const *)arg1)->tensordim(arg2);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteElement_elementdim(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::FiniteElement *arg1 = (dolfin::FiniteElement *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FiniteElement_elementdim",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__FiniteElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteElement_elementdim" "', argument " "1"" of type '" "dolfin::FiniteElement const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::FiniteElement * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (unsigned int)((dolfin::FiniteElement const *)arg1)->elementdim();
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteElement_rank(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::FiniteElement *arg1 = (dolfin::FiniteElement *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FiniteElement_rank",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__FiniteElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteElement_rank" "', argument " "1"" of type '" "dolfin::FiniteElement const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::FiniteElement * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (unsigned int)((dolfin::FiniteElement const *)arg1)->rank();
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteElement_nodemap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::FiniteElement *arg1 = (dolfin::FiniteElement *) 0 ;
  int *arg2 ;
  dolfin::Cell *arg3 = 0 ;
  dolfin::Mesh *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FiniteElement_nodemap",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__FiniteElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteElement_nodemap" "', argument " "1"" of type '" "dolfin::FiniteElement const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::FiniteElement * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FiniteElement_nodemap" "', argument " "2"" of type '" "int []""'"); 
  } 
  arg2 = reinterpret_cast<int * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Cell,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FiniteElement_nodemap" "', argument " "3"" of type '" "dolfin::Cell const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FiniteElement_nodemap" "', argument " "3"" of type '" "dolfin::Cell const &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Cell * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_dolfin__Mesh,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FiniteElement_nodemap" "', argument " "4"" of type '" "dolfin::Mesh const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FiniteElement_nodemap" "', argument " "4"" of type '" "dolfin::Mesh const &""'"); 
  }
  arg4 = reinterpret_cast<dolfin::Mesh * >(argp4);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    ((dolfin::FiniteElement const *)arg1)->nodemap(arg2,(dolfin::Cell const &)*arg3,(dolfin::Mesh const &)*arg4);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteElement_pointmap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::FiniteElement *arg1 = (dolfin::FiniteElement *) 0 ;
  dolfin::Point *arg2 ;
  unsigned int *arg3 ;
  dolfin::AffineMap *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FiniteElement_pointmap",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__FiniteElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteElement_pointmap" "', argument " "1"" of type '" "dolfin::FiniteElement const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::FiniteElement * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_dolfin__Point, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FiniteElement_pointmap" "', argument " "2"" of type '" "dolfin::Point []""'"); 
  } 
  arg2 = reinterpret_cast<dolfin::Point * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FiniteElement_pointmap" "', argument " "3"" of type '" "unsigned int []""'"); 
  } 
  arg3 = reinterpret_cast<unsigned int * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_dolfin__AffineMap,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FiniteElement_pointmap" "', argument " "4"" of type '" "dolfin::AffineMap const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FiniteElement_pointmap" "', argument " "4"" of type '" "dolfin::AffineMap const &""'"); 
  }
  arg4 = reinterpret_cast<dolfin::AffineMap * >(argp4);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    ((dolfin::FiniteElement const *)arg1)->pointmap(arg2,arg3,(dolfin::AffineMap const &)*arg4);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteElement_vertexeval(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::FiniteElement *arg1 = (dolfin::FiniteElement *) 0 ;
  dolfin::real *arg2 ;
  unsigned int arg3 ;
  dolfin::real *arg4 ;
  dolfin::Mesh *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:FiniteElement_vertexeval",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__FiniteElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteElement_vertexeval" "', argument " "1"" of type '" "dolfin::FiniteElement const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::FiniteElement * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FiniteElement_vertexeval" "', argument " "2"" of type '" "dolfin::real []""'"); 
  } 
  arg2 = reinterpret_cast<dolfin::real * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FiniteElement_vertexeval" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast<unsigned int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FiniteElement_vertexeval" "', argument " "4"" of type '" "dolfin::real const []""'"); 
  } 
  arg4 = reinterpret_cast<dolfin::real * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_dolfin__Mesh,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "FiniteElement_vertexeval" "', argument " "5"" of type '" "dolfin::Mesh const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FiniteElement_vertexeval" "', argument " "5"" of type '" "dolfin::Mesh const &""'"); 
  }
  arg5 = reinterpret_cast<dolfin::Mesh * >(argp5);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    ((dolfin::FiniteElement const *)arg1)->vertexeval(arg2,arg3,(double const (*))arg4,(dolfin::Mesh const &)*arg5);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteElement_spec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::FiniteElement *arg1 = (dolfin::FiniteElement *) 0 ;
  dolfin::FiniteElementSpec result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FiniteElement_spec",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__FiniteElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteElement_spec" "', argument " "1"" of type '" "dolfin::FiniteElement const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::FiniteElement * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = ((dolfin::FiniteElement const *)arg1)->spec();
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_NewPointerObj((new dolfin::FiniteElementSpec(static_cast<const dolfin::FiniteElementSpec& >(result))), SWIGTYPE_p_dolfin__FiniteElementSpec, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteElement_makeElement__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::FiniteElementSpec *arg1 = 0 ;
  dolfin::FiniteElement *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FiniteElement_makeElement",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__FiniteElementSpec,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteElement_makeElement" "', argument " "1"" of type '" "dolfin::FiniteElementSpec const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FiniteElement_makeElement" "', argument " "1"" of type '" "dolfin::FiniteElementSpec const &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::FiniteElementSpec * >(argp1);
  result = (dolfin::FiniteElement *)dolfin::FiniteElement::makeElement((dolfin::FiniteElementSpec const &)*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteElement_makeElement__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  dolfin::uint arg3 ;
  dolfin::uint arg4 ;
  dolfin::FiniteElement *result = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FiniteElement_makeElement",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "FiniteElement_makeElement" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "FiniteElement_makeElement" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FiniteElement_makeElement" "', argument " "3"" of type '" "dolfin::uint""'");
  } 
  arg3 = static_cast<dolfin::uint >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FiniteElement_makeElement" "', argument " "4"" of type '" "dolfin::uint""'");
  } 
  arg4 = static_cast<dolfin::uint >(val4);
  result = (dolfin::FiniteElement *)dolfin::FiniteElement::makeElement(arg1,arg2,arg3,arg4);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteElement_makeElement__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  dolfin::uint arg3 ;
  dolfin::FiniteElement *result = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FiniteElement_makeElement",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "FiniteElement_makeElement" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "FiniteElement_makeElement" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FiniteElement_makeElement" "', argument " "3"" of type '" "dolfin::uint""'");
  } 
  arg3 = static_cast<dolfin::uint >(val3);
  result = (dolfin::FiniteElement *)dolfin::FiniteElement::makeElement(arg1,arg2,arg3);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteElement_makeElement(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_dolfin__FiniteElementSpec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FiniteElement_makeElement__SWIG_0(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FiniteElement_makeElement__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_FiniteElement_makeElement__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'FiniteElement_makeElement'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteElement_disp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::FiniteElement *arg1 = (dolfin::FiniteElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FiniteElement_disp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__FiniteElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteElement_disp" "', argument " "1"" of type '" "dolfin::FiniteElement const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::FiniteElement * >(argp1);
  ((dolfin::FiniteElement const *)arg1)->disp();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FiniteElement_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__FiniteElement, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_AffineMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::AffineMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_AffineMap")) SWIG_fail;
  result = (dolfin::AffineMap *)new dolfin::AffineMap();
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AffineMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AffineMap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AffineMap" "', argument " "1"" of type '" "dolfin::AffineMap *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::AffineMap * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AffineMap_update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
  dolfin::Cell *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AffineMap_update",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__AffineMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AffineMap_update" "', argument " "1"" of type '" "dolfin::AffineMap *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::AffineMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Cell,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AffineMap_update" "', argument " "2"" of type '" "dolfin::Cell &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AffineMap_update" "', argument " "2"" of type '" "dolfin::Cell &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Cell * >(argp2);
  (arg1)->update(*arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AffineMap___call____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
  dolfin::real arg2 ;
  dolfin::real arg3 ;
  dolfin::Point result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AffineMap___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__AffineMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AffineMap___call__" "', argument " "1"" of type '" "dolfin::AffineMap const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::AffineMap * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AffineMap___call__" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AffineMap___call__" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  result = ((dolfin::AffineMap const *)arg1)->operator ()(arg2,arg3);
  
  resultobj = SWIG_NewPointerObj((new dolfin::Point(static_cast<const dolfin::Point& >(result))), SWIGTYPE_p_dolfin__Point, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AffineMap___call____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
  dolfin::real arg2 ;
  dolfin::real arg3 ;
  dolfin::real arg4 ;
  dolfin::Point result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:AffineMap___call__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__AffineMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AffineMap___call__" "', argument " "1"" of type '" "dolfin::AffineMap const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::AffineMap * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AffineMap___call__" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AffineMap___call__" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AffineMap___call__" "', argument " "4"" of type '" "dolfin::real""'");
  } 
  arg4 = static_cast<dolfin::real >(val4);
  result = ((dolfin::AffineMap const *)arg1)->operator ()(arg2,arg3,arg4);
  
  resultobj = SWIG_NewPointerObj((new dolfin::Point(static_cast<const dolfin::Point& >(result))), SWIGTYPE_p_dolfin__Point, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AffineMap___call__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__AffineMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_AffineMap___call____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__AffineMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_AffineMap___call____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'AffineMap___call__'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AffineMap_cell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
  dolfin::Cell *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AffineMap_cell",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__AffineMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AffineMap_cell" "', argument " "1"" of type '" "dolfin::AffineMap const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::AffineMap * >(argp1);
  {
    dolfin::Cell &_result_ref = ((dolfin::AffineMap const *)arg1)->cell();
    result = (dolfin::Cell *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AffineMap_det_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
  dolfin::real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AffineMap_det_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__AffineMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AffineMap_det_set" "', argument " "1"" of type '" "dolfin::AffineMap *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::AffineMap * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AffineMap_det_set" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  if (arg1) (arg1)->det = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AffineMap_det_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AffineMap_det_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__AffineMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AffineMap_det_get" "', argument " "1"" of type '" "dolfin::AffineMap *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::AffineMap * >(argp1);
  result = (dolfin::real) ((arg1)->det);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AffineMap_f00_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
  dolfin::real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AffineMap_f00_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__AffineMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AffineMap_f00_set" "', argument " "1"" of type '" "dolfin::AffineMap *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::AffineMap * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AffineMap_f00_set" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  if (arg1) (arg1)->f00 = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AffineMap_f00_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AffineMap_f00_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__AffineMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AffineMap_f00_get" "', argument " "1"" of type '" "dolfin::AffineMap *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::AffineMap * >(argp1);
  result = (dolfin::real) ((arg1)->f00);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AffineMap_f01_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
  dolfin::real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AffineMap_f01_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__AffineMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AffineMap_f01_set" "', argument " "1"" of type '" "dolfin::AffineMap *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::AffineMap * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AffineMap_f01_set" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  if (arg1) (arg1)->f01 = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AffineMap_f01_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AffineMap_f01_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__AffineMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AffineMap_f01_get" "', argument " "1"" of type '" "dolfin::AffineMap *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::AffineMap * >(argp1);
  result = (dolfin::real) ((arg1)->f01);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AffineMap_f02_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
  dolfin::real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AffineMap_f02_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__AffineMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AffineMap_f02_set" "', argument " "1"" of type '" "dolfin::AffineMap *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::AffineMap * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AffineMap_f02_set" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  if (arg1) (arg1)->f02 = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AffineMap_f02_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AffineMap_f02_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__AffineMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AffineMap_f02_get" "', argument " "1"" of type '" "dolfin::AffineMap *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::AffineMap * >(argp1);
  result = (dolfin::real) ((arg1)->f02);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AffineMap_f10_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
  dolfin::real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AffineMap_f10_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__AffineMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AffineMap_f10_set" "', argument " "1"" of type '" "dolfin::AffineMap *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::AffineMap * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AffineMap_f10_set" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  if (arg1) (arg1)->f10 = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AffineMap_f10_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AffineMap_f10_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__AffineMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AffineMap_f10_get" "', argument " "1"" of type '" "dolfin::AffineMap *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::AffineMap * >(argp1);
  result = (dolfin::real) ((arg1)->f10);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AffineMap_f11_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
  dolfin::real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AffineMap_f11_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__AffineMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AffineMap_f11_set" "', argument " "1"" of type '" "dolfin::AffineMap *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::AffineMap * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AffineMap_f11_set" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  if (arg1) (arg1)->f11 = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AffineMap_f11_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AffineMap_f11_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__AffineMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AffineMap_f11_get" "', argument " "1"" of type '" "dolfin::AffineMap *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::AffineMap * >(argp1);
  result = (dolfin::real) ((arg1)->f11);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AffineMap_f12_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
  dolfin::real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AffineMap_f12_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__AffineMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AffineMap_f12_set" "', argument " "1"" of type '" "dolfin::AffineMap *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::AffineMap * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AffineMap_f12_set" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  if (arg1) (arg1)->f12 = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AffineMap_f12_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AffineMap_f12_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__AffineMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AffineMap_f12_get" "', argument " "1"" of type '" "dolfin::AffineMap *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::AffineMap * >(argp1);
  result = (dolfin::real) ((arg1)->f12);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AffineMap_f20_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
  dolfin::real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AffineMap_f20_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__AffineMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AffineMap_f20_set" "', argument " "1"" of type '" "dolfin::AffineMap *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::AffineMap * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AffineMap_f20_set" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  if (arg1) (arg1)->f20 = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AffineMap_f20_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AffineMap_f20_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__AffineMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AffineMap_f20_get" "', argument " "1"" of type '" "dolfin::AffineMap *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::AffineMap * >(argp1);
  result = (dolfin::real) ((arg1)->f20);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AffineMap_f21_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
  dolfin::real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AffineMap_f21_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__AffineMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AffineMap_f21_set" "', argument " "1"" of type '" "dolfin::AffineMap *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::AffineMap * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AffineMap_f21_set" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  if (arg1) (arg1)->f21 = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AffineMap_f21_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AffineMap_f21_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__AffineMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AffineMap_f21_get" "', argument " "1"" of type '" "dolfin::AffineMap *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::AffineMap * >(argp1);
  result = (dolfin::real) ((arg1)->f21);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AffineMap_f22_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
  dolfin::real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AffineMap_f22_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__AffineMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AffineMap_f22_set" "', argument " "1"" of type '" "dolfin::AffineMap *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::AffineMap * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AffineMap_f22_set" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  if (arg1) (arg1)->f22 = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AffineMap_f22_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AffineMap_f22_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__AffineMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AffineMap_f22_get" "', argument " "1"" of type '" "dolfin::AffineMap *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::AffineMap * >(argp1);
  result = (dolfin::real) ((arg1)->f22);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AffineMap_g00_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
  dolfin::real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AffineMap_g00_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__AffineMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AffineMap_g00_set" "', argument " "1"" of type '" "dolfin::AffineMap *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::AffineMap * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AffineMap_g00_set" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  if (arg1) (arg1)->g00 = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AffineMap_g00_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AffineMap_g00_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__AffineMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AffineMap_g00_get" "', argument " "1"" of type '" "dolfin::AffineMap *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::AffineMap * >(argp1);
  result = (dolfin::real) ((arg1)->g00);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AffineMap_g01_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
  dolfin::real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AffineMap_g01_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__AffineMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AffineMap_g01_set" "', argument " "1"" of type '" "dolfin::AffineMap *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::AffineMap * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AffineMap_g01_set" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  if (arg1) (arg1)->g01 = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AffineMap_g01_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AffineMap_g01_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__AffineMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AffineMap_g01_get" "', argument " "1"" of type '" "dolfin::AffineMap *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::AffineMap * >(argp1);
  result = (dolfin::real) ((arg1)->g01);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AffineMap_g02_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
  dolfin::real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AffineMap_g02_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__AffineMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AffineMap_g02_set" "', argument " "1"" of type '" "dolfin::AffineMap *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::AffineMap * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AffineMap_g02_set" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  if (arg1) (arg1)->g02 = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AffineMap_g02_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AffineMap_g02_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__AffineMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AffineMap_g02_get" "', argument " "1"" of type '" "dolfin::AffineMap *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::AffineMap * >(argp1);
  result = (dolfin::real) ((arg1)->g02);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AffineMap_g10_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
  dolfin::real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AffineMap_g10_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__AffineMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AffineMap_g10_set" "', argument " "1"" of type '" "dolfin::AffineMap *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::AffineMap * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AffineMap_g10_set" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  if (arg1) (arg1)->g10 = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AffineMap_g10_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AffineMap_g10_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__AffineMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AffineMap_g10_get" "', argument " "1"" of type '" "dolfin::AffineMap *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::AffineMap * >(argp1);
  result = (dolfin::real) ((arg1)->g10);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AffineMap_g11_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
  dolfin::real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AffineMap_g11_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__AffineMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AffineMap_g11_set" "', argument " "1"" of type '" "dolfin::AffineMap *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::AffineMap * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AffineMap_g11_set" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  if (arg1) (arg1)->g11 = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AffineMap_g11_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AffineMap_g11_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__AffineMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AffineMap_g11_get" "', argument " "1"" of type '" "dolfin::AffineMap *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::AffineMap * >(argp1);
  result = (dolfin::real) ((arg1)->g11);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AffineMap_g12_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
  dolfin::real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AffineMap_g12_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__AffineMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AffineMap_g12_set" "', argument " "1"" of type '" "dolfin::AffineMap *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::AffineMap * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AffineMap_g12_set" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  if (arg1) (arg1)->g12 = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AffineMap_g12_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AffineMap_g12_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__AffineMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AffineMap_g12_get" "', argument " "1"" of type '" "dolfin::AffineMap *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::AffineMap * >(argp1);
  result = (dolfin::real) ((arg1)->g12);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AffineMap_g20_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
  dolfin::real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AffineMap_g20_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__AffineMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AffineMap_g20_set" "', argument " "1"" of type '" "dolfin::AffineMap *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::AffineMap * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AffineMap_g20_set" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  if (arg1) (arg1)->g20 = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AffineMap_g20_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AffineMap_g20_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__AffineMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AffineMap_g20_get" "', argument " "1"" of type '" "dolfin::AffineMap *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::AffineMap * >(argp1);
  result = (dolfin::real) ((arg1)->g20);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AffineMap_g21_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
  dolfin::real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AffineMap_g21_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__AffineMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AffineMap_g21_set" "', argument " "1"" of type '" "dolfin::AffineMap *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::AffineMap * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AffineMap_g21_set" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  if (arg1) (arg1)->g21 = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AffineMap_g21_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AffineMap_g21_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__AffineMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AffineMap_g21_get" "', argument " "1"" of type '" "dolfin::AffineMap *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::AffineMap * >(argp1);
  result = (dolfin::real) ((arg1)->g21);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AffineMap_g22_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
  dolfin::real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AffineMap_g22_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__AffineMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AffineMap_g22_set" "', argument " "1"" of type '" "dolfin::AffineMap *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::AffineMap * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AffineMap_g22_set" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  if (arg1) (arg1)->g22 = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AffineMap_g22_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AffineMap_g22_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__AffineMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AffineMap_g22_get" "', argument " "1"" of type '" "dolfin::AffineMap *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::AffineMap * >(argp1);
  result = (dolfin::real) ((arg1)->g22);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AffineMap_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__AffineMap, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_BoundaryValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::BoundaryValue *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_BoundaryValue")) SWIG_fail;
  result = (dolfin::BoundaryValue *)new dolfin::BoundaryValue();
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__BoundaryValue, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BoundaryValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::BoundaryValue *arg1 = (dolfin::BoundaryValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BoundaryValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__BoundaryValue, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BoundaryValue" "', argument " "1"" of type '" "dolfin::BoundaryValue *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::BoundaryValue * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BoundaryValue_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::BoundaryValue *arg1 = (dolfin::BoundaryValue *) 0 ;
  dolfin::real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BoundaryValue_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__BoundaryValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoundaryValue_set" "', argument " "1"" of type '" "dolfin::BoundaryValue *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::BoundaryValue * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BoundaryValue_set" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  (arg1)->set(arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BoundaryValue_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::BoundaryValue *arg1 = (dolfin::BoundaryValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BoundaryValue_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__BoundaryValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoundaryValue_reset" "', argument " "1"" of type '" "dolfin::BoundaryValue *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::BoundaryValue * >(argp1);
  (arg1)->reset();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BoundaryValue_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__BoundaryValue, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_BoundaryCondition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  dolfin::BoundaryCondition *result = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_BoundaryCondition",&obj0)) SWIG_fail;
  arg1 = obj0;
  if ( arg1 != Py_None ) {
    /* subclassed */
    result = (dolfin::BoundaryCondition *)new SwigDirector_BoundaryCondition(arg1);
    
  } else {
    SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing abstract class or protected constructor"); 
    SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__BoundaryCondition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BoundaryCondition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::BoundaryCondition *arg1 = (dolfin::BoundaryCondition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BoundaryCondition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__BoundaryCondition, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BoundaryCondition" "', argument " "1"" of type '" "dolfin::BoundaryCondition *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::BoundaryCondition * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BoundaryCondition_eval(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::BoundaryCondition *arg1 = (dolfin::BoundaryCondition *) 0 ;
  dolfin::BoundaryValue *arg2 = 0 ;
  dolfin::Point *arg3 = 0 ;
  dolfin::uint arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:BoundaryCondition_eval",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__BoundaryCondition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoundaryCondition_eval" "', argument " "1"" of type '" "dolfin::BoundaryCondition *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::BoundaryCondition * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__BoundaryValue,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BoundaryCondition_eval" "', argument " "2"" of type '" "dolfin::BoundaryValue &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BoundaryCondition_eval" "', argument " "2"" of type '" "dolfin::BoundaryValue &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::BoundaryValue * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Point,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BoundaryCondition_eval" "', argument " "3"" of type '" "dolfin::Point const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BoundaryCondition_eval" "', argument " "3"" of type '" "dolfin::Point const &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Point * >(argp3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BoundaryCondition_eval" "', argument " "4"" of type '" "dolfin::uint""'");
  } 
  arg4 = static_cast<dolfin::uint >(val4);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->eval(*arg2,(dolfin::Point const &)*arg3,arg4);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_BoundaryCondition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::BoundaryCondition *arg1 = (dolfin::BoundaryCondition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:disown_BoundaryCondition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__BoundaryCondition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_BoundaryCondition" "', argument " "1"" of type '" "dolfin::BoundaryCondition *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::BoundaryCondition * >(argp1);
  {
    Swig::Director *director = dynamic_cast<Swig::Director *>(arg1);
    if (director) director->swig_disown();
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BoundaryCondition_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__BoundaryCondition, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Form(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::uint arg1 ;
  dolfin::Form *result = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Form",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Form" "', argument " "1"" of type '" "dolfin::uint""'");
  } 
  arg1 = static_cast<dolfin::uint >(val1);
  result = (dolfin::Form *)new dolfin::Form(arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Form, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Form(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Form *arg1 = (dolfin::Form *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Form",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Form, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Form" "', argument " "1"" of type '" "dolfin::Form *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Form * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Form_update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Form *arg1 = (dolfin::Form *) 0 ;
  dolfin::AffineMap *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Form_update",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Form, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Form_update" "', argument " "1"" of type '" "dolfin::Form *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Form * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__AffineMap,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Form_update" "', argument " "2"" of type '" "dolfin::AffineMap &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Form_update" "', argument " "2"" of type '" "dolfin::AffineMap &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::AffineMap * >(argp2);
  (arg1)->update(*arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Form_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__Form, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_BilinearForm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::BilinearForm *arg1 = (dolfin::BilinearForm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BilinearForm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__BilinearForm, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BilinearForm" "', argument " "1"" of type '" "dolfin::BilinearForm *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::BilinearForm * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BilinearForm_eval__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::BilinearForm *arg1 = (dolfin::BilinearForm *) 0 ;
  dolfin::real *arg2 ;
  dolfin::AffineMap *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BilinearForm_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__BilinearForm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BilinearForm_eval" "', argument " "1"" of type '" "dolfin::BilinearForm const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::BilinearForm * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BilinearForm_eval" "', argument " "2"" of type '" "dolfin::real []""'"); 
  } 
  arg2 = reinterpret_cast<dolfin::real * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__AffineMap,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BilinearForm_eval" "', argument " "3"" of type '" "dolfin::AffineMap const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BilinearForm_eval" "', argument " "3"" of type '" "dolfin::AffineMap const &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::AffineMap * >(argp3);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    ((dolfin::BilinearForm const *)arg1)->eval(arg2,(dolfin::AffineMap const &)*arg3);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BilinearForm_eval__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::BilinearForm *arg1 = (dolfin::BilinearForm *) 0 ;
  dolfin::real *arg2 ;
  dolfin::AffineMap *arg3 = 0 ;
  dolfin::uint arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:BilinearForm_eval",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__BilinearForm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BilinearForm_eval" "', argument " "1"" of type '" "dolfin::BilinearForm const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::BilinearForm * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BilinearForm_eval" "', argument " "2"" of type '" "dolfin::real []""'"); 
  } 
  arg2 = reinterpret_cast<dolfin::real * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__AffineMap,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BilinearForm_eval" "', argument " "3"" of type '" "dolfin::AffineMap const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BilinearForm_eval" "', argument " "3"" of type '" "dolfin::AffineMap const &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::AffineMap * >(argp3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BilinearForm_eval" "', argument " "4"" of type '" "dolfin::uint""'");
  } 
  arg4 = static_cast<dolfin::uint >(val4);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    ((dolfin::BilinearForm const *)arg1)->eval(arg2,(dolfin::AffineMap const &)*arg3,arg4);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BilinearForm_eval(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__BilinearForm, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_dolfin__AffineMap, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BilinearForm_eval__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__BilinearForm, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_dolfin__AffineMap, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_BilinearForm_eval__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'BilinearForm_eval'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_BilinearForm_test(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::BilinearForm *arg1 = (dolfin::BilinearForm *) 0 ;
  dolfin::FiniteElement *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BilinearForm_test",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__BilinearForm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BilinearForm_test" "', argument " "1"" of type '" "dolfin::BilinearForm *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::BilinearForm * >(argp1);
  {
    dolfin::FiniteElement &_result_ref = (arg1)->test();
    result = (dolfin::FiniteElement *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BilinearForm_trial(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::BilinearForm *arg1 = (dolfin::BilinearForm *) 0 ;
  dolfin::FiniteElement *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BilinearForm_trial",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__BilinearForm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BilinearForm_trial" "', argument " "1"" of type '" "dolfin::BilinearForm *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::BilinearForm * >(argp1);
  {
    dolfin::FiniteElement &_result_ref = (arg1)->trial();
    result = (dolfin::FiniteElement *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BilinearForm_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__BilinearForm, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_LinearForm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::LinearForm *arg1 = (dolfin::LinearForm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LinearForm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__LinearForm, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LinearForm" "', argument " "1"" of type '" "dolfin::LinearForm *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::LinearForm * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearForm_eval__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::LinearForm *arg1 = (dolfin::LinearForm *) 0 ;
  dolfin::real *arg2 ;
  dolfin::AffineMap *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LinearForm_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__LinearForm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearForm_eval" "', argument " "1"" of type '" "dolfin::LinearForm const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::LinearForm * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinearForm_eval" "', argument " "2"" of type '" "dolfin::real []""'"); 
  } 
  arg2 = reinterpret_cast<dolfin::real * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__AffineMap,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LinearForm_eval" "', argument " "3"" of type '" "dolfin::AffineMap const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinearForm_eval" "', argument " "3"" of type '" "dolfin::AffineMap const &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::AffineMap * >(argp3);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    ((dolfin::LinearForm const *)arg1)->eval(arg2,(dolfin::AffineMap const &)*arg3);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearForm_eval__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::LinearForm *arg1 = (dolfin::LinearForm *) 0 ;
  dolfin::real *arg2 ;
  dolfin::AffineMap *arg3 = 0 ;
  dolfin::uint arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:LinearForm_eval",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__LinearForm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearForm_eval" "', argument " "1"" of type '" "dolfin::LinearForm const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::LinearForm * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinearForm_eval" "', argument " "2"" of type '" "dolfin::real []""'"); 
  } 
  arg2 = reinterpret_cast<dolfin::real * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__AffineMap,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LinearForm_eval" "', argument " "3"" of type '" "dolfin::AffineMap const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinearForm_eval" "', argument " "3"" of type '" "dolfin::AffineMap const &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::AffineMap * >(argp3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "LinearForm_eval" "', argument " "4"" of type '" "dolfin::uint""'");
  } 
  arg4 = static_cast<dolfin::uint >(val4);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    ((dolfin::LinearForm const *)arg1)->eval(arg2,(dolfin::AffineMap const &)*arg3,arg4);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearForm_eval(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__LinearForm, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_dolfin__AffineMap, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_LinearForm_eval__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__LinearForm, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_dolfin__AffineMap, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_LinearForm_eval__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'LinearForm_eval'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearForm_test(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::LinearForm *arg1 = (dolfin::LinearForm *) 0 ;
  dolfin::FiniteElement *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LinearForm_test",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__LinearForm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearForm_test" "', argument " "1"" of type '" "dolfin::LinearForm *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::LinearForm * >(argp1);
  {
    dolfin::FiniteElement &_result_ref = (arg1)->test();
    result = (dolfin::FiniteElement *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LinearForm_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__LinearForm, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Mesh__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Mesh")) SWIG_fail;
  result = (dolfin::Mesh *)new dolfin::Mesh();
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Mesh__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  dolfin::Mesh *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Mesh",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Mesh" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  result = (dolfin::Mesh *)new dolfin::Mesh((char const *)arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Mesh__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = 0 ;
  dolfin::Mesh *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Mesh",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Mesh,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Mesh" "', argument " "1"" of type '" "dolfin::Mesh const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Mesh" "', argument " "1"" of type '" "dolfin::Mesh const &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  result = (dolfin::Mesh *)new dolfin::Mesh((dolfin::Mesh const &)*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Mesh(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Mesh__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_dolfin__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Mesh__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Mesh__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_Mesh'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Mesh(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Mesh",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Mesh" "', argument " "1"" of type '" "dolfin::Mesh *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_merge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
  dolfin::Mesh *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Mesh_merge",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_merge" "', argument " "1"" of type '" "dolfin::Mesh *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Mesh,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_merge" "', argument " "2"" of type '" "dolfin::Mesh &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_merge" "', argument " "2"" of type '" "dolfin::Mesh &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Mesh * >(argp2);
  (arg1)->merge(*arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_init(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mesh_init",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_init" "', argument " "1"" of type '" "dolfin::Mesh *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  (arg1)->init();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mesh_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_clear" "', argument " "1"" of type '" "dolfin::Mesh *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  (arg1)->clear();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_numSpaceDim(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mesh_numSpaceDim",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_numSpaceDim" "', argument " "1"" of type '" "dolfin::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  result = (int)((dolfin::Mesh const *)arg1)->numSpaceDim();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_numVertices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mesh_numVertices",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_numVertices" "', argument " "1"" of type '" "dolfin::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  result = (int)((dolfin::Mesh const *)arg1)->numVertices();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_numCells(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mesh_numCells",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_numCells" "', argument " "1"" of type '" "dolfin::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  result = (int)((dolfin::Mesh const *)arg1)->numCells();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_numEdges(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mesh_numEdges",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_numEdges" "', argument " "1"" of type '" "dolfin::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  result = (int)((dolfin::Mesh const *)arg1)->numEdges();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_numFaces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mesh_numFaces",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_numFaces" "', argument " "1"" of type '" "dolfin::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  result = (int)((dolfin::Mesh const *)arg1)->numFaces();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_createVertex__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
  dolfin::Point arg2 ;
  dolfin::Vertex *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Mesh_createVertex",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_createVertex" "', argument " "1"" of type '" "dolfin::Mesh *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Point,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_createVertex" "', argument " "2"" of type '" "dolfin::Point""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_createVertex" "', argument " "2"" of type '" "dolfin::Point""'");
    } else {
      dolfin::Point * temp = reinterpret_cast<dolfin::Point * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    dolfin::Vertex &_result_ref = (arg1)->createVertex(arg2);
    result = (dolfin::Vertex *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_createVertex__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
  dolfin::real arg2 ;
  dolfin::real arg3 ;
  dolfin::real arg4 ;
  dolfin::Vertex *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Mesh_createVertex",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_createVertex" "', argument " "1"" of type '" "dolfin::Mesh *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mesh_createVertex" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Mesh_createVertex" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Mesh_createVertex" "', argument " "4"" of type '" "dolfin::real""'");
  } 
  arg4 = static_cast<dolfin::real >(val4);
  {
    dolfin::Vertex &_result_ref = (arg1)->createVertex(arg2,arg3,arg4);
    result = (dolfin::Vertex *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_createVertex(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Mesh_createVertex__SWIG_0(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Mesh_createVertex__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Mesh_createVertex'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_createCell__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  dolfin::Cell *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Mesh_createCell",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_createCell" "', argument " "1"" of type '" "dolfin::Mesh *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mesh_createCell" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Mesh_createCell" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast<int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Mesh_createCell" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast<int >(val4);
  {
    dolfin::Cell &_result_ref = (arg1)->createCell(arg2,arg3,arg4);
    result = (dolfin::Cell *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_createCell__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  dolfin::Cell *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Mesh_createCell",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_createCell" "', argument " "1"" of type '" "dolfin::Mesh *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mesh_createCell" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Mesh_createCell" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast<int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Mesh_createCell" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast<int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Mesh_createCell" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast<int >(val5);
  {
    dolfin::Cell &_result_ref = (arg1)->createCell(arg2,arg3,arg4,arg5);
    result = (dolfin::Cell *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_createCell__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
  dolfin::Vertex *arg2 = 0 ;
  dolfin::Vertex *arg3 = 0 ;
  dolfin::Vertex *arg4 = 0 ;
  dolfin::Cell *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Mesh_createCell",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_createCell" "', argument " "1"" of type '" "dolfin::Mesh *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vertex,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_createCell" "', argument " "2"" of type '" "dolfin::Vertex &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_createCell" "', argument " "2"" of type '" "dolfin::Vertex &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vertex * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Vertex,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Mesh_createCell" "', argument " "3"" of type '" "dolfin::Vertex &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_createCell" "', argument " "3"" of type '" "dolfin::Vertex &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Vertex * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_dolfin__Vertex,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Mesh_createCell" "', argument " "4"" of type '" "dolfin::Vertex &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_createCell" "', argument " "4"" of type '" "dolfin::Vertex &""'"); 
  }
  arg4 = reinterpret_cast<dolfin::Vertex * >(argp4);
  {
    dolfin::Cell &_result_ref = (arg1)->createCell(*arg2,*arg3,*arg4);
    result = (dolfin::Cell *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_createCell__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
  dolfin::Vertex *arg2 = 0 ;
  dolfin::Vertex *arg3 = 0 ;
  dolfin::Vertex *arg4 = 0 ;
  dolfin::Vertex *arg5 = 0 ;
  dolfin::Cell *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Mesh_createCell",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_createCell" "', argument " "1"" of type '" "dolfin::Mesh *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vertex,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_createCell" "', argument " "2"" of type '" "dolfin::Vertex &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_createCell" "', argument " "2"" of type '" "dolfin::Vertex &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vertex * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Vertex,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Mesh_createCell" "', argument " "3"" of type '" "dolfin::Vertex &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_createCell" "', argument " "3"" of type '" "dolfin::Vertex &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Vertex * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_dolfin__Vertex,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Mesh_createCell" "', argument " "4"" of type '" "dolfin::Vertex &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_createCell" "', argument " "4"" of type '" "dolfin::Vertex &""'"); 
  }
  arg4 = reinterpret_cast<dolfin::Vertex * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_dolfin__Vertex,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Mesh_createCell" "', argument " "5"" of type '" "dolfin::Vertex &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_createCell" "', argument " "5"" of type '" "dolfin::Vertex &""'"); 
  }
  arg5 = reinterpret_cast<dolfin::Vertex * >(argp5);
  {
    dolfin::Cell &_result_ref = (arg1)->createCell(*arg2,*arg3,*arg4,*arg5);
    result = (dolfin::Cell *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_createCell(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dolfin__Vertex, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_dolfin__Vertex, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_dolfin__Vertex, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Mesh_createCell__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Mesh_createCell__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dolfin__Vertex, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_dolfin__Vertex, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_dolfin__Vertex, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_dolfin__Vertex, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_Mesh_createCell__SWIG_3(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Mesh_createCell__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Mesh_createCell'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_createEdge__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
  int arg2 ;
  int arg3 ;
  Edge *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Mesh_createEdge",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_createEdge" "', argument " "1"" of type '" "dolfin::Mesh *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mesh_createEdge" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Mesh_createEdge" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast<int >(val3);
  {
    Edge &_result_ref = (arg1)->createEdge(arg2,arg3);
    result = (Edge *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Edge, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_createEdge__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
  dolfin::Vertex *arg2 = 0 ;
  dolfin::Vertex *arg3 = 0 ;
  Edge *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Mesh_createEdge",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_createEdge" "', argument " "1"" of type '" "dolfin::Mesh *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vertex,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_createEdge" "', argument " "2"" of type '" "dolfin::Vertex &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_createEdge" "', argument " "2"" of type '" "dolfin::Vertex &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vertex * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Vertex,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Mesh_createEdge" "', argument " "3"" of type '" "dolfin::Vertex &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_createEdge" "', argument " "3"" of type '" "dolfin::Vertex &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Vertex * >(argp3);
  {
    Edge &_result_ref = (arg1)->createEdge(*arg2,*arg3);
    result = (Edge *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Edge, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_createEdge(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dolfin__Vertex, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_dolfin__Vertex, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Mesh_createEdge__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Mesh_createEdge__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Mesh_createEdge'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_createFace__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  Face *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Mesh_createFace",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_createFace" "', argument " "1"" of type '" "dolfin::Mesh *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mesh_createFace" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Mesh_createFace" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast<int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Mesh_createFace" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast<int >(val4);
  {
    Face &_result_ref = (arg1)->createFace(arg2,arg3,arg4);
    result = (Face *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Face, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_createFace__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
  Edge *arg2 = 0 ;
  Edge *arg3 = 0 ;
  Edge *arg4 = 0 ;
  Face *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Mesh_createFace",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_createFace" "', argument " "1"" of type '" "dolfin::Mesh *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Edge,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_createFace" "', argument " "2"" of type '" "Edge &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_createFace" "', argument " "2"" of type '" "Edge &""'"); 
  }
  arg2 = reinterpret_cast<Edge * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Edge,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Mesh_createFace" "', argument " "3"" of type '" "Edge &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_createFace" "', argument " "3"" of type '" "Edge &""'"); 
  }
  arg3 = reinterpret_cast<Edge * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Edge,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Mesh_createFace" "', argument " "4"" of type '" "Edge &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_createFace" "', argument " "4"" of type '" "Edge &""'"); 
  }
  arg4 = reinterpret_cast<Edge * >(argp4);
  {
    Face &_result_ref = (arg1)->createFace(*arg2,*arg3,*arg4);
    result = (Face *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Face, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_createFace(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Edge, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Edge, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Edge, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Mesh_createFace__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Mesh_createFace__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Mesh_createFace'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_remove__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
  dolfin::Vertex *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Mesh_remove",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_remove" "', argument " "1"" of type '" "dolfin::Mesh *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vertex,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_remove" "', argument " "2"" of type '" "dolfin::Vertex &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_remove" "', argument " "2"" of type '" "dolfin::Vertex &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vertex * >(argp2);
  (arg1)->remove(*arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_remove__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
  dolfin::Cell *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Mesh_remove",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_remove" "', argument " "1"" of type '" "dolfin::Mesh *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Cell,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_remove" "', argument " "2"" of type '" "dolfin::Cell &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_remove" "', argument " "2"" of type '" "dolfin::Cell &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Cell * >(argp2);
  (arg1)->remove(*arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_remove__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
  Edge *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Mesh_remove",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_remove" "', argument " "1"" of type '" "dolfin::Mesh *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Edge,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_remove" "', argument " "2"" of type '" "Edge &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_remove" "', argument " "2"" of type '" "Edge &""'"); 
  }
  arg2 = reinterpret_cast<Edge * >(argp2);
  (arg1)->remove(*arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_remove__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
  Face *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Mesh_remove",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_remove" "', argument " "1"" of type '" "dolfin::Mesh *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Face,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh_remove" "', argument " "2"" of type '" "Face &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh_remove" "', argument " "2"" of type '" "Face &""'"); 
  }
  arg2 = reinterpret_cast<Face * >(argp2);
  (arg1)->remove(*arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_remove(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dolfin__Vertex, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Mesh_remove__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dolfin__Cell, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Mesh_remove__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Edge, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Mesh_remove__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Face, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Mesh_remove__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Mesh_remove'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
  dolfin::Mesh::Type result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mesh_type",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_type" "', argument " "1"" of type '" "dolfin::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  result = (dolfin::Mesh::Type)((dolfin::Mesh const *)arg1)->type();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_vertex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
  dolfin::uint arg2 ;
  dolfin::Vertex *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Mesh_vertex",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_vertex" "', argument " "1"" of type '" "dolfin::Mesh *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mesh_vertex" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  {
    dolfin::Vertex &_result_ref = (arg1)->vertex(arg2);
    result = (dolfin::Vertex *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_cell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
  dolfin::uint arg2 ;
  dolfin::Cell *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Mesh_cell",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_cell" "', argument " "1"" of type '" "dolfin::Mesh *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mesh_cell" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  {
    dolfin::Cell &_result_ref = (arg1)->cell(arg2);
    result = (dolfin::Cell *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_edge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
  dolfin::uint arg2 ;
  Edge *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Mesh_edge",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_edge" "', argument " "1"" of type '" "dolfin::Mesh *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mesh_edge" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  {
    Edge &_result_ref = (arg1)->edge(arg2);
    result = (Edge *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Edge, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_face(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
  dolfin::uint arg2 ;
  Face *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Mesh_face",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_face" "', argument " "1"" of type '" "dolfin::Mesh *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mesh_face" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  {
    Face &_result_ref = (arg1)->face(arg2);
    result = (Face *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Face, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_boundary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
  Boundary result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mesh_boundary",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_boundary" "', argument " "1"" of type '" "dolfin::Mesh *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  result = (arg1)->boundary();
  
  resultobj = SWIG_NewPointerObj((new Boundary(static_cast<const Boundary& >(result))), SWIGTYPE_p_Boundary, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_refine(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mesh_refine",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_refine" "', argument " "1"" of type '" "dolfin::Mesh *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  (arg1)->refine();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_refineUniformly__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mesh_refineUniformly",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_refineUniformly" "', argument " "1"" of type '" "dolfin::Mesh *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  (arg1)->refineUniformly();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_refineUniformly__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Mesh_refineUniformly",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_refineUniformly" "', argument " "1"" of type '" "dolfin::Mesh *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mesh_refineUniformly" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  (arg1)->refineUniformly(arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_refineUniformly(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Mesh_refineUniformly__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Mesh_refineUniformly__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Mesh_refineUniformly'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_parent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
  dolfin::Mesh *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mesh_parent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_parent" "', argument " "1"" of type '" "dolfin::Mesh *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  {
    dolfin::Mesh &_result_ref = (arg1)->parent();
    result = (dolfin::Mesh *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_child(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
  dolfin::Mesh *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mesh_child",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_child" "', argument " "1"" of type '" "dolfin::Mesh *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  {
    dolfin::Mesh &_result_ref = (arg1)->child();
    result = (dolfin::Mesh *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
  dolfin::Mesh *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Mesh___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh___eq__" "', argument " "1"" of type '" "dolfin::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Mesh,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh___eq__" "', argument " "2"" of type '" "dolfin::Mesh const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh___eq__" "', argument " "2"" of type '" "dolfin::Mesh const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Mesh * >(argp2);
  result = (bool)((dolfin::Mesh const *)arg1)->operator ==((dolfin::Mesh const &)*arg2);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
  dolfin::Mesh *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Mesh___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh___ne__" "', argument " "1"" of type '" "dolfin::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Mesh,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Mesh___ne__" "', argument " "2"" of type '" "dolfin::Mesh const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Mesh___ne__" "', argument " "2"" of type '" "dolfin::Mesh const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Mesh * >(argp2);
  result = (bool)((dolfin::Mesh const *)arg1)->operator !=((dolfin::Mesh const &)*arg2);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mesh_disp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Mesh_disp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mesh_disp" "', argument " "1"" of type '" "dolfin::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  ((dolfin::Mesh const *)arg1)->disp();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Mesh_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__Mesh, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Boundary__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Boundary *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Boundary")) SWIG_fail;
  result = (dolfin::Boundary *)new dolfin::Boundary();
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Boundary, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Boundary__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = 0 ;
  dolfin::Boundary *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Boundary",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Mesh,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Boundary" "', argument " "1"" of type '" "dolfin::Mesh &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Boundary" "', argument " "1"" of type '" "dolfin::Mesh &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  result = (dolfin::Boundary *)new dolfin::Boundary(*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Boundary, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Boundary(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Boundary__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Boundary__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_Boundary'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Boundary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Boundary *arg1 = (dolfin::Boundary *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Boundary",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Boundary, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Boundary" "', argument " "1"" of type '" "dolfin::Boundary *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Boundary * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Boundary_numVertices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Boundary *arg1 = (dolfin::Boundary *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Boundary_numVertices",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Boundary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Boundary_numVertices" "', argument " "1"" of type '" "dolfin::Boundary const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Boundary * >(argp1);
  result = (int)((dolfin::Boundary const *)arg1)->numVertices();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Boundary_numEdges(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Boundary *arg1 = (dolfin::Boundary *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Boundary_numEdges",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Boundary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Boundary_numEdges" "', argument " "1"" of type '" "dolfin::Boundary const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Boundary * >(argp1);
  result = (int)((dolfin::Boundary const *)arg1)->numEdges();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Boundary_numFaces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Boundary *arg1 = (dolfin::Boundary *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Boundary_numFaces",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Boundary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Boundary_numFaces" "', argument " "1"" of type '" "dolfin::Boundary const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Boundary * >(argp1);
  result = (int)((dolfin::Boundary const *)arg1)->numFaces();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Boundary_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__Boundary, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Point__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Point *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Point")) SWIG_fail;
  result = (dolfin::Point *)new dolfin::Point();
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Point, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Point__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::real arg1 ;
  dolfin::Point *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Point",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Point" "', argument " "1"" of type '" "dolfin::real""'");
  } 
  arg1 = static_cast<dolfin::real >(val1);
  result = (dolfin::Point *)new dolfin::Point(arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Point, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Point__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::real arg1 ;
  dolfin::real arg2 ;
  dolfin::Point *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Point",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Point" "', argument " "1"" of type '" "dolfin::real""'");
  } 
  arg1 = static_cast<dolfin::real >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Point" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  result = (dolfin::Point *)new dolfin::Point(arg1,arg2);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Point, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Point__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::real arg1 ;
  dolfin::real arg2 ;
  dolfin::real arg3 ;
  dolfin::Point *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Point",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Point" "', argument " "1"" of type '" "dolfin::real""'");
  } 
  arg1 = static_cast<dolfin::real >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Point" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Point" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  result = (dolfin::Point *)new dolfin::Point(arg1,arg2,arg3);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Point, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Point__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Point *arg1 = 0 ;
  dolfin::Point *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Point",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Point,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Point" "', argument " "1"" of type '" "dolfin::Point const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Point" "', argument " "1"" of type '" "dolfin::Point const &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Point * >(argp1);
  result = (dolfin::Point *)new dolfin::Point((dolfin::Point const &)*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Point, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Point(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Point__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_dolfin__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Point__SWIG_4(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Point__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Point__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Point__SWIG_3(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_Point'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point_dist__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Point *arg1 = (dolfin::Point *) 0 ;
  dolfin::Point arg2 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Point_dist",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point_dist" "', argument " "1"" of type '" "dolfin::Point const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Point * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Point,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Point_dist" "', argument " "2"" of type '" "dolfin::Point""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Point_dist" "', argument " "2"" of type '" "dolfin::Point""'");
    } else {
      dolfin::Point * temp = reinterpret_cast<dolfin::Point * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (dolfin::real)((dolfin::Point const *)arg1)->dist(arg2);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point_dist__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Point *arg1 = (dolfin::Point *) 0 ;
  dolfin::real arg2 ;
  dolfin::real arg3 ;
  dolfin::real arg4 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Point_dist",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point_dist" "', argument " "1"" of type '" "dolfin::Point const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Point * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Point_dist" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Point_dist" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Point_dist" "', argument " "4"" of type '" "dolfin::real""'");
  } 
  arg4 = static_cast<dolfin::real >(val4);
  result = (dolfin::real)((dolfin::Point const *)arg1)->dist(arg2,arg3,arg4);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point_dist__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Point *arg1 = (dolfin::Point *) 0 ;
  dolfin::real arg2 ;
  dolfin::real arg3 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Point_dist",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point_dist" "', argument " "1"" of type '" "dolfin::Point const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Point * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Point_dist" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Point_dist" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  result = (dolfin::real)((dolfin::Point const *)arg1)->dist(arg2,arg3);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point_dist__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Point *arg1 = (dolfin::Point *) 0 ;
  dolfin::real arg2 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Point_dist",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point_dist" "', argument " "1"" of type '" "dolfin::Point const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Point * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Point_dist" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  result = (dolfin::real)((dolfin::Point const *)arg1)->dist(arg2);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point_dist(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Point_dist__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Point_dist__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Point_dist__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Point, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Point_dist__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Point_dist'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point_norm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Point *arg1 = (dolfin::Point *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Point_norm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point_norm" "', argument " "1"" of type '" "dolfin::Point const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Point * >(argp1);
  result = (dolfin::real)((dolfin::Point const *)arg1)->norm();
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point_midpoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Point *arg1 = (dolfin::Point *) 0 ;
  dolfin::Point arg2 ;
  dolfin::Point result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Point_midpoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point_midpoint" "', argument " "1"" of type '" "dolfin::Point const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Point * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Point,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Point_midpoint" "', argument " "2"" of type '" "dolfin::Point""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Point_midpoint" "', argument " "2"" of type '" "dolfin::Point""'");
    } else {
      dolfin::Point * temp = reinterpret_cast<dolfin::Point * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = ((dolfin::Point const *)arg1)->midpoint(arg2);
  
  resultobj = SWIG_NewPointerObj((new dolfin::Point(static_cast<const dolfin::Point& >(result))), SWIGTYPE_p_dolfin__Point, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Point *arg1 = (dolfin::Point *) 0 ;
  dolfin::Point *arg2 = 0 ;
  dolfin::Point result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Point___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point___add__" "', argument " "1"" of type '" "dolfin::Point const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Point * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Point,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Point___add__" "', argument " "2"" of type '" "dolfin::Point const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Point___add__" "', argument " "2"" of type '" "dolfin::Point const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Point * >(argp2);
  result = ((dolfin::Point const *)arg1)->operator +((dolfin::Point const &)*arg2);
  
  resultobj = SWIG_NewPointerObj((new dolfin::Point(static_cast<const dolfin::Point& >(result))), SWIGTYPE_p_dolfin__Point, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Point *arg1 = (dolfin::Point *) 0 ;
  dolfin::Point *arg2 = 0 ;
  dolfin::Point result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Point___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point___sub__" "', argument " "1"" of type '" "dolfin::Point const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Point * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Point,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Point___sub__" "', argument " "2"" of type '" "dolfin::Point const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Point___sub__" "', argument " "2"" of type '" "dolfin::Point const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Point * >(argp2);
  result = ((dolfin::Point const *)arg1)->operator -((dolfin::Point const &)*arg2);
  
  resultobj = SWIG_NewPointerObj((new dolfin::Point(static_cast<const dolfin::Point& >(result))), SWIGTYPE_p_dolfin__Point, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point___mul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Point *arg1 = (dolfin::Point *) 0 ;
  dolfin::Point *arg2 = 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Point___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point___mul__" "', argument " "1"" of type '" "dolfin::Point const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Point * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Point,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Point___mul__" "', argument " "2"" of type '" "dolfin::Point const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Point___mul__" "', argument " "2"" of type '" "dolfin::Point const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Point * >(argp2);
  result = (dolfin::real)((dolfin::Point const *)arg1)->operator *((dolfin::Point const &)*arg2);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Point *arg1 = (dolfin::Point *) 0 ;
  dolfin::Point *arg2 = 0 ;
  dolfin::Point *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Point___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Point, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point___iadd__" "', argument " "1"" of type '" "dolfin::Point *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Point * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Point,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Point___iadd__" "', argument " "2"" of type '" "dolfin::Point const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Point___iadd__" "', argument " "2"" of type '" "dolfin::Point const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Point * >(argp2);
  {
    dolfin::Point const &_result_ref = (arg1)->operator +=((dolfin::Point const &)*arg2);
    result = (dolfin::Point *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Point, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Point *arg1 = (dolfin::Point *) 0 ;
  dolfin::Point *arg2 = 0 ;
  dolfin::Point *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Point___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Point, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point___isub__" "', argument " "1"" of type '" "dolfin::Point *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Point * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Point,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Point___isub__" "', argument " "2"" of type '" "dolfin::Point const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Point___isub__" "', argument " "2"" of type '" "dolfin::Point const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Point * >(argp2);
  {
    dolfin::Point const &_result_ref = (arg1)->operator -=((dolfin::Point const &)*arg2);
    result = (dolfin::Point *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Point, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Point *arg1 = (dolfin::Point *) 0 ;
  dolfin::real arg2 ;
  dolfin::Point *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Point___imul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Point, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point___imul__" "', argument " "1"" of type '" "dolfin::Point *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Point * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Point___imul__" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  {
    dolfin::Point const &_result_ref = (arg1)->operator *=(arg2);
    result = (dolfin::Point *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Point, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point___idiv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Point *arg1 = (dolfin::Point *) 0 ;
  dolfin::real arg2 ;
  dolfin::Point *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Point___idiv__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Point, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point___idiv__" "', argument " "1"" of type '" "dolfin::Point *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Point * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Point___idiv__" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  {
    dolfin::Point const &_result_ref = (arg1)->operator /=(arg2);
    result = (dolfin::Point *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Point, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point_cross(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Point *arg1 = (dolfin::Point *) 0 ;
  dolfin::Point *arg2 = 0 ;
  dolfin::Point result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Point_cross",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point_cross" "', argument " "1"" of type '" "dolfin::Point const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Point * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Point,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Point_cross" "', argument " "2"" of type '" "dolfin::Point const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Point_cross" "', argument " "2"" of type '" "dolfin::Point const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Point * >(argp2);
  result = ((dolfin::Point const *)arg1)->cross((dolfin::Point const &)*arg2);
  
  resultobj = SWIG_NewPointerObj((new dolfin::Point(static_cast<const dolfin::Point& >(result))), SWIGTYPE_p_dolfin__Point, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Point *arg1 = (dolfin::Point *) 0 ;
  dolfin::real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Point_x_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point_x_set" "', argument " "1"" of type '" "dolfin::Point *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Point * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Point_x_set" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  if (arg1) (arg1)->x = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Point *arg1 = (dolfin::Point *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Point_x_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point_x_get" "', argument " "1"" of type '" "dolfin::Point *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Point * >(argp1);
  result = (dolfin::real) ((arg1)->x);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Point *arg1 = (dolfin::Point *) 0 ;
  dolfin::real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Point_y_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point_y_set" "', argument " "1"" of type '" "dolfin::Point *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Point * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Point_y_set" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  if (arg1) (arg1)->y = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Point *arg1 = (dolfin::Point *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Point_y_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point_y_get" "', argument " "1"" of type '" "dolfin::Point *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Point * >(argp1);
  result = (dolfin::real) ((arg1)->y);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point_z_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Point *arg1 = (dolfin::Point *) 0 ;
  dolfin::real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Point_z_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point_z_set" "', argument " "1"" of type '" "dolfin::Point *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Point * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Point_z_set" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  if (arg1) (arg1)->z = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Point_z_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Point *arg1 = (dolfin::Point *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Point_z_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Point, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point_z_get" "', argument " "1"" of type '" "dolfin::Point *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Point * >(argp1);
  result = (dolfin::real) ((arg1)->z);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Point_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__Point, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Vertex__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vertex *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Vertex")) SWIG_fail;
  result = (dolfin::Vertex *)new dolfin::Vertex();
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vertex__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::real arg1 ;
  dolfin::Vertex *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Vertex",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Vertex" "', argument " "1"" of type '" "dolfin::real""'");
  } 
  arg1 = static_cast<dolfin::real >(val1);
  result = (dolfin::Vertex *)new dolfin::Vertex(arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vertex__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::real arg1 ;
  dolfin::real arg2 ;
  dolfin::Vertex *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Vertex",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Vertex" "', argument " "1"" of type '" "dolfin::real""'");
  } 
  arg1 = static_cast<dolfin::real >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Vertex" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  result = (dolfin::Vertex *)new dolfin::Vertex(arg1,arg2);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vertex__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::real arg1 ;
  dolfin::real arg2 ;
  dolfin::real arg3 ;
  dolfin::Vertex *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Vertex",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Vertex" "', argument " "1"" of type '" "dolfin::real""'");
  } 
  arg1 = static_cast<dolfin::real >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Vertex" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Vertex" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  result = (dolfin::Vertex *)new dolfin::Vertex(arg1,arg2,arg3);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vertex(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Vertex__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Vertex__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Vertex__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Vertex__SWIG_3(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_Vertex'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Vertex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Vertex",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Vertex" "', argument " "1"" of type '" "dolfin::Vertex *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vertex * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vertex_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vertex_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vertex_clear" "', argument " "1"" of type '" "dolfin::Vertex *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vertex * >(argp1);
  (arg1)->clear();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vertex_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vertex_id",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vertex_id" "', argument " "1"" of type '" "dolfin::Vertex const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vertex * >(argp1);
  result = (int)((dolfin::Vertex const *)arg1)->id();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vertex_numVertexNeighbors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vertex_numVertexNeighbors",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vertex_numVertexNeighbors" "', argument " "1"" of type '" "dolfin::Vertex const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vertex * >(argp1);
  result = (int)((dolfin::Vertex const *)arg1)->numVertexNeighbors();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vertex_numCellNeighbors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vertex_numCellNeighbors",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vertex_numCellNeighbors" "', argument " "1"" of type '" "dolfin::Vertex const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vertex * >(argp1);
  result = (int)((dolfin::Vertex const *)arg1)->numCellNeighbors();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vertex_numEdgeNeighbors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vertex_numEdgeNeighbors",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vertex_numEdgeNeighbors" "', argument " "1"" of type '" "dolfin::Vertex const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vertex * >(argp1);
  result = (int)((dolfin::Vertex const *)arg1)->numEdgeNeighbors();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vertex_vertex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
  int arg2 ;
  dolfin::Vertex *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vertex_vertex",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vertex_vertex" "', argument " "1"" of type '" "dolfin::Vertex const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vertex * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vertex_vertex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  {
    dolfin::Vertex &_result_ref = ((dolfin::Vertex const *)arg1)->vertex(arg2);
    result = (dolfin::Vertex *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vertex_cell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
  int arg2 ;
  dolfin::Cell *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vertex_cell",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vertex_cell" "', argument " "1"" of type '" "dolfin::Vertex const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vertex * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vertex_cell" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  {
    dolfin::Cell &_result_ref = ((dolfin::Vertex const *)arg1)->cell(arg2);
    result = (dolfin::Cell *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vertex_edge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
  int arg2 ;
  dolfin::Edge *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vertex_edge",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vertex_edge" "', argument " "1"" of type '" "dolfin::Vertex const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vertex * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vertex_edge" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  {
    dolfin::Edge &_result_ref = ((dolfin::Vertex const *)arg1)->edge(arg2);
    result = (dolfin::Edge *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Edge, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vertex_parent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
  dolfin::Vertex *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vertex_parent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vertex_parent" "', argument " "1"" of type '" "dolfin::Vertex const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vertex * >(argp1);
  result = (dolfin::Vertex *)((dolfin::Vertex const *)arg1)->parent();
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vertex_child(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
  dolfin::Vertex *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vertex_child",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vertex_child" "', argument " "1"" of type '" "dolfin::Vertex const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vertex * >(argp1);
  result = (dolfin::Vertex *)((dolfin::Vertex const *)arg1)->child();
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vertex_mesh__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
  dolfin::Mesh *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vertex_mesh",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vertex_mesh" "', argument " "1"" of type '" "dolfin::Vertex *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vertex * >(argp1);
  {
    dolfin::Mesh &_result_ref = (arg1)->mesh();
    result = (dolfin::Mesh *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vertex_mesh__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
  dolfin::Mesh *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vertex_mesh",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vertex_mesh" "', argument " "1"" of type '" "dolfin::Vertex const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vertex * >(argp1);
  {
    dolfin::Mesh const &_result_ref = ((dolfin::Vertex const *)arg1)->mesh();
    result = (dolfin::Mesh *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vertex_mesh(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Vertex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Vertex_mesh__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Vertex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Vertex_mesh__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Vertex_mesh'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vertex_coord__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
  dolfin::Point *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vertex_coord",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vertex_coord" "', argument " "1"" of type '" "dolfin::Vertex *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vertex * >(argp1);
  {
    dolfin::Point &_result_ref = (arg1)->coord();
    result = (dolfin::Point *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Point, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vertex_coord__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
  dolfin::Point result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vertex_coord",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vertex_coord" "', argument " "1"" of type '" "dolfin::Vertex const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vertex * >(argp1);
  result = ((dolfin::Vertex const *)arg1)->coord();
  
  resultobj = SWIG_NewPointerObj((new dolfin::Point(static_cast<const dolfin::Point& >(result))), SWIGTYPE_p_dolfin__Point, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vertex_coord(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Vertex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Vertex_coord__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Vertex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Vertex_coord__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Vertex_coord'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vertex_midpoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
  dolfin::Vertex *arg2 = 0 ;
  dolfin::Point result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vertex_midpoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vertex_midpoint" "', argument " "1"" of type '" "dolfin::Vertex const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vertex * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vertex,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vertex_midpoint" "', argument " "2"" of type '" "dolfin::Vertex const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vertex_midpoint" "', argument " "2"" of type '" "dolfin::Vertex const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vertex * >(argp2);
  result = ((dolfin::Vertex const *)arg1)->midpoint((dolfin::Vertex const &)*arg2);
  
  resultobj = SWIG_NewPointerObj((new dolfin::Point(static_cast<const dolfin::Point& >(result))), SWIGTYPE_p_dolfin__Point, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vertex_dist__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
  dolfin::Vertex *arg2 = 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vertex_dist",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vertex_dist" "', argument " "1"" of type '" "dolfin::Vertex const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vertex * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vertex,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vertex_dist" "', argument " "2"" of type '" "dolfin::Vertex const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vertex_dist" "', argument " "2"" of type '" "dolfin::Vertex const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vertex * >(argp2);
  result = (dolfin::real)((dolfin::Vertex const *)arg1)->dist((dolfin::Vertex const &)*arg2);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vertex_dist__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
  dolfin::Point *arg2 = 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vertex_dist",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vertex_dist" "', argument " "1"" of type '" "dolfin::Vertex const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vertex * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Point,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vertex_dist" "', argument " "2"" of type '" "dolfin::Point const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vertex_dist" "', argument " "2"" of type '" "dolfin::Point const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Point * >(argp2);
  result = (dolfin::real)((dolfin::Vertex const *)arg1)->dist((dolfin::Point const &)*arg2);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vertex_dist__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
  dolfin::real arg2 ;
  dolfin::real arg3 ;
  dolfin::real arg4 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Vertex_dist",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vertex_dist" "', argument " "1"" of type '" "dolfin::Vertex const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vertex * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vertex_dist" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vertex_dist" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Vertex_dist" "', argument " "4"" of type '" "dolfin::real""'");
  } 
  arg4 = static_cast<dolfin::real >(val4);
  result = (dolfin::real)((dolfin::Vertex const *)arg1)->dist(arg2,arg3,arg4);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vertex_dist__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
  dolfin::real arg2 ;
  dolfin::real arg3 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Vertex_dist",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vertex_dist" "', argument " "1"" of type '" "dolfin::Vertex const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vertex * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vertex_dist" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vertex_dist" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  result = (dolfin::real)((dolfin::Vertex const *)arg1)->dist(arg2,arg3);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vertex_dist__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
  dolfin::real arg2 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vertex_dist",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vertex_dist" "', argument " "1"" of type '" "dolfin::Vertex const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vertex * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vertex_dist" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  result = (dolfin::real)((dolfin::Vertex const *)arg1)->dist(arg2);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vertex_dist(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Vertex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__Vertex, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vertex_dist__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Vertex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vertex_dist__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Vertex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vertex_dist__SWIG_4(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Vertex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Vertex_dist__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Vertex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Vertex_dist__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Vertex_dist'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vertex_neighbor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
  dolfin::Vertex *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vertex_neighbor",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vertex_neighbor" "', argument " "1"" of type '" "dolfin::Vertex const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vertex * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vertex,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vertex_neighbor" "', argument " "2"" of type '" "dolfin::Vertex const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vertex_neighbor" "', argument " "2"" of type '" "dolfin::Vertex const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vertex * >(argp2);
  result = (bool)((dolfin::Vertex const *)arg1)->neighbor((dolfin::Vertex const &)*arg2);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vertex___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
  dolfin::Vertex *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vertex___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vertex___eq__" "', argument " "1"" of type '" "dolfin::Vertex const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vertex * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vertex,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vertex___eq__" "', argument " "2"" of type '" "dolfin::Vertex const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vertex___eq__" "', argument " "2"" of type '" "dolfin::Vertex const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vertex * >(argp2);
  result = (bool)((dolfin::Vertex const *)arg1)->operator ==((dolfin::Vertex const &)*arg2);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vertex___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
  dolfin::Vertex *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vertex___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vertex___ne__" "', argument " "1"" of type '" "dolfin::Vertex const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vertex * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vertex,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vertex___ne__" "', argument " "2"" of type '" "dolfin::Vertex const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vertex___ne__" "', argument " "2"" of type '" "dolfin::Vertex const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vertex * >(argp2);
  result = (bool)((dolfin::Vertex const *)arg1)->operator !=((dolfin::Vertex const &)*arg2);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vertex___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
  int arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vertex___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vertex___eq__" "', argument " "1"" of type '" "dolfin::Vertex const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vertex * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vertex___eq__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  result = (bool)((dolfin::Vertex const *)arg1)->operator ==(arg2);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vertex___eq__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Vertex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__Vertex, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vertex___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Vertex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vertex___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Vertex___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
  int arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vertex___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vertex___lt__" "', argument " "1"" of type '" "dolfin::Vertex const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vertex * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vertex___lt__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  result = (bool)((dolfin::Vertex const *)arg1)->operator <(arg2);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vertex___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
  int arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vertex___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vertex___le__" "', argument " "1"" of type '" "dolfin::Vertex const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vertex * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vertex___le__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  result = (bool)((dolfin::Vertex const *)arg1)->operator <=(arg2);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vertex___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
  int arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vertex___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vertex___gt__" "', argument " "1"" of type '" "dolfin::Vertex const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vertex * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vertex___gt__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  result = (bool)((dolfin::Vertex const *)arg1)->operator >(arg2);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vertex___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
  int arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vertex___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vertex___ge__" "', argument " "1"" of type '" "dolfin::Vertex const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vertex * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vertex___ge__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  result = (bool)((dolfin::Vertex const *)arg1)->operator >=(arg2);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vertex_nbids_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
  std::set<int > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Vertex_nbids_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vertex_nbids_set" "', argument " "1"" of type '" "dolfin::Vertex *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vertex * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__setTint_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vertex_nbids_set" "', argument " "2"" of type '" "std::set<int >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vertex_nbids_set" "', argument " "2"" of type '" "std::set<int >""'");
    } else {
      std::set<int > * temp = reinterpret_cast<std::set<int > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->nbids = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vertex_nbids_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
  std::set<int > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Vertex_nbids_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vertex_nbids_get" "', argument " "1"" of type '" "dolfin::Vertex *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vertex * >(argp1);
  result =  ((arg1)->nbids);
  
  resultobj = SWIG_NewPointerObj((new std::set<int >(static_cast<const std::set<int >& >(result))), SWIGTYPE_p_std__setTint_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Vertex_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__Vertex, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Edge__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Edge *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Edge")) SWIG_fail;
  result = (dolfin::Edge *)new dolfin::Edge();
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Edge, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Edge__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vertex *arg1 = 0 ;
  dolfin::Vertex *arg2 = 0 ;
  dolfin::Edge *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Edge",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Vertex,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Edge" "', argument " "1"" of type '" "dolfin::Vertex &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Edge" "', argument " "1"" of type '" "dolfin::Vertex &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vertex * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vertex,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Edge" "', argument " "2"" of type '" "dolfin::Vertex &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Edge" "', argument " "2"" of type '" "dolfin::Vertex &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vertex * >(argp2);
  result = (dolfin::Edge *)new dolfin::Edge(*arg1,*arg2);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Edge, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Edge(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Edge__SWIG_0(self, args);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Vertex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dolfin__Vertex, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Edge__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_Edge'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Edge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Edge *arg1 = (dolfin::Edge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Edge",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Edge, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Edge" "', argument " "1"" of type '" "dolfin::Edge *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Edge * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Edge_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Edge *arg1 = (dolfin::Edge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Edge_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Edge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Edge_clear" "', argument " "1"" of type '" "dolfin::Edge *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Edge * >(argp1);
  (arg1)->clear();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Edge_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Edge *arg1 = (dolfin::Edge *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Edge_id",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Edge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Edge_id" "', argument " "1"" of type '" "dolfin::Edge const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Edge * >(argp1);
  result = (int)((dolfin::Edge const *)arg1)->id();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Edge_numCellNeighbors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Edge *arg1 = (dolfin::Edge *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Edge_numCellNeighbors",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Edge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Edge_numCellNeighbors" "', argument " "1"" of type '" "dolfin::Edge const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Edge * >(argp1);
  result = (unsigned int)((dolfin::Edge const *)arg1)->numCellNeighbors();
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Edge_vertex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Edge *arg1 = (dolfin::Edge *) 0 ;
  int arg2 ;
  dolfin::Vertex *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Edge_vertex",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Edge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Edge_vertex" "', argument " "1"" of type '" "dolfin::Edge const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Edge * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Edge_vertex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  {
    dolfin::Vertex &_result_ref = ((dolfin::Edge const *)arg1)->vertex(arg2);
    result = (dolfin::Vertex *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Edge_cell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Edge *arg1 = (dolfin::Edge *) 0 ;
  int arg2 ;
  dolfin::Cell *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Edge_cell",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Edge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Edge_cell" "', argument " "1"" of type '" "dolfin::Edge const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Edge * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Edge_cell" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  {
    dolfin::Cell &_result_ref = ((dolfin::Edge const *)arg1)->cell(arg2);
    result = (dolfin::Cell *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Edge_mesh__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Edge *arg1 = (dolfin::Edge *) 0 ;
  dolfin::Mesh *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Edge_mesh",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Edge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Edge_mesh" "', argument " "1"" of type '" "dolfin::Edge *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Edge * >(argp1);
  {
    dolfin::Mesh &_result_ref = (arg1)->mesh();
    result = (dolfin::Mesh *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Edge_mesh__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Edge *arg1 = (dolfin::Edge *) 0 ;
  dolfin::Mesh *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Edge_mesh",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Edge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Edge_mesh" "', argument " "1"" of type '" "dolfin::Edge const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Edge * >(argp1);
  {
    dolfin::Mesh const &_result_ref = ((dolfin::Edge const *)arg1)->mesh();
    result = (dolfin::Mesh *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Edge_mesh(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Edge, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Edge_mesh__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Edge, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Edge_mesh__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Edge_mesh'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Edge_coord(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Edge *arg1 = (dolfin::Edge *) 0 ;
  int arg2 ;
  dolfin::Point *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Edge_coord",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Edge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Edge_coord" "', argument " "1"" of type '" "dolfin::Edge const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Edge * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Edge_coord" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  {
    dolfin::Point &_result_ref = ((dolfin::Edge const *)arg1)->coord(arg2);
    result = (dolfin::Point *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Point, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Edge_length(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Edge *arg1 = (dolfin::Edge *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Edge_length",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Edge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Edge_length" "', argument " "1"" of type '" "dolfin::Edge const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Edge * >(argp1);
  result = (dolfin::real)((dolfin::Edge const *)arg1)->length();
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Edge_midpoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Edge *arg1 = (dolfin::Edge *) 0 ;
  dolfin::Point result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Edge_midpoint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Edge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Edge_midpoint" "', argument " "1"" of type '" "dolfin::Edge const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Edge * >(argp1);
  result = ((dolfin::Edge const *)arg1)->midpoint();
  
  resultobj = SWIG_NewPointerObj((new dolfin::Point(static_cast<const dolfin::Point& >(result))), SWIGTYPE_p_dolfin__Point, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Edge_equals(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Edge *arg1 = (dolfin::Edge *) 0 ;
  dolfin::Vertex *arg2 = 0 ;
  dolfin::Vertex *arg3 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Edge_equals",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Edge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Edge_equals" "', argument " "1"" of type '" "dolfin::Edge const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Edge * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vertex,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Edge_equals" "', argument " "2"" of type '" "dolfin::Vertex const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Edge_equals" "', argument " "2"" of type '" "dolfin::Vertex const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vertex * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Vertex,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Edge_equals" "', argument " "3"" of type '" "dolfin::Vertex const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Edge_equals" "', argument " "3"" of type '" "dolfin::Vertex const &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Vertex * >(argp3);
  result = (bool)((dolfin::Edge const *)arg1)->equals((dolfin::Vertex const &)*arg2,(dolfin::Vertex const &)*arg3);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Edge_contains__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Edge *arg1 = (dolfin::Edge *) 0 ;
  dolfin::Vertex *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Edge_contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Edge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Edge_contains" "', argument " "1"" of type '" "dolfin::Edge const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Edge * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vertex,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Edge_contains" "', argument " "2"" of type '" "dolfin::Vertex const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Edge_contains" "', argument " "2"" of type '" "dolfin::Vertex const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vertex * >(argp2);
  result = (bool)((dolfin::Edge const *)arg1)->contains((dolfin::Vertex const &)*arg2);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Edge_contains__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Edge *arg1 = (dolfin::Edge *) 0 ;
  dolfin::Point *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Edge_contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Edge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Edge_contains" "', argument " "1"" of type '" "dolfin::Edge const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Edge * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Point,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Edge_contains" "', argument " "2"" of type '" "dolfin::Point const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Edge_contains" "', argument " "2"" of type '" "dolfin::Point const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Point * >(argp2);
  result = (bool)((dolfin::Edge const *)arg1)->contains((dolfin::Point const &)*arg2);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Edge_contains(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Edge, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__Vertex, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Edge_contains__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Edge, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Edge_contains__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Edge_contains'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Edge_ebids_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Edge *arg1 = (dolfin::Edge *) 0 ;
  std::set<int > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Edge_ebids_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Edge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Edge_ebids_set" "', argument " "1"" of type '" "dolfin::Edge *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Edge * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__setTint_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Edge_ebids_set" "', argument " "2"" of type '" "std::set<int >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Edge_ebids_set" "', argument " "2"" of type '" "std::set<int >""'");
    } else {
      std::set<int > * temp = reinterpret_cast<std::set<int > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->ebids = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Edge_ebids_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Edge *arg1 = (dolfin::Edge *) 0 ;
  std::set<int > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Edge_ebids_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Edge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Edge_ebids_get" "', argument " "1"" of type '" "dolfin::Edge *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Edge * >(argp1);
  result =  ((arg1)->ebids);
  
  resultobj = SWIG_NewPointerObj((new std::set<int >(static_cast<const std::set<int >& >(result))), SWIGTYPE_p_std__setTint_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Edge_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__Edge, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Triangle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vertex *arg1 = 0 ;
  dolfin::Vertex *arg2 = 0 ;
  dolfin::Vertex *arg3 = 0 ;
  dolfin::Triangle *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Triangle",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Vertex,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Triangle" "', argument " "1"" of type '" "dolfin::Vertex &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Triangle" "', argument " "1"" of type '" "dolfin::Vertex &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vertex * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vertex,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Triangle" "', argument " "2"" of type '" "dolfin::Vertex &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Triangle" "', argument " "2"" of type '" "dolfin::Vertex &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vertex * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Vertex,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Triangle" "', argument " "3"" of type '" "dolfin::Vertex &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Triangle" "', argument " "3"" of type '" "dolfin::Vertex &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Vertex * >(argp3);
  result = (dolfin::Triangle *)new dolfin::Triangle(*arg1,*arg2,*arg3);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Triangle, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Triangle_numVertices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Triangle *arg1 = (dolfin::Triangle *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Triangle_numVertices",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Triangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Triangle_numVertices" "', argument " "1"" of type '" "dolfin::Triangle const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Triangle * >(argp1);
  result = (int)((dolfin::Triangle const *)arg1)->numVertices();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Triangle_numEdges(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Triangle *arg1 = (dolfin::Triangle *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Triangle_numEdges",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Triangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Triangle_numEdges" "', argument " "1"" of type '" "dolfin::Triangle const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Triangle * >(argp1);
  result = (int)((dolfin::Triangle const *)arg1)->numEdges();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Triangle_numFaces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Triangle *arg1 = (dolfin::Triangle *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Triangle_numFaces",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Triangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Triangle_numFaces" "', argument " "1"" of type '" "dolfin::Triangle const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Triangle * >(argp1);
  result = (int)((dolfin::Triangle const *)arg1)->numFaces();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Triangle_numBoundaries(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Triangle *arg1 = (dolfin::Triangle *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Triangle_numBoundaries",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Triangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Triangle_numBoundaries" "', argument " "1"" of type '" "dolfin::Triangle const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Triangle * >(argp1);
  result = (int)((dolfin::Triangle const *)arg1)->numBoundaries();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Triangle_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Triangle *arg1 = (dolfin::Triangle *) 0 ;
  dolfin::Cell::Type result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Triangle_type",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Triangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Triangle_type" "', argument " "1"" of type '" "dolfin::Triangle const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Triangle * >(argp1);
  result = (dolfin::Cell::Type)((dolfin::Triangle const *)arg1)->type();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Triangle_orientation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Triangle *arg1 = (dolfin::Triangle *) 0 ;
  dolfin::Cell::Orientation result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Triangle_orientation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Triangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Triangle_orientation" "', argument " "1"" of type '" "dolfin::Triangle const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Triangle * >(argp1);
  result = (dolfin::Cell::Orientation)((dolfin::Triangle const *)arg1)->orientation();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Triangle_volume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Triangle *arg1 = (dolfin::Triangle *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Triangle_volume",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Triangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Triangle_volume" "', argument " "1"" of type '" "dolfin::Triangle const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Triangle * >(argp1);
  result = (dolfin::real)((dolfin::Triangle const *)arg1)->volume();
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Triangle_diameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Triangle *arg1 = (dolfin::Triangle *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Triangle_diameter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Triangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Triangle_diameter" "', argument " "1"" of type '" "dolfin::Triangle const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Triangle * >(argp1);
  result = (dolfin::real)((dolfin::Triangle const *)arg1)->diameter();
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Triangle_edgeAlignment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Triangle *arg1 = (dolfin::Triangle *) 0 ;
  dolfin::uint arg2 ;
  dolfin::uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Triangle_edgeAlignment",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Triangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Triangle_edgeAlignment" "', argument " "1"" of type '" "dolfin::Triangle const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Triangle * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Triangle_edgeAlignment" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  result = (dolfin::uint)((dolfin::Triangle const *)arg1)->edgeAlignment(arg2);
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Triangle_faceAlignment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Triangle *arg1 = (dolfin::Triangle *) 0 ;
  dolfin::uint arg2 ;
  dolfin::uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Triangle_faceAlignment",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Triangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Triangle_faceAlignment" "', argument " "1"" of type '" "dolfin::Triangle const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Triangle * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Triangle_faceAlignment" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  result = (dolfin::uint)((dolfin::Triangle const *)arg1)->faceAlignment(arg2);
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Triangle_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__Triangle, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Tetrahedron(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vertex *arg1 = 0 ;
  dolfin::Vertex *arg2 = 0 ;
  dolfin::Vertex *arg3 = 0 ;
  dolfin::Vertex *arg4 = 0 ;
  dolfin::Tetrahedron *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_Tetrahedron",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Vertex,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Tetrahedron" "', argument " "1"" of type '" "dolfin::Vertex &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Tetrahedron" "', argument " "1"" of type '" "dolfin::Vertex &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vertex * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vertex,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Tetrahedron" "', argument " "2"" of type '" "dolfin::Vertex &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Tetrahedron" "', argument " "2"" of type '" "dolfin::Vertex &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vertex * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Vertex,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Tetrahedron" "', argument " "3"" of type '" "dolfin::Vertex &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Tetrahedron" "', argument " "3"" of type '" "dolfin::Vertex &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Vertex * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_dolfin__Vertex,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_Tetrahedron" "', argument " "4"" of type '" "dolfin::Vertex &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Tetrahedron" "', argument " "4"" of type '" "dolfin::Vertex &""'"); 
  }
  arg4 = reinterpret_cast<dolfin::Vertex * >(argp4);
  result = (dolfin::Tetrahedron *)new dolfin::Tetrahedron(*arg1,*arg2,*arg3,*arg4);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Tetrahedron, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tetrahedron_numVertices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Tetrahedron *arg1 = (dolfin::Tetrahedron *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Tetrahedron_numVertices",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Tetrahedron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tetrahedron_numVertices" "', argument " "1"" of type '" "dolfin::Tetrahedron const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Tetrahedron * >(argp1);
  result = (int)((dolfin::Tetrahedron const *)arg1)->numVertices();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tetrahedron_numEdges(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Tetrahedron *arg1 = (dolfin::Tetrahedron *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Tetrahedron_numEdges",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Tetrahedron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tetrahedron_numEdges" "', argument " "1"" of type '" "dolfin::Tetrahedron const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Tetrahedron * >(argp1);
  result = (int)((dolfin::Tetrahedron const *)arg1)->numEdges();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tetrahedron_numFaces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Tetrahedron *arg1 = (dolfin::Tetrahedron *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Tetrahedron_numFaces",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Tetrahedron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tetrahedron_numFaces" "', argument " "1"" of type '" "dolfin::Tetrahedron const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Tetrahedron * >(argp1);
  result = (int)((dolfin::Tetrahedron const *)arg1)->numFaces();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tetrahedron_numBoundaries(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Tetrahedron *arg1 = (dolfin::Tetrahedron *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Tetrahedron_numBoundaries",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Tetrahedron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tetrahedron_numBoundaries" "', argument " "1"" of type '" "dolfin::Tetrahedron const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Tetrahedron * >(argp1);
  result = (int)((dolfin::Tetrahedron const *)arg1)->numBoundaries();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tetrahedron_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Tetrahedron *arg1 = (dolfin::Tetrahedron *) 0 ;
  dolfin::Cell::Type result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Tetrahedron_type",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Tetrahedron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tetrahedron_type" "', argument " "1"" of type '" "dolfin::Tetrahedron const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Tetrahedron * >(argp1);
  result = (dolfin::Cell::Type)((dolfin::Tetrahedron const *)arg1)->type();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tetrahedron_orientation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Tetrahedron *arg1 = (dolfin::Tetrahedron *) 0 ;
  dolfin::Cell::Orientation result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Tetrahedron_orientation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Tetrahedron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tetrahedron_orientation" "', argument " "1"" of type '" "dolfin::Tetrahedron const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Tetrahedron * >(argp1);
  result = (dolfin::Cell::Orientation)((dolfin::Tetrahedron const *)arg1)->orientation();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tetrahedron_volume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Tetrahedron *arg1 = (dolfin::Tetrahedron *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Tetrahedron_volume",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Tetrahedron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tetrahedron_volume" "', argument " "1"" of type '" "dolfin::Tetrahedron const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Tetrahedron * >(argp1);
  result = (dolfin::real)((dolfin::Tetrahedron const *)arg1)->volume();
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tetrahedron_diameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Tetrahedron *arg1 = (dolfin::Tetrahedron *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Tetrahedron_diameter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Tetrahedron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tetrahedron_diameter" "', argument " "1"" of type '" "dolfin::Tetrahedron const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Tetrahedron * >(argp1);
  result = (dolfin::real)((dolfin::Tetrahedron const *)arg1)->diameter();
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tetrahedron_edgeAlignment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Tetrahedron *arg1 = (dolfin::Tetrahedron *) 0 ;
  dolfin::uint arg2 ;
  dolfin::uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Tetrahedron_edgeAlignment",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Tetrahedron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tetrahedron_edgeAlignment" "', argument " "1"" of type '" "dolfin::Tetrahedron const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Tetrahedron * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Tetrahedron_edgeAlignment" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  result = (dolfin::uint)((dolfin::Tetrahedron const *)arg1)->edgeAlignment(arg2);
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tetrahedron_faceAlignment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Tetrahedron *arg1 = (dolfin::Tetrahedron *) 0 ;
  dolfin::uint arg2 ;
  dolfin::uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Tetrahedron_faceAlignment",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Tetrahedron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tetrahedron_faceAlignment" "', argument " "1"" of type '" "dolfin::Tetrahedron const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Tetrahedron * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Tetrahedron_faceAlignment" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  result = (dolfin::uint)((dolfin::Tetrahedron const *)arg1)->faceAlignment(arg2);
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Tetrahedron_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__Tetrahedron, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Cell__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Cell *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Cell")) SWIG_fail;
  result = (dolfin::Cell *)new dolfin::Cell();
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cell__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vertex *arg1 = 0 ;
  dolfin::Vertex *arg2 = 0 ;
  dolfin::Vertex *arg3 = 0 ;
  dolfin::Cell *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Cell",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Vertex,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Cell" "', argument " "1"" of type '" "dolfin::Vertex &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cell" "', argument " "1"" of type '" "dolfin::Vertex &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vertex * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vertex,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Cell" "', argument " "2"" of type '" "dolfin::Vertex &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cell" "', argument " "2"" of type '" "dolfin::Vertex &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vertex * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Vertex,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Cell" "', argument " "3"" of type '" "dolfin::Vertex &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cell" "', argument " "3"" of type '" "dolfin::Vertex &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Vertex * >(argp3);
  result = (dolfin::Cell *)new dolfin::Cell(*arg1,*arg2,*arg3);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cell__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vertex *arg1 = 0 ;
  dolfin::Vertex *arg2 = 0 ;
  dolfin::Vertex *arg3 = 0 ;
  dolfin::Vertex *arg4 = 0 ;
  dolfin::Cell *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_Cell",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Vertex,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Cell" "', argument " "1"" of type '" "dolfin::Vertex &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cell" "', argument " "1"" of type '" "dolfin::Vertex &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vertex * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vertex,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Cell" "', argument " "2"" of type '" "dolfin::Vertex &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cell" "', argument " "2"" of type '" "dolfin::Vertex &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vertex * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Vertex,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Cell" "', argument " "3"" of type '" "dolfin::Vertex &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cell" "', argument " "3"" of type '" "dolfin::Vertex &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Vertex * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_dolfin__Vertex,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_Cell" "', argument " "4"" of type '" "dolfin::Vertex &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cell" "', argument " "4"" of type '" "dolfin::Vertex &""'"); 
  }
  arg4 = reinterpret_cast<dolfin::Vertex * >(argp4);
  result = (dolfin::Cell *)new dolfin::Cell(*arg1,*arg2,*arg3,*arg4);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cell(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Cell__SWIG_0(self, args);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Vertex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dolfin__Vertex, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_dolfin__Vertex, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_Cell__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Vertex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dolfin__Vertex, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_dolfin__Vertex, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_dolfin__Vertex, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_Cell__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_Cell'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Cell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Cell",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Cell" "', argument " "1"" of type '" "dolfin::Cell *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Cell * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_clear" "', argument " "1"" of type '" "dolfin::Cell *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Cell * >(argp1);
  (arg1)->clear();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_id",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_id" "', argument " "1"" of type '" "dolfin::Cell const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Cell * >(argp1);
  result = (int)((dolfin::Cell const *)arg1)->id();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
  dolfin::Cell::Type result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_type",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_type" "', argument " "1"" of type '" "dolfin::Cell const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Cell * >(argp1);
  result = (dolfin::Cell::Type)((dolfin::Cell const *)arg1)->type();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_orientation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
  dolfin::Cell::Orientation result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_orientation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_orientation" "', argument " "1"" of type '" "dolfin::Cell const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Cell * >(argp1);
  result = (dolfin::Cell::Orientation)((dolfin::Cell const *)arg1)->orientation();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_numVertices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_numVertices",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_numVertices" "', argument " "1"" of type '" "dolfin::Cell const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Cell * >(argp1);
  result = (int)((dolfin::Cell const *)arg1)->numVertices();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_numEdges(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_numEdges",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_numEdges" "', argument " "1"" of type '" "dolfin::Cell const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Cell * >(argp1);
  result = (int)((dolfin::Cell const *)arg1)->numEdges();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_numFaces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_numFaces",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_numFaces" "', argument " "1"" of type '" "dolfin::Cell const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Cell * >(argp1);
  result = (int)((dolfin::Cell const *)arg1)->numFaces();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_numBoundaries(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_numBoundaries",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_numBoundaries" "', argument " "1"" of type '" "dolfin::Cell const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Cell * >(argp1);
  result = (int)((dolfin::Cell const *)arg1)->numBoundaries();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_numCellNeighbors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_numCellNeighbors",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_numCellNeighbors" "', argument " "1"" of type '" "dolfin::Cell const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Cell * >(argp1);
  result = (int)((dolfin::Cell const *)arg1)->numCellNeighbors();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_numVertexNeighbors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_numVertexNeighbors",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_numVertexNeighbors" "', argument " "1"" of type '" "dolfin::Cell const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Cell * >(argp1);
  result = (int)((dolfin::Cell const *)arg1)->numVertexNeighbors();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_numChildren(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_numChildren",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_numChildren" "', argument " "1"" of type '" "dolfin::Cell const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Cell * >(argp1);
  result = (int)((dolfin::Cell const *)arg1)->numChildren();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_vertex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
  int arg2 ;
  dolfin::Vertex *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cell_vertex",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_vertex" "', argument " "1"" of type '" "dolfin::Cell const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Cell * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_vertex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  {
    dolfin::Vertex &_result_ref = ((dolfin::Cell const *)arg1)->vertex(arg2);
    result = (dolfin::Vertex *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_edge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
  int arg2 ;
  dolfin::Edge *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cell_edge",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_edge" "', argument " "1"" of type '" "dolfin::Cell const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Cell * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_edge" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  {
    dolfin::Edge &_result_ref = ((dolfin::Cell const *)arg1)->edge(arg2);
    result = (dolfin::Edge *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Edge, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_face(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
  int arg2 ;
  Face *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cell_face",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_face" "', argument " "1"" of type '" "dolfin::Cell const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Cell * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_face" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  {
    Face &_result_ref = ((dolfin::Cell const *)arg1)->face(arg2);
    result = (Face *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Face, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_neighbor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
  int arg2 ;
  dolfin::Cell *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cell_neighbor",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_neighbor" "', argument " "1"" of type '" "dolfin::Cell const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Cell * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_neighbor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  {
    dolfin::Cell &_result_ref = ((dolfin::Cell const *)arg1)->neighbor(arg2);
    result = (dolfin::Cell *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_parent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
  dolfin::Cell *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_parent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_parent" "', argument " "1"" of type '" "dolfin::Cell const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Cell * >(argp1);
  result = (dolfin::Cell *)((dolfin::Cell const *)arg1)->parent();
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_child(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
  int arg2 ;
  dolfin::Cell *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cell_child",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_child" "', argument " "1"" of type '" "dolfin::Cell const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Cell * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_child" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  result = (dolfin::Cell *)((dolfin::Cell const *)arg1)->child(arg2);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_mesh__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
  dolfin::Mesh *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_mesh",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_mesh" "', argument " "1"" of type '" "dolfin::Cell *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Cell * >(argp1);
  {
    dolfin::Mesh &_result_ref = (arg1)->mesh();
    result = (dolfin::Mesh *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_mesh__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
  dolfin::Mesh *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_mesh",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_mesh" "', argument " "1"" of type '" "dolfin::Cell const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Cell * >(argp1);
  {
    dolfin::Mesh const &_result_ref = ((dolfin::Cell const *)arg1)->mesh();
    result = (dolfin::Mesh *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_mesh(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Cell, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Cell_mesh__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Cell, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Cell_mesh__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Cell_mesh'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_coord(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
  int arg2 ;
  dolfin::Point *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cell_coord",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_coord" "', argument " "1"" of type '" "dolfin::Cell const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Cell * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_coord" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  {
    dolfin::Point &_result_ref = ((dolfin::Cell const *)arg1)->coord(arg2);
    result = (dolfin::Point *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Point, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_midpoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
  dolfin::Point result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_midpoint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_midpoint" "', argument " "1"" of type '" "dolfin::Cell const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Cell * >(argp1);
  result = ((dolfin::Cell const *)arg1)->midpoint();
  
  resultobj = SWIG_NewPointerObj((new dolfin::Point(static_cast<const dolfin::Point& >(result))), SWIGTYPE_p_dolfin__Point, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_vertexID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
  int arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cell_vertexID",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_vertexID" "', argument " "1"" of type '" "dolfin::Cell const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Cell * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_vertexID" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  result = (int)((dolfin::Cell const *)arg1)->vertexID(arg2);
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_edgeID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
  int arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cell_edgeID",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_edgeID" "', argument " "1"" of type '" "dolfin::Cell const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Cell * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_edgeID" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  result = (int)((dolfin::Cell const *)arg1)->edgeID(arg2);
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_faceID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
  int arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cell_faceID",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_faceID" "', argument " "1"" of type '" "dolfin::Cell const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Cell * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_faceID" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  result = (int)((dolfin::Cell const *)arg1)->faceID(arg2);
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_volume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_volume",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_volume" "', argument " "1"" of type '" "dolfin::Cell const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Cell * >(argp1);
  result = (dolfin::real)((dolfin::Cell const *)arg1)->volume();
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_diameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_diameter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_diameter" "', argument " "1"" of type '" "dolfin::Cell const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Cell * >(argp1);
  result = (dolfin::real)((dolfin::Cell const *)arg1)->diameter();
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_edgeAlignment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
  dolfin::uint arg2 ;
  dolfin::uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cell_edgeAlignment",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_edgeAlignment" "', argument " "1"" of type '" "dolfin::Cell const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Cell * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_edgeAlignment" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  result = (dolfin::uint)((dolfin::Cell const *)arg1)->edgeAlignment(arg2);
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_faceAlignment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
  dolfin::uint arg2 ;
  dolfin::uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cell_faceAlignment",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_faceAlignment" "', argument " "1"" of type '" "dolfin::Cell const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Cell * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_faceAlignment" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  result = (dolfin::uint)((dolfin::Cell const *)arg1)->faceAlignment(arg2);
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
  dolfin::Cell *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cell___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell___eq__" "', argument " "1"" of type '" "dolfin::Cell const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Cell * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Cell,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cell___eq__" "', argument " "2"" of type '" "dolfin::Cell const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cell___eq__" "', argument " "2"" of type '" "dolfin::Cell const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Cell * >(argp2);
  result = (bool)((dolfin::Cell const *)arg1)->operator ==((dolfin::Cell const &)*arg2);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
  dolfin::Cell *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cell___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell___ne__" "', argument " "1"" of type '" "dolfin::Cell const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Cell * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Cell,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cell___ne__" "', argument " "2"" of type '" "dolfin::Cell const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cell___ne__" "', argument " "2"" of type '" "dolfin::Cell const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Cell * >(argp2);
  result = (bool)((dolfin::Cell const *)arg1)->operator !=((dolfin::Cell const &)*arg2);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_mark__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cell_mark",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_mark" "', argument " "1"" of type '" "dolfin::Cell *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Cell * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_mark" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast<bool >(val2);
  (arg1)->mark(arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_mark__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_mark",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_mark" "', argument " "1"" of type '" "dolfin::Cell *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Cell * >(argp1);
  (arg1)->mark();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_mark(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Cell, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Cell_mark__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Cell, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Cell_mark__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Cell_mark'");
  return NULL;
}


SWIGINTERN PyObject *Cell_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__Cell, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Face(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Face *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Face")) SWIG_fail;
  result = (dolfin::Face *)new dolfin::Face();
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Face, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Face(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Face *arg1 = (dolfin::Face *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Face",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Face, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Face" "', argument " "1"" of type '" "dolfin::Face *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Face * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Face_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Face *arg1 = (dolfin::Face *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Face_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Face, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Face_clear" "', argument " "1"" of type '" "dolfin::Face *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Face * >(argp1);
  (arg1)->clear();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Face_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Face *arg1 = (dolfin::Face *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Face_id",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Face, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Face_id" "', argument " "1"" of type '" "dolfin::Face const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Face * >(argp1);
  result = (int)((dolfin::Face const *)arg1)->id();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Face_numEdges(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Face *arg1 = (dolfin::Face *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Face_numEdges",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Face, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Face_numEdges" "', argument " "1"" of type '" "dolfin::Face const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Face * >(argp1);
  result = (unsigned int)((dolfin::Face const *)arg1)->numEdges();
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Face_numCellNeighbors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Face *arg1 = (dolfin::Face *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Face_numCellNeighbors",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Face, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Face_numCellNeighbors" "', argument " "1"" of type '" "dolfin::Face const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Face * >(argp1);
  result = (unsigned int)((dolfin::Face const *)arg1)->numCellNeighbors();
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Face_edge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Face *arg1 = (dolfin::Face *) 0 ;
  int arg2 ;
  dolfin::Edge *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Face_edge",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Face, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Face_edge" "', argument " "1"" of type '" "dolfin::Face const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Face * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Face_edge" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  {
    dolfin::Edge &_result_ref = ((dolfin::Face const *)arg1)->edge(arg2);
    result = (dolfin::Edge *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Edge, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Face_cell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Face *arg1 = (dolfin::Face *) 0 ;
  int arg2 ;
  dolfin::Cell *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Face_cell",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Face, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Face_cell" "', argument " "1"" of type '" "dolfin::Face const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Face * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Face_cell" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  {
    dolfin::Cell &_result_ref = ((dolfin::Face const *)arg1)->cell(arg2);
    result = (dolfin::Cell *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Face_mesh__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Face *arg1 = (dolfin::Face *) 0 ;
  dolfin::Mesh *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Face_mesh",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Face, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Face_mesh" "', argument " "1"" of type '" "dolfin::Face *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Face * >(argp1);
  {
    dolfin::Mesh &_result_ref = (arg1)->mesh();
    result = (dolfin::Mesh *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Face_mesh__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Face *arg1 = (dolfin::Face *) 0 ;
  dolfin::Mesh *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Face_mesh",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Face, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Face_mesh" "', argument " "1"" of type '" "dolfin::Face const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Face * >(argp1);
  {
    dolfin::Mesh const &_result_ref = ((dolfin::Face const *)arg1)->mesh();
    result = (dolfin::Mesh *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Face_mesh(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Face, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Face_mesh__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Face, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Face_mesh__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Face_mesh'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Face_equals__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Face *arg1 = (dolfin::Face *) 0 ;
  dolfin::Edge *arg2 = 0 ;
  dolfin::Edge *arg3 = 0 ;
  dolfin::Edge *arg4 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Face_equals",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Face, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Face_equals" "', argument " "1"" of type '" "dolfin::Face const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Face * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Edge,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Face_equals" "', argument " "2"" of type '" "dolfin::Edge const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Face_equals" "', argument " "2"" of type '" "dolfin::Edge const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Edge * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Edge,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Face_equals" "', argument " "3"" of type '" "dolfin::Edge const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Face_equals" "', argument " "3"" of type '" "dolfin::Edge const &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Edge * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_dolfin__Edge,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Face_equals" "', argument " "4"" of type '" "dolfin::Edge const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Face_equals" "', argument " "4"" of type '" "dolfin::Edge const &""'"); 
  }
  arg4 = reinterpret_cast<dolfin::Edge * >(argp4);
  result = (bool)((dolfin::Face const *)arg1)->equals((dolfin::Edge const &)*arg2,(dolfin::Edge const &)*arg3,(dolfin::Edge const &)*arg4);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Face_equals__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Face *arg1 = (dolfin::Face *) 0 ;
  dolfin::Edge *arg2 = 0 ;
  dolfin::Edge *arg3 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Face_equals",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Face, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Face_equals" "', argument " "1"" of type '" "dolfin::Face const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Face * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Edge,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Face_equals" "', argument " "2"" of type '" "dolfin::Edge const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Face_equals" "', argument " "2"" of type '" "dolfin::Edge const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Edge * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Edge,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Face_equals" "', argument " "3"" of type '" "dolfin::Edge const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Face_equals" "', argument " "3"" of type '" "dolfin::Edge const &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Edge * >(argp3);
  result = (bool)((dolfin::Face const *)arg1)->equals((dolfin::Edge const &)*arg2,(dolfin::Edge const &)*arg3);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Face_equals(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Face, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__Edge, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_dolfin__Edge, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Face_equals__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Face, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__Edge, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_dolfin__Edge, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_dolfin__Edge, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Face_equals__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Face_equals'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Face_contains__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Face *arg1 = (dolfin::Face *) 0 ;
  dolfin::Vertex *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Face_contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Face, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Face_contains" "', argument " "1"" of type '" "dolfin::Face const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Face * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vertex,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Face_contains" "', argument " "2"" of type '" "dolfin::Vertex const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Face_contains" "', argument " "2"" of type '" "dolfin::Vertex const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vertex * >(argp2);
  result = (bool)((dolfin::Face const *)arg1)->contains((dolfin::Vertex const &)*arg2);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Face_contains__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Face *arg1 = (dolfin::Face *) 0 ;
  dolfin::Point *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Face_contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Face, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Face_contains" "', argument " "1"" of type '" "dolfin::Face const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Face * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Point,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Face_contains" "', argument " "2"" of type '" "dolfin::Point const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Face_contains" "', argument " "2"" of type '" "dolfin::Point const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Point * >(argp2);
  result = (bool)((dolfin::Face const *)arg1)->contains((dolfin::Point const &)*arg2);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Face_contains(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Face, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__Vertex, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Face_contains__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Face, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Face_contains__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Face_contains'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Face_fbids_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Face *arg1 = (dolfin::Face *) 0 ;
  std::set<int > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Face_fbids_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Face, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Face_fbids_set" "', argument " "1"" of type '" "dolfin::Face *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Face * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__setTint_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Face_fbids_set" "', argument " "2"" of type '" "std::set<int >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Face_fbids_set" "', argument " "2"" of type '" "std::set<int >""'");
    } else {
      std::set<int > * temp = reinterpret_cast<std::set<int > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->fbids = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Face_fbids_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Face *arg1 = (dolfin::Face *) 0 ;
  std::set<int > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Face_fbids_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Face, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Face_fbids_get" "', argument " "1"" of type '" "dolfin::Face *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Face * >(argp1);
  result =  ((arg1)->fbids);
  
  resultobj = SWIG_NewPointerObj((new std::set<int >(static_cast<const std::set<int >& >(result))), SWIGTYPE_p_std__setTint_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Face_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__Face, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_VertexIterator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = 0 ;
  dolfin::VertexIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VertexIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Mesh,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VertexIterator" "', argument " "1"" of type '" "dolfin::Mesh const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VertexIterator" "', argument " "1"" of type '" "dolfin::Mesh const &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  result = (dolfin::VertexIterator *)new dolfin::VertexIterator((dolfin::Mesh const &)*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VertexIterator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
  dolfin::VertexIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VertexIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VertexIterator" "', argument " "1"" of type '" "dolfin::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  result = (dolfin::VertexIterator *)new dolfin::VertexIterator((dolfin::Mesh const *)arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VertexIterator__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Boundary *arg1 = 0 ;
  dolfin::VertexIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VertexIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Boundary,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VertexIterator" "', argument " "1"" of type '" "dolfin::Boundary const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VertexIterator" "', argument " "1"" of type '" "dolfin::Boundary const &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Boundary * >(argp1);
  result = (dolfin::VertexIterator *)new dolfin::VertexIterator((dolfin::Boundary const &)*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VertexIterator__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vertex *arg1 = 0 ;
  dolfin::VertexIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VertexIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Vertex,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VertexIterator" "', argument " "1"" of type '" "dolfin::Vertex const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VertexIterator" "', argument " "1"" of type '" "dolfin::Vertex const &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vertex * >(argp1);
  result = (dolfin::VertexIterator *)new dolfin::VertexIterator((dolfin::Vertex const &)*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VertexIterator__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VertexIterator *arg1 = 0 ;
  dolfin::VertexIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VertexIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__VertexIterator,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VertexIterator" "', argument " "1"" of type '" "dolfin::VertexIterator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VertexIterator" "', argument " "1"" of type '" "dolfin::VertexIterator const &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VertexIterator * >(argp1);
  result = (dolfin::VertexIterator *)new dolfin::VertexIterator((dolfin::VertexIterator const &)*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VertexIterator__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Cell *arg1 = 0 ;
  dolfin::VertexIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VertexIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Cell,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VertexIterator" "', argument " "1"" of type '" "dolfin::Cell const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VertexIterator" "', argument " "1"" of type '" "dolfin::Cell const &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Cell * >(argp1);
  result = (dolfin::VertexIterator *)new dolfin::VertexIterator((dolfin::Cell const &)*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VertexIterator__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::CellIterator *arg1 = 0 ;
  dolfin::VertexIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VertexIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__CellIterator,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VertexIterator" "', argument " "1"" of type '" "dolfin::CellIterator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VertexIterator" "', argument " "1"" of type '" "dolfin::CellIterator const &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::CellIterator * >(argp1);
  result = (dolfin::VertexIterator *)new dolfin::VertexIterator((dolfin::CellIterator const &)*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VertexIterator(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_dolfin__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VertexIterator__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VertexIterator__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_dolfin__Boundary, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VertexIterator__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_dolfin__Vertex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VertexIterator__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_dolfin__VertexIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VertexIterator__SWIG_4(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_dolfin__Cell, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VertexIterator__SWIG_5(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_dolfin__CellIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VertexIterator__SWIG_6(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_VertexIterator'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VertexIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VertexIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VertexIterator" "', argument " "1"" of type '" "dolfin::VertexIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VertexIterator * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator_increment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
  dolfin::VertexIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VertexIterator_increment",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator_increment" "', argument " "1"" of type '" "dolfin::VertexIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VertexIterator * >(argp1);
  {
    dolfin::VertexIterator &_result_ref = (arg1)->operator ++();
    result = (dolfin::VertexIterator *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__VertexIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VertexIterator_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator_end" "', argument " "1"" of type '" "dolfin::VertexIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VertexIterator * >(argp1);
  result = (bool)(arg1)->end();
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator_last(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VertexIterator_last",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator_last" "', argument " "1"" of type '" "dolfin::VertexIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VertexIterator * >(argp1);
  result = (bool)(arg1)->last();
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator_index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VertexIterator_index",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator_index" "', argument " "1"" of type '" "dolfin::VertexIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VertexIterator * >(argp1);
  result = (int)(arg1)->index();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
  dolfin::Vertex *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VertexIterator___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator___ref__" "', argument " "1"" of type '" "dolfin::VertexIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VertexIterator * >(argp1);
  {
    dolfin::Vertex &_result_ref = ((dolfin::VertexIterator const *)arg1)->operator *();
    result = (dolfin::Vertex *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
  dolfin::Vertex *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VertexIterator___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator___deref__" "', argument " "1"" of type '" "dolfin::VertexIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VertexIterator * >(argp1);
  result = (dolfin::Vertex *)((dolfin::VertexIterator const *)arg1)->operator ->();
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
  dolfin::VertexIterator *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VertexIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator___eq__" "', argument " "1"" of type '" "dolfin::VertexIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VertexIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__VertexIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VertexIterator___eq__" "', argument " "2"" of type '" "dolfin::VertexIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VertexIterator___eq__" "', argument " "2"" of type '" "dolfin::VertexIterator const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::VertexIterator * >(argp2);
  result = (bool)((dolfin::VertexIterator const *)arg1)->operator ==((dolfin::VertexIterator const &)*arg2);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
  dolfin::VertexIterator *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VertexIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator___ne__" "', argument " "1"" of type '" "dolfin::VertexIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VertexIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__VertexIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VertexIterator___ne__" "', argument " "2"" of type '" "dolfin::VertexIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VertexIterator___ne__" "', argument " "2"" of type '" "dolfin::VertexIterator const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::VertexIterator * >(argp2);
  result = (bool)((dolfin::VertexIterator const *)arg1)->operator !=((dolfin::VertexIterator const &)*arg2);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
  dolfin::Vertex *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VertexIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator___eq__" "', argument " "1"" of type '" "dolfin::VertexIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VertexIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vertex,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VertexIterator___eq__" "', argument " "2"" of type '" "dolfin::Vertex const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VertexIterator___eq__" "', argument " "2"" of type '" "dolfin::Vertex const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vertex * >(argp2);
  result = (bool)((dolfin::VertexIterator const *)arg1)->operator ==((dolfin::Vertex const &)*arg2);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator___eq__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__VertexIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__VertexIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VertexIterator___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__VertexIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__Vertex, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VertexIterator___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_VertexIterator___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
  dolfin::Vertex *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VertexIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator___ne__" "', argument " "1"" of type '" "dolfin::VertexIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VertexIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vertex,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VertexIterator___ne__" "', argument " "2"" of type '" "dolfin::Vertex const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VertexIterator___ne__" "', argument " "2"" of type '" "dolfin::Vertex const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vertex * >(argp2);
  result = (bool)((dolfin::VertexIterator const *)arg1)->operator !=((dolfin::Vertex const &)*arg2);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator___ne__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__VertexIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__VertexIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VertexIterator___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__VertexIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__Vertex, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VertexIterator___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_VertexIterator_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VertexIterator_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator_clear" "', argument " "1"" of type '" "dolfin::VertexIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VertexIterator * >(argp1);
  (*arg1)->clear();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VertexIterator_id",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator_id" "', argument " "1"" of type '" "dolfin::VertexIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VertexIterator * >(argp1);
  result = (int)(*arg1)->id();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator_numVertexNeighbors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VertexIterator_numVertexNeighbors",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator_numVertexNeighbors" "', argument " "1"" of type '" "dolfin::VertexIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VertexIterator * >(argp1);
  result = (int)(*arg1)->numVertexNeighbors();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator_numCellNeighbors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VertexIterator_numCellNeighbors",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator_numCellNeighbors" "', argument " "1"" of type '" "dolfin::VertexIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VertexIterator * >(argp1);
  result = (int)(*arg1)->numCellNeighbors();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator_numEdgeNeighbors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VertexIterator_numEdgeNeighbors",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator_numEdgeNeighbors" "', argument " "1"" of type '" "dolfin::VertexIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VertexIterator * >(argp1);
  result = (int)(*arg1)->numEdgeNeighbors();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator_vertex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
  int arg2 ;
  dolfin::Vertex *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VertexIterator_vertex",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator_vertex" "', argument " "1"" of type '" "dolfin::VertexIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VertexIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VertexIterator_vertex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  {
    dolfin::Vertex &_result_ref = (*arg1)->vertex(arg2);
    result = (dolfin::Vertex *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator_cell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
  int arg2 ;
  dolfin::Cell *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VertexIterator_cell",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator_cell" "', argument " "1"" of type '" "dolfin::VertexIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VertexIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VertexIterator_cell" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  {
    dolfin::Cell &_result_ref = (*arg1)->cell(arg2);
    result = (dolfin::Cell *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator_edge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
  int arg2 ;
  dolfin::Edge *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VertexIterator_edge",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator_edge" "', argument " "1"" of type '" "dolfin::VertexIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VertexIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VertexIterator_edge" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  {
    dolfin::Edge &_result_ref = (*arg1)->edge(arg2);
    result = (dolfin::Edge *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Edge, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator_parent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
  dolfin::Vertex *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VertexIterator_parent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator_parent" "', argument " "1"" of type '" "dolfin::VertexIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VertexIterator * >(argp1);
  result = (dolfin::Vertex *)(*arg1)->parent();
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator_child(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
  dolfin::Vertex *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VertexIterator_child",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator_child" "', argument " "1"" of type '" "dolfin::VertexIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VertexIterator * >(argp1);
  result = (dolfin::Vertex *)(*arg1)->child();
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator_mesh__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
  dolfin::Mesh *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VertexIterator_mesh",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator_mesh" "', argument " "1"" of type '" "dolfin::VertexIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VertexIterator * >(argp1);
  {
    dolfin::Mesh &_result_ref = (*arg1)->mesh();
    result = (dolfin::Mesh *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator_mesh__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
  dolfin::Mesh *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VertexIterator_mesh",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator_mesh" "', argument " "1"" of type '" "dolfin::VertexIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VertexIterator * >(argp1);
  {
    dolfin::Mesh const &_result_ref = (*arg1)->mesh();
    result = (dolfin::Mesh *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator_mesh(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__VertexIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_VertexIterator_mesh__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__VertexIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_VertexIterator_mesh__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'VertexIterator_mesh'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator_coord__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
  dolfin::Point *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VertexIterator_coord",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator_coord" "', argument " "1"" of type '" "dolfin::VertexIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VertexIterator * >(argp1);
  {
    dolfin::Point &_result_ref = (*arg1)->coord();
    result = (dolfin::Point *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Point, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator_coord__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
  dolfin::Point result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VertexIterator_coord",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator_coord" "', argument " "1"" of type '" "dolfin::VertexIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VertexIterator * >(argp1);
  result = (*arg1)->coord();
  
  resultobj = SWIG_NewPointerObj((new dolfin::Point(static_cast<const dolfin::Point& >(result))), SWIGTYPE_p_dolfin__Point, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator_coord(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__VertexIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_VertexIterator_coord__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__VertexIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_VertexIterator_coord__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'VertexIterator_coord'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator_midpoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
  dolfin::Vertex *arg2 = 0 ;
  dolfin::Point result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VertexIterator_midpoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator_midpoint" "', argument " "1"" of type '" "dolfin::VertexIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VertexIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vertex,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VertexIterator_midpoint" "', argument " "2"" of type '" "dolfin::Vertex const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VertexIterator_midpoint" "', argument " "2"" of type '" "dolfin::Vertex const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vertex * >(argp2);
  result = (*arg1)->midpoint((dolfin::Vertex const &)*arg2);
  
  resultobj = SWIG_NewPointerObj((new dolfin::Point(static_cast<const dolfin::Point& >(result))), SWIGTYPE_p_dolfin__Point, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator_dist__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
  dolfin::Vertex *arg2 = 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VertexIterator_dist",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator_dist" "', argument " "1"" of type '" "dolfin::VertexIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VertexIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vertex,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VertexIterator_dist" "', argument " "2"" of type '" "dolfin::Vertex const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VertexIterator_dist" "', argument " "2"" of type '" "dolfin::Vertex const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vertex * >(argp2);
  result = (dolfin::real)(*arg1)->dist((dolfin::Vertex const &)*arg2);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator_dist__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
  dolfin::Point *arg2 = 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VertexIterator_dist",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator_dist" "', argument " "1"" of type '" "dolfin::VertexIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VertexIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Point,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VertexIterator_dist" "', argument " "2"" of type '" "dolfin::Point const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VertexIterator_dist" "', argument " "2"" of type '" "dolfin::Point const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Point * >(argp2);
  result = (dolfin::real)(*arg1)->dist((dolfin::Point const &)*arg2);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator_dist__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
  dolfin::real arg2 ;
  dolfin::real arg3 ;
  dolfin::real arg4 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VertexIterator_dist",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator_dist" "', argument " "1"" of type '" "dolfin::VertexIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VertexIterator * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VertexIterator_dist" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VertexIterator_dist" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VertexIterator_dist" "', argument " "4"" of type '" "dolfin::real""'");
  } 
  arg4 = static_cast<dolfin::real >(val4);
  result = (dolfin::real)(*arg1)->dist(arg2,arg3,arg4);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator_dist__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
  dolfin::real arg2 ;
  dolfin::real arg3 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VertexIterator_dist",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator_dist" "', argument " "1"" of type '" "dolfin::VertexIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VertexIterator * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VertexIterator_dist" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VertexIterator_dist" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  result = (dolfin::real)(*arg1)->dist(arg2,arg3);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator_dist__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
  dolfin::real arg2 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VertexIterator_dist",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator_dist" "', argument " "1"" of type '" "dolfin::VertexIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VertexIterator * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VertexIterator_dist" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  result = (dolfin::real)(*arg1)->dist(arg2);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator_dist(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__VertexIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__Vertex, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VertexIterator_dist__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__VertexIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VertexIterator_dist__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__VertexIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VertexIterator_dist__SWIG_4(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__VertexIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VertexIterator_dist__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__VertexIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_VertexIterator_dist__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'VertexIterator_dist'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator_neighbor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
  dolfin::Vertex *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VertexIterator_neighbor",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator_neighbor" "', argument " "1"" of type '" "dolfin::VertexIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VertexIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vertex,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VertexIterator_neighbor" "', argument " "2"" of type '" "dolfin::Vertex const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VertexIterator_neighbor" "', argument " "2"" of type '" "dolfin::Vertex const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vertex * >(argp2);
  result = (bool)(*arg1)->neighbor((dolfin::Vertex const &)*arg2);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
  int arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VertexIterator___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator___lt__" "', argument " "1"" of type '" "dolfin::VertexIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VertexIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VertexIterator___lt__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  result = (bool)(*arg1)->operator <(arg2);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
  int arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VertexIterator___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator___le__" "', argument " "1"" of type '" "dolfin::VertexIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VertexIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VertexIterator___le__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  result = (bool)(*arg1)->operator <=(arg2);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
  int arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VertexIterator___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator___gt__" "', argument " "1"" of type '" "dolfin::VertexIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VertexIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VertexIterator___gt__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  result = (bool)(*arg1)->operator >(arg2);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
  int arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VertexIterator___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator___ge__" "', argument " "1"" of type '" "dolfin::VertexIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VertexIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VertexIterator___ge__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  result = (bool)(*arg1)->operator >=(arg2);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator_nbids_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
  std::set<int > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VertexIterator_nbids_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator_nbids_set" "', argument " "1"" of type '" "dolfin::VertexIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VertexIterator * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__setTint_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VertexIterator_nbids_set" "', argument " "2"" of type '" "std::set<int >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VertexIterator_nbids_set" "', argument " "2"" of type '" "std::set<int >""'");
    } else {
      std::set<int > * temp = reinterpret_cast<std::set<int > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (*arg1)->nbids = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VertexIterator_nbids_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
  std::set<int > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VertexIterator_nbids_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__VertexIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VertexIterator_nbids_get" "', argument " "1"" of type '" "dolfin::VertexIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VertexIterator * >(argp1);
  result =  ((*arg1)->nbids);
  
  resultobj = SWIG_NewPointerObj((new std::set<int >(static_cast<const std::set<int >& >(result))), SWIGTYPE_p_std__setTint_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VertexIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__VertexIterator, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CellIterator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = 0 ;
  dolfin::CellIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CellIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Mesh,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CellIterator" "', argument " "1"" of type '" "dolfin::Mesh const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CellIterator" "', argument " "1"" of type '" "dolfin::Mesh const &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  result = (dolfin::CellIterator *)new dolfin::CellIterator((dolfin::Mesh const &)*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CellIterator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
  dolfin::CellIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CellIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CellIterator" "', argument " "1"" of type '" "dolfin::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  result = (dolfin::CellIterator *)new dolfin::CellIterator((dolfin::Mesh const *)arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CellIterator__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vertex *arg1 = 0 ;
  dolfin::CellIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CellIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Vertex,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CellIterator" "', argument " "1"" of type '" "dolfin::Vertex const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CellIterator" "', argument " "1"" of type '" "dolfin::Vertex const &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vertex * >(argp1);
  result = (dolfin::CellIterator *)new dolfin::CellIterator((dolfin::Vertex const &)*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CellIterator__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VertexIterator *arg1 = 0 ;
  dolfin::CellIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CellIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__VertexIterator,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CellIterator" "', argument " "1"" of type '" "dolfin::VertexIterator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CellIterator" "', argument " "1"" of type '" "dolfin::VertexIterator const &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VertexIterator * >(argp1);
  result = (dolfin::CellIterator *)new dolfin::CellIterator((dolfin::VertexIterator const &)*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CellIterator__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Cell *arg1 = 0 ;
  dolfin::CellIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CellIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Cell,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CellIterator" "', argument " "1"" of type '" "dolfin::Cell const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CellIterator" "', argument " "1"" of type '" "dolfin::Cell const &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Cell * >(argp1);
  result = (dolfin::CellIterator *)new dolfin::CellIterator((dolfin::Cell const &)*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CellIterator__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::CellIterator *arg1 = 0 ;
  dolfin::CellIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CellIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__CellIterator,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CellIterator" "', argument " "1"" of type '" "dolfin::CellIterator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CellIterator" "', argument " "1"" of type '" "dolfin::CellIterator const &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::CellIterator * >(argp1);
  result = (dolfin::CellIterator *)new dolfin::CellIterator((dolfin::CellIterator const &)*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CellIterator__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Edge *arg1 = 0 ;
  dolfin::CellIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CellIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Edge,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CellIterator" "', argument " "1"" of type '" "dolfin::Edge const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CellIterator" "', argument " "1"" of type '" "dolfin::Edge const &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Edge * >(argp1);
  result = (dolfin::CellIterator *)new dolfin::CellIterator((dolfin::Edge const &)*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CellIterator__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::EdgeIterator *arg1 = 0 ;
  dolfin::CellIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CellIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__EdgeIterator,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CellIterator" "', argument " "1"" of type '" "dolfin::EdgeIterator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CellIterator" "', argument " "1"" of type '" "dolfin::EdgeIterator const &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::EdgeIterator * >(argp1);
  result = (dolfin::CellIterator *)new dolfin::CellIterator((dolfin::EdgeIterator const &)*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CellIterator__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Face *arg1 = 0 ;
  dolfin::CellIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CellIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Face,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CellIterator" "', argument " "1"" of type '" "dolfin::Face const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CellIterator" "', argument " "1"" of type '" "dolfin::Face const &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Face * >(argp1);
  result = (dolfin::CellIterator *)new dolfin::CellIterator((dolfin::Face const &)*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CellIterator__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::FaceIterator *arg1 = 0 ;
  dolfin::CellIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CellIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__FaceIterator,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CellIterator" "', argument " "1"" of type '" "dolfin::FaceIterator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CellIterator" "', argument " "1"" of type '" "dolfin::FaceIterator const &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::FaceIterator * >(argp1);
  result = (dolfin::CellIterator *)new dolfin::CellIterator((dolfin::FaceIterator const &)*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CellIterator(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_dolfin__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CellIterator__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CellIterator__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_dolfin__Vertex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CellIterator__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_dolfin__VertexIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CellIterator__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_dolfin__Cell, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CellIterator__SWIG_4(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_dolfin__CellIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CellIterator__SWIG_5(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_dolfin__Edge, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CellIterator__SWIG_6(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_dolfin__EdgeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CellIterator__SWIG_7(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_dolfin__Face, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CellIterator__SWIG_8(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_dolfin__FaceIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CellIterator__SWIG_9(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_CellIterator'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CellIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CellIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CellIterator" "', argument " "1"" of type '" "dolfin::CellIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::CellIterator * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellIterator_increment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
  dolfin::CellIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CellIterator_increment",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__CellIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellIterator_increment" "', argument " "1"" of type '" "dolfin::CellIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::CellIterator * >(argp1);
  {
    dolfin::CellIterator &_result_ref = (arg1)->operator ++();
    result = (dolfin::CellIterator *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__CellIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellIterator_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CellIterator_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__CellIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellIterator_end" "', argument " "1"" of type '" "dolfin::CellIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::CellIterator * >(argp1);
  result = (bool)(arg1)->end();
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellIterator_last(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CellIterator_last",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__CellIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellIterator_last" "', argument " "1"" of type '" "dolfin::CellIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::CellIterator * >(argp1);
  result = (bool)(arg1)->last();
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellIterator_index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CellIterator_index",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__CellIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellIterator_index" "', argument " "1"" of type '" "dolfin::CellIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::CellIterator * >(argp1);
  result = (int)(arg1)->index();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellIterator___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
  dolfin::Cell *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CellIterator___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__CellIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellIterator___ref__" "', argument " "1"" of type '" "dolfin::CellIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::CellIterator * >(argp1);
  {
    dolfin::Cell &_result_ref = ((dolfin::CellIterator const *)arg1)->operator *();
    result = (dolfin::Cell *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellIterator___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
  dolfin::Cell *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CellIterator___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__CellIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellIterator___deref__" "', argument " "1"" of type '" "dolfin::CellIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::CellIterator * >(argp1);
  result = (dolfin::Cell *)((dolfin::CellIterator const *)arg1)->operator ->();
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellIterator___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
  dolfin::CellIterator *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CellIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__CellIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellIterator___eq__" "', argument " "1"" of type '" "dolfin::CellIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::CellIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__CellIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CellIterator___eq__" "', argument " "2"" of type '" "dolfin::CellIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CellIterator___eq__" "', argument " "2"" of type '" "dolfin::CellIterator const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::CellIterator * >(argp2);
  result = (bool)((dolfin::CellIterator const *)arg1)->operator ==((dolfin::CellIterator const &)*arg2);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellIterator___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
  dolfin::CellIterator *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CellIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__CellIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellIterator___ne__" "', argument " "1"" of type '" "dolfin::CellIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::CellIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__CellIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CellIterator___ne__" "', argument " "2"" of type '" "dolfin::CellIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CellIterator___ne__" "', argument " "2"" of type '" "dolfin::CellIterator const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::CellIterator * >(argp2);
  result = (bool)((dolfin::CellIterator const *)arg1)->operator !=((dolfin::CellIterator const &)*arg2);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellIterator___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
  dolfin::Cell *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CellIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__CellIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellIterator___eq__" "', argument " "1"" of type '" "dolfin::CellIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::CellIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Cell,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CellIterator___eq__" "', argument " "2"" of type '" "dolfin::Cell const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CellIterator___eq__" "', argument " "2"" of type '" "dolfin::Cell const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Cell * >(argp2);
  result = (bool)((dolfin::CellIterator const *)arg1)->operator ==((dolfin::Cell const &)*arg2);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellIterator___eq__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__CellIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__CellIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CellIterator___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__CellIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__Cell, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CellIterator___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_CellIterator___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
  dolfin::Cell *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CellIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__CellIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellIterator___ne__" "', argument " "1"" of type '" "dolfin::CellIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::CellIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Cell,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CellIterator___ne__" "', argument " "2"" of type '" "dolfin::Cell const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CellIterator___ne__" "', argument " "2"" of type '" "dolfin::Cell const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Cell * >(argp2);
  result = (bool)((dolfin::CellIterator const *)arg1)->operator !=((dolfin::Cell const &)*arg2);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellIterator___ne__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__CellIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__CellIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CellIterator___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__CellIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__Cell, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CellIterator___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_CellIterator_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CellIterator_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__CellIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellIterator_clear" "', argument " "1"" of type '" "dolfin::CellIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::CellIterator * >(argp1);
  (*arg1)->clear();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellIterator_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CellIterator_id",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__CellIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellIterator_id" "', argument " "1"" of type '" "dolfin::CellIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::CellIterator * >(argp1);
  result = (int)(*arg1)->id();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellIterator_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
  dolfin::Cell::Type result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CellIterator_type",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__CellIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellIterator_type" "', argument " "1"" of type '" "dolfin::CellIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::CellIterator * >(argp1);
  result = (dolfin::Cell::Type)(*arg1)->type();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellIterator_orientation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
  dolfin::Cell::Orientation result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CellIterator_orientation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__CellIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellIterator_orientation" "', argument " "1"" of type '" "dolfin::CellIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::CellIterator * >(argp1);
  result = (dolfin::Cell::Orientation)(*arg1)->orientation();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellIterator_numVertices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CellIterator_numVertices",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__CellIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellIterator_numVertices" "', argument " "1"" of type '" "dolfin::CellIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::CellIterator * >(argp1);
  result = (int)(*arg1)->numVertices();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellIterator_numEdges(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CellIterator_numEdges",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__CellIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellIterator_numEdges" "', argument " "1"" of type '" "dolfin::CellIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::CellIterator * >(argp1);
  result = (int)(*arg1)->numEdges();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellIterator_numFaces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CellIterator_numFaces",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__CellIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellIterator_numFaces" "', argument " "1"" of type '" "dolfin::CellIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::CellIterator * >(argp1);
  result = (int)(*arg1)->numFaces();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellIterator_numBoundaries(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CellIterator_numBoundaries",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__CellIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellIterator_numBoundaries" "', argument " "1"" of type '" "dolfin::CellIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::CellIterator * >(argp1);
  result = (int)(*arg1)->numBoundaries();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellIterator_numCellNeighbors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CellIterator_numCellNeighbors",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__CellIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellIterator_numCellNeighbors" "', argument " "1"" of type '" "dolfin::CellIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::CellIterator * >(argp1);
  result = (int)(*arg1)->numCellNeighbors();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellIterator_numVertexNeighbors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CellIterator_numVertexNeighbors",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__CellIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellIterator_numVertexNeighbors" "', argument " "1"" of type '" "dolfin::CellIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::CellIterator * >(argp1);
  result = (int)(*arg1)->numVertexNeighbors();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellIterator_numChildren(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CellIterator_numChildren",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__CellIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellIterator_numChildren" "', argument " "1"" of type '" "dolfin::CellIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::CellIterator * >(argp1);
  result = (int)(*arg1)->numChildren();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellIterator_vertex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
  int arg2 ;
  dolfin::Vertex *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CellIterator_vertex",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__CellIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellIterator_vertex" "', argument " "1"" of type '" "dolfin::CellIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::CellIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CellIterator_vertex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  {
    dolfin::Vertex &_result_ref = (*arg1)->vertex(arg2);
    result = (dolfin::Vertex *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellIterator_edge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
  int arg2 ;
  dolfin::Edge *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CellIterator_edge",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__CellIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellIterator_edge" "', argument " "1"" of type '" "dolfin::CellIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::CellIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CellIterator_edge" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  {
    dolfin::Edge &_result_ref = (*arg1)->edge(arg2);
    result = (dolfin::Edge *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Edge, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellIterator_face(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
  int arg2 ;
  Face *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CellIterator_face",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__CellIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellIterator_face" "', argument " "1"" of type '" "dolfin::CellIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::CellIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CellIterator_face" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  {
    Face &_result_ref = (*arg1)->face(arg2);
    result = (Face *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Face, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellIterator_neighbor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
  int arg2 ;
  dolfin::Cell *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CellIterator_neighbor",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__CellIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellIterator_neighbor" "', argument " "1"" of type '" "dolfin::CellIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::CellIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CellIterator_neighbor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  {
    dolfin::Cell &_result_ref = (*arg1)->neighbor(arg2);
    result = (dolfin::Cell *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellIterator_parent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
  dolfin::Cell *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CellIterator_parent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__CellIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellIterator_parent" "', argument " "1"" of type '" "dolfin::CellIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::CellIterator * >(argp1);
  result = (dolfin::Cell *)(*arg1)->parent();
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellIterator_child(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
  int arg2 ;
  dolfin::Cell *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CellIterator_child",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__CellIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellIterator_child" "', argument " "1"" of type '" "dolfin::CellIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::CellIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CellIterator_child" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  result = (dolfin::Cell *)(*arg1)->child(arg2);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellIterator_mesh__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
  dolfin::Mesh *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CellIterator_mesh",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__CellIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellIterator_mesh" "', argument " "1"" of type '" "dolfin::CellIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::CellIterator * >(argp1);
  {
    dolfin::Mesh &_result_ref = (*arg1)->mesh();
    result = (dolfin::Mesh *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellIterator_mesh__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
  dolfin::Mesh *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CellIterator_mesh",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__CellIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellIterator_mesh" "', argument " "1"" of type '" "dolfin::CellIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::CellIterator * >(argp1);
  {
    dolfin::Mesh const &_result_ref = (*arg1)->mesh();
    result = (dolfin::Mesh *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellIterator_mesh(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__CellIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CellIterator_mesh__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__CellIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CellIterator_mesh__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'CellIterator_mesh'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellIterator_coord(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
  int arg2 ;
  dolfin::Point *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CellIterator_coord",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__CellIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellIterator_coord" "', argument " "1"" of type '" "dolfin::CellIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::CellIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CellIterator_coord" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  {
    dolfin::Point &_result_ref = (*arg1)->coord(arg2);
    result = (dolfin::Point *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Point, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellIterator_midpoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
  dolfin::Point result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CellIterator_midpoint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__CellIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellIterator_midpoint" "', argument " "1"" of type '" "dolfin::CellIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::CellIterator * >(argp1);
  result = (*arg1)->midpoint();
  
  resultobj = SWIG_NewPointerObj((new dolfin::Point(static_cast<const dolfin::Point& >(result))), SWIGTYPE_p_dolfin__Point, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellIterator_vertexID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
  int arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CellIterator_vertexID",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__CellIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellIterator_vertexID" "', argument " "1"" of type '" "dolfin::CellIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::CellIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CellIterator_vertexID" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  result = (int)(*arg1)->vertexID(arg2);
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellIterator_edgeID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
  int arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CellIterator_edgeID",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__CellIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellIterator_edgeID" "', argument " "1"" of type '" "dolfin::CellIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::CellIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CellIterator_edgeID" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  result = (int)(*arg1)->edgeID(arg2);
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellIterator_faceID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
  int arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CellIterator_faceID",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__CellIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellIterator_faceID" "', argument " "1"" of type '" "dolfin::CellIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::CellIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CellIterator_faceID" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  result = (int)(*arg1)->faceID(arg2);
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellIterator_volume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CellIterator_volume",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__CellIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellIterator_volume" "', argument " "1"" of type '" "dolfin::CellIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::CellIterator * >(argp1);
  result = (dolfin::real)(*arg1)->volume();
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellIterator_diameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CellIterator_diameter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__CellIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellIterator_diameter" "', argument " "1"" of type '" "dolfin::CellIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::CellIterator * >(argp1);
  result = (dolfin::real)(*arg1)->diameter();
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellIterator_edgeAlignment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
  dolfin::uint arg2 ;
  dolfin::uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CellIterator_edgeAlignment",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__CellIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellIterator_edgeAlignment" "', argument " "1"" of type '" "dolfin::CellIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::CellIterator * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CellIterator_edgeAlignment" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  result = (dolfin::uint)(*arg1)->edgeAlignment(arg2);
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellIterator_faceAlignment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
  dolfin::uint arg2 ;
  dolfin::uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CellIterator_faceAlignment",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__CellIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellIterator_faceAlignment" "', argument " "1"" of type '" "dolfin::CellIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::CellIterator * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CellIterator_faceAlignment" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  result = (dolfin::uint)(*arg1)->faceAlignment(arg2);
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellIterator_mark__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CellIterator_mark",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__CellIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellIterator_mark" "', argument " "1"" of type '" "dolfin::CellIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::CellIterator * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CellIterator_mark" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast<bool >(val2);
  (*arg1)->mark(arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellIterator_mark__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CellIterator_mark",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__CellIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellIterator_mark" "', argument " "1"" of type '" "dolfin::CellIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::CellIterator * >(argp1);
  (*arg1)->mark();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellIterator_mark(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__CellIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CellIterator_mark__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__CellIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CellIterator_mark__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'CellIterator_mark'");
  return NULL;
}


SWIGINTERN PyObject *CellIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__CellIterator, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_EdgeIterator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = 0 ;
  dolfin::EdgeIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_EdgeIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Mesh,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_EdgeIterator" "', argument " "1"" of type '" "dolfin::Mesh const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_EdgeIterator" "', argument " "1"" of type '" "dolfin::Mesh const &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  result = (dolfin::EdgeIterator *)new dolfin::EdgeIterator((dolfin::Mesh const &)*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__EdgeIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EdgeIterator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
  dolfin::EdgeIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_EdgeIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_EdgeIterator" "', argument " "1"" of type '" "dolfin::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  result = (dolfin::EdgeIterator *)new dolfin::EdgeIterator((dolfin::Mesh const *)arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__EdgeIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EdgeIterator__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Boundary *arg1 = 0 ;
  dolfin::EdgeIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_EdgeIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Boundary,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_EdgeIterator" "', argument " "1"" of type '" "dolfin::Boundary const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_EdgeIterator" "', argument " "1"" of type '" "dolfin::Boundary const &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Boundary * >(argp1);
  result = (dolfin::EdgeIterator *)new dolfin::EdgeIterator((dolfin::Boundary const &)*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__EdgeIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EdgeIterator__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Boundary *arg1 = (dolfin::Boundary *) 0 ;
  dolfin::EdgeIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_EdgeIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Boundary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_EdgeIterator" "', argument " "1"" of type '" "dolfin::Boundary const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Boundary * >(argp1);
  result = (dolfin::EdgeIterator *)new dolfin::EdgeIterator((dolfin::Boundary const *)arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__EdgeIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EdgeIterator__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vertex *arg1 = 0 ;
  dolfin::EdgeIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_EdgeIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Vertex,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_EdgeIterator" "', argument " "1"" of type '" "dolfin::Vertex const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_EdgeIterator" "', argument " "1"" of type '" "dolfin::Vertex const &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vertex * >(argp1);
  result = (dolfin::EdgeIterator *)new dolfin::EdgeIterator((dolfin::Vertex const &)*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__EdgeIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EdgeIterator__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::VertexIterator *arg1 = 0 ;
  dolfin::EdgeIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_EdgeIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__VertexIterator,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_EdgeIterator" "', argument " "1"" of type '" "dolfin::VertexIterator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_EdgeIterator" "', argument " "1"" of type '" "dolfin::VertexIterator const &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::VertexIterator * >(argp1);
  result = (dolfin::EdgeIterator *)new dolfin::EdgeIterator((dolfin::VertexIterator const &)*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__EdgeIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EdgeIterator__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Cell *arg1 = 0 ;
  dolfin::EdgeIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_EdgeIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Cell,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_EdgeIterator" "', argument " "1"" of type '" "dolfin::Cell const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_EdgeIterator" "', argument " "1"" of type '" "dolfin::Cell const &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Cell * >(argp1);
  result = (dolfin::EdgeIterator *)new dolfin::EdgeIterator((dolfin::Cell const &)*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__EdgeIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EdgeIterator__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::CellIterator *arg1 = 0 ;
  dolfin::EdgeIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_EdgeIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__CellIterator,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_EdgeIterator" "', argument " "1"" of type '" "dolfin::CellIterator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_EdgeIterator" "', argument " "1"" of type '" "dolfin::CellIterator const &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::CellIterator * >(argp1);
  result = (dolfin::EdgeIterator *)new dolfin::EdgeIterator((dolfin::CellIterator const &)*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__EdgeIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EdgeIterator__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Face *arg1 = 0 ;
  dolfin::EdgeIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_EdgeIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Face,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_EdgeIterator" "', argument " "1"" of type '" "dolfin::Face const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_EdgeIterator" "', argument " "1"" of type '" "dolfin::Face const &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Face * >(argp1);
  result = (dolfin::EdgeIterator *)new dolfin::EdgeIterator((dolfin::Face const &)*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__EdgeIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EdgeIterator__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::FaceIterator *arg1 = 0 ;
  dolfin::EdgeIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_EdgeIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__FaceIterator,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_EdgeIterator" "', argument " "1"" of type '" "dolfin::FaceIterator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_EdgeIterator" "', argument " "1"" of type '" "dolfin::FaceIterator const &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::FaceIterator * >(argp1);
  result = (dolfin::EdgeIterator *)new dolfin::EdgeIterator((dolfin::FaceIterator const &)*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__EdgeIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EdgeIterator(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_dolfin__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_EdgeIterator__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_EdgeIterator__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_dolfin__Boundary, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_EdgeIterator__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Boundary, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_EdgeIterator__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_dolfin__Vertex, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_EdgeIterator__SWIG_4(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_dolfin__VertexIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_EdgeIterator__SWIG_5(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_dolfin__Cell, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_EdgeIterator__SWIG_6(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_dolfin__CellIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_EdgeIterator__SWIG_7(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_dolfin__Face, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_EdgeIterator__SWIG_8(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_dolfin__FaceIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_EdgeIterator__SWIG_9(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_EdgeIterator'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_EdgeIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_EdgeIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__EdgeIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EdgeIterator" "', argument " "1"" of type '" "dolfin::EdgeIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::EdgeIterator * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EdgeIterator_increment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
  dolfin::EdgeIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EdgeIterator_increment",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__EdgeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EdgeIterator_increment" "', argument " "1"" of type '" "dolfin::EdgeIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::EdgeIterator * >(argp1);
  {
    dolfin::EdgeIterator &_result_ref = (arg1)->operator ++();
    result = (dolfin::EdgeIterator *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__EdgeIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EdgeIterator_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EdgeIterator_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__EdgeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EdgeIterator_end" "', argument " "1"" of type '" "dolfin::EdgeIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::EdgeIterator * >(argp1);
  result = (bool)(arg1)->end();
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EdgeIterator_last(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EdgeIterator_last",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__EdgeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EdgeIterator_last" "', argument " "1"" of type '" "dolfin::EdgeIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::EdgeIterator * >(argp1);
  result = (bool)(arg1)->last();
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EdgeIterator_index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EdgeIterator_index",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__EdgeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EdgeIterator_index" "', argument " "1"" of type '" "dolfin::EdgeIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::EdgeIterator * >(argp1);
  result = (int)(arg1)->index();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EdgeIterator___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
  dolfin::Edge *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EdgeIterator___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__EdgeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EdgeIterator___ref__" "', argument " "1"" of type '" "dolfin::EdgeIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::EdgeIterator * >(argp1);
  {
    dolfin::Edge &_result_ref = ((dolfin::EdgeIterator const *)arg1)->operator *();
    result = (dolfin::Edge *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Edge, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EdgeIterator___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
  dolfin::Edge *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EdgeIterator___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__EdgeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EdgeIterator___deref__" "', argument " "1"" of type '" "dolfin::EdgeIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::EdgeIterator * >(argp1);
  result = (dolfin::Edge *)((dolfin::EdgeIterator const *)arg1)->operator ->();
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Edge, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EdgeIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
  dolfin::EdgeIterator *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EdgeIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__EdgeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EdgeIterator___eq__" "', argument " "1"" of type '" "dolfin::EdgeIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::EdgeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__EdgeIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EdgeIterator___eq__" "', argument " "2"" of type '" "dolfin::EdgeIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EdgeIterator___eq__" "', argument " "2"" of type '" "dolfin::EdgeIterator const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::EdgeIterator * >(argp2);
  result = (bool)((dolfin::EdgeIterator const *)arg1)->operator ==((dolfin::EdgeIterator const &)*arg2);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EdgeIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
  dolfin::EdgeIterator *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EdgeIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__EdgeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EdgeIterator___ne__" "', argument " "1"" of type '" "dolfin::EdgeIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::EdgeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__EdgeIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EdgeIterator___ne__" "', argument " "2"" of type '" "dolfin::EdgeIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EdgeIterator___ne__" "', argument " "2"" of type '" "dolfin::EdgeIterator const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::EdgeIterator * >(argp2);
  result = (bool)((dolfin::EdgeIterator const *)arg1)->operator !=((dolfin::EdgeIterator const &)*arg2);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EdgeIterator_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EdgeIterator_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__EdgeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EdgeIterator_clear" "', argument " "1"" of type '" "dolfin::EdgeIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::EdgeIterator * >(argp1);
  (*arg1)->clear();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EdgeIterator_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EdgeIterator_id",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__EdgeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EdgeIterator_id" "', argument " "1"" of type '" "dolfin::EdgeIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::EdgeIterator * >(argp1);
  result = (int)(*arg1)->id();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EdgeIterator_numCellNeighbors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EdgeIterator_numCellNeighbors",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__EdgeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EdgeIterator_numCellNeighbors" "', argument " "1"" of type '" "dolfin::EdgeIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::EdgeIterator * >(argp1);
  result = (unsigned int)(*arg1)->numCellNeighbors();
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EdgeIterator_vertex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
  int arg2 ;
  dolfin::Vertex *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EdgeIterator_vertex",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__EdgeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EdgeIterator_vertex" "', argument " "1"" of type '" "dolfin::EdgeIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::EdgeIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EdgeIterator_vertex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  {
    dolfin::Vertex &_result_ref = (*arg1)->vertex(arg2);
    result = (dolfin::Vertex *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EdgeIterator_cell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
  int arg2 ;
  dolfin::Cell *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EdgeIterator_cell",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__EdgeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EdgeIterator_cell" "', argument " "1"" of type '" "dolfin::EdgeIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::EdgeIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EdgeIterator_cell" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  {
    dolfin::Cell &_result_ref = (*arg1)->cell(arg2);
    result = (dolfin::Cell *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EdgeIterator_mesh__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
  dolfin::Mesh *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EdgeIterator_mesh",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__EdgeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EdgeIterator_mesh" "', argument " "1"" of type '" "dolfin::EdgeIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::EdgeIterator * >(argp1);
  {
    dolfin::Mesh &_result_ref = (*arg1)->mesh();
    result = (dolfin::Mesh *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EdgeIterator_mesh__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
  dolfin::Mesh *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EdgeIterator_mesh",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__EdgeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EdgeIterator_mesh" "', argument " "1"" of type '" "dolfin::EdgeIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::EdgeIterator * >(argp1);
  {
    dolfin::Mesh const &_result_ref = (*arg1)->mesh();
    result = (dolfin::Mesh *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EdgeIterator_mesh(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__EdgeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_EdgeIterator_mesh__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__EdgeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_EdgeIterator_mesh__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'EdgeIterator_mesh'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_EdgeIterator_coord(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
  int arg2 ;
  dolfin::Point *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EdgeIterator_coord",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__EdgeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EdgeIterator_coord" "', argument " "1"" of type '" "dolfin::EdgeIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::EdgeIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EdgeIterator_coord" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  {
    dolfin::Point &_result_ref = (*arg1)->coord(arg2);
    result = (dolfin::Point *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Point, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EdgeIterator_length(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EdgeIterator_length",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__EdgeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EdgeIterator_length" "', argument " "1"" of type '" "dolfin::EdgeIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::EdgeIterator * >(argp1);
  result = (dolfin::real)(*arg1)->length();
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EdgeIterator_midpoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
  dolfin::Point result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EdgeIterator_midpoint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__EdgeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EdgeIterator_midpoint" "', argument " "1"" of type '" "dolfin::EdgeIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::EdgeIterator * >(argp1);
  result = (*arg1)->midpoint();
  
  resultobj = SWIG_NewPointerObj((new dolfin::Point(static_cast<const dolfin::Point& >(result))), SWIGTYPE_p_dolfin__Point, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EdgeIterator_equals(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
  dolfin::Vertex *arg2 = 0 ;
  dolfin::Vertex *arg3 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:EdgeIterator_equals",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__EdgeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EdgeIterator_equals" "', argument " "1"" of type '" "dolfin::EdgeIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::EdgeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vertex,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EdgeIterator_equals" "', argument " "2"" of type '" "dolfin::Vertex const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EdgeIterator_equals" "', argument " "2"" of type '" "dolfin::Vertex const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vertex * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Vertex,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "EdgeIterator_equals" "', argument " "3"" of type '" "dolfin::Vertex const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EdgeIterator_equals" "', argument " "3"" of type '" "dolfin::Vertex const &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Vertex * >(argp3);
  result = (bool)(*arg1)->equals((dolfin::Vertex const &)*arg2,(dolfin::Vertex const &)*arg3);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EdgeIterator_contains__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
  dolfin::Vertex *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EdgeIterator_contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__EdgeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EdgeIterator_contains" "', argument " "1"" of type '" "dolfin::EdgeIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::EdgeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vertex,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EdgeIterator_contains" "', argument " "2"" of type '" "dolfin::Vertex const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EdgeIterator_contains" "', argument " "2"" of type '" "dolfin::Vertex const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vertex * >(argp2);
  result = (bool)(*arg1)->contains((dolfin::Vertex const &)*arg2);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EdgeIterator_contains__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
  dolfin::Point *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EdgeIterator_contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__EdgeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EdgeIterator_contains" "', argument " "1"" of type '" "dolfin::EdgeIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::EdgeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Point,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EdgeIterator_contains" "', argument " "2"" of type '" "dolfin::Point const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EdgeIterator_contains" "', argument " "2"" of type '" "dolfin::Point const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Point * >(argp2);
  result = (bool)(*arg1)->contains((dolfin::Point const &)*arg2);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EdgeIterator_contains(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__EdgeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__Vertex, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_EdgeIterator_contains__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__EdgeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_EdgeIterator_contains__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'EdgeIterator_contains'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_EdgeIterator_ebids_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
  std::set<int > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:EdgeIterator_ebids_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__EdgeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EdgeIterator_ebids_set" "', argument " "1"" of type '" "dolfin::EdgeIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::EdgeIterator * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__setTint_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EdgeIterator_ebids_set" "', argument " "2"" of type '" "std::set<int >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EdgeIterator_ebids_set" "', argument " "2"" of type '" "std::set<int >""'");
    } else {
      std::set<int > * temp = reinterpret_cast<std::set<int > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (*arg1)->ebids = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EdgeIterator_ebids_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
  std::set<int > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:EdgeIterator_ebids_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__EdgeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EdgeIterator_ebids_get" "', argument " "1"" of type '" "dolfin::EdgeIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::EdgeIterator * >(argp1);
  result =  ((*arg1)->ebids);
  
  resultobj = SWIG_NewPointerObj((new std::set<int >(static_cast<const std::set<int >& >(result))), SWIGTYPE_p_std__setTint_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *EdgeIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__EdgeIterator, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_FaceIterator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = 0 ;
  dolfin::FaceIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FaceIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Mesh,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FaceIterator" "', argument " "1"" of type '" "dolfin::Mesh const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FaceIterator" "', argument " "1"" of type '" "dolfin::Mesh const &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  result = (dolfin::FaceIterator *)new dolfin::FaceIterator((dolfin::Mesh const &)*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__FaceIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FaceIterator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
  dolfin::FaceIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FaceIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FaceIterator" "', argument " "1"" of type '" "dolfin::Mesh const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  result = (dolfin::FaceIterator *)new dolfin::FaceIterator((dolfin::Mesh const *)arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__FaceIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FaceIterator__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Boundary *arg1 = 0 ;
  dolfin::FaceIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FaceIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Boundary,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FaceIterator" "', argument " "1"" of type '" "dolfin::Boundary const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FaceIterator" "', argument " "1"" of type '" "dolfin::Boundary const &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Boundary * >(argp1);
  result = (dolfin::FaceIterator *)new dolfin::FaceIterator((dolfin::Boundary const &)*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__FaceIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FaceIterator__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Boundary *arg1 = (dolfin::Boundary *) 0 ;
  dolfin::FaceIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FaceIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Boundary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FaceIterator" "', argument " "1"" of type '" "dolfin::Boundary const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Boundary * >(argp1);
  result = (dolfin::FaceIterator *)new dolfin::FaceIterator((dolfin::Boundary const *)arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__FaceIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FaceIterator__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Cell *arg1 = 0 ;
  dolfin::FaceIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FaceIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Cell,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FaceIterator" "', argument " "1"" of type '" "dolfin::Cell const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FaceIterator" "', argument " "1"" of type '" "dolfin::Cell const &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Cell * >(argp1);
  result = (dolfin::FaceIterator *)new dolfin::FaceIterator((dolfin::Cell const &)*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__FaceIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FaceIterator__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::CellIterator *arg1 = 0 ;
  dolfin::FaceIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FaceIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__CellIterator,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FaceIterator" "', argument " "1"" of type '" "dolfin::CellIterator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FaceIterator" "', argument " "1"" of type '" "dolfin::CellIterator const &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::CellIterator * >(argp1);
  result = (dolfin::FaceIterator *)new dolfin::FaceIterator((dolfin::CellIterator const &)*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__FaceIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FaceIterator(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_dolfin__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FaceIterator__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FaceIterator__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_dolfin__Boundary, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FaceIterator__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Boundary, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FaceIterator__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_dolfin__Cell, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FaceIterator__SWIG_4(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_dolfin__CellIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FaceIterator__SWIG_5(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_FaceIterator'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FaceIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FaceIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__FaceIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FaceIterator" "', argument " "1"" of type '" "dolfin::FaceIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::FaceIterator * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FaceIterator_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FaceIterator_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__FaceIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FaceIterator_end" "', argument " "1"" of type '" "dolfin::FaceIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::FaceIterator * >(argp1);
  result = (bool)(arg1)->end();
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FaceIterator_last(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FaceIterator_last",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__FaceIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FaceIterator_last" "', argument " "1"" of type '" "dolfin::FaceIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::FaceIterator * >(argp1);
  result = (bool)(arg1)->last();
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FaceIterator_index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FaceIterator_index",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__FaceIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FaceIterator_index" "', argument " "1"" of type '" "dolfin::FaceIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::FaceIterator * >(argp1);
  result = (int)(arg1)->index();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FaceIterator___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
  dolfin::Face *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FaceIterator___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__FaceIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FaceIterator___ref__" "', argument " "1"" of type '" "dolfin::FaceIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::FaceIterator * >(argp1);
  {
    dolfin::Face &_result_ref = ((dolfin::FaceIterator const *)arg1)->operator *();
    result = (dolfin::Face *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Face, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FaceIterator___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
  dolfin::Face *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FaceIterator___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__FaceIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FaceIterator___deref__" "', argument " "1"" of type '" "dolfin::FaceIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::FaceIterator * >(argp1);
  result = (dolfin::Face *)((dolfin::FaceIterator const *)arg1)->operator ->();
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Face, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FaceIterator___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
  dolfin::FaceIterator *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FaceIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__FaceIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FaceIterator___eq__" "', argument " "1"" of type '" "dolfin::FaceIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::FaceIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__FaceIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FaceIterator___eq__" "', argument " "2"" of type '" "dolfin::FaceIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FaceIterator___eq__" "', argument " "2"" of type '" "dolfin::FaceIterator const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::FaceIterator * >(argp2);
  result = (bool)((dolfin::FaceIterator const *)arg1)->operator ==((dolfin::FaceIterator const &)*arg2);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FaceIterator___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
  dolfin::FaceIterator *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FaceIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__FaceIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FaceIterator___ne__" "', argument " "1"" of type '" "dolfin::FaceIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::FaceIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__FaceIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FaceIterator___ne__" "', argument " "2"" of type '" "dolfin::FaceIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FaceIterator___ne__" "', argument " "2"" of type '" "dolfin::FaceIterator const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::FaceIterator * >(argp2);
  result = (bool)((dolfin::FaceIterator const *)arg1)->operator !=((dolfin::FaceIterator const &)*arg2);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FaceIterator___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
  dolfin::Face *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FaceIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__FaceIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FaceIterator___eq__" "', argument " "1"" of type '" "dolfin::FaceIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::FaceIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Face,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FaceIterator___eq__" "', argument " "2"" of type '" "dolfin::Face const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FaceIterator___eq__" "', argument " "2"" of type '" "dolfin::Face const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Face * >(argp2);
  result = (bool)((dolfin::FaceIterator const *)arg1)->operator ==((dolfin::Face const &)*arg2);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FaceIterator___eq__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__FaceIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__FaceIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FaceIterator___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__FaceIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__Face, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FaceIterator___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_FaceIterator___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
  dolfin::Face *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FaceIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__FaceIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FaceIterator___ne__" "', argument " "1"" of type '" "dolfin::FaceIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::FaceIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Face,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FaceIterator___ne__" "', argument " "2"" of type '" "dolfin::Face const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FaceIterator___ne__" "', argument " "2"" of type '" "dolfin::Face const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Face * >(argp2);
  result = (bool)((dolfin::FaceIterator const *)arg1)->operator !=((dolfin::Face const &)*arg2);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FaceIterator___ne__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__FaceIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__FaceIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FaceIterator___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__FaceIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__Face, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FaceIterator___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_FaceIterator_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FaceIterator_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__FaceIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FaceIterator_clear" "', argument " "1"" of type '" "dolfin::FaceIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::FaceIterator * >(argp1);
  (*arg1)->clear();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FaceIterator_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FaceIterator_id",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__FaceIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FaceIterator_id" "', argument " "1"" of type '" "dolfin::FaceIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::FaceIterator * >(argp1);
  result = (int)(*arg1)->id();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FaceIterator_numEdges(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FaceIterator_numEdges",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__FaceIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FaceIterator_numEdges" "', argument " "1"" of type '" "dolfin::FaceIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::FaceIterator * >(argp1);
  result = (unsigned int)(*arg1)->numEdges();
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FaceIterator_numCellNeighbors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FaceIterator_numCellNeighbors",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__FaceIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FaceIterator_numCellNeighbors" "', argument " "1"" of type '" "dolfin::FaceIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::FaceIterator * >(argp1);
  result = (unsigned int)(*arg1)->numCellNeighbors();
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FaceIterator_edge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
  int arg2 ;
  dolfin::Edge *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FaceIterator_edge",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__FaceIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FaceIterator_edge" "', argument " "1"" of type '" "dolfin::FaceIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::FaceIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FaceIterator_edge" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  {
    dolfin::Edge &_result_ref = (*arg1)->edge(arg2);
    result = (dolfin::Edge *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Edge, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FaceIterator_cell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
  int arg2 ;
  dolfin::Cell *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FaceIterator_cell",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__FaceIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FaceIterator_cell" "', argument " "1"" of type '" "dolfin::FaceIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::FaceIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FaceIterator_cell" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  {
    dolfin::Cell &_result_ref = (*arg1)->cell(arg2);
    result = (dolfin::Cell *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FaceIterator_mesh__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
  dolfin::Mesh *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FaceIterator_mesh",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__FaceIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FaceIterator_mesh" "', argument " "1"" of type '" "dolfin::FaceIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::FaceIterator * >(argp1);
  {
    dolfin::Mesh &_result_ref = (*arg1)->mesh();
    result = (dolfin::Mesh *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FaceIterator_mesh__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
  dolfin::Mesh *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FaceIterator_mesh",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__FaceIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FaceIterator_mesh" "', argument " "1"" of type '" "dolfin::FaceIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::FaceIterator * >(argp1);
  {
    dolfin::Mesh const &_result_ref = (*arg1)->mesh();
    result = (dolfin::Mesh *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FaceIterator_mesh(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__FaceIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FaceIterator_mesh__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__FaceIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FaceIterator_mesh__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'FaceIterator_mesh'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_FaceIterator_equals__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
  dolfin::Edge *arg2 = 0 ;
  dolfin::Edge *arg3 = 0 ;
  dolfin::Edge *arg4 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FaceIterator_equals",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__FaceIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FaceIterator_equals" "', argument " "1"" of type '" "dolfin::FaceIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::FaceIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Edge,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FaceIterator_equals" "', argument " "2"" of type '" "dolfin::Edge const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FaceIterator_equals" "', argument " "2"" of type '" "dolfin::Edge const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Edge * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Edge,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FaceIterator_equals" "', argument " "3"" of type '" "dolfin::Edge const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FaceIterator_equals" "', argument " "3"" of type '" "dolfin::Edge const &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Edge * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_dolfin__Edge,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FaceIterator_equals" "', argument " "4"" of type '" "dolfin::Edge const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FaceIterator_equals" "', argument " "4"" of type '" "dolfin::Edge const &""'"); 
  }
  arg4 = reinterpret_cast<dolfin::Edge * >(argp4);
  result = (bool)(*arg1)->equals((dolfin::Edge const &)*arg2,(dolfin::Edge const &)*arg3,(dolfin::Edge const &)*arg4);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FaceIterator_equals__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
  dolfin::Edge *arg2 = 0 ;
  dolfin::Edge *arg3 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FaceIterator_equals",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__FaceIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FaceIterator_equals" "', argument " "1"" of type '" "dolfin::FaceIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::FaceIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Edge,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FaceIterator_equals" "', argument " "2"" of type '" "dolfin::Edge const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FaceIterator_equals" "', argument " "2"" of type '" "dolfin::Edge const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Edge * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Edge,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FaceIterator_equals" "', argument " "3"" of type '" "dolfin::Edge const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FaceIterator_equals" "', argument " "3"" of type '" "dolfin::Edge const &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Edge * >(argp3);
  result = (bool)(*arg1)->equals((dolfin::Edge const &)*arg2,(dolfin::Edge const &)*arg3);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FaceIterator_equals(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__FaceIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__Edge, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_dolfin__Edge, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_FaceIterator_equals__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__FaceIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__Edge, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_dolfin__Edge, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_dolfin__Edge, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_FaceIterator_equals__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'FaceIterator_equals'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_FaceIterator_contains__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
  dolfin::Vertex *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FaceIterator_contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__FaceIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FaceIterator_contains" "', argument " "1"" of type '" "dolfin::FaceIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::FaceIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vertex,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FaceIterator_contains" "', argument " "2"" of type '" "dolfin::Vertex const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FaceIterator_contains" "', argument " "2"" of type '" "dolfin::Vertex const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vertex * >(argp2);
  result = (bool)(*arg1)->contains((dolfin::Vertex const &)*arg2);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FaceIterator_contains__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
  dolfin::Point *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FaceIterator_contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__FaceIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FaceIterator_contains" "', argument " "1"" of type '" "dolfin::FaceIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::FaceIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Point,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FaceIterator_contains" "', argument " "2"" of type '" "dolfin::Point const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FaceIterator_contains" "', argument " "2"" of type '" "dolfin::Point const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Point * >(argp2);
  result = (bool)(*arg1)->contains((dolfin::Point const &)*arg2);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FaceIterator_contains(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__FaceIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__Vertex, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FaceIterator_contains__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__FaceIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FaceIterator_contains__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'FaceIterator_contains'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_FaceIterator_fbids_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
  std::set<int > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FaceIterator_fbids_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__FaceIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FaceIterator_fbids_set" "', argument " "1"" of type '" "dolfin::FaceIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::FaceIterator * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__setTint_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FaceIterator_fbids_set" "', argument " "2"" of type '" "std::set<int >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FaceIterator_fbids_set" "', argument " "2"" of type '" "std::set<int >""'");
    } else {
      std::set<int > * temp = reinterpret_cast<std::set<int > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (*arg1)->fbids = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FaceIterator_fbids_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
  std::set<int > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FaceIterator_fbids_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__FaceIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FaceIterator_fbids_get" "', argument " "1"" of type '" "dolfin::FaceIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::FaceIterator * >(argp1);
  result =  ((*arg1)->fbids);
  
  resultobj = SWIG_NewPointerObj((new std::set<int >(static_cast<const std::set<int >& >(result))), SWIGTYPE_p_std__setTint_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FaceIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__FaceIterator, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MeshIterator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshHierarchy *arg1 = 0 ;
  dolfin::MeshIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MeshIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__MeshHierarchy,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MeshIterator" "', argument " "1"" of type '" "dolfin::MeshHierarchy const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MeshIterator" "', argument " "1"" of type '" "dolfin::MeshHierarchy const &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshHierarchy * >(argp1);
  result = (dolfin::MeshIterator *)new dolfin::MeshIterator((dolfin::MeshHierarchy const &)*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MeshIterator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshHierarchy *arg1 = 0 ;
  Index arg2 ;
  dolfin::MeshIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_MeshIterator",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__MeshHierarchy,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MeshIterator" "', argument " "1"" of type '" "dolfin::MeshHierarchy const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MeshIterator" "', argument " "1"" of type '" "dolfin::MeshHierarchy const &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshHierarchy * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Index,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MeshIterator" "', argument " "2"" of type '" "Index""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MeshIterator" "', argument " "2"" of type '" "Index""'");
    } else {
      Index * temp = reinterpret_cast<Index * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (dolfin::MeshIterator *)new dolfin::MeshIterator((dolfin::MeshHierarchy const &)*arg1,arg2);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MeshIterator(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_dolfin__MeshHierarchy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MeshIterator__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_dolfin__MeshHierarchy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Index, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_MeshIterator__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_MeshIterator'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MeshIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MeshIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MeshIterator" "', argument " "1"" of type '" "dolfin::MeshIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshIterator * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MeshIterator_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MeshIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshIterator_end" "', argument " "1"" of type '" "dolfin::MeshIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshIterator * >(argp1);
  result = (bool)(arg1)->end();
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator_index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MeshIterator_index",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MeshIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshIterator_index" "', argument " "1"" of type '" "dolfin::MeshIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshIterator * >(argp1);
  result = (int)(arg1)->index();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
  dolfin::Mesh *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MeshIterator___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MeshIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshIterator___ref__" "', argument " "1"" of type '" "dolfin::MeshIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshIterator * >(argp1);
  {
    dolfin::Mesh &_result_ref = ((dolfin::MeshIterator const *)arg1)->operator *();
    result = (dolfin::Mesh *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
  dolfin::Mesh *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MeshIterator___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MeshIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshIterator___deref__" "', argument " "1"" of type '" "dolfin::MeshIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshIterator * >(argp1);
  result = (dolfin::Mesh *)((dolfin::MeshIterator const *)arg1)->operator ->();
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator_merge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
  dolfin::Mesh *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MeshIterator_merge",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MeshIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshIterator_merge" "', argument " "1"" of type '" "dolfin::MeshIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Mesh,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeshIterator_merge" "', argument " "2"" of type '" "dolfin::Mesh &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshIterator_merge" "', argument " "2"" of type '" "dolfin::Mesh &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Mesh * >(argp2);
  (*arg1)->merge(*arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator_init(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MeshIterator_init",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MeshIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshIterator_init" "', argument " "1"" of type '" "dolfin::MeshIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshIterator * >(argp1);
  (*arg1)->init();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MeshIterator_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MeshIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshIterator_clear" "', argument " "1"" of type '" "dolfin::MeshIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshIterator * >(argp1);
  (*arg1)->clear();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator_numSpaceDim(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MeshIterator_numSpaceDim",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MeshIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshIterator_numSpaceDim" "', argument " "1"" of type '" "dolfin::MeshIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshIterator * >(argp1);
  result = (int)(*arg1)->numSpaceDim();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator_numVertices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MeshIterator_numVertices",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MeshIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshIterator_numVertices" "', argument " "1"" of type '" "dolfin::MeshIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshIterator * >(argp1);
  result = (int)(*arg1)->numVertices();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator_numCells(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MeshIterator_numCells",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MeshIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshIterator_numCells" "', argument " "1"" of type '" "dolfin::MeshIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshIterator * >(argp1);
  result = (int)(*arg1)->numCells();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator_numEdges(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MeshIterator_numEdges",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MeshIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshIterator_numEdges" "', argument " "1"" of type '" "dolfin::MeshIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshIterator * >(argp1);
  result = (int)(*arg1)->numEdges();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator_numFaces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MeshIterator_numFaces",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MeshIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshIterator_numFaces" "', argument " "1"" of type '" "dolfin::MeshIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshIterator * >(argp1);
  result = (int)(*arg1)->numFaces();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator_createVertex__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
  dolfin::Point arg2 ;
  dolfin::Vertex *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MeshIterator_createVertex",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MeshIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshIterator_createVertex" "', argument " "1"" of type '" "dolfin::MeshIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshIterator * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Point,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeshIterator_createVertex" "', argument " "2"" of type '" "dolfin::Point""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshIterator_createVertex" "', argument " "2"" of type '" "dolfin::Point""'");
    } else {
      dolfin::Point * temp = reinterpret_cast<dolfin::Point * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    dolfin::Vertex &_result_ref = (*arg1)->createVertex(arg2);
    result = (dolfin::Vertex *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator_createVertex__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
  dolfin::real arg2 ;
  dolfin::real arg3 ;
  dolfin::real arg4 ;
  dolfin::Vertex *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MeshIterator_createVertex",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MeshIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshIterator_createVertex" "', argument " "1"" of type '" "dolfin::MeshIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshIterator * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MeshIterator_createVertex" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MeshIterator_createVertex" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MeshIterator_createVertex" "', argument " "4"" of type '" "dolfin::real""'");
  } 
  arg4 = static_cast<dolfin::real >(val4);
  {
    dolfin::Vertex &_result_ref = (*arg1)->createVertex(arg2,arg3,arg4);
    result = (dolfin::Vertex *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator_createVertex(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__MeshIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__Point, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MeshIterator_createVertex__SWIG_0(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__MeshIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MeshIterator_createVertex__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'MeshIterator_createVertex'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator_createCell__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  dolfin::Cell *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MeshIterator_createCell",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MeshIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshIterator_createCell" "', argument " "1"" of type '" "dolfin::MeshIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MeshIterator_createCell" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MeshIterator_createCell" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast<int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MeshIterator_createCell" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast<int >(val4);
  {
    dolfin::Cell &_result_ref = (*arg1)->createCell(arg2,arg3,arg4);
    result = (dolfin::Cell *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator_createCell__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  dolfin::Cell *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:MeshIterator_createCell",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MeshIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshIterator_createCell" "', argument " "1"" of type '" "dolfin::MeshIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MeshIterator_createCell" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MeshIterator_createCell" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast<int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MeshIterator_createCell" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast<int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "MeshIterator_createCell" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast<int >(val5);
  {
    dolfin::Cell &_result_ref = (*arg1)->createCell(arg2,arg3,arg4,arg5);
    result = (dolfin::Cell *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator_createCell__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
  dolfin::Vertex *arg2 = 0 ;
  dolfin::Vertex *arg3 = 0 ;
  dolfin::Vertex *arg4 = 0 ;
  dolfin::Cell *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MeshIterator_createCell",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MeshIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshIterator_createCell" "', argument " "1"" of type '" "dolfin::MeshIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vertex,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeshIterator_createCell" "', argument " "2"" of type '" "dolfin::Vertex &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshIterator_createCell" "', argument " "2"" of type '" "dolfin::Vertex &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vertex * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Vertex,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MeshIterator_createCell" "', argument " "3"" of type '" "dolfin::Vertex &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshIterator_createCell" "', argument " "3"" of type '" "dolfin::Vertex &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Vertex * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_dolfin__Vertex,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MeshIterator_createCell" "', argument " "4"" of type '" "dolfin::Vertex &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshIterator_createCell" "', argument " "4"" of type '" "dolfin::Vertex &""'"); 
  }
  arg4 = reinterpret_cast<dolfin::Vertex * >(argp4);
  {
    dolfin::Cell &_result_ref = (*arg1)->createCell(*arg2,*arg3,*arg4);
    result = (dolfin::Cell *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator_createCell__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
  dolfin::Vertex *arg2 = 0 ;
  dolfin::Vertex *arg3 = 0 ;
  dolfin::Vertex *arg4 = 0 ;
  dolfin::Vertex *arg5 = 0 ;
  dolfin::Cell *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:MeshIterator_createCell",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MeshIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshIterator_createCell" "', argument " "1"" of type '" "dolfin::MeshIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vertex,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeshIterator_createCell" "', argument " "2"" of type '" "dolfin::Vertex &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshIterator_createCell" "', argument " "2"" of type '" "dolfin::Vertex &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vertex * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Vertex,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MeshIterator_createCell" "', argument " "3"" of type '" "dolfin::Vertex &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshIterator_createCell" "', argument " "3"" of type '" "dolfin::Vertex &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Vertex * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_dolfin__Vertex,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MeshIterator_createCell" "', argument " "4"" of type '" "dolfin::Vertex &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshIterator_createCell" "', argument " "4"" of type '" "dolfin::Vertex &""'"); 
  }
  arg4 = reinterpret_cast<dolfin::Vertex * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_dolfin__Vertex,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "MeshIterator_createCell" "', argument " "5"" of type '" "dolfin::Vertex &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshIterator_createCell" "', argument " "5"" of type '" "dolfin::Vertex &""'"); 
  }
  arg5 = reinterpret_cast<dolfin::Vertex * >(argp5);
  {
    dolfin::Cell &_result_ref = (*arg1)->createCell(*arg2,*arg3,*arg4,*arg5);
    result = (dolfin::Cell *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator_createCell(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__MeshIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dolfin__Vertex, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_dolfin__Vertex, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_dolfin__Vertex, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MeshIterator_createCell__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__MeshIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MeshIterator_createCell__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__MeshIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dolfin__Vertex, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_dolfin__Vertex, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_dolfin__Vertex, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_dolfin__Vertex, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_MeshIterator_createCell__SWIG_3(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__MeshIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_MeshIterator_createCell__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'MeshIterator_createCell'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator_createEdge__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
  int arg2 ;
  int arg3 ;
  Edge *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MeshIterator_createEdge",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MeshIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshIterator_createEdge" "', argument " "1"" of type '" "dolfin::MeshIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MeshIterator_createEdge" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MeshIterator_createEdge" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast<int >(val3);
  {
    Edge &_result_ref = (*arg1)->createEdge(arg2,arg3);
    result = (Edge *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Edge, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator_createEdge__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
  dolfin::Vertex *arg2 = 0 ;
  dolfin::Vertex *arg3 = 0 ;
  Edge *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MeshIterator_createEdge",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MeshIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshIterator_createEdge" "', argument " "1"" of type '" "dolfin::MeshIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vertex,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeshIterator_createEdge" "', argument " "2"" of type '" "dolfin::Vertex &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshIterator_createEdge" "', argument " "2"" of type '" "dolfin::Vertex &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vertex * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Vertex,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MeshIterator_createEdge" "', argument " "3"" of type '" "dolfin::Vertex &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshIterator_createEdge" "', argument " "3"" of type '" "dolfin::Vertex &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Vertex * >(argp3);
  {
    Edge &_result_ref = (*arg1)->createEdge(*arg2,*arg3);
    result = (Edge *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Edge, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator_createEdge(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__MeshIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dolfin__Vertex, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_dolfin__Vertex, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MeshIterator_createEdge__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__MeshIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MeshIterator_createEdge__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'MeshIterator_createEdge'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator_createFace__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  Face *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MeshIterator_createFace",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MeshIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshIterator_createFace" "', argument " "1"" of type '" "dolfin::MeshIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MeshIterator_createFace" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MeshIterator_createFace" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast<int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MeshIterator_createFace" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast<int >(val4);
  {
    Face &_result_ref = (*arg1)->createFace(arg2,arg3,arg4);
    result = (Face *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Face, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator_createFace__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
  Edge *arg2 = 0 ;
  Edge *arg3 = 0 ;
  Edge *arg4 = 0 ;
  Face *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MeshIterator_createFace",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MeshIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshIterator_createFace" "', argument " "1"" of type '" "dolfin::MeshIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Edge,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeshIterator_createFace" "', argument " "2"" of type '" "Edge &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshIterator_createFace" "', argument " "2"" of type '" "Edge &""'"); 
  }
  arg2 = reinterpret_cast<Edge * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Edge,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MeshIterator_createFace" "', argument " "3"" of type '" "Edge &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshIterator_createFace" "', argument " "3"" of type '" "Edge &""'"); 
  }
  arg3 = reinterpret_cast<Edge * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Edge,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MeshIterator_createFace" "', argument " "4"" of type '" "Edge &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshIterator_createFace" "', argument " "4"" of type '" "Edge &""'"); 
  }
  arg4 = reinterpret_cast<Edge * >(argp4);
  {
    Face &_result_ref = (*arg1)->createFace(*arg2,*arg3,*arg4);
    result = (Face *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Face, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator_createFace(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__MeshIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Edge, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Edge, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Edge, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MeshIterator_createFace__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__MeshIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MeshIterator_createFace__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'MeshIterator_createFace'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator_remove__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
  dolfin::Vertex *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MeshIterator_remove",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MeshIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshIterator_remove" "', argument " "1"" of type '" "dolfin::MeshIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vertex,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeshIterator_remove" "', argument " "2"" of type '" "dolfin::Vertex &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshIterator_remove" "', argument " "2"" of type '" "dolfin::Vertex &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vertex * >(argp2);
  (*arg1)->remove(*arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator_remove__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
  dolfin::Cell *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MeshIterator_remove",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MeshIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshIterator_remove" "', argument " "1"" of type '" "dolfin::MeshIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Cell,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeshIterator_remove" "', argument " "2"" of type '" "dolfin::Cell &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshIterator_remove" "', argument " "2"" of type '" "dolfin::Cell &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Cell * >(argp2);
  (*arg1)->remove(*arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator_remove__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
  Edge *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MeshIterator_remove",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MeshIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshIterator_remove" "', argument " "1"" of type '" "dolfin::MeshIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Edge,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeshIterator_remove" "', argument " "2"" of type '" "Edge &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshIterator_remove" "', argument " "2"" of type '" "Edge &""'"); 
  }
  arg2 = reinterpret_cast<Edge * >(argp2);
  (*arg1)->remove(*arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator_remove__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
  Face *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MeshIterator_remove",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MeshIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshIterator_remove" "', argument " "1"" of type '" "dolfin::MeshIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Face,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeshIterator_remove" "', argument " "2"" of type '" "Face &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshIterator_remove" "', argument " "2"" of type '" "Face &""'"); 
  }
  arg2 = reinterpret_cast<Face * >(argp2);
  (*arg1)->remove(*arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator_remove(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__MeshIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dolfin__Vertex, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MeshIterator_remove__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__MeshIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dolfin__Cell, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MeshIterator_remove__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__MeshIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Edge, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MeshIterator_remove__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__MeshIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Face, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MeshIterator_remove__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'MeshIterator_remove'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
  dolfin::Mesh::Type result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MeshIterator_type",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MeshIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshIterator_type" "', argument " "1"" of type '" "dolfin::MeshIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshIterator * >(argp1);
  result = (dolfin::Mesh::Type)(*arg1)->type();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator_vertex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
  dolfin::uint arg2 ;
  dolfin::Vertex *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MeshIterator_vertex",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MeshIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshIterator_vertex" "', argument " "1"" of type '" "dolfin::MeshIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshIterator * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MeshIterator_vertex" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  {
    dolfin::Vertex &_result_ref = (*arg1)->vertex(arg2);
    result = (dolfin::Vertex *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vertex, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator_cell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
  dolfin::uint arg2 ;
  dolfin::Cell *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MeshIterator_cell",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MeshIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshIterator_cell" "', argument " "1"" of type '" "dolfin::MeshIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshIterator * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MeshIterator_cell" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  {
    dolfin::Cell &_result_ref = (*arg1)->cell(arg2);
    result = (dolfin::Cell *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator_edge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
  dolfin::uint arg2 ;
  Edge *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MeshIterator_edge",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MeshIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshIterator_edge" "', argument " "1"" of type '" "dolfin::MeshIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshIterator * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MeshIterator_edge" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  {
    Edge &_result_ref = (*arg1)->edge(arg2);
    result = (Edge *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Edge, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator_face(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
  dolfin::uint arg2 ;
  Face *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MeshIterator_face",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MeshIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshIterator_face" "', argument " "1"" of type '" "dolfin::MeshIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshIterator * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MeshIterator_face" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  {
    Face &_result_ref = (*arg1)->face(arg2);
    result = (Face *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Face, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator_boundary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
  Boundary result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MeshIterator_boundary",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MeshIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshIterator_boundary" "', argument " "1"" of type '" "dolfin::MeshIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshIterator * >(argp1);
  result = (*arg1)->boundary();
  
  resultobj = SWIG_NewPointerObj((new Boundary(static_cast<const Boundary& >(result))), SWIGTYPE_p_Boundary, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator_refine(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MeshIterator_refine",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MeshIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshIterator_refine" "', argument " "1"" of type '" "dolfin::MeshIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshIterator * >(argp1);
  (*arg1)->refine();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator_refineUniformly__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MeshIterator_refineUniformly",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MeshIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshIterator_refineUniformly" "', argument " "1"" of type '" "dolfin::MeshIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshIterator * >(argp1);
  (*arg1)->refineUniformly();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator_refineUniformly__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MeshIterator_refineUniformly",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MeshIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshIterator_refineUniformly" "', argument " "1"" of type '" "dolfin::MeshIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MeshIterator_refineUniformly" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  (*arg1)->refineUniformly(arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator_refineUniformly(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__MeshIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MeshIterator_refineUniformly__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__MeshIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MeshIterator_refineUniformly__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'MeshIterator_refineUniformly'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator_parent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
  dolfin::Mesh *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MeshIterator_parent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MeshIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshIterator_parent" "', argument " "1"" of type '" "dolfin::MeshIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshIterator * >(argp1);
  {
    dolfin::Mesh &_result_ref = (*arg1)->parent();
    result = (dolfin::Mesh *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator_child(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
  dolfin::Mesh *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MeshIterator_child",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MeshIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshIterator_child" "', argument " "1"" of type '" "dolfin::MeshIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshIterator * >(argp1);
  {
    dolfin::Mesh &_result_ref = (*arg1)->child();
    result = (dolfin::Mesh *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
  dolfin::Mesh *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MeshIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MeshIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshIterator___eq__" "', argument " "1"" of type '" "dolfin::MeshIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Mesh,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeshIterator___eq__" "', argument " "2"" of type '" "dolfin::Mesh const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshIterator___eq__" "', argument " "2"" of type '" "dolfin::Mesh const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Mesh * >(argp2);
  result = (bool)(*arg1)->operator ==((dolfin::Mesh const &)*arg2);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
  dolfin::Mesh *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MeshIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MeshIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshIterator___ne__" "', argument " "1"" of type '" "dolfin::MeshIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Mesh,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeshIterator___ne__" "', argument " "2"" of type '" "dolfin::Mesh const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshIterator___ne__" "', argument " "2"" of type '" "dolfin::Mesh const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Mesh * >(argp2);
  result = (bool)(*arg1)->operator !=((dolfin::Mesh const &)*arg2);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator_disp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MeshIterator_disp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MeshIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshIterator_disp" "', argument " "1"" of type '" "dolfin::MeshIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshIterator * >(argp1);
  (*arg1)->disp();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator_rename(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MeshIterator_rename",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MeshIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshIterator_rename" "', argument " "1"" of type '" "dolfin::MeshIterator *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshIterator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "MeshIterator_rename" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "MeshIterator_rename" "', argument " "3"" of type '" "std::string const""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  (*arg1)->rename(arg2,arg3);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MeshIterator_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MeshIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshIterator_name" "', argument " "1"" of type '" "dolfin::MeshIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshIterator * >(argp1);
  {
    std::string const &_result_ref = (*arg1)->name();
    result = (std::string *) &_result_ref;
  }
  
  resultobj = SWIG_From_std_string(static_cast<std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator_label(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MeshIterator_label",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MeshIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshIterator_label" "', argument " "1"" of type '" "dolfin::MeshIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshIterator * >(argp1);
  {
    std::string const &_result_ref = (*arg1)->label();
    result = (std::string *) &_result_ref;
  }
  
  resultobj = SWIG_From_std_string(static_cast<std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshIterator_number(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MeshIterator_number",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MeshIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshIterator_number" "', argument " "1"" of type '" "dolfin::MeshIterator const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MeshIterator * >(argp1);
  result = (int)(*arg1)->number();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MeshIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__MeshIterator, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_UnitSquare(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::uint arg1 ;
  dolfin::uint arg2 ;
  dolfin::UnitSquare *result = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_UnitSquare",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UnitSquare" "', argument " "1"" of type '" "dolfin::uint""'");
  } 
  arg1 = static_cast<dolfin::uint >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_UnitSquare" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  result = (dolfin::UnitSquare *)new dolfin::UnitSquare(arg1,arg2);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__UnitSquare, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UnitSquare_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__UnitSquare, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_UnitCube(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::uint arg1 ;
  dolfin::uint arg2 ;
  dolfin::uint arg3 ;
  dolfin::UnitCube *result = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_UnitCube",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UnitCube" "', argument " "1"" of type '" "dolfin::uint""'");
  } 
  arg1 = static_cast<dolfin::uint >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_UnitCube" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_UnitCube" "', argument " "3"" of type '" "dolfin::uint""'");
  } 
  arg3 = static_cast<dolfin::uint >(val3);
  result = (dolfin::UnitCube *)new dolfin::UnitCube(arg1,arg2,arg3);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__UnitCube, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UnitCube_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__UnitCube, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Dependencies(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::uint arg1 ;
  dolfin::Dependencies *result = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Dependencies",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Dependencies" "', argument " "1"" of type '" "dolfin::uint""'");
  } 
  arg1 = static_cast<dolfin::uint >(val1);
  result = (dolfin::Dependencies *)new dolfin::Dependencies(arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Dependencies, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Dependencies(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Dependencies *arg1 = (dolfin::Dependencies *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Dependencies",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Dependencies, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Dependencies" "', argument " "1"" of type '" "dolfin::Dependencies *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Dependencies * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dependencies_setsize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Dependencies *arg1 = (dolfin::Dependencies *) 0 ;
  dolfin::uint arg2 ;
  dolfin::uint arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Dependencies_setsize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Dependencies, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dependencies_setsize" "', argument " "1"" of type '" "dolfin::Dependencies *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Dependencies * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Dependencies_setsize" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Dependencies_setsize" "', argument " "3"" of type '" "dolfin::uint""'");
  } 
  arg3 = static_cast<dolfin::uint >(val3);
  (arg1)->setsize(arg2,arg3);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dependencies_set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Dependencies *arg1 = (dolfin::Dependencies *) 0 ;
  dolfin::uint arg2 ;
  dolfin::uint arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Dependencies_set",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Dependencies, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dependencies_set" "', argument " "1"" of type '" "dolfin::Dependencies *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Dependencies * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Dependencies_set" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Dependencies_set" "', argument " "3"" of type '" "dolfin::uint""'");
  } 
  arg3 = static_cast<dolfin::uint >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Dependencies_set" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast<bool >(val4);
  (arg1)->set(arg2,arg3,arg4);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dependencies_set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Dependencies *arg1 = (dolfin::Dependencies *) 0 ;
  dolfin::uint arg2 ;
  dolfin::uint arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Dependencies_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Dependencies, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dependencies_set" "', argument " "1"" of type '" "dolfin::Dependencies *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Dependencies * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Dependencies_set" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Dependencies_set" "', argument " "3"" of type '" "dolfin::uint""'");
  } 
  arg3 = static_cast<dolfin::uint >(val3);
  (arg1)->set(arg2,arg3);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dependencies_set__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Dependencies *arg1 = (dolfin::Dependencies *) 0 ;
  dolfin::Matrix *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Dependencies_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Dependencies, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dependencies_set" "', argument " "1"" of type '" "dolfin::Dependencies *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Dependencies * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Matrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dependencies_set" "', argument " "2"" of type '" "dolfin::Matrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dependencies_set" "', argument " "2"" of type '" "dolfin::Matrix const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Matrix * >(argp2);
  (arg1)->set((dolfin::Matrix const &)*arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dependencies_set(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Dependencies, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__Matrix, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Dependencies_set__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Dependencies, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Dependencies_set__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Dependencies, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Dependencies_set__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Dependencies_set'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dependencies_transp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Dependencies *arg1 = (dolfin::Dependencies *) 0 ;
  dolfin::Dependencies *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Dependencies_transp",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Dependencies, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dependencies_transp" "', argument " "1"" of type '" "dolfin::Dependencies *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Dependencies * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Dependencies,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dependencies_transp" "', argument " "2"" of type '" "dolfin::Dependencies const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dependencies_transp" "', argument " "2"" of type '" "dolfin::Dependencies const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Dependencies * >(argp2);
  (arg1)->transp((dolfin::Dependencies const &)*arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dependencies_detect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Dependencies *arg1 = (dolfin::Dependencies *) 0 ;
  dolfin::ODE *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Dependencies_detect",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Dependencies, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dependencies_detect" "', argument " "1"" of type '" "dolfin::Dependencies *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Dependencies * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__ODE,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dependencies_detect" "', argument " "2"" of type '" "dolfin::ODE &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dependencies_detect" "', argument " "2"" of type '" "dolfin::ODE &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::ODE * >(argp2);
  (arg1)->detect(*arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dependencies_sparse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Dependencies *arg1 = (dolfin::Dependencies *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Dependencies_sparse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Dependencies, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dependencies_sparse" "', argument " "1"" of type '" "dolfin::Dependencies const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Dependencies * >(argp1);
  result = (bool)((dolfin::Dependencies const *)arg1)->sparse();
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dependencies_disp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Dependencies *arg1 = (dolfin::Dependencies *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Dependencies_disp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Dependencies, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dependencies_disp" "', argument " "1"" of type '" "dolfin::Dependencies const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Dependencies * >(argp1);
  ((dolfin::Dependencies const *)arg1)->disp();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Dependencies_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__Dependencies, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_Homotopy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Homotopy *arg1 = (dolfin::Homotopy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Homotopy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Homotopy, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Homotopy" "', argument " "1"" of type '" "dolfin::Homotopy *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Homotopy * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Homotopy_solve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Homotopy *arg1 = (dolfin::Homotopy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Homotopy_solve",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Homotopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Homotopy_solve" "', argument " "1"" of type '" "dolfin::Homotopy *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Homotopy * >(argp1);
  (arg1)->solve();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Homotopy_solutions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Homotopy *arg1 = (dolfin::Homotopy *) 0 ;
  dolfin::Array<dolfin::complex * > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Homotopy_solutions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Homotopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Homotopy_solutions" "', argument " "1"" of type '" "dolfin::Homotopy const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Homotopy * >(argp1);
  {
    dolfin::Array<dolfin::complex * > const &_result_ref = ((dolfin::Homotopy const *)arg1)->solutions();
    result = (dolfin::Array<dolfin::complex * > *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__ArrayTstd__complexTdouble_t_p_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Homotopy_z0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Homotopy *arg1 = (dolfin::Homotopy *) 0 ;
  dolfin::uint arg2 ;
  dolfin::complex result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Homotopy_z0",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Homotopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Homotopy_z0" "', argument " "1"" of type '" "dolfin::Homotopy *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Homotopy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Homotopy_z0" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (arg1)->z0(arg2);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_NewPointerObj((new dolfin::complex(static_cast<const dolfin::complex& >(result))), SWIGTYPE_p_std__complexTdouble_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Homotopy_F(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Homotopy *arg1 = (dolfin::Homotopy *) 0 ;
  dolfin::complex *arg2 ;
  dolfin::complex *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Homotopy_F",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Homotopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Homotopy_F" "', argument " "1"" of type '" "dolfin::Homotopy *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Homotopy * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__complexTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Homotopy_F" "', argument " "2"" of type '" "dolfin::complex const []""'"); 
  } 
  arg2 = reinterpret_cast<dolfin::complex * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_std__complexTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Homotopy_F" "', argument " "3"" of type '" "dolfin::complex []""'"); 
  } 
  arg3 = reinterpret_cast<dolfin::complex * >(argp3);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->F((std::complex<double > const (*))arg2,arg3);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Homotopy_JF(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Homotopy *arg1 = (dolfin::Homotopy *) 0 ;
  dolfin::complex *arg2 ;
  dolfin::complex *arg3 ;
  dolfin::complex *arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Homotopy_JF",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Homotopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Homotopy_JF" "', argument " "1"" of type '" "dolfin::Homotopy *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Homotopy * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__complexTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Homotopy_JF" "', argument " "2"" of type '" "dolfin::complex const []""'"); 
  } 
  arg2 = reinterpret_cast<dolfin::complex * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_std__complexTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Homotopy_JF" "', argument " "3"" of type '" "dolfin::complex const []""'"); 
  } 
  arg3 = reinterpret_cast<dolfin::complex * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_std__complexTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Homotopy_JF" "', argument " "4"" of type '" "dolfin::complex []""'"); 
  } 
  arg4 = reinterpret_cast<dolfin::complex * >(argp4);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->JF((std::complex<double > const (*))arg2,(std::complex<double > const (*))arg3,arg4);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Homotopy_G(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Homotopy *arg1 = (dolfin::Homotopy *) 0 ;
  dolfin::complex *arg2 ;
  dolfin::complex *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Homotopy_G",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Homotopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Homotopy_G" "', argument " "1"" of type '" "dolfin::Homotopy *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Homotopy * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__complexTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Homotopy_G" "', argument " "2"" of type '" "dolfin::complex const []""'"); 
  } 
  arg2 = reinterpret_cast<dolfin::complex * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_std__complexTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Homotopy_G" "', argument " "3"" of type '" "dolfin::complex []""'"); 
  } 
  arg3 = reinterpret_cast<dolfin::complex * >(argp3);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->G((std::complex<double > const (*))arg2,arg3);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Homotopy_JG(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Homotopy *arg1 = (dolfin::Homotopy *) 0 ;
  dolfin::complex *arg2 ;
  dolfin::complex *arg3 ;
  dolfin::complex *arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Homotopy_JG",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Homotopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Homotopy_JG" "', argument " "1"" of type '" "dolfin::Homotopy *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Homotopy * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__complexTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Homotopy_JG" "', argument " "2"" of type '" "dolfin::complex const []""'"); 
  } 
  arg2 = reinterpret_cast<dolfin::complex * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_std__complexTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Homotopy_JG" "', argument " "3"" of type '" "dolfin::complex const []""'"); 
  } 
  arg3 = reinterpret_cast<dolfin::complex * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_std__complexTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Homotopy_JG" "', argument " "4"" of type '" "dolfin::complex []""'"); 
  } 
  arg4 = reinterpret_cast<dolfin::complex * >(argp4);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->JG((std::complex<double > const (*))arg2,(std::complex<double > const (*))arg3,arg4);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Homotopy_modify(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Homotopy *arg1 = (dolfin::Homotopy *) 0 ;
  dolfin::complex *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Homotopy_modify",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Homotopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Homotopy_modify" "', argument " "1"" of type '" "dolfin::Homotopy *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Homotopy * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__complexTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Homotopy_modify" "', argument " "2"" of type '" "dolfin::complex []""'"); 
  } 
  arg2 = reinterpret_cast<dolfin::complex * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->modify(arg2);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Homotopy_verify(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Homotopy *arg1 = (dolfin::Homotopy *) 0 ;
  dolfin::complex *arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Homotopy_verify",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Homotopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Homotopy_verify" "', argument " "1"" of type '" "dolfin::Homotopy *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Homotopy * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__complexTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Homotopy_verify" "', argument " "2"" of type '" "dolfin::complex const []""'"); 
  } 
  arg2 = reinterpret_cast<dolfin::complex * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (bool)(arg1)->verify((std::complex<double > const (*))arg2);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Homotopy_degree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Homotopy *arg1 = (dolfin::Homotopy *) 0 ;
  dolfin::uint arg2 ;
  dolfin::uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Homotopy_degree",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Homotopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Homotopy_degree" "', argument " "1"" of type '" "dolfin::Homotopy const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Homotopy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Homotopy_degree" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::uint)((dolfin::Homotopy const *)arg1)->degree(arg2);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Homotopy_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__Homotopy, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_HomotopyJacobian(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ComplexODE *arg1 = 0 ;
  dolfin::Vector *arg2 = 0 ;
  dolfin::HomotopyJacobian *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_HomotopyJacobian",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__ComplexODE,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HomotopyJacobian" "', argument " "1"" of type '" "dolfin::ComplexODE &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HomotopyJacobian" "', argument " "1"" of type '" "dolfin::ComplexODE &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ComplexODE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_HomotopyJacobian" "', argument " "2"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HomotopyJacobian" "', argument " "2"" of type '" "dolfin::Vector &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  result = (dolfin::HomotopyJacobian *)new dolfin::HomotopyJacobian(*arg1,*arg2);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__HomotopyJacobian, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_HomotopyJacobian(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::HomotopyJacobian *arg1 = (dolfin::HomotopyJacobian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_HomotopyJacobian",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__HomotopyJacobian, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HomotopyJacobian" "', argument " "1"" of type '" "dolfin::HomotopyJacobian *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::HomotopyJacobian * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HomotopyJacobian_mult(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::HomotopyJacobian *arg1 = (dolfin::HomotopyJacobian *) 0 ;
  dolfin::Vector *arg2 = 0 ;
  dolfin::Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:HomotopyJacobian_mult",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__HomotopyJacobian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HomotopyJacobian_mult" "', argument " "1"" of type '" "dolfin::HomotopyJacobian const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::HomotopyJacobian * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HomotopyJacobian_mult" "', argument " "2"" of type '" "dolfin::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HomotopyJacobian_mult" "', argument " "2"" of type '" "dolfin::Vector const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HomotopyJacobian_mult" "', argument " "3"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HomotopyJacobian_mult" "', argument " "3"" of type '" "dolfin::Vector &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Vector * >(argp3);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    ((dolfin::HomotopyJacobian const *)arg1)->mult((dolfin::Vector const &)*arg2,*arg3);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *HomotopyJacobian_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__HomotopyJacobian, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_HomotopyODE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Homotopy *arg1 = 0 ;
  dolfin::uint arg2 ;
  dolfin::real arg3 ;
  dolfin::HomotopyODE *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_HomotopyODE",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Homotopy,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HomotopyODE" "', argument " "1"" of type '" "dolfin::Homotopy &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HomotopyODE" "', argument " "1"" of type '" "dolfin::Homotopy &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Homotopy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_HomotopyODE" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_HomotopyODE" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  result = (dolfin::HomotopyODE *)new dolfin::HomotopyODE(*arg1,arg2,arg3);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__HomotopyODE, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_HomotopyODE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::HomotopyODE *arg1 = (dolfin::HomotopyODE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_HomotopyODE",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__HomotopyODE, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HomotopyODE" "', argument " "1"" of type '" "dolfin::HomotopyODE *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::HomotopyODE * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HomotopyODE_z0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::HomotopyODE *arg1 = (dolfin::HomotopyODE *) 0 ;
  unsigned int arg2 ;
  dolfin::complex result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HomotopyODE_z0",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__HomotopyODE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HomotopyODE_z0" "', argument " "1"" of type '" "dolfin::HomotopyODE *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::HomotopyODE * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HomotopyODE_z0" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast<unsigned int >(val2);
  result = (arg1)->z0(arg2);
  
  resultobj = SWIG_NewPointerObj((new dolfin::complex(static_cast<const dolfin::complex& >(result))), SWIGTYPE_p_std__complexTdouble_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HomotopyODE_f(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::HomotopyODE *arg1 = (dolfin::HomotopyODE *) 0 ;
  dolfin::complex *arg2 ;
  dolfin::real arg3 ;
  dolfin::complex *arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:HomotopyODE_f",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__HomotopyODE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HomotopyODE_f" "', argument " "1"" of type '" "dolfin::HomotopyODE *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::HomotopyODE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__complexTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HomotopyODE_f" "', argument " "2"" of type '" "dolfin::complex const []""'"); 
  } 
  arg2 = reinterpret_cast<dolfin::complex * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HomotopyODE_f" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_std__complexTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "HomotopyODE_f" "', argument " "4"" of type '" "dolfin::complex []""'"); 
  } 
  arg4 = reinterpret_cast<dolfin::complex * >(argp4);
  (arg1)->f((std::complex<double > const (*))arg2,arg3,arg4);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HomotopyODE_M(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::HomotopyODE *arg1 = (dolfin::HomotopyODE *) 0 ;
  dolfin::complex *arg2 ;
  dolfin::complex *arg3 ;
  dolfin::complex *arg4 ;
  dolfin::real arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:HomotopyODE_M",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__HomotopyODE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HomotopyODE_M" "', argument " "1"" of type '" "dolfin::HomotopyODE *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::HomotopyODE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__complexTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HomotopyODE_M" "', argument " "2"" of type '" "dolfin::complex const []""'"); 
  } 
  arg2 = reinterpret_cast<dolfin::complex * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_std__complexTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HomotopyODE_M" "', argument " "3"" of type '" "dolfin::complex []""'"); 
  } 
  arg3 = reinterpret_cast<dolfin::complex * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_std__complexTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "HomotopyODE_M" "', argument " "4"" of type '" "dolfin::complex const []""'"); 
  } 
  arg4 = reinterpret_cast<dolfin::complex * >(argp4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "HomotopyODE_M" "', argument " "5"" of type '" "dolfin::real""'");
  } 
  arg5 = static_cast<dolfin::real >(val5);
  (arg1)->M((std::complex<double > const (*))arg2,arg3,(std::complex<double > const (*))arg4,arg5);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HomotopyODE_J(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::HomotopyODE *arg1 = (dolfin::HomotopyODE *) 0 ;
  dolfin::complex *arg2 ;
  dolfin::complex *arg3 ;
  dolfin::complex *arg4 ;
  dolfin::real arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:HomotopyODE_J",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__HomotopyODE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HomotopyODE_J" "', argument " "1"" of type '" "dolfin::HomotopyODE *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::HomotopyODE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__complexTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HomotopyODE_J" "', argument " "2"" of type '" "dolfin::complex const []""'"); 
  } 
  arg2 = reinterpret_cast<dolfin::complex * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_std__complexTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HomotopyODE_J" "', argument " "3"" of type '" "dolfin::complex []""'"); 
  } 
  arg3 = reinterpret_cast<dolfin::complex * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_std__complexTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "HomotopyODE_J" "', argument " "4"" of type '" "dolfin::complex const []""'"); 
  } 
  arg4 = reinterpret_cast<dolfin::complex * >(argp4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "HomotopyODE_J" "', argument " "5"" of type '" "dolfin::real""'");
  } 
  arg5 = static_cast<dolfin::real >(val5);
  (arg1)->J((std::complex<double > const (*))arg2,arg3,(std::complex<double > const (*))arg4,arg5);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HomotopyODE_update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::HomotopyODE *arg1 = (dolfin::HomotopyODE *) 0 ;
  dolfin::complex *arg2 ;
  dolfin::real arg3 ;
  bool arg4 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:HomotopyODE_update",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__HomotopyODE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HomotopyODE_update" "', argument " "1"" of type '" "dolfin::HomotopyODE *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::HomotopyODE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__complexTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HomotopyODE_update" "', argument " "2"" of type '" "dolfin::complex const []""'"); 
  } 
  arg2 = reinterpret_cast<dolfin::complex * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HomotopyODE_update" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "HomotopyODE_update" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast<bool >(val4);
  result = (bool)(arg1)->update((std::complex<double > const (*))arg2,arg3,arg4);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HomotopyODE_state(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::HomotopyODE *arg1 = (dolfin::HomotopyODE *) 0 ;
  dolfin::HomotopyODE::State result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HomotopyODE_state",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__HomotopyODE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HomotopyODE_state" "', argument " "1"" of type '" "dolfin::HomotopyODE *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::HomotopyODE * >(argp1);
  result = (dolfin::HomotopyODE::State)(arg1)->state();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *HomotopyODE_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__HomotopyODE, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_Method(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Method *arg1 = (dolfin::Method *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Method",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Method, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Method" "', argument " "1"" of type '" "dolfin::Method *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Method * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Method_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Method *arg1 = (dolfin::Method *) 0 ;
  dolfin::Method::Type result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Method_type",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Method, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Method_type" "', argument " "1"" of type '" "dolfin::Method const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Method * >(argp1);
  result = (dolfin::Method::Type)((dolfin::Method const *)arg1)->type();
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Method_degree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Method *arg1 = (dolfin::Method *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Method_degree",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Method, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Method_degree" "', argument " "1"" of type '" "dolfin::Method const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Method * >(argp1);
  result = (unsigned int)((dolfin::Method const *)arg1)->degree();
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Method_order(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Method *arg1 = (dolfin::Method *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Method_order",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Method, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Method_order" "', argument " "1"" of type '" "dolfin::Method const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Method * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (unsigned int)((dolfin::Method const *)arg1)->order();
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Method_nsize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Method *arg1 = (dolfin::Method *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Method_nsize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Method, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Method_nsize" "', argument " "1"" of type '" "dolfin::Method const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Method * >(argp1);
  result = (unsigned int)((dolfin::Method const *)arg1)->nsize();
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Method_qsize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Method *arg1 = (dolfin::Method *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Method_qsize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Method, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Method_qsize" "', argument " "1"" of type '" "dolfin::Method const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Method * >(argp1);
  result = (unsigned int)((dolfin::Method const *)arg1)->qsize();
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Method_npoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Method *arg1 = (dolfin::Method *) 0 ;
  unsigned int arg2 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Method_npoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Method, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Method_npoint" "', argument " "1"" of type '" "dolfin::Method const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Method * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Method_npoint" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast<unsigned int >(val2);
  result = (dolfin::real)((dolfin::Method const *)arg1)->npoint(arg2);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Method_qpoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Method *arg1 = (dolfin::Method *) 0 ;
  unsigned int arg2 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Method_qpoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Method, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Method_qpoint" "', argument " "1"" of type '" "dolfin::Method const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Method * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Method_qpoint" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast<unsigned int >(val2);
  result = (dolfin::real)((dolfin::Method const *)arg1)->qpoint(arg2);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Method_nweight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Method *arg1 = (dolfin::Method *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Method_nweight",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Method, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Method_nweight" "', argument " "1"" of type '" "dolfin::Method const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Method * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Method_nweight" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast<unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Method_nweight" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast<unsigned int >(val3);
  result = (dolfin::real)((dolfin::Method const *)arg1)->nweight(arg2,arg3);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Method_qweight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Method *arg1 = (dolfin::Method *) 0 ;
  unsigned int arg2 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Method_qweight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Method, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Method_qweight" "', argument " "1"" of type '" "dolfin::Method const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Method * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Method_qweight" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast<unsigned int >(val2);
  result = (dolfin::real)((dolfin::Method const *)arg1)->qweight(arg2);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Method_eval(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Method *arg1 = (dolfin::Method *) 0 ;
  unsigned int arg2 ;
  dolfin::real arg3 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Method_eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Method, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Method_eval" "', argument " "1"" of type '" "dolfin::Method const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Method * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Method_eval" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast<unsigned int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Method_eval" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  result = (dolfin::real)((dolfin::Method const *)arg1)->eval(arg2,arg3);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Method_derivative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Method *arg1 = (dolfin::Method *) 0 ;
  unsigned int arg2 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Method_derivative",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Method, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Method_derivative" "', argument " "1"" of type '" "dolfin::Method const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Method * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Method_derivative" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast<unsigned int >(val2);
  result = (dolfin::real)((dolfin::Method const *)arg1)->derivative(arg2);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Method_update__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Method *arg1 = (dolfin::Method *) 0 ;
  dolfin::real arg2 ;
  dolfin::real *arg3 ;
  dolfin::real arg4 ;
  dolfin::real *arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Method_update",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Method, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Method_update" "', argument " "1"" of type '" "dolfin::Method const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Method * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Method_update" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Method_update" "', argument " "3"" of type '" "dolfin::real []""'"); 
  } 
  arg3 = reinterpret_cast<dolfin::real * >(argp3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Method_update" "', argument " "4"" of type '" "dolfin::real""'");
  } 
  arg4 = static_cast<dolfin::real >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Method_update" "', argument " "5"" of type '" "dolfin::real []""'"); 
  } 
  arg5 = reinterpret_cast<dolfin::real * >(argp5);
  ((dolfin::Method const *)arg1)->update(arg2,arg3,arg4,arg5);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Method_update__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Method *arg1 = (dolfin::Method *) 0 ;
  dolfin::real arg2 ;
  dolfin::real *arg3 ;
  dolfin::real arg4 ;
  dolfin::real *arg5 ;
  dolfin::real arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Method_update",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Method, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Method_update" "', argument " "1"" of type '" "dolfin::Method const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Method * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Method_update" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Method_update" "', argument " "3"" of type '" "dolfin::real []""'"); 
  } 
  arg3 = reinterpret_cast<dolfin::real * >(argp3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Method_update" "', argument " "4"" of type '" "dolfin::real""'");
  } 
  arg4 = static_cast<dolfin::real >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Method_update" "', argument " "5"" of type '" "dolfin::real []""'"); 
  } 
  arg5 = reinterpret_cast<dolfin::real * >(argp5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Method_update" "', argument " "6"" of type '" "dolfin::real""'");
  } 
  arg6 = static_cast<dolfin::real >(val6);
  ((dolfin::Method const *)arg1)->update(arg2,arg3,arg4,arg5,arg6);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Method_update(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 6); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Method, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_Method_update__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Method, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_Method_update__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Method_update'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Method_ueval__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Method *arg1 = (dolfin::Method *) 0 ;
  dolfin::real arg2 ;
  dolfin::real *arg3 ;
  dolfin::real arg4 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Method_ueval",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Method, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Method_ueval" "', argument " "1"" of type '" "dolfin::Method const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Method * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Method_ueval" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Method_ueval" "', argument " "3"" of type '" "dolfin::real []""'"); 
  } 
  arg3 = reinterpret_cast<dolfin::real * >(argp3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Method_ueval" "', argument " "4"" of type '" "dolfin::real""'");
  } 
  arg4 = static_cast<dolfin::real >(val4);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::real)((dolfin::Method const *)arg1)->ueval(arg2,arg3,arg4);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Method_ueval__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Method *arg1 = (dolfin::Method *) 0 ;
  dolfin::real arg2 ;
  dolfin::real *arg3 ;
  dolfin::uint arg4 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Method_ueval",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Method, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Method_ueval" "', argument " "1"" of type '" "dolfin::Method const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Method * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Method_ueval" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Method_ueval" "', argument " "3"" of type '" "dolfin::real []""'"); 
  } 
  arg3 = reinterpret_cast<dolfin::real * >(argp3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Method_ueval" "', argument " "4"" of type '" "dolfin::uint""'");
  } 
  arg4 = static_cast<dolfin::uint >(val4);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::real)((dolfin::Method const *)arg1)->ueval(arg2,arg3,arg4);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Method_ueval(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Method, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Method_ueval__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Method, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Method_ueval__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Method_ueval'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Method_residual(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Method *arg1 = (dolfin::Method *) 0 ;
  dolfin::real arg2 ;
  dolfin::real *arg3 ;
  dolfin::real arg4 ;
  dolfin::real arg5 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Method_residual",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Method, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Method_residual" "', argument " "1"" of type '" "dolfin::Method const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Method * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Method_residual" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Method_residual" "', argument " "3"" of type '" "dolfin::real []""'"); 
  } 
  arg3 = reinterpret_cast<dolfin::real * >(argp3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Method_residual" "', argument " "4"" of type '" "dolfin::real""'");
  } 
  arg4 = static_cast<dolfin::real >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Method_residual" "', argument " "5"" of type '" "dolfin::real""'");
  } 
  arg5 = static_cast<dolfin::real >(val5);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::real)((dolfin::Method const *)arg1)->residual(arg2,arg3,arg4,arg5);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Method_timestep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Method *arg1 = (dolfin::Method *) 0 ;
  dolfin::real arg2 ;
  dolfin::real arg3 ;
  dolfin::real arg4 ;
  dolfin::real arg5 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Method_timestep",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Method, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Method_timestep" "', argument " "1"" of type '" "dolfin::Method const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Method * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Method_timestep" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Method_timestep" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Method_timestep" "', argument " "4"" of type '" "dolfin::real""'");
  } 
  arg4 = static_cast<dolfin::real >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Method_timestep" "', argument " "5"" of type '" "dolfin::real""'");
  } 
  arg5 = static_cast<dolfin::real >(val5);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::real)((dolfin::Method const *)arg1)->timestep(arg2,arg3,arg4,arg5);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Method_error(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Method *arg1 = (dolfin::Method *) 0 ;
  dolfin::real arg2 ;
  dolfin::real arg3 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Method_error",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Method, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Method_error" "', argument " "1"" of type '" "dolfin::Method const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Method * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Method_error" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Method_error" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::real)((dolfin::Method const *)arg1)->error(arg2,arg3);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Method_disp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Method *arg1 = (dolfin::Method *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Method_disp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Method, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Method_disp" "', argument " "1"" of type '" "dolfin::Method const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Method * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    ((dolfin::Method const *)arg1)->disp();
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Method_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__Method, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MonoAdaptiveFixedPointSolver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MonoAdaptiveTimeSlab *arg1 = 0 ;
  dolfin::MonoAdaptiveFixedPointSolver *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MonoAdaptiveFixedPointSolver",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__MonoAdaptiveTimeSlab,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MonoAdaptiveFixedPointSolver" "', argument " "1"" of type '" "dolfin::MonoAdaptiveTimeSlab &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MonoAdaptiveFixedPointSolver" "', argument " "1"" of type '" "dolfin::MonoAdaptiveTimeSlab &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MonoAdaptiveTimeSlab * >(argp1);
  result = (dolfin::MonoAdaptiveFixedPointSolver *)new dolfin::MonoAdaptiveFixedPointSolver(*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__MonoAdaptiveFixedPointSolver, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MonoAdaptiveFixedPointSolver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MonoAdaptiveFixedPointSolver *arg1 = (dolfin::MonoAdaptiveFixedPointSolver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MonoAdaptiveFixedPointSolver",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MonoAdaptiveFixedPointSolver, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MonoAdaptiveFixedPointSolver" "', argument " "1"" of type '" "dolfin::MonoAdaptiveFixedPointSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MonoAdaptiveFixedPointSolver * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MonoAdaptiveFixedPointSolver_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__MonoAdaptiveFixedPointSolver, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MonoAdaptiveJacobian(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MonoAdaptiveTimeSlab *arg1 = 0 ;
  bool arg2 ;
  bool arg3 ;
  dolfin::MonoAdaptiveJacobian *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_MonoAdaptiveJacobian",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__MonoAdaptiveTimeSlab,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MonoAdaptiveJacobian" "', argument " "1"" of type '" "dolfin::MonoAdaptiveTimeSlab &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MonoAdaptiveJacobian" "', argument " "1"" of type '" "dolfin::MonoAdaptiveTimeSlab &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MonoAdaptiveTimeSlab * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MonoAdaptiveJacobian" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast<bool >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_MonoAdaptiveJacobian" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast<bool >(val3);
  result = (dolfin::MonoAdaptiveJacobian *)new dolfin::MonoAdaptiveJacobian(*arg1,arg2,arg3);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__MonoAdaptiveJacobian, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MonoAdaptiveJacobian(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MonoAdaptiveJacobian *arg1 = (dolfin::MonoAdaptiveJacobian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MonoAdaptiveJacobian",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MonoAdaptiveJacobian, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MonoAdaptiveJacobian" "', argument " "1"" of type '" "dolfin::MonoAdaptiveJacobian *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MonoAdaptiveJacobian * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonoAdaptiveJacobian_mult(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MonoAdaptiveJacobian *arg1 = (dolfin::MonoAdaptiveJacobian *) 0 ;
  dolfin::Vector *arg2 = 0 ;
  dolfin::Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MonoAdaptiveJacobian_mult",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MonoAdaptiveJacobian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonoAdaptiveJacobian_mult" "', argument " "1"" of type '" "dolfin::MonoAdaptiveJacobian const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MonoAdaptiveJacobian * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MonoAdaptiveJacobian_mult" "', argument " "2"" of type '" "dolfin::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MonoAdaptiveJacobian_mult" "', argument " "2"" of type '" "dolfin::Vector const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MonoAdaptiveJacobian_mult" "', argument " "3"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MonoAdaptiveJacobian_mult" "', argument " "3"" of type '" "dolfin::Vector &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Vector * >(argp3);
  ((dolfin::MonoAdaptiveJacobian const *)arg1)->mult((dolfin::Vector const &)*arg2,*arg3);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MonoAdaptiveJacobian_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__MonoAdaptiveJacobian, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MonoAdaptiveNewtonSolver__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MonoAdaptiveTimeSlab *arg1 = 0 ;
  bool arg2 ;
  dolfin::MonoAdaptiveNewtonSolver *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_MonoAdaptiveNewtonSolver",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__MonoAdaptiveTimeSlab,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MonoAdaptiveNewtonSolver" "', argument " "1"" of type '" "dolfin::MonoAdaptiveTimeSlab &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MonoAdaptiveNewtonSolver" "', argument " "1"" of type '" "dolfin::MonoAdaptiveTimeSlab &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MonoAdaptiveTimeSlab * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MonoAdaptiveNewtonSolver" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast<bool >(val2);
  result = (dolfin::MonoAdaptiveNewtonSolver *)new dolfin::MonoAdaptiveNewtonSolver(*arg1,arg2);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__MonoAdaptiveNewtonSolver, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MonoAdaptiveNewtonSolver__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MonoAdaptiveTimeSlab *arg1 = 0 ;
  dolfin::MonoAdaptiveNewtonSolver *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MonoAdaptiveNewtonSolver",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__MonoAdaptiveTimeSlab,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MonoAdaptiveNewtonSolver" "', argument " "1"" of type '" "dolfin::MonoAdaptiveTimeSlab &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MonoAdaptiveNewtonSolver" "', argument " "1"" of type '" "dolfin::MonoAdaptiveTimeSlab &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MonoAdaptiveTimeSlab * >(argp1);
  result = (dolfin::MonoAdaptiveNewtonSolver *)new dolfin::MonoAdaptiveNewtonSolver(*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__MonoAdaptiveNewtonSolver, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MonoAdaptiveNewtonSolver(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__MonoAdaptiveTimeSlab, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MonoAdaptiveNewtonSolver__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__MonoAdaptiveTimeSlab, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_MonoAdaptiveNewtonSolver__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_MonoAdaptiveNewtonSolver'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MonoAdaptiveNewtonSolver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MonoAdaptiveNewtonSolver *arg1 = (dolfin::MonoAdaptiveNewtonSolver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MonoAdaptiveNewtonSolver",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MonoAdaptiveNewtonSolver, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MonoAdaptiveNewtonSolver" "', argument " "1"" of type '" "dolfin::MonoAdaptiveNewtonSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MonoAdaptiveNewtonSolver * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MonoAdaptiveNewtonSolver_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__MonoAdaptiveNewtonSolver, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MonoAdaptiveTimeSlab(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ODE *arg1 = 0 ;
  dolfin::MonoAdaptiveTimeSlab *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MonoAdaptiveTimeSlab",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__ODE,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MonoAdaptiveTimeSlab" "', argument " "1"" of type '" "dolfin::ODE &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MonoAdaptiveTimeSlab" "', argument " "1"" of type '" "dolfin::ODE &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ODE * >(argp1);
  result = (dolfin::MonoAdaptiveTimeSlab *)new dolfin::MonoAdaptiveTimeSlab(*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__MonoAdaptiveTimeSlab, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MonoAdaptiveTimeSlab(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MonoAdaptiveTimeSlab *arg1 = (dolfin::MonoAdaptiveTimeSlab *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MonoAdaptiveTimeSlab",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MonoAdaptiveTimeSlab, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MonoAdaptiveTimeSlab" "', argument " "1"" of type '" "dolfin::MonoAdaptiveTimeSlab *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MonoAdaptiveTimeSlab * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonoAdaptiveTimeSlab_build(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MonoAdaptiveTimeSlab *arg1 = (dolfin::MonoAdaptiveTimeSlab *) 0 ;
  dolfin::real arg2 ;
  dolfin::real arg3 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MonoAdaptiveTimeSlab_build",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MonoAdaptiveTimeSlab, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonoAdaptiveTimeSlab_build" "', argument " "1"" of type '" "dolfin::MonoAdaptiveTimeSlab *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MonoAdaptiveTimeSlab * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MonoAdaptiveTimeSlab_build" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MonoAdaptiveTimeSlab_build" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  result = (dolfin::real)(arg1)->build(arg2,arg3);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonoAdaptiveTimeSlab_solve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MonoAdaptiveTimeSlab *arg1 = (dolfin::MonoAdaptiveTimeSlab *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MonoAdaptiveTimeSlab_solve",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MonoAdaptiveTimeSlab, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonoAdaptiveTimeSlab_solve" "', argument " "1"" of type '" "dolfin::MonoAdaptiveTimeSlab *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MonoAdaptiveTimeSlab * >(argp1);
  result = (bool)(arg1)->solve();
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonoAdaptiveTimeSlab_check(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MonoAdaptiveTimeSlab *arg1 = (dolfin::MonoAdaptiveTimeSlab *) 0 ;
  bool arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MonoAdaptiveTimeSlab_check",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MonoAdaptiveTimeSlab, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonoAdaptiveTimeSlab_check" "', argument " "1"" of type '" "dolfin::MonoAdaptiveTimeSlab *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MonoAdaptiveTimeSlab * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MonoAdaptiveTimeSlab_check" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast<bool >(val2);
  result = (bool)(arg1)->check(arg2);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonoAdaptiveTimeSlab_shift(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MonoAdaptiveTimeSlab *arg1 = (dolfin::MonoAdaptiveTimeSlab *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MonoAdaptiveTimeSlab_shift",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MonoAdaptiveTimeSlab, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonoAdaptiveTimeSlab_shift" "', argument " "1"" of type '" "dolfin::MonoAdaptiveTimeSlab *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MonoAdaptiveTimeSlab * >(argp1);
  result = (bool)(arg1)->shift();
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonoAdaptiveTimeSlab_sample(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MonoAdaptiveTimeSlab *arg1 = (dolfin::MonoAdaptiveTimeSlab *) 0 ;
  dolfin::real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MonoAdaptiveTimeSlab_sample",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MonoAdaptiveTimeSlab, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonoAdaptiveTimeSlab_sample" "', argument " "1"" of type '" "dolfin::MonoAdaptiveTimeSlab *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MonoAdaptiveTimeSlab * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MonoAdaptiveTimeSlab_sample" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  (arg1)->sample(arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonoAdaptiveTimeSlab_usample(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MonoAdaptiveTimeSlab *arg1 = (dolfin::MonoAdaptiveTimeSlab *) 0 ;
  dolfin::uint arg2 ;
  dolfin::real arg3 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MonoAdaptiveTimeSlab_usample",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MonoAdaptiveTimeSlab, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonoAdaptiveTimeSlab_usample" "', argument " "1"" of type '" "dolfin::MonoAdaptiveTimeSlab *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MonoAdaptiveTimeSlab * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MonoAdaptiveTimeSlab_usample" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MonoAdaptiveTimeSlab_usample" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  result = (dolfin::real)(arg1)->usample(arg2,arg3);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonoAdaptiveTimeSlab_ksample(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MonoAdaptiveTimeSlab *arg1 = (dolfin::MonoAdaptiveTimeSlab *) 0 ;
  dolfin::uint arg2 ;
  dolfin::real arg3 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MonoAdaptiveTimeSlab_ksample",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MonoAdaptiveTimeSlab, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonoAdaptiveTimeSlab_ksample" "', argument " "1"" of type '" "dolfin::MonoAdaptiveTimeSlab *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MonoAdaptiveTimeSlab * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MonoAdaptiveTimeSlab_ksample" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MonoAdaptiveTimeSlab_ksample" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  result = (dolfin::real)(arg1)->ksample(arg2,arg3);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonoAdaptiveTimeSlab_rsample(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MonoAdaptiveTimeSlab *arg1 = (dolfin::MonoAdaptiveTimeSlab *) 0 ;
  dolfin::uint arg2 ;
  dolfin::real arg3 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MonoAdaptiveTimeSlab_rsample",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MonoAdaptiveTimeSlab, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonoAdaptiveTimeSlab_rsample" "', argument " "1"" of type '" "dolfin::MonoAdaptiveTimeSlab *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MonoAdaptiveTimeSlab * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MonoAdaptiveTimeSlab_rsample" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MonoAdaptiveTimeSlab_rsample" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  result = (dolfin::real)(arg1)->rsample(arg2,arg3);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonoAdaptiveTimeSlab_disp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MonoAdaptiveTimeSlab *arg1 = (dolfin::MonoAdaptiveTimeSlab *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MonoAdaptiveTimeSlab_disp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MonoAdaptiveTimeSlab, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonoAdaptiveTimeSlab_disp" "', argument " "1"" of type '" "dolfin::MonoAdaptiveTimeSlab const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MonoAdaptiveTimeSlab * >(argp1);
  ((dolfin::MonoAdaptiveTimeSlab const *)arg1)->disp();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MonoAdaptiveTimeSlab_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__MonoAdaptiveTimeSlab, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MonoAdaptivity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ODE *arg1 = 0 ;
  dolfin::Method *arg2 = 0 ;
  dolfin::MonoAdaptivity *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_MonoAdaptivity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__ODE,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MonoAdaptivity" "', argument " "1"" of type '" "dolfin::ODE const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MonoAdaptivity" "', argument " "1"" of type '" "dolfin::ODE const &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ODE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Method,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MonoAdaptivity" "', argument " "2"" of type '" "dolfin::Method const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MonoAdaptivity" "', argument " "2"" of type '" "dolfin::Method const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Method * >(argp2);
  result = (dolfin::MonoAdaptivity *)new dolfin::MonoAdaptivity((dolfin::ODE const &)*arg1,(dolfin::Method const &)*arg2);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__MonoAdaptivity, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MonoAdaptivity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MonoAdaptivity *arg1 = (dolfin::MonoAdaptivity *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MonoAdaptivity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MonoAdaptivity, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MonoAdaptivity" "', argument " "1"" of type '" "dolfin::MonoAdaptivity *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MonoAdaptivity * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonoAdaptivity_timestep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MonoAdaptivity *arg1 = (dolfin::MonoAdaptivity *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MonoAdaptivity_timestep",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MonoAdaptivity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonoAdaptivity_timestep" "', argument " "1"" of type '" "dolfin::MonoAdaptivity const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MonoAdaptivity * >(argp1);
  result = (dolfin::real)((dolfin::MonoAdaptivity const *)arg1)->timestep();
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MonoAdaptivity_update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MonoAdaptivity *arg1 = (dolfin::MonoAdaptivity *) 0 ;
  dolfin::real arg2 ;
  dolfin::real arg3 ;
  dolfin::Method *arg4 = 0 ;
  dolfin::real arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:MonoAdaptivity_update",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MonoAdaptivity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MonoAdaptivity_update" "', argument " "1"" of type '" "dolfin::MonoAdaptivity *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MonoAdaptivity * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MonoAdaptivity_update" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MonoAdaptivity_update" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_dolfin__Method,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MonoAdaptivity_update" "', argument " "4"" of type '" "dolfin::Method const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MonoAdaptivity_update" "', argument " "4"" of type '" "dolfin::Method const &""'"); 
  }
  arg4 = reinterpret_cast<dolfin::Method * >(argp4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "MonoAdaptivity_update" "', argument " "5"" of type '" "dolfin::real""'");
  } 
  arg5 = static_cast<dolfin::real >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "MonoAdaptivity_update" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast<bool >(val6);
  (arg1)->update(arg2,arg3,(dolfin::Method const &)*arg4,arg5,arg6);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MonoAdaptivity_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__MonoAdaptivity, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MultiAdaptiveFixedPointSolver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MultiAdaptiveTimeSlab *arg1 = 0 ;
  dolfin::MultiAdaptiveFixedPointSolver *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MultiAdaptiveFixedPointSolver",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__MultiAdaptiveTimeSlab,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MultiAdaptiveFixedPointSolver" "', argument " "1"" of type '" "dolfin::MultiAdaptiveTimeSlab &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MultiAdaptiveFixedPointSolver" "', argument " "1"" of type '" "dolfin::MultiAdaptiveTimeSlab &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MultiAdaptiveTimeSlab * >(argp1);
  result = (dolfin::MultiAdaptiveFixedPointSolver *)new dolfin::MultiAdaptiveFixedPointSolver(*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__MultiAdaptiveFixedPointSolver, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MultiAdaptiveFixedPointSolver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MultiAdaptiveFixedPointSolver *arg1 = (dolfin::MultiAdaptiveFixedPointSolver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MultiAdaptiveFixedPointSolver",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MultiAdaptiveFixedPointSolver, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MultiAdaptiveFixedPointSolver" "', argument " "1"" of type '" "dolfin::MultiAdaptiveFixedPointSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MultiAdaptiveFixedPointSolver * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MultiAdaptiveFixedPointSolver_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__MultiAdaptiveFixedPointSolver, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MultiAdaptivePreconditioner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MultiAdaptiveTimeSlab *arg1 = 0 ;
  dolfin::Method *arg2 = 0 ;
  dolfin::MultiAdaptivePreconditioner *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_MultiAdaptivePreconditioner",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__MultiAdaptiveTimeSlab,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MultiAdaptivePreconditioner" "', argument " "1"" of type '" "dolfin::MultiAdaptiveTimeSlab &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MultiAdaptivePreconditioner" "', argument " "1"" of type '" "dolfin::MultiAdaptiveTimeSlab &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MultiAdaptiveTimeSlab * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Method,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MultiAdaptivePreconditioner" "', argument " "2"" of type '" "dolfin::Method const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MultiAdaptivePreconditioner" "', argument " "2"" of type '" "dolfin::Method const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Method * >(argp2);
  result = (dolfin::MultiAdaptivePreconditioner *)new dolfin::MultiAdaptivePreconditioner(*arg1,(dolfin::Method const &)*arg2);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__MultiAdaptivePreconditioner, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MultiAdaptivePreconditioner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MultiAdaptivePreconditioner *arg1 = (dolfin::MultiAdaptivePreconditioner *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MultiAdaptivePreconditioner",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MultiAdaptivePreconditioner, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MultiAdaptivePreconditioner" "', argument " "1"" of type '" "dolfin::MultiAdaptivePreconditioner *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MultiAdaptivePreconditioner * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiAdaptivePreconditioner_solve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MultiAdaptivePreconditioner *arg1 = (dolfin::MultiAdaptivePreconditioner *) 0 ;
  dolfin::Vector *arg2 = 0 ;
  dolfin::Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MultiAdaptivePreconditioner_solve",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MultiAdaptivePreconditioner, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiAdaptivePreconditioner_solve" "', argument " "1"" of type '" "dolfin::MultiAdaptivePreconditioner *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MultiAdaptivePreconditioner * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MultiAdaptivePreconditioner_solve" "', argument " "2"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultiAdaptivePreconditioner_solve" "', argument " "2"" of type '" "dolfin::Vector &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Vector,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MultiAdaptivePreconditioner_solve" "', argument " "3"" of type '" "dolfin::Vector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultiAdaptivePreconditioner_solve" "', argument " "3"" of type '" "dolfin::Vector const &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Vector * >(argp3);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->solve(*arg2,(dolfin::Vector const &)*arg3);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MultiAdaptivePreconditioner_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__MultiAdaptivePreconditioner, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MultiAdaptiveNewtonSolver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MultiAdaptiveTimeSlab *arg1 = 0 ;
  dolfin::MultiAdaptiveNewtonSolver *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MultiAdaptiveNewtonSolver",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__MultiAdaptiveTimeSlab,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MultiAdaptiveNewtonSolver" "', argument " "1"" of type '" "dolfin::MultiAdaptiveTimeSlab &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MultiAdaptiveNewtonSolver" "', argument " "1"" of type '" "dolfin::MultiAdaptiveTimeSlab &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MultiAdaptiveTimeSlab * >(argp1);
  result = (dolfin::MultiAdaptiveNewtonSolver *)new dolfin::MultiAdaptiveNewtonSolver(*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__MultiAdaptiveNewtonSolver, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MultiAdaptiveNewtonSolver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MultiAdaptiveNewtonSolver *arg1 = (dolfin::MultiAdaptiveNewtonSolver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MultiAdaptiveNewtonSolver",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MultiAdaptiveNewtonSolver, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MultiAdaptiveNewtonSolver" "', argument " "1"" of type '" "dolfin::MultiAdaptiveNewtonSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MultiAdaptiveNewtonSolver * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MultiAdaptiveNewtonSolver_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__MultiAdaptiveNewtonSolver, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MultiAdaptiveTimeSlab(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ODE *arg1 = 0 ;
  dolfin::MultiAdaptiveTimeSlab *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MultiAdaptiveTimeSlab",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__ODE,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MultiAdaptiveTimeSlab" "', argument " "1"" of type '" "dolfin::ODE &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MultiAdaptiveTimeSlab" "', argument " "1"" of type '" "dolfin::ODE &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ODE * >(argp1);
  result = (dolfin::MultiAdaptiveTimeSlab *)new dolfin::MultiAdaptiveTimeSlab(*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__MultiAdaptiveTimeSlab, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MultiAdaptiveTimeSlab(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MultiAdaptiveTimeSlab *arg1 = (dolfin::MultiAdaptiveTimeSlab *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MultiAdaptiveTimeSlab",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MultiAdaptiveTimeSlab, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MultiAdaptiveTimeSlab" "', argument " "1"" of type '" "dolfin::MultiAdaptiveTimeSlab *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MultiAdaptiveTimeSlab * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiAdaptiveTimeSlab_build(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MultiAdaptiveTimeSlab *arg1 = (dolfin::MultiAdaptiveTimeSlab *) 0 ;
  dolfin::real arg2 ;
  dolfin::real arg3 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MultiAdaptiveTimeSlab_build",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MultiAdaptiveTimeSlab, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiAdaptiveTimeSlab_build" "', argument " "1"" of type '" "dolfin::MultiAdaptiveTimeSlab *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MultiAdaptiveTimeSlab * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MultiAdaptiveTimeSlab_build" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MultiAdaptiveTimeSlab_build" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  result = (dolfin::real)(arg1)->build(arg2,arg3);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiAdaptiveTimeSlab_solve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MultiAdaptiveTimeSlab *arg1 = (dolfin::MultiAdaptiveTimeSlab *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MultiAdaptiveTimeSlab_solve",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MultiAdaptiveTimeSlab, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiAdaptiveTimeSlab_solve" "', argument " "1"" of type '" "dolfin::MultiAdaptiveTimeSlab *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MultiAdaptiveTimeSlab * >(argp1);
  result = (bool)(arg1)->solve();
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiAdaptiveTimeSlab_check(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MultiAdaptiveTimeSlab *arg1 = (dolfin::MultiAdaptiveTimeSlab *) 0 ;
  bool arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MultiAdaptiveTimeSlab_check",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MultiAdaptiveTimeSlab, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiAdaptiveTimeSlab_check" "', argument " "1"" of type '" "dolfin::MultiAdaptiveTimeSlab *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MultiAdaptiveTimeSlab * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MultiAdaptiveTimeSlab_check" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast<bool >(val2);
  result = (bool)(arg1)->check(arg2);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiAdaptiveTimeSlab_shift(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MultiAdaptiveTimeSlab *arg1 = (dolfin::MultiAdaptiveTimeSlab *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MultiAdaptiveTimeSlab_shift",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MultiAdaptiveTimeSlab, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiAdaptiveTimeSlab_shift" "', argument " "1"" of type '" "dolfin::MultiAdaptiveTimeSlab *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MultiAdaptiveTimeSlab * >(argp1);
  result = (bool)(arg1)->shift();
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiAdaptiveTimeSlab_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MultiAdaptiveTimeSlab *arg1 = (dolfin::MultiAdaptiveTimeSlab *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MultiAdaptiveTimeSlab_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MultiAdaptiveTimeSlab, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiAdaptiveTimeSlab_reset" "', argument " "1"" of type '" "dolfin::MultiAdaptiveTimeSlab *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MultiAdaptiveTimeSlab * >(argp1);
  (arg1)->reset();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiAdaptiveTimeSlab_sample(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MultiAdaptiveTimeSlab *arg1 = (dolfin::MultiAdaptiveTimeSlab *) 0 ;
  dolfin::real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MultiAdaptiveTimeSlab_sample",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MultiAdaptiveTimeSlab, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiAdaptiveTimeSlab_sample" "', argument " "1"" of type '" "dolfin::MultiAdaptiveTimeSlab *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MultiAdaptiveTimeSlab * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MultiAdaptiveTimeSlab_sample" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  (arg1)->sample(arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiAdaptiveTimeSlab_usample(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MultiAdaptiveTimeSlab *arg1 = (dolfin::MultiAdaptiveTimeSlab *) 0 ;
  dolfin::uint arg2 ;
  dolfin::real arg3 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MultiAdaptiveTimeSlab_usample",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MultiAdaptiveTimeSlab, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiAdaptiveTimeSlab_usample" "', argument " "1"" of type '" "dolfin::MultiAdaptiveTimeSlab *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MultiAdaptiveTimeSlab * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MultiAdaptiveTimeSlab_usample" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MultiAdaptiveTimeSlab_usample" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  result = (dolfin::real)(arg1)->usample(arg2,arg3);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiAdaptiveTimeSlab_ksample(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MultiAdaptiveTimeSlab *arg1 = (dolfin::MultiAdaptiveTimeSlab *) 0 ;
  dolfin::uint arg2 ;
  dolfin::real arg3 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MultiAdaptiveTimeSlab_ksample",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MultiAdaptiveTimeSlab, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiAdaptiveTimeSlab_ksample" "', argument " "1"" of type '" "dolfin::MultiAdaptiveTimeSlab *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MultiAdaptiveTimeSlab * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MultiAdaptiveTimeSlab_ksample" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MultiAdaptiveTimeSlab_ksample" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  result = (dolfin::real)(arg1)->ksample(arg2,arg3);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiAdaptiveTimeSlab_rsample(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MultiAdaptiveTimeSlab *arg1 = (dolfin::MultiAdaptiveTimeSlab *) 0 ;
  dolfin::uint arg2 ;
  dolfin::real arg3 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MultiAdaptiveTimeSlab_rsample",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MultiAdaptiveTimeSlab, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiAdaptiveTimeSlab_rsample" "', argument " "1"" of type '" "dolfin::MultiAdaptiveTimeSlab *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MultiAdaptiveTimeSlab * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MultiAdaptiveTimeSlab_rsample" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MultiAdaptiveTimeSlab_rsample" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  result = (dolfin::real)(arg1)->rsample(arg2,arg3);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiAdaptiveTimeSlab_disp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MultiAdaptiveTimeSlab *arg1 = (dolfin::MultiAdaptiveTimeSlab *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MultiAdaptiveTimeSlab_disp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MultiAdaptiveTimeSlab, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiAdaptiveTimeSlab_disp" "', argument " "1"" of type '" "dolfin::MultiAdaptiveTimeSlab const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MultiAdaptiveTimeSlab * >(argp1);
  ((dolfin::MultiAdaptiveTimeSlab const *)arg1)->disp();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MultiAdaptiveTimeSlab_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__MultiAdaptiveTimeSlab, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MultiAdaptivity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ODE *arg1 = 0 ;
  dolfin::Method *arg2 = 0 ;
  dolfin::MultiAdaptivity *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_MultiAdaptivity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__ODE,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MultiAdaptivity" "', argument " "1"" of type '" "dolfin::ODE const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MultiAdaptivity" "', argument " "1"" of type '" "dolfin::ODE const &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ODE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Method,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MultiAdaptivity" "', argument " "2"" of type '" "dolfin::Method const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MultiAdaptivity" "', argument " "2"" of type '" "dolfin::Method const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Method * >(argp2);
  result = (dolfin::MultiAdaptivity *)new dolfin::MultiAdaptivity((dolfin::ODE const &)*arg1,(dolfin::Method const &)*arg2);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__MultiAdaptivity, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MultiAdaptivity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MultiAdaptivity *arg1 = (dolfin::MultiAdaptivity *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MultiAdaptivity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MultiAdaptivity, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MultiAdaptivity" "', argument " "1"" of type '" "dolfin::MultiAdaptivity *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MultiAdaptivity * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiAdaptivity_timestep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MultiAdaptivity *arg1 = (dolfin::MultiAdaptivity *) 0 ;
  dolfin::uint arg2 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MultiAdaptivity_timestep",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MultiAdaptivity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiAdaptivity_timestep" "', argument " "1"" of type '" "dolfin::MultiAdaptivity const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MultiAdaptivity * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MultiAdaptivity_timestep" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  result = (dolfin::real)((dolfin::MultiAdaptivity const *)arg1)->timestep(arg2);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiAdaptivity_residual(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MultiAdaptivity *arg1 = (dolfin::MultiAdaptivity *) 0 ;
  dolfin::uint arg2 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MultiAdaptivity_residual",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MultiAdaptivity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiAdaptivity_residual" "', argument " "1"" of type '" "dolfin::MultiAdaptivity const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MultiAdaptivity * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MultiAdaptivity_residual" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  result = (dolfin::real)((dolfin::MultiAdaptivity const *)arg1)->residual(arg2);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MultiAdaptivity_update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::MultiAdaptivity *arg1 = (dolfin::MultiAdaptivity *) 0 ;
  dolfin::MultiAdaptiveTimeSlab *arg2 = 0 ;
  dolfin::real arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MultiAdaptivity_update",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__MultiAdaptivity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MultiAdaptivity_update" "', argument " "1"" of type '" "dolfin::MultiAdaptivity *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::MultiAdaptivity * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__MultiAdaptiveTimeSlab,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MultiAdaptivity_update" "', argument " "2"" of type '" "dolfin::MultiAdaptiveTimeSlab &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MultiAdaptivity_update" "', argument " "2"" of type '" "dolfin::MultiAdaptiveTimeSlab &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::MultiAdaptiveTimeSlab * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MultiAdaptivity_update" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MultiAdaptivity_update" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast<bool >(val4);
  (arg1)->update(*arg2,arg3,arg4);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MultiAdaptivity_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__MultiAdaptivity, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ODE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  dolfin::uint arg2 ;
  dolfin::real arg3 ;
  dolfin::ODE *result = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ODE",&obj0,&obj1,&obj2)) SWIG_fail;
  arg1 = obj0;
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ODE" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ODE" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  if ( arg1 != Py_None ) {
    /* subclassed */
    result = (dolfin::ODE *)new SwigDirector_ODE(arg1,arg2,arg3);
    
  } else {
    SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing abstract class or protected constructor"); 
    SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__ODE, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ODE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ODE *arg1 = (dolfin::ODE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ODE",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ODE, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ODE" "', argument " "1"" of type '" "dolfin::ODE *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ODE * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ODE_u0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ODE *arg1 = (dolfin::ODE *) 0 ;
  dolfin::uint arg2 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ODE_u0",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ODE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ODE_u0" "', argument " "1"" of type '" "dolfin::ODE *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ODE * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ODE_u0" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::real)(arg1)->u0(arg2);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ODE_fmulti(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ODE *arg1 = (dolfin::ODE *) 0 ;
  dolfin::real *arg2 ;
  dolfin::real arg3 ;
  dolfin::uint arg4 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ODE_fmulti",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ODE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ODE_fmulti" "', argument " "1"" of type '" "dolfin::ODE *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ODE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ODE_fmulti" "', argument " "2"" of type '" "dolfin::real const []""'"); 
  } 
  arg2 = reinterpret_cast<dolfin::real * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ODE_fmulti" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ODE_fmulti" "', argument " "4"" of type '" "dolfin::uint""'");
  } 
  arg4 = static_cast<dolfin::uint >(val4);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::real)(arg1)->f((double const (*))arg2,arg3,arg4);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ODE_fmono(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ODE *arg1 = (dolfin::ODE *) 0 ;
  dolfin::real *arg2 ;
  dolfin::real arg3 ;
  dolfin::real *arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ODE_fmono",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ODE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ODE_fmono" "', argument " "1"" of type '" "dolfin::ODE *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ODE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ODE_fmono" "', argument " "2"" of type '" "dolfin::real const []""'"); 
  } 
  arg2 = reinterpret_cast<dolfin::real * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ODE_fmono" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ODE_fmono" "', argument " "4"" of type '" "dolfin::real []""'"); 
  } 
  arg4 = reinterpret_cast<dolfin::real * >(argp4);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->f((double const (*))arg2,arg3,arg4);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ODE_M(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ODE *arg1 = (dolfin::ODE *) 0 ;
  dolfin::real *arg2 ;
  dolfin::real *arg3 ;
  dolfin::real *arg4 ;
  dolfin::real arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ODE_M",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ODE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ODE_M" "', argument " "1"" of type '" "dolfin::ODE *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ODE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ODE_M" "', argument " "2"" of type '" "dolfin::real const []""'"); 
  } 
  arg2 = reinterpret_cast<dolfin::real * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ODE_M" "', argument " "3"" of type '" "dolfin::real []""'"); 
  } 
  arg3 = reinterpret_cast<dolfin::real * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ODE_M" "', argument " "4"" of type '" "dolfin::real const []""'"); 
  } 
  arg4 = reinterpret_cast<dolfin::real * >(argp4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ODE_M" "', argument " "5"" of type '" "dolfin::real""'");
  } 
  arg5 = static_cast<dolfin::real >(val5);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->M((double const (*))arg2,arg3,(double const (*))arg4,arg5);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ODE_J(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ODE *arg1 = (dolfin::ODE *) 0 ;
  dolfin::real *arg2 ;
  dolfin::real *arg3 ;
  dolfin::real *arg4 ;
  dolfin::real arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ODE_J",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ODE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ODE_J" "', argument " "1"" of type '" "dolfin::ODE *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ODE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ODE_J" "', argument " "2"" of type '" "dolfin::real const []""'"); 
  } 
  arg2 = reinterpret_cast<dolfin::real * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ODE_J" "', argument " "3"" of type '" "dolfin::real []""'"); 
  } 
  arg3 = reinterpret_cast<dolfin::real * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ODE_J" "', argument " "4"" of type '" "dolfin::real const []""'"); 
  } 
  arg4 = reinterpret_cast<dolfin::real * >(argp4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ODE_J" "', argument " "5"" of type '" "dolfin::real""'");
  } 
  arg5 = static_cast<dolfin::real >(val5);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->J((double const (*))arg2,arg3,(double const (*))arg4,arg5);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ODE_dfdu(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ODE *arg1 = (dolfin::ODE *) 0 ;
  dolfin::real *arg2 ;
  dolfin::real arg3 ;
  dolfin::uint arg4 ;
  dolfin::uint arg5 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ODE_dfdu",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ODE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ODE_dfdu" "', argument " "1"" of type '" "dolfin::ODE *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ODE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ODE_dfdu" "', argument " "2"" of type '" "dolfin::real const []""'"); 
  } 
  arg2 = reinterpret_cast<dolfin::real * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ODE_dfdu" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ODE_dfdu" "', argument " "4"" of type '" "dolfin::uint""'");
  } 
  arg4 = static_cast<dolfin::uint >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ODE_dfdu" "', argument " "5"" of type '" "dolfin::uint""'");
  } 
  arg5 = static_cast<dolfin::uint >(val5);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::real)(arg1)->dfdu((double const (*))arg2,arg3,arg4,arg5);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ODE_timestep__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ODE *arg1 = (dolfin::ODE *) 0 ;
  dolfin::real arg2 ;
  dolfin::real arg3 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ODE_timestep",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ODE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ODE_timestep" "', argument " "1"" of type '" "dolfin::ODE const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ODE * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ODE_timestep" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ODE_timestep" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::real)((dolfin::ODE const *)arg1)->timestep(arg2,arg3);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ODE_timestep__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ODE *arg1 = (dolfin::ODE *) 0 ;
  dolfin::real arg2 ;
  dolfin::uint arg3 ;
  dolfin::real arg4 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ODE_timestep",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ODE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ODE_timestep" "', argument " "1"" of type '" "dolfin::ODE const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ODE * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ODE_timestep" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ODE_timestep" "', argument " "3"" of type '" "dolfin::uint""'");
  } 
  arg3 = static_cast<dolfin::uint >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ODE_timestep" "', argument " "4"" of type '" "dolfin::real""'");
  } 
  arg4 = static_cast<dolfin::real >(val4);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::real)((dolfin::ODE const *)arg1)->timestep(arg2,arg3,arg4);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ODE_timestep(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__ODE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ODE_timestep__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__ODE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ODE_timestep__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'ODE_timestep'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ODE_update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ODE *arg1 = (dolfin::ODE *) 0 ;
  dolfin::real *arg2 ;
  dolfin::real arg3 ;
  bool arg4 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ODE_update",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ODE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ODE_update" "', argument " "1"" of type '" "dolfin::ODE *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ODE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ODE_update" "', argument " "2"" of type '" "dolfin::real const []""'"); 
  } 
  arg2 = reinterpret_cast<dolfin::real * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ODE_update" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ODE_update" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast<bool >(val4);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (bool)(arg1)->update((double const (*))arg2,arg3,arg4);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ODE_save(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ODE *arg1 = (dolfin::ODE *) 0 ;
  dolfin::Sample *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ODE_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ODE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ODE_save" "', argument " "1"" of type '" "dolfin::ODE *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ODE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Sample,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ODE_save" "', argument " "2"" of type '" "dolfin::Sample &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ODE_save" "', argument " "2"" of type '" "dolfin::Sample &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Sample * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->save(*arg2);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ODE_sparse__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ODE *arg1 = (dolfin::ODE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ODE_sparse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ODE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ODE_sparse" "', argument " "1"" of type '" "dolfin::ODE *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ODE * >(argp1);
  (arg1)->sparse();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ODE_sparse__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ODE *arg1 = (dolfin::ODE *) 0 ;
  dolfin::Matrix *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ODE_sparse",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ODE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ODE_sparse" "', argument " "1"" of type '" "dolfin::ODE *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ODE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Matrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ODE_sparse" "', argument " "2"" of type '" "dolfin::Matrix const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ODE_sparse" "', argument " "2"" of type '" "dolfin::Matrix const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Matrix * >(argp2);
  (arg1)->sparse((dolfin::Matrix const &)*arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ODE_sparse(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__ODE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ODE_sparse__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__ODE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_dolfin__Matrix, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ODE_sparse__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'ODE_sparse'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ODE_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ODE *arg1 = (dolfin::ODE *) 0 ;
  dolfin::uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ODE_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ODE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ODE_size" "', argument " "1"" of type '" "dolfin::ODE const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ODE * >(argp1);
  result = (dolfin::uint)((dolfin::ODE const *)arg1)->size();
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ODE_endtime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ODE *arg1 = (dolfin::ODE *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ODE_endtime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ODE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ODE_endtime" "', argument " "1"" of type '" "dolfin::ODE const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ODE * >(argp1);
  result = (dolfin::real)((dolfin::ODE const *)arg1)->endtime();
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ODE_solve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ODE *arg1 = (dolfin::ODE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ODE_solve",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ODE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ODE_solve" "', argument " "1"" of type '" "dolfin::ODE *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ODE * >(argp1);
  (arg1)->solve();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_ODE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ODE *arg1 = (dolfin::ODE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:disown_ODE",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ODE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_ODE" "', argument " "1"" of type '" "dolfin::ODE *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ODE * >(argp1);
  {
    Swig::Director *director = dynamic_cast<Swig::Director *>(arg1);
    if (director) director->swig_disown();
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ODE_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__ODE, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ODESolver_solve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ODE *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ODESolver_solve",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__ODE,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ODESolver_solve" "', argument " "1"" of type '" "dolfin::ODE &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ODESolver_solve" "', argument " "1"" of type '" "dolfin::ODE &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ODE * >(argp1);
  dolfin::ODESolver::solve(*arg1);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ODESolver_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__ODESolver, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ParticleSystem__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  dolfin::real arg2 ;
  unsigned int arg3 ;
  dolfin::ParticleSystem *result = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ParticleSystem",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ParticleSystem" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast<unsigned int >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ParticleSystem" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ParticleSystem" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast<unsigned int >(val3);
  result = (dolfin::ParticleSystem *)new dolfin::ParticleSystem(arg1,arg2,arg3);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__ParticleSystem, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ParticleSystem__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  dolfin::real arg2 ;
  dolfin::ParticleSystem *result = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ParticleSystem",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ParticleSystem" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast<unsigned int >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ParticleSystem" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  result = (dolfin::ParticleSystem *)new dolfin::ParticleSystem(arg1,arg2);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__ParticleSystem, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ParticleSystem(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ParticleSystem__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_ParticleSystem__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_ParticleSystem'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ParticleSystem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ParticleSystem *arg1 = (dolfin::ParticleSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ParticleSystem",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ParticleSystem, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ParticleSystem" "', argument " "1"" of type '" "dolfin::ParticleSystem *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ParticleSystem * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleSystem_x0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ParticleSystem *arg1 = (dolfin::ParticleSystem *) 0 ;
  unsigned int arg2 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleSystem_x0",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ParticleSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleSystem_x0" "', argument " "1"" of type '" "dolfin::ParticleSystem *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ParticleSystem * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ParticleSystem_x0" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast<unsigned int >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::real)(arg1)->x0(arg2);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleSystem_y0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ParticleSystem *arg1 = (dolfin::ParticleSystem *) 0 ;
  unsigned int arg2 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleSystem_y0",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ParticleSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleSystem_y0" "', argument " "1"" of type '" "dolfin::ParticleSystem *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ParticleSystem * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ParticleSystem_y0" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast<unsigned int >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::real)(arg1)->y0(arg2);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleSystem_z0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ParticleSystem *arg1 = (dolfin::ParticleSystem *) 0 ;
  unsigned int arg2 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleSystem_z0",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ParticleSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleSystem_z0" "', argument " "1"" of type '" "dolfin::ParticleSystem *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ParticleSystem * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ParticleSystem_z0" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast<unsigned int >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::real)(arg1)->z0(arg2);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleSystem_vx0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ParticleSystem *arg1 = (dolfin::ParticleSystem *) 0 ;
  unsigned int arg2 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleSystem_vx0",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ParticleSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleSystem_vx0" "', argument " "1"" of type '" "dolfin::ParticleSystem *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ParticleSystem * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ParticleSystem_vx0" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast<unsigned int >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::real)(arg1)->vx0(arg2);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleSystem_vy0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ParticleSystem *arg1 = (dolfin::ParticleSystem *) 0 ;
  unsigned int arg2 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleSystem_vy0",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ParticleSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleSystem_vy0" "', argument " "1"" of type '" "dolfin::ParticleSystem *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ParticleSystem * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ParticleSystem_vy0" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast<unsigned int >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::real)(arg1)->vy0(arg2);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleSystem_vz0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ParticleSystem *arg1 = (dolfin::ParticleSystem *) 0 ;
  unsigned int arg2 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleSystem_vz0",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ParticleSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleSystem_vz0" "', argument " "1"" of type '" "dolfin::ParticleSystem *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ParticleSystem * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ParticleSystem_vz0" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast<unsigned int >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::real)(arg1)->vz0(arg2);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleSystem_Fx(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ParticleSystem *arg1 = (dolfin::ParticleSystem *) 0 ;
  unsigned int arg2 ;
  dolfin::real arg3 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ParticleSystem_Fx",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ParticleSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleSystem_Fx" "', argument " "1"" of type '" "dolfin::ParticleSystem *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ParticleSystem * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ParticleSystem_Fx" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast<unsigned int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ParticleSystem_Fx" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::real)(arg1)->Fx(arg2,arg3);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleSystem_Fy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ParticleSystem *arg1 = (dolfin::ParticleSystem *) 0 ;
  unsigned int arg2 ;
  dolfin::real arg3 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ParticleSystem_Fy",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ParticleSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleSystem_Fy" "', argument " "1"" of type '" "dolfin::ParticleSystem *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ParticleSystem * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ParticleSystem_Fy" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast<unsigned int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ParticleSystem_Fy" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::real)(arg1)->Fy(arg2,arg3);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleSystem_Fz(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ParticleSystem *arg1 = (dolfin::ParticleSystem *) 0 ;
  unsigned int arg2 ;
  dolfin::real arg3 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ParticleSystem_Fz",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ParticleSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleSystem_Fz" "', argument " "1"" of type '" "dolfin::ParticleSystem *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ParticleSystem * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ParticleSystem_Fz" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast<unsigned int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ParticleSystem_Fz" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::real)(arg1)->Fz(arg2,arg3);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleSystem_mass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ParticleSystem *arg1 = (dolfin::ParticleSystem *) 0 ;
  unsigned int arg2 ;
  dolfin::real arg3 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ParticleSystem_mass",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ParticleSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleSystem_mass" "', argument " "1"" of type '" "dolfin::ParticleSystem *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ParticleSystem * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ParticleSystem_mass" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast<unsigned int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ParticleSystem_mass" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::real)(arg1)->mass(arg2,arg3);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleSystem_k(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ParticleSystem *arg1 = (dolfin::ParticleSystem *) 0 ;
  unsigned int arg2 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleSystem_k",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ParticleSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleSystem_k" "', argument " "1"" of type '" "dolfin::ParticleSystem *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ParticleSystem * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ParticleSystem_k" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast<unsigned int >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::real)(arg1)->k(arg2);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleSystem_u0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ParticleSystem *arg1 = (dolfin::ParticleSystem *) 0 ;
  unsigned int arg2 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleSystem_u0",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ParticleSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleSystem_u0" "', argument " "1"" of type '" "dolfin::ParticleSystem *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ParticleSystem * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ParticleSystem_u0" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast<unsigned int >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::real)(arg1)->u0(arg2);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleSystem_f(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ParticleSystem *arg1 = (dolfin::ParticleSystem *) 0 ;
  dolfin::real *arg2 ;
  dolfin::real arg3 ;
  unsigned int arg4 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ParticleSystem_f",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ParticleSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleSystem_f" "', argument " "1"" of type '" "dolfin::ParticleSystem *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ParticleSystem * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleSystem_f" "', argument " "2"" of type '" "dolfin::real const []""'"); 
  } 
  arg2 = reinterpret_cast<dolfin::real * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ParticleSystem_f" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ParticleSystem_f" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast<unsigned int >(val4);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::real)(arg1)->f((double const (*))arg2,arg3,arg4);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleSystem_timestep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ParticleSystem *arg1 = (dolfin::ParticleSystem *) 0 ;
  unsigned int arg2 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleSystem_timestep",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ParticleSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleSystem_timestep" "', argument " "1"" of type '" "dolfin::ParticleSystem *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ParticleSystem * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ParticleSystem_timestep" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast<unsigned int >(val2);
  result = (dolfin::real)(arg1)->timestep(arg2);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ParticleSystem_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__ParticleSystem, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Partition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::uint arg1 ;
  dolfin::Partition *result = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Partition",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Partition" "', argument " "1"" of type '" "dolfin::uint""'");
  } 
  arg1 = static_cast<dolfin::uint >(val1);
  result = (dolfin::Partition *)new dolfin::Partition(arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Partition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Partition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Partition *arg1 = (dolfin::Partition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Partition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Partition, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Partition" "', argument " "1"" of type '" "dolfin::Partition *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Partition * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Partition_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Partition *arg1 = (dolfin::Partition *) 0 ;
  dolfin::uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Partition_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Partition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Partition_size" "', argument " "1"" of type '" "dolfin::Partition const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Partition * >(argp1);
  result = (dolfin::uint)((dolfin::Partition const *)arg1)->size();
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Partition_index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Partition *arg1 = (dolfin::Partition *) 0 ;
  dolfin::uint arg2 ;
  dolfin::uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Partition_index",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Partition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Partition_index" "', argument " "1"" of type '" "dolfin::Partition const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Partition * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Partition_index" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  result = (dolfin::uint)((dolfin::Partition const *)arg1)->index(arg2);
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Partition_update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Partition *arg1 = (dolfin::Partition *) 0 ;
  dolfin::uint arg2 ;
  dolfin::uint *arg3 = 0 ;
  dolfin::MultiAdaptivity *arg4 = 0 ;
  dolfin::real arg5 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Partition_update",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Partition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Partition_update" "', argument " "1"" of type '" "dolfin::Partition *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Partition * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Partition_update" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_unsigned_int,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Partition_update" "', argument " "3"" of type '" "dolfin::uint &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Partition_update" "', argument " "3"" of type '" "dolfin::uint &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::uint * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_dolfin__MultiAdaptivity,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Partition_update" "', argument " "4"" of type '" "dolfin::MultiAdaptivity &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Partition_update" "', argument " "4"" of type '" "dolfin::MultiAdaptivity &""'"); 
  }
  arg4 = reinterpret_cast<dolfin::MultiAdaptivity * >(argp4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Partition_update" "', argument " "5"" of type '" "dolfin::real""'");
  } 
  arg5 = static_cast<dolfin::real >(val5);
  result = (dolfin::real)(arg1)->update(arg2,*arg3,*arg4,arg5);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Partition_debug(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Partition *arg1 = (dolfin::Partition *) 0 ;
  dolfin::uint arg2 ;
  dolfin::uint arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Partition_debug",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Partition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Partition_debug" "', argument " "1"" of type '" "dolfin::Partition const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Partition * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Partition_debug" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Partition_debug" "', argument " "3"" of type '" "dolfin::uint""'");
  } 
  arg3 = static_cast<dolfin::uint >(val3);
  ((dolfin::Partition const *)arg1)->debug(arg2,arg3);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Partition_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__Partition, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ReducedModel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ODE *arg1 = 0 ;
  dolfin::ReducedModel *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ReducedModel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__ODE,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ReducedModel" "', argument " "1"" of type '" "dolfin::ODE &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ReducedModel" "', argument " "1"" of type '" "dolfin::ODE &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ODE * >(argp1);
  result = (dolfin::ReducedModel *)new dolfin::ReducedModel(*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__ReducedModel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ReducedModel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ReducedModel *arg1 = (dolfin::ReducedModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ReducedModel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ReducedModel, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ReducedModel" "', argument " "1"" of type '" "dolfin::ReducedModel *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ReducedModel * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ReducedModel_f(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ReducedModel *arg1 = (dolfin::ReducedModel *) 0 ;
  dolfin::Vector *arg2 = 0 ;
  dolfin::real arg3 ;
  unsigned int arg4 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ReducedModel_f",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ReducedModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReducedModel_f" "', argument " "1"" of type '" "dolfin::ReducedModel *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ReducedModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ReducedModel_f" "', argument " "2"" of type '" "dolfin::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ReducedModel_f" "', argument " "2"" of type '" "dolfin::Vector const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ReducedModel_f" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ReducedModel_f" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast<unsigned int >(val4);
  result = (dolfin::real)(arg1)->f((dolfin::Vector const &)*arg2,arg3,arg4);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ReducedModel_u0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ReducedModel *arg1 = (dolfin::ReducedModel *) 0 ;
  unsigned int arg2 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ReducedModel_u0",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ReducedModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReducedModel_u0" "', argument " "1"" of type '" "dolfin::ReducedModel *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ReducedModel * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ReducedModel_u0" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast<unsigned int >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::real)(arg1)->u0(arg2);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ReducedModel_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__ReducedModel, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Sample(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::TimeSlab *arg1 = 0 ;
  dolfin::real arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  dolfin::Sample *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_Sample",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__TimeSlab,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Sample" "', argument " "1"" of type '" "dolfin::TimeSlab &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Sample" "', argument " "1"" of type '" "dolfin::TimeSlab &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::TimeSlab * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Sample" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Sample" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Sample" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (dolfin::Sample *)new dolfin::Sample(*arg1,arg2,arg3,arg4);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Sample, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Sample(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Sample *arg1 = (dolfin::Sample *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Sample",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Sample, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Sample" "', argument " "1"" of type '" "dolfin::Sample *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Sample * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sample_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Sample *arg1 = (dolfin::Sample *) 0 ;
  dolfin::uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Sample_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Sample, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sample_size" "', argument " "1"" of type '" "dolfin::Sample const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Sample * >(argp1);
  result = (dolfin::uint)((dolfin::Sample const *)arg1)->size();
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sample_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Sample *arg1 = (dolfin::Sample *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Sample_t",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Sample, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sample_t" "', argument " "1"" of type '" "dolfin::Sample const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Sample * >(argp1);
  result = (dolfin::real)((dolfin::Sample const *)arg1)->t();
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sample_u(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Sample *arg1 = (dolfin::Sample *) 0 ;
  dolfin::uint arg2 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Sample_u",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Sample, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sample_u" "', argument " "1"" of type '" "dolfin::Sample *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Sample * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sample_u" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  result = (dolfin::real)(arg1)->u(arg2);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sample_k(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Sample *arg1 = (dolfin::Sample *) 0 ;
  dolfin::uint arg2 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Sample_k",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Sample, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sample_k" "', argument " "1"" of type '" "dolfin::Sample *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Sample * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sample_k" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  result = (dolfin::real)(arg1)->k(arg2);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Sample_r(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Sample *arg1 = (dolfin::Sample *) 0 ;
  dolfin::uint arg2 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Sample_r",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__Sample, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sample_r" "', argument " "1"" of type '" "dolfin::Sample *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Sample * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Sample_r" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  result = (dolfin::real)(arg1)->r(arg2);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Sample_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__Sample, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_TimeSlab(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::TimeSlab *arg1 = (dolfin::TimeSlab *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TimeSlab",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__TimeSlab, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TimeSlab" "', argument " "1"" of type '" "dolfin::TimeSlab *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::TimeSlab * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSlab_build(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::TimeSlab *arg1 = (dolfin::TimeSlab *) 0 ;
  dolfin::real arg2 ;
  dolfin::real arg3 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TimeSlab_build",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__TimeSlab, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSlab_build" "', argument " "1"" of type '" "dolfin::TimeSlab *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::TimeSlab * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimeSlab_build" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TimeSlab_build" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::real)(arg1)->build(arg2,arg3);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSlab_solve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::TimeSlab *arg1 = (dolfin::TimeSlab *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeSlab_solve",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__TimeSlab, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSlab_solve" "', argument " "1"" of type '" "dolfin::TimeSlab *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::TimeSlab * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (bool)(arg1)->solve();
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSlab_check(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::TimeSlab *arg1 = (dolfin::TimeSlab *) 0 ;
  bool arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TimeSlab_check",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__TimeSlab, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSlab_check" "', argument " "1"" of type '" "dolfin::TimeSlab *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::TimeSlab * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimeSlab_check" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast<bool >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (bool)(arg1)->check(arg2);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSlab_shift(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::TimeSlab *arg1 = (dolfin::TimeSlab *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeSlab_shift",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__TimeSlab, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSlab_shift" "', argument " "1"" of type '" "dolfin::TimeSlab *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::TimeSlab * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (bool)(arg1)->shift();
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSlab_sample(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::TimeSlab *arg1 = (dolfin::TimeSlab *) 0 ;
  dolfin::real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TimeSlab_sample",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__TimeSlab, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSlab_sample" "', argument " "1"" of type '" "dolfin::TimeSlab *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::TimeSlab * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimeSlab_sample" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->sample(arg2);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSlab_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::TimeSlab *arg1 = (dolfin::TimeSlab *) 0 ;
  dolfin::uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeSlab_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__TimeSlab, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSlab_size" "', argument " "1"" of type '" "dolfin::TimeSlab const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::TimeSlab * >(argp1);
  result = (dolfin::uint)((dolfin::TimeSlab const *)arg1)->size();
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSlab_starttime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::TimeSlab *arg1 = (dolfin::TimeSlab *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeSlab_starttime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__TimeSlab, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSlab_starttime" "', argument " "1"" of type '" "dolfin::TimeSlab const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::TimeSlab * >(argp1);
  result = (dolfin::real)((dolfin::TimeSlab const *)arg1)->starttime();
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSlab_endtime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::TimeSlab *arg1 = (dolfin::TimeSlab *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeSlab_endtime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__TimeSlab, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSlab_endtime" "', argument " "1"" of type '" "dolfin::TimeSlab const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::TimeSlab * >(argp1);
  result = (dolfin::real)((dolfin::TimeSlab const *)arg1)->endtime();
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSlab_length(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::TimeSlab *arg1 = (dolfin::TimeSlab *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeSlab_length",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__TimeSlab, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSlab_length" "', argument " "1"" of type '" "dolfin::TimeSlab const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::TimeSlab * >(argp1);
  result = (dolfin::real)((dolfin::TimeSlab const *)arg1)->length();
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSlab_usample(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::TimeSlab *arg1 = (dolfin::TimeSlab *) 0 ;
  dolfin::uint arg2 ;
  dolfin::real arg3 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TimeSlab_usample",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__TimeSlab, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSlab_usample" "', argument " "1"" of type '" "dolfin::TimeSlab *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::TimeSlab * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimeSlab_usample" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TimeSlab_usample" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::real)(arg1)->usample(arg2,arg3);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSlab_ksample(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::TimeSlab *arg1 = (dolfin::TimeSlab *) 0 ;
  dolfin::uint arg2 ;
  dolfin::real arg3 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TimeSlab_ksample",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__TimeSlab, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSlab_ksample" "', argument " "1"" of type '" "dolfin::TimeSlab *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::TimeSlab * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimeSlab_ksample" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TimeSlab_ksample" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::real)(arg1)->ksample(arg2,arg3);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSlab_rsample(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::TimeSlab *arg1 = (dolfin::TimeSlab *) 0 ;
  dolfin::uint arg2 ;
  dolfin::real arg3 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TimeSlab_rsample",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__TimeSlab, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSlab_rsample" "', argument " "1"" of type '" "dolfin::TimeSlab *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::TimeSlab * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimeSlab_rsample" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TimeSlab_rsample" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::real)(arg1)->rsample(arg2,arg3);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSlab_disp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::TimeSlab *arg1 = (dolfin::TimeSlab *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeSlab_disp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__TimeSlab, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSlab_disp" "', argument " "1"" of type '" "dolfin::TimeSlab const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::TimeSlab * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    ((dolfin::TimeSlab const *)arg1)->disp();
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TimeSlab_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__TimeSlab, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_TimeSlabJacobian(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::TimeSlabJacobian *arg1 = (dolfin::TimeSlabJacobian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TimeSlabJacobian",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__TimeSlabJacobian, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TimeSlabJacobian" "', argument " "1"" of type '" "dolfin::TimeSlabJacobian *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::TimeSlabJacobian * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSlabJacobian_mult(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::TimeSlabJacobian *arg1 = (dolfin::TimeSlabJacobian *) 0 ;
  dolfin::Vector *arg2 = 0 ;
  dolfin::Vector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TimeSlabJacobian_mult",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__TimeSlabJacobian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSlabJacobian_mult" "', argument " "1"" of type '" "dolfin::TimeSlabJacobian const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::TimeSlabJacobian * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TimeSlabJacobian_mult" "', argument " "2"" of type '" "dolfin::Vector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TimeSlabJacobian_mult" "', argument " "2"" of type '" "dolfin::Vector const &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TimeSlabJacobian_mult" "', argument " "3"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TimeSlabJacobian_mult" "', argument " "3"" of type '" "dolfin::Vector &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Vector * >(argp3);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    ((dolfin::TimeSlabJacobian const *)arg1)->mult((dolfin::Vector const &)*arg2,*arg3);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSlabJacobian_update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::TimeSlabJacobian *arg1 = (dolfin::TimeSlabJacobian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeSlabJacobian_update",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__TimeSlabJacobian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSlabJacobian_update" "', argument " "1"" of type '" "dolfin::TimeSlabJacobian *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::TimeSlabJacobian * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->update();
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TimeSlabJacobian_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__TimeSlabJacobian, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TimeStepper(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ODE *arg1 = 0 ;
  dolfin::TimeStepper *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TimeStepper",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__ODE,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TimeStepper" "', argument " "1"" of type '" "dolfin::ODE &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TimeStepper" "', argument " "1"" of type '" "dolfin::ODE &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ODE * >(argp1);
  result = (dolfin::TimeStepper *)new dolfin::TimeStepper(*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__TimeStepper, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TimeStepper(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::TimeStepper *arg1 = (dolfin::TimeStepper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TimeStepper",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__TimeStepper, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TimeStepper" "', argument " "1"" of type '" "dolfin::TimeStepper *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::TimeStepper * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeStepper_solve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ODE *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeStepper_solve",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__ODE,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeStepper_solve" "', argument " "1"" of type '" "dolfin::ODE &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TimeStepper_solve" "', argument " "1"" of type '" "dolfin::ODE &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ODE * >(argp1);
  dolfin::TimeStepper::solve(*arg1);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeStepper_step(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::TimeStepper *arg1 = (dolfin::TimeStepper *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeStepper_step",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__TimeStepper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeStepper_step" "', argument " "1"" of type '" "dolfin::TimeStepper *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::TimeStepper * >(argp1);
  result = (dolfin::real)(arg1)->step();
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeStepper_finished(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::TimeStepper *arg1 = (dolfin::TimeStepper *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeStepper_finished",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__TimeStepper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeStepper_finished" "', argument " "1"" of type '" "dolfin::TimeStepper const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::TimeStepper * >(argp1);
  result = (bool)((dolfin::TimeStepper const *)arg1)->finished();
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TimeStepper_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__TimeStepper, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_cGqMethod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  dolfin::cGqMethod *result = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_cGqMethod",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_cGqMethod" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast<unsigned int >(val1);
  result = (dolfin::cGqMethod *)new dolfin::cGqMethod(arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__cGqMethod, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cGqMethod_ueval__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::cGqMethod *arg1 = (dolfin::cGqMethod *) 0 ;
  dolfin::real arg2 ;
  dolfin::real *arg3 ;
  dolfin::real arg4 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:cGqMethod_ueval",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__cGqMethod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cGqMethod_ueval" "', argument " "1"" of type '" "dolfin::cGqMethod const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::cGqMethod * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cGqMethod_ueval" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cGqMethod_ueval" "', argument " "3"" of type '" "dolfin::real []""'"); 
  } 
  arg3 = reinterpret_cast<dolfin::real * >(argp3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "cGqMethod_ueval" "', argument " "4"" of type '" "dolfin::real""'");
  } 
  arg4 = static_cast<dolfin::real >(val4);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::real)((dolfin::cGqMethod const *)arg1)->ueval(arg2,arg3,arg4);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cGqMethod_ueval__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::cGqMethod *arg1 = (dolfin::cGqMethod *) 0 ;
  dolfin::real arg2 ;
  dolfin::real *arg3 ;
  dolfin::uint arg4 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:cGqMethod_ueval",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__cGqMethod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cGqMethod_ueval" "', argument " "1"" of type '" "dolfin::cGqMethod const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::cGqMethod * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cGqMethod_ueval" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cGqMethod_ueval" "', argument " "3"" of type '" "dolfin::real []""'"); 
  } 
  arg3 = reinterpret_cast<dolfin::real * >(argp3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "cGqMethod_ueval" "', argument " "4"" of type '" "dolfin::uint""'");
  } 
  arg4 = static_cast<dolfin::uint >(val4);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::real)((dolfin::cGqMethod const *)arg1)->ueval(arg2,arg3,arg4);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cGqMethod_ueval(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__cGqMethod, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_cGqMethod_ueval__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__cGqMethod, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_cGqMethod_ueval__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'cGqMethod_ueval'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_cGqMethod_residual(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::cGqMethod *arg1 = (dolfin::cGqMethod *) 0 ;
  dolfin::real arg2 ;
  dolfin::real *arg3 ;
  dolfin::real arg4 ;
  dolfin::real arg5 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:cGqMethod_residual",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__cGqMethod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cGqMethod_residual" "', argument " "1"" of type '" "dolfin::cGqMethod const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::cGqMethod * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cGqMethod_residual" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cGqMethod_residual" "', argument " "3"" of type '" "dolfin::real []""'"); 
  } 
  arg3 = reinterpret_cast<dolfin::real * >(argp3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "cGqMethod_residual" "', argument " "4"" of type '" "dolfin::real""'");
  } 
  arg4 = static_cast<dolfin::real >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "cGqMethod_residual" "', argument " "5"" of type '" "dolfin::real""'");
  } 
  arg5 = static_cast<dolfin::real >(val5);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::real)((dolfin::cGqMethod const *)arg1)->residual(arg2,arg3,arg4,arg5);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cGqMethod_timestep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::cGqMethod *arg1 = (dolfin::cGqMethod *) 0 ;
  dolfin::real arg2 ;
  dolfin::real arg3 ;
  dolfin::real arg4 ;
  dolfin::real arg5 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:cGqMethod_timestep",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__cGqMethod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cGqMethod_timestep" "', argument " "1"" of type '" "dolfin::cGqMethod const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::cGqMethod * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cGqMethod_timestep" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cGqMethod_timestep" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "cGqMethod_timestep" "', argument " "4"" of type '" "dolfin::real""'");
  } 
  arg4 = static_cast<dolfin::real >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "cGqMethod_timestep" "', argument " "5"" of type '" "dolfin::real""'");
  } 
  arg5 = static_cast<dolfin::real >(val5);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::real)((dolfin::cGqMethod const *)arg1)->timestep(arg2,arg3,arg4,arg5);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cGqMethod_error(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::cGqMethod *arg1 = (dolfin::cGqMethod *) 0 ;
  dolfin::real arg2 ;
  dolfin::real arg3 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:cGqMethod_error",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__cGqMethod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cGqMethod_error" "', argument " "1"" of type '" "dolfin::cGqMethod const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::cGqMethod * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cGqMethod_error" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cGqMethod_error" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::real)((dolfin::cGqMethod const *)arg1)->error(arg2,arg3);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cGqMethod_disp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::cGqMethod *arg1 = (dolfin::cGqMethod *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:cGqMethod_disp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__cGqMethod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cGqMethod_disp" "', argument " "1"" of type '" "dolfin::cGqMethod const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::cGqMethod * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    ((dolfin::cGqMethod const *)arg1)->disp();
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *cGqMethod_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__cGqMethod, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_dGqMethod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  dolfin::dGqMethod *result = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_dGqMethod",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_dGqMethod" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast<unsigned int >(val1);
  result = (dolfin::dGqMethod *)new dolfin::dGqMethod(arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__dGqMethod, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dGqMethod_ueval__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::dGqMethod *arg1 = (dolfin::dGqMethod *) 0 ;
  dolfin::real arg2 ;
  dolfin::real *arg3 ;
  dolfin::real arg4 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:dGqMethod_ueval",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__dGqMethod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dGqMethod_ueval" "', argument " "1"" of type '" "dolfin::dGqMethod const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::dGqMethod * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dGqMethod_ueval" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dGqMethod_ueval" "', argument " "3"" of type '" "dolfin::real []""'"); 
  } 
  arg3 = reinterpret_cast<dolfin::real * >(argp3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "dGqMethod_ueval" "', argument " "4"" of type '" "dolfin::real""'");
  } 
  arg4 = static_cast<dolfin::real >(val4);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::real)((dolfin::dGqMethod const *)arg1)->ueval(arg2,arg3,arg4);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dGqMethod_ueval__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::dGqMethod *arg1 = (dolfin::dGqMethod *) 0 ;
  dolfin::real arg2 ;
  dolfin::real *arg3 ;
  dolfin::uint arg4 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:dGqMethod_ueval",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__dGqMethod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dGqMethod_ueval" "', argument " "1"" of type '" "dolfin::dGqMethod const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::dGqMethod * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dGqMethod_ueval" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dGqMethod_ueval" "', argument " "3"" of type '" "dolfin::real []""'"); 
  } 
  arg3 = reinterpret_cast<dolfin::real * >(argp3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "dGqMethod_ueval" "', argument " "4"" of type '" "dolfin::uint""'");
  } 
  arg4 = static_cast<dolfin::uint >(val4);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::real)((dolfin::dGqMethod const *)arg1)->ueval(arg2,arg3,arg4);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dGqMethod_ueval(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__dGqMethod, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_dGqMethod_ueval__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__dGqMethod, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_dGqMethod_ueval__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'dGqMethod_ueval'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_dGqMethod_residual(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::dGqMethod *arg1 = (dolfin::dGqMethod *) 0 ;
  dolfin::real arg2 ;
  dolfin::real *arg3 ;
  dolfin::real arg4 ;
  dolfin::real arg5 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:dGqMethod_residual",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__dGqMethod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dGqMethod_residual" "', argument " "1"" of type '" "dolfin::dGqMethod const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::dGqMethod * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dGqMethod_residual" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dGqMethod_residual" "', argument " "3"" of type '" "dolfin::real []""'"); 
  } 
  arg3 = reinterpret_cast<dolfin::real * >(argp3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "dGqMethod_residual" "', argument " "4"" of type '" "dolfin::real""'");
  } 
  arg4 = static_cast<dolfin::real >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "dGqMethod_residual" "', argument " "5"" of type '" "dolfin::real""'");
  } 
  arg5 = static_cast<dolfin::real >(val5);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::real)((dolfin::dGqMethod const *)arg1)->residual(arg2,arg3,arg4,arg5);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dGqMethod_timestep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::dGqMethod *arg1 = (dolfin::dGqMethod *) 0 ;
  dolfin::real arg2 ;
  dolfin::real arg3 ;
  dolfin::real arg4 ;
  dolfin::real arg5 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:dGqMethod_timestep",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__dGqMethod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dGqMethod_timestep" "', argument " "1"" of type '" "dolfin::dGqMethod const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::dGqMethod * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dGqMethod_timestep" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "dGqMethod_timestep" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "dGqMethod_timestep" "', argument " "4"" of type '" "dolfin::real""'");
  } 
  arg4 = static_cast<dolfin::real >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "dGqMethod_timestep" "', argument " "5"" of type '" "dolfin::real""'");
  } 
  arg5 = static_cast<dolfin::real >(val5);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::real)((dolfin::dGqMethod const *)arg1)->timestep(arg2,arg3,arg4,arg5);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dGqMethod_error(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::dGqMethod *arg1 = (dolfin::dGqMethod *) 0 ;
  dolfin::real arg2 ;
  dolfin::real arg3 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:dGqMethod_error",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__dGqMethod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dGqMethod_error" "', argument " "1"" of type '" "dolfin::dGqMethod const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::dGqMethod * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dGqMethod_error" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "dGqMethod_error" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::real)((dolfin::dGqMethod const *)arg1)->error(arg2,arg3);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dGqMethod_disp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::dGqMethod *arg1 = (dolfin::dGqMethod *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dGqMethod_disp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__dGqMethod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dGqMethod_disp" "', argument " "1"" of type '" "dolfin::dGqMethod const *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::dGqMethod * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    ((dolfin::dGqMethod const *)arg1)->disp();
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *dGqMethod_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__dGqMethod, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  dolfin::real arg2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:set",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "set" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "set" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  glueset(arg1,arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  int arg2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:set",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "set" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  glueset(arg1,arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_set__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  bool arg2 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:set",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "set" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast<bool >(val2);
  glueset(arg1,arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_set__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:set",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "set" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "set" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  glueset(arg1,arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_set(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_set__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_set__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_set__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_set__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'set'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  SwigValueWrapper<dolfin::Parameter > result;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:get",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "get" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = glueget(arg1);
  
  {
    {
      // Custom typemap
      
      switch ( (&result)->type() )
      {
      case Parameter::type_real:
        
        resultobj = SWIG_From_double(*&(result));
        break;
        
      case Parameter::type_int:
        
        resultobj = SWIG_From_int((int)*&(result));
        break;
        
      case Parameter::type_bool:
        
        resultobj = SWIG_From_bool(*&(result));
        break;
        
      case Parameter::type_string:
        
        resultobj = SWIG_From_std_string(*&(result));
        break;
        
      default:
        dolfin_error("Unknown type for parameter.");
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_assemble__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::LinearForm *arg1 = 0 ;
  dolfin::Vector *arg2 = 0 ;
  dolfin::Mesh *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:assemble",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__LinearForm,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "assemble" "', argument " "1"" of type '" "dolfin::LinearForm &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "assemble" "', argument " "1"" of type '" "dolfin::LinearForm &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::LinearForm * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "assemble" "', argument " "2"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "assemble" "', argument " "2"" of type '" "dolfin::Vector &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Mesh,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "assemble" "', argument " "3"" of type '" "dolfin::Mesh &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "assemble" "', argument " "3"" of type '" "dolfin::Mesh &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Mesh * >(argp3);
  assemble(*arg1,*arg2,*arg3);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_assemble__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::BilinearForm *arg1 = 0 ;
  dolfin::Matrix *arg2 = 0 ;
  dolfin::Mesh *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:assemble",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__BilinearForm,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "assemble" "', argument " "1"" of type '" "dolfin::BilinearForm &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "assemble" "', argument " "1"" of type '" "dolfin::BilinearForm &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::BilinearForm * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Matrix,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "assemble" "', argument " "2"" of type '" "dolfin::Matrix &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "assemble" "', argument " "2"" of type '" "dolfin::Matrix &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Matrix * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Mesh,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "assemble" "', argument " "3"" of type '" "dolfin::Mesh &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "assemble" "', argument " "3"" of type '" "dolfin::Mesh &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Mesh * >(argp3);
  assemble(*arg1,*arg2,*arg3);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_assemble(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__LinearForm, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dolfin__Vector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_dolfin__Mesh, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_assemble__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__BilinearForm, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dolfin__Matrix, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_dolfin__Mesh, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_assemble__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'assemble'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_applyBC__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = 0 ;
  dolfin::Mesh *arg2 = 0 ;
  dolfin::FiniteElement *arg3 = 0 ;
  dolfin::BoundaryCondition *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:applyBC",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "applyBC" "', argument " "1"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "applyBC" "', argument " "1"" of type '" "dolfin::Vector &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Mesh,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "applyBC" "', argument " "2"" of type '" "dolfin::Mesh &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "applyBC" "', argument " "2"" of type '" "dolfin::Mesh &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Mesh * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__FiniteElement,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "applyBC" "', argument " "3"" of type '" "dolfin::FiniteElement &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "applyBC" "', argument " "3"" of type '" "dolfin::FiniteElement &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::FiniteElement * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_dolfin__BoundaryCondition,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "applyBC" "', argument " "4"" of type '" "dolfin::BoundaryCondition &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "applyBC" "', argument " "4"" of type '" "dolfin::BoundaryCondition &""'"); 
  }
  arg4 = reinterpret_cast<dolfin::BoundaryCondition * >(argp4);
  applyBC(*arg1,*arg2,*arg3,*arg4);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_applyBC__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Matrix *arg1 = 0 ;
  dolfin::Mesh *arg2 = 0 ;
  dolfin::FiniteElement *arg3 = 0 ;
  dolfin::BoundaryCondition *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:applyBC",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Matrix,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "applyBC" "', argument " "1"" of type '" "dolfin::Matrix &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "applyBC" "', argument " "1"" of type '" "dolfin::Matrix &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Matrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Mesh,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "applyBC" "', argument " "2"" of type '" "dolfin::Mesh &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "applyBC" "', argument " "2"" of type '" "dolfin::Mesh &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Mesh * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__FiniteElement,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "applyBC" "', argument " "3"" of type '" "dolfin::FiniteElement &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "applyBC" "', argument " "3"" of type '" "dolfin::FiniteElement &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::FiniteElement * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_dolfin__BoundaryCondition,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "applyBC" "', argument " "4"" of type '" "dolfin::BoundaryCondition &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "applyBC" "', argument " "4"" of type '" "dolfin::BoundaryCondition &""'"); 
  }
  arg4 = reinterpret_cast<dolfin::BoundaryCondition * >(argp4);
  applyBC(*arg1,*arg2,*arg3,*arg4);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_applyBC(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Vector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dolfin__Mesh, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_dolfin__FiniteElement, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_dolfin__BoundaryCondition, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_applyBC__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Matrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dolfin__Mesh, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_dolfin__FiniteElement, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_dolfin__BoundaryCondition, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_applyBC__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'applyBC'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ElasticityUpdatedSolver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = 0 ;
  dolfin::Function *arg2 = 0 ;
  dolfin::Function *arg3 = 0 ;
  dolfin::Function *arg4 = 0 ;
  dolfin::real *arg5 = 0 ;
  dolfin::real *arg6 = 0 ;
  dolfin::real *arg7 = 0 ;
  dolfin::real *arg8 = 0 ;
  dolfin::BoundaryCondition *arg9 = 0 ;
  dolfin::real *arg10 = 0 ;
  dolfin::real *arg11 = 0 ;
  dolfin::ElasticityUpdatedSolver *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  void *argp11 = 0 ;
  int res11 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:new_ElasticityUpdatedSolver",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Mesh,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ElasticityUpdatedSolver" "', argument " "1"" of type '" "dolfin::Mesh &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ElasticityUpdatedSolver" "', argument " "1"" of type '" "dolfin::Mesh &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Function,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ElasticityUpdatedSolver" "', argument " "2"" of type '" "dolfin::Function &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ElasticityUpdatedSolver" "', argument " "2"" of type '" "dolfin::Function &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Function * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Function,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ElasticityUpdatedSolver" "', argument " "3"" of type '" "dolfin::Function &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ElasticityUpdatedSolver" "', argument " "3"" of type '" "dolfin::Function &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Function * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_dolfin__Function,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_ElasticityUpdatedSolver" "', argument " "4"" of type '" "dolfin::Function &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ElasticityUpdatedSolver" "', argument " "4"" of type '" "dolfin::Function &""'"); 
  }
  arg4 = reinterpret_cast<dolfin::Function * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_ElasticityUpdatedSolver" "', argument " "5"" of type '" "dolfin::real &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ElasticityUpdatedSolver" "', argument " "5"" of type '" "dolfin::real &""'"); 
  }
  arg5 = reinterpret_cast<dolfin::real * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_ElasticityUpdatedSolver" "', argument " "6"" of type '" "dolfin::real &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ElasticityUpdatedSolver" "', argument " "6"" of type '" "dolfin::real &""'"); 
  }
  arg6 = reinterpret_cast<dolfin::real * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_ElasticityUpdatedSolver" "', argument " "7"" of type '" "dolfin::real &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ElasticityUpdatedSolver" "', argument " "7"" of type '" "dolfin::real &""'"); 
  }
  arg7 = reinterpret_cast<dolfin::real * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "new_ElasticityUpdatedSolver" "', argument " "8"" of type '" "dolfin::real &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ElasticityUpdatedSolver" "', argument " "8"" of type '" "dolfin::real &""'"); 
  }
  arg8 = reinterpret_cast<dolfin::real * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9, SWIGTYPE_p_dolfin__BoundaryCondition,  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "new_ElasticityUpdatedSolver" "', argument " "9"" of type '" "dolfin::BoundaryCondition &""'"); 
  }
  if (!argp9) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ElasticityUpdatedSolver" "', argument " "9"" of type '" "dolfin::BoundaryCondition &""'"); 
  }
  arg9 = reinterpret_cast<dolfin::BoundaryCondition * >(argp9);
  res10 = SWIG_ConvertPtr(obj9, &argp10, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "new_ElasticityUpdatedSolver" "', argument " "10"" of type '" "dolfin::real &""'"); 
  }
  if (!argp10) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ElasticityUpdatedSolver" "', argument " "10"" of type '" "dolfin::real &""'"); 
  }
  arg10 = reinterpret_cast<dolfin::real * >(argp10);
  res11 = SWIG_ConvertPtr(obj10, &argp11, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "new_ElasticityUpdatedSolver" "', argument " "11"" of type '" "dolfin::real &""'"); 
  }
  if (!argp11) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ElasticityUpdatedSolver" "', argument " "11"" of type '" "dolfin::real &""'"); 
  }
  arg11 = reinterpret_cast<dolfin::real * >(argp11);
  result = (dolfin::ElasticityUpdatedSolver *)new dolfin::ElasticityUpdatedSolver(*arg1,*arg2,*arg3,*arg4,*arg5,*arg6,*arg7,*arg8,*arg9,*arg10,*arg11);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_init(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_init",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_init" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  (arg1)->init();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_solve__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_solve",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_solve" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  (arg1)->solve();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_step(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_step",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_step" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  (arg1)->step();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_oldstep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_oldstep",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_oldstep" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  (arg1)->oldstep();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_fu(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_fu",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_fu" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  (arg1)->fu();
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_gather(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Vector *arg2 = 0 ;
  dolfin::Vector *arg3 = 0 ;
  VecScatter *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ElasticityUpdatedSolver_gather",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_gather" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_gather" "', argument " "2"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_gather" "', argument " "2"" of type '" "dolfin::Vector &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ElasticityUpdatedSolver_gather" "', argument " "3"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_gather" "', argument " "3"" of type '" "dolfin::Vector &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Vector * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_VecScatter,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ElasticityUpdatedSolver_gather" "', argument " "4"" of type '" "VecScatter &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_gather" "', argument " "4"" of type '" "VecScatter &""'"); 
  }
  arg4 = reinterpret_cast<VecScatter * >(argp4);
  (arg1)->gather(*arg2,*arg3,*arg4);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_preparestep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_preparestep",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_preparestep" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->preparestep();
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_prepareiteration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_prepareiteration",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_prepareiteration" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->prepareiteration();
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_save(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Mesh *arg2 = 0 ;
  dolfin::File *arg3 = 0 ;
  dolfin::real arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ElasticityUpdatedSolver_save",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_save" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Mesh,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_save" "', argument " "2"" of type '" "dolfin::Mesh &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_save" "', argument " "2"" of type '" "dolfin::Mesh &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Mesh * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__File,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ElasticityUpdatedSolver_save" "', argument " "3"" of type '" "dolfin::File &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_save" "', argument " "3"" of type '" "dolfin::File &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::File * >(argp3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ElasticityUpdatedSolver_save" "', argument " "4"" of type '" "dolfin::real""'");
  } 
  arg4 = static_cast<dolfin::real >(val4);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->save(*arg2,*arg3,arg4);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_condsave(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Mesh *arg2 = 0 ;
  dolfin::File *arg3 = 0 ;
  dolfin::real arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ElasticityUpdatedSolver_condsave",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_condsave" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Mesh,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_condsave" "', argument " "2"" of type '" "dolfin::Mesh &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_condsave" "', argument " "2"" of type '" "dolfin::Mesh &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Mesh * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__File,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ElasticityUpdatedSolver_condsave" "', argument " "3"" of type '" "dolfin::File &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_condsave" "', argument " "3"" of type '" "dolfin::File &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::File * >(argp3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ElasticityUpdatedSolver_condsave" "', argument " "4"" of type '" "dolfin::real""'");
  } 
  arg4 = static_cast<dolfin::real >(val4);
  (arg1)->condsave(*arg2,*arg3,arg4);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_solve__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = 0 ;
  dolfin::Function *arg2 = 0 ;
  dolfin::Function *arg3 = 0 ;
  dolfin::Function *arg4 = 0 ;
  dolfin::real *arg5 = 0 ;
  dolfin::real *arg6 = 0 ;
  dolfin::real *arg7 = 0 ;
  dolfin::real *arg8 = 0 ;
  dolfin::BoundaryCondition *arg9 = 0 ;
  dolfin::real *arg10 = 0 ;
  dolfin::real *arg11 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  void *argp11 = 0 ;
  int res11 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:ElasticityUpdatedSolver_solve",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Mesh,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_solve" "', argument " "1"" of type '" "dolfin::Mesh &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_solve" "', argument " "1"" of type '" "dolfin::Mesh &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Function,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_solve" "', argument " "2"" of type '" "dolfin::Function &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_solve" "', argument " "2"" of type '" "dolfin::Function &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Function * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Function,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ElasticityUpdatedSolver_solve" "', argument " "3"" of type '" "dolfin::Function &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_solve" "', argument " "3"" of type '" "dolfin::Function &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Function * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_dolfin__Function,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ElasticityUpdatedSolver_solve" "', argument " "4"" of type '" "dolfin::Function &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_solve" "', argument " "4"" of type '" "dolfin::Function &""'"); 
  }
  arg4 = reinterpret_cast<dolfin::Function * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ElasticityUpdatedSolver_solve" "', argument " "5"" of type '" "dolfin::real &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_solve" "', argument " "5"" of type '" "dolfin::real &""'"); 
  }
  arg5 = reinterpret_cast<dolfin::real * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ElasticityUpdatedSolver_solve" "', argument " "6"" of type '" "dolfin::real &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_solve" "', argument " "6"" of type '" "dolfin::real &""'"); 
  }
  arg6 = reinterpret_cast<dolfin::real * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "ElasticityUpdatedSolver_solve" "', argument " "7"" of type '" "dolfin::real &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_solve" "', argument " "7"" of type '" "dolfin::real &""'"); 
  }
  arg7 = reinterpret_cast<dolfin::real * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "ElasticityUpdatedSolver_solve" "', argument " "8"" of type '" "dolfin::real &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_solve" "', argument " "8"" of type '" "dolfin::real &""'"); 
  }
  arg8 = reinterpret_cast<dolfin::real * >(argp8);
  res9 = SWIG_ConvertPtr(obj8, &argp9, SWIGTYPE_p_dolfin__BoundaryCondition,  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "ElasticityUpdatedSolver_solve" "', argument " "9"" of type '" "dolfin::BoundaryCondition &""'"); 
  }
  if (!argp9) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_solve" "', argument " "9"" of type '" "dolfin::BoundaryCondition &""'"); 
  }
  arg9 = reinterpret_cast<dolfin::BoundaryCondition * >(argp9);
  res10 = SWIG_ConvertPtr(obj9, &argp10, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "ElasticityUpdatedSolver_solve" "', argument " "10"" of type '" "dolfin::real &""'"); 
  }
  if (!argp10) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_solve" "', argument " "10"" of type '" "dolfin::real &""'"); 
  }
  arg10 = reinterpret_cast<dolfin::real * >(argp10);
  res11 = SWIG_ConvertPtr(obj10, &argp11, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "ElasticityUpdatedSolver_solve" "', argument " "11"" of type '" "dolfin::real &""'"); 
  }
  if (!argp11) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_solve" "', argument " "11"" of type '" "dolfin::real &""'"); 
  }
  arg11 = reinterpret_cast<dolfin::real * >(argp11);
  dolfin::ElasticityUpdatedSolver::solve(*arg1,*arg2,*arg3,*arg4,*arg5,*arg6,*arg7,*arg8,*arg9,*arg10,*arg11);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_solve(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[12];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 11); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ElasticityUpdatedSolver_solve__SWIG_0(self, args);
    }
  }
  if (argc == 11) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_dolfin__Mesh, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_dolfin__Function, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_dolfin__Function, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_dolfin__Function, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_double, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_double, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_dolfin__BoundaryCondition, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      void *vptr = 0;
                      int res = SWIG_ConvertPtr(argv[9], &vptr, SWIGTYPE_p_double, 0);
                      _v = SWIG_CheckState(res);
                      if (_v) {
                        void *vptr = 0;
                        int res = SWIG_ConvertPtr(argv[10], &vptr, SWIGTYPE_p_double, 0);
                        _v = SWIG_CheckState(res);
                        if (_v) {
                          return _wrap_ElasticityUpdatedSolver_solve__SWIG_1(self, args);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'ElasticityUpdatedSolver_solve'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_finterpolate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Function *arg1 = 0 ;
  dolfin::Function *arg2 = 0 ;
  dolfin::Mesh *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ElasticityUpdatedSolver_finterpolate",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Function,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_finterpolate" "', argument " "1"" of type '" "dolfin::Function &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_finterpolate" "', argument " "1"" of type '" "dolfin::Function &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Function * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Function,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_finterpolate" "', argument " "2"" of type '" "dolfin::Function &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_finterpolate" "', argument " "2"" of type '" "dolfin::Function &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Function * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Mesh,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ElasticityUpdatedSolver_finterpolate" "', argument " "3"" of type '" "dolfin::Mesh &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_finterpolate" "', argument " "3"" of type '" "dolfin::Mesh &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Mesh * >(argp3);
  dolfin::ElasticityUpdatedSolver::finterpolate(*arg1,*arg2,*arg3);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_plasticity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = 0 ;
  dolfin::Vector *arg2 = 0 ;
  dolfin::real arg3 ;
  dolfin::FiniteElement *arg4 = 0 ;
  dolfin::Mesh *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ElasticityUpdatedSolver_plasticity",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_plasticity" "', argument " "1"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_plasticity" "', argument " "1"" of type '" "dolfin::Vector &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_plasticity" "', argument " "2"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_plasticity" "', argument " "2"" of type '" "dolfin::Vector &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ElasticityUpdatedSolver_plasticity" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_dolfin__FiniteElement,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ElasticityUpdatedSolver_plasticity" "', argument " "4"" of type '" "dolfin::FiniteElement &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_plasticity" "', argument " "4"" of type '" "dolfin::FiniteElement &""'"); 
  }
  arg4 = reinterpret_cast<dolfin::FiniteElement * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_dolfin__Mesh,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ElasticityUpdatedSolver_plasticity" "', argument " "5"" of type '" "dolfin::Mesh &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_plasticity" "', argument " "5"" of type '" "dolfin::Mesh &""'"); 
  }
  arg5 = reinterpret_cast<dolfin::Mesh * >(argp5);
  dolfin::ElasticityUpdatedSolver::plasticity(*arg1,*arg2,arg3,*arg4,*arg5);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_initmsigma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = 0 ;
  dolfin::FiniteElement *arg2 = 0 ;
  dolfin::Mesh *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ElasticityUpdatedSolver_initmsigma",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_initmsigma" "', argument " "1"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_initmsigma" "', argument " "1"" of type '" "dolfin::Vector &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__FiniteElement,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_initmsigma" "', argument " "2"" of type '" "dolfin::FiniteElement &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_initmsigma" "', argument " "2"" of type '" "dolfin::FiniteElement &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::FiniteElement * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Mesh,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ElasticityUpdatedSolver_initmsigma" "', argument " "3"" of type '" "dolfin::Mesh &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_initmsigma" "', argument " "3"" of type '" "dolfin::Mesh &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Mesh * >(argp3);
  dolfin::ElasticityUpdatedSolver::initmsigma(*arg1,*arg2,*arg3);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_initu0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = 0 ;
  dolfin::FiniteElement *arg2 = 0 ;
  dolfin::Mesh *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ElasticityUpdatedSolver_initu0",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_initu0" "', argument " "1"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_initu0" "', argument " "1"" of type '" "dolfin::Vector &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__FiniteElement,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_initu0" "', argument " "2"" of type '" "dolfin::FiniteElement &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_initu0" "', argument " "2"" of type '" "dolfin::FiniteElement &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::FiniteElement * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Mesh,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ElasticityUpdatedSolver_initu0" "', argument " "3"" of type '" "dolfin::Mesh &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_initu0" "', argument " "3"" of type '" "dolfin::Mesh &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Mesh * >(argp3);
  dolfin::ElasticityUpdatedSolver::initu0(*arg1,*arg2,*arg3);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_initJ0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = 0 ;
  dolfin::FiniteElement *arg2 = 0 ;
  dolfin::Mesh *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ElasticityUpdatedSolver_initJ0",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_initJ0" "', argument " "1"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_initJ0" "', argument " "1"" of type '" "dolfin::Vector &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__FiniteElement,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_initJ0" "', argument " "2"" of type '" "dolfin::FiniteElement &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_initJ0" "', argument " "2"" of type '" "dolfin::FiniteElement &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::FiniteElement * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Mesh,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ElasticityUpdatedSolver_initJ0" "', argument " "3"" of type '" "dolfin::Mesh &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_initJ0" "', argument " "3"" of type '" "dolfin::Mesh &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Mesh * >(argp3);
  dolfin::ElasticityUpdatedSolver::initJ0(*arg1,*arg2,*arg3);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_computeJ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = 0 ;
  dolfin::Vector *arg2 = 0 ;
  dolfin::Vector *arg3 = 0 ;
  dolfin::FiniteElement *arg4 = 0 ;
  dolfin::Mesh *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ElasticityUpdatedSolver_computeJ",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_computeJ" "', argument " "1"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_computeJ" "', argument " "1"" of type '" "dolfin::Vector &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_computeJ" "', argument " "2"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_computeJ" "', argument " "2"" of type '" "dolfin::Vector &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ElasticityUpdatedSolver_computeJ" "', argument " "3"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_computeJ" "', argument " "3"" of type '" "dolfin::Vector &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Vector * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_dolfin__FiniteElement,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ElasticityUpdatedSolver_computeJ" "', argument " "4"" of type '" "dolfin::FiniteElement &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_computeJ" "', argument " "4"" of type '" "dolfin::FiniteElement &""'"); 
  }
  arg4 = reinterpret_cast<dolfin::FiniteElement * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_dolfin__Mesh,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ElasticityUpdatedSolver_computeJ" "', argument " "5"" of type '" "dolfin::Mesh &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_computeJ" "', argument " "5"" of type '" "dolfin::Mesh &""'"); 
  }
  arg5 = reinterpret_cast<dolfin::Mesh * >(argp5);
  dolfin::ElasticityUpdatedSolver::computeJ(*arg1,*arg2,*arg3,*arg4,*arg5);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_initF0Green(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = 0 ;
  dolfin::FiniteElement *arg2 = 0 ;
  dolfin::Mesh *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ElasticityUpdatedSolver_initF0Green",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_initF0Green" "', argument " "1"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_initF0Green" "', argument " "1"" of type '" "dolfin::Vector &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__FiniteElement,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_initF0Green" "', argument " "2"" of type '" "dolfin::FiniteElement &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_initF0Green" "', argument " "2"" of type '" "dolfin::FiniteElement &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::FiniteElement * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Mesh,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ElasticityUpdatedSolver_initF0Green" "', argument " "3"" of type '" "dolfin::Mesh &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_initF0Green" "', argument " "3"" of type '" "dolfin::Mesh &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Mesh * >(argp3);
  dolfin::ElasticityUpdatedSolver::initF0Green(*arg1,*arg2,*arg3);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_computeFGreen(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = 0 ;
  dolfin::Vector *arg2 = 0 ;
  dolfin::Vector *arg3 = 0 ;
  dolfin::FiniteElement *arg4 = 0 ;
  dolfin::Mesh *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ElasticityUpdatedSolver_computeFGreen",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_computeFGreen" "', argument " "1"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_computeFGreen" "', argument " "1"" of type '" "dolfin::Vector &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_computeFGreen" "', argument " "2"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_computeFGreen" "', argument " "2"" of type '" "dolfin::Vector &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ElasticityUpdatedSolver_computeFGreen" "', argument " "3"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_computeFGreen" "', argument " "3"" of type '" "dolfin::Vector &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Vector * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_dolfin__FiniteElement,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ElasticityUpdatedSolver_computeFGreen" "', argument " "4"" of type '" "dolfin::FiniteElement &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_computeFGreen" "', argument " "4"" of type '" "dolfin::FiniteElement &""'"); 
  }
  arg4 = reinterpret_cast<dolfin::FiniteElement * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_dolfin__Mesh,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ElasticityUpdatedSolver_computeFGreen" "', argument " "5"" of type '" "dolfin::Mesh &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_computeFGreen" "', argument " "5"" of type '" "dolfin::Mesh &""'"); 
  }
  arg5 = reinterpret_cast<dolfin::Mesh * >(argp5);
  dolfin::ElasticityUpdatedSolver::computeFGreen(*arg1,*arg2,*arg3,*arg4,*arg5);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_initF0Euler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = 0 ;
  dolfin::FiniteElement *arg2 = 0 ;
  dolfin::Mesh *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ElasticityUpdatedSolver_initF0Euler",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_initF0Euler" "', argument " "1"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_initF0Euler" "', argument " "1"" of type '" "dolfin::Vector &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__FiniteElement,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_initF0Euler" "', argument " "2"" of type '" "dolfin::FiniteElement &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_initF0Euler" "', argument " "2"" of type '" "dolfin::FiniteElement &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::FiniteElement * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Mesh,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ElasticityUpdatedSolver_initF0Euler" "', argument " "3"" of type '" "dolfin::Mesh &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_initF0Euler" "', argument " "3"" of type '" "dolfin::Mesh &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Mesh * >(argp3);
  dolfin::ElasticityUpdatedSolver::initF0Euler(*arg1,*arg2,*arg3);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_computeFEuler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = 0 ;
  dolfin::Vector *arg2 = 0 ;
  dolfin::Vector *arg3 = 0 ;
  dolfin::FiniteElement *arg4 = 0 ;
  dolfin::Mesh *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ElasticityUpdatedSolver_computeFEuler",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_computeFEuler" "', argument " "1"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_computeFEuler" "', argument " "1"" of type '" "dolfin::Vector &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_computeFEuler" "', argument " "2"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_computeFEuler" "', argument " "2"" of type '" "dolfin::Vector &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ElasticityUpdatedSolver_computeFEuler" "', argument " "3"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_computeFEuler" "', argument " "3"" of type '" "dolfin::Vector &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Vector * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_dolfin__FiniteElement,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ElasticityUpdatedSolver_computeFEuler" "', argument " "4"" of type '" "dolfin::FiniteElement &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_computeFEuler" "', argument " "4"" of type '" "dolfin::FiniteElement &""'"); 
  }
  arg4 = reinterpret_cast<dolfin::FiniteElement * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_dolfin__Mesh,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ElasticityUpdatedSolver_computeFEuler" "', argument " "5"" of type '" "dolfin::Mesh &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_computeFEuler" "', argument " "5"" of type '" "dolfin::Mesh &""'"); 
  }
  arg5 = reinterpret_cast<dolfin::Mesh * >(argp5);
  dolfin::ElasticityUpdatedSolver::computeFEuler(*arg1,*arg2,*arg3,*arg4,*arg5);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_computeFBEuler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = 0 ;
  dolfin::Vector *arg2 = 0 ;
  dolfin::Vector *arg3 = 0 ;
  dolfin::Vector *arg4 = 0 ;
  dolfin::FiniteElement *arg5 = 0 ;
  dolfin::Mesh *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:ElasticityUpdatedSolver_computeFBEuler",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_computeFBEuler" "', argument " "1"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_computeFBEuler" "', argument " "1"" of type '" "dolfin::Vector &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_computeFBEuler" "', argument " "2"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_computeFBEuler" "', argument " "2"" of type '" "dolfin::Vector &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ElasticityUpdatedSolver_computeFBEuler" "', argument " "3"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_computeFBEuler" "', argument " "3"" of type '" "dolfin::Vector &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Vector * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ElasticityUpdatedSolver_computeFBEuler" "', argument " "4"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_computeFBEuler" "', argument " "4"" of type '" "dolfin::Vector &""'"); 
  }
  arg4 = reinterpret_cast<dolfin::Vector * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_dolfin__FiniteElement,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ElasticityUpdatedSolver_computeFBEuler" "', argument " "5"" of type '" "dolfin::FiniteElement &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_computeFBEuler" "', argument " "5"" of type '" "dolfin::FiniteElement &""'"); 
  }
  arg5 = reinterpret_cast<dolfin::FiniteElement * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_dolfin__Mesh,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ElasticityUpdatedSolver_computeFBEuler" "', argument " "6"" of type '" "dolfin::Mesh &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_computeFBEuler" "', argument " "6"" of type '" "dolfin::Mesh &""'"); 
  }
  arg6 = reinterpret_cast<dolfin::Mesh * >(argp6);
  dolfin::ElasticityUpdatedSolver::computeFBEuler(*arg1,*arg2,*arg3,*arg4,*arg5,*arg6);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_computeBEuler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Vector *arg1 = 0 ;
  dolfin::Vector *arg2 = 0 ;
  dolfin::FiniteElement *arg3 = 0 ;
  dolfin::Mesh *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ElasticityUpdatedSolver_computeBEuler",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_computeBEuler" "', argument " "1"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_computeBEuler" "', argument " "1"" of type '" "dolfin::Vector &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Vector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_computeBEuler" "', argument " "2"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_computeBEuler" "', argument " "2"" of type '" "dolfin::Vector &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__FiniteElement,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ElasticityUpdatedSolver_computeBEuler" "', argument " "3"" of type '" "dolfin::FiniteElement &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_computeBEuler" "', argument " "3"" of type '" "dolfin::FiniteElement &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::FiniteElement * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_dolfin__Mesh,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ElasticityUpdatedSolver_computeBEuler" "', argument " "4"" of type '" "dolfin::Mesh &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_computeBEuler" "', argument " "4"" of type '" "dolfin::Mesh &""'"); 
  }
  arg4 = reinterpret_cast<dolfin::Mesh * >(argp4);
  dolfin::ElasticityUpdatedSolver::computeBEuler(*arg1,*arg2,*arg3,*arg4);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_multF(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::real *arg1 = (dolfin::real *) 0 ;
  dolfin::real *arg2 = (dolfin::real *) 0 ;
  dolfin::real *arg3 = (dolfin::real *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ElasticityUpdatedSolver_multF",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_multF" "', argument " "1"" of type '" "dolfin::real *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::real * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_multF" "', argument " "2"" of type '" "dolfin::real *""'"); 
  }
  arg2 = reinterpret_cast<dolfin::real * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ElasticityUpdatedSolver_multF" "', argument " "3"" of type '" "dolfin::real *""'"); 
  }
  arg3 = reinterpret_cast<dolfin::real * >(argp3);
  dolfin::ElasticityUpdatedSolver::multF(arg1,arg2,arg3);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_multB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::real *arg1 = (dolfin::real *) 0 ;
  dolfin::real *arg2 = (dolfin::real *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_multB",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_multB" "', argument " "1"" of type '" "dolfin::real *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::real * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_multB" "', argument " "2"" of type '" "dolfin::real *""'"); 
  }
  arg2 = reinterpret_cast<dolfin::real * >(argp2);
  dolfin::ElasticityUpdatedSolver::multB(arg1,arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_deform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::Mesh *arg1 = 0 ;
  dolfin::Function *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_deform",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__Mesh,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_deform" "', argument " "1"" of type '" "dolfin::Mesh &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_deform" "', argument " "1"" of type '" "dolfin::Mesh &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::Mesh * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Function,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_deform" "', argument " "2"" of type '" "dolfin::Function &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_deform" "', argument " "2"" of type '" "dolfin::Function &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Function * >(argp2);
  dolfin::ElasticityUpdatedSolver::deform(*arg1,*arg2);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_mesh_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Mesh *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_mesh_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_mesh_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Mesh,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_mesh_set" "', argument " "2"" of type '" "dolfin::Mesh &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_mesh_set" "', argument " "2"" of type '" "dolfin::Mesh &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Mesh * >(argp2);
  if (arg1) (arg1)->mesh = *arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_mesh_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Mesh *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_mesh_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_mesh_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  {
    dolfin::Mesh &_result_ref = (dolfin::Mesh &) ((arg1)->mesh);
    result = (dolfin::Mesh *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Mesh, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_f_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Function *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_f_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_f_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Function,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_f_set" "', argument " "2"" of type '" "dolfin::Function &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_f_set" "', argument " "2"" of type '" "dolfin::Function &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Function * >(argp2);
  if (arg1) (arg1)->f = *arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_f_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Function *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_f_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_f_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  {
    dolfin::Function &_result_ref = (dolfin::Function &) ((arg1)->f);
    result = (dolfin::Function *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Function, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_v0_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Function *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_v0_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_v0_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Function,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_v0_set" "', argument " "2"" of type '" "dolfin::Function &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_v0_set" "', argument " "2"" of type '" "dolfin::Function &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Function * >(argp2);
  if (arg1) (arg1)->v0 = *arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_v0_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Function *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_v0_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_v0_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  {
    dolfin::Function &_result_ref = (dolfin::Function &) ((arg1)->v0);
    result = (dolfin::Function *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Function, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_rho_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Function *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_rho_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_rho_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__Function,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_rho_set" "', argument " "2"" of type '" "dolfin::Function &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_rho_set" "', argument " "2"" of type '" "dolfin::Function &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Function * >(argp2);
  if (arg1) (arg1)->rho = *arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_rho_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Function *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_rho_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_rho_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  {
    dolfin::Function &_result_ref = (dolfin::Function &) ((arg1)->rho);
    result = (dolfin::Function *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Function, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_E_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_E_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_E_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElasticityUpdatedSolver_E_set" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  if (arg1) (arg1)->E = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_E_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_E_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_E_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::real) ((arg1)->E);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_nu_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_nu_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_nu_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElasticityUpdatedSolver_nu_set" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  if (arg1) (arg1)->nu = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_nu_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_nu_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_nu_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::real) ((arg1)->nu);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_nuv_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_nuv_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_nuv_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElasticityUpdatedSolver_nuv_set" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  if (arg1) (arg1)->nuv = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_nuv_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_nuv_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_nuv_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::real) ((arg1)->nuv);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_nuplast_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_nuplast_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_nuplast_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElasticityUpdatedSolver_nuplast_set" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  if (arg1) (arg1)->nuplast = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_nuplast_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_nuplast_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_nuplast_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::real) ((arg1)->nuplast);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_bc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::BoundaryCondition *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_bc_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_bc_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__BoundaryCondition,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_bc_set" "', argument " "2"" of type '" "dolfin::BoundaryCondition &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_bc_set" "', argument " "2"" of type '" "dolfin::BoundaryCondition &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::BoundaryCondition * >(argp2);
  if (arg1) (arg1)->bc = *arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_bc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::BoundaryCondition *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_bc_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_bc_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  {
    dolfin::BoundaryCondition &_result_ref = (dolfin::BoundaryCondition &) ((arg1)->bc);
    result = (dolfin::BoundaryCondition *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__BoundaryCondition, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_k_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_k_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_k_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElasticityUpdatedSolver_k_set" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  if (arg1) (arg1)->k = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_k_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_k_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_k_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::real) ((arg1)->k);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_T_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_T_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_T_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElasticityUpdatedSolver_T_set" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  if (arg1) (arg1)->T = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_T_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_T_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_T_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::real) ((arg1)->T);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_counter_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_counter_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_counter_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElasticityUpdatedSolver_counter_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  if (arg1) (arg1)->counter = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_counter_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_counter_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_counter_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (int) ((arg1)->counter);
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_lastsample_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_lastsample_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_lastsample_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElasticityUpdatedSolver_lastsample_set" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  if (arg1) (arg1)->lastsample = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_lastsample_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_lastsample_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_lastsample_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::real) ((arg1)->lastsample);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver__lambda_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver__lambda_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver__lambda_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElasticityUpdatedSolver__lambda_set" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  if (arg1) (arg1)->lambda = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver__lambda_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver__lambda_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver__lambda_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::real) ((arg1)->lambda);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_mu_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_mu_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_mu_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElasticityUpdatedSolver_mu_set" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  if (arg1) (arg1)->mu = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_mu_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_mu_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_mu_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::real) ((arg1)->mu);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_t_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_t_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_t_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElasticityUpdatedSolver_t_set" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  if (arg1) (arg1)->t = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_t_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_t_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_t_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::real) ((arg1)->t);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_rtol_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_rtol_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_rtol_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElasticityUpdatedSolver_rtol_set" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  if (arg1) (arg1)->rtol = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_rtol_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_rtol_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_rtol_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::real) ((arg1)->rtol);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_maxiters_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_maxiters_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_maxiters_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElasticityUpdatedSolver_maxiters_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  if (arg1) (arg1)->maxiters = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_maxiters_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_maxiters_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_maxiters_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (int) ((arg1)->maxiters);
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_do_plasticity_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_do_plasticity_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_do_plasticity_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElasticityUpdatedSolver_do_plasticity_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast<bool >(val2);
  if (arg1) (arg1)->do_plasticity = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_do_plasticity_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_do_plasticity_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_do_plasticity_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (bool) ((arg1)->do_plasticity);
  
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver__yield_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver__yield_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver__yield_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElasticityUpdatedSolver__yield_set" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  if (arg1) (arg1)->yield = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver__yield_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver__yield_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver__yield_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::real) ((arg1)->yield);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_savesamplefreq_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_savesamplefreq_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_savesamplefreq_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElasticityUpdatedSolver_savesamplefreq_set" "', argument " "2"" of type '" "dolfin::real""'");
  } 
  arg2 = static_cast<dolfin::real >(val2);
  if (arg1) (arg1)->savesamplefreq = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_savesamplefreq_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_savesamplefreq_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_savesamplefreq_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::real) ((arg1)->savesamplefreq);
  
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_fevals_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_fevals_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_fevals_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElasticityUpdatedSolver_fevals_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  if (arg1) (arg1)->fevals = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_fevals_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_fevals_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_fevals_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (int) ((arg1)->fevals);
  
  resultobj = SWIG_From_int(static_cast<int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_Nv_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::uint arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_Nv_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_Nv_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElasticityUpdatedSolver_Nv_set" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  if (arg1) (arg1)->Nv = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_Nv_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_Nv_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_Nv_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::uint) ((arg1)->Nv);
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_Nsigma_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::uint arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_Nsigma_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_Nsigma_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElasticityUpdatedSolver_Nsigma_set" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  if (arg1) (arg1)->Nsigma = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_Nsigma_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_Nsigma_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_Nsigma_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::uint) ((arg1)->Nsigma);
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_Nsigmanorm_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::uint arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_Nsigmanorm_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_Nsigmanorm_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElasticityUpdatedSolver_Nsigmanorm_set" "', argument " "2"" of type '" "dolfin::uint""'");
  } 
  arg2 = static_cast<dolfin::uint >(val2);
  if (arg1) (arg1)->Nsigmanorm = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_Nsigmanorm_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::uint result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_Nsigmanorm_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_Nsigmanorm_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::uint) ((arg1)->Nsigmanorm);
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_ode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::ElasticityUpdatedODE *arg2 = (dolfin::ElasticityUpdatedODE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_ode_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_ode_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_dolfin__ElasticityUpdatedODE, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_ode_set" "', argument " "2"" of type '" "dolfin::ElasticityUpdatedODE *""'"); 
  }
  arg2 = reinterpret_cast<dolfin::ElasticityUpdatedODE * >(argp2);
  if (arg1) (arg1)->ode = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_ode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::ElasticityUpdatedODE *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_ode_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_ode_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::ElasticityUpdatedODE *) ((arg1)->ode);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__ElasticityUpdatedODE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_ts_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::TimeStepper *arg2 = (dolfin::TimeStepper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_ts_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_ts_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_dolfin__TimeStepper, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_ts_set" "', argument " "2"" of type '" "dolfin::TimeStepper *""'"); 
  }
  arg2 = reinterpret_cast<dolfin::TimeStepper * >(argp2);
  if (arg1) (arg1)->ts = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_ts_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::TimeStepper *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_ts_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_ts_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::TimeStepper *) ((arg1)->ts);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__TimeStepper, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_element1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::FiniteElement *arg2 = (dolfin::FiniteElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_element1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_element1_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_dolfin__FiniteElement, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_element1_set" "', argument " "2"" of type '" "dolfin::FiniteElement *""'"); 
  }
  arg2 = reinterpret_cast<dolfin::FiniteElement * >(argp2);
  if (arg1) (arg1)->element1 = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_element1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::FiniteElement *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_element1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_element1_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::FiniteElement *) ((arg1)->element1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_element2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::FiniteElement *arg2 = (dolfin::FiniteElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_element2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_element2_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_dolfin__FiniteElement, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_element2_set" "', argument " "2"" of type '" "dolfin::FiniteElement *""'"); 
  }
  arg2 = reinterpret_cast<dolfin::FiniteElement * >(argp2);
  if (arg1) (arg1)->element2 = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_element2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::FiniteElement *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_element2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_element2_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::FiniteElement *) ((arg1)->element2);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_element3_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::FiniteElement *arg2 = (dolfin::FiniteElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_element3_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_element3_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_dolfin__FiniteElement, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_element3_set" "', argument " "2"" of type '" "dolfin::FiniteElement *""'"); 
  }
  arg2 = reinterpret_cast<dolfin::FiniteElement * >(argp2);
  if (arg1) (arg1)->element3 = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_element3_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::FiniteElement *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_element3_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_element3_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::FiniteElement *) ((arg1)->element3);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__FiniteElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_x1_0_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Vector *arg2 = (dolfin::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_x1_0_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_x1_0_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_x1_0_set" "', argument " "2"" of type '" "dolfin::Vector *""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  if (arg1) (arg1)->x1_0 = *arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_x1_0_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Vector *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_x1_0_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_x1_0_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::Vector *)& ((arg1)->x1_0);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_x1_1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Vector *arg2 = (dolfin::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_x1_1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_x1_1_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_x1_1_set" "', argument " "2"" of type '" "dolfin::Vector *""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  if (arg1) (arg1)->x1_1 = *arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_x1_1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Vector *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_x1_1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_x1_1_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::Vector *)& ((arg1)->x1_1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_x2_0_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Vector *arg2 = (dolfin::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_x2_0_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_x2_0_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_x2_0_set" "', argument " "2"" of type '" "dolfin::Vector *""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  if (arg1) (arg1)->x2_0 = *arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_x2_0_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Vector *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_x2_0_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_x2_0_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::Vector *)& ((arg1)->x2_0);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_x2_1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Vector *arg2 = (dolfin::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_x2_1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_x2_1_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_x2_1_set" "', argument " "2"" of type '" "dolfin::Vector *""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  if (arg1) (arg1)->x2_1 = *arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_x2_1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Vector *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_x2_1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_x2_1_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::Vector *)& ((arg1)->x2_1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_b_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Vector *arg2 = (dolfin::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_b_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_b_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_b_set" "', argument " "2"" of type '" "dolfin::Vector *""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  if (arg1) (arg1)->b = *arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_b_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Vector *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_b_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_b_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::Vector *)& ((arg1)->b);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_m_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Vector *arg2 = (dolfin::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_m_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_m_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_m_set" "', argument " "2"" of type '" "dolfin::Vector *""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  if (arg1) (arg1)->m = *arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_m_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Vector *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_m_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_m_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::Vector *)& ((arg1)->m);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_msigma_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Vector *arg2 = (dolfin::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_msigma_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_msigma_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_msigma_set" "', argument " "2"" of type '" "dolfin::Vector *""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  if (arg1) (arg1)->msigma = *arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_msigma_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Vector *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_msigma_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_msigma_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::Vector *)& ((arg1)->msigma);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_stepresidual_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Vector *arg2 = (dolfin::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_stepresidual_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_stepresidual_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_stepresidual_set" "', argument " "2"" of type '" "dolfin::Vector *""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  if (arg1) (arg1)->stepresidual = *arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_stepresidual_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Vector *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_stepresidual_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_stepresidual_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::Vector *)& ((arg1)->stepresidual);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_xsigma0_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Vector *arg2 = (dolfin::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_xsigma0_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_xsigma0_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_xsigma0_set" "', argument " "2"" of type '" "dolfin::Vector *""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  if (arg1) (arg1)->xsigma0 = *arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_xsigma0_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Vector *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_xsigma0_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_xsigma0_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::Vector *)& ((arg1)->xsigma0);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_xsigma1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Vector *arg2 = (dolfin::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_xsigma1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_xsigma1_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_xsigma1_set" "', argument " "2"" of type '" "dolfin::Vector *""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  if (arg1) (arg1)->xsigma1 = *arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_xsigma1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Vector *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_xsigma1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_xsigma1_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::Vector *)& ((arg1)->xsigma1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_xepsilon1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Vector *arg2 = (dolfin::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_xepsilon1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_xepsilon1_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_xepsilon1_set" "', argument " "2"" of type '" "dolfin::Vector *""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  if (arg1) (arg1)->xepsilon1 = *arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_xepsilon1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Vector *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_xepsilon1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_xepsilon1_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::Vector *)& ((arg1)->xepsilon1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_xsigmanorm_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Vector *arg2 = (dolfin::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_xsigmanorm_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_xsigmanorm_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_xsigmanorm_set" "', argument " "2"" of type '" "dolfin::Vector *""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  if (arg1) (arg1)->xsigmanorm = *arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_xsigmanorm_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Vector *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_xsigmanorm_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_xsigmanorm_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::Vector *)& ((arg1)->xsigmanorm);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_xjaumann1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Vector *arg2 = (dolfin::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_xjaumann1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_xjaumann1_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_xjaumann1_set" "', argument " "2"" of type '" "dolfin::Vector *""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  if (arg1) (arg1)->xjaumann1 = *arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_xjaumann1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Vector *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_xjaumann1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_xjaumann1_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::Vector *)& ((arg1)->xjaumann1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_xtmp1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Vector *arg2 = (dolfin::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_xtmp1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_xtmp1_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_xtmp1_set" "', argument " "2"" of type '" "dolfin::Vector *""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  if (arg1) (arg1)->xtmp1 = *arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_xtmp1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Vector *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_xtmp1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_xtmp1_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::Vector *)& ((arg1)->xtmp1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_xtmp2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Vector *arg2 = (dolfin::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_xtmp2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_xtmp2_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_xtmp2_set" "', argument " "2"" of type '" "dolfin::Vector *""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  if (arg1) (arg1)->xtmp2 = *arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_xtmp2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Vector *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_xtmp2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_xtmp2_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::Vector *)& ((arg1)->xtmp2);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_xsigmatmp1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Vector *arg2 = (dolfin::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_xsigmatmp1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_xsigmatmp1_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_xsigmatmp1_set" "', argument " "2"" of type '" "dolfin::Vector *""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  if (arg1) (arg1)->xsigmatmp1 = *arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_xsigmatmp1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Vector *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_xsigmatmp1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_xsigmatmp1_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::Vector *)& ((arg1)->xsigmatmp1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_xsigmatmp2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Vector *arg2 = (dolfin::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_xsigmatmp2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_xsigmatmp2_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_xsigmatmp2_set" "', argument " "2"" of type '" "dolfin::Vector *""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  if (arg1) (arg1)->xsigmatmp2 = *arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_xsigmatmp2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Vector *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_xsigmatmp2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_xsigmatmp2_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::Vector *)& ((arg1)->xsigmatmp2);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_fcontact_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Vector *arg2 = (dolfin::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_fcontact_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_fcontact_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_fcontact_set" "', argument " "2"" of type '" "dolfin::Vector *""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  if (arg1) (arg1)->fcontact = *arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_fcontact_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Vector *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_fcontact_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_fcontact_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::Vector *)& ((arg1)->fcontact);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_Dummy_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Matrix *arg2 = (dolfin::Matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_Dummy_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_Dummy_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_dolfin__Matrix, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_Dummy_set" "', argument " "2"" of type '" "dolfin::Matrix *""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Matrix * >(argp2);
  if (arg1) (arg1)->Dummy = *arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_Dummy_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Matrix *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_Dummy_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_Dummy_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::Matrix *)& ((arg1)->Dummy);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Matrix, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_dotu_x1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Vector *arg2 = (dolfin::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_dotu_x1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_dotu_x1_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_dotu_x1_set" "', argument " "2"" of type '" "dolfin::Vector *""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  if (arg1) (arg1)->dotu_x1 = *arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_dotu_x1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Vector *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_dotu_x1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_dotu_x1_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::Vector *)& ((arg1)->dotu_x1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_dotu_x2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Vector *arg2 = (dolfin::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_dotu_x2_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_dotu_x2_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_dotu_x2_set" "', argument " "2"" of type '" "dolfin::Vector *""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  if (arg1) (arg1)->dotu_x2 = *arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_dotu_x2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Vector *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_dotu_x2_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_dotu_x2_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::Vector *)& ((arg1)->dotu_x2);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_dotu_xsigma_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Vector *arg2 = (dolfin::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_dotu_xsigma_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_dotu_xsigma_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_dotu_xsigma_set" "', argument " "2"" of type '" "dolfin::Vector *""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  if (arg1) (arg1)->dotu_xsigma = *arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_dotu_xsigma_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Vector *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_dotu_xsigma_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_dotu_xsigma_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::Vector *)& ((arg1)->dotu_xsigma);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_dotu_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Vector *arg2 = (dolfin::Vector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_dotu_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_dotu_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_dotu_set" "', argument " "2"" of type '" "dolfin::Vector *""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Vector * >(argp2);
  if (arg1) (arg1)->dotu = *arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_dotu_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Vector *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_dotu_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_dotu_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::Vector *)& ((arg1)->dotu);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Vector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_dotu_x1sc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  VecScatter arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_dotu_x1sc_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_dotu_x1sc_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_VecScatter,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_dotu_x1sc_set" "', argument " "2"" of type '" "VecScatter""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_dotu_x1sc_set" "', argument " "2"" of type '" "VecScatter""'");
    } else {
      VecScatter * temp = reinterpret_cast<VecScatter * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dotu_x1sc = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_dotu_x1sc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  VecScatter result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_dotu_x1sc_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_dotu_x1sc_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result =  ((arg1)->dotu_x1sc);
  
  resultobj = SWIG_NewPointerObj((new VecScatter(static_cast<const VecScatter& >(result))), SWIGTYPE_p_VecScatter, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_dotu_x2sc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  VecScatter arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_dotu_x2sc_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_dotu_x2sc_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_VecScatter,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_dotu_x2sc_set" "', argument " "2"" of type '" "VecScatter""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_dotu_x2sc_set" "', argument " "2"" of type '" "VecScatter""'");
    } else {
      VecScatter * temp = reinterpret_cast<VecScatter * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dotu_x2sc = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_dotu_x2sc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  VecScatter result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_dotu_x2sc_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_dotu_x2sc_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result =  ((arg1)->dotu_x2sc);
  
  resultobj = SWIG_NewPointerObj((new VecScatter(static_cast<const VecScatter& >(result))), SWIGTYPE_p_VecScatter, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_dotu_xsigmasc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  VecScatter arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_dotu_xsigmasc_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_dotu_xsigmasc_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_VecScatter,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_dotu_xsigmasc_set" "', argument " "2"" of type '" "VecScatter""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_dotu_xsigmasc_set" "', argument " "2"" of type '" "VecScatter""'");
    } else {
      VecScatter * temp = reinterpret_cast<VecScatter * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dotu_xsigmasc = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_dotu_xsigmasc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  VecScatter result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_dotu_xsigmasc_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_dotu_xsigmasc_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result =  ((arg1)->dotu_xsigmasc);
  
  resultobj = SWIG_NewPointerObj((new VecScatter(static_cast<const VecScatter& >(result))), SWIGTYPE_p_VecScatter, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_dotu_x1is_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  IS arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_dotu_x1is_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_dotu_x1is_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_IS,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_dotu_x1is_set" "', argument " "2"" of type '" "IS""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_dotu_x1is_set" "', argument " "2"" of type '" "IS""'");
    } else {
      IS * temp = reinterpret_cast<IS * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dotu_x1is = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_dotu_x1is_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  IS result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_dotu_x1is_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_dotu_x1is_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result =  ((arg1)->dotu_x1is);
  
  resultobj = SWIG_NewPointerObj((new IS(static_cast<const IS& >(result))), SWIGTYPE_p_IS, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_dotu_x2is_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  IS arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_dotu_x2is_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_dotu_x2is_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_IS,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_dotu_x2is_set" "', argument " "2"" of type '" "IS""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_dotu_x2is_set" "', argument " "2"" of type '" "IS""'");
    } else {
      IS * temp = reinterpret_cast<IS * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dotu_x2is = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_dotu_x2is_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  IS result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_dotu_x2is_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_dotu_x2is_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result =  ((arg1)->dotu_x2is);
  
  resultobj = SWIG_NewPointerObj((new IS(static_cast<const IS& >(result))), SWIGTYPE_p_IS, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_dotu_xsigmais_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  IS arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_dotu_xsigmais_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_dotu_xsigmais_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_IS,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_dotu_xsigmais_set" "', argument " "2"" of type '" "IS""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedSolver_dotu_xsigmais_set" "', argument " "2"" of type '" "IS""'");
    } else {
      IS * temp = reinterpret_cast<IS * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->dotu_xsigmais = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_dotu_xsigmais_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  IS result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_dotu_xsigmais_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_dotu_xsigmais_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result =  ((arg1)->dotu_xsigmais);
  
  resultobj = SWIG_NewPointerObj((new IS(static_cast<const IS& >(result))), SWIGTYPE_p_IS, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_dotu_x1_indices_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  int *arg2 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_dotu_x1_indices_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_dotu_x1_indices_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_int, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_dotu_x1_indices_set" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast<int * >(argp2);
  if (arg1) (arg1)->dotu_x1_indices = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_dotu_x1_indices_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  int *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_dotu_x1_indices_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_dotu_x1_indices_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (int *) ((arg1)->dotu_x1_indices);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_dotu_x2_indices_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  int *arg2 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_dotu_x2_indices_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_dotu_x2_indices_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_int, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_dotu_x2_indices_set" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast<int * >(argp2);
  if (arg1) (arg1)->dotu_x2_indices = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_dotu_x2_indices_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  int *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_dotu_x2_indices_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_dotu_x2_indices_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (int *) ((arg1)->dotu_x2_indices);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_dotu_xsigma_indices_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  int *arg2 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_dotu_xsigma_indices_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_dotu_xsigma_indices_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_int, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_dotu_xsigma_indices_set" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast<int * >(argp2);
  if (arg1) (arg1)->dotu_xsigma_indices = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_dotu_xsigma_indices_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  int *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_dotu_xsigma_indices_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_dotu_xsigma_indices_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (int *) ((arg1)->dotu_xsigma_indices);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_v1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Function *arg2 = (dolfin::Function *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_v1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_v1_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_dolfin__Function, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_v1_set" "', argument " "2"" of type '" "dolfin::Function *""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Function * >(argp2);
  if (arg1) (arg1)->v1 = *arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_v1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Function *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_v1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_v1_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::Function *)& ((arg1)->v1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Function, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_u0_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Function *arg2 = (dolfin::Function *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_u0_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_u0_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_dolfin__Function, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_u0_set" "', argument " "2"" of type '" "dolfin::Function *""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Function * >(argp2);
  if (arg1) (arg1)->u0 = *arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_u0_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Function *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_u0_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_u0_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::Function *)& ((arg1)->u0);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Function, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_u1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Function *arg2 = (dolfin::Function *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_u1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_u1_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_dolfin__Function, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_u1_set" "', argument " "2"" of type '" "dolfin::Function *""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Function * >(argp2);
  if (arg1) (arg1)->u1 = *arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_u1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Function *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_u1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_u1_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::Function *)& ((arg1)->u1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Function, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_sigma0_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Function *arg2 = (dolfin::Function *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_sigma0_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_sigma0_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_dolfin__Function, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_sigma0_set" "', argument " "2"" of type '" "dolfin::Function *""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Function * >(argp2);
  if (arg1) (arg1)->sigma0 = *arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_sigma0_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Function *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_sigma0_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_sigma0_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::Function *)& ((arg1)->sigma0);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Function, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_sigma1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Function *arg2 = (dolfin::Function *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_sigma1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_sigma1_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_dolfin__Function, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_sigma1_set" "', argument " "2"" of type '" "dolfin::Function *""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Function * >(argp2);
  if (arg1) (arg1)->sigma1 = *arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_sigma1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Function *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_sigma1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_sigma1_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::Function *)& ((arg1)->sigma1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Function, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_epsilon1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Function *arg2 = (dolfin::Function *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_epsilon1_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_epsilon1_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_dolfin__Function, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_epsilon1_set" "', argument " "2"" of type '" "dolfin::Function *""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Function * >(argp2);
  if (arg1) (arg1)->epsilon1 = *arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_epsilon1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Function *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_epsilon1_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_epsilon1_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::Function *)& ((arg1)->epsilon1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Function, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_sigmanorm_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Function *arg2 = (dolfin::Function *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_sigmanorm_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_sigmanorm_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_dolfin__Function, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_sigmanorm_set" "', argument " "2"" of type '" "dolfin::Function *""'"); 
  }
  arg2 = reinterpret_cast<dolfin::Function * >(argp2);
  if (arg1) (arg1)->sigmanorm = *arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_sigmanorm_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::Function *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_sigmanorm_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_sigmanorm_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::Function *)& ((arg1)->sigmanorm);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__Function, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_Lv_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::LinearForm *arg2 = (dolfin::LinearForm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_Lv_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_Lv_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_dolfin__LinearForm, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_Lv_set" "', argument " "2"" of type '" "dolfin::LinearForm *""'"); 
  }
  arg2 = reinterpret_cast<dolfin::LinearForm * >(argp2);
  if (arg1) (arg1)->Lv = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_Lv_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::LinearForm *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_Lv_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_Lv_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::LinearForm *) ((arg1)->Lv);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__LinearForm, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_Lsigma_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::LinearForm *arg2 = (dolfin::LinearForm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedSolver_Lsigma_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_Lsigma_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_dolfin__LinearForm, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedSolver_Lsigma_set" "', argument " "2"" of type '" "dolfin::LinearForm *""'"); 
  }
  arg2 = reinterpret_cast<dolfin::LinearForm * >(argp2);
  if (arg1) (arg1)->Lsigma = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedSolver_Lsigma_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = (dolfin::ElasticityUpdatedSolver *) 0 ;
  dolfin::LinearForm *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedSolver_Lsigma_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedSolver_Lsigma_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::LinearForm *) ((arg1)->Lsigma);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__LinearForm, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ElasticityUpdatedSolver_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ElasticityUpdatedODE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedSolver *arg1 = 0 ;
  dolfin::ElasticityUpdatedODE *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ElasticityUpdatedODE",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_dolfin__ElasticityUpdatedSolver,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ElasticityUpdatedODE" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ElasticityUpdatedODE" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedSolver &""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp1);
  result = (dolfin::ElasticityUpdatedODE *)new dolfin::ElasticityUpdatedODE(*arg1);
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__ElasticityUpdatedODE, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedODE_u0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedODE *arg1 = (dolfin::ElasticityUpdatedODE *) 0 ;
  unsigned int arg2 ;
  dolfin::real result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedODE_u0",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedODE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedODE_u0" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedODE *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedODE * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElasticityUpdatedODE_u0" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast<unsigned int >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (dolfin::real)(arg1)->u0(arg2);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast<double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedODE_fmono(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedODE *arg1 = (dolfin::ElasticityUpdatedODE *) 0 ;
  dolfin::real *arg2 ;
  dolfin::real arg3 ;
  dolfin::real *arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ElasticityUpdatedODE_fmono",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedODE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedODE_fmono" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedODE *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedODE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedODE_fmono" "', argument " "2"" of type '" "dolfin::real const []""'"); 
  } 
  arg2 = reinterpret_cast<dolfin::real * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ElasticityUpdatedODE_fmono" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ElasticityUpdatedODE_fmono" "', argument " "4"" of type '" "dolfin::real []""'"); 
  } 
  arg4 = reinterpret_cast<dolfin::real * >(argp4);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->f((double const (*))arg2,arg3,arg4);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedODE_update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedODE *arg1 = (dolfin::ElasticityUpdatedODE *) 0 ;
  dolfin::real *arg2 ;
  dolfin::real arg3 ;
  bool arg4 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ElasticityUpdatedODE_update",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedODE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedODE_update" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedODE *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedODE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedODE_update" "', argument " "2"" of type '" "dolfin::real const []""'"); 
  } 
  arg2 = reinterpret_cast<dolfin::real * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ElasticityUpdatedODE_update" "', argument " "3"" of type '" "dolfin::real""'");
  } 
  arg3 = static_cast<dolfin::real >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ElasticityUpdatedODE_update" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast<bool >(val4);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (bool)(arg1)->update((double const (*))arg2,arg3,arg4);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_bool(static_cast<bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedODE_fromArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedODE *arg1 = (dolfin::ElasticityUpdatedODE *) 0 ;
  dolfin::real *arg2 ;
  dolfin::Vector *arg3 = 0 ;
  dolfin::uint arg4 ;
  dolfin::uint arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ElasticityUpdatedODE_fromArray",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedODE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedODE_fromArray" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedODE *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedODE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedODE_fromArray" "', argument " "2"" of type '" "dolfin::real const []""'"); 
  } 
  arg2 = reinterpret_cast<dolfin::real * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ElasticityUpdatedODE_fromArray" "', argument " "3"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedODE_fromArray" "', argument " "3"" of type '" "dolfin::Vector &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Vector * >(argp3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ElasticityUpdatedODE_fromArray" "', argument " "4"" of type '" "dolfin::uint""'");
  } 
  arg4 = static_cast<dolfin::uint >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ElasticityUpdatedODE_fromArray" "', argument " "5"" of type '" "dolfin::uint""'");
  } 
  arg5 = static_cast<dolfin::uint >(val5);
  (arg1)->fromArray((double const (*))arg2,*arg3,arg4,arg5);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedODE_toArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedODE *arg1 = (dolfin::ElasticityUpdatedODE *) 0 ;
  dolfin::real *arg2 ;
  dolfin::Vector *arg3 = 0 ;
  dolfin::uint arg4 ;
  dolfin::uint arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ElasticityUpdatedODE_toArray",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedODE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedODE_toArray" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedODE *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedODE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedODE_toArray" "', argument " "2"" of type '" "dolfin::real []""'"); 
  } 
  arg2 = reinterpret_cast<dolfin::real * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Vector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ElasticityUpdatedODE_toArray" "', argument " "3"" of type '" "dolfin::Vector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedODE_toArray" "', argument " "3"" of type '" "dolfin::Vector &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Vector * >(argp3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ElasticityUpdatedODE_toArray" "', argument " "4"" of type '" "dolfin::uint""'");
  } 
  arg4 = static_cast<dolfin::uint >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ElasticityUpdatedODE_toArray" "', argument " "5"" of type '" "dolfin::uint""'");
  } 
  arg5 = static_cast<dolfin::uint >(val5);
  (arg1)->toArray(arg2,*arg3,arg4,arg5);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedODE_solver_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedODE *arg1 = (dolfin::ElasticityUpdatedODE *) 0 ;
  dolfin::ElasticityUpdatedSolver *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElasticityUpdatedODE_solver_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedODE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedODE_solver_set" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedODE *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedODE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__ElasticityUpdatedSolver,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElasticityUpdatedODE_solver_set" "', argument " "2"" of type '" "dolfin::ElasticityUpdatedSolver &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElasticityUpdatedODE_solver_set" "', argument " "2"" of type '" "dolfin::ElasticityUpdatedSolver &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::ElasticityUpdatedSolver * >(argp2);
  if (arg1) (arg1)->solver = *arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElasticityUpdatedODE_solver_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::ElasticityUpdatedODE *arg1 = (dolfin::ElasticityUpdatedODE *) 0 ;
  dolfin::ElasticityUpdatedSolver *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElasticityUpdatedODE_solver_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__ElasticityUpdatedODE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElasticityUpdatedODE_solver_get" "', argument " "1"" of type '" "dolfin::ElasticityUpdatedODE *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::ElasticityUpdatedODE * >(argp1);
  {
    dolfin::ElasticityUpdatedSolver &_result_ref = (dolfin::ElasticityUpdatedSolver &) ((arg1)->solver);
    result = (dolfin::ElasticityUpdatedSolver *) &_result_ref;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__ElasticityUpdatedSolver, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ElasticityUpdatedODE_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__ElasticityUpdatedODE, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_UtilBC(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::UtilBC *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_UtilBC")) SWIG_fail;
  result = (dolfin::UtilBC *)new dolfin::UtilBC();
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dolfin__UtilBC, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UtilBC_eval(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  dolfin::UtilBC *arg1 = (dolfin::UtilBC *) 0 ;
  dolfin::BoundaryValue *arg2 = 0 ;
  dolfin::Point *arg3 = 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:UtilBC_eval",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_dolfin__UtilBC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UtilBC_eval" "', argument " "1"" of type '" "dolfin::UtilBC *""'"); 
  }
  arg1 = reinterpret_cast<dolfin::UtilBC * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_dolfin__BoundaryValue,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UtilBC_eval" "', argument " "2"" of type '" "dolfin::BoundaryValue &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UtilBC_eval" "', argument " "2"" of type '" "dolfin::BoundaryValue &""'"); 
  }
  arg2 = reinterpret_cast<dolfin::BoundaryValue * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_dolfin__Point,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "UtilBC_eval" "', argument " "3"" of type '" "dolfin::Point const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UtilBC_eval" "', argument " "3"" of type '" "dolfin::Point const &""'"); 
  }
  arg3 = reinterpret_cast<dolfin::Point * >(argp3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "UtilBC_eval" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast<unsigned int >(val4);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->eval(*arg2,(dolfin::Point const &)*arg3,arg4);
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UtilBC_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
    SWIG_TypeNewClientData(SWIGTYPE_p_dolfin__UtilBC, SWIG_NewClientData(obj));
    return SWIG_Py_Void();
}

static PyMethodDef SwigMethods[] = {
	 { (char *)"new_realArray", _wrap_new_realArray, METH_VARARGS, NULL},
	 { (char *)"delete_realArray", _wrap_delete_realArray, METH_VARARGS, NULL},
	 { (char *)"realArray_getitem", _wrap_realArray_getitem, METH_VARARGS, NULL},
	 { (char *)"realArray_setitem", _wrap_realArray_setitem, METH_VARARGS, NULL},
	 { (char *)"new_intArray", _wrap_new_intArray, METH_VARARGS, NULL},
	 { (char *)"delete_intArray", _wrap_delete_intArray, METH_VARARGS, NULL},
	 { (char *)"intArray_getitem", _wrap_intArray_getitem, METH_VARARGS, NULL},
	 { (char *)"intArray_setitem", _wrap_intArray_setitem, METH_VARARGS, NULL},
	 { (char *)"dolfin_init", _wrap_dolfin_init, METH_VARARGS, NULL},
	 { (char *)"sqr", _wrap_sqr, METH_VARARGS, NULL},
	 { (char *)"rand", _wrap_rand, METH_VARARGS, NULL},
	 { (char *)"seed", _wrap_seed, METH_VARARGS, NULL},
	 { (char *)"new_TimeDependent", _wrap_new_TimeDependent, METH_VARARGS, NULL},
	 { (char *)"delete_TimeDependent", _wrap_delete_TimeDependent, METH_VARARGS, NULL},
	 { (char *)"TimeDependent_sync", _wrap_TimeDependent_sync, METH_VARARGS, NULL},
	 { (char *)"TimeDependent_time", _wrap_TimeDependent_time, METH_VARARGS, NULL},
	 { (char *)"TimeDependent_swigregister", TimeDependent_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Variable", _wrap_new_Variable, METH_VARARGS, NULL},
	 { (char *)"Variable_rename", _wrap_Variable_rename, METH_VARARGS, NULL},
	 { (char *)"Variable_name", _wrap_Variable_name, METH_VARARGS, NULL},
	 { (char *)"Variable_label", _wrap_Variable_label, METH_VARARGS, NULL},
	 { (char *)"Variable_number", _wrap_Variable_number, METH_VARARGS, NULL},
	 { (char *)"Variable_swigregister", Variable_swigregister, METH_VARARGS, NULL},
	 { (char *)"suffix", _wrap_suffix, METH_VARARGS, NULL},
	 { (char *)"remove_newline", _wrap_remove_newline, METH_VARARGS, NULL},
	 { (char *)"length", _wrap_length, METH_VARARGS, NULL},
	 { (char *)"date", _wrap_date, METH_VARARGS, NULL},
	 { (char *)"delay", _wrap_delay, METH_VARARGS, NULL},
	 { (char *)"tic", _wrap_tic, METH_VARARGS, NULL},
	 { (char *)"toc", _wrap_toc, METH_VARARGS, NULL},
	 { (char *)"tocd", _wrap_tocd, METH_VARARGS, NULL},
	 { (char *)"dolfin_update", _wrap_dolfin_update, METH_VARARGS, NULL},
	 { (char *)"dolfin_quit", _wrap_dolfin_quit, METH_VARARGS, NULL},
	 { (char *)"dolfin_finished", _wrap_dolfin_finished, METH_VARARGS, NULL},
	 { (char *)"dolfin_segfault", _wrap_dolfin_segfault, METH_VARARGS, NULL},
	 { (char *)"dolfin_begin", _wrap_dolfin_begin, METH_VARARGS, NULL},
	 { (char *)"dolfin_end", _wrap_dolfin_end, METH_VARARGS, NULL},
	 { (char *)"dolfin_output", _wrap_dolfin_output, METH_VARARGS, NULL},
	 { (char *)"dolfin_log", _wrap_dolfin_log, METH_VARARGS, NULL},
	 { (char *)"new_Parameter", _wrap_new_Parameter, METH_VARARGS, NULL},
	 { (char *)"delete_Parameter", _wrap_delete_Parameter, METH_VARARGS, NULL},
	 { (char *)"Parameter_type", _wrap_Parameter_type, METH_VARARGS, NULL},
	 { (char *)"Parameter_swigregister", Parameter_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_File", _wrap_new_File, METH_VARARGS, NULL},
	 { (char *)"delete_File", _wrap_delete_File, METH_VARARGS, NULL},
	 { (char *)"File___rshift__", _wrap_File___rshift__, METH_VARARGS, NULL},
	 { (char *)"File___lshift__", _wrap_File___lshift__, METH_VARARGS, NULL},
	 { (char *)"File_swigregister", File_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Vector", _wrap_new_Vector, METH_VARARGS, NULL},
	 { (char *)"delete_Vector", _wrap_delete_Vector, METH_VARARGS, NULL},
	 { (char *)"Vector_init", _wrap_Vector_init, METH_VARARGS, NULL},
	 { (char *)"Vector_clear", _wrap_Vector_clear, METH_VARARGS, NULL},
	 { (char *)"Vector_size", _wrap_Vector_size, METH_VARARGS, NULL},
	 { (char *)"Vector_vec", _wrap_Vector_vec, METH_VARARGS, NULL},
	 { (char *)"Vector_array", _wrap_Vector_array, METH_VARARGS, NULL},
	 { (char *)"Vector_restore", _wrap_Vector_restore, METH_VARARGS, NULL},
	 { (char *)"Vector_axpy", _wrap_Vector_axpy, METH_VARARGS, NULL},
	 { (char *)"Vector_div", _wrap_Vector_div, METH_VARARGS, NULL},
	 { (char *)"Vector_mult", _wrap_Vector_mult, METH_VARARGS, NULL},
	 { (char *)"Vector_add", _wrap_Vector_add, METH_VARARGS, NULL},
	 { (char *)"Vector_insert", _wrap_Vector_insert, METH_VARARGS, NULL},
	 { (char *)"Vector_get", _wrap_Vector_get, METH_VARARGS, NULL},
	 { (char *)"Vector_apply", _wrap_Vector_apply, METH_VARARGS, NULL},
	 { (char *)"Vector___call__", _wrap_Vector___call__, METH_VARARGS, NULL},
	 { (char *)"Vector_copy", _wrap_Vector_copy, METH_VARARGS, NULL},
	 { (char *)"Vector___iadd__", _wrap_Vector___iadd__, METH_VARARGS, NULL},
	 { (char *)"Vector___isub__", _wrap_Vector___isub__, METH_VARARGS, NULL},
	 { (char *)"Vector___imul__", _wrap_Vector___imul__, METH_VARARGS, NULL},
	 { (char *)"Vector___idiv__", _wrap_Vector___idiv__, METH_VARARGS, NULL},
	 { (char *)"Vector___mul__", _wrap_Vector___mul__, METH_VARARGS, NULL},
	 { (char *)"Vector_norm", _wrap_Vector_norm, METH_VARARGS, NULL},
	 { (char *)"Vector_sum", _wrap_Vector_sum, METH_VARARGS, NULL},
	 { (char *)"Vector_max", _wrap_Vector_max, METH_VARARGS, NULL},
	 { (char *)"Vector_min", _wrap_Vector_min, METH_VARARGS, NULL},
	 { (char *)"Vector_disp", _wrap_Vector_disp, METH_VARARGS, NULL},
	 { (char *)"Vector___getitem__", _wrap_Vector___getitem__, METH_VARARGS, NULL},
	 { (char *)"Vector___setitem__", _wrap_Vector___setitem__, METH_VARARGS, NULL},
	 { (char *)"Vector_addval", _wrap_Vector_addval, METH_VARARGS, NULL},
	 { (char *)"Vector_swigregister", Vector_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_VectorElement", _wrap_new_VectorElement, METH_VARARGS, NULL},
	 { (char *)"VectorElement___iadd__", _wrap_VectorElement___iadd__, METH_VARARGS, NULL},
	 { (char *)"VectorElement___isub__", _wrap_VectorElement___isub__, METH_VARARGS, NULL},
	 { (char *)"VectorElement___imul__", _wrap_VectorElement___imul__, METH_VARARGS, NULL},
	 { (char *)"VectorElement_swigregister", VectorElement_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Matrix", _wrap_new_Matrix, METH_VARARGS, NULL},
	 { (char *)"delete_Matrix", _wrap_delete_Matrix, METH_VARARGS, NULL},
	 { (char *)"Matrix_init", _wrap_Matrix_init, METH_VARARGS, NULL},
	 { (char *)"Matrix_size", _wrap_Matrix_size, METH_VARARGS, NULL},
	 { (char *)"Matrix_nz", _wrap_Matrix_nz, METH_VARARGS, NULL},
	 { (char *)"Matrix_nzsum", _wrap_Matrix_nzsum, METH_VARARGS, NULL},
	 { (char *)"Matrix_nzmax", _wrap_Matrix_nzmax, METH_VARARGS, NULL},
	 { (char *)"Matrix_add", _wrap_Matrix_add, METH_VARARGS, NULL},
	 { (char *)"Matrix_ident", _wrap_Matrix_ident, METH_VARARGS, NULL},
	 { (char *)"Matrix_mult", _wrap_Matrix_mult, METH_VARARGS, NULL},
	 { (char *)"Matrix_norm", _wrap_Matrix_norm, METH_VARARGS, NULL},
	 { (char *)"Matrix_apply", _wrap_Matrix_apply, METH_VARARGS, NULL},
	 { (char *)"Matrix_getMatrixType", _wrap_Matrix_getMatrixType, METH_VARARGS, NULL},
	 { (char *)"Matrix_mat", _wrap_Matrix_mat, METH_VARARGS, NULL},
	 { (char *)"Matrix_disp", _wrap_Matrix_disp, METH_VARARGS, NULL},
	 { (char *)"Matrix___call__", _wrap_Matrix___call__, METH_VARARGS, NULL},
	 { (char *)"Matrix_getval", _wrap_Matrix_getval, METH_VARARGS, NULL},
	 { (char *)"Matrix_setval", _wrap_Matrix_setval, METH_VARARGS, NULL},
	 { (char *)"Matrix_addval", _wrap_Matrix_addval, METH_VARARGS, NULL},
	 { (char *)"Matrix_swigregister", Matrix_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MatrixElement", _wrap_new_MatrixElement, METH_VARARGS, NULL},
	 { (char *)"MatrixElement___iadd__", _wrap_MatrixElement___iadd__, METH_VARARGS, NULL},
	 { (char *)"MatrixElement___isub__", _wrap_MatrixElement___isub__, METH_VARARGS, NULL},
	 { (char *)"MatrixElement___imul__", _wrap_MatrixElement___imul__, METH_VARARGS, NULL},
	 { (char *)"MatrixElement_swigregister", MatrixElement_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_VirtualMatrix", _wrap_delete_VirtualMatrix, METH_VARARGS, NULL},
	 { (char *)"VirtualMatrix_init", _wrap_VirtualMatrix_init, METH_VARARGS, NULL},
	 { (char *)"VirtualMatrix_size", _wrap_VirtualMatrix_size, METH_VARARGS, NULL},
	 { (char *)"VirtualMatrix_mat", _wrap_VirtualMatrix_mat, METH_VARARGS, NULL},
	 { (char *)"VirtualMatrix_mult", _wrap_VirtualMatrix_mult, METH_VARARGS, NULL},
	 { (char *)"VirtualMatrix_disp", _wrap_VirtualMatrix_disp, METH_VARARGS, NULL},
	 { (char *)"VirtualMatrix_swigregister", VirtualMatrix_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_GMRES", _wrap_new_GMRES, METH_VARARGS, NULL},
	 { (char *)"delete_GMRES", _wrap_delete_GMRES, METH_VARARGS, NULL},
	 { (char *)"GMRES_swigregister", GMRES_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_LinearSolver", _wrap_delete_LinearSolver, METH_VARARGS, NULL},
	 { (char *)"LinearSolver_solve", _wrap_LinearSolver_solve, METH_VARARGS, NULL},
	 { (char *)"LinearSolver_swigregister", LinearSolver_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LU", _wrap_new_LU, METH_VARARGS, NULL},
	 { (char *)"delete_LU", _wrap_delete_LU, METH_VARARGS, NULL},
	 { (char *)"LU_solve", _wrap_LU_solve, METH_VARARGS, NULL},
	 { (char *)"LU_disp", _wrap_LU_disp, METH_VARARGS, NULL},
	 { (char *)"LU_swigregister", LU_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_KrylovSolver", _wrap_new_KrylovSolver, METH_VARARGS, NULL},
	 { (char *)"delete_KrylovSolver", _wrap_delete_KrylovSolver, METH_VARARGS, NULL},
	 { (char *)"KrylovSolver_solve", _wrap_KrylovSolver_solve, METH_VARARGS, NULL},
	 { (char *)"KrylovSolver_disp", _wrap_KrylovSolver_disp, METH_VARARGS, NULL},
	 { (char *)"KrylovSolver_swigregister", KrylovSolver_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_EigenvalueSolver", _wrap_new_EigenvalueSolver, METH_VARARGS, NULL},
	 { (char *)"delete_EigenvalueSolver", _wrap_delete_EigenvalueSolver, METH_VARARGS, NULL},
	 { (char *)"EigenvalueSolver_eigen", _wrap_EigenvalueSolver_eigen, METH_VARARGS, NULL},
	 { (char *)"EigenvalueSolver_swigregister", EigenvalueSolver_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_Preconditioner", _wrap_delete_Preconditioner, METH_VARARGS, NULL},
	 { (char *)"Preconditioner_setup", _wrap_Preconditioner_setup, METH_VARARGS, NULL},
	 { (char *)"Preconditioner_solve", _wrap_Preconditioner_solve, METH_VARARGS, NULL},
	 { (char *)"Preconditioner_swigregister", Preconditioner_swigregister, METH_VARARGS, NULL},
	 { (char *)"PETScManager_init", _wrap_PETScManager_init, METH_VARARGS, NULL},
	 { (char *)"PETScManager_swigregister", PETScManager_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Function", _wrap_new_Function, METH_VARARGS, NULL},
	 { (char *)"delete_Function", _wrap_delete_Function, METH_VARARGS, NULL},
	 { (char *)"Function_eval", _wrap_Function_eval, METH_VARARGS, NULL},
	 { (char *)"Function___call__", _wrap_Function___call__, METH_VARARGS, NULL},
	 { (char *)"Function___getitem__", _wrap_Function___getitem__, METH_VARARGS, NULL},
	 { (char *)"Function_interpolate", _wrap_Function_interpolate, METH_VARARGS, NULL},
	 { (char *)"Function_vectordim", _wrap_Function_vectordim, METH_VARARGS, NULL},
	 { (char *)"Function_vector", _wrap_Function_vector, METH_VARARGS, NULL},
	 { (char *)"Function_mesh", _wrap_Function_mesh, METH_VARARGS, NULL},
	 { (char *)"Function_element", _wrap_Function_element, METH_VARARGS, NULL},
	 { (char *)"Function_attach", _wrap_Function_attach, METH_VARARGS, NULL},
	 { (char *)"Function_init", _wrap_Function_init, METH_VARARGS, NULL},
	 { (char *)"Function_type", _wrap_Function_type, METH_VARARGS, NULL},
	 { (char *)"disown_Function", _wrap_disown_Function, METH_VARARGS, NULL},
	 { (char *)"Function_swigregister", Function_swigregister, METH_VARARGS, NULL},
	 { (char *)"FEM_size", _wrap_FEM_size, METH_VARARGS, NULL},
	 { (char *)"FEM_lump", _wrap_FEM_lump, METH_VARARGS, NULL},
	 { (char *)"FEM_disp", _wrap_FEM_disp, METH_VARARGS, NULL},
	 { (char *)"FEM_swigregister", FEM_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_FiniteElement", _wrap_delete_FiniteElement, METH_VARARGS, NULL},
	 { (char *)"FiniteElement_spacedim", _wrap_FiniteElement_spacedim, METH_VARARGS, NULL},
	 { (char *)"FiniteElement_shapedim", _wrap_FiniteElement_shapedim, METH_VARARGS, NULL},
	 { (char *)"FiniteElement_tensordim", _wrap_FiniteElement_tensordim, METH_VARARGS, NULL},
	 { (char *)"FiniteElement_elementdim", _wrap_FiniteElement_elementdim, METH_VARARGS, NULL},
	 { (char *)"FiniteElement_rank", _wrap_FiniteElement_rank, METH_VARARGS, NULL},
	 { (char *)"FiniteElement_nodemap", _wrap_FiniteElement_nodemap, METH_VARARGS, NULL},
	 { (char *)"FiniteElement_pointmap", _wrap_FiniteElement_pointmap, METH_VARARGS, NULL},
	 { (char *)"FiniteElement_vertexeval", _wrap_FiniteElement_vertexeval, METH_VARARGS, NULL},
	 { (char *)"FiniteElement_spec", _wrap_FiniteElement_spec, METH_VARARGS, NULL},
	 { (char *)"FiniteElement_makeElement", _wrap_FiniteElement_makeElement, METH_VARARGS, NULL},
	 { (char *)"FiniteElement_disp", _wrap_FiniteElement_disp, METH_VARARGS, NULL},
	 { (char *)"FiniteElement_swigregister", FiniteElement_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_AffineMap", _wrap_new_AffineMap, METH_VARARGS, NULL},
	 { (char *)"delete_AffineMap", _wrap_delete_AffineMap, METH_VARARGS, NULL},
	 { (char *)"AffineMap_update", _wrap_AffineMap_update, METH_VARARGS, NULL},
	 { (char *)"AffineMap___call__", _wrap_AffineMap___call__, METH_VARARGS, NULL},
	 { (char *)"AffineMap_cell", _wrap_AffineMap_cell, METH_VARARGS, NULL},
	 { (char *)"AffineMap_det_set", _wrap_AffineMap_det_set, METH_VARARGS, NULL},
	 { (char *)"AffineMap_det_get", _wrap_AffineMap_det_get, METH_VARARGS, NULL},
	 { (char *)"AffineMap_f00_set", _wrap_AffineMap_f00_set, METH_VARARGS, NULL},
	 { (char *)"AffineMap_f00_get", _wrap_AffineMap_f00_get, METH_VARARGS, NULL},
	 { (char *)"AffineMap_f01_set", _wrap_AffineMap_f01_set, METH_VARARGS, NULL},
	 { (char *)"AffineMap_f01_get", _wrap_AffineMap_f01_get, METH_VARARGS, NULL},
	 { (char *)"AffineMap_f02_set", _wrap_AffineMap_f02_set, METH_VARARGS, NULL},
	 { (char *)"AffineMap_f02_get", _wrap_AffineMap_f02_get, METH_VARARGS, NULL},
	 { (char *)"AffineMap_f10_set", _wrap_AffineMap_f10_set, METH_VARARGS, NULL},
	 { (char *)"AffineMap_f10_get", _wrap_AffineMap_f10_get, METH_VARARGS, NULL},
	 { (char *)"AffineMap_f11_set", _wrap_AffineMap_f11_set, METH_VARARGS, NULL},
	 { (char *)"AffineMap_f11_get", _wrap_AffineMap_f11_get, METH_VARARGS, NULL},
	 { (char *)"AffineMap_f12_set", _wrap_AffineMap_f12_set, METH_VARARGS, NULL},
	 { (char *)"AffineMap_f12_get", _wrap_AffineMap_f12_get, METH_VARARGS, NULL},
	 { (char *)"AffineMap_f20_set", _wrap_AffineMap_f20_set, METH_VARARGS, NULL},
	 { (char *)"AffineMap_f20_get", _wrap_AffineMap_f20_get, METH_VARARGS, NULL},
	 { (char *)"AffineMap_f21_set", _wrap_AffineMap_f21_set, METH_VARARGS, NULL},
	 { (char *)"AffineMap_f21_get", _wrap_AffineMap_f21_get, METH_VARARGS, NULL},
	 { (char *)"AffineMap_f22_set", _wrap_AffineMap_f22_set, METH_VARARGS, NULL},
	 { (char *)"AffineMap_f22_get", _wrap_AffineMap_f22_get, METH_VARARGS, NULL},
	 { (char *)"AffineMap_g00_set", _wrap_AffineMap_g00_set, METH_VARARGS, NULL},
	 { (char *)"AffineMap_g00_get", _wrap_AffineMap_g00_get, METH_VARARGS, NULL},
	 { (char *)"AffineMap_g01_set", _wrap_AffineMap_g01_set, METH_VARARGS, NULL},
	 { (char *)"AffineMap_g01_get", _wrap_AffineMap_g01_get, METH_VARARGS, NULL},
	 { (char *)"AffineMap_g02_set", _wrap_AffineMap_g02_set, METH_VARARGS, NULL},
	 { (char *)"AffineMap_g02_get", _wrap_AffineMap_g02_get, METH_VARARGS, NULL},
	 { (char *)"AffineMap_g10_set", _wrap_AffineMap_g10_set, METH_VARARGS, NULL},
	 { (char *)"AffineMap_g10_get", _wrap_AffineMap_g10_get, METH_VARARGS, NULL},
	 { (char *)"AffineMap_g11_set", _wrap_AffineMap_g11_set, METH_VARARGS, NULL},
	 { (char *)"AffineMap_g11_get", _wrap_AffineMap_g11_get, METH_VARARGS, NULL},
	 { (char *)"AffineMap_g12_set", _wrap_AffineMap_g12_set, METH_VARARGS, NULL},
	 { (char *)"AffineMap_g12_get", _wrap_AffineMap_g12_get, METH_VARARGS, NULL},
	 { (char *)"AffineMap_g20_set", _wrap_AffineMap_g20_set, METH_VARARGS, NULL},
	 { (char *)"AffineMap_g20_get", _wrap_AffineMap_g20_get, METH_VARARGS, NULL},
	 { (char *)"AffineMap_g21_set", _wrap_AffineMap_g21_set, METH_VARARGS, NULL},
	 { (char *)"AffineMap_g21_get", _wrap_AffineMap_g21_get, METH_VARARGS, NULL},
	 { (char *)"AffineMap_g22_set", _wrap_AffineMap_g22_set, METH_VARARGS, NULL},
	 { (char *)"AffineMap_g22_get", _wrap_AffineMap_g22_get, METH_VARARGS, NULL},
	 { (char *)"AffineMap_swigregister", AffineMap_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BoundaryValue", _wrap_new_BoundaryValue, METH_VARARGS, NULL},
	 { (char *)"delete_BoundaryValue", _wrap_delete_BoundaryValue, METH_VARARGS, NULL},
	 { (char *)"BoundaryValue_set", _wrap_BoundaryValue_set, METH_VARARGS, NULL},
	 { (char *)"BoundaryValue_reset", _wrap_BoundaryValue_reset, METH_VARARGS, NULL},
	 { (char *)"BoundaryValue_swigregister", BoundaryValue_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BoundaryCondition", _wrap_new_BoundaryCondition, METH_VARARGS, NULL},
	 { (char *)"delete_BoundaryCondition", _wrap_delete_BoundaryCondition, METH_VARARGS, NULL},
	 { (char *)"BoundaryCondition_eval", _wrap_BoundaryCondition_eval, METH_VARARGS, NULL},
	 { (char *)"disown_BoundaryCondition", _wrap_disown_BoundaryCondition, METH_VARARGS, NULL},
	 { (char *)"BoundaryCondition_swigregister", BoundaryCondition_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Form", _wrap_new_Form, METH_VARARGS, NULL},
	 { (char *)"delete_Form", _wrap_delete_Form, METH_VARARGS, NULL},
	 { (char *)"Form_update", _wrap_Form_update, METH_VARARGS, NULL},
	 { (char *)"Form_swigregister", Form_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_BilinearForm", _wrap_delete_BilinearForm, METH_VARARGS, NULL},
	 { (char *)"BilinearForm_eval", _wrap_BilinearForm_eval, METH_VARARGS, NULL},
	 { (char *)"BilinearForm_test", _wrap_BilinearForm_test, METH_VARARGS, NULL},
	 { (char *)"BilinearForm_trial", _wrap_BilinearForm_trial, METH_VARARGS, NULL},
	 { (char *)"BilinearForm_swigregister", BilinearForm_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_LinearForm", _wrap_delete_LinearForm, METH_VARARGS, NULL},
	 { (char *)"LinearForm_eval", _wrap_LinearForm_eval, METH_VARARGS, NULL},
	 { (char *)"LinearForm_test", _wrap_LinearForm_test, METH_VARARGS, NULL},
	 { (char *)"LinearForm_swigregister", LinearForm_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Mesh", _wrap_new_Mesh, METH_VARARGS, NULL},
	 { (char *)"delete_Mesh", _wrap_delete_Mesh, METH_VARARGS, NULL},
	 { (char *)"Mesh_merge", _wrap_Mesh_merge, METH_VARARGS, NULL},
	 { (char *)"Mesh_init", _wrap_Mesh_init, METH_VARARGS, NULL},
	 { (char *)"Mesh_clear", _wrap_Mesh_clear, METH_VARARGS, NULL},
	 { (char *)"Mesh_numSpaceDim", _wrap_Mesh_numSpaceDim, METH_VARARGS, NULL},
	 { (char *)"Mesh_numVertices", _wrap_Mesh_numVertices, METH_VARARGS, NULL},
	 { (char *)"Mesh_numCells", _wrap_Mesh_numCells, METH_VARARGS, NULL},
	 { (char *)"Mesh_numEdges", _wrap_Mesh_numEdges, METH_VARARGS, NULL},
	 { (char *)"Mesh_numFaces", _wrap_Mesh_numFaces, METH_VARARGS, NULL},
	 { (char *)"Mesh_createVertex", _wrap_Mesh_createVertex, METH_VARARGS, NULL},
	 { (char *)"Mesh_createCell", _wrap_Mesh_createCell, METH_VARARGS, NULL},
	 { (char *)"Mesh_createEdge", _wrap_Mesh_createEdge, METH_VARARGS, NULL},
	 { (char *)"Mesh_createFace", _wrap_Mesh_createFace, METH_VARARGS, NULL},
	 { (char *)"Mesh_remove", _wrap_Mesh_remove, METH_VARARGS, NULL},
	 { (char *)"Mesh_type", _wrap_Mesh_type, METH_VARARGS, NULL},
	 { (char *)"Mesh_vertex", _wrap_Mesh_vertex, METH_VARARGS, NULL},
	 { (char *)"Mesh_cell", _wrap_Mesh_cell, METH_VARARGS, NULL},
	 { (char *)"Mesh_edge", _wrap_Mesh_edge, METH_VARARGS, NULL},
	 { (char *)"Mesh_face", _wrap_Mesh_face, METH_VARARGS, NULL},
	 { (char *)"Mesh_boundary", _wrap_Mesh_boundary, METH_VARARGS, NULL},
	 { (char *)"Mesh_refine", _wrap_Mesh_refine, METH_VARARGS, NULL},
	 { (char *)"Mesh_refineUniformly", _wrap_Mesh_refineUniformly, METH_VARARGS, NULL},
	 { (char *)"Mesh_parent", _wrap_Mesh_parent, METH_VARARGS, NULL},
	 { (char *)"Mesh_child", _wrap_Mesh_child, METH_VARARGS, NULL},
	 { (char *)"Mesh___eq__", _wrap_Mesh___eq__, METH_VARARGS, NULL},
	 { (char *)"Mesh___ne__", _wrap_Mesh___ne__, METH_VARARGS, NULL},
	 { (char *)"Mesh_disp", _wrap_Mesh_disp, METH_VARARGS, NULL},
	 { (char *)"Mesh_swigregister", Mesh_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Boundary", _wrap_new_Boundary, METH_VARARGS, NULL},
	 { (char *)"delete_Boundary", _wrap_delete_Boundary, METH_VARARGS, NULL},
	 { (char *)"Boundary_numVertices", _wrap_Boundary_numVertices, METH_VARARGS, NULL},
	 { (char *)"Boundary_numEdges", _wrap_Boundary_numEdges, METH_VARARGS, NULL},
	 { (char *)"Boundary_numFaces", _wrap_Boundary_numFaces, METH_VARARGS, NULL},
	 { (char *)"Boundary_swigregister", Boundary_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Point", _wrap_new_Point, METH_VARARGS, NULL},
	 { (char *)"Point_dist", _wrap_Point_dist, METH_VARARGS, NULL},
	 { (char *)"Point_norm", _wrap_Point_norm, METH_VARARGS, NULL},
	 { (char *)"Point_midpoint", _wrap_Point_midpoint, METH_VARARGS, NULL},
	 { (char *)"Point___add__", _wrap_Point___add__, METH_VARARGS, NULL},
	 { (char *)"Point___sub__", _wrap_Point___sub__, METH_VARARGS, NULL},
	 { (char *)"Point___mul__", _wrap_Point___mul__, METH_VARARGS, NULL},
	 { (char *)"Point___iadd__", _wrap_Point___iadd__, METH_VARARGS, NULL},
	 { (char *)"Point___isub__", _wrap_Point___isub__, METH_VARARGS, NULL},
	 { (char *)"Point___imul__", _wrap_Point___imul__, METH_VARARGS, NULL},
	 { (char *)"Point___idiv__", _wrap_Point___idiv__, METH_VARARGS, NULL},
	 { (char *)"Point_cross", _wrap_Point_cross, METH_VARARGS, NULL},
	 { (char *)"Point_x_set", _wrap_Point_x_set, METH_VARARGS, NULL},
	 { (char *)"Point_x_get", _wrap_Point_x_get, METH_VARARGS, NULL},
	 { (char *)"Point_y_set", _wrap_Point_y_set, METH_VARARGS, NULL},
	 { (char *)"Point_y_get", _wrap_Point_y_get, METH_VARARGS, NULL},
	 { (char *)"Point_z_set", _wrap_Point_z_set, METH_VARARGS, NULL},
	 { (char *)"Point_z_get", _wrap_Point_z_get, METH_VARARGS, NULL},
	 { (char *)"Point_swigregister", Point_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Vertex", _wrap_new_Vertex, METH_VARARGS, NULL},
	 { (char *)"delete_Vertex", _wrap_delete_Vertex, METH_VARARGS, NULL},
	 { (char *)"Vertex_clear", _wrap_Vertex_clear, METH_VARARGS, NULL},
	 { (char *)"Vertex_id", _wrap_Vertex_id, METH_VARARGS, NULL},
	 { (char *)"Vertex_numVertexNeighbors", _wrap_Vertex_numVertexNeighbors, METH_VARARGS, NULL},
	 { (char *)"Vertex_numCellNeighbors", _wrap_Vertex_numCellNeighbors, METH_VARARGS, NULL},
	 { (char *)"Vertex_numEdgeNeighbors", _wrap_Vertex_numEdgeNeighbors, METH_VARARGS, NULL},
	 { (char *)"Vertex_vertex", _wrap_Vertex_vertex, METH_VARARGS, NULL},
	 { (char *)"Vertex_cell", _wrap_Vertex_cell, METH_VARARGS, NULL},
	 { (char *)"Vertex_edge", _wrap_Vertex_edge, METH_VARARGS, NULL},
	 { (char *)"Vertex_parent", _wrap_Vertex_parent, METH_VARARGS, NULL},
	 { (char *)"Vertex_child", _wrap_Vertex_child, METH_VARARGS, NULL},
	 { (char *)"Vertex_mesh", _wrap_Vertex_mesh, METH_VARARGS, NULL},
	 { (char *)"Vertex_coord", _wrap_Vertex_coord, METH_VARARGS, NULL},
	 { (char *)"Vertex_midpoint", _wrap_Vertex_midpoint, METH_VARARGS, NULL},
	 { (char *)"Vertex_dist", _wrap_Vertex_dist, METH_VARARGS, NULL},
	 { (char *)"Vertex_neighbor", _wrap_Vertex_neighbor, METH_VARARGS, NULL},
	 { (char *)"Vertex___ne__", _wrap_Vertex___ne__, METH_VARARGS, NULL},
	 { (char *)"Vertex___eq__", _wrap_Vertex___eq__, METH_VARARGS, NULL},
	 { (char *)"Vertex___lt__", _wrap_Vertex___lt__, METH_VARARGS, NULL},
	 { (char *)"Vertex___le__", _wrap_Vertex___le__, METH_VARARGS, NULL},
	 { (char *)"Vertex___gt__", _wrap_Vertex___gt__, METH_VARARGS, NULL},
	 { (char *)"Vertex___ge__", _wrap_Vertex___ge__, METH_VARARGS, NULL},
	 { (char *)"Vertex_nbids_set", _wrap_Vertex_nbids_set, METH_VARARGS, NULL},
	 { (char *)"Vertex_nbids_get", _wrap_Vertex_nbids_get, METH_VARARGS, NULL},
	 { (char *)"Vertex_swigregister", Vertex_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Edge", _wrap_new_Edge, METH_VARARGS, NULL},
	 { (char *)"delete_Edge", _wrap_delete_Edge, METH_VARARGS, NULL},
	 { (char *)"Edge_clear", _wrap_Edge_clear, METH_VARARGS, NULL},
	 { (char *)"Edge_id", _wrap_Edge_id, METH_VARARGS, NULL},
	 { (char *)"Edge_numCellNeighbors", _wrap_Edge_numCellNeighbors, METH_VARARGS, NULL},
	 { (char *)"Edge_vertex", _wrap_Edge_vertex, METH_VARARGS, NULL},
	 { (char *)"Edge_cell", _wrap_Edge_cell, METH_VARARGS, NULL},
	 { (char *)"Edge_mesh", _wrap_Edge_mesh, METH_VARARGS, NULL},
	 { (char *)"Edge_coord", _wrap_Edge_coord, METH_VARARGS, NULL},
	 { (char *)"Edge_length", _wrap_Edge_length, METH_VARARGS, NULL},
	 { (char *)"Edge_midpoint", _wrap_Edge_midpoint, METH_VARARGS, NULL},
	 { (char *)"Edge_equals", _wrap_Edge_equals, METH_VARARGS, NULL},
	 { (char *)"Edge_contains", _wrap_Edge_contains, METH_VARARGS, NULL},
	 { (char *)"Edge_ebids_set", _wrap_Edge_ebids_set, METH_VARARGS, NULL},
	 { (char *)"Edge_ebids_get", _wrap_Edge_ebids_get, METH_VARARGS, NULL},
	 { (char *)"Edge_swigregister", Edge_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Triangle", _wrap_new_Triangle, METH_VARARGS, NULL},
	 { (char *)"Triangle_numVertices", _wrap_Triangle_numVertices, METH_VARARGS, NULL},
	 { (char *)"Triangle_numEdges", _wrap_Triangle_numEdges, METH_VARARGS, NULL},
	 { (char *)"Triangle_numFaces", _wrap_Triangle_numFaces, METH_VARARGS, NULL},
	 { (char *)"Triangle_numBoundaries", _wrap_Triangle_numBoundaries, METH_VARARGS, NULL},
	 { (char *)"Triangle_type", _wrap_Triangle_type, METH_VARARGS, NULL},
	 { (char *)"Triangle_orientation", _wrap_Triangle_orientation, METH_VARARGS, NULL},
	 { (char *)"Triangle_volume", _wrap_Triangle_volume, METH_VARARGS, NULL},
	 { (char *)"Triangle_diameter", _wrap_Triangle_diameter, METH_VARARGS, NULL},
	 { (char *)"Triangle_edgeAlignment", _wrap_Triangle_edgeAlignment, METH_VARARGS, NULL},
	 { (char *)"Triangle_faceAlignment", _wrap_Triangle_faceAlignment, METH_VARARGS, NULL},
	 { (char *)"Triangle_swigregister", Triangle_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Tetrahedron", _wrap_new_Tetrahedron, METH_VARARGS, NULL},
	 { (char *)"Tetrahedron_numVertices", _wrap_Tetrahedron_numVertices, METH_VARARGS, NULL},
	 { (char *)"Tetrahedron_numEdges", _wrap_Tetrahedron_numEdges, METH_VARARGS, NULL},
	 { (char *)"Tetrahedron_numFaces", _wrap_Tetrahedron_numFaces, METH_VARARGS, NULL},
	 { (char *)"Tetrahedron_numBoundaries", _wrap_Tetrahedron_numBoundaries, METH_VARARGS, NULL},
	 { (char *)"Tetrahedron_type", _wrap_Tetrahedron_type, METH_VARARGS, NULL},
	 { (char *)"Tetrahedron_orientation", _wrap_Tetrahedron_orientation, METH_VARARGS, NULL},
	 { (char *)"Tetrahedron_volume", _wrap_Tetrahedron_volume, METH_VARARGS, NULL},
	 { (char *)"Tetrahedron_diameter", _wrap_Tetrahedron_diameter, METH_VARARGS, NULL},
	 { (char *)"Tetrahedron_edgeAlignment", _wrap_Tetrahedron_edgeAlignment, METH_VARARGS, NULL},
	 { (char *)"Tetrahedron_faceAlignment", _wrap_Tetrahedron_faceAlignment, METH_VARARGS, NULL},
	 { (char *)"Tetrahedron_swigregister", Tetrahedron_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Cell", _wrap_new_Cell, METH_VARARGS, NULL},
	 { (char *)"delete_Cell", _wrap_delete_Cell, METH_VARARGS, NULL},
	 { (char *)"Cell_clear", _wrap_Cell_clear, METH_VARARGS, NULL},
	 { (char *)"Cell_id", _wrap_Cell_id, METH_VARARGS, NULL},
	 { (char *)"Cell_type", _wrap_Cell_type, METH_VARARGS, NULL},
	 { (char *)"Cell_orientation", _wrap_Cell_orientation, METH_VARARGS, NULL},
	 { (char *)"Cell_numVertices", _wrap_Cell_numVertices, METH_VARARGS, NULL},
	 { (char *)"Cell_numEdges", _wrap_Cell_numEdges, METH_VARARGS, NULL},
	 { (char *)"Cell_numFaces", _wrap_Cell_numFaces, METH_VARARGS, NULL},
	 { (char *)"Cell_numBoundaries", _wrap_Cell_numBoundaries, METH_VARARGS, NULL},
	 { (char *)"Cell_numCellNeighbors", _wrap_Cell_numCellNeighbors, METH_VARARGS, NULL},
	 { (char *)"Cell_numVertexNeighbors", _wrap_Cell_numVertexNeighbors, METH_VARARGS, NULL},
	 { (char *)"Cell_numChildren", _wrap_Cell_numChildren, METH_VARARGS, NULL},
	 { (char *)"Cell_vertex", _wrap_Cell_vertex, METH_VARARGS, NULL},
	 { (char *)"Cell_edge", _wrap_Cell_edge, METH_VARARGS, NULL},
	 { (char *)"Cell_face", _wrap_Cell_face, METH_VARARGS, NULL},
	 { (char *)"Cell_neighbor", _wrap_Cell_neighbor, METH_VARARGS, NULL},
	 { (char *)"Cell_parent", _wrap_Cell_parent, METH_VARARGS, NULL},
	 { (char *)"Cell_child", _wrap_Cell_child, METH_VARARGS, NULL},
	 { (char *)"Cell_mesh", _wrap_Cell_mesh, METH_VARARGS, NULL},
	 { (char *)"Cell_coord", _wrap_Cell_coord, METH_VARARGS, NULL},
	 { (char *)"Cell_midpoint", _wrap_Cell_midpoint, METH_VARARGS, NULL},
	 { (char *)"Cell_vertexID", _wrap_Cell_vertexID, METH_VARARGS, NULL},
	 { (char *)"Cell_edgeID", _wrap_Cell_edgeID, METH_VARARGS, NULL},
	 { (char *)"Cell_faceID", _wrap_Cell_faceID, METH_VARARGS, NULL},
	 { (char *)"Cell_volume", _wrap_Cell_volume, METH_VARARGS, NULL},
	 { (char *)"Cell_diameter", _wrap_Cell_diameter, METH_VARARGS, NULL},
	 { (char *)"Cell_edgeAlignment", _wrap_Cell_edgeAlignment, METH_VARARGS, NULL},
	 { (char *)"Cell_faceAlignment", _wrap_Cell_faceAlignment, METH_VARARGS, NULL},
	 { (char *)"Cell___eq__", _wrap_Cell___eq__, METH_VARARGS, NULL},
	 { (char *)"Cell___ne__", _wrap_Cell___ne__, METH_VARARGS, NULL},
	 { (char *)"Cell_mark", _wrap_Cell_mark, METH_VARARGS, NULL},
	 { (char *)"Cell_swigregister", Cell_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Face", _wrap_new_Face, METH_VARARGS, NULL},
	 { (char *)"delete_Face", _wrap_delete_Face, METH_VARARGS, NULL},
	 { (char *)"Face_clear", _wrap_Face_clear, METH_VARARGS, NULL},
	 { (char *)"Face_id", _wrap_Face_id, METH_VARARGS, NULL},
	 { (char *)"Face_numEdges", _wrap_Face_numEdges, METH_VARARGS, NULL},
	 { (char *)"Face_numCellNeighbors", _wrap_Face_numCellNeighbors, METH_VARARGS, NULL},
	 { (char *)"Face_edge", _wrap_Face_edge, METH_VARARGS, NULL},
	 { (char *)"Face_cell", _wrap_Face_cell, METH_VARARGS, NULL},
	 { (char *)"Face_mesh", _wrap_Face_mesh, METH_VARARGS, NULL},
	 { (char *)"Face_equals", _wrap_Face_equals, METH_VARARGS, NULL},
	 { (char *)"Face_contains", _wrap_Face_contains, METH_VARARGS, NULL},
	 { (char *)"Face_fbids_set", _wrap_Face_fbids_set, METH_VARARGS, NULL},
	 { (char *)"Face_fbids_get", _wrap_Face_fbids_get, METH_VARARGS, NULL},
	 { (char *)"Face_swigregister", Face_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_VertexIterator", _wrap_new_VertexIterator, METH_VARARGS, NULL},
	 { (char *)"delete_VertexIterator", _wrap_delete_VertexIterator, METH_VARARGS, NULL},
	 { (char *)"VertexIterator_increment", _wrap_VertexIterator_increment, METH_VARARGS, NULL},
	 { (char *)"VertexIterator_end", _wrap_VertexIterator_end, METH_VARARGS, NULL},
	 { (char *)"VertexIterator_last", _wrap_VertexIterator_last, METH_VARARGS, NULL},
	 { (char *)"VertexIterator_index", _wrap_VertexIterator_index, METH_VARARGS, NULL},
	 { (char *)"VertexIterator___ref__", _wrap_VertexIterator___ref__, METH_VARARGS, NULL},
	 { (char *)"VertexIterator___deref__", _wrap_VertexIterator___deref__, METH_VARARGS, NULL},
	 { (char *)"VertexIterator___eq__", _wrap_VertexIterator___eq__, METH_VARARGS, NULL},
	 { (char *)"VertexIterator___ne__", _wrap_VertexIterator___ne__, METH_VARARGS, NULL},
	 { (char *)"VertexIterator_clear", _wrap_VertexIterator_clear, METH_VARARGS, NULL},
	 { (char *)"VertexIterator_id", _wrap_VertexIterator_id, METH_VARARGS, NULL},
	 { (char *)"VertexIterator_numVertexNeighbors", _wrap_VertexIterator_numVertexNeighbors, METH_VARARGS, NULL},
	 { (char *)"VertexIterator_numCellNeighbors", _wrap_VertexIterator_numCellNeighbors, METH_VARARGS, NULL},
	 { (char *)"VertexIterator_numEdgeNeighbors", _wrap_VertexIterator_numEdgeNeighbors, METH_VARARGS, NULL},
	 { (char *)"VertexIterator_vertex", _wrap_VertexIterator_vertex, METH_VARARGS, NULL},
	 { (char *)"VertexIterator_cell", _wrap_VertexIterator_cell, METH_VARARGS, NULL},
	 { (char *)"VertexIterator_edge", _wrap_VertexIterator_edge, METH_VARARGS, NULL},
	 { (char *)"VertexIterator_parent", _wrap_VertexIterator_parent, METH_VARARGS, NULL},
	 { (char *)"VertexIterator_child", _wrap_VertexIterator_child, METH_VARARGS, NULL},
	 { (char *)"VertexIterator_mesh", _wrap_VertexIterator_mesh, METH_VARARGS, NULL},
	 { (char *)"VertexIterator_coord", _wrap_VertexIterator_coord, METH_VARARGS, NULL},
	 { (char *)"VertexIterator_midpoint", _wrap_VertexIterator_midpoint, METH_VARARGS, NULL},
	 { (char *)"VertexIterator_dist", _wrap_VertexIterator_dist, METH_VARARGS, NULL},
	 { (char *)"VertexIterator_neighbor", _wrap_VertexIterator_neighbor, METH_VARARGS, NULL},
	 { (char *)"VertexIterator___lt__", _wrap_VertexIterator___lt__, METH_VARARGS, NULL},
	 { (char *)"VertexIterator___le__", _wrap_VertexIterator___le__, METH_VARARGS, NULL},
	 { (char *)"VertexIterator___gt__", _wrap_VertexIterator___gt__, METH_VARARGS, NULL},
	 { (char *)"VertexIterator___ge__", _wrap_VertexIterator___ge__, METH_VARARGS, NULL},
	 { (char *)"VertexIterator_nbids_set", _wrap_VertexIterator_nbids_set, METH_VARARGS, NULL},
	 { (char *)"VertexIterator_nbids_get", _wrap_VertexIterator_nbids_get, METH_VARARGS, NULL},
	 { (char *)"VertexIterator_swigregister", VertexIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CellIterator", _wrap_new_CellIterator, METH_VARARGS, NULL},
	 { (char *)"delete_CellIterator", _wrap_delete_CellIterator, METH_VARARGS, NULL},
	 { (char *)"CellIterator_increment", _wrap_CellIterator_increment, METH_VARARGS, NULL},
	 { (char *)"CellIterator_end", _wrap_CellIterator_end, METH_VARARGS, NULL},
	 { (char *)"CellIterator_last", _wrap_CellIterator_last, METH_VARARGS, NULL},
	 { (char *)"CellIterator_index", _wrap_CellIterator_index, METH_VARARGS, NULL},
	 { (char *)"CellIterator___ref__", _wrap_CellIterator___ref__, METH_VARARGS, NULL},
	 { (char *)"CellIterator___deref__", _wrap_CellIterator___deref__, METH_VARARGS, NULL},
	 { (char *)"CellIterator___eq__", _wrap_CellIterator___eq__, METH_VARARGS, NULL},
	 { (char *)"CellIterator___ne__", _wrap_CellIterator___ne__, METH_VARARGS, NULL},
	 { (char *)"CellIterator_clear", _wrap_CellIterator_clear, METH_VARARGS, NULL},
	 { (char *)"CellIterator_id", _wrap_CellIterator_id, METH_VARARGS, NULL},
	 { (char *)"CellIterator_type", _wrap_CellIterator_type, METH_VARARGS, NULL},
	 { (char *)"CellIterator_orientation", _wrap_CellIterator_orientation, METH_VARARGS, NULL},
	 { (char *)"CellIterator_numVertices", _wrap_CellIterator_numVertices, METH_VARARGS, NULL},
	 { (char *)"CellIterator_numEdges", _wrap_CellIterator_numEdges, METH_VARARGS, NULL},
	 { (char *)"CellIterator_numFaces", _wrap_CellIterator_numFaces, METH_VARARGS, NULL},
	 { (char *)"CellIterator_numBoundaries", _wrap_CellIterator_numBoundaries, METH_VARARGS, NULL},
	 { (char *)"CellIterator_numCellNeighbors", _wrap_CellIterator_numCellNeighbors, METH_VARARGS, NULL},
	 { (char *)"CellIterator_numVertexNeighbors", _wrap_CellIterator_numVertexNeighbors, METH_VARARGS, NULL},
	 { (char *)"CellIterator_numChildren", _wrap_CellIterator_numChildren, METH_VARARGS, NULL},
	 { (char *)"CellIterator_vertex", _wrap_CellIterator_vertex, METH_VARARGS, NULL},
	 { (char *)"CellIterator_edge", _wrap_CellIterator_edge, METH_VARARGS, NULL},
	 { (char *)"CellIterator_face", _wrap_CellIterator_face, METH_VARARGS, NULL},
	 { (char *)"CellIterator_neighbor", _wrap_CellIterator_neighbor, METH_VARARGS, NULL},
	 { (char *)"CellIterator_parent", _wrap_CellIterator_parent, METH_VARARGS, NULL},
	 { (char *)"CellIterator_child", _wrap_CellIterator_child, METH_VARARGS, NULL},
	 { (char *)"CellIterator_mesh", _wrap_CellIterator_mesh, METH_VARARGS, NULL},
	 { (char *)"CellIterator_coord", _wrap_CellIterator_coord, METH_VARARGS, NULL},
	 { (char *)"CellIterator_midpoint", _wrap_CellIterator_midpoint, METH_VARARGS, NULL},
	 { (char *)"CellIterator_vertexID", _wrap_CellIterator_vertexID, METH_VARARGS, NULL},
	 { (char *)"CellIterator_edgeID", _wrap_CellIterator_edgeID, METH_VARARGS, NULL},
	 { (char *)"CellIterator_faceID", _wrap_CellIterator_faceID, METH_VARARGS, NULL},
	 { (char *)"CellIterator_volume", _wrap_CellIterator_volume, METH_VARARGS, NULL},
	 { (char *)"CellIterator_diameter", _wrap_CellIterator_diameter, METH_VARARGS, NULL},
	 { (char *)"CellIterator_edgeAlignment", _wrap_CellIterator_edgeAlignment, METH_VARARGS, NULL},
	 { (char *)"CellIterator_faceAlignment", _wrap_CellIterator_faceAlignment, METH_VARARGS, NULL},
	 { (char *)"CellIterator_mark", _wrap_CellIterator_mark, METH_VARARGS, NULL},
	 { (char *)"CellIterator_swigregister", CellIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_EdgeIterator", _wrap_new_EdgeIterator, METH_VARARGS, NULL},
	 { (char *)"delete_EdgeIterator", _wrap_delete_EdgeIterator, METH_VARARGS, NULL},
	 { (char *)"EdgeIterator_increment", _wrap_EdgeIterator_increment, METH_VARARGS, NULL},
	 { (char *)"EdgeIterator_end", _wrap_EdgeIterator_end, METH_VARARGS, NULL},
	 { (char *)"EdgeIterator_last", _wrap_EdgeIterator_last, METH_VARARGS, NULL},
	 { (char *)"EdgeIterator_index", _wrap_EdgeIterator_index, METH_VARARGS, NULL},
	 { (char *)"EdgeIterator___ref__", _wrap_EdgeIterator___ref__, METH_VARARGS, NULL},
	 { (char *)"EdgeIterator___deref__", _wrap_EdgeIterator___deref__, METH_VARARGS, NULL},
	 { (char *)"EdgeIterator___eq__", _wrap_EdgeIterator___eq__, METH_VARARGS, NULL},
	 { (char *)"EdgeIterator___ne__", _wrap_EdgeIterator___ne__, METH_VARARGS, NULL},
	 { (char *)"EdgeIterator_clear", _wrap_EdgeIterator_clear, METH_VARARGS, NULL},
	 { (char *)"EdgeIterator_id", _wrap_EdgeIterator_id, METH_VARARGS, NULL},
	 { (char *)"EdgeIterator_numCellNeighbors", _wrap_EdgeIterator_numCellNeighbors, METH_VARARGS, NULL},
	 { (char *)"EdgeIterator_vertex", _wrap_EdgeIterator_vertex, METH_VARARGS, NULL},
	 { (char *)"EdgeIterator_cell", _wrap_EdgeIterator_cell, METH_VARARGS, NULL},
	 { (char *)"EdgeIterator_mesh", _wrap_EdgeIterator_mesh, METH_VARARGS, NULL},
	 { (char *)"EdgeIterator_coord", _wrap_EdgeIterator_coord, METH_VARARGS, NULL},
	 { (char *)"EdgeIterator_length", _wrap_EdgeIterator_length, METH_VARARGS, NULL},
	 { (char *)"EdgeIterator_midpoint", _wrap_EdgeIterator_midpoint, METH_VARARGS, NULL},
	 { (char *)"EdgeIterator_equals", _wrap_EdgeIterator_equals, METH_VARARGS, NULL},
	 { (char *)"EdgeIterator_contains", _wrap_EdgeIterator_contains, METH_VARARGS, NULL},
	 { (char *)"EdgeIterator_ebids_set", _wrap_EdgeIterator_ebids_set, METH_VARARGS, NULL},
	 { (char *)"EdgeIterator_ebids_get", _wrap_EdgeIterator_ebids_get, METH_VARARGS, NULL},
	 { (char *)"EdgeIterator_swigregister", EdgeIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FaceIterator", _wrap_new_FaceIterator, METH_VARARGS, NULL},
	 { (char *)"delete_FaceIterator", _wrap_delete_FaceIterator, METH_VARARGS, NULL},
	 { (char *)"FaceIterator_end", _wrap_FaceIterator_end, METH_VARARGS, NULL},
	 { (char *)"FaceIterator_last", _wrap_FaceIterator_last, METH_VARARGS, NULL},
	 { (char *)"FaceIterator_index", _wrap_FaceIterator_index, METH_VARARGS, NULL},
	 { (char *)"FaceIterator___ref__", _wrap_FaceIterator___ref__, METH_VARARGS, NULL},
	 { (char *)"FaceIterator___deref__", _wrap_FaceIterator___deref__, METH_VARARGS, NULL},
	 { (char *)"FaceIterator___eq__", _wrap_FaceIterator___eq__, METH_VARARGS, NULL},
	 { (char *)"FaceIterator___ne__", _wrap_FaceIterator___ne__, METH_VARARGS, NULL},
	 { (char *)"FaceIterator_clear", _wrap_FaceIterator_clear, METH_VARARGS, NULL},
	 { (char *)"FaceIterator_id", _wrap_FaceIterator_id, METH_VARARGS, NULL},
	 { (char *)"FaceIterator_numEdges", _wrap_FaceIterator_numEdges, METH_VARARGS, NULL},
	 { (char *)"FaceIterator_numCellNeighbors", _wrap_FaceIterator_numCellNeighbors, METH_VARARGS, NULL},
	 { (char *)"FaceIterator_edge", _wrap_FaceIterator_edge, METH_VARARGS, NULL},
	 { (char *)"FaceIterator_cell", _wrap_FaceIterator_cell, METH_VARARGS, NULL},
	 { (char *)"FaceIterator_mesh", _wrap_FaceIterator_mesh, METH_VARARGS, NULL},
	 { (char *)"FaceIterator_equals", _wrap_FaceIterator_equals, METH_VARARGS, NULL},
	 { (char *)"FaceIterator_contains", _wrap_FaceIterator_contains, METH_VARARGS, NULL},
	 { (char *)"FaceIterator_fbids_set", _wrap_FaceIterator_fbids_set, METH_VARARGS, NULL},
	 { (char *)"FaceIterator_fbids_get", _wrap_FaceIterator_fbids_get, METH_VARARGS, NULL},
	 { (char *)"FaceIterator_swigregister", FaceIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MeshIterator", _wrap_new_MeshIterator, METH_VARARGS, NULL},
	 { (char *)"delete_MeshIterator", _wrap_delete_MeshIterator, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_end", _wrap_MeshIterator_end, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_index", _wrap_MeshIterator_index, METH_VARARGS, NULL},
	 { (char *)"MeshIterator___ref__", _wrap_MeshIterator___ref__, METH_VARARGS, NULL},
	 { (char *)"MeshIterator___deref__", _wrap_MeshIterator___deref__, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_merge", _wrap_MeshIterator_merge, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_init", _wrap_MeshIterator_init, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_clear", _wrap_MeshIterator_clear, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_numSpaceDim", _wrap_MeshIterator_numSpaceDim, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_numVertices", _wrap_MeshIterator_numVertices, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_numCells", _wrap_MeshIterator_numCells, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_numEdges", _wrap_MeshIterator_numEdges, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_numFaces", _wrap_MeshIterator_numFaces, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_createVertex", _wrap_MeshIterator_createVertex, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_createCell", _wrap_MeshIterator_createCell, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_createEdge", _wrap_MeshIterator_createEdge, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_createFace", _wrap_MeshIterator_createFace, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_remove", _wrap_MeshIterator_remove, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_type", _wrap_MeshIterator_type, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_vertex", _wrap_MeshIterator_vertex, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_cell", _wrap_MeshIterator_cell, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_edge", _wrap_MeshIterator_edge, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_face", _wrap_MeshIterator_face, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_boundary", _wrap_MeshIterator_boundary, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_refine", _wrap_MeshIterator_refine, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_refineUniformly", _wrap_MeshIterator_refineUniformly, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_parent", _wrap_MeshIterator_parent, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_child", _wrap_MeshIterator_child, METH_VARARGS, NULL},
	 { (char *)"MeshIterator___eq__", _wrap_MeshIterator___eq__, METH_VARARGS, NULL},
	 { (char *)"MeshIterator___ne__", _wrap_MeshIterator___ne__, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_disp", _wrap_MeshIterator_disp, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_rename", _wrap_MeshIterator_rename, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_name", _wrap_MeshIterator_name, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_label", _wrap_MeshIterator_label, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_number", _wrap_MeshIterator_number, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_swigregister", MeshIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_UnitSquare", _wrap_new_UnitSquare, METH_VARARGS, NULL},
	 { (char *)"UnitSquare_swigregister", UnitSquare_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_UnitCube", _wrap_new_UnitCube, METH_VARARGS, NULL},
	 { (char *)"UnitCube_swigregister", UnitCube_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Dependencies", _wrap_new_Dependencies, METH_VARARGS, NULL},
	 { (char *)"delete_Dependencies", _wrap_delete_Dependencies, METH_VARARGS, NULL},
	 { (char *)"Dependencies_setsize", _wrap_Dependencies_setsize, METH_VARARGS, NULL},
	 { (char *)"Dependencies_set", _wrap_Dependencies_set, METH_VARARGS, NULL},
	 { (char *)"Dependencies_transp", _wrap_Dependencies_transp, METH_VARARGS, NULL},
	 { (char *)"Dependencies_detect", _wrap_Dependencies_detect, METH_VARARGS, NULL},
	 { (char *)"Dependencies_sparse", _wrap_Dependencies_sparse, METH_VARARGS, NULL},
	 { (char *)"Dependencies_disp", _wrap_Dependencies_disp, METH_VARARGS, NULL},
	 { (char *)"Dependencies_swigregister", Dependencies_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_Homotopy", _wrap_delete_Homotopy, METH_VARARGS, NULL},
	 { (char *)"Homotopy_solve", _wrap_Homotopy_solve, METH_VARARGS, NULL},
	 { (char *)"Homotopy_solutions", _wrap_Homotopy_solutions, METH_VARARGS, NULL},
	 { (char *)"Homotopy_z0", _wrap_Homotopy_z0, METH_VARARGS, NULL},
	 { (char *)"Homotopy_F", _wrap_Homotopy_F, METH_VARARGS, NULL},
	 { (char *)"Homotopy_JF", _wrap_Homotopy_JF, METH_VARARGS, NULL},
	 { (char *)"Homotopy_G", _wrap_Homotopy_G, METH_VARARGS, NULL},
	 { (char *)"Homotopy_JG", _wrap_Homotopy_JG, METH_VARARGS, NULL},
	 { (char *)"Homotopy_modify", _wrap_Homotopy_modify, METH_VARARGS, NULL},
	 { (char *)"Homotopy_verify", _wrap_Homotopy_verify, METH_VARARGS, NULL},
	 { (char *)"Homotopy_degree", _wrap_Homotopy_degree, METH_VARARGS, NULL},
	 { (char *)"Homotopy_swigregister", Homotopy_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_HomotopyJacobian", _wrap_new_HomotopyJacobian, METH_VARARGS, NULL},
	 { (char *)"delete_HomotopyJacobian", _wrap_delete_HomotopyJacobian, METH_VARARGS, NULL},
	 { (char *)"HomotopyJacobian_mult", _wrap_HomotopyJacobian_mult, METH_VARARGS, NULL},
	 { (char *)"HomotopyJacobian_swigregister", HomotopyJacobian_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_HomotopyODE", _wrap_new_HomotopyODE, METH_VARARGS, NULL},
	 { (char *)"delete_HomotopyODE", _wrap_delete_HomotopyODE, METH_VARARGS, NULL},
	 { (char *)"HomotopyODE_z0", _wrap_HomotopyODE_z0, METH_VARARGS, NULL},
	 { (char *)"HomotopyODE_f", _wrap_HomotopyODE_f, METH_VARARGS, NULL},
	 { (char *)"HomotopyODE_M", _wrap_HomotopyODE_M, METH_VARARGS, NULL},
	 { (char *)"HomotopyODE_J", _wrap_HomotopyODE_J, METH_VARARGS, NULL},
	 { (char *)"HomotopyODE_update", _wrap_HomotopyODE_update, METH_VARARGS, NULL},
	 { (char *)"HomotopyODE_state", _wrap_HomotopyODE_state, METH_VARARGS, NULL},
	 { (char *)"HomotopyODE_swigregister", HomotopyODE_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_Method", _wrap_delete_Method, METH_VARARGS, NULL},
	 { (char *)"Method_type", _wrap_Method_type, METH_VARARGS, NULL},
	 { (char *)"Method_degree", _wrap_Method_degree, METH_VARARGS, NULL},
	 { (char *)"Method_order", _wrap_Method_order, METH_VARARGS, NULL},
	 { (char *)"Method_nsize", _wrap_Method_nsize, METH_VARARGS, NULL},
	 { (char *)"Method_qsize", _wrap_Method_qsize, METH_VARARGS, NULL},
	 { (char *)"Method_npoint", _wrap_Method_npoint, METH_VARARGS, NULL},
	 { (char *)"Method_qpoint", _wrap_Method_qpoint, METH_VARARGS, NULL},
	 { (char *)"Method_nweight", _wrap_Method_nweight, METH_VARARGS, NULL},
	 { (char *)"Method_qweight", _wrap_Method_qweight, METH_VARARGS, NULL},
	 { (char *)"Method_eval", _wrap_Method_eval, METH_VARARGS, NULL},
	 { (char *)"Method_derivative", _wrap_Method_derivative, METH_VARARGS, NULL},
	 { (char *)"Method_update", _wrap_Method_update, METH_VARARGS, NULL},
	 { (char *)"Method_ueval", _wrap_Method_ueval, METH_VARARGS, NULL},
	 { (char *)"Method_residual", _wrap_Method_residual, METH_VARARGS, NULL},
	 { (char *)"Method_timestep", _wrap_Method_timestep, METH_VARARGS, NULL},
	 { (char *)"Method_error", _wrap_Method_error, METH_VARARGS, NULL},
	 { (char *)"Method_disp", _wrap_Method_disp, METH_VARARGS, NULL},
	 { (char *)"Method_swigregister", Method_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MonoAdaptiveFixedPointSolver", _wrap_new_MonoAdaptiveFixedPointSolver, METH_VARARGS, NULL},
	 { (char *)"delete_MonoAdaptiveFixedPointSolver", _wrap_delete_MonoAdaptiveFixedPointSolver, METH_VARARGS, NULL},
	 { (char *)"MonoAdaptiveFixedPointSolver_swigregister", MonoAdaptiveFixedPointSolver_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MonoAdaptiveJacobian", _wrap_new_MonoAdaptiveJacobian, METH_VARARGS, NULL},
	 { (char *)"delete_MonoAdaptiveJacobian", _wrap_delete_MonoAdaptiveJacobian, METH_VARARGS, NULL},
	 { (char *)"MonoAdaptiveJacobian_mult", _wrap_MonoAdaptiveJacobian_mult, METH_VARARGS, NULL},
	 { (char *)"MonoAdaptiveJacobian_swigregister", MonoAdaptiveJacobian_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MonoAdaptiveNewtonSolver", _wrap_new_MonoAdaptiveNewtonSolver, METH_VARARGS, NULL},
	 { (char *)"delete_MonoAdaptiveNewtonSolver", _wrap_delete_MonoAdaptiveNewtonSolver, METH_VARARGS, NULL},
	 { (char *)"MonoAdaptiveNewtonSolver_swigregister", MonoAdaptiveNewtonSolver_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MonoAdaptiveTimeSlab", _wrap_new_MonoAdaptiveTimeSlab, METH_VARARGS, NULL},
	 { (char *)"delete_MonoAdaptiveTimeSlab", _wrap_delete_MonoAdaptiveTimeSlab, METH_VARARGS, NULL},
	 { (char *)"MonoAdaptiveTimeSlab_build", _wrap_MonoAdaptiveTimeSlab_build, METH_VARARGS, NULL},
	 { (char *)"MonoAdaptiveTimeSlab_solve", _wrap_MonoAdaptiveTimeSlab_solve, METH_VARARGS, NULL},
	 { (char *)"MonoAdaptiveTimeSlab_check", _wrap_MonoAdaptiveTimeSlab_check, METH_VARARGS, NULL},
	 { (char *)"MonoAdaptiveTimeSlab_shift", _wrap_MonoAdaptiveTimeSlab_shift, METH_VARARGS, NULL},
	 { (char *)"MonoAdaptiveTimeSlab_sample", _wrap_MonoAdaptiveTimeSlab_sample, METH_VARARGS, NULL},
	 { (char *)"MonoAdaptiveTimeSlab_usample", _wrap_MonoAdaptiveTimeSlab_usample, METH_VARARGS, NULL},
	 { (char *)"MonoAdaptiveTimeSlab_ksample", _wrap_MonoAdaptiveTimeSlab_ksample, METH_VARARGS, NULL},
	 { (char *)"MonoAdaptiveTimeSlab_rsample", _wrap_MonoAdaptiveTimeSlab_rsample, METH_VARARGS, NULL},
	 { (char *)"MonoAdaptiveTimeSlab_disp", _wrap_MonoAdaptiveTimeSlab_disp, METH_VARARGS, NULL},
	 { (char *)"MonoAdaptiveTimeSlab_swigregister", MonoAdaptiveTimeSlab_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MonoAdaptivity", _wrap_new_MonoAdaptivity, METH_VARARGS, NULL},
	 { (char *)"delete_MonoAdaptivity", _wrap_delete_MonoAdaptivity, METH_VARARGS, NULL},
	 { (char *)"MonoAdaptivity_timestep", _wrap_MonoAdaptivity_timestep, METH_VARARGS, NULL},
	 { (char *)"MonoAdaptivity_update", _wrap_MonoAdaptivity_update, METH_VARARGS, NULL},
	 { (char *)"MonoAdaptivity_swigregister", MonoAdaptivity_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MultiAdaptiveFixedPointSolver", _wrap_new_MultiAdaptiveFixedPointSolver, METH_VARARGS, NULL},
	 { (char *)"delete_MultiAdaptiveFixedPointSolver", _wrap_delete_MultiAdaptiveFixedPointSolver, METH_VARARGS, NULL},
	 { (char *)"MultiAdaptiveFixedPointSolver_swigregister", MultiAdaptiveFixedPointSolver_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MultiAdaptivePreconditioner", _wrap_new_MultiAdaptivePreconditioner, METH_VARARGS, NULL},
	 { (char *)"delete_MultiAdaptivePreconditioner", _wrap_delete_MultiAdaptivePreconditioner, METH_VARARGS, NULL},
	 { (char *)"MultiAdaptivePreconditioner_solve", _wrap_MultiAdaptivePreconditioner_solve, METH_VARARGS, NULL},
	 { (char *)"MultiAdaptivePreconditioner_swigregister", MultiAdaptivePreconditioner_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MultiAdaptiveNewtonSolver", _wrap_new_MultiAdaptiveNewtonSolver, METH_VARARGS, NULL},
	 { (char *)"delete_MultiAdaptiveNewtonSolver", _wrap_delete_MultiAdaptiveNewtonSolver, METH_VARARGS, NULL},
	 { (char *)"MultiAdaptiveNewtonSolver_swigregister", MultiAdaptiveNewtonSolver_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MultiAdaptiveTimeSlab", _wrap_new_MultiAdaptiveTimeSlab, METH_VARARGS, NULL},
	 { (char *)"delete_MultiAdaptiveTimeSlab", _wrap_delete_MultiAdaptiveTimeSlab, METH_VARARGS, NULL},
	 { (char *)"MultiAdaptiveTimeSlab_build", _wrap_MultiAdaptiveTimeSlab_build, METH_VARARGS, NULL},
	 { (char *)"MultiAdaptiveTimeSlab_solve", _wrap_MultiAdaptiveTimeSlab_solve, METH_VARARGS, NULL},
	 { (char *)"MultiAdaptiveTimeSlab_check", _wrap_MultiAdaptiveTimeSlab_check, METH_VARARGS, NULL},
	 { (char *)"MultiAdaptiveTimeSlab_shift", _wrap_MultiAdaptiveTimeSlab_shift, METH_VARARGS, NULL},
	 { (char *)"MultiAdaptiveTimeSlab_reset", _wrap_MultiAdaptiveTimeSlab_reset, METH_VARARGS, NULL},
	 { (char *)"MultiAdaptiveTimeSlab_sample", _wrap_MultiAdaptiveTimeSlab_sample, METH_VARARGS, NULL},
	 { (char *)"MultiAdaptiveTimeSlab_usample", _wrap_MultiAdaptiveTimeSlab_usample, METH_VARARGS, NULL},
	 { (char *)"MultiAdaptiveTimeSlab_ksample", _wrap_MultiAdaptiveTimeSlab_ksample, METH_VARARGS, NULL},
	 { (char *)"MultiAdaptiveTimeSlab_rsample", _wrap_MultiAdaptiveTimeSlab_rsample, METH_VARARGS, NULL},
	 { (char *)"MultiAdaptiveTimeSlab_disp", _wrap_MultiAdaptiveTimeSlab_disp, METH_VARARGS, NULL},
	 { (char *)"MultiAdaptiveTimeSlab_swigregister", MultiAdaptiveTimeSlab_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MultiAdaptivity", _wrap_new_MultiAdaptivity, METH_VARARGS, NULL},
	 { (char *)"delete_MultiAdaptivity", _wrap_delete_MultiAdaptivity, METH_VARARGS, NULL},
	 { (char *)"MultiAdaptivity_timestep", _wrap_MultiAdaptivity_timestep, METH_VARARGS, NULL},
	 { (char *)"MultiAdaptivity_residual", _wrap_MultiAdaptivity_residual, METH_VARARGS, NULL},
	 { (char *)"MultiAdaptivity_update", _wrap_MultiAdaptivity_update, METH_VARARGS, NULL},
	 { (char *)"MultiAdaptivity_swigregister", MultiAdaptivity_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ODE", _wrap_new_ODE, METH_VARARGS, NULL},
	 { (char *)"delete_ODE", _wrap_delete_ODE, METH_VARARGS, NULL},
	 { (char *)"ODE_u0", _wrap_ODE_u0, METH_VARARGS, NULL},
	 { (char *)"ODE_fmulti", _wrap_ODE_fmulti, METH_VARARGS, NULL},
	 { (char *)"ODE_fmono", _wrap_ODE_fmono, METH_VARARGS, NULL},
	 { (char *)"ODE_M", _wrap_ODE_M, METH_VARARGS, NULL},
	 { (char *)"ODE_J", _wrap_ODE_J, METH_VARARGS, NULL},
	 { (char *)"ODE_dfdu", _wrap_ODE_dfdu, METH_VARARGS, NULL},
	 { (char *)"ODE_timestep", _wrap_ODE_timestep, METH_VARARGS, NULL},
	 { (char *)"ODE_update", _wrap_ODE_update, METH_VARARGS, NULL},
	 { (char *)"ODE_save", _wrap_ODE_save, METH_VARARGS, NULL},
	 { (char *)"ODE_sparse", _wrap_ODE_sparse, METH_VARARGS, NULL},
	 { (char *)"ODE_size", _wrap_ODE_size, METH_VARARGS, NULL},
	 { (char *)"ODE_endtime", _wrap_ODE_endtime, METH_VARARGS, NULL},
	 { (char *)"ODE_solve", _wrap_ODE_solve, METH_VARARGS, NULL},
	 { (char *)"disown_ODE", _wrap_disown_ODE, METH_VARARGS, NULL},
	 { (char *)"ODE_swigregister", ODE_swigregister, METH_VARARGS, NULL},
	 { (char *)"ODESolver_solve", _wrap_ODESolver_solve, METH_VARARGS, NULL},
	 { (char *)"ODESolver_swigregister", ODESolver_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ParticleSystem", _wrap_new_ParticleSystem, METH_VARARGS, NULL},
	 { (char *)"delete_ParticleSystem", _wrap_delete_ParticleSystem, METH_VARARGS, NULL},
	 { (char *)"ParticleSystem_x0", _wrap_ParticleSystem_x0, METH_VARARGS, NULL},
	 { (char *)"ParticleSystem_y0", _wrap_ParticleSystem_y0, METH_VARARGS, NULL},
	 { (char *)"ParticleSystem_z0", _wrap_ParticleSystem_z0, METH_VARARGS, NULL},
	 { (char *)"ParticleSystem_vx0", _wrap_ParticleSystem_vx0, METH_VARARGS, NULL},
	 { (char *)"ParticleSystem_vy0", _wrap_ParticleSystem_vy0, METH_VARARGS, NULL},
	 { (char *)"ParticleSystem_vz0", _wrap_ParticleSystem_vz0, METH_VARARGS, NULL},
	 { (char *)"ParticleSystem_Fx", _wrap_ParticleSystem_Fx, METH_VARARGS, NULL},
	 { (char *)"ParticleSystem_Fy", _wrap_ParticleSystem_Fy, METH_VARARGS, NULL},
	 { (char *)"ParticleSystem_Fz", _wrap_ParticleSystem_Fz, METH_VARARGS, NULL},
	 { (char *)"ParticleSystem_mass", _wrap_ParticleSystem_mass, METH_VARARGS, NULL},
	 { (char *)"ParticleSystem_k", _wrap_ParticleSystem_k, METH_VARARGS, NULL},
	 { (char *)"ParticleSystem_u0", _wrap_ParticleSystem_u0, METH_VARARGS, NULL},
	 { (char *)"ParticleSystem_f", _wrap_ParticleSystem_f, METH_VARARGS, NULL},
	 { (char *)"ParticleSystem_timestep", _wrap_ParticleSystem_timestep, METH_VARARGS, NULL},
	 { (char *)"ParticleSystem_swigregister", ParticleSystem_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Partition", _wrap_new_Partition, METH_VARARGS, NULL},
	 { (char *)"delete_Partition", _wrap_delete_Partition, METH_VARARGS, NULL},
	 { (char *)"Partition_size", _wrap_Partition_size, METH_VARARGS, NULL},
	 { (char *)"Partition_index", _wrap_Partition_index, METH_VARARGS, NULL},
	 { (char *)"Partition_update", _wrap_Partition_update, METH_VARARGS, NULL},
	 { (char *)"Partition_debug", _wrap_Partition_debug, METH_VARARGS, NULL},
	 { (char *)"Partition_swigregister", Partition_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ReducedModel", _wrap_new_ReducedModel, METH_VARARGS, NULL},
	 { (char *)"delete_ReducedModel", _wrap_delete_ReducedModel, METH_VARARGS, NULL},
	 { (char *)"ReducedModel_f", _wrap_ReducedModel_f, METH_VARARGS, NULL},
	 { (char *)"ReducedModel_u0", _wrap_ReducedModel_u0, METH_VARARGS, NULL},
	 { (char *)"ReducedModel_swigregister", ReducedModel_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Sample", _wrap_new_Sample, METH_VARARGS, NULL},
	 { (char *)"delete_Sample", _wrap_delete_Sample, METH_VARARGS, NULL},
	 { (char *)"Sample_size", _wrap_Sample_size, METH_VARARGS, NULL},
	 { (char *)"Sample_t", _wrap_Sample_t, METH_VARARGS, NULL},
	 { (char *)"Sample_u", _wrap_Sample_u, METH_VARARGS, NULL},
	 { (char *)"Sample_k", _wrap_Sample_k, METH_VARARGS, NULL},
	 { (char *)"Sample_r", _wrap_Sample_r, METH_VARARGS, NULL},
	 { (char *)"Sample_swigregister", Sample_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_TimeSlab", _wrap_delete_TimeSlab, METH_VARARGS, NULL},
	 { (char *)"TimeSlab_build", _wrap_TimeSlab_build, METH_VARARGS, NULL},
	 { (char *)"TimeSlab_solve", _wrap_TimeSlab_solve, METH_VARARGS, NULL},
	 { (char *)"TimeSlab_check", _wrap_TimeSlab_check, METH_VARARGS, NULL},
	 { (char *)"TimeSlab_shift", _wrap_TimeSlab_shift, METH_VARARGS, NULL},
	 { (char *)"TimeSlab_sample", _wrap_TimeSlab_sample, METH_VARARGS, NULL},
	 { (char *)"TimeSlab_size", _wrap_TimeSlab_size, METH_VARARGS, NULL},
	 { (char *)"TimeSlab_starttime", _wrap_TimeSlab_starttime, METH_VARARGS, NULL},
	 { (char *)"TimeSlab_endtime", _wrap_TimeSlab_endtime, METH_VARARGS, NULL},
	 { (char *)"TimeSlab_length", _wrap_TimeSlab_length, METH_VARARGS, NULL},
	 { (char *)"TimeSlab_usample", _wrap_TimeSlab_usample, METH_VARARGS, NULL},
	 { (char *)"TimeSlab_ksample", _wrap_TimeSlab_ksample, METH_VARARGS, NULL},
	 { (char *)"TimeSlab_rsample", _wrap_TimeSlab_rsample, METH_VARARGS, NULL},
	 { (char *)"TimeSlab_disp", _wrap_TimeSlab_disp, METH_VARARGS, NULL},
	 { (char *)"TimeSlab_swigregister", TimeSlab_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_TimeSlabJacobian", _wrap_delete_TimeSlabJacobian, METH_VARARGS, NULL},
	 { (char *)"TimeSlabJacobian_mult", _wrap_TimeSlabJacobian_mult, METH_VARARGS, NULL},
	 { (char *)"TimeSlabJacobian_update", _wrap_TimeSlabJacobian_update, METH_VARARGS, NULL},
	 { (char *)"TimeSlabJacobian_swigregister", TimeSlabJacobian_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TimeStepper", _wrap_new_TimeStepper, METH_VARARGS, NULL},
	 { (char *)"delete_TimeStepper", _wrap_delete_TimeStepper, METH_VARARGS, NULL},
	 { (char *)"TimeStepper_solve", _wrap_TimeStepper_solve, METH_VARARGS, NULL},
	 { (char *)"TimeStepper_step", _wrap_TimeStepper_step, METH_VARARGS, NULL},
	 { (char *)"TimeStepper_finished", _wrap_TimeStepper_finished, METH_VARARGS, NULL},
	 { (char *)"TimeStepper_swigregister", TimeStepper_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_cGqMethod", _wrap_new_cGqMethod, METH_VARARGS, NULL},
	 { (char *)"cGqMethod_ueval", _wrap_cGqMethod_ueval, METH_VARARGS, NULL},
	 { (char *)"cGqMethod_residual", _wrap_cGqMethod_residual, METH_VARARGS, NULL},
	 { (char *)"cGqMethod_timestep", _wrap_cGqMethod_timestep, METH_VARARGS, NULL},
	 { (char *)"cGqMethod_error", _wrap_cGqMethod_error, METH_VARARGS, NULL},
	 { (char *)"cGqMethod_disp", _wrap_cGqMethod_disp, METH_VARARGS, NULL},
	 { (char *)"cGqMethod_swigregister", cGqMethod_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_dGqMethod", _wrap_new_dGqMethod, METH_VARARGS, NULL},
	 { (char *)"dGqMethod_ueval", _wrap_dGqMethod_ueval, METH_VARARGS, NULL},
	 { (char *)"dGqMethod_residual", _wrap_dGqMethod_residual, METH_VARARGS, NULL},
	 { (char *)"dGqMethod_timestep", _wrap_dGqMethod_timestep, METH_VARARGS, NULL},
	 { (char *)"dGqMethod_error", _wrap_dGqMethod_error, METH_VARARGS, NULL},
	 { (char *)"dGqMethod_disp", _wrap_dGqMethod_disp, METH_VARARGS, NULL},
	 { (char *)"dGqMethod_swigregister", dGqMethod_swigregister, METH_VARARGS, NULL},
	 { (char *)"set", _wrap_set, METH_VARARGS, NULL},
	 { (char *)"get", _wrap_get, METH_VARARGS, NULL},
	 { (char *)"assemble", _wrap_assemble, METH_VARARGS, NULL},
	 { (char *)"applyBC", _wrap_applyBC, METH_VARARGS, NULL},
	 { (char *)"new_ElasticityUpdatedSolver", _wrap_new_ElasticityUpdatedSolver, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_init", _wrap_ElasticityUpdatedSolver_init, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_step", _wrap_ElasticityUpdatedSolver_step, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_oldstep", _wrap_ElasticityUpdatedSolver_oldstep, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_fu", _wrap_ElasticityUpdatedSolver_fu, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_gather", _wrap_ElasticityUpdatedSolver_gather, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_preparestep", _wrap_ElasticityUpdatedSolver_preparestep, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_prepareiteration", _wrap_ElasticityUpdatedSolver_prepareiteration, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_save", _wrap_ElasticityUpdatedSolver_save, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_condsave", _wrap_ElasticityUpdatedSolver_condsave, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_solve", _wrap_ElasticityUpdatedSolver_solve, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_finterpolate", _wrap_ElasticityUpdatedSolver_finterpolate, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_plasticity", _wrap_ElasticityUpdatedSolver_plasticity, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_initmsigma", _wrap_ElasticityUpdatedSolver_initmsigma, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_initu0", _wrap_ElasticityUpdatedSolver_initu0, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_initJ0", _wrap_ElasticityUpdatedSolver_initJ0, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_computeJ", _wrap_ElasticityUpdatedSolver_computeJ, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_initF0Green", _wrap_ElasticityUpdatedSolver_initF0Green, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_computeFGreen", _wrap_ElasticityUpdatedSolver_computeFGreen, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_initF0Euler", _wrap_ElasticityUpdatedSolver_initF0Euler, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_computeFEuler", _wrap_ElasticityUpdatedSolver_computeFEuler, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_computeFBEuler", _wrap_ElasticityUpdatedSolver_computeFBEuler, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_computeBEuler", _wrap_ElasticityUpdatedSolver_computeBEuler, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_multF", _wrap_ElasticityUpdatedSolver_multF, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_multB", _wrap_ElasticityUpdatedSolver_multB, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_deform", _wrap_ElasticityUpdatedSolver_deform, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_mesh_set", _wrap_ElasticityUpdatedSolver_mesh_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_mesh_get", _wrap_ElasticityUpdatedSolver_mesh_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_f_set", _wrap_ElasticityUpdatedSolver_f_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_f_get", _wrap_ElasticityUpdatedSolver_f_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_v0_set", _wrap_ElasticityUpdatedSolver_v0_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_v0_get", _wrap_ElasticityUpdatedSolver_v0_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_rho_set", _wrap_ElasticityUpdatedSolver_rho_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_rho_get", _wrap_ElasticityUpdatedSolver_rho_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_E_set", _wrap_ElasticityUpdatedSolver_E_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_E_get", _wrap_ElasticityUpdatedSolver_E_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_nu_set", _wrap_ElasticityUpdatedSolver_nu_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_nu_get", _wrap_ElasticityUpdatedSolver_nu_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_nuv_set", _wrap_ElasticityUpdatedSolver_nuv_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_nuv_get", _wrap_ElasticityUpdatedSolver_nuv_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_nuplast_set", _wrap_ElasticityUpdatedSolver_nuplast_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_nuplast_get", _wrap_ElasticityUpdatedSolver_nuplast_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_bc_set", _wrap_ElasticityUpdatedSolver_bc_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_bc_get", _wrap_ElasticityUpdatedSolver_bc_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_k_set", _wrap_ElasticityUpdatedSolver_k_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_k_get", _wrap_ElasticityUpdatedSolver_k_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_T_set", _wrap_ElasticityUpdatedSolver_T_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_T_get", _wrap_ElasticityUpdatedSolver_T_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_counter_set", _wrap_ElasticityUpdatedSolver_counter_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_counter_get", _wrap_ElasticityUpdatedSolver_counter_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_lastsample_set", _wrap_ElasticityUpdatedSolver_lastsample_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_lastsample_get", _wrap_ElasticityUpdatedSolver_lastsample_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver__lambda_set", _wrap_ElasticityUpdatedSolver__lambda_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver__lambda_get", _wrap_ElasticityUpdatedSolver__lambda_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_mu_set", _wrap_ElasticityUpdatedSolver_mu_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_mu_get", _wrap_ElasticityUpdatedSolver_mu_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_t_set", _wrap_ElasticityUpdatedSolver_t_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_t_get", _wrap_ElasticityUpdatedSolver_t_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_rtol_set", _wrap_ElasticityUpdatedSolver_rtol_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_rtol_get", _wrap_ElasticityUpdatedSolver_rtol_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_maxiters_set", _wrap_ElasticityUpdatedSolver_maxiters_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_maxiters_get", _wrap_ElasticityUpdatedSolver_maxiters_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_do_plasticity_set", _wrap_ElasticityUpdatedSolver_do_plasticity_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_do_plasticity_get", _wrap_ElasticityUpdatedSolver_do_plasticity_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver__yield_set", _wrap_ElasticityUpdatedSolver__yield_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver__yield_get", _wrap_ElasticityUpdatedSolver__yield_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_savesamplefreq_set", _wrap_ElasticityUpdatedSolver_savesamplefreq_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_savesamplefreq_get", _wrap_ElasticityUpdatedSolver_savesamplefreq_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_fevals_set", _wrap_ElasticityUpdatedSolver_fevals_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_fevals_get", _wrap_ElasticityUpdatedSolver_fevals_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_Nv_set", _wrap_ElasticityUpdatedSolver_Nv_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_Nv_get", _wrap_ElasticityUpdatedSolver_Nv_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_Nsigma_set", _wrap_ElasticityUpdatedSolver_Nsigma_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_Nsigma_get", _wrap_ElasticityUpdatedSolver_Nsigma_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_Nsigmanorm_set", _wrap_ElasticityUpdatedSolver_Nsigmanorm_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_Nsigmanorm_get", _wrap_ElasticityUpdatedSolver_Nsigmanorm_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_ode_set", _wrap_ElasticityUpdatedSolver_ode_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_ode_get", _wrap_ElasticityUpdatedSolver_ode_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_ts_set", _wrap_ElasticityUpdatedSolver_ts_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_ts_get", _wrap_ElasticityUpdatedSolver_ts_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_element1_set", _wrap_ElasticityUpdatedSolver_element1_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_element1_get", _wrap_ElasticityUpdatedSolver_element1_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_element2_set", _wrap_ElasticityUpdatedSolver_element2_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_element2_get", _wrap_ElasticityUpdatedSolver_element2_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_element3_set", _wrap_ElasticityUpdatedSolver_element3_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_element3_get", _wrap_ElasticityUpdatedSolver_element3_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_x1_0_set", _wrap_ElasticityUpdatedSolver_x1_0_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_x1_0_get", _wrap_ElasticityUpdatedSolver_x1_0_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_x1_1_set", _wrap_ElasticityUpdatedSolver_x1_1_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_x1_1_get", _wrap_ElasticityUpdatedSolver_x1_1_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_x2_0_set", _wrap_ElasticityUpdatedSolver_x2_0_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_x2_0_get", _wrap_ElasticityUpdatedSolver_x2_0_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_x2_1_set", _wrap_ElasticityUpdatedSolver_x2_1_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_x2_1_get", _wrap_ElasticityUpdatedSolver_x2_1_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_b_set", _wrap_ElasticityUpdatedSolver_b_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_b_get", _wrap_ElasticityUpdatedSolver_b_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_m_set", _wrap_ElasticityUpdatedSolver_m_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_m_get", _wrap_ElasticityUpdatedSolver_m_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_msigma_set", _wrap_ElasticityUpdatedSolver_msigma_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_msigma_get", _wrap_ElasticityUpdatedSolver_msigma_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_stepresidual_set", _wrap_ElasticityUpdatedSolver_stepresidual_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_stepresidual_get", _wrap_ElasticityUpdatedSolver_stepresidual_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_xsigma0_set", _wrap_ElasticityUpdatedSolver_xsigma0_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_xsigma0_get", _wrap_ElasticityUpdatedSolver_xsigma0_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_xsigma1_set", _wrap_ElasticityUpdatedSolver_xsigma1_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_xsigma1_get", _wrap_ElasticityUpdatedSolver_xsigma1_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_xepsilon1_set", _wrap_ElasticityUpdatedSolver_xepsilon1_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_xepsilon1_get", _wrap_ElasticityUpdatedSolver_xepsilon1_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_xsigmanorm_set", _wrap_ElasticityUpdatedSolver_xsigmanorm_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_xsigmanorm_get", _wrap_ElasticityUpdatedSolver_xsigmanorm_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_xjaumann1_set", _wrap_ElasticityUpdatedSolver_xjaumann1_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_xjaumann1_get", _wrap_ElasticityUpdatedSolver_xjaumann1_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_xtmp1_set", _wrap_ElasticityUpdatedSolver_xtmp1_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_xtmp1_get", _wrap_ElasticityUpdatedSolver_xtmp1_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_xtmp2_set", _wrap_ElasticityUpdatedSolver_xtmp2_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_xtmp2_get", _wrap_ElasticityUpdatedSolver_xtmp2_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_xsigmatmp1_set", _wrap_ElasticityUpdatedSolver_xsigmatmp1_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_xsigmatmp1_get", _wrap_ElasticityUpdatedSolver_xsigmatmp1_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_xsigmatmp2_set", _wrap_ElasticityUpdatedSolver_xsigmatmp2_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_xsigmatmp2_get", _wrap_ElasticityUpdatedSolver_xsigmatmp2_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_fcontact_set", _wrap_ElasticityUpdatedSolver_fcontact_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_fcontact_get", _wrap_ElasticityUpdatedSolver_fcontact_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_Dummy_set", _wrap_ElasticityUpdatedSolver_Dummy_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_Dummy_get", _wrap_ElasticityUpdatedSolver_Dummy_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_dotu_x1_set", _wrap_ElasticityUpdatedSolver_dotu_x1_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_dotu_x1_get", _wrap_ElasticityUpdatedSolver_dotu_x1_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_dotu_x2_set", _wrap_ElasticityUpdatedSolver_dotu_x2_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_dotu_x2_get", _wrap_ElasticityUpdatedSolver_dotu_x2_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_dotu_xsigma_set", _wrap_ElasticityUpdatedSolver_dotu_xsigma_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_dotu_xsigma_get", _wrap_ElasticityUpdatedSolver_dotu_xsigma_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_dotu_set", _wrap_ElasticityUpdatedSolver_dotu_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_dotu_get", _wrap_ElasticityUpdatedSolver_dotu_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_dotu_x1sc_set", _wrap_ElasticityUpdatedSolver_dotu_x1sc_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_dotu_x1sc_get", _wrap_ElasticityUpdatedSolver_dotu_x1sc_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_dotu_x2sc_set", _wrap_ElasticityUpdatedSolver_dotu_x2sc_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_dotu_x2sc_get", _wrap_ElasticityUpdatedSolver_dotu_x2sc_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_dotu_xsigmasc_set", _wrap_ElasticityUpdatedSolver_dotu_xsigmasc_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_dotu_xsigmasc_get", _wrap_ElasticityUpdatedSolver_dotu_xsigmasc_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_dotu_x1is_set", _wrap_ElasticityUpdatedSolver_dotu_x1is_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_dotu_x1is_get", _wrap_ElasticityUpdatedSolver_dotu_x1is_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_dotu_x2is_set", _wrap_ElasticityUpdatedSolver_dotu_x2is_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_dotu_x2is_get", _wrap_ElasticityUpdatedSolver_dotu_x2is_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_dotu_xsigmais_set", _wrap_ElasticityUpdatedSolver_dotu_xsigmais_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_dotu_xsigmais_get", _wrap_ElasticityUpdatedSolver_dotu_xsigmais_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_dotu_x1_indices_set", _wrap_ElasticityUpdatedSolver_dotu_x1_indices_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_dotu_x1_indices_get", _wrap_ElasticityUpdatedSolver_dotu_x1_indices_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_dotu_x2_indices_set", _wrap_ElasticityUpdatedSolver_dotu_x2_indices_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_dotu_x2_indices_get", _wrap_ElasticityUpdatedSolver_dotu_x2_indices_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_dotu_xsigma_indices_set", _wrap_ElasticityUpdatedSolver_dotu_xsigma_indices_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_dotu_xsigma_indices_get", _wrap_ElasticityUpdatedSolver_dotu_xsigma_indices_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_v1_set", _wrap_ElasticityUpdatedSolver_v1_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_v1_get", _wrap_ElasticityUpdatedSolver_v1_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_u0_set", _wrap_ElasticityUpdatedSolver_u0_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_u0_get", _wrap_ElasticityUpdatedSolver_u0_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_u1_set", _wrap_ElasticityUpdatedSolver_u1_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_u1_get", _wrap_ElasticityUpdatedSolver_u1_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_sigma0_set", _wrap_ElasticityUpdatedSolver_sigma0_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_sigma0_get", _wrap_ElasticityUpdatedSolver_sigma0_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_sigma1_set", _wrap_ElasticityUpdatedSolver_sigma1_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_sigma1_get", _wrap_ElasticityUpdatedSolver_sigma1_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_epsilon1_set", _wrap_ElasticityUpdatedSolver_epsilon1_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_epsilon1_get", _wrap_ElasticityUpdatedSolver_epsilon1_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_sigmanorm_set", _wrap_ElasticityUpdatedSolver_sigmanorm_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_sigmanorm_get", _wrap_ElasticityUpdatedSolver_sigmanorm_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_Lv_set", _wrap_ElasticityUpdatedSolver_Lv_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_Lv_get", _wrap_ElasticityUpdatedSolver_Lv_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_Lsigma_set", _wrap_ElasticityUpdatedSolver_Lsigma_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_Lsigma_get", _wrap_ElasticityUpdatedSolver_Lsigma_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedSolver_swigregister", ElasticityUpdatedSolver_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ElasticityUpdatedODE", _wrap_new_ElasticityUpdatedODE, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedODE_u0", _wrap_ElasticityUpdatedODE_u0, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedODE_fmono", _wrap_ElasticityUpdatedODE_fmono, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedODE_update", _wrap_ElasticityUpdatedODE_update, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedODE_fromArray", _wrap_ElasticityUpdatedODE_fromArray, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedODE_toArray", _wrap_ElasticityUpdatedODE_toArray, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedODE_solver_set", _wrap_ElasticityUpdatedODE_solver_set, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedODE_solver_get", _wrap_ElasticityUpdatedODE_solver_get, METH_VARARGS, NULL},
	 { (char *)"ElasticityUpdatedODE_swigregister", ElasticityUpdatedODE_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_UtilBC", _wrap_new_UtilBC, METH_VARARGS, NULL},
	 { (char *)"UtilBC_eval", _wrap_UtilBC_eval, METH_VARARGS, NULL},
	 { (char *)"UtilBC_swigregister", UtilBC_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_dolfin__VectorTo_p_dolfin__Variable(void *x) {
    return (void *)((dolfin::Variable *)  ((dolfin::Vector *) x));
}
static void *_p_dolfin__UnitSquareTo_p_dolfin__Variable(void *x) {
    return (void *)((dolfin::Variable *) (dolfin::Mesh *) ((dolfin::UnitSquare *) x));
}
static void *_p_dolfin__MeshTo_p_dolfin__Variable(void *x) {
    return (void *)((dolfin::Variable *)  ((dolfin::Mesh *) x));
}
static void *_p_dolfin__FunctionTo_p_dolfin__Variable(void *x) {
    return (void *)((dolfin::Variable *)  ((dolfin::Function *) x));
}
static void *_p_dolfin__MatrixTo_p_dolfin__Variable(void *x) {
    return (void *)((dolfin::Variable *)  ((dolfin::Matrix *) x));
}
static void *_p_dolfin__UnitCubeTo_p_dolfin__Variable(void *x) {
    return (void *)((dolfin::Variable *) (dolfin::Mesh *) ((dolfin::UnitCube *) x));
}
static void *_p_dolfin__SampleTo_p_dolfin__Variable(void *x) {
    return (void *)((dolfin::Variable *)  ((dolfin::Sample *) x));
}
static void *_p_dolfin__BoundaryConditionTo_p_dolfin__TimeDependent(void *x) {
    return (void *)((dolfin::TimeDependent *)  ((dolfin::BoundaryCondition *) x));
}
static void *_p_dolfin__FunctionTo_p_dolfin__TimeDependent(void *x) {
    return (void *)((dolfin::TimeDependent *)  ((dolfin::Function *) x));
}
static void *_p_dolfin__UtilBCTo_p_dolfin__TimeDependent(void *x) {
    return (void *)((dolfin::TimeDependent *) (dolfin::BoundaryCondition *) ((dolfin::UtilBC *) x));
}
static void *_p_dolfin__MultiAdaptivePreconditionerTo_p_dolfin__Preconditioner(void *x) {
    return (void *)((dolfin::Preconditioner *)  ((dolfin::MultiAdaptivePreconditioner *) x));
}
static void *_p_dolfin__HomotopyJacobianTo_p_dolfin__VirtualMatrix(void *x) {
    return (void *)((dolfin::VirtualMatrix *)  ((dolfin::HomotopyJacobian *) x));
}
static void *_p_dolfin__TimeSlabJacobianTo_p_dolfin__VirtualMatrix(void *x) {
    return (void *)((dolfin::VirtualMatrix *)  ((dolfin::TimeSlabJacobian *) x));
}
static void *_p_dolfin__cGqMethodTo_p_dolfin__Method(void *x) {
    return (void *)((dolfin::Method *)  ((dolfin::cGqMethod *) x));
}
static void *_p_dolfin__dGqMethodTo_p_dolfin__Method(void *x) {
    return (void *)((dolfin::Method *)  ((dolfin::dGqMethod *) x));
}
static void *_p_dolfin__BilinearFormTo_p_dolfin__Form(void *x) {
    return (void *)((dolfin::Form *)  ((dolfin::BilinearForm *) x));
}
static void *_p_dolfin__LinearFormTo_p_dolfin__Form(void *x) {
    return (void *)((dolfin::Form *)  ((dolfin::LinearForm *) x));
}
static void *_p_dolfin__LUTo_p_dolfin__LinearSolver(void *x) {
    return (void *)((dolfin::LinearSolver *)  ((dolfin::LU *) x));
}
static void *_p_dolfin__KrylovSolverTo_p_dolfin__LinearSolver(void *x) {
    return (void *)((dolfin::LinearSolver *)  ((dolfin::KrylovSolver *) x));
}
static void *_p_dolfin__UnitSquareTo_p_dolfin__Mesh(void *x) {
    return (void *)((dolfin::Mesh *)  ((dolfin::UnitSquare *) x));
}
static void *_p_dolfin__UnitCubeTo_p_dolfin__Mesh(void *x) {
    return (void *)((dolfin::Mesh *)  ((dolfin::UnitCube *) x));
}
static void *_p_dolfin__ElasticityUpdatedODETo_p_dolfin__ODE(void *x) {
    return (void *)((dolfin::ODE *)  ((dolfin::ElasticityUpdatedODE *) x));
}
static void *_p_dolfin__ParticleSystemTo_p_dolfin__ODE(void *x) {
    return (void *)((dolfin::ODE *)  ((dolfin::ParticleSystem *) x));
}
static void *_p_dolfin__ReducedModelTo_p_dolfin__ODE(void *x) {
    return (void *)((dolfin::ODE *)  ((dolfin::ReducedModel *) x));
}
static void *_p_dolfin__UtilBCTo_p_dolfin__BoundaryCondition(void *x) {
    return (void *)((dolfin::BoundaryCondition *)  ((dolfin::UtilBC *) x));
}
static swig_type_info _swigt__p_Boundary = {"_p_Boundary", "Boundary *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DenseMatrix = {"_p_DenseMatrix", "DenseMatrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DenseVector = {"_p_DenseVector", "DenseVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Edge = {"_p_Edge", "Edge *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Face = {"_p_Face", "Face *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FunctionPointer = {"_p_FunctionPointer", "FunctionPointer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IS = {"_p_IS", "IS *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Index = {"_p_Index", "Index *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_KSP = {"_p_KSP", "KSP *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mat = {"_p_Mat", "Mat *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Preconditioner = {"_p_Preconditioner", "Preconditioner *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Preconditioner__Type = {"_p_Preconditioner__Type", "Preconditioner::Type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Vec = {"_p_Vec", "Vec *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VecScatter = {"_p_VecScatter", "VecScatter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__AffineMap = {"_p_dolfin__AffineMap", "dolfin::AffineMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__ArrayTstd__complexTdouble_t_p_t = {"_p_dolfin__ArrayTstd__complexTdouble_t_p_t", "dolfin::Array<std::complex<double > * > *|dolfin::Array<dolfin::complex * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__BLASFormData = {"_p_dolfin__BLASFormData", "dolfin::BLASFormData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__BilinearForm = {"_p_dolfin__BilinearForm", "dolfin::BilinearForm *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__Boundary = {"_p_dolfin__Boundary", "dolfin::Boundary *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__BoundaryCondition = {"_p_dolfin__BoundaryCondition", "dolfin::BoundaryCondition *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__BoundaryValue = {"_p_dolfin__BoundaryValue", "dolfin::BoundaryValue *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__Cell = {"_p_dolfin__Cell", "dolfin::Cell *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__CellIterator = {"_p_dolfin__CellIterator", "dolfin::CellIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__ComplexODE = {"_p_dolfin__ComplexODE", "dolfin::ComplexODE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__Dependencies = {"_p_dolfin__Dependencies", "dolfin::Dependencies *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__Edge = {"_p_dolfin__Edge", "dolfin::Edge *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__EdgeIterator = {"_p_dolfin__EdgeIterator", "dolfin::EdgeIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__EigenvalueSolver = {"_p_dolfin__EigenvalueSolver", "dolfin::EigenvalueSolver *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__ElasticityUpdatedODE = {"_p_dolfin__ElasticityUpdatedODE", "dolfin::ElasticityUpdatedODE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__ElasticityUpdatedSolver = {"_p_dolfin__ElasticityUpdatedSolver", "dolfin::ElasticityUpdatedSolver *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__FEM = {"_p_dolfin__FEM", "dolfin::FEM *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__Face = {"_p_dolfin__Face", "dolfin::Face *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__FaceIterator = {"_p_dolfin__FaceIterator", "dolfin::FaceIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__File = {"_p_dolfin__File", "dolfin::File *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__FiniteElement = {"_p_dolfin__FiniteElement", "dolfin::FiniteElement *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__FiniteElementSpec = {"_p_dolfin__FiniteElementSpec", "dolfin::FiniteElementSpec *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__Form = {"_p_dolfin__Form", "dolfin::Form *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__Function = {"_p_dolfin__Function", "dolfin::Function *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__GMRES = {"_p_dolfin__GMRES", "dolfin::GMRES *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__Homotopy = {"_p_dolfin__Homotopy", "dolfin::Homotopy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__HomotopyJacobian = {"_p_dolfin__HomotopyJacobian", "dolfin::HomotopyJacobian *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__HomotopyODE = {"_p_dolfin__HomotopyODE", "dolfin::HomotopyODE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__KrylovSolver = {"_p_dolfin__KrylovSolver", "dolfin::KrylovSolver *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__LU = {"_p_dolfin__LU", "dolfin::LU *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__LinearForm = {"_p_dolfin__LinearForm", "dolfin::LinearForm *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__LinearSolver = {"_p_dolfin__LinearSolver", "dolfin::LinearSolver *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__Matrix = {"_p_dolfin__Matrix", "dolfin::Matrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__MatrixElement = {"_p_dolfin__MatrixElement", "dolfin::MatrixElement *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__Mesh = {"_p_dolfin__Mesh", "dolfin::Mesh *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__MeshHierarchy = {"_p_dolfin__MeshHierarchy", "dolfin::MeshHierarchy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__MeshIterator = {"_p_dolfin__MeshIterator", "dolfin::MeshIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__Method = {"_p_dolfin__Method", "dolfin::Method *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__MonoAdaptiveFixedPointSolver = {"_p_dolfin__MonoAdaptiveFixedPointSolver", "dolfin::MonoAdaptiveFixedPointSolver *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__MonoAdaptiveJacobian = {"_p_dolfin__MonoAdaptiveJacobian", "dolfin::MonoAdaptiveJacobian *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__MonoAdaptiveNewtonSolver = {"_p_dolfin__MonoAdaptiveNewtonSolver", "dolfin::MonoAdaptiveNewtonSolver *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__MonoAdaptiveTimeSlab = {"_p_dolfin__MonoAdaptiveTimeSlab", "dolfin::MonoAdaptiveTimeSlab *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__MonoAdaptivity = {"_p_dolfin__MonoAdaptivity", "dolfin::MonoAdaptivity *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__MultiAdaptiveFixedPointSolver = {"_p_dolfin__MultiAdaptiveFixedPointSolver", "dolfin::MultiAdaptiveFixedPointSolver *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__MultiAdaptiveNewtonSolver = {"_p_dolfin__MultiAdaptiveNewtonSolver", "dolfin::MultiAdaptiveNewtonSolver *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__MultiAdaptivePreconditioner = {"_p_dolfin__MultiAdaptivePreconditioner", "dolfin::MultiAdaptivePreconditioner *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__MultiAdaptiveTimeSlab = {"_p_dolfin__MultiAdaptiveTimeSlab", "dolfin::MultiAdaptiveTimeSlab *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__MultiAdaptivity = {"_p_dolfin__MultiAdaptivity", "dolfin::MultiAdaptivity *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__ODE = {"_p_dolfin__ODE", "dolfin::ODE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__ODESolver = {"_p_dolfin__ODESolver", "dolfin::ODESolver *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__PETScManager = {"_p_dolfin__PETScManager", "dolfin::PETScManager *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__Parameter = {"_p_dolfin__Parameter", "dolfin::Parameter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__ParameterList = {"_p_dolfin__ParameterList", "dolfin::ParameterList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__ParticleSystem = {"_p_dolfin__ParticleSystem", "dolfin::ParticleSystem *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__Partition = {"_p_dolfin__Partition", "dolfin::Partition *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__Point = {"_p_dolfin__Point", "dolfin::Point *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__Preconditioner = {"_p_dolfin__Preconditioner", "dolfin::Preconditioner *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__ReducedModel = {"_p_dolfin__ReducedModel", "dolfin::ReducedModel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__Sample = {"_p_dolfin__Sample", "dolfin::Sample *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__Tetrahedron = {"_p_dolfin__Tetrahedron", "dolfin::Tetrahedron *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__TimeDependent = {"_p_dolfin__TimeDependent", "dolfin::TimeDependent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__TimeSlab = {"_p_dolfin__TimeSlab", "dolfin::TimeSlab *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__TimeSlabJacobian = {"_p_dolfin__TimeSlabJacobian", "dolfin::TimeSlabJacobian *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__TimeStepper = {"_p_dolfin__TimeStepper", "dolfin::TimeStepper *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__Triangle = {"_p_dolfin__Triangle", "dolfin::Triangle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__UnitCube = {"_p_dolfin__UnitCube", "dolfin::UnitCube *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__UnitSquare = {"_p_dolfin__UnitSquare", "dolfin::UnitSquare *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__UtilBC = {"_p_dolfin__UtilBC", "dolfin::UtilBC *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__Variable = {"_p_dolfin__Variable", "dolfin::Variable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__Vector = {"_p_dolfin__Vector", "dolfin::Vector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__VectorElement = {"_p_dolfin__VectorElement", "dolfin::VectorElement *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__Vertex = {"_p_dolfin__Vertex", "dolfin::Vertex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__VertexIterator = {"_p_dolfin__VertexIterator", "dolfin::VertexIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__VirtualMatrix = {"_p_dolfin__VirtualMatrix", "dolfin::VirtualMatrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__cGqMethod = {"_p_dolfin__cGqMethod", "dolfin::cGqMethod *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dolfin__dGqMethod = {"_p_dolfin__dGqMethod", "dolfin::dGqMethod *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *|dolfin::real *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__complexTdouble_t = {"_p_std__complexTdouble_t", "std::complex<double > *|dolfin::complex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setTint_t = {"_p_std__setTint_t", "std::set<int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *|dolfin::uint *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Boundary,
  &_swigt__p_DenseMatrix,
  &_swigt__p_DenseVector,
  &_swigt__p_Edge,
  &_swigt__p_Face,
  &_swigt__p_FunctionPointer,
  &_swigt__p_IS,
  &_swigt__p_Index,
  &_swigt__p_KSP,
  &_swigt__p_Mat,
  &_swigt__p_Preconditioner,
  &_swigt__p_Preconditioner__Type,
  &_swigt__p_Vec,
  &_swigt__p_VecScatter,
  &_swigt__p_char,
  &_swigt__p_dolfin__AffineMap,
  &_swigt__p_dolfin__ArrayTstd__complexTdouble_t_p_t,
  &_swigt__p_dolfin__BLASFormData,
  &_swigt__p_dolfin__BilinearForm,
  &_swigt__p_dolfin__Boundary,
  &_swigt__p_dolfin__BoundaryCondition,
  &_swigt__p_dolfin__BoundaryValue,
  &_swigt__p_dolfin__Cell,
  &_swigt__p_dolfin__CellIterator,
  &_swigt__p_dolfin__ComplexODE,
  &_swigt__p_dolfin__Dependencies,
  &_swigt__p_dolfin__Edge,
  &_swigt__p_dolfin__EdgeIterator,
  &_swigt__p_dolfin__EigenvalueSolver,
  &_swigt__p_dolfin__ElasticityUpdatedODE,
  &_swigt__p_dolfin__ElasticityUpdatedSolver,
  &_swigt__p_dolfin__FEM,
  &_swigt__p_dolfin__Face,
  &_swigt__p_dolfin__FaceIterator,
  &_swigt__p_dolfin__File,
  &_swigt__p_dolfin__FiniteElement,
  &_swigt__p_dolfin__FiniteElementSpec,
  &_swigt__p_dolfin__Form,
  &_swigt__p_dolfin__Function,
  &_swigt__p_dolfin__GMRES,
  &_swigt__p_dolfin__Homotopy,
  &_swigt__p_dolfin__HomotopyJacobian,
  &_swigt__p_dolfin__HomotopyODE,
  &_swigt__p_dolfin__KrylovSolver,
  &_swigt__p_dolfin__LU,
  &_swigt__p_dolfin__LinearForm,
  &_swigt__p_dolfin__LinearSolver,
  &_swigt__p_dolfin__Matrix,
  &_swigt__p_dolfin__MatrixElement,
  &_swigt__p_dolfin__Mesh,
  &_swigt__p_dolfin__MeshHierarchy,
  &_swigt__p_dolfin__MeshIterator,
  &_swigt__p_dolfin__Method,
  &_swigt__p_dolfin__MonoAdaptiveFixedPointSolver,
  &_swigt__p_dolfin__MonoAdaptiveJacobian,
  &_swigt__p_dolfin__MonoAdaptiveNewtonSolver,
  &_swigt__p_dolfin__MonoAdaptiveTimeSlab,
  &_swigt__p_dolfin__MonoAdaptivity,
  &_swigt__p_dolfin__MultiAdaptiveFixedPointSolver,
  &_swigt__p_dolfin__MultiAdaptiveNewtonSolver,
  &_swigt__p_dolfin__MultiAdaptivePreconditioner,
  &_swigt__p_dolfin__MultiAdaptiveTimeSlab,
  &_swigt__p_dolfin__MultiAdaptivity,
  &_swigt__p_dolfin__ODE,
  &_swigt__p_dolfin__ODESolver,
  &_swigt__p_dolfin__PETScManager,
  &_swigt__p_dolfin__Parameter,
  &_swigt__p_dolfin__ParameterList,
  &_swigt__p_dolfin__ParticleSystem,
  &_swigt__p_dolfin__Partition,
  &_swigt__p_dolfin__Point,
  &_swigt__p_dolfin__Preconditioner,
  &_swigt__p_dolfin__ReducedModel,
  &_swigt__p_dolfin__Sample,
  &_swigt__p_dolfin__Tetrahedron,
  &_swigt__p_dolfin__TimeDependent,
  &_swigt__p_dolfin__TimeSlab,
  &_swigt__p_dolfin__TimeSlabJacobian,
  &_swigt__p_dolfin__TimeStepper,
  &_swigt__p_dolfin__Triangle,
  &_swigt__p_dolfin__UnitCube,
  &_swigt__p_dolfin__UnitSquare,
  &_swigt__p_dolfin__UtilBC,
  &_swigt__p_dolfin__Variable,
  &_swigt__p_dolfin__Vector,
  &_swigt__p_dolfin__VectorElement,
  &_swigt__p_dolfin__Vertex,
  &_swigt__p_dolfin__VertexIterator,
  &_swigt__p_dolfin__VirtualMatrix,
  &_swigt__p_dolfin__cGqMethod,
  &_swigt__p_dolfin__dGqMethod,
  &_swigt__p_double,
  &_swigt__p_int,
  &_swigt__p_p_char,
  &_swigt__p_std__complexTdouble_t,
  &_swigt__p_std__setTint_t,
  &_swigt__p_unsigned_int,
};

static swig_cast_info _swigc__p_Boundary[] = {  {&_swigt__p_Boundary, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DenseMatrix[] = {  {&_swigt__p_DenseMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DenseVector[] = {  {&_swigt__p_DenseVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Edge[] = {  {&_swigt__p_Edge, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Face[] = {  {&_swigt__p_Face, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FunctionPointer[] = {  {&_swigt__p_FunctionPointer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IS[] = {  {&_swigt__p_IS, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Index[] = {  {&_swigt__p_Index, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KSP[] = {  {&_swigt__p_KSP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mat[] = {  {&_swigt__p_Mat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Preconditioner[] = {  {&_swigt__p_Preconditioner, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Preconditioner__Type[] = {  {&_swigt__p_Preconditioner__Type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Vec[] = {  {&_swigt__p_Vec, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VecScatter[] = {  {&_swigt__p_VecScatter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__AffineMap[] = {  {&_swigt__p_dolfin__AffineMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__ArrayTstd__complexTdouble_t_p_t[] = {  {&_swigt__p_dolfin__ArrayTstd__complexTdouble_t_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__BLASFormData[] = {  {&_swigt__p_dolfin__BLASFormData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__BilinearForm[] = {  {&_swigt__p_dolfin__BilinearForm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__Boundary[] = {  {&_swigt__p_dolfin__Boundary, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__BoundaryCondition[] = {  {&_swigt__p_dolfin__BoundaryCondition, 0, 0, 0},  {&_swigt__p_dolfin__UtilBC, _p_dolfin__UtilBCTo_p_dolfin__BoundaryCondition, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__BoundaryValue[] = {  {&_swigt__p_dolfin__BoundaryValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__Cell[] = {  {&_swigt__p_dolfin__Cell, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__CellIterator[] = {  {&_swigt__p_dolfin__CellIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__ComplexODE[] = {  {&_swigt__p_dolfin__ComplexODE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__Dependencies[] = {  {&_swigt__p_dolfin__Dependencies, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__Edge[] = {  {&_swigt__p_dolfin__Edge, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__EdgeIterator[] = {  {&_swigt__p_dolfin__EdgeIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__EigenvalueSolver[] = {  {&_swigt__p_dolfin__EigenvalueSolver, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__ElasticityUpdatedODE[] = {  {&_swigt__p_dolfin__ElasticityUpdatedODE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__ElasticityUpdatedSolver[] = {  {&_swigt__p_dolfin__ElasticityUpdatedSolver, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__FEM[] = {  {&_swigt__p_dolfin__FEM, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__Face[] = {  {&_swigt__p_dolfin__Face, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__FaceIterator[] = {  {&_swigt__p_dolfin__FaceIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__File[] = {  {&_swigt__p_dolfin__File, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__FiniteElement[] = {  {&_swigt__p_dolfin__FiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__FiniteElementSpec[] = {  {&_swigt__p_dolfin__FiniteElementSpec, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__Form[] = {  {&_swigt__p_dolfin__Form, 0, 0, 0},  {&_swigt__p_dolfin__BilinearForm, _p_dolfin__BilinearFormTo_p_dolfin__Form, 0, 0},  {&_swigt__p_dolfin__LinearForm, _p_dolfin__LinearFormTo_p_dolfin__Form, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__Function[] = {  {&_swigt__p_dolfin__Function, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__GMRES[] = {  {&_swigt__p_dolfin__GMRES, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__Homotopy[] = {  {&_swigt__p_dolfin__Homotopy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__HomotopyJacobian[] = {  {&_swigt__p_dolfin__HomotopyJacobian, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__HomotopyODE[] = {  {&_swigt__p_dolfin__HomotopyODE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__KrylovSolver[] = {  {&_swigt__p_dolfin__KrylovSolver, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__LU[] = {  {&_swigt__p_dolfin__LU, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__LinearForm[] = {  {&_swigt__p_dolfin__LinearForm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__LinearSolver[] = {  {&_swigt__p_dolfin__LinearSolver, 0, 0, 0},  {&_swigt__p_dolfin__KrylovSolver, _p_dolfin__KrylovSolverTo_p_dolfin__LinearSolver, 0, 0},  {&_swigt__p_dolfin__LU, _p_dolfin__LUTo_p_dolfin__LinearSolver, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__Matrix[] = {  {&_swigt__p_dolfin__Matrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__MatrixElement[] = {  {&_swigt__p_dolfin__MatrixElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__Mesh[] = {  {&_swigt__p_dolfin__UnitSquare, _p_dolfin__UnitSquareTo_p_dolfin__Mesh, 0, 0},  {&_swigt__p_dolfin__UnitCube, _p_dolfin__UnitCubeTo_p_dolfin__Mesh, 0, 0},  {&_swigt__p_dolfin__Mesh, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__MeshHierarchy[] = {  {&_swigt__p_dolfin__MeshHierarchy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__MeshIterator[] = {  {&_swigt__p_dolfin__MeshIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__Method[] = {  {&_swigt__p_dolfin__Method, 0, 0, 0},  {&_swigt__p_dolfin__cGqMethod, _p_dolfin__cGqMethodTo_p_dolfin__Method, 0, 0},  {&_swigt__p_dolfin__dGqMethod, _p_dolfin__dGqMethodTo_p_dolfin__Method, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__MonoAdaptiveFixedPointSolver[] = {  {&_swigt__p_dolfin__MonoAdaptiveFixedPointSolver, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__MonoAdaptiveJacobian[] = {  {&_swigt__p_dolfin__MonoAdaptiveJacobian, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__MonoAdaptiveNewtonSolver[] = {  {&_swigt__p_dolfin__MonoAdaptiveNewtonSolver, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__MonoAdaptiveTimeSlab[] = {  {&_swigt__p_dolfin__MonoAdaptiveTimeSlab, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__MonoAdaptivity[] = {  {&_swigt__p_dolfin__MonoAdaptivity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__MultiAdaptiveFixedPointSolver[] = {  {&_swigt__p_dolfin__MultiAdaptiveFixedPointSolver, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__MultiAdaptiveNewtonSolver[] = {  {&_swigt__p_dolfin__MultiAdaptiveNewtonSolver, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__MultiAdaptivePreconditioner[] = {  {&_swigt__p_dolfin__MultiAdaptivePreconditioner, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__MultiAdaptiveTimeSlab[] = {  {&_swigt__p_dolfin__MultiAdaptiveTimeSlab, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__MultiAdaptivity[] = {  {&_swigt__p_dolfin__MultiAdaptivity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__ODE[] = {  {&_swigt__p_dolfin__ElasticityUpdatedODE, _p_dolfin__ElasticityUpdatedODETo_p_dolfin__ODE, 0, 0},  {&_swigt__p_dolfin__ODE, 0, 0, 0},  {&_swigt__p_dolfin__ParticleSystem, _p_dolfin__ParticleSystemTo_p_dolfin__ODE, 0, 0},  {&_swigt__p_dolfin__ReducedModel, _p_dolfin__ReducedModelTo_p_dolfin__ODE, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__ODESolver[] = {  {&_swigt__p_dolfin__ODESolver, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__PETScManager[] = {  {&_swigt__p_dolfin__PETScManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__Parameter[] = {  {&_swigt__p_dolfin__Parameter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__ParameterList[] = {  {&_swigt__p_dolfin__ParameterList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__ParticleSystem[] = {  {&_swigt__p_dolfin__ParticleSystem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__Partition[] = {  {&_swigt__p_dolfin__Partition, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__Point[] = {  {&_swigt__p_dolfin__Point, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__Preconditioner[] = {  {&_swigt__p_dolfin__Preconditioner, 0, 0, 0},  {&_swigt__p_dolfin__MultiAdaptivePreconditioner, _p_dolfin__MultiAdaptivePreconditionerTo_p_dolfin__Preconditioner, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__ReducedModel[] = {  {&_swigt__p_dolfin__ReducedModel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__Sample[] = {  {&_swigt__p_dolfin__Sample, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__Tetrahedron[] = {  {&_swigt__p_dolfin__Tetrahedron, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__TimeDependent[] = {  {&_swigt__p_dolfin__TimeDependent, 0, 0, 0},  {&_swigt__p_dolfin__BoundaryCondition, _p_dolfin__BoundaryConditionTo_p_dolfin__TimeDependent, 0, 0},  {&_swigt__p_dolfin__Function, _p_dolfin__FunctionTo_p_dolfin__TimeDependent, 0, 0},  {&_swigt__p_dolfin__UtilBC, _p_dolfin__UtilBCTo_p_dolfin__TimeDependent, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__TimeSlab[] = {  {&_swigt__p_dolfin__TimeSlab, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__TimeSlabJacobian[] = {  {&_swigt__p_dolfin__TimeSlabJacobian, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__TimeStepper[] = {  {&_swigt__p_dolfin__TimeStepper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__Triangle[] = {  {&_swigt__p_dolfin__Triangle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__UnitCube[] = {  {&_swigt__p_dolfin__UnitCube, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__UnitSquare[] = {  {&_swigt__p_dolfin__UnitSquare, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__UtilBC[] = {  {&_swigt__p_dolfin__UtilBC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__Variable[] = {  {&_swigt__p_dolfin__UnitSquare, _p_dolfin__UnitSquareTo_p_dolfin__Variable, 0, 0},  {&_swigt__p_dolfin__Variable, 0, 0, 0},  {&_swigt__p_dolfin__Vector, _p_dolfin__VectorTo_p_dolfin__Variable, 0, 0},  {&_swigt__p_dolfin__Function, _p_dolfin__FunctionTo_p_dolfin__Variable, 0, 0},  {&_swigt__p_dolfin__UnitCube, _p_dolfin__UnitCubeTo_p_dolfin__Variable, 0, 0},  {&_swigt__p_dolfin__Mesh, _p_dolfin__MeshTo_p_dolfin__Variable, 0, 0},  {&_swigt__p_dolfin__Matrix, _p_dolfin__MatrixTo_p_dolfin__Variable, 0, 0},  {&_swigt__p_dolfin__Sample, _p_dolfin__SampleTo_p_dolfin__Variable, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__Vector[] = {  {&_swigt__p_dolfin__Vector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__VectorElement[] = {  {&_swigt__p_dolfin__VectorElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__Vertex[] = {  {&_swigt__p_dolfin__Vertex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__VertexIterator[] = {  {&_swigt__p_dolfin__VertexIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__VirtualMatrix[] = {  {&_swigt__p_dolfin__VirtualMatrix, 0, 0, 0},  {&_swigt__p_dolfin__HomotopyJacobian, _p_dolfin__HomotopyJacobianTo_p_dolfin__VirtualMatrix, 0, 0},  {&_swigt__p_dolfin__TimeSlabJacobian, _p_dolfin__TimeSlabJacobianTo_p_dolfin__VirtualMatrix, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__cGqMethod[] = {  {&_swigt__p_dolfin__cGqMethod, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__dGqMethod[] = {  {&_swigt__p_dolfin__dGqMethod, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexTdouble_t[] = {  {&_swigt__p_std__complexTdouble_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setTint_t[] = {  {&_swigt__p_std__setTint_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Boundary,
  _swigc__p_DenseMatrix,
  _swigc__p_DenseVector,
  _swigc__p_Edge,
  _swigc__p_Face,
  _swigc__p_FunctionPointer,
  _swigc__p_IS,
  _swigc__p_Index,
  _swigc__p_KSP,
  _swigc__p_Mat,
  _swigc__p_Preconditioner,
  _swigc__p_Preconditioner__Type,
  _swigc__p_Vec,
  _swigc__p_VecScatter,
  _swigc__p_char,
  _swigc__p_dolfin__AffineMap,
  _swigc__p_dolfin__ArrayTstd__complexTdouble_t_p_t,
  _swigc__p_dolfin__BLASFormData,
  _swigc__p_dolfin__BilinearForm,
  _swigc__p_dolfin__Boundary,
  _swigc__p_dolfin__BoundaryCondition,
  _swigc__p_dolfin__BoundaryValue,
  _swigc__p_dolfin__Cell,
  _swigc__p_dolfin__CellIterator,
  _swigc__p_dolfin__ComplexODE,
  _swigc__p_dolfin__Dependencies,
  _swigc__p_dolfin__Edge,
  _swigc__p_dolfin__EdgeIterator,
  _swigc__p_dolfin__EigenvalueSolver,
  _swigc__p_dolfin__ElasticityUpdatedODE,
  _swigc__p_dolfin__ElasticityUpdatedSolver,
  _swigc__p_dolfin__FEM,
  _swigc__p_dolfin__Face,
  _swigc__p_dolfin__FaceIterator,
  _swigc__p_dolfin__File,
  _swigc__p_dolfin__FiniteElement,
  _swigc__p_dolfin__FiniteElementSpec,
  _swigc__p_dolfin__Form,
  _swigc__p_dolfin__Function,
  _swigc__p_dolfin__GMRES,
  _swigc__p_dolfin__Homotopy,
  _swigc__p_dolfin__HomotopyJacobian,
  _swigc__p_dolfin__HomotopyODE,
  _swigc__p_dolfin__KrylovSolver,
  _swigc__p_dolfin__LU,
  _swigc__p_dolfin__LinearForm,
  _swigc__p_dolfin__LinearSolver,
  _swigc__p_dolfin__Matrix,
  _swigc__p_dolfin__MatrixElement,
  _swigc__p_dolfin__Mesh,
  _swigc__p_dolfin__MeshHierarchy,
  _swigc__p_dolfin__MeshIterator,
  _swigc__p_dolfin__Method,
  _swigc__p_dolfin__MonoAdaptiveFixedPointSolver,
  _swigc__p_dolfin__MonoAdaptiveJacobian,
  _swigc__p_dolfin__MonoAdaptiveNewtonSolver,
  _swigc__p_dolfin__MonoAdaptiveTimeSlab,
  _swigc__p_dolfin__MonoAdaptivity,
  _swigc__p_dolfin__MultiAdaptiveFixedPointSolver,
  _swigc__p_dolfin__MultiAdaptiveNewtonSolver,
  _swigc__p_dolfin__MultiAdaptivePreconditioner,
  _swigc__p_dolfin__MultiAdaptiveTimeSlab,
  _swigc__p_dolfin__MultiAdaptivity,
  _swigc__p_dolfin__ODE,
  _swigc__p_dolfin__ODESolver,
  _swigc__p_dolfin__PETScManager,
  _swigc__p_dolfin__Parameter,
  _swigc__p_dolfin__ParameterList,
  _swigc__p_dolfin__ParticleSystem,
  _swigc__p_dolfin__Partition,
  _swigc__p_dolfin__Point,
  _swigc__p_dolfin__Preconditioner,
  _swigc__p_dolfin__ReducedModel,
  _swigc__p_dolfin__Sample,
  _swigc__p_dolfin__Tetrahedron,
  _swigc__p_dolfin__TimeDependent,
  _swigc__p_dolfin__TimeSlab,
  _swigc__p_dolfin__TimeSlabJacobian,
  _swigc__p_dolfin__TimeStepper,
  _swigc__p_dolfin__Triangle,
  _swigc__p_dolfin__UnitCube,
  _swigc__p_dolfin__UnitSquare,
  _swigc__p_dolfin__UtilBC,
  _swigc__p_dolfin__Variable,
  _swigc__p_dolfin__Vector,
  _swigc__p_dolfin__VectorElement,
  _swigc__p_dolfin__Vertex,
  _swigc__p_dolfin__VertexIterator,
  _swigc__p_dolfin__VirtualMatrix,
  _swigc__p_dolfin__cGqMethod,
  _swigc__p_dolfin__dGqMethod,
  _swigc__p_double,
  _swigc__p_int,
  _swigc__p_p_char,
  _swigc__p_std__complexTdouble_t,
  _swigc__p_std__setTint_t,
  _swigc__p_unsigned_int,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/*************************************************************************
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.

 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop though that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.

 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
**/

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head;
  static int init_run = 0;
  
  clientdata = clientdata;
  
  if (init_run) return;
  init_run = 1;
  
  /* Initialize the swig_module */
  swig_module.type_initial = swig_type_initial;
  swig_module.cast_initial = swig_cast_initial;
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (module_head) {
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  } else {
    /* This is the first module loaded */
    swig_module.next = &swig_module;
    SWIG_SetModule(clientdata, &swig_module);
  }
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
    return PyString_FromString("<Swig global variables>");
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
    PyObject *str = PyString_FromString("(");
    swig_globalvar  *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", PyString_AsString(str));
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;  
    if (!type_init) {
      const PyTypeObject tmp
      = {
        PyObject_HEAD_INIT(NULL)
        0,                                  /* Number of items in variable part (ob_size) */
        (char *)"swigvarlink",              /* Type name (tp_name) */
        sizeof(swig_varlinkobject),         /* Basic size (tp_basicsize) */
        0,                                  /* Itemsize (tp_itemsize) */
        (destructor) swig_varlink_dealloc,   /* Deallocator (tp_dealloc) */ 
        (printfunc) swig_varlink_print,     /* Print (tp_print) */
        (getattrfunc) swig_varlink_getattr, /* get attr (tp_getattr) */
        (setattrfunc) swig_varlink_setattr, /* Set attr (tp_setattr) */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc)swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
      varlink_type = tmp;
      varlink_type.ob_type = &PyType_Type;
      type_init = 1;
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals() {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      char *c = methods[i].ml_doc;
      if (c && (c = strstr(c, "swig_ptr: "))) {
        int j;
        swig_const_info *ci = 0;
        char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          size_t shift = (ci->ptype) - types;
          swig_type_info *ty = types_initial[shift];
          size_t ldoc = (c - methods[i].ml_doc);
          size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
          char *ndoc = (char*)malloc(ldoc + lptr + 10);
          if (ndoc) {
            char *buff = ndoc;
            void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
            if (ptr) {
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIG_init(void) {
  PyObject *m, *d;
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
  d = PyModule_GetDict(m);
  
  SWIG_InitializeModule(0);
  SWIG_InstallConstants(d,swig_const_table);
  
  
  SWIG_Python_SetConstant(d, "Parameter_type_real",SWIG_From_int(static_cast<int >(dolfin::Parameter::type_real)));
  SWIG_Python_SetConstant(d, "Parameter_type_int",SWIG_From_int(static_cast<int >(dolfin::Parameter::type_int)));
  SWIG_Python_SetConstant(d, "Parameter_type_bool",SWIG_From_int(static_cast<int >(dolfin::Parameter::type_bool)));
  SWIG_Python_SetConstant(d, "Parameter_type_string",SWIG_From_int(static_cast<int >(dolfin::Parameter::type_string)));
  SWIG_Python_SetConstant(d, "File_xml",SWIG_From_int(static_cast<int >(dolfin::File::xml)));
  SWIG_Python_SetConstant(d, "File_matlab",SWIG_From_int(static_cast<int >(dolfin::File::matlab)));
  SWIG_Python_SetConstant(d, "File_matrixmarket",SWIG_From_int(static_cast<int >(dolfin::File::matrixmarket)));
  SWIG_Python_SetConstant(d, "File_octave",SWIG_From_int(static_cast<int >(dolfin::File::octave)));
  SWIG_Python_SetConstant(d, "File_opendx",SWIG_From_int(static_cast<int >(dolfin::File::opendx)));
  SWIG_Python_SetConstant(d, "File_gid",SWIG_From_int(static_cast<int >(dolfin::File::gid)));
  SWIG_Python_SetConstant(d, "File_tecplot",SWIG_From_int(static_cast<int >(dolfin::File::tecplot)));
  SWIG_Python_SetConstant(d, "File_vtk",SWIG_From_int(static_cast<int >(dolfin::File::vtk)));
  SWIG_Python_SetConstant(d, "File_python",SWIG_From_int(static_cast<int >(dolfin::File::python)));
  SWIG_Python_SetConstant(d, "Vector_l1",SWIG_From_int(static_cast<int >(dolfin::Vector::l1)));
  SWIG_Python_SetConstant(d, "Vector_l2",SWIG_From_int(static_cast<int >(dolfin::Vector::l2)));
  SWIG_Python_SetConstant(d, "Vector_linf",SWIG_From_int(static_cast<int >(dolfin::Vector::linf)));
  SWIG_Python_SetConstant(d, "Matrix_default_matrix",SWIG_From_int(static_cast<int >(dolfin::Matrix::default_matrix)));
  SWIG_Python_SetConstant(d, "Matrix_spooles",SWIG_From_int(static_cast<int >(dolfin::Matrix::spooles)));
  SWIG_Python_SetConstant(d, "Matrix_superlu",SWIG_From_int(static_cast<int >(dolfin::Matrix::superlu)));
  SWIG_Python_SetConstant(d, "Matrix_umfpack",SWIG_From_int(static_cast<int >(dolfin::Matrix::umfpack)));
  SWIG_Python_SetConstant(d, "Matrix_l1",SWIG_From_int(static_cast<int >(dolfin::Matrix::l1)));
  SWIG_Python_SetConstant(d, "Matrix_linf",SWIG_From_int(static_cast<int >(dolfin::Matrix::linf)));
  SWIG_Python_SetConstant(d, "Matrix_frobenius",SWIG_From_int(static_cast<int >(dolfin::Matrix::frobenius)));
  SWIG_Python_SetConstant(d, "KrylovSolver_bicgstab",SWIG_From_int(static_cast<int >(dolfin::KrylovSolver::bicgstab)));
  SWIG_Python_SetConstant(d, "KrylovSolver_cg",SWIG_From_int(static_cast<int >(dolfin::KrylovSolver::cg)));
  SWIG_Python_SetConstant(d, "KrylovSolver_default_solver",SWIG_From_int(static_cast<int >(dolfin::KrylovSolver::default_solver)));
  SWIG_Python_SetConstant(d, "KrylovSolver_gmres",SWIG_From_int(static_cast<int >(dolfin::KrylovSolver::gmres)));
  SWIG_Python_SetConstant(d, "Preconditioner_default_pc",SWIG_From_int(static_cast<int >(dolfin::Preconditioner::default_pc)));
  SWIG_Python_SetConstant(d, "Preconditioner_hypre_amg",SWIG_From_int(static_cast<int >(dolfin::Preconditioner::hypre_amg)));
  SWIG_Python_SetConstant(d, "Preconditioner_icc",SWIG_From_int(static_cast<int >(dolfin::Preconditioner::icc)));
  SWIG_Python_SetConstant(d, "Preconditioner_ilu",SWIG_From_int(static_cast<int >(dolfin::Preconditioner::ilu)));
  SWIG_Python_SetConstant(d, "Preconditioner_jacobi",SWIG_From_int(static_cast<int >(dolfin::Preconditioner::jacobi)));
  SWIG_Python_SetConstant(d, "Preconditioner_sor",SWIG_From_int(static_cast<int >(dolfin::Preconditioner::sor)));
  SWIG_Python_SetConstant(d, "Preconditioner_none",SWIG_From_int(static_cast<int >(dolfin::Preconditioner::none)));
  SWIG_Python_SetConstant(d, "Function_constant",SWIG_From_int(static_cast<int >(dolfin::Function::constant)));
  SWIG_Python_SetConstant(d, "Function_user",SWIG_From_int(static_cast<int >(dolfin::Function::user)));
  SWIG_Python_SetConstant(d, "Function_functionpointer",SWIG_From_int(static_cast<int >(dolfin::Function::functionpointer)));
  SWIG_Python_SetConstant(d, "Function_discrete",SWIG_From_int(static_cast<int >(dolfin::Function::discrete)));
  SWIG_Python_SetConstant(d, "Mesh_triangles",SWIG_From_int(static_cast<int >(dolfin::Mesh::triangles)));
  SWIG_Python_SetConstant(d, "Mesh_tetrahedra",SWIG_From_int(static_cast<int >(dolfin::Mesh::tetrahedra)));
  SWIG_Python_SetConstant(d, "Cell_triangle",SWIG_From_int(static_cast<int >(dolfin::Cell::triangle)));
  SWIG_Python_SetConstant(d, "Cell_tetrahedron",SWIG_From_int(static_cast<int >(dolfin::Cell::tetrahedron)));
  SWIG_Python_SetConstant(d, "Cell_none",SWIG_From_int(static_cast<int >(dolfin::Cell::none)));
  SWIG_Python_SetConstant(d, "Cell_left",SWIG_From_int(static_cast<int >(dolfin::Cell::left)));
  SWIG_Python_SetConstant(d, "Cell_right",SWIG_From_int(static_cast<int >(dolfin::Cell::right)));
  SWIG_Python_SetConstant(d, "HomotopyODE_ode",SWIG_From_int(static_cast<int >(dolfin::HomotopyODE::ode)));
  SWIG_Python_SetConstant(d, "HomotopyODE_endgame",SWIG_From_int(static_cast<int >(dolfin::HomotopyODE::endgame)));
  SWIG_Python_SetConstant(d, "Method_cG",SWIG_From_int(static_cast<int >(dolfin::Method::cG)));
  SWIG_Python_SetConstant(d, "Method_dG",SWIG_From_int(static_cast<int >(dolfin::Method::dG)));
  SWIG_Python_SetConstant(d, "Method_none",SWIG_From_int(static_cast<int >(dolfin::Method::none)));
}

