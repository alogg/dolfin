/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.27
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_DIRECTORS

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/***********************************************************************
 *
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 *
 ************************************************************************/

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
#  if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#    define SWIGTEMPLATEDISAMBIGUATOR template
#  else
#    define SWIGTEMPLATEDISAMBIGUATOR 
#  endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__) || defined(__ICC)
#   define SWIGUNUSED __attribute__ ((unused)) 
# else
#   define SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods for Windows DLLs */
#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   define SWIGEXPORT
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif



#include <Python.h>

/***********************************************************************
 * swigrun.swg
 *
 *     This file contains generic CAPI SWIG runtime support for pointer
 *     type checking.
 *
 ************************************************************************/

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "2"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store inforomation on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;


/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (int)(*f1 - *f2);
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}


/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu = 0;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * SWIG API. Portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * for internal method declarations
 * ----------------------------------------------------------------------------- */

#ifndef SWIGINTERN
#  define SWIGINTERN static SWIGUNUSED
#endif

#ifndef SWIGINTERNINLINE
#  define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/*
  Exception handling in wrappers
*/
#define SWIG_fail                goto fail
#define SWIG_arg_fail(arg)       SWIG_Python_ArgFail(arg)
#define SWIG_append_errmsg(msg)   SWIG_Python_AddErrMesg(msg,0)
#define SWIG_preppend_errmsg(msg) SWIG_Python_AddErrMesg(msg,1)
#define SWIG_type_error(type,obj) SWIG_Python_TypeError(type,obj)
#define SWIG_null_ref(type)       SWIG_Python_NullRef(type)

/*
  Contract support
*/
#define SWIG_contract_assert(expr, msg) \
 if (!(expr)) { PyErr_SetString(PyExc_RuntimeError, (char *) msg ); goto fail; } else

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Alloc. memory flags
 * ----------------------------------------------------------------------------- */
#define SWIG_OLDOBJ  1
#define SWIG_NEWOBJ  SWIG_OLDOBJ + 1
#define SWIG_PYSTR   SWIG_NEWOBJ + 1

#ifdef __cplusplus
}
#endif


/***********************************************************************
 * pyrun.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

/* Common SWIG API */
#define SWIG_ConvertPtr(obj, pp, type, flags)    SWIG_Python_ConvertPtr(obj, pp, type, flags)
#define SWIG_NewPointerObj(p, type, flags)       SWIG_Python_NewPointerObj(p, type, flags)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)
 

/* Python-specific SWIG API */
#define SWIG_ConvertPacked(obj, ptr, sz, ty, flags)   SWIG_Python_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)              SWIG_Python_NewPackedObj(ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Python_GetModule()
#define SWIG_SetModule(clientdata, pointer) SWIG_Python_SetModule(pointer)

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */
/*
  Use SWIG_NO_COBJECT_TYPES to force the use of strings to represent
  C/C++ pointers in the python side. Very useful for debugging, but
  not always safe.
*/
#if !defined(SWIG_NO_COBJECT_TYPES) && !defined(SWIG_COBJECT_TYPES)
#  define SWIG_COBJECT_TYPES
#endif

/* Flags for pointer conversion */
#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2


/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
#define PyOS_snprintf snprintf
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Create a new pointer string 
 * ----------------------------------------------------------------------------- */
#ifndef SWIG_BUFFER_SIZE
#define SWIG_BUFFER_SIZE 1024
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000
static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_BUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

#if PY_VERSION_HEX < 0x01060000
#define PyObject_Del(op) PyMem_DEL((op))
#endif

#if defined(SWIG_COBJECT_TYPES)
#if !defined(SWIG_COBJECT_PYTHON)
/* -----------------------------------------------------------------------------
 * Implements a simple Swig Object type, and use it instead of PyCObject
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *ptr;
  const char *desc;
} PySwigObject;

/* Declarations for objects of type PySwigObject */

SWIGRUNTIME int
PySwigObject_print(PySwigObject *v, FILE *fp, int flags)
{
  char result[SWIG_BUFFER_SIZE];
  flags = flags;
  if (SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result))) {
    fputs("<Swig Object at ", fp); fputs(result, fp); fputs(">", fp);
    return 0; 
  } else {
    return 1; 
  }
}
  
SWIGRUNTIME PyObject *
PySwigObject_repr(PySwigObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result)) ?
    PyString_FromFormat("<Swig Object at %s>", result) : 0;
}

SWIGRUNTIME PyObject *
PySwigObject_str(PySwigObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result)) ?
    PyString_FromString(result) : 0;
}

SWIGRUNTIME PyObject *
PySwigObject_long(PySwigObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
PySwigObject_format(const char* fmt, PySwigObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args && (PyTuple_SetItem(args, 0, PySwigObject_long(v)) == 0)) {
    PyObject *ofmt = PyString_FromString(fmt);
    if (ofmt) {
      res = PyString_Format(ofmt,args);
      Py_DECREF(ofmt);
    }
    Py_DECREF(args);
  }  
  return res;
}

SWIGRUNTIME PyObject *
PySwigObject_oct(PySwigObject *v)
{
  return PySwigObject_format("%o",v);
}

SWIGRUNTIME PyObject *
PySwigObject_hex(PySwigObject *v)
{
  return PySwigObject_format("%x",v);
}

SWIGRUNTIME int
PySwigObject_compare(PySwigObject *v, PySwigObject *w)
{
  int c = strcmp(v->desc, w->desc);
  if (c) {
    return (c > 0) ? 1 : -1;
  } else {
    void *i = v->ptr;
    void *j = w->ptr;
    return (i < j) ? -1 : ((i > j) ? 1 : 0);
  }
}

SWIGRUNTIME void
PySwigObject_dealloc(PySwigObject *self)
{
  PyObject_Del(self);
}

SWIGRUNTIME PyTypeObject*
PySwigObject_type(void) {
  static char pyswigobject_type__doc__[] = 
    "Swig object carries a C/C++ instance pointer";
  
  static PyNumberMethods PySwigObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    (binaryfunc)0, /*nb_divide*/
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
    (coercion)0,   /*nb_coerce*/
    (unaryfunc)PySwigObject_long, /*nb_int*/
    (unaryfunc)PySwigObject_long, /*nb_long*/
    (unaryfunc)0,                 /*nb_float*/
    (unaryfunc)PySwigObject_oct,  /*nb_oct*/
    (unaryfunc)PySwigObject_hex,  /*nb_hex*/
#if PY_VERSION_HEX >= 0x02020000
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */ 
#elif PY_VERSION_HEX >= 0x02000000
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject pyswigobject_type
#if !defined(__cplusplus)
  ;  
  static int type_init = 0;
  if (!type_init) {
    PyTypeObject tmp
#endif
    = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,					/*ob_size*/
    (char *)"PySwigObject",		/*tp_name*/
    sizeof(PySwigObject),		/*tp_basicsize*/
    0,					/*tp_itemsize*/
    /* methods */
    (destructor)PySwigObject_dealloc,	/*tp_dealloc*/
    (printfunc)PySwigObject_print,	/*tp_print*/
    (getattrfunc)0,			/*tp_getattr*/
    (setattrfunc)0,			/*tp_setattr*/
    (cmpfunc)PySwigObject_compare,	/*tp_compare*/
    (reprfunc)PySwigObject_repr,	/*tp_repr*/
    &PySwigObject_as_number,	        /*tp_as_number*/
    0,					/*tp_as_sequence*/
    0,					/*tp_as_mapping*/
    (hashfunc)0,			/*tp_hash*/
    (ternaryfunc)0,			/*tp_call*/
    (reprfunc)PySwigObject_str,		/*tp_str*/
    /* Space for future expansion */
    0,0,0,0,
    pyswigobject_type__doc__, 	        /* Documentation string */
#if PY_VERSION_HEX >= 0x02000000
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
    0,                                  /* tp_richcompare */
    0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
    0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
    0,0,0,0                             /* tp_alloc -> tp_next */
#endif
    };
#if !defined(__cplusplus)
    pyswigobject_type = tmp;
    type_init = 1;
  }
#endif
  return &pyswigobject_type;
}

SWIGRUNTIME PyObject *
PySwigObject_FromVoidPtrAndDesc(void *ptr, const char *desc)
{
  PySwigObject *self = PyObject_NEW(PySwigObject, PySwigObject_type());
  if (self) {
    self->ptr = ptr;
    self->desc = desc;
  }
  return (PyObject *)self;
}

SWIGRUNTIMEINLINE void *
PySwigObject_AsVoidPtr(PyObject *self)
{
  return ((PySwigObject *)self)->ptr;
}

SWIGRUNTIMEINLINE const char *
PySwigObject_GetDesc(PyObject *self)
{
  return ((PySwigObject *)self)->desc;
}

SWIGRUNTIMEINLINE int
PySwigObject_Check(PyObject *op) {
  return ((op)->ob_type == PySwigObject_type()) 
    || (strcmp((op)->ob_type->tp_name,"PySwigObject") == 0);
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  const char *desc;
  size_t size;
} PySwigPacked;

SWIGRUNTIME int
PySwigPacked_print(PySwigPacked *v, FILE *fp, int flags)
{
  char result[SWIG_BUFFER_SIZE];
  flags = flags;
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->desc,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
PySwigPacked_repr(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return PyString_FromFormat("<Swig Packed at %s%s>", result, v->desc);
  } else {
    return PyString_FromFormat("<Swig Packed %s>", v->desc);
  }  
}

SWIGRUNTIME PyObject *
PySwigPacked_str(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return PyString_FromFormat("%s%s", result, v->desc);
  } else {
    return PyString_FromString(v->desc);
  }  
}

SWIGRUNTIME int
PySwigPacked_compare(PySwigPacked *v, PySwigPacked *w)
{
  int c = strcmp(v->desc, w->desc);
  if (c) {
    return (c > 0) ? 1 : -1;
  } else {
    size_t i = v->size;
    size_t j = w->size;
    int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
    return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
  }
}

SWIGRUNTIME void
PySwigPacked_dealloc(PySwigPacked *self)
{
  free(self->pack);
  PyObject_Del(self);
}

SWIGRUNTIME PyTypeObject*
PySwigPacked_type(void) {
  static char pyswigpacked_type__doc__[] = 
    "Swig object carries a C/C++ instance pointer";
  static PyTypeObject pyswigpacked_type
#if !defined(__cplusplus)
  ;
  static int type_init = 0;  
  if (!type_init) {
    PyTypeObject tmp
#endif
    = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,					/*ob_size*/
    (char *)"PySwigPacked",		/*tp_name*/
    sizeof(PySwigPacked),		/*tp_basicsize*/
    0,					/*tp_itemsize*/
    /* methods */
    (destructor)PySwigPacked_dealloc,	/*tp_dealloc*/
    (printfunc)PySwigPacked_print,	/*tp_print*/
    (getattrfunc)0,			/*tp_getattr*/
    (setattrfunc)0,			/*tp_setattr*/
    (cmpfunc)PySwigPacked_compare,	/*tp_compare*/
    (reprfunc)PySwigPacked_repr,	/*tp_repr*/
    0,	                                /*tp_as_number*/
    0,					/*tp_as_sequence*/
    0,					/*tp_as_mapping*/
    (hashfunc)0,			/*tp_hash*/
    (ternaryfunc)0,			/*tp_call*/
    (reprfunc)PySwigPacked_str,		/*tp_str*/
    /* Space for future expansion */
    0,0,0,0,
    pyswigpacked_type__doc__, 	        /* Documentation string */
#if PY_VERSION_HEX >= 0x02000000
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
    0,                                  /* tp_richcompare */
    0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000         
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
    0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
    0,0,0,0                             /* tp_alloc -> tp_next */
#endif
    };
#if !defined(__cplusplus)
    pyswigpacked_type = tmp;
    type_init = 1;
  }
#endif
  return &pyswigpacked_type;
}

SWIGRUNTIME PyObject *
PySwigPacked_FromDataAndDesc(void *ptr, size_t size, const char *desc)
{
  PySwigPacked *self = PyObject_NEW(PySwigPacked, PySwigPacked_type());
  if (self == NULL) {
    return NULL;
  } else {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      self->pack = pack;
      self->desc = desc;
      self->size = size;
      return (PyObject *) self;
    }
    return NULL;
  }
}

SWIGRUNTIMEINLINE const char *
PySwigPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  PySwigPacked *self = (PySwigPacked *)obj;
  if (self->size != size) return 0;
  memcpy(ptr, self->pack, size);
  return self->desc;
}

SWIGRUNTIMEINLINE const char *
PySwigPacked_GetDesc(PyObject *self)
{
  return ((PySwigPacked *)self)->desc;
}

SWIGRUNTIMEINLINE int
PySwigPacked_Check(PyObject *op) {
  return ((op)->ob_type == PySwigPacked_type()) 
    || (strcmp((op)->ob_type->tp_name,"PySwigPacked") == 0);
}

#else
/* -----------------------------------------------------------------------------
 * Use the old Python PyCObject instead of PySwigObject
 * ----------------------------------------------------------------------------- */

#define PySwigObject_GetDesc(obj)	           PyCObject_GetDesc(obj)
#define PySwigObject_Check(obj)	           PyCObject_Check(obj)
#define PySwigObject_AsVoidPtr(obj)	   PyCObject_AsVoidPtr(obj)
#define PySwigObject_FromVoidPtrAndDesc(p, d)  PyCObject_FromVoidPtrAndDesc(p, d, NULL)

#endif

#endif

/* -----------------------------------------------------------------------------
 * errors manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && PySwigObject_Check(obj)) {
      const char *otype = (const char *) PySwigObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'PySwigObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? PyString_AsString(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}

SWIGRUNTIMEINLINE void
SWIG_Python_NullRef(const char *type)
{
  if (type) {
    PyErr_Format(PyExc_TypeError, "null reference of type '%s' was received",type);
  } else {
    PyErr_Format(PyExc_TypeError, "null reference was received");
  }
}

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, PyString_AsString(old_str));
      } else {
	PyErr_Format(type, "%s %s", PyString_AsString(old_str), mesg);
      }
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}

SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}


/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Python_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  swig_cast_info *tc;
  const char *c = 0;
  static PyObject *SWIG_this = 0;
  int    newref = 0;
  PyObject  *pyobj = 0;
  void *vptr;
  
  if (!obj) return 0;
  if (obj == Py_None) {
    *ptr = 0;
    return 0;
  }

#ifdef SWIG_COBJECT_TYPES
  if (!(PySwigObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PySwigObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  }  
  vptr = PySwigObject_AsVoidPtr(obj);
  c = (const char *) PySwigObject_GetDesc(obj);
  if (newref) { Py_DECREF(obj); }
  goto type_check;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  c = SWIG_UnpackVoidPtr(c, &vptr, ty->name);
  if (newref) { Py_DECREF(obj); }
  if (!c) goto type_error;
#endif

type_check:
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,vptr);
  } else {
    *ptr = vptr;
  }
  if ((pyobj) && (flags & SWIG_POINTER_DISOWN)) {
    PyObject_SetAttrString(pyobj,(char*)"thisown",Py_False);
  }
  return 0;

type_error:
  PyErr_Clear();
  if (pyobj && !obj) {    
    obj = pyobj;
    if (PyCFunction_Check(obj)) {
      /* here we get the method pointer for callbacks */
      char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
      c = doc ? strstr(doc, "swig_ptr: ") : 0;
      if (c) {
	c = ty ? SWIG_UnpackVoidPtr(c + 10, &vptr, ty->name) : 0;
	if (!c) goto type_error;
	goto type_check;
      }
    }
  }
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
    } else {
      SWIG_Python_TypeError("C/C++ pointer", obj);
    }
  }
  return -1;
}

/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
    if (flags & SWIG_POINTER_EXCEPTION) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
  }
  return result;
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty, int flags) {
  swig_cast_info *tc;
  const char *c = 0;

#if defined(SWIG_COBJECT_TYPES) && !defined(SWIG_COBJECT_PYTHON)
  c = PySwigPacked_UnpackData(obj, ptr, sz);
#else
  if ((!obj) || (!PyString_Check(obj))) goto type_error;
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  c = SWIG_UnpackDataName(c, ptr, sz, ty->name);
#endif
  if (!c) goto type_error;
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return 0;

type_error:
  PyErr_Clear();
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
    } else {
      SWIG_Python_TypeError("C/C++ packed data", obj);
    }
  }
  return -1;
}  

/* Create a new array object */
SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int own) {
  PyObject *robj = 0;
  if (!type) {
    if (!PyErr_Occurred()) {
      PyErr_Format(PyExc_TypeError, "Swig: null type passed to NewPointerObj");
    }
    return robj;
  }
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PySwigObject_FromVoidPtrAndDesc((void *) ptr, (char *)type->name);
#else
  {
    char result[SWIG_BUFFER_SIZE];
    robj = SWIG_PackVoidPtr(result, ptr, type->name, sizeof(result)) ?
      PyString_FromString(result) : 0;
  }
#endif
  if (!robj || (robj == Py_None)) return robj;
  if (type->clientdata) {
    PyObject *inst;
    PyObject *args = Py_BuildValue((char*)"(O)", robj);
    Py_DECREF(robj);
    inst = PyObject_CallObject((PyObject *) type->clientdata, args);
    Py_DECREF(args);
    if (inst) {
      if (own) {
        PyObject_SetAttrString(inst,(char*)"thisown",Py_True);
      }
      robj = inst;
    }
  }
  return robj;
}

SWIGRUNTIME PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  PyObject *robj = 0;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#if defined(SWIG_COBJECT_TYPES) && !defined(SWIG_COBJECT_PYTHON)
  robj = PySwigPacked_FromDataAndDesc((void *) ptr, sz, (char *)type->name);
#else
  {
    char result[SWIG_BUFFER_SIZE];
    robj = SWIG_PackDataName(result, ptr, sz, type->name, sizeof(result)) ?
      PyString_FromString(result) : 0;
  }
#endif
  return robj;
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return -1;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return -1;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return -1;
  }
  if (PyDict_SetItemString(dict, name, o))
    return -1;
  Py_DECREF(o);
  return 0;
}
#endif

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} };/* Sentinel */

  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				   swig_empty_runtime_method_table);
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, NULL);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  }
}

#ifdef __cplusplus
}
#endif


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Boundary swig_types[0]
#define SWIGTYPE_p_Edge swig_types[1]
#define SWIGTYPE_p_Face swig_types[2]
#define SWIGTYPE_p_FunctionPointer swig_types[3]
#define SWIGTYPE_p_Index swig_types[4]
#define SWIGTYPE_p_KSP swig_types[5]
#define SWIGTYPE_p_Mat swig_types[6]
#define SWIGTYPE_p_Preconditioner swig_types[7]
#define SWIGTYPE_p_Preconditioner__Type swig_types[8]
#define SWIGTYPE_p_Vec swig_types[9]
#define SWIGTYPE_p_char swig_types[10]
#define SWIGTYPE_p_dolfin__AffineMap swig_types[11]
#define SWIGTYPE_p_dolfin__ArrayTstd__complexTdouble_t_p_t swig_types[12]
#define SWIGTYPE_p_dolfin__BLASFormData swig_types[13]
#define SWIGTYPE_p_dolfin__BilinearForm swig_types[14]
#define SWIGTYPE_p_dolfin__Boundary swig_types[15]
#define SWIGTYPE_p_dolfin__BoundaryCondition swig_types[16]
#define SWIGTYPE_p_dolfin__BoundaryValue swig_types[17]
#define SWIGTYPE_p_dolfin__Cell swig_types[18]
#define SWIGTYPE_p_dolfin__CellIterator swig_types[19]
#define SWIGTYPE_p_dolfin__ComplexODE swig_types[20]
#define SWIGTYPE_p_dolfin__Dependencies swig_types[21]
#define SWIGTYPE_p_dolfin__Edge swig_types[22]
#define SWIGTYPE_p_dolfin__EdgeIterator swig_types[23]
#define SWIGTYPE_p_dolfin__EigenvalueSolver swig_types[24]
#define SWIGTYPE_p_dolfin__FEM swig_types[25]
#define SWIGTYPE_p_dolfin__Face swig_types[26]
#define SWIGTYPE_p_dolfin__FaceIterator swig_types[27]
#define SWIGTYPE_p_dolfin__File swig_types[28]
#define SWIGTYPE_p_dolfin__FiniteElement swig_types[29]
#define SWIGTYPE_p_dolfin__FiniteElementSpec swig_types[30]
#define SWIGTYPE_p_dolfin__Form swig_types[31]
#define SWIGTYPE_p_dolfin__Function swig_types[32]
#define SWIGTYPE_p_dolfin__GMRES swig_types[33]
#define SWIGTYPE_p_dolfin__Homotopy swig_types[34]
#define SWIGTYPE_p_dolfin__HomotopyJacobian swig_types[35]
#define SWIGTYPE_p_dolfin__HomotopyODE swig_types[36]
#define SWIGTYPE_p_dolfin__KrylovSolver swig_types[37]
#define SWIGTYPE_p_dolfin__LU swig_types[38]
#define SWIGTYPE_p_dolfin__LinearForm swig_types[39]
#define SWIGTYPE_p_dolfin__LinearSolver swig_types[40]
#define SWIGTYPE_p_dolfin__Matrix swig_types[41]
#define SWIGTYPE_p_dolfin__MatrixElement swig_types[42]
#define SWIGTYPE_p_dolfin__Mesh swig_types[43]
#define SWIGTYPE_p_dolfin__MeshHierarchy swig_types[44]
#define SWIGTYPE_p_dolfin__MeshIterator swig_types[45]
#define SWIGTYPE_p_dolfin__Method swig_types[46]
#define SWIGTYPE_p_dolfin__MonoAdaptiveFixedPointSolver swig_types[47]
#define SWIGTYPE_p_dolfin__MonoAdaptiveJacobian swig_types[48]
#define SWIGTYPE_p_dolfin__MonoAdaptiveNewtonSolver swig_types[49]
#define SWIGTYPE_p_dolfin__MonoAdaptiveTimeSlab swig_types[50]
#define SWIGTYPE_p_dolfin__MonoAdaptivity swig_types[51]
#define SWIGTYPE_p_dolfin__MultiAdaptiveFixedPointSolver swig_types[52]
#define SWIGTYPE_p_dolfin__MultiAdaptiveNewtonSolver swig_types[53]
#define SWIGTYPE_p_dolfin__MultiAdaptivePreconditioner swig_types[54]
#define SWIGTYPE_p_dolfin__MultiAdaptiveTimeSlab swig_types[55]
#define SWIGTYPE_p_dolfin__MultiAdaptivity swig_types[56]
#define SWIGTYPE_p_dolfin__ODE swig_types[57]
#define SWIGTYPE_p_dolfin__ODESolver swig_types[58]
#define SWIGTYPE_p_dolfin__PETScManager swig_types[59]
#define SWIGTYPE_p_dolfin__Parameter swig_types[60]
#define SWIGTYPE_p_dolfin__ParameterList swig_types[61]
#define SWIGTYPE_p_dolfin__ParticleSystem swig_types[62]
#define SWIGTYPE_p_dolfin__Partition swig_types[63]
#define SWIGTYPE_p_dolfin__Point swig_types[64]
#define SWIGTYPE_p_dolfin__Preconditioner swig_types[65]
#define SWIGTYPE_p_dolfin__ReducedModel swig_types[66]
#define SWIGTYPE_p_dolfin__Sample swig_types[67]
#define SWIGTYPE_p_dolfin__Tetrahedron swig_types[68]
#define SWIGTYPE_p_dolfin__TimeDependent swig_types[69]
#define SWIGTYPE_p_dolfin__TimeSlab swig_types[70]
#define SWIGTYPE_p_dolfin__TimeSlabJacobian swig_types[71]
#define SWIGTYPE_p_dolfin__TimeStepper swig_types[72]
#define SWIGTYPE_p_dolfin__Triangle swig_types[73]
#define SWIGTYPE_p_dolfin__UnitCube swig_types[74]
#define SWIGTYPE_p_dolfin__UnitSquare swig_types[75]
#define SWIGTYPE_p_dolfin__Variable swig_types[76]
#define SWIGTYPE_p_dolfin__Vector swig_types[77]
#define SWIGTYPE_p_dolfin__VectorElement swig_types[78]
#define SWIGTYPE_p_dolfin__Vertex swig_types[79]
#define SWIGTYPE_p_dolfin__VertexIterator swig_types[80]
#define SWIGTYPE_p_dolfin__VirtualMatrix swig_types[81]
#define SWIGTYPE_p_dolfin__cGqMethod swig_types[82]
#define SWIGTYPE_p_dolfin__dGqMethod swig_types[83]
#define SWIGTYPE_p_double swig_types[84]
#define SWIGTYPE_p_int swig_types[85]
#define SWIGTYPE_p_p_char swig_types[86]
#define SWIGTYPE_p_std__complexTdouble_t swig_types[87]
#define SWIGTYPE_p_std__setTint_t swig_types[88]
#define SWIGTYPE_p_unsigned_int swig_types[89]
#define SWIGTYPE_ptrdiff_t swig_types[90]
#define SWIGTYPE_size_t swig_types[91]
#define SWIGTYPE_std__ptrdiff_t swig_types[92]
#define SWIGTYPE_std__size_t swig_types[93]
static swig_type_info *swig_types[95];
static swig_module_info swig_module = {swig_types, 94, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= _dolfin.so
  ------------------------------------------------*/
#define SWIG_init    init_dolfin

#define SWIG_name    "_dolfin"

#include <dolfin.h>

#include "SettingsGlue.h"

#include <string>
  
using namespace dolfin;


#include <string>


static dolfin::real *new_realArray(int nelements) { 
  return new dolfin::real[nelements]; 
}

static void delete_realArray(dolfin::real *ary) { 
  delete [] ary; 
}

static dolfin::real realArray_getitem(dolfin::real *ary, int index) {
    return ary[index];
}
static void realArray_setitem(dolfin::real *ary, int index, dolfin::real value) {
    ary[index] = value;
}


#include <limits.h>


SWIGINTERN int
  SWIG_CheckLongInRange(long value, long min_value, long max_value,
			const char *errmsg)
{
  if (value < min_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError, 
		   "value %ld is less than '%s' minimum %ld", 
		   value, errmsg, min_value);
    }
    return 0;    
  } else if (value > max_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError,
		   "value %ld is greater than '%s' maximum %ld", 
		   value, errmsg, max_value);
    }
    return 0;
  }
  return 1;
}


SWIGINTERN int
  SWIG_AsVal_long(PyObject * obj, long* val)
{
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  }
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return 1;
  }
  if (val) {
    SWIG_type_error("long", obj);
  }
  return 0;
 }


#if INT_MAX != LONG_MAX
SWIGINTERN int
  SWIG_AsVal_int(PyObject *obj, int *val)
{ 
  const char* errmsg = val ? "int" : (char*)0;
  long v;
  if (SWIG_AsVal_long(obj, &v)) {
    if (SWIG_CheckLongInRange(v, INT_MIN,INT_MAX, errmsg)) {
      if (val) *val = static_cast<int >(v);
      return 1;
    } else {
      return 0;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;    
}
#else
SWIGINTERNINLINE int
  SWIG_AsVal_int(PyObject *obj, int *val)
{
  return SWIG_AsVal_long(obj,(long*)val);
}
#endif


SWIGINTERNINLINE int
SWIG_As_int(PyObject* obj)
{
  int v;
  if (!SWIG_AsVal_int(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(int));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_int(PyObject* obj)
{
  return SWIG_AsVal_int(obj, (int*)0);
}


  /*@/usr/share/swig1.3/python/pymacros.swg,72,SWIG_define@*/
#define SWIG_From_double PyFloat_FromDouble
/*@@*/


SWIGINTERN int
  SWIG_AsVal_double(PyObject *obj, double *val)
{
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return 1;
  }  
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return 1;
  }
  if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  }
  if (val) {
    SWIG_type_error("double", obj);
  }
  return 0;
}


SWIGINTERNINLINE double
SWIG_As_double(PyObject* obj)
{
  double v;
  if (!SWIG_AsVal_double(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(double));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_double(PyObject* obj)
{
  return SWIG_AsVal_double(obj, (double*)0);
}


SWIGINTERNINLINE int
  SWIG_CheckUnsignedLongInRange(unsigned long value,
				unsigned long max_value,
				const char *errmsg) 
{
  if (value > max_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError,
		   "value %lu is greater than '%s' minimum %lu",
		   value, errmsg, max_value);
    }
    return 0;
  }
  return 1;
 }


SWIGINTERN int
  SWIG_AsVal_unsigned_SS_long(PyObject *obj, unsigned long *val) 
{
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  } 
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return 1;
    }   
  }
  if (val) {
    SWIG_type_error("unsigned long", obj);
  }
  return 0;
}


#if UINT_MAX != ULONG_MAX
SWIGINTERN int
  SWIG_AsVal_unsigned_SS_int(PyObject *obj, unsigned int *val)
{ 
  const char* errmsg = val ? "unsigned int" : (char*)0;
  unsigned long v;
  if (SWIG_AsVal_unsigned_SS_long(obj, &v)) {
    if (SWIG_CheckUnsignedLongInRange(v, INT_MAX, errmsg)) {
      if (val) *val = static_cast<unsigned int >(v);
      return 1;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;    
}
#else
SWIGINTERNINLINE unsigned int
  SWIG_AsVal_unsigned_SS_int(PyObject *obj, unsigned int *val)
{
  return SWIG_AsVal_unsigned_SS_long(obj,(unsigned long *)val);
}
#endif


SWIGINTERNINLINE unsigned int
SWIG_As_unsigned_SS_int(PyObject* obj)
{
  unsigned int v;
  if (!SWIG_AsVal_unsigned_SS_int(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(unsigned int));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_unsigned_SS_int(PyObject* obj)
{
  return SWIG_AsVal_unsigned_SS_int(obj, (unsigned int*)0);
}


/* returns SWIG_OLDOBJ if the input is a raw char*, SWIG_PYSTR if is a PyString */
SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize)
{
  static swig_type_info* pchar_info = 0;
  char* vptr = 0;
  if (!pchar_info) pchar_info = SWIG_TypeQuery("char *");
  if (SWIG_ConvertPtr(obj, (void**)&vptr, pchar_info, 0) != -1) {
    if (cptr) *cptr = vptr;
    if (psize) *psize = vptr ? (strlen(vptr) + 1) : 0;
    return SWIG_OLDOBJ;
  } else {
    PyErr_Clear();
    if (PyString_Check(obj)) {
      if (cptr) {
	*cptr = PyString_AS_STRING(obj);
	if (psize) {
	  *psize = PyString_GET_SIZE(obj) + 1;
	}
      }
      return SWIG_PYSTR;
    }
  }
  if (cptr) {
    SWIG_type_error("char *", obj);
  }
  return 0;
}


  SWIGINTERN int
    SWIG_AsPtr_std_string(PyObject* obj, std::string **val)
    {
      static swig_type_info* string_info = SWIG_TypeQuery("std::string *");
      std::string *vptr;    
      if (SWIG_ConvertPtr(obj, (void**)&vptr, string_info, 0) != -1) {
	if (val) *val = vptr;
	return SWIG_OLDOBJ;
      } else {
	PyErr_Clear();
	char* buf = 0 ; size_t size = 0;
	if (SWIG_AsCharPtrAndSize(obj, &buf, &size)) {
	  if (buf) {
	    if (val) *val = new std::string(buf, size - 1);
	    return SWIG_NEWOBJ;
	  }
	} else {
	  PyErr_Clear();
	}  
	if (val) {
	  PyErr_SetString(PyExc_TypeError,"a string is expected");
	}
	return 0;
      }
    }


SWIGINTERNINLINE PyObject *
SWIG_FromCharArray(const char* carray, size_t size)
{
  if (size > INT_MAX) {
    return SWIG_NewPointerObj(const_cast<char * >(carray), 
			      SWIG_TypeQuery("char *"), 0);
  } else {
    return PyString_FromStringAndSize(carray, static_cast<int >(size));
  }
}


SWIGINTERNINLINE PyObject*
  SWIG_From_std_string(const std::string& s)
  {
    return SWIG_FromCharArray(s.data(), s.size());
  }


  /*@/usr/share/swig1.3/python/pymacros.swg,72,SWIG_define@*/
#define SWIG_From_int PyInt_FromLong
/*@@*/


SWIGINTERNINLINE int
SWIG_AsCharPtr(PyObject *obj, char **val)
{
  if (SWIG_AsCharPtrAndSize(obj, val, (size_t*)(0))) {
    return 1;
  }
  if (val) {
    PyErr_Clear();
    SWIG_type_error("char *", obj);
  }
  return 0;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool(bool value)
{
  PyObject *obj = value ? Py_True : Py_False;
  Py_INCREF(obj);
  return obj;
}


SWIGINTERN int
  SWIG_AsVal_bool(PyObject *obj, bool *val)
{
  if (obj == Py_True) {
    if (val) *val = true;
    return 1;
  }
  if (obj == Py_False) {
    if (val) *val = false;
    return 1;
  }
  int res = 0;
  if (SWIG_AsVal_int(obj, &res)) {    
    if (val) *val = res ? true : false;
    return 1;
  } else {
    PyErr_Clear();
  }  
  if (val) {
    SWIG_type_error("bool", obj);
  }
  return 0;
}


SWIGINTERNINLINE bool
SWIG_As_bool(PyObject* obj)
{
  bool v;
  if (!SWIG_AsVal_bool(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(bool));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_bool(PyObject* obj)
{
  return SWIG_AsVal_bool(obj, (bool*)0);
}


  /*@/usr/share/swig1.3/python/pymacros.swg,72,SWIG_define@*/
#define SWIG_From_long PyInt_FromLong
/*@@*/


SWIGINTERNINLINE PyObject* 
  SWIG_From_unsigned_SS_long(unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) 
    : PyInt_FromLong(static_cast<long >(value)); 
}


#if UINT_MAX < LONG_MAX
/*@/usr/share/swig1.3/python/pymacros.swg,72,SWIG_define@*/
#define SWIG_From_unsigned_SS_int SWIG_From_long
/*@@*/
#else
/*@/usr/share/swig1.3/python/pymacros.swg,72,SWIG_define@*/
#define SWIG_From_unsigned_SS_int SWIG_From_unsigned_SS_long
/*@@*/
#endif



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "dolfin_wrap.h"

/***********************************************************************
 * director.swg
 *
 *     This file contains support for director classes that proxy
 *     method calls from C++ to Python extensions.
 *
 * Author : Mark Rose (mrose@stm.lbl.gov)
 ************************************************************************/

#ifdef __cplusplus

namespace Swig {
  /* simple thread abstraction for pthreads on win32 */
  Director::~Director() {
    swig_decref(); 
  }

  bool Director::swig_up = false;

#ifdef __PTHREAD__
  MUTEX_INIT(Director::swig_mutex_up);
  pthread_t Director::swig_mutex_thread;
  bool Director::swig_mutex_active = false;
#endif


  void UnknownExceptionHandler::handler()  {
    try {
      throw;
    } catch (DirectorException& e) {
      std::cerr << "Swig Director exception caught:" << std::endl
                << e.getMessage() << std::endl;
    } catch (std::exception& e) {
      std::cerr << "std::exception caught: "<< e.what() << std::endl;
    } catch (...) {
      std::cerr << "Unknown exception caught." << std::endl;
    }

    std::cerr << std::endl
    	      << "Python interpreter traceback:" << std::endl;
    PyErr_Print();
    std::cerr << std::endl;

    std::cerr << "This exception was caught by the SWIG unexpected exception handler." << std::endl
              << "Try using %feature(\"director:except\") to avoid reaching this point." << std::endl
	      << std::endl
              << "Exception is being re-thrown, program will like abort/terminate." << std::endl;
    throw;
  }

}

#endif /* __cplusplus */

SwigDirector_Function::SwigDirector_Function(PyObject *self, dolfin::real value): dolfin::Function(value), Swig::Director(self) {
    SWIG_DIRECTOR_RGTR((dolfin::Function *)this, this); 
}




SwigDirector_Function::SwigDirector_Function(PyObject *self, dolfin::uint vectordim): dolfin::Function(vectordim), Swig::Director(self) {
    SWIG_DIRECTOR_RGTR((dolfin::Function *)this, this); 
}




SwigDirector_Function::SwigDirector_Function(PyObject *self, FunctionPointer fp, dolfin::uint vectordim): dolfin::Function(fp, vectordim), Swig::Director(self) {
    SWIG_DIRECTOR_RGTR((dolfin::Function *)this, this); 
}




SwigDirector_Function::SwigDirector_Function(PyObject *self, dolfin::Vector &x): dolfin::Function(x), Swig::Director(self) {
    SWIG_DIRECTOR_RGTR((dolfin::Function *)this, this); 
}




SwigDirector_Function::SwigDirector_Function(PyObject *self, dolfin::Vector &x, dolfin::Mesh &mesh): dolfin::Function(x, mesh), Swig::Director(self) {
    SWIG_DIRECTOR_RGTR((dolfin::Function *)this, this); 
}




SwigDirector_Function::SwigDirector_Function(PyObject *self, dolfin::Vector &x, dolfin::Mesh &mesh, dolfin::FiniteElement &element): dolfin::Function(x, mesh, element), Swig::Director(self) {
    SWIG_DIRECTOR_RGTR((dolfin::Function *)this, this); 
}




SwigDirector_Function::SwigDirector_Function(PyObject *self, dolfin::Mesh &mesh, dolfin::FiniteElement &element): dolfin::Function(mesh, element), Swig::Director(self) {
    SWIG_DIRECTOR_RGTR((dolfin::Function *)this, this); 
}




SwigDirector_Function::SwigDirector_Function(PyObject *self, dolfin::Function const &f): dolfin::Function(f), Swig::Director(self) {
    SWIG_DIRECTOR_RGTR((dolfin::Function *)this, this); 
}




dolfin::real SwigDirector_Function::eval(dolfin::Point const &p, dolfin::uint i) {
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    dolfin::real c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        return dolfin::Function::eval(p,i);
    }
    {
        obj0 = SWIG_NewPointerObj(static_cast<void* >(const_cast<dolfin::Point * >(&p)), SWIGTYPE_p_dolfin__Point, 0);
    }
    {
        obj1 = SWIG_From_unsigned_SS_int(static_cast<dolfin::uint >(i)); 
    }
    if (!swig_get_self()) {
        Swig::DirectorException::raise("'self' unitialized, maybe you forgot to call Function.__init__.");
    }
    result = PyObject_CallMethod(swig_get_self(), (char *)"eval", (char *)"(OO)" ,obj0,obj1);
    if (result == NULL) {
        PyObject *error = PyErr_Occurred();
        if (error != NULL) {
            Swig::DirectorMethodException::raise("Error detected when calling Function.eval.\n");
        }
    }
    {
        if (result) c_result = static_cast<dolfin::real >(SWIG_As_double(result));
        if (!result || PyErr_Occurred())
        Swig::DirectorTypeMismatchException::raise("Error converting Python object when using SWIG_As_double.");
    }
    Py_XDECREF(obj0);
    Py_XDECREF(obj1);
    Py_XDECREF(result);
    return (dolfin::real) c_result;
}


SwigDirector_Function::~SwigDirector_Function() {
}

SwigDirector_BoundaryCondition::SwigDirector_BoundaryCondition(PyObject *self): dolfin::BoundaryCondition(), Swig::Director(self) {
    SWIG_DIRECTOR_RGTR((dolfin::BoundaryCondition *)this, this); 
}




SwigDirector_BoundaryCondition::~SwigDirector_BoundaryCondition() {
}

void SwigDirector_BoundaryCondition::eval(dolfin::BoundaryValue &value, dolfin::Point const &p, dolfin::uint i) {
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if (swig_get_up()) {
        Swig::DirectorPureVirtualException::raise("dolfin::BoundaryCondition::eval(value,p,i).");
    }
    {
        obj0 = SWIG_NewPointerObj(static_cast<void* >(static_cast<dolfin::BoundaryValue * >(&value)), SWIGTYPE_p_dolfin__BoundaryValue, 0);
    }
    {
        obj1 = SWIG_NewPointerObj(static_cast<void* >(const_cast<dolfin::Point * >(&p)), SWIGTYPE_p_dolfin__Point, 0);
    }
    {
        obj2 = SWIG_From_unsigned_SS_int(static_cast<dolfin::uint >(i)); 
    }
    if (!swig_get_self()) {
        Swig::DirectorException::raise("'self' unitialized, maybe you forgot to call BoundaryCondition.__init__.");
    }
    (void) PyObject_CallMethod(swig_get_self(), (char *)"eval", (char *)"(OOO)" ,obj0,obj1,obj2);
    PyObject *error = PyErr_Occurred();
    if (error != NULL) {
        Swig::DirectorMethodException::raise("Error detected when calling BoundaryCondition.eval.\n");
    }
    Py_XDECREF(obj0);
    Py_XDECREF(obj1);
    Py_XDECREF(obj2);
}


SwigDirector_ODE::SwigDirector_ODE(PyObject *self, dolfin::uint N, dolfin::real T): dolfin::ODE(N, T), Swig::Director(self) {
    SWIG_DIRECTOR_RGTR((dolfin::ODE *)this, this); 
}




dolfin::real SwigDirector_ODE::u0(dolfin::uint i) {
    PyObject * obj0 = 0 ;
    dolfin::real c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        Swig::DirectorPureVirtualException::raise("dolfin::ODE::u0(i).");
    }
    {
        obj0 = SWIG_From_unsigned_SS_int(static_cast<dolfin::uint >(i)); 
    }
    if (!swig_get_self()) {
        Swig::DirectorException::raise("'self' unitialized, maybe you forgot to call ODE.__init__.");
    }
    result = PyObject_CallMethod(swig_get_self(), (char *)"u0", (char *)"(O)" ,obj0);
    if (result == NULL) {
        PyObject *error = PyErr_Occurred();
        if (error != NULL) {
            Swig::DirectorMethodException::raise("Error detected when calling ODE.u0.\n");
        }
    }
    {
        if (result) c_result = static_cast<dolfin::real >(SWIG_As_double(result));
        if (!result || PyErr_Occurred())
        Swig::DirectorTypeMismatchException::raise("Error converting Python object when using SWIG_As_double.");
    }
    Py_XDECREF(obj0);
    Py_XDECREF(result);
    return (dolfin::real) c_result;
}


dolfin::real SwigDirector_ODE::f(dolfin::real const u[], dolfin::real t, dolfin::uint i) {
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    dolfin::real c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        return dolfin::ODE::f(u,t,i);
    }
    {
        {
            // Custom typemap
            obj0 = SWIG_NewPointerObj((void *) u, SWIGTYPE_p_double, 0);
        }
    }
    {
        obj1 = SWIG_From_double(static_cast<dolfin::real >(t)); 
    }
    {
        obj2 = SWIG_From_unsigned_SS_int(static_cast<dolfin::uint >(i)); 
    }
    if (!swig_get_self()) {
        Swig::DirectorException::raise("'self' unitialized, maybe you forgot to call ODE.__init__.");
    }
    result = PyObject_CallMethod(swig_get_self(), (char *)"fmulti", (char *)"(OOO)" ,obj0,obj1,obj2);
    if (result == NULL) {
        PyObject *error = PyErr_Occurred();
        if (error != NULL) {
            Swig::DirectorMethodException::raise("Error detected when calling ODE.fmulti.\n");
        }
    }
    {
        if (result) c_result = static_cast<dolfin::real >(SWIG_As_double(result));
        if (!result || PyErr_Occurred())
        Swig::DirectorTypeMismatchException::raise("Error converting Python object when using SWIG_As_double.");
    }
    Py_XDECREF(obj0);
    Py_XDECREF(obj1);
    Py_XDECREF(obj2);
    Py_XDECREF(result);
    return (dolfin::real) c_result;
}


void SwigDirector_ODE::save(dolfin::Sample &sample) {
    PyObject * obj0 = 0 ;
    
    if (swig_get_up()) {
        dolfin::ODE::save(sample);
        return;
    }
    {
        obj0 = SWIG_NewPointerObj(static_cast<void* >(static_cast<dolfin::Sample * >(&sample)), SWIGTYPE_p_dolfin__Sample, 0);
    }
    if (!swig_get_self()) {
        Swig::DirectorException::raise("'self' unitialized, maybe you forgot to call ODE.__init__.");
    }
    (void) PyObject_CallMethod(swig_get_self(), (char *)"save", (char *)"(O)" ,obj0);
    PyObject *error = PyErr_Occurred();
    if (error != NULL) {
        Swig::DirectorMethodException::raise("Error detected when calling ODE.save.\n");
    }
    Py_XDECREF(obj0);
}


SwigDirector_ODE::~SwigDirector_ODE() {
}

void SwigDirector_ODE::f(dolfin::real const u[], dolfin::real t, dolfin::real y[]) {
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if (swig_get_up()) {
        dolfin::ODE::f(u,t,y);
        return;
    }
    {
        {
            // Custom typemap
            obj0 = SWIG_NewPointerObj((void *) u, SWIGTYPE_p_double, 0);
        }
    }
    {
        obj1 = SWIG_From_double(static_cast<dolfin::real >(t)); 
    }
    {
        {
            // Custom typemap
            obj2 = SWIG_NewPointerObj((void *) y, SWIGTYPE_p_double, 0);
        }
    }
    if (!swig_get_self()) {
        Swig::DirectorException::raise("'self' unitialized, maybe you forgot to call ODE.__init__.");
    }
    (void) PyObject_CallMethod(swig_get_self(), (char *)"fmono", (char *)"(OOO)" ,obj0,obj1,obj2);
    PyObject *error = PyErr_Occurred();
    if (error != NULL) {
        Swig::DirectorMethodException::raise("Error detected when calling ODE.fmono.\n");
    }
    Py_XDECREF(obj0);
    Py_XDECREF(obj1);
    Py_XDECREF(obj2);
}


dolfin::real SwigDirector_ODE::dfdu(dolfin::real const u[], dolfin::real t, dolfin::uint i, dolfin::uint j) {
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    dolfin::real c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        return dolfin::ODE::dfdu(u,t,i,j);
    }
    {
        {
            // Custom typemap
            obj0 = SWIG_NewPointerObj((void *) u, SWIGTYPE_p_double, 0);
        }
    }
    {
        obj1 = SWIG_From_double(static_cast<dolfin::real >(t)); 
    }
    {
        obj2 = SWIG_From_unsigned_SS_int(static_cast<dolfin::uint >(i)); 
    }
    {
        obj3 = SWIG_From_unsigned_SS_int(static_cast<dolfin::uint >(j)); 
    }
    if (!swig_get_self()) {
        Swig::DirectorException::raise("'self' unitialized, maybe you forgot to call ODE.__init__.");
    }
    result = PyObject_CallMethod(swig_get_self(), (char *)"dfdu", (char *)"(OOOO)" ,obj0,obj1,obj2,obj3);
    if (result == NULL) {
        PyObject *error = PyErr_Occurred();
        if (error != NULL) {
            Swig::DirectorMethodException::raise("Error detected when calling ODE.dfdu.\n");
        }
    }
    {
        if (result) c_result = static_cast<dolfin::real >(SWIG_As_double(result));
        if (!result || PyErr_Occurred())
        Swig::DirectorTypeMismatchException::raise("Error converting Python object when using SWIG_As_double.");
    }
    Py_XDECREF(obj0);
    Py_XDECREF(obj1);
    Py_XDECREF(obj2);
    Py_XDECREF(obj3);
    Py_XDECREF(result);
    return (dolfin::real) c_result;
}


dolfin::real SwigDirector_ODE::timestep(dolfin::real t, dolfin::real k0) const {
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    dolfin::real c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        return dolfin::ODE::timestep(t,k0);
    }
    {
        obj0 = SWIG_From_double(static_cast<dolfin::real >(t)); 
    }
    {
        obj1 = SWIG_From_double(static_cast<dolfin::real >(k0)); 
    }
    if (!swig_get_self()) {
        Swig::DirectorException::raise("'self' unitialized, maybe you forgot to call ODE.__init__.");
    }
    result = PyObject_CallMethod(swig_get_self(), (char *)"timestep", (char *)"(OO)" ,obj0,obj1);
    if (result == NULL) {
        PyObject *error = PyErr_Occurred();
        if (error != NULL) {
            Swig::DirectorMethodException::raise("Error detected when calling ODE.timestep.\n");
        }
    }
    {
        if (result) c_result = static_cast<dolfin::real >(SWIG_As_double(result));
        if (!result || PyErr_Occurred())
        Swig::DirectorTypeMismatchException::raise("Error converting Python object when using SWIG_As_double.");
    }
    Py_XDECREF(obj0);
    Py_XDECREF(obj1);
    Py_XDECREF(result);
    return (dolfin::real) c_result;
}


dolfin::real SwigDirector_ODE::timestep(dolfin::real t, dolfin::uint i, dolfin::real k0) const {
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    dolfin::real c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        return dolfin::ODE::timestep(t,i,k0);
    }
    {
        obj0 = SWIG_From_double(static_cast<dolfin::real >(t)); 
    }
    {
        obj1 = SWIG_From_unsigned_SS_int(static_cast<dolfin::uint >(i)); 
    }
    {
        obj2 = SWIG_From_double(static_cast<dolfin::real >(k0)); 
    }
    if (!swig_get_self()) {
        Swig::DirectorException::raise("'self' unitialized, maybe you forgot to call ODE.__init__.");
    }
    result = PyObject_CallMethod(swig_get_self(), (char *)"timestep", (char *)"(OOO)" ,obj0,obj1,obj2);
    if (result == NULL) {
        PyObject *error = PyErr_Occurred();
        if (error != NULL) {
            Swig::DirectorMethodException::raise("Error detected when calling ODE.timestep.\n");
        }
    }
    {
        if (result) c_result = static_cast<dolfin::real >(SWIG_As_double(result));
        if (!result || PyErr_Occurred())
        Swig::DirectorTypeMismatchException::raise("Error converting Python object when using SWIG_As_double.");
    }
    Py_XDECREF(obj0);
    Py_XDECREF(obj1);
    Py_XDECREF(obj2);
    Py_XDECREF(result);
    return (dolfin::real) c_result;
}


void SwigDirector_ODE::M(dolfin::real const x[], dolfin::real y[], dolfin::real const u[], dolfin::real t) {
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if (swig_get_up()) {
        dolfin::ODE::M(x,y,u,t);
        return;
    }
    {
        {
            // Custom typemap
            obj0 = SWIG_NewPointerObj((void *) x, SWIGTYPE_p_double, 0);
        }
    }
    {
        {
            // Custom typemap
            obj1 = SWIG_NewPointerObj((void *) y, SWIGTYPE_p_double, 0);
        }
    }
    {
        {
            // Custom typemap
            obj2 = SWIG_NewPointerObj((void *) u, SWIGTYPE_p_double, 0);
        }
    }
    {
        obj3 = SWIG_From_double(static_cast<dolfin::real >(t)); 
    }
    if (!swig_get_self()) {
        Swig::DirectorException::raise("'self' unitialized, maybe you forgot to call ODE.__init__.");
    }
    (void) PyObject_CallMethod(swig_get_self(), (char *)"M", (char *)"(OOOO)" ,obj0,obj1,obj2,obj3);
    PyObject *error = PyErr_Occurred();
    if (error != NULL) {
        Swig::DirectorMethodException::raise("Error detected when calling ODE.M.\n");
    }
    Py_XDECREF(obj0);
    Py_XDECREF(obj1);
    Py_XDECREF(obj2);
    Py_XDECREF(obj3);
}


void SwigDirector_ODE::J(dolfin::real const x[], dolfin::real y[], dolfin::real const u[], dolfin::real t) {
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if (swig_get_up()) {
        dolfin::ODE::J(x,y,u,t);
        return;
    }
    {
        {
            // Custom typemap
            obj0 = SWIG_NewPointerObj((void *) x, SWIGTYPE_p_double, 0);
        }
    }
    {
        {
            // Custom typemap
            obj1 = SWIG_NewPointerObj((void *) y, SWIGTYPE_p_double, 0);
        }
    }
    {
        {
            // Custom typemap
            obj2 = SWIG_NewPointerObj((void *) u, SWIGTYPE_p_double, 0);
        }
    }
    {
        obj3 = SWIG_From_double(static_cast<dolfin::real >(t)); 
    }
    if (!swig_get_self()) {
        Swig::DirectorException::raise("'self' unitialized, maybe you forgot to call ODE.__init__.");
    }
    (void) PyObject_CallMethod(swig_get_self(), (char *)"J", (char *)"(OOOO)" ,obj0,obj1,obj2,obj3);
    PyObject *error = PyErr_Occurred();
    if (error != NULL) {
        Swig::DirectorMethodException::raise("Error detected when calling ODE.J.\n");
    }
    Py_XDECREF(obj0);
    Py_XDECREF(obj1);
    Py_XDECREF(obj2);
    Py_XDECREF(obj3);
}


bool SwigDirector_ODE::update(dolfin::real const u[], dolfin::real t, bool end) {
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    bool c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        return dolfin::ODE::update(u,t,end);
    }
    {
        {
            // Custom typemap
            obj0 = SWIG_NewPointerObj((void *) u, SWIGTYPE_p_double, 0);
        }
    }
    {
        obj1 = SWIG_From_double(static_cast<dolfin::real >(t)); 
    }
    {
        obj2 = SWIG_From_bool(static_cast<bool >(end)); 
    }
    if (!swig_get_self()) {
        Swig::DirectorException::raise("'self' unitialized, maybe you forgot to call ODE.__init__.");
    }
    result = PyObject_CallMethod(swig_get_self(), (char *)"update", (char *)"(OOO)" ,obj0,obj1,obj2);
    if (result == NULL) {
        PyObject *error = PyErr_Occurred();
        if (error != NULL) {
            Swig::DirectorMethodException::raise("Error detected when calling ODE.update.\n");
        }
    }
    {
        if (result) c_result = static_cast<bool >(SWIG_As_bool(result));
        if (!result || PyErr_Occurred())
        Swig::DirectorTypeMismatchException::raise("Error converting Python object when using SWIG_As_bool.");
    }
    Py_XDECREF(obj0);
    Py_XDECREF(obj1);
    Py_XDECREF(obj2);
    Py_XDECREF(result);
    return (bool) c_result;
}


#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_new_realArray(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int arg1 ;
    dolfin::real *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_realArray",&obj0)) goto fail;
    {
        arg1 = static_cast<int >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real *)new_realArray(arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_double, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_realArray(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::real *arg1 = (dolfin::real *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_realArray",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete_realArray(arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_realArray_getitem(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::real *arg1 = (dolfin::real *) 0 ;
    int arg2 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:realArray_getitem",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)realArray_getitem(arg1,arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_realArray_setitem(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::real *arg1 = (dolfin::real *) 0 ;
    int arg2 ;
    dolfin::real arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:realArray_setitem",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        realArray_setitem(arg1,arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_dolfin_init(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int arg1 ;
    char **arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:dolfin_init",&obj0,&obj1)) goto fail;
    {
        arg1 = static_cast<int >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_p_char, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        dolfin::dolfin_init(arg1,arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_sqr(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::real arg1 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:sqr",&obj0)) goto fail;
    {
        arg1 = static_cast<dolfin::real >(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)dolfin::sqr(arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rand(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::real result;
    
    if(!PyArg_ParseTuple(args,(char *)":rand")) goto fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)dolfin::rand();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_seed(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    unsigned int arg1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:seed",&obj0)) goto fail;
    {
        arg1 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        dolfin::seed(arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_TimeDependent__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::TimeDependent *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_TimeDependent")) goto fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::TimeDependent *)new dolfin::TimeDependent();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__TimeDependent, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_TimeDependent__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::real *arg1 = 0 ;
    dolfin::TimeDependent *result;
    dolfin::real temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_TimeDependent",&obj0)) goto fail;
    {
        temp1 = static_cast<dolfin::real >(SWIG_As_double(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::TimeDependent *)new dolfin::TimeDependent((double const &)*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__TimeDependent, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_TimeDependent(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_TimeDependent__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            return _wrap_new_TimeDependent__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_TimeDependent'");
    return NULL;
}


static PyObject *_wrap_delete_TimeDependent(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::TimeDependent *arg1 = (dolfin::TimeDependent *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_TimeDependent",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__TimeDependent, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeDependent_sync(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::TimeDependent *arg1 = (dolfin::TimeDependent *) 0 ;
    dolfin::real *arg2 = 0 ;
    dolfin::real temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:TimeDependent_sync",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__TimeDependent, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = static_cast<dolfin::real >(SWIG_As_double(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->sync((double const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeDependent_time(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::TimeDependent *arg1 = (dolfin::TimeDependent *) 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TimeDependent_time",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__TimeDependent, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::TimeDependent const *)arg1)->time();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * TimeDependent_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__TimeDependent, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Variable__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Variable *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Variable")) goto fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Variable *)new dolfin::Variable();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Variable, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Variable__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    std::string arg2 ;
    dolfin::Variable *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_Variable",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Variable *)new dolfin::Variable(arg1,arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Variable, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Variable__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Variable *arg1 = 0 ;
    dolfin::Variable *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Variable",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Variable, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::Variable");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Variable *)new dolfin::Variable((dolfin::Variable const &)*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Variable, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Variable(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_Variable__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Variable, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_Variable__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                return _wrap_new_Variable__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_Variable'");
    return NULL;
}


static PyObject *_wrap_Variable_rename(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Variable *arg1 = (dolfin::Variable *) 0 ;
    std::string arg2 ;
    std::string arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Variable_rename",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Variable, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->rename(arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Variable_name(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Variable *arg1 = (dolfin::Variable *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Variable_name",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Variable, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        {
            std::string const &_result_ref = ((dolfin::Variable const *)arg1)->name();
            result = (std::string *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_std_string(static_cast<std::string >(*result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Variable_label(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Variable *arg1 = (dolfin::Variable *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Variable_label",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Variable, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        {
            std::string const &_result_ref = ((dolfin::Variable const *)arg1)->label();
            result = (std::string *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_std_string(static_cast<std::string >(*result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Variable_number(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Variable *arg1 = (dolfin::Variable *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Variable_number",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Variable, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)((dolfin::Variable const *)arg1)->number();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Variable_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__Variable, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_suffix(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:suffix",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)dolfin::suffix((char const *)arg1,(char const *)arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_remove_newline(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:remove_newline",&obj0)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        dolfin::remove_newline(arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_length(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:length",&obj0)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)dolfin::length((char const *)arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_date(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string result;
    
    if(!PyArg_ParseTuple(args,(char *)":date")) goto fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = dolfin::date();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_std_string(static_cast<std::string >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delay(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::real arg1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delay",&obj0)) goto fail;
    {
        arg1 = static_cast<dolfin::real >(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        dolfin::delay(arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tic(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    
    if(!PyArg_ParseTuple(args,(char *)":tic")) goto fail;
    try {
        Swig::UnknownExceptionHandler dh;
        dolfin::tic();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_toc(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::real result;
    
    if(!PyArg_ParseTuple(args,(char *)":toc")) goto fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)dolfin::toc();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tocd(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::real result;
    
    if(!PyArg_ParseTuple(args,(char *)":tocd")) goto fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)dolfin::tocd();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_dolfin_update(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    
    if(!PyArg_ParseTuple(args,(char *)":dolfin_update")) goto fail;
    try {
        Swig::UnknownExceptionHandler dh;
        dolfin::dolfin_update();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_dolfin_quit(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    
    if(!PyArg_ParseTuple(args,(char *)":dolfin_quit")) goto fail;
    try {
        Swig::UnknownExceptionHandler dh;
        dolfin::dolfin_quit();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_dolfin_finished(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    bool result;
    
    if(!PyArg_ParseTuple(args,(char *)":dolfin_finished")) goto fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)dolfin::dolfin_finished();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_dolfin_segfault(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    
    if(!PyArg_ParseTuple(args,(char *)":dolfin_segfault")) goto fail;
    try {
        Swig::UnknownExceptionHandler dh;
        dolfin::dolfin_segfault();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_dolfin_begin__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    
    if(!PyArg_ParseTuple(args,(char *)":dolfin_begin")) goto fail;
    try {
        Swig::UnknownExceptionHandler dh;
        dolfin::dolfin_begin();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_dolfin_begin__SWIG_1__varargs__(PyObject *, PyObject *args, PyObject *varargs) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    void *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:dolfin_begin",&obj0)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        dolfin::dolfin_begin((char const *)arg1,arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_dolfin_begin__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PyObject *varargs;
    PyObject *newargs;
    
    newargs = PyTuple_GetSlice(args,0,1);
    varargs = PyTuple_GetSlice(args,1,PyTuple_Size(args)+1);
    resultobj = _wrap_dolfin_begin__SWIG_1__varargs__(self,newargs,varargs);
    Py_XDECREF(newargs);
    Py_XDECREF(varargs);
    return resultobj;
}


static PyObject *_wrap_dolfin_begin(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_dolfin_begin__SWIG_0(self,args);
    }
    if (argc >= 1) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            if (argc <= 1) {
                return _wrap_dolfin_begin__SWIG_1(self,args);
            }
            return _wrap_dolfin_begin__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'dolfin_begin'");
    return NULL;
}


static PyObject *_wrap_dolfin_end__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    
    if(!PyArg_ParseTuple(args,(char *)":dolfin_end")) goto fail;
    try {
        Swig::UnknownExceptionHandler dh;
        dolfin::dolfin_end();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_dolfin_end__SWIG_1__varargs__(PyObject *, PyObject *args, PyObject *varargs) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    void *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:dolfin_end",&obj0)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        dolfin::dolfin_end((char const *)arg1,arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_dolfin_end__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PyObject *varargs;
    PyObject *newargs;
    
    newargs = PyTuple_GetSlice(args,0,1);
    varargs = PyTuple_GetSlice(args,1,PyTuple_Size(args)+1);
    resultobj = _wrap_dolfin_end__SWIG_1__varargs__(self,newargs,varargs);
    Py_XDECREF(newargs);
    Py_XDECREF(varargs);
    return resultobj;
}


static PyObject *_wrap_dolfin_end(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_dolfin_end__SWIG_0(self,args);
    }
    if (argc >= 1) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            if (argc <= 1) {
                return _wrap_dolfin_end__SWIG_1(self,args);
            }
            return _wrap_dolfin_end__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'dolfin_end'");
    return NULL;
}


static PyObject *_wrap_dolfin_output(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:dolfin_output",&obj0)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        dolfin::dolfin_output((char const *)arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_dolfin_log(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    bool arg1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:dolfin_log",&obj0)) goto fail;
    {
        arg1 = static_cast<bool >(SWIG_As_bool(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        dolfin::dolfin_log(arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Parameter__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int arg1 ;
    dolfin::Parameter *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Parameter",&obj0)) goto fail;
    {
        arg1 = static_cast<int >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Parameter *)new dolfin::Parameter(arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Parameter, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Parameter__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::uint arg1 ;
    dolfin::Parameter *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Parameter",&obj0)) goto fail;
    {
        arg1 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Parameter *)new dolfin::Parameter(arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Parameter, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Parameter__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::real arg1 ;
    dolfin::Parameter *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Parameter",&obj0)) goto fail;
    {
        arg1 = static_cast<dolfin::real >(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Parameter *)new dolfin::Parameter(arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Parameter, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Parameter__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    bool arg1 ;
    dolfin::Parameter *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Parameter",&obj0)) goto fail;
    {
        arg1 = static_cast<bool >(SWIG_As_bool(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Parameter *)new dolfin::Parameter(arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Parameter, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Parameter__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    dolfin::Parameter *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Parameter",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Parameter *)new dolfin::Parameter(arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Parameter, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Parameter__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    dolfin::Parameter *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Parameter",&obj0)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Parameter *)new dolfin::Parameter((char const *)arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Parameter, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Parameter__SWIG_6(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Parameter *arg1 = 0 ;
    dolfin::Parameter *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Parameter",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Parameter, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::Parameter");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Parameter *)new dolfin::Parameter((dolfin::Parameter const &)*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Parameter, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Parameter(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Parameter, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_Parameter__SWIG_6(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_unsigned_SS_int(argv[0]);
        if (_v) {
            return _wrap_new_Parameter__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            return _wrap_new_Parameter__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            return _wrap_new_Parameter__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            return _wrap_new_Parameter__SWIG_5(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            return _wrap_new_Parameter__SWIG_4(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_bool(argv[0]);
        if (_v) {
            return _wrap_new_Parameter__SWIG_3(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_Parameter'");
    return NULL;
}


static PyObject *_wrap_delete_Parameter(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Parameter *arg1 = (dolfin::Parameter *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Parameter",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Parameter, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Parameter_type(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Parameter *arg1 = (dolfin::Parameter *) 0 ;
    dolfin::Parameter::Type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Parameter_type",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Parameter, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Parameter::Type)((dolfin::Parameter const *)arg1)->type();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Parameter_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__Parameter, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_File__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    dolfin::File *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_File",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::File *)new dolfin::File((std::string const &)*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__File, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_new_File__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    dolfin::File::Type arg2 ;
    dolfin::File *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_File",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    {
        arg2 = static_cast<dolfin::File::Type >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::File *)new dolfin::File((std::string const &)*arg1,arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__File, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_new_File(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            return _wrap_new_File__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_new_File__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_File'");
    return NULL;
}


static PyObject *_wrap_delete_File(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::File *arg1 = (dolfin::File *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_File",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_File___rshift____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::File *arg1 = (dolfin::File *) 0 ;
    dolfin::Vector *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:File___rshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->operator >>(*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_File___rshift____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::File *arg1 = (dolfin::File *) 0 ;
    dolfin::Matrix *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:File___rshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Matrix");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->operator >>(*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_File___rshift____SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::File *arg1 = (dolfin::File *) 0 ;
    dolfin::Mesh *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:File___rshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Mesh");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->operator >>(*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_File___rshift____SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::File *arg1 = (dolfin::File *) 0 ;
    dolfin::Function *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:File___rshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Function, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Function");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->operator >>(*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_File___rshift____SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::File *arg1 = (dolfin::File *) 0 ;
    dolfin::Sample *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:File___rshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Sample, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Sample");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->operator >>(*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_File___rshift____SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::File *arg1 = (dolfin::File *) 0 ;
    dolfin::FiniteElementSpec *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:File___rshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__FiniteElementSpec, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::FiniteElementSpec");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->operator >>(*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_File___rshift____SWIG_6(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::File *arg1 = (dolfin::File *) 0 ;
    dolfin::ParameterList *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:File___rshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__ParameterList, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::ParameterList");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->operator >>(*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_File___rshift____SWIG_7(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::File *arg1 = (dolfin::File *) 0 ;
    dolfin::BLASFormData *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:File___rshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__BLASFormData, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::BLASFormData");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->operator >>(*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_File___rshift__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__File, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Vector, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_File___rshift____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__File, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Matrix, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_File___rshift____SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__File, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Mesh, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_File___rshift____SWIG_2(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__File, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Function, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_File___rshift____SWIG_3(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__File, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Sample, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_File___rshift____SWIG_4(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__File, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__FiniteElementSpec, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_File___rshift____SWIG_5(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__File, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__ParameterList, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_File___rshift____SWIG_6(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__File, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__BLASFormData, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_File___rshift____SWIG_7(self,args);
            }
        }
    }
    
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


static PyObject *_wrap_File___lshift____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::File *arg1 = (dolfin::File *) 0 ;
    dolfin::Vector *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:File___lshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->operator <<(*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_File___lshift____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::File *arg1 = (dolfin::File *) 0 ;
    dolfin::Matrix *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:File___lshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Matrix");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->operator <<(*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_File___lshift____SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::File *arg1 = (dolfin::File *) 0 ;
    dolfin::Mesh *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:File___lshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Mesh");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->operator <<(*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_File___lshift____SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::File *arg1 = (dolfin::File *) 0 ;
    dolfin::Function *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:File___lshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Function, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Function");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->operator <<(*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_File___lshift____SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::File *arg1 = (dolfin::File *) 0 ;
    dolfin::Sample *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:File___lshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Sample, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Sample");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->operator <<(*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_File___lshift____SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::File *arg1 = (dolfin::File *) 0 ;
    dolfin::FiniteElementSpec *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:File___lshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__FiniteElementSpec, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::FiniteElementSpec");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->operator <<(*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_File___lshift____SWIG_6(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::File *arg1 = (dolfin::File *) 0 ;
    dolfin::ParameterList *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:File___lshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__ParameterList, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::ParameterList");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->operator <<(*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_File___lshift____SWIG_7(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::File *arg1 = (dolfin::File *) 0 ;
    dolfin::BLASFormData *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:File___lshift__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__File, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__BLASFormData, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::BLASFormData");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->operator <<(*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_File___lshift__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__File, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Vector, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_File___lshift____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__File, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Matrix, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_File___lshift____SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__File, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Mesh, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_File___lshift____SWIG_2(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__File, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Function, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_File___lshift____SWIG_3(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__File, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Sample, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_File___lshift____SWIG_4(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__File, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__FiniteElementSpec, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_File___lshift____SWIG_5(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__File, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__ParameterList, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_File___lshift____SWIG_6(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__File, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__BLASFormData, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_File___lshift____SWIG_7(self,args);
            }
        }
    }
    
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


static PyObject * File_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__File, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Vector__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vector *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Vector")) goto fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Vector *)new dolfin::Vector();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Vector, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Vector__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::uint arg1 ;
    dolfin::Vector *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Vector",&obj0)) goto fail;
    {
        arg1 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Vector *)new dolfin::Vector(arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Vector, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Vector__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Vec arg1 ;
    dolfin::Vector *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Vector",&obj0)) goto fail;
    {
        Vec * argp;
        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_Vec, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("Vec");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *argp;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Vector *)new dolfin::Vector(arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Vector, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Vector__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vector *arg1 = 0 ;
    dolfin::Vector *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Vector",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Vector *)new dolfin::Vector((dolfin::Vector const &)*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Vector, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Vector(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_Vector__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_Vec, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_Vector__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Vector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_Vector__SWIG_3(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_unsigned_SS_int(argv[0]);
        if (_v) {
            return _wrap_new_Vector__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_Vector'");
    return NULL;
}


static PyObject *_wrap_delete_Vector(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Vector",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector_init(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
    dolfin::uint arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Vector_init",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->init(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector_clear(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Vector_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->clear();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector_size(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
    dolfin::uint result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Vector_size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::uint)((dolfin::Vector const *)arg1)->size();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector_vec__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
    Vec result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Vector_vec",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (arg1)->vec();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        Vec * resultptr;
        resultptr = new Vec(static_cast<Vec & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_Vec, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector_vec__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
    Vec result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Vector_vec",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = ((dolfin::Vector const *)arg1)->vec();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        Vec * resultptr;
        resultptr = new Vec(static_cast<Vec const & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_Vec, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector_vec(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Vector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_Vector_vec__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Vector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_Vector_vec__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Vector_vec'");
    return NULL;
}


static PyObject *_wrap_Vector_array__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
    dolfin::real *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Vector_array",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real *)(arg1)->array();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_double, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector_array__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
    dolfin::real *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Vector_array",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real *)((dolfin::Vector const *)arg1)->array();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_double, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector_array(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Vector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_Vector_array__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Vector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_Vector_array__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Vector_array'");
    return NULL;
}


static PyObject *_wrap_Vector_restore__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
    dolfin::real *arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Vector_restore",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->restore(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector_restore__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
    dolfin::real *arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Vector_restore",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        ((dolfin::Vector const *)arg1)->restore((double const (*))arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector_restore(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Vector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_double, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_Vector_restore__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Vector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_double, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_Vector_restore__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Vector_restore'");
    return NULL;
}


static PyObject *_wrap_Vector_axpy(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
    dolfin::real arg2 ;
    dolfin::Vector *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Vector_axpy",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real const >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        ((dolfin::Vector const *)arg1)->axpy(arg2,(dolfin::Vector const &)*arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector_div(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
    dolfin::Vector *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Vector_div",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->div((dolfin::Vector const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector_mult(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
    dolfin::Vector *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Vector_mult",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->mult((dolfin::Vector const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector_add(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
    dolfin::real *arg2 ;
    int *arg3 ;
    int arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Vector_add",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        arg4 = static_cast<int >(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->add((double const (*))arg2,(int const (*))arg3,arg4);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector_apply(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Vector_apply",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->apply();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector___call____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
    dolfin::uint arg2 ;
    SwigValueWrapper<dolfin::VectorElement > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Vector___call__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (arg1)->operator ()(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        dolfin::VectorElement * resultptr;
        resultptr = new dolfin::VectorElement(static_cast<dolfin::VectorElement & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_dolfin__VectorElement, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector___call____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
    dolfin::uint arg2 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Vector___call__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::Vector const *)arg1)->operator ()(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector___call__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Vector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_Vector___call____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Vector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_Vector___call____SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Vector___call__'");
    return NULL;
}


static PyObject *_wrap_Vector_copy__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
    dolfin::Vector *arg2 = 0 ;
    dolfin::Vector *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Vector_copy",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Vector const &_result_ref = (arg1)->operator =((dolfin::Vector const &)*arg2);
            result = (dolfin::Vector *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Vector, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector_copy__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
    dolfin::real arg2 ;
    dolfin::Vector *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Vector_copy",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Vector const &_result_ref = (arg1)->operator =(arg2);
            result = (dolfin::Vector *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Vector, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector_copy(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Vector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Vector, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Vector_copy__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Vector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_Vector_copy__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Vector_copy'");
    return NULL;
}


static PyObject *_wrap_Vector___iadd__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
    dolfin::Vector *arg2 = 0 ;
    dolfin::Vector *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Vector___iadd__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Vector const &_result_ref = (arg1)->operator +=((dolfin::Vector const &)*arg2);
            result = (dolfin::Vector *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Vector, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector___isub__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
    dolfin::Vector *arg2 = 0 ;
    dolfin::Vector *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Vector___isub__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Vector const &_result_ref = (arg1)->operator -=((dolfin::Vector const &)*arg2);
            result = (dolfin::Vector *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Vector, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector___imul__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
    dolfin::real arg2 ;
    dolfin::Vector *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Vector___imul__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Vector const &_result_ref = (arg1)->operator *=(arg2);
            result = (dolfin::Vector *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Vector, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector___idiv__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
    dolfin::real arg2 ;
    dolfin::Vector *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Vector___idiv__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Vector const &_result_ref = (arg1)->operator /=(arg2);
            result = (dolfin::Vector *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Vector, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector___mul__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
    dolfin::Vector *arg2 = 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Vector___mul__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(arg1)->operator *((dolfin::Vector const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector_norm__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
    dolfin::Vector::NormType arg2 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Vector_norm",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::Vector::NormType >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::Vector const *)arg1)->norm(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector_norm__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Vector_norm",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::Vector const *)arg1)->norm();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector_norm(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Vector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_Vector_norm__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Vector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_Vector_norm__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Vector_norm'");
    return NULL;
}


static PyObject *_wrap_Vector_sum(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Vector_sum",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::Vector const *)arg1)->sum();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector_max(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Vector_max",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::Vector const *)arg1)->max();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector_min(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Vector_min",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::Vector const *)arg1)->min();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector_disp(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Vector_disp",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        ((dolfin::Vector const *)arg1)->disp();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector___getitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
    dolfin::uint arg2 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Vector___getitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::Vector const *)arg1)->getval(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector___setitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
    dolfin::uint arg2 ;
    dolfin::real arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Vector___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::real const >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->setval(arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector_addval(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vector *arg1 = (dolfin::Vector *) 0 ;
    dolfin::uint arg2 ;
    dolfin::real arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Vector_addval",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::real const >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->addval(arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Vector_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__Vector, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_VectorElement__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::uint arg1 ;
    dolfin::Vector *arg2 = 0 ;
    dolfin::VectorElement *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_VectorElement",&obj0,&obj1)) goto fail;
    {
        arg1 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::VectorElement *)new dolfin::VectorElement(arg1,*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__VectorElement, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_VectorElement__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VectorElement *arg1 = 0 ;
    dolfin::VectorElement *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_VectorElement",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VectorElement, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::VectorElement");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::VectorElement *)new dolfin::VectorElement((dolfin::VectorElement const &)*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__VectorElement, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_VectorElement(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__VectorElement, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_VectorElement__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_unsigned_SS_int(argv[0]);
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Vector, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_VectorElement__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_VectorElement'");
    return NULL;
}


static PyObject *_wrap_VectorElement___iadd__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VectorElement *arg1 = (dolfin::VectorElement *) 0 ;
    dolfin::real arg2 ;
    dolfin::VectorElement *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:VectorElement___iadd__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VectorElement, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real const >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::VectorElement const &_result_ref = (arg1)->operator +=(arg2);
            result = (dolfin::VectorElement *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__VectorElement, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VectorElement___isub__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VectorElement *arg1 = (dolfin::VectorElement *) 0 ;
    dolfin::real arg2 ;
    dolfin::VectorElement *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:VectorElement___isub__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VectorElement, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real const >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::VectorElement const &_result_ref = (arg1)->operator -=(arg2);
            result = (dolfin::VectorElement *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__VectorElement, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VectorElement___imul__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VectorElement *arg1 = (dolfin::VectorElement *) 0 ;
    dolfin::real arg2 ;
    dolfin::VectorElement *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:VectorElement___imul__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VectorElement, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real const >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::VectorElement const &_result_ref = (arg1)->operator *=(arg2);
            result = (dolfin::VectorElement *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__VectorElement, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * VectorElement_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__VectorElement, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Matrix__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Matrix *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Matrix")) goto fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Matrix *)new dolfin::Matrix();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Matrix, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Matrix__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Mat arg1 ;
    dolfin::Matrix *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Matrix",&obj0)) goto fail;
    {
        Mat * argp;
        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_Mat, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("Mat");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *argp;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Matrix *)new dolfin::Matrix(arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Matrix, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Matrix__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::uint arg1 ;
    dolfin::uint arg2 ;
    dolfin::Matrix *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_Matrix",&obj0,&obj1)) goto fail;
    {
        arg1 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Matrix *)new dolfin::Matrix(arg1,arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Matrix, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Matrix__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Matrix *arg1 = 0 ;
    dolfin::Matrix *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Matrix",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::Matrix");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Matrix *)new dolfin::Matrix((dolfin::Matrix const &)*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Matrix, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Matrix(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_Matrix__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_Mat, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_Matrix__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Matrix, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_Matrix__SWIG_3(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_unsigned_SS_int(argv[0]);
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_new_Matrix__SWIG_2(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_Matrix'");
    return NULL;
}


static PyObject *_wrap_delete_Matrix(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Matrix",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix_init__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
    dolfin::uint arg2 ;
    dolfin::uint arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Matrix_init",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->init(arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix_init__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
    dolfin::uint arg2 ;
    dolfin::uint arg3 ;
    dolfin::uint arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Matrix_init",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->init(arg2,arg3,arg4);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix_init__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
    dolfin::uint arg2 ;
    dolfin::uint arg3 ;
    dolfin::uint arg4 ;
    dolfin::uint arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:Matrix_init",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->init(arg2,arg3,arg4,arg5);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix_init(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[6];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 5); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Matrix, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    return _wrap_Matrix_init__SWIG_0(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Matrix, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    _v = SWIG_Check_unsigned_SS_int(argv[3]);
                    if (_v) {
                        return _wrap_Matrix_init__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Matrix, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    _v = SWIG_Check_unsigned_SS_int(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_unsigned_SS_int(argv[4]);
                        if (_v) {
                            return _wrap_Matrix_init__SWIG_2(self,args);
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Matrix_init'");
    return NULL;
}


static PyObject *_wrap_Matrix_size(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
    dolfin::uint arg2 ;
    dolfin::uint result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Matrix_size",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::uint)((dolfin::Matrix const *)arg1)->size(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix_nz(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
    dolfin::uint arg2 ;
    dolfin::uint result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Matrix_nz",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::uint)((dolfin::Matrix const *)arg1)->nz(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix_nzsum(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
    dolfin::uint result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Matrix_nzsum",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::uint)((dolfin::Matrix const *)arg1)->nzsum();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix_nzmax(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
    dolfin::uint result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Matrix_nzmax",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::uint)((dolfin::Matrix const *)arg1)->nzmax();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix_add(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
    dolfin::real *arg2 ;
    int *arg3 ;
    int arg4 ;
    int *arg5 ;
    int arg6 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:Matrix_add",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        arg4 = static_cast<int >(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(5)) SWIG_fail;
    {
        arg6 = static_cast<int >(SWIG_As_int(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->add((double const (*))arg2,(int const (*))arg3,arg4,(int const (*))arg5,arg6);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix_ident(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
    int *arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Matrix_ident",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = static_cast<int >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->ident((int const (*))arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix_mult__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
    dolfin::Vector *arg2 = 0 ;
    dolfin::Vector *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Matrix_mult",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        ((dolfin::Matrix const *)arg1)->mult((dolfin::Vector const &)*arg2,*arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix_mult__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
    dolfin::Vector *arg2 = 0 ;
    dolfin::uint arg3 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Matrix_mult",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::Matrix const *)arg1)->mult((dolfin::Vector const &)*arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix_mult__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
    dolfin::real *arg2 ;
    dolfin::uint arg3 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Matrix_mult",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::Matrix const *)arg1)->mult((double const (*))arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix_mult(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Matrix, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Vector, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_dolfin__Vector, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_Matrix_mult__SWIG_0(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Matrix, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Vector, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    return _wrap_Matrix_mult__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Matrix, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_double, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    return _wrap_Matrix_mult__SWIG_2(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Matrix_mult'");
    return NULL;
}


static PyObject *_wrap_Matrix_norm__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
    dolfin::Matrix::Norm arg2 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Matrix_norm",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::Matrix::Norm >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::Matrix const *)arg1)->norm(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix_norm__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Matrix_norm",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::Matrix const *)arg1)->norm();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix_norm(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Matrix, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_Matrix_norm__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Matrix, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_Matrix_norm__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Matrix_norm'");
    return NULL;
}


static PyObject *_wrap_Matrix_apply(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Matrix_apply",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->apply();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix_mat__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
    Mat result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Matrix_mat",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (arg1)->mat();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        Mat * resultptr;
        resultptr = new Mat(static_cast<Mat & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_Mat, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix_mat__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
    Mat result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Matrix_mat",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = ((dolfin::Matrix const *)arg1)->mat();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        Mat * resultptr;
        resultptr = new Mat(static_cast<Mat const & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_Mat, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix_mat(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Matrix, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_Matrix_mat__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Matrix, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_Matrix_mat__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Matrix_mat'");
    return NULL;
}


static PyObject *_wrap_Matrix_disp__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
    bool arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Matrix_disp",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<int >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        ((dolfin::Matrix const *)arg1)->disp(arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix_disp__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Matrix_disp",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        ((dolfin::Matrix const *)arg1)->disp(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix_disp__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Matrix_disp",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        ((dolfin::Matrix const *)arg1)->disp();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix_disp(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Matrix, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_Matrix_disp__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Matrix, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_Matrix_disp__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Matrix, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_Matrix_disp__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Matrix_disp'");
    return NULL;
}


static PyObject *_wrap_Matrix___call____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
    dolfin::uint arg2 ;
    dolfin::uint arg3 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Matrix___call__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::Matrix const *)arg1)->operator ()(arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix___call____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
    dolfin::uint arg2 ;
    dolfin::uint arg3 ;
    SwigValueWrapper<dolfin::MatrixElement > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Matrix___call__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (arg1)->operator ()(arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        dolfin::MatrixElement * resultptr;
        resultptr = new dolfin::MatrixElement(static_cast<dolfin::MatrixElement & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_dolfin__MatrixElement, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix___call__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Matrix, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    return _wrap_Matrix___call____SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Matrix, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    return _wrap_Matrix___call____SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Matrix___call__'");
    return NULL;
}


static PyObject *_wrap_Matrix_getval(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
    dolfin::uint arg2 ;
    dolfin::uint arg3 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Matrix_getval",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::Matrix const *)arg1)->getval(arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix_setval(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
    dolfin::uint arg2 ;
    dolfin::uint arg3 ;
    dolfin::real arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Matrix_setval",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<dolfin::real const >(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->setval(arg2,arg3,arg4);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix_addval(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Matrix *arg1 = (dolfin::Matrix *) 0 ;
    dolfin::uint arg2 ;
    dolfin::uint arg3 ;
    dolfin::real arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Matrix_addval",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<dolfin::real const >(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->addval(arg2,arg3,arg4);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Matrix_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__Matrix, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_MatrixElement__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::uint arg1 ;
    dolfin::uint arg2 ;
    dolfin::Matrix *arg3 = 0 ;
    dolfin::MatrixElement *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_MatrixElement",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::Matrix");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::MatrixElement *)new dolfin::MatrixElement(arg1,arg2,*arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__MatrixElement, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_MatrixElement__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MatrixElement *arg1 = 0 ;
    dolfin::MatrixElement *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_MatrixElement",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MatrixElement, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::MatrixElement");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::MatrixElement *)new dolfin::MatrixElement((dolfin::MatrixElement const &)*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__MatrixElement, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_MatrixElement(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__MatrixElement, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_MatrixElement__SWIG_1(self,args);
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_Check_unsigned_SS_int(argv[0]);
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_dolfin__Matrix, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_new_MatrixElement__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_MatrixElement'");
    return NULL;
}


static PyObject *_wrap_MatrixElement___iadd__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MatrixElement *arg1 = (dolfin::MatrixElement *) 0 ;
    dolfin::real arg2 ;
    dolfin::MatrixElement *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MatrixElement___iadd__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MatrixElement, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real const >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::MatrixElement const &_result_ref = (arg1)->operator +=(arg2);
            result = (dolfin::MatrixElement *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__MatrixElement, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MatrixElement___isub__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MatrixElement *arg1 = (dolfin::MatrixElement *) 0 ;
    dolfin::real arg2 ;
    dolfin::MatrixElement *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MatrixElement___isub__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MatrixElement, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real const >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::MatrixElement const &_result_ref = (arg1)->operator -=(arg2);
            result = (dolfin::MatrixElement *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__MatrixElement, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MatrixElement___imul__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MatrixElement *arg1 = (dolfin::MatrixElement *) 0 ;
    dolfin::real arg2 ;
    dolfin::MatrixElement *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MatrixElement___imul__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MatrixElement, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real const >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::MatrixElement const &_result_ref = (arg1)->operator *=(arg2);
            result = (dolfin::MatrixElement *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__MatrixElement, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * MatrixElement_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__MatrixElement, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_VirtualMatrix(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VirtualMatrix *arg1 = (dolfin::VirtualMatrix *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_VirtualMatrix",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VirtualMatrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VirtualMatrix_init__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VirtualMatrix *arg1 = (dolfin::VirtualMatrix *) 0 ;
    dolfin::Vector *arg2 = 0 ;
    dolfin::Vector *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:VirtualMatrix_init",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VirtualMatrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->init((dolfin::Vector const &)*arg2,(dolfin::Vector const &)*arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VirtualMatrix_init__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VirtualMatrix *arg1 = (dolfin::VirtualMatrix *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:VirtualMatrix_init",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VirtualMatrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<int >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->init(arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VirtualMatrix_init(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__VirtualMatrix, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Vector, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_dolfin__Vector, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_VirtualMatrix_init__SWIG_0(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__VirtualMatrix, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_VirtualMatrix_init__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'VirtualMatrix_init'");
    return NULL;
}


static PyObject *_wrap_VirtualMatrix_size(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VirtualMatrix *arg1 = (dolfin::VirtualMatrix *) 0 ;
    dolfin::uint arg2 ;
    dolfin::uint result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:VirtualMatrix_size",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VirtualMatrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::uint)((dolfin::VirtualMatrix const *)arg1)->size(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VirtualMatrix_mat__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VirtualMatrix *arg1 = (dolfin::VirtualMatrix *) 0 ;
    Mat result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VirtualMatrix_mat",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VirtualMatrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (arg1)->mat();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        Mat * resultptr;
        resultptr = new Mat(static_cast<Mat & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_Mat, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VirtualMatrix_mat__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VirtualMatrix *arg1 = (dolfin::VirtualMatrix *) 0 ;
    Mat result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VirtualMatrix_mat",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VirtualMatrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = ((dolfin::VirtualMatrix const *)arg1)->mat();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        Mat * resultptr;
        resultptr = new Mat(static_cast<Mat const & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_Mat, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VirtualMatrix_mat(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__VirtualMatrix, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_VirtualMatrix_mat__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__VirtualMatrix, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_VirtualMatrix_mat__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'VirtualMatrix_mat'");
    return NULL;
}


static PyObject *_wrap_VirtualMatrix_mult(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VirtualMatrix *arg1 = (dolfin::VirtualMatrix *) 0 ;
    dolfin::Vector *arg2 = 0 ;
    dolfin::Vector *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:VirtualMatrix_mult",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VirtualMatrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        ((dolfin::VirtualMatrix const *)arg1)->mult((dolfin::Vector const &)*arg2,*arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VirtualMatrix_disp__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VirtualMatrix *arg1 = (dolfin::VirtualMatrix *) 0 ;
    bool arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:VirtualMatrix_disp",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VirtualMatrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<int >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        ((dolfin::VirtualMatrix const *)arg1)->disp(arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VirtualMatrix_disp__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VirtualMatrix *arg1 = (dolfin::VirtualMatrix *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:VirtualMatrix_disp",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VirtualMatrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        ((dolfin::VirtualMatrix const *)arg1)->disp(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VirtualMatrix_disp__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VirtualMatrix *arg1 = (dolfin::VirtualMatrix *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VirtualMatrix_disp",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VirtualMatrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        ((dolfin::VirtualMatrix const *)arg1)->disp();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VirtualMatrix_disp(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__VirtualMatrix, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_VirtualMatrix_disp__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__VirtualMatrix, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_VirtualMatrix_disp__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__VirtualMatrix, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_VirtualMatrix_disp__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'VirtualMatrix_disp'");
    return NULL;
}


static PyObject * VirtualMatrix_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__VirtualMatrix, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_GMRES__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::GMRES *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_GMRES")) goto fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::GMRES *)new dolfin::GMRES();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__GMRES, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_GMRES__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Preconditioner::Type arg1 ;
    dolfin::GMRES *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_GMRES",&obj0)) goto fail;
    {
        Preconditioner::Type * argp;
        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_Preconditioner__Type, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("Preconditioner::Type");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *argp;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::GMRES *)new dolfin::GMRES(arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__GMRES, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_GMRES(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_GMRES__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_Preconditioner__Type, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_GMRES__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_GMRES'");
    return NULL;
}


static PyObject *_wrap_delete_GMRES(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::GMRES *arg1 = (dolfin::GMRES *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_GMRES",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__GMRES, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * GMRES_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__GMRES, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_LinearSolver(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::LinearSolver *arg1 = (dolfin::LinearSolver *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_LinearSolver",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__LinearSolver, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LinearSolver_solve__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::LinearSolver *arg1 = (dolfin::LinearSolver *) 0 ;
    dolfin::Matrix *arg2 = 0 ;
    dolfin::Vector *arg3 = 0 ;
    dolfin::Vector *arg4 = 0 ;
    dolfin::uint result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:LinearSolver_solve",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__LinearSolver, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Matrix");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::uint)(arg1)->solve((dolfin::Matrix const &)*arg2,*arg3,(dolfin::Vector const &)*arg4);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LinearSolver_solve__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::LinearSolver *arg1 = (dolfin::LinearSolver *) 0 ;
    dolfin::VirtualMatrix *arg2 = 0 ;
    dolfin::Vector *arg3 = 0 ;
    dolfin::Vector *arg4 = 0 ;
    dolfin::uint result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:LinearSolver_solve",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__LinearSolver, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__VirtualMatrix, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::VirtualMatrix");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::uint)(arg1)->solve((dolfin::VirtualMatrix const &)*arg2,*arg3,(dolfin::Vector const &)*arg4);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LinearSolver_solve(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__LinearSolver, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Matrix, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_dolfin__Vector, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_dolfin__Vector, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        return _wrap_LinearSolver_solve__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__LinearSolver, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__VirtualMatrix, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_dolfin__Vector, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_dolfin__Vector, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        return _wrap_LinearSolver_solve__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'LinearSolver_solve'");
    return NULL;
}


static PyObject * LinearSolver_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__LinearSolver, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_LU(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::LU *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_LU")) goto fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::LU *)new dolfin::LU();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__LU, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_LU(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::LU *arg1 = (dolfin::LU *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_LU",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__LU, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LU_solve__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::LU *arg1 = (dolfin::LU *) 0 ;
    dolfin::Matrix *arg2 = 0 ;
    dolfin::Vector *arg3 = 0 ;
    dolfin::Vector *arg4 = 0 ;
    dolfin::uint result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:LU_solve",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__LU, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Matrix");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::uint)(arg1)->solve((dolfin::Matrix const &)*arg2,*arg3,(dolfin::Vector const &)*arg4);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LU_solve__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::LU *arg1 = (dolfin::LU *) 0 ;
    dolfin::VirtualMatrix *arg2 = 0 ;
    dolfin::Vector *arg3 = 0 ;
    dolfin::Vector *arg4 = 0 ;
    dolfin::uint result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:LU_solve",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__LU, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__VirtualMatrix, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::VirtualMatrix");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::uint)(arg1)->solve((dolfin::VirtualMatrix const &)*arg2,*arg3,(dolfin::Vector const &)*arg4);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LU_solve(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__LU, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Matrix, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_dolfin__Vector, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_dolfin__Vector, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        return _wrap_LU_solve__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__LU, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__VirtualMatrix, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_dolfin__Vector, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_dolfin__Vector, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        return _wrap_LU_solve__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'LU_solve'");
    return NULL;
}


static PyObject *_wrap_LU_disp(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::LU *arg1 = (dolfin::LU *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:LU_disp",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__LU, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        ((dolfin::LU const *)arg1)->disp();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * LU_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__LU, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_KrylovSolver__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::KrylovSolver *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_KrylovSolver")) goto fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::KrylovSolver *)new dolfin::KrylovSolver();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__KrylovSolver, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KrylovSolver__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::KrylovSolver::Type arg1 ;
    dolfin::KrylovSolver *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_KrylovSolver",&obj0)) goto fail;
    {
        arg1 = static_cast<dolfin::KrylovSolver::Type >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::KrylovSolver *)new dolfin::KrylovSolver(arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__KrylovSolver, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KrylovSolver__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Preconditioner::Type arg1 ;
    dolfin::KrylovSolver *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_KrylovSolver",&obj0)) goto fail;
    {
        Preconditioner::Type * argp;
        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_Preconditioner__Type, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("Preconditioner::Type");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *argp;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::KrylovSolver *)new dolfin::KrylovSolver(arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__KrylovSolver, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KrylovSolver__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::KrylovSolver::Type arg1 ;
    Preconditioner::Type arg2 ;
    dolfin::KrylovSolver *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_KrylovSolver",&obj0,&obj1)) goto fail;
    {
        arg1 = static_cast<dolfin::KrylovSolver::Type >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        Preconditioner::Type * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_Preconditioner__Type, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("Preconditioner::Type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::KrylovSolver *)new dolfin::KrylovSolver(arg1,arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__KrylovSolver, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KrylovSolver(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_KrylovSolver__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_Preconditioner__Type, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_KrylovSolver__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            return _wrap_new_KrylovSolver__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_Preconditioner__Type, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_KrylovSolver__SWIG_3(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_KrylovSolver'");
    return NULL;
}


static PyObject *_wrap_delete_KrylovSolver(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::KrylovSolver *arg1 = (dolfin::KrylovSolver *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_KrylovSolver",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__KrylovSolver, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KrylovSolver_solve__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::KrylovSolver *arg1 = (dolfin::KrylovSolver *) 0 ;
    dolfin::Matrix *arg2 = 0 ;
    dolfin::Vector *arg3 = 0 ;
    dolfin::Vector *arg4 = 0 ;
    dolfin::uint result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:KrylovSolver_solve",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__KrylovSolver, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Matrix");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::uint)(arg1)->solve((dolfin::Matrix const &)*arg2,*arg3,(dolfin::Vector const &)*arg4);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KrylovSolver_solve__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::KrylovSolver *arg1 = (dolfin::KrylovSolver *) 0 ;
    dolfin::VirtualMatrix *arg2 = 0 ;
    dolfin::Vector *arg3 = 0 ;
    dolfin::Vector *arg4 = 0 ;
    dolfin::uint result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:KrylovSolver_solve",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__KrylovSolver, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__VirtualMatrix, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::VirtualMatrix");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::uint)(arg1)->solve((dolfin::VirtualMatrix const &)*arg2,*arg3,(dolfin::Vector const &)*arg4);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KrylovSolver_solve(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__KrylovSolver, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Matrix, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_dolfin__Vector, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_dolfin__Vector, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        return _wrap_KrylovSolver_solve__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__KrylovSolver, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__VirtualMatrix, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_dolfin__Vector, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_dolfin__Vector, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        return _wrap_KrylovSolver_solve__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'KrylovSolver_solve'");
    return NULL;
}


static PyObject *_wrap_KrylovSolver_setType(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::KrylovSolver *arg1 = (dolfin::KrylovSolver *) 0 ;
    dolfin::KrylovSolver::Type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KrylovSolver_setType",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__KrylovSolver, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::KrylovSolver::Type const >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->setType(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KrylovSolver_setPreconditioner__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::KrylovSolver *arg1 = (dolfin::KrylovSolver *) 0 ;
    Preconditioner::Type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KrylovSolver_setPreconditioner",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__KrylovSolver, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        Preconditioner::Type * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_Preconditioner__Type, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("Preconditioner::Type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->setPreconditioner(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KrylovSolver_setPreconditioner__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::KrylovSolver *arg1 = (dolfin::KrylovSolver *) 0 ;
    Preconditioner *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KrylovSolver_setPreconditioner",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__KrylovSolver, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Preconditioner, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("Preconditioner");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->setPreconditioner(*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KrylovSolver_setPreconditioner(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__KrylovSolver, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_Preconditioner__Type, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_KrylovSolver_setPreconditioner__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__KrylovSolver, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_Preconditioner, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_KrylovSolver_setPreconditioner__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'KrylovSolver_setPreconditioner'");
    return NULL;
}


static PyObject *_wrap_KrylovSolver_setReport(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::KrylovSolver *arg1 = (dolfin::KrylovSolver *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KrylovSolver_setReport",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__KrylovSolver, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->setReport(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KrylovSolver_setRtol(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::KrylovSolver *arg1 = (dolfin::KrylovSolver *) 0 ;
    dolfin::real arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KrylovSolver_setRtol",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__KrylovSolver, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->setRtol(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KrylovSolver_setAtol(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::KrylovSolver *arg1 = (dolfin::KrylovSolver *) 0 ;
    dolfin::real arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KrylovSolver_setAtol",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__KrylovSolver, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->setAtol(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KrylovSolver_setDtol(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::KrylovSolver *arg1 = (dolfin::KrylovSolver *) 0 ;
    dolfin::real arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KrylovSolver_setDtol",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__KrylovSolver, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->setDtol(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KrylovSolver_setMaxiter(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::KrylovSolver *arg1 = (dolfin::KrylovSolver *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KrylovSolver_setMaxiter",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__KrylovSolver, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->setMaxiter(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KrylovSolver_setZeroPivot(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::KrylovSolver *arg1 = (dolfin::KrylovSolver *) 0 ;
    dolfin::real arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KrylovSolver_setZeroPivot",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__KrylovSolver, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->setZeroPivot(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KrylovSolver_solver(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::KrylovSolver *arg1 = (dolfin::KrylovSolver *) 0 ;
    KSP result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KrylovSolver_solver",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__KrylovSolver, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (arg1)->solver();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        KSP * resultptr;
        resultptr = new KSP(static_cast<KSP & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_KSP, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KrylovSolver_disp(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::KrylovSolver *arg1 = (dolfin::KrylovSolver *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KrylovSolver_disp",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__KrylovSolver, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        ((dolfin::KrylovSolver const *)arg1)->disp();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KrylovSolver_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__KrylovSolver, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_EigenvalueSolver(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::EigenvalueSolver *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_EigenvalueSolver")) goto fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::EigenvalueSolver *)new dolfin::EigenvalueSolver();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__EigenvalueSolver, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_EigenvalueSolver(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::EigenvalueSolver *arg1 = (dolfin::EigenvalueSolver *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_EigenvalueSolver",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__EigenvalueSolver, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EigenvalueSolver_eigen(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::EigenvalueSolver *arg1 = (dolfin::EigenvalueSolver *) 0 ;
    dolfin::Matrix *arg2 = 0 ;
    dolfin::Vector *arg3 = 0 ;
    dolfin::Vector *arg4 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:EigenvalueSolver_eigen",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__EigenvalueSolver, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Matrix");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->eigen((dolfin::Matrix const &)*arg2,*arg3,*arg4);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * EigenvalueSolver_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__EigenvalueSolver, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_Preconditioner(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Preconditioner *arg1 = (dolfin::Preconditioner *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Preconditioner",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Preconditioner, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Preconditioner_setup(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KSP arg1 ;
    dolfin::Preconditioner *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Preconditioner_setup",&obj0,&obj1)) goto fail;
    {
        KSP * argp;
        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_KSP, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("KSP");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *argp;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Preconditioner, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Preconditioner");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        dolfin::Preconditioner::setup(arg1,*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Preconditioner_solve(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Preconditioner *arg1 = (dolfin::Preconditioner *) 0 ;
    dolfin::Vector *arg2 = 0 ;
    dolfin::Vector *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Preconditioner_solve",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Preconditioner, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->solve(*arg2,(dolfin::Vector const &)*arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Preconditioner_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__Preconditioner, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_PETScManager_init__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    
    if(!PyArg_ParseTuple(args,(char *)":PETScManager_init")) goto fail;
    try {
        Swig::UnknownExceptionHandler dh;
        dolfin::PETScManager::init();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PETScManager_init__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int arg1 ;
    char **arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:PETScManager_init",&obj0,&obj1)) goto fail;
    {
        arg1 = static_cast<int >(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_p_char, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        dolfin::PETScManager::init(arg1,arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PETScManager_init(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_PETScManager_init__SWIG_0(self,args);
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_p_char, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_PETScManager_init__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'PETScManager_init'");
    return NULL;
}


static PyObject * PETScManager_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__PETScManager, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Function__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    PyObject *arg1 = (PyObject *) 0 ;
    dolfin::real arg2 ;
    dolfin::Function *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_Function",&obj0,&obj1)) goto fail;
    arg1 = obj0;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        if ( arg1 != Py_None ) {
            /* subclassed */
            result = (dolfin::Function *)new SwigDirector_Function(arg1,arg2);
            
        } else {
            result = (dolfin::Function *)new dolfin::Function(arg2);
            
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Function, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Function__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    PyObject *arg1 = (PyObject *) 0 ;
    dolfin::uint arg2 ;
    dolfin::Function *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_Function",&obj0,&obj1)) goto fail;
    arg1 = obj0;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        if ( arg1 != Py_None ) {
            /* subclassed */
            result = (dolfin::Function *)new SwigDirector_Function(arg1,arg2);
            
        } else {
            result = (dolfin::Function *)new dolfin::Function(arg2);
            
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Function, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Function__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    PyObject *arg1 = (PyObject *) 0 ;
    dolfin::Function *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Function",&obj0)) goto fail;
    arg1 = obj0;
    try {
        Swig::UnknownExceptionHandler dh;
        if ( arg1 != Py_None ) {
            /* subclassed */
            result = (dolfin::Function *)new SwigDirector_Function(arg1);
            
        } else {
            result = (dolfin::Function *)new dolfin::Function();
            
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Function, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Function__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    PyObject *arg1 = (PyObject *) 0 ;
    FunctionPointer arg2 ;
    dolfin::uint arg3 ;
    dolfin::Function *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_Function",&obj0,&obj1,&obj2)) goto fail;
    arg1 = obj0;
    {
        FunctionPointer * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_FunctionPointer, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("FunctionPointer");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        arg3 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        if ( arg1 != Py_None ) {
            /* subclassed */
            result = (dolfin::Function *)new SwigDirector_Function(arg1,arg2,arg3);
            
        } else {
            result = (dolfin::Function *)new dolfin::Function(arg2,arg3);
            
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Function, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Function__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    PyObject *arg1 = (PyObject *) 0 ;
    FunctionPointer arg2 ;
    dolfin::Function *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_Function",&obj0,&obj1)) goto fail;
    arg1 = obj0;
    {
        FunctionPointer * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_FunctionPointer, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("FunctionPointer");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        if ( arg1 != Py_None ) {
            /* subclassed */
            result = (dolfin::Function *)new SwigDirector_Function(arg1,arg2);
            
        } else {
            result = (dolfin::Function *)new dolfin::Function(arg2);
            
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Function, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Function__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    PyObject *arg1 = (PyObject *) 0 ;
    dolfin::Vector *arg2 = 0 ;
    dolfin::Function *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_Function",&obj0,&obj1)) goto fail;
    arg1 = obj0;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        if ( arg1 != Py_None ) {
            /* subclassed */
            result = (dolfin::Function *)new SwigDirector_Function(arg1,*arg2);
            
        } else {
            result = (dolfin::Function *)new dolfin::Function(*arg2);
            
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Function, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Function__SWIG_6(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    PyObject *arg1 = (PyObject *) 0 ;
    dolfin::Vector *arg2 = 0 ;
    dolfin::Mesh *arg3 = 0 ;
    dolfin::Function *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_Function",&obj0,&obj1,&obj2)) goto fail;
    arg1 = obj0;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::Mesh");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        if ( arg1 != Py_None ) {
            /* subclassed */
            result = (dolfin::Function *)new SwigDirector_Function(arg1,*arg2,*arg3);
            
        } else {
            result = (dolfin::Function *)new dolfin::Function(*arg2,*arg3);
            
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Function, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Function__SWIG_7(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    PyObject *arg1 = (PyObject *) 0 ;
    dolfin::Vector *arg2 = 0 ;
    dolfin::Mesh *arg3 = 0 ;
    dolfin::FiniteElement *arg4 = 0 ;
    dolfin::Function *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:new_Function",&obj0,&obj1,&obj2,&obj3)) goto fail;
    arg1 = obj0;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::Mesh");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_dolfin__FiniteElement, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("dolfin::FiniteElement");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        if ( arg1 != Py_None ) {
            /* subclassed */
            result = (dolfin::Function *)new SwigDirector_Function(arg1,*arg2,*arg3,*arg4);
            
        } else {
            result = (dolfin::Function *)new dolfin::Function(*arg2,*arg3,*arg4);
            
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Function, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Function__SWIG_8(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    PyObject *arg1 = (PyObject *) 0 ;
    dolfin::Mesh *arg2 = 0 ;
    dolfin::FiniteElement *arg3 = 0 ;
    dolfin::Function *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_Function",&obj0,&obj1,&obj2)) goto fail;
    arg1 = obj0;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Mesh");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__FiniteElement, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::FiniteElement");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        if ( arg1 != Py_None ) {
            /* subclassed */
            result = (dolfin::Function *)new SwigDirector_Function(arg1,*arg2,*arg3);
            
        } else {
            result = (dolfin::Function *)new dolfin::Function(*arg2,*arg3);
            
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Function, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Function__SWIG_9(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    PyObject *arg1 = (PyObject *) 0 ;
    dolfin::Function *arg2 = 0 ;
    dolfin::Function *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_Function",&obj0,&obj1)) goto fail;
    arg1 = obj0;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Function, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Function");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        if ( arg1 != Py_None ) {
            /* subclassed */
            result = (dolfin::Function *)new SwigDirector_Function(arg1,(dolfin::Function const &)*arg2);
            
        } else {
            result = (dolfin::Function *)new dolfin::Function((dolfin::Function const &)*arg2);
            
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Function, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Function(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        _v = (argv[0] != 0);
        if (_v) {
            return _wrap_new_Function__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = (argv[0] != 0);
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_FunctionPointer, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_Function__SWIG_4(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        _v = (argv[0] != 0);
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Vector, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_Function__SWIG_5(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        _v = (argv[0] != 0);
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Function, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_Function__SWIG_9(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        _v = (argv[0] != 0);
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_new_Function__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        _v = (argv[0] != 0);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_new_Function__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = (argv[0] != 0);
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Vector, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_dolfin__Mesh, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_new_Function__SWIG_6(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = (argv[0] != 0);
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Mesh, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_dolfin__FiniteElement, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_new_Function__SWIG_8(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = (argv[0] != 0);
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_FunctionPointer, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    return _wrap_new_Function__SWIG_3(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        _v = (argv[0] != 0);
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Vector, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_dolfin__Mesh, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_dolfin__FiniteElement, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        return _wrap_new_Function__SWIG_7(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_Function'");
    return NULL;
}


static PyObject *_wrap_delete_Function(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Function *arg1 = (dolfin::Function *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Function",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Function, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_eval__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Function *arg1 = (dolfin::Function *) 0 ;
    dolfin::Point *arg2 = 0 ;
    dolfin::uint arg3 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Function_eval",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Function, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Point, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Point");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(arg1)->eval((dolfin::Point const &)*arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_eval__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Function *arg1 = (dolfin::Function *) 0 ;
    dolfin::Point *arg2 = 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Function_eval",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Function, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Point, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Point");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(arg1)->eval((dolfin::Point const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_eval(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Function, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Point, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Function_eval__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Function, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Point, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    return _wrap_Function_eval__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Function_eval'");
    return NULL;
}


static PyObject *_wrap_Function___call____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Function *arg1 = (dolfin::Function *) 0 ;
    dolfin::Point *arg2 = 0 ;
    dolfin::uint arg3 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Function___call__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Function, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Point, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Point");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(arg1)->operator ()((dolfin::Point const &)*arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function___call____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Function *arg1 = (dolfin::Function *) 0 ;
    dolfin::Point *arg2 = 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Function___call__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Function, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Point, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Point");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(arg1)->operator ()((dolfin::Point const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function___call____SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Function *arg1 = (dolfin::Function *) 0 ;
    dolfin::Vertex *arg2 = 0 ;
    dolfin::uint arg3 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Function___call__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Function, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(arg1)->operator ()((dolfin::Vertex const &)*arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function___call____SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Function *arg1 = (dolfin::Function *) 0 ;
    dolfin::Vertex *arg2 = 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Function___call__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Function, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(arg1)->operator ()((dolfin::Vertex const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function___call__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Function, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Point, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Function___call____SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Function, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Function___call____SWIG_3(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Function, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    return _wrap_Function___call____SWIG_2(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Function, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Point, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    return _wrap_Function___call____SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Function___call__'");
    return NULL;
}


static PyObject *_wrap_Function___getitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Function *arg1 = (dolfin::Function *) 0 ;
    dolfin::uint arg2 ;
    dolfin::Function result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Function___getitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Function, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint const >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (arg1)->operator [](arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        dolfin::Function * resultptr;
        resultptr = new dolfin::Function(static_cast<dolfin::Function & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_dolfin__Function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_interpolate(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Function *arg1 = (dolfin::Function *) 0 ;
    dolfin::real *arg2 ;
    dolfin::AffineMap *arg3 = 0 ;
    dolfin::FiniteElement *arg4 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Function_interpolate",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Function, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::AffineMap");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_dolfin__FiniteElement, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("dolfin::FiniteElement");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->interpolate(arg2,*arg3,*arg4);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_vectordim(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Function *arg1 = (dolfin::Function *) 0 ;
    dolfin::uint result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Function_vectordim",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Function, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::uint)((dolfin::Function const *)arg1)->vectordim();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_vector(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Function *arg1 = (dolfin::Function *) 0 ;
    dolfin::Vector *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Function_vector",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Function, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Vector &_result_ref = (arg1)->vector();
            result = (dolfin::Vector *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Vector, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_mesh(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Function *arg1 = (dolfin::Function *) 0 ;
    dolfin::Mesh *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Function_mesh",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Function, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Mesh &_result_ref = (arg1)->mesh();
            result = (dolfin::Mesh *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Mesh, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_element(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Function *arg1 = (dolfin::Function *) 0 ;
    dolfin::FiniteElement *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Function_element",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Function, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::FiniteElement &_result_ref = (arg1)->element();
            result = (dolfin::FiniteElement *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__FiniteElement, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_attach__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Function *arg1 = (dolfin::Function *) 0 ;
    dolfin::Vector *arg2 = 0 ;
    bool arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Function_attach",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Function, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<bool >(SWIG_As_bool(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->attach(*arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_attach__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Function *arg1 = (dolfin::Function *) 0 ;
    dolfin::Vector *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Function_attach",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Function, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->attach(*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_attach__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Function *arg1 = (dolfin::Function *) 0 ;
    dolfin::Mesh *arg2 = 0 ;
    bool arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Function_attach",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Function, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Mesh");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<bool >(SWIG_As_bool(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->attach(*arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_attach__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Function *arg1 = (dolfin::Function *) 0 ;
    dolfin::Mesh *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Function_attach",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Function, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Mesh");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->attach(*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_attach__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Function *arg1 = (dolfin::Function *) 0 ;
    dolfin::FiniteElement *arg2 = 0 ;
    bool arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Function_attach",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Function, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__FiniteElement, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::FiniteElement");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<bool >(SWIG_As_bool(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->attach(*arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_attach__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Function *arg1 = (dolfin::Function *) 0 ;
    dolfin::FiniteElement *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Function_attach",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Function, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__FiniteElement, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::FiniteElement");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->attach(*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_attach(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Function, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Vector, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Function_attach__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Function, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Mesh, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Function_attach__SWIG_3(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Function, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__FiniteElement, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Function_attach__SWIG_5(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Function, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Vector, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_bool(argv[2]);
                if (_v) {
                    return _wrap_Function_attach__SWIG_0(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Function, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__FiniteElement, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_bool(argv[2]);
                if (_v) {
                    return _wrap_Function_attach__SWIG_4(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Function, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Mesh, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_bool(argv[2]);
                if (_v) {
                    return _wrap_Function_attach__SWIG_2(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Function_attach'");
    return NULL;
}


static PyObject *_wrap_Function_init(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Function *arg1 = (dolfin::Function *) 0 ;
    dolfin::Mesh *arg2 = 0 ;
    dolfin::FiniteElement *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Function_init",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Function, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Mesh");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__FiniteElement, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::FiniteElement");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->init(*arg2,*arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Function_type(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Function *arg1 = (dolfin::Function *) 0 ;
    dolfin::Function::Type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Function_type",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Function, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Function::Type)((dolfin::Function const *)arg1)->type();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_disown_Function(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Function *arg1 = (dolfin::Function *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:disown_Function",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Function, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        {
            Swig::Director *director = dynamic_cast<Swig::Director *>(arg1);
            if (director) director->swig_disown();
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Function_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__Function, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_FEM_assemble__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::BilinearForm *arg1 = 0 ;
    dolfin::Matrix *arg2 = 0 ;
    dolfin::Mesh *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:FEM_assemble",&obj0,&obj1,&obj2)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__BilinearForm, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::BilinearForm");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Matrix");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::Mesh");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        dolfin::FEM::assemble(*arg1,*arg2,*arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FEM_assemble__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::LinearForm *arg1 = 0 ;
    dolfin::Vector *arg2 = 0 ;
    dolfin::Mesh *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:FEM_assemble",&obj0,&obj1,&obj2)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__LinearForm, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::LinearForm");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::Mesh");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        dolfin::FEM::assemble(*arg1,*arg2,*arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FEM_assemble__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::BilinearForm *arg1 = 0 ;
    dolfin::LinearForm *arg2 = 0 ;
    dolfin::Matrix *arg3 = 0 ;
    dolfin::Vector *arg4 = 0 ;
    dolfin::Mesh *arg5 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:FEM_assemble",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__BilinearForm, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::BilinearForm");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__LinearForm, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::LinearForm");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::Matrix");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(5)) SWIG_fail;
        if (arg5 == NULL) {
            SWIG_null_ref("dolfin::Mesh");
        }
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        dolfin::FEM::assemble(*arg1,*arg2,*arg3,*arg4,*arg5);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FEM_assemble__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::BilinearForm *arg1 = 0 ;
    dolfin::LinearForm *arg2 = 0 ;
    dolfin::Matrix *arg3 = 0 ;
    dolfin::Vector *arg4 = 0 ;
    dolfin::Mesh *arg5 = 0 ;
    dolfin::BoundaryCondition *arg6 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:FEM_assemble",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__BilinearForm, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::BilinearForm");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__LinearForm, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::LinearForm");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::Matrix");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(5)) SWIG_fail;
        if (arg5 == NULL) {
            SWIG_null_ref("dolfin::Mesh");
        }
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj5, (void **)&arg6, SWIGTYPE_p_dolfin__BoundaryCondition, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(6)) SWIG_fail;
        if (arg6 == NULL) {
            SWIG_null_ref("dolfin::BoundaryCondition");
        }
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        dolfin::FEM::assemble(*arg1,*arg2,*arg3,*arg4,*arg5,*arg6);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FEM_assemble(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[7];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 6); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__BilinearForm, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Matrix, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_dolfin__Mesh, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_FEM_assemble__SWIG_0(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__LinearForm, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Vector, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_dolfin__Mesh, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_FEM_assemble__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__BilinearForm, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__LinearForm, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_dolfin__Matrix, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_dolfin__Vector, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        {
                            void *ptr = 0;
                            if (SWIG_ConvertPtr(argv[4], &ptr, SWIGTYPE_p_dolfin__Mesh, 0) == -1) {
                                _v = 0;
                                PyErr_Clear();
                            } else {
                                _v = (ptr != 0);
                            }
                        }
                        if (_v) {
                            return _wrap_FEM_assemble__SWIG_2(self,args);
                        }
                    }
                }
            }
        }
    }
    if (argc == 6) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__BilinearForm, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__LinearForm, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_dolfin__Matrix, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_dolfin__Vector, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        {
                            void *ptr = 0;
                            if (SWIG_ConvertPtr(argv[4], &ptr, SWIGTYPE_p_dolfin__Mesh, 0) == -1) {
                                _v = 0;
                                PyErr_Clear();
                            } else {
                                _v = (ptr != 0);
                            }
                        }
                        if (_v) {
                            {
                                void *ptr = 0;
                                if (SWIG_ConvertPtr(argv[5], &ptr, SWIGTYPE_p_dolfin__BoundaryCondition, 0) == -1) {
                                    _v = 0;
                                    PyErr_Clear();
                                } else {
                                    _v = (ptr != 0);
                                }
                            }
                            if (_v) {
                                return _wrap_FEM_assemble__SWIG_3(self,args);
                            }
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'FEM_assemble'");
    return NULL;
}


static PyObject *_wrap_FEM_applyBC__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Matrix *arg1 = 0 ;
    dolfin::Vector *arg2 = 0 ;
    dolfin::Mesh *arg3 = 0 ;
    dolfin::FiniteElement *arg4 = 0 ;
    dolfin::BoundaryCondition *arg5 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:FEM_applyBC",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::Matrix");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::Mesh");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_dolfin__FiniteElement, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("dolfin::FiniteElement");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_dolfin__BoundaryCondition, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(5)) SWIG_fail;
        if (arg5 == NULL) {
            SWIG_null_ref("dolfin::BoundaryCondition");
        }
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        dolfin::FEM::applyBC(*arg1,*arg2,*arg3,*arg4,*arg5);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FEM_applyBC__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Matrix *arg1 = 0 ;
    dolfin::Mesh *arg2 = 0 ;
    dolfin::FiniteElement *arg3 = 0 ;
    dolfin::BoundaryCondition *arg4 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:FEM_applyBC",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::Matrix");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Mesh");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__FiniteElement, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::FiniteElement");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_dolfin__BoundaryCondition, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("dolfin::BoundaryCondition");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        dolfin::FEM::applyBC(*arg1,*arg2,*arg3,*arg4);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FEM_applyBC__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vector *arg1 = 0 ;
    dolfin::Mesh *arg2 = 0 ;
    dolfin::FiniteElement *arg3 = 0 ;
    dolfin::BoundaryCondition *arg4 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:FEM_applyBC",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Mesh");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__FiniteElement, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::FiniteElement");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_dolfin__BoundaryCondition, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("dolfin::BoundaryCondition");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        dolfin::FEM::applyBC(*arg1,*arg2,*arg3,*arg4);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FEM_applyBC(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[6];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 5); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Matrix, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Mesh, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_dolfin__FiniteElement, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_dolfin__BoundaryCondition, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        return _wrap_FEM_applyBC__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Vector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Mesh, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_dolfin__FiniteElement, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_dolfin__BoundaryCondition, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        return _wrap_FEM_applyBC__SWIG_2(self,args);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Matrix, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Vector, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_dolfin__Mesh, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_dolfin__FiniteElement, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        {
                            void *ptr = 0;
                            if (SWIG_ConvertPtr(argv[4], &ptr, SWIGTYPE_p_dolfin__BoundaryCondition, 0) == -1) {
                                _v = 0;
                                PyErr_Clear();
                            } else {
                                _v = (ptr != 0);
                            }
                        }
                        if (_v) {
                            return _wrap_FEM_applyBC__SWIG_0(self,args);
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'FEM_applyBC'");
    return NULL;
}


static PyObject *_wrap_FEM_assembleBCresidual(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vector *arg1 = 0 ;
    dolfin::Vector *arg2 = 0 ;
    dolfin::Mesh *arg3 = 0 ;
    dolfin::FiniteElement *arg4 = 0 ;
    dolfin::BoundaryCondition *arg5 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:FEM_assembleBCresidual",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::Mesh");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_dolfin__FiniteElement, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("dolfin::FiniteElement");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_dolfin__BoundaryCondition, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(5)) SWIG_fail;
        if (arg5 == NULL) {
            SWIG_null_ref("dolfin::BoundaryCondition");
        }
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        dolfin::FEM::assembleBCresidual(*arg1,(dolfin::Vector const &)*arg2,*arg3,*arg4,*arg5);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FEM_size(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = 0 ;
    dolfin::FiniteElement *arg2 = 0 ;
    dolfin::uint result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FEM_size",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::Mesh");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__FiniteElement, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::FiniteElement");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::uint)dolfin::FEM::size((dolfin::Mesh const &)*arg1,(dolfin::FiniteElement const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FEM_lump(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Matrix *arg1 = 0 ;
    dolfin::Vector *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FEM_lump",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::Matrix");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        dolfin::FEM::lump((dolfin::Matrix const &)*arg1,*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FEM_disp(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = 0 ;
    dolfin::FiniteElement *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FEM_disp",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::Mesh");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__FiniteElement, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::FiniteElement");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        dolfin::FEM::disp((dolfin::Mesh const &)*arg1,(dolfin::FiniteElement const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * FEM_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__FEM, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_FiniteElement(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::FiniteElement *arg1 = (dolfin::FiniteElement *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_FiniteElement",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__FiniteElement, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FiniteElement_spacedim(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::FiniteElement *arg1 = (dolfin::FiniteElement *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FiniteElement_spacedim",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__FiniteElement, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (unsigned int)((dolfin::FiniteElement const *)arg1)->spacedim();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FiniteElement_shapedim(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::FiniteElement *arg1 = (dolfin::FiniteElement *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FiniteElement_shapedim",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__FiniteElement, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (unsigned int)((dolfin::FiniteElement const *)arg1)->shapedim();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FiniteElement_tensordim(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::FiniteElement *arg1 = (dolfin::FiniteElement *) 0 ;
    unsigned int arg2 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FiniteElement_tensordim",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__FiniteElement, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (unsigned int)((dolfin::FiniteElement const *)arg1)->tensordim(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FiniteElement_elementdim(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::FiniteElement *arg1 = (dolfin::FiniteElement *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FiniteElement_elementdim",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__FiniteElement, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (unsigned int)((dolfin::FiniteElement const *)arg1)->elementdim();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FiniteElement_rank(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::FiniteElement *arg1 = (dolfin::FiniteElement *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FiniteElement_rank",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__FiniteElement, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (unsigned int)((dolfin::FiniteElement const *)arg1)->rank();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FiniteElement_nodemap(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::FiniteElement *arg1 = (dolfin::FiniteElement *) 0 ;
    int *arg2 ;
    dolfin::Cell *arg3 = 0 ;
    dolfin::Mesh *arg4 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:FiniteElement_nodemap",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__FiniteElement, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::Cell");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("dolfin::Mesh");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        ((dolfin::FiniteElement const *)arg1)->nodemap(arg2,(dolfin::Cell const &)*arg3,(dolfin::Mesh const &)*arg4);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FiniteElement_pointmap(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::FiniteElement *arg1 = (dolfin::FiniteElement *) 0 ;
    dolfin::Point *arg2 ;
    unsigned int *arg3 ;
    dolfin::AffineMap *arg4 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:FiniteElement_pointmap",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__FiniteElement, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Point, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_unsigned_int, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("dolfin::AffineMap");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        ((dolfin::FiniteElement const *)arg1)->pointmap(arg2,arg3,(dolfin::AffineMap const &)*arg4);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FiniteElement_vertexeval(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::FiniteElement *arg1 = (dolfin::FiniteElement *) 0 ;
    dolfin::real *arg2 ;
    unsigned int arg3 ;
    dolfin::real *arg4 ;
    dolfin::Mesh *arg5 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:FiniteElement_vertexeval",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__FiniteElement, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(5)) SWIG_fail;
        if (arg5 == NULL) {
            SWIG_null_ref("dolfin::Mesh");
        }
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        ((dolfin::FiniteElement const *)arg1)->vertexeval(arg2,arg3,(double const (*))arg4,(dolfin::Mesh const &)*arg5);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FiniteElement_spec(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::FiniteElement *arg1 = (dolfin::FiniteElement *) 0 ;
    dolfin::FiniteElementSpec result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FiniteElement_spec",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__FiniteElement, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = ((dolfin::FiniteElement const *)arg1)->spec();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        dolfin::FiniteElementSpec * resultptr;
        resultptr = new dolfin::FiniteElementSpec(static_cast<dolfin::FiniteElementSpec & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_dolfin__FiniteElementSpec, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FiniteElement_makeElement__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::FiniteElementSpec *arg1 = 0 ;
    dolfin::FiniteElement *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FiniteElement_makeElement",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__FiniteElementSpec, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::FiniteElementSpec");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::FiniteElement *)dolfin::FiniteElement::makeElement((dolfin::FiniteElementSpec const &)*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__FiniteElement, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FiniteElement_makeElement__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    std::string arg2 ;
    dolfin::uint arg3 ;
    dolfin::uint arg4 ;
    dolfin::FiniteElement *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:FiniteElement_makeElement",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg3 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::FiniteElement *)dolfin::FiniteElement::makeElement(arg1,arg2,arg3,arg4);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__FiniteElement, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FiniteElement_makeElement__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    std::string arg2 ;
    dolfin::uint arg3 ;
    dolfin::FiniteElement *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:FiniteElement_makeElement",&obj0,&obj1,&obj2)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg3 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::FiniteElement *)dolfin::FiniteElement::makeElement(arg1,arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__FiniteElement, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FiniteElement_makeElement(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__FiniteElementSpec, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_FiniteElement_makeElement__SWIG_0(self,args);
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    return _wrap_FiniteElement_makeElement__SWIG_2(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    _v = SWIG_Check_unsigned_SS_int(argv[3]);
                    if (_v) {
                        return _wrap_FiniteElement_makeElement__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'FiniteElement_makeElement'");
    return NULL;
}


static PyObject *_wrap_FiniteElement_disp(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::FiniteElement *arg1 = (dolfin::FiniteElement *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FiniteElement_disp",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__FiniteElement, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        ((dolfin::FiniteElement const *)arg1)->disp();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * FiniteElement_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__FiniteElement, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_AffineMap(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::AffineMap *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_AffineMap")) goto fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::AffineMap *)new dolfin::AffineMap();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__AffineMap, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_AffineMap(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_AffineMap",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AffineMap_update(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
    dolfin::Cell *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AffineMap_update",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Cell");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->update(*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AffineMap___call____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
    dolfin::real arg2 ;
    dolfin::real arg3 ;
    dolfin::Point result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:AffineMap___call__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = ((dolfin::AffineMap const *)arg1)->operator ()(arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        dolfin::Point * resultptr;
        resultptr = new dolfin::Point(static_cast<dolfin::Point & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_dolfin__Point, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AffineMap___call____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
    dolfin::real arg2 ;
    dolfin::real arg3 ;
    dolfin::real arg4 ;
    dolfin::Point result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:AffineMap___call__",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<dolfin::real >(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = ((dolfin::AffineMap const *)arg1)->operator ()(arg2,arg3,arg4);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        dolfin::Point * resultptr;
        resultptr = new dolfin::Point(static_cast<dolfin::Point & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_dolfin__Point, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AffineMap___call__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__AffineMap, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    return _wrap_AffineMap___call____SWIG_0(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__AffineMap, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        return _wrap_AffineMap___call____SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'AffineMap___call__'");
    return NULL;
}


static PyObject *_wrap_AffineMap_cell(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
    dolfin::Cell *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AffineMap_cell",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Cell &_result_ref = ((dolfin::AffineMap const *)arg1)->cell();
            result = (dolfin::Cell *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Cell, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AffineMap_det_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
    dolfin::real arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AffineMap_det_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        if (arg1) (arg1)->det = arg2;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AffineMap_det_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AffineMap_det_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real) ((arg1)->det);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AffineMap_f00_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
    dolfin::real arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AffineMap_f00_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        if (arg1) (arg1)->f00 = arg2;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AffineMap_f00_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AffineMap_f00_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real) ((arg1)->f00);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AffineMap_f01_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
    dolfin::real arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AffineMap_f01_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        if (arg1) (arg1)->f01 = arg2;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AffineMap_f01_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AffineMap_f01_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real) ((arg1)->f01);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AffineMap_f02_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
    dolfin::real arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AffineMap_f02_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        if (arg1) (arg1)->f02 = arg2;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AffineMap_f02_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AffineMap_f02_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real) ((arg1)->f02);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AffineMap_f10_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
    dolfin::real arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AffineMap_f10_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        if (arg1) (arg1)->f10 = arg2;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AffineMap_f10_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AffineMap_f10_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real) ((arg1)->f10);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AffineMap_f11_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
    dolfin::real arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AffineMap_f11_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        if (arg1) (arg1)->f11 = arg2;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AffineMap_f11_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AffineMap_f11_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real) ((arg1)->f11);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AffineMap_f12_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
    dolfin::real arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AffineMap_f12_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        if (arg1) (arg1)->f12 = arg2;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AffineMap_f12_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AffineMap_f12_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real) ((arg1)->f12);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AffineMap_f20_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
    dolfin::real arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AffineMap_f20_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        if (arg1) (arg1)->f20 = arg2;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AffineMap_f20_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AffineMap_f20_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real) ((arg1)->f20);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AffineMap_f21_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
    dolfin::real arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AffineMap_f21_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        if (arg1) (arg1)->f21 = arg2;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AffineMap_f21_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AffineMap_f21_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real) ((arg1)->f21);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AffineMap_f22_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
    dolfin::real arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AffineMap_f22_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        if (arg1) (arg1)->f22 = arg2;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AffineMap_f22_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AffineMap_f22_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real) ((arg1)->f22);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AffineMap_g00_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
    dolfin::real arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AffineMap_g00_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        if (arg1) (arg1)->g00 = arg2;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AffineMap_g00_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AffineMap_g00_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real) ((arg1)->g00);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AffineMap_g01_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
    dolfin::real arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AffineMap_g01_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        if (arg1) (arg1)->g01 = arg2;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AffineMap_g01_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AffineMap_g01_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real) ((arg1)->g01);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AffineMap_g02_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
    dolfin::real arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AffineMap_g02_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        if (arg1) (arg1)->g02 = arg2;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AffineMap_g02_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AffineMap_g02_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real) ((arg1)->g02);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AffineMap_g10_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
    dolfin::real arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AffineMap_g10_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        if (arg1) (arg1)->g10 = arg2;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AffineMap_g10_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AffineMap_g10_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real) ((arg1)->g10);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AffineMap_g11_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
    dolfin::real arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AffineMap_g11_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        if (arg1) (arg1)->g11 = arg2;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AffineMap_g11_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AffineMap_g11_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real) ((arg1)->g11);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AffineMap_g12_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
    dolfin::real arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AffineMap_g12_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        if (arg1) (arg1)->g12 = arg2;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AffineMap_g12_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AffineMap_g12_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real) ((arg1)->g12);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AffineMap_g20_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
    dolfin::real arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AffineMap_g20_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        if (arg1) (arg1)->g20 = arg2;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AffineMap_g20_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AffineMap_g20_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real) ((arg1)->g20);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AffineMap_g21_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
    dolfin::real arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AffineMap_g21_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        if (arg1) (arg1)->g21 = arg2;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AffineMap_g21_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AffineMap_g21_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real) ((arg1)->g21);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AffineMap_g22_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
    dolfin::real arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:AffineMap_g22_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        if (arg1) (arg1)->g22 = arg2;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_AffineMap_g22_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::AffineMap *arg1 = (dolfin::AffineMap *) 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:AffineMap_g22_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real) ((arg1)->g22);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * AffineMap_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__AffineMap, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_BoundaryValue(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::BoundaryValue *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_BoundaryValue")) goto fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::BoundaryValue *)new dolfin::BoundaryValue();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__BoundaryValue, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_BoundaryValue(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::BoundaryValue *arg1 = (dolfin::BoundaryValue *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_BoundaryValue",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__BoundaryValue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BoundaryValue_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::BoundaryValue *arg1 = (dolfin::BoundaryValue *) 0 ;
    dolfin::real arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:BoundaryValue_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__BoundaryValue, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->set(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * BoundaryValue_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__BoundaryValue, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_BoundaryCondition(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    PyObject *arg1 = (PyObject *) 0 ;
    dolfin::BoundaryCondition *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_BoundaryCondition",&obj0)) goto fail;
    arg1 = obj0;
    try {
        Swig::UnknownExceptionHandler dh;
        if ( arg1 != Py_None ) {
            /* subclassed */
            result = (dolfin::BoundaryCondition *)new SwigDirector_BoundaryCondition(arg1);
            
        } else {
            PyErr_SetString(PyExc_RuntimeError,    "accessing abstract class or protected constructor"); 
            SWIG_fail;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__BoundaryCondition, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_BoundaryCondition(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::BoundaryCondition *arg1 = (dolfin::BoundaryCondition *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_BoundaryCondition",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__BoundaryCondition, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BoundaryCondition_eval(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::BoundaryCondition *arg1 = (dolfin::BoundaryCondition *) 0 ;
    dolfin::BoundaryValue *arg2 = 0 ;
    dolfin::Point *arg3 = 0 ;
    dolfin::uint arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:BoundaryCondition_eval",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__BoundaryCondition, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__BoundaryValue, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::BoundaryValue");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__Point, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::Point");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->eval(*arg2,(dolfin::Point const &)*arg3,arg4);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_disown_BoundaryCondition(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::BoundaryCondition *arg1 = (dolfin::BoundaryCondition *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:disown_BoundaryCondition",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__BoundaryCondition, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        {
            Swig::Director *director = dynamic_cast<Swig::Director *>(arg1);
            if (director) director->swig_disown();
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * BoundaryCondition_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__BoundaryCondition, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Form(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::uint arg1 ;
    dolfin::Form *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Form",&obj0)) goto fail;
    {
        arg1 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Form *)new dolfin::Form(arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Form, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Form(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Form *arg1 = (dolfin::Form *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Form",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Form, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Form_update(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Form *arg1 = (dolfin::Form *) 0 ;
    dolfin::AffineMap *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Form_update",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Form, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::AffineMap");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->update(*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Form_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__Form, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_BilinearForm__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::uint arg1 ;
    dolfin::BilinearForm *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_BilinearForm",&obj0)) goto fail;
    {
        arg1 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::BilinearForm *)new dolfin::BilinearForm(arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__BilinearForm, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_BilinearForm__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::BilinearForm *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_BilinearForm")) goto fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::BilinearForm *)new dolfin::BilinearForm();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__BilinearForm, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_BilinearForm(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_BilinearForm__SWIG_1(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_unsigned_SS_int(argv[0]);
        if (_v) {
            return _wrap_new_BilinearForm__SWIG_0(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_BilinearForm'");
    return NULL;
}


static PyObject *_wrap_delete_BilinearForm(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::BilinearForm *arg1 = (dolfin::BilinearForm *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_BilinearForm",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__BilinearForm, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BilinearForm_eval__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::BilinearForm *arg1 = (dolfin::BilinearForm *) 0 ;
    dolfin::real *arg2 ;
    dolfin::AffineMap *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:BilinearForm_eval",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__BilinearForm, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::AffineMap");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        ((dolfin::BilinearForm const *)arg1)->eval(arg2,(dolfin::AffineMap const &)*arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BilinearForm_eval__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::BilinearForm *arg1 = (dolfin::BilinearForm *) 0 ;
    dolfin::real *arg2 ;
    dolfin::AffineMap *arg3 = 0 ;
    dolfin::uint arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:BilinearForm_eval",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__BilinearForm, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::AffineMap");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        ((dolfin::BilinearForm const *)arg1)->eval(arg2,(dolfin::AffineMap const &)*arg3,arg4);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BilinearForm_eval(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__BilinearForm, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_double, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_dolfin__AffineMap, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_BilinearForm_eval__SWIG_0(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__BilinearForm, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_double, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_dolfin__AffineMap, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    _v = SWIG_Check_unsigned_SS_int(argv[3]);
                    if (_v) {
                        return _wrap_BilinearForm_eval__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'BilinearForm_eval'");
    return NULL;
}


static PyObject *_wrap_BilinearForm_test(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::BilinearForm *arg1 = (dolfin::BilinearForm *) 0 ;
    dolfin::FiniteElement *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:BilinearForm_test",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__BilinearForm, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::FiniteElement &_result_ref = (arg1)->test();
            result = (dolfin::FiniteElement *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__FiniteElement, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BilinearForm_trial(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::BilinearForm *arg1 = (dolfin::BilinearForm *) 0 ;
    dolfin::FiniteElement *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:BilinearForm_trial",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__BilinearForm, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::FiniteElement &_result_ref = (arg1)->trial();
            result = (dolfin::FiniteElement *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__FiniteElement, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * BilinearForm_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__BilinearForm, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_LinearForm__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::uint arg1 ;
    dolfin::LinearForm *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_LinearForm",&obj0)) goto fail;
    {
        arg1 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::LinearForm *)new dolfin::LinearForm(arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__LinearForm, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_LinearForm__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::LinearForm *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_LinearForm")) goto fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::LinearForm *)new dolfin::LinearForm();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__LinearForm, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_LinearForm(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_LinearForm__SWIG_1(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_unsigned_SS_int(argv[0]);
        if (_v) {
            return _wrap_new_LinearForm__SWIG_0(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_LinearForm'");
    return NULL;
}


static PyObject *_wrap_delete_LinearForm(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::LinearForm *arg1 = (dolfin::LinearForm *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_LinearForm",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__LinearForm, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LinearForm_eval__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::LinearForm *arg1 = (dolfin::LinearForm *) 0 ;
    dolfin::real *arg2 ;
    dolfin::AffineMap *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:LinearForm_eval",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__LinearForm, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::AffineMap");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        ((dolfin::LinearForm const *)arg1)->eval(arg2,(dolfin::AffineMap const &)*arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LinearForm_eval__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::LinearForm *arg1 = (dolfin::LinearForm *) 0 ;
    dolfin::real *arg2 ;
    dolfin::AffineMap *arg3 = 0 ;
    dolfin::uint arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:LinearForm_eval",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__LinearForm, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__AffineMap, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::AffineMap");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        ((dolfin::LinearForm const *)arg1)->eval(arg2,(dolfin::AffineMap const &)*arg3,arg4);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LinearForm_eval(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__LinearForm, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_double, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_dolfin__AffineMap, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_LinearForm_eval__SWIG_0(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__LinearForm, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_double, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_dolfin__AffineMap, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    _v = SWIG_Check_unsigned_SS_int(argv[3]);
                    if (_v) {
                        return _wrap_LinearForm_eval__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'LinearForm_eval'");
    return NULL;
}


static PyObject *_wrap_LinearForm_test(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::LinearForm *arg1 = (dolfin::LinearForm *) 0 ;
    dolfin::FiniteElement *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:LinearForm_test",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__LinearForm, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::FiniteElement &_result_ref = (arg1)->test();
            result = (dolfin::FiniteElement *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__FiniteElement, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * LinearForm_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__LinearForm, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Mesh__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Mesh")) goto fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Mesh *)new dolfin::Mesh();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Mesh, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Mesh__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    dolfin::Mesh *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Mesh",&obj0)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Mesh *)new dolfin::Mesh((char const *)arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Mesh, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Mesh__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = 0 ;
    dolfin::Mesh *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Mesh",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::Mesh");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Mesh *)new dolfin::Mesh((dolfin::Mesh const &)*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Mesh, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Mesh(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_Mesh__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Mesh, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_Mesh__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            return _wrap_new_Mesh__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_Mesh'");
    return NULL;
}


static PyObject *_wrap_delete_Mesh(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Mesh",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Mesh_merge(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
    dolfin::Mesh *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Mesh_merge",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Mesh");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->merge(*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Mesh_init(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Mesh_init",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->init();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Mesh_clear(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Mesh_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->clear();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Mesh_numSpaceDim(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Mesh_numSpaceDim",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)((dolfin::Mesh const *)arg1)->numSpaceDim();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Mesh_numVertices(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Mesh_numVertices",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)((dolfin::Mesh const *)arg1)->numVertices();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Mesh_numCells(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Mesh_numCells",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)((dolfin::Mesh const *)arg1)->numCells();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Mesh_numEdges(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Mesh_numEdges",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)((dolfin::Mesh const *)arg1)->numEdges();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Mesh_numFaces(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Mesh_numFaces",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)((dolfin::Mesh const *)arg1)->numFaces();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Mesh_createVertex__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
    dolfin::Point arg2 ;
    dolfin::Vertex *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Mesh_createVertex",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        dolfin::Point * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_dolfin__Point, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("dolfin::Point");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Vertex &_result_ref = (arg1)->createVertex(arg2);
            result = (dolfin::Vertex *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Vertex, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Mesh_createVertex__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
    dolfin::real arg2 ;
    dolfin::real arg3 ;
    dolfin::real arg4 ;
    dolfin::Vertex *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Mesh_createVertex",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<dolfin::real >(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Vertex &_result_ref = (arg1)->createVertex(arg2,arg3,arg4);
            result = (dolfin::Vertex *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Vertex, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Mesh_createVertex(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Mesh, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Point, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Mesh_createVertex__SWIG_0(self,args);
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Mesh, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        return _wrap_Mesh_createVertex__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Mesh_createVertex'");
    return NULL;
}


static PyObject *_wrap_Mesh_createCell__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    dolfin::Cell *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Mesh_createCell",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<int >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<int >(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Cell &_result_ref = (arg1)->createCell(arg2,arg3,arg4);
            result = (dolfin::Cell *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Cell, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Mesh_createCell__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    dolfin::Cell *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:Mesh_createCell",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<int >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<int >(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = static_cast<int >(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Cell &_result_ref = (arg1)->createCell(arg2,arg3,arg4,arg5);
            result = (dolfin::Cell *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Cell, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Mesh_createCell__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
    dolfin::Vertex *arg2 = 0 ;
    dolfin::Vertex *arg3 = 0 ;
    dolfin::Vertex *arg4 = 0 ;
    dolfin::Cell *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Mesh_createCell",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Cell &_result_ref = (arg1)->createCell(*arg2,*arg3,*arg4);
            result = (dolfin::Cell *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Cell, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Mesh_createCell__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
    dolfin::Vertex *arg2 = 0 ;
    dolfin::Vertex *arg3 = 0 ;
    dolfin::Vertex *arg4 = 0 ;
    dolfin::Vertex *arg5 = 0 ;
    dolfin::Cell *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:Mesh_createCell",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(5)) SWIG_fail;
        if (arg5 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Cell &_result_ref = (arg1)->createCell(*arg2,*arg3,*arg4,*arg5);
            result = (dolfin::Cell *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Cell, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Mesh_createCell(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[6];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 5); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Mesh, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        return _wrap_Mesh_createCell__SWIG_2(self,args);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Mesh, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        return _wrap_Mesh_createCell__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Mesh, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        {
                            void *ptr = 0;
                            if (SWIG_ConvertPtr(argv[4], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                                _v = 0;
                                PyErr_Clear();
                            } else {
                                _v = (ptr != 0);
                            }
                        }
                        if (_v) {
                            return _wrap_Mesh_createCell__SWIG_3(self,args);
                        }
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Mesh, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_int(argv[4]);
                        if (_v) {
                            return _wrap_Mesh_createCell__SWIG_1(self,args);
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Mesh_createCell'");
    return NULL;
}


static PyObject *_wrap_Mesh_createEdge__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
    int arg2 ;
    int arg3 ;
    Edge *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Mesh_createEdge",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<int >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            Edge &_result_ref = (arg1)->createEdge(arg2,arg3);
            result = (Edge *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Edge, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Mesh_createEdge__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
    dolfin::Vertex *arg2 = 0 ;
    dolfin::Vertex *arg3 = 0 ;
    Edge *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Mesh_createEdge",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            Edge &_result_ref = (arg1)->createEdge(*arg2,*arg3);
            result = (Edge *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Edge, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Mesh_createEdge(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Mesh, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_Mesh_createEdge__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Mesh, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_Mesh_createEdge__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Mesh_createEdge'");
    return NULL;
}


static PyObject *_wrap_Mesh_createFace__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    Face *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Mesh_createFace",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<int >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<int >(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            Face &_result_ref = (arg1)->createFace(arg2,arg3,arg4);
            result = (Face *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Face, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Mesh_createFace__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
    Edge *arg2 = 0 ;
    Edge *arg3 = 0 ;
    Edge *arg4 = 0 ;
    Face *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Mesh_createFace",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Edge, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("Edge");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_Edge, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("Edge");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_Edge, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("Edge");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            Face &_result_ref = (arg1)->createFace(*arg2,*arg3,*arg4);
            result = (Face *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Face, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Mesh_createFace(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Mesh, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_Edge, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_Edge, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_Edge, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        return _wrap_Mesh_createFace__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Mesh, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        return _wrap_Mesh_createFace__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Mesh_createFace'");
    return NULL;
}


static PyObject *_wrap_Mesh_remove__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
    dolfin::Vertex *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Mesh_remove",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->remove(*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Mesh_remove__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
    dolfin::Cell *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Mesh_remove",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Cell");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->remove(*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Mesh_remove__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
    Edge *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Mesh_remove",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Edge, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("Edge");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->remove(*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Mesh_remove__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
    Face *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Mesh_remove",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Face, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("Face");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->remove(*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Mesh_remove(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Mesh, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Mesh_remove__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Mesh, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Cell, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Mesh_remove__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Mesh, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_Edge, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Mesh_remove__SWIG_2(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Mesh, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_Face, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Mesh_remove__SWIG_3(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Mesh_remove'");
    return NULL;
}


static PyObject *_wrap_Mesh_type(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
    dolfin::Mesh::Type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Mesh_type",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Mesh::Type)((dolfin::Mesh const *)arg1)->type();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Mesh_vertex(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
    dolfin::uint arg2 ;
    dolfin::Vertex *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Mesh_vertex",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Vertex &_result_ref = (arg1)->vertex(arg2);
            result = (dolfin::Vertex *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Vertex, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Mesh_cell(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
    dolfin::uint arg2 ;
    dolfin::Cell *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Mesh_cell",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Cell &_result_ref = (arg1)->cell(arg2);
            result = (dolfin::Cell *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Cell, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Mesh_edge(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
    dolfin::uint arg2 ;
    Edge *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Mesh_edge",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            Edge &_result_ref = (arg1)->edge(arg2);
            result = (Edge *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Edge, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Mesh_face(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
    dolfin::uint arg2 ;
    Face *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Mesh_face",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            Face &_result_ref = (arg1)->face(arg2);
            result = (Face *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Face, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Mesh_boundary(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
    Boundary result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Mesh_boundary",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (arg1)->boundary();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        Boundary * resultptr;
        resultptr = new Boundary(static_cast<Boundary & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_Boundary, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Mesh_refine(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Mesh_refine",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->refine();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Mesh_refineUniformly__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Mesh_refineUniformly",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->refineUniformly();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Mesh_refineUniformly__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Mesh_refineUniformly",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->refineUniformly(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Mesh_refineUniformly(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Mesh, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_Mesh_refineUniformly__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Mesh, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_Mesh_refineUniformly__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Mesh_refineUniformly'");
    return NULL;
}


static PyObject *_wrap_Mesh_parent(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
    dolfin::Mesh *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Mesh_parent",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Mesh &_result_ref = (arg1)->parent();
            result = (dolfin::Mesh *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Mesh, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Mesh_child(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
    dolfin::Mesh *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Mesh_child",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Mesh &_result_ref = (arg1)->child();
            result = (dolfin::Mesh *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Mesh, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Mesh___eq__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
    dolfin::Mesh *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Mesh___eq__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Mesh");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)((dolfin::Mesh const *)arg1)->operator ==((dolfin::Mesh const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Mesh___ne__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
    dolfin::Mesh *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Mesh___ne__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Mesh");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)((dolfin::Mesh const *)arg1)->operator !=((dolfin::Mesh const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Mesh_disp(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Mesh_disp",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        ((dolfin::Mesh const *)arg1)->disp();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Mesh_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__Mesh, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Boundary__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Boundary *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Boundary")) goto fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Boundary *)new dolfin::Boundary();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Boundary, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Boundary__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = 0 ;
    dolfin::Boundary *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Boundary",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::Mesh");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Boundary *)new dolfin::Boundary(*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Boundary, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Boundary(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_Boundary__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Mesh, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_Boundary__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_Boundary'");
    return NULL;
}


static PyObject *_wrap_delete_Boundary(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Boundary *arg1 = (dolfin::Boundary *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Boundary",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Boundary, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Boundary_numVertices(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Boundary *arg1 = (dolfin::Boundary *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Boundary_numVertices",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Boundary, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)((dolfin::Boundary const *)arg1)->numVertices();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Boundary_numEdges(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Boundary *arg1 = (dolfin::Boundary *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Boundary_numEdges",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Boundary, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)((dolfin::Boundary const *)arg1)->numEdges();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Boundary_numFaces(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Boundary *arg1 = (dolfin::Boundary *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Boundary_numFaces",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Boundary, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)((dolfin::Boundary const *)arg1)->numFaces();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Boundary_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__Boundary, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Point__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Point *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Point")) goto fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Point *)new dolfin::Point();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Point, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Point__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::real arg1 ;
    dolfin::Point *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Point",&obj0)) goto fail;
    {
        arg1 = static_cast<dolfin::real >(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Point *)new dolfin::Point(arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Point, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Point__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::real arg1 ;
    dolfin::real arg2 ;
    dolfin::Point *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_Point",&obj0,&obj1)) goto fail;
    {
        arg1 = static_cast<dolfin::real >(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Point *)new dolfin::Point(arg1,arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Point, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Point__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::real arg1 ;
    dolfin::real arg2 ;
    dolfin::real arg3 ;
    dolfin::Point *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_Point",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = static_cast<dolfin::real >(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Point *)new dolfin::Point(arg1,arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Point, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Point__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Point *arg1 = 0 ;
    dolfin::Point *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Point",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Point, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::Point");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Point *)new dolfin::Point((dolfin::Point const &)*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Point, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Point(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_Point__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Point, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_Point__SWIG_4(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            return _wrap_new_Point__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_new_Point__SWIG_2(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    return _wrap_new_Point__SWIG_3(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_Point'");
    return NULL;
}


static PyObject *_wrap_Point_dist__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Point *arg1 = (dolfin::Point *) 0 ;
    dolfin::Point arg2 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Point_dist",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Point, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        dolfin::Point * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_dolfin__Point, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("dolfin::Point");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::Point const *)arg1)->dist(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Point_dist__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Point *arg1 = (dolfin::Point *) 0 ;
    dolfin::real arg2 ;
    dolfin::real arg3 ;
    dolfin::real arg4 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Point_dist",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Point, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<dolfin::real >(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::Point const *)arg1)->dist(arg2,arg3,arg4);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Point_dist__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Point *arg1 = (dolfin::Point *) 0 ;
    dolfin::real arg2 ;
    dolfin::real arg3 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Point_dist",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Point, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::Point const *)arg1)->dist(arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Point_dist__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Point *arg1 = (dolfin::Point *) 0 ;
    dolfin::real arg2 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Point_dist",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Point, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::Point const *)arg1)->dist(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Point_dist(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Point, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Point, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Point_dist__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Point, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_Point_dist__SWIG_3(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Point, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    return _wrap_Point_dist__SWIG_2(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Point, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        return _wrap_Point_dist__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Point_dist'");
    return NULL;
}


static PyObject *_wrap_Point_norm(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Point *arg1 = (dolfin::Point *) 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Point_norm",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Point, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::Point const *)arg1)->norm();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Point_midpoint(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Point *arg1 = (dolfin::Point *) 0 ;
    dolfin::Point arg2 ;
    dolfin::Point result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Point_midpoint",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Point, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        dolfin::Point * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_dolfin__Point, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("dolfin::Point");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = ((dolfin::Point const *)arg1)->midpoint(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        dolfin::Point * resultptr;
        resultptr = new dolfin::Point(static_cast<dolfin::Point & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_dolfin__Point, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Point___add__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Point *arg1 = (dolfin::Point *) 0 ;
    dolfin::Point *arg2 = 0 ;
    dolfin::Point result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Point___add__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Point, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Point, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Point");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = ((dolfin::Point const *)arg1)->operator +((dolfin::Point const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        dolfin::Point * resultptr;
        resultptr = new dolfin::Point(static_cast<dolfin::Point & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_dolfin__Point, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Point___sub__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Point *arg1 = (dolfin::Point *) 0 ;
    dolfin::Point *arg2 = 0 ;
    dolfin::Point result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Point___sub__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Point, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Point, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Point");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = ((dolfin::Point const *)arg1)->operator -((dolfin::Point const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        dolfin::Point * resultptr;
        resultptr = new dolfin::Point(static_cast<dolfin::Point & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_dolfin__Point, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Point___mul__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Point *arg1 = (dolfin::Point *) 0 ;
    dolfin::Point *arg2 = 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Point___mul__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Point, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Point, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Point");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::Point const *)arg1)->operator *((dolfin::Point const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Point___iadd__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Point *arg1 = (dolfin::Point *) 0 ;
    dolfin::Point *arg2 = 0 ;
    dolfin::Point *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Point___iadd__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Point, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Point, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Point");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Point const &_result_ref = (arg1)->operator +=((dolfin::Point const &)*arg2);
            result = (dolfin::Point *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Point, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Point___isub__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Point *arg1 = (dolfin::Point *) 0 ;
    dolfin::Point *arg2 = 0 ;
    dolfin::Point *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Point___isub__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Point, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Point, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Point");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Point const &_result_ref = (arg1)->operator -=((dolfin::Point const &)*arg2);
            result = (dolfin::Point *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Point, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Point___imul__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Point *arg1 = (dolfin::Point *) 0 ;
    dolfin::real arg2 ;
    dolfin::Point *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Point___imul__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Point, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Point const &_result_ref = (arg1)->operator *=(arg2);
            result = (dolfin::Point *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Point, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Point___idiv__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Point *arg1 = (dolfin::Point *) 0 ;
    dolfin::real arg2 ;
    dolfin::Point *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Point___idiv__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Point, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Point const &_result_ref = (arg1)->operator /=(arg2);
            result = (dolfin::Point *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Point, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Point_cross(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Point *arg1 = (dolfin::Point *) 0 ;
    dolfin::Point *arg2 = 0 ;
    dolfin::Point result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Point_cross",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Point, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Point, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Point");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = ((dolfin::Point const *)arg1)->cross((dolfin::Point const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        dolfin::Point * resultptr;
        resultptr = new dolfin::Point(static_cast<dolfin::Point & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_dolfin__Point, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Point_x_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Point *arg1 = (dolfin::Point *) 0 ;
    dolfin::real arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Point_x_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Point, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        if (arg1) (arg1)->x = arg2;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Point_x_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Point *arg1 = (dolfin::Point *) 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Point_x_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Point, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real) ((arg1)->x);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Point_y_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Point *arg1 = (dolfin::Point *) 0 ;
    dolfin::real arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Point_y_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Point, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        if (arg1) (arg1)->y = arg2;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Point_y_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Point *arg1 = (dolfin::Point *) 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Point_y_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Point, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real) ((arg1)->y);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Point_z_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Point *arg1 = (dolfin::Point *) 0 ;
    dolfin::real arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Point_z_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Point, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        if (arg1) (arg1)->z = arg2;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Point_z_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Point *arg1 = (dolfin::Point *) 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Point_z_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Point, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real) ((arg1)->z);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Point_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__Point, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Vertex__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vertex *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Vertex")) goto fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Vertex *)new dolfin::Vertex();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Vertex, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Vertex__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::real arg1 ;
    dolfin::Vertex *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Vertex",&obj0)) goto fail;
    {
        arg1 = static_cast<dolfin::real >(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Vertex *)new dolfin::Vertex(arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Vertex, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Vertex__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::real arg1 ;
    dolfin::real arg2 ;
    dolfin::Vertex *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_Vertex",&obj0,&obj1)) goto fail;
    {
        arg1 = static_cast<dolfin::real >(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Vertex *)new dolfin::Vertex(arg1,arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Vertex, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Vertex__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::real arg1 ;
    dolfin::real arg2 ;
    dolfin::real arg3 ;
    dolfin::Vertex *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_Vertex",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = static_cast<dolfin::real >(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Vertex *)new dolfin::Vertex(arg1,arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Vertex, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Vertex(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_Vertex__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            return _wrap_new_Vertex__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_new_Vertex__SWIG_2(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    return _wrap_new_Vertex__SWIG_3(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_Vertex'");
    return NULL;
}


static PyObject *_wrap_delete_Vertex(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Vertex",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vertex_clear(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Vertex_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->clear();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vertex_id(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Vertex_id",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)((dolfin::Vertex const *)arg1)->id();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vertex_numVertexNeighbors(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Vertex_numVertexNeighbors",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)((dolfin::Vertex const *)arg1)->numVertexNeighbors();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vertex_numCellNeighbors(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Vertex_numCellNeighbors",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)((dolfin::Vertex const *)arg1)->numCellNeighbors();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vertex_numEdgeNeighbors(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Vertex_numEdgeNeighbors",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)((dolfin::Vertex const *)arg1)->numEdgeNeighbors();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vertex_vertex(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
    int arg2 ;
    dolfin::Vertex *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Vertex_vertex",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Vertex &_result_ref = ((dolfin::Vertex const *)arg1)->vertex(arg2);
            result = (dolfin::Vertex *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Vertex, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vertex_cell(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
    int arg2 ;
    dolfin::Cell *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Vertex_cell",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Cell &_result_ref = ((dolfin::Vertex const *)arg1)->cell(arg2);
            result = (dolfin::Cell *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Cell, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vertex_edge(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
    int arg2 ;
    dolfin::Edge *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Vertex_edge",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Edge &_result_ref = ((dolfin::Vertex const *)arg1)->edge(arg2);
            result = (dolfin::Edge *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Edge, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vertex_parent(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
    dolfin::Vertex *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Vertex_parent",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Vertex *)((dolfin::Vertex const *)arg1)->parent();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Vertex, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vertex_child(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
    dolfin::Vertex *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Vertex_child",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Vertex *)((dolfin::Vertex const *)arg1)->child();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Vertex, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vertex_mesh__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
    dolfin::Mesh *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Vertex_mesh",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Mesh &_result_ref = (arg1)->mesh();
            result = (dolfin::Mesh *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Mesh, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vertex_mesh__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
    dolfin::Mesh *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Vertex_mesh",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Mesh const &_result_ref = ((dolfin::Vertex const *)arg1)->mesh();
            result = (dolfin::Mesh *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Mesh, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vertex_mesh(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_Vertex_mesh__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_Vertex_mesh__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Vertex_mesh'");
    return NULL;
}


static PyObject *_wrap_Vertex_coord__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
    dolfin::Point *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Vertex_coord",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Point &_result_ref = (arg1)->coord();
            result = (dolfin::Point *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Point, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vertex_coord__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
    dolfin::Point result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Vertex_coord",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = ((dolfin::Vertex const *)arg1)->coord();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        dolfin::Point * resultptr;
        resultptr = new dolfin::Point(static_cast<dolfin::Point & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_dolfin__Point, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vertex_coord(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_Vertex_coord__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_Vertex_coord__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Vertex_coord'");
    return NULL;
}


static PyObject *_wrap_Vertex_midpoint(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
    dolfin::Vertex *arg2 = 0 ;
    dolfin::Point result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Vertex_midpoint",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = ((dolfin::Vertex const *)arg1)->midpoint((dolfin::Vertex const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        dolfin::Point * resultptr;
        resultptr = new dolfin::Point(static_cast<dolfin::Point & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_dolfin__Point, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vertex_dist__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
    dolfin::Vertex *arg2 = 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Vertex_dist",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::Vertex const *)arg1)->dist((dolfin::Vertex const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vertex_dist__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
    dolfin::Point *arg2 = 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Vertex_dist",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Point, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Point");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::Vertex const *)arg1)->dist((dolfin::Point const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vertex_dist__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
    dolfin::real arg2 ;
    dolfin::real arg3 ;
    dolfin::real arg4 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Vertex_dist",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<dolfin::real >(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::Vertex const *)arg1)->dist(arg2,arg3,arg4);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vertex_dist__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
    dolfin::real arg2 ;
    dolfin::real arg3 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Vertex_dist",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::Vertex const *)arg1)->dist(arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vertex_dist__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
    dolfin::real arg2 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Vertex_dist",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::Vertex const *)arg1)->dist(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vertex_dist(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Vertex_dist__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Point, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Vertex_dist__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_Vertex_dist__SWIG_4(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    return _wrap_Vertex_dist__SWIG_3(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        return _wrap_Vertex_dist__SWIG_2(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Vertex_dist'");
    return NULL;
}


static PyObject *_wrap_Vertex_neighbor(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
    dolfin::Vertex *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Vertex_neighbor",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)((dolfin::Vertex const *)arg1)->neighbor((dolfin::Vertex const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vertex___eq____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
    dolfin::Vertex *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Vertex___eq__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)((dolfin::Vertex const *)arg1)->operator ==((dolfin::Vertex const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vertex___ne__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
    dolfin::Vertex *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Vertex___ne__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)((dolfin::Vertex const *)arg1)->operator !=((dolfin::Vertex const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vertex___eq____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
    int arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Vertex___eq__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)((dolfin::Vertex const *)arg1)->operator ==(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vertex___eq__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Vertex___eq____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_Vertex___eq____SWIG_1(self,args);
            }
        }
    }
    
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


static PyObject *_wrap_Vertex___lt__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
    int arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Vertex___lt__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)((dolfin::Vertex const *)arg1)->operator <(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vertex___le__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
    int arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Vertex___le__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)((dolfin::Vertex const *)arg1)->operator <=(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vertex___gt__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
    int arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Vertex___gt__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)((dolfin::Vertex const *)arg1)->operator >(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vertex___ge__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
    int arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Vertex___ge__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)((dolfin::Vertex const *)arg1)->operator >=(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vertex_nbids_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
    std::set<int > arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Vertex_nbids_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::set<int > * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_std__setTint_t, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("std::set<int >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        if (arg1) (arg1)->nbids = arg2;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vertex_nbids_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vertex *arg1 = (dolfin::Vertex *) 0 ;
    std::set<int > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Vertex_nbids_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result =  ((arg1)->nbids);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        std::set<int > * resultptr;
        resultptr = new std::set<int >(static_cast<std::set<int > & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__setTint_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Vertex_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__Vertex, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Edge__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Edge *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Edge")) goto fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Edge *)new dolfin::Edge();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Edge, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Edge__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vertex *arg1 = 0 ;
    dolfin::Vertex *arg2 = 0 ;
    dolfin::Edge *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_Edge",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Edge *)new dolfin::Edge(*arg1,*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Edge, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Edge(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_Edge__SWIG_0(self,args);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_Edge__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_Edge'");
    return NULL;
}


static PyObject *_wrap_delete_Edge(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Edge *arg1 = (dolfin::Edge *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Edge",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Edge, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Edge_clear(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Edge *arg1 = (dolfin::Edge *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Edge_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Edge, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->clear();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Edge_id(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Edge *arg1 = (dolfin::Edge *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Edge_id",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Edge, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)((dolfin::Edge const *)arg1)->id();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Edge_numCellNeighbors(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Edge *arg1 = (dolfin::Edge *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Edge_numCellNeighbors",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Edge, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (unsigned int)((dolfin::Edge const *)arg1)->numCellNeighbors();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Edge_vertex(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Edge *arg1 = (dolfin::Edge *) 0 ;
    int arg2 ;
    dolfin::Vertex *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Edge_vertex",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Edge, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Vertex &_result_ref = ((dolfin::Edge const *)arg1)->vertex(arg2);
            result = (dolfin::Vertex *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Vertex, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Edge_cell(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Edge *arg1 = (dolfin::Edge *) 0 ;
    int arg2 ;
    dolfin::Cell *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Edge_cell",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Edge, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Cell &_result_ref = ((dolfin::Edge const *)arg1)->cell(arg2);
            result = (dolfin::Cell *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Cell, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Edge_mesh__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Edge *arg1 = (dolfin::Edge *) 0 ;
    dolfin::Mesh *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Edge_mesh",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Edge, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Mesh &_result_ref = (arg1)->mesh();
            result = (dolfin::Mesh *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Mesh, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Edge_mesh__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Edge *arg1 = (dolfin::Edge *) 0 ;
    dolfin::Mesh *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Edge_mesh",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Edge, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Mesh const &_result_ref = ((dolfin::Edge const *)arg1)->mesh();
            result = (dolfin::Mesh *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Mesh, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Edge_mesh(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Edge, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_Edge_mesh__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Edge, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_Edge_mesh__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Edge_mesh'");
    return NULL;
}


static PyObject *_wrap_Edge_coord(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Edge *arg1 = (dolfin::Edge *) 0 ;
    int arg2 ;
    dolfin::Point *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Edge_coord",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Edge, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Point &_result_ref = ((dolfin::Edge const *)arg1)->coord(arg2);
            result = (dolfin::Point *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Point, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Edge_length(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Edge *arg1 = (dolfin::Edge *) 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Edge_length",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Edge, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::Edge const *)arg1)->length();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Edge_midpoint(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Edge *arg1 = (dolfin::Edge *) 0 ;
    dolfin::Point result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Edge_midpoint",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Edge, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = ((dolfin::Edge const *)arg1)->midpoint();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        dolfin::Point * resultptr;
        resultptr = new dolfin::Point(static_cast<dolfin::Point & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_dolfin__Point, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Edge_equals(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Edge *arg1 = (dolfin::Edge *) 0 ;
    dolfin::Vertex *arg2 = 0 ;
    dolfin::Vertex *arg3 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Edge_equals",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Edge, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)((dolfin::Edge const *)arg1)->equals((dolfin::Vertex const &)*arg2,(dolfin::Vertex const &)*arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Edge_contains__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Edge *arg1 = (dolfin::Edge *) 0 ;
    dolfin::Vertex *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Edge_contains",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Edge, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)((dolfin::Edge const *)arg1)->contains((dolfin::Vertex const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Edge_contains__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Edge *arg1 = (dolfin::Edge *) 0 ;
    dolfin::Point *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Edge_contains",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Edge, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Point, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Point");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)((dolfin::Edge const *)arg1)->contains((dolfin::Point const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Edge_contains(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Edge, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Edge_contains__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Edge, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Point, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Edge_contains__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Edge_contains'");
    return NULL;
}


static PyObject *_wrap_Edge_ebids_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Edge *arg1 = (dolfin::Edge *) 0 ;
    std::set<int > arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Edge_ebids_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Edge, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::set<int > * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_std__setTint_t, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("std::set<int >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        if (arg1) (arg1)->ebids = arg2;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Edge_ebids_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Edge *arg1 = (dolfin::Edge *) 0 ;
    std::set<int > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Edge_ebids_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Edge, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result =  ((arg1)->ebids);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        std::set<int > * resultptr;
        resultptr = new std::set<int >(static_cast<std::set<int > & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__setTint_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Edge_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__Edge, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Triangle(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vertex *arg1 = 0 ;
    dolfin::Vertex *arg2 = 0 ;
    dolfin::Vertex *arg3 = 0 ;
    dolfin::Triangle *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_Triangle",&obj0,&obj1,&obj2)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Triangle *)new dolfin::Triangle(*arg1,*arg2,*arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Triangle, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Triangle_numVertices(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Triangle *arg1 = (dolfin::Triangle *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Triangle_numVertices",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Triangle, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)((dolfin::Triangle const *)arg1)->numVertices();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Triangle_numEdges(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Triangle *arg1 = (dolfin::Triangle *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Triangle_numEdges",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Triangle, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)((dolfin::Triangle const *)arg1)->numEdges();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Triangle_numFaces(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Triangle *arg1 = (dolfin::Triangle *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Triangle_numFaces",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Triangle, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)((dolfin::Triangle const *)arg1)->numFaces();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Triangle_numBoundaries(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Triangle *arg1 = (dolfin::Triangle *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Triangle_numBoundaries",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Triangle, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)((dolfin::Triangle const *)arg1)->numBoundaries();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Triangle_type(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Triangle *arg1 = (dolfin::Triangle *) 0 ;
    dolfin::Cell::Type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Triangle_type",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Triangle, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Cell::Type)((dolfin::Triangle const *)arg1)->type();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Triangle_orientation(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Triangle *arg1 = (dolfin::Triangle *) 0 ;
    dolfin::Cell::Orientation result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Triangle_orientation",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Triangle, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Cell::Orientation)((dolfin::Triangle const *)arg1)->orientation();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Triangle_volume(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Triangle *arg1 = (dolfin::Triangle *) 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Triangle_volume",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Triangle, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::Triangle const *)arg1)->volume();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Triangle_diameter(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Triangle *arg1 = (dolfin::Triangle *) 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Triangle_diameter",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Triangle, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::Triangle const *)arg1)->diameter();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Triangle_edgeAlignment(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Triangle *arg1 = (dolfin::Triangle *) 0 ;
    dolfin::uint arg2 ;
    dolfin::uint result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Triangle_edgeAlignment",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Triangle, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::uint)((dolfin::Triangle const *)arg1)->edgeAlignment(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Triangle_faceAlignment(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Triangle *arg1 = (dolfin::Triangle *) 0 ;
    dolfin::uint arg2 ;
    dolfin::uint result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Triangle_faceAlignment",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Triangle, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::uint)((dolfin::Triangle const *)arg1)->faceAlignment(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Triangle_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__Triangle, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Tetrahedron(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vertex *arg1 = 0 ;
    dolfin::Vertex *arg2 = 0 ;
    dolfin::Vertex *arg3 = 0 ;
    dolfin::Vertex *arg4 = 0 ;
    dolfin::Tetrahedron *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:new_Tetrahedron",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Tetrahedron *)new dolfin::Tetrahedron(*arg1,*arg2,*arg3,*arg4);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Tetrahedron, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Tetrahedron_numVertices(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Tetrahedron *arg1 = (dolfin::Tetrahedron *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Tetrahedron_numVertices",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Tetrahedron, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)((dolfin::Tetrahedron const *)arg1)->numVertices();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Tetrahedron_numEdges(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Tetrahedron *arg1 = (dolfin::Tetrahedron *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Tetrahedron_numEdges",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Tetrahedron, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)((dolfin::Tetrahedron const *)arg1)->numEdges();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Tetrahedron_numFaces(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Tetrahedron *arg1 = (dolfin::Tetrahedron *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Tetrahedron_numFaces",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Tetrahedron, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)((dolfin::Tetrahedron const *)arg1)->numFaces();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Tetrahedron_numBoundaries(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Tetrahedron *arg1 = (dolfin::Tetrahedron *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Tetrahedron_numBoundaries",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Tetrahedron, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)((dolfin::Tetrahedron const *)arg1)->numBoundaries();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Tetrahedron_type(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Tetrahedron *arg1 = (dolfin::Tetrahedron *) 0 ;
    dolfin::Cell::Type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Tetrahedron_type",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Tetrahedron, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Cell::Type)((dolfin::Tetrahedron const *)arg1)->type();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Tetrahedron_orientation(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Tetrahedron *arg1 = (dolfin::Tetrahedron *) 0 ;
    dolfin::Cell::Orientation result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Tetrahedron_orientation",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Tetrahedron, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Cell::Orientation)((dolfin::Tetrahedron const *)arg1)->orientation();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Tetrahedron_volume(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Tetrahedron *arg1 = (dolfin::Tetrahedron *) 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Tetrahedron_volume",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Tetrahedron, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::Tetrahedron const *)arg1)->volume();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Tetrahedron_diameter(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Tetrahedron *arg1 = (dolfin::Tetrahedron *) 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Tetrahedron_diameter",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Tetrahedron, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::Tetrahedron const *)arg1)->diameter();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Tetrahedron_edgeAlignment(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Tetrahedron *arg1 = (dolfin::Tetrahedron *) 0 ;
    dolfin::uint arg2 ;
    dolfin::uint result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Tetrahedron_edgeAlignment",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Tetrahedron, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::uint)((dolfin::Tetrahedron const *)arg1)->edgeAlignment(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Tetrahedron_faceAlignment(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Tetrahedron *arg1 = (dolfin::Tetrahedron *) 0 ;
    dolfin::uint arg2 ;
    dolfin::uint result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Tetrahedron_faceAlignment",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Tetrahedron, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::uint)((dolfin::Tetrahedron const *)arg1)->faceAlignment(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Tetrahedron_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__Tetrahedron, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Cell__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Cell *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Cell")) goto fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Cell *)new dolfin::Cell();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Cell, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Cell__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vertex *arg1 = 0 ;
    dolfin::Vertex *arg2 = 0 ;
    dolfin::Vertex *arg3 = 0 ;
    dolfin::Cell *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_Cell",&obj0,&obj1,&obj2)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Cell *)new dolfin::Cell(*arg1,*arg2,*arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Cell, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Cell__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vertex *arg1 = 0 ;
    dolfin::Vertex *arg2 = 0 ;
    dolfin::Vertex *arg3 = 0 ;
    dolfin::Vertex *arg4 = 0 ;
    dolfin::Cell *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:new_Cell",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Cell *)new dolfin::Cell(*arg1,*arg2,*arg3,*arg4);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Cell, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Cell(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_Cell__SWIG_0(self,args);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_new_Cell__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        return _wrap_new_Cell__SWIG_2(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_Cell'");
    return NULL;
}


static PyObject *_wrap_delete_Cell(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Cell",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cell_clear(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Cell_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->clear();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cell_id(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Cell_id",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)((dolfin::Cell const *)arg1)->id();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cell_type(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
    dolfin::Cell::Type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Cell_type",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Cell::Type)((dolfin::Cell const *)arg1)->type();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cell_orientation(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
    dolfin::Cell::Orientation result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Cell_orientation",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Cell::Orientation)((dolfin::Cell const *)arg1)->orientation();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cell_numVertices(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Cell_numVertices",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)((dolfin::Cell const *)arg1)->numVertices();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cell_numEdges(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Cell_numEdges",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)((dolfin::Cell const *)arg1)->numEdges();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cell_numFaces(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Cell_numFaces",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)((dolfin::Cell const *)arg1)->numFaces();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cell_numBoundaries(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Cell_numBoundaries",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)((dolfin::Cell const *)arg1)->numBoundaries();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cell_numCellNeighbors(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Cell_numCellNeighbors",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)((dolfin::Cell const *)arg1)->numCellNeighbors();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cell_numVertexNeighbors(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Cell_numVertexNeighbors",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)((dolfin::Cell const *)arg1)->numVertexNeighbors();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cell_numChildren(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Cell_numChildren",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)((dolfin::Cell const *)arg1)->numChildren();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cell_vertex(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
    int arg2 ;
    dolfin::Vertex *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Cell_vertex",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Vertex &_result_ref = ((dolfin::Cell const *)arg1)->vertex(arg2);
            result = (dolfin::Vertex *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Vertex, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cell_edge(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
    int arg2 ;
    dolfin::Edge *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Cell_edge",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Edge &_result_ref = ((dolfin::Cell const *)arg1)->edge(arg2);
            result = (dolfin::Edge *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Edge, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cell_face(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
    int arg2 ;
    Face *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Cell_face",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            Face &_result_ref = ((dolfin::Cell const *)arg1)->face(arg2);
            result = (Face *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Face, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cell_neighbor(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
    int arg2 ;
    dolfin::Cell *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Cell_neighbor",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Cell &_result_ref = ((dolfin::Cell const *)arg1)->neighbor(arg2);
            result = (dolfin::Cell *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Cell, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cell_parent(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
    dolfin::Cell *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Cell_parent",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Cell *)((dolfin::Cell const *)arg1)->parent();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Cell, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cell_child(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
    int arg2 ;
    dolfin::Cell *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Cell_child",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Cell *)((dolfin::Cell const *)arg1)->child(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Cell, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cell_mesh__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
    dolfin::Mesh *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Cell_mesh",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Mesh &_result_ref = (arg1)->mesh();
            result = (dolfin::Mesh *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Mesh, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cell_mesh__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
    dolfin::Mesh *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Cell_mesh",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Mesh const &_result_ref = ((dolfin::Cell const *)arg1)->mesh();
            result = (dolfin::Mesh *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Mesh, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cell_mesh(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Cell, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_Cell_mesh__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Cell, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_Cell_mesh__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Cell_mesh'");
    return NULL;
}


static PyObject *_wrap_Cell_coord(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
    int arg2 ;
    dolfin::Point *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Cell_coord",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Point &_result_ref = ((dolfin::Cell const *)arg1)->coord(arg2);
            result = (dolfin::Point *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Point, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cell_midpoint(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
    dolfin::Point result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Cell_midpoint",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = ((dolfin::Cell const *)arg1)->midpoint();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        dolfin::Point * resultptr;
        resultptr = new dolfin::Point(static_cast<dolfin::Point & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_dolfin__Point, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cell_vertexID(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
    int arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Cell_vertexID",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)((dolfin::Cell const *)arg1)->vertexID(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cell_edgeID(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
    int arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Cell_edgeID",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)((dolfin::Cell const *)arg1)->edgeID(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cell_faceID(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
    int arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Cell_faceID",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)((dolfin::Cell const *)arg1)->faceID(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cell_volume(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Cell_volume",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::Cell const *)arg1)->volume();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cell_diameter(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Cell_diameter",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::Cell const *)arg1)->diameter();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cell_edgeAlignment(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
    dolfin::uint arg2 ;
    dolfin::uint result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Cell_edgeAlignment",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::uint)((dolfin::Cell const *)arg1)->edgeAlignment(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cell_faceAlignment(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
    dolfin::uint arg2 ;
    dolfin::uint result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Cell_faceAlignment",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::uint)((dolfin::Cell const *)arg1)->faceAlignment(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cell___eq__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
    dolfin::Cell *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Cell___eq__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Cell");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)((dolfin::Cell const *)arg1)->operator ==((dolfin::Cell const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cell___ne__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
    dolfin::Cell *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Cell___ne__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Cell");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)((dolfin::Cell const *)arg1)->operator !=((dolfin::Cell const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cell_mark(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Cell *arg1 = (dolfin::Cell *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Cell_mark",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->mark();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Cell_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__Cell, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Face(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Face *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Face")) goto fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Face *)new dolfin::Face();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Face, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Face(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Face *arg1 = (dolfin::Face *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Face",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Face, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Face_clear(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Face *arg1 = (dolfin::Face *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Face_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Face, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->clear();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Face_id(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Face *arg1 = (dolfin::Face *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Face_id",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Face, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)((dolfin::Face const *)arg1)->id();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Face_numEdges(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Face *arg1 = (dolfin::Face *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Face_numEdges",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Face, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (unsigned int)((dolfin::Face const *)arg1)->numEdges();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Face_numCellNeighbors(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Face *arg1 = (dolfin::Face *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Face_numCellNeighbors",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Face, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (unsigned int)((dolfin::Face const *)arg1)->numCellNeighbors();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Face_edge(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Face *arg1 = (dolfin::Face *) 0 ;
    int arg2 ;
    dolfin::Edge *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Face_edge",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Face, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Edge &_result_ref = ((dolfin::Face const *)arg1)->edge(arg2);
            result = (dolfin::Edge *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Edge, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Face_cell(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Face *arg1 = (dolfin::Face *) 0 ;
    int arg2 ;
    dolfin::Cell *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Face_cell",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Face, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Cell &_result_ref = ((dolfin::Face const *)arg1)->cell(arg2);
            result = (dolfin::Cell *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Cell, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Face_mesh__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Face *arg1 = (dolfin::Face *) 0 ;
    dolfin::Mesh *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Face_mesh",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Face, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Mesh &_result_ref = (arg1)->mesh();
            result = (dolfin::Mesh *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Mesh, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Face_mesh__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Face *arg1 = (dolfin::Face *) 0 ;
    dolfin::Mesh *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Face_mesh",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Face, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Mesh const &_result_ref = ((dolfin::Face const *)arg1)->mesh();
            result = (dolfin::Mesh *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Mesh, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Face_mesh(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Face, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_Face_mesh__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Face, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_Face_mesh__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Face_mesh'");
    return NULL;
}


static PyObject *_wrap_Face_equals__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Face *arg1 = (dolfin::Face *) 0 ;
    dolfin::Edge *arg2 = 0 ;
    dolfin::Edge *arg3 = 0 ;
    dolfin::Edge *arg4 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Face_equals",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Face, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Edge, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Edge");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__Edge, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::Edge");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_dolfin__Edge, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("dolfin::Edge");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)((dolfin::Face const *)arg1)->equals((dolfin::Edge const &)*arg2,(dolfin::Edge const &)*arg3,(dolfin::Edge const &)*arg4);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Face_equals__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Face *arg1 = (dolfin::Face *) 0 ;
    dolfin::Edge *arg2 = 0 ;
    dolfin::Edge *arg3 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Face_equals",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Face, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Edge, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Edge");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__Edge, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::Edge");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)((dolfin::Face const *)arg1)->equals((dolfin::Edge const &)*arg2,(dolfin::Edge const &)*arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Face_equals(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Face, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Edge, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_dolfin__Edge, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_Face_equals__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Face, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Edge, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_dolfin__Edge, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_dolfin__Edge, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        return _wrap_Face_equals__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Face_equals'");
    return NULL;
}


static PyObject *_wrap_Face_contains__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Face *arg1 = (dolfin::Face *) 0 ;
    dolfin::Vertex *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Face_contains",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Face, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)((dolfin::Face const *)arg1)->contains((dolfin::Vertex const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Face_contains__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Face *arg1 = (dolfin::Face *) 0 ;
    dolfin::Point *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Face_contains",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Face, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Point, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Point");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)((dolfin::Face const *)arg1)->contains((dolfin::Point const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Face_contains(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Face, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Face_contains__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Face, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Point, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Face_contains__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Face_contains'");
    return NULL;
}


static PyObject *_wrap_Face_fbids_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Face *arg1 = (dolfin::Face *) 0 ;
    std::set<int > arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Face_fbids_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Face, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::set<int > * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_std__setTint_t, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("std::set<int >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        if (arg1) (arg1)->fbids = arg2;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Face_fbids_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Face *arg1 = (dolfin::Face *) 0 ;
    std::set<int > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Face_fbids_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Face, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result =  ((arg1)->fbids);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        std::set<int > * resultptr;
        resultptr = new std::set<int >(static_cast<std::set<int > & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__setTint_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Face_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__Face, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_VertexIterator__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = 0 ;
    dolfin::VertexIterator *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_VertexIterator",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::Mesh");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::VertexIterator *)new dolfin::VertexIterator((dolfin::Mesh const &)*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__VertexIterator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_VertexIterator__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
    dolfin::VertexIterator *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_VertexIterator",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::VertexIterator *)new dolfin::VertexIterator((dolfin::Mesh const *)arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__VertexIterator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_VertexIterator__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Boundary *arg1 = 0 ;
    dolfin::VertexIterator *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_VertexIterator",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Boundary, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::Boundary");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::VertexIterator *)new dolfin::VertexIterator((dolfin::Boundary const &)*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__VertexIterator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_VertexIterator__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vertex *arg1 = 0 ;
    dolfin::VertexIterator *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_VertexIterator",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::VertexIterator *)new dolfin::VertexIterator((dolfin::Vertex const &)*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__VertexIterator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_VertexIterator__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VertexIterator *arg1 = 0 ;
    dolfin::VertexIterator *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_VertexIterator",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::VertexIterator");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::VertexIterator *)new dolfin::VertexIterator((dolfin::VertexIterator const &)*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__VertexIterator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_VertexIterator__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Cell *arg1 = 0 ;
    dolfin::VertexIterator *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_VertexIterator",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::Cell");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::VertexIterator *)new dolfin::VertexIterator((dolfin::Cell const &)*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__VertexIterator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_VertexIterator__SWIG_6(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::CellIterator *arg1 = 0 ;
    dolfin::VertexIterator *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_VertexIterator",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::CellIterator");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::VertexIterator *)new dolfin::VertexIterator((dolfin::CellIterator const &)*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__VertexIterator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_VertexIterator(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Mesh, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_VertexIterator__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Mesh, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_VertexIterator__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Boundary, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_VertexIterator__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_VertexIterator__SWIG_3(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__VertexIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_VertexIterator__SWIG_4(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Cell, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_VertexIterator__SWIG_5(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__CellIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_VertexIterator__SWIG_6(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_VertexIterator'");
    return NULL;
}


static PyObject *_wrap_delete_VertexIterator(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_VertexIterator",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VertexIterator_increment(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
    dolfin::VertexIterator *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VertexIterator_increment",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::VertexIterator &_result_ref = (arg1)->operator ++();
            result = (dolfin::VertexIterator *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__VertexIterator, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VertexIterator_end(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VertexIterator_end",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)(arg1)->end();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VertexIterator_last(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VertexIterator_last",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)(arg1)->last();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VertexIterator_index(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VertexIterator_index",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)(arg1)->index();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VertexIterator___ref__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
    dolfin::Vertex *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VertexIterator___ref__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Vertex &_result_ref = ((dolfin::VertexIterator const *)arg1)->operator *();
            result = (dolfin::Vertex *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Vertex, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VertexIterator___deref__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
    dolfin::Vertex *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VertexIterator___deref__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Vertex *)((dolfin::VertexIterator const *)arg1)->operator ->();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Vertex, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VertexIterator___eq____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
    dolfin::VertexIterator *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:VertexIterator___eq__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::VertexIterator");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)((dolfin::VertexIterator const *)arg1)->operator ==((dolfin::VertexIterator const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VertexIterator___ne____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
    dolfin::VertexIterator *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:VertexIterator___ne__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::VertexIterator");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)((dolfin::VertexIterator const *)arg1)->operator !=((dolfin::VertexIterator const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VertexIterator___eq____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
    dolfin::Vertex *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:VertexIterator___eq__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)((dolfin::VertexIterator const *)arg1)->operator ==((dolfin::Vertex const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VertexIterator___eq__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__VertexIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__VertexIterator, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_VertexIterator___eq____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__VertexIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_VertexIterator___eq____SWIG_1(self,args);
            }
        }
    }
    
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


static PyObject *_wrap_VertexIterator___ne____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
    dolfin::Vertex *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:VertexIterator___ne__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)((dolfin::VertexIterator const *)arg1)->operator !=((dolfin::Vertex const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VertexIterator___ne__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__VertexIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__VertexIterator, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_VertexIterator___ne____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__VertexIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_VertexIterator___ne____SWIG_1(self,args);
            }
        }
    }
    
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


static PyObject *_wrap_VertexIterator_clear(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VertexIterator_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        (*arg1)->clear();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VertexIterator_id(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VertexIterator_id",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)(*arg1)->id();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VertexIterator_numVertexNeighbors(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VertexIterator_numVertexNeighbors",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)(*arg1)->numVertexNeighbors();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VertexIterator_numCellNeighbors(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VertexIterator_numCellNeighbors",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)(*arg1)->numCellNeighbors();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VertexIterator_numEdgeNeighbors(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VertexIterator_numEdgeNeighbors",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)(*arg1)->numEdgeNeighbors();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VertexIterator_vertex(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
    int arg2 ;
    dolfin::Vertex *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:VertexIterator_vertex",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Vertex &_result_ref = (*arg1)->vertex(arg2);
            result = (dolfin::Vertex *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Vertex, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VertexIterator_cell(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
    int arg2 ;
    dolfin::Cell *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:VertexIterator_cell",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Cell &_result_ref = (*arg1)->cell(arg2);
            result = (dolfin::Cell *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Cell, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VertexIterator_edge(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
    int arg2 ;
    dolfin::Edge *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:VertexIterator_edge",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Edge &_result_ref = (*arg1)->edge(arg2);
            result = (dolfin::Edge *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Edge, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VertexIterator_parent(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
    dolfin::Vertex *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VertexIterator_parent",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Vertex *)(*arg1)->parent();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Vertex, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VertexIterator_child(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
    dolfin::Vertex *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VertexIterator_child",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Vertex *)(*arg1)->child();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Vertex, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VertexIterator_mesh__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
    dolfin::Mesh *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VertexIterator_mesh",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Mesh &_result_ref = (*arg1)->mesh();
            result = (dolfin::Mesh *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Mesh, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VertexIterator_mesh__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
    dolfin::Mesh *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VertexIterator_mesh",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Mesh const &_result_ref = (*arg1)->mesh();
            result = (dolfin::Mesh *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Mesh, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VertexIterator_mesh(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__VertexIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_VertexIterator_mesh__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__VertexIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_VertexIterator_mesh__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'VertexIterator_mesh'");
    return NULL;
}


static PyObject *_wrap_VertexIterator_coord__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
    dolfin::Point *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VertexIterator_coord",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Point &_result_ref = (*arg1)->coord();
            result = (dolfin::Point *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Point, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VertexIterator_coord__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
    dolfin::Point result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VertexIterator_coord",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (*arg1)->coord();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        dolfin::Point * resultptr;
        resultptr = new dolfin::Point(static_cast<dolfin::Point & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_dolfin__Point, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VertexIterator_coord(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__VertexIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_VertexIterator_coord__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__VertexIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_VertexIterator_coord__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'VertexIterator_coord'");
    return NULL;
}


static PyObject *_wrap_VertexIterator_midpoint(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
    dolfin::Vertex *arg2 = 0 ;
    dolfin::Point result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:VertexIterator_midpoint",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (*arg1)->midpoint((dolfin::Vertex const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        dolfin::Point * resultptr;
        resultptr = new dolfin::Point(static_cast<dolfin::Point & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_dolfin__Point, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VertexIterator_dist__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
    dolfin::Vertex *arg2 = 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:VertexIterator_dist",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(*arg1)->dist((dolfin::Vertex const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VertexIterator_dist__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
    dolfin::Point *arg2 = 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:VertexIterator_dist",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Point, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Point");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(*arg1)->dist((dolfin::Point const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VertexIterator_dist__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
    dolfin::real arg2 ;
    dolfin::real arg3 ;
    dolfin::real arg4 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:VertexIterator_dist",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<dolfin::real >(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(*arg1)->dist(arg2,arg3,arg4);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VertexIterator_dist__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
    dolfin::real arg2 ;
    dolfin::real arg3 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:VertexIterator_dist",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(*arg1)->dist(arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VertexIterator_dist__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
    dolfin::real arg2 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:VertexIterator_dist",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(*arg1)->dist(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VertexIterator_dist(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__VertexIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_VertexIterator_dist__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__VertexIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Point, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_VertexIterator_dist__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__VertexIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_VertexIterator_dist__SWIG_4(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__VertexIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    return _wrap_VertexIterator_dist__SWIG_3(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__VertexIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        return _wrap_VertexIterator_dist__SWIG_2(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'VertexIterator_dist'");
    return NULL;
}


static PyObject *_wrap_VertexIterator_neighbor(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
    dolfin::Vertex *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:VertexIterator_neighbor",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)(*arg1)->neighbor((dolfin::Vertex const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VertexIterator___lt__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
    int arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:VertexIterator___lt__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)(*arg1)->operator <(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VertexIterator___le__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
    int arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:VertexIterator___le__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)(*arg1)->operator <=(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VertexIterator___gt__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
    int arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:VertexIterator___gt__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)(*arg1)->operator >(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VertexIterator___ge__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
    int arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:VertexIterator___ge__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)(*arg1)->operator >=(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VertexIterator_nbids_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
    std::set<int > arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:VertexIterator_nbids_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::set<int > * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_std__setTint_t, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("std::set<int >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        if (arg1) (*arg1)->nbids = arg2;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VertexIterator_nbids_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VertexIterator *arg1 = (dolfin::VertexIterator *) 0 ;
    std::set<int > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VertexIterator_nbids_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result =  ((*arg1)->nbids);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        std::set<int > * resultptr;
        resultptr = new std::set<int >(static_cast<std::set<int > & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__setTint_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * VertexIterator_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__VertexIterator, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_CellIterator__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = 0 ;
    dolfin::CellIterator *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_CellIterator",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::Mesh");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::CellIterator *)new dolfin::CellIterator((dolfin::Mesh const &)*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__CellIterator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CellIterator__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
    dolfin::CellIterator *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_CellIterator",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::CellIterator *)new dolfin::CellIterator((dolfin::Mesh const *)arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__CellIterator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CellIterator__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vertex *arg1 = 0 ;
    dolfin::CellIterator *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_CellIterator",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::CellIterator *)new dolfin::CellIterator((dolfin::Vertex const &)*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__CellIterator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CellIterator__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VertexIterator *arg1 = 0 ;
    dolfin::CellIterator *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_CellIterator",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::VertexIterator");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::CellIterator *)new dolfin::CellIterator((dolfin::VertexIterator const &)*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__CellIterator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CellIterator__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Cell *arg1 = 0 ;
    dolfin::CellIterator *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_CellIterator",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::Cell");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::CellIterator *)new dolfin::CellIterator((dolfin::Cell const &)*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__CellIterator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CellIterator__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::CellIterator *arg1 = 0 ;
    dolfin::CellIterator *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_CellIterator",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::CellIterator");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::CellIterator *)new dolfin::CellIterator((dolfin::CellIterator const &)*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__CellIterator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CellIterator__SWIG_6(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Edge *arg1 = 0 ;
    dolfin::CellIterator *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_CellIterator",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Edge, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::Edge");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::CellIterator *)new dolfin::CellIterator((dolfin::Edge const &)*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__CellIterator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CellIterator__SWIG_7(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::EdgeIterator *arg1 = 0 ;
    dolfin::CellIterator *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_CellIterator",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__EdgeIterator, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::EdgeIterator");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::CellIterator *)new dolfin::CellIterator((dolfin::EdgeIterator const &)*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__CellIterator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CellIterator__SWIG_8(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Face *arg1 = 0 ;
    dolfin::CellIterator *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_CellIterator",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Face, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::Face");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::CellIterator *)new dolfin::CellIterator((dolfin::Face const &)*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__CellIterator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CellIterator__SWIG_9(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::FaceIterator *arg1 = 0 ;
    dolfin::CellIterator *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_CellIterator",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__FaceIterator, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::FaceIterator");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::CellIterator *)new dolfin::CellIterator((dolfin::FaceIterator const &)*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__CellIterator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CellIterator(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Mesh, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_CellIterator__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Mesh, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_CellIterator__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_CellIterator__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__VertexIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_CellIterator__SWIG_3(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Cell, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_CellIterator__SWIG_4(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__CellIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_CellIterator__SWIG_5(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Edge, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_CellIterator__SWIG_6(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__EdgeIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_CellIterator__SWIG_7(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Face, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_CellIterator__SWIG_8(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__FaceIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_CellIterator__SWIG_9(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_CellIterator'");
    return NULL;
}


static PyObject *_wrap_delete_CellIterator(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CellIterator",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CellIterator_increment(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
    dolfin::CellIterator *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CellIterator_increment",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::CellIterator &_result_ref = (arg1)->operator ++();
            result = (dolfin::CellIterator *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__CellIterator, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CellIterator_end(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CellIterator_end",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)(arg1)->end();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CellIterator_last(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CellIterator_last",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)(arg1)->last();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CellIterator_index(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CellIterator_index",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)(arg1)->index();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CellIterator___ref__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
    dolfin::Cell *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CellIterator___ref__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Cell &_result_ref = ((dolfin::CellIterator const *)arg1)->operator *();
            result = (dolfin::Cell *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Cell, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CellIterator___deref__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
    dolfin::Cell *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CellIterator___deref__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Cell *)((dolfin::CellIterator const *)arg1)->operator ->();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Cell, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CellIterator___eq____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
    dolfin::CellIterator *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CellIterator___eq__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::CellIterator");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)((dolfin::CellIterator const *)arg1)->operator ==((dolfin::CellIterator const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CellIterator___ne____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
    dolfin::CellIterator *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CellIterator___ne__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::CellIterator");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)((dolfin::CellIterator const *)arg1)->operator !=((dolfin::CellIterator const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CellIterator___eq____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
    dolfin::Cell *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CellIterator___eq__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Cell");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)((dolfin::CellIterator const *)arg1)->operator ==((dolfin::Cell const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CellIterator___eq__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__CellIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__CellIterator, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_CellIterator___eq____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__CellIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Cell, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_CellIterator___eq____SWIG_1(self,args);
            }
        }
    }
    
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


static PyObject *_wrap_CellIterator___ne____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
    dolfin::Cell *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CellIterator___ne__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Cell");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)((dolfin::CellIterator const *)arg1)->operator !=((dolfin::Cell const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CellIterator___ne__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__CellIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__CellIterator, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_CellIterator___ne____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__CellIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Cell, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_CellIterator___ne____SWIG_1(self,args);
            }
        }
    }
    
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


static PyObject *_wrap_CellIterator_clear(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CellIterator_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        (*arg1)->clear();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CellIterator_id(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CellIterator_id",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)(*arg1)->id();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CellIterator_type(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
    dolfin::Cell::Type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CellIterator_type",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Cell::Type)(*arg1)->type();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CellIterator_orientation(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
    dolfin::Cell::Orientation result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CellIterator_orientation",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Cell::Orientation)(*arg1)->orientation();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CellIterator_numVertices(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CellIterator_numVertices",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)(*arg1)->numVertices();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CellIterator_numEdges(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CellIterator_numEdges",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)(*arg1)->numEdges();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CellIterator_numFaces(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CellIterator_numFaces",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)(*arg1)->numFaces();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CellIterator_numBoundaries(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CellIterator_numBoundaries",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)(*arg1)->numBoundaries();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CellIterator_numCellNeighbors(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CellIterator_numCellNeighbors",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)(*arg1)->numCellNeighbors();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CellIterator_numVertexNeighbors(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CellIterator_numVertexNeighbors",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)(*arg1)->numVertexNeighbors();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CellIterator_numChildren(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CellIterator_numChildren",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)(*arg1)->numChildren();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CellIterator_vertex(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
    int arg2 ;
    dolfin::Vertex *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CellIterator_vertex",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Vertex &_result_ref = (*arg1)->vertex(arg2);
            result = (dolfin::Vertex *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Vertex, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CellIterator_edge(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
    int arg2 ;
    dolfin::Edge *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CellIterator_edge",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Edge &_result_ref = (*arg1)->edge(arg2);
            result = (dolfin::Edge *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Edge, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CellIterator_face(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
    int arg2 ;
    Face *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CellIterator_face",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            Face &_result_ref = (*arg1)->face(arg2);
            result = (Face *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Face, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CellIterator_neighbor(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
    int arg2 ;
    dolfin::Cell *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CellIterator_neighbor",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Cell &_result_ref = (*arg1)->neighbor(arg2);
            result = (dolfin::Cell *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Cell, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CellIterator_parent(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
    dolfin::Cell *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CellIterator_parent",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Cell *)(*arg1)->parent();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Cell, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CellIterator_child(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
    int arg2 ;
    dolfin::Cell *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CellIterator_child",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Cell *)(*arg1)->child(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Cell, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CellIterator_mesh__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
    dolfin::Mesh *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CellIterator_mesh",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Mesh &_result_ref = (*arg1)->mesh();
            result = (dolfin::Mesh *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Mesh, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CellIterator_mesh__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
    dolfin::Mesh *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CellIterator_mesh",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Mesh const &_result_ref = (*arg1)->mesh();
            result = (dolfin::Mesh *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Mesh, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CellIterator_mesh(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__CellIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_CellIterator_mesh__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__CellIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_CellIterator_mesh__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'CellIterator_mesh'");
    return NULL;
}


static PyObject *_wrap_CellIterator_coord(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
    int arg2 ;
    dolfin::Point *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CellIterator_coord",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Point &_result_ref = (*arg1)->coord(arg2);
            result = (dolfin::Point *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Point, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CellIterator_midpoint(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
    dolfin::Point result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CellIterator_midpoint",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (*arg1)->midpoint();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        dolfin::Point * resultptr;
        resultptr = new dolfin::Point(static_cast<dolfin::Point & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_dolfin__Point, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CellIterator_vertexID(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
    int arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CellIterator_vertexID",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)(*arg1)->vertexID(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CellIterator_edgeID(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
    int arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CellIterator_edgeID",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)(*arg1)->edgeID(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CellIterator_faceID(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
    int arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CellIterator_faceID",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)(*arg1)->faceID(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CellIterator_volume(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CellIterator_volume",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(*arg1)->volume();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CellIterator_diameter(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CellIterator_diameter",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(*arg1)->diameter();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CellIterator_edgeAlignment(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
    dolfin::uint arg2 ;
    dolfin::uint result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CellIterator_edgeAlignment",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::uint)(*arg1)->edgeAlignment(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CellIterator_faceAlignment(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
    dolfin::uint arg2 ;
    dolfin::uint result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CellIterator_faceAlignment",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::uint)(*arg1)->faceAlignment(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CellIterator_mark(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::CellIterator *arg1 = (dolfin::CellIterator *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CellIterator_mark",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        (*arg1)->mark();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CellIterator_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__CellIterator, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_EdgeIterator__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = 0 ;
    dolfin::EdgeIterator *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_EdgeIterator",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::Mesh");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::EdgeIterator *)new dolfin::EdgeIterator((dolfin::Mesh const &)*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__EdgeIterator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_EdgeIterator__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
    dolfin::EdgeIterator *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_EdgeIterator",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::EdgeIterator *)new dolfin::EdgeIterator((dolfin::Mesh const *)arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__EdgeIterator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_EdgeIterator__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Boundary *arg1 = 0 ;
    dolfin::EdgeIterator *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_EdgeIterator",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Boundary, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::Boundary");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::EdgeIterator *)new dolfin::EdgeIterator((dolfin::Boundary const &)*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__EdgeIterator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_EdgeIterator__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Boundary *arg1 = (dolfin::Boundary *) 0 ;
    dolfin::EdgeIterator *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_EdgeIterator",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Boundary, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::EdgeIterator *)new dolfin::EdgeIterator((dolfin::Boundary const *)arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__EdgeIterator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_EdgeIterator__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Vertex *arg1 = 0 ;
    dolfin::EdgeIterator *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_EdgeIterator",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::EdgeIterator *)new dolfin::EdgeIterator((dolfin::Vertex const &)*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__EdgeIterator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_EdgeIterator__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::VertexIterator *arg1 = 0 ;
    dolfin::EdgeIterator *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_EdgeIterator",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__VertexIterator, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::VertexIterator");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::EdgeIterator *)new dolfin::EdgeIterator((dolfin::VertexIterator const &)*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__EdgeIterator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_EdgeIterator__SWIG_6(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Cell *arg1 = 0 ;
    dolfin::EdgeIterator *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_EdgeIterator",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::Cell");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::EdgeIterator *)new dolfin::EdgeIterator((dolfin::Cell const &)*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__EdgeIterator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_EdgeIterator__SWIG_7(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::CellIterator *arg1 = 0 ;
    dolfin::EdgeIterator *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_EdgeIterator",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::CellIterator");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::EdgeIterator *)new dolfin::EdgeIterator((dolfin::CellIterator const &)*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__EdgeIterator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_EdgeIterator__SWIG_8(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Face *arg1 = 0 ;
    dolfin::EdgeIterator *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_EdgeIterator",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Face, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::Face");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::EdgeIterator *)new dolfin::EdgeIterator((dolfin::Face const &)*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__EdgeIterator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_EdgeIterator__SWIG_9(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::FaceIterator *arg1 = 0 ;
    dolfin::EdgeIterator *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_EdgeIterator",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__FaceIterator, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::FaceIterator");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::EdgeIterator *)new dolfin::EdgeIterator((dolfin::FaceIterator const &)*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__EdgeIterator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_EdgeIterator(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Mesh, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_EdgeIterator__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Mesh, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_EdgeIterator__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Boundary, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_EdgeIterator__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Boundary, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_EdgeIterator__SWIG_3(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_EdgeIterator__SWIG_4(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__VertexIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_EdgeIterator__SWIG_5(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Cell, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_EdgeIterator__SWIG_6(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__CellIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_EdgeIterator__SWIG_7(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Face, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_EdgeIterator__SWIG_8(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__FaceIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_EdgeIterator__SWIG_9(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_EdgeIterator'");
    return NULL;
}


static PyObject *_wrap_delete_EdgeIterator(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_EdgeIterator",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__EdgeIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EdgeIterator_increment(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
    dolfin::EdgeIterator *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EdgeIterator_increment",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__EdgeIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::EdgeIterator &_result_ref = (arg1)->operator ++();
            result = (dolfin::EdgeIterator *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__EdgeIterator, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EdgeIterator_end(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EdgeIterator_end",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__EdgeIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)(arg1)->end();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EdgeIterator_last(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EdgeIterator_last",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__EdgeIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)(arg1)->last();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EdgeIterator_index(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EdgeIterator_index",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__EdgeIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)(arg1)->index();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EdgeIterator___ref__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
    dolfin::Edge *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EdgeIterator___ref__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__EdgeIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Edge &_result_ref = ((dolfin::EdgeIterator const *)arg1)->operator *();
            result = (dolfin::Edge *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Edge, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EdgeIterator___deref__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
    dolfin::Edge *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EdgeIterator___deref__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__EdgeIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Edge *)((dolfin::EdgeIterator const *)arg1)->operator ->();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Edge, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EdgeIterator___eq__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
    dolfin::EdgeIterator *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EdgeIterator___eq__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__EdgeIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__EdgeIterator, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::EdgeIterator");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)((dolfin::EdgeIterator const *)arg1)->operator ==((dolfin::EdgeIterator const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EdgeIterator___ne__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
    dolfin::EdgeIterator *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EdgeIterator___ne__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__EdgeIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__EdgeIterator, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::EdgeIterator");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)((dolfin::EdgeIterator const *)arg1)->operator !=((dolfin::EdgeIterator const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EdgeIterator_clear(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EdgeIterator_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__EdgeIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        (*arg1)->clear();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EdgeIterator_id(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EdgeIterator_id",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__EdgeIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)(*arg1)->id();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EdgeIterator_numCellNeighbors(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EdgeIterator_numCellNeighbors",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__EdgeIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (unsigned int)(*arg1)->numCellNeighbors();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EdgeIterator_vertex(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
    int arg2 ;
    dolfin::Vertex *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EdgeIterator_vertex",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__EdgeIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Vertex &_result_ref = (*arg1)->vertex(arg2);
            result = (dolfin::Vertex *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Vertex, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EdgeIterator_cell(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
    int arg2 ;
    dolfin::Cell *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EdgeIterator_cell",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__EdgeIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Cell &_result_ref = (*arg1)->cell(arg2);
            result = (dolfin::Cell *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Cell, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EdgeIterator_mesh__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
    dolfin::Mesh *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EdgeIterator_mesh",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__EdgeIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Mesh &_result_ref = (*arg1)->mesh();
            result = (dolfin::Mesh *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Mesh, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EdgeIterator_mesh__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
    dolfin::Mesh *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EdgeIterator_mesh",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__EdgeIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Mesh const &_result_ref = (*arg1)->mesh();
            result = (dolfin::Mesh *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Mesh, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EdgeIterator_mesh(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__EdgeIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_EdgeIterator_mesh__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__EdgeIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_EdgeIterator_mesh__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'EdgeIterator_mesh'");
    return NULL;
}


static PyObject *_wrap_EdgeIterator_coord(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
    int arg2 ;
    dolfin::Point *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EdgeIterator_coord",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__EdgeIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Point &_result_ref = (*arg1)->coord(arg2);
            result = (dolfin::Point *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Point, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EdgeIterator_length(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EdgeIterator_length",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__EdgeIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(*arg1)->length();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EdgeIterator_midpoint(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
    dolfin::Point result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EdgeIterator_midpoint",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__EdgeIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (*arg1)->midpoint();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        dolfin::Point * resultptr;
        resultptr = new dolfin::Point(static_cast<dolfin::Point & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_dolfin__Point, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EdgeIterator_equals(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
    dolfin::Vertex *arg2 = 0 ;
    dolfin::Vertex *arg3 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:EdgeIterator_equals",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__EdgeIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)(*arg1)->equals((dolfin::Vertex const &)*arg2,(dolfin::Vertex const &)*arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EdgeIterator_contains__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
    dolfin::Vertex *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EdgeIterator_contains",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__EdgeIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)(*arg1)->contains((dolfin::Vertex const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EdgeIterator_contains__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
    dolfin::Point *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EdgeIterator_contains",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__EdgeIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Point, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Point");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)(*arg1)->contains((dolfin::Point const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EdgeIterator_contains(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__EdgeIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_EdgeIterator_contains__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__EdgeIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Point, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_EdgeIterator_contains__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'EdgeIterator_contains'");
    return NULL;
}


static PyObject *_wrap_EdgeIterator_ebids_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
    std::set<int > arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EdgeIterator_ebids_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__EdgeIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::set<int > * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_std__setTint_t, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("std::set<int >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        if (arg1) (*arg1)->ebids = arg2;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EdgeIterator_ebids_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::EdgeIterator *arg1 = (dolfin::EdgeIterator *) 0 ;
    std::set<int > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EdgeIterator_ebids_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__EdgeIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result =  ((*arg1)->ebids);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        std::set<int > * resultptr;
        resultptr = new std::set<int >(static_cast<std::set<int > & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__setTint_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * EdgeIterator_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__EdgeIterator, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_FaceIterator__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = 0 ;
    dolfin::FaceIterator *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_FaceIterator",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::Mesh");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::FaceIterator *)new dolfin::FaceIterator((dolfin::Mesh const &)*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__FaceIterator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FaceIterator__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Mesh *arg1 = (dolfin::Mesh *) 0 ;
    dolfin::FaceIterator *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_FaceIterator",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::FaceIterator *)new dolfin::FaceIterator((dolfin::Mesh const *)arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__FaceIterator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FaceIterator__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Boundary *arg1 = 0 ;
    dolfin::FaceIterator *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_FaceIterator",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Boundary, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::Boundary");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::FaceIterator *)new dolfin::FaceIterator((dolfin::Boundary const &)*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__FaceIterator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FaceIterator__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Boundary *arg1 = (dolfin::Boundary *) 0 ;
    dolfin::FaceIterator *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_FaceIterator",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Boundary, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::FaceIterator *)new dolfin::FaceIterator((dolfin::Boundary const *)arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__FaceIterator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FaceIterator__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Cell *arg1 = 0 ;
    dolfin::FaceIterator *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_FaceIterator",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::Cell");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::FaceIterator *)new dolfin::FaceIterator((dolfin::Cell const &)*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__FaceIterator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FaceIterator__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::CellIterator *arg1 = 0 ;
    dolfin::FaceIterator *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_FaceIterator",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__CellIterator, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::CellIterator");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::FaceIterator *)new dolfin::FaceIterator((dolfin::CellIterator const &)*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__FaceIterator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FaceIterator(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Mesh, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_FaceIterator__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Mesh, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_FaceIterator__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Boundary, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_FaceIterator__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Boundary, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_FaceIterator__SWIG_3(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Cell, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_FaceIterator__SWIG_4(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__CellIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_FaceIterator__SWIG_5(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_FaceIterator'");
    return NULL;
}


static PyObject *_wrap_delete_FaceIterator(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_FaceIterator",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__FaceIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FaceIterator_end(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FaceIterator_end",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__FaceIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)(arg1)->end();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FaceIterator_last(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FaceIterator_last",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__FaceIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)(arg1)->last();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FaceIterator_index(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FaceIterator_index",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__FaceIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)(arg1)->index();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FaceIterator___ref__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
    dolfin::Face *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FaceIterator___ref__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__FaceIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Face &_result_ref = ((dolfin::FaceIterator const *)arg1)->operator *();
            result = (dolfin::Face *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Face, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FaceIterator___deref__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
    dolfin::Face *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FaceIterator___deref__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__FaceIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Face *)((dolfin::FaceIterator const *)arg1)->operator ->();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Face, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FaceIterator___eq____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
    dolfin::FaceIterator *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FaceIterator___eq__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__FaceIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__FaceIterator, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::FaceIterator");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)((dolfin::FaceIterator const *)arg1)->operator ==((dolfin::FaceIterator const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FaceIterator___ne____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
    dolfin::FaceIterator *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FaceIterator___ne__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__FaceIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__FaceIterator, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::FaceIterator");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)((dolfin::FaceIterator const *)arg1)->operator !=((dolfin::FaceIterator const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FaceIterator___eq____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
    dolfin::Face *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FaceIterator___eq__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__FaceIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Face, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Face");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)((dolfin::FaceIterator const *)arg1)->operator ==((dolfin::Face const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FaceIterator___eq__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__FaceIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__FaceIterator, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_FaceIterator___eq____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__FaceIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Face, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_FaceIterator___eq____SWIG_1(self,args);
            }
        }
    }
    
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


static PyObject *_wrap_FaceIterator___ne____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
    dolfin::Face *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FaceIterator___ne__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__FaceIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Face, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Face");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)((dolfin::FaceIterator const *)arg1)->operator !=((dolfin::Face const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FaceIterator___ne__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__FaceIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__FaceIterator, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_FaceIterator___ne____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__FaceIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Face, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_FaceIterator___ne____SWIG_1(self,args);
            }
        }
    }
    
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


static PyObject *_wrap_FaceIterator_clear(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FaceIterator_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__FaceIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        (*arg1)->clear();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FaceIterator_id(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FaceIterator_id",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__FaceIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)(*arg1)->id();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FaceIterator_numEdges(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FaceIterator_numEdges",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__FaceIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (unsigned int)(*arg1)->numEdges();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FaceIterator_numCellNeighbors(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FaceIterator_numCellNeighbors",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__FaceIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (unsigned int)(*arg1)->numCellNeighbors();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FaceIterator_edge(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
    int arg2 ;
    dolfin::Edge *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FaceIterator_edge",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__FaceIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Edge &_result_ref = (*arg1)->edge(arg2);
            result = (dolfin::Edge *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Edge, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FaceIterator_cell(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
    int arg2 ;
    dolfin::Cell *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FaceIterator_cell",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__FaceIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Cell &_result_ref = (*arg1)->cell(arg2);
            result = (dolfin::Cell *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Cell, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FaceIterator_mesh__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
    dolfin::Mesh *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FaceIterator_mesh",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__FaceIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Mesh &_result_ref = (*arg1)->mesh();
            result = (dolfin::Mesh *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Mesh, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FaceIterator_mesh__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
    dolfin::Mesh *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FaceIterator_mesh",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__FaceIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Mesh const &_result_ref = (*arg1)->mesh();
            result = (dolfin::Mesh *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Mesh, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FaceIterator_mesh(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__FaceIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_FaceIterator_mesh__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__FaceIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_FaceIterator_mesh__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'FaceIterator_mesh'");
    return NULL;
}


static PyObject *_wrap_FaceIterator_equals__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
    dolfin::Edge *arg2 = 0 ;
    dolfin::Edge *arg3 = 0 ;
    dolfin::Edge *arg4 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:FaceIterator_equals",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__FaceIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Edge, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Edge");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__Edge, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::Edge");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_dolfin__Edge, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("dolfin::Edge");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)(*arg1)->equals((dolfin::Edge const &)*arg2,(dolfin::Edge const &)*arg3,(dolfin::Edge const &)*arg4);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FaceIterator_equals__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
    dolfin::Edge *arg2 = 0 ;
    dolfin::Edge *arg3 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:FaceIterator_equals",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__FaceIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Edge, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Edge");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__Edge, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::Edge");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)(*arg1)->equals((dolfin::Edge const &)*arg2,(dolfin::Edge const &)*arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FaceIterator_equals(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__FaceIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Edge, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_dolfin__Edge, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_FaceIterator_equals__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__FaceIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Edge, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_dolfin__Edge, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_dolfin__Edge, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        return _wrap_FaceIterator_equals__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'FaceIterator_equals'");
    return NULL;
}


static PyObject *_wrap_FaceIterator_contains__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
    dolfin::Vertex *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FaceIterator_contains",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__FaceIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)(*arg1)->contains((dolfin::Vertex const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FaceIterator_contains__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
    dolfin::Point *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FaceIterator_contains",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__FaceIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Point, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Point");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)(*arg1)->contains((dolfin::Point const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FaceIterator_contains(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__FaceIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_FaceIterator_contains__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__FaceIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Point, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_FaceIterator_contains__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'FaceIterator_contains'");
    return NULL;
}


static PyObject *_wrap_FaceIterator_fbids_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
    std::set<int > arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FaceIterator_fbids_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__FaceIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::set<int > * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_std__setTint_t, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("std::set<int >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        if (arg1) (*arg1)->fbids = arg2;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FaceIterator_fbids_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::FaceIterator *arg1 = (dolfin::FaceIterator *) 0 ;
    std::set<int > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FaceIterator_fbids_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__FaceIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result =  ((*arg1)->fbids);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        std::set<int > * resultptr;
        resultptr = new std::set<int >(static_cast<std::set<int > & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__setTint_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * FaceIterator_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__FaceIterator, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_MeshIterator__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshHierarchy *arg1 = 0 ;
    dolfin::MeshIterator *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_MeshIterator",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshHierarchy, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::MeshHierarchy");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::MeshIterator *)new dolfin::MeshIterator((dolfin::MeshHierarchy const &)*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__MeshIterator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_MeshIterator__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshHierarchy *arg1 = 0 ;
    Index arg2 ;
    dolfin::MeshIterator *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_MeshIterator",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshHierarchy, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::MeshHierarchy");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        Index * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_Index, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("Index");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::MeshIterator *)new dolfin::MeshIterator((dolfin::MeshHierarchy const &)*arg1,arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__MeshIterator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_MeshIterator(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__MeshHierarchy, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_MeshIterator__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__MeshHierarchy, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_Index, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_MeshIterator__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_MeshIterator'");
    return NULL;
}


static PyObject *_wrap_delete_MeshIterator(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_MeshIterator",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MeshIterator_end(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MeshIterator_end",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)(arg1)->end();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MeshIterator_index(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MeshIterator_index",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)(arg1)->index();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MeshIterator___ref__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
    dolfin::Mesh *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MeshIterator___ref__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Mesh &_result_ref = ((dolfin::MeshIterator const *)arg1)->operator *();
            result = (dolfin::Mesh *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Mesh, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MeshIterator___deref__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
    dolfin::Mesh *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MeshIterator___deref__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Mesh *)((dolfin::MeshIterator const *)arg1)->operator ->();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Mesh, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MeshIterator_merge(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
    dolfin::Mesh *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MeshIterator_merge",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Mesh");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (*arg1)->merge(*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MeshIterator_init(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MeshIterator_init",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        (*arg1)->init();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MeshIterator_clear(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MeshIterator_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        (*arg1)->clear();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MeshIterator_numSpaceDim(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MeshIterator_numSpaceDim",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)(*arg1)->numSpaceDim();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MeshIterator_numVertices(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MeshIterator_numVertices",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)(*arg1)->numVertices();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MeshIterator_numCells(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MeshIterator_numCells",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)(*arg1)->numCells();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MeshIterator_numEdges(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MeshIterator_numEdges",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)(*arg1)->numEdges();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MeshIterator_numFaces(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MeshIterator_numFaces",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)(*arg1)->numFaces();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MeshIterator_createVertex__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
    dolfin::Point arg2 ;
    dolfin::Vertex *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MeshIterator_createVertex",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        dolfin::Point * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_dolfin__Point, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("dolfin::Point");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Vertex &_result_ref = (*arg1)->createVertex(arg2);
            result = (dolfin::Vertex *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Vertex, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MeshIterator_createVertex__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
    dolfin::real arg2 ;
    dolfin::real arg3 ;
    dolfin::real arg4 ;
    dolfin::Vertex *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:MeshIterator_createVertex",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<dolfin::real >(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Vertex &_result_ref = (*arg1)->createVertex(arg2,arg3,arg4);
            result = (dolfin::Vertex *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Vertex, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MeshIterator_createVertex(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__MeshIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Point, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_MeshIterator_createVertex__SWIG_0(self,args);
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__MeshIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        return _wrap_MeshIterator_createVertex__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'MeshIterator_createVertex'");
    return NULL;
}


static PyObject *_wrap_MeshIterator_createCell__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    dolfin::Cell *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:MeshIterator_createCell",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<int >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<int >(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Cell &_result_ref = (*arg1)->createCell(arg2,arg3,arg4);
            result = (dolfin::Cell *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Cell, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MeshIterator_createCell__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    dolfin::Cell *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:MeshIterator_createCell",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<int >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<int >(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = static_cast<int >(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Cell &_result_ref = (*arg1)->createCell(arg2,arg3,arg4,arg5);
            result = (dolfin::Cell *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Cell, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MeshIterator_createCell__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
    dolfin::Vertex *arg2 = 0 ;
    dolfin::Vertex *arg3 = 0 ;
    dolfin::Vertex *arg4 = 0 ;
    dolfin::Cell *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:MeshIterator_createCell",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Cell &_result_ref = (*arg1)->createCell(*arg2,*arg3,*arg4);
            result = (dolfin::Cell *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Cell, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MeshIterator_createCell__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
    dolfin::Vertex *arg2 = 0 ;
    dolfin::Vertex *arg3 = 0 ;
    dolfin::Vertex *arg4 = 0 ;
    dolfin::Vertex *arg5 = 0 ;
    dolfin::Cell *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:MeshIterator_createCell",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(5)) SWIG_fail;
        if (arg5 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Cell &_result_ref = (*arg1)->createCell(*arg2,*arg3,*arg4,*arg5);
            result = (dolfin::Cell *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Cell, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MeshIterator_createCell(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[6];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 5); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__MeshIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        return _wrap_MeshIterator_createCell__SWIG_2(self,args);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__MeshIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        return _wrap_MeshIterator_createCell__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__MeshIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        {
                            void *ptr = 0;
                            if (SWIG_ConvertPtr(argv[4], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                                _v = 0;
                                PyErr_Clear();
                            } else {
                                _v = (ptr != 0);
                            }
                        }
                        if (_v) {
                            return _wrap_MeshIterator_createCell__SWIG_3(self,args);
                        }
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__MeshIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_int(argv[4]);
                        if (_v) {
                            return _wrap_MeshIterator_createCell__SWIG_1(self,args);
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'MeshIterator_createCell'");
    return NULL;
}


static PyObject *_wrap_MeshIterator_createEdge__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
    int arg2 ;
    int arg3 ;
    Edge *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:MeshIterator_createEdge",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<int >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            Edge &_result_ref = (*arg1)->createEdge(arg2,arg3);
            result = (Edge *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Edge, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MeshIterator_createEdge__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
    dolfin::Vertex *arg2 = 0 ;
    dolfin::Vertex *arg3 = 0 ;
    Edge *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:MeshIterator_createEdge",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            Edge &_result_ref = (*arg1)->createEdge(*arg2,*arg3);
            result = (Edge *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Edge, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MeshIterator_createEdge(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__MeshIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_MeshIterator_createEdge__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__MeshIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_MeshIterator_createEdge__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'MeshIterator_createEdge'");
    return NULL;
}


static PyObject *_wrap_MeshIterator_createFace__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    Face *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:MeshIterator_createFace",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<int >(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<int >(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            Face &_result_ref = (*arg1)->createFace(arg2,arg3,arg4);
            result = (Face *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Face, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MeshIterator_createFace__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
    Edge *arg2 = 0 ;
    Edge *arg3 = 0 ;
    Edge *arg4 = 0 ;
    Face *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:MeshIterator_createFace",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Edge, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("Edge");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_Edge, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("Edge");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_Edge, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("Edge");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            Face &_result_ref = (*arg1)->createFace(*arg2,*arg3,*arg4);
            result = (Face *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Face, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MeshIterator_createFace(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__MeshIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_Edge, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_Edge, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_Edge, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        return _wrap_MeshIterator_createFace__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__MeshIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        return _wrap_MeshIterator_createFace__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'MeshIterator_createFace'");
    return NULL;
}


static PyObject *_wrap_MeshIterator_remove__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
    dolfin::Vertex *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MeshIterator_remove",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vertex, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vertex");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (*arg1)->remove(*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MeshIterator_remove__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
    dolfin::Cell *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MeshIterator_remove",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Cell, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Cell");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (*arg1)->remove(*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MeshIterator_remove__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
    Edge *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MeshIterator_remove",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Edge, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("Edge");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (*arg1)->remove(*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MeshIterator_remove__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
    Face *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MeshIterator_remove",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Face, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("Face");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (*arg1)->remove(*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MeshIterator_remove(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__MeshIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Vertex, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_MeshIterator_remove__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__MeshIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Cell, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_MeshIterator_remove__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__MeshIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_Edge, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_MeshIterator_remove__SWIG_2(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__MeshIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_Face, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_MeshIterator_remove__SWIG_3(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'MeshIterator_remove'");
    return NULL;
}


static PyObject *_wrap_MeshIterator_type(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
    dolfin::Mesh::Type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MeshIterator_type",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Mesh::Type)(*arg1)->type();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MeshIterator_vertex(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
    dolfin::uint arg2 ;
    dolfin::Vertex *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MeshIterator_vertex",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Vertex &_result_ref = (*arg1)->vertex(arg2);
            result = (dolfin::Vertex *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Vertex, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MeshIterator_cell(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
    dolfin::uint arg2 ;
    dolfin::Cell *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MeshIterator_cell",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Cell &_result_ref = (*arg1)->cell(arg2);
            result = (dolfin::Cell *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Cell, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MeshIterator_edge(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
    dolfin::uint arg2 ;
    Edge *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MeshIterator_edge",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            Edge &_result_ref = (*arg1)->edge(arg2);
            result = (Edge *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Edge, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MeshIterator_face(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
    dolfin::uint arg2 ;
    Face *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MeshIterator_face",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        {
            Face &_result_ref = (*arg1)->face(arg2);
            result = (Face *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Face, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MeshIterator_boundary(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
    Boundary result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MeshIterator_boundary",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (*arg1)->boundary();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        Boundary * resultptr;
        resultptr = new Boundary(static_cast<Boundary & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_Boundary, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MeshIterator_refine(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MeshIterator_refine",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        (*arg1)->refine();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MeshIterator_refineUniformly__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MeshIterator_refineUniformly",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        (*arg1)->refineUniformly();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MeshIterator_refineUniformly__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MeshIterator_refineUniformly",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (*arg1)->refineUniformly(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MeshIterator_refineUniformly(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__MeshIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_MeshIterator_refineUniformly__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__MeshIterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_MeshIterator_refineUniformly__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'MeshIterator_refineUniformly'");
    return NULL;
}


static PyObject *_wrap_MeshIterator_parent(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
    dolfin::Mesh *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MeshIterator_parent",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Mesh &_result_ref = (*arg1)->parent();
            result = (dolfin::Mesh *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Mesh, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MeshIterator_child(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
    dolfin::Mesh *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MeshIterator_child",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Mesh &_result_ref = (*arg1)->child();
            result = (dolfin::Mesh *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Mesh, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MeshIterator___eq__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
    dolfin::Mesh *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MeshIterator___eq__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Mesh");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)(*arg1)->operator ==((dolfin::Mesh const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MeshIterator___ne__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
    dolfin::Mesh *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MeshIterator___ne__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Mesh, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Mesh");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)(*arg1)->operator !=((dolfin::Mesh const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MeshIterator_disp(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MeshIterator_disp",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        (*arg1)->disp();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MeshIterator_rename(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
    std::string arg2 ;
    std::string arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:MeshIterator_rename",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (*arg1)->rename(arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MeshIterator_name(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MeshIterator_name",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        {
            std::string const &_result_ref = (*arg1)->name();
            result = (std::string *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_std_string(static_cast<std::string >(*result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MeshIterator_label(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MeshIterator_label",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        {
            std::string const &_result_ref = (*arg1)->label();
            result = (std::string *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_std_string(static_cast<std::string >(*result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MeshIterator_number(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MeshIterator *arg1 = (dolfin::MeshIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MeshIterator_number",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MeshIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (int)(*arg1)->number();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_int(static_cast<int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * MeshIterator_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__MeshIterator, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_UnitSquare(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::uint arg1 ;
    dolfin::uint arg2 ;
    dolfin::UnitSquare *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_UnitSquare",&obj0,&obj1)) goto fail;
    {
        arg1 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::UnitSquare *)new dolfin::UnitSquare(arg1,arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__UnitSquare, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * UnitSquare_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__UnitSquare, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_UnitCube(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::uint arg1 ;
    dolfin::uint arg2 ;
    dolfin::uint arg3 ;
    dolfin::UnitCube *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_UnitCube",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::UnitCube *)new dolfin::UnitCube(arg1,arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__UnitCube, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * UnitCube_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__UnitCube, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Dependencies(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::uint arg1 ;
    dolfin::Dependencies *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Dependencies",&obj0)) goto fail;
    {
        arg1 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Dependencies *)new dolfin::Dependencies(arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Dependencies, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Dependencies(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Dependencies *arg1 = (dolfin::Dependencies *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Dependencies",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Dependencies, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Dependencies_setsize(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Dependencies *arg1 = (dolfin::Dependencies *) 0 ;
    dolfin::uint arg2 ;
    dolfin::uint arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Dependencies_setsize",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Dependencies, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->setsize(arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Dependencies_set__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Dependencies *arg1 = (dolfin::Dependencies *) 0 ;
    dolfin::uint arg2 ;
    dolfin::uint arg3 ;
    bool arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Dependencies_set",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Dependencies, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<bool >(SWIG_As_bool(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->set(arg2,arg3,arg4);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Dependencies_set__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Dependencies *arg1 = (dolfin::Dependencies *) 0 ;
    dolfin::uint arg2 ;
    dolfin::uint arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Dependencies_set",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Dependencies, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->set(arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Dependencies_set__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Dependencies *arg1 = (dolfin::Dependencies *) 0 ;
    dolfin::Matrix *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Dependencies_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Dependencies, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Matrix");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->set((dolfin::Matrix const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Dependencies_set(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Dependencies, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Matrix, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_Dependencies_set__SWIG_2(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Dependencies, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    return _wrap_Dependencies_set__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Dependencies, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    _v = SWIG_Check_bool(argv[3]);
                    if (_v) {
                        return _wrap_Dependencies_set__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Dependencies_set'");
    return NULL;
}


static PyObject *_wrap_Dependencies_transp(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Dependencies *arg1 = (dolfin::Dependencies *) 0 ;
    dolfin::Dependencies *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Dependencies_transp",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Dependencies, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Dependencies, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Dependencies");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->transp((dolfin::Dependencies const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Dependencies_detect(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Dependencies *arg1 = (dolfin::Dependencies *) 0 ;
    dolfin::ODE *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Dependencies_detect",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Dependencies, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__ODE, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::ODE");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->detect(*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Dependencies_sparse(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Dependencies *arg1 = (dolfin::Dependencies *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Dependencies_sparse",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Dependencies, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)((dolfin::Dependencies const *)arg1)->sparse();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Dependencies_disp(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Dependencies *arg1 = (dolfin::Dependencies *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Dependencies_disp",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Dependencies, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        ((dolfin::Dependencies const *)arg1)->disp();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Dependencies_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__Dependencies, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_Homotopy(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Homotopy *arg1 = (dolfin::Homotopy *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Homotopy",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Homotopy, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Homotopy_solve(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Homotopy *arg1 = (dolfin::Homotopy *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Homotopy_solve",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Homotopy, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->solve();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Homotopy_solutions(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Homotopy *arg1 = (dolfin::Homotopy *) 0 ;
    dolfin::Array<dolfin::complex * > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Homotopy_solutions",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Homotopy, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        {
            dolfin::Array<dolfin::complex * > const &_result_ref = ((dolfin::Homotopy const *)arg1)->solutions();
            result = (dolfin::Array<dolfin::complex * > *) &_result_ref;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__ArrayTstd__complexTdouble_t_p_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Homotopy_z0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Homotopy *arg1 = (dolfin::Homotopy *) 0 ;
    dolfin::uint arg2 ;
    dolfin::complex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Homotopy_z0",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Homotopy, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (arg1)->z0(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        dolfin::complex * resultptr;
        resultptr = new dolfin::complex(static_cast<dolfin::complex & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__complexTdouble_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Homotopy_F(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Homotopy *arg1 = (dolfin::Homotopy *) 0 ;
    dolfin::complex *arg2 ;
    dolfin::complex *arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Homotopy_F",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Homotopy, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__complexTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__complexTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->F((std::complex<double > const (*))arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Homotopy_JF(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Homotopy *arg1 = (dolfin::Homotopy *) 0 ;
    dolfin::complex *arg2 ;
    dolfin::complex *arg3 ;
    dolfin::complex *arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Homotopy_JF",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Homotopy, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__complexTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__complexTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_std__complexTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->JF((std::complex<double > const (*))arg2,(std::complex<double > const (*))arg3,arg4);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Homotopy_G(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Homotopy *arg1 = (dolfin::Homotopy *) 0 ;
    dolfin::complex *arg2 ;
    dolfin::complex *arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Homotopy_G",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Homotopy, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__complexTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__complexTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->G((std::complex<double > const (*))arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Homotopy_JG(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Homotopy *arg1 = (dolfin::Homotopy *) 0 ;
    dolfin::complex *arg2 ;
    dolfin::complex *arg3 ;
    dolfin::complex *arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Homotopy_JG",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Homotopy, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__complexTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__complexTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_std__complexTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->JG((std::complex<double > const (*))arg2,(std::complex<double > const (*))arg3,arg4);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Homotopy_modify(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Homotopy *arg1 = (dolfin::Homotopy *) 0 ;
    dolfin::complex *arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Homotopy_modify",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Homotopy, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__complexTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->modify(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Homotopy_verify(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Homotopy *arg1 = (dolfin::Homotopy *) 0 ;
    dolfin::complex *arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Homotopy_verify",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Homotopy, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__complexTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)(arg1)->verify((std::complex<double > const (*))arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Homotopy_degree(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Homotopy *arg1 = (dolfin::Homotopy *) 0 ;
    dolfin::uint arg2 ;
    dolfin::uint result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Homotopy_degree",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Homotopy, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::uint)((dolfin::Homotopy const *)arg1)->degree(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Homotopy_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__Homotopy, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_HomotopyJacobian(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::ComplexODE *arg1 = 0 ;
    dolfin::Vector *arg2 = 0 ;
    dolfin::HomotopyJacobian *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_HomotopyJacobian",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__ComplexODE, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::ComplexODE");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::HomotopyJacobian *)new dolfin::HomotopyJacobian(*arg1,*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__HomotopyJacobian, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_HomotopyJacobian(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::HomotopyJacobian *arg1 = (dolfin::HomotopyJacobian *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_HomotopyJacobian",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__HomotopyJacobian, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HomotopyJacobian_mult(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::HomotopyJacobian *arg1 = (dolfin::HomotopyJacobian *) 0 ;
    dolfin::Vector *arg2 = 0 ;
    dolfin::Vector *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:HomotopyJacobian_mult",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__HomotopyJacobian, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        ((dolfin::HomotopyJacobian const *)arg1)->mult((dolfin::Vector const &)*arg2,*arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * HomotopyJacobian_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__HomotopyJacobian, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_HomotopyODE(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Homotopy *arg1 = 0 ;
    dolfin::uint arg2 ;
    dolfin::real arg3 ;
    dolfin::HomotopyODE *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_HomotopyODE",&obj0,&obj1,&obj2)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Homotopy, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::Homotopy");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::HomotopyODE *)new dolfin::HomotopyODE(*arg1,arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__HomotopyODE, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_HomotopyODE(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::HomotopyODE *arg1 = (dolfin::HomotopyODE *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_HomotopyODE",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__HomotopyODE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HomotopyODE_z0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::HomotopyODE *arg1 = (dolfin::HomotopyODE *) 0 ;
    unsigned int arg2 ;
    dolfin::complex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:HomotopyODE_z0",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__HomotopyODE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (arg1)->z0(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        dolfin::complex * resultptr;
        resultptr = new dolfin::complex(static_cast<dolfin::complex & >(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__complexTdouble_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HomotopyODE_f(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::HomotopyODE *arg1 = (dolfin::HomotopyODE *) 0 ;
    dolfin::complex *arg2 ;
    dolfin::real arg3 ;
    dolfin::complex *arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:HomotopyODE_f",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__HomotopyODE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__complexTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_std__complexTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->f((std::complex<double > const (*))arg2,arg3,arg4);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HomotopyODE_M(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::HomotopyODE *arg1 = (dolfin::HomotopyODE *) 0 ;
    dolfin::complex *arg2 ;
    dolfin::complex *arg3 ;
    dolfin::complex *arg4 ;
    dolfin::real arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:HomotopyODE_M",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__HomotopyODE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__complexTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__complexTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_std__complexTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    {
        arg5 = static_cast<dolfin::real >(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->M((std::complex<double > const (*))arg2,arg3,(std::complex<double > const (*))arg4,arg5);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HomotopyODE_J(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::HomotopyODE *arg1 = (dolfin::HomotopyODE *) 0 ;
    dolfin::complex *arg2 ;
    dolfin::complex *arg3 ;
    dolfin::complex *arg4 ;
    dolfin::real arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:HomotopyODE_J",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__HomotopyODE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__complexTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__complexTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_std__complexTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    {
        arg5 = static_cast<dolfin::real >(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->J((std::complex<double > const (*))arg2,arg3,(std::complex<double > const (*))arg4,arg5);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HomotopyODE_update(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::HomotopyODE *arg1 = (dolfin::HomotopyODE *) 0 ;
    dolfin::complex *arg2 ;
    dolfin::real arg3 ;
    bool arg4 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:HomotopyODE_update",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__HomotopyODE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__complexTdouble_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<bool >(SWIG_As_bool(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)(arg1)->update((std::complex<double > const (*))arg2,arg3,arg4);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HomotopyODE_state(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::HomotopyODE *arg1 = (dolfin::HomotopyODE *) 0 ;
    dolfin::HomotopyODE::State result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:HomotopyODE_state",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__HomotopyODE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::HomotopyODE::State)(arg1)->state();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject * HomotopyODE_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__HomotopyODE, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_Method(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Method *arg1 = (dolfin::Method *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Method",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Method, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Method_type(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Method *arg1 = (dolfin::Method *) 0 ;
    dolfin::Method::Type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Method_type",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Method, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Method::Type)((dolfin::Method const *)arg1)->type();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Method_degree(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Method *arg1 = (dolfin::Method *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Method_degree",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Method, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (unsigned int)((dolfin::Method const *)arg1)->degree();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Method_order(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Method *arg1 = (dolfin::Method *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Method_order",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Method, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (unsigned int)((dolfin::Method const *)arg1)->order();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Method_nsize(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Method *arg1 = (dolfin::Method *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Method_nsize",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Method, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (unsigned int)((dolfin::Method const *)arg1)->nsize();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Method_qsize(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Method *arg1 = (dolfin::Method *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Method_qsize",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Method, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (unsigned int)((dolfin::Method const *)arg1)->qsize();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Method_npoint(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Method *arg1 = (dolfin::Method *) 0 ;
    unsigned int arg2 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Method_npoint",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Method, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::Method const *)arg1)->npoint(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Method_qpoint(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Method *arg1 = (dolfin::Method *) 0 ;
    unsigned int arg2 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Method_qpoint",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Method, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::Method const *)arg1)->qpoint(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Method_nweight(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Method *arg1 = (dolfin::Method *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Method_nweight",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Method, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::Method const *)arg1)->nweight(arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Method_qweight(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Method *arg1 = (dolfin::Method *) 0 ;
    unsigned int arg2 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Method_qweight",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Method, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::Method const *)arg1)->qweight(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Method_eval(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Method *arg1 = (dolfin::Method *) 0 ;
    unsigned int arg2 ;
    dolfin::real arg3 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Method_eval",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Method, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::Method const *)arg1)->eval(arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Method_derivative(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Method *arg1 = (dolfin::Method *) 0 ;
    unsigned int arg2 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Method_derivative",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Method, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::Method const *)arg1)->derivative(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Method_update__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Method *arg1 = (dolfin::Method *) 0 ;
    dolfin::real arg2 ;
    dolfin::real *arg3 ;
    dolfin::real arg4 ;
    dolfin::real *arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:Method_update",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Method, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        arg4 = static_cast<dolfin::real >(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(5)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        ((dolfin::Method const *)arg1)->update(arg2,arg3,arg4,arg5);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Method_update__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Method *arg1 = (dolfin::Method *) 0 ;
    dolfin::real arg2 ;
    dolfin::real *arg3 ;
    dolfin::real arg4 ;
    dolfin::real *arg5 ;
    dolfin::real arg6 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:Method_update",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Method, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        arg4 = static_cast<dolfin::real >(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(5)) SWIG_fail;
    {
        arg6 = static_cast<dolfin::real >(SWIG_As_double(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        ((dolfin::Method const *)arg1)->update(arg2,arg3,arg4,arg5,arg6);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Method_update(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[7];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 6); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Method, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_double, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        {
                            void *ptr;
                            if (SWIG_ConvertPtr(argv[4], &ptr, SWIGTYPE_p_double, 0) == -1) {
                                _v = 0;
                                PyErr_Clear();
                            } else {
                                _v = 1;
                            }
                        }
                        if (_v) {
                            return _wrap_Method_update__SWIG_0(self,args);
                        }
                    }
                }
            }
        }
    }
    if (argc == 6) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Method, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_double, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        {
                            void *ptr;
                            if (SWIG_ConvertPtr(argv[4], &ptr, SWIGTYPE_p_double, 0) == -1) {
                                _v = 0;
                                PyErr_Clear();
                            } else {
                                _v = 1;
                            }
                        }
                        if (_v) {
                            _v = SWIG_Check_double(argv[5]);
                            if (_v) {
                                return _wrap_Method_update__SWIG_1(self,args);
                            }
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Method_update'");
    return NULL;
}


static PyObject *_wrap_Method_ueval__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Method *arg1 = (dolfin::Method *) 0 ;
    dolfin::real arg2 ;
    dolfin::real *arg3 ;
    dolfin::real arg4 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Method_ueval",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Method, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        arg4 = static_cast<dolfin::real >(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::Method const *)arg1)->ueval(arg2,arg3,arg4);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Method_ueval__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Method *arg1 = (dolfin::Method *) 0 ;
    dolfin::real arg2 ;
    dolfin::real *arg3 ;
    dolfin::uint arg4 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Method_ueval",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Method, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        arg4 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::Method const *)arg1)->ueval(arg2,arg3,arg4);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Method_ueval(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Method, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_double, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    _v = SWIG_Check_unsigned_SS_int(argv[3]);
                    if (_v) {
                        return _wrap_Method_ueval__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__Method, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_double, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        return _wrap_Method_ueval__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'Method_ueval'");
    return NULL;
}


static PyObject *_wrap_Method_residual(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Method *arg1 = (dolfin::Method *) 0 ;
    dolfin::real arg2 ;
    dolfin::real *arg3 ;
    dolfin::real arg4 ;
    dolfin::real arg5 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:Method_residual",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Method, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        arg4 = static_cast<dolfin::real >(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = static_cast<dolfin::real >(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::Method const *)arg1)->residual(arg2,arg3,arg4,arg5);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Method_timestep(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Method *arg1 = (dolfin::Method *) 0 ;
    dolfin::real arg2 ;
    dolfin::real arg3 ;
    dolfin::real arg4 ;
    dolfin::real arg5 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:Method_timestep",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Method, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<dolfin::real >(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = static_cast<dolfin::real >(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::Method const *)arg1)->timestep(arg2,arg3,arg4,arg5);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Method_error(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Method *arg1 = (dolfin::Method *) 0 ;
    dolfin::real arg2 ;
    dolfin::real arg3 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Method_error",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Method, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::Method const *)arg1)->error(arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Method_disp(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Method *arg1 = (dolfin::Method *) 0 ;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Method_disp",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Method, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        ((dolfin::Method const *)arg1)->disp();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Method_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__Method, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_MonoAdaptiveFixedPointSolver(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MonoAdaptiveTimeSlab *arg1 = 0 ;
    dolfin::MonoAdaptiveFixedPointSolver *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_MonoAdaptiveFixedPointSolver",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MonoAdaptiveTimeSlab, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::MonoAdaptiveTimeSlab");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::MonoAdaptiveFixedPointSolver *)new dolfin::MonoAdaptiveFixedPointSolver(*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__MonoAdaptiveFixedPointSolver, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_MonoAdaptiveFixedPointSolver(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MonoAdaptiveFixedPointSolver *arg1 = (dolfin::MonoAdaptiveFixedPointSolver *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_MonoAdaptiveFixedPointSolver",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MonoAdaptiveFixedPointSolver, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * MonoAdaptiveFixedPointSolver_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__MonoAdaptiveFixedPointSolver, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_MonoAdaptiveJacobian(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MonoAdaptiveTimeSlab *arg1 = 0 ;
    bool arg2 ;
    bool arg3 ;
    dolfin::MonoAdaptiveJacobian *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_MonoAdaptiveJacobian",&obj0,&obj1,&obj2)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MonoAdaptiveTimeSlab, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::MonoAdaptiveTimeSlab");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<bool >(SWIG_As_bool(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::MonoAdaptiveJacobian *)new dolfin::MonoAdaptiveJacobian(*arg1,arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__MonoAdaptiveJacobian, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_MonoAdaptiveJacobian(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MonoAdaptiveJacobian *arg1 = (dolfin::MonoAdaptiveJacobian *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_MonoAdaptiveJacobian",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MonoAdaptiveJacobian, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MonoAdaptiveJacobian_mult(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MonoAdaptiveJacobian *arg1 = (dolfin::MonoAdaptiveJacobian *) 0 ;
    dolfin::Vector *arg2 = 0 ;
    dolfin::Vector *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:MonoAdaptiveJacobian_mult",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MonoAdaptiveJacobian, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        ((dolfin::MonoAdaptiveJacobian const *)arg1)->mult((dolfin::Vector const &)*arg2,*arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * MonoAdaptiveJacobian_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__MonoAdaptiveJacobian, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_MonoAdaptiveNewtonSolver__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MonoAdaptiveTimeSlab *arg1 = 0 ;
    bool arg2 ;
    dolfin::MonoAdaptiveNewtonSolver *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_MonoAdaptiveNewtonSolver",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MonoAdaptiveTimeSlab, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::MonoAdaptiveTimeSlab");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::MonoAdaptiveNewtonSolver *)new dolfin::MonoAdaptiveNewtonSolver(*arg1,arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__MonoAdaptiveNewtonSolver, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_MonoAdaptiveNewtonSolver__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MonoAdaptiveTimeSlab *arg1 = 0 ;
    dolfin::MonoAdaptiveNewtonSolver *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_MonoAdaptiveNewtonSolver",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MonoAdaptiveTimeSlab, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::MonoAdaptiveTimeSlab");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::MonoAdaptiveNewtonSolver *)new dolfin::MonoAdaptiveNewtonSolver(*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__MonoAdaptiveNewtonSolver, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_MonoAdaptiveNewtonSolver(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__MonoAdaptiveTimeSlab, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_MonoAdaptiveNewtonSolver__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__MonoAdaptiveTimeSlab, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_new_MonoAdaptiveNewtonSolver__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_MonoAdaptiveNewtonSolver'");
    return NULL;
}


static PyObject *_wrap_delete_MonoAdaptiveNewtonSolver(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MonoAdaptiveNewtonSolver *arg1 = (dolfin::MonoAdaptiveNewtonSolver *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_MonoAdaptiveNewtonSolver",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MonoAdaptiveNewtonSolver, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * MonoAdaptiveNewtonSolver_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__MonoAdaptiveNewtonSolver, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_MonoAdaptiveTimeSlab(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::ODE *arg1 = 0 ;
    dolfin::MonoAdaptiveTimeSlab *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_MonoAdaptiveTimeSlab",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__ODE, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::ODE");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::MonoAdaptiveTimeSlab *)new dolfin::MonoAdaptiveTimeSlab(*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__MonoAdaptiveTimeSlab, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_MonoAdaptiveTimeSlab(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MonoAdaptiveTimeSlab *arg1 = (dolfin::MonoAdaptiveTimeSlab *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_MonoAdaptiveTimeSlab",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MonoAdaptiveTimeSlab, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MonoAdaptiveTimeSlab_build(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MonoAdaptiveTimeSlab *arg1 = (dolfin::MonoAdaptiveTimeSlab *) 0 ;
    dolfin::real arg2 ;
    dolfin::real arg3 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:MonoAdaptiveTimeSlab_build",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MonoAdaptiveTimeSlab, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(arg1)->build(arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MonoAdaptiveTimeSlab_solve(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MonoAdaptiveTimeSlab *arg1 = (dolfin::MonoAdaptiveTimeSlab *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MonoAdaptiveTimeSlab_solve",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MonoAdaptiveTimeSlab, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)(arg1)->solve();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MonoAdaptiveTimeSlab_check(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MonoAdaptiveTimeSlab *arg1 = (dolfin::MonoAdaptiveTimeSlab *) 0 ;
    bool arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MonoAdaptiveTimeSlab_check",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MonoAdaptiveTimeSlab, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)(arg1)->check(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MonoAdaptiveTimeSlab_shift(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MonoAdaptiveTimeSlab *arg1 = (dolfin::MonoAdaptiveTimeSlab *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MonoAdaptiveTimeSlab_shift",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MonoAdaptiveTimeSlab, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)(arg1)->shift();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MonoAdaptiveTimeSlab_sample(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MonoAdaptiveTimeSlab *arg1 = (dolfin::MonoAdaptiveTimeSlab *) 0 ;
    dolfin::real arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MonoAdaptiveTimeSlab_sample",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MonoAdaptiveTimeSlab, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->sample(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MonoAdaptiveTimeSlab_usample(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MonoAdaptiveTimeSlab *arg1 = (dolfin::MonoAdaptiveTimeSlab *) 0 ;
    dolfin::uint arg2 ;
    dolfin::real arg3 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:MonoAdaptiveTimeSlab_usample",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MonoAdaptiveTimeSlab, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(arg1)->usample(arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MonoAdaptiveTimeSlab_ksample(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MonoAdaptiveTimeSlab *arg1 = (dolfin::MonoAdaptiveTimeSlab *) 0 ;
    dolfin::uint arg2 ;
    dolfin::real arg3 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:MonoAdaptiveTimeSlab_ksample",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MonoAdaptiveTimeSlab, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(arg1)->ksample(arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MonoAdaptiveTimeSlab_rsample(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MonoAdaptiveTimeSlab *arg1 = (dolfin::MonoAdaptiveTimeSlab *) 0 ;
    dolfin::uint arg2 ;
    dolfin::real arg3 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:MonoAdaptiveTimeSlab_rsample",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MonoAdaptiveTimeSlab, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(arg1)->rsample(arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MonoAdaptiveTimeSlab_disp(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MonoAdaptiveTimeSlab *arg1 = (dolfin::MonoAdaptiveTimeSlab *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MonoAdaptiveTimeSlab_disp",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MonoAdaptiveTimeSlab, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        ((dolfin::MonoAdaptiveTimeSlab const *)arg1)->disp();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * MonoAdaptiveTimeSlab_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__MonoAdaptiveTimeSlab, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_MonoAdaptivity(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::ODE *arg1 = 0 ;
    dolfin::Method *arg2 = 0 ;
    dolfin::MonoAdaptivity *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_MonoAdaptivity",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__ODE, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::ODE");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Method, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Method");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::MonoAdaptivity *)new dolfin::MonoAdaptivity((dolfin::ODE const &)*arg1,(dolfin::Method const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__MonoAdaptivity, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_MonoAdaptivity(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MonoAdaptivity *arg1 = (dolfin::MonoAdaptivity *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_MonoAdaptivity",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MonoAdaptivity, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MonoAdaptivity_timestep(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MonoAdaptivity *arg1 = (dolfin::MonoAdaptivity *) 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MonoAdaptivity_timestep",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MonoAdaptivity, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::MonoAdaptivity const *)arg1)->timestep();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MonoAdaptivity_update(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MonoAdaptivity *arg1 = (dolfin::MonoAdaptivity *) 0 ;
    dolfin::real arg2 ;
    dolfin::real arg3 ;
    dolfin::Method *arg4 = 0 ;
    dolfin::real arg5 ;
    bool arg6 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:MonoAdaptivity_update",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MonoAdaptivity, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_dolfin__Method, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("dolfin::Method");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = static_cast<dolfin::real >(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = static_cast<bool >(SWIG_As_bool(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->update(arg2,arg3,(dolfin::Method const &)*arg4,arg5,arg6);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * MonoAdaptivity_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__MonoAdaptivity, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_MultiAdaptiveFixedPointSolver(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MultiAdaptiveTimeSlab *arg1 = 0 ;
    dolfin::MultiAdaptiveFixedPointSolver *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_MultiAdaptiveFixedPointSolver",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MultiAdaptiveTimeSlab, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::MultiAdaptiveTimeSlab");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::MultiAdaptiveFixedPointSolver *)new dolfin::MultiAdaptiveFixedPointSolver(*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__MultiAdaptiveFixedPointSolver, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_MultiAdaptiveFixedPointSolver(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MultiAdaptiveFixedPointSolver *arg1 = (dolfin::MultiAdaptiveFixedPointSolver *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_MultiAdaptiveFixedPointSolver",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MultiAdaptiveFixedPointSolver, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * MultiAdaptiveFixedPointSolver_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__MultiAdaptiveFixedPointSolver, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_MultiAdaptivePreconditioner(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MultiAdaptiveTimeSlab *arg1 = 0 ;
    dolfin::Method *arg2 = 0 ;
    dolfin::MultiAdaptivePreconditioner *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_MultiAdaptivePreconditioner",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MultiAdaptiveTimeSlab, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::MultiAdaptiveTimeSlab");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Method, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Method");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::MultiAdaptivePreconditioner *)new dolfin::MultiAdaptivePreconditioner(*arg1,(dolfin::Method const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__MultiAdaptivePreconditioner, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_MultiAdaptivePreconditioner(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MultiAdaptivePreconditioner *arg1 = (dolfin::MultiAdaptivePreconditioner *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_MultiAdaptivePreconditioner",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MultiAdaptivePreconditioner, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MultiAdaptivePreconditioner_solve(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MultiAdaptivePreconditioner *arg1 = (dolfin::MultiAdaptivePreconditioner *) 0 ;
    dolfin::Vector *arg2 = 0 ;
    dolfin::Vector *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:MultiAdaptivePreconditioner_solve",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MultiAdaptivePreconditioner, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->solve(*arg2,(dolfin::Vector const &)*arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * MultiAdaptivePreconditioner_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__MultiAdaptivePreconditioner, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_MultiAdaptiveNewtonSolver(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MultiAdaptiveTimeSlab *arg1 = 0 ;
    dolfin::MultiAdaptiveNewtonSolver *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_MultiAdaptiveNewtonSolver",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MultiAdaptiveTimeSlab, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::MultiAdaptiveTimeSlab");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::MultiAdaptiveNewtonSolver *)new dolfin::MultiAdaptiveNewtonSolver(*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__MultiAdaptiveNewtonSolver, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_MultiAdaptiveNewtonSolver(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MultiAdaptiveNewtonSolver *arg1 = (dolfin::MultiAdaptiveNewtonSolver *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_MultiAdaptiveNewtonSolver",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MultiAdaptiveNewtonSolver, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * MultiAdaptiveNewtonSolver_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__MultiAdaptiveNewtonSolver, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_MultiAdaptiveTimeSlab(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::ODE *arg1 = 0 ;
    dolfin::MultiAdaptiveTimeSlab *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_MultiAdaptiveTimeSlab",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__ODE, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::ODE");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::MultiAdaptiveTimeSlab *)new dolfin::MultiAdaptiveTimeSlab(*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__MultiAdaptiveTimeSlab, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_MultiAdaptiveTimeSlab(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MultiAdaptiveTimeSlab *arg1 = (dolfin::MultiAdaptiveTimeSlab *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_MultiAdaptiveTimeSlab",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MultiAdaptiveTimeSlab, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MultiAdaptiveTimeSlab_build(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MultiAdaptiveTimeSlab *arg1 = (dolfin::MultiAdaptiveTimeSlab *) 0 ;
    dolfin::real arg2 ;
    dolfin::real arg3 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:MultiAdaptiveTimeSlab_build",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MultiAdaptiveTimeSlab, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(arg1)->build(arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MultiAdaptiveTimeSlab_solve(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MultiAdaptiveTimeSlab *arg1 = (dolfin::MultiAdaptiveTimeSlab *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MultiAdaptiveTimeSlab_solve",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MultiAdaptiveTimeSlab, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)(arg1)->solve();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MultiAdaptiveTimeSlab_check(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MultiAdaptiveTimeSlab *arg1 = (dolfin::MultiAdaptiveTimeSlab *) 0 ;
    bool arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MultiAdaptiveTimeSlab_check",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MultiAdaptiveTimeSlab, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)(arg1)->check(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MultiAdaptiveTimeSlab_shift(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MultiAdaptiveTimeSlab *arg1 = (dolfin::MultiAdaptiveTimeSlab *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MultiAdaptiveTimeSlab_shift",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MultiAdaptiveTimeSlab, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)(arg1)->shift();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MultiAdaptiveTimeSlab_reset(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MultiAdaptiveTimeSlab *arg1 = (dolfin::MultiAdaptiveTimeSlab *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MultiAdaptiveTimeSlab_reset",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MultiAdaptiveTimeSlab, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->reset();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MultiAdaptiveTimeSlab_sample(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MultiAdaptiveTimeSlab *arg1 = (dolfin::MultiAdaptiveTimeSlab *) 0 ;
    dolfin::real arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MultiAdaptiveTimeSlab_sample",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MultiAdaptiveTimeSlab, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->sample(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MultiAdaptiveTimeSlab_usample(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MultiAdaptiveTimeSlab *arg1 = (dolfin::MultiAdaptiveTimeSlab *) 0 ;
    dolfin::uint arg2 ;
    dolfin::real arg3 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:MultiAdaptiveTimeSlab_usample",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MultiAdaptiveTimeSlab, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(arg1)->usample(arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MultiAdaptiveTimeSlab_ksample(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MultiAdaptiveTimeSlab *arg1 = (dolfin::MultiAdaptiveTimeSlab *) 0 ;
    dolfin::uint arg2 ;
    dolfin::real arg3 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:MultiAdaptiveTimeSlab_ksample",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MultiAdaptiveTimeSlab, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(arg1)->ksample(arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MultiAdaptiveTimeSlab_rsample(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MultiAdaptiveTimeSlab *arg1 = (dolfin::MultiAdaptiveTimeSlab *) 0 ;
    dolfin::uint arg2 ;
    dolfin::real arg3 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:MultiAdaptiveTimeSlab_rsample",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MultiAdaptiveTimeSlab, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(arg1)->rsample(arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MultiAdaptiveTimeSlab_disp(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MultiAdaptiveTimeSlab *arg1 = (dolfin::MultiAdaptiveTimeSlab *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MultiAdaptiveTimeSlab_disp",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MultiAdaptiveTimeSlab, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        ((dolfin::MultiAdaptiveTimeSlab const *)arg1)->disp();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * MultiAdaptiveTimeSlab_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__MultiAdaptiveTimeSlab, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_MultiAdaptivity(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::ODE *arg1 = 0 ;
    dolfin::Method *arg2 = 0 ;
    dolfin::MultiAdaptivity *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_MultiAdaptivity",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__ODE, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::ODE");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Method, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Method");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::MultiAdaptivity *)new dolfin::MultiAdaptivity((dolfin::ODE const &)*arg1,(dolfin::Method const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__MultiAdaptivity, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_MultiAdaptivity(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MultiAdaptivity *arg1 = (dolfin::MultiAdaptivity *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_MultiAdaptivity",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MultiAdaptivity, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MultiAdaptivity_timestep(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MultiAdaptivity *arg1 = (dolfin::MultiAdaptivity *) 0 ;
    dolfin::uint arg2 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MultiAdaptivity_timestep",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MultiAdaptivity, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::MultiAdaptivity const *)arg1)->timestep(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MultiAdaptivity_updateStart(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MultiAdaptivity *arg1 = (dolfin::MultiAdaptivity *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MultiAdaptivity_updateStart",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MultiAdaptivity, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->updateStart();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MultiAdaptivity_updateComponent(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MultiAdaptivity *arg1 = (dolfin::MultiAdaptivity *) 0 ;
    dolfin::uint arg2 ;
    dolfin::real arg3 ;
    dolfin::real arg4 ;
    dolfin::real arg5 ;
    dolfin::real arg6 ;
    dolfin::real arg7 ;
    dolfin::Method *arg8 = 0 ;
    dolfin::real arg9 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    PyObject * obj8 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:MultiAdaptivity_updateComponent",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MultiAdaptivity, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<dolfin::real >(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = static_cast<dolfin::real >(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = static_cast<dolfin::real >(SWIG_As_double(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        arg7 = static_cast<dolfin::real >(SWIG_As_double(obj6)); 
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj7, (void **)&arg8, SWIGTYPE_p_dolfin__Method, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(8)) SWIG_fail;
        if (arg8 == NULL) {
            SWIG_null_ref("dolfin::Method");
        }
        if (SWIG_arg_fail(8)) SWIG_fail;
    }
    {
        arg9 = static_cast<dolfin::real >(SWIG_As_double(obj8)); 
        if (SWIG_arg_fail(9)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->updateComponent(arg2,arg3,arg4,arg5,arg6,arg7,(dolfin::Method const &)*arg8,arg9);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MultiAdaptivity_updateEnd(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::MultiAdaptivity *arg1 = (dolfin::MultiAdaptivity *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MultiAdaptivity_updateEnd",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__MultiAdaptivity, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->updateEnd(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * MultiAdaptivity_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__MultiAdaptivity, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ODE(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    PyObject *arg1 = (PyObject *) 0 ;
    dolfin::uint arg2 ;
    dolfin::real arg3 ;
    dolfin::ODE *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_ODE",&obj0,&obj1,&obj2)) goto fail;
    arg1 = obj0;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        if ( arg1 != Py_None ) {
            /* subclassed */
            result = (dolfin::ODE *)new SwigDirector_ODE(arg1,arg2,arg3);
            
        } else {
            PyErr_SetString(PyExc_RuntimeError,    "accessing abstract class or protected constructor"); 
            SWIG_fail;
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__ODE, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_ODE(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::ODE *arg1 = (dolfin::ODE *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ODE",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__ODE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ODE_u0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::ODE *arg1 = (dolfin::ODE *) 0 ;
    dolfin::uint arg2 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ODE_u0",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__ODE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(arg1)->u0(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ODE_fmulti(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::ODE *arg1 = (dolfin::ODE *) 0 ;
    dolfin::real *arg2 ;
    dolfin::real arg3 ;
    dolfin::uint arg4 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:ODE_fmulti",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__ODE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(arg1)->f((double const (*))arg2,arg3,arg4);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ODE_fmono(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::ODE *arg1 = (dolfin::ODE *) 0 ;
    dolfin::real *arg2 ;
    dolfin::real arg3 ;
    dolfin::real *arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:ODE_fmono",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__ODE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->f((double const (*))arg2,arg3,arg4);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ODE_M(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::ODE *arg1 = (dolfin::ODE *) 0 ;
    dolfin::real *arg2 ;
    dolfin::real *arg3 ;
    dolfin::real *arg4 ;
    dolfin::real arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:ODE_M",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__ODE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    {
        arg5 = static_cast<dolfin::real >(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->M((double const (*))arg2,arg3,(double const (*))arg4,arg5);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ODE_J(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::ODE *arg1 = (dolfin::ODE *) 0 ;
    dolfin::real *arg2 ;
    dolfin::real *arg3 ;
    dolfin::real *arg4 ;
    dolfin::real arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:ODE_J",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__ODE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    {
        arg5 = static_cast<dolfin::real >(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->J((double const (*))arg2,arg3,(double const (*))arg4,arg5);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ODE_dfdu(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::ODE *arg1 = (dolfin::ODE *) 0 ;
    dolfin::real *arg2 ;
    dolfin::real arg3 ;
    dolfin::uint arg4 ;
    dolfin::uint arg5 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:ODE_dfdu",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__ODE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(arg1)->dfdu((double const (*))arg2,arg3,arg4,arg5);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ODE_timestep__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::ODE *arg1 = (dolfin::ODE *) 0 ;
    dolfin::real arg2 ;
    dolfin::real arg3 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:ODE_timestep",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__ODE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::ODE const *)arg1)->timestep(arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ODE_timestep__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::ODE *arg1 = (dolfin::ODE *) 0 ;
    dolfin::real arg2 ;
    dolfin::uint arg3 ;
    dolfin::real arg4 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:ODE_timestep",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__ODE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<dolfin::real >(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::ODE const *)arg1)->timestep(arg2,arg3,arg4);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ODE_timestep(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__ODE, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_double(argv[2]);
                if (_v) {
                    return _wrap_ODE_timestep__SWIG_0(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__ODE, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        return _wrap_ODE_timestep__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'ODE_timestep'");
    return NULL;
}


static PyObject *_wrap_ODE_update(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::ODE *arg1 = (dolfin::ODE *) 0 ;
    dolfin::real *arg2 ;
    dolfin::real arg3 ;
    bool arg4 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:ODE_update",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__ODE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<bool >(SWIG_As_bool(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)(arg1)->update((double const (*))arg2,arg3,arg4);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ODE_save(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::ODE *arg1 = (dolfin::ODE *) 0 ;
    dolfin::Sample *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ODE_save",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__ODE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Sample, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Sample");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->save(*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ODE_size(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::ODE *arg1 = (dolfin::ODE *) 0 ;
    dolfin::uint result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ODE_size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__ODE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::uint)((dolfin::ODE const *)arg1)->size();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ODE_endtime(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::ODE *arg1 = (dolfin::ODE *) 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ODE_endtime",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__ODE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::ODE const *)arg1)->endtime();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ODE_solve(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::ODE *arg1 = (dolfin::ODE *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ODE_solve",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__ODE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->solve();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ODE_sparse__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::ODE *arg1 = (dolfin::ODE *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ODE_sparse",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__ODE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->sparse();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ODE_sparse__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::ODE *arg1 = (dolfin::ODE *) 0 ;
    dolfin::Matrix *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ODE_sparse",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__ODE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Matrix, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Matrix");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->sparse((dolfin::Matrix const &)*arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ODE_sparse(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__ODE, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_ODE_sparse__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__ODE, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_dolfin__Matrix, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_ODE_sparse__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'ODE_sparse'");
    return NULL;
}


static PyObject *_wrap_disown_ODE(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::ODE *arg1 = (dolfin::ODE *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:disown_ODE",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__ODE, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        {
            Swig::Director *director = dynamic_cast<Swig::Director *>(arg1);
            if (director) director->swig_disown();
        }
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ODE_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__ODE, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_ODESolver_solve(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::ODE *arg1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ODESolver_solve",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__ODE, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::ODE");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        dolfin::ODESolver::solve(*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ODESolver_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__ODESolver, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ParticleSystem__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    unsigned int arg1 ;
    dolfin::real arg2 ;
    unsigned int arg3 ;
    dolfin::ParticleSystem *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_ParticleSystem",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::ParticleSystem *)new dolfin::ParticleSystem(arg1,arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__ParticleSystem, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ParticleSystem__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    unsigned int arg1 ;
    dolfin::real arg2 ;
    dolfin::ParticleSystem *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_ParticleSystem",&obj0,&obj1)) goto fail;
    {
        arg1 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::ParticleSystem *)new dolfin::ParticleSystem(arg1,arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__ParticleSystem, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ParticleSystem(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_unsigned_SS_int(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_new_ParticleSystem__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_Check_unsigned_SS_int(argv[0]);
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    return _wrap_new_ParticleSystem__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_ParticleSystem'");
    return NULL;
}


static PyObject *_wrap_delete_ParticleSystem(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::ParticleSystem *arg1 = (dolfin::ParticleSystem *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ParticleSystem",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__ParticleSystem, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ParticleSystem_x0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::ParticleSystem *arg1 = (dolfin::ParticleSystem *) 0 ;
    unsigned int arg2 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ParticleSystem_x0",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__ParticleSystem, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(arg1)->x0(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ParticleSystem_y0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::ParticleSystem *arg1 = (dolfin::ParticleSystem *) 0 ;
    unsigned int arg2 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ParticleSystem_y0",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__ParticleSystem, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(arg1)->y0(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ParticleSystem_z0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::ParticleSystem *arg1 = (dolfin::ParticleSystem *) 0 ;
    unsigned int arg2 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ParticleSystem_z0",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__ParticleSystem, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(arg1)->z0(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ParticleSystem_vx0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::ParticleSystem *arg1 = (dolfin::ParticleSystem *) 0 ;
    unsigned int arg2 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ParticleSystem_vx0",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__ParticleSystem, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(arg1)->vx0(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ParticleSystem_vy0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::ParticleSystem *arg1 = (dolfin::ParticleSystem *) 0 ;
    unsigned int arg2 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ParticleSystem_vy0",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__ParticleSystem, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(arg1)->vy0(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ParticleSystem_vz0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::ParticleSystem *arg1 = (dolfin::ParticleSystem *) 0 ;
    unsigned int arg2 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ParticleSystem_vz0",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__ParticleSystem, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(arg1)->vz0(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ParticleSystem_Fx(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::ParticleSystem *arg1 = (dolfin::ParticleSystem *) 0 ;
    unsigned int arg2 ;
    dolfin::real arg3 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:ParticleSystem_Fx",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__ParticleSystem, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(arg1)->Fx(arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ParticleSystem_Fy(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::ParticleSystem *arg1 = (dolfin::ParticleSystem *) 0 ;
    unsigned int arg2 ;
    dolfin::real arg3 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:ParticleSystem_Fy",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__ParticleSystem, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(arg1)->Fy(arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ParticleSystem_Fz(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::ParticleSystem *arg1 = (dolfin::ParticleSystem *) 0 ;
    unsigned int arg2 ;
    dolfin::real arg3 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:ParticleSystem_Fz",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__ParticleSystem, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(arg1)->Fz(arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ParticleSystem_mass(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::ParticleSystem *arg1 = (dolfin::ParticleSystem *) 0 ;
    unsigned int arg2 ;
    dolfin::real arg3 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:ParticleSystem_mass",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__ParticleSystem, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(arg1)->mass(arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ParticleSystem_k(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::ParticleSystem *arg1 = (dolfin::ParticleSystem *) 0 ;
    unsigned int arg2 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ParticleSystem_k",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__ParticleSystem, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(arg1)->k(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ParticleSystem_u0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::ParticleSystem *arg1 = (dolfin::ParticleSystem *) 0 ;
    unsigned int arg2 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ParticleSystem_u0",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__ParticleSystem, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(arg1)->u0(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ParticleSystem_f(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::ParticleSystem *arg1 = (dolfin::ParticleSystem *) 0 ;
    dolfin::real *arg2 ;
    dolfin::real arg3 ;
    unsigned int arg4 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:ParticleSystem_f",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__ParticleSystem, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(arg1)->f((double const (*))arg2,arg3,arg4);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ParticleSystem_timestep(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::ParticleSystem *arg1 = (dolfin::ParticleSystem *) 0 ;
    unsigned int arg2 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ParticleSystem_timestep",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__ParticleSystem, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(arg1)->timestep(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ParticleSystem_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__ParticleSystem, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Partition(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::uint arg1 ;
    dolfin::Partition *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Partition",&obj0)) goto fail;
    {
        arg1 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Partition *)new dolfin::Partition(arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Partition, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Partition(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Partition *arg1 = (dolfin::Partition *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Partition",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Partition, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Partition_size(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Partition *arg1 = (dolfin::Partition *) 0 ;
    dolfin::uint result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Partition_size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Partition, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::uint)((dolfin::Partition const *)arg1)->size();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Partition_index(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Partition *arg1 = (dolfin::Partition *) 0 ;
    dolfin::uint arg2 ;
    dolfin::uint result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Partition_index",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Partition, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::uint)((dolfin::Partition const *)arg1)->index(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Partition_update(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Partition *arg1 = (dolfin::Partition *) 0 ;
    dolfin::uint arg2 ;
    dolfin::uint *arg3 = 0 ;
    dolfin::MultiAdaptivity *arg4 = 0 ;
    dolfin::real arg5 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:Partition_update",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Partition, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_unsigned_int, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::uint");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_dolfin__MultiAdaptivity, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("dolfin::MultiAdaptivity");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = static_cast<dolfin::real >(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(arg1)->update(arg2,*arg3,*arg4,arg5);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Partition_debug(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Partition *arg1 = (dolfin::Partition *) 0 ;
    dolfin::uint arg2 ;
    dolfin::uint arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Partition_debug",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Partition, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        ((dolfin::Partition const *)arg1)->debug(arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Partition_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__Partition, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ReducedModel(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::ODE *arg1 = 0 ;
    dolfin::ReducedModel *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_ReducedModel",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__ODE, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::ODE");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::ReducedModel *)new dolfin::ReducedModel(*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__ReducedModel, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_ReducedModel(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::ReducedModel *arg1 = (dolfin::ReducedModel *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ReducedModel",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__ReducedModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ReducedModel_f(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::ReducedModel *arg1 = (dolfin::ReducedModel *) 0 ;
    dolfin::Vector *arg2 = 0 ;
    dolfin::real arg3 ;
    unsigned int arg4 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:ReducedModel_f",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__ReducedModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(arg1)->f((dolfin::Vector const &)*arg2,arg3,arg4);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ReducedModel_u0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::ReducedModel *arg1 = (dolfin::ReducedModel *) 0 ;
    unsigned int arg2 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ReducedModel_u0",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__ReducedModel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(arg1)->u0(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ReducedModel_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__ReducedModel, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Sample(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::TimeSlab *arg1 = 0 ;
    dolfin::real arg2 ;
    std::string arg3 ;
    std::string arg4 ;
    dolfin::Sample *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:new_Sample",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__TimeSlab, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::TimeSlab");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj3, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj3);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::Sample *)new dolfin::Sample(*arg1,arg2,arg3,arg4);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__Sample, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Sample(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Sample *arg1 = (dolfin::Sample *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Sample",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Sample, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Sample_size(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Sample *arg1 = (dolfin::Sample *) 0 ;
    dolfin::uint result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Sample_size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Sample, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::uint)((dolfin::Sample const *)arg1)->size();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Sample_t(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Sample *arg1 = (dolfin::Sample *) 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Sample_t",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Sample, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::Sample const *)arg1)->t();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Sample_u(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Sample *arg1 = (dolfin::Sample *) 0 ;
    dolfin::uint arg2 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Sample_u",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Sample, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(arg1)->u(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Sample_k(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Sample *arg1 = (dolfin::Sample *) 0 ;
    dolfin::uint arg2 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Sample_k",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Sample, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(arg1)->k(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Sample_r(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::Sample *arg1 = (dolfin::Sample *) 0 ;
    dolfin::uint arg2 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Sample_r",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__Sample, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(arg1)->r(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Sample_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__Sample, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_TimeSlab(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::TimeSlab *arg1 = (dolfin::TimeSlab *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_TimeSlab",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__TimeSlab, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSlab_build(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::TimeSlab *arg1 = (dolfin::TimeSlab *) 0 ;
    dolfin::real arg2 ;
    dolfin::real arg3 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:TimeSlab_build",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__TimeSlab, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(arg1)->build(arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSlab_solve(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::TimeSlab *arg1 = (dolfin::TimeSlab *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TimeSlab_solve",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__TimeSlab, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)(arg1)->solve();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSlab_check(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::TimeSlab *arg1 = (dolfin::TimeSlab *) 0 ;
    bool arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:TimeSlab_check",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__TimeSlab, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)(arg1)->check(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSlab_shift(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::TimeSlab *arg1 = (dolfin::TimeSlab *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TimeSlab_shift",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__TimeSlab, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)(arg1)->shift();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSlab_sample(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::TimeSlab *arg1 = (dolfin::TimeSlab *) 0 ;
    dolfin::real arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:TimeSlab_sample",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__TimeSlab, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->sample(arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSlab_size(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::TimeSlab *arg1 = (dolfin::TimeSlab *) 0 ;
    dolfin::uint result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TimeSlab_size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__TimeSlab, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::uint)((dolfin::TimeSlab const *)arg1)->size();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_unsigned_SS_int(static_cast<unsigned int >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSlab_starttime(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::TimeSlab *arg1 = (dolfin::TimeSlab *) 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TimeSlab_starttime",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__TimeSlab, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::TimeSlab const *)arg1)->starttime();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSlab_endtime(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::TimeSlab *arg1 = (dolfin::TimeSlab *) 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TimeSlab_endtime",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__TimeSlab, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::TimeSlab const *)arg1)->endtime();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSlab_length(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::TimeSlab *arg1 = (dolfin::TimeSlab *) 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TimeSlab_length",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__TimeSlab, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::TimeSlab const *)arg1)->length();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSlab_usample(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::TimeSlab *arg1 = (dolfin::TimeSlab *) 0 ;
    dolfin::uint arg2 ;
    dolfin::real arg3 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:TimeSlab_usample",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__TimeSlab, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(arg1)->usample(arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSlab_ksample(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::TimeSlab *arg1 = (dolfin::TimeSlab *) 0 ;
    dolfin::uint arg2 ;
    dolfin::real arg3 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:TimeSlab_ksample",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__TimeSlab, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(arg1)->ksample(arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSlab_rsample(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::TimeSlab *arg1 = (dolfin::TimeSlab *) 0 ;
    dolfin::uint arg2 ;
    dolfin::real arg3 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:TimeSlab_rsample",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__TimeSlab, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(arg1)->rsample(arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSlab_disp(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::TimeSlab *arg1 = (dolfin::TimeSlab *) 0 ;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TimeSlab_disp",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__TimeSlab, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        ((dolfin::TimeSlab const *)arg1)->disp();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * TimeSlab_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__TimeSlab, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_TimeSlabJacobian(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::TimeSlabJacobian *arg1 = (dolfin::TimeSlabJacobian *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_TimeSlabJacobian",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__TimeSlabJacobian, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSlabJacobian_mult(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::TimeSlabJacobian *arg1 = (dolfin::TimeSlabJacobian *) 0 ;
    dolfin::Vector *arg2 = 0 ;
    dolfin::Vector *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:TimeSlabJacobian_mult",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__TimeSlabJacobian, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_dolfin__Vector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("dolfin::Vector");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        ((dolfin::TimeSlabJacobian const *)arg1)->mult((dolfin::Vector const &)*arg2,*arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeSlabJacobian_update(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::TimeSlabJacobian *arg1 = (dolfin::TimeSlabJacobian *) 0 ;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TimeSlabJacobian_update",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__TimeSlabJacobian, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        (arg1)->update();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * TimeSlabJacobian_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__TimeSlabJacobian, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_TimeStepper(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::ODE *arg1 = 0 ;
    dolfin::TimeStepper *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_TimeStepper",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__ODE, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::ODE");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::TimeStepper *)new dolfin::TimeStepper(*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__TimeStepper, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_TimeStepper(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::TimeStepper *arg1 = (dolfin::TimeStepper *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_TimeStepper",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__TimeStepper, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        delete arg1;
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeStepper_solve(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::ODE *arg1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TimeStepper_solve",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__ODE, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("dolfin::ODE");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        dolfin::TimeStepper::solve(*arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeStepper_step(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::TimeStepper *arg1 = (dolfin::TimeStepper *) 0 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TimeStepper_step",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__TimeStepper, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)(arg1)->step();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TimeStepper_finished(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::TimeStepper *arg1 = (dolfin::TimeStepper *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TimeStepper_finished",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__TimeStepper, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        Swig::UnknownExceptionHandler dh;
        result = (bool)((dolfin::TimeStepper const *)arg1)->finished();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_bool(static_cast<bool >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * TimeStepper_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__TimeStepper, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_cGqMethod(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    unsigned int arg1 ;
    dolfin::cGqMethod *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_cGqMethod",&obj0)) goto fail;
    {
        arg1 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::cGqMethod *)new dolfin::cGqMethod(arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__cGqMethod, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cGqMethod_ueval__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::cGqMethod *arg1 = (dolfin::cGqMethod *) 0 ;
    dolfin::real arg2 ;
    dolfin::real *arg3 ;
    dolfin::real arg4 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cGqMethod_ueval",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__cGqMethod, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        arg4 = static_cast<dolfin::real >(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::cGqMethod const *)arg1)->ueval(arg2,arg3,arg4);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cGqMethod_ueval__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::cGqMethod *arg1 = (dolfin::cGqMethod *) 0 ;
    dolfin::real arg2 ;
    dolfin::real *arg3 ;
    dolfin::uint arg4 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cGqMethod_ueval",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__cGqMethod, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        arg4 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::cGqMethod const *)arg1)->ueval(arg2,arg3,arg4);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cGqMethod_ueval(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__cGqMethod, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_double, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    _v = SWIG_Check_unsigned_SS_int(argv[3]);
                    if (_v) {
                        return _wrap_cGqMethod_ueval__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__cGqMethod, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_double, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        return _wrap_cGqMethod_ueval__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'cGqMethod_ueval'");
    return NULL;
}


static PyObject *_wrap_cGqMethod_residual(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::cGqMethod *arg1 = (dolfin::cGqMethod *) 0 ;
    dolfin::real arg2 ;
    dolfin::real *arg3 ;
    dolfin::real arg4 ;
    dolfin::real arg5 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:cGqMethod_residual",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__cGqMethod, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        arg4 = static_cast<dolfin::real >(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = static_cast<dolfin::real >(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::cGqMethod const *)arg1)->residual(arg2,arg3,arg4,arg5);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cGqMethod_timestep(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::cGqMethod *arg1 = (dolfin::cGqMethod *) 0 ;
    dolfin::real arg2 ;
    dolfin::real arg3 ;
    dolfin::real arg4 ;
    dolfin::real arg5 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:cGqMethod_timestep",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__cGqMethod, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<dolfin::real >(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = static_cast<dolfin::real >(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::cGqMethod const *)arg1)->timestep(arg2,arg3,arg4,arg5);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cGqMethod_error(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::cGqMethod *arg1 = (dolfin::cGqMethod *) 0 ;
    dolfin::real arg2 ;
    dolfin::real arg3 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cGqMethod_error",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__cGqMethod, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::cGqMethod const *)arg1)->error(arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cGqMethod_disp(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::cGqMethod *arg1 = (dolfin::cGqMethod *) 0 ;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cGqMethod_disp",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__cGqMethod, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        ((dolfin::cGqMethod const *)arg1)->disp();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * cGqMethod_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__cGqMethod, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_dGqMethod(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    unsigned int arg1 ;
    dolfin::dGqMethod *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_dGqMethod",&obj0)) goto fail;
    {
        arg1 = static_cast<unsigned int >(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::dGqMethod *)new dolfin::dGqMethod(arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_dolfin__dGqMethod, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_dGqMethod_ueval__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::dGqMethod *arg1 = (dolfin::dGqMethod *) 0 ;
    dolfin::real arg2 ;
    dolfin::real *arg3 ;
    dolfin::real arg4 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:dGqMethod_ueval",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__dGqMethod, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        arg4 = static_cast<dolfin::real >(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::dGqMethod const *)arg1)->ueval(arg2,arg3,arg4);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_dGqMethod_ueval__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::dGqMethod *arg1 = (dolfin::dGqMethod *) 0 ;
    dolfin::real arg2 ;
    dolfin::real *arg3 ;
    dolfin::uint arg4 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:dGqMethod_ueval",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__dGqMethod, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        arg4 = static_cast<dolfin::uint >(SWIG_As_unsigned_SS_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::dGqMethod const *)arg1)->ueval(arg2,arg3,arg4);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_dGqMethod_ueval(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__dGqMethod, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_double, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    _v = SWIG_Check_unsigned_SS_int(argv[3]);
                    if (_v) {
                        return _wrap_dGqMethod_ueval__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_dolfin__dGqMethod, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_double, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    _v = SWIG_Check_double(argv[3]);
                    if (_v) {
                        return _wrap_dGqMethod_ueval__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'dGqMethod_ueval'");
    return NULL;
}


static PyObject *_wrap_dGqMethod_residual(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::dGqMethod *arg1 = (dolfin::dGqMethod *) 0 ;
    dolfin::real arg2 ;
    dolfin::real *arg3 ;
    dolfin::real arg4 ;
    dolfin::real arg5 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:dGqMethod_residual",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__dGqMethod, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        arg4 = static_cast<dolfin::real >(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = static_cast<dolfin::real >(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::dGqMethod const *)arg1)->residual(arg2,arg3,arg4,arg5);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_dGqMethod_timestep(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::dGqMethod *arg1 = (dolfin::dGqMethod *) 0 ;
    dolfin::real arg2 ;
    dolfin::real arg3 ;
    dolfin::real arg4 ;
    dolfin::real arg5 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:dGqMethod_timestep",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__dGqMethod, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = static_cast<dolfin::real >(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = static_cast<dolfin::real >(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::dGqMethod const *)arg1)->timestep(arg2,arg3,arg4,arg5);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_dGqMethod_error(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::dGqMethod *arg1 = (dolfin::dGqMethod *) 0 ;
    dolfin::real arg2 ;
    dolfin::real arg3 ;
    dolfin::real result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:dGqMethod_error",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__dGqMethod, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = static_cast<dolfin::real >(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        result = (dolfin::real)((dolfin::dGqMethod const *)arg1)->error(arg2,arg3);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        resultobj = SWIG_From_double(static_cast<double >(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_dGqMethod_disp(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    dolfin::dGqMethod *arg1 = (dolfin::dGqMethod *) 0 ;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:dGqMethod_disp",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_dolfin__dGqMethod, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    director = SWIG_DIRECTOR_CAST(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    try {
        Swig::UnknownExceptionHandler dh;
        ((dolfin::dGqMethod const *)arg1)->disp();
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * dGqMethod_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_dolfin__dGqMethod, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_set__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    dolfin::real arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:set",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = static_cast<dolfin::real >(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        glueset(arg1,arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_set__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:set",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = static_cast<int >(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        glueset(arg1,arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_set__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:set",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg2 = static_cast<bool >(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        glueset(arg1,arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_set__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    std::string arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:set",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        glueset(arg1,arg2);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_set(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_set__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_double(argv[1]);
            if (_v) {
                return _wrap_set__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                return _wrap_set__SWIG_3(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_set__SWIG_2(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'set'");
    return NULL;
}


static PyObject *_wrap_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    SwigValueWrapper<dolfin::Parameter > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:get",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    try {
        Swig::UnknownExceptionHandler dh;
        result = glueget(arg1);
        
    } catch (Swig::DirectorException&) {
        SWIG_fail;
    }
    {
        {
            // Custom typemap
            
            switch ( (&result)->type() )
            {
                case Parameter::type_real:
                
                resultobj = SWIG_From_double(*&(result));
                break;
                
                case Parameter::type_int:
                
                resultobj = SWIG_From_int((int)*&(result));
                break;
                
                case Parameter::type_bool:
                
                resultobj = SWIG_From_bool(*&(result));
                break;
                
                case Parameter::type_string:
                
                resultobj = SWIG_From_std_string(*&(result));
                break;
                
                default:
                dolfin_error("Unknown type for parameter.");
            }
        }
    }
    return resultobj;
    fail:
    return NULL;
}


static PyMethodDef SwigMethods[] = {
	 { (char *)"new_realArray", _wrap_new_realArray, METH_VARARGS, NULL},
	 { (char *)"delete_realArray", _wrap_delete_realArray, METH_VARARGS, NULL},
	 { (char *)"realArray_getitem", _wrap_realArray_getitem, METH_VARARGS, NULL},
	 { (char *)"realArray_setitem", _wrap_realArray_setitem, METH_VARARGS, NULL},
	 { (char *)"dolfin_init", _wrap_dolfin_init, METH_VARARGS, NULL},
	 { (char *)"sqr", _wrap_sqr, METH_VARARGS, NULL},
	 { (char *)"rand", _wrap_rand, METH_VARARGS, NULL},
	 { (char *)"seed", _wrap_seed, METH_VARARGS, NULL},
	 { (char *)"new_TimeDependent", _wrap_new_TimeDependent, METH_VARARGS, NULL},
	 { (char *)"delete_TimeDependent", _wrap_delete_TimeDependent, METH_VARARGS, NULL},
	 { (char *)"TimeDependent_sync", _wrap_TimeDependent_sync, METH_VARARGS, NULL},
	 { (char *)"TimeDependent_time", _wrap_TimeDependent_time, METH_VARARGS, NULL},
	 { (char *)"TimeDependent_swigregister", TimeDependent_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Variable", _wrap_new_Variable, METH_VARARGS, NULL},
	 { (char *)"Variable_rename", _wrap_Variable_rename, METH_VARARGS, NULL},
	 { (char *)"Variable_name", _wrap_Variable_name, METH_VARARGS, NULL},
	 { (char *)"Variable_label", _wrap_Variable_label, METH_VARARGS, NULL},
	 { (char *)"Variable_number", _wrap_Variable_number, METH_VARARGS, NULL},
	 { (char *)"Variable_swigregister", Variable_swigregister, METH_VARARGS, NULL},
	 { (char *)"suffix", _wrap_suffix, METH_VARARGS, NULL},
	 { (char *)"remove_newline", _wrap_remove_newline, METH_VARARGS, NULL},
	 { (char *)"length", _wrap_length, METH_VARARGS, NULL},
	 { (char *)"date", _wrap_date, METH_VARARGS, NULL},
	 { (char *)"delay", _wrap_delay, METH_VARARGS, NULL},
	 { (char *)"tic", _wrap_tic, METH_VARARGS, NULL},
	 { (char *)"toc", _wrap_toc, METH_VARARGS, NULL},
	 { (char *)"tocd", _wrap_tocd, METH_VARARGS, NULL},
	 { (char *)"dolfin_update", _wrap_dolfin_update, METH_VARARGS, NULL},
	 { (char *)"dolfin_quit", _wrap_dolfin_quit, METH_VARARGS, NULL},
	 { (char *)"dolfin_finished", _wrap_dolfin_finished, METH_VARARGS, NULL},
	 { (char *)"dolfin_segfault", _wrap_dolfin_segfault, METH_VARARGS, NULL},
	 { (char *)"dolfin_begin", _wrap_dolfin_begin, METH_VARARGS, NULL},
	 { (char *)"dolfin_end", _wrap_dolfin_end, METH_VARARGS, NULL},
	 { (char *)"dolfin_output", _wrap_dolfin_output, METH_VARARGS, NULL},
	 { (char *)"dolfin_log", _wrap_dolfin_log, METH_VARARGS, NULL},
	 { (char *)"new_Parameter", _wrap_new_Parameter, METH_VARARGS, NULL},
	 { (char *)"delete_Parameter", _wrap_delete_Parameter, METH_VARARGS, NULL},
	 { (char *)"Parameter_type", _wrap_Parameter_type, METH_VARARGS, NULL},
	 { (char *)"Parameter_swigregister", Parameter_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_File", _wrap_new_File, METH_VARARGS, NULL},
	 { (char *)"delete_File", _wrap_delete_File, METH_VARARGS, NULL},
	 { (char *)"File___rshift__", _wrap_File___rshift__, METH_VARARGS, NULL},
	 { (char *)"File___lshift__", _wrap_File___lshift__, METH_VARARGS, NULL},
	 { (char *)"File_swigregister", File_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Vector", _wrap_new_Vector, METH_VARARGS, NULL},
	 { (char *)"delete_Vector", _wrap_delete_Vector, METH_VARARGS, NULL},
	 { (char *)"Vector_init", _wrap_Vector_init, METH_VARARGS, NULL},
	 { (char *)"Vector_clear", _wrap_Vector_clear, METH_VARARGS, NULL},
	 { (char *)"Vector_size", _wrap_Vector_size, METH_VARARGS, NULL},
	 { (char *)"Vector_vec", _wrap_Vector_vec, METH_VARARGS, NULL},
	 { (char *)"Vector_array", _wrap_Vector_array, METH_VARARGS, NULL},
	 { (char *)"Vector_restore", _wrap_Vector_restore, METH_VARARGS, NULL},
	 { (char *)"Vector_axpy", _wrap_Vector_axpy, METH_VARARGS, NULL},
	 { (char *)"Vector_div", _wrap_Vector_div, METH_VARARGS, NULL},
	 { (char *)"Vector_mult", _wrap_Vector_mult, METH_VARARGS, NULL},
	 { (char *)"Vector_add", _wrap_Vector_add, METH_VARARGS, NULL},
	 { (char *)"Vector_apply", _wrap_Vector_apply, METH_VARARGS, NULL},
	 { (char *)"Vector___call__", _wrap_Vector___call__, METH_VARARGS, NULL},
	 { (char *)"Vector_copy", _wrap_Vector_copy, METH_VARARGS, NULL},
	 { (char *)"Vector___iadd__", _wrap_Vector___iadd__, METH_VARARGS, NULL},
	 { (char *)"Vector___isub__", _wrap_Vector___isub__, METH_VARARGS, NULL},
	 { (char *)"Vector___imul__", _wrap_Vector___imul__, METH_VARARGS, NULL},
	 { (char *)"Vector___idiv__", _wrap_Vector___idiv__, METH_VARARGS, NULL},
	 { (char *)"Vector___mul__", _wrap_Vector___mul__, METH_VARARGS, NULL},
	 { (char *)"Vector_norm", _wrap_Vector_norm, METH_VARARGS, NULL},
	 { (char *)"Vector_sum", _wrap_Vector_sum, METH_VARARGS, NULL},
	 { (char *)"Vector_max", _wrap_Vector_max, METH_VARARGS, NULL},
	 { (char *)"Vector_min", _wrap_Vector_min, METH_VARARGS, NULL},
	 { (char *)"Vector_disp", _wrap_Vector_disp, METH_VARARGS, NULL},
	 { (char *)"Vector___getitem__", _wrap_Vector___getitem__, METH_VARARGS, NULL},
	 { (char *)"Vector___setitem__", _wrap_Vector___setitem__, METH_VARARGS, NULL},
	 { (char *)"Vector_addval", _wrap_Vector_addval, METH_VARARGS, NULL},
	 { (char *)"Vector_swigregister", Vector_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_VectorElement", _wrap_new_VectorElement, METH_VARARGS, NULL},
	 { (char *)"VectorElement___iadd__", _wrap_VectorElement___iadd__, METH_VARARGS, NULL},
	 { (char *)"VectorElement___isub__", _wrap_VectorElement___isub__, METH_VARARGS, NULL},
	 { (char *)"VectorElement___imul__", _wrap_VectorElement___imul__, METH_VARARGS, NULL},
	 { (char *)"VectorElement_swigregister", VectorElement_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Matrix", _wrap_new_Matrix, METH_VARARGS, NULL},
	 { (char *)"delete_Matrix", _wrap_delete_Matrix, METH_VARARGS, NULL},
	 { (char *)"Matrix_init", _wrap_Matrix_init, METH_VARARGS, NULL},
	 { (char *)"Matrix_size", _wrap_Matrix_size, METH_VARARGS, NULL},
	 { (char *)"Matrix_nz", _wrap_Matrix_nz, METH_VARARGS, NULL},
	 { (char *)"Matrix_nzsum", _wrap_Matrix_nzsum, METH_VARARGS, NULL},
	 { (char *)"Matrix_nzmax", _wrap_Matrix_nzmax, METH_VARARGS, NULL},
	 { (char *)"Matrix_add", _wrap_Matrix_add, METH_VARARGS, NULL},
	 { (char *)"Matrix_ident", _wrap_Matrix_ident, METH_VARARGS, NULL},
	 { (char *)"Matrix_mult", _wrap_Matrix_mult, METH_VARARGS, NULL},
	 { (char *)"Matrix_norm", _wrap_Matrix_norm, METH_VARARGS, NULL},
	 { (char *)"Matrix_apply", _wrap_Matrix_apply, METH_VARARGS, NULL},
	 { (char *)"Matrix_mat", _wrap_Matrix_mat, METH_VARARGS, NULL},
	 { (char *)"Matrix_disp", _wrap_Matrix_disp, METH_VARARGS, NULL},
	 { (char *)"Matrix___call__", _wrap_Matrix___call__, METH_VARARGS, NULL},
	 { (char *)"Matrix_getval", _wrap_Matrix_getval, METH_VARARGS, NULL},
	 { (char *)"Matrix_setval", _wrap_Matrix_setval, METH_VARARGS, NULL},
	 { (char *)"Matrix_addval", _wrap_Matrix_addval, METH_VARARGS, NULL},
	 { (char *)"Matrix_swigregister", Matrix_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MatrixElement", _wrap_new_MatrixElement, METH_VARARGS, NULL},
	 { (char *)"MatrixElement___iadd__", _wrap_MatrixElement___iadd__, METH_VARARGS, NULL},
	 { (char *)"MatrixElement___isub__", _wrap_MatrixElement___isub__, METH_VARARGS, NULL},
	 { (char *)"MatrixElement___imul__", _wrap_MatrixElement___imul__, METH_VARARGS, NULL},
	 { (char *)"MatrixElement_swigregister", MatrixElement_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_VirtualMatrix", _wrap_delete_VirtualMatrix, METH_VARARGS, NULL},
	 { (char *)"VirtualMatrix_init", _wrap_VirtualMatrix_init, METH_VARARGS, NULL},
	 { (char *)"VirtualMatrix_size", _wrap_VirtualMatrix_size, METH_VARARGS, NULL},
	 { (char *)"VirtualMatrix_mat", _wrap_VirtualMatrix_mat, METH_VARARGS, NULL},
	 { (char *)"VirtualMatrix_mult", _wrap_VirtualMatrix_mult, METH_VARARGS, NULL},
	 { (char *)"VirtualMatrix_disp", _wrap_VirtualMatrix_disp, METH_VARARGS, NULL},
	 { (char *)"VirtualMatrix_swigregister", VirtualMatrix_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_GMRES", _wrap_new_GMRES, METH_VARARGS, NULL},
	 { (char *)"delete_GMRES", _wrap_delete_GMRES, METH_VARARGS, NULL},
	 { (char *)"GMRES_swigregister", GMRES_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_LinearSolver", _wrap_delete_LinearSolver, METH_VARARGS, NULL},
	 { (char *)"LinearSolver_solve", _wrap_LinearSolver_solve, METH_VARARGS, NULL},
	 { (char *)"LinearSolver_swigregister", LinearSolver_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LU", _wrap_new_LU, METH_VARARGS, NULL},
	 { (char *)"delete_LU", _wrap_delete_LU, METH_VARARGS, NULL},
	 { (char *)"LU_solve", _wrap_LU_solve, METH_VARARGS, NULL},
	 { (char *)"LU_disp", _wrap_LU_disp, METH_VARARGS, NULL},
	 { (char *)"LU_swigregister", LU_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_KrylovSolver", _wrap_new_KrylovSolver, METH_VARARGS, NULL},
	 { (char *)"delete_KrylovSolver", _wrap_delete_KrylovSolver, METH_VARARGS, NULL},
	 { (char *)"KrylovSolver_solve", _wrap_KrylovSolver_solve, METH_VARARGS, NULL},
	 { (char *)"KrylovSolver_setType", _wrap_KrylovSolver_setType, METH_VARARGS, NULL},
	 { (char *)"KrylovSolver_setPreconditioner", _wrap_KrylovSolver_setPreconditioner, METH_VARARGS, NULL},
	 { (char *)"KrylovSolver_setReport", _wrap_KrylovSolver_setReport, METH_VARARGS, NULL},
	 { (char *)"KrylovSolver_setRtol", _wrap_KrylovSolver_setRtol, METH_VARARGS, NULL},
	 { (char *)"KrylovSolver_setAtol", _wrap_KrylovSolver_setAtol, METH_VARARGS, NULL},
	 { (char *)"KrylovSolver_setDtol", _wrap_KrylovSolver_setDtol, METH_VARARGS, NULL},
	 { (char *)"KrylovSolver_setMaxiter", _wrap_KrylovSolver_setMaxiter, METH_VARARGS, NULL},
	 { (char *)"KrylovSolver_setZeroPivot", _wrap_KrylovSolver_setZeroPivot, METH_VARARGS, NULL},
	 { (char *)"KrylovSolver_solver", _wrap_KrylovSolver_solver, METH_VARARGS, NULL},
	 { (char *)"KrylovSolver_disp", _wrap_KrylovSolver_disp, METH_VARARGS, NULL},
	 { (char *)"KrylovSolver_swigregister", KrylovSolver_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_EigenvalueSolver", _wrap_new_EigenvalueSolver, METH_VARARGS, NULL},
	 { (char *)"delete_EigenvalueSolver", _wrap_delete_EigenvalueSolver, METH_VARARGS, NULL},
	 { (char *)"EigenvalueSolver_eigen", _wrap_EigenvalueSolver_eigen, METH_VARARGS, NULL},
	 { (char *)"EigenvalueSolver_swigregister", EigenvalueSolver_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_Preconditioner", _wrap_delete_Preconditioner, METH_VARARGS, NULL},
	 { (char *)"Preconditioner_setup", _wrap_Preconditioner_setup, METH_VARARGS, NULL},
	 { (char *)"Preconditioner_solve", _wrap_Preconditioner_solve, METH_VARARGS, NULL},
	 { (char *)"Preconditioner_swigregister", Preconditioner_swigregister, METH_VARARGS, NULL},
	 { (char *)"PETScManager_init", _wrap_PETScManager_init, METH_VARARGS, NULL},
	 { (char *)"PETScManager_swigregister", PETScManager_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Function", _wrap_new_Function, METH_VARARGS, NULL},
	 { (char *)"delete_Function", _wrap_delete_Function, METH_VARARGS, NULL},
	 { (char *)"Function_eval", _wrap_Function_eval, METH_VARARGS, NULL},
	 { (char *)"Function___call__", _wrap_Function___call__, METH_VARARGS, NULL},
	 { (char *)"Function___getitem__", _wrap_Function___getitem__, METH_VARARGS, NULL},
	 { (char *)"Function_interpolate", _wrap_Function_interpolate, METH_VARARGS, NULL},
	 { (char *)"Function_vectordim", _wrap_Function_vectordim, METH_VARARGS, NULL},
	 { (char *)"Function_vector", _wrap_Function_vector, METH_VARARGS, NULL},
	 { (char *)"Function_mesh", _wrap_Function_mesh, METH_VARARGS, NULL},
	 { (char *)"Function_element", _wrap_Function_element, METH_VARARGS, NULL},
	 { (char *)"Function_attach", _wrap_Function_attach, METH_VARARGS, NULL},
	 { (char *)"Function_init", _wrap_Function_init, METH_VARARGS, NULL},
	 { (char *)"Function_type", _wrap_Function_type, METH_VARARGS, NULL},
	 { (char *)"disown_Function", _wrap_disown_Function, METH_VARARGS, NULL},
	 { (char *)"Function_swigregister", Function_swigregister, METH_VARARGS, NULL},
	 { (char *)"FEM_assemble", _wrap_FEM_assemble, METH_VARARGS, NULL},
	 { (char *)"FEM_applyBC", _wrap_FEM_applyBC, METH_VARARGS, NULL},
	 { (char *)"FEM_assembleBCresidual", _wrap_FEM_assembleBCresidual, METH_VARARGS, NULL},
	 { (char *)"FEM_size", _wrap_FEM_size, METH_VARARGS, NULL},
	 { (char *)"FEM_lump", _wrap_FEM_lump, METH_VARARGS, NULL},
	 { (char *)"FEM_disp", _wrap_FEM_disp, METH_VARARGS, NULL},
	 { (char *)"FEM_swigregister", FEM_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_FiniteElement", _wrap_delete_FiniteElement, METH_VARARGS, NULL},
	 { (char *)"FiniteElement_spacedim", _wrap_FiniteElement_spacedim, METH_VARARGS, NULL},
	 { (char *)"FiniteElement_shapedim", _wrap_FiniteElement_shapedim, METH_VARARGS, NULL},
	 { (char *)"FiniteElement_tensordim", _wrap_FiniteElement_tensordim, METH_VARARGS, NULL},
	 { (char *)"FiniteElement_elementdim", _wrap_FiniteElement_elementdim, METH_VARARGS, NULL},
	 { (char *)"FiniteElement_rank", _wrap_FiniteElement_rank, METH_VARARGS, NULL},
	 { (char *)"FiniteElement_nodemap", _wrap_FiniteElement_nodemap, METH_VARARGS, NULL},
	 { (char *)"FiniteElement_pointmap", _wrap_FiniteElement_pointmap, METH_VARARGS, NULL},
	 { (char *)"FiniteElement_vertexeval", _wrap_FiniteElement_vertexeval, METH_VARARGS, NULL},
	 { (char *)"FiniteElement_spec", _wrap_FiniteElement_spec, METH_VARARGS, NULL},
	 { (char *)"FiniteElement_makeElement", _wrap_FiniteElement_makeElement, METH_VARARGS, NULL},
	 { (char *)"FiniteElement_disp", _wrap_FiniteElement_disp, METH_VARARGS, NULL},
	 { (char *)"FiniteElement_swigregister", FiniteElement_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_AffineMap", _wrap_new_AffineMap, METH_VARARGS, NULL},
	 { (char *)"delete_AffineMap", _wrap_delete_AffineMap, METH_VARARGS, NULL},
	 { (char *)"AffineMap_update", _wrap_AffineMap_update, METH_VARARGS, NULL},
	 { (char *)"AffineMap___call__", _wrap_AffineMap___call__, METH_VARARGS, NULL},
	 { (char *)"AffineMap_cell", _wrap_AffineMap_cell, METH_VARARGS, NULL},
	 { (char *)"AffineMap_det_set", _wrap_AffineMap_det_set, METH_VARARGS, NULL},
	 { (char *)"AffineMap_det_get", _wrap_AffineMap_det_get, METH_VARARGS, NULL},
	 { (char *)"AffineMap_f00_set", _wrap_AffineMap_f00_set, METH_VARARGS, NULL},
	 { (char *)"AffineMap_f00_get", _wrap_AffineMap_f00_get, METH_VARARGS, NULL},
	 { (char *)"AffineMap_f01_set", _wrap_AffineMap_f01_set, METH_VARARGS, NULL},
	 { (char *)"AffineMap_f01_get", _wrap_AffineMap_f01_get, METH_VARARGS, NULL},
	 { (char *)"AffineMap_f02_set", _wrap_AffineMap_f02_set, METH_VARARGS, NULL},
	 { (char *)"AffineMap_f02_get", _wrap_AffineMap_f02_get, METH_VARARGS, NULL},
	 { (char *)"AffineMap_f10_set", _wrap_AffineMap_f10_set, METH_VARARGS, NULL},
	 { (char *)"AffineMap_f10_get", _wrap_AffineMap_f10_get, METH_VARARGS, NULL},
	 { (char *)"AffineMap_f11_set", _wrap_AffineMap_f11_set, METH_VARARGS, NULL},
	 { (char *)"AffineMap_f11_get", _wrap_AffineMap_f11_get, METH_VARARGS, NULL},
	 { (char *)"AffineMap_f12_set", _wrap_AffineMap_f12_set, METH_VARARGS, NULL},
	 { (char *)"AffineMap_f12_get", _wrap_AffineMap_f12_get, METH_VARARGS, NULL},
	 { (char *)"AffineMap_f20_set", _wrap_AffineMap_f20_set, METH_VARARGS, NULL},
	 { (char *)"AffineMap_f20_get", _wrap_AffineMap_f20_get, METH_VARARGS, NULL},
	 { (char *)"AffineMap_f21_set", _wrap_AffineMap_f21_set, METH_VARARGS, NULL},
	 { (char *)"AffineMap_f21_get", _wrap_AffineMap_f21_get, METH_VARARGS, NULL},
	 { (char *)"AffineMap_f22_set", _wrap_AffineMap_f22_set, METH_VARARGS, NULL},
	 { (char *)"AffineMap_f22_get", _wrap_AffineMap_f22_get, METH_VARARGS, NULL},
	 { (char *)"AffineMap_g00_set", _wrap_AffineMap_g00_set, METH_VARARGS, NULL},
	 { (char *)"AffineMap_g00_get", _wrap_AffineMap_g00_get, METH_VARARGS, NULL},
	 { (char *)"AffineMap_g01_set", _wrap_AffineMap_g01_set, METH_VARARGS, NULL},
	 { (char *)"AffineMap_g01_get", _wrap_AffineMap_g01_get, METH_VARARGS, NULL},
	 { (char *)"AffineMap_g02_set", _wrap_AffineMap_g02_set, METH_VARARGS, NULL},
	 { (char *)"AffineMap_g02_get", _wrap_AffineMap_g02_get, METH_VARARGS, NULL},
	 { (char *)"AffineMap_g10_set", _wrap_AffineMap_g10_set, METH_VARARGS, NULL},
	 { (char *)"AffineMap_g10_get", _wrap_AffineMap_g10_get, METH_VARARGS, NULL},
	 { (char *)"AffineMap_g11_set", _wrap_AffineMap_g11_set, METH_VARARGS, NULL},
	 { (char *)"AffineMap_g11_get", _wrap_AffineMap_g11_get, METH_VARARGS, NULL},
	 { (char *)"AffineMap_g12_set", _wrap_AffineMap_g12_set, METH_VARARGS, NULL},
	 { (char *)"AffineMap_g12_get", _wrap_AffineMap_g12_get, METH_VARARGS, NULL},
	 { (char *)"AffineMap_g20_set", _wrap_AffineMap_g20_set, METH_VARARGS, NULL},
	 { (char *)"AffineMap_g20_get", _wrap_AffineMap_g20_get, METH_VARARGS, NULL},
	 { (char *)"AffineMap_g21_set", _wrap_AffineMap_g21_set, METH_VARARGS, NULL},
	 { (char *)"AffineMap_g21_get", _wrap_AffineMap_g21_get, METH_VARARGS, NULL},
	 { (char *)"AffineMap_g22_set", _wrap_AffineMap_g22_set, METH_VARARGS, NULL},
	 { (char *)"AffineMap_g22_get", _wrap_AffineMap_g22_get, METH_VARARGS, NULL},
	 { (char *)"AffineMap_swigregister", AffineMap_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BoundaryValue", _wrap_new_BoundaryValue, METH_VARARGS, NULL},
	 { (char *)"delete_BoundaryValue", _wrap_delete_BoundaryValue, METH_VARARGS, NULL},
	 { (char *)"BoundaryValue_set", _wrap_BoundaryValue_set, METH_VARARGS, NULL},
	 { (char *)"BoundaryValue_swigregister", BoundaryValue_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BoundaryCondition", _wrap_new_BoundaryCondition, METH_VARARGS, NULL},
	 { (char *)"delete_BoundaryCondition", _wrap_delete_BoundaryCondition, METH_VARARGS, NULL},
	 { (char *)"BoundaryCondition_eval", _wrap_BoundaryCondition_eval, METH_VARARGS, NULL},
	 { (char *)"disown_BoundaryCondition", _wrap_disown_BoundaryCondition, METH_VARARGS, NULL},
	 { (char *)"BoundaryCondition_swigregister", BoundaryCondition_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Form", _wrap_new_Form, METH_VARARGS, NULL},
	 { (char *)"delete_Form", _wrap_delete_Form, METH_VARARGS, NULL},
	 { (char *)"Form_update", _wrap_Form_update, METH_VARARGS, NULL},
	 { (char *)"Form_swigregister", Form_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BilinearForm", _wrap_new_BilinearForm, METH_VARARGS, NULL},
	 { (char *)"delete_BilinearForm", _wrap_delete_BilinearForm, METH_VARARGS, NULL},
	 { (char *)"BilinearForm_eval", _wrap_BilinearForm_eval, METH_VARARGS, NULL},
	 { (char *)"BilinearForm_test", _wrap_BilinearForm_test, METH_VARARGS, NULL},
	 { (char *)"BilinearForm_trial", _wrap_BilinearForm_trial, METH_VARARGS, NULL},
	 { (char *)"BilinearForm_swigregister", BilinearForm_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LinearForm", _wrap_new_LinearForm, METH_VARARGS, NULL},
	 { (char *)"delete_LinearForm", _wrap_delete_LinearForm, METH_VARARGS, NULL},
	 { (char *)"LinearForm_eval", _wrap_LinearForm_eval, METH_VARARGS, NULL},
	 { (char *)"LinearForm_test", _wrap_LinearForm_test, METH_VARARGS, NULL},
	 { (char *)"LinearForm_swigregister", LinearForm_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Mesh", _wrap_new_Mesh, METH_VARARGS, NULL},
	 { (char *)"delete_Mesh", _wrap_delete_Mesh, METH_VARARGS, NULL},
	 { (char *)"Mesh_merge", _wrap_Mesh_merge, METH_VARARGS, NULL},
	 { (char *)"Mesh_init", _wrap_Mesh_init, METH_VARARGS, NULL},
	 { (char *)"Mesh_clear", _wrap_Mesh_clear, METH_VARARGS, NULL},
	 { (char *)"Mesh_numSpaceDim", _wrap_Mesh_numSpaceDim, METH_VARARGS, NULL},
	 { (char *)"Mesh_numVertices", _wrap_Mesh_numVertices, METH_VARARGS, NULL},
	 { (char *)"Mesh_numCells", _wrap_Mesh_numCells, METH_VARARGS, NULL},
	 { (char *)"Mesh_numEdges", _wrap_Mesh_numEdges, METH_VARARGS, NULL},
	 { (char *)"Mesh_numFaces", _wrap_Mesh_numFaces, METH_VARARGS, NULL},
	 { (char *)"Mesh_createVertex", _wrap_Mesh_createVertex, METH_VARARGS, NULL},
	 { (char *)"Mesh_createCell", _wrap_Mesh_createCell, METH_VARARGS, NULL},
	 { (char *)"Mesh_createEdge", _wrap_Mesh_createEdge, METH_VARARGS, NULL},
	 { (char *)"Mesh_createFace", _wrap_Mesh_createFace, METH_VARARGS, NULL},
	 { (char *)"Mesh_remove", _wrap_Mesh_remove, METH_VARARGS, NULL},
	 { (char *)"Mesh_type", _wrap_Mesh_type, METH_VARARGS, NULL},
	 { (char *)"Mesh_vertex", _wrap_Mesh_vertex, METH_VARARGS, NULL},
	 { (char *)"Mesh_cell", _wrap_Mesh_cell, METH_VARARGS, NULL},
	 { (char *)"Mesh_edge", _wrap_Mesh_edge, METH_VARARGS, NULL},
	 { (char *)"Mesh_face", _wrap_Mesh_face, METH_VARARGS, NULL},
	 { (char *)"Mesh_boundary", _wrap_Mesh_boundary, METH_VARARGS, NULL},
	 { (char *)"Mesh_refine", _wrap_Mesh_refine, METH_VARARGS, NULL},
	 { (char *)"Mesh_refineUniformly", _wrap_Mesh_refineUniformly, METH_VARARGS, NULL},
	 { (char *)"Mesh_parent", _wrap_Mesh_parent, METH_VARARGS, NULL},
	 { (char *)"Mesh_child", _wrap_Mesh_child, METH_VARARGS, NULL},
	 { (char *)"Mesh___eq__", _wrap_Mesh___eq__, METH_VARARGS, NULL},
	 { (char *)"Mesh___ne__", _wrap_Mesh___ne__, METH_VARARGS, NULL},
	 { (char *)"Mesh_disp", _wrap_Mesh_disp, METH_VARARGS, NULL},
	 { (char *)"Mesh_swigregister", Mesh_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Boundary", _wrap_new_Boundary, METH_VARARGS, NULL},
	 { (char *)"delete_Boundary", _wrap_delete_Boundary, METH_VARARGS, NULL},
	 { (char *)"Boundary_numVertices", _wrap_Boundary_numVertices, METH_VARARGS, NULL},
	 { (char *)"Boundary_numEdges", _wrap_Boundary_numEdges, METH_VARARGS, NULL},
	 { (char *)"Boundary_numFaces", _wrap_Boundary_numFaces, METH_VARARGS, NULL},
	 { (char *)"Boundary_swigregister", Boundary_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Point", _wrap_new_Point, METH_VARARGS, NULL},
	 { (char *)"Point_dist", _wrap_Point_dist, METH_VARARGS, NULL},
	 { (char *)"Point_norm", _wrap_Point_norm, METH_VARARGS, NULL},
	 { (char *)"Point_midpoint", _wrap_Point_midpoint, METH_VARARGS, NULL},
	 { (char *)"Point___add__", _wrap_Point___add__, METH_VARARGS, NULL},
	 { (char *)"Point___sub__", _wrap_Point___sub__, METH_VARARGS, NULL},
	 { (char *)"Point___mul__", _wrap_Point___mul__, METH_VARARGS, NULL},
	 { (char *)"Point___iadd__", _wrap_Point___iadd__, METH_VARARGS, NULL},
	 { (char *)"Point___isub__", _wrap_Point___isub__, METH_VARARGS, NULL},
	 { (char *)"Point___imul__", _wrap_Point___imul__, METH_VARARGS, NULL},
	 { (char *)"Point___idiv__", _wrap_Point___idiv__, METH_VARARGS, NULL},
	 { (char *)"Point_cross", _wrap_Point_cross, METH_VARARGS, NULL},
	 { (char *)"Point_x_set", _wrap_Point_x_set, METH_VARARGS, NULL},
	 { (char *)"Point_x_get", _wrap_Point_x_get, METH_VARARGS, NULL},
	 { (char *)"Point_y_set", _wrap_Point_y_set, METH_VARARGS, NULL},
	 { (char *)"Point_y_get", _wrap_Point_y_get, METH_VARARGS, NULL},
	 { (char *)"Point_z_set", _wrap_Point_z_set, METH_VARARGS, NULL},
	 { (char *)"Point_z_get", _wrap_Point_z_get, METH_VARARGS, NULL},
	 { (char *)"Point_swigregister", Point_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Vertex", _wrap_new_Vertex, METH_VARARGS, NULL},
	 { (char *)"delete_Vertex", _wrap_delete_Vertex, METH_VARARGS, NULL},
	 { (char *)"Vertex_clear", _wrap_Vertex_clear, METH_VARARGS, NULL},
	 { (char *)"Vertex_id", _wrap_Vertex_id, METH_VARARGS, NULL},
	 { (char *)"Vertex_numVertexNeighbors", _wrap_Vertex_numVertexNeighbors, METH_VARARGS, NULL},
	 { (char *)"Vertex_numCellNeighbors", _wrap_Vertex_numCellNeighbors, METH_VARARGS, NULL},
	 { (char *)"Vertex_numEdgeNeighbors", _wrap_Vertex_numEdgeNeighbors, METH_VARARGS, NULL},
	 { (char *)"Vertex_vertex", _wrap_Vertex_vertex, METH_VARARGS, NULL},
	 { (char *)"Vertex_cell", _wrap_Vertex_cell, METH_VARARGS, NULL},
	 { (char *)"Vertex_edge", _wrap_Vertex_edge, METH_VARARGS, NULL},
	 { (char *)"Vertex_parent", _wrap_Vertex_parent, METH_VARARGS, NULL},
	 { (char *)"Vertex_child", _wrap_Vertex_child, METH_VARARGS, NULL},
	 { (char *)"Vertex_mesh", _wrap_Vertex_mesh, METH_VARARGS, NULL},
	 { (char *)"Vertex_coord", _wrap_Vertex_coord, METH_VARARGS, NULL},
	 { (char *)"Vertex_midpoint", _wrap_Vertex_midpoint, METH_VARARGS, NULL},
	 { (char *)"Vertex_dist", _wrap_Vertex_dist, METH_VARARGS, NULL},
	 { (char *)"Vertex_neighbor", _wrap_Vertex_neighbor, METH_VARARGS, NULL},
	 { (char *)"Vertex___ne__", _wrap_Vertex___ne__, METH_VARARGS, NULL},
	 { (char *)"Vertex___eq__", _wrap_Vertex___eq__, METH_VARARGS, NULL},
	 { (char *)"Vertex___lt__", _wrap_Vertex___lt__, METH_VARARGS, NULL},
	 { (char *)"Vertex___le__", _wrap_Vertex___le__, METH_VARARGS, NULL},
	 { (char *)"Vertex___gt__", _wrap_Vertex___gt__, METH_VARARGS, NULL},
	 { (char *)"Vertex___ge__", _wrap_Vertex___ge__, METH_VARARGS, NULL},
	 { (char *)"Vertex_nbids_set", _wrap_Vertex_nbids_set, METH_VARARGS, NULL},
	 { (char *)"Vertex_nbids_get", _wrap_Vertex_nbids_get, METH_VARARGS, NULL},
	 { (char *)"Vertex_swigregister", Vertex_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Edge", _wrap_new_Edge, METH_VARARGS, NULL},
	 { (char *)"delete_Edge", _wrap_delete_Edge, METH_VARARGS, NULL},
	 { (char *)"Edge_clear", _wrap_Edge_clear, METH_VARARGS, NULL},
	 { (char *)"Edge_id", _wrap_Edge_id, METH_VARARGS, NULL},
	 { (char *)"Edge_numCellNeighbors", _wrap_Edge_numCellNeighbors, METH_VARARGS, NULL},
	 { (char *)"Edge_vertex", _wrap_Edge_vertex, METH_VARARGS, NULL},
	 { (char *)"Edge_cell", _wrap_Edge_cell, METH_VARARGS, NULL},
	 { (char *)"Edge_mesh", _wrap_Edge_mesh, METH_VARARGS, NULL},
	 { (char *)"Edge_coord", _wrap_Edge_coord, METH_VARARGS, NULL},
	 { (char *)"Edge_length", _wrap_Edge_length, METH_VARARGS, NULL},
	 { (char *)"Edge_midpoint", _wrap_Edge_midpoint, METH_VARARGS, NULL},
	 { (char *)"Edge_equals", _wrap_Edge_equals, METH_VARARGS, NULL},
	 { (char *)"Edge_contains", _wrap_Edge_contains, METH_VARARGS, NULL},
	 { (char *)"Edge_ebids_set", _wrap_Edge_ebids_set, METH_VARARGS, NULL},
	 { (char *)"Edge_ebids_get", _wrap_Edge_ebids_get, METH_VARARGS, NULL},
	 { (char *)"Edge_swigregister", Edge_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Triangle", _wrap_new_Triangle, METH_VARARGS, NULL},
	 { (char *)"Triangle_numVertices", _wrap_Triangle_numVertices, METH_VARARGS, NULL},
	 { (char *)"Triangle_numEdges", _wrap_Triangle_numEdges, METH_VARARGS, NULL},
	 { (char *)"Triangle_numFaces", _wrap_Triangle_numFaces, METH_VARARGS, NULL},
	 { (char *)"Triangle_numBoundaries", _wrap_Triangle_numBoundaries, METH_VARARGS, NULL},
	 { (char *)"Triangle_type", _wrap_Triangle_type, METH_VARARGS, NULL},
	 { (char *)"Triangle_orientation", _wrap_Triangle_orientation, METH_VARARGS, NULL},
	 { (char *)"Triangle_volume", _wrap_Triangle_volume, METH_VARARGS, NULL},
	 { (char *)"Triangle_diameter", _wrap_Triangle_diameter, METH_VARARGS, NULL},
	 { (char *)"Triangle_edgeAlignment", _wrap_Triangle_edgeAlignment, METH_VARARGS, NULL},
	 { (char *)"Triangle_faceAlignment", _wrap_Triangle_faceAlignment, METH_VARARGS, NULL},
	 { (char *)"Triangle_swigregister", Triangle_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Tetrahedron", _wrap_new_Tetrahedron, METH_VARARGS, NULL},
	 { (char *)"Tetrahedron_numVertices", _wrap_Tetrahedron_numVertices, METH_VARARGS, NULL},
	 { (char *)"Tetrahedron_numEdges", _wrap_Tetrahedron_numEdges, METH_VARARGS, NULL},
	 { (char *)"Tetrahedron_numFaces", _wrap_Tetrahedron_numFaces, METH_VARARGS, NULL},
	 { (char *)"Tetrahedron_numBoundaries", _wrap_Tetrahedron_numBoundaries, METH_VARARGS, NULL},
	 { (char *)"Tetrahedron_type", _wrap_Tetrahedron_type, METH_VARARGS, NULL},
	 { (char *)"Tetrahedron_orientation", _wrap_Tetrahedron_orientation, METH_VARARGS, NULL},
	 { (char *)"Tetrahedron_volume", _wrap_Tetrahedron_volume, METH_VARARGS, NULL},
	 { (char *)"Tetrahedron_diameter", _wrap_Tetrahedron_diameter, METH_VARARGS, NULL},
	 { (char *)"Tetrahedron_edgeAlignment", _wrap_Tetrahedron_edgeAlignment, METH_VARARGS, NULL},
	 { (char *)"Tetrahedron_faceAlignment", _wrap_Tetrahedron_faceAlignment, METH_VARARGS, NULL},
	 { (char *)"Tetrahedron_swigregister", Tetrahedron_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Cell", _wrap_new_Cell, METH_VARARGS, NULL},
	 { (char *)"delete_Cell", _wrap_delete_Cell, METH_VARARGS, NULL},
	 { (char *)"Cell_clear", _wrap_Cell_clear, METH_VARARGS, NULL},
	 { (char *)"Cell_id", _wrap_Cell_id, METH_VARARGS, NULL},
	 { (char *)"Cell_type", _wrap_Cell_type, METH_VARARGS, NULL},
	 { (char *)"Cell_orientation", _wrap_Cell_orientation, METH_VARARGS, NULL},
	 { (char *)"Cell_numVertices", _wrap_Cell_numVertices, METH_VARARGS, NULL},
	 { (char *)"Cell_numEdges", _wrap_Cell_numEdges, METH_VARARGS, NULL},
	 { (char *)"Cell_numFaces", _wrap_Cell_numFaces, METH_VARARGS, NULL},
	 { (char *)"Cell_numBoundaries", _wrap_Cell_numBoundaries, METH_VARARGS, NULL},
	 { (char *)"Cell_numCellNeighbors", _wrap_Cell_numCellNeighbors, METH_VARARGS, NULL},
	 { (char *)"Cell_numVertexNeighbors", _wrap_Cell_numVertexNeighbors, METH_VARARGS, NULL},
	 { (char *)"Cell_numChildren", _wrap_Cell_numChildren, METH_VARARGS, NULL},
	 { (char *)"Cell_vertex", _wrap_Cell_vertex, METH_VARARGS, NULL},
	 { (char *)"Cell_edge", _wrap_Cell_edge, METH_VARARGS, NULL},
	 { (char *)"Cell_face", _wrap_Cell_face, METH_VARARGS, NULL},
	 { (char *)"Cell_neighbor", _wrap_Cell_neighbor, METH_VARARGS, NULL},
	 { (char *)"Cell_parent", _wrap_Cell_parent, METH_VARARGS, NULL},
	 { (char *)"Cell_child", _wrap_Cell_child, METH_VARARGS, NULL},
	 { (char *)"Cell_mesh", _wrap_Cell_mesh, METH_VARARGS, NULL},
	 { (char *)"Cell_coord", _wrap_Cell_coord, METH_VARARGS, NULL},
	 { (char *)"Cell_midpoint", _wrap_Cell_midpoint, METH_VARARGS, NULL},
	 { (char *)"Cell_vertexID", _wrap_Cell_vertexID, METH_VARARGS, NULL},
	 { (char *)"Cell_edgeID", _wrap_Cell_edgeID, METH_VARARGS, NULL},
	 { (char *)"Cell_faceID", _wrap_Cell_faceID, METH_VARARGS, NULL},
	 { (char *)"Cell_volume", _wrap_Cell_volume, METH_VARARGS, NULL},
	 { (char *)"Cell_diameter", _wrap_Cell_diameter, METH_VARARGS, NULL},
	 { (char *)"Cell_edgeAlignment", _wrap_Cell_edgeAlignment, METH_VARARGS, NULL},
	 { (char *)"Cell_faceAlignment", _wrap_Cell_faceAlignment, METH_VARARGS, NULL},
	 { (char *)"Cell___eq__", _wrap_Cell___eq__, METH_VARARGS, NULL},
	 { (char *)"Cell___ne__", _wrap_Cell___ne__, METH_VARARGS, NULL},
	 { (char *)"Cell_mark", _wrap_Cell_mark, METH_VARARGS, NULL},
	 { (char *)"Cell_swigregister", Cell_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Face", _wrap_new_Face, METH_VARARGS, NULL},
	 { (char *)"delete_Face", _wrap_delete_Face, METH_VARARGS, NULL},
	 { (char *)"Face_clear", _wrap_Face_clear, METH_VARARGS, NULL},
	 { (char *)"Face_id", _wrap_Face_id, METH_VARARGS, NULL},
	 { (char *)"Face_numEdges", _wrap_Face_numEdges, METH_VARARGS, NULL},
	 { (char *)"Face_numCellNeighbors", _wrap_Face_numCellNeighbors, METH_VARARGS, NULL},
	 { (char *)"Face_edge", _wrap_Face_edge, METH_VARARGS, NULL},
	 { (char *)"Face_cell", _wrap_Face_cell, METH_VARARGS, NULL},
	 { (char *)"Face_mesh", _wrap_Face_mesh, METH_VARARGS, NULL},
	 { (char *)"Face_equals", _wrap_Face_equals, METH_VARARGS, NULL},
	 { (char *)"Face_contains", _wrap_Face_contains, METH_VARARGS, NULL},
	 { (char *)"Face_fbids_set", _wrap_Face_fbids_set, METH_VARARGS, NULL},
	 { (char *)"Face_fbids_get", _wrap_Face_fbids_get, METH_VARARGS, NULL},
	 { (char *)"Face_swigregister", Face_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_VertexIterator", _wrap_new_VertexIterator, METH_VARARGS, NULL},
	 { (char *)"delete_VertexIterator", _wrap_delete_VertexIterator, METH_VARARGS, NULL},
	 { (char *)"VertexIterator_increment", _wrap_VertexIterator_increment, METH_VARARGS, NULL},
	 { (char *)"VertexIterator_end", _wrap_VertexIterator_end, METH_VARARGS, NULL},
	 { (char *)"VertexIterator_last", _wrap_VertexIterator_last, METH_VARARGS, NULL},
	 { (char *)"VertexIterator_index", _wrap_VertexIterator_index, METH_VARARGS, NULL},
	 { (char *)"VertexIterator___ref__", _wrap_VertexIterator___ref__, METH_VARARGS, NULL},
	 { (char *)"VertexIterator___deref__", _wrap_VertexIterator___deref__, METH_VARARGS, NULL},
	 { (char *)"VertexIterator___eq__", _wrap_VertexIterator___eq__, METH_VARARGS, NULL},
	 { (char *)"VertexIterator___ne__", _wrap_VertexIterator___ne__, METH_VARARGS, NULL},
	 { (char *)"VertexIterator_clear", _wrap_VertexIterator_clear, METH_VARARGS, NULL},
	 { (char *)"VertexIterator_id", _wrap_VertexIterator_id, METH_VARARGS, NULL},
	 { (char *)"VertexIterator_numVertexNeighbors", _wrap_VertexIterator_numVertexNeighbors, METH_VARARGS, NULL},
	 { (char *)"VertexIterator_numCellNeighbors", _wrap_VertexIterator_numCellNeighbors, METH_VARARGS, NULL},
	 { (char *)"VertexIterator_numEdgeNeighbors", _wrap_VertexIterator_numEdgeNeighbors, METH_VARARGS, NULL},
	 { (char *)"VertexIterator_vertex", _wrap_VertexIterator_vertex, METH_VARARGS, NULL},
	 { (char *)"VertexIterator_cell", _wrap_VertexIterator_cell, METH_VARARGS, NULL},
	 { (char *)"VertexIterator_edge", _wrap_VertexIterator_edge, METH_VARARGS, NULL},
	 { (char *)"VertexIterator_parent", _wrap_VertexIterator_parent, METH_VARARGS, NULL},
	 { (char *)"VertexIterator_child", _wrap_VertexIterator_child, METH_VARARGS, NULL},
	 { (char *)"VertexIterator_mesh", _wrap_VertexIterator_mesh, METH_VARARGS, NULL},
	 { (char *)"VertexIterator_coord", _wrap_VertexIterator_coord, METH_VARARGS, NULL},
	 { (char *)"VertexIterator_midpoint", _wrap_VertexIterator_midpoint, METH_VARARGS, NULL},
	 { (char *)"VertexIterator_dist", _wrap_VertexIterator_dist, METH_VARARGS, NULL},
	 { (char *)"VertexIterator_neighbor", _wrap_VertexIterator_neighbor, METH_VARARGS, NULL},
	 { (char *)"VertexIterator___lt__", _wrap_VertexIterator___lt__, METH_VARARGS, NULL},
	 { (char *)"VertexIterator___le__", _wrap_VertexIterator___le__, METH_VARARGS, NULL},
	 { (char *)"VertexIterator___gt__", _wrap_VertexIterator___gt__, METH_VARARGS, NULL},
	 { (char *)"VertexIterator___ge__", _wrap_VertexIterator___ge__, METH_VARARGS, NULL},
	 { (char *)"VertexIterator_nbids_set", _wrap_VertexIterator_nbids_set, METH_VARARGS, NULL},
	 { (char *)"VertexIterator_nbids_get", _wrap_VertexIterator_nbids_get, METH_VARARGS, NULL},
	 { (char *)"VertexIterator_swigregister", VertexIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CellIterator", _wrap_new_CellIterator, METH_VARARGS, NULL},
	 { (char *)"delete_CellIterator", _wrap_delete_CellIterator, METH_VARARGS, NULL},
	 { (char *)"CellIterator_increment", _wrap_CellIterator_increment, METH_VARARGS, NULL},
	 { (char *)"CellIterator_end", _wrap_CellIterator_end, METH_VARARGS, NULL},
	 { (char *)"CellIterator_last", _wrap_CellIterator_last, METH_VARARGS, NULL},
	 { (char *)"CellIterator_index", _wrap_CellIterator_index, METH_VARARGS, NULL},
	 { (char *)"CellIterator___ref__", _wrap_CellIterator___ref__, METH_VARARGS, NULL},
	 { (char *)"CellIterator___deref__", _wrap_CellIterator___deref__, METH_VARARGS, NULL},
	 { (char *)"CellIterator___eq__", _wrap_CellIterator___eq__, METH_VARARGS, NULL},
	 { (char *)"CellIterator___ne__", _wrap_CellIterator___ne__, METH_VARARGS, NULL},
	 { (char *)"CellIterator_clear", _wrap_CellIterator_clear, METH_VARARGS, NULL},
	 { (char *)"CellIterator_id", _wrap_CellIterator_id, METH_VARARGS, NULL},
	 { (char *)"CellIterator_type", _wrap_CellIterator_type, METH_VARARGS, NULL},
	 { (char *)"CellIterator_orientation", _wrap_CellIterator_orientation, METH_VARARGS, NULL},
	 { (char *)"CellIterator_numVertices", _wrap_CellIterator_numVertices, METH_VARARGS, NULL},
	 { (char *)"CellIterator_numEdges", _wrap_CellIterator_numEdges, METH_VARARGS, NULL},
	 { (char *)"CellIterator_numFaces", _wrap_CellIterator_numFaces, METH_VARARGS, NULL},
	 { (char *)"CellIterator_numBoundaries", _wrap_CellIterator_numBoundaries, METH_VARARGS, NULL},
	 { (char *)"CellIterator_numCellNeighbors", _wrap_CellIterator_numCellNeighbors, METH_VARARGS, NULL},
	 { (char *)"CellIterator_numVertexNeighbors", _wrap_CellIterator_numVertexNeighbors, METH_VARARGS, NULL},
	 { (char *)"CellIterator_numChildren", _wrap_CellIterator_numChildren, METH_VARARGS, NULL},
	 { (char *)"CellIterator_vertex", _wrap_CellIterator_vertex, METH_VARARGS, NULL},
	 { (char *)"CellIterator_edge", _wrap_CellIterator_edge, METH_VARARGS, NULL},
	 { (char *)"CellIterator_face", _wrap_CellIterator_face, METH_VARARGS, NULL},
	 { (char *)"CellIterator_neighbor", _wrap_CellIterator_neighbor, METH_VARARGS, NULL},
	 { (char *)"CellIterator_parent", _wrap_CellIterator_parent, METH_VARARGS, NULL},
	 { (char *)"CellIterator_child", _wrap_CellIterator_child, METH_VARARGS, NULL},
	 { (char *)"CellIterator_mesh", _wrap_CellIterator_mesh, METH_VARARGS, NULL},
	 { (char *)"CellIterator_coord", _wrap_CellIterator_coord, METH_VARARGS, NULL},
	 { (char *)"CellIterator_midpoint", _wrap_CellIterator_midpoint, METH_VARARGS, NULL},
	 { (char *)"CellIterator_vertexID", _wrap_CellIterator_vertexID, METH_VARARGS, NULL},
	 { (char *)"CellIterator_edgeID", _wrap_CellIterator_edgeID, METH_VARARGS, NULL},
	 { (char *)"CellIterator_faceID", _wrap_CellIterator_faceID, METH_VARARGS, NULL},
	 { (char *)"CellIterator_volume", _wrap_CellIterator_volume, METH_VARARGS, NULL},
	 { (char *)"CellIterator_diameter", _wrap_CellIterator_diameter, METH_VARARGS, NULL},
	 { (char *)"CellIterator_edgeAlignment", _wrap_CellIterator_edgeAlignment, METH_VARARGS, NULL},
	 { (char *)"CellIterator_faceAlignment", _wrap_CellIterator_faceAlignment, METH_VARARGS, NULL},
	 { (char *)"CellIterator_mark", _wrap_CellIterator_mark, METH_VARARGS, NULL},
	 { (char *)"CellIterator_swigregister", CellIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_EdgeIterator", _wrap_new_EdgeIterator, METH_VARARGS, NULL},
	 { (char *)"delete_EdgeIterator", _wrap_delete_EdgeIterator, METH_VARARGS, NULL},
	 { (char *)"EdgeIterator_increment", _wrap_EdgeIterator_increment, METH_VARARGS, NULL},
	 { (char *)"EdgeIterator_end", _wrap_EdgeIterator_end, METH_VARARGS, NULL},
	 { (char *)"EdgeIterator_last", _wrap_EdgeIterator_last, METH_VARARGS, NULL},
	 { (char *)"EdgeIterator_index", _wrap_EdgeIterator_index, METH_VARARGS, NULL},
	 { (char *)"EdgeIterator___ref__", _wrap_EdgeIterator___ref__, METH_VARARGS, NULL},
	 { (char *)"EdgeIterator___deref__", _wrap_EdgeIterator___deref__, METH_VARARGS, NULL},
	 { (char *)"EdgeIterator___eq__", _wrap_EdgeIterator___eq__, METH_VARARGS, NULL},
	 { (char *)"EdgeIterator___ne__", _wrap_EdgeIterator___ne__, METH_VARARGS, NULL},
	 { (char *)"EdgeIterator_clear", _wrap_EdgeIterator_clear, METH_VARARGS, NULL},
	 { (char *)"EdgeIterator_id", _wrap_EdgeIterator_id, METH_VARARGS, NULL},
	 { (char *)"EdgeIterator_numCellNeighbors", _wrap_EdgeIterator_numCellNeighbors, METH_VARARGS, NULL},
	 { (char *)"EdgeIterator_vertex", _wrap_EdgeIterator_vertex, METH_VARARGS, NULL},
	 { (char *)"EdgeIterator_cell", _wrap_EdgeIterator_cell, METH_VARARGS, NULL},
	 { (char *)"EdgeIterator_mesh", _wrap_EdgeIterator_mesh, METH_VARARGS, NULL},
	 { (char *)"EdgeIterator_coord", _wrap_EdgeIterator_coord, METH_VARARGS, NULL},
	 { (char *)"EdgeIterator_length", _wrap_EdgeIterator_length, METH_VARARGS, NULL},
	 { (char *)"EdgeIterator_midpoint", _wrap_EdgeIterator_midpoint, METH_VARARGS, NULL},
	 { (char *)"EdgeIterator_equals", _wrap_EdgeIterator_equals, METH_VARARGS, NULL},
	 { (char *)"EdgeIterator_contains", _wrap_EdgeIterator_contains, METH_VARARGS, NULL},
	 { (char *)"EdgeIterator_ebids_set", _wrap_EdgeIterator_ebids_set, METH_VARARGS, NULL},
	 { (char *)"EdgeIterator_ebids_get", _wrap_EdgeIterator_ebids_get, METH_VARARGS, NULL},
	 { (char *)"EdgeIterator_swigregister", EdgeIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FaceIterator", _wrap_new_FaceIterator, METH_VARARGS, NULL},
	 { (char *)"delete_FaceIterator", _wrap_delete_FaceIterator, METH_VARARGS, NULL},
	 { (char *)"FaceIterator_end", _wrap_FaceIterator_end, METH_VARARGS, NULL},
	 { (char *)"FaceIterator_last", _wrap_FaceIterator_last, METH_VARARGS, NULL},
	 { (char *)"FaceIterator_index", _wrap_FaceIterator_index, METH_VARARGS, NULL},
	 { (char *)"FaceIterator___ref__", _wrap_FaceIterator___ref__, METH_VARARGS, NULL},
	 { (char *)"FaceIterator___deref__", _wrap_FaceIterator___deref__, METH_VARARGS, NULL},
	 { (char *)"FaceIterator___eq__", _wrap_FaceIterator___eq__, METH_VARARGS, NULL},
	 { (char *)"FaceIterator___ne__", _wrap_FaceIterator___ne__, METH_VARARGS, NULL},
	 { (char *)"FaceIterator_clear", _wrap_FaceIterator_clear, METH_VARARGS, NULL},
	 { (char *)"FaceIterator_id", _wrap_FaceIterator_id, METH_VARARGS, NULL},
	 { (char *)"FaceIterator_numEdges", _wrap_FaceIterator_numEdges, METH_VARARGS, NULL},
	 { (char *)"FaceIterator_numCellNeighbors", _wrap_FaceIterator_numCellNeighbors, METH_VARARGS, NULL},
	 { (char *)"FaceIterator_edge", _wrap_FaceIterator_edge, METH_VARARGS, NULL},
	 { (char *)"FaceIterator_cell", _wrap_FaceIterator_cell, METH_VARARGS, NULL},
	 { (char *)"FaceIterator_mesh", _wrap_FaceIterator_mesh, METH_VARARGS, NULL},
	 { (char *)"FaceIterator_equals", _wrap_FaceIterator_equals, METH_VARARGS, NULL},
	 { (char *)"FaceIterator_contains", _wrap_FaceIterator_contains, METH_VARARGS, NULL},
	 { (char *)"FaceIterator_fbids_set", _wrap_FaceIterator_fbids_set, METH_VARARGS, NULL},
	 { (char *)"FaceIterator_fbids_get", _wrap_FaceIterator_fbids_get, METH_VARARGS, NULL},
	 { (char *)"FaceIterator_swigregister", FaceIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MeshIterator", _wrap_new_MeshIterator, METH_VARARGS, NULL},
	 { (char *)"delete_MeshIterator", _wrap_delete_MeshIterator, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_end", _wrap_MeshIterator_end, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_index", _wrap_MeshIterator_index, METH_VARARGS, NULL},
	 { (char *)"MeshIterator___ref__", _wrap_MeshIterator___ref__, METH_VARARGS, NULL},
	 { (char *)"MeshIterator___deref__", _wrap_MeshIterator___deref__, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_merge", _wrap_MeshIterator_merge, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_init", _wrap_MeshIterator_init, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_clear", _wrap_MeshIterator_clear, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_numSpaceDim", _wrap_MeshIterator_numSpaceDim, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_numVertices", _wrap_MeshIterator_numVertices, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_numCells", _wrap_MeshIterator_numCells, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_numEdges", _wrap_MeshIterator_numEdges, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_numFaces", _wrap_MeshIterator_numFaces, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_createVertex", _wrap_MeshIterator_createVertex, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_createCell", _wrap_MeshIterator_createCell, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_createEdge", _wrap_MeshIterator_createEdge, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_createFace", _wrap_MeshIterator_createFace, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_remove", _wrap_MeshIterator_remove, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_type", _wrap_MeshIterator_type, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_vertex", _wrap_MeshIterator_vertex, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_cell", _wrap_MeshIterator_cell, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_edge", _wrap_MeshIterator_edge, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_face", _wrap_MeshIterator_face, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_boundary", _wrap_MeshIterator_boundary, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_refine", _wrap_MeshIterator_refine, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_refineUniformly", _wrap_MeshIterator_refineUniformly, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_parent", _wrap_MeshIterator_parent, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_child", _wrap_MeshIterator_child, METH_VARARGS, NULL},
	 { (char *)"MeshIterator___eq__", _wrap_MeshIterator___eq__, METH_VARARGS, NULL},
	 { (char *)"MeshIterator___ne__", _wrap_MeshIterator___ne__, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_disp", _wrap_MeshIterator_disp, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_rename", _wrap_MeshIterator_rename, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_name", _wrap_MeshIterator_name, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_label", _wrap_MeshIterator_label, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_number", _wrap_MeshIterator_number, METH_VARARGS, NULL},
	 { (char *)"MeshIterator_swigregister", MeshIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_UnitSquare", _wrap_new_UnitSquare, METH_VARARGS, NULL},
	 { (char *)"UnitSquare_swigregister", UnitSquare_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_UnitCube", _wrap_new_UnitCube, METH_VARARGS, NULL},
	 { (char *)"UnitCube_swigregister", UnitCube_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Dependencies", _wrap_new_Dependencies, METH_VARARGS, NULL},
	 { (char *)"delete_Dependencies", _wrap_delete_Dependencies, METH_VARARGS, NULL},
	 { (char *)"Dependencies_setsize", _wrap_Dependencies_setsize, METH_VARARGS, NULL},
	 { (char *)"Dependencies_set", _wrap_Dependencies_set, METH_VARARGS, NULL},
	 { (char *)"Dependencies_transp", _wrap_Dependencies_transp, METH_VARARGS, NULL},
	 { (char *)"Dependencies_detect", _wrap_Dependencies_detect, METH_VARARGS, NULL},
	 { (char *)"Dependencies_sparse", _wrap_Dependencies_sparse, METH_VARARGS, NULL},
	 { (char *)"Dependencies_disp", _wrap_Dependencies_disp, METH_VARARGS, NULL},
	 { (char *)"Dependencies_swigregister", Dependencies_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_Homotopy", _wrap_delete_Homotopy, METH_VARARGS, NULL},
	 { (char *)"Homotopy_solve", _wrap_Homotopy_solve, METH_VARARGS, NULL},
	 { (char *)"Homotopy_solutions", _wrap_Homotopy_solutions, METH_VARARGS, NULL},
	 { (char *)"Homotopy_z0", _wrap_Homotopy_z0, METH_VARARGS, NULL},
	 { (char *)"Homotopy_F", _wrap_Homotopy_F, METH_VARARGS, NULL},
	 { (char *)"Homotopy_JF", _wrap_Homotopy_JF, METH_VARARGS, NULL},
	 { (char *)"Homotopy_G", _wrap_Homotopy_G, METH_VARARGS, NULL},
	 { (char *)"Homotopy_JG", _wrap_Homotopy_JG, METH_VARARGS, NULL},
	 { (char *)"Homotopy_modify", _wrap_Homotopy_modify, METH_VARARGS, NULL},
	 { (char *)"Homotopy_verify", _wrap_Homotopy_verify, METH_VARARGS, NULL},
	 { (char *)"Homotopy_degree", _wrap_Homotopy_degree, METH_VARARGS, NULL},
	 { (char *)"Homotopy_swigregister", Homotopy_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_HomotopyJacobian", _wrap_new_HomotopyJacobian, METH_VARARGS, NULL},
	 { (char *)"delete_HomotopyJacobian", _wrap_delete_HomotopyJacobian, METH_VARARGS, NULL},
	 { (char *)"HomotopyJacobian_mult", _wrap_HomotopyJacobian_mult, METH_VARARGS, NULL},
	 { (char *)"HomotopyJacobian_swigregister", HomotopyJacobian_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_HomotopyODE", _wrap_new_HomotopyODE, METH_VARARGS, NULL},
	 { (char *)"delete_HomotopyODE", _wrap_delete_HomotopyODE, METH_VARARGS, NULL},
	 { (char *)"HomotopyODE_z0", _wrap_HomotopyODE_z0, METH_VARARGS, NULL},
	 { (char *)"HomotopyODE_f", _wrap_HomotopyODE_f, METH_VARARGS, NULL},
	 { (char *)"HomotopyODE_M", _wrap_HomotopyODE_M, METH_VARARGS, NULL},
	 { (char *)"HomotopyODE_J", _wrap_HomotopyODE_J, METH_VARARGS, NULL},
	 { (char *)"HomotopyODE_update", _wrap_HomotopyODE_update, METH_VARARGS, NULL},
	 { (char *)"HomotopyODE_state", _wrap_HomotopyODE_state, METH_VARARGS, NULL},
	 { (char *)"HomotopyODE_swigregister", HomotopyODE_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_Method", _wrap_delete_Method, METH_VARARGS, NULL},
	 { (char *)"Method_type", _wrap_Method_type, METH_VARARGS, NULL},
	 { (char *)"Method_degree", _wrap_Method_degree, METH_VARARGS, NULL},
	 { (char *)"Method_order", _wrap_Method_order, METH_VARARGS, NULL},
	 { (char *)"Method_nsize", _wrap_Method_nsize, METH_VARARGS, NULL},
	 { (char *)"Method_qsize", _wrap_Method_qsize, METH_VARARGS, NULL},
	 { (char *)"Method_npoint", _wrap_Method_npoint, METH_VARARGS, NULL},
	 { (char *)"Method_qpoint", _wrap_Method_qpoint, METH_VARARGS, NULL},
	 { (char *)"Method_nweight", _wrap_Method_nweight, METH_VARARGS, NULL},
	 { (char *)"Method_qweight", _wrap_Method_qweight, METH_VARARGS, NULL},
	 { (char *)"Method_eval", _wrap_Method_eval, METH_VARARGS, NULL},
	 { (char *)"Method_derivative", _wrap_Method_derivative, METH_VARARGS, NULL},
	 { (char *)"Method_update", _wrap_Method_update, METH_VARARGS, NULL},
	 { (char *)"Method_ueval", _wrap_Method_ueval, METH_VARARGS, NULL},
	 { (char *)"Method_residual", _wrap_Method_residual, METH_VARARGS, NULL},
	 { (char *)"Method_timestep", _wrap_Method_timestep, METH_VARARGS, NULL},
	 { (char *)"Method_error", _wrap_Method_error, METH_VARARGS, NULL},
	 { (char *)"Method_disp", _wrap_Method_disp, METH_VARARGS, NULL},
	 { (char *)"Method_swigregister", Method_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MonoAdaptiveFixedPointSolver", _wrap_new_MonoAdaptiveFixedPointSolver, METH_VARARGS, NULL},
	 { (char *)"delete_MonoAdaptiveFixedPointSolver", _wrap_delete_MonoAdaptiveFixedPointSolver, METH_VARARGS, NULL},
	 { (char *)"MonoAdaptiveFixedPointSolver_swigregister", MonoAdaptiveFixedPointSolver_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MonoAdaptiveJacobian", _wrap_new_MonoAdaptiveJacobian, METH_VARARGS, NULL},
	 { (char *)"delete_MonoAdaptiveJacobian", _wrap_delete_MonoAdaptiveJacobian, METH_VARARGS, NULL},
	 { (char *)"MonoAdaptiveJacobian_mult", _wrap_MonoAdaptiveJacobian_mult, METH_VARARGS, NULL},
	 { (char *)"MonoAdaptiveJacobian_swigregister", MonoAdaptiveJacobian_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MonoAdaptiveNewtonSolver", _wrap_new_MonoAdaptiveNewtonSolver, METH_VARARGS, NULL},
	 { (char *)"delete_MonoAdaptiveNewtonSolver", _wrap_delete_MonoAdaptiveNewtonSolver, METH_VARARGS, NULL},
	 { (char *)"MonoAdaptiveNewtonSolver_swigregister", MonoAdaptiveNewtonSolver_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MonoAdaptiveTimeSlab", _wrap_new_MonoAdaptiveTimeSlab, METH_VARARGS, NULL},
	 { (char *)"delete_MonoAdaptiveTimeSlab", _wrap_delete_MonoAdaptiveTimeSlab, METH_VARARGS, NULL},
	 { (char *)"MonoAdaptiveTimeSlab_build", _wrap_MonoAdaptiveTimeSlab_build, METH_VARARGS, NULL},
	 { (char *)"MonoAdaptiveTimeSlab_solve", _wrap_MonoAdaptiveTimeSlab_solve, METH_VARARGS, NULL},
	 { (char *)"MonoAdaptiveTimeSlab_check", _wrap_MonoAdaptiveTimeSlab_check, METH_VARARGS, NULL},
	 { (char *)"MonoAdaptiveTimeSlab_shift", _wrap_MonoAdaptiveTimeSlab_shift, METH_VARARGS, NULL},
	 { (char *)"MonoAdaptiveTimeSlab_sample", _wrap_MonoAdaptiveTimeSlab_sample, METH_VARARGS, NULL},
	 { (char *)"MonoAdaptiveTimeSlab_usample", _wrap_MonoAdaptiveTimeSlab_usample, METH_VARARGS, NULL},
	 { (char *)"MonoAdaptiveTimeSlab_ksample", _wrap_MonoAdaptiveTimeSlab_ksample, METH_VARARGS, NULL},
	 { (char *)"MonoAdaptiveTimeSlab_rsample", _wrap_MonoAdaptiveTimeSlab_rsample, METH_VARARGS, NULL},
	 { (char *)"MonoAdaptiveTimeSlab_disp", _wrap_MonoAdaptiveTimeSlab_disp, METH_VARARGS, NULL},
	 { (char *)"MonoAdaptiveTimeSlab_swigregister", MonoAdaptiveTimeSlab_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MonoAdaptivity", _wrap_new_MonoAdaptivity, METH_VARARGS, NULL},
	 { (char *)"delete_MonoAdaptivity", _wrap_delete_MonoAdaptivity, METH_VARARGS, NULL},
	 { (char *)"MonoAdaptivity_timestep", _wrap_MonoAdaptivity_timestep, METH_VARARGS, NULL},
	 { (char *)"MonoAdaptivity_update", _wrap_MonoAdaptivity_update, METH_VARARGS, NULL},
	 { (char *)"MonoAdaptivity_swigregister", MonoAdaptivity_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MultiAdaptiveFixedPointSolver", _wrap_new_MultiAdaptiveFixedPointSolver, METH_VARARGS, NULL},
	 { (char *)"delete_MultiAdaptiveFixedPointSolver", _wrap_delete_MultiAdaptiveFixedPointSolver, METH_VARARGS, NULL},
	 { (char *)"MultiAdaptiveFixedPointSolver_swigregister", MultiAdaptiveFixedPointSolver_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MultiAdaptivePreconditioner", _wrap_new_MultiAdaptivePreconditioner, METH_VARARGS, NULL},
	 { (char *)"delete_MultiAdaptivePreconditioner", _wrap_delete_MultiAdaptivePreconditioner, METH_VARARGS, NULL},
	 { (char *)"MultiAdaptivePreconditioner_solve", _wrap_MultiAdaptivePreconditioner_solve, METH_VARARGS, NULL},
	 { (char *)"MultiAdaptivePreconditioner_swigregister", MultiAdaptivePreconditioner_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MultiAdaptiveNewtonSolver", _wrap_new_MultiAdaptiveNewtonSolver, METH_VARARGS, NULL},
	 { (char *)"delete_MultiAdaptiveNewtonSolver", _wrap_delete_MultiAdaptiveNewtonSolver, METH_VARARGS, NULL},
	 { (char *)"MultiAdaptiveNewtonSolver_swigregister", MultiAdaptiveNewtonSolver_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MultiAdaptiveTimeSlab", _wrap_new_MultiAdaptiveTimeSlab, METH_VARARGS, NULL},
	 { (char *)"delete_MultiAdaptiveTimeSlab", _wrap_delete_MultiAdaptiveTimeSlab, METH_VARARGS, NULL},
	 { (char *)"MultiAdaptiveTimeSlab_build", _wrap_MultiAdaptiveTimeSlab_build, METH_VARARGS, NULL},
	 { (char *)"MultiAdaptiveTimeSlab_solve", _wrap_MultiAdaptiveTimeSlab_solve, METH_VARARGS, NULL},
	 { (char *)"MultiAdaptiveTimeSlab_check", _wrap_MultiAdaptiveTimeSlab_check, METH_VARARGS, NULL},
	 { (char *)"MultiAdaptiveTimeSlab_shift", _wrap_MultiAdaptiveTimeSlab_shift, METH_VARARGS, NULL},
	 { (char *)"MultiAdaptiveTimeSlab_reset", _wrap_MultiAdaptiveTimeSlab_reset, METH_VARARGS, NULL},
	 { (char *)"MultiAdaptiveTimeSlab_sample", _wrap_MultiAdaptiveTimeSlab_sample, METH_VARARGS, NULL},
	 { (char *)"MultiAdaptiveTimeSlab_usample", _wrap_MultiAdaptiveTimeSlab_usample, METH_VARARGS, NULL},
	 { (char *)"MultiAdaptiveTimeSlab_ksample", _wrap_MultiAdaptiveTimeSlab_ksample, METH_VARARGS, NULL},
	 { (char *)"MultiAdaptiveTimeSlab_rsample", _wrap_MultiAdaptiveTimeSlab_rsample, METH_VARARGS, NULL},
	 { (char *)"MultiAdaptiveTimeSlab_disp", _wrap_MultiAdaptiveTimeSlab_disp, METH_VARARGS, NULL},
	 { (char *)"MultiAdaptiveTimeSlab_swigregister", MultiAdaptiveTimeSlab_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MultiAdaptivity", _wrap_new_MultiAdaptivity, METH_VARARGS, NULL},
	 { (char *)"delete_MultiAdaptivity", _wrap_delete_MultiAdaptivity, METH_VARARGS, NULL},
	 { (char *)"MultiAdaptivity_timestep", _wrap_MultiAdaptivity_timestep, METH_VARARGS, NULL},
	 { (char *)"MultiAdaptivity_updateStart", _wrap_MultiAdaptivity_updateStart, METH_VARARGS, NULL},
	 { (char *)"MultiAdaptivity_updateComponent", _wrap_MultiAdaptivity_updateComponent, METH_VARARGS, NULL},
	 { (char *)"MultiAdaptivity_updateEnd", _wrap_MultiAdaptivity_updateEnd, METH_VARARGS, NULL},
	 { (char *)"MultiAdaptivity_swigregister", MultiAdaptivity_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ODE", _wrap_new_ODE, METH_VARARGS, NULL},
	 { (char *)"delete_ODE", _wrap_delete_ODE, METH_VARARGS, NULL},
	 { (char *)"ODE_u0", _wrap_ODE_u0, METH_VARARGS, NULL},
	 { (char *)"ODE_fmulti", _wrap_ODE_fmulti, METH_VARARGS, NULL},
	 { (char *)"ODE_fmono", _wrap_ODE_fmono, METH_VARARGS, NULL},
	 { (char *)"ODE_M", _wrap_ODE_M, METH_VARARGS, NULL},
	 { (char *)"ODE_J", _wrap_ODE_J, METH_VARARGS, NULL},
	 { (char *)"ODE_dfdu", _wrap_ODE_dfdu, METH_VARARGS, NULL},
	 { (char *)"ODE_timestep", _wrap_ODE_timestep, METH_VARARGS, NULL},
	 { (char *)"ODE_update", _wrap_ODE_update, METH_VARARGS, NULL},
	 { (char *)"ODE_save", _wrap_ODE_save, METH_VARARGS, NULL},
	 { (char *)"ODE_size", _wrap_ODE_size, METH_VARARGS, NULL},
	 { (char *)"ODE_endtime", _wrap_ODE_endtime, METH_VARARGS, NULL},
	 { (char *)"ODE_solve", _wrap_ODE_solve, METH_VARARGS, NULL},
	 { (char *)"ODE_sparse", _wrap_ODE_sparse, METH_VARARGS, NULL},
	 { (char *)"disown_ODE", _wrap_disown_ODE, METH_VARARGS, NULL},
	 { (char *)"ODE_swigregister", ODE_swigregister, METH_VARARGS, NULL},
	 { (char *)"ODESolver_solve", _wrap_ODESolver_solve, METH_VARARGS, NULL},
	 { (char *)"ODESolver_swigregister", ODESolver_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ParticleSystem", _wrap_new_ParticleSystem, METH_VARARGS, NULL},
	 { (char *)"delete_ParticleSystem", _wrap_delete_ParticleSystem, METH_VARARGS, NULL},
	 { (char *)"ParticleSystem_x0", _wrap_ParticleSystem_x0, METH_VARARGS, NULL},
	 { (char *)"ParticleSystem_y0", _wrap_ParticleSystem_y0, METH_VARARGS, NULL},
	 { (char *)"ParticleSystem_z0", _wrap_ParticleSystem_z0, METH_VARARGS, NULL},
	 { (char *)"ParticleSystem_vx0", _wrap_ParticleSystem_vx0, METH_VARARGS, NULL},
	 { (char *)"ParticleSystem_vy0", _wrap_ParticleSystem_vy0, METH_VARARGS, NULL},
	 { (char *)"ParticleSystem_vz0", _wrap_ParticleSystem_vz0, METH_VARARGS, NULL},
	 { (char *)"ParticleSystem_Fx", _wrap_ParticleSystem_Fx, METH_VARARGS, NULL},
	 { (char *)"ParticleSystem_Fy", _wrap_ParticleSystem_Fy, METH_VARARGS, NULL},
	 { (char *)"ParticleSystem_Fz", _wrap_ParticleSystem_Fz, METH_VARARGS, NULL},
	 { (char *)"ParticleSystem_mass", _wrap_ParticleSystem_mass, METH_VARARGS, NULL},
	 { (char *)"ParticleSystem_k", _wrap_ParticleSystem_k, METH_VARARGS, NULL},
	 { (char *)"ParticleSystem_u0", _wrap_ParticleSystem_u0, METH_VARARGS, NULL},
	 { (char *)"ParticleSystem_f", _wrap_ParticleSystem_f, METH_VARARGS, NULL},
	 { (char *)"ParticleSystem_timestep", _wrap_ParticleSystem_timestep, METH_VARARGS, NULL},
	 { (char *)"ParticleSystem_swigregister", ParticleSystem_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Partition", _wrap_new_Partition, METH_VARARGS, NULL},
	 { (char *)"delete_Partition", _wrap_delete_Partition, METH_VARARGS, NULL},
	 { (char *)"Partition_size", _wrap_Partition_size, METH_VARARGS, NULL},
	 { (char *)"Partition_index", _wrap_Partition_index, METH_VARARGS, NULL},
	 { (char *)"Partition_update", _wrap_Partition_update, METH_VARARGS, NULL},
	 { (char *)"Partition_debug", _wrap_Partition_debug, METH_VARARGS, NULL},
	 { (char *)"Partition_swigregister", Partition_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ReducedModel", _wrap_new_ReducedModel, METH_VARARGS, NULL},
	 { (char *)"delete_ReducedModel", _wrap_delete_ReducedModel, METH_VARARGS, NULL},
	 { (char *)"ReducedModel_f", _wrap_ReducedModel_f, METH_VARARGS, NULL},
	 { (char *)"ReducedModel_u0", _wrap_ReducedModel_u0, METH_VARARGS, NULL},
	 { (char *)"ReducedModel_swigregister", ReducedModel_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Sample", _wrap_new_Sample, METH_VARARGS, NULL},
	 { (char *)"delete_Sample", _wrap_delete_Sample, METH_VARARGS, NULL},
	 { (char *)"Sample_size", _wrap_Sample_size, METH_VARARGS, NULL},
	 { (char *)"Sample_t", _wrap_Sample_t, METH_VARARGS, NULL},
	 { (char *)"Sample_u", _wrap_Sample_u, METH_VARARGS, NULL},
	 { (char *)"Sample_k", _wrap_Sample_k, METH_VARARGS, NULL},
	 { (char *)"Sample_r", _wrap_Sample_r, METH_VARARGS, NULL},
	 { (char *)"Sample_swigregister", Sample_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_TimeSlab", _wrap_delete_TimeSlab, METH_VARARGS, NULL},
	 { (char *)"TimeSlab_build", _wrap_TimeSlab_build, METH_VARARGS, NULL},
	 { (char *)"TimeSlab_solve", _wrap_TimeSlab_solve, METH_VARARGS, NULL},
	 { (char *)"TimeSlab_check", _wrap_TimeSlab_check, METH_VARARGS, NULL},
	 { (char *)"TimeSlab_shift", _wrap_TimeSlab_shift, METH_VARARGS, NULL},
	 { (char *)"TimeSlab_sample", _wrap_TimeSlab_sample, METH_VARARGS, NULL},
	 { (char *)"TimeSlab_size", _wrap_TimeSlab_size, METH_VARARGS, NULL},
	 { (char *)"TimeSlab_starttime", _wrap_TimeSlab_starttime, METH_VARARGS, NULL},
	 { (char *)"TimeSlab_endtime", _wrap_TimeSlab_endtime, METH_VARARGS, NULL},
	 { (char *)"TimeSlab_length", _wrap_TimeSlab_length, METH_VARARGS, NULL},
	 { (char *)"TimeSlab_usample", _wrap_TimeSlab_usample, METH_VARARGS, NULL},
	 { (char *)"TimeSlab_ksample", _wrap_TimeSlab_ksample, METH_VARARGS, NULL},
	 { (char *)"TimeSlab_rsample", _wrap_TimeSlab_rsample, METH_VARARGS, NULL},
	 { (char *)"TimeSlab_disp", _wrap_TimeSlab_disp, METH_VARARGS, NULL},
	 { (char *)"TimeSlab_swigregister", TimeSlab_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_TimeSlabJacobian", _wrap_delete_TimeSlabJacobian, METH_VARARGS, NULL},
	 { (char *)"TimeSlabJacobian_mult", _wrap_TimeSlabJacobian_mult, METH_VARARGS, NULL},
	 { (char *)"TimeSlabJacobian_update", _wrap_TimeSlabJacobian_update, METH_VARARGS, NULL},
	 { (char *)"TimeSlabJacobian_swigregister", TimeSlabJacobian_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TimeStepper", _wrap_new_TimeStepper, METH_VARARGS, NULL},
	 { (char *)"delete_TimeStepper", _wrap_delete_TimeStepper, METH_VARARGS, NULL},
	 { (char *)"TimeStepper_solve", _wrap_TimeStepper_solve, METH_VARARGS, NULL},
	 { (char *)"TimeStepper_step", _wrap_TimeStepper_step, METH_VARARGS, NULL},
	 { (char *)"TimeStepper_finished", _wrap_TimeStepper_finished, METH_VARARGS, NULL},
	 { (char *)"TimeStepper_swigregister", TimeStepper_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_cGqMethod", _wrap_new_cGqMethod, METH_VARARGS, NULL},
	 { (char *)"cGqMethod_ueval", _wrap_cGqMethod_ueval, METH_VARARGS, NULL},
	 { (char *)"cGqMethod_residual", _wrap_cGqMethod_residual, METH_VARARGS, NULL},
	 { (char *)"cGqMethod_timestep", _wrap_cGqMethod_timestep, METH_VARARGS, NULL},
	 { (char *)"cGqMethod_error", _wrap_cGqMethod_error, METH_VARARGS, NULL},
	 { (char *)"cGqMethod_disp", _wrap_cGqMethod_disp, METH_VARARGS, NULL},
	 { (char *)"cGqMethod_swigregister", cGqMethod_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_dGqMethod", _wrap_new_dGqMethod, METH_VARARGS, NULL},
	 { (char *)"dGqMethod_ueval", _wrap_dGqMethod_ueval, METH_VARARGS, NULL},
	 { (char *)"dGqMethod_residual", _wrap_dGqMethod_residual, METH_VARARGS, NULL},
	 { (char *)"dGqMethod_timestep", _wrap_dGqMethod_timestep, METH_VARARGS, NULL},
	 { (char *)"dGqMethod_error", _wrap_dGqMethod_error, METH_VARARGS, NULL},
	 { (char *)"dGqMethod_disp", _wrap_dGqMethod_disp, METH_VARARGS, NULL},
	 { (char *)"dGqMethod_swigregister", dGqMethod_swigregister, METH_VARARGS, NULL},
	 { (char *)"set", _wrap_set, METH_VARARGS, NULL},
	 { (char *)"get", _wrap_get, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_dolfin__VectorTo_p_dolfin__Variable(void *x) {
    return (void *)((dolfin::Variable *)  ((dolfin::Vector *) x));
}
static void *_p_dolfin__UnitSquareTo_p_dolfin__Variable(void *x) {
    return (void *)((dolfin::Variable *) (dolfin::Mesh *) ((dolfin::UnitSquare *) x));
}
static void *_p_dolfin__MeshTo_p_dolfin__Variable(void *x) {
    return (void *)((dolfin::Variable *)  ((dolfin::Mesh *) x));
}
static void *_p_dolfin__FunctionTo_p_dolfin__Variable(void *x) {
    return (void *)((dolfin::Variable *)  ((dolfin::Function *) x));
}
static void *_p_dolfin__MatrixTo_p_dolfin__Variable(void *x) {
    return (void *)((dolfin::Variable *)  ((dolfin::Matrix *) x));
}
static void *_p_dolfin__UnitCubeTo_p_dolfin__Variable(void *x) {
    return (void *)((dolfin::Variable *) (dolfin::Mesh *) ((dolfin::UnitCube *) x));
}
static void *_p_dolfin__SampleTo_p_dolfin__Variable(void *x) {
    return (void *)((dolfin::Variable *)  ((dolfin::Sample *) x));
}
static void *_p_dolfin__BoundaryConditionTo_p_dolfin__TimeDependent(void *x) {
    return (void *)((dolfin::TimeDependent *)  ((dolfin::BoundaryCondition *) x));
}
static void *_p_dolfin__FunctionTo_p_dolfin__TimeDependent(void *x) {
    return (void *)((dolfin::TimeDependent *)  ((dolfin::Function *) x));
}
static void *_p_dolfin__MultiAdaptivePreconditionerTo_p_dolfin__Preconditioner(void *x) {
    return (void *)((dolfin::Preconditioner *)  ((dolfin::MultiAdaptivePreconditioner *) x));
}
static void *_p_dolfin__HomotopyJacobianTo_p_dolfin__VirtualMatrix(void *x) {
    return (void *)((dolfin::VirtualMatrix *)  ((dolfin::HomotopyJacobian *) x));
}
static void *_p_dolfin__TimeSlabJacobianTo_p_dolfin__VirtualMatrix(void *x) {
    return (void *)((dolfin::VirtualMatrix *)  ((dolfin::TimeSlabJacobian *) x));
}
static void *_p_dolfin__cGqMethodTo_p_dolfin__Method(void *x) {
    return (void *)((dolfin::Method *)  ((dolfin::cGqMethod *) x));
}
static void *_p_dolfin__dGqMethodTo_p_dolfin__Method(void *x) {
    return (void *)((dolfin::Method *)  ((dolfin::dGqMethod *) x));
}
static void *_p_dolfin__BilinearFormTo_p_dolfin__Form(void *x) {
    return (void *)((dolfin::Form *)  ((dolfin::BilinearForm *) x));
}
static void *_p_dolfin__LinearFormTo_p_dolfin__Form(void *x) {
    return (void *)((dolfin::Form *)  ((dolfin::LinearForm *) x));
}
static void *_p_dolfin__LUTo_p_dolfin__LinearSolver(void *x) {
    return (void *)((dolfin::LinearSolver *)  ((dolfin::LU *) x));
}
static void *_p_dolfin__KrylovSolverTo_p_dolfin__LinearSolver(void *x) {
    return (void *)((dolfin::LinearSolver *)  ((dolfin::KrylovSolver *) x));
}
static void *_p_dolfin__UnitSquareTo_p_dolfin__Mesh(void *x) {
    return (void *)((dolfin::Mesh *)  ((dolfin::UnitSquare *) x));
}
static void *_p_dolfin__UnitCubeTo_p_dolfin__Mesh(void *x) {
    return (void *)((dolfin::Mesh *)  ((dolfin::UnitCube *) x));
}
static void *_p_dolfin__ParticleSystemTo_p_dolfin__ODE(void *x) {
    return (void *)((dolfin::ODE *)  ((dolfin::ParticleSystem *) x));
}
static void *_p_dolfin__ReducedModelTo_p_dolfin__ODE(void *x) {
    return (void *)((dolfin::ODE *)  ((dolfin::ReducedModel *) x));
}
static swig_type_info _swigt__p_Boundary = {"_p_Boundary", "Boundary *", 0, 0, 0};
static swig_type_info _swigt__p_Edge = {"_p_Edge", "Edge *", 0, 0, 0};
static swig_type_info _swigt__p_Face = {"_p_Face", "Face *", 0, 0, 0};
static swig_type_info _swigt__p_FunctionPointer = {"_p_FunctionPointer", "FunctionPointer *", 0, 0, 0};
static swig_type_info _swigt__p_Index = {"_p_Index", "Index *", 0, 0, 0};
static swig_type_info _swigt__p_KSP = {"_p_KSP", "KSP *", 0, 0, 0};
static swig_type_info _swigt__p_Mat = {"_p_Mat", "Mat *", 0, 0, 0};
static swig_type_info _swigt__p_Preconditioner = {"_p_Preconditioner", "Preconditioner *", 0, 0, 0};
static swig_type_info _swigt__p_Preconditioner__Type = {"_p_Preconditioner__Type", "Preconditioner::Type *", 0, 0, 0};
static swig_type_info _swigt__p_Vec = {"_p_Vec", "Vec *", 0, 0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__AffineMap = {"_p_dolfin__AffineMap", "dolfin::AffineMap *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__ArrayTstd__complexTdouble_t_p_t = {"_p_dolfin__ArrayTstd__complexTdouble_t_p_t", "dolfin::Array<std::complex<double > * > *|dolfin::Array<dolfin::complex * > *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__BLASFormData = {"_p_dolfin__BLASFormData", "dolfin::BLASFormData *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__BilinearForm = {"_p_dolfin__BilinearForm", "dolfin::BilinearForm *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__Boundary = {"_p_dolfin__Boundary", "dolfin::Boundary *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__BoundaryCondition = {"_p_dolfin__BoundaryCondition", "dolfin::BoundaryCondition *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__BoundaryValue = {"_p_dolfin__BoundaryValue", "dolfin::BoundaryValue *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__Cell = {"_p_dolfin__Cell", "dolfin::Cell *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__CellIterator = {"_p_dolfin__CellIterator", "dolfin::CellIterator *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__ComplexODE = {"_p_dolfin__ComplexODE", "dolfin::ComplexODE *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__Dependencies = {"_p_dolfin__Dependencies", "dolfin::Dependencies *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__Edge = {"_p_dolfin__Edge", "dolfin::Edge *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__EdgeIterator = {"_p_dolfin__EdgeIterator", "dolfin::EdgeIterator *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__EigenvalueSolver = {"_p_dolfin__EigenvalueSolver", "dolfin::EigenvalueSolver *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__FEM = {"_p_dolfin__FEM", "dolfin::FEM *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__Face = {"_p_dolfin__Face", "dolfin::Face *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__FaceIterator = {"_p_dolfin__FaceIterator", "dolfin::FaceIterator *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__File = {"_p_dolfin__File", "dolfin::File *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__FiniteElement = {"_p_dolfin__FiniteElement", "dolfin::FiniteElement *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__FiniteElementSpec = {"_p_dolfin__FiniteElementSpec", "dolfin::FiniteElementSpec *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__Form = {"_p_dolfin__Form", "dolfin::Form *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__Function = {"_p_dolfin__Function", "dolfin::Function *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__GMRES = {"_p_dolfin__GMRES", "dolfin::GMRES *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__Homotopy = {"_p_dolfin__Homotopy", "dolfin::Homotopy *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__HomotopyJacobian = {"_p_dolfin__HomotopyJacobian", "dolfin::HomotopyJacobian *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__HomotopyODE = {"_p_dolfin__HomotopyODE", "dolfin::HomotopyODE *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__KrylovSolver = {"_p_dolfin__KrylovSolver", "dolfin::KrylovSolver *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__LU = {"_p_dolfin__LU", "dolfin::LU *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__LinearForm = {"_p_dolfin__LinearForm", "dolfin::LinearForm *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__LinearSolver = {"_p_dolfin__LinearSolver", "dolfin::LinearSolver *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__Matrix = {"_p_dolfin__Matrix", "dolfin::Matrix *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__MatrixElement = {"_p_dolfin__MatrixElement", "dolfin::MatrixElement *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__Mesh = {"_p_dolfin__Mesh", "dolfin::Mesh *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__MeshHierarchy = {"_p_dolfin__MeshHierarchy", "dolfin::MeshHierarchy *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__MeshIterator = {"_p_dolfin__MeshIterator", "dolfin::MeshIterator *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__Method = {"_p_dolfin__Method", "dolfin::Method *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__MonoAdaptiveFixedPointSolver = {"_p_dolfin__MonoAdaptiveFixedPointSolver", "dolfin::MonoAdaptiveFixedPointSolver *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__MonoAdaptiveJacobian = {"_p_dolfin__MonoAdaptiveJacobian", "dolfin::MonoAdaptiveJacobian *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__MonoAdaptiveNewtonSolver = {"_p_dolfin__MonoAdaptiveNewtonSolver", "dolfin::MonoAdaptiveNewtonSolver *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__MonoAdaptiveTimeSlab = {"_p_dolfin__MonoAdaptiveTimeSlab", "dolfin::MonoAdaptiveTimeSlab *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__MonoAdaptivity = {"_p_dolfin__MonoAdaptivity", "dolfin::MonoAdaptivity *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__MultiAdaptiveFixedPointSolver = {"_p_dolfin__MultiAdaptiveFixedPointSolver", "dolfin::MultiAdaptiveFixedPointSolver *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__MultiAdaptiveNewtonSolver = {"_p_dolfin__MultiAdaptiveNewtonSolver", "dolfin::MultiAdaptiveNewtonSolver *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__MultiAdaptivePreconditioner = {"_p_dolfin__MultiAdaptivePreconditioner", "dolfin::MultiAdaptivePreconditioner *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__MultiAdaptiveTimeSlab = {"_p_dolfin__MultiAdaptiveTimeSlab", "dolfin::MultiAdaptiveTimeSlab *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__MultiAdaptivity = {"_p_dolfin__MultiAdaptivity", "dolfin::MultiAdaptivity *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__ODE = {"_p_dolfin__ODE", "dolfin::ODE *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__ODESolver = {"_p_dolfin__ODESolver", "dolfin::ODESolver *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__PETScManager = {"_p_dolfin__PETScManager", "dolfin::PETScManager *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__Parameter = {"_p_dolfin__Parameter", "dolfin::Parameter *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__ParameterList = {"_p_dolfin__ParameterList", "dolfin::ParameterList *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__ParticleSystem = {"_p_dolfin__ParticleSystem", "dolfin::ParticleSystem *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__Partition = {"_p_dolfin__Partition", "dolfin::Partition *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__Point = {"_p_dolfin__Point", "dolfin::Point *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__Preconditioner = {"_p_dolfin__Preconditioner", "dolfin::Preconditioner *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__ReducedModel = {"_p_dolfin__ReducedModel", "dolfin::ReducedModel *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__Sample = {"_p_dolfin__Sample", "dolfin::Sample *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__Tetrahedron = {"_p_dolfin__Tetrahedron", "dolfin::Tetrahedron *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__TimeDependent = {"_p_dolfin__TimeDependent", "dolfin::TimeDependent *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__TimeSlab = {"_p_dolfin__TimeSlab", "dolfin::TimeSlab *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__TimeSlabJacobian = {"_p_dolfin__TimeSlabJacobian", "dolfin::TimeSlabJacobian *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__TimeStepper = {"_p_dolfin__TimeStepper", "dolfin::TimeStepper *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__Triangle = {"_p_dolfin__Triangle", "dolfin::Triangle *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__UnitCube = {"_p_dolfin__UnitCube", "dolfin::UnitCube *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__UnitSquare = {"_p_dolfin__UnitSquare", "dolfin::UnitSquare *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__Variable = {"_p_dolfin__Variable", "dolfin::Variable *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__Vector = {"_p_dolfin__Vector", "dolfin::Vector *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__VectorElement = {"_p_dolfin__VectorElement", "dolfin::VectorElement *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__Vertex = {"_p_dolfin__Vertex", "dolfin::Vertex *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__VertexIterator = {"_p_dolfin__VertexIterator", "dolfin::VertexIterator *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__VirtualMatrix = {"_p_dolfin__VirtualMatrix", "dolfin::VirtualMatrix *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__cGqMethod = {"_p_dolfin__cGqMethod", "dolfin::cGqMethod *", 0, 0, 0};
static swig_type_info _swigt__p_dolfin__dGqMethod = {"_p_dolfin__dGqMethod", "dolfin::dGqMethod *", 0, 0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *|dolfin::real *", 0, 0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **", 0, 0, 0};
static swig_type_info _swigt__p_std__complexTdouble_t = {"_p_std__complexTdouble_t", "std::complex<double > *|dolfin::complex *", 0, 0, 0};
static swig_type_info _swigt__p_std__setTint_t = {"_p_std__setTint_t", "std::set<int > *", 0, 0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *|dolfin::uint *", 0, 0, 0};
static swig_type_info _swigt__ptrdiff_t = {"_ptrdiff_t", "ptrdiff_t", 0, 0, 0};
static swig_type_info _swigt__size_t = {"_size_t", "size_t", 0, 0, 0};
static swig_type_info _swigt__std__ptrdiff_t = {"_std__ptrdiff_t", "std::ptrdiff_t", 0, 0, 0};
static swig_type_info _swigt__std__size_t = {"_std__size_t", "std::size_t", 0, 0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Boundary,
  &_swigt__p_Edge,
  &_swigt__p_Face,
  &_swigt__p_FunctionPointer,
  &_swigt__p_Index,
  &_swigt__p_KSP,
  &_swigt__p_Mat,
  &_swigt__p_Preconditioner,
  &_swigt__p_Preconditioner__Type,
  &_swigt__p_Vec,
  &_swigt__p_char,
  &_swigt__p_dolfin__AffineMap,
  &_swigt__p_dolfin__ArrayTstd__complexTdouble_t_p_t,
  &_swigt__p_dolfin__BLASFormData,
  &_swigt__p_dolfin__BilinearForm,
  &_swigt__p_dolfin__Boundary,
  &_swigt__p_dolfin__BoundaryCondition,
  &_swigt__p_dolfin__BoundaryValue,
  &_swigt__p_dolfin__Cell,
  &_swigt__p_dolfin__CellIterator,
  &_swigt__p_dolfin__ComplexODE,
  &_swigt__p_dolfin__Dependencies,
  &_swigt__p_dolfin__Edge,
  &_swigt__p_dolfin__EdgeIterator,
  &_swigt__p_dolfin__EigenvalueSolver,
  &_swigt__p_dolfin__FEM,
  &_swigt__p_dolfin__Face,
  &_swigt__p_dolfin__FaceIterator,
  &_swigt__p_dolfin__File,
  &_swigt__p_dolfin__FiniteElement,
  &_swigt__p_dolfin__FiniteElementSpec,
  &_swigt__p_dolfin__Form,
  &_swigt__p_dolfin__Function,
  &_swigt__p_dolfin__GMRES,
  &_swigt__p_dolfin__Homotopy,
  &_swigt__p_dolfin__HomotopyJacobian,
  &_swigt__p_dolfin__HomotopyODE,
  &_swigt__p_dolfin__KrylovSolver,
  &_swigt__p_dolfin__LU,
  &_swigt__p_dolfin__LinearForm,
  &_swigt__p_dolfin__LinearSolver,
  &_swigt__p_dolfin__Matrix,
  &_swigt__p_dolfin__MatrixElement,
  &_swigt__p_dolfin__Mesh,
  &_swigt__p_dolfin__MeshHierarchy,
  &_swigt__p_dolfin__MeshIterator,
  &_swigt__p_dolfin__Method,
  &_swigt__p_dolfin__MonoAdaptiveFixedPointSolver,
  &_swigt__p_dolfin__MonoAdaptiveJacobian,
  &_swigt__p_dolfin__MonoAdaptiveNewtonSolver,
  &_swigt__p_dolfin__MonoAdaptiveTimeSlab,
  &_swigt__p_dolfin__MonoAdaptivity,
  &_swigt__p_dolfin__MultiAdaptiveFixedPointSolver,
  &_swigt__p_dolfin__MultiAdaptiveNewtonSolver,
  &_swigt__p_dolfin__MultiAdaptivePreconditioner,
  &_swigt__p_dolfin__MultiAdaptiveTimeSlab,
  &_swigt__p_dolfin__MultiAdaptivity,
  &_swigt__p_dolfin__ODE,
  &_swigt__p_dolfin__ODESolver,
  &_swigt__p_dolfin__PETScManager,
  &_swigt__p_dolfin__Parameter,
  &_swigt__p_dolfin__ParameterList,
  &_swigt__p_dolfin__ParticleSystem,
  &_swigt__p_dolfin__Partition,
  &_swigt__p_dolfin__Point,
  &_swigt__p_dolfin__Preconditioner,
  &_swigt__p_dolfin__ReducedModel,
  &_swigt__p_dolfin__Sample,
  &_swigt__p_dolfin__Tetrahedron,
  &_swigt__p_dolfin__TimeDependent,
  &_swigt__p_dolfin__TimeSlab,
  &_swigt__p_dolfin__TimeSlabJacobian,
  &_swigt__p_dolfin__TimeStepper,
  &_swigt__p_dolfin__Triangle,
  &_swigt__p_dolfin__UnitCube,
  &_swigt__p_dolfin__UnitSquare,
  &_swigt__p_dolfin__Variable,
  &_swigt__p_dolfin__Vector,
  &_swigt__p_dolfin__VectorElement,
  &_swigt__p_dolfin__Vertex,
  &_swigt__p_dolfin__VertexIterator,
  &_swigt__p_dolfin__VirtualMatrix,
  &_swigt__p_dolfin__cGqMethod,
  &_swigt__p_dolfin__dGqMethod,
  &_swigt__p_double,
  &_swigt__p_int,
  &_swigt__p_p_char,
  &_swigt__p_std__complexTdouble_t,
  &_swigt__p_std__setTint_t,
  &_swigt__p_unsigned_int,
  &_swigt__ptrdiff_t,
  &_swigt__size_t,
  &_swigt__std__ptrdiff_t,
  &_swigt__std__size_t,
};

static swig_cast_info _swigc__p_Boundary[] = {  {&_swigt__p_Boundary, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Edge[] = {  {&_swigt__p_Edge, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Face[] = {  {&_swigt__p_Face, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FunctionPointer[] = {  {&_swigt__p_FunctionPointer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Index[] = {  {&_swigt__p_Index, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KSP[] = {  {&_swigt__p_KSP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mat[] = {  {&_swigt__p_Mat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Preconditioner[] = {  {&_swigt__p_Preconditioner, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Preconditioner__Type[] = {  {&_swigt__p_Preconditioner__Type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Vec[] = {  {&_swigt__p_Vec, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__AffineMap[] = {  {&_swigt__p_dolfin__AffineMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__ArrayTstd__complexTdouble_t_p_t[] = {  {&_swigt__p_dolfin__ArrayTstd__complexTdouble_t_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__BLASFormData[] = {  {&_swigt__p_dolfin__BLASFormData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__BilinearForm[] = {  {&_swigt__p_dolfin__BilinearForm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__Boundary[] = {  {&_swigt__p_dolfin__Boundary, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__BoundaryCondition[] = {  {&_swigt__p_dolfin__BoundaryCondition, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__BoundaryValue[] = {  {&_swigt__p_dolfin__BoundaryValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__Cell[] = {  {&_swigt__p_dolfin__Cell, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__CellIterator[] = {  {&_swigt__p_dolfin__CellIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__ComplexODE[] = {  {&_swigt__p_dolfin__ComplexODE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__Dependencies[] = {  {&_swigt__p_dolfin__Dependencies, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__Edge[] = {  {&_swigt__p_dolfin__Edge, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__EdgeIterator[] = {  {&_swigt__p_dolfin__EdgeIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__EigenvalueSolver[] = {  {&_swigt__p_dolfin__EigenvalueSolver, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__FEM[] = {  {&_swigt__p_dolfin__FEM, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__Face[] = {  {&_swigt__p_dolfin__Face, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__FaceIterator[] = {  {&_swigt__p_dolfin__FaceIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__File[] = {  {&_swigt__p_dolfin__File, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__FiniteElement[] = {  {&_swigt__p_dolfin__FiniteElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__FiniteElementSpec[] = {  {&_swigt__p_dolfin__FiniteElementSpec, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__Form[] = {  {&_swigt__p_dolfin__Form, 0, 0, 0},  {&_swigt__p_dolfin__BilinearForm, _p_dolfin__BilinearFormTo_p_dolfin__Form, 0, 0},  {&_swigt__p_dolfin__LinearForm, _p_dolfin__LinearFormTo_p_dolfin__Form, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__Function[] = {  {&_swigt__p_dolfin__Function, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__GMRES[] = {  {&_swigt__p_dolfin__GMRES, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__Homotopy[] = {  {&_swigt__p_dolfin__Homotopy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__HomotopyJacobian[] = {  {&_swigt__p_dolfin__HomotopyJacobian, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__HomotopyODE[] = {  {&_swigt__p_dolfin__HomotopyODE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__KrylovSolver[] = {  {&_swigt__p_dolfin__KrylovSolver, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__LU[] = {  {&_swigt__p_dolfin__LU, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__LinearForm[] = {  {&_swigt__p_dolfin__LinearForm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__LinearSolver[] = {  {&_swigt__p_dolfin__LinearSolver, 0, 0, 0},  {&_swigt__p_dolfin__KrylovSolver, _p_dolfin__KrylovSolverTo_p_dolfin__LinearSolver, 0, 0},  {&_swigt__p_dolfin__LU, _p_dolfin__LUTo_p_dolfin__LinearSolver, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__Matrix[] = {  {&_swigt__p_dolfin__Matrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__MatrixElement[] = {  {&_swigt__p_dolfin__MatrixElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__Mesh[] = {  {&_swigt__p_dolfin__UnitSquare, _p_dolfin__UnitSquareTo_p_dolfin__Mesh, 0, 0},  {&_swigt__p_dolfin__UnitCube, _p_dolfin__UnitCubeTo_p_dolfin__Mesh, 0, 0},  {&_swigt__p_dolfin__Mesh, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__MeshHierarchy[] = {  {&_swigt__p_dolfin__MeshHierarchy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__MeshIterator[] = {  {&_swigt__p_dolfin__MeshIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__Method[] = {  {&_swigt__p_dolfin__Method, 0, 0, 0},  {&_swigt__p_dolfin__cGqMethod, _p_dolfin__cGqMethodTo_p_dolfin__Method, 0, 0},  {&_swigt__p_dolfin__dGqMethod, _p_dolfin__dGqMethodTo_p_dolfin__Method, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__MonoAdaptiveFixedPointSolver[] = {  {&_swigt__p_dolfin__MonoAdaptiveFixedPointSolver, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__MonoAdaptiveJacobian[] = {  {&_swigt__p_dolfin__MonoAdaptiveJacobian, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__MonoAdaptiveNewtonSolver[] = {  {&_swigt__p_dolfin__MonoAdaptiveNewtonSolver, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__MonoAdaptiveTimeSlab[] = {  {&_swigt__p_dolfin__MonoAdaptiveTimeSlab, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__MonoAdaptivity[] = {  {&_swigt__p_dolfin__MonoAdaptivity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__MultiAdaptiveFixedPointSolver[] = {  {&_swigt__p_dolfin__MultiAdaptiveFixedPointSolver, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__MultiAdaptiveNewtonSolver[] = {  {&_swigt__p_dolfin__MultiAdaptiveNewtonSolver, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__MultiAdaptivePreconditioner[] = {  {&_swigt__p_dolfin__MultiAdaptivePreconditioner, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__MultiAdaptiveTimeSlab[] = {  {&_swigt__p_dolfin__MultiAdaptiveTimeSlab, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__MultiAdaptivity[] = {  {&_swigt__p_dolfin__MultiAdaptivity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__ODE[] = {  {&_swigt__p_dolfin__ODE, 0, 0, 0},  {&_swigt__p_dolfin__ParticleSystem, _p_dolfin__ParticleSystemTo_p_dolfin__ODE, 0, 0},  {&_swigt__p_dolfin__ReducedModel, _p_dolfin__ReducedModelTo_p_dolfin__ODE, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__ODESolver[] = {  {&_swigt__p_dolfin__ODESolver, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__PETScManager[] = {  {&_swigt__p_dolfin__PETScManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__Parameter[] = {  {&_swigt__p_dolfin__Parameter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__ParameterList[] = {  {&_swigt__p_dolfin__ParameterList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__ParticleSystem[] = {  {&_swigt__p_dolfin__ParticleSystem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__Partition[] = {  {&_swigt__p_dolfin__Partition, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__Point[] = {  {&_swigt__p_dolfin__Point, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__Preconditioner[] = {  {&_swigt__p_dolfin__Preconditioner, 0, 0, 0},  {&_swigt__p_dolfin__MultiAdaptivePreconditioner, _p_dolfin__MultiAdaptivePreconditionerTo_p_dolfin__Preconditioner, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__ReducedModel[] = {  {&_swigt__p_dolfin__ReducedModel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__Sample[] = {  {&_swigt__p_dolfin__Sample, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__Tetrahedron[] = {  {&_swigt__p_dolfin__Tetrahedron, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__TimeDependent[] = {  {&_swigt__p_dolfin__TimeDependent, 0, 0, 0},  {&_swigt__p_dolfin__BoundaryCondition, _p_dolfin__BoundaryConditionTo_p_dolfin__TimeDependent, 0, 0},  {&_swigt__p_dolfin__Function, _p_dolfin__FunctionTo_p_dolfin__TimeDependent, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__TimeSlab[] = {  {&_swigt__p_dolfin__TimeSlab, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__TimeSlabJacobian[] = {  {&_swigt__p_dolfin__TimeSlabJacobian, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__TimeStepper[] = {  {&_swigt__p_dolfin__TimeStepper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__Triangle[] = {  {&_swigt__p_dolfin__Triangle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__UnitCube[] = {  {&_swigt__p_dolfin__UnitCube, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__UnitSquare[] = {  {&_swigt__p_dolfin__UnitSquare, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__Variable[] = {  {&_swigt__p_dolfin__UnitSquare, _p_dolfin__UnitSquareTo_p_dolfin__Variable, 0, 0},  {&_swigt__p_dolfin__Variable, 0, 0, 0},  {&_swigt__p_dolfin__Vector, _p_dolfin__VectorTo_p_dolfin__Variable, 0, 0},  {&_swigt__p_dolfin__Function, _p_dolfin__FunctionTo_p_dolfin__Variable, 0, 0},  {&_swigt__p_dolfin__UnitCube, _p_dolfin__UnitCubeTo_p_dolfin__Variable, 0, 0},  {&_swigt__p_dolfin__Mesh, _p_dolfin__MeshTo_p_dolfin__Variable, 0, 0},  {&_swigt__p_dolfin__Matrix, _p_dolfin__MatrixTo_p_dolfin__Variable, 0, 0},  {&_swigt__p_dolfin__Sample, _p_dolfin__SampleTo_p_dolfin__Variable, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__Vector[] = {  {&_swigt__p_dolfin__Vector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__VectorElement[] = {  {&_swigt__p_dolfin__VectorElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__Vertex[] = {  {&_swigt__p_dolfin__Vertex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__VertexIterator[] = {  {&_swigt__p_dolfin__VertexIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__VirtualMatrix[] = {  {&_swigt__p_dolfin__VirtualMatrix, 0, 0, 0},  {&_swigt__p_dolfin__HomotopyJacobian, _p_dolfin__HomotopyJacobianTo_p_dolfin__VirtualMatrix, 0, 0},  {&_swigt__p_dolfin__TimeSlabJacobian, _p_dolfin__TimeSlabJacobianTo_p_dolfin__VirtualMatrix, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__cGqMethod[] = {  {&_swigt__p_dolfin__cGqMethod, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dolfin__dGqMethod[] = {  {&_swigt__p_dolfin__dGqMethod, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexTdouble_t[] = {  {&_swigt__p_std__complexTdouble_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setTint_t[] = {  {&_swigt__p_std__setTint_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__ptrdiff_t[] = {  {&_swigt__ptrdiff_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__size_t[] = {  {&_swigt__size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__std__ptrdiff_t[] = {  {&_swigt__std__ptrdiff_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__std__size_t[] = {  {&_swigt__std__size_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Boundary,
  _swigc__p_Edge,
  _swigc__p_Face,
  _swigc__p_FunctionPointer,
  _swigc__p_Index,
  _swigc__p_KSP,
  _swigc__p_Mat,
  _swigc__p_Preconditioner,
  _swigc__p_Preconditioner__Type,
  _swigc__p_Vec,
  _swigc__p_char,
  _swigc__p_dolfin__AffineMap,
  _swigc__p_dolfin__ArrayTstd__complexTdouble_t_p_t,
  _swigc__p_dolfin__BLASFormData,
  _swigc__p_dolfin__BilinearForm,
  _swigc__p_dolfin__Boundary,
  _swigc__p_dolfin__BoundaryCondition,
  _swigc__p_dolfin__BoundaryValue,
  _swigc__p_dolfin__Cell,
  _swigc__p_dolfin__CellIterator,
  _swigc__p_dolfin__ComplexODE,
  _swigc__p_dolfin__Dependencies,
  _swigc__p_dolfin__Edge,
  _swigc__p_dolfin__EdgeIterator,
  _swigc__p_dolfin__EigenvalueSolver,
  _swigc__p_dolfin__FEM,
  _swigc__p_dolfin__Face,
  _swigc__p_dolfin__FaceIterator,
  _swigc__p_dolfin__File,
  _swigc__p_dolfin__FiniteElement,
  _swigc__p_dolfin__FiniteElementSpec,
  _swigc__p_dolfin__Form,
  _swigc__p_dolfin__Function,
  _swigc__p_dolfin__GMRES,
  _swigc__p_dolfin__Homotopy,
  _swigc__p_dolfin__HomotopyJacobian,
  _swigc__p_dolfin__HomotopyODE,
  _swigc__p_dolfin__KrylovSolver,
  _swigc__p_dolfin__LU,
  _swigc__p_dolfin__LinearForm,
  _swigc__p_dolfin__LinearSolver,
  _swigc__p_dolfin__Matrix,
  _swigc__p_dolfin__MatrixElement,
  _swigc__p_dolfin__Mesh,
  _swigc__p_dolfin__MeshHierarchy,
  _swigc__p_dolfin__MeshIterator,
  _swigc__p_dolfin__Method,
  _swigc__p_dolfin__MonoAdaptiveFixedPointSolver,
  _swigc__p_dolfin__MonoAdaptiveJacobian,
  _swigc__p_dolfin__MonoAdaptiveNewtonSolver,
  _swigc__p_dolfin__MonoAdaptiveTimeSlab,
  _swigc__p_dolfin__MonoAdaptivity,
  _swigc__p_dolfin__MultiAdaptiveFixedPointSolver,
  _swigc__p_dolfin__MultiAdaptiveNewtonSolver,
  _swigc__p_dolfin__MultiAdaptivePreconditioner,
  _swigc__p_dolfin__MultiAdaptiveTimeSlab,
  _swigc__p_dolfin__MultiAdaptivity,
  _swigc__p_dolfin__ODE,
  _swigc__p_dolfin__ODESolver,
  _swigc__p_dolfin__PETScManager,
  _swigc__p_dolfin__Parameter,
  _swigc__p_dolfin__ParameterList,
  _swigc__p_dolfin__ParticleSystem,
  _swigc__p_dolfin__Partition,
  _swigc__p_dolfin__Point,
  _swigc__p_dolfin__Preconditioner,
  _swigc__p_dolfin__ReducedModel,
  _swigc__p_dolfin__Sample,
  _swigc__p_dolfin__Tetrahedron,
  _swigc__p_dolfin__TimeDependent,
  _swigc__p_dolfin__TimeSlab,
  _swigc__p_dolfin__TimeSlabJacobian,
  _swigc__p_dolfin__TimeStepper,
  _swigc__p_dolfin__Triangle,
  _swigc__p_dolfin__UnitCube,
  _swigc__p_dolfin__UnitSquare,
  _swigc__p_dolfin__Variable,
  _swigc__p_dolfin__Vector,
  _swigc__p_dolfin__VectorElement,
  _swigc__p_dolfin__Vertex,
  _swigc__p_dolfin__VertexIterator,
  _swigc__p_dolfin__VirtualMatrix,
  _swigc__p_dolfin__cGqMethod,
  _swigc__p_dolfin__dGqMethod,
  _swigc__p_double,
  _swigc__p_int,
  _swigc__p_p_char,
  _swigc__p_std__complexTdouble_t,
  _swigc__p_std__setTint_t,
  _swigc__p_unsigned_int,
  _swigc__ptrdiff_t,
  _swigc__size_t,
  _swigc__std__ptrdiff_t,
  _swigc__std__size_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/*************************************************************************
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.

 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop though that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.

 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
**/

#ifdef __cplusplus
extern "C" {
#endif
    
    SWIGRUNTIME void
    SWIG_InitializeModule(void *clientdata) {
        swig_type_info *type, *ret;
        swig_cast_info *cast;
        size_t i;
        swig_module_info *module_head;
        static int init_run = 0;
        
        clientdata = clientdata;
        
        if (init_run) return;
        init_run = 1;
        
        /* Initialize the swig_module */
        swig_module.type_initial = swig_type_initial;
        swig_module.cast_initial = swig_cast_initial;
        
        /* Try and load any already created modules */
        module_head = SWIG_GetModule(clientdata);
        if (module_head) {
            swig_module.next = module_head->next;
            module_head->next = &swig_module;
        } else {
            /* This is the first module loaded */
            swig_module.next = &swig_module;
            SWIG_SetModule(clientdata, &swig_module);
        }
        
        /* Now work on filling in swig_module.types */
        for (i = 0; i < swig_module.size; ++i) {
            type = 0;
            
            /* if there is another module already loaded */
            if (swig_module.next != &swig_module) {
                type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
            }
            if (type) {
                /* Overwrite clientdata field */
                if (swig_module.type_initial[i]->clientdata) type->clientdata = swig_module.type_initial[i]->clientdata;
            } else {
                type = swig_module.type_initial[i];
            }
            
            /* Insert casting types */
            cast = swig_module.cast_initial[i];
            while (cast->type) {
                /* Don't need to add information already in the list */
                ret = 0;
                if (swig_module.next != &swig_module) {
                    ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
                }
                if (ret && type == swig_module.type_initial[i]) {
                    cast->type = ret;
                    ret = 0;
                }
                
                if (!ret) {
                    if (type->cast) {
                        type->cast->prev = cast;
                        cast->next = type->cast;
                    }
                    type->cast = cast;
                }
                
                cast++;
            }
            
            /* Set entry in modules->types array equal to the type */
            swig_module.types[i] = type;
        }
        swig_module.types[i] = 0;
    }
    
    /* This function will propagate the clientdata field of type to
    * any new swig_type_info structures that have been added into the list
    * of equivalent types.  It is like calling
    * SWIG_TypeClientData(type, clientdata) a second time.
    */
    SWIGRUNTIME void
    SWIG_PropagateClientData(void) {
        size_t i;
        swig_cast_info *equiv;
        static int init_run = 0;
        
        if (init_run) return;
        init_run = 1;
        
        for (i = 0; i < swig_module.size; i++) {
            if (swig_module.types[i]->clientdata) {
                equiv = swig_module.types[i]->cast;
                while (equiv) {
                    if (!equiv->converter) {
                        if (equiv->type && !equiv->type->clientdata)
                        SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
                    }
                    equiv = equiv->next;
                }
            }
        }
    }
    
#ifdef __cplusplus
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
    
    /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
    
    /* -----------------------------------------------------------------------------
     * global variable support code.
     * ----------------------------------------------------------------------------- */
    
    typedef struct swig_globalvar {
        char       *name;                  /* Name of global variable */
        PyObject *(*get_attr)(void);       /* Return the current value */
        int       (*set_attr)(PyObject *); /* Set the value */
        struct swig_globalvar *next;
    } swig_globalvar;
    
    typedef struct swig_varlinkobject {
        PyObject_HEAD
        swig_globalvar *vars;
    } swig_varlinkobject;
    
    SWIGINTERN PyObject *
    swig_varlink_repr(swig_varlinkobject *v) {
        v = v;
        return PyString_FromString("<Swig global variables>");
    }
    
    SWIGINTERN int
    swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
        swig_globalvar  *var;
        flags = flags;
        fprintf(fp,"Swig global variables { ");
        for (var = v->vars; var; var=var->next) {
            fprintf(fp,"%s", var->name);
            if (var->next) fprintf(fp,", ");
        }
        fprintf(fp," }\n");
        return 0;
    }
    
    SWIGINTERN PyObject *
    swig_varlink_getattr(swig_varlinkobject *v, char *n) {
        swig_globalvar *var = v->vars;
        while (var) {
            if (strcmp(var->name,n) == 0) {
                return (*var->get_attr)();
            }
            var = var->next;
        }
        PyErr_SetString(PyExc_NameError,"Unknown C global variable");
        return NULL;
    }
    
    SWIGINTERN int
    swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
        swig_globalvar *var = v->vars;
        while (var) {
            if (strcmp(var->name,n) == 0) {
                return (*var->set_attr)(p);
            }
            var = var->next;
        }
        PyErr_SetString(PyExc_NameError,"Unknown C global variable");
        return 1;
    }
    
    SWIGINTERN PyTypeObject*
    swig_varlink_type(void) {
        static char varlink__doc__[] = "Swig var link object";
        static PyTypeObject varlink_type
#if !defined(__cplusplus)
        ;
        static int type_init = 0;  
        if (!type_init) {
            PyTypeObject tmp
#endif
            = {
                PyObject_HEAD_INIT(&PyType_Type)
                0,                                  /* Number of items in variable part (ob_size) */
                (char *)"swigvarlink",              /* Type name (tp_name) */
                sizeof(swig_varlinkobject),         /* Basic size (tp_basicsize) */
                0,                                  /* Itemsize (tp_itemsize) */
                0,                                  /* Deallocator (tp_dealloc) */ 
                (printfunc) swig_varlink_print,     /* Print (tp_print) */
                (getattrfunc) swig_varlink_getattr, /* get attr (tp_getattr) */
                (setattrfunc) swig_varlink_setattr, /* Set attr (tp_setattr) */
                0,                                  /* tp_compare */
                (reprfunc) swig_varlink_repr,       /* tp_repr */
                0,                                  /* tp_as_number */
                0,                                  /* tp_as_sequence */
                0,                                  /* tp_as_mapping */
                0,                                  /* tp_hash */
                0,                                  /* tp_call */
                0,                                  /* tp_str */
                0,                                  /* tp_getattro */
                0,                                  /* tp_setattro */
                0,                                  /* tp_as_buffer */
                0,                                  /* tp_flags */
                varlink__doc__,                     /* tp_doc */
#if PY_VERSION_HEX >= 0x02000000
                0,                                  /* tp_traverse */
                0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
                0,                                  /* tp_richcompare */
                0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
                0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
                0,0,0,0                             /* tp_alloc -> tp_next */
#endif
            };
#if !defined(__cplusplus)
            varlink_type = tmp;
            type_init = 1;
        }
#endif
        return &varlink_type;
    }
    
    /* Create a variable linking object for use later */
    SWIGINTERN PyObject *
    SWIG_Python_newvarlink(void) {
        swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
        if (result) {
            result->vars = 0;
        }
        return ((PyObject*) result);
    }
    
    SWIGINTERN void 
    SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
        swig_varlinkobject *v = (swig_varlinkobject *) p;
        swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
        if (gv) {
            size_t size = strlen(name)+1;
            gv->name = (char *)malloc(size);
            if (gv->name) {
                strncpy(gv->name,name,size);
                gv->get_attr = get_attr;
                gv->set_attr = set_attr;
                gv->next = v->vars;
            }
        }
        v->vars = gv;
    }
    
    /* -----------------------------------------------------------------------------
     * constants/methods manipulation
     * ----------------------------------------------------------------------------- */
    
    /* Install Constants */
    SWIGINTERN void
    SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
        PyObject *obj = 0;
        size_t i;
        for (i = 0; constants[i].type; ++i) {
            switch(constants[i].type) {
                case SWIG_PY_INT:
                obj = PyInt_FromLong(constants[i].lvalue);
                break;
                case SWIG_PY_FLOAT:
                obj = PyFloat_FromDouble(constants[i].dvalue);
                break;
                case SWIG_PY_STRING:
                if (constants[i].pvalue) {
                    obj = PyString_FromString((char *) constants[i].pvalue);
                } else {
                    Py_INCREF(Py_None);
                    obj = Py_None;
                }
                break;
                case SWIG_PY_POINTER:
                obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
                break;
                case SWIG_PY_BINARY:
                obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
                break;
                default:
                obj = 0;
                break;
            }
            if (obj) {
                PyDict_SetItemString(d,constants[i].name,obj);
                Py_DECREF(obj);
            }
        }
    }
    
    /* -----------------------------------------------------------------------------*/
    /* Fix SwigMethods to carry the callback ptrs when needed */
    /* -----------------------------------------------------------------------------*/
    
    SWIGINTERN void
    SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
        size_t i;
        for (i = 0; methods[i].ml_name; ++i) {
            char *c = methods[i].ml_doc;
            if (c && (c = strstr(c, "swig_ptr: "))) {
                int j;
                swig_const_info *ci = 0;
                char *name = c + 10;
                for (j = 0; const_table[j].type; ++j) {
                    if (strncmp(const_table[j].name, name, 
                    strlen(const_table[j].name)) == 0) {
                        ci = &(const_table[j]);
                        break;
                    }
                }
                if (ci) {
                    size_t shift = (ci->ptype) - types;
                    swig_type_info *ty = types_initial[shift];
                    size_t ldoc = (c - methods[i].ml_doc);
                    size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
                    char *ndoc = (char*)malloc(ldoc + lptr + 10);
                    if (ndoc) {
                        char *buff = ndoc;
                        void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
                        if (ptr) {
                            strncpy(buff, methods[i].ml_doc, ldoc);
                            buff += ldoc;
                            strncpy(buff, "swig_ptr: ", 10);
                            buff += 10;
                            SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
                            methods[i].ml_doc = ndoc;
                        }
                    }
                }
            }
        }
    }
    
    /* -----------------------------------------------------------------------------*
     *  Initialize type list
     * -----------------------------------------------------------------------------*/
    
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIG_init(void) {
    static PyObject *SWIG_globals = 0; 
    PyObject *m, *d;
    if (!SWIG_globals) SWIG_globals = SWIG_newvarlink();
    
    /* Fix SwigMethods to carry the callback ptrs when needed */
    SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
    
    m = Py_InitModule((char *) SWIG_name, SwigMethods);
    d = PyModule_GetDict(m);
    
    SWIG_InitializeModule(0);
    SWIG_InstallConstants(d,swig_const_table);
    
    {
        PyDict_SetItemString(d,"Parameter_type_real", SWIG_From_int(static_cast<int >(dolfin::Parameter::type_real))); 
    }
    {
        PyDict_SetItemString(d,"Parameter_type_int", SWIG_From_int(static_cast<int >(dolfin::Parameter::type_int))); 
    }
    {
        PyDict_SetItemString(d,"Parameter_type_bool", SWIG_From_int(static_cast<int >(dolfin::Parameter::type_bool))); 
    }
    {
        PyDict_SetItemString(d,"Parameter_type_string", SWIG_From_int(static_cast<int >(dolfin::Parameter::type_string))); 
    }
    {
        PyDict_SetItemString(d,"File_xml", SWIG_From_int(static_cast<int >(dolfin::File::xml))); 
    }
    {
        PyDict_SetItemString(d,"File_matlab", SWIG_From_int(static_cast<int >(dolfin::File::matlab))); 
    }
    {
        PyDict_SetItemString(d,"File_matrixmarket", SWIG_From_int(static_cast<int >(dolfin::File::matrixmarket))); 
    }
    {
        PyDict_SetItemString(d,"File_octave", SWIG_From_int(static_cast<int >(dolfin::File::octave))); 
    }
    {
        PyDict_SetItemString(d,"File_opendx", SWIG_From_int(static_cast<int >(dolfin::File::opendx))); 
    }
    {
        PyDict_SetItemString(d,"File_gid", SWIG_From_int(static_cast<int >(dolfin::File::gid))); 
    }
    {
        PyDict_SetItemString(d,"File_tecplot", SWIG_From_int(static_cast<int >(dolfin::File::tecplot))); 
    }
    {
        PyDict_SetItemString(d,"File_vtk", SWIG_From_int(static_cast<int >(dolfin::File::vtk))); 
    }
    {
        PyDict_SetItemString(d,"File_python", SWIG_From_int(static_cast<int >(dolfin::File::python))); 
    }
    {
        PyDict_SetItemString(d,"Vector_l1", SWIG_From_int(static_cast<int >(dolfin::Vector::l1))); 
    }
    {
        PyDict_SetItemString(d,"Vector_l2", SWIG_From_int(static_cast<int >(dolfin::Vector::l2))); 
    }
    {
        PyDict_SetItemString(d,"Vector_linf", SWIG_From_int(static_cast<int >(dolfin::Vector::linf))); 
    }
    {
        PyDict_SetItemString(d,"Matrix_l1", SWIG_From_int(static_cast<int >(dolfin::Matrix::l1))); 
    }
    {
        PyDict_SetItemString(d,"Matrix_linf", SWIG_From_int(static_cast<int >(dolfin::Matrix::linf))); 
    }
    {
        PyDict_SetItemString(d,"Matrix_frobenius", SWIG_From_int(static_cast<int >(dolfin::Matrix::frobenius))); 
    }
    {
        PyDict_SetItemString(d,"KrylovSolver_bicgstab", SWIG_From_int(static_cast<int >(dolfin::KrylovSolver::bicgstab))); 
    }
    {
        PyDict_SetItemString(d,"KrylovSolver_cg", SWIG_From_int(static_cast<int >(dolfin::KrylovSolver::cg))); 
    }
    {
        PyDict_SetItemString(d,"KrylovSolver_default_solver", SWIG_From_int(static_cast<int >(dolfin::KrylovSolver::default_solver))); 
    }
    {
        PyDict_SetItemString(d,"KrylovSolver_gmres", SWIG_From_int(static_cast<int >(dolfin::KrylovSolver::gmres))); 
    }
    {
        PyDict_SetItemString(d,"Preconditioner_default_pc", SWIG_From_int(static_cast<int >(dolfin::Preconditioner::default_pc))); 
    }
    {
        PyDict_SetItemString(d,"Preconditioner_hypre_amg", SWIG_From_int(static_cast<int >(dolfin::Preconditioner::hypre_amg))); 
    }
    {
        PyDict_SetItemString(d,"Preconditioner_icc", SWIG_From_int(static_cast<int >(dolfin::Preconditioner::icc))); 
    }
    {
        PyDict_SetItemString(d,"Preconditioner_ilu", SWIG_From_int(static_cast<int >(dolfin::Preconditioner::ilu))); 
    }
    {
        PyDict_SetItemString(d,"Preconditioner_jacobi", SWIG_From_int(static_cast<int >(dolfin::Preconditioner::jacobi))); 
    }
    {
        PyDict_SetItemString(d,"Preconditioner_sor", SWIG_From_int(static_cast<int >(dolfin::Preconditioner::sor))); 
    }
    {
        PyDict_SetItemString(d,"Preconditioner_none", SWIG_From_int(static_cast<int >(dolfin::Preconditioner::none))); 
    }
    {
        PyDict_SetItemString(d,"Function_constant", SWIG_From_int(static_cast<int >(dolfin::Function::constant))); 
    }
    {
        PyDict_SetItemString(d,"Function_user", SWIG_From_int(static_cast<int >(dolfin::Function::user))); 
    }
    {
        PyDict_SetItemString(d,"Function_functionpointer", SWIG_From_int(static_cast<int >(dolfin::Function::functionpointer))); 
    }
    {
        PyDict_SetItemString(d,"Function_discrete", SWIG_From_int(static_cast<int >(dolfin::Function::discrete))); 
    }
    {
        PyDict_SetItemString(d,"Mesh_triangles", SWIG_From_int(static_cast<int >(dolfin::Mesh::triangles))); 
    }
    {
        PyDict_SetItemString(d,"Mesh_tetrahedra", SWIG_From_int(static_cast<int >(dolfin::Mesh::tetrahedra))); 
    }
    {
        PyDict_SetItemString(d,"Cell_triangle", SWIG_From_int(static_cast<int >(dolfin::Cell::triangle))); 
    }
    {
        PyDict_SetItemString(d,"Cell_tetrahedron", SWIG_From_int(static_cast<int >(dolfin::Cell::tetrahedron))); 
    }
    {
        PyDict_SetItemString(d,"Cell_none", SWIG_From_int(static_cast<int >(dolfin::Cell::none))); 
    }
    {
        PyDict_SetItemString(d,"Cell_left", SWIG_From_int(static_cast<int >(dolfin::Cell::left))); 
    }
    {
        PyDict_SetItemString(d,"Cell_right", SWIG_From_int(static_cast<int >(dolfin::Cell::right))); 
    }
    {
        PyDict_SetItemString(d,"HomotopyODE_ode", SWIG_From_int(static_cast<int >(dolfin::HomotopyODE::ode))); 
    }
    {
        PyDict_SetItemString(d,"HomotopyODE_endgame", SWIG_From_int(static_cast<int >(dolfin::HomotopyODE::endgame))); 
    }
    {
        PyDict_SetItemString(d,"Method_cG", SWIG_From_int(static_cast<int >(dolfin::Method::cG))); 
    }
    {
        PyDict_SetItemString(d,"Method_dG", SWIG_From_int(static_cast<int >(dolfin::Method::dG))); 
    }
    {
        PyDict_SetItemString(d,"Method_none", SWIG_From_int(static_cast<int >(dolfin::Method::none))); 
    }
}

